<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_3898_httpd-2.2.17.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">apr_status_t<pos:position pos:line="1" pos:column="13"/></name></type> <name pos:line="1" pos:column="14">apr_socket_sendfile<pos:position pos:line="1" pos:column="33"/></name><parameter_list pos:line="1" pos:column="33">(<parameter><decl><type><name pos:line="1" pos:column="34">apr_socket_t<pos:position pos:line="1" pos:column="46"/></name> <modifier pos:line="1" pos:column="47">*<pos:position pos:line="1" pos:column="48"/></modifier></type><name pos:line="1" pos:column="48">sock<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="54">apr_file_t<pos:position pos:line="1" pos:column="64"/></name> <modifier pos:line="1" pos:column="65">*<pos:position pos:line="1" pos:column="66"/></modifier></type><name pos:line="1" pos:column="66">file<pos:position pos:line="1" pos:column="70"/></name></decl></parameter>,
                                 <parameter><decl><type><name pos:line="2" pos:column="34">apr_hdtr_t<pos:position pos:line="2" pos:column="44"/></name> <modifier pos:line="2" pos:column="45">*<pos:position pos:line="2" pos:column="46"/></modifier></type><name pos:line="2" pos:column="46">hdtr<pos:position pos:line="2" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="52">apr_off_t<pos:position pos:line="2" pos:column="61"/></name> <modifier pos:line="2" pos:column="62">*<pos:position pos:line="2" pos:column="63"/></modifier></type><name pos:line="2" pos:column="63">offset<pos:position pos:line="2" pos:column="69"/></name></decl></parameter>,
                                 <parameter><decl><type><name pos:line="3" pos:column="34">apr_size_t<pos:position pos:line="3" pos:column="44"/></name> <modifier pos:line="3" pos:column="45">*<pos:position pos:line="3" pos:column="46"/></modifier></type><name pos:line="3" pos:column="46">len<pos:position pos:line="3" pos:column="49"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="51">apr_int32_t<pos:position pos:line="3" pos:column="62"/></name></type> <name pos:line="3" pos:column="63">flags<pos:position pos:line="3" pos:column="68"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="69"/></parameter_list>
<block pos:line="4" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">apr_off_t<pos:position pos:line="5" pos:column="14"/></name></type> <name pos:line="5" pos:column="15">nbytes<pos:position pos:line="5" pos:column="21"/></name> <init pos:line="5" pos:column="22">= <expr><literal type="number" pos:line="5" pos:column="24">0<pos:position pos:line="5" pos:column="25"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="26"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">apr_off_t<pos:position pos:line="6" pos:column="14"/></name></type> <name pos:line="6" pos:column="15">bytes_to_send<pos:position pos:line="6" pos:column="28"/></name> <init pos:line="6" pos:column="29">= <expr><operator pos:line="6" pos:column="31">*<pos:position pos:line="6" pos:column="32"/></operator><name pos:line="6" pos:column="32">len<pos:position pos:line="6" pos:column="35"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="36"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">apr_off_t<pos:position pos:line="7" pos:column="14"/></name></type> <name pos:line="7" pos:column="15">bytes_sent<pos:position pos:line="7" pos:column="25"/></name> <init pos:line="7" pos:column="26">= <expr><literal type="number" pos:line="7" pos:column="28">0<pos:position pos:line="7" pos:column="29"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="30"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">apr_status_t<pos:position pos:line="8" pos:column="17"/></name></type> <name pos:line="8" pos:column="18">arv<pos:position pos:line="8" pos:column="21"/></name></decl>;<pos:position pos:line="8" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">int<pos:position pos:line="9" pos:column="8"/></name></type> <name pos:line="9" pos:column="9">rv<pos:position pos:line="9" pos:column="11"/></name> <init pos:line="9" pos:column="12">= <expr><literal type="number" pos:line="9" pos:column="14">0<pos:position pos:line="9" pos:column="15"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="16"/></decl_stmt>

    <comment type="block" pos:line="11" pos:column="5">/* Ignore flags for now. */</comment>
    <expr_stmt><expr><name pos:line="12" pos:column="5">flags<pos:position pos:line="12" pos:column="10"/></name> <operator pos:line="12" pos:column="11">=<pos:position pos:line="12" pos:column="12"/></operator> <literal type="number" pos:line="12" pos:column="13">0<pos:position pos:line="12" pos:column="14"/></literal></expr>;<pos:position pos:line="12" pos:column="15"/></expr_stmt>

    <if pos:line="14" pos:column="5">if <condition pos:line="14" pos:column="8">(<expr><operator pos:line="14" pos:column="9">!<pos:position pos:line="14" pos:column="10"/></operator><name pos:line="14" pos:column="10">hdtr<pos:position pos:line="14" pos:column="14"/></name></expr>)<pos:position pos:line="14" pos:column="15"/></condition><then pos:line="14" pos:column="15"> <block pos:line="14" pos:column="16">{
        <expr_stmt><expr><name pos:line="15" pos:column="9">hdtr<pos:position pos:line="15" pos:column="13"/></name> <operator pos:line="15" pos:column="14">=<pos:position pos:line="15" pos:column="15"/></operator> <operator pos:line="15" pos:column="16">&amp;<pos:position pos:line="15" pos:column="21"/></operator><name pos:line="15" pos:column="17">no_hdtr<pos:position pos:line="15" pos:column="24"/></name></expr>;<pos:position pos:line="15" pos:column="25"/></expr_stmt>
    }<pos:position pos:line="16" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="18" pos:column="5">/* OS X can send the headers/footers as part of the system call, 
     * but how it counts bytes isn't documented properly. We use 
     * apr_socket_sendv() instead.
     */</comment>
     <if pos:line="22" pos:column="6">if <condition pos:line="22" pos:column="9">(<expr><name><name pos:line="22" pos:column="10">hdtr<pos:position pos:line="22" pos:column="14"/></name><operator pos:line="22" pos:column="14">-&gt;<pos:position pos:line="22" pos:column="19"/></operator><name pos:line="22" pos:column="16">numheaders<pos:position pos:line="22" pos:column="26"/></name></name> <operator pos:line="22" pos:column="27">&gt;<pos:position pos:line="22" pos:column="31"/></operator> <literal type="number" pos:line="22" pos:column="29">0<pos:position pos:line="22" pos:column="30"/></literal></expr>)<pos:position pos:line="22" pos:column="31"/></condition><then pos:line="22" pos:column="31"> <block pos:line="22" pos:column="32">{
        <decl_stmt><decl><type><name pos:line="23" pos:column="9">apr_size_t<pos:position pos:line="23" pos:column="19"/></name></type> <name pos:line="23" pos:column="20">hbytes<pos:position pos:line="23" pos:column="26"/></name></decl>;<pos:position pos:line="23" pos:column="27"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="24" pos:column="9">int<pos:position pos:line="24" pos:column="12"/></name></type> <name pos:line="24" pos:column="13">i<pos:position pos:line="24" pos:column="14"/></name></decl>;<pos:position pos:line="24" pos:column="15"/></decl_stmt>

        <comment type="block" pos:line="26" pos:column="9">/* Now write the headers */</comment>
        <expr_stmt><expr><name pos:line="27" pos:column="9">arv<pos:position pos:line="27" pos:column="12"/></name> <operator pos:line="27" pos:column="13">=<pos:position pos:line="27" pos:column="14"/></operator> <call><name pos:line="27" pos:column="15">apr_socket_sendv<pos:position pos:line="27" pos:column="31"/></name><argument_list pos:line="27" pos:column="31">(<argument><expr><name pos:line="27" pos:column="32">sock<pos:position pos:line="27" pos:column="36"/></name></expr></argument>, <argument><expr><name><name pos:line="27" pos:column="38">hdtr<pos:position pos:line="27" pos:column="42"/></name><operator pos:line="27" pos:column="42">-&gt;<pos:position pos:line="27" pos:column="47"/></operator><name pos:line="27" pos:column="44">headers<pos:position pos:line="27" pos:column="51"/></name></name></expr></argument>, <argument><expr><name><name pos:line="27" pos:column="53">hdtr<pos:position pos:line="27" pos:column="57"/></name><operator pos:line="27" pos:column="57">-&gt;<pos:position pos:line="27" pos:column="62"/></operator><name pos:line="27" pos:column="59">numheaders<pos:position pos:line="27" pos:column="69"/></name></name></expr></argument>,
                               <argument><expr><operator pos:line="28" pos:column="32">&amp;<pos:position pos:line="28" pos:column="37"/></operator><name pos:line="28" pos:column="33">hbytes<pos:position pos:line="28" pos:column="39"/></name></expr></argument>)<pos:position pos:line="28" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="41"/></expr_stmt>
        <if pos:line="29" pos:column="9">if <condition pos:line="29" pos:column="12">(<expr><name pos:line="29" pos:column="13">arv<pos:position pos:line="29" pos:column="16"/></name> <operator pos:line="29" pos:column="17">!=<pos:position pos:line="29" pos:column="19"/></operator> <name pos:line="29" pos:column="20">APR_SUCCESS<pos:position pos:line="29" pos:column="31"/></name></expr>)<pos:position pos:line="29" pos:column="32"/></condition><then pos:line="29" pos:column="32"> <block pos:line="29" pos:column="33">{
            <expr_stmt><expr><operator pos:line="30" pos:column="13">*<pos:position pos:line="30" pos:column="14"/></operator><name pos:line="30" pos:column="14">len<pos:position pos:line="30" pos:column="17"/></name> <operator pos:line="30" pos:column="18">=<pos:position pos:line="30" pos:column="19"/></operator> <literal type="number" pos:line="30" pos:column="20">0<pos:position pos:line="30" pos:column="21"/></literal></expr>;<pos:position pos:line="30" pos:column="22"/></expr_stmt>
            <return pos:line="31" pos:column="13">return <expr><name pos:line="31" pos:column="20">errno<pos:position pos:line="31" pos:column="25"/></name></expr>;<pos:position pos:line="31" pos:column="26"/></return>
        }<pos:position pos:line="32" pos:column="10"/></block></then></if>
        <expr_stmt><expr><name pos:line="33" pos:column="9">bytes_sent<pos:position pos:line="33" pos:column="19"/></name> <operator pos:line="33" pos:column="20">=<pos:position pos:line="33" pos:column="21"/></operator> <name pos:line="33" pos:column="22">hbytes<pos:position pos:line="33" pos:column="28"/></name></expr>;<pos:position pos:line="33" pos:column="29"/></expr_stmt>

        <expr_stmt><expr><name pos:line="35" pos:column="9">hbytes<pos:position pos:line="35" pos:column="15"/></name> <operator pos:line="35" pos:column="16">=<pos:position pos:line="35" pos:column="17"/></operator> <literal type="number" pos:line="35" pos:column="18">0<pos:position pos:line="35" pos:column="19"/></literal></expr>;<pos:position pos:line="35" pos:column="20"/></expr_stmt>
        <for pos:line="36" pos:column="9">for <control pos:line="36" pos:column="13">(<init><expr><name pos:line="36" pos:column="14">i<pos:position pos:line="36" pos:column="15"/></name> <operator pos:line="36" pos:column="16">=<pos:position pos:line="36" pos:column="17"/></operator> <literal type="number" pos:line="36" pos:column="18">0<pos:position pos:line="36" pos:column="19"/></literal></expr>;<pos:position pos:line="36" pos:column="20"/></init> <condition><expr><name pos:line="36" pos:column="21">i<pos:position pos:line="36" pos:column="22"/></name> <operator pos:line="36" pos:column="23">&lt;<pos:position pos:line="36" pos:column="27"/></operator> <name><name pos:line="36" pos:column="25">hdtr<pos:position pos:line="36" pos:column="29"/></name><operator pos:line="36" pos:column="29">-&gt;<pos:position pos:line="36" pos:column="34"/></operator><name pos:line="36" pos:column="31">numheaders<pos:position pos:line="36" pos:column="41"/></name></name></expr>;<pos:position pos:line="36" pos:column="42"/></condition> <incr><expr><name pos:line="36" pos:column="43">i<pos:position pos:line="36" pos:column="44"/></name><operator pos:line="36" pos:column="44">++<pos:position pos:line="36" pos:column="46"/></operator></expr></incr>)<pos:position pos:line="36" pos:column="47"/></control> <block pos:line="36" pos:column="48">{
            <expr_stmt><expr><name pos:line="37" pos:column="13">hbytes<pos:position pos:line="37" pos:column="19"/></name> <operator pos:line="37" pos:column="20">+=<pos:position pos:line="37" pos:column="22"/></operator> <name><name pos:line="37" pos:column="23">hdtr<pos:position pos:line="37" pos:column="27"/></name><operator pos:line="37" pos:column="27">-&gt;<pos:position pos:line="37" pos:column="32"/></operator><name pos:line="37" pos:column="29">headers<pos:position pos:line="37" pos:column="36"/></name><index pos:line="37" pos:column="36">[<expr><name pos:line="37" pos:column="37">i<pos:position pos:line="37" pos:column="38"/></name></expr>]<pos:position pos:line="37" pos:column="39"/></index></name><operator pos:line="37" pos:column="39">.<pos:position pos:line="37" pos:column="40"/></operator><name pos:line="37" pos:column="40">iov_len<pos:position pos:line="37" pos:column="47"/></name></expr>;<pos:position pos:line="37" pos:column="48"/></expr_stmt>
        }<pos:position pos:line="38" pos:column="10"/></block></for>
        <if pos:line="39" pos:column="9">if <condition pos:line="39" pos:column="12">(<expr><name pos:line="39" pos:column="13">bytes_sent<pos:position pos:line="39" pos:column="23"/></name> <operator pos:line="39" pos:column="24">&lt;<pos:position pos:line="39" pos:column="28"/></operator> <name pos:line="39" pos:column="26">hbytes<pos:position pos:line="39" pos:column="32"/></name></expr>)<pos:position pos:line="39" pos:column="33"/></condition><then pos:line="39" pos:column="33"> <block pos:line="39" pos:column="34">{
            <expr_stmt><expr><operator pos:line="40" pos:column="13">*<pos:position pos:line="40" pos:column="14"/></operator><name pos:line="40" pos:column="14">len<pos:position pos:line="40" pos:column="17"/></name> <operator pos:line="40" pos:column="18">=<pos:position pos:line="40" pos:column="19"/></operator> <name pos:line="40" pos:column="20">bytes_sent<pos:position pos:line="40" pos:column="30"/></name></expr>;<pos:position pos:line="40" pos:column="31"/></expr_stmt>
            <return pos:line="41" pos:column="13">return <expr><name pos:line="41" pos:column="20">APR_SUCCESS<pos:position pos:line="41" pos:column="31"/></name></expr>;<pos:position pos:line="41" pos:column="32"/></return>
        }<pos:position pos:line="42" pos:column="10"/></block></then></if>
    }<pos:position pos:line="43" pos:column="6"/></block></then></if>

    <do pos:line="45" pos:column="5">do <block pos:line="45" pos:column="8">{
        <if pos:line="46" pos:column="9">if <condition pos:line="46" pos:column="12">(<expr><operator pos:line="46" pos:column="13">!<pos:position pos:line="46" pos:column="14"/></operator><name pos:line="46" pos:column="14">bytes_to_send<pos:position pos:line="46" pos:column="27"/></name></expr>)<pos:position pos:line="46" pos:column="28"/></condition><then pos:line="46" pos:column="28"> <block pos:line="46" pos:column="29">{
            <break pos:line="47" pos:column="13">break;<pos:position pos:line="47" pos:column="19"/></break>
        }<pos:position pos:line="48" pos:column="10"/></block></then></if>
        <if pos:line="49" pos:column="9">if <condition pos:line="49" pos:column="12">(<expr><name><name pos:line="49" pos:column="13">sock<pos:position pos:line="49" pos:column="17"/></name><operator pos:line="49" pos:column="17">-&gt;<pos:position pos:line="49" pos:column="22"/></operator><name pos:line="49" pos:column="19">options<pos:position pos:line="49" pos:column="26"/></name></name> <operator pos:line="49" pos:column="27">&amp;<pos:position pos:line="49" pos:column="32"/></operator> <name pos:line="49" pos:column="29">APR_INCOMPLETE_WRITE<pos:position pos:line="49" pos:column="49"/></name></expr>)<pos:position pos:line="49" pos:column="50"/></condition><then pos:line="49" pos:column="50"> <block pos:line="49" pos:column="51">{
            <decl_stmt><decl><type><name pos:line="50" pos:column="13">apr_status_t<pos:position pos:line="50" pos:column="25"/></name></type> <name pos:line="50" pos:column="26">arv<pos:position pos:line="50" pos:column="29"/></name></decl>;<pos:position pos:line="50" pos:column="30"/></decl_stmt>
            <expr_stmt><expr><name><name pos:line="51" pos:column="13">sock<pos:position pos:line="51" pos:column="17"/></name><operator pos:line="51" pos:column="17">-&gt;<pos:position pos:line="51" pos:column="22"/></operator><name pos:line="51" pos:column="19">options<pos:position pos:line="51" pos:column="26"/></name></name> <operator pos:line="51" pos:column="27">&amp;=<pos:position pos:line="51" pos:column="33"/></operator> <operator pos:line="51" pos:column="30">~<pos:position pos:line="51" pos:column="31"/></operator><name pos:line="51" pos:column="31">APR_INCOMPLETE_WRITE<pos:position pos:line="51" pos:column="51"/></name></expr>;<pos:position pos:line="51" pos:column="52"/></expr_stmt>
            <expr_stmt><expr><name pos:line="52" pos:column="13">arv<pos:position pos:line="52" pos:column="16"/></name> <operator pos:line="52" pos:column="17">=<pos:position pos:line="52" pos:column="18"/></operator> <call><name pos:line="52" pos:column="19">apr_wait_for_io_or_timeout<pos:position pos:line="52" pos:column="45"/></name><argument_list pos:line="52" pos:column="45">(<argument><expr><name pos:line="52" pos:column="46">NULL<pos:position pos:line="52" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="52">sock<pos:position pos:line="52" pos:column="56"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="52" pos:column="58">0<pos:position pos:line="52" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="52" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="61"/></expr_stmt>
            <if pos:line="53" pos:column="13">if <condition pos:line="53" pos:column="16">(<expr><name pos:line="53" pos:column="17">arv<pos:position pos:line="53" pos:column="20"/></name> <operator pos:line="53" pos:column="21">!=<pos:position pos:line="53" pos:column="23"/></operator> <name pos:line="53" pos:column="24">APR_SUCCESS<pos:position pos:line="53" pos:column="35"/></name></expr>)<pos:position pos:line="53" pos:column="36"/></condition><then pos:line="53" pos:column="36"> <block pos:line="53" pos:column="37">{
                <expr_stmt><expr><operator pos:line="54" pos:column="17">*<pos:position pos:line="54" pos:column="18"/></operator><name pos:line="54" pos:column="18">len<pos:position pos:line="54" pos:column="21"/></name> <operator pos:line="54" pos:column="22">=<pos:position pos:line="54" pos:column="23"/></operator> <literal type="number" pos:line="54" pos:column="24">0<pos:position pos:line="54" pos:column="25"/></literal></expr>;<pos:position pos:line="54" pos:column="26"/></expr_stmt>
                <return pos:line="55" pos:column="17">return <expr><name pos:line="55" pos:column="24">arv<pos:position pos:line="55" pos:column="27"/></name></expr>;<pos:position pos:line="55" pos:column="28"/></return>
            }<pos:position pos:line="56" pos:column="14"/></block></then></if>
        }<pos:position pos:line="57" pos:column="10"/></block></then></if>

        <expr_stmt><expr><name pos:line="59" pos:column="9">nbytes<pos:position pos:line="59" pos:column="15"/></name> <operator pos:line="59" pos:column="16">=<pos:position pos:line="59" pos:column="17"/></operator> <name pos:line="59" pos:column="18">bytes_to_send<pos:position pos:line="59" pos:column="31"/></name></expr>;<pos:position pos:line="59" pos:column="32"/></expr_stmt>
        <expr_stmt><expr><name pos:line="60" pos:column="9">rv<pos:position pos:line="60" pos:column="11"/></name> <operator pos:line="60" pos:column="12">=<pos:position pos:line="60" pos:column="13"/></operator> <call><name pos:line="60" pos:column="14">sendfile<pos:position pos:line="60" pos:column="22"/></name><argument_list pos:line="60" pos:column="22">(<argument><expr><name><name pos:line="60" pos:column="23">file<pos:position pos:line="60" pos:column="27"/></name><operator pos:line="60" pos:column="27">-&gt;<pos:position pos:line="60" pos:column="32"/></operator><name pos:line="60" pos:column="29">filedes<pos:position pos:line="60" pos:column="36"/></name></name></expr></argument>, <comment type="block" pos:line="60" pos:column="38">/* file to be sent */</comment>
                      <argument><expr><name><name pos:line="61" pos:column="23">sock<pos:position pos:line="61" pos:column="27"/></name><operator pos:line="61" pos:column="27">-&gt;<pos:position pos:line="61" pos:column="32"/></operator><name pos:line="61" pos:column="29">socketdes<pos:position pos:line="61" pos:column="38"/></name></name></expr></argument>, <comment type="block" pos:line="61" pos:column="40">/* socket */</comment>
                      <argument><expr><operator pos:line="62" pos:column="23">*<pos:position pos:line="62" pos:column="24"/></operator><name pos:line="62" pos:column="24">offset<pos:position pos:line="62" pos:column="30"/></name></expr></argument>,       <comment type="block" pos:line="62" pos:column="38">/* where in the file to start */</comment>
                      <argument><expr><operator pos:line="63" pos:column="23">&amp;<pos:position pos:line="63" pos:column="28"/></operator><name pos:line="63" pos:column="24">nbytes<pos:position pos:line="63" pos:column="30"/></name></expr></argument>,       <comment type="block" pos:line="63" pos:column="38">/* number of bytes to write/written */</comment>
                      <argument><expr><name pos:line="64" pos:column="23">NULL<pos:position pos:line="64" pos:column="27"/></name></expr></argument>,          <comment type="block" pos:line="64" pos:column="38">/* Headers/footers */</comment>
                      <argument><expr><name pos:line="65" pos:column="23">flags<pos:position pos:line="65" pos:column="28"/></name></expr></argument>)<pos:position pos:line="65" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="30"/></expr_stmt>        <comment type="block" pos:line="65" pos:column="38">/* undefined, set to 0 */</comment>

        <if pos:line="67" pos:column="9">if <condition pos:line="67" pos:column="12">(<expr><name pos:line="67" pos:column="13">rv<pos:position pos:line="67" pos:column="15"/></name> <operator pos:line="67" pos:column="16">==<pos:position pos:line="67" pos:column="18"/></operator> <operator pos:line="67" pos:column="19">-<pos:position pos:line="67" pos:column="20"/></operator><literal type="number" pos:line="67" pos:column="20">1<pos:position pos:line="67" pos:column="21"/></literal></expr>)<pos:position pos:line="67" pos:column="22"/></condition><then pos:line="67" pos:column="22"> <block pos:line="67" pos:column="23">{
            <if pos:line="68" pos:column="13">if <condition pos:line="68" pos:column="16">(<expr><name pos:line="68" pos:column="17">errno<pos:position pos:line="68" pos:column="22"/></name> <operator pos:line="68" pos:column="23">==<pos:position pos:line="68" pos:column="25"/></operator> <name pos:line="68" pos:column="26">EAGAIN<pos:position pos:line="68" pos:column="32"/></name></expr>)<pos:position pos:line="68" pos:column="33"/></condition><then pos:line="68" pos:column="33"> <block pos:line="68" pos:column="34">{
                <if pos:line="69" pos:column="17">if <condition pos:line="69" pos:column="20">(<expr><name><name pos:line="69" pos:column="21">sock<pos:position pos:line="69" pos:column="25"/></name><operator pos:line="69" pos:column="25">-&gt;<pos:position pos:line="69" pos:column="30"/></operator><name pos:line="69" pos:column="27">timeout<pos:position pos:line="69" pos:column="34"/></name></name> <operator pos:line="69" pos:column="35">&gt;<pos:position pos:line="69" pos:column="39"/></operator> <literal type="number" pos:line="69" pos:column="37">0<pos:position pos:line="69" pos:column="38"/></literal></expr>)<pos:position pos:line="69" pos:column="39"/></condition><then pos:line="69" pos:column="39"> <block pos:line="69" pos:column="40">{
                    <expr_stmt><expr><name><name pos:line="70" pos:column="21">sock<pos:position pos:line="70" pos:column="25"/></name><operator pos:line="70" pos:column="25">-&gt;<pos:position pos:line="70" pos:column="30"/></operator><name pos:line="70" pos:column="27">options<pos:position pos:line="70" pos:column="34"/></name></name> <operator pos:line="70" pos:column="35">|=<pos:position pos:line="70" pos:column="37"/></operator> <name pos:line="70" pos:column="38">APR_INCOMPLETE_WRITE<pos:position pos:line="70" pos:column="58"/></name></expr>;<pos:position pos:line="70" pos:column="59"/></expr_stmt>
                }<pos:position pos:line="71" pos:column="18"/></block></then></if>
                <comment type="block" pos:line="72" pos:column="17">/* BSD's sendfile can return -1/EAGAIN even if it
                 * sent bytes.  Sanitize the result so we get normal EAGAIN
                 * semantics w.r.t. bytes sent.
                 */</comment>
                <if pos:line="76" pos:column="17">if <condition pos:line="76" pos:column="20">(<expr><name pos:line="76" pos:column="21">nbytes<pos:position pos:line="76" pos:column="27"/></name></expr>)<pos:position pos:line="76" pos:column="28"/></condition><then pos:line="76" pos:column="28"> <block pos:line="76" pos:column="29">{
                    <expr_stmt><expr><name pos:line="77" pos:column="21">bytes_sent<pos:position pos:line="77" pos:column="31"/></name> <operator pos:line="77" pos:column="32">+=<pos:position pos:line="77" pos:column="34"/></operator> <name pos:line="77" pos:column="35">nbytes<pos:position pos:line="77" pos:column="41"/></name></expr>;<pos:position pos:line="77" pos:column="42"/></expr_stmt>
                    <comment type="block" pos:line="78" pos:column="21">/* normal exit for a big file &amp; non-blocking io */</comment>
                    <expr_stmt><expr><operator pos:line="79" pos:column="21">(<pos:position pos:line="79" pos:column="22"/></operator><operator pos:line="79" pos:column="22">*<pos:position pos:line="79" pos:column="23"/></operator><name pos:line="79" pos:column="23">len<pos:position pos:line="79" pos:column="26"/></name><operator pos:line="79" pos:column="26">)<pos:position pos:line="79" pos:column="27"/></operator> <operator pos:line="79" pos:column="28">=<pos:position pos:line="79" pos:column="29"/></operator> <name pos:line="79" pos:column="30">bytes_sent<pos:position pos:line="79" pos:column="40"/></name></expr>;<pos:position pos:line="79" pos:column="41"/></expr_stmt>
                    <return pos:line="80" pos:column="21">return <expr><name pos:line="80" pos:column="28">APR_SUCCESS<pos:position pos:line="80" pos:column="39"/></name></expr>;<pos:position pos:line="80" pos:column="40"/></return>
                }<pos:position pos:line="81" pos:column="18"/></block></then></if>
            }<pos:position pos:line="82" pos:column="14"/></block></then></if>
        }<pos:position pos:line="83" pos:column="10"/></block></then>
        <else pos:line="84" pos:column="9">else <block pos:line="84" pos:column="14">{       <comment type="block" pos:line="84" pos:column="22">/* rv == 0 (or the kernel is broken) */</comment>
            <expr_stmt><expr><name pos:line="85" pos:column="13">bytes_sent<pos:position pos:line="85" pos:column="23"/></name> <operator pos:line="85" pos:column="24">+=<pos:position pos:line="85" pos:column="26"/></operator> <name pos:line="85" pos:column="27">nbytes<pos:position pos:line="85" pos:column="33"/></name></expr>;<pos:position pos:line="85" pos:column="34"/></expr_stmt>
            <if pos:line="86" pos:column="13">if <condition pos:line="86" pos:column="16">(<expr><name pos:line="86" pos:column="17">nbytes<pos:position pos:line="86" pos:column="23"/></name> <operator pos:line="86" pos:column="24">==<pos:position pos:line="86" pos:column="26"/></operator> <literal type="number" pos:line="86" pos:column="27">0<pos:position pos:line="86" pos:column="28"/></literal></expr>)<pos:position pos:line="86" pos:column="29"/></condition><then pos:line="86" pos:column="29"> <block pos:line="86" pos:column="30">{
                <comment type="block" pos:line="87" pos:column="17">/* Most likely the file got smaller after the stat.
                 * Return an error so the caller can do the Right Thing.
                 */</comment>
                <expr_stmt><expr><operator pos:line="90" pos:column="17">(<pos:position pos:line="90" pos:column="18"/></operator><operator pos:line="90" pos:column="18">*<pos:position pos:line="90" pos:column="19"/></operator><name pos:line="90" pos:column="19">len<pos:position pos:line="90" pos:column="22"/></name><operator pos:line="90" pos:column="22">)<pos:position pos:line="90" pos:column="23"/></operator> <operator pos:line="90" pos:column="24">=<pos:position pos:line="90" pos:column="25"/></operator> <name pos:line="90" pos:column="26">bytes_sent<pos:position pos:line="90" pos:column="36"/></name></expr>;<pos:position pos:line="90" pos:column="37"/></expr_stmt>
                <return pos:line="91" pos:column="17">return <expr><name pos:line="91" pos:column="24">APR_EOF<pos:position pos:line="91" pos:column="31"/></name></expr>;<pos:position pos:line="91" pos:column="32"/></return>
            }<pos:position pos:line="92" pos:column="14"/></block></then></if>
        }<pos:position pos:line="93" pos:column="10"/></block></else></if>
    }<pos:position pos:line="94" pos:column="6"/></block> while <condition pos:line="94" pos:column="13">(<expr><name pos:line="94" pos:column="14">rv<pos:position pos:line="94" pos:column="16"/></name> <operator pos:line="94" pos:column="17">==<pos:position pos:line="94" pos:column="19"/></operator> <operator pos:line="94" pos:column="20">-<pos:position pos:line="94" pos:column="21"/></operator><literal type="number" pos:line="94" pos:column="21">1<pos:position pos:line="94" pos:column="22"/></literal> <operator pos:line="94" pos:column="23">&amp;&amp;<pos:position pos:line="94" pos:column="33"/></operator> <operator pos:line="94" pos:column="26">(<pos:position pos:line="94" pos:column="27"/></operator><name pos:line="94" pos:column="27">errno<pos:position pos:line="94" pos:column="32"/></name> <operator pos:line="94" pos:column="33">==<pos:position pos:line="94" pos:column="35"/></operator> <name pos:line="94" pos:column="36">EINTR<pos:position pos:line="94" pos:column="41"/></name> <operator pos:line="94" pos:column="42">||<pos:position pos:line="94" pos:column="44"/></operator> <name pos:line="94" pos:column="45">errno<pos:position pos:line="94" pos:column="50"/></name> <operator pos:line="94" pos:column="51">==<pos:position pos:line="94" pos:column="53"/></operator> <name pos:line="94" pos:column="54">EAGAIN<pos:position pos:line="94" pos:column="60"/></name><operator pos:line="94" pos:column="60">)<pos:position pos:line="94" pos:column="61"/></operator></expr>)<pos:position pos:line="94" pos:column="62"/></condition>;<pos:position pos:line="94" pos:column="63"/></do>

    <comment type="block" pos:line="96" pos:column="5">/* Now write the footers */</comment>
    <if pos:line="97" pos:column="5">if <condition pos:line="97" pos:column="8">(<expr><name><name pos:line="97" pos:column="9">hdtr<pos:position pos:line="97" pos:column="13"/></name><operator pos:line="97" pos:column="13">-&gt;<pos:position pos:line="97" pos:column="18"/></operator><name pos:line="97" pos:column="15">numtrailers<pos:position pos:line="97" pos:column="26"/></name></name> <operator pos:line="97" pos:column="27">&gt;<pos:position pos:line="97" pos:column="31"/></operator> <literal type="number" pos:line="97" pos:column="29">0<pos:position pos:line="97" pos:column="30"/></literal></expr>)<pos:position pos:line="97" pos:column="31"/></condition><then pos:line="97" pos:column="31"> <block pos:line="97" pos:column="32">{
        <decl_stmt><decl><type><name pos:line="98" pos:column="9">apr_size_t<pos:position pos:line="98" pos:column="19"/></name></type> <name pos:line="98" pos:column="20">tbytes<pos:position pos:line="98" pos:column="26"/></name></decl>;<pos:position pos:line="98" pos:column="27"/></decl_stmt>
        <expr_stmt><expr><name pos:line="99" pos:column="9">arv<pos:position pos:line="99" pos:column="12"/></name> <operator pos:line="99" pos:column="13">=<pos:position pos:line="99" pos:column="14"/></operator> <call><name pos:line="99" pos:column="15">apr_socket_sendv<pos:position pos:line="99" pos:column="31"/></name><argument_list pos:line="99" pos:column="31">(<argument><expr><name pos:line="99" pos:column="32">sock<pos:position pos:line="99" pos:column="36"/></name></expr></argument>, <argument><expr><name><name pos:line="99" pos:column="38">hdtr<pos:position pos:line="99" pos:column="42"/></name><operator pos:line="99" pos:column="42">-&gt;<pos:position pos:line="99" pos:column="47"/></operator><name pos:line="99" pos:column="44">trailers<pos:position pos:line="99" pos:column="52"/></name></name></expr></argument>, <argument><expr><name><name pos:line="99" pos:column="54">hdtr<pos:position pos:line="99" pos:column="58"/></name><operator pos:line="99" pos:column="58">-&gt;<pos:position pos:line="99" pos:column="63"/></operator><name pos:line="99" pos:column="60">numtrailers<pos:position pos:line="99" pos:column="71"/></name></name></expr></argument>, 
                               <argument><expr><operator pos:line="100" pos:column="32">&amp;<pos:position pos:line="100" pos:column="37"/></operator><name pos:line="100" pos:column="33">tbytes<pos:position pos:line="100" pos:column="39"/></name></expr></argument>)<pos:position pos:line="100" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="100" pos:column="41"/></expr_stmt>
        <expr_stmt><expr><name pos:line="101" pos:column="9">bytes_sent<pos:position pos:line="101" pos:column="19"/></name> <operator pos:line="101" pos:column="20">+=<pos:position pos:line="101" pos:column="22"/></operator> <name pos:line="101" pos:column="23">tbytes<pos:position pos:line="101" pos:column="29"/></name></expr>;<pos:position pos:line="101" pos:column="30"/></expr_stmt>
        <if pos:line="102" pos:column="9">if <condition pos:line="102" pos:column="12">(<expr><name pos:line="102" pos:column="13">arv<pos:position pos:line="102" pos:column="16"/></name> <operator pos:line="102" pos:column="17">!=<pos:position pos:line="102" pos:column="19"/></operator> <name pos:line="102" pos:column="20">APR_SUCCESS<pos:position pos:line="102" pos:column="31"/></name></expr>)<pos:position pos:line="102" pos:column="32"/></condition><then pos:line="102" pos:column="32"> <block pos:line="102" pos:column="33">{
            <expr_stmt><expr><operator pos:line="103" pos:column="13">*<pos:position pos:line="103" pos:column="14"/></operator><name pos:line="103" pos:column="14">len<pos:position pos:line="103" pos:column="17"/></name> <operator pos:line="103" pos:column="18">=<pos:position pos:line="103" pos:column="19"/></operator> <name pos:line="103" pos:column="20">bytes_sent<pos:position pos:line="103" pos:column="30"/></name></expr>;<pos:position pos:line="103" pos:column="31"/></expr_stmt>
            <expr_stmt><expr><name pos:line="104" pos:column="13">rv<pos:position pos:line="104" pos:column="15"/></name> <operator pos:line="104" pos:column="16">=<pos:position pos:line="104" pos:column="17"/></operator> <name pos:line="104" pos:column="18">errno<pos:position pos:line="104" pos:column="23"/></name></expr>;<pos:position pos:line="104" pos:column="24"/></expr_stmt>
            <return pos:line="105" pos:column="13">return <expr><name pos:line="105" pos:column="20">rv<pos:position pos:line="105" pos:column="22"/></name></expr>;<pos:position pos:line="105" pos:column="23"/></return>
        }<pos:position pos:line="106" pos:column="10"/></block></then></if>
    }<pos:position pos:line="107" pos:column="6"/></block></then></if>

    <expr_stmt><expr><operator pos:line="109" pos:column="5">(<pos:position pos:line="109" pos:column="6"/></operator><operator pos:line="109" pos:column="6">*<pos:position pos:line="109" pos:column="7"/></operator><name pos:line="109" pos:column="7">len<pos:position pos:line="109" pos:column="10"/></name><operator pos:line="109" pos:column="10">)<pos:position pos:line="109" pos:column="11"/></operator> <operator pos:line="109" pos:column="12">=<pos:position pos:line="109" pos:column="13"/></operator> <name pos:line="109" pos:column="14">bytes_sent<pos:position pos:line="109" pos:column="24"/></name></expr>;<pos:position pos:line="109" pos:column="25"/></expr_stmt>
    <if pos:line="110" pos:column="5">if <condition pos:line="110" pos:column="8">(<expr><name pos:line="110" pos:column="9">rv<pos:position pos:line="110" pos:column="11"/></name> <operator pos:line="110" pos:column="12">==<pos:position pos:line="110" pos:column="14"/></operator> <operator pos:line="110" pos:column="15">-<pos:position pos:line="110" pos:column="16"/></operator><literal type="number" pos:line="110" pos:column="16">1<pos:position pos:line="110" pos:column="17"/></literal></expr>)<pos:position pos:line="110" pos:column="18"/></condition><then pos:line="110" pos:column="18"> <block pos:line="110" pos:column="19">{
        <return pos:line="111" pos:column="9">return <expr><name pos:line="111" pos:column="16">errno<pos:position pos:line="111" pos:column="21"/></name></expr>;<pos:position pos:line="111" pos:column="22"/></return>
    }<pos:position pos:line="112" pos:column="6"/></block></then></if>
    <return pos:line="113" pos:column="5">return <expr><name pos:line="113" pos:column="12">APR_SUCCESS<pos:position pos:line="113" pos:column="23"/></name></expr>;<pos:position pos:line="113" pos:column="24"/></return>
}<pos:position pos:line="114" pos:column="2"/></block></function></unit>
