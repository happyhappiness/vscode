<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_function_7364.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">lua_websocket_write<pos:position pos:line="1" pos:column="31"/></name><parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><name pos:line="1" pos:column="32">lua_State<pos:position pos:line="1" pos:column="41"/></name> <modifier pos:line="1" pos:column="42">*<pos:position pos:line="1" pos:column="43"/></modifier></type><name pos:line="1" pos:column="43">L<pos:position pos:line="1" pos:column="44"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="45"/></parameter_list> 
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><specifier pos:line="3" pos:column="5">const<pos:position pos:line="3" pos:column="10"/></specifier> <name pos:line="3" pos:column="11">char<pos:position pos:line="3" pos:column="15"/></name> <modifier pos:line="3" pos:column="16">*<pos:position pos:line="3" pos:column="17"/></modifier></type><name pos:line="3" pos:column="17">string<pos:position pos:line="3" pos:column="23"/></name></decl>;<pos:position pos:line="3" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">apr_status_t<pos:position pos:line="4" pos:column="17"/></name></type> <name pos:line="4" pos:column="18">rv<pos:position pos:line="4" pos:column="20"/></name></decl>;<pos:position pos:line="4" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">size_t<pos:position pos:line="5" pos:column="11"/></name></type> <name pos:line="5" pos:column="12">len<pos:position pos:line="5" pos:column="15"/></name></decl>;<pos:position pos:line="5" pos:column="16"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">int<pos:position pos:line="6" pos:column="8"/></name></type> <name pos:line="6" pos:column="9">raw<pos:position pos:line="6" pos:column="12"/></name> <init pos:line="6" pos:column="13">= <expr><literal type="number" pos:line="6" pos:column="15">0<pos:position pos:line="6" pos:column="16"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="17"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">char<pos:position pos:line="7" pos:column="9"/></name></type> <name pos:line="7" pos:column="10">prelude<pos:position pos:line="7" pos:column="17"/></name></decl>;<pos:position pos:line="7" pos:column="18"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">request_rec<pos:position pos:line="8" pos:column="16"/></name> <modifier pos:line="8" pos:column="17">*<pos:position pos:line="8" pos:column="18"/></modifier></type><name pos:line="8" pos:column="18">r<pos:position pos:line="8" pos:column="19"/></name> <init pos:line="8" pos:column="20">= <expr><operator pos:line="8" pos:column="22">(<pos:position pos:line="8" pos:column="23"/></operator><name pos:line="8" pos:column="23">request_rec<pos:position pos:line="8" pos:column="34"/></name> <operator pos:line="8" pos:column="35">*<pos:position pos:line="8" pos:column="36"/></operator><operator pos:line="8" pos:column="36">)<pos:position pos:line="8" pos:column="37"/></operator> <call><name pos:line="8" pos:column="38">lua_unboxpointer<pos:position pos:line="8" pos:column="54"/></name><argument_list pos:line="8" pos:column="54">(<argument><expr><name pos:line="8" pos:column="55">L<pos:position pos:line="8" pos:column="56"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="8" pos:column="58">1<pos:position pos:line="8" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="60"/></argument_list></call></expr></init></decl>;<pos:position pos:line="8" pos:column="61"/></decl_stmt>
    
    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><call><name pos:line="10" pos:column="9">lua_isboolean<pos:position pos:line="10" pos:column="22"/></name><argument_list pos:line="10" pos:column="22">(<argument><expr><name pos:line="10" pos:column="23">L<pos:position pos:line="10" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="10" pos:column="26">3<pos:position pos:line="10" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="28"/></argument_list></call></expr>)<pos:position pos:line="10" pos:column="29"/></condition><then pos:line="10" pos:column="29"> <block pos:line="10" pos:column="30">{
        <expr_stmt><expr><name pos:line="11" pos:column="9">raw<pos:position pos:line="11" pos:column="12"/></name> <operator pos:line="11" pos:column="13">=<pos:position pos:line="11" pos:column="14"/></operator> <call><name pos:line="11" pos:column="15">lua_toboolean<pos:position pos:line="11" pos:column="28"/></name><argument_list pos:line="11" pos:column="28">(<argument><expr><name pos:line="11" pos:column="29">L<pos:position pos:line="11" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="11" pos:column="32">3<pos:position pos:line="11" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="35"/></expr_stmt>
    }<pos:position pos:line="12" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="13" pos:column="5">string<pos:position pos:line="13" pos:column="11"/></name> <operator pos:line="13" pos:column="12">=<pos:position pos:line="13" pos:column="13"/></operator> <call><name pos:line="13" pos:column="14">lua_tolstring<pos:position pos:line="13" pos:column="27"/></name><argument_list pos:line="13" pos:column="27">(<argument><expr><name pos:line="13" pos:column="28">L<pos:position pos:line="13" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="13" pos:column="31">2<pos:position pos:line="13" pos:column="32"/></literal></expr></argument>, <argument><expr><operator pos:line="13" pos:column="34">&amp;<pos:position pos:line="13" pos:column="39"/></operator><name pos:line="13" pos:column="35">len<pos:position pos:line="13" pos:column="38"/></name></expr></argument>)<pos:position pos:line="13" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="40"/></expr_stmt>
    
    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><name pos:line="15" pos:column="9">raw<pos:position pos:line="15" pos:column="12"/></name> <operator pos:line="15" pos:column="13">!=<pos:position pos:line="15" pos:column="15"/></operator> <literal type="number" pos:line="15" pos:column="16">1<pos:position pos:line="15" pos:column="17"/></literal></expr>)<pos:position pos:line="15" pos:column="18"/></condition><then pos:line="15" pos:column="18"> <block pos:line="15" pos:column="19">{
        <expr_stmt><expr><call><name pos:line="16" pos:column="9">ap_log_rerror<pos:position pos:line="16" pos:column="22"/></name><argument_list pos:line="16" pos:column="22">(<argument><expr><name pos:line="16" pos:column="23">APLOG_MARK<pos:position pos:line="16" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="35">APLOG_DEBUG<pos:position pos:line="16" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="16" pos:column="48">0<pos:position pos:line="16" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="16" pos:column="51">r<pos:position pos:line="16" pos:column="52"/></name></expr></argument>, 
                        <argument><expr><literal type="string" pos:line="17" pos:column="25">"Websocket: Writing framed message to client"<pos:position pos:line="17" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="72"/></expr_stmt>
        
        <expr_stmt><expr><name pos:line="19" pos:column="9">prelude<pos:position pos:line="19" pos:column="16"/></name> <operator pos:line="19" pos:column="17">=<pos:position pos:line="19" pos:column="18"/></operator> <literal type="number" pos:line="19" pos:column="19">0x81<pos:position pos:line="19" pos:column="23"/></literal></expr>;<pos:position pos:line="19" pos:column="24"/></expr_stmt> <comment type="block" pos:line="19" pos:column="25">/* text frame, FIN */</comment>
        <expr_stmt><expr><call><name pos:line="20" pos:column="9">ap_rputc<pos:position pos:line="20" pos:column="17"/></name><argument_list pos:line="20" pos:column="17">(<argument><expr><name pos:line="20" pos:column="18">prelude<pos:position pos:line="20" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="27">r<pos:position pos:line="20" pos:column="28"/></name></expr></argument>)<pos:position pos:line="20" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="30"/></expr_stmt>
        <if pos:line="21" pos:column="9">if <condition pos:line="21" pos:column="12">(<expr><name pos:line="21" pos:column="13">len<pos:position pos:line="21" pos:column="16"/></name> <operator pos:line="21" pos:column="17">&lt;<pos:position pos:line="21" pos:column="21"/></operator> <literal type="number" pos:line="21" pos:column="19">126<pos:position pos:line="21" pos:column="22"/></literal></expr>)<pos:position pos:line="21" pos:column="23"/></condition><then pos:line="21" pos:column="23"> <block pos:line="21" pos:column="24">{
            <expr_stmt><expr><call><name pos:line="22" pos:column="13">ap_rputc<pos:position pos:line="22" pos:column="21"/></name><argument_list pos:line="22" pos:column="21">(<argument><expr><name pos:line="22" pos:column="22">len<pos:position pos:line="22" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="27">r<pos:position pos:line="22" pos:column="28"/></name></expr></argument>)<pos:position pos:line="22" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="30"/></expr_stmt>
        }<pos:position pos:line="23" pos:column="10"/></block></then> 
        <elseif pos:line="24" pos:column="9">else <if pos:line="24" pos:column="14">if <condition pos:line="24" pos:column="17">(<expr><name pos:line="24" pos:column="18">len<pos:position pos:line="24" pos:column="21"/></name> <operator pos:line="24" pos:column="22">&lt;<pos:position pos:line="24" pos:column="26"/></operator> <literal type="number" pos:line="24" pos:column="24">65535<pos:position pos:line="24" pos:column="29"/></literal></expr>)<pos:position pos:line="24" pos:column="30"/></condition><then pos:line="24" pos:column="30"> <block pos:line="24" pos:column="31">{
            <decl_stmt><decl><type><name pos:line="25" pos:column="13">apr_uint16_t<pos:position pos:line="25" pos:column="25"/></name></type> <name pos:line="25" pos:column="26">slen<pos:position pos:line="25" pos:column="30"/></name> <init pos:line="25" pos:column="31">= <expr><name pos:line="25" pos:column="33">len<pos:position pos:line="25" pos:column="36"/></name></expr></init></decl>;<pos:position pos:line="25" pos:column="37"/></decl_stmt>
            <expr_stmt><expr><call><name pos:line="26" pos:column="13">ap_rputc<pos:position pos:line="26" pos:column="21"/></name><argument_list pos:line="26" pos:column="21">(<argument><expr><literal type="number" pos:line="26" pos:column="22">126<pos:position pos:line="26" pos:column="25"/></literal></expr></argument>, <argument><expr><name pos:line="26" pos:column="27">r<pos:position pos:line="26" pos:column="28"/></name></expr></argument>)<pos:position pos:line="26" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="30"/></expr_stmt> 
            <expr_stmt><expr><name pos:line="27" pos:column="13">slen<pos:position pos:line="27" pos:column="17"/></name> <operator pos:line="27" pos:column="18">=<pos:position pos:line="27" pos:column="19"/></operator> <call><name pos:line="27" pos:column="20">htons<pos:position pos:line="27" pos:column="25"/></name><argument_list pos:line="27" pos:column="25">(<argument><expr><name pos:line="27" pos:column="26">slen<pos:position pos:line="27" pos:column="30"/></name></expr></argument>)<pos:position pos:line="27" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="32"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="28" pos:column="13">ap_rwrite<pos:position pos:line="28" pos:column="22"/></name><argument_list pos:line="28" pos:column="22">(<argument><expr><operator pos:line="28" pos:column="23">(<pos:position pos:line="28" pos:column="24"/></operator><name pos:line="28" pos:column="24">char<pos:position pos:line="28" pos:column="28"/></name><operator pos:line="28" pos:column="28">*<pos:position pos:line="28" pos:column="29"/></operator><operator pos:line="28" pos:column="29">)<pos:position pos:line="28" pos:column="30"/></operator> <operator pos:line="28" pos:column="31">&amp;<pos:position pos:line="28" pos:column="36"/></operator><name pos:line="28" pos:column="32">slen<pos:position pos:line="28" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="28" pos:column="38">2<pos:position pos:line="28" pos:column="39"/></literal></expr></argument>, <argument><expr><name pos:line="28" pos:column="41">r<pos:position pos:line="28" pos:column="42"/></name></expr></argument>)<pos:position pos:line="28" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="44"/></expr_stmt>
        }<pos:position pos:line="29" pos:column="10"/></block></then></if></elseif>
        <else pos:line="30" pos:column="9">else <block pos:line="30" pos:column="14">{
            <decl_stmt><decl><type><name pos:line="31" pos:column="13">apr_uint64_t<pos:position pos:line="31" pos:column="25"/></name></type> <name pos:line="31" pos:column="26">llen<pos:position pos:line="31" pos:column="30"/></name> <init pos:line="31" pos:column="31">= <expr><name pos:line="31" pos:column="33">len<pos:position pos:line="31" pos:column="36"/></name></expr></init></decl>;<pos:position pos:line="31" pos:column="37"/></decl_stmt>
            <expr_stmt><expr><call><name pos:line="32" pos:column="13">ap_rputc<pos:position pos:line="32" pos:column="21"/></name><argument_list pos:line="32" pos:column="21">(<argument><expr><literal type="number" pos:line="32" pos:column="22">127<pos:position pos:line="32" pos:column="25"/></literal></expr></argument>, <argument><expr><name pos:line="32" pos:column="27">r<pos:position pos:line="32" pos:column="28"/></name></expr></argument>)<pos:position pos:line="32" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="30"/></expr_stmt>
            <expr_stmt><expr><name pos:line="33" pos:column="13">llen<pos:position pos:line="33" pos:column="17"/></name> <operator pos:line="33" pos:column="18">=<pos:position pos:line="33" pos:column="19"/></operator> <call><name pos:line="33" pos:column="20">ap_ntoh64<pos:position pos:line="33" pos:column="29"/></name><argument_list pos:line="33" pos:column="29">(<argument><expr><operator pos:line="33" pos:column="30">&amp;<pos:position pos:line="33" pos:column="35"/></operator><name pos:line="33" pos:column="31">llen<pos:position pos:line="33" pos:column="35"/></name></expr></argument>)<pos:position pos:line="33" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="37"/></expr_stmt> <comment type="block" pos:line="33" pos:column="38">/* ntoh doubles as hton */</comment>
            <expr_stmt><expr><call><name pos:line="34" pos:column="13">ap_rwrite<pos:position pos:line="34" pos:column="22"/></name><argument_list pos:line="34" pos:column="22">(<argument><expr><operator pos:line="34" pos:column="23">(<pos:position pos:line="34" pos:column="24"/></operator><name pos:line="34" pos:column="24">char<pos:position pos:line="34" pos:column="28"/></name><operator pos:line="34" pos:column="28">*<pos:position pos:line="34" pos:column="29"/></operator><operator pos:line="34" pos:column="29">)<pos:position pos:line="34" pos:column="30"/></operator> <operator pos:line="34" pos:column="31">&amp;<pos:position pos:line="34" pos:column="36"/></operator><name pos:line="34" pos:column="32">llen<pos:position pos:line="34" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="34" pos:column="38">8<pos:position pos:line="34" pos:column="39"/></literal></expr></argument>, <argument><expr><name pos:line="34" pos:column="41">r<pos:position pos:line="34" pos:column="42"/></name></expr></argument>)<pos:position pos:line="34" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="44"/></expr_stmt>
        }<pos:position pos:line="35" pos:column="10"/></block></else></if>
    }<pos:position pos:line="36" pos:column="6"/></block></then>
    <else pos:line="37" pos:column="5">else <block pos:line="37" pos:column="10">{
        <expr_stmt><expr><call><name pos:line="38" pos:column="9">ap_log_rerror<pos:position pos:line="38" pos:column="22"/></name><argument_list pos:line="38" pos:column="22">(<argument><expr><name pos:line="38" pos:column="23">APLOG_MARK<pos:position pos:line="38" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="35">APLOG_DEBUG<pos:position pos:line="38" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="38" pos:column="48">0<pos:position pos:line="38" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="38" pos:column="51">r<pos:position pos:line="38" pos:column="52"/></name></expr></argument>, 
                        <argument><expr><literal type="string" pos:line="39" pos:column="25">"Websocket: Writing raw message to client"<pos:position pos:line="39" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="69"/></expr_stmt>
    }<pos:position pos:line="40" pos:column="6"/></block></else></if>
    <expr_stmt><expr><call><name pos:line="41" pos:column="5">ap_rwrite<pos:position pos:line="41" pos:column="14"/></name><argument_list pos:line="41" pos:column="14">(<argument><expr><name pos:line="41" pos:column="15">string<pos:position pos:line="41" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="23">len<pos:position pos:line="41" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="28">r<pos:position pos:line="41" pos:column="29"/></name></expr></argument>)<pos:position pos:line="41" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><name pos:line="42" pos:column="5">rv<pos:position pos:line="42" pos:column="7"/></name> <operator pos:line="42" pos:column="8">=<pos:position pos:line="42" pos:column="9"/></operator> <call><name pos:line="42" pos:column="10">ap_rflush<pos:position pos:line="42" pos:column="19"/></name><argument_list pos:line="42" pos:column="19">(<argument><expr><name pos:line="42" pos:column="20">r<pos:position pos:line="42" pos:column="21"/></name></expr></argument>)<pos:position pos:line="42" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="23"/></expr_stmt>
    <if pos:line="43" pos:column="5">if <condition pos:line="43" pos:column="8">(<expr><name pos:line="43" pos:column="9">rv<pos:position pos:line="43" pos:column="11"/></name> <operator pos:line="43" pos:column="12">==<pos:position pos:line="43" pos:column="14"/></operator> <name pos:line="43" pos:column="15">APR_SUCCESS<pos:position pos:line="43" pos:column="26"/></name></expr>)<pos:position pos:line="43" pos:column="27"/></condition><then pos:line="43" pos:column="27"> <block pos:line="43" pos:column="28">{
        <expr_stmt><expr><call><name pos:line="44" pos:column="9">lua_pushboolean<pos:position pos:line="44" pos:column="24"/></name><argument_list pos:line="44" pos:column="24">(<argument><expr><name pos:line="44" pos:column="25">L<pos:position pos:line="44" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="44" pos:column="28">1<pos:position pos:line="44" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="31"/></expr_stmt>
    }<pos:position pos:line="45" pos:column="6"/></block></then>
    <else pos:line="46" pos:column="5">else <block pos:line="46" pos:column="10">{
        <expr_stmt><expr><call><name pos:line="47" pos:column="9">lua_pushboolean<pos:position pos:line="47" pos:column="24"/></name><argument_list pos:line="47" pos:column="24">(<argument><expr><name pos:line="47" pos:column="25">L<pos:position pos:line="47" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="47" pos:column="28">0<pos:position pos:line="47" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="31"/></expr_stmt>
    }<pos:position pos:line="48" pos:column="6"/></block></else></if>
    <return pos:line="49" pos:column="5">return <expr><literal type="number" pos:line="49" pos:column="12">1<pos:position pos:line="49" pos:column="13"/></literal></expr>;<pos:position pos:line="49" pos:column="14"/></return>
}<pos:position pos:line="50" pos:column="2"/></block></function></unit>
