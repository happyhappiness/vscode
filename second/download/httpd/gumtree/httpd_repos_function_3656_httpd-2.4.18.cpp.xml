<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_3656_httpd-2.4.18.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">log_file_line<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><specifier pos:line="1" pos:column="26">const<pos:position pos:line="1" pos:column="31"/></specifier> <name pos:line="1" pos:column="32">ap_errorlog_info<pos:position pos:line="1" pos:column="48"/></name> <modifier pos:line="1" pos:column="49">*<pos:position pos:line="1" pos:column="50"/></modifier></type><name pos:line="1" pos:column="50">info<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="56">const<pos:position pos:line="1" pos:column="61"/></specifier> <name pos:line="1" pos:column="62">char<pos:position pos:line="1" pos:column="66"/></name> <modifier pos:line="1" pos:column="67">*<pos:position pos:line="1" pos:column="68"/></modifier></type><name pos:line="1" pos:column="68">arg<pos:position pos:line="1" pos:column="71"/></name></decl></parameter>,
                         <parameter><decl><type><name pos:line="2" pos:column="26">char<pos:position pos:line="2" pos:column="30"/></name> <modifier pos:line="2" pos:column="31">*<pos:position pos:line="2" pos:column="32"/></modifier></type><name pos:line="2" pos:column="32">buf<pos:position pos:line="2" pos:column="35"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="37">int<pos:position pos:line="2" pos:column="40"/></name></type> <name pos:line="2" pos:column="41">buflen<pos:position pos:line="2" pos:column="47"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="48"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><name><name pos:line="4" pos:column="9">info<pos:position pos:line="4" pos:column="13"/></name><operator pos:line="4" pos:column="13">-&gt;<pos:position pos:line="4" pos:column="18"/></operator><name pos:line="4" pos:column="15">file<pos:position pos:line="4" pos:column="19"/></name></name> <operator pos:line="4" pos:column="20">==<pos:position pos:line="4" pos:column="22"/></operator> <name pos:line="4" pos:column="23">NULL<pos:position pos:line="4" pos:column="27"/></name></expr>)<pos:position pos:line="4" pos:column="28"/></condition><then pos:line="4" pos:column="28"> <block pos:line="4" pos:column="29">{
        <return pos:line="5" pos:column="9">return <expr><literal type="number" pos:line="5" pos:column="16">0<pos:position pos:line="5" pos:column="17"/></literal></expr>;<pos:position pos:line="5" pos:column="18"/></return>
    }<pos:position pos:line="6" pos:column="6"/></block></then>
    <else pos:line="7" pos:column="5">else <block pos:line="7" pos:column="10">{
        <decl_stmt><decl><type><specifier pos:line="8" pos:column="9">const<pos:position pos:line="8" pos:column="14"/></specifier> <name pos:line="8" pos:column="15">char<pos:position pos:line="8" pos:column="19"/></name> <modifier pos:line="8" pos:column="20">*<pos:position pos:line="8" pos:column="21"/></modifier></type><name pos:line="8" pos:column="21">file<pos:position pos:line="8" pos:column="25"/></name> <init pos:line="8" pos:column="26">= <expr><name><name pos:line="8" pos:column="28">info<pos:position pos:line="8" pos:column="32"/></name><operator pos:line="8" pos:column="32">-&gt;<pos:position pos:line="8" pos:column="37"/></operator><name pos:line="8" pos:column="34">file<pos:position pos:line="8" pos:column="38"/></name></name></expr></init></decl>;<pos:position pos:line="8" pos:column="39"/></decl_stmt>
<cpp:if pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">if<pos:position pos:line="9" pos:column="4"/></cpp:directive> <expr><call><name pos:line="9" pos:column="5">defined<pos:position pos:line="9" pos:column="12"/></name><argument_list pos:line="9" pos:column="12">(<argument><expr><name pos:line="9" pos:column="13">_OSD_POSIX<pos:position pos:line="9" pos:column="23"/></name></expr></argument>)<pos:position pos:line="9" pos:column="24"/></argument_list></call> <operator pos:line="9" pos:column="25">||<pos:position pos:line="9" pos:column="27"/></operator> <call><name pos:line="9" pos:column="28">defined<pos:position pos:line="9" pos:column="35"/></name><argument_list pos:line="9" pos:column="35">(<argument><expr><name pos:line="9" pos:column="36">WIN32<pos:position pos:line="9" pos:column="41"/></name></expr></argument>)<pos:position pos:line="9" pos:column="42"/></argument_list></call> <operator pos:line="9" pos:column="43">||<pos:position pos:line="9" pos:column="45"/></operator> <call><name pos:line="9" pos:column="46">defined<pos:position pos:line="9" pos:column="53"/></name><argument_list pos:line="9" pos:column="53">(<argument><expr><name pos:line="9" pos:column="54">__MVS__<pos:position pos:line="9" pos:column="61"/></name></expr></argument>)<pos:position pos:line="9" pos:column="62"/></argument_list></call></expr></cpp:if>
        <decl_stmt><decl><type><name pos:line="10" pos:column="9">char<pos:position pos:line="10" pos:column="13"/></name></type> <name><name pos:line="10" pos:column="14">tmp<pos:position pos:line="10" pos:column="17"/></name><index pos:line="10" pos:column="17">[<expr><literal type="number" pos:line="10" pos:column="18">256<pos:position pos:line="10" pos:column="21"/></literal></expr>]<pos:position pos:line="10" pos:column="22"/></index></name></decl>;<pos:position pos:line="10" pos:column="23"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="11" pos:column="9">char<pos:position pos:line="11" pos:column="13"/></name> <modifier pos:line="11" pos:column="14">*<pos:position pos:line="11" pos:column="15"/></modifier></type><name pos:line="11" pos:column="15">e<pos:position pos:line="11" pos:column="16"/></name> <init pos:line="11" pos:column="17">= <expr><call><name pos:line="11" pos:column="19">strrchr<pos:position pos:line="11" pos:column="26"/></name><argument_list pos:line="11" pos:column="26">(<argument><expr><name pos:line="11" pos:column="27">file<pos:position pos:line="11" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="11" pos:column="33">'/'<pos:position pos:line="11" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="37"/></argument_list></call></expr></init></decl>;<pos:position pos:line="11" pos:column="38"/></decl_stmt>
<cpp:ifdef pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">ifdef<pos:position pos:line="12" pos:column="7"/></cpp:directive> <name pos:line="12" pos:column="8">WIN32<pos:position pos:line="12" pos:column="13"/></name></cpp:ifdef>
        <if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><operator pos:line="13" pos:column="13">!<pos:position pos:line="13" pos:column="14"/></operator><name pos:line="13" pos:column="14">e<pos:position pos:line="13" pos:column="15"/></name></expr>)<pos:position pos:line="13" pos:column="16"/></condition><then pos:line="13" pos:column="16"> <block pos:line="13" pos:column="17">{
            <expr_stmt><expr><name pos:line="14" pos:column="13">e<pos:position pos:line="14" pos:column="14"/></name> <operator pos:line="14" pos:column="15">=<pos:position pos:line="14" pos:column="16"/></operator> <call><name pos:line="14" pos:column="17">strrchr<pos:position pos:line="14" pos:column="24"/></name><argument_list pos:line="14" pos:column="24">(<argument><expr><name pos:line="14" pos:column="25">file<pos:position pos:line="14" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="14" pos:column="31">'\\'<pos:position pos:line="14" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="37"/></expr_stmt>
        }<pos:position pos:line="15" pos:column="10"/></block></then></if>
<cpp:endif pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">endif<pos:position pos:line="16" pos:column="7"/></cpp:directive></cpp:endif>

        <comment type="block" pos:line="18" pos:column="9">/* In OSD/POSIX, the compiler returns for __FILE__
         * a string like: __FILE__="*POSIX(/usr/include/stdio.h)"
         * (it even returns an absolute path for sources in
         * the current directory). Here we try to strip this
         * down to the basename.
         */</comment>
        <if pos:line="24" pos:column="9">if <condition pos:line="24" pos:column="12">(<expr><name pos:line="24" pos:column="13">e<pos:position pos:line="24" pos:column="14"/></name> <operator pos:line="24" pos:column="15">!=<pos:position pos:line="24" pos:column="17"/></operator> <name pos:line="24" pos:column="18">NULL<pos:position pos:line="24" pos:column="22"/></name> <operator pos:line="24" pos:column="23">&amp;&amp;<pos:position pos:line="24" pos:column="33"/></operator> <name><name pos:line="24" pos:column="26">e<pos:position pos:line="24" pos:column="27"/></name><index pos:line="24" pos:column="27">[<expr><literal type="number" pos:line="24" pos:column="28">1<pos:position pos:line="24" pos:column="29"/></literal></expr>]<pos:position pos:line="24" pos:column="30"/></index></name> <operator pos:line="24" pos:column="31">!=<pos:position pos:line="24" pos:column="33"/></operator> <literal type="char" pos:line="24" pos:column="34">'\0'<pos:position pos:line="24" pos:column="38"/></literal></expr>)<pos:position pos:line="24" pos:column="39"/></condition><then pos:line="24" pos:column="39"> <block pos:line="24" pos:column="40">{
            <expr_stmt><expr><call><name pos:line="25" pos:column="13">apr_snprintf<pos:position pos:line="25" pos:column="25"/></name><argument_list pos:line="25" pos:column="25">(<argument><expr><name pos:line="25" pos:column="26">tmp<pos:position pos:line="25" pos:column="29"/></name></expr></argument>, <argument><expr><sizeof pos:line="25" pos:column="31">sizeof<argument_list pos:line="25" pos:column="37">(<argument><expr><name pos:line="25" pos:column="38">tmp<pos:position pos:line="25" pos:column="41"/></name></expr></argument>)<pos:position pos:line="25" pos:column="42"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="25" pos:column="44">"%s"<pos:position pos:line="25" pos:column="48"/></literal></expr></argument>, <argument><expr><operator pos:line="25" pos:column="50">&amp;<pos:position pos:line="25" pos:column="55"/></operator><name><name pos:line="25" pos:column="51">e<pos:position pos:line="25" pos:column="52"/></name><index pos:line="25" pos:column="52">[<expr><literal type="number" pos:line="25" pos:column="53">1<pos:position pos:line="25" pos:column="54"/></literal></expr>]<pos:position pos:line="25" pos:column="55"/></index></name></expr></argument>)<pos:position pos:line="25" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="57"/></expr_stmt>
            <expr_stmt><expr><name pos:line="26" pos:column="13">e<pos:position pos:line="26" pos:column="14"/></name> <operator pos:line="26" pos:column="15">=<pos:position pos:line="26" pos:column="16"/></operator> <operator pos:line="26" pos:column="17">&amp;<pos:position pos:line="26" pos:column="22"/></operator><name><name pos:line="26" pos:column="18">tmp<pos:position pos:line="26" pos:column="21"/></name><index pos:line="26" pos:column="21">[<expr><call><name pos:line="26" pos:column="22">strlen<pos:position pos:line="26" pos:column="28"/></name><argument_list pos:line="26" pos:column="28">(<argument><expr><name pos:line="26" pos:column="29">tmp<pos:position pos:line="26" pos:column="32"/></name></expr></argument>)<pos:position pos:line="26" pos:column="33"/></argument_list></call><operator pos:line="26" pos:column="33">-<pos:position pos:line="26" pos:column="34"/></operator><literal type="number" pos:line="26" pos:column="34">1<pos:position pos:line="26" pos:column="35"/></literal></expr>]<pos:position pos:line="26" pos:column="36"/></index></name></expr>;<pos:position pos:line="26" pos:column="37"/></expr_stmt>
            <if pos:line="27" pos:column="13">if <condition pos:line="27" pos:column="16">(<expr><operator pos:line="27" pos:column="17">*<pos:position pos:line="27" pos:column="18"/></operator><name pos:line="27" pos:column="18">e<pos:position pos:line="27" pos:column="19"/></name> <operator pos:line="27" pos:column="20">==<pos:position pos:line="27" pos:column="22"/></operator> <literal type="char" pos:line="27" pos:column="23">')'<pos:position pos:line="27" pos:column="26"/></literal></expr>)<pos:position pos:line="27" pos:column="27"/></condition><then pos:line="27" pos:column="27"> <block pos:line="27" pos:column="28">{
                <expr_stmt><expr><operator pos:line="28" pos:column="17">*<pos:position pos:line="28" pos:column="18"/></operator><name pos:line="28" pos:column="18">e<pos:position pos:line="28" pos:column="19"/></name> <operator pos:line="28" pos:column="20">=<pos:position pos:line="28" pos:column="21"/></operator> <literal type="char" pos:line="28" pos:column="22">'\0'<pos:position pos:line="28" pos:column="26"/></literal></expr>;<pos:position pos:line="28" pos:column="27"/></expr_stmt>
            }<pos:position pos:line="29" pos:column="14"/></block></then></if>
            <expr_stmt><expr><name pos:line="30" pos:column="13">file<pos:position pos:line="30" pos:column="17"/></name> <operator pos:line="30" pos:column="18">=<pos:position pos:line="30" pos:column="19"/></operator> <name pos:line="30" pos:column="20">tmp<pos:position pos:line="30" pos:column="23"/></name></expr>;<pos:position pos:line="30" pos:column="24"/></expr_stmt>
        }<pos:position pos:line="31" pos:column="10"/></block></then></if>
<cpp:else pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">else<pos:position pos:line="32" pos:column="6"/></cpp:directive></cpp:else> <comment type="block" pos:line="32" pos:column="7">/* _OSD_POSIX || WIN32 */</comment>
        <decl_stmt><decl><type><specifier pos:line="33" pos:column="9">const<pos:position pos:line="33" pos:column="14"/></specifier> <name pos:line="33" pos:column="15">char<pos:position pos:line="33" pos:column="19"/></name> <modifier pos:line="33" pos:column="20">*<pos:position pos:line="33" pos:column="21"/></modifier></type><name pos:line="33" pos:column="21">p<pos:position pos:line="33" pos:column="22"/></name></decl>;<pos:position pos:line="33" pos:column="23"/></decl_stmt>
        <comment type="block" pos:line="34" pos:column="9">/* On Unix, __FILE__ may be an absolute path in a
         * VPATH build. */</comment>
        <if pos:line="36" pos:column="9">if <condition pos:line="36" pos:column="12">(<expr><name><name pos:line="36" pos:column="13">file<pos:position pos:line="36" pos:column="17"/></name><index pos:line="36" pos:column="17">[<expr><literal type="number" pos:line="36" pos:column="18">0<pos:position pos:line="36" pos:column="19"/></literal></expr>]<pos:position pos:line="36" pos:column="20"/></index></name> <operator pos:line="36" pos:column="21">==<pos:position pos:line="36" pos:column="23"/></operator> <literal type="char" pos:line="36" pos:column="24">'/'<pos:position pos:line="36" pos:column="27"/></literal> <operator pos:line="36" pos:column="28">&amp;&amp;<pos:position pos:line="36" pos:column="38"/></operator> <operator pos:line="36" pos:column="31">(<pos:position pos:line="36" pos:column="32"/></operator><name pos:line="36" pos:column="32">p<pos:position pos:line="36" pos:column="33"/></name> <operator pos:line="36" pos:column="34">=<pos:position pos:line="36" pos:column="35"/></operator> <call><name pos:line="36" pos:column="36">ap_strrchr_c<pos:position pos:line="36" pos:column="48"/></name><argument_list pos:line="36" pos:column="48">(<argument><expr><name pos:line="36" pos:column="49">file<pos:position pos:line="36" pos:column="53"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="36" pos:column="55">'/'<pos:position pos:line="36" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="59"/></argument_list></call><operator pos:line="36" pos:column="59">)<pos:position pos:line="36" pos:column="60"/></operator> <operator pos:line="36" pos:column="61">!=<pos:position pos:line="36" pos:column="63"/></operator> <name pos:line="36" pos:column="64">NULL<pos:position pos:line="36" pos:column="68"/></name></expr>)<pos:position pos:line="36" pos:column="69"/></condition><then pos:line="36" pos:column="69"> <block pos:line="36" pos:column="70">{
            <expr_stmt><expr><name pos:line="37" pos:column="13">file<pos:position pos:line="37" pos:column="17"/></name> <operator pos:line="37" pos:column="18">=<pos:position pos:line="37" pos:column="19"/></operator> <name pos:line="37" pos:column="20">p<pos:position pos:line="37" pos:column="21"/></name> <operator pos:line="37" pos:column="22">+<pos:position pos:line="37" pos:column="23"/></operator> <literal type="number" pos:line="37" pos:column="24">1<pos:position pos:line="37" pos:column="25"/></literal></expr>;<pos:position pos:line="37" pos:column="26"/></expr_stmt>
        }<pos:position pos:line="38" pos:column="10"/></block></then></if>
<cpp:endif pos:line="39" pos:column="1">#<cpp:directive pos:line="39" pos:column="2">endif<pos:position pos:line="39" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="39" pos:column="8">/*_OSD_POSIX || WIN32 */</comment>
        <return pos:line="40" pos:column="9">return <expr><call><name pos:line="40" pos:column="16">apr_snprintf<pos:position pos:line="40" pos:column="28"/></name><argument_list pos:line="40" pos:column="28">(<argument><expr><name pos:line="40" pos:column="29">buf<pos:position pos:line="40" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="34">buflen<pos:position pos:line="40" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="40" pos:column="42">"%s(%d)"<pos:position pos:line="40" pos:column="50"/></literal></expr></argument>, <argument><expr><name pos:line="40" pos:column="52">file<pos:position pos:line="40" pos:column="56"/></name></expr></argument>, <argument><expr><name><name pos:line="40" pos:column="58">info<pos:position pos:line="40" pos:column="62"/></name><operator pos:line="40" pos:column="62">-&gt;<pos:position pos:line="40" pos:column="67"/></operator><name pos:line="40" pos:column="64">line<pos:position pos:line="40" pos:column="68"/></name></name></expr></argument>)<pos:position pos:line="40" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="70"/></return>
    }<pos:position pos:line="41" pos:column="6"/></block></else></if>
}<pos:position pos:line="42" pos:column="2"/></block></function></unit>
