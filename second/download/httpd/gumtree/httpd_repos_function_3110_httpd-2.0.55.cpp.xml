<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_3110_httpd-2.0.55.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">apr_status_t<pos:position pos:line="1" pos:column="13"/></name></type> <name pos:line="1" pos:column="14">apr_gethostname<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name pos:line="1" pos:column="30">char<pos:position pos:line="1" pos:column="34"/></name> <modifier pos:line="1" pos:column="35">*<pos:position pos:line="1" pos:column="36"/></modifier></type><name pos:line="1" pos:column="36">buf<pos:position pos:line="1" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="41">apr_int32_t<pos:position pos:line="1" pos:column="52"/></name></type> <name pos:line="1" pos:column="53">len<pos:position pos:line="1" pos:column="56"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="58">apr_pool_t<pos:position pos:line="1" pos:column="68"/></name> <modifier pos:line="1" pos:column="69">*<pos:position pos:line="1" pos:column="70"/></modifier></type><name pos:line="1" pos:column="70">cont<pos:position pos:line="1" pos:column="74"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="75"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <if pos:line="3" pos:column="5">if <condition pos:line="3" pos:column="8">(<expr><call><name pos:line="3" pos:column="9">gethostname<pos:position pos:line="3" pos:column="20"/></name><argument_list pos:line="3" pos:column="20">(<argument><expr><name pos:line="3" pos:column="21">buf<pos:position pos:line="3" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="3" pos:column="26">len<pos:position pos:line="3" pos:column="29"/></name></expr></argument>)<pos:position pos:line="3" pos:column="30"/></argument_list></call> <operator pos:line="3" pos:column="31">==<pos:position pos:line="3" pos:column="33"/></operator> <operator pos:line="3" pos:column="34">-<pos:position pos:line="3" pos:column="35"/></operator><literal type="number" pos:line="3" pos:column="35">1<pos:position pos:line="3" pos:column="36"/></literal></expr>)<pos:position pos:line="3" pos:column="37"/></condition><then pos:line="3" pos:column="37"> <block pos:line="3" pos:column="38">{
        <expr_stmt><expr><name><name pos:line="4" pos:column="9">buf<pos:position pos:line="4" pos:column="12"/></name><index pos:line="4" pos:column="12">[<expr><literal type="number" pos:line="4" pos:column="13">0<pos:position pos:line="4" pos:column="14"/></literal></expr>]<pos:position pos:line="4" pos:column="15"/></index></name> <operator pos:line="4" pos:column="16">=<pos:position pos:line="4" pos:column="17"/></operator> <literal type="char" pos:line="4" pos:column="18">'\0'<pos:position pos:line="4" pos:column="22"/></literal></expr>;<pos:position pos:line="4" pos:column="23"/></expr_stmt>
        <return pos:line="5" pos:column="9">return <expr><name pos:line="5" pos:column="16">errno<pos:position pos:line="5" pos:column="21"/></name></expr>;<pos:position pos:line="5" pos:column="22"/></return>
    }<pos:position pos:line="6" pos:column="6"/></block></then>
    <elseif pos:line="7" pos:column="5">else <if pos:line="7" pos:column="10">if <condition pos:line="7" pos:column="13">(<expr><operator pos:line="7" pos:column="14">!<pos:position pos:line="7" pos:column="15"/></operator><call><name pos:line="7" pos:column="15">memchr<pos:position pos:line="7" pos:column="21"/></name><argument_list pos:line="7" pos:column="21">(<argument><expr><name pos:line="7" pos:column="22">buf<pos:position pos:line="7" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="7" pos:column="27">'\0'<pos:position pos:line="7" pos:column="31"/></literal></expr></argument>, <argument><expr><name pos:line="7" pos:column="33">len<pos:position pos:line="7" pos:column="36"/></name></expr></argument>)<pos:position pos:line="7" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="7" pos:column="38"/></condition><then pos:line="7" pos:column="38"> <block pos:line="7" pos:column="39">{ <comment type="block" pos:line="7" pos:column="41">/* buffer too small */</comment>
        <comment type="block" pos:line="8" pos:column="9">/* note... most platforms just truncate in this condition
         *         linux+glibc return an error
         */</comment>
        <expr_stmt><expr><name><name pos:line="11" pos:column="9">buf<pos:position pos:line="11" pos:column="12"/></name><index pos:line="11" pos:column="12">[<expr><literal type="number" pos:line="11" pos:column="13">0<pos:position pos:line="11" pos:column="14"/></literal></expr>]<pos:position pos:line="11" pos:column="15"/></index></name> <operator pos:line="11" pos:column="16">=<pos:position pos:line="11" pos:column="17"/></operator> <literal type="char" pos:line="11" pos:column="18">'\0'<pos:position pos:line="11" pos:column="22"/></literal></expr>;<pos:position pos:line="11" pos:column="23"/></expr_stmt>
        <return pos:line="12" pos:column="9">return <expr><name pos:line="12" pos:column="16">APR_ENAMETOOLONG<pos:position pos:line="12" pos:column="32"/></name></expr>;<pos:position pos:line="12" pos:column="33"/></return>
    }<pos:position pos:line="13" pos:column="6"/></block></then></if></elseif></if>
    <return pos:line="14" pos:column="5">return <expr><name pos:line="14" pos:column="12">APR_SUCCESS<pos:position pos:line="14" pos:column="23"/></name></expr>;<pos:position pos:line="14" pos:column="24"/></return>
}<pos:position pos:line="15" pos:column="2"/></block></function></unit>
