<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_1105_httpd-2.2.23.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">char<pos:position pos:line="1" pos:column="12"/></name> <modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier></type><name pos:line="1" pos:column="14">imap_url<pos:position pos:line="1" pos:column="22"/></name><parameter_list pos:line="1" pos:column="22">(<parameter><decl><type><name pos:line="1" pos:column="23">request_rec<pos:position pos:line="1" pos:column="34"/></name> <modifier pos:line="1" pos:column="35">*<pos:position pos:line="1" pos:column="36"/></modifier></type><name pos:line="1" pos:column="36">r<pos:position pos:line="1" pos:column="37"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="39">const<pos:position pos:line="1" pos:column="44"/></specifier> <name pos:line="1" pos:column="45">char<pos:position pos:line="1" pos:column="49"/></name> <modifier pos:line="1" pos:column="50">*<pos:position pos:line="1" pos:column="51"/></modifier></type><name pos:line="1" pos:column="51">base<pos:position pos:line="1" pos:column="55"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="57">const<pos:position pos:line="1" pos:column="62"/></specifier> <name pos:line="1" pos:column="63">char<pos:position pos:line="1" pos:column="67"/></name> <modifier pos:line="1" pos:column="68">*<pos:position pos:line="1" pos:column="69"/></modifier></type><name pos:line="1" pos:column="69">value<pos:position pos:line="1" pos:column="74"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="75"/></parameter_list>
<block pos:line="2" pos:column="1">{
<comment type="block" pos:line="3" pos:column="1">/* translates a value into a URL. */</comment>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">int<pos:position pos:line="4" pos:column="8"/></name></type> <name pos:line="4" pos:column="9">slen<pos:position pos:line="4" pos:column="13"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="15">clen<pos:position pos:line="4" pos:column="19"/></name></decl>;<pos:position pos:line="4" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">char<pos:position pos:line="5" pos:column="9"/></name> <modifier pos:line="5" pos:column="10">*<pos:position pos:line="5" pos:column="11"/></modifier></type><name pos:line="5" pos:column="11">string_pos<pos:position pos:line="5" pos:column="21"/></name> <init pos:line="5" pos:column="22">= <expr><name pos:line="5" pos:column="24">NULL<pos:position pos:line="5" pos:column="28"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="29"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="6" pos:column="5">const<pos:position pos:line="6" pos:column="10"/></specifier> <name pos:line="6" pos:column="11">char<pos:position pos:line="6" pos:column="15"/></name> <modifier pos:line="6" pos:column="16">*<pos:position pos:line="6" pos:column="17"/></modifier></type><name pos:line="6" pos:column="17">string_pos_const<pos:position pos:line="6" pos:column="33"/></name> <init pos:line="6" pos:column="34">= <expr><name pos:line="6" pos:column="36">NULL<pos:position pos:line="6" pos:column="40"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="41"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">char<pos:position pos:line="7" pos:column="9"/></name> <modifier pos:line="7" pos:column="10">*<pos:position pos:line="7" pos:column="11"/></modifier></type><name pos:line="7" pos:column="11">directory<pos:position pos:line="7" pos:column="20"/></name> <init pos:line="7" pos:column="21">= <expr><name pos:line="7" pos:column="23">NULL<pos:position pos:line="7" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="28"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="8" pos:column="5">const<pos:position pos:line="8" pos:column="10"/></specifier> <name pos:line="8" pos:column="11">char<pos:position pos:line="8" pos:column="15"/></name> <modifier pos:line="8" pos:column="16">*<pos:position pos:line="8" pos:column="17"/></modifier></type><name pos:line="8" pos:column="17">referer<pos:position pos:line="8" pos:column="24"/></name> <init pos:line="8" pos:column="25">= <expr><name pos:line="8" pos:column="27">NULL<pos:position pos:line="8" pos:column="31"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="32"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">char<pos:position pos:line="9" pos:column="9"/></name> <modifier pos:line="9" pos:column="10">*<pos:position pos:line="9" pos:column="11"/></modifier></type><name pos:line="9" pos:column="11">my_base<pos:position pos:line="9" pos:column="18"/></name></decl>;<pos:position pos:line="9" pos:column="19"/></decl_stmt>

    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><operator pos:line="11" pos:column="9">!<pos:position pos:line="11" pos:column="10"/></operator><call><name pos:line="11" pos:column="10">strcasecmp<pos:position pos:line="11" pos:column="20"/></name><argument_list pos:line="11" pos:column="20">(<argument><expr><name pos:line="11" pos:column="21">value<pos:position pos:line="11" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="28">"map"<pos:position pos:line="11" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="34"/></argument_list></call> <operator pos:line="11" pos:column="35">||<pos:position pos:line="11" pos:column="37"/></operator> <operator pos:line="11" pos:column="38">!<pos:position pos:line="11" pos:column="39"/></operator><call><name pos:line="11" pos:column="39">strcasecmp<pos:position pos:line="11" pos:column="49"/></name><argument_list pos:line="11" pos:column="49">(<argument><expr><name pos:line="11" pos:column="50">value<pos:position pos:line="11" pos:column="55"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="57">"menu"<pos:position pos:line="11" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="64"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="65"/></condition><then pos:line="11" pos:column="65"> <block pos:line="11" pos:column="66">{
        <return pos:line="12" pos:column="9">return <expr><call><name pos:line="12" pos:column="16">ap_construct_url<pos:position pos:line="12" pos:column="32"/></name><argument_list pos:line="12" pos:column="32">(<argument><expr><name><name pos:line="12" pos:column="33">r<pos:position pos:line="12" pos:column="34"/></name><operator pos:line="12" pos:column="34">-&gt;<pos:position pos:line="12" pos:column="39"/></operator><name pos:line="12" pos:column="36">pool<pos:position pos:line="12" pos:column="40"/></name></name></expr></argument>, <argument><expr><name><name pos:line="12" pos:column="42">r<pos:position pos:line="12" pos:column="43"/></name><operator pos:line="12" pos:column="43">-&gt;<pos:position pos:line="12" pos:column="48"/></operator><name pos:line="12" pos:column="45">uri<pos:position pos:line="12" pos:column="48"/></name></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="50">r<pos:position pos:line="12" pos:column="51"/></name></expr></argument>)<pos:position pos:line="12" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="53"/></return>
    }<pos:position pos:line="13" pos:column="6"/></block></then></if>

    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><operator pos:line="15" pos:column="9">!<pos:position pos:line="15" pos:column="10"/></operator><call><name pos:line="15" pos:column="10">strcasecmp<pos:position pos:line="15" pos:column="20"/></name><argument_list pos:line="15" pos:column="20">(<argument><expr><name pos:line="15" pos:column="21">value<pos:position pos:line="15" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="28">"nocontent"<pos:position pos:line="15" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="40"/></argument_list></call> <operator pos:line="15" pos:column="41">||<pos:position pos:line="15" pos:column="43"/></operator> <operator pos:line="15" pos:column="44">!<pos:position pos:line="15" pos:column="45"/></operator><call><name pos:line="15" pos:column="45">strcasecmp<pos:position pos:line="15" pos:column="55"/></name><argument_list pos:line="15" pos:column="55">(<argument><expr><name pos:line="15" pos:column="56">value<pos:position pos:line="15" pos:column="61"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="63">"error"<pos:position pos:line="15" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="71"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="72"/></condition><then pos:line="15" pos:column="72"> <block pos:line="15" pos:column="73">{
        <return pos:line="16" pos:column="9">return <expr><call><name pos:line="16" pos:column="16">apr_pstrdup<pos:position pos:line="16" pos:column="27"/></name><argument_list pos:line="16" pos:column="27">(<argument><expr><name><name pos:line="16" pos:column="28">r<pos:position pos:line="16" pos:column="29"/></name><operator pos:line="16" pos:column="29">-&gt;<pos:position pos:line="16" pos:column="34"/></operator><name pos:line="16" pos:column="31">pool<pos:position pos:line="16" pos:column="35"/></name></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="37">value<pos:position pos:line="16" pos:column="42"/></name></expr></argument>)<pos:position pos:line="16" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="44"/></return>      <comment type="block" pos:line="16" pos:column="50">/* these are handled elsewhere,
                                                so just copy them */</comment>
    }<pos:position pos:line="18" pos:column="6"/></block></then></if>

    <if pos:line="20" pos:column="5">if <condition pos:line="20" pos:column="8">(<expr><operator pos:line="20" pos:column="9">!<pos:position pos:line="20" pos:column="10"/></operator><call><name pos:line="20" pos:column="10">strcasecmp<pos:position pos:line="20" pos:column="20"/></name><argument_list pos:line="20" pos:column="20">(<argument><expr><name pos:line="20" pos:column="21">value<pos:position pos:line="20" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="28">"referer"<pos:position pos:line="20" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="20" pos:column="39"/></condition><then pos:line="20" pos:column="39"> <block pos:line="20" pos:column="40">{
        <expr_stmt><expr><name pos:line="21" pos:column="9">referer<pos:position pos:line="21" pos:column="16"/></name> <operator pos:line="21" pos:column="17">=<pos:position pos:line="21" pos:column="18"/></operator> <call><name pos:line="21" pos:column="19">apr_table_get<pos:position pos:line="21" pos:column="32"/></name><argument_list pos:line="21" pos:column="32">(<argument><expr><name><name pos:line="21" pos:column="33">r<pos:position pos:line="21" pos:column="34"/></name><operator pos:line="21" pos:column="34">-&gt;<pos:position pos:line="21" pos:column="39"/></operator><name pos:line="21" pos:column="36">headers_in<pos:position pos:line="21" pos:column="46"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="21" pos:column="48">"Referer"<pos:position pos:line="21" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="59"/></expr_stmt>
        <if pos:line="22" pos:column="9">if <condition pos:line="22" pos:column="12">(<expr><name pos:line="22" pos:column="13">referer<pos:position pos:line="22" pos:column="20"/></name> <operator pos:line="22" pos:column="21">&amp;&amp;<pos:position pos:line="22" pos:column="31"/></operator> <operator pos:line="22" pos:column="24">*<pos:position pos:line="22" pos:column="25"/></operator><name pos:line="22" pos:column="25">referer<pos:position pos:line="22" pos:column="32"/></name></expr>)<pos:position pos:line="22" pos:column="33"/></condition><then pos:line="22" pos:column="33"> <block pos:line="22" pos:column="34">{
            <return pos:line="23" pos:column="13">return <expr><call><name pos:line="23" pos:column="20">ap_escape_html<pos:position pos:line="23" pos:column="34"/></name><argument_list pos:line="23" pos:column="34">(<argument><expr><name><name pos:line="23" pos:column="35">r<pos:position pos:line="23" pos:column="36"/></name><operator pos:line="23" pos:column="36">-&gt;<pos:position pos:line="23" pos:column="41"/></operator><name pos:line="23" pos:column="38">pool<pos:position pos:line="23" pos:column="42"/></name></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="44">referer<pos:position pos:line="23" pos:column="51"/></name></expr></argument>)<pos:position pos:line="23" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="53"/></return>
        }<pos:position pos:line="24" pos:column="10"/></block></then>
        <else pos:line="25" pos:column="9">else <block pos:line="25" pos:column="14">{
            <comment type="block" pos:line="26" pos:column="13">/* XXX:  This used to do *value = '\0'; ... which is totally bogus
             * because it hammers the passed in value, which can be a string
             * constant, or part of a config, or whatever.  Total garbage.
             * This works around that without changing the rest of this
             * code much
             */</comment>
            <expr_stmt><expr><name pos:line="32" pos:column="13">value<pos:position pos:line="32" pos:column="18"/></name> <operator pos:line="32" pos:column="19">=<pos:position pos:line="32" pos:column="20"/></operator> <literal type="string" pos:line="32" pos:column="21">""<pos:position pos:line="32" pos:column="23"/></literal></expr>;<pos:position pos:line="32" pos:column="24"/></expr_stmt>      <comment type="block" pos:line="32" pos:column="30">/* if 'referer' but no referring page,
                                null the value */</comment>
        }<pos:position pos:line="34" pos:column="10"/></block></else></if>
    }<pos:position pos:line="35" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="37" pos:column="5">string_pos_const<pos:position pos:line="37" pos:column="21"/></name> <operator pos:line="37" pos:column="22">=<pos:position pos:line="37" pos:column="23"/></operator> <name pos:line="37" pos:column="24">value<pos:position pos:line="37" pos:column="29"/></name></expr>;<pos:position pos:line="37" pos:column="30"/></expr_stmt>
    <while pos:line="38" pos:column="5">while <condition pos:line="38" pos:column="11">(<expr><call><name pos:line="38" pos:column="12">apr_isalpha<pos:position pos:line="38" pos:column="23"/></name><argument_list pos:line="38" pos:column="23">(<argument><expr><operator pos:line="38" pos:column="24">*<pos:position pos:line="38" pos:column="25"/></operator><name pos:line="38" pos:column="25">string_pos_const<pos:position pos:line="38" pos:column="41"/></name></expr></argument>)<pos:position pos:line="38" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="38" pos:column="43"/></condition> <block pos:line="38" pos:column="44">{
        <expr_stmt><expr><name pos:line="39" pos:column="9">string_pos_const<pos:position pos:line="39" pos:column="25"/></name><operator pos:line="39" pos:column="25">++<pos:position pos:line="39" pos:column="27"/></operator></expr>;<pos:position pos:line="39" pos:column="28"/></expr_stmt>           <comment type="block" pos:line="39" pos:column="39">/* go along the URL from the map
                                         until a non-letter */</comment>
    }<pos:position pos:line="41" pos:column="6"/></block></while>
    <if pos:line="42" pos:column="5">if <condition pos:line="42" pos:column="8">(<expr><operator pos:line="42" pos:column="9">*<pos:position pos:line="42" pos:column="10"/></operator><name pos:line="42" pos:column="10">string_pos_const<pos:position pos:line="42" pos:column="26"/></name> <operator pos:line="42" pos:column="27">==<pos:position pos:line="42" pos:column="29"/></operator> <literal type="char" pos:line="42" pos:column="30">':'<pos:position pos:line="42" pos:column="33"/></literal></expr>)<pos:position pos:line="42" pos:column="34"/></condition><then pos:line="42" pos:column="34"> <block pos:line="42" pos:column="35">{
        <comment type="block" pos:line="43" pos:column="9">/* if letters and then a colon (like http:) */</comment>
        <comment type="block" pos:line="44" pos:column="9">/* it's an absolute URL, so use it! */</comment>
        <return pos:line="45" pos:column="9">return <expr><call><name pos:line="45" pos:column="16">apr_pstrdup<pos:position pos:line="45" pos:column="27"/></name><argument_list pos:line="45" pos:column="27">(<argument><expr><name><name pos:line="45" pos:column="28">r<pos:position pos:line="45" pos:column="29"/></name><operator pos:line="45" pos:column="29">-&gt;<pos:position pos:line="45" pos:column="34"/></operator><name pos:line="45" pos:column="31">pool<pos:position pos:line="45" pos:column="35"/></name></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="37">value<pos:position pos:line="45" pos:column="42"/></name></expr></argument>)<pos:position pos:line="45" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="44"/></return>
    }<pos:position pos:line="46" pos:column="6"/></block></then></if>

    <if pos:line="48" pos:column="5">if <condition pos:line="48" pos:column="8">(<expr><operator pos:line="48" pos:column="9">!<pos:position pos:line="48" pos:column="10"/></operator><name pos:line="48" pos:column="10">base<pos:position pos:line="48" pos:column="14"/></name> <operator pos:line="48" pos:column="15">||<pos:position pos:line="48" pos:column="17"/></operator> <operator pos:line="48" pos:column="18">!<pos:position pos:line="48" pos:column="19"/></operator><operator pos:line="48" pos:column="19">*<pos:position pos:line="48" pos:column="20"/></operator><name pos:line="48" pos:column="20">base<pos:position pos:line="48" pos:column="24"/></name></expr>)<pos:position pos:line="48" pos:column="25"/></condition><then pos:line="48" pos:column="25"> <block pos:line="48" pos:column="26">{
        <if pos:line="49" pos:column="9">if <condition pos:line="49" pos:column="12">(<expr><name pos:line="49" pos:column="13">value<pos:position pos:line="49" pos:column="18"/></name> <operator pos:line="49" pos:column="19">&amp;&amp;<pos:position pos:line="49" pos:column="29"/></operator> <operator pos:line="49" pos:column="22">*<pos:position pos:line="49" pos:column="23"/></operator><name pos:line="49" pos:column="23">value<pos:position pos:line="49" pos:column="28"/></name></expr>)<pos:position pos:line="49" pos:column="29"/></condition><then pos:line="49" pos:column="29"> <block pos:line="49" pos:column="30">{
            <return pos:line="50" pos:column="13">return <expr><call><name pos:line="50" pos:column="20">apr_pstrdup<pos:position pos:line="50" pos:column="31"/></name><argument_list pos:line="50" pos:column="31">(<argument><expr><name><name pos:line="50" pos:column="32">r<pos:position pos:line="50" pos:column="33"/></name><operator pos:line="50" pos:column="33">-&gt;<pos:position pos:line="50" pos:column="38"/></operator><name pos:line="50" pos:column="35">pool<pos:position pos:line="50" pos:column="39"/></name></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="41">value<pos:position pos:line="50" pos:column="46"/></name></expr></argument>)<pos:position pos:line="50" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="48"/></return> <comment type="block" pos:line="50" pos:column="49">/* no base: use what is given */</comment>
        }<pos:position pos:line="51" pos:column="10"/></block></then></if>
        <comment type="block" pos:line="52" pos:column="9">/* no base, no value: pick a simple default */</comment>
        <return pos:line="53" pos:column="9">return <expr><call><name pos:line="53" pos:column="16">ap_construct_url<pos:position pos:line="53" pos:column="32"/></name><argument_list pos:line="53" pos:column="32">(<argument><expr><name><name pos:line="53" pos:column="33">r<pos:position pos:line="53" pos:column="34"/></name><operator pos:line="53" pos:column="34">-&gt;<pos:position pos:line="53" pos:column="39"/></operator><name pos:line="53" pos:column="36">pool<pos:position pos:line="53" pos:column="40"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="53" pos:column="42">"/"<pos:position pos:line="53" pos:column="45"/></literal></expr></argument>, <argument><expr><name pos:line="53" pos:column="47">r<pos:position pos:line="53" pos:column="48"/></name></expr></argument>)<pos:position pos:line="53" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="50"/></return>
    }<pos:position pos:line="54" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="56" pos:column="5">/* must be a relative URL to be combined with base */</comment>
    <if pos:line="57" pos:column="5">if <condition pos:line="57" pos:column="8">(<expr><call><name pos:line="57" pos:column="9">ap_strchr_c<pos:position pos:line="57" pos:column="20"/></name><argument_list pos:line="57" pos:column="20">(<argument><expr><name pos:line="57" pos:column="21">base<pos:position pos:line="57" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="57" pos:column="27">'/'<pos:position pos:line="57" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="57" pos:column="31"/></argument_list></call> <operator pos:line="57" pos:column="32">==<pos:position pos:line="57" pos:column="34"/></operator> <name pos:line="57" pos:column="35">NULL<pos:position pos:line="57" pos:column="39"/></name> <operator pos:line="57" pos:column="40">&amp;&amp;<pos:position pos:line="57" pos:column="50"/></operator> <operator pos:line="57" pos:column="43">(<pos:position pos:line="57" pos:column="44"/></operator><operator pos:line="57" pos:column="44">!<pos:position pos:line="57" pos:column="45"/></operator><call><name pos:line="57" pos:column="45">strncmp<pos:position pos:line="57" pos:column="52"/></name><argument_list pos:line="57" pos:column="52">(<argument><expr><name pos:line="57" pos:column="53">value<pos:position pos:line="57" pos:column="58"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="57" pos:column="60">"../"<pos:position pos:line="57" pos:column="65"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="57" pos:column="67">3<pos:position pos:line="57" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="57" pos:column="69"/></argument_list></call>
        <operator pos:line="58" pos:column="9">||<pos:position pos:line="58" pos:column="11"/></operator> <operator pos:line="58" pos:column="12">!<pos:position pos:line="58" pos:column="13"/></operator><call><name pos:line="58" pos:column="13">strcmp<pos:position pos:line="58" pos:column="19"/></name><argument_list pos:line="58" pos:column="19">(<argument><expr><name pos:line="58" pos:column="20">value<pos:position pos:line="58" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="58" pos:column="27">".."<pos:position pos:line="58" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="58" pos:column="32"/></argument_list></call><operator pos:line="58" pos:column="32">)<pos:position pos:line="58" pos:column="33"/></operator></expr>)<pos:position pos:line="58" pos:column="34"/></condition><then pos:line="58" pos:column="34"> <block pos:line="58" pos:column="35">{
        <expr_stmt><expr><call><name pos:line="59" pos:column="9">ap_log_rerror<pos:position pos:line="59" pos:column="22"/></name><argument_list pos:line="59" pos:column="22">(<argument><expr><name pos:line="59" pos:column="23">APLOG_MARK<pos:position pos:line="59" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="35">APLOG_ERR<pos:position pos:line="59" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="59" pos:column="46">0<pos:position pos:line="59" pos:column="47"/></literal></expr></argument>, <argument><expr><name pos:line="59" pos:column="49">r<pos:position pos:line="59" pos:column="50"/></name></expr></argument>,
                    <argument><expr><literal type="string" pos:line="60" pos:column="21">"invalid base directive in map file: %s"<pos:position pos:line="60" pos:column="61"/></literal></expr></argument>, <argument><expr><name><name pos:line="60" pos:column="63">r<pos:position pos:line="60" pos:column="64"/></name><operator pos:line="60" pos:column="64">-&gt;<pos:position pos:line="60" pos:column="69"/></operator><name pos:line="60" pos:column="66">uri<pos:position pos:line="60" pos:column="69"/></name></name></expr></argument>)<pos:position pos:line="60" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="71"/></expr_stmt>
        <return pos:line="61" pos:column="9">return <expr><name pos:line="61" pos:column="16">NULL<pos:position pos:line="61" pos:column="20"/></name></expr>;<pos:position pos:line="61" pos:column="21"/></return>
    }<pos:position pos:line="62" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="63" pos:column="5">my_base<pos:position pos:line="63" pos:column="12"/></name> <operator pos:line="63" pos:column="13">=<pos:position pos:line="63" pos:column="14"/></operator> <call><name pos:line="63" pos:column="15">apr_pstrdup<pos:position pos:line="63" pos:column="26"/></name><argument_list pos:line="63" pos:column="26">(<argument><expr><name><name pos:line="63" pos:column="27">r<pos:position pos:line="63" pos:column="28"/></name><operator pos:line="63" pos:column="28">-&gt;<pos:position pos:line="63" pos:column="33"/></operator><name pos:line="63" pos:column="30">pool<pos:position pos:line="63" pos:column="34"/></name></name></expr></argument>, <argument><expr><name pos:line="63" pos:column="36">base<pos:position pos:line="63" pos:column="40"/></name></expr></argument>)<pos:position pos:line="63" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="42"/></expr_stmt>
    <expr_stmt><expr><name pos:line="64" pos:column="5">string_pos<pos:position pos:line="64" pos:column="15"/></name> <operator pos:line="64" pos:column="16">=<pos:position pos:line="64" pos:column="17"/></operator> <name pos:line="64" pos:column="18">my_base<pos:position pos:line="64" pos:column="25"/></name></expr>;<pos:position pos:line="64" pos:column="26"/></expr_stmt>
    <while pos:line="65" pos:column="5">while <condition pos:line="65" pos:column="11">(<expr><operator pos:line="65" pos:column="12">*<pos:position pos:line="65" pos:column="13"/></operator><name pos:line="65" pos:column="13">string_pos<pos:position pos:line="65" pos:column="23"/></name></expr>)<pos:position pos:line="65" pos:column="24"/></condition> <block pos:line="65" pos:column="25">{
        <if pos:line="66" pos:column="9">if <condition pos:line="66" pos:column="12">(<expr><operator pos:line="66" pos:column="13">*<pos:position pos:line="66" pos:column="14"/></operator><name pos:line="66" pos:column="14">string_pos<pos:position pos:line="66" pos:column="24"/></name> <operator pos:line="66" pos:column="25">==<pos:position pos:line="66" pos:column="27"/></operator> <literal type="char" pos:line="66" pos:column="28">'/'<pos:position pos:line="66" pos:column="31"/></literal> <operator pos:line="66" pos:column="32">&amp;&amp;<pos:position pos:line="66" pos:column="42"/></operator> <operator pos:line="66" pos:column="35">*<pos:position pos:line="66" pos:column="36"/></operator><operator pos:line="66" pos:column="36">(<pos:position pos:line="66" pos:column="37"/></operator><name pos:line="66" pos:column="37">string_pos<pos:position pos:line="66" pos:column="47"/></name> <operator pos:line="66" pos:column="48">+<pos:position pos:line="66" pos:column="49"/></operator> <literal type="number" pos:line="66" pos:column="50">1<pos:position pos:line="66" pos:column="51"/></literal><operator pos:line="66" pos:column="51">)<pos:position pos:line="66" pos:column="52"/></operator> <operator pos:line="66" pos:column="53">==<pos:position pos:line="66" pos:column="55"/></operator> <literal type="char" pos:line="66" pos:column="56">'/'<pos:position pos:line="66" pos:column="59"/></literal></expr>)<pos:position pos:line="66" pos:column="60"/></condition><then pos:line="66" pos:column="60"> <block pos:line="66" pos:column="61">{
            <expr_stmt><expr><name pos:line="67" pos:column="13">string_pos<pos:position pos:line="67" pos:column="23"/></name> <operator pos:line="67" pos:column="24">+=<pos:position pos:line="67" pos:column="26"/></operator> <literal type="number" pos:line="67" pos:column="27">2<pos:position pos:line="67" pos:column="28"/></literal></expr>;<pos:position pos:line="67" pos:column="29"/></expr_stmt>    <comment type="block" pos:line="67" pos:column="33">/* if there are two slashes, jump over them */</comment>
            <continue pos:line="68" pos:column="13">continue;<pos:position pos:line="68" pos:column="22"/></continue>
        }<pos:position pos:line="69" pos:column="10"/></block></then></if>
        <if pos:line="70" pos:column="9">if <condition pos:line="70" pos:column="12">(<expr><operator pos:line="70" pos:column="13">*<pos:position pos:line="70" pos:column="14"/></operator><name pos:line="70" pos:column="14">string_pos<pos:position pos:line="70" pos:column="24"/></name> <operator pos:line="70" pos:column="25">==<pos:position pos:line="70" pos:column="27"/></operator> <literal type="char" pos:line="70" pos:column="28">'/'<pos:position pos:line="70" pos:column="31"/></literal></expr>)<pos:position pos:line="70" pos:column="32"/></condition><then pos:line="70" pos:column="32"> <block pos:line="70" pos:column="33">{       <comment type="block" pos:line="70" pos:column="41">/* the first single slash */</comment>
            <if pos:line="71" pos:column="13">if <condition pos:line="71" pos:column="16">(<expr><name><name pos:line="71" pos:column="17">value<pos:position pos:line="71" pos:column="22"/></name><index pos:line="71" pos:column="22">[<expr><literal type="number" pos:line="71" pos:column="23">0<pos:position pos:line="71" pos:column="24"/></literal></expr>]<pos:position pos:line="71" pos:column="25"/></index></name> <operator pos:line="71" pos:column="26">==<pos:position pos:line="71" pos:column="28"/></operator> <literal type="char" pos:line="71" pos:column="29">'/'<pos:position pos:line="71" pos:column="32"/></literal></expr>)<pos:position pos:line="71" pos:column="33"/></condition><then pos:line="71" pos:column="33"> <block pos:line="71" pos:column="34">{
                <expr_stmt><expr><operator pos:line="72" pos:column="17">*<pos:position pos:line="72" pos:column="18"/></operator><name pos:line="72" pos:column="18">string_pos<pos:position pos:line="72" pos:column="28"/></name> <operator pos:line="72" pos:column="29">=<pos:position pos:line="72" pos:column="30"/></operator> <literal type="char" pos:line="72" pos:column="31">'\0'<pos:position pos:line="72" pos:column="35"/></literal></expr>;<pos:position pos:line="72" pos:column="36"/></expr_stmt>
            }<pos:position pos:line="73" pos:column="14"/></block></then>                   <comment type="block" pos:line="73" pos:column="33">/* if the URL from the map starts from root,
                                   end the base URL string at the first single
                                   slash */</comment>
            <else pos:line="76" pos:column="13">else <block pos:line="76" pos:column="18">{
                <expr_stmt><expr><name pos:line="77" pos:column="17">directory<pos:position pos:line="77" pos:column="26"/></name> <operator pos:line="77" pos:column="27">=<pos:position pos:line="77" pos:column="28"/></operator> <name pos:line="77" pos:column="29">string_pos<pos:position pos:line="77" pos:column="39"/></name></expr>;<pos:position pos:line="77" pos:column="40"/></expr_stmt>         <comment type="block" pos:line="77" pos:column="49">/* save the start of
                                                   the directory portion */</comment>

                <expr_stmt><expr><name pos:line="80" pos:column="17">string_pos<pos:position pos:line="80" pos:column="27"/></name> <operator pos:line="80" pos:column="28">=<pos:position pos:line="80" pos:column="29"/></operator> <call><name pos:line="80" pos:column="30">strrchr<pos:position pos:line="80" pos:column="37"/></name><argument_list pos:line="80" pos:column="37">(<argument><expr><name pos:line="80" pos:column="38">string_pos<pos:position pos:line="80" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="80" pos:column="50">'/'<pos:position pos:line="80" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="80" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="55"/></expr_stmt>  <comment type="block" pos:line="80" pos:column="57">/* now reuse
                                                           string_pos */</comment>
                <expr_stmt><expr><name pos:line="82" pos:column="17">string_pos<pos:position pos:line="82" pos:column="27"/></name><operator pos:line="82" pos:column="27">++<pos:position pos:line="82" pos:column="29"/></operator></expr>;<pos:position pos:line="82" pos:column="30"/></expr_stmt>   <comment type="block" pos:line="82" pos:column="33">/* step over that last slash */</comment>
                <expr_stmt><expr><operator pos:line="83" pos:column="17">*<pos:position pos:line="83" pos:column="18"/></operator><name pos:line="83" pos:column="18">string_pos<pos:position pos:line="83" pos:column="28"/></name> <operator pos:line="83" pos:column="29">=<pos:position pos:line="83" pos:column="30"/></operator> <literal type="char" pos:line="83" pos:column="31">'\0'<pos:position pos:line="83" pos:column="35"/></literal></expr>;<pos:position pos:line="83" pos:column="36"/></expr_stmt>
            }<pos:position pos:line="84" pos:column="14"/></block></else></if>                   <comment type="block" pos:line="84" pos:column="33">/* but if the map url is relative, leave the
                                   slash on the base (if there is one) */</comment>
            <break pos:line="86" pos:column="13">break;<pos:position pos:line="86" pos:column="19"/></break>
        }<pos:position pos:line="87" pos:column="10"/></block></then></if>
        <expr_stmt><expr><name pos:line="88" pos:column="9">string_pos<pos:position pos:line="88" pos:column="19"/></name><operator pos:line="88" pos:column="19">++<pos:position pos:line="88" pos:column="21"/></operator></expr>;<pos:position pos:line="88" pos:column="22"/></expr_stmt>           <comment type="block" pos:line="88" pos:column="33">/* until we get to the end of my_base without
                                   finding a slash by itself */</comment>
    }<pos:position pos:line="90" pos:column="6"/></block></while>

    <while pos:line="92" pos:column="5">while <condition pos:line="92" pos:column="11">(<expr><operator pos:line="92" pos:column="12">!<pos:position pos:line="92" pos:column="13"/></operator><call><name pos:line="92" pos:column="13">strncmp<pos:position pos:line="92" pos:column="20"/></name><argument_list pos:line="92" pos:column="20">(<argument><expr><name pos:line="92" pos:column="21">value<pos:position pos:line="92" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="92" pos:column="28">"../"<pos:position pos:line="92" pos:column="33"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="92" pos:column="35">3<pos:position pos:line="92" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="92" pos:column="37"/></argument_list></call> <operator pos:line="92" pos:column="38">||<pos:position pos:line="92" pos:column="40"/></operator> <operator pos:line="92" pos:column="41">!<pos:position pos:line="92" pos:column="42"/></operator><call><name pos:line="92" pos:column="42">strcmp<pos:position pos:line="92" pos:column="48"/></name><argument_list pos:line="92" pos:column="48">(<argument><expr><name pos:line="92" pos:column="49">value<pos:position pos:line="92" pos:column="54"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="92" pos:column="56">".."<pos:position pos:line="92" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="92" pos:column="61"/></argument_list></call></expr>)<pos:position pos:line="92" pos:column="62"/></condition> <block pos:line="92" pos:column="63">{

        <if pos:line="94" pos:column="9">if <condition pos:line="94" pos:column="12">(<expr><name pos:line="94" pos:column="13">directory<pos:position pos:line="94" pos:column="22"/></name> <operator pos:line="94" pos:column="23">&amp;&amp;<pos:position pos:line="94" pos:column="33"/></operator> <operator pos:line="94" pos:column="26">(<pos:position pos:line="94" pos:column="27"/></operator><name pos:line="94" pos:column="27">slen<pos:position pos:line="94" pos:column="31"/></name> <operator pos:line="94" pos:column="32">=<pos:position pos:line="94" pos:column="33"/></operator> <call><name pos:line="94" pos:column="34">strlen<pos:position pos:line="94" pos:column="40"/></name><argument_list pos:line="94" pos:column="40">(<argument><expr><name pos:line="94" pos:column="41">directory<pos:position pos:line="94" pos:column="50"/></name></expr></argument>)<pos:position pos:line="94" pos:column="51"/></argument_list></call><operator pos:line="94" pos:column="51">)<pos:position pos:line="94" pos:column="52"/></operator></expr>)<pos:position pos:line="94" pos:column="53"/></condition><then pos:line="94" pos:column="53"> <block pos:line="94" pos:column="54">{

            <comment type="block" pos:line="96" pos:column="13">/* for each '..',  knock a directory off the end
               by ending the string right at the last slash.
               But only consider the directory portion: don't eat
               into the server name.  And only try if a directory
               portion was found */</comment>

            <expr_stmt><expr><name pos:line="102" pos:column="13">clen<pos:position pos:line="102" pos:column="17"/></name> <operator pos:line="102" pos:column="18">=<pos:position pos:line="102" pos:column="19"/></operator> <name pos:line="102" pos:column="20">slen<pos:position pos:line="102" pos:column="24"/></name> <operator pos:line="102" pos:column="25">-<pos:position pos:line="102" pos:column="26"/></operator> <literal type="number" pos:line="102" pos:column="27">1<pos:position pos:line="102" pos:column="28"/></literal></expr>;<pos:position pos:line="102" pos:column="29"/></expr_stmt>

            <while pos:line="104" pos:column="13">while <condition pos:line="104" pos:column="19">(<expr><operator pos:line="104" pos:column="20">(<pos:position pos:line="104" pos:column="21"/></operator><name pos:line="104" pos:column="21">slen<pos:position pos:line="104" pos:column="25"/></name> <operator pos:line="104" pos:column="26">-<pos:position pos:line="104" pos:column="27"/></operator> <name pos:line="104" pos:column="28">clen<pos:position pos:line="104" pos:column="32"/></name><operator pos:line="104" pos:column="32">)<pos:position pos:line="104" pos:column="33"/></operator> <operator pos:line="104" pos:column="34">==<pos:position pos:line="104" pos:column="36"/></operator> <literal type="number" pos:line="104" pos:column="37">1<pos:position pos:line="104" pos:column="38"/></literal></expr>)<pos:position pos:line="104" pos:column="39"/></condition> <block pos:line="104" pos:column="40">{

                <if pos:line="106" pos:column="17">if <condition pos:line="106" pos:column="20">(<expr><operator pos:line="106" pos:column="21">(<pos:position pos:line="106" pos:column="22"/></operator><name pos:line="106" pos:column="22">string_pos<pos:position pos:line="106" pos:column="32"/></name> <operator pos:line="106" pos:column="33">=<pos:position pos:line="106" pos:column="34"/></operator> <call><name pos:line="106" pos:column="35">strrchr<pos:position pos:line="106" pos:column="42"/></name><argument_list pos:line="106" pos:column="42">(<argument><expr><name pos:line="106" pos:column="43">directory<pos:position pos:line="106" pos:column="52"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="106" pos:column="54">'/'<pos:position pos:line="106" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="106" pos:column="58"/></argument_list></call><operator pos:line="106" pos:column="58">)<pos:position pos:line="106" pos:column="59"/></operator></expr>)<pos:position pos:line="106" pos:column="60"/></condition><then pos:line="106" pos:column="60"> <block pos:line="106" pos:column="61">{
                    <expr_stmt><expr><operator pos:line="107" pos:column="21">*<pos:position pos:line="107" pos:column="22"/></operator><name pos:line="107" pos:column="22">string_pos<pos:position pos:line="107" pos:column="32"/></name> <operator pos:line="107" pos:column="33">=<pos:position pos:line="107" pos:column="34"/></operator> <literal type="char" pos:line="107" pos:column="35">'\0'<pos:position pos:line="107" pos:column="39"/></literal></expr>;<pos:position pos:line="107" pos:column="40"/></expr_stmt>
                }<pos:position pos:line="108" pos:column="18"/></block></then></if>
                <expr_stmt><expr><name pos:line="109" pos:column="17">clen<pos:position pos:line="109" pos:column="21"/></name> <operator pos:line="109" pos:column="22">=<pos:position pos:line="109" pos:column="23"/></operator> <call><name pos:line="109" pos:column="24">strlen<pos:position pos:line="109" pos:column="30"/></name><argument_list pos:line="109" pos:column="30">(<argument><expr><name pos:line="109" pos:column="31">directory<pos:position pos:line="109" pos:column="40"/></name></expr></argument>)<pos:position pos:line="109" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="109" pos:column="42"/></expr_stmt>
                <if pos:line="110" pos:column="17">if <condition pos:line="110" pos:column="20">(<expr><name pos:line="110" pos:column="21">clen<pos:position pos:line="110" pos:column="25"/></name> <operator pos:line="110" pos:column="26">==<pos:position pos:line="110" pos:column="28"/></operator> <literal type="number" pos:line="110" pos:column="29">0<pos:position pos:line="110" pos:column="30"/></literal></expr>)<pos:position pos:line="110" pos:column="31"/></condition><then pos:line="110" pos:column="31"> <block pos:line="110" pos:column="32">{
                    <break pos:line="111" pos:column="21">break;<pos:position pos:line="111" pos:column="27"/></break>
                }<pos:position pos:line="112" pos:column="18"/></block></then></if>
            }<pos:position pos:line="113" pos:column="14"/></block></while>

            <expr_stmt><expr><name pos:line="115" pos:column="13">value<pos:position pos:line="115" pos:column="18"/></name> <operator pos:line="115" pos:column="19">+=<pos:position pos:line="115" pos:column="21"/></operator> <literal type="number" pos:line="115" pos:column="22">2<pos:position pos:line="115" pos:column="23"/></literal></expr>;<pos:position pos:line="115" pos:column="24"/></expr_stmt>         <comment type="block" pos:line="115" pos:column="33">/* jump over the '..' that we found in the
                                   value */</comment>
        }<pos:position pos:line="117" pos:column="10"/></block></then>
        <elseif pos:line="118" pos:column="9">else <if pos:line="118" pos:column="14">if <condition pos:line="118" pos:column="17">(<expr><name pos:line="118" pos:column="18">directory<pos:position pos:line="118" pos:column="27"/></name></expr>)<pos:position pos:line="118" pos:column="28"/></condition><then pos:line="118" pos:column="28"> <block pos:line="118" pos:column="29">{
            <expr_stmt><expr><call><name pos:line="119" pos:column="13">ap_log_rerror<pos:position pos:line="119" pos:column="26"/></name><argument_list pos:line="119" pos:column="26">(<argument><expr><name pos:line="119" pos:column="27">APLOG_MARK<pos:position pos:line="119" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="119" pos:column="39">APLOG_ERR<pos:position pos:line="119" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="119" pos:column="50">0<pos:position pos:line="119" pos:column="51"/></literal></expr></argument>, <argument><expr><name pos:line="119" pos:column="53">r<pos:position pos:line="119" pos:column="54"/></name></expr></argument>,
                        <argument><expr><literal type="string" pos:line="120" pos:column="25">"invalid directory name in map file: %s"<pos:position pos:line="120" pos:column="65"/></literal></expr></argument>, <argument><expr><name><name pos:line="120" pos:column="67">r<pos:position pos:line="120" pos:column="68"/></name><operator pos:line="120" pos:column="68">-&gt;<pos:position pos:line="120" pos:column="73"/></operator><name pos:line="120" pos:column="70">uri<pos:position pos:line="120" pos:column="73"/></name></name></expr></argument>)<pos:position pos:line="120" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="120" pos:column="75"/></expr_stmt>
            <return pos:line="121" pos:column="13">return <expr><name pos:line="121" pos:column="20">NULL<pos:position pos:line="121" pos:column="24"/></name></expr>;<pos:position pos:line="121" pos:column="25"/></return>
        }<pos:position pos:line="122" pos:column="10"/></block></then></if></elseif></if>

        <if pos:line="124" pos:column="9">if <condition pos:line="124" pos:column="12">(<expr><operator pos:line="124" pos:column="13">!<pos:position pos:line="124" pos:column="14"/></operator><call><name pos:line="124" pos:column="14">strncmp<pos:position pos:line="124" pos:column="21"/></name><argument_list pos:line="124" pos:column="21">(<argument><expr><name pos:line="124" pos:column="22">value<pos:position pos:line="124" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="124" pos:column="29">"/../"<pos:position pos:line="124" pos:column="35"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="124" pos:column="37">4<pos:position pos:line="124" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="124" pos:column="39"/></argument_list></call> <operator pos:line="124" pos:column="40">||<pos:position pos:line="124" pos:column="42"/></operator> <operator pos:line="124" pos:column="43">!<pos:position pos:line="124" pos:column="44"/></operator><call><name pos:line="124" pos:column="44">strcmp<pos:position pos:line="124" pos:column="50"/></name><argument_list pos:line="124" pos:column="50">(<argument><expr><name pos:line="124" pos:column="51">value<pos:position pos:line="124" pos:column="56"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="124" pos:column="58">"/.."<pos:position pos:line="124" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="124" pos:column="64"/></argument_list></call></expr>)<pos:position pos:line="124" pos:column="65"/></condition><then pos:line="124" pos:column="65"> <block pos:line="124" pos:column="66">{
            <expr_stmt><expr><name pos:line="125" pos:column="13">value<pos:position pos:line="125" pos:column="18"/></name><operator pos:line="125" pos:column="18">++<pos:position pos:line="125" pos:column="20"/></operator></expr>;<pos:position pos:line="125" pos:column="21"/></expr_stmt>            <comment type="block" pos:line="125" pos:column="33">/* step over the '/' if there are more '..'
                                   to do.  This way, we leave the starting
                                   '/' on value after the last '..', but get
                                   rid of it otherwise */</comment>
        }<pos:position pos:line="129" pos:column="10"/></block></then></if>

    }<pos:position pos:line="131" pos:column="6"/></block></while>                           <comment type="block" pos:line="131" pos:column="33">/* by this point, value does not start
                                   with '..' */</comment>

    <if pos:line="134" pos:column="5">if <condition pos:line="134" pos:column="8">(<expr><name pos:line="134" pos:column="9">value<pos:position pos:line="134" pos:column="14"/></name> <operator pos:line="134" pos:column="15">&amp;&amp;<pos:position pos:line="134" pos:column="25"/></operator> <operator pos:line="134" pos:column="18">*<pos:position pos:line="134" pos:column="19"/></operator><name pos:line="134" pos:column="19">value<pos:position pos:line="134" pos:column="24"/></name></expr>)<pos:position pos:line="134" pos:column="25"/></condition><then pos:line="134" pos:column="25"> <block pos:line="134" pos:column="26">{
        <return pos:line="135" pos:column="9">return <expr><call><name pos:line="135" pos:column="16">apr_pstrcat<pos:position pos:line="135" pos:column="27"/></name><argument_list pos:line="135" pos:column="27">(<argument><expr><name><name pos:line="135" pos:column="28">r<pos:position pos:line="135" pos:column="29"/></name><operator pos:line="135" pos:column="29">-&gt;<pos:position pos:line="135" pos:column="34"/></operator><name pos:line="135" pos:column="31">pool<pos:position pos:line="135" pos:column="35"/></name></name></expr></argument>, <argument><expr><name pos:line="135" pos:column="37">my_base<pos:position pos:line="135" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="135" pos:column="46">value<pos:position pos:line="135" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="135" pos:column="53">NULL<pos:position pos:line="135" pos:column="57"/></name></expr></argument>)<pos:position pos:line="135" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="135" pos:column="59"/></return>
    }<pos:position pos:line="136" pos:column="6"/></block></then></if>
    <return pos:line="137" pos:column="5">return <expr><name pos:line="137" pos:column="12">my_base<pos:position pos:line="137" pos:column="19"/></name></expr>;<pos:position pos:line="137" pos:column="20"/></return>
}<pos:position pos:line="138" pos:column="2"/></block></function></unit>
