<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_function_5787.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">apr_status_t<pos:position pos:line="1" pos:column="13"/></name></type> <name pos:line="1" pos:column="14">h2_conn_setup<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name pos:line="1" pos:column="28">h2_task_env<pos:position pos:line="1" pos:column="39"/></name> <modifier pos:line="1" pos:column="40">*<pos:position pos:line="1" pos:column="41"/></modifier></type><name pos:line="1" pos:column="41">env<pos:position pos:line="1" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="46">struct<pos:position pos:line="1" pos:column="52"/></name> <name pos:line="1" pos:column="53">h2_worker<pos:position pos:line="1" pos:column="62"/></name></name> <modifier pos:line="1" pos:column="63">*<pos:position pos:line="1" pos:column="64"/></modifier></type><name pos:line="1" pos:column="64">worker<pos:position pos:line="1" pos:column="70"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="71"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">conn_rec<pos:position pos:line="3" pos:column="13"/></name> <modifier pos:line="3" pos:column="14">*<pos:position pos:line="3" pos:column="15"/></modifier></type><name pos:line="3" pos:column="15">master<pos:position pos:line="3" pos:column="21"/></name> <init pos:line="3" pos:column="22">= <expr><name><name pos:line="3" pos:column="24">env<pos:position pos:line="3" pos:column="27"/></name><operator pos:line="3" pos:column="27">-&gt;<pos:position pos:line="3" pos:column="32"/></operator><name pos:line="3" pos:column="29">mplx<pos:position pos:line="3" pos:column="33"/></name><operator pos:line="3" pos:column="33">-&gt;<pos:position pos:line="3" pos:column="38"/></operator><name pos:line="3" pos:column="35">c<pos:position pos:line="3" pos:column="36"/></name></name></expr></init></decl>;<pos:position pos:line="3" pos:column="37"/></decl_stmt>
    
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">ap_log_perror<pos:position pos:line="5" pos:column="18"/></name><argument_list pos:line="5" pos:column="18">(<argument><expr><name pos:line="5" pos:column="19">APLOG_MARK<pos:position pos:line="5" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="5" pos:column="31">APLOG_TRACE3<pos:position pos:line="5" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="5" pos:column="45">0<pos:position pos:line="5" pos:column="46"/></literal></expr></argument>, <argument><expr><name><name pos:line="5" pos:column="48">env<pos:position pos:line="5" pos:column="51"/></name><operator pos:line="5" pos:column="51">-&gt;<pos:position pos:line="5" pos:column="56"/></operator><name pos:line="5" pos:column="53">pool<pos:position pos:line="5" pos:column="57"/></name></name></expr></argument>,
                  <argument><expr><literal type="string" pos:line="6" pos:column="19">"h2_conn(%ld): created from master"<pos:position pos:line="6" pos:column="54"/></literal></expr></argument>, <argument><expr><name><name pos:line="6" pos:column="56">master<pos:position pos:line="6" pos:column="62"/></name><operator pos:line="6" pos:column="62">-&gt;<pos:position pos:line="6" pos:column="67"/></operator><name pos:line="6" pos:column="64">id<pos:position pos:line="6" pos:column="66"/></name></name></expr></argument>)<pos:position pos:line="6" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="68"/></expr_stmt>
    
    <comment type="block" pos:line="8" pos:column="5">/* Ok, we are just about to start processing the connection and
     * the worker is calling us to setup all necessary resources.
     * We can borrow some from the worker itself and some we do as
     * sub-resources from it, so that we get a nice reuse of
     * pools.
     */</comment>
    <expr_stmt><expr><name><name pos:line="14" pos:column="5">env<pos:position pos:line="14" pos:column="8"/></name><operator pos:line="14" pos:column="8">-&gt;<pos:position pos:line="14" pos:column="13"/></operator><name pos:line="14" pos:column="10">c<pos:position pos:line="14" pos:column="11"/></name><operator pos:line="14" pos:column="11">.<pos:position pos:line="14" pos:column="12"/></operator><name pos:line="14" pos:column="12">pool<pos:position pos:line="14" pos:column="16"/></name></name> <operator pos:line="14" pos:column="17">=<pos:position pos:line="14" pos:column="18"/></operator> <name><name pos:line="14" pos:column="19">env<pos:position pos:line="14" pos:column="22"/></name><operator pos:line="14" pos:column="22">-&gt;<pos:position pos:line="14" pos:column="27"/></operator><name pos:line="14" pos:column="24">pool<pos:position pos:line="14" pos:column="28"/></name></name></expr>;<pos:position pos:line="14" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="15" pos:column="5">env<pos:position pos:line="15" pos:column="8"/></name><operator pos:line="15" pos:column="8">-&gt;<pos:position pos:line="15" pos:column="13"/></operator><name pos:line="15" pos:column="10">c<pos:position pos:line="15" pos:column="11"/></name><operator pos:line="15" pos:column="11">.<pos:position pos:line="15" pos:column="12"/></operator><name pos:line="15" pos:column="12">bucket_alloc<pos:position pos:line="15" pos:column="24"/></name></name> <operator pos:line="15" pos:column="25">=<pos:position pos:line="15" pos:column="26"/></operator> <call><name pos:line="15" pos:column="27">h2_worker_get_bucket_alloc<pos:position pos:line="15" pos:column="53"/></name><argument_list pos:line="15" pos:column="53">(<argument><expr><name pos:line="15" pos:column="54">worker<pos:position pos:line="15" pos:column="60"/></name></expr></argument>)<pos:position pos:line="15" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="62"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="16" pos:column="5">env<pos:position pos:line="16" pos:column="8"/></name><operator pos:line="16" pos:column="8">-&gt;<pos:position pos:line="16" pos:column="13"/></operator><name pos:line="16" pos:column="10">c<pos:position pos:line="16" pos:column="11"/></name><operator pos:line="16" pos:column="11">.<pos:position pos:line="16" pos:column="12"/></operator><name pos:line="16" pos:column="12">current_thread<pos:position pos:line="16" pos:column="26"/></name></name> <operator pos:line="16" pos:column="27">=<pos:position pos:line="16" pos:column="28"/></operator> <call><name pos:line="16" pos:column="29">h2_worker_get_thread<pos:position pos:line="16" pos:column="49"/></name><argument_list pos:line="16" pos:column="49">(<argument><expr><name pos:line="16" pos:column="50">worker<pos:position pos:line="16" pos:column="56"/></name></expr></argument>)<pos:position pos:line="16" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="58"/></expr_stmt>
    
    <expr_stmt><expr><name><name pos:line="18" pos:column="5">env<pos:position pos:line="18" pos:column="8"/></name><operator pos:line="18" pos:column="8">-&gt;<pos:position pos:line="18" pos:column="13"/></operator><name pos:line="18" pos:column="10">c<pos:position pos:line="18" pos:column="11"/></name><operator pos:line="18" pos:column="11">.<pos:position pos:line="18" pos:column="12"/></operator><name pos:line="18" pos:column="12">conn_config<pos:position pos:line="18" pos:column="23"/></name></name> <operator pos:line="18" pos:column="24">=<pos:position pos:line="18" pos:column="25"/></operator> <call><name pos:line="18" pos:column="26">ap_create_conn_config<pos:position pos:line="18" pos:column="47"/></name><argument_list pos:line="18" pos:column="47">(<argument><expr><name><name pos:line="18" pos:column="48">env<pos:position pos:line="18" pos:column="51"/></name><operator pos:line="18" pos:column="51">-&gt;<pos:position pos:line="18" pos:column="56"/></operator><name pos:line="18" pos:column="53">pool<pos:position pos:line="18" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="18" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="59"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="19" pos:column="5">env<pos:position pos:line="19" pos:column="8"/></name><operator pos:line="19" pos:column="8">-&gt;<pos:position pos:line="19" pos:column="13"/></operator><name pos:line="19" pos:column="10">c<pos:position pos:line="19" pos:column="11"/></name><operator pos:line="19" pos:column="11">.<pos:position pos:line="19" pos:column="12"/></operator><name pos:line="19" pos:column="12">notes<pos:position pos:line="19" pos:column="17"/></name></name> <operator pos:line="19" pos:column="18">=<pos:position pos:line="19" pos:column="19"/></operator> <call><name pos:line="19" pos:column="20">apr_table_make<pos:position pos:line="19" pos:column="34"/></name><argument_list pos:line="19" pos:column="34">(<argument><expr><name><name pos:line="19" pos:column="35">env<pos:position pos:line="19" pos:column="38"/></name><operator pos:line="19" pos:column="38">-&gt;<pos:position pos:line="19" pos:column="43"/></operator><name pos:line="19" pos:column="40">pool<pos:position pos:line="19" pos:column="44"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="19" pos:column="46">5<pos:position pos:line="19" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="49"/></expr_stmt>
    
    <expr_stmt><expr><call><name pos:line="21" pos:column="5">ap_set_module_config<pos:position pos:line="21" pos:column="25"/></name><argument_list pos:line="21" pos:column="25">(<argument><expr><name><name pos:line="21" pos:column="26">env<pos:position pos:line="21" pos:column="29"/></name><operator pos:line="21" pos:column="29">-&gt;<pos:position pos:line="21" pos:column="34"/></operator><name pos:line="21" pos:column="31">c<pos:position pos:line="21" pos:column="32"/></name><operator pos:line="21" pos:column="32">.<pos:position pos:line="21" pos:column="33"/></operator><name pos:line="21" pos:column="33">conn_config<pos:position pos:line="21" pos:column="44"/></name></name></expr></argument>, <argument><expr><operator pos:line="21" pos:column="46">&amp;<pos:position pos:line="21" pos:column="51"/></operator><name pos:line="21" pos:column="47">core_module<pos:position pos:line="21" pos:column="58"/></name></expr></argument>, 
                         <argument><expr><call><name pos:line="22" pos:column="26">h2_worker_get_socket<pos:position pos:line="22" pos:column="46"/></name><argument_list pos:line="22" pos:column="46">(<argument><expr><name pos:line="22" pos:column="47">worker<pos:position pos:line="22" pos:column="53"/></name></expr></argument>)<pos:position pos:line="22" pos:column="54"/></argument_list></call></expr></argument>)<pos:position pos:line="22" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="56"/></expr_stmt>
    
    <comment type="block" pos:line="24" pos:column="5">/* If we serve http:// requests over a TLS connection, we do
     * not want any mod_ssl vars to be visible.
     */</comment>
    <if pos:line="27" pos:column="5">if <condition pos:line="27" pos:column="8">(<expr><name pos:line="27" pos:column="9">ssl_module<pos:position pos:line="27" pos:column="19"/></name> <operator pos:line="27" pos:column="20">&amp;&amp;<pos:position pos:line="27" pos:column="30"/></operator> <operator pos:line="27" pos:column="23">(<pos:position pos:line="27" pos:column="24"/></operator><operator pos:line="27" pos:column="24">!<pos:position pos:line="27" pos:column="25"/></operator><name><name pos:line="27" pos:column="25">env<pos:position pos:line="27" pos:column="28"/></name><operator pos:line="27" pos:column="28">-&gt;<pos:position pos:line="27" pos:column="33"/></operator><name pos:line="27" pos:column="30">scheme<pos:position pos:line="27" pos:column="36"/></name></name> <operator pos:line="27" pos:column="37">||<pos:position pos:line="27" pos:column="39"/></operator> <call><name pos:line="27" pos:column="40">strcmp<pos:position pos:line="27" pos:column="46"/></name><argument_list pos:line="27" pos:column="46">(<argument><expr><literal type="string" pos:line="27" pos:column="47">"http"<pos:position pos:line="27" pos:column="53"/></literal></expr></argument>, <argument><expr><name><name pos:line="27" pos:column="55">env<pos:position pos:line="27" pos:column="58"/></name><operator pos:line="27" pos:column="58">-&gt;<pos:position pos:line="27" pos:column="63"/></operator><name pos:line="27" pos:column="60">scheme<pos:position pos:line="27" pos:column="66"/></name></name></expr></argument>)<pos:position pos:line="27" pos:column="67"/></argument_list></call><operator pos:line="27" pos:column="67">)<pos:position pos:line="27" pos:column="68"/></operator></expr>)<pos:position pos:line="27" pos:column="69"/></condition><then pos:line="27" pos:column="69"> <block pos:line="27" pos:column="70">{
        <comment type="block" pos:line="28" pos:column="9">/* See #19, there is a range of SSL variables to be gotten from
         * the main connection that should be available in request handlers
         */</comment>
        <decl_stmt><decl><type><name pos:line="31" pos:column="9">void<pos:position pos:line="31" pos:column="13"/></name> <modifier pos:line="31" pos:column="14">*<pos:position pos:line="31" pos:column="15"/></modifier></type><name pos:line="31" pos:column="15">sslcfg<pos:position pos:line="31" pos:column="21"/></name> <init pos:line="31" pos:column="22">= <expr><call><name pos:line="31" pos:column="24">ap_get_module_config<pos:position pos:line="31" pos:column="44"/></name><argument_list pos:line="31" pos:column="44">(<argument><expr><name><name pos:line="31" pos:column="45">master<pos:position pos:line="31" pos:column="51"/></name><operator pos:line="31" pos:column="51">-&gt;<pos:position pos:line="31" pos:column="56"/></operator><name pos:line="31" pos:column="53">conn_config<pos:position pos:line="31" pos:column="64"/></name></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="66">ssl_module<pos:position pos:line="31" pos:column="76"/></name></expr></argument>)<pos:position pos:line="31" pos:column="77"/></argument_list></call></expr></init></decl>;<pos:position pos:line="31" pos:column="78"/></decl_stmt>
        <if pos:line="32" pos:column="9">if <condition pos:line="32" pos:column="12">(<expr><name pos:line="32" pos:column="13">sslcfg<pos:position pos:line="32" pos:column="19"/></name></expr>)<pos:position pos:line="32" pos:column="20"/></condition><then pos:line="32" pos:column="20"> <block pos:line="32" pos:column="21">{
            <expr_stmt><expr><call><name pos:line="33" pos:column="13">ap_set_module_config<pos:position pos:line="33" pos:column="33"/></name><argument_list pos:line="33" pos:column="33">(<argument><expr><name><name pos:line="33" pos:column="34">env<pos:position pos:line="33" pos:column="37"/></name><operator pos:line="33" pos:column="37">-&gt;<pos:position pos:line="33" pos:column="42"/></operator><name pos:line="33" pos:column="39">c<pos:position pos:line="33" pos:column="40"/></name><operator pos:line="33" pos:column="40">.<pos:position pos:line="33" pos:column="41"/></operator><name pos:line="33" pos:column="41">conn_config<pos:position pos:line="33" pos:column="52"/></name></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="54">ssl_module<pos:position pos:line="33" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="66">sslcfg<pos:position pos:line="33" pos:column="72"/></name></expr></argument>)<pos:position pos:line="33" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="74"/></expr_stmt>
        }<pos:position pos:line="34" pos:column="10"/></block></then></if>
    }<pos:position pos:line="35" pos:column="6"/></block></then></if>
    
    <comment type="block" pos:line="37" pos:column="5">/* This works for mpm_worker so far. Other mpm modules have 
     * different needs, unfortunately. The most interesting one 
     * being mpm_event...
     */</comment>
    <switch pos:line="41" pos:column="5">switch <condition pos:line="41" pos:column="12">(<expr><call><name pos:line="41" pos:column="13">h2_conn_mpm_type<pos:position pos:line="41" pos:column="29"/></name><argument_list pos:line="41" pos:column="29">()<pos:position pos:line="41" pos:column="31"/></argument_list></call></expr>)<pos:position pos:line="41" pos:column="32"/></condition> <block pos:line="41" pos:column="33">{
        <case pos:line="42" pos:column="9">case <expr><name pos:line="42" pos:column="14">H2_MPM_WORKER<pos:position pos:line="42" pos:column="27"/></name></expr>:<pos:position pos:line="42" pos:column="28"/></case>
            <comment type="block" pos:line="43" pos:column="13">/* all fine */</comment>
            <break pos:line="44" pos:column="13">break;<pos:position pos:line="44" pos:column="19"/></break>
        <case pos:line="45" pos:column="9">case <expr><name pos:line="45" pos:column="14">H2_MPM_EVENT<pos:position pos:line="45" pos:column="26"/></name></expr>:<pos:position pos:line="45" pos:column="27"/></case> 
            <expr_stmt><expr><call><name pos:line="46" pos:column="13">fix_event_conn<pos:position pos:line="46" pos:column="27"/></name><argument_list pos:line="46" pos:column="27">(<argument><expr><operator pos:line="46" pos:column="28">&amp;<pos:position pos:line="46" pos:column="33"/></operator><name><name pos:line="46" pos:column="29">env<pos:position pos:line="46" pos:column="32"/></name><operator pos:line="46" pos:column="32">-&gt;<pos:position pos:line="46" pos:column="37"/></operator><name pos:line="46" pos:column="34">c<pos:position pos:line="46" pos:column="35"/></name></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="37">master<pos:position pos:line="46" pos:column="43"/></name></expr></argument>)<pos:position pos:line="46" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="45"/></expr_stmt>
            <break pos:line="47" pos:column="13">break;<pos:position pos:line="47" pos:column="19"/></break>
        <default pos:line="48" pos:column="9">default:<pos:position pos:line="48" pos:column="17"/></default>
            <comment type="block" pos:line="49" pos:column="13">/* fingers crossed */</comment>
            <break pos:line="50" pos:column="13">break;<pos:position pos:line="50" pos:column="19"/></break>
    }<pos:position pos:line="51" pos:column="6"/></block></switch>
    
    <comment type="block" pos:line="53" pos:column="5">/* TODO: we simulate that we had already a request on this connection.
     * This keeps the mod_ssl SNI vs. Host name matcher from answering 
     * 400 Bad Request
     * when names do not match. We prefer a predictable 421 status.
     */</comment>
    <expr_stmt><expr><name><name pos:line="58" pos:column="5">env<pos:position pos:line="58" pos:column="8"/></name><operator pos:line="58" pos:column="8">-&gt;<pos:position pos:line="58" pos:column="13"/></operator><name pos:line="58" pos:column="10">c<pos:position pos:line="58" pos:column="11"/></name><operator pos:line="58" pos:column="11">.<pos:position pos:line="58" pos:column="12"/></operator><name pos:line="58" pos:column="12">keepalives<pos:position pos:line="58" pos:column="22"/></name></name> <operator pos:line="58" pos:column="23">=<pos:position pos:line="58" pos:column="24"/></operator> <literal type="number" pos:line="58" pos:column="25">1<pos:position pos:line="58" pos:column="26"/></literal></expr>;<pos:position pos:line="58" pos:column="27"/></expr_stmt>
    
    <return pos:line="60" pos:column="5">return <expr><name pos:line="60" pos:column="12">APR_SUCCESS<pos:position pos:line="60" pos:column="23"/></name></expr>;<pos:position pos:line="60" pos:column="24"/></return>
}<pos:position pos:line="61" pos:column="2"/></block></function></unit>
