<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_function_2499.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">main<pos:position pos:line="1" pos:column="9"/></name><parameter_list pos:line="1" pos:column="9">(<parameter><decl><type><name pos:line="1" pos:column="10">int<pos:position pos:line="1" pos:column="13"/></name></type> <name pos:line="1" pos:column="14">argc<pos:position pos:line="1" pos:column="18"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="20">const<pos:position pos:line="1" pos:column="25"/></specifier> <name pos:line="1" pos:column="26">char<pos:position pos:line="1" pos:column="30"/></name> <modifier pos:line="1" pos:column="31">*<pos:position pos:line="1" pos:column="32"/></modifier> <specifier pos:line="1" pos:column="33">const<pos:position pos:line="1" pos:column="38"/></specifier></type> <name><name pos:line="1" pos:column="39">argv<pos:position pos:line="1" pos:column="43"/></name><index pos:line="1" pos:column="43">[]<pos:position pos:line="1" pos:column="45"/></index></name></decl></parameter>)<pos:position pos:line="1" pos:column="46"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">int<pos:position pos:line="3" pos:column="8"/></name></type> <name pos:line="3" pos:column="9">r<pos:position pos:line="3" pos:column="10"/></name></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="12">l<pos:position pos:line="3" pos:column="13"/></name></decl>;<pos:position pos:line="3" pos:column="14"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">char<pos:position pos:line="4" pos:column="9"/></name></type> <name><name pos:line="4" pos:column="10">tmp<pos:position pos:line="4" pos:column="13"/></name><index pos:line="4" pos:column="13">[<expr><literal type="number" pos:line="4" pos:column="14">1024<pos:position pos:line="4" pos:column="18"/></literal></expr>]<pos:position pos:line="4" pos:column="19"/></index></name></decl>;<pos:position pos:line="4" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">apr_status_t<pos:position pos:line="5" pos:column="17"/></name></type> <name pos:line="5" pos:column="18">status<pos:position pos:line="5" pos:column="24"/></name></decl>;<pos:position pos:line="5" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">apr_getopt_t<pos:position pos:line="6" pos:column="17"/></name> <modifier pos:line="6" pos:column="18">*<pos:position pos:line="6" pos:column="19"/></modifier></type><name pos:line="6" pos:column="19">opt<pos:position pos:line="6" pos:column="22"/></name></decl>;<pos:position pos:line="6" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="7" pos:column="5">const<pos:position pos:line="7" pos:column="10"/></specifier> <name pos:line="7" pos:column="11">char<pos:position pos:line="7" pos:column="15"/></name> <modifier pos:line="7" pos:column="16">*<pos:position pos:line="7" pos:column="17"/></modifier></type><name pos:line="7" pos:column="17">optarg<pos:position pos:line="7" pos:column="23"/></name></decl>;<pos:position pos:line="7" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">char<pos:position pos:line="8" pos:column="9"/></name></type> <name pos:line="8" pos:column="10">c<pos:position pos:line="8" pos:column="11"/></name></decl>;<pos:position pos:line="8" pos:column="12"/></decl_stmt>
<cpp:ifdef pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">ifdef<pos:position pos:line="9" pos:column="7"/></cpp:directive> <name pos:line="9" pos:column="8">USE_SSL<pos:position pos:line="9" pos:column="15"/></name></cpp:ifdef>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">AB_SSL_METHOD_CONST<pos:position pos:line="10" pos:column="24"/></name> <name pos:line="10" pos:column="25">SSL_METHOD<pos:position pos:line="10" pos:column="35"/></name> <modifier pos:line="10" pos:column="36">*<pos:position pos:line="10" pos:column="37"/></modifier></type><name pos:line="10" pos:column="37">meth<pos:position pos:line="10" pos:column="41"/></name> <init pos:line="10" pos:column="42">= <expr><call><name pos:line="10" pos:column="44">SSLv23_client_method<pos:position pos:line="10" pos:column="64"/></name><argument_list pos:line="10" pos:column="64">()<pos:position pos:line="10" pos:column="66"/></argument_list></call></expr></init></decl>;<pos:position pos:line="10" pos:column="67"/></decl_stmt>
<cpp:endif pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">endif<pos:position pos:line="11" pos:column="7"/></cpp:directive></cpp:endif>

    <comment type="block" pos:line="13" pos:column="5">/* table defaults  */</comment>
    <expr_stmt><expr><name pos:line="14" pos:column="5">tablestring<pos:position pos:line="14" pos:column="16"/></name> <operator pos:line="14" pos:column="17">=<pos:position pos:line="14" pos:column="18"/></operator> <literal type="string" pos:line="14" pos:column="19">""<pos:position pos:line="14" pos:column="21"/></literal></expr>;<pos:position pos:line="14" pos:column="22"/></expr_stmt>
    <expr_stmt><expr><name pos:line="15" pos:column="5">trstring<pos:position pos:line="15" pos:column="13"/></name> <operator pos:line="15" pos:column="14">=<pos:position pos:line="15" pos:column="15"/></operator> <literal type="string" pos:line="15" pos:column="16">""<pos:position pos:line="15" pos:column="18"/></literal></expr>;<pos:position pos:line="15" pos:column="19"/></expr_stmt>
    <expr_stmt><expr><name pos:line="16" pos:column="5">tdstring<pos:position pos:line="16" pos:column="13"/></name> <operator pos:line="16" pos:column="14">=<pos:position pos:line="16" pos:column="15"/></operator> <literal type="string" pos:line="16" pos:column="16">"bgcolor=white"<pos:position pos:line="16" pos:column="31"/></literal></expr>;<pos:position pos:line="16" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><name pos:line="17" pos:column="5">cookie<pos:position pos:line="17" pos:column="11"/></name> <operator pos:line="17" pos:column="12">=<pos:position pos:line="17" pos:column="13"/></operator> <literal type="string" pos:line="17" pos:column="14">""<pos:position pos:line="17" pos:column="16"/></literal></expr>;<pos:position pos:line="17" pos:column="17"/></expr_stmt>
    <expr_stmt><expr><name pos:line="18" pos:column="5">auth<pos:position pos:line="18" pos:column="9"/></name> <operator pos:line="18" pos:column="10">=<pos:position pos:line="18" pos:column="11"/></operator> <literal type="string" pos:line="18" pos:column="12">""<pos:position pos:line="18" pos:column="14"/></literal></expr>;<pos:position pos:line="18" pos:column="15"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="19" pos:column="5">proxyhost<pos:position pos:line="19" pos:column="14"/></name><index pos:line="19" pos:column="14">[<expr><literal type="number" pos:line="19" pos:column="15">0<pos:position pos:line="19" pos:column="16"/></literal></expr>]<pos:position pos:line="19" pos:column="17"/></index></name> <operator pos:line="19" pos:column="18">=<pos:position pos:line="19" pos:column="19"/></operator> <literal type="char" pos:line="19" pos:column="20">'\0'<pos:position pos:line="19" pos:column="24"/></literal></expr>;<pos:position pos:line="19" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><name pos:line="20" pos:column="5">hdrs<pos:position pos:line="20" pos:column="9"/></name> <operator pos:line="20" pos:column="10">=<pos:position pos:line="20" pos:column="11"/></operator> <literal type="string" pos:line="20" pos:column="12">""<pos:position pos:line="20" pos:column="14"/></literal></expr>;<pos:position pos:line="20" pos:column="15"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="22" pos:column="5">apr_app_initialize<pos:position pos:line="22" pos:column="23"/></name><argument_list pos:line="22" pos:column="23">(<argument><expr><operator pos:line="22" pos:column="24">&amp;<pos:position pos:line="22" pos:column="29"/></operator><name pos:line="22" pos:column="25">argc<pos:position pos:line="22" pos:column="29"/></name></expr></argument>, <argument><expr><operator pos:line="22" pos:column="31">&amp;<pos:position pos:line="22" pos:column="36"/></operator><name pos:line="22" pos:column="32">argv<pos:position pos:line="22" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="38">NULL<pos:position pos:line="22" pos:column="42"/></name></expr></argument>)<pos:position pos:line="22" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="44"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="23" pos:column="5">atexit<pos:position pos:line="23" pos:column="11"/></name><argument_list pos:line="23" pos:column="11">(<argument><expr><name pos:line="23" pos:column="12">apr_terminate<pos:position pos:line="23" pos:column="25"/></name></expr></argument>)<pos:position pos:line="23" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="24" pos:column="5">apr_pool_create<pos:position pos:line="24" pos:column="20"/></name><argument_list pos:line="24" pos:column="20">(<argument><expr><operator pos:line="24" pos:column="21">&amp;<pos:position pos:line="24" pos:column="26"/></operator><name pos:line="24" pos:column="22">cntxt<pos:position pos:line="24" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="29">NULL<pos:position pos:line="24" pos:column="33"/></name></expr></argument>)<pos:position pos:line="24" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="35"/></expr_stmt>

<cpp:ifdef pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">ifdef<pos:position pos:line="26" pos:column="7"/></cpp:directive> <name pos:line="26" pos:column="8">NOT_ASCII<pos:position pos:line="26" pos:column="17"/></name></cpp:ifdef>
    <expr_stmt><expr><name pos:line="27" pos:column="5">status<pos:position pos:line="27" pos:column="11"/></name> <operator pos:line="27" pos:column="12">=<pos:position pos:line="27" pos:column="13"/></operator> <call><name pos:line="27" pos:column="14">apr_xlate_open<pos:position pos:line="27" pos:column="28"/></name><argument_list pos:line="27" pos:column="28">(<argument><expr><operator pos:line="27" pos:column="29">&amp;<pos:position pos:line="27" pos:column="34"/></operator><name pos:line="27" pos:column="30">to_ascii<pos:position pos:line="27" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="27" pos:column="40">"ISO-8859-1"<pos:position pos:line="27" pos:column="52"/></literal></expr></argument>, <argument><expr><name pos:line="27" pos:column="54">APR_DEFAULT_CHARSET<pos:position pos:line="27" pos:column="73"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="75">cntxt<pos:position pos:line="27" pos:column="80"/></name></expr></argument>)<pos:position pos:line="27" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="82"/></expr_stmt>
    <if pos:line="28" pos:column="5">if <condition pos:line="28" pos:column="8">(<expr><name pos:line="28" pos:column="9">status<pos:position pos:line="28" pos:column="15"/></name></expr>)<pos:position pos:line="28" pos:column="16"/></condition><then pos:line="28" pos:column="16"> <block pos:line="28" pos:column="17">{
        <expr_stmt><expr><call><name pos:line="29" pos:column="9">fprintf<pos:position pos:line="29" pos:column="16"/></name><argument_list pos:line="29" pos:column="16">(<argument><expr><name pos:line="29" pos:column="17">stderr<pos:position pos:line="29" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="29" pos:column="25">"apr_xlate_open(to ASCII)-&gt;%d\n"<pos:position pos:line="29" pos:column="60"/></literal></expr></argument>, <argument><expr><name pos:line="29" pos:column="59">status<pos:position pos:line="29" pos:column="65"/></name></expr></argument>)<pos:position pos:line="29" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="67"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="30" pos:column="9">exit<pos:position pos:line="30" pos:column="13"/></name><argument_list pos:line="30" pos:column="13">(<argument><expr><literal type="number" pos:line="30" pos:column="14">1<pos:position pos:line="30" pos:column="15"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="17"/></expr_stmt>
    }<pos:position pos:line="31" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="32" pos:column="5">status<pos:position pos:line="32" pos:column="11"/></name> <operator pos:line="32" pos:column="12">=<pos:position pos:line="32" pos:column="13"/></operator> <call><name pos:line="32" pos:column="14">apr_xlate_open<pos:position pos:line="32" pos:column="28"/></name><argument_list pos:line="32" pos:column="28">(<argument><expr><operator pos:line="32" pos:column="29">&amp;<pos:position pos:line="32" pos:column="34"/></operator><name pos:line="32" pos:column="30">from_ascii<pos:position pos:line="32" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="42">APR_DEFAULT_CHARSET<pos:position pos:line="32" pos:column="61"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="32" pos:column="63">"ISO-8859-1"<pos:position pos:line="32" pos:column="75"/></literal></expr></argument>, <argument><expr><name pos:line="32" pos:column="77">cntxt<pos:position pos:line="32" pos:column="82"/></name></expr></argument>)<pos:position pos:line="32" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="84"/></expr_stmt>
    <if pos:line="33" pos:column="5">if <condition pos:line="33" pos:column="8">(<expr><name pos:line="33" pos:column="9">status<pos:position pos:line="33" pos:column="15"/></name></expr>)<pos:position pos:line="33" pos:column="16"/></condition><then pos:line="33" pos:column="16"> <block pos:line="33" pos:column="17">{
        <expr_stmt><expr><call><name pos:line="34" pos:column="9">fprintf<pos:position pos:line="34" pos:column="16"/></name><argument_list pos:line="34" pos:column="16">(<argument><expr><name pos:line="34" pos:column="17">stderr<pos:position pos:line="34" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="34" pos:column="25">"apr_xlate_open(from ASCII)-&gt;%d\n"<pos:position pos:line="34" pos:column="62"/></literal></expr></argument>, <argument><expr><name pos:line="34" pos:column="61">status<pos:position pos:line="34" pos:column="67"/></name></expr></argument>)<pos:position pos:line="34" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="69"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="35" pos:column="9">exit<pos:position pos:line="35" pos:column="13"/></name><argument_list pos:line="35" pos:column="13">(<argument><expr><literal type="number" pos:line="35" pos:column="14">1<pos:position pos:line="35" pos:column="15"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="17"/></expr_stmt>
    }<pos:position pos:line="36" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="37" pos:column="5">status<pos:position pos:line="37" pos:column="11"/></name> <operator pos:line="37" pos:column="12">=<pos:position pos:line="37" pos:column="13"/></operator> <call><name pos:line="37" pos:column="14">apr_base64init_ebcdic<pos:position pos:line="37" pos:column="35"/></name><argument_list pos:line="37" pos:column="35">(<argument><expr><name pos:line="37" pos:column="36">to_ascii<pos:position pos:line="37" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="46">from_ascii<pos:position pos:line="37" pos:column="56"/></name></expr></argument>)<pos:position pos:line="37" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="58"/></expr_stmt>
    <if pos:line="38" pos:column="5">if <condition pos:line="38" pos:column="8">(<expr><name pos:line="38" pos:column="9">status<pos:position pos:line="38" pos:column="15"/></name></expr>)<pos:position pos:line="38" pos:column="16"/></condition><then pos:line="38" pos:column="16"> <block pos:line="38" pos:column="17">{
        <expr_stmt><expr><call><name pos:line="39" pos:column="9">fprintf<pos:position pos:line="39" pos:column="16"/></name><argument_list pos:line="39" pos:column="16">(<argument><expr><name pos:line="39" pos:column="17">stderr<pos:position pos:line="39" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="39" pos:column="25">"apr_base64init_ebcdic()-&gt;%d\n"<pos:position pos:line="39" pos:column="59"/></literal></expr></argument>, <argument><expr><name pos:line="39" pos:column="58">status<pos:position pos:line="39" pos:column="64"/></name></expr></argument>)<pos:position pos:line="39" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="66"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="40" pos:column="9">exit<pos:position pos:line="40" pos:column="13"/></name><argument_list pos:line="40" pos:column="13">(<argument><expr><literal type="number" pos:line="40" pos:column="14">1<pos:position pos:line="40" pos:column="15"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="17"/></expr_stmt>
    }<pos:position pos:line="41" pos:column="6"/></block></then></if>
<cpp:endif pos:line="42" pos:column="1">#<cpp:directive pos:line="42" pos:column="2">endif<pos:position pos:line="42" pos:column="7"/></cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name pos:line="44" pos:column="5">apr_getopt_init<pos:position pos:line="44" pos:column="20"/></name><argument_list pos:line="44" pos:column="20">(<argument><expr><operator pos:line="44" pos:column="21">&amp;<pos:position pos:line="44" pos:column="26"/></operator><name pos:line="44" pos:column="22">opt<pos:position pos:line="44" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="27">cntxt<pos:position pos:line="44" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="34">argc<pos:position pos:line="44" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="40">argv<pos:position pos:line="44" pos:column="44"/></name></expr></argument>)<pos:position pos:line="44" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="46"/></expr_stmt>
    <while pos:line="45" pos:column="5">while <condition pos:line="45" pos:column="11">(<expr><operator pos:line="45" pos:column="12">(<pos:position pos:line="45" pos:column="13"/></operator><name pos:line="45" pos:column="13">status<pos:position pos:line="45" pos:column="19"/></name> <operator pos:line="45" pos:column="20">=<pos:position pos:line="45" pos:column="21"/></operator> <call><name pos:line="45" pos:column="22">apr_getopt<pos:position pos:line="45" pos:column="32"/></name><argument_list pos:line="45" pos:column="32">(<argument><expr><name pos:line="45" pos:column="33">opt<pos:position pos:line="45" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="45" pos:column="38">"n:c:t:b:T:p:u:v:rkVhwix:y:z:C:H:P:A:g:X:de:Sq"<pos:position pos:line="45" pos:column="85"/></literal>
<cpp:ifdef pos:line="46" pos:column="1">#<cpp:directive pos:line="46" pos:column="2">ifdef<pos:position pos:line="46" pos:column="7"/></cpp:directive> <name pos:line="46" pos:column="8">USE_SSL<pos:position pos:line="46" pos:column="15"/></name></cpp:ifdef>
            <literal type="string" pos:line="47" pos:column="13">"Z:f:"<pos:position pos:line="47" pos:column="19"/></literal></expr></argument>
<cpp:endif pos:line="48" pos:column="1">#<cpp:directive pos:line="48" pos:column="2">endif<pos:position pos:line="48" pos:column="7"/></cpp:directive></cpp:endif>
            ,<argument><expr><operator pos:line="49" pos:column="14">&amp;<pos:position pos:line="49" pos:column="19"/></operator><name pos:line="49" pos:column="15">c<pos:position pos:line="49" pos:column="16"/></name></expr></argument>, <argument><expr><operator pos:line="49" pos:column="18">&amp;<pos:position pos:line="49" pos:column="23"/></operator><name pos:line="49" pos:column="19">optarg<pos:position pos:line="49" pos:column="25"/></name></expr></argument>)<pos:position pos:line="49" pos:column="26"/></argument_list></call><operator pos:line="49" pos:column="26">)<pos:position pos:line="49" pos:column="27"/></operator> <operator pos:line="49" pos:column="28">==<pos:position pos:line="49" pos:column="30"/></operator> <name pos:line="49" pos:column="31">APR_SUCCESS<pos:position pos:line="49" pos:column="42"/></name></expr>)<pos:position pos:line="49" pos:column="43"/></condition> <block pos:line="49" pos:column="44">{
        <switch pos:line="50" pos:column="9">switch <condition pos:line="50" pos:column="16">(<expr><name pos:line="50" pos:column="17">c<pos:position pos:line="50" pos:column="18"/></name></expr>)<pos:position pos:line="50" pos:column="19"/></condition> <block pos:line="50" pos:column="20">{
            <case pos:line="51" pos:column="13">case <expr><literal type="char" pos:line="51" pos:column="18">'n'<pos:position pos:line="51" pos:column="21"/></literal></expr>:<pos:position pos:line="51" pos:column="22"/></case>
                <expr_stmt><expr><name pos:line="52" pos:column="17">requests<pos:position pos:line="52" pos:column="25"/></name> <operator pos:line="52" pos:column="26">=<pos:position pos:line="52" pos:column="27"/></operator> <call><name pos:line="52" pos:column="28">atoi<pos:position pos:line="52" pos:column="32"/></name><argument_list pos:line="52" pos:column="32">(<argument><expr><name pos:line="52" pos:column="33">optarg<pos:position pos:line="52" pos:column="39"/></name></expr></argument>)<pos:position pos:line="52" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="41"/></expr_stmt>
                <if pos:line="53" pos:column="17">if <condition pos:line="53" pos:column="20">(<expr><name pos:line="53" pos:column="21">requests<pos:position pos:line="53" pos:column="29"/></name> <operator pos:line="53" pos:column="30">&lt;=<pos:position pos:line="53" pos:column="35"/></operator> <literal type="number" pos:line="53" pos:column="33">0<pos:position pos:line="53" pos:column="34"/></literal></expr>)<pos:position pos:line="53" pos:column="35"/></condition><then pos:line="53" pos:column="35"> <block pos:line="53" pos:column="36">{
                    <expr_stmt><expr><call><name pos:line="54" pos:column="21">err<pos:position pos:line="54" pos:column="24"/></name><argument_list pos:line="54" pos:column="24">(<argument><expr><literal type="string" pos:line="54" pos:column="25">"Invalid number of requests\n"<pos:position pos:line="54" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="54" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="57"/></expr_stmt>
                }<pos:position pos:line="55" pos:column="18"/></block></then></if>
                <break pos:line="56" pos:column="17">break;<pos:position pos:line="56" pos:column="23"/></break>
            <case pos:line="57" pos:column="13">case <expr><literal type="char" pos:line="57" pos:column="18">'k'<pos:position pos:line="57" pos:column="21"/></literal></expr>:<pos:position pos:line="57" pos:column="22"/></case>
                <expr_stmt><expr><name pos:line="58" pos:column="17">keepalive<pos:position pos:line="58" pos:column="26"/></name> <operator pos:line="58" pos:column="27">=<pos:position pos:line="58" pos:column="28"/></operator> <literal type="number" pos:line="58" pos:column="29">1<pos:position pos:line="58" pos:column="30"/></literal></expr>;<pos:position pos:line="58" pos:column="31"/></expr_stmt>
                <break pos:line="59" pos:column="17">break;<pos:position pos:line="59" pos:column="23"/></break>
            <case pos:line="60" pos:column="13">case <expr><literal type="char" pos:line="60" pos:column="18">'q'<pos:position pos:line="60" pos:column="21"/></literal></expr>:<pos:position pos:line="60" pos:column="22"/></case>
                <expr_stmt><expr><name pos:line="61" pos:column="17">heartbeatres<pos:position pos:line="61" pos:column="29"/></name> <operator pos:line="61" pos:column="30">=<pos:position pos:line="61" pos:column="31"/></operator> <literal type="number" pos:line="61" pos:column="32">0<pos:position pos:line="61" pos:column="33"/></literal></expr>;<pos:position pos:line="61" pos:column="34"/></expr_stmt>
                <break pos:line="62" pos:column="17">break;<pos:position pos:line="62" pos:column="23"/></break>
            <case pos:line="63" pos:column="13">case <expr><literal type="char" pos:line="63" pos:column="18">'c'<pos:position pos:line="63" pos:column="21"/></literal></expr>:<pos:position pos:line="63" pos:column="22"/></case>
                <expr_stmt><expr><name pos:line="64" pos:column="17">concurrency<pos:position pos:line="64" pos:column="28"/></name> <operator pos:line="64" pos:column="29">=<pos:position pos:line="64" pos:column="30"/></operator> <call><name pos:line="64" pos:column="31">atoi<pos:position pos:line="64" pos:column="35"/></name><argument_list pos:line="64" pos:column="35">(<argument><expr><name pos:line="64" pos:column="36">optarg<pos:position pos:line="64" pos:column="42"/></name></expr></argument>)<pos:position pos:line="64" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="44"/></expr_stmt>
                <break pos:line="65" pos:column="17">break;<pos:position pos:line="65" pos:column="23"/></break>
            <case pos:line="66" pos:column="13">case <expr><literal type="char" pos:line="66" pos:column="18">'b'<pos:position pos:line="66" pos:column="21"/></literal></expr>:<pos:position pos:line="66" pos:column="22"/></case>
                <expr_stmt><expr><name pos:line="67" pos:column="17">windowsize<pos:position pos:line="67" pos:column="27"/></name> <operator pos:line="67" pos:column="28">=<pos:position pos:line="67" pos:column="29"/></operator> <call><name pos:line="67" pos:column="30">atoi<pos:position pos:line="67" pos:column="34"/></name><argument_list pos:line="67" pos:column="34">(<argument><expr><name pos:line="67" pos:column="35">optarg<pos:position pos:line="67" pos:column="41"/></name></expr></argument>)<pos:position pos:line="67" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="43"/></expr_stmt>
                <break pos:line="68" pos:column="17">break;<pos:position pos:line="68" pos:column="23"/></break>
            <case pos:line="69" pos:column="13">case <expr><literal type="char" pos:line="69" pos:column="18">'i'<pos:position pos:line="69" pos:column="21"/></literal></expr>:<pos:position pos:line="69" pos:column="22"/></case>
                <if pos:line="70" pos:column="17">if <condition pos:line="70" pos:column="20">(<expr><name pos:line="70" pos:column="21">posting<pos:position pos:line="70" pos:column="28"/></name> <operator pos:line="70" pos:column="29">&gt;<pos:position pos:line="70" pos:column="33"/></operator> <literal type="number" pos:line="70" pos:column="31">0<pos:position pos:line="70" pos:column="32"/></literal></expr>)<pos:position pos:line="70" pos:column="33"/></condition><then pos:line="70" pos:column="33">
                <block type="pseudo"><expr_stmt><expr><call><name pos:line="71" pos:column="17">err<pos:position pos:line="71" pos:column="20"/></name><argument_list pos:line="71" pos:column="20">(<argument><expr><literal type="string" pos:line="71" pos:column="21">"Cannot mix POST/PUT and HEAD\n"<pos:position pos:line="71" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="71" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="55"/></expr_stmt></block></then></if>
                <expr_stmt><expr><name pos:line="72" pos:column="17">posting<pos:position pos:line="72" pos:column="24"/></name> <operator pos:line="72" pos:column="25">=<pos:position pos:line="72" pos:column="26"/></operator> <operator pos:line="72" pos:column="27">-<pos:position pos:line="72" pos:column="28"/></operator><literal type="number" pos:line="72" pos:column="28">1<pos:position pos:line="72" pos:column="29"/></literal></expr>;<pos:position pos:line="72" pos:column="30"/></expr_stmt>
                <break pos:line="73" pos:column="17">break;<pos:position pos:line="73" pos:column="23"/></break>
            <case pos:line="74" pos:column="13">case <expr><literal type="char" pos:line="74" pos:column="18">'g'<pos:position pos:line="74" pos:column="21"/></literal></expr>:<pos:position pos:line="74" pos:column="22"/></case>
                <expr_stmt><expr><name pos:line="75" pos:column="17">gnuplot<pos:position pos:line="75" pos:column="24"/></name> <operator pos:line="75" pos:column="25">=<pos:position pos:line="75" pos:column="26"/></operator> <call><name pos:line="75" pos:column="27">strdup<pos:position pos:line="75" pos:column="33"/></name><argument_list pos:line="75" pos:column="33">(<argument><expr><name pos:line="75" pos:column="34">optarg<pos:position pos:line="75" pos:column="40"/></name></expr></argument>)<pos:position pos:line="75" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="42"/></expr_stmt>
                <break pos:line="76" pos:column="17">break;<pos:position pos:line="76" pos:column="23"/></break>
            <case pos:line="77" pos:column="13">case <expr><literal type="char" pos:line="77" pos:column="18">'d'<pos:position pos:line="77" pos:column="21"/></literal></expr>:<pos:position pos:line="77" pos:column="22"/></case>
                <expr_stmt><expr><name pos:line="78" pos:column="17">percentile<pos:position pos:line="78" pos:column="27"/></name> <operator pos:line="78" pos:column="28">=<pos:position pos:line="78" pos:column="29"/></operator> <literal type="number" pos:line="78" pos:column="30">0<pos:position pos:line="78" pos:column="31"/></literal></expr>;<pos:position pos:line="78" pos:column="32"/></expr_stmt>
                <break pos:line="79" pos:column="17">break;<pos:position pos:line="79" pos:column="23"/></break>
            <case pos:line="80" pos:column="13">case <expr><literal type="char" pos:line="80" pos:column="18">'e'<pos:position pos:line="80" pos:column="21"/></literal></expr>:<pos:position pos:line="80" pos:column="22"/></case>
                <expr_stmt><expr><name pos:line="81" pos:column="17">csvperc<pos:position pos:line="81" pos:column="24"/></name> <operator pos:line="81" pos:column="25">=<pos:position pos:line="81" pos:column="26"/></operator> <call><name pos:line="81" pos:column="27">strdup<pos:position pos:line="81" pos:column="33"/></name><argument_list pos:line="81" pos:column="33">(<argument><expr><name pos:line="81" pos:column="34">optarg<pos:position pos:line="81" pos:column="40"/></name></expr></argument>)<pos:position pos:line="81" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="42"/></expr_stmt>
                <break pos:line="82" pos:column="17">break;<pos:position pos:line="82" pos:column="23"/></break>
            <case pos:line="83" pos:column="13">case <expr><literal type="char" pos:line="83" pos:column="18">'S'<pos:position pos:line="83" pos:column="21"/></literal></expr>:<pos:position pos:line="83" pos:column="22"/></case>
                <expr_stmt><expr><name pos:line="84" pos:column="17">confidence<pos:position pos:line="84" pos:column="27"/></name> <operator pos:line="84" pos:column="28">=<pos:position pos:line="84" pos:column="29"/></operator> <literal type="number" pos:line="84" pos:column="30">0<pos:position pos:line="84" pos:column="31"/></literal></expr>;<pos:position pos:line="84" pos:column="32"/></expr_stmt>
                <break pos:line="85" pos:column="17">break;<pos:position pos:line="85" pos:column="23"/></break>
            <case pos:line="86" pos:column="13">case <expr><literal type="char" pos:line="86" pos:column="18">'p'<pos:position pos:line="86" pos:column="21"/></literal></expr>:<pos:position pos:line="86" pos:column="22"/></case>
                <if pos:line="87" pos:column="17">if <condition pos:line="87" pos:column="20">(<expr><name pos:line="87" pos:column="21">posting<pos:position pos:line="87" pos:column="28"/></name> <operator pos:line="87" pos:column="29">!=<pos:position pos:line="87" pos:column="31"/></operator> <literal type="number" pos:line="87" pos:column="32">0<pos:position pos:line="87" pos:column="33"/></literal></expr>)<pos:position pos:line="87" pos:column="34"/></condition><then pos:line="87" pos:column="34">
                    <block type="pseudo"><expr_stmt><expr><call><name pos:line="88" pos:column="21">err<pos:position pos:line="88" pos:column="24"/></name><argument_list pos:line="88" pos:column="24">(<argument><expr><literal type="string" pos:line="88" pos:column="25">"Cannot mix POST and HEAD\n"<pos:position pos:line="88" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="88" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="55"/></expr_stmt></block></then></if>
                <if pos:line="89" pos:column="17">if <condition pos:line="89" pos:column="20">(<expr><literal type="number" pos:line="89" pos:column="21">0<pos:position pos:line="89" pos:column="22"/></literal> <operator pos:line="89" pos:column="23">==<pos:position pos:line="89" pos:column="25"/></operator> <operator pos:line="89" pos:column="26">(<pos:position pos:line="89" pos:column="27"/></operator><name pos:line="89" pos:column="27">r<pos:position pos:line="89" pos:column="28"/></name> <operator pos:line="89" pos:column="29">=<pos:position pos:line="89" pos:column="30"/></operator> <call><name pos:line="89" pos:column="31">open_postfile<pos:position pos:line="89" pos:column="44"/></name><argument_list pos:line="89" pos:column="44">(<argument><expr><name pos:line="89" pos:column="45">optarg<pos:position pos:line="89" pos:column="51"/></name></expr></argument>)<pos:position pos:line="89" pos:column="52"/></argument_list></call><operator pos:line="89" pos:column="52">)<pos:position pos:line="89" pos:column="53"/></operator></expr>)<pos:position pos:line="89" pos:column="54"/></condition><then pos:line="89" pos:column="54"> <block pos:line="89" pos:column="55">{
                    <expr_stmt><expr><name pos:line="90" pos:column="21">posting<pos:position pos:line="90" pos:column="28"/></name> <operator pos:line="90" pos:column="29">=<pos:position pos:line="90" pos:column="30"/></operator> <literal type="number" pos:line="90" pos:column="31">1<pos:position pos:line="90" pos:column="32"/></literal></expr>;<pos:position pos:line="90" pos:column="33"/></expr_stmt>
                }<pos:position pos:line="91" pos:column="18"/></block></then>
                <elseif pos:line="92" pos:column="17">else <if pos:line="92" pos:column="22">if <condition pos:line="92" pos:column="25">(<expr><name pos:line="92" pos:column="26">postdata<pos:position pos:line="92" pos:column="34"/></name></expr>)<pos:position pos:line="92" pos:column="35"/></condition><then pos:line="92" pos:column="35"> <block pos:line="92" pos:column="36">{
                    <expr_stmt><expr><call><name pos:line="93" pos:column="21">exit<pos:position pos:line="93" pos:column="25"/></name><argument_list pos:line="93" pos:column="25">(<argument><expr><name pos:line="93" pos:column="26">r<pos:position pos:line="93" pos:column="27"/></name></expr></argument>)<pos:position pos:line="93" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="29"/></expr_stmt>
                }<pos:position pos:line="94" pos:column="18"/></block></then></if></elseif></if>
                <break pos:line="95" pos:column="17">break;<pos:position pos:line="95" pos:column="23"/></break>
            <case pos:line="96" pos:column="13">case <expr><literal type="char" pos:line="96" pos:column="18">'u'<pos:position pos:line="96" pos:column="21"/></literal></expr>:<pos:position pos:line="96" pos:column="22"/></case>
                <if pos:line="97" pos:column="17">if <condition pos:line="97" pos:column="20">(<expr><name pos:line="97" pos:column="21">posting<pos:position pos:line="97" pos:column="28"/></name> <operator pos:line="97" pos:column="29">!=<pos:position pos:line="97" pos:column="31"/></operator> <literal type="number" pos:line="97" pos:column="32">0<pos:position pos:line="97" pos:column="33"/></literal></expr>)<pos:position pos:line="97" pos:column="34"/></condition><then pos:line="97" pos:column="34">
                    <block type="pseudo"><expr_stmt><expr><call><name pos:line="98" pos:column="21">err<pos:position pos:line="98" pos:column="24"/></name><argument_list pos:line="98" pos:column="24">(<argument><expr><literal type="string" pos:line="98" pos:column="25">"Cannot mix PUT and HEAD\n"<pos:position pos:line="98" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="98" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="54"/></expr_stmt></block></then></if>
                <if pos:line="99" pos:column="17">if <condition pos:line="99" pos:column="20">(<expr><literal type="number" pos:line="99" pos:column="21">0<pos:position pos:line="99" pos:column="22"/></literal> <operator pos:line="99" pos:column="23">==<pos:position pos:line="99" pos:column="25"/></operator> <operator pos:line="99" pos:column="26">(<pos:position pos:line="99" pos:column="27"/></operator><name pos:line="99" pos:column="27">r<pos:position pos:line="99" pos:column="28"/></name> <operator pos:line="99" pos:column="29">=<pos:position pos:line="99" pos:column="30"/></operator> <call><name pos:line="99" pos:column="31">open_postfile<pos:position pos:line="99" pos:column="44"/></name><argument_list pos:line="99" pos:column="44">(<argument><expr><name pos:line="99" pos:column="45">optarg<pos:position pos:line="99" pos:column="51"/></name></expr></argument>)<pos:position pos:line="99" pos:column="52"/></argument_list></call><operator pos:line="99" pos:column="52">)<pos:position pos:line="99" pos:column="53"/></operator></expr>)<pos:position pos:line="99" pos:column="54"/></condition><then pos:line="99" pos:column="54"> <block pos:line="99" pos:column="55">{
                    <expr_stmt><expr><name pos:line="100" pos:column="21">posting<pos:position pos:line="100" pos:column="28"/></name> <operator pos:line="100" pos:column="29">=<pos:position pos:line="100" pos:column="30"/></operator> <literal type="number" pos:line="100" pos:column="31">2<pos:position pos:line="100" pos:column="32"/></literal></expr>;<pos:position pos:line="100" pos:column="33"/></expr_stmt>
                }<pos:position pos:line="101" pos:column="18"/></block></then>
                <elseif pos:line="102" pos:column="17">else <if pos:line="102" pos:column="22">if <condition pos:line="102" pos:column="25">(<expr><name pos:line="102" pos:column="26">postdata<pos:position pos:line="102" pos:column="34"/></name></expr>)<pos:position pos:line="102" pos:column="35"/></condition><then pos:line="102" pos:column="35"> <block pos:line="102" pos:column="36">{
                    <expr_stmt><expr><call><name pos:line="103" pos:column="21">exit<pos:position pos:line="103" pos:column="25"/></name><argument_list pos:line="103" pos:column="25">(<argument><expr><name pos:line="103" pos:column="26">r<pos:position pos:line="103" pos:column="27"/></name></expr></argument>)<pos:position pos:line="103" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="103" pos:column="29"/></expr_stmt>
                }<pos:position pos:line="104" pos:column="18"/></block></then></if></elseif></if>
                <break pos:line="105" pos:column="17">break;<pos:position pos:line="105" pos:column="23"/></break>
            <case pos:line="106" pos:column="13">case <expr><literal type="char" pos:line="106" pos:column="18">'r'<pos:position pos:line="106" pos:column="21"/></literal></expr>:<pos:position pos:line="106" pos:column="22"/></case>
                <expr_stmt><expr><name pos:line="107" pos:column="17">recverrok<pos:position pos:line="107" pos:column="26"/></name> <operator pos:line="107" pos:column="27">=<pos:position pos:line="107" pos:column="28"/></operator> <literal type="number" pos:line="107" pos:column="29">1<pos:position pos:line="107" pos:column="30"/></literal></expr>;<pos:position pos:line="107" pos:column="31"/></expr_stmt>
                <break pos:line="108" pos:column="17">break;<pos:position pos:line="108" pos:column="23"/></break>
            <case pos:line="109" pos:column="13">case <expr><literal type="char" pos:line="109" pos:column="18">'v'<pos:position pos:line="109" pos:column="21"/></literal></expr>:<pos:position pos:line="109" pos:column="22"/></case>
                <expr_stmt><expr><name pos:line="110" pos:column="17">verbosity<pos:position pos:line="110" pos:column="26"/></name> <operator pos:line="110" pos:column="27">=<pos:position pos:line="110" pos:column="28"/></operator> <call><name pos:line="110" pos:column="29">atoi<pos:position pos:line="110" pos:column="33"/></name><argument_list pos:line="110" pos:column="33">(<argument><expr><name pos:line="110" pos:column="34">optarg<pos:position pos:line="110" pos:column="40"/></name></expr></argument>)<pos:position pos:line="110" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="110" pos:column="42"/></expr_stmt>
                <break pos:line="111" pos:column="17">break;<pos:position pos:line="111" pos:column="23"/></break>
            <case pos:line="112" pos:column="13">case <expr><literal type="char" pos:line="112" pos:column="18">'t'<pos:position pos:line="112" pos:column="21"/></literal></expr>:<pos:position pos:line="112" pos:column="22"/></case>
                <expr_stmt><expr><name pos:line="113" pos:column="17">tlimit<pos:position pos:line="113" pos:column="23"/></name> <operator pos:line="113" pos:column="24">=<pos:position pos:line="113" pos:column="25"/></operator> <call><name pos:line="113" pos:column="26">atoi<pos:position pos:line="113" pos:column="30"/></name><argument_list pos:line="113" pos:column="30">(<argument><expr><name pos:line="113" pos:column="31">optarg<pos:position pos:line="113" pos:column="37"/></name></expr></argument>)<pos:position pos:line="113" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="113" pos:column="39"/></expr_stmt>
                <expr_stmt><expr><name pos:line="114" pos:column="17">requests<pos:position pos:line="114" pos:column="25"/></name> <operator pos:line="114" pos:column="26">=<pos:position pos:line="114" pos:column="27"/></operator> <name pos:line="114" pos:column="28">MAX_REQUESTS<pos:position pos:line="114" pos:column="40"/></name></expr>;<pos:position pos:line="114" pos:column="41"/></expr_stmt>    <comment type="block" pos:line="114" pos:column="45">/* need to size data array on
                                             * something */</comment>
                <break pos:line="116" pos:column="17">break;<pos:position pos:line="116" pos:column="23"/></break>
            <case pos:line="117" pos:column="13">case <expr><literal type="char" pos:line="117" pos:column="18">'T'<pos:position pos:line="117" pos:column="21"/></literal></expr>:<pos:position pos:line="117" pos:column="22"/></case>
                <expr_stmt><expr><call><name pos:line="118" pos:column="17">strcpy<pos:position pos:line="118" pos:column="23"/></name><argument_list pos:line="118" pos:column="23">(<argument><expr><name pos:line="118" pos:column="24">content_type<pos:position pos:line="118" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="118" pos:column="38">optarg<pos:position pos:line="118" pos:column="44"/></name></expr></argument>)<pos:position pos:line="118" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="118" pos:column="46"/></expr_stmt>
                <break pos:line="119" pos:column="17">break;<pos:position pos:line="119" pos:column="23"/></break>
            <case pos:line="120" pos:column="13">case <expr><literal type="char" pos:line="120" pos:column="18">'C'<pos:position pos:line="120" pos:column="21"/></literal></expr>:<pos:position pos:line="120" pos:column="22"/></case>
                <expr_stmt><expr><name pos:line="121" pos:column="17">cookie<pos:position pos:line="121" pos:column="23"/></name> <operator pos:line="121" pos:column="24">=<pos:position pos:line="121" pos:column="25"/></operator> <call><name pos:line="121" pos:column="26">apr_pstrcat<pos:position pos:line="121" pos:column="37"/></name><argument_list pos:line="121" pos:column="37">(<argument><expr><name pos:line="121" pos:column="38">cntxt<pos:position pos:line="121" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="121" pos:column="45">"Cookie: "<pos:position pos:line="121" pos:column="55"/></literal></expr></argument>, <argument><expr><name pos:line="121" pos:column="57">optarg<pos:position pos:line="121" pos:column="63"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="121" pos:column="65">"\r\n"<pos:position pos:line="121" pos:column="71"/></literal></expr></argument>, <argument><expr><name pos:line="121" pos:column="73">NULL<pos:position pos:line="121" pos:column="77"/></name></expr></argument>)<pos:position pos:line="121" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="121" pos:column="79"/></expr_stmt>
                <break pos:line="122" pos:column="17">break;<pos:position pos:line="122" pos:column="23"/></break>
            <case pos:line="123" pos:column="13">case <expr><literal type="char" pos:line="123" pos:column="18">'A'<pos:position pos:line="123" pos:column="21"/></literal></expr>:<pos:position pos:line="123" pos:column="22"/></case>
                <comment type="block" pos:line="124" pos:column="17">/*
                 * assume username passwd already to be in colon separated form.
                 * Ready to be uu-encoded.
                 */</comment>
                <while pos:line="128" pos:column="17">while <condition pos:line="128" pos:column="23">(<expr><call><name pos:line="128" pos:column="24">apr_isspace<pos:position pos:line="128" pos:column="35"/></name><argument_list pos:line="128" pos:column="35">(<argument><expr><operator pos:line="128" pos:column="36">*<pos:position pos:line="128" pos:column="37"/></operator><name pos:line="128" pos:column="37">optarg<pos:position pos:line="128" pos:column="43"/></name></expr></argument>)<pos:position pos:line="128" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="128" pos:column="45"/></condition>
                    <block type="pseudo"><expr_stmt><expr><name pos:line="129" pos:column="21">optarg<pos:position pos:line="129" pos:column="27"/></name><operator pos:line="129" pos:column="27">++<pos:position pos:line="129" pos:column="29"/></operator></expr>;<pos:position pos:line="129" pos:column="30"/></expr_stmt></block></while>
                <if pos:line="130" pos:column="17">if <condition pos:line="130" pos:column="20">(<expr><call><name pos:line="130" pos:column="21">apr_base64_encode_len<pos:position pos:line="130" pos:column="42"/></name><argument_list pos:line="130" pos:column="42">(<argument><expr><call><name pos:line="130" pos:column="43">strlen<pos:position pos:line="130" pos:column="49"/></name><argument_list pos:line="130" pos:column="49">(<argument><expr><name pos:line="130" pos:column="50">optarg<pos:position pos:line="130" pos:column="56"/></name></expr></argument>)<pos:position pos:line="130" pos:column="57"/></argument_list></call></expr></argument>)<pos:position pos:line="130" pos:column="58"/></argument_list></call> <operator pos:line="130" pos:column="59">&gt;<pos:position pos:line="130" pos:column="63"/></operator> <sizeof pos:line="130" pos:column="61">sizeof<argument_list pos:line="130" pos:column="67">(<argument><expr><name pos:line="130" pos:column="68">tmp<pos:position pos:line="130" pos:column="71"/></name></expr></argument>)<pos:position pos:line="130" pos:column="72"/></argument_list></sizeof></expr>)<pos:position pos:line="130" pos:column="73"/></condition><then pos:line="130" pos:column="73"> <block pos:line="130" pos:column="74">{
                    <expr_stmt><expr><call><name pos:line="131" pos:column="21">err<pos:position pos:line="131" pos:column="24"/></name><argument_list pos:line="131" pos:column="24">(<argument><expr><literal type="string" pos:line="131" pos:column="25">"Authentication credentials too long\n"<pos:position pos:line="131" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="131" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="131" pos:column="66"/></expr_stmt>
                }<pos:position pos:line="132" pos:column="18"/></block></then></if>
                <expr_stmt><expr><name pos:line="133" pos:column="17">l<pos:position pos:line="133" pos:column="18"/></name> <operator pos:line="133" pos:column="19">=<pos:position pos:line="133" pos:column="20"/></operator> <call><name pos:line="133" pos:column="21">apr_base64_encode<pos:position pos:line="133" pos:column="38"/></name><argument_list pos:line="133" pos:column="38">(<argument><expr><name pos:line="133" pos:column="39">tmp<pos:position pos:line="133" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="133" pos:column="44">optarg<pos:position pos:line="133" pos:column="50"/></name></expr></argument>, <argument><expr><call><name pos:line="133" pos:column="52">strlen<pos:position pos:line="133" pos:column="58"/></name><argument_list pos:line="133" pos:column="58">(<argument><expr><name pos:line="133" pos:column="59">optarg<pos:position pos:line="133" pos:column="65"/></name></expr></argument>)<pos:position pos:line="133" pos:column="66"/></argument_list></call></expr></argument>)<pos:position pos:line="133" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="133" pos:column="68"/></expr_stmt>
                <expr_stmt><expr><name><name pos:line="134" pos:column="17">tmp<pos:position pos:line="134" pos:column="20"/></name><index pos:line="134" pos:column="20">[<expr><name pos:line="134" pos:column="21">l<pos:position pos:line="134" pos:column="22"/></name></expr>]<pos:position pos:line="134" pos:column="23"/></index></name> <operator pos:line="134" pos:column="24">=<pos:position pos:line="134" pos:column="25"/></operator> <literal type="char" pos:line="134" pos:column="26">'\0'<pos:position pos:line="134" pos:column="30"/></literal></expr>;<pos:position pos:line="134" pos:column="31"/></expr_stmt>

                <expr_stmt><expr><name pos:line="136" pos:column="17">auth<pos:position pos:line="136" pos:column="21"/></name> <operator pos:line="136" pos:column="22">=<pos:position pos:line="136" pos:column="23"/></operator> <call><name pos:line="136" pos:column="24">apr_pstrcat<pos:position pos:line="136" pos:column="35"/></name><argument_list pos:line="136" pos:column="35">(<argument><expr><name pos:line="136" pos:column="36">cntxt<pos:position pos:line="136" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="136" pos:column="43">auth<pos:position pos:line="136" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="136" pos:column="49">"Authorization: Basic "<pos:position pos:line="136" pos:column="72"/></literal></expr></argument>, <argument><expr><name pos:line="136" pos:column="74">tmp<pos:position pos:line="136" pos:column="77"/></name></expr></argument>,
                                       <argument><expr><literal type="string" pos:line="137" pos:column="40">"\r\n"<pos:position pos:line="137" pos:column="46"/></literal></expr></argument>, <argument><expr><name pos:line="137" pos:column="48">NULL<pos:position pos:line="137" pos:column="52"/></name></expr></argument>)<pos:position pos:line="137" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="137" pos:column="54"/></expr_stmt>
                <break pos:line="138" pos:column="17">break;<pos:position pos:line="138" pos:column="23"/></break>
            <case pos:line="139" pos:column="13">case <expr><literal type="char" pos:line="139" pos:column="18">'P'<pos:position pos:line="139" pos:column="21"/></literal></expr>:<pos:position pos:line="139" pos:column="22"/></case>
                <comment type="block" pos:line="140" pos:column="17">/*
                 * assume username passwd already to be in colon separated form.
                 */</comment>
                <while pos:line="143" pos:column="17">while <condition pos:line="143" pos:column="23">(<expr><call><name pos:line="143" pos:column="24">apr_isspace<pos:position pos:line="143" pos:column="35"/></name><argument_list pos:line="143" pos:column="35">(<argument><expr><operator pos:line="143" pos:column="36">*<pos:position pos:line="143" pos:column="37"/></operator><name pos:line="143" pos:column="37">optarg<pos:position pos:line="143" pos:column="43"/></name></expr></argument>)<pos:position pos:line="143" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="143" pos:column="45"/></condition>
                <block type="pseudo"><expr_stmt><expr><name pos:line="144" pos:column="17">optarg<pos:position pos:line="144" pos:column="23"/></name><operator pos:line="144" pos:column="23">++<pos:position pos:line="144" pos:column="25"/></operator></expr>;<pos:position pos:line="144" pos:column="26"/></expr_stmt></block></while>
                <if pos:line="145" pos:column="17">if <condition pos:line="145" pos:column="20">(<expr><call><name pos:line="145" pos:column="21">apr_base64_encode_len<pos:position pos:line="145" pos:column="42"/></name><argument_list pos:line="145" pos:column="42">(<argument><expr><call><name pos:line="145" pos:column="43">strlen<pos:position pos:line="145" pos:column="49"/></name><argument_list pos:line="145" pos:column="49">(<argument><expr><name pos:line="145" pos:column="50">optarg<pos:position pos:line="145" pos:column="56"/></name></expr></argument>)<pos:position pos:line="145" pos:column="57"/></argument_list></call></expr></argument>)<pos:position pos:line="145" pos:column="58"/></argument_list></call> <operator pos:line="145" pos:column="59">&gt;<pos:position pos:line="145" pos:column="63"/></operator> <sizeof pos:line="145" pos:column="61">sizeof<argument_list pos:line="145" pos:column="67">(<argument><expr><name pos:line="145" pos:column="68">tmp<pos:position pos:line="145" pos:column="71"/></name></expr></argument>)<pos:position pos:line="145" pos:column="72"/></argument_list></sizeof></expr>)<pos:position pos:line="145" pos:column="73"/></condition><then pos:line="145" pos:column="73"> <block pos:line="145" pos:column="74">{
                    <expr_stmt><expr><call><name pos:line="146" pos:column="21">err<pos:position pos:line="146" pos:column="24"/></name><argument_list pos:line="146" pos:column="24">(<argument><expr><literal type="string" pos:line="146" pos:column="25">"Proxy credentials too long\n"<pos:position pos:line="146" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="146" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="146" pos:column="57"/></expr_stmt>
                }<pos:position pos:line="147" pos:column="18"/></block></then></if>
                <expr_stmt><expr><name pos:line="148" pos:column="17">l<pos:position pos:line="148" pos:column="18"/></name> <operator pos:line="148" pos:column="19">=<pos:position pos:line="148" pos:column="20"/></operator> <call><name pos:line="148" pos:column="21">apr_base64_encode<pos:position pos:line="148" pos:column="38"/></name><argument_list pos:line="148" pos:column="38">(<argument><expr><name pos:line="148" pos:column="39">tmp<pos:position pos:line="148" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="148" pos:column="44">optarg<pos:position pos:line="148" pos:column="50"/></name></expr></argument>, <argument><expr><call><name pos:line="148" pos:column="52">strlen<pos:position pos:line="148" pos:column="58"/></name><argument_list pos:line="148" pos:column="58">(<argument><expr><name pos:line="148" pos:column="59">optarg<pos:position pos:line="148" pos:column="65"/></name></expr></argument>)<pos:position pos:line="148" pos:column="66"/></argument_list></call></expr></argument>)<pos:position pos:line="148" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="148" pos:column="68"/></expr_stmt>
                <expr_stmt><expr><name><name pos:line="149" pos:column="17">tmp<pos:position pos:line="149" pos:column="20"/></name><index pos:line="149" pos:column="20">[<expr><name pos:line="149" pos:column="21">l<pos:position pos:line="149" pos:column="22"/></name></expr>]<pos:position pos:line="149" pos:column="23"/></index></name> <operator pos:line="149" pos:column="24">=<pos:position pos:line="149" pos:column="25"/></operator> <literal type="char" pos:line="149" pos:column="26">'\0'<pos:position pos:line="149" pos:column="30"/></literal></expr>;<pos:position pos:line="149" pos:column="31"/></expr_stmt>

                <expr_stmt><expr><name pos:line="151" pos:column="17">auth<pos:position pos:line="151" pos:column="21"/></name> <operator pos:line="151" pos:column="22">=<pos:position pos:line="151" pos:column="23"/></operator> <call><name pos:line="151" pos:column="24">apr_pstrcat<pos:position pos:line="151" pos:column="35"/></name><argument_list pos:line="151" pos:column="35">(<argument><expr><name pos:line="151" pos:column="36">cntxt<pos:position pos:line="151" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="151" pos:column="43">auth<pos:position pos:line="151" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="151" pos:column="49">"Proxy-Authorization: Basic "<pos:position pos:line="151" pos:column="78"/></literal></expr></argument>,
                                       <argument><expr><name pos:line="152" pos:column="40">tmp<pos:position pos:line="152" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="152" pos:column="45">"\r\n"<pos:position pos:line="152" pos:column="51"/></literal></expr></argument>, <argument><expr><name pos:line="152" pos:column="53">NULL<pos:position pos:line="152" pos:column="57"/></name></expr></argument>)<pos:position pos:line="152" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="152" pos:column="59"/></expr_stmt>
                <break pos:line="153" pos:column="17">break;<pos:position pos:line="153" pos:column="23"/></break>
            <case pos:line="154" pos:column="13">case <expr><literal type="char" pos:line="154" pos:column="18">'H'<pos:position pos:line="154" pos:column="21"/></literal></expr>:<pos:position pos:line="154" pos:column="22"/></case>
                <expr_stmt><expr><name pos:line="155" pos:column="17">hdrs<pos:position pos:line="155" pos:column="21"/></name> <operator pos:line="155" pos:column="22">=<pos:position pos:line="155" pos:column="23"/></operator> <call><name pos:line="155" pos:column="24">apr_pstrcat<pos:position pos:line="155" pos:column="35"/></name><argument_list pos:line="155" pos:column="35">(<argument><expr><name pos:line="155" pos:column="36">cntxt<pos:position pos:line="155" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="155" pos:column="43">hdrs<pos:position pos:line="155" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="155" pos:column="49">optarg<pos:position pos:line="155" pos:column="55"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="155" pos:column="57">"\r\n"<pos:position pos:line="155" pos:column="63"/></literal></expr></argument>, <argument><expr><name pos:line="155" pos:column="65">NULL<pos:position pos:line="155" pos:column="69"/></name></expr></argument>)<pos:position pos:line="155" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="155" pos:column="71"/></expr_stmt>
                <comment type="block" pos:line="156" pos:column="17">/*
                 * allow override of some of the common headers that ab adds
                 */</comment>
                <if pos:line="159" pos:column="17">if <condition pos:line="159" pos:column="20">(<expr><call><name pos:line="159" pos:column="21">strncasecmp<pos:position pos:line="159" pos:column="32"/></name><argument_list pos:line="159" pos:column="32">(<argument><expr><name pos:line="159" pos:column="33">optarg<pos:position pos:line="159" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="159" pos:column="41">"Host:"<pos:position pos:line="159" pos:column="48"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="159" pos:column="50">5<pos:position pos:line="159" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="159" pos:column="52"/></argument_list></call> <operator pos:line="159" pos:column="53">==<pos:position pos:line="159" pos:column="55"/></operator> <literal type="number" pos:line="159" pos:column="56">0<pos:position pos:line="159" pos:column="57"/></literal></expr>)<pos:position pos:line="159" pos:column="58"/></condition><then pos:line="159" pos:column="58"> <block pos:line="159" pos:column="59">{
                    <expr_stmt><expr><name pos:line="160" pos:column="21">opt_host<pos:position pos:line="160" pos:column="29"/></name> <operator pos:line="160" pos:column="30">=<pos:position pos:line="160" pos:column="31"/></operator> <literal type="number" pos:line="160" pos:column="32">1<pos:position pos:line="160" pos:column="33"/></literal></expr>;<pos:position pos:line="160" pos:column="34"/></expr_stmt>
                }<pos:position pos:line="161" pos:column="18"/></block></then> <elseif pos:line="161" pos:column="19">else <if pos:line="161" pos:column="24">if <condition pos:line="161" pos:column="27">(<expr><call><name pos:line="161" pos:column="28">strncasecmp<pos:position pos:line="161" pos:column="39"/></name><argument_list pos:line="161" pos:column="39">(<argument><expr><name pos:line="161" pos:column="40">optarg<pos:position pos:line="161" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="161" pos:column="48">"Accept:"<pos:position pos:line="161" pos:column="57"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="161" pos:column="59">7<pos:position pos:line="161" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="161" pos:column="61"/></argument_list></call> <operator pos:line="161" pos:column="62">==<pos:position pos:line="161" pos:column="64"/></operator> <literal type="number" pos:line="161" pos:column="65">0<pos:position pos:line="161" pos:column="66"/></literal></expr>)<pos:position pos:line="161" pos:column="67"/></condition><then pos:line="161" pos:column="67"> <block pos:line="161" pos:column="68">{
                    <expr_stmt><expr><name pos:line="162" pos:column="21">opt_accept<pos:position pos:line="162" pos:column="31"/></name> <operator pos:line="162" pos:column="32">=<pos:position pos:line="162" pos:column="33"/></operator> <literal type="number" pos:line="162" pos:column="34">1<pos:position pos:line="162" pos:column="35"/></literal></expr>;<pos:position pos:line="162" pos:column="36"/></expr_stmt>
                }<pos:position pos:line="163" pos:column="18"/></block></then></if></elseif> <elseif pos:line="163" pos:column="19">else <if pos:line="163" pos:column="24">if <condition pos:line="163" pos:column="27">(<expr><call><name pos:line="163" pos:column="28">strncasecmp<pos:position pos:line="163" pos:column="39"/></name><argument_list pos:line="163" pos:column="39">(<argument><expr><name pos:line="163" pos:column="40">optarg<pos:position pos:line="163" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="163" pos:column="48">"User-Agent:"<pos:position pos:line="163" pos:column="61"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="163" pos:column="63">11<pos:position pos:line="163" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="163" pos:column="66"/></argument_list></call> <operator pos:line="163" pos:column="67">==<pos:position pos:line="163" pos:column="69"/></operator> <literal type="number" pos:line="163" pos:column="70">0<pos:position pos:line="163" pos:column="71"/></literal></expr>)<pos:position pos:line="163" pos:column="72"/></condition><then pos:line="163" pos:column="72"> <block pos:line="163" pos:column="73">{
                    <expr_stmt><expr><name pos:line="164" pos:column="21">opt_useragent<pos:position pos:line="164" pos:column="34"/></name> <operator pos:line="164" pos:column="35">=<pos:position pos:line="164" pos:column="36"/></operator> <literal type="number" pos:line="164" pos:column="37">1<pos:position pos:line="164" pos:column="38"/></literal></expr>;<pos:position pos:line="164" pos:column="39"/></expr_stmt>
                }<pos:position pos:line="165" pos:column="18"/></block></then></if></elseif></if>
                <break pos:line="166" pos:column="17">break;<pos:position pos:line="166" pos:column="23"/></break>
            <case pos:line="167" pos:column="13">case <expr><literal type="char" pos:line="167" pos:column="18">'w'<pos:position pos:line="167" pos:column="21"/></literal></expr>:<pos:position pos:line="167" pos:column="22"/></case>
                <expr_stmt><expr><name pos:line="168" pos:column="17">use_html<pos:position pos:line="168" pos:column="25"/></name> <operator pos:line="168" pos:column="26">=<pos:position pos:line="168" pos:column="27"/></operator> <literal type="number" pos:line="168" pos:column="28">1<pos:position pos:line="168" pos:column="29"/></literal></expr>;<pos:position pos:line="168" pos:column="30"/></expr_stmt>
                <break pos:line="169" pos:column="17">break;<pos:position pos:line="169" pos:column="23"/></break>
                <comment type="block" pos:line="170" pos:column="17">/*
                 * if any of the following three are used, turn on html output
                 * automatically
                 */</comment>
            <case pos:line="174" pos:column="13">case <expr><literal type="char" pos:line="174" pos:column="18">'x'<pos:position pos:line="174" pos:column="21"/></literal></expr>:<pos:position pos:line="174" pos:column="22"/></case>
                <expr_stmt><expr><name pos:line="175" pos:column="17">use_html<pos:position pos:line="175" pos:column="25"/></name> <operator pos:line="175" pos:column="26">=<pos:position pos:line="175" pos:column="27"/></operator> <literal type="number" pos:line="175" pos:column="28">1<pos:position pos:line="175" pos:column="29"/></literal></expr>;<pos:position pos:line="175" pos:column="30"/></expr_stmt>
                <expr_stmt><expr><name pos:line="176" pos:column="17">tablestring<pos:position pos:line="176" pos:column="28"/></name> <operator pos:line="176" pos:column="29">=<pos:position pos:line="176" pos:column="30"/></operator> <name pos:line="176" pos:column="31">optarg<pos:position pos:line="176" pos:column="37"/></name></expr>;<pos:position pos:line="176" pos:column="38"/></expr_stmt>
                <break pos:line="177" pos:column="17">break;<pos:position pos:line="177" pos:column="23"/></break>
            <case pos:line="178" pos:column="13">case <expr><literal type="char" pos:line="178" pos:column="18">'X'<pos:position pos:line="178" pos:column="21"/></literal></expr>:<pos:position pos:line="178" pos:column="22"/></case>
                <block pos:line="179" pos:column="17">{
                    <decl_stmt><decl><type><name pos:line="180" pos:column="21">char<pos:position pos:line="180" pos:column="25"/></name> <modifier pos:line="180" pos:column="26">*<pos:position pos:line="180" pos:column="27"/></modifier></type><name pos:line="180" pos:column="27">p<pos:position pos:line="180" pos:column="28"/></name></decl>;<pos:position pos:line="180" pos:column="29"/></decl_stmt>
                    <comment type="block" pos:line="181" pos:column="21">/*
                     * assume proxy-name[:port]
                     */</comment>
                    <if pos:line="184" pos:column="21">if <condition pos:line="184" pos:column="24">(<expr><operator pos:line="184" pos:column="25">(<pos:position pos:line="184" pos:column="26"/></operator><name pos:line="184" pos:column="26">p<pos:position pos:line="184" pos:column="27"/></name> <operator pos:line="184" pos:column="28">=<pos:position pos:line="184" pos:column="29"/></operator> <call><name pos:line="184" pos:column="30">strchr<pos:position pos:line="184" pos:column="36"/></name><argument_list pos:line="184" pos:column="36">(<argument><expr><name pos:line="184" pos:column="37">optarg<pos:position pos:line="184" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="184" pos:column="45">':'<pos:position pos:line="184" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="184" pos:column="49"/></argument_list></call><operator pos:line="184" pos:column="49">)<pos:position pos:line="184" pos:column="50"/></operator></expr>)<pos:position pos:line="184" pos:column="51"/></condition><then pos:line="184" pos:column="51"> <block pos:line="184" pos:column="52">{
                        <expr_stmt><expr><operator pos:line="185" pos:column="25">*<pos:position pos:line="185" pos:column="26"/></operator><name pos:line="185" pos:column="26">p<pos:position pos:line="185" pos:column="27"/></name> <operator pos:line="185" pos:column="28">=<pos:position pos:line="185" pos:column="29"/></operator> <literal type="char" pos:line="185" pos:column="30">'\0'<pos:position pos:line="185" pos:column="34"/></literal></expr>;<pos:position pos:line="185" pos:column="35"/></expr_stmt>
                        <expr_stmt><expr><name pos:line="186" pos:column="25">p<pos:position pos:line="186" pos:column="26"/></name><operator pos:line="186" pos:column="26">++<pos:position pos:line="186" pos:column="28"/></operator></expr>;<pos:position pos:line="186" pos:column="29"/></expr_stmt>
                        <expr_stmt><expr><name pos:line="187" pos:column="25">proxyport<pos:position pos:line="187" pos:column="34"/></name> <operator pos:line="187" pos:column="35">=<pos:position pos:line="187" pos:column="36"/></operator> <call><name pos:line="187" pos:column="37">atoi<pos:position pos:line="187" pos:column="41"/></name><argument_list pos:line="187" pos:column="41">(<argument><expr><name pos:line="187" pos:column="42">p<pos:position pos:line="187" pos:column="43"/></name></expr></argument>)<pos:position pos:line="187" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="187" pos:column="45"/></expr_stmt>
                    }<pos:position pos:line="188" pos:column="22"/></block></then></if>
                    <expr_stmt><expr><call><name pos:line="189" pos:column="21">strcpy<pos:position pos:line="189" pos:column="27"/></name><argument_list pos:line="189" pos:column="27">(<argument><expr><name pos:line="189" pos:column="28">proxyhost<pos:position pos:line="189" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="189" pos:column="39">optarg<pos:position pos:line="189" pos:column="45"/></name></expr></argument>)<pos:position pos:line="189" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="189" pos:column="47"/></expr_stmt>
                    <expr_stmt><expr><name pos:line="190" pos:column="21">isproxy<pos:position pos:line="190" pos:column="28"/></name> <operator pos:line="190" pos:column="29">=<pos:position pos:line="190" pos:column="30"/></operator> <literal type="number" pos:line="190" pos:column="31">1<pos:position pos:line="190" pos:column="32"/></literal></expr>;<pos:position pos:line="190" pos:column="33"/></expr_stmt>
                }<pos:position pos:line="191" pos:column="18"/></block>
                <break pos:line="192" pos:column="17">break;<pos:position pos:line="192" pos:column="23"/></break>
            <case pos:line="193" pos:column="13">case <expr><literal type="char" pos:line="193" pos:column="18">'y'<pos:position pos:line="193" pos:column="21"/></literal></expr>:<pos:position pos:line="193" pos:column="22"/></case>
                <expr_stmt><expr><name pos:line="194" pos:column="17">use_html<pos:position pos:line="194" pos:column="25"/></name> <operator pos:line="194" pos:column="26">=<pos:position pos:line="194" pos:column="27"/></operator> <literal type="number" pos:line="194" pos:column="28">1<pos:position pos:line="194" pos:column="29"/></literal></expr>;<pos:position pos:line="194" pos:column="30"/></expr_stmt>
                <expr_stmt><expr><name pos:line="195" pos:column="17">trstring<pos:position pos:line="195" pos:column="25"/></name> <operator pos:line="195" pos:column="26">=<pos:position pos:line="195" pos:column="27"/></operator> <name pos:line="195" pos:column="28">optarg<pos:position pos:line="195" pos:column="34"/></name></expr>;<pos:position pos:line="195" pos:column="35"/></expr_stmt>
                <break pos:line="196" pos:column="17">break;<pos:position pos:line="196" pos:column="23"/></break>
            <case pos:line="197" pos:column="13">case <expr><literal type="char" pos:line="197" pos:column="18">'z'<pos:position pos:line="197" pos:column="21"/></literal></expr>:<pos:position pos:line="197" pos:column="22"/></case>
                <expr_stmt><expr><name pos:line="198" pos:column="17">use_html<pos:position pos:line="198" pos:column="25"/></name> <operator pos:line="198" pos:column="26">=<pos:position pos:line="198" pos:column="27"/></operator> <literal type="number" pos:line="198" pos:column="28">1<pos:position pos:line="198" pos:column="29"/></literal></expr>;<pos:position pos:line="198" pos:column="30"/></expr_stmt>
                <expr_stmt><expr><name pos:line="199" pos:column="17">tdstring<pos:position pos:line="199" pos:column="25"/></name> <operator pos:line="199" pos:column="26">=<pos:position pos:line="199" pos:column="27"/></operator> <name pos:line="199" pos:column="28">optarg<pos:position pos:line="199" pos:column="34"/></name></expr>;<pos:position pos:line="199" pos:column="35"/></expr_stmt>
                <break pos:line="200" pos:column="17">break;<pos:position pos:line="200" pos:column="23"/></break>
            <case pos:line="201" pos:column="13">case <expr><literal type="char" pos:line="201" pos:column="18">'h'<pos:position pos:line="201" pos:column="21"/></literal></expr>:<pos:position pos:line="201" pos:column="22"/></case>
                <expr_stmt><expr><call><name pos:line="202" pos:column="17">usage<pos:position pos:line="202" pos:column="22"/></name><argument_list pos:line="202" pos:column="22">(<argument><expr><name><name pos:line="202" pos:column="23">argv<pos:position pos:line="202" pos:column="27"/></name><index pos:line="202" pos:column="27">[<expr><literal type="number" pos:line="202" pos:column="28">0<pos:position pos:line="202" pos:column="29"/></literal></expr>]<pos:position pos:line="202" pos:column="30"/></index></name></expr></argument>)<pos:position pos:line="202" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="202" pos:column="32"/></expr_stmt>
                <break pos:line="203" pos:column="17">break;<pos:position pos:line="203" pos:column="23"/></break>
            <case pos:line="204" pos:column="13">case <expr><literal type="char" pos:line="204" pos:column="18">'V'<pos:position pos:line="204" pos:column="21"/></literal></expr>:<pos:position pos:line="204" pos:column="22"/></case>
                <expr_stmt><expr><call><name pos:line="205" pos:column="17">copyright<pos:position pos:line="205" pos:column="26"/></name><argument_list pos:line="205" pos:column="26">()<pos:position pos:line="205" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="205" pos:column="29"/></expr_stmt>
                <return pos:line="206" pos:column="17">return <expr><literal type="number" pos:line="206" pos:column="24">0<pos:position pos:line="206" pos:column="25"/></literal></expr>;<pos:position pos:line="206" pos:column="26"/></return>
<cpp:ifdef pos:line="207" pos:column="1">#<cpp:directive pos:line="207" pos:column="2">ifdef<pos:position pos:line="207" pos:column="7"/></cpp:directive> <name pos:line="207" pos:column="8">USE_SSL<pos:position pos:line="207" pos:column="15"/></name></cpp:ifdef>
            <case pos:line="208" pos:column="13">case <expr><literal type="char" pos:line="208" pos:column="18">'Z'<pos:position pos:line="208" pos:column="21"/></literal></expr>:<pos:position pos:line="208" pos:column="22"/></case>
                <expr_stmt><expr><name pos:line="209" pos:column="17">ssl_cipher<pos:position pos:line="209" pos:column="27"/></name> <operator pos:line="209" pos:column="28">=<pos:position pos:line="209" pos:column="29"/></operator> <call><name pos:line="209" pos:column="30">strdup<pos:position pos:line="209" pos:column="36"/></name><argument_list pos:line="209" pos:column="36">(<argument><expr><name pos:line="209" pos:column="37">optarg<pos:position pos:line="209" pos:column="43"/></name></expr></argument>)<pos:position pos:line="209" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="209" pos:column="45"/></expr_stmt>
                <break pos:line="210" pos:column="17">break;<pos:position pos:line="210" pos:column="23"/></break>
            <case pos:line="211" pos:column="13">case <expr><literal type="char" pos:line="211" pos:column="18">'f'<pos:position pos:line="211" pos:column="21"/></literal></expr>:<pos:position pos:line="211" pos:column="22"/></case>
                <if pos:line="212" pos:column="17">if <condition pos:line="212" pos:column="20">(<expr><call><name pos:line="212" pos:column="21">strncasecmp<pos:position pos:line="212" pos:column="32"/></name><argument_list pos:line="212" pos:column="32">(<argument><expr><name pos:line="212" pos:column="33">optarg<pos:position pos:line="212" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="212" pos:column="41">"ALL"<pos:position pos:line="212" pos:column="46"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="212" pos:column="48">3<pos:position pos:line="212" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="212" pos:column="50"/></argument_list></call> <operator pos:line="212" pos:column="51">==<pos:position pos:line="212" pos:column="53"/></operator> <literal type="number" pos:line="212" pos:column="54">0<pos:position pos:line="212" pos:column="55"/></literal></expr>)<pos:position pos:line="212" pos:column="56"/></condition><then pos:line="212" pos:column="56"> <block pos:line="212" pos:column="57">{
                    <expr_stmt><expr><name pos:line="213" pos:column="21">meth<pos:position pos:line="213" pos:column="25"/></name> <operator pos:line="213" pos:column="26">=<pos:position pos:line="213" pos:column="27"/></operator> <call><name pos:line="213" pos:column="28">SSLv23_client_method<pos:position pos:line="213" pos:column="48"/></name><argument_list pos:line="213" pos:column="48">()<pos:position pos:line="213" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="213" pos:column="51"/></expr_stmt>
<cpp:ifndef pos:line="214" pos:column="1">#<cpp:directive pos:line="214" pos:column="2">ifndef<pos:position pos:line="214" pos:column="8"/></cpp:directive> <name pos:line="214" pos:column="9">OPENSSL_NO_SSL2<pos:position pos:line="214" pos:column="24"/></name></cpp:ifndef>
                }<pos:position pos:line="215" pos:column="18"/></block></then> <elseif pos:line="215" pos:column="19">else <if pos:line="215" pos:column="24">if <condition pos:line="215" pos:column="27">(<expr><call><name pos:line="215" pos:column="28">strncasecmp<pos:position pos:line="215" pos:column="39"/></name><argument_list pos:line="215" pos:column="39">(<argument><expr><name pos:line="215" pos:column="40">optarg<pos:position pos:line="215" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="215" pos:column="48">"SSL2"<pos:position pos:line="215" pos:column="54"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="215" pos:column="56">4<pos:position pos:line="215" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="215" pos:column="58"/></argument_list></call> <operator pos:line="215" pos:column="59">==<pos:position pos:line="215" pos:column="61"/></operator> <literal type="number" pos:line="215" pos:column="62">0<pos:position pos:line="215" pos:column="63"/></literal></expr>)<pos:position pos:line="215" pos:column="64"/></condition><then pos:line="215" pos:column="64"> <block pos:line="215" pos:column="65">{
                    <expr_stmt><expr><name pos:line="216" pos:column="21">meth<pos:position pos:line="216" pos:column="25"/></name> <operator pos:line="216" pos:column="26">=<pos:position pos:line="216" pos:column="27"/></operator> <call><name pos:line="216" pos:column="28">SSLv2_client_method<pos:position pos:line="216" pos:column="47"/></name><argument_list pos:line="216" pos:column="47">()<pos:position pos:line="216" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="216" pos:column="50"/></expr_stmt>
<cpp:endif pos:line="217" pos:column="1">#<cpp:directive pos:line="217" pos:column="2">endif<pos:position pos:line="217" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:ifndef pos:line="218" pos:column="1">#<cpp:directive pos:line="218" pos:column="2">ifndef<pos:position pos:line="218" pos:column="8"/></cpp:directive> <name pos:line="218" pos:column="9">OPENSSL_NO_SSL3<pos:position pos:line="218" pos:column="24"/></name></cpp:ifndef>
                }<pos:position pos:line="219" pos:column="18"/></block></then></if></elseif> <elseif pos:line="219" pos:column="19">else <if pos:line="219" pos:column="24">if <condition pos:line="219" pos:column="27">(<expr><call><name pos:line="219" pos:column="28">strncasecmp<pos:position pos:line="219" pos:column="39"/></name><argument_list pos:line="219" pos:column="39">(<argument><expr><name pos:line="219" pos:column="40">optarg<pos:position pos:line="219" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="219" pos:column="48">"SSL3"<pos:position pos:line="219" pos:column="54"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="219" pos:column="56">4<pos:position pos:line="219" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="219" pos:column="58"/></argument_list></call> <operator pos:line="219" pos:column="59">==<pos:position pos:line="219" pos:column="61"/></operator> <literal type="number" pos:line="219" pos:column="62">0<pos:position pos:line="219" pos:column="63"/></literal></expr>)<pos:position pos:line="219" pos:column="64"/></condition><then pos:line="219" pos:column="64"> <block pos:line="219" pos:column="65">{
                    <expr_stmt><expr><name pos:line="220" pos:column="21">meth<pos:position pos:line="220" pos:column="25"/></name> <operator pos:line="220" pos:column="26">=<pos:position pos:line="220" pos:column="27"/></operator> <call><name pos:line="220" pos:column="28">SSLv3_client_method<pos:position pos:line="220" pos:column="47"/></name><argument_list pos:line="220" pos:column="47">()<pos:position pos:line="220" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="220" pos:column="50"/></expr_stmt>
<cpp:endif pos:line="221" pos:column="1">#<cpp:directive pos:line="221" pos:column="2">endif<pos:position pos:line="221" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:ifdef pos:line="222" pos:column="1">#<cpp:directive pos:line="222" pos:column="2">ifdef<pos:position pos:line="222" pos:column="7"/></cpp:directive> <name pos:line="222" pos:column="8">HAVE_TLSV1_X<pos:position pos:line="222" pos:column="20"/></name></cpp:ifdef>
                }<pos:position pos:line="223" pos:column="18"/></block></then></if></elseif> <elseif pos:line="223" pos:column="19">else <if pos:line="223" pos:column="24">if <condition pos:line="223" pos:column="27">(<expr><call><name pos:line="223" pos:column="28">strncasecmp<pos:position pos:line="223" pos:column="39"/></name><argument_list pos:line="223" pos:column="39">(<argument><expr><name pos:line="223" pos:column="40">optarg<pos:position pos:line="223" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="223" pos:column="48">"TLS1.1"<pos:position pos:line="223" pos:column="56"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="223" pos:column="58">6<pos:position pos:line="223" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="223" pos:column="60"/></argument_list></call> <operator pos:line="223" pos:column="61">==<pos:position pos:line="223" pos:column="63"/></operator> <literal type="number" pos:line="223" pos:column="64">0<pos:position pos:line="223" pos:column="65"/></literal></expr>)<pos:position pos:line="223" pos:column="66"/></condition><then pos:line="223" pos:column="66"> <block pos:line="223" pos:column="67">{
                    <expr_stmt><expr><name pos:line="224" pos:column="21">meth<pos:position pos:line="224" pos:column="25"/></name> <operator pos:line="224" pos:column="26">=<pos:position pos:line="224" pos:column="27"/></operator> <call><name pos:line="224" pos:column="28">TLSv1_1_client_method<pos:position pos:line="224" pos:column="49"/></name><argument_list pos:line="224" pos:column="49">()<pos:position pos:line="224" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="224" pos:column="52"/></expr_stmt>
                }<pos:position pos:line="225" pos:column="18"/></block></then></if></elseif> <elseif pos:line="225" pos:column="19">else <if pos:line="225" pos:column="24">if <condition pos:line="225" pos:column="27">(<expr><call><name pos:line="225" pos:column="28">strncasecmp<pos:position pos:line="225" pos:column="39"/></name><argument_list pos:line="225" pos:column="39">(<argument><expr><name pos:line="225" pos:column="40">optarg<pos:position pos:line="225" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="225" pos:column="48">"TLS1.2"<pos:position pos:line="225" pos:column="56"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="225" pos:column="58">6<pos:position pos:line="225" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="225" pos:column="60"/></argument_list></call> <operator pos:line="225" pos:column="61">==<pos:position pos:line="225" pos:column="63"/></operator> <literal type="number" pos:line="225" pos:column="64">0<pos:position pos:line="225" pos:column="65"/></literal></expr>)<pos:position pos:line="225" pos:column="66"/></condition><then pos:line="225" pos:column="66"> <block pos:line="225" pos:column="67">{
                    <expr_stmt><expr><name pos:line="226" pos:column="21">meth<pos:position pos:line="226" pos:column="25"/></name> <operator pos:line="226" pos:column="26">=<pos:position pos:line="226" pos:column="27"/></operator> <call><name pos:line="226" pos:column="28">TLSv1_2_client_method<pos:position pos:line="226" pos:column="49"/></name><argument_list pos:line="226" pos:column="49">()<pos:position pos:line="226" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="226" pos:column="52"/></expr_stmt>
<cpp:endif pos:line="227" pos:column="1">#<cpp:directive pos:line="227" pos:column="2">endif<pos:position pos:line="227" pos:column="7"/></cpp:directive></cpp:endif>
                }<pos:position pos:line="228" pos:column="18"/></block></then></if></elseif> <elseif pos:line="228" pos:column="19">else <if pos:line="228" pos:column="24">if <condition pos:line="228" pos:column="27">(<expr><call><name pos:line="228" pos:column="28">strncasecmp<pos:position pos:line="228" pos:column="39"/></name><argument_list pos:line="228" pos:column="39">(<argument><expr><name pos:line="228" pos:column="40">optarg<pos:position pos:line="228" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="228" pos:column="48">"TLS1"<pos:position pos:line="228" pos:column="54"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="228" pos:column="56">4<pos:position pos:line="228" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="228" pos:column="58"/></argument_list></call> <operator pos:line="228" pos:column="59">==<pos:position pos:line="228" pos:column="61"/></operator> <literal type="number" pos:line="228" pos:column="62">0<pos:position pos:line="228" pos:column="63"/></literal></expr>)<pos:position pos:line="228" pos:column="64"/></condition><then pos:line="228" pos:column="64"> <block pos:line="228" pos:column="65">{
                    <expr_stmt><expr><name pos:line="229" pos:column="21">meth<pos:position pos:line="229" pos:column="25"/></name> <operator pos:line="229" pos:column="26">=<pos:position pos:line="229" pos:column="27"/></operator> <call><name pos:line="229" pos:column="28">TLSv1_client_method<pos:position pos:line="229" pos:column="47"/></name><argument_list pos:line="229" pos:column="47">()<pos:position pos:line="229" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="229" pos:column="50"/></expr_stmt>
                }<pos:position pos:line="230" pos:column="18"/></block></then></if></elseif></if>
                <break pos:line="231" pos:column="17">break;<pos:position pos:line="231" pos:column="23"/></break>
<cpp:endif pos:line="232" pos:column="1">#<cpp:directive pos:line="232" pos:column="2">endif<pos:position pos:line="232" pos:column="7"/></cpp:directive></cpp:endif>
        }<pos:position pos:line="233" pos:column="10"/></block></switch>
    }<pos:position pos:line="234" pos:column="6"/></block></while>

    <if pos:line="236" pos:column="5">if <condition pos:line="236" pos:column="8">(<expr><name><name pos:line="236" pos:column="9">opt<pos:position pos:line="236" pos:column="12"/></name><operator pos:line="236" pos:column="12">-&gt;<pos:position pos:line="236" pos:column="17"/></operator><name pos:line="236" pos:column="14">ind<pos:position pos:line="236" pos:column="17"/></name></name> <operator pos:line="236" pos:column="18">!=<pos:position pos:line="236" pos:column="20"/></operator> <name pos:line="236" pos:column="21">argc<pos:position pos:line="236" pos:column="25"/></name> <operator pos:line="236" pos:column="26">-<pos:position pos:line="236" pos:column="27"/></operator> <literal type="number" pos:line="236" pos:column="28">1<pos:position pos:line="236" pos:column="29"/></literal></expr>)<pos:position pos:line="236" pos:column="30"/></condition><then pos:line="236" pos:column="30"> <block pos:line="236" pos:column="31">{
        <expr_stmt><expr><call><name pos:line="237" pos:column="9">fprintf<pos:position pos:line="237" pos:column="16"/></name><argument_list pos:line="237" pos:column="16">(<argument><expr><name pos:line="237" pos:column="17">stderr<pos:position pos:line="237" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="237" pos:column="25">"%s: wrong number of arguments\n"<pos:position pos:line="237" pos:column="58"/></literal></expr></argument>, <argument><expr><name><name pos:line="237" pos:column="60">argv<pos:position pos:line="237" pos:column="64"/></name><index pos:line="237" pos:column="64">[<expr><literal type="number" pos:line="237" pos:column="65">0<pos:position pos:line="237" pos:column="66"/></literal></expr>]<pos:position pos:line="237" pos:column="67"/></index></name></expr></argument>)<pos:position pos:line="237" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="237" pos:column="69"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="238" pos:column="9">usage<pos:position pos:line="238" pos:column="14"/></name><argument_list pos:line="238" pos:column="14">(<argument><expr><name><name pos:line="238" pos:column="15">argv<pos:position pos:line="238" pos:column="19"/></name><index pos:line="238" pos:column="19">[<expr><literal type="number" pos:line="238" pos:column="20">0<pos:position pos:line="238" pos:column="21"/></literal></expr>]<pos:position pos:line="238" pos:column="22"/></index></name></expr></argument>)<pos:position pos:line="238" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="238" pos:column="24"/></expr_stmt>
    }<pos:position pos:line="239" pos:column="6"/></block></then></if>

    <if pos:line="241" pos:column="5">if <condition pos:line="241" pos:column="8">(<expr><call><name pos:line="241" pos:column="9">parse_url<pos:position pos:line="241" pos:column="18"/></name><argument_list pos:line="241" pos:column="18">(<argument><expr><call><name pos:line="241" pos:column="19">apr_pstrdup<pos:position pos:line="241" pos:column="30"/></name><argument_list pos:line="241" pos:column="30">(<argument><expr><name pos:line="241" pos:column="31">cntxt<pos:position pos:line="241" pos:column="36"/></name></expr></argument>, <argument><expr><name><name pos:line="241" pos:column="38">opt<pos:position pos:line="241" pos:column="41"/></name><operator pos:line="241" pos:column="41">-&gt;<pos:position pos:line="241" pos:column="46"/></operator><name pos:line="241" pos:column="43">argv<pos:position pos:line="241" pos:column="47"/></name><index pos:line="241" pos:column="47">[<expr><name><name pos:line="241" pos:column="48">opt<pos:position pos:line="241" pos:column="51"/></name><operator pos:line="241" pos:column="51">-&gt;<pos:position pos:line="241" pos:column="56"/></operator><name pos:line="241" pos:column="53">ind<pos:position pos:line="241" pos:column="56"/></name></name><operator pos:line="241" pos:column="56">++<pos:position pos:line="241" pos:column="58"/></operator></expr>]<pos:position pos:line="241" pos:column="59"/></index></name></expr></argument>)<pos:position pos:line="241" pos:column="60"/></argument_list></call></expr></argument>)<pos:position pos:line="241" pos:column="61"/></argument_list></call></expr>)<pos:position pos:line="241" pos:column="62"/></condition><then pos:line="241" pos:column="62"> <block pos:line="241" pos:column="63">{
        <expr_stmt><expr><call><name pos:line="242" pos:column="9">fprintf<pos:position pos:line="242" pos:column="16"/></name><argument_list pos:line="242" pos:column="16">(<argument><expr><name pos:line="242" pos:column="17">stderr<pos:position pos:line="242" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="242" pos:column="25">"%s: invalid URL\n"<pos:position pos:line="242" pos:column="44"/></literal></expr></argument>, <argument><expr><name><name pos:line="242" pos:column="46">argv<pos:position pos:line="242" pos:column="50"/></name><index pos:line="242" pos:column="50">[<expr><literal type="number" pos:line="242" pos:column="51">0<pos:position pos:line="242" pos:column="52"/></literal></expr>]<pos:position pos:line="242" pos:column="53"/></index></name></expr></argument>)<pos:position pos:line="242" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="242" pos:column="55"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="243" pos:column="9">usage<pos:position pos:line="243" pos:column="14"/></name><argument_list pos:line="243" pos:column="14">(<argument><expr><name><name pos:line="243" pos:column="15">argv<pos:position pos:line="243" pos:column="19"/></name><index pos:line="243" pos:column="19">[<expr><literal type="number" pos:line="243" pos:column="20">0<pos:position pos:line="243" pos:column="21"/></literal></expr>]<pos:position pos:line="243" pos:column="22"/></index></name></expr></argument>)<pos:position pos:line="243" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="243" pos:column="24"/></expr_stmt>
    }<pos:position pos:line="244" pos:column="6"/></block></then></if>

    <if pos:line="246" pos:column="5">if <condition pos:line="246" pos:column="8">(<expr><operator pos:line="246" pos:column="9">(<pos:position pos:line="246" pos:column="10"/></operator><name pos:line="246" pos:column="10">concurrency<pos:position pos:line="246" pos:column="21"/></name> <operator pos:line="246" pos:column="22">&lt;<pos:position pos:line="246" pos:column="26"/></operator> <literal type="number" pos:line="246" pos:column="24">0<pos:position pos:line="246" pos:column="25"/></literal><operator pos:line="246" pos:column="25">)<pos:position pos:line="246" pos:column="26"/></operator> <operator pos:line="246" pos:column="27">||<pos:position pos:line="246" pos:column="29"/></operator> <operator pos:line="246" pos:column="30">(<pos:position pos:line="246" pos:column="31"/></operator><name pos:line="246" pos:column="31">concurrency<pos:position pos:line="246" pos:column="42"/></name> <operator pos:line="246" pos:column="43">&gt;<pos:position pos:line="246" pos:column="47"/></operator> <name pos:line="246" pos:column="45">MAX_CONCURRENCY<pos:position pos:line="246" pos:column="60"/></name><operator pos:line="246" pos:column="60">)<pos:position pos:line="246" pos:column="61"/></operator></expr>)<pos:position pos:line="246" pos:column="62"/></condition><then pos:line="246" pos:column="62"> <block pos:line="246" pos:column="63">{
        <expr_stmt><expr><call><name pos:line="247" pos:column="9">fprintf<pos:position pos:line="247" pos:column="16"/></name><argument_list pos:line="247" pos:column="16">(<argument><expr><name pos:line="247" pos:column="17">stderr<pos:position pos:line="247" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="247" pos:column="25">"%s: Invalid Concurrency [Range 0..%d]\n"<pos:position pos:line="247" pos:column="66"/></literal></expr></argument>,
                <argument><expr><name><name pos:line="248" pos:column="17">argv<pos:position pos:line="248" pos:column="21"/></name><index pos:line="248" pos:column="21">[<expr><literal type="number" pos:line="248" pos:column="22">0<pos:position pos:line="248" pos:column="23"/></literal></expr>]<pos:position pos:line="248" pos:column="24"/></index></name></expr></argument>, <argument><expr><name pos:line="248" pos:column="26">MAX_CONCURRENCY<pos:position pos:line="248" pos:column="41"/></name></expr></argument>)<pos:position pos:line="248" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="248" pos:column="43"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="249" pos:column="9">usage<pos:position pos:line="249" pos:column="14"/></name><argument_list pos:line="249" pos:column="14">(<argument><expr><name><name pos:line="249" pos:column="15">argv<pos:position pos:line="249" pos:column="19"/></name><index pos:line="249" pos:column="19">[<expr><literal type="number" pos:line="249" pos:column="20">0<pos:position pos:line="249" pos:column="21"/></literal></expr>]<pos:position pos:line="249" pos:column="22"/></index></name></expr></argument>)<pos:position pos:line="249" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="249" pos:column="24"/></expr_stmt>
    }<pos:position pos:line="250" pos:column="6"/></block></then></if>

    <if pos:line="252" pos:column="5">if <condition pos:line="252" pos:column="8">(<expr><name pos:line="252" pos:column="9">concurrency<pos:position pos:line="252" pos:column="20"/></name> <operator pos:line="252" pos:column="21">&gt;<pos:position pos:line="252" pos:column="25"/></operator> <name pos:line="252" pos:column="23">requests<pos:position pos:line="252" pos:column="31"/></name></expr>)<pos:position pos:line="252" pos:column="32"/></condition><then pos:line="252" pos:column="32"> <block pos:line="252" pos:column="33">{
        <expr_stmt><expr><call><name pos:line="253" pos:column="9">fprintf<pos:position pos:line="253" pos:column="16"/></name><argument_list pos:line="253" pos:column="16">(<argument><expr><name pos:line="253" pos:column="17">stderr<pos:position pos:line="253" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="253" pos:column="25">"%s: Cannot use concurrency level greater than "<pos:position pos:line="253" pos:column="73"/></literal>
                <literal type="string" pos:line="254" pos:column="17">"total number of requests\n"<pos:position pos:line="254" pos:column="45"/></literal></expr></argument>, <argument><expr><name><name pos:line="254" pos:column="47">argv<pos:position pos:line="254" pos:column="51"/></name><index pos:line="254" pos:column="51">[<expr><literal type="number" pos:line="254" pos:column="52">0<pos:position pos:line="254" pos:column="53"/></literal></expr>]<pos:position pos:line="254" pos:column="54"/></index></name></expr></argument>)<pos:position pos:line="254" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="254" pos:column="56"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="255" pos:column="9">usage<pos:position pos:line="255" pos:column="14"/></name><argument_list pos:line="255" pos:column="14">(<argument><expr><name><name pos:line="255" pos:column="15">argv<pos:position pos:line="255" pos:column="19"/></name><index pos:line="255" pos:column="19">[<expr><literal type="number" pos:line="255" pos:column="20">0<pos:position pos:line="255" pos:column="21"/></literal></expr>]<pos:position pos:line="255" pos:column="22"/></index></name></expr></argument>)<pos:position pos:line="255" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="255" pos:column="24"/></expr_stmt>
    }<pos:position pos:line="256" pos:column="6"/></block></then></if>

    <if pos:line="258" pos:column="5">if <condition pos:line="258" pos:column="8">(<expr><operator pos:line="258" pos:column="9">(<pos:position pos:line="258" pos:column="10"/></operator><name pos:line="258" pos:column="10">heartbeatres<pos:position pos:line="258" pos:column="22"/></name><operator pos:line="258" pos:column="22">)<pos:position pos:line="258" pos:column="23"/></operator> <operator pos:line="258" pos:column="24">&amp;&amp;<pos:position pos:line="258" pos:column="34"/></operator> <operator pos:line="258" pos:column="27">(<pos:position pos:line="258" pos:column="28"/></operator><name pos:line="258" pos:column="28">requests<pos:position pos:line="258" pos:column="36"/></name> <operator pos:line="258" pos:column="37">&gt;<pos:position pos:line="258" pos:column="41"/></operator> <literal type="number" pos:line="258" pos:column="39">150<pos:position pos:line="258" pos:column="42"/></literal><operator pos:line="258" pos:column="42">)<pos:position pos:line="258" pos:column="43"/></operator></expr>)<pos:position pos:line="258" pos:column="44"/></condition><then pos:line="258" pos:column="44"> <block pos:line="258" pos:column="45">{
        <expr_stmt><expr><name pos:line="259" pos:column="9">heartbeatres<pos:position pos:line="259" pos:column="21"/></name> <operator pos:line="259" pos:column="22">=<pos:position pos:line="259" pos:column="23"/></operator> <name pos:line="259" pos:column="24">requests<pos:position pos:line="259" pos:column="32"/></name> <operator pos:line="259" pos:column="33">/<pos:position pos:line="259" pos:column="34"/></operator> <literal type="number" pos:line="259" pos:column="35">10<pos:position pos:line="259" pos:column="37"/></literal></expr>;<pos:position pos:line="259" pos:column="38"/></expr_stmt>   <comment type="block" pos:line="259" pos:column="41">/* Print line every 10% of requests */</comment>
        <if pos:line="260" pos:column="9">if <condition pos:line="260" pos:column="12">(<expr><name pos:line="260" pos:column="13">heartbeatres<pos:position pos:line="260" pos:column="25"/></name> <operator pos:line="260" pos:column="26">&lt;<pos:position pos:line="260" pos:column="30"/></operator> <literal type="number" pos:line="260" pos:column="28">100<pos:position pos:line="260" pos:column="31"/></literal></expr>)<pos:position pos:line="260" pos:column="32"/></condition><then pos:line="260" pos:column="32">
            <block type="pseudo"><expr_stmt><expr><name pos:line="261" pos:column="13">heartbeatres<pos:position pos:line="261" pos:column="25"/></name> <operator pos:line="261" pos:column="26">=<pos:position pos:line="261" pos:column="27"/></operator> <literal type="number" pos:line="261" pos:column="28">100<pos:position pos:line="261" pos:column="31"/></literal></expr>;<pos:position pos:line="261" pos:column="32"/></expr_stmt></block></then></if> <comment type="block" pos:line="261" pos:column="33">/* but never more often than once every 100
                                 * connections. */</comment>
    }<pos:position pos:line="263" pos:column="6"/></block></then>
    <else pos:line="264" pos:column="5">else
        <block type="pseudo"><expr_stmt><expr><name pos:line="265" pos:column="9">heartbeatres<pos:position pos:line="265" pos:column="21"/></name> <operator pos:line="265" pos:column="22">=<pos:position pos:line="265" pos:column="23"/></operator> <literal type="number" pos:line="265" pos:column="24">0<pos:position pos:line="265" pos:column="25"/></literal></expr>;<pos:position pos:line="265" pos:column="26"/></expr_stmt></block></else></if>

<cpp:ifdef pos:line="267" pos:column="1">#<cpp:directive pos:line="267" pos:column="2">ifdef<pos:position pos:line="267" pos:column="7"/></cpp:directive> <name pos:line="267" pos:column="8">USE_SSL<pos:position pos:line="267" pos:column="15"/></name></cpp:ifdef>
<cpp:ifdef pos:line="268" pos:column="1">#<cpp:directive pos:line="268" pos:column="2">ifdef<pos:position pos:line="268" pos:column="7"/></cpp:directive> <name pos:line="268" pos:column="8">RSAREF<pos:position pos:line="268" pos:column="14"/></name></cpp:ifdef>
    <expr_stmt><expr><call><name pos:line="269" pos:column="5">R_malloc_init<pos:position pos:line="269" pos:column="18"/></name><argument_list pos:line="269" pos:column="18">()<pos:position pos:line="269" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="269" pos:column="21"/></expr_stmt>
<cpp:else pos:line="270" pos:column="1">#<cpp:directive pos:line="270" pos:column="2">else<pos:position pos:line="270" pos:column="6"/></cpp:directive></cpp:else>
    <expr_stmt><expr><call><name pos:line="271" pos:column="5">CRYPTO_malloc_init<pos:position pos:line="271" pos:column="23"/></name><argument_list pos:line="271" pos:column="23">()<pos:position pos:line="271" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="271" pos:column="26"/></expr_stmt>
<cpp:endif pos:line="272" pos:column="1">#<cpp:directive pos:line="272" pos:column="2">endif<pos:position pos:line="272" pos:column="7"/></cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name pos:line="273" pos:column="5">SSL_load_error_strings<pos:position pos:line="273" pos:column="27"/></name><argument_list pos:line="273" pos:column="27">()<pos:position pos:line="273" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="273" pos:column="30"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="274" pos:column="5">SSL_library_init<pos:position pos:line="274" pos:column="21"/></name><argument_list pos:line="274" pos:column="21">()<pos:position pos:line="274" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="274" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><name pos:line="275" pos:column="5">bio_out<pos:position pos:line="275" pos:column="12"/></name><operator pos:line="275" pos:column="12">=<pos:position pos:line="275" pos:column="13"/></operator><call><name pos:line="275" pos:column="13">BIO_new_fp<pos:position pos:line="275" pos:column="23"/></name><argument_list pos:line="275" pos:column="23">(<argument><expr><name pos:line="275" pos:column="24">stdout<pos:position pos:line="275" pos:column="30"/></name></expr></argument>,<argument><expr><name pos:line="275" pos:column="31">BIO_NOCLOSE<pos:position pos:line="275" pos:column="42"/></name></expr></argument>)<pos:position pos:line="275" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="275" pos:column="44"/></expr_stmt>
    <expr_stmt><expr><name pos:line="276" pos:column="5">bio_err<pos:position pos:line="276" pos:column="12"/></name><operator pos:line="276" pos:column="12">=<pos:position pos:line="276" pos:column="13"/></operator><call><name pos:line="276" pos:column="13">BIO_new_fp<pos:position pos:line="276" pos:column="23"/></name><argument_list pos:line="276" pos:column="23">(<argument><expr><name pos:line="276" pos:column="24">stderr<pos:position pos:line="276" pos:column="30"/></name></expr></argument>,<argument><expr><name pos:line="276" pos:column="31">BIO_NOCLOSE<pos:position pos:line="276" pos:column="42"/></name></expr></argument>)<pos:position pos:line="276" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="276" pos:column="44"/></expr_stmt>

    <if pos:line="278" pos:column="5">if <condition pos:line="278" pos:column="8">(<expr><operator pos:line="278" pos:column="9">!<pos:position pos:line="278" pos:column="10"/></operator><operator pos:line="278" pos:column="10">(<pos:position pos:line="278" pos:column="11"/></operator><name pos:line="278" pos:column="11">ssl_ctx<pos:position pos:line="278" pos:column="18"/></name> <operator pos:line="278" pos:column="19">=<pos:position pos:line="278" pos:column="20"/></operator> <call><name pos:line="278" pos:column="21">SSL_CTX_new<pos:position pos:line="278" pos:column="32"/></name><argument_list pos:line="278" pos:column="32">(<argument><expr><name pos:line="278" pos:column="33">meth<pos:position pos:line="278" pos:column="37"/></name></expr></argument>)<pos:position pos:line="278" pos:column="38"/></argument_list></call><operator pos:line="278" pos:column="38">)<pos:position pos:line="278" pos:column="39"/></operator></expr>)<pos:position pos:line="278" pos:column="40"/></condition><then pos:line="278" pos:column="40"> <block pos:line="278" pos:column="41">{
        <expr_stmt><expr><call><name pos:line="279" pos:column="9">BIO_printf<pos:position pos:line="279" pos:column="19"/></name><argument_list pos:line="279" pos:column="19">(<argument><expr><name pos:line="279" pos:column="20">bio_err<pos:position pos:line="279" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="279" pos:column="29">"Could not initialize SSL Context.\n"<pos:position pos:line="279" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="279" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="279" pos:column="68"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="280" pos:column="9">ERR_print_errors<pos:position pos:line="280" pos:column="25"/></name><argument_list pos:line="280" pos:column="25">(<argument><expr><name pos:line="280" pos:column="26">bio_err<pos:position pos:line="280" pos:column="33"/></name></expr></argument>)<pos:position pos:line="280" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="280" pos:column="35"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="281" pos:column="9">exit<pos:position pos:line="281" pos:column="13"/></name><argument_list pos:line="281" pos:column="13">(<argument><expr><literal type="number" pos:line="281" pos:column="14">1<pos:position pos:line="281" pos:column="15"/></literal></expr></argument>)<pos:position pos:line="281" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="281" pos:column="17"/></expr_stmt>
    }<pos:position pos:line="282" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="283" pos:column="5">SSL_CTX_set_options<pos:position pos:line="283" pos:column="24"/></name><argument_list pos:line="283" pos:column="24">(<argument><expr><name pos:line="283" pos:column="25">ssl_ctx<pos:position pos:line="283" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="283" pos:column="34">SSL_OP_ALL<pos:position pos:line="283" pos:column="44"/></name></expr></argument>)<pos:position pos:line="283" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="283" pos:column="46"/></expr_stmt>
    <if pos:line="284" pos:column="5">if <condition pos:line="284" pos:column="8">(<expr><name pos:line="284" pos:column="9">ssl_cipher<pos:position pos:line="284" pos:column="19"/></name> <operator pos:line="284" pos:column="20">!=<pos:position pos:line="284" pos:column="22"/></operator> <name pos:line="284" pos:column="23">NULL<pos:position pos:line="284" pos:column="27"/></name></expr>)<pos:position pos:line="284" pos:column="28"/></condition><then pos:line="284" pos:column="28"> <block pos:line="284" pos:column="29">{
        <if pos:line="285" pos:column="9">if <condition pos:line="285" pos:column="12">(<expr><operator pos:line="285" pos:column="13">!<pos:position pos:line="285" pos:column="14"/></operator><call><name pos:line="285" pos:column="14">SSL_CTX_set_cipher_list<pos:position pos:line="285" pos:column="37"/></name><argument_list pos:line="285" pos:column="37">(<argument><expr><name pos:line="285" pos:column="38">ssl_ctx<pos:position pos:line="285" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="285" pos:column="47">ssl_cipher<pos:position pos:line="285" pos:column="57"/></name></expr></argument>)<pos:position pos:line="285" pos:column="58"/></argument_list></call></expr>)<pos:position pos:line="285" pos:column="59"/></condition><then pos:line="285" pos:column="59"> <block pos:line="285" pos:column="60">{
            <expr_stmt><expr><call><name pos:line="286" pos:column="13">fprintf<pos:position pos:line="286" pos:column="20"/></name><argument_list pos:line="286" pos:column="20">(<argument><expr><name pos:line="286" pos:column="21">stderr<pos:position pos:line="286" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="286" pos:column="29">"error setting cipher list [%s]\n"<pos:position pos:line="286" pos:column="63"/></literal></expr></argument>, <argument><expr><name pos:line="286" pos:column="65">ssl_cipher<pos:position pos:line="286" pos:column="75"/></name></expr></argument>)<pos:position pos:line="286" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="286" pos:column="77"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="287" pos:column="9">ERR_print_errors_fp<pos:position pos:line="287" pos:column="28"/></name><argument_list pos:line="287" pos:column="28">(<argument><expr><name pos:line="287" pos:column="29">stderr<pos:position pos:line="287" pos:column="35"/></name></expr></argument>)<pos:position pos:line="287" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="287" pos:column="37"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="288" pos:column="9">exit<pos:position pos:line="288" pos:column="13"/></name><argument_list pos:line="288" pos:column="13">(<argument><expr><literal type="number" pos:line="288" pos:column="14">1<pos:position pos:line="288" pos:column="15"/></literal></expr></argument>)<pos:position pos:line="288" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="288" pos:column="17"/></expr_stmt>
    }<pos:position pos:line="289" pos:column="6"/></block></then></if>
    }<pos:position pos:line="290" pos:column="6"/></block></then></if>
    <if pos:line="291" pos:column="5">if <condition pos:line="291" pos:column="8">(<expr><name pos:line="291" pos:column="9">verbosity<pos:position pos:line="291" pos:column="18"/></name> <operator pos:line="291" pos:column="19">&gt;=<pos:position pos:line="291" pos:column="24"/></operator> <literal type="number" pos:line="291" pos:column="22">3<pos:position pos:line="291" pos:column="23"/></literal></expr>)<pos:position pos:line="291" pos:column="24"/></condition><then pos:line="291" pos:column="24"> <block pos:line="291" pos:column="25">{
        <expr_stmt><expr><call><name pos:line="292" pos:column="9">SSL_CTX_set_info_callback<pos:position pos:line="292" pos:column="34"/></name><argument_list pos:line="292" pos:column="34">(<argument><expr><name pos:line="292" pos:column="35">ssl_ctx<pos:position pos:line="292" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="292" pos:column="44">ssl_state_cb<pos:position pos:line="292" pos:column="56"/></name></expr></argument>)<pos:position pos:line="292" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="292" pos:column="58"/></expr_stmt>
    }<pos:position pos:line="293" pos:column="6"/></block></then></if>
<cpp:endif pos:line="294" pos:column="1">#<cpp:directive pos:line="294" pos:column="2">endif<pos:position pos:line="294" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:ifdef pos:line="295" pos:column="1">#<cpp:directive pos:line="295" pos:column="2">ifdef<pos:position pos:line="295" pos:column="7"/></cpp:directive> <name pos:line="295" pos:column="8">SIGPIPE<pos:position pos:line="295" pos:column="15"/></name></cpp:ifdef>
    <expr_stmt><expr><call><name pos:line="296" pos:column="5">apr_signal<pos:position pos:line="296" pos:column="15"/></name><argument_list pos:line="296" pos:column="15">(<argument><expr><name pos:line="296" pos:column="16">SIGPIPE<pos:position pos:line="296" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="296" pos:column="25">SIG_IGN<pos:position pos:line="296" pos:column="32"/></name></expr></argument>)<pos:position pos:line="296" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="296" pos:column="34"/></expr_stmt>       <comment type="block" pos:line="296" pos:column="41">/* Ignore writes to connections that
                                         * have been closed at the other end. */</comment>
<cpp:endif pos:line="298" pos:column="1">#<cpp:directive pos:line="298" pos:column="2">endif<pos:position pos:line="298" pos:column="7"/></cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name pos:line="299" pos:column="5">copyright<pos:position pos:line="299" pos:column="14"/></name><argument_list pos:line="299" pos:column="14">()<pos:position pos:line="299" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="299" pos:column="17"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="300" pos:column="5">test<pos:position pos:line="300" pos:column="9"/></name><argument_list pos:line="300" pos:column="9">()<pos:position pos:line="300" pos:column="11"/></argument_list></call></expr>;<pos:position pos:line="300" pos:column="12"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="301" pos:column="5">apr_pool_destroy<pos:position pos:line="301" pos:column="21"/></name><argument_list pos:line="301" pos:column="21">(<argument><expr><name pos:line="301" pos:column="22">cntxt<pos:position pos:line="301" pos:column="27"/></name></expr></argument>)<pos:position pos:line="301" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="301" pos:column="29"/></expr_stmt>

    <return pos:line="303" pos:column="5">return <expr><literal type="number" pos:line="303" pos:column="12">0<pos:position pos:line="303" pos:column="13"/></literal></expr>;<pos:position pos:line="303" pos:column="14"/></return>
}<pos:position pos:line="304" pos:column="2"/></block></function></unit>
