<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_3155_httpd-2.2.0.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">unsigned<pos:position pos:line="1" pos:column="9"/></name> <name pos:line="1" pos:column="10">int<pos:position pos:line="1" pos:column="13"/></name></type> <name pos:line="1" pos:column="14">apr_hashfunc_default<pos:position pos:line="1" pos:column="34"/></name><parameter_list pos:line="1" pos:column="34">(<parameter><decl><type><specifier pos:line="1" pos:column="35">const<pos:position pos:line="1" pos:column="40"/></specifier> <name pos:line="1" pos:column="41">char<pos:position pos:line="1" pos:column="45"/></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">char_key<pos:position pos:line="1" pos:column="55"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="57">apr_ssize_t<pos:position pos:line="1" pos:column="68"/></name> <modifier pos:line="1" pos:column="69">*<pos:position pos:line="1" pos:column="70"/></modifier></type><name pos:line="1" pos:column="70">klen<pos:position pos:line="1" pos:column="74"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="75"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">unsigned<pos:position pos:line="3" pos:column="13"/></name> <name pos:line="3" pos:column="14">int<pos:position pos:line="3" pos:column="17"/></name></type> <name pos:line="3" pos:column="18">hash<pos:position pos:line="3" pos:column="22"/></name> <init pos:line="3" pos:column="23">= <expr><literal type="number" pos:line="3" pos:column="25">0<pos:position pos:line="3" pos:column="26"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="27"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="4" pos:column="5">const<pos:position pos:line="4" pos:column="10"/></specifier> <name pos:line="4" pos:column="11">unsigned<pos:position pos:line="4" pos:column="19"/></name> <name pos:line="4" pos:column="20">char<pos:position pos:line="4" pos:column="24"/></name> <modifier pos:line="4" pos:column="25">*<pos:position pos:line="4" pos:column="26"/></modifier></type><name pos:line="4" pos:column="26">key<pos:position pos:line="4" pos:column="29"/></name> <init pos:line="4" pos:column="30">= <expr><operator pos:line="4" pos:column="32">(<pos:position pos:line="4" pos:column="33"/></operator><specifier pos:line="4" pos:column="33">const<pos:position pos:line="4" pos:column="38"/></specifier> <name pos:line="4" pos:column="39">unsigned<pos:position pos:line="4" pos:column="47"/></name> <name pos:line="4" pos:column="48">char<pos:position pos:line="4" pos:column="52"/></name> <operator pos:line="4" pos:column="53">*<pos:position pos:line="4" pos:column="54"/></operator><operator pos:line="4" pos:column="54">)<pos:position pos:line="4" pos:column="55"/></operator><name pos:line="4" pos:column="55">char_key<pos:position pos:line="4" pos:column="63"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="64"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="5" pos:column="5">const<pos:position pos:line="5" pos:column="10"/></specifier> <name pos:line="5" pos:column="11">unsigned<pos:position pos:line="5" pos:column="19"/></name> <name pos:line="5" pos:column="20">char<pos:position pos:line="5" pos:column="24"/></name> <modifier pos:line="5" pos:column="25">*<pos:position pos:line="5" pos:column="26"/></modifier></type><name pos:line="5" pos:column="26">p<pos:position pos:line="5" pos:column="27"/></name></decl>;<pos:position pos:line="5" pos:column="28"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">apr_ssize_t<pos:position pos:line="6" pos:column="16"/></name></type> <name pos:line="6" pos:column="17">i<pos:position pos:line="6" pos:column="18"/></name></decl>;<pos:position pos:line="6" pos:column="19"/></decl_stmt>
    
    <comment type="block" pos:line="8" pos:column="5">/*
     * This is the popular `times 33' hash algorithm which is used by
     * perl and also appears in Berkeley DB. This is one of the best
     * known hash functions for strings because it is both computed
     * very fast and distributes very well.
     *
     * The originator may be Dan Bernstein but the code in Berkeley DB
     * cites Chris Torek as the source. The best citation I have found
     * is "Chris Torek, Hash function for text in C, Usenet message
     * &lt;27038@mimsy.umd.edu&gt; in comp.lang.c , October, 1990." in Rich
     * Salz's USENIX 1992 paper about INN which can be found at
     * &lt;http://citeseer.nj.nec.com/salz92internetnews.html&gt;.
     *
     * The magic of number 33, i.e. why it works better than many other
     * constants, prime or not, has never been adequately explained by
     * anyone. So I try an explanation: if one experimentally tests all
     * multipliers between 1 and 256 (as I did while writing a low-level
     * data structure library some time ago) one detects that even
     * numbers are not useable at all. The remaining 128 odd numbers
     * (except for the number 1) work more or less all equally well.
     * They all distribute in an acceptable way and this way fill a hash
     * table with an average percent of approx. 86%.
     *
     * If one compares the chi^2 values of the variants (see
     * Bob Jenkins ``Hashing Frequently Asked Questions'' at
     * http://burtleburtle.net/bob/hash/hashfaq.html for a description
     * of chi^2), the number 33 not even has the best value. But the
     * number 33 and a few other equally good numbers like 17, 31, 63,
     * 127 and 129 have nevertheless a great advantage to the remaining
     * numbers in the large set of possible multipliers: their multiply
     * operation can be replaced by a faster operation based on just one
     * shift plus either a single addition or subtraction operation. And
     * because a hash function has to both distribute good _and_ has to
     * be very fast to compute, those few numbers should be preferred.
     *
     *                  -- Ralf S. Engelschall &lt;rse@engelschall.com&gt;
     */</comment>
     
    <if pos:line="46" pos:column="5">if <condition pos:line="46" pos:column="8">(<expr><operator pos:line="46" pos:column="9">*<pos:position pos:line="46" pos:column="10"/></operator><name pos:line="46" pos:column="10">klen<pos:position pos:line="46" pos:column="14"/></name> <operator pos:line="46" pos:column="15">==<pos:position pos:line="46" pos:column="17"/></operator> <name pos:line="46" pos:column="18">APR_HASH_KEY_STRING<pos:position pos:line="46" pos:column="37"/></name></expr>)<pos:position pos:line="46" pos:column="38"/></condition><then pos:line="46" pos:column="38"> <block pos:line="46" pos:column="39">{
        <for pos:line="47" pos:column="9">for <control pos:line="47" pos:column="13">(<init><expr><name pos:line="47" pos:column="14">p<pos:position pos:line="47" pos:column="15"/></name> <operator pos:line="47" pos:column="16">=<pos:position pos:line="47" pos:column="17"/></operator> <name pos:line="47" pos:column="18">key<pos:position pos:line="47" pos:column="21"/></name></expr>;<pos:position pos:line="47" pos:column="22"/></init> <condition><expr><operator pos:line="47" pos:column="23">*<pos:position pos:line="47" pos:column="24"/></operator><name pos:line="47" pos:column="24">p<pos:position pos:line="47" pos:column="25"/></name></expr>;<pos:position pos:line="47" pos:column="26"/></condition> <incr><expr><name pos:line="47" pos:column="27">p<pos:position pos:line="47" pos:column="28"/></name><operator pos:line="47" pos:column="28">++<pos:position pos:line="47" pos:column="30"/></operator></expr></incr>)<pos:position pos:line="47" pos:column="31"/></control> <block pos:line="47" pos:column="32">{
            <expr_stmt><expr><name pos:line="48" pos:column="13">hash<pos:position pos:line="48" pos:column="17"/></name> <operator pos:line="48" pos:column="18">=<pos:position pos:line="48" pos:column="19"/></operator> <name pos:line="48" pos:column="20">hash<pos:position pos:line="48" pos:column="24"/></name> <operator pos:line="48" pos:column="25">*<pos:position pos:line="48" pos:column="26"/></operator> <literal type="number" pos:line="48" pos:column="27">33<pos:position pos:line="48" pos:column="29"/></literal> <operator pos:line="48" pos:column="30">+<pos:position pos:line="48" pos:column="31"/></operator> <operator pos:line="48" pos:column="32">*<pos:position pos:line="48" pos:column="33"/></operator><name pos:line="48" pos:column="33">p<pos:position pos:line="48" pos:column="34"/></name></expr>;<pos:position pos:line="48" pos:column="35"/></expr_stmt>
        }<pos:position pos:line="49" pos:column="10"/></block></for>
        <expr_stmt><expr><operator pos:line="50" pos:column="9">*<pos:position pos:line="50" pos:column="10"/></operator><name pos:line="50" pos:column="10">klen<pos:position pos:line="50" pos:column="14"/></name> <operator pos:line="50" pos:column="15">=<pos:position pos:line="50" pos:column="16"/></operator> <name pos:line="50" pos:column="17">p<pos:position pos:line="50" pos:column="18"/></name> <operator pos:line="50" pos:column="19">-<pos:position pos:line="50" pos:column="20"/></operator> <name pos:line="50" pos:column="21">key<pos:position pos:line="50" pos:column="24"/></name></expr>;<pos:position pos:line="50" pos:column="25"/></expr_stmt>
    }<pos:position pos:line="51" pos:column="6"/></block></then>
    <else pos:line="52" pos:column="5">else <block pos:line="52" pos:column="10">{
        <for pos:line="53" pos:column="9">for <control pos:line="53" pos:column="13">(<init><expr><name pos:line="53" pos:column="14">p<pos:position pos:line="53" pos:column="15"/></name> <operator pos:line="53" pos:column="16">=<pos:position pos:line="53" pos:column="17"/></operator> <name pos:line="53" pos:column="18">key<pos:position pos:line="53" pos:column="21"/></name></expr><operator pos:line="53" pos:column="21">,<pos:position pos:line="53" pos:column="22"/></operator> <expr><name pos:line="53" pos:column="23">i<pos:position pos:line="53" pos:column="24"/></name> <operator pos:line="53" pos:column="25">=<pos:position pos:line="53" pos:column="26"/></operator> <operator pos:line="53" pos:column="27">*<pos:position pos:line="53" pos:column="28"/></operator><name pos:line="53" pos:column="28">klen<pos:position pos:line="53" pos:column="32"/></name></expr>;<pos:position pos:line="53" pos:column="33"/></init> <condition><expr><name pos:line="53" pos:column="34">i<pos:position pos:line="53" pos:column="35"/></name></expr>;<pos:position pos:line="53" pos:column="36"/></condition> <incr><expr><name pos:line="53" pos:column="37">i<pos:position pos:line="53" pos:column="38"/></name><operator pos:line="53" pos:column="38">--<pos:position pos:line="53" pos:column="40"/></operator></expr><operator pos:line="53" pos:column="40">,<pos:position pos:line="53" pos:column="41"/></operator> <expr><name pos:line="53" pos:column="42">p<pos:position pos:line="53" pos:column="43"/></name><operator pos:line="53" pos:column="43">++<pos:position pos:line="53" pos:column="45"/></operator></expr></incr>)<pos:position pos:line="53" pos:column="46"/></control> <block pos:line="53" pos:column="47">{
            <expr_stmt><expr><name pos:line="54" pos:column="13">hash<pos:position pos:line="54" pos:column="17"/></name> <operator pos:line="54" pos:column="18">=<pos:position pos:line="54" pos:column="19"/></operator> <name pos:line="54" pos:column="20">hash<pos:position pos:line="54" pos:column="24"/></name> <operator pos:line="54" pos:column="25">*<pos:position pos:line="54" pos:column="26"/></operator> <literal type="number" pos:line="54" pos:column="27">33<pos:position pos:line="54" pos:column="29"/></literal> <operator pos:line="54" pos:column="30">+<pos:position pos:line="54" pos:column="31"/></operator> <operator pos:line="54" pos:column="32">*<pos:position pos:line="54" pos:column="33"/></operator><name pos:line="54" pos:column="33">p<pos:position pos:line="54" pos:column="34"/></name></expr>;<pos:position pos:line="54" pos:column="35"/></expr_stmt>
        }<pos:position pos:line="55" pos:column="10"/></block></for>
    }<pos:position pos:line="56" pos:column="6"/></block></else></if>

    <return pos:line="58" pos:column="5">return <expr><name pos:line="58" pos:column="12">hash<pos:position pos:line="58" pos:column="16"/></name></expr>;<pos:position pos:line="58" pos:column="17"/></return>
}<pos:position pos:line="59" pos:column="2"/></block></function></unit>
