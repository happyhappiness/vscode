<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_3143_httpd-2.0.44.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">pcre_extra<pos:position pos:line="1" pos:column="11"/></name> <modifier pos:line="1" pos:column="12">*<pos:position pos:line="1" pos:column="13"/></modifier></type>
<name pos:line="2" pos:column="1">pcre_study<pos:position pos:line="2" pos:column="11"/></name><parameter_list pos:line="2" pos:column="11">(<parameter><decl><type><specifier pos:line="2" pos:column="12">const<pos:position pos:line="2" pos:column="17"/></specifier> <name pos:line="2" pos:column="18">pcre<pos:position pos:line="2" pos:column="22"/></name> <modifier pos:line="2" pos:column="23">*<pos:position pos:line="2" pos:column="24"/></modifier></type><name pos:line="2" pos:column="24">external_re<pos:position pos:line="2" pos:column="35"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="37">int<pos:position pos:line="2" pos:column="40"/></name></type> <name pos:line="2" pos:column="41">options<pos:position pos:line="2" pos:column="48"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="50">const<pos:position pos:line="2" pos:column="55"/></specifier> <name pos:line="2" pos:column="56">char<pos:position pos:line="2" pos:column="60"/></name> <modifier pos:line="2" pos:column="61">*<pos:position pos:line="2" pos:column="62"/></modifier><modifier pos:line="2" pos:column="62">*<pos:position pos:line="2" pos:column="63"/></modifier></type><name pos:line="2" pos:column="63">errorptr<pos:position pos:line="2" pos:column="71"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="72"/></parameter_list>
<block pos:line="3" pos:column="1">{
<decl_stmt><decl><type><name pos:line="4" pos:column="1">uschar<pos:position pos:line="4" pos:column="7"/></name></type> <name><name pos:line="4" pos:column="8">start_bits<pos:position pos:line="4" pos:column="18"/></name><index pos:line="4" pos:column="18">[<expr><literal type="number" pos:line="4" pos:column="19">32<pos:position pos:line="4" pos:column="21"/></literal></expr>]<pos:position pos:line="4" pos:column="22"/></index></name></decl>;<pos:position pos:line="4" pos:column="23"/></decl_stmt>
<decl_stmt><decl><type><name pos:line="5" pos:column="1">real_pcre_extra<pos:position pos:line="5" pos:column="16"/></name> <modifier pos:line="5" pos:column="17">*<pos:position pos:line="5" pos:column="18"/></modifier></type><name pos:line="5" pos:column="18">extra<pos:position pos:line="5" pos:column="23"/></name></decl>;<pos:position pos:line="5" pos:column="24"/></decl_stmt>
<decl_stmt><decl><type><specifier pos:line="6" pos:column="1">const<pos:position pos:line="6" pos:column="6"/></specifier> <name pos:line="6" pos:column="7">real_pcre<pos:position pos:line="6" pos:column="16"/></name> <modifier pos:line="6" pos:column="17">*<pos:position pos:line="6" pos:column="18"/></modifier></type><name pos:line="6" pos:column="18">re<pos:position pos:line="6" pos:column="20"/></name> <init pos:line="6" pos:column="21">= <expr><operator pos:line="6" pos:column="23">(<pos:position pos:line="6" pos:column="24"/></operator><specifier pos:line="6" pos:column="24">const<pos:position pos:line="6" pos:column="29"/></specifier> <name pos:line="6" pos:column="30">real_pcre<pos:position pos:line="6" pos:column="39"/></name> <operator pos:line="6" pos:column="40">*<pos:position pos:line="6" pos:column="41"/></operator><operator pos:line="6" pos:column="41">)<pos:position pos:line="6" pos:column="42"/></operator><name pos:line="6" pos:column="42">external_re<pos:position pos:line="6" pos:column="53"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="54"/></decl_stmt>
<decl_stmt><decl><type><name pos:line="7" pos:column="1">compile_data<pos:position pos:line="7" pos:column="13"/></name></type> <name pos:line="7" pos:column="14">compile_block<pos:position pos:line="7" pos:column="27"/></name></decl>;<pos:position pos:line="7" pos:column="28"/></decl_stmt>

<expr_stmt><expr><operator pos:line="9" pos:column="1">*<pos:position pos:line="9" pos:column="2"/></operator><name pos:line="9" pos:column="2">errorptr<pos:position pos:line="9" pos:column="10"/></name> <operator pos:line="9" pos:column="11">=<pos:position pos:line="9" pos:column="12"/></operator> <name pos:line="9" pos:column="13">NULL<pos:position pos:line="9" pos:column="17"/></name></expr>;<pos:position pos:line="9" pos:column="18"/></expr_stmt>

<if pos:line="11" pos:column="1">if <condition pos:line="11" pos:column="4">(<expr><name pos:line="11" pos:column="5">re<pos:position pos:line="11" pos:column="7"/></name> <operator pos:line="11" pos:column="8">==<pos:position pos:line="11" pos:column="10"/></operator> <name pos:line="11" pos:column="11">NULL<pos:position pos:line="11" pos:column="15"/></name> <operator pos:line="11" pos:column="16">||<pos:position pos:line="11" pos:column="18"/></operator> <name><name pos:line="11" pos:column="19">re<pos:position pos:line="11" pos:column="21"/></name><operator pos:line="11" pos:column="21">-&gt;<pos:position pos:line="11" pos:column="26"/></operator><name pos:line="11" pos:column="23">magic_number<pos:position pos:line="11" pos:column="35"/></name></name> <operator pos:line="11" pos:column="36">!=<pos:position pos:line="11" pos:column="38"/></operator> <name pos:line="11" pos:column="39">MAGIC_NUMBER<pos:position pos:line="11" pos:column="51"/></name></expr>)<pos:position pos:line="11" pos:column="52"/></condition><then pos:line="11" pos:column="52">
  <block pos:line="12" pos:column="3">{
  <expr_stmt><expr><operator pos:line="13" pos:column="3">*<pos:position pos:line="13" pos:column="4"/></operator><name pos:line="13" pos:column="4">errorptr<pos:position pos:line="13" pos:column="12"/></name> <operator pos:line="13" pos:column="13">=<pos:position pos:line="13" pos:column="14"/></operator> <literal type="string" pos:line="13" pos:column="15">"argument is not a compiled regular expression"<pos:position pos:line="13" pos:column="62"/></literal></expr>;<pos:position pos:line="13" pos:column="63"/></expr_stmt>
  <return pos:line="14" pos:column="3">return <expr><name pos:line="14" pos:column="10">NULL<pos:position pos:line="14" pos:column="14"/></name></expr>;<pos:position pos:line="14" pos:column="15"/></return>
  }<pos:position pos:line="15" pos:column="4"/></block></then></if>

<if pos:line="17" pos:column="1">if <condition pos:line="17" pos:column="4">(<expr><operator pos:line="17" pos:column="5">(<pos:position pos:line="17" pos:column="6"/></operator><name pos:line="17" pos:column="6">options<pos:position pos:line="17" pos:column="13"/></name> <operator pos:line="17" pos:column="14">&amp;<pos:position pos:line="17" pos:column="19"/></operator> <operator pos:line="17" pos:column="16">~<pos:position pos:line="17" pos:column="17"/></operator><name pos:line="17" pos:column="17">PUBLIC_STUDY_OPTIONS<pos:position pos:line="17" pos:column="37"/></name><operator pos:line="17" pos:column="37">)<pos:position pos:line="17" pos:column="38"/></operator> <operator pos:line="17" pos:column="39">!=<pos:position pos:line="17" pos:column="41"/></operator> <literal type="number" pos:line="17" pos:column="42">0<pos:position pos:line="17" pos:column="43"/></literal></expr>)<pos:position pos:line="17" pos:column="44"/></condition><then pos:line="17" pos:column="44">
  <block pos:line="18" pos:column="3">{
  <expr_stmt><expr><operator pos:line="19" pos:column="3">*<pos:position pos:line="19" pos:column="4"/></operator><name pos:line="19" pos:column="4">errorptr<pos:position pos:line="19" pos:column="12"/></name> <operator pos:line="19" pos:column="13">=<pos:position pos:line="19" pos:column="14"/></operator> <literal type="string" pos:line="19" pos:column="15">"unknown or incorrect option bit(s) set"<pos:position pos:line="19" pos:column="55"/></literal></expr>;<pos:position pos:line="19" pos:column="56"/></expr_stmt>
  <return pos:line="20" pos:column="3">return <expr><name pos:line="20" pos:column="10">NULL<pos:position pos:line="20" pos:column="14"/></name></expr>;<pos:position pos:line="20" pos:column="15"/></return>
  }<pos:position pos:line="21" pos:column="4"/></block></then></if>

<comment type="block" pos:line="23" pos:column="1">/* For an anchored pattern, or an unchored pattern that has a first char, or a
multiline pattern that matches only at "line starts", no further processing at
present. */</comment>

<if pos:line="27" pos:column="1">if <condition pos:line="27" pos:column="4">(<expr><operator pos:line="27" pos:column="5">(<pos:position pos:line="27" pos:column="6"/></operator><name><name pos:line="27" pos:column="6">re<pos:position pos:line="27" pos:column="8"/></name><operator pos:line="27" pos:column="8">-&gt;<pos:position pos:line="27" pos:column="13"/></operator><name pos:line="27" pos:column="10">options<pos:position pos:line="27" pos:column="17"/></name></name> <operator pos:line="27" pos:column="18">&amp;<pos:position pos:line="27" pos:column="23"/></operator> <operator pos:line="27" pos:column="20">(<pos:position pos:line="27" pos:column="21"/></operator><name pos:line="27" pos:column="21">PCRE_ANCHORED<pos:position pos:line="27" pos:column="34"/></name><operator pos:line="27" pos:column="34">|<pos:position pos:line="27" pos:column="35"/></operator><name pos:line="27" pos:column="35">PCRE_FIRSTSET<pos:position pos:line="27" pos:column="48"/></name><operator pos:line="27" pos:column="48">|<pos:position pos:line="27" pos:column="49"/></operator><name pos:line="27" pos:column="49">PCRE_STARTLINE<pos:position pos:line="27" pos:column="63"/></name><operator pos:line="27" pos:column="63">)<pos:position pos:line="27" pos:column="64"/></operator><operator pos:line="27" pos:column="64">)<pos:position pos:line="27" pos:column="65"/></operator> <operator pos:line="27" pos:column="66">!=<pos:position pos:line="27" pos:column="68"/></operator> <literal type="number" pos:line="27" pos:column="69">0<pos:position pos:line="27" pos:column="70"/></literal></expr>)<pos:position pos:line="27" pos:column="71"/></condition><then pos:line="27" pos:column="71">
  <block type="pseudo"><return pos:line="28" pos:column="3">return <expr><name pos:line="28" pos:column="10">NULL<pos:position pos:line="28" pos:column="14"/></name></expr>;<pos:position pos:line="28" pos:column="15"/></return></block></then></if>

<comment type="block" pos:line="30" pos:column="1">/* Set the character tables in the block which is passed around */</comment>

<expr_stmt><expr><name><name pos:line="32" pos:column="1">compile_block<pos:position pos:line="32" pos:column="14"/></name><operator pos:line="32" pos:column="14">.<pos:position pos:line="32" pos:column="15"/></operator><name pos:line="32" pos:column="15">lcc<pos:position pos:line="32" pos:column="18"/></name></name> <operator pos:line="32" pos:column="19">=<pos:position pos:line="32" pos:column="20"/></operator> <name><name pos:line="32" pos:column="21">re<pos:position pos:line="32" pos:column="23"/></name><operator pos:line="32" pos:column="23">-&gt;<pos:position pos:line="32" pos:column="28"/></operator><name pos:line="32" pos:column="25">tables<pos:position pos:line="32" pos:column="31"/></name></name> <operator pos:line="32" pos:column="32">+<pos:position pos:line="32" pos:column="33"/></operator> <name pos:line="32" pos:column="34">lcc_offset<pos:position pos:line="32" pos:column="44"/></name></expr>;<pos:position pos:line="32" pos:column="45"/></expr_stmt>
<expr_stmt><expr><name><name pos:line="33" pos:column="1">compile_block<pos:position pos:line="33" pos:column="14"/></name><operator pos:line="33" pos:column="14">.<pos:position pos:line="33" pos:column="15"/></operator><name pos:line="33" pos:column="15">fcc<pos:position pos:line="33" pos:column="18"/></name></name> <operator pos:line="33" pos:column="19">=<pos:position pos:line="33" pos:column="20"/></operator> <name><name pos:line="33" pos:column="21">re<pos:position pos:line="33" pos:column="23"/></name><operator pos:line="33" pos:column="23">-&gt;<pos:position pos:line="33" pos:column="28"/></operator><name pos:line="33" pos:column="25">tables<pos:position pos:line="33" pos:column="31"/></name></name> <operator pos:line="33" pos:column="32">+<pos:position pos:line="33" pos:column="33"/></operator> <name pos:line="33" pos:column="34">fcc_offset<pos:position pos:line="33" pos:column="44"/></name></expr>;<pos:position pos:line="33" pos:column="45"/></expr_stmt>
<expr_stmt><expr><name><name pos:line="34" pos:column="1">compile_block<pos:position pos:line="34" pos:column="14"/></name><operator pos:line="34" pos:column="14">.<pos:position pos:line="34" pos:column="15"/></operator><name pos:line="34" pos:column="15">cbits<pos:position pos:line="34" pos:column="20"/></name></name> <operator pos:line="34" pos:column="21">=<pos:position pos:line="34" pos:column="22"/></operator> <name><name pos:line="34" pos:column="23">re<pos:position pos:line="34" pos:column="25"/></name><operator pos:line="34" pos:column="25">-&gt;<pos:position pos:line="34" pos:column="30"/></operator><name pos:line="34" pos:column="27">tables<pos:position pos:line="34" pos:column="33"/></name></name> <operator pos:line="34" pos:column="34">+<pos:position pos:line="34" pos:column="35"/></operator> <name pos:line="34" pos:column="36">cbits_offset<pos:position pos:line="34" pos:column="48"/></name></expr>;<pos:position pos:line="34" pos:column="49"/></expr_stmt>
<expr_stmt><expr><name><name pos:line="35" pos:column="1">compile_block<pos:position pos:line="35" pos:column="14"/></name><operator pos:line="35" pos:column="14">.<pos:position pos:line="35" pos:column="15"/></operator><name pos:line="35" pos:column="15">ctypes<pos:position pos:line="35" pos:column="21"/></name></name> <operator pos:line="35" pos:column="22">=<pos:position pos:line="35" pos:column="23"/></operator> <name><name pos:line="35" pos:column="24">re<pos:position pos:line="35" pos:column="26"/></name><operator pos:line="35" pos:column="26">-&gt;<pos:position pos:line="35" pos:column="31"/></operator><name pos:line="35" pos:column="28">tables<pos:position pos:line="35" pos:column="34"/></name></name> <operator pos:line="35" pos:column="35">+<pos:position pos:line="35" pos:column="36"/></operator> <name pos:line="35" pos:column="37">ctypes_offset<pos:position pos:line="35" pos:column="50"/></name></expr>;<pos:position pos:line="35" pos:column="51"/></expr_stmt>

<comment type="block" pos:line="37" pos:column="1">/* See if we can find a fixed set of initial characters for the pattern. */</comment>

<expr_stmt><expr><call><name pos:line="39" pos:column="1">memset<pos:position pos:line="39" pos:column="7"/></name><argument_list pos:line="39" pos:column="7">(<argument><expr><name pos:line="39" pos:column="8">start_bits<pos:position pos:line="39" pos:column="18"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="39" pos:column="20">0<pos:position pos:line="39" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="39" pos:column="23">32<pos:position pos:line="39" pos:column="25"/></literal> <operator pos:line="39" pos:column="26">*<pos:position pos:line="39" pos:column="27"/></operator> <sizeof pos:line="39" pos:column="28">sizeof<argument_list pos:line="39" pos:column="34">(<argument><expr><name pos:line="39" pos:column="35">uschar<pos:position pos:line="39" pos:column="41"/></name></expr></argument>)<pos:position pos:line="39" pos:column="42"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="39" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="44"/></expr_stmt>
<if pos:line="40" pos:column="1">if <condition pos:line="40" pos:column="4">(<expr><operator pos:line="40" pos:column="5">!<pos:position pos:line="40" pos:column="6"/></operator><call><name pos:line="40" pos:column="6">set_start_bits<pos:position pos:line="40" pos:column="20"/></name><argument_list pos:line="40" pos:column="20">(<argument><expr><name><name pos:line="40" pos:column="21">re<pos:position pos:line="40" pos:column="23"/></name><operator pos:line="40" pos:column="23">-&gt;<pos:position pos:line="40" pos:column="28"/></operator><name pos:line="40" pos:column="25">code<pos:position pos:line="40" pos:column="29"/></name></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="31">start_bits<pos:position pos:line="40" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="40" pos:column="43">(<pos:position pos:line="40" pos:column="44"/></operator><name><name pos:line="40" pos:column="44">re<pos:position pos:line="40" pos:column="46"/></name><operator pos:line="40" pos:column="46">-&gt;<pos:position pos:line="40" pos:column="51"/></operator><name pos:line="40" pos:column="48">options<pos:position pos:line="40" pos:column="55"/></name></name> <operator pos:line="40" pos:column="56">&amp;<pos:position pos:line="40" pos:column="61"/></operator> <name pos:line="40" pos:column="58">PCRE_CASELESS<pos:position pos:line="40" pos:column="71"/></name><operator pos:line="40" pos:column="71">)<pos:position pos:line="40" pos:column="72"/></operator> <operator pos:line="40" pos:column="73">!=<pos:position pos:line="40" pos:column="75"/></operator> <literal type="number" pos:line="40" pos:column="76">0<pos:position pos:line="40" pos:column="77"/></literal></expr></argument>,
  <argument><expr><operator pos:line="41" pos:column="3">&amp;<pos:position pos:line="41" pos:column="8"/></operator><name pos:line="41" pos:column="4">compile_block<pos:position pos:line="41" pos:column="17"/></name></expr></argument>)<pos:position pos:line="41" pos:column="18"/></argument_list></call></expr>)<pos:position pos:line="41" pos:column="19"/></condition><then pos:line="41" pos:column="19"> <block type="pseudo"><return pos:line="41" pos:column="20">return <expr><name pos:line="41" pos:column="27">NULL<pos:position pos:line="41" pos:column="31"/></name></expr>;<pos:position pos:line="41" pos:column="32"/></return></block></then></if>

<comment type="block" pos:line="43" pos:column="1">/* Get an "extra" block and put the information therein. */</comment>

<expr_stmt><expr><name pos:line="45" pos:column="1">extra<pos:position pos:line="45" pos:column="6"/></name> <operator pos:line="45" pos:column="7">=<pos:position pos:line="45" pos:column="8"/></operator> <operator pos:line="45" pos:column="9">(<pos:position pos:line="45" pos:column="10"/></operator><name pos:line="45" pos:column="10">real_pcre_extra<pos:position pos:line="45" pos:column="25"/></name> <operator pos:line="45" pos:column="26">*<pos:position pos:line="45" pos:column="27"/></operator><operator pos:line="45" pos:column="27">)<pos:position pos:line="45" pos:column="28"/></operator><call pos:line="45" pos:column="28">(<name pos:line="45" pos:column="29">pcre_malloc<pos:position pos:line="45" pos:column="40"/></name>)<argument_list pos:line="45" pos:column="41">(<argument><expr><sizeof pos:line="45" pos:column="42">sizeof<argument_list pos:line="45" pos:column="48">(<argument><expr><name pos:line="45" pos:column="49">real_pcre_extra<pos:position pos:line="45" pos:column="64"/></name></expr></argument>)<pos:position pos:line="45" pos:column="65"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="45" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="67"/></expr_stmt>

<if pos:line="47" pos:column="1">if <condition pos:line="47" pos:column="4">(<expr><name pos:line="47" pos:column="5">extra<pos:position pos:line="47" pos:column="10"/></name> <operator pos:line="47" pos:column="11">==<pos:position pos:line="47" pos:column="13"/></operator> <name pos:line="47" pos:column="14">NULL<pos:position pos:line="47" pos:column="18"/></name></expr>)<pos:position pos:line="47" pos:column="19"/></condition><then pos:line="47" pos:column="19">
  <block pos:line="48" pos:column="3">{
  <expr_stmt><expr><operator pos:line="49" pos:column="3">*<pos:position pos:line="49" pos:column="4"/></operator><name pos:line="49" pos:column="4">errorptr<pos:position pos:line="49" pos:column="12"/></name> <operator pos:line="49" pos:column="13">=<pos:position pos:line="49" pos:column="14"/></operator> <literal type="string" pos:line="49" pos:column="15">"failed to get memory"<pos:position pos:line="49" pos:column="37"/></literal></expr>;<pos:position pos:line="49" pos:column="38"/></expr_stmt>
  <return pos:line="50" pos:column="3">return <expr><name pos:line="50" pos:column="10">NULL<pos:position pos:line="50" pos:column="14"/></name></expr>;<pos:position pos:line="50" pos:column="15"/></return>
  }<pos:position pos:line="51" pos:column="4"/></block></then></if>

<expr_stmt><expr><name><name pos:line="53" pos:column="1">extra<pos:position pos:line="53" pos:column="6"/></name><operator pos:line="53" pos:column="6">-&gt;<pos:position pos:line="53" pos:column="11"/></operator><name pos:line="53" pos:column="8">options<pos:position pos:line="53" pos:column="15"/></name></name> <operator pos:line="53" pos:column="16">=<pos:position pos:line="53" pos:column="17"/></operator> <name pos:line="53" pos:column="18">PCRE_STUDY_MAPPED<pos:position pos:line="53" pos:column="35"/></name></expr>;<pos:position pos:line="53" pos:column="36"/></expr_stmt>
<expr_stmt><expr><call><name pos:line="54" pos:column="1">memcpy<pos:position pos:line="54" pos:column="7"/></name><argument_list pos:line="54" pos:column="7">(<argument><expr><name><name pos:line="54" pos:column="8">extra<pos:position pos:line="54" pos:column="13"/></name><operator pos:line="54" pos:column="13">-&gt;<pos:position pos:line="54" pos:column="18"/></operator><name pos:line="54" pos:column="15">start_bits<pos:position pos:line="54" pos:column="25"/></name></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="27">start_bits<pos:position pos:line="54" pos:column="37"/></name></expr></argument>, <argument><expr><sizeof pos:line="54" pos:column="39">sizeof<argument_list pos:line="54" pos:column="45">(<argument><expr><name pos:line="54" pos:column="46">start_bits<pos:position pos:line="54" pos:column="56"/></name></expr></argument>)<pos:position pos:line="54" pos:column="57"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="54" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="59"/></expr_stmt>

<return pos:line="56" pos:column="1">return <expr><operator pos:line="56" pos:column="8">(<pos:position pos:line="56" pos:column="9"/></operator><name pos:line="56" pos:column="9">pcre_extra<pos:position pos:line="56" pos:column="19"/></name> <operator pos:line="56" pos:column="20">*<pos:position pos:line="56" pos:column="21"/></operator><operator pos:line="56" pos:column="21">)<pos:position pos:line="56" pos:column="22"/></operator><name pos:line="56" pos:column="22">extra<pos:position pos:line="56" pos:column="27"/></name></expr>;<pos:position pos:line="56" pos:column="28"/></return>
}<pos:position pos:line="57" pos:column="2"/></block></function></unit>
