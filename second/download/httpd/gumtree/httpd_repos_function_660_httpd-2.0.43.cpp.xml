<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_660_httpd-2.0.43.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">bio_bucket_write<pos:position pos:line="1" pos:column="28"/></name><parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><name pos:line="1" pos:column="29">BIO<pos:position pos:line="1" pos:column="32"/></name> <modifier pos:line="1" pos:column="33">*<pos:position pos:line="1" pos:column="34"/></modifier></type><name pos:line="1" pos:column="34">bio<pos:position pos:line="1" pos:column="37"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="39">const<pos:position pos:line="1" pos:column="44"/></specifier> <name pos:line="1" pos:column="45">char<pos:position pos:line="1" pos:column="49"/></name> <modifier pos:line="1" pos:column="50">*<pos:position pos:line="1" pos:column="51"/></modifier></type><name pos:line="1" pos:column="51">in<pos:position pos:line="1" pos:column="53"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="55">int<pos:position pos:line="1" pos:column="58"/></name></type> <name pos:line="1" pos:column="59">inl<pos:position pos:line="1" pos:column="62"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="63"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">BIO_bucket_t<pos:position pos:line="3" pos:column="17"/></name> <modifier pos:line="3" pos:column="18">*<pos:position pos:line="3" pos:column="19"/></modifier></type><name pos:line="3" pos:column="19">b<pos:position pos:line="3" pos:column="20"/></name> <init pos:line="3" pos:column="21">= <expr><call><name pos:line="3" pos:column="23">BIO_bucket_ptr<pos:position pos:line="3" pos:column="37"/></name><argument_list pos:line="3" pos:column="37">(<argument><expr><name pos:line="3" pos:column="38">bio<pos:position pos:line="3" pos:column="41"/></name></expr></argument>)<pos:position pos:line="3" pos:column="42"/></argument_list></call></expr></init></decl>;<pos:position pos:line="3" pos:column="43"/></decl_stmt>

    <comment type="block" pos:line="5" pos:column="5">/* when handshaking we'll have a small number of bytes.
     * max size SSL will pass us here is about 16k.
     * (16413 bytes to be exact)
     */</comment>
    <expr_stmt><expr><call><name pos:line="9" pos:column="5">BIO_clear_retry_flags<pos:position pos:line="9" pos:column="26"/></name><argument_list pos:line="9" pos:column="26">(<argument><expr><name pos:line="9" pos:column="27">bio<pos:position pos:line="9" pos:column="30"/></name></expr></argument>)<pos:position pos:line="9" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="32"/></expr_stmt>

    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><operator pos:line="11" pos:column="9">!<pos:position pos:line="11" pos:column="10"/></operator><name><name pos:line="11" pos:column="10">b<pos:position pos:line="11" pos:column="11"/></name><operator pos:line="11" pos:column="11">-&gt;<pos:position pos:line="11" pos:column="16"/></operator><name pos:line="11" pos:column="13">length<pos:position pos:line="11" pos:column="19"/></name></name> <operator pos:line="11" pos:column="20">&amp;&amp;<pos:position pos:line="11" pos:column="30"/></operator> <operator pos:line="11" pos:column="23">(<pos:position pos:line="11" pos:column="24"/></operator><name pos:line="11" pos:column="24">inl<pos:position pos:line="11" pos:column="27"/></name> <operator pos:line="11" pos:column="28">+<pos:position pos:line="11" pos:column="29"/></operator> <name><name pos:line="11" pos:column="30">b<pos:position pos:line="11" pos:column="31"/></name><operator pos:line="11" pos:column="31">-&gt;<pos:position pos:line="11" pos:column="36"/></operator><name pos:line="11" pos:column="33">blen<pos:position pos:line="11" pos:column="37"/></name></name> <operator pos:line="11" pos:column="38">&lt;<pos:position pos:line="11" pos:column="42"/></operator> <sizeof pos:line="11" pos:column="40">sizeof<argument_list pos:line="11" pos:column="46">(<argument><expr><name><name pos:line="11" pos:column="47">b<pos:position pos:line="11" pos:column="48"/></name><operator pos:line="11" pos:column="48">-&gt;<pos:position pos:line="11" pos:column="53"/></operator><name pos:line="11" pos:column="50">buffer<pos:position pos:line="11" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="11" pos:column="57"/></argument_list></sizeof><operator pos:line="11" pos:column="57">)<pos:position pos:line="11" pos:column="58"/></operator></expr>)<pos:position pos:line="11" pos:column="59"/></condition><then pos:line="11" pos:column="59"> <block pos:line="11" pos:column="60">{
        <comment type="block" pos:line="12" pos:column="9">/* the first two SSL_writes (of 1024 and 261 bytes)
         * need to be in the same packet (vec[0].iov_base)
         */</comment>
        <comment type="block" pos:line="15" pos:column="9">/* XXX: could use apr_brigade_write() to make code look cleaner
         * but this way we avoid the malloc(APR_BUCKET_BUFF_SIZE)
         * and free() of it later
         */</comment>
        <expr_stmt><expr><call><name pos:line="19" pos:column="9">memcpy<pos:position pos:line="19" pos:column="15"/></name><argument_list pos:line="19" pos:column="15">(<argument><expr><operator pos:line="19" pos:column="16">&amp;<pos:position pos:line="19" pos:column="21"/></operator><name><name pos:line="19" pos:column="17">b<pos:position pos:line="19" pos:column="18"/></name><operator pos:line="19" pos:column="18">-&gt;<pos:position pos:line="19" pos:column="23"/></operator><name pos:line="19" pos:column="20">buffer<pos:position pos:line="19" pos:column="26"/></name><index pos:line="19" pos:column="26">[<expr><name><name pos:line="19" pos:column="27">b<pos:position pos:line="19" pos:column="28"/></name><operator pos:line="19" pos:column="28">-&gt;<pos:position pos:line="19" pos:column="33"/></operator><name pos:line="19" pos:column="30">blen<pos:position pos:line="19" pos:column="34"/></name></name></expr>]<pos:position pos:line="19" pos:column="35"/></index></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="37">in<pos:position pos:line="19" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="41">inl<pos:position pos:line="19" pos:column="44"/></name></expr></argument>)<pos:position pos:line="19" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="46"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="20" pos:column="9">b<pos:position pos:line="20" pos:column="10"/></name><operator pos:line="20" pos:column="10">-&gt;<pos:position pos:line="20" pos:column="15"/></operator><name pos:line="20" pos:column="12">blen<pos:position pos:line="20" pos:column="16"/></name></name> <operator pos:line="20" pos:column="17">+=<pos:position pos:line="20" pos:column="19"/></operator> <name pos:line="20" pos:column="20">inl<pos:position pos:line="20" pos:column="23"/></name></expr>;<pos:position pos:line="20" pos:column="24"/></expr_stmt>
    }<pos:position pos:line="21" pos:column="6"/></block></then>
    <else pos:line="22" pos:column="5">else <block pos:line="22" pos:column="10">{
        <comment type="block" pos:line="23" pos:column="9">/* pass along the encrypted data
         * need to flush since we're using SSL's malloc-ed buffer 
         * which will be overwritten once we leave here
         */</comment>
        <decl_stmt><decl><type><name pos:line="27" pos:column="9">apr_bucket<pos:position pos:line="27" pos:column="19"/></name> <modifier pos:line="27" pos:column="20">*<pos:position pos:line="27" pos:column="21"/></modifier></type><name pos:line="27" pos:column="21">bucket<pos:position pos:line="27" pos:column="27"/></name> <init pos:line="27" pos:column="28">= <expr><call><name pos:line="27" pos:column="30">apr_bucket_transient_create<pos:position pos:line="27" pos:column="57"/></name><argument_list pos:line="27" pos:column="57">(<argument><expr><name pos:line="27" pos:column="58">in<pos:position pos:line="27" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="62">inl<pos:position pos:line="27" pos:column="65"/></name></expr></argument>,
                                                         <argument><expr><name><name pos:line="28" pos:column="58">b<pos:position pos:line="28" pos:column="59"/></name><operator pos:line="28" pos:column="59">-&gt;<pos:position pos:line="28" pos:column="64"/></operator><name pos:line="28" pos:column="61">bb<pos:position pos:line="28" pos:column="63"/></name><operator pos:line="28" pos:column="63">-&gt;<pos:position pos:line="28" pos:column="68"/></operator><name pos:line="28" pos:column="65">bucket_alloc<pos:position pos:line="28" pos:column="77"/></name></name></expr></argument>)<pos:position pos:line="28" pos:column="78"/></argument_list></call></expr></init></decl>;<pos:position pos:line="28" pos:column="79"/></decl_stmt>

        <expr_stmt><expr><name><name pos:line="30" pos:column="9">b<pos:position pos:line="30" pos:column="10"/></name><operator pos:line="30" pos:column="10">-&gt;<pos:position pos:line="30" pos:column="15"/></operator><name pos:line="30" pos:column="12">length<pos:position pos:line="30" pos:column="18"/></name></name> <operator pos:line="30" pos:column="19">+=<pos:position pos:line="30" pos:column="21"/></operator> <name pos:line="30" pos:column="22">inl<pos:position pos:line="30" pos:column="25"/></name></expr>;<pos:position pos:line="30" pos:column="26"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="31" pos:column="9">APR_BRIGADE_INSERT_TAIL<pos:position pos:line="31" pos:column="32"/></name><argument_list pos:line="31" pos:column="32">(<argument><expr><name><name pos:line="31" pos:column="33">b<pos:position pos:line="31" pos:column="34"/></name><operator pos:line="31" pos:column="34">-&gt;<pos:position pos:line="31" pos:column="39"/></operator><name pos:line="31" pos:column="36">bb<pos:position pos:line="31" pos:column="38"/></name></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="40">bucket<pos:position pos:line="31" pos:column="46"/></name></expr></argument>)<pos:position pos:line="31" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="48"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="33" pos:column="9">BIO_bucket_flush<pos:position pos:line="33" pos:column="25"/></name><argument_list pos:line="33" pos:column="25">(<argument><expr><name pos:line="33" pos:column="26">bio<pos:position pos:line="33" pos:column="29"/></name></expr></argument>)<pos:position pos:line="33" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="31"/></expr_stmt>
    }<pos:position pos:line="34" pos:column="6"/></block></else></if>

    <return pos:line="36" pos:column="5">return <expr><name pos:line="36" pos:column="12">inl<pos:position pos:line="36" pos:column="15"/></name></expr>;<pos:position pos:line="36" pos:column="16"/></return>
}<pos:position pos:line="37" pos:column="2"/></block></function></unit>
