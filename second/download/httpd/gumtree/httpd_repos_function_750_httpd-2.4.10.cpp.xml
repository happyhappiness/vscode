<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_750_httpd-2.4.10.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">apr_status_t<pos:position pos:line="1" pos:column="20"/></name></type> <name pos:line="1" pos:column="21">ssl_io_filter_buffer<pos:position pos:line="1" pos:column="41"/></name><parameter_list pos:line="1" pos:column="41">(<parameter><decl><type><name pos:line="1" pos:column="42">ap_filter_t<pos:position pos:line="1" pos:column="53"/></name> <modifier pos:line="1" pos:column="54">*<pos:position pos:line="1" pos:column="55"/></modifier></type><name pos:line="1" pos:column="55">f<pos:position pos:line="1" pos:column="56"/></name></decl></parameter>,
                                         <parameter><decl><type><name pos:line="2" pos:column="42">apr_bucket_brigade<pos:position pos:line="2" pos:column="60"/></name> <modifier pos:line="2" pos:column="61">*<pos:position pos:line="2" pos:column="62"/></modifier></type><name pos:line="2" pos:column="62">bb<pos:position pos:line="2" pos:column="64"/></name></decl></parameter>,
                                         <parameter><decl><type><name pos:line="3" pos:column="42">ap_input_mode_t<pos:position pos:line="3" pos:column="57"/></name></type> <name pos:line="3" pos:column="58">mode<pos:position pos:line="3" pos:column="62"/></name></decl></parameter>,
                                         <parameter><decl><type><name pos:line="4" pos:column="42">apr_read_type_e<pos:position pos:line="4" pos:column="57"/></name></type> <name pos:line="4" pos:column="58">block<pos:position pos:line="4" pos:column="63"/></name></decl></parameter>,
                                         <parameter><decl><type><name pos:line="5" pos:column="42">apr_off_t<pos:position pos:line="5" pos:column="51"/></name></type> <name pos:line="5" pos:column="52">bytes<pos:position pos:line="5" pos:column="57"/></name></decl></parameter>)<pos:position pos:line="5" pos:column="58"/></parameter_list>
<block pos:line="6" pos:column="1">{
    <decl_stmt><decl><type><name><name pos:line="7" pos:column="5">struct<pos:position pos:line="7" pos:column="11"/></name> <name pos:line="7" pos:column="12">modssl_buffer_ctx<pos:position pos:line="7" pos:column="29"/></name></name> <modifier pos:line="7" pos:column="30">*<pos:position pos:line="7" pos:column="31"/></modifier></type><name pos:line="7" pos:column="31">ctx<pos:position pos:line="7" pos:column="34"/></name> <init pos:line="7" pos:column="35">= <expr><name><name pos:line="7" pos:column="37">f<pos:position pos:line="7" pos:column="38"/></name><operator pos:line="7" pos:column="38">-&gt;<pos:position pos:line="7" pos:column="43"/></operator><name pos:line="7" pos:column="40">ctx<pos:position pos:line="7" pos:column="43"/></name></name></expr></init></decl>;<pos:position pos:line="7" pos:column="44"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">apr_status_t<pos:position pos:line="8" pos:column="17"/></name></type> <name pos:line="8" pos:column="18">rv<pos:position pos:line="8" pos:column="20"/></name></decl>;<pos:position pos:line="8" pos:column="21"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="10" pos:column="5">ap_log_cerror<pos:position pos:line="10" pos:column="18"/></name><argument_list pos:line="10" pos:column="18">(<argument><expr><name pos:line="10" pos:column="19">APLOG_MARK<pos:position pos:line="10" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="31">APLOG_TRACE4<pos:position pos:line="10" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="10" pos:column="45">0<pos:position pos:line="10" pos:column="46"/></literal></expr></argument>, <argument><expr><name><name pos:line="10" pos:column="48">f<pos:position pos:line="10" pos:column="49"/></name><operator pos:line="10" pos:column="49">-&gt;<pos:position pos:line="10" pos:column="54"/></operator><name pos:line="10" pos:column="51">c<pos:position pos:line="10" pos:column="52"/></name></name></expr></argument>,
                  <argument><expr><literal type="string" pos:line="11" pos:column="19">"read from buffered SSL brigade, mode %d, "<pos:position pos:line="11" pos:column="62"/></literal>
                  <literal type="string" pos:line="12" pos:column="19">"%"<pos:position pos:line="12" pos:column="22"/></literal> <name pos:line="12" pos:column="23">APR_OFF_T_FMT<pos:position pos:line="12" pos:column="36"/></name> <literal type="string" pos:line="12" pos:column="37">" bytes"<pos:position pos:line="12" pos:column="45"/></literal></expr></argument>,
                  <argument><expr><name pos:line="13" pos:column="19">mode<pos:position pos:line="13" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="25">bytes<pos:position pos:line="13" pos:column="30"/></name></expr></argument>)<pos:position pos:line="13" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="32"/></expr_stmt>

    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><name pos:line="15" pos:column="9">mode<pos:position pos:line="15" pos:column="13"/></name> <operator pos:line="15" pos:column="14">!=<pos:position pos:line="15" pos:column="16"/></operator> <name pos:line="15" pos:column="17">AP_MODE_READBYTES<pos:position pos:line="15" pos:column="34"/></name> <operator pos:line="15" pos:column="35">&amp;&amp;<pos:position pos:line="15" pos:column="45"/></operator> <name pos:line="15" pos:column="38">mode<pos:position pos:line="15" pos:column="42"/></name> <operator pos:line="15" pos:column="43">!=<pos:position pos:line="15" pos:column="45"/></operator> <name pos:line="15" pos:column="46">AP_MODE_GETLINE<pos:position pos:line="15" pos:column="61"/></name></expr>)<pos:position pos:line="15" pos:column="62"/></condition><then pos:line="15" pos:column="62"> <block pos:line="15" pos:column="63">{
        <return pos:line="16" pos:column="9">return <expr><name pos:line="16" pos:column="16">APR_ENOTIMPL<pos:position pos:line="16" pos:column="28"/></name></expr>;<pos:position pos:line="16" pos:column="29"/></return>
    }<pos:position pos:line="17" pos:column="6"/></block></then></if>

    <if pos:line="19" pos:column="5">if <condition pos:line="19" pos:column="8">(<expr><call><name pos:line="19" pos:column="9">APR_BRIGADE_EMPTY<pos:position pos:line="19" pos:column="26"/></name><argument_list pos:line="19" pos:column="26">(<argument><expr><name><name pos:line="19" pos:column="27">ctx<pos:position pos:line="19" pos:column="30"/></name><operator pos:line="19" pos:column="30">-&gt;<pos:position pos:line="19" pos:column="35"/></operator><name pos:line="19" pos:column="32">bb<pos:position pos:line="19" pos:column="34"/></name></name></expr></argument>)<pos:position pos:line="19" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="19" pos:column="36"/></condition><then pos:line="19" pos:column="36"> <block pos:line="19" pos:column="37">{
        <comment type="block" pos:line="20" pos:column="9">/* Suprisingly (and perhaps, wrongly), the request body can be
         * pulled from the input filter stack more than once; a
         * handler may read it, and ap_discard_request_body() will
         * attempt to do so again after *every* request.  So input
         * filters must be prepared to give up an EOS if invoked after
         * initially reading the request. The HTTP_IN filter does this
         * with its -&gt;eos_sent flag. */</comment>

        <expr_stmt><expr><call><name pos:line="28" pos:column="9">APR_BRIGADE_INSERT_TAIL<pos:position pos:line="28" pos:column="32"/></name><argument_list pos:line="28" pos:column="32">(<argument><expr><name pos:line="28" pos:column="33">bb<pos:position pos:line="28" pos:column="35"/></name></expr></argument>, <argument><expr><call><name pos:line="28" pos:column="37">apr_bucket_eos_create<pos:position pos:line="28" pos:column="58"/></name><argument_list pos:line="28" pos:column="58">(<argument><expr><name><name pos:line="28" pos:column="59">f<pos:position pos:line="28" pos:column="60"/></name><operator pos:line="28" pos:column="60">-&gt;<pos:position pos:line="28" pos:column="65"/></operator><name pos:line="28" pos:column="62">c<pos:position pos:line="28" pos:column="63"/></name><operator pos:line="28" pos:column="63">-&gt;<pos:position pos:line="28" pos:column="68"/></operator><name pos:line="28" pos:column="65">bucket_alloc<pos:position pos:line="28" pos:column="77"/></name></name></expr></argument>)<pos:position pos:line="28" pos:column="78"/></argument_list></call></expr></argument>)<pos:position pos:line="28" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="80"/></expr_stmt>
        <return pos:line="29" pos:column="9">return <expr><name pos:line="29" pos:column="16">APR_SUCCESS<pos:position pos:line="29" pos:column="27"/></name></expr>;<pos:position pos:line="29" pos:column="28"/></return>
    }<pos:position pos:line="30" pos:column="6"/></block></then></if>

    <if pos:line="32" pos:column="5">if <condition pos:line="32" pos:column="8">(<expr><name pos:line="32" pos:column="9">mode<pos:position pos:line="32" pos:column="13"/></name> <operator pos:line="32" pos:column="14">==<pos:position pos:line="32" pos:column="16"/></operator> <name pos:line="32" pos:column="17">AP_MODE_READBYTES<pos:position pos:line="32" pos:column="34"/></name></expr>)<pos:position pos:line="32" pos:column="35"/></condition><then pos:line="32" pos:column="35"> <block pos:line="32" pos:column="36">{
        <decl_stmt><decl><type><name pos:line="33" pos:column="9">apr_bucket<pos:position pos:line="33" pos:column="19"/></name> <modifier pos:line="33" pos:column="20">*<pos:position pos:line="33" pos:column="21"/></modifier></type><name pos:line="33" pos:column="21">e<pos:position pos:line="33" pos:column="22"/></name></decl>;<pos:position pos:line="33" pos:column="23"/></decl_stmt>

        <comment type="block" pos:line="35" pos:column="9">/* Partition the buffered brigade. */</comment>
        <expr_stmt><expr><name pos:line="36" pos:column="9">rv<pos:position pos:line="36" pos:column="11"/></name> <operator pos:line="36" pos:column="12">=<pos:position pos:line="36" pos:column="13"/></operator> <call><name pos:line="36" pos:column="14">apr_brigade_partition<pos:position pos:line="36" pos:column="35"/></name><argument_list pos:line="36" pos:column="35">(<argument><expr><name><name pos:line="36" pos:column="36">ctx<pos:position pos:line="36" pos:column="39"/></name><operator pos:line="36" pos:column="39">-&gt;<pos:position pos:line="36" pos:column="44"/></operator><name pos:line="36" pos:column="41">bb<pos:position pos:line="36" pos:column="43"/></name></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="45">bytes<pos:position pos:line="36" pos:column="50"/></name></expr></argument>, <argument><expr><operator pos:line="36" pos:column="52">&amp;<pos:position pos:line="36" pos:column="57"/></operator><name pos:line="36" pos:column="53">e<pos:position pos:line="36" pos:column="54"/></name></expr></argument>)<pos:position pos:line="36" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="56"/></expr_stmt>
        <if pos:line="37" pos:column="9">if <condition pos:line="37" pos:column="12">(<expr><name pos:line="37" pos:column="13">rv<pos:position pos:line="37" pos:column="15"/></name> <operator pos:line="37" pos:column="16">&amp;&amp;<pos:position pos:line="37" pos:column="26"/></operator> <name pos:line="37" pos:column="19">rv<pos:position pos:line="37" pos:column="21"/></name> <operator pos:line="37" pos:column="22">!=<pos:position pos:line="37" pos:column="24"/></operator> <name pos:line="37" pos:column="25">APR_INCOMPLETE<pos:position pos:line="37" pos:column="39"/></name></expr>)<pos:position pos:line="37" pos:column="40"/></condition><then pos:line="37" pos:column="40"> <block pos:line="37" pos:column="41">{
            <expr_stmt><expr><call><name pos:line="38" pos:column="13">ap_log_cerror<pos:position pos:line="38" pos:column="26"/></name><argument_list pos:line="38" pos:column="26">(<argument><expr><name pos:line="38" pos:column="27">APLOG_MARK<pos:position pos:line="38" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="39">APLOG_ERR<pos:position pos:line="38" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="50">rv<pos:position pos:line="38" pos:column="52"/></name></expr></argument>, <argument><expr><name><name pos:line="38" pos:column="54">f<pos:position pos:line="38" pos:column="55"/></name><operator pos:line="38" pos:column="55">-&gt;<pos:position pos:line="38" pos:column="60"/></operator><name pos:line="38" pos:column="57">c<pos:position pos:line="38" pos:column="58"/></name></name></expr></argument>, <argument><expr><call><name pos:line="38" pos:column="60">APLOGNO<pos:position pos:line="38" pos:column="67"/></name><argument_list pos:line="38" pos:column="67">(<argument><expr><literal type="number" pos:line="38" pos:column="68">02019<pos:position pos:line="38" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="38" pos:column="74"/></argument_list></call>
                          <literal type="string" pos:line="39" pos:column="27">"could not partition buffered SSL brigade"<pos:position pos:line="39" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="71"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="40" pos:column="13">ap_remove_input_filter<pos:position pos:line="40" pos:column="35"/></name><argument_list pos:line="40" pos:column="35">(<argument><expr><name pos:line="40" pos:column="36">f<pos:position pos:line="40" pos:column="37"/></name></expr></argument>)<pos:position pos:line="40" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="39"/></expr_stmt>
            <return pos:line="41" pos:column="13">return <expr><name pos:line="41" pos:column="20">rv<pos:position pos:line="41" pos:column="22"/></name></expr>;<pos:position pos:line="41" pos:column="23"/></return>
        }<pos:position pos:line="42" pos:column="10"/></block></then></if>

        <comment type="block" pos:line="44" pos:column="9">/* If the buffered brigade contains less then the requested
         * length, just pass it all back. */</comment>
        <if pos:line="46" pos:column="9">if <condition pos:line="46" pos:column="12">(<expr><name pos:line="46" pos:column="13">rv<pos:position pos:line="46" pos:column="15"/></name> <operator pos:line="46" pos:column="16">==<pos:position pos:line="46" pos:column="18"/></operator> <name pos:line="46" pos:column="19">APR_INCOMPLETE<pos:position pos:line="46" pos:column="33"/></name></expr>)<pos:position pos:line="46" pos:column="34"/></condition><then pos:line="46" pos:column="34"> <block pos:line="46" pos:column="35">{
            <expr_stmt><expr><call><name pos:line="47" pos:column="13">APR_BRIGADE_CONCAT<pos:position pos:line="47" pos:column="31"/></name><argument_list pos:line="47" pos:column="31">(<argument><expr><name pos:line="47" pos:column="32">bb<pos:position pos:line="47" pos:column="34"/></name></expr></argument>, <argument><expr><name><name pos:line="47" pos:column="36">ctx<pos:position pos:line="47" pos:column="39"/></name><operator pos:line="47" pos:column="39">-&gt;<pos:position pos:line="47" pos:column="44"/></operator><name pos:line="47" pos:column="41">bb<pos:position pos:line="47" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="47" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="45"/></expr_stmt>
        }<pos:position pos:line="48" pos:column="10"/></block></then> <else pos:line="48" pos:column="11">else <block pos:line="48" pos:column="16">{
            <decl_stmt><decl><type><name pos:line="49" pos:column="13">apr_bucket<pos:position pos:line="49" pos:column="23"/></name> <modifier pos:line="49" pos:column="24">*<pos:position pos:line="49" pos:column="25"/></modifier></type><name pos:line="49" pos:column="25">d<pos:position pos:line="49" pos:column="26"/></name> <init pos:line="49" pos:column="27">= <expr><call><name pos:line="49" pos:column="29">APR_BRIGADE_FIRST<pos:position pos:line="49" pos:column="46"/></name><argument_list pos:line="49" pos:column="46">(<argument><expr><name><name pos:line="49" pos:column="47">ctx<pos:position pos:line="49" pos:column="50"/></name><operator pos:line="49" pos:column="50">-&gt;<pos:position pos:line="49" pos:column="55"/></operator><name pos:line="49" pos:column="52">bb<pos:position pos:line="49" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="49" pos:column="55"/></argument_list></call></expr></init></decl>;<pos:position pos:line="49" pos:column="56"/></decl_stmt>

            <expr_stmt><expr><name pos:line="51" pos:column="13">e<pos:position pos:line="51" pos:column="14"/></name> <operator pos:line="51" pos:column="15">=<pos:position pos:line="51" pos:column="16"/></operator> <call><name pos:line="51" pos:column="17">APR_BUCKET_PREV<pos:position pos:line="51" pos:column="32"/></name><argument_list pos:line="51" pos:column="32">(<argument><expr><name pos:line="51" pos:column="33">e<pos:position pos:line="51" pos:column="34"/></name></expr></argument>)<pos:position pos:line="51" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="36"/></expr_stmt>

            <comment type="block" pos:line="53" pos:column="13">/* Unsplice the partitioned segment and move it into the
             * passed-in brigade; no convenient way to do this with
             * the APR_BRIGADE_* macros. */</comment>
            <expr_stmt><expr><call><name pos:line="56" pos:column="13">APR_RING_UNSPLICE<pos:position pos:line="56" pos:column="30"/></name><argument_list pos:line="56" pos:column="30">(<argument><expr><name pos:line="56" pos:column="31">d<pos:position pos:line="56" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="34">e<pos:position pos:line="56" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="37">link<pos:position pos:line="56" pos:column="41"/></name></expr></argument>)<pos:position pos:line="56" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="43"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="57" pos:column="13">APR_RING_SPLICE_HEAD<pos:position pos:line="57" pos:column="33"/></name><argument_list pos:line="57" pos:column="33">(<argument><expr><operator pos:line="57" pos:column="34">&amp;<pos:position pos:line="57" pos:column="39"/></operator><name><name pos:line="57" pos:column="35">bb<pos:position pos:line="57" pos:column="37"/></name><operator pos:line="57" pos:column="37">-&gt;<pos:position pos:line="57" pos:column="42"/></operator><name pos:line="57" pos:column="39">list<pos:position pos:line="57" pos:column="43"/></name></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="45">d<pos:position pos:line="57" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="48">e<pos:position pos:line="57" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="51">apr_bucket<pos:position pos:line="57" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="63">link<pos:position pos:line="57" pos:column="67"/></name></expr></argument>)<pos:position pos:line="57" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="69"/></expr_stmt>

            <expr_stmt><expr><call><name pos:line="59" pos:column="13">APR_BRIGADE_CHECK_CONSISTENCY<pos:position pos:line="59" pos:column="42"/></name><argument_list pos:line="59" pos:column="42">(<argument><expr><name pos:line="59" pos:column="43">bb<pos:position pos:line="59" pos:column="45"/></name></expr></argument>)<pos:position pos:line="59" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="47"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="60" pos:column="13">APR_BRIGADE_CHECK_CONSISTENCY<pos:position pos:line="60" pos:column="42"/></name><argument_list pos:line="60" pos:column="42">(<argument><expr><name><name pos:line="60" pos:column="43">ctx<pos:position pos:line="60" pos:column="46"/></name><operator pos:line="60" pos:column="46">-&gt;<pos:position pos:line="60" pos:column="51"/></operator><name pos:line="60" pos:column="48">bb<pos:position pos:line="60" pos:column="50"/></name></name></expr></argument>)<pos:position pos:line="60" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="52"/></expr_stmt>
        }<pos:position pos:line="61" pos:column="10"/></block></else></if>
    }<pos:position pos:line="62" pos:column="6"/></block></then>
    <else pos:line="63" pos:column="5">else <block pos:line="63" pos:column="10">{
        <comment type="block" pos:line="64" pos:column="9">/* Split a line into the passed-in brigade. */</comment>
        <expr_stmt><expr><name pos:line="65" pos:column="9">rv<pos:position pos:line="65" pos:column="11"/></name> <operator pos:line="65" pos:column="12">=<pos:position pos:line="65" pos:column="13"/></operator> <call><name pos:line="65" pos:column="14">apr_brigade_split_line<pos:position pos:line="65" pos:column="36"/></name><argument_list pos:line="65" pos:column="36">(<argument><expr><name pos:line="65" pos:column="37">bb<pos:position pos:line="65" pos:column="39"/></name></expr></argument>, <argument><expr><name><name pos:line="65" pos:column="41">ctx<pos:position pos:line="65" pos:column="44"/></name><operator pos:line="65" pos:column="44">-&gt;<pos:position pos:line="65" pos:column="49"/></operator><name pos:line="65" pos:column="46">bb<pos:position pos:line="65" pos:column="48"/></name></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="50">block<pos:position pos:line="65" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="57">bytes<pos:position pos:line="65" pos:column="62"/></name></expr></argument>)<pos:position pos:line="65" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="64"/></expr_stmt>

        <if pos:line="67" pos:column="9">if <condition pos:line="67" pos:column="12">(<expr><name pos:line="67" pos:column="13">rv<pos:position pos:line="67" pos:column="15"/></name></expr>)<pos:position pos:line="67" pos:column="16"/></condition><then pos:line="67" pos:column="16"> <block pos:line="67" pos:column="17">{
            <expr_stmt><expr><call><name pos:line="68" pos:column="13">ap_log_cerror<pos:position pos:line="68" pos:column="26"/></name><argument_list pos:line="68" pos:column="26">(<argument><expr><name pos:line="68" pos:column="27">APLOG_MARK<pos:position pos:line="68" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="68" pos:column="39">APLOG_ERR<pos:position pos:line="68" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="68" pos:column="50">rv<pos:position pos:line="68" pos:column="52"/></name></expr></argument>, <argument><expr><name><name pos:line="68" pos:column="54">f<pos:position pos:line="68" pos:column="55"/></name><operator pos:line="68" pos:column="55">-&gt;<pos:position pos:line="68" pos:column="60"/></operator><name pos:line="68" pos:column="57">c<pos:position pos:line="68" pos:column="58"/></name></name></expr></argument>, <argument><expr><call><name pos:line="68" pos:column="60">APLOGNO<pos:position pos:line="68" pos:column="67"/></name><argument_list pos:line="68" pos:column="67">(<argument><expr><literal type="number" pos:line="68" pos:column="68">02020<pos:position pos:line="68" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="68" pos:column="74"/></argument_list></call>
                          <literal type="string" pos:line="69" pos:column="27">"could not split line from buffered SSL brigade"<pos:position pos:line="69" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="69" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="77"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="70" pos:column="13">ap_remove_input_filter<pos:position pos:line="70" pos:column="35"/></name><argument_list pos:line="70" pos:column="35">(<argument><expr><name pos:line="70" pos:column="36">f<pos:position pos:line="70" pos:column="37"/></name></expr></argument>)<pos:position pos:line="70" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="39"/></expr_stmt>
            <return pos:line="71" pos:column="13">return <expr><name pos:line="71" pos:column="20">rv<pos:position pos:line="71" pos:column="22"/></name></expr>;<pos:position pos:line="71" pos:column="23"/></return>
        }<pos:position pos:line="72" pos:column="10"/></block></then></if>
    }<pos:position pos:line="73" pos:column="6"/></block></else></if>

    <if pos:line="75" pos:column="5">if <condition pos:line="75" pos:column="8">(<expr><call><name pos:line="75" pos:column="9">APR_BRIGADE_EMPTY<pos:position pos:line="75" pos:column="26"/></name><argument_list pos:line="75" pos:column="26">(<argument><expr><name><name pos:line="75" pos:column="27">ctx<pos:position pos:line="75" pos:column="30"/></name><operator pos:line="75" pos:column="30">-&gt;<pos:position pos:line="75" pos:column="35"/></operator><name pos:line="75" pos:column="32">bb<pos:position pos:line="75" pos:column="34"/></name></name></expr></argument>)<pos:position pos:line="75" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="75" pos:column="36"/></condition><then pos:line="75" pos:column="36"> <block pos:line="75" pos:column="37">{
        <decl_stmt><decl><type><name pos:line="76" pos:column="9">apr_bucket<pos:position pos:line="76" pos:column="19"/></name> <modifier pos:line="76" pos:column="20">*<pos:position pos:line="76" pos:column="21"/></modifier></type><name pos:line="76" pos:column="21">e<pos:position pos:line="76" pos:column="22"/></name> <init pos:line="76" pos:column="23">= <expr><call><name pos:line="76" pos:column="25">APR_BRIGADE_LAST<pos:position pos:line="76" pos:column="41"/></name><argument_list pos:line="76" pos:column="41">(<argument><expr><name pos:line="76" pos:column="42">bb<pos:position pos:line="76" pos:column="44"/></name></expr></argument>)<pos:position pos:line="76" pos:column="45"/></argument_list></call></expr></init></decl>;<pos:position pos:line="76" pos:column="46"/></decl_stmt>

        <comment type="block" pos:line="78" pos:column="9">/* Ensure that the brigade is terminated by an EOS if the
         * buffered request body has been entirely consumed. */</comment>
        <if pos:line="80" pos:column="9">if <condition pos:line="80" pos:column="12">(<expr><name pos:line="80" pos:column="13">e<pos:position pos:line="80" pos:column="14"/></name> <operator pos:line="80" pos:column="15">==<pos:position pos:line="80" pos:column="17"/></operator> <call><name pos:line="80" pos:column="18">APR_BRIGADE_SENTINEL<pos:position pos:line="80" pos:column="38"/></name><argument_list pos:line="80" pos:column="38">(<argument><expr><name pos:line="80" pos:column="39">bb<pos:position pos:line="80" pos:column="41"/></name></expr></argument>)<pos:position pos:line="80" pos:column="42"/></argument_list></call> <operator pos:line="80" pos:column="43">||<pos:position pos:line="80" pos:column="45"/></operator> <operator pos:line="80" pos:column="46">!<pos:position pos:line="80" pos:column="47"/></operator><call><name pos:line="80" pos:column="47">APR_BUCKET_IS_EOS<pos:position pos:line="80" pos:column="64"/></name><argument_list pos:line="80" pos:column="64">(<argument><expr><name pos:line="80" pos:column="65">e<pos:position pos:line="80" pos:column="66"/></name></expr></argument>)<pos:position pos:line="80" pos:column="67"/></argument_list></call></expr>)<pos:position pos:line="80" pos:column="68"/></condition><then pos:line="80" pos:column="68"> <block pos:line="80" pos:column="69">{
            <expr_stmt><expr><name pos:line="81" pos:column="13">e<pos:position pos:line="81" pos:column="14"/></name> <operator pos:line="81" pos:column="15">=<pos:position pos:line="81" pos:column="16"/></operator> <call><name pos:line="81" pos:column="17">apr_bucket_eos_create<pos:position pos:line="81" pos:column="38"/></name><argument_list pos:line="81" pos:column="38">(<argument><expr><name><name pos:line="81" pos:column="39">f<pos:position pos:line="81" pos:column="40"/></name><operator pos:line="81" pos:column="40">-&gt;<pos:position pos:line="81" pos:column="45"/></operator><name pos:line="81" pos:column="42">c<pos:position pos:line="81" pos:column="43"/></name><operator pos:line="81" pos:column="43">-&gt;<pos:position pos:line="81" pos:column="48"/></operator><name pos:line="81" pos:column="45">bucket_alloc<pos:position pos:line="81" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="81" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="59"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="82" pos:column="13">APR_BRIGADE_INSERT_TAIL<pos:position pos:line="82" pos:column="36"/></name><argument_list pos:line="82" pos:column="36">(<argument><expr><name pos:line="82" pos:column="37">bb<pos:position pos:line="82" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="82" pos:column="41">e<pos:position pos:line="82" pos:column="42"/></name></expr></argument>)<pos:position pos:line="82" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="44"/></expr_stmt>
        }<pos:position pos:line="83" pos:column="10"/></block></then></if>

        <expr_stmt><expr><call><name pos:line="85" pos:column="9">ap_log_cerror<pos:position pos:line="85" pos:column="22"/></name><argument_list pos:line="85" pos:column="22">(<argument><expr><name pos:line="85" pos:column="23">APLOG_MARK<pos:position pos:line="85" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="85" pos:column="35">APLOG_TRACE4<pos:position pos:line="85" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="85" pos:column="49">0<pos:position pos:line="85" pos:column="50"/></literal></expr></argument>, <argument><expr><name><name pos:line="85" pos:column="52">f<pos:position pos:line="85" pos:column="53"/></name><operator pos:line="85" pos:column="53">-&gt;<pos:position pos:line="85" pos:column="58"/></operator><name pos:line="85" pos:column="55">c<pos:position pos:line="85" pos:column="56"/></name></name></expr></argument>,
                      <argument><expr><literal type="string" pos:line="86" pos:column="23">"buffered SSL brigade exhausted"<pos:position pos:line="86" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="86" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="57"/></expr_stmt>
        <comment type="block" pos:line="87" pos:column="9">/* Note that the filter must *not* be removed here; it may be
         * invoked again, see comment above. */</comment>
    }<pos:position pos:line="89" pos:column="6"/></block></then></if>

    <return pos:line="91" pos:column="5">return <expr><name pos:line="91" pos:column="12">APR_SUCCESS<pos:position pos:line="91" pos:column="23"/></name></expr>;<pos:position pos:line="91" pos:column="24"/></return>
}<pos:position pos:line="92" pos:column="2"/></block></function></unit>
