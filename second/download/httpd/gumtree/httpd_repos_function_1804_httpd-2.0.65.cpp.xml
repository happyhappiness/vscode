<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_1804_httpd-2.0.65.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">pid_t<pos:position pos:line="1" pos:column="6"/></name></type> <name pos:line="1" pos:column="7">os_fork<pos:position pos:line="1" pos:column="14"/></name><parameter_list pos:line="1" pos:column="14">(<parameter><decl><type><name pos:line="1" pos:column="15">server_rec<pos:position pos:line="1" pos:column="25"/></name> <modifier pos:line="1" pos:column="26">*<pos:position pos:line="1" pos:column="27"/></modifier></type><name pos:line="1" pos:column="27">s<pos:position pos:line="1" pos:column="28"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="30">int<pos:position pos:line="1" pos:column="33"/></name></type> <name pos:line="1" pos:column="34">slot<pos:position pos:line="1" pos:column="38"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="39"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name><name pos:line="3" pos:column="5">struct<pos:position pos:line="3" pos:column="11"/></name> <name pos:line="3" pos:column="12">tpf_fork_input<pos:position pos:line="3" pos:column="26"/></name></name></type> <name pos:line="3" pos:column="27">fork_input<pos:position pos:line="3" pos:column="37"/></name></decl>;<pos:position pos:line="3" pos:column="38"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">APACHE_TPF_INPUT<pos:position pos:line="4" pos:column="21"/></name></type> <name pos:line="4" pos:column="22">input_parms<pos:position pos:line="4" pos:column="33"/></name></decl>;<pos:position pos:line="4" pos:column="34"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">int<pos:position pos:line="5" pos:column="8"/></name></type> <name pos:line="5" pos:column="9">count<pos:position pos:line="5" pos:column="14"/></name></decl>;<pos:position pos:line="5" pos:column="15"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">listen_rec<pos:position pos:line="6" pos:column="15"/></name> <modifier pos:line="6" pos:column="16">*<pos:position pos:line="6" pos:column="17"/></modifier></type><name pos:line="6" pos:column="17">lr<pos:position pos:line="6" pos:column="19"/></name></decl>;<pos:position pos:line="6" pos:column="20"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="8" pos:column="5">fflush<pos:position pos:line="8" pos:column="11"/></name><argument_list pos:line="8" pos:column="11">(<argument><expr><name pos:line="8" pos:column="12">stdin<pos:position pos:line="8" pos:column="17"/></name></expr></argument>)<pos:position pos:line="8" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="19"/></expr_stmt>
    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><call><name pos:line="9" pos:column="9">dup2<pos:position pos:line="9" pos:column="13"/></name><argument_list pos:line="9" pos:column="13">(<argument><expr><call><name pos:line="9" pos:column="14">fileno<pos:position pos:line="9" pos:column="20"/></name><argument_list pos:line="9" pos:column="20">(<argument><expr><name pos:line="9" pos:column="21">sock_fp<pos:position pos:line="9" pos:column="28"/></name></expr></argument>)<pos:position pos:line="9" pos:column="29"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="9" pos:column="31">STDIN_FILENO<pos:position pos:line="9" pos:column="43"/></name></expr></argument>)<pos:position pos:line="9" pos:column="44"/></argument_list></call> <operator pos:line="9" pos:column="45">==<pos:position pos:line="9" pos:column="47"/></operator> <operator pos:line="9" pos:column="48">-<pos:position pos:line="9" pos:column="49"/></operator><literal type="number" pos:line="9" pos:column="49">1<pos:position pos:line="9" pos:column="50"/></literal></expr>)<pos:position pos:line="9" pos:column="51"/></condition><then pos:line="9" pos:column="51">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="10" pos:column="9">ap_log_error<pos:position pos:line="10" pos:column="21"/></name><argument_list pos:line="10" pos:column="21">(<argument><expr><name pos:line="10" pos:column="22">APLOG_MARK<pos:position pos:line="10" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="34">APLOG_CRIT<pos:position pos:line="10" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="46">errno<pos:position pos:line="10" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="53">s<pos:position pos:line="10" pos:column="54"/></name></expr></argument>,
        <argument><expr><literal type="string" pos:line="11" pos:column="9">"unable to replace stdin with sock device driver"<pos:position pos:line="11" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="60"/></expr_stmt></block></then></if>
    <expr_stmt><expr><call><name pos:line="12" pos:column="5">fflush<pos:position pos:line="12" pos:column="11"/></name><argument_list pos:line="12" pos:column="11">(<argument><expr><name pos:line="12" pos:column="12">stdout<pos:position pos:line="12" pos:column="18"/></name></expr></argument>)<pos:position pos:line="12" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="20"/></expr_stmt>
    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><call><name pos:line="13" pos:column="9">dup2<pos:position pos:line="13" pos:column="13"/></name><argument_list pos:line="13" pos:column="13">(<argument><expr><call><name pos:line="13" pos:column="14">fileno<pos:position pos:line="13" pos:column="20"/></name><argument_list pos:line="13" pos:column="20">(<argument><expr><name pos:line="13" pos:column="21">sock_fp<pos:position pos:line="13" pos:column="28"/></name></expr></argument>)<pos:position pos:line="13" pos:column="29"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="13" pos:column="31">STDOUT_FILENO<pos:position pos:line="13" pos:column="44"/></name></expr></argument>)<pos:position pos:line="13" pos:column="45"/></argument_list></call> <operator pos:line="13" pos:column="46">==<pos:position pos:line="13" pos:column="48"/></operator> <operator pos:line="13" pos:column="49">-<pos:position pos:line="13" pos:column="50"/></operator><literal type="number" pos:line="13" pos:column="50">1<pos:position pos:line="13" pos:column="51"/></literal></expr>)<pos:position pos:line="13" pos:column="52"/></condition><then pos:line="13" pos:column="52">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="14" pos:column="9">ap_log_error<pos:position pos:line="14" pos:column="21"/></name><argument_list pos:line="14" pos:column="21">(<argument><expr><name pos:line="14" pos:column="22">APLOG_MARK<pos:position pos:line="14" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="34">APLOG_CRIT<pos:position pos:line="14" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="46">errno<pos:position pos:line="14" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="53">s<pos:position pos:line="14" pos:column="54"/></name></expr></argument>,
        <argument><expr><literal type="string" pos:line="15" pos:column="9">"unable to replace stdout with sock device driver"<pos:position pos:line="15" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="61"/></expr_stmt></block></then></if>
    <expr_stmt><expr><name><name pos:line="16" pos:column="5">input_parms<pos:position pos:line="16" pos:column="16"/></name><operator pos:line="16" pos:column="16">.<pos:position pos:line="16" pos:column="17"/></operator><name pos:line="16" pos:column="17">generation<pos:position pos:line="16" pos:column="27"/></name></name> <operator pos:line="16" pos:column="28">=<pos:position pos:line="16" pos:column="29"/></operator> <name pos:line="16" pos:column="30">ap_my_generation<pos:position pos:line="16" pos:column="46"/></name></expr>;<pos:position pos:line="16" pos:column="47"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="17" pos:column="5">input_parms<pos:position pos:line="17" pos:column="16"/></name><operator pos:line="17" pos:column="16">.<pos:position pos:line="17" pos:column="17"/></operator><name pos:line="17" pos:column="17">scoreboard_heap<pos:position pos:line="17" pos:column="32"/></name></name> <operator pos:line="17" pos:column="33">=<pos:position pos:line="17" pos:column="34"/></operator> <name pos:line="17" pos:column="35">ap_scoreboard_image<pos:position pos:line="17" pos:column="54"/></name></expr>;<pos:position pos:line="17" pos:column="55"/></expr_stmt>

    <expr_stmt><expr><name pos:line="19" pos:column="5">lr<pos:position pos:line="19" pos:column="7"/></name> <operator pos:line="19" pos:column="8">=<pos:position pos:line="19" pos:column="9"/></operator> <name pos:line="19" pos:column="10">ap_listeners<pos:position pos:line="19" pos:column="22"/></name></expr>;<pos:position pos:line="19" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><name pos:line="20" pos:column="5">count<pos:position pos:line="20" pos:column="10"/></name> <operator pos:line="20" pos:column="11">=<pos:position pos:line="20" pos:column="12"/></operator> <literal type="number" pos:line="20" pos:column="13">0<pos:position pos:line="20" pos:column="14"/></literal></expr>;<pos:position pos:line="20" pos:column="15"/></expr_stmt>
    <do pos:line="21" pos:column="5">do <block pos:line="21" pos:column="8">{
        <expr_stmt><expr><name><name pos:line="22" pos:column="9">input_parms<pos:position pos:line="22" pos:column="20"/></name><operator pos:line="22" pos:column="20">.<pos:position pos:line="22" pos:column="21"/></operator><name pos:line="22" pos:column="21">listeners<pos:position pos:line="22" pos:column="30"/></name><index pos:line="22" pos:column="30">[<expr><name pos:line="22" pos:column="31">count<pos:position pos:line="22" pos:column="36"/></name></expr>]<pos:position pos:line="22" pos:column="37"/></index></name> <operator pos:line="22" pos:column="38">=<pos:position pos:line="22" pos:column="39"/></operator> <name><name pos:line="22" pos:column="40">lr<pos:position pos:line="22" pos:column="42"/></name><operator pos:line="22" pos:column="42">-&gt;<pos:position pos:line="22" pos:column="47"/></operator><name pos:line="22" pos:column="44">fd<pos:position pos:line="22" pos:column="46"/></name></name></expr>;<pos:position pos:line="22" pos:column="47"/></expr_stmt>
        <expr_stmt><expr><name pos:line="23" pos:column="9">lr<pos:position pos:line="23" pos:column="11"/></name> <operator pos:line="23" pos:column="12">=<pos:position pos:line="23" pos:column="13"/></operator> <name><name pos:line="23" pos:column="14">lr<pos:position pos:line="23" pos:column="16"/></name><operator pos:line="23" pos:column="16">-&gt;<pos:position pos:line="23" pos:column="21"/></operator><name pos:line="23" pos:column="18">next<pos:position pos:line="23" pos:column="22"/></name></name></expr>;<pos:position pos:line="23" pos:column="23"/></expr_stmt>
        <expr_stmt><expr><name pos:line="24" pos:column="9">count<pos:position pos:line="24" pos:column="14"/></name><operator pos:line="24" pos:column="14">++<pos:position pos:line="24" pos:column="16"/></operator></expr>;<pos:position pos:line="24" pos:column="17"/></expr_stmt>
    }<pos:position pos:line="25" pos:column="6"/></block> while<condition pos:line="25" pos:column="12">(<expr><name pos:line="25" pos:column="13">lr<pos:position pos:line="25" pos:column="15"/></name> <operator pos:line="25" pos:column="16">!=<pos:position pos:line="25" pos:column="18"/></operator> <name pos:line="25" pos:column="19">ap_listeners<pos:position pos:line="25" pos:column="31"/></name></expr>)<pos:position pos:line="25" pos:column="32"/></condition>;<pos:position pos:line="25" pos:column="33"/></do>

    <expr_stmt><expr><name><name pos:line="27" pos:column="5">input_parms<pos:position pos:line="27" pos:column="16"/></name><operator pos:line="27" pos:column="16">.<pos:position pos:line="27" pos:column="17"/></operator><name pos:line="27" pos:column="17">slot<pos:position pos:line="27" pos:column="21"/></name></name> <operator pos:line="27" pos:column="22">=<pos:position pos:line="27" pos:column="23"/></operator> <name pos:line="27" pos:column="24">slot<pos:position pos:line="27" pos:column="28"/></name></expr>;<pos:position pos:line="27" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="28" pos:column="5">input_parms<pos:position pos:line="28" pos:column="16"/></name><operator pos:line="28" pos:column="16">.<pos:position pos:line="28" pos:column="17"/></operator><name pos:line="28" pos:column="17">restart_time<pos:position pos:line="28" pos:column="29"/></name></name> <operator pos:line="28" pos:column="30">=<pos:position pos:line="28" pos:column="31"/></operator> <name pos:line="28" pos:column="32">ap_restart_time<pos:position pos:line="28" pos:column="47"/></name></expr>;<pos:position pos:line="28" pos:column="48"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="29" pos:column="5">fork_input<pos:position pos:line="29" pos:column="15"/></name><operator pos:line="29" pos:column="15">.<pos:position pos:line="29" pos:column="16"/></operator><name pos:line="29" pos:column="16">ebw_data<pos:position pos:line="29" pos:column="24"/></name></name> <operator pos:line="29" pos:column="25">=<pos:position pos:line="29" pos:column="26"/></operator> <operator pos:line="29" pos:column="27">&amp;<pos:position pos:line="29" pos:column="32"/></operator><name pos:line="29" pos:column="28">input_parms<pos:position pos:line="29" pos:column="39"/></name></expr>;<pos:position pos:line="29" pos:column="40"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="30" pos:column="5">fork_input<pos:position pos:line="30" pos:column="15"/></name><operator pos:line="30" pos:column="15">.<pos:position pos:line="30" pos:column="16"/></operator><name pos:line="30" pos:column="16">program<pos:position pos:line="30" pos:column="23"/></name></name> <operator pos:line="30" pos:column="24">=<pos:position pos:line="30" pos:column="25"/></operator> <name pos:line="30" pos:column="26">ap_server_argv0<pos:position pos:line="30" pos:column="41"/></name></expr>;<pos:position pos:line="30" pos:column="42"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="31" pos:column="5">fork_input<pos:position pos:line="31" pos:column="15"/></name><operator pos:line="31" pos:column="15">.<pos:position pos:line="31" pos:column="16"/></operator><name pos:line="31" pos:column="16">prog_type<pos:position pos:line="31" pos:column="25"/></name></name> <operator pos:line="31" pos:column="26">=<pos:position pos:line="31" pos:column="27"/></operator> <name pos:line="31" pos:column="28">TPF_FORK_NAME<pos:position pos:line="31" pos:column="41"/></name></expr>;<pos:position pos:line="31" pos:column="42"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="32" pos:column="5">fork_input<pos:position pos:line="32" pos:column="15"/></name><operator pos:line="32" pos:column="15">.<pos:position pos:line="32" pos:column="16"/></operator><name pos:line="32" pos:column="16">istream<pos:position pos:line="32" pos:column="23"/></name></name> <operator pos:line="32" pos:column="24">=<pos:position pos:line="32" pos:column="25"/></operator> <name pos:line="32" pos:column="26">TPF_FORK_IS_BALANCE<pos:position pos:line="32" pos:column="45"/></name></expr>;<pos:position pos:line="32" pos:column="46"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="33" pos:column="5">fork_input<pos:position pos:line="33" pos:column="15"/></name><operator pos:line="33" pos:column="15">.<pos:position pos:line="33" pos:column="16"/></operator><name pos:line="33" pos:column="16">ebw_data_length<pos:position pos:line="33" pos:column="31"/></name></name> <operator pos:line="33" pos:column="32">=<pos:position pos:line="33" pos:column="33"/></operator> <sizeof pos:line="33" pos:column="34">sizeof<argument_list pos:line="33" pos:column="40">(<argument><expr><name pos:line="33" pos:column="41">input_parms<pos:position pos:line="33" pos:column="52"/></name></expr></argument>)<pos:position pos:line="33" pos:column="53"/></argument_list></sizeof></expr>;<pos:position pos:line="33" pos:column="54"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="34" pos:column="5">fork_input<pos:position pos:line="34" pos:column="15"/></name><operator pos:line="34" pos:column="15">.<pos:position pos:line="34" pos:column="16"/></operator><name pos:line="34" pos:column="16">parm_data<pos:position pos:line="34" pos:column="25"/></name></name> <operator pos:line="34" pos:column="26">=<pos:position pos:line="34" pos:column="27"/></operator> <literal type="string" pos:line="34" pos:column="28">"-x"<pos:position pos:line="34" pos:column="32"/></literal></expr>;<pos:position pos:line="34" pos:column="33"/></expr_stmt>
    <return pos:line="35" pos:column="5">return <expr><call><name pos:line="35" pos:column="12">tpf_fork<pos:position pos:line="35" pos:column="20"/></name><argument_list pos:line="35" pos:column="20">(<argument><expr><operator pos:line="35" pos:column="21">&amp;<pos:position pos:line="35" pos:column="26"/></operator><name pos:line="35" pos:column="22">fork_input<pos:position pos:line="35" pos:column="32"/></name></expr></argument>)<pos:position pos:line="35" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="34"/></return>
}<pos:position pos:line="36" pos:column="2"/></block></function></unit>
