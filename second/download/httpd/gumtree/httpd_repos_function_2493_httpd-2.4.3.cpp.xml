<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_2493_httpd-2.4.3.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name> <modifier pos:line="1" pos:column="6">*<pos:position pos:line="1" pos:column="7"/></modifier></type><name pos:line="1" pos:column="7">util_ald_alloc<pos:position pos:line="1" pos:column="21"/></name><parameter_list pos:line="1" pos:column="21">(<parameter><decl><type><name pos:line="1" pos:column="22">util_ald_cache_t<pos:position pos:line="1" pos:column="38"/></name> <modifier pos:line="1" pos:column="39">*<pos:position pos:line="1" pos:column="40"/></modifier></type><name pos:line="1" pos:column="40">cache<pos:position pos:line="1" pos:column="45"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="47">unsigned<pos:position pos:line="1" pos:column="55"/></name> <name pos:line="1" pos:column="56">long<pos:position pos:line="1" pos:column="60"/></name></type> <name pos:line="1" pos:column="61">size<pos:position pos:line="1" pos:column="65"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="66"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <if pos:line="3" pos:column="5">if <condition pos:line="3" pos:column="8">(<expr><literal type="number" pos:line="3" pos:column="9">0<pos:position pos:line="3" pos:column="10"/></literal> <operator pos:line="3" pos:column="11">==<pos:position pos:line="3" pos:column="13"/></operator> <name pos:line="3" pos:column="14">size<pos:position pos:line="3" pos:column="18"/></name></expr>)<pos:position pos:line="3" pos:column="19"/></condition><then pos:line="3" pos:column="19">
        <block type="pseudo"><return pos:line="4" pos:column="9">return <expr><name pos:line="4" pos:column="16">NULL<pos:position pos:line="4" pos:column="20"/></name></expr>;<pos:position pos:line="4" pos:column="21"/></return></block></then></if>
<cpp:if pos:line="5" pos:column="1">#<cpp:directive pos:line="5" pos:column="2">if<pos:position pos:line="5" pos:column="4"/></cpp:directive> <expr><name pos:line="5" pos:column="5">APR_HAS_SHARED_MEMORY<pos:position pos:line="5" pos:column="26"/></name></expr></cpp:if>
    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><name><name pos:line="6" pos:column="9">cache<pos:position pos:line="6" pos:column="14"/></name><operator pos:line="6" pos:column="14">-&gt;<pos:position pos:line="6" pos:column="19"/></operator><name pos:line="6" pos:column="16">rmm_addr<pos:position pos:line="6" pos:column="24"/></name></name></expr>)<pos:position pos:line="6" pos:column="25"/></condition><then pos:line="6" pos:column="25"> <block pos:line="6" pos:column="26">{
        <comment type="block" pos:line="7" pos:column="9">/* allocate from shared memory */</comment>
        <decl_stmt><decl><type><name pos:line="8" pos:column="9">apr_rmm_off_t<pos:position pos:line="8" pos:column="22"/></name></type> <name pos:line="8" pos:column="23">block<pos:position pos:line="8" pos:column="28"/></name> <init pos:line="8" pos:column="29">= <expr><call><name pos:line="8" pos:column="31">apr_rmm_calloc<pos:position pos:line="8" pos:column="45"/></name><argument_list pos:line="8" pos:column="45">(<argument><expr><name><name pos:line="8" pos:column="46">cache<pos:position pos:line="8" pos:column="51"/></name><operator pos:line="8" pos:column="51">-&gt;<pos:position pos:line="8" pos:column="56"/></operator><name pos:line="8" pos:column="53">rmm_addr<pos:position pos:line="8" pos:column="61"/></name></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="63">size<pos:position pos:line="8" pos:column="67"/></name></expr></argument>)<pos:position pos:line="8" pos:column="68"/></argument_list></call></expr></init></decl>;<pos:position pos:line="8" pos:column="69"/></decl_stmt>
        <return pos:line="9" pos:column="9">return <expr><ternary><condition><expr><name pos:line="9" pos:column="16">block<pos:position pos:line="9" pos:column="21"/></name></expr> ?<pos:position pos:line="9" pos:column="23"/></condition><then pos:line="9" pos:column="23"> <expr><operator pos:line="9" pos:column="24">(<pos:position pos:line="9" pos:column="25"/></operator><name pos:line="9" pos:column="25">void<pos:position pos:line="9" pos:column="29"/></name> <operator pos:line="9" pos:column="30">*<pos:position pos:line="9" pos:column="31"/></operator><operator pos:line="9" pos:column="31">)<pos:position pos:line="9" pos:column="32"/></operator><call><name pos:line="9" pos:column="32">apr_rmm_addr_get<pos:position pos:line="9" pos:column="48"/></name><argument_list pos:line="9" pos:column="48">(<argument><expr><name><name pos:line="9" pos:column="49">cache<pos:position pos:line="9" pos:column="54"/></name><operator pos:line="9" pos:column="54">-&gt;<pos:position pos:line="9" pos:column="59"/></operator><name pos:line="9" pos:column="56">rmm_addr<pos:position pos:line="9" pos:column="64"/></name></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="66">block<pos:position pos:line="9" pos:column="71"/></name></expr></argument>)<pos:position pos:line="9" pos:column="72"/></argument_list></call></expr> <pos:position pos:line="9" pos:column="73"/></then><else pos:line="9" pos:column="73">: <expr><name pos:line="9" pos:column="75">NULL<pos:position pos:line="9" pos:column="79"/></name></expr></else></ternary></expr>;<pos:position pos:line="9" pos:column="80"/></return>
    }<pos:position pos:line="10" pos:column="6"/></block></then>
    <else pos:line="11" pos:column="5">else <block pos:line="11" pos:column="10">{
        <comment type="block" pos:line="12" pos:column="9">/* Cache shm is not used */</comment>
        <return pos:line="13" pos:column="9">return <expr><operator pos:line="13" pos:column="16">(<pos:position pos:line="13" pos:column="17"/></operator><name pos:line="13" pos:column="17">void<pos:position pos:line="13" pos:column="21"/></name> <operator pos:line="13" pos:column="22">*<pos:position pos:line="13" pos:column="23"/></operator><operator pos:line="13" pos:column="23">)<pos:position pos:line="13" pos:column="24"/></operator><call><name pos:line="13" pos:column="24">calloc<pos:position pos:line="13" pos:column="30"/></name><argument_list pos:line="13" pos:column="30">(<argument><expr><sizeof pos:line="13" pos:column="31">sizeof<argument_list pos:line="13" pos:column="37">(<argument><expr><name pos:line="13" pos:column="38">char<pos:position pos:line="13" pos:column="42"/></name></expr></argument>)<pos:position pos:line="13" pos:column="43"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="13" pos:column="45">size<pos:position pos:line="13" pos:column="49"/></name></expr></argument>)<pos:position pos:line="13" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="51"/></return>
    }<pos:position pos:line="14" pos:column="6"/></block></else></if>
<cpp:else pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">else<pos:position pos:line="15" pos:column="6"/></cpp:directive></cpp:else>
    <return pos:line="16" pos:column="5">return <expr><operator pos:line="16" pos:column="12">(<pos:position pos:line="16" pos:column="13"/></operator><name pos:line="16" pos:column="13">void<pos:position pos:line="16" pos:column="17"/></name> <operator pos:line="16" pos:column="18">*<pos:position pos:line="16" pos:column="19"/></operator><operator pos:line="16" pos:column="19">)<pos:position pos:line="16" pos:column="20"/></operator><call><name pos:line="16" pos:column="20">calloc<pos:position pos:line="16" pos:column="26"/></name><argument_list pos:line="16" pos:column="26">(<argument><expr><sizeof pos:line="16" pos:column="27">sizeof<argument_list pos:line="16" pos:column="33">(<argument><expr><name pos:line="16" pos:column="34">char<pos:position pos:line="16" pos:column="38"/></name></expr></argument>)<pos:position pos:line="16" pos:column="39"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="16" pos:column="41">size<pos:position pos:line="16" pos:column="45"/></name></expr></argument>)<pos:position pos:line="16" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="47"/></return>
<cpp:endif pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">endif<pos:position pos:line="17" pos:column="7"/></cpp:directive></cpp:endif>
}<pos:position pos:line="18" pos:column="2"/></block></function></unit>
