<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_function_3838.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">mod_info_indent<pos:position pos:line="1" pos:column="28"/></name><parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><name pos:line="1" pos:column="29">request_rec<pos:position pos:line="1" pos:column="40"/></name> <modifier pos:line="1" pos:column="41">*<pos:position pos:line="1" pos:column="42"/></modifier></type> <name pos:line="1" pos:column="43">r<pos:position pos:line="1" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="46">int<pos:position pos:line="1" pos:column="49"/></name></type> <name pos:line="1" pos:column="50">nest<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>,
                            <parameter><decl><type><specifier pos:line="2" pos:column="29">const<pos:position pos:line="2" pos:column="34"/></specifier> <name pos:line="2" pos:column="35">char<pos:position pos:line="2" pos:column="39"/></name> <modifier pos:line="2" pos:column="40">*<pos:position pos:line="2" pos:column="41"/></modifier></type><name pos:line="2" pos:column="41">thisfn<pos:position pos:line="2" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="49">int<pos:position pos:line="2" pos:column="52"/></name></type> <name pos:line="2" pos:column="53">linenum<pos:position pos:line="2" pos:column="60"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="61"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">int<pos:position pos:line="4" pos:column="8"/></name></type> <name pos:line="4" pos:column="9">i<pos:position pos:line="4" pos:column="10"/></name></decl>;<pos:position pos:line="4" pos:column="11"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="5" pos:column="5">const<pos:position pos:line="5" pos:column="10"/></specifier> <name pos:line="5" pos:column="11">char<pos:position pos:line="5" pos:column="15"/></name> <modifier pos:line="5" pos:column="16">*<pos:position pos:line="5" pos:column="17"/></modifier></type><name pos:line="5" pos:column="17">prevfn<pos:position pos:line="5" pos:column="23"/></name> <init pos:line="5" pos:column="24">= <expr><call><name pos:line="5" pos:column="26">get_fn_info<pos:position pos:line="5" pos:column="37"/></name><argument_list pos:line="5" pos:column="37">(<argument><expr><name pos:line="5" pos:column="38">r<pos:position pos:line="5" pos:column="39"/></name></expr></argument>)<pos:position pos:line="5" pos:column="40"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="41"/></decl_stmt>
    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><name pos:line="6" pos:column="9">thisfn<pos:position pos:line="6" pos:column="15"/></name> <operator pos:line="6" pos:column="16">==<pos:position pos:line="6" pos:column="18"/></operator> <name pos:line="6" pos:column="19">NULL<pos:position pos:line="6" pos:column="23"/></name></expr>)<pos:position pos:line="6" pos:column="24"/></condition><then pos:line="6" pos:column="24">
        <block type="pseudo"><expr_stmt><expr><name pos:line="7" pos:column="9">thisfn<pos:position pos:line="7" pos:column="15"/></name> <operator pos:line="7" pos:column="16">=<pos:position pos:line="7" pos:column="17"/></operator> <literal type="string" pos:line="7" pos:column="18">"*UNKNOWN*"<pos:position pos:line="7" pos:column="29"/></literal></expr>;<pos:position pos:line="7" pos:column="30"/></expr_stmt></block></then></if>
    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><name pos:line="8" pos:column="9">prevfn<pos:position pos:line="8" pos:column="15"/></name> <operator pos:line="8" pos:column="16">==<pos:position pos:line="8" pos:column="18"/></operator> <name pos:line="8" pos:column="19">NULL<pos:position pos:line="8" pos:column="23"/></name> <operator pos:line="8" pos:column="24">||<pos:position pos:line="8" pos:column="26"/></operator> <literal type="number" pos:line="8" pos:column="27">0<pos:position pos:line="8" pos:column="28"/></literal> <operator pos:line="8" pos:column="29">!=<pos:position pos:line="8" pos:column="31"/></operator> <call><name pos:line="8" pos:column="32">strcmp<pos:position pos:line="8" pos:column="38"/></name><argument_list pos:line="8" pos:column="38">(<argument><expr><name pos:line="8" pos:column="39">prevfn<pos:position pos:line="8" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="47">thisfn<pos:position pos:line="8" pos:column="53"/></name></expr></argument>)<pos:position pos:line="8" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="8" pos:column="55"/></condition><then pos:line="8" pos:column="55"> <block pos:line="8" pos:column="56">{
        <if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><name pos:line="9" pos:column="13">r<pos:position pos:line="9" pos:column="14"/></name></expr>)<pos:position pos:line="9" pos:column="15"/></condition><then pos:line="9" pos:column="15"> <block pos:line="9" pos:column="16">{
            <expr_stmt><expr><name pos:line="10" pos:column="13">thisfn<pos:position pos:line="10" pos:column="19"/></name> <operator pos:line="10" pos:column="20">=<pos:position pos:line="10" pos:column="21"/></operator> <call><name pos:line="10" pos:column="22">ap_escape_html<pos:position pos:line="10" pos:column="36"/></name><argument_list pos:line="10" pos:column="36">(<argument><expr><name><name pos:line="10" pos:column="37">r<pos:position pos:line="10" pos:column="38"/></name><operator pos:line="10" pos:column="38">-&gt;<pos:position pos:line="10" pos:column="43"/></operator><name pos:line="10" pos:column="40">pool<pos:position pos:line="10" pos:column="44"/></name></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="46">thisfn<pos:position pos:line="10" pos:column="52"/></name></expr></argument>)<pos:position pos:line="10" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="54"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="11" pos:column="13">ap_rprintf<pos:position pos:line="11" pos:column="23"/></name><argument_list pos:line="11" pos:column="23">(<argument><expr><name pos:line="11" pos:column="24">r<pos:position pos:line="11" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="27">"&lt;dd&gt;&lt;tt&gt;&lt;strong&gt;In file: %s&lt;/strong&gt;&lt;/tt&gt;&lt;/dd&gt;\n"<pos:position pos:line="11" pos:column="113"/></literal></expr></argument>,
                   <argument><expr><name pos:line="12" pos:column="20">thisfn<pos:position pos:line="12" pos:column="26"/></name></expr></argument>)<pos:position pos:line="12" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="28"/></expr_stmt>
        }<pos:position pos:line="13" pos:column="10"/></block></then>
        <else pos:line="14" pos:column="9">else <block pos:line="14" pos:column="14">{
            <expr_stmt><expr><call><name pos:line="15" pos:column="13">apr_file_printf<pos:position pos:line="15" pos:column="28"/></name><argument_list pos:line="15" pos:column="28">(<argument><expr><name pos:line="15" pos:column="29">out<pos:position pos:line="15" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="34">"# In file: %s\n"<pos:position pos:line="15" pos:column="51"/></literal></expr></argument>, <argument><expr><name pos:line="15" pos:column="53">thisfn<pos:position pos:line="15" pos:column="59"/></name></expr></argument>)<pos:position pos:line="15" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="61"/></expr_stmt>
        }<pos:position pos:line="16" pos:column="10"/></block></else></if>
        <expr_stmt><expr><call><name pos:line="17" pos:column="9">set_fn_info<pos:position pos:line="17" pos:column="20"/></name><argument_list pos:line="17" pos:column="20">(<argument><expr><name pos:line="17" pos:column="21">r<pos:position pos:line="17" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="24">thisfn<pos:position pos:line="17" pos:column="30"/></name></expr></argument>)<pos:position pos:line="17" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="32"/></expr_stmt>
    }<pos:position pos:line="18" pos:column="6"/></block></then></if>

    <if pos:line="20" pos:column="5">if <condition pos:line="20" pos:column="8">(<expr><name pos:line="20" pos:column="9">r<pos:position pos:line="20" pos:column="10"/></name></expr>)<pos:position pos:line="20" pos:column="11"/></condition><then pos:line="20" pos:column="11"> <block pos:line="20" pos:column="12">{
        <expr_stmt><expr><call><name pos:line="21" pos:column="9">ap_rputs<pos:position pos:line="21" pos:column="17"/></name><argument_list pos:line="21" pos:column="17">(<argument><expr><literal type="string" pos:line="21" pos:column="18">"&lt;dd&gt;&lt;tt&gt;"<pos:position pos:line="21" pos:column="40"/></literal></expr></argument>, <argument><expr><name pos:line="21" pos:column="30">r<pos:position pos:line="21" pos:column="31"/></name></expr></argument>)<pos:position pos:line="21" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="33"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="22" pos:column="9">put_int_flush_right<pos:position pos:line="22" pos:column="28"/></name><argument_list pos:line="22" pos:column="28">(<argument><expr><name pos:line="22" pos:column="29">r<pos:position pos:line="22" pos:column="30"/></name></expr></argument>, <argument><expr><ternary><condition><expr><name pos:line="22" pos:column="32">linenum<pos:position pos:line="22" pos:column="39"/></name> <operator pos:line="22" pos:column="40">&gt;<pos:position pos:line="22" pos:column="44"/></operator> <literal type="number" pos:line="22" pos:column="42">0<pos:position pos:line="22" pos:column="43"/></literal></expr> ?<pos:position pos:line="22" pos:column="45"/></condition><then pos:line="22" pos:column="45"> <expr><name pos:line="22" pos:column="46">linenum<pos:position pos:line="22" pos:column="53"/></name></expr> <pos:position pos:line="22" pos:column="54"/></then><else pos:line="22" pos:column="54">: <expr><literal type="number" pos:line="22" pos:column="56">0<pos:position pos:line="22" pos:column="57"/></literal></expr></else></ternary></expr></argument>, <argument><expr><literal type="number" pos:line="22" pos:column="59">4<pos:position pos:line="22" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="62"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="23" pos:column="9">ap_rputs<pos:position pos:line="23" pos:column="17"/></name><argument_list pos:line="23" pos:column="17">(<argument><expr><literal type="string" pos:line="23" pos:column="18">":&amp;nbsp;"<pos:position pos:line="23" pos:column="31"/></literal></expr></argument>, <argument><expr><name pos:line="23" pos:column="29">r<pos:position pos:line="23" pos:column="30"/></name></expr></argument>)<pos:position pos:line="23" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="32"/></expr_stmt>
    }<pos:position pos:line="24" pos:column="6"/></block></then>
    <elseif pos:line="25" pos:column="5">else <if pos:line="25" pos:column="10">if <condition pos:line="25" pos:column="13">(<expr><name pos:line="25" pos:column="14">linenum<pos:position pos:line="25" pos:column="21"/></name> <operator pos:line="25" pos:column="22">&gt;<pos:position pos:line="25" pos:column="26"/></operator> <literal type="number" pos:line="25" pos:column="24">0<pos:position pos:line="25" pos:column="25"/></literal></expr>)<pos:position pos:line="25" pos:column="26"/></condition><then pos:line="25" pos:column="26"> <block pos:line="25" pos:column="27">{
        <for pos:line="26" pos:column="9">for <control pos:line="26" pos:column="13">(<init><expr><name pos:line="26" pos:column="14">i<pos:position pos:line="26" pos:column="15"/></name> <operator pos:line="26" pos:column="16">=<pos:position pos:line="26" pos:column="17"/></operator> <literal type="number" pos:line="26" pos:column="18">1<pos:position pos:line="26" pos:column="19"/></literal></expr>;<pos:position pos:line="26" pos:column="20"/></init> <condition><expr><name pos:line="26" pos:column="21">i<pos:position pos:line="26" pos:column="22"/></name> <operator pos:line="26" pos:column="23">&lt;=<pos:position pos:line="26" pos:column="28"/></operator> <name pos:line="26" pos:column="26">nest<pos:position pos:line="26" pos:column="30"/></name></expr>;<pos:position pos:line="26" pos:column="31"/></condition> <incr><expr><operator pos:line="26" pos:column="32">++<pos:position pos:line="26" pos:column="34"/></operator><name pos:line="26" pos:column="34">i<pos:position pos:line="26" pos:column="35"/></name></expr></incr>)<pos:position pos:line="26" pos:column="36"/></control>
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="27" pos:column="13">apr_file_printf<pos:position pos:line="27" pos:column="28"/></name><argument_list pos:line="27" pos:column="28">(<argument><expr><name pos:line="27" pos:column="29">out<pos:position pos:line="27" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="27" pos:column="34">"  "<pos:position pos:line="27" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="40"/></expr_stmt></block></for>
        <expr_stmt><expr><call><name pos:line="28" pos:column="9">apr_file_putc<pos:position pos:line="28" pos:column="22"/></name><argument_list pos:line="28" pos:column="22">(<argument><expr><literal type="char" pos:line="28" pos:column="23">'#'<pos:position pos:line="28" pos:column="26"/></literal></expr></argument>, <argument><expr><name pos:line="28" pos:column="28">out<pos:position pos:line="28" pos:column="31"/></name></expr></argument>)<pos:position pos:line="28" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="33"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="29" pos:column="9">put_int_flush_right<pos:position pos:line="29" pos:column="28"/></name><argument_list pos:line="29" pos:column="28">(<argument><expr><name pos:line="29" pos:column="29">r<pos:position pos:line="29" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="32">linenum<pos:position pos:line="29" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="29" pos:column="41">4<pos:position pos:line="29" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="44"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="30" pos:column="9">apr_file_printf<pos:position pos:line="30" pos:column="24"/></name><argument_list pos:line="30" pos:column="24">(<argument><expr><name pos:line="30" pos:column="25">out<pos:position pos:line="30" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="30" pos:column="30">":\n"<pos:position pos:line="30" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="37"/></expr_stmt>
    }<pos:position pos:line="31" pos:column="6"/></block></then></if></elseif></if>

    <for pos:line="33" pos:column="5">for <control pos:line="33" pos:column="9">(<init><expr><name pos:line="33" pos:column="10">i<pos:position pos:line="33" pos:column="11"/></name> <operator pos:line="33" pos:column="12">=<pos:position pos:line="33" pos:column="13"/></operator> <literal type="number" pos:line="33" pos:column="14">1<pos:position pos:line="33" pos:column="15"/></literal></expr>;<pos:position pos:line="33" pos:column="16"/></init> <condition><expr><name pos:line="33" pos:column="17">i<pos:position pos:line="33" pos:column="18"/></name> <operator pos:line="33" pos:column="19">&lt;=<pos:position pos:line="33" pos:column="24"/></operator> <name pos:line="33" pos:column="22">nest<pos:position pos:line="33" pos:column="26"/></name></expr>;<pos:position pos:line="33" pos:column="27"/></condition> <incr><expr><operator pos:line="33" pos:column="28">++<pos:position pos:line="33" pos:column="30"/></operator><name pos:line="33" pos:column="30">i<pos:position pos:line="33" pos:column="31"/></name></expr></incr>)<pos:position pos:line="33" pos:column="32"/></control> <block pos:line="33" pos:column="33">{
        <if pos:line="34" pos:column="9">if <condition pos:line="34" pos:column="12">(<expr><name pos:line="34" pos:column="13">r<pos:position pos:line="34" pos:column="14"/></name></expr>)<pos:position pos:line="34" pos:column="15"/></condition><then pos:line="34" pos:column="15">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="35" pos:column="13">ap_rputs<pos:position pos:line="35" pos:column="21"/></name><argument_list pos:line="35" pos:column="21">(<argument><expr><literal type="string" pos:line="35" pos:column="22">"&amp;nbsp;&amp;nbsp;"<pos:position pos:line="35" pos:column="44"/></literal></expr></argument>, <argument><expr><name pos:line="35" pos:column="38">r<pos:position pos:line="35" pos:column="39"/></name></expr></argument>)<pos:position pos:line="35" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="41"/></expr_stmt></block></then>
        <else pos:line="36" pos:column="9">else
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="37" pos:column="13">apr_file_printf<pos:position pos:line="37" pos:column="28"/></name><argument_list pos:line="37" pos:column="28">(<argument><expr><name pos:line="37" pos:column="29">out<pos:position pos:line="37" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="37" pos:column="34">"  "<pos:position pos:line="37" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="40"/></expr_stmt></block></else></if>
    }<pos:position pos:line="38" pos:column="6"/></block></for>
}<pos:position pos:line="39" pos:column="2"/></block></function></unit>
