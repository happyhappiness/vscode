<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_3682_httpd-2.2.17.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">apr__SHA384_Final<pos:position pos:line="1" pos:column="23"/></name><parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><name pos:line="1" pos:column="24">sha2_byte<pos:position pos:line="1" pos:column="33"/></name></type> <name><name pos:line="1" pos:column="34">digest<pos:position pos:line="1" pos:column="40"/></name><index pos:line="1" pos:column="40">[]<pos:position pos:line="1" pos:column="42"/></index></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="44">SHA384_CTX<pos:position pos:line="1" pos:column="54"/></name><modifier pos:line="1" pos:column="54">*<pos:position pos:line="1" pos:column="55"/></modifier></type> <name pos:line="1" pos:column="56">context<pos:position pos:line="1" pos:column="63"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="64"/></parameter_list> <block pos:line="1" pos:column="65">{
        <decl_stmt><decl><type><name pos:line="2" pos:column="9">sha2_word64<pos:position pos:line="2" pos:column="20"/></name>     <modifier pos:line="2" pos:column="25">*<pos:position pos:line="2" pos:column="26"/></modifier></type><name pos:line="2" pos:column="26">d<pos:position pos:line="2" pos:column="27"/></name> <init pos:line="2" pos:column="28">= <expr><operator pos:line="2" pos:column="30">(<pos:position pos:line="2" pos:column="31"/></operator><name pos:line="2" pos:column="31">sha2_word64<pos:position pos:line="2" pos:column="42"/></name><operator pos:line="2" pos:column="42">*<pos:position pos:line="2" pos:column="43"/></operator><operator pos:line="2" pos:column="43">)<pos:position pos:line="2" pos:column="44"/></operator><name pos:line="2" pos:column="44">digest<pos:position pos:line="2" pos:column="50"/></name></expr></init></decl>;<pos:position pos:line="2" pos:column="51"/></decl_stmt>

        <comment type="block" pos:line="4" pos:column="9">/* Sanity check: */</comment>
        <expr_stmt><expr><call><name pos:line="5" pos:column="9">assert<pos:position pos:line="5" pos:column="15"/></name><argument_list pos:line="5" pos:column="15">(<argument><expr><name pos:line="5" pos:column="16">context<pos:position pos:line="5" pos:column="23"/></name> <operator pos:line="5" pos:column="24">!=<pos:position pos:line="5" pos:column="26"/></operator> <operator pos:line="5" pos:column="27">(<pos:position pos:line="5" pos:column="28"/></operator><name pos:line="5" pos:column="28">SHA384_CTX<pos:position pos:line="5" pos:column="38"/></name><operator pos:line="5" pos:column="38">*<pos:position pos:line="5" pos:column="39"/></operator><operator pos:line="5" pos:column="39">)<pos:position pos:line="5" pos:column="40"/></operator><literal type="number" pos:line="5" pos:column="40">0<pos:position pos:line="5" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="43"/></expr_stmt>

        <comment type="block" pos:line="7" pos:column="9">/* If no digest buffer is passed, we don't bother doing this: */</comment>
        <if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><name pos:line="8" pos:column="13">digest<pos:position pos:line="8" pos:column="19"/></name> <operator pos:line="8" pos:column="20">!=<pos:position pos:line="8" pos:column="22"/></operator> <operator pos:line="8" pos:column="23">(<pos:position pos:line="8" pos:column="24"/></operator><name pos:line="8" pos:column="24">sha2_byte<pos:position pos:line="8" pos:column="33"/></name><operator pos:line="8" pos:column="33">*<pos:position pos:line="8" pos:column="34"/></operator><operator pos:line="8" pos:column="34">)<pos:position pos:line="8" pos:column="35"/></operator><literal type="number" pos:line="8" pos:column="35">0<pos:position pos:line="8" pos:column="36"/></literal></expr>)<pos:position pos:line="8" pos:column="37"/></condition><then pos:line="8" pos:column="37"> <block pos:line="8" pos:column="38">{
                <expr_stmt><expr><call><name pos:line="9" pos:column="17">apr__SHA512_Last<pos:position pos:line="9" pos:column="33"/></name><argument_list pos:line="9" pos:column="33">(<argument><expr><operator pos:line="9" pos:column="34">(<pos:position pos:line="9" pos:column="35"/></operator><name pos:line="9" pos:column="35">SHA512_CTX<pos:position pos:line="9" pos:column="45"/></name><operator pos:line="9" pos:column="45">*<pos:position pos:line="9" pos:column="46"/></operator><operator pos:line="9" pos:column="46">)<pos:position pos:line="9" pos:column="47"/></operator><name pos:line="9" pos:column="47">context<pos:position pos:line="9" pos:column="54"/></name></expr></argument>)<pos:position pos:line="9" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="56"/></expr_stmt>

                <comment type="block" pos:line="11" pos:column="17">/* Save the hash data for output: */</comment>
<cpp:if pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">if<pos:position pos:line="12" pos:column="4"/></cpp:directive> <expr><operator pos:line="12" pos:column="5">!<pos:position pos:line="12" pos:column="6"/></operator><name pos:line="12" pos:column="6">APR_IS_BIGENDIAN<pos:position pos:line="12" pos:column="22"/></name></expr></cpp:if>
                <block pos:line="13" pos:column="17">{
                        <comment type="block" pos:line="14" pos:column="25">/* Convert TO host byte order */</comment>
                        <decl_stmt><decl><type><name pos:line="15" pos:column="25">int<pos:position pos:line="15" pos:column="28"/></name></type>     <name pos:line="15" pos:column="33">j<pos:position pos:line="15" pos:column="34"/></name></decl>;<pos:position pos:line="15" pos:column="35"/></decl_stmt>
                        <for pos:line="16" pos:column="25">for <control pos:line="16" pos:column="29">(<init><expr><name pos:line="16" pos:column="30">j<pos:position pos:line="16" pos:column="31"/></name> <operator pos:line="16" pos:column="32">=<pos:position pos:line="16" pos:column="33"/></operator> <literal type="number" pos:line="16" pos:column="34">0<pos:position pos:line="16" pos:column="35"/></literal></expr>;<pos:position pos:line="16" pos:column="36"/></init> <condition><expr><name pos:line="16" pos:column="37">j<pos:position pos:line="16" pos:column="38"/></name> <operator pos:line="16" pos:column="39">&lt;<pos:position pos:line="16" pos:column="43"/></operator> <literal type="number" pos:line="16" pos:column="41">6<pos:position pos:line="16" pos:column="42"/></literal></expr>;<pos:position pos:line="16" pos:column="43"/></condition> <incr><expr><name pos:line="16" pos:column="44">j<pos:position pos:line="16" pos:column="45"/></name><operator pos:line="16" pos:column="45">++<pos:position pos:line="16" pos:column="47"/></operator></expr></incr>)<pos:position pos:line="16" pos:column="48"/></control> <block pos:line="16" pos:column="49">{
                                <expr_stmt><expr><call><name pos:line="17" pos:column="33">REVERSE64<pos:position pos:line="17" pos:column="42"/></name><argument_list pos:line="17" pos:column="42">(<argument><expr><name><name pos:line="17" pos:column="43">context<pos:position pos:line="17" pos:column="50"/></name><operator pos:line="17" pos:column="50">-&gt;<pos:position pos:line="17" pos:column="55"/></operator><name pos:line="17" pos:column="52">state<pos:position pos:line="17" pos:column="57"/></name><index pos:line="17" pos:column="57">[<expr><name pos:line="17" pos:column="58">j<pos:position pos:line="17" pos:column="59"/></name></expr>]<pos:position pos:line="17" pos:column="60"/></index></name></expr></argument>,<argument><expr><name><name pos:line="17" pos:column="61">context<pos:position pos:line="17" pos:column="68"/></name><operator pos:line="17" pos:column="68">-&gt;<pos:position pos:line="17" pos:column="73"/></operator><name pos:line="17" pos:column="70">state<pos:position pos:line="17" pos:column="75"/></name><index pos:line="17" pos:column="75">[<expr><name pos:line="17" pos:column="76">j<pos:position pos:line="17" pos:column="77"/></name></expr>]<pos:position pos:line="17" pos:column="78"/></index></name></expr></argument>)<pos:position pos:line="17" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="80"/></expr_stmt>
                                <expr_stmt><expr><operator pos:line="18" pos:column="33">*<pos:position pos:line="18" pos:column="34"/></operator><name pos:line="18" pos:column="34">d<pos:position pos:line="18" pos:column="35"/></name><operator pos:line="18" pos:column="35">++<pos:position pos:line="18" pos:column="37"/></operator> <operator pos:line="18" pos:column="38">=<pos:position pos:line="18" pos:column="39"/></operator> <name><name pos:line="18" pos:column="40">context<pos:position pos:line="18" pos:column="47"/></name><operator pos:line="18" pos:column="47">-&gt;<pos:position pos:line="18" pos:column="52"/></operator><name pos:line="18" pos:column="49">state<pos:position pos:line="18" pos:column="54"/></name><index pos:line="18" pos:column="54">[<expr><name pos:line="18" pos:column="55">j<pos:position pos:line="18" pos:column="56"/></name></expr>]<pos:position pos:line="18" pos:column="57"/></index></name></expr>;<pos:position pos:line="18" pos:column="58"/></expr_stmt>
                        }<pos:position pos:line="19" pos:column="26"/></block></for>
                }<pos:position pos:line="20" pos:column="18"/></block>
<cpp:else pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">else<pos:position pos:line="21" pos:column="6"/></cpp:directive></cpp:else> <comment type="block" pos:line="21" pos:column="7">/* APR_IS_BIGENDIAN */</comment>
                <expr_stmt><expr><call><name pos:line="22" pos:column="17">MEMCPY_BCOPY<pos:position pos:line="22" pos:column="29"/></name><argument_list pos:line="22" pos:column="29">(<argument><expr><name pos:line="22" pos:column="30">d<pos:position pos:line="22" pos:column="31"/></name></expr></argument>, <argument><expr><name><name pos:line="22" pos:column="33">context<pos:position pos:line="22" pos:column="40"/></name><operator pos:line="22" pos:column="40">-&gt;<pos:position pos:line="22" pos:column="45"/></operator><name pos:line="22" pos:column="42">state<pos:position pos:line="22" pos:column="47"/></name></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="49">SHA384_DIGEST_LENGTH<pos:position pos:line="22" pos:column="69"/></name></expr></argument>)<pos:position pos:line="22" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="71"/></expr_stmt>
<cpp:endif pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">endif<pos:position pos:line="23" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="23" pos:column="8">/* APR_IS_BIGENDIAN */</comment>
        }<pos:position pos:line="24" pos:column="10"/></block></then></if>

        <comment type="block" pos:line="26" pos:column="9">/* Zero out state data */</comment>
        <expr_stmt><expr><call><name pos:line="27" pos:column="9">MEMSET_BZERO<pos:position pos:line="27" pos:column="21"/></name><argument_list pos:line="27" pos:column="21">(<argument><expr><name pos:line="27" pos:column="22">context<pos:position pos:line="27" pos:column="29"/></name></expr></argument>, <argument><expr><sizeof pos:line="27" pos:column="31">sizeof<argument_list pos:line="27" pos:column="37">(<argument><expr><name pos:line="27" pos:column="38">context<pos:position pos:line="27" pos:column="45"/></name></expr></argument>)<pos:position pos:line="27" pos:column="46"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="27" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="48"/></expr_stmt>
}<pos:position pos:line="28" pos:column="2"/></block></function></unit>
