<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_2096_httpd-2.4.12.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">apr_status_t<pos:position pos:line="1" pos:column="20"/></name></type> <name pos:line="1" pos:column="21">dispatch<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name pos:line="1" pos:column="30">proxy_conn_rec<pos:position pos:line="1" pos:column="44"/></name> <modifier pos:line="1" pos:column="45">*<pos:position pos:line="1" pos:column="46"/></modifier></type><name pos:line="1" pos:column="46">conn<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="52">proxy_dir_conf<pos:position pos:line="1" pos:column="66"/></name> <modifier pos:line="1" pos:column="67">*<pos:position pos:line="1" pos:column="68"/></modifier></type><name pos:line="1" pos:column="68">conf<pos:position pos:line="1" pos:column="72"/></name></decl></parameter>,
                             <parameter><decl><type><name pos:line="2" pos:column="30">request_rec<pos:position pos:line="2" pos:column="41"/></name> <modifier pos:line="2" pos:column="42">*<pos:position pos:line="2" pos:column="43"/></modifier></type><name pos:line="2" pos:column="43">r<pos:position pos:line="2" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="46">apr_pool_t<pos:position pos:line="2" pos:column="56"/></name> <modifier pos:line="2" pos:column="57">*<pos:position pos:line="2" pos:column="58"/></modifier></type><name pos:line="2" pos:column="58">setaside_pool<pos:position pos:line="2" pos:column="71"/></name></decl></parameter>,
                             <parameter><decl><type><name pos:line="3" pos:column="30">apr_uint16_t<pos:position pos:line="3" pos:column="42"/></name></type> <name pos:line="3" pos:column="43">request_id<pos:position pos:line="3" pos:column="53"/></name></decl></parameter>,
                             <parameter><decl><type><specifier pos:line="4" pos:column="30">const<pos:position pos:line="4" pos:column="35"/></specifier> <name pos:line="4" pos:column="36">char<pos:position pos:line="4" pos:column="40"/></name> <modifier pos:line="4" pos:column="41">*<pos:position pos:line="4" pos:column="42"/></modifier><modifier pos:line="4" pos:column="42">*<pos:position pos:line="4" pos:column="43"/></modifier></type><name pos:line="4" pos:column="43">err<pos:position pos:line="4" pos:column="46"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="47"/></parameter_list>
<block pos:line="5" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">apr_bucket_brigade<pos:position pos:line="6" pos:column="23"/></name> <modifier pos:line="6" pos:column="24">*<pos:position pos:line="6" pos:column="25"/></modifier></type><name pos:line="6" pos:column="25">ib<pos:position pos:line="6" pos:column="27"/></name></decl>, <modifier pos:line="6" pos:column="29">*<pos:position pos:line="6" pos:column="30"/></modifier><decl><type ref="prev"/><name pos:line="6" pos:column="30">ob<pos:position pos:line="6" pos:column="32"/></name></decl>;<pos:position pos:line="6" pos:column="33"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">int<pos:position pos:line="7" pos:column="8"/></name></type> <name pos:line="7" pos:column="9">seen_end_of_headers<pos:position pos:line="7" pos:column="28"/></name> <init pos:line="7" pos:column="29">= <expr><literal type="number" pos:line="7" pos:column="31">0<pos:position pos:line="7" pos:column="32"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="7" pos:column="34">done<pos:position pos:line="7" pos:column="38"/></name> <init pos:line="7" pos:column="39">= <expr><literal type="number" pos:line="7" pos:column="41">0<pos:position pos:line="7" pos:column="42"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="7" pos:column="44">ignore_body<pos:position pos:line="7" pos:column="55"/></name> <init pos:line="7" pos:column="56">= <expr><literal type="number" pos:line="7" pos:column="58">0<pos:position pos:line="7" pos:column="59"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="60"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">apr_status_t<pos:position pos:line="8" pos:column="17"/></name></type> <name pos:line="8" pos:column="18">rv<pos:position pos:line="8" pos:column="20"/></name> <init pos:line="8" pos:column="21">= <expr><name pos:line="8" pos:column="23">APR_SUCCESS<pos:position pos:line="8" pos:column="34"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="35"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">int<pos:position pos:line="9" pos:column="8"/></name></type> <name pos:line="9" pos:column="9">script_error_status<pos:position pos:line="9" pos:column="28"/></name> <init pos:line="9" pos:column="29">= <expr><name pos:line="9" pos:column="31">HTTP_OK<pos:position pos:line="9" pos:column="38"/></name></expr></init></decl>;<pos:position pos:line="9" pos:column="39"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">conn_rec<pos:position pos:line="10" pos:column="13"/></name> <modifier pos:line="10" pos:column="14">*<pos:position pos:line="10" pos:column="15"/></modifier></type><name pos:line="10" pos:column="15">c<pos:position pos:line="10" pos:column="16"/></name> <init pos:line="10" pos:column="17">= <expr><name><name pos:line="10" pos:column="19">r<pos:position pos:line="10" pos:column="20"/></name><operator pos:line="10" pos:column="20">-&gt;<pos:position pos:line="10" pos:column="25"/></operator><name pos:line="10" pos:column="22">connection<pos:position pos:line="10" pos:column="32"/></name></name></expr></init></decl>;<pos:position pos:line="10" pos:column="33"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="11" pos:column="5">struct<pos:position pos:line="11" pos:column="11"/></name> <name pos:line="11" pos:column="12">iovec<pos:position pos:line="11" pos:column="17"/></name></name></type> <name><name pos:line="11" pos:column="18">vec<pos:position pos:line="11" pos:column="21"/></name><index pos:line="11" pos:column="21">[<expr><literal type="number" pos:line="11" pos:column="22">2<pos:position pos:line="11" pos:column="23"/></literal></expr>]<pos:position pos:line="11" pos:column="24"/></index></name></decl>;<pos:position pos:line="11" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="12" pos:column="5">ap_fcgi_header<pos:position pos:line="12" pos:column="19"/></name></type> <name pos:line="12" pos:column="20">header<pos:position pos:line="12" pos:column="26"/></name></decl>;<pos:position pos:line="12" pos:column="27"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="13" pos:column="5">unsigned<pos:position pos:line="13" pos:column="13"/></name> <name pos:line="13" pos:column="14">char<pos:position pos:line="13" pos:column="18"/></name></type> <name><name pos:line="13" pos:column="19">farray<pos:position pos:line="13" pos:column="25"/></name><index pos:line="13" pos:column="25">[<expr><name pos:line="13" pos:column="26">AP_FCGI_HEADER_LEN<pos:position pos:line="13" pos:column="44"/></name></expr>]<pos:position pos:line="13" pos:column="45"/></index></name></decl>;<pos:position pos:line="13" pos:column="46"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="14" pos:column="5">apr_pollfd_t<pos:position pos:line="14" pos:column="17"/></name></type> <name pos:line="14" pos:column="18">pfd<pos:position pos:line="14" pos:column="21"/></name></decl>;<pos:position pos:line="14" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="15" pos:column="5">int<pos:position pos:line="15" pos:column="8"/></name></type> <name pos:line="15" pos:column="9">header_state<pos:position pos:line="15" pos:column="21"/></name> <init pos:line="15" pos:column="22">= <expr><name pos:line="15" pos:column="24">HDR_STATE_READING_HEADERS<pos:position pos:line="15" pos:column="49"/></name></expr></init></decl>;<pos:position pos:line="15" pos:column="50"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="16" pos:column="5">char<pos:position pos:line="16" pos:column="9"/></name></type> <name><name pos:line="16" pos:column="10">stack_iobuf<pos:position pos:line="16" pos:column="21"/></name><index pos:line="16" pos:column="21">[<expr><name pos:line="16" pos:column="22">AP_IOBUFSIZE<pos:position pos:line="16" pos:column="34"/></name></expr>]<pos:position pos:line="16" pos:column="35"/></index></name></decl>;<pos:position pos:line="16" pos:column="36"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="17" pos:column="5">apr_size_t<pos:position pos:line="17" pos:column="15"/></name></type> <name pos:line="17" pos:column="16">iobuf_size<pos:position pos:line="17" pos:column="26"/></name> <init pos:line="17" pos:column="27">= <expr><name pos:line="17" pos:column="29">AP_IOBUFSIZE<pos:position pos:line="17" pos:column="41"/></name></expr></init></decl>;<pos:position pos:line="17" pos:column="42"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="18" pos:column="5">char<pos:position pos:line="18" pos:column="9"/></name> <modifier pos:line="18" pos:column="10">*<pos:position pos:line="18" pos:column="11"/></modifier></type><name pos:line="18" pos:column="11">iobuf<pos:position pos:line="18" pos:column="16"/></name> <init pos:line="18" pos:column="17">= <expr><name pos:line="18" pos:column="19">stack_iobuf<pos:position pos:line="18" pos:column="30"/></name></expr></init></decl>;<pos:position pos:line="18" pos:column="31"/></decl_stmt>

    <expr_stmt><expr><operator pos:line="20" pos:column="5">*<pos:position pos:line="20" pos:column="6"/></operator><name pos:line="20" pos:column="6">err<pos:position pos:line="20" pos:column="9"/></name> <operator pos:line="20" pos:column="10">=<pos:position pos:line="20" pos:column="11"/></operator> <name pos:line="20" pos:column="12">NULL<pos:position pos:line="20" pos:column="16"/></name></expr>;<pos:position pos:line="20" pos:column="17"/></expr_stmt>
    <if pos:line="21" pos:column="5">if <condition pos:line="21" pos:column="8">(<expr><name><name pos:line="21" pos:column="9">conn<pos:position pos:line="21" pos:column="13"/></name><operator pos:line="21" pos:column="13">-&gt;<pos:position pos:line="21" pos:column="18"/></operator><name pos:line="21" pos:column="15">worker<pos:position pos:line="21" pos:column="21"/></name><operator pos:line="21" pos:column="21">-&gt;<pos:position pos:line="21" pos:column="26"/></operator><name pos:line="21" pos:column="23">s<pos:position pos:line="21" pos:column="24"/></name><operator pos:line="21" pos:column="24">-&gt;<pos:position pos:line="21" pos:column="29"/></operator><name pos:line="21" pos:column="26">io_buffer_size_set<pos:position pos:line="21" pos:column="44"/></name></name></expr>)<pos:position pos:line="21" pos:column="45"/></condition><then pos:line="21" pos:column="45"> <block pos:line="21" pos:column="46">{
        <expr_stmt><expr><name pos:line="22" pos:column="9">iobuf_size<pos:position pos:line="22" pos:column="19"/></name> <operator pos:line="22" pos:column="20">=<pos:position pos:line="22" pos:column="21"/></operator> <name><name pos:line="22" pos:column="22">conn<pos:position pos:line="22" pos:column="26"/></name><operator pos:line="22" pos:column="26">-&gt;<pos:position pos:line="22" pos:column="31"/></operator><name pos:line="22" pos:column="28">worker<pos:position pos:line="22" pos:column="34"/></name><operator pos:line="22" pos:column="34">-&gt;<pos:position pos:line="22" pos:column="39"/></operator><name pos:line="22" pos:column="36">s<pos:position pos:line="22" pos:column="37"/></name><operator pos:line="22" pos:column="37">-&gt;<pos:position pos:line="22" pos:column="42"/></operator><name pos:line="22" pos:column="39">io_buffer_size<pos:position pos:line="22" pos:column="53"/></name></name></expr>;<pos:position pos:line="22" pos:column="54"/></expr_stmt>
        <expr_stmt><expr><name pos:line="23" pos:column="9">iobuf<pos:position pos:line="23" pos:column="14"/></name> <operator pos:line="23" pos:column="15">=<pos:position pos:line="23" pos:column="16"/></operator> <call><name pos:line="23" pos:column="17">apr_palloc<pos:position pos:line="23" pos:column="27"/></name><argument_list pos:line="23" pos:column="27">(<argument><expr><name><name pos:line="23" pos:column="28">r<pos:position pos:line="23" pos:column="29"/></name><operator pos:line="23" pos:column="29">-&gt;<pos:position pos:line="23" pos:column="34"/></operator><name pos:line="23" pos:column="31">pool<pos:position pos:line="23" pos:column="35"/></name></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="37">iobuf_size<pos:position pos:line="23" pos:column="47"/></name></expr></argument>)<pos:position pos:line="23" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="49"/></expr_stmt>
    }<pos:position pos:line="24" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name><name pos:line="26" pos:column="5">pfd<pos:position pos:line="26" pos:column="8"/></name><operator pos:line="26" pos:column="8">.<pos:position pos:line="26" pos:column="9"/></operator><name pos:line="26" pos:column="9">desc_type<pos:position pos:line="26" pos:column="18"/></name></name> <operator pos:line="26" pos:column="19">=<pos:position pos:line="26" pos:column="20"/></operator> <name pos:line="26" pos:column="21">APR_POLL_SOCKET<pos:position pos:line="26" pos:column="36"/></name></expr>;<pos:position pos:line="26" pos:column="37"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="27" pos:column="5">pfd<pos:position pos:line="27" pos:column="8"/></name><operator pos:line="27" pos:column="8">.<pos:position pos:line="27" pos:column="9"/></operator><name pos:line="27" pos:column="9">desc<pos:position pos:line="27" pos:column="13"/></name><operator pos:line="27" pos:column="13">.<pos:position pos:line="27" pos:column="14"/></operator><name pos:line="27" pos:column="14">s<pos:position pos:line="27" pos:column="15"/></name></name> <operator pos:line="27" pos:column="16">=<pos:position pos:line="27" pos:column="17"/></operator> <name><name pos:line="27" pos:column="18">conn<pos:position pos:line="27" pos:column="22"/></name><operator pos:line="27" pos:column="22">-&gt;<pos:position pos:line="27" pos:column="27"/></operator><name pos:line="27" pos:column="24">sock<pos:position pos:line="27" pos:column="28"/></name></name></expr>;<pos:position pos:line="27" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="28" pos:column="5">pfd<pos:position pos:line="28" pos:column="8"/></name><operator pos:line="28" pos:column="8">.<pos:position pos:line="28" pos:column="9"/></operator><name pos:line="28" pos:column="9">p<pos:position pos:line="28" pos:column="10"/></name></name> <operator pos:line="28" pos:column="11">=<pos:position pos:line="28" pos:column="12"/></operator> <name><name pos:line="28" pos:column="13">r<pos:position pos:line="28" pos:column="14"/></name><operator pos:line="28" pos:column="14">-&gt;<pos:position pos:line="28" pos:column="19"/></operator><name pos:line="28" pos:column="16">pool<pos:position pos:line="28" pos:column="20"/></name></name></expr>;<pos:position pos:line="28" pos:column="21"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="29" pos:column="5">pfd<pos:position pos:line="29" pos:column="8"/></name><operator pos:line="29" pos:column="8">.<pos:position pos:line="29" pos:column="9"/></operator><name pos:line="29" pos:column="9">reqevents<pos:position pos:line="29" pos:column="18"/></name></name> <operator pos:line="29" pos:column="19">=<pos:position pos:line="29" pos:column="20"/></operator> <name pos:line="29" pos:column="21">APR_POLLIN<pos:position pos:line="29" pos:column="31"/></name> <operator pos:line="29" pos:column="32">|<pos:position pos:line="29" pos:column="33"/></operator> <name pos:line="29" pos:column="34">APR_POLLOUT<pos:position pos:line="29" pos:column="45"/></name></expr>;<pos:position pos:line="29" pos:column="46"/></expr_stmt>

    <expr_stmt><expr><name pos:line="31" pos:column="5">ib<pos:position pos:line="31" pos:column="7"/></name> <operator pos:line="31" pos:column="8">=<pos:position pos:line="31" pos:column="9"/></operator> <call><name pos:line="31" pos:column="10">apr_brigade_create<pos:position pos:line="31" pos:column="28"/></name><argument_list pos:line="31" pos:column="28">(<argument><expr><name><name pos:line="31" pos:column="29">r<pos:position pos:line="31" pos:column="30"/></name><operator pos:line="31" pos:column="30">-&gt;<pos:position pos:line="31" pos:column="35"/></operator><name pos:line="31" pos:column="32">pool<pos:position pos:line="31" pos:column="36"/></name></name></expr></argument>, <argument><expr><name><name pos:line="31" pos:column="38">c<pos:position pos:line="31" pos:column="39"/></name><operator pos:line="31" pos:column="39">-&gt;<pos:position pos:line="31" pos:column="44"/></operator><name pos:line="31" pos:column="41">bucket_alloc<pos:position pos:line="31" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="31" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="55"/></expr_stmt>
    <expr_stmt><expr><name pos:line="32" pos:column="5">ob<pos:position pos:line="32" pos:column="7"/></name> <operator pos:line="32" pos:column="8">=<pos:position pos:line="32" pos:column="9"/></operator> <call><name pos:line="32" pos:column="10">apr_brigade_create<pos:position pos:line="32" pos:column="28"/></name><argument_list pos:line="32" pos:column="28">(<argument><expr><name><name pos:line="32" pos:column="29">r<pos:position pos:line="32" pos:column="30"/></name><operator pos:line="32" pos:column="30">-&gt;<pos:position pos:line="32" pos:column="35"/></operator><name pos:line="32" pos:column="32">pool<pos:position pos:line="32" pos:column="36"/></name></name></expr></argument>, <argument><expr><name><name pos:line="32" pos:column="38">c<pos:position pos:line="32" pos:column="39"/></name><operator pos:line="32" pos:column="39">-&gt;<pos:position pos:line="32" pos:column="44"/></operator><name pos:line="32" pos:column="41">bucket_alloc<pos:position pos:line="32" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="32" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="55"/></expr_stmt>

    <while pos:line="34" pos:column="5">while <condition pos:line="34" pos:column="11">(<expr><operator pos:line="34" pos:column="12">!<pos:position pos:line="34" pos:column="13"/></operator> <name pos:line="34" pos:column="14">done<pos:position pos:line="34" pos:column="18"/></name></expr>)<pos:position pos:line="34" pos:column="19"/></condition> <block pos:line="34" pos:column="20">{
        <decl_stmt><decl><type><name pos:line="35" pos:column="9">apr_interval_time_t<pos:position pos:line="35" pos:column="28"/></name></type> <name pos:line="35" pos:column="29">timeout<pos:position pos:line="35" pos:column="36"/></name></decl>;<pos:position pos:line="35" pos:column="37"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="36" pos:column="9">apr_size_t<pos:position pos:line="36" pos:column="19"/></name></type> <name pos:line="36" pos:column="20">len<pos:position pos:line="36" pos:column="23"/></name></decl>;<pos:position pos:line="36" pos:column="24"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="37" pos:column="9">int<pos:position pos:line="37" pos:column="12"/></name></type> <name pos:line="37" pos:column="13">n<pos:position pos:line="37" pos:column="14"/></name></decl>;<pos:position pos:line="37" pos:column="15"/></decl_stmt>

        <comment type="block" pos:line="39" pos:column="9">/* We need SOME kind of timeout here, or virtually anything will
         * cause timeout errors. */</comment>
        <expr_stmt><expr><call><name pos:line="41" pos:column="9">apr_socket_timeout_get<pos:position pos:line="41" pos:column="31"/></name><argument_list pos:line="41" pos:column="31">(<argument><expr><name><name pos:line="41" pos:column="32">conn<pos:position pos:line="41" pos:column="36"/></name><operator pos:line="41" pos:column="36">-&gt;<pos:position pos:line="41" pos:column="41"/></operator><name pos:line="41" pos:column="38">sock<pos:position pos:line="41" pos:column="42"/></name></name></expr></argument>, <argument><expr><operator pos:line="41" pos:column="44">&amp;<pos:position pos:line="41" pos:column="49"/></operator><name pos:line="41" pos:column="45">timeout<pos:position pos:line="41" pos:column="52"/></name></expr></argument>)<pos:position pos:line="41" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="54"/></expr_stmt>

        <expr_stmt><expr><name pos:line="43" pos:column="9">rv<pos:position pos:line="43" pos:column="11"/></name> <operator pos:line="43" pos:column="12">=<pos:position pos:line="43" pos:column="13"/></operator> <call><name pos:line="43" pos:column="14">apr_poll<pos:position pos:line="43" pos:column="22"/></name><argument_list pos:line="43" pos:column="22">(<argument><expr><operator pos:line="43" pos:column="23">&amp;<pos:position pos:line="43" pos:column="28"/></operator><name pos:line="43" pos:column="24">pfd<pos:position pos:line="43" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="43" pos:column="29">1<pos:position pos:line="43" pos:column="30"/></literal></expr></argument>, <argument><expr><operator pos:line="43" pos:column="32">&amp;<pos:position pos:line="43" pos:column="37"/></operator><name pos:line="43" pos:column="33">n<pos:position pos:line="43" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="36">timeout<pos:position pos:line="43" pos:column="43"/></name></expr></argument>)<pos:position pos:line="43" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="45"/></expr_stmt>
        <if pos:line="44" pos:column="9">if <condition pos:line="44" pos:column="12">(<expr><name pos:line="44" pos:column="13">rv<pos:position pos:line="44" pos:column="15"/></name> <operator pos:line="44" pos:column="16">!=<pos:position pos:line="44" pos:column="18"/></operator> <name pos:line="44" pos:column="19">APR_SUCCESS<pos:position pos:line="44" pos:column="30"/></name></expr>)<pos:position pos:line="44" pos:column="31"/></condition><then pos:line="44" pos:column="31"> <block pos:line="44" pos:column="32">{
            <if pos:line="45" pos:column="13">if <condition pos:line="45" pos:column="16">(<expr><call><name pos:line="45" pos:column="17">APR_STATUS_IS_EINTR<pos:position pos:line="45" pos:column="36"/></name><argument_list pos:line="45" pos:column="36">(<argument><expr><name pos:line="45" pos:column="37">rv<pos:position pos:line="45" pos:column="39"/></name></expr></argument>)<pos:position pos:line="45" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="45" pos:column="41"/></condition><then pos:line="45" pos:column="41"> <block pos:line="45" pos:column="42">{
                <continue pos:line="46" pos:column="17">continue;<pos:position pos:line="46" pos:column="26"/></continue>
            }<pos:position pos:line="47" pos:column="14"/></block></then></if>
            <expr_stmt><expr><operator pos:line="48" pos:column="13">*<pos:position pos:line="48" pos:column="14"/></operator><name pos:line="48" pos:column="14">err<pos:position pos:line="48" pos:column="17"/></name> <operator pos:line="48" pos:column="18">=<pos:position pos:line="48" pos:column="19"/></operator> <literal type="string" pos:line="48" pos:column="20">"polling"<pos:position pos:line="48" pos:column="29"/></literal></expr>;<pos:position pos:line="48" pos:column="30"/></expr_stmt>
            <break pos:line="49" pos:column="13">break;<pos:position pos:line="49" pos:column="19"/></break>
        }<pos:position pos:line="50" pos:column="10"/></block></then></if>

        <if pos:line="52" pos:column="9">if <condition pos:line="52" pos:column="12">(<expr><name><name pos:line="52" pos:column="13">pfd<pos:position pos:line="52" pos:column="16"/></name><operator pos:line="52" pos:column="16">.<pos:position pos:line="52" pos:column="17"/></operator><name pos:line="52" pos:column="17">rtnevents<pos:position pos:line="52" pos:column="26"/></name></name> <operator pos:line="52" pos:column="27">&amp;<pos:position pos:line="52" pos:column="32"/></operator> <name pos:line="52" pos:column="29">APR_POLLOUT<pos:position pos:line="52" pos:column="40"/></name></expr>)<pos:position pos:line="52" pos:column="41"/></condition><then pos:line="52" pos:column="41"> <block pos:line="52" pos:column="42">{
            <decl_stmt><decl><type><name pos:line="53" pos:column="13">apr_size_t<pos:position pos:line="53" pos:column="23"/></name></type> <name pos:line="53" pos:column="24">to_send<pos:position pos:line="53" pos:column="31"/></name></decl>, <decl><type ref="prev"/><name pos:line="53" pos:column="33">writebuflen<pos:position pos:line="53" pos:column="44"/></name></decl>;<pos:position pos:line="53" pos:column="45"/></decl_stmt>
            <decl_stmt><decl><type><name pos:line="54" pos:column="13">int<pos:position pos:line="54" pos:column="16"/></name></type> <name pos:line="54" pos:column="17">last_stdin<pos:position pos:line="54" pos:column="27"/></name> <init pos:line="54" pos:column="28">= <expr><literal type="number" pos:line="54" pos:column="30">0<pos:position pos:line="54" pos:column="31"/></literal></expr></init></decl>;<pos:position pos:line="54" pos:column="32"/></decl_stmt>
            <decl_stmt><decl><type><name pos:line="55" pos:column="13">char<pos:position pos:line="55" pos:column="17"/></name> <modifier pos:line="55" pos:column="18">*<pos:position pos:line="55" pos:column="19"/></modifier></type><name pos:line="55" pos:column="19">iobuf_cursor<pos:position pos:line="55" pos:column="31"/></name></decl>;<pos:position pos:line="55" pos:column="32"/></decl_stmt>

            <expr_stmt><expr><name pos:line="57" pos:column="13">rv<pos:position pos:line="57" pos:column="15"/></name> <operator pos:line="57" pos:column="16">=<pos:position pos:line="57" pos:column="17"/></operator> <call><name pos:line="57" pos:column="18">ap_get_brigade<pos:position pos:line="57" pos:column="32"/></name><argument_list pos:line="57" pos:column="32">(<argument><expr><name><name pos:line="57" pos:column="33">r<pos:position pos:line="57" pos:column="34"/></name><operator pos:line="57" pos:column="34">-&gt;<pos:position pos:line="57" pos:column="39"/></operator><name pos:line="57" pos:column="36">input_filters<pos:position pos:line="57" pos:column="49"/></name></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="51">ib<pos:position pos:line="57" pos:column="53"/></name></expr></argument>,
                                <argument><expr><name pos:line="58" pos:column="33">AP_MODE_READBYTES<pos:position pos:line="58" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="52">APR_BLOCK_READ<pos:position pos:line="58" pos:column="66"/></name></expr></argument>,
                                <argument><expr><name pos:line="59" pos:column="33">iobuf_size<pos:position pos:line="59" pos:column="43"/></name></expr></argument>)<pos:position pos:line="59" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="45"/></expr_stmt>
            <if pos:line="60" pos:column="13">if <condition pos:line="60" pos:column="16">(<expr><name pos:line="60" pos:column="17">rv<pos:position pos:line="60" pos:column="19"/></name> <operator pos:line="60" pos:column="20">!=<pos:position pos:line="60" pos:column="22"/></operator> <name pos:line="60" pos:column="23">APR_SUCCESS<pos:position pos:line="60" pos:column="34"/></name></expr>)<pos:position pos:line="60" pos:column="35"/></condition><then pos:line="60" pos:column="35"> <block pos:line="60" pos:column="36">{
                <expr_stmt><expr><operator pos:line="61" pos:column="17">*<pos:position pos:line="61" pos:column="18"/></operator><name pos:line="61" pos:column="18">err<pos:position pos:line="61" pos:column="21"/></name> <operator pos:line="61" pos:column="22">=<pos:position pos:line="61" pos:column="23"/></operator> <literal type="string" pos:line="61" pos:column="24">"reading input brigade"<pos:position pos:line="61" pos:column="47"/></literal></expr>;<pos:position pos:line="61" pos:column="48"/></expr_stmt>
                <break pos:line="62" pos:column="17">break;<pos:position pos:line="62" pos:column="23"/></break>
            }<pos:position pos:line="63" pos:column="14"/></block></then></if>

            <if pos:line="65" pos:column="13">if <condition pos:line="65" pos:column="16">(<expr><call><name pos:line="65" pos:column="17">APR_BUCKET_IS_EOS<pos:position pos:line="65" pos:column="34"/></name><argument_list pos:line="65" pos:column="34">(<argument><expr><call><name pos:line="65" pos:column="35">APR_BRIGADE_LAST<pos:position pos:line="65" pos:column="51"/></name><argument_list pos:line="65" pos:column="51">(<argument><expr><name pos:line="65" pos:column="52">ib<pos:position pos:line="65" pos:column="54"/></name></expr></argument>)<pos:position pos:line="65" pos:column="55"/></argument_list></call></expr></argument>)<pos:position pos:line="65" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="65" pos:column="57"/></condition><then pos:line="65" pos:column="57"> <block pos:line="65" pos:column="58">{
                <expr_stmt><expr><name pos:line="66" pos:column="17">last_stdin<pos:position pos:line="66" pos:column="27"/></name> <operator pos:line="66" pos:column="28">=<pos:position pos:line="66" pos:column="29"/></operator> <literal type="number" pos:line="66" pos:column="30">1<pos:position pos:line="66" pos:column="31"/></literal></expr>;<pos:position pos:line="66" pos:column="32"/></expr_stmt>
            }<pos:position pos:line="67" pos:column="14"/></block></then></if>

            <expr_stmt><expr><name pos:line="69" pos:column="13">writebuflen<pos:position pos:line="69" pos:column="24"/></name> <operator pos:line="69" pos:column="25">=<pos:position pos:line="69" pos:column="26"/></operator> <name pos:line="69" pos:column="27">iobuf_size<pos:position pos:line="69" pos:column="37"/></name></expr>;<pos:position pos:line="69" pos:column="38"/></expr_stmt>

            <expr_stmt><expr><name pos:line="71" pos:column="13">rv<pos:position pos:line="71" pos:column="15"/></name> <operator pos:line="71" pos:column="16">=<pos:position pos:line="71" pos:column="17"/></operator> <call><name pos:line="71" pos:column="18">apr_brigade_flatten<pos:position pos:line="71" pos:column="37"/></name><argument_list pos:line="71" pos:column="37">(<argument><expr><name pos:line="71" pos:column="38">ib<pos:position pos:line="71" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="71" pos:column="42">iobuf<pos:position pos:line="71" pos:column="47"/></name></expr></argument>, <argument><expr><operator pos:line="71" pos:column="49">&amp;<pos:position pos:line="71" pos:column="54"/></operator><name pos:line="71" pos:column="50">writebuflen<pos:position pos:line="71" pos:column="61"/></name></expr></argument>)<pos:position pos:line="71" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="63"/></expr_stmt>

            <expr_stmt><expr><call><name pos:line="73" pos:column="13">apr_brigade_cleanup<pos:position pos:line="73" pos:column="32"/></name><argument_list pos:line="73" pos:column="32">(<argument><expr><name pos:line="73" pos:column="33">ib<pos:position pos:line="73" pos:column="35"/></name></expr></argument>)<pos:position pos:line="73" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="37"/></expr_stmt>

            <if pos:line="75" pos:column="13">if <condition pos:line="75" pos:column="16">(<expr><name pos:line="75" pos:column="17">rv<pos:position pos:line="75" pos:column="19"/></name> <operator pos:line="75" pos:column="20">!=<pos:position pos:line="75" pos:column="22"/></operator> <name pos:line="75" pos:column="23">APR_SUCCESS<pos:position pos:line="75" pos:column="34"/></name></expr>)<pos:position pos:line="75" pos:column="35"/></condition><then pos:line="75" pos:column="35"> <block pos:line="75" pos:column="36">{
                <expr_stmt><expr><operator pos:line="76" pos:column="17">*<pos:position pos:line="76" pos:column="18"/></operator><name pos:line="76" pos:column="18">err<pos:position pos:line="76" pos:column="21"/></name> <operator pos:line="76" pos:column="22">=<pos:position pos:line="76" pos:column="23"/></operator> <literal type="string" pos:line="76" pos:column="24">"flattening brigade"<pos:position pos:line="76" pos:column="44"/></literal></expr>;<pos:position pos:line="76" pos:column="45"/></expr_stmt>
                <break pos:line="77" pos:column="17">break;<pos:position pos:line="77" pos:column="23"/></break>
            }<pos:position pos:line="78" pos:column="14"/></block></then></if>

            <expr_stmt><expr><name pos:line="80" pos:column="13">to_send<pos:position pos:line="80" pos:column="20"/></name> <operator pos:line="80" pos:column="21">=<pos:position pos:line="80" pos:column="22"/></operator> <name pos:line="80" pos:column="23">writebuflen<pos:position pos:line="80" pos:column="34"/></name></expr>;<pos:position pos:line="80" pos:column="35"/></expr_stmt>
            <expr_stmt><expr><name pos:line="81" pos:column="13">iobuf_cursor<pos:position pos:line="81" pos:column="25"/></name> <operator pos:line="81" pos:column="26">=<pos:position pos:line="81" pos:column="27"/></operator> <name pos:line="81" pos:column="28">iobuf<pos:position pos:line="81" pos:column="33"/></name></expr>;<pos:position pos:line="81" pos:column="34"/></expr_stmt>
            <while pos:line="82" pos:column="13">while <condition pos:line="82" pos:column="19">(<expr><name pos:line="82" pos:column="20">to_send<pos:position pos:line="82" pos:column="27"/></name> <operator pos:line="82" pos:column="28">&gt;<pos:position pos:line="82" pos:column="32"/></operator> <literal type="number" pos:line="82" pos:column="30">0<pos:position pos:line="82" pos:column="31"/></literal></expr>)<pos:position pos:line="82" pos:column="32"/></condition> <block pos:line="82" pos:column="33">{
                <decl_stmt><decl><type><name pos:line="83" pos:column="17">int<pos:position pos:line="83" pos:column="20"/></name></type> <name pos:line="83" pos:column="21">nvec<pos:position pos:line="83" pos:column="25"/></name> <init pos:line="83" pos:column="26">= <expr><literal type="number" pos:line="83" pos:column="28">0<pos:position pos:line="83" pos:column="29"/></literal></expr></init></decl>;<pos:position pos:line="83" pos:column="30"/></decl_stmt>
                <decl_stmt><decl><type><name pos:line="84" pos:column="17">apr_size_t<pos:position pos:line="84" pos:column="27"/></name></type> <name pos:line="84" pos:column="28">write_this_time<pos:position pos:line="84" pos:column="43"/></name></decl>;<pos:position pos:line="84" pos:column="44"/></decl_stmt>

                <expr_stmt><expr><name pos:line="86" pos:column="17">write_this_time<pos:position pos:line="86" pos:column="32"/></name> <operator pos:line="86" pos:column="33">=<pos:position pos:line="86" pos:column="34"/></operator>
                    <ternary><condition><expr><name pos:line="87" pos:column="21">to_send<pos:position pos:line="87" pos:column="28"/></name> <operator pos:line="87" pos:column="29">&lt;<pos:position pos:line="87" pos:column="33"/></operator> <name pos:line="87" pos:column="31">AP_FCGI_MAX_CONTENT_LEN<pos:position pos:line="87" pos:column="54"/></name></expr> ?<pos:position pos:line="87" pos:column="56"/></condition><then pos:line="87" pos:column="56"> <expr><name pos:line="87" pos:column="57">to_send<pos:position pos:line="87" pos:column="64"/></name></expr> <pos:position pos:line="87" pos:column="65"/></then><else pos:line="87" pos:column="65">: <expr><name pos:line="87" pos:column="67">AP_FCGI_MAX_CONTENT_LEN<pos:position pos:line="87" pos:column="90"/></name></expr></else></ternary></expr>;<pos:position pos:line="87" pos:column="91"/></expr_stmt>

                <expr_stmt><expr><call><name pos:line="89" pos:column="17">ap_fcgi_fill_in_header<pos:position pos:line="89" pos:column="39"/></name><argument_list pos:line="89" pos:column="39">(<argument><expr><operator pos:line="89" pos:column="40">&amp;<pos:position pos:line="89" pos:column="45"/></operator><name pos:line="89" pos:column="41">header<pos:position pos:line="89" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="89" pos:column="49">AP_FCGI_STDIN<pos:position pos:line="89" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="89" pos:column="64">request_id<pos:position pos:line="89" pos:column="74"/></name></expr></argument>,
                                       <argument><expr><operator pos:line="90" pos:column="40">(<pos:position pos:line="90" pos:column="41"/></operator><name pos:line="90" pos:column="41">apr_uint16_t<pos:position pos:line="90" pos:column="53"/></name><operator pos:line="90" pos:column="53">)<pos:position pos:line="90" pos:column="54"/></operator><name pos:line="90" pos:column="54">write_this_time<pos:position pos:line="90" pos:column="69"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="90" pos:column="71">0<pos:position pos:line="90" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="90" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="74"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="91" pos:column="17">ap_fcgi_header_to_array<pos:position pos:line="91" pos:column="40"/></name><argument_list pos:line="91" pos:column="40">(<argument><expr><operator pos:line="91" pos:column="41">&amp;<pos:position pos:line="91" pos:column="46"/></operator><name pos:line="91" pos:column="42">header<pos:position pos:line="91" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="91" pos:column="50">farray<pos:position pos:line="91" pos:column="56"/></name></expr></argument>)<pos:position pos:line="91" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="58"/></expr_stmt>

                <expr_stmt><expr><name><name pos:line="93" pos:column="17">vec<pos:position pos:line="93" pos:column="20"/></name><index pos:line="93" pos:column="20">[<expr><name pos:line="93" pos:column="21">nvec<pos:position pos:line="93" pos:column="25"/></name></expr>]<pos:position pos:line="93" pos:column="26"/></index></name><operator pos:line="93" pos:column="26">.<pos:position pos:line="93" pos:column="27"/></operator><name pos:line="93" pos:column="27">iov_base<pos:position pos:line="93" pos:column="35"/></name> <operator pos:line="93" pos:column="36">=<pos:position pos:line="93" pos:column="37"/></operator> <operator pos:line="93" pos:column="38">(<pos:position pos:line="93" pos:column="39"/></operator><name pos:line="93" pos:column="39">void<pos:position pos:line="93" pos:column="43"/></name> <operator pos:line="93" pos:column="44">*<pos:position pos:line="93" pos:column="45"/></operator><operator pos:line="93" pos:column="45">)<pos:position pos:line="93" pos:column="46"/></operator><name pos:line="93" pos:column="46">farray<pos:position pos:line="93" pos:column="52"/></name></expr>;<pos:position pos:line="93" pos:column="53"/></expr_stmt>
                <expr_stmt><expr><name><name pos:line="94" pos:column="17">vec<pos:position pos:line="94" pos:column="20"/></name><index pos:line="94" pos:column="20">[<expr><name pos:line="94" pos:column="21">nvec<pos:position pos:line="94" pos:column="25"/></name></expr>]<pos:position pos:line="94" pos:column="26"/></index></name><operator pos:line="94" pos:column="26">.<pos:position pos:line="94" pos:column="27"/></operator><name pos:line="94" pos:column="27">iov_len<pos:position pos:line="94" pos:column="34"/></name> <operator pos:line="94" pos:column="35">=<pos:position pos:line="94" pos:column="36"/></operator> <sizeof pos:line="94" pos:column="37">sizeof<argument_list pos:line="94" pos:column="43">(<argument><expr><name pos:line="94" pos:column="44">farray<pos:position pos:line="94" pos:column="50"/></name></expr></argument>)<pos:position pos:line="94" pos:column="51"/></argument_list></sizeof></expr>;<pos:position pos:line="94" pos:column="52"/></expr_stmt>
                <expr_stmt><expr><operator pos:line="95" pos:column="17">++<pos:position pos:line="95" pos:column="19"/></operator><name pos:line="95" pos:column="19">nvec<pos:position pos:line="95" pos:column="23"/></name></expr>;<pos:position pos:line="95" pos:column="24"/></expr_stmt>
                <if pos:line="96" pos:column="17">if <condition pos:line="96" pos:column="20">(<expr><name pos:line="96" pos:column="21">writebuflen<pos:position pos:line="96" pos:column="32"/></name></expr>)<pos:position pos:line="96" pos:column="33"/></condition><then pos:line="96" pos:column="33"> <block pos:line="96" pos:column="34">{
                    <expr_stmt><expr><name><name pos:line="97" pos:column="21">vec<pos:position pos:line="97" pos:column="24"/></name><index pos:line="97" pos:column="24">[<expr><name pos:line="97" pos:column="25">nvec<pos:position pos:line="97" pos:column="29"/></name></expr>]<pos:position pos:line="97" pos:column="30"/></index></name><operator pos:line="97" pos:column="30">.<pos:position pos:line="97" pos:column="31"/></operator><name pos:line="97" pos:column="31">iov_base<pos:position pos:line="97" pos:column="39"/></name> <operator pos:line="97" pos:column="40">=<pos:position pos:line="97" pos:column="41"/></operator> <name pos:line="97" pos:column="42">iobuf_cursor<pos:position pos:line="97" pos:column="54"/></name></expr>;<pos:position pos:line="97" pos:column="55"/></expr_stmt>
                    <expr_stmt><expr><name><name pos:line="98" pos:column="21">vec<pos:position pos:line="98" pos:column="24"/></name><index pos:line="98" pos:column="24">[<expr><name pos:line="98" pos:column="25">nvec<pos:position pos:line="98" pos:column="29"/></name></expr>]<pos:position pos:line="98" pos:column="30"/></index></name><operator pos:line="98" pos:column="30">.<pos:position pos:line="98" pos:column="31"/></operator><name pos:line="98" pos:column="31">iov_len<pos:position pos:line="98" pos:column="38"/></name> <operator pos:line="98" pos:column="39">=<pos:position pos:line="98" pos:column="40"/></operator> <name pos:line="98" pos:column="41">write_this_time<pos:position pos:line="98" pos:column="56"/></name></expr>;<pos:position pos:line="98" pos:column="57"/></expr_stmt>
                    <expr_stmt><expr><operator pos:line="99" pos:column="21">++<pos:position pos:line="99" pos:column="23"/></operator><name pos:line="99" pos:column="23">nvec<pos:position pos:line="99" pos:column="27"/></name></expr>;<pos:position pos:line="99" pos:column="28"/></expr_stmt>
                }<pos:position pos:line="100" pos:column="18"/></block></then></if>

                <expr_stmt><expr><name pos:line="102" pos:column="17">rv<pos:position pos:line="102" pos:column="19"/></name> <operator pos:line="102" pos:column="20">=<pos:position pos:line="102" pos:column="21"/></operator> <call><name pos:line="102" pos:column="22">send_data<pos:position pos:line="102" pos:column="31"/></name><argument_list pos:line="102" pos:column="31">(<argument><expr><name pos:line="102" pos:column="32">conn<pos:position pos:line="102" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="102" pos:column="38">vec<pos:position pos:line="102" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="102" pos:column="43">nvec<pos:position pos:line="102" pos:column="47"/></name></expr></argument>, <argument><expr><operator pos:line="102" pos:column="49">&amp;<pos:position pos:line="102" pos:column="54"/></operator><name pos:line="102" pos:column="50">len<pos:position pos:line="102" pos:column="53"/></name></expr></argument>)<pos:position pos:line="102" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="102" pos:column="55"/></expr_stmt>
                <if pos:line="103" pos:column="17">if <condition pos:line="103" pos:column="20">(<expr><name pos:line="103" pos:column="21">rv<pos:position pos:line="103" pos:column="23"/></name> <operator pos:line="103" pos:column="24">!=<pos:position pos:line="103" pos:column="26"/></operator> <name pos:line="103" pos:column="27">APR_SUCCESS<pos:position pos:line="103" pos:column="38"/></name></expr>)<pos:position pos:line="103" pos:column="39"/></condition><then pos:line="103" pos:column="39"> <block pos:line="103" pos:column="40">{
                    <expr_stmt><expr><operator pos:line="104" pos:column="21">*<pos:position pos:line="104" pos:column="22"/></operator><name pos:line="104" pos:column="22">err<pos:position pos:line="104" pos:column="25"/></name> <operator pos:line="104" pos:column="26">=<pos:position pos:line="104" pos:column="27"/></operator> <literal type="string" pos:line="104" pos:column="28">"sending stdin"<pos:position pos:line="104" pos:column="43"/></literal></expr>;<pos:position pos:line="104" pos:column="44"/></expr_stmt>
                    <break pos:line="105" pos:column="21">break;<pos:position pos:line="105" pos:column="27"/></break>
                }<pos:position pos:line="106" pos:column="18"/></block></then></if>

                <expr_stmt><expr><name pos:line="108" pos:column="17">to_send<pos:position pos:line="108" pos:column="24"/></name> <operator pos:line="108" pos:column="25">-=<pos:position pos:line="108" pos:column="27"/></operator> <name pos:line="108" pos:column="28">write_this_time<pos:position pos:line="108" pos:column="43"/></name></expr>;<pos:position pos:line="108" pos:column="44"/></expr_stmt>
                <expr_stmt><expr><name pos:line="109" pos:column="17">iobuf_cursor<pos:position pos:line="109" pos:column="29"/></name> <operator pos:line="109" pos:column="30">+=<pos:position pos:line="109" pos:column="32"/></operator> <name pos:line="109" pos:column="33">write_this_time<pos:position pos:line="109" pos:column="48"/></name></expr>;<pos:position pos:line="109" pos:column="49"/></expr_stmt>
            }<pos:position pos:line="110" pos:column="14"/></block></while>
            <if pos:line="111" pos:column="13">if <condition pos:line="111" pos:column="16">(<expr><name pos:line="111" pos:column="17">rv<pos:position pos:line="111" pos:column="19"/></name> <operator pos:line="111" pos:column="20">!=<pos:position pos:line="111" pos:column="22"/></operator> <name pos:line="111" pos:column="23">APR_SUCCESS<pos:position pos:line="111" pos:column="34"/></name></expr>)<pos:position pos:line="111" pos:column="35"/></condition><then pos:line="111" pos:column="35"> <block pos:line="111" pos:column="36">{
                <break pos:line="112" pos:column="17">break;<pos:position pos:line="112" pos:column="23"/></break>
            }<pos:position pos:line="113" pos:column="14"/></block></then></if>

            <if pos:line="115" pos:column="13">if <condition pos:line="115" pos:column="16">(<expr><name pos:line="115" pos:column="17">last_stdin<pos:position pos:line="115" pos:column="27"/></name></expr>)<pos:position pos:line="115" pos:column="28"/></condition><then pos:line="115" pos:column="28"> <block pos:line="115" pos:column="29">{
                <expr_stmt><expr><name><name pos:line="116" pos:column="17">pfd<pos:position pos:line="116" pos:column="20"/></name><operator pos:line="116" pos:column="20">.<pos:position pos:line="116" pos:column="21"/></operator><name pos:line="116" pos:column="21">reqevents<pos:position pos:line="116" pos:column="30"/></name></name> <operator pos:line="116" pos:column="31">=<pos:position pos:line="116" pos:column="32"/></operator> <name pos:line="116" pos:column="33">APR_POLLIN<pos:position pos:line="116" pos:column="43"/></name></expr>;<pos:position pos:line="116" pos:column="44"/></expr_stmt> <comment type="block" pos:line="116" pos:column="45">/* Done with input data */</comment>

                <comment type="block" pos:line="118" pos:column="17">/* signal EOF (empty FCGI_STDIN) */</comment>
                <expr_stmt><expr><call><name pos:line="119" pos:column="17">ap_fcgi_fill_in_header<pos:position pos:line="119" pos:column="39"/></name><argument_list pos:line="119" pos:column="39">(<argument><expr><operator pos:line="119" pos:column="40">&amp;<pos:position pos:line="119" pos:column="45"/></operator><name pos:line="119" pos:column="41">header<pos:position pos:line="119" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="119" pos:column="49">AP_FCGI_STDIN<pos:position pos:line="119" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="119" pos:column="64">request_id<pos:position pos:line="119" pos:column="74"/></name></expr></argument>,
                                       <argument><expr><literal type="number" pos:line="120" pos:column="40">0<pos:position pos:line="120" pos:column="41"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="120" pos:column="43">0<pos:position pos:line="120" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="120" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="120" pos:column="46"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="121" pos:column="17">ap_fcgi_header_to_array<pos:position pos:line="121" pos:column="40"/></name><argument_list pos:line="121" pos:column="40">(<argument><expr><operator pos:line="121" pos:column="41">&amp;<pos:position pos:line="121" pos:column="46"/></operator><name pos:line="121" pos:column="42">header<pos:position pos:line="121" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="121" pos:column="50">farray<pos:position pos:line="121" pos:column="56"/></name></expr></argument>)<pos:position pos:line="121" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="121" pos:column="58"/></expr_stmt>

                <expr_stmt><expr><name><name pos:line="123" pos:column="17">vec<pos:position pos:line="123" pos:column="20"/></name><index pos:line="123" pos:column="20">[<expr><literal type="number" pos:line="123" pos:column="21">0<pos:position pos:line="123" pos:column="22"/></literal></expr>]<pos:position pos:line="123" pos:column="23"/></index></name><operator pos:line="123" pos:column="23">.<pos:position pos:line="123" pos:column="24"/></operator><name pos:line="123" pos:column="24">iov_base<pos:position pos:line="123" pos:column="32"/></name> <operator pos:line="123" pos:column="33">=<pos:position pos:line="123" pos:column="34"/></operator> <operator pos:line="123" pos:column="35">(<pos:position pos:line="123" pos:column="36"/></operator><name pos:line="123" pos:column="36">void<pos:position pos:line="123" pos:column="40"/></name> <operator pos:line="123" pos:column="41">*<pos:position pos:line="123" pos:column="42"/></operator><operator pos:line="123" pos:column="42">)<pos:position pos:line="123" pos:column="43"/></operator><name pos:line="123" pos:column="43">farray<pos:position pos:line="123" pos:column="49"/></name></expr>;<pos:position pos:line="123" pos:column="50"/></expr_stmt>
                <expr_stmt><expr><name><name pos:line="124" pos:column="17">vec<pos:position pos:line="124" pos:column="20"/></name><index pos:line="124" pos:column="20">[<expr><literal type="number" pos:line="124" pos:column="21">0<pos:position pos:line="124" pos:column="22"/></literal></expr>]<pos:position pos:line="124" pos:column="23"/></index></name><operator pos:line="124" pos:column="23">.<pos:position pos:line="124" pos:column="24"/></operator><name pos:line="124" pos:column="24">iov_len<pos:position pos:line="124" pos:column="31"/></name> <operator pos:line="124" pos:column="32">=<pos:position pos:line="124" pos:column="33"/></operator> <sizeof pos:line="124" pos:column="34">sizeof<argument_list pos:line="124" pos:column="40">(<argument><expr><name pos:line="124" pos:column="41">farray<pos:position pos:line="124" pos:column="47"/></name></expr></argument>)<pos:position pos:line="124" pos:column="48"/></argument_list></sizeof></expr>;<pos:position pos:line="124" pos:column="49"/></expr_stmt>

                <expr_stmt><expr><name pos:line="126" pos:column="17">rv<pos:position pos:line="126" pos:column="19"/></name> <operator pos:line="126" pos:column="20">=<pos:position pos:line="126" pos:column="21"/></operator> <call><name pos:line="126" pos:column="22">send_data<pos:position pos:line="126" pos:column="31"/></name><argument_list pos:line="126" pos:column="31">(<argument><expr><name pos:line="126" pos:column="32">conn<pos:position pos:line="126" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="126" pos:column="38">vec<pos:position pos:line="126" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="126" pos:column="43">1<pos:position pos:line="126" pos:column="44"/></literal></expr></argument>, <argument><expr><operator pos:line="126" pos:column="46">&amp;<pos:position pos:line="126" pos:column="51"/></operator><name pos:line="126" pos:column="47">len<pos:position pos:line="126" pos:column="50"/></name></expr></argument>)<pos:position pos:line="126" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="126" pos:column="52"/></expr_stmt>
                <if pos:line="127" pos:column="17">if <condition pos:line="127" pos:column="20">(<expr><name pos:line="127" pos:column="21">rv<pos:position pos:line="127" pos:column="23"/></name> <operator pos:line="127" pos:column="24">!=<pos:position pos:line="127" pos:column="26"/></operator> <name pos:line="127" pos:column="27">APR_SUCCESS<pos:position pos:line="127" pos:column="38"/></name></expr>)<pos:position pos:line="127" pos:column="39"/></condition><then pos:line="127" pos:column="39"> <block pos:line="127" pos:column="40">{
                    <expr_stmt><expr><operator pos:line="128" pos:column="21">*<pos:position pos:line="128" pos:column="22"/></operator><name pos:line="128" pos:column="22">err<pos:position pos:line="128" pos:column="25"/></name> <operator pos:line="128" pos:column="26">=<pos:position pos:line="128" pos:column="27"/></operator> <literal type="string" pos:line="128" pos:column="28">"sending empty stdin"<pos:position pos:line="128" pos:column="49"/></literal></expr>;<pos:position pos:line="128" pos:column="50"/></expr_stmt>
                    <break pos:line="129" pos:column="21">break;<pos:position pos:line="129" pos:column="27"/></break>
                }<pos:position pos:line="130" pos:column="18"/></block></then></if>
            }<pos:position pos:line="131" pos:column="14"/></block></then></if>
        }<pos:position pos:line="132" pos:column="10"/></block></then></if>

        <if pos:line="134" pos:column="9">if <condition pos:line="134" pos:column="12">(<expr><name><name pos:line="134" pos:column="13">pfd<pos:position pos:line="134" pos:column="16"/></name><operator pos:line="134" pos:column="16">.<pos:position pos:line="134" pos:column="17"/></operator><name pos:line="134" pos:column="17">rtnevents<pos:position pos:line="134" pos:column="26"/></name></name> <operator pos:line="134" pos:column="27">&amp;<pos:position pos:line="134" pos:column="32"/></operator> <name pos:line="134" pos:column="29">APR_POLLIN<pos:position pos:line="134" pos:column="39"/></name></expr>)<pos:position pos:line="134" pos:column="40"/></condition><then pos:line="134" pos:column="40"> <block pos:line="134" pos:column="41">{
            <decl_stmt><decl><type><name pos:line="135" pos:column="13">apr_size_t<pos:position pos:line="135" pos:column="23"/></name></type> <name pos:line="135" pos:column="24">readbuflen<pos:position pos:line="135" pos:column="34"/></name></decl>;<pos:position pos:line="135" pos:column="35"/></decl_stmt>
            <decl_stmt><decl><type><name pos:line="136" pos:column="13">apr_uint16_t<pos:position pos:line="136" pos:column="25"/></name></type> <name pos:line="136" pos:column="26">clen<pos:position pos:line="136" pos:column="30"/></name></decl>, <decl><type ref="prev"/><name pos:line="136" pos:column="32">rid<pos:position pos:line="136" pos:column="35"/></name></decl>;<pos:position pos:line="136" pos:column="36"/></decl_stmt>
            <decl_stmt><decl><type><name pos:line="137" pos:column="13">apr_bucket<pos:position pos:line="137" pos:column="23"/></name> <modifier pos:line="137" pos:column="24">*<pos:position pos:line="137" pos:column="25"/></modifier></type><name pos:line="137" pos:column="25">b<pos:position pos:line="137" pos:column="26"/></name></decl>;<pos:position pos:line="137" pos:column="27"/></decl_stmt>
            <decl_stmt><decl><type><name pos:line="138" pos:column="13">unsigned<pos:position pos:line="138" pos:column="21"/></name> <name pos:line="138" pos:column="22">char<pos:position pos:line="138" pos:column="26"/></name></type> <name pos:line="138" pos:column="27">plen<pos:position pos:line="138" pos:column="31"/></name></decl>;<pos:position pos:line="138" pos:column="32"/></decl_stmt>
            <decl_stmt><decl><type><name pos:line="139" pos:column="13">unsigned<pos:position pos:line="139" pos:column="21"/></name> <name pos:line="139" pos:column="22">char<pos:position pos:line="139" pos:column="26"/></name></type> <name pos:line="139" pos:column="27">type<pos:position pos:line="139" pos:column="31"/></name></decl>, <decl><type ref="prev"/><name pos:line="139" pos:column="33">version<pos:position pos:line="139" pos:column="40"/></name></decl>;<pos:position pos:line="139" pos:column="41"/></decl_stmt>

            <comment type="block" pos:line="141" pos:column="13">/* First, we grab the header... */</comment>
            <expr_stmt><expr><name pos:line="142" pos:column="13">rv<pos:position pos:line="142" pos:column="15"/></name> <operator pos:line="142" pos:column="16">=<pos:position pos:line="142" pos:column="17"/></operator> <call><name pos:line="142" pos:column="18">get_data_full<pos:position pos:line="142" pos:column="31"/></name><argument_list pos:line="142" pos:column="31">(<argument><expr><name pos:line="142" pos:column="32">conn<pos:position pos:line="142" pos:column="36"/></name></expr></argument>, <argument><expr><operator pos:line="142" pos:column="38">(<pos:position pos:line="142" pos:column="39"/></operator><name pos:line="142" pos:column="39">char<pos:position pos:line="142" pos:column="43"/></name> <operator pos:line="142" pos:column="44">*<pos:position pos:line="142" pos:column="45"/></operator><operator pos:line="142" pos:column="45">)<pos:position pos:line="142" pos:column="46"/></operator> <name pos:line="142" pos:column="47">farray<pos:position pos:line="142" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="142" pos:column="55">AP_FCGI_HEADER_LEN<pos:position pos:line="142" pos:column="73"/></name></expr></argument>)<pos:position pos:line="142" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="142" pos:column="75"/></expr_stmt>
            <if pos:line="143" pos:column="13">if <condition pos:line="143" pos:column="16">(<expr><name pos:line="143" pos:column="17">rv<pos:position pos:line="143" pos:column="19"/></name> <operator pos:line="143" pos:column="20">!=<pos:position pos:line="143" pos:column="22"/></operator> <name pos:line="143" pos:column="23">APR_SUCCESS<pos:position pos:line="143" pos:column="34"/></name></expr>)<pos:position pos:line="143" pos:column="35"/></condition><then pos:line="143" pos:column="35"> <block pos:line="143" pos:column="36">{
                <expr_stmt><expr><call><name pos:line="144" pos:column="17">ap_log_rerror<pos:position pos:line="144" pos:column="30"/></name><argument_list pos:line="144" pos:column="30">(<argument><expr><name pos:line="144" pos:column="31">APLOG_MARK<pos:position pos:line="144" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="144" pos:column="43">APLOG_ERR<pos:position pos:line="144" pos:column="52"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="144" pos:column="54">0<pos:position pos:line="144" pos:column="55"/></literal></expr></argument>, <argument><expr><name pos:line="144" pos:column="57">r<pos:position pos:line="144" pos:column="58"/></name></expr></argument>, <argument><expr><call><name pos:line="144" pos:column="60">APLOGNO<pos:position pos:line="144" pos:column="67"/></name><argument_list pos:line="144" pos:column="67">(<argument><expr><literal type="number" pos:line="144" pos:column="68">01067<pos:position pos:line="144" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="144" pos:column="74"/></argument_list></call>
                              <literal type="string" pos:line="145" pos:column="31">"Failed to read FastCGI header"<pos:position pos:line="145" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="145" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="145" pos:column="64"/></expr_stmt>
                <break pos:line="146" pos:column="17">break;<pos:position pos:line="146" pos:column="23"/></break>
            }<pos:position pos:line="147" pos:column="14"/></block></then></if>

<cpp:ifdef pos:line="149" pos:column="1">#<cpp:directive pos:line="149" pos:column="2">ifdef<pos:position pos:line="149" pos:column="7"/></cpp:directive> <name pos:line="149" pos:column="8">FCGI_DUMP_HEADERS<pos:position pos:line="149" pos:column="25"/></name></cpp:ifdef>
            <expr_stmt><expr><call><name pos:line="150" pos:column="13">ap_log_rdata<pos:position pos:line="150" pos:column="25"/></name><argument_list pos:line="150" pos:column="25">(<argument><expr><name pos:line="150" pos:column="26">APLOG_MARK<pos:position pos:line="150" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="150" pos:column="38">APLOG_DEBUG<pos:position pos:line="150" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="150" pos:column="51">r<pos:position pos:line="150" pos:column="52"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="150" pos:column="54">"FastCGI header"<pos:position pos:line="150" pos:column="70"/></literal></expr></argument>,
                         <argument><expr><name pos:line="151" pos:column="26">farray<pos:position pos:line="151" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="151" pos:column="34">AP_FCGI_HEADER_LEN<pos:position pos:line="151" pos:column="52"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="151" pos:column="54">0<pos:position pos:line="151" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="151" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="151" pos:column="57"/></expr_stmt>
<cpp:endif pos:line="152" pos:column="1">#<cpp:directive pos:line="152" pos:column="2">endif<pos:position pos:line="152" pos:column="7"/></cpp:directive></cpp:endif>

            <expr_stmt><expr><call><name pos:line="154" pos:column="13">ap_fcgi_header_fields_from_array<pos:position pos:line="154" pos:column="45"/></name><argument_list pos:line="154" pos:column="45">(<argument><expr><operator pos:line="154" pos:column="46">&amp;<pos:position pos:line="154" pos:column="51"/></operator><name pos:line="154" pos:column="47">version<pos:position pos:line="154" pos:column="54"/></name></expr></argument>, <argument><expr><operator pos:line="154" pos:column="56">&amp;<pos:position pos:line="154" pos:column="61"/></operator><name pos:line="154" pos:column="57">type<pos:position pos:line="154" pos:column="61"/></name></expr></argument>, <argument><expr><operator pos:line="154" pos:column="63">&amp;<pos:position pos:line="154" pos:column="68"/></operator><name pos:line="154" pos:column="64">rid<pos:position pos:line="154" pos:column="67"/></name></expr></argument>,
                                             <argument><expr><operator pos:line="155" pos:column="46">&amp;<pos:position pos:line="155" pos:column="51"/></operator><name pos:line="155" pos:column="47">clen<pos:position pos:line="155" pos:column="51"/></name></expr></argument>, <argument><expr><operator pos:line="155" pos:column="53">&amp;<pos:position pos:line="155" pos:column="58"/></operator><name pos:line="155" pos:column="54">plen<pos:position pos:line="155" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="155" pos:column="60">farray<pos:position pos:line="155" pos:column="66"/></name></expr></argument>)<pos:position pos:line="155" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="155" pos:column="68"/></expr_stmt>

            <if pos:line="157" pos:column="13">if <condition pos:line="157" pos:column="16">(<expr><name pos:line="157" pos:column="17">version<pos:position pos:line="157" pos:column="24"/></name> <operator pos:line="157" pos:column="25">!=<pos:position pos:line="157" pos:column="27"/></operator> <name pos:line="157" pos:column="28">AP_FCGI_VERSION_1<pos:position pos:line="157" pos:column="45"/></name></expr>)<pos:position pos:line="157" pos:column="46"/></condition><then pos:line="157" pos:column="46"> <block pos:line="157" pos:column="47">{
                <expr_stmt><expr><call><name pos:line="158" pos:column="17">ap_log_rerror<pos:position pos:line="158" pos:column="30"/></name><argument_list pos:line="158" pos:column="30">(<argument><expr><name pos:line="158" pos:column="31">APLOG_MARK<pos:position pos:line="158" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="158" pos:column="43">APLOG_ERR<pos:position pos:line="158" pos:column="52"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="158" pos:column="54">0<pos:position pos:line="158" pos:column="55"/></literal></expr></argument>, <argument><expr><name pos:line="158" pos:column="57">r<pos:position pos:line="158" pos:column="58"/></name></expr></argument>, <argument><expr><call><name pos:line="158" pos:column="60">APLOGNO<pos:position pos:line="158" pos:column="67"/></name><argument_list pos:line="158" pos:column="67">(<argument><expr><literal type="number" pos:line="158" pos:column="68">01068<pos:position pos:line="158" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="158" pos:column="74"/></argument_list></call>
                              <literal type="string" pos:line="159" pos:column="31">"Got bogus version %d"<pos:position pos:line="159" pos:column="53"/></literal></expr></argument>, <argument><expr><operator pos:line="159" pos:column="55">(<pos:position pos:line="159" pos:column="56"/></operator><name pos:line="159" pos:column="56">int<pos:position pos:line="159" pos:column="59"/></name><operator pos:line="159" pos:column="59">)<pos:position pos:line="159" pos:column="60"/></operator><name pos:line="159" pos:column="60">version<pos:position pos:line="159" pos:column="67"/></name></expr></argument>)<pos:position pos:line="159" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="159" pos:column="69"/></expr_stmt>
                <expr_stmt><expr><name pos:line="160" pos:column="17">rv<pos:position pos:line="160" pos:column="19"/></name> <operator pos:line="160" pos:column="20">=<pos:position pos:line="160" pos:column="21"/></operator> <name pos:line="160" pos:column="22">APR_EINVAL<pos:position pos:line="160" pos:column="32"/></name></expr>;<pos:position pos:line="160" pos:column="33"/></expr_stmt>
                <break pos:line="161" pos:column="17">break;<pos:position pos:line="161" pos:column="23"/></break>
            }<pos:position pos:line="162" pos:column="14"/></block></then></if>

            <if pos:line="164" pos:column="13">if <condition pos:line="164" pos:column="16">(<expr><name pos:line="164" pos:column="17">rid<pos:position pos:line="164" pos:column="20"/></name> <operator pos:line="164" pos:column="21">!=<pos:position pos:line="164" pos:column="23"/></operator> <name pos:line="164" pos:column="24">request_id<pos:position pos:line="164" pos:column="34"/></name></expr>)<pos:position pos:line="164" pos:column="35"/></condition><then pos:line="164" pos:column="35"> <block pos:line="164" pos:column="36">{
                <expr_stmt><expr><call><name pos:line="165" pos:column="17">ap_log_rerror<pos:position pos:line="165" pos:column="30"/></name><argument_list pos:line="165" pos:column="30">(<argument><expr><name pos:line="165" pos:column="31">APLOG_MARK<pos:position pos:line="165" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="165" pos:column="43">APLOG_ERR<pos:position pos:line="165" pos:column="52"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="165" pos:column="54">0<pos:position pos:line="165" pos:column="55"/></literal></expr></argument>, <argument><expr><name pos:line="165" pos:column="57">r<pos:position pos:line="165" pos:column="58"/></name></expr></argument>, <argument><expr><call><name pos:line="165" pos:column="60">APLOGNO<pos:position pos:line="165" pos:column="67"/></name><argument_list pos:line="165" pos:column="67">(<argument><expr><literal type="number" pos:line="165" pos:column="68">01069<pos:position pos:line="165" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="165" pos:column="74"/></argument_list></call>
                              <literal type="string" pos:line="166" pos:column="31">"Got bogus rid %d, expected %d"<pos:position pos:line="166" pos:column="62"/></literal></expr></argument>,
                              <argument><expr><name pos:line="167" pos:column="31">rid<pos:position pos:line="167" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="167" pos:column="36">request_id<pos:position pos:line="167" pos:column="46"/></name></expr></argument>)<pos:position pos:line="167" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="167" pos:column="48"/></expr_stmt>
                <expr_stmt><expr><name pos:line="168" pos:column="17">rv<pos:position pos:line="168" pos:column="19"/></name> <operator pos:line="168" pos:column="20">=<pos:position pos:line="168" pos:column="21"/></operator> <name pos:line="168" pos:column="22">APR_EINVAL<pos:position pos:line="168" pos:column="32"/></name></expr>;<pos:position pos:line="168" pos:column="33"/></expr_stmt>
                <break pos:line="169" pos:column="17">break;<pos:position pos:line="169" pos:column="23"/></break>
            }<pos:position pos:line="170" pos:column="14"/></block></then></if>

<label><name pos:line="172" pos:column="1">recv_again<pos:position pos:line="172" pos:column="11"/></name>:<pos:position pos:line="172" pos:column="12"/></label>
            <if pos:line="173" pos:column="13">if <condition pos:line="173" pos:column="16">(<expr><name pos:line="173" pos:column="17">clen<pos:position pos:line="173" pos:column="21"/></name> <operator pos:line="173" pos:column="22">&gt;<pos:position pos:line="173" pos:column="26"/></operator> <name pos:line="173" pos:column="24">iobuf_size<pos:position pos:line="173" pos:column="34"/></name></expr>)<pos:position pos:line="173" pos:column="35"/></condition><then pos:line="173" pos:column="35"> <block pos:line="173" pos:column="36">{
                <expr_stmt><expr><name pos:line="174" pos:column="17">readbuflen<pos:position pos:line="174" pos:column="27"/></name> <operator pos:line="174" pos:column="28">=<pos:position pos:line="174" pos:column="29"/></operator> <name pos:line="174" pos:column="30">iobuf_size<pos:position pos:line="174" pos:column="40"/></name></expr>;<pos:position pos:line="174" pos:column="41"/></expr_stmt>
            }<pos:position pos:line="175" pos:column="14"/></block></then> <else pos:line="175" pos:column="15">else <block pos:line="175" pos:column="20">{
                <expr_stmt><expr><name pos:line="176" pos:column="17">readbuflen<pos:position pos:line="176" pos:column="27"/></name> <operator pos:line="176" pos:column="28">=<pos:position pos:line="176" pos:column="29"/></operator> <name pos:line="176" pos:column="30">clen<pos:position pos:line="176" pos:column="34"/></name></expr>;<pos:position pos:line="176" pos:column="35"/></expr_stmt>
            }<pos:position pos:line="177" pos:column="14"/></block></else></if>

            <comment type="block" pos:line="179" pos:column="13">/* Now get the actual data.  Yes it sucks to do this in a second
             * recv call, this will eventually change when we move to real
             * nonblocking recv calls. */</comment>
            <if pos:line="182" pos:column="13">if <condition pos:line="182" pos:column="16">(<expr><name pos:line="182" pos:column="17">readbuflen<pos:position pos:line="182" pos:column="27"/></name> <operator pos:line="182" pos:column="28">!=<pos:position pos:line="182" pos:column="30"/></operator> <literal type="number" pos:line="182" pos:column="31">0<pos:position pos:line="182" pos:column="32"/></literal></expr>)<pos:position pos:line="182" pos:column="33"/></condition><then pos:line="182" pos:column="33"> <block pos:line="182" pos:column="34">{
                <expr_stmt><expr><name pos:line="183" pos:column="17">rv<pos:position pos:line="183" pos:column="19"/></name> <operator pos:line="183" pos:column="20">=<pos:position pos:line="183" pos:column="21"/></operator> <call><name pos:line="183" pos:column="22">get_data<pos:position pos:line="183" pos:column="30"/></name><argument_list pos:line="183" pos:column="30">(<argument><expr><name pos:line="183" pos:column="31">conn<pos:position pos:line="183" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="183" pos:column="37">iobuf<pos:position pos:line="183" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="183" pos:column="44">&amp;<pos:position pos:line="183" pos:column="49"/></operator><name pos:line="183" pos:column="45">readbuflen<pos:position pos:line="183" pos:column="55"/></name></expr></argument>)<pos:position pos:line="183" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="183" pos:column="57"/></expr_stmt>
                <if pos:line="184" pos:column="17">if <condition pos:line="184" pos:column="20">(<expr><name pos:line="184" pos:column="21">rv<pos:position pos:line="184" pos:column="23"/></name> <operator pos:line="184" pos:column="24">!=<pos:position pos:line="184" pos:column="26"/></operator> <name pos:line="184" pos:column="27">APR_SUCCESS<pos:position pos:line="184" pos:column="38"/></name></expr>)<pos:position pos:line="184" pos:column="39"/></condition><then pos:line="184" pos:column="39"> <block pos:line="184" pos:column="40">{
                    <expr_stmt><expr><operator pos:line="185" pos:column="21">*<pos:position pos:line="185" pos:column="22"/></operator><name pos:line="185" pos:column="22">err<pos:position pos:line="185" pos:column="25"/></name> <operator pos:line="185" pos:column="26">=<pos:position pos:line="185" pos:column="27"/></operator> <literal type="string" pos:line="185" pos:column="28">"reading response body"<pos:position pos:line="185" pos:column="51"/></literal></expr>;<pos:position pos:line="185" pos:column="52"/></expr_stmt>
                    <break pos:line="186" pos:column="21">break;<pos:position pos:line="186" pos:column="27"/></break>
                }<pos:position pos:line="187" pos:column="18"/></block></then></if>
            }<pos:position pos:line="188" pos:column="14"/></block></then></if>

            <switch pos:line="190" pos:column="13">switch <condition pos:line="190" pos:column="20">(<expr><name pos:line="190" pos:column="21">type<pos:position pos:line="190" pos:column="25"/></name></expr>)<pos:position pos:line="190" pos:column="26"/></condition> <block pos:line="190" pos:column="27">{
            <case pos:line="191" pos:column="13">case <expr><name pos:line="191" pos:column="18">AP_FCGI_STDOUT<pos:position pos:line="191" pos:column="32"/></name></expr>:<pos:position pos:line="191" pos:column="33"/></case>
                <if pos:line="192" pos:column="17">if <condition pos:line="192" pos:column="20">(<expr><name pos:line="192" pos:column="21">clen<pos:position pos:line="192" pos:column="25"/></name> <operator pos:line="192" pos:column="26">!=<pos:position pos:line="192" pos:column="28"/></operator> <literal type="number" pos:line="192" pos:column="29">0<pos:position pos:line="192" pos:column="30"/></literal></expr>)<pos:position pos:line="192" pos:column="31"/></condition><then pos:line="192" pos:column="31"> <block pos:line="192" pos:column="32">{
                    <expr_stmt><expr><name pos:line="193" pos:column="21">b<pos:position pos:line="193" pos:column="22"/></name> <operator pos:line="193" pos:column="23">=<pos:position pos:line="193" pos:column="24"/></operator> <call><name pos:line="193" pos:column="25">apr_bucket_transient_create<pos:position pos:line="193" pos:column="52"/></name><argument_list pos:line="193" pos:column="52">(<argument><expr><name pos:line="193" pos:column="53">iobuf<pos:position pos:line="193" pos:column="58"/></name></expr></argument>,
                                                    <argument><expr><name pos:line="194" pos:column="53">readbuflen<pos:position pos:line="194" pos:column="63"/></name></expr></argument>,
                                                    <argument><expr><name><name pos:line="195" pos:column="53">c<pos:position pos:line="195" pos:column="54"/></name><operator pos:line="195" pos:column="54">-&gt;<pos:position pos:line="195" pos:column="59"/></operator><name pos:line="195" pos:column="56">bucket_alloc<pos:position pos:line="195" pos:column="68"/></name></name></expr></argument>)<pos:position pos:line="195" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="195" pos:column="70"/></expr_stmt>

                    <expr_stmt><expr><call><name pos:line="197" pos:column="21">APR_BRIGADE_INSERT_TAIL<pos:position pos:line="197" pos:column="44"/></name><argument_list pos:line="197" pos:column="44">(<argument><expr><name pos:line="197" pos:column="45">ob<pos:position pos:line="197" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="197" pos:column="49">b<pos:position pos:line="197" pos:column="50"/></name></expr></argument>)<pos:position pos:line="197" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="197" pos:column="52"/></expr_stmt>

                    <if pos:line="199" pos:column="21">if <condition pos:line="199" pos:column="24">(<expr><operator pos:line="199" pos:column="25">!<pos:position pos:line="199" pos:column="26"/></operator> <name pos:line="199" pos:column="27">seen_end_of_headers<pos:position pos:line="199" pos:column="46"/></name></expr>)<pos:position pos:line="199" pos:column="47"/></condition><then pos:line="199" pos:column="47"> <block pos:line="199" pos:column="48">{
                        <decl_stmt><decl><type><name pos:line="200" pos:column="25">int<pos:position pos:line="200" pos:column="28"/></name></type> <name pos:line="200" pos:column="29">st<pos:position pos:line="200" pos:column="31"/></name> <init pos:line="200" pos:column="32">= <expr><call><name pos:line="200" pos:column="34">handle_headers<pos:position pos:line="200" pos:column="48"/></name><argument_list pos:line="200" pos:column="48">(<argument><expr><name pos:line="200" pos:column="49">r<pos:position pos:line="200" pos:column="50"/></name></expr></argument>, <argument><expr><operator pos:line="200" pos:column="52">&amp;<pos:position pos:line="200" pos:column="57"/></operator><name pos:line="200" pos:column="53">header_state<pos:position pos:line="200" pos:column="65"/></name></expr></argument>,
                                                <argument><expr><name pos:line="201" pos:column="49">iobuf<pos:position pos:line="201" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="201" pos:column="56">readbuflen<pos:position pos:line="201" pos:column="66"/></name></expr></argument>)<pos:position pos:line="201" pos:column="67"/></argument_list></call></expr></init></decl>;<pos:position pos:line="201" pos:column="68"/></decl_stmt>

                        <if pos:line="203" pos:column="25">if <condition pos:line="203" pos:column="28">(<expr><name pos:line="203" pos:column="29">st<pos:position pos:line="203" pos:column="31"/></name> <operator pos:line="203" pos:column="32">==<pos:position pos:line="203" pos:column="34"/></operator> <literal type="number" pos:line="203" pos:column="35">1<pos:position pos:line="203" pos:column="36"/></literal></expr>)<pos:position pos:line="203" pos:column="37"/></condition><then pos:line="203" pos:column="37"> <block pos:line="203" pos:column="38">{
                            <decl_stmt><decl><type><name pos:line="204" pos:column="29">int<pos:position pos:line="204" pos:column="32"/></name></type> <name pos:line="204" pos:column="33">status<pos:position pos:line="204" pos:column="39"/></name></decl>;<pos:position pos:line="204" pos:column="40"/></decl_stmt>
                            <expr_stmt><expr><name pos:line="205" pos:column="29">seen_end_of_headers<pos:position pos:line="205" pos:column="48"/></name> <operator pos:line="205" pos:column="49">=<pos:position pos:line="205" pos:column="50"/></operator> <literal type="number" pos:line="205" pos:column="51">1<pos:position pos:line="205" pos:column="52"/></literal></expr>;<pos:position pos:line="205" pos:column="53"/></expr_stmt>

                            <expr_stmt><expr><name pos:line="207" pos:column="29">status<pos:position pos:line="207" pos:column="35"/></name> <operator pos:line="207" pos:column="36">=<pos:position pos:line="207" pos:column="37"/></operator> <call><name pos:line="207" pos:column="38">ap_scan_script_header_err_brigade_ex<pos:position pos:line="207" pos:column="74"/></name><argument_list pos:line="207" pos:column="74">(<argument><expr><name pos:line="207" pos:column="75">r<pos:position pos:line="207" pos:column="76"/></name></expr></argument>, <argument><expr><name pos:line="207" pos:column="78">ob<pos:position pos:line="207" pos:column="80"/></name></expr></argument>,
                                <argument><expr><name pos:line="208" pos:column="33">NULL<pos:position pos:line="208" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="208" pos:column="39">APLOG_MODULE_INDEX<pos:position pos:line="208" pos:column="57"/></name></expr></argument>)<pos:position pos:line="208" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="208" pos:column="59"/></expr_stmt>
                            <comment type="block" pos:line="209" pos:column="29">/* suck in all the rest */</comment>
                            <if pos:line="210" pos:column="29">if <condition pos:line="210" pos:column="32">(<expr><name pos:line="210" pos:column="33">status<pos:position pos:line="210" pos:column="39"/></name> <operator pos:line="210" pos:column="40">!=<pos:position pos:line="210" pos:column="42"/></operator> <name pos:line="210" pos:column="43">OK<pos:position pos:line="210" pos:column="45"/></name></expr>)<pos:position pos:line="210" pos:column="46"/></condition><then pos:line="210" pos:column="46"> <block pos:line="210" pos:column="47">{
                                <decl_stmt><decl><type><name pos:line="211" pos:column="33">apr_bucket<pos:position pos:line="211" pos:column="43"/></name> <modifier pos:line="211" pos:column="44">*<pos:position pos:line="211" pos:column="45"/></modifier></type><name pos:line="211" pos:column="45">tmp_b<pos:position pos:line="211" pos:column="50"/></name></decl>;<pos:position pos:line="211" pos:column="51"/></decl_stmt>
                                <expr_stmt><expr><call><name pos:line="212" pos:column="33">apr_brigade_cleanup<pos:position pos:line="212" pos:column="52"/></name><argument_list pos:line="212" pos:column="52">(<argument><expr><name pos:line="212" pos:column="53">ob<pos:position pos:line="212" pos:column="55"/></name></expr></argument>)<pos:position pos:line="212" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="212" pos:column="57"/></expr_stmt>
                                <expr_stmt><expr><name pos:line="213" pos:column="33">tmp_b<pos:position pos:line="213" pos:column="38"/></name> <operator pos:line="213" pos:column="39">=<pos:position pos:line="213" pos:column="40"/></operator> <call><name pos:line="213" pos:column="41">apr_bucket_eos_create<pos:position pos:line="213" pos:column="62"/></name><argument_list pos:line="213" pos:column="62">(<argument><expr><name><name pos:line="213" pos:column="63">c<pos:position pos:line="213" pos:column="64"/></name><operator pos:line="213" pos:column="64">-&gt;<pos:position pos:line="213" pos:column="69"/></operator><name pos:line="213" pos:column="66">bucket_alloc<pos:position pos:line="213" pos:column="78"/></name></name></expr></argument>)<pos:position pos:line="213" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="213" pos:column="80"/></expr_stmt>
                                <expr_stmt><expr><call><name pos:line="214" pos:column="33">APR_BRIGADE_INSERT_TAIL<pos:position pos:line="214" pos:column="56"/></name><argument_list pos:line="214" pos:column="56">(<argument><expr><name pos:line="214" pos:column="57">ob<pos:position pos:line="214" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="214" pos:column="61">tmp_b<pos:position pos:line="214" pos:column="66"/></name></expr></argument>)<pos:position pos:line="214" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="214" pos:column="68"/></expr_stmt>
                                <expr_stmt><expr><name><name pos:line="215" pos:column="33">r<pos:position pos:line="215" pos:column="34"/></name><operator pos:line="215" pos:column="34">-&gt;<pos:position pos:line="215" pos:column="39"/></operator><name pos:line="215" pos:column="36">status<pos:position pos:line="215" pos:column="42"/></name></name> <operator pos:line="215" pos:column="43">=<pos:position pos:line="215" pos:column="44"/></operator> <name pos:line="215" pos:column="45">status<pos:position pos:line="215" pos:column="51"/></name></expr>;<pos:position pos:line="215" pos:column="52"/></expr_stmt>
                                <expr_stmt><expr><call><name pos:line="216" pos:column="33">ap_pass_brigade<pos:position pos:line="216" pos:column="48"/></name><argument_list pos:line="216" pos:column="48">(<argument><expr><name><name pos:line="216" pos:column="49">r<pos:position pos:line="216" pos:column="50"/></name><operator pos:line="216" pos:column="50">-&gt;<pos:position pos:line="216" pos:column="55"/></operator><name pos:line="216" pos:column="52">output_filters<pos:position pos:line="216" pos:column="66"/></name></name></expr></argument>, <argument><expr><name pos:line="216" pos:column="68">ob<pos:position pos:line="216" pos:column="70"/></name></expr></argument>)<pos:position pos:line="216" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="216" pos:column="72"/></expr_stmt>
                                <if pos:line="217" pos:column="33">if <condition pos:line="217" pos:column="36">(<expr><name pos:line="217" pos:column="37">status<pos:position pos:line="217" pos:column="43"/></name> <operator pos:line="217" pos:column="44">==<pos:position pos:line="217" pos:column="46"/></operator> <name pos:line="217" pos:column="47">HTTP_NOT_MODIFIED<pos:position pos:line="217" pos:column="64"/></name></expr>)<pos:position pos:line="217" pos:column="65"/></condition><then pos:line="217" pos:column="65"> <block pos:line="217" pos:column="66">{
                                    <comment type="block" pos:line="218" pos:column="37">/* The 304 response MUST NOT contain
                                     * a message-body, ignore it. */</comment>
                                    <expr_stmt><expr><name pos:line="220" pos:column="37">ignore_body<pos:position pos:line="220" pos:column="48"/></name> <operator pos:line="220" pos:column="49">=<pos:position pos:line="220" pos:column="50"/></operator> <literal type="number" pos:line="220" pos:column="51">1<pos:position pos:line="220" pos:column="52"/></literal></expr>;<pos:position pos:line="220" pos:column="53"/></expr_stmt>
                                }<pos:position pos:line="221" pos:column="34"/></block></then>
                                <else pos:line="222" pos:column="33">else <block pos:line="222" pos:column="38">{
                                    <expr_stmt><expr><call><name pos:line="223" pos:column="37">ap_log_rerror<pos:position pos:line="223" pos:column="50"/></name><argument_list pos:line="223" pos:column="50">(<argument><expr><name pos:line="223" pos:column="51">APLOG_MARK<pos:position pos:line="223" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="223" pos:column="63">APLOG_ERR<pos:position pos:line="223" pos:column="72"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="223" pos:column="74">0<pos:position pos:line="223" pos:column="75"/></literal></expr></argument>, <argument><expr><name pos:line="223" pos:column="77">r<pos:position pos:line="223" pos:column="78"/></name></expr></argument>, <argument><expr><call><name pos:line="223" pos:column="80">APLOGNO<pos:position pos:line="223" pos:column="87"/></name><argument_list pos:line="223" pos:column="87">(<argument><expr><literal type="number" pos:line="223" pos:column="88">01070<pos:position pos:line="223" pos:column="93"/></literal></expr></argument>)<pos:position pos:line="223" pos:column="94"/></argument_list></call>
                                                    <literal type="string" pos:line="224" pos:column="53">"Error parsing script headers"<pos:position pos:line="224" pos:column="83"/></literal></expr></argument>)<pos:position pos:line="224" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="224" pos:column="85"/></expr_stmt>
                                    <expr_stmt><expr><name pos:line="225" pos:column="37">rv<pos:position pos:line="225" pos:column="39"/></name> <operator pos:line="225" pos:column="40">=<pos:position pos:line="225" pos:column="41"/></operator> <name pos:line="225" pos:column="42">APR_EINVAL<pos:position pos:line="225" pos:column="52"/></name></expr>;<pos:position pos:line="225" pos:column="53"/></expr_stmt>
                                }<pos:position pos:line="226" pos:column="34"/></block></else></if>
                                <break pos:line="227" pos:column="33">break;<pos:position pos:line="227" pos:column="39"/></break>
                            }<pos:position pos:line="228" pos:column="30"/></block></then></if>

                            <if pos:line="230" pos:column="29">if <condition pos:line="230" pos:column="32">(<expr><name><name pos:line="230" pos:column="33">conf<pos:position pos:line="230" pos:column="37"/></name><operator pos:line="230" pos:column="37">-&gt;<pos:position pos:line="230" pos:column="42"/></operator><name pos:line="230" pos:column="39">error_override<pos:position pos:line="230" pos:column="53"/></name></name> <operator pos:line="230" pos:column="54">&amp;&amp;<pos:position pos:line="230" pos:column="64"/></operator>
                                <call><name pos:line="231" pos:column="33">ap_is_HTTP_ERROR<pos:position pos:line="231" pos:column="49"/></name><argument_list pos:line="231" pos:column="49">(<argument><expr><name><name pos:line="231" pos:column="50">r<pos:position pos:line="231" pos:column="51"/></name><operator pos:line="231" pos:column="51">-&gt;<pos:position pos:line="231" pos:column="56"/></operator><name pos:line="231" pos:column="53">status<pos:position pos:line="231" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="231" pos:column="60"/></argument_list></call></expr>)<pos:position pos:line="231" pos:column="61"/></condition><then pos:line="231" pos:column="61"> <block pos:line="231" pos:column="62">{
                                <comment type="block" pos:line="232" pos:column="33">/*
                                 * set script_error_status to discard
                                 * everything after the headers
                                 */</comment>
                                <expr_stmt><expr><name pos:line="236" pos:column="33">script_error_status<pos:position pos:line="236" pos:column="52"/></name> <operator pos:line="236" pos:column="53">=<pos:position pos:line="236" pos:column="54"/></operator> <name><name pos:line="236" pos:column="55">r<pos:position pos:line="236" pos:column="56"/></name><operator pos:line="236" pos:column="56">-&gt;<pos:position pos:line="236" pos:column="61"/></operator><name pos:line="236" pos:column="58">status<pos:position pos:line="236" pos:column="64"/></name></name></expr>;<pos:position pos:line="236" pos:column="65"/></expr_stmt>
                                <comment type="block" pos:line="237" pos:column="33">/*
                                 * prevent ap_die() from treating this as a
                                 * recursive error, initially:
                                 */</comment>
                                <expr_stmt><expr><name><name pos:line="241" pos:column="33">r<pos:position pos:line="241" pos:column="34"/></name><operator pos:line="241" pos:column="34">-&gt;<pos:position pos:line="241" pos:column="39"/></operator><name pos:line="241" pos:column="36">status<pos:position pos:line="241" pos:column="42"/></name></name> <operator pos:line="241" pos:column="43">=<pos:position pos:line="241" pos:column="44"/></operator> <name pos:line="241" pos:column="45">HTTP_OK<pos:position pos:line="241" pos:column="52"/></name></expr>;<pos:position pos:line="241" pos:column="53"/></expr_stmt>
                            }<pos:position pos:line="242" pos:column="30"/></block></then></if>

                            <if pos:line="244" pos:column="29">if <condition pos:line="244" pos:column="32">(<expr><name pos:line="244" pos:column="33">script_error_status<pos:position pos:line="244" pos:column="52"/></name> <operator pos:line="244" pos:column="53">==<pos:position pos:line="244" pos:column="55"/></operator> <name pos:line="244" pos:column="56">HTTP_OK<pos:position pos:line="244" pos:column="63"/></name>
                                <operator pos:line="245" pos:column="33">&amp;&amp;<pos:position pos:line="245" pos:column="43"/></operator> <operator pos:line="245" pos:column="36">!<pos:position pos:line="245" pos:column="37"/></operator><call><name pos:line="245" pos:column="37">APR_BRIGADE_EMPTY<pos:position pos:line="245" pos:column="54"/></name><argument_list pos:line="245" pos:column="54">(<argument><expr><name pos:line="245" pos:column="55">ob<pos:position pos:line="245" pos:column="57"/></name></expr></argument>)<pos:position pos:line="245" pos:column="58"/></argument_list></call> <operator pos:line="245" pos:column="59">&amp;&amp;<pos:position pos:line="245" pos:column="69"/></operator> <operator pos:line="245" pos:column="62">!<pos:position pos:line="245" pos:column="63"/></operator><name pos:line="245" pos:column="63">ignore_body<pos:position pos:line="245" pos:column="74"/></name></expr>)<pos:position pos:line="245" pos:column="75"/></condition><then pos:line="245" pos:column="75"> <block pos:line="245" pos:column="76">{
                                <comment type="block" pos:line="246" pos:column="33">/* Send the part of the body that we read while
                                 * reading the headers.
                                 */</comment>
                                <expr_stmt><expr><name pos:line="249" pos:column="33">rv<pos:position pos:line="249" pos:column="35"/></name> <operator pos:line="249" pos:column="36">=<pos:position pos:line="249" pos:column="37"/></operator> <call><name pos:line="249" pos:column="38">ap_pass_brigade<pos:position pos:line="249" pos:column="53"/></name><argument_list pos:line="249" pos:column="53">(<argument><expr><name><name pos:line="249" pos:column="54">r<pos:position pos:line="249" pos:column="55"/></name><operator pos:line="249" pos:column="55">-&gt;<pos:position pos:line="249" pos:column="60"/></operator><name pos:line="249" pos:column="57">output_filters<pos:position pos:line="249" pos:column="71"/></name></name></expr></argument>, <argument><expr><name pos:line="249" pos:column="73">ob<pos:position pos:line="249" pos:column="75"/></name></expr></argument>)<pos:position pos:line="249" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="249" pos:column="77"/></expr_stmt>
                                <if pos:line="250" pos:column="33">if <condition pos:line="250" pos:column="36">(<expr><name pos:line="250" pos:column="37">rv<pos:position pos:line="250" pos:column="39"/></name> <operator pos:line="250" pos:column="40">!=<pos:position pos:line="250" pos:column="42"/></operator> <name pos:line="250" pos:column="43">APR_SUCCESS<pos:position pos:line="250" pos:column="54"/></name></expr>)<pos:position pos:line="250" pos:column="55"/></condition><then pos:line="250" pos:column="55"> <block pos:line="250" pos:column="56">{
                                    <expr_stmt><expr><operator pos:line="251" pos:column="37">*<pos:position pos:line="251" pos:column="38"/></operator><name pos:line="251" pos:column="38">err<pos:position pos:line="251" pos:column="41"/></name> <operator pos:line="251" pos:column="42">=<pos:position pos:line="251" pos:column="43"/></operator> <literal type="string" pos:line="251" pos:column="44">"passing brigade to output filters"<pos:position pos:line="251" pos:column="79"/></literal></expr>;<pos:position pos:line="251" pos:column="80"/></expr_stmt>
                                    <break pos:line="252" pos:column="37">break;<pos:position pos:line="252" pos:column="43"/></break>
                                }<pos:position pos:line="253" pos:column="34"/></block></then></if>
                            }<pos:position pos:line="254" pos:column="30"/></block></then></if>
                            <expr_stmt><expr><call><name pos:line="255" pos:column="29">apr_brigade_cleanup<pos:position pos:line="255" pos:column="48"/></name><argument_list pos:line="255" pos:column="48">(<argument><expr><name pos:line="255" pos:column="49">ob<pos:position pos:line="255" pos:column="51"/></name></expr></argument>)<pos:position pos:line="255" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="255" pos:column="53"/></expr_stmt>

                            <expr_stmt><expr><call><name pos:line="257" pos:column="29">apr_pool_clear<pos:position pos:line="257" pos:column="43"/></name><argument_list pos:line="257" pos:column="43">(<argument><expr><name pos:line="257" pos:column="44">setaside_pool<pos:position pos:line="257" pos:column="57"/></name></expr></argument>)<pos:position pos:line="257" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="257" pos:column="59"/></expr_stmt>
                        }<pos:position pos:line="258" pos:column="26"/></block></then>
                        <else pos:line="259" pos:column="25">else <block pos:line="259" pos:column="30">{
                            <comment type="block" pos:line="260" pos:column="29">/* We're still looking for the end of the
                             * headers, so this part of the data will need
                             * to persist. */</comment>
                            <expr_stmt><expr><call><name pos:line="263" pos:column="29">apr_bucket_setaside<pos:position pos:line="263" pos:column="48"/></name><argument_list pos:line="263" pos:column="48">(<argument><expr><name pos:line="263" pos:column="49">b<pos:position pos:line="263" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="263" pos:column="52">setaside_pool<pos:position pos:line="263" pos:column="65"/></name></expr></argument>)<pos:position pos:line="263" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="263" pos:column="67"/></expr_stmt>
                        }<pos:position pos:line="264" pos:column="26"/></block></else></if>
                    }<pos:position pos:line="265" pos:column="22"/></block></then> <else pos:line="265" pos:column="23">else <block pos:line="265" pos:column="28">{
                        <comment type="block" pos:line="266" pos:column="25">/* we've already passed along the headers, so now pass
                         * through the content.  we could simply continue to
                         * setaside the content and not pass until we see the
                         * 0 content-length (below, where we append the EOS),
                         * but that could be a huge amount of data; so we pass
                         * along smaller chunks
                         */</comment>
                        <if pos:line="273" pos:column="25">if <condition pos:line="273" pos:column="28">(<expr><name pos:line="273" pos:column="29">script_error_status<pos:position pos:line="273" pos:column="48"/></name> <operator pos:line="273" pos:column="49">==<pos:position pos:line="273" pos:column="51"/></operator> <name pos:line="273" pos:column="52">HTTP_OK<pos:position pos:line="273" pos:column="59"/></name> <operator pos:line="273" pos:column="60">&amp;&amp;<pos:position pos:line="273" pos:column="70"/></operator> <operator pos:line="273" pos:column="63">!<pos:position pos:line="273" pos:column="64"/></operator><name pos:line="273" pos:column="64">ignore_body<pos:position pos:line="273" pos:column="75"/></name></expr>)<pos:position pos:line="273" pos:column="76"/></condition><then pos:line="273" pos:column="76"> <block pos:line="273" pos:column="77">{
                            <expr_stmt><expr><name pos:line="274" pos:column="29">rv<pos:position pos:line="274" pos:column="31"/></name> <operator pos:line="274" pos:column="32">=<pos:position pos:line="274" pos:column="33"/></operator> <call><name pos:line="274" pos:column="34">ap_pass_brigade<pos:position pos:line="274" pos:column="49"/></name><argument_list pos:line="274" pos:column="49">(<argument><expr><name><name pos:line="274" pos:column="50">r<pos:position pos:line="274" pos:column="51"/></name><operator pos:line="274" pos:column="51">-&gt;<pos:position pos:line="274" pos:column="56"/></operator><name pos:line="274" pos:column="53">output_filters<pos:position pos:line="274" pos:column="67"/></name></name></expr></argument>, <argument><expr><name pos:line="274" pos:column="69">ob<pos:position pos:line="274" pos:column="71"/></name></expr></argument>)<pos:position pos:line="274" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="274" pos:column="73"/></expr_stmt>
                            <if pos:line="275" pos:column="29">if <condition pos:line="275" pos:column="32">(<expr><name pos:line="275" pos:column="33">rv<pos:position pos:line="275" pos:column="35"/></name> <operator pos:line="275" pos:column="36">!=<pos:position pos:line="275" pos:column="38"/></operator> <name pos:line="275" pos:column="39">APR_SUCCESS<pos:position pos:line="275" pos:column="50"/></name></expr>)<pos:position pos:line="275" pos:column="51"/></condition><then pos:line="275" pos:column="51"> <block pos:line="275" pos:column="52">{
                                <expr_stmt><expr><operator pos:line="276" pos:column="33">*<pos:position pos:line="276" pos:column="34"/></operator><name pos:line="276" pos:column="34">err<pos:position pos:line="276" pos:column="37"/></name> <operator pos:line="276" pos:column="38">=<pos:position pos:line="276" pos:column="39"/></operator> <literal type="string" pos:line="276" pos:column="40">"passing brigade to output filters"<pos:position pos:line="276" pos:column="75"/></literal></expr>;<pos:position pos:line="276" pos:column="76"/></expr_stmt>
                                <break pos:line="277" pos:column="33">break;<pos:position pos:line="277" pos:column="39"/></break>
                            }<pos:position pos:line="278" pos:column="30"/></block></then></if>
                        }<pos:position pos:line="279" pos:column="26"/></block></then></if>
                        <expr_stmt><expr><call><name pos:line="280" pos:column="25">apr_brigade_cleanup<pos:position pos:line="280" pos:column="44"/></name><argument_list pos:line="280" pos:column="44">(<argument><expr><name pos:line="280" pos:column="45">ob<pos:position pos:line="280" pos:column="47"/></name></expr></argument>)<pos:position pos:line="280" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="280" pos:column="49"/></expr_stmt>
                    }<pos:position pos:line="281" pos:column="22"/></block></else></if>

                    <comment type="block" pos:line="283" pos:column="21">/* If we didn't read all the data, go back and get the
                     * rest of it. */</comment>
                    <if pos:line="285" pos:column="21">if <condition pos:line="285" pos:column="24">(<expr><name pos:line="285" pos:column="25">clen<pos:position pos:line="285" pos:column="29"/></name> <operator pos:line="285" pos:column="30">&gt;<pos:position pos:line="285" pos:column="34"/></operator> <name pos:line="285" pos:column="32">readbuflen<pos:position pos:line="285" pos:column="42"/></name></expr>)<pos:position pos:line="285" pos:column="43"/></condition><then pos:line="285" pos:column="43"> <block pos:line="285" pos:column="44">{
                        <expr_stmt><expr><name pos:line="286" pos:column="25">clen<pos:position pos:line="286" pos:column="29"/></name> <operator pos:line="286" pos:column="30">-=<pos:position pos:line="286" pos:column="32"/></operator> <name pos:line="286" pos:column="33">readbuflen<pos:position pos:line="286" pos:column="43"/></name></expr>;<pos:position pos:line="286" pos:column="44"/></expr_stmt>
                        <goto pos:line="287" pos:column="25">goto <name pos:line="287" pos:column="30">recv_again<pos:position pos:line="287" pos:column="40"/></name>;<pos:position pos:line="287" pos:column="41"/></goto>
                    }<pos:position pos:line="288" pos:column="22"/></block></then></if>
                }<pos:position pos:line="289" pos:column="18"/></block></then> <else pos:line="289" pos:column="19">else <block pos:line="289" pos:column="24">{
                    <comment type="block" pos:line="290" pos:column="21">/* XXX what if we haven't seen end of the headers yet? */</comment>

                    <if pos:line="292" pos:column="21">if <condition pos:line="292" pos:column="24">(<expr><name pos:line="292" pos:column="25">script_error_status<pos:position pos:line="292" pos:column="44"/></name> <operator pos:line="292" pos:column="45">==<pos:position pos:line="292" pos:column="47"/></operator> <name pos:line="292" pos:column="48">HTTP_OK<pos:position pos:line="292" pos:column="55"/></name></expr>)<pos:position pos:line="292" pos:column="56"/></condition><then pos:line="292" pos:column="56"> <block pos:line="292" pos:column="57">{
                        <expr_stmt><expr><name pos:line="293" pos:column="25">b<pos:position pos:line="293" pos:column="26"/></name> <operator pos:line="293" pos:column="27">=<pos:position pos:line="293" pos:column="28"/></operator> <call><name pos:line="293" pos:column="29">apr_bucket_eos_create<pos:position pos:line="293" pos:column="50"/></name><argument_list pos:line="293" pos:column="50">(<argument><expr><name><name pos:line="293" pos:column="51">c<pos:position pos:line="293" pos:column="52"/></name><operator pos:line="293" pos:column="52">-&gt;<pos:position pos:line="293" pos:column="57"/></operator><name pos:line="293" pos:column="54">bucket_alloc<pos:position pos:line="293" pos:column="66"/></name></name></expr></argument>)<pos:position pos:line="293" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="293" pos:column="68"/></expr_stmt>
                        <expr_stmt><expr><call><name pos:line="294" pos:column="25">APR_BRIGADE_INSERT_TAIL<pos:position pos:line="294" pos:column="48"/></name><argument_list pos:line="294" pos:column="48">(<argument><expr><name pos:line="294" pos:column="49">ob<pos:position pos:line="294" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="294" pos:column="53">b<pos:position pos:line="294" pos:column="54"/></name></expr></argument>)<pos:position pos:line="294" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="294" pos:column="56"/></expr_stmt>
                        <expr_stmt><expr><name pos:line="295" pos:column="25">rv<pos:position pos:line="295" pos:column="27"/></name> <operator pos:line="295" pos:column="28">=<pos:position pos:line="295" pos:column="29"/></operator> <call><name pos:line="295" pos:column="30">ap_pass_brigade<pos:position pos:line="295" pos:column="45"/></name><argument_list pos:line="295" pos:column="45">(<argument><expr><name><name pos:line="295" pos:column="46">r<pos:position pos:line="295" pos:column="47"/></name><operator pos:line="295" pos:column="47">-&gt;<pos:position pos:line="295" pos:column="52"/></operator><name pos:line="295" pos:column="49">output_filters<pos:position pos:line="295" pos:column="63"/></name></name></expr></argument>, <argument><expr><name pos:line="295" pos:column="65">ob<pos:position pos:line="295" pos:column="67"/></name></expr></argument>)<pos:position pos:line="295" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="295" pos:column="69"/></expr_stmt>
                        <if pos:line="296" pos:column="25">if <condition pos:line="296" pos:column="28">(<expr><name pos:line="296" pos:column="29">rv<pos:position pos:line="296" pos:column="31"/></name> <operator pos:line="296" pos:column="32">!=<pos:position pos:line="296" pos:column="34"/></operator> <name pos:line="296" pos:column="35">APR_SUCCESS<pos:position pos:line="296" pos:column="46"/></name></expr>)<pos:position pos:line="296" pos:column="47"/></condition><then pos:line="296" pos:column="47"> <block pos:line="296" pos:column="48">{
                            <expr_stmt><expr><operator pos:line="297" pos:column="29">*<pos:position pos:line="297" pos:column="30"/></operator><name pos:line="297" pos:column="30">err<pos:position pos:line="297" pos:column="33"/></name> <operator pos:line="297" pos:column="34">=<pos:position pos:line="297" pos:column="35"/></operator> <literal type="string" pos:line="297" pos:column="36">"passing brigade to output filters"<pos:position pos:line="297" pos:column="71"/></literal></expr>;<pos:position pos:line="297" pos:column="72"/></expr_stmt>
                            <break pos:line="298" pos:column="29">break;<pos:position pos:line="298" pos:column="35"/></break>
                        }<pos:position pos:line="299" pos:column="26"/></block></then></if>
                    }<pos:position pos:line="300" pos:column="22"/></block></then></if>

                    <comment type="block" pos:line="302" pos:column="21">/* XXX Why don't we cleanup here?  (logic from AJP) */</comment>
                }<pos:position pos:line="303" pos:column="18"/></block></else></if>
                <break pos:line="304" pos:column="17">break;<pos:position pos:line="304" pos:column="23"/></break>

            <case pos:line="306" pos:column="13">case <expr><name pos:line="306" pos:column="18">AP_FCGI_STDERR<pos:position pos:line="306" pos:column="32"/></name></expr>:<pos:position pos:line="306" pos:column="33"/></case>
                <comment type="block" pos:line="307" pos:column="17">/* TODO: Should probably clean up this logging a bit... */</comment>
                <if pos:line="308" pos:column="17">if <condition pos:line="308" pos:column="20">(<expr><name pos:line="308" pos:column="21">clen<pos:position pos:line="308" pos:column="25"/></name></expr>)<pos:position pos:line="308" pos:column="26"/></condition><then pos:line="308" pos:column="26"> <block pos:line="308" pos:column="27">{
                    <expr_stmt><expr><call><name pos:line="309" pos:column="21">ap_log_rerror<pos:position pos:line="309" pos:column="34"/></name><argument_list pos:line="309" pos:column="34">(<argument><expr><name pos:line="309" pos:column="35">APLOG_MARK<pos:position pos:line="309" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="309" pos:column="47">APLOG_ERR<pos:position pos:line="309" pos:column="56"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="309" pos:column="58">0<pos:position pos:line="309" pos:column="59"/></literal></expr></argument>, <argument><expr><name pos:line="309" pos:column="61">r<pos:position pos:line="309" pos:column="62"/></name></expr></argument>, <argument><expr><call><name pos:line="309" pos:column="64">APLOGNO<pos:position pos:line="309" pos:column="71"/></name><argument_list pos:line="309" pos:column="71">(<argument><expr><literal type="number" pos:line="309" pos:column="72">01071<pos:position pos:line="309" pos:column="77"/></literal></expr></argument>)<pos:position pos:line="309" pos:column="78"/></argument_list></call>
                                  <literal type="string" pos:line="310" pos:column="35">"Got error '%.*s'"<pos:position pos:line="310" pos:column="53"/></literal></expr></argument>, <argument><expr><operator pos:line="310" pos:column="55">(<pos:position pos:line="310" pos:column="56"/></operator><name pos:line="310" pos:column="56">int<pos:position pos:line="310" pos:column="59"/></name><operator pos:line="310" pos:column="59">)<pos:position pos:line="310" pos:column="60"/></operator><name pos:line="310" pos:column="60">readbuflen<pos:position pos:line="310" pos:column="70"/></name></expr></argument>, <argument><expr><name pos:line="310" pos:column="72">iobuf<pos:position pos:line="310" pos:column="77"/></name></expr></argument>)<pos:position pos:line="310" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="310" pos:column="79"/></expr_stmt>
                }<pos:position pos:line="311" pos:column="18"/></block></then></if>

                <if pos:line="313" pos:column="17">if <condition pos:line="313" pos:column="20">(<expr><name pos:line="313" pos:column="21">clen<pos:position pos:line="313" pos:column="25"/></name> <operator pos:line="313" pos:column="26">&gt;<pos:position pos:line="313" pos:column="30"/></operator> <name pos:line="313" pos:column="28">readbuflen<pos:position pos:line="313" pos:column="38"/></name></expr>)<pos:position pos:line="313" pos:column="39"/></condition><then pos:line="313" pos:column="39"> <block pos:line="313" pos:column="40">{
                    <expr_stmt><expr><name pos:line="314" pos:column="21">clen<pos:position pos:line="314" pos:column="25"/></name> <operator pos:line="314" pos:column="26">-=<pos:position pos:line="314" pos:column="28"/></operator> <name pos:line="314" pos:column="29">readbuflen<pos:position pos:line="314" pos:column="39"/></name></expr>;<pos:position pos:line="314" pos:column="40"/></expr_stmt>
                    <goto pos:line="315" pos:column="21">goto <name pos:line="315" pos:column="26">recv_again<pos:position pos:line="315" pos:column="36"/></name>;<pos:position pos:line="315" pos:column="37"/></goto>
                }<pos:position pos:line="316" pos:column="18"/></block></then></if>
                <break pos:line="317" pos:column="17">break;<pos:position pos:line="317" pos:column="23"/></break>

            <case pos:line="319" pos:column="13">case <expr><name pos:line="319" pos:column="18">AP_FCGI_END_REQUEST<pos:position pos:line="319" pos:column="37"/></name></expr>:<pos:position pos:line="319" pos:column="38"/></case>
                <expr_stmt><expr><name pos:line="320" pos:column="17">done<pos:position pos:line="320" pos:column="21"/></name> <operator pos:line="320" pos:column="22">=<pos:position pos:line="320" pos:column="23"/></operator> <literal type="number" pos:line="320" pos:column="24">1<pos:position pos:line="320" pos:column="25"/></literal></expr>;<pos:position pos:line="320" pos:column="26"/></expr_stmt>
                <break pos:line="321" pos:column="17">break;<pos:position pos:line="321" pos:column="23"/></break>

            <default pos:line="323" pos:column="13">default:<pos:position pos:line="323" pos:column="21"/></default>
                <expr_stmt><expr><call><name pos:line="324" pos:column="17">ap_log_rerror<pos:position pos:line="324" pos:column="30"/></name><argument_list pos:line="324" pos:column="30">(<argument><expr><name pos:line="324" pos:column="31">APLOG_MARK<pos:position pos:line="324" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="324" pos:column="43">APLOG_ERR<pos:position pos:line="324" pos:column="52"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="324" pos:column="54">0<pos:position pos:line="324" pos:column="55"/></literal></expr></argument>, <argument><expr><name pos:line="324" pos:column="57">r<pos:position pos:line="324" pos:column="58"/></name></expr></argument>, <argument><expr><call><name pos:line="324" pos:column="60">APLOGNO<pos:position pos:line="324" pos:column="67"/></name><argument_list pos:line="324" pos:column="67">(<argument><expr><literal type="number" pos:line="324" pos:column="68">01072<pos:position pos:line="324" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="324" pos:column="74"/></argument_list></call>
                              <literal type="string" pos:line="325" pos:column="31">"Got bogus record %d"<pos:position pos:line="325" pos:column="52"/></literal></expr></argument>, <argument><expr><name pos:line="325" pos:column="54">type<pos:position pos:line="325" pos:column="58"/></name></expr></argument>)<pos:position pos:line="325" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="325" pos:column="60"/></expr_stmt>
                <break pos:line="326" pos:column="17">break;<pos:position pos:line="326" pos:column="23"/></break>
            }<pos:position pos:line="327" pos:column="14"/></block></switch>
            <comment type="block" pos:line="328" pos:column="13">/* Leave on above switch's inner error. */</comment>
            <if pos:line="329" pos:column="13">if <condition pos:line="329" pos:column="16">(<expr><name pos:line="329" pos:column="17">rv<pos:position pos:line="329" pos:column="19"/></name> <operator pos:line="329" pos:column="20">!=<pos:position pos:line="329" pos:column="22"/></operator> <name pos:line="329" pos:column="23">APR_SUCCESS<pos:position pos:line="329" pos:column="34"/></name></expr>)<pos:position pos:line="329" pos:column="35"/></condition><then pos:line="329" pos:column="35"> <block pos:line="329" pos:column="36">{
                <break pos:line="330" pos:column="17">break;<pos:position pos:line="330" pos:column="23"/></break>
            }<pos:position pos:line="331" pos:column="14"/></block></then></if>

            <if pos:line="333" pos:column="13">if <condition pos:line="333" pos:column="16">(<expr><name pos:line="333" pos:column="17">plen<pos:position pos:line="333" pos:column="21"/></name></expr>)<pos:position pos:line="333" pos:column="22"/></condition><then pos:line="333" pos:column="22"> <block pos:line="333" pos:column="23">{
                <expr_stmt><expr><name pos:line="334" pos:column="17">rv<pos:position pos:line="334" pos:column="19"/></name> <operator pos:line="334" pos:column="20">=<pos:position pos:line="334" pos:column="21"/></operator> <call><name pos:line="334" pos:column="22">get_data_full<pos:position pos:line="334" pos:column="35"/></name><argument_list pos:line="334" pos:column="35">(<argument><expr><name pos:line="334" pos:column="36">conn<pos:position pos:line="334" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="334" pos:column="42">iobuf<pos:position pos:line="334" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="334" pos:column="49">plen<pos:position pos:line="334" pos:column="53"/></name></expr></argument>)<pos:position pos:line="334" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="334" pos:column="55"/></expr_stmt>
                <if pos:line="335" pos:column="17">if <condition pos:line="335" pos:column="20">(<expr><name pos:line="335" pos:column="21">rv<pos:position pos:line="335" pos:column="23"/></name> <operator pos:line="335" pos:column="24">!=<pos:position pos:line="335" pos:column="26"/></operator> <name pos:line="335" pos:column="27">APR_SUCCESS<pos:position pos:line="335" pos:column="38"/></name></expr>)<pos:position pos:line="335" pos:column="39"/></condition><then pos:line="335" pos:column="39"> <block pos:line="335" pos:column="40">{
                    <expr_stmt><expr><call><name pos:line="336" pos:column="21">ap_log_rerror<pos:position pos:line="336" pos:column="34"/></name><argument_list pos:line="336" pos:column="34">(<argument><expr><name pos:line="336" pos:column="35">APLOG_MARK<pos:position pos:line="336" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="336" pos:column="47">APLOG_ERR<pos:position pos:line="336" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="336" pos:column="58">rv<pos:position pos:line="336" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="336" pos:column="62">r<pos:position pos:line="336" pos:column="63"/></name></expr></argument>, <argument><expr><call><name pos:line="336" pos:column="65">APLOGNO<pos:position pos:line="336" pos:column="72"/></name><argument_list pos:line="336" pos:column="72">(<argument><expr><literal type="number" pos:line="336" pos:column="73">02537<pos:position pos:line="336" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="336" pos:column="79"/></argument_list></call>
                                  <literal type="string" pos:line="337" pos:column="35">"Error occurred reading padding"<pos:position pos:line="337" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="337" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="337" pos:column="69"/></expr_stmt>
                    <break pos:line="338" pos:column="21">break;<pos:position pos:line="338" pos:column="27"/></break>
                }<pos:position pos:line="339" pos:column="18"/></block></then></if>
            }<pos:position pos:line="340" pos:column="14"/></block></then></if>
        }<pos:position pos:line="341" pos:column="10"/></block></then></if>
    }<pos:position pos:line="342" pos:column="6"/></block></while>

    <expr_stmt><expr><call><name pos:line="344" pos:column="5">apr_brigade_destroy<pos:position pos:line="344" pos:column="24"/></name><argument_list pos:line="344" pos:column="24">(<argument><expr><name pos:line="344" pos:column="25">ib<pos:position pos:line="344" pos:column="27"/></name></expr></argument>)<pos:position pos:line="344" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="344" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="345" pos:column="5">apr_brigade_destroy<pos:position pos:line="345" pos:column="24"/></name><argument_list pos:line="345" pos:column="24">(<argument><expr><name pos:line="345" pos:column="25">ob<pos:position pos:line="345" pos:column="27"/></name></expr></argument>)<pos:position pos:line="345" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="345" pos:column="29"/></expr_stmt>

    <if pos:line="347" pos:column="5">if <condition pos:line="347" pos:column="8">(<expr><name pos:line="347" pos:column="9">script_error_status<pos:position pos:line="347" pos:column="28"/></name> <operator pos:line="347" pos:column="29">!=<pos:position pos:line="347" pos:column="31"/></operator> <name pos:line="347" pos:column="32">HTTP_OK<pos:position pos:line="347" pos:column="39"/></name></expr>)<pos:position pos:line="347" pos:column="40"/></condition><then pos:line="347" pos:column="40"> <block pos:line="347" pos:column="41">{
        <expr_stmt><expr><call><name pos:line="348" pos:column="9">ap_die<pos:position pos:line="348" pos:column="15"/></name><argument_list pos:line="348" pos:column="15">(<argument><expr><name pos:line="348" pos:column="16">script_error_status<pos:position pos:line="348" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="348" pos:column="37">r<pos:position pos:line="348" pos:column="38"/></name></expr></argument>)<pos:position pos:line="348" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="348" pos:column="40"/></expr_stmt> <comment type="block" pos:line="348" pos:column="41">/* send ErrorDocument */</comment>
    }<pos:position pos:line="349" pos:column="6"/></block></then></if>

    <return pos:line="351" pos:column="5">return <expr><name pos:line="351" pos:column="12">rv<pos:position pos:line="351" pos:column="14"/></name></expr>;<pos:position pos:line="351" pos:column="15"/></return>
}<pos:position pos:line="352" pos:column="2"/></block></function></unit>
