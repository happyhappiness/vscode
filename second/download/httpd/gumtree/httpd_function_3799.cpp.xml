<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_function_3799.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">cgid_maint<pos:position pos:line="1" pos:column="23"/></name><parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><name pos:line="1" pos:column="24">int<pos:position pos:line="1" pos:column="27"/></name></type> <name pos:line="1" pos:column="28">reason<pos:position pos:line="1" pos:column="34"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="36">void<pos:position pos:line="1" pos:column="40"/></name> <modifier pos:line="1" pos:column="41">*<pos:position pos:line="1" pos:column="42"/></modifier></type><name pos:line="1" pos:column="42">data<pos:position pos:line="1" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="48">apr_wait_t<pos:position pos:line="1" pos:column="58"/></name></type> <name pos:line="1" pos:column="59">status<pos:position pos:line="1" pos:column="65"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="66"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">apr_proc_t<pos:position pos:line="3" pos:column="15"/></name> <modifier pos:line="3" pos:column="16">*<pos:position pos:line="3" pos:column="17"/></modifier></type><name pos:line="3" pos:column="17">proc<pos:position pos:line="3" pos:column="21"/></name> <init pos:line="3" pos:column="22">= <expr><name pos:line="3" pos:column="24">data<pos:position pos:line="3" pos:column="28"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="29"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">int<pos:position pos:line="4" pos:column="8"/></name></type> <name pos:line="4" pos:column="9">mpm_state<pos:position pos:line="4" pos:column="18"/></name></decl>;<pos:position pos:line="4" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">int<pos:position pos:line="5" pos:column="8"/></name></type> <name pos:line="5" pos:column="9">stopping<pos:position pos:line="5" pos:column="17"/></name></decl>;<pos:position pos:line="5" pos:column="18"/></decl_stmt>

    <switch pos:line="7" pos:column="5">switch <condition pos:line="7" pos:column="12">(<expr><name pos:line="7" pos:column="13">reason<pos:position pos:line="7" pos:column="19"/></name></expr>)<pos:position pos:line="7" pos:column="20"/></condition> <block pos:line="7" pos:column="21">{
        <case pos:line="8" pos:column="9">case <expr><name pos:line="8" pos:column="14">APR_OC_REASON_DEATH<pos:position pos:line="8" pos:column="33"/></name></expr>:<pos:position pos:line="8" pos:column="34"/></case>
            <expr_stmt><expr><call><name pos:line="9" pos:column="13">apr_proc_other_child_unregister<pos:position pos:line="9" pos:column="44"/></name><argument_list pos:line="9" pos:column="44">(<argument><expr><name pos:line="9" pos:column="45">data<pos:position pos:line="9" pos:column="49"/></name></expr></argument>)<pos:position pos:line="9" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="51"/></expr_stmt>
            <comment type="block" pos:line="10" pos:column="13">/* If apache is not terminating or restarting,
             * restart the cgid daemon
             */</comment>
            <expr_stmt><expr><name pos:line="13" pos:column="13">stopping<pos:position pos:line="13" pos:column="21"/></name> <operator pos:line="13" pos:column="22">=<pos:position pos:line="13" pos:column="23"/></operator> <literal type="number" pos:line="13" pos:column="24">1<pos:position pos:line="13" pos:column="25"/></literal></expr>;<pos:position pos:line="13" pos:column="26"/></expr_stmt> <comment type="block" pos:line="13" pos:column="27">/* if MPM doesn't support query,
                           * assume we shouldn't restart daemon
                           */</comment>
            <if pos:line="16" pos:column="13">if <condition pos:line="16" pos:column="16">(<expr><call><name pos:line="16" pos:column="17">ap_mpm_query<pos:position pos:line="16" pos:column="29"/></name><argument_list pos:line="16" pos:column="29">(<argument><expr><name pos:line="16" pos:column="30">AP_MPMQ_MPM_STATE<pos:position pos:line="16" pos:column="47"/></name></expr></argument>, <argument><expr><operator pos:line="16" pos:column="49">&amp;<pos:position pos:line="16" pos:column="54"/></operator><name pos:line="16" pos:column="50">mpm_state<pos:position pos:line="16" pos:column="59"/></name></expr></argument>)<pos:position pos:line="16" pos:column="60"/></argument_list></call> <operator pos:line="16" pos:column="61">==<pos:position pos:line="16" pos:column="63"/></operator> <name pos:line="16" pos:column="64">APR_SUCCESS<pos:position pos:line="16" pos:column="75"/></name> <operator pos:line="16" pos:column="76">&amp;&amp;<pos:position pos:line="16" pos:column="86"/></operator>
                <name pos:line="17" pos:column="17">mpm_state<pos:position pos:line="17" pos:column="26"/></name> <operator pos:line="17" pos:column="27">!=<pos:position pos:line="17" pos:column="29"/></operator> <name pos:line="17" pos:column="30">AP_MPMQ_STOPPING<pos:position pos:line="17" pos:column="46"/></name></expr>)<pos:position pos:line="17" pos:column="47"/></condition><then pos:line="17" pos:column="47"> <block pos:line="17" pos:column="48">{
                <expr_stmt><expr><name pos:line="18" pos:column="17">stopping<pos:position pos:line="18" pos:column="25"/></name> <operator pos:line="18" pos:column="26">=<pos:position pos:line="18" pos:column="27"/></operator> <literal type="number" pos:line="18" pos:column="28">0<pos:position pos:line="18" pos:column="29"/></literal></expr>;<pos:position pos:line="18" pos:column="30"/></expr_stmt>
            }<pos:position pos:line="19" pos:column="14"/></block></then></if>
            <if pos:line="20" pos:column="13">if <condition pos:line="20" pos:column="16">(<expr><operator pos:line="20" pos:column="17">!<pos:position pos:line="20" pos:column="18"/></operator><name pos:line="20" pos:column="18">stopping<pos:position pos:line="20" pos:column="26"/></name></expr>)<pos:position pos:line="20" pos:column="27"/></condition><then pos:line="20" pos:column="27"> <block pos:line="20" pos:column="28">{
                <if pos:line="21" pos:column="17">if <condition pos:line="21" pos:column="20">(<expr><name pos:line="21" pos:column="21">status<pos:position pos:line="21" pos:column="27"/></name> <operator pos:line="21" pos:column="28">==<pos:position pos:line="21" pos:column="30"/></operator> <name pos:line="21" pos:column="31">DAEMON_STARTUP_ERROR<pos:position pos:line="21" pos:column="51"/></name></expr>)<pos:position pos:line="21" pos:column="52"/></condition><then pos:line="21" pos:column="52"> <block pos:line="21" pos:column="53">{
                    <expr_stmt><expr><call><name pos:line="22" pos:column="21">ap_log_error<pos:position pos:line="22" pos:column="33"/></name><argument_list pos:line="22" pos:column="33">(<argument><expr><name pos:line="22" pos:column="34">APLOG_MARK<pos:position pos:line="22" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="46">APLOG_CRIT<pos:position pos:line="22" pos:column="56"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="22" pos:column="58">0<pos:position pos:line="22" pos:column="59"/></literal></expr></argument>, <argument><expr><name pos:line="22" pos:column="61">NULL<pos:position pos:line="22" pos:column="65"/></name></expr></argument>,
                                 <argument><expr><literal type="string" pos:line="23" pos:column="34">"cgid daemon failed to initialize"<pos:position pos:line="23" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="70"/></expr_stmt>
                }<pos:position pos:line="24" pos:column="18"/></block></then>
                <else pos:line="25" pos:column="17">else <block pos:line="25" pos:column="22">{
                    <expr_stmt><expr><call><name pos:line="26" pos:column="21">ap_log_error<pos:position pos:line="26" pos:column="33"/></name><argument_list pos:line="26" pos:column="33">(<argument><expr><name pos:line="26" pos:column="34">APLOG_MARK<pos:position pos:line="26" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="46">APLOG_ERR<pos:position pos:line="26" pos:column="55"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="26" pos:column="57">0<pos:position pos:line="26" pos:column="58"/></literal></expr></argument>, <argument><expr><name pos:line="26" pos:column="60">NULL<pos:position pos:line="26" pos:column="64"/></name></expr></argument>,
                                 <argument><expr><literal type="string" pos:line="27" pos:column="34">"cgid daemon process died, restarting"<pos:position pos:line="27" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="74"/></expr_stmt>
                    <expr_stmt><expr><call><name pos:line="28" pos:column="21">cgid_start<pos:position pos:line="28" pos:column="31"/></name><argument_list pos:line="28" pos:column="31">(<argument><expr><name pos:line="28" pos:column="32">root_pool<pos:position pos:line="28" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="43">root_server<pos:position pos:line="28" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="56">proc<pos:position pos:line="28" pos:column="60"/></name></expr></argument>)<pos:position pos:line="28" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="62"/></expr_stmt>
                }<pos:position pos:line="29" pos:column="18"/></block></else></if>
            }<pos:position pos:line="30" pos:column="14"/></block></then></if>
            <break pos:line="31" pos:column="13">break;<pos:position pos:line="31" pos:column="19"/></break>
        <case pos:line="32" pos:column="9">case <expr><name pos:line="32" pos:column="14">APR_OC_REASON_RESTART<pos:position pos:line="32" pos:column="35"/></name></expr>:<pos:position pos:line="32" pos:column="36"/></case>
            <comment type="block" pos:line="33" pos:column="13">/* don't do anything; server is stopping or restarting */</comment>
            <expr_stmt><expr><call><name pos:line="34" pos:column="13">apr_proc_other_child_unregister<pos:position pos:line="34" pos:column="44"/></name><argument_list pos:line="34" pos:column="44">(<argument><expr><name pos:line="34" pos:column="45">data<pos:position pos:line="34" pos:column="49"/></name></expr></argument>)<pos:position pos:line="34" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="51"/></expr_stmt>
            <break pos:line="35" pos:column="13">break;<pos:position pos:line="35" pos:column="19"/></break>
        <case pos:line="36" pos:column="9">case <expr><name pos:line="36" pos:column="14">APR_OC_REASON_LOST<pos:position pos:line="36" pos:column="32"/></name></expr>:<pos:position pos:line="36" pos:column="33"/></case>
            <comment type="block" pos:line="37" pos:column="13">/* Restart the child cgid daemon process */</comment>
            <expr_stmt><expr><call><name pos:line="38" pos:column="13">apr_proc_other_child_unregister<pos:position pos:line="38" pos:column="44"/></name><argument_list pos:line="38" pos:column="44">(<argument><expr><name pos:line="38" pos:column="45">data<pos:position pos:line="38" pos:column="49"/></name></expr></argument>)<pos:position pos:line="38" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="51"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="39" pos:column="13">cgid_start<pos:position pos:line="39" pos:column="23"/></name><argument_list pos:line="39" pos:column="23">(<argument><expr><name pos:line="39" pos:column="24">root_pool<pos:position pos:line="39" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="35">root_server<pos:position pos:line="39" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="48">proc<pos:position pos:line="39" pos:column="52"/></name></expr></argument>)<pos:position pos:line="39" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="54"/></expr_stmt>
            <break pos:line="40" pos:column="13">break;<pos:position pos:line="40" pos:column="19"/></break>
        <case pos:line="41" pos:column="9">case <expr><name pos:line="41" pos:column="14">APR_OC_REASON_UNREGISTER<pos:position pos:line="41" pos:column="38"/></name></expr>:<pos:position pos:line="41" pos:column="39"/></case>
            <comment type="block" pos:line="42" pos:column="13">/* we get here when pcgi is cleaned up; pcgi gets cleaned
             * up when pconf gets cleaned up
             */</comment>
            <expr_stmt><expr><call><name pos:line="45" pos:column="13">kill<pos:position pos:line="45" pos:column="17"/></name><argument_list pos:line="45" pos:column="17">(<argument><expr><name><name pos:line="45" pos:column="18">proc<pos:position pos:line="45" pos:column="22"/></name><operator pos:line="45" pos:column="22">-&gt;<pos:position pos:line="45" pos:column="27"/></operator><name pos:line="45" pos:column="24">pid<pos:position pos:line="45" pos:column="27"/></name></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="29">SIGHUP<pos:position pos:line="45" pos:column="35"/></name></expr></argument>)<pos:position pos:line="45" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="37"/></expr_stmt> <comment type="block" pos:line="45" pos:column="38">/* send signal to daemon telling it to die */</comment>

            <comment type="block" pos:line="47" pos:column="13">/* Remove the cgi socket, we must do it here in order to try and
             * guarantee the same permissions as when the socket was created.
             */</comment>
            <if pos:line="50" pos:column="13">if <condition pos:line="50" pos:column="16">(<expr><call><name pos:line="50" pos:column="17">unlink<pos:position pos:line="50" pos:column="23"/></name><argument_list pos:line="50" pos:column="23">(<argument><expr><name pos:line="50" pos:column="24">sockname<pos:position pos:line="50" pos:column="32"/></name></expr></argument>)<pos:position pos:line="50" pos:column="33"/></argument_list></call> <operator pos:line="50" pos:column="34">&lt;<pos:position pos:line="50" pos:column="38"/></operator> <literal type="number" pos:line="50" pos:column="36">0<pos:position pos:line="50" pos:column="37"/></literal> <operator pos:line="50" pos:column="38">&amp;&amp;<pos:position pos:line="50" pos:column="48"/></operator> <name pos:line="50" pos:column="41">errno<pos:position pos:line="50" pos:column="46"/></name> <operator pos:line="50" pos:column="47">!=<pos:position pos:line="50" pos:column="49"/></operator> <name pos:line="50" pos:column="50">ENOENT<pos:position pos:line="50" pos:column="56"/></name></expr>)<pos:position pos:line="50" pos:column="57"/></condition><then pos:line="50" pos:column="57"> <block pos:line="50" pos:column="58">{
                <expr_stmt><expr><call><name pos:line="51" pos:column="17">ap_log_error<pos:position pos:line="51" pos:column="29"/></name><argument_list pos:line="51" pos:column="29">(<argument><expr><name pos:line="51" pos:column="30">APLOG_MARK<pos:position pos:line="51" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="42">APLOG_ERR<pos:position pos:line="51" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="53">errno<pos:position pos:line="51" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="60">NULL<pos:position pos:line="51" pos:column="64"/></name></expr></argument>,
                             <argument><expr><literal type="string" pos:line="52" pos:column="30">"Couldn't unlink unix domain socket %s"<pos:position pos:line="52" pos:column="69"/></literal></expr></argument>,
                             <argument><expr><name pos:line="53" pos:column="30">sockname<pos:position pos:line="53" pos:column="38"/></name></expr></argument>)<pos:position pos:line="53" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="40"/></expr_stmt>
            }<pos:position pos:line="54" pos:column="14"/></block></then></if>
            <break pos:line="55" pos:column="13">break;<pos:position pos:line="55" pos:column="19"/></break>
    }<pos:position pos:line="56" pos:column="6"/></block></switch>
}<pos:position pos:line="57" pos:column="2"/></block></function></unit>
