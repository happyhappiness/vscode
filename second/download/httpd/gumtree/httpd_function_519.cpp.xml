<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_function_519.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name> <modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier></type><name pos:line="1" pos:column="14">listener_thread<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name pos:line="1" pos:column="30">apr_thread_t<pos:position pos:line="1" pos:column="42"/></name> <modifier pos:line="1" pos:column="43">*<pos:position pos:line="1" pos:column="44"/></modifier></type><name pos:line="1" pos:column="44">thd<pos:position pos:line="1" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="49">void<pos:position pos:line="1" pos:column="53"/></name> <modifier pos:line="1" pos:column="54">*<pos:position pos:line="1" pos:column="55"/></modifier></type> <name pos:line="1" pos:column="56">dummy<pos:position pos:line="1" pos:column="61"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="62"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">proc_info<pos:position pos:line="3" pos:column="14"/></name> <modifier pos:line="3" pos:column="15">*<pos:position pos:line="3" pos:column="16"/></modifier></type> <name pos:line="3" pos:column="17">ti<pos:position pos:line="3" pos:column="19"/></name> <init pos:line="3" pos:column="20">= <expr><name pos:line="3" pos:column="22">dummy<pos:position pos:line="3" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="28"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">int<pos:position pos:line="4" pos:column="8"/></name></type> <name pos:line="4" pos:column="9">process_slot<pos:position pos:line="4" pos:column="21"/></name> <init pos:line="4" pos:column="22">= <expr><name><name pos:line="4" pos:column="24">ti<pos:position pos:line="4" pos:column="26"/></name><operator pos:line="4" pos:column="26">-&gt;<pos:position pos:line="4" pos:column="31"/></operator><name pos:line="4" pos:column="28">pid<pos:position pos:line="4" pos:column="31"/></name></name></expr></init></decl>;<pos:position pos:line="4" pos:column="32"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">apr_pool_t<pos:position pos:line="5" pos:column="15"/></name> <modifier pos:line="5" pos:column="16">*<pos:position pos:line="5" pos:column="17"/></modifier></type><name pos:line="5" pos:column="17">tpool<pos:position pos:line="5" pos:column="22"/></name> <init pos:line="5" pos:column="23">= <expr><call><name pos:line="5" pos:column="25">apr_thread_pool_get<pos:position pos:line="5" pos:column="44"/></name><argument_list pos:line="5" pos:column="44">(<argument><expr><name pos:line="5" pos:column="45">thd<pos:position pos:line="5" pos:column="48"/></name></expr></argument>)<pos:position pos:line="5" pos:column="49"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="50"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">void<pos:position pos:line="6" pos:column="9"/></name> <modifier pos:line="6" pos:column="10">*<pos:position pos:line="6" pos:column="11"/></modifier></type><name pos:line="6" pos:column="11">csd<pos:position pos:line="6" pos:column="14"/></name> <init pos:line="6" pos:column="15">= <expr><name pos:line="6" pos:column="17">NULL<pos:position pos:line="6" pos:column="21"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">apr_pool_t<pos:position pos:line="7" pos:column="15"/></name> <modifier pos:line="7" pos:column="16">*<pos:position pos:line="7" pos:column="17"/></modifier></type><name pos:line="7" pos:column="17">ptrans<pos:position pos:line="7" pos:column="23"/></name></decl>;<pos:position pos:line="7" pos:column="24"/></decl_stmt>                <comment type="block" pos:line="7" pos:column="40">/* Pool for per-transaction stuff */</comment>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">apr_pool_t<pos:position pos:line="8" pos:column="15"/></name> <modifier pos:line="8" pos:column="16">*<pos:position pos:line="8" pos:column="17"/></modifier></type><name pos:line="8" pos:column="17">recycled_pool<pos:position pos:line="8" pos:column="30"/></name> <init pos:line="8" pos:column="31">= <expr><name pos:line="8" pos:column="33">NULL<pos:position pos:line="8" pos:column="37"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="38"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">int<pos:position pos:line="9" pos:column="8"/></name></type> <name pos:line="9" pos:column="9">n<pos:position pos:line="9" pos:column="10"/></name></decl>;<pos:position pos:line="9" pos:column="11"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">apr_pollfd_t<pos:position pos:line="10" pos:column="17"/></name> <modifier pos:line="10" pos:column="18">*<pos:position pos:line="10" pos:column="19"/></modifier></type><name pos:line="10" pos:column="19">pollset<pos:position pos:line="10" pos:column="26"/></name></decl>;<pos:position pos:line="10" pos:column="27"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="11" pos:column="5">apr_status_t<pos:position pos:line="11" pos:column="17"/></name></type> <name pos:line="11" pos:column="18">rv<pos:position pos:line="11" pos:column="20"/></name></decl>;<pos:position pos:line="11" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="12" pos:column="5">ap_listen_rec<pos:position pos:line="12" pos:column="18"/></name> <modifier pos:line="12" pos:column="19">*<pos:position pos:line="12" pos:column="20"/></modifier></type><name pos:line="12" pos:column="20">lr<pos:position pos:line="12" pos:column="22"/></name></decl>, <modifier pos:line="12" pos:column="24">*<pos:position pos:line="12" pos:column="25"/></modifier><decl><type ref="prev"/><name pos:line="12" pos:column="25">last_lr<pos:position pos:line="12" pos:column="32"/></name> <init pos:line="12" pos:column="33">= <expr><name pos:line="12" pos:column="35">ap_listeners<pos:position pos:line="12" pos:column="47"/></name></expr></init></decl>;<pos:position pos:line="12" pos:column="48"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="13" pos:column="5">int<pos:position pos:line="13" pos:column="8"/></name></type> <name pos:line="13" pos:column="9">have_idle_worker<pos:position pos:line="13" pos:column="25"/></name> <init pos:line="13" pos:column="26">= <expr><literal type="number" pos:line="13" pos:column="28">0<pos:position pos:line="13" pos:column="29"/></literal></expr></init></decl>;<pos:position pos:line="13" pos:column="30"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="15" pos:column="5">free<pos:position pos:line="15" pos:column="9"/></name><argument_list pos:line="15" pos:column="9">(<argument><expr><name pos:line="15" pos:column="10">ti<pos:position pos:line="15" pos:column="12"/></name></expr></argument>)<pos:position pos:line="15" pos:column="13"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="14"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="17" pos:column="5">apr_poll_setup<pos:position pos:line="17" pos:column="19"/></name><argument_list pos:line="17" pos:column="19">(<argument><expr><operator pos:line="17" pos:column="20">&amp;<pos:position pos:line="17" pos:column="25"/></operator><name pos:line="17" pos:column="21">pollset<pos:position pos:line="17" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="30">num_listensocks<pos:position pos:line="17" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="47">tpool<pos:position pos:line="17" pos:column="52"/></name></expr></argument>)<pos:position pos:line="17" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="54"/></expr_stmt>
    <for pos:line="18" pos:column="5">for<control pos:line="18" pos:column="8">(<init><expr><name pos:line="18" pos:column="9">lr<pos:position pos:line="18" pos:column="11"/></name> <operator pos:line="18" pos:column="12">=<pos:position pos:line="18" pos:column="13"/></operator> <name pos:line="18" pos:column="14">ap_listeners<pos:position pos:line="18" pos:column="26"/></name></expr> ;<pos:position pos:line="18" pos:column="28"/></init> <condition><expr><name pos:line="18" pos:column="29">lr<pos:position pos:line="18" pos:column="31"/></name> <operator pos:line="18" pos:column="32">!=<pos:position pos:line="18" pos:column="34"/></operator> <name pos:line="18" pos:column="35">NULL<pos:position pos:line="18" pos:column="39"/></name></expr> ;<pos:position pos:line="18" pos:column="41"/></condition> <incr><expr><name pos:line="18" pos:column="42">lr<pos:position pos:line="18" pos:column="44"/></name> <operator pos:line="18" pos:column="45">=<pos:position pos:line="18" pos:column="46"/></operator> <name><name pos:line="18" pos:column="47">lr<pos:position pos:line="18" pos:column="49"/></name><operator pos:line="18" pos:column="49">-&gt;<pos:position pos:line="18" pos:column="54"/></operator><name pos:line="18" pos:column="51">next<pos:position pos:line="18" pos:column="55"/></name></name></expr></incr>)<pos:position pos:line="18" pos:column="56"/></control>
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="19" pos:column="9">apr_poll_socket_add<pos:position pos:line="19" pos:column="28"/></name><argument_list pos:line="19" pos:column="28">(<argument><expr><name pos:line="19" pos:column="29">pollset<pos:position pos:line="19" pos:column="36"/></name></expr></argument>, <argument><expr><name><name pos:line="19" pos:column="38">lr<pos:position pos:line="19" pos:column="40"/></name><operator pos:line="19" pos:column="40">-&gt;<pos:position pos:line="19" pos:column="45"/></operator><name pos:line="19" pos:column="42">sd<pos:position pos:line="19" pos:column="44"/></name></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="46">APR_POLLIN<pos:position pos:line="19" pos:column="56"/></name></expr></argument>)<pos:position pos:line="19" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="58"/></expr_stmt></block></for>

    <comment type="block" pos:line="21" pos:column="5">/* Unblock the signal used to wake this thread up, and set a handler for
     * it.
     */</comment>
    <expr_stmt><expr><call><name pos:line="24" pos:column="5">unblock_signal<pos:position pos:line="24" pos:column="19"/></name><argument_list pos:line="24" pos:column="19">(<argument><expr><name pos:line="24" pos:column="20">LISTENER_SIGNAL<pos:position pos:line="24" pos:column="35"/></name></expr></argument>)<pos:position pos:line="24" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="37"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="25" pos:column="5">apr_signal<pos:position pos:line="25" pos:column="15"/></name><argument_list pos:line="25" pos:column="15">(<argument><expr><name pos:line="25" pos:column="16">LISTENER_SIGNAL<pos:position pos:line="25" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="33">dummy_signal_handler<pos:position pos:line="25" pos:column="53"/></name></expr></argument>)<pos:position pos:line="25" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="55"/></expr_stmt>

    <comment type="block" pos:line="27" pos:column="5">/* TODO: Switch to a system where threads reuse the results from earlier
       poll calls - manoj */</comment>
    <while pos:line="29" pos:column="5">while <condition pos:line="29" pos:column="11">(<expr><literal type="number" pos:line="29" pos:column="12">1<pos:position pos:line="29" pos:column="13"/></literal></expr>)<pos:position pos:line="29" pos:column="14"/></condition> <block pos:line="29" pos:column="15">{
        <comment type="block" pos:line="30" pos:column="9">/* TODO: requests_this_child should be synchronized - aaron */</comment>
        <if pos:line="31" pos:column="9">if <condition pos:line="31" pos:column="12">(<expr><name pos:line="31" pos:column="13">requests_this_child<pos:position pos:line="31" pos:column="32"/></name> <operator pos:line="31" pos:column="33">&lt;=<pos:position pos:line="31" pos:column="38"/></operator> <literal type="number" pos:line="31" pos:column="36">0<pos:position pos:line="31" pos:column="37"/></literal></expr>)<pos:position pos:line="31" pos:column="38"/></condition><then pos:line="31" pos:column="38"> <block pos:line="31" pos:column="39">{
            <expr_stmt><expr><call><name pos:line="32" pos:column="13">check_infinite_requests<pos:position pos:line="32" pos:column="36"/></name><argument_list pos:line="32" pos:column="36">()<pos:position pos:line="32" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="39"/></expr_stmt>
        }<pos:position pos:line="33" pos:column="10"/></block></then></if>
        <if pos:line="34" pos:column="9">if <condition pos:line="34" pos:column="12">(<expr><name pos:line="34" pos:column="13">listener_may_exit<pos:position pos:line="34" pos:column="30"/></name></expr>)<pos:position pos:line="34" pos:column="31"/></condition><then pos:line="34" pos:column="31"> <block type="pseudo"><break pos:line="34" pos:column="32">break;<pos:position pos:line="34" pos:column="38"/></break></block></then></if>

        <if pos:line="36" pos:column="9">if <condition pos:line="36" pos:column="12">(<expr><operator pos:line="36" pos:column="13">!<pos:position pos:line="36" pos:column="14"/></operator><name pos:line="36" pos:column="14">have_idle_worker<pos:position pos:line="36" pos:column="30"/></name></expr>)<pos:position pos:line="36" pos:column="31"/></condition><then pos:line="36" pos:column="31"> <block pos:line="36" pos:column="32">{
            <expr_stmt><expr><name pos:line="37" pos:column="13">rv<pos:position pos:line="37" pos:column="15"/></name> <operator pos:line="37" pos:column="16">=<pos:position pos:line="37" pos:column="17"/></operator> <call><name pos:line="37" pos:column="18">ap_queue_info_wait_for_idler<pos:position pos:line="37" pos:column="46"/></name><argument_list pos:line="37" pos:column="46">(<argument><expr><name pos:line="37" pos:column="47">worker_queue_info<pos:position pos:line="37" pos:column="64"/></name></expr></argument>,
                                              <argument><expr><operator pos:line="38" pos:column="47">&amp;<pos:position pos:line="38" pos:column="52"/></operator><name pos:line="38" pos:column="48">recycled_pool<pos:position pos:line="38" pos:column="61"/></name></expr></argument>)<pos:position pos:line="38" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="63"/></expr_stmt>
            <if pos:line="39" pos:column="13">if <condition pos:line="39" pos:column="16">(<expr><call><name pos:line="39" pos:column="17">APR_STATUS_IS_EOF<pos:position pos:line="39" pos:column="34"/></name><argument_list pos:line="39" pos:column="34">(<argument><expr><name pos:line="39" pos:column="35">rv<pos:position pos:line="39" pos:column="37"/></name></expr></argument>)<pos:position pos:line="39" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="39" pos:column="39"/></condition><then pos:line="39" pos:column="39"> <block pos:line="39" pos:column="40">{
                <break pos:line="40" pos:column="17">break;<pos:position pos:line="40" pos:column="23"/></break> <comment type="block" pos:line="40" pos:column="24">/* we've been signaled to die now */</comment>
            }<pos:position pos:line="41" pos:column="14"/></block></then>
            <elseif pos:line="42" pos:column="13">else <if pos:line="42" pos:column="18">if <condition pos:line="42" pos:column="21">(<expr><name pos:line="42" pos:column="22">rv<pos:position pos:line="42" pos:column="24"/></name> <operator pos:line="42" pos:column="25">!=<pos:position pos:line="42" pos:column="27"/></operator> <name pos:line="42" pos:column="28">APR_SUCCESS<pos:position pos:line="42" pos:column="39"/></name></expr>)<pos:position pos:line="42" pos:column="40"/></condition><then pos:line="42" pos:column="40"> <block pos:line="42" pos:column="41">{
                <expr_stmt><expr><call><name pos:line="43" pos:column="17">ap_log_error<pos:position pos:line="43" pos:column="29"/></name><argument_list pos:line="43" pos:column="29">(<argument><expr><name pos:line="43" pos:column="30">APLOG_MARK<pos:position pos:line="43" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="42">APLOG_EMERG<pos:position pos:line="43" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="55">rv<pos:position pos:line="43" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="59">ap_server_conf<pos:position pos:line="43" pos:column="73"/></name></expr></argument>,
                             <argument><expr><literal type="string" pos:line="44" pos:column="30">"apr_queue_info_wait failed. Attempting to "<pos:position pos:line="44" pos:column="74"/></literal>
                             <literal type="string" pos:line="45" pos:column="30">" shutdown process gracefully."<pos:position pos:line="45" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="45" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="63"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="46" pos:column="17">signal_threads<pos:position pos:line="46" pos:column="31"/></name><argument_list pos:line="46" pos:column="31">(<argument><expr><name pos:line="46" pos:column="32">ST_GRACEFUL<pos:position pos:line="46" pos:column="43"/></name></expr></argument>)<pos:position pos:line="46" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="45"/></expr_stmt>
                <break pos:line="47" pos:column="17">break;<pos:position pos:line="47" pos:column="23"/></break>
            }<pos:position pos:line="48" pos:column="14"/></block></then></if></elseif></if>
            <expr_stmt><expr><name pos:line="49" pos:column="13">have_idle_worker<pos:position pos:line="49" pos:column="29"/></name> <operator pos:line="49" pos:column="30">=<pos:position pos:line="49" pos:column="31"/></operator> <literal type="number" pos:line="49" pos:column="32">1<pos:position pos:line="49" pos:column="33"/></literal></expr>;<pos:position pos:line="49" pos:column="34"/></expr_stmt>
        }<pos:position pos:line="50" pos:column="10"/></block></then></if>
            
        <comment type="block" pos:line="52" pos:column="9">/* We've already decremented the idle worker count inside
         * ap_queue_info_wait_for_idler. */</comment>

        <if pos:line="55" pos:column="9">if <condition pos:line="55" pos:column="12">(<expr><operator pos:line="55" pos:column="13">(<pos:position pos:line="55" pos:column="14"/></operator><name pos:line="55" pos:column="14">rv<pos:position pos:line="55" pos:column="16"/></name> <operator pos:line="55" pos:column="17">=<pos:position pos:line="55" pos:column="18"/></operator> <call><name pos:line="55" pos:column="19">SAFE_ACCEPT<pos:position pos:line="55" pos:column="30"/></name><argument_list pos:line="55" pos:column="30">(<argument><expr><call><name pos:line="55" pos:column="31">apr_proc_mutex_lock<pos:position pos:line="55" pos:column="50"/></name><argument_list pos:line="55" pos:column="50">(<argument><expr><name pos:line="55" pos:column="51">accept_mutex<pos:position pos:line="55" pos:column="63"/></name></expr></argument>)<pos:position pos:line="55" pos:column="64"/></argument_list></call></expr></argument>)<pos:position pos:line="55" pos:column="65"/></argument_list></call><operator pos:line="55" pos:column="65">)<pos:position pos:line="55" pos:column="66"/></operator>
            <operator pos:line="56" pos:column="13">!=<pos:position pos:line="56" pos:column="15"/></operator> <name pos:line="56" pos:column="16">APR_SUCCESS<pos:position pos:line="56" pos:column="27"/></name></expr>)<pos:position pos:line="56" pos:column="28"/></condition><then pos:line="56" pos:column="28"> <block pos:line="56" pos:column="29">{
            <decl_stmt><decl><type><name pos:line="57" pos:column="13">int<pos:position pos:line="57" pos:column="16"/></name></type> <name pos:line="57" pos:column="17">level<pos:position pos:line="57" pos:column="22"/></name> <init pos:line="57" pos:column="23">= <expr><name pos:line="57" pos:column="25">APLOG_EMERG<pos:position pos:line="57" pos:column="36"/></name></expr></init></decl>;<pos:position pos:line="57" pos:column="37"/></decl_stmt>

            <if pos:line="59" pos:column="13">if <condition pos:line="59" pos:column="16">(<expr><name pos:line="59" pos:column="17">listener_may_exit<pos:position pos:line="59" pos:column="34"/></name></expr>)<pos:position pos:line="59" pos:column="35"/></condition><then pos:line="59" pos:column="35"> <block pos:line="59" pos:column="36">{
                <break pos:line="60" pos:column="17">break;<pos:position pos:line="60" pos:column="23"/></break>
            }<pos:position pos:line="61" pos:column="14"/></block></then></if>
            <if pos:line="62" pos:column="13">if <condition pos:line="62" pos:column="16">(<expr><name><name pos:line="62" pos:column="17">ap_scoreboard_image<pos:position pos:line="62" pos:column="36"/></name><operator pos:line="62" pos:column="36">-&gt;<pos:position pos:line="62" pos:column="41"/></operator><name pos:line="62" pos:column="38">parent<pos:position pos:line="62" pos:column="44"/></name><index pos:line="62" pos:column="44">[<expr><name pos:line="62" pos:column="45">process_slot<pos:position pos:line="62" pos:column="57"/></name></expr>]<pos:position pos:line="62" pos:column="58"/></index></name><operator pos:line="62" pos:column="58">.<pos:position pos:line="62" pos:column="59"/></operator><name pos:line="62" pos:column="59">generation<pos:position pos:line="62" pos:column="69"/></name> <operator pos:line="62" pos:column="70">!=<pos:position pos:line="62" pos:column="72"/></operator> 
                <name><name pos:line="63" pos:column="17">ap_scoreboard_image<pos:position pos:line="63" pos:column="36"/></name><operator pos:line="63" pos:column="36">-&gt;<pos:position pos:line="63" pos:column="41"/></operator><name pos:line="63" pos:column="38">global<pos:position pos:line="63" pos:column="44"/></name><operator pos:line="63" pos:column="44">-&gt;<pos:position pos:line="63" pos:column="49"/></operator><name pos:line="63" pos:column="46">running_generation<pos:position pos:line="63" pos:column="64"/></name></name></expr>)<pos:position pos:line="63" pos:column="65"/></condition><then pos:line="63" pos:column="65"> <block pos:line="63" pos:column="66">{
                <expr_stmt><expr><name pos:line="64" pos:column="17">level<pos:position pos:line="64" pos:column="22"/></name> <operator pos:line="64" pos:column="23">=<pos:position pos:line="64" pos:column="24"/></operator> <name pos:line="64" pos:column="25">APLOG_DEBUG<pos:position pos:line="64" pos:column="36"/></name></expr>;<pos:position pos:line="64" pos:column="37"/></expr_stmt> <comment type="block" pos:line="64" pos:column="38">/* common to get these at restart time */</comment>
            }<pos:position pos:line="65" pos:column="14"/></block></then></if>
            <expr_stmt><expr><call><name pos:line="66" pos:column="13">ap_log_error<pos:position pos:line="66" pos:column="25"/></name><argument_list pos:line="66" pos:column="25">(<argument><expr><name pos:line="66" pos:column="26">APLOG_MARK<pos:position pos:line="66" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="38">level<pos:position pos:line="66" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="45">rv<pos:position pos:line="66" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="49">ap_server_conf<pos:position pos:line="66" pos:column="63"/></name></expr></argument>,
                         <argument><expr><literal type="string" pos:line="67" pos:column="26">"apr_proc_mutex_lock failed. Attempting to shutdown "<pos:position pos:line="67" pos:column="79"/></literal>
                         <literal type="string" pos:line="68" pos:column="26">"process gracefully."<pos:position pos:line="68" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="68" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="49"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="69" pos:column="13">signal_threads<pos:position pos:line="69" pos:column="27"/></name><argument_list pos:line="69" pos:column="27">(<argument><expr><name pos:line="69" pos:column="28">ST_GRACEFUL<pos:position pos:line="69" pos:column="39"/></name></expr></argument>)<pos:position pos:line="69" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="41"/></expr_stmt>
            <break pos:line="70" pos:column="13">break;<pos:position pos:line="70" pos:column="19"/></break>                    <comment type="block" pos:line="70" pos:column="39">/* skip the lock release */</comment>
        }<pos:position pos:line="71" pos:column="10"/></block></then></if>

        <if pos:line="73" pos:column="9">if <condition pos:line="73" pos:column="12">(<expr><operator pos:line="73" pos:column="13">!<pos:position pos:line="73" pos:column="14"/></operator><name><name pos:line="73" pos:column="14">ap_listeners<pos:position pos:line="73" pos:column="26"/></name><operator pos:line="73" pos:column="26">-&gt;<pos:position pos:line="73" pos:column="31"/></operator><name pos:line="73" pos:column="28">next<pos:position pos:line="73" pos:column="32"/></name></name></expr>)<pos:position pos:line="73" pos:column="33"/></condition><then pos:line="73" pos:column="33"> <block pos:line="73" pos:column="34">{
            <comment type="block" pos:line="74" pos:column="13">/* Only one listener, so skip the poll */</comment>
            <expr_stmt><expr><name pos:line="75" pos:column="13">lr<pos:position pos:line="75" pos:column="15"/></name> <operator pos:line="75" pos:column="16">=<pos:position pos:line="75" pos:column="17"/></operator> <name pos:line="75" pos:column="18">ap_listeners<pos:position pos:line="75" pos:column="30"/></name></expr>;<pos:position pos:line="75" pos:column="31"/></expr_stmt>
        }<pos:position pos:line="76" pos:column="10"/></block></then>
        <else pos:line="77" pos:column="9">else <block pos:line="77" pos:column="14">{
            <while pos:line="78" pos:column="13">while <condition pos:line="78" pos:column="19">(<expr><operator pos:line="78" pos:column="20">!<pos:position pos:line="78" pos:column="21"/></operator><name pos:line="78" pos:column="21">listener_may_exit<pos:position pos:line="78" pos:column="38"/></name></expr>)<pos:position pos:line="78" pos:column="39"/></condition> <block pos:line="78" pos:column="40">{
                <decl_stmt><decl><type><name pos:line="79" pos:column="17">apr_status_t<pos:position pos:line="79" pos:column="29"/></name></type> <name pos:line="79" pos:column="30">ret<pos:position pos:line="79" pos:column="33"/></name></decl>;<pos:position pos:line="79" pos:column="34"/></decl_stmt>
                <decl_stmt><decl><type><name pos:line="80" pos:column="17">apr_int16_t<pos:position pos:line="80" pos:column="28"/></name></type> <name pos:line="80" pos:column="29">event<pos:position pos:line="80" pos:column="34"/></name></decl>;<pos:position pos:line="80" pos:column="35"/></decl_stmt>

                <expr_stmt><expr><name pos:line="82" pos:column="17">ret<pos:position pos:line="82" pos:column="20"/></name> <operator pos:line="82" pos:column="21">=<pos:position pos:line="82" pos:column="22"/></operator> <call><name pos:line="82" pos:column="23">apr_poll<pos:position pos:line="82" pos:column="31"/></name><argument_list pos:line="82" pos:column="31">(<argument><expr><name pos:line="82" pos:column="32">pollset<pos:position pos:line="82" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="82" pos:column="41">num_listensocks<pos:position pos:line="82" pos:column="56"/></name></expr></argument>, <argument><expr><operator pos:line="82" pos:column="58">&amp;<pos:position pos:line="82" pos:column="63"/></operator><name pos:line="82" pos:column="59">n<pos:position pos:line="82" pos:column="60"/></name></expr></argument>, <argument><expr><operator pos:line="82" pos:column="62">-<pos:position pos:line="82" pos:column="63"/></operator><literal type="number" pos:line="82" pos:column="63">1<pos:position pos:line="82" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="82" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="66"/></expr_stmt>
                <if pos:line="83" pos:column="17">if <condition pos:line="83" pos:column="20">(<expr><name pos:line="83" pos:column="21">ret<pos:position pos:line="83" pos:column="24"/></name> <operator pos:line="83" pos:column="25">!=<pos:position pos:line="83" pos:column="27"/></operator> <name pos:line="83" pos:column="28">APR_SUCCESS<pos:position pos:line="83" pos:column="39"/></name></expr>)<pos:position pos:line="83" pos:column="40"/></condition><then pos:line="83" pos:column="40"> <block pos:line="83" pos:column="41">{
                    <if pos:line="84" pos:column="21">if <condition pos:line="84" pos:column="24">(<expr><call><name pos:line="84" pos:column="25">APR_STATUS_IS_EINTR<pos:position pos:line="84" pos:column="44"/></name><argument_list pos:line="84" pos:column="44">(<argument><expr><name pos:line="84" pos:column="45">ret<pos:position pos:line="84" pos:column="48"/></name></expr></argument>)<pos:position pos:line="84" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="84" pos:column="50"/></condition><then pos:line="84" pos:column="50"> <block pos:line="84" pos:column="51">{
                        <continue pos:line="85" pos:column="25">continue;<pos:position pos:line="85" pos:column="34"/></continue>
                    }<pos:position pos:line="86" pos:column="22"/></block></then></if>

                    <comment type="block" pos:line="88" pos:column="21">/* apr_pollset_poll() will only return errors in catastrophic
                     * circumstances. Let's try exiting gracefully, for now. */</comment>
                    <expr_stmt><expr><call><name pos:line="90" pos:column="21">ap_log_error<pos:position pos:line="90" pos:column="33"/></name><argument_list pos:line="90" pos:column="33">(<argument><expr><name pos:line="90" pos:column="34">APLOG_MARK<pos:position pos:line="90" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="90" pos:column="46">APLOG_ERR<pos:position pos:line="90" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="90" pos:column="57">ret<pos:position pos:line="90" pos:column="60"/></name></expr></argument>, <argument><expr><operator pos:line="90" pos:column="62">(<pos:position pos:line="90" pos:column="63"/></operator><specifier pos:line="90" pos:column="63">const<pos:position pos:line="90" pos:column="68"/></specifier> <name pos:line="90" pos:column="69">server_rec<pos:position pos:line="90" pos:column="79"/></name> <operator pos:line="90" pos:column="80">*<pos:position pos:line="90" pos:column="81"/></operator><operator pos:line="90" pos:column="81">)<pos:position pos:line="90" pos:column="82"/></operator>
                                 <name pos:line="91" pos:column="34">ap_server_conf<pos:position pos:line="91" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="91" pos:column="50">"apr_poll: (listen)"<pos:position pos:line="91" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="91" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="72"/></expr_stmt>
                    <expr_stmt><expr><call><name pos:line="92" pos:column="21">signal_threads<pos:position pos:line="92" pos:column="35"/></name><argument_list pos:line="92" pos:column="35">(<argument><expr><name pos:line="92" pos:column="36">ST_GRACEFUL<pos:position pos:line="92" pos:column="47"/></name></expr></argument>)<pos:position pos:line="92" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="49"/></expr_stmt>
                }<pos:position pos:line="93" pos:column="18"/></block></then></if>

                <if pos:line="95" pos:column="17">if <condition pos:line="95" pos:column="20">(<expr><name pos:line="95" pos:column="21">listener_may_exit<pos:position pos:line="95" pos:column="38"/></name></expr>)<pos:position pos:line="95" pos:column="39"/></condition><then pos:line="95" pos:column="39"> <block type="pseudo"><break pos:line="95" pos:column="40">break;<pos:position pos:line="95" pos:column="46"/></break></block></then></if>

                <comment type="block" pos:line="97" pos:column="17">/* find a listener */</comment>
                <expr_stmt><expr><name pos:line="98" pos:column="17">lr<pos:position pos:line="98" pos:column="19"/></name> <operator pos:line="98" pos:column="20">=<pos:position pos:line="98" pos:column="21"/></operator> <name pos:line="98" pos:column="22">last_lr<pos:position pos:line="98" pos:column="29"/></name></expr>;<pos:position pos:line="98" pos:column="30"/></expr_stmt>
                <do pos:line="99" pos:column="17">do <block pos:line="99" pos:column="20">{
                    <expr_stmt><expr><name pos:line="100" pos:column="21">lr<pos:position pos:line="100" pos:column="23"/></name> <operator pos:line="100" pos:column="24">=<pos:position pos:line="100" pos:column="25"/></operator> <name><name pos:line="100" pos:column="26">lr<pos:position pos:line="100" pos:column="28"/></name><operator pos:line="100" pos:column="28">-&gt;<pos:position pos:line="100" pos:column="33"/></operator><name pos:line="100" pos:column="30">next<pos:position pos:line="100" pos:column="34"/></name></name></expr>;<pos:position pos:line="100" pos:column="35"/></expr_stmt>
                    <if pos:line="101" pos:column="21">if <condition pos:line="101" pos:column="24">(<expr><name pos:line="101" pos:column="25">lr<pos:position pos:line="101" pos:column="27"/></name> <operator pos:line="101" pos:column="28">==<pos:position pos:line="101" pos:column="30"/></operator> <name pos:line="101" pos:column="31">NULL<pos:position pos:line="101" pos:column="35"/></name></expr>)<pos:position pos:line="101" pos:column="36"/></condition><then pos:line="101" pos:column="36"> <block pos:line="101" pos:column="37">{
                        <expr_stmt><expr><name pos:line="102" pos:column="25">lr<pos:position pos:line="102" pos:column="27"/></name> <operator pos:line="102" pos:column="28">=<pos:position pos:line="102" pos:column="29"/></operator> <name pos:line="102" pos:column="30">ap_listeners<pos:position pos:line="102" pos:column="42"/></name></expr>;<pos:position pos:line="102" pos:column="43"/></expr_stmt>
                    }<pos:position pos:line="103" pos:column="22"/></block></then></if>
                    <comment type="block" pos:line="104" pos:column="21">/* XXX: Should we check for POLLERR? */</comment>
                    <expr_stmt><expr><call><name pos:line="105" pos:column="21">apr_poll_revents_get<pos:position pos:line="105" pos:column="41"/></name><argument_list pos:line="105" pos:column="41">(<argument><expr><operator pos:line="105" pos:column="42">&amp;<pos:position pos:line="105" pos:column="47"/></operator><name pos:line="105" pos:column="43">event<pos:position pos:line="105" pos:column="48"/></name></expr></argument>, <argument><expr><name><name pos:line="105" pos:column="50">lr<pos:position pos:line="105" pos:column="52"/></name><operator pos:line="105" pos:column="52">-&gt;<pos:position pos:line="105" pos:column="57"/></operator><name pos:line="105" pos:column="54">sd<pos:position pos:line="105" pos:column="56"/></name></name></expr></argument>, <argument><expr><name pos:line="105" pos:column="58">pollset<pos:position pos:line="105" pos:column="65"/></name></expr></argument>)<pos:position pos:line="105" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="105" pos:column="67"/></expr_stmt>
                    <if pos:line="106" pos:column="21">if <condition pos:line="106" pos:column="24">(<expr><name pos:line="106" pos:column="25">event<pos:position pos:line="106" pos:column="30"/></name> <operator pos:line="106" pos:column="31">&amp;<pos:position pos:line="106" pos:column="36"/></operator> <name pos:line="106" pos:column="33">APR_POLLIN<pos:position pos:line="106" pos:column="43"/></name></expr>)<pos:position pos:line="106" pos:column="44"/></condition><then pos:line="106" pos:column="44"> <block pos:line="106" pos:column="45">{
                        <expr_stmt><expr><name pos:line="107" pos:column="25">last_lr<pos:position pos:line="107" pos:column="32"/></name> <operator pos:line="107" pos:column="33">=<pos:position pos:line="107" pos:column="34"/></operator> <name pos:line="107" pos:column="35">lr<pos:position pos:line="107" pos:column="37"/></name></expr>;<pos:position pos:line="107" pos:column="38"/></expr_stmt>
                        <goto pos:line="108" pos:column="25">goto <name pos:line="108" pos:column="30">got_fd<pos:position pos:line="108" pos:column="36"/></name>;<pos:position pos:line="108" pos:column="37"/></goto>
                    }<pos:position pos:line="109" pos:column="22"/></block></then></if>
                }<pos:position pos:line="110" pos:column="18"/></block> while <condition pos:line="110" pos:column="25">(<expr><name pos:line="110" pos:column="26">lr<pos:position pos:line="110" pos:column="28"/></name> <operator pos:line="110" pos:column="29">!=<pos:position pos:line="110" pos:column="31"/></operator> <name pos:line="110" pos:column="32">last_lr<pos:position pos:line="110" pos:column="39"/></name></expr>)<pos:position pos:line="110" pos:column="40"/></condition>;<pos:position pos:line="110" pos:column="41"/></do>
            }<pos:position pos:line="111" pos:column="14"/></block></while>
        }<pos:position pos:line="112" pos:column="10"/></block></else></if>
    <label><name pos:line="113" pos:column="5">got_fd<pos:position pos:line="113" pos:column="11"/></name>:<pos:position pos:line="113" pos:column="12"/></label>
        <if pos:line="114" pos:column="9">if <condition pos:line="114" pos:column="12">(<expr><operator pos:line="114" pos:column="13">!<pos:position pos:line="114" pos:column="14"/></operator><name pos:line="114" pos:column="14">listener_may_exit<pos:position pos:line="114" pos:column="31"/></name></expr>)<pos:position pos:line="114" pos:column="32"/></condition><then pos:line="114" pos:column="32"> <block pos:line="114" pos:column="33">{
            <comment type="block" pos:line="115" pos:column="13">/* create a new transaction pool for each accepted socket */</comment>
            <if pos:line="116" pos:column="13">if <condition pos:line="116" pos:column="16">(<expr><name pos:line="116" pos:column="17">recycled_pool<pos:position pos:line="116" pos:column="30"/></name> <operator pos:line="116" pos:column="31">==<pos:position pos:line="116" pos:column="33"/></operator> <name pos:line="116" pos:column="34">NULL<pos:position pos:line="116" pos:column="38"/></name></expr>)<pos:position pos:line="116" pos:column="39"/></condition><then pos:line="116" pos:column="39"> <block pos:line="116" pos:column="40">{
                <decl_stmt><decl><type><name pos:line="117" pos:column="17">apr_allocator_t<pos:position pos:line="117" pos:column="32"/></name> <modifier pos:line="117" pos:column="33">*<pos:position pos:line="117" pos:column="34"/></modifier></type><name pos:line="117" pos:column="34">allocator<pos:position pos:line="117" pos:column="43"/></name></decl>;<pos:position pos:line="117" pos:column="44"/></decl_stmt>

                <expr_stmt><expr><call><name pos:line="119" pos:column="17">apr_allocator_create<pos:position pos:line="119" pos:column="37"/></name><argument_list pos:line="119" pos:column="37">(<argument><expr><operator pos:line="119" pos:column="38">&amp;<pos:position pos:line="119" pos:column="43"/></operator><name pos:line="119" pos:column="39">allocator<pos:position pos:line="119" pos:column="48"/></name></expr></argument>)<pos:position pos:line="119" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="119" pos:column="50"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="120" pos:column="17">apr_allocator_max_free_set<pos:position pos:line="120" pos:column="43"/></name><argument_list pos:line="120" pos:column="43">(<argument><expr><name pos:line="120" pos:column="44">allocator<pos:position pos:line="120" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="120" pos:column="55">ap_max_mem_free<pos:position pos:line="120" pos:column="70"/></name></expr></argument>)<pos:position pos:line="120" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="120" pos:column="72"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="121" pos:column="17">apr_pool_create_ex<pos:position pos:line="121" pos:column="35"/></name><argument_list pos:line="121" pos:column="35">(<argument><expr><operator pos:line="121" pos:column="36">&amp;<pos:position pos:line="121" pos:column="41"/></operator><name pos:line="121" pos:column="37">ptrans<pos:position pos:line="121" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="121" pos:column="45">NULL<pos:position pos:line="121" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="121" pos:column="51">NULL<pos:position pos:line="121" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="121" pos:column="57">allocator<pos:position pos:line="121" pos:column="66"/></name></expr></argument>)<pos:position pos:line="121" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="121" pos:column="68"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="122" pos:column="17">apr_allocator_owner_set<pos:position pos:line="122" pos:column="40"/></name><argument_list pos:line="122" pos:column="40">(<argument><expr><name pos:line="122" pos:column="41">allocator<pos:position pos:line="122" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="122" pos:column="52">ptrans<pos:position pos:line="122" pos:column="58"/></name></expr></argument>)<pos:position pos:line="122" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="122" pos:column="60"/></expr_stmt>
            }<pos:position pos:line="123" pos:column="14"/></block></then>
            <else pos:line="124" pos:column="13">else <block pos:line="124" pos:column="18">{
                <expr_stmt><expr><name pos:line="125" pos:column="17">ptrans<pos:position pos:line="125" pos:column="23"/></name> <operator pos:line="125" pos:column="24">=<pos:position pos:line="125" pos:column="25"/></operator> <name pos:line="125" pos:column="26">recycled_pool<pos:position pos:line="125" pos:column="39"/></name></expr>;<pos:position pos:line="125" pos:column="40"/></expr_stmt>
            }<pos:position pos:line="126" pos:column="14"/></block></else></if>
            <expr_stmt><expr><call><name pos:line="127" pos:column="13">apr_pool_tag<pos:position pos:line="127" pos:column="25"/></name><argument_list pos:line="127" pos:column="25">(<argument><expr><name pos:line="127" pos:column="26">ptrans<pos:position pos:line="127" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="127" pos:column="34">"transaction"<pos:position pos:line="127" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="127" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="127" pos:column="49"/></expr_stmt>
            <expr_stmt><expr><name pos:line="128" pos:column="13">rv<pos:position pos:line="128" pos:column="15"/></name> <operator pos:line="128" pos:column="16">=<pos:position pos:line="128" pos:column="17"/></operator> <call><name><name pos:line="128" pos:column="18">lr<pos:position pos:line="128" pos:column="20"/></name><operator pos:line="128" pos:column="20">-&gt;<pos:position pos:line="128" pos:column="25"/></operator><name pos:line="128" pos:column="22">accept_func<pos:position pos:line="128" pos:column="33"/></name></name><argument_list pos:line="128" pos:column="33">(<argument><expr><operator pos:line="128" pos:column="34">&amp;<pos:position pos:line="128" pos:column="39"/></operator><name pos:line="128" pos:column="35">csd<pos:position pos:line="128" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="128" pos:column="40">lr<pos:position pos:line="128" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="128" pos:column="44">ptrans<pos:position pos:line="128" pos:column="50"/></name></expr></argument>)<pos:position pos:line="128" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="128" pos:column="52"/></expr_stmt>
            <comment type="block" pos:line="129" pos:column="13">/* later we trash rv and rely on csd to indicate success/failure */</comment>
            <expr_stmt><expr><call><name pos:line="130" pos:column="13">AP_DEBUG_ASSERT<pos:position pos:line="130" pos:column="28"/></name><argument_list pos:line="130" pos:column="28">(<argument><expr><name pos:line="130" pos:column="29">rv<pos:position pos:line="130" pos:column="31"/></name> <operator pos:line="130" pos:column="32">==<pos:position pos:line="130" pos:column="34"/></operator> <name pos:line="130" pos:column="35">APR_SUCCESS<pos:position pos:line="130" pos:column="46"/></name> <operator pos:line="130" pos:column="47">||<pos:position pos:line="130" pos:column="49"/></operator> <operator pos:line="130" pos:column="50">!<pos:position pos:line="130" pos:column="51"/></operator><name pos:line="130" pos:column="51">csd<pos:position pos:line="130" pos:column="54"/></name></expr></argument>)<pos:position pos:line="130" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="130" pos:column="56"/></expr_stmt>

            <if pos:line="132" pos:column="13">if <condition pos:line="132" pos:column="16">(<expr><name pos:line="132" pos:column="17">rv<pos:position pos:line="132" pos:column="19"/></name> <operator pos:line="132" pos:column="20">==<pos:position pos:line="132" pos:column="22"/></operator> <name pos:line="132" pos:column="23">APR_EGENERAL<pos:position pos:line="132" pos:column="35"/></name></expr>)<pos:position pos:line="132" pos:column="36"/></condition><then pos:line="132" pos:column="36"> <block pos:line="132" pos:column="37">{
                <comment type="block" pos:line="133" pos:column="17">/* E[NM]FILE, ENOMEM, etc */</comment>
                <expr_stmt><expr><name pos:line="134" pos:column="17">resource_shortage<pos:position pos:line="134" pos:column="34"/></name> <operator pos:line="134" pos:column="35">=<pos:position pos:line="134" pos:column="36"/></operator> <literal type="number" pos:line="134" pos:column="37">1<pos:position pos:line="134" pos:column="38"/></literal></expr>;<pos:position pos:line="134" pos:column="39"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="135" pos:column="17">signal_threads<pos:position pos:line="135" pos:column="31"/></name><argument_list pos:line="135" pos:column="31">(<argument><expr><name pos:line="135" pos:column="32">ST_GRACEFUL<pos:position pos:line="135" pos:column="43"/></name></expr></argument>)<pos:position pos:line="135" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="135" pos:column="45"/></expr_stmt>
            }<pos:position pos:line="136" pos:column="14"/></block></then></if>
            <if pos:line="137" pos:column="13">if <condition pos:line="137" pos:column="16">(<expr><operator pos:line="137" pos:column="17">(<pos:position pos:line="137" pos:column="18"/></operator><name pos:line="137" pos:column="18">rv<pos:position pos:line="137" pos:column="20"/></name> <operator pos:line="137" pos:column="21">=<pos:position pos:line="137" pos:column="22"/></operator> <call><name pos:line="137" pos:column="23">SAFE_ACCEPT<pos:position pos:line="137" pos:column="34"/></name><argument_list pos:line="137" pos:column="34">(<argument><expr><call><name pos:line="137" pos:column="35">apr_proc_mutex_unlock<pos:position pos:line="137" pos:column="56"/></name><argument_list pos:line="137" pos:column="56">(<argument><expr><name pos:line="137" pos:column="57">accept_mutex<pos:position pos:line="137" pos:column="69"/></name></expr></argument>)<pos:position pos:line="137" pos:column="70"/></argument_list></call></expr></argument>)<pos:position pos:line="137" pos:column="71"/></argument_list></call><operator pos:line="137" pos:column="71">)<pos:position pos:line="137" pos:column="72"/></operator>
                <operator pos:line="138" pos:column="17">!=<pos:position pos:line="138" pos:column="19"/></operator> <name pos:line="138" pos:column="20">APR_SUCCESS<pos:position pos:line="138" pos:column="31"/></name></expr>)<pos:position pos:line="138" pos:column="32"/></condition><then pos:line="138" pos:column="32"> <block pos:line="138" pos:column="33">{
                <decl_stmt><decl><type><name pos:line="139" pos:column="17">int<pos:position pos:line="139" pos:column="20"/></name></type> <name pos:line="139" pos:column="21">level<pos:position pos:line="139" pos:column="26"/></name> <init pos:line="139" pos:column="27">= <expr><name pos:line="139" pos:column="29">APLOG_EMERG<pos:position pos:line="139" pos:column="40"/></name></expr></init></decl>;<pos:position pos:line="139" pos:column="41"/></decl_stmt>

                <if pos:line="141" pos:column="17">if <condition pos:line="141" pos:column="20">(<expr><name pos:line="141" pos:column="21">listener_may_exit<pos:position pos:line="141" pos:column="38"/></name></expr>)<pos:position pos:line="141" pos:column="39"/></condition><then pos:line="141" pos:column="39"> <block pos:line="141" pos:column="40">{
                    <break pos:line="142" pos:column="21">break;<pos:position pos:line="142" pos:column="27"/></break>
                }<pos:position pos:line="143" pos:column="18"/></block></then></if>
                <if pos:line="144" pos:column="17">if <condition pos:line="144" pos:column="20">(<expr><name><name pos:line="144" pos:column="21">ap_scoreboard_image<pos:position pos:line="144" pos:column="40"/></name><operator pos:line="144" pos:column="40">-&gt;<pos:position pos:line="144" pos:column="45"/></operator><name pos:line="144" pos:column="42">parent<pos:position pos:line="144" pos:column="48"/></name><index pos:line="144" pos:column="48">[<expr><name pos:line="144" pos:column="49">process_slot<pos:position pos:line="144" pos:column="61"/></name></expr>]<pos:position pos:line="144" pos:column="62"/></index></name><operator pos:line="144" pos:column="62">.<pos:position pos:line="144" pos:column="63"/></operator><name pos:line="144" pos:column="63">generation<pos:position pos:line="144" pos:column="73"/></name> <operator pos:line="144" pos:column="74">!=<pos:position pos:line="144" pos:column="76"/></operator> 
                    <name><name pos:line="145" pos:column="21">ap_scoreboard_image<pos:position pos:line="145" pos:column="40"/></name><operator pos:line="145" pos:column="40">-&gt;<pos:position pos:line="145" pos:column="45"/></operator><name pos:line="145" pos:column="42">global<pos:position pos:line="145" pos:column="48"/></name><operator pos:line="145" pos:column="48">-&gt;<pos:position pos:line="145" pos:column="53"/></operator><name pos:line="145" pos:column="50">running_generation<pos:position pos:line="145" pos:column="68"/></name></name></expr>)<pos:position pos:line="145" pos:column="69"/></condition><then pos:line="145" pos:column="69"> <block pos:line="145" pos:column="70">{
                    <expr_stmt><expr><name pos:line="146" pos:column="21">level<pos:position pos:line="146" pos:column="26"/></name> <operator pos:line="146" pos:column="27">=<pos:position pos:line="146" pos:column="28"/></operator> <name pos:line="146" pos:column="29">APLOG_DEBUG<pos:position pos:line="146" pos:column="40"/></name></expr>;<pos:position pos:line="146" pos:column="41"/></expr_stmt> <comment type="block" pos:line="146" pos:column="42">/* common to get these at restart time */</comment>
                }<pos:position pos:line="147" pos:column="18"/></block></then></if>
                <expr_stmt><expr><call><name pos:line="148" pos:column="17">ap_log_error<pos:position pos:line="148" pos:column="29"/></name><argument_list pos:line="148" pos:column="29">(<argument><expr><name pos:line="148" pos:column="30">APLOG_MARK<pos:position pos:line="148" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="148" pos:column="42">level<pos:position pos:line="148" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="148" pos:column="49">rv<pos:position pos:line="148" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="148" pos:column="53">ap_server_conf<pos:position pos:line="148" pos:column="67"/></name></expr></argument>,
                             <argument><expr><literal type="string" pos:line="149" pos:column="30">"apr_proc_mutex_unlock failed. Attempting to "<pos:position pos:line="149" pos:column="76"/></literal>
                             <literal type="string" pos:line="150" pos:column="30">"shutdown process gracefully."<pos:position pos:line="150" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="150" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="150" pos:column="62"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="151" pos:column="17">signal_threads<pos:position pos:line="151" pos:column="31"/></name><argument_list pos:line="151" pos:column="31">(<argument><expr><name pos:line="151" pos:column="32">ST_GRACEFUL<pos:position pos:line="151" pos:column="43"/></name></expr></argument>)<pos:position pos:line="151" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="151" pos:column="45"/></expr_stmt>
            }<pos:position pos:line="152" pos:column="14"/></block></then></if>
            <if pos:line="153" pos:column="13">if <condition pos:line="153" pos:column="16">(<expr><name pos:line="153" pos:column="17">csd<pos:position pos:line="153" pos:column="20"/></name> <operator pos:line="153" pos:column="21">!=<pos:position pos:line="153" pos:column="23"/></operator> <name pos:line="153" pos:column="24">NULL<pos:position pos:line="153" pos:column="28"/></name></expr>)<pos:position pos:line="153" pos:column="29"/></condition><then pos:line="153" pos:column="29"> <block pos:line="153" pos:column="30">{
                <expr_stmt><expr><name pos:line="154" pos:column="17">rv<pos:position pos:line="154" pos:column="19"/></name> <operator pos:line="154" pos:column="20">=<pos:position pos:line="154" pos:column="21"/></operator> <call><name pos:line="154" pos:column="22">ap_queue_push<pos:position pos:line="154" pos:column="35"/></name><argument_list pos:line="154" pos:column="35">(<argument><expr><name pos:line="154" pos:column="36">worker_queue<pos:position pos:line="154" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="154" pos:column="50">csd<pos:position pos:line="154" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="154" pos:column="55">ptrans<pos:position pos:line="154" pos:column="61"/></name></expr></argument>)<pos:position pos:line="154" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="154" pos:column="63"/></expr_stmt>
                <if pos:line="155" pos:column="17">if <condition pos:line="155" pos:column="20">(<expr><name pos:line="155" pos:column="21">rv<pos:position pos:line="155" pos:column="23"/></name></expr>)<pos:position pos:line="155" pos:column="24"/></condition><then pos:line="155" pos:column="24"> <block pos:line="155" pos:column="25">{
                    <comment type="block" pos:line="156" pos:column="21">/* trash the connection; we couldn't queue the connected
                     * socket to a worker 
                     */</comment>
                    <expr_stmt><expr><call><name pos:line="159" pos:column="21">apr_socket_close<pos:position pos:line="159" pos:column="37"/></name><argument_list pos:line="159" pos:column="37">(<argument><expr><name pos:line="159" pos:column="38">csd<pos:position pos:line="159" pos:column="41"/></name></expr></argument>)<pos:position pos:line="159" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="159" pos:column="43"/></expr_stmt>
                    <expr_stmt><expr><call><name pos:line="160" pos:column="21">ap_log_error<pos:position pos:line="160" pos:column="33"/></name><argument_list pos:line="160" pos:column="33">(<argument><expr><name pos:line="160" pos:column="34">APLOG_MARK<pos:position pos:line="160" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="160" pos:column="46">APLOG_CRIT<pos:position pos:line="160" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="160" pos:column="58">rv<pos:position pos:line="160" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="160" pos:column="62">ap_server_conf<pos:position pos:line="160" pos:column="76"/></name></expr></argument>,
                                 <argument><expr><literal type="string" pos:line="161" pos:column="34">"ap_queue_push failed"<pos:position pos:line="161" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="161" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="161" pos:column="58"/></expr_stmt>
                }<pos:position pos:line="162" pos:column="18"/></block></then>
                <else pos:line="163" pos:column="17">else <block pos:line="163" pos:column="22">{
                    <expr_stmt><expr><name pos:line="164" pos:column="21">have_idle_worker<pos:position pos:line="164" pos:column="37"/></name> <operator pos:line="164" pos:column="38">=<pos:position pos:line="164" pos:column="39"/></operator> <literal type="number" pos:line="164" pos:column="40">0<pos:position pos:line="164" pos:column="41"/></literal></expr>;<pos:position pos:line="164" pos:column="42"/></expr_stmt>
                }<pos:position pos:line="165" pos:column="18"/></block></else></if>
            }<pos:position pos:line="166" pos:column="14"/></block></then></if>
        }<pos:position pos:line="167" pos:column="10"/></block></then>
        <else pos:line="168" pos:column="9">else <block pos:line="168" pos:column="14">{
            <if pos:line="169" pos:column="13">if <condition pos:line="169" pos:column="16">(<expr><operator pos:line="169" pos:column="17">(<pos:position pos:line="169" pos:column="18"/></operator><name pos:line="169" pos:column="18">rv<pos:position pos:line="169" pos:column="20"/></name> <operator pos:line="169" pos:column="21">=<pos:position pos:line="169" pos:column="22"/></operator> <call><name pos:line="169" pos:column="23">SAFE_ACCEPT<pos:position pos:line="169" pos:column="34"/></name><argument_list pos:line="169" pos:column="34">(<argument><expr><call><name pos:line="169" pos:column="35">apr_proc_mutex_unlock<pos:position pos:line="169" pos:column="56"/></name><argument_list pos:line="169" pos:column="56">(<argument><expr><name pos:line="169" pos:column="57">accept_mutex<pos:position pos:line="169" pos:column="69"/></name></expr></argument>)<pos:position pos:line="169" pos:column="70"/></argument_list></call></expr></argument>)<pos:position pos:line="169" pos:column="71"/></argument_list></call><operator pos:line="169" pos:column="71">)<pos:position pos:line="169" pos:column="72"/></operator>
                <operator pos:line="170" pos:column="17">!=<pos:position pos:line="170" pos:column="19"/></operator> <name pos:line="170" pos:column="20">APR_SUCCESS<pos:position pos:line="170" pos:column="31"/></name></expr>)<pos:position pos:line="170" pos:column="32"/></condition><then pos:line="170" pos:column="32"> <block pos:line="170" pos:column="33">{
                <expr_stmt><expr><call><name pos:line="171" pos:column="17">ap_log_error<pos:position pos:line="171" pos:column="29"/></name><argument_list pos:line="171" pos:column="29">(<argument><expr><name pos:line="171" pos:column="30">APLOG_MARK<pos:position pos:line="171" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="171" pos:column="42">APLOG_EMERG<pos:position pos:line="171" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="171" pos:column="55">rv<pos:position pos:line="171" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="171" pos:column="59">ap_server_conf<pos:position pos:line="171" pos:column="73"/></name></expr></argument>,
                             <argument><expr><literal type="string" pos:line="172" pos:column="30">"apr_proc_mutex_unlock failed. Attempting to "<pos:position pos:line="172" pos:column="76"/></literal>
                             <literal type="string" pos:line="173" pos:column="30">"shutdown process gracefully."<pos:position pos:line="173" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="173" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="173" pos:column="62"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="174" pos:column="17">signal_threads<pos:position pos:line="174" pos:column="31"/></name><argument_list pos:line="174" pos:column="31">(<argument><expr><name pos:line="174" pos:column="32">ST_GRACEFUL<pos:position pos:line="174" pos:column="43"/></name></expr></argument>)<pos:position pos:line="174" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="174" pos:column="45"/></expr_stmt>
            }<pos:position pos:line="175" pos:column="14"/></block></then></if>
            <break pos:line="176" pos:column="13">break;<pos:position pos:line="176" pos:column="19"/></break>
        }<pos:position pos:line="177" pos:column="10"/></block></else></if>
    }<pos:position pos:line="178" pos:column="6"/></block></while>

    <expr_stmt><expr><call><name pos:line="180" pos:column="5">ap_queue_term<pos:position pos:line="180" pos:column="18"/></name><argument_list pos:line="180" pos:column="18">(<argument><expr><name pos:line="180" pos:column="19">worker_queue<pos:position pos:line="180" pos:column="31"/></name></expr></argument>)<pos:position pos:line="180" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="180" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><name pos:line="181" pos:column="5">dying<pos:position pos:line="181" pos:column="10"/></name> <operator pos:line="181" pos:column="11">=<pos:position pos:line="181" pos:column="12"/></operator> <literal type="number" pos:line="181" pos:column="13">1<pos:position pos:line="181" pos:column="14"/></literal></expr>;<pos:position pos:line="181" pos:column="15"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="182" pos:column="5">ap_scoreboard_image<pos:position pos:line="182" pos:column="24"/></name><operator pos:line="182" pos:column="24">-&gt;<pos:position pos:line="182" pos:column="29"/></operator><name pos:line="182" pos:column="26">parent<pos:position pos:line="182" pos:column="32"/></name><index pos:line="182" pos:column="32">[<expr><name pos:line="182" pos:column="33">process_slot<pos:position pos:line="182" pos:column="45"/></name></expr>]<pos:position pos:line="182" pos:column="46"/></index></name><operator pos:line="182" pos:column="46">.<pos:position pos:line="182" pos:column="47"/></operator><name pos:line="182" pos:column="47">quiescing<pos:position pos:line="182" pos:column="56"/></name> <operator pos:line="182" pos:column="57">=<pos:position pos:line="182" pos:column="58"/></operator> <literal type="number" pos:line="182" pos:column="59">1<pos:position pos:line="182" pos:column="60"/></literal></expr>;<pos:position pos:line="182" pos:column="61"/></expr_stmt>

    <comment type="block" pos:line="184" pos:column="5">/* wake up the main thread */</comment>
    <expr_stmt><expr><call><name pos:line="185" pos:column="5">kill<pos:position pos:line="185" pos:column="9"/></name><argument_list pos:line="185" pos:column="9">(<argument><expr><name pos:line="185" pos:column="10">ap_my_pid<pos:position pos:line="185" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="185" pos:column="21">SIGTERM<pos:position pos:line="185" pos:column="28"/></name></expr></argument>)<pos:position pos:line="185" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="185" pos:column="30"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="187" pos:column="5">apr_thread_exit<pos:position pos:line="187" pos:column="20"/></name><argument_list pos:line="187" pos:column="20">(<argument><expr><name pos:line="187" pos:column="21">thd<pos:position pos:line="187" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="187" pos:column="26">APR_SUCCESS<pos:position pos:line="187" pos:column="37"/></name></expr></argument>)<pos:position pos:line="187" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="187" pos:column="39"/></expr_stmt>
    <return pos:line="188" pos:column="5">return <expr><name pos:line="188" pos:column="12">NULL<pos:position pos:line="188" pos:column="16"/></name></expr>;<pos:position pos:line="188" pos:column="17"/></return>
}<pos:position pos:line="189" pos:column="2"/></block></function></unit>
