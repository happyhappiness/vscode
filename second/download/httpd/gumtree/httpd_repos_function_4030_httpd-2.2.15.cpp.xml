<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_4030_httpd-2.2.15.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">BOOL<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">match_xclass<pos:position pos:line="2" pos:column="13"/></name><parameter_list pos:line="2" pos:column="13">(<parameter><decl><type><name pos:line="2" pos:column="14">int<pos:position pos:line="2" pos:column="17"/></name></type> <name pos:line="2" pos:column="18">c<pos:position pos:line="2" pos:column="19"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="21">const<pos:position pos:line="2" pos:column="26"/></specifier> <name pos:line="2" pos:column="27">uschar<pos:position pos:line="2" pos:column="33"/></name> <modifier pos:line="2" pos:column="34">*<pos:position pos:line="2" pos:column="35"/></modifier></type><name pos:line="2" pos:column="35">data<pos:position pos:line="2" pos:column="39"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="40"/></parameter_list>
<block pos:line="3" pos:column="1">{
<decl_stmt><decl><type><name pos:line="4" pos:column="1">int<pos:position pos:line="4" pos:column="4"/></name></type> <name pos:line="4" pos:column="5">t<pos:position pos:line="4" pos:column="6"/></name></decl>;<pos:position pos:line="4" pos:column="7"/></decl_stmt>
<decl_stmt><decl><type><name pos:line="5" pos:column="1">BOOL<pos:position pos:line="5" pos:column="5"/></name></type> <name pos:line="5" pos:column="6">negated<pos:position pos:line="5" pos:column="13"/></name> <init pos:line="5" pos:column="14">= <expr><operator pos:line="5" pos:column="16">(<pos:position pos:line="5" pos:column="17"/></operator><operator pos:line="5" pos:column="17">*<pos:position pos:line="5" pos:column="18"/></operator><name pos:line="5" pos:column="18">data<pos:position pos:line="5" pos:column="22"/></name> <operator pos:line="5" pos:column="23">&amp;<pos:position pos:line="5" pos:column="28"/></operator> <name pos:line="5" pos:column="25">XCL_NOT<pos:position pos:line="5" pos:column="32"/></name><operator pos:line="5" pos:column="32">)<pos:position pos:line="5" pos:column="33"/></operator> <operator pos:line="5" pos:column="34">!=<pos:position pos:line="5" pos:column="36"/></operator> <literal type="number" pos:line="5" pos:column="37">0<pos:position pos:line="5" pos:column="38"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="39"/></decl_stmt>

<comment type="block" pos:line="7" pos:column="1">/* Character values &lt; 256 are matched against a bitmap, if one is present. If
not, we still carry on, because there may be ranges that start below 256 in the
additional data. */</comment>

<if pos:line="11" pos:column="1">if <condition pos:line="11" pos:column="4">(<expr><name pos:line="11" pos:column="5">c<pos:position pos:line="11" pos:column="6"/></name> <operator pos:line="11" pos:column="7">&lt;<pos:position pos:line="11" pos:column="11"/></operator> <literal type="number" pos:line="11" pos:column="9">256<pos:position pos:line="11" pos:column="12"/></literal></expr>)<pos:position pos:line="11" pos:column="13"/></condition><then pos:line="11" pos:column="13">
  <block pos:line="12" pos:column="3">{
  <if pos:line="13" pos:column="3">if <condition pos:line="13" pos:column="6">(<expr><operator pos:line="13" pos:column="7">(<pos:position pos:line="13" pos:column="8"/></operator><operator pos:line="13" pos:column="8">*<pos:position pos:line="13" pos:column="9"/></operator><name pos:line="13" pos:column="9">data<pos:position pos:line="13" pos:column="13"/></name> <operator pos:line="13" pos:column="14">&amp;<pos:position pos:line="13" pos:column="19"/></operator> <name pos:line="13" pos:column="16">XCL_MAP<pos:position pos:line="13" pos:column="23"/></name><operator pos:line="13" pos:column="23">)<pos:position pos:line="13" pos:column="24"/></operator> <operator pos:line="13" pos:column="25">!=<pos:position pos:line="13" pos:column="27"/></operator> <literal type="number" pos:line="13" pos:column="28">0<pos:position pos:line="13" pos:column="29"/></literal> <operator pos:line="13" pos:column="30">&amp;&amp;<pos:position pos:line="13" pos:column="40"/></operator> <operator pos:line="13" pos:column="33">(<pos:position pos:line="13" pos:column="34"/></operator><name><name pos:line="13" pos:column="34">data<pos:position pos:line="13" pos:column="38"/></name><index pos:line="13" pos:column="38">[<expr><literal type="number" pos:line="13" pos:column="39">1<pos:position pos:line="13" pos:column="40"/></literal> <operator pos:line="13" pos:column="41">+<pos:position pos:line="13" pos:column="42"/></operator> <name pos:line="13" pos:column="43">c<pos:position pos:line="13" pos:column="44"/></name><operator pos:line="13" pos:column="44">/<pos:position pos:line="13" pos:column="45"/></operator><literal type="number" pos:line="13" pos:column="45">8<pos:position pos:line="13" pos:column="46"/></literal></expr>]<pos:position pos:line="13" pos:column="47"/></index></name> <operator pos:line="13" pos:column="48">&amp;<pos:position pos:line="13" pos:column="53"/></operator> <operator pos:line="13" pos:column="50">(<pos:position pos:line="13" pos:column="51"/></operator><literal type="number" pos:line="13" pos:column="51">1<pos:position pos:line="13" pos:column="52"/></literal> <operator pos:line="13" pos:column="53">&lt;&lt;<pos:position pos:line="13" pos:column="61"/></operator> <operator pos:line="13" pos:column="56">(<pos:position pos:line="13" pos:column="57"/></operator><name pos:line="13" pos:column="57">c<pos:position pos:line="13" pos:column="58"/></name><operator pos:line="13" pos:column="58">&amp;<pos:position pos:line="13" pos:column="63"/></operator><literal type="number" pos:line="13" pos:column="59">7<pos:position pos:line="13" pos:column="60"/></literal><operator pos:line="13" pos:column="60">)<pos:position pos:line="13" pos:column="61"/></operator><operator pos:line="13" pos:column="61">)<pos:position pos:line="13" pos:column="62"/></operator><operator pos:line="13" pos:column="62">)<pos:position pos:line="13" pos:column="63"/></operator> <operator pos:line="13" pos:column="64">!=<pos:position pos:line="13" pos:column="66"/></operator> <literal type="number" pos:line="13" pos:column="67">0<pos:position pos:line="13" pos:column="68"/></literal></expr>)<pos:position pos:line="13" pos:column="69"/></condition><then pos:line="13" pos:column="69">
    <block type="pseudo"><return pos:line="14" pos:column="5">return <expr><operator pos:line="14" pos:column="12">!<pos:position pos:line="14" pos:column="13"/></operator><name pos:line="14" pos:column="13">negated<pos:position pos:line="14" pos:column="20"/></name></expr>;<pos:position pos:line="14" pos:column="21"/></return></block></then></if>   <comment type="block" pos:line="14" pos:column="24">/* char found */</comment>
  }<pos:position pos:line="15" pos:column="4"/></block></then></if>

<comment type="block" pos:line="17" pos:column="1">/* First skip the bit map if present. Then match against the list of Unicode
properties or large chars or ranges that end with a large char. We won't ever
encounter XCL_PROP or XCL_NOTPROP when UCP support is not compiled. */</comment>

<if pos:line="21" pos:column="1">if <condition pos:line="21" pos:column="4">(<expr><operator pos:line="21" pos:column="5">(<pos:position pos:line="21" pos:column="6"/></operator><operator pos:line="21" pos:column="6">*<pos:position pos:line="21" pos:column="7"/></operator><name pos:line="21" pos:column="7">data<pos:position pos:line="21" pos:column="11"/></name><operator pos:line="21" pos:column="11">++<pos:position pos:line="21" pos:column="13"/></operator> <operator pos:line="21" pos:column="14">&amp;<pos:position pos:line="21" pos:column="19"/></operator> <name pos:line="21" pos:column="16">XCL_MAP<pos:position pos:line="21" pos:column="23"/></name><operator pos:line="21" pos:column="23">)<pos:position pos:line="21" pos:column="24"/></operator> <operator pos:line="21" pos:column="25">!=<pos:position pos:line="21" pos:column="27"/></operator> <literal type="number" pos:line="21" pos:column="28">0<pos:position pos:line="21" pos:column="29"/></literal></expr>)<pos:position pos:line="21" pos:column="30"/></condition><then pos:line="21" pos:column="30"> <block type="pseudo"><expr_stmt><expr><name pos:line="21" pos:column="31">data<pos:position pos:line="21" pos:column="35"/></name> <operator pos:line="21" pos:column="36">+=<pos:position pos:line="21" pos:column="38"/></operator> <literal type="number" pos:line="21" pos:column="39">32<pos:position pos:line="21" pos:column="41"/></literal></expr>;<pos:position pos:line="21" pos:column="42"/></expr_stmt></block></then></if>

<while pos:line="23" pos:column="1">while <condition pos:line="23" pos:column="7">(<expr><operator pos:line="23" pos:column="8">(<pos:position pos:line="23" pos:column="9"/></operator><name pos:line="23" pos:column="9">t<pos:position pos:line="23" pos:column="10"/></name> <operator pos:line="23" pos:column="11">=<pos:position pos:line="23" pos:column="12"/></operator> <operator pos:line="23" pos:column="13">*<pos:position pos:line="23" pos:column="14"/></operator><name pos:line="23" pos:column="14">data<pos:position pos:line="23" pos:column="18"/></name><operator pos:line="23" pos:column="18">++<pos:position pos:line="23" pos:column="20"/></operator><operator pos:line="23" pos:column="20">)<pos:position pos:line="23" pos:column="21"/></operator> <operator pos:line="23" pos:column="22">!=<pos:position pos:line="23" pos:column="24"/></operator> <name pos:line="23" pos:column="25">XCL_END<pos:position pos:line="23" pos:column="32"/></name></expr>)<pos:position pos:line="23" pos:column="33"/></condition>
  <block pos:line="24" pos:column="3">{
  <decl_stmt><decl><type><name pos:line="25" pos:column="3">int<pos:position pos:line="25" pos:column="6"/></name></type> <name pos:line="25" pos:column="7">x<pos:position pos:line="25" pos:column="8"/></name></decl>, <decl><type ref="prev"/><name pos:line="25" pos:column="10">y<pos:position pos:line="25" pos:column="11"/></name></decl>;<pos:position pos:line="25" pos:column="12"/></decl_stmt>
  <if pos:line="26" pos:column="3">if <condition pos:line="26" pos:column="6">(<expr><name pos:line="26" pos:column="7">t<pos:position pos:line="26" pos:column="8"/></name> <operator pos:line="26" pos:column="9">==<pos:position pos:line="26" pos:column="11"/></operator> <name pos:line="26" pos:column="12">XCL_SINGLE<pos:position pos:line="26" pos:column="22"/></name></expr>)<pos:position pos:line="26" pos:column="23"/></condition><then pos:line="26" pos:column="23">
    <block pos:line="27" pos:column="5">{
    <expr_stmt><expr><call><name pos:line="28" pos:column="5">GETCHARINC<pos:position pos:line="28" pos:column="15"/></name><argument_list pos:line="28" pos:column="15">(<argument><expr><name pos:line="28" pos:column="16">x<pos:position pos:line="28" pos:column="17"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="19">data<pos:position pos:line="28" pos:column="23"/></name></expr></argument>)<pos:position pos:line="28" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="25"/></expr_stmt>
    <if pos:line="29" pos:column="5">if <condition pos:line="29" pos:column="8">(<expr><name pos:line="29" pos:column="9">c<pos:position pos:line="29" pos:column="10"/></name> <operator pos:line="29" pos:column="11">==<pos:position pos:line="29" pos:column="13"/></operator> <name pos:line="29" pos:column="14">x<pos:position pos:line="29" pos:column="15"/></name></expr>)<pos:position pos:line="29" pos:column="16"/></condition><then pos:line="29" pos:column="16"> <block type="pseudo"><return pos:line="29" pos:column="17">return <expr><operator pos:line="29" pos:column="24">!<pos:position pos:line="29" pos:column="25"/></operator><name pos:line="29" pos:column="25">negated<pos:position pos:line="29" pos:column="32"/></name></expr>;<pos:position pos:line="29" pos:column="33"/></return></block></then></if>
    }<pos:position pos:line="30" pos:column="6"/></block></then>
  <elseif pos:line="31" pos:column="3">else <if pos:line="31" pos:column="8">if <condition pos:line="31" pos:column="11">(<expr><name pos:line="31" pos:column="12">t<pos:position pos:line="31" pos:column="13"/></name> <operator pos:line="31" pos:column="14">==<pos:position pos:line="31" pos:column="16"/></operator> <name pos:line="31" pos:column="17">XCL_RANGE<pos:position pos:line="31" pos:column="26"/></name></expr>)<pos:position pos:line="31" pos:column="27"/></condition><then pos:line="31" pos:column="27">
    <block pos:line="32" pos:column="5">{
    <expr_stmt><expr><call><name pos:line="33" pos:column="5">GETCHARINC<pos:position pos:line="33" pos:column="15"/></name><argument_list pos:line="33" pos:column="15">(<argument><expr><name pos:line="33" pos:column="16">x<pos:position pos:line="33" pos:column="17"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="19">data<pos:position pos:line="33" pos:column="23"/></name></expr></argument>)<pos:position pos:line="33" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="34" pos:column="5">GETCHARINC<pos:position pos:line="34" pos:column="15"/></name><argument_list pos:line="34" pos:column="15">(<argument><expr><name pos:line="34" pos:column="16">y<pos:position pos:line="34" pos:column="17"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="19">data<pos:position pos:line="34" pos:column="23"/></name></expr></argument>)<pos:position pos:line="34" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="25"/></expr_stmt>
    <if pos:line="35" pos:column="5">if <condition pos:line="35" pos:column="8">(<expr><name pos:line="35" pos:column="9">c<pos:position pos:line="35" pos:column="10"/></name> <operator pos:line="35" pos:column="11">&gt;=<pos:position pos:line="35" pos:column="16"/></operator> <name pos:line="35" pos:column="14">x<pos:position pos:line="35" pos:column="15"/></name> <operator pos:line="35" pos:column="16">&amp;&amp;<pos:position pos:line="35" pos:column="26"/></operator> <name pos:line="35" pos:column="19">c<pos:position pos:line="35" pos:column="20"/></name> <operator pos:line="35" pos:column="21">&lt;=<pos:position pos:line="35" pos:column="26"/></operator> <name pos:line="35" pos:column="24">y<pos:position pos:line="35" pos:column="25"/></name></expr>)<pos:position pos:line="35" pos:column="26"/></condition><then pos:line="35" pos:column="26"> <block type="pseudo"><return pos:line="35" pos:column="27">return <expr><operator pos:line="35" pos:column="34">!<pos:position pos:line="35" pos:column="35"/></operator><name pos:line="35" pos:column="35">negated<pos:position pos:line="35" pos:column="42"/></name></expr>;<pos:position pos:line="35" pos:column="43"/></return></block></then></if>
    }<pos:position pos:line="36" pos:column="6"/></block></then></if></elseif>

<cpp:ifdef pos:line="38" pos:column="1">#<cpp:directive pos:line="38" pos:column="2">ifdef<pos:position pos:line="38" pos:column="7"/></cpp:directive> <name pos:line="38" pos:column="8">SUPPORT_UCP<pos:position pos:line="38" pos:column="19"/></name></cpp:ifdef>
  <else pos:line="39" pos:column="3">else  <comment type="block" pos:line="39" pos:column="9">/* XCL_PROP &amp; XCL_NOTPROP */</comment>
    <block pos:line="40" pos:column="5">{
    <decl_stmt><decl><type><name pos:line="41" pos:column="5">int<pos:position pos:line="41" pos:column="8"/></name></type> <name pos:line="41" pos:column="9">chartype<pos:position pos:line="41" pos:column="17"/></name></decl>, <decl><type ref="prev"/><name pos:line="41" pos:column="19">othercase<pos:position pos:line="41" pos:column="28"/></name></decl>;<pos:position pos:line="41" pos:column="29"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="42" pos:column="5">int<pos:position pos:line="42" pos:column="8"/></name></type> <name pos:line="42" pos:column="9">rqdtype<pos:position pos:line="42" pos:column="16"/></name> <init pos:line="42" pos:column="17">= <expr><operator pos:line="42" pos:column="19">*<pos:position pos:line="42" pos:column="20"/></operator><name pos:line="42" pos:column="20">data<pos:position pos:line="42" pos:column="24"/></name><operator pos:line="42" pos:column="24">++<pos:position pos:line="42" pos:column="26"/></operator></expr></init></decl>;<pos:position pos:line="42" pos:column="27"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="43" pos:column="5">int<pos:position pos:line="43" pos:column="8"/></name></type> <name pos:line="43" pos:column="9">category<pos:position pos:line="43" pos:column="17"/></name> <init pos:line="43" pos:column="18">= <expr><call><name pos:line="43" pos:column="20">ucp_findchar<pos:position pos:line="43" pos:column="32"/></name><argument_list pos:line="43" pos:column="32">(<argument><expr><name pos:line="43" pos:column="33">c<pos:position pos:line="43" pos:column="34"/></name></expr></argument>, <argument><expr><operator pos:line="43" pos:column="36">&amp;<pos:position pos:line="43" pos:column="41"/></operator><name pos:line="43" pos:column="37">chartype<pos:position pos:line="43" pos:column="45"/></name></expr></argument>, <argument><expr><operator pos:line="43" pos:column="47">&amp;<pos:position pos:line="43" pos:column="52"/></operator><name pos:line="43" pos:column="48">othercase<pos:position pos:line="43" pos:column="57"/></name></expr></argument>)<pos:position pos:line="43" pos:column="58"/></argument_list></call></expr></init></decl>;<pos:position pos:line="43" pos:column="59"/></decl_stmt>
    <if pos:line="44" pos:column="5">if <condition pos:line="44" pos:column="8">(<expr><name pos:line="44" pos:column="9">rqdtype<pos:position pos:line="44" pos:column="16"/></name> <operator pos:line="44" pos:column="17">&gt;=<pos:position pos:line="44" pos:column="22"/></operator> <literal type="number" pos:line="44" pos:column="20">128<pos:position pos:line="44" pos:column="23"/></literal></expr>)<pos:position pos:line="44" pos:column="24"/></condition><then pos:line="44" pos:column="24">
      <block pos:line="45" pos:column="7">{
      <if pos:line="46" pos:column="7">if <condition pos:line="46" pos:column="10">(<expr><operator pos:line="46" pos:column="11">(<pos:position pos:line="46" pos:column="12"/></operator><name pos:line="46" pos:column="12">rqdtype<pos:position pos:line="46" pos:column="19"/></name> <operator pos:line="46" pos:column="20">-<pos:position pos:line="46" pos:column="21"/></operator> <literal type="number" pos:line="46" pos:column="22">128<pos:position pos:line="46" pos:column="25"/></literal> <operator pos:line="46" pos:column="26">==<pos:position pos:line="46" pos:column="28"/></operator> <name pos:line="46" pos:column="29">category<pos:position pos:line="46" pos:column="37"/></name><operator pos:line="46" pos:column="37">)<pos:position pos:line="46" pos:column="38"/></operator> <operator pos:line="46" pos:column="39">==<pos:position pos:line="46" pos:column="41"/></operator> <operator pos:line="46" pos:column="42">(<pos:position pos:line="46" pos:column="43"/></operator><name pos:line="46" pos:column="43">t<pos:position pos:line="46" pos:column="44"/></name> <operator pos:line="46" pos:column="45">==<pos:position pos:line="46" pos:column="47"/></operator> <name pos:line="46" pos:column="48">XCL_PROP<pos:position pos:line="46" pos:column="56"/></name><operator pos:line="46" pos:column="56">)<pos:position pos:line="46" pos:column="57"/></operator></expr>)<pos:position pos:line="46" pos:column="58"/></condition><then pos:line="46" pos:column="58"> <block type="pseudo"><return pos:line="46" pos:column="59">return <expr><operator pos:line="46" pos:column="66">!<pos:position pos:line="46" pos:column="67"/></operator><name pos:line="46" pos:column="67">negated<pos:position pos:line="46" pos:column="74"/></name></expr>;<pos:position pos:line="46" pos:column="75"/></return></block></then></if>
      }<pos:position pos:line="47" pos:column="8"/></block></then>
    <else pos:line="48" pos:column="5">else
      <block pos:line="49" pos:column="7">{
      <if pos:line="50" pos:column="7">if <condition pos:line="50" pos:column="10">(<expr><operator pos:line="50" pos:column="11">(<pos:position pos:line="50" pos:column="12"/></operator><name pos:line="50" pos:column="12">rqdtype<pos:position pos:line="50" pos:column="19"/></name> <operator pos:line="50" pos:column="20">==<pos:position pos:line="50" pos:column="22"/></operator> <name pos:line="50" pos:column="23">chartype<pos:position pos:line="50" pos:column="31"/></name><operator pos:line="50" pos:column="31">)<pos:position pos:line="50" pos:column="32"/></operator> <operator pos:line="50" pos:column="33">==<pos:position pos:line="50" pos:column="35"/></operator> <operator pos:line="50" pos:column="36">(<pos:position pos:line="50" pos:column="37"/></operator><name pos:line="50" pos:column="37">t<pos:position pos:line="50" pos:column="38"/></name> <operator pos:line="50" pos:column="39">==<pos:position pos:line="50" pos:column="41"/></operator> <name pos:line="50" pos:column="42">XCL_PROP<pos:position pos:line="50" pos:column="50"/></name><operator pos:line="50" pos:column="50">)<pos:position pos:line="50" pos:column="51"/></operator></expr>)<pos:position pos:line="50" pos:column="52"/></condition><then pos:line="50" pos:column="52"> <block type="pseudo"><return pos:line="50" pos:column="53">return <expr><operator pos:line="50" pos:column="60">!<pos:position pos:line="50" pos:column="61"/></operator><name pos:line="50" pos:column="61">negated<pos:position pos:line="50" pos:column="68"/></name></expr>;<pos:position pos:line="50" pos:column="69"/></return></block></then></if>
      }<pos:position pos:line="51" pos:column="8"/></block></else></if>
    }<pos:position pos:line="52" pos:column="6"/></block></else></if>
<cpp:endif pos:line="53" pos:column="1">#<cpp:directive pos:line="53" pos:column="2">endif<pos:position pos:line="53" pos:column="7"/></cpp:directive></cpp:endif>  <comment type="block" pos:line="53" pos:column="9">/* SUPPORT_UCP */</comment>
  }<pos:position pos:line="54" pos:column="4"/></block></while>

<return pos:line="56" pos:column="1">return <expr><name pos:line="56" pos:column="8">negated<pos:position pos:line="56" pos:column="15"/></name></expr>;<pos:position pos:line="56" pos:column="16"/></return>   <comment type="block" pos:line="56" pos:column="19">/* char did not match */</comment>
}<pos:position pos:line="57" pos:column="2"/></block></function></unit>
