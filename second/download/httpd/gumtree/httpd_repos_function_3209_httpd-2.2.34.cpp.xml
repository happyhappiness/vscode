<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_3209_httpd-2.2.34.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name><name pos:line="1" pos:column="8">enum<pos:position pos:line="1" pos:column="12"/></name> <name pos:line="1" pos:column="13">XML_Error<pos:position pos:line="1" pos:column="22"/></name></name></type>
<name pos:line="2" pos:column="1">doCdataSection<pos:position pos:line="2" pos:column="15"/></name><parameter_list pos:line="2" pos:column="15">(<parameter><decl><type><name pos:line="2" pos:column="16">XML_Parser<pos:position pos:line="2" pos:column="26"/></name></type> <name pos:line="2" pos:column="27">parser<pos:position pos:line="2" pos:column="33"/></name></decl></parameter>,
               <parameter><decl><type><specifier pos:line="3" pos:column="16">const<pos:position pos:line="3" pos:column="21"/></specifier> <name pos:line="3" pos:column="22">ENCODING<pos:position pos:line="3" pos:column="30"/></name> <modifier pos:line="3" pos:column="31">*<pos:position pos:line="3" pos:column="32"/></modifier></type><name pos:line="3" pos:column="32">enc<pos:position pos:line="3" pos:column="35"/></name></decl></parameter>,
               <parameter><decl><type><specifier pos:line="4" pos:column="16">const<pos:position pos:line="4" pos:column="21"/></specifier> <name pos:line="4" pos:column="22">char<pos:position pos:line="4" pos:column="26"/></name> <modifier pos:line="4" pos:column="27">*<pos:position pos:line="4" pos:column="28"/></modifier><modifier pos:line="4" pos:column="28">*<pos:position pos:line="4" pos:column="29"/></modifier></type><name pos:line="4" pos:column="29">startPtr<pos:position pos:line="4" pos:column="37"/></name></decl></parameter>,
               <parameter><decl><type><specifier pos:line="5" pos:column="16">const<pos:position pos:line="5" pos:column="21"/></specifier> <name pos:line="5" pos:column="22">char<pos:position pos:line="5" pos:column="26"/></name> <modifier pos:line="5" pos:column="27">*<pos:position pos:line="5" pos:column="28"/></modifier></type><name pos:line="5" pos:column="28">end<pos:position pos:line="5" pos:column="31"/></name></decl></parameter>,
               <parameter><decl><type><specifier pos:line="6" pos:column="16">const<pos:position pos:line="6" pos:column="21"/></specifier> <name pos:line="6" pos:column="22">char<pos:position pos:line="6" pos:column="26"/></name> <modifier pos:line="6" pos:column="27">*<pos:position pos:line="6" pos:column="28"/></modifier><modifier pos:line="6" pos:column="28">*<pos:position pos:line="6" pos:column="29"/></modifier></type><name pos:line="6" pos:column="29">nextPtr<pos:position pos:line="6" pos:column="36"/></name></decl></parameter>)<pos:position pos:line="6" pos:column="37"/></parameter_list>
<block pos:line="7" pos:column="1">{
  <decl_stmt><decl><type><specifier pos:line="8" pos:column="3">const<pos:position pos:line="8" pos:column="8"/></specifier> <name pos:line="8" pos:column="9">char<pos:position pos:line="8" pos:column="13"/></name> <modifier pos:line="8" pos:column="14">*<pos:position pos:line="8" pos:column="15"/></modifier></type><name pos:line="8" pos:column="15">s<pos:position pos:line="8" pos:column="16"/></name> <init pos:line="8" pos:column="17">= <expr><operator pos:line="8" pos:column="19">*<pos:position pos:line="8" pos:column="20"/></operator><name pos:line="8" pos:column="20">startPtr<pos:position pos:line="8" pos:column="28"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="29"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="9" pos:column="3">const<pos:position pos:line="9" pos:column="8"/></specifier> <name pos:line="9" pos:column="9">char<pos:position pos:line="9" pos:column="13"/></name> <modifier pos:line="9" pos:column="14">*<pos:position pos:line="9" pos:column="15"/></modifier><modifier pos:line="9" pos:column="15">*<pos:position pos:line="9" pos:column="16"/></modifier></type><name pos:line="9" pos:column="16">eventPP<pos:position pos:line="9" pos:column="23"/></name></decl>;<pos:position pos:line="9" pos:column="24"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="10" pos:column="3">const<pos:position pos:line="10" pos:column="8"/></specifier> <name pos:line="10" pos:column="9">char<pos:position pos:line="10" pos:column="13"/></name> <modifier pos:line="10" pos:column="14">*<pos:position pos:line="10" pos:column="15"/></modifier><modifier pos:line="10" pos:column="15">*<pos:position pos:line="10" pos:column="16"/></modifier></type><name pos:line="10" pos:column="16">eventEndPP<pos:position pos:line="10" pos:column="26"/></name></decl>;<pos:position pos:line="10" pos:column="27"/></decl_stmt>
  <if pos:line="11" pos:column="3">if <condition pos:line="11" pos:column="6">(<expr><name pos:line="11" pos:column="7">enc<pos:position pos:line="11" pos:column="10"/></name> <operator pos:line="11" pos:column="11">==<pos:position pos:line="11" pos:column="13"/></operator> <name pos:line="11" pos:column="14">encoding<pos:position pos:line="11" pos:column="22"/></name></expr>)<pos:position pos:line="11" pos:column="23"/></condition><then pos:line="11" pos:column="23"> <block pos:line="11" pos:column="24">{
    <expr_stmt><expr><name pos:line="12" pos:column="5">eventPP<pos:position pos:line="12" pos:column="12"/></name> <operator pos:line="12" pos:column="13">=<pos:position pos:line="12" pos:column="14"/></operator> <operator pos:line="12" pos:column="15">&amp;<pos:position pos:line="12" pos:column="20"/></operator><name pos:line="12" pos:column="16">eventPtr<pos:position pos:line="12" pos:column="24"/></name></expr>;<pos:position pos:line="12" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="13" pos:column="5">*<pos:position pos:line="13" pos:column="6"/></operator><name pos:line="13" pos:column="6">eventPP<pos:position pos:line="13" pos:column="13"/></name> <operator pos:line="13" pos:column="14">=<pos:position pos:line="13" pos:column="15"/></operator> <name pos:line="13" pos:column="16">s<pos:position pos:line="13" pos:column="17"/></name></expr>;<pos:position pos:line="13" pos:column="18"/></expr_stmt>
    <expr_stmt><expr><name pos:line="14" pos:column="5">eventEndPP<pos:position pos:line="14" pos:column="15"/></name> <operator pos:line="14" pos:column="16">=<pos:position pos:line="14" pos:column="17"/></operator> <operator pos:line="14" pos:column="18">&amp;<pos:position pos:line="14" pos:column="23"/></operator><name pos:line="14" pos:column="19">eventEndPtr<pos:position pos:line="14" pos:column="30"/></name></expr>;<pos:position pos:line="14" pos:column="31"/></expr_stmt>
  }<pos:position pos:line="15" pos:column="4"/></block></then>
  <else pos:line="16" pos:column="3">else <block pos:line="16" pos:column="8">{
    <expr_stmt><expr><name pos:line="17" pos:column="5">eventPP<pos:position pos:line="17" pos:column="12"/></name> <operator pos:line="17" pos:column="13">=<pos:position pos:line="17" pos:column="14"/></operator> <operator pos:line="17" pos:column="15">&amp;<pos:position pos:line="17" pos:column="20"/></operator><operator pos:line="17" pos:column="16">(<pos:position pos:line="17" pos:column="17"/></operator><name><name pos:line="17" pos:column="17">openInternalEntities<pos:position pos:line="17" pos:column="37"/></name><operator pos:line="17" pos:column="37">-&gt;<pos:position pos:line="17" pos:column="42"/></operator><name pos:line="17" pos:column="39">internalEventPtr<pos:position pos:line="17" pos:column="55"/></name></name><operator pos:line="17" pos:column="55">)<pos:position pos:line="17" pos:column="56"/></operator></expr>;<pos:position pos:line="17" pos:column="57"/></expr_stmt>
    <expr_stmt><expr><name pos:line="18" pos:column="5">eventEndPP<pos:position pos:line="18" pos:column="15"/></name> <operator pos:line="18" pos:column="16">=<pos:position pos:line="18" pos:column="17"/></operator> <operator pos:line="18" pos:column="18">&amp;<pos:position pos:line="18" pos:column="23"/></operator><operator pos:line="18" pos:column="19">(<pos:position pos:line="18" pos:column="20"/></operator><name><name pos:line="18" pos:column="20">openInternalEntities<pos:position pos:line="18" pos:column="40"/></name><operator pos:line="18" pos:column="40">-&gt;<pos:position pos:line="18" pos:column="45"/></operator><name pos:line="18" pos:column="42">internalEventEndPtr<pos:position pos:line="18" pos:column="61"/></name></name><operator pos:line="18" pos:column="61">)<pos:position pos:line="18" pos:column="62"/></operator></expr>;<pos:position pos:line="18" pos:column="63"/></expr_stmt>
  }<pos:position pos:line="19" pos:column="4"/></block></else></if>
  <expr_stmt><expr><operator pos:line="20" pos:column="3">*<pos:position pos:line="20" pos:column="4"/></operator><name pos:line="20" pos:column="4">eventPP<pos:position pos:line="20" pos:column="11"/></name> <operator pos:line="20" pos:column="12">=<pos:position pos:line="20" pos:column="13"/></operator> <name pos:line="20" pos:column="14">s<pos:position pos:line="20" pos:column="15"/></name></expr>;<pos:position pos:line="20" pos:column="16"/></expr_stmt>
  <expr_stmt><expr><operator pos:line="21" pos:column="3">*<pos:position pos:line="21" pos:column="4"/></operator><name pos:line="21" pos:column="4">startPtr<pos:position pos:line="21" pos:column="12"/></name> <operator pos:line="21" pos:column="13">=<pos:position pos:line="21" pos:column="14"/></operator> <name pos:line="21" pos:column="15">NULL<pos:position pos:line="21" pos:column="19"/></name></expr>;<pos:position pos:line="21" pos:column="20"/></expr_stmt>
  <for pos:line="22" pos:column="3">for <control pos:line="22" pos:column="7">(<init pos:line="22" pos:column="8">;<pos:position pos:line="22" pos:column="9"/></init><condition pos:line="22" pos:column="9">;<pos:position pos:line="22" pos:column="10"/></condition><incr/>)<pos:position pos:line="22" pos:column="11"/></control> <block pos:line="22" pos:column="12">{
    <decl_stmt><decl><type><specifier pos:line="23" pos:column="5">const<pos:position pos:line="23" pos:column="10"/></specifier> <name pos:line="23" pos:column="11">char<pos:position pos:line="23" pos:column="15"/></name> <modifier pos:line="23" pos:column="16">*<pos:position pos:line="23" pos:column="17"/></modifier></type><name pos:line="23" pos:column="17">next<pos:position pos:line="23" pos:column="21"/></name></decl>;<pos:position pos:line="23" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="24" pos:column="5">int<pos:position pos:line="24" pos:column="8"/></name></type> <name pos:line="24" pos:column="9">tok<pos:position pos:line="24" pos:column="12"/></name> <init pos:line="24" pos:column="13">= <expr><call><name pos:line="24" pos:column="15">XmlCdataSectionTok<pos:position pos:line="24" pos:column="33"/></name><argument_list pos:line="24" pos:column="33">(<argument><expr><name pos:line="24" pos:column="34">enc<pos:position pos:line="24" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="39">s<pos:position pos:line="24" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="42">end<pos:position pos:line="24" pos:column="45"/></name></expr></argument>, <argument><expr><operator pos:line="24" pos:column="47">&amp;<pos:position pos:line="24" pos:column="52"/></operator><name pos:line="24" pos:column="48">next<pos:position pos:line="24" pos:column="52"/></name></expr></argument>)<pos:position pos:line="24" pos:column="53"/></argument_list></call></expr></init></decl>;<pos:position pos:line="24" pos:column="54"/></decl_stmt>
    <expr_stmt><expr><operator pos:line="25" pos:column="5">*<pos:position pos:line="25" pos:column="6"/></operator><name pos:line="25" pos:column="6">eventEndPP<pos:position pos:line="25" pos:column="16"/></name> <operator pos:line="25" pos:column="17">=<pos:position pos:line="25" pos:column="18"/></operator> <name pos:line="25" pos:column="19">next<pos:position pos:line="25" pos:column="23"/></name></expr>;<pos:position pos:line="25" pos:column="24"/></expr_stmt>
    <switch pos:line="26" pos:column="5">switch <condition pos:line="26" pos:column="12">(<expr><name pos:line="26" pos:column="13">tok<pos:position pos:line="26" pos:column="16"/></name></expr>)<pos:position pos:line="26" pos:column="17"/></condition> <block pos:line="26" pos:column="18">{
    <case pos:line="27" pos:column="5">case <expr><name pos:line="27" pos:column="10">XML_TOK_CDATA_SECT_CLOSE<pos:position pos:line="27" pos:column="34"/></name></expr>:<pos:position pos:line="27" pos:column="35"/></case>
      <if pos:line="28" pos:column="7">if <condition pos:line="28" pos:column="10">(<expr><name pos:line="28" pos:column="11">endCdataSectionHandler<pos:position pos:line="28" pos:column="33"/></name></expr>)<pos:position pos:line="28" pos:column="34"/></condition><then pos:line="28" pos:column="34">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="29" pos:column="9">endCdataSectionHandler<pos:position pos:line="29" pos:column="31"/></name><argument_list pos:line="29" pos:column="31">(<argument><expr><name pos:line="29" pos:column="32">handlerArg<pos:position pos:line="29" pos:column="42"/></name></expr></argument>)<pos:position pos:line="29" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="44"/></expr_stmt></block></then>
<cpp:if pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">if<pos:position pos:line="30" pos:column="4"/></cpp:directive> <expr><literal type="number" pos:line="30" pos:column="5">0<pos:position pos:line="30" pos:column="6"/></literal></expr></cpp:if>
      <comment type="block" pos:line="31" pos:column="7">/* see comment under XML_TOK_CDATA_SECT_OPEN */</comment>
      else if (characterDataHandler)
        characterDataHandler(handlerArg, dataBuf, 0);
<cpp:endif pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">endif<pos:position pos:line="34" pos:column="7"/></cpp:directive></cpp:endif>
      <elseif pos:line="35" pos:column="7">else <if pos:line="35" pos:column="12">if <condition pos:line="35" pos:column="15">(<expr><name pos:line="35" pos:column="16">defaultHandler<pos:position pos:line="35" pos:column="30"/></name></expr>)<pos:position pos:line="35" pos:column="31"/></condition><then pos:line="35" pos:column="31">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="36" pos:column="9">reportDefault<pos:position pos:line="36" pos:column="22"/></name><argument_list pos:line="36" pos:column="22">(<argument><expr><name pos:line="36" pos:column="23">parser<pos:position pos:line="36" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="31">enc<pos:position pos:line="36" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="36">s<pos:position pos:line="36" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="39">next<pos:position pos:line="36" pos:column="43"/></name></expr></argument>)<pos:position pos:line="36" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="45"/></expr_stmt></block></then></if></elseif></if>
      <expr_stmt><expr><operator pos:line="37" pos:column="7">*<pos:position pos:line="37" pos:column="8"/></operator><name pos:line="37" pos:column="8">startPtr<pos:position pos:line="37" pos:column="16"/></name> <operator pos:line="37" pos:column="17">=<pos:position pos:line="37" pos:column="18"/></operator> <name pos:line="37" pos:column="19">next<pos:position pos:line="37" pos:column="23"/></name></expr>;<pos:position pos:line="37" pos:column="24"/></expr_stmt>
      <return pos:line="38" pos:column="7">return <expr><name pos:line="38" pos:column="14">XML_ERROR_NONE<pos:position pos:line="38" pos:column="28"/></name></expr>;<pos:position pos:line="38" pos:column="29"/></return>
    <case pos:line="39" pos:column="5">case <expr><name pos:line="39" pos:column="10">XML_TOK_DATA_NEWLINE<pos:position pos:line="39" pos:column="30"/></name></expr>:<pos:position pos:line="39" pos:column="31"/></case>
      <if pos:line="40" pos:column="7">if <condition pos:line="40" pos:column="10">(<expr><name pos:line="40" pos:column="11">characterDataHandler<pos:position pos:line="40" pos:column="31"/></name></expr>)<pos:position pos:line="40" pos:column="32"/></condition><then pos:line="40" pos:column="32"> <block pos:line="40" pos:column="33">{
        <decl_stmt><decl><type><name pos:line="41" pos:column="9">XML_Char<pos:position pos:line="41" pos:column="17"/></name></type> <name pos:line="41" pos:column="18">c<pos:position pos:line="41" pos:column="19"/></name> <init pos:line="41" pos:column="20">= <expr><literal type="number" pos:line="41" pos:column="22">0xA<pos:position pos:line="41" pos:column="25"/></literal></expr></init></decl>;<pos:position pos:line="41" pos:column="26"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="42" pos:column="9">characterDataHandler<pos:position pos:line="42" pos:column="29"/></name><argument_list pos:line="42" pos:column="29">(<argument><expr><name pos:line="42" pos:column="30">handlerArg<pos:position pos:line="42" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="42" pos:column="42">&amp;<pos:position pos:line="42" pos:column="47"/></operator><name pos:line="42" pos:column="43">c<pos:position pos:line="42" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="42" pos:column="46">1<pos:position pos:line="42" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="42" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="49"/></expr_stmt>
      }<pos:position pos:line="43" pos:column="8"/></block></then>
      <elseif pos:line="44" pos:column="7">else <if pos:line="44" pos:column="12">if <condition pos:line="44" pos:column="15">(<expr><name pos:line="44" pos:column="16">defaultHandler<pos:position pos:line="44" pos:column="30"/></name></expr>)<pos:position pos:line="44" pos:column="31"/></condition><then pos:line="44" pos:column="31">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="45" pos:column="9">reportDefault<pos:position pos:line="45" pos:column="22"/></name><argument_list pos:line="45" pos:column="22">(<argument><expr><name pos:line="45" pos:column="23">parser<pos:position pos:line="45" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="31">enc<pos:position pos:line="45" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="36">s<pos:position pos:line="45" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="39">next<pos:position pos:line="45" pos:column="43"/></name></expr></argument>)<pos:position pos:line="45" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="45"/></expr_stmt></block></then></if></elseif></if>
      <break pos:line="46" pos:column="7">break;<pos:position pos:line="46" pos:column="13"/></break>
    <case pos:line="47" pos:column="5">case <expr><name pos:line="47" pos:column="10">XML_TOK_DATA_CHARS<pos:position pos:line="47" pos:column="28"/></name></expr>:<pos:position pos:line="47" pos:column="29"/></case>
      <if pos:line="48" pos:column="7">if <condition pos:line="48" pos:column="10">(<expr><name pos:line="48" pos:column="11">characterDataHandler<pos:position pos:line="48" pos:column="31"/></name></expr>)<pos:position pos:line="48" pos:column="32"/></condition><then pos:line="48" pos:column="32"> <block pos:line="48" pos:column="33">{
        <if pos:line="49" pos:column="9">if <condition pos:line="49" pos:column="12">(<expr><call><name pos:line="49" pos:column="13">MUST_CONVERT<pos:position pos:line="49" pos:column="25"/></name><argument_list pos:line="49" pos:column="25">(<argument><expr><name pos:line="49" pos:column="26">enc<pos:position pos:line="49" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="31">s<pos:position pos:line="49" pos:column="32"/></name></expr></argument>)<pos:position pos:line="49" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="49" pos:column="34"/></condition><then pos:line="49" pos:column="34"> <block pos:line="49" pos:column="35">{
          <for pos:line="50" pos:column="11">for <control pos:line="50" pos:column="15">(<init pos:line="50" pos:column="16">;<pos:position pos:line="50" pos:column="17"/></init><condition pos:line="50" pos:column="17">;<pos:position pos:line="50" pos:column="18"/></condition><incr/>)<pos:position pos:line="50" pos:column="19"/></control> <block pos:line="50" pos:column="20">{
            <decl_stmt><decl><type><name pos:line="51" pos:column="13">ICHAR<pos:position pos:line="51" pos:column="18"/></name> <modifier pos:line="51" pos:column="19">*<pos:position pos:line="51" pos:column="20"/></modifier></type><name pos:line="51" pos:column="20">dataPtr<pos:position pos:line="51" pos:column="27"/></name> <init pos:line="51" pos:column="28">= <expr><operator pos:line="51" pos:column="30">(<pos:position pos:line="51" pos:column="31"/></operator><name pos:line="51" pos:column="31">ICHAR<pos:position pos:line="51" pos:column="36"/></name> <operator pos:line="51" pos:column="37">*<pos:position pos:line="51" pos:column="38"/></operator><operator pos:line="51" pos:column="38">)<pos:position pos:line="51" pos:column="39"/></operator><name pos:line="51" pos:column="39">dataBuf<pos:position pos:line="51" pos:column="46"/></name></expr></init></decl>;<pos:position pos:line="51" pos:column="47"/></decl_stmt>
            <expr_stmt><expr><call><name pos:line="52" pos:column="13">XmlConvert<pos:position pos:line="52" pos:column="23"/></name><argument_list pos:line="52" pos:column="23">(<argument><expr><name pos:line="52" pos:column="24">enc<pos:position pos:line="52" pos:column="27"/></name></expr></argument>, <argument><expr><operator pos:line="52" pos:column="29">&amp;<pos:position pos:line="52" pos:column="34"/></operator><name pos:line="52" pos:column="30">s<pos:position pos:line="52" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="33">next<pos:position pos:line="52" pos:column="37"/></name></expr></argument>, <argument><expr><operator pos:line="52" pos:column="39">&amp;<pos:position pos:line="52" pos:column="44"/></operator><name pos:line="52" pos:column="40">dataPtr<pos:position pos:line="52" pos:column="47"/></name></expr></argument>, <argument><expr><operator pos:line="52" pos:column="49">(<pos:position pos:line="52" pos:column="50"/></operator><name pos:line="52" pos:column="50">ICHAR<pos:position pos:line="52" pos:column="55"/></name> <operator pos:line="52" pos:column="56">*<pos:position pos:line="52" pos:column="57"/></operator><operator pos:line="52" pos:column="57">)<pos:position pos:line="52" pos:column="58"/></operator><name pos:line="52" pos:column="58">dataBufEnd<pos:position pos:line="52" pos:column="68"/></name></expr></argument>)<pos:position pos:line="52" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="70"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="53" pos:column="13">*<pos:position pos:line="53" pos:column="14"/></operator><name pos:line="53" pos:column="14">eventEndPP<pos:position pos:line="53" pos:column="24"/></name> <operator pos:line="53" pos:column="25">=<pos:position pos:line="53" pos:column="26"/></operator> <name pos:line="53" pos:column="27">next<pos:position pos:line="53" pos:column="31"/></name></expr>;<pos:position pos:line="53" pos:column="32"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="54" pos:column="13">characterDataHandler<pos:position pos:line="54" pos:column="33"/></name><argument_list pos:line="54" pos:column="33">(<argument><expr><name pos:line="54" pos:column="34">handlerArg<pos:position pos:line="54" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="46">dataBuf<pos:position pos:line="54" pos:column="53"/></name></expr></argument>,
                                 <argument><expr><name pos:line="55" pos:column="34">dataPtr<pos:position pos:line="55" pos:column="41"/></name> <operator pos:line="55" pos:column="42">-<pos:position pos:line="55" pos:column="43"/></operator> <operator pos:line="55" pos:column="44">(<pos:position pos:line="55" pos:column="45"/></operator><name pos:line="55" pos:column="45">ICHAR<pos:position pos:line="55" pos:column="50"/></name> <operator pos:line="55" pos:column="51">*<pos:position pos:line="55" pos:column="52"/></operator><operator pos:line="55" pos:column="52">)<pos:position pos:line="55" pos:column="53"/></operator><name pos:line="55" pos:column="53">dataBuf<pos:position pos:line="55" pos:column="60"/></name></expr></argument>)<pos:position pos:line="55" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="62"/></expr_stmt>
            <if pos:line="56" pos:column="13">if <condition pos:line="56" pos:column="16">(<expr><name pos:line="56" pos:column="17">s<pos:position pos:line="56" pos:column="18"/></name> <operator pos:line="56" pos:column="19">==<pos:position pos:line="56" pos:column="21"/></operator> <name pos:line="56" pos:column="22">next<pos:position pos:line="56" pos:column="26"/></name></expr>)<pos:position pos:line="56" pos:column="27"/></condition><then pos:line="56" pos:column="27">
              <block type="pseudo"><break pos:line="57" pos:column="15">break;<pos:position pos:line="57" pos:column="21"/></break></block></then></if>
            <expr_stmt><expr><operator pos:line="58" pos:column="13">*<pos:position pos:line="58" pos:column="14"/></operator><name pos:line="58" pos:column="14">eventPP<pos:position pos:line="58" pos:column="21"/></name> <operator pos:line="58" pos:column="22">=<pos:position pos:line="58" pos:column="23"/></operator> <name pos:line="58" pos:column="24">s<pos:position pos:line="58" pos:column="25"/></name></expr>;<pos:position pos:line="58" pos:column="26"/></expr_stmt>
          }<pos:position pos:line="59" pos:column="12"/></block></for>
        }<pos:position pos:line="60" pos:column="10"/></block></then>
        <else pos:line="61" pos:column="9">else
          <block type="pseudo"><expr_stmt><expr><call><name pos:line="62" pos:column="11">characterDataHandler<pos:position pos:line="62" pos:column="31"/></name><argument_list pos:line="62" pos:column="31">(<argument><expr><name pos:line="62" pos:column="32">handlerArg<pos:position pos:line="62" pos:column="42"/></name></expr></argument>,
                               <argument><expr><operator pos:line="63" pos:column="32">(<pos:position pos:line="63" pos:column="33"/></operator><name pos:line="63" pos:column="33">XML_Char<pos:position pos:line="63" pos:column="41"/></name> <operator pos:line="63" pos:column="42">*<pos:position pos:line="63" pos:column="43"/></operator><operator pos:line="63" pos:column="43">)<pos:position pos:line="63" pos:column="44"/></operator><name pos:line="63" pos:column="44">s<pos:position pos:line="63" pos:column="45"/></name></expr></argument>,
                               <argument><expr><operator pos:line="64" pos:column="32">(<pos:position pos:line="64" pos:column="33"/></operator><name pos:line="64" pos:column="33">XML_Char<pos:position pos:line="64" pos:column="41"/></name> <operator pos:line="64" pos:column="42">*<pos:position pos:line="64" pos:column="43"/></operator><operator pos:line="64" pos:column="43">)<pos:position pos:line="64" pos:column="44"/></operator><name pos:line="64" pos:column="44">next<pos:position pos:line="64" pos:column="48"/></name> <operator pos:line="64" pos:column="49">-<pos:position pos:line="64" pos:column="50"/></operator> <operator pos:line="64" pos:column="51">(<pos:position pos:line="64" pos:column="52"/></operator><name pos:line="64" pos:column="52">XML_Char<pos:position pos:line="64" pos:column="60"/></name> <operator pos:line="64" pos:column="61">*<pos:position pos:line="64" pos:column="62"/></operator><operator pos:line="64" pos:column="62">)<pos:position pos:line="64" pos:column="63"/></operator><name pos:line="64" pos:column="63">s<pos:position pos:line="64" pos:column="64"/></name></expr></argument>)<pos:position pos:line="64" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="66"/></expr_stmt></block></else></if>
      }<pos:position pos:line="65" pos:column="8"/></block></then>
      <elseif pos:line="66" pos:column="7">else <if pos:line="66" pos:column="12">if <condition pos:line="66" pos:column="15">(<expr><name pos:line="66" pos:column="16">defaultHandler<pos:position pos:line="66" pos:column="30"/></name></expr>)<pos:position pos:line="66" pos:column="31"/></condition><then pos:line="66" pos:column="31">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="67" pos:column="9">reportDefault<pos:position pos:line="67" pos:column="22"/></name><argument_list pos:line="67" pos:column="22">(<argument><expr><name pos:line="67" pos:column="23">parser<pos:position pos:line="67" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="67" pos:column="31">enc<pos:position pos:line="67" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="67" pos:column="36">s<pos:position pos:line="67" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="67" pos:column="39">next<pos:position pos:line="67" pos:column="43"/></name></expr></argument>)<pos:position pos:line="67" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="45"/></expr_stmt></block></then></if></elseif></if>
      <break pos:line="68" pos:column="7">break;<pos:position pos:line="68" pos:column="13"/></break>
    <case pos:line="69" pos:column="5">case <expr><name pos:line="69" pos:column="10">XML_TOK_INVALID<pos:position pos:line="69" pos:column="25"/></name></expr>:<pos:position pos:line="69" pos:column="26"/></case>
      <expr_stmt><expr><operator pos:line="70" pos:column="7">*<pos:position pos:line="70" pos:column="8"/></operator><name pos:line="70" pos:column="8">eventPP<pos:position pos:line="70" pos:column="15"/></name> <operator pos:line="70" pos:column="16">=<pos:position pos:line="70" pos:column="17"/></operator> <name pos:line="70" pos:column="18">next<pos:position pos:line="70" pos:column="22"/></name></expr>;<pos:position pos:line="70" pos:column="23"/></expr_stmt>
      <return pos:line="71" pos:column="7">return <expr><name pos:line="71" pos:column="14">XML_ERROR_INVALID_TOKEN<pos:position pos:line="71" pos:column="37"/></name></expr>;<pos:position pos:line="71" pos:column="38"/></return>
    <case pos:line="72" pos:column="5">case <expr><name pos:line="72" pos:column="10">XML_TOK_PARTIAL_CHAR<pos:position pos:line="72" pos:column="30"/></name></expr>:<pos:position pos:line="72" pos:column="31"/></case>
      <if pos:line="73" pos:column="7">if <condition pos:line="73" pos:column="10">(<expr><name pos:line="73" pos:column="11">nextPtr<pos:position pos:line="73" pos:column="18"/></name></expr>)<pos:position pos:line="73" pos:column="19"/></condition><then pos:line="73" pos:column="19"> <block pos:line="73" pos:column="20">{
        <expr_stmt><expr><operator pos:line="74" pos:column="9">*<pos:position pos:line="74" pos:column="10"/></operator><name pos:line="74" pos:column="10">nextPtr<pos:position pos:line="74" pos:column="17"/></name> <operator pos:line="74" pos:column="18">=<pos:position pos:line="74" pos:column="19"/></operator> <name pos:line="74" pos:column="20">s<pos:position pos:line="74" pos:column="21"/></name></expr>;<pos:position pos:line="74" pos:column="22"/></expr_stmt>
        <return pos:line="75" pos:column="9">return <expr><name pos:line="75" pos:column="16">XML_ERROR_NONE<pos:position pos:line="75" pos:column="30"/></name></expr>;<pos:position pos:line="75" pos:column="31"/></return>
      }<pos:position pos:line="76" pos:column="8"/></block></then></if>
      <return pos:line="77" pos:column="7">return <expr><name pos:line="77" pos:column="14">XML_ERROR_PARTIAL_CHAR<pos:position pos:line="77" pos:column="36"/></name></expr>;<pos:position pos:line="77" pos:column="37"/></return>
    <case pos:line="78" pos:column="5">case <expr><name pos:line="78" pos:column="10">XML_TOK_PARTIAL<pos:position pos:line="78" pos:column="25"/></name></expr>:<pos:position pos:line="78" pos:column="26"/></case>
    <case pos:line="79" pos:column="5">case <expr><name pos:line="79" pos:column="10">XML_TOK_NONE<pos:position pos:line="79" pos:column="22"/></name></expr>:<pos:position pos:line="79" pos:column="23"/></case>
      <if pos:line="80" pos:column="7">if <condition pos:line="80" pos:column="10">(<expr><name pos:line="80" pos:column="11">nextPtr<pos:position pos:line="80" pos:column="18"/></name></expr>)<pos:position pos:line="80" pos:column="19"/></condition><then pos:line="80" pos:column="19"> <block pos:line="80" pos:column="20">{
        <expr_stmt><expr><operator pos:line="81" pos:column="9">*<pos:position pos:line="81" pos:column="10"/></operator><name pos:line="81" pos:column="10">nextPtr<pos:position pos:line="81" pos:column="17"/></name> <operator pos:line="81" pos:column="18">=<pos:position pos:line="81" pos:column="19"/></operator> <name pos:line="81" pos:column="20">s<pos:position pos:line="81" pos:column="21"/></name></expr>;<pos:position pos:line="81" pos:column="22"/></expr_stmt>
        <return pos:line="82" pos:column="9">return <expr><name pos:line="82" pos:column="16">XML_ERROR_NONE<pos:position pos:line="82" pos:column="30"/></name></expr>;<pos:position pos:line="82" pos:column="31"/></return>
      }<pos:position pos:line="83" pos:column="8"/></block></then></if>
      <return pos:line="84" pos:column="7">return <expr><name pos:line="84" pos:column="14">XML_ERROR_UNCLOSED_CDATA_SECTION<pos:position pos:line="84" pos:column="46"/></name></expr>;<pos:position pos:line="84" pos:column="47"/></return>
    <default pos:line="85" pos:column="5">default:<pos:position pos:line="85" pos:column="13"/></default>
      <expr_stmt><expr><operator pos:line="86" pos:column="7">*<pos:position pos:line="86" pos:column="8"/></operator><name pos:line="86" pos:column="8">eventPP<pos:position pos:line="86" pos:column="15"/></name> <operator pos:line="86" pos:column="16">=<pos:position pos:line="86" pos:column="17"/></operator> <name pos:line="86" pos:column="18">next<pos:position pos:line="86" pos:column="22"/></name></expr>;<pos:position pos:line="86" pos:column="23"/></expr_stmt>
      <return pos:line="87" pos:column="7">return <expr><name pos:line="87" pos:column="14">XML_ERROR_UNEXPECTED_STATE<pos:position pos:line="87" pos:column="40"/></name></expr>;<pos:position pos:line="87" pos:column="41"/></return>
    }<pos:position pos:line="88" pos:column="6"/></block></switch>
    <expr_stmt><expr><operator pos:line="89" pos:column="5">*<pos:position pos:line="89" pos:column="6"/></operator><name pos:line="89" pos:column="6">eventPP<pos:position pos:line="89" pos:column="13"/></name> <operator pos:line="89" pos:column="14">=<pos:position pos:line="89" pos:column="15"/></operator> <name pos:line="89" pos:column="16">s<pos:position pos:line="89" pos:column="17"/></name> <operator pos:line="89" pos:column="18">=<pos:position pos:line="89" pos:column="19"/></operator> <name pos:line="89" pos:column="20">next<pos:position pos:line="89" pos:column="24"/></name></expr>;<pos:position pos:line="89" pos:column="25"/></expr_stmt>
  }<pos:position pos:line="90" pos:column="4"/></block></for>
  <comment type="block" pos:line="91" pos:column="3">/* not reached */</comment>
}<pos:position pos:line="92" pos:column="2"/></block></function></unit>
