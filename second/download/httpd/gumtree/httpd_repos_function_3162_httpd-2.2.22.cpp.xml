<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_3162_httpd-2.2.22.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name><name pos:line="1" pos:column="8">enum<pos:position pos:line="1" pos:column="12"/></name> <name pos:line="1" pos:column="13">XML_Error<pos:position pos:line="1" pos:column="22"/></name></name> <name pos:line="1" pos:column="23">PTRCALL<pos:position pos:line="1" pos:column="30"/></name></type>
<name pos:line="2" pos:column="1">cdataSectionProcessor<pos:position pos:line="2" pos:column="22"/></name><parameter_list pos:line="2" pos:column="22">(<parameter><decl><type><name pos:line="2" pos:column="23">XML_Parser<pos:position pos:line="2" pos:column="33"/></name></type> <name pos:line="2" pos:column="34">parser<pos:position pos:line="2" pos:column="40"/></name></decl></parameter>,
                      <parameter><decl><type><specifier pos:line="3" pos:column="23">const<pos:position pos:line="3" pos:column="28"/></specifier> <name pos:line="3" pos:column="29">char<pos:position pos:line="3" pos:column="33"/></name> <modifier pos:line="3" pos:column="34">*<pos:position pos:line="3" pos:column="35"/></modifier></type><name pos:line="3" pos:column="35">start<pos:position pos:line="3" pos:column="40"/></name></decl></parameter>,
                      <parameter><decl><type><specifier pos:line="4" pos:column="23">const<pos:position pos:line="4" pos:column="28"/></specifier> <name pos:line="4" pos:column="29">char<pos:position pos:line="4" pos:column="33"/></name> <modifier pos:line="4" pos:column="34">*<pos:position pos:line="4" pos:column="35"/></modifier></type><name pos:line="4" pos:column="35">end<pos:position pos:line="4" pos:column="38"/></name></decl></parameter>,
                      <parameter><decl><type><specifier pos:line="5" pos:column="23">const<pos:position pos:line="5" pos:column="28"/></specifier> <name pos:line="5" pos:column="29">char<pos:position pos:line="5" pos:column="33"/></name> <modifier pos:line="5" pos:column="34">*<pos:position pos:line="5" pos:column="35"/></modifier><modifier pos:line="5" pos:column="35">*<pos:position pos:line="5" pos:column="36"/></modifier></type><name pos:line="5" pos:column="36">endPtr<pos:position pos:line="5" pos:column="42"/></name></decl></parameter>)<pos:position pos:line="5" pos:column="43"/></parameter_list>
<block pos:line="6" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="7" pos:column="3">enum<pos:position pos:line="7" pos:column="7"/></name> <name pos:line="7" pos:column="8">XML_Error<pos:position pos:line="7" pos:column="17"/></name></name></type> <name pos:line="7" pos:column="18">result<pos:position pos:line="7" pos:column="24"/></name> <init pos:line="7" pos:column="25">= <expr><call><name pos:line="7" pos:column="27">doCdataSection<pos:position pos:line="7" pos:column="41"/></name><argument_list pos:line="7" pos:column="41">(<argument><expr><name pos:line="7" pos:column="42">parser<pos:position pos:line="7" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="50">encoding<pos:position pos:line="7" pos:column="58"/></name></expr></argument>, <argument><expr><operator pos:line="7" pos:column="60">&amp;<pos:position pos:line="7" pos:column="65"/></operator><name pos:line="7" pos:column="61">start<pos:position pos:line="7" pos:column="66"/></name></expr></argument>,
                                         <argument><expr><name pos:line="8" pos:column="42">end<pos:position pos:line="8" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="47">endPtr<pos:position pos:line="8" pos:column="53"/></name></expr></argument>)<pos:position pos:line="8" pos:column="54"/></argument_list></call></expr></init></decl>;<pos:position pos:line="8" pos:column="55"/></decl_stmt>
  <if pos:line="9" pos:column="3">if <condition pos:line="9" pos:column="6">(<expr><name pos:line="9" pos:column="7">start<pos:position pos:line="9" pos:column="12"/></name></expr>)<pos:position pos:line="9" pos:column="13"/></condition><then pos:line="9" pos:column="13"> <block pos:line="9" pos:column="14">{
    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><name pos:line="10" pos:column="9">parentParser<pos:position pos:line="10" pos:column="21"/></name></expr>)<pos:position pos:line="10" pos:column="22"/></condition><then pos:line="10" pos:column="22"> <block pos:line="10" pos:column="23">{  <comment type="block" pos:line="10" pos:column="26">/* we are parsing an external entity */</comment>
      <expr_stmt><expr><name pos:line="11" pos:column="7">processor<pos:position pos:line="11" pos:column="16"/></name> <operator pos:line="11" pos:column="17">=<pos:position pos:line="11" pos:column="18"/></operator> <name pos:line="11" pos:column="19">externalEntityContentProcessor<pos:position pos:line="11" pos:column="49"/></name></expr>;<pos:position pos:line="11" pos:column="50"/></expr_stmt>
      <return pos:line="12" pos:column="7">return <expr><call><name pos:line="12" pos:column="14">externalEntityContentProcessor<pos:position pos:line="12" pos:column="44"/></name><argument_list pos:line="12" pos:column="44">(<argument><expr><name pos:line="12" pos:column="45">parser<pos:position pos:line="12" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="53">start<pos:position pos:line="12" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="60">end<pos:position pos:line="12" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="65">endPtr<pos:position pos:line="12" pos:column="71"/></name></expr></argument>)<pos:position pos:line="12" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="73"/></return>
    }<pos:position pos:line="13" pos:column="6"/></block></then>
    <else pos:line="14" pos:column="5">else <block pos:line="14" pos:column="10">{
      <expr_stmt><expr><name pos:line="15" pos:column="7">processor<pos:position pos:line="15" pos:column="16"/></name> <operator pos:line="15" pos:column="17">=<pos:position pos:line="15" pos:column="18"/></operator> <name pos:line="15" pos:column="19">contentProcessor<pos:position pos:line="15" pos:column="35"/></name></expr>;<pos:position pos:line="15" pos:column="36"/></expr_stmt>
      <return pos:line="16" pos:column="7">return <expr><call><name pos:line="16" pos:column="14">contentProcessor<pos:position pos:line="16" pos:column="30"/></name><argument_list pos:line="16" pos:column="30">(<argument><expr><name pos:line="16" pos:column="31">parser<pos:position pos:line="16" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="39">start<pos:position pos:line="16" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="46">end<pos:position pos:line="16" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="51">endPtr<pos:position pos:line="16" pos:column="57"/></name></expr></argument>)<pos:position pos:line="16" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="59"/></return>
    }<pos:position pos:line="17" pos:column="6"/></block></else></if>
  }<pos:position pos:line="18" pos:column="4"/></block></then></if>
  <return pos:line="19" pos:column="3">return <expr><name pos:line="19" pos:column="10">result<pos:position pos:line="19" pos:column="16"/></name></expr>;<pos:position pos:line="19" pos:column="17"/></return>
}<pos:position pos:line="20" pos:column="2"/></block></function></unit>
