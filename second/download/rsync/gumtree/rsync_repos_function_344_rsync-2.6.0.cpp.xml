<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_344_rsync-2.6.0.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">main<pos:position pos:line="1" pos:column="9"/></name><parameter_list pos:line="1" pos:column="9">(<parameter><decl><type><name pos:line="1" pos:column="10">int<pos:position pos:line="1" pos:column="13"/></name></type> <name pos:line="1" pos:column="14">argc<pos:position pos:line="1" pos:column="18"/></name></decl></parameter>,<parameter><decl><type><name pos:line="1" pos:column="19">char<pos:position pos:line="1" pos:column="23"/></name> <modifier pos:line="1" pos:column="24">*<pos:position pos:line="1" pos:column="25"/></modifier></type><name><name pos:line="1" pos:column="25">argv<pos:position pos:line="1" pos:column="29"/></name><index pos:line="1" pos:column="29">[]<pos:position pos:line="1" pos:column="31"/></index></name></decl></parameter>)<pos:position pos:line="1" pos:column="32"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><specifier pos:line="3" pos:column="9">extern<pos:position pos:line="3" pos:column="15"/></specifier> <type><name pos:line="3" pos:column="16">int<pos:position pos:line="3" pos:column="19"/></name></type> <name pos:line="3" pos:column="20">am_root<pos:position pos:line="3" pos:column="27"/></name></decl>;<pos:position pos:line="3" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><specifier pos:line="4" pos:column="9">extern<pos:position pos:line="4" pos:column="15"/></specifier> <type><name pos:line="4" pos:column="16">int<pos:position pos:line="4" pos:column="19"/></name></type> <name pos:line="4" pos:column="20">orig_umask<pos:position pos:line="4" pos:column="30"/></name></decl>;<pos:position pos:line="4" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><specifier pos:line="5" pos:column="9">extern<pos:position pos:line="5" pos:column="15"/></specifier> <type><name pos:line="5" pos:column="16">int<pos:position pos:line="5" pos:column="19"/></name></type> <name pos:line="5" pos:column="20">dry_run<pos:position pos:line="5" pos:column="27"/></name></decl>;<pos:position pos:line="5" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">ret<pos:position pos:line="6" pos:column="16"/></name></decl>;<pos:position pos:line="6" pos:column="17"/></decl_stmt>
	<decl_stmt><decl><specifier pos:line="7" pos:column="9">extern<pos:position pos:line="7" pos:column="15"/></specifier> <type><name pos:line="7" pos:column="16">int<pos:position pos:line="7" pos:column="19"/></name></type> <name pos:line="7" pos:column="20">write_batch<pos:position pos:line="7" pos:column="31"/></name></decl>;<pos:position pos:line="7" pos:column="32"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">int<pos:position pos:line="8" pos:column="12"/></name></type> <name pos:line="8" pos:column="13">orig_argc<pos:position pos:line="8" pos:column="22"/></name></decl>;<pos:position pos:line="8" pos:column="23"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="9" pos:column="9">char<pos:position pos:line="9" pos:column="13"/></name> <modifier pos:line="9" pos:column="14">*<pos:position pos:line="9" pos:column="15"/></modifier><modifier pos:line="9" pos:column="15">*<pos:position pos:line="9" pos:column="16"/></modifier></type><name pos:line="9" pos:column="16">orig_argv<pos:position pos:line="9" pos:column="25"/></name></decl>;<pos:position pos:line="9" pos:column="26"/></decl_stmt>

	<expr_stmt><expr><name pos:line="11" pos:column="9">orig_argc<pos:position pos:line="11" pos:column="18"/></name> <operator pos:line="11" pos:column="19">=<pos:position pos:line="11" pos:column="20"/></operator> <name pos:line="11" pos:column="21">argc<pos:position pos:line="11" pos:column="25"/></name></expr>;<pos:position pos:line="11" pos:column="26"/></expr_stmt>
	<expr_stmt><expr><name pos:line="12" pos:column="9">orig_argv<pos:position pos:line="12" pos:column="18"/></name> <operator pos:line="12" pos:column="19">=<pos:position pos:line="12" pos:column="20"/></operator> <name pos:line="12" pos:column="21">argv<pos:position pos:line="12" pos:column="25"/></name></expr>;<pos:position pos:line="12" pos:column="26"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="14" pos:column="9">signal<pos:position pos:line="14" pos:column="15"/></name><argument_list pos:line="14" pos:column="15">(<argument><expr><name pos:line="14" pos:column="16">SIGUSR1<pos:position pos:line="14" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="25">sigusr1_handler<pos:position pos:line="14" pos:column="40"/></name></expr></argument>)<pos:position pos:line="14" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="42"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="15" pos:column="9">signal<pos:position pos:line="15" pos:column="15"/></name><argument_list pos:line="15" pos:column="15">(<argument><expr><name pos:line="15" pos:column="16">SIGUSR2<pos:position pos:line="15" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="25">sigusr2_handler<pos:position pos:line="15" pos:column="40"/></name></expr></argument>)<pos:position pos:line="15" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="42"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="16" pos:column="9">signal<pos:position pos:line="16" pos:column="15"/></name><argument_list pos:line="16" pos:column="15">(<argument><expr><name pos:line="16" pos:column="16">SIGCHLD<pos:position pos:line="16" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="25">sigchld_handler<pos:position pos:line="16" pos:column="40"/></name></expr></argument>)<pos:position pos:line="16" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="42"/></expr_stmt>
<cpp:ifdef pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">ifdef<pos:position pos:line="17" pos:column="7"/></cpp:directive> <name pos:line="17" pos:column="8">MAINTAINER_MODE<pos:position pos:line="17" pos:column="23"/></name></cpp:ifdef>
	<expr_stmt><expr><call><name pos:line="18" pos:column="9">signal<pos:position pos:line="18" pos:column="15"/></name><argument_list pos:line="18" pos:column="15">(<argument><expr><name pos:line="18" pos:column="16">SIGSEGV<pos:position pos:line="18" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="25">rsync_panic_handler<pos:position pos:line="18" pos:column="44"/></name></expr></argument>)<pos:position pos:line="18" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="46"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="19" pos:column="9">signal<pos:position pos:line="19" pos:column="15"/></name><argument_list pos:line="19" pos:column="15">(<argument><expr><name pos:line="19" pos:column="16">SIGFPE<pos:position pos:line="19" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="24">rsync_panic_handler<pos:position pos:line="19" pos:column="43"/></name></expr></argument>)<pos:position pos:line="19" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="45"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="20" pos:column="9">signal<pos:position pos:line="20" pos:column="15"/></name><argument_list pos:line="20" pos:column="15">(<argument><expr><name pos:line="20" pos:column="16">SIGABRT<pos:position pos:line="20" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="25">rsync_panic_handler<pos:position pos:line="20" pos:column="44"/></name></expr></argument>)<pos:position pos:line="20" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="46"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="21" pos:column="9">signal<pos:position pos:line="21" pos:column="15"/></name><argument_list pos:line="21" pos:column="15">(<argument><expr><name pos:line="21" pos:column="16">SIGBUS<pos:position pos:line="21" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="24">rsync_panic_handler<pos:position pos:line="21" pos:column="43"/></name></expr></argument>)<pos:position pos:line="21" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="45"/></expr_stmt>
<cpp:endif pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">endif<pos:position pos:line="22" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="22" pos:column="8">/* def MAINTAINER_MODE */</comment>

	<expr_stmt><expr><name pos:line="24" pos:column="9">starttime<pos:position pos:line="24" pos:column="18"/></name> <operator pos:line="24" pos:column="19">=<pos:position pos:line="24" pos:column="20"/></operator> <call><name pos:line="24" pos:column="21">time<pos:position pos:line="24" pos:column="25"/></name><argument_list pos:line="24" pos:column="25">(<argument><expr><name pos:line="24" pos:column="26">NULL<pos:position pos:line="24" pos:column="30"/></name></expr></argument>)<pos:position pos:line="24" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="32"/></expr_stmt>
	<expr_stmt><expr><name pos:line="25" pos:column="9">am_root<pos:position pos:line="25" pos:column="16"/></name> <operator pos:line="25" pos:column="17">=<pos:position pos:line="25" pos:column="18"/></operator> <operator pos:line="25" pos:column="19">(<pos:position pos:line="25" pos:column="20"/></operator><call><name pos:line="25" pos:column="20">getuid<pos:position pos:line="25" pos:column="26"/></name><argument_list pos:line="25" pos:column="26">()<pos:position pos:line="25" pos:column="28"/></argument_list></call> <operator pos:line="25" pos:column="29">==<pos:position pos:line="25" pos:column="31"/></operator> <literal type="number" pos:line="25" pos:column="32">0<pos:position pos:line="25" pos:column="33"/></literal><operator pos:line="25" pos:column="33">)<pos:position pos:line="25" pos:column="34"/></operator></expr>;<pos:position pos:line="25" pos:column="35"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="27" pos:column="9">memset<pos:position pos:line="27" pos:column="15"/></name><argument_list pos:line="27" pos:column="15">(<argument><expr><operator pos:line="27" pos:column="16">&amp;<pos:position pos:line="27" pos:column="21"/></operator><name pos:line="27" pos:column="17">stats<pos:position pos:line="27" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="27" pos:column="24">0<pos:position pos:line="27" pos:column="25"/></literal></expr></argument>, <argument><expr><sizeof pos:line="27" pos:column="27">sizeof<argument_list pos:line="27" pos:column="33">(<argument><expr><name pos:line="27" pos:column="34">stats<pos:position pos:line="27" pos:column="39"/></name></expr></argument>)<pos:position pos:line="27" pos:column="40"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="27" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="42"/></expr_stmt>

	<if pos:line="29" pos:column="9">if <condition pos:line="29" pos:column="12">(<expr><name pos:line="29" pos:column="13">argc<pos:position pos:line="29" pos:column="17"/></name> <operator pos:line="29" pos:column="18">&lt;<pos:position pos:line="29" pos:column="22"/></operator> <literal type="number" pos:line="29" pos:column="20">2<pos:position pos:line="29" pos:column="21"/></literal></expr>)<pos:position pos:line="29" pos:column="22"/></condition><then pos:line="29" pos:column="22"> <block pos:line="29" pos:column="23">{
		<expr_stmt><expr><call><name pos:line="30" pos:column="17">usage<pos:position pos:line="30" pos:column="22"/></name><argument_list pos:line="30" pos:column="22">(<argument><expr><name pos:line="30" pos:column="23">FERROR<pos:position pos:line="30" pos:column="29"/></name></expr></argument>)<pos:position pos:line="30" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="31"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="31" pos:column="17">exit_cleanup<pos:position pos:line="31" pos:column="29"/></name><argument_list pos:line="31" pos:column="29">(<argument><expr><name pos:line="31" pos:column="30">RERR_SYNTAX<pos:position pos:line="31" pos:column="41"/></name></expr></argument>)<pos:position pos:line="31" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="43"/></expr_stmt>
	}<pos:position pos:line="32" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="34" pos:column="9">/* we set a 0 umask so that correct file permissions can be
	 * carried across */</comment>
	<expr_stmt><expr><name pos:line="36" pos:column="9">orig_umask<pos:position pos:line="36" pos:column="19"/></name> <operator pos:line="36" pos:column="20">=<pos:position pos:line="36" pos:column="21"/></operator> <operator pos:line="36" pos:column="22">(<pos:position pos:line="36" pos:column="23"/></operator><name pos:line="36" pos:column="23">int<pos:position pos:line="36" pos:column="26"/></name><operator pos:line="36" pos:column="26">)<pos:position pos:line="36" pos:column="27"/></operator><call><name pos:line="36" pos:column="27">umask<pos:position pos:line="36" pos:column="32"/></name><argument_list pos:line="36" pos:column="32">(<argument><expr><literal type="number" pos:line="36" pos:column="33">0<pos:position pos:line="36" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="36"/></expr_stmt>

	<if pos:line="38" pos:column="9">if <condition pos:line="38" pos:column="12">(<expr><operator pos:line="38" pos:column="13">!<pos:position pos:line="38" pos:column="14"/></operator><call><name pos:line="38" pos:column="14">parse_arguments<pos:position pos:line="38" pos:column="29"/></name><argument_list pos:line="38" pos:column="29">(<argument><expr><operator pos:line="38" pos:column="30">&amp;<pos:position pos:line="38" pos:column="35"/></operator><name pos:line="38" pos:column="31">argc<pos:position pos:line="38" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="38" pos:column="37">(<pos:position pos:line="38" pos:column="38"/></operator><specifier pos:line="38" pos:column="38">const<pos:position pos:line="38" pos:column="43"/></specifier> <name pos:line="38" pos:column="44">char<pos:position pos:line="38" pos:column="48"/></name> <operator pos:line="38" pos:column="49">*<pos:position pos:line="38" pos:column="50"/></operator><operator pos:line="38" pos:column="50">*<pos:position pos:line="38" pos:column="51"/></operator><operator pos:line="38" pos:column="51">*<pos:position pos:line="38" pos:column="52"/></operator><operator pos:line="38" pos:column="52">)<pos:position pos:line="38" pos:column="53"/></operator> <operator pos:line="38" pos:column="54">&amp;<pos:position pos:line="38" pos:column="59"/></operator><name pos:line="38" pos:column="55">argv<pos:position pos:line="38" pos:column="59"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="38" pos:column="61">1<pos:position pos:line="38" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="38" pos:column="63"/></argument_list></call></expr>)<pos:position pos:line="38" pos:column="64"/></condition><then pos:line="38" pos:column="64"> <block pos:line="38" pos:column="65">{
		<comment type="block" pos:line="39" pos:column="17">/* FIXME: We ought to call the same error-handling
		 * code here, rather than relying on getopt. */</comment>
		<expr_stmt><expr><call><name pos:line="41" pos:column="17">option_error<pos:position pos:line="41" pos:column="29"/></name><argument_list pos:line="41" pos:column="29">()<pos:position pos:line="41" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="32"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="42" pos:column="17">exit_cleanup<pos:position pos:line="42" pos:column="29"/></name><argument_list pos:line="42" pos:column="29">(<argument><expr><name pos:line="42" pos:column="30">RERR_SYNTAX<pos:position pos:line="42" pos:column="41"/></name></expr></argument>)<pos:position pos:line="42" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="43"/></expr_stmt>
	}<pos:position pos:line="43" pos:column="10"/></block></then></if>

	<macro><name pos:line="45" pos:column="9">signal<pos:position pos:line="45" pos:column="15"/></name><argument_list pos:line="45" pos:column="15">(<argument pos:line="45" pos:column="16">SIGINT<pos:position pos:line="45" pos:column="22"/></argument>,<argument pos:line="45" pos:column="23">SIGNAL_CAST sig_int<pos:position pos:line="45" pos:column="42"/></argument>)<pos:position pos:line="45" pos:column="43"/></argument_list></macro><empty_stmt pos:line="45" pos:column="43">;<pos:position pos:line="45" pos:column="44"/></empty_stmt>
	<macro><name pos:line="46" pos:column="9">signal<pos:position pos:line="46" pos:column="15"/></name><argument_list pos:line="46" pos:column="15">(<argument pos:line="46" pos:column="16">SIGHUP<pos:position pos:line="46" pos:column="22"/></argument>,<argument pos:line="46" pos:column="23">SIGNAL_CAST sig_int<pos:position pos:line="46" pos:column="42"/></argument>)<pos:position pos:line="46" pos:column="43"/></argument_list></macro><empty_stmt pos:line="46" pos:column="43">;<pos:position pos:line="46" pos:column="44"/></empty_stmt>
	<macro><name pos:line="47" pos:column="9">signal<pos:position pos:line="47" pos:column="15"/></name><argument_list pos:line="47" pos:column="15">(<argument pos:line="47" pos:column="16">SIGTERM<pos:position pos:line="47" pos:column="23"/></argument>,<argument pos:line="47" pos:column="24">SIGNAL_CAST sig_int<pos:position pos:line="47" pos:column="43"/></argument>)<pos:position pos:line="47" pos:column="44"/></argument_list></macro><empty_stmt pos:line="47" pos:column="44">;<pos:position pos:line="47" pos:column="45"/></empty_stmt>

	<comment type="block" pos:line="49" pos:column="9">/* Ignore SIGPIPE; we consistently check error codes and will
	 * see the EPIPE. */</comment>
	<expr_stmt><expr><call><name pos:line="51" pos:column="9">signal<pos:position pos:line="51" pos:column="15"/></name><argument_list pos:line="51" pos:column="15">(<argument><expr><name pos:line="51" pos:column="16">SIGPIPE<pos:position pos:line="51" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="25">SIG_IGN<pos:position pos:line="51" pos:column="32"/></name></expr></argument>)<pos:position pos:line="51" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="34"/></expr_stmt>

	<comment type="block" pos:line="53" pos:column="9">/* Initialize push_dir here because on some old systems getcwd
	 * (implemented by forking "pwd" and reading its output) doesn't
	 * work when there are other child processes.  Also, on all systems
	 * that implement getcwd that way "pwd" can't be found after chroot. */</comment>
	<expr_stmt><expr><call><name pos:line="57" pos:column="9">push_dir<pos:position pos:line="57" pos:column="17"/></name><argument_list pos:line="57" pos:column="17">(<argument><expr><name pos:line="57" pos:column="18">NULL<pos:position pos:line="57" pos:column="22"/></name></expr></argument>,<argument><expr><literal type="number" pos:line="57" pos:column="23">0<pos:position pos:line="57" pos:column="24"/></literal></expr></argument>)<pos:position pos:line="57" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="26"/></expr_stmt>

	<if pos:line="59" pos:column="9">if <condition pos:line="59" pos:column="12">(<expr><name pos:line="59" pos:column="13">write_batch<pos:position pos:line="59" pos:column="24"/></name> <operator pos:line="59" pos:column="25">&amp;&amp;<pos:position pos:line="59" pos:column="35"/></operator> <operator pos:line="59" pos:column="28">!<pos:position pos:line="59" pos:column="29"/></operator><name pos:line="59" pos:column="29">am_server<pos:position pos:line="59" pos:column="38"/></name></expr>)<pos:position pos:line="59" pos:column="39"/></condition><then pos:line="59" pos:column="39"> <block pos:line="59" pos:column="40">{
		<expr_stmt><expr><call><name pos:line="60" pos:column="17">write_batch_argvs_file<pos:position pos:line="60" pos:column="39"/></name><argument_list pos:line="60" pos:column="39">(<argument><expr><name pos:line="60" pos:column="40">orig_argc<pos:position pos:line="60" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="60" pos:column="51">orig_argv<pos:position pos:line="60" pos:column="60"/></name></expr></argument>)<pos:position pos:line="60" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="62"/></expr_stmt>
	}<pos:position pos:line="61" pos:column="10"/></block></then></if>

	<if pos:line="63" pos:column="9">if <condition pos:line="63" pos:column="12">(<expr><name pos:line="63" pos:column="13">am_daemon<pos:position pos:line="63" pos:column="22"/></name> <operator pos:line="63" pos:column="23">&amp;&amp;<pos:position pos:line="63" pos:column="33"/></operator> <operator pos:line="63" pos:column="26">!<pos:position pos:line="63" pos:column="27"/></operator><name pos:line="63" pos:column="27">am_server<pos:position pos:line="63" pos:column="36"/></name></expr>)<pos:position pos:line="63" pos:column="37"/></condition><then pos:line="63" pos:column="37">
		<block type="pseudo"><return pos:line="64" pos:column="17">return <expr><call><name pos:line="64" pos:column="24">daemon_main<pos:position pos:line="64" pos:column="35"/></name><argument_list pos:line="64" pos:column="35">()<pos:position pos:line="64" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="38"/></return></block></then></if>

	<if pos:line="66" pos:column="9">if <condition pos:line="66" pos:column="12">(<expr><name pos:line="66" pos:column="13">argc<pos:position pos:line="66" pos:column="17"/></name> <operator pos:line="66" pos:column="18">&lt;<pos:position pos:line="66" pos:column="22"/></operator> <literal type="number" pos:line="66" pos:column="20">1<pos:position pos:line="66" pos:column="21"/></literal></expr>)<pos:position pos:line="66" pos:column="22"/></condition><then pos:line="66" pos:column="22"> <block pos:line="66" pos:column="23">{
		<expr_stmt><expr><call><name pos:line="67" pos:column="17">usage<pos:position pos:line="67" pos:column="22"/></name><argument_list pos:line="67" pos:column="22">(<argument><expr><name pos:line="67" pos:column="23">FERROR<pos:position pos:line="67" pos:column="29"/></name></expr></argument>)<pos:position pos:line="67" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="31"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="68" pos:column="17">exit_cleanup<pos:position pos:line="68" pos:column="29"/></name><argument_list pos:line="68" pos:column="29">(<argument><expr><name pos:line="68" pos:column="30">RERR_SYNTAX<pos:position pos:line="68" pos:column="41"/></name></expr></argument>)<pos:position pos:line="68" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="43"/></expr_stmt>
	}<pos:position pos:line="69" pos:column="10"/></block></then></if>

	<if pos:line="71" pos:column="9">if <condition pos:line="71" pos:column="12">(<expr><name pos:line="71" pos:column="13">dry_run<pos:position pos:line="71" pos:column="20"/></name></expr>)<pos:position pos:line="71" pos:column="21"/></condition><then pos:line="71" pos:column="21">
		<block type="pseudo"><expr_stmt><expr><name pos:line="72" pos:column="17">verbose<pos:position pos:line="72" pos:column="24"/></name> <operator pos:line="72" pos:column="25">=<pos:position pos:line="72" pos:column="26"/></operator> <call><name pos:line="72" pos:column="27">MAX<pos:position pos:line="72" pos:column="30"/></name><argument_list pos:line="72" pos:column="30">(<argument><expr><name pos:line="72" pos:column="31">verbose<pos:position pos:line="72" pos:column="38"/></name></expr></argument>,<argument><expr><literal type="number" pos:line="72" pos:column="39">1<pos:position pos:line="72" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="72" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="42"/></expr_stmt></block></then></if>

<cpp:ifndef pos:line="74" pos:column="1">#<cpp:directive pos:line="74" pos:column="2">ifndef<pos:position pos:line="74" pos:column="8"/></cpp:directive> <name pos:line="74" pos:column="9">SUPPORT_LINKS<pos:position pos:line="74" pos:column="22"/></name></cpp:ifndef>
	<if pos:line="75" pos:column="9">if <condition pos:line="75" pos:column="12">(<expr><operator pos:line="75" pos:column="13">!<pos:position pos:line="75" pos:column="14"/></operator><name pos:line="75" pos:column="14">am_server<pos:position pos:line="75" pos:column="23"/></name> <operator pos:line="75" pos:column="24">&amp;&amp;<pos:position pos:line="75" pos:column="34"/></operator> <name pos:line="75" pos:column="27">preserve_links<pos:position pos:line="75" pos:column="41"/></name></expr>)<pos:position pos:line="75" pos:column="42"/></condition><then pos:line="75" pos:column="42"> <block pos:line="75" pos:column="43">{
		<expr_stmt><expr><call><name pos:line="76" pos:column="17">rprintf<pos:position pos:line="76" pos:column="24"/></name><argument_list pos:line="76" pos:column="24">(<argument><expr><name pos:line="76" pos:column="25">FERROR<pos:position pos:line="76" pos:column="31"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="76" pos:column="32">"ERROR: symbolic links not supported\n"<pos:position pos:line="76" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="76" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="73"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="77" pos:column="17">exit_cleanup<pos:position pos:line="77" pos:column="29"/></name><argument_list pos:line="77" pos:column="29">(<argument><expr><name pos:line="77" pos:column="30">RERR_UNSUPPORTED<pos:position pos:line="77" pos:column="46"/></name></expr></argument>)<pos:position pos:line="77" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="48"/></expr_stmt>
	}<pos:position pos:line="78" pos:column="10"/></block></then></if>
<cpp:endif pos:line="79" pos:column="1">#<cpp:directive pos:line="79" pos:column="2">endif<pos:position pos:line="79" pos:column="7"/></cpp:directive></cpp:endif>

	<if pos:line="81" pos:column="9">if <condition pos:line="81" pos:column="12">(<expr><name pos:line="81" pos:column="13">am_server<pos:position pos:line="81" pos:column="22"/></name></expr>)<pos:position pos:line="81" pos:column="23"/></condition><then pos:line="81" pos:column="23"> <block pos:line="81" pos:column="24">{
		<expr_stmt><expr><call><name pos:line="82" pos:column="17">set_nonblocking<pos:position pos:line="82" pos:column="32"/></name><argument_list pos:line="82" pos:column="32">(<argument><expr><name pos:line="82" pos:column="33">STDIN_FILENO<pos:position pos:line="82" pos:column="45"/></name></expr></argument>)<pos:position pos:line="82" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="47"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="83" pos:column="17">set_nonblocking<pos:position pos:line="83" pos:column="32"/></name><argument_list pos:line="83" pos:column="32">(<argument><expr><name pos:line="83" pos:column="33">STDOUT_FILENO<pos:position pos:line="83" pos:column="46"/></name></expr></argument>)<pos:position pos:line="83" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="48"/></expr_stmt>
		<if pos:line="84" pos:column="17">if <condition pos:line="84" pos:column="20">(<expr><name pos:line="84" pos:column="21">am_daemon<pos:position pos:line="84" pos:column="30"/></name></expr>)<pos:position pos:line="84" pos:column="31"/></condition><then pos:line="84" pos:column="31">
			<block type="pseudo"><return pos:line="85" pos:column="25">return <expr><call><name pos:line="85" pos:column="32">start_daemon<pos:position pos:line="85" pos:column="44"/></name><argument_list pos:line="85" pos:column="44">(<argument><expr><name pos:line="85" pos:column="45">STDIN_FILENO<pos:position pos:line="85" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="85" pos:column="59">STDOUT_FILENO<pos:position pos:line="85" pos:column="72"/></name></expr></argument>)<pos:position pos:line="85" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="74"/></return></block></then></if>
		<expr_stmt><expr><call><name pos:line="86" pos:column="17">start_server<pos:position pos:line="86" pos:column="29"/></name><argument_list pos:line="86" pos:column="29">(<argument><expr><name pos:line="86" pos:column="30">STDIN_FILENO<pos:position pos:line="86" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="86" pos:column="44">STDOUT_FILENO<pos:position pos:line="86" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="86" pos:column="59">argc<pos:position pos:line="86" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="86" pos:column="65">argv<pos:position pos:line="86" pos:column="69"/></name></expr></argument>)<pos:position pos:line="86" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="71"/></expr_stmt>
	}<pos:position pos:line="87" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="89" pos:column="9">ret<pos:position pos:line="89" pos:column="12"/></name> <operator pos:line="89" pos:column="13">=<pos:position pos:line="89" pos:column="14"/></operator> <call><name pos:line="89" pos:column="15">start_client<pos:position pos:line="89" pos:column="27"/></name><argument_list pos:line="89" pos:column="27">(<argument><expr><name pos:line="89" pos:column="28">argc<pos:position pos:line="89" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="89" pos:column="34">argv<pos:position pos:line="89" pos:column="38"/></name></expr></argument>)<pos:position pos:line="89" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="40"/></expr_stmt>
	<if pos:line="90" pos:column="9">if <condition pos:line="90" pos:column="12">(<expr><name pos:line="90" pos:column="13">ret<pos:position pos:line="90" pos:column="16"/></name> <operator pos:line="90" pos:column="17">==<pos:position pos:line="90" pos:column="19"/></operator> <operator pos:line="90" pos:column="20">-<pos:position pos:line="90" pos:column="21"/></operator><literal type="number" pos:line="90" pos:column="21">1<pos:position pos:line="90" pos:column="22"/></literal></expr>)<pos:position pos:line="90" pos:column="23"/></condition><then pos:line="90" pos:column="23">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="91" pos:column="17">exit_cleanup<pos:position pos:line="91" pos:column="29"/></name><argument_list pos:line="91" pos:column="29">(<argument><expr><name pos:line="91" pos:column="30">RERR_STARTCLIENT<pos:position pos:line="91" pos:column="46"/></name></expr></argument>)<pos:position pos:line="91" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="48"/></expr_stmt></block></then>
	<else pos:line="92" pos:column="9">else
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="93" pos:column="17">exit_cleanup<pos:position pos:line="93" pos:column="29"/></name><argument_list pos:line="93" pos:column="29">(<argument><expr><name pos:line="93" pos:column="30">ret<pos:position pos:line="93" pos:column="33"/></name></expr></argument>)<pos:position pos:line="93" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="35"/></expr_stmt></block></else></if>

	<return pos:line="95" pos:column="9">return <expr><name pos:line="95" pos:column="16">ret<pos:position pos:line="95" pos:column="19"/></name></expr>;<pos:position pos:line="95" pos:column="20"/></return>
}<pos:position pos:line="96" pos:column="2"/></block></function></unit>
