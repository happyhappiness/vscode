<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_454_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">do_symlink<pos:position pos:line="1" pos:column="15"/></name><parameter_list pos:line="1" pos:column="15">(<parameter><decl><type><specifier pos:line="1" pos:column="16">const<pos:position pos:line="1" pos:column="21"/></specifier> <name pos:line="1" pos:column="22">char<pos:position pos:line="1" pos:column="26"/></name> <modifier pos:line="1" pos:column="27">*<pos:position pos:line="1" pos:column="28"/></modifier></type><name pos:line="1" pos:column="28">lnk<pos:position pos:line="1" pos:column="31"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="33">const<pos:position pos:line="1" pos:column="38"/></specifier> <name pos:line="1" pos:column="39">char<pos:position pos:line="1" pos:column="43"/></name> <modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier></type><name pos:line="1" pos:column="45">fname<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="51"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<if pos:line="3" pos:column="9">if <condition pos:line="3" pos:column="12">(<expr><name pos:line="3" pos:column="13">dry_run<pos:position pos:line="3" pos:column="20"/></name></expr>)<pos:position pos:line="3" pos:column="21"/></condition><then pos:line="3" pos:column="21"> <block type="pseudo"><return pos:line="3" pos:column="22">return <expr><literal type="number" pos:line="3" pos:column="29">0<pos:position pos:line="3" pos:column="30"/></literal></expr>;<pos:position pos:line="3" pos:column="31"/></return></block></then></if>
	<expr_stmt><expr><name pos:line="4" pos:column="9">RETURN_ERROR_IF_RO_OR_LO<pos:position pos:line="4" pos:column="33"/></name></expr>;<pos:position pos:line="4" pos:column="34"/></expr_stmt>

<cpp:if pos:line="6" pos:column="1">#<cpp:directive pos:line="6" pos:column="2">if<pos:position pos:line="6" pos:column="4"/></cpp:directive> <expr><name pos:line="6" pos:column="5">defined<pos:position pos:line="6" pos:column="12"/></name> <name pos:line="6" pos:column="13">NO_SYMLINK_XATTRS<pos:position pos:line="6" pos:column="30"/></name> <operator pos:line="6" pos:column="31">||<pos:position pos:line="6" pos:column="33"/></operator> <name pos:line="6" pos:column="34">defined<pos:position pos:line="6" pos:column="41"/></name> <name pos:line="6" pos:column="42">NO_SYMLINK_USER_XATTRS<pos:position pos:line="6" pos:column="64"/></name></expr></cpp:if>
	<comment type="block" pos:line="7" pos:column="9">/* For --fake-super, we create a normal file with mode 0600
	 * and write the lnk into it. */</comment>
	<if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><name pos:line="9" pos:column="13">am_root<pos:position pos:line="9" pos:column="20"/></name> <operator pos:line="9" pos:column="21">&lt;<pos:position pos:line="9" pos:column="25"/></operator> <literal type="number" pos:line="9" pos:column="23">0<pos:position pos:line="9" pos:column="24"/></literal></expr>)<pos:position pos:line="9" pos:column="25"/></condition><then pos:line="9" pos:column="25"> <block pos:line="9" pos:column="26">{
		<decl_stmt><decl><type><name pos:line="10" pos:column="17">int<pos:position pos:line="10" pos:column="20"/></name></type> <name pos:line="10" pos:column="21">ok<pos:position pos:line="10" pos:column="23"/></name></decl>, <decl><type ref="prev"/><name pos:line="10" pos:column="25">len<pos:position pos:line="10" pos:column="28"/></name> <init pos:line="10" pos:column="29">= <expr><call><name pos:line="10" pos:column="31">strlen<pos:position pos:line="10" pos:column="37"/></name><argument_list pos:line="10" pos:column="37">(<argument><expr><name pos:line="10" pos:column="38">lnk<pos:position pos:line="10" pos:column="41"/></name></expr></argument>)<pos:position pos:line="10" pos:column="42"/></argument_list></call></expr></init></decl>;<pos:position pos:line="10" pos:column="43"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="11" pos:column="17">int<pos:position pos:line="11" pos:column="20"/></name></type> <name pos:line="11" pos:column="21">fd<pos:position pos:line="11" pos:column="23"/></name> <init pos:line="11" pos:column="24">= <expr><call><name pos:line="11" pos:column="26">open<pos:position pos:line="11" pos:column="30"/></name><argument_list pos:line="11" pos:column="30">(<argument><expr><name pos:line="11" pos:column="31">fname<pos:position pos:line="11" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="38">O_WRONLY<pos:position pos:line="11" pos:column="46"/></name><operator pos:line="11" pos:column="46">|<pos:position pos:line="11" pos:column="47"/></operator><name pos:line="11" pos:column="47">O_CREAT<pos:position pos:line="11" pos:column="54"/></name><operator pos:line="11" pos:column="54">|<pos:position pos:line="11" pos:column="55"/></operator><name pos:line="11" pos:column="55">O_TRUNC<pos:position pos:line="11" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="64">S_IWUSR<pos:position pos:line="11" pos:column="71"/></name><operator pos:line="11" pos:column="71">|<pos:position pos:line="11" pos:column="72"/></operator><name pos:line="11" pos:column="72">S_IRUSR<pos:position pos:line="11" pos:column="79"/></name></expr></argument>)<pos:position pos:line="11" pos:column="80"/></argument_list></call></expr></init></decl>;<pos:position pos:line="11" pos:column="81"/></decl_stmt>
		<if pos:line="12" pos:column="17">if <condition pos:line="12" pos:column="20">(<expr><name pos:line="12" pos:column="21">fd<pos:position pos:line="12" pos:column="23"/></name> <operator pos:line="12" pos:column="24">&lt;<pos:position pos:line="12" pos:column="28"/></operator> <literal type="number" pos:line="12" pos:column="26">0<pos:position pos:line="12" pos:column="27"/></literal></expr>)<pos:position pos:line="12" pos:column="28"/></condition><then pos:line="12" pos:column="28">
			<block type="pseudo"><return pos:line="13" pos:column="25">return <expr><operator pos:line="13" pos:column="32">-<pos:position pos:line="13" pos:column="33"/></operator><literal type="number" pos:line="13" pos:column="33">1<pos:position pos:line="13" pos:column="34"/></literal></expr>;<pos:position pos:line="13" pos:column="35"/></return></block></then></if>
		<expr_stmt><expr><name pos:line="14" pos:column="17">ok<pos:position pos:line="14" pos:column="19"/></name> <operator pos:line="14" pos:column="20">=<pos:position pos:line="14" pos:column="21"/></operator> <call><name pos:line="14" pos:column="22">write<pos:position pos:line="14" pos:column="27"/></name><argument_list pos:line="14" pos:column="27">(<argument><expr><name pos:line="14" pos:column="28">fd<pos:position pos:line="14" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="32">lnk<pos:position pos:line="14" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="37">len<pos:position pos:line="14" pos:column="40"/></name></expr></argument>)<pos:position pos:line="14" pos:column="41"/></argument_list></call> <operator pos:line="14" pos:column="42">==<pos:position pos:line="14" pos:column="44"/></operator> <name pos:line="14" pos:column="45">len<pos:position pos:line="14" pos:column="48"/></name></expr>;<pos:position pos:line="14" pos:column="49"/></expr_stmt>
		<if pos:line="15" pos:column="17">if <condition pos:line="15" pos:column="20">(<expr><call><name pos:line="15" pos:column="21">close<pos:position pos:line="15" pos:column="26"/></name><argument_list pos:line="15" pos:column="26">(<argument><expr><name pos:line="15" pos:column="27">fd<pos:position pos:line="15" pos:column="29"/></name></expr></argument>)<pos:position pos:line="15" pos:column="30"/></argument_list></call> <operator pos:line="15" pos:column="31">&lt;<pos:position pos:line="15" pos:column="35"/></operator> <literal type="number" pos:line="15" pos:column="33">0<pos:position pos:line="15" pos:column="34"/></literal></expr>)<pos:position pos:line="15" pos:column="35"/></condition><then pos:line="15" pos:column="35">
			<block type="pseudo"><expr_stmt><expr><name pos:line="16" pos:column="25">ok<pos:position pos:line="16" pos:column="27"/></name> <operator pos:line="16" pos:column="28">=<pos:position pos:line="16" pos:column="29"/></operator> <literal type="number" pos:line="16" pos:column="30">0<pos:position pos:line="16" pos:column="31"/></literal></expr>;<pos:position pos:line="16" pos:column="32"/></expr_stmt></block></then></if>
		<return pos:line="17" pos:column="17">return <expr><ternary><condition><expr><name pos:line="17" pos:column="24">ok<pos:position pos:line="17" pos:column="26"/></name></expr> ?<pos:position pos:line="17" pos:column="28"/></condition><then pos:line="17" pos:column="28"> <expr><literal type="number" pos:line="17" pos:column="29">0<pos:position pos:line="17" pos:column="30"/></literal></expr> <pos:position pos:line="17" pos:column="31"/></then><else pos:line="17" pos:column="31">: <expr><operator pos:line="17" pos:column="33">-<pos:position pos:line="17" pos:column="34"/></operator><literal type="number" pos:line="17" pos:column="34">1<pos:position pos:line="17" pos:column="35"/></literal></expr></else></ternary></expr>;<pos:position pos:line="17" pos:column="36"/></return>
	}<pos:position pos:line="18" pos:column="10"/></block></then></if>
<cpp:endif pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">endif<pos:position pos:line="19" pos:column="7"/></cpp:directive></cpp:endif>

	<return pos:line="21" pos:column="9">return <expr><call><name pos:line="21" pos:column="16">symlink<pos:position pos:line="21" pos:column="23"/></name><argument_list pos:line="21" pos:column="23">(<argument><expr><name pos:line="21" pos:column="24">lnk<pos:position pos:line="21" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="29">fname<pos:position pos:line="21" pos:column="34"/></name></expr></argument>)<pos:position pos:line="21" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="36"/></return>
}<pos:position pos:line="22" pos:column="2"/></block></function></unit>
