<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_function_592.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">send_files<pos:position pos:line="1" pos:column="16"/></name><parameter_list pos:line="1" pos:column="16">(<parameter><decl><type><name><name pos:line="1" pos:column="17">struct<pos:position pos:line="1" pos:column="23"/></name> <name pos:line="1" pos:column="24">file_list<pos:position pos:line="1" pos:column="33"/></name></name> <modifier pos:line="1" pos:column="34">*<pos:position pos:line="1" pos:column="35"/></modifier></type><name pos:line="1" pos:column="35">flist<pos:position pos:line="1" pos:column="40"/></name></decl></parameter>,<parameter><decl><type><name pos:line="1" pos:column="41">int<pos:position pos:line="1" pos:column="44"/></name></type> <name pos:line="1" pos:column="45">f_out<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>,<parameter><decl><type><name pos:line="1" pos:column="51">int<pos:position pos:line="1" pos:column="54"/></name></type> <name pos:line="1" pos:column="55">f_in<pos:position pos:line="1" pos:column="59"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="60"/></parameter_list>
<block pos:line="2" pos:column="1">{ 
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">int<pos:position pos:line="3" pos:column="6"/></name></type> <name pos:line="3" pos:column="7">fd<pos:position pos:line="3" pos:column="9"/></name></decl>;<pos:position pos:line="3" pos:column="10"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="4" pos:column="3">struct<pos:position pos:line="4" pos:column="9"/></name> <name pos:line="4" pos:column="10">sum_struct<pos:position pos:line="4" pos:column="20"/></name></name> <modifier pos:line="4" pos:column="21">*<pos:position pos:line="4" pos:column="22"/></modifier></type><name pos:line="4" pos:column="22">s<pos:position pos:line="4" pos:column="23"/></name></decl>;<pos:position pos:line="4" pos:column="24"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="5" pos:column="3">struct<pos:position pos:line="5" pos:column="9"/></name> <name pos:line="5" pos:column="10">map_struct<pos:position pos:line="5" pos:column="20"/></name></name> <modifier pos:line="5" pos:column="21">*<pos:position pos:line="5" pos:column="22"/></modifier></type><name pos:line="5" pos:column="22">buf<pos:position pos:line="5" pos:column="25"/></name></decl>;<pos:position pos:line="5" pos:column="26"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="6" pos:column="3">struct<pos:position pos:line="6" pos:column="9"/></name> <name pos:line="6" pos:column="10">stat<pos:position pos:line="6" pos:column="14"/></name></name></type> <name pos:line="6" pos:column="15">st<pos:position pos:line="6" pos:column="17"/></name></decl>;<pos:position pos:line="6" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">char<pos:position pos:line="7" pos:column="7"/></name></type> <name><name pos:line="7" pos:column="8">fname<pos:position pos:line="7" pos:column="13"/></name><index pos:line="7" pos:column="13">[<expr><name pos:line="7" pos:column="14">MAXPATHLEN<pos:position pos:line="7" pos:column="24"/></name></expr>]<pos:position pos:line="7" pos:column="25"/></index></name></decl>;<pos:position pos:line="7" pos:column="26"/></decl_stmt>  
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">int<pos:position pos:line="8" pos:column="6"/></name></type> <name pos:line="8" pos:column="7">i<pos:position pos:line="8" pos:column="8"/></name></decl>;<pos:position pos:line="8" pos:column="9"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="9" pos:column="3">struct<pos:position pos:line="9" pos:column="9"/></name> <name pos:line="9" pos:column="10">file_struct<pos:position pos:line="9" pos:column="21"/></name></name> <modifier pos:line="9" pos:column="22">*<pos:position pos:line="9" pos:column="23"/></modifier></type><name pos:line="9" pos:column="23">file<pos:position pos:line="9" pos:column="27"/></name></decl>;<pos:position pos:line="9" pos:column="28"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">int<pos:position pos:line="10" pos:column="6"/></name></type> <name pos:line="10" pos:column="7">phase<pos:position pos:line="10" pos:column="12"/></name> <init pos:line="10" pos:column="13">= <expr><literal type="number" pos:line="10" pos:column="15">0<pos:position pos:line="10" pos:column="16"/></literal></expr></init></decl>;<pos:position pos:line="10" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">int<pos:position pos:line="11" pos:column="6"/></name></type> <name pos:line="11" pos:column="7">offset<pos:position pos:line="11" pos:column="13"/></name><init pos:line="11" pos:column="13">=<expr><literal type="number" pos:line="11" pos:column="14">0<pos:position pos:line="11" pos:column="15"/></literal></expr></init></decl>;<pos:position pos:line="11" pos:column="16"/></decl_stmt>

  <if pos:line="13" pos:column="3">if <condition pos:line="13" pos:column="6">(<expr><name pos:line="13" pos:column="7">verbose<pos:position pos:line="13" pos:column="14"/></name> <operator pos:line="13" pos:column="15">&gt;<pos:position pos:line="13" pos:column="19"/></operator> <literal type="number" pos:line="13" pos:column="17">2<pos:position pos:line="13" pos:column="18"/></literal></expr>)<pos:position pos:line="13" pos:column="19"/></condition><then pos:line="13" pos:column="19">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="14" pos:column="5">fprintf<pos:position pos:line="14" pos:column="12"/></name><argument_list pos:line="14" pos:column="12">(<argument><expr><name pos:line="14" pos:column="13">FINFO<pos:position pos:line="14" pos:column="18"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="14" pos:column="19">"send_files starting\n"<pos:position pos:line="14" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="44"/></expr_stmt></block></then></if>

  <expr_stmt><expr><call><name pos:line="16" pos:column="3">setup_nonblocking<pos:position pos:line="16" pos:column="20"/></name><argument_list pos:line="16" pos:column="20">(<argument><expr><name pos:line="16" pos:column="21">f_in<pos:position pos:line="16" pos:column="25"/></name></expr></argument>,<argument><expr><name pos:line="16" pos:column="26">f_out<pos:position pos:line="16" pos:column="31"/></name></expr></argument>)<pos:position pos:line="16" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="33"/></expr_stmt>

  <while pos:line="18" pos:column="3">while <condition pos:line="18" pos:column="9">(<expr><literal type="number" pos:line="18" pos:column="10">1<pos:position pos:line="18" pos:column="11"/></literal></expr>)<pos:position pos:line="18" pos:column="12"/></condition> <block pos:line="18" pos:column="13">{
	  <expr_stmt><expr><name pos:line="19" pos:column="11">i<pos:position pos:line="19" pos:column="12"/></name> <operator pos:line="19" pos:column="13">=<pos:position pos:line="19" pos:column="14"/></operator> <call><name pos:line="19" pos:column="15">read_int<pos:position pos:line="19" pos:column="23"/></name><argument_list pos:line="19" pos:column="23">(<argument><expr><name pos:line="19" pos:column="24">f_in<pos:position pos:line="19" pos:column="28"/></name></expr></argument>)<pos:position pos:line="19" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="30"/></expr_stmt>
	  <if pos:line="20" pos:column="11">if <condition pos:line="20" pos:column="14">(<expr><name pos:line="20" pos:column="15">i<pos:position pos:line="20" pos:column="16"/></name> <operator pos:line="20" pos:column="17">==<pos:position pos:line="20" pos:column="19"/></operator> <operator pos:line="20" pos:column="20">-<pos:position pos:line="20" pos:column="21"/></operator><literal type="number" pos:line="20" pos:column="21">1<pos:position pos:line="20" pos:column="22"/></literal></expr>)<pos:position pos:line="20" pos:column="23"/></condition><then pos:line="20" pos:column="23"> <block pos:line="20" pos:column="24">{
		  <if pos:line="21" pos:column="19">if <condition pos:line="21" pos:column="22">(<expr><name pos:line="21" pos:column="23">phase<pos:position pos:line="21" pos:column="28"/></name><operator pos:line="21" pos:column="28">==<pos:position pos:line="21" pos:column="30"/></operator><literal type="number" pos:line="21" pos:column="30">0<pos:position pos:line="21" pos:column="31"/></literal> <operator pos:line="21" pos:column="32">&amp;&amp;<pos:position pos:line="21" pos:column="42"/></operator> <name pos:line="21" pos:column="35">remote_version<pos:position pos:line="21" pos:column="49"/></name> <operator pos:line="21" pos:column="50">&gt;=<pos:position pos:line="21" pos:column="55"/></operator> <literal type="number" pos:line="21" pos:column="53">13<pos:position pos:line="21" pos:column="55"/></literal></expr>)<pos:position pos:line="21" pos:column="56"/></condition><then pos:line="21" pos:column="56"> <block pos:line="21" pos:column="57">{
			  <expr_stmt><expr><name pos:line="22" pos:column="27">phase<pos:position pos:line="22" pos:column="32"/></name><operator pos:line="22" pos:column="32">++<pos:position pos:line="22" pos:column="34"/></operator></expr>;<pos:position pos:line="22" pos:column="35"/></expr_stmt>
			  <expr_stmt><expr><name pos:line="23" pos:column="27">csum_length<pos:position pos:line="23" pos:column="38"/></name> <operator pos:line="23" pos:column="39">=<pos:position pos:line="23" pos:column="40"/></operator> <name pos:line="23" pos:column="41">SUM_LENGTH<pos:position pos:line="23" pos:column="51"/></name></expr>;<pos:position pos:line="23" pos:column="52"/></expr_stmt>
			  <expr_stmt><expr><call><name pos:line="24" pos:column="27">write_int<pos:position pos:line="24" pos:column="36"/></name><argument_list pos:line="24" pos:column="36">(<argument><expr><name pos:line="24" pos:column="37">f_out<pos:position pos:line="24" pos:column="42"/></name></expr></argument>,<argument><expr><operator pos:line="24" pos:column="43">-<pos:position pos:line="24" pos:column="44"/></operator><literal type="number" pos:line="24" pos:column="44">1<pos:position pos:line="24" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="47"/></expr_stmt>
			  <expr_stmt><expr><call><name pos:line="25" pos:column="27">write_flush<pos:position pos:line="25" pos:column="38"/></name><argument_list pos:line="25" pos:column="38">(<argument><expr><name pos:line="25" pos:column="39">f_out<pos:position pos:line="25" pos:column="44"/></name></expr></argument>)<pos:position pos:line="25" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="46"/></expr_stmt>
			  <if pos:line="26" pos:column="27">if <condition pos:line="26" pos:column="30">(<expr><name pos:line="26" pos:column="31">verbose<pos:position pos:line="26" pos:column="38"/></name> <operator pos:line="26" pos:column="39">&gt;<pos:position pos:line="26" pos:column="43"/></operator> <literal type="number" pos:line="26" pos:column="41">2<pos:position pos:line="26" pos:column="42"/></literal></expr>)<pos:position pos:line="26" pos:column="43"/></condition><then pos:line="26" pos:column="43">
				  <block type="pseudo"><expr_stmt><expr><call><name pos:line="27" pos:column="35">fprintf<pos:position pos:line="27" pos:column="42"/></name><argument_list pos:line="27" pos:column="42">(<argument><expr><name pos:line="27" pos:column="43">FINFO<pos:position pos:line="27" pos:column="48"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="27" pos:column="49">"send_files phase=%d\n"<pos:position pos:line="27" pos:column="72"/></literal></expr></argument>,<argument><expr><name pos:line="27" pos:column="73">phase<pos:position pos:line="27" pos:column="78"/></name></expr></argument>)<pos:position pos:line="27" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="80"/></expr_stmt></block></then></if>
			  <continue pos:line="28" pos:column="27">continue;<pos:position pos:line="28" pos:column="36"/></continue>
		  }<pos:position pos:line="29" pos:column="20"/></block></then></if>
		  <break pos:line="30" pos:column="19">break;<pos:position pos:line="30" pos:column="25"/></break>
	  }<pos:position pos:line="31" pos:column="12"/></block></then></if>

	  <expr_stmt><expr><name pos:line="33" pos:column="11">file<pos:position pos:line="33" pos:column="15"/></name> <operator pos:line="33" pos:column="16">=<pos:position pos:line="33" pos:column="17"/></operator> <name><name pos:line="33" pos:column="18">flist<pos:position pos:line="33" pos:column="23"/></name><operator pos:line="33" pos:column="23">-&gt;<pos:position pos:line="33" pos:column="28"/></operator><name pos:line="33" pos:column="25">files<pos:position pos:line="33" pos:column="30"/></name><index pos:line="33" pos:column="30">[<expr><name pos:line="33" pos:column="31">i<pos:position pos:line="33" pos:column="32"/></name></expr>]<pos:position pos:line="33" pos:column="33"/></index></name></expr>;<pos:position pos:line="33" pos:column="34"/></expr_stmt>

	  <expr_stmt><expr><name><name pos:line="35" pos:column="11">fname<pos:position pos:line="35" pos:column="16"/></name><index pos:line="35" pos:column="16">[<expr><literal type="number" pos:line="35" pos:column="17">0<pos:position pos:line="35" pos:column="18"/></literal></expr>]<pos:position pos:line="35" pos:column="19"/></index></name> <operator pos:line="35" pos:column="20">=<pos:position pos:line="35" pos:column="21"/></operator> <literal type="number" pos:line="35" pos:column="22">0<pos:position pos:line="35" pos:column="23"/></literal></expr>;<pos:position pos:line="35" pos:column="24"/></expr_stmt>
	  <if pos:line="36" pos:column="11">if <condition pos:line="36" pos:column="14">(<expr><name><name pos:line="36" pos:column="15">file<pos:position pos:line="36" pos:column="19"/></name><operator pos:line="36" pos:column="19">-&gt;<pos:position pos:line="36" pos:column="24"/></operator><name pos:line="36" pos:column="21">basedir<pos:position pos:line="36" pos:column="28"/></name></name></expr>)<pos:position pos:line="36" pos:column="29"/></condition><then pos:line="36" pos:column="29"> <block pos:line="36" pos:column="30">{
		  <expr_stmt><expr><call><name pos:line="37" pos:column="19">strncpy<pos:position pos:line="37" pos:column="26"/></name><argument_list pos:line="37" pos:column="26">(<argument><expr><name pos:line="37" pos:column="27">fname<pos:position pos:line="37" pos:column="32"/></name></expr></argument>,<argument><expr><name><name pos:line="37" pos:column="33">file<pos:position pos:line="37" pos:column="37"/></name><operator pos:line="37" pos:column="37">-&gt;<pos:position pos:line="37" pos:column="42"/></operator><name pos:line="37" pos:column="39">basedir<pos:position pos:line="37" pos:column="46"/></name></name></expr></argument>,<argument><expr><name pos:line="37" pos:column="47">MAXPATHLEN<pos:position pos:line="37" pos:column="57"/></name><operator pos:line="37" pos:column="57">-<pos:position pos:line="37" pos:column="58"/></operator><literal type="number" pos:line="37" pos:column="58">1<pos:position pos:line="37" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="61"/></expr_stmt>
		  <expr_stmt><expr><name><name pos:line="38" pos:column="19">fname<pos:position pos:line="38" pos:column="24"/></name><index pos:line="38" pos:column="24">[<expr><name pos:line="38" pos:column="25">MAXPATHLEN<pos:position pos:line="38" pos:column="35"/></name><operator pos:line="38" pos:column="35">-<pos:position pos:line="38" pos:column="36"/></operator><literal type="number" pos:line="38" pos:column="36">1<pos:position pos:line="38" pos:column="37"/></literal></expr>]<pos:position pos:line="38" pos:column="38"/></index></name> <operator pos:line="38" pos:column="39">=<pos:position pos:line="38" pos:column="40"/></operator> <literal type="number" pos:line="38" pos:column="41">0<pos:position pos:line="38" pos:column="42"/></literal></expr>;<pos:position pos:line="38" pos:column="43"/></expr_stmt>
		  <if pos:line="39" pos:column="19">if <condition pos:line="39" pos:column="22">(<expr><call><name pos:line="39" pos:column="23">strlen<pos:position pos:line="39" pos:column="29"/></name><argument_list pos:line="39" pos:column="29">(<argument><expr><name pos:line="39" pos:column="30">fname<pos:position pos:line="39" pos:column="35"/></name></expr></argument>)<pos:position pos:line="39" pos:column="36"/></argument_list></call> <operator pos:line="39" pos:column="37">==<pos:position pos:line="39" pos:column="39"/></operator> <name pos:line="39" pos:column="40">MAXPATHLEN<pos:position pos:line="39" pos:column="50"/></name><operator pos:line="39" pos:column="50">-<pos:position pos:line="39" pos:column="51"/></operator><literal type="number" pos:line="39" pos:column="51">1<pos:position pos:line="39" pos:column="52"/></literal></expr>)<pos:position pos:line="39" pos:column="53"/></condition><then pos:line="39" pos:column="53"> <block pos:line="39" pos:column="54">{
			  <expr_stmt><expr><name pos:line="40" pos:column="27">io_error<pos:position pos:line="40" pos:column="35"/></name> <operator pos:line="40" pos:column="36">=<pos:position pos:line="40" pos:column="37"/></operator> <literal type="number" pos:line="40" pos:column="38">1<pos:position pos:line="40" pos:column="39"/></literal></expr>;<pos:position pos:line="40" pos:column="40"/></expr_stmt>
			  <expr_stmt><expr><call><name pos:line="41" pos:column="27">fprintf<pos:position pos:line="41" pos:column="34"/></name><argument_list pos:line="41" pos:column="34">(<argument><expr><name pos:line="41" pos:column="35">FERROR<pos:position pos:line="41" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="41" pos:column="43">"send_files failed on long-named directory %s\n"<pos:position pos:line="41" pos:column="91"/></literal></expr></argument>,
				  <argument><expr><name pos:line="42" pos:column="35">fname<pos:position pos:line="42" pos:column="40"/></name></expr></argument>)<pos:position pos:line="42" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="42"/></expr_stmt>
			  <return pos:line="43" pos:column="27">return;<pos:position pos:line="43" pos:column="34"/></return>
		  }<pos:position pos:line="44" pos:column="20"/></block></then></if>
		  <expr_stmt><expr><call><name pos:line="45" pos:column="19">strcat<pos:position pos:line="45" pos:column="25"/></name><argument_list pos:line="45" pos:column="25">(<argument><expr><name pos:line="45" pos:column="26">fname<pos:position pos:line="45" pos:column="31"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="45" pos:column="32">"/"<pos:position pos:line="45" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="45" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="37"/></expr_stmt>
		  <expr_stmt><expr><name pos:line="46" pos:column="19">offset<pos:position pos:line="46" pos:column="25"/></name> <operator pos:line="46" pos:column="26">=<pos:position pos:line="46" pos:column="27"/></operator> <call><name pos:line="46" pos:column="28">strlen<pos:position pos:line="46" pos:column="34"/></name><argument_list pos:line="46" pos:column="34">(<argument><expr><name><name pos:line="46" pos:column="35">file<pos:position pos:line="46" pos:column="39"/></name><operator pos:line="46" pos:column="39">-&gt;<pos:position pos:line="46" pos:column="44"/></operator><name pos:line="46" pos:column="41">basedir<pos:position pos:line="46" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="46" pos:column="49"/></argument_list></call><operator pos:line="46" pos:column="49">+<pos:position pos:line="46" pos:column="50"/></operator><literal type="number" pos:line="46" pos:column="50">1<pos:position pos:line="46" pos:column="51"/></literal></expr>;<pos:position pos:line="46" pos:column="52"/></expr_stmt>
	  }<pos:position pos:line="47" pos:column="12"/></block></then></if>
	  <expr_stmt><expr><call><name pos:line="48" pos:column="11">strncat<pos:position pos:line="48" pos:column="18"/></name><argument_list pos:line="48" pos:column="18">(<argument><expr><name pos:line="48" pos:column="19">fname<pos:position pos:line="48" pos:column="24"/></name></expr></argument>,<argument><expr><call><name pos:line="48" pos:column="25">f_name<pos:position pos:line="48" pos:column="31"/></name><argument_list pos:line="48" pos:column="31">(<argument><expr><name pos:line="48" pos:column="32">file<pos:position pos:line="48" pos:column="36"/></name></expr></argument>)<pos:position pos:line="48" pos:column="37"/></argument_list></call></expr></argument>,<argument><expr><name pos:line="48" pos:column="38">MAXPATHLEN<pos:position pos:line="48" pos:column="48"/></name><operator pos:line="48" pos:column="48">-<pos:position pos:line="48" pos:column="49"/></operator><call><name pos:line="48" pos:column="49">strlen<pos:position pos:line="48" pos:column="55"/></name><argument_list pos:line="48" pos:column="55">(<argument><expr><name pos:line="48" pos:column="56">fname<pos:position pos:line="48" pos:column="61"/></name></expr></argument>)<pos:position pos:line="48" pos:column="62"/></argument_list></call></expr></argument>)<pos:position pos:line="48" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="64"/></expr_stmt>
	  
	  <if pos:line="50" pos:column="11">if <condition pos:line="50" pos:column="14">(<expr><name pos:line="50" pos:column="15">verbose<pos:position pos:line="50" pos:column="22"/></name> <operator pos:line="50" pos:column="23">&gt;<pos:position pos:line="50" pos:column="27"/></operator> <literal type="number" pos:line="50" pos:column="25">2<pos:position pos:line="50" pos:column="26"/></literal></expr>)<pos:position pos:line="50" pos:column="27"/></condition><then pos:line="50" pos:column="27"> 
		  <block type="pseudo"><expr_stmt><expr><call><name pos:line="51" pos:column="19">fprintf<pos:position pos:line="51" pos:column="26"/></name><argument_list pos:line="51" pos:column="26">(<argument><expr><name pos:line="51" pos:column="27">FINFO<pos:position pos:line="51" pos:column="32"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="51" pos:column="33">"send_files(%d,%s)\n"<pos:position pos:line="51" pos:column="54"/></literal></expr></argument>,<argument><expr><name pos:line="51" pos:column="55">i<pos:position pos:line="51" pos:column="56"/></name></expr></argument>,<argument><expr><name pos:line="51" pos:column="57">fname<pos:position pos:line="51" pos:column="62"/></name></expr></argument>)<pos:position pos:line="51" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="64"/></expr_stmt></block></then></if>
	  
	  <if pos:line="53" pos:column="11">if <condition pos:line="53" pos:column="14">(<expr><name pos:line="53" pos:column="15">dry_run<pos:position pos:line="53" pos:column="22"/></name></expr>)<pos:position pos:line="53" pos:column="23"/></condition><then pos:line="53" pos:column="23"> <block pos:line="53" pos:column="24">{	
		  <if pos:line="54" pos:column="19">if <condition pos:line="54" pos:column="22">(<expr><operator pos:line="54" pos:column="23">!<pos:position pos:line="54" pos:column="24"/></operator><name pos:line="54" pos:column="24">am_server<pos:position pos:line="54" pos:column="33"/></name> <operator pos:line="54" pos:column="34">&amp;&amp;<pos:position pos:line="54" pos:column="44"/></operator> <name pos:line="54" pos:column="37">verbose<pos:position pos:line="54" pos:column="44"/></name></expr>)<pos:position pos:line="54" pos:column="45"/></condition><then pos:line="54" pos:column="45">
			  <block type="pseudo"><expr_stmt><expr><call><name pos:line="55" pos:column="27">printf<pos:position pos:line="55" pos:column="33"/></name><argument_list pos:line="55" pos:column="33">(<argument><expr><literal type="string" pos:line="55" pos:column="34">"%s\n"<pos:position pos:line="55" pos:column="40"/></literal></expr></argument>,<argument><expr><name pos:line="55" pos:column="41">fname<pos:position pos:line="55" pos:column="46"/></name></expr></argument>)<pos:position pos:line="55" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="48"/></expr_stmt></block></then></if>
		  <expr_stmt><expr><call><name pos:line="56" pos:column="19">write_int<pos:position pos:line="56" pos:column="28"/></name><argument_list pos:line="56" pos:column="28">(<argument><expr><name pos:line="56" pos:column="29">f_out<pos:position pos:line="56" pos:column="34"/></name></expr></argument>,<argument><expr><name pos:line="56" pos:column="35">i<pos:position pos:line="56" pos:column="36"/></name></expr></argument>)<pos:position pos:line="56" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="38"/></expr_stmt>
		  <continue pos:line="57" pos:column="19">continue;<pos:position pos:line="57" pos:column="28"/></continue>
	  }<pos:position pos:line="58" pos:column="12"/></block></then></if>

	  <expr_stmt><expr><name pos:line="60" pos:column="11">s<pos:position pos:line="60" pos:column="12"/></name> <operator pos:line="60" pos:column="13">=<pos:position pos:line="60" pos:column="14"/></operator> <call><name pos:line="60" pos:column="15">receive_sums<pos:position pos:line="60" pos:column="27"/></name><argument_list pos:line="60" pos:column="27">(<argument><expr><name pos:line="60" pos:column="28">f_in<pos:position pos:line="60" pos:column="32"/></name></expr></argument>)<pos:position pos:line="60" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="34"/></expr_stmt>
	  <if pos:line="61" pos:column="11">if <condition pos:line="61" pos:column="14">(<expr><operator pos:line="61" pos:column="15">!<pos:position pos:line="61" pos:column="16"/></operator><name pos:line="61" pos:column="16">s<pos:position pos:line="61" pos:column="17"/></name></expr>)<pos:position pos:line="61" pos:column="18"/></condition><then pos:line="61" pos:column="18"> <block pos:line="61" pos:column="19">{
		  <expr_stmt><expr><name pos:line="62" pos:column="19">io_error<pos:position pos:line="62" pos:column="27"/></name> <operator pos:line="62" pos:column="28">=<pos:position pos:line="62" pos:column="29"/></operator> <literal type="number" pos:line="62" pos:column="30">1<pos:position pos:line="62" pos:column="31"/></literal></expr>;<pos:position pos:line="62" pos:column="32"/></expr_stmt>
		  <expr_stmt><expr><call><name pos:line="63" pos:column="19">fprintf<pos:position pos:line="63" pos:column="26"/></name><argument_list pos:line="63" pos:column="26">(<argument><expr><name pos:line="63" pos:column="27">FERROR<pos:position pos:line="63" pos:column="33"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="63" pos:column="34">"receive_sums failed\n"<pos:position pos:line="63" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="63" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="59"/></expr_stmt>
		  <return pos:line="64" pos:column="19">return;<pos:position pos:line="64" pos:column="26"/></return>
	  }<pos:position pos:line="65" pos:column="12"/></block></then></if>
	  
	  <expr_stmt><expr><name pos:line="67" pos:column="11">fd<pos:position pos:line="67" pos:column="13"/></name> <operator pos:line="67" pos:column="14">=<pos:position pos:line="67" pos:column="15"/></operator> <call><name pos:line="67" pos:column="16">open<pos:position pos:line="67" pos:column="20"/></name><argument_list pos:line="67" pos:column="20">(<argument><expr><name pos:line="67" pos:column="21">fname<pos:position pos:line="67" pos:column="26"/></name></expr></argument>,<argument><expr><name pos:line="67" pos:column="27">O_RDONLY<pos:position pos:line="67" pos:column="35"/></name></expr></argument>)<pos:position pos:line="67" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="37"/></expr_stmt>
	  <if pos:line="68" pos:column="11">if <condition pos:line="68" pos:column="14">(<expr><name pos:line="68" pos:column="15">fd<pos:position pos:line="68" pos:column="17"/></name> <operator pos:line="68" pos:column="18">==<pos:position pos:line="68" pos:column="20"/></operator> <operator pos:line="68" pos:column="21">-<pos:position pos:line="68" pos:column="22"/></operator><literal type="number" pos:line="68" pos:column="22">1<pos:position pos:line="68" pos:column="23"/></literal></expr>)<pos:position pos:line="68" pos:column="24"/></condition><then pos:line="68" pos:column="24"> <block pos:line="68" pos:column="25">{
		  <expr_stmt><expr><name pos:line="69" pos:column="19">io_error<pos:position pos:line="69" pos:column="27"/></name> <operator pos:line="69" pos:column="28">=<pos:position pos:line="69" pos:column="29"/></operator> <literal type="number" pos:line="69" pos:column="30">1<pos:position pos:line="69" pos:column="31"/></literal></expr>;<pos:position pos:line="69" pos:column="32"/></expr_stmt>
		  <expr_stmt><expr><call><name pos:line="70" pos:column="19">fprintf<pos:position pos:line="70" pos:column="26"/></name><argument_list pos:line="70" pos:column="26">(<argument><expr><name pos:line="70" pos:column="27">FERROR<pos:position pos:line="70" pos:column="33"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="70" pos:column="34">"send_files failed to open %s: %s\n"<pos:position pos:line="70" pos:column="70"/></literal></expr></argument>,
			  <argument><expr><name pos:line="71" pos:column="27">fname<pos:position pos:line="71" pos:column="32"/></name></expr></argument>,<argument><expr><call><name pos:line="71" pos:column="33">strerror<pos:position pos:line="71" pos:column="41"/></name><argument_list pos:line="71" pos:column="41">(<argument><expr><name pos:line="71" pos:column="42">errno<pos:position pos:line="71" pos:column="47"/></name></expr></argument>)<pos:position pos:line="71" pos:column="48"/></argument_list></call></expr></argument>)<pos:position pos:line="71" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="50"/></expr_stmt>
		  <expr_stmt><expr><call><name pos:line="72" pos:column="19">free_sums<pos:position pos:line="72" pos:column="28"/></name><argument_list pos:line="72" pos:column="28">(<argument><expr><name pos:line="72" pos:column="29">s<pos:position pos:line="72" pos:column="30"/></name></expr></argument>)<pos:position pos:line="72" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="32"/></expr_stmt>
		  <continue pos:line="73" pos:column="19">continue;<pos:position pos:line="73" pos:column="28"/></continue>
	  }<pos:position pos:line="74" pos:column="12"/></block></then></if>
	  
	  <comment type="block" pos:line="76" pos:column="11">/* map the local file */</comment>
	  <if pos:line="77" pos:column="11">if <condition pos:line="77" pos:column="14">(<expr><call><name pos:line="77" pos:column="15">fstat<pos:position pos:line="77" pos:column="20"/></name><argument_list pos:line="77" pos:column="20">(<argument><expr><name pos:line="77" pos:column="21">fd<pos:position pos:line="77" pos:column="23"/></name></expr></argument>,<argument><expr><operator pos:line="77" pos:column="24">&amp;<pos:position pos:line="77" pos:column="29"/></operator><name pos:line="77" pos:column="25">st<pos:position pos:line="77" pos:column="27"/></name></expr></argument>)<pos:position pos:line="77" pos:column="28"/></argument_list></call> <operator pos:line="77" pos:column="29">!=<pos:position pos:line="77" pos:column="31"/></operator> <literal type="number" pos:line="77" pos:column="32">0<pos:position pos:line="77" pos:column="33"/></literal></expr>)<pos:position pos:line="77" pos:column="34"/></condition><then pos:line="77" pos:column="34"> <block pos:line="77" pos:column="35">{
		  <expr_stmt><expr><name pos:line="78" pos:column="19">io_error<pos:position pos:line="78" pos:column="27"/></name> <operator pos:line="78" pos:column="28">=<pos:position pos:line="78" pos:column="29"/></operator> <literal type="number" pos:line="78" pos:column="30">1<pos:position pos:line="78" pos:column="31"/></literal></expr>;<pos:position pos:line="78" pos:column="32"/></expr_stmt>
		  <expr_stmt><expr><call><name pos:line="79" pos:column="19">fprintf<pos:position pos:line="79" pos:column="26"/></name><argument_list pos:line="79" pos:column="26">(<argument><expr><name pos:line="79" pos:column="27">FERROR<pos:position pos:line="79" pos:column="33"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="79" pos:column="34">"fstat failed : %s\n"<pos:position pos:line="79" pos:column="55"/></literal></expr></argument>,<argument><expr><call><name pos:line="79" pos:column="56">strerror<pos:position pos:line="79" pos:column="64"/></name><argument_list pos:line="79" pos:column="64">(<argument><expr><name pos:line="79" pos:column="65">errno<pos:position pos:line="79" pos:column="70"/></name></expr></argument>)<pos:position pos:line="79" pos:column="71"/></argument_list></call></expr></argument>)<pos:position pos:line="79" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="73"/></expr_stmt>
		  <expr_stmt><expr><call><name pos:line="80" pos:column="19">free_sums<pos:position pos:line="80" pos:column="28"/></name><argument_list pos:line="80" pos:column="28">(<argument><expr><name pos:line="80" pos:column="29">s<pos:position pos:line="80" pos:column="30"/></name></expr></argument>)<pos:position pos:line="80" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="32"/></expr_stmt>
		  <expr_stmt><expr><call><name pos:line="81" pos:column="19">close<pos:position pos:line="81" pos:column="24"/></name><argument_list pos:line="81" pos:column="24">(<argument><expr><name pos:line="81" pos:column="25">fd<pos:position pos:line="81" pos:column="27"/></name></expr></argument>)<pos:position pos:line="81" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="29"/></expr_stmt>
		  <return pos:line="82" pos:column="19">return;<pos:position pos:line="82" pos:column="26"/></return>
	  }<pos:position pos:line="83" pos:column="12"/></block></then></if>
	  
	  <if pos:line="85" pos:column="11">if <condition pos:line="85" pos:column="14">(<expr><name><name pos:line="85" pos:column="15">st<pos:position pos:line="85" pos:column="17"/></name><operator pos:line="85" pos:column="17">.<pos:position pos:line="85" pos:column="18"/></operator><name pos:line="85" pos:column="18">st_size<pos:position pos:line="85" pos:column="25"/></name></name> <operator pos:line="85" pos:column="26">&gt;<pos:position pos:line="85" pos:column="30"/></operator> <literal type="number" pos:line="85" pos:column="28">0<pos:position pos:line="85" pos:column="29"/></literal></expr>)<pos:position pos:line="85" pos:column="30"/></condition><then pos:line="85" pos:column="30"> <block pos:line="85" pos:column="31">{
		  <expr_stmt><expr><name pos:line="86" pos:column="19">buf<pos:position pos:line="86" pos:column="22"/></name> <operator pos:line="86" pos:column="23">=<pos:position pos:line="86" pos:column="24"/></operator> <call><name pos:line="86" pos:column="25">map_file<pos:position pos:line="86" pos:column="33"/></name><argument_list pos:line="86" pos:column="33">(<argument><expr><name pos:line="86" pos:column="34">fd<pos:position pos:line="86" pos:column="36"/></name></expr></argument>,<argument><expr><name><name pos:line="86" pos:column="37">st<pos:position pos:line="86" pos:column="39"/></name><operator pos:line="86" pos:column="39">.<pos:position pos:line="86" pos:column="40"/></operator><name pos:line="86" pos:column="40">st_size<pos:position pos:line="86" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="86" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="49"/></expr_stmt>
	  }<pos:position pos:line="87" pos:column="12"/></block></then> <else pos:line="87" pos:column="13">else <block pos:line="87" pos:column="18">{
		  <expr_stmt><expr><name pos:line="88" pos:column="19">buf<pos:position pos:line="88" pos:column="22"/></name> <operator pos:line="88" pos:column="23">=<pos:position pos:line="88" pos:column="24"/></operator> <name pos:line="88" pos:column="25">NULL<pos:position pos:line="88" pos:column="29"/></name></expr>;<pos:position pos:line="88" pos:column="30"/></expr_stmt>
	  }<pos:position pos:line="89" pos:column="12"/></block></else></if>
	  
	  <if pos:line="91" pos:column="11">if <condition pos:line="91" pos:column="14">(<expr><name pos:line="91" pos:column="15">verbose<pos:position pos:line="91" pos:column="22"/></name> <operator pos:line="91" pos:column="23">&gt;<pos:position pos:line="91" pos:column="27"/></operator> <literal type="number" pos:line="91" pos:column="25">2<pos:position pos:line="91" pos:column="26"/></literal></expr>)<pos:position pos:line="91" pos:column="27"/></condition><then pos:line="91" pos:column="27">
		  <block type="pseudo"><expr_stmt><expr><call><name pos:line="92" pos:column="19">fprintf<pos:position pos:line="92" pos:column="26"/></name><argument_list pos:line="92" pos:column="26">(<argument><expr><name pos:line="92" pos:column="27">FINFO<pos:position pos:line="92" pos:column="32"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="92" pos:column="33">"send_files mapped %s of size %d\n"<pos:position pos:line="92" pos:column="68"/></literal></expr></argument>,
			  <argument><expr><name pos:line="93" pos:column="27">fname<pos:position pos:line="93" pos:column="32"/></name></expr></argument>,<argument><expr><operator pos:line="93" pos:column="33">(<pos:position pos:line="93" pos:column="34"/></operator><name pos:line="93" pos:column="34">int<pos:position pos:line="93" pos:column="37"/></name><operator pos:line="93" pos:column="37">)<pos:position pos:line="93" pos:column="38"/></operator><name><name pos:line="93" pos:column="38">st<pos:position pos:line="93" pos:column="40"/></name><operator pos:line="93" pos:column="40">.<pos:position pos:line="93" pos:column="41"/></operator><name pos:line="93" pos:column="41">st_size<pos:position pos:line="93" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="93" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="50"/></expr_stmt></block></then></if>
	  
	  <expr_stmt><expr><call><name pos:line="95" pos:column="11">write_int<pos:position pos:line="95" pos:column="20"/></name><argument_list pos:line="95" pos:column="20">(<argument><expr><name pos:line="95" pos:column="21">f_out<pos:position pos:line="95" pos:column="26"/></name></expr></argument>,<argument><expr><name pos:line="95" pos:column="27">i<pos:position pos:line="95" pos:column="28"/></name></expr></argument>)<pos:position pos:line="95" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="30"/></expr_stmt>
	  
	  <expr_stmt><expr><call><name pos:line="97" pos:column="11">write_int<pos:position pos:line="97" pos:column="20"/></name><argument_list pos:line="97" pos:column="20">(<argument><expr><name pos:line="97" pos:column="21">f_out<pos:position pos:line="97" pos:column="26"/></name></expr></argument>,<argument><expr><name><name pos:line="97" pos:column="27">s<pos:position pos:line="97" pos:column="28"/></name><operator pos:line="97" pos:column="28">-&gt;<pos:position pos:line="97" pos:column="33"/></operator><name pos:line="97" pos:column="30">count<pos:position pos:line="97" pos:column="35"/></name></name></expr></argument>)<pos:position pos:line="97" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="37"/></expr_stmt>
	  <expr_stmt><expr><call><name pos:line="98" pos:column="11">write_int<pos:position pos:line="98" pos:column="20"/></name><argument_list pos:line="98" pos:column="20">(<argument><expr><name pos:line="98" pos:column="21">f_out<pos:position pos:line="98" pos:column="26"/></name></expr></argument>,<argument><expr><name><name pos:line="98" pos:column="27">s<pos:position pos:line="98" pos:column="28"/></name><operator pos:line="98" pos:column="28">-&gt;<pos:position pos:line="98" pos:column="33"/></operator><name pos:line="98" pos:column="30">n<pos:position pos:line="98" pos:column="31"/></name></name></expr></argument>)<pos:position pos:line="98" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="33"/></expr_stmt>
	  <expr_stmt><expr><call><name pos:line="99" pos:column="11">write_int<pos:position pos:line="99" pos:column="20"/></name><argument_list pos:line="99" pos:column="20">(<argument><expr><name pos:line="99" pos:column="21">f_out<pos:position pos:line="99" pos:column="26"/></name></expr></argument>,<argument><expr><name><name pos:line="99" pos:column="27">s<pos:position pos:line="99" pos:column="28"/></name><operator pos:line="99" pos:column="28">-&gt;<pos:position pos:line="99" pos:column="33"/></operator><name pos:line="99" pos:column="30">remainder<pos:position pos:line="99" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="99" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="99" pos:column="41"/></expr_stmt>
	  
	  <if pos:line="101" pos:column="11">if <condition pos:line="101" pos:column="14">(<expr><name pos:line="101" pos:column="15">verbose<pos:position pos:line="101" pos:column="22"/></name> <operator pos:line="101" pos:column="23">&gt;<pos:position pos:line="101" pos:column="27"/></operator> <literal type="number" pos:line="101" pos:column="25">2<pos:position pos:line="101" pos:column="26"/></literal></expr>)<pos:position pos:line="101" pos:column="27"/></condition><then pos:line="101" pos:column="27">
		  <block type="pseudo"><expr_stmt><expr><call><name pos:line="102" pos:column="19">fprintf<pos:position pos:line="102" pos:column="26"/></name><argument_list pos:line="102" pos:column="26">(<argument><expr><name pos:line="102" pos:column="27">FINFO<pos:position pos:line="102" pos:column="32"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="102" pos:column="33">"calling match_sums %s\n"<pos:position pos:line="102" pos:column="58"/></literal></expr></argument>,<argument><expr><name pos:line="102" pos:column="59">fname<pos:position pos:line="102" pos:column="64"/></name></expr></argument>)<pos:position pos:line="102" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="102" pos:column="66"/></expr_stmt></block></then></if>
	  
	  <if pos:line="104" pos:column="11">if <condition pos:line="104" pos:column="14">(<expr><operator pos:line="104" pos:column="15">!<pos:position pos:line="104" pos:column="16"/></operator><name pos:line="104" pos:column="16">am_server<pos:position pos:line="104" pos:column="25"/></name> <operator pos:line="104" pos:column="26">&amp;&amp;<pos:position pos:line="104" pos:column="36"/></operator> <name pos:line="104" pos:column="29">verbose<pos:position pos:line="104" pos:column="36"/></name></expr>)<pos:position pos:line="104" pos:column="37"/></condition><then pos:line="104" pos:column="37">
		  <block type="pseudo"><expr_stmt><expr><call><name pos:line="105" pos:column="19">printf<pos:position pos:line="105" pos:column="25"/></name><argument_list pos:line="105" pos:column="25">(<argument><expr><literal type="string" pos:line="105" pos:column="26">"%s\n"<pos:position pos:line="105" pos:column="32"/></literal></expr></argument>,<argument><expr><name pos:line="105" pos:column="33">fname<pos:position pos:line="105" pos:column="38"/></name><operator pos:line="105" pos:column="38">+<pos:position pos:line="105" pos:column="39"/></operator><name pos:line="105" pos:column="39">offset<pos:position pos:line="105" pos:column="45"/></name></expr></argument>)<pos:position pos:line="105" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="105" pos:column="47"/></expr_stmt></block></then></if>
	  
	  <expr_stmt><expr><call><name pos:line="107" pos:column="11">match_sums<pos:position pos:line="107" pos:column="21"/></name><argument_list pos:line="107" pos:column="21">(<argument><expr><name pos:line="107" pos:column="22">f_out<pos:position pos:line="107" pos:column="27"/></name></expr></argument>,<argument><expr><name pos:line="107" pos:column="28">s<pos:position pos:line="107" pos:column="29"/></name></expr></argument>,<argument><expr><name pos:line="107" pos:column="30">buf<pos:position pos:line="107" pos:column="33"/></name></expr></argument>,<argument><expr><name><name pos:line="107" pos:column="34">st<pos:position pos:line="107" pos:column="36"/></name><operator pos:line="107" pos:column="36">.<pos:position pos:line="107" pos:column="37"/></operator><name pos:line="107" pos:column="37">st_size<pos:position pos:line="107" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="107" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="107" pos:column="46"/></expr_stmt>
	  <expr_stmt><expr><call><name pos:line="108" pos:column="11">write_flush<pos:position pos:line="108" pos:column="22"/></name><argument_list pos:line="108" pos:column="22">(<argument><expr><name pos:line="108" pos:column="23">f_out<pos:position pos:line="108" pos:column="28"/></name></expr></argument>)<pos:position pos:line="108" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="108" pos:column="30"/></expr_stmt>
	  
	  <if pos:line="110" pos:column="11">if <condition pos:line="110" pos:column="14">(<expr><name pos:line="110" pos:column="15">buf<pos:position pos:line="110" pos:column="18"/></name></expr>)<pos:position pos:line="110" pos:column="19"/></condition><then pos:line="110" pos:column="19"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="110" pos:column="20">unmap_file<pos:position pos:line="110" pos:column="30"/></name><argument_list pos:line="110" pos:column="30">(<argument><expr><name pos:line="110" pos:column="31">buf<pos:position pos:line="110" pos:column="34"/></name></expr></argument>)<pos:position pos:line="110" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="110" pos:column="36"/></expr_stmt></block></then></if>
	  <expr_stmt><expr><call><name pos:line="111" pos:column="11">close<pos:position pos:line="111" pos:column="16"/></name><argument_list pos:line="111" pos:column="16">(<argument><expr><name pos:line="111" pos:column="17">fd<pos:position pos:line="111" pos:column="19"/></name></expr></argument>)<pos:position pos:line="111" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="111" pos:column="21"/></expr_stmt>
	  
	  <expr_stmt><expr><call><name pos:line="113" pos:column="11">free_sums<pos:position pos:line="113" pos:column="20"/></name><argument_list pos:line="113" pos:column="20">(<argument><expr><name pos:line="113" pos:column="21">s<pos:position pos:line="113" pos:column="22"/></name></expr></argument>)<pos:position pos:line="113" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="113" pos:column="24"/></expr_stmt>
	  
	  <if pos:line="115" pos:column="11">if <condition pos:line="115" pos:column="14">(<expr><name pos:line="115" pos:column="15">verbose<pos:position pos:line="115" pos:column="22"/></name> <operator pos:line="115" pos:column="23">&gt;<pos:position pos:line="115" pos:column="27"/></operator> <literal type="number" pos:line="115" pos:column="25">2<pos:position pos:line="115" pos:column="26"/></literal></expr>)<pos:position pos:line="115" pos:column="27"/></condition><then pos:line="115" pos:column="27">
		  <block type="pseudo"><expr_stmt><expr><call><name pos:line="116" pos:column="19">fprintf<pos:position pos:line="116" pos:column="26"/></name><argument_list pos:line="116" pos:column="26">(<argument><expr><name pos:line="116" pos:column="27">FINFO<pos:position pos:line="116" pos:column="32"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="116" pos:column="33">"sender finished %s\n"<pos:position pos:line="116" pos:column="55"/></literal></expr></argument>,<argument><expr><name pos:line="116" pos:column="56">fname<pos:position pos:line="116" pos:column="61"/></name></expr></argument>)<pos:position pos:line="116" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="116" pos:column="63"/></expr_stmt></block></then></if>
  }<pos:position pos:line="117" pos:column="4"/></block></while>

  <if pos:line="119" pos:column="3">if <condition pos:line="119" pos:column="6">(<expr><name pos:line="119" pos:column="7">verbose<pos:position pos:line="119" pos:column="14"/></name> <operator pos:line="119" pos:column="15">&gt;<pos:position pos:line="119" pos:column="19"/></operator> <literal type="number" pos:line="119" pos:column="17">2<pos:position pos:line="119" pos:column="18"/></literal></expr>)<pos:position pos:line="119" pos:column="19"/></condition><then pos:line="119" pos:column="19">
	  <block type="pseudo"><expr_stmt><expr><call><name pos:line="120" pos:column="11">fprintf<pos:position pos:line="120" pos:column="18"/></name><argument_list pos:line="120" pos:column="18">(<argument><expr><name pos:line="120" pos:column="19">FINFO<pos:position pos:line="120" pos:column="24"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="120" pos:column="25">"send files finished\n"<pos:position pos:line="120" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="120" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="120" pos:column="50"/></expr_stmt></block></then></if>

  <expr_stmt><expr><call><name pos:line="122" pos:column="3">match_report<pos:position pos:line="122" pos:column="15"/></name><argument_list pos:line="122" pos:column="15">()<pos:position pos:line="122" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="122" pos:column="18"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="124" pos:column="3">write_int<pos:position pos:line="124" pos:column="12"/></name><argument_list pos:line="124" pos:column="12">(<argument><expr><name pos:line="124" pos:column="13">f_out<pos:position pos:line="124" pos:column="18"/></name></expr></argument>,<argument><expr><operator pos:line="124" pos:column="19">-<pos:position pos:line="124" pos:column="20"/></operator><literal type="number" pos:line="124" pos:column="20">1<pos:position pos:line="124" pos:column="21"/></literal></expr></argument>)<pos:position pos:line="124" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="124" pos:column="23"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="125" pos:column="3">write_flush<pos:position pos:line="125" pos:column="14"/></name><argument_list pos:line="125" pos:column="14">(<argument><expr><name pos:line="125" pos:column="15">f_out<pos:position pos:line="125" pos:column="20"/></name></expr></argument>)<pos:position pos:line="125" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="125" pos:column="22"/></expr_stmt>
}<pos:position pos:line="126" pos:column="2"/></block></function></unit>
