<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_155_rsync-2.6.0.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">socketpair_tcp<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><name pos:line="1" pos:column="27">int<pos:position pos:line="1" pos:column="30"/></name></type> <name><name pos:line="1" pos:column="31">fd<pos:position pos:line="1" pos:column="33"/></name><index pos:line="1" pos:column="33">[<expr><literal type="number" pos:line="1" pos:column="34">2<pos:position pos:line="1" pos:column="35"/></literal></expr>]<pos:position pos:line="1" pos:column="36"/></index></name></decl></parameter>)<pos:position pos:line="1" pos:column="37"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">listener<pos:position pos:line="3" pos:column="21"/></name></decl>;<pos:position pos:line="3" pos:column="22"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">sockaddr_in<pos:position pos:line="4" pos:column="27"/></name></name></type> <name pos:line="4" pos:column="28">sock<pos:position pos:line="4" pos:column="32"/></name></decl>;<pos:position pos:line="4" pos:column="33"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">sockaddr_in<pos:position pos:line="5" pos:column="27"/></name></name></type> <name pos:line="5" pos:column="28">sock2<pos:position pos:line="5" pos:column="33"/></name></decl>;<pos:position pos:line="5" pos:column="34"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">socklen_t<pos:position pos:line="6" pos:column="18"/></name></type> <name pos:line="6" pos:column="19">socklen<pos:position pos:line="6" pos:column="26"/></name> <init pos:line="6" pos:column="27">= <expr><sizeof pos:line="6" pos:column="29">sizeof<argument_list pos:line="6" pos:column="35">(<argument><expr><name pos:line="6" pos:column="36">sock<pos:position pos:line="6" pos:column="40"/></name></expr></argument>)<pos:position pos:line="6" pos:column="41"/></argument_list></sizeof></expr></init></decl>;<pos:position pos:line="6" pos:column="42"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">int<pos:position pos:line="7" pos:column="12"/></name></type> <name pos:line="7" pos:column="13">connect_done<pos:position pos:line="7" pos:column="25"/></name> <init pos:line="7" pos:column="26">= <expr><literal type="number" pos:line="7" pos:column="28">0<pos:position pos:line="7" pos:column="29"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="30"/></decl_stmt>
	
	<expr_stmt><expr><name><name pos:line="9" pos:column="9">fd<pos:position pos:line="9" pos:column="11"/></name><index pos:line="9" pos:column="11">[<expr><literal type="number" pos:line="9" pos:column="12">0<pos:position pos:line="9" pos:column="13"/></literal></expr>]<pos:position pos:line="9" pos:column="14"/></index></name> <operator pos:line="9" pos:column="15">=<pos:position pos:line="9" pos:column="16"/></operator> <name><name pos:line="9" pos:column="17">fd<pos:position pos:line="9" pos:column="19"/></name><index pos:line="9" pos:column="19">[<expr><literal type="number" pos:line="9" pos:column="20">1<pos:position pos:line="9" pos:column="21"/></literal></expr>]<pos:position pos:line="9" pos:column="22"/></index></name> <operator pos:line="9" pos:column="23">=<pos:position pos:line="9" pos:column="24"/></operator> <name pos:line="9" pos:column="25">listener<pos:position pos:line="9" pos:column="33"/></name> <operator pos:line="9" pos:column="34">=<pos:position pos:line="9" pos:column="35"/></operator> <operator pos:line="9" pos:column="36">-<pos:position pos:line="9" pos:column="37"/></operator><literal type="number" pos:line="9" pos:column="37">1<pos:position pos:line="9" pos:column="38"/></literal></expr>;<pos:position pos:line="9" pos:column="39"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="11" pos:column="9">memset<pos:position pos:line="11" pos:column="15"/></name><argument_list pos:line="11" pos:column="15">(<argument><expr><operator pos:line="11" pos:column="16">&amp;<pos:position pos:line="11" pos:column="21"/></operator><name pos:line="11" pos:column="17">sock<pos:position pos:line="11" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="11" pos:column="23">0<pos:position pos:line="11" pos:column="24"/></literal></expr></argument>, <argument><expr><sizeof pos:line="11" pos:column="26">sizeof<argument_list pos:line="11" pos:column="32">(<argument><expr><name pos:line="11" pos:column="33">sock<pos:position pos:line="11" pos:column="37"/></name></expr></argument>)<pos:position pos:line="11" pos:column="38"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="11" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="40"/></expr_stmt>
	
	<if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><operator pos:line="13" pos:column="13">(<pos:position pos:line="13" pos:column="14"/></operator><name pos:line="13" pos:column="14">listener<pos:position pos:line="13" pos:column="22"/></name> <operator pos:line="13" pos:column="23">=<pos:position pos:line="13" pos:column="24"/></operator> <call><name pos:line="13" pos:column="25">socket<pos:position pos:line="13" pos:column="31"/></name><argument_list pos:line="13" pos:column="31">(<argument><expr><name pos:line="13" pos:column="32">PF_INET<pos:position pos:line="13" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="41">SOCK_STREAM<pos:position pos:line="13" pos:column="52"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="13" pos:column="54">0<pos:position pos:line="13" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="56"/></argument_list></call><operator pos:line="13" pos:column="56">)<pos:position pos:line="13" pos:column="57"/></operator> <operator pos:line="13" pos:column="58">==<pos:position pos:line="13" pos:column="60"/></operator> <operator pos:line="13" pos:column="61">-<pos:position pos:line="13" pos:column="62"/></operator><literal type="number" pos:line="13" pos:column="62">1<pos:position pos:line="13" pos:column="63"/></literal></expr>)<pos:position pos:line="13" pos:column="64"/></condition><then pos:line="13" pos:column="64"> <block type="pseudo"><goto pos:line="13" pos:column="65">goto <name pos:line="13" pos:column="70">failed<pos:position pos:line="13" pos:column="76"/></name>;<pos:position pos:line="13" pos:column="77"/></goto></block></then></if>

        <expr_stmt><expr><call><name pos:line="15" pos:column="9">memset<pos:position pos:line="15" pos:column="15"/></name><argument_list pos:line="15" pos:column="15">(<argument><expr><operator pos:line="15" pos:column="16">&amp;<pos:position pos:line="15" pos:column="21"/></operator><name pos:line="15" pos:column="17">sock2<pos:position pos:line="15" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="15" pos:column="24">0<pos:position pos:line="15" pos:column="25"/></literal></expr></argument>, <argument><expr><sizeof pos:line="15" pos:column="27">sizeof<argument_list pos:line="15" pos:column="33">(<argument><expr><name pos:line="15" pos:column="34">sock2<pos:position pos:line="15" pos:column="39"/></name></expr></argument>)<pos:position pos:line="15" pos:column="40"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="15" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="42"/></expr_stmt>
<cpp:ifdef pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">ifdef<pos:position pos:line="16" pos:column="7"/></cpp:directive> <name pos:line="16" pos:column="8">HAVE_SOCKADDR_LEN<pos:position pos:line="16" pos:column="25"/></name></cpp:ifdef>
        <expr_stmt><expr><name><name pos:line="17" pos:column="9">sock2<pos:position pos:line="17" pos:column="14"/></name><operator pos:line="17" pos:column="14">.<pos:position pos:line="17" pos:column="15"/></operator><name pos:line="17" pos:column="15">sin_len<pos:position pos:line="17" pos:column="22"/></name></name> <operator pos:line="17" pos:column="23">=<pos:position pos:line="17" pos:column="24"/></operator> <sizeof pos:line="17" pos:column="25">sizeof<argument_list pos:line="17" pos:column="31">(<argument><expr><name pos:line="17" pos:column="32">sock2<pos:position pos:line="17" pos:column="37"/></name></expr></argument>)<pos:position pos:line="17" pos:column="38"/></argument_list></sizeof></expr>;<pos:position pos:line="17" pos:column="39"/></expr_stmt>
<cpp:endif pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">endif<pos:position pos:line="18" pos:column="7"/></cpp:directive></cpp:endif>
        <expr_stmt><expr><name><name pos:line="19" pos:column="9">sock2<pos:position pos:line="19" pos:column="14"/></name><operator pos:line="19" pos:column="14">.<pos:position pos:line="19" pos:column="15"/></operator><name pos:line="19" pos:column="15">sin_family<pos:position pos:line="19" pos:column="25"/></name></name> <operator pos:line="19" pos:column="26">=<pos:position pos:line="19" pos:column="27"/></operator> <name pos:line="19" pos:column="28">PF_INET<pos:position pos:line="19" pos:column="35"/></name></expr>;<pos:position pos:line="19" pos:column="36"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="21" pos:column="9">bind<pos:position pos:line="21" pos:column="13"/></name><argument_list pos:line="21" pos:column="13">(<argument><expr><name pos:line="21" pos:column="14">listener<pos:position pos:line="21" pos:column="22"/></name></expr></argument>, <argument><expr><operator pos:line="21" pos:column="24">(<pos:position pos:line="21" pos:column="25"/></operator>struct <name pos:line="21" pos:column="32">sockaddr<pos:position pos:line="21" pos:column="40"/></name> <operator pos:line="21" pos:column="41">*<pos:position pos:line="21" pos:column="42"/></operator><operator pos:line="21" pos:column="42">)<pos:position pos:line="21" pos:column="43"/></operator><operator pos:line="21" pos:column="43">&amp;<pos:position pos:line="21" pos:column="48"/></operator><name pos:line="21" pos:column="44">sock2<pos:position pos:line="21" pos:column="49"/></name></expr></argument>, <argument><expr><sizeof pos:line="21" pos:column="51">sizeof<argument_list pos:line="21" pos:column="57">(<argument><expr><name pos:line="21" pos:column="58">sock2<pos:position pos:line="21" pos:column="63"/></name></expr></argument>)<pos:position pos:line="21" pos:column="64"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="21" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="66"/></expr_stmt>

	<if pos:line="23" pos:column="9">if <condition pos:line="23" pos:column="12">(<expr><call><name pos:line="23" pos:column="13">listen<pos:position pos:line="23" pos:column="19"/></name><argument_list pos:line="23" pos:column="19">(<argument><expr><name pos:line="23" pos:column="20">listener<pos:position pos:line="23" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="23" pos:column="30">1<pos:position pos:line="23" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="32"/></argument_list></call> <operator pos:line="23" pos:column="33">!=<pos:position pos:line="23" pos:column="35"/></operator> <literal type="number" pos:line="23" pos:column="36">0<pos:position pos:line="23" pos:column="37"/></literal></expr>)<pos:position pos:line="23" pos:column="38"/></condition><then pos:line="23" pos:column="38"> <block type="pseudo"><goto pos:line="23" pos:column="39">goto <name pos:line="23" pos:column="44">failed<pos:position pos:line="23" pos:column="50"/></name>;<pos:position pos:line="23" pos:column="51"/></goto></block></then></if>

	<if pos:line="25" pos:column="9">if <condition pos:line="25" pos:column="12">(<expr><call><name pos:line="25" pos:column="13">getsockname<pos:position pos:line="25" pos:column="24"/></name><argument_list pos:line="25" pos:column="24">(<argument><expr><name pos:line="25" pos:column="25">listener<pos:position pos:line="25" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="25" pos:column="35">(<pos:position pos:line="25" pos:column="36"/></operator>struct <name pos:line="25" pos:column="43">sockaddr<pos:position pos:line="25" pos:column="51"/></name> <operator pos:line="25" pos:column="52">*<pos:position pos:line="25" pos:column="53"/></operator><operator pos:line="25" pos:column="53">)<pos:position pos:line="25" pos:column="54"/></operator><operator pos:line="25" pos:column="54">&amp;<pos:position pos:line="25" pos:column="59"/></operator><name pos:line="25" pos:column="55">sock<pos:position pos:line="25" pos:column="59"/></name></expr></argument>, <argument><expr><operator pos:line="25" pos:column="61">&amp;<pos:position pos:line="25" pos:column="66"/></operator><name pos:line="25" pos:column="62">socklen<pos:position pos:line="25" pos:column="69"/></name></expr></argument>)<pos:position pos:line="25" pos:column="70"/></argument_list></call> <operator pos:line="25" pos:column="71">!=<pos:position pos:line="25" pos:column="73"/></operator> <literal type="number" pos:line="25" pos:column="74">0<pos:position pos:line="25" pos:column="75"/></literal></expr>)<pos:position pos:line="25" pos:column="76"/></condition><then pos:line="25" pos:column="76"> <block type="pseudo"><goto pos:line="25" pos:column="77">goto <name pos:line="25" pos:column="82">failed<pos:position pos:line="25" pos:column="88"/></name>;<pos:position pos:line="25" pos:column="89"/></goto></block></then></if>

	<if pos:line="27" pos:column="9">if <condition pos:line="27" pos:column="12">(<expr><operator pos:line="27" pos:column="13">(<pos:position pos:line="27" pos:column="14"/></operator><name><name pos:line="27" pos:column="14">fd<pos:position pos:line="27" pos:column="16"/></name><index pos:line="27" pos:column="16">[<expr><literal type="number" pos:line="27" pos:column="17">1<pos:position pos:line="27" pos:column="18"/></literal></expr>]<pos:position pos:line="27" pos:column="19"/></index></name> <operator pos:line="27" pos:column="20">=<pos:position pos:line="27" pos:column="21"/></operator> <call><name pos:line="27" pos:column="22">socket<pos:position pos:line="27" pos:column="28"/></name><argument_list pos:line="27" pos:column="28">(<argument><expr><name pos:line="27" pos:column="29">PF_INET<pos:position pos:line="27" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="38">SOCK_STREAM<pos:position pos:line="27" pos:column="49"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="27" pos:column="51">0<pos:position pos:line="27" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="53"/></argument_list></call><operator pos:line="27" pos:column="53">)<pos:position pos:line="27" pos:column="54"/></operator> <operator pos:line="27" pos:column="55">==<pos:position pos:line="27" pos:column="57"/></operator> <operator pos:line="27" pos:column="58">-<pos:position pos:line="27" pos:column="59"/></operator><literal type="number" pos:line="27" pos:column="59">1<pos:position pos:line="27" pos:column="60"/></literal></expr>)<pos:position pos:line="27" pos:column="61"/></condition><then pos:line="27" pos:column="61"> <block type="pseudo"><goto pos:line="27" pos:column="62">goto <name pos:line="27" pos:column="67">failed<pos:position pos:line="27" pos:column="73"/></name>;<pos:position pos:line="27" pos:column="74"/></goto></block></then></if>

	<expr_stmt><expr><call><name pos:line="29" pos:column="9">set_nonblocking<pos:position pos:line="29" pos:column="24"/></name><argument_list pos:line="29" pos:column="24">(<argument><expr><name><name pos:line="29" pos:column="25">fd<pos:position pos:line="29" pos:column="27"/></name><index pos:line="29" pos:column="27">[<expr><literal type="number" pos:line="29" pos:column="28">1<pos:position pos:line="29" pos:column="29"/></literal></expr>]<pos:position pos:line="29" pos:column="30"/></index></name></expr></argument>)<pos:position pos:line="29" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="32"/></expr_stmt>

	<expr_stmt><expr><name><name pos:line="31" pos:column="9">sock<pos:position pos:line="31" pos:column="13"/></name><operator pos:line="31" pos:column="13">.<pos:position pos:line="31" pos:column="14"/></operator><name pos:line="31" pos:column="14">sin_addr<pos:position pos:line="31" pos:column="22"/></name><operator pos:line="31" pos:column="22">.<pos:position pos:line="31" pos:column="23"/></operator><name pos:line="31" pos:column="23">s_addr<pos:position pos:line="31" pos:column="29"/></name></name> <operator pos:line="31" pos:column="30">=<pos:position pos:line="31" pos:column="31"/></operator> <call><name pos:line="31" pos:column="32">htonl<pos:position pos:line="31" pos:column="37"/></name><argument_list pos:line="31" pos:column="37">(<argument><expr><name pos:line="31" pos:column="38">INADDR_LOOPBACK<pos:position pos:line="31" pos:column="53"/></name></expr></argument>)<pos:position pos:line="31" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="55"/></expr_stmt>

	<if pos:line="33" pos:column="9">if <condition pos:line="33" pos:column="12">(<expr><call><name pos:line="33" pos:column="13">connect<pos:position pos:line="33" pos:column="20"/></name><argument_list pos:line="33" pos:column="20">(<argument><expr><name><name pos:line="33" pos:column="21">fd<pos:position pos:line="33" pos:column="23"/></name><index pos:line="33" pos:column="23">[<expr><literal type="number" pos:line="33" pos:column="24">1<pos:position pos:line="33" pos:column="25"/></literal></expr>]<pos:position pos:line="33" pos:column="26"/></index></name></expr></argument>,<argument><expr><operator pos:line="33" pos:column="27">(<pos:position pos:line="33" pos:column="28"/></operator>struct <name pos:line="33" pos:column="35">sockaddr<pos:position pos:line="33" pos:column="43"/></name> <operator pos:line="33" pos:column="44">*<pos:position pos:line="33" pos:column="45"/></operator><operator pos:line="33" pos:column="45">)<pos:position pos:line="33" pos:column="46"/></operator><operator pos:line="33" pos:column="46">&amp;<pos:position pos:line="33" pos:column="51"/></operator><name pos:line="33" pos:column="47">sock<pos:position pos:line="33" pos:column="51"/></name></expr></argument>,<argument><expr><sizeof pos:line="33" pos:column="52">sizeof<argument_list pos:line="33" pos:column="58">(<argument><expr><name pos:line="33" pos:column="59">sock<pos:position pos:line="33" pos:column="63"/></name></expr></argument>)<pos:position pos:line="33" pos:column="64"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="33" pos:column="65"/></argument_list></call> <operator pos:line="33" pos:column="66">==<pos:position pos:line="33" pos:column="68"/></operator> <operator pos:line="33" pos:column="69">-<pos:position pos:line="33" pos:column="70"/></operator><literal type="number" pos:line="33" pos:column="70">1<pos:position pos:line="33" pos:column="71"/></literal></expr>)<pos:position pos:line="33" pos:column="72"/></condition><then pos:line="33" pos:column="72"> <block pos:line="33" pos:column="73">{
		<if pos:line="34" pos:column="17">if <condition pos:line="34" pos:column="20">(<expr><name pos:line="34" pos:column="21">errno<pos:position pos:line="34" pos:column="26"/></name> <operator pos:line="34" pos:column="27">!=<pos:position pos:line="34" pos:column="29"/></operator> <name pos:line="34" pos:column="30">EINPROGRESS<pos:position pos:line="34" pos:column="41"/></name></expr>)<pos:position pos:line="34" pos:column="42"/></condition><then pos:line="34" pos:column="42"> <block type="pseudo"><goto pos:line="34" pos:column="43">goto <name pos:line="34" pos:column="48">failed<pos:position pos:line="34" pos:column="54"/></name>;<pos:position pos:line="34" pos:column="55"/></goto></block></then></if>
	}<pos:position pos:line="35" pos:column="10"/></block></then> <else pos:line="35" pos:column="11">else <block pos:line="35" pos:column="16">{
		<expr_stmt><expr><name pos:line="36" pos:column="17">connect_done<pos:position pos:line="36" pos:column="29"/></name> <operator pos:line="36" pos:column="30">=<pos:position pos:line="36" pos:column="31"/></operator> <literal type="number" pos:line="36" pos:column="32">1<pos:position pos:line="36" pos:column="33"/></literal></expr>;<pos:position pos:line="36" pos:column="34"/></expr_stmt>
	}<pos:position pos:line="37" pos:column="10"/></block></else></if>

	<if pos:line="39" pos:column="9">if <condition pos:line="39" pos:column="12">(<expr><operator pos:line="39" pos:column="13">(<pos:position pos:line="39" pos:column="14"/></operator><name><name pos:line="39" pos:column="14">fd<pos:position pos:line="39" pos:column="16"/></name><index pos:line="39" pos:column="16">[<expr><literal type="number" pos:line="39" pos:column="17">0<pos:position pos:line="39" pos:column="18"/></literal></expr>]<pos:position pos:line="39" pos:column="19"/></index></name> <operator pos:line="39" pos:column="20">=<pos:position pos:line="39" pos:column="21"/></operator> <call><name pos:line="39" pos:column="22">accept<pos:position pos:line="39" pos:column="28"/></name><argument_list pos:line="39" pos:column="28">(<argument><expr><name pos:line="39" pos:column="29">listener<pos:position pos:line="39" pos:column="37"/></name></expr></argument>, <argument><expr><operator pos:line="39" pos:column="39">(<pos:position pos:line="39" pos:column="40"/></operator>struct <name pos:line="39" pos:column="47">sockaddr<pos:position pos:line="39" pos:column="55"/></name> <operator pos:line="39" pos:column="56">*<pos:position pos:line="39" pos:column="57"/></operator><operator pos:line="39" pos:column="57">)<pos:position pos:line="39" pos:column="58"/></operator><operator pos:line="39" pos:column="58">&amp;<pos:position pos:line="39" pos:column="63"/></operator><name pos:line="39" pos:column="59">sock<pos:position pos:line="39" pos:column="63"/></name></expr></argument>, <argument><expr><operator pos:line="39" pos:column="65">&amp;<pos:position pos:line="39" pos:column="70"/></operator><name pos:line="39" pos:column="66">socklen<pos:position pos:line="39" pos:column="73"/></name></expr></argument>)<pos:position pos:line="39" pos:column="74"/></argument_list></call><operator pos:line="39" pos:column="74">)<pos:position pos:line="39" pos:column="75"/></operator> <operator pos:line="39" pos:column="76">==<pos:position pos:line="39" pos:column="78"/></operator> <operator pos:line="39" pos:column="79">-<pos:position pos:line="39" pos:column="80"/></operator><literal type="number" pos:line="39" pos:column="80">1<pos:position pos:line="39" pos:column="81"/></literal></expr>)<pos:position pos:line="39" pos:column="82"/></condition><then pos:line="39" pos:column="82"> <block type="pseudo"><goto pos:line="39" pos:column="83">goto <name pos:line="39" pos:column="88">failed<pos:position pos:line="39" pos:column="94"/></name>;<pos:position pos:line="39" pos:column="95"/></goto></block></then></if>

	<expr_stmt><expr><call><name pos:line="41" pos:column="9">close<pos:position pos:line="41" pos:column="14"/></name><argument_list pos:line="41" pos:column="14">(<argument><expr><name pos:line="41" pos:column="15">listener<pos:position pos:line="41" pos:column="23"/></name></expr></argument>)<pos:position pos:line="41" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="25"/></expr_stmt>
	<if pos:line="42" pos:column="9">if <condition pos:line="42" pos:column="12">(<expr><name pos:line="42" pos:column="13">connect_done<pos:position pos:line="42" pos:column="25"/></name> <operator pos:line="42" pos:column="26">==<pos:position pos:line="42" pos:column="28"/></operator> <literal type="number" pos:line="42" pos:column="29">0<pos:position pos:line="42" pos:column="30"/></literal></expr>)<pos:position pos:line="42" pos:column="31"/></condition><then pos:line="42" pos:column="31"> <block pos:line="42" pos:column="32">{
		<if pos:line="43" pos:column="17">if <condition pos:line="43" pos:column="20">(<expr><call><name pos:line="43" pos:column="21">connect<pos:position pos:line="43" pos:column="28"/></name><argument_list pos:line="43" pos:column="28">(<argument><expr><name><name pos:line="43" pos:column="29">fd<pos:position pos:line="43" pos:column="31"/></name><index pos:line="43" pos:column="31">[<expr><literal type="number" pos:line="43" pos:column="32">1<pos:position pos:line="43" pos:column="33"/></literal></expr>]<pos:position pos:line="43" pos:column="34"/></index></name></expr></argument>,<argument><expr><operator pos:line="43" pos:column="35">(<pos:position pos:line="43" pos:column="36"/></operator>struct <name pos:line="43" pos:column="43">sockaddr<pos:position pos:line="43" pos:column="51"/></name> <operator pos:line="43" pos:column="52">*<pos:position pos:line="43" pos:column="53"/></operator><operator pos:line="43" pos:column="53">)<pos:position pos:line="43" pos:column="54"/></operator><operator pos:line="43" pos:column="54">&amp;<pos:position pos:line="43" pos:column="59"/></operator><name pos:line="43" pos:column="55">sock<pos:position pos:line="43" pos:column="59"/></name></expr></argument>,<argument><expr><sizeof pos:line="43" pos:column="60">sizeof<argument_list pos:line="43" pos:column="66">(<argument><expr><name pos:line="43" pos:column="67">sock<pos:position pos:line="43" pos:column="71"/></name></expr></argument>)<pos:position pos:line="43" pos:column="72"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="43" pos:column="73"/></argument_list></call> <operator pos:line="43" pos:column="74">!=<pos:position pos:line="43" pos:column="76"/></operator> <literal type="number" pos:line="43" pos:column="77">0<pos:position pos:line="43" pos:column="78"/></literal>
		    <operator pos:line="44" pos:column="21">&amp;&amp;<pos:position pos:line="44" pos:column="31"/></operator> <name pos:line="44" pos:column="24">errno<pos:position pos:line="44" pos:column="29"/></name> <operator pos:line="44" pos:column="30">!=<pos:position pos:line="44" pos:column="32"/></operator> <name pos:line="44" pos:column="33">EISCONN<pos:position pos:line="44" pos:column="40"/></name></expr>)<pos:position pos:line="44" pos:column="41"/></condition><then pos:line="44" pos:column="41"> <block type="pseudo"><goto pos:line="44" pos:column="42">goto <name pos:line="44" pos:column="47">failed<pos:position pos:line="44" pos:column="53"/></name>;<pos:position pos:line="44" pos:column="54"/></goto></block></then></if>
	}<pos:position pos:line="45" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="47" pos:column="9">set_blocking<pos:position pos:line="47" pos:column="21"/></name> <argument_list pos:line="47" pos:column="22">(<argument><expr><name><name pos:line="47" pos:column="23">fd<pos:position pos:line="47" pos:column="25"/></name><index pos:line="47" pos:column="25">[<expr><literal type="number" pos:line="47" pos:column="26">1<pos:position pos:line="47" pos:column="27"/></literal></expr>]<pos:position pos:line="47" pos:column="28"/></index></name></expr></argument>)<pos:position pos:line="47" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="30"/></expr_stmt>

	<comment type="block" pos:line="49" pos:column="9">/* all OK! */</comment>
	<return pos:line="50" pos:column="9">return <expr><literal type="number" pos:line="50" pos:column="16">0<pos:position pos:line="50" pos:column="17"/></literal></expr>;<pos:position pos:line="50" pos:column="18"/></return>

 <label><name pos:line="52" pos:column="2">failed<pos:position pos:line="52" pos:column="8"/></name>:<pos:position pos:line="52" pos:column="9"/></label>
	<if pos:line="53" pos:column="9">if <condition pos:line="53" pos:column="12">(<expr><name><name pos:line="53" pos:column="13">fd<pos:position pos:line="53" pos:column="15"/></name><index pos:line="53" pos:column="15">[<expr><literal type="number" pos:line="53" pos:column="16">0<pos:position pos:line="53" pos:column="17"/></literal></expr>]<pos:position pos:line="53" pos:column="18"/></index></name> <operator pos:line="53" pos:column="19">!=<pos:position pos:line="53" pos:column="21"/></operator> <operator pos:line="53" pos:column="22">-<pos:position pos:line="53" pos:column="23"/></operator><literal type="number" pos:line="53" pos:column="23">1<pos:position pos:line="53" pos:column="24"/></literal></expr>)<pos:position pos:line="53" pos:column="25"/></condition><then pos:line="53" pos:column="25"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="53" pos:column="26">close<pos:position pos:line="53" pos:column="31"/></name><argument_list pos:line="53" pos:column="31">(<argument><expr><name><name pos:line="53" pos:column="32">fd<pos:position pos:line="53" pos:column="34"/></name><index pos:line="53" pos:column="34">[<expr><literal type="number" pos:line="53" pos:column="35">0<pos:position pos:line="53" pos:column="36"/></literal></expr>]<pos:position pos:line="53" pos:column="37"/></index></name></expr></argument>)<pos:position pos:line="53" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="39"/></expr_stmt></block></then></if>
	<if pos:line="54" pos:column="9">if <condition pos:line="54" pos:column="12">(<expr><name><name pos:line="54" pos:column="13">fd<pos:position pos:line="54" pos:column="15"/></name><index pos:line="54" pos:column="15">[<expr><literal type="number" pos:line="54" pos:column="16">1<pos:position pos:line="54" pos:column="17"/></literal></expr>]<pos:position pos:line="54" pos:column="18"/></index></name> <operator pos:line="54" pos:column="19">!=<pos:position pos:line="54" pos:column="21"/></operator> <operator pos:line="54" pos:column="22">-<pos:position pos:line="54" pos:column="23"/></operator><literal type="number" pos:line="54" pos:column="23">1<pos:position pos:line="54" pos:column="24"/></literal></expr>)<pos:position pos:line="54" pos:column="25"/></condition><then pos:line="54" pos:column="25"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="54" pos:column="26">close<pos:position pos:line="54" pos:column="31"/></name><argument_list pos:line="54" pos:column="31">(<argument><expr><name><name pos:line="54" pos:column="32">fd<pos:position pos:line="54" pos:column="34"/></name><index pos:line="54" pos:column="34">[<expr><literal type="number" pos:line="54" pos:column="35">1<pos:position pos:line="54" pos:column="36"/></literal></expr>]<pos:position pos:line="54" pos:column="37"/></index></name></expr></argument>)<pos:position pos:line="54" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="39"/></expr_stmt></block></then></if>
	<if pos:line="55" pos:column="9">if <condition pos:line="55" pos:column="12">(<expr><name pos:line="55" pos:column="13">listener<pos:position pos:line="55" pos:column="21"/></name> <operator pos:line="55" pos:column="22">!=<pos:position pos:line="55" pos:column="24"/></operator> <operator pos:line="55" pos:column="25">-<pos:position pos:line="55" pos:column="26"/></operator><literal type="number" pos:line="55" pos:column="26">1<pos:position pos:line="55" pos:column="27"/></literal></expr>)<pos:position pos:line="55" pos:column="28"/></condition><then pos:line="55" pos:column="28"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="55" pos:column="29">close<pos:position pos:line="55" pos:column="34"/></name><argument_list pos:line="55" pos:column="34">(<argument><expr><name pos:line="55" pos:column="35">listener<pos:position pos:line="55" pos:column="43"/></name></expr></argument>)<pos:position pos:line="55" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="45"/></expr_stmt></block></then></if>
	<return pos:line="56" pos:column="9">return <expr><operator pos:line="56" pos:column="16">-<pos:position pos:line="56" pos:column="17"/></operator><literal type="number" pos:line="56" pos:column="17">1<pos:position pos:line="56" pos:column="18"/></literal></expr>;<pos:position pos:line="56" pos:column="19"/></return>
}<pos:position pos:line="57" pos:column="2"/></block></function></unit>
