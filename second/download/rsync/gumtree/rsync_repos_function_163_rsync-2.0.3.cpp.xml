<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_163_rsync-2.0.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">get_secret<pos:position pos:line="1" pos:column="22"/></name><parameter_list pos:line="1" pos:column="22">(<parameter><decl><type><name pos:line="1" pos:column="23">int<pos:position pos:line="1" pos:column="26"/></name></type> <name pos:line="1" pos:column="27">module<pos:position pos:line="1" pos:column="33"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="35">char<pos:position pos:line="1" pos:column="39"/></name> <modifier pos:line="1" pos:column="40">*<pos:position pos:line="1" pos:column="41"/></modifier></type><name pos:line="1" pos:column="41">user<pos:position pos:line="1" pos:column="45"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="47">char<pos:position pos:line="1" pos:column="51"/></name> <modifier pos:line="1" pos:column="52">*<pos:position pos:line="1" pos:column="53"/></modifier></type><name pos:line="1" pos:column="53">secret<pos:position pos:line="1" pos:column="59"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="61">int<pos:position pos:line="1" pos:column="64"/></name></type> <name pos:line="1" pos:column="65">len<pos:position pos:line="1" pos:column="68"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="69"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">char<pos:position pos:line="3" pos:column="13"/></name> <modifier pos:line="3" pos:column="14">*<pos:position pos:line="3" pos:column="15"/></modifier></type><name pos:line="3" pos:column="15">fname<pos:position pos:line="3" pos:column="20"/></name> <init pos:line="3" pos:column="21">= <expr><call><name pos:line="3" pos:column="23">lp_secrets_file<pos:position pos:line="3" pos:column="38"/></name><argument_list pos:line="3" pos:column="38">(<argument><expr><name pos:line="3" pos:column="39">module<pos:position pos:line="3" pos:column="45"/></name></expr></argument>)<pos:position pos:line="3" pos:column="46"/></argument_list></call></expr></init></decl>;<pos:position pos:line="3" pos:column="47"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">fd<pos:position pos:line="4" pos:column="15"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="17">found<pos:position pos:line="4" pos:column="22"/></name><init pos:line="4" pos:column="22">=<expr><literal type="number" pos:line="4" pos:column="23">0<pos:position pos:line="4" pos:column="24"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="25"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">char<pos:position pos:line="5" pos:column="13"/></name></type> <name><name pos:line="5" pos:column="14">line<pos:position pos:line="5" pos:column="18"/></name><index pos:line="5" pos:column="18">[<expr><literal type="number" pos:line="5" pos:column="19">1024<pos:position pos:line="5" pos:column="23"/></literal></expr>]<pos:position pos:line="5" pos:column="24"/></index></name></decl>;<pos:position pos:line="5" pos:column="25"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">char<pos:position pos:line="6" pos:column="13"/></name> <modifier pos:line="6" pos:column="14">*<pos:position pos:line="6" pos:column="15"/></modifier></type><name pos:line="6" pos:column="15">p<pos:position pos:line="6" pos:column="16"/></name></decl>, <modifier pos:line="6" pos:column="18">*<pos:position pos:line="6" pos:column="19"/></modifier><decl><type ref="prev"/><name pos:line="6" pos:column="19">pass<pos:position pos:line="6" pos:column="23"/></name></decl>;<pos:position pos:line="6" pos:column="24"/></decl_stmt>

	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><operator pos:line="8" pos:column="13">!<pos:position pos:line="8" pos:column="14"/></operator><name pos:line="8" pos:column="14">fname<pos:position pos:line="8" pos:column="19"/></name> <operator pos:line="8" pos:column="20">||<pos:position pos:line="8" pos:column="22"/></operator> <operator pos:line="8" pos:column="23">!<pos:position pos:line="8" pos:column="24"/></operator><operator pos:line="8" pos:column="24">*<pos:position pos:line="8" pos:column="25"/></operator><name pos:line="8" pos:column="25">fname<pos:position pos:line="8" pos:column="30"/></name></expr>)<pos:position pos:line="8" pos:column="31"/></condition><then pos:line="8" pos:column="31"> <block type="pseudo"><return pos:line="8" pos:column="32">return <expr><literal type="number" pos:line="8" pos:column="39">0<pos:position pos:line="8" pos:column="40"/></literal></expr>;<pos:position pos:line="8" pos:column="41"/></return></block></then></if>

	<expr_stmt><expr><name pos:line="10" pos:column="9">fd<pos:position pos:line="10" pos:column="11"/></name> <operator pos:line="10" pos:column="12">=<pos:position pos:line="10" pos:column="13"/></operator> <call><name pos:line="10" pos:column="14">open<pos:position pos:line="10" pos:column="18"/></name><argument_list pos:line="10" pos:column="18">(<argument><expr><name pos:line="10" pos:column="19">fname<pos:position pos:line="10" pos:column="24"/></name></expr></argument>,<argument><expr><name pos:line="10" pos:column="25">O_RDONLY<pos:position pos:line="10" pos:column="33"/></name></expr></argument>)<pos:position pos:line="10" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="35"/></expr_stmt>
	<if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><name pos:line="11" pos:column="13">fd<pos:position pos:line="11" pos:column="15"/></name> <operator pos:line="11" pos:column="16">==<pos:position pos:line="11" pos:column="18"/></operator> <operator pos:line="11" pos:column="19">-<pos:position pos:line="11" pos:column="20"/></operator><literal type="number" pos:line="11" pos:column="20">1<pos:position pos:line="11" pos:column="21"/></literal></expr>)<pos:position pos:line="11" pos:column="22"/></condition><then pos:line="11" pos:column="22"> <block type="pseudo"><return pos:line="11" pos:column="23">return <expr><literal type="number" pos:line="11" pos:column="30">0<pos:position pos:line="11" pos:column="31"/></literal></expr>;<pos:position pos:line="11" pos:column="32"/></return></block></then></if>

	<while pos:line="13" pos:column="9">while <condition pos:line="13" pos:column="15">(<expr><operator pos:line="13" pos:column="16">!<pos:position pos:line="13" pos:column="17"/></operator><name pos:line="13" pos:column="17">found<pos:position pos:line="13" pos:column="22"/></name></expr>)<pos:position pos:line="13" pos:column="23"/></condition> <block pos:line="13" pos:column="24">{
		<decl_stmt><decl><type><name pos:line="14" pos:column="17">int<pos:position pos:line="14" pos:column="20"/></name></type> <name pos:line="14" pos:column="21">i<pos:position pos:line="14" pos:column="22"/></name> <init pos:line="14" pos:column="23">= <expr><literal type="number" pos:line="14" pos:column="25">0<pos:position pos:line="14" pos:column="26"/></literal></expr></init></decl>;<pos:position pos:line="14" pos:column="27"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="15" pos:column="17">memset<pos:position pos:line="15" pos:column="23"/></name><argument_list pos:line="15" pos:column="23">(<argument><expr><name pos:line="15" pos:column="24">line<pos:position pos:line="15" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="15" pos:column="30">0<pos:position pos:line="15" pos:column="31"/></literal></expr></argument>, <argument><expr><sizeof pos:line="15" pos:column="33">sizeof<argument_list pos:line="15" pos:column="39">(<argument><expr><name pos:line="15" pos:column="40">line<pos:position pos:line="15" pos:column="44"/></name></expr></argument>)<pos:position pos:line="15" pos:column="45"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="15" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="47"/></expr_stmt>
		<while pos:line="16" pos:column="17">while <condition pos:line="16" pos:column="23">(<expr><name pos:line="16" pos:column="24">i<pos:position pos:line="16" pos:column="25"/></name><operator pos:line="16" pos:column="25">&lt;<pos:position pos:line="16" pos:column="29"/></operator><operator pos:line="16" pos:column="26">(<pos:position pos:line="16" pos:column="27"/></operator><sizeof pos:line="16" pos:column="27">sizeof<argument_list pos:line="16" pos:column="33">(<argument><expr><name pos:line="16" pos:column="34">line<pos:position pos:line="16" pos:column="38"/></name></expr></argument>)<pos:position pos:line="16" pos:column="39"/></argument_list></sizeof><operator pos:line="16" pos:column="39">-<pos:position pos:line="16" pos:column="40"/></operator><literal type="number" pos:line="16" pos:column="40">1<pos:position pos:line="16" pos:column="41"/></literal><operator pos:line="16" pos:column="41">)<pos:position pos:line="16" pos:column="42"/></operator></expr>)<pos:position pos:line="16" pos:column="43"/></condition> <block pos:line="16" pos:column="44">{
			<if pos:line="17" pos:column="25">if <condition pos:line="17" pos:column="28">(<expr><call><name pos:line="17" pos:column="29">read<pos:position pos:line="17" pos:column="33"/></name><argument_list pos:line="17" pos:column="33">(<argument><expr><name pos:line="17" pos:column="34">fd<pos:position pos:line="17" pos:column="36"/></name></expr></argument>, <argument><expr><operator pos:line="17" pos:column="38">&amp;<pos:position pos:line="17" pos:column="43"/></operator><name><name pos:line="17" pos:column="39">line<pos:position pos:line="17" pos:column="43"/></name><index pos:line="17" pos:column="43">[<expr><name pos:line="17" pos:column="44">i<pos:position pos:line="17" pos:column="45"/></name></expr>]<pos:position pos:line="17" pos:column="46"/></index></name></expr></argument>, <argument><expr><literal type="number" pos:line="17" pos:column="48">1<pos:position pos:line="17" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="50"/></argument_list></call> <operator pos:line="17" pos:column="51">!=<pos:position pos:line="17" pos:column="53"/></operator> <literal type="number" pos:line="17" pos:column="54">1<pos:position pos:line="17" pos:column="55"/></literal></expr>)<pos:position pos:line="17" pos:column="56"/></condition><then pos:line="17" pos:column="56"> <block pos:line="17" pos:column="57">{
				<expr_stmt><expr><call><name pos:line="18" pos:column="33">memset<pos:position pos:line="18" pos:column="39"/></name><argument_list pos:line="18" pos:column="39">(<argument><expr><name pos:line="18" pos:column="40">line<pos:position pos:line="18" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="18" pos:column="46">0<pos:position pos:line="18" pos:column="47"/></literal></expr></argument>, <argument><expr><sizeof pos:line="18" pos:column="49">sizeof<argument_list pos:line="18" pos:column="55">(<argument><expr><name pos:line="18" pos:column="56">line<pos:position pos:line="18" pos:column="60"/></name></expr></argument>)<pos:position pos:line="18" pos:column="61"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="18" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="63"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="19" pos:column="33">close<pos:position pos:line="19" pos:column="38"/></name><argument_list pos:line="19" pos:column="38">(<argument><expr><name pos:line="19" pos:column="39">fd<pos:position pos:line="19" pos:column="41"/></name></expr></argument>)<pos:position pos:line="19" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="43"/></expr_stmt>
				<return pos:line="20" pos:column="33">return <expr><literal type="number" pos:line="20" pos:column="40">0<pos:position pos:line="20" pos:column="41"/></literal></expr>;<pos:position pos:line="20" pos:column="42"/></return>
			}<pos:position pos:line="21" pos:column="26"/></block></then></if>
			<if pos:line="22" pos:column="25">if <condition pos:line="22" pos:column="28">(<expr><name><name pos:line="22" pos:column="29">line<pos:position pos:line="22" pos:column="33"/></name><index pos:line="22" pos:column="33">[<expr><name pos:line="22" pos:column="34">i<pos:position pos:line="22" pos:column="35"/></name></expr>]<pos:position pos:line="22" pos:column="36"/></index></name> <operator pos:line="22" pos:column="37">==<pos:position pos:line="22" pos:column="39"/></operator> <literal type="char" pos:line="22" pos:column="40">'\r'<pos:position pos:line="22" pos:column="44"/></literal></expr>)<pos:position pos:line="22" pos:column="45"/></condition><then pos:line="22" pos:column="45"> <block type="pseudo"><continue pos:line="22" pos:column="46">continue;<pos:position pos:line="22" pos:column="55"/></continue></block></then></if>
			<if pos:line="23" pos:column="25">if <condition pos:line="23" pos:column="28">(<expr><name><name pos:line="23" pos:column="29">line<pos:position pos:line="23" pos:column="33"/></name><index pos:line="23" pos:column="33">[<expr><name pos:line="23" pos:column="34">i<pos:position pos:line="23" pos:column="35"/></name></expr>]<pos:position pos:line="23" pos:column="36"/></index></name> <operator pos:line="23" pos:column="37">==<pos:position pos:line="23" pos:column="39"/></operator> <literal type="char" pos:line="23" pos:column="40">'\n'<pos:position pos:line="23" pos:column="44"/></literal></expr>)<pos:position pos:line="23" pos:column="45"/></condition><then pos:line="23" pos:column="45"> <block type="pseudo"><break pos:line="23" pos:column="46">break;<pos:position pos:line="23" pos:column="52"/></break></block></then></if>
			<expr_stmt><expr><name pos:line="24" pos:column="25">i<pos:position pos:line="24" pos:column="26"/></name><operator pos:line="24" pos:column="26">++<pos:position pos:line="24" pos:column="28"/></operator></expr>;<pos:position pos:line="24" pos:column="29"/></expr_stmt>
		}<pos:position pos:line="25" pos:column="18"/></block></while>
		<expr_stmt><expr><name><name pos:line="26" pos:column="17">line<pos:position pos:line="26" pos:column="21"/></name><index pos:line="26" pos:column="21">[<expr><name pos:line="26" pos:column="22">i<pos:position pos:line="26" pos:column="23"/></name></expr>]<pos:position pos:line="26" pos:column="24"/></index></name> <operator pos:line="26" pos:column="25">=<pos:position pos:line="26" pos:column="26"/></operator> <literal type="number" pos:line="26" pos:column="27">0<pos:position pos:line="26" pos:column="28"/></literal></expr>;<pos:position pos:line="26" pos:column="29"/></expr_stmt>
		<if pos:line="27" pos:column="17">if <condition pos:line="27" pos:column="20">(<expr><name><name pos:line="27" pos:column="21">line<pos:position pos:line="27" pos:column="25"/></name><index pos:line="27" pos:column="25">[<expr><literal type="number" pos:line="27" pos:column="26">0<pos:position pos:line="27" pos:column="27"/></literal></expr>]<pos:position pos:line="27" pos:column="28"/></index></name> <operator pos:line="27" pos:column="29">==<pos:position pos:line="27" pos:column="31"/></operator> <literal type="char" pos:line="27" pos:column="32">'#'<pos:position pos:line="27" pos:column="35"/></literal></expr>)<pos:position pos:line="27" pos:column="36"/></condition><then pos:line="27" pos:column="36"> <block type="pseudo"><continue pos:line="27" pos:column="37">continue;<pos:position pos:line="27" pos:column="46"/></continue></block></then></if>
		<expr_stmt><expr><name pos:line="28" pos:column="17">p<pos:position pos:line="28" pos:column="18"/></name> <operator pos:line="28" pos:column="19">=<pos:position pos:line="28" pos:column="20"/></operator> <call><name pos:line="28" pos:column="21">strchr<pos:position pos:line="28" pos:column="27"/></name><argument_list pos:line="28" pos:column="27">(<argument><expr><name pos:line="28" pos:column="28">line<pos:position pos:line="28" pos:column="32"/></name></expr></argument>,<argument><expr><literal type="char" pos:line="28" pos:column="33">':'<pos:position pos:line="28" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="38"/></expr_stmt>
		<if pos:line="29" pos:column="17">if <condition pos:line="29" pos:column="20">(<expr><operator pos:line="29" pos:column="21">!<pos:position pos:line="29" pos:column="22"/></operator><name pos:line="29" pos:column="22">p<pos:position pos:line="29" pos:column="23"/></name></expr>)<pos:position pos:line="29" pos:column="24"/></condition><then pos:line="29" pos:column="24"> <block type="pseudo"><continue pos:line="29" pos:column="25">continue;<pos:position pos:line="29" pos:column="34"/></continue></block></then></if>
		<expr_stmt><expr><operator pos:line="30" pos:column="17">*<pos:position pos:line="30" pos:column="18"/></operator><name pos:line="30" pos:column="18">p<pos:position pos:line="30" pos:column="19"/></name> <operator pos:line="30" pos:column="20">=<pos:position pos:line="30" pos:column="21"/></operator> <literal type="number" pos:line="30" pos:column="22">0<pos:position pos:line="30" pos:column="23"/></literal></expr>;<pos:position pos:line="30" pos:column="24"/></expr_stmt>
		<if pos:line="31" pos:column="17">if <condition pos:line="31" pos:column="20">(<expr><call><name pos:line="31" pos:column="21">strcmp<pos:position pos:line="31" pos:column="27"/></name><argument_list pos:line="31" pos:column="27">(<argument><expr><name pos:line="31" pos:column="28">user<pos:position pos:line="31" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="34">line<pos:position pos:line="31" pos:column="38"/></name></expr></argument>)<pos:position pos:line="31" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="31" pos:column="40"/></condition><then pos:line="31" pos:column="40"> <block type="pseudo"><continue pos:line="31" pos:column="41">continue;<pos:position pos:line="31" pos:column="50"/></continue></block></then></if>
		<expr_stmt><expr><name pos:line="32" pos:column="17">pass<pos:position pos:line="32" pos:column="21"/></name> <operator pos:line="32" pos:column="22">=<pos:position pos:line="32" pos:column="23"/></operator> <name pos:line="32" pos:column="24">p<pos:position pos:line="32" pos:column="25"/></name><operator pos:line="32" pos:column="25">+<pos:position pos:line="32" pos:column="26"/></operator><literal type="number" pos:line="32" pos:column="26">1<pos:position pos:line="32" pos:column="27"/></literal></expr>;<pos:position pos:line="32" pos:column="28"/></expr_stmt>
		<expr_stmt><expr><name pos:line="33" pos:column="17">found<pos:position pos:line="33" pos:column="22"/></name> <operator pos:line="33" pos:column="23">=<pos:position pos:line="33" pos:column="24"/></operator> <literal type="number" pos:line="33" pos:column="25">1<pos:position pos:line="33" pos:column="26"/></literal></expr>;<pos:position pos:line="33" pos:column="27"/></expr_stmt>
	}<pos:position pos:line="34" pos:column="10"/></block></while>

	<expr_stmt><expr><call><name pos:line="36" pos:column="9">close<pos:position pos:line="36" pos:column="14"/></name><argument_list pos:line="36" pos:column="14">(<argument><expr><name pos:line="36" pos:column="15">fd<pos:position pos:line="36" pos:column="17"/></name></expr></argument>)<pos:position pos:line="36" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="19"/></expr_stmt>
	<if pos:line="37" pos:column="9">if <condition pos:line="37" pos:column="12">(<expr><operator pos:line="37" pos:column="13">!<pos:position pos:line="37" pos:column="14"/></operator><name pos:line="37" pos:column="14">found<pos:position pos:line="37" pos:column="19"/></name></expr>)<pos:position pos:line="37" pos:column="20"/></condition><then pos:line="37" pos:column="20"> <block type="pseudo"><return pos:line="37" pos:column="21">return <expr><literal type="number" pos:line="37" pos:column="28">0<pos:position pos:line="37" pos:column="29"/></literal></expr>;<pos:position pos:line="37" pos:column="30"/></return></block></then></if>

	<if pos:line="39" pos:column="9">if <condition pos:line="39" pos:column="12">(<expr><call><name pos:line="39" pos:column="13">strlen<pos:position pos:line="39" pos:column="19"/></name><argument_list pos:line="39" pos:column="19">(<argument><expr><name pos:line="39" pos:column="20">pass<pos:position pos:line="39" pos:column="24"/></name></expr></argument>)<pos:position pos:line="39" pos:column="25"/></argument_list></call> <operator pos:line="39" pos:column="26">&gt;<pos:position pos:line="39" pos:column="30"/></operator> <name pos:line="39" pos:column="28">len<pos:position pos:line="39" pos:column="31"/></name><operator pos:line="39" pos:column="31">-<pos:position pos:line="39" pos:column="32"/></operator><literal type="number" pos:line="39" pos:column="32">1<pos:position pos:line="39" pos:column="33"/></literal></expr>)<pos:position pos:line="39" pos:column="34"/></condition><then pos:line="39" pos:column="34"> <block pos:line="39" pos:column="35">{
		<expr_stmt><expr><call><name pos:line="40" pos:column="17">memset<pos:position pos:line="40" pos:column="23"/></name><argument_list pos:line="40" pos:column="23">(<argument><expr><name pos:line="40" pos:column="24">line<pos:position pos:line="40" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="40" pos:column="30">0<pos:position pos:line="40" pos:column="31"/></literal></expr></argument>, <argument><expr><sizeof pos:line="40" pos:column="33">sizeof<argument_list pos:line="40" pos:column="39">(<argument><expr><name pos:line="40" pos:column="40">line<pos:position pos:line="40" pos:column="44"/></name></expr></argument>)<pos:position pos:line="40" pos:column="45"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="40" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="47"/></expr_stmt>
		<return pos:line="41" pos:column="17">return <expr><literal type="number" pos:line="41" pos:column="24">0<pos:position pos:line="41" pos:column="25"/></literal></expr>;<pos:position pos:line="41" pos:column="26"/></return>
	}<pos:position pos:line="42" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="44" pos:column="9">strcpy<pos:position pos:line="44" pos:column="15"/></name><argument_list pos:line="44" pos:column="15">(<argument><expr><name pos:line="44" pos:column="16">secret<pos:position pos:line="44" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="24">pass<pos:position pos:line="44" pos:column="28"/></name></expr></argument>)<pos:position pos:line="44" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="30"/></expr_stmt>
	<return pos:line="45" pos:column="9">return <expr><literal type="number" pos:line="45" pos:column="16">1<pos:position pos:line="45" pos:column="17"/></literal></expr>;<pos:position pos:line="45" pos:column="18"/></return>
}<pos:position pos:line="46" pos:column="2"/></block></function></unit>
