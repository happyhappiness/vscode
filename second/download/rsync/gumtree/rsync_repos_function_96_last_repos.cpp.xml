<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_96_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">parse_filter_str<pos:position pos:line="1" pos:column="22"/></name><parameter_list pos:line="1" pos:column="22">(<parameter><decl><type><name pos:line="1" pos:column="23">filter_rule_list<pos:position pos:line="1" pos:column="39"/></name> <modifier pos:line="1" pos:column="40">*<pos:position pos:line="1" pos:column="41"/></modifier></type><name pos:line="1" pos:column="41">listp<pos:position pos:line="1" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="48">const<pos:position pos:line="1" pos:column="53"/></specifier> <name pos:line="1" pos:column="54">char<pos:position pos:line="1" pos:column="58"/></name> <modifier pos:line="1" pos:column="59">*<pos:position pos:line="1" pos:column="60"/></modifier></type><name pos:line="1" pos:column="60">rulestr<pos:position pos:line="1" pos:column="67"/></name></decl></parameter>,
		     <parameter><decl><type><specifier pos:line="2" pos:column="22">const<pos:position pos:line="2" pos:column="27"/></specifier> <name pos:line="2" pos:column="28">filter_rule<pos:position pos:line="2" pos:column="39"/></name> <modifier pos:line="2" pos:column="40">*<pos:position pos:line="2" pos:column="41"/></modifier><specifier pos:line="2" pos:column="41">template<pos:position pos:line="2" pos:column="49"/></specifier></type></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="51">int<pos:position pos:line="2" pos:column="54"/></name></type> <name pos:line="2" pos:column="55">xflags<pos:position pos:line="2" pos:column="61"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="62"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">filter_rule<pos:position pos:line="4" pos:column="20"/></name> <modifier pos:line="4" pos:column="21">*<pos:position pos:line="4" pos:column="22"/></modifier></type><name pos:line="4" pos:column="22">rule<pos:position pos:line="4" pos:column="26"/></name></decl>;<pos:position pos:line="4" pos:column="27"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="5" pos:column="9">const<pos:position pos:line="5" pos:column="14"/></specifier> <name pos:line="5" pos:column="15">char<pos:position pos:line="5" pos:column="19"/></name> <modifier pos:line="5" pos:column="20">*<pos:position pos:line="5" pos:column="21"/></modifier></type><name pos:line="5" pos:column="21">pat<pos:position pos:line="5" pos:column="24"/></name></decl>;<pos:position pos:line="5" pos:column="25"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">unsigned<pos:position pos:line="6" pos:column="17"/></name> <name pos:line="6" pos:column="18">int<pos:position pos:line="6" pos:column="21"/></name></type> <name pos:line="6" pos:column="22">pat_len<pos:position pos:line="6" pos:column="29"/></name></decl>;<pos:position pos:line="6" pos:column="30"/></decl_stmt>

	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><operator pos:line="8" pos:column="13">!<pos:position pos:line="8" pos:column="14"/></operator><name pos:line="8" pos:column="14">rulestr<pos:position pos:line="8" pos:column="21"/></name></expr>)<pos:position pos:line="8" pos:column="22"/></condition><then pos:line="8" pos:column="22">
		<block type="pseudo"><return pos:line="9" pos:column="17">return;<pos:position pos:line="9" pos:column="24"/></return></block></then></if>

	<while pos:line="11" pos:column="9">while <condition pos:line="11" pos:column="15">(<expr><literal type="number" pos:line="11" pos:column="16">1<pos:position pos:line="11" pos:column="17"/></literal></expr>)<pos:position pos:line="11" pos:column="18"/></condition> <block pos:line="11" pos:column="19">{
		<decl_stmt><decl><type><name pos:line="12" pos:column="17">uint32<pos:position pos:line="12" pos:column="23"/></name></type> <name pos:line="12" pos:column="24">new_rflags<pos:position pos:line="12" pos:column="34"/></name></decl>;<pos:position pos:line="12" pos:column="35"/></decl_stmt>

		<comment type="block" pos:line="14" pos:column="17">/* Remember that the returned string is NOT '\0' terminated! */</comment>
		<if pos:line="15" pos:column="17">if <condition pos:line="15" pos:column="20">(<expr><operator pos:line="15" pos:column="21">!<pos:position pos:line="15" pos:column="22"/></operator><operator pos:line="15" pos:column="22">(<pos:position pos:line="15" pos:column="23"/></operator><name pos:line="15" pos:column="23">rule<pos:position pos:line="15" pos:column="27"/></name> <operator pos:line="15" pos:column="28">=<pos:position pos:line="15" pos:column="29"/></operator> <macro><name pos:line="15" pos:column="30">parse_rule_tok<pos:position pos:line="15" pos:column="44"/></name><argument_list pos:line="15" pos:column="44">(<argument pos:line="15" pos:column="45">&amp;rulestr<pos:position pos:line="15" pos:column="53"/></argument>, <argument pos:line="15" pos:column="55">template<pos:position pos:line="15" pos:column="63"/></argument>, <argument pos:line="15" pos:column="65">xflags<pos:position pos:line="15" pos:column="71"/></argument>, <argument pos:line="15" pos:column="73">&amp;pat<pos:position pos:line="15" pos:column="77"/></argument>, <argument pos:line="15" pos:column="79">&amp;pat_len<pos:position pos:line="15" pos:column="87"/></argument>)<pos:position pos:line="15" pos:column="88"/></argument_list></macro><operator pos:line="15" pos:column="88">)<pos:position pos:line="15" pos:column="89"/></operator></expr>)<pos:position pos:line="15" pos:column="90"/></condition><then pos:line="15" pos:column="90">
			<block type="pseudo"><break pos:line="16" pos:column="25">break;<pos:position pos:line="16" pos:column="31"/></break></block></then></if>

		<if pos:line="18" pos:column="17">if <condition pos:line="18" pos:column="20">(<expr><name pos:line="18" pos:column="21">pat_len<pos:position pos:line="18" pos:column="28"/></name> <operator pos:line="18" pos:column="29">&gt;=<pos:position pos:line="18" pos:column="34"/></operator> <name pos:line="18" pos:column="32">MAXPATHLEN<pos:position pos:line="18" pos:column="42"/></name></expr>)<pos:position pos:line="18" pos:column="43"/></condition><then pos:line="18" pos:column="43"> <block pos:line="18" pos:column="44">{
			<expr_stmt><expr><call><name pos:line="19" pos:column="25">rprintf<pos:position pos:line="19" pos:column="32"/></name><argument_list pos:line="19" pos:column="32">(<argument><expr><name pos:line="19" pos:column="33">FERROR<pos:position pos:line="19" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="41">"discarding over-long filter: %.*s\n"<pos:position pos:line="19" pos:column="78"/></literal></expr></argument>,
				<argument><expr><operator pos:line="20" pos:column="33">(<pos:position pos:line="20" pos:column="34"/></operator><name pos:line="20" pos:column="34">int<pos:position pos:line="20" pos:column="37"/></name><operator pos:line="20" pos:column="37">)<pos:position pos:line="20" pos:column="38"/></operator><name pos:line="20" pos:column="38">pat_len<pos:position pos:line="20" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="47">pat<pos:position pos:line="20" pos:column="50"/></name></expr></argument>)<pos:position pos:line="20" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="52"/></expr_stmt>
		    <label><name pos:line="21" pos:column="21">free_continue<pos:position pos:line="21" pos:column="34"/></name>:<pos:position pos:line="21" pos:column="35"/></label>
			<expr_stmt><expr><call><name pos:line="22" pos:column="25">free_filter<pos:position pos:line="22" pos:column="36"/></name><argument_list pos:line="22" pos:column="36">(<argument><expr><name pos:line="22" pos:column="37">rule<pos:position pos:line="22" pos:column="41"/></name></expr></argument>)<pos:position pos:line="22" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="43"/></expr_stmt>
			<continue pos:line="23" pos:column="25">continue;<pos:position pos:line="23" pos:column="34"/></continue>
		}<pos:position pos:line="24" pos:column="18"/></block></then></if>

		<expr_stmt><expr><name pos:line="26" pos:column="17">new_rflags<pos:position pos:line="26" pos:column="27"/></name> <operator pos:line="26" pos:column="28">=<pos:position pos:line="26" pos:column="29"/></operator> <name><name pos:line="26" pos:column="30">rule<pos:position pos:line="26" pos:column="34"/></name><operator pos:line="26" pos:column="34">-&gt;<pos:position pos:line="26" pos:column="39"/></operator><name pos:line="26" pos:column="36">rflags<pos:position pos:line="26" pos:column="42"/></name></name></expr>;<pos:position pos:line="26" pos:column="43"/></expr_stmt>
		<if pos:line="27" pos:column="17">if <condition pos:line="27" pos:column="20">(<expr><name pos:line="27" pos:column="21">new_rflags<pos:position pos:line="27" pos:column="31"/></name> <operator pos:line="27" pos:column="32">&amp;<pos:position pos:line="27" pos:column="37"/></operator> <name pos:line="27" pos:column="34">FILTRULE_CLEAR_LIST<pos:position pos:line="27" pos:column="53"/></name></expr>)<pos:position pos:line="27" pos:column="54"/></condition><then pos:line="27" pos:column="54"> <block pos:line="27" pos:column="55">{
			<if pos:line="28" pos:column="25">if <condition pos:line="28" pos:column="28">(<expr><call><name pos:line="28" pos:column="29">DEBUG_GTE<pos:position pos:line="28" pos:column="38"/></name><argument_list pos:line="28" pos:column="38">(<argument><expr><name pos:line="28" pos:column="39">FILTER<pos:position pos:line="28" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="28" pos:column="47">2<pos:position pos:line="28" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="28" pos:column="50"/></condition><then pos:line="28" pos:column="50"> <block pos:line="28" pos:column="51">{
				<expr_stmt><expr><call><name pos:line="29" pos:column="33">rprintf<pos:position pos:line="29" pos:column="40"/></name><argument_list pos:line="29" pos:column="40">(<argument><expr><name pos:line="29" pos:column="41">FINFO<pos:position pos:line="29" pos:column="46"/></name></expr></argument>,
					<argument><expr><literal type="string" pos:line="30" pos:column="41">"[%s] clearing filter list%s\n"<pos:position pos:line="30" pos:column="72"/></literal></expr></argument>,
					<argument><expr><call><name pos:line="31" pos:column="41">who_am_i<pos:position pos:line="31" pos:column="49"/></name><argument_list pos:line="31" pos:column="49">()<pos:position pos:line="31" pos:column="51"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="31" pos:column="53">listp<pos:position pos:line="31" pos:column="58"/></name><operator pos:line="31" pos:column="58">-&gt;<pos:position pos:line="31" pos:column="63"/></operator><name pos:line="31" pos:column="60">debug_type<pos:position pos:line="31" pos:column="70"/></name></name></expr></argument>)<pos:position pos:line="31" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="72"/></expr_stmt>
			}<pos:position pos:line="32" pos:column="26"/></block></then></if>
			<expr_stmt><expr><call><name pos:line="33" pos:column="25">pop_filter_list<pos:position pos:line="33" pos:column="40"/></name><argument_list pos:line="33" pos:column="40">(<argument><expr><name pos:line="33" pos:column="41">listp<pos:position pos:line="33" pos:column="46"/></name></expr></argument>)<pos:position pos:line="33" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="48"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="34" pos:column="25">listp<pos:position pos:line="34" pos:column="30"/></name><operator pos:line="34" pos:column="30">-&gt;<pos:position pos:line="34" pos:column="35"/></operator><name pos:line="34" pos:column="32">head<pos:position pos:line="34" pos:column="36"/></name></name> <operator pos:line="34" pos:column="37">=<pos:position pos:line="34" pos:column="38"/></operator> <name pos:line="34" pos:column="39">NULL<pos:position pos:line="34" pos:column="43"/></name></expr>;<pos:position pos:line="34" pos:column="44"/></expr_stmt>
			<goto pos:line="35" pos:column="25">goto <name pos:line="35" pos:column="30">free_continue<pos:position pos:line="35" pos:column="43"/></name>;<pos:position pos:line="35" pos:column="44"/></goto>
		}<pos:position pos:line="36" pos:column="18"/></block></then></if>

		<if pos:line="38" pos:column="17">if <condition pos:line="38" pos:column="20">(<expr><name pos:line="38" pos:column="21">new_rflags<pos:position pos:line="38" pos:column="31"/></name> <operator pos:line="38" pos:column="32">&amp;<pos:position pos:line="38" pos:column="37"/></operator> <name pos:line="38" pos:column="34">FILTRULE_MERGE_FILE<pos:position pos:line="38" pos:column="53"/></name></expr>)<pos:position pos:line="38" pos:column="54"/></condition><then pos:line="38" pos:column="54"> <block pos:line="38" pos:column="55">{
			<if pos:line="39" pos:column="25">if <condition pos:line="39" pos:column="28">(<expr><operator pos:line="39" pos:column="29">!<pos:position pos:line="39" pos:column="30"/></operator><name pos:line="39" pos:column="30">pat_len<pos:position pos:line="39" pos:column="37"/></name></expr>)<pos:position pos:line="39" pos:column="38"/></condition><then pos:line="39" pos:column="38"> <block pos:line="39" pos:column="39">{
				<expr_stmt><expr><name pos:line="40" pos:column="33">pat<pos:position pos:line="40" pos:column="36"/></name> <operator pos:line="40" pos:column="37">=<pos:position pos:line="40" pos:column="38"/></operator> <literal type="string" pos:line="40" pos:column="39">".cvsignore"<pos:position pos:line="40" pos:column="51"/></literal></expr>;<pos:position pos:line="40" pos:column="52"/></expr_stmt>
				<expr_stmt><expr><name pos:line="41" pos:column="33">pat_len<pos:position pos:line="41" pos:column="40"/></name> <operator pos:line="41" pos:column="41">=<pos:position pos:line="41" pos:column="42"/></operator> <literal type="number" pos:line="41" pos:column="43">10<pos:position pos:line="41" pos:column="45"/></literal></expr>;<pos:position pos:line="41" pos:column="46"/></expr_stmt>
			}<pos:position pos:line="42" pos:column="26"/></block></then></if>
			<if pos:line="43" pos:column="25">if <condition pos:line="43" pos:column="28">(<expr><name pos:line="43" pos:column="29">new_rflags<pos:position pos:line="43" pos:column="39"/></name> <operator pos:line="43" pos:column="40">&amp;<pos:position pos:line="43" pos:column="45"/></operator> <name pos:line="43" pos:column="42">FILTRULE_EXCLUDE_SELF<pos:position pos:line="43" pos:column="63"/></name></expr>)<pos:position pos:line="43" pos:column="64"/></condition><then pos:line="43" pos:column="64"> <block pos:line="43" pos:column="65">{
				<decl_stmt><decl><type><specifier pos:line="44" pos:column="33">const<pos:position pos:line="44" pos:column="38"/></specifier> <name pos:line="44" pos:column="39">char<pos:position pos:line="44" pos:column="43"/></name> <modifier pos:line="44" pos:column="44">*<pos:position pos:line="44" pos:column="45"/></modifier></type><name pos:line="44" pos:column="45">name<pos:position pos:line="44" pos:column="49"/></name></decl>;<pos:position pos:line="44" pos:column="50"/></decl_stmt>
				<decl_stmt><decl><type><name pos:line="45" pos:column="33">filter_rule<pos:position pos:line="45" pos:column="44"/></name> <modifier pos:line="45" pos:column="45">*<pos:position pos:line="45" pos:column="46"/></modifier></type><name pos:line="45" pos:column="46">excl_self<pos:position pos:line="45" pos:column="55"/></name></decl>;<pos:position pos:line="45" pos:column="56"/></decl_stmt>

				<if pos:line="47" pos:column="33">if <condition pos:line="47" pos:column="36">(<expr><operator pos:line="47" pos:column="37">!<pos:position pos:line="47" pos:column="38"/></operator><operator pos:line="47" pos:column="38">(<pos:position pos:line="47" pos:column="39"/></operator><name pos:line="47" pos:column="39">excl_self<pos:position pos:line="47" pos:column="48"/></name> <operator pos:line="47" pos:column="49">=<pos:position pos:line="47" pos:column="50"/></operator> <call><name pos:line="47" pos:column="51">new0<pos:position pos:line="47" pos:column="55"/></name><argument_list pos:line="47" pos:column="55">(<argument><expr><name pos:line="47" pos:column="56">filter_rule<pos:position pos:line="47" pos:column="67"/></name></expr></argument>)<pos:position pos:line="47" pos:column="68"/></argument_list></call><operator pos:line="47" pos:column="68">)<pos:position pos:line="47" pos:column="69"/></operator></expr>)<pos:position pos:line="47" pos:column="70"/></condition><then pos:line="47" pos:column="70">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="48" pos:column="41">out_of_memory<pos:position pos:line="48" pos:column="54"/></name><argument_list pos:line="48" pos:column="54">(<argument><expr><literal type="string" pos:line="48" pos:column="55">"parse_filter_str"<pos:position pos:line="48" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="48" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="75"/></expr_stmt></block></then></if>
				<comment type="block" pos:line="49" pos:column="33">/* Find the beginning of the basename and add an exclude for it. */</comment>
				<for pos:line="50" pos:column="33">for <control pos:line="50" pos:column="37">(<init><expr><name pos:line="50" pos:column="38">name<pos:position pos:line="50" pos:column="42"/></name> <operator pos:line="50" pos:column="43">=<pos:position pos:line="50" pos:column="44"/></operator> <name pos:line="50" pos:column="45">pat<pos:position pos:line="50" pos:column="48"/></name> <operator pos:line="50" pos:column="49">+<pos:position pos:line="50" pos:column="50"/></operator> <name pos:line="50" pos:column="51">pat_len<pos:position pos:line="50" pos:column="58"/></name></expr>;<pos:position pos:line="50" pos:column="59"/></init> <condition><expr><name pos:line="50" pos:column="60">name<pos:position pos:line="50" pos:column="64"/></name> <operator pos:line="50" pos:column="65">&gt;<pos:position pos:line="50" pos:column="69"/></operator> <name pos:line="50" pos:column="67">pat<pos:position pos:line="50" pos:column="70"/></name> <operator pos:line="50" pos:column="71">&amp;&amp;<pos:position pos:line="50" pos:column="81"/></operator> <name><name pos:line="50" pos:column="74">name<pos:position pos:line="50" pos:column="78"/></name><index pos:line="50" pos:column="78">[<expr><operator pos:line="50" pos:column="79">-<pos:position pos:line="50" pos:column="80"/></operator><literal type="number" pos:line="50" pos:column="80">1<pos:position pos:line="50" pos:column="81"/></literal></expr>]<pos:position pos:line="50" pos:column="82"/></index></name> <operator pos:line="50" pos:column="83">!=<pos:position pos:line="50" pos:column="85"/></operator> <literal type="char" pos:line="50" pos:column="86">'/'<pos:position pos:line="50" pos:column="89"/></literal></expr>;<pos:position pos:line="50" pos:column="90"/></condition> <incr><expr><name pos:line="50" pos:column="91">name<pos:position pos:line="50" pos:column="95"/></name><operator pos:line="50" pos:column="95">--<pos:position pos:line="50" pos:column="97"/></operator></expr></incr>)<pos:position pos:line="50" pos:column="98"/></control> <block pos:line="50" pos:column="99">{}<pos:position pos:line="50" pos:column="101"/></block></for>
				<expr_stmt><expr><call><name pos:line="51" pos:column="33">add_rule<pos:position pos:line="51" pos:column="41"/></name><argument_list pos:line="51" pos:column="41">(<argument><expr><name pos:line="51" pos:column="42">listp<pos:position pos:line="51" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="49">name<pos:position pos:line="51" pos:column="53"/></name></expr></argument>, <argument><expr><operator pos:line="51" pos:column="55">(<pos:position pos:line="51" pos:column="56"/></operator><name pos:line="51" pos:column="56">pat<pos:position pos:line="51" pos:column="59"/></name> <operator pos:line="51" pos:column="60">+<pos:position pos:line="51" pos:column="61"/></operator> <name pos:line="51" pos:column="62">pat_len<pos:position pos:line="51" pos:column="69"/></name><operator pos:line="51" pos:column="69">)<pos:position pos:line="51" pos:column="70"/></operator> <operator pos:line="51" pos:column="71">-<pos:position pos:line="51" pos:column="72"/></operator> <name pos:line="51" pos:column="73">name<pos:position pos:line="51" pos:column="77"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="79">excl_self<pos:position pos:line="51" pos:column="88"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="51" pos:column="90">0<pos:position pos:line="51" pos:column="91"/></literal></expr></argument>)<pos:position pos:line="51" pos:column="92"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="93"/></expr_stmt>
				<expr_stmt><expr><name><name pos:line="52" pos:column="33">rule<pos:position pos:line="52" pos:column="37"/></name><operator pos:line="52" pos:column="37">-&gt;<pos:position pos:line="52" pos:column="42"/></operator><name pos:line="52" pos:column="39">rflags<pos:position pos:line="52" pos:column="45"/></name></name> <operator pos:line="52" pos:column="46">&amp;=<pos:position pos:line="52" pos:column="52"/></operator> <operator pos:line="52" pos:column="49">~<pos:position pos:line="52" pos:column="50"/></operator><name pos:line="52" pos:column="50">FILTRULE_EXCLUDE_SELF<pos:position pos:line="52" pos:column="71"/></name></expr>;<pos:position pos:line="52" pos:column="72"/></expr_stmt>
			}<pos:position pos:line="53" pos:column="26"/></block></then></if>
			<if pos:line="54" pos:column="25">if <condition pos:line="54" pos:column="28">(<expr><name pos:line="54" pos:column="29">new_rflags<pos:position pos:line="54" pos:column="39"/></name> <operator pos:line="54" pos:column="40">&amp;<pos:position pos:line="54" pos:column="45"/></operator> <name pos:line="54" pos:column="42">FILTRULE_PERDIR_MERGE<pos:position pos:line="54" pos:column="63"/></name></expr>)<pos:position pos:line="54" pos:column="64"/></condition><then pos:line="54" pos:column="64"> <block pos:line="54" pos:column="65">{
				<if pos:line="55" pos:column="33">if <condition pos:line="55" pos:column="36">(<expr><name pos:line="55" pos:column="37">parent_dirscan<pos:position pos:line="55" pos:column="51"/></name></expr>)<pos:position pos:line="55" pos:column="52"/></condition><then pos:line="55" pos:column="52"> <block pos:line="55" pos:column="53">{
					<decl_stmt><decl><type><specifier pos:line="56" pos:column="41">const<pos:position pos:line="56" pos:column="46"/></specifier> <name pos:line="56" pos:column="47">char<pos:position pos:line="56" pos:column="51"/></name> <modifier pos:line="56" pos:column="52">*<pos:position pos:line="56" pos:column="53"/></modifier></type><name pos:line="56" pos:column="53">p<pos:position pos:line="56" pos:column="54"/></name></decl>;<pos:position pos:line="56" pos:column="55"/></decl_stmt>
					<decl_stmt><decl><type><name pos:line="57" pos:column="41">unsigned<pos:position pos:line="57" pos:column="49"/></name> <name pos:line="57" pos:column="50">int<pos:position pos:line="57" pos:column="53"/></name></type> <name pos:line="57" pos:column="54">len<pos:position pos:line="57" pos:column="57"/></name> <init pos:line="57" pos:column="58">= <expr><name pos:line="57" pos:column="60">pat_len<pos:position pos:line="57" pos:column="67"/></name></expr></init></decl>;<pos:position pos:line="57" pos:column="68"/></decl_stmt>
					<if pos:line="58" pos:column="41">if <condition pos:line="58" pos:column="44">(<expr><operator pos:line="58" pos:column="45">(<pos:position pos:line="58" pos:column="46"/></operator><name pos:line="58" pos:column="46">p<pos:position pos:line="58" pos:column="47"/></name> <operator pos:line="58" pos:column="48">=<pos:position pos:line="58" pos:column="49"/></operator> <call><name pos:line="58" pos:column="50">parse_merge_name<pos:position pos:line="58" pos:column="66"/></name><argument_list pos:line="58" pos:column="66">(<argument><expr><name pos:line="58" pos:column="67">pat<pos:position pos:line="58" pos:column="70"/></name></expr></argument>, <argument><expr><operator pos:line="58" pos:column="72">&amp;<pos:position pos:line="58" pos:column="77"/></operator><name pos:line="58" pos:column="73">len<pos:position pos:line="58" pos:column="76"/></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="78">module_dirlen<pos:position pos:line="58" pos:column="91"/></name></expr></argument>)<pos:position pos:line="58" pos:column="92"/></argument_list></call><operator pos:line="58" pos:column="92">)<pos:position pos:line="58" pos:column="93"/></operator></expr>)<pos:position pos:line="58" pos:column="94"/></condition><then pos:line="58" pos:column="94">
						<block type="pseudo"><expr_stmt><expr><call><name pos:line="59" pos:column="49">add_rule<pos:position pos:line="59" pos:column="57"/></name><argument_list pos:line="59" pos:column="57">(<argument><expr><name pos:line="59" pos:column="58">listp<pos:position pos:line="59" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="65">p<pos:position pos:line="59" pos:column="66"/></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="68">len<pos:position pos:line="59" pos:column="71"/></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="73">rule<pos:position pos:line="59" pos:column="77"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="59" pos:column="79">0<pos:position pos:line="59" pos:column="80"/></literal></expr></argument>)<pos:position pos:line="59" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="82"/></expr_stmt></block></then>
					<else pos:line="60" pos:column="41">else
						<block type="pseudo"><expr_stmt><expr><call><name pos:line="61" pos:column="49">free_filter<pos:position pos:line="61" pos:column="60"/></name><argument_list pos:line="61" pos:column="60">(<argument><expr><name pos:line="61" pos:column="61">rule<pos:position pos:line="61" pos:column="65"/></name></expr></argument>)<pos:position pos:line="61" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="67"/></expr_stmt></block></else></if>
					<continue pos:line="62" pos:column="41">continue;<pos:position pos:line="62" pos:column="50"/></continue>
				}<pos:position pos:line="63" pos:column="34"/></block></then></if>
			}<pos:position pos:line="64" pos:column="26"/></block></then> <else pos:line="64" pos:column="27">else <block pos:line="64" pos:column="32">{
				<decl_stmt><decl><type><specifier pos:line="65" pos:column="33">const<pos:position pos:line="65" pos:column="38"/></specifier> <name pos:line="65" pos:column="39">char<pos:position pos:line="65" pos:column="43"/></name> <modifier pos:line="65" pos:column="44">*<pos:position pos:line="65" pos:column="45"/></modifier></type><name pos:line="65" pos:column="45">p<pos:position pos:line="65" pos:column="46"/></name></decl>;<pos:position pos:line="65" pos:column="47"/></decl_stmt>
				<decl_stmt><decl><type><name pos:line="66" pos:column="33">unsigned<pos:position pos:line="66" pos:column="41"/></name> <name pos:line="66" pos:column="42">int<pos:position pos:line="66" pos:column="45"/></name></type> <name pos:line="66" pos:column="46">len<pos:position pos:line="66" pos:column="49"/></name> <init pos:line="66" pos:column="50">= <expr><name pos:line="66" pos:column="52">pat_len<pos:position pos:line="66" pos:column="59"/></name></expr></init></decl>;<pos:position pos:line="66" pos:column="60"/></decl_stmt>
				<if pos:line="67" pos:column="33">if <condition pos:line="67" pos:column="36">(<expr><operator pos:line="67" pos:column="37">(<pos:position pos:line="67" pos:column="38"/></operator><name pos:line="67" pos:column="38">p<pos:position pos:line="67" pos:column="39"/></name> <operator pos:line="67" pos:column="40">=<pos:position pos:line="67" pos:column="41"/></operator> <call><name pos:line="67" pos:column="42">parse_merge_name<pos:position pos:line="67" pos:column="58"/></name><argument_list pos:line="67" pos:column="58">(<argument><expr><name pos:line="67" pos:column="59">pat<pos:position pos:line="67" pos:column="62"/></name></expr></argument>, <argument><expr><operator pos:line="67" pos:column="64">&amp;<pos:position pos:line="67" pos:column="69"/></operator><name pos:line="67" pos:column="65">len<pos:position pos:line="67" pos:column="68"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="67" pos:column="70">0<pos:position pos:line="67" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="67" pos:column="72"/></argument_list></call><operator pos:line="67" pos:column="72">)<pos:position pos:line="67" pos:column="73"/></operator></expr>)<pos:position pos:line="67" pos:column="74"/></condition><then pos:line="67" pos:column="74">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="68" pos:column="41">parse_filter_file<pos:position pos:line="68" pos:column="58"/></name><argument_list pos:line="68" pos:column="58">(<argument><expr><name pos:line="68" pos:column="59">listp<pos:position pos:line="68" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="68" pos:column="66">p<pos:position pos:line="68" pos:column="67"/></name></expr></argument>, <argument><expr><name pos:line="68" pos:column="69">rule<pos:position pos:line="68" pos:column="73"/></name></expr></argument>, <argument><expr><name pos:line="68" pos:column="75">XFLG_FATAL_ERRORS<pos:position pos:line="68" pos:column="92"/></name></expr></argument>)<pos:position pos:line="68" pos:column="93"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="94"/></expr_stmt></block></then></if>
				<expr_stmt><expr><call><name pos:line="69" pos:column="33">free_filter<pos:position pos:line="69" pos:column="44"/></name><argument_list pos:line="69" pos:column="44">(<argument><expr><name pos:line="69" pos:column="45">rule<pos:position pos:line="69" pos:column="49"/></name></expr></argument>)<pos:position pos:line="69" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="51"/></expr_stmt>
				<continue pos:line="70" pos:column="33">continue;<pos:position pos:line="70" pos:column="42"/></continue>
			}<pos:position pos:line="71" pos:column="26"/></block></else></if>
		}<pos:position pos:line="72" pos:column="18"/></block></then></if>

		<expr_stmt><expr><call><name pos:line="74" pos:column="17">add_rule<pos:position pos:line="74" pos:column="25"/></name><argument_list pos:line="74" pos:column="25">(<argument><expr><name pos:line="74" pos:column="26">listp<pos:position pos:line="74" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="74" pos:column="33">pat<pos:position pos:line="74" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="74" pos:column="38">pat_len<pos:position pos:line="74" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="74" pos:column="47">rule<pos:position pos:line="74" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="74" pos:column="53">xflags<pos:position pos:line="74" pos:column="59"/></name></expr></argument>)<pos:position pos:line="74" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="61"/></expr_stmt>

		<if pos:line="76" pos:column="17">if <condition pos:line="76" pos:column="20">(<expr><name pos:line="76" pos:column="21">new_rflags<pos:position pos:line="76" pos:column="31"/></name> <operator pos:line="76" pos:column="32">&amp;<pos:position pos:line="76" pos:column="37"/></operator> <name pos:line="76" pos:column="34">FILTRULE_CVS_IGNORE<pos:position pos:line="76" pos:column="53"/></name>
		    <operator pos:line="77" pos:column="21">&amp;&amp;<pos:position pos:line="77" pos:column="31"/></operator> <operator pos:line="77" pos:column="24">!<pos:position pos:line="77" pos:column="25"/></operator><operator pos:line="77" pos:column="25">(<pos:position pos:line="77" pos:column="26"/></operator><name pos:line="77" pos:column="26">new_rflags<pos:position pos:line="77" pos:column="36"/></name> <operator pos:line="77" pos:column="37">&amp;<pos:position pos:line="77" pos:column="42"/></operator> <name pos:line="77" pos:column="39">FILTRULE_MERGE_FILE<pos:position pos:line="77" pos:column="58"/></name><operator pos:line="77" pos:column="58">)<pos:position pos:line="77" pos:column="59"/></operator></expr>)<pos:position pos:line="77" pos:column="60"/></condition><then pos:line="77" pos:column="60">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="78" pos:column="25">get_cvs_excludes<pos:position pos:line="78" pos:column="41"/></name><argument_list pos:line="78" pos:column="41">(<argument><expr><name pos:line="78" pos:column="42">new_rflags<pos:position pos:line="78" pos:column="52"/></name></expr></argument>)<pos:position pos:line="78" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="54"/></expr_stmt></block></then></if>
	}<pos:position pos:line="79" pos:column="10"/></block></while>
}<pos:position pos:line="80" pos:column="2"/></block></function></unit>
