<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_130_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">safe_write<pos:position pos:line="1" pos:column="23"/></name><parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><name pos:line="1" pos:column="24">int<pos:position pos:line="1" pos:column="27"/></name></type> <name pos:line="1" pos:column="28">fd<pos:position pos:line="1" pos:column="30"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="32">const<pos:position pos:line="1" pos:column="37"/></specifier> <name pos:line="1" pos:column="38">char<pos:position pos:line="1" pos:column="42"/></name> <modifier pos:line="1" pos:column="43">*<pos:position pos:line="1" pos:column="44"/></modifier></type><name pos:line="1" pos:column="44">buf<pos:position pos:line="1" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="49">size_t<pos:position pos:line="1" pos:column="55"/></name></type> <name pos:line="1" pos:column="56">len<pos:position pos:line="1" pos:column="59"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="60"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">n<pos:position pos:line="3" pos:column="14"/></name></decl>;<pos:position pos:line="3" pos:column="15"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="5" pos:column="9">assert<pos:position pos:line="5" pos:column="15"/></name><argument_list pos:line="5" pos:column="15">(<argument><expr><name pos:line="5" pos:column="16">fd<pos:position pos:line="5" pos:column="18"/></name> <operator pos:line="5" pos:column="19">!=<pos:position pos:line="5" pos:column="21"/></operator> <name><name pos:line="5" pos:column="22">iobuf<pos:position pos:line="5" pos:column="27"/></name><operator pos:line="5" pos:column="27">.<pos:position pos:line="5" pos:column="28"/></operator><name pos:line="5" pos:column="28">out_fd<pos:position pos:line="5" pos:column="34"/></name></name></expr></argument>)<pos:position pos:line="5" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="36"/></expr_stmt>

	<expr_stmt><expr><name pos:line="7" pos:column="9">n<pos:position pos:line="7" pos:column="10"/></name> <operator pos:line="7" pos:column="11">=<pos:position pos:line="7" pos:column="12"/></operator> <call><name pos:line="7" pos:column="13">write<pos:position pos:line="7" pos:column="18"/></name><argument_list pos:line="7" pos:column="18">(<argument><expr><name pos:line="7" pos:column="19">fd<pos:position pos:line="7" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="23">buf<pos:position pos:line="7" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="28">len<pos:position pos:line="7" pos:column="31"/></name></expr></argument>)<pos:position pos:line="7" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="33"/></expr_stmt>
	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><operator pos:line="8" pos:column="13">(<pos:position pos:line="8" pos:column="14"/></operator><name pos:line="8" pos:column="14">size_t<pos:position pos:line="8" pos:column="20"/></name><operator pos:line="8" pos:column="20">)<pos:position pos:line="8" pos:column="21"/></operator><name pos:line="8" pos:column="21">n<pos:position pos:line="8" pos:column="22"/></name> <operator pos:line="8" pos:column="23">==<pos:position pos:line="8" pos:column="25"/></operator> <name pos:line="8" pos:column="26">len<pos:position pos:line="8" pos:column="29"/></name></expr>)<pos:position pos:line="8" pos:column="30"/></condition><then pos:line="8" pos:column="30">
		<block type="pseudo"><return pos:line="9" pos:column="17">return;<pos:position pos:line="9" pos:column="24"/></return></block></then></if>
	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><name pos:line="10" pos:column="13">n<pos:position pos:line="10" pos:column="14"/></name> <operator pos:line="10" pos:column="15">&lt;<pos:position pos:line="10" pos:column="19"/></operator> <literal type="number" pos:line="10" pos:column="17">0<pos:position pos:line="10" pos:column="18"/></literal></expr>)<pos:position pos:line="10" pos:column="19"/></condition><then pos:line="10" pos:column="19"> <block pos:line="10" pos:column="20">{
		<if pos:line="11" pos:column="17">if <condition pos:line="11" pos:column="20">(<expr><name pos:line="11" pos:column="21">errno<pos:position pos:line="11" pos:column="26"/></name> <operator pos:line="11" pos:column="27">!=<pos:position pos:line="11" pos:column="29"/></operator> <name pos:line="11" pos:column="30">EINTR<pos:position pos:line="11" pos:column="35"/></name> <operator pos:line="11" pos:column="36">&amp;&amp;<pos:position pos:line="11" pos:column="46"/></operator> <name pos:line="11" pos:column="39">errno<pos:position pos:line="11" pos:column="44"/></name> <operator pos:line="11" pos:column="45">!=<pos:position pos:line="11" pos:column="47"/></operator> <name pos:line="11" pos:column="48">EWOULDBLOCK<pos:position pos:line="11" pos:column="59"/></name> <operator pos:line="11" pos:column="60">&amp;&amp;<pos:position pos:line="11" pos:column="70"/></operator> <name pos:line="11" pos:column="63">errno<pos:position pos:line="11" pos:column="68"/></name> <operator pos:line="11" pos:column="69">!=<pos:position pos:line="11" pos:column="71"/></operator> <name pos:line="11" pos:column="72">EAGAIN<pos:position pos:line="11" pos:column="78"/></name></expr>)<pos:position pos:line="11" pos:column="79"/></condition><then pos:line="11" pos:column="79"> <block pos:line="11" pos:column="80">{
		  <label><name pos:line="12" pos:column="19">write_failed<pos:position pos:line="12" pos:column="31"/></name>:<pos:position pos:line="12" pos:column="32"/></label>
			<expr_stmt><expr><call><name pos:line="13" pos:column="25">rsyserr<pos:position pos:line="13" pos:column="32"/></name><argument_list pos:line="13" pos:column="32">(<argument><expr><name pos:line="13" pos:column="33">FERROR<pos:position pos:line="13" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="41">errno<pos:position pos:line="13" pos:column="46"/></name></expr></argument>,
				<argument><expr><literal type="string" pos:line="14" pos:column="33">"safe_write failed to write %ld bytes to %s [%s]"<pos:position pos:line="14" pos:column="82"/></literal></expr></argument>,
				<argument><expr><operator pos:line="15" pos:column="33">(<pos:position pos:line="15" pos:column="34"/></operator><name pos:line="15" pos:column="34">long<pos:position pos:line="15" pos:column="38"/></name><operator pos:line="15" pos:column="38">)<pos:position pos:line="15" pos:column="39"/></operator><name pos:line="15" pos:column="39">len<pos:position pos:line="15" pos:column="42"/></name></expr></argument>, <argument><expr><call><name pos:line="15" pos:column="44">what_fd_is<pos:position pos:line="15" pos:column="54"/></name><argument_list pos:line="15" pos:column="54">(<argument><expr><name pos:line="15" pos:column="55">fd<pos:position pos:line="15" pos:column="57"/></name></expr></argument>)<pos:position pos:line="15" pos:column="58"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="15" pos:column="60">who_am_i<pos:position pos:line="15" pos:column="68"/></name><argument_list pos:line="15" pos:column="68">()<pos:position pos:line="15" pos:column="70"/></argument_list></call></expr></argument>)<pos:position pos:line="15" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="72"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="16" pos:column="25">exit_cleanup<pos:position pos:line="16" pos:column="37"/></name><argument_list pos:line="16" pos:column="37">(<argument><expr><name pos:line="16" pos:column="38">RERR_STREAMIO<pos:position pos:line="16" pos:column="51"/></name></expr></argument>)<pos:position pos:line="16" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="53"/></expr_stmt>
		}<pos:position pos:line="17" pos:column="18"/></block></then></if>
	}<pos:position pos:line="18" pos:column="10"/></block></then> <else pos:line="18" pos:column="11">else <block pos:line="18" pos:column="16">{
		<expr_stmt><expr><name pos:line="19" pos:column="17">buf<pos:position pos:line="19" pos:column="20"/></name> <operator pos:line="19" pos:column="21">+=<pos:position pos:line="19" pos:column="23"/></operator> <name pos:line="19" pos:column="24">n<pos:position pos:line="19" pos:column="25"/></name></expr>;<pos:position pos:line="19" pos:column="26"/></expr_stmt>
		<expr_stmt><expr><name pos:line="20" pos:column="17">len<pos:position pos:line="20" pos:column="20"/></name> <operator pos:line="20" pos:column="21">-=<pos:position pos:line="20" pos:column="23"/></operator> <name pos:line="20" pos:column="24">n<pos:position pos:line="20" pos:column="25"/></name></expr>;<pos:position pos:line="20" pos:column="26"/></expr_stmt>
	}<pos:position pos:line="21" pos:column="10"/></block></else></if>

	<while pos:line="23" pos:column="9">while <condition pos:line="23" pos:column="15">(<expr><name pos:line="23" pos:column="16">len<pos:position pos:line="23" pos:column="19"/></name></expr>)<pos:position pos:line="23" pos:column="20"/></condition> <block pos:line="23" pos:column="21">{
		<decl_stmt><decl><type><name><name pos:line="24" pos:column="17">struct<pos:position pos:line="24" pos:column="23"/></name> <name pos:line="24" pos:column="24">timeval<pos:position pos:line="24" pos:column="31"/></name></name></type> <name pos:line="24" pos:column="32">tv<pos:position pos:line="24" pos:column="34"/></name></decl>;<pos:position pos:line="24" pos:column="35"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="25" pos:column="17">fd_set<pos:position pos:line="25" pos:column="23"/></name></type> <name pos:line="25" pos:column="24">w_fds<pos:position pos:line="25" pos:column="29"/></name></decl>;<pos:position pos:line="25" pos:column="30"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="26" pos:column="17">int<pos:position pos:line="26" pos:column="20"/></name></type> <name pos:line="26" pos:column="21">cnt<pos:position pos:line="26" pos:column="24"/></name></decl>;<pos:position pos:line="26" pos:column="25"/></decl_stmt>

		<expr_stmt><expr><call><name pos:line="28" pos:column="17">FD_ZERO<pos:position pos:line="28" pos:column="24"/></name><argument_list pos:line="28" pos:column="24">(<argument><expr><operator pos:line="28" pos:column="25">&amp;<pos:position pos:line="28" pos:column="30"/></operator><name pos:line="28" pos:column="26">w_fds<pos:position pos:line="28" pos:column="31"/></name></expr></argument>)<pos:position pos:line="28" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="33"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="29" pos:column="17">FD_SET<pos:position pos:line="29" pos:column="23"/></name><argument_list pos:line="29" pos:column="23">(<argument><expr><name pos:line="29" pos:column="24">fd<pos:position pos:line="29" pos:column="26"/></name></expr></argument>, <argument><expr><operator pos:line="29" pos:column="28">&amp;<pos:position pos:line="29" pos:column="33"/></operator><name pos:line="29" pos:column="29">w_fds<pos:position pos:line="29" pos:column="34"/></name></expr></argument>)<pos:position pos:line="29" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="36"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="30" pos:column="17">tv<pos:position pos:line="30" pos:column="19"/></name><operator pos:line="30" pos:column="19">.<pos:position pos:line="30" pos:column="20"/></operator><name pos:line="30" pos:column="20">tv_sec<pos:position pos:line="30" pos:column="26"/></name></name> <operator pos:line="30" pos:column="27">=<pos:position pos:line="30" pos:column="28"/></operator> <name pos:line="30" pos:column="29">select_timeout<pos:position pos:line="30" pos:column="43"/></name></expr>;<pos:position pos:line="30" pos:column="44"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="31" pos:column="17">tv<pos:position pos:line="31" pos:column="19"/></name><operator pos:line="31" pos:column="19">.<pos:position pos:line="31" pos:column="20"/></operator><name pos:line="31" pos:column="20">tv_usec<pos:position pos:line="31" pos:column="27"/></name></name> <operator pos:line="31" pos:column="28">=<pos:position pos:line="31" pos:column="29"/></operator> <literal type="number" pos:line="31" pos:column="30">0<pos:position pos:line="31" pos:column="31"/></literal></expr>;<pos:position pos:line="31" pos:column="32"/></expr_stmt>

		<expr_stmt><expr><name pos:line="33" pos:column="17">cnt<pos:position pos:line="33" pos:column="20"/></name> <operator pos:line="33" pos:column="21">=<pos:position pos:line="33" pos:column="22"/></operator> <call><name pos:line="33" pos:column="23">select<pos:position pos:line="33" pos:column="29"/></name><argument_list pos:line="33" pos:column="29">(<argument><expr><name pos:line="33" pos:column="30">fd<pos:position pos:line="33" pos:column="32"/></name> <operator pos:line="33" pos:column="33">+<pos:position pos:line="33" pos:column="34"/></operator> <literal type="number" pos:line="33" pos:column="35">1<pos:position pos:line="33" pos:column="36"/></literal></expr></argument>, <argument><expr><name pos:line="33" pos:column="38">NULL<pos:position pos:line="33" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="33" pos:column="44">&amp;<pos:position pos:line="33" pos:column="49"/></operator><name pos:line="33" pos:column="45">w_fds<pos:position pos:line="33" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="52">NULL<pos:position pos:line="33" pos:column="56"/></name></expr></argument>, <argument><expr><operator pos:line="33" pos:column="58">&amp;<pos:position pos:line="33" pos:column="63"/></operator><name pos:line="33" pos:column="59">tv<pos:position pos:line="33" pos:column="61"/></name></expr></argument>)<pos:position pos:line="33" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="63"/></expr_stmt>
		<if pos:line="34" pos:column="17">if <condition pos:line="34" pos:column="20">(<expr><name pos:line="34" pos:column="21">cnt<pos:position pos:line="34" pos:column="24"/></name> <operator pos:line="34" pos:column="25">&lt;=<pos:position pos:line="34" pos:column="30"/></operator> <literal type="number" pos:line="34" pos:column="28">0<pos:position pos:line="34" pos:column="29"/></literal></expr>)<pos:position pos:line="34" pos:column="30"/></condition><then pos:line="34" pos:column="30"> <block pos:line="34" pos:column="31">{
			<if pos:line="35" pos:column="25">if <condition pos:line="35" pos:column="28">(<expr><name pos:line="35" pos:column="29">cnt<pos:position pos:line="35" pos:column="32"/></name> <operator pos:line="35" pos:column="33">&lt;<pos:position pos:line="35" pos:column="37"/></operator> <literal type="number" pos:line="35" pos:column="35">0<pos:position pos:line="35" pos:column="36"/></literal> <operator pos:line="35" pos:column="37">&amp;&amp;<pos:position pos:line="35" pos:column="47"/></operator> <name pos:line="35" pos:column="40">errno<pos:position pos:line="35" pos:column="45"/></name> <operator pos:line="35" pos:column="46">==<pos:position pos:line="35" pos:column="48"/></operator> <name pos:line="35" pos:column="49">EBADF<pos:position pos:line="35" pos:column="54"/></name></expr>)<pos:position pos:line="35" pos:column="55"/></condition><then pos:line="35" pos:column="55"> <block pos:line="35" pos:column="56">{
				<expr_stmt><expr><call><name pos:line="36" pos:column="33">rsyserr<pos:position pos:line="36" pos:column="40"/></name><argument_list pos:line="36" pos:column="40">(<argument><expr><name pos:line="36" pos:column="41">FERROR<pos:position pos:line="36" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="49">errno<pos:position pos:line="36" pos:column="54"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="36" pos:column="56">"safe_write select failed on %s [%s]"<pos:position pos:line="36" pos:column="93"/></literal></expr></argument>,
					<argument><expr><call><name pos:line="37" pos:column="41">what_fd_is<pos:position pos:line="37" pos:column="51"/></name><argument_list pos:line="37" pos:column="51">(<argument><expr><name pos:line="37" pos:column="52">fd<pos:position pos:line="37" pos:column="54"/></name></expr></argument>)<pos:position pos:line="37" pos:column="55"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="37" pos:column="57">who_am_i<pos:position pos:line="37" pos:column="65"/></name><argument_list pos:line="37" pos:column="65">()<pos:position pos:line="37" pos:column="67"/></argument_list></call></expr></argument>)<pos:position pos:line="37" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="69"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="38" pos:column="33">exit_cleanup<pos:position pos:line="38" pos:column="45"/></name><argument_list pos:line="38" pos:column="45">(<argument><expr><name pos:line="38" pos:column="46">RERR_FILEIO<pos:position pos:line="38" pos:column="57"/></name></expr></argument>)<pos:position pos:line="38" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="59"/></expr_stmt>
			}<pos:position pos:line="39" pos:column="26"/></block></then></if>
			<if pos:line="40" pos:column="25">if <condition pos:line="40" pos:column="28">(<expr><name pos:line="40" pos:column="29">io_timeout<pos:position pos:line="40" pos:column="39"/></name></expr>)<pos:position pos:line="40" pos:column="40"/></condition><then pos:line="40" pos:column="40">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="41" pos:column="33">maybe_send_keepalive<pos:position pos:line="41" pos:column="53"/></name><argument_list pos:line="41" pos:column="53">(<argument><expr><call><name pos:line="41" pos:column="54">time<pos:position pos:line="41" pos:column="58"/></name><argument_list pos:line="41" pos:column="58">(<argument><expr><name pos:line="41" pos:column="59">NULL<pos:position pos:line="41" pos:column="63"/></name></expr></argument>)<pos:position pos:line="41" pos:column="64"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="41" pos:column="66">MSK_ALLOW_FLUSH<pos:position pos:line="41" pos:column="81"/></name></expr></argument>)<pos:position pos:line="41" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="83"/></expr_stmt></block></then></if>
			<continue pos:line="42" pos:column="25">continue;<pos:position pos:line="42" pos:column="34"/></continue>
		}<pos:position pos:line="43" pos:column="18"/></block></then></if>

		<if pos:line="45" pos:column="17">if <condition pos:line="45" pos:column="20">(<expr><call><name pos:line="45" pos:column="21">FD_ISSET<pos:position pos:line="45" pos:column="29"/></name><argument_list pos:line="45" pos:column="29">(<argument><expr><name pos:line="45" pos:column="30">fd<pos:position pos:line="45" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="45" pos:column="34">&amp;<pos:position pos:line="45" pos:column="39"/></operator><name pos:line="45" pos:column="35">w_fds<pos:position pos:line="45" pos:column="40"/></name></expr></argument>)<pos:position pos:line="45" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="45" pos:column="42"/></condition><then pos:line="45" pos:column="42"> <block pos:line="45" pos:column="43">{
			<expr_stmt><expr><name pos:line="46" pos:column="25">n<pos:position pos:line="46" pos:column="26"/></name> <operator pos:line="46" pos:column="27">=<pos:position pos:line="46" pos:column="28"/></operator> <call><name pos:line="46" pos:column="29">write<pos:position pos:line="46" pos:column="34"/></name><argument_list pos:line="46" pos:column="34">(<argument><expr><name pos:line="46" pos:column="35">fd<pos:position pos:line="46" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="39">buf<pos:position pos:line="46" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="44">len<pos:position pos:line="46" pos:column="47"/></name></expr></argument>)<pos:position pos:line="46" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="49"/></expr_stmt>
			<if pos:line="47" pos:column="25">if <condition pos:line="47" pos:column="28">(<expr><name pos:line="47" pos:column="29">n<pos:position pos:line="47" pos:column="30"/></name> <operator pos:line="47" pos:column="31">&lt;<pos:position pos:line="47" pos:column="35"/></operator> <literal type="number" pos:line="47" pos:column="33">0<pos:position pos:line="47" pos:column="34"/></literal></expr>)<pos:position pos:line="47" pos:column="35"/></condition><then pos:line="47" pos:column="35"> <block pos:line="47" pos:column="36">{
				<if pos:line="48" pos:column="33">if <condition pos:line="48" pos:column="36">(<expr><name pos:line="48" pos:column="37">errno<pos:position pos:line="48" pos:column="42"/></name> <operator pos:line="48" pos:column="43">==<pos:position pos:line="48" pos:column="45"/></operator> <name pos:line="48" pos:column="46">EINTR<pos:position pos:line="48" pos:column="51"/></name></expr>)<pos:position pos:line="48" pos:column="52"/></condition><then pos:line="48" pos:column="52">
					<block type="pseudo"><continue pos:line="49" pos:column="41">continue;<pos:position pos:line="49" pos:column="50"/></continue></block></then></if>
				<goto pos:line="50" pos:column="33">goto <name pos:line="50" pos:column="38">write_failed<pos:position pos:line="50" pos:column="50"/></name>;<pos:position pos:line="50" pos:column="51"/></goto>
			}<pos:position pos:line="51" pos:column="26"/></block></then></if>
			<expr_stmt><expr><name pos:line="52" pos:column="25">buf<pos:position pos:line="52" pos:column="28"/></name> <operator pos:line="52" pos:column="29">+=<pos:position pos:line="52" pos:column="31"/></operator> <name pos:line="52" pos:column="32">n<pos:position pos:line="52" pos:column="33"/></name></expr>;<pos:position pos:line="52" pos:column="34"/></expr_stmt>
			<expr_stmt><expr><name pos:line="53" pos:column="25">len<pos:position pos:line="53" pos:column="28"/></name> <operator pos:line="53" pos:column="29">-=<pos:position pos:line="53" pos:column="31"/></operator> <name pos:line="53" pos:column="32">n<pos:position pos:line="53" pos:column="33"/></name></expr>;<pos:position pos:line="53" pos:column="34"/></expr_stmt>
		}<pos:position pos:line="54" pos:column="18"/></block></then></if>
	}<pos:position pos:line="55" pos:column="10"/></block></while>
}<pos:position pos:line="56" pos:column="2"/></block></function></unit>
