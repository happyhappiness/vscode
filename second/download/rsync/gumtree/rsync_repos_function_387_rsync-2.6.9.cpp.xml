<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_387_rsync-2.6.9.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">pid_t<pos:position pos:line="1" pos:column="13"/></name></type> <name pos:line="1" pos:column="14">do_cmd<pos:position pos:line="1" pos:column="20"/></name><parameter_list pos:line="1" pos:column="20">(<parameter><decl><type><name pos:line="1" pos:column="21">char<pos:position pos:line="1" pos:column="25"/></name> <modifier pos:line="1" pos:column="26">*<pos:position pos:line="1" pos:column="27"/></modifier></type><name pos:line="1" pos:column="27">cmd<pos:position pos:line="1" pos:column="30"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="32">char<pos:position pos:line="1" pos:column="36"/></name> <modifier pos:line="1" pos:column="37">*<pos:position pos:line="1" pos:column="38"/></modifier></type><name pos:line="1" pos:column="38">machine<pos:position pos:line="1" pos:column="45"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="47">char<pos:position pos:line="1" pos:column="51"/></name> <modifier pos:line="1" pos:column="52">*<pos:position pos:line="1" pos:column="53"/></modifier></type><name pos:line="1" pos:column="53">user<pos:position pos:line="1" pos:column="57"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="59">char<pos:position pos:line="1" pos:column="63"/></name> <modifier pos:line="1" pos:column="64">*<pos:position pos:line="1" pos:column="65"/></modifier></type><name pos:line="1" pos:column="65">path<pos:position pos:line="1" pos:column="69"/></name></decl></parameter>,
		    <parameter><decl><type><name pos:line="2" pos:column="21">int<pos:position pos:line="2" pos:column="24"/></name> <modifier pos:line="2" pos:column="25">*<pos:position pos:line="2" pos:column="26"/></modifier></type><name pos:line="2" pos:column="26">f_in<pos:position pos:line="2" pos:column="30"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="32">int<pos:position pos:line="2" pos:column="35"/></name> <modifier pos:line="2" pos:column="36">*<pos:position pos:line="2" pos:column="37"/></modifier></type><name pos:line="2" pos:column="37">f_out<pos:position pos:line="2" pos:column="42"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="43"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">i<pos:position pos:line="4" pos:column="14"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="16">argc<pos:position pos:line="4" pos:column="20"/></name> <init pos:line="4" pos:column="21">= <expr><literal type="number" pos:line="4" pos:column="23">0<pos:position pos:line="4" pos:column="24"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="25"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">char<pos:position pos:line="5" pos:column="13"/></name> <modifier pos:line="5" pos:column="14">*<pos:position pos:line="5" pos:column="15"/></modifier></type><name><name pos:line="5" pos:column="15">args<pos:position pos:line="5" pos:column="19"/></name><index pos:line="5" pos:column="19">[<expr><name pos:line="5" pos:column="20">MAX_ARGS<pos:position pos:line="5" pos:column="28"/></name></expr>]<pos:position pos:line="5" pos:column="29"/></index></name></decl>;<pos:position pos:line="5" pos:column="30"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">pid_t<pos:position pos:line="6" pos:column="14"/></name></type> <name pos:line="6" pos:column="15">ret<pos:position pos:line="6" pos:column="18"/></name></decl>;<pos:position pos:line="6" pos:column="19"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">char<pos:position pos:line="7" pos:column="13"/></name> <modifier pos:line="7" pos:column="14">*<pos:position pos:line="7" pos:column="15"/></modifier></type><name pos:line="7" pos:column="15">dir<pos:position pos:line="7" pos:column="18"/></name> <init pos:line="7" pos:column="19">= <expr><name pos:line="7" pos:column="21">NULL<pos:position pos:line="7" pos:column="25"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="26"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">int<pos:position pos:line="8" pos:column="12"/></name></type> <name pos:line="8" pos:column="13">dash_l_set<pos:position pos:line="8" pos:column="23"/></name> <init pos:line="8" pos:column="24">= <expr><literal type="number" pos:line="8" pos:column="26">0<pos:position pos:line="8" pos:column="27"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="28"/></decl_stmt>

	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><operator pos:line="10" pos:column="13">!<pos:position pos:line="10" pos:column="14"/></operator><name pos:line="10" pos:column="14">read_batch<pos:position pos:line="10" pos:column="24"/></name> <operator pos:line="10" pos:column="25">&amp;&amp;<pos:position pos:line="10" pos:column="35"/></operator> <operator pos:line="10" pos:column="28">!<pos:position pos:line="10" pos:column="29"/></operator><name pos:line="10" pos:column="29">local_server<pos:position pos:line="10" pos:column="41"/></name></expr>)<pos:position pos:line="10" pos:column="42"/></condition><then pos:line="10" pos:column="42"> <block pos:line="10" pos:column="43">{
		<decl_stmt><decl><type><name pos:line="11" pos:column="17">char<pos:position pos:line="11" pos:column="21"/></name> <modifier pos:line="11" pos:column="22">*<pos:position pos:line="11" pos:column="23"/></modifier></type><name pos:line="11" pos:column="23">t<pos:position pos:line="11" pos:column="24"/></name></decl>, <modifier pos:line="11" pos:column="26">*<pos:position pos:line="11" pos:column="27"/></modifier><decl><type ref="prev"/><name pos:line="11" pos:column="27">f<pos:position pos:line="11" pos:column="28"/></name></decl>, <decl><type ref="prev"/><name pos:line="11" pos:column="30">in_quote<pos:position pos:line="11" pos:column="38"/></name> <init pos:line="11" pos:column="39">= <expr><literal type="char" pos:line="11" pos:column="41">'\0'<pos:position pos:line="11" pos:column="45"/></literal></expr></init></decl>;<pos:position pos:line="11" pos:column="46"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="12" pos:column="17">char<pos:position pos:line="12" pos:column="21"/></name> <modifier pos:line="12" pos:column="22">*<pos:position pos:line="12" pos:column="23"/></modifier></type><name pos:line="12" pos:column="23">rsh_env<pos:position pos:line="12" pos:column="30"/></name> <init pos:line="12" pos:column="31">= <expr><call><name pos:line="12" pos:column="33">getenv<pos:position pos:line="12" pos:column="39"/></name><argument_list pos:line="12" pos:column="39">(<argument><expr><name pos:line="12" pos:column="40">RSYNC_RSH_ENV<pos:position pos:line="12" pos:column="53"/></name></expr></argument>)<pos:position pos:line="12" pos:column="54"/></argument_list></call></expr></init></decl>;<pos:position pos:line="12" pos:column="55"/></decl_stmt>
		<if pos:line="13" pos:column="17">if <condition pos:line="13" pos:column="20">(<expr><operator pos:line="13" pos:column="21">!<pos:position pos:line="13" pos:column="22"/></operator><name pos:line="13" pos:column="22">cmd<pos:position pos:line="13" pos:column="25"/></name></expr>)<pos:position pos:line="13" pos:column="26"/></condition><then pos:line="13" pos:column="26">
			<block type="pseudo"><expr_stmt><expr><name pos:line="14" pos:column="25">cmd<pos:position pos:line="14" pos:column="28"/></name> <operator pos:line="14" pos:column="29">=<pos:position pos:line="14" pos:column="30"/></operator> <name pos:line="14" pos:column="31">rsh_env<pos:position pos:line="14" pos:column="38"/></name></expr>;<pos:position pos:line="14" pos:column="39"/></expr_stmt></block></then></if>
		<if pos:line="15" pos:column="17">if <condition pos:line="15" pos:column="20">(<expr><operator pos:line="15" pos:column="21">!<pos:position pos:line="15" pos:column="22"/></operator><name pos:line="15" pos:column="22">cmd<pos:position pos:line="15" pos:column="25"/></name></expr>)<pos:position pos:line="15" pos:column="26"/></condition><then pos:line="15" pos:column="26">
			<block type="pseudo"><expr_stmt><expr><name pos:line="16" pos:column="25">cmd<pos:position pos:line="16" pos:column="28"/></name> <operator pos:line="16" pos:column="29">=<pos:position pos:line="16" pos:column="30"/></operator> <name pos:line="16" pos:column="31">RSYNC_RSH<pos:position pos:line="16" pos:column="40"/></name></expr>;<pos:position pos:line="16" pos:column="41"/></expr_stmt></block></then></if>
		<expr_stmt><expr><name pos:line="17" pos:column="17">cmd<pos:position pos:line="17" pos:column="20"/></name> <operator pos:line="17" pos:column="21">=<pos:position pos:line="17" pos:column="22"/></operator> <call><name pos:line="17" pos:column="23">strdup<pos:position pos:line="17" pos:column="29"/></name><argument_list pos:line="17" pos:column="29">(<argument><expr><name pos:line="17" pos:column="30">cmd<pos:position pos:line="17" pos:column="33"/></name></expr></argument>)<pos:position pos:line="17" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="35"/></expr_stmt>
		<if pos:line="18" pos:column="17">if <condition pos:line="18" pos:column="20">(<expr><operator pos:line="18" pos:column="21">!<pos:position pos:line="18" pos:column="22"/></operator><name pos:line="18" pos:column="22">cmd<pos:position pos:line="18" pos:column="25"/></name></expr>)<pos:position pos:line="18" pos:column="26"/></condition><then pos:line="18" pos:column="26">
			<block type="pseudo"><goto pos:line="19" pos:column="25">goto <name pos:line="19" pos:column="30">oom<pos:position pos:line="19" pos:column="33"/></name>;<pos:position pos:line="19" pos:column="34"/></goto></block></then></if>

		<for pos:line="21" pos:column="17">for <control pos:line="21" pos:column="21">(<init><expr><name pos:line="21" pos:column="22">t<pos:position pos:line="21" pos:column="23"/></name> <operator pos:line="21" pos:column="24">=<pos:position pos:line="21" pos:column="25"/></operator> <name pos:line="21" pos:column="26">f<pos:position pos:line="21" pos:column="27"/></name> <operator pos:line="21" pos:column="28">=<pos:position pos:line="21" pos:column="29"/></operator> <name pos:line="21" pos:column="30">cmd<pos:position pos:line="21" pos:column="33"/></name></expr>;<pos:position pos:line="21" pos:column="34"/></init> <condition><expr><operator pos:line="21" pos:column="35">*<pos:position pos:line="21" pos:column="36"/></operator><name pos:line="21" pos:column="36">f<pos:position pos:line="21" pos:column="37"/></name></expr>;<pos:position pos:line="21" pos:column="38"/></condition> <incr><expr><name pos:line="21" pos:column="39">f<pos:position pos:line="21" pos:column="40"/></name><operator pos:line="21" pos:column="40">++<pos:position pos:line="21" pos:column="42"/></operator></expr></incr>)<pos:position pos:line="21" pos:column="43"/></control> <block pos:line="21" pos:column="44">{
			<if pos:line="22" pos:column="25">if <condition pos:line="22" pos:column="28">(<expr><operator pos:line="22" pos:column="29">*<pos:position pos:line="22" pos:column="30"/></operator><name pos:line="22" pos:column="30">f<pos:position pos:line="22" pos:column="31"/></name> <operator pos:line="22" pos:column="32">==<pos:position pos:line="22" pos:column="34"/></operator> <literal type="char" pos:line="22" pos:column="35">' '<pos:position pos:line="22" pos:column="38"/></literal></expr>)<pos:position pos:line="22" pos:column="39"/></condition><then pos:line="22" pos:column="39">
				<block type="pseudo"><continue pos:line="23" pos:column="33">continue;<pos:position pos:line="23" pos:column="42"/></continue></block></then></if>
			<comment type="block" pos:line="24" pos:column="25">/* Comparison leaves rooms for server_options(). */</comment>
			<if pos:line="25" pos:column="25">if <condition pos:line="25" pos:column="28">(<expr><name pos:line="25" pos:column="29">argc<pos:position pos:line="25" pos:column="33"/></name> <operator pos:line="25" pos:column="34">&gt;=<pos:position pos:line="25" pos:column="39"/></operator> <name pos:line="25" pos:column="37">MAX_ARGS<pos:position pos:line="25" pos:column="45"/></name> <operator pos:line="25" pos:column="46">-<pos:position pos:line="25" pos:column="47"/></operator> <name pos:line="25" pos:column="48">MAX_SERVER_ARGS<pos:position pos:line="25" pos:column="63"/></name></expr>)<pos:position pos:line="25" pos:column="64"/></condition><then pos:line="25" pos:column="64"> <block pos:line="25" pos:column="65">{
				<expr_stmt><expr><call><name pos:line="26" pos:column="33">rprintf<pos:position pos:line="26" pos:column="40"/></name><argument_list pos:line="26" pos:column="40">(<argument><expr><name pos:line="26" pos:column="41">FERROR<pos:position pos:line="26" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="26" pos:column="49">"internal: args[] overflowed in do_cmd()\n"<pos:position pos:line="26" pos:column="92"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="93"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="94"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="27" pos:column="33">exit_cleanup<pos:position pos:line="27" pos:column="45"/></name><argument_list pos:line="27" pos:column="45">(<argument><expr><name pos:line="27" pos:column="46">RERR_SYNTAX<pos:position pos:line="27" pos:column="57"/></name></expr></argument>)<pos:position pos:line="27" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="59"/></expr_stmt>
			}<pos:position pos:line="28" pos:column="26"/></block></then></if>
			<expr_stmt><expr><name><name pos:line="29" pos:column="25">args<pos:position pos:line="29" pos:column="29"/></name><index pos:line="29" pos:column="29">[<expr><name pos:line="29" pos:column="30">argc<pos:position pos:line="29" pos:column="34"/></name><operator pos:line="29" pos:column="34">++<pos:position pos:line="29" pos:column="36"/></operator></expr>]<pos:position pos:line="29" pos:column="37"/></index></name> <operator pos:line="29" pos:column="38">=<pos:position pos:line="29" pos:column="39"/></operator> <name pos:line="29" pos:column="40">t<pos:position pos:line="29" pos:column="41"/></name></expr>;<pos:position pos:line="29" pos:column="42"/></expr_stmt>
			<while pos:line="30" pos:column="25">while <condition pos:line="30" pos:column="31">(<expr><operator pos:line="30" pos:column="32">*<pos:position pos:line="30" pos:column="33"/></operator><name pos:line="30" pos:column="33">f<pos:position pos:line="30" pos:column="34"/></name> <operator pos:line="30" pos:column="35">!=<pos:position pos:line="30" pos:column="37"/></operator> <literal type="char" pos:line="30" pos:column="38">' '<pos:position pos:line="30" pos:column="41"/></literal> <operator pos:line="30" pos:column="42">||<pos:position pos:line="30" pos:column="44"/></operator> <name pos:line="30" pos:column="45">in_quote<pos:position pos:line="30" pos:column="53"/></name></expr>)<pos:position pos:line="30" pos:column="54"/></condition> <block pos:line="30" pos:column="55">{
				<if pos:line="31" pos:column="33">if <condition pos:line="31" pos:column="36">(<expr><operator pos:line="31" pos:column="37">!<pos:position pos:line="31" pos:column="38"/></operator><operator pos:line="31" pos:column="38">*<pos:position pos:line="31" pos:column="39"/></operator><name pos:line="31" pos:column="39">f<pos:position pos:line="31" pos:column="40"/></name></expr>)<pos:position pos:line="31" pos:column="41"/></condition><then pos:line="31" pos:column="41"> <block pos:line="31" pos:column="42">{
					<if pos:line="32" pos:column="41">if <condition pos:line="32" pos:column="44">(<expr><name pos:line="32" pos:column="45">in_quote<pos:position pos:line="32" pos:column="53"/></name></expr>)<pos:position pos:line="32" pos:column="54"/></condition><then pos:line="32" pos:column="54"> <block pos:line="32" pos:column="55">{
						<expr_stmt><expr><call><name pos:line="33" pos:column="49">rprintf<pos:position pos:line="33" pos:column="56"/></name><argument_list pos:line="33" pos:column="56">(<argument><expr><name pos:line="33" pos:column="57">FERROR<pos:position pos:line="33" pos:column="63"/></name></expr></argument>,
						    <argument><expr><literal type="string" pos:line="34" pos:column="53">"Missing trailing-%c in remote-shell command.\n"<pos:position pos:line="34" pos:column="101"/></literal></expr></argument>,
						    <argument><expr><name pos:line="35" pos:column="53">in_quote<pos:position pos:line="35" pos:column="61"/></name></expr></argument>)<pos:position pos:line="35" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="63"/></expr_stmt>
						<expr_stmt><expr><call><name pos:line="36" pos:column="49">exit_cleanup<pos:position pos:line="36" pos:column="61"/></name><argument_list pos:line="36" pos:column="61">(<argument><expr><name pos:line="36" pos:column="62">RERR_SYNTAX<pos:position pos:line="36" pos:column="73"/></name></expr></argument>)<pos:position pos:line="36" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="75"/></expr_stmt>
					}<pos:position pos:line="37" pos:column="42"/></block></then></if>
					<expr_stmt><expr><name pos:line="38" pos:column="41">f<pos:position pos:line="38" pos:column="42"/></name><operator pos:line="38" pos:column="42">--<pos:position pos:line="38" pos:column="44"/></operator></expr>;<pos:position pos:line="38" pos:column="45"/></expr_stmt>
					<break pos:line="39" pos:column="41">break;<pos:position pos:line="39" pos:column="47"/></break>
				}<pos:position pos:line="40" pos:column="34"/></block></then></if>
				<if pos:line="41" pos:column="33">if <condition pos:line="41" pos:column="36">(<expr><operator pos:line="41" pos:column="37">*<pos:position pos:line="41" pos:column="38"/></operator><name pos:line="41" pos:column="38">f<pos:position pos:line="41" pos:column="39"/></name> <operator pos:line="41" pos:column="40">==<pos:position pos:line="41" pos:column="42"/></operator> <literal type="char" pos:line="41" pos:column="43">'\''<pos:position pos:line="41" pos:column="47"/></literal> <operator pos:line="41" pos:column="48">||<pos:position pos:line="41" pos:column="50"/></operator> <operator pos:line="41" pos:column="51">*<pos:position pos:line="41" pos:column="52"/></operator><name pos:line="41" pos:column="52">f<pos:position pos:line="41" pos:column="53"/></name> <operator pos:line="41" pos:column="54">==<pos:position pos:line="41" pos:column="56"/></operator> <literal type="char" pos:line="41" pos:column="57">'"'<pos:position pos:line="41" pos:column="60"/></literal></expr>)<pos:position pos:line="41" pos:column="61"/></condition><then pos:line="41" pos:column="61"> <block pos:line="41" pos:column="62">{
					<if pos:line="42" pos:column="41">if <condition pos:line="42" pos:column="44">(<expr><operator pos:line="42" pos:column="45">!<pos:position pos:line="42" pos:column="46"/></operator><name pos:line="42" pos:column="46">in_quote<pos:position pos:line="42" pos:column="54"/></name></expr>)<pos:position pos:line="42" pos:column="55"/></condition><then pos:line="42" pos:column="55"> <block pos:line="42" pos:column="56">{
						<expr_stmt><expr><name pos:line="43" pos:column="49">in_quote<pos:position pos:line="43" pos:column="57"/></name> <operator pos:line="43" pos:column="58">=<pos:position pos:line="43" pos:column="59"/></operator> <operator pos:line="43" pos:column="60">*<pos:position pos:line="43" pos:column="61"/></operator><name pos:line="43" pos:column="61">f<pos:position pos:line="43" pos:column="62"/></name><operator pos:line="43" pos:column="62">++<pos:position pos:line="43" pos:column="64"/></operator></expr>;<pos:position pos:line="43" pos:column="65"/></expr_stmt>
						<continue pos:line="44" pos:column="49">continue;<pos:position pos:line="44" pos:column="58"/></continue>
					}<pos:position pos:line="45" pos:column="42"/></block></then></if>
					<if pos:line="46" pos:column="41">if <condition pos:line="46" pos:column="44">(<expr><operator pos:line="46" pos:column="45">*<pos:position pos:line="46" pos:column="46"/></operator><name pos:line="46" pos:column="46">f<pos:position pos:line="46" pos:column="47"/></name> <operator pos:line="46" pos:column="48">==<pos:position pos:line="46" pos:column="50"/></operator> <name pos:line="46" pos:column="51">in_quote<pos:position pos:line="46" pos:column="59"/></name> <operator pos:line="46" pos:column="60">&amp;&amp;<pos:position pos:line="46" pos:column="70"/></operator> <operator pos:line="46" pos:column="63">*<pos:position pos:line="46" pos:column="64"/></operator><operator pos:line="46" pos:column="64">++<pos:position pos:line="46" pos:column="66"/></operator><name pos:line="46" pos:column="66">f<pos:position pos:line="46" pos:column="67"/></name> <operator pos:line="46" pos:column="68">!=<pos:position pos:line="46" pos:column="70"/></operator> <name pos:line="46" pos:column="71">in_quote<pos:position pos:line="46" pos:column="79"/></name></expr>)<pos:position pos:line="46" pos:column="80"/></condition><then pos:line="46" pos:column="80"> <block pos:line="46" pos:column="81">{
						<expr_stmt><expr><name pos:line="47" pos:column="49">in_quote<pos:position pos:line="47" pos:column="57"/></name> <operator pos:line="47" pos:column="58">=<pos:position pos:line="47" pos:column="59"/></operator> <literal type="char" pos:line="47" pos:column="60">'\0'<pos:position pos:line="47" pos:column="64"/></literal></expr>;<pos:position pos:line="47" pos:column="65"/></expr_stmt>
						<continue pos:line="48" pos:column="49">continue;<pos:position pos:line="48" pos:column="58"/></continue>
					}<pos:position pos:line="49" pos:column="42"/></block></then></if>
				}<pos:position pos:line="50" pos:column="34"/></block></then></if>
				<expr_stmt><expr><operator pos:line="51" pos:column="33">*<pos:position pos:line="51" pos:column="34"/></operator><name pos:line="51" pos:column="34">t<pos:position pos:line="51" pos:column="35"/></name><operator pos:line="51" pos:column="35">++<pos:position pos:line="51" pos:column="37"/></operator> <operator pos:line="51" pos:column="38">=<pos:position pos:line="51" pos:column="39"/></operator> <operator pos:line="51" pos:column="40">*<pos:position pos:line="51" pos:column="41"/></operator><name pos:line="51" pos:column="41">f<pos:position pos:line="51" pos:column="42"/></name><operator pos:line="51" pos:column="42">++<pos:position pos:line="51" pos:column="44"/></operator></expr>;<pos:position pos:line="51" pos:column="45"/></expr_stmt>
			}<pos:position pos:line="52" pos:column="26"/></block></while>
			<expr_stmt><expr><operator pos:line="53" pos:column="25">*<pos:position pos:line="53" pos:column="26"/></operator><name pos:line="53" pos:column="26">t<pos:position pos:line="53" pos:column="27"/></name><operator pos:line="53" pos:column="27">++<pos:position pos:line="53" pos:column="29"/></operator> <operator pos:line="53" pos:column="30">=<pos:position pos:line="53" pos:column="31"/></operator> <literal type="char" pos:line="53" pos:column="32">'\0'<pos:position pos:line="53" pos:column="36"/></literal></expr>;<pos:position pos:line="53" pos:column="37"/></expr_stmt>
		}<pos:position pos:line="54" pos:column="18"/></block></for>

		<comment type="block" pos:line="56" pos:column="17">/* check to see if we've already been given '-l user' in
		 * the remote-shell command */</comment>
		<for pos:line="58" pos:column="17">for <control pos:line="58" pos:column="21">(<init><expr><name pos:line="58" pos:column="22">i<pos:position pos:line="58" pos:column="23"/></name> <operator pos:line="58" pos:column="24">=<pos:position pos:line="58" pos:column="25"/></operator> <literal type="number" pos:line="58" pos:column="26">0<pos:position pos:line="58" pos:column="27"/></literal></expr>;<pos:position pos:line="58" pos:column="28"/></init> <condition><expr><name pos:line="58" pos:column="29">i<pos:position pos:line="58" pos:column="30"/></name> <operator pos:line="58" pos:column="31">&lt;<pos:position pos:line="58" pos:column="35"/></operator> <name pos:line="58" pos:column="33">argc<pos:position pos:line="58" pos:column="37"/></name><operator pos:line="58" pos:column="37">-<pos:position pos:line="58" pos:column="38"/></operator><literal type="number" pos:line="58" pos:column="38">1<pos:position pos:line="58" pos:column="39"/></literal></expr>;<pos:position pos:line="58" pos:column="40"/></condition> <incr><expr><name pos:line="58" pos:column="41">i<pos:position pos:line="58" pos:column="42"/></name><operator pos:line="58" pos:column="42">++<pos:position pos:line="58" pos:column="44"/></operator></expr></incr>)<pos:position pos:line="58" pos:column="45"/></control> <block pos:line="58" pos:column="46">{
			<if pos:line="59" pos:column="25">if <condition pos:line="59" pos:column="28">(<expr><operator pos:line="59" pos:column="29">!<pos:position pos:line="59" pos:column="30"/></operator><call><name pos:line="59" pos:column="30">strcmp<pos:position pos:line="59" pos:column="36"/></name><argument_list pos:line="59" pos:column="36">(<argument><expr><name><name pos:line="59" pos:column="37">args<pos:position pos:line="59" pos:column="41"/></name><index pos:line="59" pos:column="41">[<expr><name pos:line="59" pos:column="42">i<pos:position pos:line="59" pos:column="43"/></name></expr>]<pos:position pos:line="59" pos:column="44"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="59" pos:column="46">"-l"<pos:position pos:line="59" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="59" pos:column="51"/></argument_list></call> <operator pos:line="59" pos:column="52">&amp;&amp;<pos:position pos:line="59" pos:column="62"/></operator> <name><name pos:line="59" pos:column="55">args<pos:position pos:line="59" pos:column="59"/></name><index pos:line="59" pos:column="59">[<expr><name pos:line="59" pos:column="60">i<pos:position pos:line="59" pos:column="61"/></name><operator pos:line="59" pos:column="61">+<pos:position pos:line="59" pos:column="62"/></operator><literal type="number" pos:line="59" pos:column="62">1<pos:position pos:line="59" pos:column="63"/></literal></expr>]<pos:position pos:line="59" pos:column="64"/></index><index pos:line="59" pos:column="64">[<expr><literal type="number" pos:line="59" pos:column="65">0<pos:position pos:line="59" pos:column="66"/></literal></expr>]<pos:position pos:line="59" pos:column="67"/></index></name> <operator pos:line="59" pos:column="68">!=<pos:position pos:line="59" pos:column="70"/></operator> <literal type="char" pos:line="59" pos:column="71">'-'<pos:position pos:line="59" pos:column="74"/></literal></expr>)<pos:position pos:line="59" pos:column="75"/></condition><then pos:line="59" pos:column="75">
				<block type="pseudo"><expr_stmt><expr><name pos:line="60" pos:column="33">dash_l_set<pos:position pos:line="60" pos:column="43"/></name> <operator pos:line="60" pos:column="44">=<pos:position pos:line="60" pos:column="45"/></operator> <literal type="number" pos:line="60" pos:column="46">1<pos:position pos:line="60" pos:column="47"/></literal></expr>;<pos:position pos:line="60" pos:column="48"/></expr_stmt></block></then></if>
		}<pos:position pos:line="61" pos:column="18"/></block></for>

<cpp:ifdef pos:line="63" pos:column="1">#<cpp:directive pos:line="63" pos:column="2">ifdef<pos:position pos:line="63" pos:column="7"/></cpp:directive> <name pos:line="63" pos:column="8">HAVE_REMSH<pos:position pos:line="63" pos:column="18"/></name></cpp:ifdef>
		<comment type="block" pos:line="64" pos:column="17">/* remsh (on HPUX) takes the arguments the other way around */</comment>
		<expr_stmt><expr><name><name pos:line="65" pos:column="17">args<pos:position pos:line="65" pos:column="21"/></name><index pos:line="65" pos:column="21">[<expr><name pos:line="65" pos:column="22">argc<pos:position pos:line="65" pos:column="26"/></name><operator pos:line="65" pos:column="26">++<pos:position pos:line="65" pos:column="28"/></operator></expr>]<pos:position pos:line="65" pos:column="29"/></index></name> <operator pos:line="65" pos:column="30">=<pos:position pos:line="65" pos:column="31"/></operator> <name pos:line="65" pos:column="32">machine<pos:position pos:line="65" pos:column="39"/></name></expr>;<pos:position pos:line="65" pos:column="40"/></expr_stmt>
		<if pos:line="66" pos:column="17">if <condition pos:line="66" pos:column="20">(<expr><name pos:line="66" pos:column="21">user<pos:position pos:line="66" pos:column="25"/></name> <operator pos:line="66" pos:column="26">&amp;&amp;<pos:position pos:line="66" pos:column="36"/></operator> <operator pos:line="66" pos:column="29">!<pos:position pos:line="66" pos:column="30"/></operator><operator pos:line="66" pos:column="30">(<pos:position pos:line="66" pos:column="31"/></operator><name pos:line="66" pos:column="31">daemon_over_rsh<pos:position pos:line="66" pos:column="46"/></name> <operator pos:line="66" pos:column="47">&amp;&amp;<pos:position pos:line="66" pos:column="57"/></operator> <name pos:line="66" pos:column="50">dash_l_set<pos:position pos:line="66" pos:column="60"/></name><operator pos:line="66" pos:column="60">)<pos:position pos:line="66" pos:column="61"/></operator></expr>)<pos:position pos:line="66" pos:column="62"/></condition><then pos:line="66" pos:column="62"> <block pos:line="66" pos:column="63">{
			<expr_stmt><expr><name><name pos:line="67" pos:column="25">args<pos:position pos:line="67" pos:column="29"/></name><index pos:line="67" pos:column="29">[<expr><name pos:line="67" pos:column="30">argc<pos:position pos:line="67" pos:column="34"/></name><operator pos:line="67" pos:column="34">++<pos:position pos:line="67" pos:column="36"/></operator></expr>]<pos:position pos:line="67" pos:column="37"/></index></name> <operator pos:line="67" pos:column="38">=<pos:position pos:line="67" pos:column="39"/></operator> <literal type="string" pos:line="67" pos:column="40">"-l"<pos:position pos:line="67" pos:column="44"/></literal></expr>;<pos:position pos:line="67" pos:column="45"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="68" pos:column="25">args<pos:position pos:line="68" pos:column="29"/></name><index pos:line="68" pos:column="29">[<expr><name pos:line="68" pos:column="30">argc<pos:position pos:line="68" pos:column="34"/></name><operator pos:line="68" pos:column="34">++<pos:position pos:line="68" pos:column="36"/></operator></expr>]<pos:position pos:line="68" pos:column="37"/></index></name> <operator pos:line="68" pos:column="38">=<pos:position pos:line="68" pos:column="39"/></operator> <name pos:line="68" pos:column="40">user<pos:position pos:line="68" pos:column="44"/></name></expr>;<pos:position pos:line="68" pos:column="45"/></expr_stmt>
		}<pos:position pos:line="69" pos:column="18"/></block></then></if>
<cpp:else pos:line="70" pos:column="1">#<cpp:directive pos:line="70" pos:column="2">else<pos:position pos:line="70" pos:column="6"/></cpp:directive></cpp:else>
		<if pos:line="71" pos:column="17">if <condition pos:line="71" pos:column="20">(<expr><name pos:line="71" pos:column="21">user<pos:position pos:line="71" pos:column="25"/></name> <operator pos:line="71" pos:column="26">&amp;&amp;<pos:position pos:line="71" pos:column="36"/></operator> <operator pos:line="71" pos:column="29">!<pos:position pos:line="71" pos:column="30"/></operator><operator pos:line="71" pos:column="30">(<pos:position pos:line="71" pos:column="31"/></operator><name pos:line="71" pos:column="31">daemon_over_rsh<pos:position pos:line="71" pos:column="46"/></name> <operator pos:line="71" pos:column="47">&amp;&amp;<pos:position pos:line="71" pos:column="57"/></operator> <name pos:line="71" pos:column="50">dash_l_set<pos:position pos:line="71" pos:column="60"/></name><operator pos:line="71" pos:column="60">)<pos:position pos:line="71" pos:column="61"/></operator></expr>)<pos:position pos:line="71" pos:column="62"/></condition><then pos:line="71" pos:column="62"> <block pos:line="71" pos:column="63">{
			<expr_stmt><expr><name><name pos:line="72" pos:column="25">args<pos:position pos:line="72" pos:column="29"/></name><index pos:line="72" pos:column="29">[<expr><name pos:line="72" pos:column="30">argc<pos:position pos:line="72" pos:column="34"/></name><operator pos:line="72" pos:column="34">++<pos:position pos:line="72" pos:column="36"/></operator></expr>]<pos:position pos:line="72" pos:column="37"/></index></name> <operator pos:line="72" pos:column="38">=<pos:position pos:line="72" pos:column="39"/></operator> <literal type="string" pos:line="72" pos:column="40">"-l"<pos:position pos:line="72" pos:column="44"/></literal></expr>;<pos:position pos:line="72" pos:column="45"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="73" pos:column="25">args<pos:position pos:line="73" pos:column="29"/></name><index pos:line="73" pos:column="29">[<expr><name pos:line="73" pos:column="30">argc<pos:position pos:line="73" pos:column="34"/></name><operator pos:line="73" pos:column="34">++<pos:position pos:line="73" pos:column="36"/></operator></expr>]<pos:position pos:line="73" pos:column="37"/></index></name> <operator pos:line="73" pos:column="38">=<pos:position pos:line="73" pos:column="39"/></operator> <name pos:line="73" pos:column="40">user<pos:position pos:line="73" pos:column="44"/></name></expr>;<pos:position pos:line="73" pos:column="45"/></expr_stmt>
		}<pos:position pos:line="74" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name><name pos:line="75" pos:column="17">args<pos:position pos:line="75" pos:column="21"/></name><index pos:line="75" pos:column="21">[<expr><name pos:line="75" pos:column="22">argc<pos:position pos:line="75" pos:column="26"/></name><operator pos:line="75" pos:column="26">++<pos:position pos:line="75" pos:column="28"/></operator></expr>]<pos:position pos:line="75" pos:column="29"/></index></name> <operator pos:line="75" pos:column="30">=<pos:position pos:line="75" pos:column="31"/></operator> <name pos:line="75" pos:column="32">machine<pos:position pos:line="75" pos:column="39"/></name></expr>;<pos:position pos:line="75" pos:column="40"/></expr_stmt>
<cpp:endif pos:line="76" pos:column="1">#<cpp:directive pos:line="76" pos:column="2">endif<pos:position pos:line="76" pos:column="7"/></cpp:directive></cpp:endif>

		<expr_stmt><expr><name><name pos:line="78" pos:column="17">args<pos:position pos:line="78" pos:column="21"/></name><index pos:line="78" pos:column="21">[<expr><name pos:line="78" pos:column="22">argc<pos:position pos:line="78" pos:column="26"/></name><operator pos:line="78" pos:column="26">++<pos:position pos:line="78" pos:column="28"/></operator></expr>]<pos:position pos:line="78" pos:column="29"/></index></name> <operator pos:line="78" pos:column="30">=<pos:position pos:line="78" pos:column="31"/></operator> <name pos:line="78" pos:column="32">rsync_path<pos:position pos:line="78" pos:column="42"/></name></expr>;<pos:position pos:line="78" pos:column="43"/></expr_stmt>

		<if pos:line="80" pos:column="17">if <condition pos:line="80" pos:column="20">(<expr><name pos:line="80" pos:column="21">blocking_io<pos:position pos:line="80" pos:column="32"/></name> <operator pos:line="80" pos:column="33">&lt;<pos:position pos:line="80" pos:column="37"/></operator> <literal type="number" pos:line="80" pos:column="35">0<pos:position pos:line="80" pos:column="36"/></literal></expr>)<pos:position pos:line="80" pos:column="37"/></condition><then pos:line="80" pos:column="37"> <block pos:line="80" pos:column="38">{
			<decl_stmt><decl><type><name pos:line="81" pos:column="25">char<pos:position pos:line="81" pos:column="29"/></name> <modifier pos:line="81" pos:column="30">*<pos:position pos:line="81" pos:column="31"/></modifier></type><name pos:line="81" pos:column="31">cp<pos:position pos:line="81" pos:column="33"/></name></decl>;<pos:position pos:line="81" pos:column="34"/></decl_stmt>
			<if pos:line="82" pos:column="25">if <condition pos:line="82" pos:column="28">(<expr><operator pos:line="82" pos:column="29">(<pos:position pos:line="82" pos:column="30"/></operator><name pos:line="82" pos:column="30">cp<pos:position pos:line="82" pos:column="32"/></name> <operator pos:line="82" pos:column="33">=<pos:position pos:line="82" pos:column="34"/></operator> <call><name pos:line="82" pos:column="35">strrchr<pos:position pos:line="82" pos:column="42"/></name><argument_list pos:line="82" pos:column="42">(<argument><expr><name pos:line="82" pos:column="43">cmd<pos:position pos:line="82" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="82" pos:column="48">'/'<pos:position pos:line="82" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="82" pos:column="52"/></argument_list></call><operator pos:line="82" pos:column="52">)<pos:position pos:line="82" pos:column="53"/></operator> <operator pos:line="82" pos:column="54">!=<pos:position pos:line="82" pos:column="56"/></operator> <name pos:line="82" pos:column="57">NULL<pos:position pos:line="82" pos:column="61"/></name></expr>)<pos:position pos:line="82" pos:column="62"/></condition><then pos:line="82" pos:column="62">
				<block type="pseudo"><expr_stmt><expr><name pos:line="83" pos:column="33">cp<pos:position pos:line="83" pos:column="35"/></name><operator pos:line="83" pos:column="35">++<pos:position pos:line="83" pos:column="37"/></operator></expr>;<pos:position pos:line="83" pos:column="38"/></expr_stmt></block></then>
			<else pos:line="84" pos:column="25">else
				<block type="pseudo"><expr_stmt><expr><name pos:line="85" pos:column="33">cp<pos:position pos:line="85" pos:column="35"/></name> <operator pos:line="85" pos:column="36">=<pos:position pos:line="85" pos:column="37"/></operator> <name pos:line="85" pos:column="38">cmd<pos:position pos:line="85" pos:column="41"/></name></expr>;<pos:position pos:line="85" pos:column="42"/></expr_stmt></block></else></if>
			<if pos:line="86" pos:column="25">if <condition pos:line="86" pos:column="28">(<expr><call><name pos:line="86" pos:column="29">strcmp<pos:position pos:line="86" pos:column="35"/></name><argument_list pos:line="86" pos:column="35">(<argument><expr><name pos:line="86" pos:column="36">cp<pos:position pos:line="86" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="86" pos:column="40">"rsh"<pos:position pos:line="86" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="86" pos:column="46"/></argument_list></call> <operator pos:line="86" pos:column="47">==<pos:position pos:line="86" pos:column="49"/></operator> <literal type="number" pos:line="86" pos:column="50">0<pos:position pos:line="86" pos:column="51"/></literal> <operator pos:line="86" pos:column="52">||<pos:position pos:line="86" pos:column="54"/></operator> <call><name pos:line="86" pos:column="55">strcmp<pos:position pos:line="86" pos:column="61"/></name><argument_list pos:line="86" pos:column="61">(<argument><expr><name pos:line="86" pos:column="62">cp<pos:position pos:line="86" pos:column="64"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="86" pos:column="66">"remsh"<pos:position pos:line="86" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="86" pos:column="74"/></argument_list></call> <operator pos:line="86" pos:column="75">==<pos:position pos:line="86" pos:column="77"/></operator> <literal type="number" pos:line="86" pos:column="78">0<pos:position pos:line="86" pos:column="79"/></literal></expr>)<pos:position pos:line="86" pos:column="80"/></condition><then pos:line="86" pos:column="80">
				<block type="pseudo"><expr_stmt><expr><name pos:line="87" pos:column="33">blocking_io<pos:position pos:line="87" pos:column="44"/></name> <operator pos:line="87" pos:column="45">=<pos:position pos:line="87" pos:column="46"/></operator> <literal type="number" pos:line="87" pos:column="47">1<pos:position pos:line="87" pos:column="48"/></literal></expr>;<pos:position pos:line="87" pos:column="49"/></expr_stmt></block></then></if>
		}<pos:position pos:line="88" pos:column="18"/></block></then></if>

		<expr_stmt><expr><call><name pos:line="90" pos:column="17">server_options<pos:position pos:line="90" pos:column="31"/></name><argument_list pos:line="90" pos:column="31">(<argument><expr><name pos:line="90" pos:column="32">args<pos:position pos:line="90" pos:column="36"/></name></expr></argument>,<argument><expr><operator pos:line="90" pos:column="37">&amp;<pos:position pos:line="90" pos:column="42"/></operator><name pos:line="90" pos:column="38">argc<pos:position pos:line="90" pos:column="42"/></name></expr></argument>)<pos:position pos:line="90" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="44"/></expr_stmt>

		<if pos:line="92" pos:column="17">if <condition pos:line="92" pos:column="20">(<expr><name pos:line="92" pos:column="21">argc<pos:position pos:line="92" pos:column="25"/></name> <operator pos:line="92" pos:column="26">&gt;=<pos:position pos:line="92" pos:column="31"/></operator> <name pos:line="92" pos:column="29">MAX_ARGS<pos:position pos:line="92" pos:column="37"/></name> <operator pos:line="92" pos:column="38">-<pos:position pos:line="92" pos:column="39"/></operator> <literal type="number" pos:line="92" pos:column="40">2<pos:position pos:line="92" pos:column="41"/></literal></expr>)<pos:position pos:line="92" pos:column="42"/></condition><then pos:line="92" pos:column="42"> <block pos:line="92" pos:column="43">{
			<expr_stmt><expr><call><name pos:line="93" pos:column="25">rprintf<pos:position pos:line="93" pos:column="32"/></name><argument_list pos:line="93" pos:column="32">(<argument><expr><name pos:line="93" pos:column="33">FERROR<pos:position pos:line="93" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="93" pos:column="41">"internal: args[] overflowed in do_cmd()\n"<pos:position pos:line="93" pos:column="84"/></literal></expr></argument>)<pos:position pos:line="93" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="86"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="94" pos:column="25">exit_cleanup<pos:position pos:line="94" pos:column="37"/></name><argument_list pos:line="94" pos:column="37">(<argument><expr><name pos:line="94" pos:column="38">RERR_SYNTAX<pos:position pos:line="94" pos:column="49"/></name></expr></argument>)<pos:position pos:line="94" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="51"/></expr_stmt>
		}<pos:position pos:line="95" pos:column="18"/></block></then></if>
	}<pos:position pos:line="96" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name><name pos:line="98" pos:column="9">args<pos:position pos:line="98" pos:column="13"/></name><index pos:line="98" pos:column="13">[<expr><name pos:line="98" pos:column="14">argc<pos:position pos:line="98" pos:column="18"/></name><operator pos:line="98" pos:column="18">++<pos:position pos:line="98" pos:column="20"/></operator></expr>]<pos:position pos:line="98" pos:column="21"/></index></name> <operator pos:line="98" pos:column="22">=<pos:position pos:line="98" pos:column="23"/></operator> <literal type="string" pos:line="98" pos:column="24">"."<pos:position pos:line="98" pos:column="27"/></literal></expr>;<pos:position pos:line="98" pos:column="28"/></expr_stmt>

	<if pos:line="100" pos:column="9">if <condition pos:line="100" pos:column="12">(<expr><operator pos:line="100" pos:column="13">!<pos:position pos:line="100" pos:column="14"/></operator><name pos:line="100" pos:column="14">daemon_over_rsh<pos:position pos:line="100" pos:column="29"/></name> <operator pos:line="100" pos:column="30">&amp;&amp;<pos:position pos:line="100" pos:column="40"/></operator> <name pos:line="100" pos:column="33">path<pos:position pos:line="100" pos:column="37"/></name> <operator pos:line="100" pos:column="38">&amp;&amp;<pos:position pos:line="100" pos:column="48"/></operator> <operator pos:line="100" pos:column="41">*<pos:position pos:line="100" pos:column="42"/></operator><name pos:line="100" pos:column="42">path<pos:position pos:line="100" pos:column="46"/></name></expr>)<pos:position pos:line="100" pos:column="47"/></condition><then pos:line="100" pos:column="47">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="101" pos:column="17">args<pos:position pos:line="101" pos:column="21"/></name><index pos:line="101" pos:column="21">[<expr><name pos:line="101" pos:column="22">argc<pos:position pos:line="101" pos:column="26"/></name><operator pos:line="101" pos:column="26">++<pos:position pos:line="101" pos:column="28"/></operator></expr>]<pos:position pos:line="101" pos:column="29"/></index></name> <operator pos:line="101" pos:column="30">=<pos:position pos:line="101" pos:column="31"/></operator> <name pos:line="101" pos:column="32">path<pos:position pos:line="101" pos:column="36"/></name></expr>;<pos:position pos:line="101" pos:column="37"/></expr_stmt></block></then></if>

	<expr_stmt><expr><name><name pos:line="103" pos:column="9">args<pos:position pos:line="103" pos:column="13"/></name><index pos:line="103" pos:column="13">[<expr><name pos:line="103" pos:column="14">argc<pos:position pos:line="103" pos:column="18"/></name></expr>]<pos:position pos:line="103" pos:column="19"/></index></name> <operator pos:line="103" pos:column="20">=<pos:position pos:line="103" pos:column="21"/></operator> <name pos:line="103" pos:column="22">NULL<pos:position pos:line="103" pos:column="26"/></name></expr>;<pos:position pos:line="103" pos:column="27"/></expr_stmt>

	<if pos:line="105" pos:column="9">if <condition pos:line="105" pos:column="12">(<expr><name pos:line="105" pos:column="13">verbose<pos:position pos:line="105" pos:column="20"/></name> <operator pos:line="105" pos:column="21">&gt;<pos:position pos:line="105" pos:column="25"/></operator> <literal type="number" pos:line="105" pos:column="23">3<pos:position pos:line="105" pos:column="24"/></literal></expr>)<pos:position pos:line="105" pos:column="25"/></condition><then pos:line="105" pos:column="25"> <block pos:line="105" pos:column="26">{
		<for pos:line="106" pos:column="17">for <control pos:line="106" pos:column="21">(<init><expr><name pos:line="106" pos:column="22">i<pos:position pos:line="106" pos:column="23"/></name> <operator pos:line="106" pos:column="24">=<pos:position pos:line="106" pos:column="25"/></operator> <literal type="number" pos:line="106" pos:column="26">0<pos:position pos:line="106" pos:column="27"/></literal></expr>;<pos:position pos:line="106" pos:column="28"/></init> <condition><expr><name pos:line="106" pos:column="29">i<pos:position pos:line="106" pos:column="30"/></name> <operator pos:line="106" pos:column="31">&lt;<pos:position pos:line="106" pos:column="35"/></operator> <name pos:line="106" pos:column="33">argc<pos:position pos:line="106" pos:column="37"/></name></expr>;<pos:position pos:line="106" pos:column="38"/></condition> <incr><expr><name pos:line="106" pos:column="39">i<pos:position pos:line="106" pos:column="40"/></name><operator pos:line="106" pos:column="40">++<pos:position pos:line="106" pos:column="42"/></operator></expr></incr>)<pos:position pos:line="106" pos:column="43"/></control>
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="107" pos:column="25">rprintf<pos:position pos:line="107" pos:column="32"/></name><argument_list pos:line="107" pos:column="32">(<argument><expr><name pos:line="107" pos:column="33">FCLIENT<pos:position pos:line="107" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="107" pos:column="42">"cmd[%d]=%s "<pos:position pos:line="107" pos:column="55"/></literal></expr></argument>, <argument><expr><name pos:line="107" pos:column="57">i<pos:position pos:line="107" pos:column="58"/></name></expr></argument>, <argument><expr><name><name pos:line="107" pos:column="60">args<pos:position pos:line="107" pos:column="64"/></name><index pos:line="107" pos:column="64">[<expr><name pos:line="107" pos:column="65">i<pos:position pos:line="107" pos:column="66"/></name></expr>]<pos:position pos:line="107" pos:column="67"/></index></name></expr></argument>)<pos:position pos:line="107" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="107" pos:column="69"/></expr_stmt></block></for>
		<expr_stmt><expr><call><name pos:line="108" pos:column="17">rprintf<pos:position pos:line="108" pos:column="24"/></name><argument_list pos:line="108" pos:column="24">(<argument><expr><name pos:line="108" pos:column="25">FCLIENT<pos:position pos:line="108" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="108" pos:column="34">"\n"<pos:position pos:line="108" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="108" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="108" pos:column="40"/></expr_stmt>
	}<pos:position pos:line="109" pos:column="10"/></block></then></if>

	<if pos:line="111" pos:column="9">if <condition pos:line="111" pos:column="12">(<expr><name pos:line="111" pos:column="13">read_batch<pos:position pos:line="111" pos:column="23"/></name></expr>)<pos:position pos:line="111" pos:column="24"/></condition><then pos:line="111" pos:column="24"> <block pos:line="111" pos:column="25">{
		<decl_stmt><decl><type><name pos:line="112" pos:column="17">int<pos:position pos:line="112" pos:column="20"/></name></type> <name><name pos:line="112" pos:column="21">from_gen_pipe<pos:position pos:line="112" pos:column="34"/></name><index pos:line="112" pos:column="34">[<expr><literal type="number" pos:line="112" pos:column="35">2<pos:position pos:line="112" pos:column="36"/></literal></expr>]<pos:position pos:line="112" pos:column="37"/></index></name></decl>;<pos:position pos:line="112" pos:column="38"/></decl_stmt>
		<if pos:line="113" pos:column="17">if <condition pos:line="113" pos:column="20">(<expr><call><name pos:line="113" pos:column="21">fd_pair<pos:position pos:line="113" pos:column="28"/></name><argument_list pos:line="113" pos:column="28">(<argument><expr><name pos:line="113" pos:column="29">from_gen_pipe<pos:position pos:line="113" pos:column="42"/></name></expr></argument>)<pos:position pos:line="113" pos:column="43"/></argument_list></call> <operator pos:line="113" pos:column="44">&lt;<pos:position pos:line="113" pos:column="48"/></operator> <literal type="number" pos:line="113" pos:column="46">0<pos:position pos:line="113" pos:column="47"/></literal></expr>)<pos:position pos:line="113" pos:column="48"/></condition><then pos:line="113" pos:column="48"> <block pos:line="113" pos:column="49">{
			<expr_stmt><expr><call><name pos:line="114" pos:column="25">rsyserr<pos:position pos:line="114" pos:column="32"/></name><argument_list pos:line="114" pos:column="32">(<argument><expr><name pos:line="114" pos:column="33">FERROR<pos:position pos:line="114" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="114" pos:column="41">errno<pos:position pos:line="114" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="114" pos:column="48">"pipe"<pos:position pos:line="114" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="114" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="114" pos:column="56"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="115" pos:column="25">exit_cleanup<pos:position pos:line="115" pos:column="37"/></name><argument_list pos:line="115" pos:column="37">(<argument><expr><name pos:line="115" pos:column="38">RERR_IPC<pos:position pos:line="115" pos:column="46"/></name></expr></argument>)<pos:position pos:line="115" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="115" pos:column="48"/></expr_stmt>
		}<pos:position pos:line="116" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name pos:line="117" pos:column="17">batch_gen_fd<pos:position pos:line="117" pos:column="29"/></name> <operator pos:line="117" pos:column="30">=<pos:position pos:line="117" pos:column="31"/></operator> <name><name pos:line="117" pos:column="32">from_gen_pipe<pos:position pos:line="117" pos:column="45"/></name><index pos:line="117" pos:column="45">[<expr><literal type="number" pos:line="117" pos:column="46">0<pos:position pos:line="117" pos:column="47"/></literal></expr>]<pos:position pos:line="117" pos:column="48"/></index></name></expr>;<pos:position pos:line="117" pos:column="49"/></expr_stmt>
		<expr_stmt><expr><operator pos:line="118" pos:column="17">*<pos:position pos:line="118" pos:column="18"/></operator><name pos:line="118" pos:column="18">f_out<pos:position pos:line="118" pos:column="23"/></name> <operator pos:line="118" pos:column="24">=<pos:position pos:line="118" pos:column="25"/></operator> <name><name pos:line="118" pos:column="26">from_gen_pipe<pos:position pos:line="118" pos:column="39"/></name><index pos:line="118" pos:column="39">[<expr><literal type="number" pos:line="118" pos:column="40">1<pos:position pos:line="118" pos:column="41"/></literal></expr>]<pos:position pos:line="118" pos:column="42"/></index></name></expr>;<pos:position pos:line="118" pos:column="43"/></expr_stmt>
		<expr_stmt><expr><operator pos:line="119" pos:column="17">*<pos:position pos:line="119" pos:column="18"/></operator><name pos:line="119" pos:column="18">f_in<pos:position pos:line="119" pos:column="22"/></name> <operator pos:line="119" pos:column="23">=<pos:position pos:line="119" pos:column="24"/></operator> <name pos:line="119" pos:column="25">batch_fd<pos:position pos:line="119" pos:column="33"/></name></expr>;<pos:position pos:line="119" pos:column="34"/></expr_stmt>
		<expr_stmt><expr><name pos:line="120" pos:column="17">ret<pos:position pos:line="120" pos:column="20"/></name> <operator pos:line="120" pos:column="21">=<pos:position pos:line="120" pos:column="22"/></operator> <operator pos:line="120" pos:column="23">-<pos:position pos:line="120" pos:column="24"/></operator><literal type="number" pos:line="120" pos:column="24">1<pos:position pos:line="120" pos:column="25"/></literal></expr>;<pos:position pos:line="120" pos:column="26"/></expr_stmt> <comment type="block" pos:line="120" pos:column="27">/* no child pid */</comment>
	}<pos:position pos:line="121" pos:column="10"/></block></then> <elseif pos:line="121" pos:column="11">else <if pos:line="121" pos:column="16">if <condition pos:line="121" pos:column="19">(<expr><name pos:line="121" pos:column="20">local_server<pos:position pos:line="121" pos:column="32"/></name></expr>)<pos:position pos:line="121" pos:column="33"/></condition><then pos:line="121" pos:column="33"> <block pos:line="121" pos:column="34">{
		<comment type="block" pos:line="122" pos:column="17">/* If the user didn't request --[no-]whole-file, force
		 * it on, but only if we're not batch processing. */</comment>
		<if pos:line="124" pos:column="17">if <condition pos:line="124" pos:column="20">(<expr><name pos:line="124" pos:column="21">whole_file<pos:position pos:line="124" pos:column="31"/></name> <operator pos:line="124" pos:column="32">&lt;<pos:position pos:line="124" pos:column="36"/></operator> <literal type="number" pos:line="124" pos:column="34">0<pos:position pos:line="124" pos:column="35"/></literal> <operator pos:line="124" pos:column="36">&amp;&amp;<pos:position pos:line="124" pos:column="46"/></operator> <operator pos:line="124" pos:column="39">!<pos:position pos:line="124" pos:column="40"/></operator><name pos:line="124" pos:column="40">write_batch<pos:position pos:line="124" pos:column="51"/></name></expr>)<pos:position pos:line="124" pos:column="52"/></condition><then pos:line="124" pos:column="52">
			<block type="pseudo"><expr_stmt><expr><name pos:line="125" pos:column="25">whole_file<pos:position pos:line="125" pos:column="35"/></name> <operator pos:line="125" pos:column="36">=<pos:position pos:line="125" pos:column="37"/></operator> <literal type="number" pos:line="125" pos:column="38">1<pos:position pos:line="125" pos:column="39"/></literal></expr>;<pos:position pos:line="125" pos:column="40"/></expr_stmt></block></then></if>
		<expr_stmt><expr><name pos:line="126" pos:column="17">ret<pos:position pos:line="126" pos:column="20"/></name> <operator pos:line="126" pos:column="21">=<pos:position pos:line="126" pos:column="22"/></operator> <call><name pos:line="126" pos:column="23">local_child<pos:position pos:line="126" pos:column="34"/></name><argument_list pos:line="126" pos:column="34">(<argument><expr><name pos:line="126" pos:column="35">argc<pos:position pos:line="126" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="126" pos:column="41">args<pos:position pos:line="126" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="126" pos:column="47">f_in<pos:position pos:line="126" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="126" pos:column="53">f_out<pos:position pos:line="126" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="126" pos:column="60">child_main<pos:position pos:line="126" pos:column="70"/></name></expr></argument>)<pos:position pos:line="126" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="126" pos:column="72"/></expr_stmt>
	}<pos:position pos:line="127" pos:column="10"/></block></then></if></elseif> <else pos:line="127" pos:column="11">else
		<block type="pseudo"><expr_stmt><expr><name pos:line="128" pos:column="17">ret<pos:position pos:line="128" pos:column="20"/></name> <operator pos:line="128" pos:column="21">=<pos:position pos:line="128" pos:column="22"/></operator> <call><name pos:line="128" pos:column="23">piped_child<pos:position pos:line="128" pos:column="34"/></name><argument_list pos:line="128" pos:column="34">(<argument><expr><name pos:line="128" pos:column="35">args<pos:position pos:line="128" pos:column="39"/></name></expr></argument>,<argument><expr><name pos:line="128" pos:column="40">f_in<pos:position pos:line="128" pos:column="44"/></name></expr></argument>,<argument><expr><name pos:line="128" pos:column="45">f_out<pos:position pos:line="128" pos:column="50"/></name></expr></argument>)<pos:position pos:line="128" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="128" pos:column="52"/></expr_stmt></block></else></if>

	<if pos:line="130" pos:column="9">if <condition pos:line="130" pos:column="12">(<expr><name pos:line="130" pos:column="13">dir<pos:position pos:line="130" pos:column="16"/></name></expr>)<pos:position pos:line="130" pos:column="17"/></condition><then pos:line="130" pos:column="17">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="131" pos:column="17">free<pos:position pos:line="131" pos:column="21"/></name><argument_list pos:line="131" pos:column="21">(<argument><expr><name pos:line="131" pos:column="22">dir<pos:position pos:line="131" pos:column="25"/></name></expr></argument>)<pos:position pos:line="131" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="131" pos:column="27"/></expr_stmt></block></then></if>

	<return pos:line="133" pos:column="9">return <expr><name pos:line="133" pos:column="16">ret<pos:position pos:line="133" pos:column="19"/></name></expr>;<pos:position pos:line="133" pos:column="20"/></return>

  <label><name pos:line="135" pos:column="3">oom<pos:position pos:line="135" pos:column="6"/></name>:<pos:position pos:line="135" pos:column="7"/></label>
	<expr_stmt><expr><call><name pos:line="136" pos:column="9">out_of_memory<pos:position pos:line="136" pos:column="22"/></name><argument_list pos:line="136" pos:column="22">(<argument><expr><literal type="string" pos:line="136" pos:column="23">"do_cmd"<pos:position pos:line="136" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="136" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="136" pos:column="33"/></expr_stmt>
	<return pos:line="137" pos:column="9">return <expr><literal type="number" pos:line="137" pos:column="16">0<pos:position pos:line="137" pos:column="17"/></literal></expr>;<pos:position pos:line="137" pos:column="18"/></return> <comment type="block" pos:line="137" pos:column="19">/* not reached */</comment>
}<pos:position pos:line="138" pos:column="2"/></block></function></unit>
