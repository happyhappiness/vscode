<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_100_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">send_filter_list<pos:position pos:line="1" pos:column="22"/></name><parameter_list pos:line="1" pos:column="22">(<parameter><decl><type><name pos:line="1" pos:column="23">int<pos:position pos:line="1" pos:column="26"/></name></type> <name pos:line="1" pos:column="27">f_out<pos:position pos:line="1" pos:column="32"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="33"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">receiver_wants_list<pos:position pos:line="3" pos:column="32"/></name> <init pos:line="3" pos:column="33">= <expr><name pos:line="3" pos:column="35">prune_empty_dirs<pos:position pos:line="3" pos:column="51"/></name>
	    <operator pos:line="4" pos:column="13">||<pos:position pos:line="4" pos:column="15"/></operator> <operator pos:line="4" pos:column="16">(<pos:position pos:line="4" pos:column="17"/></operator><name pos:line="4" pos:column="17">delete_mode<pos:position pos:line="4" pos:column="28"/></name> <operator pos:line="4" pos:column="29">&amp;&amp;<pos:position pos:line="4" pos:column="39"/></operator> <operator pos:line="4" pos:column="32">(<pos:position pos:line="4" pos:column="33"/></operator><operator pos:line="4" pos:column="33">!<pos:position pos:line="4" pos:column="34"/></operator><name pos:line="4" pos:column="34">delete_excluded<pos:position pos:line="4" pos:column="49"/></name> <operator pos:line="4" pos:column="50">||<pos:position pos:line="4" pos:column="52"/></operator> <name pos:line="4" pos:column="53">protocol_version<pos:position pos:line="4" pos:column="69"/></name> <operator pos:line="4" pos:column="70">&gt;=<pos:position pos:line="4" pos:column="75"/></operator> <literal type="number" pos:line="4" pos:column="73">29<pos:position pos:line="4" pos:column="75"/></literal><operator pos:line="4" pos:column="75">)<pos:position pos:line="4" pos:column="76"/></operator><operator pos:line="4" pos:column="76">)<pos:position pos:line="4" pos:column="77"/></operator></expr></init></decl>;<pos:position pos:line="4" pos:column="78"/></decl_stmt>

	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><name pos:line="6" pos:column="13">local_server<pos:position pos:line="6" pos:column="25"/></name> <operator pos:line="6" pos:column="26">||<pos:position pos:line="6" pos:column="28"/></operator> <operator pos:line="6" pos:column="29">(<pos:position pos:line="6" pos:column="30"/></operator><name pos:line="6" pos:column="30">am_sender<pos:position pos:line="6" pos:column="39"/></name> <operator pos:line="6" pos:column="40">&amp;&amp;<pos:position pos:line="6" pos:column="50"/></operator> <operator pos:line="6" pos:column="43">!<pos:position pos:line="6" pos:column="44"/></operator><name pos:line="6" pos:column="44">receiver_wants_list<pos:position pos:line="6" pos:column="63"/></name><operator pos:line="6" pos:column="63">)<pos:position pos:line="6" pos:column="64"/></operator></expr>)<pos:position pos:line="6" pos:column="65"/></condition><then pos:line="6" pos:column="65">
		<block type="pseudo"><expr_stmt><expr><name pos:line="7" pos:column="17">f_out<pos:position pos:line="7" pos:column="22"/></name> <operator pos:line="7" pos:column="23">=<pos:position pos:line="7" pos:column="24"/></operator> <operator pos:line="7" pos:column="25">-<pos:position pos:line="7" pos:column="26"/></operator><literal type="number" pos:line="7" pos:column="26">1<pos:position pos:line="7" pos:column="27"/></literal></expr>;<pos:position pos:line="7" pos:column="28"/></expr_stmt></block></then></if>
	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><name pos:line="8" pos:column="13">cvs_exclude<pos:position pos:line="8" pos:column="24"/></name> <operator pos:line="8" pos:column="25">&amp;&amp;<pos:position pos:line="8" pos:column="35"/></operator> <name pos:line="8" pos:column="28">am_sender<pos:position pos:line="8" pos:column="37"/></name></expr>)<pos:position pos:line="8" pos:column="38"/></condition><then pos:line="8" pos:column="38"> <block pos:line="8" pos:column="39">{
		<if pos:line="9" pos:column="17">if <condition pos:line="9" pos:column="20">(<expr><name pos:line="9" pos:column="21">protocol_version<pos:position pos:line="9" pos:column="37"/></name> <operator pos:line="9" pos:column="38">&gt;=<pos:position pos:line="9" pos:column="43"/></operator> <literal type="number" pos:line="9" pos:column="41">29<pos:position pos:line="9" pos:column="43"/></literal></expr>)<pos:position pos:line="9" pos:column="44"/></condition><then pos:line="9" pos:column="44">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="10" pos:column="25">parse_filter_str<pos:position pos:line="10" pos:column="41"/></name><argument_list pos:line="10" pos:column="41">(<argument><expr><operator pos:line="10" pos:column="42">&amp;<pos:position pos:line="10" pos:column="47"/></operator><name pos:line="10" pos:column="43">filter_list<pos:position pos:line="10" pos:column="54"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="10" pos:column="56">":C"<pos:position pos:line="10" pos:column="60"/></literal></expr></argument>, <argument><expr><call><name pos:line="10" pos:column="62">rule_template<pos:position pos:line="10" pos:column="75"/></name><argument_list pos:line="10" pos:column="75">(<argument><expr><literal type="number" pos:line="10" pos:column="76">0<pos:position pos:line="10" pos:column="77"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="78"/></argument_list></call></expr></argument>, <argument><expr><literal type="number" pos:line="10" pos:column="80">0<pos:position pos:line="10" pos:column="81"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="83"/></expr_stmt></block></then></if>
		<expr_stmt><expr><call><name pos:line="11" pos:column="17">parse_filter_str<pos:position pos:line="11" pos:column="33"/></name><argument_list pos:line="11" pos:column="33">(<argument><expr><operator pos:line="11" pos:column="34">&amp;<pos:position pos:line="11" pos:column="39"/></operator><name pos:line="11" pos:column="35">filter_list<pos:position pos:line="11" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="48">"-C"<pos:position pos:line="11" pos:column="52"/></literal></expr></argument>, <argument><expr><call><name pos:line="11" pos:column="54">rule_template<pos:position pos:line="11" pos:column="67"/></name><argument_list pos:line="11" pos:column="67">(<argument><expr><literal type="number" pos:line="11" pos:column="68">0<pos:position pos:line="11" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="70"/></argument_list></call></expr></argument>, <argument><expr><literal type="number" pos:line="11" pos:column="72">0<pos:position pos:line="11" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="75"/></expr_stmt>
	}<pos:position pos:line="12" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="14" pos:column="9">send_rules<pos:position pos:line="14" pos:column="19"/></name><argument_list pos:line="14" pos:column="19">(<argument><expr><name pos:line="14" pos:column="20">f_out<pos:position pos:line="14" pos:column="25"/></name></expr></argument>, <argument><expr><operator pos:line="14" pos:column="27">&amp;<pos:position pos:line="14" pos:column="32"/></operator><name pos:line="14" pos:column="28">filter_list<pos:position pos:line="14" pos:column="39"/></name></expr></argument>)<pos:position pos:line="14" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="41"/></expr_stmt>

	<if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><name pos:line="16" pos:column="13">f_out<pos:position pos:line="16" pos:column="18"/></name> <operator pos:line="16" pos:column="19">&gt;=<pos:position pos:line="16" pos:column="24"/></operator> <literal type="number" pos:line="16" pos:column="22">0<pos:position pos:line="16" pos:column="23"/></literal></expr>)<pos:position pos:line="16" pos:column="24"/></condition><then pos:line="16" pos:column="24">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="17" pos:column="17">write_int<pos:position pos:line="17" pos:column="26"/></name><argument_list pos:line="17" pos:column="26">(<argument><expr><name pos:line="17" pos:column="27">f_out<pos:position pos:line="17" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="17" pos:column="34">0<pos:position pos:line="17" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="37"/></expr_stmt></block></then></if>

	<if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><name pos:line="19" pos:column="13">cvs_exclude<pos:position pos:line="19" pos:column="24"/></name></expr>)<pos:position pos:line="19" pos:column="25"/></condition><then pos:line="19" pos:column="25"> <block pos:line="19" pos:column="26">{
		<if pos:line="20" pos:column="17">if <condition pos:line="20" pos:column="20">(<expr><operator pos:line="20" pos:column="21">!<pos:position pos:line="20" pos:column="22"/></operator><name pos:line="20" pos:column="22">am_sender<pos:position pos:line="20" pos:column="31"/></name> <operator pos:line="20" pos:column="32">||<pos:position pos:line="20" pos:column="34"/></operator> <name pos:line="20" pos:column="35">protocol_version<pos:position pos:line="20" pos:column="51"/></name> <operator pos:line="20" pos:column="52">&lt;<pos:position pos:line="20" pos:column="56"/></operator> <literal type="number" pos:line="20" pos:column="54">29<pos:position pos:line="20" pos:column="56"/></literal></expr>)<pos:position pos:line="20" pos:column="57"/></condition><then pos:line="20" pos:column="57">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="21" pos:column="25">parse_filter_str<pos:position pos:line="21" pos:column="41"/></name><argument_list pos:line="21" pos:column="41">(<argument><expr><operator pos:line="21" pos:column="42">&amp;<pos:position pos:line="21" pos:column="47"/></operator><name pos:line="21" pos:column="43">filter_list<pos:position pos:line="21" pos:column="54"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="21" pos:column="56">":C"<pos:position pos:line="21" pos:column="60"/></literal></expr></argument>, <argument><expr><call><name pos:line="21" pos:column="62">rule_template<pos:position pos:line="21" pos:column="75"/></name><argument_list pos:line="21" pos:column="75">(<argument><expr><literal type="number" pos:line="21" pos:column="76">0<pos:position pos:line="21" pos:column="77"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="78"/></argument_list></call></expr></argument>, <argument><expr><literal type="number" pos:line="21" pos:column="80">0<pos:position pos:line="21" pos:column="81"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="83"/></expr_stmt></block></then></if>
		<if pos:line="22" pos:column="17">if <condition pos:line="22" pos:column="20">(<expr><operator pos:line="22" pos:column="21">!<pos:position pos:line="22" pos:column="22"/></operator><name pos:line="22" pos:column="22">am_sender<pos:position pos:line="22" pos:column="31"/></name></expr>)<pos:position pos:line="22" pos:column="32"/></condition><then pos:line="22" pos:column="32">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="23" pos:column="25">parse_filter_str<pos:position pos:line="23" pos:column="41"/></name><argument_list pos:line="23" pos:column="41">(<argument><expr><operator pos:line="23" pos:column="42">&amp;<pos:position pos:line="23" pos:column="47"/></operator><name pos:line="23" pos:column="43">filter_list<pos:position pos:line="23" pos:column="54"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="23" pos:column="56">"-C"<pos:position pos:line="23" pos:column="60"/></literal></expr></argument>, <argument><expr><call><name pos:line="23" pos:column="62">rule_template<pos:position pos:line="23" pos:column="75"/></name><argument_list pos:line="23" pos:column="75">(<argument><expr><literal type="number" pos:line="23" pos:column="76">0<pos:position pos:line="23" pos:column="77"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="78"/></argument_list></call></expr></argument>, <argument><expr><literal type="number" pos:line="23" pos:column="80">0<pos:position pos:line="23" pos:column="81"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="83"/></expr_stmt></block></then></if>
	}<pos:position pos:line="24" pos:column="10"/></block></then></if>
}<pos:position pos:line="25" pos:column="2"/></block></function></unit>
