<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_98_rsync-2.5.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">match_address<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name pos:line="1" pos:column="26">char<pos:position pos:line="1" pos:column="30"/></name> <modifier pos:line="1" pos:column="31">*<pos:position pos:line="1" pos:column="32"/></modifier></type><name pos:line="1" pos:column="32">addr<pos:position pos:line="1" pos:column="36"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="38">char<pos:position pos:line="1" pos:column="42"/></name> <modifier pos:line="1" pos:column="43">*<pos:position pos:line="1" pos:column="44"/></modifier></type><name pos:line="1" pos:column="44">tok<pos:position pos:line="1" pos:column="47"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="48"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">char<pos:position pos:line="3" pos:column="13"/></name> <modifier pos:line="3" pos:column="14">*<pos:position pos:line="3" pos:column="15"/></modifier></type><name pos:line="3" pos:column="15">p<pos:position pos:line="3" pos:column="16"/></name></decl>;<pos:position pos:line="3" pos:column="17"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">unsigned<pos:position pos:line="4" pos:column="17"/></name> <name pos:line="4" pos:column="18">long<pos:position pos:line="4" pos:column="22"/></name></type> <name pos:line="4" pos:column="23">a<pos:position pos:line="4" pos:column="24"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="26">t<pos:position pos:line="4" pos:column="27"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="29">mask<pos:position pos:line="4" pos:column="33"/></name> <init pos:line="4" pos:column="34">= <expr><operator pos:line="4" pos:column="36">(<pos:position pos:line="4" pos:column="37"/></operator><name pos:line="4" pos:column="37">unsigned<pos:position pos:line="4" pos:column="45"/></name> <name pos:line="4" pos:column="46">long<pos:position pos:line="4" pos:column="50"/></name><operator pos:line="4" pos:column="50">)<pos:position pos:line="4" pos:column="51"/></operator><operator pos:line="4" pos:column="51">~<pos:position pos:line="4" pos:column="52"/></operator><literal type="number" pos:line="4" pos:column="52">0<pos:position pos:line="4" pos:column="53"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="54"/></decl_stmt>

	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><operator pos:line="6" pos:column="13">!<pos:position pos:line="6" pos:column="14"/></operator><name pos:line="6" pos:column="14">addr<pos:position pos:line="6" pos:column="18"/></name> <operator pos:line="6" pos:column="19">||<pos:position pos:line="6" pos:column="21"/></operator> <operator pos:line="6" pos:column="22">!<pos:position pos:line="6" pos:column="23"/></operator><operator pos:line="6" pos:column="23">*<pos:position pos:line="6" pos:column="24"/></operator><name pos:line="6" pos:column="24">addr<pos:position pos:line="6" pos:column="28"/></name></expr>)<pos:position pos:line="6" pos:column="29"/></condition><then pos:line="6" pos:column="29"> <block type="pseudo"><return pos:line="6" pos:column="30">return <expr><literal type="number" pos:line="6" pos:column="37">0<pos:position pos:line="6" pos:column="38"/></literal></expr>;<pos:position pos:line="6" pos:column="39"/></return></block></then></if>

	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><operator pos:line="8" pos:column="13">!<pos:position pos:line="8" pos:column="14"/></operator><call><name pos:line="8" pos:column="14">isdigit<pos:position pos:line="8" pos:column="21"/></name><argument_list pos:line="8" pos:column="21">(<argument><expr><name><name pos:line="8" pos:column="22">tok<pos:position pos:line="8" pos:column="25"/></name><index pos:line="8" pos:column="25">[<expr><literal type="number" pos:line="8" pos:column="26">0<pos:position pos:line="8" pos:column="27"/></literal></expr>]<pos:position pos:line="8" pos:column="28"/></index></name></expr></argument>)<pos:position pos:line="8" pos:column="29"/></argument_list></call></expr>)<pos:position pos:line="8" pos:column="30"/></condition><then pos:line="8" pos:column="30"> <block type="pseudo"><return pos:line="8" pos:column="31">return <expr><literal type="number" pos:line="8" pos:column="38">0<pos:position pos:line="8" pos:column="39"/></literal></expr>;<pos:position pos:line="8" pos:column="40"/></return></block></then></if>

	<expr_stmt><expr><name pos:line="10" pos:column="9">p<pos:position pos:line="10" pos:column="10"/></name> <operator pos:line="10" pos:column="11">=<pos:position pos:line="10" pos:column="12"/></operator> <call><name pos:line="10" pos:column="13">strchr<pos:position pos:line="10" pos:column="19"/></name><argument_list pos:line="10" pos:column="19">(<argument><expr><name pos:line="10" pos:column="20">tok<pos:position pos:line="10" pos:column="23"/></name></expr></argument>,<argument><expr><literal type="char" pos:line="10" pos:column="24">'/'<pos:position pos:line="10" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="29"/></expr_stmt>
	<if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><name pos:line="11" pos:column="13">p<pos:position pos:line="11" pos:column="14"/></name></expr>)<pos:position pos:line="11" pos:column="15"/></condition><then pos:line="11" pos:column="15"> <block type="pseudo"><expr_stmt><expr><operator pos:line="11" pos:column="16">*<pos:position pos:line="11" pos:column="17"/></operator><name pos:line="11" pos:column="17">p<pos:position pos:line="11" pos:column="18"/></name> <operator pos:line="11" pos:column="19">=<pos:position pos:line="11" pos:column="20"/></operator> <literal type="number" pos:line="11" pos:column="21">0<pos:position pos:line="11" pos:column="22"/></literal></expr>;<pos:position pos:line="11" pos:column="23"/></expr_stmt></block></then></if>

	<expr_stmt><expr><name pos:line="13" pos:column="9">a<pos:position pos:line="13" pos:column="10"/></name> <operator pos:line="13" pos:column="11">=<pos:position pos:line="13" pos:column="12"/></operator> <call><name pos:line="13" pos:column="13">inet_addr<pos:position pos:line="13" pos:column="22"/></name><argument_list pos:line="13" pos:column="22">(<argument><expr><name pos:line="13" pos:column="23">addr<pos:position pos:line="13" pos:column="27"/></name></expr></argument>)<pos:position pos:line="13" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="29"/></expr_stmt>
	<expr_stmt><expr><name pos:line="14" pos:column="9">t<pos:position pos:line="14" pos:column="10"/></name> <operator pos:line="14" pos:column="11">=<pos:position pos:line="14" pos:column="12"/></operator> <call><name pos:line="14" pos:column="13">inet_addr<pos:position pos:line="14" pos:column="22"/></name><argument_list pos:line="14" pos:column="22">(<argument><expr><name pos:line="14" pos:column="23">tok<pos:position pos:line="14" pos:column="26"/></name></expr></argument>)<pos:position pos:line="14" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="28"/></expr_stmt>

	<if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><name pos:line="16" pos:column="13">p<pos:position pos:line="16" pos:column="14"/></name></expr>)<pos:position pos:line="16" pos:column="15"/></condition><then pos:line="16" pos:column="15"> <block pos:line="16" pos:column="16">{
		<expr_stmt><expr><operator pos:line="17" pos:column="17">*<pos:position pos:line="17" pos:column="18"/></operator><name pos:line="17" pos:column="18">p<pos:position pos:line="17" pos:column="19"/></name> <operator pos:line="17" pos:column="20">=<pos:position pos:line="17" pos:column="21"/></operator> <literal type="char" pos:line="17" pos:column="22">'/'<pos:position pos:line="17" pos:column="25"/></literal></expr>;<pos:position pos:line="17" pos:column="26"/></expr_stmt>
	}<pos:position pos:line="18" pos:column="10"/></block></then></if>

	<if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><name pos:line="20" pos:column="13">t<pos:position pos:line="20" pos:column="14"/></name> <operator pos:line="20" pos:column="15">==<pos:position pos:line="20" pos:column="17"/></operator> <name pos:line="20" pos:column="18">INADDR_NONE<pos:position pos:line="20" pos:column="29"/></name></expr>)<pos:position pos:line="20" pos:column="30"/></condition><then pos:line="20" pos:column="30"> <block pos:line="20" pos:column="31">{
		<expr_stmt><expr><call><name pos:line="21" pos:column="17">rprintf<pos:position pos:line="21" pos:column="24"/></name><argument_list pos:line="21" pos:column="24">(<argument><expr><name pos:line="21" pos:column="25">FERROR<pos:position pos:line="21" pos:column="31"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="21" pos:column="32">"malformed address %s\n"<pos:position pos:line="21" pos:column="56"/></literal></expr></argument>, <argument><expr><name pos:line="21" pos:column="58">tok<pos:position pos:line="21" pos:column="61"/></name></expr></argument>)<pos:position pos:line="21" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="63"/></expr_stmt>
		<return pos:line="22" pos:column="17">return <expr><literal type="number" pos:line="22" pos:column="24">0<pos:position pos:line="22" pos:column="25"/></literal></expr>;<pos:position pos:line="22" pos:column="26"/></return>
	}<pos:position pos:line="23" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="25" pos:column="9">a<pos:position pos:line="25" pos:column="10"/></name> <operator pos:line="25" pos:column="11">=<pos:position pos:line="25" pos:column="12"/></operator> <call><name pos:line="25" pos:column="13">ntohl<pos:position pos:line="25" pos:column="18"/></name><argument_list pos:line="25" pos:column="18">(<argument><expr><name pos:line="25" pos:column="19">a<pos:position pos:line="25" pos:column="20"/></name></expr></argument>)<pos:position pos:line="25" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="22"/></expr_stmt>
	<expr_stmt><expr><name pos:line="26" pos:column="9">t<pos:position pos:line="26" pos:column="10"/></name> <operator pos:line="26" pos:column="11">=<pos:position pos:line="26" pos:column="12"/></operator> <call><name pos:line="26" pos:column="13">ntohl<pos:position pos:line="26" pos:column="18"/></name><argument_list pos:line="26" pos:column="18">(<argument><expr><name pos:line="26" pos:column="19">t<pos:position pos:line="26" pos:column="20"/></name></expr></argument>)<pos:position pos:line="26" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="22"/></expr_stmt>

	<if pos:line="28" pos:column="9">if <condition pos:line="28" pos:column="12">(<expr><name pos:line="28" pos:column="13">p<pos:position pos:line="28" pos:column="14"/></name></expr>)<pos:position pos:line="28" pos:column="15"/></condition><then pos:line="28" pos:column="15"> <block pos:line="28" pos:column="16">{
		<if pos:line="29" pos:column="17">if <condition pos:line="29" pos:column="20">(<expr><call><name pos:line="29" pos:column="21">strchr<pos:position pos:line="29" pos:column="27"/></name><argument_list pos:line="29" pos:column="27">(<argument><expr><name pos:line="29" pos:column="28">p<pos:position pos:line="29" pos:column="29"/></name><operator pos:line="29" pos:column="29">+<pos:position pos:line="29" pos:column="30"/></operator><literal type="number" pos:line="29" pos:column="30">1<pos:position pos:line="29" pos:column="31"/></literal></expr></argument>,<argument><expr><literal type="char" pos:line="29" pos:column="32">'.'<pos:position pos:line="29" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="29" pos:column="37"/></condition><then pos:line="29" pos:column="37"> <block pos:line="29" pos:column="38">{
			<expr_stmt><expr><name pos:line="30" pos:column="25">mask<pos:position pos:line="30" pos:column="29"/></name> <operator pos:line="30" pos:column="30">=<pos:position pos:line="30" pos:column="31"/></operator> <call><name pos:line="30" pos:column="32">inet_addr<pos:position pos:line="30" pos:column="41"/></name><argument_list pos:line="30" pos:column="41">(<argument><expr><name pos:line="30" pos:column="42">p<pos:position pos:line="30" pos:column="43"/></name><operator pos:line="30" pos:column="43">+<pos:position pos:line="30" pos:column="44"/></operator><literal type="number" pos:line="30" pos:column="44">1<pos:position pos:line="30" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="47"/></expr_stmt>
			<if pos:line="31" pos:column="25">if <condition pos:line="31" pos:column="28">(<expr><name pos:line="31" pos:column="29">mask<pos:position pos:line="31" pos:column="33"/></name> <operator pos:line="31" pos:column="34">==<pos:position pos:line="31" pos:column="36"/></operator> <name pos:line="31" pos:column="37">INADDR_NONE<pos:position pos:line="31" pos:column="48"/></name></expr>)<pos:position pos:line="31" pos:column="49"/></condition><then pos:line="31" pos:column="49"> <block pos:line="31" pos:column="50">{
				<expr_stmt><expr><call><name pos:line="32" pos:column="33">rprintf<pos:position pos:line="32" pos:column="40"/></name><argument_list pos:line="32" pos:column="40">(<argument><expr><name pos:line="32" pos:column="41">FERROR<pos:position pos:line="32" pos:column="47"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="32" pos:column="48">"malformed mask in %s\n"<pos:position pos:line="32" pos:column="72"/></literal></expr></argument>, <argument><expr><name pos:line="32" pos:column="74">tok<pos:position pos:line="32" pos:column="77"/></name></expr></argument>)<pos:position pos:line="32" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="79"/></expr_stmt>
				<return pos:line="33" pos:column="33">return <expr><literal type="number" pos:line="33" pos:column="40">0<pos:position pos:line="33" pos:column="41"/></literal></expr>;<pos:position pos:line="33" pos:column="42"/></return>
			}<pos:position pos:line="34" pos:column="26"/></block></then></if>
			<expr_stmt><expr><name pos:line="35" pos:column="25">mask<pos:position pos:line="35" pos:column="29"/></name> <operator pos:line="35" pos:column="30">=<pos:position pos:line="35" pos:column="31"/></operator> <call><name pos:line="35" pos:column="32">ntohl<pos:position pos:line="35" pos:column="37"/></name><argument_list pos:line="35" pos:column="37">(<argument><expr><name pos:line="35" pos:column="38">mask<pos:position pos:line="35" pos:column="42"/></name></expr></argument>)<pos:position pos:line="35" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="44"/></expr_stmt>
		}<pos:position pos:line="36" pos:column="18"/></block></then> <else pos:line="36" pos:column="19">else <block pos:line="36" pos:column="24">{
			<decl_stmt><decl><type><name pos:line="37" pos:column="25">int<pos:position pos:line="37" pos:column="28"/></name></type> <name pos:line="37" pos:column="29">bits<pos:position pos:line="37" pos:column="33"/></name> <init pos:line="37" pos:column="34">= <expr><call><name pos:line="37" pos:column="36">atoi<pos:position pos:line="37" pos:column="40"/></name><argument_list pos:line="37" pos:column="40">(<argument><expr><name pos:line="37" pos:column="41">p<pos:position pos:line="37" pos:column="42"/></name><operator pos:line="37" pos:column="42">+<pos:position pos:line="37" pos:column="43"/></operator><literal type="number" pos:line="37" pos:column="43">1<pos:position pos:line="37" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="45"/></argument_list></call></expr></init></decl>;<pos:position pos:line="37" pos:column="46"/></decl_stmt>
			<if pos:line="38" pos:column="25">if <condition pos:line="38" pos:column="28">(<expr><name pos:line="38" pos:column="29">bits<pos:position pos:line="38" pos:column="33"/></name> <operator pos:line="38" pos:column="34">==<pos:position pos:line="38" pos:column="36"/></operator> <literal type="number" pos:line="38" pos:column="37">0<pos:position pos:line="38" pos:column="38"/></literal></expr>)<pos:position pos:line="38" pos:column="39"/></condition><then pos:line="38" pos:column="39"> <block type="pseudo"><return pos:line="38" pos:column="40">return <expr><literal type="number" pos:line="38" pos:column="47">1<pos:position pos:line="38" pos:column="48"/></literal></expr>;<pos:position pos:line="38" pos:column="49"/></return></block></then></if>
			<if pos:line="39" pos:column="25">if <condition pos:line="39" pos:column="28">(<expr><name pos:line="39" pos:column="29">bits<pos:position pos:line="39" pos:column="33"/></name> <operator pos:line="39" pos:column="34">&lt;=<pos:position pos:line="39" pos:column="39"/></operator> <literal type="number" pos:line="39" pos:column="37">0<pos:position pos:line="39" pos:column="38"/></literal> <operator pos:line="39" pos:column="39">||<pos:position pos:line="39" pos:column="41"/></operator> <name pos:line="39" pos:column="42">bits<pos:position pos:line="39" pos:column="46"/></name> <operator pos:line="39" pos:column="47">&gt;<pos:position pos:line="39" pos:column="51"/></operator> <literal type="number" pos:line="39" pos:column="49">32<pos:position pos:line="39" pos:column="51"/></literal></expr>)<pos:position pos:line="39" pos:column="52"/></condition><then pos:line="39" pos:column="52"> <block pos:line="39" pos:column="53">{
				<expr_stmt><expr><call><name pos:line="40" pos:column="33">rprintf<pos:position pos:line="40" pos:column="40"/></name><argument_list pos:line="40" pos:column="40">(<argument><expr><name pos:line="40" pos:column="41">FERROR<pos:position pos:line="40" pos:column="47"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="40" pos:column="48">"malformed mask in %s\n"<pos:position pos:line="40" pos:column="72"/></literal></expr></argument>, <argument><expr><name pos:line="40" pos:column="74">tok<pos:position pos:line="40" pos:column="77"/></name></expr></argument>)<pos:position pos:line="40" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="79"/></expr_stmt>
				<return pos:line="41" pos:column="33">return <expr><literal type="number" pos:line="41" pos:column="40">0<pos:position pos:line="41" pos:column="41"/></literal></expr>;<pos:position pos:line="41" pos:column="42"/></return>
			}<pos:position pos:line="42" pos:column="26"/></block></then></if>
			<expr_stmt><expr><name pos:line="43" pos:column="25">mask<pos:position pos:line="43" pos:column="29"/></name> <operator pos:line="43" pos:column="30">&amp;=<pos:position pos:line="43" pos:column="36"/></operator> <operator pos:line="43" pos:column="33">(<pos:position pos:line="43" pos:column="34"/></operator><name pos:line="43" pos:column="34">mask<pos:position pos:line="43" pos:column="38"/></name> <operator pos:line="43" pos:column="39">&lt;&lt;<pos:position pos:line="43" pos:column="47"/></operator> <operator pos:line="43" pos:column="42">(<pos:position pos:line="43" pos:column="43"/></operator><literal type="number" pos:line="43" pos:column="43">32<pos:position pos:line="43" pos:column="45"/></literal><operator pos:line="43" pos:column="45">-<pos:position pos:line="43" pos:column="46"/></operator><name pos:line="43" pos:column="46">bits<pos:position pos:line="43" pos:column="50"/></name><operator pos:line="43" pos:column="50">)<pos:position pos:line="43" pos:column="51"/></operator><operator pos:line="43" pos:column="51">)<pos:position pos:line="43" pos:column="52"/></operator></expr>;<pos:position pos:line="43" pos:column="53"/></expr_stmt>
		}<pos:position pos:line="44" pos:column="18"/></block></else></if>
	}<pos:position pos:line="45" pos:column="10"/></block></then></if>

	<return pos:line="47" pos:column="9">return <expr><operator pos:line="47" pos:column="16">(<pos:position pos:line="47" pos:column="17"/></operator><operator pos:line="47" pos:column="17">(<pos:position pos:line="47" pos:column="18"/></operator><name pos:line="47" pos:column="18">a<pos:position pos:line="47" pos:column="19"/></name><operator pos:line="47" pos:column="19">&amp;<pos:position pos:line="47" pos:column="24"/></operator><name pos:line="47" pos:column="20">mask<pos:position pos:line="47" pos:column="24"/></name><operator pos:line="47" pos:column="24">)<pos:position pos:line="47" pos:column="25"/></operator> <operator pos:line="47" pos:column="26">==<pos:position pos:line="47" pos:column="28"/></operator> <operator pos:line="47" pos:column="29">(<pos:position pos:line="47" pos:column="30"/></operator><name pos:line="47" pos:column="30">t<pos:position pos:line="47" pos:column="31"/></name><operator pos:line="47" pos:column="31">&amp;<pos:position pos:line="47" pos:column="36"/></operator><name pos:line="47" pos:column="32">mask<pos:position pos:line="47" pos:column="36"/></name><operator pos:line="47" pos:column="36">)<pos:position pos:line="47" pos:column="37"/></operator><operator pos:line="47" pos:column="37">)<pos:position pos:line="47" pos:column="38"/></operator></expr>;<pos:position pos:line="47" pos:column="39"/></return>
}<pos:position pos:line="48" pos:column="2"/></block></function></unit>
