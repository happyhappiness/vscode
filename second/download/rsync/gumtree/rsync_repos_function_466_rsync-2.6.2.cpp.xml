<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_466_rsync-2.6.2.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">mdfour_tail<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name pos:line="1" pos:column="25">unsigned<pos:position pos:line="1" pos:column="33"/></name> <name pos:line="1" pos:column="34">char<pos:position pos:line="1" pos:column="38"/></name> <modifier pos:line="1" pos:column="39">*<pos:position pos:line="1" pos:column="40"/></modifier></type><name pos:line="1" pos:column="40">in<pos:position pos:line="1" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="44">uint32<pos:position pos:line="1" pos:column="50"/></name></type> <name pos:line="1" pos:column="51">n<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="53"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">unsigned<pos:position pos:line="3" pos:column="17"/></name> <name pos:line="3" pos:column="18">char<pos:position pos:line="3" pos:column="22"/></name></type> <name><name pos:line="3" pos:column="23">buf<pos:position pos:line="3" pos:column="26"/></name><index pos:line="3" pos:column="26">[<expr><literal type="number" pos:line="3" pos:column="27">128<pos:position pos:line="3" pos:column="30"/></literal></expr>]<pos:position pos:line="3" pos:column="31"/></index></name></decl>;<pos:position pos:line="3" pos:column="32"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">uint32<pos:position pos:line="4" pos:column="15"/></name></type> <name><name pos:line="4" pos:column="16">M<pos:position pos:line="4" pos:column="17"/></name><index pos:line="4" pos:column="17">[<expr><literal type="number" pos:line="4" pos:column="18">16<pos:position pos:line="4" pos:column="20"/></literal></expr>]<pos:position pos:line="4" pos:column="21"/></index></name></decl>;<pos:position pos:line="4" pos:column="22"/></decl_stmt>
	<decl_stmt><decl><specifier pos:line="5" pos:column="9">extern<pos:position pos:line="5" pos:column="15"/></specifier> <type><name pos:line="5" pos:column="16">int<pos:position pos:line="5" pos:column="19"/></name></type> <name pos:line="5" pos:column="20">protocol_version<pos:position pos:line="5" pos:column="36"/></name></decl>;<pos:position pos:line="5" pos:column="37"/></decl_stmt>

	<comment type="block" pos:line="7" pos:column="9">/*
	 * Count total number of bits, modulo 2^64
	 */</comment>
	<expr_stmt><expr><name><name pos:line="10" pos:column="9">m<pos:position pos:line="10" pos:column="10"/></name><operator pos:line="10" pos:column="10">-&gt;<pos:position pos:line="10" pos:column="15"/></operator><name pos:line="10" pos:column="12">totalN<pos:position pos:line="10" pos:column="18"/></name></name> <operator pos:line="10" pos:column="19">+=<pos:position pos:line="10" pos:column="21"/></operator> <name pos:line="10" pos:column="22">n<pos:position pos:line="10" pos:column="23"/></name> <operator pos:line="10" pos:column="24">&lt;&lt;<pos:position pos:line="10" pos:column="32"/></operator> <literal type="number" pos:line="10" pos:column="27">3<pos:position pos:line="10" pos:column="28"/></literal></expr>;<pos:position pos:line="10" pos:column="29"/></expr_stmt>
	<if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><name><name pos:line="11" pos:column="13">m<pos:position pos:line="11" pos:column="14"/></name><operator pos:line="11" pos:column="14">-&gt;<pos:position pos:line="11" pos:column="19"/></operator><name pos:line="11" pos:column="16">totalN<pos:position pos:line="11" pos:column="22"/></name></name> <operator pos:line="11" pos:column="23">&lt;<pos:position pos:line="11" pos:column="27"/></operator> <operator pos:line="11" pos:column="25">(<pos:position pos:line="11" pos:column="26"/></operator><name pos:line="11" pos:column="26">n<pos:position pos:line="11" pos:column="27"/></name> <operator pos:line="11" pos:column="28">&lt;&lt;<pos:position pos:line="11" pos:column="36"/></operator> <literal type="number" pos:line="11" pos:column="31">3<pos:position pos:line="11" pos:column="32"/></literal><operator pos:line="11" pos:column="32">)<pos:position pos:line="11" pos:column="33"/></operator></expr>)<pos:position pos:line="11" pos:column="34"/></condition><then pos:line="11" pos:column="34"> <block pos:line="11" pos:column="35">{
		<expr_stmt><expr><name><name pos:line="12" pos:column="17">m<pos:position pos:line="12" pos:column="18"/></name><operator pos:line="12" pos:column="18">-&gt;<pos:position pos:line="12" pos:column="23"/></operator><name pos:line="12" pos:column="20">totalN2<pos:position pos:line="12" pos:column="27"/></name></name><operator pos:line="12" pos:column="27">++<pos:position pos:line="12" pos:column="29"/></operator></expr>;<pos:position pos:line="12" pos:column="30"/></expr_stmt>
	}<pos:position pos:line="13" pos:column="10"/></block></then></if>
	<expr_stmt><expr><name><name pos:line="14" pos:column="9">m<pos:position pos:line="14" pos:column="10"/></name><operator pos:line="14" pos:column="10">-&gt;<pos:position pos:line="14" pos:column="15"/></operator><name pos:line="14" pos:column="12">totalN2<pos:position pos:line="14" pos:column="19"/></name></name> <operator pos:line="14" pos:column="20">+=<pos:position pos:line="14" pos:column="22"/></operator> <name pos:line="14" pos:column="23">n<pos:position pos:line="14" pos:column="24"/></name> <operator pos:line="14" pos:column="25">&gt;&gt;<pos:position pos:line="14" pos:column="30"/></operator> <literal type="number" pos:line="14" pos:column="28">29<pos:position pos:line="14" pos:column="30"/></literal></expr>;<pos:position pos:line="14" pos:column="31"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="16" pos:column="9">memset<pos:position pos:line="16" pos:column="15"/></name><argument_list pos:line="16" pos:column="15">(<argument><expr><name pos:line="16" pos:column="16">buf<pos:position pos:line="16" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="16" pos:column="21">0<pos:position pos:line="16" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="16" pos:column="24">128<pos:position pos:line="16" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="29"/></expr_stmt>
	<if pos:line="17" pos:column="9">if <condition pos:line="17" pos:column="12">(<expr><name pos:line="17" pos:column="13">n<pos:position pos:line="17" pos:column="14"/></name></expr>)<pos:position pos:line="17" pos:column="15"/></condition><then pos:line="17" pos:column="15"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="17" pos:column="16">memcpy<pos:position pos:line="17" pos:column="22"/></name><argument_list pos:line="17" pos:column="22">(<argument><expr><name pos:line="17" pos:column="23">buf<pos:position pos:line="17" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="28">in<pos:position pos:line="17" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="32">n<pos:position pos:line="17" pos:column="33"/></name></expr></argument>)<pos:position pos:line="17" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="35"/></expr_stmt></block></then></if>
	<expr_stmt><expr><name><name pos:line="18" pos:column="9">buf<pos:position pos:line="18" pos:column="12"/></name><index pos:line="18" pos:column="12">[<expr><name pos:line="18" pos:column="13">n<pos:position pos:line="18" pos:column="14"/></name></expr>]<pos:position pos:line="18" pos:column="15"/></index></name> <operator pos:line="18" pos:column="16">=<pos:position pos:line="18" pos:column="17"/></operator> <literal type="number" pos:line="18" pos:column="18">0x80<pos:position pos:line="18" pos:column="22"/></literal></expr>;<pos:position pos:line="18" pos:column="23"/></expr_stmt>

	<if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><name pos:line="20" pos:column="13">n<pos:position pos:line="20" pos:column="14"/></name> <operator pos:line="20" pos:column="15">&lt;=<pos:position pos:line="20" pos:column="20"/></operator> <literal type="number" pos:line="20" pos:column="18">55<pos:position pos:line="20" pos:column="20"/></literal></expr>)<pos:position pos:line="20" pos:column="21"/></condition><then pos:line="20" pos:column="21"> <block pos:line="20" pos:column="22">{
		<expr_stmt><expr><call><name pos:line="21" pos:column="17">copy4<pos:position pos:line="21" pos:column="22"/></name><argument_list pos:line="21" pos:column="22">(<argument><expr><name pos:line="21" pos:column="23">buf<pos:position pos:line="21" pos:column="26"/></name><operator pos:line="21" pos:column="26">+<pos:position pos:line="21" pos:column="27"/></operator><literal type="number" pos:line="21" pos:column="27">56<pos:position pos:line="21" pos:column="29"/></literal></expr></argument>, <argument><expr><name><name pos:line="21" pos:column="31">m<pos:position pos:line="21" pos:column="32"/></name><operator pos:line="21" pos:column="32">-&gt;<pos:position pos:line="21" pos:column="37"/></operator><name pos:line="21" pos:column="34">totalN<pos:position pos:line="21" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="21" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="42"/></expr_stmt>
		<comment type="block" pos:line="22" pos:column="17">/*
		 * Prior to protocol version 27 only the number of bits
		 * modulo 2^32 was included.  MD4 requires the number
		 * of bits modulo 2^64, which was fixed starting with
		 * protocol version 27.
		 */</comment>
		<if pos:line="28" pos:column="17">if <condition pos:line="28" pos:column="20">(<expr><name pos:line="28" pos:column="21">protocol_version<pos:position pos:line="28" pos:column="37"/></name> <operator pos:line="28" pos:column="38">&gt;=<pos:position pos:line="28" pos:column="43"/></operator> <literal type="number" pos:line="28" pos:column="41">27<pos:position pos:line="28" pos:column="43"/></literal></expr>)<pos:position pos:line="28" pos:column="44"/></condition><then pos:line="28" pos:column="44"> <block pos:line="28" pos:column="45">{
			<expr_stmt><expr><call><name pos:line="29" pos:column="25">copy4<pos:position pos:line="29" pos:column="30"/></name><argument_list pos:line="29" pos:column="30">(<argument><expr><name pos:line="29" pos:column="31">buf<pos:position pos:line="29" pos:column="34"/></name><operator pos:line="29" pos:column="34">+<pos:position pos:line="29" pos:column="35"/></operator><literal type="number" pos:line="29" pos:column="35">60<pos:position pos:line="29" pos:column="37"/></literal></expr></argument>, <argument><expr><name><name pos:line="29" pos:column="39">m<pos:position pos:line="29" pos:column="40"/></name><operator pos:line="29" pos:column="40">-&gt;<pos:position pos:line="29" pos:column="45"/></operator><name pos:line="29" pos:column="42">totalN2<pos:position pos:line="29" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="29" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="51"/></expr_stmt>
		}<pos:position pos:line="30" pos:column="18"/></block></then></if>
		<expr_stmt><expr><call><name pos:line="31" pos:column="17">copy64<pos:position pos:line="31" pos:column="23"/></name><argument_list pos:line="31" pos:column="23">(<argument><expr><name pos:line="31" pos:column="24">M<pos:position pos:line="31" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="27">buf<pos:position pos:line="31" pos:column="30"/></name></expr></argument>)<pos:position pos:line="31" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="32"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="32" pos:column="17">mdfour64<pos:position pos:line="32" pos:column="25"/></name><argument_list pos:line="32" pos:column="25">(<argument><expr><name pos:line="32" pos:column="26">M<pos:position pos:line="32" pos:column="27"/></name></expr></argument>)<pos:position pos:line="32" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="29"/></expr_stmt>
	}<pos:position pos:line="33" pos:column="10"/></block></then> <else pos:line="33" pos:column="11">else <block pos:line="33" pos:column="16">{
		<expr_stmt><expr><call><name pos:line="34" pos:column="17">copy4<pos:position pos:line="34" pos:column="22"/></name><argument_list pos:line="34" pos:column="22">(<argument><expr><name pos:line="34" pos:column="23">buf<pos:position pos:line="34" pos:column="26"/></name><operator pos:line="34" pos:column="26">+<pos:position pos:line="34" pos:column="27"/></operator><literal type="number" pos:line="34" pos:column="27">120<pos:position pos:line="34" pos:column="30"/></literal></expr></argument>, <argument><expr><name><name pos:line="34" pos:column="32">m<pos:position pos:line="34" pos:column="33"/></name><operator pos:line="34" pos:column="33">-&gt;<pos:position pos:line="34" pos:column="38"/></operator><name pos:line="34" pos:column="35">totalN<pos:position pos:line="34" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="34" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="43"/></expr_stmt> 
		<comment type="block" pos:line="35" pos:column="17">/*
		 * Prior to protocol version 27 only the number of bits
		 * modulo 2^32 was included.  MD4 requires the number
		 * of bits modulo 2^64, which was fixed starting with
		 * protocol version 27.
		 */</comment>
		<if pos:line="41" pos:column="17">if <condition pos:line="41" pos:column="20">(<expr><name pos:line="41" pos:column="21">protocol_version<pos:position pos:line="41" pos:column="37"/></name> <operator pos:line="41" pos:column="38">&gt;=<pos:position pos:line="41" pos:column="43"/></operator> <literal type="number" pos:line="41" pos:column="41">27<pos:position pos:line="41" pos:column="43"/></literal></expr>)<pos:position pos:line="41" pos:column="44"/></condition><then pos:line="41" pos:column="44"> <block pos:line="41" pos:column="45">{
			<expr_stmt><expr><call><name pos:line="42" pos:column="25">copy4<pos:position pos:line="42" pos:column="30"/></name><argument_list pos:line="42" pos:column="30">(<argument><expr><name pos:line="42" pos:column="31">buf<pos:position pos:line="42" pos:column="34"/></name><operator pos:line="42" pos:column="34">+<pos:position pos:line="42" pos:column="35"/></operator><literal type="number" pos:line="42" pos:column="35">124<pos:position pos:line="42" pos:column="38"/></literal></expr></argument>, <argument><expr><name><name pos:line="42" pos:column="40">m<pos:position pos:line="42" pos:column="41"/></name><operator pos:line="42" pos:column="41">-&gt;<pos:position pos:line="42" pos:column="46"/></operator><name pos:line="42" pos:column="43">totalN2<pos:position pos:line="42" pos:column="50"/></name></name></expr></argument>)<pos:position pos:line="42" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="52"/></expr_stmt> 
		}<pos:position pos:line="43" pos:column="18"/></block></then></if>
		<expr_stmt><expr><call><name pos:line="44" pos:column="17">copy64<pos:position pos:line="44" pos:column="23"/></name><argument_list pos:line="44" pos:column="23">(<argument><expr><name pos:line="44" pos:column="24">M<pos:position pos:line="44" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="27">buf<pos:position pos:line="44" pos:column="30"/></name></expr></argument>)<pos:position pos:line="44" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="32"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="45" pos:column="17">mdfour64<pos:position pos:line="45" pos:column="25"/></name><argument_list pos:line="45" pos:column="25">(<argument><expr><name pos:line="45" pos:column="26">M<pos:position pos:line="45" pos:column="27"/></name></expr></argument>)<pos:position pos:line="45" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="29"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="46" pos:column="17">copy64<pos:position pos:line="46" pos:column="23"/></name><argument_list pos:line="46" pos:column="23">(<argument><expr><name pos:line="46" pos:column="24">M<pos:position pos:line="46" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="27">buf<pos:position pos:line="46" pos:column="30"/></name><operator pos:line="46" pos:column="30">+<pos:position pos:line="46" pos:column="31"/></operator><literal type="number" pos:line="46" pos:column="31">64<pos:position pos:line="46" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="35"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="47" pos:column="17">mdfour64<pos:position pos:line="47" pos:column="25"/></name><argument_list pos:line="47" pos:column="25">(<argument><expr><name pos:line="47" pos:column="26">M<pos:position pos:line="47" pos:column="27"/></name></expr></argument>)<pos:position pos:line="47" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="29"/></expr_stmt>
	}<pos:position pos:line="48" pos:column="10"/></block></else></if>
}<pos:position pos:line="49" pos:column="2"/></block></function></unit>
