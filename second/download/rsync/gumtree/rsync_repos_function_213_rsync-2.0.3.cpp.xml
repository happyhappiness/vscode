<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_213_rsync-2.0.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">report<pos:position pos:line="1" pos:column="19"/></name><parameter_list pos:line="1" pos:column="19">(<parameter><decl><type><name pos:line="1" pos:column="20">int<pos:position pos:line="1" pos:column="23"/></name></type> <name pos:line="1" pos:column="24">f<pos:position pos:line="1" pos:column="25"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="26"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int64<pos:position pos:line="3" pos:column="14"/></name></type> <name pos:line="3" pos:column="15">in<pos:position pos:line="3" pos:column="17"/></name></decl>,<decl><type ref="prev"/><name pos:line="3" pos:column="18">out<pos:position pos:line="3" pos:column="21"/></name></decl>,<decl><type ref="prev"/><name pos:line="3" pos:column="22">tsize<pos:position pos:line="3" pos:column="27"/></name></decl>;<pos:position pos:line="3" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">time_t<pos:position pos:line="4" pos:column="15"/></name></type> <name pos:line="4" pos:column="16">t<pos:position pos:line="4" pos:column="17"/></name> <init pos:line="4" pos:column="18">= <expr><call><name pos:line="4" pos:column="20">time<pos:position pos:line="4" pos:column="24"/></name><argument_list pos:line="4" pos:column="24">(<argument><expr><name pos:line="4" pos:column="25">NULL<pos:position pos:line="4" pos:column="29"/></name></expr></argument>)<pos:position pos:line="4" pos:column="30"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><specifier pos:line="5" pos:column="9">extern<pos:position pos:line="5" pos:column="15"/></specifier> <type><name pos:line="5" pos:column="16">int<pos:position pos:line="5" pos:column="19"/></name></type> <name pos:line="5" pos:column="20">am_server<pos:position pos:line="5" pos:column="29"/></name></decl>;<pos:position pos:line="5" pos:column="30"/></decl_stmt>
	<decl_stmt><decl><specifier pos:line="6" pos:column="9">extern<pos:position pos:line="6" pos:column="15"/></specifier> <type><name pos:line="6" pos:column="16">int<pos:position pos:line="6" pos:column="19"/></name></type> <name pos:line="6" pos:column="20">am_sender<pos:position pos:line="6" pos:column="29"/></name></decl>;<pos:position pos:line="6" pos:column="30"/></decl_stmt>
	<decl_stmt><decl><specifier pos:line="7" pos:column="9">extern<pos:position pos:line="7" pos:column="15"/></specifier> <type><name pos:line="7" pos:column="16">int<pos:position pos:line="7" pos:column="19"/></name></type> <name pos:line="7" pos:column="20">am_daemon<pos:position pos:line="7" pos:column="29"/></name></decl>;<pos:position pos:line="7" pos:column="30"/></decl_stmt>

	<if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><operator pos:line="9" pos:column="13">!<pos:position pos:line="9" pos:column="14"/></operator><name pos:line="9" pos:column="14">verbose<pos:position pos:line="9" pos:column="21"/></name></expr>)<pos:position pos:line="9" pos:column="22"/></condition><then pos:line="9" pos:column="22"> <block type="pseudo"><return pos:line="9" pos:column="23">return;<pos:position pos:line="9" pos:column="30"/></return></block></then></if>

	<if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><name pos:line="11" pos:column="13">am_daemon<pos:position pos:line="11" pos:column="22"/></name></expr>)<pos:position pos:line="11" pos:column="23"/></condition><then pos:line="11" pos:column="23"> <block pos:line="11" pos:column="24">{
		<expr_stmt><expr><call><name pos:line="12" pos:column="17">rprintf<pos:position pos:line="12" pos:column="24"/></name><argument_list pos:line="12" pos:column="24">(<argument><expr><name pos:line="12" pos:column="25">FINFO<pos:position pos:line="12" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="12" pos:column="32">"wrote %.0f bytes  read %.0f bytes  total size %.0f\n"<pos:position pos:line="12" pos:column="86"/></literal></expr></argument>,
			<argument><expr><operator pos:line="13" pos:column="25">(<pos:position pos:line="13" pos:column="26"/></operator><name pos:line="13" pos:column="26">double<pos:position pos:line="13" pos:column="32"/></name><operator pos:line="13" pos:column="32">)<pos:position pos:line="13" pos:column="33"/></operator><call><name pos:line="13" pos:column="33">write_total<pos:position pos:line="13" pos:column="44"/></name><argument_list pos:line="13" pos:column="44">()<pos:position pos:line="13" pos:column="46"/></argument_list></call></expr></argument>,<argument><expr><operator pos:line="13" pos:column="47">(<pos:position pos:line="13" pos:column="48"/></operator><name pos:line="13" pos:column="48">double<pos:position pos:line="13" pos:column="54"/></name><operator pos:line="13" pos:column="54">)<pos:position pos:line="13" pos:column="55"/></operator><call><name pos:line="13" pos:column="55">read_total<pos:position pos:line="13" pos:column="65"/></name><argument_list pos:line="13" pos:column="65">()<pos:position pos:line="13" pos:column="67"/></argument_list></call></expr></argument>,
			<argument><expr><operator pos:line="14" pos:column="25">(<pos:position pos:line="14" pos:column="26"/></operator><name pos:line="14" pos:column="26">double<pos:position pos:line="14" pos:column="32"/></name><operator pos:line="14" pos:column="32">)<pos:position pos:line="14" pos:column="33"/></operator><name pos:line="14" pos:column="33">total_size<pos:position pos:line="14" pos:column="43"/></name></expr></argument>)<pos:position pos:line="14" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="45"/></expr_stmt>
	}<pos:position pos:line="15" pos:column="10"/></block></then></if>

	<if pos:line="17" pos:column="9">if <condition pos:line="17" pos:column="12">(<expr><name pos:line="17" pos:column="13">am_server<pos:position pos:line="17" pos:column="22"/></name> <operator pos:line="17" pos:column="23">&amp;&amp;<pos:position pos:line="17" pos:column="33"/></operator> <name pos:line="17" pos:column="26">am_sender<pos:position pos:line="17" pos:column="35"/></name></expr>)<pos:position pos:line="17" pos:column="36"/></condition><then pos:line="17" pos:column="36"> <block pos:line="17" pos:column="37">{
		<expr_stmt><expr><call><name pos:line="18" pos:column="17">write_longint<pos:position pos:line="18" pos:column="30"/></name><argument_list pos:line="18" pos:column="30">(<argument><expr><name pos:line="18" pos:column="31">f<pos:position pos:line="18" pos:column="32"/></name></expr></argument>,<argument><expr><call><name pos:line="18" pos:column="33">read_total<pos:position pos:line="18" pos:column="43"/></name><argument_list pos:line="18" pos:column="43">()<pos:position pos:line="18" pos:column="45"/></argument_list></call></expr></argument>)<pos:position pos:line="18" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="47"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="19" pos:column="17">write_longint<pos:position pos:line="19" pos:column="30"/></name><argument_list pos:line="19" pos:column="30">(<argument><expr><name pos:line="19" pos:column="31">f<pos:position pos:line="19" pos:column="32"/></name></expr></argument>,<argument><expr><call><name pos:line="19" pos:column="33">write_total<pos:position pos:line="19" pos:column="44"/></name><argument_list pos:line="19" pos:column="44">()<pos:position pos:line="19" pos:column="46"/></argument_list></call></expr></argument>)<pos:position pos:line="19" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="48"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="20" pos:column="17">write_longint<pos:position pos:line="20" pos:column="30"/></name><argument_list pos:line="20" pos:column="30">(<argument><expr><name pos:line="20" pos:column="31">f<pos:position pos:line="20" pos:column="32"/></name></expr></argument>,<argument><expr><name pos:line="20" pos:column="33">total_size<pos:position pos:line="20" pos:column="43"/></name></expr></argument>)<pos:position pos:line="20" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="45"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="21" pos:column="17">write_flush<pos:position pos:line="21" pos:column="28"/></name><argument_list pos:line="21" pos:column="28">(<argument><expr><name pos:line="21" pos:column="29">f<pos:position pos:line="21" pos:column="30"/></name></expr></argument>)<pos:position pos:line="21" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="32"/></expr_stmt>
		<return pos:line="22" pos:column="17">return;<pos:position pos:line="22" pos:column="24"/></return>
	}<pos:position pos:line="23" pos:column="10"/></block></then></if>
    
	<if pos:line="25" pos:column="9">if <condition pos:line="25" pos:column="12">(<expr><name pos:line="25" pos:column="13">am_sender<pos:position pos:line="25" pos:column="22"/></name></expr>)<pos:position pos:line="25" pos:column="23"/></condition><then pos:line="25" pos:column="23"> <block pos:line="25" pos:column="24">{
		<expr_stmt><expr><name pos:line="26" pos:column="17">in<pos:position pos:line="26" pos:column="19"/></name> <operator pos:line="26" pos:column="20">=<pos:position pos:line="26" pos:column="21"/></operator> <call><name pos:line="26" pos:column="22">read_total<pos:position pos:line="26" pos:column="32"/></name><argument_list pos:line="26" pos:column="32">()<pos:position pos:line="26" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="35"/></expr_stmt>
		<expr_stmt><expr><name pos:line="27" pos:column="17">out<pos:position pos:line="27" pos:column="20"/></name> <operator pos:line="27" pos:column="21">=<pos:position pos:line="27" pos:column="22"/></operator> <call><name pos:line="27" pos:column="23">write_total<pos:position pos:line="27" pos:column="34"/></name><argument_list pos:line="27" pos:column="34">()<pos:position pos:line="27" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="37"/></expr_stmt>
		<expr_stmt><expr><name pos:line="28" pos:column="17">tsize<pos:position pos:line="28" pos:column="22"/></name> <operator pos:line="28" pos:column="23">=<pos:position pos:line="28" pos:column="24"/></operator> <name pos:line="28" pos:column="25">total_size<pos:position pos:line="28" pos:column="35"/></name></expr>;<pos:position pos:line="28" pos:column="36"/></expr_stmt>
	}<pos:position pos:line="29" pos:column="10"/></block></then> <else pos:line="29" pos:column="11">else <block pos:line="29" pos:column="16">{
		<expr_stmt><expr><name pos:line="30" pos:column="17">out<pos:position pos:line="30" pos:column="20"/></name> <operator pos:line="30" pos:column="21">=<pos:position pos:line="30" pos:column="22"/></operator> <call><name pos:line="30" pos:column="23">read_longint<pos:position pos:line="30" pos:column="35"/></name><argument_list pos:line="30" pos:column="35">(<argument><expr><name pos:line="30" pos:column="36">f<pos:position pos:line="30" pos:column="37"/></name></expr></argument>)<pos:position pos:line="30" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="39"/></expr_stmt>
		<expr_stmt><expr><name pos:line="31" pos:column="17">in<pos:position pos:line="31" pos:column="19"/></name> <operator pos:line="31" pos:column="20">=<pos:position pos:line="31" pos:column="21"/></operator> <call><name pos:line="31" pos:column="22">read_longint<pos:position pos:line="31" pos:column="34"/></name><argument_list pos:line="31" pos:column="34">(<argument><expr><name pos:line="31" pos:column="35">f<pos:position pos:line="31" pos:column="36"/></name></expr></argument>)<pos:position pos:line="31" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="38"/></expr_stmt>
		<expr_stmt><expr><name pos:line="32" pos:column="17">tsize<pos:position pos:line="32" pos:column="22"/></name> <operator pos:line="32" pos:column="23">=<pos:position pos:line="32" pos:column="24"/></operator> <call><name pos:line="32" pos:column="25">read_longint<pos:position pos:line="32" pos:column="37"/></name><argument_list pos:line="32" pos:column="37">(<argument><expr><name pos:line="32" pos:column="38">f<pos:position pos:line="32" pos:column="39"/></name></expr></argument>)<pos:position pos:line="32" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="41"/></expr_stmt>
	}<pos:position pos:line="33" pos:column="10"/></block></else></if>
	
	<expr_stmt><expr><call><name pos:line="35" pos:column="9">printf<pos:position pos:line="35" pos:column="15"/></name><argument_list pos:line="35" pos:column="15">(<argument><expr><literal type="string" pos:line="35" pos:column="16">"wrote %.0f bytes  read %.0f bytes  %.2f bytes/sec\n"<pos:position pos:line="35" pos:column="69"/></literal></expr></argument>,
	       <argument><expr><operator pos:line="36" pos:column="16">(<pos:position pos:line="36" pos:column="17"/></operator><name pos:line="36" pos:column="17">double<pos:position pos:line="36" pos:column="23"/></name><operator pos:line="36" pos:column="23">)<pos:position pos:line="36" pos:column="24"/></operator><name pos:line="36" pos:column="24">out<pos:position pos:line="36" pos:column="27"/></name></expr></argument>,<argument><expr><operator pos:line="36" pos:column="28">(<pos:position pos:line="36" pos:column="29"/></operator><name pos:line="36" pos:column="29">double<pos:position pos:line="36" pos:column="35"/></name><operator pos:line="36" pos:column="35">)<pos:position pos:line="36" pos:column="36"/></operator><name pos:line="36" pos:column="36">in<pos:position pos:line="36" pos:column="38"/></name></expr></argument>,<argument><expr><operator pos:line="36" pos:column="39">(<pos:position pos:line="36" pos:column="40"/></operator><name pos:line="36" pos:column="40">in<pos:position pos:line="36" pos:column="42"/></name><operator pos:line="36" pos:column="42">+<pos:position pos:line="36" pos:column="43"/></operator><name pos:line="36" pos:column="43">out<pos:position pos:line="36" pos:column="46"/></name><operator pos:line="36" pos:column="46">)<pos:position pos:line="36" pos:column="47"/></operator><operator pos:line="36" pos:column="47">/<pos:position pos:line="36" pos:column="48"/></operator><operator pos:line="36" pos:column="48">(<pos:position pos:line="36" pos:column="49"/></operator><literal type="number" pos:line="36" pos:column="49">0.5<pos:position pos:line="36" pos:column="52"/></literal> <operator pos:line="36" pos:column="53">+<pos:position pos:line="36" pos:column="54"/></operator> <operator pos:line="36" pos:column="55">(<pos:position pos:line="36" pos:column="56"/></operator><name pos:line="36" pos:column="56">t<pos:position pos:line="36" pos:column="57"/></name><operator pos:line="36" pos:column="57">-<pos:position pos:line="36" pos:column="58"/></operator><name pos:line="36" pos:column="58">starttime<pos:position pos:line="36" pos:column="67"/></name><operator pos:line="36" pos:column="67">)<pos:position pos:line="36" pos:column="68"/></operator><operator pos:line="36" pos:column="68">)<pos:position pos:line="36" pos:column="69"/></operator></expr></argument>)<pos:position pos:line="36" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="71"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="37" pos:column="9">printf<pos:position pos:line="37" pos:column="15"/></name><argument_list pos:line="37" pos:column="15">(<argument><expr><literal type="string" pos:line="37" pos:column="16">"total size is %.0f  speedup is %.2f\n"<pos:position pos:line="37" pos:column="55"/></literal></expr></argument>,
	       <argument><expr><operator pos:line="38" pos:column="16">(<pos:position pos:line="38" pos:column="17"/></operator><name pos:line="38" pos:column="17">double<pos:position pos:line="38" pos:column="23"/></name><operator pos:line="38" pos:column="23">)<pos:position pos:line="38" pos:column="24"/></operator><name pos:line="38" pos:column="24">tsize<pos:position pos:line="38" pos:column="29"/></name></expr></argument>,<argument><expr><operator pos:line="38" pos:column="30">(<pos:position pos:line="38" pos:column="31"/></operator><literal type="number" pos:line="38" pos:column="31">1.0<pos:position pos:line="38" pos:column="34"/></literal><operator pos:line="38" pos:column="34">*<pos:position pos:line="38" pos:column="35"/></operator><name pos:line="38" pos:column="35">tsize<pos:position pos:line="38" pos:column="40"/></name><operator pos:line="38" pos:column="40">)<pos:position pos:line="38" pos:column="41"/></operator><operator pos:line="38" pos:column="41">/<pos:position pos:line="38" pos:column="42"/></operator><operator pos:line="38" pos:column="42">(<pos:position pos:line="38" pos:column="43"/></operator><name pos:line="38" pos:column="43">in<pos:position pos:line="38" pos:column="45"/></name><operator pos:line="38" pos:column="45">+<pos:position pos:line="38" pos:column="46"/></operator><name pos:line="38" pos:column="46">out<pos:position pos:line="38" pos:column="49"/></name><operator pos:line="38" pos:column="49">)<pos:position pos:line="38" pos:column="50"/></operator></expr></argument>)<pos:position pos:line="38" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="52"/></expr_stmt>
}<pos:position pos:line="39" pos:column="2"/></block></function></unit>
