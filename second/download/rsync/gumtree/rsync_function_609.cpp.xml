<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_function_609.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type>
<name pos:line="2" pos:column="1">recv_deflated_token<pos:position pos:line="2" pos:column="20"/></name><parameter_list pos:line="2" pos:column="20">(<parameter><decl><type><name pos:line="2" pos:column="21">int<pos:position pos:line="2" pos:column="24"/></name></type> <name pos:line="2" pos:column="25">f<pos:position pos:line="2" pos:column="26"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="28">char<pos:position pos:line="2" pos:column="32"/></name> <modifier pos:line="2" pos:column="33">*<pos:position pos:line="2" pos:column="34"/></modifier><modifier pos:line="2" pos:column="34">*<pos:position pos:line="2" pos:column="35"/></modifier></type><name pos:line="2" pos:column="35">data<pos:position pos:line="2" pos:column="39"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="40"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">int<pos:position pos:line="4" pos:column="8"/></name></type> <name pos:line="4" pos:column="9">n<pos:position pos:line="4" pos:column="10"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="12">r<pos:position pos:line="4" pos:column="13"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="15">flag<pos:position pos:line="4" pos:column="19"/></name></decl>;<pos:position pos:line="4" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><specifier pos:line="5" pos:column="5">static<pos:position pos:line="5" pos:column="11"/></specifier> <type><name pos:line="5" pos:column="12">int<pos:position pos:line="5" pos:column="15"/></name></type> <name pos:line="5" pos:column="16">init_done<pos:position pos:line="5" pos:column="25"/></name></decl>;<pos:position pos:line="5" pos:column="26"/></decl_stmt>
    <decl_stmt><decl><specifier pos:line="6" pos:column="5">static<pos:position pos:line="6" pos:column="11"/></specifier> <type><name pos:line="6" pos:column="12">int<pos:position pos:line="6" pos:column="15"/></name></type> <name pos:line="6" pos:column="16">saved_flag<pos:position pos:line="6" pos:column="26"/></name></decl>;<pos:position pos:line="6" pos:column="27"/></decl_stmt>

    <for pos:line="8" pos:column="5">for <control pos:line="8" pos:column="9">(<init pos:line="8" pos:column="10">;<pos:position pos:line="8" pos:column="11"/></init><condition pos:line="8" pos:column="11">;<pos:position pos:line="8" pos:column="12"/></condition><incr/>)<pos:position pos:line="8" pos:column="13"/></control> <block pos:line="8" pos:column="14">{
	<switch pos:line="9" pos:column="9">switch <condition pos:line="9" pos:column="16">(<expr><name pos:line="9" pos:column="17">recv_state<pos:position pos:line="9" pos:column="27"/></name></expr>)<pos:position pos:line="9" pos:column="28"/></condition> <block pos:line="9" pos:column="29">{
	<case pos:line="10" pos:column="9">case <expr><name pos:line="10" pos:column="14">r_init<pos:position pos:line="10" pos:column="20"/></name></expr>:<pos:position pos:line="10" pos:column="21"/></case>
	    <if pos:line="11" pos:column="13">if <condition pos:line="11" pos:column="16">(<expr><operator pos:line="11" pos:column="17">!<pos:position pos:line="11" pos:column="18"/></operator><name pos:line="11" pos:column="18">init_done<pos:position pos:line="11" pos:column="27"/></name></expr>)<pos:position pos:line="11" pos:column="28"/></condition><then pos:line="11" pos:column="28"> <block pos:line="11" pos:column="29">{
		<expr_stmt><expr><name><name pos:line="12" pos:column="17">rx_strm<pos:position pos:line="12" pos:column="24"/></name><operator pos:line="12" pos:column="24">.<pos:position pos:line="12" pos:column="25"/></operator><name pos:line="12" pos:column="25">next_out<pos:position pos:line="12" pos:column="33"/></name></name> <operator pos:line="12" pos:column="34">=<pos:position pos:line="12" pos:column="35"/></operator> <name pos:line="12" pos:column="36">NULL<pos:position pos:line="12" pos:column="40"/></name></expr>;<pos:position pos:line="12" pos:column="41"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="13" pos:column="17">rx_strm<pos:position pos:line="13" pos:column="24"/></name><operator pos:line="13" pos:column="24">.<pos:position pos:line="13" pos:column="25"/></operator><name pos:line="13" pos:column="25">zalloc<pos:position pos:line="13" pos:column="31"/></name></name> <operator pos:line="13" pos:column="32">=<pos:position pos:line="13" pos:column="33"/></operator> <name pos:line="13" pos:column="34">z_alloc<pos:position pos:line="13" pos:column="41"/></name></expr>;<pos:position pos:line="13" pos:column="42"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="14" pos:column="17">rx_strm<pos:position pos:line="14" pos:column="24"/></name><operator pos:line="14" pos:column="24">.<pos:position pos:line="14" pos:column="25"/></operator><name pos:line="14" pos:column="25">zfree<pos:position pos:line="14" pos:column="30"/></name></name> <operator pos:line="14" pos:column="31">=<pos:position pos:line="14" pos:column="32"/></operator> <name pos:line="14" pos:column="33">z_free<pos:position pos:line="14" pos:column="39"/></name></expr>;<pos:position pos:line="14" pos:column="40"/></expr_stmt>
		<if pos:line="15" pos:column="17">if <condition pos:line="15" pos:column="20">(<expr><call><name pos:line="15" pos:column="21">inflateInit2<pos:position pos:line="15" pos:column="33"/></name><argument_list pos:line="15" pos:column="33">(<argument><expr><operator pos:line="15" pos:column="34">&amp;<pos:position pos:line="15" pos:column="39"/></operator><name pos:line="15" pos:column="35">rx_strm<pos:position pos:line="15" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="15" pos:column="44">-<pos:position pos:line="15" pos:column="45"/></operator><literal type="number" pos:line="15" pos:column="45">15<pos:position pos:line="15" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="48"/></argument_list></call> <operator pos:line="15" pos:column="49">!=<pos:position pos:line="15" pos:column="51"/></operator> <name pos:line="15" pos:column="52">Z_OK<pos:position pos:line="15" pos:column="56"/></name></expr>)<pos:position pos:line="15" pos:column="57"/></condition><then pos:line="15" pos:column="57"> <block pos:line="15" pos:column="58">{
		    <expr_stmt><expr><call><name pos:line="16" pos:column="21">fprintf<pos:position pos:line="16" pos:column="28"/></name><argument_list pos:line="16" pos:column="28">(<argument><expr><name pos:line="16" pos:column="29">FERROR<pos:position pos:line="16" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="37">"inflate init failed\n"<pos:position pos:line="16" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="62"/></expr_stmt>
		    <expr_stmt><expr><call><name pos:line="17" pos:column="21">exit_cleanup<pos:position pos:line="17" pos:column="33"/></name><argument_list pos:line="17" pos:column="33">(<argument><expr><literal type="number" pos:line="17" pos:column="34">1<pos:position pos:line="17" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="37"/></expr_stmt>
		}<pos:position pos:line="18" pos:column="18"/></block></then></if>
		<if pos:line="19" pos:column="17">if <condition pos:line="19" pos:column="20">(<expr><operator pos:line="19" pos:column="21">(<pos:position pos:line="19" pos:column="22"/></operator><name pos:line="19" pos:column="22">cbuf<pos:position pos:line="19" pos:column="26"/></name> <operator pos:line="19" pos:column="27">=<pos:position pos:line="19" pos:column="28"/></operator> <call><name pos:line="19" pos:column="29">malloc<pos:position pos:line="19" pos:column="35"/></name><argument_list pos:line="19" pos:column="35">(<argument><expr><name pos:line="19" pos:column="36">MAX_DATA_COUNT<pos:position pos:line="19" pos:column="50"/></name></expr></argument>)<pos:position pos:line="19" pos:column="51"/></argument_list></call><operator pos:line="19" pos:column="51">)<pos:position pos:line="19" pos:column="52"/></operator> <operator pos:line="19" pos:column="53">==<pos:position pos:line="19" pos:column="55"/></operator> <name pos:line="19" pos:column="56">NULL<pos:position pos:line="19" pos:column="60"/></name>
		    <operator pos:line="20" pos:column="21">||<pos:position pos:line="20" pos:column="23"/></operator> <operator pos:line="20" pos:column="24">(<pos:position pos:line="20" pos:column="25"/></operator><name pos:line="20" pos:column="25">dbuf<pos:position pos:line="20" pos:column="29"/></name> <operator pos:line="20" pos:column="30">=<pos:position pos:line="20" pos:column="31"/></operator> <call><name pos:line="20" pos:column="32">malloc<pos:position pos:line="20" pos:column="38"/></name><argument_list pos:line="20" pos:column="38">(<argument><expr><name pos:line="20" pos:column="39">CHUNK_SIZE<pos:position pos:line="20" pos:column="49"/></name></expr></argument>)<pos:position pos:line="20" pos:column="50"/></argument_list></call><operator pos:line="20" pos:column="50">)<pos:position pos:line="20" pos:column="51"/></operator> <operator pos:line="20" pos:column="52">==<pos:position pos:line="20" pos:column="54"/></operator> <name pos:line="20" pos:column="55">NULL<pos:position pos:line="20" pos:column="59"/></name></expr>)<pos:position pos:line="20" pos:column="60"/></condition><then pos:line="20" pos:column="60">
		    <block type="pseudo"><expr_stmt><expr><call><name pos:line="21" pos:column="21">out_of_memory<pos:position pos:line="21" pos:column="34"/></name><argument_list pos:line="21" pos:column="34">(<argument><expr><literal type="string" pos:line="21" pos:column="35">"recv_deflated_token"<pos:position pos:line="21" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="58"/></expr_stmt></block></then></if>
		<expr_stmt><expr><name pos:line="22" pos:column="17">init_done<pos:position pos:line="22" pos:column="26"/></name> <operator pos:line="22" pos:column="27">=<pos:position pos:line="22" pos:column="28"/></operator> <literal type="number" pos:line="22" pos:column="29">1<pos:position pos:line="22" pos:column="30"/></literal></expr>;<pos:position pos:line="22" pos:column="31"/></expr_stmt>
	    }<pos:position pos:line="23" pos:column="14"/></block></then> <else pos:line="23" pos:column="15">else <block pos:line="23" pos:column="20">{
		<expr_stmt><expr><call><name pos:line="24" pos:column="17">inflateReset<pos:position pos:line="24" pos:column="29"/></name><argument_list pos:line="24" pos:column="29">(<argument><expr><operator pos:line="24" pos:column="30">&amp;<pos:position pos:line="24" pos:column="35"/></operator><name pos:line="24" pos:column="31">rx_strm<pos:position pos:line="24" pos:column="38"/></name></expr></argument>)<pos:position pos:line="24" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="40"/></expr_stmt>
	    }<pos:position pos:line="25" pos:column="14"/></block></else></if>
	    <expr_stmt><expr><name pos:line="26" pos:column="13">recv_state<pos:position pos:line="26" pos:column="23"/></name> <operator pos:line="26" pos:column="24">=<pos:position pos:line="26" pos:column="25"/></operator> <name pos:line="26" pos:column="26">r_idle<pos:position pos:line="26" pos:column="32"/></name></expr>;<pos:position pos:line="26" pos:column="33"/></expr_stmt>
	    <expr_stmt><expr><name pos:line="27" pos:column="13">rx_token<pos:position pos:line="27" pos:column="21"/></name> <operator pos:line="27" pos:column="22">=<pos:position pos:line="27" pos:column="23"/></operator> <literal type="number" pos:line="27" pos:column="24">0<pos:position pos:line="27" pos:column="25"/></literal></expr>;<pos:position pos:line="27" pos:column="26"/></expr_stmt>
	    <break pos:line="28" pos:column="13">break;<pos:position pos:line="28" pos:column="19"/></break>
	    
	<case pos:line="30" pos:column="9">case <expr><name pos:line="30" pos:column="14">r_idle<pos:position pos:line="30" pos:column="20"/></name></expr>:<pos:position pos:line="30" pos:column="21"/></case>
	<case pos:line="31" pos:column="9">case <expr><name pos:line="31" pos:column="14">r_inflated<pos:position pos:line="31" pos:column="24"/></name></expr>:<pos:position pos:line="31" pos:column="25"/></case>
	    <if pos:line="32" pos:column="13">if <condition pos:line="32" pos:column="16">(<expr><name pos:line="32" pos:column="17">saved_flag<pos:position pos:line="32" pos:column="27"/></name></expr>)<pos:position pos:line="32" pos:column="28"/></condition><then pos:line="32" pos:column="28"> <block pos:line="32" pos:column="29">{
		<expr_stmt><expr><name pos:line="33" pos:column="17">flag<pos:position pos:line="33" pos:column="21"/></name> <operator pos:line="33" pos:column="22">=<pos:position pos:line="33" pos:column="23"/></operator> <name pos:line="33" pos:column="24">saved_flag<pos:position pos:line="33" pos:column="34"/></name> <operator pos:line="33" pos:column="35">&amp;<pos:position pos:line="33" pos:column="40"/></operator> <literal type="number" pos:line="33" pos:column="37">0xff<pos:position pos:line="33" pos:column="41"/></literal></expr>;<pos:position pos:line="33" pos:column="42"/></expr_stmt>
		<expr_stmt><expr><name pos:line="34" pos:column="17">saved_flag<pos:position pos:line="34" pos:column="27"/></name> <operator pos:line="34" pos:column="28">=<pos:position pos:line="34" pos:column="29"/></operator> <literal type="number" pos:line="34" pos:column="30">0<pos:position pos:line="34" pos:column="31"/></literal></expr>;<pos:position pos:line="34" pos:column="32"/></expr_stmt>
	    }<pos:position pos:line="35" pos:column="14"/></block></then> <else pos:line="35" pos:column="15">else
		<block type="pseudo"><expr_stmt><expr><name pos:line="36" pos:column="17">flag<pos:position pos:line="36" pos:column="21"/></name> <operator pos:line="36" pos:column="22">=<pos:position pos:line="36" pos:column="23"/></operator> <call><name pos:line="36" pos:column="24">read_byte<pos:position pos:line="36" pos:column="33"/></name><argument_list pos:line="36" pos:column="33">(<argument><expr><name pos:line="36" pos:column="34">f<pos:position pos:line="36" pos:column="35"/></name></expr></argument>)<pos:position pos:line="36" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="37"/></expr_stmt></block></else></if>
	    <if pos:line="37" pos:column="13">if <condition pos:line="37" pos:column="16">(<expr><operator pos:line="37" pos:column="17">(<pos:position pos:line="37" pos:column="18"/></operator><name pos:line="37" pos:column="18">flag<pos:position pos:line="37" pos:column="22"/></name> <operator pos:line="37" pos:column="23">&amp;<pos:position pos:line="37" pos:column="28"/></operator> <literal type="number" pos:line="37" pos:column="25">0xC0<pos:position pos:line="37" pos:column="29"/></literal><operator pos:line="37" pos:column="29">)<pos:position pos:line="37" pos:column="30"/></operator> <operator pos:line="37" pos:column="31">==<pos:position pos:line="37" pos:column="33"/></operator> <name pos:line="37" pos:column="34">DEFLATED_DATA<pos:position pos:line="37" pos:column="47"/></name></expr>)<pos:position pos:line="37" pos:column="48"/></condition><then pos:line="37" pos:column="48"> <block pos:line="37" pos:column="49">{
		<expr_stmt><expr><name pos:line="38" pos:column="17">n<pos:position pos:line="38" pos:column="18"/></name> <operator pos:line="38" pos:column="19">=<pos:position pos:line="38" pos:column="20"/></operator> <operator pos:line="38" pos:column="21">(<pos:position pos:line="38" pos:column="22"/></operator><operator pos:line="38" pos:column="22">(<pos:position pos:line="38" pos:column="23"/></operator><name pos:line="38" pos:column="23">flag<pos:position pos:line="38" pos:column="27"/></name> <operator pos:line="38" pos:column="28">&amp;<pos:position pos:line="38" pos:column="33"/></operator> <literal type="number" pos:line="38" pos:column="30">0x3f<pos:position pos:line="38" pos:column="34"/></literal><operator pos:line="38" pos:column="34">)<pos:position pos:line="38" pos:column="35"/></operator> <operator pos:line="38" pos:column="36">&lt;&lt;<pos:position pos:line="38" pos:column="44"/></operator> <literal type="number" pos:line="38" pos:column="39">8<pos:position pos:line="38" pos:column="40"/></literal><operator pos:line="38" pos:column="40">)<pos:position pos:line="38" pos:column="41"/></operator> <operator pos:line="38" pos:column="42">+<pos:position pos:line="38" pos:column="43"/></operator> <call><name pos:line="38" pos:column="44">read_byte<pos:position pos:line="38" pos:column="53"/></name><argument_list pos:line="38" pos:column="53">(<argument><expr><name pos:line="38" pos:column="54">f<pos:position pos:line="38" pos:column="55"/></name></expr></argument>)<pos:position pos:line="38" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="57"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="39" pos:column="17">read_buf<pos:position pos:line="39" pos:column="25"/></name><argument_list pos:line="39" pos:column="25">(<argument><expr><name pos:line="39" pos:column="26">f<pos:position pos:line="39" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="29">cbuf<pos:position pos:line="39" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="35">n<pos:position pos:line="39" pos:column="36"/></name></expr></argument>)<pos:position pos:line="39" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="38"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="40" pos:column="17">rx_strm<pos:position pos:line="40" pos:column="24"/></name><operator pos:line="40" pos:column="24">.<pos:position pos:line="40" pos:column="25"/></operator><name pos:line="40" pos:column="25">next_in<pos:position pos:line="40" pos:column="32"/></name></name> <operator pos:line="40" pos:column="33">=<pos:position pos:line="40" pos:column="34"/></operator> <operator pos:line="40" pos:column="35">(<pos:position pos:line="40" pos:column="36"/></operator><name pos:line="40" pos:column="36">Bytef<pos:position pos:line="40" pos:column="41"/></name> <operator pos:line="40" pos:column="42">*<pos:position pos:line="40" pos:column="43"/></operator><operator pos:line="40" pos:column="43">)<pos:position pos:line="40" pos:column="44"/></operator><name pos:line="40" pos:column="44">cbuf<pos:position pos:line="40" pos:column="48"/></name></expr>;<pos:position pos:line="40" pos:column="49"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="41" pos:column="17">rx_strm<pos:position pos:line="41" pos:column="24"/></name><operator pos:line="41" pos:column="24">.<pos:position pos:line="41" pos:column="25"/></operator><name pos:line="41" pos:column="25">avail_in<pos:position pos:line="41" pos:column="33"/></name></name> <operator pos:line="41" pos:column="34">=<pos:position pos:line="41" pos:column="35"/></operator> <name pos:line="41" pos:column="36">n<pos:position pos:line="41" pos:column="37"/></name></expr>;<pos:position pos:line="41" pos:column="38"/></expr_stmt>
		<expr_stmt><expr><name pos:line="42" pos:column="17">recv_state<pos:position pos:line="42" pos:column="27"/></name> <operator pos:line="42" pos:column="28">=<pos:position pos:line="42" pos:column="29"/></operator> <name pos:line="42" pos:column="30">r_inflating<pos:position pos:line="42" pos:column="41"/></name></expr>;<pos:position pos:line="42" pos:column="42"/></expr_stmt>
		<break pos:line="43" pos:column="17">break;<pos:position pos:line="43" pos:column="23"/></break>
	    }<pos:position pos:line="44" pos:column="14"/></block></then></if>
	    <if pos:line="45" pos:column="13">if <condition pos:line="45" pos:column="16">(<expr><name pos:line="45" pos:column="17">recv_state<pos:position pos:line="45" pos:column="27"/></name> <operator pos:line="45" pos:column="28">==<pos:position pos:line="45" pos:column="30"/></operator> <name pos:line="45" pos:column="31">r_inflated<pos:position pos:line="45" pos:column="41"/></name></expr>)<pos:position pos:line="45" pos:column="42"/></condition><then pos:line="45" pos:column="42"> <block pos:line="45" pos:column="43">{
		<comment type="block" pos:line="46" pos:column="17">/* check previous inflated stuff ended correctly */</comment>
		<expr_stmt><expr><name><name pos:line="47" pos:column="17">rx_strm<pos:position pos:line="47" pos:column="24"/></name><operator pos:line="47" pos:column="24">.<pos:position pos:line="47" pos:column="25"/></operator><name pos:line="47" pos:column="25">avail_in<pos:position pos:line="47" pos:column="33"/></name></name> <operator pos:line="47" pos:column="34">=<pos:position pos:line="47" pos:column="35"/></operator> <literal type="number" pos:line="47" pos:column="36">0<pos:position pos:line="47" pos:column="37"/></literal></expr>;<pos:position pos:line="47" pos:column="38"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="48" pos:column="17">rx_strm<pos:position pos:line="48" pos:column="24"/></name><operator pos:line="48" pos:column="24">.<pos:position pos:line="48" pos:column="25"/></operator><name pos:line="48" pos:column="25">next_out<pos:position pos:line="48" pos:column="33"/></name></name> <operator pos:line="48" pos:column="34">=<pos:position pos:line="48" pos:column="35"/></operator> <operator pos:line="48" pos:column="36">(<pos:position pos:line="48" pos:column="37"/></operator><name pos:line="48" pos:column="37">Bytef<pos:position pos:line="48" pos:column="42"/></name> <operator pos:line="48" pos:column="43">*<pos:position pos:line="48" pos:column="44"/></operator><operator pos:line="48" pos:column="44">)<pos:position pos:line="48" pos:column="45"/></operator><name pos:line="48" pos:column="45">dbuf<pos:position pos:line="48" pos:column="49"/></name></expr>;<pos:position pos:line="48" pos:column="50"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="49" pos:column="17">rx_strm<pos:position pos:line="49" pos:column="24"/></name><operator pos:line="49" pos:column="24">.<pos:position pos:line="49" pos:column="25"/></operator><name pos:line="49" pos:column="25">avail_out<pos:position pos:line="49" pos:column="34"/></name></name> <operator pos:line="49" pos:column="35">=<pos:position pos:line="49" pos:column="36"/></operator> <name pos:line="49" pos:column="37">CHUNK_SIZE<pos:position pos:line="49" pos:column="47"/></name></expr>;<pos:position pos:line="49" pos:column="48"/></expr_stmt>
		<expr_stmt><expr><name pos:line="50" pos:column="17">r<pos:position pos:line="50" pos:column="18"/></name> <operator pos:line="50" pos:column="19">=<pos:position pos:line="50" pos:column="20"/></operator> <call><name pos:line="50" pos:column="21">inflate<pos:position pos:line="50" pos:column="28"/></name><argument_list pos:line="50" pos:column="28">(<argument><expr><operator pos:line="50" pos:column="29">&amp;<pos:position pos:line="50" pos:column="34"/></operator><name pos:line="50" pos:column="30">rx_strm<pos:position pos:line="50" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="39">Z_PACKET_FLUSH<pos:position pos:line="50" pos:column="53"/></name></expr></argument>)<pos:position pos:line="50" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="55"/></expr_stmt>
		<expr_stmt><expr><name pos:line="51" pos:column="17">n<pos:position pos:line="51" pos:column="18"/></name> <operator pos:line="51" pos:column="19">=<pos:position pos:line="51" pos:column="20"/></operator> <name pos:line="51" pos:column="21">CHUNK_SIZE<pos:position pos:line="51" pos:column="31"/></name> <operator pos:line="51" pos:column="32">-<pos:position pos:line="51" pos:column="33"/></operator> <name><name pos:line="51" pos:column="34">rx_strm<pos:position pos:line="51" pos:column="41"/></name><operator pos:line="51" pos:column="41">.<pos:position pos:line="51" pos:column="42"/></operator><name pos:line="51" pos:column="42">avail_out<pos:position pos:line="51" pos:column="51"/></name></name></expr>;<pos:position pos:line="51" pos:column="52"/></expr_stmt>
		<if pos:line="52" pos:column="17">if <condition pos:line="52" pos:column="20">(<expr><name pos:line="52" pos:column="21">r<pos:position pos:line="52" pos:column="22"/></name> <operator pos:line="52" pos:column="23">!=<pos:position pos:line="52" pos:column="25"/></operator> <name pos:line="52" pos:column="26">Z_OK<pos:position pos:line="52" pos:column="30"/></name></expr>)<pos:position pos:line="52" pos:column="31"/></condition><then pos:line="52" pos:column="31"> <block pos:line="52" pos:column="32">{
		    <expr_stmt><expr><call><name pos:line="53" pos:column="21">fprintf<pos:position pos:line="53" pos:column="28"/></name><argument_list pos:line="53" pos:column="28">(<argument><expr><name pos:line="53" pos:column="29">FERROR<pos:position pos:line="53" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="53" pos:column="37">"inflate flush returned %d (%d bytes)\n"<pos:position pos:line="53" pos:column="77"/></literal></expr></argument>,
			    <argument><expr><name pos:line="54" pos:column="29">r<pos:position pos:line="54" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="32">n<pos:position pos:line="54" pos:column="33"/></name></expr></argument>)<pos:position pos:line="54" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="35"/></expr_stmt>
		    <expr_stmt><expr><call><name pos:line="55" pos:column="21">exit_cleanup<pos:position pos:line="55" pos:column="33"/></name><argument_list pos:line="55" pos:column="33">(<argument><expr><literal type="number" pos:line="55" pos:column="34">1<pos:position pos:line="55" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="55" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="37"/></expr_stmt>
		}<pos:position pos:line="56" pos:column="18"/></block></then></if>
		<if pos:line="57" pos:column="17">if <condition pos:line="57" pos:column="20">(<expr><name pos:line="57" pos:column="21">n<pos:position pos:line="57" pos:column="22"/></name> <operator pos:line="57" pos:column="23">!=<pos:position pos:line="57" pos:column="25"/></operator> <literal type="number" pos:line="57" pos:column="26">0<pos:position pos:line="57" pos:column="27"/></literal></expr>)<pos:position pos:line="57" pos:column="28"/></condition><then pos:line="57" pos:column="28"> <block pos:line="57" pos:column="29">{
		    <comment type="block" pos:line="58" pos:column="21">/* have to return some more data and
		       save the flag for later. */</comment>
		    <expr_stmt><expr><name pos:line="60" pos:column="21">saved_flag<pos:position pos:line="60" pos:column="31"/></name> <operator pos:line="60" pos:column="32">=<pos:position pos:line="60" pos:column="33"/></operator> <name pos:line="60" pos:column="34">flag<pos:position pos:line="60" pos:column="38"/></name> <operator pos:line="60" pos:column="39">+<pos:position pos:line="60" pos:column="40"/></operator> <literal type="number" pos:line="60" pos:column="41">0x10000<pos:position pos:line="60" pos:column="48"/></literal></expr>;<pos:position pos:line="60" pos:column="49"/></expr_stmt>
		    <if pos:line="61" pos:column="21">if <condition pos:line="61" pos:column="24">(<expr><name><name pos:line="61" pos:column="25">rx_strm<pos:position pos:line="61" pos:column="32"/></name><operator pos:line="61" pos:column="32">.<pos:position pos:line="61" pos:column="33"/></operator><name pos:line="61" pos:column="33">avail_out<pos:position pos:line="61" pos:column="42"/></name></name> <operator pos:line="61" pos:column="43">!=<pos:position pos:line="61" pos:column="45"/></operator> <literal type="number" pos:line="61" pos:column="46">0<pos:position pos:line="61" pos:column="47"/></literal></expr>)<pos:position pos:line="61" pos:column="48"/></condition><then pos:line="61" pos:column="48">
			<block type="pseudo"><expr_stmt><expr><name pos:line="62" pos:column="25">recv_state<pos:position pos:line="62" pos:column="35"/></name> <operator pos:line="62" pos:column="36">=<pos:position pos:line="62" pos:column="37"/></operator> <name pos:line="62" pos:column="38">r_idle<pos:position pos:line="62" pos:column="44"/></name></expr>;<pos:position pos:line="62" pos:column="45"/></expr_stmt></block></then></if>
		    <expr_stmt><expr><operator pos:line="63" pos:column="21">*<pos:position pos:line="63" pos:column="22"/></operator><name pos:line="63" pos:column="22">data<pos:position pos:line="63" pos:column="26"/></name> <operator pos:line="63" pos:column="27">=<pos:position pos:line="63" pos:column="28"/></operator> <name pos:line="63" pos:column="29">dbuf<pos:position pos:line="63" pos:column="33"/></name></expr>;<pos:position pos:line="63" pos:column="34"/></expr_stmt>
		    <return pos:line="64" pos:column="21">return <expr><name pos:line="64" pos:column="28">n<pos:position pos:line="64" pos:column="29"/></name></expr>;<pos:position pos:line="64" pos:column="30"/></return>
		}<pos:position pos:line="65" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name pos:line="66" pos:column="17">recv_state<pos:position pos:line="66" pos:column="27"/></name> <operator pos:line="66" pos:column="28">=<pos:position pos:line="66" pos:column="29"/></operator> <name pos:line="66" pos:column="30">r_idle<pos:position pos:line="66" pos:column="36"/></name></expr>;<pos:position pos:line="66" pos:column="37"/></expr_stmt>
	    }<pos:position pos:line="67" pos:column="14"/></block></then></if>
	    <if pos:line="68" pos:column="13">if <condition pos:line="68" pos:column="16">(<expr><name pos:line="68" pos:column="17">flag<pos:position pos:line="68" pos:column="21"/></name> <operator pos:line="68" pos:column="22">==<pos:position pos:line="68" pos:column="24"/></operator> <name pos:line="68" pos:column="25">END_FLAG<pos:position pos:line="68" pos:column="33"/></name></expr>)<pos:position pos:line="68" pos:column="34"/></condition><then pos:line="68" pos:column="34"> <block pos:line="68" pos:column="35">{
		<comment type="block" pos:line="69" pos:column="17">/* that's all folks */</comment>
		<expr_stmt><expr><name pos:line="70" pos:column="17">recv_state<pos:position pos:line="70" pos:column="27"/></name> <operator pos:line="70" pos:column="28">=<pos:position pos:line="70" pos:column="29"/></operator> <name pos:line="70" pos:column="30">r_init<pos:position pos:line="70" pos:column="36"/></name></expr>;<pos:position pos:line="70" pos:column="37"/></expr_stmt>
		<return pos:line="71" pos:column="17">return <expr><literal type="number" pos:line="71" pos:column="24">0<pos:position pos:line="71" pos:column="25"/></literal></expr>;<pos:position pos:line="71" pos:column="26"/></return>
	    }<pos:position pos:line="72" pos:column="14"/></block></then></if>

	    <comment type="block" pos:line="74" pos:column="13">/* here we have a token of some kind */</comment>
	    <if pos:line="75" pos:column="13">if <condition pos:line="75" pos:column="16">(<expr><name pos:line="75" pos:column="17">flag<pos:position pos:line="75" pos:column="21"/></name> <operator pos:line="75" pos:column="22">&amp;<pos:position pos:line="75" pos:column="27"/></operator> <name pos:line="75" pos:column="24">TOKEN_REL<pos:position pos:line="75" pos:column="33"/></name></expr>)<pos:position pos:line="75" pos:column="34"/></condition><then pos:line="75" pos:column="34"> <block pos:line="75" pos:column="35">{
		<expr_stmt><expr><name pos:line="76" pos:column="17">rx_token<pos:position pos:line="76" pos:column="25"/></name> <operator pos:line="76" pos:column="26">+=<pos:position pos:line="76" pos:column="28"/></operator> <name pos:line="76" pos:column="29">flag<pos:position pos:line="76" pos:column="33"/></name> <operator pos:line="76" pos:column="34">&amp;<pos:position pos:line="76" pos:column="39"/></operator> <literal type="number" pos:line="76" pos:column="36">0x3f<pos:position pos:line="76" pos:column="40"/></literal></expr>;<pos:position pos:line="76" pos:column="41"/></expr_stmt>
		<expr_stmt><expr><name pos:line="77" pos:column="17">flag<pos:position pos:line="77" pos:column="21"/></name> <operator pos:line="77" pos:column="22">&gt;&gt;=<pos:position pos:line="77" pos:column="31"/></operator> <literal type="number" pos:line="77" pos:column="26">6<pos:position pos:line="77" pos:column="27"/></literal></expr>;<pos:position pos:line="77" pos:column="28"/></expr_stmt>
	    }<pos:position pos:line="78" pos:column="14"/></block></then> <else pos:line="78" pos:column="15">else
		<block type="pseudo"><expr_stmt><expr><name pos:line="79" pos:column="17">rx_token<pos:position pos:line="79" pos:column="25"/></name> <operator pos:line="79" pos:column="26">=<pos:position pos:line="79" pos:column="27"/></operator> <call><name pos:line="79" pos:column="28">read_int<pos:position pos:line="79" pos:column="36"/></name><argument_list pos:line="79" pos:column="36">(<argument><expr><name pos:line="79" pos:column="37">f<pos:position pos:line="79" pos:column="38"/></name></expr></argument>)<pos:position pos:line="79" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="40"/></expr_stmt></block></else></if>
	    <if pos:line="80" pos:column="13">if <condition pos:line="80" pos:column="16">(<expr><name pos:line="80" pos:column="17">flag<pos:position pos:line="80" pos:column="21"/></name> <operator pos:line="80" pos:column="22">&amp;<pos:position pos:line="80" pos:column="27"/></operator> <literal type="number" pos:line="80" pos:column="24">1<pos:position pos:line="80" pos:column="25"/></literal></expr>)<pos:position pos:line="80" pos:column="26"/></condition><then pos:line="80" pos:column="26"> <block pos:line="80" pos:column="27">{
		<expr_stmt><expr><name pos:line="81" pos:column="17">rx_run<pos:position pos:line="81" pos:column="23"/></name> <operator pos:line="81" pos:column="24">=<pos:position pos:line="81" pos:column="25"/></operator> <call><name pos:line="81" pos:column="26">read_byte<pos:position pos:line="81" pos:column="35"/></name><argument_list pos:line="81" pos:column="35">(<argument><expr><name pos:line="81" pos:column="36">f<pos:position pos:line="81" pos:column="37"/></name></expr></argument>)<pos:position pos:line="81" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="39"/></expr_stmt>
		<expr_stmt><expr><name pos:line="82" pos:column="17">rx_run<pos:position pos:line="82" pos:column="23"/></name> <operator pos:line="82" pos:column="24">+=<pos:position pos:line="82" pos:column="26"/></operator> <call><name pos:line="82" pos:column="27">read_byte<pos:position pos:line="82" pos:column="36"/></name><argument_list pos:line="82" pos:column="36">(<argument><expr><name pos:line="82" pos:column="37">f<pos:position pos:line="82" pos:column="38"/></name></expr></argument>)<pos:position pos:line="82" pos:column="39"/></argument_list></call> <operator pos:line="82" pos:column="40">&lt;&lt;<pos:position pos:line="82" pos:column="48"/></operator> <literal type="number" pos:line="82" pos:column="43">8<pos:position pos:line="82" pos:column="44"/></literal></expr>;<pos:position pos:line="82" pos:column="45"/></expr_stmt>
		<expr_stmt><expr><name pos:line="83" pos:column="17">recv_state<pos:position pos:line="83" pos:column="27"/></name> <operator pos:line="83" pos:column="28">=<pos:position pos:line="83" pos:column="29"/></operator> <name pos:line="83" pos:column="30">r_running<pos:position pos:line="83" pos:column="39"/></name></expr>;<pos:position pos:line="83" pos:column="40"/></expr_stmt>
	    }<pos:position pos:line="84" pos:column="14"/></block></then></if>
	    <return pos:line="85" pos:column="13">return <expr><operator pos:line="85" pos:column="20">-<pos:position pos:line="85" pos:column="21"/></operator><literal type="number" pos:line="85" pos:column="21">1<pos:position pos:line="85" pos:column="22"/></literal> <operator pos:line="85" pos:column="23">-<pos:position pos:line="85" pos:column="24"/></operator> <name pos:line="85" pos:column="25">rx_token<pos:position pos:line="85" pos:column="33"/></name></expr>;<pos:position pos:line="85" pos:column="34"/></return>

	<case pos:line="87" pos:column="9">case <expr><name pos:line="87" pos:column="14">r_inflating<pos:position pos:line="87" pos:column="25"/></name></expr>:<pos:position pos:line="87" pos:column="26"/></case>
	    <expr_stmt><expr><name><name pos:line="88" pos:column="13">rx_strm<pos:position pos:line="88" pos:column="20"/></name><operator pos:line="88" pos:column="20">.<pos:position pos:line="88" pos:column="21"/></operator><name pos:line="88" pos:column="21">next_out<pos:position pos:line="88" pos:column="29"/></name></name> <operator pos:line="88" pos:column="30">=<pos:position pos:line="88" pos:column="31"/></operator> <operator pos:line="88" pos:column="32">(<pos:position pos:line="88" pos:column="33"/></operator><name pos:line="88" pos:column="33">Bytef<pos:position pos:line="88" pos:column="38"/></name> <operator pos:line="88" pos:column="39">*<pos:position pos:line="88" pos:column="40"/></operator><operator pos:line="88" pos:column="40">)<pos:position pos:line="88" pos:column="41"/></operator><name pos:line="88" pos:column="41">dbuf<pos:position pos:line="88" pos:column="45"/></name></expr>;<pos:position pos:line="88" pos:column="46"/></expr_stmt>
	    <expr_stmt><expr><name><name pos:line="89" pos:column="13">rx_strm<pos:position pos:line="89" pos:column="20"/></name><operator pos:line="89" pos:column="20">.<pos:position pos:line="89" pos:column="21"/></operator><name pos:line="89" pos:column="21">avail_out<pos:position pos:line="89" pos:column="30"/></name></name> <operator pos:line="89" pos:column="31">=<pos:position pos:line="89" pos:column="32"/></operator> <name pos:line="89" pos:column="33">CHUNK_SIZE<pos:position pos:line="89" pos:column="43"/></name></expr>;<pos:position pos:line="89" pos:column="44"/></expr_stmt>
	    <expr_stmt><expr><name pos:line="90" pos:column="13">r<pos:position pos:line="90" pos:column="14"/></name> <operator pos:line="90" pos:column="15">=<pos:position pos:line="90" pos:column="16"/></operator> <call><name pos:line="90" pos:column="17">inflate<pos:position pos:line="90" pos:column="24"/></name><argument_list pos:line="90" pos:column="24">(<argument><expr><operator pos:line="90" pos:column="25">&amp;<pos:position pos:line="90" pos:column="30"/></operator><name pos:line="90" pos:column="26">rx_strm<pos:position pos:line="90" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="90" pos:column="35">Z_NO_FLUSH<pos:position pos:line="90" pos:column="45"/></name></expr></argument>)<pos:position pos:line="90" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="47"/></expr_stmt>
	    <expr_stmt><expr><name pos:line="91" pos:column="13">n<pos:position pos:line="91" pos:column="14"/></name> <operator pos:line="91" pos:column="15">=<pos:position pos:line="91" pos:column="16"/></operator> <name pos:line="91" pos:column="17">CHUNK_SIZE<pos:position pos:line="91" pos:column="27"/></name> <operator pos:line="91" pos:column="28">-<pos:position pos:line="91" pos:column="29"/></operator> <name><name pos:line="91" pos:column="30">rx_strm<pos:position pos:line="91" pos:column="37"/></name><operator pos:line="91" pos:column="37">.<pos:position pos:line="91" pos:column="38"/></operator><name pos:line="91" pos:column="38">avail_out<pos:position pos:line="91" pos:column="47"/></name></name></expr>;<pos:position pos:line="91" pos:column="48"/></expr_stmt>
	    <if pos:line="92" pos:column="13">if <condition pos:line="92" pos:column="16">(<expr><name pos:line="92" pos:column="17">r<pos:position pos:line="92" pos:column="18"/></name> <operator pos:line="92" pos:column="19">!=<pos:position pos:line="92" pos:column="21"/></operator> <name pos:line="92" pos:column="22">Z_OK<pos:position pos:line="92" pos:column="26"/></name></expr>)<pos:position pos:line="92" pos:column="27"/></condition><then pos:line="92" pos:column="27"> <block pos:line="92" pos:column="28">{
		<expr_stmt><expr><call><name pos:line="93" pos:column="17">fprintf<pos:position pos:line="93" pos:column="24"/></name><argument_list pos:line="93" pos:column="24">(<argument><expr><name pos:line="93" pos:column="25">FERROR<pos:position pos:line="93" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="93" pos:column="33">"inflate returned %d (%d bytes)\n"<pos:position pos:line="93" pos:column="67"/></literal></expr></argument>, <argument><expr><name pos:line="93" pos:column="69">r<pos:position pos:line="93" pos:column="70"/></name></expr></argument>, <argument><expr><name pos:line="93" pos:column="72">n<pos:position pos:line="93" pos:column="73"/></name></expr></argument>)<pos:position pos:line="93" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="75"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="94" pos:column="17">exit_cleanup<pos:position pos:line="94" pos:column="29"/></name><argument_list pos:line="94" pos:column="29">(<argument><expr><literal type="number" pos:line="94" pos:column="30">1<pos:position pos:line="94" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="94" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="33"/></expr_stmt>
	    }<pos:position pos:line="95" pos:column="14"/></block></then></if>
	    <if pos:line="96" pos:column="13">if <condition pos:line="96" pos:column="16">(<expr><name><name pos:line="96" pos:column="17">rx_strm<pos:position pos:line="96" pos:column="24"/></name><operator pos:line="96" pos:column="24">.<pos:position pos:line="96" pos:column="25"/></operator><name pos:line="96" pos:column="25">avail_in<pos:position pos:line="96" pos:column="33"/></name></name> <operator pos:line="96" pos:column="34">==<pos:position pos:line="96" pos:column="36"/></operator> <literal type="number" pos:line="96" pos:column="37">0<pos:position pos:line="96" pos:column="38"/></literal></expr>)<pos:position pos:line="96" pos:column="39"/></condition><then pos:line="96" pos:column="39">
		<block type="pseudo"><expr_stmt><expr><name pos:line="97" pos:column="17">recv_state<pos:position pos:line="97" pos:column="27"/></name> <operator pos:line="97" pos:column="28">=<pos:position pos:line="97" pos:column="29"/></operator> <name pos:line="97" pos:column="30">r_inflated<pos:position pos:line="97" pos:column="40"/></name></expr>;<pos:position pos:line="97" pos:column="41"/></expr_stmt></block></then></if>
	    <if pos:line="98" pos:column="13">if <condition pos:line="98" pos:column="16">(<expr><name pos:line="98" pos:column="17">n<pos:position pos:line="98" pos:column="18"/></name> <operator pos:line="98" pos:column="19">!=<pos:position pos:line="98" pos:column="21"/></operator> <literal type="number" pos:line="98" pos:column="22">0<pos:position pos:line="98" pos:column="23"/></literal></expr>)<pos:position pos:line="98" pos:column="24"/></condition><then pos:line="98" pos:column="24"> <block pos:line="98" pos:column="25">{
		<expr_stmt><expr><operator pos:line="99" pos:column="17">*<pos:position pos:line="99" pos:column="18"/></operator><name pos:line="99" pos:column="18">data<pos:position pos:line="99" pos:column="22"/></name> <operator pos:line="99" pos:column="23">=<pos:position pos:line="99" pos:column="24"/></operator> <name pos:line="99" pos:column="25">dbuf<pos:position pos:line="99" pos:column="29"/></name></expr>;<pos:position pos:line="99" pos:column="30"/></expr_stmt>
		<return pos:line="100" pos:column="17">return <expr><name pos:line="100" pos:column="24">n<pos:position pos:line="100" pos:column="25"/></name></expr>;<pos:position pos:line="100" pos:column="26"/></return>
	    }<pos:position pos:line="101" pos:column="14"/></block></then></if>
	    <break pos:line="102" pos:column="13">break;<pos:position pos:line="102" pos:column="19"/></break>

	<case pos:line="104" pos:column="9">case <expr><name pos:line="104" pos:column="14">r_running<pos:position pos:line="104" pos:column="23"/></name></expr>:<pos:position pos:line="104" pos:column="24"/></case>
	    <expr_stmt><expr><operator pos:line="105" pos:column="13">++<pos:position pos:line="105" pos:column="15"/></operator><name pos:line="105" pos:column="15">rx_token<pos:position pos:line="105" pos:column="23"/></name></expr>;<pos:position pos:line="105" pos:column="24"/></expr_stmt>
	    <if pos:line="106" pos:column="13">if <condition pos:line="106" pos:column="16">(<expr><operator pos:line="106" pos:column="17">--<pos:position pos:line="106" pos:column="19"/></operator><name pos:line="106" pos:column="19">rx_run<pos:position pos:line="106" pos:column="25"/></name> <operator pos:line="106" pos:column="26">==<pos:position pos:line="106" pos:column="28"/></operator> <literal type="number" pos:line="106" pos:column="29">0<pos:position pos:line="106" pos:column="30"/></literal></expr>)<pos:position pos:line="106" pos:column="31"/></condition><then pos:line="106" pos:column="31">
		<block type="pseudo"><expr_stmt><expr><name pos:line="107" pos:column="17">recv_state<pos:position pos:line="107" pos:column="27"/></name> <operator pos:line="107" pos:column="28">=<pos:position pos:line="107" pos:column="29"/></operator> <name pos:line="107" pos:column="30">r_idle<pos:position pos:line="107" pos:column="36"/></name></expr>;<pos:position pos:line="107" pos:column="37"/></expr_stmt></block></then></if>
	    <return pos:line="108" pos:column="13">return <expr><operator pos:line="108" pos:column="20">-<pos:position pos:line="108" pos:column="21"/></operator><literal type="number" pos:line="108" pos:column="21">1<pos:position pos:line="108" pos:column="22"/></literal> <operator pos:line="108" pos:column="23">-<pos:position pos:line="108" pos:column="24"/></operator> <name pos:line="108" pos:column="25">rx_token<pos:position pos:line="108" pos:column="33"/></name></expr>;<pos:position pos:line="108" pos:column="34"/></return>
	}<pos:position pos:line="109" pos:column="10"/></block></switch>
    }<pos:position pos:line="110" pos:column="6"/></block></for>
}<pos:position pos:line="111" pos:column="2"/></block></function></unit>
