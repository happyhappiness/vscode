<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_129_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><specifier pos:line="1" pos:column="8">const<pos:position pos:line="1" pos:column="13"/></specifier> <name pos:line="1" pos:column="14">char<pos:position pos:line="1" pos:column="18"/></name> <modifier pos:line="1" pos:column="19">*<pos:position pos:line="1" pos:column="20"/></modifier></type><name pos:line="1" pos:column="20">what_fd_is<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><name pos:line="1" pos:column="31">int<pos:position pos:line="1" pos:column="34"/></name></type> <name pos:line="1" pos:column="35">fd<pos:position pos:line="1" pos:column="37"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="38"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><specifier pos:line="3" pos:column="9">static<pos:position pos:line="3" pos:column="15"/></specifier> <type><name pos:line="3" pos:column="16">char<pos:position pos:line="3" pos:column="20"/></name></type> <name><name pos:line="3" pos:column="21">buf<pos:position pos:line="3" pos:column="24"/></name><index pos:line="3" pos:column="24">[<expr><literal type="number" pos:line="3" pos:column="25">20<pos:position pos:line="3" pos:column="27"/></literal></expr>]<pos:position pos:line="3" pos:column="28"/></index></name></decl>;<pos:position pos:line="3" pos:column="29"/></decl_stmt>

	<if pos:line="5" pos:column="9">if <condition pos:line="5" pos:column="12">(<expr><name pos:line="5" pos:column="13">fd<pos:position pos:line="5" pos:column="15"/></name> <operator pos:line="5" pos:column="16">==<pos:position pos:line="5" pos:column="18"/></operator> <name pos:line="5" pos:column="19">sock_f_out<pos:position pos:line="5" pos:column="29"/></name></expr>)<pos:position pos:line="5" pos:column="30"/></condition><then pos:line="5" pos:column="30">
		<block type="pseudo"><return pos:line="6" pos:column="17">return <expr><literal type="string" pos:line="6" pos:column="24">"socket"<pos:position pos:line="6" pos:column="32"/></literal></expr>;<pos:position pos:line="6" pos:column="33"/></return></block></then>
	<elseif pos:line="7" pos:column="9">else <if pos:line="7" pos:column="14">if <condition pos:line="7" pos:column="17">(<expr><name pos:line="7" pos:column="18">fd<pos:position pos:line="7" pos:column="20"/></name> <operator pos:line="7" pos:column="21">==<pos:position pos:line="7" pos:column="23"/></operator> <name><name pos:line="7" pos:column="24">iobuf<pos:position pos:line="7" pos:column="29"/></name><operator pos:line="7" pos:column="29">.<pos:position pos:line="7" pos:column="30"/></operator><name pos:line="7" pos:column="30">out_fd<pos:position pos:line="7" pos:column="36"/></name></name></expr>)<pos:position pos:line="7" pos:column="37"/></condition><then pos:line="7" pos:column="37">
		<block type="pseudo"><return pos:line="8" pos:column="17">return <expr><literal type="string" pos:line="8" pos:column="24">"message fd"<pos:position pos:line="8" pos:column="36"/></literal></expr>;<pos:position pos:line="8" pos:column="37"/></return></block></then></if></elseif>
	<elseif pos:line="9" pos:column="9">else <if pos:line="9" pos:column="14">if <condition pos:line="9" pos:column="17">(<expr><name pos:line="9" pos:column="18">fd<pos:position pos:line="9" pos:column="20"/></name> <operator pos:line="9" pos:column="21">==<pos:position pos:line="9" pos:column="23"/></operator> <name pos:line="9" pos:column="24">batch_fd<pos:position pos:line="9" pos:column="32"/></name></expr>)<pos:position pos:line="9" pos:column="33"/></condition><then pos:line="9" pos:column="33">
		<block type="pseudo"><return pos:line="10" pos:column="17">return <expr><literal type="string" pos:line="10" pos:column="24">"batch file"<pos:position pos:line="10" pos:column="36"/></literal></expr>;<pos:position pos:line="10" pos:column="37"/></return></block></then></if></elseif>
	<else pos:line="11" pos:column="9">else <block pos:line="11" pos:column="14">{
		<expr_stmt><expr><call><name pos:line="12" pos:column="17">snprintf<pos:position pos:line="12" pos:column="25"/></name><argument_list pos:line="12" pos:column="25">(<argument><expr><name pos:line="12" pos:column="26">buf<pos:position pos:line="12" pos:column="29"/></name></expr></argument>, <argument><expr><sizeof pos:line="12" pos:column="31">sizeof <name pos:line="12" pos:column="38">buf<pos:position pos:line="12" pos:column="41"/></name></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="12" pos:column="43">"fd %d"<pos:position pos:line="12" pos:column="50"/></literal></expr></argument>, <argument><expr><name pos:line="12" pos:column="52">fd<pos:position pos:line="12" pos:column="54"/></name></expr></argument>)<pos:position pos:line="12" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="56"/></expr_stmt>
		<return pos:line="13" pos:column="17">return <expr><name pos:line="13" pos:column="24">buf<pos:position pos:line="13" pos:column="27"/></name></expr>;<pos:position pos:line="13" pos:column="28"/></return>
	}<pos:position pos:line="14" pos:column="10"/></block></else></if>
}<pos:position pos:line="15" pos:column="2"/></block></function></unit>
