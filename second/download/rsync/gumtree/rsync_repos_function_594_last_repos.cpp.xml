<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_594_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">client_run<pos:position pos:line="1" pos:column="15"/></name><parameter_list pos:line="1" pos:column="15">(<parameter><decl><type><name pos:line="1" pos:column="16">int<pos:position pos:line="1" pos:column="19"/></name></type> <name pos:line="1" pos:column="20">f_in<pos:position pos:line="1" pos:column="24"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="26">int<pos:position pos:line="1" pos:column="29"/></name></type> <name pos:line="1" pos:column="30">f_out<pos:position pos:line="1" pos:column="35"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="37">pid_t<pos:position pos:line="1" pos:column="42"/></name></type> <name pos:line="1" pos:column="43">pid<pos:position pos:line="1" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="48">int<pos:position pos:line="1" pos:column="51"/></name></type> <name pos:line="1" pos:column="52">argc<pos:position pos:line="1" pos:column="56"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="58">char<pos:position pos:line="1" pos:column="62"/></name> <modifier pos:line="1" pos:column="63">*<pos:position pos:line="1" pos:column="64"/></modifier></type><name><name pos:line="1" pos:column="64">argv<pos:position pos:line="1" pos:column="68"/></name><index pos:line="1" pos:column="68">[]<pos:position pos:line="1" pos:column="70"/></index></name></decl></parameter>)<pos:position pos:line="1" pos:column="71"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">file_list<pos:position pos:line="3" pos:column="25"/></name></name> <modifier pos:line="3" pos:column="26">*<pos:position pos:line="3" pos:column="27"/></modifier></type><name pos:line="3" pos:column="27">flist<pos:position pos:line="3" pos:column="32"/></name> <init pos:line="3" pos:column="33">= <expr><name pos:line="3" pos:column="35">NULL<pos:position pos:line="3" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="40"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">exit_code<pos:position pos:line="4" pos:column="22"/></name> <init pos:line="4" pos:column="23">= <expr><literal type="number" pos:line="4" pos:column="25">0<pos:position pos:line="4" pos:column="26"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="28">exit_code2<pos:position pos:line="4" pos:column="38"/></name> <init pos:line="4" pos:column="39">= <expr><literal type="number" pos:line="4" pos:column="41">0<pos:position pos:line="4" pos:column="42"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="43"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">char<pos:position pos:line="5" pos:column="13"/></name> <modifier pos:line="5" pos:column="14">*<pos:position pos:line="5" pos:column="15"/></modifier></type><name pos:line="5" pos:column="15">local_name<pos:position pos:line="5" pos:column="25"/></name> <init pos:line="5" pos:column="26">= <expr><name pos:line="5" pos:column="28">NULL<pos:position pos:line="5" pos:column="32"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="33"/></decl_stmt>

	<expr_stmt><expr><name pos:line="7" pos:column="9">cleanup_child_pid<pos:position pos:line="7" pos:column="26"/></name> <operator pos:line="7" pos:column="27">=<pos:position pos:line="7" pos:column="28"/></operator> <name pos:line="7" pos:column="29">pid<pos:position pos:line="7" pos:column="32"/></name></expr>;<pos:position pos:line="7" pos:column="33"/></expr_stmt>
	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><operator pos:line="8" pos:column="13">!<pos:position pos:line="8" pos:column="14"/></operator><name pos:line="8" pos:column="14">read_batch<pos:position pos:line="8" pos:column="24"/></name></expr>)<pos:position pos:line="8" pos:column="25"/></condition><then pos:line="8" pos:column="25"> <block pos:line="8" pos:column="26">{
		<expr_stmt><expr><call><name pos:line="9" pos:column="17">set_nonblocking<pos:position pos:line="9" pos:column="32"/></name><argument_list pos:line="9" pos:column="32">(<argument><expr><name pos:line="9" pos:column="33">f_in<pos:position pos:line="9" pos:column="37"/></name></expr></argument>)<pos:position pos:line="9" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="39"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="10" pos:column="17">set_nonblocking<pos:position pos:line="10" pos:column="32"/></name><argument_list pos:line="10" pos:column="32">(<argument><expr><name pos:line="10" pos:column="33">f_out<pos:position pos:line="10" pos:column="38"/></name></expr></argument>)<pos:position pos:line="10" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="40"/></expr_stmt>
	}<pos:position pos:line="11" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="13" pos:column="9">io_set_sock_fds<pos:position pos:line="13" pos:column="24"/></name><argument_list pos:line="13" pos:column="24">(<argument><expr><name pos:line="13" pos:column="25">f_in<pos:position pos:line="13" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="31">f_out<pos:position pos:line="13" pos:column="36"/></name></expr></argument>)<pos:position pos:line="13" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="38"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="14" pos:column="9">setup_protocol<pos:position pos:line="14" pos:column="23"/></name><argument_list pos:line="14" pos:column="23">(<argument><expr><name pos:line="14" pos:column="24">f_out<pos:position pos:line="14" pos:column="29"/></name></expr></argument>,<argument><expr><name pos:line="14" pos:column="30">f_in<pos:position pos:line="14" pos:column="34"/></name></expr></argument>)<pos:position pos:line="14" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="36"/></expr_stmt>

	<comment type="block" pos:line="16" pos:column="9">/* We set our stderr file handle to blocking because ssh might have
	 * set it to non-blocking.  This can be particularly troublesome if
	 * stderr is a clone of stdout, because ssh would have set our stdout
	 * to non-blocking at the same time (which can easily cause us to lose
	 * output from our print statements).  This kluge shouldn't cause ssh
	 * any problems for how we use it.  Note also that we delayed setting
	 * this until after the above protocol setup so that we know for sure
	 * that ssh is done twiddling its file descriptors.  */</comment>
	<expr_stmt><expr><call><name pos:line="24" pos:column="9">set_blocking<pos:position pos:line="24" pos:column="21"/></name><argument_list pos:line="24" pos:column="21">(<argument><expr><name pos:line="24" pos:column="22">STDERR_FILENO<pos:position pos:line="24" pos:column="35"/></name></expr></argument>)<pos:position pos:line="24" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="37"/></expr_stmt>

	<if pos:line="26" pos:column="9">if <condition pos:line="26" pos:column="12">(<expr><name pos:line="26" pos:column="13">am_sender<pos:position pos:line="26" pos:column="22"/></name></expr>)<pos:position pos:line="26" pos:column="23"/></condition><then pos:line="26" pos:column="23"> <block pos:line="26" pos:column="24">{
		<expr_stmt><expr><name pos:line="27" pos:column="17">keep_dirlinks<pos:position pos:line="27" pos:column="30"/></name> <operator pos:line="27" pos:column="31">=<pos:position pos:line="27" pos:column="32"/></operator> <literal type="number" pos:line="27" pos:column="33">0<pos:position pos:line="27" pos:column="34"/></literal></expr>;<pos:position pos:line="27" pos:column="35"/></expr_stmt> <comment type="block" pos:line="27" pos:column="36">/* Must be disabled on the sender. */</comment>

		<if pos:line="29" pos:column="17">if <condition pos:line="29" pos:column="20">(<expr><name pos:line="29" pos:column="21">always_checksum<pos:position pos:line="29" pos:column="36"/></name>
		 <operator pos:line="30" pos:column="18">&amp;&amp;<pos:position pos:line="30" pos:column="28"/></operator> <operator pos:line="30" pos:column="21">(<pos:position pos:line="30" pos:column="22"/></operator><call><name pos:line="30" pos:column="22">log_format_has<pos:position pos:line="30" pos:column="36"/></name><argument_list pos:line="30" pos:column="36">(<argument><expr><name pos:line="30" pos:column="37">stdout_format<pos:position pos:line="30" pos:column="50"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="30" pos:column="52">'C'<pos:position pos:line="30" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="56"/></argument_list></call>
		  <operator pos:line="31" pos:column="19">||<pos:position pos:line="31" pos:column="21"/></operator> <call><name pos:line="31" pos:column="22">log_format_has<pos:position pos:line="31" pos:column="36"/></name><argument_list pos:line="31" pos:column="36">(<argument><expr><name pos:line="31" pos:column="37">logfile_format<pos:position pos:line="31" pos:column="51"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="31" pos:column="53">'C'<pos:position pos:line="31" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="57"/></argument_list></call><operator pos:line="31" pos:column="57">)<pos:position pos:line="31" pos:column="58"/></operator></expr>)<pos:position pos:line="31" pos:column="59"/></condition><then pos:line="31" pos:column="59">
			<block type="pseudo"><expr_stmt><expr><name pos:line="32" pos:column="25">sender_keeps_checksum<pos:position pos:line="32" pos:column="46"/></name> <operator pos:line="32" pos:column="47">=<pos:position pos:line="32" pos:column="48"/></operator> <literal type="number" pos:line="32" pos:column="49">1<pos:position pos:line="32" pos:column="50"/></literal></expr>;<pos:position pos:line="32" pos:column="51"/></expr_stmt></block></then></if>

		<if pos:line="34" pos:column="17">if <condition pos:line="34" pos:column="20">(<expr><name pos:line="34" pos:column="21">protocol_version<pos:position pos:line="34" pos:column="37"/></name> <operator pos:line="34" pos:column="38">&gt;=<pos:position pos:line="34" pos:column="43"/></operator> <literal type="number" pos:line="34" pos:column="41">30<pos:position pos:line="34" pos:column="43"/></literal></expr>)<pos:position pos:line="34" pos:column="44"/></condition><then pos:line="34" pos:column="44">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="35" pos:column="25">io_start_multiplex_out<pos:position pos:line="35" pos:column="47"/></name><argument_list pos:line="35" pos:column="47">(<argument><expr><name pos:line="35" pos:column="48">f_out<pos:position pos:line="35" pos:column="53"/></name></expr></argument>)<pos:position pos:line="35" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="55"/></expr_stmt></block></then>
		<else pos:line="36" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="37" pos:column="25">io_start_buffering_out<pos:position pos:line="37" pos:column="47"/></name><argument_list pos:line="37" pos:column="47">(<argument><expr><name pos:line="37" pos:column="48">f_out<pos:position pos:line="37" pos:column="53"/></name></expr></argument>)<pos:position pos:line="37" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="55"/></expr_stmt></block></else></if>
		<if pos:line="38" pos:column="17">if <condition pos:line="38" pos:column="20">(<expr><name pos:line="38" pos:column="21">protocol_version<pos:position pos:line="38" pos:column="37"/></name> <operator pos:line="38" pos:column="38">&gt;=<pos:position pos:line="38" pos:column="43"/></operator> <literal type="number" pos:line="38" pos:column="41">31<pos:position pos:line="38" pos:column="43"/></literal> <operator pos:line="38" pos:column="44">||<pos:position pos:line="38" pos:column="46"/></operator> <operator pos:line="38" pos:column="47">(<pos:position pos:line="38" pos:column="48"/></operator><operator pos:line="38" pos:column="48">!<pos:position pos:line="38" pos:column="49"/></operator><name pos:line="38" pos:column="49">filesfrom_host<pos:position pos:line="38" pos:column="63"/></name> <operator pos:line="38" pos:column="64">&amp;&amp;<pos:position pos:line="38" pos:column="74"/></operator> <name pos:line="38" pos:column="67">protocol_version<pos:position pos:line="38" pos:column="83"/></name> <operator pos:line="38" pos:column="84">&gt;=<pos:position pos:line="38" pos:column="89"/></operator> <literal type="number" pos:line="38" pos:column="87">23<pos:position pos:line="38" pos:column="89"/></literal><operator pos:line="38" pos:column="89">)<pos:position pos:line="38" pos:column="90"/></operator></expr>)<pos:position pos:line="38" pos:column="91"/></condition><then pos:line="38" pos:column="91">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="39" pos:column="25">io_start_multiplex_in<pos:position pos:line="39" pos:column="46"/></name><argument_list pos:line="39" pos:column="46">(<argument><expr><name pos:line="39" pos:column="47">f_in<pos:position pos:line="39" pos:column="51"/></name></expr></argument>)<pos:position pos:line="39" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="53"/></expr_stmt></block></then>
		<else pos:line="40" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="41" pos:column="25">io_start_buffering_in<pos:position pos:line="41" pos:column="46"/></name><argument_list pos:line="41" pos:column="46">(<argument><expr><name pos:line="41" pos:column="47">f_in<pos:position pos:line="41" pos:column="51"/></name></expr></argument>)<pos:position pos:line="41" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="53"/></expr_stmt></block></else></if>
		<expr_stmt><expr><call><name pos:line="42" pos:column="17">send_filter_list<pos:position pos:line="42" pos:column="33"/></name><argument_list pos:line="42" pos:column="33">(<argument><expr><name pos:line="42" pos:column="34">f_out<pos:position pos:line="42" pos:column="39"/></name></expr></argument>)<pos:position pos:line="42" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="41"/></expr_stmt>
		<if pos:line="43" pos:column="17">if <condition pos:line="43" pos:column="20">(<expr><name pos:line="43" pos:column="21">filesfrom_host<pos:position pos:line="43" pos:column="35"/></name></expr>)<pos:position pos:line="43" pos:column="36"/></condition><then pos:line="43" pos:column="36">
			<block type="pseudo"><expr_stmt><expr><name pos:line="44" pos:column="25">filesfrom_fd<pos:position pos:line="44" pos:column="37"/></name> <operator pos:line="44" pos:column="38">=<pos:position pos:line="44" pos:column="39"/></operator> <name pos:line="44" pos:column="40">f_in<pos:position pos:line="44" pos:column="44"/></name></expr>;<pos:position pos:line="44" pos:column="45"/></expr_stmt></block></then></if>

		<if pos:line="46" pos:column="17">if <condition pos:line="46" pos:column="20">(<expr><name pos:line="46" pos:column="21">write_batch<pos:position pos:line="46" pos:column="32"/></name> <operator pos:line="46" pos:column="33">&amp;&amp;<pos:position pos:line="46" pos:column="43"/></operator> <operator pos:line="46" pos:column="36">!<pos:position pos:line="46" pos:column="37"/></operator><name pos:line="46" pos:column="37">am_server<pos:position pos:line="46" pos:column="46"/></name></expr>)<pos:position pos:line="46" pos:column="47"/></condition><then pos:line="46" pos:column="47">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="47" pos:column="25">start_write_batch<pos:position pos:line="47" pos:column="42"/></name><argument_list pos:line="47" pos:column="42">(<argument><expr><name pos:line="47" pos:column="43">f_out<pos:position pos:line="47" pos:column="48"/></name></expr></argument>)<pos:position pos:line="47" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="50"/></expr_stmt></block></then></if>
		<expr_stmt><expr><name pos:line="48" pos:column="17">flist<pos:position pos:line="48" pos:column="22"/></name> <operator pos:line="48" pos:column="23">=<pos:position pos:line="48" pos:column="24"/></operator> <call><name pos:line="48" pos:column="25">send_file_list<pos:position pos:line="48" pos:column="39"/></name><argument_list pos:line="48" pos:column="39">(<argument><expr><name pos:line="48" pos:column="40">f_out<pos:position pos:line="48" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="47">argc<pos:position pos:line="48" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="53">argv<pos:position pos:line="48" pos:column="57"/></name></expr></argument>)<pos:position pos:line="48" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="59"/></expr_stmt>
		<if pos:line="49" pos:column="17">if <condition pos:line="49" pos:column="20">(<expr><call><name pos:line="49" pos:column="21">DEBUG_GTE<pos:position pos:line="49" pos:column="30"/></name><argument_list pos:line="49" pos:column="30">(<argument><expr><name pos:line="49" pos:column="31">FLIST<pos:position pos:line="49" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="49" pos:column="38">3<pos:position pos:line="49" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="49" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="49" pos:column="41"/></condition><then pos:line="49" pos:column="41">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="50" pos:column="25">rprintf<pos:position pos:line="50" pos:column="32"/></name><argument_list pos:line="50" pos:column="32">(<argument><expr><name pos:line="50" pos:column="33">FINFO<pos:position pos:line="50" pos:column="38"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="50" pos:column="39">"file list sent\n"<pos:position pos:line="50" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="50" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="59"/></expr_stmt></block></then></if>

		<if pos:line="52" pos:column="17">if <condition pos:line="52" pos:column="20">(<expr><name pos:line="52" pos:column="21">protocol_version<pos:position pos:line="52" pos:column="37"/></name> <operator pos:line="52" pos:column="38">&lt;<pos:position pos:line="52" pos:column="42"/></operator> <literal type="number" pos:line="52" pos:column="40">31<pos:position pos:line="52" pos:column="42"/></literal> <operator pos:line="52" pos:column="43">&amp;&amp;<pos:position pos:line="52" pos:column="53"/></operator> <name pos:line="52" pos:column="46">filesfrom_host<pos:position pos:line="52" pos:column="60"/></name> <operator pos:line="52" pos:column="61">&amp;&amp;<pos:position pos:line="52" pos:column="71"/></operator> <name pos:line="52" pos:column="64">protocol_version<pos:position pos:line="52" pos:column="80"/></name> <operator pos:line="52" pos:column="81">&gt;=<pos:position pos:line="52" pos:column="86"/></operator> <literal type="number" pos:line="52" pos:column="84">23<pos:position pos:line="52" pos:column="86"/></literal></expr>)<pos:position pos:line="52" pos:column="87"/></condition><then pos:line="52" pos:column="87">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="53" pos:column="25">io_start_multiplex_in<pos:position pos:line="53" pos:column="46"/></name><argument_list pos:line="53" pos:column="46">(<argument><expr><name pos:line="53" pos:column="47">f_in<pos:position pos:line="53" pos:column="51"/></name></expr></argument>)<pos:position pos:line="53" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="53"/></expr_stmt></block></then></if>

		<expr_stmt><expr><call><name pos:line="55" pos:column="17">io_flush<pos:position pos:line="55" pos:column="25"/></name><argument_list pos:line="55" pos:column="25">(<argument><expr><name pos:line="55" pos:column="26">NORMAL_FLUSH<pos:position pos:line="55" pos:column="38"/></name></expr></argument>)<pos:position pos:line="55" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="40"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="56" pos:column="17">send_files<pos:position pos:line="56" pos:column="27"/></name><argument_list pos:line="56" pos:column="27">(<argument><expr><name pos:line="56" pos:column="28">f_in<pos:position pos:line="56" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="34">f_out<pos:position pos:line="56" pos:column="39"/></name></expr></argument>)<pos:position pos:line="56" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="41"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="57" pos:column="17">io_flush<pos:position pos:line="57" pos:column="25"/></name><argument_list pos:line="57" pos:column="25">(<argument><expr><name pos:line="57" pos:column="26">FULL_FLUSH<pos:position pos:line="57" pos:column="36"/></name></expr></argument>)<pos:position pos:line="57" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="38"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="58" pos:column="17">handle_stats<pos:position pos:line="58" pos:column="29"/></name><argument_list pos:line="58" pos:column="29">(<argument><expr><operator pos:line="58" pos:column="30">-<pos:position pos:line="58" pos:column="31"/></operator><literal type="number" pos:line="58" pos:column="31">1<pos:position pos:line="58" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="58" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="34"/></expr_stmt>
		<if pos:line="59" pos:column="17">if <condition pos:line="59" pos:column="20">(<expr><name pos:line="59" pos:column="21">protocol_version<pos:position pos:line="59" pos:column="37"/></name> <operator pos:line="59" pos:column="38">&gt;=<pos:position pos:line="59" pos:column="43"/></operator> <literal type="number" pos:line="59" pos:column="41">24<pos:position pos:line="59" pos:column="43"/></literal></expr>)<pos:position pos:line="59" pos:column="44"/></condition><then pos:line="59" pos:column="44">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="60" pos:column="25">read_final_goodbye<pos:position pos:line="60" pos:column="43"/></name><argument_list pos:line="60" pos:column="43">(<argument><expr><name pos:line="60" pos:column="44">f_in<pos:position pos:line="60" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="60" pos:column="50">f_out<pos:position pos:line="60" pos:column="55"/></name></expr></argument>)<pos:position pos:line="60" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="57"/></expr_stmt></block></then></if>
		<if pos:line="61" pos:column="17">if <condition pos:line="61" pos:column="20">(<expr><name pos:line="61" pos:column="21">pid<pos:position pos:line="61" pos:column="24"/></name> <operator pos:line="61" pos:column="25">!=<pos:position pos:line="61" pos:column="27"/></operator> <operator pos:line="61" pos:column="28">-<pos:position pos:line="61" pos:column="29"/></operator><literal type="number" pos:line="61" pos:column="29">1<pos:position pos:line="61" pos:column="30"/></literal></expr>)<pos:position pos:line="61" pos:column="31"/></condition><then pos:line="61" pos:column="31"> <block pos:line="61" pos:column="32">{
			<if pos:line="62" pos:column="25">if <condition pos:line="62" pos:column="28">(<expr><call><name pos:line="62" pos:column="29">DEBUG_GTE<pos:position pos:line="62" pos:column="38"/></name><argument_list pos:line="62" pos:column="38">(<argument><expr><name pos:line="62" pos:column="39">EXIT<pos:position pos:line="62" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="62" pos:column="45">2<pos:position pos:line="62" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="62" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="62" pos:column="48"/></condition><then pos:line="62" pos:column="48">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="63" pos:column="33">rprintf<pos:position pos:line="63" pos:column="40"/></name><argument_list pos:line="63" pos:column="40">(<argument><expr><name pos:line="63" pos:column="41">FINFO<pos:position pos:line="63" pos:column="46"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="63" pos:column="47">"client_run waiting on %d\n"<pos:position pos:line="63" pos:column="75"/></literal></expr></argument>, <argument><expr><operator pos:line="63" pos:column="77">(<pos:position pos:line="63" pos:column="78"/></operator><name pos:line="63" pos:column="78">int<pos:position pos:line="63" pos:column="81"/></name><operator pos:line="63" pos:column="81">)<pos:position pos:line="63" pos:column="82"/></operator> <name pos:line="63" pos:column="83">pid<pos:position pos:line="63" pos:column="86"/></name></expr></argument>)<pos:position pos:line="63" pos:column="87"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="88"/></expr_stmt></block></then></if>
			<expr_stmt><expr><call><name pos:line="64" pos:column="25">io_flush<pos:position pos:line="64" pos:column="33"/></name><argument_list pos:line="64" pos:column="33">(<argument><expr><name pos:line="64" pos:column="34">FULL_FLUSH<pos:position pos:line="64" pos:column="44"/></name></expr></argument>)<pos:position pos:line="64" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="46"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="65" pos:column="25">wait_process_with_flush<pos:position pos:line="65" pos:column="48"/></name><argument_list pos:line="65" pos:column="48">(<argument><expr><name pos:line="65" pos:column="49">pid<pos:position pos:line="65" pos:column="52"/></name></expr></argument>, <argument><expr><operator pos:line="65" pos:column="54">&amp;<pos:position pos:line="65" pos:column="59"/></operator><name pos:line="65" pos:column="55">exit_code<pos:position pos:line="65" pos:column="64"/></name></expr></argument>)<pos:position pos:line="65" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="66"/></expr_stmt>
		}<pos:position pos:line="66" pos:column="18"/></block></then></if>
		<expr_stmt><expr><call><name pos:line="67" pos:column="17">output_summary<pos:position pos:line="67" pos:column="31"/></name><argument_list pos:line="67" pos:column="31">()<pos:position pos:line="67" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="34"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="68" pos:column="17">io_flush<pos:position pos:line="68" pos:column="25"/></name><argument_list pos:line="68" pos:column="25">(<argument><expr><name pos:line="68" pos:column="26">FULL_FLUSH<pos:position pos:line="68" pos:column="36"/></name></expr></argument>)<pos:position pos:line="68" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="38"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="69" pos:column="17">exit_cleanup<pos:position pos:line="69" pos:column="29"/></name><argument_list pos:line="69" pos:column="29">(<argument><expr><name pos:line="69" pos:column="30">exit_code<pos:position pos:line="69" pos:column="39"/></name></expr></argument>)<pos:position pos:line="69" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="41"/></expr_stmt>
	}<pos:position pos:line="70" pos:column="10"/></block></then></if>

	<if pos:line="72" pos:column="9">if <condition pos:line="72" pos:column="12">(<expr><operator pos:line="72" pos:column="13">!<pos:position pos:line="72" pos:column="14"/></operator><name pos:line="72" pos:column="14">read_batch<pos:position pos:line="72" pos:column="24"/></name></expr>)<pos:position pos:line="72" pos:column="25"/></condition><then pos:line="72" pos:column="25"> <block pos:line="72" pos:column="26">{
		<if pos:line="73" pos:column="17">if <condition pos:line="73" pos:column="20">(<expr><name pos:line="73" pos:column="21">protocol_version<pos:position pos:line="73" pos:column="37"/></name> <operator pos:line="73" pos:column="38">&gt;=<pos:position pos:line="73" pos:column="43"/></operator> <literal type="number" pos:line="73" pos:column="41">23<pos:position pos:line="73" pos:column="43"/></literal></expr>)<pos:position pos:line="73" pos:column="44"/></condition><then pos:line="73" pos:column="44">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="74" pos:column="25">io_start_multiplex_in<pos:position pos:line="74" pos:column="46"/></name><argument_list pos:line="74" pos:column="46">(<argument><expr><name pos:line="74" pos:column="47">f_in<pos:position pos:line="74" pos:column="51"/></name></expr></argument>)<pos:position pos:line="74" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="53"/></expr_stmt></block></then></if>
		<if pos:line="75" pos:column="17">if <condition pos:line="75" pos:column="20">(<expr><name pos:line="75" pos:column="21">need_messages_from_generator<pos:position pos:line="75" pos:column="49"/></name></expr>)<pos:position pos:line="75" pos:column="50"/></condition><then pos:line="75" pos:column="50">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="76" pos:column="25">io_start_multiplex_out<pos:position pos:line="76" pos:column="47"/></name><argument_list pos:line="76" pos:column="47">(<argument><expr><name pos:line="76" pos:column="48">f_out<pos:position pos:line="76" pos:column="53"/></name></expr></argument>)<pos:position pos:line="76" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="55"/></expr_stmt></block></then>
		<else pos:line="77" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="78" pos:column="25">io_start_buffering_out<pos:position pos:line="78" pos:column="47"/></name><argument_list pos:line="78" pos:column="47">(<argument><expr><name pos:line="78" pos:column="48">f_out<pos:position pos:line="78" pos:column="53"/></name></expr></argument>)<pos:position pos:line="78" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="55"/></expr_stmt></block></else></if>
	}<pos:position pos:line="79" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="81" pos:column="9">send_filter_list<pos:position pos:line="81" pos:column="25"/></name><argument_list pos:line="81" pos:column="25">(<argument><expr><ternary><condition><expr><name pos:line="81" pos:column="26">read_batch<pos:position pos:line="81" pos:column="36"/></name></expr> ?<pos:position pos:line="81" pos:column="38"/></condition><then pos:line="81" pos:column="38"> <expr><operator pos:line="81" pos:column="39">-<pos:position pos:line="81" pos:column="40"/></operator><literal type="number" pos:line="81" pos:column="40">1<pos:position pos:line="81" pos:column="41"/></literal></expr> <pos:position pos:line="81" pos:column="42"/></then><else pos:line="81" pos:column="42">: <expr><name pos:line="81" pos:column="44">f_out<pos:position pos:line="81" pos:column="49"/></name></expr></else></ternary></expr></argument>)<pos:position pos:line="81" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="51"/></expr_stmt>

	<if pos:line="83" pos:column="9">if <condition pos:line="83" pos:column="12">(<expr><name pos:line="83" pos:column="13">filesfrom_fd<pos:position pos:line="83" pos:column="25"/></name> <operator pos:line="83" pos:column="26">&gt;=<pos:position pos:line="83" pos:column="31"/></operator> <literal type="number" pos:line="83" pos:column="29">0<pos:position pos:line="83" pos:column="30"/></literal></expr>)<pos:position pos:line="83" pos:column="31"/></condition><then pos:line="83" pos:column="31"> <block pos:line="83" pos:column="32">{
		<expr_stmt><expr><call><name pos:line="84" pos:column="17">start_filesfrom_forwarding<pos:position pos:line="84" pos:column="43"/></name><argument_list pos:line="84" pos:column="43">(<argument><expr><name pos:line="84" pos:column="44">filesfrom_fd<pos:position pos:line="84" pos:column="56"/></name></expr></argument>)<pos:position pos:line="84" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="58"/></expr_stmt>
		<expr_stmt><expr><name pos:line="85" pos:column="17">filesfrom_fd<pos:position pos:line="85" pos:column="29"/></name> <operator pos:line="85" pos:column="30">=<pos:position pos:line="85" pos:column="31"/></operator> <operator pos:line="85" pos:column="32">-<pos:position pos:line="85" pos:column="33"/></operator><literal type="number" pos:line="85" pos:column="33">1<pos:position pos:line="85" pos:column="34"/></literal></expr>;<pos:position pos:line="85" pos:column="35"/></expr_stmt>
	}<pos:position pos:line="86" pos:column="10"/></block></then></if>

	<if pos:line="88" pos:column="9">if <condition pos:line="88" pos:column="12">(<expr><name pos:line="88" pos:column="13">write_batch<pos:position pos:line="88" pos:column="24"/></name> <operator pos:line="88" pos:column="25">&amp;&amp;<pos:position pos:line="88" pos:column="35"/></operator> <operator pos:line="88" pos:column="28">!<pos:position pos:line="88" pos:column="29"/></operator><name pos:line="88" pos:column="29">am_server<pos:position pos:line="88" pos:column="38"/></name></expr>)<pos:position pos:line="88" pos:column="39"/></condition><then pos:line="88" pos:column="39">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="89" pos:column="17">start_write_batch<pos:position pos:line="89" pos:column="34"/></name><argument_list pos:line="89" pos:column="34">(<argument><expr><name pos:line="89" pos:column="35">f_in<pos:position pos:line="89" pos:column="39"/></name></expr></argument>)<pos:position pos:line="89" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="41"/></expr_stmt></block></then></if>
	<expr_stmt><expr><name pos:line="90" pos:column="9">flist<pos:position pos:line="90" pos:column="14"/></name> <operator pos:line="90" pos:column="15">=<pos:position pos:line="90" pos:column="16"/></operator> <call><name pos:line="90" pos:column="17">recv_file_list<pos:position pos:line="90" pos:column="31"/></name><argument_list pos:line="90" pos:column="31">(<argument><expr><name pos:line="90" pos:column="32">f_in<pos:position pos:line="90" pos:column="36"/></name></expr></argument>, <argument><expr><operator pos:line="90" pos:column="38">-<pos:position pos:line="90" pos:column="39"/></operator><literal type="number" pos:line="90" pos:column="39">1<pos:position pos:line="90" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="90" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="42"/></expr_stmt>
	<if pos:line="91" pos:column="9">if <condition pos:line="91" pos:column="12">(<expr><name pos:line="91" pos:column="13">inc_recurse<pos:position pos:line="91" pos:column="24"/></name> <operator pos:line="91" pos:column="25">&amp;&amp;<pos:position pos:line="91" pos:column="35"/></operator> <name pos:line="91" pos:column="28">file_total<pos:position pos:line="91" pos:column="38"/></name> <operator pos:line="91" pos:column="39">==<pos:position pos:line="91" pos:column="41"/></operator> <literal type="number" pos:line="91" pos:column="42">1<pos:position pos:line="91" pos:column="43"/></literal></expr>)<pos:position pos:line="91" pos:column="44"/></condition><then pos:line="91" pos:column="44">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="92" pos:column="17">recv_additional_file_list<pos:position pos:line="92" pos:column="42"/></name><argument_list pos:line="92" pos:column="42">(<argument><expr><name pos:line="92" pos:column="43">f_in<pos:position pos:line="92" pos:column="47"/></name></expr></argument>)<pos:position pos:line="92" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="49"/></expr_stmt></block></then></if>

	<if pos:line="94" pos:column="9">if <condition pos:line="94" pos:column="12">(<expr><name pos:line="94" pos:column="13">flist<pos:position pos:line="94" pos:column="18"/></name> <operator pos:line="94" pos:column="19">&amp;&amp;<pos:position pos:line="94" pos:column="29"/></operator> <name><name pos:line="94" pos:column="22">flist<pos:position pos:line="94" pos:column="27"/></name><operator pos:line="94" pos:column="27">-&gt;<pos:position pos:line="94" pos:column="32"/></operator><name pos:line="94" pos:column="29">used<pos:position pos:line="94" pos:column="33"/></name></name> <operator pos:line="94" pos:column="34">&gt;<pos:position pos:line="94" pos:column="38"/></operator> <literal type="number" pos:line="94" pos:column="36">0<pos:position pos:line="94" pos:column="37"/></literal></expr>)<pos:position pos:line="94" pos:column="38"/></condition><then pos:line="94" pos:column="38"> <block pos:line="94" pos:column="39">{
		<expr_stmt><expr><name pos:line="95" pos:column="17">local_name<pos:position pos:line="95" pos:column="27"/></name> <operator pos:line="95" pos:column="28">=<pos:position pos:line="95" pos:column="29"/></operator> <call><name pos:line="95" pos:column="30">get_local_name<pos:position pos:line="95" pos:column="44"/></name><argument_list pos:line="95" pos:column="44">(<argument><expr><name pos:line="95" pos:column="45">flist<pos:position pos:line="95" pos:column="50"/></name></expr></argument>, <argument><expr><name><name pos:line="95" pos:column="52">argv<pos:position pos:line="95" pos:column="56"/></name><index pos:line="95" pos:column="56">[<expr><literal type="number" pos:line="95" pos:column="57">0<pos:position pos:line="95" pos:column="58"/></literal></expr>]<pos:position pos:line="95" pos:column="59"/></index></name></expr></argument>)<pos:position pos:line="95" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="61"/></expr_stmt>

		<expr_stmt><expr><call><name pos:line="97" pos:column="17">check_alt_basis_dirs<pos:position pos:line="97" pos:column="37"/></name><argument_list pos:line="97" pos:column="37">()<pos:position pos:line="97" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="40"/></expr_stmt>

		<expr_stmt><expr><name pos:line="99" pos:column="17">exit_code2<pos:position pos:line="99" pos:column="27"/></name> <operator pos:line="99" pos:column="28">=<pos:position pos:line="99" pos:column="29"/></operator> <call><name pos:line="99" pos:column="30">do_recv<pos:position pos:line="99" pos:column="37"/></name><argument_list pos:line="99" pos:column="37">(<argument><expr><name pos:line="99" pos:column="38">f_in<pos:position pos:line="99" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="99" pos:column="44">f_out<pos:position pos:line="99" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="99" pos:column="51">local_name<pos:position pos:line="99" pos:column="61"/></name></expr></argument>)<pos:position pos:line="99" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="99" pos:column="63"/></expr_stmt>
	}<pos:position pos:line="100" pos:column="10"/></block></then> <else pos:line="100" pos:column="11">else <block pos:line="100" pos:column="16">{
		<expr_stmt><expr><call><name pos:line="101" pos:column="17">handle_stats<pos:position pos:line="101" pos:column="29"/></name><argument_list pos:line="101" pos:column="29">(<argument><expr><operator pos:line="101" pos:column="30">-<pos:position pos:line="101" pos:column="31"/></operator><literal type="number" pos:line="101" pos:column="31">1<pos:position pos:line="101" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="101" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="34"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="102" pos:column="17">output_summary<pos:position pos:line="102" pos:column="31"/></name><argument_list pos:line="102" pos:column="31">()<pos:position pos:line="102" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="102" pos:column="34"/></expr_stmt>
	}<pos:position pos:line="103" pos:column="10"/></block></else></if>

	<if pos:line="105" pos:column="9">if <condition pos:line="105" pos:column="12">(<expr><name pos:line="105" pos:column="13">pid<pos:position pos:line="105" pos:column="16"/></name> <operator pos:line="105" pos:column="17">!=<pos:position pos:line="105" pos:column="19"/></operator> <operator pos:line="105" pos:column="20">-<pos:position pos:line="105" pos:column="21"/></operator><literal type="number" pos:line="105" pos:column="21">1<pos:position pos:line="105" pos:column="22"/></literal></expr>)<pos:position pos:line="105" pos:column="23"/></condition><then pos:line="105" pos:column="23"> <block pos:line="105" pos:column="24">{
		<if pos:line="106" pos:column="17">if <condition pos:line="106" pos:column="20">(<expr><call><name pos:line="106" pos:column="21">DEBUG_GTE<pos:position pos:line="106" pos:column="30"/></name><argument_list pos:line="106" pos:column="30">(<argument><expr><name pos:line="106" pos:column="31">RECV<pos:position pos:line="106" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="106" pos:column="37">1<pos:position pos:line="106" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="106" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="106" pos:column="40"/></condition><then pos:line="106" pos:column="40">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="107" pos:column="25">rprintf<pos:position pos:line="107" pos:column="32"/></name><argument_list pos:line="107" pos:column="32">(<argument><expr><name pos:line="107" pos:column="33">FINFO<pos:position pos:line="107" pos:column="38"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="107" pos:column="39">"client_run2 waiting on %d\n"<pos:position pos:line="107" pos:column="68"/></literal></expr></argument>, <argument><expr><operator pos:line="107" pos:column="70">(<pos:position pos:line="107" pos:column="71"/></operator><name pos:line="107" pos:column="71">int<pos:position pos:line="107" pos:column="74"/></name><operator pos:line="107" pos:column="74">)<pos:position pos:line="107" pos:column="75"/></operator> <name pos:line="107" pos:column="76">pid<pos:position pos:line="107" pos:column="79"/></name></expr></argument>)<pos:position pos:line="107" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="107" pos:column="81"/></expr_stmt></block></then></if>
		<expr_stmt><expr><call><name pos:line="108" pos:column="17">io_flush<pos:position pos:line="108" pos:column="25"/></name><argument_list pos:line="108" pos:column="25">(<argument><expr><name pos:line="108" pos:column="26">FULL_FLUSH<pos:position pos:line="108" pos:column="36"/></name></expr></argument>)<pos:position pos:line="108" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="108" pos:column="38"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="109" pos:column="17">wait_process_with_flush<pos:position pos:line="109" pos:column="40"/></name><argument_list pos:line="109" pos:column="40">(<argument><expr><name pos:line="109" pos:column="41">pid<pos:position pos:line="109" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="109" pos:column="46">&amp;<pos:position pos:line="109" pos:column="51"/></operator><name pos:line="109" pos:column="47">exit_code<pos:position pos:line="109" pos:column="56"/></name></expr></argument>)<pos:position pos:line="109" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="109" pos:column="58"/></expr_stmt>
	}<pos:position pos:line="110" pos:column="10"/></block></then></if>

	<return pos:line="112" pos:column="9">return <expr><call><name pos:line="112" pos:column="16">MAX<pos:position pos:line="112" pos:column="19"/></name><argument_list pos:line="112" pos:column="19">(<argument><expr><name pos:line="112" pos:column="20">exit_code<pos:position pos:line="112" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="112" pos:column="31">exit_code2<pos:position pos:line="112" pos:column="41"/></name></expr></argument>)<pos:position pos:line="112" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="112" pos:column="43"/></return>
}<pos:position pos:line="113" pos:column="2"/></block></function></unit>
