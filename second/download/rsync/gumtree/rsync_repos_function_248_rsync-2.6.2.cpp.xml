<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_248_rsync-2.6.2.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">recv_files<pos:position pos:line="1" pos:column="15"/></name><parameter_list pos:line="1" pos:column="15">(<parameter><decl><type><name pos:line="1" pos:column="16">int<pos:position pos:line="1" pos:column="19"/></name></type> <name pos:line="1" pos:column="20">f_in<pos:position pos:line="1" pos:column="24"/></name></decl></parameter>,<parameter><decl><type><name><name pos:line="1" pos:column="25">struct<pos:position pos:line="1" pos:column="31"/></name> <name pos:line="1" pos:column="32">file_list<pos:position pos:line="1" pos:column="41"/></name></name> <modifier pos:line="1" pos:column="42">*<pos:position pos:line="1" pos:column="43"/></modifier></type><name pos:line="1" pos:column="43">flist<pos:position pos:line="1" pos:column="48"/></name></decl></parameter>,<parameter><decl><type><name pos:line="1" pos:column="49">char<pos:position pos:line="1" pos:column="53"/></name> <modifier pos:line="1" pos:column="54">*<pos:position pos:line="1" pos:column="55"/></modifier></type><name pos:line="1" pos:column="55">local_name<pos:position pos:line="1" pos:column="65"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="66"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">fd1<pos:position pos:line="3" pos:column="16"/></name></decl>,<decl><type ref="prev"/><name pos:line="3" pos:column="17">fd2<pos:position pos:line="3" pos:column="20"/></name></decl>;<pos:position pos:line="3" pos:column="21"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">STRUCT_STAT<pos:position pos:line="4" pos:column="20"/></name></type> <name pos:line="4" pos:column="21">st<pos:position pos:line="4" pos:column="23"/></name></decl>;<pos:position pos:line="4" pos:column="24"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">char<pos:position pos:line="5" pos:column="13"/></name> <modifier pos:line="5" pos:column="14">*<pos:position pos:line="5" pos:column="15"/></modifier></type><name pos:line="5" pos:column="15">fname<pos:position pos:line="5" pos:column="20"/></name></decl>, <decl><type ref="prev"/><name><name pos:line="5" pos:column="22">fbuf<pos:position pos:line="5" pos:column="26"/></name><index pos:line="5" pos:column="26">[<expr><name pos:line="5" pos:column="27">MAXPATHLEN<pos:position pos:line="5" pos:column="37"/></name></expr>]<pos:position pos:line="5" pos:column="38"/></index></name></decl>;<pos:position pos:line="5" pos:column="39"/></decl_stmt>
	<macro><name pos:line="6" pos:column="9">char<pos:position pos:line="6" pos:column="13"/></name></macro> <template pos:line="6" pos:column="14">template<parameter><type><pos:position pos:line="6" pos:column="22"/></type>[MAXPATHLEN]<pos:position pos:line="6" pos:column="34"/></parameter><empty_stmt pos:line="6" pos:column="34">;<pos:position pos:line="6" pos:column="35"/></empty_stmt></template>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">char<pos:position pos:line="7" pos:column="13"/></name></type> <name><name pos:line="7" pos:column="14">fnametmp<pos:position pos:line="7" pos:column="22"/></name><index pos:line="7" pos:column="22">[<expr><name pos:line="7" pos:column="23">MAXPATHLEN<pos:position pos:line="7" pos:column="33"/></name></expr>]<pos:position pos:line="7" pos:column="34"/></index></name></decl>;<pos:position pos:line="7" pos:column="35"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">char<pos:position pos:line="8" pos:column="13"/></name> <modifier pos:line="8" pos:column="14">*<pos:position pos:line="8" pos:column="15"/></modifier></type><name pos:line="8" pos:column="15">fnamecmp<pos:position pos:line="8" pos:column="23"/></name></decl>;<pos:position pos:line="8" pos:column="24"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="9" pos:column="9">char<pos:position pos:line="9" pos:column="13"/></name></type> <name><name pos:line="9" pos:column="14">fnamecmpbuf<pos:position pos:line="9" pos:column="25"/></name><index pos:line="9" pos:column="25">[<expr><name pos:line="9" pos:column="26">MAXPATHLEN<pos:position pos:line="9" pos:column="36"/></name></expr>]<pos:position pos:line="9" pos:column="37"/></index></name></decl>;<pos:position pos:line="9" pos:column="38"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="10" pos:column="9">struct<pos:position pos:line="10" pos:column="15"/></name> <name pos:line="10" pos:column="16">map_struct<pos:position pos:line="10" pos:column="26"/></name></name> <modifier pos:line="10" pos:column="27">*<pos:position pos:line="10" pos:column="28"/></modifier></type><name pos:line="10" pos:column="28">mapbuf<pos:position pos:line="10" pos:column="34"/></name></decl>;<pos:position pos:line="10" pos:column="35"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="11" pos:column="9">int<pos:position pos:line="11" pos:column="12"/></name></type> <name pos:line="11" pos:column="13">i<pos:position pos:line="11" pos:column="14"/></name></decl>;<pos:position pos:line="11" pos:column="15"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="12" pos:column="9">struct<pos:position pos:line="12" pos:column="15"/></name> <name pos:line="12" pos:column="16">file_struct<pos:position pos:line="12" pos:column="27"/></name></name> <modifier pos:line="12" pos:column="28">*<pos:position pos:line="12" pos:column="29"/></modifier></type><name pos:line="12" pos:column="29">file<pos:position pos:line="12" pos:column="33"/></name></decl>;<pos:position pos:line="12" pos:column="34"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="13" pos:column="9">int<pos:position pos:line="13" pos:column="12"/></name></type> <name pos:line="13" pos:column="13">phase<pos:position pos:line="13" pos:column="18"/></name><init pos:line="13" pos:column="18">=<expr><literal type="number" pos:line="13" pos:column="19">0<pos:position pos:line="13" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="13" pos:column="21"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="14" pos:column="9">int<pos:position pos:line="14" pos:column="12"/></name></type> <name pos:line="14" pos:column="13">recv_ok<pos:position pos:line="14" pos:column="20"/></name></decl>;<pos:position pos:line="14" pos:column="21"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="15" pos:column="9">struct<pos:position pos:line="15" pos:column="15"/></name> <name pos:line="15" pos:column="16">stats<pos:position pos:line="15" pos:column="21"/></name></name></type> <name pos:line="15" pos:column="22">initial_stats<pos:position pos:line="15" pos:column="35"/></name></decl>;<pos:position pos:line="15" pos:column="36"/></decl_stmt>

	<if pos:line="17" pos:column="9">if <condition pos:line="17" pos:column="12">(<expr><name pos:line="17" pos:column="13">verbose<pos:position pos:line="17" pos:column="20"/></name> <operator pos:line="17" pos:column="21">&gt;<pos:position pos:line="17" pos:column="25"/></operator> <literal type="number" pos:line="17" pos:column="23">2<pos:position pos:line="17" pos:column="24"/></literal></expr>)<pos:position pos:line="17" pos:column="25"/></condition><then pos:line="17" pos:column="25"> <block pos:line="17" pos:column="26">{
		<expr_stmt><expr><call><name pos:line="18" pos:column="17">rprintf<pos:position pos:line="18" pos:column="24"/></name><argument_list pos:line="18" pos:column="24">(<argument><expr><name pos:line="18" pos:column="25">FINFO<pos:position pos:line="18" pos:column="30"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="18" pos:column="31">"recv_files(%d) starting\n"<pos:position pos:line="18" pos:column="58"/></literal></expr></argument>,<argument><expr><name><name pos:line="18" pos:column="59">flist<pos:position pos:line="18" pos:column="64"/></name><operator pos:line="18" pos:column="64">-&gt;<pos:position pos:line="18" pos:column="69"/></operator><name pos:line="18" pos:column="66">count<pos:position pos:line="18" pos:column="71"/></name></name></expr></argument>)<pos:position pos:line="18" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="73"/></expr_stmt>
	}<pos:position pos:line="19" pos:column="10"/></block></then></if>

	<if pos:line="21" pos:column="9">if <condition pos:line="21" pos:column="12">(<expr><name><name pos:line="21" pos:column="13">flist<pos:position pos:line="21" pos:column="18"/></name><operator pos:line="21" pos:column="18">-&gt;<pos:position pos:line="21" pos:column="23"/></operator><name pos:line="21" pos:column="20">hlink_pool<pos:position pos:line="21" pos:column="30"/></name></name></expr>)<pos:position pos:line="21" pos:column="31"/></condition><then pos:line="21" pos:column="31"> <block pos:line="21" pos:column="32">{
		<expr_stmt><expr><call><name pos:line="22" pos:column="17">pool_destroy<pos:position pos:line="22" pos:column="29"/></name><argument_list pos:line="22" pos:column="29">(<argument><expr><name><name pos:line="22" pos:column="30">flist<pos:position pos:line="22" pos:column="35"/></name><operator pos:line="22" pos:column="35">-&gt;<pos:position pos:line="22" pos:column="40"/></operator><name pos:line="22" pos:column="37">hlink_pool<pos:position pos:line="22" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="22" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="49"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="23" pos:column="17">flist<pos:position pos:line="23" pos:column="22"/></name><operator pos:line="23" pos:column="22">-&gt;<pos:position pos:line="23" pos:column="27"/></operator><name pos:line="23" pos:column="24">hlink_pool<pos:position pos:line="23" pos:column="34"/></name></name> <operator pos:line="23" pos:column="35">=<pos:position pos:line="23" pos:column="36"/></operator> <name pos:line="23" pos:column="37">NULL<pos:position pos:line="23" pos:column="41"/></name></expr>;<pos:position pos:line="23" pos:column="42"/></expr_stmt>
	}<pos:position pos:line="24" pos:column="10"/></block></then></if>

	<while pos:line="26" pos:column="9">while <condition pos:line="26" pos:column="15">(<expr><literal type="number" pos:line="26" pos:column="16">1<pos:position pos:line="26" pos:column="17"/></literal></expr>)<pos:position pos:line="26" pos:column="18"/></condition> <block pos:line="26" pos:column="19">{
		<expr_stmt><expr><call><name pos:line="27" pos:column="17">cleanup_disable<pos:position pos:line="27" pos:column="32"/></name><argument_list pos:line="27" pos:column="32">()<pos:position pos:line="27" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="35"/></expr_stmt>

		<expr_stmt><expr><name pos:line="29" pos:column="17">i<pos:position pos:line="29" pos:column="18"/></name> <operator pos:line="29" pos:column="19">=<pos:position pos:line="29" pos:column="20"/></operator> <call><name pos:line="29" pos:column="21">read_int<pos:position pos:line="29" pos:column="29"/></name><argument_list pos:line="29" pos:column="29">(<argument><expr><name pos:line="29" pos:column="30">f_in<pos:position pos:line="29" pos:column="34"/></name></expr></argument>)<pos:position pos:line="29" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="36"/></expr_stmt>
		<if pos:line="30" pos:column="17">if <condition pos:line="30" pos:column="20">(<expr><name pos:line="30" pos:column="21">i<pos:position pos:line="30" pos:column="22"/></name> <operator pos:line="30" pos:column="23">==<pos:position pos:line="30" pos:column="25"/></operator> <operator pos:line="30" pos:column="26">-<pos:position pos:line="30" pos:column="27"/></operator><literal type="number" pos:line="30" pos:column="27">1<pos:position pos:line="30" pos:column="28"/></literal></expr>)<pos:position pos:line="30" pos:column="29"/></condition><then pos:line="30" pos:column="29"> <block pos:line="30" pos:column="30">{
			<if pos:line="31" pos:column="25">if <condition pos:line="31" pos:column="28">(<expr><name pos:line="31" pos:column="29">phase<pos:position pos:line="31" pos:column="34"/></name> <operator pos:line="31" pos:column="35">==<pos:position pos:line="31" pos:column="37"/></operator> <literal type="number" pos:line="31" pos:column="38">0<pos:position pos:line="31" pos:column="39"/></literal></expr>)<pos:position pos:line="31" pos:column="40"/></condition><then pos:line="31" pos:column="40"> <block pos:line="31" pos:column="41">{
				<expr_stmt><expr><name pos:line="32" pos:column="33">phase<pos:position pos:line="32" pos:column="38"/></name><operator pos:line="32" pos:column="38">++<pos:position pos:line="32" pos:column="40"/></operator></expr>;<pos:position pos:line="32" pos:column="41"/></expr_stmt>
				<expr_stmt><expr><name pos:line="33" pos:column="33">csum_length<pos:position pos:line="33" pos:column="44"/></name> <operator pos:line="33" pos:column="45">=<pos:position pos:line="33" pos:column="46"/></operator> <name pos:line="33" pos:column="47">SUM_LENGTH<pos:position pos:line="33" pos:column="57"/></name></expr>;<pos:position pos:line="33" pos:column="58"/></expr_stmt>
				<if pos:line="34" pos:column="33">if <condition pos:line="34" pos:column="36">(<expr><name pos:line="34" pos:column="37">verbose<pos:position pos:line="34" pos:column="44"/></name> <operator pos:line="34" pos:column="45">&gt;<pos:position pos:line="34" pos:column="49"/></operator> <literal type="number" pos:line="34" pos:column="47">2<pos:position pos:line="34" pos:column="48"/></literal></expr>)<pos:position pos:line="34" pos:column="49"/></condition><then pos:line="34" pos:column="49">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="35" pos:column="41">rprintf<pos:position pos:line="35" pos:column="48"/></name><argument_list pos:line="35" pos:column="48">(<argument><expr><name pos:line="35" pos:column="49">FINFO<pos:position pos:line="35" pos:column="54"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="35" pos:column="55">"recv_files phase=%d\n"<pos:position pos:line="35" pos:column="78"/></literal></expr></argument>,<argument><expr><name pos:line="35" pos:column="79">phase<pos:position pos:line="35" pos:column="84"/></name></expr></argument>)<pos:position pos:line="35" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="86"/></expr_stmt></block></then></if>
				<expr_stmt><expr><call><name pos:line="36" pos:column="33">send_msg<pos:position pos:line="36" pos:column="41"/></name><argument_list pos:line="36" pos:column="41">(<argument><expr><name pos:line="36" pos:column="42">MSG_DONE<pos:position pos:line="36" pos:column="50"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="36" pos:column="52">""<pos:position pos:line="36" pos:column="54"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="36" pos:column="56">0<pos:position pos:line="36" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="59"/></expr_stmt>
				<continue pos:line="37" pos:column="33">continue;<pos:position pos:line="37" pos:column="42"/></continue>
			}<pos:position pos:line="38" pos:column="26"/></block></then></if>
			<break pos:line="39" pos:column="25">break;<pos:position pos:line="39" pos:column="31"/></break>
		}<pos:position pos:line="40" pos:column="18"/></block></then></if>

		<if pos:line="42" pos:column="17">if <condition pos:line="42" pos:column="20">(<expr><name pos:line="42" pos:column="21">i<pos:position pos:line="42" pos:column="22"/></name> <operator pos:line="42" pos:column="23">&lt;<pos:position pos:line="42" pos:column="27"/></operator> <literal type="number" pos:line="42" pos:column="25">0<pos:position pos:line="42" pos:column="26"/></literal> <operator pos:line="42" pos:column="27">||<pos:position pos:line="42" pos:column="29"/></operator> <name pos:line="42" pos:column="30">i<pos:position pos:line="42" pos:column="31"/></name> <operator pos:line="42" pos:column="32">&gt;=<pos:position pos:line="42" pos:column="37"/></operator> <name><name pos:line="42" pos:column="35">flist<pos:position pos:line="42" pos:column="40"/></name><operator pos:line="42" pos:column="40">-&gt;<pos:position pos:line="42" pos:column="45"/></operator><name pos:line="42" pos:column="42">count<pos:position pos:line="42" pos:column="47"/></name></name></expr>)<pos:position pos:line="42" pos:column="48"/></condition><then pos:line="42" pos:column="48"> <block pos:line="42" pos:column="49">{
			<expr_stmt><expr><call><name pos:line="43" pos:column="25">rprintf<pos:position pos:line="43" pos:column="32"/></name><argument_list pos:line="43" pos:column="32">(<argument><expr><name pos:line="43" pos:column="33">FERROR<pos:position pos:line="43" pos:column="39"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="43" pos:column="40">"Invalid file index %d in recv_files (count=%d)\n"<pos:position pos:line="43" pos:column="90"/></literal></expr></argument>,
				<argument><expr><name pos:line="44" pos:column="33">i<pos:position pos:line="44" pos:column="34"/></name></expr></argument>, <argument><expr><name><name pos:line="44" pos:column="36">flist<pos:position pos:line="44" pos:column="41"/></name><operator pos:line="44" pos:column="41">-&gt;<pos:position pos:line="44" pos:column="46"/></operator><name pos:line="44" pos:column="43">count<pos:position pos:line="44" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="44" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="50"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="45" pos:column="25">exit_cleanup<pos:position pos:line="45" pos:column="37"/></name><argument_list pos:line="45" pos:column="37">(<argument><expr><name pos:line="45" pos:column="38">RERR_PROTOCOL<pos:position pos:line="45" pos:column="51"/></name></expr></argument>)<pos:position pos:line="45" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="53"/></expr_stmt>
		}<pos:position pos:line="46" pos:column="18"/></block></then></if>

		<expr_stmt><expr><name pos:line="48" pos:column="17">file<pos:position pos:line="48" pos:column="21"/></name> <operator pos:line="48" pos:column="22">=<pos:position pos:line="48" pos:column="23"/></operator> <name><name pos:line="48" pos:column="24">flist<pos:position pos:line="48" pos:column="29"/></name><operator pos:line="48" pos:column="29">-&gt;<pos:position pos:line="48" pos:column="34"/></operator><name pos:line="48" pos:column="31">files<pos:position pos:line="48" pos:column="36"/></name><index pos:line="48" pos:column="36">[<expr><name pos:line="48" pos:column="37">i<pos:position pos:line="48" pos:column="38"/></name></expr>]<pos:position pos:line="48" pos:column="39"/></index></name></expr>;<pos:position pos:line="48" pos:column="40"/></expr_stmt>

		<expr_stmt><expr><name><name pos:line="50" pos:column="17">stats<pos:position pos:line="50" pos:column="22"/></name><operator pos:line="50" pos:column="22">.<pos:position pos:line="50" pos:column="23"/></operator><name pos:line="50" pos:column="23">current_file_index<pos:position pos:line="50" pos:column="41"/></name></name> <operator pos:line="50" pos:column="42">=<pos:position pos:line="50" pos:column="43"/></operator> <name pos:line="50" pos:column="44">i<pos:position pos:line="50" pos:column="45"/></name></expr>;<pos:position pos:line="50" pos:column="46"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="51" pos:column="17">stats<pos:position pos:line="51" pos:column="22"/></name><operator pos:line="51" pos:column="22">.<pos:position pos:line="51" pos:column="23"/></operator><name pos:line="51" pos:column="23">num_transferred_files<pos:position pos:line="51" pos:column="44"/></name></name><operator pos:line="51" pos:column="44">++<pos:position pos:line="51" pos:column="46"/></operator></expr>;<pos:position pos:line="51" pos:column="47"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="52" pos:column="17">stats<pos:position pos:line="52" pos:column="22"/></name><operator pos:line="52" pos:column="22">.<pos:position pos:line="52" pos:column="23"/></operator><name pos:line="52" pos:column="23">total_transferred_size<pos:position pos:line="52" pos:column="45"/></name></name> <operator pos:line="52" pos:column="46">+=<pos:position pos:line="52" pos:column="48"/></operator> <name><name pos:line="52" pos:column="49">file<pos:position pos:line="52" pos:column="53"/></name><operator pos:line="52" pos:column="53">-&gt;<pos:position pos:line="52" pos:column="58"/></operator><name pos:line="52" pos:column="55">length<pos:position pos:line="52" pos:column="61"/></name></name></expr>;<pos:position pos:line="52" pos:column="62"/></expr_stmt>
		<expr_stmt><expr><name pos:line="53" pos:column="17">cleanup_got_literal<pos:position pos:line="53" pos:column="36"/></name> <operator pos:line="53" pos:column="37">=<pos:position pos:line="53" pos:column="38"/></operator> <literal type="number" pos:line="53" pos:column="39">0<pos:position pos:line="53" pos:column="40"/></literal></expr>;<pos:position pos:line="53" pos:column="41"/></expr_stmt>

		<if pos:line="55" pos:column="17">if <condition pos:line="55" pos:column="20">(<expr><name pos:line="55" pos:column="21">local_name<pos:position pos:line="55" pos:column="31"/></name></expr>)<pos:position pos:line="55" pos:column="32"/></condition><then pos:line="55" pos:column="32">
			<block type="pseudo"><expr_stmt><expr><name pos:line="56" pos:column="25">fname<pos:position pos:line="56" pos:column="30"/></name> <operator pos:line="56" pos:column="31">=<pos:position pos:line="56" pos:column="32"/></operator> <name pos:line="56" pos:column="33">local_name<pos:position pos:line="56" pos:column="43"/></name></expr>;<pos:position pos:line="56" pos:column="44"/></expr_stmt></block></then>
		<else pos:line="57" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><name pos:line="58" pos:column="25">fname<pos:position pos:line="58" pos:column="30"/></name> <operator pos:line="58" pos:column="31">=<pos:position pos:line="58" pos:column="32"/></operator> <call><name pos:line="58" pos:column="33">f_name_to<pos:position pos:line="58" pos:column="42"/></name><argument_list pos:line="58" pos:column="42">(<argument><expr><name pos:line="58" pos:column="43">file<pos:position pos:line="58" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="49">fbuf<pos:position pos:line="58" pos:column="53"/></name></expr></argument>)<pos:position pos:line="58" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="55"/></expr_stmt></block></else></if>

		<if pos:line="60" pos:column="17">if <condition pos:line="60" pos:column="20">(<expr><name pos:line="60" pos:column="21">dry_run<pos:position pos:line="60" pos:column="28"/></name></expr>)<pos:position pos:line="60" pos:column="29"/></condition><then pos:line="60" pos:column="29"> <block pos:line="60" pos:column="30">{
			<if pos:line="61" pos:column="25">if <condition pos:line="61" pos:column="28">(<expr><operator pos:line="61" pos:column="29">!<pos:position pos:line="61" pos:column="30"/></operator><name pos:line="61" pos:column="30">am_server<pos:position pos:line="61" pos:column="39"/></name> <operator pos:line="61" pos:column="40">&amp;&amp;<pos:position pos:line="61" pos:column="50"/></operator> <name pos:line="61" pos:column="43">verbose<pos:position pos:line="61" pos:column="50"/></name></expr>)<pos:position pos:line="61" pos:column="51"/></condition><then pos:line="61" pos:column="51"> <block pos:line="61" pos:column="52">{	<comment type="block" pos:line="61" pos:column="57">/* log transfer */</comment>
				<expr_stmt><expr><call><name pos:line="62" pos:column="33">rprintf<pos:position pos:line="62" pos:column="40"/></name><argument_list pos:line="62" pos:column="40">(<argument><expr><name pos:line="62" pos:column="41">FINFO<pos:position pos:line="62" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="62" pos:column="48">"%s\n"<pos:position pos:line="62" pos:column="54"/></literal></expr></argument>, <argument><expr><name pos:line="62" pos:column="56">fname<pos:position pos:line="62" pos:column="61"/></name></expr></argument>)<pos:position pos:line="62" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="63"/></expr_stmt>
			}<pos:position pos:line="63" pos:column="26"/></block></then></if>
			<continue pos:line="64" pos:column="25">continue;<pos:position pos:line="64" pos:column="34"/></continue>
		}<pos:position pos:line="65" pos:column="18"/></block></then></if>

		<expr_stmt><expr><name pos:line="67" pos:column="17">initial_stats<pos:position pos:line="67" pos:column="30"/></name> <operator pos:line="67" pos:column="31">=<pos:position pos:line="67" pos:column="32"/></operator> <name pos:line="67" pos:column="33">stats<pos:position pos:line="67" pos:column="38"/></name></expr>;<pos:position pos:line="67" pos:column="39"/></expr_stmt>

		<if pos:line="69" pos:column="17">if <condition pos:line="69" pos:column="20">(<expr><name pos:line="69" pos:column="21">verbose<pos:position pos:line="69" pos:column="28"/></name> <operator pos:line="69" pos:column="29">&gt;<pos:position pos:line="69" pos:column="33"/></operator> <literal type="number" pos:line="69" pos:column="31">2<pos:position pos:line="69" pos:column="32"/></literal></expr>)<pos:position pos:line="69" pos:column="33"/></condition><then pos:line="69" pos:column="33">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="70" pos:column="25">rprintf<pos:position pos:line="70" pos:column="32"/></name><argument_list pos:line="70" pos:column="32">(<argument><expr><name pos:line="70" pos:column="33">FINFO<pos:position pos:line="70" pos:column="38"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="70" pos:column="39">"recv_files(%s)\n"<pos:position pos:line="70" pos:column="57"/></literal></expr></argument>,<argument><expr><name pos:line="70" pos:column="58">fname<pos:position pos:line="70" pos:column="63"/></name></expr></argument>)<pos:position pos:line="70" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="65"/></expr_stmt></block></then></if>

		<expr_stmt><expr><name pos:line="72" pos:column="17">fnamecmp<pos:position pos:line="72" pos:column="25"/></name> <operator pos:line="72" pos:column="26">=<pos:position pos:line="72" pos:column="27"/></operator> <name pos:line="72" pos:column="28">fname<pos:position pos:line="72" pos:column="33"/></name></expr>;<pos:position pos:line="72" pos:column="34"/></expr_stmt>

		<comment type="block" pos:line="74" pos:column="17">/* open the file */</comment>
		<expr_stmt><expr><name pos:line="75" pos:column="17">fd1<pos:position pos:line="75" pos:column="20"/></name> <operator pos:line="75" pos:column="21">=<pos:position pos:line="75" pos:column="22"/></operator> <call><name pos:line="75" pos:column="23">do_open<pos:position pos:line="75" pos:column="30"/></name><argument_list pos:line="75" pos:column="30">(<argument><expr><name pos:line="75" pos:column="31">fnamecmp<pos:position pos:line="75" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="75" pos:column="41">O_RDONLY<pos:position pos:line="75" pos:column="49"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="75" pos:column="51">0<pos:position pos:line="75" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="75" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="54"/></expr_stmt>

		<if pos:line="77" pos:column="17">if <condition pos:line="77" pos:column="20">(<expr><name pos:line="77" pos:column="21">fd1<pos:position pos:line="77" pos:column="24"/></name> <operator pos:line="77" pos:column="25">==<pos:position pos:line="77" pos:column="27"/></operator> <operator pos:line="77" pos:column="28">-<pos:position pos:line="77" pos:column="29"/></operator><literal type="number" pos:line="77" pos:column="29">1<pos:position pos:line="77" pos:column="30"/></literal> <operator pos:line="77" pos:column="31">&amp;&amp;<pos:position pos:line="77" pos:column="41"/></operator> <name pos:line="77" pos:column="34">compare_dest<pos:position pos:line="77" pos:column="46"/></name> <operator pos:line="77" pos:column="47">!=<pos:position pos:line="77" pos:column="49"/></operator> <name pos:line="77" pos:column="50">NULL<pos:position pos:line="77" pos:column="54"/></name></expr>)<pos:position pos:line="77" pos:column="55"/></condition><then pos:line="77" pos:column="55"> <block pos:line="77" pos:column="56">{
			<comment type="block" pos:line="78" pos:column="25">/* try the file at compare_dest instead */</comment>
			<expr_stmt><expr><call><name pos:line="79" pos:column="25">pathjoin<pos:position pos:line="79" pos:column="33"/></name><argument_list pos:line="79" pos:column="33">(<argument><expr><name pos:line="79" pos:column="34">fnamecmpbuf<pos:position pos:line="79" pos:column="45"/></name></expr></argument>, <argument><expr><sizeof pos:line="79" pos:column="47">sizeof <name pos:line="79" pos:column="54">fnamecmpbuf<pos:position pos:line="79" pos:column="65"/></name></sizeof></expr></argument>,
				 <argument><expr><name pos:line="80" pos:column="34">compare_dest<pos:position pos:line="80" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="80" pos:column="48">fname<pos:position pos:line="80" pos:column="53"/></name></expr></argument>)<pos:position pos:line="80" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="55"/></expr_stmt>
			<expr_stmt><expr><name pos:line="81" pos:column="25">fnamecmp<pos:position pos:line="81" pos:column="33"/></name> <operator pos:line="81" pos:column="34">=<pos:position pos:line="81" pos:column="35"/></operator> <name pos:line="81" pos:column="36">fnamecmpbuf<pos:position pos:line="81" pos:column="47"/></name></expr>;<pos:position pos:line="81" pos:column="48"/></expr_stmt>
			<expr_stmt><expr><name pos:line="82" pos:column="25">fd1<pos:position pos:line="82" pos:column="28"/></name> <operator pos:line="82" pos:column="29">=<pos:position pos:line="82" pos:column="30"/></operator> <call><name pos:line="82" pos:column="31">do_open<pos:position pos:line="82" pos:column="38"/></name><argument_list pos:line="82" pos:column="38">(<argument><expr><name pos:line="82" pos:column="39">fnamecmp<pos:position pos:line="82" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="82" pos:column="49">O_RDONLY<pos:position pos:line="82" pos:column="57"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="82" pos:column="59">0<pos:position pos:line="82" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="82" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="62"/></expr_stmt>
		}<pos:position pos:line="83" pos:column="18"/></block></then></if>

		<if pos:line="85" pos:column="17">if <condition pos:line="85" pos:column="20">(<expr><name pos:line="85" pos:column="21">fd1<pos:position pos:line="85" pos:column="24"/></name> <operator pos:line="85" pos:column="25">!=<pos:position pos:line="85" pos:column="27"/></operator> <operator pos:line="85" pos:column="28">-<pos:position pos:line="85" pos:column="29"/></operator><literal type="number" pos:line="85" pos:column="29">1<pos:position pos:line="85" pos:column="30"/></literal> <operator pos:line="85" pos:column="31">&amp;&amp;<pos:position pos:line="85" pos:column="41"/></operator> <call><name pos:line="85" pos:column="34">do_fstat<pos:position pos:line="85" pos:column="42"/></name><argument_list pos:line="85" pos:column="42">(<argument><expr><name pos:line="85" pos:column="43">fd1<pos:position pos:line="85" pos:column="46"/></name></expr></argument>,<argument><expr><operator pos:line="85" pos:column="47">&amp;<pos:position pos:line="85" pos:column="52"/></operator><name pos:line="85" pos:column="48">st<pos:position pos:line="85" pos:column="50"/></name></expr></argument>)<pos:position pos:line="85" pos:column="51"/></argument_list></call> <operator pos:line="85" pos:column="52">!=<pos:position pos:line="85" pos:column="54"/></operator> <literal type="number" pos:line="85" pos:column="55">0<pos:position pos:line="85" pos:column="56"/></literal></expr>)<pos:position pos:line="85" pos:column="57"/></condition><then pos:line="85" pos:column="57"> <block pos:line="85" pos:column="58">{
			<expr_stmt><expr><call><name pos:line="86" pos:column="25">rprintf<pos:position pos:line="86" pos:column="32"/></name><argument_list pos:line="86" pos:column="32">(<argument><expr><name pos:line="86" pos:column="33">FERROR<pos:position pos:line="86" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="86" pos:column="41">"fstat %s failed: %s\n"<pos:position pos:line="86" pos:column="64"/></literal></expr></argument>,
				<argument><expr><call><name pos:line="87" pos:column="33">full_fname<pos:position pos:line="87" pos:column="43"/></name><argument_list pos:line="87" pos:column="43">(<argument><expr><name pos:line="87" pos:column="44">fnamecmp<pos:position pos:line="87" pos:column="52"/></name></expr></argument>)<pos:position pos:line="87" pos:column="53"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="87" pos:column="55">strerror<pos:position pos:line="87" pos:column="63"/></name><argument_list pos:line="87" pos:column="63">(<argument><expr><name pos:line="87" pos:column="64">errno<pos:position pos:line="87" pos:column="69"/></name></expr></argument>)<pos:position pos:line="87" pos:column="70"/></argument_list></call></expr></argument>)<pos:position pos:line="87" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="72"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="88" pos:column="25">receive_data<pos:position pos:line="88" pos:column="37"/></name><argument_list pos:line="88" pos:column="37">(<argument><expr><name pos:line="88" pos:column="38">f_in<pos:position pos:line="88" pos:column="42"/></name></expr></argument>,<argument><expr><name pos:line="88" pos:column="43">NULL<pos:position pos:line="88" pos:column="47"/></name></expr></argument>,<argument><expr><operator pos:line="88" pos:column="48">-<pos:position pos:line="88" pos:column="49"/></operator><literal type="number" pos:line="88" pos:column="49">1<pos:position pos:line="88" pos:column="50"/></literal></expr></argument>,<argument><expr><name pos:line="88" pos:column="51">NULL<pos:position pos:line="88" pos:column="55"/></name></expr></argument>,<argument><expr><name><name pos:line="88" pos:column="56">file<pos:position pos:line="88" pos:column="60"/></name><operator pos:line="88" pos:column="60">-&gt;<pos:position pos:line="88" pos:column="65"/></operator><name pos:line="88" pos:column="62">length<pos:position pos:line="88" pos:column="68"/></name></name></expr></argument>)<pos:position pos:line="88" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="70"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="89" pos:column="25">close<pos:position pos:line="89" pos:column="30"/></name><argument_list pos:line="89" pos:column="30">(<argument><expr><name pos:line="89" pos:column="31">fd1<pos:position pos:line="89" pos:column="34"/></name></expr></argument>)<pos:position pos:line="89" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="36"/></expr_stmt>
			<continue pos:line="90" pos:column="25">continue;<pos:position pos:line="90" pos:column="34"/></continue>
		}<pos:position pos:line="91" pos:column="18"/></block></then></if>

		<if pos:line="93" pos:column="17">if <condition pos:line="93" pos:column="20">(<expr><name pos:line="93" pos:column="21">fd1<pos:position pos:line="93" pos:column="24"/></name> <operator pos:line="93" pos:column="25">!=<pos:position pos:line="93" pos:column="27"/></operator> <operator pos:line="93" pos:column="28">-<pos:position pos:line="93" pos:column="29"/></operator><literal type="number" pos:line="93" pos:column="29">1<pos:position pos:line="93" pos:column="30"/></literal> <operator pos:line="93" pos:column="31">&amp;&amp;<pos:position pos:line="93" pos:column="41"/></operator> <call><name pos:line="93" pos:column="34">S_ISDIR<pos:position pos:line="93" pos:column="41"/></name><argument_list pos:line="93" pos:column="41">(<argument><expr><name><name pos:line="93" pos:column="42">st<pos:position pos:line="93" pos:column="44"/></name><operator pos:line="93" pos:column="44">.<pos:position pos:line="93" pos:column="45"/></operator><name pos:line="93" pos:column="45">st_mode<pos:position pos:line="93" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="93" pos:column="53"/></argument_list></call> <operator pos:line="93" pos:column="54">&amp;&amp;<pos:position pos:line="93" pos:column="64"/></operator> <name pos:line="93" pos:column="57">fnamecmp<pos:position pos:line="93" pos:column="65"/></name> <operator pos:line="93" pos:column="66">==<pos:position pos:line="93" pos:column="68"/></operator> <name pos:line="93" pos:column="69">fname<pos:position pos:line="93" pos:column="74"/></name></expr>)<pos:position pos:line="93" pos:column="75"/></condition><then pos:line="93" pos:column="75"> <block pos:line="93" pos:column="76">{
			<comment type="block" pos:line="94" pos:column="25">/* this special handling for directories
			 * wouldn't be necessary if robust_rename()
			 * and the underlying robust_unlink could cope
			 * with directories
			 */</comment>
			<expr_stmt><expr><call><name pos:line="99" pos:column="25">rprintf<pos:position pos:line="99" pos:column="32"/></name><argument_list pos:line="99" pos:column="32">(<argument><expr><name pos:line="99" pos:column="33">FERROR<pos:position pos:line="99" pos:column="39"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="99" pos:column="40">"recv_files: %s is a directory\n"<pos:position pos:line="99" pos:column="73"/></literal></expr></argument>,
				<argument><expr><call><name pos:line="100" pos:column="33">full_fname<pos:position pos:line="100" pos:column="43"/></name><argument_list pos:line="100" pos:column="43">(<argument><expr><name pos:line="100" pos:column="44">fnamecmp<pos:position pos:line="100" pos:column="52"/></name></expr></argument>)<pos:position pos:line="100" pos:column="53"/></argument_list></call></expr></argument>)<pos:position pos:line="100" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="100" pos:column="55"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="101" pos:column="25">receive_data<pos:position pos:line="101" pos:column="37"/></name><argument_list pos:line="101" pos:column="37">(<argument><expr><name pos:line="101" pos:column="38">f_in<pos:position pos:line="101" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="101" pos:column="44">NULL<pos:position pos:line="101" pos:column="48"/></name></expr></argument>, <argument><expr><operator pos:line="101" pos:column="50">-<pos:position pos:line="101" pos:column="51"/></operator><literal type="number" pos:line="101" pos:column="51">1<pos:position pos:line="101" pos:column="52"/></literal></expr></argument>, <argument><expr><name pos:line="101" pos:column="54">NULL<pos:position pos:line="101" pos:column="58"/></name></expr></argument>, <argument><expr><name><name pos:line="101" pos:column="60">file<pos:position pos:line="101" pos:column="64"/></name><operator pos:line="101" pos:column="64">-&gt;<pos:position pos:line="101" pos:column="69"/></operator><name pos:line="101" pos:column="66">length<pos:position pos:line="101" pos:column="72"/></name></name></expr></argument>)<pos:position pos:line="101" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="74"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="102" pos:column="25">close<pos:position pos:line="102" pos:column="30"/></name><argument_list pos:line="102" pos:column="30">(<argument><expr><name pos:line="102" pos:column="31">fd1<pos:position pos:line="102" pos:column="34"/></name></expr></argument>)<pos:position pos:line="102" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="102" pos:column="36"/></expr_stmt>
			<continue pos:line="103" pos:column="25">continue;<pos:position pos:line="103" pos:column="34"/></continue>
		}<pos:position pos:line="104" pos:column="18"/></block></then></if>

		<if pos:line="106" pos:column="17">if <condition pos:line="106" pos:column="20">(<expr><name pos:line="106" pos:column="21">fd1<pos:position pos:line="106" pos:column="24"/></name> <operator pos:line="106" pos:column="25">!=<pos:position pos:line="106" pos:column="27"/></operator> <operator pos:line="106" pos:column="28">-<pos:position pos:line="106" pos:column="29"/></operator><literal type="number" pos:line="106" pos:column="29">1<pos:position pos:line="106" pos:column="30"/></literal> <operator pos:line="106" pos:column="31">&amp;&amp;<pos:position pos:line="106" pos:column="41"/></operator> <operator pos:line="106" pos:column="34">!<pos:position pos:line="106" pos:column="35"/></operator><call><name pos:line="106" pos:column="35">S_ISREG<pos:position pos:line="106" pos:column="42"/></name><argument_list pos:line="106" pos:column="42">(<argument><expr><name><name pos:line="106" pos:column="43">st<pos:position pos:line="106" pos:column="45"/></name><operator pos:line="106" pos:column="45">.<pos:position pos:line="106" pos:column="46"/></operator><name pos:line="106" pos:column="46">st_mode<pos:position pos:line="106" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="106" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="106" pos:column="55"/></condition><then pos:line="106" pos:column="55"> <block pos:line="106" pos:column="56">{
			<expr_stmt><expr><call><name pos:line="107" pos:column="25">close<pos:position pos:line="107" pos:column="30"/></name><argument_list pos:line="107" pos:column="30">(<argument><expr><name pos:line="107" pos:column="31">fd1<pos:position pos:line="107" pos:column="34"/></name></expr></argument>)<pos:position pos:line="107" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="107" pos:column="36"/></expr_stmt>
			<expr_stmt><expr><name pos:line="108" pos:column="25">fd1<pos:position pos:line="108" pos:column="28"/></name> <operator pos:line="108" pos:column="29">=<pos:position pos:line="108" pos:column="30"/></operator> <operator pos:line="108" pos:column="31">-<pos:position pos:line="108" pos:column="32"/></operator><literal type="number" pos:line="108" pos:column="32">1<pos:position pos:line="108" pos:column="33"/></literal></expr>;<pos:position pos:line="108" pos:column="34"/></expr_stmt>
			<expr_stmt><expr><name pos:line="109" pos:column="25">mapbuf<pos:position pos:line="109" pos:column="31"/></name> <operator pos:line="109" pos:column="32">=<pos:position pos:line="109" pos:column="33"/></operator> <name pos:line="109" pos:column="34">NULL<pos:position pos:line="109" pos:column="38"/></name></expr>;<pos:position pos:line="109" pos:column="39"/></expr_stmt>
		}<pos:position pos:line="110" pos:column="18"/></block></then></if>

		<if pos:line="112" pos:column="17">if <condition pos:line="112" pos:column="20">(<expr><name pos:line="112" pos:column="21">fd1<pos:position pos:line="112" pos:column="24"/></name> <operator pos:line="112" pos:column="25">!=<pos:position pos:line="112" pos:column="27"/></operator> <operator pos:line="112" pos:column="28">-<pos:position pos:line="112" pos:column="29"/></operator><literal type="number" pos:line="112" pos:column="29">1<pos:position pos:line="112" pos:column="30"/></literal> <operator pos:line="112" pos:column="31">&amp;&amp;<pos:position pos:line="112" pos:column="41"/></operator> <operator pos:line="112" pos:column="34">!<pos:position pos:line="112" pos:column="35"/></operator><name pos:line="112" pos:column="35">preserve_perms<pos:position pos:line="112" pos:column="49"/></name></expr>)<pos:position pos:line="112" pos:column="50"/></condition><then pos:line="112" pos:column="50"> <block pos:line="112" pos:column="51">{
			<comment type="block" pos:line="113" pos:column="25">/* if the file exists already and we aren't preserving
			 * permissions then act as though the remote end sent
			 * us the file permissions we already have */</comment>
			<expr_stmt><expr><name><name pos:line="116" pos:column="25">file<pos:position pos:line="116" pos:column="29"/></name><operator pos:line="116" pos:column="29">-&gt;<pos:position pos:line="116" pos:column="34"/></operator><name pos:line="116" pos:column="31">mode<pos:position pos:line="116" pos:column="35"/></name></name> <operator pos:line="116" pos:column="36">=<pos:position pos:line="116" pos:column="37"/></operator> <name><name pos:line="116" pos:column="38">st<pos:position pos:line="116" pos:column="40"/></name><operator pos:line="116" pos:column="40">.<pos:position pos:line="116" pos:column="41"/></operator><name pos:line="116" pos:column="41">st_mode<pos:position pos:line="116" pos:column="48"/></name></name></expr>;<pos:position pos:line="116" pos:column="49"/></expr_stmt>
		}<pos:position pos:line="117" pos:column="18"/></block></then></if>

		<if pos:line="119" pos:column="17">if <condition pos:line="119" pos:column="20">(<expr><name pos:line="119" pos:column="21">fd1<pos:position pos:line="119" pos:column="24"/></name> <operator pos:line="119" pos:column="25">!=<pos:position pos:line="119" pos:column="27"/></operator> <operator pos:line="119" pos:column="28">-<pos:position pos:line="119" pos:column="29"/></operator><literal type="number" pos:line="119" pos:column="29">1<pos:position pos:line="119" pos:column="30"/></literal> <operator pos:line="119" pos:column="31">&amp;&amp;<pos:position pos:line="119" pos:column="41"/></operator> <name><name pos:line="119" pos:column="34">st<pos:position pos:line="119" pos:column="36"/></name><operator pos:line="119" pos:column="36">.<pos:position pos:line="119" pos:column="37"/></operator><name pos:line="119" pos:column="37">st_size<pos:position pos:line="119" pos:column="44"/></name></name> <operator pos:line="119" pos:column="45">&gt;<pos:position pos:line="119" pos:column="49"/></operator> <literal type="number" pos:line="119" pos:column="47">0<pos:position pos:line="119" pos:column="48"/></literal></expr>)<pos:position pos:line="119" pos:column="49"/></condition><then pos:line="119" pos:column="49"> <block pos:line="119" pos:column="50">{
			<expr_stmt><expr><name pos:line="120" pos:column="25">mapbuf<pos:position pos:line="120" pos:column="31"/></name> <operator pos:line="120" pos:column="32">=<pos:position pos:line="120" pos:column="33"/></operator> <call><name pos:line="120" pos:column="34">map_file<pos:position pos:line="120" pos:column="42"/></name><argument_list pos:line="120" pos:column="42">(<argument><expr><name pos:line="120" pos:column="43">fd1<pos:position pos:line="120" pos:column="46"/></name></expr></argument>,<argument><expr><name><name pos:line="120" pos:column="47">st<pos:position pos:line="120" pos:column="49"/></name><operator pos:line="120" pos:column="49">.<pos:position pos:line="120" pos:column="50"/></operator><name pos:line="120" pos:column="50">st_size<pos:position pos:line="120" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="120" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="120" pos:column="59"/></expr_stmt>
			<if pos:line="121" pos:column="25">if <condition pos:line="121" pos:column="28">(<expr><name pos:line="121" pos:column="29">verbose<pos:position pos:line="121" pos:column="36"/></name> <operator pos:line="121" pos:column="37">&gt;<pos:position pos:line="121" pos:column="41"/></operator> <literal type="number" pos:line="121" pos:column="39">2<pos:position pos:line="121" pos:column="40"/></literal></expr>)<pos:position pos:line="121" pos:column="41"/></condition><then pos:line="121" pos:column="41">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="122" pos:column="33">rprintf<pos:position pos:line="122" pos:column="40"/></name><argument_list pos:line="122" pos:column="40">(<argument><expr><name pos:line="122" pos:column="41">FINFO<pos:position pos:line="122" pos:column="46"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="122" pos:column="47">"recv mapped %s of size %.0f\n"<pos:position pos:line="122" pos:column="78"/></literal></expr></argument>,<argument><expr><name pos:line="122" pos:column="79">fnamecmp<pos:position pos:line="122" pos:column="87"/></name></expr></argument>,<argument><expr><operator pos:line="122" pos:column="88">(<pos:position pos:line="122" pos:column="89"/></operator><name pos:line="122" pos:column="89">double<pos:position pos:line="122" pos:column="95"/></name><operator pos:line="122" pos:column="95">)<pos:position pos:line="122" pos:column="96"/></operator><name><name pos:line="122" pos:column="96">st<pos:position pos:line="122" pos:column="98"/></name><operator pos:line="122" pos:column="98">.<pos:position pos:line="122" pos:column="99"/></operator><name pos:line="122" pos:column="99">st_size<pos:position pos:line="122" pos:column="106"/></name></name></expr></argument>)<pos:position pos:line="122" pos:column="107"/></argument_list></call></expr>;<pos:position pos:line="122" pos:column="108"/></expr_stmt></block></then></if>
		}<pos:position pos:line="123" pos:column="18"/></block></then> <else pos:line="123" pos:column="19">else
			<block type="pseudo"><expr_stmt><expr><name pos:line="124" pos:column="25">mapbuf<pos:position pos:line="124" pos:column="31"/></name> <operator pos:line="124" pos:column="32">=<pos:position pos:line="124" pos:column="33"/></operator> <name pos:line="124" pos:column="34">NULL<pos:position pos:line="124" pos:column="38"/></name></expr>;<pos:position pos:line="124" pos:column="39"/></expr_stmt></block></else></if>

		<if pos:line="126" pos:column="17">if <condition pos:line="126" pos:column="20">(<expr><operator pos:line="126" pos:column="21">!<pos:position pos:line="126" pos:column="22"/></operator><call><name pos:line="126" pos:column="22">get_tmpname<pos:position pos:line="126" pos:column="33"/></name><argument_list pos:line="126" pos:column="33">(<argument><expr><name pos:line="126" pos:column="34">fnametmp<pos:position pos:line="126" pos:column="42"/></name></expr></argument>,<argument><expr><name pos:line="126" pos:column="43">fname<pos:position pos:line="126" pos:column="48"/></name></expr></argument>)<pos:position pos:line="126" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="126" pos:column="50"/></condition><then pos:line="126" pos:column="50"> <block pos:line="126" pos:column="51">{
			<if pos:line="127" pos:column="25">if <condition pos:line="127" pos:column="28">(<expr><name pos:line="127" pos:column="29">mapbuf<pos:position pos:line="127" pos:column="35"/></name></expr>)<pos:position pos:line="127" pos:column="36"/></condition><then pos:line="127" pos:column="36"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="127" pos:column="37">unmap_file<pos:position pos:line="127" pos:column="47"/></name><argument_list pos:line="127" pos:column="47">(<argument><expr><name pos:line="127" pos:column="48">mapbuf<pos:position pos:line="127" pos:column="54"/></name></expr></argument>)<pos:position pos:line="127" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="127" pos:column="56"/></expr_stmt></block></then></if>
			<if pos:line="128" pos:column="25">if <condition pos:line="128" pos:column="28">(<expr><name pos:line="128" pos:column="29">fd1<pos:position pos:line="128" pos:column="32"/></name> <operator pos:line="128" pos:column="33">!=<pos:position pos:line="128" pos:column="35"/></operator> <operator pos:line="128" pos:column="36">-<pos:position pos:line="128" pos:column="37"/></operator><literal type="number" pos:line="128" pos:column="37">1<pos:position pos:line="128" pos:column="38"/></literal></expr>)<pos:position pos:line="128" pos:column="39"/></condition><then pos:line="128" pos:column="39"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="128" pos:column="40">close<pos:position pos:line="128" pos:column="45"/></name><argument_list pos:line="128" pos:column="45">(<argument><expr><name pos:line="128" pos:column="46">fd1<pos:position pos:line="128" pos:column="49"/></name></expr></argument>)<pos:position pos:line="128" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="128" pos:column="51"/></expr_stmt></block></then></if>
			<continue pos:line="129" pos:column="25">continue;<pos:position pos:line="129" pos:column="34"/></continue>
		}<pos:position pos:line="130" pos:column="18"/></block></then></if>

		<macro><name pos:line="132" pos:column="17">strlcpy<pos:position pos:line="132" pos:column="24"/></name><argument_list pos:line="132" pos:column="24">(<argument pos:line="132" pos:column="25">template<pos:position pos:line="132" pos:column="33"/></argument>, <argument pos:line="132" pos:column="35">fnametmp<pos:position pos:line="132" pos:column="43"/></argument>, <argument pos:line="132" pos:column="45">sizeof template<pos:position pos:line="132" pos:column="60"/></argument>)<pos:position pos:line="132" pos:column="61"/></argument_list></macro><empty_stmt pos:line="132" pos:column="61">;<pos:position pos:line="132" pos:column="62"/></empty_stmt>

		<comment type="block" pos:line="134" pos:column="17">/* we initially set the perms without the
		 * setuid/setgid bits to ensure that there is no race
		 * condition. They are then correctly updated after
		 * the lchown. Thanks to snabb@epipe.fi for pointing
		 * this out.  We also set it initially without group
		 * access because of a similar race condition. */</comment>
		<expr_stmt><expr><name pos:line="140" pos:column="17">fd2<pos:position pos:line="140" pos:column="20"/></name> <operator pos:line="140" pos:column="21">=<pos:position pos:line="140" pos:column="22"/></operator> <call><name pos:line="140" pos:column="23">do_mkstemp<pos:position pos:line="140" pos:column="33"/></name><argument_list pos:line="140" pos:column="33">(<argument><expr><name pos:line="140" pos:column="34">fnametmp<pos:position pos:line="140" pos:column="42"/></name></expr></argument>, <argument><expr><name><name pos:line="140" pos:column="44">file<pos:position pos:line="140" pos:column="48"/></name><operator pos:line="140" pos:column="48">-&gt;<pos:position pos:line="140" pos:column="53"/></operator><name pos:line="140" pos:column="50">mode<pos:position pos:line="140" pos:column="54"/></name></name> <operator pos:line="140" pos:column="55">&amp;<pos:position pos:line="140" pos:column="60"/></operator> <name pos:line="140" pos:column="57">INITACCESSPERMS<pos:position pos:line="140" pos:column="72"/></name></expr></argument>)<pos:position pos:line="140" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="140" pos:column="74"/></expr_stmt>

		<comment type="block" pos:line="142" pos:column="17">/* in most cases parent directories will already exist
		 * because their information should have been previously
		 * transferred, but that may not be the case with -R */</comment>
		<if pos:line="145" pos:column="17">if <condition pos:line="145" pos:column="20">(<expr><name pos:line="145" pos:column="21">fd2<pos:position pos:line="145" pos:column="24"/></name> <operator pos:line="145" pos:column="25">==<pos:position pos:line="145" pos:column="27"/></operator> <operator pos:line="145" pos:column="28">-<pos:position pos:line="145" pos:column="29"/></operator><literal type="number" pos:line="145" pos:column="29">1<pos:position pos:line="145" pos:column="30"/></literal> <operator pos:line="145" pos:column="31">&amp;&amp;<pos:position pos:line="145" pos:column="41"/></operator> <name pos:line="145" pos:column="34">relative_paths<pos:position pos:line="145" pos:column="48"/></name> <operator pos:line="145" pos:column="49">&amp;&amp;<pos:position pos:line="145" pos:column="59"/></operator> <name pos:line="145" pos:column="52">errno<pos:position pos:line="145" pos:column="57"/></name> <operator pos:line="145" pos:column="58">==<pos:position pos:line="145" pos:column="60"/></operator> <name pos:line="145" pos:column="61">ENOENT<pos:position pos:line="145" pos:column="67"/></name> <operator pos:line="145" pos:column="68">&amp;&amp;<pos:position pos:line="145" pos:column="78"/></operator>
		    <call><name pos:line="146" pos:column="21">create_directory_path<pos:position pos:line="146" pos:column="42"/></name><argument_list pos:line="146" pos:column="42">(<argument><expr><name pos:line="146" pos:column="43">fnametmp<pos:position pos:line="146" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="146" pos:column="53">orig_umask<pos:position pos:line="146" pos:column="63"/></name></expr></argument>)<pos:position pos:line="146" pos:column="64"/></argument_list></call> <operator pos:line="146" pos:column="65">==<pos:position pos:line="146" pos:column="67"/></operator> <literal type="number" pos:line="146" pos:column="68">0<pos:position pos:line="146" pos:column="69"/></literal></expr>)<pos:position pos:line="146" pos:column="70"/></condition><then pos:line="146" pos:column="70"> <block pos:line="146" pos:column="71">{
			<macro><name pos:line="147" pos:column="25">strlcpy<pos:position pos:line="147" pos:column="32"/></name><argument_list pos:line="147" pos:column="32">(<argument pos:line="147" pos:column="33">fnametmp<pos:position pos:line="147" pos:column="41"/></argument>, <argument pos:line="147" pos:column="43">template<pos:position pos:line="147" pos:column="51"/></argument>, <argument pos:line="147" pos:column="53">sizeof fnametmp<pos:position pos:line="147" pos:column="68"/></argument>)<pos:position pos:line="147" pos:column="69"/></argument_list></macro><empty_stmt pos:line="147" pos:column="69">;<pos:position pos:line="147" pos:column="70"/></empty_stmt>
			<expr_stmt><expr><name pos:line="148" pos:column="25">fd2<pos:position pos:line="148" pos:column="28"/></name> <operator pos:line="148" pos:column="29">=<pos:position pos:line="148" pos:column="30"/></operator> <call><name pos:line="148" pos:column="31">do_mkstemp<pos:position pos:line="148" pos:column="41"/></name><argument_list pos:line="148" pos:column="41">(<argument><expr><name pos:line="148" pos:column="42">fnametmp<pos:position pos:line="148" pos:column="50"/></name></expr></argument>, <argument><expr><name><name pos:line="148" pos:column="52">file<pos:position pos:line="148" pos:column="56"/></name><operator pos:line="148" pos:column="56">-&gt;<pos:position pos:line="148" pos:column="61"/></operator><name pos:line="148" pos:column="58">mode<pos:position pos:line="148" pos:column="62"/></name></name> <operator pos:line="148" pos:column="63">&amp;<pos:position pos:line="148" pos:column="68"/></operator> <name pos:line="148" pos:column="65">INITACCESSPERMS<pos:position pos:line="148" pos:column="80"/></name></expr></argument>)<pos:position pos:line="148" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="148" pos:column="82"/></expr_stmt>
		}<pos:position pos:line="149" pos:column="18"/></block></then></if>
		<if pos:line="150" pos:column="17">if <condition pos:line="150" pos:column="20">(<expr><name pos:line="150" pos:column="21">fd2<pos:position pos:line="150" pos:column="24"/></name> <operator pos:line="150" pos:column="25">==<pos:position pos:line="150" pos:column="27"/></operator> <operator pos:line="150" pos:column="28">-<pos:position pos:line="150" pos:column="29"/></operator><literal type="number" pos:line="150" pos:column="29">1<pos:position pos:line="150" pos:column="30"/></literal></expr>)<pos:position pos:line="150" pos:column="31"/></condition><then pos:line="150" pos:column="31"> <block pos:line="150" pos:column="32">{
			<expr_stmt><expr><call><name pos:line="151" pos:column="25">rprintf<pos:position pos:line="151" pos:column="32"/></name><argument_list pos:line="151" pos:column="32">(<argument><expr><name pos:line="151" pos:column="33">FERROR<pos:position pos:line="151" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="151" pos:column="41">"mkstemp %s failed: %s\n"<pos:position pos:line="151" pos:column="66"/></literal></expr></argument>,
				<argument><expr><call><name pos:line="152" pos:column="33">full_fname<pos:position pos:line="152" pos:column="43"/></name><argument_list pos:line="152" pos:column="43">(<argument><expr><name pos:line="152" pos:column="44">fnametmp<pos:position pos:line="152" pos:column="52"/></name></expr></argument>)<pos:position pos:line="152" pos:column="53"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="152" pos:column="55">strerror<pos:position pos:line="152" pos:column="63"/></name><argument_list pos:line="152" pos:column="63">(<argument><expr><name pos:line="152" pos:column="64">errno<pos:position pos:line="152" pos:column="69"/></name></expr></argument>)<pos:position pos:line="152" pos:column="70"/></argument_list></call></expr></argument>)<pos:position pos:line="152" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="152" pos:column="72"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="153" pos:column="25">receive_data<pos:position pos:line="153" pos:column="37"/></name><argument_list pos:line="153" pos:column="37">(<argument><expr><name pos:line="153" pos:column="38">f_in<pos:position pos:line="153" pos:column="42"/></name></expr></argument>,<argument><expr><name pos:line="153" pos:column="43">mapbuf<pos:position pos:line="153" pos:column="49"/></name></expr></argument>,<argument><expr><operator pos:line="153" pos:column="50">-<pos:position pos:line="153" pos:column="51"/></operator><literal type="number" pos:line="153" pos:column="51">1<pos:position pos:line="153" pos:column="52"/></literal></expr></argument>,<argument><expr><name pos:line="153" pos:column="53">NULL<pos:position pos:line="153" pos:column="57"/></name></expr></argument>,<argument><expr><name><name pos:line="153" pos:column="58">file<pos:position pos:line="153" pos:column="62"/></name><operator pos:line="153" pos:column="62">-&gt;<pos:position pos:line="153" pos:column="67"/></operator><name pos:line="153" pos:column="64">length<pos:position pos:line="153" pos:column="70"/></name></name></expr></argument>)<pos:position pos:line="153" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="153" pos:column="72"/></expr_stmt>
			<if pos:line="154" pos:column="25">if <condition pos:line="154" pos:column="28">(<expr><name pos:line="154" pos:column="29">mapbuf<pos:position pos:line="154" pos:column="35"/></name></expr>)<pos:position pos:line="154" pos:column="36"/></condition><then pos:line="154" pos:column="36"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="154" pos:column="37">unmap_file<pos:position pos:line="154" pos:column="47"/></name><argument_list pos:line="154" pos:column="47">(<argument><expr><name pos:line="154" pos:column="48">mapbuf<pos:position pos:line="154" pos:column="54"/></name></expr></argument>)<pos:position pos:line="154" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="154" pos:column="56"/></expr_stmt></block></then></if>
			<if pos:line="155" pos:column="25">if <condition pos:line="155" pos:column="28">(<expr><name pos:line="155" pos:column="29">fd1<pos:position pos:line="155" pos:column="32"/></name> <operator pos:line="155" pos:column="33">!=<pos:position pos:line="155" pos:column="35"/></operator> <operator pos:line="155" pos:column="36">-<pos:position pos:line="155" pos:column="37"/></operator><literal type="number" pos:line="155" pos:column="37">1<pos:position pos:line="155" pos:column="38"/></literal></expr>)<pos:position pos:line="155" pos:column="39"/></condition><then pos:line="155" pos:column="39"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="155" pos:column="40">close<pos:position pos:line="155" pos:column="45"/></name><argument_list pos:line="155" pos:column="45">(<argument><expr><name pos:line="155" pos:column="46">fd1<pos:position pos:line="155" pos:column="49"/></name></expr></argument>)<pos:position pos:line="155" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="155" pos:column="51"/></expr_stmt></block></then></if>
			<continue pos:line="156" pos:column="25">continue;<pos:position pos:line="156" pos:column="34"/></continue>
		}<pos:position pos:line="157" pos:column="18"/></block></then></if>

		<expr_stmt><expr><call><name pos:line="159" pos:column="17">cleanup_set<pos:position pos:line="159" pos:column="28"/></name><argument_list pos:line="159" pos:column="28">(<argument><expr><name pos:line="159" pos:column="29">fnametmp<pos:position pos:line="159" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="159" pos:column="39">fname<pos:position pos:line="159" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="159" pos:column="46">file<pos:position pos:line="159" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="159" pos:column="52">mapbuf<pos:position pos:line="159" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="159" pos:column="60">fd1<pos:position pos:line="159" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="159" pos:column="65">fd2<pos:position pos:line="159" pos:column="68"/></name></expr></argument>)<pos:position pos:line="159" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="159" pos:column="70"/></expr_stmt>

		<if pos:line="161" pos:column="17">if <condition pos:line="161" pos:column="20">(<expr><operator pos:line="161" pos:column="21">!<pos:position pos:line="161" pos:column="22"/></operator><name pos:line="161" pos:column="22">am_server<pos:position pos:line="161" pos:column="31"/></name> <operator pos:line="161" pos:column="32">&amp;&amp;<pos:position pos:line="161" pos:column="42"/></operator> <name pos:line="161" pos:column="35">verbose<pos:position pos:line="161" pos:column="42"/></name></expr>)<pos:position pos:line="161" pos:column="43"/></condition><then pos:line="161" pos:column="43"> <block pos:line="161" pos:column="44">{	<comment type="block" pos:line="161" pos:column="49">/* log transfer */</comment>
			<expr_stmt><expr><call><name pos:line="162" pos:column="25">rprintf<pos:position pos:line="162" pos:column="32"/></name><argument_list pos:line="162" pos:column="32">(<argument><expr><name pos:line="162" pos:column="33">FINFO<pos:position pos:line="162" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="162" pos:column="40">"%s\n"<pos:position pos:line="162" pos:column="46"/></literal></expr></argument>, <argument><expr><name pos:line="162" pos:column="48">fname<pos:position pos:line="162" pos:column="53"/></name></expr></argument>)<pos:position pos:line="162" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="162" pos:column="55"/></expr_stmt>
		}<pos:position pos:line="163" pos:column="18"/></block></then></if>

		<comment type="block" pos:line="165" pos:column="17">/* recv file data */</comment>
		<expr_stmt><expr><name pos:line="166" pos:column="17">recv_ok<pos:position pos:line="166" pos:column="24"/></name> <operator pos:line="166" pos:column="25">=<pos:position pos:line="166" pos:column="26"/></operator> <call><name pos:line="166" pos:column="27">receive_data<pos:position pos:line="166" pos:column="39"/></name><argument_list pos:line="166" pos:column="39">(<argument><expr><name pos:line="166" pos:column="40">f_in<pos:position pos:line="166" pos:column="44"/></name></expr></argument>,<argument><expr><name pos:line="166" pos:column="45">mapbuf<pos:position pos:line="166" pos:column="51"/></name></expr></argument>,<argument><expr><name pos:line="166" pos:column="52">fd2<pos:position pos:line="166" pos:column="55"/></name></expr></argument>,<argument><expr><name pos:line="166" pos:column="56">fname<pos:position pos:line="166" pos:column="61"/></name></expr></argument>,<argument><expr><name><name pos:line="166" pos:column="62">file<pos:position pos:line="166" pos:column="66"/></name><operator pos:line="166" pos:column="66">-&gt;<pos:position pos:line="166" pos:column="71"/></operator><name pos:line="166" pos:column="68">length<pos:position pos:line="166" pos:column="74"/></name></name></expr></argument>)<pos:position pos:line="166" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="166" pos:column="76"/></expr_stmt>

		<expr_stmt><expr><call><name pos:line="168" pos:column="17">log_recv<pos:position pos:line="168" pos:column="25"/></name><argument_list pos:line="168" pos:column="25">(<argument><expr><name pos:line="168" pos:column="26">file<pos:position pos:line="168" pos:column="30"/></name></expr></argument>, <argument><expr><operator pos:line="168" pos:column="32">&amp;<pos:position pos:line="168" pos:column="37"/></operator><name pos:line="168" pos:column="33">initial_stats<pos:position pos:line="168" pos:column="46"/></name></expr></argument>)<pos:position pos:line="168" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="168" pos:column="48"/></expr_stmt>

		<if pos:line="170" pos:column="17">if <condition pos:line="170" pos:column="20">(<expr><name pos:line="170" pos:column="21">mapbuf<pos:position pos:line="170" pos:column="27"/></name></expr>)<pos:position pos:line="170" pos:column="28"/></condition><then pos:line="170" pos:column="28"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="170" pos:column="29">unmap_file<pos:position pos:line="170" pos:column="39"/></name><argument_list pos:line="170" pos:column="39">(<argument><expr><name pos:line="170" pos:column="40">mapbuf<pos:position pos:line="170" pos:column="46"/></name></expr></argument>)<pos:position pos:line="170" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="170" pos:column="48"/></expr_stmt></block></then></if>
		<if pos:line="171" pos:column="17">if <condition pos:line="171" pos:column="20">(<expr><name pos:line="171" pos:column="21">fd1<pos:position pos:line="171" pos:column="24"/></name> <operator pos:line="171" pos:column="25">!=<pos:position pos:line="171" pos:column="27"/></operator> <operator pos:line="171" pos:column="28">-<pos:position pos:line="171" pos:column="29"/></operator><literal type="number" pos:line="171" pos:column="29">1<pos:position pos:line="171" pos:column="30"/></literal></expr>)<pos:position pos:line="171" pos:column="31"/></condition><then pos:line="171" pos:column="31"> <block pos:line="171" pos:column="32">{
			<expr_stmt><expr><call><name pos:line="172" pos:column="25">close<pos:position pos:line="172" pos:column="30"/></name><argument_list pos:line="172" pos:column="30">(<argument><expr><name pos:line="172" pos:column="31">fd1<pos:position pos:line="172" pos:column="34"/></name></expr></argument>)<pos:position pos:line="172" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="172" pos:column="36"/></expr_stmt>
		}<pos:position pos:line="173" pos:column="18"/></block></then></if>
		<if pos:line="174" pos:column="17">if <condition pos:line="174" pos:column="20">(<expr><call><name pos:line="174" pos:column="21">close<pos:position pos:line="174" pos:column="26"/></name><argument_list pos:line="174" pos:column="26">(<argument><expr><name pos:line="174" pos:column="27">fd2<pos:position pos:line="174" pos:column="30"/></name></expr></argument>)<pos:position pos:line="174" pos:column="31"/></argument_list></call> <operator pos:line="174" pos:column="32">&lt;<pos:position pos:line="174" pos:column="36"/></operator> <literal type="number" pos:line="174" pos:column="34">0<pos:position pos:line="174" pos:column="35"/></literal></expr>)<pos:position pos:line="174" pos:column="36"/></condition><then pos:line="174" pos:column="36"> <block pos:line="174" pos:column="37">{
			<expr_stmt><expr><call><name pos:line="175" pos:column="25">rprintf<pos:position pos:line="175" pos:column="32"/></name><argument_list pos:line="175" pos:column="32">(<argument><expr><name pos:line="175" pos:column="33">FERROR<pos:position pos:line="175" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="175" pos:column="41">"close failed on %s: %s\n"<pos:position pos:line="175" pos:column="67"/></literal></expr></argument>,
				<argument><expr><call><name pos:line="176" pos:column="33">full_fname<pos:position pos:line="176" pos:column="43"/></name><argument_list pos:line="176" pos:column="43">(<argument><expr><name pos:line="176" pos:column="44">fnametmp<pos:position pos:line="176" pos:column="52"/></name></expr></argument>)<pos:position pos:line="176" pos:column="53"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="176" pos:column="55">strerror<pos:position pos:line="176" pos:column="63"/></name><argument_list pos:line="176" pos:column="63">(<argument><expr><name pos:line="176" pos:column="64">errno<pos:position pos:line="176" pos:column="69"/></name></expr></argument>)<pos:position pos:line="176" pos:column="70"/></argument_list></call></expr></argument>)<pos:position pos:line="176" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="176" pos:column="72"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="177" pos:column="25">exit_cleanup<pos:position pos:line="177" pos:column="37"/></name><argument_list pos:line="177" pos:column="37">(<argument><expr><name pos:line="177" pos:column="38">RERR_FILEIO<pos:position pos:line="177" pos:column="49"/></name></expr></argument>)<pos:position pos:line="177" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="177" pos:column="51"/></expr_stmt>
		}<pos:position pos:line="178" pos:column="18"/></block></then></if>

		<if pos:line="180" pos:column="17">if <condition pos:line="180" pos:column="20">(<expr><name pos:line="180" pos:column="21">verbose<pos:position pos:line="180" pos:column="28"/></name> <operator pos:line="180" pos:column="29">&gt;<pos:position pos:line="180" pos:column="33"/></operator> <literal type="number" pos:line="180" pos:column="31">2<pos:position pos:line="180" pos:column="32"/></literal></expr>)<pos:position pos:line="180" pos:column="33"/></condition><then pos:line="180" pos:column="33">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="181" pos:column="25">rprintf<pos:position pos:line="181" pos:column="32"/></name><argument_list pos:line="181" pos:column="32">(<argument><expr><name pos:line="181" pos:column="33">FINFO<pos:position pos:line="181" pos:column="38"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="181" pos:column="39">"renaming %s to %s\n"<pos:position pos:line="181" pos:column="60"/></literal></expr></argument>,<argument><expr><name pos:line="181" pos:column="61">fnametmp<pos:position pos:line="181" pos:column="69"/></name></expr></argument>,<argument><expr><name pos:line="181" pos:column="70">fname<pos:position pos:line="181" pos:column="75"/></name></expr></argument>)<pos:position pos:line="181" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="181" pos:column="77"/></expr_stmt></block></then></if>

		<expr_stmt><expr><call><name pos:line="183" pos:column="17">finish_transfer<pos:position pos:line="183" pos:column="32"/></name><argument_list pos:line="183" pos:column="32">(<argument><expr><name pos:line="183" pos:column="33">fname<pos:position pos:line="183" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="183" pos:column="40">fnametmp<pos:position pos:line="183" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="183" pos:column="50">file<pos:position pos:line="183" pos:column="54"/></name></expr></argument>)<pos:position pos:line="183" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="183" pos:column="56"/></expr_stmt>

		<expr_stmt><expr><call><name pos:line="185" pos:column="17">cleanup_disable<pos:position pos:line="185" pos:column="32"/></name><argument_list pos:line="185" pos:column="32">()<pos:position pos:line="185" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="185" pos:column="35"/></expr_stmt>

		<if pos:line="187" pos:column="17">if <condition pos:line="187" pos:column="20">(<expr><operator pos:line="187" pos:column="21">!<pos:position pos:line="187" pos:column="22"/></operator><name pos:line="187" pos:column="22">recv_ok<pos:position pos:line="187" pos:column="29"/></name></expr>)<pos:position pos:line="187" pos:column="30"/></condition><then pos:line="187" pos:column="30"> <block pos:line="187" pos:column="31">{
			<if pos:line="188" pos:column="25">if <condition pos:line="188" pos:column="28">(<expr><name pos:line="188" pos:column="29">csum_length<pos:position pos:line="188" pos:column="40"/></name> <operator pos:line="188" pos:column="41">==<pos:position pos:line="188" pos:column="43"/></operator> <name pos:line="188" pos:column="44">SUM_LENGTH<pos:position pos:line="188" pos:column="54"/></name></expr>)<pos:position pos:line="188" pos:column="55"/></condition><then pos:line="188" pos:column="55"> <block pos:line="188" pos:column="56">{
				<expr_stmt><expr><call><name pos:line="189" pos:column="33">rprintf<pos:position pos:line="189" pos:column="40"/></name><argument_list pos:line="189" pos:column="40">(<argument><expr><name pos:line="189" pos:column="41">FERROR<pos:position pos:line="189" pos:column="47"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="189" pos:column="48">"ERROR: file corruption in %s. File changed during transfer?\n"<pos:position pos:line="189" pos:column="111"/></literal></expr></argument>,
					<argument><expr><call><name pos:line="190" pos:column="41">full_fname<pos:position pos:line="190" pos:column="51"/></name><argument_list pos:line="190" pos:column="51">(<argument><expr><name pos:line="190" pos:column="52">fname<pos:position pos:line="190" pos:column="57"/></name></expr></argument>)<pos:position pos:line="190" pos:column="58"/></argument_list></call></expr></argument>)<pos:position pos:line="190" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="190" pos:column="60"/></expr_stmt>
			}<pos:position pos:line="191" pos:column="26"/></block></then> <else pos:line="191" pos:column="27">else <block pos:line="191" pos:column="32">{
				<decl_stmt><decl><type><name pos:line="192" pos:column="33">char<pos:position pos:line="192" pos:column="37"/></name></type> <name><name pos:line="192" pos:column="38">buf<pos:position pos:line="192" pos:column="41"/></name><index pos:line="192" pos:column="41">[<expr><literal type="number" pos:line="192" pos:column="42">4<pos:position pos:line="192" pos:column="43"/></literal></expr>]<pos:position pos:line="192" pos:column="44"/></index></name></decl>;<pos:position pos:line="192" pos:column="45"/></decl_stmt>
				<if pos:line="193" pos:column="33">if <condition pos:line="193" pos:column="36">(<expr><name pos:line="193" pos:column="37">verbose<pos:position pos:line="193" pos:column="44"/></name> <operator pos:line="193" pos:column="45">&gt;<pos:position pos:line="193" pos:column="49"/></operator> <literal type="number" pos:line="193" pos:column="47">1<pos:position pos:line="193" pos:column="48"/></literal></expr>)<pos:position pos:line="193" pos:column="49"/></condition><then pos:line="193" pos:column="49">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="194" pos:column="41">rprintf<pos:position pos:line="194" pos:column="48"/></name><argument_list pos:line="194" pos:column="48">(<argument><expr><name pos:line="194" pos:column="49">FINFO<pos:position pos:line="194" pos:column="54"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="194" pos:column="55">"redoing %s(%d)\n"<pos:position pos:line="194" pos:column="73"/></literal></expr></argument>,<argument><expr><name pos:line="194" pos:column="74">fname<pos:position pos:line="194" pos:column="79"/></name></expr></argument>,<argument><expr><name pos:line="194" pos:column="80">i<pos:position pos:line="194" pos:column="81"/></name></expr></argument>)<pos:position pos:line="194" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="194" pos:column="83"/></expr_stmt></block></then></if>
				<expr_stmt><expr><call><name pos:line="195" pos:column="33">SIVAL<pos:position pos:line="195" pos:column="38"/></name><argument_list pos:line="195" pos:column="38">(<argument><expr><name pos:line="195" pos:column="39">buf<pos:position pos:line="195" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="195" pos:column="44">0<pos:position pos:line="195" pos:column="45"/></literal></expr></argument>, <argument><expr><name pos:line="195" pos:column="47">i<pos:position pos:line="195" pos:column="48"/></name></expr></argument>)<pos:position pos:line="195" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="195" pos:column="50"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="196" pos:column="33">send_msg<pos:position pos:line="196" pos:column="41"/></name><argument_list pos:line="196" pos:column="41">(<argument><expr><name pos:line="196" pos:column="42">MSG_REDO<pos:position pos:line="196" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="196" pos:column="52">buf<pos:position pos:line="196" pos:column="55"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="196" pos:column="57">4<pos:position pos:line="196" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="196" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="196" pos:column="60"/></expr_stmt>
			}<pos:position pos:line="197" pos:column="26"/></block></else></if>
		}<pos:position pos:line="198" pos:column="18"/></block></then></if>
	}<pos:position pos:line="199" pos:column="10"/></block></while>

	<if pos:line="201" pos:column="9">if <condition pos:line="201" pos:column="12">(<expr><name pos:line="201" pos:column="13">delete_after<pos:position pos:line="201" pos:column="25"/></name> <operator pos:line="201" pos:column="26">&amp;&amp;<pos:position pos:line="201" pos:column="36"/></operator> <name pos:line="201" pos:column="29">recurse<pos:position pos:line="201" pos:column="36"/></name> <operator pos:line="201" pos:column="37">&amp;&amp;<pos:position pos:line="201" pos:column="47"/></operator> <name pos:line="201" pos:column="40">delete_mode<pos:position pos:line="201" pos:column="51"/></name> <operator pos:line="201" pos:column="52">&amp;&amp;<pos:position pos:line="201" pos:column="62"/></operator> <operator pos:line="201" pos:column="55">!<pos:position pos:line="201" pos:column="56"/></operator><name pos:line="201" pos:column="56">local_name<pos:position pos:line="201" pos:column="66"/></name>
	    <operator pos:line="202" pos:column="13">&amp;&amp;<pos:position pos:line="202" pos:column="23"/></operator> <name><name pos:line="202" pos:column="16">flist<pos:position pos:line="202" pos:column="21"/></name><operator pos:line="202" pos:column="21">-&gt;<pos:position pos:line="202" pos:column="26"/></operator><name pos:line="202" pos:column="23">count<pos:position pos:line="202" pos:column="28"/></name></name> <operator pos:line="202" pos:column="29">&gt;<pos:position pos:line="202" pos:column="33"/></operator> <literal type="number" pos:line="202" pos:column="31">0<pos:position pos:line="202" pos:column="32"/></literal></expr>)<pos:position pos:line="202" pos:column="33"/></condition><then pos:line="202" pos:column="33">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="203" pos:column="17">delete_files<pos:position pos:line="203" pos:column="29"/></name><argument_list pos:line="203" pos:column="29">(<argument><expr><name pos:line="203" pos:column="30">flist<pos:position pos:line="203" pos:column="35"/></name></expr></argument>)<pos:position pos:line="203" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="203" pos:column="37"/></expr_stmt></block></then></if>

	<if pos:line="205" pos:column="9">if <condition pos:line="205" pos:column="12">(<expr><name pos:line="205" pos:column="13">verbose<pos:position pos:line="205" pos:column="20"/></name> <operator pos:line="205" pos:column="21">&gt;<pos:position pos:line="205" pos:column="25"/></operator> <literal type="number" pos:line="205" pos:column="23">2<pos:position pos:line="205" pos:column="24"/></literal></expr>)<pos:position pos:line="205" pos:column="25"/></condition><then pos:line="205" pos:column="25">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="206" pos:column="17">rprintf<pos:position pos:line="206" pos:column="24"/></name><argument_list pos:line="206" pos:column="24">(<argument><expr><name pos:line="206" pos:column="25">FINFO<pos:position pos:line="206" pos:column="30"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="206" pos:column="31">"recv_files finished\n"<pos:position pos:line="206" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="206" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="206" pos:column="56"/></expr_stmt></block></then></if>

	<return pos:line="208" pos:column="9">return <expr><literal type="number" pos:line="208" pos:column="16">0<pos:position pos:line="208" pos:column="17"/></literal></expr>;<pos:position pos:line="208" pos:column="18"/></return>
}<pos:position pos:line="209" pos:column="2"/></block></function></unit>
