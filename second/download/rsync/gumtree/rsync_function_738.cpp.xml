<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_function_738.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">write_file<pos:position pos:line="1" pos:column="15"/></name><parameter_list pos:line="1" pos:column="15">(<parameter><decl><type><name pos:line="1" pos:column="16">int<pos:position pos:line="1" pos:column="19"/></name></type> <name pos:line="1" pos:column="20">f<pos:position pos:line="1" pos:column="21"/></name></decl></parameter>,<parameter><decl><type><name pos:line="1" pos:column="22">char<pos:position pos:line="1" pos:column="26"/></name> <modifier pos:line="1" pos:column="27">*<pos:position pos:line="1" pos:column="28"/></modifier></type><name pos:line="1" pos:column="28">buf<pos:position pos:line="1" pos:column="31"/></name></decl></parameter>,<parameter><decl><type><name pos:line="1" pos:column="32">size_t<pos:position pos:line="1" pos:column="38"/></name></type> <name pos:line="1" pos:column="39">len<pos:position pos:line="1" pos:column="42"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="43"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">ret<pos:position pos:line="3" pos:column="16"/></name> <init pos:line="3" pos:column="17">= <expr><literal type="number" pos:line="3" pos:column="19">0<pos:position pos:line="3" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="21"/></decl_stmt>

	<while pos:line="5" pos:column="9">while <condition pos:line="5" pos:column="15">(<expr><name pos:line="5" pos:column="16">len<pos:position pos:line="5" pos:column="19"/></name> <operator pos:line="5" pos:column="20">&gt;<pos:position pos:line="5" pos:column="24"/></operator> <literal type="number" pos:line="5" pos:column="22">0<pos:position pos:line="5" pos:column="23"/></literal></expr>)<pos:position pos:line="5" pos:column="24"/></condition> <block pos:line="5" pos:column="25">{
		<decl_stmt><decl><type><name pos:line="6" pos:column="17">int<pos:position pos:line="6" pos:column="20"/></name></type> <name pos:line="6" pos:column="21">r1<pos:position pos:line="6" pos:column="23"/></name></decl>;<pos:position pos:line="6" pos:column="24"/></decl_stmt>
		<if pos:line="7" pos:column="17">if <condition pos:line="7" pos:column="20">(<expr><name pos:line="7" pos:column="21">sparse_files<pos:position pos:line="7" pos:column="33"/></name></expr>)<pos:position pos:line="7" pos:column="34"/></condition><then pos:line="7" pos:column="34"> <block pos:line="7" pos:column="35">{
			<decl_stmt><decl><type><name pos:line="8" pos:column="25">int<pos:position pos:line="8" pos:column="28"/></name></type> <name pos:line="8" pos:column="29">len1<pos:position pos:line="8" pos:column="33"/></name> <init pos:line="8" pos:column="34">= <expr><call><name pos:line="8" pos:column="36">MIN<pos:position pos:line="8" pos:column="39"/></name><argument_list pos:line="8" pos:column="39">(<argument><expr><name pos:line="8" pos:column="40">len<pos:position pos:line="8" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="45">SPARSE_WRITE_SIZE<pos:position pos:line="8" pos:column="62"/></name></expr></argument>)<pos:position pos:line="8" pos:column="63"/></argument_list></call></expr></init></decl>;<pos:position pos:line="8" pos:column="64"/></decl_stmt>
			<expr_stmt><expr><name pos:line="9" pos:column="25">r1<pos:position pos:line="9" pos:column="27"/></name> <operator pos:line="9" pos:column="28">=<pos:position pos:line="9" pos:column="29"/></operator> <call><name pos:line="9" pos:column="30">write_sparse<pos:position pos:line="9" pos:column="42"/></name><argument_list pos:line="9" pos:column="42">(<argument><expr><name pos:line="9" pos:column="43">f<pos:position pos:line="9" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="46">buf<pos:position pos:line="9" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="51">len1<pos:position pos:line="9" pos:column="55"/></name></expr></argument>)<pos:position pos:line="9" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="57"/></expr_stmt>
		}<pos:position pos:line="10" pos:column="18"/></block></then> <else pos:line="10" pos:column="19">else <block pos:line="10" pos:column="24">{
			<if pos:line="11" pos:column="25">if <condition pos:line="11" pos:column="28">(<expr><operator pos:line="11" pos:column="29">!<pos:position pos:line="11" pos:column="30"/></operator><name pos:line="11" pos:column="30">wf_writeBuf<pos:position pos:line="11" pos:column="41"/></name></expr>)<pos:position pos:line="11" pos:column="42"/></condition><then pos:line="11" pos:column="42"> <block pos:line="11" pos:column="43">{
				<expr_stmt><expr><name pos:line="12" pos:column="33">wf_writeBufSize<pos:position pos:line="12" pos:column="48"/></name> <operator pos:line="12" pos:column="49">=<pos:position pos:line="12" pos:column="50"/></operator> <name pos:line="12" pos:column="51">MAX_MAP_SIZE<pos:position pos:line="12" pos:column="63"/></name></expr>;<pos:position pos:line="12" pos:column="64"/></expr_stmt>
				<expr_stmt><expr><name pos:line="13" pos:column="33">wf_writeBufCnt<pos:position pos:line="13" pos:column="47"/></name>  <operator pos:line="13" pos:column="49">=<pos:position pos:line="13" pos:column="50"/></operator> <literal type="number" pos:line="13" pos:column="51">0<pos:position pos:line="13" pos:column="52"/></literal></expr>;<pos:position pos:line="13" pos:column="53"/></expr_stmt>
				<expr_stmt><expr><name pos:line="14" pos:column="33">wf_writeBuf<pos:position pos:line="14" pos:column="44"/></name> <operator pos:line="14" pos:column="45">=<pos:position pos:line="14" pos:column="46"/></operator> <call><name pos:line="14" pos:column="47">new_array<pos:position pos:line="14" pos:column="56"/></name><argument_list pos:line="14" pos:column="56">(<argument><expr><name pos:line="14" pos:column="57">char<pos:position pos:line="14" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="63">MAX_MAP_SIZE<pos:position pos:line="14" pos:column="75"/></name></expr></argument>)<pos:position pos:line="14" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="77"/></expr_stmt>
				<if pos:line="15" pos:column="33">if <condition pos:line="15" pos:column="36">(<expr><operator pos:line="15" pos:column="37">!<pos:position pos:line="15" pos:column="38"/></operator><name pos:line="15" pos:column="38">wf_writeBuf<pos:position pos:line="15" pos:column="49"/></name></expr>)<pos:position pos:line="15" pos:column="50"/></condition><then pos:line="15" pos:column="50">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="16" pos:column="41">out_of_memory<pos:position pos:line="16" pos:column="54"/></name><argument_list pos:line="16" pos:column="54">(<argument><expr><literal type="string" pos:line="16" pos:column="55">"write_file"<pos:position pos:line="16" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="69"/></expr_stmt></block></then></if>
			}<pos:position pos:line="17" pos:column="26"/></block></then></if>
			<expr_stmt><expr><name pos:line="18" pos:column="25">r1<pos:position pos:line="18" pos:column="27"/></name> <operator pos:line="18" pos:column="28">=<pos:position pos:line="18" pos:column="29"/></operator> <call><name pos:line="18" pos:column="30">MIN<pos:position pos:line="18" pos:column="33"/></name><argument_list pos:line="18" pos:column="33">(<argument><expr><name pos:line="18" pos:column="34">len<pos:position pos:line="18" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="39">wf_writeBufSize<pos:position pos:line="18" pos:column="54"/></name> <operator pos:line="18" pos:column="55">-<pos:position pos:line="18" pos:column="56"/></operator> <name pos:line="18" pos:column="57">wf_writeBufCnt<pos:position pos:line="18" pos:column="71"/></name></expr></argument>)<pos:position pos:line="18" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="73"/></expr_stmt>
			<if pos:line="19" pos:column="25">if <condition pos:line="19" pos:column="28">(<expr><name pos:line="19" pos:column="29">r1<pos:position pos:line="19" pos:column="31"/></name></expr>)<pos:position pos:line="19" pos:column="32"/></condition><then pos:line="19" pos:column="32"> <block pos:line="19" pos:column="33">{
				<expr_stmt><expr><call><name pos:line="20" pos:column="33">memcpy<pos:position pos:line="20" pos:column="39"/></name><argument_list pos:line="20" pos:column="39">(<argument><expr><name pos:line="20" pos:column="40">wf_writeBuf<pos:position pos:line="20" pos:column="51"/></name> <operator pos:line="20" pos:column="52">+<pos:position pos:line="20" pos:column="53"/></operator> <name pos:line="20" pos:column="54">wf_writeBufCnt<pos:position pos:line="20" pos:column="68"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="70">buf<pos:position pos:line="20" pos:column="73"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="75">r1<pos:position pos:line="20" pos:column="77"/></name></expr></argument>)<pos:position pos:line="20" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="79"/></expr_stmt>
				<expr_stmt><expr><name pos:line="21" pos:column="33">wf_writeBufCnt<pos:position pos:line="21" pos:column="47"/></name> <operator pos:line="21" pos:column="48">+=<pos:position pos:line="21" pos:column="50"/></operator> <name pos:line="21" pos:column="51">r1<pos:position pos:line="21" pos:column="53"/></name></expr>;<pos:position pos:line="21" pos:column="54"/></expr_stmt>
			}<pos:position pos:line="22" pos:column="26"/></block></then></if>
			<if pos:line="23" pos:column="25">if <condition pos:line="23" pos:column="28">(<expr><name pos:line="23" pos:column="29">wf_writeBufCnt<pos:position pos:line="23" pos:column="43"/></name> <operator pos:line="23" pos:column="44">==<pos:position pos:line="23" pos:column="46"/></operator> <name pos:line="23" pos:column="47">wf_writeBufSize<pos:position pos:line="23" pos:column="62"/></name></expr>)<pos:position pos:line="23" pos:column="63"/></condition><then pos:line="23" pos:column="63"> <block pos:line="23" pos:column="64">{
				<if pos:line="24" pos:column="33">if <condition pos:line="24" pos:column="36">(<expr><call><name pos:line="24" pos:column="37">flush_write_file<pos:position pos:line="24" pos:column="53"/></name><argument_list pos:line="24" pos:column="53">(<argument><expr><name pos:line="24" pos:column="54">f<pos:position pos:line="24" pos:column="55"/></name></expr></argument>)<pos:position pos:line="24" pos:column="56"/></argument_list></call> <operator pos:line="24" pos:column="57">&lt;<pos:position pos:line="24" pos:column="61"/></operator> <literal type="number" pos:line="24" pos:column="59">0<pos:position pos:line="24" pos:column="60"/></literal></expr>)<pos:position pos:line="24" pos:column="61"/></condition><then pos:line="24" pos:column="61">
					<block type="pseudo"><return pos:line="25" pos:column="41">return <expr><operator pos:line="25" pos:column="48">-<pos:position pos:line="25" pos:column="49"/></operator><literal type="number" pos:line="25" pos:column="49">1<pos:position pos:line="25" pos:column="50"/></literal></expr>;<pos:position pos:line="25" pos:column="51"/></return></block></then></if>
				<if pos:line="26" pos:column="33">if <condition pos:line="26" pos:column="36">(<expr><operator pos:line="26" pos:column="37">!<pos:position pos:line="26" pos:column="38"/></operator><name pos:line="26" pos:column="38">r1<pos:position pos:line="26" pos:column="40"/></name> <operator pos:line="26" pos:column="41">&amp;&amp;<pos:position pos:line="26" pos:column="51"/></operator> <name pos:line="26" pos:column="44">len<pos:position pos:line="26" pos:column="47"/></name></expr>)<pos:position pos:line="26" pos:column="48"/></condition><then pos:line="26" pos:column="48">
					<block type="pseudo"><continue pos:line="27" pos:column="41">continue;<pos:position pos:line="27" pos:column="50"/></continue></block></then></if>
			}<pos:position pos:line="28" pos:column="26"/></block></then></if>
		}<pos:position pos:line="29" pos:column="18"/></block></else></if>
		<if pos:line="30" pos:column="17">if <condition pos:line="30" pos:column="20">(<expr><name pos:line="30" pos:column="21">r1<pos:position pos:line="30" pos:column="23"/></name> <operator pos:line="30" pos:column="24">&lt;=<pos:position pos:line="30" pos:column="29"/></operator> <literal type="number" pos:line="30" pos:column="27">0<pos:position pos:line="30" pos:column="28"/></literal></expr>)<pos:position pos:line="30" pos:column="29"/></condition><then pos:line="30" pos:column="29"> <block pos:line="30" pos:column="30">{
			<if pos:line="31" pos:column="25">if <condition pos:line="31" pos:column="28">(<expr><name pos:line="31" pos:column="29">ret<pos:position pos:line="31" pos:column="32"/></name> <operator pos:line="31" pos:column="33">&gt;<pos:position pos:line="31" pos:column="37"/></operator> <literal type="number" pos:line="31" pos:column="35">0<pos:position pos:line="31" pos:column="36"/></literal></expr>)<pos:position pos:line="31" pos:column="37"/></condition><then pos:line="31" pos:column="37"> <block type="pseudo"><return pos:line="31" pos:column="38">return <expr><name pos:line="31" pos:column="45">ret<pos:position pos:line="31" pos:column="48"/></name></expr>;<pos:position pos:line="31" pos:column="49"/></return></block></then></if>
			<return pos:line="32" pos:column="25">return <expr><name pos:line="32" pos:column="32">r1<pos:position pos:line="32" pos:column="34"/></name></expr>;<pos:position pos:line="32" pos:column="35"/></return>
		}<pos:position pos:line="33" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name pos:line="34" pos:column="17">len<pos:position pos:line="34" pos:column="20"/></name> <operator pos:line="34" pos:column="21">-=<pos:position pos:line="34" pos:column="23"/></operator> <name pos:line="34" pos:column="24">r1<pos:position pos:line="34" pos:column="26"/></name></expr>;<pos:position pos:line="34" pos:column="27"/></expr_stmt>
		<expr_stmt><expr><name pos:line="35" pos:column="17">buf<pos:position pos:line="35" pos:column="20"/></name> <operator pos:line="35" pos:column="21">+=<pos:position pos:line="35" pos:column="23"/></operator> <name pos:line="35" pos:column="24">r1<pos:position pos:line="35" pos:column="26"/></name></expr>;<pos:position pos:line="35" pos:column="27"/></expr_stmt>
		<expr_stmt><expr><name pos:line="36" pos:column="17">ret<pos:position pos:line="36" pos:column="20"/></name> <operator pos:line="36" pos:column="21">+=<pos:position pos:line="36" pos:column="23"/></operator> <name pos:line="36" pos:column="24">r1<pos:position pos:line="36" pos:column="26"/></name></expr>;<pos:position pos:line="36" pos:column="27"/></expr_stmt>
	}<pos:position pos:line="37" pos:column="10"/></block></while>
	<return pos:line="38" pos:column="9">return <expr><name pos:line="38" pos:column="16">ret<pos:position pos:line="38" pos:column="19"/></name></expr>;<pos:position pos:line="38" pos:column="20"/></return>
}<pos:position pos:line="39" pos:column="2"/></block></function></unit>
