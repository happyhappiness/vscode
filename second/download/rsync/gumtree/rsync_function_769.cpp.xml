<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_function_769.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">read_unbuffered<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name pos:line="1" pos:column="28">int<pos:position pos:line="1" pos:column="31"/></name></type> <name pos:line="1" pos:column="32">fd<pos:position pos:line="1" pos:column="34"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="36">char<pos:position pos:line="1" pos:column="40"/></name> <modifier pos:line="1" pos:column="41">*<pos:position pos:line="1" pos:column="42"/></modifier></type><name pos:line="1" pos:column="42">buf<pos:position pos:line="1" pos:column="45"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="47">size_t<pos:position pos:line="1" pos:column="53"/></name></type> <name pos:line="1" pos:column="54">len<pos:position pos:line="1" pos:column="57"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="58"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><specifier pos:line="3" pos:column="9">static<pos:position pos:line="3" pos:column="15"/></specifier> <type><name pos:line="3" pos:column="16">size_t<pos:position pos:line="3" pos:column="22"/></name></type> <name pos:line="3" pos:column="23">remaining<pos:position pos:line="3" pos:column="32"/></name></decl>;<pos:position pos:line="3" pos:column="33"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">tag<pos:position pos:line="4" pos:column="16"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="18">ret<pos:position pos:line="4" pos:column="21"/></name> <init pos:line="4" pos:column="22">= <expr><literal type="number" pos:line="4" pos:column="24">0<pos:position pos:line="4" pos:column="25"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="26"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">char<pos:position pos:line="5" pos:column="13"/></name></type> <name><name pos:line="5" pos:column="14">line<pos:position pos:line="5" pos:column="18"/></name><index pos:line="5" pos:column="18">[<expr><literal type="number" pos:line="5" pos:column="19">1024<pos:position pos:line="5" pos:column="23"/></literal></expr>]<pos:position pos:line="5" pos:column="24"/></index></name></decl>;<pos:position pos:line="5" pos:column="25"/></decl_stmt>
	<decl_stmt><decl><specifier pos:line="6" pos:column="9">static<pos:position pos:line="6" pos:column="15"/></specifier> <type><name pos:line="6" pos:column="16">char<pos:position pos:line="6" pos:column="20"/></name> <modifier pos:line="6" pos:column="21">*<pos:position pos:line="6" pos:column="22"/></modifier></type><name pos:line="6" pos:column="22">buffer<pos:position pos:line="6" pos:column="28"/></name></decl>;<pos:position pos:line="6" pos:column="29"/></decl_stmt>
	<decl_stmt><decl><specifier pos:line="7" pos:column="9">static<pos:position pos:line="7" pos:column="15"/></specifier> <type><name pos:line="7" pos:column="16">size_t<pos:position pos:line="7" pos:column="22"/></name></type> <name pos:line="7" pos:column="23">bufferIdx<pos:position pos:line="7" pos:column="32"/></name> <init pos:line="7" pos:column="33">= <expr><literal type="number" pos:line="7" pos:column="35">0<pos:position pos:line="7" pos:column="36"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="37"/></decl_stmt>
	<decl_stmt><decl><specifier pos:line="8" pos:column="9">static<pos:position pos:line="8" pos:column="15"/></specifier> <type><name pos:line="8" pos:column="16">size_t<pos:position pos:line="8" pos:column="22"/></name></type> <name pos:line="8" pos:column="23">bufferSz<pos:position pos:line="8" pos:column="31"/></name></decl>;<pos:position pos:line="8" pos:column="32"/></decl_stmt>

	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><name pos:line="10" pos:column="13">fd<pos:position pos:line="10" pos:column="15"/></name> <operator pos:line="10" pos:column="16">!=<pos:position pos:line="10" pos:column="18"/></operator> <name pos:line="10" pos:column="19">multiplex_in_fd<pos:position pos:line="10" pos:column="34"/></name></expr>)<pos:position pos:line="10" pos:column="35"/></condition><then pos:line="10" pos:column="35">
		<block type="pseudo"><return pos:line="11" pos:column="17">return <expr><call><name pos:line="11" pos:column="24">read_timeout<pos:position pos:line="11" pos:column="36"/></name><argument_list pos:line="11" pos:column="36">(<argument><expr><name pos:line="11" pos:column="37">fd<pos:position pos:line="11" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="41">buf<pos:position pos:line="11" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="46">len<pos:position pos:line="11" pos:column="49"/></name></expr></argument>)<pos:position pos:line="11" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="51"/></return></block></then></if>

	<if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><operator pos:line="13" pos:column="13">!<pos:position pos:line="13" pos:column="14"/></operator><name pos:line="13" pos:column="14">io_multiplexing_in<pos:position pos:line="13" pos:column="32"/></name> <operator pos:line="13" pos:column="33">&amp;&amp;<pos:position pos:line="13" pos:column="43"/></operator> <name pos:line="13" pos:column="36">remaining<pos:position pos:line="13" pos:column="45"/></name> <operator pos:line="13" pos:column="46">==<pos:position pos:line="13" pos:column="48"/></operator> <literal type="number" pos:line="13" pos:column="49">0<pos:position pos:line="13" pos:column="50"/></literal></expr>)<pos:position pos:line="13" pos:column="51"/></condition><then pos:line="13" pos:column="51"> <block pos:line="13" pos:column="52">{
		<if pos:line="14" pos:column="17">if <condition pos:line="14" pos:column="20">(<expr><operator pos:line="14" pos:column="21">!<pos:position pos:line="14" pos:column="22"/></operator><name pos:line="14" pos:column="22">buffer<pos:position pos:line="14" pos:column="28"/></name></expr>)<pos:position pos:line="14" pos:column="29"/></condition><then pos:line="14" pos:column="29"> <block pos:line="14" pos:column="30">{
			<expr_stmt><expr><name pos:line="15" pos:column="25">bufferSz<pos:position pos:line="15" pos:column="33"/></name> <operator pos:line="15" pos:column="34">=<pos:position pos:line="15" pos:column="35"/></operator> <literal type="number" pos:line="15" pos:column="36">2<pos:position pos:line="15" pos:column="37"/></literal> <operator pos:line="15" pos:column="38">*<pos:position pos:line="15" pos:column="39"/></operator> <name pos:line="15" pos:column="40">IO_BUFFER_SIZE<pos:position pos:line="15" pos:column="54"/></name></expr>;<pos:position pos:line="15" pos:column="55"/></expr_stmt>
			<expr_stmt><expr><name pos:line="16" pos:column="25">buffer<pos:position pos:line="16" pos:column="31"/></name>   <operator pos:line="16" pos:column="34">=<pos:position pos:line="16" pos:column="35"/></operator> <call><name pos:line="16" pos:column="36">new_array<pos:position pos:line="16" pos:column="45"/></name><argument_list pos:line="16" pos:column="45">(<argument><expr><name pos:line="16" pos:column="46">char<pos:position pos:line="16" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="52">bufferSz<pos:position pos:line="16" pos:column="60"/></name></expr></argument>)<pos:position pos:line="16" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="62"/></expr_stmt>
			<if pos:line="17" pos:column="25">if <condition pos:line="17" pos:column="28">(<expr><operator pos:line="17" pos:column="29">!<pos:position pos:line="17" pos:column="30"/></operator><name pos:line="17" pos:column="30">buffer<pos:position pos:line="17" pos:column="36"/></name></expr>)<pos:position pos:line="17" pos:column="37"/></condition><then pos:line="17" pos:column="37"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="17" pos:column="38">out_of_memory<pos:position pos:line="17" pos:column="51"/></name><argument_list pos:line="17" pos:column="51">(<argument><expr><literal type="string" pos:line="17" pos:column="52">"read_unbuffered"<pos:position pos:line="17" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="71"/></expr_stmt></block></then></if>
		}<pos:position pos:line="18" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name pos:line="19" pos:column="17">remaining<pos:position pos:line="19" pos:column="26"/></name> <operator pos:line="19" pos:column="27">=<pos:position pos:line="19" pos:column="28"/></operator> <call><name pos:line="19" pos:column="29">read_timeout<pos:position pos:line="19" pos:column="41"/></name><argument_list pos:line="19" pos:column="41">(<argument><expr><name pos:line="19" pos:column="42">fd<pos:position pos:line="19" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="46">buffer<pos:position pos:line="19" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="54">bufferSz<pos:position pos:line="19" pos:column="62"/></name></expr></argument>)<pos:position pos:line="19" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="64"/></expr_stmt>
		<expr_stmt><expr><name pos:line="20" pos:column="17">bufferIdx<pos:position pos:line="20" pos:column="26"/></name> <operator pos:line="20" pos:column="27">=<pos:position pos:line="20" pos:column="28"/></operator> <literal type="number" pos:line="20" pos:column="29">0<pos:position pos:line="20" pos:column="30"/></literal></expr>;<pos:position pos:line="20" pos:column="31"/></expr_stmt>
	}<pos:position pos:line="21" pos:column="10"/></block></then></if>

	<while pos:line="23" pos:column="9">while <condition pos:line="23" pos:column="15">(<expr><name pos:line="23" pos:column="16">ret<pos:position pos:line="23" pos:column="19"/></name> <operator pos:line="23" pos:column="20">==<pos:position pos:line="23" pos:column="22"/></operator> <literal type="number" pos:line="23" pos:column="23">0<pos:position pos:line="23" pos:column="24"/></literal></expr>)<pos:position pos:line="23" pos:column="25"/></condition> <block pos:line="23" pos:column="26">{
		<if pos:line="24" pos:column="17">if <condition pos:line="24" pos:column="20">(<expr><name pos:line="24" pos:column="21">remaining<pos:position pos:line="24" pos:column="30"/></name></expr>)<pos:position pos:line="24" pos:column="31"/></condition><then pos:line="24" pos:column="31"> <block pos:line="24" pos:column="32">{
			<expr_stmt><expr><name pos:line="25" pos:column="25">len<pos:position pos:line="25" pos:column="28"/></name> <operator pos:line="25" pos:column="29">=<pos:position pos:line="25" pos:column="30"/></operator> <call><name pos:line="25" pos:column="31">MIN<pos:position pos:line="25" pos:column="34"/></name><argument_list pos:line="25" pos:column="34">(<argument><expr><name pos:line="25" pos:column="35">len<pos:position pos:line="25" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="40">remaining<pos:position pos:line="25" pos:column="49"/></name></expr></argument>)<pos:position pos:line="25" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="51"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="26" pos:column="25">memcpy<pos:position pos:line="26" pos:column="31"/></name><argument_list pos:line="26" pos:column="31">(<argument><expr><name pos:line="26" pos:column="32">buf<pos:position pos:line="26" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="37">buffer<pos:position pos:line="26" pos:column="43"/></name> <operator pos:line="26" pos:column="44">+<pos:position pos:line="26" pos:column="45"/></operator> <name pos:line="26" pos:column="46">bufferIdx<pos:position pos:line="26" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="57">len<pos:position pos:line="26" pos:column="60"/></name></expr></argument>)<pos:position pos:line="26" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="62"/></expr_stmt>
			<expr_stmt><expr><name pos:line="27" pos:column="25">bufferIdx<pos:position pos:line="27" pos:column="34"/></name> <operator pos:line="27" pos:column="35">+=<pos:position pos:line="27" pos:column="37"/></operator> <name pos:line="27" pos:column="38">len<pos:position pos:line="27" pos:column="41"/></name></expr>;<pos:position pos:line="27" pos:column="42"/></expr_stmt>
			<expr_stmt><expr><name pos:line="28" pos:column="25">remaining<pos:position pos:line="28" pos:column="34"/></name> <operator pos:line="28" pos:column="35">-=<pos:position pos:line="28" pos:column="37"/></operator> <name pos:line="28" pos:column="38">len<pos:position pos:line="28" pos:column="41"/></name></expr>;<pos:position pos:line="28" pos:column="42"/></expr_stmt>
			<expr_stmt><expr><name pos:line="29" pos:column="25">ret<pos:position pos:line="29" pos:column="28"/></name> <operator pos:line="29" pos:column="29">=<pos:position pos:line="29" pos:column="30"/></operator> <name pos:line="29" pos:column="31">len<pos:position pos:line="29" pos:column="34"/></name></expr>;<pos:position pos:line="29" pos:column="35"/></expr_stmt>
			<break pos:line="30" pos:column="25">break;<pos:position pos:line="30" pos:column="31"/></break>
		}<pos:position pos:line="31" pos:column="18"/></block></then></if>

		<expr_stmt><expr><call><name pos:line="33" pos:column="17">read_loop<pos:position pos:line="33" pos:column="26"/></name><argument_list pos:line="33" pos:column="26">(<argument><expr><name pos:line="33" pos:column="27">fd<pos:position pos:line="33" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="31">line<pos:position pos:line="33" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="33" pos:column="37">4<pos:position pos:line="33" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="40"/></expr_stmt>
		<expr_stmt><expr><name pos:line="34" pos:column="17">tag<pos:position pos:line="34" pos:column="20"/></name> <operator pos:line="34" pos:column="21">=<pos:position pos:line="34" pos:column="22"/></operator> <call><name pos:line="34" pos:column="23">IVAL<pos:position pos:line="34" pos:column="27"/></name><argument_list pos:line="34" pos:column="27">(<argument><expr><name pos:line="34" pos:column="28">line<pos:position pos:line="34" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="34" pos:column="34">0<pos:position pos:line="34" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="37"/></expr_stmt>

		<expr_stmt><expr><name pos:line="36" pos:column="17">remaining<pos:position pos:line="36" pos:column="26"/></name> <operator pos:line="36" pos:column="27">=<pos:position pos:line="36" pos:column="28"/></operator> <name pos:line="36" pos:column="29">tag<pos:position pos:line="36" pos:column="32"/></name> <operator pos:line="36" pos:column="33">&amp;<pos:position pos:line="36" pos:column="38"/></operator> <literal type="number" pos:line="36" pos:column="35">0xFFFFFF<pos:position pos:line="36" pos:column="43"/></literal></expr>;<pos:position pos:line="36" pos:column="44"/></expr_stmt>
		<expr_stmt><expr><name pos:line="37" pos:column="17">tag<pos:position pos:line="37" pos:column="20"/></name> <operator pos:line="37" pos:column="21">=<pos:position pos:line="37" pos:column="22"/></operator> <operator pos:line="37" pos:column="23">(<pos:position pos:line="37" pos:column="24"/></operator><name pos:line="37" pos:column="24">tag<pos:position pos:line="37" pos:column="27"/></name> <operator pos:line="37" pos:column="28">&gt;&gt;<pos:position pos:line="37" pos:column="33"/></operator> <literal type="number" pos:line="37" pos:column="31">24<pos:position pos:line="37" pos:column="33"/></literal><operator pos:line="37" pos:column="33">)<pos:position pos:line="37" pos:column="34"/></operator> <operator pos:line="37" pos:column="35">-<pos:position pos:line="37" pos:column="36"/></operator> <name pos:line="37" pos:column="37">MPLEX_BASE<pos:position pos:line="37" pos:column="47"/></name></expr>;<pos:position pos:line="37" pos:column="48"/></expr_stmt>

		<switch pos:line="39" pos:column="17">switch <condition pos:line="39" pos:column="24">(<expr><name pos:line="39" pos:column="25">tag<pos:position pos:line="39" pos:column="28"/></name></expr>)<pos:position pos:line="39" pos:column="29"/></condition> <block pos:line="39" pos:column="30">{
		<case pos:line="40" pos:column="17">case <expr><name pos:line="40" pos:column="22">MSG_DATA<pos:position pos:line="40" pos:column="30"/></name></expr>:<pos:position pos:line="40" pos:column="31"/></case>
			<if pos:line="41" pos:column="25">if <condition pos:line="41" pos:column="28">(<expr><operator pos:line="41" pos:column="29">!<pos:position pos:line="41" pos:column="30"/></operator><name pos:line="41" pos:column="30">buffer<pos:position pos:line="41" pos:column="36"/></name> <operator pos:line="41" pos:column="37">||<pos:position pos:line="41" pos:column="39"/></operator> <name pos:line="41" pos:column="40">remaining<pos:position pos:line="41" pos:column="49"/></name> <operator pos:line="41" pos:column="50">&gt;<pos:position pos:line="41" pos:column="54"/></operator> <name pos:line="41" pos:column="52">bufferSz<pos:position pos:line="41" pos:column="60"/></name></expr>)<pos:position pos:line="41" pos:column="61"/></condition><then pos:line="41" pos:column="61"> <block pos:line="41" pos:column="62">{
				<expr_stmt><expr><name pos:line="42" pos:column="33">buffer<pos:position pos:line="42" pos:column="39"/></name> <operator pos:line="42" pos:column="40">=<pos:position pos:line="42" pos:column="41"/></operator> <call><name pos:line="42" pos:column="42">realloc_array<pos:position pos:line="42" pos:column="55"/></name><argument_list pos:line="42" pos:column="55">(<argument><expr><name pos:line="42" pos:column="56">buffer<pos:position pos:line="42" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="64">char<pos:position pos:line="42" pos:column="68"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="70">remaining<pos:position pos:line="42" pos:column="79"/></name></expr></argument>)<pos:position pos:line="42" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="81"/></expr_stmt>
				<if pos:line="43" pos:column="33">if <condition pos:line="43" pos:column="36">(<expr><operator pos:line="43" pos:column="37">!<pos:position pos:line="43" pos:column="38"/></operator><name pos:line="43" pos:column="38">buffer<pos:position pos:line="43" pos:column="44"/></name></expr>)<pos:position pos:line="43" pos:column="45"/></condition><then pos:line="43" pos:column="45"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="43" pos:column="46">out_of_memory<pos:position pos:line="43" pos:column="59"/></name><argument_list pos:line="43" pos:column="59">(<argument><expr><literal type="string" pos:line="43" pos:column="60">"read_unbuffered"<pos:position pos:line="43" pos:column="77"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="79"/></expr_stmt></block></then></if>
				<expr_stmt><expr><name pos:line="44" pos:column="33">bufferSz<pos:position pos:line="44" pos:column="41"/></name> <operator pos:line="44" pos:column="42">=<pos:position pos:line="44" pos:column="43"/></operator> <name pos:line="44" pos:column="44">remaining<pos:position pos:line="44" pos:column="53"/></name></expr>;<pos:position pos:line="44" pos:column="54"/></expr_stmt>
			}<pos:position pos:line="45" pos:column="26"/></block></then></if>
			<expr_stmt><expr><call><name pos:line="46" pos:column="25">read_loop<pos:position pos:line="46" pos:column="34"/></name><argument_list pos:line="46" pos:column="34">(<argument><expr><name pos:line="46" pos:column="35">fd<pos:position pos:line="46" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="39">buffer<pos:position pos:line="46" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="47">remaining<pos:position pos:line="46" pos:column="56"/></name></expr></argument>)<pos:position pos:line="46" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="58"/></expr_stmt>
			<expr_stmt><expr><name pos:line="47" pos:column="25">bufferIdx<pos:position pos:line="47" pos:column="34"/></name> <operator pos:line="47" pos:column="35">=<pos:position pos:line="47" pos:column="36"/></operator> <literal type="number" pos:line="47" pos:column="37">0<pos:position pos:line="47" pos:column="38"/></literal></expr>;<pos:position pos:line="47" pos:column="39"/></expr_stmt>
			<break pos:line="48" pos:column="25">break;<pos:position pos:line="48" pos:column="31"/></break>
		<case pos:line="49" pos:column="17">case <expr><name pos:line="49" pos:column="22">MSG_INFO<pos:position pos:line="49" pos:column="30"/></name></expr>:<pos:position pos:line="49" pos:column="31"/></case>
		<case pos:line="50" pos:column="17">case <expr><name pos:line="50" pos:column="22">MSG_ERROR<pos:position pos:line="50" pos:column="31"/></name></expr>:<pos:position pos:line="50" pos:column="32"/></case>
			<if pos:line="51" pos:column="25">if <condition pos:line="51" pos:column="28">(<expr><name pos:line="51" pos:column="29">remaining<pos:position pos:line="51" pos:column="38"/></name> <operator pos:line="51" pos:column="39">&gt;=<pos:position pos:line="51" pos:column="44"/></operator> <sizeof pos:line="51" pos:column="42">sizeof <name pos:line="51" pos:column="49">line<pos:position pos:line="51" pos:column="53"/></name></sizeof></expr>)<pos:position pos:line="51" pos:column="54"/></condition><then pos:line="51" pos:column="54"> <block pos:line="51" pos:column="55">{
				<expr_stmt><expr><call><name pos:line="52" pos:column="33">rprintf<pos:position pos:line="52" pos:column="40"/></name><argument_list pos:line="52" pos:column="40">(<argument><expr><name pos:line="52" pos:column="41">FERROR<pos:position pos:line="52" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="52" pos:column="49">"multiplexing overflow %d:%ld\n\n"<pos:position pos:line="52" pos:column="83"/></literal></expr></argument>,
					<argument><expr><name pos:line="53" pos:column="41">tag<pos:position pos:line="53" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="53" pos:column="46">(<pos:position pos:line="53" pos:column="47"/></operator><name pos:line="53" pos:column="47">long<pos:position pos:line="53" pos:column="51"/></name><operator pos:line="53" pos:column="51">)<pos:position pos:line="53" pos:column="52"/></operator><name pos:line="53" pos:column="52">remaining<pos:position pos:line="53" pos:column="61"/></name></expr></argument>)<pos:position pos:line="53" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="63"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="54" pos:column="33">exit_cleanup<pos:position pos:line="54" pos:column="45"/></name><argument_list pos:line="54" pos:column="45">(<argument><expr><name pos:line="54" pos:column="46">RERR_STREAMIO<pos:position pos:line="54" pos:column="59"/></name></expr></argument>)<pos:position pos:line="54" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="61"/></expr_stmt>
			}<pos:position pos:line="55" pos:column="26"/></block></then></if>
			<expr_stmt><expr><call><name pos:line="56" pos:column="25">read_loop<pos:position pos:line="56" pos:column="34"/></name><argument_list pos:line="56" pos:column="34">(<argument><expr><name pos:line="56" pos:column="35">fd<pos:position pos:line="56" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="39">line<pos:position pos:line="56" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="45">remaining<pos:position pos:line="56" pos:column="54"/></name></expr></argument>)<pos:position pos:line="56" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="56"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="57" pos:column="25">rwrite<pos:position pos:line="57" pos:column="31"/></name><argument_list pos:line="57" pos:column="31">(<argument><expr><operator pos:line="57" pos:column="32">(<pos:position pos:line="57" pos:column="33"/></operator>enum <name pos:line="57" pos:column="38">logcode<pos:position pos:line="57" pos:column="45"/></name><operator pos:line="57" pos:column="45">)<pos:position pos:line="57" pos:column="46"/></operator><name pos:line="57" pos:column="46">tag<pos:position pos:line="57" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="51">line<pos:position pos:line="57" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="57">remaining<pos:position pos:line="57" pos:column="66"/></name></expr></argument>)<pos:position pos:line="57" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="68"/></expr_stmt>
			<expr_stmt><expr><name pos:line="58" pos:column="25">remaining<pos:position pos:line="58" pos:column="34"/></name> <operator pos:line="58" pos:column="35">=<pos:position pos:line="58" pos:column="36"/></operator> <literal type="number" pos:line="58" pos:column="37">0<pos:position pos:line="58" pos:column="38"/></literal></expr>;<pos:position pos:line="58" pos:column="39"/></expr_stmt>
			<break pos:line="59" pos:column="25">break;<pos:position pos:line="59" pos:column="31"/></break>
		<default pos:line="60" pos:column="17">default:<pos:position pos:line="60" pos:column="25"/></default>
			<expr_stmt><expr><call><name pos:line="61" pos:column="25">rprintf<pos:position pos:line="61" pos:column="32"/></name><argument_list pos:line="61" pos:column="32">(<argument><expr><name pos:line="61" pos:column="33">FERROR<pos:position pos:line="61" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="61" pos:column="41">"unexpected tag %d\n"<pos:position pos:line="61" pos:column="62"/></literal></expr></argument>, <argument><expr><name pos:line="61" pos:column="64">tag<pos:position pos:line="61" pos:column="67"/></name></expr></argument>)<pos:position pos:line="61" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="69"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="62" pos:column="25">exit_cleanup<pos:position pos:line="62" pos:column="37"/></name><argument_list pos:line="62" pos:column="37">(<argument><expr><name pos:line="62" pos:column="38">RERR_STREAMIO<pos:position pos:line="62" pos:column="51"/></name></expr></argument>)<pos:position pos:line="62" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="53"/></expr_stmt>
		}<pos:position pos:line="63" pos:column="18"/></block></switch>
	}<pos:position pos:line="64" pos:column="10"/></block></while>

	<if pos:line="66" pos:column="9">if <condition pos:line="66" pos:column="12">(<expr><name pos:line="66" pos:column="13">remaining<pos:position pos:line="66" pos:column="22"/></name> <operator pos:line="66" pos:column="23">==<pos:position pos:line="66" pos:column="25"/></operator> <literal type="number" pos:line="66" pos:column="26">0<pos:position pos:line="66" pos:column="27"/></literal></expr>)<pos:position pos:line="66" pos:column="28"/></condition><then pos:line="66" pos:column="28">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="67" pos:column="17">io_flush<pos:position pos:line="67" pos:column="25"/></name><argument_list pos:line="67" pos:column="25">(<argument><expr><name pos:line="67" pos:column="26">NORMAL_FLUSH<pos:position pos:line="67" pos:column="38"/></name></expr></argument>)<pos:position pos:line="67" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="40"/></expr_stmt></block></then></if>

	<return pos:line="69" pos:column="9">return <expr><name pos:line="69" pos:column="16">ret<pos:position pos:line="69" pos:column="19"/></name></expr>;<pos:position pos:line="69" pos:column="20"/></return>
}<pos:position pos:line="70" pos:column="2"/></block></function></unit>
