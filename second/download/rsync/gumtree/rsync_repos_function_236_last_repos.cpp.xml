<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_236_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">init_set_compression<pos:position pos:line="1" pos:column="33"/></name><parameter_list pos:line="1" pos:column="33">(<parameter><decl><type><name pos:line="1" pos:column="34">void<pos:position pos:line="1" pos:column="38"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="39"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><specifier pos:line="3" pos:column="9">const<pos:position pos:line="3" pos:column="14"/></specifier> <name pos:line="3" pos:column="15">char<pos:position pos:line="3" pos:column="19"/></name> <modifier pos:line="3" pos:column="20">*<pos:position pos:line="3" pos:column="21"/></modifier></type><name pos:line="3" pos:column="21">f<pos:position pos:line="3" pos:column="22"/></name></decl>;<pos:position pos:line="3" pos:column="23"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier></type><name pos:line="4" pos:column="15">t<pos:position pos:line="4" pos:column="16"/></name></decl>, <modifier pos:line="4" pos:column="18">*<pos:position pos:line="4" pos:column="19"/></modifier><decl><type ref="prev"/><name pos:line="4" pos:column="19">start<pos:position pos:line="4" pos:column="24"/></name></decl>;<pos:position pos:line="4" pos:column="25"/></decl_stmt>

	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><name pos:line="6" pos:column="13">skip_compress<pos:position pos:line="6" pos:column="26"/></name></expr>)<pos:position pos:line="6" pos:column="27"/></condition><then pos:line="6" pos:column="27">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="7" pos:column="17">add_nocompress_suffixes<pos:position pos:line="7" pos:column="40"/></name><argument_list pos:line="7" pos:column="40">(<argument><expr><name pos:line="7" pos:column="41">skip_compress<pos:position pos:line="7" pos:column="54"/></name></expr></argument>)<pos:position pos:line="7" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="56"/></expr_stmt></block></then></if>

	<comment type="block" pos:line="9" pos:column="9">/* A non-daemon transfer skips the default suffix list if the
	 * user specified --skip-compress. */</comment>
	<if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><name pos:line="11" pos:column="13">skip_compress<pos:position pos:line="11" pos:column="26"/></name> <operator pos:line="11" pos:column="27">&amp;&amp;<pos:position pos:line="11" pos:column="37"/></operator> <name pos:line="11" pos:column="30">module_id<pos:position pos:line="11" pos:column="39"/></name> <operator pos:line="11" pos:column="40">&lt;<pos:position pos:line="11" pos:column="44"/></operator> <literal type="number" pos:line="11" pos:column="42">0<pos:position pos:line="11" pos:column="43"/></literal></expr>)<pos:position pos:line="11" pos:column="44"/></condition><then pos:line="11" pos:column="44">
		<block type="pseudo"><expr_stmt><expr><name pos:line="12" pos:column="17">f<pos:position pos:line="12" pos:column="18"/></name> <operator pos:line="12" pos:column="19">=<pos:position pos:line="12" pos:column="20"/></operator> <literal type="string" pos:line="12" pos:column="21">""<pos:position pos:line="12" pos:column="23"/></literal></expr>;<pos:position pos:line="12" pos:column="24"/></expr_stmt></block></then>
	<else pos:line="13" pos:column="9">else
		<block type="pseudo"><expr_stmt><expr><name pos:line="14" pos:column="17">f<pos:position pos:line="14" pos:column="18"/></name> <operator pos:line="14" pos:column="19">=<pos:position pos:line="14" pos:column="20"/></operator> <call><name pos:line="14" pos:column="21">lp_dont_compress<pos:position pos:line="14" pos:column="37"/></name><argument_list pos:line="14" pos:column="37">(<argument><expr><name pos:line="14" pos:column="38">module_id<pos:position pos:line="14" pos:column="47"/></name></expr></argument>)<pos:position pos:line="14" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="49"/></expr_stmt></block></else></if>

	<if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><operator pos:line="16" pos:column="13">!<pos:position pos:line="16" pos:column="14"/></operator><operator pos:line="16" pos:column="14">(<pos:position pos:line="16" pos:column="15"/></operator><name pos:line="16" pos:column="15">match_list<pos:position pos:line="16" pos:column="25"/></name> <operator pos:line="16" pos:column="26">=<pos:position pos:line="16" pos:column="27"/></operator> <name pos:line="16" pos:column="28">t<pos:position pos:line="16" pos:column="29"/></name> <operator pos:line="16" pos:column="30">=<pos:position pos:line="16" pos:column="31"/></operator> <call><name pos:line="16" pos:column="32">new_array<pos:position pos:line="16" pos:column="41"/></name><argument_list pos:line="16" pos:column="41">(<argument><expr><name pos:line="16" pos:column="42">char<pos:position pos:line="16" pos:column="46"/></name></expr></argument>, <argument><expr><call><name pos:line="16" pos:column="48">strlen<pos:position pos:line="16" pos:column="54"/></name><argument_list pos:line="16" pos:column="54">(<argument><expr><name pos:line="16" pos:column="55">f<pos:position pos:line="16" pos:column="56"/></name></expr></argument>)<pos:position pos:line="16" pos:column="57"/></argument_list></call> <operator pos:line="16" pos:column="58">+<pos:position pos:line="16" pos:column="59"/></operator> <literal type="number" pos:line="16" pos:column="60">2<pos:position pos:line="16" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="62"/></argument_list></call><operator pos:line="16" pos:column="62">)<pos:position pos:line="16" pos:column="63"/></operator></expr>)<pos:position pos:line="16" pos:column="64"/></condition><then pos:line="16" pos:column="64">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="17" pos:column="17">out_of_memory<pos:position pos:line="17" pos:column="30"/></name><argument_list pos:line="17" pos:column="30">(<argument><expr><literal type="string" pos:line="17" pos:column="31">"set_compression"<pos:position pos:line="17" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="50"/></expr_stmt></block></then></if>

	<expr_stmt><expr><name pos:line="19" pos:column="9">per_file_default_level<pos:position pos:line="19" pos:column="31"/></name> <operator pos:line="19" pos:column="32">=<pos:position pos:line="19" pos:column="33"/></operator> <name pos:line="19" pos:column="34">def_compress_level<pos:position pos:line="19" pos:column="52"/></name></expr>;<pos:position pos:line="19" pos:column="53"/></expr_stmt>

	<while pos:line="21" pos:column="9">while <condition pos:line="21" pos:column="15">(<expr><operator pos:line="21" pos:column="16">*<pos:position pos:line="21" pos:column="17"/></operator><name pos:line="21" pos:column="17">f<pos:position pos:line="21" pos:column="18"/></name></expr>)<pos:position pos:line="21" pos:column="19"/></condition> <block pos:line="21" pos:column="20">{
		<if pos:line="22" pos:column="17">if <condition pos:line="22" pos:column="20">(<expr><operator pos:line="22" pos:column="21">*<pos:position pos:line="22" pos:column="22"/></operator><name pos:line="22" pos:column="22">f<pos:position pos:line="22" pos:column="23"/></name> <operator pos:line="22" pos:column="24">==<pos:position pos:line="22" pos:column="26"/></operator> <literal type="char" pos:line="22" pos:column="27">' '<pos:position pos:line="22" pos:column="30"/></literal></expr>)<pos:position pos:line="22" pos:column="31"/></condition><then pos:line="22" pos:column="31"> <block pos:line="22" pos:column="32">{
			<expr_stmt><expr><name pos:line="23" pos:column="25">f<pos:position pos:line="23" pos:column="26"/></name><operator pos:line="23" pos:column="26">++<pos:position pos:line="23" pos:column="28"/></operator></expr>;<pos:position pos:line="23" pos:column="29"/></expr_stmt>
			<continue pos:line="24" pos:column="25">continue;<pos:position pos:line="24" pos:column="34"/></continue>
		}<pos:position pos:line="25" pos:column="18"/></block></then></if>

		<expr_stmt><expr><name pos:line="27" pos:column="17">start<pos:position pos:line="27" pos:column="22"/></name> <operator pos:line="27" pos:column="23">=<pos:position pos:line="27" pos:column="24"/></operator> <name pos:line="27" pos:column="25">t<pos:position pos:line="27" pos:column="26"/></name></expr>;<pos:position pos:line="27" pos:column="27"/></expr_stmt>
		<do pos:line="28" pos:column="17">do <block pos:line="28" pos:column="20">{
			<if pos:line="29" pos:column="25">if <condition pos:line="29" pos:column="28">(<expr><call><name pos:line="29" pos:column="29">isUpper<pos:position pos:line="29" pos:column="36"/></name><argument_list pos:line="29" pos:column="36">(<argument><expr><name pos:line="29" pos:column="37">f<pos:position pos:line="29" pos:column="38"/></name></expr></argument>)<pos:position pos:line="29" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="29" pos:column="40"/></condition><then pos:line="29" pos:column="40">
				<block type="pseudo"><expr_stmt><expr><operator pos:line="30" pos:column="33">*<pos:position pos:line="30" pos:column="34"/></operator><name pos:line="30" pos:column="34">t<pos:position pos:line="30" pos:column="35"/></name><operator pos:line="30" pos:column="35">++<pos:position pos:line="30" pos:column="37"/></operator> <operator pos:line="30" pos:column="38">=<pos:position pos:line="30" pos:column="39"/></operator> <call><name pos:line="30" pos:column="40">toLower<pos:position pos:line="30" pos:column="47"/></name><argument_list pos:line="30" pos:column="47">(<argument><expr><name pos:line="30" pos:column="48">f<pos:position pos:line="30" pos:column="49"/></name></expr></argument>)<pos:position pos:line="30" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="51"/></expr_stmt></block></then>
			<else pos:line="31" pos:column="25">else
				<block type="pseudo"><expr_stmt><expr><operator pos:line="32" pos:column="33">*<pos:position pos:line="32" pos:column="34"/></operator><name pos:line="32" pos:column="34">t<pos:position pos:line="32" pos:column="35"/></name><operator pos:line="32" pos:column="35">++<pos:position pos:line="32" pos:column="37"/></operator> <operator pos:line="32" pos:column="38">=<pos:position pos:line="32" pos:column="39"/></operator> <operator pos:line="32" pos:column="40">*<pos:position pos:line="32" pos:column="41"/></operator><name pos:line="32" pos:column="41">f<pos:position pos:line="32" pos:column="42"/></name></expr>;<pos:position pos:line="32" pos:column="43"/></expr_stmt></block></else></if>
		}<pos:position pos:line="33" pos:column="18"/></block> while <condition pos:line="33" pos:column="25">(<expr><operator pos:line="33" pos:column="26">*<pos:position pos:line="33" pos:column="27"/></operator><operator pos:line="33" pos:column="27">++<pos:position pos:line="33" pos:column="29"/></operator><name pos:line="33" pos:column="29">f<pos:position pos:line="33" pos:column="30"/></name> <operator pos:line="33" pos:column="31">!=<pos:position pos:line="33" pos:column="33"/></operator> <literal type="char" pos:line="33" pos:column="34">' '<pos:position pos:line="33" pos:column="37"/></literal> <operator pos:line="33" pos:column="38">&amp;&amp;<pos:position pos:line="33" pos:column="48"/></operator> <operator pos:line="33" pos:column="41">*<pos:position pos:line="33" pos:column="42"/></operator><name pos:line="33" pos:column="42">f<pos:position pos:line="33" pos:column="43"/></name></expr>)<pos:position pos:line="33" pos:column="44"/></condition>;<pos:position pos:line="33" pos:column="45"/></do>
		<expr_stmt><expr><operator pos:line="34" pos:column="17">*<pos:position pos:line="34" pos:column="18"/></operator><name pos:line="34" pos:column="18">t<pos:position pos:line="34" pos:column="19"/></name><operator pos:line="34" pos:column="19">++<pos:position pos:line="34" pos:column="21"/></operator> <operator pos:line="34" pos:column="22">=<pos:position pos:line="34" pos:column="23"/></operator> <literal type="char" pos:line="34" pos:column="24">'\0'<pos:position pos:line="34" pos:column="28"/></literal></expr>;<pos:position pos:line="34" pos:column="29"/></expr_stmt>

		<if pos:line="36" pos:column="17">if <condition pos:line="36" pos:column="20">(<expr><name pos:line="36" pos:column="21">t<pos:position pos:line="36" pos:column="22"/></name> <operator pos:line="36" pos:column="23">-<pos:position pos:line="36" pos:column="24"/></operator> <name pos:line="36" pos:column="25">start<pos:position pos:line="36" pos:column="30"/></name> <operator pos:line="36" pos:column="31">==<pos:position pos:line="36" pos:column="33"/></operator> <literal type="number" pos:line="36" pos:column="34">1<pos:position pos:line="36" pos:column="35"/></literal><operator pos:line="36" pos:column="35">+<pos:position pos:line="36" pos:column="36"/></operator><literal type="number" pos:line="36" pos:column="36">1<pos:position pos:line="36" pos:column="37"/></literal> <operator pos:line="36" pos:column="38">&amp;&amp;<pos:position pos:line="36" pos:column="48"/></operator> <operator pos:line="36" pos:column="41">*<pos:position pos:line="36" pos:column="42"/></operator><name pos:line="36" pos:column="42">start<pos:position pos:line="36" pos:column="47"/></name> <operator pos:line="36" pos:column="48">==<pos:position pos:line="36" pos:column="50"/></operator> <literal type="char" pos:line="36" pos:column="51">'*'<pos:position pos:line="36" pos:column="54"/></literal></expr>)<pos:position pos:line="36" pos:column="55"/></condition><then pos:line="36" pos:column="55"> <block pos:line="36" pos:column="56">{
			<comment type="block" pos:line="37" pos:column="25">/* Optimize a match-string of "*". */</comment>
			<expr_stmt><expr><operator pos:line="38" pos:column="25">*<pos:position pos:line="38" pos:column="26"/></operator><name pos:line="38" pos:column="26">match_list<pos:position pos:line="38" pos:column="36"/></name> <operator pos:line="38" pos:column="37">=<pos:position pos:line="38" pos:column="38"/></operator> <literal type="char" pos:line="38" pos:column="39">'\0'<pos:position pos:line="38" pos:column="43"/></literal></expr>;<pos:position pos:line="38" pos:column="44"/></expr_stmt>
			<expr_stmt><expr><name pos:line="39" pos:column="25">suftree<pos:position pos:line="39" pos:column="32"/></name> <operator pos:line="39" pos:column="33">=<pos:position pos:line="39" pos:column="34"/></operator> <name pos:line="39" pos:column="35">NULL<pos:position pos:line="39" pos:column="39"/></name></expr>;<pos:position pos:line="39" pos:column="40"/></expr_stmt>
			<expr_stmt><expr><name pos:line="40" pos:column="25">per_file_default_level<pos:position pos:line="40" pos:column="47"/></name> <operator pos:line="40" pos:column="48">=<pos:position pos:line="40" pos:column="49"/></operator> <literal type="number" pos:line="40" pos:column="50">0<pos:position pos:line="40" pos:column="51"/></literal></expr>;<pos:position pos:line="40" pos:column="52"/></expr_stmt>
			<break pos:line="41" pos:column="25">break;<pos:position pos:line="41" pos:column="31"/></break>
		}<pos:position pos:line="42" pos:column="18"/></block></then></if>

		<comment type="block" pos:line="44" pos:column="17">/* Move *.foo items into the stuffix tree. */</comment>
		<if pos:line="45" pos:column="17">if <condition pos:line="45" pos:column="20">(<expr><operator pos:line="45" pos:column="21">*<pos:position pos:line="45" pos:column="22"/></operator><name pos:line="45" pos:column="22">start<pos:position pos:line="45" pos:column="27"/></name> <operator pos:line="45" pos:column="28">==<pos:position pos:line="45" pos:column="30"/></operator> <literal type="char" pos:line="45" pos:column="31">'*'<pos:position pos:line="45" pos:column="34"/></literal> <operator pos:line="45" pos:column="35">&amp;&amp;<pos:position pos:line="45" pos:column="45"/></operator> <name><name pos:line="45" pos:column="38">start<pos:position pos:line="45" pos:column="43"/></name><index pos:line="45" pos:column="43">[<expr><literal type="number" pos:line="45" pos:column="44">1<pos:position pos:line="45" pos:column="45"/></literal></expr>]<pos:position pos:line="45" pos:column="46"/></index></name> <operator pos:line="45" pos:column="47">==<pos:position pos:line="45" pos:column="49"/></operator> <literal type="char" pos:line="45" pos:column="50">'.'<pos:position pos:line="45" pos:column="53"/></literal> <operator pos:line="45" pos:column="54">&amp;&amp;<pos:position pos:line="45" pos:column="64"/></operator> <name><name pos:line="45" pos:column="57">start<pos:position pos:line="45" pos:column="62"/></name><index pos:line="45" pos:column="62">[<expr><literal type="number" pos:line="45" pos:column="63">2<pos:position pos:line="45" pos:column="64"/></literal></expr>]<pos:position pos:line="45" pos:column="65"/></index></name>
		 <operator pos:line="46" pos:column="18">&amp;&amp;<pos:position pos:line="46" pos:column="28"/></operator> <operator pos:line="46" pos:column="21">!<pos:position pos:line="46" pos:column="22"/></operator><call><name pos:line="46" pos:column="22">strpbrk<pos:position pos:line="46" pos:column="29"/></name><argument_list pos:line="46" pos:column="29">(<argument><expr><name pos:line="46" pos:column="30">start<pos:position pos:line="46" pos:column="35"/></name><operator pos:line="46" pos:column="35">+<pos:position pos:line="46" pos:column="36"/></operator><literal type="number" pos:line="46" pos:column="36">2<pos:position pos:line="46" pos:column="37"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="46" pos:column="39">".?*"<pos:position pos:line="46" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="46" pos:column="46"/></condition><then pos:line="46" pos:column="46"> <block pos:line="46" pos:column="47">{
			<expr_stmt><expr><call><name pos:line="47" pos:column="25">add_suffix<pos:position pos:line="47" pos:column="35"/></name><argument_list pos:line="47" pos:column="35">(<argument><expr><operator pos:line="47" pos:column="36">&amp;<pos:position pos:line="47" pos:column="41"/></operator><name pos:line="47" pos:column="37">suftree<pos:position pos:line="47" pos:column="44"/></name></expr></argument>, <argument><expr><name><name pos:line="47" pos:column="46">start<pos:position pos:line="47" pos:column="51"/></name><index pos:line="47" pos:column="51">[<expr><literal type="number" pos:line="47" pos:column="52">2<pos:position pos:line="47" pos:column="53"/></literal></expr>]<pos:position pos:line="47" pos:column="54"/></index></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="56">start<pos:position pos:line="47" pos:column="61"/></name><operator pos:line="47" pos:column="61">+<pos:position pos:line="47" pos:column="62"/></operator><literal type="number" pos:line="47" pos:column="62">3<pos:position pos:line="47" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="65"/></expr_stmt>
			<expr_stmt><expr><name pos:line="48" pos:column="25">t<pos:position pos:line="48" pos:column="26"/></name> <operator pos:line="48" pos:column="27">=<pos:position pos:line="48" pos:column="28"/></operator> <name pos:line="48" pos:column="29">start<pos:position pos:line="48" pos:column="34"/></name></expr>;<pos:position pos:line="48" pos:column="35"/></expr_stmt>
		}<pos:position pos:line="49" pos:column="18"/></block></then></if>
	}<pos:position pos:line="50" pos:column="10"/></block></while>
	<expr_stmt><expr><operator pos:line="51" pos:column="9">*<pos:position pos:line="51" pos:column="10"/></operator><name pos:line="51" pos:column="10">t<pos:position pos:line="51" pos:column="11"/></name><operator pos:line="51" pos:column="11">++<pos:position pos:line="51" pos:column="13"/></operator> <operator pos:line="51" pos:column="14">=<pos:position pos:line="51" pos:column="15"/></operator> <literal type="char" pos:line="51" pos:column="16">'\0'<pos:position pos:line="51" pos:column="20"/></literal></expr>;<pos:position pos:line="51" pos:column="21"/></expr_stmt>
}<pos:position pos:line="52" pos:column="2"/></block></function></unit>
