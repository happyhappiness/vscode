<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_156_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">maybe_send_keepalive<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><name pos:line="1" pos:column="27">time_t<pos:position pos:line="1" pos:column="33"/></name></type> <name pos:line="1" pos:column="34">now<pos:position pos:line="1" pos:column="37"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="39">int<pos:position pos:line="1" pos:column="42"/></name></type> <name pos:line="1" pos:column="43">flags<pos:position pos:line="1" pos:column="48"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="49"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<if pos:line="3" pos:column="9">if <condition pos:line="3" pos:column="12">(<expr><name pos:line="3" pos:column="13">flags<pos:position pos:line="3" pos:column="18"/></name> <operator pos:line="3" pos:column="19">&amp;<pos:position pos:line="3" pos:column="24"/></operator> <name pos:line="3" pos:column="21">MSK_ACTIVE_RECEIVER<pos:position pos:line="3" pos:column="40"/></name></expr>)<pos:position pos:line="3" pos:column="41"/></condition><then pos:line="3" pos:column="41">
		<block type="pseudo"><expr_stmt><expr><name pos:line="4" pos:column="17">last_io_in<pos:position pos:line="4" pos:column="27"/></name> <operator pos:line="4" pos:column="28">=<pos:position pos:line="4" pos:column="29"/></operator> <name pos:line="4" pos:column="30">now<pos:position pos:line="4" pos:column="33"/></name></expr>;<pos:position pos:line="4" pos:column="34"/></expr_stmt></block></then></if> <comment type="block" pos:line="4" pos:column="35">/* Fudge things when we're working hard on the files. */</comment>

	<comment type="block" pos:line="6" pos:column="9">/* Early in the transfer (before the receiver forks) the receiving side doesn't
	 * care if it hasn't sent data in a while as long as it is receiving data (in
	 * fact, a pre-3.1.0 rsync would die if we tried to send it a keep alive during
	 * this time).  So, if we're an early-receiving proc, just return and let the
	 * incoming data determine if we timeout. */</comment>
	<if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><operator pos:line="11" pos:column="13">!<pos:position pos:line="11" pos:column="14"/></operator><name pos:line="11" pos:column="14">am_sender<pos:position pos:line="11" pos:column="23"/></name> <operator pos:line="11" pos:column="24">&amp;&amp;<pos:position pos:line="11" pos:column="34"/></operator> <operator pos:line="11" pos:column="27">!<pos:position pos:line="11" pos:column="28"/></operator><name pos:line="11" pos:column="28">am_receiver<pos:position pos:line="11" pos:column="39"/></name> <operator pos:line="11" pos:column="40">&amp;&amp;<pos:position pos:line="11" pos:column="50"/></operator> <operator pos:line="11" pos:column="43">!<pos:position pos:line="11" pos:column="44"/></operator><name pos:line="11" pos:column="44">am_generator<pos:position pos:line="11" pos:column="56"/></name></expr>)<pos:position pos:line="11" pos:column="57"/></condition><then pos:line="11" pos:column="57">
		<block type="pseudo"><return pos:line="12" pos:column="17">return;<pos:position pos:line="12" pos:column="24"/></return></block></then></if>

	<if pos:line="14" pos:column="9">if <condition pos:line="14" pos:column="12">(<expr><name pos:line="14" pos:column="13">now<pos:position pos:line="14" pos:column="16"/></name> <operator pos:line="14" pos:column="17">-<pos:position pos:line="14" pos:column="18"/></operator> <name pos:line="14" pos:column="19">last_io_out<pos:position pos:line="14" pos:column="30"/></name> <operator pos:line="14" pos:column="31">&gt;=<pos:position pos:line="14" pos:column="36"/></operator> <name pos:line="14" pos:column="34">allowed_lull<pos:position pos:line="14" pos:column="46"/></name></expr>)<pos:position pos:line="14" pos:column="47"/></condition><then pos:line="14" pos:column="47"> <block pos:line="14" pos:column="48">{
		<comment type="block" pos:line="15" pos:column="17">/* The receiver is special:  it only sends keep-alive messages if it is
		 * actively receiving data.  Otherwise, it lets the generator timeout. */</comment>
		<if pos:line="17" pos:column="17">if <condition pos:line="17" pos:column="20">(<expr><name pos:line="17" pos:column="21">am_receiver<pos:position pos:line="17" pos:column="32"/></name> <operator pos:line="17" pos:column="33">&amp;&amp;<pos:position pos:line="17" pos:column="43"/></operator> <name pos:line="17" pos:column="36">now<pos:position pos:line="17" pos:column="39"/></name> <operator pos:line="17" pos:column="40">-<pos:position pos:line="17" pos:column="41"/></operator> <name pos:line="17" pos:column="42">last_io_in<pos:position pos:line="17" pos:column="52"/></name> <operator pos:line="17" pos:column="53">&gt;=<pos:position pos:line="17" pos:column="58"/></operator> <name pos:line="17" pos:column="56">io_timeout<pos:position pos:line="17" pos:column="66"/></name></expr>)<pos:position pos:line="17" pos:column="67"/></condition><then pos:line="17" pos:column="67">
			<block type="pseudo"><return pos:line="18" pos:column="25">return;<pos:position pos:line="18" pos:column="32"/></return></block></then></if>

		<if pos:line="20" pos:column="17">if <condition pos:line="20" pos:column="20">(<expr><operator pos:line="20" pos:column="21">!<pos:position pos:line="20" pos:column="22"/></operator><name><name pos:line="20" pos:column="22">iobuf<pos:position pos:line="20" pos:column="27"/></name><operator pos:line="20" pos:column="27">.<pos:position pos:line="20" pos:column="28"/></operator><name pos:line="20" pos:column="28">msg<pos:position pos:line="20" pos:column="31"/></name><operator pos:line="20" pos:column="31">.<pos:position pos:line="20" pos:column="32"/></operator><name pos:line="20" pos:column="32">len<pos:position pos:line="20" pos:column="35"/></name></name> <operator pos:line="20" pos:column="36">&amp;&amp;<pos:position pos:line="20" pos:column="46"/></operator> <name><name pos:line="20" pos:column="39">iobuf<pos:position pos:line="20" pos:column="44"/></name><operator pos:line="20" pos:column="44">.<pos:position pos:line="20" pos:column="45"/></operator><name pos:line="20" pos:column="45">out<pos:position pos:line="20" pos:column="48"/></name><operator pos:line="20" pos:column="48">.<pos:position pos:line="20" pos:column="49"/></operator><name pos:line="20" pos:column="49">len<pos:position pos:line="20" pos:column="52"/></name></name> <operator pos:line="20" pos:column="53">==<pos:position pos:line="20" pos:column="55"/></operator> <name><name pos:line="20" pos:column="56">iobuf<pos:position pos:line="20" pos:column="61"/></name><operator pos:line="20" pos:column="61">.<pos:position pos:line="20" pos:column="62"/></operator><name pos:line="20" pos:column="62">out_empty_len<pos:position pos:line="20" pos:column="75"/></name></name></expr>)<pos:position pos:line="20" pos:column="76"/></condition><then pos:line="20" pos:column="76">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="21" pos:column="25">send_msg<pos:position pos:line="21" pos:column="33"/></name><argument_list pos:line="21" pos:column="33">(<argument><expr><name pos:line="21" pos:column="34">MSG_DATA<pos:position pos:line="21" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="21" pos:column="44">""<pos:position pos:line="21" pos:column="46"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="21" pos:column="48">0<pos:position pos:line="21" pos:column="49"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="21" pos:column="51">0<pos:position pos:line="21" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="54"/></expr_stmt></block></then></if>
		<if pos:line="22" pos:column="17">if <condition pos:line="22" pos:column="20">(<expr><operator pos:line="22" pos:column="21">!<pos:position pos:line="22" pos:column="22"/></operator><operator pos:line="22" pos:column="22">(<pos:position pos:line="22" pos:column="23"/></operator><name pos:line="22" pos:column="23">flags<pos:position pos:line="22" pos:column="28"/></name> <operator pos:line="22" pos:column="29">&amp;<pos:position pos:line="22" pos:column="34"/></operator> <name pos:line="22" pos:column="31">MSK_ALLOW_FLUSH<pos:position pos:line="22" pos:column="46"/></name><operator pos:line="22" pos:column="46">)<pos:position pos:line="22" pos:column="47"/></operator></expr>)<pos:position pos:line="22" pos:column="48"/></condition><then pos:line="22" pos:column="48"> <block pos:line="22" pos:column="49">{
			<comment type="block" pos:line="23" pos:column="25">/* Let the caller worry about writing out the data. */</comment>
		}<pos:position pos:line="24" pos:column="18"/></block></then> <elseif pos:line="24" pos:column="19">else <if pos:line="24" pos:column="24">if <condition pos:line="24" pos:column="27">(<expr><name><name pos:line="24" pos:column="28">iobuf<pos:position pos:line="24" pos:column="33"/></name><operator pos:line="24" pos:column="33">.<pos:position pos:line="24" pos:column="34"/></operator><name pos:line="24" pos:column="34">msg<pos:position pos:line="24" pos:column="37"/></name><operator pos:line="24" pos:column="37">.<pos:position pos:line="24" pos:column="38"/></operator><name pos:line="24" pos:column="38">len<pos:position pos:line="24" pos:column="41"/></name></name></expr>)<pos:position pos:line="24" pos:column="42"/></condition><then pos:line="24" pos:column="42">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="25" pos:column="25">perform_io<pos:position pos:line="25" pos:column="35"/></name><argument_list pos:line="25" pos:column="35">(<argument><expr><name><name pos:line="25" pos:column="36">iobuf<pos:position pos:line="25" pos:column="41"/></name><operator pos:line="25" pos:column="41">.<pos:position pos:line="25" pos:column="42"/></operator><name pos:line="25" pos:column="42">msg<pos:position pos:line="25" pos:column="45"/></name><operator pos:line="25" pos:column="45">.<pos:position pos:line="25" pos:column="46"/></operator><name pos:line="25" pos:column="46">size<pos:position pos:line="25" pos:column="50"/></name></name> <operator pos:line="25" pos:column="51">-<pos:position pos:line="25" pos:column="52"/></operator> <name><name pos:line="25" pos:column="53">iobuf<pos:position pos:line="25" pos:column="58"/></name><operator pos:line="25" pos:column="58">.<pos:position pos:line="25" pos:column="59"/></operator><name pos:line="25" pos:column="59">msg<pos:position pos:line="25" pos:column="62"/></name><operator pos:line="25" pos:column="62">.<pos:position pos:line="25" pos:column="63"/></operator><name pos:line="25" pos:column="63">len<pos:position pos:line="25" pos:column="66"/></name></name> <operator pos:line="25" pos:column="67">+<pos:position pos:line="25" pos:column="68"/></operator> <literal type="number" pos:line="25" pos:column="69">1<pos:position pos:line="25" pos:column="70"/></literal></expr></argument>, <argument><expr><name pos:line="25" pos:column="72">PIO_NEED_MSGROOM<pos:position pos:line="25" pos:column="88"/></name></expr></argument>)<pos:position pos:line="25" pos:column="89"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="90"/></expr_stmt></block></then></if></elseif>
		<elseif pos:line="26" pos:column="17">else <if pos:line="26" pos:column="22">if <condition pos:line="26" pos:column="25">(<expr><name><name pos:line="26" pos:column="26">iobuf<pos:position pos:line="26" pos:column="31"/></name><operator pos:line="26" pos:column="31">.<pos:position pos:line="26" pos:column="32"/></operator><name pos:line="26" pos:column="32">out<pos:position pos:line="26" pos:column="35"/></name><operator pos:line="26" pos:column="35">.<pos:position pos:line="26" pos:column="36"/></operator><name pos:line="26" pos:column="36">len<pos:position pos:line="26" pos:column="39"/></name></name> <operator pos:line="26" pos:column="40">&gt;<pos:position pos:line="26" pos:column="44"/></operator> <name><name pos:line="26" pos:column="42">iobuf<pos:position pos:line="26" pos:column="47"/></name><operator pos:line="26" pos:column="47">.<pos:position pos:line="26" pos:column="48"/></operator><name pos:line="26" pos:column="48">out_empty_len<pos:position pos:line="26" pos:column="61"/></name></name></expr>)<pos:position pos:line="26" pos:column="62"/></condition><then pos:line="26" pos:column="62">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="27" pos:column="25">io_flush<pos:position pos:line="27" pos:column="33"/></name><argument_list pos:line="27" pos:column="33">(<argument><expr><name pos:line="27" pos:column="34">NORMAL_FLUSH<pos:position pos:line="27" pos:column="46"/></name></expr></argument>)<pos:position pos:line="27" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="48"/></expr_stmt></block></then></if></elseif></if>
	}<pos:position pos:line="28" pos:column="10"/></block></then></if>
}<pos:position pos:line="29" pos:column="2"/></block></function></unit>
