<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_312_rsync-2.6.8.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">get_checksum2<pos:position pos:line="1" pos:column="19"/></name><parameter_list pos:line="1" pos:column="19">(<parameter><decl><type><name pos:line="1" pos:column="20">char<pos:position pos:line="1" pos:column="24"/></name> <modifier pos:line="1" pos:column="25">*<pos:position pos:line="1" pos:column="26"/></modifier></type><name pos:line="1" pos:column="26">buf<pos:position pos:line="1" pos:column="29"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="31">int32<pos:position pos:line="1" pos:column="36"/></name></type> <name pos:line="1" pos:column="37">len<pos:position pos:line="1" pos:column="40"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="42">char<pos:position pos:line="1" pos:column="46"/></name> <modifier pos:line="1" pos:column="47">*<pos:position pos:line="1" pos:column="48"/></modifier></type><name pos:line="1" pos:column="48">sum<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="52"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int32<pos:position pos:line="3" pos:column="14"/></name></type> <name pos:line="3" pos:column="15">i<pos:position pos:line="3" pos:column="16"/></name></decl>;<pos:position pos:line="3" pos:column="17"/></decl_stmt>
	<decl_stmt><decl><specifier pos:line="4" pos:column="9">static<pos:position pos:line="4" pos:column="15"/></specifier> <type><name pos:line="4" pos:column="16">char<pos:position pos:line="4" pos:column="20"/></name> <modifier pos:line="4" pos:column="21">*<pos:position pos:line="4" pos:column="22"/></modifier></type><name pos:line="4" pos:column="22">buf1<pos:position pos:line="4" pos:column="26"/></name></decl>;<pos:position pos:line="4" pos:column="27"/></decl_stmt>
	<decl_stmt><decl><specifier pos:line="5" pos:column="9">static<pos:position pos:line="5" pos:column="15"/></specifier> <type><name pos:line="5" pos:column="16">int32<pos:position pos:line="5" pos:column="21"/></name></type> <name pos:line="5" pos:column="22">len1<pos:position pos:line="5" pos:column="26"/></name></decl>;<pos:position pos:line="5" pos:column="27"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">mdfour<pos:position pos:line="6" pos:column="22"/></name></name></type> <name pos:line="6" pos:column="23">m<pos:position pos:line="6" pos:column="24"/></name></decl>;<pos:position pos:line="6" pos:column="25"/></decl_stmt>

	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><name pos:line="8" pos:column="13">len<pos:position pos:line="8" pos:column="16"/></name> <operator pos:line="8" pos:column="17">&gt;<pos:position pos:line="8" pos:column="21"/></operator> <name pos:line="8" pos:column="19">len1<pos:position pos:line="8" pos:column="23"/></name></expr>)<pos:position pos:line="8" pos:column="24"/></condition><then pos:line="8" pos:column="24"> <block pos:line="8" pos:column="25">{
		<if pos:line="9" pos:column="17">if <condition pos:line="9" pos:column="20">(<expr><name pos:line="9" pos:column="21">buf1<pos:position pos:line="9" pos:column="25"/></name></expr>)<pos:position pos:line="9" pos:column="26"/></condition><then pos:line="9" pos:column="26">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="10" pos:column="25">free<pos:position pos:line="10" pos:column="29"/></name><argument_list pos:line="10" pos:column="29">(<argument><expr><name pos:line="10" pos:column="30">buf1<pos:position pos:line="10" pos:column="34"/></name></expr></argument>)<pos:position pos:line="10" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="36"/></expr_stmt></block></then></if>
		<expr_stmt><expr><name pos:line="11" pos:column="17">buf1<pos:position pos:line="11" pos:column="21"/></name> <operator pos:line="11" pos:column="22">=<pos:position pos:line="11" pos:column="23"/></operator> <call><name pos:line="11" pos:column="24">new_array<pos:position pos:line="11" pos:column="33"/></name><argument_list pos:line="11" pos:column="33">(<argument><expr><name pos:line="11" pos:column="34">char<pos:position pos:line="11" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="40">len<pos:position pos:line="11" pos:column="43"/></name><operator pos:line="11" pos:column="43">+<pos:position pos:line="11" pos:column="44"/></operator><literal type="number" pos:line="11" pos:column="44">4<pos:position pos:line="11" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="47"/></expr_stmt>
		<expr_stmt><expr><name pos:line="12" pos:column="17">len1<pos:position pos:line="12" pos:column="21"/></name> <operator pos:line="12" pos:column="22">=<pos:position pos:line="12" pos:column="23"/></operator> <name pos:line="12" pos:column="24">len<pos:position pos:line="12" pos:column="27"/></name></expr>;<pos:position pos:line="12" pos:column="28"/></expr_stmt>
		<if pos:line="13" pos:column="17">if <condition pos:line="13" pos:column="20">(<expr><operator pos:line="13" pos:column="21">!<pos:position pos:line="13" pos:column="22"/></operator><name pos:line="13" pos:column="22">buf1<pos:position pos:line="13" pos:column="26"/></name></expr>)<pos:position pos:line="13" pos:column="27"/></condition><then pos:line="13" pos:column="27">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="14" pos:column="25">out_of_memory<pos:position pos:line="14" pos:column="38"/></name><argument_list pos:line="14" pos:column="38">(<argument><expr><literal type="string" pos:line="14" pos:column="39">"get_checksum2"<pos:position pos:line="14" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="56"/></expr_stmt></block></then></if>
	}<pos:position pos:line="15" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="17" pos:column="9">mdfour_begin<pos:position pos:line="17" pos:column="21"/></name><argument_list pos:line="17" pos:column="21">(<argument><expr><operator pos:line="17" pos:column="22">&amp;<pos:position pos:line="17" pos:column="27"/></operator><name pos:line="17" pos:column="23">m<pos:position pos:line="17" pos:column="24"/></name></expr></argument>)<pos:position pos:line="17" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="26"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="19" pos:column="9">memcpy<pos:position pos:line="19" pos:column="15"/></name><argument_list pos:line="19" pos:column="15">(<argument><expr><name pos:line="19" pos:column="16">buf1<pos:position pos:line="19" pos:column="20"/></name></expr></argument>,<argument><expr><name pos:line="19" pos:column="21">buf<pos:position pos:line="19" pos:column="24"/></name></expr></argument>,<argument><expr><name pos:line="19" pos:column="25">len<pos:position pos:line="19" pos:column="28"/></name></expr></argument>)<pos:position pos:line="19" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="30"/></expr_stmt>
	<if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><name pos:line="20" pos:column="13">checksum_seed<pos:position pos:line="20" pos:column="26"/></name></expr>)<pos:position pos:line="20" pos:column="27"/></condition><then pos:line="20" pos:column="27"> <block pos:line="20" pos:column="28">{
		<expr_stmt><expr><call><name pos:line="21" pos:column="17">SIVAL<pos:position pos:line="21" pos:column="22"/></name><argument_list pos:line="21" pos:column="22">(<argument><expr><name pos:line="21" pos:column="23">buf1<pos:position pos:line="21" pos:column="27"/></name></expr></argument>,<argument><expr><name pos:line="21" pos:column="28">len<pos:position pos:line="21" pos:column="31"/></name></expr></argument>,<argument><expr><name pos:line="21" pos:column="32">checksum_seed<pos:position pos:line="21" pos:column="45"/></name></expr></argument>)<pos:position pos:line="21" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="47"/></expr_stmt>
		<expr_stmt><expr><name pos:line="22" pos:column="17">len<pos:position pos:line="22" pos:column="20"/></name> <operator pos:line="22" pos:column="21">+=<pos:position pos:line="22" pos:column="23"/></operator> <literal type="number" pos:line="22" pos:column="24">4<pos:position pos:line="22" pos:column="25"/></literal></expr>;<pos:position pos:line="22" pos:column="26"/></expr_stmt>
	}<pos:position pos:line="23" pos:column="10"/></block></then></if>

	<for pos:line="25" pos:column="9">for<control pos:line="25" pos:column="12">(<init><expr><name pos:line="25" pos:column="13">i<pos:position pos:line="25" pos:column="14"/></name> <operator pos:line="25" pos:column="15">=<pos:position pos:line="25" pos:column="16"/></operator> <literal type="number" pos:line="25" pos:column="17">0<pos:position pos:line="25" pos:column="18"/></literal></expr>;<pos:position pos:line="25" pos:column="19"/></init> <condition><expr><name pos:line="25" pos:column="20">i<pos:position pos:line="25" pos:column="21"/></name> <operator pos:line="25" pos:column="22">+<pos:position pos:line="25" pos:column="23"/></operator> <name pos:line="25" pos:column="24">CSUM_CHUNK<pos:position pos:line="25" pos:column="34"/></name> <operator pos:line="25" pos:column="35">&lt;=<pos:position pos:line="25" pos:column="40"/></operator> <name pos:line="25" pos:column="38">len<pos:position pos:line="25" pos:column="41"/></name></expr>;<pos:position pos:line="25" pos:column="42"/></condition> <incr><expr><name pos:line="25" pos:column="43">i<pos:position pos:line="25" pos:column="44"/></name> <operator pos:line="25" pos:column="45">+=<pos:position pos:line="25" pos:column="47"/></operator> <name pos:line="25" pos:column="48">CSUM_CHUNK<pos:position pos:line="25" pos:column="58"/></name></expr></incr>)<pos:position pos:line="25" pos:column="59"/></control> <block pos:line="25" pos:column="60">{
		<expr_stmt><expr><call><name pos:line="26" pos:column="17">mdfour_update<pos:position pos:line="26" pos:column="30"/></name><argument_list pos:line="26" pos:column="30">(<argument><expr><operator pos:line="26" pos:column="31">&amp;<pos:position pos:line="26" pos:column="36"/></operator><name pos:line="26" pos:column="32">m<pos:position pos:line="26" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="26" pos:column="35">(<pos:position pos:line="26" pos:column="36"/></operator><name pos:line="26" pos:column="36">uchar<pos:position pos:line="26" pos:column="41"/></name> <operator pos:line="26" pos:column="42">*<pos:position pos:line="26" pos:column="43"/></operator><operator pos:line="26" pos:column="43">)<pos:position pos:line="26" pos:column="44"/></operator><operator pos:line="26" pos:column="44">(<pos:position pos:line="26" pos:column="45"/></operator><name pos:line="26" pos:column="45">buf1<pos:position pos:line="26" pos:column="49"/></name><operator pos:line="26" pos:column="49">+<pos:position pos:line="26" pos:column="50"/></operator><name pos:line="26" pos:column="50">i<pos:position pos:line="26" pos:column="51"/></name><operator pos:line="26" pos:column="51">)<pos:position pos:line="26" pos:column="52"/></operator></expr></argument>, <argument><expr><name pos:line="26" pos:column="54">CSUM_CHUNK<pos:position pos:line="26" pos:column="64"/></name></expr></argument>)<pos:position pos:line="26" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="66"/></expr_stmt>
	}<pos:position pos:line="27" pos:column="10"/></block></for>
	<comment type="block" pos:line="28" pos:column="9">/*
	 * Prior to version 27 an incorrect MD4 checksum was computed
	 * by failing to call mdfour_tail() for block sizes that
	 * are multiples of 64.  This is fixed by calling mdfour_update()
	 * even when there are no more bytes.
	 */</comment>
	<if pos:line="34" pos:column="9">if <condition pos:line="34" pos:column="12">(<expr><name pos:line="34" pos:column="13">len<pos:position pos:line="34" pos:column="16"/></name> <operator pos:line="34" pos:column="17">-<pos:position pos:line="34" pos:column="18"/></operator> <name pos:line="34" pos:column="19">i<pos:position pos:line="34" pos:column="20"/></name> <operator pos:line="34" pos:column="21">&gt;<pos:position pos:line="34" pos:column="25"/></operator> <literal type="number" pos:line="34" pos:column="23">0<pos:position pos:line="34" pos:column="24"/></literal> <operator pos:line="34" pos:column="25">||<pos:position pos:line="34" pos:column="27"/></operator> <name pos:line="34" pos:column="28">protocol_version<pos:position pos:line="34" pos:column="44"/></name> <operator pos:line="34" pos:column="45">&gt;=<pos:position pos:line="34" pos:column="50"/></operator> <literal type="number" pos:line="34" pos:column="48">27<pos:position pos:line="34" pos:column="50"/></literal></expr>)<pos:position pos:line="34" pos:column="51"/></condition><then pos:line="34" pos:column="51"> <block pos:line="34" pos:column="52">{
		<expr_stmt><expr><call><name pos:line="35" pos:column="17">mdfour_update<pos:position pos:line="35" pos:column="30"/></name><argument_list pos:line="35" pos:column="30">(<argument><expr><operator pos:line="35" pos:column="31">&amp;<pos:position pos:line="35" pos:column="36"/></operator><name pos:line="35" pos:column="32">m<pos:position pos:line="35" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="35" pos:column="35">(<pos:position pos:line="35" pos:column="36"/></operator><name pos:line="35" pos:column="36">uchar<pos:position pos:line="35" pos:column="41"/></name> <operator pos:line="35" pos:column="42">*<pos:position pos:line="35" pos:column="43"/></operator><operator pos:line="35" pos:column="43">)<pos:position pos:line="35" pos:column="44"/></operator><operator pos:line="35" pos:column="44">(<pos:position pos:line="35" pos:column="45"/></operator><name pos:line="35" pos:column="45">buf1<pos:position pos:line="35" pos:column="49"/></name><operator pos:line="35" pos:column="49">+<pos:position pos:line="35" pos:column="50"/></operator><name pos:line="35" pos:column="50">i<pos:position pos:line="35" pos:column="51"/></name><operator pos:line="35" pos:column="51">)<pos:position pos:line="35" pos:column="52"/></operator></expr></argument>, <argument><expr><operator pos:line="35" pos:column="54">(<pos:position pos:line="35" pos:column="55"/></operator><name pos:line="35" pos:column="55">len<pos:position pos:line="35" pos:column="58"/></name><operator pos:line="35" pos:column="58">-<pos:position pos:line="35" pos:column="59"/></operator><name pos:line="35" pos:column="59">i<pos:position pos:line="35" pos:column="60"/></name><operator pos:line="35" pos:column="60">)<pos:position pos:line="35" pos:column="61"/></operator></expr></argument>)<pos:position pos:line="35" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="63"/></expr_stmt>
	}<pos:position pos:line="36" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="38" pos:column="9">mdfour_result<pos:position pos:line="38" pos:column="22"/></name><argument_list pos:line="38" pos:column="22">(<argument><expr><operator pos:line="38" pos:column="23">&amp;<pos:position pos:line="38" pos:column="28"/></operator><name pos:line="38" pos:column="24">m<pos:position pos:line="38" pos:column="25"/></name></expr></argument>, <argument><expr><operator pos:line="38" pos:column="27">(<pos:position pos:line="38" pos:column="28"/></operator><name pos:line="38" pos:column="28">uchar<pos:position pos:line="38" pos:column="33"/></name> <operator pos:line="38" pos:column="34">*<pos:position pos:line="38" pos:column="35"/></operator><operator pos:line="38" pos:column="35">)<pos:position pos:line="38" pos:column="36"/></operator><name pos:line="38" pos:column="36">sum<pos:position pos:line="38" pos:column="39"/></name></expr></argument>)<pos:position pos:line="38" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="41"/></expr_stmt>
}<pos:position pos:line="39" pos:column="2"/></block></function></unit>
