<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_292_rsync-2.0.3.cpp" pos:tabs="8"><function_decl><type><name pos:line="1" pos:column="1">local<pos:position pos:line="1" pos:column="6"/></name> <name pos:line="1" pos:column="7">void<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">ffree<pos:position pos:line="1" pos:column="17"/></name><parameter_list pos:line="1" pos:column="17">(<parameter><decl><type><name pos:line="1" pos:column="18">q<pos:position pos:line="1" pos:column="19"/></name></type></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="21">p<pos:position pos:line="1" pos:column="22"/></name></type></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="24">n<pos:position pos:line="1" pos:column="25"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="26"/></parameter_list>
<decl_stmt><decl><type><name pos:line="2" pos:column="1">voidpf<pos:position pos:line="2" pos:column="7"/></name></type> <name pos:line="2" pos:column="8">q<pos:position pos:line="2" pos:column="9"/></name></decl>;<pos:position pos:line="2" pos:column="10"/></decl_stmt>
<decl_stmt><decl><type><name pos:line="3" pos:column="1">voidpf<pos:position pos:line="3" pos:column="7"/></name></type> <name pos:line="3" pos:column="8">p<pos:position pos:line="3" pos:column="9"/></name></decl>;<pos:position pos:line="3" pos:column="10"/></decl_stmt>
<decl_stmt><decl><type><name pos:line="4" pos:column="1">uInt<pos:position pos:line="4" pos:column="5"/></name></type> <name pos:line="4" pos:column="6">n<pos:position pos:line="4" pos:column="7"/></name></decl>;<pos:position pos:line="4" pos:column="8"/></decl_stmt>
<block pos:line="5" pos:column="1">{
  <expr_stmt><expr><call><name pos:line="6" pos:column="3">Assert<pos:position pos:line="6" pos:column="9"/></name><argument_list pos:line="6" pos:column="9">(<argument><expr><literal type="number" pos:line="6" pos:column="10">0<pos:position pos:line="6" pos:column="11"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="6" pos:column="13">"inflate_trees ffree called!"<pos:position pos:line="6" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="44"/></expr_stmt>
  <if pos:line="7" pos:column="3">if <condition pos:line="7" pos:column="6">(<expr><name pos:line="7" pos:column="7">q<pos:position pos:line="7" pos:column="8"/></name></expr>)<pos:position pos:line="7" pos:column="9"/></condition><then pos:line="7" pos:column="9"> <block type="pseudo"><expr_stmt><expr><name pos:line="7" pos:column="10">q<pos:position pos:line="7" pos:column="11"/></name> <operator pos:line="7" pos:column="12">=<pos:position pos:line="7" pos:column="13"/></operator> <name pos:line="7" pos:column="14">p<pos:position pos:line="7" pos:column="15"/></name></expr>;<pos:position pos:line="7" pos:column="16"/></expr_stmt></block></then></if> <comment type="block" pos:line="7" pos:column="17">/* to make some compilers happy */</comment>
}<pos:position pos:line="8" pos:column="2"/></block></function_decl></unit>
