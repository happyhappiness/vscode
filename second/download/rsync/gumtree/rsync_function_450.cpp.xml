<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_function_450.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">write_longint<pos:position pos:line="1" pos:column="19"/></name><parameter_list pos:line="1" pos:column="19">(<parameter><decl><type><name pos:line="1" pos:column="20">int<pos:position pos:line="1" pos:column="23"/></name></type> <name pos:line="1" pos:column="24">f<pos:position pos:line="1" pos:column="25"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="27">int64<pos:position pos:line="1" pos:column="32"/></name></type> <name pos:line="1" pos:column="33">x<pos:position pos:line="1" pos:column="34"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="35"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><specifier pos:line="3" pos:column="9">extern<pos:position pos:line="3" pos:column="15"/></specifier> <type><name pos:line="3" pos:column="16">int<pos:position pos:line="3" pos:column="19"/></name></type> <name pos:line="3" pos:column="20">remote_version<pos:position pos:line="3" pos:column="34"/></name></decl>;<pos:position pos:line="3" pos:column="35"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name></type> <name><name pos:line="4" pos:column="14">b<pos:position pos:line="4" pos:column="15"/></name><index pos:line="4" pos:column="15">[<expr><literal type="number" pos:line="4" pos:column="16">8<pos:position pos:line="4" pos:column="17"/></literal></expr>]<pos:position pos:line="4" pos:column="18"/></index></name></decl>;<pos:position pos:line="4" pos:column="19"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">ret<pos:position pos:line="5" pos:column="16"/></name></decl>;<pos:position pos:line="5" pos:column="17"/></decl_stmt>

	<if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<expr><name pos:line="7" pos:column="13">remote_version<pos:position pos:line="7" pos:column="27"/></name> <operator pos:line="7" pos:column="28">&lt;<pos:position pos:line="7" pos:column="32"/></operator> <literal type="number" pos:line="7" pos:column="30">16<pos:position pos:line="7" pos:column="32"/></literal> <operator pos:line="7" pos:column="33">||<pos:position pos:line="7" pos:column="35"/></operator> <name pos:line="7" pos:column="36">x<pos:position pos:line="7" pos:column="37"/></name> <operator pos:line="7" pos:column="38">&lt;=<pos:position pos:line="7" pos:column="43"/></operator> <literal type="number" pos:line="7" pos:column="41">0x7FFFFFFF<pos:position pos:line="7" pos:column="51"/></literal></expr>)<pos:position pos:line="7" pos:column="52"/></condition><then pos:line="7" pos:column="52"> <block pos:line="7" pos:column="53">{
		<expr_stmt><expr><call><name pos:line="8" pos:column="17">write_int<pos:position pos:line="8" pos:column="26"/></name><argument_list pos:line="8" pos:column="26">(<argument><expr><name pos:line="8" pos:column="27">f<pos:position pos:line="8" pos:column="28"/></name></expr></argument>, <argument><expr><operator pos:line="8" pos:column="30">(<pos:position pos:line="8" pos:column="31"/></operator><name pos:line="8" pos:column="31">int<pos:position pos:line="8" pos:column="34"/></name><operator pos:line="8" pos:column="34">)<pos:position pos:line="8" pos:column="35"/></operator><name pos:line="8" pos:column="35">x<pos:position pos:line="8" pos:column="36"/></name></expr></argument>)<pos:position pos:line="8" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="38"/></expr_stmt>
		<return pos:line="9" pos:column="17">return;<pos:position pos:line="9" pos:column="24"/></return>
	}<pos:position pos:line="10" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="12" pos:column="9">write_int<pos:position pos:line="12" pos:column="18"/></name><argument_list pos:line="12" pos:column="18">(<argument><expr><name pos:line="12" pos:column="19">f<pos:position pos:line="12" pos:column="20"/></name></expr></argument>, <argument><expr><operator pos:line="12" pos:column="22">-<pos:position pos:line="12" pos:column="23"/></operator><literal type="number" pos:line="12" pos:column="23">1<pos:position pos:line="12" pos:column="24"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="26"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="13" pos:column="9">SIVAL<pos:position pos:line="13" pos:column="14"/></name><argument_list pos:line="13" pos:column="14">(<argument><expr><name pos:line="13" pos:column="15">b<pos:position pos:line="13" pos:column="16"/></name></expr></argument>,<argument><expr><literal type="number" pos:line="13" pos:column="17">0<pos:position pos:line="13" pos:column="18"/></literal></expr></argument>,<argument><expr><operator pos:line="13" pos:column="19">(<pos:position pos:line="13" pos:column="20"/></operator><name pos:line="13" pos:column="20">x<pos:position pos:line="13" pos:column="21"/></name><operator pos:line="13" pos:column="21">&amp;<pos:position pos:line="13" pos:column="26"/></operator><literal type="number" pos:line="13" pos:column="22">0xFFFFFFFF<pos:position pos:line="13" pos:column="32"/></literal><operator pos:line="13" pos:column="32">)<pos:position pos:line="13" pos:column="33"/></operator></expr></argument>)<pos:position pos:line="13" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="35"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="14" pos:column="9">SIVAL<pos:position pos:line="14" pos:column="14"/></name><argument_list pos:line="14" pos:column="14">(<argument><expr><name pos:line="14" pos:column="15">b<pos:position pos:line="14" pos:column="16"/></name></expr></argument>,<argument><expr><literal type="number" pos:line="14" pos:column="17">4<pos:position pos:line="14" pos:column="18"/></literal></expr></argument>,<argument><expr><operator pos:line="14" pos:column="19">(<pos:position pos:line="14" pos:column="20"/></operator><operator pos:line="14" pos:column="20">(<pos:position pos:line="14" pos:column="21"/></operator><name pos:line="14" pos:column="21">x<pos:position pos:line="14" pos:column="22"/></name><operator pos:line="14" pos:column="22">&gt;&gt;<pos:position pos:line="14" pos:column="27"/></operator><literal type="number" pos:line="14" pos:column="24">32<pos:position pos:line="14" pos:column="26"/></literal><operator pos:line="14" pos:column="26">)<pos:position pos:line="14" pos:column="27"/></operator><operator pos:line="14" pos:column="27">&amp;<pos:position pos:line="14" pos:column="32"/></operator><literal type="number" pos:line="14" pos:column="28">0xFFFFFFFF<pos:position pos:line="14" pos:column="38"/></literal><operator pos:line="14" pos:column="38">)<pos:position pos:line="14" pos:column="39"/></operator></expr></argument>)<pos:position pos:line="14" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="41"/></expr_stmt>

	<if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><operator pos:line="16" pos:column="13">(<pos:position pos:line="16" pos:column="14"/></operator><name pos:line="16" pos:column="14">ret<pos:position pos:line="16" pos:column="17"/></name><operator pos:line="16" pos:column="17">=<pos:position pos:line="16" pos:column="18"/></operator><call><name pos:line="16" pos:column="18">writefd<pos:position pos:line="16" pos:column="25"/></name><argument_list pos:line="16" pos:column="25">(<argument><expr><name pos:line="16" pos:column="26">f<pos:position pos:line="16" pos:column="27"/></name></expr></argument>,<argument><expr><name pos:line="16" pos:column="28">b<pos:position pos:line="16" pos:column="29"/></name></expr></argument>,<argument><expr><literal type="number" pos:line="16" pos:column="30">8<pos:position pos:line="16" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="32"/></argument_list></call><operator pos:line="16" pos:column="32">)<pos:position pos:line="16" pos:column="33"/></operator> <operator pos:line="16" pos:column="34">!=<pos:position pos:line="16" pos:column="36"/></operator> <literal type="number" pos:line="16" pos:column="37">8<pos:position pos:line="16" pos:column="38"/></literal></expr>)<pos:position pos:line="16" pos:column="39"/></condition><then pos:line="16" pos:column="39"> <block pos:line="16" pos:column="40">{
		<expr_stmt><expr><call><name pos:line="17" pos:column="17">fprintf<pos:position pos:line="17" pos:column="24"/></name><argument_list pos:line="17" pos:column="24">(<argument><expr><name pos:line="17" pos:column="25">FERROR<pos:position pos:line="17" pos:column="31"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="17" pos:column="32">"write_longint failed : %s\n"<pos:position pos:line="17" pos:column="61"/></literal></expr></argument>,
			<argument><expr><ternary><condition><expr><name pos:line="18" pos:column="25">ret<pos:position pos:line="18" pos:column="28"/></name><operator pos:line="18" pos:column="28">==<pos:position pos:line="18" pos:column="30"/></operator><operator pos:line="18" pos:column="30">-<pos:position pos:line="18" pos:column="31"/></operator><literal type="number" pos:line="18" pos:column="31">1<pos:position pos:line="18" pos:column="32"/></literal></expr>?<pos:position pos:line="18" pos:column="33"/></condition><then><expr><call><name pos:line="18" pos:column="33">strerror<pos:position pos:line="18" pos:column="41"/></name><argument_list pos:line="18" pos:column="41">(<argument><expr><name pos:line="18" pos:column="42">errno<pos:position pos:line="18" pos:column="47"/></name></expr></argument>)<pos:position pos:line="18" pos:column="48"/></argument_list></call></expr></then><else pos:line="18" pos:column="48">:<expr><literal type="string" pos:line="18" pos:column="49">"EOF"<pos:position pos:line="18" pos:column="54"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="18" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="56"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="19" pos:column="17">exit_cleanup<pos:position pos:line="19" pos:column="29"/></name><argument_list pos:line="19" pos:column="29">(<argument><expr><literal type="number" pos:line="19" pos:column="30">1<pos:position pos:line="19" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="33"/></expr_stmt>
	}<pos:position pos:line="20" pos:column="10"/></block></then></if>
	<expr_stmt><expr><name pos:line="21" pos:column="9">total_written<pos:position pos:line="21" pos:column="22"/></name> <operator pos:line="21" pos:column="23">+=<pos:position pos:line="21" pos:column="25"/></operator> <literal type="number" pos:line="21" pos:column="26">8<pos:position pos:line="21" pos:column="27"/></literal></expr>;<pos:position pos:line="21" pos:column="28"/></expr_stmt>
}<pos:position pos:line="22" pos:column="2"/></block></function></unit>
