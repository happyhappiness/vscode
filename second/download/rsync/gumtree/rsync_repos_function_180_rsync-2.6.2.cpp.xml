<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_180_rsync-2.6.2.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">log_open<pos:position pos:line="1" pos:column="14"/></name><parameter_list pos:line="1" pos:column="14">(<parameter><decl><type><name pos:line="1" pos:column="15">void<pos:position pos:line="1" pos:column="19"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="20"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<if pos:line="3" pos:column="9">if <condition pos:line="3" pos:column="12">(<expr><name pos:line="3" pos:column="13">logfname<pos:position pos:line="3" pos:column="21"/></name> <operator pos:line="3" pos:column="22">&amp;&amp;<pos:position pos:line="3" pos:column="32"/></operator> <operator pos:line="3" pos:column="25">!<pos:position pos:line="3" pos:column="26"/></operator><name pos:line="3" pos:column="26">logfile<pos:position pos:line="3" pos:column="33"/></name></expr>)<pos:position pos:line="3" pos:column="34"/></condition><then pos:line="3" pos:column="34"> <block pos:line="3" pos:column="35">{
		<decl_stmt><decl><specifier pos:line="4" pos:column="17">extern<pos:position pos:line="4" pos:column="23"/></specifier> <type><name pos:line="4" pos:column="24">int<pos:position pos:line="4" pos:column="27"/></name></type> <name pos:line="4" pos:column="28">orig_umask<pos:position pos:line="4" pos:column="38"/></name></decl>;<pos:position pos:line="4" pos:column="39"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="5" pos:column="17">int<pos:position pos:line="5" pos:column="20"/></name></type> <name pos:line="5" pos:column="21">old_umask<pos:position pos:line="5" pos:column="30"/></name> <init pos:line="5" pos:column="31">= <expr><call><name pos:line="5" pos:column="33">umask<pos:position pos:line="5" pos:column="38"/></name><argument_list pos:line="5" pos:column="38">(<argument><expr><literal type="number" pos:line="5" pos:column="39">022<pos:position pos:line="5" pos:column="42"/></literal> <operator pos:line="5" pos:column="43">|<pos:position pos:line="5" pos:column="44"/></operator> <name pos:line="5" pos:column="45">orig_umask<pos:position pos:line="5" pos:column="55"/></name></expr></argument>)<pos:position pos:line="5" pos:column="56"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="57"/></decl_stmt>
		<expr_stmt><expr><name pos:line="6" pos:column="17">logfile<pos:position pos:line="6" pos:column="24"/></name> <operator pos:line="6" pos:column="25">=<pos:position pos:line="6" pos:column="26"/></operator> <call><name pos:line="6" pos:column="27">fopen<pos:position pos:line="6" pos:column="32"/></name><argument_list pos:line="6" pos:column="32">(<argument><expr><name pos:line="6" pos:column="33">logfname<pos:position pos:line="6" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="6" pos:column="43">"a"<pos:position pos:line="6" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="48"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="7" pos:column="17">umask<pos:position pos:line="7" pos:column="22"/></name><argument_list pos:line="7" pos:column="22">(<argument><expr><name pos:line="7" pos:column="23">old_umask<pos:position pos:line="7" pos:column="32"/></name></expr></argument>)<pos:position pos:line="7" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="34"/></expr_stmt>
	}<pos:position pos:line="8" pos:column="10"/></block></then></if>
}<pos:position pos:line="9" pos:column="2"/></block></function></unit>
