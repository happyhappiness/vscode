<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_303_rsync-2.6.6.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">file_checksum<pos:position pos:line="1" pos:column="19"/></name><parameter_list pos:line="1" pos:column="19">(<parameter><decl><type><name pos:line="1" pos:column="20">char<pos:position pos:line="1" pos:column="24"/></name> <modifier pos:line="1" pos:column="25">*<pos:position pos:line="1" pos:column="26"/></modifier></type><name pos:line="1" pos:column="26">fname<pos:position pos:line="1" pos:column="31"/></name></decl></parameter>,<parameter><decl><type><name pos:line="1" pos:column="32">char<pos:position pos:line="1" pos:column="36"/></name> <modifier pos:line="1" pos:column="37">*<pos:position pos:line="1" pos:column="38"/></modifier></type><name pos:line="1" pos:column="38">sum<pos:position pos:line="1" pos:column="41"/></name></decl></parameter>,<parameter><decl><type><name pos:line="1" pos:column="42">OFF_T<pos:position pos:line="1" pos:column="47"/></name></type> <name pos:line="1" pos:column="48">size<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="53"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">OFF_T<pos:position pos:line="3" pos:column="14"/></name></type> <name pos:line="3" pos:column="15">i<pos:position pos:line="3" pos:column="16"/></name></decl>;<pos:position pos:line="3" pos:column="17"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">map_struct<pos:position pos:line="4" pos:column="26"/></name></name> <modifier pos:line="4" pos:column="27">*<pos:position pos:line="4" pos:column="28"/></modifier></type><name pos:line="4" pos:column="28">buf<pos:position pos:line="4" pos:column="31"/></name></decl>;<pos:position pos:line="4" pos:column="32"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">fd<pos:position pos:line="5" pos:column="15"/></name></decl>;<pos:position pos:line="5" pos:column="16"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">OFF_T<pos:position pos:line="6" pos:column="14"/></name></type> <name pos:line="6" pos:column="15">len<pos:position pos:line="6" pos:column="18"/></name> <init pos:line="6" pos:column="19">= <expr><name pos:line="6" pos:column="21">size<pos:position pos:line="6" pos:column="25"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="26"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="7" pos:column="9">struct<pos:position pos:line="7" pos:column="15"/></name> <name pos:line="7" pos:column="16">mdfour<pos:position pos:line="7" pos:column="22"/></name></name></type> <name pos:line="7" pos:column="23">m<pos:position pos:line="7" pos:column="24"/></name></decl>;<pos:position pos:line="7" pos:column="25"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="9" pos:column="9">memset<pos:position pos:line="9" pos:column="15"/></name><argument_list pos:line="9" pos:column="15">(<argument><expr><name pos:line="9" pos:column="16">sum<pos:position pos:line="9" pos:column="19"/></name></expr></argument>,<argument><expr><literal type="number" pos:line="9" pos:column="20">0<pos:position pos:line="9" pos:column="21"/></literal></expr></argument>,<argument><expr><name pos:line="9" pos:column="22">MD4_SUM_LENGTH<pos:position pos:line="9" pos:column="36"/></name></expr></argument>)<pos:position pos:line="9" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="38"/></expr_stmt>

	<expr_stmt><expr><name pos:line="11" pos:column="9">fd<pos:position pos:line="11" pos:column="11"/></name> <operator pos:line="11" pos:column="12">=<pos:position pos:line="11" pos:column="13"/></operator> <call><name pos:line="11" pos:column="14">do_open<pos:position pos:line="11" pos:column="21"/></name><argument_list pos:line="11" pos:column="21">(<argument><expr><name pos:line="11" pos:column="22">fname<pos:position pos:line="11" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="29">O_RDONLY<pos:position pos:line="11" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="11" pos:column="39">0<pos:position pos:line="11" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="42"/></expr_stmt>
	<if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><name pos:line="12" pos:column="13">fd<pos:position pos:line="12" pos:column="15"/></name> <operator pos:line="12" pos:column="16">==<pos:position pos:line="12" pos:column="18"/></operator> <operator pos:line="12" pos:column="19">-<pos:position pos:line="12" pos:column="20"/></operator><literal type="number" pos:line="12" pos:column="20">1<pos:position pos:line="12" pos:column="21"/></literal></expr>)<pos:position pos:line="12" pos:column="22"/></condition><then pos:line="12" pos:column="22">
		<block type="pseudo"><return pos:line="13" pos:column="17">return;<pos:position pos:line="13" pos:column="24"/></return></block></then></if>

	<expr_stmt><expr><name pos:line="15" pos:column="9">buf<pos:position pos:line="15" pos:column="12"/></name> <operator pos:line="15" pos:column="13">=<pos:position pos:line="15" pos:column="14"/></operator> <call><name pos:line="15" pos:column="15">map_file<pos:position pos:line="15" pos:column="23"/></name><argument_list pos:line="15" pos:column="23">(<argument><expr><name pos:line="15" pos:column="24">fd<pos:position pos:line="15" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="28">size<pos:position pos:line="15" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="34">MAX_MAP_SIZE<pos:position pos:line="15" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="48">CSUM_CHUNK<pos:position pos:line="15" pos:column="58"/></name></expr></argument>)<pos:position pos:line="15" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="60"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="17" pos:column="9">mdfour_begin<pos:position pos:line="17" pos:column="21"/></name><argument_list pos:line="17" pos:column="21">(<argument><expr><operator pos:line="17" pos:column="22">&amp;<pos:position pos:line="17" pos:column="27"/></operator><name pos:line="17" pos:column="23">m<pos:position pos:line="17" pos:column="24"/></name></expr></argument>)<pos:position pos:line="17" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="26"/></expr_stmt>

	<for pos:line="19" pos:column="9">for<control pos:line="19" pos:column="12">(<init><expr><name pos:line="19" pos:column="13">i<pos:position pos:line="19" pos:column="14"/></name> <operator pos:line="19" pos:column="15">=<pos:position pos:line="19" pos:column="16"/></operator> <literal type="number" pos:line="19" pos:column="17">0<pos:position pos:line="19" pos:column="18"/></literal></expr>;<pos:position pos:line="19" pos:column="19"/></init> <condition><expr><name pos:line="19" pos:column="20">i<pos:position pos:line="19" pos:column="21"/></name> <operator pos:line="19" pos:column="22">+<pos:position pos:line="19" pos:column="23"/></operator> <name pos:line="19" pos:column="24">CSUM_CHUNK<pos:position pos:line="19" pos:column="34"/></name> <operator pos:line="19" pos:column="35">&lt;=<pos:position pos:line="19" pos:column="40"/></operator> <name pos:line="19" pos:column="38">len<pos:position pos:line="19" pos:column="41"/></name></expr>;<pos:position pos:line="19" pos:column="42"/></condition> <incr><expr><name pos:line="19" pos:column="43">i<pos:position pos:line="19" pos:column="44"/></name> <operator pos:line="19" pos:column="45">+=<pos:position pos:line="19" pos:column="47"/></operator> <name pos:line="19" pos:column="48">CSUM_CHUNK<pos:position pos:line="19" pos:column="58"/></name></expr></incr>)<pos:position pos:line="19" pos:column="59"/></control> <block pos:line="19" pos:column="60">{
		<expr_stmt><expr><call><name pos:line="20" pos:column="17">mdfour_update<pos:position pos:line="20" pos:column="30"/></name><argument_list pos:line="20" pos:column="30">(<argument><expr><operator pos:line="20" pos:column="31">&amp;<pos:position pos:line="20" pos:column="36"/></operator><name pos:line="20" pos:column="32">m<pos:position pos:line="20" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="20" pos:column="35">(<pos:position pos:line="20" pos:column="36"/></operator><name pos:line="20" pos:column="36">uchar<pos:position pos:line="20" pos:column="41"/></name> <operator pos:line="20" pos:column="42">*<pos:position pos:line="20" pos:column="43"/></operator><operator pos:line="20" pos:column="43">)<pos:position pos:line="20" pos:column="44"/></operator><call><name pos:line="20" pos:column="44">map_ptr<pos:position pos:line="20" pos:column="51"/></name><argument_list pos:line="20" pos:column="51">(<argument><expr><name pos:line="20" pos:column="52">buf<pos:position pos:line="20" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="57">i<pos:position pos:line="20" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="60">CSUM_CHUNK<pos:position pos:line="20" pos:column="70"/></name></expr></argument>)<pos:position pos:line="20" pos:column="71"/></argument_list></call></expr></argument>,
			      <argument><expr><name pos:line="21" pos:column="31">CSUM_CHUNK<pos:position pos:line="21" pos:column="41"/></name></expr></argument>)<pos:position pos:line="21" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="43"/></expr_stmt>
	}<pos:position pos:line="22" pos:column="10"/></block></for>

	<comment type="block" pos:line="24" pos:column="9">/* Prior to version 27 an incorrect MD4 checksum was computed
	 * by failing to call mdfour_tail() for block sizes that
	 * are multiples of 64.  This is fixed by calling mdfour_update()
	 * even when there are no more bytes. */</comment>
	<if pos:line="28" pos:column="9">if <condition pos:line="28" pos:column="12">(<expr><name pos:line="28" pos:column="13">len<pos:position pos:line="28" pos:column="16"/></name> <operator pos:line="28" pos:column="17">-<pos:position pos:line="28" pos:column="18"/></operator> <name pos:line="28" pos:column="19">i<pos:position pos:line="28" pos:column="20"/></name> <operator pos:line="28" pos:column="21">&gt;<pos:position pos:line="28" pos:column="25"/></operator> <literal type="number" pos:line="28" pos:column="23">0<pos:position pos:line="28" pos:column="24"/></literal> <operator pos:line="28" pos:column="25">||<pos:position pos:line="28" pos:column="27"/></operator> <name pos:line="28" pos:column="28">protocol_version<pos:position pos:line="28" pos:column="44"/></name> <operator pos:line="28" pos:column="45">&gt;=<pos:position pos:line="28" pos:column="50"/></operator> <literal type="number" pos:line="28" pos:column="48">27<pos:position pos:line="28" pos:column="50"/></literal></expr>)<pos:position pos:line="28" pos:column="51"/></condition><then pos:line="28" pos:column="51">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="29" pos:column="17">mdfour_update<pos:position pos:line="29" pos:column="30"/></name><argument_list pos:line="29" pos:column="30">(<argument><expr><operator pos:line="29" pos:column="31">&amp;<pos:position pos:line="29" pos:column="36"/></operator><name pos:line="29" pos:column="32">m<pos:position pos:line="29" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="29" pos:column="35">(<pos:position pos:line="29" pos:column="36"/></operator><name pos:line="29" pos:column="36">uchar<pos:position pos:line="29" pos:column="41"/></name> <operator pos:line="29" pos:column="42">*<pos:position pos:line="29" pos:column="43"/></operator><operator pos:line="29" pos:column="43">)<pos:position pos:line="29" pos:column="44"/></operator><call><name pos:line="29" pos:column="44">map_ptr<pos:position pos:line="29" pos:column="51"/></name><argument_list pos:line="29" pos:column="51">(<argument><expr><name pos:line="29" pos:column="52">buf<pos:position pos:line="29" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="57">i<pos:position pos:line="29" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="60">len<pos:position pos:line="29" pos:column="63"/></name><operator pos:line="29" pos:column="63">-<pos:position pos:line="29" pos:column="64"/></operator><name pos:line="29" pos:column="64">i<pos:position pos:line="29" pos:column="65"/></name></expr></argument>)<pos:position pos:line="29" pos:column="66"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="29" pos:column="68">len<pos:position pos:line="29" pos:column="71"/></name><operator pos:line="29" pos:column="71">-<pos:position pos:line="29" pos:column="72"/></operator><name pos:line="29" pos:column="72">i<pos:position pos:line="29" pos:column="73"/></name></expr></argument>)<pos:position pos:line="29" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="75"/></expr_stmt></block></then></if>

	<expr_stmt><expr><call><name pos:line="31" pos:column="9">mdfour_result<pos:position pos:line="31" pos:column="22"/></name><argument_list pos:line="31" pos:column="22">(<argument><expr><operator pos:line="31" pos:column="23">&amp;<pos:position pos:line="31" pos:column="28"/></operator><name pos:line="31" pos:column="24">m<pos:position pos:line="31" pos:column="25"/></name></expr></argument>, <argument><expr><operator pos:line="31" pos:column="27">(<pos:position pos:line="31" pos:column="28"/></operator><name pos:line="31" pos:column="28">uchar<pos:position pos:line="31" pos:column="33"/></name> <operator pos:line="31" pos:column="34">*<pos:position pos:line="31" pos:column="35"/></operator><operator pos:line="31" pos:column="35">)<pos:position pos:line="31" pos:column="36"/></operator><name pos:line="31" pos:column="36">sum<pos:position pos:line="31" pos:column="39"/></name></expr></argument>)<pos:position pos:line="31" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="41"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="33" pos:column="9">close<pos:position pos:line="33" pos:column="14"/></name><argument_list pos:line="33" pos:column="14">(<argument><expr><name pos:line="33" pos:column="15">fd<pos:position pos:line="33" pos:column="17"/></name></expr></argument>)<pos:position pos:line="33" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="19"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="34" pos:column="9">unmap_file<pos:position pos:line="34" pos:column="19"/></name><argument_list pos:line="34" pos:column="19">(<argument><expr><name pos:line="34" pos:column="20">buf<pos:position pos:line="34" pos:column="23"/></name></expr></argument>)<pos:position pos:line="34" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="25"/></expr_stmt>
}<pos:position pos:line="35" pos:column="2"/></block></function></unit>
