<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_483_rsync-2.5.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">execCommand<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name pos:line="1" pos:column="25">poptContext<pos:position pos:line="1" pos:column="36"/></name></type> <name pos:line="1" pos:column="37">con<pos:position pos:line="1" pos:column="40"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="41"/></parameter_list> <block pos:line="1" pos:column="42">{
    <decl_stmt><decl><type><specifier pos:line="2" pos:column="5">const<pos:position pos:line="2" pos:column="10"/></specifier> <name pos:line="2" pos:column="11">char<pos:position pos:line="2" pos:column="15"/></name> <modifier pos:line="2" pos:column="16">*<pos:position pos:line="2" pos:column="17"/></modifier><modifier pos:line="2" pos:column="17">*<pos:position pos:line="2" pos:column="18"/></modifier></type> <name pos:line="2" pos:column="19">argv<pos:position pos:line="2" pos:column="23"/></name></decl>;<pos:position pos:line="2" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">int<pos:position pos:line="3" pos:column="8"/></name></type> <name pos:line="3" pos:column="9">pos<pos:position pos:line="3" pos:column="12"/></name> <init pos:line="3" pos:column="13">= <expr><literal type="number" pos:line="3" pos:column="15">0<pos:position pos:line="3" pos:column="16"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="17"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="4" pos:column="5">const<pos:position pos:line="4" pos:column="10"/></specifier> <name pos:line="4" pos:column="11">char<pos:position pos:line="4" pos:column="15"/></name> <modifier pos:line="4" pos:column="16">*<pos:position pos:line="4" pos:column="17"/></modifier></type> <name pos:line="4" pos:column="18">script<pos:position pos:line="4" pos:column="24"/></name> <init pos:line="4" pos:column="25">= <expr><name><name pos:line="4" pos:column="27">con<pos:position pos:line="4" pos:column="30"/></name><operator pos:line="4" pos:column="30">-&gt;<pos:position pos:line="4" pos:column="35"/></operator><name pos:line="4" pos:column="32">doExec<pos:position pos:line="4" pos:column="38"/></name><operator pos:line="4" pos:column="38">-&gt;<pos:position pos:line="4" pos:column="43"/></operator><name pos:line="4" pos:column="40">script<pos:position pos:line="4" pos:column="46"/></name></name></expr></init></decl>;<pos:position pos:line="4" pos:column="47"/></decl_stmt>

    <expr_stmt><expr><name pos:line="6" pos:column="5">argv<pos:position pos:line="6" pos:column="9"/></name> <operator pos:line="6" pos:column="10">=<pos:position pos:line="6" pos:column="11"/></operator> <call><name pos:line="6" pos:column="12">malloc<pos:position pos:line="6" pos:column="18"/></name><argument_list pos:line="6" pos:column="18">(<argument><expr><sizeof pos:line="6" pos:column="19">sizeof<argument_list pos:line="6" pos:column="25">(<argument><expr><operator pos:line="6" pos:column="26">*<pos:position pos:line="6" pos:column="27"/></operator><name pos:line="6" pos:column="27">argv<pos:position pos:line="6" pos:column="31"/></name></expr></argument>)<pos:position pos:line="6" pos:column="32"/></argument_list></sizeof> <operator pos:line="6" pos:column="33">*<pos:position pos:line="6" pos:column="34"/></operator>
			<operator pos:line="7" pos:column="25">(<pos:position pos:line="7" pos:column="26"/></operator><literal type="number" pos:line="7" pos:column="26">6<pos:position pos:line="7" pos:column="27"/></literal> <operator pos:line="7" pos:column="28">+<pos:position pos:line="7" pos:column="29"/></operator> <name><name pos:line="7" pos:column="30">con<pos:position pos:line="7" pos:column="33"/></name><operator pos:line="7" pos:column="33">-&gt;<pos:position pos:line="7" pos:column="38"/></operator><name pos:line="7" pos:column="35">numLeftovers<pos:position pos:line="7" pos:column="47"/></name></name> <operator pos:line="7" pos:column="48">+<pos:position pos:line="7" pos:column="49"/></operator> <name><name pos:line="7" pos:column="50">con<pos:position pos:line="7" pos:column="53"/></name><operator pos:line="7" pos:column="53">-&gt;<pos:position pos:line="7" pos:column="58"/></operator><name pos:line="7" pos:column="55">finalArgvCount<pos:position pos:line="7" pos:column="69"/></name></name><operator pos:line="7" pos:column="69">)<pos:position pos:line="7" pos:column="70"/></operator></expr></argument>)<pos:position pos:line="7" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="72"/></expr_stmt>

    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><operator pos:line="9" pos:column="9">!<pos:position pos:line="9" pos:column="10"/></operator><name><name pos:line="9" pos:column="10">con<pos:position pos:line="9" pos:column="13"/></name><operator pos:line="9" pos:column="13">-&gt;<pos:position pos:line="9" pos:column="18"/></operator><name pos:line="9" pos:column="15">execAbsolute<pos:position pos:line="9" pos:column="27"/></name></name> <operator pos:line="9" pos:column="28">&amp;&amp;<pos:position pos:line="9" pos:column="38"/></operator> <call><name pos:line="9" pos:column="31">strchr<pos:position pos:line="9" pos:column="37"/></name><argument_list pos:line="9" pos:column="37">(<argument><expr><name pos:line="9" pos:column="38">script<pos:position pos:line="9" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="9" pos:column="46">'/'<pos:position pos:line="9" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="9" pos:column="51"/></condition><then pos:line="9" pos:column="51"> <block type="pseudo"><return pos:line="9" pos:column="52">return;<pos:position pos:line="9" pos:column="59"/></return></block></then></if>

    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><operator pos:line="11" pos:column="9">!<pos:position pos:line="11" pos:column="10"/></operator><call><name pos:line="11" pos:column="10">strchr<pos:position pos:line="11" pos:column="16"/></name><argument_list pos:line="11" pos:column="16">(<argument><expr><name pos:line="11" pos:column="17">script<pos:position pos:line="11" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="11" pos:column="25">'/'<pos:position pos:line="11" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="29"/></argument_list></call> <operator pos:line="11" pos:column="30">&amp;&amp;<pos:position pos:line="11" pos:column="40"/></operator> <name><name pos:line="11" pos:column="33">con<pos:position pos:line="11" pos:column="36"/></name><operator pos:line="11" pos:column="36">-&gt;<pos:position pos:line="11" pos:column="41"/></operator><name pos:line="11" pos:column="38">execPath<pos:position pos:line="11" pos:column="46"/></name></name></expr>)<pos:position pos:line="11" pos:column="47"/></condition><then pos:line="11" pos:column="47"> <block pos:line="11" pos:column="48">{
	<decl_stmt><decl><type><name pos:line="12" pos:column="9">char<pos:position pos:line="12" pos:column="13"/></name> <modifier pos:line="12" pos:column="14">*<pos:position pos:line="12" pos:column="15"/></modifier></type><name pos:line="12" pos:column="15">s<pos:position pos:line="12" pos:column="16"/></name> <init pos:line="12" pos:column="17">= <expr><call><name pos:line="12" pos:column="19">malloc<pos:position pos:line="12" pos:column="25"/></name><argument_list pos:line="12" pos:column="25">(<argument><expr><call><name pos:line="12" pos:column="26">strlen<pos:position pos:line="12" pos:column="32"/></name><argument_list pos:line="12" pos:column="32">(<argument><expr><name><name pos:line="12" pos:column="33">con<pos:position pos:line="12" pos:column="36"/></name><operator pos:line="12" pos:column="36">-&gt;<pos:position pos:line="12" pos:column="41"/></operator><name pos:line="12" pos:column="38">execPath<pos:position pos:line="12" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="12" pos:column="47"/></argument_list></call> <operator pos:line="12" pos:column="48">+<pos:position pos:line="12" pos:column="49"/></operator> <call><name pos:line="12" pos:column="50">strlen<pos:position pos:line="12" pos:column="56"/></name><argument_list pos:line="12" pos:column="56">(<argument><expr><name pos:line="12" pos:column="57">script<pos:position pos:line="12" pos:column="63"/></name></expr></argument>)<pos:position pos:line="12" pos:column="64"/></argument_list></call> <operator pos:line="12" pos:column="65">+<pos:position pos:line="12" pos:column="66"/></operator> <literal type="number" pos:line="12" pos:column="67">2<pos:position pos:line="12" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="69"/></argument_list></call></expr></init></decl>;<pos:position pos:line="12" pos:column="70"/></decl_stmt>
	<expr_stmt><expr><call><name pos:line="13" pos:column="9">sprintf<pos:position pos:line="13" pos:column="16"/></name><argument_list pos:line="13" pos:column="16">(<argument><expr><name pos:line="13" pos:column="17">s<pos:position pos:line="13" pos:column="18"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="20">"%s/%s"<pos:position pos:line="13" pos:column="27"/></literal></expr></argument>, <argument><expr><name><name pos:line="13" pos:column="29">con<pos:position pos:line="13" pos:column="32"/></name><operator pos:line="13" pos:column="32">-&gt;<pos:position pos:line="13" pos:column="37"/></operator><name pos:line="13" pos:column="34">execPath<pos:position pos:line="13" pos:column="42"/></name></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="44">script<pos:position pos:line="13" pos:column="50"/></name></expr></argument>)<pos:position pos:line="13" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="52"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="14" pos:column="9">argv<pos:position pos:line="14" pos:column="13"/></name><index pos:line="14" pos:column="13">[<expr><name pos:line="14" pos:column="14">pos<pos:position pos:line="14" pos:column="17"/></name></expr>]<pos:position pos:line="14" pos:column="18"/></index></name> <operator pos:line="14" pos:column="19">=<pos:position pos:line="14" pos:column="20"/></operator> <name pos:line="14" pos:column="21">s<pos:position pos:line="14" pos:column="22"/></name></expr>;<pos:position pos:line="14" pos:column="23"/></expr_stmt>
    }<pos:position pos:line="15" pos:column="6"/></block></then> <else pos:line="15" pos:column="7">else <block pos:line="15" pos:column="12">{
	<expr_stmt><expr><name><name pos:line="16" pos:column="9">argv<pos:position pos:line="16" pos:column="13"/></name><index pos:line="16" pos:column="13">[<expr><name pos:line="16" pos:column="14">pos<pos:position pos:line="16" pos:column="17"/></name></expr>]<pos:position pos:line="16" pos:column="18"/></index></name> <operator pos:line="16" pos:column="19">=<pos:position pos:line="16" pos:column="20"/></operator> <name pos:line="16" pos:column="21">script<pos:position pos:line="16" pos:column="27"/></name></expr>;<pos:position pos:line="16" pos:column="28"/></expr_stmt>
    }<pos:position pos:line="17" pos:column="6"/></block></else></if>
    <expr_stmt><expr><name pos:line="18" pos:column="5">pos<pos:position pos:line="18" pos:column="8"/></name><operator pos:line="18" pos:column="8">++<pos:position pos:line="18" pos:column="10"/></operator></expr>;<pos:position pos:line="18" pos:column="11"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="20" pos:column="5">argv<pos:position pos:line="20" pos:column="9"/></name><index pos:line="20" pos:column="9">[<expr><name pos:line="20" pos:column="10">pos<pos:position pos:line="20" pos:column="13"/></name></expr>]<pos:position pos:line="20" pos:column="14"/></index></name> <operator pos:line="20" pos:column="15">=<pos:position pos:line="20" pos:column="16"/></operator> <call><name pos:line="20" pos:column="17">findProgramPath<pos:position pos:line="20" pos:column="32"/></name><argument_list pos:line="20" pos:column="32">(<argument><expr><name><name pos:line="20" pos:column="33">con<pos:position pos:line="20" pos:column="36"/></name><operator pos:line="20" pos:column="36">-&gt;<pos:position pos:line="20" pos:column="41"/></operator><name pos:line="20" pos:column="38">os<pos:position pos:line="20" pos:column="40"/></name><operator pos:line="20" pos:column="40">-&gt;<pos:position pos:line="20" pos:column="45"/></operator><name pos:line="20" pos:column="42">argv<pos:position pos:line="20" pos:column="46"/></name><index pos:line="20" pos:column="46">[<expr><literal type="number" pos:line="20" pos:column="47">0<pos:position pos:line="20" pos:column="48"/></literal></expr>]<pos:position pos:line="20" pos:column="49"/></index></name></expr></argument>)<pos:position pos:line="20" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="51"/></expr_stmt>
    <if pos:line="21" pos:column="5">if <condition pos:line="21" pos:column="8">(<expr><name><name pos:line="21" pos:column="9">argv<pos:position pos:line="21" pos:column="13"/></name><index pos:line="21" pos:column="13">[<expr><name pos:line="21" pos:column="14">pos<pos:position pos:line="21" pos:column="17"/></name></expr>]<pos:position pos:line="21" pos:column="18"/></index></name></expr>)<pos:position pos:line="21" pos:column="19"/></condition><then pos:line="21" pos:column="19"> <block type="pseudo"><expr_stmt><expr><name pos:line="21" pos:column="20">pos<pos:position pos:line="21" pos:column="23"/></name><operator pos:line="21" pos:column="23">++<pos:position pos:line="21" pos:column="25"/></operator></expr>;<pos:position pos:line="21" pos:column="26"/></expr_stmt></block></then></if>
    <expr_stmt><expr><name><name pos:line="22" pos:column="5">argv<pos:position pos:line="22" pos:column="9"/></name><index pos:line="22" pos:column="9">[<expr><name pos:line="22" pos:column="10">pos<pos:position pos:line="22" pos:column="13"/></name><operator pos:line="22" pos:column="13">++<pos:position pos:line="22" pos:column="15"/></operator></expr>]<pos:position pos:line="22" pos:column="16"/></index></name> <operator pos:line="22" pos:column="17">=<pos:position pos:line="22" pos:column="18"/></operator> <literal type="string" pos:line="22" pos:column="19">";"<pos:position pos:line="22" pos:column="22"/></literal></expr>;<pos:position pos:line="22" pos:column="23"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="24" pos:column="5">memcpy<pos:position pos:line="24" pos:column="11"/></name><argument_list pos:line="24" pos:column="11">(<argument><expr><name pos:line="24" pos:column="12">argv<pos:position pos:line="24" pos:column="16"/></name> <operator pos:line="24" pos:column="17">+<pos:position pos:line="24" pos:column="18"/></operator> <name pos:line="24" pos:column="19">pos<pos:position pos:line="24" pos:column="22"/></name></expr></argument>, <argument><expr><name><name pos:line="24" pos:column="24">con<pos:position pos:line="24" pos:column="27"/></name><operator pos:line="24" pos:column="27">-&gt;<pos:position pos:line="24" pos:column="32"/></operator><name pos:line="24" pos:column="29">finalArgv<pos:position pos:line="24" pos:column="38"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="24" pos:column="40">sizeof<argument_list pos:line="24" pos:column="46">(<argument><expr><operator pos:line="24" pos:column="47">*<pos:position pos:line="24" pos:column="48"/></operator><name pos:line="24" pos:column="48">argv<pos:position pos:line="24" pos:column="52"/></name></expr></argument>)<pos:position pos:line="24" pos:column="53"/></argument_list></sizeof> <operator pos:line="24" pos:column="54">*<pos:position pos:line="24" pos:column="55"/></operator> <name><name pos:line="24" pos:column="56">con<pos:position pos:line="24" pos:column="59"/></name><operator pos:line="24" pos:column="59">-&gt;<pos:position pos:line="24" pos:column="64"/></operator><name pos:line="24" pos:column="61">finalArgvCount<pos:position pos:line="24" pos:column="75"/></name></name></expr></argument>)<pos:position pos:line="24" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="77"/></expr_stmt>
    <expr_stmt><expr><name pos:line="25" pos:column="5">pos<pos:position pos:line="25" pos:column="8"/></name> <operator pos:line="25" pos:column="9">+=<pos:position pos:line="25" pos:column="11"/></operator> <name><name pos:line="25" pos:column="12">con<pos:position pos:line="25" pos:column="15"/></name><operator pos:line="25" pos:column="15">-&gt;<pos:position pos:line="25" pos:column="20"/></operator><name pos:line="25" pos:column="17">finalArgvCount<pos:position pos:line="25" pos:column="31"/></name></name></expr>;<pos:position pos:line="25" pos:column="32"/></expr_stmt>

    <if pos:line="27" pos:column="5">if <condition pos:line="27" pos:column="8">(<expr><name><name pos:line="27" pos:column="9">con<pos:position pos:line="27" pos:column="12"/></name><operator pos:line="27" pos:column="12">-&gt;<pos:position pos:line="27" pos:column="17"/></operator><name pos:line="27" pos:column="14">numLeftovers<pos:position pos:line="27" pos:column="26"/></name></name></expr>)<pos:position pos:line="27" pos:column="27"/></condition><then pos:line="27" pos:column="27"> <block pos:line="27" pos:column="28">{
	<expr_stmt><expr><name><name pos:line="28" pos:column="9">argv<pos:position pos:line="28" pos:column="13"/></name><index pos:line="28" pos:column="13">[<expr><name pos:line="28" pos:column="14">pos<pos:position pos:line="28" pos:column="17"/></name><operator pos:line="28" pos:column="17">++<pos:position pos:line="28" pos:column="19"/></operator></expr>]<pos:position pos:line="28" pos:column="20"/></index></name> <operator pos:line="28" pos:column="21">=<pos:position pos:line="28" pos:column="22"/></operator> <literal type="string" pos:line="28" pos:column="23">"--"<pos:position pos:line="28" pos:column="27"/></literal></expr>;<pos:position pos:line="28" pos:column="28"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="29" pos:column="9">memcpy<pos:position pos:line="29" pos:column="15"/></name><argument_list pos:line="29" pos:column="15">(<argument><expr><name pos:line="29" pos:column="16">argv<pos:position pos:line="29" pos:column="20"/></name> <operator pos:line="29" pos:column="21">+<pos:position pos:line="29" pos:column="22"/></operator> <name pos:line="29" pos:column="23">pos<pos:position pos:line="29" pos:column="26"/></name></expr></argument>, <argument><expr><name><name pos:line="29" pos:column="28">con<pos:position pos:line="29" pos:column="31"/></name><operator pos:line="29" pos:column="31">-&gt;<pos:position pos:line="29" pos:column="36"/></operator><name pos:line="29" pos:column="33">leftovers<pos:position pos:line="29" pos:column="42"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="29" pos:column="44">sizeof<argument_list pos:line="29" pos:column="50">(<argument><expr><operator pos:line="29" pos:column="51">*<pos:position pos:line="29" pos:column="52"/></operator><name pos:line="29" pos:column="52">argv<pos:position pos:line="29" pos:column="56"/></name></expr></argument>)<pos:position pos:line="29" pos:column="57"/></argument_list></sizeof> <operator pos:line="29" pos:column="58">*<pos:position pos:line="29" pos:column="59"/></operator> <name><name pos:line="29" pos:column="60">con<pos:position pos:line="29" pos:column="63"/></name><operator pos:line="29" pos:column="63">-&gt;<pos:position pos:line="29" pos:column="68"/></operator><name pos:line="29" pos:column="65">numLeftovers<pos:position pos:line="29" pos:column="77"/></name></name></expr></argument>)<pos:position pos:line="29" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="79"/></expr_stmt>
	<expr_stmt><expr><name pos:line="30" pos:column="9">pos<pos:position pos:line="30" pos:column="12"/></name> <operator pos:line="30" pos:column="13">+=<pos:position pos:line="30" pos:column="15"/></operator> <name><name pos:line="30" pos:column="16">con<pos:position pos:line="30" pos:column="19"/></name><operator pos:line="30" pos:column="19">-&gt;<pos:position pos:line="30" pos:column="24"/></operator><name pos:line="30" pos:column="21">numLeftovers<pos:position pos:line="30" pos:column="33"/></name></name></expr>;<pos:position pos:line="30" pos:column="34"/></expr_stmt>
    }<pos:position pos:line="31" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name><name pos:line="33" pos:column="5">argv<pos:position pos:line="33" pos:column="9"/></name><index pos:line="33" pos:column="9">[<expr><name pos:line="33" pos:column="10">pos<pos:position pos:line="33" pos:column="13"/></name><operator pos:line="33" pos:column="13">++<pos:position pos:line="33" pos:column="15"/></operator></expr>]<pos:position pos:line="33" pos:column="16"/></index></name> <operator pos:line="33" pos:column="17">=<pos:position pos:line="33" pos:column="18"/></operator> <name pos:line="33" pos:column="19">NULL<pos:position pos:line="33" pos:column="23"/></name></expr>;<pos:position pos:line="33" pos:column="24"/></expr_stmt>

<cpp:ifdef pos:line="35" pos:column="1">#<cpp:directive pos:line="35" pos:column="2">ifdef<pos:position pos:line="35" pos:column="7"/></cpp:directive> <name pos:line="35" pos:column="8">__hpux<pos:position pos:line="35" pos:column="14"/></name></cpp:ifdef>
    <expr_stmt><expr><call><name pos:line="36" pos:column="5">setresuid<pos:position pos:line="36" pos:column="14"/></name><argument_list pos:line="36" pos:column="14">(<argument><expr><call><name pos:line="36" pos:column="15">getuid<pos:position pos:line="36" pos:column="21"/></name><argument_list pos:line="36" pos:column="21">()<pos:position pos:line="36" pos:column="23"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="36" pos:column="25">getuid<pos:position pos:line="36" pos:column="31"/></name><argument_list pos:line="36" pos:column="31">()<pos:position pos:line="36" pos:column="33"/></argument_list></call></expr></argument>,<argument><expr><operator pos:line="36" pos:column="34">-<pos:position pos:line="36" pos:column="35"/></operator><literal type="number" pos:line="36" pos:column="35">1<pos:position pos:line="36" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="38"/></expr_stmt>
<cpp:else pos:line="37" pos:column="1">#<cpp:directive pos:line="37" pos:column="2">else<pos:position pos:line="37" pos:column="6"/></cpp:directive></cpp:else>
<comment type="block" pos:line="38" pos:column="1">/*
 * XXX " ... on BSD systems setuid() should be preferred over setreuid()"
 * XXX 	sez' Timur Bakeyev &lt;mc@bat.ru&gt;
 * XXX	from Norbert Warmuth &lt;nwarmuth@privat.circular.de&gt;
 */</comment>
<cpp:if pos:line="43" pos:column="1">#<cpp:directive pos:line="43" pos:column="2">if<pos:position pos:line="43" pos:column="4"/></cpp:directive> <expr><call><name pos:line="43" pos:column="5">defined<pos:position pos:line="43" pos:column="12"/></name><argument_list pos:line="43" pos:column="12">(<argument><expr><name pos:line="43" pos:column="13">HAVE_SETUID<pos:position pos:line="43" pos:column="24"/></name></expr></argument>)<pos:position pos:line="43" pos:column="25"/></argument_list></call></expr></cpp:if>
    <expr_stmt><expr><call><name pos:line="44" pos:column="5">setuid<pos:position pos:line="44" pos:column="11"/></name><argument_list pos:line="44" pos:column="11">(<argument><expr><call><name pos:line="44" pos:column="12">getuid<pos:position pos:line="44" pos:column="18"/></name><argument_list pos:line="44" pos:column="18">()<pos:position pos:line="44" pos:column="20"/></argument_list></call></expr></argument>)<pos:position pos:line="44" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="22"/></expr_stmt>
<cpp:elif pos:line="45" pos:column="1">#<cpp:directive pos:line="45" pos:column="2">elif<pos:position pos:line="45" pos:column="6"/></cpp:directive> <expr><call><name pos:line="45" pos:column="7">defined<pos:position pos:line="45" pos:column="14"/></name> <argument_list pos:line="45" pos:column="15">(<argument><expr><name pos:line="45" pos:column="16">HAVE_SETREUID<pos:position pos:line="45" pos:column="29"/></name></expr></argument>)<pos:position pos:line="45" pos:column="30"/></argument_list></call></expr></cpp:elif>
    <expr_stmt><expr><call><name pos:line="46" pos:column="5">setreuid<pos:position pos:line="46" pos:column="13"/></name><argument_list pos:line="46" pos:column="13">(<argument><expr><call><name pos:line="46" pos:column="14">getuid<pos:position pos:line="46" pos:column="20"/></name><argument_list pos:line="46" pos:column="20">()<pos:position pos:line="46" pos:column="22"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="46" pos:column="24">getuid<pos:position pos:line="46" pos:column="30"/></name><argument_list pos:line="46" pos:column="30">()<pos:position pos:line="46" pos:column="32"/></argument_list></call></expr></argument>)<pos:position pos:line="46" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="34"/></expr_stmt> <comment type="block" pos:line="46" pos:column="35">/*hlauer: not portable to hpux9.01 */</comment>
<cpp:else pos:line="47" pos:column="1">#<cpp:directive pos:line="47" pos:column="2">else<pos:position pos:line="47" pos:column="6"/></cpp:directive></cpp:else>
    <empty_stmt pos:line="48" pos:column="5">;<pos:position pos:line="48" pos:column="6"/></empty_stmt> <comment type="block" pos:line="48" pos:column="7">/* Can't drop privileges */</comment>
<cpp:endif pos:line="49" pos:column="1">#<cpp:directive pos:line="49" pos:column="2">endif<pos:position pos:line="49" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:endif pos:line="50" pos:column="1">#<cpp:directive pos:line="50" pos:column="2">endif<pos:position pos:line="50" pos:column="7"/></cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name pos:line="52" pos:column="5">execvp<pos:position pos:line="52" pos:column="11"/></name><argument_list pos:line="52" pos:column="11">(<argument><expr><name><name pos:line="52" pos:column="12">argv<pos:position pos:line="52" pos:column="16"/></name><index pos:line="52" pos:column="16">[<expr><literal type="number" pos:line="52" pos:column="17">0<pos:position pos:line="52" pos:column="18"/></literal></expr>]<pos:position pos:line="52" pos:column="19"/></index></name></expr></argument>, <argument><expr><operator pos:line="52" pos:column="21">(<pos:position pos:line="52" pos:column="22"/></operator><name pos:line="52" pos:column="22">char<pos:position pos:line="52" pos:column="26"/></name> <operator pos:line="52" pos:column="27">*<pos:position pos:line="52" pos:column="28"/></operator><specifier pos:line="52" pos:column="28">const<pos:position pos:line="52" pos:column="33"/></specifier> <operator pos:line="52" pos:column="34">*<pos:position pos:line="52" pos:column="35"/></operator><operator pos:line="52" pos:column="35">)<pos:position pos:line="52" pos:column="36"/></operator><name pos:line="52" pos:column="36">argv<pos:position pos:line="52" pos:column="40"/></name></expr></argument>)<pos:position pos:line="52" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="42"/></expr_stmt>
}<pos:position pos:line="53" pos:column="2"/></block></function></unit>
