<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_135_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">char<pos:position pos:line="1" pos:column="12"/></name> <modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier></type><name pos:line="1" pos:column="14">perform_io<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name pos:line="1" pos:column="25">size_t<pos:position pos:line="1" pos:column="31"/></name></type> <name pos:line="1" pos:column="32">needed<pos:position pos:line="1" pos:column="38"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="40">int<pos:position pos:line="1" pos:column="43"/></name></type> <name pos:line="1" pos:column="44">flags<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="50"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">fd_set<pos:position pos:line="3" pos:column="15"/></name></type> <name pos:line="3" pos:column="16">r_fds<pos:position pos:line="3" pos:column="21"/></name></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="23">e_fds<pos:position pos:line="3" pos:column="28"/></name></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="30">w_fds<pos:position pos:line="3" pos:column="35"/></name></decl>;<pos:position pos:line="3" pos:column="36"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">timeval<pos:position pos:line="4" pos:column="23"/></name></name></type> <name pos:line="4" pos:column="24">tv<pos:position pos:line="4" pos:column="26"/></name></decl>;<pos:position pos:line="4" pos:column="27"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">cnt<pos:position pos:line="5" pos:column="16"/></name></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="18">max_fd<pos:position pos:line="5" pos:column="24"/></name></decl>;<pos:position pos:line="5" pos:column="25"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">size_t<pos:position pos:line="6" pos:column="15"/></name></type> <name pos:line="6" pos:column="16">empty_buf_len<pos:position pos:line="6" pos:column="29"/></name> <init pos:line="6" pos:column="30">= <expr><literal type="number" pos:line="6" pos:column="32">0<pos:position pos:line="6" pos:column="33"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="34"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">xbuf<pos:position pos:line="7" pos:column="13"/></name> <modifier pos:line="7" pos:column="14">*<pos:position pos:line="7" pos:column="15"/></modifier></type><name pos:line="7" pos:column="15">out<pos:position pos:line="7" pos:column="18"/></name></decl>;<pos:position pos:line="7" pos:column="19"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">char<pos:position pos:line="8" pos:column="13"/></name> <modifier pos:line="8" pos:column="14">*<pos:position pos:line="8" pos:column="15"/></modifier></type><name pos:line="8" pos:column="15">data<pos:position pos:line="8" pos:column="19"/></name></decl>;<pos:position pos:line="8" pos:column="20"/></decl_stmt>

	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><name><name pos:line="10" pos:column="13">iobuf<pos:position pos:line="10" pos:column="18"/></name><operator pos:line="10" pos:column="18">.<pos:position pos:line="10" pos:column="19"/></operator><name pos:line="10" pos:column="19">in<pos:position pos:line="10" pos:column="21"/></name><operator pos:line="10" pos:column="21">.<pos:position pos:line="10" pos:column="22"/></operator><name pos:line="10" pos:column="22">len<pos:position pos:line="10" pos:column="25"/></name></name> <operator pos:line="10" pos:column="26">==<pos:position pos:line="10" pos:column="28"/></operator> <literal type="number" pos:line="10" pos:column="29">0<pos:position pos:line="10" pos:column="30"/></literal> <operator pos:line="10" pos:column="31">&amp;&amp;<pos:position pos:line="10" pos:column="41"/></operator> <name><name pos:line="10" pos:column="34">iobuf<pos:position pos:line="10" pos:column="39"/></name><operator pos:line="10" pos:column="39">.<pos:position pos:line="10" pos:column="40"/></operator><name pos:line="10" pos:column="40">in<pos:position pos:line="10" pos:column="42"/></name><operator pos:line="10" pos:column="42">.<pos:position pos:line="10" pos:column="43"/></operator><name pos:line="10" pos:column="43">pos<pos:position pos:line="10" pos:column="46"/></name></name> <operator pos:line="10" pos:column="47">!=<pos:position pos:line="10" pos:column="49"/></operator> <literal type="number" pos:line="10" pos:column="50">0<pos:position pos:line="10" pos:column="51"/></literal></expr>)<pos:position pos:line="10" pos:column="52"/></condition><then pos:line="10" pos:column="52"> <block pos:line="10" pos:column="53">{
		<if pos:line="11" pos:column="17">if <condition pos:line="11" pos:column="20">(<expr><name><name pos:line="11" pos:column="21">iobuf<pos:position pos:line="11" pos:column="26"/></name><operator pos:line="11" pos:column="26">.<pos:position pos:line="11" pos:column="27"/></operator><name pos:line="11" pos:column="27">raw_input_ends_before<pos:position pos:line="11" pos:column="48"/></name></name></expr>)<pos:position pos:line="11" pos:column="49"/></condition><then pos:line="11" pos:column="49">
			<block type="pseudo"><expr_stmt><expr><name><name pos:line="12" pos:column="25">iobuf<pos:position pos:line="12" pos:column="30"/></name><operator pos:line="12" pos:column="30">.<pos:position pos:line="12" pos:column="31"/></operator><name pos:line="12" pos:column="31">raw_input_ends_before<pos:position pos:line="12" pos:column="52"/></name></name> <operator pos:line="12" pos:column="53">-=<pos:position pos:line="12" pos:column="55"/></operator> <name><name pos:line="12" pos:column="56">iobuf<pos:position pos:line="12" pos:column="61"/></name><operator pos:line="12" pos:column="61">.<pos:position pos:line="12" pos:column="62"/></operator><name pos:line="12" pos:column="62">in<pos:position pos:line="12" pos:column="64"/></name><operator pos:line="12" pos:column="64">.<pos:position pos:line="12" pos:column="65"/></operator><name pos:line="12" pos:column="65">pos<pos:position pos:line="12" pos:column="68"/></name></name></expr>;<pos:position pos:line="12" pos:column="69"/></expr_stmt></block></then></if>
		<expr_stmt><expr><name><name pos:line="13" pos:column="17">iobuf<pos:position pos:line="13" pos:column="22"/></name><operator pos:line="13" pos:column="22">.<pos:position pos:line="13" pos:column="23"/></operator><name pos:line="13" pos:column="23">in<pos:position pos:line="13" pos:column="25"/></name><operator pos:line="13" pos:column="25">.<pos:position pos:line="13" pos:column="26"/></operator><name pos:line="13" pos:column="26">pos<pos:position pos:line="13" pos:column="29"/></name></name> <operator pos:line="13" pos:column="30">=<pos:position pos:line="13" pos:column="31"/></operator> <literal type="number" pos:line="13" pos:column="32">0<pos:position pos:line="13" pos:column="33"/></literal></expr>;<pos:position pos:line="13" pos:column="34"/></expr_stmt>
	}<pos:position pos:line="14" pos:column="10"/></block></then></if>

	<switch pos:line="16" pos:column="9">switch <condition pos:line="16" pos:column="16">(<expr><name pos:line="16" pos:column="17">flags<pos:position pos:line="16" pos:column="22"/></name> <operator pos:line="16" pos:column="23">&amp;<pos:position pos:line="16" pos:column="28"/></operator> <name pos:line="16" pos:column="25">PIO_NEED_FLAGS<pos:position pos:line="16" pos:column="39"/></name></expr>)<pos:position pos:line="16" pos:column="40"/></condition> <block pos:line="16" pos:column="41">{
	<case pos:line="17" pos:column="9">case <expr><name pos:line="17" pos:column="14">PIO_NEED_INPUT<pos:position pos:line="17" pos:column="28"/></name></expr>:<pos:position pos:line="17" pos:column="29"/></case>
		<comment type="block" pos:line="18" pos:column="17">/* We never resize the circular input buffer. */</comment>
		<if pos:line="19" pos:column="17">if <condition pos:line="19" pos:column="20">(<expr><name><name pos:line="19" pos:column="21">iobuf<pos:position pos:line="19" pos:column="26"/></name><operator pos:line="19" pos:column="26">.<pos:position pos:line="19" pos:column="27"/></operator><name pos:line="19" pos:column="27">in<pos:position pos:line="19" pos:column="29"/></name><operator pos:line="19" pos:column="29">.<pos:position pos:line="19" pos:column="30"/></operator><name pos:line="19" pos:column="30">size<pos:position pos:line="19" pos:column="34"/></name></name> <operator pos:line="19" pos:column="35">&lt;<pos:position pos:line="19" pos:column="39"/></operator> <name pos:line="19" pos:column="37">needed<pos:position pos:line="19" pos:column="43"/></name></expr>)<pos:position pos:line="19" pos:column="44"/></condition><then pos:line="19" pos:column="44"> <block pos:line="19" pos:column="45">{
			<expr_stmt><expr><call><name pos:line="20" pos:column="25">rprintf<pos:position pos:line="20" pos:column="32"/></name><argument_list pos:line="20" pos:column="32">(<argument><expr><name pos:line="20" pos:column="33">FERROR<pos:position pos:line="20" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="41">"need to read %ld bytes, iobuf.in.buf is only %ld bytes.\n"<pos:position pos:line="20" pos:column="100"/></literal></expr></argument>,
				<argument><expr><operator pos:line="21" pos:column="33">(<pos:position pos:line="21" pos:column="34"/></operator><name pos:line="21" pos:column="34">long<pos:position pos:line="21" pos:column="38"/></name><operator pos:line="21" pos:column="38">)<pos:position pos:line="21" pos:column="39"/></operator><name pos:line="21" pos:column="39">needed<pos:position pos:line="21" pos:column="45"/></name></expr></argument>, <argument><expr><operator pos:line="21" pos:column="47">(<pos:position pos:line="21" pos:column="48"/></operator><name pos:line="21" pos:column="48">long<pos:position pos:line="21" pos:column="52"/></name><operator pos:line="21" pos:column="52">)<pos:position pos:line="21" pos:column="53"/></operator><name><name pos:line="21" pos:column="53">iobuf<pos:position pos:line="21" pos:column="58"/></name><operator pos:line="21" pos:column="58">.<pos:position pos:line="21" pos:column="59"/></operator><name pos:line="21" pos:column="59">in<pos:position pos:line="21" pos:column="61"/></name><operator pos:line="21" pos:column="61">.<pos:position pos:line="21" pos:column="62"/></operator><name pos:line="21" pos:column="62">size<pos:position pos:line="21" pos:column="66"/></name></name></expr></argument>)<pos:position pos:line="21" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="68"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="22" pos:column="25">exit_cleanup<pos:position pos:line="22" pos:column="37"/></name><argument_list pos:line="22" pos:column="37">(<argument><expr><name pos:line="22" pos:column="38">RERR_PROTOCOL<pos:position pos:line="22" pos:column="51"/></name></expr></argument>)<pos:position pos:line="22" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="53"/></expr_stmt>
		}<pos:position pos:line="23" pos:column="18"/></block></then></if>

		<if pos:line="25" pos:column="17">if <condition pos:line="25" pos:column="20">(<expr><name pos:line="25" pos:column="21">msgs2stderr<pos:position pos:line="25" pos:column="32"/></name> <operator pos:line="25" pos:column="33">&amp;&amp;<pos:position pos:line="25" pos:column="43"/></operator> <call><name pos:line="25" pos:column="36">DEBUG_GTE<pos:position pos:line="25" pos:column="45"/></name><argument_list pos:line="25" pos:column="45">(<argument><expr><name pos:line="25" pos:column="46">IO<pos:position pos:line="25" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="25" pos:column="50">3<pos:position pos:line="25" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="25" pos:column="53"/></condition><then pos:line="25" pos:column="53"> <block pos:line="25" pos:column="54">{
			<expr_stmt><expr><call><name pos:line="26" pos:column="25">rprintf<pos:position pos:line="26" pos:column="32"/></name><argument_list pos:line="26" pos:column="32">(<argument><expr><name pos:line="26" pos:column="33">FINFO<pos:position pos:line="26" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="26" pos:column="40">"[%s] perform_io(%ld, %sinput)\n"<pos:position pos:line="26" pos:column="73"/></literal></expr></argument>,
				<argument><expr><call><name pos:line="27" pos:column="33">who_am_i<pos:position pos:line="27" pos:column="41"/></name><argument_list pos:line="27" pos:column="41">()<pos:position pos:line="27" pos:column="43"/></argument_list></call></expr></argument>, <argument><expr><operator pos:line="27" pos:column="45">(<pos:position pos:line="27" pos:column="46"/></operator><name pos:line="27" pos:column="46">long<pos:position pos:line="27" pos:column="50"/></name><operator pos:line="27" pos:column="50">)<pos:position pos:line="27" pos:column="51"/></operator><name pos:line="27" pos:column="51">needed<pos:position pos:line="27" pos:column="57"/></name></expr></argument>, <argument><expr><ternary><condition><expr><name pos:line="27" pos:column="59">flags<pos:position pos:line="27" pos:column="64"/></name> <operator pos:line="27" pos:column="65">&amp;<pos:position pos:line="27" pos:column="70"/></operator> <name pos:line="27" pos:column="67">PIO_CONSUME_INPUT<pos:position pos:line="27" pos:column="84"/></name></expr> ?<pos:position pos:line="27" pos:column="86"/></condition><then pos:line="27" pos:column="86"> <expr><literal type="string" pos:line="27" pos:column="87">"consume&amp;"<pos:position pos:line="27" pos:column="101"/></literal></expr> <pos:position pos:line="27" pos:column="98"/></then><else pos:line="27" pos:column="98">: <expr><literal type="string" pos:line="27" pos:column="100">""<pos:position pos:line="27" pos:column="102"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="27" pos:column="103"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="104"/></expr_stmt>
		}<pos:position pos:line="28" pos:column="18"/></block></then></if>
		<break pos:line="29" pos:column="17">break;<pos:position pos:line="29" pos:column="23"/></break>

	<case pos:line="31" pos:column="9">case <expr><name pos:line="31" pos:column="14">PIO_NEED_OUTROOM<pos:position pos:line="31" pos:column="30"/></name></expr>:<pos:position pos:line="31" pos:column="31"/></case>
		<comment type="block" pos:line="32" pos:column="17">/* We never resize the circular output buffer. */</comment>
		<if pos:line="33" pos:column="17">if <condition pos:line="33" pos:column="20">(<expr><name><name pos:line="33" pos:column="21">iobuf<pos:position pos:line="33" pos:column="26"/></name><operator pos:line="33" pos:column="26">.<pos:position pos:line="33" pos:column="27"/></operator><name pos:line="33" pos:column="27">out<pos:position pos:line="33" pos:column="30"/></name><operator pos:line="33" pos:column="30">.<pos:position pos:line="33" pos:column="31"/></operator><name pos:line="33" pos:column="31">size<pos:position pos:line="33" pos:column="35"/></name></name> <operator pos:line="33" pos:column="36">-<pos:position pos:line="33" pos:column="37"/></operator> <name><name pos:line="33" pos:column="38">iobuf<pos:position pos:line="33" pos:column="43"/></name><operator pos:line="33" pos:column="43">.<pos:position pos:line="33" pos:column="44"/></operator><name pos:line="33" pos:column="44">out_empty_len<pos:position pos:line="33" pos:column="57"/></name></name> <operator pos:line="33" pos:column="58">&lt;<pos:position pos:line="33" pos:column="62"/></operator> <name pos:line="33" pos:column="60">needed<pos:position pos:line="33" pos:column="66"/></name></expr>)<pos:position pos:line="33" pos:column="67"/></condition><then pos:line="33" pos:column="67"> <block pos:line="33" pos:column="68">{
			<expr_stmt><expr><call><name pos:line="34" pos:column="25">fprintf<pos:position pos:line="34" pos:column="32"/></name><argument_list pos:line="34" pos:column="32">(<argument><expr><name pos:line="34" pos:column="33">stderr<pos:position pos:line="34" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="34" pos:column="41">"need to write %ld bytes, iobuf.out.buf is only %ld bytes.\n"<pos:position pos:line="34" pos:column="102"/></literal></expr></argument>,
				<argument><expr><operator pos:line="35" pos:column="33">(<pos:position pos:line="35" pos:column="34"/></operator><name pos:line="35" pos:column="34">long<pos:position pos:line="35" pos:column="38"/></name><operator pos:line="35" pos:column="38">)<pos:position pos:line="35" pos:column="39"/></operator><name pos:line="35" pos:column="39">needed<pos:position pos:line="35" pos:column="45"/></name></expr></argument>, <argument><expr><call pos:line="35" pos:column="47">(<name pos:line="35" pos:column="48">long<pos:position pos:line="35" pos:column="52"/></name>)<argument_list pos:line="35" pos:column="53">(<argument><expr><name><name pos:line="35" pos:column="54">iobuf<pos:position pos:line="35" pos:column="59"/></name><operator pos:line="35" pos:column="59">.<pos:position pos:line="35" pos:column="60"/></operator><name pos:line="35" pos:column="60">out<pos:position pos:line="35" pos:column="63"/></name><operator pos:line="35" pos:column="63">.<pos:position pos:line="35" pos:column="64"/></operator><name pos:line="35" pos:column="64">size<pos:position pos:line="35" pos:column="68"/></name></name> <operator pos:line="35" pos:column="69">-<pos:position pos:line="35" pos:column="70"/></operator> <name><name pos:line="35" pos:column="71">iobuf<pos:position pos:line="35" pos:column="76"/></name><operator pos:line="35" pos:column="76">.<pos:position pos:line="35" pos:column="77"/></operator><name pos:line="35" pos:column="77">out_empty_len<pos:position pos:line="35" pos:column="90"/></name></name></expr></argument>)<pos:position pos:line="35" pos:column="91"/></argument_list></call></expr></argument>)<pos:position pos:line="35" pos:column="92"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="93"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="36" pos:column="25">exit_cleanup<pos:position pos:line="36" pos:column="37"/></name><argument_list pos:line="36" pos:column="37">(<argument><expr><name pos:line="36" pos:column="38">RERR_PROTOCOL<pos:position pos:line="36" pos:column="51"/></name></expr></argument>)<pos:position pos:line="36" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="53"/></expr_stmt>
		}<pos:position pos:line="37" pos:column="18"/></block></then></if>

		<if pos:line="39" pos:column="17">if <condition pos:line="39" pos:column="20">(<expr><name pos:line="39" pos:column="21">msgs2stderr<pos:position pos:line="39" pos:column="32"/></name> <operator pos:line="39" pos:column="33">&amp;&amp;<pos:position pos:line="39" pos:column="43"/></operator> <call><name pos:line="39" pos:column="36">DEBUG_GTE<pos:position pos:line="39" pos:column="45"/></name><argument_list pos:line="39" pos:column="45">(<argument><expr><name pos:line="39" pos:column="46">IO<pos:position pos:line="39" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="39" pos:column="50">3<pos:position pos:line="39" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="39" pos:column="53"/></condition><then pos:line="39" pos:column="53"> <block pos:line="39" pos:column="54">{
			<expr_stmt><expr><call><name pos:line="40" pos:column="25">rprintf<pos:position pos:line="40" pos:column="32"/></name><argument_list pos:line="40" pos:column="32">(<argument><expr><name pos:line="40" pos:column="33">FINFO<pos:position pos:line="40" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="40" pos:column="40">"[%s] perform_io(%ld, outroom) needs to flush %ld\n"<pos:position pos:line="40" pos:column="92"/></literal></expr></argument>,
				<argument><expr><call><name pos:line="41" pos:column="33">who_am_i<pos:position pos:line="41" pos:column="41"/></name><argument_list pos:line="41" pos:column="41">()<pos:position pos:line="41" pos:column="43"/></argument_list></call></expr></argument>, <argument><expr><operator pos:line="41" pos:column="45">(<pos:position pos:line="41" pos:column="46"/></operator><name pos:line="41" pos:column="46">long<pos:position pos:line="41" pos:column="50"/></name><operator pos:line="41" pos:column="50">)<pos:position pos:line="41" pos:column="51"/></operator><name pos:line="41" pos:column="51">needed<pos:position pos:line="41" pos:column="57"/></name></expr></argument>,
				<argument><expr><ternary><condition><expr><name><name pos:line="42" pos:column="33">iobuf<pos:position pos:line="42" pos:column="38"/></name><operator pos:line="42" pos:column="38">.<pos:position pos:line="42" pos:column="39"/></operator><name pos:line="42" pos:column="39">out<pos:position pos:line="42" pos:column="42"/></name><operator pos:line="42" pos:column="42">.<pos:position pos:line="42" pos:column="43"/></operator><name pos:line="42" pos:column="43">len<pos:position pos:line="42" pos:column="46"/></name></name> <operator pos:line="42" pos:column="47">+<pos:position pos:line="42" pos:column="48"/></operator> <name pos:line="42" pos:column="49">needed<pos:position pos:line="42" pos:column="55"/></name> <operator pos:line="42" pos:column="56">&gt;<pos:position pos:line="42" pos:column="60"/></operator> <name><name pos:line="42" pos:column="58">iobuf<pos:position pos:line="42" pos:column="63"/></name><operator pos:line="42" pos:column="63">.<pos:position pos:line="42" pos:column="64"/></operator><name pos:line="42" pos:column="64">out<pos:position pos:line="42" pos:column="67"/></name><operator pos:line="42" pos:column="67">.<pos:position pos:line="42" pos:column="68"/></operator><name pos:line="42" pos:column="68">size<pos:position pos:line="42" pos:column="72"/></name></name></expr>
				?<pos:position pos:line="43" pos:column="34"/></condition><then pos:line="43" pos:column="34"> <expr><call pos:line="43" pos:column="35">(<name pos:line="43" pos:column="36">long<pos:position pos:line="43" pos:column="40"/></name>)<argument_list pos:line="43" pos:column="41">(<argument><expr><name><name pos:line="43" pos:column="42">iobuf<pos:position pos:line="43" pos:column="47"/></name><operator pos:line="43" pos:column="47">.<pos:position pos:line="43" pos:column="48"/></operator><name pos:line="43" pos:column="48">out<pos:position pos:line="43" pos:column="51"/></name><operator pos:line="43" pos:column="51">.<pos:position pos:line="43" pos:column="52"/></operator><name pos:line="43" pos:column="52">len<pos:position pos:line="43" pos:column="55"/></name></name> <operator pos:line="43" pos:column="56">+<pos:position pos:line="43" pos:column="57"/></operator> <name pos:line="43" pos:column="58">needed<pos:position pos:line="43" pos:column="64"/></name> <operator pos:line="43" pos:column="65">-<pos:position pos:line="43" pos:column="66"/></operator> <name><name pos:line="43" pos:column="67">iobuf<pos:position pos:line="43" pos:column="72"/></name><operator pos:line="43" pos:column="72">.<pos:position pos:line="43" pos:column="73"/></operator><name pos:line="43" pos:column="73">out<pos:position pos:line="43" pos:column="76"/></name><operator pos:line="43" pos:column="76">.<pos:position pos:line="43" pos:column="77"/></operator><name pos:line="43" pos:column="77">size<pos:position pos:line="43" pos:column="81"/></name></name></expr></argument>)<pos:position pos:line="43" pos:column="82"/></argument_list></call></expr> <pos:position pos:line="43" pos:column="83"/></then><else pos:line="43" pos:column="83">: <expr><literal type="number" pos:line="43" pos:column="85">0L<pos:position pos:line="43" pos:column="87"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="43" pos:column="88"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="89"/></expr_stmt>
		}<pos:position pos:line="44" pos:column="18"/></block></then></if>
		<break pos:line="45" pos:column="17">break;<pos:position pos:line="45" pos:column="23"/></break>

	<case pos:line="47" pos:column="9">case <expr><name pos:line="47" pos:column="14">PIO_NEED_MSGROOM<pos:position pos:line="47" pos:column="30"/></name></expr>:<pos:position pos:line="47" pos:column="31"/></case>
		<comment type="block" pos:line="48" pos:column="17">/* We never resize the circular message buffer. */</comment>
		<if pos:line="49" pos:column="17">if <condition pos:line="49" pos:column="20">(<expr><name><name pos:line="49" pos:column="21">iobuf<pos:position pos:line="49" pos:column="26"/></name><operator pos:line="49" pos:column="26">.<pos:position pos:line="49" pos:column="27"/></operator><name pos:line="49" pos:column="27">msg<pos:position pos:line="49" pos:column="30"/></name><operator pos:line="49" pos:column="30">.<pos:position pos:line="49" pos:column="31"/></operator><name pos:line="49" pos:column="31">size<pos:position pos:line="49" pos:column="35"/></name></name> <operator pos:line="49" pos:column="36">&lt;<pos:position pos:line="49" pos:column="40"/></operator> <name pos:line="49" pos:column="38">needed<pos:position pos:line="49" pos:column="44"/></name></expr>)<pos:position pos:line="49" pos:column="45"/></condition><then pos:line="49" pos:column="45"> <block pos:line="49" pos:column="46">{
			<expr_stmt><expr><call><name pos:line="50" pos:column="25">fprintf<pos:position pos:line="50" pos:column="32"/></name><argument_list pos:line="50" pos:column="32">(<argument><expr><name pos:line="50" pos:column="33">stderr<pos:position pos:line="50" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="50" pos:column="41">"need to write %ld bytes, iobuf.msg.buf is only %ld bytes.\n"<pos:position pos:line="50" pos:column="102"/></literal></expr></argument>,
				<argument><expr><operator pos:line="51" pos:column="33">(<pos:position pos:line="51" pos:column="34"/></operator><name pos:line="51" pos:column="34">long<pos:position pos:line="51" pos:column="38"/></name><operator pos:line="51" pos:column="38">)<pos:position pos:line="51" pos:column="39"/></operator><name pos:line="51" pos:column="39">needed<pos:position pos:line="51" pos:column="45"/></name></expr></argument>, <argument><expr><operator pos:line="51" pos:column="47">(<pos:position pos:line="51" pos:column="48"/></operator><name pos:line="51" pos:column="48">long<pos:position pos:line="51" pos:column="52"/></name><operator pos:line="51" pos:column="52">)<pos:position pos:line="51" pos:column="53"/></operator><name><name pos:line="51" pos:column="53">iobuf<pos:position pos:line="51" pos:column="58"/></name><operator pos:line="51" pos:column="58">.<pos:position pos:line="51" pos:column="59"/></operator><name pos:line="51" pos:column="59">msg<pos:position pos:line="51" pos:column="62"/></name><operator pos:line="51" pos:column="62">.<pos:position pos:line="51" pos:column="63"/></operator><name pos:line="51" pos:column="63">size<pos:position pos:line="51" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="51" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="69"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="52" pos:column="25">exit_cleanup<pos:position pos:line="52" pos:column="37"/></name><argument_list pos:line="52" pos:column="37">(<argument><expr><name pos:line="52" pos:column="38">RERR_PROTOCOL<pos:position pos:line="52" pos:column="51"/></name></expr></argument>)<pos:position pos:line="52" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="53"/></expr_stmt>
		}<pos:position pos:line="53" pos:column="18"/></block></then></if>

		<if pos:line="55" pos:column="17">if <condition pos:line="55" pos:column="20">(<expr><name pos:line="55" pos:column="21">msgs2stderr<pos:position pos:line="55" pos:column="32"/></name> <operator pos:line="55" pos:column="33">&amp;&amp;<pos:position pos:line="55" pos:column="43"/></operator> <call><name pos:line="55" pos:column="36">DEBUG_GTE<pos:position pos:line="55" pos:column="45"/></name><argument_list pos:line="55" pos:column="45">(<argument><expr><name pos:line="55" pos:column="46">IO<pos:position pos:line="55" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="55" pos:column="50">3<pos:position pos:line="55" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="55" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="55" pos:column="53"/></condition><then pos:line="55" pos:column="53"> <block pos:line="55" pos:column="54">{
			<expr_stmt><expr><call><name pos:line="56" pos:column="25">rprintf<pos:position pos:line="56" pos:column="32"/></name><argument_list pos:line="56" pos:column="32">(<argument><expr><name pos:line="56" pos:column="33">FINFO<pos:position pos:line="56" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="56" pos:column="40">"[%s] perform_io(%ld, msgroom) needs to flush %ld\n"<pos:position pos:line="56" pos:column="92"/></literal></expr></argument>,
				<argument><expr><call><name pos:line="57" pos:column="33">who_am_i<pos:position pos:line="57" pos:column="41"/></name><argument_list pos:line="57" pos:column="41">()<pos:position pos:line="57" pos:column="43"/></argument_list></call></expr></argument>, <argument><expr><operator pos:line="57" pos:column="45">(<pos:position pos:line="57" pos:column="46"/></operator><name pos:line="57" pos:column="46">long<pos:position pos:line="57" pos:column="50"/></name><operator pos:line="57" pos:column="50">)<pos:position pos:line="57" pos:column="51"/></operator><name pos:line="57" pos:column="51">needed<pos:position pos:line="57" pos:column="57"/></name></expr></argument>,
				<argument><expr><ternary><condition><expr><name><name pos:line="58" pos:column="33">iobuf<pos:position pos:line="58" pos:column="38"/></name><operator pos:line="58" pos:column="38">.<pos:position pos:line="58" pos:column="39"/></operator><name pos:line="58" pos:column="39">msg<pos:position pos:line="58" pos:column="42"/></name><operator pos:line="58" pos:column="42">.<pos:position pos:line="58" pos:column="43"/></operator><name pos:line="58" pos:column="43">len<pos:position pos:line="58" pos:column="46"/></name></name> <operator pos:line="58" pos:column="47">+<pos:position pos:line="58" pos:column="48"/></operator> <name pos:line="58" pos:column="49">needed<pos:position pos:line="58" pos:column="55"/></name> <operator pos:line="58" pos:column="56">&gt;<pos:position pos:line="58" pos:column="60"/></operator> <name><name pos:line="58" pos:column="58">iobuf<pos:position pos:line="58" pos:column="63"/></name><operator pos:line="58" pos:column="63">.<pos:position pos:line="58" pos:column="64"/></operator><name pos:line="58" pos:column="64">msg<pos:position pos:line="58" pos:column="67"/></name><operator pos:line="58" pos:column="67">.<pos:position pos:line="58" pos:column="68"/></operator><name pos:line="58" pos:column="68">size<pos:position pos:line="58" pos:column="72"/></name></name></expr>
				?<pos:position pos:line="59" pos:column="34"/></condition><then pos:line="59" pos:column="34"> <expr><call pos:line="59" pos:column="35">(<name pos:line="59" pos:column="36">long<pos:position pos:line="59" pos:column="40"/></name>)<argument_list pos:line="59" pos:column="41">(<argument><expr><name><name pos:line="59" pos:column="42">iobuf<pos:position pos:line="59" pos:column="47"/></name><operator pos:line="59" pos:column="47">.<pos:position pos:line="59" pos:column="48"/></operator><name pos:line="59" pos:column="48">msg<pos:position pos:line="59" pos:column="51"/></name><operator pos:line="59" pos:column="51">.<pos:position pos:line="59" pos:column="52"/></operator><name pos:line="59" pos:column="52">len<pos:position pos:line="59" pos:column="55"/></name></name> <operator pos:line="59" pos:column="56">+<pos:position pos:line="59" pos:column="57"/></operator> <name pos:line="59" pos:column="58">needed<pos:position pos:line="59" pos:column="64"/></name> <operator pos:line="59" pos:column="65">-<pos:position pos:line="59" pos:column="66"/></operator> <name><name pos:line="59" pos:column="67">iobuf<pos:position pos:line="59" pos:column="72"/></name><operator pos:line="59" pos:column="72">.<pos:position pos:line="59" pos:column="73"/></operator><name pos:line="59" pos:column="73">msg<pos:position pos:line="59" pos:column="76"/></name><operator pos:line="59" pos:column="76">.<pos:position pos:line="59" pos:column="77"/></operator><name pos:line="59" pos:column="77">size<pos:position pos:line="59" pos:column="81"/></name></name></expr></argument>)<pos:position pos:line="59" pos:column="82"/></argument_list></call></expr> <pos:position pos:line="59" pos:column="83"/></then><else pos:line="59" pos:column="83">: <expr><literal type="number" pos:line="59" pos:column="85">0L<pos:position pos:line="59" pos:column="87"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="59" pos:column="88"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="89"/></expr_stmt>
		}<pos:position pos:line="60" pos:column="18"/></block></then></if>
		<break pos:line="61" pos:column="17">break;<pos:position pos:line="61" pos:column="23"/></break>

	<case pos:line="63" pos:column="9">case <expr><literal type="number" pos:line="63" pos:column="14">0<pos:position pos:line="63" pos:column="15"/></literal></expr>:<pos:position pos:line="63" pos:column="16"/></case>
		<if pos:line="64" pos:column="17">if <condition pos:line="64" pos:column="20">(<expr><name pos:line="64" pos:column="21">msgs2stderr<pos:position pos:line="64" pos:column="32"/></name> <operator pos:line="64" pos:column="33">&amp;&amp;<pos:position pos:line="64" pos:column="43"/></operator> <call><name pos:line="64" pos:column="36">DEBUG_GTE<pos:position pos:line="64" pos:column="45"/></name><argument_list pos:line="64" pos:column="45">(<argument><expr><name pos:line="64" pos:column="46">IO<pos:position pos:line="64" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="64" pos:column="50">3<pos:position pos:line="64" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="64" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="64" pos:column="53"/></condition><then pos:line="64" pos:column="53">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="65" pos:column="25">rprintf<pos:position pos:line="65" pos:column="32"/></name><argument_list pos:line="65" pos:column="32">(<argument><expr><name pos:line="65" pos:column="33">FINFO<pos:position pos:line="65" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="65" pos:column="40">"[%s] perform_io(%ld, %d)\n"<pos:position pos:line="65" pos:column="68"/></literal></expr></argument>, <argument><expr><call><name pos:line="65" pos:column="70">who_am_i<pos:position pos:line="65" pos:column="78"/></name><argument_list pos:line="65" pos:column="78">()<pos:position pos:line="65" pos:column="80"/></argument_list></call></expr></argument>, <argument><expr><operator pos:line="65" pos:column="82">(<pos:position pos:line="65" pos:column="83"/></operator><name pos:line="65" pos:column="83">long<pos:position pos:line="65" pos:column="87"/></name><operator pos:line="65" pos:column="87">)<pos:position pos:line="65" pos:column="88"/></operator><name pos:line="65" pos:column="88">needed<pos:position pos:line="65" pos:column="94"/></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="96">flags<pos:position pos:line="65" pos:column="101"/></name></expr></argument>)<pos:position pos:line="65" pos:column="102"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="103"/></expr_stmt></block></then></if>
		<break pos:line="66" pos:column="17">break;<pos:position pos:line="66" pos:column="23"/></break>

	<default pos:line="68" pos:column="9">default:<pos:position pos:line="68" pos:column="17"/></default>
		<expr_stmt><expr><call><name pos:line="69" pos:column="17">exit_cleanup<pos:position pos:line="69" pos:column="29"/></name><argument_list pos:line="69" pos:column="29">(<argument><expr><name pos:line="69" pos:column="30">RERR_UNSUPPORTED<pos:position pos:line="69" pos:column="46"/></name></expr></argument>)<pos:position pos:line="69" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="48"/></expr_stmt>
	}<pos:position pos:line="70" pos:column="10"/></block></switch>

	<while pos:line="72" pos:column="9">while <condition pos:line="72" pos:column="15">(<expr><literal type="number" pos:line="72" pos:column="16">1<pos:position pos:line="72" pos:column="17"/></literal></expr>)<pos:position pos:line="72" pos:column="18"/></condition> <block pos:line="72" pos:column="19">{
		<switch pos:line="73" pos:column="17">switch <condition pos:line="73" pos:column="24">(<expr><name pos:line="73" pos:column="25">flags<pos:position pos:line="73" pos:column="30"/></name> <operator pos:line="73" pos:column="31">&amp;<pos:position pos:line="73" pos:column="36"/></operator> <name pos:line="73" pos:column="33">PIO_NEED_FLAGS<pos:position pos:line="73" pos:column="47"/></name></expr>)<pos:position pos:line="73" pos:column="48"/></condition> <block pos:line="73" pos:column="49">{
		<case pos:line="74" pos:column="17">case <expr><name pos:line="74" pos:column="22">PIO_NEED_INPUT<pos:position pos:line="74" pos:column="36"/></name></expr>:<pos:position pos:line="74" pos:column="37"/></case>
			<if pos:line="75" pos:column="25">if <condition pos:line="75" pos:column="28">(<expr><name><name pos:line="75" pos:column="29">iobuf<pos:position pos:line="75" pos:column="34"/></name><operator pos:line="75" pos:column="34">.<pos:position pos:line="75" pos:column="35"/></operator><name pos:line="75" pos:column="35">in<pos:position pos:line="75" pos:column="37"/></name><operator pos:line="75" pos:column="37">.<pos:position pos:line="75" pos:column="38"/></operator><name pos:line="75" pos:column="38">len<pos:position pos:line="75" pos:column="41"/></name></name> <operator pos:line="75" pos:column="42">&gt;=<pos:position pos:line="75" pos:column="47"/></operator> <name pos:line="75" pos:column="45">needed<pos:position pos:line="75" pos:column="51"/></name></expr>)<pos:position pos:line="75" pos:column="52"/></condition><then pos:line="75" pos:column="52">
				<block type="pseudo"><goto pos:line="76" pos:column="33">goto <name pos:line="76" pos:column="38">double_break<pos:position pos:line="76" pos:column="50"/></name>;<pos:position pos:line="76" pos:column="51"/></goto></block></then></if>
			<break pos:line="77" pos:column="25">break;<pos:position pos:line="77" pos:column="31"/></break>
		<case pos:line="78" pos:column="17">case <expr><name pos:line="78" pos:column="22">PIO_NEED_OUTROOM<pos:position pos:line="78" pos:column="38"/></name></expr>:<pos:position pos:line="78" pos:column="39"/></case>
			<comment type="block" pos:line="79" pos:column="25">/* Note that iobuf.out_empty_len doesn't factor into this check
			 * because iobuf.out.len already holds any needed header len. */</comment>
			<if pos:line="81" pos:column="25">if <condition pos:line="81" pos:column="28">(<expr><name><name pos:line="81" pos:column="29">iobuf<pos:position pos:line="81" pos:column="34"/></name><operator pos:line="81" pos:column="34">.<pos:position pos:line="81" pos:column="35"/></operator><name pos:line="81" pos:column="35">out<pos:position pos:line="81" pos:column="38"/></name><operator pos:line="81" pos:column="38">.<pos:position pos:line="81" pos:column="39"/></operator><name pos:line="81" pos:column="39">len<pos:position pos:line="81" pos:column="42"/></name></name> <operator pos:line="81" pos:column="43">+<pos:position pos:line="81" pos:column="44"/></operator> <name pos:line="81" pos:column="45">needed<pos:position pos:line="81" pos:column="51"/></name> <operator pos:line="81" pos:column="52">&lt;=<pos:position pos:line="81" pos:column="57"/></operator> <name><name pos:line="81" pos:column="55">iobuf<pos:position pos:line="81" pos:column="60"/></name><operator pos:line="81" pos:column="60">.<pos:position pos:line="81" pos:column="61"/></operator><name pos:line="81" pos:column="61">out<pos:position pos:line="81" pos:column="64"/></name><operator pos:line="81" pos:column="64">.<pos:position pos:line="81" pos:column="65"/></operator><name pos:line="81" pos:column="65">size<pos:position pos:line="81" pos:column="69"/></name></name></expr>)<pos:position pos:line="81" pos:column="70"/></condition><then pos:line="81" pos:column="70">
				<block type="pseudo"><goto pos:line="82" pos:column="33">goto <name pos:line="82" pos:column="38">double_break<pos:position pos:line="82" pos:column="50"/></name>;<pos:position pos:line="82" pos:column="51"/></goto></block></then></if>
			<break pos:line="83" pos:column="25">break;<pos:position pos:line="83" pos:column="31"/></break>
		<case pos:line="84" pos:column="17">case <expr><name pos:line="84" pos:column="22">PIO_NEED_MSGROOM<pos:position pos:line="84" pos:column="38"/></name></expr>:<pos:position pos:line="84" pos:column="39"/></case>
			<if pos:line="85" pos:column="25">if <condition pos:line="85" pos:column="28">(<expr><name><name pos:line="85" pos:column="29">iobuf<pos:position pos:line="85" pos:column="34"/></name><operator pos:line="85" pos:column="34">.<pos:position pos:line="85" pos:column="35"/></operator><name pos:line="85" pos:column="35">msg<pos:position pos:line="85" pos:column="38"/></name><operator pos:line="85" pos:column="38">.<pos:position pos:line="85" pos:column="39"/></operator><name pos:line="85" pos:column="39">len<pos:position pos:line="85" pos:column="42"/></name></name> <operator pos:line="85" pos:column="43">+<pos:position pos:line="85" pos:column="44"/></operator> <name pos:line="85" pos:column="45">needed<pos:position pos:line="85" pos:column="51"/></name> <operator pos:line="85" pos:column="52">&lt;=<pos:position pos:line="85" pos:column="57"/></operator> <name><name pos:line="85" pos:column="55">iobuf<pos:position pos:line="85" pos:column="60"/></name><operator pos:line="85" pos:column="60">.<pos:position pos:line="85" pos:column="61"/></operator><name pos:line="85" pos:column="61">msg<pos:position pos:line="85" pos:column="64"/></name><operator pos:line="85" pos:column="64">.<pos:position pos:line="85" pos:column="65"/></operator><name pos:line="85" pos:column="65">size<pos:position pos:line="85" pos:column="69"/></name></name></expr>)<pos:position pos:line="85" pos:column="70"/></condition><then pos:line="85" pos:column="70">
				<block type="pseudo"><goto pos:line="86" pos:column="33">goto <name pos:line="86" pos:column="38">double_break<pos:position pos:line="86" pos:column="50"/></name>;<pos:position pos:line="86" pos:column="51"/></goto></block></then></if>
			<break pos:line="87" pos:column="25">break;<pos:position pos:line="87" pos:column="31"/></break>
		}<pos:position pos:line="88" pos:column="18"/></block></switch>

		<expr_stmt><expr><name pos:line="90" pos:column="17">max_fd<pos:position pos:line="90" pos:column="23"/></name> <operator pos:line="90" pos:column="24">=<pos:position pos:line="90" pos:column="25"/></operator> <operator pos:line="90" pos:column="26">-<pos:position pos:line="90" pos:column="27"/></operator><literal type="number" pos:line="90" pos:column="27">1<pos:position pos:line="90" pos:column="28"/></literal></expr>;<pos:position pos:line="90" pos:column="29"/></expr_stmt>

		<expr_stmt><expr><call><name pos:line="92" pos:column="17">FD_ZERO<pos:position pos:line="92" pos:column="24"/></name><argument_list pos:line="92" pos:column="24">(<argument><expr><operator pos:line="92" pos:column="25">&amp;<pos:position pos:line="92" pos:column="30"/></operator><name pos:line="92" pos:column="26">r_fds<pos:position pos:line="92" pos:column="31"/></name></expr></argument>)<pos:position pos:line="92" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="33"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="93" pos:column="17">FD_ZERO<pos:position pos:line="93" pos:column="24"/></name><argument_list pos:line="93" pos:column="24">(<argument><expr><operator pos:line="93" pos:column="25">&amp;<pos:position pos:line="93" pos:column="30"/></operator><name pos:line="93" pos:column="26">e_fds<pos:position pos:line="93" pos:column="31"/></name></expr></argument>)<pos:position pos:line="93" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="33"/></expr_stmt>
		<if pos:line="94" pos:column="17">if <condition pos:line="94" pos:column="20">(<expr><name><name pos:line="94" pos:column="21">iobuf<pos:position pos:line="94" pos:column="26"/></name><operator pos:line="94" pos:column="26">.<pos:position pos:line="94" pos:column="27"/></operator><name pos:line="94" pos:column="27">in_fd<pos:position pos:line="94" pos:column="32"/></name></name> <operator pos:line="94" pos:column="33">&gt;=<pos:position pos:line="94" pos:column="38"/></operator> <literal type="number" pos:line="94" pos:column="36">0<pos:position pos:line="94" pos:column="37"/></literal> <operator pos:line="94" pos:column="38">&amp;&amp;<pos:position pos:line="94" pos:column="48"/></operator> <name><name pos:line="94" pos:column="41">iobuf<pos:position pos:line="94" pos:column="46"/></name><operator pos:line="94" pos:column="46">.<pos:position pos:line="94" pos:column="47"/></operator><name pos:line="94" pos:column="47">in<pos:position pos:line="94" pos:column="49"/></name><operator pos:line="94" pos:column="49">.<pos:position pos:line="94" pos:column="50"/></operator><name pos:line="94" pos:column="50">size<pos:position pos:line="94" pos:column="54"/></name></name> <operator pos:line="94" pos:column="55">-<pos:position pos:line="94" pos:column="56"/></operator> <name><name pos:line="94" pos:column="57">iobuf<pos:position pos:line="94" pos:column="62"/></name><operator pos:line="94" pos:column="62">.<pos:position pos:line="94" pos:column="63"/></operator><name pos:line="94" pos:column="63">in<pos:position pos:line="94" pos:column="65"/></name><operator pos:line="94" pos:column="65">.<pos:position pos:line="94" pos:column="66"/></operator><name pos:line="94" pos:column="66">len<pos:position pos:line="94" pos:column="69"/></name></name></expr>)<pos:position pos:line="94" pos:column="70"/></condition><then pos:line="94" pos:column="70"> <block pos:line="94" pos:column="71">{
			<if pos:line="95" pos:column="25">if <condition pos:line="95" pos:column="28">(<expr><operator pos:line="95" pos:column="29">!<pos:position pos:line="95" pos:column="30"/></operator><name pos:line="95" pos:column="30">read_batch<pos:position pos:line="95" pos:column="40"/></name> <operator pos:line="95" pos:column="41">||<pos:position pos:line="95" pos:column="43"/></operator> <name pos:line="95" pos:column="44">batch_fd<pos:position pos:line="95" pos:column="52"/></name> <operator pos:line="95" pos:column="53">&gt;=<pos:position pos:line="95" pos:column="58"/></operator> <literal type="number" pos:line="95" pos:column="56">0<pos:position pos:line="95" pos:column="57"/></literal></expr>)<pos:position pos:line="95" pos:column="58"/></condition><then pos:line="95" pos:column="58"> <block pos:line="95" pos:column="59">{
				<expr_stmt><expr><call><name pos:line="96" pos:column="33">FD_SET<pos:position pos:line="96" pos:column="39"/></name><argument_list pos:line="96" pos:column="39">(<argument><expr><name><name pos:line="96" pos:column="40">iobuf<pos:position pos:line="96" pos:column="45"/></name><operator pos:line="96" pos:column="45">.<pos:position pos:line="96" pos:column="46"/></operator><name pos:line="96" pos:column="46">in_fd<pos:position pos:line="96" pos:column="51"/></name></name></expr></argument>, <argument><expr><operator pos:line="96" pos:column="53">&amp;<pos:position pos:line="96" pos:column="58"/></operator><name pos:line="96" pos:column="54">r_fds<pos:position pos:line="96" pos:column="59"/></name></expr></argument>)<pos:position pos:line="96" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="61"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="97" pos:column="33">FD_SET<pos:position pos:line="97" pos:column="39"/></name><argument_list pos:line="97" pos:column="39">(<argument><expr><name><name pos:line="97" pos:column="40">iobuf<pos:position pos:line="97" pos:column="45"/></name><operator pos:line="97" pos:column="45">.<pos:position pos:line="97" pos:column="46"/></operator><name pos:line="97" pos:column="46">in_fd<pos:position pos:line="97" pos:column="51"/></name></name></expr></argument>, <argument><expr><operator pos:line="97" pos:column="53">&amp;<pos:position pos:line="97" pos:column="58"/></operator><name pos:line="97" pos:column="54">e_fds<pos:position pos:line="97" pos:column="59"/></name></expr></argument>)<pos:position pos:line="97" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="61"/></expr_stmt>
			}<pos:position pos:line="98" pos:column="26"/></block></then></if>
			<if pos:line="99" pos:column="25">if <condition pos:line="99" pos:column="28">(<expr><name><name pos:line="99" pos:column="29">iobuf<pos:position pos:line="99" pos:column="34"/></name><operator pos:line="99" pos:column="34">.<pos:position pos:line="99" pos:column="35"/></operator><name pos:line="99" pos:column="35">in_fd<pos:position pos:line="99" pos:column="40"/></name></name> <operator pos:line="99" pos:column="41">&gt;<pos:position pos:line="99" pos:column="45"/></operator> <name pos:line="99" pos:column="43">max_fd<pos:position pos:line="99" pos:column="49"/></name></expr>)<pos:position pos:line="99" pos:column="50"/></condition><then pos:line="99" pos:column="50">
				<block type="pseudo"><expr_stmt><expr><name pos:line="100" pos:column="33">max_fd<pos:position pos:line="100" pos:column="39"/></name> <operator pos:line="100" pos:column="40">=<pos:position pos:line="100" pos:column="41"/></operator> <name><name pos:line="100" pos:column="42">iobuf<pos:position pos:line="100" pos:column="47"/></name><operator pos:line="100" pos:column="47">.<pos:position pos:line="100" pos:column="48"/></operator><name pos:line="100" pos:column="48">in_fd<pos:position pos:line="100" pos:column="53"/></name></name></expr>;<pos:position pos:line="100" pos:column="54"/></expr_stmt></block></then></if>
		}<pos:position pos:line="101" pos:column="18"/></block></then></if>

		<comment type="block" pos:line="103" pos:column="17">/* Only do more filesfrom processing if there is enough room in the out buffer. */</comment>
		<if pos:line="104" pos:column="17">if <condition pos:line="104" pos:column="20">(<expr><name pos:line="104" pos:column="21">ff_forward_fd<pos:position pos:line="104" pos:column="34"/></name> <operator pos:line="104" pos:column="35">&gt;=<pos:position pos:line="104" pos:column="40"/></operator> <literal type="number" pos:line="104" pos:column="38">0<pos:position pos:line="104" pos:column="39"/></literal> <operator pos:line="104" pos:column="40">&amp;&amp;<pos:position pos:line="104" pos:column="50"/></operator> <name><name pos:line="104" pos:column="43">iobuf<pos:position pos:line="104" pos:column="48"/></name><operator pos:line="104" pos:column="48">.<pos:position pos:line="104" pos:column="49"/></operator><name pos:line="104" pos:column="49">out<pos:position pos:line="104" pos:column="52"/></name><operator pos:line="104" pos:column="52">.<pos:position pos:line="104" pos:column="53"/></operator><name pos:line="104" pos:column="53">size<pos:position pos:line="104" pos:column="57"/></name></name> <operator pos:line="104" pos:column="58">-<pos:position pos:line="104" pos:column="59"/></operator> <name><name pos:line="104" pos:column="60">iobuf<pos:position pos:line="104" pos:column="65"/></name><operator pos:line="104" pos:column="65">.<pos:position pos:line="104" pos:column="66"/></operator><name pos:line="104" pos:column="66">out<pos:position pos:line="104" pos:column="69"/></name><operator pos:line="104" pos:column="69">.<pos:position pos:line="104" pos:column="70"/></operator><name pos:line="104" pos:column="70">len<pos:position pos:line="104" pos:column="73"/></name></name> <operator pos:line="104" pos:column="74">&gt;<pos:position pos:line="104" pos:column="78"/></operator> <name pos:line="104" pos:column="76">FILESFROM_BUFLEN<pos:position pos:line="104" pos:column="92"/></name><operator pos:line="104" pos:column="92">*<pos:position pos:line="104" pos:column="93"/></operator><literal type="number" pos:line="104" pos:column="93">2<pos:position pos:line="104" pos:column="94"/></literal></expr>)<pos:position pos:line="104" pos:column="95"/></condition><then pos:line="104" pos:column="95"> <block pos:line="104" pos:column="96">{
			<expr_stmt><expr><call><name pos:line="105" pos:column="25">FD_SET<pos:position pos:line="105" pos:column="31"/></name><argument_list pos:line="105" pos:column="31">(<argument><expr><name pos:line="105" pos:column="32">ff_forward_fd<pos:position pos:line="105" pos:column="45"/></name></expr></argument>, <argument><expr><operator pos:line="105" pos:column="47">&amp;<pos:position pos:line="105" pos:column="52"/></operator><name pos:line="105" pos:column="48">r_fds<pos:position pos:line="105" pos:column="53"/></name></expr></argument>)<pos:position pos:line="105" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="105" pos:column="55"/></expr_stmt>
			<if pos:line="106" pos:column="25">if <condition pos:line="106" pos:column="28">(<expr><name pos:line="106" pos:column="29">ff_forward_fd<pos:position pos:line="106" pos:column="42"/></name> <operator pos:line="106" pos:column="43">&gt;<pos:position pos:line="106" pos:column="47"/></operator> <name pos:line="106" pos:column="45">max_fd<pos:position pos:line="106" pos:column="51"/></name></expr>)<pos:position pos:line="106" pos:column="52"/></condition><then pos:line="106" pos:column="52">
				<block type="pseudo"><expr_stmt><expr><name pos:line="107" pos:column="33">max_fd<pos:position pos:line="107" pos:column="39"/></name> <operator pos:line="107" pos:column="40">=<pos:position pos:line="107" pos:column="41"/></operator> <name pos:line="107" pos:column="42">ff_forward_fd<pos:position pos:line="107" pos:column="55"/></name></expr>;<pos:position pos:line="107" pos:column="56"/></expr_stmt></block></then></if>
		}<pos:position pos:line="108" pos:column="18"/></block></then></if>

		<expr_stmt><expr><call><name pos:line="110" pos:column="17">FD_ZERO<pos:position pos:line="110" pos:column="24"/></name><argument_list pos:line="110" pos:column="24">(<argument><expr><operator pos:line="110" pos:column="25">&amp;<pos:position pos:line="110" pos:column="30"/></operator><name pos:line="110" pos:column="26">w_fds<pos:position pos:line="110" pos:column="31"/></name></expr></argument>)<pos:position pos:line="110" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="110" pos:column="33"/></expr_stmt>
		<if pos:line="111" pos:column="17">if <condition pos:line="111" pos:column="20">(<expr><name><name pos:line="111" pos:column="21">iobuf<pos:position pos:line="111" pos:column="26"/></name><operator pos:line="111" pos:column="26">.<pos:position pos:line="111" pos:column="27"/></operator><name pos:line="111" pos:column="27">out_fd<pos:position pos:line="111" pos:column="33"/></name></name> <operator pos:line="111" pos:column="34">&gt;=<pos:position pos:line="111" pos:column="39"/></operator> <literal type="number" pos:line="111" pos:column="37">0<pos:position pos:line="111" pos:column="38"/></literal></expr>)<pos:position pos:line="111" pos:column="39"/></condition><then pos:line="111" pos:column="39"> <block pos:line="111" pos:column="40">{
			<if pos:line="112" pos:column="25">if <condition pos:line="112" pos:column="28">(<expr><name><name pos:line="112" pos:column="29">iobuf<pos:position pos:line="112" pos:column="34"/></name><operator pos:line="112" pos:column="34">.<pos:position pos:line="112" pos:column="35"/></operator><name pos:line="112" pos:column="35">raw_flushing_ends_before<pos:position pos:line="112" pos:column="59"/></name></name>
			 <operator pos:line="113" pos:column="26">||<pos:position pos:line="113" pos:column="28"/></operator> <operator pos:line="113" pos:column="29">(<pos:position pos:line="113" pos:column="30"/></operator><operator pos:line="113" pos:column="30">!<pos:position pos:line="113" pos:column="31"/></operator><name><name pos:line="113" pos:column="31">iobuf<pos:position pos:line="113" pos:column="36"/></name><operator pos:line="113" pos:column="36">.<pos:position pos:line="113" pos:column="37"/></operator><name pos:line="113" pos:column="37">msg<pos:position pos:line="113" pos:column="40"/></name><operator pos:line="113" pos:column="40">.<pos:position pos:line="113" pos:column="41"/></operator><name pos:line="113" pos:column="41">len<pos:position pos:line="113" pos:column="44"/></name></name> <operator pos:line="113" pos:column="45">&amp;&amp;<pos:position pos:line="113" pos:column="55"/></operator> <name><name pos:line="113" pos:column="48">iobuf<pos:position pos:line="113" pos:column="53"/></name><operator pos:line="113" pos:column="53">.<pos:position pos:line="113" pos:column="54"/></operator><name pos:line="113" pos:column="54">out<pos:position pos:line="113" pos:column="57"/></name><operator pos:line="113" pos:column="57">.<pos:position pos:line="113" pos:column="58"/></operator><name pos:line="113" pos:column="58">len<pos:position pos:line="113" pos:column="61"/></name></name> <operator pos:line="113" pos:column="62">&gt;<pos:position pos:line="113" pos:column="66"/></operator> <name><name pos:line="113" pos:column="64">iobuf<pos:position pos:line="113" pos:column="69"/></name><operator pos:line="113" pos:column="69">.<pos:position pos:line="113" pos:column="70"/></operator><name pos:line="113" pos:column="70">out_empty_len<pos:position pos:line="113" pos:column="83"/></name></name> <operator pos:line="113" pos:column="84">&amp;&amp;<pos:position pos:line="113" pos:column="94"/></operator> <operator pos:line="113" pos:column="87">!<pos:position pos:line="113" pos:column="88"/></operator><operator pos:line="113" pos:column="88">(<pos:position pos:line="113" pos:column="89"/></operator><name pos:line="113" pos:column="89">flags<pos:position pos:line="113" pos:column="94"/></name> <operator pos:line="113" pos:column="95">&amp;<pos:position pos:line="113" pos:column="100"/></operator> <name pos:line="113" pos:column="97">PIO_NEED_MSGROOM<pos:position pos:line="113" pos:column="113"/></name><operator pos:line="113" pos:column="113">)<pos:position pos:line="113" pos:column="114"/></operator><operator pos:line="113" pos:column="114">)<pos:position pos:line="113" pos:column="115"/></operator></expr>)<pos:position pos:line="113" pos:column="116"/></condition><then pos:line="113" pos:column="116"> <block pos:line="113" pos:column="117">{
				<if pos:line="114" pos:column="33">if <condition pos:line="114" pos:column="36">(<expr><name pos:line="114" pos:column="37">OUT_MULTIPLEXED<pos:position pos:line="114" pos:column="52"/></name> <operator pos:line="114" pos:column="53">&amp;&amp;<pos:position pos:line="114" pos:column="63"/></operator> <operator pos:line="114" pos:column="56">!<pos:position pos:line="114" pos:column="57"/></operator><name><name pos:line="114" pos:column="57">iobuf<pos:position pos:line="114" pos:column="62"/></name><operator pos:line="114" pos:column="62">.<pos:position pos:line="114" pos:column="63"/></operator><name pos:line="114" pos:column="63">raw_flushing_ends_before<pos:position pos:line="114" pos:column="87"/></name></name></expr>)<pos:position pos:line="114" pos:column="88"/></condition><then pos:line="114" pos:column="88"> <block pos:line="114" pos:column="89">{
					<comment type="block" pos:line="115" pos:column="41">/* The iobuf.raw_flushing_ends_before value can point off the end
					 * of the iobuf.out buffer for a while, for easier subtracting. */</comment>
					<expr_stmt><expr><name><name pos:line="117" pos:column="41">iobuf<pos:position pos:line="117" pos:column="46"/></name><operator pos:line="117" pos:column="46">.<pos:position pos:line="117" pos:column="47"/></operator><name pos:line="117" pos:column="47">raw_flushing_ends_before<pos:position pos:line="117" pos:column="71"/></name></name> <operator pos:line="117" pos:column="72">=<pos:position pos:line="117" pos:column="73"/></operator> <name><name pos:line="117" pos:column="74">iobuf<pos:position pos:line="117" pos:column="79"/></name><operator pos:line="117" pos:column="79">.<pos:position pos:line="117" pos:column="80"/></operator><name pos:line="117" pos:column="80">out<pos:position pos:line="117" pos:column="83"/></name><operator pos:line="117" pos:column="83">.<pos:position pos:line="117" pos:column="84"/></operator><name pos:line="117" pos:column="84">pos<pos:position pos:line="117" pos:column="87"/></name></name> <operator pos:line="117" pos:column="88">+<pos:position pos:line="117" pos:column="89"/></operator> <name><name pos:line="117" pos:column="90">iobuf<pos:position pos:line="117" pos:column="95"/></name><operator pos:line="117" pos:column="95">.<pos:position pos:line="117" pos:column="96"/></operator><name pos:line="117" pos:column="96">out<pos:position pos:line="117" pos:column="99"/></name><operator pos:line="117" pos:column="99">.<pos:position pos:line="117" pos:column="100"/></operator><name pos:line="117" pos:column="100">len<pos:position pos:line="117" pos:column="103"/></name></name></expr>;<pos:position pos:line="117" pos:column="104"/></expr_stmt>

					<expr_stmt><expr><call><name pos:line="119" pos:column="41">SIVAL<pos:position pos:line="119" pos:column="46"/></name><argument_list pos:line="119" pos:column="46">(<argument><expr><name><name pos:line="119" pos:column="47">iobuf<pos:position pos:line="119" pos:column="52"/></name><operator pos:line="119" pos:column="52">.<pos:position pos:line="119" pos:column="53"/></operator><name pos:line="119" pos:column="53">out<pos:position pos:line="119" pos:column="56"/></name><operator pos:line="119" pos:column="56">.<pos:position pos:line="119" pos:column="57"/></operator><name pos:line="119" pos:column="57">buf<pos:position pos:line="119" pos:column="60"/></name></name> <operator pos:line="119" pos:column="61">+<pos:position pos:line="119" pos:column="62"/></operator> <name><name pos:line="119" pos:column="63">iobuf<pos:position pos:line="119" pos:column="68"/></name><operator pos:line="119" pos:column="68">.<pos:position pos:line="119" pos:column="69"/></operator><name pos:line="119" pos:column="69">raw_data_header_pos<pos:position pos:line="119" pos:column="88"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="119" pos:column="90">0<pos:position pos:line="119" pos:column="91"/></literal></expr></argument>,
					      <argument><expr><operator pos:line="120" pos:column="47">(<pos:position pos:line="120" pos:column="48"/></operator><operator pos:line="120" pos:column="48">(<pos:position pos:line="120" pos:column="49"/></operator><name pos:line="120" pos:column="49">MPLEX_BASE<pos:position pos:line="120" pos:column="59"/></name> <operator pos:line="120" pos:column="60">+<pos:position pos:line="120" pos:column="61"/></operator> <operator pos:line="120" pos:column="62">(<pos:position pos:line="120" pos:column="63"/></operator><name pos:line="120" pos:column="63">int<pos:position pos:line="120" pos:column="66"/></name><operator pos:line="120" pos:column="66">)<pos:position pos:line="120" pos:column="67"/></operator><name pos:line="120" pos:column="67">MSG_DATA<pos:position pos:line="120" pos:column="75"/></name><operator pos:line="120" pos:column="75">)<pos:position pos:line="120" pos:column="76"/></operator><operator pos:line="120" pos:column="76">&lt;&lt;<pos:position pos:line="120" pos:column="84"/></operator><literal type="number" pos:line="120" pos:column="78">24<pos:position pos:line="120" pos:column="80"/></literal><operator pos:line="120" pos:column="80">)<pos:position pos:line="120" pos:column="81"/></operator> <operator pos:line="120" pos:column="82">+<pos:position pos:line="120" pos:column="83"/></operator> <name><name pos:line="120" pos:column="84">iobuf<pos:position pos:line="120" pos:column="89"/></name><operator pos:line="120" pos:column="89">.<pos:position pos:line="120" pos:column="90"/></operator><name pos:line="120" pos:column="90">out<pos:position pos:line="120" pos:column="93"/></name><operator pos:line="120" pos:column="93">.<pos:position pos:line="120" pos:column="94"/></operator><name pos:line="120" pos:column="94">len<pos:position pos:line="120" pos:column="97"/></name></name> <operator pos:line="120" pos:column="98">-<pos:position pos:line="120" pos:column="99"/></operator> <literal type="number" pos:line="120" pos:column="100">4<pos:position pos:line="120" pos:column="101"/></literal></expr></argument>)<pos:position pos:line="120" pos:column="102"/></argument_list></call></expr>;<pos:position pos:line="120" pos:column="103"/></expr_stmt>

					<if pos:line="122" pos:column="41">if <condition pos:line="122" pos:column="44">(<expr><name pos:line="122" pos:column="45">msgs2stderr<pos:position pos:line="122" pos:column="56"/></name> <operator pos:line="122" pos:column="57">&amp;&amp;<pos:position pos:line="122" pos:column="67"/></operator> <call><name pos:line="122" pos:column="60">DEBUG_GTE<pos:position pos:line="122" pos:column="69"/></name><argument_list pos:line="122" pos:column="69">(<argument><expr><name pos:line="122" pos:column="70">IO<pos:position pos:line="122" pos:column="72"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="122" pos:column="74">1<pos:position pos:line="122" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="122" pos:column="76"/></argument_list></call></expr>)<pos:position pos:line="122" pos:column="77"/></condition><then pos:line="122" pos:column="77"> <block pos:line="122" pos:column="78">{
						<expr_stmt><expr><call><name pos:line="123" pos:column="49">rprintf<pos:position pos:line="123" pos:column="56"/></name><argument_list pos:line="123" pos:column="56">(<argument><expr><name pos:line="123" pos:column="57">FINFO<pos:position pos:line="123" pos:column="62"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="123" pos:column="64">"[%s] send_msg(%d, %ld)\n"<pos:position pos:line="123" pos:column="90"/></literal></expr></argument>,
							<argument><expr><call><name pos:line="124" pos:column="57">who_am_i<pos:position pos:line="124" pos:column="65"/></name><argument_list pos:line="124" pos:column="65">()<pos:position pos:line="124" pos:column="67"/></argument_list></call></expr></argument>, <argument><expr><operator pos:line="124" pos:column="69">(<pos:position pos:line="124" pos:column="70"/></operator><name pos:line="124" pos:column="70">int<pos:position pos:line="124" pos:column="73"/></name><operator pos:line="124" pos:column="73">)<pos:position pos:line="124" pos:column="74"/></operator><name pos:line="124" pos:column="74">MSG_DATA<pos:position pos:line="124" pos:column="82"/></name></expr></argument>, <argument><expr><operator pos:line="124" pos:column="84">(<pos:position pos:line="124" pos:column="85"/></operator><name pos:line="124" pos:column="85">long<pos:position pos:line="124" pos:column="89"/></name><operator pos:line="124" pos:column="89">)<pos:position pos:line="124" pos:column="90"/></operator><name><name pos:line="124" pos:column="90">iobuf<pos:position pos:line="124" pos:column="95"/></name><operator pos:line="124" pos:column="95">.<pos:position pos:line="124" pos:column="96"/></operator><name pos:line="124" pos:column="96">out<pos:position pos:line="124" pos:column="99"/></name><operator pos:line="124" pos:column="99">.<pos:position pos:line="124" pos:column="100"/></operator><name pos:line="124" pos:column="100">len<pos:position pos:line="124" pos:column="103"/></name></name> <operator pos:line="124" pos:column="104">-<pos:position pos:line="124" pos:column="105"/></operator> <literal type="number" pos:line="124" pos:column="106">4<pos:position pos:line="124" pos:column="107"/></literal></expr></argument>)<pos:position pos:line="124" pos:column="108"/></argument_list></call></expr>;<pos:position pos:line="124" pos:column="109"/></expr_stmt>
					}<pos:position pos:line="125" pos:column="42"/></block></then></if>

					<comment type="block" pos:line="127" pos:column="41">/* reserve room for the next MSG_DATA header */</comment>
					<expr_stmt><expr><name><name pos:line="128" pos:column="41">iobuf<pos:position pos:line="128" pos:column="46"/></name><operator pos:line="128" pos:column="46">.<pos:position pos:line="128" pos:column="47"/></operator><name pos:line="128" pos:column="47">raw_data_header_pos<pos:position pos:line="128" pos:column="66"/></name></name> <operator pos:line="128" pos:column="67">=<pos:position pos:line="128" pos:column="68"/></operator> <name><name pos:line="128" pos:column="69">iobuf<pos:position pos:line="128" pos:column="74"/></name><operator pos:line="128" pos:column="74">.<pos:position pos:line="128" pos:column="75"/></operator><name pos:line="128" pos:column="75">raw_flushing_ends_before<pos:position pos:line="128" pos:column="99"/></name></name></expr>;<pos:position pos:line="128" pos:column="100"/></expr_stmt>
					<if pos:line="129" pos:column="41">if <condition pos:line="129" pos:column="44">(<expr><name><name pos:line="129" pos:column="45">iobuf<pos:position pos:line="129" pos:column="50"/></name><operator pos:line="129" pos:column="50">.<pos:position pos:line="129" pos:column="51"/></operator><name pos:line="129" pos:column="51">raw_data_header_pos<pos:position pos:line="129" pos:column="70"/></name></name> <operator pos:line="129" pos:column="71">&gt;=<pos:position pos:line="129" pos:column="76"/></operator> <name><name pos:line="129" pos:column="74">iobuf<pos:position pos:line="129" pos:column="79"/></name><operator pos:line="129" pos:column="79">.<pos:position pos:line="129" pos:column="80"/></operator><name pos:line="129" pos:column="80">out<pos:position pos:line="129" pos:column="83"/></name><operator pos:line="129" pos:column="83">.<pos:position pos:line="129" pos:column="84"/></operator><name pos:line="129" pos:column="84">size<pos:position pos:line="129" pos:column="88"/></name></name></expr>)<pos:position pos:line="129" pos:column="89"/></condition><then pos:line="129" pos:column="89">
						<block type="pseudo"><expr_stmt><expr><name><name pos:line="130" pos:column="49">iobuf<pos:position pos:line="130" pos:column="54"/></name><operator pos:line="130" pos:column="54">.<pos:position pos:line="130" pos:column="55"/></operator><name pos:line="130" pos:column="55">raw_data_header_pos<pos:position pos:line="130" pos:column="74"/></name></name> <operator pos:line="130" pos:column="75">-=<pos:position pos:line="130" pos:column="77"/></operator> <name><name pos:line="130" pos:column="78">iobuf<pos:position pos:line="130" pos:column="83"/></name><operator pos:line="130" pos:column="83">.<pos:position pos:line="130" pos:column="84"/></operator><name pos:line="130" pos:column="84">out<pos:position pos:line="130" pos:column="87"/></name><operator pos:line="130" pos:column="87">.<pos:position pos:line="130" pos:column="88"/></operator><name pos:line="130" pos:column="88">size<pos:position pos:line="130" pos:column="92"/></name></name></expr>;<pos:position pos:line="130" pos:column="93"/></expr_stmt></block></then>
					<elseif pos:line="131" pos:column="41">else <if pos:line="131" pos:column="46">if <condition pos:line="131" pos:column="49">(<expr><name><name pos:line="131" pos:column="50">iobuf<pos:position pos:line="131" pos:column="55"/></name><operator pos:line="131" pos:column="55">.<pos:position pos:line="131" pos:column="56"/></operator><name pos:line="131" pos:column="56">raw_data_header_pos<pos:position pos:line="131" pos:column="75"/></name></name> <operator pos:line="131" pos:column="76">+<pos:position pos:line="131" pos:column="77"/></operator> <literal type="number" pos:line="131" pos:column="78">4<pos:position pos:line="131" pos:column="79"/></literal> <operator pos:line="131" pos:column="80">&gt;<pos:position pos:line="131" pos:column="84"/></operator> <name><name pos:line="131" pos:column="82">iobuf<pos:position pos:line="131" pos:column="87"/></name><operator pos:line="131" pos:column="87">.<pos:position pos:line="131" pos:column="88"/></operator><name pos:line="131" pos:column="88">out<pos:position pos:line="131" pos:column="91"/></name><operator pos:line="131" pos:column="91">.<pos:position pos:line="131" pos:column="92"/></operator><name pos:line="131" pos:column="92">size<pos:position pos:line="131" pos:column="96"/></name></name></expr>)<pos:position pos:line="131" pos:column="97"/></condition><then pos:line="131" pos:column="97"> <block pos:line="131" pos:column="98">{
						<comment type="block" pos:line="132" pos:column="49">/* The 4-byte header won't fit at the end of the buffer,
						 * so we'll temporarily reduce the output buffer's size
						 * and put the header at the start of the buffer. */</comment>
						<expr_stmt><expr><call><name pos:line="135" pos:column="49">reduce_iobuf_size<pos:position pos:line="135" pos:column="66"/></name><argument_list pos:line="135" pos:column="66">(<argument><expr><operator pos:line="135" pos:column="67">&amp;<pos:position pos:line="135" pos:column="72"/></operator><name><name pos:line="135" pos:column="68">iobuf<pos:position pos:line="135" pos:column="73"/></name><operator pos:line="135" pos:column="73">.<pos:position pos:line="135" pos:column="74"/></operator><name pos:line="135" pos:column="74">out<pos:position pos:line="135" pos:column="77"/></name></name></expr></argument>, <argument><expr><name><name pos:line="135" pos:column="79">iobuf<pos:position pos:line="135" pos:column="84"/></name><operator pos:line="135" pos:column="84">.<pos:position pos:line="135" pos:column="85"/></operator><name pos:line="135" pos:column="85">raw_data_header_pos<pos:position pos:line="135" pos:column="104"/></name></name></expr></argument>)<pos:position pos:line="135" pos:column="105"/></argument_list></call></expr>;<pos:position pos:line="135" pos:column="106"/></expr_stmt>
						<expr_stmt><expr><name><name pos:line="136" pos:column="49">iobuf<pos:position pos:line="136" pos:column="54"/></name><operator pos:line="136" pos:column="54">.<pos:position pos:line="136" pos:column="55"/></operator><name pos:line="136" pos:column="55">raw_data_header_pos<pos:position pos:line="136" pos:column="74"/></name></name> <operator pos:line="136" pos:column="75">=<pos:position pos:line="136" pos:column="76"/></operator> <literal type="number" pos:line="136" pos:column="77">0<pos:position pos:line="136" pos:column="78"/></literal></expr>;<pos:position pos:line="136" pos:column="79"/></expr_stmt>
					}<pos:position pos:line="137" pos:column="42"/></block></then></if></elseif></if>
					<comment type="block" pos:line="138" pos:column="41">/* Yes, it is possible for this to make len &gt; size for a while. */</comment>
					<expr_stmt><expr><name><name pos:line="139" pos:column="41">iobuf<pos:position pos:line="139" pos:column="46"/></name><operator pos:line="139" pos:column="46">.<pos:position pos:line="139" pos:column="47"/></operator><name pos:line="139" pos:column="47">out<pos:position pos:line="139" pos:column="50"/></name><operator pos:line="139" pos:column="50">.<pos:position pos:line="139" pos:column="51"/></operator><name pos:line="139" pos:column="51">len<pos:position pos:line="139" pos:column="54"/></name></name> <operator pos:line="139" pos:column="55">+=<pos:position pos:line="139" pos:column="57"/></operator> <literal type="number" pos:line="139" pos:column="58">4<pos:position pos:line="139" pos:column="59"/></literal></expr>;<pos:position pos:line="139" pos:column="60"/></expr_stmt>
				}<pos:position pos:line="140" pos:column="34"/></block></then></if>

				<expr_stmt><expr><name pos:line="142" pos:column="33">empty_buf_len<pos:position pos:line="142" pos:column="46"/></name> <operator pos:line="142" pos:column="47">=<pos:position pos:line="142" pos:column="48"/></operator> <name><name pos:line="142" pos:column="49">iobuf<pos:position pos:line="142" pos:column="54"/></name><operator pos:line="142" pos:column="54">.<pos:position pos:line="142" pos:column="55"/></operator><name pos:line="142" pos:column="55">out_empty_len<pos:position pos:line="142" pos:column="68"/></name></name></expr>;<pos:position pos:line="142" pos:column="69"/></expr_stmt>
				<expr_stmt><expr><name pos:line="143" pos:column="33">out<pos:position pos:line="143" pos:column="36"/></name> <operator pos:line="143" pos:column="37">=<pos:position pos:line="143" pos:column="38"/></operator> <operator pos:line="143" pos:column="39">&amp;<pos:position pos:line="143" pos:column="44"/></operator><name><name pos:line="143" pos:column="40">iobuf<pos:position pos:line="143" pos:column="45"/></name><operator pos:line="143" pos:column="45">.<pos:position pos:line="143" pos:column="46"/></operator><name pos:line="143" pos:column="46">out<pos:position pos:line="143" pos:column="49"/></name></name></expr>;<pos:position pos:line="143" pos:column="50"/></expr_stmt>
			}<pos:position pos:line="144" pos:column="26"/></block></then> <elseif pos:line="144" pos:column="27">else <if pos:line="144" pos:column="32">if <condition pos:line="144" pos:column="35">(<expr><name><name pos:line="144" pos:column="36">iobuf<pos:position pos:line="144" pos:column="41"/></name><operator pos:line="144" pos:column="41">.<pos:position pos:line="144" pos:column="42"/></operator><name pos:line="144" pos:column="42">msg<pos:position pos:line="144" pos:column="45"/></name><operator pos:line="144" pos:column="45">.<pos:position pos:line="144" pos:column="46"/></operator><name pos:line="144" pos:column="46">len<pos:position pos:line="144" pos:column="49"/></name></name></expr>)<pos:position pos:line="144" pos:column="50"/></condition><then pos:line="144" pos:column="50"> <block pos:line="144" pos:column="51">{
				<expr_stmt><expr><name pos:line="145" pos:column="33">empty_buf_len<pos:position pos:line="145" pos:column="46"/></name> <operator pos:line="145" pos:column="47">=<pos:position pos:line="145" pos:column="48"/></operator> <literal type="number" pos:line="145" pos:column="49">0<pos:position pos:line="145" pos:column="50"/></literal></expr>;<pos:position pos:line="145" pos:column="51"/></expr_stmt>
				<expr_stmt><expr><name pos:line="146" pos:column="33">out<pos:position pos:line="146" pos:column="36"/></name> <operator pos:line="146" pos:column="37">=<pos:position pos:line="146" pos:column="38"/></operator> <operator pos:line="146" pos:column="39">&amp;<pos:position pos:line="146" pos:column="44"/></operator><name><name pos:line="146" pos:column="40">iobuf<pos:position pos:line="146" pos:column="45"/></name><operator pos:line="146" pos:column="45">.<pos:position pos:line="146" pos:column="46"/></operator><name pos:line="146" pos:column="46">msg<pos:position pos:line="146" pos:column="49"/></name></name></expr>;<pos:position pos:line="146" pos:column="50"/></expr_stmt>
			}<pos:position pos:line="147" pos:column="26"/></block></then></if></elseif> <else pos:line="147" pos:column="27">else
				<block type="pseudo"><expr_stmt><expr><name pos:line="148" pos:column="33">out<pos:position pos:line="148" pos:column="36"/></name> <operator pos:line="148" pos:column="37">=<pos:position pos:line="148" pos:column="38"/></operator> <name pos:line="148" pos:column="39">NULL<pos:position pos:line="148" pos:column="43"/></name></expr>;<pos:position pos:line="148" pos:column="44"/></expr_stmt></block></else></if>
			<if pos:line="149" pos:column="25">if <condition pos:line="149" pos:column="28">(<expr><name pos:line="149" pos:column="29">out<pos:position pos:line="149" pos:column="32"/></name></expr>)<pos:position pos:line="149" pos:column="33"/></condition><then pos:line="149" pos:column="33"> <block pos:line="149" pos:column="34">{
				<expr_stmt><expr><call><name pos:line="150" pos:column="33">FD_SET<pos:position pos:line="150" pos:column="39"/></name><argument_list pos:line="150" pos:column="39">(<argument><expr><name><name pos:line="150" pos:column="40">iobuf<pos:position pos:line="150" pos:column="45"/></name><operator pos:line="150" pos:column="45">.<pos:position pos:line="150" pos:column="46"/></operator><name pos:line="150" pos:column="46">out_fd<pos:position pos:line="150" pos:column="52"/></name></name></expr></argument>, <argument><expr><operator pos:line="150" pos:column="54">&amp;<pos:position pos:line="150" pos:column="59"/></operator><name pos:line="150" pos:column="55">w_fds<pos:position pos:line="150" pos:column="60"/></name></expr></argument>)<pos:position pos:line="150" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="150" pos:column="62"/></expr_stmt>
				<if pos:line="151" pos:column="33">if <condition pos:line="151" pos:column="36">(<expr><name><name pos:line="151" pos:column="37">iobuf<pos:position pos:line="151" pos:column="42"/></name><operator pos:line="151" pos:column="42">.<pos:position pos:line="151" pos:column="43"/></operator><name pos:line="151" pos:column="43">out_fd<pos:position pos:line="151" pos:column="49"/></name></name> <operator pos:line="151" pos:column="50">&gt;<pos:position pos:line="151" pos:column="54"/></operator> <name pos:line="151" pos:column="52">max_fd<pos:position pos:line="151" pos:column="58"/></name></expr>)<pos:position pos:line="151" pos:column="59"/></condition><then pos:line="151" pos:column="59">
					<block type="pseudo"><expr_stmt><expr><name pos:line="152" pos:column="41">max_fd<pos:position pos:line="152" pos:column="47"/></name> <operator pos:line="152" pos:column="48">=<pos:position pos:line="152" pos:column="49"/></operator> <name><name pos:line="152" pos:column="50">iobuf<pos:position pos:line="152" pos:column="55"/></name><operator pos:line="152" pos:column="55">.<pos:position pos:line="152" pos:column="56"/></operator><name pos:line="152" pos:column="56">out_fd<pos:position pos:line="152" pos:column="62"/></name></name></expr>;<pos:position pos:line="152" pos:column="63"/></expr_stmt></block></then></if>
			}<pos:position pos:line="153" pos:column="26"/></block></then></if>
		}<pos:position pos:line="154" pos:column="18"/></block></then> <else pos:line="154" pos:column="19">else
			<block type="pseudo"><expr_stmt><expr><name pos:line="155" pos:column="25">out<pos:position pos:line="155" pos:column="28"/></name> <operator pos:line="155" pos:column="29">=<pos:position pos:line="155" pos:column="30"/></operator> <name pos:line="155" pos:column="31">NULL<pos:position pos:line="155" pos:column="35"/></name></expr>;<pos:position pos:line="155" pos:column="36"/></expr_stmt></block></else></if>

		<if pos:line="157" pos:column="17">if <condition pos:line="157" pos:column="20">(<expr><name pos:line="157" pos:column="21">max_fd<pos:position pos:line="157" pos:column="27"/></name> <operator pos:line="157" pos:column="28">&lt;<pos:position pos:line="157" pos:column="32"/></operator> <literal type="number" pos:line="157" pos:column="30">0<pos:position pos:line="157" pos:column="31"/></literal></expr>)<pos:position pos:line="157" pos:column="32"/></condition><then pos:line="157" pos:column="32"> <block pos:line="157" pos:column="33">{
			<switch pos:line="158" pos:column="25">switch <condition pos:line="158" pos:column="32">(<expr><name pos:line="158" pos:column="33">flags<pos:position pos:line="158" pos:column="38"/></name> <operator pos:line="158" pos:column="39">&amp;<pos:position pos:line="158" pos:column="44"/></operator> <name pos:line="158" pos:column="41">PIO_NEED_FLAGS<pos:position pos:line="158" pos:column="55"/></name></expr>)<pos:position pos:line="158" pos:column="56"/></condition> <block pos:line="158" pos:column="57">{
			<case pos:line="159" pos:column="25">case <expr><name pos:line="159" pos:column="30">PIO_NEED_INPUT<pos:position pos:line="159" pos:column="44"/></name></expr>:<pos:position pos:line="159" pos:column="45"/></case>
				<expr_stmt><expr><name><name pos:line="160" pos:column="33">iobuf<pos:position pos:line="160" pos:column="38"/></name><operator pos:line="160" pos:column="38">.<pos:position pos:line="160" pos:column="39"/></operator><name pos:line="160" pos:column="39">in<pos:position pos:line="160" pos:column="41"/></name><operator pos:line="160" pos:column="41">.<pos:position pos:line="160" pos:column="42"/></operator><name pos:line="160" pos:column="42">len<pos:position pos:line="160" pos:column="45"/></name></name> <operator pos:line="160" pos:column="46">=<pos:position pos:line="160" pos:column="47"/></operator> <literal type="number" pos:line="160" pos:column="48">0<pos:position pos:line="160" pos:column="49"/></literal></expr>;<pos:position pos:line="160" pos:column="50"/></expr_stmt>
				<if pos:line="161" pos:column="33">if <condition pos:line="161" pos:column="36">(<expr><name pos:line="161" pos:column="37">kluge_around_eof<pos:position pos:line="161" pos:column="53"/></name> <operator pos:line="161" pos:column="54">==<pos:position pos:line="161" pos:column="56"/></operator> <literal type="number" pos:line="161" pos:column="57">2<pos:position pos:line="161" pos:column="58"/></literal></expr>)<pos:position pos:line="161" pos:column="59"/></condition><then pos:line="161" pos:column="59">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="162" pos:column="41">exit_cleanup<pos:position pos:line="162" pos:column="53"/></name><argument_list pos:line="162" pos:column="53">(<argument><expr><literal type="number" pos:line="162" pos:column="54">0<pos:position pos:line="162" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="162" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="162" pos:column="57"/></expr_stmt></block></then></if>
				<if pos:line="163" pos:column="33">if <condition pos:line="163" pos:column="36">(<expr><name><name pos:line="163" pos:column="37">iobuf<pos:position pos:line="163" pos:column="42"/></name><operator pos:line="163" pos:column="42">.<pos:position pos:line="163" pos:column="43"/></operator><name pos:line="163" pos:column="43">in_fd<pos:position pos:line="163" pos:column="48"/></name></name> <operator pos:line="163" pos:column="49">==<pos:position pos:line="163" pos:column="51"/></operator> <operator pos:line="163" pos:column="52">-<pos:position pos:line="163" pos:column="53"/></operator><literal type="number" pos:line="163" pos:column="53">2<pos:position pos:line="163" pos:column="54"/></literal></expr>)<pos:position pos:line="163" pos:column="55"/></condition><then pos:line="163" pos:column="55">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="164" pos:column="41">whine_about_eof<pos:position pos:line="164" pos:column="56"/></name><argument_list pos:line="164" pos:column="56">(<argument><expr><name pos:line="164" pos:column="57">True<pos:position pos:line="164" pos:column="61"/></name></expr></argument>)<pos:position pos:line="164" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="164" pos:column="63"/></expr_stmt></block></then></if>
				<expr_stmt><expr><call><name pos:line="165" pos:column="33">rprintf<pos:position pos:line="165" pos:column="40"/></name><argument_list pos:line="165" pos:column="40">(<argument><expr><name pos:line="165" pos:column="41">FERROR<pos:position pos:line="165" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="165" pos:column="49">"error in perform_io: no fd for input.\n"<pos:position pos:line="165" pos:column="90"/></literal></expr></argument>)<pos:position pos:line="165" pos:column="91"/></argument_list></call></expr>;<pos:position pos:line="165" pos:column="92"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="166" pos:column="33">exit_cleanup<pos:position pos:line="166" pos:column="45"/></name><argument_list pos:line="166" pos:column="45">(<argument><expr><name pos:line="166" pos:column="46">RERR_PROTOCOL<pos:position pos:line="166" pos:column="59"/></name></expr></argument>)<pos:position pos:line="166" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="166" pos:column="61"/></expr_stmt>
			<case pos:line="167" pos:column="25">case <expr><name pos:line="167" pos:column="30">PIO_NEED_OUTROOM<pos:position pos:line="167" pos:column="46"/></name></expr>:<pos:position pos:line="167" pos:column="47"/></case>
			<case pos:line="168" pos:column="25">case <expr><name pos:line="168" pos:column="30">PIO_NEED_MSGROOM<pos:position pos:line="168" pos:column="46"/></name></expr>:<pos:position pos:line="168" pos:column="47"/></case>
				<expr_stmt><expr><name pos:line="169" pos:column="33">msgs2stderr<pos:position pos:line="169" pos:column="44"/></name> <operator pos:line="169" pos:column="45">=<pos:position pos:line="169" pos:column="46"/></operator> <literal type="number" pos:line="169" pos:column="47">1<pos:position pos:line="169" pos:column="48"/></literal></expr>;<pos:position pos:line="169" pos:column="49"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="170" pos:column="33">drain_multiplex_messages<pos:position pos:line="170" pos:column="57"/></name><argument_list pos:line="170" pos:column="57">()<pos:position pos:line="170" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="170" pos:column="60"/></expr_stmt>
				<if pos:line="171" pos:column="33">if <condition pos:line="171" pos:column="36">(<expr><name><name pos:line="171" pos:column="37">iobuf<pos:position pos:line="171" pos:column="42"/></name><operator pos:line="171" pos:column="42">.<pos:position pos:line="171" pos:column="43"/></operator><name pos:line="171" pos:column="43">out_fd<pos:position pos:line="171" pos:column="49"/></name></name> <operator pos:line="171" pos:column="50">==<pos:position pos:line="171" pos:column="52"/></operator> <operator pos:line="171" pos:column="53">-<pos:position pos:line="171" pos:column="54"/></operator><literal type="number" pos:line="171" pos:column="54">2<pos:position pos:line="171" pos:column="55"/></literal></expr>)<pos:position pos:line="171" pos:column="56"/></condition><then pos:line="171" pos:column="56">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="172" pos:column="41">whine_about_eof<pos:position pos:line="172" pos:column="56"/></name><argument_list pos:line="172" pos:column="56">(<argument><expr><name pos:line="172" pos:column="57">True<pos:position pos:line="172" pos:column="61"/></name></expr></argument>)<pos:position pos:line="172" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="172" pos:column="63"/></expr_stmt></block></then></if>
				<expr_stmt><expr><call><name pos:line="173" pos:column="33">rprintf<pos:position pos:line="173" pos:column="40"/></name><argument_list pos:line="173" pos:column="40">(<argument><expr><name pos:line="173" pos:column="41">FERROR<pos:position pos:line="173" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="173" pos:column="49">"error in perform_io: no fd for output.\n"<pos:position pos:line="173" pos:column="91"/></literal></expr></argument>)<pos:position pos:line="173" pos:column="92"/></argument_list></call></expr>;<pos:position pos:line="173" pos:column="93"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="174" pos:column="33">exit_cleanup<pos:position pos:line="174" pos:column="45"/></name><argument_list pos:line="174" pos:column="45">(<argument><expr><name pos:line="174" pos:column="46">RERR_PROTOCOL<pos:position pos:line="174" pos:column="59"/></name></expr></argument>)<pos:position pos:line="174" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="174" pos:column="61"/></expr_stmt>
			<default pos:line="175" pos:column="25">default:<pos:position pos:line="175" pos:column="33"/></default>
				<comment type="block" pos:line="176" pos:column="33">/* No stated needs, so I guess this is OK. */</comment>
				<break pos:line="177" pos:column="33">break;<pos:position pos:line="177" pos:column="39"/></break>
			}<pos:position pos:line="178" pos:column="26"/></block></switch>
			<break pos:line="179" pos:column="25">break;<pos:position pos:line="179" pos:column="31"/></break>
		}<pos:position pos:line="180" pos:column="18"/></block></then></if>

		<if pos:line="182" pos:column="17">if <condition pos:line="182" pos:column="20">(<expr><name pos:line="182" pos:column="21">got_kill_signal<pos:position pos:line="182" pos:column="36"/></name> <operator pos:line="182" pos:column="37">&gt;<pos:position pos:line="182" pos:column="41"/></operator> <literal type="number" pos:line="182" pos:column="39">0<pos:position pos:line="182" pos:column="40"/></literal></expr>)<pos:position pos:line="182" pos:column="41"/></condition><then pos:line="182" pos:column="41">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="183" pos:column="25">handle_kill_signal<pos:position pos:line="183" pos:column="43"/></name><argument_list pos:line="183" pos:column="43">(<argument><expr><name pos:line="183" pos:column="44">True<pos:position pos:line="183" pos:column="48"/></name></expr></argument>)<pos:position pos:line="183" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="183" pos:column="50"/></expr_stmt></block></then></if>

		<if pos:line="185" pos:column="17">if <condition pos:line="185" pos:column="20">(<expr><name pos:line="185" pos:column="21">extra_flist_sending_enabled<pos:position pos:line="185" pos:column="48"/></name></expr>)<pos:position pos:line="185" pos:column="49"/></condition><then pos:line="185" pos:column="49"> <block pos:line="185" pos:column="50">{
			<if pos:line="186" pos:column="25">if <condition pos:line="186" pos:column="28">(<expr><name pos:line="186" pos:column="29">file_total<pos:position pos:line="186" pos:column="39"/></name> <operator pos:line="186" pos:column="40">-<pos:position pos:line="186" pos:column="41"/></operator> <name pos:line="186" pos:column="42">file_old_total<pos:position pos:line="186" pos:column="56"/></name> <operator pos:line="186" pos:column="57">&lt;<pos:position pos:line="186" pos:column="61"/></operator> <name pos:line="186" pos:column="59">MAX_FILECNT_LOOKAHEAD<pos:position pos:line="186" pos:column="80"/></name> <operator pos:line="186" pos:column="81">&amp;&amp;<pos:position pos:line="186" pos:column="91"/></operator> <name pos:line="186" pos:column="84">IN_MULTIPLEXED_AND_READY<pos:position pos:line="186" pos:column="108"/></name></expr>)<pos:position pos:line="186" pos:column="109"/></condition><then pos:line="186" pos:column="109">
				<block type="pseudo"><expr_stmt><expr><name><name pos:line="187" pos:column="33">tv<pos:position pos:line="187" pos:column="35"/></name><operator pos:line="187" pos:column="35">.<pos:position pos:line="187" pos:column="36"/></operator><name pos:line="187" pos:column="36">tv_sec<pos:position pos:line="187" pos:column="42"/></name></name> <operator pos:line="187" pos:column="43">=<pos:position pos:line="187" pos:column="44"/></operator> <literal type="number" pos:line="187" pos:column="45">0<pos:position pos:line="187" pos:column="46"/></literal></expr>;<pos:position pos:line="187" pos:column="47"/></expr_stmt></block></then>
			<else pos:line="188" pos:column="25">else <block pos:line="188" pos:column="30">{
				<expr_stmt><expr><name pos:line="189" pos:column="33">extra_flist_sending_enabled<pos:position pos:line="189" pos:column="60"/></name> <operator pos:line="189" pos:column="61">=<pos:position pos:line="189" pos:column="62"/></operator> <name pos:line="189" pos:column="63">False<pos:position pos:line="189" pos:column="68"/></name></expr>;<pos:position pos:line="189" pos:column="69"/></expr_stmt>
				<expr_stmt><expr><name><name pos:line="190" pos:column="33">tv<pos:position pos:line="190" pos:column="35"/></name><operator pos:line="190" pos:column="35">.<pos:position pos:line="190" pos:column="36"/></operator><name pos:line="190" pos:column="36">tv_sec<pos:position pos:line="190" pos:column="42"/></name></name> <operator pos:line="190" pos:column="43">=<pos:position pos:line="190" pos:column="44"/></operator> <name pos:line="190" pos:column="45">select_timeout<pos:position pos:line="190" pos:column="59"/></name></expr>;<pos:position pos:line="190" pos:column="60"/></expr_stmt>
			}<pos:position pos:line="191" pos:column="26"/></block></else></if>
		}<pos:position pos:line="192" pos:column="18"/></block></then> <else pos:line="192" pos:column="19">else
			<block type="pseudo"><expr_stmt><expr><name><name pos:line="193" pos:column="25">tv<pos:position pos:line="193" pos:column="27"/></name><operator pos:line="193" pos:column="27">.<pos:position pos:line="193" pos:column="28"/></operator><name pos:line="193" pos:column="28">tv_sec<pos:position pos:line="193" pos:column="34"/></name></name> <operator pos:line="193" pos:column="35">=<pos:position pos:line="193" pos:column="36"/></operator> <name pos:line="193" pos:column="37">select_timeout<pos:position pos:line="193" pos:column="51"/></name></expr>;<pos:position pos:line="193" pos:column="52"/></expr_stmt></block></else></if>
		<expr_stmt><expr><name><name pos:line="194" pos:column="17">tv<pos:position pos:line="194" pos:column="19"/></name><operator pos:line="194" pos:column="19">.<pos:position pos:line="194" pos:column="20"/></operator><name pos:line="194" pos:column="20">tv_usec<pos:position pos:line="194" pos:column="27"/></name></name> <operator pos:line="194" pos:column="28">=<pos:position pos:line="194" pos:column="29"/></operator> <literal type="number" pos:line="194" pos:column="30">0<pos:position pos:line="194" pos:column="31"/></literal></expr>;<pos:position pos:line="194" pos:column="32"/></expr_stmt>

		<expr_stmt><expr><name pos:line="196" pos:column="17">cnt<pos:position pos:line="196" pos:column="20"/></name> <operator pos:line="196" pos:column="21">=<pos:position pos:line="196" pos:column="22"/></operator> <call><name pos:line="196" pos:column="23">select<pos:position pos:line="196" pos:column="29"/></name><argument_list pos:line="196" pos:column="29">(<argument><expr><name pos:line="196" pos:column="30">max_fd<pos:position pos:line="196" pos:column="36"/></name> <operator pos:line="196" pos:column="37">+<pos:position pos:line="196" pos:column="38"/></operator> <literal type="number" pos:line="196" pos:column="39">1<pos:position pos:line="196" pos:column="40"/></literal></expr></argument>, <argument><expr><operator pos:line="196" pos:column="42">&amp;<pos:position pos:line="196" pos:column="47"/></operator><name pos:line="196" pos:column="43">r_fds<pos:position pos:line="196" pos:column="48"/></name></expr></argument>, <argument><expr><operator pos:line="196" pos:column="50">&amp;<pos:position pos:line="196" pos:column="55"/></operator><name pos:line="196" pos:column="51">w_fds<pos:position pos:line="196" pos:column="56"/></name></expr></argument>, <argument><expr><operator pos:line="196" pos:column="58">&amp;<pos:position pos:line="196" pos:column="63"/></operator><name pos:line="196" pos:column="59">e_fds<pos:position pos:line="196" pos:column="64"/></name></expr></argument>, <argument><expr><operator pos:line="196" pos:column="66">&amp;<pos:position pos:line="196" pos:column="71"/></operator><name pos:line="196" pos:column="67">tv<pos:position pos:line="196" pos:column="69"/></name></expr></argument>)<pos:position pos:line="196" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="196" pos:column="71"/></expr_stmt>

		<if pos:line="198" pos:column="17">if <condition pos:line="198" pos:column="20">(<expr><name pos:line="198" pos:column="21">cnt<pos:position pos:line="198" pos:column="24"/></name> <operator pos:line="198" pos:column="25">&lt;=<pos:position pos:line="198" pos:column="30"/></operator> <literal type="number" pos:line="198" pos:column="28">0<pos:position pos:line="198" pos:column="29"/></literal></expr>)<pos:position pos:line="198" pos:column="30"/></condition><then pos:line="198" pos:column="30"> <block pos:line="198" pos:column="31">{
			<if pos:line="199" pos:column="25">if <condition pos:line="199" pos:column="28">(<expr><name pos:line="199" pos:column="29">cnt<pos:position pos:line="199" pos:column="32"/></name> <operator pos:line="199" pos:column="33">&lt;<pos:position pos:line="199" pos:column="37"/></operator> <literal type="number" pos:line="199" pos:column="35">0<pos:position pos:line="199" pos:column="36"/></literal> <operator pos:line="199" pos:column="37">&amp;&amp;<pos:position pos:line="199" pos:column="47"/></operator> <name pos:line="199" pos:column="40">errno<pos:position pos:line="199" pos:column="45"/></name> <operator pos:line="199" pos:column="46">==<pos:position pos:line="199" pos:column="48"/></operator> <name pos:line="199" pos:column="49">EBADF<pos:position pos:line="199" pos:column="54"/></name></expr>)<pos:position pos:line="199" pos:column="55"/></condition><then pos:line="199" pos:column="55"> <block pos:line="199" pos:column="56">{
				<expr_stmt><expr><name pos:line="200" pos:column="33">msgs2stderr<pos:position pos:line="200" pos:column="44"/></name> <operator pos:line="200" pos:column="45">=<pos:position pos:line="200" pos:column="46"/></operator> <literal type="number" pos:line="200" pos:column="47">1<pos:position pos:line="200" pos:column="48"/></literal></expr>;<pos:position pos:line="200" pos:column="49"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="201" pos:column="33">exit_cleanup<pos:position pos:line="201" pos:column="45"/></name><argument_list pos:line="201" pos:column="45">(<argument><expr><name pos:line="201" pos:column="46">RERR_SOCKETIO<pos:position pos:line="201" pos:column="59"/></name></expr></argument>)<pos:position pos:line="201" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="201" pos:column="61"/></expr_stmt>
			}<pos:position pos:line="202" pos:column="26"/></block></then></if>
			<if pos:line="203" pos:column="25">if <condition pos:line="203" pos:column="28">(<expr><name pos:line="203" pos:column="29">extra_flist_sending_enabled<pos:position pos:line="203" pos:column="56"/></name></expr>)<pos:position pos:line="203" pos:column="57"/></condition><then pos:line="203" pos:column="57"> <block pos:line="203" pos:column="58">{
				<expr_stmt><expr><name pos:line="204" pos:column="33">extra_flist_sending_enabled<pos:position pos:line="204" pos:column="60"/></name> <operator pos:line="204" pos:column="61">=<pos:position pos:line="204" pos:column="62"/></operator> <name pos:line="204" pos:column="63">False<pos:position pos:line="204" pos:column="68"/></name></expr>;<pos:position pos:line="204" pos:column="69"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="205" pos:column="33">send_extra_file_list<pos:position pos:line="205" pos:column="53"/></name><argument_list pos:line="205" pos:column="53">(<argument><expr><name pos:line="205" pos:column="54">sock_f_out<pos:position pos:line="205" pos:column="64"/></name></expr></argument>, <argument><expr><operator pos:line="205" pos:column="66">-<pos:position pos:line="205" pos:column="67"/></operator><literal type="number" pos:line="205" pos:column="67">1<pos:position pos:line="205" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="205" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="205" pos:column="70"/></expr_stmt>
				<expr_stmt><expr><name pos:line="206" pos:column="33">extra_flist_sending_enabled<pos:position pos:line="206" pos:column="60"/></name> <operator pos:line="206" pos:column="61">=<pos:position pos:line="206" pos:column="62"/></operator> <operator pos:line="206" pos:column="63">!<pos:position pos:line="206" pos:column="64"/></operator><name pos:line="206" pos:column="64">flist_eof<pos:position pos:line="206" pos:column="73"/></name></expr>;<pos:position pos:line="206" pos:column="74"/></expr_stmt>
			}<pos:position pos:line="207" pos:column="26"/></block></then> <else pos:line="207" pos:column="27">else
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="208" pos:column="33">check_timeout<pos:position pos:line="208" pos:column="46"/></name><argument_list pos:line="208" pos:column="46">(<argument><expr><operator pos:line="208" pos:column="47">(<pos:position pos:line="208" pos:column="48"/></operator><name pos:line="208" pos:column="48">flags<pos:position pos:line="208" pos:column="53"/></name> <operator pos:line="208" pos:column="54">&amp;<pos:position pos:line="208" pos:column="59"/></operator> <name pos:line="208" pos:column="56">PIO_NEED_INPUT<pos:position pos:line="208" pos:column="70"/></name><operator pos:line="208" pos:column="70">)<pos:position pos:line="208" pos:column="71"/></operator> <operator pos:line="208" pos:column="72">!=<pos:position pos:line="208" pos:column="74"/></operator> <literal type="number" pos:line="208" pos:column="75">0<pos:position pos:line="208" pos:column="76"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="208" pos:column="78">0<pos:position pos:line="208" pos:column="79"/></literal></expr></argument>)<pos:position pos:line="208" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="208" pos:column="81"/></expr_stmt></block></else></if>
			<expr_stmt><expr><call><name pos:line="209" pos:column="25">FD_ZERO<pos:position pos:line="209" pos:column="32"/></name><argument_list pos:line="209" pos:column="32">(<argument><expr><operator pos:line="209" pos:column="33">&amp;<pos:position pos:line="209" pos:column="38"/></operator><name pos:line="209" pos:column="34">r_fds<pos:position pos:line="209" pos:column="39"/></name></expr></argument>)<pos:position pos:line="209" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="209" pos:column="41"/></expr_stmt> <comment type="block" pos:line="209" pos:column="42">/* Just in case... */</comment>
			<expr_stmt><expr><call><name pos:line="210" pos:column="25">FD_ZERO<pos:position pos:line="210" pos:column="32"/></name><argument_list pos:line="210" pos:column="32">(<argument><expr><operator pos:line="210" pos:column="33">&amp;<pos:position pos:line="210" pos:column="38"/></operator><name pos:line="210" pos:column="34">w_fds<pos:position pos:line="210" pos:column="39"/></name></expr></argument>)<pos:position pos:line="210" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="210" pos:column="41"/></expr_stmt>
		}<pos:position pos:line="211" pos:column="18"/></block></then></if>

		<if pos:line="213" pos:column="17">if <condition pos:line="213" pos:column="20">(<expr><name><name pos:line="213" pos:column="21">iobuf<pos:position pos:line="213" pos:column="26"/></name><operator pos:line="213" pos:column="26">.<pos:position pos:line="213" pos:column="27"/></operator><name pos:line="213" pos:column="27">in_fd<pos:position pos:line="213" pos:column="32"/></name></name> <operator pos:line="213" pos:column="33">&gt;=<pos:position pos:line="213" pos:column="38"/></operator> <literal type="number" pos:line="213" pos:column="36">0<pos:position pos:line="213" pos:column="37"/></literal> <operator pos:line="213" pos:column="38">&amp;&amp;<pos:position pos:line="213" pos:column="48"/></operator> <call><name pos:line="213" pos:column="41">FD_ISSET<pos:position pos:line="213" pos:column="49"/></name><argument_list pos:line="213" pos:column="49">(<argument><expr><name><name pos:line="213" pos:column="50">iobuf<pos:position pos:line="213" pos:column="55"/></name><operator pos:line="213" pos:column="55">.<pos:position pos:line="213" pos:column="56"/></operator><name pos:line="213" pos:column="56">in_fd<pos:position pos:line="213" pos:column="61"/></name></name></expr></argument>, <argument><expr><operator pos:line="213" pos:column="63">&amp;<pos:position pos:line="213" pos:column="68"/></operator><name pos:line="213" pos:column="64">r_fds<pos:position pos:line="213" pos:column="69"/></name></expr></argument>)<pos:position pos:line="213" pos:column="70"/></argument_list></call></expr>)<pos:position pos:line="213" pos:column="71"/></condition><then pos:line="213" pos:column="71"> <block pos:line="213" pos:column="72">{
			<decl_stmt><decl><type><name pos:line="214" pos:column="25">size_t<pos:position pos:line="214" pos:column="31"/></name></type> <name pos:line="214" pos:column="32">len<pos:position pos:line="214" pos:column="35"/></name></decl>, <decl><type ref="prev"/><name pos:line="214" pos:column="37">pos<pos:position pos:line="214" pos:column="40"/></name> <init pos:line="214" pos:column="41">= <expr><name><name pos:line="214" pos:column="43">iobuf<pos:position pos:line="214" pos:column="48"/></name><operator pos:line="214" pos:column="48">.<pos:position pos:line="214" pos:column="49"/></operator><name pos:line="214" pos:column="49">in<pos:position pos:line="214" pos:column="51"/></name><operator pos:line="214" pos:column="51">.<pos:position pos:line="214" pos:column="52"/></operator><name pos:line="214" pos:column="52">pos<pos:position pos:line="214" pos:column="55"/></name></name> <operator pos:line="214" pos:column="56">+<pos:position pos:line="214" pos:column="57"/></operator> <name><name pos:line="214" pos:column="58">iobuf<pos:position pos:line="214" pos:column="63"/></name><operator pos:line="214" pos:column="63">.<pos:position pos:line="214" pos:column="64"/></operator><name pos:line="214" pos:column="64">in<pos:position pos:line="214" pos:column="66"/></name><operator pos:line="214" pos:column="66">.<pos:position pos:line="214" pos:column="67"/></operator><name pos:line="214" pos:column="67">len<pos:position pos:line="214" pos:column="70"/></name></name></expr></init></decl>;<pos:position pos:line="214" pos:column="71"/></decl_stmt>
			<decl_stmt><decl><type><name pos:line="215" pos:column="25">int<pos:position pos:line="215" pos:column="28"/></name></type> <name pos:line="215" pos:column="29">n<pos:position pos:line="215" pos:column="30"/></name></decl>;<pos:position pos:line="215" pos:column="31"/></decl_stmt>
			<if pos:line="216" pos:column="25">if <condition pos:line="216" pos:column="28">(<expr><name pos:line="216" pos:column="29">pos<pos:position pos:line="216" pos:column="32"/></name> <operator pos:line="216" pos:column="33">&gt;=<pos:position pos:line="216" pos:column="38"/></operator> <name><name pos:line="216" pos:column="36">iobuf<pos:position pos:line="216" pos:column="41"/></name><operator pos:line="216" pos:column="41">.<pos:position pos:line="216" pos:column="42"/></operator><name pos:line="216" pos:column="42">in<pos:position pos:line="216" pos:column="44"/></name><operator pos:line="216" pos:column="44">.<pos:position pos:line="216" pos:column="45"/></operator><name pos:line="216" pos:column="45">size<pos:position pos:line="216" pos:column="49"/></name></name></expr>)<pos:position pos:line="216" pos:column="50"/></condition><then pos:line="216" pos:column="50"> <block pos:line="216" pos:column="51">{
				<expr_stmt><expr><name pos:line="217" pos:column="33">pos<pos:position pos:line="217" pos:column="36"/></name> <operator pos:line="217" pos:column="37">-=<pos:position pos:line="217" pos:column="39"/></operator> <name><name pos:line="217" pos:column="40">iobuf<pos:position pos:line="217" pos:column="45"/></name><operator pos:line="217" pos:column="45">.<pos:position pos:line="217" pos:column="46"/></operator><name pos:line="217" pos:column="46">in<pos:position pos:line="217" pos:column="48"/></name><operator pos:line="217" pos:column="48">.<pos:position pos:line="217" pos:column="49"/></operator><name pos:line="217" pos:column="49">size<pos:position pos:line="217" pos:column="53"/></name></name></expr>;<pos:position pos:line="217" pos:column="54"/></expr_stmt>
				<expr_stmt><expr><name pos:line="218" pos:column="33">len<pos:position pos:line="218" pos:column="36"/></name> <operator pos:line="218" pos:column="37">=<pos:position pos:line="218" pos:column="38"/></operator> <name><name pos:line="218" pos:column="39">iobuf<pos:position pos:line="218" pos:column="44"/></name><operator pos:line="218" pos:column="44">.<pos:position pos:line="218" pos:column="45"/></operator><name pos:line="218" pos:column="45">in<pos:position pos:line="218" pos:column="47"/></name><operator pos:line="218" pos:column="47">.<pos:position pos:line="218" pos:column="48"/></operator><name pos:line="218" pos:column="48">size<pos:position pos:line="218" pos:column="52"/></name></name> <operator pos:line="218" pos:column="53">-<pos:position pos:line="218" pos:column="54"/></operator> <name><name pos:line="218" pos:column="55">iobuf<pos:position pos:line="218" pos:column="60"/></name><operator pos:line="218" pos:column="60">.<pos:position pos:line="218" pos:column="61"/></operator><name pos:line="218" pos:column="61">in<pos:position pos:line="218" pos:column="63"/></name><operator pos:line="218" pos:column="63">.<pos:position pos:line="218" pos:column="64"/></operator><name pos:line="218" pos:column="64">len<pos:position pos:line="218" pos:column="67"/></name></name></expr>;<pos:position pos:line="218" pos:column="68"/></expr_stmt>
			}<pos:position pos:line="219" pos:column="26"/></block></then> <else pos:line="219" pos:column="27">else
				<block type="pseudo"><expr_stmt><expr><name pos:line="220" pos:column="33">len<pos:position pos:line="220" pos:column="36"/></name> <operator pos:line="220" pos:column="37">=<pos:position pos:line="220" pos:column="38"/></operator> <name><name pos:line="220" pos:column="39">iobuf<pos:position pos:line="220" pos:column="44"/></name><operator pos:line="220" pos:column="44">.<pos:position pos:line="220" pos:column="45"/></operator><name pos:line="220" pos:column="45">in<pos:position pos:line="220" pos:column="47"/></name><operator pos:line="220" pos:column="47">.<pos:position pos:line="220" pos:column="48"/></operator><name pos:line="220" pos:column="48">size<pos:position pos:line="220" pos:column="52"/></name></name> <operator pos:line="220" pos:column="53">-<pos:position pos:line="220" pos:column="54"/></operator> <name pos:line="220" pos:column="55">pos<pos:position pos:line="220" pos:column="58"/></name></expr>;<pos:position pos:line="220" pos:column="59"/></expr_stmt></block></else></if>
			<if pos:line="221" pos:column="25">if <condition pos:line="221" pos:column="28">(<expr><operator pos:line="221" pos:column="29">(<pos:position pos:line="221" pos:column="30"/></operator><name pos:line="221" pos:column="30">n<pos:position pos:line="221" pos:column="31"/></name> <operator pos:line="221" pos:column="32">=<pos:position pos:line="221" pos:column="33"/></operator> <call><name pos:line="221" pos:column="34">read<pos:position pos:line="221" pos:column="38"/></name><argument_list pos:line="221" pos:column="38">(<argument><expr><name><name pos:line="221" pos:column="39">iobuf<pos:position pos:line="221" pos:column="44"/></name><operator pos:line="221" pos:column="44">.<pos:position pos:line="221" pos:column="45"/></operator><name pos:line="221" pos:column="45">in_fd<pos:position pos:line="221" pos:column="50"/></name></name></expr></argument>, <argument><expr><name><name pos:line="221" pos:column="52">iobuf<pos:position pos:line="221" pos:column="57"/></name><operator pos:line="221" pos:column="57">.<pos:position pos:line="221" pos:column="58"/></operator><name pos:line="221" pos:column="58">in<pos:position pos:line="221" pos:column="60"/></name><operator pos:line="221" pos:column="60">.<pos:position pos:line="221" pos:column="61"/></operator><name pos:line="221" pos:column="61">buf<pos:position pos:line="221" pos:column="64"/></name></name> <operator pos:line="221" pos:column="65">+<pos:position pos:line="221" pos:column="66"/></operator> <name pos:line="221" pos:column="67">pos<pos:position pos:line="221" pos:column="70"/></name></expr></argument>, <argument><expr><name pos:line="221" pos:column="72">len<pos:position pos:line="221" pos:column="75"/></name></expr></argument>)<pos:position pos:line="221" pos:column="76"/></argument_list></call><operator pos:line="221" pos:column="76">)<pos:position pos:line="221" pos:column="77"/></operator> <operator pos:line="221" pos:column="78">&lt;=<pos:position pos:line="221" pos:column="83"/></operator> <literal type="number" pos:line="221" pos:column="81">0<pos:position pos:line="221" pos:column="82"/></literal></expr>)<pos:position pos:line="221" pos:column="83"/></condition><then pos:line="221" pos:column="83"> <block pos:line="221" pos:column="84">{
				<if pos:line="222" pos:column="33">if <condition pos:line="222" pos:column="36">(<expr><name pos:line="222" pos:column="37">n<pos:position pos:line="222" pos:column="38"/></name> <operator pos:line="222" pos:column="39">==<pos:position pos:line="222" pos:column="41"/></operator> <literal type="number" pos:line="222" pos:column="42">0<pos:position pos:line="222" pos:column="43"/></literal></expr>)<pos:position pos:line="222" pos:column="44"/></condition><then pos:line="222" pos:column="44"> <block pos:line="222" pos:column="45">{
					<comment type="block" pos:line="223" pos:column="41">/* Signal that input has become invalid. */</comment>
					<if pos:line="224" pos:column="41">if <condition pos:line="224" pos:column="44">(<expr><operator pos:line="224" pos:column="45">!<pos:position pos:line="224" pos:column="46"/></operator><name pos:line="224" pos:column="46">read_batch<pos:position pos:line="224" pos:column="56"/></name> <operator pos:line="224" pos:column="57">||<pos:position pos:line="224" pos:column="59"/></operator> <name pos:line="224" pos:column="60">batch_fd<pos:position pos:line="224" pos:column="68"/></name> <operator pos:line="224" pos:column="69">&lt;<pos:position pos:line="224" pos:column="73"/></operator> <literal type="number" pos:line="224" pos:column="71">0<pos:position pos:line="224" pos:column="72"/></literal> <operator pos:line="224" pos:column="73">||<pos:position pos:line="224" pos:column="75"/></operator> <name pos:line="224" pos:column="76">am_generator<pos:position pos:line="224" pos:column="88"/></name></expr>)<pos:position pos:line="224" pos:column="89"/></condition><then pos:line="224" pos:column="89">
						<block type="pseudo"><expr_stmt><expr><name><name pos:line="225" pos:column="49">iobuf<pos:position pos:line="225" pos:column="54"/></name><operator pos:line="225" pos:column="54">.<pos:position pos:line="225" pos:column="55"/></operator><name pos:line="225" pos:column="55">in_fd<pos:position pos:line="225" pos:column="60"/></name></name> <operator pos:line="225" pos:column="61">=<pos:position pos:line="225" pos:column="62"/></operator> <operator pos:line="225" pos:column="63">-<pos:position pos:line="225" pos:column="64"/></operator><literal type="number" pos:line="225" pos:column="64">2<pos:position pos:line="225" pos:column="65"/></literal></expr>;<pos:position pos:line="225" pos:column="66"/></expr_stmt></block></then></if>
					<expr_stmt><expr><name pos:line="226" pos:column="41">batch_fd<pos:position pos:line="226" pos:column="49"/></name> <operator pos:line="226" pos:column="50">=<pos:position pos:line="226" pos:column="51"/></operator> <operator pos:line="226" pos:column="52">-<pos:position pos:line="226" pos:column="53"/></operator><literal type="number" pos:line="226" pos:column="53">1<pos:position pos:line="226" pos:column="54"/></literal></expr>;<pos:position pos:line="226" pos:column="55"/></expr_stmt>
					<continue pos:line="227" pos:column="41">continue;<pos:position pos:line="227" pos:column="50"/></continue>
				}<pos:position pos:line="228" pos:column="34"/></block></then></if>
				<if pos:line="229" pos:column="33">if <condition pos:line="229" pos:column="36">(<expr><name pos:line="229" pos:column="37">errno<pos:position pos:line="229" pos:column="42"/></name> <operator pos:line="229" pos:column="43">==<pos:position pos:line="229" pos:column="45"/></operator> <name pos:line="229" pos:column="46">EINTR<pos:position pos:line="229" pos:column="51"/></name> <operator pos:line="229" pos:column="52">||<pos:position pos:line="229" pos:column="54"/></operator> <name pos:line="229" pos:column="55">errno<pos:position pos:line="229" pos:column="60"/></name> <operator pos:line="229" pos:column="61">==<pos:position pos:line="229" pos:column="63"/></operator> <name pos:line="229" pos:column="64">EWOULDBLOCK<pos:position pos:line="229" pos:column="75"/></name> <operator pos:line="229" pos:column="76">||<pos:position pos:line="229" pos:column="78"/></operator> <name pos:line="229" pos:column="79">errno<pos:position pos:line="229" pos:column="84"/></name> <operator pos:line="229" pos:column="85">==<pos:position pos:line="229" pos:column="87"/></operator> <name pos:line="229" pos:column="88">EAGAIN<pos:position pos:line="229" pos:column="94"/></name></expr>)<pos:position pos:line="229" pos:column="95"/></condition><then pos:line="229" pos:column="95">
					<block type="pseudo"><expr_stmt><expr><name pos:line="230" pos:column="41">n<pos:position pos:line="230" pos:column="42"/></name> <operator pos:line="230" pos:column="43">=<pos:position pos:line="230" pos:column="44"/></operator> <literal type="number" pos:line="230" pos:column="45">0<pos:position pos:line="230" pos:column="46"/></literal></expr>;<pos:position pos:line="230" pos:column="47"/></expr_stmt></block></then>
				<else pos:line="231" pos:column="33">else <block pos:line="231" pos:column="38">{
					<comment type="block" pos:line="232" pos:column="41">/* Don't write errors on a dead socket. */</comment>
					<if pos:line="233" pos:column="41">if <condition pos:line="233" pos:column="44">(<expr><name><name pos:line="233" pos:column="45">iobuf<pos:position pos:line="233" pos:column="50"/></name><operator pos:line="233" pos:column="50">.<pos:position pos:line="233" pos:column="51"/></operator><name pos:line="233" pos:column="51">in_fd<pos:position pos:line="233" pos:column="56"/></name></name> <operator pos:line="233" pos:column="57">==<pos:position pos:line="233" pos:column="59"/></operator> <name pos:line="233" pos:column="60">sock_f_in<pos:position pos:line="233" pos:column="69"/></name></expr>)<pos:position pos:line="233" pos:column="70"/></condition><then pos:line="233" pos:column="70"> <block pos:line="233" pos:column="71">{
						<if pos:line="234" pos:column="49">if <condition pos:line="234" pos:column="52">(<expr><name pos:line="234" pos:column="53">am_sender<pos:position pos:line="234" pos:column="62"/></name></expr>)<pos:position pos:line="234" pos:column="63"/></condition><then pos:line="234" pos:column="63">
							<block type="pseudo"><expr_stmt><expr><name pos:line="235" pos:column="57">msgs2stderr<pos:position pos:line="235" pos:column="68"/></name> <operator pos:line="235" pos:column="69">=<pos:position pos:line="235" pos:column="70"/></operator> <literal type="number" pos:line="235" pos:column="71">1<pos:position pos:line="235" pos:column="72"/></literal></expr>;<pos:position pos:line="235" pos:column="73"/></expr_stmt></block></then></if>
						<expr_stmt><expr><call><name pos:line="236" pos:column="49">rsyserr<pos:position pos:line="236" pos:column="56"/></name><argument_list pos:line="236" pos:column="56">(<argument><expr><name pos:line="236" pos:column="57">FERROR_SOCKET<pos:position pos:line="236" pos:column="70"/></name></expr></argument>, <argument><expr><name pos:line="236" pos:column="72">errno<pos:position pos:line="236" pos:column="77"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="236" pos:column="79">"read error"<pos:position pos:line="236" pos:column="91"/></literal></expr></argument>)<pos:position pos:line="236" pos:column="92"/></argument_list></call></expr>;<pos:position pos:line="236" pos:column="93"/></expr_stmt>
					}<pos:position pos:line="237" pos:column="42"/></block></then> <else pos:line="237" pos:column="43">else
						<block type="pseudo"><expr_stmt><expr><call><name pos:line="238" pos:column="49">rsyserr<pos:position pos:line="238" pos:column="56"/></name><argument_list pos:line="238" pos:column="56">(<argument><expr><name pos:line="238" pos:column="57">FERROR<pos:position pos:line="238" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="238" pos:column="65">errno<pos:position pos:line="238" pos:column="70"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="238" pos:column="72">"read error"<pos:position pos:line="238" pos:column="84"/></literal></expr></argument>)<pos:position pos:line="238" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="238" pos:column="86"/></expr_stmt></block></else></if>
					<expr_stmt><expr><call><name pos:line="239" pos:column="41">exit_cleanup<pos:position pos:line="239" pos:column="53"/></name><argument_list pos:line="239" pos:column="53">(<argument><expr><name pos:line="239" pos:column="54">RERR_SOCKETIO<pos:position pos:line="239" pos:column="67"/></name></expr></argument>)<pos:position pos:line="239" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="239" pos:column="69"/></expr_stmt>
				}<pos:position pos:line="240" pos:column="34"/></block></else></if>
			}<pos:position pos:line="241" pos:column="26"/></block></then></if>
			<if pos:line="242" pos:column="25">if <condition pos:line="242" pos:column="28">(<expr><name pos:line="242" pos:column="29">msgs2stderr<pos:position pos:line="242" pos:column="40"/></name> <operator pos:line="242" pos:column="41">&amp;&amp;<pos:position pos:line="242" pos:column="51"/></operator> <call><name pos:line="242" pos:column="44">DEBUG_GTE<pos:position pos:line="242" pos:column="53"/></name><argument_list pos:line="242" pos:column="53">(<argument><expr><name pos:line="242" pos:column="54">IO<pos:position pos:line="242" pos:column="56"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="242" pos:column="58">2<pos:position pos:line="242" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="242" pos:column="60"/></argument_list></call></expr>)<pos:position pos:line="242" pos:column="61"/></condition><then pos:line="242" pos:column="61">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="243" pos:column="33">rprintf<pos:position pos:line="243" pos:column="40"/></name><argument_list pos:line="243" pos:column="40">(<argument><expr><name pos:line="243" pos:column="41">FINFO<pos:position pos:line="243" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="243" pos:column="48">"[%s] recv=%ld\n"<pos:position pos:line="243" pos:column="65"/></literal></expr></argument>, <argument><expr><call><name pos:line="243" pos:column="67">who_am_i<pos:position pos:line="243" pos:column="75"/></name><argument_list pos:line="243" pos:column="75">()<pos:position pos:line="243" pos:column="77"/></argument_list></call></expr></argument>, <argument><expr><operator pos:line="243" pos:column="79">(<pos:position pos:line="243" pos:column="80"/></operator><name pos:line="243" pos:column="80">long<pos:position pos:line="243" pos:column="84"/></name><operator pos:line="243" pos:column="84">)<pos:position pos:line="243" pos:column="85"/></operator><name pos:line="243" pos:column="85">n<pos:position pos:line="243" pos:column="86"/></name></expr></argument>)<pos:position pos:line="243" pos:column="87"/></argument_list></call></expr>;<pos:position pos:line="243" pos:column="88"/></expr_stmt></block></then></if>

			<if pos:line="245" pos:column="25">if <condition pos:line="245" pos:column="28">(<expr><name pos:line="245" pos:column="29">io_timeout<pos:position pos:line="245" pos:column="39"/></name></expr>)<pos:position pos:line="245" pos:column="40"/></condition><then pos:line="245" pos:column="40"> <block pos:line="245" pos:column="41">{
				<expr_stmt><expr><name pos:line="246" pos:column="33">last_io_in<pos:position pos:line="246" pos:column="43"/></name> <operator pos:line="246" pos:column="44">=<pos:position pos:line="246" pos:column="45"/></operator> <call><name pos:line="246" pos:column="46">time<pos:position pos:line="246" pos:column="50"/></name><argument_list pos:line="246" pos:column="50">(<argument><expr><name pos:line="246" pos:column="51">NULL<pos:position pos:line="246" pos:column="55"/></name></expr></argument>)<pos:position pos:line="246" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="246" pos:column="57"/></expr_stmt>
				<if pos:line="247" pos:column="33">if <condition pos:line="247" pos:column="36">(<expr><name pos:line="247" pos:column="37">flags<pos:position pos:line="247" pos:column="42"/></name> <operator pos:line="247" pos:column="43">&amp;<pos:position pos:line="247" pos:column="48"/></operator> <name pos:line="247" pos:column="45">PIO_NEED_INPUT<pos:position pos:line="247" pos:column="59"/></name></expr>)<pos:position pos:line="247" pos:column="60"/></condition><then pos:line="247" pos:column="60">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="248" pos:column="41">maybe_send_keepalive<pos:position pos:line="248" pos:column="61"/></name><argument_list pos:line="248" pos:column="61">(<argument><expr><name pos:line="248" pos:column="62">last_io_in<pos:position pos:line="248" pos:column="72"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="248" pos:column="74">0<pos:position pos:line="248" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="248" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="248" pos:column="77"/></expr_stmt></block></then></if>
			}<pos:position pos:line="249" pos:column="26"/></block></then></if>
			<expr_stmt><expr><name><name pos:line="250" pos:column="25">stats<pos:position pos:line="250" pos:column="30"/></name><operator pos:line="250" pos:column="30">.<pos:position pos:line="250" pos:column="31"/></operator><name pos:line="250" pos:column="31">total_read<pos:position pos:line="250" pos:column="41"/></name></name> <operator pos:line="250" pos:column="42">+=<pos:position pos:line="250" pos:column="44"/></operator> <name pos:line="250" pos:column="45">n<pos:position pos:line="250" pos:column="46"/></name></expr>;<pos:position pos:line="250" pos:column="47"/></expr_stmt>

			<expr_stmt><expr><name><name pos:line="252" pos:column="25">iobuf<pos:position pos:line="252" pos:column="30"/></name><operator pos:line="252" pos:column="30">.<pos:position pos:line="252" pos:column="31"/></operator><name pos:line="252" pos:column="31">in<pos:position pos:line="252" pos:column="33"/></name><operator pos:line="252" pos:column="33">.<pos:position pos:line="252" pos:column="34"/></operator><name pos:line="252" pos:column="34">len<pos:position pos:line="252" pos:column="37"/></name></name> <operator pos:line="252" pos:column="38">+=<pos:position pos:line="252" pos:column="40"/></operator> <name pos:line="252" pos:column="41">n<pos:position pos:line="252" pos:column="42"/></name></expr>;<pos:position pos:line="252" pos:column="43"/></expr_stmt>
		}<pos:position pos:line="253" pos:column="18"/></block></then></if>

		<if pos:line="255" pos:column="17">if <condition pos:line="255" pos:column="20">(<expr><name pos:line="255" pos:column="21">out<pos:position pos:line="255" pos:column="24"/></name> <operator pos:line="255" pos:column="25">&amp;&amp;<pos:position pos:line="255" pos:column="35"/></operator> <call><name pos:line="255" pos:column="28">FD_ISSET<pos:position pos:line="255" pos:column="36"/></name><argument_list pos:line="255" pos:column="36">(<argument><expr><name><name pos:line="255" pos:column="37">iobuf<pos:position pos:line="255" pos:column="42"/></name><operator pos:line="255" pos:column="42">.<pos:position pos:line="255" pos:column="43"/></operator><name pos:line="255" pos:column="43">out_fd<pos:position pos:line="255" pos:column="49"/></name></name></expr></argument>, <argument><expr><operator pos:line="255" pos:column="51">&amp;<pos:position pos:line="255" pos:column="56"/></operator><name pos:line="255" pos:column="52">w_fds<pos:position pos:line="255" pos:column="57"/></name></expr></argument>)<pos:position pos:line="255" pos:column="58"/></argument_list></call></expr>)<pos:position pos:line="255" pos:column="59"/></condition><then pos:line="255" pos:column="59"> <block pos:line="255" pos:column="60">{
			<decl_stmt><decl><type><name pos:line="256" pos:column="25">size_t<pos:position pos:line="256" pos:column="31"/></name></type> <name pos:line="256" pos:column="32">len<pos:position pos:line="256" pos:column="35"/></name> <init pos:line="256" pos:column="36">= <expr><ternary><condition><expr><name><name pos:line="256" pos:column="38">iobuf<pos:position pos:line="256" pos:column="43"/></name><operator pos:line="256" pos:column="43">.<pos:position pos:line="256" pos:column="44"/></operator><name pos:line="256" pos:column="44">raw_flushing_ends_before<pos:position pos:line="256" pos:column="68"/></name></name></expr> ?<pos:position pos:line="256" pos:column="70"/></condition><then pos:line="256" pos:column="70"> <expr><name><name pos:line="256" pos:column="71">iobuf<pos:position pos:line="256" pos:column="76"/></name><operator pos:line="256" pos:column="76">.<pos:position pos:line="256" pos:column="77"/></operator><name pos:line="256" pos:column="77">raw_flushing_ends_before<pos:position pos:line="256" pos:column="101"/></name></name> <operator pos:line="256" pos:column="102">-<pos:position pos:line="256" pos:column="103"/></operator> <name><name pos:line="256" pos:column="104">out<pos:position pos:line="256" pos:column="107"/></name><operator pos:line="256" pos:column="107">-&gt;<pos:position pos:line="256" pos:column="112"/></operator><name pos:line="256" pos:column="109">pos<pos:position pos:line="256" pos:column="112"/></name></name></expr> <pos:position pos:line="256" pos:column="113"/></then><else pos:line="256" pos:column="113">: <expr><name><name pos:line="256" pos:column="115">out<pos:position pos:line="256" pos:column="118"/></name><operator pos:line="256" pos:column="118">-&gt;<pos:position pos:line="256" pos:column="123"/></operator><name pos:line="256" pos:column="120">len<pos:position pos:line="256" pos:column="123"/></name></name></expr></else></ternary></expr></init></decl>;<pos:position pos:line="256" pos:column="124"/></decl_stmt>
			<decl_stmt><decl><type><name pos:line="257" pos:column="25">int<pos:position pos:line="257" pos:column="28"/></name></type> <name pos:line="257" pos:column="29">n<pos:position pos:line="257" pos:column="30"/></name></decl>;<pos:position pos:line="257" pos:column="31"/></decl_stmt>

			<if pos:line="259" pos:column="25">if <condition pos:line="259" pos:column="28">(<expr><name pos:line="259" pos:column="29">bwlimit_writemax<pos:position pos:line="259" pos:column="45"/></name> <operator pos:line="259" pos:column="46">&amp;&amp;<pos:position pos:line="259" pos:column="56"/></operator> <name pos:line="259" pos:column="49">len<pos:position pos:line="259" pos:column="52"/></name> <operator pos:line="259" pos:column="53">&gt;<pos:position pos:line="259" pos:column="57"/></operator> <name pos:line="259" pos:column="55">bwlimit_writemax<pos:position pos:line="259" pos:column="71"/></name></expr>)<pos:position pos:line="259" pos:column="72"/></condition><then pos:line="259" pos:column="72">
				<block type="pseudo"><expr_stmt><expr><name pos:line="260" pos:column="33">len<pos:position pos:line="260" pos:column="36"/></name> <operator pos:line="260" pos:column="37">=<pos:position pos:line="260" pos:column="38"/></operator> <name pos:line="260" pos:column="39">bwlimit_writemax<pos:position pos:line="260" pos:column="55"/></name></expr>;<pos:position pos:line="260" pos:column="56"/></expr_stmt></block></then></if>

			<if pos:line="262" pos:column="25">if <condition pos:line="262" pos:column="28">(<expr><name><name pos:line="262" pos:column="29">out<pos:position pos:line="262" pos:column="32"/></name><operator pos:line="262" pos:column="32">-&gt;<pos:position pos:line="262" pos:column="37"/></operator><name pos:line="262" pos:column="34">pos<pos:position pos:line="262" pos:column="37"/></name></name> <operator pos:line="262" pos:column="38">+<pos:position pos:line="262" pos:column="39"/></operator> <name pos:line="262" pos:column="40">len<pos:position pos:line="262" pos:column="43"/></name> <operator pos:line="262" pos:column="44">&gt;<pos:position pos:line="262" pos:column="48"/></operator> <name><name pos:line="262" pos:column="46">out<pos:position pos:line="262" pos:column="49"/></name><operator pos:line="262" pos:column="49">-&gt;<pos:position pos:line="262" pos:column="54"/></operator><name pos:line="262" pos:column="51">size<pos:position pos:line="262" pos:column="55"/></name></name></expr>)<pos:position pos:line="262" pos:column="56"/></condition><then pos:line="262" pos:column="56">
				<block type="pseudo"><expr_stmt><expr><name pos:line="263" pos:column="33">len<pos:position pos:line="263" pos:column="36"/></name> <operator pos:line="263" pos:column="37">=<pos:position pos:line="263" pos:column="38"/></operator> <name><name pos:line="263" pos:column="39">out<pos:position pos:line="263" pos:column="42"/></name><operator pos:line="263" pos:column="42">-&gt;<pos:position pos:line="263" pos:column="47"/></operator><name pos:line="263" pos:column="44">size<pos:position pos:line="263" pos:column="48"/></name></name> <operator pos:line="263" pos:column="49">-<pos:position pos:line="263" pos:column="50"/></operator> <name><name pos:line="263" pos:column="51">out<pos:position pos:line="263" pos:column="54"/></name><operator pos:line="263" pos:column="54">-&gt;<pos:position pos:line="263" pos:column="59"/></operator><name pos:line="263" pos:column="56">pos<pos:position pos:line="263" pos:column="59"/></name></name></expr>;<pos:position pos:line="263" pos:column="60"/></expr_stmt></block></then></if>
			<if pos:line="264" pos:column="25">if <condition pos:line="264" pos:column="28">(<expr><operator pos:line="264" pos:column="29">(<pos:position pos:line="264" pos:column="30"/></operator><name pos:line="264" pos:column="30">n<pos:position pos:line="264" pos:column="31"/></name> <operator pos:line="264" pos:column="32">=<pos:position pos:line="264" pos:column="33"/></operator> <call><name pos:line="264" pos:column="34">write<pos:position pos:line="264" pos:column="39"/></name><argument_list pos:line="264" pos:column="39">(<argument><expr><name><name pos:line="264" pos:column="40">iobuf<pos:position pos:line="264" pos:column="45"/></name><operator pos:line="264" pos:column="45">.<pos:position pos:line="264" pos:column="46"/></operator><name pos:line="264" pos:column="46">out_fd<pos:position pos:line="264" pos:column="52"/></name></name></expr></argument>, <argument><expr><name><name pos:line="264" pos:column="54">out<pos:position pos:line="264" pos:column="57"/></name><operator pos:line="264" pos:column="57">-&gt;<pos:position pos:line="264" pos:column="62"/></operator><name pos:line="264" pos:column="59">buf<pos:position pos:line="264" pos:column="62"/></name></name> <operator pos:line="264" pos:column="63">+<pos:position pos:line="264" pos:column="64"/></operator> <name><name pos:line="264" pos:column="65">out<pos:position pos:line="264" pos:column="68"/></name><operator pos:line="264" pos:column="68">-&gt;<pos:position pos:line="264" pos:column="73"/></operator><name pos:line="264" pos:column="70">pos<pos:position pos:line="264" pos:column="73"/></name></name></expr></argument>, <argument><expr><name pos:line="264" pos:column="75">len<pos:position pos:line="264" pos:column="78"/></name></expr></argument>)<pos:position pos:line="264" pos:column="79"/></argument_list></call><operator pos:line="264" pos:column="79">)<pos:position pos:line="264" pos:column="80"/></operator> <operator pos:line="264" pos:column="81">&lt;=<pos:position pos:line="264" pos:column="86"/></operator> <literal type="number" pos:line="264" pos:column="84">0<pos:position pos:line="264" pos:column="85"/></literal></expr>)<pos:position pos:line="264" pos:column="86"/></condition><then pos:line="264" pos:column="86"> <block pos:line="264" pos:column="87">{
				<if pos:line="265" pos:column="33">if <condition pos:line="265" pos:column="36">(<expr><name pos:line="265" pos:column="37">errno<pos:position pos:line="265" pos:column="42"/></name> <operator pos:line="265" pos:column="43">==<pos:position pos:line="265" pos:column="45"/></operator> <name pos:line="265" pos:column="46">EINTR<pos:position pos:line="265" pos:column="51"/></name> <operator pos:line="265" pos:column="52">||<pos:position pos:line="265" pos:column="54"/></operator> <name pos:line="265" pos:column="55">errno<pos:position pos:line="265" pos:column="60"/></name> <operator pos:line="265" pos:column="61">==<pos:position pos:line="265" pos:column="63"/></operator> <name pos:line="265" pos:column="64">EWOULDBLOCK<pos:position pos:line="265" pos:column="75"/></name> <operator pos:line="265" pos:column="76">||<pos:position pos:line="265" pos:column="78"/></operator> <name pos:line="265" pos:column="79">errno<pos:position pos:line="265" pos:column="84"/></name> <operator pos:line="265" pos:column="85">==<pos:position pos:line="265" pos:column="87"/></operator> <name pos:line="265" pos:column="88">EAGAIN<pos:position pos:line="265" pos:column="94"/></name></expr>)<pos:position pos:line="265" pos:column="95"/></condition><then pos:line="265" pos:column="95">
					<block type="pseudo"><expr_stmt><expr><name pos:line="266" pos:column="41">n<pos:position pos:line="266" pos:column="42"/></name> <operator pos:line="266" pos:column="43">=<pos:position pos:line="266" pos:column="44"/></operator> <literal type="number" pos:line="266" pos:column="45">0<pos:position pos:line="266" pos:column="46"/></literal></expr>;<pos:position pos:line="266" pos:column="47"/></expr_stmt></block></then>
				<else pos:line="267" pos:column="33">else <block pos:line="267" pos:column="38">{
					<comment type="block" pos:line="268" pos:column="41">/* Don't write errors on a dead socket. */</comment>
					<expr_stmt><expr><name pos:line="269" pos:column="41">msgs2stderr<pos:position pos:line="269" pos:column="52"/></name> <operator pos:line="269" pos:column="53">=<pos:position pos:line="269" pos:column="54"/></operator> <literal type="number" pos:line="269" pos:column="55">1<pos:position pos:line="269" pos:column="56"/></literal></expr>;<pos:position pos:line="269" pos:column="57"/></expr_stmt>
					<expr_stmt><expr><name><name pos:line="270" pos:column="41">iobuf<pos:position pos:line="270" pos:column="46"/></name><operator pos:line="270" pos:column="46">.<pos:position pos:line="270" pos:column="47"/></operator><name pos:line="270" pos:column="47">out_fd<pos:position pos:line="270" pos:column="53"/></name></name> <operator pos:line="270" pos:column="54">=<pos:position pos:line="270" pos:column="55"/></operator> <operator pos:line="270" pos:column="56">-<pos:position pos:line="270" pos:column="57"/></operator><literal type="number" pos:line="270" pos:column="57">2<pos:position pos:line="270" pos:column="58"/></literal></expr>;<pos:position pos:line="270" pos:column="59"/></expr_stmt>
					<expr_stmt><expr><name><name pos:line="271" pos:column="41">iobuf<pos:position pos:line="271" pos:column="46"/></name><operator pos:line="271" pos:column="46">.<pos:position pos:line="271" pos:column="47"/></operator><name pos:line="271" pos:column="47">out<pos:position pos:line="271" pos:column="50"/></name><operator pos:line="271" pos:column="50">.<pos:position pos:line="271" pos:column="51"/></operator><name pos:line="271" pos:column="51">len<pos:position pos:line="271" pos:column="54"/></name></name> <operator pos:line="271" pos:column="55">=<pos:position pos:line="271" pos:column="56"/></operator> <name><name pos:line="271" pos:column="57">iobuf<pos:position pos:line="271" pos:column="62"/></name><operator pos:line="271" pos:column="62">.<pos:position pos:line="271" pos:column="63"/></operator><name pos:line="271" pos:column="63">msg<pos:position pos:line="271" pos:column="66"/></name><operator pos:line="271" pos:column="66">.<pos:position pos:line="271" pos:column="67"/></operator><name pos:line="271" pos:column="67">len<pos:position pos:line="271" pos:column="70"/></name></name> <operator pos:line="271" pos:column="71">=<pos:position pos:line="271" pos:column="72"/></operator> <name><name pos:line="271" pos:column="73">iobuf<pos:position pos:line="271" pos:column="78"/></name><operator pos:line="271" pos:column="78">.<pos:position pos:line="271" pos:column="79"/></operator><name pos:line="271" pos:column="79">raw_flushing_ends_before<pos:position pos:line="271" pos:column="103"/></name></name> <operator pos:line="271" pos:column="104">=<pos:position pos:line="271" pos:column="105"/></operator> <literal type="number" pos:line="271" pos:column="106">0<pos:position pos:line="271" pos:column="107"/></literal></expr>;<pos:position pos:line="271" pos:column="108"/></expr_stmt>
					<expr_stmt><expr><call><name pos:line="272" pos:column="41">rsyserr<pos:position pos:line="272" pos:column="48"/></name><argument_list pos:line="272" pos:column="48">(<argument><expr><name pos:line="272" pos:column="49">FERROR_SOCKET<pos:position pos:line="272" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="272" pos:column="64">errno<pos:position pos:line="272" pos:column="69"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="272" pos:column="71">"[%s] write error"<pos:position pos:line="272" pos:column="89"/></literal></expr></argument>, <argument><expr><call><name pos:line="272" pos:column="91">who_am_i<pos:position pos:line="272" pos:column="99"/></name><argument_list pos:line="272" pos:column="99">()<pos:position pos:line="272" pos:column="101"/></argument_list></call></expr></argument>)<pos:position pos:line="272" pos:column="102"/></argument_list></call></expr>;<pos:position pos:line="272" pos:column="103"/></expr_stmt>
					<expr_stmt><expr><call><name pos:line="273" pos:column="41">drain_multiplex_messages<pos:position pos:line="273" pos:column="65"/></name><argument_list pos:line="273" pos:column="65">()<pos:position pos:line="273" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="273" pos:column="68"/></expr_stmt>
					<expr_stmt><expr><call><name pos:line="274" pos:column="41">exit_cleanup<pos:position pos:line="274" pos:column="53"/></name><argument_list pos:line="274" pos:column="53">(<argument><expr><name pos:line="274" pos:column="54">RERR_SOCKETIO<pos:position pos:line="274" pos:column="67"/></name></expr></argument>)<pos:position pos:line="274" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="274" pos:column="69"/></expr_stmt>
				}<pos:position pos:line="275" pos:column="34"/></block></else></if>
			}<pos:position pos:line="276" pos:column="26"/></block></then></if>
			<if pos:line="277" pos:column="25">if <condition pos:line="277" pos:column="28">(<expr><name pos:line="277" pos:column="29">msgs2stderr<pos:position pos:line="277" pos:column="40"/></name> <operator pos:line="277" pos:column="41">&amp;&amp;<pos:position pos:line="277" pos:column="51"/></operator> <call><name pos:line="277" pos:column="44">DEBUG_GTE<pos:position pos:line="277" pos:column="53"/></name><argument_list pos:line="277" pos:column="53">(<argument><expr><name pos:line="277" pos:column="54">IO<pos:position pos:line="277" pos:column="56"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="277" pos:column="58">2<pos:position pos:line="277" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="277" pos:column="60"/></argument_list></call></expr>)<pos:position pos:line="277" pos:column="61"/></condition><then pos:line="277" pos:column="61"> <block pos:line="277" pos:column="62">{
				<expr_stmt><expr><call><name pos:line="278" pos:column="33">rprintf<pos:position pos:line="278" pos:column="40"/></name><argument_list pos:line="278" pos:column="40">(<argument><expr><name pos:line="278" pos:column="41">FINFO<pos:position pos:line="278" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="278" pos:column="48">"[%s] %s sent=%ld\n"<pos:position pos:line="278" pos:column="68"/></literal></expr></argument>,
					<argument><expr><call><name pos:line="279" pos:column="41">who_am_i<pos:position pos:line="279" pos:column="49"/></name><argument_list pos:line="279" pos:column="49">()<pos:position pos:line="279" pos:column="51"/></argument_list></call></expr></argument>, <argument><expr><ternary><condition><expr><name pos:line="279" pos:column="53">out<pos:position pos:line="279" pos:column="56"/></name> <operator pos:line="279" pos:column="57">==<pos:position pos:line="279" pos:column="59"/></operator> <operator pos:line="279" pos:column="60">&amp;<pos:position pos:line="279" pos:column="65"/></operator><name><name pos:line="279" pos:column="61">iobuf<pos:position pos:line="279" pos:column="66"/></name><operator pos:line="279" pos:column="66">.<pos:position pos:line="279" pos:column="67"/></operator><name pos:line="279" pos:column="67">out<pos:position pos:line="279" pos:column="70"/></name></name></expr> ?<pos:position pos:line="279" pos:column="72"/></condition><then pos:line="279" pos:column="72"> <expr><literal type="string" pos:line="279" pos:column="73">"out"<pos:position pos:line="279" pos:column="78"/></literal></expr> <pos:position pos:line="279" pos:column="79"/></then><else pos:line="279" pos:column="79">: <expr><literal type="string" pos:line="279" pos:column="81">"msg"<pos:position pos:line="279" pos:column="86"/></literal></expr></else></ternary></expr></argument>, <argument><expr><operator pos:line="279" pos:column="88">(<pos:position pos:line="279" pos:column="89"/></operator><name pos:line="279" pos:column="89">long<pos:position pos:line="279" pos:column="93"/></name><operator pos:line="279" pos:column="93">)<pos:position pos:line="279" pos:column="94"/></operator><name pos:line="279" pos:column="94">n<pos:position pos:line="279" pos:column="95"/></name></expr></argument>)<pos:position pos:line="279" pos:column="96"/></argument_list></call></expr>;<pos:position pos:line="279" pos:column="97"/></expr_stmt>
			}<pos:position pos:line="280" pos:column="26"/></block></then></if>

			<if pos:line="282" pos:column="25">if <condition pos:line="282" pos:column="28">(<expr><name pos:line="282" pos:column="29">io_timeout<pos:position pos:line="282" pos:column="39"/></name></expr>)<pos:position pos:line="282" pos:column="40"/></condition><then pos:line="282" pos:column="40">
				<block type="pseudo"><expr_stmt><expr><name pos:line="283" pos:column="33">last_io_out<pos:position pos:line="283" pos:column="44"/></name> <operator pos:line="283" pos:column="45">=<pos:position pos:line="283" pos:column="46"/></operator> <call><name pos:line="283" pos:column="47">time<pos:position pos:line="283" pos:column="51"/></name><argument_list pos:line="283" pos:column="51">(<argument><expr><name pos:line="283" pos:column="52">NULL<pos:position pos:line="283" pos:column="56"/></name></expr></argument>)<pos:position pos:line="283" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="283" pos:column="58"/></expr_stmt></block></then></if>
			<expr_stmt><expr><name><name pos:line="284" pos:column="25">stats<pos:position pos:line="284" pos:column="30"/></name><operator pos:line="284" pos:column="30">.<pos:position pos:line="284" pos:column="31"/></operator><name pos:line="284" pos:column="31">total_written<pos:position pos:line="284" pos:column="44"/></name></name> <operator pos:line="284" pos:column="45">+=<pos:position pos:line="284" pos:column="47"/></operator> <name pos:line="284" pos:column="48">n<pos:position pos:line="284" pos:column="49"/></name></expr>;<pos:position pos:line="284" pos:column="50"/></expr_stmt>

			<if pos:line="286" pos:column="25">if <condition pos:line="286" pos:column="28">(<expr><name pos:line="286" pos:column="29">bwlimit_writemax<pos:position pos:line="286" pos:column="45"/></name></expr>)<pos:position pos:line="286" pos:column="46"/></condition><then pos:line="286" pos:column="46">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="287" pos:column="33">sleep_for_bwlimit<pos:position pos:line="287" pos:column="50"/></name><argument_list pos:line="287" pos:column="50">(<argument><expr><name pos:line="287" pos:column="51">n<pos:position pos:line="287" pos:column="52"/></name></expr></argument>)<pos:position pos:line="287" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="287" pos:column="54"/></expr_stmt></block></then></if>

			<if pos:line="289" pos:column="25">if <condition pos:line="289" pos:column="28">(<expr><operator pos:line="289" pos:column="29">(<pos:position pos:line="289" pos:column="30"/></operator><name><name pos:line="289" pos:column="30">out<pos:position pos:line="289" pos:column="33"/></name><operator pos:line="289" pos:column="33">-&gt;<pos:position pos:line="289" pos:column="38"/></operator><name pos:line="289" pos:column="35">pos<pos:position pos:line="289" pos:column="38"/></name></name> <operator pos:line="289" pos:column="39">+=<pos:position pos:line="289" pos:column="41"/></operator> <name pos:line="289" pos:column="42">n<pos:position pos:line="289" pos:column="43"/></name><operator pos:line="289" pos:column="43">)<pos:position pos:line="289" pos:column="44"/></operator> <operator pos:line="289" pos:column="45">==<pos:position pos:line="289" pos:column="47"/></operator> <name><name pos:line="289" pos:column="48">out<pos:position pos:line="289" pos:column="51"/></name><operator pos:line="289" pos:column="51">-&gt;<pos:position pos:line="289" pos:column="56"/></operator><name pos:line="289" pos:column="53">size<pos:position pos:line="289" pos:column="57"/></name></name></expr>)<pos:position pos:line="289" pos:column="58"/></condition><then pos:line="289" pos:column="58"> <block pos:line="289" pos:column="59">{
				<if pos:line="290" pos:column="33">if <condition pos:line="290" pos:column="36">(<expr><name><name pos:line="290" pos:column="37">iobuf<pos:position pos:line="290" pos:column="42"/></name><operator pos:line="290" pos:column="42">.<pos:position pos:line="290" pos:column="43"/></operator><name pos:line="290" pos:column="43">raw_flushing_ends_before<pos:position pos:line="290" pos:column="67"/></name></name></expr>)<pos:position pos:line="290" pos:column="68"/></condition><then pos:line="290" pos:column="68">
					<block type="pseudo"><expr_stmt><expr><name><name pos:line="291" pos:column="41">iobuf<pos:position pos:line="291" pos:column="46"/></name><operator pos:line="291" pos:column="46">.<pos:position pos:line="291" pos:column="47"/></operator><name pos:line="291" pos:column="47">raw_flushing_ends_before<pos:position pos:line="291" pos:column="71"/></name></name> <operator pos:line="291" pos:column="72">-=<pos:position pos:line="291" pos:column="74"/></operator> <name><name pos:line="291" pos:column="75">out<pos:position pos:line="291" pos:column="78"/></name><operator pos:line="291" pos:column="78">-&gt;<pos:position pos:line="291" pos:column="83"/></operator><name pos:line="291" pos:column="80">size<pos:position pos:line="291" pos:column="84"/></name></name></expr>;<pos:position pos:line="291" pos:column="85"/></expr_stmt></block></then></if>
				<expr_stmt><expr><name><name pos:line="292" pos:column="33">out<pos:position pos:line="292" pos:column="36"/></name><operator pos:line="292" pos:column="36">-&gt;<pos:position pos:line="292" pos:column="41"/></operator><name pos:line="292" pos:column="38">pos<pos:position pos:line="292" pos:column="41"/></name></name> <operator pos:line="292" pos:column="42">=<pos:position pos:line="292" pos:column="43"/></operator> <literal type="number" pos:line="292" pos:column="44">0<pos:position pos:line="292" pos:column="45"/></literal></expr>;<pos:position pos:line="292" pos:column="46"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="293" pos:column="33">restore_iobuf_size<pos:position pos:line="293" pos:column="51"/></name><argument_list pos:line="293" pos:column="51">(<argument><expr><name pos:line="293" pos:column="52">out<pos:position pos:line="293" pos:column="55"/></name></expr></argument>)<pos:position pos:line="293" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="293" pos:column="57"/></expr_stmt>
			}<pos:position pos:line="294" pos:column="26"/></block></then> <elseif pos:line="294" pos:column="27">else <if pos:line="294" pos:column="32">if <condition pos:line="294" pos:column="35">(<expr><name><name pos:line="294" pos:column="36">out<pos:position pos:line="294" pos:column="39"/></name><operator pos:line="294" pos:column="39">-&gt;<pos:position pos:line="294" pos:column="44"/></operator><name pos:line="294" pos:column="41">pos<pos:position pos:line="294" pos:column="44"/></name></name> <operator pos:line="294" pos:column="45">==<pos:position pos:line="294" pos:column="47"/></operator> <name><name pos:line="294" pos:column="48">iobuf<pos:position pos:line="294" pos:column="53"/></name><operator pos:line="294" pos:column="53">.<pos:position pos:line="294" pos:column="54"/></operator><name pos:line="294" pos:column="54">raw_flushing_ends_before<pos:position pos:line="294" pos:column="78"/></name></name></expr>)<pos:position pos:line="294" pos:column="79"/></condition><then pos:line="294" pos:column="79">
				<block type="pseudo"><expr_stmt><expr><name><name pos:line="295" pos:column="33">iobuf<pos:position pos:line="295" pos:column="38"/></name><operator pos:line="295" pos:column="38">.<pos:position pos:line="295" pos:column="39"/></operator><name pos:line="295" pos:column="39">raw_flushing_ends_before<pos:position pos:line="295" pos:column="63"/></name></name> <operator pos:line="295" pos:column="64">=<pos:position pos:line="295" pos:column="65"/></operator> <literal type="number" pos:line="295" pos:column="66">0<pos:position pos:line="295" pos:column="67"/></literal></expr>;<pos:position pos:line="295" pos:column="68"/></expr_stmt></block></then></if></elseif></if>
			<if pos:line="296" pos:column="25">if <condition pos:line="296" pos:column="28">(<expr><operator pos:line="296" pos:column="29">(<pos:position pos:line="296" pos:column="30"/></operator><name><name pos:line="296" pos:column="30">out<pos:position pos:line="296" pos:column="33"/></name><operator pos:line="296" pos:column="33">-&gt;<pos:position pos:line="296" pos:column="38"/></operator><name pos:line="296" pos:column="35">len<pos:position pos:line="296" pos:column="38"/></name></name> <operator pos:line="296" pos:column="39">-=<pos:position pos:line="296" pos:column="41"/></operator> <name pos:line="296" pos:column="42">n<pos:position pos:line="296" pos:column="43"/></name><operator pos:line="296" pos:column="43">)<pos:position pos:line="296" pos:column="44"/></operator> <operator pos:line="296" pos:column="45">==<pos:position pos:line="296" pos:column="47"/></operator> <name pos:line="296" pos:column="48">empty_buf_len<pos:position pos:line="296" pos:column="61"/></name></expr>)<pos:position pos:line="296" pos:column="62"/></condition><then pos:line="296" pos:column="62"> <block pos:line="296" pos:column="63">{
				<expr_stmt><expr><name><name pos:line="297" pos:column="33">out<pos:position pos:line="297" pos:column="36"/></name><operator pos:line="297" pos:column="36">-&gt;<pos:position pos:line="297" pos:column="41"/></operator><name pos:line="297" pos:column="38">pos<pos:position pos:line="297" pos:column="41"/></name></name> <operator pos:line="297" pos:column="42">=<pos:position pos:line="297" pos:column="43"/></operator> <literal type="number" pos:line="297" pos:column="44">0<pos:position pos:line="297" pos:column="45"/></literal></expr>;<pos:position pos:line="297" pos:column="46"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="298" pos:column="33">restore_iobuf_size<pos:position pos:line="298" pos:column="51"/></name><argument_list pos:line="298" pos:column="51">(<argument><expr><name pos:line="298" pos:column="52">out<pos:position pos:line="298" pos:column="55"/></name></expr></argument>)<pos:position pos:line="298" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="298" pos:column="57"/></expr_stmt>
				<if pos:line="299" pos:column="33">if <condition pos:line="299" pos:column="36">(<expr><name pos:line="299" pos:column="37">empty_buf_len<pos:position pos:line="299" pos:column="50"/></name></expr>)<pos:position pos:line="299" pos:column="51"/></condition><then pos:line="299" pos:column="51">
					<block type="pseudo"><expr_stmt><expr><name><name pos:line="300" pos:column="41">iobuf<pos:position pos:line="300" pos:column="46"/></name><operator pos:line="300" pos:column="46">.<pos:position pos:line="300" pos:column="47"/></operator><name pos:line="300" pos:column="47">raw_data_header_pos<pos:position pos:line="300" pos:column="66"/></name></name> <operator pos:line="300" pos:column="67">=<pos:position pos:line="300" pos:column="68"/></operator> <literal type="number" pos:line="300" pos:column="69">0<pos:position pos:line="300" pos:column="70"/></literal></expr>;<pos:position pos:line="300" pos:column="71"/></expr_stmt></block></then></if>
			}<pos:position pos:line="301" pos:column="26"/></block></then></if>
		}<pos:position pos:line="302" pos:column="18"/></block></then></if>

		<if pos:line="304" pos:column="17">if <condition pos:line="304" pos:column="20">(<expr><name pos:line="304" pos:column="21">got_kill_signal<pos:position pos:line="304" pos:column="36"/></name> <operator pos:line="304" pos:column="37">&gt;<pos:position pos:line="304" pos:column="41"/></operator> <literal type="number" pos:line="304" pos:column="39">0<pos:position pos:line="304" pos:column="40"/></literal></expr>)<pos:position pos:line="304" pos:column="41"/></condition><then pos:line="304" pos:column="41">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="305" pos:column="25">handle_kill_signal<pos:position pos:line="305" pos:column="43"/></name><argument_list pos:line="305" pos:column="43">(<argument><expr><name pos:line="305" pos:column="44">True<pos:position pos:line="305" pos:column="48"/></name></expr></argument>)<pos:position pos:line="305" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="305" pos:column="50"/></expr_stmt></block></then></if>

		<comment type="block" pos:line="307" pos:column="17">/* We need to help prevent deadlock by doing what reading
		 * we can whenever we are here trying to write. */</comment>
		<if pos:line="309" pos:column="17">if <condition pos:line="309" pos:column="20">(<expr><name pos:line="309" pos:column="21">IN_MULTIPLEXED_AND_READY<pos:position pos:line="309" pos:column="45"/></name> <operator pos:line="309" pos:column="46">&amp;&amp;<pos:position pos:line="309" pos:column="56"/></operator> <operator pos:line="309" pos:column="49">!<pos:position pos:line="309" pos:column="50"/></operator><operator pos:line="309" pos:column="50">(<pos:position pos:line="309" pos:column="51"/></operator><name pos:line="309" pos:column="51">flags<pos:position pos:line="309" pos:column="56"/></name> <operator pos:line="309" pos:column="57">&amp;<pos:position pos:line="309" pos:column="62"/></operator> <name pos:line="309" pos:column="59">PIO_NEED_INPUT<pos:position pos:line="309" pos:column="73"/></name><operator pos:line="309" pos:column="73">)<pos:position pos:line="309" pos:column="74"/></operator></expr>)<pos:position pos:line="309" pos:column="75"/></condition><then pos:line="309" pos:column="75"> <block pos:line="309" pos:column="76">{
			<while pos:line="310" pos:column="25">while <condition pos:line="310" pos:column="31">(<expr><operator pos:line="310" pos:column="32">!<pos:position pos:line="310" pos:column="33"/></operator><name><name pos:line="310" pos:column="33">iobuf<pos:position pos:line="310" pos:column="38"/></name><operator pos:line="310" pos:column="38">.<pos:position pos:line="310" pos:column="39"/></operator><name pos:line="310" pos:column="39">raw_input_ends_before<pos:position pos:line="310" pos:column="60"/></name></name> <operator pos:line="310" pos:column="61">&amp;&amp;<pos:position pos:line="310" pos:column="71"/></operator> <name><name pos:line="310" pos:column="64">iobuf<pos:position pos:line="310" pos:column="69"/></name><operator pos:line="310" pos:column="69">.<pos:position pos:line="310" pos:column="70"/></operator><name pos:line="310" pos:column="70">in<pos:position pos:line="310" pos:column="72"/></name><operator pos:line="310" pos:column="72">.<pos:position pos:line="310" pos:column="73"/></operator><name pos:line="310" pos:column="73">len<pos:position pos:line="310" pos:column="76"/></name></name> <operator pos:line="310" pos:column="77">&gt;<pos:position pos:line="310" pos:column="81"/></operator> <literal type="number" pos:line="310" pos:column="79">512<pos:position pos:line="310" pos:column="82"/></literal></expr>)<pos:position pos:line="310" pos:column="83"/></condition>
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="311" pos:column="33">read_a_msg<pos:position pos:line="311" pos:column="43"/></name><argument_list pos:line="311" pos:column="43">()<pos:position pos:line="311" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="311" pos:column="46"/></expr_stmt></block></while>
			<if pos:line="312" pos:column="25">if <condition pos:line="312" pos:column="28">(<expr><name pos:line="312" pos:column="29">flist_receiving_enabled<pos:position pos:line="312" pos:column="52"/></name> <operator pos:line="312" pos:column="53">&amp;&amp;<pos:position pos:line="312" pos:column="63"/></operator> <name><name pos:line="312" pos:column="56">iobuf<pos:position pos:line="312" pos:column="61"/></name><operator pos:line="312" pos:column="61">.<pos:position pos:line="312" pos:column="62"/></operator><name pos:line="312" pos:column="62">in<pos:position pos:line="312" pos:column="64"/></name><operator pos:line="312" pos:column="64">.<pos:position pos:line="312" pos:column="65"/></operator><name pos:line="312" pos:column="65">len<pos:position pos:line="312" pos:column="68"/></name></name> <operator pos:line="312" pos:column="69">&gt;<pos:position pos:line="312" pos:column="73"/></operator> <literal type="number" pos:line="312" pos:column="71">512<pos:position pos:line="312" pos:column="74"/></literal></expr>)<pos:position pos:line="312" pos:column="75"/></condition><then pos:line="312" pos:column="75">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="313" pos:column="33">wait_for_receiver<pos:position pos:line="313" pos:column="50"/></name><argument_list pos:line="313" pos:column="50">()<pos:position pos:line="313" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="313" pos:column="53"/></expr_stmt></block></then></if> <comment type="block" pos:line="313" pos:column="54">/* generator only */</comment>
		}<pos:position pos:line="314" pos:column="18"/></block></then></if>

		<if pos:line="316" pos:column="17">if <condition pos:line="316" pos:column="20">(<expr><name pos:line="316" pos:column="21">ff_forward_fd<pos:position pos:line="316" pos:column="34"/></name> <operator pos:line="316" pos:column="35">&gt;=<pos:position pos:line="316" pos:column="40"/></operator> <literal type="number" pos:line="316" pos:column="38">0<pos:position pos:line="316" pos:column="39"/></literal> <operator pos:line="316" pos:column="40">&amp;&amp;<pos:position pos:line="316" pos:column="50"/></operator> <call><name pos:line="316" pos:column="43">FD_ISSET<pos:position pos:line="316" pos:column="51"/></name><argument_list pos:line="316" pos:column="51">(<argument><expr><name pos:line="316" pos:column="52">ff_forward_fd<pos:position pos:line="316" pos:column="65"/></name></expr></argument>, <argument><expr><operator pos:line="316" pos:column="67">&amp;<pos:position pos:line="316" pos:column="72"/></operator><name pos:line="316" pos:column="68">r_fds<pos:position pos:line="316" pos:column="73"/></name></expr></argument>)<pos:position pos:line="316" pos:column="74"/></argument_list></call></expr>)<pos:position pos:line="316" pos:column="75"/></condition><then pos:line="316" pos:column="75"> <block pos:line="316" pos:column="76">{
			<comment type="block" pos:line="317" pos:column="25">/* This can potentially flush all output and enable
			 * multiplexed output, so keep this last in the loop
			 * and be sure to not cache anything that would break
			 * such a change. */</comment>
			<expr_stmt><expr><call><name pos:line="321" pos:column="25">forward_filesfrom_data<pos:position pos:line="321" pos:column="47"/></name><argument_list pos:line="321" pos:column="47">()<pos:position pos:line="321" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="321" pos:column="50"/></expr_stmt>
		}<pos:position pos:line="322" pos:column="18"/></block></then></if>
	}<pos:position pos:line="323" pos:column="10"/></block></while>
  <label><name pos:line="324" pos:column="3">double_break<pos:position pos:line="324" pos:column="15"/></name>:<pos:position pos:line="324" pos:column="16"/></label>

	<if pos:line="326" pos:column="9">if <condition pos:line="326" pos:column="12">(<expr><name pos:line="326" pos:column="13">got_kill_signal<pos:position pos:line="326" pos:column="28"/></name> <operator pos:line="326" pos:column="29">&gt;<pos:position pos:line="326" pos:column="33"/></operator> <literal type="number" pos:line="326" pos:column="31">0<pos:position pos:line="326" pos:column="32"/></literal></expr>)<pos:position pos:line="326" pos:column="33"/></condition><then pos:line="326" pos:column="33">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="327" pos:column="17">handle_kill_signal<pos:position pos:line="327" pos:column="35"/></name><argument_list pos:line="327" pos:column="35">(<argument><expr><name pos:line="327" pos:column="36">True<pos:position pos:line="327" pos:column="40"/></name></expr></argument>)<pos:position pos:line="327" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="327" pos:column="42"/></expr_stmt></block></then></if>

	<expr_stmt><expr><name pos:line="329" pos:column="9">data<pos:position pos:line="329" pos:column="13"/></name> <operator pos:line="329" pos:column="14">=<pos:position pos:line="329" pos:column="15"/></operator> <name><name pos:line="329" pos:column="16">iobuf<pos:position pos:line="329" pos:column="21"/></name><operator pos:line="329" pos:column="21">.<pos:position pos:line="329" pos:column="22"/></operator><name pos:line="329" pos:column="22">in<pos:position pos:line="329" pos:column="24"/></name><operator pos:line="329" pos:column="24">.<pos:position pos:line="329" pos:column="25"/></operator><name pos:line="329" pos:column="25">buf<pos:position pos:line="329" pos:column="28"/></name></name> <operator pos:line="329" pos:column="29">+<pos:position pos:line="329" pos:column="30"/></operator> <name><name pos:line="329" pos:column="31">iobuf<pos:position pos:line="329" pos:column="36"/></name><operator pos:line="329" pos:column="36">.<pos:position pos:line="329" pos:column="37"/></operator><name pos:line="329" pos:column="37">in<pos:position pos:line="329" pos:column="39"/></name><operator pos:line="329" pos:column="39">.<pos:position pos:line="329" pos:column="40"/></operator><name pos:line="329" pos:column="40">pos<pos:position pos:line="329" pos:column="43"/></name></name></expr>;<pos:position pos:line="329" pos:column="44"/></expr_stmt>

	<if pos:line="331" pos:column="9">if <condition pos:line="331" pos:column="12">(<expr><name pos:line="331" pos:column="13">flags<pos:position pos:line="331" pos:column="18"/></name> <operator pos:line="331" pos:column="19">&amp;<pos:position pos:line="331" pos:column="24"/></operator> <name pos:line="331" pos:column="21">PIO_CONSUME_INPUT<pos:position pos:line="331" pos:column="38"/></name></expr>)<pos:position pos:line="331" pos:column="39"/></condition><then pos:line="331" pos:column="39"> <block pos:line="331" pos:column="40">{
		<expr_stmt><expr><name><name pos:line="332" pos:column="17">iobuf<pos:position pos:line="332" pos:column="22"/></name><operator pos:line="332" pos:column="22">.<pos:position pos:line="332" pos:column="23"/></operator><name pos:line="332" pos:column="23">in<pos:position pos:line="332" pos:column="25"/></name><operator pos:line="332" pos:column="25">.<pos:position pos:line="332" pos:column="26"/></operator><name pos:line="332" pos:column="26">len<pos:position pos:line="332" pos:column="29"/></name></name> <operator pos:line="332" pos:column="30">-=<pos:position pos:line="332" pos:column="32"/></operator> <name pos:line="332" pos:column="33">needed<pos:position pos:line="332" pos:column="39"/></name></expr>;<pos:position pos:line="332" pos:column="40"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="333" pos:column="17">iobuf<pos:position pos:line="333" pos:column="22"/></name><operator pos:line="333" pos:column="22">.<pos:position pos:line="333" pos:column="23"/></operator><name pos:line="333" pos:column="23">in<pos:position pos:line="333" pos:column="25"/></name><operator pos:line="333" pos:column="25">.<pos:position pos:line="333" pos:column="26"/></operator><name pos:line="333" pos:column="26">pos<pos:position pos:line="333" pos:column="29"/></name></name> <operator pos:line="333" pos:column="30">+=<pos:position pos:line="333" pos:column="32"/></operator> <name pos:line="333" pos:column="33">needed<pos:position pos:line="333" pos:column="39"/></name></expr>;<pos:position pos:line="333" pos:column="40"/></expr_stmt>
		<if pos:line="334" pos:column="17">if <condition pos:line="334" pos:column="20">(<expr><name><name pos:line="334" pos:column="21">iobuf<pos:position pos:line="334" pos:column="26"/></name><operator pos:line="334" pos:column="26">.<pos:position pos:line="334" pos:column="27"/></operator><name pos:line="334" pos:column="27">in<pos:position pos:line="334" pos:column="29"/></name><operator pos:line="334" pos:column="29">.<pos:position pos:line="334" pos:column="30"/></operator><name pos:line="334" pos:column="30">pos<pos:position pos:line="334" pos:column="33"/></name></name> <operator pos:line="334" pos:column="34">==<pos:position pos:line="334" pos:column="36"/></operator> <name><name pos:line="334" pos:column="37">iobuf<pos:position pos:line="334" pos:column="42"/></name><operator pos:line="334" pos:column="42">.<pos:position pos:line="334" pos:column="43"/></operator><name pos:line="334" pos:column="43">raw_input_ends_before<pos:position pos:line="334" pos:column="64"/></name></name></expr>)<pos:position pos:line="334" pos:column="65"/></condition><then pos:line="334" pos:column="65">
			<block type="pseudo"><expr_stmt><expr><name><name pos:line="335" pos:column="25">iobuf<pos:position pos:line="335" pos:column="30"/></name><operator pos:line="335" pos:column="30">.<pos:position pos:line="335" pos:column="31"/></operator><name pos:line="335" pos:column="31">raw_input_ends_before<pos:position pos:line="335" pos:column="52"/></name></name> <operator pos:line="335" pos:column="53">=<pos:position pos:line="335" pos:column="54"/></operator> <literal type="number" pos:line="335" pos:column="55">0<pos:position pos:line="335" pos:column="56"/></literal></expr>;<pos:position pos:line="335" pos:column="57"/></expr_stmt></block></then></if>
		<if pos:line="336" pos:column="17">if <condition pos:line="336" pos:column="20">(<expr><name><name pos:line="336" pos:column="21">iobuf<pos:position pos:line="336" pos:column="26"/></name><operator pos:line="336" pos:column="26">.<pos:position pos:line="336" pos:column="27"/></operator><name pos:line="336" pos:column="27">in<pos:position pos:line="336" pos:column="29"/></name><operator pos:line="336" pos:column="29">.<pos:position pos:line="336" pos:column="30"/></operator><name pos:line="336" pos:column="30">pos<pos:position pos:line="336" pos:column="33"/></name></name> <operator pos:line="336" pos:column="34">&gt;=<pos:position pos:line="336" pos:column="39"/></operator> <name><name pos:line="336" pos:column="37">iobuf<pos:position pos:line="336" pos:column="42"/></name><operator pos:line="336" pos:column="42">.<pos:position pos:line="336" pos:column="43"/></operator><name pos:line="336" pos:column="43">in<pos:position pos:line="336" pos:column="45"/></name><operator pos:line="336" pos:column="45">.<pos:position pos:line="336" pos:column="46"/></operator><name pos:line="336" pos:column="46">size<pos:position pos:line="336" pos:column="50"/></name></name></expr>)<pos:position pos:line="336" pos:column="51"/></condition><then pos:line="336" pos:column="51"> <block pos:line="336" pos:column="52">{
			<expr_stmt><expr><name><name pos:line="337" pos:column="25">iobuf<pos:position pos:line="337" pos:column="30"/></name><operator pos:line="337" pos:column="30">.<pos:position pos:line="337" pos:column="31"/></operator><name pos:line="337" pos:column="31">in<pos:position pos:line="337" pos:column="33"/></name><operator pos:line="337" pos:column="33">.<pos:position pos:line="337" pos:column="34"/></operator><name pos:line="337" pos:column="34">pos<pos:position pos:line="337" pos:column="37"/></name></name> <operator pos:line="337" pos:column="38">-=<pos:position pos:line="337" pos:column="40"/></operator> <name><name pos:line="337" pos:column="41">iobuf<pos:position pos:line="337" pos:column="46"/></name><operator pos:line="337" pos:column="46">.<pos:position pos:line="337" pos:column="47"/></operator><name pos:line="337" pos:column="47">in<pos:position pos:line="337" pos:column="49"/></name><operator pos:line="337" pos:column="49">.<pos:position pos:line="337" pos:column="50"/></operator><name pos:line="337" pos:column="50">size<pos:position pos:line="337" pos:column="54"/></name></name></expr>;<pos:position pos:line="337" pos:column="55"/></expr_stmt>
			<if pos:line="338" pos:column="25">if <condition pos:line="338" pos:column="28">(<expr><name><name pos:line="338" pos:column="29">iobuf<pos:position pos:line="338" pos:column="34"/></name><operator pos:line="338" pos:column="34">.<pos:position pos:line="338" pos:column="35"/></operator><name pos:line="338" pos:column="35">raw_input_ends_before<pos:position pos:line="338" pos:column="56"/></name></name></expr>)<pos:position pos:line="338" pos:column="57"/></condition><then pos:line="338" pos:column="57">
				<block type="pseudo"><expr_stmt><expr><name><name pos:line="339" pos:column="33">iobuf<pos:position pos:line="339" pos:column="38"/></name><operator pos:line="339" pos:column="38">.<pos:position pos:line="339" pos:column="39"/></operator><name pos:line="339" pos:column="39">raw_input_ends_before<pos:position pos:line="339" pos:column="60"/></name></name> <operator pos:line="339" pos:column="61">-=<pos:position pos:line="339" pos:column="63"/></operator> <name><name pos:line="339" pos:column="64">iobuf<pos:position pos:line="339" pos:column="69"/></name><operator pos:line="339" pos:column="69">.<pos:position pos:line="339" pos:column="70"/></operator><name pos:line="339" pos:column="70">in<pos:position pos:line="339" pos:column="72"/></name><operator pos:line="339" pos:column="72">.<pos:position pos:line="339" pos:column="73"/></operator><name pos:line="339" pos:column="73">size<pos:position pos:line="339" pos:column="77"/></name></name></expr>;<pos:position pos:line="339" pos:column="78"/></expr_stmt></block></then></if>
		}<pos:position pos:line="340" pos:column="18"/></block></then></if>
	}<pos:position pos:line="341" pos:column="10"/></block></then></if>

	<return pos:line="343" pos:column="9">return <expr><name pos:line="343" pos:column="16">data<pos:position pos:line="343" pos:column="20"/></name></expr>;<pos:position pos:line="343" pos:column="21"/></return>
}<pos:position pos:line="344" pos:column="2"/></block></function></unit>
