<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_795_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">hpux_acl_sort<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name pos:line="1" pos:column="26">int<pos:position pos:line="1" pos:column="29"/></name></type> <name pos:line="1" pos:column="30">acl_count<pos:position pos:line="1" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="41">int<pos:position pos:line="1" pos:column="44"/></name></type> <name pos:line="1" pos:column="45">calclass<pos:position pos:line="1" pos:column="53"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="55">struct<pos:position pos:line="1" pos:column="61"/></name> <name pos:line="1" pos:column="62">acl<pos:position pos:line="1" pos:column="65"/></name></name> <modifier pos:line="1" pos:column="66">*<pos:position pos:line="1" pos:column="67"/></modifier></type><name pos:line="1" pos:column="67">aclp<pos:position pos:line="1" pos:column="71"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="72"/></parameter_list>
<block pos:line="2" pos:column="1">{
<cpp:if pos:line="3" pos:column="1">#<cpp:directive pos:line="3" pos:column="2">if<pos:position pos:line="3" pos:column="4"/></cpp:directive> <expr><operator pos:line="3" pos:column="5">!<pos:position pos:line="3" pos:column="6"/></operator><call><name pos:line="3" pos:column="6">defined<pos:position pos:line="3" pos:column="13"/></name><argument_list pos:line="3" pos:column="13">(<argument><expr><name pos:line="3" pos:column="14">HAVE_HPUX_ACLSORT<pos:position pos:line="3" pos:column="31"/></name></expr></argument>)<pos:position pos:line="3" pos:column="32"/></argument_list></call></expr></cpp:if>
	<comment type="block" pos:line="4" pos:column="9">/*
	 * The aclsort() system call is availabe on the latest HPUX General
	 * Patch Bundles. So for HPUX, we developed our version of acl_sort 
	 * function. Because, we don't want to update to a new 
	 * HPUX GR bundle just for aclsort() call.
	 */</comment>

	<decl_stmt><decl><type><name><name pos:line="11" pos:column="9">struct<pos:position pos:line="11" pos:column="15"/></name> <name pos:line="11" pos:column="16">hpux_acl_types<pos:position pos:line="11" pos:column="30"/></name></name></type> <name pos:line="11" pos:column="31">acl_obj_count<pos:position pos:line="11" pos:column="44"/></name></decl>;<pos:position pos:line="11" pos:column="45"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="12" pos:column="9">int<pos:position pos:line="12" pos:column="12"/></name></type> <name pos:line="12" pos:column="13">n_class_obj_perm<pos:position pos:line="12" pos:column="29"/></name> <init pos:line="12" pos:column="30">= <expr><literal type="number" pos:line="12" pos:column="32">0<pos:position pos:line="12" pos:column="33"/></literal></expr></init></decl>;<pos:position pos:line="12" pos:column="34"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="13" pos:column="9">int<pos:position pos:line="13" pos:column="12"/></name></type> <name pos:line="13" pos:column="13">i<pos:position pos:line="13" pos:column="14"/></name></decl>, <decl><type ref="prev"/><name pos:line="13" pos:column="16">j<pos:position pos:line="13" pos:column="17"/></name></decl>;<pos:position pos:line="13" pos:column="18"/></decl_stmt>
 
	<if pos:line="15" pos:column="9">if<condition pos:line="15" pos:column="11">(<expr><operator pos:line="15" pos:column="12">!<pos:position pos:line="15" pos:column="13"/></operator><name pos:line="15" pos:column="13">acl_count<pos:position pos:line="15" pos:column="22"/></name></expr>)<pos:position pos:line="15" pos:column="23"/></condition><then pos:line="15" pos:column="23"> <block pos:line="15" pos:column="24">{
		<expr_stmt><expr><call><name pos:line="16" pos:column="17">DEBUG<pos:position pos:line="16" pos:column="22"/></name><argument_list pos:line="16" pos:column="22">(<argument><expr><literal type="number" pos:line="16" pos:column="23">10<pos:position pos:line="16" pos:column="25"/></literal></expr></argument>,<argument><expr><operator pos:line="16" pos:column="26">(<pos:position pos:line="16" pos:column="27"/></operator><literal type="string" pos:line="16" pos:column="27">"Zero acl count passed. Returning Success\n"<pos:position pos:line="16" pos:column="71"/></literal><operator pos:line="16" pos:column="71">)<pos:position pos:line="16" pos:column="72"/></operator></expr></argument>)<pos:position pos:line="16" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="74"/></expr_stmt>
		<return pos:line="17" pos:column="17">return <expr><literal type="number" pos:line="17" pos:column="24">0<pos:position pos:line="17" pos:column="25"/></literal></expr>;<pos:position pos:line="17" pos:column="26"/></return>
	}<pos:position pos:line="18" pos:column="10"/></block></then></if>

	<if pos:line="20" pos:column="9">if<condition pos:line="20" pos:column="11">(<expr><name pos:line="20" pos:column="12">aclp<pos:position pos:line="20" pos:column="16"/></name> <operator pos:line="20" pos:column="17">==<pos:position pos:line="20" pos:column="19"/></operator> <name pos:line="20" pos:column="20">NULL<pos:position pos:line="20" pos:column="24"/></name></expr>)<pos:position pos:line="20" pos:column="25"/></condition><then pos:line="20" pos:column="25"> <block pos:line="20" pos:column="26">{
		<expr_stmt><expr><call><name pos:line="21" pos:column="17">DEBUG<pos:position pos:line="21" pos:column="22"/></name><argument_list pos:line="21" pos:column="22">(<argument><expr><literal type="number" pos:line="21" pos:column="23">0<pos:position pos:line="21" pos:column="24"/></literal></expr></argument>,<argument><expr><operator pos:line="21" pos:column="25">(<pos:position pos:line="21" pos:column="26"/></operator><literal type="string" pos:line="21" pos:column="26">"Null ACL pointer in hpux_acl_sort. Returning Failure. \n"<pos:position pos:line="21" pos:column="84"/></literal><operator pos:line="21" pos:column="84">)<pos:position pos:line="21" pos:column="85"/></operator></expr></argument>)<pos:position pos:line="21" pos:column="86"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="87"/></expr_stmt>
		<return pos:line="22" pos:column="17">return <expr><operator pos:line="22" pos:column="24">-<pos:position pos:line="22" pos:column="25"/></operator><literal type="number" pos:line="22" pos:column="25">1<pos:position pos:line="22" pos:column="26"/></literal></expr>;<pos:position pos:line="22" pos:column="27"/></return>
	}<pos:position pos:line="23" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="25" pos:column="9">/* Count different types of ACLs in the ACLs array */</comment>

	<expr_stmt><expr><call><name pos:line="27" pos:column="9">hpux_count_obj<pos:position pos:line="27" pos:column="23"/></name><argument_list pos:line="27" pos:column="23">(<argument><expr><name pos:line="27" pos:column="24">acl_count<pos:position pos:line="27" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="35">aclp<pos:position pos:line="27" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="27" pos:column="41">&amp;<pos:position pos:line="27" pos:column="46"/></operator><name pos:line="27" pos:column="42">acl_obj_count<pos:position pos:line="27" pos:column="55"/></name></expr></argument>)<pos:position pos:line="27" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="57"/></expr_stmt>

	<comment type="block" pos:line="29" pos:column="9">/* There should be only one entry each of type USER_OBJ, GROUP_OBJ, 
	 * CLASS_OBJ and OTHER_OBJ 
	 */</comment>

	<if pos:line="33" pos:column="9">if<condition pos:line="33" pos:column="11">( <expr><operator pos:line="33" pos:column="13">(<pos:position pos:line="33" pos:column="14"/></operator><name><name pos:line="33" pos:column="14">acl_obj_count<pos:position pos:line="33" pos:column="27"/></name><operator pos:line="33" pos:column="27">.<pos:position pos:line="33" pos:column="28"/></operator><name pos:line="33" pos:column="28">n_user_obj<pos:position pos:line="33" pos:column="38"/></name></name>  <operator pos:line="33" pos:column="40">!=<pos:position pos:line="33" pos:column="42"/></operator> <literal type="number" pos:line="33" pos:column="43">1<pos:position pos:line="33" pos:column="44"/></literal><operator pos:line="33" pos:column="44">)<pos:position pos:line="33" pos:column="45"/></operator> <operator pos:line="33" pos:column="46">||<pos:position pos:line="33" pos:column="48"/></operator> 
		<operator pos:line="34" pos:column="17">(<pos:position pos:line="34" pos:column="18"/></operator><name><name pos:line="34" pos:column="18">acl_obj_count<pos:position pos:line="34" pos:column="31"/></name><operator pos:line="34" pos:column="31">.<pos:position pos:line="34" pos:column="32"/></operator><name pos:line="34" pos:column="32">n_group_obj<pos:position pos:line="34" pos:column="43"/></name></name> <operator pos:line="34" pos:column="44">!=<pos:position pos:line="34" pos:column="46"/></operator> <literal type="number" pos:line="34" pos:column="47">1<pos:position pos:line="34" pos:column="48"/></literal><operator pos:line="34" pos:column="48">)<pos:position pos:line="34" pos:column="49"/></operator> <operator pos:line="34" pos:column="50">||<pos:position pos:line="34" pos:column="52"/></operator> 
		<operator pos:line="35" pos:column="17">(<pos:position pos:line="35" pos:column="18"/></operator><name><name pos:line="35" pos:column="18">acl_obj_count<pos:position pos:line="35" pos:column="31"/></name><operator pos:line="35" pos:column="31">.<pos:position pos:line="35" pos:column="32"/></operator><name pos:line="35" pos:column="32">n_class_obj<pos:position pos:line="35" pos:column="43"/></name></name> <operator pos:line="35" pos:column="44">!=<pos:position pos:line="35" pos:column="46"/></operator> <literal type="number" pos:line="35" pos:column="47">1<pos:position pos:line="35" pos:column="48"/></literal><operator pos:line="35" pos:column="48">)<pos:position pos:line="35" pos:column="49"/></operator> <operator pos:line="35" pos:column="50">||<pos:position pos:line="35" pos:column="52"/></operator>
		<operator pos:line="36" pos:column="17">(<pos:position pos:line="36" pos:column="18"/></operator><name><name pos:line="36" pos:column="18">acl_obj_count<pos:position pos:line="36" pos:column="31"/></name><operator pos:line="36" pos:column="31">.<pos:position pos:line="36" pos:column="32"/></operator><name pos:line="36" pos:column="32">n_other_obj<pos:position pos:line="36" pos:column="43"/></name></name> <operator pos:line="36" pos:column="44">!=<pos:position pos:line="36" pos:column="46"/></operator> <literal type="number" pos:line="36" pos:column="47">1<pos:position pos:line="36" pos:column="48"/></literal><operator pos:line="36" pos:column="48">)<pos:position pos:line="36" pos:column="49"/></operator></expr> 
	)<pos:position pos:line="37" pos:column="10"/></condition><then pos:line="37" pos:column="10"> <block pos:line="37" pos:column="11">{
		<expr_stmt><expr><call><name pos:line="38" pos:column="17">DEBUG<pos:position pos:line="38" pos:column="22"/></name><argument_list pos:line="38" pos:column="22">(<argument><expr><literal type="number" pos:line="38" pos:column="23">0<pos:position pos:line="38" pos:column="24"/></literal></expr></argument>,<argument><expr><operator pos:line="38" pos:column="25">(<pos:position pos:line="38" pos:column="26"/></operator><literal type="string" pos:line="38" pos:column="26">"hpux_acl_sort: More than one entry or no entries for \
USER OBJ or GROUP_OBJ or OTHER_OBJ or CLASS_OBJ\n"<pos:position pos:line="38" pos:column="132"/></literal><operator pos:line="39" pos:column="51">)<pos:position pos:line="39" pos:column="52"/></operator></expr></argument>)<pos:position pos:line="39" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="54"/></expr_stmt>
		<return pos:line="40" pos:column="17">return <expr><operator pos:line="40" pos:column="24">-<pos:position pos:line="40" pos:column="25"/></operator><literal type="number" pos:line="40" pos:column="25">1<pos:position pos:line="40" pos:column="26"/></literal></expr>;<pos:position pos:line="40" pos:column="27"/></return>
	}<pos:position pos:line="41" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="43" pos:column="9">/* If any of the default objects are present, there should be only
	 * one of them each.
	 */</comment>

	<if pos:line="47" pos:column="9">if<condition pos:line="47" pos:column="11">( <expr><operator pos:line="47" pos:column="13">(<pos:position pos:line="47" pos:column="14"/></operator><name><name pos:line="47" pos:column="14">acl_obj_count<pos:position pos:line="47" pos:column="27"/></name><operator pos:line="47" pos:column="27">.<pos:position pos:line="47" pos:column="28"/></operator><name pos:line="47" pos:column="28">n_def_user_obj<pos:position pos:line="47" pos:column="42"/></name></name>  <operator pos:line="47" pos:column="44">&gt;<pos:position pos:line="47" pos:column="48"/></operator> <literal type="number" pos:line="47" pos:column="46">1<pos:position pos:line="47" pos:column="47"/></literal><operator pos:line="47" pos:column="47">)<pos:position pos:line="47" pos:column="48"/></operator> <operator pos:line="47" pos:column="49">||<pos:position pos:line="47" pos:column="51"/></operator> <operator pos:line="47" pos:column="52">(<pos:position pos:line="47" pos:column="53"/></operator><name><name pos:line="47" pos:column="53">acl_obj_count<pos:position pos:line="47" pos:column="66"/></name><operator pos:line="47" pos:column="66">.<pos:position pos:line="47" pos:column="67"/></operator><name pos:line="47" pos:column="67">n_def_group_obj<pos:position pos:line="47" pos:column="82"/></name></name> <operator pos:line="47" pos:column="83">&gt;<pos:position pos:line="47" pos:column="87"/></operator> <literal type="number" pos:line="47" pos:column="85">1<pos:position pos:line="47" pos:column="86"/></literal><operator pos:line="47" pos:column="86">)<pos:position pos:line="47" pos:column="87"/></operator> <operator pos:line="47" pos:column="88">||<pos:position pos:line="47" pos:column="90"/></operator> 
			<operator pos:line="48" pos:column="25">(<pos:position pos:line="48" pos:column="26"/></operator><name><name pos:line="48" pos:column="26">acl_obj_count<pos:position pos:line="48" pos:column="39"/></name><operator pos:line="48" pos:column="39">.<pos:position pos:line="48" pos:column="40"/></operator><name pos:line="48" pos:column="40">n_def_other_obj<pos:position pos:line="48" pos:column="55"/></name></name> <operator pos:line="48" pos:column="56">&gt;<pos:position pos:line="48" pos:column="60"/></operator> <literal type="number" pos:line="48" pos:column="58">1<pos:position pos:line="48" pos:column="59"/></literal><operator pos:line="48" pos:column="59">)<pos:position pos:line="48" pos:column="60"/></operator> <operator pos:line="48" pos:column="61">||<pos:position pos:line="48" pos:column="63"/></operator> <operator pos:line="48" pos:column="64">(<pos:position pos:line="48" pos:column="65"/></operator><name><name pos:line="48" pos:column="65">acl_obj_count<pos:position pos:line="48" pos:column="78"/></name><operator pos:line="48" pos:column="78">.<pos:position pos:line="48" pos:column="79"/></operator><name pos:line="48" pos:column="79">n_def_class_obj<pos:position pos:line="48" pos:column="94"/></name></name> <operator pos:line="48" pos:column="95">&gt;<pos:position pos:line="48" pos:column="99"/></operator> <literal type="number" pos:line="48" pos:column="97">1<pos:position pos:line="48" pos:column="98"/></literal><operator pos:line="48" pos:column="98">)<pos:position pos:line="48" pos:column="99"/></operator></expr> )<pos:position pos:line="48" pos:column="101"/></condition><then pos:line="48" pos:column="101"> <block pos:line="48" pos:column="102">{
		<expr_stmt><expr><call><name pos:line="49" pos:column="17">DEBUG<pos:position pos:line="49" pos:column="22"/></name><argument_list pos:line="49" pos:column="22">(<argument><expr><literal type="number" pos:line="49" pos:column="23">0<pos:position pos:line="49" pos:column="24"/></literal></expr></argument>,<argument><expr><operator pos:line="49" pos:column="25">(<pos:position pos:line="49" pos:column="26"/></operator><literal type="string" pos:line="49" pos:column="26">"hpux_acl_sort: More than one entry for DEF_CLASS_OBJ \
or DEF_USER_OBJ or DEF_GROUP_OBJ or DEF_OTHER_OBJ\n"<pos:position pos:line="49" pos:column="134"/></literal><operator pos:line="50" pos:column="53">)<pos:position pos:line="50" pos:column="54"/></operator></expr></argument>)<pos:position pos:line="50" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="56"/></expr_stmt>
		<return pos:line="51" pos:column="17">return <expr><operator pos:line="51" pos:column="24">-<pos:position pos:line="51" pos:column="25"/></operator><literal type="number" pos:line="51" pos:column="25">1<pos:position pos:line="51" pos:column="26"/></literal></expr>;<pos:position pos:line="51" pos:column="27"/></return>
	}<pos:position pos:line="52" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="54" pos:column="9">/* We now have proper number of OBJ and DEF_OBJ entries. Now sort the acl 
	 * structures.  
	 *
	 * Sorting crieteria - First sort by ACL type. If there are multiple entries of
	 * same ACL type, sort by ACL id.
	 *
	 * I am using the trival kind of sorting method here because, performance isn't 
	 * really effected by the ACLs feature. More over there aren't going to be more
	 * than 17 entries on HPUX. 
	 */</comment>

	<for pos:line="65" pos:column="9">for<control pos:line="65" pos:column="12">(<init><expr><name pos:line="65" pos:column="13">i<pos:position pos:line="65" pos:column="14"/></name><operator pos:line="65" pos:column="14">=<pos:position pos:line="65" pos:column="15"/></operator><literal type="number" pos:line="65" pos:column="15">0<pos:position pos:line="65" pos:column="16"/></literal></expr>;<pos:position pos:line="65" pos:column="17"/></init> <condition><expr><name pos:line="65" pos:column="18">i<pos:position pos:line="65" pos:column="19"/></name><operator pos:line="65" pos:column="19">&lt;<pos:position pos:line="65" pos:column="23"/></operator><name pos:line="65" pos:column="20">acl_count<pos:position pos:line="65" pos:column="29"/></name></expr>;<pos:position pos:line="65" pos:column="30"/></condition><incr><expr><name pos:line="65" pos:column="30">i<pos:position pos:line="65" pos:column="31"/></name><operator pos:line="65" pos:column="31">++<pos:position pos:line="65" pos:column="33"/></operator></expr></incr>)<pos:position pos:line="65" pos:column="34"/></control> <block pos:line="65" pos:column="35">{
		<for pos:line="66" pos:column="17">for <control pos:line="66" pos:column="21">(<init><expr><name pos:line="66" pos:column="22">j<pos:position pos:line="66" pos:column="23"/></name><operator pos:line="66" pos:column="23">=<pos:position pos:line="66" pos:column="24"/></operator><name pos:line="66" pos:column="24">i<pos:position pos:line="66" pos:column="25"/></name><operator pos:line="66" pos:column="25">+<pos:position pos:line="66" pos:column="26"/></operator><literal type="number" pos:line="66" pos:column="26">1<pos:position pos:line="66" pos:column="27"/></literal></expr>;<pos:position pos:line="66" pos:column="28"/></init> <condition><expr><name pos:line="66" pos:column="29">j<pos:position pos:line="66" pos:column="30"/></name><operator pos:line="66" pos:column="30">&lt;<pos:position pos:line="66" pos:column="34"/></operator><name pos:line="66" pos:column="31">acl_count<pos:position pos:line="66" pos:column="40"/></name></expr>;<pos:position pos:line="66" pos:column="41"/></condition> <incr><expr><name pos:line="66" pos:column="42">j<pos:position pos:line="66" pos:column="43"/></name><operator pos:line="66" pos:column="43">++<pos:position pos:line="66" pos:column="45"/></operator></expr></incr>)<pos:position pos:line="66" pos:column="46"/></control> <block pos:line="66" pos:column="47">{
			<if pos:line="67" pos:column="25">if<condition pos:line="67" pos:column="27">( <expr><name><name pos:line="67" pos:column="29">aclp<pos:position pos:line="67" pos:column="33"/></name><index pos:line="67" pos:column="33">[<expr><name pos:line="67" pos:column="34">i<pos:position pos:line="67" pos:column="35"/></name></expr>]<pos:position pos:line="67" pos:column="36"/></index></name><operator pos:line="67" pos:column="36">.<pos:position pos:line="67" pos:column="37"/></operator><name pos:line="67" pos:column="37">a_type<pos:position pos:line="67" pos:column="43"/></name> <operator pos:line="67" pos:column="44">&gt;<pos:position pos:line="67" pos:column="48"/></operator> <name><name pos:line="67" pos:column="46">aclp<pos:position pos:line="67" pos:column="50"/></name><index pos:line="67" pos:column="50">[<expr><name pos:line="67" pos:column="51">j<pos:position pos:line="67" pos:column="52"/></name></expr>]<pos:position pos:line="67" pos:column="53"/></index></name><operator pos:line="67" pos:column="53">.<pos:position pos:line="67" pos:column="54"/></operator><name pos:line="67" pos:column="54">a_type<pos:position pos:line="67" pos:column="60"/></name></expr> )<pos:position pos:line="67" pos:column="62"/></condition><then pos:line="67" pos:column="62"> <block pos:line="67" pos:column="63">{
				<comment type="block" pos:line="68" pos:column="33">/* ACL entries out of order, swap them */</comment>

				<expr_stmt><expr><call><name pos:line="70" pos:column="33">hpux_swap_acl_entries<pos:position pos:line="70" pos:column="54"/></name><argument_list pos:line="70" pos:column="54">(<argument><expr><operator pos:line="70" pos:column="55">(<pos:position pos:line="70" pos:column="56"/></operator><name pos:line="70" pos:column="56">aclp<pos:position pos:line="70" pos:column="60"/></name><operator pos:line="70" pos:column="60">+<pos:position pos:line="70" pos:column="61"/></operator><name pos:line="70" pos:column="61">i<pos:position pos:line="70" pos:column="62"/></name><operator pos:line="70" pos:column="62">)<pos:position pos:line="70" pos:column="63"/></operator></expr></argument>, <argument><expr><operator pos:line="70" pos:column="65">(<pos:position pos:line="70" pos:column="66"/></operator><name pos:line="70" pos:column="66">aclp<pos:position pos:line="70" pos:column="70"/></name><operator pos:line="70" pos:column="70">+<pos:position pos:line="70" pos:column="71"/></operator><name pos:line="70" pos:column="71">j<pos:position pos:line="70" pos:column="72"/></name><operator pos:line="70" pos:column="72">)<pos:position pos:line="70" pos:column="73"/></operator></expr></argument>)<pos:position pos:line="70" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="75"/></expr_stmt>

			}<pos:position pos:line="72" pos:column="26"/></block></then> <elseif pos:line="72" pos:column="27">else <if pos:line="72" pos:column="32">if <condition pos:line="72" pos:column="35">( <expr><name><name pos:line="72" pos:column="37">aclp<pos:position pos:line="72" pos:column="41"/></name><index pos:line="72" pos:column="41">[<expr><name pos:line="72" pos:column="42">i<pos:position pos:line="72" pos:column="43"/></name></expr>]<pos:position pos:line="72" pos:column="44"/></index></name><operator pos:line="72" pos:column="44">.<pos:position pos:line="72" pos:column="45"/></operator><name pos:line="72" pos:column="45">a_type<pos:position pos:line="72" pos:column="51"/></name> <operator pos:line="72" pos:column="52">==<pos:position pos:line="72" pos:column="54"/></operator> <name><name pos:line="72" pos:column="55">aclp<pos:position pos:line="72" pos:column="59"/></name><index pos:line="72" pos:column="59">[<expr><name pos:line="72" pos:column="60">j<pos:position pos:line="72" pos:column="61"/></name></expr>]<pos:position pos:line="72" pos:column="62"/></index></name><operator pos:line="72" pos:column="62">.<pos:position pos:line="72" pos:column="63"/></operator><name pos:line="72" pos:column="63">a_type<pos:position pos:line="72" pos:column="69"/></name></expr> )<pos:position pos:line="72" pos:column="71"/></condition><then pos:line="72" pos:column="71"> <block pos:line="72" pos:column="72">{

				<comment type="block" pos:line="74" pos:column="33">/* ACL entries of same type, sort by id */</comment>

				<if pos:line="76" pos:column="33">if<condition pos:line="76" pos:column="35">(<expr><name><name pos:line="76" pos:column="36">aclp<pos:position pos:line="76" pos:column="40"/></name><index pos:line="76" pos:column="40">[<expr><name pos:line="76" pos:column="41">i<pos:position pos:line="76" pos:column="42"/></name></expr>]<pos:position pos:line="76" pos:column="43"/></index></name><operator pos:line="76" pos:column="43">.<pos:position pos:line="76" pos:column="44"/></operator><name pos:line="76" pos:column="44">a_id<pos:position pos:line="76" pos:column="48"/></name> <operator pos:line="76" pos:column="49">&gt;<pos:position pos:line="76" pos:column="53"/></operator> <name><name pos:line="76" pos:column="51">aclp<pos:position pos:line="76" pos:column="55"/></name><index pos:line="76" pos:column="55">[<expr><name pos:line="76" pos:column="56">j<pos:position pos:line="76" pos:column="57"/></name></expr>]<pos:position pos:line="76" pos:column="58"/></index></name><operator pos:line="76" pos:column="58">.<pos:position pos:line="76" pos:column="59"/></operator><name pos:line="76" pos:column="59">a_id<pos:position pos:line="76" pos:column="63"/></name></expr>)<pos:position pos:line="76" pos:column="64"/></condition><then pos:line="76" pos:column="64"> <block pos:line="76" pos:column="65">{
					<expr_stmt><expr><call><name pos:line="77" pos:column="41">hpux_swap_acl_entries<pos:position pos:line="77" pos:column="62"/></name><argument_list pos:line="77" pos:column="62">(<argument><expr><operator pos:line="77" pos:column="63">(<pos:position pos:line="77" pos:column="64"/></operator><name pos:line="77" pos:column="64">aclp<pos:position pos:line="77" pos:column="68"/></name><operator pos:line="77" pos:column="68">+<pos:position pos:line="77" pos:column="69"/></operator><name pos:line="77" pos:column="69">i<pos:position pos:line="77" pos:column="70"/></name><operator pos:line="77" pos:column="70">)<pos:position pos:line="77" pos:column="71"/></operator></expr></argument>, <argument><expr><operator pos:line="77" pos:column="73">(<pos:position pos:line="77" pos:column="74"/></operator><name pos:line="77" pos:column="74">aclp<pos:position pos:line="77" pos:column="78"/></name><operator pos:line="77" pos:column="78">+<pos:position pos:line="77" pos:column="79"/></operator><name pos:line="77" pos:column="79">j<pos:position pos:line="77" pos:column="80"/></name><operator pos:line="77" pos:column="80">)<pos:position pos:line="77" pos:column="81"/></operator></expr></argument>)<pos:position pos:line="77" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="83"/></expr_stmt>
				}<pos:position pos:line="78" pos:column="34"/></block></then> <elseif pos:line="78" pos:column="35">else <if pos:line="78" pos:column="40">if <condition pos:line="78" pos:column="43">(<expr><name><name pos:line="78" pos:column="44">aclp<pos:position pos:line="78" pos:column="48"/></name><index pos:line="78" pos:column="48">[<expr><name pos:line="78" pos:column="49">i<pos:position pos:line="78" pos:column="50"/></name></expr>]<pos:position pos:line="78" pos:column="51"/></index></name><operator pos:line="78" pos:column="51">.<pos:position pos:line="78" pos:column="52"/></operator><name pos:line="78" pos:column="52">a_id<pos:position pos:line="78" pos:column="56"/></name> <operator pos:line="78" pos:column="57">==<pos:position pos:line="78" pos:column="59"/></operator> <name><name pos:line="78" pos:column="60">aclp<pos:position pos:line="78" pos:column="64"/></name><index pos:line="78" pos:column="64">[<expr><name pos:line="78" pos:column="65">j<pos:position pos:line="78" pos:column="66"/></name></expr>]<pos:position pos:line="78" pos:column="67"/></index></name><operator pos:line="78" pos:column="67">.<pos:position pos:line="78" pos:column="68"/></operator><name pos:line="78" pos:column="68">a_id<pos:position pos:line="78" pos:column="72"/></name></expr>)<pos:position pos:line="78" pos:column="73"/></condition><then pos:line="78" pos:column="73"> <block pos:line="78" pos:column="74">{
					<comment type="block" pos:line="79" pos:column="41">/* We have a duplicate entry. */</comment>
					<if pos:line="80" pos:column="41">if<condition pos:line="80" pos:column="43">(<expr><call><name pos:line="80" pos:column="44">hpux_prohibited_duplicate_type<pos:position pos:line="80" pos:column="74"/></name><argument_list pos:line="80" pos:column="74">(<argument><expr><name><name pos:line="80" pos:column="75">aclp<pos:position pos:line="80" pos:column="79"/></name><index pos:line="80" pos:column="79">[<expr><name pos:line="80" pos:column="80">i<pos:position pos:line="80" pos:column="81"/></name></expr>]<pos:position pos:line="80" pos:column="82"/></index></name><operator pos:line="80" pos:column="82">.<pos:position pos:line="80" pos:column="83"/></operator><name pos:line="80" pos:column="83">a_type<pos:position pos:line="80" pos:column="89"/></name></expr></argument>)<pos:position pos:line="80" pos:column="90"/></argument_list></call></expr>)<pos:position pos:line="80" pos:column="91"/></condition><then pos:line="80" pos:column="91"> <block pos:line="80" pos:column="92">{
						<expr_stmt><expr><call><name pos:line="81" pos:column="49">DEBUG<pos:position pos:line="81" pos:column="54"/></name><argument_list pos:line="81" pos:column="54">(<argument><expr><literal type="number" pos:line="81" pos:column="55">0<pos:position pos:line="81" pos:column="56"/></literal></expr></argument>, <argument><expr><operator pos:line="81" pos:column="58">(<pos:position pos:line="81" pos:column="59"/></operator><literal type="string" pos:line="81" pos:column="59">"hpux_acl_sort: Duplicate entry: Type(hex): %x Id: %d\n"<pos:position pos:line="81" pos:column="115"/></literal><operator pos:line="81" pos:column="115">,<pos:position pos:line="81" pos:column="116"/></operator>
							<name><name pos:line="82" pos:column="57">aclp<pos:position pos:line="82" pos:column="61"/></name><index pos:line="82" pos:column="61">[<expr><name pos:line="82" pos:column="62">i<pos:position pos:line="82" pos:column="63"/></name></expr>]<pos:position pos:line="82" pos:column="64"/></index></name><operator pos:line="82" pos:column="64">.<pos:position pos:line="82" pos:column="65"/></operator><name pos:line="82" pos:column="65">a_type<pos:position pos:line="82" pos:column="71"/></name><operator pos:line="82" pos:column="71">,<pos:position pos:line="82" pos:column="72"/></operator> <name><name pos:line="82" pos:column="73">aclp<pos:position pos:line="82" pos:column="77"/></name><index pos:line="82" pos:column="77">[<expr><name pos:line="82" pos:column="78">i<pos:position pos:line="82" pos:column="79"/></name></expr>]<pos:position pos:line="82" pos:column="80"/></index></name><operator pos:line="82" pos:column="80">.<pos:position pos:line="82" pos:column="81"/></operator><name pos:line="82" pos:column="81">a_id<pos:position pos:line="82" pos:column="85"/></name><operator pos:line="82" pos:column="85">)<pos:position pos:line="82" pos:column="86"/></operator></expr></argument>)<pos:position pos:line="82" pos:column="87"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="88"/></expr_stmt>
						<return pos:line="83" pos:column="49">return <expr><operator pos:line="83" pos:column="56">-<pos:position pos:line="83" pos:column="57"/></operator><literal type="number" pos:line="83" pos:column="57">1<pos:position pos:line="83" pos:column="58"/></literal></expr>;<pos:position pos:line="83" pos:column="59"/></return>
					}<pos:position pos:line="84" pos:column="42"/></block></then></if>
				}<pos:position pos:line="85" pos:column="34"/></block></then></if></elseif></if>

			}<pos:position pos:line="87" pos:column="26"/></block></then></if></elseif></if>
		}<pos:position pos:line="88" pos:column="18"/></block></for>
	}<pos:position pos:line="89" pos:column="10"/></block></for>

	<comment type="block" pos:line="91" pos:column="9">/* set the class obj permissions to the computed one. */</comment>
	<if pos:line="92" pos:column="9">if<condition pos:line="92" pos:column="11">(<expr><name pos:line="92" pos:column="12">calclass<pos:position pos:line="92" pos:column="20"/></name></expr>)<pos:position pos:line="92" pos:column="21"/></condition><then pos:line="92" pos:column="21"> <block pos:line="92" pos:column="22">{
		<decl_stmt><decl><type><name pos:line="93" pos:column="17">int<pos:position pos:line="93" pos:column="20"/></name></type> <name pos:line="93" pos:column="21">n_class_obj_index<pos:position pos:line="93" pos:column="38"/></name> <init pos:line="93" pos:column="39">= <expr><operator pos:line="93" pos:column="41">-<pos:position pos:line="93" pos:column="42"/></operator><literal type="number" pos:line="93" pos:column="42">1<pos:position pos:line="93" pos:column="43"/></literal></expr></init></decl>;<pos:position pos:line="93" pos:column="44"/></decl_stmt>

		<for pos:line="95" pos:column="17">for<control pos:line="95" pos:column="20">(<init><expr><name pos:line="95" pos:column="21">i<pos:position pos:line="95" pos:column="22"/></name><operator pos:line="95" pos:column="22">=<pos:position pos:line="95" pos:column="23"/></operator><literal type="number" pos:line="95" pos:column="23">0<pos:position pos:line="95" pos:column="24"/></literal></expr>;<pos:position pos:line="95" pos:column="25"/></init><condition><expr><name pos:line="95" pos:column="25">i<pos:position pos:line="95" pos:column="26"/></name><operator pos:line="95" pos:column="26">&lt;<pos:position pos:line="95" pos:column="30"/></operator><name pos:line="95" pos:column="27">acl_count<pos:position pos:line="95" pos:column="36"/></name></expr>;<pos:position pos:line="95" pos:column="37"/></condition><incr><expr><name pos:line="95" pos:column="37">i<pos:position pos:line="95" pos:column="38"/></name><operator pos:line="95" pos:column="38">++<pos:position pos:line="95" pos:column="40"/></operator></expr></incr>)<pos:position pos:line="95" pos:column="41"/></control> <block pos:line="95" pos:column="42">{
			<expr_stmt><expr><name pos:line="96" pos:column="25">n_class_obj_perm<pos:position pos:line="96" pos:column="41"/></name> <operator pos:line="96" pos:column="42">|=<pos:position pos:line="96" pos:column="44"/></operator> <call><name pos:line="96" pos:column="45">hpux_get_needed_class_perm<pos:position pos:line="96" pos:column="71"/></name><argument_list pos:line="96" pos:column="71">(<argument><expr><operator pos:line="96" pos:column="72">(<pos:position pos:line="96" pos:column="73"/></operator><name pos:line="96" pos:column="73">aclp<pos:position pos:line="96" pos:column="77"/></name><operator pos:line="96" pos:column="77">+<pos:position pos:line="96" pos:column="78"/></operator><name pos:line="96" pos:column="78">i<pos:position pos:line="96" pos:column="79"/></name><operator pos:line="96" pos:column="79">)<pos:position pos:line="96" pos:column="80"/></operator></expr></argument>)<pos:position pos:line="96" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="82"/></expr_stmt>

			<if pos:line="98" pos:column="25">if<condition pos:line="98" pos:column="27">(<expr><name><name pos:line="98" pos:column="28">aclp<pos:position pos:line="98" pos:column="32"/></name><index pos:line="98" pos:column="32">[<expr><name pos:line="98" pos:column="33">i<pos:position pos:line="98" pos:column="34"/></name></expr>]<pos:position pos:line="98" pos:column="35"/></index></name><operator pos:line="98" pos:column="35">.<pos:position pos:line="98" pos:column="36"/></operator><name pos:line="98" pos:column="36">a_type<pos:position pos:line="98" pos:column="42"/></name> <operator pos:line="98" pos:column="43">==<pos:position pos:line="98" pos:column="45"/></operator> <name pos:line="98" pos:column="46">CLASS_OBJ<pos:position pos:line="98" pos:column="55"/></name></expr>)<pos:position pos:line="98" pos:column="56"/></condition><then pos:line="98" pos:column="56">
				<block type="pseudo"><expr_stmt><expr><name pos:line="99" pos:column="33">n_class_obj_index<pos:position pos:line="99" pos:column="50"/></name> <operator pos:line="99" pos:column="51">=<pos:position pos:line="99" pos:column="52"/></operator> <name pos:line="99" pos:column="53">i<pos:position pos:line="99" pos:column="54"/></name></expr>;<pos:position pos:line="99" pos:column="55"/></expr_stmt></block></then></if>
		}<pos:position pos:line="100" pos:column="18"/></block></for>
		<expr_stmt><expr><name><name pos:line="101" pos:column="17">aclp<pos:position pos:line="101" pos:column="21"/></name><index pos:line="101" pos:column="21">[<expr><name pos:line="101" pos:column="22">n_class_obj_index<pos:position pos:line="101" pos:column="39"/></name></expr>]<pos:position pos:line="101" pos:column="40"/></index></name><operator pos:line="101" pos:column="40">.<pos:position pos:line="101" pos:column="41"/></operator><name pos:line="101" pos:column="41">a_perm<pos:position pos:line="101" pos:column="47"/></name> <operator pos:line="101" pos:column="48">=<pos:position pos:line="101" pos:column="49"/></operator> <name pos:line="101" pos:column="50">n_class_obj_perm<pos:position pos:line="101" pos:column="66"/></name></expr>;<pos:position pos:line="101" pos:column="67"/></expr_stmt>
	}<pos:position pos:line="102" pos:column="10"/></block></then></if>

	<return pos:line="104" pos:column="9">return <expr><literal type="number" pos:line="104" pos:column="16">0<pos:position pos:line="104" pos:column="17"/></literal></expr>;<pos:position pos:line="104" pos:column="18"/></return>
<cpp:else pos:line="105" pos:column="1">#<cpp:directive pos:line="105" pos:column="2">else<pos:position pos:line="105" pos:column="6"/></cpp:directive></cpp:else>
	<return pos:line="106" pos:column="9">return <expr><call><name pos:line="106" pos:column="16">aclsort<pos:position pos:line="106" pos:column="23"/></name><argument_list pos:line="106" pos:column="23">(<argument><expr><name pos:line="106" pos:column="24">acl_count<pos:position pos:line="106" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="106" pos:column="35">calclass<pos:position pos:line="106" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="106" pos:column="45">aclp<pos:position pos:line="106" pos:column="49"/></name></expr></argument>)<pos:position pos:line="106" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="106" pos:column="51"/></return>
<cpp:endif pos:line="107" pos:column="1">#<cpp:directive pos:line="107" pos:column="2">endif<pos:position pos:line="107" pos:column="7"/></cpp:directive></cpp:endif>
}<pos:position pos:line="108" pos:column="2"/></block></function></unit>
