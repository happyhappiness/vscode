<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_function_694.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">start_daemon<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name pos:line="1" pos:column="25">int<pos:position pos:line="1" pos:column="28"/></name></type> <name pos:line="1" pos:column="29">fd<pos:position pos:line="1" pos:column="31"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="32"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">char<pos:position pos:line="3" pos:column="13"/></name></type> <name><name pos:line="3" pos:column="14">line<pos:position pos:line="3" pos:column="18"/></name><index pos:line="3" pos:column="18">[<expr><literal type="number" pos:line="3" pos:column="19">200<pos:position pos:line="3" pos:column="22"/></literal></expr>]<pos:position pos:line="3" pos:column="23"/></index></name></decl>;<pos:position pos:line="3" pos:column="24"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier></type><name pos:line="4" pos:column="15">motd<pos:position pos:line="4" pos:column="19"/></name></decl>;<pos:position pos:line="4" pos:column="20"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">i<pos:position pos:line="5" pos:column="14"/></name> <init pos:line="5" pos:column="15">= <expr><operator pos:line="5" pos:column="17">-<pos:position pos:line="5" pos:column="18"/></operator><literal type="number" pos:line="5" pos:column="18">1<pos:position pos:line="5" pos:column="19"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="20"/></decl_stmt>
	<decl_stmt><decl><specifier pos:line="6" pos:column="9">extern<pos:position pos:line="6" pos:column="15"/></specifier> <type><name pos:line="6" pos:column="16">char<pos:position pos:line="6" pos:column="20"/></name> <modifier pos:line="6" pos:column="21">*<pos:position pos:line="6" pos:column="22"/></modifier></type><name pos:line="6" pos:column="22">config_file<pos:position pos:line="6" pos:column="33"/></name></decl>;<pos:position pos:line="6" pos:column="34"/></decl_stmt>
	<decl_stmt><decl><specifier pos:line="7" pos:column="9">extern<pos:position pos:line="7" pos:column="15"/></specifier> <type><name pos:line="7" pos:column="16">int<pos:position pos:line="7" pos:column="19"/></name></type> <name pos:line="7" pos:column="20">remote_version<pos:position pos:line="7" pos:column="34"/></name></decl>;<pos:position pos:line="7" pos:column="35"/></decl_stmt>

	<if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><operator pos:line="9" pos:column="13">!<pos:position pos:line="9" pos:column="14"/></operator><call><name pos:line="9" pos:column="14">lp_load<pos:position pos:line="9" pos:column="21"/></name><argument_list pos:line="9" pos:column="21">(<argument><expr><name pos:line="9" pos:column="22">config_file<pos:position pos:line="9" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="9" pos:column="35">0<pos:position pos:line="9" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="9" pos:column="38"/></condition><then pos:line="9" pos:column="38"> <block pos:line="9" pos:column="39">{
		<expr_stmt><expr><call><name pos:line="10" pos:column="17">exit_cleanup<pos:position pos:line="10" pos:column="29"/></name><argument_list pos:line="10" pos:column="29">(<argument><expr><name pos:line="10" pos:column="30">RERR_SYNTAX<pos:position pos:line="10" pos:column="41"/></name></expr></argument>)<pos:position pos:line="10" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="43"/></expr_stmt>
	}<pos:position pos:line="11" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="13" pos:column="9">set_socket_options<pos:position pos:line="13" pos:column="27"/></name><argument_list pos:line="13" pos:column="27">(<argument><expr><name pos:line="13" pos:column="28">fd<pos:position pos:line="13" pos:column="30"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="13" pos:column="31">"SO_KEEPALIVE"<pos:position pos:line="13" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="47"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="14" pos:column="9">set_socket_options<pos:position pos:line="14" pos:column="27"/></name><argument_list pos:line="14" pos:column="27">(<argument><expr><name pos:line="14" pos:column="28">fd<pos:position pos:line="14" pos:column="30"/></name></expr></argument>,<argument><expr><call><name pos:line="14" pos:column="31">lp_socket_options<pos:position pos:line="14" pos:column="48"/></name><argument_list pos:line="14" pos:column="48">()<pos:position pos:line="14" pos:column="50"/></argument_list></call></expr></argument>)<pos:position pos:line="14" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="52"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="15" pos:column="9">set_nonblocking<pos:position pos:line="15" pos:column="24"/></name><argument_list pos:line="15" pos:column="24">(<argument><expr><name pos:line="15" pos:column="25">fd<pos:position pos:line="15" pos:column="27"/></name></expr></argument>)<pos:position pos:line="15" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="29"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="17" pos:column="9">io_printf<pos:position pos:line="17" pos:column="18"/></name><argument_list pos:line="17" pos:column="18">(<argument><expr><name pos:line="17" pos:column="19">fd<pos:position pos:line="17" pos:column="21"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="17" pos:column="22">"@RSYNCD: %d\n"<pos:position pos:line="17" pos:column="37"/></literal></expr></argument>, <argument><expr><name pos:line="17" pos:column="39">PROTOCOL_VERSION<pos:position pos:line="17" pos:column="55"/></name></expr></argument>)<pos:position pos:line="17" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="57"/></expr_stmt>

	<expr_stmt><expr><name pos:line="19" pos:column="9">motd<pos:position pos:line="19" pos:column="13"/></name> <operator pos:line="19" pos:column="14">=<pos:position pos:line="19" pos:column="15"/></operator> <call><name pos:line="19" pos:column="16">lp_motd_file<pos:position pos:line="19" pos:column="28"/></name><argument_list pos:line="19" pos:column="28">()<pos:position pos:line="19" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="31"/></expr_stmt>
	<if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><name pos:line="20" pos:column="13">motd<pos:position pos:line="20" pos:column="17"/></name> <operator pos:line="20" pos:column="18">&amp;&amp;<pos:position pos:line="20" pos:column="28"/></operator> <operator pos:line="20" pos:column="21">*<pos:position pos:line="20" pos:column="22"/></operator><name pos:line="20" pos:column="22">motd<pos:position pos:line="20" pos:column="26"/></name></expr>)<pos:position pos:line="20" pos:column="27"/></condition><then pos:line="20" pos:column="27"> <block pos:line="20" pos:column="28">{
		<decl_stmt><decl><type><name pos:line="21" pos:column="17">FILE<pos:position pos:line="21" pos:column="21"/></name> <modifier pos:line="21" pos:column="22">*<pos:position pos:line="21" pos:column="23"/></modifier></type><name pos:line="21" pos:column="23">f<pos:position pos:line="21" pos:column="24"/></name> <init pos:line="21" pos:column="25">= <expr><call><name pos:line="21" pos:column="27">fopen<pos:position pos:line="21" pos:column="32"/></name><argument_list pos:line="21" pos:column="32">(<argument><expr><name pos:line="21" pos:column="33">motd<pos:position pos:line="21" pos:column="37"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="21" pos:column="38">"r"<pos:position pos:line="21" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="42"/></argument_list></call></expr></init></decl>;<pos:position pos:line="21" pos:column="43"/></decl_stmt>
		<while pos:line="22" pos:column="17">while <condition pos:line="22" pos:column="23">(<expr><name pos:line="22" pos:column="24">f<pos:position pos:line="22" pos:column="25"/></name> <operator pos:line="22" pos:column="26">&amp;&amp;<pos:position pos:line="22" pos:column="36"/></operator> <operator pos:line="22" pos:column="29">!<pos:position pos:line="22" pos:column="30"/></operator><call><name pos:line="22" pos:column="30">feof<pos:position pos:line="22" pos:column="34"/></name><argument_list pos:line="22" pos:column="34">(<argument><expr><name pos:line="22" pos:column="35">f<pos:position pos:line="22" pos:column="36"/></name></expr></argument>)<pos:position pos:line="22" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="22" pos:column="38"/></condition> <block pos:line="22" pos:column="39">{
			<decl_stmt><decl><type><name pos:line="23" pos:column="25">int<pos:position pos:line="23" pos:column="28"/></name></type> <name pos:line="23" pos:column="29">len<pos:position pos:line="23" pos:column="32"/></name> <init pos:line="23" pos:column="33">= <expr><call><name pos:line="23" pos:column="35">fread<pos:position pos:line="23" pos:column="40"/></name><argument_list pos:line="23" pos:column="40">(<argument><expr><name pos:line="23" pos:column="41">line<pos:position pos:line="23" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="23" pos:column="47">1<pos:position pos:line="23" pos:column="48"/></literal></expr></argument>, <argument><expr><sizeof pos:line="23" pos:column="50">sizeof<argument_list pos:line="23" pos:column="56">(<argument><expr><name pos:line="23" pos:column="57">line<pos:position pos:line="23" pos:column="61"/></name></expr></argument>)<pos:position pos:line="23" pos:column="62"/></argument_list></sizeof><operator pos:line="23" pos:column="62">-<pos:position pos:line="23" pos:column="63"/></operator><literal type="number" pos:line="23" pos:column="63">1<pos:position pos:line="23" pos:column="64"/></literal></expr></argument>, <argument><expr><name pos:line="23" pos:column="66">f<pos:position pos:line="23" pos:column="67"/></name></expr></argument>)<pos:position pos:line="23" pos:column="68"/></argument_list></call></expr></init></decl>;<pos:position pos:line="23" pos:column="69"/></decl_stmt>
			<if pos:line="24" pos:column="25">if <condition pos:line="24" pos:column="28">(<expr><name pos:line="24" pos:column="29">len<pos:position pos:line="24" pos:column="32"/></name> <operator pos:line="24" pos:column="33">&gt;<pos:position pos:line="24" pos:column="37"/></operator> <literal type="number" pos:line="24" pos:column="35">0<pos:position pos:line="24" pos:column="36"/></literal></expr>)<pos:position pos:line="24" pos:column="37"/></condition><then pos:line="24" pos:column="37"> <block pos:line="24" pos:column="38">{
				<expr_stmt><expr><name><name pos:line="25" pos:column="33">line<pos:position pos:line="25" pos:column="37"/></name><index pos:line="25" pos:column="37">[<expr><name pos:line="25" pos:column="38">len<pos:position pos:line="25" pos:column="41"/></name></expr>]<pos:position pos:line="25" pos:column="42"/></index></name> <operator pos:line="25" pos:column="43">=<pos:position pos:line="25" pos:column="44"/></operator> <literal type="number" pos:line="25" pos:column="45">0<pos:position pos:line="25" pos:column="46"/></literal></expr>;<pos:position pos:line="25" pos:column="47"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="26" pos:column="33">io_printf<pos:position pos:line="26" pos:column="42"/></name><argument_list pos:line="26" pos:column="42">(<argument><expr><name pos:line="26" pos:column="43">fd<pos:position pos:line="26" pos:column="45"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="26" pos:column="46">"%s"<pos:position pos:line="26" pos:column="50"/></literal></expr></argument>, <argument><expr><name pos:line="26" pos:column="52">line<pos:position pos:line="26" pos:column="56"/></name></expr></argument>)<pos:position pos:line="26" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="58"/></expr_stmt>
			}<pos:position pos:line="27" pos:column="26"/></block></then></if>
		}<pos:position pos:line="28" pos:column="18"/></block></while>
		<if pos:line="29" pos:column="17">if <condition pos:line="29" pos:column="20">(<expr><name pos:line="29" pos:column="21">f<pos:position pos:line="29" pos:column="22"/></name></expr>)<pos:position pos:line="29" pos:column="23"/></condition><then pos:line="29" pos:column="23"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="29" pos:column="24">fclose<pos:position pos:line="29" pos:column="30"/></name><argument_list pos:line="29" pos:column="30">(<argument><expr><name pos:line="29" pos:column="31">f<pos:position pos:line="29" pos:column="32"/></name></expr></argument>)<pos:position pos:line="29" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="34"/></expr_stmt></block></then></if>
		<expr_stmt><expr><call><name pos:line="30" pos:column="17">io_printf<pos:position pos:line="30" pos:column="26"/></name><argument_list pos:line="30" pos:column="26">(<argument><expr><name pos:line="30" pos:column="27">fd<pos:position pos:line="30" pos:column="29"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="30" pos:column="30">"\n"<pos:position pos:line="30" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="36"/></expr_stmt>
	}<pos:position pos:line="31" pos:column="10"/></block></then></if>

	<if pos:line="33" pos:column="9">if <condition pos:line="33" pos:column="12">(<expr><operator pos:line="33" pos:column="13">!<pos:position pos:line="33" pos:column="14"/></operator><call><name pos:line="33" pos:column="14">read_line<pos:position pos:line="33" pos:column="23"/></name><argument_list pos:line="33" pos:column="23">(<argument><expr><name pos:line="33" pos:column="24">fd<pos:position pos:line="33" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="28">line<pos:position pos:line="33" pos:column="32"/></name></expr></argument>, <argument><expr><sizeof pos:line="33" pos:column="34">sizeof<argument_list pos:line="33" pos:column="40">(<argument><expr><name pos:line="33" pos:column="41">line<pos:position pos:line="33" pos:column="45"/></name></expr></argument>)<pos:position pos:line="33" pos:column="46"/></argument_list></sizeof><operator pos:line="33" pos:column="46">-<pos:position pos:line="33" pos:column="47"/></operator><literal type="number" pos:line="33" pos:column="47">1<pos:position pos:line="33" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="33" pos:column="50"/></condition><then pos:line="33" pos:column="50"> <block pos:line="33" pos:column="51">{
		<return pos:line="34" pos:column="17">return <expr><operator pos:line="34" pos:column="24">-<pos:position pos:line="34" pos:column="25"/></operator><literal type="number" pos:line="34" pos:column="25">1<pos:position pos:line="34" pos:column="26"/></literal></expr>;<pos:position pos:line="34" pos:column="27"/></return>
	}<pos:position pos:line="35" pos:column="10"/></block></then></if>

	<if pos:line="37" pos:column="9">if <condition pos:line="37" pos:column="12">(<expr><call><name pos:line="37" pos:column="13">sscanf<pos:position pos:line="37" pos:column="19"/></name><argument_list pos:line="37" pos:column="19">(<argument><expr><name pos:line="37" pos:column="20">line<pos:position pos:line="37" pos:column="24"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="37" pos:column="25">"@RSYNCD: %d"<pos:position pos:line="37" pos:column="38"/></literal></expr></argument>, <argument><expr><operator pos:line="37" pos:column="40">&amp;<pos:position pos:line="37" pos:column="45"/></operator><name pos:line="37" pos:column="41">remote_version<pos:position pos:line="37" pos:column="55"/></name></expr></argument>)<pos:position pos:line="37" pos:column="56"/></argument_list></call> <operator pos:line="37" pos:column="57">!=<pos:position pos:line="37" pos:column="59"/></operator> <literal type="number" pos:line="37" pos:column="60">1<pos:position pos:line="37" pos:column="61"/></literal></expr>)<pos:position pos:line="37" pos:column="62"/></condition><then pos:line="37" pos:column="62"> <block pos:line="37" pos:column="63">{
		<expr_stmt><expr><call><name pos:line="38" pos:column="17">io_printf<pos:position pos:line="38" pos:column="26"/></name><argument_list pos:line="38" pos:column="26">(<argument><expr><name pos:line="38" pos:column="27">fd<pos:position pos:line="38" pos:column="29"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="38" pos:column="30">"@ERROR: protocol startup error\n"<pos:position pos:line="38" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="38" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="66"/></expr_stmt>
		<return pos:line="39" pos:column="17">return <expr><operator pos:line="39" pos:column="24">-<pos:position pos:line="39" pos:column="25"/></operator><literal type="number" pos:line="39" pos:column="25">1<pos:position pos:line="39" pos:column="26"/></literal></expr>;<pos:position pos:line="39" pos:column="27"/></return>
	}<pos:position pos:line="40" pos:column="10"/></block></then></if>	

	<while pos:line="42" pos:column="9">while <condition pos:line="42" pos:column="15">(<expr><name pos:line="42" pos:column="16">i<pos:position pos:line="42" pos:column="17"/></name> <operator pos:line="42" pos:column="18">==<pos:position pos:line="42" pos:column="20"/></operator> <operator pos:line="42" pos:column="21">-<pos:position pos:line="42" pos:column="22"/></operator><literal type="number" pos:line="42" pos:column="22">1<pos:position pos:line="42" pos:column="23"/></literal></expr>)<pos:position pos:line="42" pos:column="24"/></condition> <block pos:line="42" pos:column="25">{
		<expr_stmt><expr><name><name pos:line="43" pos:column="17">line<pos:position pos:line="43" pos:column="21"/></name><index pos:line="43" pos:column="21">[<expr><literal type="number" pos:line="43" pos:column="22">0<pos:position pos:line="43" pos:column="23"/></literal></expr>]<pos:position pos:line="43" pos:column="24"/></index></name> <operator pos:line="43" pos:column="25">=<pos:position pos:line="43" pos:column="26"/></operator> <literal type="number" pos:line="43" pos:column="27">0<pos:position pos:line="43" pos:column="28"/></literal></expr>;<pos:position pos:line="43" pos:column="29"/></expr_stmt>
		<if pos:line="44" pos:column="17">if <condition pos:line="44" pos:column="20">(<expr><operator pos:line="44" pos:column="21">!<pos:position pos:line="44" pos:column="22"/></operator><call><name pos:line="44" pos:column="22">read_line<pos:position pos:line="44" pos:column="31"/></name><argument_list pos:line="44" pos:column="31">(<argument><expr><name pos:line="44" pos:column="32">fd<pos:position pos:line="44" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="36">line<pos:position pos:line="44" pos:column="40"/></name></expr></argument>, <argument><expr><sizeof pos:line="44" pos:column="42">sizeof<argument_list pos:line="44" pos:column="48">(<argument><expr><name pos:line="44" pos:column="49">line<pos:position pos:line="44" pos:column="53"/></name></expr></argument>)<pos:position pos:line="44" pos:column="54"/></argument_list></sizeof><operator pos:line="44" pos:column="54">-<pos:position pos:line="44" pos:column="55"/></operator><literal type="number" pos:line="44" pos:column="55">1<pos:position pos:line="44" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="57"/></argument_list></call></expr>)<pos:position pos:line="44" pos:column="58"/></condition><then pos:line="44" pos:column="58"> <block pos:line="44" pos:column="59">{
			<return pos:line="45" pos:column="25">return <expr><operator pos:line="45" pos:column="32">-<pos:position pos:line="45" pos:column="33"/></operator><literal type="number" pos:line="45" pos:column="33">1<pos:position pos:line="45" pos:column="34"/></literal></expr>;<pos:position pos:line="45" pos:column="35"/></return>
		}<pos:position pos:line="46" pos:column="18"/></block></then></if>

		<if pos:line="48" pos:column="17">if <condition pos:line="48" pos:column="20">(<expr><operator pos:line="48" pos:column="21">!<pos:position pos:line="48" pos:column="22"/></operator><operator pos:line="48" pos:column="22">*<pos:position pos:line="48" pos:column="23"/></operator><name pos:line="48" pos:column="23">line<pos:position pos:line="48" pos:column="27"/></name> <operator pos:line="48" pos:column="28">||<pos:position pos:line="48" pos:column="30"/></operator> <call><name pos:line="48" pos:column="31">strcmp<pos:position pos:line="48" pos:column="37"/></name><argument_list pos:line="48" pos:column="37">(<argument><expr><name pos:line="48" pos:column="38">line<pos:position pos:line="48" pos:column="42"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="48" pos:column="43">"#list"<pos:position pos:line="48" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="48" pos:column="51"/></argument_list></call><operator pos:line="48" pos:column="51">==<pos:position pos:line="48" pos:column="53"/></operator><literal type="number" pos:line="48" pos:column="53">0<pos:position pos:line="48" pos:column="54"/></literal></expr>)<pos:position pos:line="48" pos:column="55"/></condition><then pos:line="48" pos:column="55"> <block pos:line="48" pos:column="56">{
			<expr_stmt><expr><call><name pos:line="49" pos:column="25">send_listing<pos:position pos:line="49" pos:column="37"/></name><argument_list pos:line="49" pos:column="37">(<argument><expr><name pos:line="49" pos:column="38">fd<pos:position pos:line="49" pos:column="40"/></name></expr></argument>)<pos:position pos:line="49" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="42"/></expr_stmt>
			<return pos:line="50" pos:column="25">return <expr><operator pos:line="50" pos:column="32">-<pos:position pos:line="50" pos:column="33"/></operator><literal type="number" pos:line="50" pos:column="33">1<pos:position pos:line="50" pos:column="34"/></literal></expr>;<pos:position pos:line="50" pos:column="35"/></return>
		}<pos:position pos:line="51" pos:column="18"/></block></then></if> 

		<if pos:line="53" pos:column="17">if <condition pos:line="53" pos:column="20">(<expr><operator pos:line="53" pos:column="21">*<pos:position pos:line="53" pos:column="22"/></operator><name pos:line="53" pos:column="22">line<pos:position pos:line="53" pos:column="26"/></name> <operator pos:line="53" pos:column="27">==<pos:position pos:line="53" pos:column="29"/></operator> <literal type="char" pos:line="53" pos:column="30">'#'<pos:position pos:line="53" pos:column="33"/></literal></expr>)<pos:position pos:line="53" pos:column="34"/></condition><then pos:line="53" pos:column="34"> <block pos:line="53" pos:column="35">{
			<comment type="block" pos:line="54" pos:column="25">/* it's some sort of command that I don't understand */</comment>
			<expr_stmt><expr><call><name pos:line="55" pos:column="25">io_printf<pos:position pos:line="55" pos:column="34"/></name><argument_list pos:line="55" pos:column="34">(<argument><expr><name pos:line="55" pos:column="35">fd<pos:position pos:line="55" pos:column="37"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="55" pos:column="38">"@ERROR: Unknown command '%s'\n"<pos:position pos:line="55" pos:column="70"/></literal></expr></argument>, <argument><expr><name pos:line="55" pos:column="72">line<pos:position pos:line="55" pos:column="76"/></name></expr></argument>)<pos:position pos:line="55" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="78"/></expr_stmt>
			<return pos:line="56" pos:column="25">return <expr><operator pos:line="56" pos:column="32">-<pos:position pos:line="56" pos:column="33"/></operator><literal type="number" pos:line="56" pos:column="33">1<pos:position pos:line="56" pos:column="34"/></literal></expr>;<pos:position pos:line="56" pos:column="35"/></return>
		}<pos:position pos:line="57" pos:column="18"/></block></then></if>

		<expr_stmt><expr><name pos:line="59" pos:column="17">i<pos:position pos:line="59" pos:column="18"/></name> <operator pos:line="59" pos:column="19">=<pos:position pos:line="59" pos:column="20"/></operator> <call><name pos:line="59" pos:column="21">lp_number<pos:position pos:line="59" pos:column="30"/></name><argument_list pos:line="59" pos:column="30">(<argument><expr><name pos:line="59" pos:column="31">line<pos:position pos:line="59" pos:column="35"/></name></expr></argument>)<pos:position pos:line="59" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="37"/></expr_stmt>
		<if pos:line="60" pos:column="17">if <condition pos:line="60" pos:column="20">(<expr><name pos:line="60" pos:column="21">i<pos:position pos:line="60" pos:column="22"/></name> <operator pos:line="60" pos:column="23">==<pos:position pos:line="60" pos:column="25"/></operator> <operator pos:line="60" pos:column="26">-<pos:position pos:line="60" pos:column="27"/></operator><literal type="number" pos:line="60" pos:column="27">1<pos:position pos:line="60" pos:column="28"/></literal></expr>)<pos:position pos:line="60" pos:column="29"/></condition><then pos:line="60" pos:column="29"> <block pos:line="60" pos:column="30">{
			<expr_stmt><expr><call><name pos:line="61" pos:column="25">io_printf<pos:position pos:line="61" pos:column="34"/></name><argument_list pos:line="61" pos:column="34">(<argument><expr><name pos:line="61" pos:column="35">fd<pos:position pos:line="61" pos:column="37"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="61" pos:column="38">"@ERROR: Unknown module '%s'\n"<pos:position pos:line="61" pos:column="69"/></literal></expr></argument>, <argument><expr><name pos:line="61" pos:column="71">line<pos:position pos:line="61" pos:column="75"/></name></expr></argument>)<pos:position pos:line="61" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="77"/></expr_stmt>
			<return pos:line="62" pos:column="25">return <expr><operator pos:line="62" pos:column="32">-<pos:position pos:line="62" pos:column="33"/></operator><literal type="number" pos:line="62" pos:column="33">1<pos:position pos:line="62" pos:column="34"/></literal></expr>;<pos:position pos:line="62" pos:column="35"/></return>
		}<pos:position pos:line="63" pos:column="18"/></block></then></if>
	}<pos:position pos:line="64" pos:column="10"/></block></while>

	<return pos:line="66" pos:column="9">return <expr><call><name pos:line="66" pos:column="16">rsync_module<pos:position pos:line="66" pos:column="28"/></name><argument_list pos:line="66" pos:column="28">(<argument><expr><name pos:line="66" pos:column="29">fd<pos:position pos:line="66" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="33">i<pos:position pos:line="66" pos:column="34"/></name></expr></argument>)<pos:position pos:line="66" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="36"/></return>
}<pos:position pos:line="67" pos:column="2"/></block></function></unit>
