<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_159_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">read_a_msg<pos:position pos:line="1" pos:column="23"/></name><parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><name pos:line="1" pos:column="24">void<pos:position pos:line="1" pos:column="28"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="29"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">char<pos:position pos:line="3" pos:column="13"/></name></type> <name><name pos:line="3" pos:column="14">data<pos:position pos:line="3" pos:column="18"/></name><index pos:line="3" pos:column="18">[<expr><name pos:line="3" pos:column="19">BIGPATHBUFLEN<pos:position pos:line="3" pos:column="32"/></name></expr>]<pos:position pos:line="3" pos:column="33"/></index></name></decl>;<pos:position pos:line="3" pos:column="34"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">tag<pos:position pos:line="4" pos:column="16"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="18">val<pos:position pos:line="4" pos:column="21"/></name></decl>;<pos:position pos:line="4" pos:column="22"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">size_t<pos:position pos:line="5" pos:column="15"/></name></type> <name pos:line="5" pos:column="16">msg_bytes<pos:position pos:line="5" pos:column="25"/></name></decl>;<pos:position pos:line="5" pos:column="26"/></decl_stmt>

	<comment type="block" pos:line="7" pos:column="9">/* This ensures that perform_io() does not try to do any message reading
	 * until we've read all of the data for this message.  We should also
	 * try to avoid calling things that will cause data to be written via
	 * perform_io() prior to this being reset to 1. */</comment>
	<expr_stmt><expr><name><name pos:line="11" pos:column="9">iobuf<pos:position pos:line="11" pos:column="14"/></name><operator pos:line="11" pos:column="14">.<pos:position pos:line="11" pos:column="15"/></operator><name pos:line="11" pos:column="15">in_multiplexed<pos:position pos:line="11" pos:column="29"/></name></name> <operator pos:line="11" pos:column="30">=<pos:position pos:line="11" pos:column="31"/></operator> <operator pos:line="11" pos:column="32">-<pos:position pos:line="11" pos:column="33"/></operator><literal type="number" pos:line="11" pos:column="33">1<pos:position pos:line="11" pos:column="34"/></literal></expr>;<pos:position pos:line="11" pos:column="35"/></expr_stmt>

	<expr_stmt><expr><name pos:line="13" pos:column="9">tag<pos:position pos:line="13" pos:column="12"/></name> <operator pos:line="13" pos:column="13">=<pos:position pos:line="13" pos:column="14"/></operator> <call><name pos:line="13" pos:column="15">raw_read_int<pos:position pos:line="13" pos:column="27"/></name><argument_list pos:line="13" pos:column="27">()<pos:position pos:line="13" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="30"/></expr_stmt>

	<expr_stmt><expr><name pos:line="15" pos:column="9">msg_bytes<pos:position pos:line="15" pos:column="18"/></name> <operator pos:line="15" pos:column="19">=<pos:position pos:line="15" pos:column="20"/></operator> <name pos:line="15" pos:column="21">tag<pos:position pos:line="15" pos:column="24"/></name> <operator pos:line="15" pos:column="25">&amp;<pos:position pos:line="15" pos:column="30"/></operator> <literal type="number" pos:line="15" pos:column="27">0xFFFFFF<pos:position pos:line="15" pos:column="35"/></literal></expr>;<pos:position pos:line="15" pos:column="36"/></expr_stmt>
	<expr_stmt><expr><name pos:line="16" pos:column="9">tag<pos:position pos:line="16" pos:column="12"/></name> <operator pos:line="16" pos:column="13">=<pos:position pos:line="16" pos:column="14"/></operator> <operator pos:line="16" pos:column="15">(<pos:position pos:line="16" pos:column="16"/></operator><name pos:line="16" pos:column="16">tag<pos:position pos:line="16" pos:column="19"/></name> <operator pos:line="16" pos:column="20">&gt;&gt;<pos:position pos:line="16" pos:column="25"/></operator> <literal type="number" pos:line="16" pos:column="23">24<pos:position pos:line="16" pos:column="25"/></literal><operator pos:line="16" pos:column="25">)<pos:position pos:line="16" pos:column="26"/></operator> <operator pos:line="16" pos:column="27">-<pos:position pos:line="16" pos:column="28"/></operator> <name pos:line="16" pos:column="29">MPLEX_BASE<pos:position pos:line="16" pos:column="39"/></name></expr>;<pos:position pos:line="16" pos:column="40"/></expr_stmt>

	<if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><call><name pos:line="18" pos:column="13">DEBUG_GTE<pos:position pos:line="18" pos:column="22"/></name><argument_list pos:line="18" pos:column="22">(<argument><expr><name pos:line="18" pos:column="23">IO<pos:position pos:line="18" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="18" pos:column="27">1<pos:position pos:line="18" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="29"/></argument_list></call> <operator pos:line="18" pos:column="30">&amp;&amp;<pos:position pos:line="18" pos:column="40"/></operator> <name pos:line="18" pos:column="33">msgs2stderr<pos:position pos:line="18" pos:column="44"/></name></expr>)<pos:position pos:line="18" pos:column="45"/></condition><then pos:line="18" pos:column="45">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="19" pos:column="17">rprintf<pos:position pos:line="19" pos:column="24"/></name><argument_list pos:line="19" pos:column="24">(<argument><expr><name pos:line="19" pos:column="25">FINFO<pos:position pos:line="19" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="32">"[%s] got msg=%d, len=%ld\n"<pos:position pos:line="19" pos:column="60"/></literal></expr></argument>, <argument><expr><call><name pos:line="19" pos:column="62">who_am_i<pos:position pos:line="19" pos:column="70"/></name><argument_list pos:line="19" pos:column="70">()<pos:position pos:line="19" pos:column="72"/></argument_list></call></expr></argument>, <argument><expr><operator pos:line="19" pos:column="74">(<pos:position pos:line="19" pos:column="75"/></operator><name pos:line="19" pos:column="75">int<pos:position pos:line="19" pos:column="78"/></name><operator pos:line="19" pos:column="78">)<pos:position pos:line="19" pos:column="79"/></operator><name pos:line="19" pos:column="79">tag<pos:position pos:line="19" pos:column="82"/></name></expr></argument>, <argument><expr><operator pos:line="19" pos:column="84">(<pos:position pos:line="19" pos:column="85"/></operator><name pos:line="19" pos:column="85">long<pos:position pos:line="19" pos:column="89"/></name><operator pos:line="19" pos:column="89">)<pos:position pos:line="19" pos:column="90"/></operator><name pos:line="19" pos:column="90">msg_bytes<pos:position pos:line="19" pos:column="99"/></name></expr></argument>)<pos:position pos:line="19" pos:column="100"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="101"/></expr_stmt></block></then></if>

	<switch pos:line="21" pos:column="9">switch <condition pos:line="21" pos:column="16">(<expr><name pos:line="21" pos:column="17">tag<pos:position pos:line="21" pos:column="20"/></name></expr>)<pos:position pos:line="21" pos:column="21"/></condition> <block pos:line="21" pos:column="22">{
	<case pos:line="22" pos:column="9">case <expr><name pos:line="22" pos:column="14">MSG_DATA<pos:position pos:line="22" pos:column="22"/></name></expr>:<pos:position pos:line="22" pos:column="23"/></case>
		<expr_stmt><expr><call><name pos:line="23" pos:column="17">assert<pos:position pos:line="23" pos:column="23"/></name><argument_list pos:line="23" pos:column="23">(<argument><expr><name><name pos:line="23" pos:column="24">iobuf<pos:position pos:line="23" pos:column="29"/></name><operator pos:line="23" pos:column="29">.<pos:position pos:line="23" pos:column="30"/></operator><name pos:line="23" pos:column="30">raw_input_ends_before<pos:position pos:line="23" pos:column="51"/></name></name> <operator pos:line="23" pos:column="52">==<pos:position pos:line="23" pos:column="54"/></operator> <literal type="number" pos:line="23" pos:column="55">0<pos:position pos:line="23" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="58"/></expr_stmt>
		<comment type="block" pos:line="24" pos:column="17">/* Though this does not yet read the data, we do mark where in
		 * the buffer the msg data will end once it is read.  It is
		 * possible that this points off the end of the buffer, in
		 * which case the gradual reading of the input stream will
		 * cause this value to wrap around and eventually become real. */</comment>
		<if pos:line="29" pos:column="17">if <condition pos:line="29" pos:column="20">(<expr><name pos:line="29" pos:column="21">msg_bytes<pos:position pos:line="29" pos:column="30"/></name></expr>)<pos:position pos:line="29" pos:column="31"/></condition><then pos:line="29" pos:column="31">
			<block type="pseudo"><expr_stmt><expr><name><name pos:line="30" pos:column="25">iobuf<pos:position pos:line="30" pos:column="30"/></name><operator pos:line="30" pos:column="30">.<pos:position pos:line="30" pos:column="31"/></operator><name pos:line="30" pos:column="31">raw_input_ends_before<pos:position pos:line="30" pos:column="52"/></name></name> <operator pos:line="30" pos:column="53">=<pos:position pos:line="30" pos:column="54"/></operator> <name><name pos:line="30" pos:column="55">iobuf<pos:position pos:line="30" pos:column="60"/></name><operator pos:line="30" pos:column="60">.<pos:position pos:line="30" pos:column="61"/></operator><name pos:line="30" pos:column="61">in<pos:position pos:line="30" pos:column="63"/></name><operator pos:line="30" pos:column="63">.<pos:position pos:line="30" pos:column="64"/></operator><name pos:line="30" pos:column="64">pos<pos:position pos:line="30" pos:column="67"/></name></name> <operator pos:line="30" pos:column="68">+<pos:position pos:line="30" pos:column="69"/></operator> <name pos:line="30" pos:column="70">msg_bytes<pos:position pos:line="30" pos:column="79"/></name></expr>;<pos:position pos:line="30" pos:column="80"/></expr_stmt></block></then></if>
		<expr_stmt><expr><name><name pos:line="31" pos:column="17">iobuf<pos:position pos:line="31" pos:column="22"/></name><operator pos:line="31" pos:column="22">.<pos:position pos:line="31" pos:column="23"/></operator><name pos:line="31" pos:column="23">in_multiplexed<pos:position pos:line="31" pos:column="37"/></name></name> <operator pos:line="31" pos:column="38">=<pos:position pos:line="31" pos:column="39"/></operator> <literal type="number" pos:line="31" pos:column="40">1<pos:position pos:line="31" pos:column="41"/></literal></expr>;<pos:position pos:line="31" pos:column="42"/></expr_stmt>
		<break pos:line="32" pos:column="17">break;<pos:position pos:line="32" pos:column="23"/></break>
	<case pos:line="33" pos:column="9">case <expr><name pos:line="33" pos:column="14">MSG_STATS<pos:position pos:line="33" pos:column="23"/></name></expr>:<pos:position pos:line="33" pos:column="24"/></case>
		<if pos:line="34" pos:column="17">if <condition pos:line="34" pos:column="20">(<expr><name pos:line="34" pos:column="21">msg_bytes<pos:position pos:line="34" pos:column="30"/></name> <operator pos:line="34" pos:column="31">!=<pos:position pos:line="34" pos:column="33"/></operator> <sizeof pos:line="34" pos:column="34">sizeof <name><name pos:line="34" pos:column="41">stats<pos:position pos:line="34" pos:column="46"/></name><operator pos:line="34" pos:column="46">.<pos:position pos:line="34" pos:column="47"/></operator><name pos:line="34" pos:column="47">total_read<pos:position pos:line="34" pos:column="57"/></name></name></sizeof> <operator pos:line="34" pos:column="58">||<pos:position pos:line="34" pos:column="60"/></operator> <operator pos:line="34" pos:column="61">!<pos:position pos:line="34" pos:column="62"/></operator><name pos:line="34" pos:column="62">am_generator<pos:position pos:line="34" pos:column="74"/></name></expr>)<pos:position pos:line="34" pos:column="75"/></condition><then pos:line="34" pos:column="75">
			<block type="pseudo"><goto pos:line="35" pos:column="25">goto <name pos:line="35" pos:column="30">invalid_msg<pos:position pos:line="35" pos:column="41"/></name>;<pos:position pos:line="35" pos:column="42"/></goto></block></then></if>
		<expr_stmt><expr><call><name pos:line="36" pos:column="17">raw_read_buf<pos:position pos:line="36" pos:column="29"/></name><argument_list pos:line="36" pos:column="29">(<argument><expr><operator pos:line="36" pos:column="30">(<pos:position pos:line="36" pos:column="31"/></operator><name pos:line="36" pos:column="31">char<pos:position pos:line="36" pos:column="35"/></name><operator pos:line="36" pos:column="35">*<pos:position pos:line="36" pos:column="36"/></operator><operator pos:line="36" pos:column="36">)<pos:position pos:line="36" pos:column="37"/></operator><operator pos:line="36" pos:column="37">&amp;<pos:position pos:line="36" pos:column="42"/></operator><name><name pos:line="36" pos:column="38">stats<pos:position pos:line="36" pos:column="43"/></name><operator pos:line="36" pos:column="43">.<pos:position pos:line="36" pos:column="44"/></operator><name pos:line="36" pos:column="44">total_read<pos:position pos:line="36" pos:column="54"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="36" pos:column="56">sizeof <name><name pos:line="36" pos:column="63">stats<pos:position pos:line="36" pos:column="68"/></name><operator pos:line="36" pos:column="68">.<pos:position pos:line="36" pos:column="69"/></operator><name pos:line="36" pos:column="69">total_read<pos:position pos:line="36" pos:column="79"/></name></name></sizeof></expr></argument>)<pos:position pos:line="36" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="81"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="37" pos:column="17">iobuf<pos:position pos:line="37" pos:column="22"/></name><operator pos:line="37" pos:column="22">.<pos:position pos:line="37" pos:column="23"/></operator><name pos:line="37" pos:column="23">in_multiplexed<pos:position pos:line="37" pos:column="37"/></name></name> <operator pos:line="37" pos:column="38">=<pos:position pos:line="37" pos:column="39"/></operator> <literal type="number" pos:line="37" pos:column="40">1<pos:position pos:line="37" pos:column="41"/></literal></expr>;<pos:position pos:line="37" pos:column="42"/></expr_stmt>
		<break pos:line="38" pos:column="17">break;<pos:position pos:line="38" pos:column="23"/></break>
	<case pos:line="39" pos:column="9">case <expr><name pos:line="39" pos:column="14">MSG_REDO<pos:position pos:line="39" pos:column="22"/></name></expr>:<pos:position pos:line="39" pos:column="23"/></case>
		<if pos:line="40" pos:column="17">if <condition pos:line="40" pos:column="20">(<expr><name pos:line="40" pos:column="21">msg_bytes<pos:position pos:line="40" pos:column="30"/></name> <operator pos:line="40" pos:column="31">!=<pos:position pos:line="40" pos:column="33"/></operator> <literal type="number" pos:line="40" pos:column="34">4<pos:position pos:line="40" pos:column="35"/></literal> <operator pos:line="40" pos:column="36">||<pos:position pos:line="40" pos:column="38"/></operator> <operator pos:line="40" pos:column="39">!<pos:position pos:line="40" pos:column="40"/></operator><name pos:line="40" pos:column="40">am_generator<pos:position pos:line="40" pos:column="52"/></name></expr>)<pos:position pos:line="40" pos:column="53"/></condition><then pos:line="40" pos:column="53">
			<block type="pseudo"><goto pos:line="41" pos:column="25">goto <name pos:line="41" pos:column="30">invalid_msg<pos:position pos:line="41" pos:column="41"/></name>;<pos:position pos:line="41" pos:column="42"/></goto></block></then></if>
		<expr_stmt><expr><name pos:line="42" pos:column="17">val<pos:position pos:line="42" pos:column="20"/></name> <operator pos:line="42" pos:column="21">=<pos:position pos:line="42" pos:column="22"/></operator> <call><name pos:line="42" pos:column="23">raw_read_int<pos:position pos:line="42" pos:column="35"/></name><argument_list pos:line="42" pos:column="35">()<pos:position pos:line="42" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="38"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="43" pos:column="17">iobuf<pos:position pos:line="43" pos:column="22"/></name><operator pos:line="43" pos:column="22">.<pos:position pos:line="43" pos:column="23"/></operator><name pos:line="43" pos:column="23">in_multiplexed<pos:position pos:line="43" pos:column="37"/></name></name> <operator pos:line="43" pos:column="38">=<pos:position pos:line="43" pos:column="39"/></operator> <literal type="number" pos:line="43" pos:column="40">1<pos:position pos:line="43" pos:column="41"/></literal></expr>;<pos:position pos:line="43" pos:column="42"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="44" pos:column="17">got_flist_entry_status<pos:position pos:line="44" pos:column="39"/></name><argument_list pos:line="44" pos:column="39">(<argument><expr><name pos:line="44" pos:column="40">FES_REDO<pos:position pos:line="44" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="50">val<pos:position pos:line="44" pos:column="53"/></name></expr></argument>)<pos:position pos:line="44" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="55"/></expr_stmt>
		<break pos:line="45" pos:column="17">break;<pos:position pos:line="45" pos:column="23"/></break>
	<case pos:line="46" pos:column="9">case <expr><name pos:line="46" pos:column="14">MSG_IO_ERROR<pos:position pos:line="46" pos:column="26"/></name></expr>:<pos:position pos:line="46" pos:column="27"/></case>
		<if pos:line="47" pos:column="17">if <condition pos:line="47" pos:column="20">(<expr><name pos:line="47" pos:column="21">msg_bytes<pos:position pos:line="47" pos:column="30"/></name> <operator pos:line="47" pos:column="31">!=<pos:position pos:line="47" pos:column="33"/></operator> <literal type="number" pos:line="47" pos:column="34">4<pos:position pos:line="47" pos:column="35"/></literal></expr>)<pos:position pos:line="47" pos:column="36"/></condition><then pos:line="47" pos:column="36">
			<block type="pseudo"><goto pos:line="48" pos:column="25">goto <name pos:line="48" pos:column="30">invalid_msg<pos:position pos:line="48" pos:column="41"/></name>;<pos:position pos:line="48" pos:column="42"/></goto></block></then></if>
		<expr_stmt><expr><name pos:line="49" pos:column="17">val<pos:position pos:line="49" pos:column="20"/></name> <operator pos:line="49" pos:column="21">=<pos:position pos:line="49" pos:column="22"/></operator> <call><name pos:line="49" pos:column="23">raw_read_int<pos:position pos:line="49" pos:column="35"/></name><argument_list pos:line="49" pos:column="35">()<pos:position pos:line="49" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="38"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="50" pos:column="17">iobuf<pos:position pos:line="50" pos:column="22"/></name><operator pos:line="50" pos:column="22">.<pos:position pos:line="50" pos:column="23"/></operator><name pos:line="50" pos:column="23">in_multiplexed<pos:position pos:line="50" pos:column="37"/></name></name> <operator pos:line="50" pos:column="38">=<pos:position pos:line="50" pos:column="39"/></operator> <literal type="number" pos:line="50" pos:column="40">1<pos:position pos:line="50" pos:column="41"/></literal></expr>;<pos:position pos:line="50" pos:column="42"/></expr_stmt>
		<expr_stmt><expr><name pos:line="51" pos:column="17">io_error<pos:position pos:line="51" pos:column="25"/></name> <operator pos:line="51" pos:column="26">|=<pos:position pos:line="51" pos:column="28"/></operator> <name pos:line="51" pos:column="29">val<pos:position pos:line="51" pos:column="32"/></name></expr>;<pos:position pos:line="51" pos:column="33"/></expr_stmt>
		<if pos:line="52" pos:column="17">if <condition pos:line="52" pos:column="20">(<expr><name pos:line="52" pos:column="21">am_receiver<pos:position pos:line="52" pos:column="32"/></name></expr>)<pos:position pos:line="52" pos:column="33"/></condition><then pos:line="52" pos:column="33">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="53" pos:column="25">send_msg_int<pos:position pos:line="53" pos:column="37"/></name><argument_list pos:line="53" pos:column="37">(<argument><expr><name pos:line="53" pos:column="38">MSG_IO_ERROR<pos:position pos:line="53" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="52">val<pos:position pos:line="53" pos:column="55"/></name></expr></argument>)<pos:position pos:line="53" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="57"/></expr_stmt></block></then></if>
		<break pos:line="54" pos:column="17">break;<pos:position pos:line="54" pos:column="23"/></break>
	<case pos:line="55" pos:column="9">case <expr><name pos:line="55" pos:column="14">MSG_IO_TIMEOUT<pos:position pos:line="55" pos:column="28"/></name></expr>:<pos:position pos:line="55" pos:column="29"/></case>
		<if pos:line="56" pos:column="17">if <condition pos:line="56" pos:column="20">(<expr><name pos:line="56" pos:column="21">msg_bytes<pos:position pos:line="56" pos:column="30"/></name> <operator pos:line="56" pos:column="31">!=<pos:position pos:line="56" pos:column="33"/></operator> <literal type="number" pos:line="56" pos:column="34">4<pos:position pos:line="56" pos:column="35"/></literal> <operator pos:line="56" pos:column="36">||<pos:position pos:line="56" pos:column="38"/></operator> <name pos:line="56" pos:column="39">am_server<pos:position pos:line="56" pos:column="48"/></name> <operator pos:line="56" pos:column="49">||<pos:position pos:line="56" pos:column="51"/></operator> <name pos:line="56" pos:column="52">am_generator<pos:position pos:line="56" pos:column="64"/></name></expr>)<pos:position pos:line="56" pos:column="65"/></condition><then pos:line="56" pos:column="65">
			<block type="pseudo"><goto pos:line="57" pos:column="25">goto <name pos:line="57" pos:column="30">invalid_msg<pos:position pos:line="57" pos:column="41"/></name>;<pos:position pos:line="57" pos:column="42"/></goto></block></then></if>
		<expr_stmt><expr><name pos:line="58" pos:column="17">val<pos:position pos:line="58" pos:column="20"/></name> <operator pos:line="58" pos:column="21">=<pos:position pos:line="58" pos:column="22"/></operator> <call><name pos:line="58" pos:column="23">raw_read_int<pos:position pos:line="58" pos:column="35"/></name><argument_list pos:line="58" pos:column="35">()<pos:position pos:line="58" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="38"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="59" pos:column="17">iobuf<pos:position pos:line="59" pos:column="22"/></name><operator pos:line="59" pos:column="22">.<pos:position pos:line="59" pos:column="23"/></operator><name pos:line="59" pos:column="23">in_multiplexed<pos:position pos:line="59" pos:column="37"/></name></name> <operator pos:line="59" pos:column="38">=<pos:position pos:line="59" pos:column="39"/></operator> <literal type="number" pos:line="59" pos:column="40">1<pos:position pos:line="59" pos:column="41"/></literal></expr>;<pos:position pos:line="59" pos:column="42"/></expr_stmt>
		<if pos:line="60" pos:column="17">if <condition pos:line="60" pos:column="20">(<expr><operator pos:line="60" pos:column="21">!<pos:position pos:line="60" pos:column="22"/></operator><name pos:line="60" pos:column="22">io_timeout<pos:position pos:line="60" pos:column="32"/></name> <operator pos:line="60" pos:column="33">||<pos:position pos:line="60" pos:column="35"/></operator> <name pos:line="60" pos:column="36">io_timeout<pos:position pos:line="60" pos:column="46"/></name> <operator pos:line="60" pos:column="47">&gt;<pos:position pos:line="60" pos:column="51"/></operator> <name pos:line="60" pos:column="49">val<pos:position pos:line="60" pos:column="52"/></name></expr>)<pos:position pos:line="60" pos:column="53"/></condition><then pos:line="60" pos:column="53"> <block pos:line="60" pos:column="54">{
			<if pos:line="61" pos:column="25">if <condition pos:line="61" pos:column="28">(<expr><call><name pos:line="61" pos:column="29">INFO_GTE<pos:position pos:line="61" pos:column="37"/></name><argument_list pos:line="61" pos:column="37">(<argument><expr><name pos:line="61" pos:column="38">MISC<pos:position pos:line="61" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="61" pos:column="44">2<pos:position pos:line="61" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="61" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="61" pos:column="47"/></condition><then pos:line="61" pos:column="47">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="62" pos:column="33">rprintf<pos:position pos:line="62" pos:column="40"/></name><argument_list pos:line="62" pos:column="40">(<argument><expr><name pos:line="62" pos:column="41">FINFO<pos:position pos:line="62" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="62" pos:column="48">"Setting --timeout=%d to match server\n"<pos:position pos:line="62" pos:column="88"/></literal></expr></argument>, <argument><expr><name pos:line="62" pos:column="90">val<pos:position pos:line="62" pos:column="93"/></name></expr></argument>)<pos:position pos:line="62" pos:column="94"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="95"/></expr_stmt></block></then></if>
			<expr_stmt><expr><call><name pos:line="63" pos:column="25">set_io_timeout<pos:position pos:line="63" pos:column="39"/></name><argument_list pos:line="63" pos:column="39">(<argument><expr><name pos:line="63" pos:column="40">val<pos:position pos:line="63" pos:column="43"/></name></expr></argument>)<pos:position pos:line="63" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="45"/></expr_stmt>
		}<pos:position pos:line="64" pos:column="18"/></block></then></if>
		<break pos:line="65" pos:column="17">break;<pos:position pos:line="65" pos:column="23"/></break>
	<case pos:line="66" pos:column="9">case <expr><name pos:line="66" pos:column="14">MSG_NOOP<pos:position pos:line="66" pos:column="22"/></name></expr>:<pos:position pos:line="66" pos:column="23"/></case>
		<comment type="block" pos:line="67" pos:column="17">/* Support protocol-30 keep-alive method. */</comment>
		<if pos:line="68" pos:column="17">if <condition pos:line="68" pos:column="20">(<expr><name pos:line="68" pos:column="21">msg_bytes<pos:position pos:line="68" pos:column="30"/></name> <operator pos:line="68" pos:column="31">!=<pos:position pos:line="68" pos:column="33"/></operator> <literal type="number" pos:line="68" pos:column="34">0<pos:position pos:line="68" pos:column="35"/></literal></expr>)<pos:position pos:line="68" pos:column="36"/></condition><then pos:line="68" pos:column="36">
			<block type="pseudo"><goto pos:line="69" pos:column="25">goto <name pos:line="69" pos:column="30">invalid_msg<pos:position pos:line="69" pos:column="41"/></name>;<pos:position pos:line="69" pos:column="42"/></goto></block></then></if>
		<expr_stmt><expr><name><name pos:line="70" pos:column="17">iobuf<pos:position pos:line="70" pos:column="22"/></name><operator pos:line="70" pos:column="22">.<pos:position pos:line="70" pos:column="23"/></operator><name pos:line="70" pos:column="23">in_multiplexed<pos:position pos:line="70" pos:column="37"/></name></name> <operator pos:line="70" pos:column="38">=<pos:position pos:line="70" pos:column="39"/></operator> <literal type="number" pos:line="70" pos:column="40">1<pos:position pos:line="70" pos:column="41"/></literal></expr>;<pos:position pos:line="70" pos:column="42"/></expr_stmt>
		<if pos:line="71" pos:column="17">if <condition pos:line="71" pos:column="20">(<expr><name pos:line="71" pos:column="21">am_sender<pos:position pos:line="71" pos:column="30"/></name></expr>)<pos:position pos:line="71" pos:column="31"/></condition><then pos:line="71" pos:column="31">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="72" pos:column="25">maybe_send_keepalive<pos:position pos:line="72" pos:column="45"/></name><argument_list pos:line="72" pos:column="45">(<argument><expr><call><name pos:line="72" pos:column="46">time<pos:position pos:line="72" pos:column="50"/></name><argument_list pos:line="72" pos:column="50">(<argument><expr><name pos:line="72" pos:column="51">NULL<pos:position pos:line="72" pos:column="55"/></name></expr></argument>)<pos:position pos:line="72" pos:column="56"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="72" pos:column="58">MSK_ALLOW_FLUSH<pos:position pos:line="72" pos:column="73"/></name></expr></argument>)<pos:position pos:line="72" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="75"/></expr_stmt></block></then></if>
		<break pos:line="73" pos:column="17">break;<pos:position pos:line="73" pos:column="23"/></break>
	<case pos:line="74" pos:column="9">case <expr><name pos:line="74" pos:column="14">MSG_DELETED<pos:position pos:line="74" pos:column="25"/></name></expr>:<pos:position pos:line="74" pos:column="26"/></case>
		<if pos:line="75" pos:column="17">if <condition pos:line="75" pos:column="20">(<expr><name pos:line="75" pos:column="21">msg_bytes<pos:position pos:line="75" pos:column="30"/></name> <operator pos:line="75" pos:column="31">&gt;=<pos:position pos:line="75" pos:column="36"/></operator> <sizeof pos:line="75" pos:column="34">sizeof <name pos:line="75" pos:column="41">data<pos:position pos:line="75" pos:column="45"/></name></sizeof></expr>)<pos:position pos:line="75" pos:column="46"/></condition><then pos:line="75" pos:column="46">
			<block type="pseudo"><goto pos:line="76" pos:column="25">goto <name pos:line="76" pos:column="30">overflow<pos:position pos:line="76" pos:column="38"/></name>;<pos:position pos:line="76" pos:column="39"/></goto></block></then></if>
		<if pos:line="77" pos:column="17">if <condition pos:line="77" pos:column="20">(<expr><name pos:line="77" pos:column="21">am_generator<pos:position pos:line="77" pos:column="33"/></name></expr>)<pos:position pos:line="77" pos:column="34"/></condition><then pos:line="77" pos:column="34"> <block pos:line="77" pos:column="35">{
			<expr_stmt><expr><call><name pos:line="78" pos:column="25">raw_read_buf<pos:position pos:line="78" pos:column="37"/></name><argument_list pos:line="78" pos:column="37">(<argument><expr><name pos:line="78" pos:column="38">data<pos:position pos:line="78" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="78" pos:column="44">msg_bytes<pos:position pos:line="78" pos:column="53"/></name></expr></argument>)<pos:position pos:line="78" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="55"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="79" pos:column="25">iobuf<pos:position pos:line="79" pos:column="30"/></name><operator pos:line="79" pos:column="30">.<pos:position pos:line="79" pos:column="31"/></operator><name pos:line="79" pos:column="31">in_multiplexed<pos:position pos:line="79" pos:column="45"/></name></name> <operator pos:line="79" pos:column="46">=<pos:position pos:line="79" pos:column="47"/></operator> <literal type="number" pos:line="79" pos:column="48">1<pos:position pos:line="79" pos:column="49"/></literal></expr>;<pos:position pos:line="79" pos:column="50"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="80" pos:column="25">send_msg<pos:position pos:line="80" pos:column="33"/></name><argument_list pos:line="80" pos:column="33">(<argument><expr><name pos:line="80" pos:column="34">MSG_DELETED<pos:position pos:line="80" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="80" pos:column="47">data<pos:position pos:line="80" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="80" pos:column="53">msg_bytes<pos:position pos:line="80" pos:column="62"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="80" pos:column="64">1<pos:position pos:line="80" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="80" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="67"/></expr_stmt>
			<break pos:line="81" pos:column="25">break;<pos:position pos:line="81" pos:column="31"/></break>
		}<pos:position pos:line="82" pos:column="18"/></block></then></if>
<cpp:ifdef pos:line="83" pos:column="1">#<cpp:directive pos:line="83" pos:column="2">ifdef<pos:position pos:line="83" pos:column="7"/></cpp:directive> <name pos:line="83" pos:column="8">ICONV_OPTION<pos:position pos:line="83" pos:column="20"/></name></cpp:ifdef>
		<if pos:line="84" pos:column="17">if <condition pos:line="84" pos:column="20">(<expr><name pos:line="84" pos:column="21">ic_recv<pos:position pos:line="84" pos:column="28"/></name> <operator pos:line="84" pos:column="29">!=<pos:position pos:line="84" pos:column="31"/></operator> <operator pos:line="84" pos:column="32">(<pos:position pos:line="84" pos:column="33"/></operator><name pos:line="84" pos:column="33">iconv_t<pos:position pos:line="84" pos:column="40"/></name><operator pos:line="84" pos:column="40">)<pos:position pos:line="84" pos:column="41"/></operator><operator pos:line="84" pos:column="41">-<pos:position pos:line="84" pos:column="42"/></operator><literal type="number" pos:line="84" pos:column="42">1<pos:position pos:line="84" pos:column="43"/></literal></expr>)<pos:position pos:line="84" pos:column="44"/></condition><then pos:line="84" pos:column="44"> <block pos:line="84" pos:column="45">{
			<decl_stmt><decl><type><name pos:line="85" pos:column="25">xbuf<pos:position pos:line="85" pos:column="29"/></name></type> <name pos:line="85" pos:column="30">outbuf<pos:position pos:line="85" pos:column="36"/></name></decl>, <decl><type ref="prev"/><name pos:line="85" pos:column="38">inbuf<pos:position pos:line="85" pos:column="43"/></name></decl>;<pos:position pos:line="85" pos:column="44"/></decl_stmt>
			<decl_stmt><decl><type><name pos:line="86" pos:column="25">char<pos:position pos:line="86" pos:column="29"/></name></type> <name><name pos:line="86" pos:column="30">ibuf<pos:position pos:line="86" pos:column="34"/></name><index pos:line="86" pos:column="34">[<expr><literal type="number" pos:line="86" pos:column="35">512<pos:position pos:line="86" pos:column="38"/></literal></expr>]<pos:position pos:line="86" pos:column="39"/></index></name></decl>;<pos:position pos:line="86" pos:column="40"/></decl_stmt>
			<decl_stmt><decl><type><name pos:line="87" pos:column="25">int<pos:position pos:line="87" pos:column="28"/></name></type> <name pos:line="87" pos:column="29">add_null<pos:position pos:line="87" pos:column="37"/></name> <init pos:line="87" pos:column="38">= <expr><literal type="number" pos:line="87" pos:column="40">0<pos:position pos:line="87" pos:column="41"/></literal></expr></init></decl>;<pos:position pos:line="87" pos:column="42"/></decl_stmt>
			<decl_stmt><decl><type><name pos:line="88" pos:column="25">int<pos:position pos:line="88" pos:column="28"/></name></type> <name pos:line="88" pos:column="29">flags<pos:position pos:line="88" pos:column="34"/></name> <init pos:line="88" pos:column="35">= <expr><name pos:line="88" pos:column="37">ICB_INCLUDE_BAD<pos:position pos:line="88" pos:column="52"/></name> <operator pos:line="88" pos:column="53">|<pos:position pos:line="88" pos:column="54"/></operator> <name pos:line="88" pos:column="55">ICB_INIT<pos:position pos:line="88" pos:column="63"/></name></expr></init></decl>;<pos:position pos:line="88" pos:column="64"/></decl_stmt>

			<expr_stmt><expr><call><name pos:line="90" pos:column="25">INIT_CONST_XBUF<pos:position pos:line="90" pos:column="40"/></name><argument_list pos:line="90" pos:column="40">(<argument><expr><name pos:line="90" pos:column="41">outbuf<pos:position pos:line="90" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="90" pos:column="49">data<pos:position pos:line="90" pos:column="53"/></name></expr></argument>)<pos:position pos:line="90" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="55"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="91" pos:column="25">INIT_XBUF<pos:position pos:line="91" pos:column="34"/></name><argument_list pos:line="91" pos:column="34">(<argument><expr><name pos:line="91" pos:column="35">inbuf<pos:position pos:line="91" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="91" pos:column="42">ibuf<pos:position pos:line="91" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="91" pos:column="48">0<pos:position pos:line="91" pos:column="49"/></literal></expr></argument>, <argument><expr><operator pos:line="91" pos:column="51">(<pos:position pos:line="91" pos:column="52"/></operator><name pos:line="91" pos:column="52">size_t<pos:position pos:line="91" pos:column="58"/></name><operator pos:line="91" pos:column="58">)<pos:position pos:line="91" pos:column="59"/></operator><operator pos:line="91" pos:column="59">-<pos:position pos:line="91" pos:column="60"/></operator><literal type="number" pos:line="91" pos:column="60">1<pos:position pos:line="91" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="91" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="63"/></expr_stmt>

			<while pos:line="93" pos:column="25">while <condition pos:line="93" pos:column="31">(<expr><name pos:line="93" pos:column="32">msg_bytes<pos:position pos:line="93" pos:column="41"/></name></expr>)<pos:position pos:line="93" pos:column="42"/></condition> <block pos:line="93" pos:column="43">{
				<decl_stmt><decl><type><name pos:line="94" pos:column="33">size_t<pos:position pos:line="94" pos:column="39"/></name></type> <name pos:line="94" pos:column="40">len<pos:position pos:line="94" pos:column="43"/></name> <init pos:line="94" pos:column="44">= <expr><ternary><condition><expr><name pos:line="94" pos:column="46">msg_bytes<pos:position pos:line="94" pos:column="55"/></name> <operator pos:line="94" pos:column="56">&gt;<pos:position pos:line="94" pos:column="60"/></operator> <sizeof pos:line="94" pos:column="58">sizeof <name pos:line="94" pos:column="65">ibuf<pos:position pos:line="94" pos:column="69"/></name></sizeof> <operator pos:line="94" pos:column="70">-<pos:position pos:line="94" pos:column="71"/></operator> <name><name pos:line="94" pos:column="72">inbuf<pos:position pos:line="94" pos:column="77"/></name><operator pos:line="94" pos:column="77">.<pos:position pos:line="94" pos:column="78"/></operator><name pos:line="94" pos:column="78">len<pos:position pos:line="94" pos:column="81"/></name></name></expr> ?<pos:position pos:line="94" pos:column="83"/></condition><then pos:line="94" pos:column="83"> <expr><sizeof pos:line="94" pos:column="84">sizeof <name pos:line="94" pos:column="91">ibuf<pos:position pos:line="94" pos:column="95"/></name></sizeof> <operator pos:line="94" pos:column="96">-<pos:position pos:line="94" pos:column="97"/></operator> <name><name pos:line="94" pos:column="98">inbuf<pos:position pos:line="94" pos:column="103"/></name><operator pos:line="94" pos:column="103">.<pos:position pos:line="94" pos:column="104"/></operator><name pos:line="94" pos:column="104">len<pos:position pos:line="94" pos:column="107"/></name></name></expr> <pos:position pos:line="94" pos:column="108"/></then><else pos:line="94" pos:column="108">: <expr><name pos:line="94" pos:column="110">msg_bytes<pos:position pos:line="94" pos:column="119"/></name></expr></else></ternary></expr></init></decl>;<pos:position pos:line="94" pos:column="120"/></decl_stmt>
				<expr_stmt><expr><call><name pos:line="95" pos:column="33">raw_read_buf<pos:position pos:line="95" pos:column="45"/></name><argument_list pos:line="95" pos:column="45">(<argument><expr><name pos:line="95" pos:column="46">ibuf<pos:position pos:line="95" pos:column="50"/></name> <operator pos:line="95" pos:column="51">+<pos:position pos:line="95" pos:column="52"/></operator> <name><name pos:line="95" pos:column="53">inbuf<pos:position pos:line="95" pos:column="58"/></name><operator pos:line="95" pos:column="58">.<pos:position pos:line="95" pos:column="59"/></operator><name pos:line="95" pos:column="59">len<pos:position pos:line="95" pos:column="62"/></name></name></expr></argument>, <argument><expr><name pos:line="95" pos:column="64">len<pos:position pos:line="95" pos:column="67"/></name></expr></argument>)<pos:position pos:line="95" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="69"/></expr_stmt>
				<expr_stmt><expr><name><name pos:line="96" pos:column="33">inbuf<pos:position pos:line="96" pos:column="38"/></name><operator pos:line="96" pos:column="38">.<pos:position pos:line="96" pos:column="39"/></operator><name pos:line="96" pos:column="39">pos<pos:position pos:line="96" pos:column="42"/></name></name> <operator pos:line="96" pos:column="43">=<pos:position pos:line="96" pos:column="44"/></operator> <literal type="number" pos:line="96" pos:column="45">0<pos:position pos:line="96" pos:column="46"/></literal></expr>;<pos:position pos:line="96" pos:column="47"/></expr_stmt>
				<expr_stmt><expr><name><name pos:line="97" pos:column="33">inbuf<pos:position pos:line="97" pos:column="38"/></name><operator pos:line="97" pos:column="38">.<pos:position pos:line="97" pos:column="39"/></operator><name pos:line="97" pos:column="39">len<pos:position pos:line="97" pos:column="42"/></name></name> <operator pos:line="97" pos:column="43">+=<pos:position pos:line="97" pos:column="45"/></operator> <name pos:line="97" pos:column="46">len<pos:position pos:line="97" pos:column="49"/></name></expr>;<pos:position pos:line="97" pos:column="50"/></expr_stmt>
				<if pos:line="98" pos:column="33">if <condition pos:line="98" pos:column="36">(<expr><operator pos:line="98" pos:column="37">!<pos:position pos:line="98" pos:column="38"/></operator><operator pos:line="98" pos:column="38">(<pos:position pos:line="98" pos:column="39"/></operator><name pos:line="98" pos:column="39">msg_bytes<pos:position pos:line="98" pos:column="48"/></name> <operator pos:line="98" pos:column="49">-=<pos:position pos:line="98" pos:column="51"/></operator> <name pos:line="98" pos:column="52">len<pos:position pos:line="98" pos:column="55"/></name><operator pos:line="98" pos:column="55">)<pos:position pos:line="98" pos:column="56"/></operator> <operator pos:line="98" pos:column="57">&amp;&amp;<pos:position pos:line="98" pos:column="67"/></operator> <operator pos:line="98" pos:column="60">!<pos:position pos:line="98" pos:column="61"/></operator><name><name pos:line="98" pos:column="61">ibuf<pos:position pos:line="98" pos:column="65"/></name><index pos:line="98" pos:column="65">[<expr><name><name pos:line="98" pos:column="66">inbuf<pos:position pos:line="98" pos:column="71"/></name><operator pos:line="98" pos:column="71">.<pos:position pos:line="98" pos:column="72"/></operator><name pos:line="98" pos:column="72">len<pos:position pos:line="98" pos:column="75"/></name></name><operator pos:line="98" pos:column="75">-<pos:position pos:line="98" pos:column="76"/></operator><literal type="number" pos:line="98" pos:column="76">1<pos:position pos:line="98" pos:column="77"/></literal></expr>]<pos:position pos:line="98" pos:column="78"/></index></name></expr>)<pos:position pos:line="98" pos:column="79"/></condition><then pos:line="98" pos:column="79">
					<block type="pseudo"><expr_stmt><expr><name><name pos:line="99" pos:column="41">inbuf<pos:position pos:line="99" pos:column="46"/></name><operator pos:line="99" pos:column="46">.<pos:position pos:line="99" pos:column="47"/></operator><name pos:line="99" pos:column="47">len<pos:position pos:line="99" pos:column="50"/></name></name><operator pos:line="99" pos:column="50">--<pos:position pos:line="99" pos:column="52"/></operator></expr><operator pos:line="99" pos:column="52">,<pos:position pos:line="99" pos:column="53"/></operator> <expr><name pos:line="99" pos:column="54">add_null<pos:position pos:line="99" pos:column="62"/></name> <operator pos:line="99" pos:column="63">=<pos:position pos:line="99" pos:column="64"/></operator> <literal type="number" pos:line="99" pos:column="65">1<pos:position pos:line="99" pos:column="66"/></literal></expr>;<pos:position pos:line="99" pos:column="67"/></expr_stmt></block></then></if>
				<if pos:line="100" pos:column="33">if <condition pos:line="100" pos:column="36">(<expr><call><name pos:line="100" pos:column="37">iconvbufs<pos:position pos:line="100" pos:column="46"/></name><argument_list pos:line="100" pos:column="46">(<argument><expr><name pos:line="100" pos:column="47">ic_send<pos:position pos:line="100" pos:column="54"/></name></expr></argument>, <argument><expr><operator pos:line="100" pos:column="56">&amp;<pos:position pos:line="100" pos:column="61"/></operator><name pos:line="100" pos:column="57">inbuf<pos:position pos:line="100" pos:column="62"/></name></expr></argument>, <argument><expr><operator pos:line="100" pos:column="64">&amp;<pos:position pos:line="100" pos:column="69"/></operator><name pos:line="100" pos:column="65">outbuf<pos:position pos:line="100" pos:column="71"/></name></expr></argument>, <argument><expr><name pos:line="100" pos:column="73">flags<pos:position pos:line="100" pos:column="78"/></name></expr></argument>)<pos:position pos:line="100" pos:column="79"/></argument_list></call> <operator pos:line="100" pos:column="80">&lt;<pos:position pos:line="100" pos:column="84"/></operator> <literal type="number" pos:line="100" pos:column="82">0<pos:position pos:line="100" pos:column="83"/></literal></expr>)<pos:position pos:line="100" pos:column="84"/></condition><then pos:line="100" pos:column="84"> <block pos:line="100" pos:column="85">{
					<if pos:line="101" pos:column="41">if <condition pos:line="101" pos:column="44">(<expr><name pos:line="101" pos:column="45">errno<pos:position pos:line="101" pos:column="50"/></name> <operator pos:line="101" pos:column="51">==<pos:position pos:line="101" pos:column="53"/></operator> <name pos:line="101" pos:column="54">E2BIG<pos:position pos:line="101" pos:column="59"/></name></expr>)<pos:position pos:line="101" pos:column="60"/></condition><then pos:line="101" pos:column="60">
						<block type="pseudo"><goto pos:line="102" pos:column="49">goto <name pos:line="102" pos:column="54">overflow<pos:position pos:line="102" pos:column="62"/></name>;<pos:position pos:line="102" pos:column="63"/></goto></block></then></if>
					<comment type="block" pos:line="103" pos:column="41">/* Buffer ended with an incomplete char, so move the
					 * bytes to the start of the buffer and continue. */</comment>
					<expr_stmt><expr><call><name pos:line="105" pos:column="41">memmove<pos:position pos:line="105" pos:column="48"/></name><argument_list pos:line="105" pos:column="48">(<argument><expr><name pos:line="105" pos:column="49">ibuf<pos:position pos:line="105" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="105" pos:column="55">ibuf<pos:position pos:line="105" pos:column="59"/></name> <operator pos:line="105" pos:column="60">+<pos:position pos:line="105" pos:column="61"/></operator> <name><name pos:line="105" pos:column="62">inbuf<pos:position pos:line="105" pos:column="67"/></name><operator pos:line="105" pos:column="67">.<pos:position pos:line="105" pos:column="68"/></operator><name pos:line="105" pos:column="68">pos<pos:position pos:line="105" pos:column="71"/></name></name></expr></argument>, <argument><expr><name><name pos:line="105" pos:column="73">inbuf<pos:position pos:line="105" pos:column="78"/></name><operator pos:line="105" pos:column="78">.<pos:position pos:line="105" pos:column="79"/></operator><name pos:line="105" pos:column="79">len<pos:position pos:line="105" pos:column="82"/></name></name></expr></argument>)<pos:position pos:line="105" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="105" pos:column="84"/></expr_stmt>
				}<pos:position pos:line="106" pos:column="34"/></block></then></if>
				<expr_stmt><expr><name pos:line="107" pos:column="33">flags<pos:position pos:line="107" pos:column="38"/></name> <operator pos:line="107" pos:column="39">&amp;=<pos:position pos:line="107" pos:column="45"/></operator> <operator pos:line="107" pos:column="42">~<pos:position pos:line="107" pos:column="43"/></operator><name pos:line="107" pos:column="43">ICB_INIT<pos:position pos:line="107" pos:column="51"/></name></expr>;<pos:position pos:line="107" pos:column="52"/></expr_stmt>
			}<pos:position pos:line="108" pos:column="26"/></block></while>
			<if pos:line="109" pos:column="25">if <condition pos:line="109" pos:column="28">(<expr><name pos:line="109" pos:column="29">add_null<pos:position pos:line="109" pos:column="37"/></name></expr>)<pos:position pos:line="109" pos:column="38"/></condition><then pos:line="109" pos:column="38"> <block pos:line="109" pos:column="39">{
				<if pos:line="110" pos:column="33">if <condition pos:line="110" pos:column="36">(<expr><name><name pos:line="110" pos:column="37">outbuf<pos:position pos:line="110" pos:column="43"/></name><operator pos:line="110" pos:column="43">.<pos:position pos:line="110" pos:column="44"/></operator><name pos:line="110" pos:column="44">len<pos:position pos:line="110" pos:column="47"/></name></name> <operator pos:line="110" pos:column="48">==<pos:position pos:line="110" pos:column="50"/></operator> <name><name pos:line="110" pos:column="51">outbuf<pos:position pos:line="110" pos:column="57"/></name><operator pos:line="110" pos:column="57">.<pos:position pos:line="110" pos:column="58"/></operator><name pos:line="110" pos:column="58">size<pos:position pos:line="110" pos:column="62"/></name></name></expr>)<pos:position pos:line="110" pos:column="63"/></condition><then pos:line="110" pos:column="63">
					<block type="pseudo"><goto pos:line="111" pos:column="41">goto <name pos:line="111" pos:column="46">overflow<pos:position pos:line="111" pos:column="54"/></name>;<pos:position pos:line="111" pos:column="55"/></goto></block></then></if>
				<expr_stmt><expr><name><name pos:line="112" pos:column="33">outbuf<pos:position pos:line="112" pos:column="39"/></name><operator pos:line="112" pos:column="39">.<pos:position pos:line="112" pos:column="40"/></operator><name pos:line="112" pos:column="40">buf<pos:position pos:line="112" pos:column="43"/></name><index pos:line="112" pos:column="43">[<expr><name><name pos:line="112" pos:column="44">outbuf<pos:position pos:line="112" pos:column="50"/></name><operator pos:line="112" pos:column="50">.<pos:position pos:line="112" pos:column="51"/></operator><name pos:line="112" pos:column="51">len<pos:position pos:line="112" pos:column="54"/></name></name><operator pos:line="112" pos:column="54">++<pos:position pos:line="112" pos:column="56"/></operator></expr>]<pos:position pos:line="112" pos:column="57"/></index></name> <operator pos:line="112" pos:column="58">=<pos:position pos:line="112" pos:column="59"/></operator> <literal type="char" pos:line="112" pos:column="60">'\0'<pos:position pos:line="112" pos:column="64"/></literal></expr>;<pos:position pos:line="112" pos:column="65"/></expr_stmt>
			}<pos:position pos:line="113" pos:column="26"/></block></then></if>
			<expr_stmt><expr><name pos:line="114" pos:column="25">msg_bytes<pos:position pos:line="114" pos:column="34"/></name> <operator pos:line="114" pos:column="35">=<pos:position pos:line="114" pos:column="36"/></operator> <name><name pos:line="114" pos:column="37">outbuf<pos:position pos:line="114" pos:column="43"/></name><operator pos:line="114" pos:column="43">.<pos:position pos:line="114" pos:column="44"/></operator><name pos:line="114" pos:column="44">len<pos:position pos:line="114" pos:column="47"/></name></name></expr>;<pos:position pos:line="114" pos:column="48"/></expr_stmt>
		}<pos:position pos:line="115" pos:column="18"/></block></then> <else pos:line="115" pos:column="19">else
<cpp:endif pos:line="116" pos:column="1">#<cpp:directive pos:line="116" pos:column="2">endif<pos:position pos:line="116" pos:column="7"/></cpp:directive></cpp:endif>
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="117" pos:column="25">raw_read_buf<pos:position pos:line="117" pos:column="37"/></name><argument_list pos:line="117" pos:column="37">(<argument><expr><name pos:line="117" pos:column="38">data<pos:position pos:line="117" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="117" pos:column="44">msg_bytes<pos:position pos:line="117" pos:column="53"/></name></expr></argument>)<pos:position pos:line="117" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="117" pos:column="55"/></expr_stmt></block></else></if>
		<expr_stmt><expr><name><name pos:line="118" pos:column="17">iobuf<pos:position pos:line="118" pos:column="22"/></name><operator pos:line="118" pos:column="22">.<pos:position pos:line="118" pos:column="23"/></operator><name pos:line="118" pos:column="23">in_multiplexed<pos:position pos:line="118" pos:column="37"/></name></name> <operator pos:line="118" pos:column="38">=<pos:position pos:line="118" pos:column="39"/></operator> <literal type="number" pos:line="118" pos:column="40">1<pos:position pos:line="118" pos:column="41"/></literal></expr>;<pos:position pos:line="118" pos:column="42"/></expr_stmt>
		<comment type="block" pos:line="119" pos:column="17">/* A directory name was sent with the trailing null */</comment>
		<if pos:line="120" pos:column="17">if <condition pos:line="120" pos:column="20">(<expr><name pos:line="120" pos:column="21">msg_bytes<pos:position pos:line="120" pos:column="30"/></name> <operator pos:line="120" pos:column="31">&gt;<pos:position pos:line="120" pos:column="35"/></operator> <literal type="number" pos:line="120" pos:column="33">0<pos:position pos:line="120" pos:column="34"/></literal> <operator pos:line="120" pos:column="35">&amp;&amp;<pos:position pos:line="120" pos:column="45"/></operator> <operator pos:line="120" pos:column="38">!<pos:position pos:line="120" pos:column="39"/></operator><name><name pos:line="120" pos:column="39">data<pos:position pos:line="120" pos:column="43"/></name><index pos:line="120" pos:column="43">[<expr><name pos:line="120" pos:column="44">msg_bytes<pos:position pos:line="120" pos:column="53"/></name><operator pos:line="120" pos:column="53">-<pos:position pos:line="120" pos:column="54"/></operator><literal type="number" pos:line="120" pos:column="54">1<pos:position pos:line="120" pos:column="55"/></literal></expr>]<pos:position pos:line="120" pos:column="56"/></index></name></expr>)<pos:position pos:line="120" pos:column="57"/></condition><then pos:line="120" pos:column="57">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="121" pos:column="25">log_delete<pos:position pos:line="121" pos:column="35"/></name><argument_list pos:line="121" pos:column="35">(<argument><expr><name pos:line="121" pos:column="36">data<pos:position pos:line="121" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="121" pos:column="42">S_IFDIR<pos:position pos:line="121" pos:column="49"/></name></expr></argument>)<pos:position pos:line="121" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="121" pos:column="51"/></expr_stmt></block></then>
		<else pos:line="122" pos:column="17">else <block pos:line="122" pos:column="22">{
			<expr_stmt><expr><name><name pos:line="123" pos:column="25">data<pos:position pos:line="123" pos:column="29"/></name><index pos:line="123" pos:column="29">[<expr><name pos:line="123" pos:column="30">msg_bytes<pos:position pos:line="123" pos:column="39"/></name></expr>]<pos:position pos:line="123" pos:column="40"/></index></name> <operator pos:line="123" pos:column="41">=<pos:position pos:line="123" pos:column="42"/></operator> <literal type="char" pos:line="123" pos:column="43">'\0'<pos:position pos:line="123" pos:column="47"/></literal></expr>;<pos:position pos:line="123" pos:column="48"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="124" pos:column="25">log_delete<pos:position pos:line="124" pos:column="35"/></name><argument_list pos:line="124" pos:column="35">(<argument><expr><name pos:line="124" pos:column="36">data<pos:position pos:line="124" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="124" pos:column="42">S_IFREG<pos:position pos:line="124" pos:column="49"/></name></expr></argument>)<pos:position pos:line="124" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="124" pos:column="51"/></expr_stmt>
		}<pos:position pos:line="125" pos:column="18"/></block></else></if>
		<break pos:line="126" pos:column="17">break;<pos:position pos:line="126" pos:column="23"/></break>
	<case pos:line="127" pos:column="9">case <expr><name pos:line="127" pos:column="14">MSG_SUCCESS<pos:position pos:line="127" pos:column="25"/></name></expr>:<pos:position pos:line="127" pos:column="26"/></case>
		<if pos:line="128" pos:column="17">if <condition pos:line="128" pos:column="20">(<expr><name pos:line="128" pos:column="21">msg_bytes<pos:position pos:line="128" pos:column="30"/></name> <operator pos:line="128" pos:column="31">!=<pos:position pos:line="128" pos:column="33"/></operator> <literal type="number" pos:line="128" pos:column="34">4<pos:position pos:line="128" pos:column="35"/></literal></expr>)<pos:position pos:line="128" pos:column="36"/></condition><then pos:line="128" pos:column="36"> <block pos:line="128" pos:column="37">{
		  <label><name pos:line="129" pos:column="19">invalid_msg<pos:position pos:line="129" pos:column="30"/></name>:<pos:position pos:line="129" pos:column="31"/></label>
			<expr_stmt><expr><call><name pos:line="130" pos:column="25">rprintf<pos:position pos:line="130" pos:column="32"/></name><argument_list pos:line="130" pos:column="32">(<argument><expr><name pos:line="130" pos:column="33">FERROR<pos:position pos:line="130" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="130" pos:column="41">"invalid multi-message %d:%lu [%s%s]\n"<pos:position pos:line="130" pos:column="80"/></literal></expr></argument>,
				<argument><expr><name pos:line="131" pos:column="33">tag<pos:position pos:line="131" pos:column="36"/></name></expr></argument>, <argument><expr><operator pos:line="131" pos:column="38">(<pos:position pos:line="131" pos:column="39"/></operator><name pos:line="131" pos:column="39">unsigned<pos:position pos:line="131" pos:column="47"/></name> <name pos:line="131" pos:column="48">long<pos:position pos:line="131" pos:column="52"/></name><operator pos:line="131" pos:column="52">)<pos:position pos:line="131" pos:column="53"/></operator><name pos:line="131" pos:column="53">msg_bytes<pos:position pos:line="131" pos:column="62"/></name></expr></argument>, <argument><expr><call><name pos:line="131" pos:column="64">who_am_i<pos:position pos:line="131" pos:column="72"/></name><argument_list pos:line="131" pos:column="72">()<pos:position pos:line="131" pos:column="74"/></argument_list></call></expr></argument>,
				<argument><expr><ternary><condition><expr><name pos:line="132" pos:column="33">inc_recurse<pos:position pos:line="132" pos:column="44"/></name></expr> ?<pos:position pos:line="132" pos:column="46"/></condition><then pos:line="132" pos:column="46"> <expr><literal type="string" pos:line="132" pos:column="47">"/inc"<pos:position pos:line="132" pos:column="53"/></literal></expr> <pos:position pos:line="132" pos:column="54"/></then><else pos:line="132" pos:column="54">: <expr><literal type="string" pos:line="132" pos:column="56">""<pos:position pos:line="132" pos:column="58"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="132" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="132" pos:column="60"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="133" pos:column="25">exit_cleanup<pos:position pos:line="133" pos:column="37"/></name><argument_list pos:line="133" pos:column="37">(<argument><expr><name pos:line="133" pos:column="38">RERR_STREAMIO<pos:position pos:line="133" pos:column="51"/></name></expr></argument>)<pos:position pos:line="133" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="133" pos:column="53"/></expr_stmt>
		}<pos:position pos:line="134" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name pos:line="135" pos:column="17">val<pos:position pos:line="135" pos:column="20"/></name> <operator pos:line="135" pos:column="21">=<pos:position pos:line="135" pos:column="22"/></operator> <call><name pos:line="135" pos:column="23">raw_read_int<pos:position pos:line="135" pos:column="35"/></name><argument_list pos:line="135" pos:column="35">()<pos:position pos:line="135" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="135" pos:column="38"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="136" pos:column="17">iobuf<pos:position pos:line="136" pos:column="22"/></name><operator pos:line="136" pos:column="22">.<pos:position pos:line="136" pos:column="23"/></operator><name pos:line="136" pos:column="23">in_multiplexed<pos:position pos:line="136" pos:column="37"/></name></name> <operator pos:line="136" pos:column="38">=<pos:position pos:line="136" pos:column="39"/></operator> <literal type="number" pos:line="136" pos:column="40">1<pos:position pos:line="136" pos:column="41"/></literal></expr>;<pos:position pos:line="136" pos:column="42"/></expr_stmt>
		<if pos:line="137" pos:column="17">if <condition pos:line="137" pos:column="20">(<expr><name pos:line="137" pos:column="21">am_generator<pos:position pos:line="137" pos:column="33"/></name></expr>)<pos:position pos:line="137" pos:column="34"/></condition><then pos:line="137" pos:column="34">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="138" pos:column="25">got_flist_entry_status<pos:position pos:line="138" pos:column="47"/></name><argument_list pos:line="138" pos:column="47">(<argument><expr><name pos:line="138" pos:column="48">FES_SUCCESS<pos:position pos:line="138" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="138" pos:column="61">val<pos:position pos:line="138" pos:column="64"/></name></expr></argument>)<pos:position pos:line="138" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="138" pos:column="66"/></expr_stmt></block></then>
		<else pos:line="139" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="140" pos:column="25">successful_send<pos:position pos:line="140" pos:column="40"/></name><argument_list pos:line="140" pos:column="40">(<argument><expr><name pos:line="140" pos:column="41">val<pos:position pos:line="140" pos:column="44"/></name></expr></argument>)<pos:position pos:line="140" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="140" pos:column="46"/></expr_stmt></block></else></if>
		<break pos:line="141" pos:column="17">break;<pos:position pos:line="141" pos:column="23"/></break>
	<case pos:line="142" pos:column="9">case <expr><name pos:line="142" pos:column="14">MSG_NO_SEND<pos:position pos:line="142" pos:column="25"/></name></expr>:<pos:position pos:line="142" pos:column="26"/></case>
		<if pos:line="143" pos:column="17">if <condition pos:line="143" pos:column="20">(<expr><name pos:line="143" pos:column="21">msg_bytes<pos:position pos:line="143" pos:column="30"/></name> <operator pos:line="143" pos:column="31">!=<pos:position pos:line="143" pos:column="33"/></operator> <literal type="number" pos:line="143" pos:column="34">4<pos:position pos:line="143" pos:column="35"/></literal></expr>)<pos:position pos:line="143" pos:column="36"/></condition><then pos:line="143" pos:column="36">
			<block type="pseudo"><goto pos:line="144" pos:column="25">goto <name pos:line="144" pos:column="30">invalid_msg<pos:position pos:line="144" pos:column="41"/></name>;<pos:position pos:line="144" pos:column="42"/></goto></block></then></if>
		<expr_stmt><expr><name pos:line="145" pos:column="17">val<pos:position pos:line="145" pos:column="20"/></name> <operator pos:line="145" pos:column="21">=<pos:position pos:line="145" pos:column="22"/></operator> <call><name pos:line="145" pos:column="23">raw_read_int<pos:position pos:line="145" pos:column="35"/></name><argument_list pos:line="145" pos:column="35">()<pos:position pos:line="145" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="145" pos:column="38"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="146" pos:column="17">iobuf<pos:position pos:line="146" pos:column="22"/></name><operator pos:line="146" pos:column="22">.<pos:position pos:line="146" pos:column="23"/></operator><name pos:line="146" pos:column="23">in_multiplexed<pos:position pos:line="146" pos:column="37"/></name></name> <operator pos:line="146" pos:column="38">=<pos:position pos:line="146" pos:column="39"/></operator> <literal type="number" pos:line="146" pos:column="40">1<pos:position pos:line="146" pos:column="41"/></literal></expr>;<pos:position pos:line="146" pos:column="42"/></expr_stmt>
		<if pos:line="147" pos:column="17">if <condition pos:line="147" pos:column="20">(<expr><name pos:line="147" pos:column="21">am_generator<pos:position pos:line="147" pos:column="33"/></name></expr>)<pos:position pos:line="147" pos:column="34"/></condition><then pos:line="147" pos:column="34">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="148" pos:column="25">got_flist_entry_status<pos:position pos:line="148" pos:column="47"/></name><argument_list pos:line="148" pos:column="47">(<argument><expr><name pos:line="148" pos:column="48">FES_NO_SEND<pos:position pos:line="148" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="148" pos:column="61">val<pos:position pos:line="148" pos:column="64"/></name></expr></argument>)<pos:position pos:line="148" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="148" pos:column="66"/></expr_stmt></block></then>
		<else pos:line="149" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="150" pos:column="25">send_msg_int<pos:position pos:line="150" pos:column="37"/></name><argument_list pos:line="150" pos:column="37">(<argument><expr><name pos:line="150" pos:column="38">MSG_NO_SEND<pos:position pos:line="150" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="150" pos:column="51">val<pos:position pos:line="150" pos:column="54"/></name></expr></argument>)<pos:position pos:line="150" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="150" pos:column="56"/></expr_stmt></block></else></if>
		<break pos:line="151" pos:column="17">break;<pos:position pos:line="151" pos:column="23"/></break>
	<case pos:line="152" pos:column="9">case <expr><name pos:line="152" pos:column="14">MSG_ERROR_SOCKET<pos:position pos:line="152" pos:column="30"/></name></expr>:<pos:position pos:line="152" pos:column="31"/></case>
	<case pos:line="153" pos:column="9">case <expr><name pos:line="153" pos:column="14">MSG_ERROR_UTF8<pos:position pos:line="153" pos:column="28"/></name></expr>:<pos:position pos:line="153" pos:column="29"/></case>
	<case pos:line="154" pos:column="9">case <expr><name pos:line="154" pos:column="14">MSG_CLIENT<pos:position pos:line="154" pos:column="24"/></name></expr>:<pos:position pos:line="154" pos:column="25"/></case>
	<case pos:line="155" pos:column="9">case <expr><name pos:line="155" pos:column="14">MSG_LOG<pos:position pos:line="155" pos:column="21"/></name></expr>:<pos:position pos:line="155" pos:column="22"/></case>
		<if pos:line="156" pos:column="17">if <condition pos:line="156" pos:column="20">(<expr><operator pos:line="156" pos:column="21">!<pos:position pos:line="156" pos:column="22"/></operator><name pos:line="156" pos:column="22">am_generator<pos:position pos:line="156" pos:column="34"/></name></expr>)<pos:position pos:line="156" pos:column="35"/></condition><then pos:line="156" pos:column="35">
			<block type="pseudo"><goto pos:line="157" pos:column="25">goto <name pos:line="157" pos:column="30">invalid_msg<pos:position pos:line="157" pos:column="41"/></name>;<pos:position pos:line="157" pos:column="42"/></goto></block></then></if>
		<if pos:line="158" pos:column="17">if <condition pos:line="158" pos:column="20">(<expr><name pos:line="158" pos:column="21">tag<pos:position pos:line="158" pos:column="24"/></name> <operator pos:line="158" pos:column="25">==<pos:position pos:line="158" pos:column="27"/></operator> <name pos:line="158" pos:column="28">MSG_ERROR_SOCKET<pos:position pos:line="158" pos:column="44"/></name></expr>)<pos:position pos:line="158" pos:column="45"/></condition><then pos:line="158" pos:column="45">
			<block type="pseudo"><expr_stmt><expr><name pos:line="159" pos:column="25">msgs2stderr<pos:position pos:line="159" pos:column="36"/></name> <operator pos:line="159" pos:column="37">=<pos:position pos:line="159" pos:column="38"/></operator> <literal type="number" pos:line="159" pos:column="39">1<pos:position pos:line="159" pos:column="40"/></literal></expr>;<pos:position pos:line="159" pos:column="41"/></expr_stmt></block></then></if>
		<comment type="block" pos:line="160" pos:column="17">/* FALL THROUGH */</comment>
	<case pos:line="161" pos:column="9">case <expr><name pos:line="161" pos:column="14">MSG_INFO<pos:position pos:line="161" pos:column="22"/></name></expr>:<pos:position pos:line="161" pos:column="23"/></case>
	<case pos:line="162" pos:column="9">case <expr><name pos:line="162" pos:column="14">MSG_ERROR<pos:position pos:line="162" pos:column="23"/></name></expr>:<pos:position pos:line="162" pos:column="24"/></case>
	<case pos:line="163" pos:column="9">case <expr><name pos:line="163" pos:column="14">MSG_ERROR_XFER<pos:position pos:line="163" pos:column="28"/></name></expr>:<pos:position pos:line="163" pos:column="29"/></case>
	<case pos:line="164" pos:column="9">case <expr><name pos:line="164" pos:column="14">MSG_WARNING<pos:position pos:line="164" pos:column="25"/></name></expr>:<pos:position pos:line="164" pos:column="26"/></case>
		<if pos:line="165" pos:column="17">if <condition pos:line="165" pos:column="20">(<expr><name pos:line="165" pos:column="21">msg_bytes<pos:position pos:line="165" pos:column="30"/></name> <operator pos:line="165" pos:column="31">&gt;=<pos:position pos:line="165" pos:column="36"/></operator> <sizeof pos:line="165" pos:column="34">sizeof <name pos:line="165" pos:column="41">data<pos:position pos:line="165" pos:column="45"/></name></sizeof></expr>)<pos:position pos:line="165" pos:column="46"/></condition><then pos:line="165" pos:column="46"> <block pos:line="165" pos:column="47">{
		    <label><name pos:line="166" pos:column="21">overflow<pos:position pos:line="166" pos:column="29"/></name>:<pos:position pos:line="166" pos:column="30"/></label>
			<expr_stmt><expr><call><name pos:line="167" pos:column="25">rprintf<pos:position pos:line="167" pos:column="32"/></name><argument_list pos:line="167" pos:column="32">(<argument><expr><name pos:line="167" pos:column="33">FERROR<pos:position pos:line="167" pos:column="39"/></name></expr></argument>,
				<argument><expr><literal type="string" pos:line="168" pos:column="33">"multiplexing overflow %d:%lu [%s%s]\n"<pos:position pos:line="168" pos:column="72"/></literal></expr></argument>,
				<argument><expr><name pos:line="169" pos:column="33">tag<pos:position pos:line="169" pos:column="36"/></name></expr></argument>, <argument><expr><operator pos:line="169" pos:column="38">(<pos:position pos:line="169" pos:column="39"/></operator><name pos:line="169" pos:column="39">unsigned<pos:position pos:line="169" pos:column="47"/></name> <name pos:line="169" pos:column="48">long<pos:position pos:line="169" pos:column="52"/></name><operator pos:line="169" pos:column="52">)<pos:position pos:line="169" pos:column="53"/></operator><name pos:line="169" pos:column="53">msg_bytes<pos:position pos:line="169" pos:column="62"/></name></expr></argument>, <argument><expr><call><name pos:line="169" pos:column="64">who_am_i<pos:position pos:line="169" pos:column="72"/></name><argument_list pos:line="169" pos:column="72">()<pos:position pos:line="169" pos:column="74"/></argument_list></call></expr></argument>,
				<argument><expr><ternary><condition><expr><name pos:line="170" pos:column="33">inc_recurse<pos:position pos:line="170" pos:column="44"/></name></expr> ?<pos:position pos:line="170" pos:column="46"/></condition><then pos:line="170" pos:column="46"> <expr><literal type="string" pos:line="170" pos:column="47">"/inc"<pos:position pos:line="170" pos:column="53"/></literal></expr> <pos:position pos:line="170" pos:column="54"/></then><else pos:line="170" pos:column="54">: <expr><literal type="string" pos:line="170" pos:column="56">""<pos:position pos:line="170" pos:column="58"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="170" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="170" pos:column="60"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="171" pos:column="25">exit_cleanup<pos:position pos:line="171" pos:column="37"/></name><argument_list pos:line="171" pos:column="37">(<argument><expr><name pos:line="171" pos:column="38">RERR_STREAMIO<pos:position pos:line="171" pos:column="51"/></name></expr></argument>)<pos:position pos:line="171" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="171" pos:column="53"/></expr_stmt>
		}<pos:position pos:line="172" pos:column="18"/></block></then></if>
		<expr_stmt><expr><call><name pos:line="173" pos:column="17">raw_read_buf<pos:position pos:line="173" pos:column="29"/></name><argument_list pos:line="173" pos:column="29">(<argument><expr><name pos:line="173" pos:column="30">data<pos:position pos:line="173" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="173" pos:column="36">msg_bytes<pos:position pos:line="173" pos:column="45"/></name></expr></argument>)<pos:position pos:line="173" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="173" pos:column="47"/></expr_stmt>
		<comment type="block" pos:line="174" pos:column="17">/* We don't set in_multiplexed value back to 1 before writing this message
		 * because the write might loop back and read yet another message, over and
		 * over again, while waiting for room to put the message in the msg buffer. */</comment>
		<expr_stmt><expr><call><name pos:line="177" pos:column="17">rwrite<pos:position pos:line="177" pos:column="23"/></name><argument_list pos:line="177" pos:column="23">(<argument><expr><operator pos:line="177" pos:column="24">(<pos:position pos:line="177" pos:column="25"/></operator>enum <name pos:line="177" pos:column="30">logcode<pos:position pos:line="177" pos:column="37"/></name><operator pos:line="177" pos:column="37">)<pos:position pos:line="177" pos:column="38"/></operator><name pos:line="177" pos:column="38">tag<pos:position pos:line="177" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="177" pos:column="43">data<pos:position pos:line="177" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="177" pos:column="49">msg_bytes<pos:position pos:line="177" pos:column="58"/></name></expr></argument>, <argument><expr><operator pos:line="177" pos:column="60">!<pos:position pos:line="177" pos:column="61"/></operator><name pos:line="177" pos:column="61">am_generator<pos:position pos:line="177" pos:column="73"/></name></expr></argument>)<pos:position pos:line="177" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="177" pos:column="75"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="178" pos:column="17">iobuf<pos:position pos:line="178" pos:column="22"/></name><operator pos:line="178" pos:column="22">.<pos:position pos:line="178" pos:column="23"/></operator><name pos:line="178" pos:column="23">in_multiplexed<pos:position pos:line="178" pos:column="37"/></name></name> <operator pos:line="178" pos:column="38">=<pos:position pos:line="178" pos:column="39"/></operator> <literal type="number" pos:line="178" pos:column="40">1<pos:position pos:line="178" pos:column="41"/></literal></expr>;<pos:position pos:line="178" pos:column="42"/></expr_stmt>
		<if pos:line="179" pos:column="17">if <condition pos:line="179" pos:column="20">(<expr><name pos:line="179" pos:column="21">first_message<pos:position pos:line="179" pos:column="34"/></name></expr>)<pos:position pos:line="179" pos:column="35"/></condition><then pos:line="179" pos:column="35"> <block pos:line="179" pos:column="36">{
			<if pos:line="180" pos:column="25">if <condition pos:line="180" pos:column="28">(<expr><name pos:line="180" pos:column="29">list_only<pos:position pos:line="180" pos:column="38"/></name> <operator pos:line="180" pos:column="39">&amp;&amp;<pos:position pos:line="180" pos:column="49"/></operator> <operator pos:line="180" pos:column="42">!<pos:position pos:line="180" pos:column="43"/></operator><name pos:line="180" pos:column="43">am_sender<pos:position pos:line="180" pos:column="52"/></name> <operator pos:line="180" pos:column="53">&amp;&amp;<pos:position pos:line="180" pos:column="63"/></operator> <name pos:line="180" pos:column="56">tag<pos:position pos:line="180" pos:column="59"/></name> <operator pos:line="180" pos:column="60">==<pos:position pos:line="180" pos:column="62"/></operator> <literal type="number" pos:line="180" pos:column="63">1<pos:position pos:line="180" pos:column="64"/></literal> <operator pos:line="180" pos:column="65">&amp;&amp;<pos:position pos:line="180" pos:column="75"/></operator> <name pos:line="180" pos:column="68">msg_bytes<pos:position pos:line="180" pos:column="77"/></name> <operator pos:line="180" pos:column="78">&lt;<pos:position pos:line="180" pos:column="82"/></operator> <sizeof pos:line="180" pos:column="80">sizeof <name pos:line="180" pos:column="87">data<pos:position pos:line="180" pos:column="91"/></name></sizeof></expr>)<pos:position pos:line="180" pos:column="92"/></condition><then pos:line="180" pos:column="92"> <block pos:line="180" pos:column="93">{
				<expr_stmt><expr><name><name pos:line="181" pos:column="33">data<pos:position pos:line="181" pos:column="37"/></name><index pos:line="181" pos:column="37">[<expr><name pos:line="181" pos:column="38">msg_bytes<pos:position pos:line="181" pos:column="47"/></name></expr>]<pos:position pos:line="181" pos:column="48"/></index></name> <operator pos:line="181" pos:column="49">=<pos:position pos:line="181" pos:column="50"/></operator> <literal type="char" pos:line="181" pos:column="51">'\0'<pos:position pos:line="181" pos:column="55"/></literal></expr>;<pos:position pos:line="181" pos:column="56"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="182" pos:column="33">check_for_d_option_error<pos:position pos:line="182" pos:column="57"/></name><argument_list pos:line="182" pos:column="57">(<argument><expr><name pos:line="182" pos:column="58">data<pos:position pos:line="182" pos:column="62"/></name></expr></argument>)<pos:position pos:line="182" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="182" pos:column="64"/></expr_stmt>
			}<pos:position pos:line="183" pos:column="26"/></block></then></if>
			<expr_stmt><expr><name pos:line="184" pos:column="25">first_message<pos:position pos:line="184" pos:column="38"/></name> <operator pos:line="184" pos:column="39">=<pos:position pos:line="184" pos:column="40"/></operator> <literal type="number" pos:line="184" pos:column="41">0<pos:position pos:line="184" pos:column="42"/></literal></expr>;<pos:position pos:line="184" pos:column="43"/></expr_stmt>
		}<pos:position pos:line="185" pos:column="18"/></block></then></if>
		<break pos:line="186" pos:column="17">break;<pos:position pos:line="186" pos:column="23"/></break>
	<case pos:line="187" pos:column="9">case <expr><name pos:line="187" pos:column="14">MSG_ERROR_EXIT<pos:position pos:line="187" pos:column="28"/></name></expr>:<pos:position pos:line="187" pos:column="29"/></case>
		<if pos:line="188" pos:column="17">if <condition pos:line="188" pos:column="20">(<expr><name pos:line="188" pos:column="21">msg_bytes<pos:position pos:line="188" pos:column="30"/></name> <operator pos:line="188" pos:column="31">==<pos:position pos:line="188" pos:column="33"/></operator> <literal type="number" pos:line="188" pos:column="34">4<pos:position pos:line="188" pos:column="35"/></literal></expr>)<pos:position pos:line="188" pos:column="36"/></condition><then pos:line="188" pos:column="36">
			<block type="pseudo"><expr_stmt><expr><name pos:line="189" pos:column="25">val<pos:position pos:line="189" pos:column="28"/></name> <operator pos:line="189" pos:column="29">=<pos:position pos:line="189" pos:column="30"/></operator> <call><name pos:line="189" pos:column="31">raw_read_int<pos:position pos:line="189" pos:column="43"/></name><argument_list pos:line="189" pos:column="43">()<pos:position pos:line="189" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="189" pos:column="46"/></expr_stmt></block></then>
		<elseif pos:line="190" pos:column="17">else <if pos:line="190" pos:column="22">if <condition pos:line="190" pos:column="25">(<expr><name pos:line="190" pos:column="26">msg_bytes<pos:position pos:line="190" pos:column="35"/></name> <operator pos:line="190" pos:column="36">==<pos:position pos:line="190" pos:column="38"/></operator> <literal type="number" pos:line="190" pos:column="39">0<pos:position pos:line="190" pos:column="40"/></literal></expr>)<pos:position pos:line="190" pos:column="41"/></condition><then pos:line="190" pos:column="41">
			<block type="pseudo"><expr_stmt><expr><name pos:line="191" pos:column="25">val<pos:position pos:line="191" pos:column="28"/></name> <operator pos:line="191" pos:column="29">=<pos:position pos:line="191" pos:column="30"/></operator> <literal type="number" pos:line="191" pos:column="31">0<pos:position pos:line="191" pos:column="32"/></literal></expr>;<pos:position pos:line="191" pos:column="33"/></expr_stmt></block></then></if></elseif>
		<else pos:line="192" pos:column="17">else
			<block type="pseudo"><goto pos:line="193" pos:column="25">goto <name pos:line="193" pos:column="30">invalid_msg<pos:position pos:line="193" pos:column="41"/></name>;<pos:position pos:line="193" pos:column="42"/></goto></block></else></if>
		<expr_stmt><expr><name><name pos:line="194" pos:column="17">iobuf<pos:position pos:line="194" pos:column="22"/></name><operator pos:line="194" pos:column="22">.<pos:position pos:line="194" pos:column="23"/></operator><name pos:line="194" pos:column="23">in_multiplexed<pos:position pos:line="194" pos:column="37"/></name></name> <operator pos:line="194" pos:column="38">=<pos:position pos:line="194" pos:column="39"/></operator> <literal type="number" pos:line="194" pos:column="40">1<pos:position pos:line="194" pos:column="41"/></literal></expr>;<pos:position pos:line="194" pos:column="42"/></expr_stmt>
		<if pos:line="195" pos:column="17">if <condition pos:line="195" pos:column="20">(<expr><call><name pos:line="195" pos:column="21">DEBUG_GTE<pos:position pos:line="195" pos:column="30"/></name><argument_list pos:line="195" pos:column="30">(<argument><expr><name pos:line="195" pos:column="31">EXIT<pos:position pos:line="195" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="195" pos:column="37">3<pos:position pos:line="195" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="195" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="195" pos:column="40"/></condition><then pos:line="195" pos:column="40">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="196" pos:column="25">rprintf<pos:position pos:line="196" pos:column="32"/></name><argument_list pos:line="196" pos:column="32">(<argument><expr><name pos:line="196" pos:column="33">FINFO<pos:position pos:line="196" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="196" pos:column="40">"[%s] got MSG_ERROR_EXIT with %ld bytes\n"<pos:position pos:line="196" pos:column="82"/></literal></expr></argument>, <argument><expr><call><name pos:line="196" pos:column="84">who_am_i<pos:position pos:line="196" pos:column="92"/></name><argument_list pos:line="196" pos:column="92">()<pos:position pos:line="196" pos:column="94"/></argument_list></call></expr></argument>, <argument><expr><operator pos:line="196" pos:column="96">(<pos:position pos:line="196" pos:column="97"/></operator><name pos:line="196" pos:column="97">long<pos:position pos:line="196" pos:column="101"/></name><operator pos:line="196" pos:column="101">)<pos:position pos:line="196" pos:column="102"/></operator><name pos:line="196" pos:column="102">msg_bytes<pos:position pos:line="196" pos:column="111"/></name></expr></argument>)<pos:position pos:line="196" pos:column="112"/></argument_list></call></expr>;<pos:position pos:line="196" pos:column="113"/></expr_stmt></block></then></if>
		<if pos:line="197" pos:column="17">if <condition pos:line="197" pos:column="20">(<expr><name pos:line="197" pos:column="21">msg_bytes<pos:position pos:line="197" pos:column="30"/></name> <operator pos:line="197" pos:column="31">==<pos:position pos:line="197" pos:column="33"/></operator> <literal type="number" pos:line="197" pos:column="34">0<pos:position pos:line="197" pos:column="35"/></literal></expr>)<pos:position pos:line="197" pos:column="36"/></condition><then pos:line="197" pos:column="36"> <block pos:line="197" pos:column="37">{
			<if pos:line="198" pos:column="25">if <condition pos:line="198" pos:column="28">(<expr><operator pos:line="198" pos:column="29">!<pos:position pos:line="198" pos:column="30"/></operator><name pos:line="198" pos:column="30">am_sender<pos:position pos:line="198" pos:column="39"/></name> <operator pos:line="198" pos:column="40">&amp;&amp;<pos:position pos:line="198" pos:column="50"/></operator> <operator pos:line="198" pos:column="43">!<pos:position pos:line="198" pos:column="44"/></operator><name pos:line="198" pos:column="44">am_generator<pos:position pos:line="198" pos:column="56"/></name></expr>)<pos:position pos:line="198" pos:column="57"/></condition><then pos:line="198" pos:column="57"> <block pos:line="198" pos:column="58">{
				<if pos:line="199" pos:column="33">if <condition pos:line="199" pos:column="36">(<expr><call><name pos:line="199" pos:column="37">DEBUG_GTE<pos:position pos:line="199" pos:column="46"/></name><argument_list pos:line="199" pos:column="46">(<argument><expr><name pos:line="199" pos:column="47">EXIT<pos:position pos:line="199" pos:column="51"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="199" pos:column="53">3<pos:position pos:line="199" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="199" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="199" pos:column="56"/></condition><then pos:line="199" pos:column="56"> <block pos:line="199" pos:column="57">{
					<expr_stmt><expr><call><name pos:line="200" pos:column="41">rprintf<pos:position pos:line="200" pos:column="48"/></name><argument_list pos:line="200" pos:column="48">(<argument><expr><name pos:line="200" pos:column="49">FINFO<pos:position pos:line="200" pos:column="54"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="200" pos:column="56">"[%s] sending MSG_ERROR_EXIT (len 0)\n"<pos:position pos:line="200" pos:column="95"/></literal></expr></argument>,
						<argument><expr><call><name pos:line="201" pos:column="49">who_am_i<pos:position pos:line="201" pos:column="57"/></name><argument_list pos:line="201" pos:column="57">()<pos:position pos:line="201" pos:column="59"/></argument_list></call></expr></argument>)<pos:position pos:line="201" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="201" pos:column="61"/></expr_stmt>
				}<pos:position pos:line="202" pos:column="34"/></block></then></if>
				<expr_stmt><expr><call><name pos:line="203" pos:column="33">send_msg<pos:position pos:line="203" pos:column="41"/></name><argument_list pos:line="203" pos:column="41">(<argument><expr><name pos:line="203" pos:column="42">MSG_ERROR_EXIT<pos:position pos:line="203" pos:column="56"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="203" pos:column="58">""<pos:position pos:line="203" pos:column="60"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="203" pos:column="62">0<pos:position pos:line="203" pos:column="63"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="203" pos:column="65">0<pos:position pos:line="203" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="203" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="203" pos:column="68"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="204" pos:column="33">io_flush<pos:position pos:line="204" pos:column="41"/></name><argument_list pos:line="204" pos:column="41">(<argument><expr><name pos:line="204" pos:column="42">FULL_FLUSH<pos:position pos:line="204" pos:column="52"/></name></expr></argument>)<pos:position pos:line="204" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="204" pos:column="54"/></expr_stmt>
			}<pos:position pos:line="205" pos:column="26"/></block></then></if>
		}<pos:position pos:line="206" pos:column="18"/></block></then> <elseif pos:line="206" pos:column="19">else <if pos:line="206" pos:column="24">if <condition pos:line="206" pos:column="27">(<expr><name pos:line="206" pos:column="28">protocol_version<pos:position pos:line="206" pos:column="44"/></name> <operator pos:line="206" pos:column="45">&gt;=<pos:position pos:line="206" pos:column="50"/></operator> <literal type="number" pos:line="206" pos:column="48">31<pos:position pos:line="206" pos:column="50"/></literal></expr>)<pos:position pos:line="206" pos:column="51"/></condition><then pos:line="206" pos:column="51"> <block pos:line="206" pos:column="52">{
			<if pos:line="207" pos:column="25">if <condition pos:line="207" pos:column="28">(<expr><name pos:line="207" pos:column="29">am_generator<pos:position pos:line="207" pos:column="41"/></name> <operator pos:line="207" pos:column="42">||<pos:position pos:line="207" pos:column="44"/></operator> <name pos:line="207" pos:column="45">am_receiver<pos:position pos:line="207" pos:column="56"/></name></expr>)<pos:position pos:line="207" pos:column="57"/></condition><then pos:line="207" pos:column="57"> <block pos:line="207" pos:column="58">{
				<if pos:line="208" pos:column="33">if <condition pos:line="208" pos:column="36">(<expr><call><name pos:line="208" pos:column="37">DEBUG_GTE<pos:position pos:line="208" pos:column="46"/></name><argument_list pos:line="208" pos:column="46">(<argument><expr><name pos:line="208" pos:column="47">EXIT<pos:position pos:line="208" pos:column="51"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="208" pos:column="53">3<pos:position pos:line="208" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="208" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="208" pos:column="56"/></condition><then pos:line="208" pos:column="56"> <block pos:line="208" pos:column="57">{
					<expr_stmt><expr><call><name pos:line="209" pos:column="41">rprintf<pos:position pos:line="209" pos:column="48"/></name><argument_list pos:line="209" pos:column="48">(<argument><expr><name pos:line="209" pos:column="49">FINFO<pos:position pos:line="209" pos:column="54"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="209" pos:column="56">"[%s] sending MSG_ERROR_EXIT with exit_code %d\n"<pos:position pos:line="209" pos:column="105"/></literal></expr></argument>,
						<argument><expr><call><name pos:line="210" pos:column="49">who_am_i<pos:position pos:line="210" pos:column="57"/></name><argument_list pos:line="210" pos:column="57">()<pos:position pos:line="210" pos:column="59"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="210" pos:column="61">val<pos:position pos:line="210" pos:column="64"/></name></expr></argument>)<pos:position pos:line="210" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="210" pos:column="66"/></expr_stmt>
				}<pos:position pos:line="211" pos:column="34"/></block></then></if>
				<expr_stmt><expr><call><name pos:line="212" pos:column="33">send_msg_int<pos:position pos:line="212" pos:column="45"/></name><argument_list pos:line="212" pos:column="45">(<argument><expr><name pos:line="212" pos:column="46">MSG_ERROR_EXIT<pos:position pos:line="212" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="212" pos:column="62">val<pos:position pos:line="212" pos:column="65"/></name></expr></argument>)<pos:position pos:line="212" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="212" pos:column="67"/></expr_stmt>
			}<pos:position pos:line="213" pos:column="26"/></block></then> <else pos:line="213" pos:column="27">else <block pos:line="213" pos:column="32">{
				<if pos:line="214" pos:column="33">if <condition pos:line="214" pos:column="36">(<expr><call><name pos:line="214" pos:column="37">DEBUG_GTE<pos:position pos:line="214" pos:column="46"/></name><argument_list pos:line="214" pos:column="46">(<argument><expr><name pos:line="214" pos:column="47">EXIT<pos:position pos:line="214" pos:column="51"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="214" pos:column="53">3<pos:position pos:line="214" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="214" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="214" pos:column="56"/></condition><then pos:line="214" pos:column="56"> <block pos:line="214" pos:column="57">{
					<expr_stmt><expr><call><name pos:line="215" pos:column="41">rprintf<pos:position pos:line="215" pos:column="48"/></name><argument_list pos:line="215" pos:column="48">(<argument><expr><name pos:line="215" pos:column="49">FINFO<pos:position pos:line="215" pos:column="54"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="215" pos:column="56">"[%s] sending MSG_ERROR_EXIT (len 0)\n"<pos:position pos:line="215" pos:column="95"/></literal></expr></argument>,
						<argument><expr><call><name pos:line="216" pos:column="49">who_am_i<pos:position pos:line="216" pos:column="57"/></name><argument_list pos:line="216" pos:column="57">()<pos:position pos:line="216" pos:column="59"/></argument_list></call></expr></argument>)<pos:position pos:line="216" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="216" pos:column="61"/></expr_stmt>
				}<pos:position pos:line="217" pos:column="34"/></block></then></if>
				<expr_stmt><expr><call><name pos:line="218" pos:column="33">send_msg<pos:position pos:line="218" pos:column="41"/></name><argument_list pos:line="218" pos:column="41">(<argument><expr><name pos:line="218" pos:column="42">MSG_ERROR_EXIT<pos:position pos:line="218" pos:column="56"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="218" pos:column="58">""<pos:position pos:line="218" pos:column="60"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="218" pos:column="62">0<pos:position pos:line="218" pos:column="63"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="218" pos:column="65">0<pos:position pos:line="218" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="218" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="218" pos:column="68"/></expr_stmt>
			}<pos:position pos:line="219" pos:column="26"/></block></else></if>
		}<pos:position pos:line="220" pos:column="18"/></block></then></if></elseif></if>
		<comment type="block" pos:line="221" pos:column="17">/* Send a negative linenum so that we don't end up
		 * with a duplicate exit message. */</comment>
		<expr_stmt><expr><call><name pos:line="223" pos:column="17">_exit_cleanup<pos:position pos:line="223" pos:column="30"/></name><argument_list pos:line="223" pos:column="30">(<argument><expr><name pos:line="223" pos:column="31">val<pos:position pos:line="223" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="223" pos:column="36">__FILE__<pos:position pos:line="223" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="223" pos:column="46">0<pos:position pos:line="223" pos:column="47"/></literal> <operator pos:line="223" pos:column="48">-<pos:position pos:line="223" pos:column="49"/></operator> <name pos:line="223" pos:column="50">__LINE__<pos:position pos:line="223" pos:column="58"/></name></expr></argument>)<pos:position pos:line="223" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="223" pos:column="60"/></expr_stmt>
	<default pos:line="224" pos:column="9">default:<pos:position pos:line="224" pos:column="17"/></default>
		<expr_stmt><expr><call><name pos:line="225" pos:column="17">rprintf<pos:position pos:line="225" pos:column="24"/></name><argument_list pos:line="225" pos:column="24">(<argument><expr><name pos:line="225" pos:column="25">FERROR<pos:position pos:line="225" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="225" pos:column="33">"unexpected tag %d [%s%s]\n"<pos:position pos:line="225" pos:column="61"/></literal></expr></argument>,
			<argument><expr><name pos:line="226" pos:column="25">tag<pos:position pos:line="226" pos:column="28"/></name></expr></argument>, <argument><expr><call><name pos:line="226" pos:column="30">who_am_i<pos:position pos:line="226" pos:column="38"/></name><argument_list pos:line="226" pos:column="38">()<pos:position pos:line="226" pos:column="40"/></argument_list></call></expr></argument>, <argument><expr><ternary><condition><expr><name pos:line="226" pos:column="42">inc_recurse<pos:position pos:line="226" pos:column="53"/></name></expr> ?<pos:position pos:line="226" pos:column="55"/></condition><then pos:line="226" pos:column="55"> <expr><literal type="string" pos:line="226" pos:column="56">"/inc"<pos:position pos:line="226" pos:column="62"/></literal></expr> <pos:position pos:line="226" pos:column="63"/></then><else pos:line="226" pos:column="63">: <expr><literal type="string" pos:line="226" pos:column="65">""<pos:position pos:line="226" pos:column="67"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="226" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="226" pos:column="69"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="227" pos:column="17">exit_cleanup<pos:position pos:line="227" pos:column="29"/></name><argument_list pos:line="227" pos:column="29">(<argument><expr><name pos:line="227" pos:column="30">RERR_STREAMIO<pos:position pos:line="227" pos:column="43"/></name></expr></argument>)<pos:position pos:line="227" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="227" pos:column="45"/></expr_stmt>
	}<pos:position pos:line="228" pos:column="10"/></block></switch>

	<expr_stmt><expr><call><name pos:line="230" pos:column="9">assert<pos:position pos:line="230" pos:column="15"/></name><argument_list pos:line="230" pos:column="15">(<argument><expr><name><name pos:line="230" pos:column="16">iobuf<pos:position pos:line="230" pos:column="21"/></name><operator pos:line="230" pos:column="21">.<pos:position pos:line="230" pos:column="22"/></operator><name pos:line="230" pos:column="22">in_multiplexed<pos:position pos:line="230" pos:column="36"/></name></name> <operator pos:line="230" pos:column="37">&gt;<pos:position pos:line="230" pos:column="41"/></operator> <literal type="number" pos:line="230" pos:column="39">0<pos:position pos:line="230" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="230" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="230" pos:column="42"/></expr_stmt>
}<pos:position pos:line="231" pos:column="2"/></block></function></unit>
