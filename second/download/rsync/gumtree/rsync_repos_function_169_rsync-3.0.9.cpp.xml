<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_169_rsync-3.0.9.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">make_bak_dir<pos:position pos:line="1" pos:column="17"/></name><parameter_list pos:line="1" pos:column="17">(<parameter><decl><type><specifier pos:line="1" pos:column="18">const<pos:position pos:line="1" pos:column="23"/></specifier> <name pos:line="1" pos:column="24">char<pos:position pos:line="1" pos:column="28"/></name> <modifier pos:line="1" pos:column="29">*<pos:position pos:line="1" pos:column="30"/></modifier></type><name pos:line="1" pos:column="30">fullpath<pos:position pos:line="1" pos:column="38"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="39"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">char<pos:position pos:line="3" pos:column="13"/></name></type> <name><name pos:line="3" pos:column="14">fbuf<pos:position pos:line="3" pos:column="18"/></name><index pos:line="3" pos:column="18">[<expr><name pos:line="3" pos:column="19">MAXPATHLEN<pos:position pos:line="3" pos:column="29"/></name></expr>]<pos:position pos:line="3" pos:column="30"/></index></name></decl>, <modifier pos:line="3" pos:column="32">*<pos:position pos:line="3" pos:column="33"/></modifier><decl><type ref="prev"/><name pos:line="3" pos:column="33">rel<pos:position pos:line="3" pos:column="36"/></name></decl>, <modifier pos:line="3" pos:column="38">*<pos:position pos:line="3" pos:column="39"/></modifier><decl><type ref="prev"/><name pos:line="3" pos:column="39">end<pos:position pos:line="3" pos:column="42"/></name></decl>, <modifier pos:line="3" pos:column="44">*<pos:position pos:line="3" pos:column="45"/></modifier><decl><type ref="prev"/><name pos:line="3" pos:column="45">p<pos:position pos:line="3" pos:column="46"/></name></decl>;<pos:position pos:line="3" pos:column="47"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">file_struct<pos:position pos:line="4" pos:column="27"/></name></name> <modifier pos:line="4" pos:column="28">*<pos:position pos:line="4" pos:column="29"/></modifier></type><name pos:line="4" pos:column="29">file<pos:position pos:line="4" pos:column="33"/></name></decl>;<pos:position pos:line="4" pos:column="34"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">len<pos:position pos:line="5" pos:column="16"/></name> <init pos:line="5" pos:column="17">= <expr><name pos:line="5" pos:column="19">backup_dir_len<pos:position pos:line="5" pos:column="33"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="34"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">stat_x<pos:position pos:line="6" pos:column="15"/></name></type> <name pos:line="6" pos:column="16">sx<pos:position pos:line="6" pos:column="18"/></name></decl>;<pos:position pos:line="6" pos:column="19"/></decl_stmt>

	<while pos:line="8" pos:column="9">while <condition pos:line="8" pos:column="15">(<expr><operator pos:line="8" pos:column="16">*<pos:position pos:line="8" pos:column="17"/></operator><name pos:line="8" pos:column="17">fullpath<pos:position pos:line="8" pos:column="25"/></name> <operator pos:line="8" pos:column="26">==<pos:position pos:line="8" pos:column="28"/></operator> <literal type="char" pos:line="8" pos:column="29">'.'<pos:position pos:line="8" pos:column="32"/></literal> <operator pos:line="8" pos:column="33">&amp;&amp;<pos:position pos:line="8" pos:column="43"/></operator> <name><name pos:line="8" pos:column="36">fullpath<pos:position pos:line="8" pos:column="44"/></name><index pos:line="8" pos:column="44">[<expr><literal type="number" pos:line="8" pos:column="45">1<pos:position pos:line="8" pos:column="46"/></literal></expr>]<pos:position pos:line="8" pos:column="47"/></index></name> <operator pos:line="8" pos:column="48">==<pos:position pos:line="8" pos:column="50"/></operator> <literal type="char" pos:line="8" pos:column="51">'/'<pos:position pos:line="8" pos:column="54"/></literal></expr>)<pos:position pos:line="8" pos:column="55"/></condition> <block pos:line="8" pos:column="56">{
		<expr_stmt><expr><name pos:line="9" pos:column="17">fullpath<pos:position pos:line="9" pos:column="25"/></name> <operator pos:line="9" pos:column="26">+=<pos:position pos:line="9" pos:column="28"/></operator> <literal type="number" pos:line="9" pos:column="29">2<pos:position pos:line="9" pos:column="30"/></literal></expr>;<pos:position pos:line="9" pos:column="31"/></expr_stmt>
		<expr_stmt><expr><name pos:line="10" pos:column="17">len<pos:position pos:line="10" pos:column="20"/></name> <operator pos:line="10" pos:column="21">-=<pos:position pos:line="10" pos:column="23"/></operator> <literal type="number" pos:line="10" pos:column="24">2<pos:position pos:line="10" pos:column="25"/></literal></expr>;<pos:position pos:line="10" pos:column="26"/></expr_stmt>
	}<pos:position pos:line="11" pos:column="10"/></block></while>

	<if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><call><name pos:line="13" pos:column="13">strlcpy<pos:position pos:line="13" pos:column="20"/></name><argument_list pos:line="13" pos:column="20">(<argument><expr><name pos:line="13" pos:column="21">fbuf<pos:position pos:line="13" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="27">fullpath<pos:position pos:line="13" pos:column="35"/></name></expr></argument>, <argument><expr><sizeof pos:line="13" pos:column="37">sizeof <name pos:line="13" pos:column="44">fbuf<pos:position pos:line="13" pos:column="48"/></name></sizeof></expr></argument>)<pos:position pos:line="13" pos:column="49"/></argument_list></call> <operator pos:line="13" pos:column="50">&gt;=<pos:position pos:line="13" pos:column="55"/></operator> <sizeof pos:line="13" pos:column="53">sizeof <name pos:line="13" pos:column="60">fbuf<pos:position pos:line="13" pos:column="64"/></name></sizeof></expr>)<pos:position pos:line="13" pos:column="65"/></condition><then pos:line="13" pos:column="65">
		<block type="pseudo"><return pos:line="14" pos:column="17">return <expr><operator pos:line="14" pos:column="24">-<pos:position pos:line="14" pos:column="25"/></operator><literal type="number" pos:line="14" pos:column="25">1<pos:position pos:line="14" pos:column="26"/></literal></expr>;<pos:position pos:line="14" pos:column="27"/></return></block></then></if>

	<expr_stmt><expr><name pos:line="16" pos:column="9">rel<pos:position pos:line="16" pos:column="12"/></name> <operator pos:line="16" pos:column="13">=<pos:position pos:line="16" pos:column="14"/></operator> <name pos:line="16" pos:column="15">fbuf<pos:position pos:line="16" pos:column="19"/></name> <operator pos:line="16" pos:column="20">+<pos:position pos:line="16" pos:column="21"/></operator> <name pos:line="16" pos:column="22">len<pos:position pos:line="16" pos:column="25"/></name></expr>;<pos:position pos:line="16" pos:column="26"/></expr_stmt>
	<expr_stmt><expr><name pos:line="17" pos:column="9">end<pos:position pos:line="17" pos:column="12"/></name> <operator pos:line="17" pos:column="13">=<pos:position pos:line="17" pos:column="14"/></operator> <name pos:line="17" pos:column="15">p<pos:position pos:line="17" pos:column="16"/></name> <operator pos:line="17" pos:column="17">=<pos:position pos:line="17" pos:column="18"/></operator> <name pos:line="17" pos:column="19">rel<pos:position pos:line="17" pos:column="22"/></name> <operator pos:line="17" pos:column="23">+<pos:position pos:line="17" pos:column="24"/></operator> <call><name pos:line="17" pos:column="25">strlen<pos:position pos:line="17" pos:column="31"/></name><argument_list pos:line="17" pos:column="31">(<argument><expr><name pos:line="17" pos:column="32">rel<pos:position pos:line="17" pos:column="35"/></name></expr></argument>)<pos:position pos:line="17" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="37"/></expr_stmt>

	<comment type="block" pos:line="19" pos:column="9">/* Try to find an existing dir, starting from the deepest dir. */</comment>
	<while pos:line="20" pos:column="9">while <condition pos:line="20" pos:column="15">(<expr><literal type="number" pos:line="20" pos:column="16">1<pos:position pos:line="20" pos:column="17"/></literal></expr>)<pos:position pos:line="20" pos:column="18"/></condition> <block pos:line="20" pos:column="19">{
		<if pos:line="21" pos:column="17">if <condition pos:line="21" pos:column="20">(<expr><operator pos:line="21" pos:column="21">--<pos:position pos:line="21" pos:column="23"/></operator><name pos:line="21" pos:column="23">p<pos:position pos:line="21" pos:column="24"/></name> <operator pos:line="21" pos:column="25">==<pos:position pos:line="21" pos:column="27"/></operator> <name pos:line="21" pos:column="28">fbuf<pos:position pos:line="21" pos:column="32"/></name></expr>)<pos:position pos:line="21" pos:column="33"/></condition><then pos:line="21" pos:column="33">
			<block type="pseudo"><return pos:line="22" pos:column="25">return <expr><operator pos:line="22" pos:column="32">-<pos:position pos:line="22" pos:column="33"/></operator><literal type="number" pos:line="22" pos:column="33">1<pos:position pos:line="22" pos:column="34"/></literal></expr>;<pos:position pos:line="22" pos:column="35"/></return></block></then></if>
		<if pos:line="23" pos:column="17">if <condition pos:line="23" pos:column="20">(<expr><operator pos:line="23" pos:column="21">*<pos:position pos:line="23" pos:column="22"/></operator><name pos:line="23" pos:column="22">p<pos:position pos:line="23" pos:column="23"/></name> <operator pos:line="23" pos:column="24">==<pos:position pos:line="23" pos:column="26"/></operator> <literal type="char" pos:line="23" pos:column="27">'/'<pos:position pos:line="23" pos:column="30"/></literal></expr>)<pos:position pos:line="23" pos:column="31"/></condition><then pos:line="23" pos:column="31"> <block pos:line="23" pos:column="32">{
			<expr_stmt><expr><operator pos:line="24" pos:column="25">*<pos:position pos:line="24" pos:column="26"/></operator><name pos:line="24" pos:column="26">p<pos:position pos:line="24" pos:column="27"/></name> <operator pos:line="24" pos:column="28">=<pos:position pos:line="24" pos:column="29"/></operator> <literal type="char" pos:line="24" pos:column="30">'\0'<pos:position pos:line="24" pos:column="34"/></literal></expr>;<pos:position pos:line="24" pos:column="35"/></expr_stmt>
			<if pos:line="25" pos:column="25">if <condition pos:line="25" pos:column="28">(<expr><call><name pos:line="25" pos:column="29">mkdir_defmode<pos:position pos:line="25" pos:column="42"/></name><argument_list pos:line="25" pos:column="42">(<argument><expr><name pos:line="25" pos:column="43">fbuf<pos:position pos:line="25" pos:column="47"/></name></expr></argument>)<pos:position pos:line="25" pos:column="48"/></argument_list></call> <operator pos:line="25" pos:column="49">==<pos:position pos:line="25" pos:column="51"/></operator> <literal type="number" pos:line="25" pos:column="52">0<pos:position pos:line="25" pos:column="53"/></literal></expr>)<pos:position pos:line="25" pos:column="54"/></condition><then pos:line="25" pos:column="54">
				<block type="pseudo"><break pos:line="26" pos:column="33">break;<pos:position pos:line="26" pos:column="39"/></break></block></then></if>
			<if pos:line="27" pos:column="25">if <condition pos:line="27" pos:column="28">(<expr><name pos:line="27" pos:column="29">errno<pos:position pos:line="27" pos:column="34"/></name> <operator pos:line="27" pos:column="35">!=<pos:position pos:line="27" pos:column="37"/></operator> <name pos:line="27" pos:column="38">ENOENT<pos:position pos:line="27" pos:column="44"/></name></expr>)<pos:position pos:line="27" pos:column="45"/></condition><then pos:line="27" pos:column="45"> <block pos:line="27" pos:column="46">{
				<expr_stmt><expr><call><name pos:line="28" pos:column="33">rsyserr<pos:position pos:line="28" pos:column="40"/></name><argument_list pos:line="28" pos:column="40">(<argument><expr><name pos:line="28" pos:column="41">FERROR<pos:position pos:line="28" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="49">errno<pos:position pos:line="28" pos:column="54"/></name></expr></argument>,
					<argument><expr><literal type="string" pos:line="29" pos:column="41">"make_bak_dir mkdir %s failed"<pos:position pos:line="29" pos:column="71"/></literal></expr></argument>,
					<argument><expr><call><name pos:line="30" pos:column="41">full_fname<pos:position pos:line="30" pos:column="51"/></name><argument_list pos:line="30" pos:column="51">(<argument><expr><name pos:line="30" pos:column="52">fbuf<pos:position pos:line="30" pos:column="56"/></name></expr></argument>)<pos:position pos:line="30" pos:column="57"/></argument_list></call></expr></argument>)<pos:position pos:line="30" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="59"/></expr_stmt>
				<return pos:line="31" pos:column="33">return <expr><operator pos:line="31" pos:column="40">-<pos:position pos:line="31" pos:column="41"/></operator><literal type="number" pos:line="31" pos:column="41">1<pos:position pos:line="31" pos:column="42"/></literal></expr>;<pos:position pos:line="31" pos:column="43"/></return>
			}<pos:position pos:line="32" pos:column="26"/></block></then></if>
		}<pos:position pos:line="33" pos:column="18"/></block></then></if>
	}<pos:position pos:line="34" pos:column="10"/></block></while>

	<comment type="block" pos:line="36" pos:column="9">/* Make all the dirs that we didn't find on the way here. */</comment>
	<while pos:line="37" pos:column="9">while <condition pos:line="37" pos:column="15">(<expr><literal type="number" pos:line="37" pos:column="16">1<pos:position pos:line="37" pos:column="17"/></literal></expr>)<pos:position pos:line="37" pos:column="18"/></condition> <block pos:line="37" pos:column="19">{
		<if pos:line="38" pos:column="17">if <condition pos:line="38" pos:column="20">(<expr><name pos:line="38" pos:column="21">p<pos:position pos:line="38" pos:column="22"/></name> <operator pos:line="38" pos:column="23">&gt;=<pos:position pos:line="38" pos:column="28"/></operator> <name pos:line="38" pos:column="26">rel<pos:position pos:line="38" pos:column="29"/></name></expr>)<pos:position pos:line="38" pos:column="30"/></condition><then pos:line="38" pos:column="30"> <block pos:line="38" pos:column="31">{
			<comment type="block" pos:line="39" pos:column="25">/* Try to transfer the directory settings of the
			 * actual dir that the files are coming from. */</comment>
			<if pos:line="41" pos:column="25">if <condition pos:line="41" pos:column="28">(<expr><call><name pos:line="41" pos:column="29">x_stat<pos:position pos:line="41" pos:column="35"/></name><argument_list pos:line="41" pos:column="35">(<argument><expr><name pos:line="41" pos:column="36">rel<pos:position pos:line="41" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="41" pos:column="41">&amp;<pos:position pos:line="41" pos:column="46"/></operator><name><name pos:line="41" pos:column="42">sx<pos:position pos:line="41" pos:column="44"/></name><operator pos:line="41" pos:column="44">.<pos:position pos:line="41" pos:column="45"/></operator><name pos:line="41" pos:column="45">st<pos:position pos:line="41" pos:column="47"/></name></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="49">NULL<pos:position pos:line="41" pos:column="53"/></name></expr></argument>)<pos:position pos:line="41" pos:column="54"/></argument_list></call> <operator pos:line="41" pos:column="55">&lt;<pos:position pos:line="41" pos:column="59"/></operator> <literal type="number" pos:line="41" pos:column="57">0<pos:position pos:line="41" pos:column="58"/></literal></expr>)<pos:position pos:line="41" pos:column="59"/></condition><then pos:line="41" pos:column="59"> <block pos:line="41" pos:column="60">{
				<expr_stmt><expr><call><name pos:line="42" pos:column="33">rsyserr<pos:position pos:line="42" pos:column="40"/></name><argument_list pos:line="42" pos:column="40">(<argument><expr><name pos:line="42" pos:column="41">FERROR<pos:position pos:line="42" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="49">errno<pos:position pos:line="42" pos:column="54"/></name></expr></argument>,
					<argument><expr><literal type="string" pos:line="43" pos:column="41">"make_bak_dir stat %s failed"<pos:position pos:line="43" pos:column="70"/></literal></expr></argument>,
					<argument><expr><call><name pos:line="44" pos:column="41">full_fname<pos:position pos:line="44" pos:column="51"/></name><argument_list pos:line="44" pos:column="51">(<argument><expr><name pos:line="44" pos:column="52">rel<pos:position pos:line="44" pos:column="55"/></name></expr></argument>)<pos:position pos:line="44" pos:column="56"/></argument_list></call></expr></argument>)<pos:position pos:line="44" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="58"/></expr_stmt>
			}<pos:position pos:line="45" pos:column="26"/></block></then> <else pos:line="45" pos:column="27">else <block pos:line="45" pos:column="32">{
<cpp:ifdef pos:line="46" pos:column="1">#<cpp:directive pos:line="46" pos:column="2">ifdef<pos:position pos:line="46" pos:column="7"/></cpp:directive> <name pos:line="46" pos:column="8">SUPPORT_ACLS<pos:position pos:line="46" pos:column="20"/></name></cpp:ifdef>
				<expr_stmt><expr><name><name pos:line="47" pos:column="33">sx<pos:position pos:line="47" pos:column="35"/></name><operator pos:line="47" pos:column="35">.<pos:position pos:line="47" pos:column="36"/></operator><name pos:line="47" pos:column="36">acc_acl<pos:position pos:line="47" pos:column="43"/></name></name> <operator pos:line="47" pos:column="44">=<pos:position pos:line="47" pos:column="45"/></operator> <name><name pos:line="47" pos:column="46">sx<pos:position pos:line="47" pos:column="48"/></name><operator pos:line="47" pos:column="48">.<pos:position pos:line="47" pos:column="49"/></operator><name pos:line="47" pos:column="49">def_acl<pos:position pos:line="47" pos:column="56"/></name></name> <operator pos:line="47" pos:column="57">=<pos:position pos:line="47" pos:column="58"/></operator> <name pos:line="47" pos:column="59">NULL<pos:position pos:line="47" pos:column="63"/></name></expr>;<pos:position pos:line="47" pos:column="64"/></expr_stmt>
<cpp:endif pos:line="48" pos:column="1">#<cpp:directive pos:line="48" pos:column="2">endif<pos:position pos:line="48" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:ifdef pos:line="49" pos:column="1">#<cpp:directive pos:line="49" pos:column="2">ifdef<pos:position pos:line="49" pos:column="7"/></cpp:directive> <name pos:line="49" pos:column="8">SUPPORT_XATTRS<pos:position pos:line="49" pos:column="22"/></name></cpp:ifdef>
				<expr_stmt><expr><name><name pos:line="50" pos:column="33">sx<pos:position pos:line="50" pos:column="35"/></name><operator pos:line="50" pos:column="35">.<pos:position pos:line="50" pos:column="36"/></operator><name pos:line="50" pos:column="36">xattr<pos:position pos:line="50" pos:column="41"/></name></name> <operator pos:line="50" pos:column="42">=<pos:position pos:line="50" pos:column="43"/></operator> <name pos:line="50" pos:column="44">NULL<pos:position pos:line="50" pos:column="48"/></name></expr>;<pos:position pos:line="50" pos:column="49"/></expr_stmt>
<cpp:endif pos:line="51" pos:column="1">#<cpp:directive pos:line="51" pos:column="2">endif<pos:position pos:line="51" pos:column="7"/></cpp:directive></cpp:endif>
				<if pos:line="52" pos:column="33">if <condition pos:line="52" pos:column="36">(<expr><operator pos:line="52" pos:column="37">!<pos:position pos:line="52" pos:column="38"/></operator><operator pos:line="52" pos:column="38">(<pos:position pos:line="52" pos:column="39"/></operator><name pos:line="52" pos:column="39">file<pos:position pos:line="52" pos:column="43"/></name> <operator pos:line="52" pos:column="44">=<pos:position pos:line="52" pos:column="45"/></operator> <call><name pos:line="52" pos:column="46">make_file<pos:position pos:line="52" pos:column="55"/></name><argument_list pos:line="52" pos:column="55">(<argument><expr><name pos:line="52" pos:column="56">rel<pos:position pos:line="52" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="61">NULL<pos:position pos:line="52" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="67">NULL<pos:position pos:line="52" pos:column="71"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="52" pos:column="73">0<pos:position pos:line="52" pos:column="74"/></literal></expr></argument>, <argument><expr><name pos:line="52" pos:column="76">NO_FILTERS<pos:position pos:line="52" pos:column="86"/></name></expr></argument>)<pos:position pos:line="52" pos:column="87"/></argument_list></call><operator pos:line="52" pos:column="87">)<pos:position pos:line="52" pos:column="88"/></operator></expr>)<pos:position pos:line="52" pos:column="89"/></condition><then pos:line="52" pos:column="89">
					<block type="pseudo"><continue pos:line="53" pos:column="41">continue;<pos:position pos:line="53" pos:column="50"/></continue></block></then></if>
<cpp:ifdef pos:line="54" pos:column="1">#<cpp:directive pos:line="54" pos:column="2">ifdef<pos:position pos:line="54" pos:column="7"/></cpp:directive> <name pos:line="54" pos:column="8">SUPPORT_ACLS<pos:position pos:line="54" pos:column="20"/></name></cpp:ifdef>
				<if pos:line="55" pos:column="33">if <condition pos:line="55" pos:column="36">(<expr><name pos:line="55" pos:column="37">preserve_acls<pos:position pos:line="55" pos:column="50"/></name> <operator pos:line="55" pos:column="51">&amp;&amp;<pos:position pos:line="55" pos:column="61"/></operator> <operator pos:line="55" pos:column="54">!<pos:position pos:line="55" pos:column="55"/></operator><call><name pos:line="55" pos:column="55">S_ISLNK<pos:position pos:line="55" pos:column="62"/></name><argument_list pos:line="55" pos:column="62">(<argument><expr><name><name pos:line="55" pos:column="63">file<pos:position pos:line="55" pos:column="67"/></name><operator pos:line="55" pos:column="67">-&gt;<pos:position pos:line="55" pos:column="72"/></operator><name pos:line="55" pos:column="69">mode<pos:position pos:line="55" pos:column="73"/></name></name></expr></argument>)<pos:position pos:line="55" pos:column="74"/></argument_list></call></expr>)<pos:position pos:line="55" pos:column="75"/></condition><then pos:line="55" pos:column="75"> <block pos:line="55" pos:column="76">{
					<expr_stmt><expr><call><name pos:line="56" pos:column="41">get_acl<pos:position pos:line="56" pos:column="48"/></name><argument_list pos:line="56" pos:column="48">(<argument><expr><name pos:line="56" pos:column="49">rel<pos:position pos:line="56" pos:column="52"/></name></expr></argument>, <argument><expr><operator pos:line="56" pos:column="54">&amp;<pos:position pos:line="56" pos:column="59"/></operator><name pos:line="56" pos:column="55">sx<pos:position pos:line="56" pos:column="57"/></name></expr></argument>)<pos:position pos:line="56" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="59"/></expr_stmt>
					<expr_stmt><expr><call><name pos:line="57" pos:column="41">cache_tmp_acl<pos:position pos:line="57" pos:column="54"/></name><argument_list pos:line="57" pos:column="54">(<argument><expr><name pos:line="57" pos:column="55">file<pos:position pos:line="57" pos:column="59"/></name></expr></argument>, <argument><expr><operator pos:line="57" pos:column="61">&amp;<pos:position pos:line="57" pos:column="66"/></operator><name pos:line="57" pos:column="62">sx<pos:position pos:line="57" pos:column="64"/></name></expr></argument>)<pos:position pos:line="57" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="66"/></expr_stmt>
					<expr_stmt><expr><call><name pos:line="58" pos:column="41">free_acl<pos:position pos:line="58" pos:column="49"/></name><argument_list pos:line="58" pos:column="49">(<argument><expr><operator pos:line="58" pos:column="50">&amp;<pos:position pos:line="58" pos:column="55"/></operator><name pos:line="58" pos:column="51">sx<pos:position pos:line="58" pos:column="53"/></name></expr></argument>)<pos:position pos:line="58" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="55"/></expr_stmt>
				}<pos:position pos:line="59" pos:column="34"/></block></then></if>
<cpp:endif pos:line="60" pos:column="1">#<cpp:directive pos:line="60" pos:column="2">endif<pos:position pos:line="60" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:ifdef pos:line="61" pos:column="1">#<cpp:directive pos:line="61" pos:column="2">ifdef<pos:position pos:line="61" pos:column="7"/></cpp:directive> <name pos:line="61" pos:column="8">SUPPORT_XATTRS<pos:position pos:line="61" pos:column="22"/></name></cpp:ifdef>
				<if pos:line="62" pos:column="33">if <condition pos:line="62" pos:column="36">(<expr><name pos:line="62" pos:column="37">preserve_xattrs<pos:position pos:line="62" pos:column="52"/></name></expr>)<pos:position pos:line="62" pos:column="53"/></condition><then pos:line="62" pos:column="53"> <block pos:line="62" pos:column="54">{
					<expr_stmt><expr><call><name pos:line="63" pos:column="41">get_xattr<pos:position pos:line="63" pos:column="50"/></name><argument_list pos:line="63" pos:column="50">(<argument><expr><name pos:line="63" pos:column="51">rel<pos:position pos:line="63" pos:column="54"/></name></expr></argument>, <argument><expr><operator pos:line="63" pos:column="56">&amp;<pos:position pos:line="63" pos:column="61"/></operator><name pos:line="63" pos:column="57">sx<pos:position pos:line="63" pos:column="59"/></name></expr></argument>)<pos:position pos:line="63" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="61"/></expr_stmt>
					<expr_stmt><expr><call><name pos:line="64" pos:column="41">cache_tmp_xattr<pos:position pos:line="64" pos:column="56"/></name><argument_list pos:line="64" pos:column="56">(<argument><expr><name pos:line="64" pos:column="57">file<pos:position pos:line="64" pos:column="61"/></name></expr></argument>, <argument><expr><operator pos:line="64" pos:column="63">&amp;<pos:position pos:line="64" pos:column="68"/></operator><name pos:line="64" pos:column="64">sx<pos:position pos:line="64" pos:column="66"/></name></expr></argument>)<pos:position pos:line="64" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="68"/></expr_stmt>
					<expr_stmt><expr><call><name pos:line="65" pos:column="41">free_xattr<pos:position pos:line="65" pos:column="51"/></name><argument_list pos:line="65" pos:column="51">(<argument><expr><operator pos:line="65" pos:column="52">&amp;<pos:position pos:line="65" pos:column="57"/></operator><name pos:line="65" pos:column="53">sx<pos:position pos:line="65" pos:column="55"/></name></expr></argument>)<pos:position pos:line="65" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="57"/></expr_stmt>
				}<pos:position pos:line="66" pos:column="34"/></block></then></if>
<cpp:endif pos:line="67" pos:column="1">#<cpp:directive pos:line="67" pos:column="2">endif<pos:position pos:line="67" pos:column="7"/></cpp:directive></cpp:endif>
				<expr_stmt><expr><call><name pos:line="68" pos:column="33">set_file_attrs<pos:position pos:line="68" pos:column="47"/></name><argument_list pos:line="68" pos:column="47">(<argument><expr><name pos:line="68" pos:column="48">fbuf<pos:position pos:line="68" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="68" pos:column="54">file<pos:position pos:line="68" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="68" pos:column="60">NULL<pos:position pos:line="68" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="68" pos:column="66">NULL<pos:position pos:line="68" pos:column="70"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="68" pos:column="72">0<pos:position pos:line="68" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="68" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="75"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="69" pos:column="33">unmake_file<pos:position pos:line="69" pos:column="44"/></name><argument_list pos:line="69" pos:column="44">(<argument><expr><name pos:line="69" pos:column="45">file<pos:position pos:line="69" pos:column="49"/></name></expr></argument>)<pos:position pos:line="69" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="51"/></expr_stmt>
<cpp:ifdef pos:line="70" pos:column="1">#<cpp:directive pos:line="70" pos:column="2">ifdef<pos:position pos:line="70" pos:column="7"/></cpp:directive> <name pos:line="70" pos:column="8">SUPPORT_ACLS<pos:position pos:line="70" pos:column="20"/></name></cpp:ifdef>
				<expr_stmt><expr><call><name pos:line="71" pos:column="33">uncache_tmp_acls<pos:position pos:line="71" pos:column="49"/></name><argument_list pos:line="71" pos:column="49">()<pos:position pos:line="71" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="52"/></expr_stmt>
<cpp:endif pos:line="72" pos:column="1">#<cpp:directive pos:line="72" pos:column="2">endif<pos:position pos:line="72" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:ifdef pos:line="73" pos:column="1">#<cpp:directive pos:line="73" pos:column="2">ifdef<pos:position pos:line="73" pos:column="7"/></cpp:directive> <name pos:line="73" pos:column="8">SUPPORT_XATTRS<pos:position pos:line="73" pos:column="22"/></name></cpp:ifdef>
				<expr_stmt><expr><call><name pos:line="74" pos:column="33">uncache_tmp_xattrs<pos:position pos:line="74" pos:column="51"/></name><argument_list pos:line="74" pos:column="51">()<pos:position pos:line="74" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="54"/></expr_stmt>
<cpp:endif pos:line="75" pos:column="1">#<cpp:directive pos:line="75" pos:column="2">endif<pos:position pos:line="75" pos:column="7"/></cpp:directive></cpp:endif>
			}<pos:position pos:line="76" pos:column="26"/></block></else></if>
		}<pos:position pos:line="77" pos:column="18"/></block></then></if>
		<expr_stmt><expr><operator pos:line="78" pos:column="17">*<pos:position pos:line="78" pos:column="18"/></operator><name pos:line="78" pos:column="18">p<pos:position pos:line="78" pos:column="19"/></name> <operator pos:line="78" pos:column="20">=<pos:position pos:line="78" pos:column="21"/></operator> <literal type="char" pos:line="78" pos:column="22">'/'<pos:position pos:line="78" pos:column="25"/></literal></expr>;<pos:position pos:line="78" pos:column="26"/></expr_stmt>
		<expr_stmt><expr><name pos:line="79" pos:column="17">p<pos:position pos:line="79" pos:column="18"/></name> <operator pos:line="79" pos:column="19">+=<pos:position pos:line="79" pos:column="21"/></operator> <call><name pos:line="79" pos:column="22">strlen<pos:position pos:line="79" pos:column="28"/></name><argument_list pos:line="79" pos:column="28">(<argument><expr><name pos:line="79" pos:column="29">p<pos:position pos:line="79" pos:column="30"/></name></expr></argument>)<pos:position pos:line="79" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="32"/></expr_stmt>
		<if pos:line="80" pos:column="17">if <condition pos:line="80" pos:column="20">(<expr><name pos:line="80" pos:column="21">p<pos:position pos:line="80" pos:column="22"/></name> <operator pos:line="80" pos:column="23">==<pos:position pos:line="80" pos:column="25"/></operator> <name pos:line="80" pos:column="26">end<pos:position pos:line="80" pos:column="29"/></name></expr>)<pos:position pos:line="80" pos:column="30"/></condition><then pos:line="80" pos:column="30">
			<block type="pseudo"><break pos:line="81" pos:column="25">break;<pos:position pos:line="81" pos:column="31"/></break></block></then></if>
		<if pos:line="82" pos:column="17">if <condition pos:line="82" pos:column="20">(<expr><call><name pos:line="82" pos:column="21">mkdir_defmode<pos:position pos:line="82" pos:column="34"/></name><argument_list pos:line="82" pos:column="34">(<argument><expr><name pos:line="82" pos:column="35">fbuf<pos:position pos:line="82" pos:column="39"/></name></expr></argument>)<pos:position pos:line="82" pos:column="40"/></argument_list></call> <operator pos:line="82" pos:column="41">&lt;<pos:position pos:line="82" pos:column="45"/></operator> <literal type="number" pos:line="82" pos:column="43">0<pos:position pos:line="82" pos:column="44"/></literal></expr>)<pos:position pos:line="82" pos:column="45"/></condition><then pos:line="82" pos:column="45"> <block pos:line="82" pos:column="46">{
			<expr_stmt><expr><call><name pos:line="83" pos:column="25">rsyserr<pos:position pos:line="83" pos:column="32"/></name><argument_list pos:line="83" pos:column="32">(<argument><expr><name pos:line="83" pos:column="33">FERROR<pos:position pos:line="83" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="83" pos:column="41">errno<pos:position pos:line="83" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="83" pos:column="48">"make_bak_dir mkdir %s failed"<pos:position pos:line="83" pos:column="78"/></literal></expr></argument>,
				<argument><expr><call><name pos:line="84" pos:column="33">full_fname<pos:position pos:line="84" pos:column="43"/></name><argument_list pos:line="84" pos:column="43">(<argument><expr><name pos:line="84" pos:column="44">fbuf<pos:position pos:line="84" pos:column="48"/></name></expr></argument>)<pos:position pos:line="84" pos:column="49"/></argument_list></call></expr></argument>)<pos:position pos:line="84" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="51"/></expr_stmt>
			<return pos:line="85" pos:column="25">return <expr><operator pos:line="85" pos:column="32">-<pos:position pos:line="85" pos:column="33"/></operator><literal type="number" pos:line="85" pos:column="33">1<pos:position pos:line="85" pos:column="34"/></literal></expr>;<pos:position pos:line="85" pos:column="35"/></return>
		}<pos:position pos:line="86" pos:column="18"/></block></then></if>
	}<pos:position pos:line="87" pos:column="10"/></block></while>

	<return pos:line="89" pos:column="9">return <expr><literal type="number" pos:line="89" pos:column="16">0<pos:position pos:line="89" pos:column="17"/></literal></expr>;<pos:position pos:line="89" pos:column="18"/></return>
}<pos:position pos:line="90" pos:column="2"/></block></function></unit>
