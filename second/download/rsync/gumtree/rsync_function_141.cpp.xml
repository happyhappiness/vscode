<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_function_141.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">do_server_sender<pos:position pos:line="1" pos:column="22"/></name><parameter_list pos:line="1" pos:column="22">(<parameter><decl><type><name pos:line="1" pos:column="23">int<pos:position pos:line="1" pos:column="26"/></name></type> <name pos:line="1" pos:column="27">argc<pos:position pos:line="1" pos:column="31"/></name></decl></parameter>,<parameter><decl><type><name pos:line="1" pos:column="32">char<pos:position pos:line="1" pos:column="36"/></name> <modifier pos:line="1" pos:column="37">*<pos:position pos:line="1" pos:column="38"/></modifier></type><name><name pos:line="1" pos:column="38">argv<pos:position pos:line="1" pos:column="42"/></name><index pos:line="1" pos:column="42">[]<pos:position pos:line="1" pos:column="44"/></index></name></decl></parameter>)<pos:position pos:line="1" pos:column="45"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">int<pos:position pos:line="3" pos:column="6"/></name></type> <name pos:line="3" pos:column="7">i<pos:position pos:line="3" pos:column="8"/></name></decl>;<pos:position pos:line="3" pos:column="9"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">char<pos:position pos:line="4" pos:column="7"/></name> <modifier pos:line="4" pos:column="8">*<pos:position pos:line="4" pos:column="9"/></modifier></type><name pos:line="4" pos:column="9">dir<pos:position pos:line="4" pos:column="12"/></name> <init pos:line="4" pos:column="13">= <expr><name><name pos:line="4" pos:column="15">argv<pos:position pos:line="4" pos:column="19"/></name><index pos:line="4" pos:column="19">[<expr><literal type="number" pos:line="4" pos:column="20">0<pos:position pos:line="4" pos:column="21"/></literal></expr>]<pos:position pos:line="4" pos:column="22"/></index></name></expr></init></decl>;<pos:position pos:line="4" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="5" pos:column="3">struct<pos:position pos:line="5" pos:column="9"/></name> <name pos:line="5" pos:column="10">file_list<pos:position pos:line="5" pos:column="19"/></name></name> <modifier pos:line="5" pos:column="20">*<pos:position pos:line="5" pos:column="21"/></modifier></type><name pos:line="5" pos:column="21">flist<pos:position pos:line="5" pos:column="26"/></name></decl>;<pos:position pos:line="5" pos:column="27"/></decl_stmt>

  <if pos:line="7" pos:column="3">if <condition pos:line="7" pos:column="6">(<expr><name pos:line="7" pos:column="7">verbose<pos:position pos:line="7" pos:column="14"/></name> <operator pos:line="7" pos:column="15">&gt;<pos:position pos:line="7" pos:column="19"/></operator> <literal type="number" pos:line="7" pos:column="17">2<pos:position pos:line="7" pos:column="18"/></literal></expr>)<pos:position pos:line="7" pos:column="19"/></condition><then pos:line="7" pos:column="19">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="8" pos:column="5">fprintf<pos:position pos:line="8" pos:column="12"/></name><argument_list pos:line="8" pos:column="12">(<argument><expr><name pos:line="8" pos:column="13">stderr<pos:position pos:line="8" pos:column="19"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="8" pos:column="20">"server_sender starting pid=%d\n"<pos:position pos:line="8" pos:column="53"/></literal></expr></argument>,<argument><expr><operator pos:line="8" pos:column="54">(<pos:position pos:line="8" pos:column="55"/></operator><name pos:line="8" pos:column="55">int<pos:position pos:line="8" pos:column="58"/></name><operator pos:line="8" pos:column="58">)<pos:position pos:line="8" pos:column="59"/></operator><call><name pos:line="8" pos:column="59">getpid<pos:position pos:line="8" pos:column="65"/></name><argument_list pos:line="8" pos:column="65">()<pos:position pos:line="8" pos:column="67"/></argument_list></call></expr></argument>)<pos:position pos:line="8" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="69"/></expr_stmt></block></then></if>
  
  <if pos:line="10" pos:column="3">if <condition pos:line="10" pos:column="6">(<expr><call><name pos:line="10" pos:column="7">chdir<pos:position pos:line="10" pos:column="12"/></name><argument_list pos:line="10" pos:column="12">(<argument><expr><name pos:line="10" pos:column="13">dir<pos:position pos:line="10" pos:column="16"/></name></expr></argument>)<pos:position pos:line="10" pos:column="17"/></argument_list></call> <operator pos:line="10" pos:column="18">!=<pos:position pos:line="10" pos:column="20"/></operator> <literal type="number" pos:line="10" pos:column="21">0<pos:position pos:line="10" pos:column="22"/></literal></expr>)<pos:position pos:line="10" pos:column="23"/></condition><then pos:line="10" pos:column="23"> <block pos:line="10" pos:column="24">{
    <expr_stmt><expr><call><name pos:line="11" pos:column="5">fprintf<pos:position pos:line="11" pos:column="12"/></name><argument_list pos:line="11" pos:column="12">(<argument><expr><name pos:line="11" pos:column="13">stderr<pos:position pos:line="11" pos:column="19"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="11" pos:column="20">"chdir %s: %s\n"<pos:position pos:line="11" pos:column="36"/></literal></expr></argument>,<argument><expr><name pos:line="11" pos:column="37">dir<pos:position pos:line="11" pos:column="40"/></name></expr></argument>,<argument><expr><call><name pos:line="11" pos:column="41">strerror<pos:position pos:line="11" pos:column="49"/></name><argument_list pos:line="11" pos:column="49">(<argument><expr><name pos:line="11" pos:column="50">errno<pos:position pos:line="11" pos:column="55"/></name></expr></argument>)<pos:position pos:line="11" pos:column="56"/></argument_list></call></expr></argument>)<pos:position pos:line="11" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="58"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="12" pos:column="5">exit_cleanup<pos:position pos:line="12" pos:column="17"/></name><argument_list pos:line="12" pos:column="17">(<argument><expr><literal type="number" pos:line="12" pos:column="18">1<pos:position pos:line="12" pos:column="19"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="21"/></expr_stmt>
  }<pos:position pos:line="13" pos:column="4"/></block></then></if>
  <expr_stmt><expr><name pos:line="14" pos:column="3">argc<pos:position pos:line="14" pos:column="7"/></name><operator pos:line="14" pos:column="7">--<pos:position pos:line="14" pos:column="9"/></operator></expr>;<pos:position pos:line="14" pos:column="10"/></expr_stmt>
  <expr_stmt><expr><name pos:line="15" pos:column="3">argv<pos:position pos:line="15" pos:column="7"/></name><operator pos:line="15" pos:column="7">++<pos:position pos:line="15" pos:column="9"/></operator></expr>;<pos:position pos:line="15" pos:column="10"/></expr_stmt>
  
  <if pos:line="17" pos:column="3">if <condition pos:line="17" pos:column="6">(<expr><call><name pos:line="17" pos:column="7">strcmp<pos:position pos:line="17" pos:column="13"/></name><argument_list pos:line="17" pos:column="13">(<argument><expr><name pos:line="17" pos:column="14">dir<pos:position pos:line="17" pos:column="17"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="17" pos:column="18">"."<pos:position pos:line="17" pos:column="21"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="22"/></argument_list></call></expr>)<pos:position pos:line="17" pos:column="23"/></condition><then pos:line="17" pos:column="23"> <block pos:line="17" pos:column="24">{
    <decl_stmt><decl><type><name pos:line="18" pos:column="5">int<pos:position pos:line="18" pos:column="8"/></name></type> <name pos:line="18" pos:column="9">l<pos:position pos:line="18" pos:column="10"/></name> <init pos:line="18" pos:column="11">= <expr><call><name pos:line="18" pos:column="13">strlen<pos:position pos:line="18" pos:column="19"/></name><argument_list pos:line="18" pos:column="19">(<argument><expr><name pos:line="18" pos:column="20">dir<pos:position pos:line="18" pos:column="23"/></name></expr></argument>)<pos:position pos:line="18" pos:column="24"/></argument_list></call></expr></init></decl>;<pos:position pos:line="18" pos:column="25"/></decl_stmt>
    <for pos:line="19" pos:column="5">for <control pos:line="19" pos:column="9">(<init><expr><name pos:line="19" pos:column="10">i<pos:position pos:line="19" pos:column="11"/></name><operator pos:line="19" pos:column="11">=<pos:position pos:line="19" pos:column="12"/></operator><literal type="number" pos:line="19" pos:column="12">0<pos:position pos:line="19" pos:column="13"/></literal></expr>;<pos:position pos:line="19" pos:column="14"/></init><condition><expr><name pos:line="19" pos:column="14">i<pos:position pos:line="19" pos:column="15"/></name><operator pos:line="19" pos:column="15">&lt;<pos:position pos:line="19" pos:column="19"/></operator><name pos:line="19" pos:column="16">argc<pos:position pos:line="19" pos:column="20"/></name></expr>;<pos:position pos:line="19" pos:column="21"/></condition><incr><expr><name pos:line="19" pos:column="21">i<pos:position pos:line="19" pos:column="22"/></name><operator pos:line="19" pos:column="22">++<pos:position pos:line="19" pos:column="24"/></operator></expr></incr>)<pos:position pos:line="19" pos:column="25"/></control>
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="20" pos:column="7">argv<pos:position pos:line="20" pos:column="11"/></name><index pos:line="20" pos:column="11">[<expr><name pos:line="20" pos:column="12">i<pos:position pos:line="20" pos:column="13"/></name></expr>]<pos:position pos:line="20" pos:column="14"/></index></name> <operator pos:line="20" pos:column="15">+=<pos:position pos:line="20" pos:column="17"/></operator> <name pos:line="20" pos:column="18">l<pos:position pos:line="20" pos:column="19"/></name><operator pos:line="20" pos:column="19">+<pos:position pos:line="20" pos:column="20"/></operator><literal type="number" pos:line="20" pos:column="20">1<pos:position pos:line="20" pos:column="21"/></literal></expr>;<pos:position pos:line="20" pos:column="22"/></expr_stmt></block></for>
  }<pos:position pos:line="21" pos:column="4"/></block></then></if>

  <if pos:line="23" pos:column="3">if <condition pos:line="23" pos:column="6">(<expr><name pos:line="23" pos:column="7">argc<pos:position pos:line="23" pos:column="11"/></name> <operator pos:line="23" pos:column="12">==<pos:position pos:line="23" pos:column="14"/></operator> <literal type="number" pos:line="23" pos:column="15">0<pos:position pos:line="23" pos:column="16"/></literal> <operator pos:line="23" pos:column="17">&amp;&amp;<pos:position pos:line="23" pos:column="27"/></operator> <name pos:line="23" pos:column="20">recurse<pos:position pos:line="23" pos:column="27"/></name></expr>)<pos:position pos:line="23" pos:column="28"/></condition><then pos:line="23" pos:column="28"> <block pos:line="23" pos:column="29">{
    <expr_stmt><expr><name pos:line="24" pos:column="5">argc<pos:position pos:line="24" pos:column="9"/></name><operator pos:line="24" pos:column="9">=<pos:position pos:line="24" pos:column="10"/></operator><literal type="number" pos:line="24" pos:column="10">1<pos:position pos:line="24" pos:column="11"/></literal></expr>;<pos:position pos:line="24" pos:column="12"/></expr_stmt>
    <expr_stmt><expr><name pos:line="25" pos:column="5">argv<pos:position pos:line="25" pos:column="9"/></name><operator pos:line="25" pos:column="9">--<pos:position pos:line="25" pos:column="11"/></operator></expr>;<pos:position pos:line="25" pos:column="12"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="26" pos:column="5">argv<pos:position pos:line="26" pos:column="9"/></name><index pos:line="26" pos:column="9">[<expr><literal type="number" pos:line="26" pos:column="10">0<pos:position pos:line="26" pos:column="11"/></literal></expr>]<pos:position pos:line="26" pos:column="12"/></index></name> <operator pos:line="26" pos:column="13">=<pos:position pos:line="26" pos:column="14"/></operator> <literal type="string" pos:line="26" pos:column="15">"."<pos:position pos:line="26" pos:column="18"/></literal></expr>;<pos:position pos:line="26" pos:column="19"/></expr_stmt>
  }<pos:position pos:line="27" pos:column="4"/></block></then></if>
    

  <expr_stmt><expr><name pos:line="30" pos:column="3">flist<pos:position pos:line="30" pos:column="8"/></name> <operator pos:line="30" pos:column="9">=<pos:position pos:line="30" pos:column="10"/></operator> <call><name pos:line="30" pos:column="11">send_file_list<pos:position pos:line="30" pos:column="25"/></name><argument_list pos:line="30" pos:column="25">(<argument><expr><name pos:line="30" pos:column="26">STDOUT_FILENO<pos:position pos:line="30" pos:column="39"/></name></expr></argument>,<argument><expr><name pos:line="30" pos:column="40">recurse<pos:position pos:line="30" pos:column="47"/></name></expr></argument>,<argument><expr><name pos:line="30" pos:column="48">argc<pos:position pos:line="30" pos:column="52"/></name></expr></argument>,<argument><expr><name pos:line="30" pos:column="53">argv<pos:position pos:line="30" pos:column="57"/></name></expr></argument>)<pos:position pos:line="30" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="59"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="31" pos:column="3">send_files<pos:position pos:line="31" pos:column="13"/></name><argument_list pos:line="31" pos:column="13">(<argument><expr><name pos:line="31" pos:column="14">flist<pos:position pos:line="31" pos:column="19"/></name></expr></argument>,<argument><expr><name pos:line="31" pos:column="20">STDOUT_FILENO<pos:position pos:line="31" pos:column="33"/></name></expr></argument>,<argument><expr><name pos:line="31" pos:column="34">STDIN_FILENO<pos:position pos:line="31" pos:column="46"/></name></expr></argument>)<pos:position pos:line="31" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="48"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="32" pos:column="3">report<pos:position pos:line="32" pos:column="9"/></name><argument_list pos:line="32" pos:column="9">(<argument><expr><name pos:line="32" pos:column="10">STDOUT_FILENO<pos:position pos:line="32" pos:column="23"/></name></expr></argument>)<pos:position pos:line="32" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="33" pos:column="3">exit_cleanup<pos:position pos:line="33" pos:column="15"/></name><argument_list pos:line="33" pos:column="15">(<argument><expr><literal type="number" pos:line="33" pos:column="16">0<pos:position pos:line="33" pos:column="17"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="19"/></expr_stmt>
}<pos:position pos:line="34" pos:column="2"/></block></function></unit>
