<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_206_rsync-1.7.4.cpp" pos:tabs="8"><decl_stmt><decl><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">inflateInit2<pos:position pos:line="1" pos:column="17"/></name><argument_list pos:line="1" pos:column="17">(<argument><expr><name pos:line="1" pos:column="18">z<pos:position pos:line="1" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="1" pos:column="21">w<pos:position pos:line="1" pos:column="22"/></name></expr></argument>)<pos:position pos:line="1" pos:column="23"/></argument_list>
<name pos:line="2" pos:column="1">z_stream<pos:position pos:line="2" pos:column="9"/></name> <modifier pos:line="2" pos:column="10">*<pos:position pos:line="2" pos:column="11"/></modifier><name pos:line="2" pos:column="11">z<pos:position pos:line="2" pos:column="12"/></name></decl>;<pos:position pos:line="2" pos:column="13"/></decl_stmt>
<decl_stmt><decl><type><name pos:line="3" pos:column="1">int<pos:position pos:line="3" pos:column="4"/></name></type> <name pos:line="3" pos:column="5">w<pos:position pos:line="3" pos:column="6"/></name></decl>;<pos:position pos:line="3" pos:column="7"/></decl_stmt>
<block pos:line="4" pos:column="1">{
  <comment type="block" pos:line="5" pos:column="3">/* initialize state */</comment>
  <if pos:line="6" pos:column="3">if <condition pos:line="6" pos:column="6">(<expr><name pos:line="6" pos:column="7">z<pos:position pos:line="6" pos:column="8"/></name> <operator pos:line="6" pos:column="9">==<pos:position pos:line="6" pos:column="11"/></operator> <name pos:line="6" pos:column="12">Z_NULL<pos:position pos:line="6" pos:column="18"/></name></expr>)<pos:position pos:line="6" pos:column="19"/></condition><then pos:line="6" pos:column="19">
    <block type="pseudo"><return pos:line="7" pos:column="5">return <expr><name pos:line="7" pos:column="12">Z_STREAM_ERROR<pos:position pos:line="7" pos:column="26"/></name></expr>;<pos:position pos:line="7" pos:column="27"/></return></block></then></if>
<comment type="block" pos:line="8" pos:column="1">/*  if (z-&gt;zalloc == Z_NULL) z-&gt;zalloc = zcalloc; */</comment>
<comment type="block" pos:line="9" pos:column="1">/*  if (z-&gt;zfree == Z_NULL) z-&gt;zfree = zcfree; */</comment>
  <if pos:line="10" pos:column="3">if <condition pos:line="10" pos:column="6">(<expr><operator pos:line="10" pos:column="7">(<pos:position pos:line="10" pos:column="8"/></operator><name><name pos:line="10" pos:column="8">z<pos:position pos:line="10" pos:column="9"/></name><operator pos:line="10" pos:column="9">-&gt;<pos:position pos:line="10" pos:column="14"/></operator><name pos:line="10" pos:column="11">state<pos:position pos:line="10" pos:column="16"/></name></name> <operator pos:line="10" pos:column="17">=<pos:position pos:line="10" pos:column="18"/></operator> <operator pos:line="10" pos:column="19">(<pos:position pos:line="10" pos:column="20"/></operator>struct <name pos:line="10" pos:column="27">internal_state<pos:position pos:line="10" pos:column="41"/></name> <name pos:line="10" pos:column="42">FAR<pos:position pos:line="10" pos:column="45"/></name> <operator pos:line="10" pos:column="46">*<pos:position pos:line="10" pos:column="47"/></operator><operator pos:line="10" pos:column="47">)<pos:position pos:line="10" pos:column="48"/></operator>
       <call><name pos:line="11" pos:column="8">ZALLOC<pos:position pos:line="11" pos:column="14"/></name><argument_list pos:line="11" pos:column="14">(<argument><expr><name pos:line="11" pos:column="15">z<pos:position pos:line="11" pos:column="16"/></name></expr></argument>,<argument><expr><literal type="number" pos:line="11" pos:column="17">1<pos:position pos:line="11" pos:column="18"/></literal></expr></argument>,<argument><expr><sizeof pos:line="11" pos:column="19">sizeof<argument_list pos:line="11" pos:column="25">(<argument><expr pos:line="11" pos:column="26">struct <name pos:line="11" pos:column="33">internal_state<pos:position pos:line="11" pos:column="47"/></name></expr></argument>)<pos:position pos:line="11" pos:column="48"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="11" pos:column="49"/></argument_list></call><operator pos:line="11" pos:column="49">)<pos:position pos:line="11" pos:column="50"/></operator> <operator pos:line="11" pos:column="51">==<pos:position pos:line="11" pos:column="53"/></operator> <name pos:line="11" pos:column="54">Z_NULL<pos:position pos:line="11" pos:column="60"/></name></expr>)<pos:position pos:line="11" pos:column="61"/></condition><then pos:line="11" pos:column="61">
    <block type="pseudo"><return pos:line="12" pos:column="5">return <expr><name pos:line="12" pos:column="12">Z_MEM_ERROR<pos:position pos:line="12" pos:column="23"/></name></expr>;<pos:position pos:line="12" pos:column="24"/></return></block></then></if>
  <expr_stmt><expr><name><name pos:line="13" pos:column="3">z<pos:position pos:line="13" pos:column="4"/></name><operator pos:line="13" pos:column="4">-&gt;<pos:position pos:line="13" pos:column="9"/></operator><name pos:line="13" pos:column="6">state<pos:position pos:line="13" pos:column="11"/></name><operator pos:line="13" pos:column="11">-&gt;<pos:position pos:line="13" pos:column="16"/></operator><name pos:line="13" pos:column="13">blocks<pos:position pos:line="13" pos:column="19"/></name></name> <operator pos:line="13" pos:column="20">=<pos:position pos:line="13" pos:column="21"/></operator> <name pos:line="13" pos:column="22">Z_NULL<pos:position pos:line="13" pos:column="28"/></name></expr>;<pos:position pos:line="13" pos:column="29"/></expr_stmt>

  <comment type="block" pos:line="15" pos:column="3">/* handle undocumented nowrap option (no zlib header or check) */</comment>
  <expr_stmt><expr><name><name pos:line="16" pos:column="3">z<pos:position pos:line="16" pos:column="4"/></name><operator pos:line="16" pos:column="4">-&gt;<pos:position pos:line="16" pos:column="9"/></operator><name pos:line="16" pos:column="6">state<pos:position pos:line="16" pos:column="11"/></name><operator pos:line="16" pos:column="11">-&gt;<pos:position pos:line="16" pos:column="16"/></operator><name pos:line="16" pos:column="13">nowrap<pos:position pos:line="16" pos:column="19"/></name></name> <operator pos:line="16" pos:column="20">=<pos:position pos:line="16" pos:column="21"/></operator> <literal type="number" pos:line="16" pos:column="22">0<pos:position pos:line="16" pos:column="23"/></literal></expr>;<pos:position pos:line="16" pos:column="24"/></expr_stmt>
  <if pos:line="17" pos:column="3">if <condition pos:line="17" pos:column="6">(<expr><name pos:line="17" pos:column="7">w<pos:position pos:line="17" pos:column="8"/></name> <operator pos:line="17" pos:column="9">&lt;<pos:position pos:line="17" pos:column="13"/></operator> <literal type="number" pos:line="17" pos:column="11">0<pos:position pos:line="17" pos:column="12"/></literal></expr>)<pos:position pos:line="17" pos:column="13"/></condition><then pos:line="17" pos:column="13">
  <block pos:line="18" pos:column="3">{
    <expr_stmt><expr><name pos:line="19" pos:column="5">w<pos:position pos:line="19" pos:column="6"/></name> <operator pos:line="19" pos:column="7">=<pos:position pos:line="19" pos:column="8"/></operator> <operator pos:line="19" pos:column="9">-<pos:position pos:line="19" pos:column="10"/></operator> <name pos:line="19" pos:column="11">w<pos:position pos:line="19" pos:column="12"/></name></expr>;<pos:position pos:line="19" pos:column="13"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="20" pos:column="5">z<pos:position pos:line="20" pos:column="6"/></name><operator pos:line="20" pos:column="6">-&gt;<pos:position pos:line="20" pos:column="11"/></operator><name pos:line="20" pos:column="8">state<pos:position pos:line="20" pos:column="13"/></name><operator pos:line="20" pos:column="13">-&gt;<pos:position pos:line="20" pos:column="18"/></operator><name pos:line="20" pos:column="15">nowrap<pos:position pos:line="20" pos:column="21"/></name></name> <operator pos:line="20" pos:column="22">=<pos:position pos:line="20" pos:column="23"/></operator> <literal type="number" pos:line="20" pos:column="24">1<pos:position pos:line="20" pos:column="25"/></literal></expr>;<pos:position pos:line="20" pos:column="26"/></expr_stmt>
  }<pos:position pos:line="21" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="23" pos:column="3">/* set window size */</comment>
  <if pos:line="24" pos:column="3">if <condition pos:line="24" pos:column="6">(<expr><name><name pos:line="24" pos:column="7">w<pos:position pos:line="24" pos:column="8"/></name> <argument_list type="generic" pos:line="24" pos:column="9">&lt; <argument><expr><literal type="number" pos:line="24" pos:column="11">8<pos:position pos:line="24" pos:column="12"/></literal> <operator pos:line="24" pos:column="13">||<pos:position pos:line="24" pos:column="15"/></operator> <name pos:line="24" pos:column="16">w<pos:position pos:line="24" pos:column="17"/></name></expr></argument> &gt;<pos:position pos:line="24" pos:column="22"/></argument_list></name> <literal type="number" pos:line="24" pos:column="20">15<pos:position pos:line="24" pos:column="22"/></literal></expr>)<pos:position pos:line="24" pos:column="23"/></condition><then pos:line="24" pos:column="23">
  <block pos:line="25" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="26" pos:column="5">inflateEnd<pos:position pos:line="26" pos:column="15"/></name><argument_list pos:line="26" pos:column="15">(<argument><expr><name pos:line="26" pos:column="16">z<pos:position pos:line="26" pos:column="17"/></name></expr></argument>)<pos:position pos:line="26" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="19"/></expr_stmt>
    <return pos:line="27" pos:column="5">return <expr><name pos:line="27" pos:column="12">Z_STREAM_ERROR<pos:position pos:line="27" pos:column="26"/></name></expr>;<pos:position pos:line="27" pos:column="27"/></return>
  }<pos:position pos:line="28" pos:column="4"/></block></then></if>
  <expr_stmt><expr><name><name pos:line="29" pos:column="3">z<pos:position pos:line="29" pos:column="4"/></name><operator pos:line="29" pos:column="4">-&gt;<pos:position pos:line="29" pos:column="9"/></operator><name pos:line="29" pos:column="6">state<pos:position pos:line="29" pos:column="11"/></name><operator pos:line="29" pos:column="11">-&gt;<pos:position pos:line="29" pos:column="16"/></operator><name pos:line="29" pos:column="13">wbits<pos:position pos:line="29" pos:column="18"/></name></name> <operator pos:line="29" pos:column="19">=<pos:position pos:line="29" pos:column="20"/></operator> <operator pos:line="29" pos:column="21">(<pos:position pos:line="29" pos:column="22"/></operator><name pos:line="29" pos:column="22">uInt<pos:position pos:line="29" pos:column="26"/></name><operator pos:line="29" pos:column="26">)<pos:position pos:line="29" pos:column="27"/></operator><name pos:line="29" pos:column="27">w<pos:position pos:line="29" pos:column="28"/></name></expr>;<pos:position pos:line="29" pos:column="29"/></expr_stmt>

  <comment type="block" pos:line="31" pos:column="3">/* create inflate_blocks state */</comment>
  <if pos:line="32" pos:column="3">if <condition pos:line="32" pos:column="6">(<expr><operator pos:line="32" pos:column="7">(<pos:position pos:line="32" pos:column="8"/></operator><name><name pos:line="32" pos:column="8">z<pos:position pos:line="32" pos:column="9"/></name><operator pos:line="32" pos:column="9">-&gt;<pos:position pos:line="32" pos:column="14"/></operator><name pos:line="32" pos:column="11">state<pos:position pos:line="32" pos:column="16"/></name><operator pos:line="32" pos:column="16">-&gt;<pos:position pos:line="32" pos:column="21"/></operator><name pos:line="32" pos:column="18">blocks<pos:position pos:line="32" pos:column="24"/></name></name> <operator pos:line="32" pos:column="25">=<pos:position pos:line="32" pos:column="26"/></operator>
       <call><name pos:line="33" pos:column="8">inflate_blocks_new<pos:position pos:line="33" pos:column="26"/></name><argument_list pos:line="33" pos:column="26">(<argument><expr><name pos:line="33" pos:column="27">z<pos:position pos:line="33" pos:column="28"/></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name pos:line="33" pos:column="30">z<pos:position pos:line="33" pos:column="31"/></name><operator pos:line="33" pos:column="31">-&gt;<pos:position pos:line="33" pos:column="36"/></operator><name pos:line="33" pos:column="33">state<pos:position pos:line="33" pos:column="38"/></name><operator pos:line="33" pos:column="38">-&gt;<pos:position pos:line="33" pos:column="43"/></operator><name pos:line="33" pos:column="40">nowrap<pos:position pos:line="33" pos:column="46"/></name></name></expr> ?<pos:position pos:line="33" pos:column="48"/></condition><then pos:line="33" pos:column="48"> <expr><name pos:line="33" pos:column="49">Z_NULL<pos:position pos:line="33" pos:column="55"/></name></expr> <pos:position pos:line="33" pos:column="56"/></then><else pos:line="33" pos:column="56">: <expr><name pos:line="33" pos:column="58">adler32<pos:position pos:line="33" pos:column="65"/></name></expr></else></ternary></expr></argument>, <argument><expr><literal type="number" pos:line="33" pos:column="67">1<pos:position pos:line="33" pos:column="68"/></literal> <operator pos:line="33" pos:column="69">&lt;&lt;<pos:position pos:line="33" pos:column="77"/></operator> <name pos:line="33" pos:column="72">w<pos:position pos:line="33" pos:column="73"/></name></expr></argument>)<pos:position pos:line="33" pos:column="74"/></argument_list></call><operator pos:line="33" pos:column="74">)<pos:position pos:line="33" pos:column="75"/></operator>
      <operator pos:line="34" pos:column="7">==<pos:position pos:line="34" pos:column="9"/></operator> <name pos:line="34" pos:column="10">Z_NULL<pos:position pos:line="34" pos:column="16"/></name></expr>)<pos:position pos:line="34" pos:column="17"/></condition><then pos:line="34" pos:column="17">
  <block pos:line="35" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="36" pos:column="5">inflateEnd<pos:position pos:line="36" pos:column="15"/></name><argument_list pos:line="36" pos:column="15">(<argument><expr><name pos:line="36" pos:column="16">z<pos:position pos:line="36" pos:column="17"/></name></expr></argument>)<pos:position pos:line="36" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="19"/></expr_stmt>
    <return pos:line="37" pos:column="5">return <expr><name pos:line="37" pos:column="12">Z_MEM_ERROR<pos:position pos:line="37" pos:column="23"/></name></expr>;<pos:position pos:line="37" pos:column="24"/></return>
  }<pos:position pos:line="38" pos:column="4"/></block></then></if>
  <expr_stmt><expr><call><name pos:line="39" pos:column="3">Trace<pos:position pos:line="39" pos:column="8"/></name><argument_list pos:line="39" pos:column="8">(<argument><expr><operator pos:line="39" pos:column="9">(<pos:position pos:line="39" pos:column="10"/></operator><name pos:line="39" pos:column="10">stderr<pos:position pos:line="39" pos:column="16"/></name><operator pos:line="39" pos:column="16">,<pos:position pos:line="39" pos:column="17"/></operator> <literal type="string" pos:line="39" pos:column="18">"inflate: allocated\n"<pos:position pos:line="39" pos:column="40"/></literal><operator pos:line="39" pos:column="40">)<pos:position pos:line="39" pos:column="41"/></operator></expr></argument>)<pos:position pos:line="39" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="43"/></expr_stmt>

  <comment type="block" pos:line="41" pos:column="3">/* reset state */</comment>
  <expr_stmt><expr><call><name pos:line="42" pos:column="3">inflateReset<pos:position pos:line="42" pos:column="15"/></name><argument_list pos:line="42" pos:column="15">(<argument><expr><name pos:line="42" pos:column="16">z<pos:position pos:line="42" pos:column="17"/></name></expr></argument>)<pos:position pos:line="42" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="19"/></expr_stmt>
  <return pos:line="43" pos:column="3">return <expr><name pos:line="43" pos:column="10">Z_OK<pos:position pos:line="43" pos:column="14"/></name></expr>;<pos:position pos:line="43" pos:column="15"/></return>
}<pos:position pos:line="44" pos:column="2"/></block></unit>
