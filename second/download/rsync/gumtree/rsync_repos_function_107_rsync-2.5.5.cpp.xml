<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_107_rsync-2.5.5.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">compare_addrinfo_sockaddr<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><specifier pos:line="1" pos:column="31">const<pos:position pos:line="1" pos:column="36"/></specifier> <name><name pos:line="1" pos:column="37">struct<pos:position pos:line="1" pos:column="43"/></name> <name pos:line="1" pos:column="44">addrinfo<pos:position pos:line="1" pos:column="52"/></name></name> <modifier pos:line="1" pos:column="53">*<pos:position pos:line="1" pos:column="54"/></modifier></type><name pos:line="1" pos:column="54">ai<pos:position pos:line="1" pos:column="56"/></name></decl></parameter>,
			      <parameter><decl><type><specifier pos:line="2" pos:column="31">const<pos:position pos:line="2" pos:column="36"/></specifier> <name><name pos:line="2" pos:column="37">struct<pos:position pos:line="2" pos:column="43"/></name> <name pos:line="2" pos:column="44">sockaddr_storage<pos:position pos:line="2" pos:column="60"/></name></name> <modifier pos:line="2" pos:column="61">*<pos:position pos:line="2" pos:column="62"/></modifier></type><name pos:line="2" pos:column="62">ss<pos:position pos:line="2" pos:column="64"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="65"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">ss_family<pos:position pos:line="4" pos:column="22"/></name> <init pos:line="4" pos:column="23">= <expr><call><name pos:line="4" pos:column="25">get_sockaddr_family<pos:position pos:line="4" pos:column="44"/></name><argument_list pos:line="4" pos:column="44">(<argument><expr><name pos:line="4" pos:column="45">ss<pos:position pos:line="4" pos:column="47"/></name></expr></argument>)<pos:position pos:line="4" pos:column="48"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="49"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="5" pos:column="9">const<pos:position pos:line="5" pos:column="14"/></specifier> <name pos:line="5" pos:column="15">char<pos:position pos:line="5" pos:column="19"/></name></type> <name><name pos:line="5" pos:column="20">fn<pos:position pos:line="5" pos:column="22"/></name><index pos:line="5" pos:column="22">[]<pos:position pos:line="5" pos:column="24"/></index></name> <init pos:line="5" pos:column="25">= <expr><literal type="string" pos:line="5" pos:column="27">"compare_addrinfo_sockaddr"<pos:position pos:line="5" pos:column="54"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="55"/></decl_stmt>
		      
	<if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<expr><name><name pos:line="7" pos:column="13">ai<pos:position pos:line="7" pos:column="15"/></name><operator pos:line="7" pos:column="15">-&gt;<pos:position pos:line="7" pos:column="20"/></operator><name pos:line="7" pos:column="17">ai_family<pos:position pos:line="7" pos:column="26"/></name></name> <operator pos:line="7" pos:column="27">!=<pos:position pos:line="7" pos:column="29"/></operator> <name pos:line="7" pos:column="30">ss_family<pos:position pos:line="7" pos:column="39"/></name></expr>)<pos:position pos:line="7" pos:column="40"/></condition><then pos:line="7" pos:column="40"> <block pos:line="7" pos:column="41">{
		<expr_stmt><expr><call><name pos:line="8" pos:column="17">rprintf<pos:position pos:line="8" pos:column="24"/></name><argument_list pos:line="8" pos:column="24">(<argument><expr><name pos:line="8" pos:column="25">FERROR<pos:position pos:line="8" pos:column="31"/></name></expr></argument>,
			<argument><expr><literal type="string" pos:line="9" pos:column="25">"%s: response family %d != %d\n"<pos:position pos:line="9" pos:column="57"/></literal></expr></argument>,
			<argument><expr><name pos:line="10" pos:column="25">fn<pos:position pos:line="10" pos:column="27"/></name></expr></argument>, <argument><expr><name><name pos:line="10" pos:column="29">ai<pos:position pos:line="10" pos:column="31"/></name><operator pos:line="10" pos:column="31">-&gt;<pos:position pos:line="10" pos:column="36"/></operator><name pos:line="10" pos:column="33">ai_family<pos:position pos:line="10" pos:column="42"/></name></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="44">ss_family<pos:position pos:line="10" pos:column="53"/></name></expr></argument>)<pos:position pos:line="10" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="55"/></expr_stmt>
		<return pos:line="11" pos:column="17">return <expr><literal type="number" pos:line="11" pos:column="24">1<pos:position pos:line="11" pos:column="25"/></literal></expr>;<pos:position pos:line="11" pos:column="26"/></return>
	}<pos:position pos:line="12" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="14" pos:column="9">/* The comparison method depends on the particular AF. */</comment>
	<if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><name pos:line="15" pos:column="13">ss_family<pos:position pos:line="15" pos:column="22"/></name> <operator pos:line="15" pos:column="23">==<pos:position pos:line="15" pos:column="25"/></operator> <name pos:line="15" pos:column="26">AF_INET<pos:position pos:line="15" pos:column="33"/></name></expr>)<pos:position pos:line="15" pos:column="34"/></condition><then pos:line="15" pos:column="34"> <block pos:line="15" pos:column="35">{
		<decl_stmt><decl><type><specifier pos:line="16" pos:column="17">const<pos:position pos:line="16" pos:column="22"/></specifier> <name><name pos:line="16" pos:column="23">struct<pos:position pos:line="16" pos:column="29"/></name> <name pos:line="16" pos:column="30">sockaddr_in<pos:position pos:line="16" pos:column="41"/></name></name> <modifier pos:line="16" pos:column="42">*<pos:position pos:line="16" pos:column="43"/></modifier></type><name pos:line="16" pos:column="43">sin1<pos:position pos:line="16" pos:column="47"/></name></decl>, <modifier pos:line="16" pos:column="49">*<pos:position pos:line="16" pos:column="50"/></modifier><decl><type ref="prev"/><name pos:line="16" pos:column="50">sin2<pos:position pos:line="16" pos:column="54"/></name></decl>;<pos:position pos:line="16" pos:column="55"/></decl_stmt>

		<expr_stmt><expr><name pos:line="18" pos:column="17">sin1<pos:position pos:line="18" pos:column="21"/></name> <operator pos:line="18" pos:column="22">=<pos:position pos:line="18" pos:column="23"/></operator> <operator pos:line="18" pos:column="24">(<pos:position pos:line="18" pos:column="25"/></operator><specifier pos:line="18" pos:column="25">const<pos:position pos:line="18" pos:column="30"/></specifier> struct <name pos:line="18" pos:column="38">sockaddr_in<pos:position pos:line="18" pos:column="49"/></name> <operator pos:line="18" pos:column="50">*<pos:position pos:line="18" pos:column="51"/></operator><operator pos:line="18" pos:column="51">)<pos:position pos:line="18" pos:column="52"/></operator> <name pos:line="18" pos:column="53">ss<pos:position pos:line="18" pos:column="55"/></name></expr>;<pos:position pos:line="18" pos:column="56"/></expr_stmt>
		<expr_stmt><expr><name pos:line="19" pos:column="17">sin2<pos:position pos:line="19" pos:column="21"/></name> <operator pos:line="19" pos:column="22">=<pos:position pos:line="19" pos:column="23"/></operator> <operator pos:line="19" pos:column="24">(<pos:position pos:line="19" pos:column="25"/></operator><specifier pos:line="19" pos:column="25">const<pos:position pos:line="19" pos:column="30"/></specifier> struct <name pos:line="19" pos:column="38">sockaddr_in<pos:position pos:line="19" pos:column="49"/></name> <operator pos:line="19" pos:column="50">*<pos:position pos:line="19" pos:column="51"/></operator><operator pos:line="19" pos:column="51">)<pos:position pos:line="19" pos:column="52"/></operator> <name><name pos:line="19" pos:column="53">ai<pos:position pos:line="19" pos:column="55"/></name><operator pos:line="19" pos:column="55">-&gt;<pos:position pos:line="19" pos:column="60"/></operator><name pos:line="19" pos:column="57">ai_addr<pos:position pos:line="19" pos:column="64"/></name></name></expr>;<pos:position pos:line="19" pos:column="65"/></expr_stmt>
		
		<return pos:line="21" pos:column="17">return <expr><call><name pos:line="21" pos:column="24">memcmp<pos:position pos:line="21" pos:column="30"/></name><argument_list pos:line="21" pos:column="30">(<argument><expr><operator pos:line="21" pos:column="31">&amp;<pos:position pos:line="21" pos:column="36"/></operator><name><name pos:line="21" pos:column="32">sin1<pos:position pos:line="21" pos:column="36"/></name><operator pos:line="21" pos:column="36">-&gt;<pos:position pos:line="21" pos:column="41"/></operator><name pos:line="21" pos:column="38">sin_addr<pos:position pos:line="21" pos:column="46"/></name></name></expr></argument>, <argument><expr><operator pos:line="21" pos:column="48">&amp;<pos:position pos:line="21" pos:column="53"/></operator><name><name pos:line="21" pos:column="49">sin2<pos:position pos:line="21" pos:column="53"/></name><operator pos:line="21" pos:column="53">-&gt;<pos:position pos:line="21" pos:column="58"/></operator><name pos:line="21" pos:column="55">sin_addr<pos:position pos:line="21" pos:column="63"/></name></name></expr></argument>,
			      <argument><expr><sizeof pos:line="22" pos:column="31">sizeof <name><name pos:line="22" pos:column="38">sin1<pos:position pos:line="22" pos:column="42"/></name><operator pos:line="22" pos:column="42">-&gt;<pos:position pos:line="22" pos:column="47"/></operator><name pos:line="22" pos:column="44">sin_addr<pos:position pos:line="22" pos:column="52"/></name></name></sizeof></expr></argument>)<pos:position pos:line="22" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="54"/></return>
	}<pos:position pos:line="23" pos:column="10"/></block></then>
<cpp:ifdef pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">ifdef<pos:position pos:line="24" pos:column="7"/></cpp:directive> <name pos:line="24" pos:column="8">INET6<pos:position pos:line="24" pos:column="13"/></name></cpp:ifdef>
	<elseif pos:line="25" pos:column="9">else <if pos:line="25" pos:column="14">if <condition pos:line="25" pos:column="17">(<expr><name pos:line="25" pos:column="18">ss_family<pos:position pos:line="25" pos:column="27"/></name> <operator pos:line="25" pos:column="28">==<pos:position pos:line="25" pos:column="30"/></operator> <name pos:line="25" pos:column="31">AF_INET6<pos:position pos:line="25" pos:column="39"/></name></expr>)<pos:position pos:line="25" pos:column="40"/></condition><then pos:line="25" pos:column="40"> <block pos:line="25" pos:column="41">{
		<decl_stmt><decl><type><specifier pos:line="26" pos:column="17">const<pos:position pos:line="26" pos:column="22"/></specifier> <name><name pos:line="26" pos:column="23">struct<pos:position pos:line="26" pos:column="29"/></name> <name pos:line="26" pos:column="30">sockaddr_in6<pos:position pos:line="26" pos:column="42"/></name></name> <modifier pos:line="26" pos:column="43">*<pos:position pos:line="26" pos:column="44"/></modifier></type><name pos:line="26" pos:column="44">sin1<pos:position pos:line="26" pos:column="48"/></name></decl>, <modifier pos:line="26" pos:column="50">*<pos:position pos:line="26" pos:column="51"/></modifier><decl><type ref="prev"/><name pos:line="26" pos:column="51">sin2<pos:position pos:line="26" pos:column="55"/></name></decl>;<pos:position pos:line="26" pos:column="56"/></decl_stmt>

		<expr_stmt><expr><name pos:line="28" pos:column="17">sin1<pos:position pos:line="28" pos:column="21"/></name> <operator pos:line="28" pos:column="22">=<pos:position pos:line="28" pos:column="23"/></operator> <operator pos:line="28" pos:column="24">(<pos:position pos:line="28" pos:column="25"/></operator><specifier pos:line="28" pos:column="25">const<pos:position pos:line="28" pos:column="30"/></specifier> struct <name pos:line="28" pos:column="38">sockaddr_in6<pos:position pos:line="28" pos:column="50"/></name> <operator pos:line="28" pos:column="51">*<pos:position pos:line="28" pos:column="52"/></operator><operator pos:line="28" pos:column="52">)<pos:position pos:line="28" pos:column="53"/></operator> <name pos:line="28" pos:column="54">ss<pos:position pos:line="28" pos:column="56"/></name></expr>;<pos:position pos:line="28" pos:column="57"/></expr_stmt>
		<expr_stmt><expr><name pos:line="29" pos:column="17">sin2<pos:position pos:line="29" pos:column="21"/></name> <operator pos:line="29" pos:column="22">=<pos:position pos:line="29" pos:column="23"/></operator> <operator pos:line="29" pos:column="24">(<pos:position pos:line="29" pos:column="25"/></operator><specifier pos:line="29" pos:column="25">const<pos:position pos:line="29" pos:column="30"/></specifier> struct <name pos:line="29" pos:column="38">sockaddr_in6<pos:position pos:line="29" pos:column="50"/></name> <operator pos:line="29" pos:column="51">*<pos:position pos:line="29" pos:column="52"/></operator><operator pos:line="29" pos:column="52">)<pos:position pos:line="29" pos:column="53"/></operator> <name><name pos:line="29" pos:column="54">ai<pos:position pos:line="29" pos:column="56"/></name><operator pos:line="29" pos:column="56">-&gt;<pos:position pos:line="29" pos:column="61"/></operator><name pos:line="29" pos:column="58">ai_addr<pos:position pos:line="29" pos:column="65"/></name></name></expr>;<pos:position pos:line="29" pos:column="66"/></expr_stmt>
		
		<return pos:line="31" pos:column="17">return <expr><call><name pos:line="31" pos:column="24">memcmp<pos:position pos:line="31" pos:column="30"/></name><argument_list pos:line="31" pos:column="30">(<argument><expr><operator pos:line="31" pos:column="31">&amp;<pos:position pos:line="31" pos:column="36"/></operator><name><name pos:line="31" pos:column="32">sin1<pos:position pos:line="31" pos:column="36"/></name><operator pos:line="31" pos:column="36">-&gt;<pos:position pos:line="31" pos:column="41"/></operator><name pos:line="31" pos:column="38">sin6_addr<pos:position pos:line="31" pos:column="47"/></name></name></expr></argument>, <argument><expr><operator pos:line="31" pos:column="49">&amp;<pos:position pos:line="31" pos:column="54"/></operator><name><name pos:line="31" pos:column="50">sin2<pos:position pos:line="31" pos:column="54"/></name><operator pos:line="31" pos:column="54">-&gt;<pos:position pos:line="31" pos:column="59"/></operator><name pos:line="31" pos:column="56">sin6_addr<pos:position pos:line="31" pos:column="65"/></name></name></expr></argument>,
			      <argument><expr><sizeof pos:line="32" pos:column="31">sizeof <name><name pos:line="32" pos:column="38">sin1<pos:position pos:line="32" pos:column="42"/></name><operator pos:line="32" pos:column="42">-&gt;<pos:position pos:line="32" pos:column="47"/></operator><name pos:line="32" pos:column="44">sin6_addr<pos:position pos:line="32" pos:column="53"/></name></name></sizeof></expr></argument>)<pos:position pos:line="32" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="55"/></return>
	}<pos:position pos:line="33" pos:column="10"/></block></then></if></elseif>
<cpp:endif pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">endif<pos:position pos:line="34" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="34" pos:column="8">/* INET6 */</comment>
	<else pos:line="35" pos:column="9">else <block pos:line="35" pos:column="14">{
		<comment type="block" pos:line="36" pos:column="17">/* don't know */</comment>
		<return pos:line="37" pos:column="17">return <expr><literal type="number" pos:line="37" pos:column="24">1<pos:position pos:line="37" pos:column="25"/></literal></expr>;<pos:position pos:line="37" pos:column="26"/></return>
	}<pos:position pos:line="38" pos:column="10"/></block></else></if>
}<pos:position pos:line="39" pos:column="2"/></block></function></unit>
