<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_function_225.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">char<pos:position pos:line="1" pos:column="5"/></name> <modifier pos:line="1" pos:column="6">*<pos:position pos:line="1" pos:column="7"/></modifier></type><name pos:line="1" pos:column="7">map_ptr<pos:position pos:line="1" pos:column="14"/></name><parameter_list pos:line="1" pos:column="14">(<parameter><decl><type><name pos:line="1" pos:column="15">char<pos:position pos:line="1" pos:column="19"/></name> <modifier pos:line="1" pos:column="20">*<pos:position pos:line="1" pos:column="21"/></modifier></type><name pos:line="1" pos:column="21">buf<pos:position pos:line="1" pos:column="24"/></name></decl></parameter>,<parameter><decl><type><name pos:line="1" pos:column="25">off_t<pos:position pos:line="1" pos:column="30"/></name></type> <name pos:line="1" pos:column="31">offset<pos:position pos:line="1" pos:column="37"/></name></decl></parameter>,<parameter><decl><type><name pos:line="1" pos:column="38">int<pos:position pos:line="1" pos:column="41"/></name></type> <name pos:line="1" pos:column="42">len<pos:position pos:line="1" pos:column="45"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="46"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <if pos:line="3" pos:column="3">if <condition pos:line="3" pos:column="6">(<expr><name pos:line="3" pos:column="7">buf<pos:position pos:line="3" pos:column="10"/></name></expr>)<pos:position pos:line="3" pos:column="11"/></condition><then pos:line="3" pos:column="11">
    <block type="pseudo"><return pos:line="4" pos:column="5">return <expr><name pos:line="4" pos:column="12">buf<pos:position pos:line="4" pos:column="15"/></name><operator pos:line="4" pos:column="15">+<pos:position pos:line="4" pos:column="16"/></operator><name pos:line="4" pos:column="16">offset<pos:position pos:line="4" pos:column="22"/></name></expr>;<pos:position pos:line="4" pos:column="23"/></return></block></then></if>

  <if pos:line="6" pos:column="3">if <condition pos:line="6" pos:column="6">(<expr><name pos:line="6" pos:column="7">len<pos:position pos:line="6" pos:column="10"/></name> <operator pos:line="6" pos:column="11">==<pos:position pos:line="6" pos:column="13"/></operator> <literal type="number" pos:line="6" pos:column="14">0<pos:position pos:line="6" pos:column="15"/></literal></expr>)<pos:position pos:line="6" pos:column="16"/></condition><then pos:line="6" pos:column="16"> 
    <block type="pseudo"><return pos:line="7" pos:column="5">return <expr><name pos:line="7" pos:column="12">NULL<pos:position pos:line="7" pos:column="16"/></name></expr>;<pos:position pos:line="7" pos:column="17"/></return></block></then></if>

  <expr_stmt><expr><name pos:line="9" pos:column="3">len<pos:position pos:line="9" pos:column="6"/></name> <operator pos:line="9" pos:column="7">=<pos:position pos:line="9" pos:column="8"/></operator> <call><name pos:line="9" pos:column="9">MIN<pos:position pos:line="9" pos:column="12"/></name><argument_list pos:line="9" pos:column="12">(<argument><expr><name pos:line="9" pos:column="13">len<pos:position pos:line="9" pos:column="16"/></name></expr></argument>,<argument><expr><name pos:line="9" pos:column="17">map_size<pos:position pos:line="9" pos:column="25"/></name><operator pos:line="9" pos:column="25">-<pos:position pos:line="9" pos:column="26"/></operator><name pos:line="9" pos:column="26">offset<pos:position pos:line="9" pos:column="32"/></name></expr></argument>)<pos:position pos:line="9" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="34"/></expr_stmt>

  <if pos:line="11" pos:column="3">if <condition pos:line="11" pos:column="6">(<expr><name pos:line="11" pos:column="7">offset<pos:position pos:line="11" pos:column="13"/></name> <operator pos:line="11" pos:column="14">&gt;=<pos:position pos:line="11" pos:column="19"/></operator> <name pos:line="11" pos:column="17">p_offset<pos:position pos:line="11" pos:column="25"/></name> <operator pos:line="11" pos:column="26">&amp;&amp;<pos:position pos:line="11" pos:column="36"/></operator> 
      <name pos:line="12" pos:column="7">offset<pos:position pos:line="12" pos:column="13"/></name><operator pos:line="12" pos:column="13">+<pos:position pos:line="12" pos:column="14"/></operator><name pos:line="12" pos:column="14">len<pos:position pos:line="12" pos:column="17"/></name> <operator pos:line="12" pos:column="18">&lt;=<pos:position pos:line="12" pos:column="23"/></operator> <name pos:line="12" pos:column="21">p_offset<pos:position pos:line="12" pos:column="29"/></name><operator pos:line="12" pos:column="29">+<pos:position pos:line="12" pos:column="30"/></operator><name pos:line="12" pos:column="30">p_len<pos:position pos:line="12" pos:column="35"/></name></expr>)<pos:position pos:line="12" pos:column="36"/></condition><then pos:line="12" pos:column="36"> <block pos:line="12" pos:column="37">{
    <return pos:line="13" pos:column="5">return <expr><operator pos:line="13" pos:column="12">(<pos:position pos:line="13" pos:column="13"/></operator><name pos:line="13" pos:column="13">p<pos:position pos:line="13" pos:column="14"/></name> <operator pos:line="13" pos:column="15">+<pos:position pos:line="13" pos:column="16"/></operator> <operator pos:line="13" pos:column="17">(<pos:position pos:line="13" pos:column="18"/></operator><name pos:line="13" pos:column="18">offset<pos:position pos:line="13" pos:column="24"/></name> <operator pos:line="13" pos:column="25">-<pos:position pos:line="13" pos:column="26"/></operator> <name pos:line="13" pos:column="27">p_offset<pos:position pos:line="13" pos:column="35"/></name><operator pos:line="13" pos:column="35">)<pos:position pos:line="13" pos:column="36"/></operator><operator pos:line="13" pos:column="36">)<pos:position pos:line="13" pos:column="37"/></operator></expr>;<pos:position pos:line="13" pos:column="38"/></return>
  }<pos:position pos:line="14" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="16" pos:column="3">len<pos:position pos:line="16" pos:column="6"/></name> <operator pos:line="16" pos:column="7">=<pos:position pos:line="16" pos:column="8"/></operator> <call><name pos:line="16" pos:column="9">MAX<pos:position pos:line="16" pos:column="12"/></name><argument_list pos:line="16" pos:column="12">(<argument><expr><name pos:line="16" pos:column="13">len<pos:position pos:line="16" pos:column="16"/></name></expr></argument>,<argument><expr><name pos:line="16" pos:column="17">CHUNK_SIZE<pos:position pos:line="16" pos:column="27"/></name></expr></argument>)<pos:position pos:line="16" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="29"/></expr_stmt>
  <expr_stmt><expr><name pos:line="17" pos:column="3">len<pos:position pos:line="17" pos:column="6"/></name> <operator pos:line="17" pos:column="7">=<pos:position pos:line="17" pos:column="8"/></operator> <call><name pos:line="17" pos:column="9">MIN<pos:position pos:line="17" pos:column="12"/></name><argument_list pos:line="17" pos:column="12">(<argument><expr><name pos:line="17" pos:column="13">len<pos:position pos:line="17" pos:column="16"/></name></expr></argument>,<argument><expr><name pos:line="17" pos:column="17">map_size<pos:position pos:line="17" pos:column="25"/></name> <operator pos:line="17" pos:column="26">-<pos:position pos:line="17" pos:column="27"/></operator> <name pos:line="17" pos:column="28">offset<pos:position pos:line="17" pos:column="34"/></name></expr></argument>)<pos:position pos:line="17" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="36"/></expr_stmt>  

  <if pos:line="19" pos:column="3">if <condition pos:line="19" pos:column="6">(<expr><name pos:line="19" pos:column="7">len<pos:position pos:line="19" pos:column="10"/></name> <operator pos:line="19" pos:column="11">&gt;<pos:position pos:line="19" pos:column="15"/></operator> <name pos:line="19" pos:column="13">p_size<pos:position pos:line="19" pos:column="19"/></name></expr>)<pos:position pos:line="19" pos:column="20"/></condition><then pos:line="19" pos:column="20"> <block pos:line="19" pos:column="21">{
    <if pos:line="20" pos:column="5">if <condition pos:line="20" pos:column="8">(<expr><name pos:line="20" pos:column="9">p<pos:position pos:line="20" pos:column="10"/></name></expr>)<pos:position pos:line="20" pos:column="11"/></condition><then pos:line="20" pos:column="11"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="20" pos:column="12">free<pos:position pos:line="20" pos:column="16"/></name><argument_list pos:line="20" pos:column="16">(<argument><expr><name pos:line="20" pos:column="17">p<pos:position pos:line="20" pos:column="18"/></name></expr></argument>)<pos:position pos:line="20" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="20"/></expr_stmt></block></then></if>
    <expr_stmt><expr><name pos:line="21" pos:column="5">p<pos:position pos:line="21" pos:column="6"/></name> <operator pos:line="21" pos:column="7">=<pos:position pos:line="21" pos:column="8"/></operator> <operator pos:line="21" pos:column="9">(<pos:position pos:line="21" pos:column="10"/></operator><name pos:line="21" pos:column="10">char<pos:position pos:line="21" pos:column="14"/></name> <operator pos:line="21" pos:column="15">*<pos:position pos:line="21" pos:column="16"/></operator><operator pos:line="21" pos:column="16">)<pos:position pos:line="21" pos:column="17"/></operator><call><name pos:line="21" pos:column="17">malloc<pos:position pos:line="21" pos:column="23"/></name><argument_list pos:line="21" pos:column="23">(<argument><expr><name pos:line="21" pos:column="24">len<pos:position pos:line="21" pos:column="27"/></name></expr></argument>)<pos:position pos:line="21" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="29"/></expr_stmt>
    <if pos:line="22" pos:column="5">if <condition pos:line="22" pos:column="8">(<expr><operator pos:line="22" pos:column="9">!<pos:position pos:line="22" pos:column="10"/></operator><name pos:line="22" pos:column="10">p<pos:position pos:line="22" pos:column="11"/></name></expr>)<pos:position pos:line="22" pos:column="12"/></condition><then pos:line="22" pos:column="12"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="22" pos:column="13">out_of_memory<pos:position pos:line="22" pos:column="26"/></name><argument_list pos:line="22" pos:column="26">(<argument><expr><literal type="string" pos:line="22" pos:column="27">"map_ptr"<pos:position pos:line="22" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="38"/></expr_stmt></block></then></if>
    <expr_stmt><expr><name pos:line="23" pos:column="5">p_size<pos:position pos:line="23" pos:column="11"/></name> <operator pos:line="23" pos:column="12">=<pos:position pos:line="23" pos:column="13"/></operator> <name pos:line="23" pos:column="14">len<pos:position pos:line="23" pos:column="17"/></name></expr>;<pos:position pos:line="23" pos:column="18"/></expr_stmt>
  }<pos:position pos:line="24" pos:column="4"/></block></then></if>

  <if pos:line="26" pos:column="3">if <condition pos:line="26" pos:column="6">(<expr><call><name pos:line="26" pos:column="7">lseek<pos:position pos:line="26" pos:column="12"/></name><argument_list pos:line="26" pos:column="12">(<argument><expr><name pos:line="26" pos:column="13">map_fd<pos:position pos:line="26" pos:column="19"/></name></expr></argument>,<argument><expr><name pos:line="26" pos:column="20">offset<pos:position pos:line="26" pos:column="26"/></name></expr></argument>,<argument><expr><name pos:line="26" pos:column="27">SEEK_SET<pos:position pos:line="26" pos:column="35"/></name></expr></argument>)<pos:position pos:line="26" pos:column="36"/></argument_list></call> <operator pos:line="26" pos:column="37">!=<pos:position pos:line="26" pos:column="39"/></operator> <name pos:line="26" pos:column="40">offset<pos:position pos:line="26" pos:column="46"/></name> <operator pos:line="26" pos:column="47">||<pos:position pos:line="26" pos:column="49"/></operator>
      <call><name pos:line="27" pos:column="7">read<pos:position pos:line="27" pos:column="11"/></name><argument_list pos:line="27" pos:column="11">(<argument><expr><name pos:line="27" pos:column="12">map_fd<pos:position pos:line="27" pos:column="18"/></name></expr></argument>,<argument><expr><name pos:line="27" pos:column="19">p<pos:position pos:line="27" pos:column="20"/></name></expr></argument>,<argument><expr><name pos:line="27" pos:column="21">len<pos:position pos:line="27" pos:column="24"/></name></expr></argument>)<pos:position pos:line="27" pos:column="25"/></argument_list></call> <operator pos:line="27" pos:column="26">!=<pos:position pos:line="27" pos:column="28"/></operator> <name pos:line="27" pos:column="29">len<pos:position pos:line="27" pos:column="32"/></name></expr>)<pos:position pos:line="27" pos:column="33"/></condition><then pos:line="27" pos:column="33"> <block pos:line="27" pos:column="34">{
    <expr_stmt><expr><call><name pos:line="28" pos:column="5">fprintf<pos:position pos:line="28" pos:column="12"/></name><argument_list pos:line="28" pos:column="12">(<argument><expr><name pos:line="28" pos:column="13">stderr<pos:position pos:line="28" pos:column="19"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="28" pos:column="20">"EOF in map_ptr!\n"<pos:position pos:line="28" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="41"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="29" pos:column="5">exit_cleanup<pos:position pos:line="29" pos:column="17"/></name><argument_list pos:line="29" pos:column="17">(<argument><expr><literal type="number" pos:line="29" pos:column="18">1<pos:position pos:line="29" pos:column="19"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="21"/></expr_stmt>
  }<pos:position pos:line="30" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="32" pos:column="3">p_offset<pos:position pos:line="32" pos:column="11"/></name> <operator pos:line="32" pos:column="12">=<pos:position pos:line="32" pos:column="13"/></operator> <name pos:line="32" pos:column="14">offset<pos:position pos:line="32" pos:column="20"/></name></expr>;<pos:position pos:line="32" pos:column="21"/></expr_stmt>
  <expr_stmt><expr><name pos:line="33" pos:column="3">p_len<pos:position pos:line="33" pos:column="8"/></name> <operator pos:line="33" pos:column="9">=<pos:position pos:line="33" pos:column="10"/></operator> <name pos:line="33" pos:column="11">len<pos:position pos:line="33" pos:column="14"/></name></expr>;<pos:position pos:line="33" pos:column="15"/></expr_stmt>

  <return pos:line="35" pos:column="3">return <expr><name pos:line="35" pos:column="10">p<pos:position pos:line="35" pos:column="11"/></name></expr>;<pos:position pos:line="35" pos:column="12"/></return> 
}<pos:position pos:line="36" pos:column="2"/></block></function></unit>
