<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_298_rsync-2.0.18.cpp" pos:tabs="8"><decl_stmt><decl><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">inflate_trees_fixed<pos:position pos:line="1" pos:column="24"/></name><argument_list pos:line="1" pos:column="24">(<argument><expr><name pos:line="1" pos:column="25">bl<pos:position pos:line="1" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="1" pos:column="29">bd<pos:position pos:line="1" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="1" pos:column="33">tl<pos:position pos:line="1" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="1" pos:column="37">td<pos:position pos:line="1" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="1" pos:column="41">z<pos:position pos:line="1" pos:column="42"/></name></expr></argument>)<pos:position pos:line="1" pos:column="43"/></argument_list>
<name pos:line="2" pos:column="1">uIntf<pos:position pos:line="2" pos:column="6"/></name> <modifier pos:line="2" pos:column="7">*<pos:position pos:line="2" pos:column="8"/></modifier><name pos:line="2" pos:column="8">bl<pos:position pos:line="2" pos:column="10"/></name></decl>;<pos:position pos:line="2" pos:column="11"/></decl_stmt>               <comment type="block" pos:line="2" pos:column="26">/* literal desired/actual bit depth */</comment>
<decl_stmt><decl><type><name pos:line="3" pos:column="1">uIntf<pos:position pos:line="3" pos:column="6"/></name> <modifier pos:line="3" pos:column="7">*<pos:position pos:line="3" pos:column="8"/></modifier></type><name pos:line="3" pos:column="8">bd<pos:position pos:line="3" pos:column="10"/></name></decl>;<pos:position pos:line="3" pos:column="11"/></decl_stmt>               <comment type="block" pos:line="3" pos:column="26">/* distance desired/actual bit depth */</comment>
<decl_stmt><decl><type><name pos:line="4" pos:column="1">inflate_huft<pos:position pos:line="4" pos:column="13"/></name> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier> <name pos:line="4" pos:column="16">FAR<pos:position pos:line="4" pos:column="19"/></name> <modifier pos:line="4" pos:column="20">*<pos:position pos:line="4" pos:column="21"/></modifier></type><name pos:line="4" pos:column="21">tl<pos:position pos:line="4" pos:column="23"/></name></decl>;<pos:position pos:line="4" pos:column="24"/></decl_stmt>  <comment type="block" pos:line="4" pos:column="26">/* literal/length tree result */</comment>
<decl_stmt><decl><type><name pos:line="5" pos:column="1">inflate_huft<pos:position pos:line="5" pos:column="13"/></name> <modifier pos:line="5" pos:column="14">*<pos:position pos:line="5" pos:column="15"/></modifier> <name pos:line="5" pos:column="16">FAR<pos:position pos:line="5" pos:column="19"/></name> <modifier pos:line="5" pos:column="20">*<pos:position pos:line="5" pos:column="21"/></modifier></type><name pos:line="5" pos:column="21">td<pos:position pos:line="5" pos:column="23"/></name></decl>;<pos:position pos:line="5" pos:column="24"/></decl_stmt>  <comment type="block" pos:line="5" pos:column="26">/* distance tree result */</comment>
<decl_stmt><decl><type><name pos:line="6" pos:column="1">z_streamp<pos:position pos:line="6" pos:column="10"/></name></type> <name pos:line="6" pos:column="11">z<pos:position pos:line="6" pos:column="12"/></name></decl>;<pos:position pos:line="6" pos:column="13"/></decl_stmt>             <comment type="block" pos:line="6" pos:column="26">/* for memory allocation */</comment>
<block pos:line="7" pos:column="1">{
<cpp:ifdef pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">ifdef<pos:position pos:line="8" pos:column="7"/></cpp:directive> <name pos:line="8" pos:column="8">BUILDFIXED<pos:position pos:line="8" pos:column="18"/></name></cpp:ifdef>
  <comment type="block" pos:line="9" pos:column="3">/* build fixed tables if not already */</comment>
  <if pos:line="10" pos:column="3">if <condition pos:line="10" pos:column="6">(<expr><operator pos:line="10" pos:column="7">!<pos:position pos:line="10" pos:column="8"/></operator><name pos:line="10" pos:column="8">fixed_built<pos:position pos:line="10" pos:column="19"/></name></expr>)<pos:position pos:line="10" pos:column="20"/></condition><then pos:line="10" pos:column="20">
  <block pos:line="11" pos:column="3">{
    <decl_stmt><decl><type><name pos:line="12" pos:column="5">int<pos:position pos:line="12" pos:column="8"/></name></type> <name pos:line="12" pos:column="9">k<pos:position pos:line="12" pos:column="10"/></name></decl>;<pos:position pos:line="12" pos:column="11"/></decl_stmt>              <comment type="block" pos:line="12" pos:column="25">/* temporary variable */</comment>
    <decl_stmt><decl><type><name pos:line="13" pos:column="5">uInt<pos:position pos:line="13" pos:column="9"/></name></type> <name pos:line="13" pos:column="10">f<pos:position pos:line="13" pos:column="11"/></name> <init pos:line="13" pos:column="12">= <expr><literal type="number" pos:line="13" pos:column="14">0<pos:position pos:line="13" pos:column="15"/></literal></expr></init></decl>;<pos:position pos:line="13" pos:column="16"/></decl_stmt>         <comment type="block" pos:line="13" pos:column="25">/* number of hufts used in fixed_mem */</comment>
    <decl_stmt><decl><type><name pos:line="14" pos:column="5">uIntf<pos:position pos:line="14" pos:column="10"/></name> <modifier pos:line="14" pos:column="11">*<pos:position pos:line="14" pos:column="12"/></modifier></type><name pos:line="14" pos:column="12">c<pos:position pos:line="14" pos:column="13"/></name></decl>;<pos:position pos:line="14" pos:column="14"/></decl_stmt>           <comment type="block" pos:line="14" pos:column="25">/* length list for huft_build */</comment>
    <decl_stmt><decl><type><name pos:line="15" pos:column="5">uIntf<pos:position pos:line="15" pos:column="10"/></name> <modifier pos:line="15" pos:column="11">*<pos:position pos:line="15" pos:column="12"/></modifier></type><name pos:line="15" pos:column="12">v<pos:position pos:line="15" pos:column="13"/></name></decl>;<pos:position pos:line="15" pos:column="14"/></decl_stmt>           <comment type="block" pos:line="15" pos:column="25">/* work area for huft_build */</comment>

    <comment type="block" pos:line="17" pos:column="5">/* allocate memory */</comment>
    <if pos:line="18" pos:column="5">if <condition pos:line="18" pos:column="8">(<expr><operator pos:line="18" pos:column="9">(<pos:position pos:line="18" pos:column="10"/></operator><name pos:line="18" pos:column="10">c<pos:position pos:line="18" pos:column="11"/></name> <operator pos:line="18" pos:column="12">=<pos:position pos:line="18" pos:column="13"/></operator> <operator pos:line="18" pos:column="14">(<pos:position pos:line="18" pos:column="15"/></operator><name pos:line="18" pos:column="15">uIntf<pos:position pos:line="18" pos:column="20"/></name><operator pos:line="18" pos:column="20">*<pos:position pos:line="18" pos:column="21"/></operator><operator pos:line="18" pos:column="21">)<pos:position pos:line="18" pos:column="22"/></operator><call><name pos:line="18" pos:column="22">ZALLOC<pos:position pos:line="18" pos:column="28"/></name><argument_list pos:line="18" pos:column="28">(<argument><expr><name pos:line="18" pos:column="29">z<pos:position pos:line="18" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="18" pos:column="32">288<pos:position pos:line="18" pos:column="35"/></literal></expr></argument>, <argument><expr><sizeof pos:line="18" pos:column="37">sizeof<argument_list pos:line="18" pos:column="43">(<argument><expr><name pos:line="18" pos:column="44">uInt<pos:position pos:line="18" pos:column="48"/></name></expr></argument>)<pos:position pos:line="18" pos:column="49"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="18" pos:column="50"/></argument_list></call><operator pos:line="18" pos:column="50">)<pos:position pos:line="18" pos:column="51"/></operator> <operator pos:line="18" pos:column="52">==<pos:position pos:line="18" pos:column="54"/></operator> <name pos:line="18" pos:column="55">Z_NULL<pos:position pos:line="18" pos:column="61"/></name></expr>)<pos:position pos:line="18" pos:column="62"/></condition><then pos:line="18" pos:column="62">
      <block type="pseudo"><return pos:line="19" pos:column="7">return <expr><name pos:line="19" pos:column="14">Z_MEM_ERROR<pos:position pos:line="19" pos:column="25"/></name></expr>;<pos:position pos:line="19" pos:column="26"/></return></block></then></if>
    <if pos:line="20" pos:column="5">if <condition pos:line="20" pos:column="8">(<expr><operator pos:line="20" pos:column="9">(<pos:position pos:line="20" pos:column="10"/></operator><name pos:line="20" pos:column="10">v<pos:position pos:line="20" pos:column="11"/></name> <operator pos:line="20" pos:column="12">=<pos:position pos:line="20" pos:column="13"/></operator> <operator pos:line="20" pos:column="14">(<pos:position pos:line="20" pos:column="15"/></operator><name pos:line="20" pos:column="15">uIntf<pos:position pos:line="20" pos:column="20"/></name><operator pos:line="20" pos:column="20">*<pos:position pos:line="20" pos:column="21"/></operator><operator pos:line="20" pos:column="21">)<pos:position pos:line="20" pos:column="22"/></operator><call><name pos:line="20" pos:column="22">ZALLOC<pos:position pos:line="20" pos:column="28"/></name><argument_list pos:line="20" pos:column="28">(<argument><expr><name pos:line="20" pos:column="29">z<pos:position pos:line="20" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="20" pos:column="32">288<pos:position pos:line="20" pos:column="35"/></literal></expr></argument>, <argument><expr><sizeof pos:line="20" pos:column="37">sizeof<argument_list pos:line="20" pos:column="43">(<argument><expr><name pos:line="20" pos:column="44">uInt<pos:position pos:line="20" pos:column="48"/></name></expr></argument>)<pos:position pos:line="20" pos:column="49"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="20" pos:column="50"/></argument_list></call><operator pos:line="20" pos:column="50">)<pos:position pos:line="20" pos:column="51"/></operator> <operator pos:line="20" pos:column="52">==<pos:position pos:line="20" pos:column="54"/></operator> <name pos:line="20" pos:column="55">Z_NULL<pos:position pos:line="20" pos:column="61"/></name></expr>)<pos:position pos:line="20" pos:column="62"/></condition><then pos:line="20" pos:column="62">
    <block pos:line="21" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="22" pos:column="7">ZFREE<pos:position pos:line="22" pos:column="12"/></name><argument_list pos:line="22" pos:column="12">(<argument><expr><name pos:line="22" pos:column="13">z<pos:position pos:line="22" pos:column="14"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="16">c<pos:position pos:line="22" pos:column="17"/></name></expr></argument>)<pos:position pos:line="22" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="19"/></expr_stmt>
      <return pos:line="23" pos:column="7">return <expr><name pos:line="23" pos:column="14">Z_MEM_ERROR<pos:position pos:line="23" pos:column="25"/></name></expr>;<pos:position pos:line="23" pos:column="26"/></return>
    }<pos:position pos:line="24" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="26" pos:column="5">/* literal table */</comment>
    <for pos:line="27" pos:column="5">for <control pos:line="27" pos:column="9">(<init><expr><name pos:line="27" pos:column="10">k<pos:position pos:line="27" pos:column="11"/></name> <operator pos:line="27" pos:column="12">=<pos:position pos:line="27" pos:column="13"/></operator> <literal type="number" pos:line="27" pos:column="14">0<pos:position pos:line="27" pos:column="15"/></literal></expr>;<pos:position pos:line="27" pos:column="16"/></init> <condition><expr><name pos:line="27" pos:column="17">k<pos:position pos:line="27" pos:column="18"/></name> <operator pos:line="27" pos:column="19">&lt;<pos:position pos:line="27" pos:column="23"/></operator> <literal type="number" pos:line="27" pos:column="21">144<pos:position pos:line="27" pos:column="24"/></literal></expr>;<pos:position pos:line="27" pos:column="25"/></condition> <incr><expr><name pos:line="27" pos:column="26">k<pos:position pos:line="27" pos:column="27"/></name><operator pos:line="27" pos:column="27">++<pos:position pos:line="27" pos:column="29"/></operator></expr></incr>)<pos:position pos:line="27" pos:column="30"/></control>
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="28" pos:column="7">c<pos:position pos:line="28" pos:column="8"/></name><index pos:line="28" pos:column="8">[<expr><name pos:line="28" pos:column="9">k<pos:position pos:line="28" pos:column="10"/></name></expr>]<pos:position pos:line="28" pos:column="11"/></index></name> <operator pos:line="28" pos:column="12">=<pos:position pos:line="28" pos:column="13"/></operator> <literal type="number" pos:line="28" pos:column="14">8<pos:position pos:line="28" pos:column="15"/></literal></expr>;<pos:position pos:line="28" pos:column="16"/></expr_stmt></block></for>
    <for pos:line="29" pos:column="5">for <control pos:line="29" pos:column="9">(<init pos:line="29" pos:column="10">;<pos:position pos:line="29" pos:column="11"/></init> <condition><expr><name pos:line="29" pos:column="12">k<pos:position pos:line="29" pos:column="13"/></name> <operator pos:line="29" pos:column="14">&lt;<pos:position pos:line="29" pos:column="18"/></operator> <literal type="number" pos:line="29" pos:column="16">256<pos:position pos:line="29" pos:column="19"/></literal></expr>;<pos:position pos:line="29" pos:column="20"/></condition> <incr><expr><name pos:line="29" pos:column="21">k<pos:position pos:line="29" pos:column="22"/></name><operator pos:line="29" pos:column="22">++<pos:position pos:line="29" pos:column="24"/></operator></expr></incr>)<pos:position pos:line="29" pos:column="25"/></control>
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="30" pos:column="7">c<pos:position pos:line="30" pos:column="8"/></name><index pos:line="30" pos:column="8">[<expr><name pos:line="30" pos:column="9">k<pos:position pos:line="30" pos:column="10"/></name></expr>]<pos:position pos:line="30" pos:column="11"/></index></name> <operator pos:line="30" pos:column="12">=<pos:position pos:line="30" pos:column="13"/></operator> <literal type="number" pos:line="30" pos:column="14">9<pos:position pos:line="30" pos:column="15"/></literal></expr>;<pos:position pos:line="30" pos:column="16"/></expr_stmt></block></for>
    <for pos:line="31" pos:column="5">for <control pos:line="31" pos:column="9">(<init pos:line="31" pos:column="10">;<pos:position pos:line="31" pos:column="11"/></init> <condition><expr><name pos:line="31" pos:column="12">k<pos:position pos:line="31" pos:column="13"/></name> <operator pos:line="31" pos:column="14">&lt;<pos:position pos:line="31" pos:column="18"/></operator> <literal type="number" pos:line="31" pos:column="16">280<pos:position pos:line="31" pos:column="19"/></literal></expr>;<pos:position pos:line="31" pos:column="20"/></condition> <incr><expr><name pos:line="31" pos:column="21">k<pos:position pos:line="31" pos:column="22"/></name><operator pos:line="31" pos:column="22">++<pos:position pos:line="31" pos:column="24"/></operator></expr></incr>)<pos:position pos:line="31" pos:column="25"/></control>
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="32" pos:column="7">c<pos:position pos:line="32" pos:column="8"/></name><index pos:line="32" pos:column="8">[<expr><name pos:line="32" pos:column="9">k<pos:position pos:line="32" pos:column="10"/></name></expr>]<pos:position pos:line="32" pos:column="11"/></index></name> <operator pos:line="32" pos:column="12">=<pos:position pos:line="32" pos:column="13"/></operator> <literal type="number" pos:line="32" pos:column="14">7<pos:position pos:line="32" pos:column="15"/></literal></expr>;<pos:position pos:line="32" pos:column="16"/></expr_stmt></block></for>
    <for pos:line="33" pos:column="5">for <control pos:line="33" pos:column="9">(<init pos:line="33" pos:column="10">;<pos:position pos:line="33" pos:column="11"/></init> <condition><expr><name pos:line="33" pos:column="12">k<pos:position pos:line="33" pos:column="13"/></name> <operator pos:line="33" pos:column="14">&lt;<pos:position pos:line="33" pos:column="18"/></operator> <literal type="number" pos:line="33" pos:column="16">288<pos:position pos:line="33" pos:column="19"/></literal></expr>;<pos:position pos:line="33" pos:column="20"/></condition> <incr><expr><name pos:line="33" pos:column="21">k<pos:position pos:line="33" pos:column="22"/></name><operator pos:line="33" pos:column="22">++<pos:position pos:line="33" pos:column="24"/></operator></expr></incr>)<pos:position pos:line="33" pos:column="25"/></control>
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="34" pos:column="7">c<pos:position pos:line="34" pos:column="8"/></name><index pos:line="34" pos:column="8">[<expr><name pos:line="34" pos:column="9">k<pos:position pos:line="34" pos:column="10"/></name></expr>]<pos:position pos:line="34" pos:column="11"/></index></name> <operator pos:line="34" pos:column="12">=<pos:position pos:line="34" pos:column="13"/></operator> <literal type="number" pos:line="34" pos:column="14">8<pos:position pos:line="34" pos:column="15"/></literal></expr>;<pos:position pos:line="34" pos:column="16"/></expr_stmt></block></for>
    <expr_stmt><expr><name pos:line="35" pos:column="5">fixed_bl<pos:position pos:line="35" pos:column="13"/></name> <operator pos:line="35" pos:column="14">=<pos:position pos:line="35" pos:column="15"/></operator> <literal type="number" pos:line="35" pos:column="16">9<pos:position pos:line="35" pos:column="17"/></literal></expr>;<pos:position pos:line="35" pos:column="18"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="36" pos:column="5">huft_build<pos:position pos:line="36" pos:column="15"/></name><argument_list pos:line="36" pos:column="15">(<argument><expr><name pos:line="36" pos:column="16">c<pos:position pos:line="36" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="36" pos:column="19">288<pos:position pos:line="36" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="36" pos:column="24">257<pos:position pos:line="36" pos:column="27"/></literal></expr></argument>, <argument><expr><name pos:line="36" pos:column="29">cplens<pos:position pos:line="36" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="37">cplext<pos:position pos:line="36" pos:column="43"/></name></expr></argument>, <argument><expr><operator pos:line="36" pos:column="45">&amp;<pos:position pos:line="36" pos:column="50"/></operator><name pos:line="36" pos:column="46">fixed_tl<pos:position pos:line="36" pos:column="54"/></name></expr></argument>, <argument><expr><operator pos:line="36" pos:column="56">&amp;<pos:position pos:line="36" pos:column="61"/></operator><name pos:line="36" pos:column="57">fixed_bl<pos:position pos:line="36" pos:column="65"/></name></expr></argument>,
               <argument><expr><name pos:line="37" pos:column="16">fixed_mem<pos:position pos:line="37" pos:column="25"/></name></expr></argument>, <argument><expr><operator pos:line="37" pos:column="27">&amp;<pos:position pos:line="37" pos:column="32"/></operator><name pos:line="37" pos:column="28">f<pos:position pos:line="37" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="31">v<pos:position pos:line="37" pos:column="32"/></name></expr></argument>)<pos:position pos:line="37" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="34"/></expr_stmt>

    <comment type="block" pos:line="39" pos:column="5">/* distance table */</comment>
    <for pos:line="40" pos:column="5">for <control pos:line="40" pos:column="9">(<init><expr><name pos:line="40" pos:column="10">k<pos:position pos:line="40" pos:column="11"/></name> <operator pos:line="40" pos:column="12">=<pos:position pos:line="40" pos:column="13"/></operator> <literal type="number" pos:line="40" pos:column="14">0<pos:position pos:line="40" pos:column="15"/></literal></expr>;<pos:position pos:line="40" pos:column="16"/></init> <condition><expr><name pos:line="40" pos:column="17">k<pos:position pos:line="40" pos:column="18"/></name> <operator pos:line="40" pos:column="19">&lt;<pos:position pos:line="40" pos:column="23"/></operator> <literal type="number" pos:line="40" pos:column="21">30<pos:position pos:line="40" pos:column="23"/></literal></expr>;<pos:position pos:line="40" pos:column="24"/></condition> <incr><expr><name pos:line="40" pos:column="25">k<pos:position pos:line="40" pos:column="26"/></name><operator pos:line="40" pos:column="26">++<pos:position pos:line="40" pos:column="28"/></operator></expr></incr>)<pos:position pos:line="40" pos:column="29"/></control>
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="41" pos:column="7">c<pos:position pos:line="41" pos:column="8"/></name><index pos:line="41" pos:column="8">[<expr><name pos:line="41" pos:column="9">k<pos:position pos:line="41" pos:column="10"/></name></expr>]<pos:position pos:line="41" pos:column="11"/></index></name> <operator pos:line="41" pos:column="12">=<pos:position pos:line="41" pos:column="13"/></operator> <literal type="number" pos:line="41" pos:column="14">5<pos:position pos:line="41" pos:column="15"/></literal></expr>;<pos:position pos:line="41" pos:column="16"/></expr_stmt></block></for>
    <expr_stmt><expr><name pos:line="42" pos:column="5">fixed_bd<pos:position pos:line="42" pos:column="13"/></name> <operator pos:line="42" pos:column="14">=<pos:position pos:line="42" pos:column="15"/></operator> <literal type="number" pos:line="42" pos:column="16">5<pos:position pos:line="42" pos:column="17"/></literal></expr>;<pos:position pos:line="42" pos:column="18"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="43" pos:column="5">huft_build<pos:position pos:line="43" pos:column="15"/></name><argument_list pos:line="43" pos:column="15">(<argument><expr><name pos:line="43" pos:column="16">c<pos:position pos:line="43" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="43" pos:column="19">30<pos:position pos:line="43" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="43" pos:column="23">0<pos:position pos:line="43" pos:column="24"/></literal></expr></argument>, <argument><expr><name pos:line="43" pos:column="26">cpdist<pos:position pos:line="43" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="34">cpdext<pos:position pos:line="43" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="43" pos:column="42">&amp;<pos:position pos:line="43" pos:column="47"/></operator><name pos:line="43" pos:column="43">fixed_td<pos:position pos:line="43" pos:column="51"/></name></expr></argument>, <argument><expr><operator pos:line="43" pos:column="53">&amp;<pos:position pos:line="43" pos:column="58"/></operator><name pos:line="43" pos:column="54">fixed_bd<pos:position pos:line="43" pos:column="62"/></name></expr></argument>,
               <argument><expr><name pos:line="44" pos:column="16">fixed_mem<pos:position pos:line="44" pos:column="25"/></name></expr></argument>, <argument><expr><operator pos:line="44" pos:column="27">&amp;<pos:position pos:line="44" pos:column="32"/></operator><name pos:line="44" pos:column="28">f<pos:position pos:line="44" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="31">v<pos:position pos:line="44" pos:column="32"/></name></expr></argument>)<pos:position pos:line="44" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="34"/></expr_stmt>

    <comment type="block" pos:line="46" pos:column="5">/* done */</comment>
    <expr_stmt><expr><call><name pos:line="47" pos:column="5">ZFREE<pos:position pos:line="47" pos:column="10"/></name><argument_list pos:line="47" pos:column="10">(<argument><expr><name pos:line="47" pos:column="11">z<pos:position pos:line="47" pos:column="12"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="14">v<pos:position pos:line="47" pos:column="15"/></name></expr></argument>)<pos:position pos:line="47" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="17"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="48" pos:column="5">ZFREE<pos:position pos:line="48" pos:column="10"/></name><argument_list pos:line="48" pos:column="10">(<argument><expr><name pos:line="48" pos:column="11">z<pos:position pos:line="48" pos:column="12"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="14">c<pos:position pos:line="48" pos:column="15"/></name></expr></argument>)<pos:position pos:line="48" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="17"/></expr_stmt>
    <expr_stmt><expr><name pos:line="49" pos:column="5">fixed_built<pos:position pos:line="49" pos:column="16"/></name> <operator pos:line="49" pos:column="17">=<pos:position pos:line="49" pos:column="18"/></operator> <literal type="number" pos:line="49" pos:column="19">1<pos:position pos:line="49" pos:column="20"/></literal></expr>;<pos:position pos:line="49" pos:column="21"/></expr_stmt>
  }<pos:position pos:line="50" pos:column="4"/></block></then></if>
<cpp:endif pos:line="51" pos:column="1">#<cpp:directive pos:line="51" pos:column="2">endif<pos:position pos:line="51" pos:column="7"/></cpp:directive></cpp:endif>
  <expr_stmt><expr><operator pos:line="52" pos:column="3">*<pos:position pos:line="52" pos:column="4"/></operator><name pos:line="52" pos:column="4">bl<pos:position pos:line="52" pos:column="6"/></name> <operator pos:line="52" pos:column="7">=<pos:position pos:line="52" pos:column="8"/></operator> <name pos:line="52" pos:column="9">fixed_bl<pos:position pos:line="52" pos:column="17"/></name></expr>;<pos:position pos:line="52" pos:column="18"/></expr_stmt>
  <expr_stmt><expr><operator pos:line="53" pos:column="3">*<pos:position pos:line="53" pos:column="4"/></operator><name pos:line="53" pos:column="4">bd<pos:position pos:line="53" pos:column="6"/></name> <operator pos:line="53" pos:column="7">=<pos:position pos:line="53" pos:column="8"/></operator> <name pos:line="53" pos:column="9">fixed_bd<pos:position pos:line="53" pos:column="17"/></name></expr>;<pos:position pos:line="53" pos:column="18"/></expr_stmt>
  <expr_stmt><expr><operator pos:line="54" pos:column="3">*<pos:position pos:line="54" pos:column="4"/></operator><name pos:line="54" pos:column="4">tl<pos:position pos:line="54" pos:column="6"/></name> <operator pos:line="54" pos:column="7">=<pos:position pos:line="54" pos:column="8"/></operator> <name pos:line="54" pos:column="9">fixed_tl<pos:position pos:line="54" pos:column="17"/></name></expr>;<pos:position pos:line="54" pos:column="18"/></expr_stmt>
  <expr_stmt><expr><operator pos:line="55" pos:column="3">*<pos:position pos:line="55" pos:column="4"/></operator><name pos:line="55" pos:column="4">td<pos:position pos:line="55" pos:column="6"/></name> <operator pos:line="55" pos:column="7">=<pos:position pos:line="55" pos:column="8"/></operator> <name pos:line="55" pos:column="9">fixed_td<pos:position pos:line="55" pos:column="17"/></name></expr>;<pos:position pos:line="55" pos:column="18"/></expr_stmt>
  <return pos:line="56" pos:column="3">return <expr><name pos:line="56" pos:column="10">Z_OK<pos:position pos:line="56" pos:column="14"/></name></expr>;<pos:position pos:line="56" pos:column="15"/></return>
}<pos:position pos:line="57" pos:column="2"/></block></unit>
