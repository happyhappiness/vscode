<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_130_rsync-2.6.2.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">write_batch_delta_file<pos:position pos:line="1" pos:column="28"/></name><parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><name pos:line="1" pos:column="29">char<pos:position pos:line="1" pos:column="33"/></name> <modifier pos:line="1" pos:column="34">*<pos:position pos:line="1" pos:column="35"/></modifier></type><name pos:line="1" pos:column="35">buff<pos:position pos:line="1" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="41">int<pos:position pos:line="1" pos:column="44"/></name></type> <name pos:line="1" pos:column="45">bytes_to_write<pos:position pos:line="1" pos:column="59"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="60"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">char<pos:position pos:line="3" pos:column="13"/></name></type> <name><name pos:line="3" pos:column="14">filename<pos:position pos:line="3" pos:column="22"/></name><index pos:line="3" pos:column="22">[<expr><name pos:line="3" pos:column="23">MAXPATHLEN<pos:position pos:line="3" pos:column="33"/></name></expr>]<pos:position pos:line="3" pos:column="34"/></index></name></decl>;<pos:position pos:line="3" pos:column="35"/></decl_stmt>

	<if pos:line="5" pos:column="9">if <condition pos:line="5" pos:column="12">(<expr><name pos:line="5" pos:column="13">f_delta<pos:position pos:line="5" pos:column="20"/></name> <operator pos:line="5" pos:column="21">&lt;<pos:position pos:line="5" pos:column="25"/></operator> <literal type="number" pos:line="5" pos:column="23">0<pos:position pos:line="5" pos:column="24"/></literal></expr>)<pos:position pos:line="5" pos:column="25"/></condition><then pos:line="5" pos:column="25"> <block pos:line="5" pos:column="26">{
		<expr_stmt><expr><call><name pos:line="6" pos:column="17">stringjoin<pos:position pos:line="6" pos:column="27"/></name><argument_list pos:line="6" pos:column="27">(<argument><expr><name pos:line="6" pos:column="28">filename<pos:position pos:line="6" pos:column="36"/></name></expr></argument>, <argument><expr><sizeof pos:line="6" pos:column="38">sizeof <name pos:line="6" pos:column="45">filename<pos:position pos:line="6" pos:column="53"/></name></sizeof></expr></argument>,
		    <argument><expr><name pos:line="7" pos:column="21">batch_prefix<pos:position pos:line="7" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="35">rsync_delta_file<pos:position pos:line="7" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="53">NULL<pos:position pos:line="7" pos:column="57"/></name></expr></argument>)<pos:position pos:line="7" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="59"/></expr_stmt>

		<expr_stmt><expr><name pos:line="9" pos:column="17">f_delta<pos:position pos:line="9" pos:column="24"/></name> <operator pos:line="9" pos:column="25">=<pos:position pos:line="9" pos:column="26"/></operator> <call><name pos:line="9" pos:column="27">do_open<pos:position pos:line="9" pos:column="34"/></name><argument_list pos:line="9" pos:column="34">(<argument><expr><name pos:line="9" pos:column="35">filename<pos:position pos:line="9" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="45">O_WRONLY<pos:position pos:line="9" pos:column="53"/></name> <operator pos:line="9" pos:column="54">|<pos:position pos:line="9" pos:column="55"/></operator> <name pos:line="9" pos:column="56">O_CREAT<pos:position pos:line="9" pos:column="63"/></name> <operator pos:line="9" pos:column="64">|<pos:position pos:line="9" pos:column="65"/></operator> <name pos:line="9" pos:column="66">O_TRUNC<pos:position pos:line="9" pos:column="73"/></name></expr></argument>,
				  <argument><expr><name pos:line="10" pos:column="35">S_IRUSR<pos:position pos:line="10" pos:column="42"/></name> <operator pos:line="10" pos:column="43">|<pos:position pos:line="10" pos:column="44"/></operator> <name pos:line="10" pos:column="45">S_IWUSR<pos:position pos:line="10" pos:column="52"/></name></expr></argument>)<pos:position pos:line="10" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="54"/></expr_stmt>
		<if pos:line="11" pos:column="17">if <condition pos:line="11" pos:column="20">(<expr><name pos:line="11" pos:column="21">f_delta<pos:position pos:line="11" pos:column="28"/></name> <operator pos:line="11" pos:column="29">&lt;<pos:position pos:line="11" pos:column="33"/></operator> <literal type="number" pos:line="11" pos:column="31">0<pos:position pos:line="11" pos:column="32"/></literal></expr>)<pos:position pos:line="11" pos:column="33"/></condition><then pos:line="11" pos:column="33"> <block pos:line="11" pos:column="34">{
			<expr_stmt><expr><call><name pos:line="12" pos:column="25">rprintf<pos:position pos:line="12" pos:column="32"/></name><argument_list pos:line="12" pos:column="32">(<argument><expr><name pos:line="12" pos:column="33">FERROR<pos:position pos:line="12" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="12" pos:column="41">"Batch file %s open error: %s\n"<pos:position pos:line="12" pos:column="73"/></literal></expr></argument>,
				<argument><expr><name pos:line="13" pos:column="33">filename<pos:position pos:line="13" pos:column="41"/></name></expr></argument>, <argument><expr><call><name pos:line="13" pos:column="43">strerror<pos:position pos:line="13" pos:column="51"/></name><argument_list pos:line="13" pos:column="51">(<argument><expr><name pos:line="13" pos:column="52">errno<pos:position pos:line="13" pos:column="57"/></name></expr></argument>)<pos:position pos:line="13" pos:column="58"/></argument_list></call></expr></argument>)<pos:position pos:line="13" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="60"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="14" pos:column="25">exit_cleanup<pos:position pos:line="14" pos:column="37"/></name><argument_list pos:line="14" pos:column="37">(<argument><expr><literal type="number" pos:line="14" pos:column="38">1<pos:position pos:line="14" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="41"/></expr_stmt>
		}<pos:position pos:line="15" pos:column="18"/></block></then></if>
	}<pos:position pos:line="16" pos:column="10"/></block></then></if>

	<if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><call><name pos:line="18" pos:column="13">write<pos:position pos:line="18" pos:column="18"/></name><argument_list pos:line="18" pos:column="18">(<argument><expr><name pos:line="18" pos:column="19">f_delta<pos:position pos:line="18" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="28">buff<pos:position pos:line="18" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="34">bytes_to_write<pos:position pos:line="18" pos:column="48"/></name></expr></argument>)<pos:position pos:line="18" pos:column="49"/></argument_list></call> <operator pos:line="18" pos:column="50">&lt;<pos:position pos:line="18" pos:column="54"/></operator> <literal type="number" pos:line="18" pos:column="52">0<pos:position pos:line="18" pos:column="53"/></literal></expr>)<pos:position pos:line="18" pos:column="54"/></condition><then pos:line="18" pos:column="54"> <block pos:line="18" pos:column="55">{
		<expr_stmt><expr><call><name pos:line="19" pos:column="17">rprintf<pos:position pos:line="19" pos:column="24"/></name><argument_list pos:line="19" pos:column="24">(<argument><expr><name pos:line="19" pos:column="25">FERROR<pos:position pos:line="19" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="33">"Batch file %s write error: %s\n"<pos:position pos:line="19" pos:column="66"/></literal></expr></argument>,
		    <argument><expr><name pos:line="20" pos:column="21">filename<pos:position pos:line="20" pos:column="29"/></name></expr></argument>, <argument><expr><call><name pos:line="20" pos:column="31">strerror<pos:position pos:line="20" pos:column="39"/></name><argument_list pos:line="20" pos:column="39">(<argument><expr><name pos:line="20" pos:column="40">errno<pos:position pos:line="20" pos:column="45"/></name></expr></argument>)<pos:position pos:line="20" pos:column="46"/></argument_list></call></expr></argument>)<pos:position pos:line="20" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="48"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="21" pos:column="17">close<pos:position pos:line="21" pos:column="22"/></name><argument_list pos:line="21" pos:column="22">(<argument><expr><name pos:line="21" pos:column="23">f_delta<pos:position pos:line="21" pos:column="30"/></name></expr></argument>)<pos:position pos:line="21" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="32"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="22" pos:column="17">exit_cleanup<pos:position pos:line="22" pos:column="29"/></name><argument_list pos:line="22" pos:column="29">(<argument><expr><literal type="number" pos:line="22" pos:column="30">1<pos:position pos:line="22" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="33"/></expr_stmt>
	}<pos:position pos:line="23" pos:column="10"/></block></then></if>
}<pos:position pos:line="24" pos:column="2"/></block></function></unit>
