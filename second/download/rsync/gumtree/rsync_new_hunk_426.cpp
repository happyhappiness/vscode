void init_hard_links(struct file_list *flist);
int check_hard_link(struct file_struct *file);
void do_hard_links(struct file_list *flist);
int64 write_total(void);
int64 read_total(void);
void setup_nonblocking(int f_in,int f_out);
int32 read_int(int f);
int64 read_longint(int f);
void read_buf(int f,char *buf,int len);
void read_sbuf(int f,char *buf,int len);
unsigned char read_byte(int f);
int sparse_end(int f);
int write_file(int f,char *buf,int len);
void write_int(int f,int32 x);
void write_longint(int f, int64 x);
void write_buf(int f,char *buf,int len);
void write_sbuf(int f,char *buf);
void write_byte(int f,unsigned char c);
void write_flush(int f);
int read_line(int f, char *buf, int maxlen);
void io_printf(int fd, const char *format, ...);
char *lp_motd_file(void);
char *lp_lock_file(void);
int lp_max_connections(void);
int lp_syslog_facility(void);
char *lp_name(int );
char *lp_comment(int );
char *lp_path(int );
BOOL lp_read_only(int );
BOOL lp_list(int );
char *lp_uid(int );
char *lp_gid(int );
char *lp_hosts_allow(int );
char *lp_hosts_deny(int );
char *lp_auth_users(int );
char *lp_secrets_file(int );
BOOL lp_load(char *pszFname);
int lp_numservices(void);
int lp_number(char *name);
void rprintf(int fd, const char *format, ...);
void rflush(int fd);
void start_server(int f_in, int f_out, int argc, char *argv[]);
int client_run(int f_in, int f_out, int pid, int argc, char *argv[]);
int start_client(int argc, char *argv[]);
int main(int argc,char *argv[]);
void match_sums(int f,struct sum_struct *s,struct map_struct *buf,OFF_T len);
void match_report(void);
void *smb_mem_malloc(size_t size,char *file,int line);
char *smb_mem_strdup(char *s, char *file, int line);
int smb_mem_free(void *ptr,char *file,int line);
void smb_mem_write_info(void *ptr,FILE *outfile);
char *smb_mem_query_file(void *ptr);
int smb_mem_query_line(void *ptr);
int smb_mem_test(void *ptr);
void smb_mem_write_status(FILE *outfile);
void smb_mem_write_verbose(FILE *outfile);
void smb_mem_write_errors(FILE *outfile);
void smb_mem_set_multiplier(int multiplier);
void *smb_mem_resize(void *ptr,size_t newsize);
void usage(int F);
void parse_arguments(int argc, char *argv[]);
void server_options(char **args,int *argc);
BOOL pm_process( char *FileName,
                 BOOL (*sfunc)(char *),
                 BOOL (*pfunc)(char *, char *) );
int adapt_block_size(struct file_struct *file, int bsize);
void recv_generator(char *fname,struct file_list *flist,int i,int f_out);
void exit_cleanup(int code);
void sig_int(void);
int recv_files(int f_in,struct file_list *flist,char *local_name,int f_gen);
void send_files(struct file_list *flist,int f_out,int f_in);
void generate_files(int f,struct file_list *flist,char *local_name,int f_recv);
int open_socket_out(char *host, int port);
int is_a_socket(int fd);
void start_accept_loop(int port, int (*fn)(int ));
void set_socket_options(int fd, char *options);
void become_daemon(void);
char *client_addr(int fd);
char *client_name(int fd);
int do_unlink(char *fname);
int do_symlink(char *fname1, char *fname2);
int do_link(char *fname1, char *fname2);
int do_lchown(const char *path, uid_t owner, gid_t group);
int do_mknod(char *pathname, mode_t mode, dev_t dev);
int do_rmdir(char *pathname);
int do_open(char *pathname, int flags, mode_t mode);
int do_chmod(const char *path, mode_t mode);
int do_rename(char *fname1, char *fname2);
int do_mkdir(char *fname, mode_t mode);
char *do_mktemp(char *template);
int do_stat(const char *fname, STRUCT_STAT *st);
int do_lstat(const char *fname, STRUCT_STAT *st);
int do_fstat(int fd, STRUCT_STAT *st);
OFF_T do_lseek(int fd, OFF_T offset, int whence);
char *d_name(struct dirent *di);
void send_token(int f,int token,struct map_struct *buf,int offset,
		int n,int toklen);
int recv_token(int f,char **data);
void see_token(char *data, int toklen);
void add_uid(uid_t uid);
void add_gid(gid_t gid);
void send_uid_list(int f);
void recv_uid_list(int f, struct file_list *flist);
int num_waiting(int fd);
struct map_struct *map_file(int fd,OFF_T len);
char *map_ptr(struct map_struct *map,OFF_T offset,int len);
void unmap_file(struct map_struct *map);
int piped_child(char **command,int *f_in,int *f_out);
int local_child(int argc, char **argv,int *f_in,int *f_out);
void out_of_memory(char *str);
void overflow(char *str);
int set_modtime(char *fname,time_t modtime);
