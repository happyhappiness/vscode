<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_445_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">file_checksum<pos:position pos:line="1" pos:column="19"/></name><parameter_list pos:line="1" pos:column="19">(<parameter><decl><type><specifier pos:line="1" pos:column="20">const<pos:position pos:line="1" pos:column="25"/></specifier> <name pos:line="1" pos:column="26">char<pos:position pos:line="1" pos:column="30"/></name> <modifier pos:line="1" pos:column="31">*<pos:position pos:line="1" pos:column="32"/></modifier></type><name pos:line="1" pos:column="32">fname<pos:position pos:line="1" pos:column="37"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="39">const<pos:position pos:line="1" pos:column="44"/></specifier> <name pos:line="1" pos:column="45">STRUCT_STAT<pos:position pos:line="1" pos:column="56"/></name> <modifier pos:line="1" pos:column="57">*<pos:position pos:line="1" pos:column="58"/></modifier></type><name pos:line="1" pos:column="58">st_p<pos:position pos:line="1" pos:column="62"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="64">char<pos:position pos:line="1" pos:column="68"/></name> <modifier pos:line="1" pos:column="69">*<pos:position pos:line="1" pos:column="70"/></modifier></type><name pos:line="1" pos:column="70">sum<pos:position pos:line="1" pos:column="73"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="74"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">map_struct<pos:position pos:line="3" pos:column="26"/></name></name> <modifier pos:line="3" pos:column="27">*<pos:position pos:line="3" pos:column="28"/></modifier></type><name pos:line="3" pos:column="28">buf<pos:position pos:line="3" pos:column="31"/></name></decl>;<pos:position pos:line="3" pos:column="32"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">OFF_T<pos:position pos:line="4" pos:column="14"/></name></type> <name pos:line="4" pos:column="15">i<pos:position pos:line="4" pos:column="16"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="18">len<pos:position pos:line="4" pos:column="21"/></name> <init pos:line="4" pos:column="22">= <expr><name><name pos:line="4" pos:column="24">st_p<pos:position pos:line="4" pos:column="28"/></name><operator pos:line="4" pos:column="28">-&gt;<pos:position pos:line="4" pos:column="33"/></operator><name pos:line="4" pos:column="30">st_size<pos:position pos:line="4" pos:column="37"/></name></name></expr></init></decl>;<pos:position pos:line="4" pos:column="38"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">md_context<pos:position pos:line="5" pos:column="19"/></name></type> <name pos:line="5" pos:column="20">m<pos:position pos:line="5" pos:column="21"/></name></decl>;<pos:position pos:line="5" pos:column="22"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int32<pos:position pos:line="6" pos:column="14"/></name></type> <name pos:line="6" pos:column="15">remainder<pos:position pos:line="6" pos:column="24"/></name></decl>;<pos:position pos:line="6" pos:column="25"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">int<pos:position pos:line="7" pos:column="12"/></name></type> <name pos:line="7" pos:column="13">fd<pos:position pos:line="7" pos:column="15"/></name></decl>;<pos:position pos:line="7" pos:column="16"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="9" pos:column="9">memset<pos:position pos:line="9" pos:column="15"/></name><argument_list pos:line="9" pos:column="15">(<argument><expr><name pos:line="9" pos:column="16">sum<pos:position pos:line="9" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="9" pos:column="21">0<pos:position pos:line="9" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="9" pos:column="24">MAX_DIGEST_LEN<pos:position pos:line="9" pos:column="38"/></name></expr></argument>)<pos:position pos:line="9" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="40"/></expr_stmt>

	<expr_stmt><expr><name pos:line="11" pos:column="9">fd<pos:position pos:line="11" pos:column="11"/></name> <operator pos:line="11" pos:column="12">=<pos:position pos:line="11" pos:column="13"/></operator> <call><name pos:line="11" pos:column="14">do_open<pos:position pos:line="11" pos:column="21"/></name><argument_list pos:line="11" pos:column="21">(<argument><expr><name pos:line="11" pos:column="22">fname<pos:position pos:line="11" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="29">O_RDONLY<pos:position pos:line="11" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="11" pos:column="39">0<pos:position pos:line="11" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="42"/></expr_stmt>
	<if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><name pos:line="12" pos:column="13">fd<pos:position pos:line="12" pos:column="15"/></name> <operator pos:line="12" pos:column="16">==<pos:position pos:line="12" pos:column="18"/></operator> <operator pos:line="12" pos:column="19">-<pos:position pos:line="12" pos:column="20"/></operator><literal type="number" pos:line="12" pos:column="20">1<pos:position pos:line="12" pos:column="21"/></literal></expr>)<pos:position pos:line="12" pos:column="22"/></condition><then pos:line="12" pos:column="22">
		<block type="pseudo"><return pos:line="13" pos:column="17">return;<pos:position pos:line="13" pos:column="24"/></return></block></then></if>

	<expr_stmt><expr><name pos:line="15" pos:column="9">buf<pos:position pos:line="15" pos:column="12"/></name> <operator pos:line="15" pos:column="13">=<pos:position pos:line="15" pos:column="14"/></operator> <call><name pos:line="15" pos:column="15">map_file<pos:position pos:line="15" pos:column="23"/></name><argument_list pos:line="15" pos:column="23">(<argument><expr><name pos:line="15" pos:column="24">fd<pos:position pos:line="15" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="28">len<pos:position pos:line="15" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="33">MAX_MAP_SIZE<pos:position pos:line="15" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="47">CSUM_CHUNK<pos:position pos:line="15" pos:column="57"/></name></expr></argument>)<pos:position pos:line="15" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="59"/></expr_stmt>

	<if pos:line="17" pos:column="9">if <condition pos:line="17" pos:column="12">(<expr><name pos:line="17" pos:column="13">protocol_version<pos:position pos:line="17" pos:column="29"/></name> <operator pos:line="17" pos:column="30">&gt;=<pos:position pos:line="17" pos:column="35"/></operator> <literal type="number" pos:line="17" pos:column="33">30<pos:position pos:line="17" pos:column="35"/></literal></expr>)<pos:position pos:line="17" pos:column="36"/></condition><then pos:line="17" pos:column="36"> <block pos:line="17" pos:column="37">{
		<expr_stmt><expr><call><name pos:line="18" pos:column="17">md5_begin<pos:position pos:line="18" pos:column="26"/></name><argument_list pos:line="18" pos:column="26">(<argument><expr><operator pos:line="18" pos:column="27">&amp;<pos:position pos:line="18" pos:column="32"/></operator><name pos:line="18" pos:column="28">m<pos:position pos:line="18" pos:column="29"/></name></expr></argument>)<pos:position pos:line="18" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="31"/></expr_stmt>

		<for pos:line="20" pos:column="17">for <control pos:line="20" pos:column="21">(<init><expr><name pos:line="20" pos:column="22">i<pos:position pos:line="20" pos:column="23"/></name> <operator pos:line="20" pos:column="24">=<pos:position pos:line="20" pos:column="25"/></operator> <literal type="number" pos:line="20" pos:column="26">0<pos:position pos:line="20" pos:column="27"/></literal></expr>;<pos:position pos:line="20" pos:column="28"/></init> <condition><expr><name pos:line="20" pos:column="29">i<pos:position pos:line="20" pos:column="30"/></name> <operator pos:line="20" pos:column="31">+<pos:position pos:line="20" pos:column="32"/></operator> <name pos:line="20" pos:column="33">CSUM_CHUNK<pos:position pos:line="20" pos:column="43"/></name> <operator pos:line="20" pos:column="44">&lt;=<pos:position pos:line="20" pos:column="49"/></operator> <name pos:line="20" pos:column="47">len<pos:position pos:line="20" pos:column="50"/></name></expr>;<pos:position pos:line="20" pos:column="51"/></condition> <incr><expr><name pos:line="20" pos:column="52">i<pos:position pos:line="20" pos:column="53"/></name> <operator pos:line="20" pos:column="54">+=<pos:position pos:line="20" pos:column="56"/></operator> <name pos:line="20" pos:column="57">CSUM_CHUNK<pos:position pos:line="20" pos:column="67"/></name></expr></incr>)<pos:position pos:line="20" pos:column="68"/></control> <block pos:line="20" pos:column="69">{
			<expr_stmt><expr><call><name pos:line="21" pos:column="25">md5_update<pos:position pos:line="21" pos:column="35"/></name><argument_list pos:line="21" pos:column="35">(<argument><expr><operator pos:line="21" pos:column="36">&amp;<pos:position pos:line="21" pos:column="41"/></operator><name pos:line="21" pos:column="37">m<pos:position pos:line="21" pos:column="38"/></name></expr></argument>, <argument><expr><operator pos:line="21" pos:column="40">(<pos:position pos:line="21" pos:column="41"/></operator><name pos:line="21" pos:column="41">uchar<pos:position pos:line="21" pos:column="46"/></name> <operator pos:line="21" pos:column="47">*<pos:position pos:line="21" pos:column="48"/></operator><operator pos:line="21" pos:column="48">)<pos:position pos:line="21" pos:column="49"/></operator><call><name pos:line="21" pos:column="49">map_ptr<pos:position pos:line="21" pos:column="56"/></name><argument_list pos:line="21" pos:column="56">(<argument><expr><name pos:line="21" pos:column="57">buf<pos:position pos:line="21" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="62">i<pos:position pos:line="21" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="65">CSUM_CHUNK<pos:position pos:line="21" pos:column="75"/></name></expr></argument>)<pos:position pos:line="21" pos:column="76"/></argument_list></call></expr></argument>,
				   <argument><expr><name pos:line="22" pos:column="36">CSUM_CHUNK<pos:position pos:line="22" pos:column="46"/></name></expr></argument>)<pos:position pos:line="22" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="48"/></expr_stmt>
		}<pos:position pos:line="23" pos:column="18"/></block></for>

		<expr_stmt><expr><name pos:line="25" pos:column="17">remainder<pos:position pos:line="25" pos:column="26"/></name> <operator pos:line="25" pos:column="27">=<pos:position pos:line="25" pos:column="28"/></operator> <call pos:line="25" pos:column="29">(<name pos:line="25" pos:column="30">int32<pos:position pos:line="25" pos:column="35"/></name>)<argument_list pos:line="25" pos:column="36">(<argument><expr><name pos:line="25" pos:column="37">len<pos:position pos:line="25" pos:column="40"/></name> <operator pos:line="25" pos:column="41">-<pos:position pos:line="25" pos:column="42"/></operator> <name pos:line="25" pos:column="43">i<pos:position pos:line="25" pos:column="44"/></name></expr></argument>)<pos:position pos:line="25" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="46"/></expr_stmt>
		<if pos:line="26" pos:column="17">if <condition pos:line="26" pos:column="20">(<expr><name pos:line="26" pos:column="21">remainder<pos:position pos:line="26" pos:column="30"/></name> <operator pos:line="26" pos:column="31">&gt;<pos:position pos:line="26" pos:column="35"/></operator> <literal type="number" pos:line="26" pos:column="33">0<pos:position pos:line="26" pos:column="34"/></literal></expr>)<pos:position pos:line="26" pos:column="35"/></condition><then pos:line="26" pos:column="35">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="27" pos:column="25">md5_update<pos:position pos:line="27" pos:column="35"/></name><argument_list pos:line="27" pos:column="35">(<argument><expr><operator pos:line="27" pos:column="36">&amp;<pos:position pos:line="27" pos:column="41"/></operator><name pos:line="27" pos:column="37">m<pos:position pos:line="27" pos:column="38"/></name></expr></argument>, <argument><expr><operator pos:line="27" pos:column="40">(<pos:position pos:line="27" pos:column="41"/></operator><name pos:line="27" pos:column="41">uchar<pos:position pos:line="27" pos:column="46"/></name> <operator pos:line="27" pos:column="47">*<pos:position pos:line="27" pos:column="48"/></operator><operator pos:line="27" pos:column="48">)<pos:position pos:line="27" pos:column="49"/></operator><call><name pos:line="27" pos:column="49">map_ptr<pos:position pos:line="27" pos:column="56"/></name><argument_list pos:line="27" pos:column="56">(<argument><expr><name pos:line="27" pos:column="57">buf<pos:position pos:line="27" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="62">i<pos:position pos:line="27" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="65">remainder<pos:position pos:line="27" pos:column="74"/></name></expr></argument>)<pos:position pos:line="27" pos:column="75"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="27" pos:column="77">remainder<pos:position pos:line="27" pos:column="86"/></name></expr></argument>)<pos:position pos:line="27" pos:column="87"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="88"/></expr_stmt></block></then></if>

		<expr_stmt><expr><call><name pos:line="29" pos:column="17">md5_result<pos:position pos:line="29" pos:column="27"/></name><argument_list pos:line="29" pos:column="27">(<argument><expr><operator pos:line="29" pos:column="28">&amp;<pos:position pos:line="29" pos:column="33"/></operator><name pos:line="29" pos:column="29">m<pos:position pos:line="29" pos:column="30"/></name></expr></argument>, <argument><expr><operator pos:line="29" pos:column="32">(<pos:position pos:line="29" pos:column="33"/></operator><name pos:line="29" pos:column="33">uchar<pos:position pos:line="29" pos:column="38"/></name> <operator pos:line="29" pos:column="39">*<pos:position pos:line="29" pos:column="40"/></operator><operator pos:line="29" pos:column="40">)<pos:position pos:line="29" pos:column="41"/></operator><name pos:line="29" pos:column="41">sum<pos:position pos:line="29" pos:column="44"/></name></expr></argument>)<pos:position pos:line="29" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="46"/></expr_stmt>
	}<pos:position pos:line="30" pos:column="10"/></block></then> <else pos:line="30" pos:column="11">else <block pos:line="30" pos:column="16">{
		<expr_stmt><expr><call><name pos:line="31" pos:column="17">mdfour_begin<pos:position pos:line="31" pos:column="29"/></name><argument_list pos:line="31" pos:column="29">(<argument><expr><operator pos:line="31" pos:column="30">&amp;<pos:position pos:line="31" pos:column="35"/></operator><name pos:line="31" pos:column="31">m<pos:position pos:line="31" pos:column="32"/></name></expr></argument>)<pos:position pos:line="31" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="34"/></expr_stmt>

		<for pos:line="33" pos:column="17">for <control pos:line="33" pos:column="21">(<init><expr><name pos:line="33" pos:column="22">i<pos:position pos:line="33" pos:column="23"/></name> <operator pos:line="33" pos:column="24">=<pos:position pos:line="33" pos:column="25"/></operator> <literal type="number" pos:line="33" pos:column="26">0<pos:position pos:line="33" pos:column="27"/></literal></expr>;<pos:position pos:line="33" pos:column="28"/></init> <condition><expr><name pos:line="33" pos:column="29">i<pos:position pos:line="33" pos:column="30"/></name> <operator pos:line="33" pos:column="31">+<pos:position pos:line="33" pos:column="32"/></operator> <name pos:line="33" pos:column="33">CSUM_CHUNK<pos:position pos:line="33" pos:column="43"/></name> <operator pos:line="33" pos:column="44">&lt;=<pos:position pos:line="33" pos:column="49"/></operator> <name pos:line="33" pos:column="47">len<pos:position pos:line="33" pos:column="50"/></name></expr>;<pos:position pos:line="33" pos:column="51"/></condition> <incr><expr><name pos:line="33" pos:column="52">i<pos:position pos:line="33" pos:column="53"/></name> <operator pos:line="33" pos:column="54">+=<pos:position pos:line="33" pos:column="56"/></operator> <name pos:line="33" pos:column="57">CSUM_CHUNK<pos:position pos:line="33" pos:column="67"/></name></expr></incr>)<pos:position pos:line="33" pos:column="68"/></control> <block pos:line="33" pos:column="69">{
			<expr_stmt><expr><call><name pos:line="34" pos:column="25">mdfour_update<pos:position pos:line="34" pos:column="38"/></name><argument_list pos:line="34" pos:column="38">(<argument><expr><operator pos:line="34" pos:column="39">&amp;<pos:position pos:line="34" pos:column="44"/></operator><name pos:line="34" pos:column="40">m<pos:position pos:line="34" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="34" pos:column="43">(<pos:position pos:line="34" pos:column="44"/></operator><name pos:line="34" pos:column="44">uchar<pos:position pos:line="34" pos:column="49"/></name> <operator pos:line="34" pos:column="50">*<pos:position pos:line="34" pos:column="51"/></operator><operator pos:line="34" pos:column="51">)<pos:position pos:line="34" pos:column="52"/></operator><call><name pos:line="34" pos:column="52">map_ptr<pos:position pos:line="34" pos:column="59"/></name><argument_list pos:line="34" pos:column="59">(<argument><expr><name pos:line="34" pos:column="60">buf<pos:position pos:line="34" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="65">i<pos:position pos:line="34" pos:column="66"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="68">CSUM_CHUNK<pos:position pos:line="34" pos:column="78"/></name></expr></argument>)<pos:position pos:line="34" pos:column="79"/></argument_list></call></expr></argument>,
				      <argument><expr><name pos:line="35" pos:column="39">CSUM_CHUNK<pos:position pos:line="35" pos:column="49"/></name></expr></argument>)<pos:position pos:line="35" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="51"/></expr_stmt>
		}<pos:position pos:line="36" pos:column="18"/></block></for>

		<comment type="block" pos:line="38" pos:column="17">/* Prior to version 27 an incorrect MD4 checksum was computed
		 * by failing to call mdfour_tail() for block sizes that
		 * are multiples of 64.  This is fixed by calling mdfour_update()
		 * even when there are no more bytes. */</comment>
		<expr_stmt><expr><name pos:line="42" pos:column="17">remainder<pos:position pos:line="42" pos:column="26"/></name> <operator pos:line="42" pos:column="27">=<pos:position pos:line="42" pos:column="28"/></operator> <call pos:line="42" pos:column="29">(<name pos:line="42" pos:column="30">int32<pos:position pos:line="42" pos:column="35"/></name>)<argument_list pos:line="42" pos:column="36">(<argument><expr><name pos:line="42" pos:column="37">len<pos:position pos:line="42" pos:column="40"/></name> <operator pos:line="42" pos:column="41">-<pos:position pos:line="42" pos:column="42"/></operator> <name pos:line="42" pos:column="43">i<pos:position pos:line="42" pos:column="44"/></name></expr></argument>)<pos:position pos:line="42" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="46"/></expr_stmt>
		<if pos:line="43" pos:column="17">if <condition pos:line="43" pos:column="20">(<expr><name pos:line="43" pos:column="21">remainder<pos:position pos:line="43" pos:column="30"/></name> <operator pos:line="43" pos:column="31">&gt;<pos:position pos:line="43" pos:column="35"/></operator> <literal type="number" pos:line="43" pos:column="33">0<pos:position pos:line="43" pos:column="34"/></literal> <operator pos:line="43" pos:column="35">||<pos:position pos:line="43" pos:column="37"/></operator> <name pos:line="43" pos:column="38">protocol_version<pos:position pos:line="43" pos:column="54"/></name> <operator pos:line="43" pos:column="55">&gt;=<pos:position pos:line="43" pos:column="60"/></operator> <literal type="number" pos:line="43" pos:column="58">27<pos:position pos:line="43" pos:column="60"/></literal></expr>)<pos:position pos:line="43" pos:column="61"/></condition><then pos:line="43" pos:column="61">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="44" pos:column="25">mdfour_update<pos:position pos:line="44" pos:column="38"/></name><argument_list pos:line="44" pos:column="38">(<argument><expr><operator pos:line="44" pos:column="39">&amp;<pos:position pos:line="44" pos:column="44"/></operator><name pos:line="44" pos:column="40">m<pos:position pos:line="44" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="44" pos:column="43">(<pos:position pos:line="44" pos:column="44"/></operator><name pos:line="44" pos:column="44">uchar<pos:position pos:line="44" pos:column="49"/></name> <operator pos:line="44" pos:column="50">*<pos:position pos:line="44" pos:column="51"/></operator><operator pos:line="44" pos:column="51">)<pos:position pos:line="44" pos:column="52"/></operator><call><name pos:line="44" pos:column="52">map_ptr<pos:position pos:line="44" pos:column="59"/></name><argument_list pos:line="44" pos:column="59">(<argument><expr><name pos:line="44" pos:column="60">buf<pos:position pos:line="44" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="65">i<pos:position pos:line="44" pos:column="66"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="68">remainder<pos:position pos:line="44" pos:column="77"/></name></expr></argument>)<pos:position pos:line="44" pos:column="78"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="44" pos:column="80">remainder<pos:position pos:line="44" pos:column="89"/></name></expr></argument>)<pos:position pos:line="44" pos:column="90"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="91"/></expr_stmt></block></then></if>

		<expr_stmt><expr><call><name pos:line="46" pos:column="17">mdfour_result<pos:position pos:line="46" pos:column="30"/></name><argument_list pos:line="46" pos:column="30">(<argument><expr><operator pos:line="46" pos:column="31">&amp;<pos:position pos:line="46" pos:column="36"/></operator><name pos:line="46" pos:column="32">m<pos:position pos:line="46" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="46" pos:column="35">(<pos:position pos:line="46" pos:column="36"/></operator><name pos:line="46" pos:column="36">uchar<pos:position pos:line="46" pos:column="41"/></name> <operator pos:line="46" pos:column="42">*<pos:position pos:line="46" pos:column="43"/></operator><operator pos:line="46" pos:column="43">)<pos:position pos:line="46" pos:column="44"/></operator><name pos:line="46" pos:column="44">sum<pos:position pos:line="46" pos:column="47"/></name></expr></argument>)<pos:position pos:line="46" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="49"/></expr_stmt>
	}<pos:position pos:line="47" pos:column="10"/></block></else></if>

	<expr_stmt><expr><call><name pos:line="49" pos:column="9">close<pos:position pos:line="49" pos:column="14"/></name><argument_list pos:line="49" pos:column="14">(<argument><expr><name pos:line="49" pos:column="15">fd<pos:position pos:line="49" pos:column="17"/></name></expr></argument>)<pos:position pos:line="49" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="19"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="50" pos:column="9">unmap_file<pos:position pos:line="50" pos:column="19"/></name><argument_list pos:line="50" pos:column="19">(<argument><expr><name pos:line="50" pos:column="20">buf<pos:position pos:line="50" pos:column="23"/></name></expr></argument>)<pos:position pos:line="50" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="25"/></expr_stmt>
}<pos:position pos:line="51" pos:column="2"/></block></function></unit>
