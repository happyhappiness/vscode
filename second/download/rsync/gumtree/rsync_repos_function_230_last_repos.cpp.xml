<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_230_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name> <modifier pos:line="1" pos:column="6">*<pos:position pos:line="1" pos:column="7"/></modifier></type><name pos:line="1" pos:column="7">hashtable_find<pos:position pos:line="1" pos:column="21"/></name><parameter_list pos:line="1" pos:column="21">(<parameter><decl><type><name><name pos:line="1" pos:column="22">struct<pos:position pos:line="1" pos:column="28"/></name> <name pos:line="1" pos:column="29">hashtable<pos:position pos:line="1" pos:column="38"/></name></name> <modifier pos:line="1" pos:column="39">*<pos:position pos:line="1" pos:column="40"/></modifier></type><name pos:line="1" pos:column="40">tbl<pos:position pos:line="1" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="45">int64<pos:position pos:line="1" pos:column="50"/></name></type> <name pos:line="1" pos:column="51">key<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="56">int<pos:position pos:line="1" pos:column="59"/></name></type> <name pos:line="1" pos:column="60">allocate_if_missing<pos:position pos:line="1" pos:column="79"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="80"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">key64<pos:position pos:line="3" pos:column="18"/></name> <init pos:line="3" pos:column="19">= <expr><name><name pos:line="3" pos:column="21">tbl<pos:position pos:line="3" pos:column="24"/></name><operator pos:line="3" pos:column="24">-&gt;<pos:position pos:line="3" pos:column="29"/></operator><name pos:line="3" pos:column="26">key64<pos:position pos:line="3" pos:column="31"/></name></name></expr></init></decl>;<pos:position pos:line="3" pos:column="32"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">ht_int32_node<pos:position pos:line="4" pos:column="29"/></name></name> <modifier pos:line="4" pos:column="30">*<pos:position pos:line="4" pos:column="31"/></modifier></type><name pos:line="4" pos:column="31">node<pos:position pos:line="4" pos:column="35"/></name></decl>;<pos:position pos:line="4" pos:column="36"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">uint32<pos:position pos:line="5" pos:column="15"/></name></type> <name pos:line="5" pos:column="16">ndx<pos:position pos:line="5" pos:column="19"/></name></decl>;<pos:position pos:line="5" pos:column="20"/></decl_stmt>

	<if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<expr><ternary><condition><expr><name pos:line="7" pos:column="13">key64<pos:position pos:line="7" pos:column="18"/></name></expr> ?<pos:position pos:line="7" pos:column="20"/></condition><then pos:line="7" pos:column="20"> <expr><name pos:line="7" pos:column="21">key<pos:position pos:line="7" pos:column="24"/></name> <operator pos:line="7" pos:column="25">==<pos:position pos:line="7" pos:column="27"/></operator> <literal type="number" pos:line="7" pos:column="28">0<pos:position pos:line="7" pos:column="29"/></literal></expr> <pos:position pos:line="7" pos:column="30"/></then><else pos:line="7" pos:column="30">: <expr><operator pos:line="7" pos:column="32">(<pos:position pos:line="7" pos:column="33"/></operator><name pos:line="7" pos:column="33">int32<pos:position pos:line="7" pos:column="38"/></name><operator pos:line="7" pos:column="38">)<pos:position pos:line="7" pos:column="39"/></operator><name pos:line="7" pos:column="39">key<pos:position pos:line="7" pos:column="42"/></name> <operator pos:line="7" pos:column="43">==<pos:position pos:line="7" pos:column="45"/></operator> <literal type="number" pos:line="7" pos:column="46">0<pos:position pos:line="7" pos:column="47"/></literal></expr></else></ternary></expr>)<pos:position pos:line="7" pos:column="48"/></condition><then pos:line="7" pos:column="48"> <block pos:line="7" pos:column="49">{
		<expr_stmt><expr><call><name pos:line="8" pos:column="17">rprintf<pos:position pos:line="8" pos:column="24"/></name><argument_list pos:line="8" pos:column="24">(<argument><expr><name pos:line="8" pos:column="25">FERROR<pos:position pos:line="8" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="8" pos:column="33">"Internal hashtable error: illegal key supplied!\n"<pos:position pos:line="8" pos:column="84"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="86"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="9" pos:column="17">exit_cleanup<pos:position pos:line="9" pos:column="29"/></name><argument_list pos:line="9" pos:column="29">(<argument><expr><name pos:line="9" pos:column="30">RERR_MESSAGEIO<pos:position pos:line="9" pos:column="44"/></name></expr></argument>)<pos:position pos:line="9" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="46"/></expr_stmt>
	}<pos:position pos:line="10" pos:column="10"/></block></then></if>

	<if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><name pos:line="12" pos:column="13">allocate_if_missing<pos:position pos:line="12" pos:column="32"/></name> <operator pos:line="12" pos:column="33">&amp;&amp;<pos:position pos:line="12" pos:column="43"/></operator> <name><name pos:line="12" pos:column="36">tbl<pos:position pos:line="12" pos:column="39"/></name><operator pos:line="12" pos:column="39">-&gt;<pos:position pos:line="12" pos:column="44"/></operator><name pos:line="12" pos:column="41">entries<pos:position pos:line="12" pos:column="48"/></name></name> <operator pos:line="12" pos:column="49">&gt;<pos:position pos:line="12" pos:column="53"/></operator> <call><name pos:line="12" pos:column="51">HASH_LOAD_LIMIT<pos:position pos:line="12" pos:column="66"/></name><argument_list pos:line="12" pos:column="66">(<argument><expr><name><name pos:line="12" pos:column="67">tbl<pos:position pos:line="12" pos:column="70"/></name><operator pos:line="12" pos:column="70">-&gt;<pos:position pos:line="12" pos:column="75"/></operator><name pos:line="12" pos:column="72">size<pos:position pos:line="12" pos:column="76"/></name></name></expr></argument>)<pos:position pos:line="12" pos:column="77"/></argument_list></call></expr>)<pos:position pos:line="12" pos:column="78"/></condition><then pos:line="12" pos:column="78"> <block pos:line="12" pos:column="79">{
		<decl_stmt><decl><type><name pos:line="13" pos:column="17">void<pos:position pos:line="13" pos:column="21"/></name> <modifier pos:line="13" pos:column="22">*<pos:position pos:line="13" pos:column="23"/></modifier></type><name pos:line="13" pos:column="23">old_nodes<pos:position pos:line="13" pos:column="32"/></name> <init pos:line="13" pos:column="33">= <expr><name><name pos:line="13" pos:column="35">tbl<pos:position pos:line="13" pos:column="38"/></name><operator pos:line="13" pos:column="38">-&gt;<pos:position pos:line="13" pos:column="43"/></operator><name pos:line="13" pos:column="40">nodes<pos:position pos:line="13" pos:column="45"/></name></name></expr></init></decl>;<pos:position pos:line="13" pos:column="46"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="14" pos:column="17">int<pos:position pos:line="14" pos:column="20"/></name></type> <name pos:line="14" pos:column="21">size<pos:position pos:line="14" pos:column="25"/></name> <init pos:line="14" pos:column="26">= <expr><name><name pos:line="14" pos:column="28">tbl<pos:position pos:line="14" pos:column="31"/></name><operator pos:line="14" pos:column="31">-&gt;<pos:position pos:line="14" pos:column="36"/></operator><name pos:line="14" pos:column="33">size<pos:position pos:line="14" pos:column="37"/></name></name> <operator pos:line="14" pos:column="38">*<pos:position pos:line="14" pos:column="39"/></operator> <literal type="number" pos:line="14" pos:column="40">2<pos:position pos:line="14" pos:column="41"/></literal></expr></init></decl>;<pos:position pos:line="14" pos:column="42"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="15" pos:column="17">int<pos:position pos:line="15" pos:column="20"/></name></type> <name pos:line="15" pos:column="21">i<pos:position pos:line="15" pos:column="22"/></name></decl>;<pos:position pos:line="15" pos:column="23"/></decl_stmt>

		<if pos:line="17" pos:column="17">if <condition pos:line="17" pos:column="20">(<expr><operator pos:line="17" pos:column="21">!<pos:position pos:line="17" pos:column="22"/></operator><operator pos:line="17" pos:column="22">(<pos:position pos:line="17" pos:column="23"/></operator><name><name pos:line="17" pos:column="23">tbl<pos:position pos:line="17" pos:column="26"/></name><operator pos:line="17" pos:column="26">-&gt;<pos:position pos:line="17" pos:column="31"/></operator><name pos:line="17" pos:column="28">nodes<pos:position pos:line="17" pos:column="33"/></name></name> <operator pos:line="17" pos:column="34">=<pos:position pos:line="17" pos:column="35"/></operator> <call><name pos:line="17" pos:column="36">new_array0<pos:position pos:line="17" pos:column="46"/></name><argument_list pos:line="17" pos:column="46">(<argument><expr><name pos:line="17" pos:column="47">char<pos:position pos:line="17" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="53">size<pos:position pos:line="17" pos:column="57"/></name> <operator pos:line="17" pos:column="58">*<pos:position pos:line="17" pos:column="59"/></operator> <name><name pos:line="17" pos:column="60">tbl<pos:position pos:line="17" pos:column="63"/></name><operator pos:line="17" pos:column="63">-&gt;<pos:position pos:line="17" pos:column="68"/></operator><name pos:line="17" pos:column="65">node_size<pos:position pos:line="17" pos:column="74"/></name></name></expr></argument>)<pos:position pos:line="17" pos:column="75"/></argument_list></call><operator pos:line="17" pos:column="75">)<pos:position pos:line="17" pos:column="76"/></operator></expr>)<pos:position pos:line="17" pos:column="77"/></condition><then pos:line="17" pos:column="77">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="18" pos:column="25">out_of_memory<pos:position pos:line="18" pos:column="38"/></name><argument_list pos:line="18" pos:column="38">(<argument><expr><literal type="string" pos:line="18" pos:column="39">"hashtable_node"<pos:position pos:line="18" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="57"/></expr_stmt></block></then></if>
		<expr_stmt><expr><name><name pos:line="19" pos:column="17">tbl<pos:position pos:line="19" pos:column="20"/></name><operator pos:line="19" pos:column="20">-&gt;<pos:position pos:line="19" pos:column="25"/></operator><name pos:line="19" pos:column="22">size<pos:position pos:line="19" pos:column="26"/></name></name> <operator pos:line="19" pos:column="27">=<pos:position pos:line="19" pos:column="28"/></operator> <name pos:line="19" pos:column="29">size<pos:position pos:line="19" pos:column="33"/></name></expr>;<pos:position pos:line="19" pos:column="34"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="20" pos:column="17">tbl<pos:position pos:line="20" pos:column="20"/></name><operator pos:line="20" pos:column="20">-&gt;<pos:position pos:line="20" pos:column="25"/></operator><name pos:line="20" pos:column="22">entries<pos:position pos:line="20" pos:column="29"/></name></name> <operator pos:line="20" pos:column="30">=<pos:position pos:line="20" pos:column="31"/></operator> <literal type="number" pos:line="20" pos:column="32">0<pos:position pos:line="20" pos:column="33"/></literal></expr>;<pos:position pos:line="20" pos:column="34"/></expr_stmt>

		<if pos:line="22" pos:column="17">if <condition pos:line="22" pos:column="20">(<expr><call><name pos:line="22" pos:column="21">DEBUG_GTE<pos:position pos:line="22" pos:column="30"/></name><argument_list pos:line="22" pos:column="30">(<argument><expr><name pos:line="22" pos:column="31">HASH<pos:position pos:line="22" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="22" pos:column="37">1<pos:position pos:line="22" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="22" pos:column="40"/></condition><then pos:line="22" pos:column="40"> <block pos:line="22" pos:column="41">{
			<expr_stmt><expr><call><name pos:line="23" pos:column="25">rprintf<pos:position pos:line="23" pos:column="32"/></name><argument_list pos:line="23" pos:column="32">(<argument><expr><name pos:line="23" pos:column="33">FINFO<pos:position pos:line="23" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="23" pos:column="40">"[%s] growing hashtable %lx (size: %d, keys: %d-bit)\n"<pos:position pos:line="23" pos:column="95"/></literal></expr></argument>,
				<argument><expr><call><name pos:line="24" pos:column="33">who_am_i<pos:position pos:line="24" pos:column="41"/></name><argument_list pos:line="24" pos:column="41">()<pos:position pos:line="24" pos:column="43"/></argument_list></call></expr></argument>, <argument><expr><operator pos:line="24" pos:column="45">(<pos:position pos:line="24" pos:column="46"/></operator><name pos:line="24" pos:column="46">long<pos:position pos:line="24" pos:column="50"/></name><operator pos:line="24" pos:column="50">)<pos:position pos:line="24" pos:column="51"/></operator><name pos:line="24" pos:column="51">tbl<pos:position pos:line="24" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="56">size<pos:position pos:line="24" pos:column="60"/></name></expr></argument>, <argument><expr><ternary><condition><expr><name pos:line="24" pos:column="62">key64<pos:position pos:line="24" pos:column="67"/></name></expr> ?<pos:position pos:line="24" pos:column="69"/></condition><then pos:line="24" pos:column="69"> <expr><literal type="number" pos:line="24" pos:column="70">64<pos:position pos:line="24" pos:column="72"/></literal></expr> <pos:position pos:line="24" pos:column="73"/></then><else pos:line="24" pos:column="73">: <expr><literal type="number" pos:line="24" pos:column="75">32<pos:position pos:line="24" pos:column="77"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="24" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="79"/></expr_stmt>
		}<pos:position pos:line="25" pos:column="18"/></block></then></if>

		<for pos:line="27" pos:column="17">for <control pos:line="27" pos:column="21">(<init><expr><name pos:line="27" pos:column="22">i<pos:position pos:line="27" pos:column="23"/></name> <operator pos:line="27" pos:column="24">=<pos:position pos:line="27" pos:column="25"/></operator> <name pos:line="27" pos:column="26">size<pos:position pos:line="27" pos:column="30"/></name> <operator pos:line="27" pos:column="31">/<pos:position pos:line="27" pos:column="32"/></operator> <literal type="number" pos:line="27" pos:column="33">2<pos:position pos:line="27" pos:column="34"/></literal></expr>;<pos:position pos:line="27" pos:column="35"/></init> <condition><expr><name pos:line="27" pos:column="36">i<pos:position pos:line="27" pos:column="37"/></name><operator pos:line="27" pos:column="37">--<pos:position pos:line="27" pos:column="39"/></operator> <operator pos:line="27" pos:column="40">&gt;<pos:position pos:line="27" pos:column="44"/></operator> <literal type="number" pos:line="27" pos:column="42">0<pos:position pos:line="27" pos:column="43"/></literal></expr>;<pos:position pos:line="27" pos:column="44"/></condition> <incr/>)<pos:position pos:line="27" pos:column="46"/></control> <block pos:line="27" pos:column="47">{
			<decl_stmt><decl><type><name><name pos:line="28" pos:column="25">struct<pos:position pos:line="28" pos:column="31"/></name> <name pos:line="28" pos:column="32">ht_int32_node<pos:position pos:line="28" pos:column="45"/></name></name> <modifier pos:line="28" pos:column="46">*<pos:position pos:line="28" pos:column="47"/></modifier></type><name pos:line="28" pos:column="47">move_node<pos:position pos:line="28" pos:column="56"/></name> <init pos:line="28" pos:column="57">= <expr><call><name pos:line="28" pos:column="59">HT_NODE<pos:position pos:line="28" pos:column="66"/></name><argument_list pos:line="28" pos:column="66">(<argument><expr><name pos:line="28" pos:column="67">tbl<pos:position pos:line="28" pos:column="70"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="72">old_nodes<pos:position pos:line="28" pos:column="81"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="83">i<pos:position pos:line="28" pos:column="84"/></name></expr></argument>)<pos:position pos:line="28" pos:column="85"/></argument_list></call></expr></init></decl>;<pos:position pos:line="28" pos:column="86"/></decl_stmt>
			<decl_stmt><decl><type><name pos:line="29" pos:column="25">int64<pos:position pos:line="29" pos:column="30"/></name></type> <name pos:line="29" pos:column="31">move_key<pos:position pos:line="29" pos:column="39"/></name> <init pos:line="29" pos:column="40">= <expr><call><name pos:line="29" pos:column="42">HT_KEY<pos:position pos:line="29" pos:column="48"/></name><argument_list pos:line="29" pos:column="48">(<argument><expr><name pos:line="29" pos:column="49">move_node<pos:position pos:line="29" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="60">key64<pos:position pos:line="29" pos:column="65"/></name></expr></argument>)<pos:position pos:line="29" pos:column="66"/></argument_list></call></expr></init></decl>;<pos:position pos:line="29" pos:column="67"/></decl_stmt>
			<if pos:line="30" pos:column="25">if <condition pos:line="30" pos:column="28">(<expr><name pos:line="30" pos:column="29">move_key<pos:position pos:line="30" pos:column="37"/></name> <operator pos:line="30" pos:column="38">==<pos:position pos:line="30" pos:column="40"/></operator> <literal type="number" pos:line="30" pos:column="41">0<pos:position pos:line="30" pos:column="42"/></literal></expr>)<pos:position pos:line="30" pos:column="43"/></condition><then pos:line="30" pos:column="43">
				<block type="pseudo"><continue pos:line="31" pos:column="33">continue;<pos:position pos:line="31" pos:column="42"/></continue></block></then></if>
			<expr_stmt><expr><name pos:line="32" pos:column="25">node<pos:position pos:line="32" pos:column="29"/></name> <operator pos:line="32" pos:column="30">=<pos:position pos:line="32" pos:column="31"/></operator> <call><name pos:line="32" pos:column="32">hashtable_find<pos:position pos:line="32" pos:column="46"/></name><argument_list pos:line="32" pos:column="46">(<argument><expr><name pos:line="32" pos:column="47">tbl<pos:position pos:line="32" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="52">move_key<pos:position pos:line="32" pos:column="60"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="32" pos:column="62">1<pos:position pos:line="32" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="65"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="33" pos:column="25">node<pos:position pos:line="33" pos:column="29"/></name><operator pos:line="33" pos:column="29">-&gt;<pos:position pos:line="33" pos:column="34"/></operator><name pos:line="33" pos:column="31">data<pos:position pos:line="33" pos:column="35"/></name></name> <operator pos:line="33" pos:column="36">=<pos:position pos:line="33" pos:column="37"/></operator> <name><name pos:line="33" pos:column="38">move_node<pos:position pos:line="33" pos:column="47"/></name><operator pos:line="33" pos:column="47">-&gt;<pos:position pos:line="33" pos:column="52"/></operator><name pos:line="33" pos:column="49">data<pos:position pos:line="33" pos:column="53"/></name></name></expr>;<pos:position pos:line="33" pos:column="54"/></expr_stmt>
		}<pos:position pos:line="34" pos:column="18"/></block></for>

		<expr_stmt><expr><call><name pos:line="36" pos:column="17">free<pos:position pos:line="36" pos:column="21"/></name><argument_list pos:line="36" pos:column="21">(<argument><expr><name pos:line="36" pos:column="22">old_nodes<pos:position pos:line="36" pos:column="31"/></name></expr></argument>)<pos:position pos:line="36" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="33"/></expr_stmt>
	}<pos:position pos:line="37" pos:column="10"/></block></then></if>

	<if pos:line="39" pos:column="9">if <condition pos:line="39" pos:column="12">(<expr><operator pos:line="39" pos:column="13">!<pos:position pos:line="39" pos:column="14"/></operator><name pos:line="39" pos:column="14">key64<pos:position pos:line="39" pos:column="19"/></name></expr>)<pos:position pos:line="39" pos:column="20"/></condition><then pos:line="39" pos:column="20"> <block pos:line="39" pos:column="21">{
		<comment type="block" pos:line="40" pos:column="17">/* Based on Jenkins One-at-a-time hash. */</comment>
		<decl_stmt><decl><type><name pos:line="41" pos:column="17">uchar<pos:position pos:line="41" pos:column="22"/></name></type> <name><name pos:line="41" pos:column="23">buf<pos:position pos:line="41" pos:column="26"/></name><index pos:line="41" pos:column="26">[<expr><literal type="number" pos:line="41" pos:column="27">4<pos:position pos:line="41" pos:column="28"/></literal></expr>]<pos:position pos:line="41" pos:column="29"/></index></name></decl>, <modifier pos:line="41" pos:column="31">*<pos:position pos:line="41" pos:column="32"/></modifier><decl><type ref="prev"/><name pos:line="41" pos:column="32">keyp<pos:position pos:line="41" pos:column="36"/></name> <init pos:line="41" pos:column="37">= <expr><name pos:line="41" pos:column="39">buf<pos:position pos:line="41" pos:column="42"/></name></expr></init></decl>;<pos:position pos:line="41" pos:column="43"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="42" pos:column="17">int<pos:position pos:line="42" pos:column="20"/></name></type> <name pos:line="42" pos:column="21">i<pos:position pos:line="42" pos:column="22"/></name></decl>;<pos:position pos:line="42" pos:column="23"/></decl_stmt>

		<expr_stmt><expr><call><name pos:line="44" pos:column="17">SIVALu<pos:position pos:line="44" pos:column="23"/></name><argument_list pos:line="44" pos:column="23">(<argument><expr><name pos:line="44" pos:column="24">buf<pos:position pos:line="44" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="44" pos:column="29">0<pos:position pos:line="44" pos:column="30"/></literal></expr></argument>, <argument><expr><name pos:line="44" pos:column="32">key<pos:position pos:line="44" pos:column="35"/></name></expr></argument>)<pos:position pos:line="44" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="37"/></expr_stmt>
		<for pos:line="45" pos:column="17">for <control pos:line="45" pos:column="21">(<init><expr><name pos:line="45" pos:column="22">ndx<pos:position pos:line="45" pos:column="25"/></name> <operator pos:line="45" pos:column="26">=<pos:position pos:line="45" pos:column="27"/></operator> <literal type="number" pos:line="45" pos:column="28">0<pos:position pos:line="45" pos:column="29"/></literal></expr><operator pos:line="45" pos:column="29">,<pos:position pos:line="45" pos:column="30"/></operator> <expr><name pos:line="45" pos:column="31">i<pos:position pos:line="45" pos:column="32"/></name> <operator pos:line="45" pos:column="33">=<pos:position pos:line="45" pos:column="34"/></operator> <literal type="number" pos:line="45" pos:column="35">0<pos:position pos:line="45" pos:column="36"/></literal></expr>;<pos:position pos:line="45" pos:column="37"/></init> <condition><expr><name pos:line="45" pos:column="38">i<pos:position pos:line="45" pos:column="39"/></name> <operator pos:line="45" pos:column="40">&lt;<pos:position pos:line="45" pos:column="44"/></operator> <literal type="number" pos:line="45" pos:column="42">4<pos:position pos:line="45" pos:column="43"/></literal></expr>;<pos:position pos:line="45" pos:column="44"/></condition> <incr><expr><name pos:line="45" pos:column="45">i<pos:position pos:line="45" pos:column="46"/></name><operator pos:line="45" pos:column="46">++<pos:position pos:line="45" pos:column="48"/></operator></expr></incr>)<pos:position pos:line="45" pos:column="49"/></control> <block pos:line="45" pos:column="50">{
			<expr_stmt><expr><name pos:line="46" pos:column="25">ndx<pos:position pos:line="46" pos:column="28"/></name> <operator pos:line="46" pos:column="29">+=<pos:position pos:line="46" pos:column="31"/></operator> <name><name pos:line="46" pos:column="32">keyp<pos:position pos:line="46" pos:column="36"/></name><index pos:line="46" pos:column="36">[<expr><name pos:line="46" pos:column="37">i<pos:position pos:line="46" pos:column="38"/></name></expr>]<pos:position pos:line="46" pos:column="39"/></index></name></expr>;<pos:position pos:line="46" pos:column="40"/></expr_stmt>
			<expr_stmt><expr><name pos:line="47" pos:column="25">ndx<pos:position pos:line="47" pos:column="28"/></name> <operator pos:line="47" pos:column="29">+=<pos:position pos:line="47" pos:column="31"/></operator> <operator pos:line="47" pos:column="32">(<pos:position pos:line="47" pos:column="33"/></operator><name pos:line="47" pos:column="33">ndx<pos:position pos:line="47" pos:column="36"/></name> <operator pos:line="47" pos:column="37">&lt;&lt;<pos:position pos:line="47" pos:column="45"/></operator> <literal type="number" pos:line="47" pos:column="40">10<pos:position pos:line="47" pos:column="42"/></literal><operator pos:line="47" pos:column="42">)<pos:position pos:line="47" pos:column="43"/></operator></expr>;<pos:position pos:line="47" pos:column="44"/></expr_stmt>
			<expr_stmt><expr><name pos:line="48" pos:column="25">ndx<pos:position pos:line="48" pos:column="28"/></name> <operator pos:line="48" pos:column="29">^=<pos:position pos:line="48" pos:column="31"/></operator> <operator pos:line="48" pos:column="32">(<pos:position pos:line="48" pos:column="33"/></operator><name pos:line="48" pos:column="33">ndx<pos:position pos:line="48" pos:column="36"/></name> <operator pos:line="48" pos:column="37">&gt;&gt;<pos:position pos:line="48" pos:column="42"/></operator> <literal type="number" pos:line="48" pos:column="40">6<pos:position pos:line="48" pos:column="41"/></literal><operator pos:line="48" pos:column="41">)<pos:position pos:line="48" pos:column="42"/></operator></expr>;<pos:position pos:line="48" pos:column="43"/></expr_stmt>
		}<pos:position pos:line="49" pos:column="18"/></block></for>
		<expr_stmt><expr><name pos:line="50" pos:column="17">ndx<pos:position pos:line="50" pos:column="20"/></name> <operator pos:line="50" pos:column="21">+=<pos:position pos:line="50" pos:column="23"/></operator> <operator pos:line="50" pos:column="24">(<pos:position pos:line="50" pos:column="25"/></operator><name pos:line="50" pos:column="25">ndx<pos:position pos:line="50" pos:column="28"/></name> <operator pos:line="50" pos:column="29">&lt;&lt;<pos:position pos:line="50" pos:column="37"/></operator> <literal type="number" pos:line="50" pos:column="32">3<pos:position pos:line="50" pos:column="33"/></literal><operator pos:line="50" pos:column="33">)<pos:position pos:line="50" pos:column="34"/></operator></expr>;<pos:position pos:line="50" pos:column="35"/></expr_stmt>
		<expr_stmt><expr><name pos:line="51" pos:column="17">ndx<pos:position pos:line="51" pos:column="20"/></name> <operator pos:line="51" pos:column="21">^=<pos:position pos:line="51" pos:column="23"/></operator> <operator pos:line="51" pos:column="24">(<pos:position pos:line="51" pos:column="25"/></operator><name pos:line="51" pos:column="25">ndx<pos:position pos:line="51" pos:column="28"/></name> <operator pos:line="51" pos:column="29">&gt;&gt;<pos:position pos:line="51" pos:column="34"/></operator> <literal type="number" pos:line="51" pos:column="32">11<pos:position pos:line="51" pos:column="34"/></literal><operator pos:line="51" pos:column="34">)<pos:position pos:line="51" pos:column="35"/></operator></expr>;<pos:position pos:line="51" pos:column="36"/></expr_stmt>
		<expr_stmt><expr><name pos:line="52" pos:column="17">ndx<pos:position pos:line="52" pos:column="20"/></name> <operator pos:line="52" pos:column="21">+=<pos:position pos:line="52" pos:column="23"/></operator> <operator pos:line="52" pos:column="24">(<pos:position pos:line="52" pos:column="25"/></operator><name pos:line="52" pos:column="25">ndx<pos:position pos:line="52" pos:column="28"/></name> <operator pos:line="52" pos:column="29">&lt;&lt;<pos:position pos:line="52" pos:column="37"/></operator> <literal type="number" pos:line="52" pos:column="32">15<pos:position pos:line="52" pos:column="34"/></literal><operator pos:line="52" pos:column="34">)<pos:position pos:line="52" pos:column="35"/></operator></expr>;<pos:position pos:line="52" pos:column="36"/></expr_stmt>
	}<pos:position pos:line="53" pos:column="10"/></block></then> <else pos:line="53" pos:column="11">else <block pos:line="53" pos:column="16">{
		<comment type="block" pos:line="54" pos:column="17">/* Based on Jenkins hashword() from lookup3.c. */</comment>
		<decl_stmt><decl><type><name pos:line="55" pos:column="17">uint32<pos:position pos:line="55" pos:column="23"/></name></type> <name pos:line="55" pos:column="24">a<pos:position pos:line="55" pos:column="25"/></name></decl>, <decl><type ref="prev"/><name pos:line="55" pos:column="27">b<pos:position pos:line="55" pos:column="28"/></name></decl>, <decl><type ref="prev"/><name pos:line="55" pos:column="30">c<pos:position pos:line="55" pos:column="31"/></name></decl>;<pos:position pos:line="55" pos:column="32"/></decl_stmt>

		<comment type="block" pos:line="57" pos:column="17">/* Set up the internal state */</comment>
		<expr_stmt><expr><name pos:line="58" pos:column="17">a<pos:position pos:line="58" pos:column="18"/></name> <operator pos:line="58" pos:column="19">=<pos:position pos:line="58" pos:column="20"/></operator> <name pos:line="58" pos:column="21">b<pos:position pos:line="58" pos:column="22"/></name> <operator pos:line="58" pos:column="23">=<pos:position pos:line="58" pos:column="24"/></operator> <name pos:line="58" pos:column="25">c<pos:position pos:line="58" pos:column="26"/></name> <operator pos:line="58" pos:column="27">=<pos:position pos:line="58" pos:column="28"/></operator> <literal type="number" pos:line="58" pos:column="29">0xdeadbeef<pos:position pos:line="58" pos:column="39"/></literal> <operator pos:line="58" pos:column="40">+<pos:position pos:line="58" pos:column="41"/></operator> <operator pos:line="58" pos:column="42">(<pos:position pos:line="58" pos:column="43"/></operator><literal type="number" pos:line="58" pos:column="43">8<pos:position pos:line="58" pos:column="44"/></literal> <operator pos:line="58" pos:column="45">&lt;&lt;<pos:position pos:line="58" pos:column="53"/></operator> <literal type="number" pos:line="58" pos:column="48">2<pos:position pos:line="58" pos:column="49"/></literal><operator pos:line="58" pos:column="49">)<pos:position pos:line="58" pos:column="50"/></operator></expr>;<pos:position pos:line="58" pos:column="51"/></expr_stmt>

<cpp:define pos:line="60" pos:column="1">#<cpp:directive pos:line="60" pos:column="2">define<pos:position pos:line="60" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="60" pos:column="9">rot<pos:position pos:line="60" pos:column="12"/></name><parameter_list pos:line="60" pos:column="12">(<parameter><type><name pos:line="60" pos:column="13">x<pos:position pos:line="60" pos:column="14"/></name></type></parameter>,<parameter><type><name pos:line="60" pos:column="15">k<pos:position pos:line="60" pos:column="16"/></name></type></parameter>)<pos:position pos:line="60" pos:column="17"/></parameter_list></cpp:macro> <cpp:value pos:line="60" pos:column="18">(((x)&lt;&lt;(k)) ^ ((x)&gt;&gt;(32-(k))))<pos:position pos:line="60" pos:column="48"/></cpp:value></cpp:define>
<cpp:if pos:line="61" pos:column="1">#<cpp:directive pos:line="61" pos:column="2">if<pos:position pos:line="61" pos:column="4"/></cpp:directive> <expr><name pos:line="61" pos:column="5">SIZEOF_INT64<pos:position pos:line="61" pos:column="17"/></name> <operator pos:line="61" pos:column="18">&gt;=<pos:position pos:line="61" pos:column="23"/></operator> <literal type="number" pos:line="61" pos:column="21">8<pos:position pos:line="61" pos:column="22"/></literal></expr></cpp:if>
		<expr_stmt><expr><name pos:line="62" pos:column="17">b<pos:position pos:line="62" pos:column="18"/></name> <operator pos:line="62" pos:column="19">+=<pos:position pos:line="62" pos:column="21"/></operator> <call pos:line="62" pos:column="22">(<name pos:line="62" pos:column="23">uint32<pos:position pos:line="62" pos:column="29"/></name>)<argument_list pos:line="62" pos:column="30">(<argument><expr><name pos:line="62" pos:column="31">key<pos:position pos:line="62" pos:column="34"/></name> <operator pos:line="62" pos:column="35">&gt;&gt;<pos:position pos:line="62" pos:column="40"/></operator> <literal type="number" pos:line="62" pos:column="38">32<pos:position pos:line="62" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="62" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="42"/></expr_stmt>
<cpp:endif pos:line="63" pos:column="1">#<cpp:directive pos:line="63" pos:column="2">endif<pos:position pos:line="63" pos:column="7"/></cpp:directive></cpp:endif>
		<expr_stmt><expr><name pos:line="64" pos:column="17">a<pos:position pos:line="64" pos:column="18"/></name> <operator pos:line="64" pos:column="19">+=<pos:position pos:line="64" pos:column="21"/></operator> <operator pos:line="64" pos:column="22">(<pos:position pos:line="64" pos:column="23"/></operator><name pos:line="64" pos:column="23">uint32<pos:position pos:line="64" pos:column="29"/></name><operator pos:line="64" pos:column="29">)<pos:position pos:line="64" pos:column="30"/></operator><name pos:line="64" pos:column="30">key<pos:position pos:line="64" pos:column="33"/></name></expr>;<pos:position pos:line="64" pos:column="34"/></expr_stmt>
		<expr_stmt><expr><name pos:line="65" pos:column="17">c<pos:position pos:line="65" pos:column="18"/></name> <operator pos:line="65" pos:column="19">^=<pos:position pos:line="65" pos:column="21"/></operator> <name pos:line="65" pos:column="22">b<pos:position pos:line="65" pos:column="23"/></name></expr>;<pos:position pos:line="65" pos:column="24"/></expr_stmt> <expr_stmt><expr><name pos:line="65" pos:column="25">c<pos:position pos:line="65" pos:column="26"/></name> <operator pos:line="65" pos:column="27">-=<pos:position pos:line="65" pos:column="29"/></operator> <call><name pos:line="65" pos:column="30">rot<pos:position pos:line="65" pos:column="33"/></name><argument_list pos:line="65" pos:column="33">(<argument><expr><name pos:line="65" pos:column="34">b<pos:position pos:line="65" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="65" pos:column="37">14<pos:position pos:line="65" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="65" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="41"/></expr_stmt>
		<expr_stmt><expr><name pos:line="66" pos:column="17">a<pos:position pos:line="66" pos:column="18"/></name> <operator pos:line="66" pos:column="19">^=<pos:position pos:line="66" pos:column="21"/></operator> <name pos:line="66" pos:column="22">c<pos:position pos:line="66" pos:column="23"/></name></expr>;<pos:position pos:line="66" pos:column="24"/></expr_stmt> <expr_stmt><expr><name pos:line="66" pos:column="25">a<pos:position pos:line="66" pos:column="26"/></name> <operator pos:line="66" pos:column="27">-=<pos:position pos:line="66" pos:column="29"/></operator> <call><name pos:line="66" pos:column="30">rot<pos:position pos:line="66" pos:column="33"/></name><argument_list pos:line="66" pos:column="33">(<argument><expr><name pos:line="66" pos:column="34">c<pos:position pos:line="66" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="66" pos:column="37">11<pos:position pos:line="66" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="66" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="41"/></expr_stmt>
		<expr_stmt><expr><name pos:line="67" pos:column="17">b<pos:position pos:line="67" pos:column="18"/></name> <operator pos:line="67" pos:column="19">^=<pos:position pos:line="67" pos:column="21"/></operator> <name pos:line="67" pos:column="22">a<pos:position pos:line="67" pos:column="23"/></name></expr>;<pos:position pos:line="67" pos:column="24"/></expr_stmt> <expr_stmt><expr><name pos:line="67" pos:column="25">b<pos:position pos:line="67" pos:column="26"/></name> <operator pos:line="67" pos:column="27">-=<pos:position pos:line="67" pos:column="29"/></operator> <call><name pos:line="67" pos:column="30">rot<pos:position pos:line="67" pos:column="33"/></name><argument_list pos:line="67" pos:column="33">(<argument><expr><name pos:line="67" pos:column="34">a<pos:position pos:line="67" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="67" pos:column="37">25<pos:position pos:line="67" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="67" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="41"/></expr_stmt>
		<expr_stmt><expr><name pos:line="68" pos:column="17">c<pos:position pos:line="68" pos:column="18"/></name> <operator pos:line="68" pos:column="19">^=<pos:position pos:line="68" pos:column="21"/></operator> <name pos:line="68" pos:column="22">b<pos:position pos:line="68" pos:column="23"/></name></expr>;<pos:position pos:line="68" pos:column="24"/></expr_stmt> <expr_stmt><expr><name pos:line="68" pos:column="25">c<pos:position pos:line="68" pos:column="26"/></name> <operator pos:line="68" pos:column="27">-=<pos:position pos:line="68" pos:column="29"/></operator> <call><name pos:line="68" pos:column="30">rot<pos:position pos:line="68" pos:column="33"/></name><argument_list pos:line="68" pos:column="33">(<argument><expr><name pos:line="68" pos:column="34">b<pos:position pos:line="68" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="68" pos:column="37">16<pos:position pos:line="68" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="68" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="41"/></expr_stmt>
		<expr_stmt><expr><name pos:line="69" pos:column="17">a<pos:position pos:line="69" pos:column="18"/></name> <operator pos:line="69" pos:column="19">^=<pos:position pos:line="69" pos:column="21"/></operator> <name pos:line="69" pos:column="22">c<pos:position pos:line="69" pos:column="23"/></name></expr>;<pos:position pos:line="69" pos:column="24"/></expr_stmt> <expr_stmt><expr><name pos:line="69" pos:column="25">a<pos:position pos:line="69" pos:column="26"/></name> <operator pos:line="69" pos:column="27">-=<pos:position pos:line="69" pos:column="29"/></operator> <call><name pos:line="69" pos:column="30">rot<pos:position pos:line="69" pos:column="33"/></name><argument_list pos:line="69" pos:column="33">(<argument><expr><name pos:line="69" pos:column="34">c<pos:position pos:line="69" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="69" pos:column="37">4<pos:position pos:line="69" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="69" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="40"/></expr_stmt>
		<expr_stmt><expr><name pos:line="70" pos:column="17">b<pos:position pos:line="70" pos:column="18"/></name> <operator pos:line="70" pos:column="19">^=<pos:position pos:line="70" pos:column="21"/></operator> <name pos:line="70" pos:column="22">a<pos:position pos:line="70" pos:column="23"/></name></expr>;<pos:position pos:line="70" pos:column="24"/></expr_stmt> <expr_stmt><expr><name pos:line="70" pos:column="25">b<pos:position pos:line="70" pos:column="26"/></name> <operator pos:line="70" pos:column="27">-=<pos:position pos:line="70" pos:column="29"/></operator> <call><name pos:line="70" pos:column="30">rot<pos:position pos:line="70" pos:column="33"/></name><argument_list pos:line="70" pos:column="33">(<argument><expr><name pos:line="70" pos:column="34">a<pos:position pos:line="70" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="70" pos:column="37">14<pos:position pos:line="70" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="70" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="41"/></expr_stmt>
		<expr_stmt><expr><name pos:line="71" pos:column="17">c<pos:position pos:line="71" pos:column="18"/></name> <operator pos:line="71" pos:column="19">^=<pos:position pos:line="71" pos:column="21"/></operator> <name pos:line="71" pos:column="22">b<pos:position pos:line="71" pos:column="23"/></name></expr>;<pos:position pos:line="71" pos:column="24"/></expr_stmt> <expr_stmt><expr><name pos:line="71" pos:column="25">c<pos:position pos:line="71" pos:column="26"/></name> <operator pos:line="71" pos:column="27">-=<pos:position pos:line="71" pos:column="29"/></operator> <call><name pos:line="71" pos:column="30">rot<pos:position pos:line="71" pos:column="33"/></name><argument_list pos:line="71" pos:column="33">(<argument><expr><name pos:line="71" pos:column="34">b<pos:position pos:line="71" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="71" pos:column="37">24<pos:position pos:line="71" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="71" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="41"/></expr_stmt>
<cpp:undef pos:line="72" pos:column="1">#<cpp:directive pos:line="72" pos:column="2">undef<pos:position pos:line="72" pos:column="7"/></cpp:directive> <name pos:line="72" pos:column="8">rot<pos:position pos:line="72" pos:column="11"/></name></cpp:undef>
		<expr_stmt><expr><name pos:line="73" pos:column="17">ndx<pos:position pos:line="73" pos:column="20"/></name> <operator pos:line="73" pos:column="21">=<pos:position pos:line="73" pos:column="22"/></operator> <name pos:line="73" pos:column="23">c<pos:position pos:line="73" pos:column="24"/></name></expr>;<pos:position pos:line="73" pos:column="25"/></expr_stmt>
	}<pos:position pos:line="74" pos:column="10"/></block></else></if>

	<comment type="block" pos:line="76" pos:column="9">/* If it already exists, return the node.  If we're not
	 * allocating, return NULL if the key is not found. */</comment>
	<while pos:line="78" pos:column="9">while <condition pos:line="78" pos:column="15">(<expr><literal type="number" pos:line="78" pos:column="16">1<pos:position pos:line="78" pos:column="17"/></literal></expr>)<pos:position pos:line="78" pos:column="18"/></condition> <block pos:line="78" pos:column="19">{
		<decl_stmt><decl><type><name pos:line="79" pos:column="17">int64<pos:position pos:line="79" pos:column="22"/></name></type> <name pos:line="79" pos:column="23">nkey<pos:position pos:line="79" pos:column="27"/></name></decl>;<pos:position pos:line="79" pos:column="28"/></decl_stmt>

		<expr_stmt><expr><name pos:line="81" pos:column="17">ndx<pos:position pos:line="81" pos:column="20"/></name> <operator pos:line="81" pos:column="21">&amp;=<pos:position pos:line="81" pos:column="27"/></operator> <name><name pos:line="81" pos:column="24">tbl<pos:position pos:line="81" pos:column="27"/></name><operator pos:line="81" pos:column="27">-&gt;<pos:position pos:line="81" pos:column="32"/></operator><name pos:line="81" pos:column="29">size<pos:position pos:line="81" pos:column="33"/></name></name> <operator pos:line="81" pos:column="34">-<pos:position pos:line="81" pos:column="35"/></operator> <literal type="number" pos:line="81" pos:column="36">1<pos:position pos:line="81" pos:column="37"/></literal></expr>;<pos:position pos:line="81" pos:column="38"/></expr_stmt>
		<expr_stmt><expr><name pos:line="82" pos:column="17">node<pos:position pos:line="82" pos:column="21"/></name> <operator pos:line="82" pos:column="22">=<pos:position pos:line="82" pos:column="23"/></operator> <call><name pos:line="82" pos:column="24">HT_NODE<pos:position pos:line="82" pos:column="31"/></name><argument_list pos:line="82" pos:column="31">(<argument><expr><name pos:line="82" pos:column="32">tbl<pos:position pos:line="82" pos:column="35"/></name></expr></argument>, <argument><expr><name><name pos:line="82" pos:column="37">tbl<pos:position pos:line="82" pos:column="40"/></name><operator pos:line="82" pos:column="40">-&gt;<pos:position pos:line="82" pos:column="45"/></operator><name pos:line="82" pos:column="42">nodes<pos:position pos:line="82" pos:column="47"/></name></name></expr></argument>, <argument><expr><name pos:line="82" pos:column="49">ndx<pos:position pos:line="82" pos:column="52"/></name></expr></argument>)<pos:position pos:line="82" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="54"/></expr_stmt>
		<expr_stmt><expr><name pos:line="83" pos:column="17">nkey<pos:position pos:line="83" pos:column="21"/></name> <operator pos:line="83" pos:column="22">=<pos:position pos:line="83" pos:column="23"/></operator> <call><name pos:line="83" pos:column="24">HT_KEY<pos:position pos:line="83" pos:column="30"/></name><argument_list pos:line="83" pos:column="30">(<argument><expr><name pos:line="83" pos:column="31">node<pos:position pos:line="83" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="83" pos:column="37">key64<pos:position pos:line="83" pos:column="42"/></name></expr></argument>)<pos:position pos:line="83" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="44"/></expr_stmt>

		<if pos:line="85" pos:column="17">if <condition pos:line="85" pos:column="20">(<expr><name pos:line="85" pos:column="21">nkey<pos:position pos:line="85" pos:column="25"/></name> <operator pos:line="85" pos:column="26">==<pos:position pos:line="85" pos:column="28"/></operator> <name pos:line="85" pos:column="29">key<pos:position pos:line="85" pos:column="32"/></name></expr>)<pos:position pos:line="85" pos:column="33"/></condition><then pos:line="85" pos:column="33">
			<block type="pseudo"><return pos:line="86" pos:column="25">return <expr><name pos:line="86" pos:column="32">node<pos:position pos:line="86" pos:column="36"/></name></expr>;<pos:position pos:line="86" pos:column="37"/></return></block></then></if>
		<if pos:line="87" pos:column="17">if <condition pos:line="87" pos:column="20">(<expr><name pos:line="87" pos:column="21">nkey<pos:position pos:line="87" pos:column="25"/></name> <operator pos:line="87" pos:column="26">==<pos:position pos:line="87" pos:column="28"/></operator> <literal type="number" pos:line="87" pos:column="29">0<pos:position pos:line="87" pos:column="30"/></literal></expr>)<pos:position pos:line="87" pos:column="31"/></condition><then pos:line="87" pos:column="31"> <block pos:line="87" pos:column="32">{
			<if pos:line="88" pos:column="25">if <condition pos:line="88" pos:column="28">(<expr><operator pos:line="88" pos:column="29">!<pos:position pos:line="88" pos:column="30"/></operator><name pos:line="88" pos:column="30">allocate_if_missing<pos:position pos:line="88" pos:column="49"/></name></expr>)<pos:position pos:line="88" pos:column="50"/></condition><then pos:line="88" pos:column="50">
				<block type="pseudo"><return pos:line="89" pos:column="33">return <expr><name pos:line="89" pos:column="40">NULL<pos:position pos:line="89" pos:column="44"/></name></expr>;<pos:position pos:line="89" pos:column="45"/></return></block></then></if>
			<break pos:line="90" pos:column="25">break;<pos:position pos:line="90" pos:column="31"/></break>
		}<pos:position pos:line="91" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name pos:line="92" pos:column="17">ndx<pos:position pos:line="92" pos:column="20"/></name><operator pos:line="92" pos:column="20">++<pos:position pos:line="92" pos:column="22"/></operator></expr>;<pos:position pos:line="92" pos:column="23"/></expr_stmt>
	}<pos:position pos:line="93" pos:column="10"/></block></while>

	<comment type="block" pos:line="95" pos:column="9">/* Take over this empty spot and then return the node. */</comment>
	<if pos:line="96" pos:column="9">if <condition pos:line="96" pos:column="12">(<expr><name pos:line="96" pos:column="13">key64<pos:position pos:line="96" pos:column="18"/></name></expr>)<pos:position pos:line="96" pos:column="19"/></condition><then pos:line="96" pos:column="19">
		<block type="pseudo"><expr_stmt><expr><operator pos:line="97" pos:column="17">(<pos:position pos:line="97" pos:column="18"/></operator><operator pos:line="97" pos:column="18">(<pos:position pos:line="97" pos:column="19"/></operator>struct <name pos:line="97" pos:column="26">ht_int64_node<pos:position pos:line="97" pos:column="39"/></name><operator pos:line="97" pos:column="39">*<pos:position pos:line="97" pos:column="40"/></operator><operator pos:line="97" pos:column="40">)<pos:position pos:line="97" pos:column="41"/></operator><name pos:line="97" pos:column="41">node<pos:position pos:line="97" pos:column="45"/></name><operator pos:line="97" pos:column="45">)<pos:position pos:line="97" pos:column="46"/></operator><operator pos:line="97" pos:column="46">-&gt;<pos:position pos:line="97" pos:column="51"/></operator><name pos:line="97" pos:column="48">key<pos:position pos:line="97" pos:column="51"/></name> <operator pos:line="97" pos:column="52">=<pos:position pos:line="97" pos:column="53"/></operator> <name pos:line="97" pos:column="54">key<pos:position pos:line="97" pos:column="57"/></name></expr>;<pos:position pos:line="97" pos:column="58"/></expr_stmt></block></then>
	<else pos:line="98" pos:column="9">else
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="99" pos:column="17">node<pos:position pos:line="99" pos:column="21"/></name><operator pos:line="99" pos:column="21">-&gt;<pos:position pos:line="99" pos:column="26"/></operator><name pos:line="99" pos:column="23">key<pos:position pos:line="99" pos:column="26"/></name></name> <operator pos:line="99" pos:column="27">=<pos:position pos:line="99" pos:column="28"/></operator> <operator pos:line="99" pos:column="29">(<pos:position pos:line="99" pos:column="30"/></operator><name pos:line="99" pos:column="30">int32<pos:position pos:line="99" pos:column="35"/></name><operator pos:line="99" pos:column="35">)<pos:position pos:line="99" pos:column="36"/></operator><name pos:line="99" pos:column="36">key<pos:position pos:line="99" pos:column="39"/></name></expr>;<pos:position pos:line="99" pos:column="40"/></expr_stmt></block></else></if>
	<expr_stmt><expr><name><name pos:line="100" pos:column="9">tbl<pos:position pos:line="100" pos:column="12"/></name><operator pos:line="100" pos:column="12">-&gt;<pos:position pos:line="100" pos:column="17"/></operator><name pos:line="100" pos:column="14">entries<pos:position pos:line="100" pos:column="21"/></name></name><operator pos:line="100" pos:column="21">++<pos:position pos:line="100" pos:column="23"/></operator></expr>;<pos:position pos:line="100" pos:column="24"/></expr_stmt>
	<return pos:line="101" pos:column="9">return <expr><name pos:line="101" pos:column="16">node<pos:position pos:line="101" pos:column="20"/></name></expr>;<pos:position pos:line="101" pos:column="21"/></return>
}<pos:position pos:line="102" pos:column="2"/></block></function></unit>
