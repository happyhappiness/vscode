<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_86_rsync-2.6.6.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">read_timeout<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name pos:line="1" pos:column="25">int<pos:position pos:line="1" pos:column="28"/></name></type> <name pos:line="1" pos:column="29">fd<pos:position pos:line="1" pos:column="31"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="33">char<pos:position pos:line="1" pos:column="37"/></name> <modifier pos:line="1" pos:column="38">*<pos:position pos:line="1" pos:column="39"/></modifier></type><name pos:line="1" pos:column="39">buf<pos:position pos:line="1" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="44">size_t<pos:position pos:line="1" pos:column="50"/></name></type> <name pos:line="1" pos:column="51">len<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="55"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">n<pos:position pos:line="3" pos:column="14"/></name></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="16">ret<pos:position pos:line="3" pos:column="19"/></name> <init pos:line="3" pos:column="20">= <expr><literal type="number" pos:line="3" pos:column="22">0<pos:position pos:line="3" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="24"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="5" pos:column="9">io_flush<pos:position pos:line="5" pos:column="17"/></name><argument_list pos:line="5" pos:column="17">(<argument><expr><name pos:line="5" pos:column="18">NORMAL_FLUSH<pos:position pos:line="5" pos:column="30"/></name></expr></argument>)<pos:position pos:line="5" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="32"/></expr_stmt>

	<while pos:line="7" pos:column="9">while <condition pos:line="7" pos:column="15">(<expr><name pos:line="7" pos:column="16">ret<pos:position pos:line="7" pos:column="19"/></name> <operator pos:line="7" pos:column="20">==<pos:position pos:line="7" pos:column="22"/></operator> <literal type="number" pos:line="7" pos:column="23">0<pos:position pos:line="7" pos:column="24"/></literal></expr>)<pos:position pos:line="7" pos:column="25"/></condition> <block pos:line="7" pos:column="26">{
		<comment type="block" pos:line="8" pos:column="17">/* until we manage to read *something* */</comment>
		<decl_stmt><decl><type><name pos:line="9" pos:column="17">fd_set<pos:position pos:line="9" pos:column="23"/></name></type> <name pos:line="9" pos:column="24">r_fds<pos:position pos:line="9" pos:column="29"/></name></decl>, <decl><type ref="prev"/><name pos:line="9" pos:column="31">w_fds<pos:position pos:line="9" pos:column="36"/></name></decl>;<pos:position pos:line="9" pos:column="37"/></decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="10" pos:column="17">struct<pos:position pos:line="10" pos:column="23"/></name> <name pos:line="10" pos:column="24">timeval<pos:position pos:line="10" pos:column="31"/></name></name></type> <name pos:line="10" pos:column="32">tv<pos:position pos:line="10" pos:column="34"/></name></decl>;<pos:position pos:line="10" pos:column="35"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="11" pos:column="17">int<pos:position pos:line="11" pos:column="20"/></name></type> <name pos:line="11" pos:column="21">maxfd<pos:position pos:line="11" pos:column="26"/></name> <init pos:line="11" pos:column="27">= <expr><name pos:line="11" pos:column="29">fd<pos:position pos:line="11" pos:column="31"/></name></expr></init></decl>;<pos:position pos:line="11" pos:column="32"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="12" pos:column="17">int<pos:position pos:line="12" pos:column="20"/></name></type> <name pos:line="12" pos:column="21">count<pos:position pos:line="12" pos:column="26"/></name></decl>;<pos:position pos:line="12" pos:column="27"/></decl_stmt>

		<expr_stmt><expr><call><name pos:line="14" pos:column="17">FD_ZERO<pos:position pos:line="14" pos:column="24"/></name><argument_list pos:line="14" pos:column="24">(<argument><expr><operator pos:line="14" pos:column="25">&amp;<pos:position pos:line="14" pos:column="30"/></operator><name pos:line="14" pos:column="26">r_fds<pos:position pos:line="14" pos:column="31"/></name></expr></argument>)<pos:position pos:line="14" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="33"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="15" pos:column="17">FD_ZERO<pos:position pos:line="15" pos:column="24"/></name><argument_list pos:line="15" pos:column="24">(<argument><expr><operator pos:line="15" pos:column="25">&amp;<pos:position pos:line="15" pos:column="30"/></operator><name pos:line="15" pos:column="26">w_fds<pos:position pos:line="15" pos:column="31"/></name></expr></argument>)<pos:position pos:line="15" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="33"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="16" pos:column="17">FD_SET<pos:position pos:line="16" pos:column="23"/></name><argument_list pos:line="16" pos:column="23">(<argument><expr><name pos:line="16" pos:column="24">fd<pos:position pos:line="16" pos:column="26"/></name></expr></argument>, <argument><expr><operator pos:line="16" pos:column="28">&amp;<pos:position pos:line="16" pos:column="33"/></operator><name pos:line="16" pos:column="29">r_fds<pos:position pos:line="16" pos:column="34"/></name></expr></argument>)<pos:position pos:line="16" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="36"/></expr_stmt>
		<if pos:line="17" pos:column="17">if <condition pos:line="17" pos:column="20">(<expr><name pos:line="17" pos:column="21">msg_list_head<pos:position pos:line="17" pos:column="34"/></name></expr>)<pos:position pos:line="17" pos:column="35"/></condition><then pos:line="17" pos:column="35"> <block pos:line="17" pos:column="36">{
			<expr_stmt><expr><call><name pos:line="18" pos:column="25">FD_SET<pos:position pos:line="18" pos:column="31"/></name><argument_list pos:line="18" pos:column="31">(<argument><expr><name pos:line="18" pos:column="32">msg_fd_out<pos:position pos:line="18" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="18" pos:column="44">&amp;<pos:position pos:line="18" pos:column="49"/></operator><name pos:line="18" pos:column="45">w_fds<pos:position pos:line="18" pos:column="50"/></name></expr></argument>)<pos:position pos:line="18" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="52"/></expr_stmt>
			<if pos:line="19" pos:column="25">if <condition pos:line="19" pos:column="28">(<expr><name pos:line="19" pos:column="29">msg_fd_out<pos:position pos:line="19" pos:column="39"/></name> <operator pos:line="19" pos:column="40">&gt;<pos:position pos:line="19" pos:column="44"/></operator> <name pos:line="19" pos:column="42">maxfd<pos:position pos:line="19" pos:column="47"/></name></expr>)<pos:position pos:line="19" pos:column="48"/></condition><then pos:line="19" pos:column="48">
				<block type="pseudo"><expr_stmt><expr><name pos:line="20" pos:column="33">maxfd<pos:position pos:line="20" pos:column="38"/></name> <operator pos:line="20" pos:column="39">=<pos:position pos:line="20" pos:column="40"/></operator> <name pos:line="20" pos:column="41">msg_fd_out<pos:position pos:line="20" pos:column="51"/></name></expr>;<pos:position pos:line="20" pos:column="52"/></expr_stmt></block></then></if>
		}<pos:position pos:line="21" pos:column="18"/></block></then></if>
		<if pos:line="22" pos:column="17">if <condition pos:line="22" pos:column="20">(<expr><name pos:line="22" pos:column="21">io_filesfrom_f_out<pos:position pos:line="22" pos:column="39"/></name> <operator pos:line="22" pos:column="40">&gt;=<pos:position pos:line="22" pos:column="45"/></operator> <literal type="number" pos:line="22" pos:column="43">0<pos:position pos:line="22" pos:column="44"/></literal></expr>)<pos:position pos:line="22" pos:column="45"/></condition><then pos:line="22" pos:column="45"> <block pos:line="22" pos:column="46">{
			<decl_stmt><decl><type><name pos:line="23" pos:column="25">int<pos:position pos:line="23" pos:column="28"/></name></type> <name pos:line="23" pos:column="29">new_fd<pos:position pos:line="23" pos:column="35"/></name></decl>;<pos:position pos:line="23" pos:column="36"/></decl_stmt>
			<if pos:line="24" pos:column="25">if <condition pos:line="24" pos:column="28">(<expr><name pos:line="24" pos:column="29">io_filesfrom_buflen<pos:position pos:line="24" pos:column="48"/></name> <operator pos:line="24" pos:column="49">==<pos:position pos:line="24" pos:column="51"/></operator> <literal type="number" pos:line="24" pos:column="52">0<pos:position pos:line="24" pos:column="53"/></literal></expr>)<pos:position pos:line="24" pos:column="54"/></condition><then pos:line="24" pos:column="54"> <block pos:line="24" pos:column="55">{
				<if pos:line="25" pos:column="33">if <condition pos:line="25" pos:column="36">(<expr><name pos:line="25" pos:column="37">io_filesfrom_f_in<pos:position pos:line="25" pos:column="54"/></name> <operator pos:line="25" pos:column="55">&gt;=<pos:position pos:line="25" pos:column="60"/></operator> <literal type="number" pos:line="25" pos:column="58">0<pos:position pos:line="25" pos:column="59"/></literal></expr>)<pos:position pos:line="25" pos:column="60"/></condition><then pos:line="25" pos:column="60"> <block pos:line="25" pos:column="61">{
					<expr_stmt><expr><call><name pos:line="26" pos:column="41">FD_SET<pos:position pos:line="26" pos:column="47"/></name><argument_list pos:line="26" pos:column="47">(<argument><expr><name pos:line="26" pos:column="48">io_filesfrom_f_in<pos:position pos:line="26" pos:column="65"/></name></expr></argument>, <argument><expr><operator pos:line="26" pos:column="67">&amp;<pos:position pos:line="26" pos:column="72"/></operator><name pos:line="26" pos:column="68">r_fds<pos:position pos:line="26" pos:column="73"/></name></expr></argument>)<pos:position pos:line="26" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="75"/></expr_stmt>
					<expr_stmt><expr><name pos:line="27" pos:column="41">new_fd<pos:position pos:line="27" pos:column="47"/></name> <operator pos:line="27" pos:column="48">=<pos:position pos:line="27" pos:column="49"/></operator> <name pos:line="27" pos:column="50">io_filesfrom_f_in<pos:position pos:line="27" pos:column="67"/></name></expr>;<pos:position pos:line="27" pos:column="68"/></expr_stmt>
				}<pos:position pos:line="28" pos:column="34"/></block></then> <else pos:line="28" pos:column="35">else <block pos:line="28" pos:column="40">{
					<expr_stmt><expr><name pos:line="29" pos:column="41">io_filesfrom_f_out<pos:position pos:line="29" pos:column="59"/></name> <operator pos:line="29" pos:column="60">=<pos:position pos:line="29" pos:column="61"/></operator> <operator pos:line="29" pos:column="62">-<pos:position pos:line="29" pos:column="63"/></operator><literal type="number" pos:line="29" pos:column="63">1<pos:position pos:line="29" pos:column="64"/></literal></expr>;<pos:position pos:line="29" pos:column="65"/></expr_stmt>
					<expr_stmt><expr><name pos:line="30" pos:column="41">new_fd<pos:position pos:line="30" pos:column="47"/></name> <operator pos:line="30" pos:column="48">=<pos:position pos:line="30" pos:column="49"/></operator> <operator pos:line="30" pos:column="50">-<pos:position pos:line="30" pos:column="51"/></operator><literal type="number" pos:line="30" pos:column="51">1<pos:position pos:line="30" pos:column="52"/></literal></expr>;<pos:position pos:line="30" pos:column="53"/></expr_stmt>
				}<pos:position pos:line="31" pos:column="34"/></block></else></if>
			}<pos:position pos:line="32" pos:column="26"/></block></then> <else pos:line="32" pos:column="27">else <block pos:line="32" pos:column="32">{
				<expr_stmt><expr><call><name pos:line="33" pos:column="33">FD_SET<pos:position pos:line="33" pos:column="39"/></name><argument_list pos:line="33" pos:column="39">(<argument><expr><name pos:line="33" pos:column="40">io_filesfrom_f_out<pos:position pos:line="33" pos:column="58"/></name></expr></argument>, <argument><expr><operator pos:line="33" pos:column="60">&amp;<pos:position pos:line="33" pos:column="65"/></operator><name pos:line="33" pos:column="61">w_fds<pos:position pos:line="33" pos:column="66"/></name></expr></argument>)<pos:position pos:line="33" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="68"/></expr_stmt>
				<expr_stmt><expr><name pos:line="34" pos:column="33">new_fd<pos:position pos:line="34" pos:column="39"/></name> <operator pos:line="34" pos:column="40">=<pos:position pos:line="34" pos:column="41"/></operator> <name pos:line="34" pos:column="42">io_filesfrom_f_out<pos:position pos:line="34" pos:column="60"/></name></expr>;<pos:position pos:line="34" pos:column="61"/></expr_stmt>
			}<pos:position pos:line="35" pos:column="26"/></block></else></if>
			<if pos:line="36" pos:column="25">if <condition pos:line="36" pos:column="28">(<expr><name pos:line="36" pos:column="29">new_fd<pos:position pos:line="36" pos:column="35"/></name> <operator pos:line="36" pos:column="36">&gt;<pos:position pos:line="36" pos:column="40"/></operator> <name pos:line="36" pos:column="38">maxfd<pos:position pos:line="36" pos:column="43"/></name></expr>)<pos:position pos:line="36" pos:column="44"/></condition><then pos:line="36" pos:column="44">
				<block type="pseudo"><expr_stmt><expr><name pos:line="37" pos:column="33">maxfd<pos:position pos:line="37" pos:column="38"/></name> <operator pos:line="37" pos:column="39">=<pos:position pos:line="37" pos:column="40"/></operator> <name pos:line="37" pos:column="41">new_fd<pos:position pos:line="37" pos:column="47"/></name></expr>;<pos:position pos:line="37" pos:column="48"/></expr_stmt></block></then></if>
		}<pos:position pos:line="38" pos:column="18"/></block></then></if>

		<expr_stmt><expr><name><name pos:line="40" pos:column="17">tv<pos:position pos:line="40" pos:column="19"/></name><operator pos:line="40" pos:column="19">.<pos:position pos:line="40" pos:column="20"/></operator><name pos:line="40" pos:column="20">tv_sec<pos:position pos:line="40" pos:column="26"/></name></name> <operator pos:line="40" pos:column="27">=<pos:position pos:line="40" pos:column="28"/></operator> <name pos:line="40" pos:column="29">select_timeout<pos:position pos:line="40" pos:column="43"/></name></expr>;<pos:position pos:line="40" pos:column="44"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="41" pos:column="17">tv<pos:position pos:line="41" pos:column="19"/></name><operator pos:line="41" pos:column="19">.<pos:position pos:line="41" pos:column="20"/></operator><name pos:line="41" pos:column="20">tv_usec<pos:position pos:line="41" pos:column="27"/></name></name> <operator pos:line="41" pos:column="28">=<pos:position pos:line="41" pos:column="29"/></operator> <literal type="number" pos:line="41" pos:column="30">0<pos:position pos:line="41" pos:column="31"/></literal></expr>;<pos:position pos:line="41" pos:column="32"/></expr_stmt>

		<expr_stmt><expr><name pos:line="43" pos:column="17">errno<pos:position pos:line="43" pos:column="22"/></name> <operator pos:line="43" pos:column="23">=<pos:position pos:line="43" pos:column="24"/></operator> <literal type="number" pos:line="43" pos:column="25">0<pos:position pos:line="43" pos:column="26"/></literal></expr>;<pos:position pos:line="43" pos:column="27"/></expr_stmt>

		<expr_stmt><expr><name pos:line="45" pos:column="17">count<pos:position pos:line="45" pos:column="22"/></name> <operator pos:line="45" pos:column="23">=<pos:position pos:line="45" pos:column="24"/></operator> <call><name pos:line="45" pos:column="25">select<pos:position pos:line="45" pos:column="31"/></name><argument_list pos:line="45" pos:column="31">(<argument><expr><name pos:line="45" pos:column="32">maxfd<pos:position pos:line="45" pos:column="37"/></name> <operator pos:line="45" pos:column="38">+<pos:position pos:line="45" pos:column="39"/></operator> <literal type="number" pos:line="45" pos:column="40">1<pos:position pos:line="45" pos:column="41"/></literal></expr></argument>, <argument><expr><operator pos:line="45" pos:column="43">&amp;<pos:position pos:line="45" pos:column="48"/></operator><name pos:line="45" pos:column="44">r_fds<pos:position pos:line="45" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="45" pos:column="51">&amp;<pos:position pos:line="45" pos:column="56"/></operator><name pos:line="45" pos:column="52">w_fds<pos:position pos:line="45" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="59">NULL<pos:position pos:line="45" pos:column="63"/></name></expr></argument>, <argument><expr><operator pos:line="45" pos:column="65">&amp;<pos:position pos:line="45" pos:column="70"/></operator><name pos:line="45" pos:column="66">tv<pos:position pos:line="45" pos:column="68"/></name></expr></argument>)<pos:position pos:line="45" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="70"/></expr_stmt>

		<if pos:line="47" pos:column="17">if <condition pos:line="47" pos:column="20">(<expr><name pos:line="47" pos:column="21">count<pos:position pos:line="47" pos:column="26"/></name> <operator pos:line="47" pos:column="27">&lt;=<pos:position pos:line="47" pos:column="32"/></operator> <literal type="number" pos:line="47" pos:column="30">0<pos:position pos:line="47" pos:column="31"/></literal></expr>)<pos:position pos:line="47" pos:column="32"/></condition><then pos:line="47" pos:column="32"> <block pos:line="47" pos:column="33">{
			<if pos:line="48" pos:column="25">if <condition pos:line="48" pos:column="28">(<expr><name pos:line="48" pos:column="29">errno<pos:position pos:line="48" pos:column="34"/></name> <operator pos:line="48" pos:column="35">==<pos:position pos:line="48" pos:column="37"/></operator> <name pos:line="48" pos:column="38">EBADF<pos:position pos:line="48" pos:column="43"/></name></expr>)<pos:position pos:line="48" pos:column="44"/></condition><then pos:line="48" pos:column="44">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="49" pos:column="33">exit_cleanup<pos:position pos:line="49" pos:column="45"/></name><argument_list pos:line="49" pos:column="45">(<argument><expr><name pos:line="49" pos:column="46">RERR_SOCKETIO<pos:position pos:line="49" pos:column="59"/></name></expr></argument>)<pos:position pos:line="49" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="61"/></expr_stmt></block></then></if>
			<expr_stmt><expr><call><name pos:line="50" pos:column="25">check_timeout<pos:position pos:line="50" pos:column="38"/></name><argument_list pos:line="50" pos:column="38">()<pos:position pos:line="50" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="41"/></expr_stmt>
			<continue pos:line="51" pos:column="25">continue;<pos:position pos:line="51" pos:column="34"/></continue>
		}<pos:position pos:line="52" pos:column="18"/></block></then></if>

		<if pos:line="54" pos:column="17">if <condition pos:line="54" pos:column="20">(<expr><name pos:line="54" pos:column="21">msg_list_head<pos:position pos:line="54" pos:column="34"/></name> <operator pos:line="54" pos:column="35">&amp;&amp;<pos:position pos:line="54" pos:column="45"/></operator> <call><name pos:line="54" pos:column="38">FD_ISSET<pos:position pos:line="54" pos:column="46"/></name><argument_list pos:line="54" pos:column="46">(<argument><expr><name pos:line="54" pos:column="47">msg_fd_out<pos:position pos:line="54" pos:column="57"/></name></expr></argument>, <argument><expr><operator pos:line="54" pos:column="59">&amp;<pos:position pos:line="54" pos:column="64"/></operator><name pos:line="54" pos:column="60">w_fds<pos:position pos:line="54" pos:column="65"/></name></expr></argument>)<pos:position pos:line="54" pos:column="66"/></argument_list></call></expr>)<pos:position pos:line="54" pos:column="67"/></condition><then pos:line="54" pos:column="67">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="55" pos:column="25">msg_list_push<pos:position pos:line="55" pos:column="38"/></name><argument_list pos:line="55" pos:column="38">(<argument><expr><name pos:line="55" pos:column="39">NORMAL_FLUSH<pos:position pos:line="55" pos:column="51"/></name></expr></argument>)<pos:position pos:line="55" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="53"/></expr_stmt></block></then></if>

		<if pos:line="57" pos:column="17">if <condition pos:line="57" pos:column="20">(<expr><name pos:line="57" pos:column="21">io_filesfrom_f_out<pos:position pos:line="57" pos:column="39"/></name> <operator pos:line="57" pos:column="40">&gt;=<pos:position pos:line="57" pos:column="45"/></operator> <literal type="number" pos:line="57" pos:column="43">0<pos:position pos:line="57" pos:column="44"/></literal></expr>)<pos:position pos:line="57" pos:column="45"/></condition><then pos:line="57" pos:column="45"> <block pos:line="57" pos:column="46">{
			<if pos:line="58" pos:column="25">if <condition pos:line="58" pos:column="28">(<expr><name pos:line="58" pos:column="29">io_filesfrom_buflen<pos:position pos:line="58" pos:column="48"/></name></expr>)<pos:position pos:line="58" pos:column="49"/></condition><then pos:line="58" pos:column="49"> <block pos:line="58" pos:column="50">{
				<if pos:line="59" pos:column="33">if <condition pos:line="59" pos:column="36">(<expr><call><name pos:line="59" pos:column="37">FD_ISSET<pos:position pos:line="59" pos:column="45"/></name><argument_list pos:line="59" pos:column="45">(<argument><expr><name pos:line="59" pos:column="46">io_filesfrom_f_out<pos:position pos:line="59" pos:column="64"/></name></expr></argument>, <argument><expr><operator pos:line="59" pos:column="66">&amp;<pos:position pos:line="59" pos:column="71"/></operator><name pos:line="59" pos:column="67">w_fds<pos:position pos:line="59" pos:column="72"/></name></expr></argument>)<pos:position pos:line="59" pos:column="73"/></argument_list></call></expr>)<pos:position pos:line="59" pos:column="74"/></condition><then pos:line="59" pos:column="74"> <block pos:line="59" pos:column="75">{
					<decl_stmt><decl><type><name pos:line="60" pos:column="41">int<pos:position pos:line="60" pos:column="44"/></name></type> <name pos:line="60" pos:column="45">l<pos:position pos:line="60" pos:column="46"/></name> <init pos:line="60" pos:column="47">= <expr><call><name pos:line="60" pos:column="49">write<pos:position pos:line="60" pos:column="54"/></name><argument_list pos:line="60" pos:column="54">(<argument><expr><name pos:line="60" pos:column="55">io_filesfrom_f_out<pos:position pos:line="60" pos:column="73"/></name></expr></argument>,
						      <argument><expr><name pos:line="61" pos:column="55">io_filesfrom_bp<pos:position pos:line="61" pos:column="70"/></name></expr></argument>,
						      <argument><expr><name pos:line="62" pos:column="55">io_filesfrom_buflen<pos:position pos:line="62" pos:column="74"/></name></expr></argument>)<pos:position pos:line="62" pos:column="75"/></argument_list></call></expr></init></decl>;<pos:position pos:line="62" pos:column="76"/></decl_stmt>
					<if pos:line="63" pos:column="41">if <condition pos:line="63" pos:column="44">(<expr><name pos:line="63" pos:column="45">l<pos:position pos:line="63" pos:column="46"/></name> <operator pos:line="63" pos:column="47">&gt;<pos:position pos:line="63" pos:column="51"/></operator> <literal type="number" pos:line="63" pos:column="49">0<pos:position pos:line="63" pos:column="50"/></literal></expr>)<pos:position pos:line="63" pos:column="51"/></condition><then pos:line="63" pos:column="51"> <block pos:line="63" pos:column="52">{
						<if pos:line="64" pos:column="49">if <condition pos:line="64" pos:column="52">(<expr><operator pos:line="64" pos:column="53">!<pos:position pos:line="64" pos:column="54"/></operator><operator pos:line="64" pos:column="54">(<pos:position pos:line="64" pos:column="55"/></operator><name pos:line="64" pos:column="55">io_filesfrom_buflen<pos:position pos:line="64" pos:column="74"/></name> <operator pos:line="64" pos:column="75">-=<pos:position pos:line="64" pos:column="77"/></operator> <name pos:line="64" pos:column="78">l<pos:position pos:line="64" pos:column="79"/></name><operator pos:line="64" pos:column="79">)<pos:position pos:line="64" pos:column="80"/></operator></expr>)<pos:position pos:line="64" pos:column="81"/></condition><then pos:line="64" pos:column="81">
							<block type="pseudo"><expr_stmt><expr><name pos:line="65" pos:column="57">io_filesfrom_bp<pos:position pos:line="65" pos:column="72"/></name> <operator pos:line="65" pos:column="73">=<pos:position pos:line="65" pos:column="74"/></operator> <name pos:line="65" pos:column="75">io_filesfrom_buf<pos:position pos:line="65" pos:column="91"/></name></expr>;<pos:position pos:line="65" pos:column="92"/></expr_stmt></block></then>
						<else pos:line="66" pos:column="49">else
							<block type="pseudo"><expr_stmt><expr><name pos:line="67" pos:column="57">io_filesfrom_bp<pos:position pos:line="67" pos:column="72"/></name> <operator pos:line="67" pos:column="73">+=<pos:position pos:line="67" pos:column="75"/></operator> <name pos:line="67" pos:column="76">l<pos:position pos:line="67" pos:column="77"/></name></expr>;<pos:position pos:line="67" pos:column="78"/></expr_stmt></block></else></if>
					}<pos:position pos:line="68" pos:column="42"/></block></then> <else pos:line="68" pos:column="43">else <block pos:line="68" pos:column="48">{
						<comment type="block" pos:line="69" pos:column="49">/* XXX should we complain? */</comment>
						<expr_stmt><expr><name pos:line="70" pos:column="49">io_filesfrom_f_out<pos:position pos:line="70" pos:column="67"/></name> <operator pos:line="70" pos:column="68">=<pos:position pos:line="70" pos:column="69"/></operator> <operator pos:line="70" pos:column="70">-<pos:position pos:line="70" pos:column="71"/></operator><literal type="number" pos:line="70" pos:column="71">1<pos:position pos:line="70" pos:column="72"/></literal></expr>;<pos:position pos:line="70" pos:column="73"/></expr_stmt>
					}<pos:position pos:line="71" pos:column="42"/></block></else></if>
				}<pos:position pos:line="72" pos:column="34"/></block></then></if>
			}<pos:position pos:line="73" pos:column="26"/></block></then> <elseif pos:line="73" pos:column="27">else <if pos:line="73" pos:column="32">if <condition pos:line="73" pos:column="35">(<expr><name pos:line="73" pos:column="36">io_filesfrom_f_in<pos:position pos:line="73" pos:column="53"/></name> <operator pos:line="73" pos:column="54">&gt;=<pos:position pos:line="73" pos:column="59"/></operator> <literal type="number" pos:line="73" pos:column="57">0<pos:position pos:line="73" pos:column="58"/></literal></expr>)<pos:position pos:line="73" pos:column="59"/></condition><then pos:line="73" pos:column="59"> <block pos:line="73" pos:column="60">{
				<if pos:line="74" pos:column="33">if <condition pos:line="74" pos:column="36">(<expr><call><name pos:line="74" pos:column="37">FD_ISSET<pos:position pos:line="74" pos:column="45"/></name><argument_list pos:line="74" pos:column="45">(<argument><expr><name pos:line="74" pos:column="46">io_filesfrom_f_in<pos:position pos:line="74" pos:column="63"/></name></expr></argument>, <argument><expr><operator pos:line="74" pos:column="65">&amp;<pos:position pos:line="74" pos:column="70"/></operator><name pos:line="74" pos:column="66">r_fds<pos:position pos:line="74" pos:column="71"/></name></expr></argument>)<pos:position pos:line="74" pos:column="72"/></argument_list></call></expr>)<pos:position pos:line="74" pos:column="73"/></condition><then pos:line="74" pos:column="73"> <block pos:line="74" pos:column="74">{
					<decl_stmt><decl><type><name pos:line="75" pos:column="41">int<pos:position pos:line="75" pos:column="44"/></name></type> <name pos:line="75" pos:column="45">l<pos:position pos:line="75" pos:column="46"/></name> <init pos:line="75" pos:column="47">= <expr><call><name pos:line="75" pos:column="49">read<pos:position pos:line="75" pos:column="53"/></name><argument_list pos:line="75" pos:column="53">(<argument><expr><name pos:line="75" pos:column="54">io_filesfrom_f_in<pos:position pos:line="75" pos:column="71"/></name></expr></argument>,
						     <argument><expr><name pos:line="76" pos:column="54">io_filesfrom_buf<pos:position pos:line="76" pos:column="70"/></name></expr></argument>,
						     <argument><expr><sizeof pos:line="77" pos:column="54">sizeof <name pos:line="77" pos:column="61">io_filesfrom_buf<pos:position pos:line="77" pos:column="77"/></name></sizeof></expr></argument>)<pos:position pos:line="77" pos:column="78"/></argument_list></call></expr></init></decl>;<pos:position pos:line="77" pos:column="79"/></decl_stmt>
					<if pos:line="78" pos:column="41">if <condition pos:line="78" pos:column="44">(<expr><name pos:line="78" pos:column="45">l<pos:position pos:line="78" pos:column="46"/></name> <operator pos:line="78" pos:column="47">&lt;=<pos:position pos:line="78" pos:column="52"/></operator> <literal type="number" pos:line="78" pos:column="50">0<pos:position pos:line="78" pos:column="51"/></literal></expr>)<pos:position pos:line="78" pos:column="52"/></condition><then pos:line="78" pos:column="52"> <block pos:line="78" pos:column="53">{
						<comment type="block" pos:line="79" pos:column="49">/* Send end-of-file marker */</comment>
						<expr_stmt><expr><name><name pos:line="80" pos:column="49">io_filesfrom_buf<pos:position pos:line="80" pos:column="65"/></name><index pos:line="80" pos:column="65">[<expr><literal type="number" pos:line="80" pos:column="66">0<pos:position pos:line="80" pos:column="67"/></literal></expr>]<pos:position pos:line="80" pos:column="68"/></index></name> <operator pos:line="80" pos:column="69">=<pos:position pos:line="80" pos:column="70"/></operator> <literal type="char" pos:line="80" pos:column="71">'\0'<pos:position pos:line="80" pos:column="75"/></literal></expr>;<pos:position pos:line="80" pos:column="76"/></expr_stmt>
						<expr_stmt><expr><name><name pos:line="81" pos:column="49">io_filesfrom_buf<pos:position pos:line="81" pos:column="65"/></name><index pos:line="81" pos:column="65">[<expr><literal type="number" pos:line="81" pos:column="66">1<pos:position pos:line="81" pos:column="67"/></literal></expr>]<pos:position pos:line="81" pos:column="68"/></index></name> <operator pos:line="81" pos:column="69">=<pos:position pos:line="81" pos:column="70"/></operator> <literal type="char" pos:line="81" pos:column="71">'\0'<pos:position pos:line="81" pos:column="75"/></literal></expr>;<pos:position pos:line="81" pos:column="76"/></expr_stmt>
						<expr_stmt><expr><name pos:line="82" pos:column="49">io_filesfrom_buflen<pos:position pos:line="82" pos:column="68"/></name> <operator pos:line="82" pos:column="69">=<pos:position pos:line="82" pos:column="70"/></operator> <ternary><condition><expr><name pos:line="82" pos:column="71">io_filesfrom_lastchar<pos:position pos:line="82" pos:column="92"/></name></expr>?<pos:position pos:line="82" pos:column="93"/></condition><then pos:line="82" pos:column="93"> <expr><literal type="number" pos:line="82" pos:column="94">2<pos:position pos:line="82" pos:column="95"/></literal></expr> <pos:position pos:line="82" pos:column="96"/></then><else pos:line="82" pos:column="96">: <expr><literal type="number" pos:line="82" pos:column="98">1<pos:position pos:line="82" pos:column="99"/></literal></expr></else></ternary></expr>;<pos:position pos:line="82" pos:column="100"/></expr_stmt>
						<expr_stmt><expr><name pos:line="83" pos:column="49">io_filesfrom_f_in<pos:position pos:line="83" pos:column="66"/></name> <operator pos:line="83" pos:column="67">=<pos:position pos:line="83" pos:column="68"/></operator> <operator pos:line="83" pos:column="69">-<pos:position pos:line="83" pos:column="70"/></operator><literal type="number" pos:line="83" pos:column="70">1<pos:position pos:line="83" pos:column="71"/></literal></expr>;<pos:position pos:line="83" pos:column="72"/></expr_stmt>
					}<pos:position pos:line="84" pos:column="42"/></block></then> <else pos:line="84" pos:column="43">else <block pos:line="84" pos:column="48">{
						<if pos:line="85" pos:column="49">if <condition pos:line="85" pos:column="52">(<expr><operator pos:line="85" pos:column="53">!<pos:position pos:line="85" pos:column="54"/></operator><name pos:line="85" pos:column="54">eol_nulls<pos:position pos:line="85" pos:column="63"/></name></expr>)<pos:position pos:line="85" pos:column="64"/></condition><then pos:line="85" pos:column="64"> <block pos:line="85" pos:column="65">{
							<decl_stmt><decl><type><name pos:line="86" pos:column="57">char<pos:position pos:line="86" pos:column="61"/></name> <modifier pos:line="86" pos:column="62">*<pos:position pos:line="86" pos:column="63"/></modifier></type><name pos:line="86" pos:column="63">s<pos:position pos:line="86" pos:column="64"/></name> <init pos:line="86" pos:column="65">= <expr><name pos:line="86" pos:column="67">io_filesfrom_buf<pos:position pos:line="86" pos:column="83"/></name> <operator pos:line="86" pos:column="84">+<pos:position pos:line="86" pos:column="85"/></operator> <name pos:line="86" pos:column="86">l<pos:position pos:line="86" pos:column="87"/></name></expr></init></decl>;<pos:position pos:line="86" pos:column="88"/></decl_stmt>
							<comment type="block" pos:line="87" pos:column="57">/* Transform CR and/or LF into '\0' */</comment>
							<while pos:line="88" pos:column="57">while <condition pos:line="88" pos:column="63">(<expr><name pos:line="88" pos:column="64">s<pos:position pos:line="88" pos:column="65"/></name><operator pos:line="88" pos:column="65">--<pos:position pos:line="88" pos:column="67"/></operator> <operator pos:line="88" pos:column="68">&gt;<pos:position pos:line="88" pos:column="72"/></operator> <name pos:line="88" pos:column="70">io_filesfrom_buf<pos:position pos:line="88" pos:column="86"/></name></expr>)<pos:position pos:line="88" pos:column="87"/></condition> <block pos:line="88" pos:column="88">{
								<if pos:line="89" pos:column="65">if <condition pos:line="89" pos:column="68">(<expr><operator pos:line="89" pos:column="69">*<pos:position pos:line="89" pos:column="70"/></operator><name pos:line="89" pos:column="70">s<pos:position pos:line="89" pos:column="71"/></name> <operator pos:line="89" pos:column="72">==<pos:position pos:line="89" pos:column="74"/></operator> <literal type="char" pos:line="89" pos:column="75">'\n'<pos:position pos:line="89" pos:column="79"/></literal> <operator pos:line="89" pos:column="80">||<pos:position pos:line="89" pos:column="82"/></operator> <operator pos:line="89" pos:column="83">*<pos:position pos:line="89" pos:column="84"/></operator><name pos:line="89" pos:column="84">s<pos:position pos:line="89" pos:column="85"/></name> <operator pos:line="89" pos:column="86">==<pos:position pos:line="89" pos:column="88"/></operator> <literal type="char" pos:line="89" pos:column="89">'\r'<pos:position pos:line="89" pos:column="93"/></literal></expr>)<pos:position pos:line="89" pos:column="94"/></condition><then pos:line="89" pos:column="94">
									<block type="pseudo"><expr_stmt><expr><operator pos:line="90" pos:column="73">*<pos:position pos:line="90" pos:column="74"/></operator><name pos:line="90" pos:column="74">s<pos:position pos:line="90" pos:column="75"/></name> <operator pos:line="90" pos:column="76">=<pos:position pos:line="90" pos:column="77"/></operator> <literal type="char" pos:line="90" pos:column="78">'\0'<pos:position pos:line="90" pos:column="82"/></literal></expr>;<pos:position pos:line="90" pos:column="83"/></expr_stmt></block></then></if>
							}<pos:position pos:line="91" pos:column="58"/></block></while>
						}<pos:position pos:line="92" pos:column="50"/></block></then></if>
						<if pos:line="93" pos:column="49">if <condition pos:line="93" pos:column="52">(<expr><operator pos:line="93" pos:column="53">!<pos:position pos:line="93" pos:column="54"/></operator><name pos:line="93" pos:column="54">io_filesfrom_lastchar<pos:position pos:line="93" pos:column="75"/></name></expr>)<pos:position pos:line="93" pos:column="76"/></condition><then pos:line="93" pos:column="76"> <block pos:line="93" pos:column="77">{
							<comment type="block" pos:line="94" pos:column="57">/* Last buf ended with a '\0', so don't
							 * let this buf start with one. */</comment>
							<while pos:line="96" pos:column="57">while <condition pos:line="96" pos:column="63">(<expr><name pos:line="96" pos:column="64">l<pos:position pos:line="96" pos:column="65"/></name> <operator pos:line="96" pos:column="66">&amp;&amp;<pos:position pos:line="96" pos:column="76"/></operator> <operator pos:line="96" pos:column="69">!<pos:position pos:line="96" pos:column="70"/></operator><operator pos:line="96" pos:column="70">*<pos:position pos:line="96" pos:column="71"/></operator><name pos:line="96" pos:column="71">io_filesfrom_bp<pos:position pos:line="96" pos:column="86"/></name></expr>)<pos:position pos:line="96" pos:column="87"/></condition>
								<block type="pseudo"><expr_stmt><expr><name pos:line="97" pos:column="65">io_filesfrom_bp<pos:position pos:line="97" pos:column="80"/></name><operator pos:line="97" pos:column="80">++<pos:position pos:line="97" pos:column="82"/></operator></expr><operator pos:line="97" pos:column="82">,<pos:position pos:line="97" pos:column="83"/></operator> <expr><name pos:line="97" pos:column="84">l<pos:position pos:line="97" pos:column="85"/></name><operator pos:line="97" pos:column="85">--<pos:position pos:line="97" pos:column="87"/></operator></expr>;<pos:position pos:line="97" pos:column="88"/></expr_stmt></block></while>
						}<pos:position pos:line="98" pos:column="50"/></block></then></if>
						<if pos:line="99" pos:column="49">if <condition pos:line="99" pos:column="52">(<expr><operator pos:line="99" pos:column="53">!<pos:position pos:line="99" pos:column="54"/></operator><name pos:line="99" pos:column="54">l<pos:position pos:line="99" pos:column="55"/></name></expr>)<pos:position pos:line="99" pos:column="56"/></condition><then pos:line="99" pos:column="56">
							<block type="pseudo"><expr_stmt><expr><name pos:line="100" pos:column="57">io_filesfrom_bp<pos:position pos:line="100" pos:column="72"/></name> <operator pos:line="100" pos:column="73">=<pos:position pos:line="100" pos:column="74"/></operator> <name pos:line="100" pos:column="75">io_filesfrom_buf<pos:position pos:line="100" pos:column="91"/></name></expr>;<pos:position pos:line="100" pos:column="92"/></expr_stmt></block></then>
						<else pos:line="101" pos:column="49">else <block pos:line="101" pos:column="54">{
							<decl_stmt><decl><type><name pos:line="102" pos:column="57">char<pos:position pos:line="102" pos:column="61"/></name> <modifier pos:line="102" pos:column="62">*<pos:position pos:line="102" pos:column="63"/></modifier></type><name pos:line="102" pos:column="63">f<pos:position pos:line="102" pos:column="64"/></name> <init pos:line="102" pos:column="65">= <expr><name pos:line="102" pos:column="67">io_filesfrom_bp<pos:position pos:line="102" pos:column="82"/></name></expr></init></decl>;<pos:position pos:line="102" pos:column="83"/></decl_stmt>
							<decl_stmt><decl><type><name pos:line="103" pos:column="57">char<pos:position pos:line="103" pos:column="61"/></name> <modifier pos:line="103" pos:column="62">*<pos:position pos:line="103" pos:column="63"/></modifier></type><name pos:line="103" pos:column="63">t<pos:position pos:line="103" pos:column="64"/></name> <init pos:line="103" pos:column="65">= <expr><name pos:line="103" pos:column="67">f<pos:position pos:line="103" pos:column="68"/></name></expr></init></decl>;<pos:position pos:line="103" pos:column="69"/></decl_stmt>
							<decl_stmt><decl><type><name pos:line="104" pos:column="57">char<pos:position pos:line="104" pos:column="61"/></name> <modifier pos:line="104" pos:column="62">*<pos:position pos:line="104" pos:column="63"/></modifier></type><name pos:line="104" pos:column="63">eob<pos:position pos:line="104" pos:column="66"/></name> <init pos:line="104" pos:column="67">= <expr><name pos:line="104" pos:column="69">f<pos:position pos:line="104" pos:column="70"/></name> <operator pos:line="104" pos:column="71">+<pos:position pos:line="104" pos:column="72"/></operator> <name pos:line="104" pos:column="73">l<pos:position pos:line="104" pos:column="74"/></name></expr></init></decl>;<pos:position pos:line="104" pos:column="75"/></decl_stmt>
							<comment type="block" pos:line="105" pos:column="57">/* Eliminate any multi-'\0' runs. */</comment>
							<while pos:line="106" pos:column="57">while <condition pos:line="106" pos:column="63">(<expr><name pos:line="106" pos:column="64">f<pos:position pos:line="106" pos:column="65"/></name> <operator pos:line="106" pos:column="66">!=<pos:position pos:line="106" pos:column="68"/></operator> <name pos:line="106" pos:column="69">eob<pos:position pos:line="106" pos:column="72"/></name></expr>)<pos:position pos:line="106" pos:column="73"/></condition> <block pos:line="106" pos:column="74">{
								<if pos:line="107" pos:column="65">if <condition pos:line="107" pos:column="68">(<expr><operator pos:line="107" pos:column="69">!<pos:position pos:line="107" pos:column="70"/></operator><operator pos:line="107" pos:column="70">(<pos:position pos:line="107" pos:column="71"/></operator><operator pos:line="107" pos:column="71">*<pos:position pos:line="107" pos:column="72"/></operator><name pos:line="107" pos:column="72">t<pos:position pos:line="107" pos:column="73"/></name><operator pos:line="107" pos:column="73">++<pos:position pos:line="107" pos:column="75"/></operator> <operator pos:line="107" pos:column="76">=<pos:position pos:line="107" pos:column="77"/></operator> <operator pos:line="107" pos:column="78">*<pos:position pos:line="107" pos:column="79"/></operator><name pos:line="107" pos:column="79">f<pos:position pos:line="107" pos:column="80"/></name><operator pos:line="107" pos:column="80">++<pos:position pos:line="107" pos:column="82"/></operator><operator pos:line="107" pos:column="82">)<pos:position pos:line="107" pos:column="83"/></operator></expr>)<pos:position pos:line="107" pos:column="84"/></condition><then pos:line="107" pos:column="84"> <block pos:line="107" pos:column="85">{
									<while pos:line="108" pos:column="73">while <condition pos:line="108" pos:column="79">(<expr><name pos:line="108" pos:column="80">f<pos:position pos:line="108" pos:column="81"/></name> <operator pos:line="108" pos:column="82">!=<pos:position pos:line="108" pos:column="84"/></operator> <name pos:line="108" pos:column="85">eob<pos:position pos:line="108" pos:column="88"/></name> <operator pos:line="108" pos:column="89">&amp;&amp;<pos:position pos:line="108" pos:column="99"/></operator> <operator pos:line="108" pos:column="92">!<pos:position pos:line="108" pos:column="93"/></operator><operator pos:line="108" pos:column="93">*<pos:position pos:line="108" pos:column="94"/></operator><name pos:line="108" pos:column="94">f<pos:position pos:line="108" pos:column="95"/></name></expr>)<pos:position pos:line="108" pos:column="96"/></condition>
										<block type="pseudo"><expr_stmt><expr><name pos:line="109" pos:column="81">f<pos:position pos:line="109" pos:column="82"/></name><operator pos:line="109" pos:column="82">++<pos:position pos:line="109" pos:column="84"/></operator></expr><operator pos:line="109" pos:column="84">,<pos:position pos:line="109" pos:column="85"/></operator> <expr><name pos:line="109" pos:column="86">l<pos:position pos:line="109" pos:column="87"/></name><operator pos:line="109" pos:column="87">--<pos:position pos:line="109" pos:column="89"/></operator></expr>;<pos:position pos:line="109" pos:column="90"/></expr_stmt></block></while>
								}<pos:position pos:line="110" pos:column="66"/></block></then></if>
							}<pos:position pos:line="111" pos:column="58"/></block></while>
							<expr_stmt><expr><name pos:line="112" pos:column="57">io_filesfrom_lastchar<pos:position pos:line="112" pos:column="78"/></name> <operator pos:line="112" pos:column="79">=<pos:position pos:line="112" pos:column="80"/></operator> <name><name pos:line="112" pos:column="81">f<pos:position pos:line="112" pos:column="82"/></name><index pos:line="112" pos:column="82">[<expr><operator pos:line="112" pos:column="83">-<pos:position pos:line="112" pos:column="84"/></operator><literal type="number" pos:line="112" pos:column="84">1<pos:position pos:line="112" pos:column="85"/></literal></expr>]<pos:position pos:line="112" pos:column="86"/></index></name></expr>;<pos:position pos:line="112" pos:column="87"/></expr_stmt>
						}<pos:position pos:line="113" pos:column="50"/></block></else></if>
						<expr_stmt><expr><name pos:line="114" pos:column="49">io_filesfrom_buflen<pos:position pos:line="114" pos:column="68"/></name> <operator pos:line="114" pos:column="69">=<pos:position pos:line="114" pos:column="70"/></operator> <name pos:line="114" pos:column="71">l<pos:position pos:line="114" pos:column="72"/></name></expr>;<pos:position pos:line="114" pos:column="73"/></expr_stmt>
					}<pos:position pos:line="115" pos:column="42"/></block></else></if>
				}<pos:position pos:line="116" pos:column="34"/></block></then></if>
			}<pos:position pos:line="117" pos:column="26"/></block></then></if></elseif></if>
		}<pos:position pos:line="118" pos:column="18"/></block></then></if>

		<if pos:line="120" pos:column="17">if <condition pos:line="120" pos:column="20">(<expr><operator pos:line="120" pos:column="21">!<pos:position pos:line="120" pos:column="22"/></operator><call><name pos:line="120" pos:column="22">FD_ISSET<pos:position pos:line="120" pos:column="30"/></name><argument_list pos:line="120" pos:column="30">(<argument><expr><name pos:line="120" pos:column="31">fd<pos:position pos:line="120" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="120" pos:column="35">&amp;<pos:position pos:line="120" pos:column="40"/></operator><name pos:line="120" pos:column="36">r_fds<pos:position pos:line="120" pos:column="41"/></name></expr></argument>)<pos:position pos:line="120" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="120" pos:column="43"/></condition><then pos:line="120" pos:column="43">
			<block type="pseudo"><continue pos:line="121" pos:column="25">continue;<pos:position pos:line="121" pos:column="34"/></continue></block></then></if>

		<expr_stmt><expr><name pos:line="123" pos:column="17">n<pos:position pos:line="123" pos:column="18"/></name> <operator pos:line="123" pos:column="19">=<pos:position pos:line="123" pos:column="20"/></operator> <call><name pos:line="123" pos:column="21">read<pos:position pos:line="123" pos:column="25"/></name><argument_list pos:line="123" pos:column="25">(<argument><expr><name pos:line="123" pos:column="26">fd<pos:position pos:line="123" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="123" pos:column="30">buf<pos:position pos:line="123" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="123" pos:column="35">len<pos:position pos:line="123" pos:column="38"/></name></expr></argument>)<pos:position pos:line="123" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="123" pos:column="40"/></expr_stmt>

		<if pos:line="125" pos:column="17">if <condition pos:line="125" pos:column="20">(<expr><name pos:line="125" pos:column="21">n<pos:position pos:line="125" pos:column="22"/></name> <operator pos:line="125" pos:column="23">&lt;=<pos:position pos:line="125" pos:column="28"/></operator> <literal type="number" pos:line="125" pos:column="26">0<pos:position pos:line="125" pos:column="27"/></literal></expr>)<pos:position pos:line="125" pos:column="28"/></condition><then pos:line="125" pos:column="28"> <block pos:line="125" pos:column="29">{
			<if pos:line="126" pos:column="25">if <condition pos:line="126" pos:column="28">(<expr><name pos:line="126" pos:column="29">n<pos:position pos:line="126" pos:column="30"/></name> <operator pos:line="126" pos:column="31">==<pos:position pos:line="126" pos:column="33"/></operator> <literal type="number" pos:line="126" pos:column="34">0<pos:position pos:line="126" pos:column="35"/></literal></expr>)<pos:position pos:line="126" pos:column="36"/></condition><then pos:line="126" pos:column="36">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="127" pos:column="33">whine_about_eof<pos:position pos:line="127" pos:column="48"/></name><argument_list pos:line="127" pos:column="48">(<argument><expr><name pos:line="127" pos:column="49">fd<pos:position pos:line="127" pos:column="51"/></name></expr></argument>)<pos:position pos:line="127" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="127" pos:column="53"/></expr_stmt></block></then></if> <comment type="block" pos:line="127" pos:column="54">/* Doesn't return. */</comment>
			<if pos:line="128" pos:column="25">if <condition pos:line="128" pos:column="28">(<expr><name pos:line="128" pos:column="29">errno<pos:position pos:line="128" pos:column="34"/></name> <operator pos:line="128" pos:column="35">==<pos:position pos:line="128" pos:column="37"/></operator> <name pos:line="128" pos:column="38">EINTR<pos:position pos:line="128" pos:column="43"/></name> <operator pos:line="128" pos:column="44">||<pos:position pos:line="128" pos:column="46"/></operator> <name pos:line="128" pos:column="47">errno<pos:position pos:line="128" pos:column="52"/></name> <operator pos:line="128" pos:column="53">==<pos:position pos:line="128" pos:column="55"/></operator> <name pos:line="128" pos:column="56">EWOULDBLOCK<pos:position pos:line="128" pos:column="67"/></name>
			    <operator pos:line="129" pos:column="29">||<pos:position pos:line="129" pos:column="31"/></operator> <name pos:line="129" pos:column="32">errno<pos:position pos:line="129" pos:column="37"/></name> <operator pos:line="129" pos:column="38">==<pos:position pos:line="129" pos:column="40"/></operator> <name pos:line="129" pos:column="41">EAGAIN<pos:position pos:line="129" pos:column="47"/></name></expr>)<pos:position pos:line="129" pos:column="48"/></condition><then pos:line="129" pos:column="48">
				<block type="pseudo"><continue pos:line="130" pos:column="33">continue;<pos:position pos:line="130" pos:column="42"/></continue></block></then></if>

			<comment type="block" pos:line="132" pos:column="25">/* Don't write errors on a dead socket. */</comment>
			<if pos:line="133" pos:column="25">if <condition pos:line="133" pos:column="28">(<expr><name pos:line="133" pos:column="29">fd<pos:position pos:line="133" pos:column="31"/></name> <operator pos:line="133" pos:column="32">==<pos:position pos:line="133" pos:column="34"/></operator> <name pos:line="133" pos:column="35">sock_f_in<pos:position pos:line="133" pos:column="44"/></name></expr>)<pos:position pos:line="133" pos:column="45"/></condition><then pos:line="133" pos:column="45">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="134" pos:column="33">close_multiplexing_out<pos:position pos:line="134" pos:column="55"/></name><argument_list pos:line="134" pos:column="55">()<pos:position pos:line="134" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="134" pos:column="58"/></expr_stmt></block></then></if>
			<expr_stmt><expr><call><name pos:line="135" pos:column="25">rsyserr<pos:position pos:line="135" pos:column="32"/></name><argument_list pos:line="135" pos:column="32">(<argument><expr><name pos:line="135" pos:column="33">FERROR<pos:position pos:line="135" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="135" pos:column="41">errno<pos:position pos:line="135" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="135" pos:column="48">"read error"<pos:position pos:line="135" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="135" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="135" pos:column="62"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="136" pos:column="25">exit_cleanup<pos:position pos:line="136" pos:column="37"/></name><argument_list pos:line="136" pos:column="37">(<argument><expr><name pos:line="136" pos:column="38">RERR_STREAMIO<pos:position pos:line="136" pos:column="51"/></name></expr></argument>)<pos:position pos:line="136" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="136" pos:column="53"/></expr_stmt>
		}<pos:position pos:line="137" pos:column="18"/></block></then></if>

		<expr_stmt><expr><name pos:line="139" pos:column="17">buf<pos:position pos:line="139" pos:column="20"/></name> <operator pos:line="139" pos:column="21">+=<pos:position pos:line="139" pos:column="23"/></operator> <name pos:line="139" pos:column="24">n<pos:position pos:line="139" pos:column="25"/></name></expr>;<pos:position pos:line="139" pos:column="26"/></expr_stmt>
		<expr_stmt><expr><name pos:line="140" pos:column="17">len<pos:position pos:line="140" pos:column="20"/></name> <operator pos:line="140" pos:column="21">-=<pos:position pos:line="140" pos:column="23"/></operator> <name pos:line="140" pos:column="24">n<pos:position pos:line="140" pos:column="25"/></name></expr>;<pos:position pos:line="140" pos:column="26"/></expr_stmt>
		<expr_stmt><expr><name pos:line="141" pos:column="17">ret<pos:position pos:line="141" pos:column="20"/></name> <operator pos:line="141" pos:column="21">+=<pos:position pos:line="141" pos:column="23"/></operator> <name pos:line="141" pos:column="24">n<pos:position pos:line="141" pos:column="25"/></name></expr>;<pos:position pos:line="141" pos:column="26"/></expr_stmt>

		<if pos:line="143" pos:column="17">if <condition pos:line="143" pos:column="20">(<expr><name pos:line="143" pos:column="21">fd<pos:position pos:line="143" pos:column="23"/></name> <operator pos:line="143" pos:column="24">==<pos:position pos:line="143" pos:column="26"/></operator> <name pos:line="143" pos:column="27">sock_f_in<pos:position pos:line="143" pos:column="36"/></name> <operator pos:line="143" pos:column="37">&amp;&amp;<pos:position pos:line="143" pos:column="47"/></operator> <name pos:line="143" pos:column="40">io_timeout<pos:position pos:line="143" pos:column="50"/></name></expr>)<pos:position pos:line="143" pos:column="51"/></condition><then pos:line="143" pos:column="51">
			<block type="pseudo"><expr_stmt><expr><name pos:line="144" pos:column="25">last_io_in<pos:position pos:line="144" pos:column="35"/></name> <operator pos:line="144" pos:column="36">=<pos:position pos:line="144" pos:column="37"/></operator> <call><name pos:line="144" pos:column="38">time<pos:position pos:line="144" pos:column="42"/></name><argument_list pos:line="144" pos:column="42">(<argument><expr><name pos:line="144" pos:column="43">NULL<pos:position pos:line="144" pos:column="47"/></name></expr></argument>)<pos:position pos:line="144" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="144" pos:column="49"/></expr_stmt></block></then></if>
	}<pos:position pos:line="145" pos:column="10"/></block></while>

	<return pos:line="147" pos:column="9">return <expr><name pos:line="147" pos:column="16">ret<pos:position pos:line="147" pos:column="19"/></name></expr>;<pos:position pos:line="147" pos:column="20"/></return>
}<pos:position pos:line="148" pos:column="2"/></block></function></unit>
