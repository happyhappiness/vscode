<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_109_rsync-3.0.9.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">mplex_write<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name pos:line="1" pos:column="25">int<pos:position pos:line="1" pos:column="28"/></name></type> <name pos:line="1" pos:column="29">fd<pos:position pos:line="1" pos:column="31"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="33">enum<pos:position pos:line="1" pos:column="37"/></name> <name pos:line="1" pos:column="38">msgcode<pos:position pos:line="1" pos:column="45"/></name></name></type> <name pos:line="1" pos:column="46">code<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="52">const<pos:position pos:line="1" pos:column="57"/></specifier> <name pos:line="1" pos:column="58">char<pos:position pos:line="1" pos:column="62"/></name> <modifier pos:line="1" pos:column="63">*<pos:position pos:line="1" pos:column="64"/></modifier></type><name pos:line="1" pos:column="64">buf<pos:position pos:line="1" pos:column="67"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="69">size_t<pos:position pos:line="1" pos:column="75"/></name></type> <name pos:line="1" pos:column="76">len<pos:position pos:line="1" pos:column="79"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="81">int<pos:position pos:line="1" pos:column="84"/></name></type> <name pos:line="1" pos:column="85">convert<pos:position pos:line="1" pos:column="92"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="93"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">char<pos:position pos:line="3" pos:column="13"/></name></type> <name><name pos:line="3" pos:column="14">buffer<pos:position pos:line="3" pos:column="20"/></name><index pos:line="3" pos:column="20">[<expr><name pos:line="3" pos:column="21">BIGPATHBUFLEN<pos:position pos:line="3" pos:column="34"/></name></expr>]<pos:position pos:line="3" pos:column="35"/></index></name></decl>;<pos:position pos:line="3" pos:column="36"/></decl_stmt> <comment type="block" pos:line="3" pos:column="37">/* Oversized for use by iconv code. */</comment>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">size_t<pos:position pos:line="4" pos:column="15"/></name></type> <name pos:line="4" pos:column="16">n<pos:position pos:line="4" pos:column="17"/></name> <init pos:line="4" pos:column="18">= <expr><name pos:line="4" pos:column="20">len<pos:position pos:line="4" pos:column="23"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="24"/></decl_stmt>

<cpp:ifdef pos:line="6" pos:column="1">#<cpp:directive pos:line="6" pos:column="2">ifdef<pos:position pos:line="6" pos:column="7"/></cpp:directive> <name pos:line="6" pos:column="8">ICONV_OPTION<pos:position pos:line="6" pos:column="20"/></name></cpp:ifdef>
	<comment type="block" pos:line="7" pos:column="9">/* We need to convert buf before doing anything else so that we
	 * can include the (converted) byte length in the message header. */</comment>
	<if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><name pos:line="9" pos:column="13">convert<pos:position pos:line="9" pos:column="20"/></name> <operator pos:line="9" pos:column="21">&amp;&amp;<pos:position pos:line="9" pos:column="31"/></operator> <name pos:line="9" pos:column="24">ic_send<pos:position pos:line="9" pos:column="31"/></name> <operator pos:line="9" pos:column="32">!=<pos:position pos:line="9" pos:column="34"/></operator> <operator pos:line="9" pos:column="35">(<pos:position pos:line="9" pos:column="36"/></operator><name pos:line="9" pos:column="36">iconv_t<pos:position pos:line="9" pos:column="43"/></name><operator pos:line="9" pos:column="43">)<pos:position pos:line="9" pos:column="44"/></operator><operator pos:line="9" pos:column="44">-<pos:position pos:line="9" pos:column="45"/></operator><literal type="number" pos:line="9" pos:column="45">1<pos:position pos:line="9" pos:column="46"/></literal></expr>)<pos:position pos:line="9" pos:column="47"/></condition><then pos:line="9" pos:column="47"> <block pos:line="9" pos:column="48">{
		<decl_stmt><decl><type><name pos:line="10" pos:column="17">xbuf<pos:position pos:line="10" pos:column="21"/></name></type> <name pos:line="10" pos:column="22">outbuf<pos:position pos:line="10" pos:column="28"/></name></decl>, <decl><type ref="prev"/><name pos:line="10" pos:column="30">inbuf<pos:position pos:line="10" pos:column="35"/></name></decl>;<pos:position pos:line="10" pos:column="36"/></decl_stmt>

		<expr_stmt><expr><call><name pos:line="12" pos:column="17">INIT_XBUF<pos:position pos:line="12" pos:column="26"/></name><argument_list pos:line="12" pos:column="26">(<argument><expr><name pos:line="12" pos:column="27">outbuf<pos:position pos:line="12" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="35">buffer<pos:position pos:line="12" pos:column="41"/></name> <operator pos:line="12" pos:column="42">+<pos:position pos:line="12" pos:column="43"/></operator> <literal type="number" pos:line="12" pos:column="44">4<pos:position pos:line="12" pos:column="45"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="12" pos:column="47">0<pos:position pos:line="12" pos:column="48"/></literal></expr></argument>, <argument><expr><sizeof pos:line="12" pos:column="50">sizeof <name pos:line="12" pos:column="57">buffer<pos:position pos:line="12" pos:column="63"/></name></sizeof> <operator pos:line="12" pos:column="64">-<pos:position pos:line="12" pos:column="65"/></operator> <literal type="number" pos:line="12" pos:column="66">4<pos:position pos:line="12" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="69"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="13" pos:column="17">INIT_XBUF<pos:position pos:line="13" pos:column="26"/></name><argument_list pos:line="13" pos:column="26">(<argument><expr><name pos:line="13" pos:column="27">inbuf<pos:position pos:line="13" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="13" pos:column="34">(<pos:position pos:line="13" pos:column="35"/></operator><name pos:line="13" pos:column="35">char<pos:position pos:line="13" pos:column="39"/></name><operator pos:line="13" pos:column="39">*<pos:position pos:line="13" pos:column="40"/></operator><operator pos:line="13" pos:column="40">)<pos:position pos:line="13" pos:column="41"/></operator><name pos:line="13" pos:column="41">buf<pos:position pos:line="13" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="46">len<pos:position pos:line="13" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="13" pos:column="51">-<pos:position pos:line="13" pos:column="52"/></operator><literal type="number" pos:line="13" pos:column="52">1<pos:position pos:line="13" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="55"/></expr_stmt>

		<expr_stmt><expr><call><name pos:line="15" pos:column="17">iconvbufs<pos:position pos:line="15" pos:column="26"/></name><argument_list pos:line="15" pos:column="26">(<argument><expr><name pos:line="15" pos:column="27">ic_send<pos:position pos:line="15" pos:column="34"/></name></expr></argument>, <argument><expr><operator pos:line="15" pos:column="36">&amp;<pos:position pos:line="15" pos:column="41"/></operator><name pos:line="15" pos:column="37">inbuf<pos:position pos:line="15" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="15" pos:column="44">&amp;<pos:position pos:line="15" pos:column="49"/></operator><name pos:line="15" pos:column="45">outbuf<pos:position pos:line="15" pos:column="51"/></name></expr></argument>,
			  <argument><expr><name pos:line="16" pos:column="27">ICB_INCLUDE_BAD<pos:position pos:line="16" pos:column="42"/></name> <operator pos:line="16" pos:column="43">|<pos:position pos:line="16" pos:column="44"/></operator> <name pos:line="16" pos:column="45">ICB_INCLUDE_INCOMPLETE<pos:position pos:line="16" pos:column="67"/></name></expr></argument>)<pos:position pos:line="16" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="69"/></expr_stmt>
		<if pos:line="17" pos:column="17">if <condition pos:line="17" pos:column="20">(<expr><name><name pos:line="17" pos:column="21">inbuf<pos:position pos:line="17" pos:column="26"/></name><operator pos:line="17" pos:column="26">.<pos:position pos:line="17" pos:column="27"/></operator><name pos:line="17" pos:column="27">len<pos:position pos:line="17" pos:column="30"/></name></name> <operator pos:line="17" pos:column="31">&gt;<pos:position pos:line="17" pos:column="35"/></operator> <literal type="number" pos:line="17" pos:column="33">0<pos:position pos:line="17" pos:column="34"/></literal></expr>)<pos:position pos:line="17" pos:column="35"/></condition><then pos:line="17" pos:column="35"> <block pos:line="17" pos:column="36">{
			<expr_stmt><expr><call><name pos:line="18" pos:column="25">rprintf<pos:position pos:line="18" pos:column="32"/></name><argument_list pos:line="18" pos:column="32">(<argument><expr><name pos:line="18" pos:column="33">FERROR<pos:position pos:line="18" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="18" pos:column="41">"overflowed conversion buffer in mplex_write"<pos:position pos:line="18" pos:column="86"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="87"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="88"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="19" pos:column="25">exit_cleanup<pos:position pos:line="19" pos:column="37"/></name><argument_list pos:line="19" pos:column="37">(<argument><expr><name pos:line="19" pos:column="38">RERR_UNSUPPORTED<pos:position pos:line="19" pos:column="54"/></name></expr></argument>)<pos:position pos:line="19" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="56"/></expr_stmt>
		}<pos:position pos:line="20" pos:column="18"/></block></then></if>

		<expr_stmt><expr><name pos:line="22" pos:column="17">n<pos:position pos:line="22" pos:column="18"/></name> <operator pos:line="22" pos:column="19">=<pos:position pos:line="22" pos:column="20"/></operator> <name pos:line="22" pos:column="21">len<pos:position pos:line="22" pos:column="24"/></name> <operator pos:line="22" pos:column="25">=<pos:position pos:line="22" pos:column="26"/></operator> <name><name pos:line="22" pos:column="27">outbuf<pos:position pos:line="22" pos:column="33"/></name><operator pos:line="22" pos:column="33">.<pos:position pos:line="22" pos:column="34"/></operator><name pos:line="22" pos:column="34">len<pos:position pos:line="22" pos:column="37"/></name></name></expr>;<pos:position pos:line="22" pos:column="38"/></expr_stmt>
	}<pos:position pos:line="23" pos:column="10"/></block></then> <elseif pos:line="23" pos:column="11">else
<cpp:endif pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">endif<pos:position pos:line="24" pos:column="7"/></cpp:directive></cpp:endif>
	<if pos:line="25" pos:column="9">if <condition pos:line="25" pos:column="12">(<expr><name pos:line="25" pos:column="13">n<pos:position pos:line="25" pos:column="14"/></name> <operator pos:line="25" pos:column="15">&gt;<pos:position pos:line="25" pos:column="19"/></operator> <literal type="number" pos:line="25" pos:column="17">1024<pos:position pos:line="25" pos:column="21"/></literal> <operator pos:line="25" pos:column="22">-<pos:position pos:line="25" pos:column="23"/></operator> <literal type="number" pos:line="25" pos:column="24">4<pos:position pos:line="25" pos:column="25"/></literal></expr>)<pos:position pos:line="25" pos:column="26"/></condition><then pos:line="25" pos:column="26"> <comment type="block" pos:line="25" pos:column="27">/* BIGPATHBUFLEN can handle 1024 bytes */</comment>
		<block type="pseudo"><expr_stmt><expr><name pos:line="26" pos:column="17">n<pos:position pos:line="26" pos:column="18"/></name> <operator pos:line="26" pos:column="19">=<pos:position pos:line="26" pos:column="20"/></operator> <literal type="number" pos:line="26" pos:column="21">0<pos:position pos:line="26" pos:column="22"/></literal></expr>;<pos:position pos:line="26" pos:column="23"/></expr_stmt></block></then></if></elseif>    <comment type="block" pos:line="26" pos:column="27">/* We'd rather do 2 writes than too much memcpy(). */</comment>
	<else pos:line="27" pos:column="9">else
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="28" pos:column="17">memcpy<pos:position pos:line="28" pos:column="23"/></name><argument_list pos:line="28" pos:column="23">(<argument><expr><name pos:line="28" pos:column="24">buffer<pos:position pos:line="28" pos:column="30"/></name> <operator pos:line="28" pos:column="31">+<pos:position pos:line="28" pos:column="32"/></operator> <literal type="number" pos:line="28" pos:column="33">4<pos:position pos:line="28" pos:column="34"/></literal></expr></argument>, <argument><expr><name pos:line="28" pos:column="36">buf<pos:position pos:line="28" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="41">n<pos:position pos:line="28" pos:column="42"/></name></expr></argument>)<pos:position pos:line="28" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="44"/></expr_stmt></block></else></if>

	<expr_stmt><expr><call><name pos:line="30" pos:column="9">SIVAL<pos:position pos:line="30" pos:column="14"/></name><argument_list pos:line="30" pos:column="14">(<argument><expr><name pos:line="30" pos:column="15">buffer<pos:position pos:line="30" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="30" pos:column="23">0<pos:position pos:line="30" pos:column="24"/></literal></expr></argument>, <argument><expr><operator pos:line="30" pos:column="26">(<pos:position pos:line="30" pos:column="27"/></operator><operator pos:line="30" pos:column="27">(<pos:position pos:line="30" pos:column="28"/></operator><name pos:line="30" pos:column="28">MPLEX_BASE<pos:position pos:line="30" pos:column="38"/></name> <operator pos:line="30" pos:column="39">+<pos:position pos:line="30" pos:column="40"/></operator> <operator pos:line="30" pos:column="41">(<pos:position pos:line="30" pos:column="42"/></operator><name pos:line="30" pos:column="42">int<pos:position pos:line="30" pos:column="45"/></name><operator pos:line="30" pos:column="45">)<pos:position pos:line="30" pos:column="46"/></operator><name pos:line="30" pos:column="46">code<pos:position pos:line="30" pos:column="50"/></name><operator pos:line="30" pos:column="50">)<pos:position pos:line="30" pos:column="51"/></operator><operator pos:line="30" pos:column="51">&lt;&lt;<pos:position pos:line="30" pos:column="59"/></operator><literal type="number" pos:line="30" pos:column="53">24<pos:position pos:line="30" pos:column="55"/></literal><operator pos:line="30" pos:column="55">)<pos:position pos:line="30" pos:column="56"/></operator> <operator pos:line="30" pos:column="57">+<pos:position pos:line="30" pos:column="58"/></operator> <name pos:line="30" pos:column="59">len<pos:position pos:line="30" pos:column="62"/></name></expr></argument>)<pos:position pos:line="30" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="64"/></expr_stmt>

	<expr_stmt><expr><name pos:line="32" pos:column="9">keep_defer_forwarding<pos:position pos:line="32" pos:column="30"/></name><operator pos:line="32" pos:column="30">++<pos:position pos:line="32" pos:column="32"/></operator></expr>;<pos:position pos:line="32" pos:column="33"/></expr_stmt> <comment type="block" pos:line="32" pos:column="34">/* defer_forwarding_messages++ on return */</comment>
	<expr_stmt><expr><call><name pos:line="33" pos:column="9">writefd_unbuffered<pos:position pos:line="33" pos:column="27"/></name><argument_list pos:line="33" pos:column="27">(<argument><expr><name pos:line="33" pos:column="28">fd<pos:position pos:line="33" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="32">buffer<pos:position pos:line="33" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="40">n<pos:position pos:line="33" pos:column="41"/></name><operator pos:line="33" pos:column="41">+<pos:position pos:line="33" pos:column="42"/></operator><literal type="number" pos:line="33" pos:column="42">4<pos:position pos:line="33" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="45"/></expr_stmt>
	<expr_stmt><expr><name pos:line="34" pos:column="9">keep_defer_forwarding<pos:position pos:line="34" pos:column="30"/></name><operator pos:line="34" pos:column="30">--<pos:position pos:line="34" pos:column="32"/></operator></expr>;<pos:position pos:line="34" pos:column="33"/></expr_stmt>

	<if pos:line="36" pos:column="9">if <condition pos:line="36" pos:column="12">(<expr><name pos:line="36" pos:column="13">len<pos:position pos:line="36" pos:column="16"/></name> <operator pos:line="36" pos:column="17">&gt;<pos:position pos:line="36" pos:column="21"/></operator> <name pos:line="36" pos:column="19">n<pos:position pos:line="36" pos:column="20"/></name></expr>)<pos:position pos:line="36" pos:column="21"/></condition><then pos:line="36" pos:column="21">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="37" pos:column="17">writefd_unbuffered<pos:position pos:line="37" pos:column="35"/></name><argument_list pos:line="37" pos:column="35">(<argument><expr><name pos:line="37" pos:column="36">fd<pos:position pos:line="37" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="40">buf<pos:position pos:line="37" pos:column="43"/></name><operator pos:line="37" pos:column="43">+<pos:position pos:line="37" pos:column="44"/></operator><name pos:line="37" pos:column="44">n<pos:position pos:line="37" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="47">len<pos:position pos:line="37" pos:column="50"/></name><operator pos:line="37" pos:column="50">-<pos:position pos:line="37" pos:column="51"/></operator><name pos:line="37" pos:column="51">n<pos:position pos:line="37" pos:column="52"/></name></expr></argument>)<pos:position pos:line="37" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="54"/></expr_stmt></block></then></if>

	<if pos:line="39" pos:column="9">if <condition pos:line="39" pos:column="12">(<expr><operator pos:line="39" pos:column="13">!<pos:position pos:line="39" pos:column="14"/></operator><operator pos:line="39" pos:column="14">--<pos:position pos:line="39" pos:column="16"/></operator><name pos:line="39" pos:column="16">defer_forwarding_messages<pos:position pos:line="39" pos:column="41"/></name> <operator pos:line="39" pos:column="42">&amp;&amp;<pos:position pos:line="39" pos:column="52"/></operator> <operator pos:line="39" pos:column="45">!<pos:position pos:line="39" pos:column="46"/></operator><name pos:line="39" pos:column="46">no_flush<pos:position pos:line="39" pos:column="54"/></name></expr>)<pos:position pos:line="39" pos:column="55"/></condition><then pos:line="39" pos:column="55">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="40" pos:column="17">msg_flush<pos:position pos:line="40" pos:column="26"/></name><argument_list pos:line="40" pos:column="26">()<pos:position pos:line="40" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="29"/></expr_stmt></block></then></if>
}<pos:position pos:line="41" pos:column="2"/></block></function></unit>
