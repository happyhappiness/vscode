<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_165_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int64<pos:position pos:line="1" pos:column="6"/></name></type> <name pos:line="1" pos:column="7">read_varlong<pos:position pos:line="1" pos:column="19"/></name><parameter_list pos:line="1" pos:column="19">(<parameter><decl><type><name pos:line="1" pos:column="20">int<pos:position pos:line="1" pos:column="23"/></name></type> <name pos:line="1" pos:column="24">f<pos:position pos:line="1" pos:column="25"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="27">uchar<pos:position pos:line="1" pos:column="32"/></name></type> <name pos:line="1" pos:column="33">min_bytes<pos:position pos:line="1" pos:column="42"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="43"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<union pos:line="3" pos:column="9">union <block pos:line="3" pos:column="15">{<public type="default" pos:line="3" pos:column="16">
		<decl_stmt><decl><type><name pos:line="4" pos:column="17">char<pos:position pos:line="4" pos:column="21"/></name></type> <name><name pos:line="4" pos:column="22">b<pos:position pos:line="4" pos:column="23"/></name><index pos:line="4" pos:column="23">[<expr><literal type="number" pos:line="4" pos:column="24">9<pos:position pos:line="4" pos:column="25"/></literal></expr>]<pos:position pos:line="4" pos:column="26"/></index></name></decl>;<pos:position pos:line="4" pos:column="27"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="5" pos:column="17">int64<pos:position pos:line="5" pos:column="22"/></name></type> <name pos:line="5" pos:column="23">x<pos:position pos:line="5" pos:column="24"/></name></decl>;<pos:position pos:line="5" pos:column="25"/></decl_stmt>
	<pos:position pos:line="6" pos:column="2"/></public>}<pos:position pos:line="6" pos:column="10"/></block> <decl><name pos:line="6" pos:column="11">u<pos:position pos:line="6" pos:column="12"/></name></decl>;<pos:position pos:line="6" pos:column="13"/></union>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">char<pos:position pos:line="7" pos:column="13"/></name></type> <name><name pos:line="7" pos:column="14">b2<pos:position pos:line="7" pos:column="16"/></name><index pos:line="7" pos:column="16">[<expr><literal type="number" pos:line="7" pos:column="17">8<pos:position pos:line="7" pos:column="18"/></literal></expr>]<pos:position pos:line="7" pos:column="19"/></index></name></decl>;<pos:position pos:line="7" pos:column="20"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">int<pos:position pos:line="8" pos:column="12"/></name></type> <name pos:line="8" pos:column="13">extra<pos:position pos:line="8" pos:column="18"/></name></decl>;<pos:position pos:line="8" pos:column="19"/></decl_stmt>

<cpp:if pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">if<pos:position pos:line="10" pos:column="4"/></cpp:directive> <expr><name pos:line="10" pos:column="5">SIZEOF_INT64<pos:position pos:line="10" pos:column="17"/></name> <operator pos:line="10" pos:column="18">&lt;<pos:position pos:line="10" pos:column="22"/></operator> <literal type="number" pos:line="10" pos:column="20">8<pos:position pos:line="10" pos:column="21"/></literal></expr></cpp:if>
	<expr_stmt><expr><call><name pos:line="11" pos:column="9">memset<pos:position pos:line="11" pos:column="15"/></name><argument_list pos:line="11" pos:column="15">(<argument><expr><name><name pos:line="11" pos:column="16">u<pos:position pos:line="11" pos:column="17"/></name><operator pos:line="11" pos:column="17">.<pos:position pos:line="11" pos:column="18"/></operator><name pos:line="11" pos:column="18">b<pos:position pos:line="11" pos:column="19"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="11" pos:column="21">0<pos:position pos:line="11" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="11" pos:column="24">8<pos:position pos:line="11" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="27"/></expr_stmt>
<cpp:else pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">else<pos:position pos:line="12" pos:column="6"/></cpp:directive></cpp:else>
	<expr_stmt><expr><name><name pos:line="13" pos:column="9">u<pos:position pos:line="13" pos:column="10"/></name><operator pos:line="13" pos:column="10">.<pos:position pos:line="13" pos:column="11"/></operator><name pos:line="13" pos:column="11">x<pos:position pos:line="13" pos:column="12"/></name></name> <operator pos:line="13" pos:column="13">=<pos:position pos:line="13" pos:column="14"/></operator> <literal type="number" pos:line="13" pos:column="15">0<pos:position pos:line="13" pos:column="16"/></literal></expr>;<pos:position pos:line="13" pos:column="17"/></expr_stmt>
<cpp:endif pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">endif<pos:position pos:line="14" pos:column="7"/></cpp:directive></cpp:endif>
	<expr_stmt><expr><call><name pos:line="15" pos:column="9">read_buf<pos:position pos:line="15" pos:column="17"/></name><argument_list pos:line="15" pos:column="17">(<argument><expr><name pos:line="15" pos:column="18">f<pos:position pos:line="15" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="21">b2<pos:position pos:line="15" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="25">min_bytes<pos:position pos:line="15" pos:column="34"/></name></expr></argument>)<pos:position pos:line="15" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="36"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="16" pos:column="9">memcpy<pos:position pos:line="16" pos:column="15"/></name><argument_list pos:line="16" pos:column="15">(<argument><expr><name><name pos:line="16" pos:column="16">u<pos:position pos:line="16" pos:column="17"/></name><operator pos:line="16" pos:column="17">.<pos:position pos:line="16" pos:column="18"/></operator><name pos:line="16" pos:column="18">b<pos:position pos:line="16" pos:column="19"/></name></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="21">b2<pos:position pos:line="16" pos:column="23"/></name><operator pos:line="16" pos:column="23">+<pos:position pos:line="16" pos:column="24"/></operator><literal type="number" pos:line="16" pos:column="24">1<pos:position pos:line="16" pos:column="25"/></literal></expr></argument>, <argument><expr><name pos:line="16" pos:column="27">min_bytes<pos:position pos:line="16" pos:column="36"/></name><operator pos:line="16" pos:column="36">-<pos:position pos:line="16" pos:column="37"/></operator><literal type="number" pos:line="16" pos:column="37">1<pos:position pos:line="16" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="40"/></expr_stmt>
	<expr_stmt><expr><name pos:line="17" pos:column="9">extra<pos:position pos:line="17" pos:column="14"/></name> <operator pos:line="17" pos:column="15">=<pos:position pos:line="17" pos:column="16"/></operator> <name><name pos:line="17" pos:column="17">int_byte_extra<pos:position pos:line="17" pos:column="31"/></name><index pos:line="17" pos:column="31">[<expr><call><name pos:line="17" pos:column="32">CVAL<pos:position pos:line="17" pos:column="36"/></name><argument_list pos:line="17" pos:column="36">(<argument><expr><name pos:line="17" pos:column="37">b2<pos:position pos:line="17" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="17" pos:column="41">0<pos:position pos:line="17" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="43"/></argument_list></call> <operator pos:line="17" pos:column="44">/<pos:position pos:line="17" pos:column="45"/></operator> <literal type="number" pos:line="17" pos:column="46">4<pos:position pos:line="17" pos:column="47"/></literal></expr>]<pos:position pos:line="17" pos:column="48"/></index></name></expr>;<pos:position pos:line="17" pos:column="49"/></expr_stmt>
	<if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><name pos:line="18" pos:column="13">extra<pos:position pos:line="18" pos:column="18"/></name></expr>)<pos:position pos:line="18" pos:column="19"/></condition><then pos:line="18" pos:column="19"> <block pos:line="18" pos:column="20">{
		<decl_stmt><decl><type><name pos:line="19" pos:column="17">uchar<pos:position pos:line="19" pos:column="22"/></name></type> <name pos:line="19" pos:column="23">bit<pos:position pos:line="19" pos:column="26"/></name> <init pos:line="19" pos:column="27">= <expr><operator pos:line="19" pos:column="29">(<pos:position pos:line="19" pos:column="30"/></operator><operator pos:line="19" pos:column="30">(<pos:position pos:line="19" pos:column="31"/></operator><name pos:line="19" pos:column="31">uchar<pos:position pos:line="19" pos:column="36"/></name><operator pos:line="19" pos:column="36">)<pos:position pos:line="19" pos:column="37"/></operator><literal type="number" pos:line="19" pos:column="37">1<pos:position pos:line="19" pos:column="38"/></literal><operator pos:line="19" pos:column="38">&lt;&lt;<pos:position pos:line="19" pos:column="46"/></operator><operator pos:line="19" pos:column="40">(<pos:position pos:line="19" pos:column="41"/></operator><literal type="number" pos:line="19" pos:column="41">8<pos:position pos:line="19" pos:column="42"/></literal><operator pos:line="19" pos:column="42">-<pos:position pos:line="19" pos:column="43"/></operator><name pos:line="19" pos:column="43">extra<pos:position pos:line="19" pos:column="48"/></name><operator pos:line="19" pos:column="48">)<pos:position pos:line="19" pos:column="49"/></operator><operator pos:line="19" pos:column="49">)<pos:position pos:line="19" pos:column="50"/></operator></expr></init></decl>;<pos:position pos:line="19" pos:column="51"/></decl_stmt>
		<if pos:line="20" pos:column="17">if <condition pos:line="20" pos:column="20">(<expr><name pos:line="20" pos:column="21">min_bytes<pos:position pos:line="20" pos:column="30"/></name> <operator pos:line="20" pos:column="31">+<pos:position pos:line="20" pos:column="32"/></operator> <name pos:line="20" pos:column="33">extra<pos:position pos:line="20" pos:column="38"/></name> <operator pos:line="20" pos:column="39">&gt;<pos:position pos:line="20" pos:column="43"/></operator> <operator pos:line="20" pos:column="41">(<pos:position pos:line="20" pos:column="42"/></operator><name pos:line="20" pos:column="42">int<pos:position pos:line="20" pos:column="45"/></name><operator pos:line="20" pos:column="45">)<pos:position pos:line="20" pos:column="46"/></operator><sizeof pos:line="20" pos:column="46">sizeof <name><name pos:line="20" pos:column="53">u<pos:position pos:line="20" pos:column="54"/></name><operator pos:line="20" pos:column="54">.<pos:position pos:line="20" pos:column="55"/></operator><name pos:line="20" pos:column="55">b<pos:position pos:line="20" pos:column="56"/></name></name></sizeof></expr>)<pos:position pos:line="20" pos:column="57"/></condition><then pos:line="20" pos:column="57"> <block pos:line="20" pos:column="58">{
			<expr_stmt><expr><call><name pos:line="21" pos:column="25">rprintf<pos:position pos:line="21" pos:column="32"/></name><argument_list pos:line="21" pos:column="32">(<argument><expr><name pos:line="21" pos:column="33">FERROR<pos:position pos:line="21" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="21" pos:column="41">"Overflow in read_varlong()\n"<pos:position pos:line="21" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="73"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="22" pos:column="25">exit_cleanup<pos:position pos:line="22" pos:column="37"/></name><argument_list pos:line="22" pos:column="37">(<argument><expr><name pos:line="22" pos:column="38">RERR_STREAMIO<pos:position pos:line="22" pos:column="51"/></name></expr></argument>)<pos:position pos:line="22" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="53"/></expr_stmt>
		}<pos:position pos:line="23" pos:column="18"/></block></then></if>
		<expr_stmt><expr><call><name pos:line="24" pos:column="17">read_buf<pos:position pos:line="24" pos:column="25"/></name><argument_list pos:line="24" pos:column="25">(<argument><expr><name pos:line="24" pos:column="26">f<pos:position pos:line="24" pos:column="27"/></name></expr></argument>, <argument><expr><name><name pos:line="24" pos:column="29">u<pos:position pos:line="24" pos:column="30"/></name><operator pos:line="24" pos:column="30">.<pos:position pos:line="24" pos:column="31"/></operator><name pos:line="24" pos:column="31">b<pos:position pos:line="24" pos:column="32"/></name></name> <operator pos:line="24" pos:column="33">+<pos:position pos:line="24" pos:column="34"/></operator> <name pos:line="24" pos:column="35">min_bytes<pos:position pos:line="24" pos:column="44"/></name> <operator pos:line="24" pos:column="45">-<pos:position pos:line="24" pos:column="46"/></operator> <literal type="number" pos:line="24" pos:column="47">1<pos:position pos:line="24" pos:column="48"/></literal></expr></argument>, <argument><expr><name pos:line="24" pos:column="50">extra<pos:position pos:line="24" pos:column="55"/></name></expr></argument>)<pos:position pos:line="24" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="57"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="25" pos:column="17">u<pos:position pos:line="25" pos:column="18"/></name><operator pos:line="25" pos:column="18">.<pos:position pos:line="25" pos:column="19"/></operator><name pos:line="25" pos:column="19">b<pos:position pos:line="25" pos:column="20"/></name><index pos:line="25" pos:column="20">[<expr><name pos:line="25" pos:column="21">min_bytes<pos:position pos:line="25" pos:column="30"/></name> <operator pos:line="25" pos:column="31">+<pos:position pos:line="25" pos:column="32"/></operator> <name pos:line="25" pos:column="33">extra<pos:position pos:line="25" pos:column="38"/></name> <operator pos:line="25" pos:column="39">-<pos:position pos:line="25" pos:column="40"/></operator> <literal type="number" pos:line="25" pos:column="41">1<pos:position pos:line="25" pos:column="42"/></literal></expr>]<pos:position pos:line="25" pos:column="43"/></index></name> <operator pos:line="25" pos:column="44">=<pos:position pos:line="25" pos:column="45"/></operator> <call><name pos:line="25" pos:column="46">CVAL<pos:position pos:line="25" pos:column="50"/></name><argument_list pos:line="25" pos:column="50">(<argument><expr><name pos:line="25" pos:column="51">b2<pos:position pos:line="25" pos:column="53"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="25" pos:column="55">0<pos:position pos:line="25" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="57"/></argument_list></call> <operator pos:line="25" pos:column="58">&amp;<pos:position pos:line="25" pos:column="63"/></operator> <operator pos:line="25" pos:column="60">(<pos:position pos:line="25" pos:column="61"/></operator><name pos:line="25" pos:column="61">bit<pos:position pos:line="25" pos:column="64"/></name><operator pos:line="25" pos:column="64">-<pos:position pos:line="25" pos:column="65"/></operator><literal type="number" pos:line="25" pos:column="65">1<pos:position pos:line="25" pos:column="66"/></literal><operator pos:line="25" pos:column="66">)<pos:position pos:line="25" pos:column="67"/></operator></expr>;<pos:position pos:line="25" pos:column="68"/></expr_stmt>
<cpp:if pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">if<pos:position pos:line="26" pos:column="4"/></cpp:directive> <expr><name pos:line="26" pos:column="5">SIZEOF_INT64<pos:position pos:line="26" pos:column="17"/></name> <operator pos:line="26" pos:column="18">&lt;<pos:position pos:line="26" pos:column="22"/></operator> <literal type="number" pos:line="26" pos:column="20">8<pos:position pos:line="26" pos:column="21"/></literal></expr></cpp:if>
		<if pos:line="27" pos:column="17">if <condition pos:line="27" pos:column="20">(<expr><name pos:line="27" pos:column="21">min_bytes<pos:position pos:line="27" pos:column="30"/></name> <operator pos:line="27" pos:column="31">+<pos:position pos:line="27" pos:column="32"/></operator> <name pos:line="27" pos:column="33">extra<pos:position pos:line="27" pos:column="38"/></name> <operator pos:line="27" pos:column="39">&gt;<pos:position pos:line="27" pos:column="43"/></operator> <literal type="number" pos:line="27" pos:column="41">5<pos:position pos:line="27" pos:column="42"/></literal> <operator pos:line="27" pos:column="43">||<pos:position pos:line="27" pos:column="45"/></operator> <name><name pos:line="27" pos:column="46">u<pos:position pos:line="27" pos:column="47"/></name><operator pos:line="27" pos:column="47">.<pos:position pos:line="27" pos:column="48"/></operator><name pos:line="27" pos:column="48">b<pos:position pos:line="27" pos:column="49"/></name><index pos:line="27" pos:column="49">[<expr><literal type="number" pos:line="27" pos:column="50">4<pos:position pos:line="27" pos:column="51"/></literal></expr>]<pos:position pos:line="27" pos:column="52"/></index></name> <operator pos:line="27" pos:column="53">||<pos:position pos:line="27" pos:column="55"/></operator> <call><name pos:line="27" pos:column="56">CVAL<pos:position pos:line="27" pos:column="60"/></name><argument_list pos:line="27" pos:column="60">(<argument><expr><name><name pos:line="27" pos:column="61">u<pos:position pos:line="27" pos:column="62"/></name><operator pos:line="27" pos:column="62">.<pos:position pos:line="27" pos:column="63"/></operator><name pos:line="27" pos:column="63">b<pos:position pos:line="27" pos:column="64"/></name></name></expr></argument>,<argument><expr><literal type="number" pos:line="27" pos:column="65">3<pos:position pos:line="27" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="67"/></argument_list></call> <operator pos:line="27" pos:column="68">&amp;<pos:position pos:line="27" pos:column="73"/></operator> <literal type="number" pos:line="27" pos:column="70">0x80<pos:position pos:line="27" pos:column="74"/></literal></expr>)<pos:position pos:line="27" pos:column="75"/></condition><then pos:line="27" pos:column="75"> <block pos:line="27" pos:column="76">{
			<expr_stmt><expr><call><name pos:line="28" pos:column="25">rprintf<pos:position pos:line="28" pos:column="32"/></name><argument_list pos:line="28" pos:column="32">(<argument><expr><name pos:line="28" pos:column="33">FERROR<pos:position pos:line="28" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="28" pos:column="41">"Integer overflow: attempted 64-bit offset\n"<pos:position pos:line="28" pos:column="86"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="87"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="88"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="29" pos:column="25">exit_cleanup<pos:position pos:line="29" pos:column="37"/></name><argument_list pos:line="29" pos:column="37">(<argument><expr><name pos:line="29" pos:column="38">RERR_UNSUPPORTED<pos:position pos:line="29" pos:column="54"/></name></expr></argument>)<pos:position pos:line="29" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="56"/></expr_stmt>
		}<pos:position pos:line="30" pos:column="18"/></block></then></if>
<cpp:endif pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">endif<pos:position pos:line="31" pos:column="7"/></cpp:directive></cpp:endif>
	}<pos:position pos:line="32" pos:column="10"/></block></then> <else pos:line="32" pos:column="11">else
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="33" pos:column="17">u<pos:position pos:line="33" pos:column="18"/></name><operator pos:line="33" pos:column="18">.<pos:position pos:line="33" pos:column="19"/></operator><name pos:line="33" pos:column="19">b<pos:position pos:line="33" pos:column="20"/></name><index pos:line="33" pos:column="20">[<expr><name pos:line="33" pos:column="21">min_bytes<pos:position pos:line="33" pos:column="30"/></name> <operator pos:line="33" pos:column="31">+<pos:position pos:line="33" pos:column="32"/></operator> <name pos:line="33" pos:column="33">extra<pos:position pos:line="33" pos:column="38"/></name> <operator pos:line="33" pos:column="39">-<pos:position pos:line="33" pos:column="40"/></operator> <literal type="number" pos:line="33" pos:column="41">1<pos:position pos:line="33" pos:column="42"/></literal></expr>]<pos:position pos:line="33" pos:column="43"/></index></name> <operator pos:line="33" pos:column="44">=<pos:position pos:line="33" pos:column="45"/></operator> <call><name pos:line="33" pos:column="46">CVAL<pos:position pos:line="33" pos:column="50"/></name><argument_list pos:line="33" pos:column="50">(<argument><expr><name pos:line="33" pos:column="51">b2<pos:position pos:line="33" pos:column="53"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="33" pos:column="55">0<pos:position pos:line="33" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="58"/></expr_stmt></block></else></if>
<cpp:if pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">if<pos:position pos:line="34" pos:column="4"/></cpp:directive> <expr><name pos:line="34" pos:column="5">SIZEOF_INT64<pos:position pos:line="34" pos:column="17"/></name> <operator pos:line="34" pos:column="18">&lt;<pos:position pos:line="34" pos:column="22"/></operator> <literal type="number" pos:line="34" pos:column="20">8<pos:position pos:line="34" pos:column="21"/></literal></expr></cpp:if>
	<expr_stmt><expr><name><name pos:line="35" pos:column="9">u<pos:position pos:line="35" pos:column="10"/></name><operator pos:line="35" pos:column="10">.<pos:position pos:line="35" pos:column="11"/></operator><name pos:line="35" pos:column="11">x<pos:position pos:line="35" pos:column="12"/></name></name> <operator pos:line="35" pos:column="13">=<pos:position pos:line="35" pos:column="14"/></operator> <call><name pos:line="35" pos:column="15">IVAL<pos:position pos:line="35" pos:column="19"/></name><argument_list pos:line="35" pos:column="19">(<argument><expr><name><name pos:line="35" pos:column="20">u<pos:position pos:line="35" pos:column="21"/></name><operator pos:line="35" pos:column="21">.<pos:position pos:line="35" pos:column="22"/></operator><name pos:line="35" pos:column="22">b<pos:position pos:line="35" pos:column="23"/></name></name></expr></argument>,<argument><expr><literal type="number" pos:line="35" pos:column="24">0<pos:position pos:line="35" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="27"/></expr_stmt>
<cpp:elif pos:line="36" pos:column="1">#<cpp:directive pos:line="36" pos:column="2">elif<pos:position pos:line="36" pos:column="6"/></cpp:directive> <expr><name pos:line="36" pos:column="7">CAREFUL_ALIGNMENT<pos:position pos:line="36" pos:column="24"/></name></expr></cpp:elif>
	<expr_stmt><expr><name><name pos:line="37" pos:column="9">u<pos:position pos:line="37" pos:column="10"/></name><operator pos:line="37" pos:column="10">.<pos:position pos:line="37" pos:column="11"/></operator><name pos:line="37" pos:column="11">x<pos:position pos:line="37" pos:column="12"/></name></name> <operator pos:line="37" pos:column="13">=<pos:position pos:line="37" pos:column="14"/></operator> <call><name pos:line="37" pos:column="15">IVAL64<pos:position pos:line="37" pos:column="21"/></name><argument_list pos:line="37" pos:column="21">(<argument><expr><name><name pos:line="37" pos:column="22">u<pos:position pos:line="37" pos:column="23"/></name><operator pos:line="37" pos:column="23">.<pos:position pos:line="37" pos:column="24"/></operator><name pos:line="37" pos:column="24">b<pos:position pos:line="37" pos:column="25"/></name></name></expr></argument>,<argument><expr><literal type="number" pos:line="37" pos:column="26">0<pos:position pos:line="37" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="29"/></expr_stmt>
<cpp:endif pos:line="38" pos:column="1">#<cpp:directive pos:line="38" pos:column="2">endif<pos:position pos:line="38" pos:column="7"/></cpp:directive></cpp:endif>
	<return pos:line="39" pos:column="9">return <expr><name><name pos:line="39" pos:column="16">u<pos:position pos:line="39" pos:column="17"/></name><operator pos:line="39" pos:column="17">.<pos:position pos:line="39" pos:column="18"/></operator><name pos:line="39" pos:column="18">x<pos:position pos:line="39" pos:column="19"/></name></name></expr>;<pos:position pos:line="39" pos:column="20"/></return>
}<pos:position pos:line="40" pos:column="2"/></block></function></unit>
