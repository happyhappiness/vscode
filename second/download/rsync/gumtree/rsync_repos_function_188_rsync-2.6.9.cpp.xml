<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_188_rsync-2.6.9.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">send_files<pos:position pos:line="1" pos:column="16"/></name><parameter_list pos:line="1" pos:column="16">(<parameter><decl><type><name><name pos:line="1" pos:column="17">struct<pos:position pos:line="1" pos:column="23"/></name> <name pos:line="1" pos:column="24">file_list<pos:position pos:line="1" pos:column="33"/></name></name> <modifier pos:line="1" pos:column="34">*<pos:position pos:line="1" pos:column="35"/></modifier></type><name pos:line="1" pos:column="35">flist<pos:position pos:line="1" pos:column="40"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="42">int<pos:position pos:line="1" pos:column="45"/></name></type> <name pos:line="1" pos:column="46">f_out<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="53">int<pos:position pos:line="1" pos:column="56"/></name></type> <name pos:line="1" pos:column="57">f_in<pos:position pos:line="1" pos:column="61"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="62"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">fd<pos:position pos:line="3" pos:column="15"/></name> <init pos:line="3" pos:column="16">= <expr><operator pos:line="3" pos:column="18">-<pos:position pos:line="3" pos:column="19"/></operator><literal type="number" pos:line="3" pos:column="19">1<pos:position pos:line="3" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="21"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">sum_struct<pos:position pos:line="4" pos:column="26"/></name></name> <modifier pos:line="4" pos:column="27">*<pos:position pos:line="4" pos:column="28"/></modifier></type><name pos:line="4" pos:column="28">s<pos:position pos:line="4" pos:column="29"/></name></decl>;<pos:position pos:line="4" pos:column="30"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">map_struct<pos:position pos:line="5" pos:column="26"/></name></name> <modifier pos:line="5" pos:column="27">*<pos:position pos:line="5" pos:column="28"/></modifier></type><name pos:line="5" pos:column="28">mbuf<pos:position pos:line="5" pos:column="32"/></name> <init pos:line="5" pos:column="33">= <expr><name pos:line="5" pos:column="35">NULL<pos:position pos:line="5" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="40"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">STRUCT_STAT<pos:position pos:line="6" pos:column="20"/></name></type> <name pos:line="6" pos:column="21">st<pos:position pos:line="6" pos:column="23"/></name></decl>;<pos:position pos:line="6" pos:column="24"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">char<pos:position pos:line="7" pos:column="13"/></name> <modifier pos:line="7" pos:column="14">*<pos:position pos:line="7" pos:column="15"/></modifier></type><name pos:line="7" pos:column="15">fname2<pos:position pos:line="7" pos:column="21"/></name></decl>, <decl><type ref="prev"/><name><name pos:line="7" pos:column="23">fname<pos:position pos:line="7" pos:column="28"/></name><index pos:line="7" pos:column="28">[<expr><name pos:line="7" pos:column="29">MAXPATHLEN<pos:position pos:line="7" pos:column="39"/></name></expr>]<pos:position pos:line="7" pos:column="40"/></index></name></decl>;<pos:position pos:line="7" pos:column="41"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">char<pos:position pos:line="8" pos:column="13"/></name></type> <name><name pos:line="8" pos:column="14">xname<pos:position pos:line="8" pos:column="19"/></name><index pos:line="8" pos:column="19">[<expr><name pos:line="8" pos:column="20">MAXPATHLEN<pos:position pos:line="8" pos:column="30"/></name></expr>]<pos:position pos:line="8" pos:column="31"/></index></name></decl>;<pos:position pos:line="8" pos:column="32"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="9" pos:column="9">uchar<pos:position pos:line="9" pos:column="14"/></name></type> <name pos:line="9" pos:column="15">fnamecmp_type<pos:position pos:line="9" pos:column="28"/></name></decl>;<pos:position pos:line="9" pos:column="29"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="10" pos:column="9">int<pos:position pos:line="10" pos:column="12"/></name></type> <name pos:line="10" pos:column="13">iflags<pos:position pos:line="10" pos:column="19"/></name></decl>, <decl><type ref="prev"/><name pos:line="10" pos:column="21">xlen<pos:position pos:line="10" pos:column="25"/></name></decl>;<pos:position pos:line="10" pos:column="26"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="11" pos:column="9">struct<pos:position pos:line="11" pos:column="15"/></name> <name pos:line="11" pos:column="16">file_struct<pos:position pos:line="11" pos:column="27"/></name></name> <modifier pos:line="11" pos:column="28">*<pos:position pos:line="11" pos:column="29"/></modifier></type><name pos:line="11" pos:column="29">file<pos:position pos:line="11" pos:column="33"/></name></decl>;<pos:position pos:line="11" pos:column="34"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="12" pos:column="9">int<pos:position pos:line="12" pos:column="12"/></name></type> <name pos:line="12" pos:column="13">phase<pos:position pos:line="12" pos:column="18"/></name> <init pos:line="12" pos:column="19">= <expr><literal type="number" pos:line="12" pos:column="21">0<pos:position pos:line="12" pos:column="22"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="12" pos:column="24">max_phase<pos:position pos:line="12" pos:column="33"/></name> <init pos:line="12" pos:column="34">= <expr><ternary><condition><expr><name pos:line="12" pos:column="36">protocol_version<pos:position pos:line="12" pos:column="52"/></name> <operator pos:line="12" pos:column="53">&gt;=<pos:position pos:line="12" pos:column="58"/></operator> <literal type="number" pos:line="12" pos:column="56">29<pos:position pos:line="12" pos:column="58"/></literal></expr> ?<pos:position pos:line="12" pos:column="60"/></condition><then pos:line="12" pos:column="60"> <expr><literal type="number" pos:line="12" pos:column="61">2<pos:position pos:line="12" pos:column="62"/></literal></expr> <pos:position pos:line="12" pos:column="63"/></then><else pos:line="12" pos:column="63">: <expr><literal type="number" pos:line="12" pos:column="65">1<pos:position pos:line="12" pos:column="66"/></literal></expr></else></ternary></expr></init></decl>;<pos:position pos:line="12" pos:column="67"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="13" pos:column="9">struct<pos:position pos:line="13" pos:column="15"/></name> <name pos:line="13" pos:column="16">stats<pos:position pos:line="13" pos:column="21"/></name></name></type> <name pos:line="13" pos:column="22">initial_stats<pos:position pos:line="13" pos:column="35"/></name></decl>;<pos:position pos:line="13" pos:column="36"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="14" pos:column="9">int<pos:position pos:line="14" pos:column="12"/></name></type> <name pos:line="14" pos:column="13">save_make_backups<pos:position pos:line="14" pos:column="30"/></name> <init pos:line="14" pos:column="31">= <expr><name pos:line="14" pos:column="33">make_backups<pos:position pos:line="14" pos:column="45"/></name></expr></init></decl>;<pos:position pos:line="14" pos:column="46"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="15" pos:column="9">int<pos:position pos:line="15" pos:column="12"/></name></type> <name pos:line="15" pos:column="13">itemizing<pos:position pos:line="15" pos:column="22"/></name> <init pos:line="15" pos:column="23">= <expr><ternary><condition><expr><name pos:line="15" pos:column="25">am_server<pos:position pos:line="15" pos:column="34"/></name></expr> ?<pos:position pos:line="15" pos:column="36"/></condition><then pos:line="15" pos:column="36"> <expr><name pos:line="15" pos:column="37">logfile_format_has_i<pos:position pos:line="15" pos:column="57"/></name></expr> <pos:position pos:line="15" pos:column="58"/></then><else pos:line="15" pos:column="58">: <expr><name pos:line="15" pos:column="60">stdout_format_has_i<pos:position pos:line="15" pos:column="79"/></name></expr></else></ternary></expr></init></decl>;<pos:position pos:line="15" pos:column="80"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="16" pos:column="9">enum<pos:position pos:line="16" pos:column="13"/></name> <name pos:line="16" pos:column="14">logcode<pos:position pos:line="16" pos:column="21"/></name></name></type> <name pos:line="16" pos:column="22">log_code<pos:position pos:line="16" pos:column="30"/></name> <init pos:line="16" pos:column="31">= <expr><ternary><condition><expr><name pos:line="16" pos:column="33">log_before_transfer<pos:position pos:line="16" pos:column="52"/></name></expr> ?<pos:position pos:line="16" pos:column="54"/></condition><then pos:line="16" pos:column="54"> <expr><name pos:line="16" pos:column="55">FLOG<pos:position pos:line="16" pos:column="59"/></name></expr> <pos:position pos:line="16" pos:column="60"/></then><else pos:line="16" pos:column="60">: <expr><name pos:line="16" pos:column="62">FINFO<pos:position pos:line="16" pos:column="67"/></name></expr></else></ternary></expr></init></decl>;<pos:position pos:line="16" pos:column="68"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="17" pos:column="9">int<pos:position pos:line="17" pos:column="12"/></name></type> <name pos:line="17" pos:column="13">f_xfer<pos:position pos:line="17" pos:column="19"/></name> <init pos:line="17" pos:column="20">= <expr><ternary><condition><expr><name pos:line="17" pos:column="22">write_batch<pos:position pos:line="17" pos:column="33"/></name> <operator pos:line="17" pos:column="34">&lt;<pos:position pos:line="17" pos:column="38"/></operator> <literal type="number" pos:line="17" pos:column="36">0<pos:position pos:line="17" pos:column="37"/></literal></expr> ?<pos:position pos:line="17" pos:column="39"/></condition><then pos:line="17" pos:column="39"> <expr><name pos:line="17" pos:column="40">batch_fd<pos:position pos:line="17" pos:column="48"/></name></expr> <pos:position pos:line="17" pos:column="49"/></then><else pos:line="17" pos:column="49">: <expr><name pos:line="17" pos:column="51">f_out<pos:position pos:line="17" pos:column="56"/></name></expr></else></ternary></expr></init></decl>;<pos:position pos:line="17" pos:column="57"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="18" pos:column="9">int<pos:position pos:line="18" pos:column="12"/></name></type> <name pos:line="18" pos:column="13">i<pos:position pos:line="18" pos:column="14"/></name></decl>, <decl><type ref="prev"/><name pos:line="18" pos:column="16">j<pos:position pos:line="18" pos:column="17"/></name></decl>;<pos:position pos:line="18" pos:column="18"/></decl_stmt>

	<if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><name pos:line="20" pos:column="13">verbose<pos:position pos:line="20" pos:column="20"/></name> <operator pos:line="20" pos:column="21">&gt;<pos:position pos:line="20" pos:column="25"/></operator> <literal type="number" pos:line="20" pos:column="23">2<pos:position pos:line="20" pos:column="24"/></literal></expr>)<pos:position pos:line="20" pos:column="25"/></condition><then pos:line="20" pos:column="25">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="21" pos:column="17">rprintf<pos:position pos:line="21" pos:column="24"/></name><argument_list pos:line="21" pos:column="24">(<argument><expr><name pos:line="21" pos:column="25">FINFO<pos:position pos:line="21" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="21" pos:column="32">"send_files starting\n"<pos:position pos:line="21" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="57"/></expr_stmt></block></then></if>

	<while pos:line="23" pos:column="9">while <condition pos:line="23" pos:column="15">(<expr><literal type="number" pos:line="23" pos:column="16">1<pos:position pos:line="23" pos:column="17"/></literal></expr>)<pos:position pos:line="23" pos:column="18"/></condition> <block pos:line="23" pos:column="19">{
		<decl_stmt><decl><type><name pos:line="24" pos:column="17">unsigned<pos:position pos:line="24" pos:column="25"/></name> <name pos:line="24" pos:column="26">int<pos:position pos:line="24" pos:column="29"/></name></type> <name pos:line="24" pos:column="30">offset<pos:position pos:line="24" pos:column="36"/></name></decl>;<pos:position pos:line="24" pos:column="37"/></decl_stmt>

		<expr_stmt><expr><name pos:line="26" pos:column="17">i<pos:position pos:line="26" pos:column="18"/></name> <operator pos:line="26" pos:column="19">=<pos:position pos:line="26" pos:column="20"/></operator> <call><name pos:line="26" pos:column="21">read_int<pos:position pos:line="26" pos:column="29"/></name><argument_list pos:line="26" pos:column="29">(<argument><expr><name pos:line="26" pos:column="30">f_in<pos:position pos:line="26" pos:column="34"/></name></expr></argument>)<pos:position pos:line="26" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="36"/></expr_stmt>
		<if pos:line="27" pos:column="17">if <condition pos:line="27" pos:column="20">(<expr><name pos:line="27" pos:column="21">i<pos:position pos:line="27" pos:column="22"/></name> <operator pos:line="27" pos:column="23">==<pos:position pos:line="27" pos:column="25"/></operator> <operator pos:line="27" pos:column="26">-<pos:position pos:line="27" pos:column="27"/></operator><literal type="number" pos:line="27" pos:column="27">1<pos:position pos:line="27" pos:column="28"/></literal></expr>)<pos:position pos:line="27" pos:column="29"/></condition><then pos:line="27" pos:column="29"> <block pos:line="27" pos:column="30">{
			<if pos:line="28" pos:column="25">if <condition pos:line="28" pos:column="28">(<expr><operator pos:line="28" pos:column="29">++<pos:position pos:line="28" pos:column="31"/></operator><name pos:line="28" pos:column="31">phase<pos:position pos:line="28" pos:column="36"/></name> <operator pos:line="28" pos:column="37">&gt;<pos:position pos:line="28" pos:column="41"/></operator> <name pos:line="28" pos:column="39">max_phase<pos:position pos:line="28" pos:column="48"/></name></expr>)<pos:position pos:line="28" pos:column="49"/></condition><then pos:line="28" pos:column="49">
				<block type="pseudo"><break pos:line="29" pos:column="33">break;<pos:position pos:line="29" pos:column="39"/></break></block></then></if>
			<expr_stmt><expr><name pos:line="30" pos:column="25">csum_length<pos:position pos:line="30" pos:column="36"/></name> <operator pos:line="30" pos:column="37">=<pos:position pos:line="30" pos:column="38"/></operator> <name pos:line="30" pos:column="39">SUM_LENGTH<pos:position pos:line="30" pos:column="49"/></name></expr>;<pos:position pos:line="30" pos:column="50"/></expr_stmt>
			<if pos:line="31" pos:column="25">if <condition pos:line="31" pos:column="28">(<expr><name pos:line="31" pos:column="29">verbose<pos:position pos:line="31" pos:column="36"/></name> <operator pos:line="31" pos:column="37">&gt;<pos:position pos:line="31" pos:column="41"/></operator> <literal type="number" pos:line="31" pos:column="39">2<pos:position pos:line="31" pos:column="40"/></literal></expr>)<pos:position pos:line="31" pos:column="41"/></condition><then pos:line="31" pos:column="41">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="32" pos:column="33">rprintf<pos:position pos:line="32" pos:column="40"/></name><argument_list pos:line="32" pos:column="40">(<argument><expr><name pos:line="32" pos:column="41">FINFO<pos:position pos:line="32" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="32" pos:column="48">"send_files phase=%d\n"<pos:position pos:line="32" pos:column="71"/></literal></expr></argument>, <argument><expr><name pos:line="32" pos:column="73">phase<pos:position pos:line="32" pos:column="78"/></name></expr></argument>)<pos:position pos:line="32" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="80"/></expr_stmt></block></then></if>
			<expr_stmt><expr><call><name pos:line="33" pos:column="25">write_int<pos:position pos:line="33" pos:column="34"/></name><argument_list pos:line="33" pos:column="34">(<argument><expr><name pos:line="33" pos:column="35">f_out<pos:position pos:line="33" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="33" pos:column="42">-<pos:position pos:line="33" pos:column="43"/></operator><literal type="number" pos:line="33" pos:column="43">1<pos:position pos:line="33" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="46"/></expr_stmt>
			<comment type="block" pos:line="34" pos:column="25">/* For inplace: redo phase turns off the backup
			 * flag so that we do a regular inplace send. */</comment>
			<expr_stmt><expr><name pos:line="36" pos:column="25">make_backups<pos:position pos:line="36" pos:column="37"/></name> <operator pos:line="36" pos:column="38">=<pos:position pos:line="36" pos:column="39"/></operator> <literal type="number" pos:line="36" pos:column="40">0<pos:position pos:line="36" pos:column="41"/></literal></expr>;<pos:position pos:line="36" pos:column="42"/></expr_stmt>
			<expr_stmt><expr><name pos:line="37" pos:column="25">append_mode<pos:position pos:line="37" pos:column="36"/></name> <operator pos:line="37" pos:column="37">=<pos:position pos:line="37" pos:column="38"/></operator> <literal type="number" pos:line="37" pos:column="39">0<pos:position pos:line="37" pos:column="40"/></literal></expr>;<pos:position pos:line="37" pos:column="41"/></expr_stmt>
			<continue pos:line="38" pos:column="25">continue;<pos:position pos:line="38" pos:column="34"/></continue>
		}<pos:position pos:line="39" pos:column="18"/></block></then></if>

		<expr_stmt><expr><name pos:line="41" pos:column="17">iflags<pos:position pos:line="41" pos:column="23"/></name> <operator pos:line="41" pos:column="24">=<pos:position pos:line="41" pos:column="25"/></operator> <call><name pos:line="41" pos:column="26">read_item_attrs<pos:position pos:line="41" pos:column="41"/></name><argument_list pos:line="41" pos:column="41">(<argument><expr><name pos:line="41" pos:column="42">f_in<pos:position pos:line="41" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="48">f_out<pos:position pos:line="41" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="55">i<pos:position pos:line="41" pos:column="56"/></name></expr></argument>, <argument><expr><operator pos:line="41" pos:column="58">&amp;<pos:position pos:line="41" pos:column="63"/></operator><name pos:line="41" pos:column="59">fnamecmp_type<pos:position pos:line="41" pos:column="72"/></name></expr></argument>,
					 <argument><expr><name pos:line="42" pos:column="42">xname<pos:position pos:line="42" pos:column="47"/></name></expr></argument>, <argument><expr><operator pos:line="42" pos:column="49">&amp;<pos:position pos:line="42" pos:column="54"/></operator><name pos:line="42" pos:column="50">xlen<pos:position pos:line="42" pos:column="54"/></name></expr></argument>)<pos:position pos:line="42" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="56"/></expr_stmt>
		<if pos:line="43" pos:column="17">if <condition pos:line="43" pos:column="20">(<expr><name pos:line="43" pos:column="21">iflags<pos:position pos:line="43" pos:column="27"/></name> <operator pos:line="43" pos:column="28">==<pos:position pos:line="43" pos:column="30"/></operator> <name pos:line="43" pos:column="31">ITEM_IS_NEW<pos:position pos:line="43" pos:column="42"/></name></expr>)<pos:position pos:line="43" pos:column="43"/></condition><then pos:line="43" pos:column="43"> <comment type="block" pos:line="43" pos:column="44">/* no-op packet */</comment>
			<block type="pseudo"><continue pos:line="44" pos:column="25">continue;<pos:position pos:line="44" pos:column="34"/></continue></block></then></if>

		<expr_stmt><expr><name pos:line="46" pos:column="17">file<pos:position pos:line="46" pos:column="21"/></name> <operator pos:line="46" pos:column="22">=<pos:position pos:line="46" pos:column="23"/></operator> <name><name pos:line="46" pos:column="24">flist<pos:position pos:line="46" pos:column="29"/></name><operator pos:line="46" pos:column="29">-&gt;<pos:position pos:line="46" pos:column="34"/></operator><name pos:line="46" pos:column="31">files<pos:position pos:line="46" pos:column="36"/></name><index pos:line="46" pos:column="36">[<expr><name pos:line="46" pos:column="37">i<pos:position pos:line="46" pos:column="38"/></name></expr>]<pos:position pos:line="46" pos:column="39"/></index></name></expr>;<pos:position pos:line="46" pos:column="40"/></expr_stmt>
		<if pos:line="47" pos:column="17">if <condition pos:line="47" pos:column="20">(<expr><name><name pos:line="47" pos:column="21">file<pos:position pos:line="47" pos:column="25"/></name><operator pos:line="47" pos:column="25">-&gt;<pos:position pos:line="47" pos:column="30"/></operator><name pos:line="47" pos:column="27">dir<pos:position pos:line="47" pos:column="30"/></name><operator pos:line="47" pos:column="30">.<pos:position pos:line="47" pos:column="31"/></operator><name pos:line="47" pos:column="31">root<pos:position pos:line="47" pos:column="35"/></name></name></expr>)<pos:position pos:line="47" pos:column="36"/></condition><then pos:line="47" pos:column="36"> <block pos:line="47" pos:column="37">{
			<comment type="block" pos:line="48" pos:column="25">/* N.B. We're sure that this fits, so offset is OK. */</comment>
			<expr_stmt><expr><name pos:line="49" pos:column="25">offset<pos:position pos:line="49" pos:column="31"/></name> <operator pos:line="49" pos:column="32">=<pos:position pos:line="49" pos:column="33"/></operator> <call><name pos:line="49" pos:column="34">strlcpy<pos:position pos:line="49" pos:column="41"/></name><argument_list pos:line="49" pos:column="41">(<argument><expr><name pos:line="49" pos:column="42">fname<pos:position pos:line="49" pos:column="47"/></name></expr></argument>, <argument><expr><name><name pos:line="49" pos:column="49">file<pos:position pos:line="49" pos:column="53"/></name><operator pos:line="49" pos:column="53">-&gt;<pos:position pos:line="49" pos:column="58"/></operator><name pos:line="49" pos:column="55">dir<pos:position pos:line="49" pos:column="58"/></name><operator pos:line="49" pos:column="58">.<pos:position pos:line="49" pos:column="59"/></operator><name pos:line="49" pos:column="59">root<pos:position pos:line="49" pos:column="63"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="49" pos:column="65">sizeof <name pos:line="49" pos:column="72">fname<pos:position pos:line="49" pos:column="77"/></name></sizeof></expr></argument>)<pos:position pos:line="49" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="79"/></expr_stmt>
			<if pos:line="50" pos:column="25">if <condition pos:line="50" pos:column="28">(<expr><operator pos:line="50" pos:column="29">!<pos:position pos:line="50" pos:column="30"/></operator><name pos:line="50" pos:column="30">offset<pos:position pos:line="50" pos:column="36"/></name> <operator pos:line="50" pos:column="37">||<pos:position pos:line="50" pos:column="39"/></operator> <name><name pos:line="50" pos:column="40">fname<pos:position pos:line="50" pos:column="45"/></name><index pos:line="50" pos:column="45">[<expr><name pos:line="50" pos:column="46">offset<pos:position pos:line="50" pos:column="52"/></name><operator pos:line="50" pos:column="52">-<pos:position pos:line="50" pos:column="53"/></operator><literal type="number" pos:line="50" pos:column="53">1<pos:position pos:line="50" pos:column="54"/></literal></expr>]<pos:position pos:line="50" pos:column="55"/></index></name> <operator pos:line="50" pos:column="56">!=<pos:position pos:line="50" pos:column="58"/></operator> <literal type="char" pos:line="50" pos:column="59">'/'<pos:position pos:line="50" pos:column="62"/></literal></expr>)<pos:position pos:line="50" pos:column="63"/></condition><then pos:line="50" pos:column="63">
				<block type="pseudo"><expr_stmt><expr><name><name pos:line="51" pos:column="33">fname<pos:position pos:line="51" pos:column="38"/></name><index pos:line="51" pos:column="38">[<expr><name pos:line="51" pos:column="39">offset<pos:position pos:line="51" pos:column="45"/></name><operator pos:line="51" pos:column="45">++<pos:position pos:line="51" pos:column="47"/></operator></expr>]<pos:position pos:line="51" pos:column="48"/></index></name> <operator pos:line="51" pos:column="49">=<pos:position pos:line="51" pos:column="50"/></operator> <literal type="char" pos:line="51" pos:column="51">'/'<pos:position pos:line="51" pos:column="54"/></literal></expr>;<pos:position pos:line="51" pos:column="55"/></expr_stmt></block></then></if>
		}<pos:position pos:line="52" pos:column="18"/></block></then> <else pos:line="52" pos:column="19">else
			<block type="pseudo"><expr_stmt><expr><name pos:line="53" pos:column="25">offset<pos:position pos:line="53" pos:column="31"/></name> <operator pos:line="53" pos:column="32">=<pos:position pos:line="53" pos:column="33"/></operator> <literal type="number" pos:line="53" pos:column="34">0<pos:position pos:line="53" pos:column="35"/></literal></expr>;<pos:position pos:line="53" pos:column="36"/></expr_stmt></block></else></if>
		<expr_stmt><expr><name pos:line="54" pos:column="17">fname2<pos:position pos:line="54" pos:column="23"/></name> <operator pos:line="54" pos:column="24">=<pos:position pos:line="54" pos:column="25"/></operator> <call><name pos:line="54" pos:column="26">f_name<pos:position pos:line="54" pos:column="32"/></name><argument_list pos:line="54" pos:column="32">(<argument><expr><name pos:line="54" pos:column="33">file<pos:position pos:line="54" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="39">fname<pos:position pos:line="54" pos:column="44"/></name> <operator pos:line="54" pos:column="45">+<pos:position pos:line="54" pos:column="46"/></operator> <name pos:line="54" pos:column="47">offset<pos:position pos:line="54" pos:column="53"/></name></expr></argument>)<pos:position pos:line="54" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="55"/></expr_stmt>

		<if pos:line="56" pos:column="17">if <condition pos:line="56" pos:column="20">(<expr><name pos:line="56" pos:column="21">verbose<pos:position pos:line="56" pos:column="28"/></name> <operator pos:line="56" pos:column="29">&gt;<pos:position pos:line="56" pos:column="33"/></operator> <literal type="number" pos:line="56" pos:column="31">2<pos:position pos:line="56" pos:column="32"/></literal></expr>)<pos:position pos:line="56" pos:column="33"/></condition><then pos:line="56" pos:column="33">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="57" pos:column="25">rprintf<pos:position pos:line="57" pos:column="32"/></name><argument_list pos:line="57" pos:column="32">(<argument><expr><name pos:line="57" pos:column="33">FINFO<pos:position pos:line="57" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="57" pos:column="40">"send_files(%d, %s)\n"<pos:position pos:line="57" pos:column="62"/></literal></expr></argument>, <argument><expr><name pos:line="57" pos:column="64">i<pos:position pos:line="57" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="67">fname<pos:position pos:line="57" pos:column="72"/></name></expr></argument>)<pos:position pos:line="57" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="74"/></expr_stmt></block></then></if>

		<if pos:line="59" pos:column="17">if <condition pos:line="59" pos:column="20">(<expr><operator pos:line="59" pos:column="21">!<pos:position pos:line="59" pos:column="22"/></operator><operator pos:line="59" pos:column="22">(<pos:position pos:line="59" pos:column="23"/></operator><name pos:line="59" pos:column="23">iflags<pos:position pos:line="59" pos:column="29"/></name> <operator pos:line="59" pos:column="30">&amp;<pos:position pos:line="59" pos:column="35"/></operator> <name pos:line="59" pos:column="32">ITEM_TRANSFER<pos:position pos:line="59" pos:column="45"/></name><operator pos:line="59" pos:column="45">)<pos:position pos:line="59" pos:column="46"/></operator></expr>)<pos:position pos:line="59" pos:column="47"/></condition><then pos:line="59" pos:column="47"> <block pos:line="59" pos:column="48">{
			<expr_stmt><expr><call><name pos:line="60" pos:column="25">maybe_log_item<pos:position pos:line="60" pos:column="39"/></name><argument_list pos:line="60" pos:column="39">(<argument><expr><name pos:line="60" pos:column="40">file<pos:position pos:line="60" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="60" pos:column="46">iflags<pos:position pos:line="60" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="60" pos:column="54">itemizing<pos:position pos:line="60" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="60" pos:column="65">xname<pos:position pos:line="60" pos:column="70"/></name></expr></argument>)<pos:position pos:line="60" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="72"/></expr_stmt>
			<continue pos:line="61" pos:column="25">continue;<pos:position pos:line="61" pos:column="34"/></continue>
		}<pos:position pos:line="62" pos:column="18"/></block></then></if>
		<if pos:line="63" pos:column="17">if <condition pos:line="63" pos:column="20">(<expr><name pos:line="63" pos:column="21">phase<pos:position pos:line="63" pos:column="26"/></name> <operator pos:line="63" pos:column="27">==<pos:position pos:line="63" pos:column="29"/></operator> <literal type="number" pos:line="63" pos:column="30">2<pos:position pos:line="63" pos:column="31"/></literal></expr>)<pos:position pos:line="63" pos:column="32"/></condition><then pos:line="63" pos:column="32"> <block pos:line="63" pos:column="33">{
			<expr_stmt><expr><call><name pos:line="64" pos:column="25">rprintf<pos:position pos:line="64" pos:column="32"/></name><argument_list pos:line="64" pos:column="32">(<argument><expr><name pos:line="64" pos:column="33">FERROR<pos:position pos:line="64" pos:column="39"/></name></expr></argument>,
				<argument><expr><literal type="string" pos:line="65" pos:column="33">"got transfer request in phase 2 [%s]\n"<pos:position pos:line="65" pos:column="73"/></literal></expr></argument>,
				<argument><expr><call><name pos:line="66" pos:column="33">who_am_i<pos:position pos:line="66" pos:column="41"/></name><argument_list pos:line="66" pos:column="41">()<pos:position pos:line="66" pos:column="43"/></argument_list></call></expr></argument>)<pos:position pos:line="66" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="45"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="67" pos:column="25">exit_cleanup<pos:position pos:line="67" pos:column="37"/></name><argument_list pos:line="67" pos:column="37">(<argument><expr><name pos:line="67" pos:column="38">RERR_PROTOCOL<pos:position pos:line="67" pos:column="51"/></name></expr></argument>)<pos:position pos:line="67" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="53"/></expr_stmt>
		}<pos:position pos:line="68" pos:column="18"/></block></then></if>

		<expr_stmt><expr><name pos:line="70" pos:column="17">updating_basis_file<pos:position pos:line="70" pos:column="36"/></name> <operator pos:line="70" pos:column="37">=<pos:position pos:line="70" pos:column="38"/></operator> <name pos:line="70" pos:column="39">inplace<pos:position pos:line="70" pos:column="46"/></name> <operator pos:line="70" pos:column="47">&amp;&amp;<pos:position pos:line="70" pos:column="57"/></operator> <operator pos:line="70" pos:column="50">(<pos:position pos:line="70" pos:column="51"/></operator><ternary><condition><expr><name pos:line="70" pos:column="51">protocol_version<pos:position pos:line="70" pos:column="67"/></name> <operator pos:line="70" pos:column="68">&gt;=<pos:position pos:line="70" pos:column="73"/></operator> <literal type="number" pos:line="70" pos:column="71">29<pos:position pos:line="70" pos:column="73"/></literal></expr>
			?<pos:position pos:line="71" pos:column="26"/></condition><then pos:line="71" pos:column="26"> <expr><name pos:line="71" pos:column="27">fnamecmp_type<pos:position pos:line="71" pos:column="40"/></name> <operator pos:line="71" pos:column="41">==<pos:position pos:line="71" pos:column="43"/></operator> <name pos:line="71" pos:column="44">FNAMECMP_FNAME<pos:position pos:line="71" pos:column="58"/></name></expr> <pos:position pos:line="71" pos:column="59"/></then><else pos:line="71" pos:column="59">: <expr><operator pos:line="71" pos:column="61">!<pos:position pos:line="71" pos:column="62"/></operator><name pos:line="71" pos:column="62">make_backups<pos:position pos:line="71" pos:column="74"/></name></expr></else></ternary><operator pos:line="71" pos:column="74">)<pos:position pos:line="71" pos:column="75"/></operator></expr>;<pos:position pos:line="71" pos:column="76"/></expr_stmt>

		<expr_stmt><expr><name><name pos:line="73" pos:column="17">stats<pos:position pos:line="73" pos:column="22"/></name><operator pos:line="73" pos:column="22">.<pos:position pos:line="73" pos:column="23"/></operator><name pos:line="73" pos:column="23">current_file_index<pos:position pos:line="73" pos:column="41"/></name></name> <operator pos:line="73" pos:column="42">=<pos:position pos:line="73" pos:column="43"/></operator> <name pos:line="73" pos:column="44">i<pos:position pos:line="73" pos:column="45"/></name></expr>;<pos:position pos:line="73" pos:column="46"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="74" pos:column="17">stats<pos:position pos:line="74" pos:column="22"/></name><operator pos:line="74" pos:column="22">.<pos:position pos:line="74" pos:column="23"/></operator><name pos:line="74" pos:column="23">num_transferred_files<pos:position pos:line="74" pos:column="44"/></name></name><operator pos:line="74" pos:column="44">++<pos:position pos:line="74" pos:column="46"/></operator></expr>;<pos:position pos:line="74" pos:column="47"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="75" pos:column="17">stats<pos:position pos:line="75" pos:column="22"/></name><operator pos:line="75" pos:column="22">.<pos:position pos:line="75" pos:column="23"/></operator><name pos:line="75" pos:column="23">total_transferred_size<pos:position pos:line="75" pos:column="45"/></name></name> <operator pos:line="75" pos:column="46">+=<pos:position pos:line="75" pos:column="48"/></operator> <name><name pos:line="75" pos:column="49">file<pos:position pos:line="75" pos:column="53"/></name><operator pos:line="75" pos:column="53">-&gt;<pos:position pos:line="75" pos:column="58"/></operator><name pos:line="75" pos:column="55">length<pos:position pos:line="75" pos:column="61"/></name></name></expr>;<pos:position pos:line="75" pos:column="62"/></expr_stmt>

		<if pos:line="77" pos:column="17">if <condition pos:line="77" pos:column="20">(<expr><operator pos:line="77" pos:column="21">!<pos:position pos:line="77" pos:column="22"/></operator><name pos:line="77" pos:column="22">do_xfers<pos:position pos:line="77" pos:column="30"/></name></expr>)<pos:position pos:line="77" pos:column="31"/></condition><then pos:line="77" pos:column="31"> <block pos:line="77" pos:column="32">{ <comment type="block" pos:line="77" pos:column="34">/* log the transfer */</comment>
			<expr_stmt><expr><call><name pos:line="78" pos:column="25">log_item<pos:position pos:line="78" pos:column="33"/></name><argument_list pos:line="78" pos:column="33">(<argument><expr><name pos:line="78" pos:column="34">FCLIENT<pos:position pos:line="78" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="78" pos:column="43">file<pos:position pos:line="78" pos:column="47"/></name></expr></argument>, <argument><expr><operator pos:line="78" pos:column="49">&amp;<pos:position pos:line="78" pos:column="54"/></operator><name pos:line="78" pos:column="50">stats<pos:position pos:line="78" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="78" pos:column="57">iflags<pos:position pos:line="78" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="78" pos:column="65">NULL<pos:position pos:line="78" pos:column="69"/></name></expr></argument>)<pos:position pos:line="78" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="71"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="79" pos:column="25">write_ndx_and_attrs<pos:position pos:line="79" pos:column="44"/></name><argument_list pos:line="79" pos:column="44">(<argument><expr><name pos:line="79" pos:column="45">f_out<pos:position pos:line="79" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="79" pos:column="52">i<pos:position pos:line="79" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="79" pos:column="55">iflags<pos:position pos:line="79" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="79" pos:column="63">fnamecmp_type<pos:position pos:line="79" pos:column="76"/></name></expr></argument>,
					    <argument><expr><name pos:line="80" pos:column="45">xname<pos:position pos:line="80" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="80" pos:column="52">xlen<pos:position pos:line="80" pos:column="56"/></name></expr></argument>)<pos:position pos:line="80" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="58"/></expr_stmt>
			<continue pos:line="81" pos:column="25">continue;<pos:position pos:line="81" pos:column="34"/></continue>
		}<pos:position pos:line="82" pos:column="18"/></block></then></if>

		<expr_stmt><expr><name pos:line="84" pos:column="17">initial_stats<pos:position pos:line="84" pos:column="30"/></name> <operator pos:line="84" pos:column="31">=<pos:position pos:line="84" pos:column="32"/></operator> <name pos:line="84" pos:column="33">stats<pos:position pos:line="84" pos:column="38"/></name></expr>;<pos:position pos:line="84" pos:column="39"/></expr_stmt>

		<if pos:line="86" pos:column="17">if <condition pos:line="86" pos:column="20">(<expr><operator pos:line="86" pos:column="21">!<pos:position pos:line="86" pos:column="22"/></operator><operator pos:line="86" pos:column="22">(<pos:position pos:line="86" pos:column="23"/></operator><name pos:line="86" pos:column="23">s<pos:position pos:line="86" pos:column="24"/></name> <operator pos:line="86" pos:column="25">=<pos:position pos:line="86" pos:column="26"/></operator> <call><name pos:line="86" pos:column="27">receive_sums<pos:position pos:line="86" pos:column="39"/></name><argument_list pos:line="86" pos:column="39">(<argument><expr><name pos:line="86" pos:column="40">f_in<pos:position pos:line="86" pos:column="44"/></name></expr></argument>)<pos:position pos:line="86" pos:column="45"/></argument_list></call><operator pos:line="86" pos:column="45">)<pos:position pos:line="86" pos:column="46"/></operator></expr>)<pos:position pos:line="86" pos:column="47"/></condition><then pos:line="86" pos:column="47"> <block pos:line="86" pos:column="48">{
			<expr_stmt><expr><name pos:line="87" pos:column="25">io_error<pos:position pos:line="87" pos:column="33"/></name> <operator pos:line="87" pos:column="34">|=<pos:position pos:line="87" pos:column="36"/></operator> <name pos:line="87" pos:column="37">IOERR_GENERAL<pos:position pos:line="87" pos:column="50"/></name></expr>;<pos:position pos:line="87" pos:column="51"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="88" pos:column="25">rprintf<pos:position pos:line="88" pos:column="32"/></name><argument_list pos:line="88" pos:column="32">(<argument><expr><name pos:line="88" pos:column="33">FERROR<pos:position pos:line="88" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="88" pos:column="41">"receive_sums failed\n"<pos:position pos:line="88" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="88" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="66"/></expr_stmt>
			<return pos:line="89" pos:column="25">return;<pos:position pos:line="89" pos:column="32"/></return>
		}<pos:position pos:line="90" pos:column="18"/></block></then></if>

		<expr_stmt><expr><name pos:line="92" pos:column="17">fd<pos:position pos:line="92" pos:column="19"/></name> <operator pos:line="92" pos:column="20">=<pos:position pos:line="92" pos:column="21"/></operator> <call><name pos:line="92" pos:column="22">do_open<pos:position pos:line="92" pos:column="29"/></name><argument_list pos:line="92" pos:column="29">(<argument><expr><name pos:line="92" pos:column="30">fname<pos:position pos:line="92" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="92" pos:column="37">O_RDONLY<pos:position pos:line="92" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="92" pos:column="47">0<pos:position pos:line="92" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="92" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="50"/></expr_stmt>
		<if pos:line="93" pos:column="17">if <condition pos:line="93" pos:column="20">(<expr><name pos:line="93" pos:column="21">fd<pos:position pos:line="93" pos:column="23"/></name> <operator pos:line="93" pos:column="24">==<pos:position pos:line="93" pos:column="26"/></operator> <operator pos:line="93" pos:column="27">-<pos:position pos:line="93" pos:column="28"/></operator><literal type="number" pos:line="93" pos:column="28">1<pos:position pos:line="93" pos:column="29"/></literal></expr>)<pos:position pos:line="93" pos:column="30"/></condition><then pos:line="93" pos:column="30"> <block pos:line="93" pos:column="31">{
			<if pos:line="94" pos:column="25">if <condition pos:line="94" pos:column="28">(<expr><name pos:line="94" pos:column="29">errno<pos:position pos:line="94" pos:column="34"/></name> <operator pos:line="94" pos:column="35">==<pos:position pos:line="94" pos:column="37"/></operator> <name pos:line="94" pos:column="38">ENOENT<pos:position pos:line="94" pos:column="44"/></name></expr>)<pos:position pos:line="94" pos:column="45"/></condition><then pos:line="94" pos:column="45"> <block pos:line="94" pos:column="46">{
				<decl_stmt><decl><type><name><name pos:line="95" pos:column="33">enum<pos:position pos:line="95" pos:column="37"/></name> <name pos:line="95" pos:column="38">logcode<pos:position pos:line="95" pos:column="45"/></name></name></type> <name pos:line="95" pos:column="46">c<pos:position pos:line="95" pos:column="47"/></name> <init pos:line="95" pos:column="48">= <expr><ternary><condition><expr><name pos:line="95" pos:column="50">am_daemon<pos:position pos:line="95" pos:column="59"/></name>
				    <operator pos:line="96" pos:column="37">&amp;&amp;<pos:position pos:line="96" pos:column="47"/></operator> <name pos:line="96" pos:column="40">protocol_version<pos:position pos:line="96" pos:column="56"/></name> <operator pos:line="96" pos:column="57">&lt;<pos:position pos:line="96" pos:column="61"/></operator> <literal type="number" pos:line="96" pos:column="59">28<pos:position pos:line="96" pos:column="61"/></literal></expr> ?<pos:position pos:line="96" pos:column="63"/></condition><then pos:line="96" pos:column="63"> <expr><name pos:line="96" pos:column="64">FERROR<pos:position pos:line="96" pos:column="70"/></name></expr>
							     <pos:position pos:line="97" pos:column="13"/></then><else pos:line="97" pos:column="62">: <expr><name pos:line="97" pos:column="64">FINFO<pos:position pos:line="97" pos:column="69"/></name></expr></else></ternary></expr></init></decl>;<pos:position pos:line="97" pos:column="70"/></decl_stmt>
				<expr_stmt><expr><name pos:line="98" pos:column="33">io_error<pos:position pos:line="98" pos:column="41"/></name> <operator pos:line="98" pos:column="42">|=<pos:position pos:line="98" pos:column="44"/></operator> <name pos:line="98" pos:column="45">IOERR_VANISHED<pos:position pos:line="98" pos:column="59"/></name></expr>;<pos:position pos:line="98" pos:column="60"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="99" pos:column="33">rprintf<pos:position pos:line="99" pos:column="40"/></name><argument_list pos:line="99" pos:column="40">(<argument><expr><name pos:line="99" pos:column="41">c<pos:position pos:line="99" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="99" pos:column="44">"file has vanished: %s\n"<pos:position pos:line="99" pos:column="69"/></literal></expr></argument>,
					<argument><expr><call><name pos:line="100" pos:column="41">full_fname<pos:position pos:line="100" pos:column="51"/></name><argument_list pos:line="100" pos:column="51">(<argument><expr><name pos:line="100" pos:column="52">fname<pos:position pos:line="100" pos:column="57"/></name></expr></argument>)<pos:position pos:line="100" pos:column="58"/></argument_list></call></expr></argument>)<pos:position pos:line="100" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="100" pos:column="60"/></expr_stmt>
			}<pos:position pos:line="101" pos:column="26"/></block></then> <else pos:line="101" pos:column="27">else <block pos:line="101" pos:column="32">{
				<expr_stmt><expr><name pos:line="102" pos:column="33">io_error<pos:position pos:line="102" pos:column="41"/></name> <operator pos:line="102" pos:column="42">|=<pos:position pos:line="102" pos:column="44"/></operator> <name pos:line="102" pos:column="45">IOERR_GENERAL<pos:position pos:line="102" pos:column="58"/></name></expr>;<pos:position pos:line="102" pos:column="59"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="103" pos:column="33">rsyserr<pos:position pos:line="103" pos:column="40"/></name><argument_list pos:line="103" pos:column="40">(<argument><expr><name pos:line="103" pos:column="41">FERROR<pos:position pos:line="103" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="103" pos:column="49">errno<pos:position pos:line="103" pos:column="54"/></name></expr></argument>,
					<argument><expr><literal type="string" pos:line="104" pos:column="41">"send_files failed to open %s"<pos:position pos:line="104" pos:column="71"/></literal></expr></argument>,
					<argument><expr><call><name pos:line="105" pos:column="41">full_fname<pos:position pos:line="105" pos:column="51"/></name><argument_list pos:line="105" pos:column="51">(<argument><expr><name pos:line="105" pos:column="52">fname<pos:position pos:line="105" pos:column="57"/></name></expr></argument>)<pos:position pos:line="105" pos:column="58"/></argument_list></call></expr></argument>)<pos:position pos:line="105" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="105" pos:column="60"/></expr_stmt>
			}<pos:position pos:line="106" pos:column="26"/></block></else></if>
			<expr_stmt><expr><call><name pos:line="107" pos:column="25">free_sums<pos:position pos:line="107" pos:column="34"/></name><argument_list pos:line="107" pos:column="34">(<argument><expr><name pos:line="107" pos:column="35">s<pos:position pos:line="107" pos:column="36"/></name></expr></argument>)<pos:position pos:line="107" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="107" pos:column="38"/></expr_stmt>
			<continue pos:line="108" pos:column="25">continue;<pos:position pos:line="108" pos:column="34"/></continue>
		}<pos:position pos:line="109" pos:column="18"/></block></then></if>

		<comment type="block" pos:line="111" pos:column="17">/* map the local file */</comment>
		<if pos:line="112" pos:column="17">if <condition pos:line="112" pos:column="20">(<expr><call><name pos:line="112" pos:column="21">do_fstat<pos:position pos:line="112" pos:column="29"/></name><argument_list pos:line="112" pos:column="29">(<argument><expr><name pos:line="112" pos:column="30">fd<pos:position pos:line="112" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="112" pos:column="34">&amp;<pos:position pos:line="112" pos:column="39"/></operator><name pos:line="112" pos:column="35">st<pos:position pos:line="112" pos:column="37"/></name></expr></argument>)<pos:position pos:line="112" pos:column="38"/></argument_list></call> <operator pos:line="112" pos:column="39">!=<pos:position pos:line="112" pos:column="41"/></operator> <literal type="number" pos:line="112" pos:column="42">0<pos:position pos:line="112" pos:column="43"/></literal></expr>)<pos:position pos:line="112" pos:column="44"/></condition><then pos:line="112" pos:column="44"> <block pos:line="112" pos:column="45">{
			<expr_stmt><expr><name pos:line="113" pos:column="25">io_error<pos:position pos:line="113" pos:column="33"/></name> <operator pos:line="113" pos:column="34">|=<pos:position pos:line="113" pos:column="36"/></operator> <name pos:line="113" pos:column="37">IOERR_GENERAL<pos:position pos:line="113" pos:column="50"/></name></expr>;<pos:position pos:line="113" pos:column="51"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="114" pos:column="25">rsyserr<pos:position pos:line="114" pos:column="32"/></name><argument_list pos:line="114" pos:column="32">(<argument><expr><name pos:line="114" pos:column="33">FERROR<pos:position pos:line="114" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="114" pos:column="41">errno<pos:position pos:line="114" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="114" pos:column="48">"fstat failed"<pos:position pos:line="114" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="114" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="114" pos:column="64"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="115" pos:column="25">free_sums<pos:position pos:line="115" pos:column="34"/></name><argument_list pos:line="115" pos:column="34">(<argument><expr><name pos:line="115" pos:column="35">s<pos:position pos:line="115" pos:column="36"/></name></expr></argument>)<pos:position pos:line="115" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="115" pos:column="38"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="116" pos:column="25">close<pos:position pos:line="116" pos:column="30"/></name><argument_list pos:line="116" pos:column="30">(<argument><expr><name pos:line="116" pos:column="31">fd<pos:position pos:line="116" pos:column="33"/></name></expr></argument>)<pos:position pos:line="116" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="116" pos:column="35"/></expr_stmt>
			<return pos:line="117" pos:column="25">return;<pos:position pos:line="117" pos:column="32"/></return>
		}<pos:position pos:line="118" pos:column="18"/></block></then></if>

		<if pos:line="120" pos:column="17">if <condition pos:line="120" pos:column="20">(<expr><name><name pos:line="120" pos:column="21">st<pos:position pos:line="120" pos:column="23"/></name><operator pos:line="120" pos:column="23">.<pos:position pos:line="120" pos:column="24"/></operator><name pos:line="120" pos:column="24">st_size<pos:position pos:line="120" pos:column="31"/></name></name></expr>)<pos:position pos:line="120" pos:column="32"/></condition><then pos:line="120" pos:column="32"> <block pos:line="120" pos:column="33">{
			<decl_stmt><decl><type><name pos:line="121" pos:column="25">int32<pos:position pos:line="121" pos:column="30"/></name></type> <name pos:line="121" pos:column="31">read_size<pos:position pos:line="121" pos:column="40"/></name> <init pos:line="121" pos:column="41">= <expr><call><name pos:line="121" pos:column="43">MAX<pos:position pos:line="121" pos:column="46"/></name><argument_list pos:line="121" pos:column="46">(<argument><expr><name><name pos:line="121" pos:column="47">s<pos:position pos:line="121" pos:column="48"/></name><operator pos:line="121" pos:column="48">-&gt;<pos:position pos:line="121" pos:column="53"/></operator><name pos:line="121" pos:column="50">blength<pos:position pos:line="121" pos:column="57"/></name></name> <operator pos:line="121" pos:column="58">*<pos:position pos:line="121" pos:column="59"/></operator> <literal type="number" pos:line="121" pos:column="60">3<pos:position pos:line="121" pos:column="61"/></literal></expr></argument>, <argument><expr><name pos:line="121" pos:column="63">MAX_MAP_SIZE<pos:position pos:line="121" pos:column="75"/></name></expr></argument>)<pos:position pos:line="121" pos:column="76"/></argument_list></call></expr></init></decl>;<pos:position pos:line="121" pos:column="77"/></decl_stmt>
			<expr_stmt><expr><name pos:line="122" pos:column="25">mbuf<pos:position pos:line="122" pos:column="29"/></name> <operator pos:line="122" pos:column="30">=<pos:position pos:line="122" pos:column="31"/></operator> <call><name pos:line="122" pos:column="32">map_file<pos:position pos:line="122" pos:column="40"/></name><argument_list pos:line="122" pos:column="40">(<argument><expr><name pos:line="122" pos:column="41">fd<pos:position pos:line="122" pos:column="43"/></name></expr></argument>, <argument><expr><name><name pos:line="122" pos:column="45">st<pos:position pos:line="122" pos:column="47"/></name><operator pos:line="122" pos:column="47">.<pos:position pos:line="122" pos:column="48"/></operator><name pos:line="122" pos:column="48">st_size<pos:position pos:line="122" pos:column="55"/></name></name></expr></argument>, <argument><expr><name pos:line="122" pos:column="57">read_size<pos:position pos:line="122" pos:column="66"/></name></expr></argument>, <argument><expr><name><name pos:line="122" pos:column="68">s<pos:position pos:line="122" pos:column="69"/></name><operator pos:line="122" pos:column="69">-&gt;<pos:position pos:line="122" pos:column="74"/></operator><name pos:line="122" pos:column="71">blength<pos:position pos:line="122" pos:column="78"/></name></name></expr></argument>)<pos:position pos:line="122" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="122" pos:column="80"/></expr_stmt>
		}<pos:position pos:line="123" pos:column="18"/></block></then> <else pos:line="123" pos:column="19">else
			<block type="pseudo"><expr_stmt><expr><name pos:line="124" pos:column="25">mbuf<pos:position pos:line="124" pos:column="29"/></name> <operator pos:line="124" pos:column="30">=<pos:position pos:line="124" pos:column="31"/></operator> <name pos:line="124" pos:column="32">NULL<pos:position pos:line="124" pos:column="36"/></name></expr>;<pos:position pos:line="124" pos:column="37"/></expr_stmt></block></else></if>

		<if pos:line="126" pos:column="17">if <condition pos:line="126" pos:column="20">(<expr><name pos:line="126" pos:column="21">verbose<pos:position pos:line="126" pos:column="28"/></name> <operator pos:line="126" pos:column="29">&gt;<pos:position pos:line="126" pos:column="33"/></operator> <literal type="number" pos:line="126" pos:column="31">2<pos:position pos:line="126" pos:column="32"/></literal></expr>)<pos:position pos:line="126" pos:column="33"/></condition><then pos:line="126" pos:column="33"> <block pos:line="126" pos:column="34">{
			<expr_stmt><expr><call><name pos:line="127" pos:column="25">rprintf<pos:position pos:line="127" pos:column="32"/></name><argument_list pos:line="127" pos:column="32">(<argument><expr><name pos:line="127" pos:column="33">FINFO<pos:position pos:line="127" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="127" pos:column="40">"send_files mapped %s of size %.0f\n"<pos:position pos:line="127" pos:column="77"/></literal></expr></argument>,
				<argument><expr><name pos:line="128" pos:column="33">fname<pos:position pos:line="128" pos:column="38"/></name></expr></argument>, <argument><expr><operator pos:line="128" pos:column="40">(<pos:position pos:line="128" pos:column="41"/></operator><name pos:line="128" pos:column="41">double<pos:position pos:line="128" pos:column="47"/></name><operator pos:line="128" pos:column="47">)<pos:position pos:line="128" pos:column="48"/></operator><name><name pos:line="128" pos:column="48">st<pos:position pos:line="128" pos:column="50"/></name><operator pos:line="128" pos:column="50">.<pos:position pos:line="128" pos:column="51"/></operator><name pos:line="128" pos:column="51">st_size<pos:position pos:line="128" pos:column="58"/></name></name></expr></argument>)<pos:position pos:line="128" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="128" pos:column="60"/></expr_stmt>
		}<pos:position pos:line="129" pos:column="18"/></block></then></if>

		<expr_stmt><expr><call><name pos:line="131" pos:column="17">write_ndx_and_attrs<pos:position pos:line="131" pos:column="36"/></name><argument_list pos:line="131" pos:column="36">(<argument><expr><name pos:line="131" pos:column="37">f_out<pos:position pos:line="131" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="131" pos:column="44">i<pos:position pos:line="131" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="131" pos:column="47">iflags<pos:position pos:line="131" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="131" pos:column="55">fnamecmp_type<pos:position pos:line="131" pos:column="68"/></name></expr></argument>,
				    <argument><expr><name pos:line="132" pos:column="37">xname<pos:position pos:line="132" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="132" pos:column="44">xlen<pos:position pos:line="132" pos:column="48"/></name></expr></argument>)<pos:position pos:line="132" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="132" pos:column="50"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="133" pos:column="17">write_sum_head<pos:position pos:line="133" pos:column="31"/></name><argument_list pos:line="133" pos:column="31">(<argument><expr><name pos:line="133" pos:column="32">f_xfer<pos:position pos:line="133" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="133" pos:column="40">s<pos:position pos:line="133" pos:column="41"/></name></expr></argument>)<pos:position pos:line="133" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="133" pos:column="43"/></expr_stmt>

		<if pos:line="135" pos:column="17">if <condition pos:line="135" pos:column="20">(<expr><name pos:line="135" pos:column="21">verbose<pos:position pos:line="135" pos:column="28"/></name> <operator pos:line="135" pos:column="29">&gt;<pos:position pos:line="135" pos:column="33"/></operator> <literal type="number" pos:line="135" pos:column="31">2<pos:position pos:line="135" pos:column="32"/></literal></expr>)<pos:position pos:line="135" pos:column="33"/></condition><then pos:line="135" pos:column="33">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="136" pos:column="25">rprintf<pos:position pos:line="136" pos:column="32"/></name><argument_list pos:line="136" pos:column="32">(<argument><expr><name pos:line="136" pos:column="33">FINFO<pos:position pos:line="136" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="136" pos:column="40">"calling match_sums %s\n"<pos:position pos:line="136" pos:column="65"/></literal></expr></argument>, <argument><expr><name pos:line="136" pos:column="67">fname<pos:position pos:line="136" pos:column="72"/></name></expr></argument>)<pos:position pos:line="136" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="136" pos:column="74"/></expr_stmt></block></then></if>

		<if pos:line="138" pos:column="17">if <condition pos:line="138" pos:column="20">(<expr><name pos:line="138" pos:column="21">log_before_transfer<pos:position pos:line="138" pos:column="40"/></name></expr>)<pos:position pos:line="138" pos:column="41"/></condition><then pos:line="138" pos:column="41">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="139" pos:column="25">log_item<pos:position pos:line="139" pos:column="33"/></name><argument_list pos:line="139" pos:column="33">(<argument><expr><name pos:line="139" pos:column="34">FCLIENT<pos:position pos:line="139" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="139" pos:column="43">file<pos:position pos:line="139" pos:column="47"/></name></expr></argument>, <argument><expr><operator pos:line="139" pos:column="49">&amp;<pos:position pos:line="139" pos:column="54"/></operator><name pos:line="139" pos:column="50">initial_stats<pos:position pos:line="139" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="139" pos:column="65">iflags<pos:position pos:line="139" pos:column="71"/></name></expr></argument>, <argument><expr><name pos:line="139" pos:column="73">NULL<pos:position pos:line="139" pos:column="77"/></name></expr></argument>)<pos:position pos:line="139" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="139" pos:column="79"/></expr_stmt></block></then>
		<elseif pos:line="140" pos:column="17">else <if pos:line="140" pos:column="22">if <condition pos:line="140" pos:column="25">(<expr><operator pos:line="140" pos:column="26">!<pos:position pos:line="140" pos:column="27"/></operator><name pos:line="140" pos:column="27">am_server<pos:position pos:line="140" pos:column="36"/></name> <operator pos:line="140" pos:column="37">&amp;&amp;<pos:position pos:line="140" pos:column="47"/></operator> <name pos:line="140" pos:column="40">verbose<pos:position pos:line="140" pos:column="47"/></name> <operator pos:line="140" pos:column="48">&amp;&amp;<pos:position pos:line="140" pos:column="58"/></operator> <name pos:line="140" pos:column="51">do_progress<pos:position pos:line="140" pos:column="62"/></name></expr>)<pos:position pos:line="140" pos:column="63"/></condition><then pos:line="140" pos:column="63">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="141" pos:column="25">rprintf<pos:position pos:line="141" pos:column="32"/></name><argument_list pos:line="141" pos:column="32">(<argument><expr><name pos:line="141" pos:column="33">FCLIENT<pos:position pos:line="141" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="141" pos:column="42">"%s\n"<pos:position pos:line="141" pos:column="48"/></literal></expr></argument>, <argument><expr><name pos:line="141" pos:column="50">fname2<pos:position pos:line="141" pos:column="56"/></name></expr></argument>)<pos:position pos:line="141" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="141" pos:column="58"/></expr_stmt></block></then></if></elseif></if>

		<expr_stmt><expr><call><name pos:line="143" pos:column="17">set_compression<pos:position pos:line="143" pos:column="32"/></name><argument_list pos:line="143" pos:column="32">(<argument><expr><name pos:line="143" pos:column="33">fname<pos:position pos:line="143" pos:column="38"/></name></expr></argument>)<pos:position pos:line="143" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="143" pos:column="40"/></expr_stmt>

		<expr_stmt><expr><call><name pos:line="145" pos:column="17">match_sums<pos:position pos:line="145" pos:column="27"/></name><argument_list pos:line="145" pos:column="27">(<argument><expr><name pos:line="145" pos:column="28">f_xfer<pos:position pos:line="145" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="145" pos:column="36">s<pos:position pos:line="145" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="145" pos:column="39">mbuf<pos:position pos:line="145" pos:column="43"/></name></expr></argument>, <argument><expr><name><name pos:line="145" pos:column="45">st<pos:position pos:line="145" pos:column="47"/></name><operator pos:line="145" pos:column="47">.<pos:position pos:line="145" pos:column="48"/></operator><name pos:line="145" pos:column="48">st_size<pos:position pos:line="145" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="145" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="145" pos:column="57"/></expr_stmt>
		<if pos:line="146" pos:column="17">if <condition pos:line="146" pos:column="20">(<expr><name pos:line="146" pos:column="21">do_progress<pos:position pos:line="146" pos:column="32"/></name></expr>)<pos:position pos:line="146" pos:column="33"/></condition><then pos:line="146" pos:column="33">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="147" pos:column="25">end_progress<pos:position pos:line="147" pos:column="37"/></name><argument_list pos:line="147" pos:column="37">(<argument><expr><name><name pos:line="147" pos:column="38">st<pos:position pos:line="147" pos:column="40"/></name><operator pos:line="147" pos:column="40">.<pos:position pos:line="147" pos:column="41"/></operator><name pos:line="147" pos:column="41">st_size<pos:position pos:line="147" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="147" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="147" pos:column="50"/></expr_stmt></block></then></if>

		<expr_stmt><expr><call><name pos:line="149" pos:column="17">log_item<pos:position pos:line="149" pos:column="25"/></name><argument_list pos:line="149" pos:column="25">(<argument><expr><name pos:line="149" pos:column="26">log_code<pos:position pos:line="149" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="149" pos:column="36">file<pos:position pos:line="149" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="149" pos:column="42">&amp;<pos:position pos:line="149" pos:column="47"/></operator><name pos:line="149" pos:column="43">initial_stats<pos:position pos:line="149" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="149" pos:column="58">iflags<pos:position pos:line="149" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="149" pos:column="66">NULL<pos:position pos:line="149" pos:column="70"/></name></expr></argument>)<pos:position pos:line="149" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="149" pos:column="72"/></expr_stmt>

		<if pos:line="151" pos:column="17">if <condition pos:line="151" pos:column="20">(<expr><name pos:line="151" pos:column="21">mbuf<pos:position pos:line="151" pos:column="25"/></name></expr>)<pos:position pos:line="151" pos:column="26"/></condition><then pos:line="151" pos:column="26"> <block pos:line="151" pos:column="27">{
			<expr_stmt><expr><name pos:line="152" pos:column="25">j<pos:position pos:line="152" pos:column="26"/></name> <operator pos:line="152" pos:column="27">=<pos:position pos:line="152" pos:column="28"/></operator> <call><name pos:line="152" pos:column="29">unmap_file<pos:position pos:line="152" pos:column="39"/></name><argument_list pos:line="152" pos:column="39">(<argument><expr><name pos:line="152" pos:column="40">mbuf<pos:position pos:line="152" pos:column="44"/></name></expr></argument>)<pos:position pos:line="152" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="152" pos:column="46"/></expr_stmt>
			<if pos:line="153" pos:column="25">if <condition pos:line="153" pos:column="28">(<expr><name pos:line="153" pos:column="29">j<pos:position pos:line="153" pos:column="30"/></name></expr>)<pos:position pos:line="153" pos:column="31"/></condition><then pos:line="153" pos:column="31"> <block pos:line="153" pos:column="32">{
				<expr_stmt><expr><name pos:line="154" pos:column="33">io_error<pos:position pos:line="154" pos:column="41"/></name> <operator pos:line="154" pos:column="42">|=<pos:position pos:line="154" pos:column="44"/></operator> <name pos:line="154" pos:column="45">IOERR_GENERAL<pos:position pos:line="154" pos:column="58"/></name></expr>;<pos:position pos:line="154" pos:column="59"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="155" pos:column="33">rsyserr<pos:position pos:line="155" pos:column="40"/></name><argument_list pos:line="155" pos:column="40">(<argument><expr><name pos:line="155" pos:column="41">FERROR<pos:position pos:line="155" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="155" pos:column="49">j<pos:position pos:line="155" pos:column="50"/></name></expr></argument>,
					<argument><expr><literal type="string" pos:line="156" pos:column="41">"read errors mapping %s"<pos:position pos:line="156" pos:column="65"/></literal></expr></argument>,
					<argument><expr><call><name pos:line="157" pos:column="41">full_fname<pos:position pos:line="157" pos:column="51"/></name><argument_list pos:line="157" pos:column="51">(<argument><expr><name pos:line="157" pos:column="52">fname<pos:position pos:line="157" pos:column="57"/></name></expr></argument>)<pos:position pos:line="157" pos:column="58"/></argument_list></call></expr></argument>)<pos:position pos:line="157" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="157" pos:column="60"/></expr_stmt>
			}<pos:position pos:line="158" pos:column="26"/></block></then></if>
		}<pos:position pos:line="159" pos:column="18"/></block></then></if>
		<expr_stmt><expr><call><name pos:line="160" pos:column="17">close<pos:position pos:line="160" pos:column="22"/></name><argument_list pos:line="160" pos:column="22">(<argument><expr><name pos:line="160" pos:column="23">fd<pos:position pos:line="160" pos:column="25"/></name></expr></argument>)<pos:position pos:line="160" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="160" pos:column="27"/></expr_stmt>

		<expr_stmt><expr><call><name pos:line="162" pos:column="17">free_sums<pos:position pos:line="162" pos:column="26"/></name><argument_list pos:line="162" pos:column="26">(<argument><expr><name pos:line="162" pos:column="27">s<pos:position pos:line="162" pos:column="28"/></name></expr></argument>)<pos:position pos:line="162" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="162" pos:column="30"/></expr_stmt>

		<if pos:line="164" pos:column="17">if <condition pos:line="164" pos:column="20">(<expr><name pos:line="164" pos:column="21">verbose<pos:position pos:line="164" pos:column="28"/></name> <operator pos:line="164" pos:column="29">&gt;<pos:position pos:line="164" pos:column="33"/></operator> <literal type="number" pos:line="164" pos:column="31">2<pos:position pos:line="164" pos:column="32"/></literal></expr>)<pos:position pos:line="164" pos:column="33"/></condition><then pos:line="164" pos:column="33">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="165" pos:column="25">rprintf<pos:position pos:line="165" pos:column="32"/></name><argument_list pos:line="165" pos:column="32">(<argument><expr><name pos:line="165" pos:column="33">FINFO<pos:position pos:line="165" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="165" pos:column="40">"sender finished %s\n"<pos:position pos:line="165" pos:column="62"/></literal></expr></argument>, <argument><expr><name pos:line="165" pos:column="64">fname<pos:position pos:line="165" pos:column="69"/></name></expr></argument>)<pos:position pos:line="165" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="165" pos:column="71"/></expr_stmt></block></then></if>

		<comment type="block" pos:line="167" pos:column="17">/* Flag that we actually sent this entry. */</comment>
		<expr_stmt><expr><name><name pos:line="168" pos:column="17">file<pos:position pos:line="168" pos:column="21"/></name><operator pos:line="168" pos:column="21">-&gt;<pos:position pos:line="168" pos:column="26"/></operator><name pos:line="168" pos:column="23">flags<pos:position pos:line="168" pos:column="28"/></name></name> <operator pos:line="168" pos:column="29">|=<pos:position pos:line="168" pos:column="31"/></operator> <name pos:line="168" pos:column="32">FLAG_SENT<pos:position pos:line="168" pos:column="41"/></name></expr>;<pos:position pos:line="168" pos:column="42"/></expr_stmt>
	}<pos:position pos:line="169" pos:column="10"/></block></while>
	<expr_stmt><expr><name pos:line="170" pos:column="9">make_backups<pos:position pos:line="170" pos:column="21"/></name> <operator pos:line="170" pos:column="22">=<pos:position pos:line="170" pos:column="23"/></operator> <name pos:line="170" pos:column="24">save_make_backups<pos:position pos:line="170" pos:column="41"/></name></expr>;<pos:position pos:line="170" pos:column="42"/></expr_stmt>

	<if pos:line="172" pos:column="9">if <condition pos:line="172" pos:column="12">(<expr><name pos:line="172" pos:column="13">verbose<pos:position pos:line="172" pos:column="20"/></name> <operator pos:line="172" pos:column="21">&gt;<pos:position pos:line="172" pos:column="25"/></operator> <literal type="number" pos:line="172" pos:column="23">2<pos:position pos:line="172" pos:column="24"/></literal></expr>)<pos:position pos:line="172" pos:column="25"/></condition><then pos:line="172" pos:column="25">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="173" pos:column="17">rprintf<pos:position pos:line="173" pos:column="24"/></name><argument_list pos:line="173" pos:column="24">(<argument><expr><name pos:line="173" pos:column="25">FINFO<pos:position pos:line="173" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="173" pos:column="32">"send files finished\n"<pos:position pos:line="173" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="173" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="173" pos:column="57"/></expr_stmt></block></then></if>

	<expr_stmt><expr><call><name pos:line="175" pos:column="9">match_report<pos:position pos:line="175" pos:column="21"/></name><argument_list pos:line="175" pos:column="21">()<pos:position pos:line="175" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="175" pos:column="24"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="177" pos:column="9">write_int<pos:position pos:line="177" pos:column="18"/></name><argument_list pos:line="177" pos:column="18">(<argument><expr><name pos:line="177" pos:column="19">f_out<pos:position pos:line="177" pos:column="24"/></name></expr></argument>, <argument><expr><operator pos:line="177" pos:column="26">-<pos:position pos:line="177" pos:column="27"/></operator><literal type="number" pos:line="177" pos:column="27">1<pos:position pos:line="177" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="177" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="177" pos:column="30"/></expr_stmt>
}<pos:position pos:line="178" pos:column="2"/></block></function></unit>
