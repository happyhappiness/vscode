<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_192_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">io_end_multiplex_out<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name pos:line="1" pos:column="26">int<pos:position pos:line="1" pos:column="29"/></name></type> <name pos:line="1" pos:column="30">mode<pos:position pos:line="1" pos:column="34"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="35"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">ret<pos:position pos:line="3" pos:column="16"/></name> <init pos:line="3" pos:column="17">= <expr><ternary><condition><expr><name><name pos:line="3" pos:column="19">iobuf<pos:position pos:line="3" pos:column="24"/></name><operator pos:line="3" pos:column="24">.<pos:position pos:line="3" pos:column="25"/></operator><name pos:line="3" pos:column="25">out_empty_len<pos:position pos:line="3" pos:column="38"/></name></name></expr> ?<pos:position pos:line="3" pos:column="40"/></condition><then pos:line="3" pos:column="40"> <expr><name><name pos:line="3" pos:column="41">iobuf<pos:position pos:line="3" pos:column="46"/></name><operator pos:line="3" pos:column="46">.<pos:position pos:line="3" pos:column="47"/></operator><name pos:line="3" pos:column="47">out_fd<pos:position pos:line="3" pos:column="53"/></name></name></expr> <pos:position pos:line="3" pos:column="54"/></then><else pos:line="3" pos:column="54">: <expr><operator pos:line="3" pos:column="56">-<pos:position pos:line="3" pos:column="57"/></operator><literal type="number" pos:line="3" pos:column="57">1<pos:position pos:line="3" pos:column="58"/></literal></expr></else></ternary></expr></init></decl>;<pos:position pos:line="3" pos:column="59"/></decl_stmt>

	<if pos:line="5" pos:column="9">if <condition pos:line="5" pos:column="12">(<expr><name pos:line="5" pos:column="13">msgs2stderr<pos:position pos:line="5" pos:column="24"/></name> <operator pos:line="5" pos:column="25">&amp;&amp;<pos:position pos:line="5" pos:column="35"/></operator> <call><name pos:line="5" pos:column="28">DEBUG_GTE<pos:position pos:line="5" pos:column="37"/></name><argument_list pos:line="5" pos:column="37">(<argument><expr><name pos:line="5" pos:column="38">IO<pos:position pos:line="5" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="5" pos:column="42">2<pos:position pos:line="5" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="5" pos:column="45"/></condition><then pos:line="5" pos:column="45">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="6" pos:column="17">rprintf<pos:position pos:line="6" pos:column="24"/></name><argument_list pos:line="6" pos:column="24">(<argument><expr><name pos:line="6" pos:column="25">FINFO<pos:position pos:line="6" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="6" pos:column="32">"[%s] io_end_multiplex_out(mode=%d)\n"<pos:position pos:line="6" pos:column="70"/></literal></expr></argument>, <argument><expr><call><name pos:line="6" pos:column="72">who_am_i<pos:position pos:line="6" pos:column="80"/></name><argument_list pos:line="6" pos:column="80">()<pos:position pos:line="6" pos:column="82"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="6" pos:column="84">mode<pos:position pos:line="6" pos:column="88"/></name></expr></argument>)<pos:position pos:line="6" pos:column="89"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="90"/></expr_stmt></block></then></if>

	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><name pos:line="8" pos:column="13">mode<pos:position pos:line="8" pos:column="17"/></name> <operator pos:line="8" pos:column="18">!=<pos:position pos:line="8" pos:column="20"/></operator> <name pos:line="8" pos:column="21">MPLX_TO_BUFFERED<pos:position pos:line="8" pos:column="37"/></name></expr>)<pos:position pos:line="8" pos:column="38"/></condition><then pos:line="8" pos:column="38">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="9" pos:column="17">io_end_buffering_out<pos:position pos:line="9" pos:column="37"/></name><argument_list pos:line="9" pos:column="37">(<argument><expr><name pos:line="9" pos:column="38">mode<pos:position pos:line="9" pos:column="42"/></name></expr></argument>)<pos:position pos:line="9" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="44"/></expr_stmt></block></then>
	<else pos:line="10" pos:column="9">else
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="11" pos:column="17">io_flush<pos:position pos:line="11" pos:column="25"/></name><argument_list pos:line="11" pos:column="25">(<argument><expr><name pos:line="11" pos:column="26">FULL_FLUSH<pos:position pos:line="11" pos:column="36"/></name></expr></argument>)<pos:position pos:line="11" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="38"/></expr_stmt></block></else></if>

	<expr_stmt><expr><name><name pos:line="13" pos:column="9">iobuf<pos:position pos:line="13" pos:column="14"/></name><operator pos:line="13" pos:column="14">.<pos:position pos:line="13" pos:column="15"/></operator><name pos:line="13" pos:column="15">out<pos:position pos:line="13" pos:column="18"/></name><operator pos:line="13" pos:column="18">.<pos:position pos:line="13" pos:column="19"/></operator><name pos:line="13" pos:column="19">len<pos:position pos:line="13" pos:column="22"/></name></name> <operator pos:line="13" pos:column="23">=<pos:position pos:line="13" pos:column="24"/></operator> <literal type="number" pos:line="13" pos:column="25">0<pos:position pos:line="13" pos:column="26"/></literal></expr>;<pos:position pos:line="13" pos:column="27"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="14" pos:column="9">iobuf<pos:position pos:line="14" pos:column="14"/></name><operator pos:line="14" pos:column="14">.<pos:position pos:line="14" pos:column="15"/></operator><name pos:line="14" pos:column="15">out_empty_len<pos:position pos:line="14" pos:column="28"/></name></name> <operator pos:line="14" pos:column="29">=<pos:position pos:line="14" pos:column="30"/></operator> <literal type="number" pos:line="14" pos:column="31">0<pos:position pos:line="14" pos:column="32"/></literal></expr>;<pos:position pos:line="14" pos:column="33"/></expr_stmt>
	<if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><name pos:line="15" pos:column="13">got_kill_signal<pos:position pos:line="15" pos:column="28"/></name> <operator pos:line="15" pos:column="29">&gt;<pos:position pos:line="15" pos:column="33"/></operator> <literal type="number" pos:line="15" pos:column="31">0<pos:position pos:line="15" pos:column="32"/></literal></expr>)<pos:position pos:line="15" pos:column="33"/></condition><then pos:line="15" pos:column="33"> <comment type="block" pos:line="15" pos:column="34">/* Just in case... */</comment>
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="16" pos:column="17">handle_kill_signal<pos:position pos:line="16" pos:column="35"/></name><argument_list pos:line="16" pos:column="35">(<argument><expr><name pos:line="16" pos:column="36">False<pos:position pos:line="16" pos:column="41"/></name></expr></argument>)<pos:position pos:line="16" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="43"/></expr_stmt></block></then></if>
	<expr_stmt><expr><name pos:line="17" pos:column="9">got_kill_signal<pos:position pos:line="17" pos:column="24"/></name> <operator pos:line="17" pos:column="25">=<pos:position pos:line="17" pos:column="26"/></operator> <operator pos:line="17" pos:column="27">-<pos:position pos:line="17" pos:column="28"/></operator><literal type="number" pos:line="17" pos:column="28">1<pos:position pos:line="17" pos:column="29"/></literal></expr>;<pos:position pos:line="17" pos:column="30"/></expr_stmt>

	<return pos:line="19" pos:column="9">return <expr><name pos:line="19" pos:column="16">ret<pos:position pos:line="19" pos:column="19"/></name></expr>;<pos:position pos:line="19" pos:column="20"/></return>
}<pos:position pos:line="20" pos:column="2"/></block></function></unit>
