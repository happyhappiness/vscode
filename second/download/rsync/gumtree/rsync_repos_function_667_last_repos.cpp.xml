<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_667_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name> <name pos:line="1" pos:column="6">ZLIB_INTERNAL<pos:position pos:line="1" pos:column="19"/></name></type> <name pos:line="1" pos:column="20">zcfree<pos:position pos:line="1" pos:column="26"/></name> <parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name pos:line="1" pos:column="28">voidpf<pos:position pos:line="1" pos:column="34"/></name></type> <name pos:line="1" pos:column="35">opaque<pos:position pos:line="1" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="43">voidpf<pos:position pos:line="1" pos:column="49"/></name></type> <name pos:line="1" pos:column="50">ptr<pos:position pos:line="1" pos:column="53"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="54"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">int<pos:position pos:line="3" pos:column="8"/></name></type> <name pos:line="3" pos:column="9">n<pos:position pos:line="3" pos:column="10"/></name></decl>;<pos:position pos:line="3" pos:column="11"/></decl_stmt>
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><operator pos:line="4" pos:column="9">*<pos:position pos:line="4" pos:column="10"/></operator><operator pos:line="4" pos:column="10">(<pos:position pos:line="4" pos:column="11"/></operator><name pos:line="4" pos:column="11">ush<pos:position pos:line="4" pos:column="14"/></name><operator pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></operator><operator pos:line="4" pos:column="15">)<pos:position pos:line="4" pos:column="16"/></operator><operator pos:line="4" pos:column="16">&amp;<pos:position pos:line="4" pos:column="21"/></operator><name pos:line="4" pos:column="17">ptr<pos:position pos:line="4" pos:column="20"/></name> <operator pos:line="4" pos:column="21">!=<pos:position pos:line="4" pos:column="23"/></operator> <literal type="number" pos:line="4" pos:column="24">0<pos:position pos:line="4" pos:column="25"/></literal></expr>)<pos:position pos:line="4" pos:column="26"/></condition><then pos:line="4" pos:column="26"> <block pos:line="4" pos:column="27">{ <comment type="block" pos:line="4" pos:column="29">/* object &lt; 64K */</comment>
        <expr_stmt><expr><call><name pos:line="5" pos:column="9">farfree<pos:position pos:line="5" pos:column="16"/></name><argument_list pos:line="5" pos:column="16">(<argument><expr><name pos:line="5" pos:column="17">ptr<pos:position pos:line="5" pos:column="20"/></name></expr></argument>)<pos:position pos:line="5" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="22"/></expr_stmt>
        <return pos:line="6" pos:column="9">return;<pos:position pos:line="6" pos:column="16"/></return>
    }<pos:position pos:line="7" pos:column="6"/></block></then></if>
    <comment type="block" pos:line="8" pos:column="5">/* Find the original pointer */</comment>
    <for pos:line="9" pos:column="5">for <control pos:line="9" pos:column="9">(<init><expr><name pos:line="9" pos:column="10">n<pos:position pos:line="9" pos:column="11"/></name> <operator pos:line="9" pos:column="12">=<pos:position pos:line="9" pos:column="13"/></operator> <literal type="number" pos:line="9" pos:column="14">0<pos:position pos:line="9" pos:column="15"/></literal></expr>;<pos:position pos:line="9" pos:column="16"/></init> <condition><expr><name pos:line="9" pos:column="17">n<pos:position pos:line="9" pos:column="18"/></name> <operator pos:line="9" pos:column="19">&lt;<pos:position pos:line="9" pos:column="23"/></operator> <name pos:line="9" pos:column="21">next_ptr<pos:position pos:line="9" pos:column="29"/></name></expr>;<pos:position pos:line="9" pos:column="30"/></condition> <incr><expr><name pos:line="9" pos:column="31">n<pos:position pos:line="9" pos:column="32"/></name><operator pos:line="9" pos:column="32">++<pos:position pos:line="9" pos:column="34"/></operator></expr></incr>)<pos:position pos:line="9" pos:column="35"/></control> <block pos:line="9" pos:column="36">{
        <if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><name pos:line="10" pos:column="13">ptr<pos:position pos:line="10" pos:column="16"/></name> <operator pos:line="10" pos:column="17">!=<pos:position pos:line="10" pos:column="19"/></operator> <name><name pos:line="10" pos:column="20">table<pos:position pos:line="10" pos:column="25"/></name><index pos:line="10" pos:column="25">[<expr><name pos:line="10" pos:column="26">n<pos:position pos:line="10" pos:column="27"/></name></expr>]<pos:position pos:line="10" pos:column="28"/></index></name><operator pos:line="10" pos:column="28">.<pos:position pos:line="10" pos:column="29"/></operator><name pos:line="10" pos:column="29">new_ptr<pos:position pos:line="10" pos:column="36"/></name></expr>)<pos:position pos:line="10" pos:column="37"/></condition><then pos:line="10" pos:column="37"> <block type="pseudo"><continue pos:line="10" pos:column="38">continue;<pos:position pos:line="10" pos:column="47"/></continue></block></then></if>

        <expr_stmt><expr><call><name pos:line="12" pos:column="9">farfree<pos:position pos:line="12" pos:column="16"/></name><argument_list pos:line="12" pos:column="16">(<argument><expr><name><name pos:line="12" pos:column="17">table<pos:position pos:line="12" pos:column="22"/></name><index pos:line="12" pos:column="22">[<expr><name pos:line="12" pos:column="23">n<pos:position pos:line="12" pos:column="24"/></name></expr>]<pos:position pos:line="12" pos:column="25"/></index></name><operator pos:line="12" pos:column="25">.<pos:position pos:line="12" pos:column="26"/></operator><name pos:line="12" pos:column="26">org_ptr<pos:position pos:line="12" pos:column="33"/></name></expr></argument>)<pos:position pos:line="12" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="35"/></expr_stmt>
        <while pos:line="13" pos:column="9">while <condition pos:line="13" pos:column="15">(<expr><operator pos:line="13" pos:column="16">++<pos:position pos:line="13" pos:column="18"/></operator><name pos:line="13" pos:column="18">n<pos:position pos:line="13" pos:column="19"/></name> <operator pos:line="13" pos:column="20">&lt;<pos:position pos:line="13" pos:column="24"/></operator> <name pos:line="13" pos:column="22">next_ptr<pos:position pos:line="13" pos:column="30"/></name></expr>)<pos:position pos:line="13" pos:column="31"/></condition> <block pos:line="13" pos:column="32">{
            <expr_stmt><expr><name><name pos:line="14" pos:column="13">table<pos:position pos:line="14" pos:column="18"/></name><index pos:line="14" pos:column="18">[<expr><name pos:line="14" pos:column="19">n<pos:position pos:line="14" pos:column="20"/></name><operator pos:line="14" pos:column="20">-<pos:position pos:line="14" pos:column="21"/></operator><literal type="number" pos:line="14" pos:column="21">1<pos:position pos:line="14" pos:column="22"/></literal></expr>]<pos:position pos:line="14" pos:column="23"/></index></name> <operator pos:line="14" pos:column="24">=<pos:position pos:line="14" pos:column="25"/></operator> <name><name pos:line="14" pos:column="26">table<pos:position pos:line="14" pos:column="31"/></name><index pos:line="14" pos:column="31">[<expr><name pos:line="14" pos:column="32">n<pos:position pos:line="14" pos:column="33"/></name></expr>]<pos:position pos:line="14" pos:column="34"/></index></name></expr>;<pos:position pos:line="14" pos:column="35"/></expr_stmt>
        }<pos:position pos:line="15" pos:column="10"/></block></while>
        <expr_stmt><expr><name pos:line="16" pos:column="9">next_ptr<pos:position pos:line="16" pos:column="17"/></name><operator pos:line="16" pos:column="17">--<pos:position pos:line="16" pos:column="19"/></operator></expr>;<pos:position pos:line="16" pos:column="20"/></expr_stmt>
        <return pos:line="17" pos:column="9">return;<pos:position pos:line="17" pos:column="16"/></return>
    }<pos:position pos:line="18" pos:column="6"/></block></for>
    <expr_stmt><expr><name pos:line="19" pos:column="5">ptr<pos:position pos:line="19" pos:column="8"/></name> <operator pos:line="19" pos:column="9">=<pos:position pos:line="19" pos:column="10"/></operator> <name pos:line="19" pos:column="11">opaque<pos:position pos:line="19" pos:column="17"/></name></expr>;<pos:position pos:line="19" pos:column="18"/></expr_stmt> <comment type="block" pos:line="19" pos:column="19">/* just to make some compilers happy */</comment>
    <expr_stmt><expr><call><name pos:line="20" pos:column="5">Assert<pos:position pos:line="20" pos:column="11"/></name><argument_list pos:line="20" pos:column="11">(<argument><expr><literal type="number" pos:line="20" pos:column="12">0<pos:position pos:line="20" pos:column="13"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="15">"zcfree: ptr not found"<pos:position pos:line="20" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="40"/></expr_stmt>
}<pos:position pos:line="21" pos:column="2"/></block></function></unit>
