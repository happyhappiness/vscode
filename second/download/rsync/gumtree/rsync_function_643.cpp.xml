<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_function_643.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">io_start_multiplex_in<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name pos:line="1" pos:column="28">int<pos:position pos:line="1" pos:column="31"/></name></type> <name pos:line="1" pos:column="32">fd<pos:position pos:line="1" pos:column="34"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="35"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<expr_stmt><expr><name pos:line="3" pos:column="9">multiplex_in_fd<pos:position pos:line="3" pos:column="24"/></name> <operator pos:line="3" pos:column="25">=<pos:position pos:line="3" pos:column="26"/></operator> <name pos:line="3" pos:column="27">fd<pos:position pos:line="3" pos:column="29"/></name></expr>;<pos:position pos:line="3" pos:column="30"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="4" pos:column="9">io_flush<pos:position pos:line="4" pos:column="17"/></name><argument_list pos:line="4" pos:column="17">()<pos:position pos:line="4" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="20"/></expr_stmt>
	<if pos:line="5" pos:column="9">if <condition pos:line="5" pos:column="12">(<expr><name pos:line="5" pos:column="13">read_buffer_len<pos:position pos:line="5" pos:column="28"/></name></expr>)<pos:position pos:line="5" pos:column="29"/></condition><then pos:line="5" pos:column="29"> <block pos:line="5" pos:column="30">{
		<expr_stmt><expr><call><name pos:line="6" pos:column="17">fprintf<pos:position pos:line="6" pos:column="24"/></name><argument_list pos:line="6" pos:column="24">(<argument><expr><name pos:line="6" pos:column="25">stderr<pos:position pos:line="6" pos:column="31"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="6" pos:column="32">"ERROR: data in read buffer at mplx start\n"<pos:position pos:line="6" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="78"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="7" pos:column="17">exit_cleanup<pos:position pos:line="7" pos:column="29"/></name><argument_list pos:line="7" pos:column="29">(<argument><expr><literal type="number" pos:line="7" pos:column="30">1<pos:position pos:line="7" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="33"/></expr_stmt>
	}<pos:position pos:line="8" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="10" pos:column="9">io_multiplexing_in<pos:position pos:line="10" pos:column="27"/></name> <operator pos:line="10" pos:column="28">=<pos:position pos:line="10" pos:column="29"/></operator> <literal type="number" pos:line="10" pos:column="30">1<pos:position pos:line="10" pos:column="31"/></literal></expr>;<pos:position pos:line="10" pos:column="32"/></expr_stmt>
}<pos:position pos:line="11" pos:column="2"/></block></function></unit>
