<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_631_last_repos.cpp" pos:tabs="8"><function_decl><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name> <name pos:line="1" pos:column="5">ZEXPORT<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">inflateInit2_<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><name pos:line="1" pos:column="27">strm<pos:position pos:line="1" pos:column="31"/></name></type></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="33">windowBits<pos:position pos:line="1" pos:column="43"/></name></type></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="45">version<pos:position pos:line="1" pos:column="52"/></name></type></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="54">stream_size<pos:position pos:line="1" pos:column="65"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="66"/></parameter_list>
<decl_stmt><decl><type><name pos:line="2" pos:column="1">z_streamp<pos:position pos:line="2" pos:column="10"/></name></type> <name pos:line="2" pos:column="11">strm<pos:position pos:line="2" pos:column="15"/></name></decl>;<pos:position pos:line="2" pos:column="16"/></decl_stmt>
<decl_stmt><decl><type><name pos:line="3" pos:column="1">int<pos:position pos:line="3" pos:column="4"/></name></type> <name pos:line="3" pos:column="5">windowBits<pos:position pos:line="3" pos:column="15"/></name></decl>;<pos:position pos:line="3" pos:column="16"/></decl_stmt>
<decl_stmt><decl><type><specifier pos:line="4" pos:column="1">const<pos:position pos:line="4" pos:column="6"/></specifier> <name pos:line="4" pos:column="7">char<pos:position pos:line="4" pos:column="11"/></name> <modifier pos:line="4" pos:column="12">*<pos:position pos:line="4" pos:column="13"/></modifier></type><name pos:line="4" pos:column="13">version<pos:position pos:line="4" pos:column="20"/></name></decl>;<pos:position pos:line="4" pos:column="21"/></decl_stmt>
<decl_stmt><decl><type><name pos:line="5" pos:column="1">int<pos:position pos:line="5" pos:column="4"/></name></type> <name pos:line="5" pos:column="5">stream_size<pos:position pos:line="5" pos:column="16"/></name></decl>;<pos:position pos:line="5" pos:column="17"/></decl_stmt>
<block pos:line="6" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">int<pos:position pos:line="7" pos:column="8"/></name></type> <name pos:line="7" pos:column="9">ret<pos:position pos:line="7" pos:column="12"/></name></decl>;<pos:position pos:line="7" pos:column="13"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="8" pos:column="5">struct<pos:position pos:line="8" pos:column="11"/></name> <name pos:line="8" pos:column="12">inflate_state<pos:position pos:line="8" pos:column="25"/></name></name> <name pos:line="8" pos:column="26">FAR<pos:position pos:line="8" pos:column="29"/></name> <modifier pos:line="8" pos:column="30">*<pos:position pos:line="8" pos:column="31"/></modifier></type><name pos:line="8" pos:column="31">state<pos:position pos:line="8" pos:column="36"/></name></decl>;<pos:position pos:line="8" pos:column="37"/></decl_stmt>

    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><name pos:line="10" pos:column="9">version<pos:position pos:line="10" pos:column="16"/></name> <operator pos:line="10" pos:column="17">==<pos:position pos:line="10" pos:column="19"/></operator> <name pos:line="10" pos:column="20">Z_NULL<pos:position pos:line="10" pos:column="26"/></name> <operator pos:line="10" pos:column="27">||<pos:position pos:line="10" pos:column="29"/></operator> <name><name pos:line="10" pos:column="30">version<pos:position pos:line="10" pos:column="37"/></name><index pos:line="10" pos:column="37">[<expr><literal type="number" pos:line="10" pos:column="38">0<pos:position pos:line="10" pos:column="39"/></literal></expr>]<pos:position pos:line="10" pos:column="40"/></index></name> <operator pos:line="10" pos:column="41">!=<pos:position pos:line="10" pos:column="43"/></operator> <name><name pos:line="10" pos:column="44">ZLIB_VERSION<pos:position pos:line="10" pos:column="56"/></name><index pos:line="10" pos:column="56">[<expr><literal type="number" pos:line="10" pos:column="57">0<pos:position pos:line="10" pos:column="58"/></literal></expr>]<pos:position pos:line="10" pos:column="59"/></index></name> <operator pos:line="10" pos:column="60">||<pos:position pos:line="10" pos:column="62"/></operator>
        <name pos:line="11" pos:column="9">stream_size<pos:position pos:line="11" pos:column="20"/></name> <operator pos:line="11" pos:column="21">!=<pos:position pos:line="11" pos:column="23"/></operator> <call pos:line="11" pos:column="24">(<name pos:line="11" pos:column="25">int<pos:position pos:line="11" pos:column="28"/></name>)<argument_list pos:line="11" pos:column="29">(<argument><expr><sizeof pos:line="11" pos:column="30">sizeof<argument_list pos:line="11" pos:column="36">(<argument><expr><name pos:line="11" pos:column="37">z_stream<pos:position pos:line="11" pos:column="45"/></name></expr></argument>)<pos:position pos:line="11" pos:column="46"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="11" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="48"/></condition><then pos:line="11" pos:column="48">
        <block type="pseudo"><return pos:line="12" pos:column="9">return <expr><name pos:line="12" pos:column="16">Z_VERSION_ERROR<pos:position pos:line="12" pos:column="31"/></name></expr>;<pos:position pos:line="12" pos:column="32"/></return></block></then></if>
    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><name pos:line="13" pos:column="9">strm<pos:position pos:line="13" pos:column="13"/></name> <operator pos:line="13" pos:column="14">==<pos:position pos:line="13" pos:column="16"/></operator> <name pos:line="13" pos:column="17">Z_NULL<pos:position pos:line="13" pos:column="23"/></name></expr>)<pos:position pos:line="13" pos:column="24"/></condition><then pos:line="13" pos:column="24"> <block type="pseudo"><return pos:line="13" pos:column="25">return <expr><name pos:line="13" pos:column="32">Z_STREAM_ERROR<pos:position pos:line="13" pos:column="46"/></name></expr>;<pos:position pos:line="13" pos:column="47"/></return></block></then></if>
    <expr_stmt><expr><name><name pos:line="14" pos:column="5">strm<pos:position pos:line="14" pos:column="9"/></name><operator pos:line="14" pos:column="9">-&gt;<pos:position pos:line="14" pos:column="14"/></operator><name pos:line="14" pos:column="11">msg<pos:position pos:line="14" pos:column="14"/></name></name> <operator pos:line="14" pos:column="15">=<pos:position pos:line="14" pos:column="16"/></operator> <name pos:line="14" pos:column="17">Z_NULL<pos:position pos:line="14" pos:column="23"/></name></expr>;<pos:position pos:line="14" pos:column="24"/></expr_stmt>                 <comment type="block" pos:line="14" pos:column="41">/* in case we return an error */</comment>
    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><name><name pos:line="15" pos:column="9">strm<pos:position pos:line="15" pos:column="13"/></name><operator pos:line="15" pos:column="13">-&gt;<pos:position pos:line="15" pos:column="18"/></operator><name pos:line="15" pos:column="15">zalloc<pos:position pos:line="15" pos:column="21"/></name></name> <operator pos:line="15" pos:column="22">==<pos:position pos:line="15" pos:column="24"/></operator> <operator pos:line="15" pos:column="25">(<pos:position pos:line="15" pos:column="26"/></operator><name pos:line="15" pos:column="26">alloc_func<pos:position pos:line="15" pos:column="36"/></name><operator pos:line="15" pos:column="36">)<pos:position pos:line="15" pos:column="37"/></operator><literal type="number" pos:line="15" pos:column="37">0<pos:position pos:line="15" pos:column="38"/></literal></expr>)<pos:position pos:line="15" pos:column="39"/></condition><then pos:line="15" pos:column="39"> <block pos:line="15" pos:column="40">{
<cpp:ifdef pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">ifdef<pos:position pos:line="16" pos:column="7"/></cpp:directive> <name pos:line="16" pos:column="8">Z_SOLO<pos:position pos:line="16" pos:column="14"/></name></cpp:ifdef>
        <return pos:line="17" pos:column="9">return <expr><name pos:line="17" pos:column="16">Z_STREAM_ERROR<pos:position pos:line="17" pos:column="30"/></name></expr>;<pos:position pos:line="17" pos:column="31"/></return>
<cpp:else pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">else<pos:position pos:line="18" pos:column="6"/></cpp:directive></cpp:else>
        <expr_stmt><expr><name><name pos:line="19" pos:column="9">strm<pos:position pos:line="19" pos:column="13"/></name><operator pos:line="19" pos:column="13">-&gt;<pos:position pos:line="19" pos:column="18"/></operator><name pos:line="19" pos:column="15">zalloc<pos:position pos:line="19" pos:column="21"/></name></name> <operator pos:line="19" pos:column="22">=<pos:position pos:line="19" pos:column="23"/></operator> <name pos:line="19" pos:column="24">zcalloc<pos:position pos:line="19" pos:column="31"/></name></expr>;<pos:position pos:line="19" pos:column="32"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="20" pos:column="9">strm<pos:position pos:line="20" pos:column="13"/></name><operator pos:line="20" pos:column="13">-&gt;<pos:position pos:line="20" pos:column="18"/></operator><name pos:line="20" pos:column="15">opaque<pos:position pos:line="20" pos:column="21"/></name></name> <operator pos:line="20" pos:column="22">=<pos:position pos:line="20" pos:column="23"/></operator> <operator pos:line="20" pos:column="24">(<pos:position pos:line="20" pos:column="25"/></operator><name pos:line="20" pos:column="25">voidpf<pos:position pos:line="20" pos:column="31"/></name><operator pos:line="20" pos:column="31">)<pos:position pos:line="20" pos:column="32"/></operator><literal type="number" pos:line="20" pos:column="32">0<pos:position pos:line="20" pos:column="33"/></literal></expr>;<pos:position pos:line="20" pos:column="34"/></expr_stmt>
<cpp:endif pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">endif<pos:position pos:line="21" pos:column="7"/></cpp:directive></cpp:endif>
    }<pos:position pos:line="22" pos:column="6"/></block></then></if>
    <if pos:line="23" pos:column="5">if <condition pos:line="23" pos:column="8">(<expr><name><name pos:line="23" pos:column="9">strm<pos:position pos:line="23" pos:column="13"/></name><operator pos:line="23" pos:column="13">-&gt;<pos:position pos:line="23" pos:column="18"/></operator><name pos:line="23" pos:column="15">zfree<pos:position pos:line="23" pos:column="20"/></name></name> <operator pos:line="23" pos:column="21">==<pos:position pos:line="23" pos:column="23"/></operator> <operator pos:line="23" pos:column="24">(<pos:position pos:line="23" pos:column="25"/></operator><name pos:line="23" pos:column="25">free_func<pos:position pos:line="23" pos:column="34"/></name><operator pos:line="23" pos:column="34">)<pos:position pos:line="23" pos:column="35"/></operator><literal type="number" pos:line="23" pos:column="35">0<pos:position pos:line="23" pos:column="36"/></literal></expr>)<pos:position pos:line="23" pos:column="37"/></condition><then pos:line="23" pos:column="37">
<cpp:ifdef pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">ifdef<pos:position pos:line="24" pos:column="7"/></cpp:directive> <name pos:line="24" pos:column="8">Z_SOLO<pos:position pos:line="24" pos:column="14"/></name></cpp:ifdef>
        <block type="pseudo"><return pos:line="25" pos:column="9">return <expr><name pos:line="25" pos:column="16">Z_STREAM_ERROR<pos:position pos:line="25" pos:column="30"/></name></expr>;<pos:position pos:line="25" pos:column="31"/></return></block></then></if>
<cpp:else pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">else<pos:position pos:line="26" pos:column="6"/></cpp:directive></cpp:else>
        <expr_stmt><expr><name><name pos:line="27" pos:column="9">strm<pos:position pos:line="27" pos:column="13"/></name><operator pos:line="27" pos:column="13">-&gt;<pos:position pos:line="27" pos:column="18"/></operator><name pos:line="27" pos:column="15">zfree<pos:position pos:line="27" pos:column="20"/></name></name> <operator pos:line="27" pos:column="21">=<pos:position pos:line="27" pos:column="22"/></operator> <name pos:line="27" pos:column="23">zcfree<pos:position pos:line="27" pos:column="29"/></name></expr>;<pos:position pos:line="27" pos:column="30"/></expr_stmt>
<cpp:endif pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">endif<pos:position pos:line="28" pos:column="7"/></cpp:directive></cpp:endif>
    <expr_stmt><expr><name pos:line="29" pos:column="5">state<pos:position pos:line="29" pos:column="10"/></name> <operator pos:line="29" pos:column="11">=<pos:position pos:line="29" pos:column="12"/></operator> <operator pos:line="29" pos:column="13">(<pos:position pos:line="29" pos:column="14"/></operator>struct <name pos:line="29" pos:column="21">inflate_state<pos:position pos:line="29" pos:column="34"/></name> <name pos:line="29" pos:column="35">FAR<pos:position pos:line="29" pos:column="38"/></name> <operator pos:line="29" pos:column="39">*<pos:position pos:line="29" pos:column="40"/></operator><operator pos:line="29" pos:column="40">)<pos:position pos:line="29" pos:column="41"/></operator>
            <call><name pos:line="30" pos:column="13">ZALLOC<pos:position pos:line="30" pos:column="19"/></name><argument_list pos:line="30" pos:column="19">(<argument><expr><name pos:line="30" pos:column="20">strm<pos:position pos:line="30" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="30" pos:column="26">1<pos:position pos:line="30" pos:column="27"/></literal></expr></argument>, <argument><expr><sizeof pos:line="30" pos:column="29">sizeof<argument_list pos:line="30" pos:column="35">(<argument><expr pos:line="30" pos:column="36">struct <name pos:line="30" pos:column="43">inflate_state<pos:position pos:line="30" pos:column="56"/></name></expr></argument>)<pos:position pos:line="30" pos:column="57"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="30" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="59"/></expr_stmt>
    <if pos:line="31" pos:column="5">if <condition pos:line="31" pos:column="8">(<expr><name pos:line="31" pos:column="9">state<pos:position pos:line="31" pos:column="14"/></name> <operator pos:line="31" pos:column="15">==<pos:position pos:line="31" pos:column="17"/></operator> <name pos:line="31" pos:column="18">Z_NULL<pos:position pos:line="31" pos:column="24"/></name></expr>)<pos:position pos:line="31" pos:column="25"/></condition><then pos:line="31" pos:column="25"> <block type="pseudo"><return pos:line="31" pos:column="26">return <expr><name pos:line="31" pos:column="33">Z_MEM_ERROR<pos:position pos:line="31" pos:column="44"/></name></expr>;<pos:position pos:line="31" pos:column="45"/></return></block></then></if>
    <expr_stmt><expr><call><name pos:line="32" pos:column="5">Tracev<pos:position pos:line="32" pos:column="11"/></name><argument_list pos:line="32" pos:column="11">(<argument><expr><operator pos:line="32" pos:column="12">(<pos:position pos:line="32" pos:column="13"/></operator><name pos:line="32" pos:column="13">stderr<pos:position pos:line="32" pos:column="19"/></name><operator pos:line="32" pos:column="19">,<pos:position pos:line="32" pos:column="20"/></operator> <literal type="string" pos:line="32" pos:column="21">"inflate: allocated\n"<pos:position pos:line="32" pos:column="43"/></literal><operator pos:line="32" pos:column="43">)<pos:position pos:line="32" pos:column="44"/></operator></expr></argument>)<pos:position pos:line="32" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="46"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="33" pos:column="5">strm<pos:position pos:line="33" pos:column="9"/></name><operator pos:line="33" pos:column="9">-&gt;<pos:position pos:line="33" pos:column="14"/></operator><name pos:line="33" pos:column="11">state<pos:position pos:line="33" pos:column="16"/></name></name> <operator pos:line="33" pos:column="17">=<pos:position pos:line="33" pos:column="18"/></operator> <operator pos:line="33" pos:column="19">(<pos:position pos:line="33" pos:column="20"/></operator>struct <name pos:line="33" pos:column="27">internal_state<pos:position pos:line="33" pos:column="41"/></name> <name pos:line="33" pos:column="42">FAR<pos:position pos:line="33" pos:column="45"/></name> <operator pos:line="33" pos:column="46">*<pos:position pos:line="33" pos:column="47"/></operator><operator pos:line="33" pos:column="47">)<pos:position pos:line="33" pos:column="48"/></operator><name pos:line="33" pos:column="48">state<pos:position pos:line="33" pos:column="53"/></name></expr>;<pos:position pos:line="33" pos:column="54"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="34" pos:column="5">state<pos:position pos:line="34" pos:column="10"/></name><operator pos:line="34" pos:column="10">-&gt;<pos:position pos:line="34" pos:column="15"/></operator><name pos:line="34" pos:column="12">window<pos:position pos:line="34" pos:column="18"/></name></name> <operator pos:line="34" pos:column="19">=<pos:position pos:line="34" pos:column="20"/></operator> <name pos:line="34" pos:column="21">Z_NULL<pos:position pos:line="34" pos:column="27"/></name></expr>;<pos:position pos:line="34" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><name pos:line="35" pos:column="5">ret<pos:position pos:line="35" pos:column="8"/></name> <operator pos:line="35" pos:column="9">=<pos:position pos:line="35" pos:column="10"/></operator> <call><name pos:line="35" pos:column="11">inflateReset2<pos:position pos:line="35" pos:column="24"/></name><argument_list pos:line="35" pos:column="24">(<argument><expr><name pos:line="35" pos:column="25">strm<pos:position pos:line="35" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="31">windowBits<pos:position pos:line="35" pos:column="41"/></name></expr></argument>)<pos:position pos:line="35" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="43"/></expr_stmt>
    <if pos:line="36" pos:column="5">if <condition pos:line="36" pos:column="8">(<expr><name pos:line="36" pos:column="9">ret<pos:position pos:line="36" pos:column="12"/></name> <operator pos:line="36" pos:column="13">!=<pos:position pos:line="36" pos:column="15"/></operator> <name pos:line="36" pos:column="16">Z_OK<pos:position pos:line="36" pos:column="20"/></name></expr>)<pos:position pos:line="36" pos:column="21"/></condition><then pos:line="36" pos:column="21"> <block pos:line="36" pos:column="22">{
        <expr_stmt><expr><call><name pos:line="37" pos:column="9">ZFREE<pos:position pos:line="37" pos:column="14"/></name><argument_list pos:line="37" pos:column="14">(<argument><expr><name pos:line="37" pos:column="15">strm<pos:position pos:line="37" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="21">state<pos:position pos:line="37" pos:column="26"/></name></expr></argument>)<pos:position pos:line="37" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="28"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="38" pos:column="9">strm<pos:position pos:line="38" pos:column="13"/></name><operator pos:line="38" pos:column="13">-&gt;<pos:position pos:line="38" pos:column="18"/></operator><name pos:line="38" pos:column="15">state<pos:position pos:line="38" pos:column="20"/></name></name> <operator pos:line="38" pos:column="21">=<pos:position pos:line="38" pos:column="22"/></operator> <name pos:line="38" pos:column="23">Z_NULL<pos:position pos:line="38" pos:column="29"/></name></expr>;<pos:position pos:line="38" pos:column="30"/></expr_stmt>
    }<pos:position pos:line="39" pos:column="6"/></block></then></if>
    <return pos:line="40" pos:column="5">return <expr><name pos:line="40" pos:column="12">ret<pos:position pos:line="40" pos:column="15"/></name></expr>;<pos:position pos:line="40" pos:column="16"/></return>
}<pos:position pos:line="41" pos:column="2"/></block></function_decl></unit>
