<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_function_782.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">make_exclude<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name><name pos:line="1" pos:column="26">struct<pos:position pos:line="1" pos:column="32"/></name> <name pos:line="1" pos:column="33">exclude_list_struct<pos:position pos:line="1" pos:column="52"/></name></name> <modifier pos:line="1" pos:column="53">*<pos:position pos:line="1" pos:column="54"/></modifier></type><name pos:line="1" pos:column="54">listp<pos:position pos:line="1" pos:column="59"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="61">const<pos:position pos:line="1" pos:column="66"/></specifier> <name pos:line="1" pos:column="67">char<pos:position pos:line="1" pos:column="71"/></name> <modifier pos:line="1" pos:column="72">*<pos:position pos:line="1" pos:column="73"/></modifier></type><name pos:line="1" pos:column="73">pat<pos:position pos:line="1" pos:column="76"/></name></decl></parameter>,
			 <parameter><decl><type><name pos:line="2" pos:column="26">unsigned<pos:position pos:line="2" pos:column="34"/></name> <name pos:line="2" pos:column="35">int<pos:position pos:line="2" pos:column="38"/></name></type> <name pos:line="2" pos:column="39">pat_len<pos:position pos:line="2" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="48">unsigned<pos:position pos:line="2" pos:column="56"/></name> <name pos:line="2" pos:column="57">int<pos:position pos:line="2" pos:column="60"/></name></type> <name pos:line="2" pos:column="61">mflags<pos:position pos:line="2" pos:column="67"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="68"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">exclude_struct<pos:position pos:line="4" pos:column="30"/></name></name> <modifier pos:line="4" pos:column="31">*<pos:position pos:line="4" pos:column="32"/></modifier></type><name pos:line="4" pos:column="32">ret<pos:position pos:line="4" pos:column="35"/></name></decl>;<pos:position pos:line="4" pos:column="36"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="5" pos:column="9">const<pos:position pos:line="5" pos:column="14"/></specifier> <name pos:line="5" pos:column="15">char<pos:position pos:line="5" pos:column="19"/></name> <modifier pos:line="5" pos:column="20">*<pos:position pos:line="5" pos:column="21"/></modifier></type><name pos:line="5" pos:column="21">cp<pos:position pos:line="5" pos:column="23"/></name></decl>;<pos:position pos:line="5" pos:column="24"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">unsigned<pos:position pos:line="6" pos:column="17"/></name> <name pos:line="6" pos:column="18">int<pos:position pos:line="6" pos:column="21"/></name></type> <name pos:line="6" pos:column="22">ex_len<pos:position pos:line="6" pos:column="28"/></name></decl>;<pos:position pos:line="6" pos:column="29"/></decl_stmt>

	<expr_stmt><expr><name pos:line="8" pos:column="9">ret<pos:position pos:line="8" pos:column="12"/></name> <operator pos:line="8" pos:column="13">=<pos:position pos:line="8" pos:column="14"/></operator> <operator pos:line="8" pos:column="15">new<pos:position pos:line="8" pos:column="18"/></operator><operator pos:line="8" pos:column="18">(<pos:position pos:line="8" pos:column="19"/></operator>struct <name pos:line="8" pos:column="26">exclude_struct<pos:position pos:line="8" pos:column="40"/></name><operator pos:line="8" pos:column="40">)<pos:position pos:line="8" pos:column="41"/></operator></expr>;<pos:position pos:line="8" pos:column="42"/></expr_stmt>
	<if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><operator pos:line="9" pos:column="13">!<pos:position pos:line="9" pos:column="14"/></operator><name pos:line="9" pos:column="14">ret<pos:position pos:line="9" pos:column="17"/></name></expr>)<pos:position pos:line="9" pos:column="18"/></condition><then pos:line="9" pos:column="18">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="10" pos:column="17">out_of_memory<pos:position pos:line="10" pos:column="30"/></name><argument_list pos:line="10" pos:column="30">(<argument><expr><literal type="string" pos:line="10" pos:column="31">"make_exclude"<pos:position pos:line="10" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="47"/></expr_stmt></block></then></if>

	<expr_stmt><expr><call><name pos:line="12" pos:column="9">memset<pos:position pos:line="12" pos:column="15"/></name><argument_list pos:line="12" pos:column="15">(<argument><expr><name pos:line="12" pos:column="16">ret<pos:position pos:line="12" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="12" pos:column="21">0<pos:position pos:line="12" pos:column="22"/></literal></expr></argument>, <argument><expr><sizeof pos:line="12" pos:column="24">sizeof <name><name pos:line="12" pos:column="31">ret<pos:position pos:line="12" pos:column="34"/></name><index pos:line="12" pos:column="34">[<expr><literal type="number" pos:line="12" pos:column="35">0<pos:position pos:line="12" pos:column="36"/></literal></expr>]<pos:position pos:line="12" pos:column="37"/></index></name></sizeof></expr></argument>)<pos:position pos:line="12" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="39"/></expr_stmt>

	<if pos:line="14" pos:column="9">if <condition pos:line="14" pos:column="12">(<expr><name pos:line="14" pos:column="13">exclude_path_prefix<pos:position pos:line="14" pos:column="32"/></name></expr>)<pos:position pos:line="14" pos:column="33"/></condition><then pos:line="14" pos:column="33">
		<block type="pseudo"><expr_stmt><expr><name pos:line="15" pos:column="17">mflags<pos:position pos:line="15" pos:column="23"/></name> <operator pos:line="15" pos:column="24">|=<pos:position pos:line="15" pos:column="26"/></operator> <name pos:line="15" pos:column="27">MATCHFLG_ABS_PATH<pos:position pos:line="15" pos:column="44"/></name></expr>;<pos:position pos:line="15" pos:column="45"/></expr_stmt></block></then></if>
	<if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><name pos:line="16" pos:column="13">exclude_path_prefix<pos:position pos:line="16" pos:column="32"/></name> <operator pos:line="16" pos:column="33">&amp;&amp;<pos:position pos:line="16" pos:column="43"/></operator> <operator pos:line="16" pos:column="36">*<pos:position pos:line="16" pos:column="37"/></operator><name pos:line="16" pos:column="37">pat<pos:position pos:line="16" pos:column="40"/></name> <operator pos:line="16" pos:column="41">==<pos:position pos:line="16" pos:column="43"/></operator> <literal type="char" pos:line="16" pos:column="44">'/'<pos:position pos:line="16" pos:column="47"/></literal></expr>)<pos:position pos:line="16" pos:column="48"/></condition><then pos:line="16" pos:column="48">
		<block type="pseudo"><expr_stmt><expr><name pos:line="17" pos:column="17">ex_len<pos:position pos:line="17" pos:column="23"/></name> <operator pos:line="17" pos:column="24">=<pos:position pos:line="17" pos:column="25"/></operator> <call><name pos:line="17" pos:column="26">strlen<pos:position pos:line="17" pos:column="32"/></name><argument_list pos:line="17" pos:column="32">(<argument><expr><name pos:line="17" pos:column="33">exclude_path_prefix<pos:position pos:line="17" pos:column="52"/></name></expr></argument>)<pos:position pos:line="17" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="54"/></expr_stmt></block></then>
	<else pos:line="18" pos:column="9">else
		<block type="pseudo"><expr_stmt><expr><name pos:line="19" pos:column="17">ex_len<pos:position pos:line="19" pos:column="23"/></name> <operator pos:line="19" pos:column="24">=<pos:position pos:line="19" pos:column="25"/></operator> <literal type="number" pos:line="19" pos:column="26">0<pos:position pos:line="19" pos:column="27"/></literal></expr>;<pos:position pos:line="19" pos:column="28"/></expr_stmt></block></else></if>
	<expr_stmt><expr><name><name pos:line="20" pos:column="9">ret<pos:position pos:line="20" pos:column="12"/></name><operator pos:line="20" pos:column="12">-&gt;<pos:position pos:line="20" pos:column="17"/></operator><name pos:line="20" pos:column="14">pattern<pos:position pos:line="20" pos:column="21"/></name></name> <operator pos:line="20" pos:column="22">=<pos:position pos:line="20" pos:column="23"/></operator> <call><name pos:line="20" pos:column="24">new_array<pos:position pos:line="20" pos:column="33"/></name><argument_list pos:line="20" pos:column="33">(<argument><expr><name pos:line="20" pos:column="34">char<pos:position pos:line="20" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="40">ex_len<pos:position pos:line="20" pos:column="46"/></name> <operator pos:line="20" pos:column="47">+<pos:position pos:line="20" pos:column="48"/></operator> <name pos:line="20" pos:column="49">pat_len<pos:position pos:line="20" pos:column="56"/></name> <operator pos:line="20" pos:column="57">+<pos:position pos:line="20" pos:column="58"/></operator> <literal type="number" pos:line="20" pos:column="59">1<pos:position pos:line="20" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="62"/></expr_stmt>
	<if pos:line="21" pos:column="9">if <condition pos:line="21" pos:column="12">(<expr><operator pos:line="21" pos:column="13">!<pos:position pos:line="21" pos:column="14"/></operator><name><name pos:line="21" pos:column="14">ret<pos:position pos:line="21" pos:column="17"/></name><operator pos:line="21" pos:column="17">-&gt;<pos:position pos:line="21" pos:column="22"/></operator><name pos:line="21" pos:column="19">pattern<pos:position pos:line="21" pos:column="26"/></name></name></expr>)<pos:position pos:line="21" pos:column="27"/></condition><then pos:line="21" pos:column="27">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="22" pos:column="17">out_of_memory<pos:position pos:line="22" pos:column="30"/></name><argument_list pos:line="22" pos:column="30">(<argument><expr><literal type="string" pos:line="22" pos:column="31">"make_exclude"<pos:position pos:line="22" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="47"/></expr_stmt></block></then></if>
	<if pos:line="23" pos:column="9">if <condition pos:line="23" pos:column="12">(<expr><name pos:line="23" pos:column="13">ex_len<pos:position pos:line="23" pos:column="19"/></name></expr>)<pos:position pos:line="23" pos:column="20"/></condition><then pos:line="23" pos:column="20">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="24" pos:column="17">memcpy<pos:position pos:line="24" pos:column="23"/></name><argument_list pos:line="24" pos:column="23">(<argument><expr><name><name pos:line="24" pos:column="24">ret<pos:position pos:line="24" pos:column="27"/></name><operator pos:line="24" pos:column="27">-&gt;<pos:position pos:line="24" pos:column="32"/></operator><name pos:line="24" pos:column="29">pattern<pos:position pos:line="24" pos:column="36"/></name></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="38">exclude_path_prefix<pos:position pos:line="24" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="59">ex_len<pos:position pos:line="24" pos:column="65"/></name></expr></argument>)<pos:position pos:line="24" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="67"/></expr_stmt></block></then></if>
	<expr_stmt><expr><call><name pos:line="25" pos:column="9">strlcpy<pos:position pos:line="25" pos:column="16"/></name><argument_list pos:line="25" pos:column="16">(<argument><expr><name><name pos:line="25" pos:column="17">ret<pos:position pos:line="25" pos:column="20"/></name><operator pos:line="25" pos:column="20">-&gt;<pos:position pos:line="25" pos:column="25"/></operator><name pos:line="25" pos:column="22">pattern<pos:position pos:line="25" pos:column="29"/></name></name> <operator pos:line="25" pos:column="30">+<pos:position pos:line="25" pos:column="31"/></operator> <name pos:line="25" pos:column="32">ex_len<pos:position pos:line="25" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="40">pat<pos:position pos:line="25" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="45">pat_len<pos:position pos:line="25" pos:column="52"/></name> <operator pos:line="25" pos:column="53">+<pos:position pos:line="25" pos:column="54"/></operator> <literal type="number" pos:line="25" pos:column="55">1<pos:position pos:line="25" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="58"/></expr_stmt>
	<expr_stmt><expr><name pos:line="26" pos:column="9">pat_len<pos:position pos:line="26" pos:column="16"/></name> <operator pos:line="26" pos:column="17">+=<pos:position pos:line="26" pos:column="19"/></operator> <name pos:line="26" pos:column="20">ex_len<pos:position pos:line="26" pos:column="26"/></name></expr>;<pos:position pos:line="26" pos:column="27"/></expr_stmt>

	<if pos:line="28" pos:column="9">if <condition pos:line="28" pos:column="12">(<expr><call><name pos:line="28" pos:column="13">strpbrk<pos:position pos:line="28" pos:column="20"/></name><argument_list pos:line="28" pos:column="20">(<argument><expr><name><name pos:line="28" pos:column="21">ret<pos:position pos:line="28" pos:column="24"/></name><operator pos:line="28" pos:column="24">-&gt;<pos:position pos:line="28" pos:column="29"/></operator><name pos:line="28" pos:column="26">pattern<pos:position pos:line="28" pos:column="33"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="28" pos:column="35">"*[?"<pos:position pos:line="28" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="28" pos:column="42"/></condition><then pos:line="28" pos:column="42"> <block pos:line="28" pos:column="43">{
		<expr_stmt><expr><name pos:line="29" pos:column="17">mflags<pos:position pos:line="29" pos:column="23"/></name> <operator pos:line="29" pos:column="24">|=<pos:position pos:line="29" pos:column="26"/></operator> <name pos:line="29" pos:column="27">MATCHFLG_WILD<pos:position pos:line="29" pos:column="40"/></name></expr>;<pos:position pos:line="29" pos:column="41"/></expr_stmt>
		<if pos:line="30" pos:column="17">if <condition pos:line="30" pos:column="20">(<expr><operator pos:line="30" pos:column="21">(<pos:position pos:line="30" pos:column="22"/></operator><name pos:line="30" pos:column="22">cp<pos:position pos:line="30" pos:column="24"/></name> <operator pos:line="30" pos:column="25">=<pos:position pos:line="30" pos:column="26"/></operator> <call><name pos:line="30" pos:column="27">strstr<pos:position pos:line="30" pos:column="33"/></name><argument_list pos:line="30" pos:column="33">(<argument><expr><name><name pos:line="30" pos:column="34">ret<pos:position pos:line="30" pos:column="37"/></name><operator pos:line="30" pos:column="37">-&gt;<pos:position pos:line="30" pos:column="42"/></operator><name pos:line="30" pos:column="39">pattern<pos:position pos:line="30" pos:column="46"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="30" pos:column="48">"**"<pos:position pos:line="30" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="53"/></argument_list></call><operator pos:line="30" pos:column="53">)<pos:position pos:line="30" pos:column="54"/></operator> <operator pos:line="30" pos:column="55">!=<pos:position pos:line="30" pos:column="57"/></operator> <name pos:line="30" pos:column="58">NULL<pos:position pos:line="30" pos:column="62"/></name></expr>)<pos:position pos:line="30" pos:column="63"/></condition><then pos:line="30" pos:column="63"> <block pos:line="30" pos:column="64">{
			<expr_stmt><expr><name pos:line="31" pos:column="25">mflags<pos:position pos:line="31" pos:column="31"/></name> <operator pos:line="31" pos:column="32">|=<pos:position pos:line="31" pos:column="34"/></operator> <name pos:line="31" pos:column="35">MATCHFLG_WILD2<pos:position pos:line="31" pos:column="49"/></name></expr>;<pos:position pos:line="31" pos:column="50"/></expr_stmt>
			<comment type="block" pos:line="32" pos:column="25">/* If the pattern starts with **, note that. */</comment>
			<if pos:line="33" pos:column="25">if <condition pos:line="33" pos:column="28">(<expr><name pos:line="33" pos:column="29">cp<pos:position pos:line="33" pos:column="31"/></name> <operator pos:line="33" pos:column="32">==<pos:position pos:line="33" pos:column="34"/></operator> <name><name pos:line="33" pos:column="35">ret<pos:position pos:line="33" pos:column="38"/></name><operator pos:line="33" pos:column="38">-&gt;<pos:position pos:line="33" pos:column="43"/></operator><name pos:line="33" pos:column="40">pattern<pos:position pos:line="33" pos:column="47"/></name></name></expr>)<pos:position pos:line="33" pos:column="48"/></condition><then pos:line="33" pos:column="48">
				<block type="pseudo"><expr_stmt><expr><name pos:line="34" pos:column="33">mflags<pos:position pos:line="34" pos:column="39"/></name> <operator pos:line="34" pos:column="40">|=<pos:position pos:line="34" pos:column="42"/></operator> <name pos:line="34" pos:column="43">MATCHFLG_WILD2_PREFIX<pos:position pos:line="34" pos:column="64"/></name></expr>;<pos:position pos:line="34" pos:column="65"/></expr_stmt></block></then></if>
		}<pos:position pos:line="35" pos:column="18"/></block></then></if>
	}<pos:position pos:line="36" pos:column="10"/></block></then></if>

	<if pos:line="38" pos:column="9">if <condition pos:line="38" pos:column="12">(<expr><name pos:line="38" pos:column="13">pat_len<pos:position pos:line="38" pos:column="20"/></name> <operator pos:line="38" pos:column="21">&gt;<pos:position pos:line="38" pos:column="25"/></operator> <literal type="number" pos:line="38" pos:column="23">1<pos:position pos:line="38" pos:column="24"/></literal> <operator pos:line="38" pos:column="25">&amp;&amp;<pos:position pos:line="38" pos:column="35"/></operator> <name><name pos:line="38" pos:column="28">ret<pos:position pos:line="38" pos:column="31"/></name><operator pos:line="38" pos:column="31">-&gt;<pos:position pos:line="38" pos:column="36"/></operator><name pos:line="38" pos:column="33">pattern<pos:position pos:line="38" pos:column="40"/></name><index pos:line="38" pos:column="40">[<expr><name pos:line="38" pos:column="41">pat_len<pos:position pos:line="38" pos:column="48"/></name><operator pos:line="38" pos:column="48">-<pos:position pos:line="38" pos:column="49"/></operator><literal type="number" pos:line="38" pos:column="49">1<pos:position pos:line="38" pos:column="50"/></literal></expr>]<pos:position pos:line="38" pos:column="51"/></index></name> <operator pos:line="38" pos:column="52">==<pos:position pos:line="38" pos:column="54"/></operator> <literal type="char" pos:line="38" pos:column="55">'/'<pos:position pos:line="38" pos:column="58"/></literal></expr>)<pos:position pos:line="38" pos:column="59"/></condition><then pos:line="38" pos:column="59"> <block pos:line="38" pos:column="60">{
		<expr_stmt><expr><name><name pos:line="39" pos:column="17">ret<pos:position pos:line="39" pos:column="20"/></name><operator pos:line="39" pos:column="20">-&gt;<pos:position pos:line="39" pos:column="25"/></operator><name pos:line="39" pos:column="22">pattern<pos:position pos:line="39" pos:column="29"/></name><index pos:line="39" pos:column="29">[<expr><name pos:line="39" pos:column="30">pat_len<pos:position pos:line="39" pos:column="37"/></name><operator pos:line="39" pos:column="37">-<pos:position pos:line="39" pos:column="38"/></operator><literal type="number" pos:line="39" pos:column="38">1<pos:position pos:line="39" pos:column="39"/></literal></expr>]<pos:position pos:line="39" pos:column="40"/></index></name> <operator pos:line="39" pos:column="41">=<pos:position pos:line="39" pos:column="42"/></operator> <literal type="number" pos:line="39" pos:column="43">0<pos:position pos:line="39" pos:column="44"/></literal></expr>;<pos:position pos:line="39" pos:column="45"/></expr_stmt>
		<expr_stmt><expr><name pos:line="40" pos:column="17">mflags<pos:position pos:line="40" pos:column="23"/></name> <operator pos:line="40" pos:column="24">|=<pos:position pos:line="40" pos:column="26"/></operator> <name pos:line="40" pos:column="27">MATCHFLG_DIRECTORY<pos:position pos:line="40" pos:column="45"/></name></expr>;<pos:position pos:line="40" pos:column="46"/></expr_stmt>
	}<pos:position pos:line="41" pos:column="10"/></block></then></if>

	<for pos:line="43" pos:column="9">for <control pos:line="43" pos:column="13">(<init><expr><name pos:line="43" pos:column="14">cp<pos:position pos:line="43" pos:column="16"/></name> <operator pos:line="43" pos:column="17">=<pos:position pos:line="43" pos:column="18"/></operator> <name><name pos:line="43" pos:column="19">ret<pos:position pos:line="43" pos:column="22"/></name><operator pos:line="43" pos:column="22">-&gt;<pos:position pos:line="43" pos:column="27"/></operator><name pos:line="43" pos:column="24">pattern<pos:position pos:line="43" pos:column="31"/></name></name></expr>;<pos:position pos:line="43" pos:column="32"/></init> <condition><expr><operator pos:line="43" pos:column="33">(<pos:position pos:line="43" pos:column="34"/></operator><name pos:line="43" pos:column="34">cp<pos:position pos:line="43" pos:column="36"/></name> <operator pos:line="43" pos:column="37">=<pos:position pos:line="43" pos:column="38"/></operator> <call><name pos:line="43" pos:column="39">strchr<pos:position pos:line="43" pos:column="45"/></name><argument_list pos:line="43" pos:column="45">(<argument><expr><name pos:line="43" pos:column="46">cp<pos:position pos:line="43" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="43" pos:column="50">'/'<pos:position pos:line="43" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="54"/></argument_list></call><operator pos:line="43" pos:column="54">)<pos:position pos:line="43" pos:column="55"/></operator> <operator pos:line="43" pos:column="56">!=<pos:position pos:line="43" pos:column="58"/></operator> <name pos:line="43" pos:column="59">NULL<pos:position pos:line="43" pos:column="63"/></name></expr>;<pos:position pos:line="43" pos:column="64"/></condition> <incr><expr><name pos:line="43" pos:column="65">cp<pos:position pos:line="43" pos:column="67"/></name><operator pos:line="43" pos:column="67">++<pos:position pos:line="43" pos:column="69"/></operator></expr></incr>)<pos:position pos:line="43" pos:column="70"/></control>
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="44" pos:column="17">ret<pos:position pos:line="44" pos:column="20"/></name><operator pos:line="44" pos:column="20">-&gt;<pos:position pos:line="44" pos:column="25"/></operator><name pos:line="44" pos:column="22">slash_cnt<pos:position pos:line="44" pos:column="31"/></name></name><operator pos:line="44" pos:column="31">++<pos:position pos:line="44" pos:column="33"/></operator></expr>;<pos:position pos:line="44" pos:column="34"/></expr_stmt></block></for>

	<expr_stmt><expr><name><name pos:line="46" pos:column="9">ret<pos:position pos:line="46" pos:column="12"/></name><operator pos:line="46" pos:column="12">-&gt;<pos:position pos:line="46" pos:column="17"/></operator><name pos:line="46" pos:column="14">match_flags<pos:position pos:line="46" pos:column="25"/></name></name> <operator pos:line="46" pos:column="26">=<pos:position pos:line="46" pos:column="27"/></operator> <name pos:line="46" pos:column="28">mflags<pos:position pos:line="46" pos:column="34"/></name></expr>;<pos:position pos:line="46" pos:column="35"/></expr_stmt>

	<if pos:line="48" pos:column="9">if <condition pos:line="48" pos:column="12">(<expr><operator pos:line="48" pos:column="13">!<pos:position pos:line="48" pos:column="14"/></operator><name><name pos:line="48" pos:column="14">listp<pos:position pos:line="48" pos:column="19"/></name><operator pos:line="48" pos:column="19">-&gt;<pos:position pos:line="48" pos:column="24"/></operator><name pos:line="48" pos:column="21">tail<pos:position pos:line="48" pos:column="25"/></name></name></expr>)<pos:position pos:line="48" pos:column="26"/></condition><then pos:line="48" pos:column="26">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="49" pos:column="17">listp<pos:position pos:line="49" pos:column="22"/></name><operator pos:line="49" pos:column="22">-&gt;<pos:position pos:line="49" pos:column="27"/></operator><name pos:line="49" pos:column="24">head<pos:position pos:line="49" pos:column="28"/></name></name> <operator pos:line="49" pos:column="29">=<pos:position pos:line="49" pos:column="30"/></operator> <name><name pos:line="49" pos:column="31">listp<pos:position pos:line="49" pos:column="36"/></name><operator pos:line="49" pos:column="36">-&gt;<pos:position pos:line="49" pos:column="41"/></operator><name pos:line="49" pos:column="38">tail<pos:position pos:line="49" pos:column="42"/></name></name> <operator pos:line="49" pos:column="43">=<pos:position pos:line="49" pos:column="44"/></operator> <name pos:line="49" pos:column="45">ret<pos:position pos:line="49" pos:column="48"/></name></expr>;<pos:position pos:line="49" pos:column="49"/></expr_stmt></block></then>
	<else pos:line="50" pos:column="9">else <block pos:line="50" pos:column="14">{
		<expr_stmt><expr><name><name pos:line="51" pos:column="17">listp<pos:position pos:line="51" pos:column="22"/></name><operator pos:line="51" pos:column="22">-&gt;<pos:position pos:line="51" pos:column="27"/></operator><name pos:line="51" pos:column="24">tail<pos:position pos:line="51" pos:column="28"/></name><operator pos:line="51" pos:column="28">-&gt;<pos:position pos:line="51" pos:column="33"/></operator><name pos:line="51" pos:column="30">next<pos:position pos:line="51" pos:column="34"/></name></name> <operator pos:line="51" pos:column="35">=<pos:position pos:line="51" pos:column="36"/></operator> <name pos:line="51" pos:column="37">ret<pos:position pos:line="51" pos:column="40"/></name></expr>;<pos:position pos:line="51" pos:column="41"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="52" pos:column="17">listp<pos:position pos:line="52" pos:column="22"/></name><operator pos:line="52" pos:column="22">-&gt;<pos:position pos:line="52" pos:column="27"/></operator><name pos:line="52" pos:column="24">tail<pos:position pos:line="52" pos:column="28"/></name></name> <operator pos:line="52" pos:column="29">=<pos:position pos:line="52" pos:column="30"/></operator> <name pos:line="52" pos:column="31">ret<pos:position pos:line="52" pos:column="34"/></name></expr>;<pos:position pos:line="52" pos:column="35"/></expr_stmt>
	}<pos:position pos:line="53" pos:column="10"/></block></else></if>
}<pos:position pos:line="54" pos:column="2"/></block></function></unit>
