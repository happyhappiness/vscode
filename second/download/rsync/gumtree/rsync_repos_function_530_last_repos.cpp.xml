<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_530_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name><name pos:line="1" pos:column="8">struct<pos:position pos:line="1" pos:column="14"/></name> <name pos:line="1" pos:column="15">file_struct<pos:position pos:line="1" pos:column="26"/></name></name> <modifier pos:line="1" pos:column="27">*<pos:position pos:line="1" pos:column="28"/></modifier></type><name pos:line="1" pos:column="28">send_file_name<pos:position pos:line="1" pos:column="42"/></name><parameter_list pos:line="1" pos:column="42">(<parameter><decl><type><name pos:line="1" pos:column="43">int<pos:position pos:line="1" pos:column="46"/></name></type> <name pos:line="1" pos:column="47">f<pos:position pos:line="1" pos:column="48"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="50">struct<pos:position pos:line="1" pos:column="56"/></name> <name pos:line="1" pos:column="57">file_list<pos:position pos:line="1" pos:column="66"/></name></name> <modifier pos:line="1" pos:column="67">*<pos:position pos:line="1" pos:column="68"/></modifier></type><name pos:line="1" pos:column="68">flist<pos:position pos:line="1" pos:column="73"/></name></decl></parameter>,
					  <parameter><decl><type><specifier pos:line="2" pos:column="43">const<pos:position pos:line="2" pos:column="48"/></specifier> <name pos:line="2" pos:column="49">char<pos:position pos:line="2" pos:column="53"/></name> <modifier pos:line="2" pos:column="54">*<pos:position pos:line="2" pos:column="55"/></modifier></type><name pos:line="2" pos:column="55">fname<pos:position pos:line="2" pos:column="60"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="62">STRUCT_STAT<pos:position pos:line="2" pos:column="73"/></name> <modifier pos:line="2" pos:column="74">*<pos:position pos:line="2" pos:column="75"/></modifier></type><name pos:line="2" pos:column="75">stp<pos:position pos:line="2" pos:column="78"/></name></decl></parameter>,
					  <parameter><decl><type><name pos:line="3" pos:column="43">int<pos:position pos:line="3" pos:column="46"/></name></type> <name pos:line="3" pos:column="47">flags<pos:position pos:line="3" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="54">int<pos:position pos:line="3" pos:column="57"/></name></type> <name pos:line="3" pos:column="58">filter_level<pos:position pos:line="3" pos:column="70"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="71"/></parameter_list>
<block pos:line="4" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">file_struct<pos:position pos:line="5" pos:column="27"/></name></name> <modifier pos:line="5" pos:column="28">*<pos:position pos:line="5" pos:column="29"/></modifier></type><name pos:line="5" pos:column="29">file<pos:position pos:line="5" pos:column="33"/></name></decl>;<pos:position pos:line="5" pos:column="34"/></decl_stmt>

	<expr_stmt><expr><name pos:line="7" pos:column="9">file<pos:position pos:line="7" pos:column="13"/></name> <operator pos:line="7" pos:column="14">=<pos:position pos:line="7" pos:column="15"/></operator> <call><name pos:line="7" pos:column="16">make_file<pos:position pos:line="7" pos:column="25"/></name><argument_list pos:line="7" pos:column="25">(<argument><expr><name pos:line="7" pos:column="26">fname<pos:position pos:line="7" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="33">flist<pos:position pos:line="7" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="40">stp<pos:position pos:line="7" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="45">flags<pos:position pos:line="7" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="52">filter_level<pos:position pos:line="7" pos:column="64"/></name></expr></argument>)<pos:position pos:line="7" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="66"/></expr_stmt>
	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><operator pos:line="8" pos:column="13">!<pos:position pos:line="8" pos:column="14"/></operator><name pos:line="8" pos:column="14">file<pos:position pos:line="8" pos:column="18"/></name></expr>)<pos:position pos:line="8" pos:column="19"/></condition><then pos:line="8" pos:column="19">
		<block type="pseudo"><return pos:line="9" pos:column="17">return <expr><name pos:line="9" pos:column="24">NULL<pos:position pos:line="9" pos:column="28"/></name></expr>;<pos:position pos:line="9" pos:column="29"/></return></block></then></if>

	<if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><name pos:line="11" pos:column="13">chmod_modes<pos:position pos:line="11" pos:column="24"/></name> <operator pos:line="11" pos:column="25">&amp;&amp;<pos:position pos:line="11" pos:column="35"/></operator> <operator pos:line="11" pos:column="28">!<pos:position pos:line="11" pos:column="29"/></operator><call><name pos:line="11" pos:column="29">S_ISLNK<pos:position pos:line="11" pos:column="36"/></name><argument_list pos:line="11" pos:column="36">(<argument><expr><name><name pos:line="11" pos:column="37">file<pos:position pos:line="11" pos:column="41"/></name><operator pos:line="11" pos:column="41">-&gt;<pos:position pos:line="11" pos:column="46"/></operator><name pos:line="11" pos:column="43">mode<pos:position pos:line="11" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="11" pos:column="48"/></argument_list></call> <operator pos:line="11" pos:column="49">&amp;&amp;<pos:position pos:line="11" pos:column="59"/></operator> <name><name pos:line="11" pos:column="52">file<pos:position pos:line="11" pos:column="56"/></name><operator pos:line="11" pos:column="56">-&gt;<pos:position pos:line="11" pos:column="61"/></operator><name pos:line="11" pos:column="58">mode<pos:position pos:line="11" pos:column="62"/></name></name></expr>)<pos:position pos:line="11" pos:column="63"/></condition><then pos:line="11" pos:column="63">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="12" pos:column="17">file<pos:position pos:line="12" pos:column="21"/></name><operator pos:line="12" pos:column="21">-&gt;<pos:position pos:line="12" pos:column="26"/></operator><name pos:line="12" pos:column="23">mode<pos:position pos:line="12" pos:column="27"/></name></name> <operator pos:line="12" pos:column="28">=<pos:position pos:line="12" pos:column="29"/></operator> <call><name pos:line="12" pos:column="30">tweak_mode<pos:position pos:line="12" pos:column="40"/></name><argument_list pos:line="12" pos:column="40">(<argument><expr><name><name pos:line="12" pos:column="41">file<pos:position pos:line="12" pos:column="45"/></name><operator pos:line="12" pos:column="45">-&gt;<pos:position pos:line="12" pos:column="50"/></operator><name pos:line="12" pos:column="47">mode<pos:position pos:line="12" pos:column="51"/></name></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="53">chmod_modes<pos:position pos:line="12" pos:column="64"/></name></expr></argument>)<pos:position pos:line="12" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="66"/></expr_stmt></block></then></if>

	<if pos:line="14" pos:column="9">if <condition pos:line="14" pos:column="12">(<expr><name pos:line="14" pos:column="13">f<pos:position pos:line="14" pos:column="14"/></name> <operator pos:line="14" pos:column="15">&gt;=<pos:position pos:line="14" pos:column="20"/></operator> <literal type="number" pos:line="14" pos:column="18">0<pos:position pos:line="14" pos:column="19"/></literal></expr>)<pos:position pos:line="14" pos:column="20"/></condition><then pos:line="14" pos:column="20"> <block pos:line="14" pos:column="21">{
		<decl_stmt><decl><type><name pos:line="15" pos:column="17">char<pos:position pos:line="15" pos:column="21"/></name></type> <name><name pos:line="15" pos:column="22">fbuf<pos:position pos:line="15" pos:column="26"/></name><index pos:line="15" pos:column="26">[<expr><name pos:line="15" pos:column="27">MAXPATHLEN<pos:position pos:line="15" pos:column="37"/></name></expr>]<pos:position pos:line="15" pos:column="38"/></index></name></decl>;<pos:position pos:line="15" pos:column="39"/></decl_stmt>
<cpp:ifdef pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">ifdef<pos:position pos:line="16" pos:column="7"/></cpp:directive> <name pos:line="16" pos:column="8">SUPPORT_LINKS<pos:position pos:line="16" pos:column="21"/></name></cpp:ifdef>
		<decl_stmt><decl><type><specifier pos:line="17" pos:column="17">const<pos:position pos:line="17" pos:column="22"/></specifier> <name pos:line="17" pos:column="23">char<pos:position pos:line="17" pos:column="27"/></name> <modifier pos:line="17" pos:column="28">*<pos:position pos:line="17" pos:column="29"/></modifier></type><name pos:line="17" pos:column="29">symlink_name<pos:position pos:line="17" pos:column="41"/></name></decl>;<pos:position pos:line="17" pos:column="42"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="18" pos:column="17">int<pos:position pos:line="18" pos:column="20"/></name></type> <name pos:line="18" pos:column="21">symlink_len<pos:position pos:line="18" pos:column="32"/></name></decl>;<pos:position pos:line="18" pos:column="33"/></decl_stmt>
<cpp:ifdef pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">ifdef<pos:position pos:line="19" pos:column="7"/></cpp:directive> <name pos:line="19" pos:column="8">ICONV_OPTION<pos:position pos:line="19" pos:column="20"/></name></cpp:ifdef>
		<decl_stmt><decl><type><name pos:line="20" pos:column="17">char<pos:position pos:line="20" pos:column="21"/></name></type> <name><name pos:line="20" pos:column="22">symlink_buf<pos:position pos:line="20" pos:column="33"/></name><index pos:line="20" pos:column="33">[<expr><name pos:line="20" pos:column="34">MAXPATHLEN<pos:position pos:line="20" pos:column="44"/></name></expr>]<pos:position pos:line="20" pos:column="45"/></index></name></decl>;<pos:position pos:line="20" pos:column="46"/></decl_stmt>
<cpp:endif pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">endif<pos:position pos:line="21" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:endif pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">endif<pos:position pos:line="22" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:if pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">if<pos:position pos:line="23" pos:column="4"/></cpp:directive> <expr><name pos:line="23" pos:column="5">defined<pos:position pos:line="23" pos:column="12"/></name> <name pos:line="23" pos:column="13">SUPPORT_ACLS<pos:position pos:line="23" pos:column="25"/></name> <operator pos:line="23" pos:column="26">||<pos:position pos:line="23" pos:column="28"/></operator> <name pos:line="23" pos:column="29">defined<pos:position pos:line="23" pos:column="36"/></name> <name pos:line="23" pos:column="37">SUPPORT_XATTRS<pos:position pos:line="23" pos:column="51"/></name></expr></cpp:if>
		<decl_stmt><decl><type><name pos:line="24" pos:column="17">stat_x<pos:position pos:line="24" pos:column="23"/></name></type> <name pos:line="24" pos:column="24">sx<pos:position pos:line="24" pos:column="26"/></name></decl>;<pos:position pos:line="24" pos:column="27"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="25" pos:column="17">init_stat_x<pos:position pos:line="25" pos:column="28"/></name><argument_list pos:line="25" pos:column="28">(<argument><expr><operator pos:line="25" pos:column="29">&amp;<pos:position pos:line="25" pos:column="34"/></operator><name pos:line="25" pos:column="30">sx<pos:position pos:line="25" pos:column="32"/></name></expr></argument>)<pos:position pos:line="25" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="34"/></expr_stmt>
<cpp:endif pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">endif<pos:position pos:line="26" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:ifdef pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">ifdef<pos:position pos:line="28" pos:column="7"/></cpp:directive> <name pos:line="28" pos:column="8">SUPPORT_LINKS<pos:position pos:line="28" pos:column="21"/></name></cpp:ifdef>
		<if pos:line="29" pos:column="17">if <condition pos:line="29" pos:column="20">(<expr><name pos:line="29" pos:column="21">preserve_links<pos:position pos:line="29" pos:column="35"/></name> <operator pos:line="29" pos:column="36">&amp;&amp;<pos:position pos:line="29" pos:column="46"/></operator> <call><name pos:line="29" pos:column="39">S_ISLNK<pos:position pos:line="29" pos:column="46"/></name><argument_list pos:line="29" pos:column="46">(<argument><expr><name><name pos:line="29" pos:column="47">file<pos:position pos:line="29" pos:column="51"/></name><operator pos:line="29" pos:column="51">-&gt;<pos:position pos:line="29" pos:column="56"/></operator><name pos:line="29" pos:column="53">mode<pos:position pos:line="29" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="29" pos:column="58"/></argument_list></call></expr>)<pos:position pos:line="29" pos:column="59"/></condition><then pos:line="29" pos:column="59"> <block pos:line="29" pos:column="60">{
			<expr_stmt><expr><name pos:line="30" pos:column="25">symlink_name<pos:position pos:line="30" pos:column="37"/></name> <operator pos:line="30" pos:column="38">=<pos:position pos:line="30" pos:column="39"/></operator> <call><name pos:line="30" pos:column="40">F_SYMLINK<pos:position pos:line="30" pos:column="49"/></name><argument_list pos:line="30" pos:column="49">(<argument><expr><name pos:line="30" pos:column="50">file<pos:position pos:line="30" pos:column="54"/></name></expr></argument>)<pos:position pos:line="30" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="56"/></expr_stmt>
			<expr_stmt><expr><name pos:line="31" pos:column="25">symlink_len<pos:position pos:line="31" pos:column="36"/></name> <operator pos:line="31" pos:column="37">=<pos:position pos:line="31" pos:column="38"/></operator> <call><name pos:line="31" pos:column="39">strlen<pos:position pos:line="31" pos:column="45"/></name><argument_list pos:line="31" pos:column="45">(<argument><expr><name pos:line="31" pos:column="46">symlink_name<pos:position pos:line="31" pos:column="58"/></name></expr></argument>)<pos:position pos:line="31" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="60"/></expr_stmt>
			<if pos:line="32" pos:column="25">if <condition pos:line="32" pos:column="28">(<expr><name pos:line="32" pos:column="29">symlink_len<pos:position pos:line="32" pos:column="40"/></name> <operator pos:line="32" pos:column="41">==<pos:position pos:line="32" pos:column="43"/></operator> <literal type="number" pos:line="32" pos:column="44">0<pos:position pos:line="32" pos:column="45"/></literal></expr>)<pos:position pos:line="32" pos:column="46"/></condition><then pos:line="32" pos:column="46"> <block pos:line="32" pos:column="47">{
				<expr_stmt><expr><name pos:line="33" pos:column="33">io_error<pos:position pos:line="33" pos:column="41"/></name> <operator pos:line="33" pos:column="42">|=<pos:position pos:line="33" pos:column="44"/></operator> <name pos:line="33" pos:column="45">IOERR_GENERAL<pos:position pos:line="33" pos:column="58"/></name></expr>;<pos:position pos:line="33" pos:column="59"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="34" pos:column="33">f_name<pos:position pos:line="34" pos:column="39"/></name><argument_list pos:line="34" pos:column="39">(<argument><expr><name pos:line="34" pos:column="40">file<pos:position pos:line="34" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="46">fbuf<pos:position pos:line="34" pos:column="50"/></name></expr></argument>)<pos:position pos:line="34" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="52"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="35" pos:column="33">rprintf<pos:position pos:line="35" pos:column="40"/></name><argument_list pos:line="35" pos:column="40">(<argument><expr><name pos:line="35" pos:column="41">FERROR_XFER<pos:position pos:line="35" pos:column="52"/></name></expr></argument>,
				    <argument><expr><literal type="string" pos:line="36" pos:column="37">"skipping symlink with 0-length value: %s\n"<pos:position pos:line="36" pos:column="81"/></literal></expr></argument>,
				    <argument><expr><call><name pos:line="37" pos:column="37">full_fname<pos:position pos:line="37" pos:column="47"/></name><argument_list pos:line="37" pos:column="47">(<argument><expr><name pos:line="37" pos:column="48">fbuf<pos:position pos:line="37" pos:column="52"/></name></expr></argument>)<pos:position pos:line="37" pos:column="53"/></argument_list></call></expr></argument>)<pos:position pos:line="37" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="55"/></expr_stmt>
				<return pos:line="38" pos:column="33">return <expr><name pos:line="38" pos:column="40">NULL<pos:position pos:line="38" pos:column="44"/></name></expr>;<pos:position pos:line="38" pos:column="45"/></return>
			}<pos:position pos:line="39" pos:column="26"/></block></then></if>
		}<pos:position pos:line="40" pos:column="18"/></block></then> <else pos:line="40" pos:column="19">else <block pos:line="40" pos:column="24">{
			<expr_stmt><expr><name pos:line="41" pos:column="25">symlink_name<pos:position pos:line="41" pos:column="37"/></name> <operator pos:line="41" pos:column="38">=<pos:position pos:line="41" pos:column="39"/></operator> <name pos:line="41" pos:column="40">NULL<pos:position pos:line="41" pos:column="44"/></name></expr>;<pos:position pos:line="41" pos:column="45"/></expr_stmt>
			<expr_stmt><expr><name pos:line="42" pos:column="25">symlink_len<pos:position pos:line="42" pos:column="36"/></name> <operator pos:line="42" pos:column="37">=<pos:position pos:line="42" pos:column="38"/></operator> <literal type="number" pos:line="42" pos:column="39">0<pos:position pos:line="42" pos:column="40"/></literal></expr>;<pos:position pos:line="42" pos:column="41"/></expr_stmt>
		}<pos:position pos:line="43" pos:column="18"/></block></else></if>
<cpp:endif pos:line="44" pos:column="1">#<cpp:directive pos:line="44" pos:column="2">endif<pos:position pos:line="44" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:ifdef pos:line="46" pos:column="1">#<cpp:directive pos:line="46" pos:column="2">ifdef<pos:position pos:line="46" pos:column="7"/></cpp:directive> <name pos:line="46" pos:column="8">ICONV_OPTION<pos:position pos:line="46" pos:column="20"/></name></cpp:ifdef>
		<if pos:line="47" pos:column="17">if <condition pos:line="47" pos:column="20">(<expr><name pos:line="47" pos:column="21">ic_send<pos:position pos:line="47" pos:column="28"/></name> <operator pos:line="47" pos:column="29">!=<pos:position pos:line="47" pos:column="31"/></operator> <operator pos:line="47" pos:column="32">(<pos:position pos:line="47" pos:column="33"/></operator><name pos:line="47" pos:column="33">iconv_t<pos:position pos:line="47" pos:column="40"/></name><operator pos:line="47" pos:column="40">)<pos:position pos:line="47" pos:column="41"/></operator><operator pos:line="47" pos:column="41">-<pos:position pos:line="47" pos:column="42"/></operator><literal type="number" pos:line="47" pos:column="42">1<pos:position pos:line="47" pos:column="43"/></literal></expr>)<pos:position pos:line="47" pos:column="44"/></condition><then pos:line="47" pos:column="44"> <block pos:line="47" pos:column="45">{
			<decl_stmt><decl><type><name pos:line="48" pos:column="25">xbuf<pos:position pos:line="48" pos:column="29"/></name></type> <name pos:line="48" pos:column="30">outbuf<pos:position pos:line="48" pos:column="36"/></name></decl>, <decl><type ref="prev"/><name pos:line="48" pos:column="38">inbuf<pos:position pos:line="48" pos:column="43"/></name></decl>;<pos:position pos:line="48" pos:column="44"/></decl_stmt>

			<expr_stmt><expr><call><name pos:line="50" pos:column="25">INIT_CONST_XBUF<pos:position pos:line="50" pos:column="40"/></name><argument_list pos:line="50" pos:column="40">(<argument><expr><name pos:line="50" pos:column="41">outbuf<pos:position pos:line="50" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="49">fbuf<pos:position pos:line="50" pos:column="53"/></name></expr></argument>)<pos:position pos:line="50" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="55"/></expr_stmt>

			<if pos:line="52" pos:column="25">if <condition pos:line="52" pos:column="28">(<expr><name><name pos:line="52" pos:column="29">file<pos:position pos:line="52" pos:column="33"/></name><operator pos:line="52" pos:column="33">-&gt;<pos:position pos:line="52" pos:column="38"/></operator><name pos:line="52" pos:column="35">dirname<pos:position pos:line="52" pos:column="42"/></name></name></expr>)<pos:position pos:line="52" pos:column="43"/></condition><then pos:line="52" pos:column="43"> <block pos:line="52" pos:column="44">{
				<expr_stmt><expr><call><name pos:line="53" pos:column="33">INIT_XBUF_STRLEN<pos:position pos:line="53" pos:column="49"/></name><argument_list pos:line="53" pos:column="49">(<argument><expr><name pos:line="53" pos:column="50">inbuf<pos:position pos:line="53" pos:column="55"/></name></expr></argument>, <argument><expr><operator pos:line="53" pos:column="57">(<pos:position pos:line="53" pos:column="58"/></operator><name pos:line="53" pos:column="58">char<pos:position pos:line="53" pos:column="62"/></name><operator pos:line="53" pos:column="62">*<pos:position pos:line="53" pos:column="63"/></operator><operator pos:line="53" pos:column="63">)<pos:position pos:line="53" pos:column="64"/></operator><name><name pos:line="53" pos:column="64">file<pos:position pos:line="53" pos:column="68"/></name><operator pos:line="53" pos:column="68">-&gt;<pos:position pos:line="53" pos:column="73"/></operator><name pos:line="53" pos:column="70">dirname<pos:position pos:line="53" pos:column="77"/></name></name></expr></argument>)<pos:position pos:line="53" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="79"/></expr_stmt>
				<expr_stmt><expr><name><name pos:line="54" pos:column="33">outbuf<pos:position pos:line="54" pos:column="39"/></name><operator pos:line="54" pos:column="39">.<pos:position pos:line="54" pos:column="40"/></operator><name pos:line="54" pos:column="40">size<pos:position pos:line="54" pos:column="44"/></name></name> <operator pos:line="54" pos:column="45">-=<pos:position pos:line="54" pos:column="47"/></operator> <literal type="number" pos:line="54" pos:column="48">2<pos:position pos:line="54" pos:column="49"/></literal></expr>;<pos:position pos:line="54" pos:column="50"/></expr_stmt> <comment type="block" pos:line="54" pos:column="51">/* Reserve room for '/' &amp; 1 more char. */</comment>
				<if pos:line="55" pos:column="33">if <condition pos:line="55" pos:column="36">(<expr><call><name pos:line="55" pos:column="37">iconvbufs<pos:position pos:line="55" pos:column="46"/></name><argument_list pos:line="55" pos:column="46">(<argument><expr><name pos:line="55" pos:column="47">ic_send<pos:position pos:line="55" pos:column="54"/></name></expr></argument>, <argument><expr><operator pos:line="55" pos:column="56">&amp;<pos:position pos:line="55" pos:column="61"/></operator><name pos:line="55" pos:column="57">inbuf<pos:position pos:line="55" pos:column="62"/></name></expr></argument>, <argument><expr><operator pos:line="55" pos:column="64">&amp;<pos:position pos:line="55" pos:column="69"/></operator><name pos:line="55" pos:column="65">outbuf<pos:position pos:line="55" pos:column="71"/></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="73">ICB_INIT<pos:position pos:line="55" pos:column="81"/></name></expr></argument>)<pos:position pos:line="55" pos:column="82"/></argument_list></call> <operator pos:line="55" pos:column="83">&lt;<pos:position pos:line="55" pos:column="87"/></operator> <literal type="number" pos:line="55" pos:column="85">0<pos:position pos:line="55" pos:column="86"/></literal></expr>)<pos:position pos:line="55" pos:column="87"/></condition><then pos:line="55" pos:column="87">
					<block type="pseudo"><goto pos:line="56" pos:column="41">goto <name pos:line="56" pos:column="46">convert_error<pos:position pos:line="56" pos:column="59"/></name>;<pos:position pos:line="56" pos:column="60"/></goto></block></then></if>
				<expr_stmt><expr><name><name pos:line="57" pos:column="33">outbuf<pos:position pos:line="57" pos:column="39"/></name><operator pos:line="57" pos:column="39">.<pos:position pos:line="57" pos:column="40"/></operator><name pos:line="57" pos:column="40">size<pos:position pos:line="57" pos:column="44"/></name></name> <operator pos:line="57" pos:column="45">+=<pos:position pos:line="57" pos:column="47"/></operator> <literal type="number" pos:line="57" pos:column="48">2<pos:position pos:line="57" pos:column="49"/></literal></expr>;<pos:position pos:line="57" pos:column="50"/></expr_stmt>
				<expr_stmt><expr><name><name pos:line="58" pos:column="33">fbuf<pos:position pos:line="58" pos:column="37"/></name><index pos:line="58" pos:column="37">[<expr><name><name pos:line="58" pos:column="38">outbuf<pos:position pos:line="58" pos:column="44"/></name><operator pos:line="58" pos:column="44">.<pos:position pos:line="58" pos:column="45"/></operator><name pos:line="58" pos:column="45">len<pos:position pos:line="58" pos:column="48"/></name></name><operator pos:line="58" pos:column="48">++<pos:position pos:line="58" pos:column="50"/></operator></expr>]<pos:position pos:line="58" pos:column="51"/></index></name> <operator pos:line="58" pos:column="52">=<pos:position pos:line="58" pos:column="53"/></operator> <literal type="char" pos:line="58" pos:column="54">'/'<pos:position pos:line="58" pos:column="57"/></literal></expr>;<pos:position pos:line="58" pos:column="58"/></expr_stmt>
			}<pos:position pos:line="59" pos:column="26"/></block></then></if>

			<expr_stmt><expr><call><name pos:line="61" pos:column="25">INIT_XBUF_STRLEN<pos:position pos:line="61" pos:column="41"/></name><argument_list pos:line="61" pos:column="41">(<argument><expr><name pos:line="61" pos:column="42">inbuf<pos:position pos:line="61" pos:column="47"/></name></expr></argument>, <argument><expr><operator pos:line="61" pos:column="49">(<pos:position pos:line="61" pos:column="50"/></operator><name pos:line="61" pos:column="50">char<pos:position pos:line="61" pos:column="54"/></name><operator pos:line="61" pos:column="54">*<pos:position pos:line="61" pos:column="55"/></operator><operator pos:line="61" pos:column="55">)<pos:position pos:line="61" pos:column="56"/></operator><name><name pos:line="61" pos:column="56">file<pos:position pos:line="61" pos:column="60"/></name><operator pos:line="61" pos:column="60">-&gt;<pos:position pos:line="61" pos:column="65"/></operator><name pos:line="61" pos:column="62">basename<pos:position pos:line="61" pos:column="70"/></name></name></expr></argument>)<pos:position pos:line="61" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="72"/></expr_stmt>
			<if pos:line="62" pos:column="25">if <condition pos:line="62" pos:column="28">(<expr><call><name pos:line="62" pos:column="29">iconvbufs<pos:position pos:line="62" pos:column="38"/></name><argument_list pos:line="62" pos:column="38">(<argument><expr><name pos:line="62" pos:column="39">ic_send<pos:position pos:line="62" pos:column="46"/></name></expr></argument>, <argument><expr><operator pos:line="62" pos:column="48">&amp;<pos:position pos:line="62" pos:column="53"/></operator><name pos:line="62" pos:column="49">inbuf<pos:position pos:line="62" pos:column="54"/></name></expr></argument>, <argument><expr><operator pos:line="62" pos:column="56">&amp;<pos:position pos:line="62" pos:column="61"/></operator><name pos:line="62" pos:column="57">outbuf<pos:position pos:line="62" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="65">ICB_INIT<pos:position pos:line="62" pos:column="73"/></name></expr></argument>)<pos:position pos:line="62" pos:column="74"/></argument_list></call> <operator pos:line="62" pos:column="75">&lt;<pos:position pos:line="62" pos:column="79"/></operator> <literal type="number" pos:line="62" pos:column="77">0<pos:position pos:line="62" pos:column="78"/></literal></expr>)<pos:position pos:line="62" pos:column="79"/></condition><then pos:line="62" pos:column="79"> <block pos:line="62" pos:column="80">{
			  <label><name pos:line="63" pos:column="27">convert_error<pos:position pos:line="63" pos:column="40"/></name>:<pos:position pos:line="63" pos:column="41"/></label>
				<expr_stmt><expr><name pos:line="64" pos:column="33">io_error<pos:position pos:line="64" pos:column="41"/></name> <operator pos:line="64" pos:column="42">|=<pos:position pos:line="64" pos:column="44"/></operator> <name pos:line="64" pos:column="45">IOERR_GENERAL<pos:position pos:line="64" pos:column="58"/></name></expr>;<pos:position pos:line="64" pos:column="59"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="65" pos:column="33">rprintf<pos:position pos:line="65" pos:column="40"/></name><argument_list pos:line="65" pos:column="40">(<argument><expr><name pos:line="65" pos:column="41">FERROR_XFER<pos:position pos:line="65" pos:column="52"/></name></expr></argument>,
				    <argument><expr><literal type="string" pos:line="66" pos:column="37">"[%s] cannot convert filename: %s (%s)\n"<pos:position pos:line="66" pos:column="78"/></literal></expr></argument>,
				    <argument><expr><call><name pos:line="67" pos:column="37">who_am_i<pos:position pos:line="67" pos:column="45"/></name><argument_list pos:line="67" pos:column="45">()<pos:position pos:line="67" pos:column="47"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="67" pos:column="49">f_name<pos:position pos:line="67" pos:column="55"/></name><argument_list pos:line="67" pos:column="55">(<argument><expr><name pos:line="67" pos:column="56">file<pos:position pos:line="67" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="67" pos:column="62">fbuf<pos:position pos:line="67" pos:column="66"/></name></expr></argument>)<pos:position pos:line="67" pos:column="67"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="67" pos:column="69">strerror<pos:position pos:line="67" pos:column="77"/></name><argument_list pos:line="67" pos:column="77">(<argument><expr><name pos:line="67" pos:column="78">errno<pos:position pos:line="67" pos:column="83"/></name></expr></argument>)<pos:position pos:line="67" pos:column="84"/></argument_list></call></expr></argument>)<pos:position pos:line="67" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="86"/></expr_stmt>
				<return pos:line="68" pos:column="33">return <expr><name pos:line="68" pos:column="40">NULL<pos:position pos:line="68" pos:column="44"/></name></expr>;<pos:position pos:line="68" pos:column="45"/></return>
			}<pos:position pos:line="69" pos:column="26"/></block></then></if>
			<expr_stmt><expr><name><name pos:line="70" pos:column="25">fbuf<pos:position pos:line="70" pos:column="29"/></name><index pos:line="70" pos:column="29">[<expr><name><name pos:line="70" pos:column="30">outbuf<pos:position pos:line="70" pos:column="36"/></name><operator pos:line="70" pos:column="36">.<pos:position pos:line="70" pos:column="37"/></operator><name pos:line="70" pos:column="37">len<pos:position pos:line="70" pos:column="40"/></name></name></expr>]<pos:position pos:line="70" pos:column="41"/></index></name> <operator pos:line="70" pos:column="42">=<pos:position pos:line="70" pos:column="43"/></operator> <literal type="char" pos:line="70" pos:column="44">'\0'<pos:position pos:line="70" pos:column="48"/></literal></expr>;<pos:position pos:line="70" pos:column="49"/></expr_stmt>

<cpp:ifdef pos:line="72" pos:column="1">#<cpp:directive pos:line="72" pos:column="2">ifdef<pos:position pos:line="72" pos:column="7"/></cpp:directive> <name pos:line="72" pos:column="8">SUPPORT_LINKS<pos:position pos:line="72" pos:column="21"/></name></cpp:ifdef>
			<if pos:line="73" pos:column="25">if <condition pos:line="73" pos:column="28">(<expr><name pos:line="73" pos:column="29">symlink_len<pos:position pos:line="73" pos:column="40"/></name> <operator pos:line="73" pos:column="41">&amp;&amp;<pos:position pos:line="73" pos:column="51"/></operator> <name pos:line="73" pos:column="44">sender_symlink_iconv<pos:position pos:line="73" pos:column="64"/></name></expr>)<pos:position pos:line="73" pos:column="65"/></condition><then pos:line="73" pos:column="65"> <block pos:line="73" pos:column="66">{
				<expr_stmt><expr><call><name pos:line="74" pos:column="33">INIT_XBUF<pos:position pos:line="74" pos:column="42"/></name><argument_list pos:line="74" pos:column="42">(<argument><expr><name pos:line="74" pos:column="43">inbuf<pos:position pos:line="74" pos:column="48"/></name></expr></argument>, <argument><expr><operator pos:line="74" pos:column="50">(<pos:position pos:line="74" pos:column="51"/></operator><name pos:line="74" pos:column="51">char<pos:position pos:line="74" pos:column="55"/></name><operator pos:line="74" pos:column="55">*<pos:position pos:line="74" pos:column="56"/></operator><operator pos:line="74" pos:column="56">)<pos:position pos:line="74" pos:column="57"/></operator><name pos:line="74" pos:column="57">symlink_name<pos:position pos:line="74" pos:column="69"/></name></expr></argument>, <argument><expr><name pos:line="74" pos:column="71">symlink_len<pos:position pos:line="74" pos:column="82"/></name></expr></argument>, <argument><expr><operator pos:line="74" pos:column="84">(<pos:position pos:line="74" pos:column="85"/></operator><name pos:line="74" pos:column="85">size_t<pos:position pos:line="74" pos:column="91"/></name><operator pos:line="74" pos:column="91">)<pos:position pos:line="74" pos:column="92"/></operator><operator pos:line="74" pos:column="92">-<pos:position pos:line="74" pos:column="93"/></operator><literal type="number" pos:line="74" pos:column="93">1<pos:position pos:line="74" pos:column="94"/></literal></expr></argument>)<pos:position pos:line="74" pos:column="95"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="96"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="75" pos:column="33">INIT_CONST_XBUF<pos:position pos:line="75" pos:column="48"/></name><argument_list pos:line="75" pos:column="48">(<argument><expr><name pos:line="75" pos:column="49">outbuf<pos:position pos:line="75" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="75" pos:column="57">symlink_buf<pos:position pos:line="75" pos:column="68"/></name></expr></argument>)<pos:position pos:line="75" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="70"/></expr_stmt>
				<if pos:line="76" pos:column="33">if <condition pos:line="76" pos:column="36">(<expr><call><name pos:line="76" pos:column="37">iconvbufs<pos:position pos:line="76" pos:column="46"/></name><argument_list pos:line="76" pos:column="46">(<argument><expr><name pos:line="76" pos:column="47">ic_send<pos:position pos:line="76" pos:column="54"/></name></expr></argument>, <argument><expr><operator pos:line="76" pos:column="56">&amp;<pos:position pos:line="76" pos:column="61"/></operator><name pos:line="76" pos:column="57">inbuf<pos:position pos:line="76" pos:column="62"/></name></expr></argument>, <argument><expr><operator pos:line="76" pos:column="64">&amp;<pos:position pos:line="76" pos:column="69"/></operator><name pos:line="76" pos:column="65">outbuf<pos:position pos:line="76" pos:column="71"/></name></expr></argument>, <argument><expr><name pos:line="76" pos:column="73">ICB_INIT<pos:position pos:line="76" pos:column="81"/></name></expr></argument>)<pos:position pos:line="76" pos:column="82"/></argument_list></call> <operator pos:line="76" pos:column="83">&lt;<pos:position pos:line="76" pos:column="87"/></operator> <literal type="number" pos:line="76" pos:column="85">0<pos:position pos:line="76" pos:column="86"/></literal></expr>)<pos:position pos:line="76" pos:column="87"/></condition><then pos:line="76" pos:column="87"> <block pos:line="76" pos:column="88">{
					<expr_stmt><expr><name pos:line="77" pos:column="41">io_error<pos:position pos:line="77" pos:column="49"/></name> <operator pos:line="77" pos:column="50">|=<pos:position pos:line="77" pos:column="52"/></operator> <name pos:line="77" pos:column="53">IOERR_GENERAL<pos:position pos:line="77" pos:column="66"/></name></expr>;<pos:position pos:line="77" pos:column="67"/></expr_stmt>
					<expr_stmt><expr><call><name pos:line="78" pos:column="41">f_name<pos:position pos:line="78" pos:column="47"/></name><argument_list pos:line="78" pos:column="47">(<argument><expr><name pos:line="78" pos:column="48">file<pos:position pos:line="78" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="78" pos:column="54">fbuf<pos:position pos:line="78" pos:column="58"/></name></expr></argument>)<pos:position pos:line="78" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="60"/></expr_stmt>
					<expr_stmt><expr><call><name pos:line="79" pos:column="41">rprintf<pos:position pos:line="79" pos:column="48"/></name><argument_list pos:line="79" pos:column="48">(<argument><expr><name pos:line="79" pos:column="49">FERROR_XFER<pos:position pos:line="79" pos:column="60"/></name></expr></argument>,
					    <argument><expr><literal type="string" pos:line="80" pos:column="45">"[%s] cannot convert symlink data for: %s (%s)\n"<pos:position pos:line="80" pos:column="94"/></literal></expr></argument>,
					    <argument><expr><call><name pos:line="81" pos:column="45">who_am_i<pos:position pos:line="81" pos:column="53"/></name><argument_list pos:line="81" pos:column="53">()<pos:position pos:line="81" pos:column="55"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="81" pos:column="57">full_fname<pos:position pos:line="81" pos:column="67"/></name><argument_list pos:line="81" pos:column="67">(<argument><expr><name pos:line="81" pos:column="68">fbuf<pos:position pos:line="81" pos:column="72"/></name></expr></argument>)<pos:position pos:line="81" pos:column="73"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="81" pos:column="75">strerror<pos:position pos:line="81" pos:column="83"/></name><argument_list pos:line="81" pos:column="83">(<argument><expr><name pos:line="81" pos:column="84">errno<pos:position pos:line="81" pos:column="89"/></name></expr></argument>)<pos:position pos:line="81" pos:column="90"/></argument_list></call></expr></argument>)<pos:position pos:line="81" pos:column="91"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="92"/></expr_stmt>
					<return pos:line="82" pos:column="41">return <expr><name pos:line="82" pos:column="48">NULL<pos:position pos:line="82" pos:column="52"/></name></expr>;<pos:position pos:line="82" pos:column="53"/></return>
				}<pos:position pos:line="83" pos:column="34"/></block></then></if>
				<expr_stmt><expr><name><name pos:line="84" pos:column="33">symlink_buf<pos:position pos:line="84" pos:column="44"/></name><index pos:line="84" pos:column="44">[<expr><name><name pos:line="84" pos:column="45">outbuf<pos:position pos:line="84" pos:column="51"/></name><operator pos:line="84" pos:column="51">.<pos:position pos:line="84" pos:column="52"/></operator><name pos:line="84" pos:column="52">len<pos:position pos:line="84" pos:column="55"/></name></name></expr>]<pos:position pos:line="84" pos:column="56"/></index></name> <operator pos:line="84" pos:column="57">=<pos:position pos:line="84" pos:column="58"/></operator> <literal type="char" pos:line="84" pos:column="59">'\0'<pos:position pos:line="84" pos:column="63"/></literal></expr>;<pos:position pos:line="84" pos:column="64"/></expr_stmt>

				<expr_stmt><expr><name pos:line="86" pos:column="33">symlink_name<pos:position pos:line="86" pos:column="45"/></name> <operator pos:line="86" pos:column="46">=<pos:position pos:line="86" pos:column="47"/></operator> <name pos:line="86" pos:column="48">symlink_buf<pos:position pos:line="86" pos:column="59"/></name></expr>;<pos:position pos:line="86" pos:column="60"/></expr_stmt>
				<expr_stmt><expr><name pos:line="87" pos:column="33">symlink_len<pos:position pos:line="87" pos:column="44"/></name> <operator pos:line="87" pos:column="45">=<pos:position pos:line="87" pos:column="46"/></operator> <name><name pos:line="87" pos:column="47">outbuf<pos:position pos:line="87" pos:column="53"/></name><operator pos:line="87" pos:column="53">.<pos:position pos:line="87" pos:column="54"/></operator><name pos:line="87" pos:column="54">len<pos:position pos:line="87" pos:column="57"/></name></name></expr>;<pos:position pos:line="87" pos:column="58"/></expr_stmt>
			}<pos:position pos:line="88" pos:column="26"/></block></then></if>
<cpp:endif pos:line="89" pos:column="1">#<cpp:directive pos:line="89" pos:column="2">endif<pos:position pos:line="89" pos:column="7"/></cpp:directive></cpp:endif>
		}<pos:position pos:line="90" pos:column="18"/></block></then> <else pos:line="90" pos:column="19">else
<cpp:endif pos:line="91" pos:column="1">#<cpp:directive pos:line="91" pos:column="2">endif<pos:position pos:line="91" pos:column="7"/></cpp:directive></cpp:endif>
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="92" pos:column="25">f_name<pos:position pos:line="92" pos:column="31"/></name><argument_list pos:line="92" pos:column="31">(<argument><expr><name pos:line="92" pos:column="32">file<pos:position pos:line="92" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="92" pos:column="38">fbuf<pos:position pos:line="92" pos:column="42"/></name></expr></argument>)<pos:position pos:line="92" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="44"/></expr_stmt></block></else></if>

<cpp:ifdef pos:line="94" pos:column="1">#<cpp:directive pos:line="94" pos:column="2">ifdef<pos:position pos:line="94" pos:column="7"/></cpp:directive> <name pos:line="94" pos:column="8">SUPPORT_ACLS<pos:position pos:line="94" pos:column="20"/></name></cpp:ifdef>
		<if pos:line="95" pos:column="17">if <condition pos:line="95" pos:column="20">(<expr><name pos:line="95" pos:column="21">preserve_acls<pos:position pos:line="95" pos:column="34"/></name> <operator pos:line="95" pos:column="35">&amp;&amp;<pos:position pos:line="95" pos:column="45"/></operator> <operator pos:line="95" pos:column="38">!<pos:position pos:line="95" pos:column="39"/></operator><call><name pos:line="95" pos:column="39">S_ISLNK<pos:position pos:line="95" pos:column="46"/></name><argument_list pos:line="95" pos:column="46">(<argument><expr><name><name pos:line="95" pos:column="47">file<pos:position pos:line="95" pos:column="51"/></name><operator pos:line="95" pos:column="51">-&gt;<pos:position pos:line="95" pos:column="56"/></operator><name pos:line="95" pos:column="53">mode<pos:position pos:line="95" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="95" pos:column="58"/></argument_list></call></expr>)<pos:position pos:line="95" pos:column="59"/></condition><then pos:line="95" pos:column="59"> <block pos:line="95" pos:column="60">{
			<expr_stmt><expr><name><name pos:line="96" pos:column="25">sx<pos:position pos:line="96" pos:column="27"/></name><operator pos:line="96" pos:column="27">.<pos:position pos:line="96" pos:column="28"/></operator><name pos:line="96" pos:column="28">st<pos:position pos:line="96" pos:column="30"/></name><operator pos:line="96" pos:column="30">.<pos:position pos:line="96" pos:column="31"/></operator><name pos:line="96" pos:column="31">st_mode<pos:position pos:line="96" pos:column="38"/></name></name> <operator pos:line="96" pos:column="39">=<pos:position pos:line="96" pos:column="40"/></operator> <name><name pos:line="96" pos:column="41">file<pos:position pos:line="96" pos:column="45"/></name><operator pos:line="96" pos:column="45">-&gt;<pos:position pos:line="96" pos:column="50"/></operator><name pos:line="96" pos:column="47">mode<pos:position pos:line="96" pos:column="51"/></name></name></expr>;<pos:position pos:line="96" pos:column="52"/></expr_stmt>
			<if pos:line="97" pos:column="25">if <condition pos:line="97" pos:column="28">(<expr><call><name pos:line="97" pos:column="29">get_acl<pos:position pos:line="97" pos:column="36"/></name><argument_list pos:line="97" pos:column="36">(<argument><expr><name pos:line="97" pos:column="37">fname<pos:position pos:line="97" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="97" pos:column="44">&amp;<pos:position pos:line="97" pos:column="49"/></operator><name pos:line="97" pos:column="45">sx<pos:position pos:line="97" pos:column="47"/></name></expr></argument>)<pos:position pos:line="97" pos:column="48"/></argument_list></call> <operator pos:line="97" pos:column="49">&lt;<pos:position pos:line="97" pos:column="53"/></operator> <literal type="number" pos:line="97" pos:column="51">0<pos:position pos:line="97" pos:column="52"/></literal></expr>)<pos:position pos:line="97" pos:column="53"/></condition><then pos:line="97" pos:column="53"> <block pos:line="97" pos:column="54">{
				<expr_stmt><expr><name pos:line="98" pos:column="33">io_error<pos:position pos:line="98" pos:column="41"/></name> <operator pos:line="98" pos:column="42">|=<pos:position pos:line="98" pos:column="44"/></operator> <name pos:line="98" pos:column="45">IOERR_GENERAL<pos:position pos:line="98" pos:column="58"/></name></expr>;<pos:position pos:line="98" pos:column="59"/></expr_stmt>
				<return pos:line="99" pos:column="33">return <expr><name pos:line="99" pos:column="40">NULL<pos:position pos:line="99" pos:column="44"/></name></expr>;<pos:position pos:line="99" pos:column="45"/></return>
			}<pos:position pos:line="100" pos:column="26"/></block></then></if>
		}<pos:position pos:line="101" pos:column="18"/></block></then></if>
<cpp:endif pos:line="102" pos:column="1">#<cpp:directive pos:line="102" pos:column="2">endif<pos:position pos:line="102" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:ifdef pos:line="103" pos:column="1">#<cpp:directive pos:line="103" pos:column="2">ifdef<pos:position pos:line="103" pos:column="7"/></cpp:directive> <name pos:line="103" pos:column="8">SUPPORT_XATTRS<pos:position pos:line="103" pos:column="22"/></name></cpp:ifdef>
		<if pos:line="104" pos:column="17">if <condition pos:line="104" pos:column="20">(<expr><name pos:line="104" pos:column="21">preserve_xattrs<pos:position pos:line="104" pos:column="36"/></name></expr>)<pos:position pos:line="104" pos:column="37"/></condition><then pos:line="104" pos:column="37"> <block pos:line="104" pos:column="38">{
			<expr_stmt><expr><name><name pos:line="105" pos:column="25">sx<pos:position pos:line="105" pos:column="27"/></name><operator pos:line="105" pos:column="27">.<pos:position pos:line="105" pos:column="28"/></operator><name pos:line="105" pos:column="28">st<pos:position pos:line="105" pos:column="30"/></name><operator pos:line="105" pos:column="30">.<pos:position pos:line="105" pos:column="31"/></operator><name pos:line="105" pos:column="31">st_mode<pos:position pos:line="105" pos:column="38"/></name></name> <operator pos:line="105" pos:column="39">=<pos:position pos:line="105" pos:column="40"/></operator> <name><name pos:line="105" pos:column="41">file<pos:position pos:line="105" pos:column="45"/></name><operator pos:line="105" pos:column="45">-&gt;<pos:position pos:line="105" pos:column="50"/></operator><name pos:line="105" pos:column="47">mode<pos:position pos:line="105" pos:column="51"/></name></name></expr>;<pos:position pos:line="105" pos:column="52"/></expr_stmt>
			<if pos:line="106" pos:column="25">if <condition pos:line="106" pos:column="28">(<expr><call><name pos:line="106" pos:column="29">get_xattr<pos:position pos:line="106" pos:column="38"/></name><argument_list pos:line="106" pos:column="38">(<argument><expr><name pos:line="106" pos:column="39">fname<pos:position pos:line="106" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="106" pos:column="46">&amp;<pos:position pos:line="106" pos:column="51"/></operator><name pos:line="106" pos:column="47">sx<pos:position pos:line="106" pos:column="49"/></name></expr></argument>)<pos:position pos:line="106" pos:column="50"/></argument_list></call> <operator pos:line="106" pos:column="51">&lt;<pos:position pos:line="106" pos:column="55"/></operator> <literal type="number" pos:line="106" pos:column="53">0<pos:position pos:line="106" pos:column="54"/></literal></expr>)<pos:position pos:line="106" pos:column="55"/></condition><then pos:line="106" pos:column="55"> <block pos:line="106" pos:column="56">{
				<expr_stmt><expr><name pos:line="107" pos:column="33">io_error<pos:position pos:line="107" pos:column="41"/></name> <operator pos:line="107" pos:column="42">|=<pos:position pos:line="107" pos:column="44"/></operator> <name pos:line="107" pos:column="45">IOERR_GENERAL<pos:position pos:line="107" pos:column="58"/></name></expr>;<pos:position pos:line="107" pos:column="59"/></expr_stmt>
				<return pos:line="108" pos:column="33">return <expr><name pos:line="108" pos:column="40">NULL<pos:position pos:line="108" pos:column="44"/></name></expr>;<pos:position pos:line="108" pos:column="45"/></return>
			}<pos:position pos:line="109" pos:column="26"/></block></then></if>
		}<pos:position pos:line="110" pos:column="18"/></block></then></if>
<cpp:endif pos:line="111" pos:column="1">#<cpp:directive pos:line="111" pos:column="2">endif<pos:position pos:line="111" pos:column="7"/></cpp:directive></cpp:endif>

		<expr_stmt><expr><call><name pos:line="113" pos:column="17">send_file_entry<pos:position pos:line="113" pos:column="32"/></name><argument_list pos:line="113" pos:column="32">(<argument><expr><name pos:line="113" pos:column="33">f<pos:position pos:line="113" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="113" pos:column="36">fbuf<pos:position pos:line="113" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="113" pos:column="42">file<pos:position pos:line="113" pos:column="46"/></name></expr></argument>,
<cpp:ifdef pos:line="114" pos:column="1">#<cpp:directive pos:line="114" pos:column="2">ifdef<pos:position pos:line="114" pos:column="7"/></cpp:directive> <name pos:line="114" pos:column="8">SUPPORT_LINKS<pos:position pos:line="114" pos:column="21"/></name></cpp:ifdef>
				<argument><expr><name pos:line="115" pos:column="33">symlink_name<pos:position pos:line="115" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="115" pos:column="47">symlink_len<pos:position pos:line="115" pos:column="58"/></name></expr></argument>,
<cpp:endif pos:line="116" pos:column="1">#<cpp:directive pos:line="116" pos:column="2">endif<pos:position pos:line="116" pos:column="7"/></cpp:directive></cpp:endif>
				<argument><expr><name><name pos:line="117" pos:column="33">flist<pos:position pos:line="117" pos:column="38"/></name><operator pos:line="117" pos:column="38">-&gt;<pos:position pos:line="117" pos:column="43"/></operator><name pos:line="117" pos:column="40">used<pos:position pos:line="117" pos:column="44"/></name></name></expr></argument>, <argument><expr><name><name pos:line="117" pos:column="46">flist<pos:position pos:line="117" pos:column="51"/></name><operator pos:line="117" pos:column="51">-&gt;<pos:position pos:line="117" pos:column="56"/></operator><name pos:line="117" pos:column="53">ndx_start<pos:position pos:line="117" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="117" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="117" pos:column="64"/></expr_stmt>

<cpp:ifdef pos:line="119" pos:column="1">#<cpp:directive pos:line="119" pos:column="2">ifdef<pos:position pos:line="119" pos:column="7"/></cpp:directive> <name pos:line="119" pos:column="8">SUPPORT_ACLS<pos:position pos:line="119" pos:column="20"/></name></cpp:ifdef>
		<if pos:line="120" pos:column="17">if <condition pos:line="120" pos:column="20">(<expr><name pos:line="120" pos:column="21">preserve_acls<pos:position pos:line="120" pos:column="34"/></name> <operator pos:line="120" pos:column="35">&amp;&amp;<pos:position pos:line="120" pos:column="45"/></operator> <operator pos:line="120" pos:column="38">!<pos:position pos:line="120" pos:column="39"/></operator><call><name pos:line="120" pos:column="39">S_ISLNK<pos:position pos:line="120" pos:column="46"/></name><argument_list pos:line="120" pos:column="46">(<argument><expr><name><name pos:line="120" pos:column="47">file<pos:position pos:line="120" pos:column="51"/></name><operator pos:line="120" pos:column="51">-&gt;<pos:position pos:line="120" pos:column="56"/></operator><name pos:line="120" pos:column="53">mode<pos:position pos:line="120" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="120" pos:column="58"/></argument_list></call></expr>)<pos:position pos:line="120" pos:column="59"/></condition><then pos:line="120" pos:column="59"> <block pos:line="120" pos:column="60">{
			<expr_stmt><expr><call><name pos:line="121" pos:column="25">send_acl<pos:position pos:line="121" pos:column="33"/></name><argument_list pos:line="121" pos:column="33">(<argument><expr><name pos:line="121" pos:column="34">f<pos:position pos:line="121" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="121" pos:column="37">&amp;<pos:position pos:line="121" pos:column="42"/></operator><name pos:line="121" pos:column="38">sx<pos:position pos:line="121" pos:column="40"/></name></expr></argument>)<pos:position pos:line="121" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="121" pos:column="42"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="122" pos:column="25">free_acl<pos:position pos:line="122" pos:column="33"/></name><argument_list pos:line="122" pos:column="33">(<argument><expr><operator pos:line="122" pos:column="34">&amp;<pos:position pos:line="122" pos:column="39"/></operator><name pos:line="122" pos:column="35">sx<pos:position pos:line="122" pos:column="37"/></name></expr></argument>)<pos:position pos:line="122" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="122" pos:column="39"/></expr_stmt>
		}<pos:position pos:line="123" pos:column="18"/></block></then></if>
<cpp:endif pos:line="124" pos:column="1">#<cpp:directive pos:line="124" pos:column="2">endif<pos:position pos:line="124" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:ifdef pos:line="125" pos:column="1">#<cpp:directive pos:line="125" pos:column="2">ifdef<pos:position pos:line="125" pos:column="7"/></cpp:directive> <name pos:line="125" pos:column="8">SUPPORT_XATTRS<pos:position pos:line="125" pos:column="22"/></name></cpp:ifdef>
		<if pos:line="126" pos:column="17">if <condition pos:line="126" pos:column="20">(<expr><name pos:line="126" pos:column="21">preserve_xattrs<pos:position pos:line="126" pos:column="36"/></name></expr>)<pos:position pos:line="126" pos:column="37"/></condition><then pos:line="126" pos:column="37"> <block pos:line="126" pos:column="38">{
			<expr_stmt><expr><call><name pos:line="127" pos:column="25">F_XATTR<pos:position pos:line="127" pos:column="32"/></name><argument_list pos:line="127" pos:column="32">(<argument><expr><name pos:line="127" pos:column="33">file<pos:position pos:line="127" pos:column="37"/></name></expr></argument>)<pos:position pos:line="127" pos:column="38"/></argument_list></call> <operator pos:line="127" pos:column="39">=<pos:position pos:line="127" pos:column="40"/></operator> <call><name pos:line="127" pos:column="41">send_xattr<pos:position pos:line="127" pos:column="51"/></name><argument_list pos:line="127" pos:column="51">(<argument><expr><name pos:line="127" pos:column="52">f<pos:position pos:line="127" pos:column="53"/></name></expr></argument>, <argument><expr><operator pos:line="127" pos:column="55">&amp;<pos:position pos:line="127" pos:column="60"/></operator><name pos:line="127" pos:column="56">sx<pos:position pos:line="127" pos:column="58"/></name></expr></argument>)<pos:position pos:line="127" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="127" pos:column="60"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="128" pos:column="25">free_xattr<pos:position pos:line="128" pos:column="35"/></name><argument_list pos:line="128" pos:column="35">(<argument><expr><operator pos:line="128" pos:column="36">&amp;<pos:position pos:line="128" pos:column="41"/></operator><name pos:line="128" pos:column="37">sx<pos:position pos:line="128" pos:column="39"/></name></expr></argument>)<pos:position pos:line="128" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="128" pos:column="41"/></expr_stmt>
		}<pos:position pos:line="129" pos:column="18"/></block></then></if>
<cpp:endif pos:line="130" pos:column="1">#<cpp:directive pos:line="130" pos:column="2">endif<pos:position pos:line="130" pos:column="7"/></cpp:directive></cpp:endif>
	}<pos:position pos:line="131" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="133" pos:column="9">maybe_emit_filelist_progress<pos:position pos:line="133" pos:column="37"/></name><argument_list pos:line="133" pos:column="37">(<argument><expr><name><name pos:line="133" pos:column="38">flist<pos:position pos:line="133" pos:column="43"/></name><operator pos:line="133" pos:column="43">-&gt;<pos:position pos:line="133" pos:column="48"/></operator><name pos:line="133" pos:column="45">used<pos:position pos:line="133" pos:column="49"/></name></name> <operator pos:line="133" pos:column="50">+<pos:position pos:line="133" pos:column="51"/></operator> <name pos:line="133" pos:column="52">flist_count_offset<pos:position pos:line="133" pos:column="70"/></name></expr></argument>)<pos:position pos:line="133" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="133" pos:column="72"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="135" pos:column="9">flist_expand<pos:position pos:line="135" pos:column="21"/></name><argument_list pos:line="135" pos:column="21">(<argument><expr><name pos:line="135" pos:column="22">flist<pos:position pos:line="135" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="135" pos:column="29">1<pos:position pos:line="135" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="135" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="135" pos:column="32"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="136" pos:column="9">flist<pos:position pos:line="136" pos:column="14"/></name><operator pos:line="136" pos:column="14">-&gt;<pos:position pos:line="136" pos:column="19"/></operator><name pos:line="136" pos:column="16">files<pos:position pos:line="136" pos:column="21"/></name><index pos:line="136" pos:column="21">[<expr><name><name pos:line="136" pos:column="22">flist<pos:position pos:line="136" pos:column="27"/></name><operator pos:line="136" pos:column="27">-&gt;<pos:position pos:line="136" pos:column="32"/></operator><name pos:line="136" pos:column="29">used<pos:position pos:line="136" pos:column="33"/></name></name><operator pos:line="136" pos:column="33">++<pos:position pos:line="136" pos:column="35"/></operator></expr>]<pos:position pos:line="136" pos:column="36"/></index></name> <operator pos:line="136" pos:column="37">=<pos:position pos:line="136" pos:column="38"/></operator> <name pos:line="136" pos:column="39">file<pos:position pos:line="136" pos:column="43"/></name></expr>;<pos:position pos:line="136" pos:column="44"/></expr_stmt>

	<return pos:line="138" pos:column="9">return <expr><name pos:line="138" pos:column="16">file<pos:position pos:line="138" pos:column="20"/></name></expr>;<pos:position pos:line="138" pos:column="21"/></return>
}<pos:position pos:line="139" pos:column="2"/></block></function></unit>
