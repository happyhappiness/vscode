<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_101_rsync-2.6.9.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">readfd<pos:position pos:line="1" pos:column="19"/></name><parameter_list pos:line="1" pos:column="19">(<parameter><decl><type><name pos:line="1" pos:column="20">int<pos:position pos:line="1" pos:column="23"/></name></type> <name pos:line="1" pos:column="24">fd<pos:position pos:line="1" pos:column="26"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="28">char<pos:position pos:line="1" pos:column="32"/></name> <modifier pos:line="1" pos:column="33">*<pos:position pos:line="1" pos:column="34"/></modifier></type><name pos:line="1" pos:column="34">buffer<pos:position pos:line="1" pos:column="40"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="42">size_t<pos:position pos:line="1" pos:column="48"/></name></type> <name pos:line="1" pos:column="49">N<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="51"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type>  <name pos:line="3" pos:column="14">cnt<pos:position pos:line="3" pos:column="17"/></name></decl>;<pos:position pos:line="3" pos:column="18"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">size_t<pos:position pos:line="4" pos:column="15"/></name></type> <name pos:line="4" pos:column="16">total<pos:position pos:line="4" pos:column="21"/></name> <init pos:line="4" pos:column="22">= <expr><literal type="number" pos:line="4" pos:column="24">0<pos:position pos:line="4" pos:column="25"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="26"/></decl_stmt>

	<while pos:line="6" pos:column="9">while <condition pos:line="6" pos:column="15">(<expr><name pos:line="6" pos:column="16">total<pos:position pos:line="6" pos:column="21"/></name> <operator pos:line="6" pos:column="22">&lt;<pos:position pos:line="6" pos:column="26"/></operator> <name pos:line="6" pos:column="24">N<pos:position pos:line="6" pos:column="25"/></name></expr>)<pos:position pos:line="6" pos:column="26"/></condition> <block pos:line="6" pos:column="27">{
		<expr_stmt><expr><name pos:line="7" pos:column="17">cnt<pos:position pos:line="7" pos:column="20"/></name> <operator pos:line="7" pos:column="21">=<pos:position pos:line="7" pos:column="22"/></operator> <call><name pos:line="7" pos:column="23">readfd_unbuffered<pos:position pos:line="7" pos:column="40"/></name><argument_list pos:line="7" pos:column="40">(<argument><expr><name pos:line="7" pos:column="41">fd<pos:position pos:line="7" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="45">buffer<pos:position pos:line="7" pos:column="51"/></name> <operator pos:line="7" pos:column="52">+<pos:position pos:line="7" pos:column="53"/></operator> <name pos:line="7" pos:column="54">total<pos:position pos:line="7" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="61">N<pos:position pos:line="7" pos:column="62"/></name><operator pos:line="7" pos:column="62">-<pos:position pos:line="7" pos:column="63"/></operator><name pos:line="7" pos:column="63">total<pos:position pos:line="7" pos:column="68"/></name></expr></argument>)<pos:position pos:line="7" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="70"/></expr_stmt>
		<expr_stmt><expr><name pos:line="8" pos:column="17">total<pos:position pos:line="8" pos:column="22"/></name> <operator pos:line="8" pos:column="23">+=<pos:position pos:line="8" pos:column="25"/></operator> <name pos:line="8" pos:column="26">cnt<pos:position pos:line="8" pos:column="29"/></name></expr>;<pos:position pos:line="8" pos:column="30"/></expr_stmt>
	}<pos:position pos:line="9" pos:column="10"/></block></while>

	<if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><name pos:line="11" pos:column="13">fd<pos:position pos:line="11" pos:column="15"/></name> <operator pos:line="11" pos:column="16">==<pos:position pos:line="11" pos:column="18"/></operator> <name pos:line="11" pos:column="19">write_batch_monitor_in<pos:position pos:line="11" pos:column="41"/></name></expr>)<pos:position pos:line="11" pos:column="42"/></condition><then pos:line="11" pos:column="42"> <block pos:line="11" pos:column="43">{
		<if pos:line="12" pos:column="17">if <condition pos:line="12" pos:column="20">(<expr><operator pos:line="12" pos:column="21">(<pos:position pos:line="12" pos:column="22"/></operator><name pos:line="12" pos:column="22">size_t<pos:position pos:line="12" pos:column="28"/></name><operator pos:line="12" pos:column="28">)<pos:position pos:line="12" pos:column="29"/></operator><call><name pos:line="12" pos:column="29">write<pos:position pos:line="12" pos:column="34"/></name><argument_list pos:line="12" pos:column="34">(<argument><expr><name pos:line="12" pos:column="35">batch_fd<pos:position pos:line="12" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="45">buffer<pos:position pos:line="12" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="53">total<pos:position pos:line="12" pos:column="58"/></name></expr></argument>)<pos:position pos:line="12" pos:column="59"/></argument_list></call> <operator pos:line="12" pos:column="60">!=<pos:position pos:line="12" pos:column="62"/></operator> <name pos:line="12" pos:column="63">total<pos:position pos:line="12" pos:column="68"/></name></expr>)<pos:position pos:line="12" pos:column="69"/></condition><then pos:line="12" pos:column="69">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="13" pos:column="25">exit_cleanup<pos:position pos:line="13" pos:column="37"/></name><argument_list pos:line="13" pos:column="37">(<argument><expr><name pos:line="13" pos:column="38">RERR_FILEIO<pos:position pos:line="13" pos:column="49"/></name></expr></argument>)<pos:position pos:line="13" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="51"/></expr_stmt></block></then></if>
	}<pos:position pos:line="14" pos:column="10"/></block></then></if>

	<if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><name pos:line="16" pos:column="13">fd<pos:position pos:line="16" pos:column="15"/></name> <operator pos:line="16" pos:column="16">==<pos:position pos:line="16" pos:column="18"/></operator> <name pos:line="16" pos:column="19">sock_f_in<pos:position pos:line="16" pos:column="28"/></name></expr>)<pos:position pos:line="16" pos:column="29"/></condition><then pos:line="16" pos:column="29">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="17" pos:column="17">stats<pos:position pos:line="17" pos:column="22"/></name><operator pos:line="17" pos:column="22">.<pos:position pos:line="17" pos:column="23"/></operator><name pos:line="17" pos:column="23">total_read<pos:position pos:line="17" pos:column="33"/></name></name> <operator pos:line="17" pos:column="34">+=<pos:position pos:line="17" pos:column="36"/></operator> <name pos:line="17" pos:column="37">total<pos:position pos:line="17" pos:column="42"/></name></expr>;<pos:position pos:line="17" pos:column="43"/></expr_stmt></block></then></if>
}<pos:position pos:line="18" pos:column="2"/></block></function></unit>
