<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_396_rsync-2.5.5.cpp" pos:tabs="8"><function_decl><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">inflate_trees_dynamic<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><name pos:line="1" pos:column="27">nl<pos:position pos:line="1" pos:column="29"/></name></type></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="31">nd<pos:position pos:line="1" pos:column="33"/></name></type></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="35">c<pos:position pos:line="1" pos:column="36"/></name></type></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="38">bl<pos:position pos:line="1" pos:column="40"/></name></type></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="42">bd<pos:position pos:line="1" pos:column="44"/></name></type></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="46">tl<pos:position pos:line="1" pos:column="48"/></name></type></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="50">td<pos:position pos:line="1" pos:column="52"/></name></type></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="54">hp<pos:position pos:line="1" pos:column="56"/></name></type></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="58">z<pos:position pos:line="1" pos:column="59"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="60"/></parameter_list>
<decl_stmt><decl><type><name pos:line="2" pos:column="1">uInt<pos:position pos:line="2" pos:column="5"/></name></type> <name pos:line="2" pos:column="6">nl<pos:position pos:line="2" pos:column="8"/></name></decl>;<pos:position pos:line="2" pos:column="9"/></decl_stmt>                <comment type="block" pos:line="2" pos:column="25">/* number of literal/length codes */</comment>
<decl_stmt><decl><type><name pos:line="3" pos:column="1">uInt<pos:position pos:line="3" pos:column="5"/></name></type> <name pos:line="3" pos:column="6">nd<pos:position pos:line="3" pos:column="8"/></name></decl>;<pos:position pos:line="3" pos:column="9"/></decl_stmt>                <comment type="block" pos:line="3" pos:column="25">/* number of distance codes */</comment>
<decl_stmt><decl><type><name pos:line="4" pos:column="1">uIntf<pos:position pos:line="4" pos:column="6"/></name> <modifier pos:line="4" pos:column="7">*<pos:position pos:line="4" pos:column="8"/></modifier></type><name pos:line="4" pos:column="8">c<pos:position pos:line="4" pos:column="9"/></name></decl>;<pos:position pos:line="4" pos:column="10"/></decl_stmt>               <comment type="block" pos:line="4" pos:column="25">/* that many (total) code lengths */</comment>
<decl_stmt><decl><type><name pos:line="5" pos:column="1">uIntf<pos:position pos:line="5" pos:column="6"/></name> <modifier pos:line="5" pos:column="7">*<pos:position pos:line="5" pos:column="8"/></modifier></type><name pos:line="5" pos:column="8">bl<pos:position pos:line="5" pos:column="10"/></name></decl>;<pos:position pos:line="5" pos:column="11"/></decl_stmt>              <comment type="block" pos:line="5" pos:column="25">/* literal desired/actual bit depth */</comment>
<decl_stmt><decl><type><name pos:line="6" pos:column="1">uIntf<pos:position pos:line="6" pos:column="6"/></name> <modifier pos:line="6" pos:column="7">*<pos:position pos:line="6" pos:column="8"/></modifier></type><name pos:line="6" pos:column="8">bd<pos:position pos:line="6" pos:column="10"/></name></decl>;<pos:position pos:line="6" pos:column="11"/></decl_stmt>              <comment type="block" pos:line="6" pos:column="25">/* distance desired/actual bit depth */</comment>
<decl_stmt><decl><type><name pos:line="7" pos:column="1">inflate_huft<pos:position pos:line="7" pos:column="13"/></name> <modifier pos:line="7" pos:column="14">*<pos:position pos:line="7" pos:column="15"/></modifier> <name pos:line="7" pos:column="16">FAR<pos:position pos:line="7" pos:column="19"/></name> <modifier pos:line="7" pos:column="20">*<pos:position pos:line="7" pos:column="21"/></modifier></type><name pos:line="7" pos:column="21">tl<pos:position pos:line="7" pos:column="23"/></name></decl>;<pos:position pos:line="7" pos:column="24"/></decl_stmt> <comment type="block" pos:line="7" pos:column="25">/* literal/length tree result */</comment>
<decl_stmt><decl><type><name pos:line="8" pos:column="1">inflate_huft<pos:position pos:line="8" pos:column="13"/></name> <modifier pos:line="8" pos:column="14">*<pos:position pos:line="8" pos:column="15"/></modifier> <name pos:line="8" pos:column="16">FAR<pos:position pos:line="8" pos:column="19"/></name> <modifier pos:line="8" pos:column="20">*<pos:position pos:line="8" pos:column="21"/></modifier></type><name pos:line="8" pos:column="21">td<pos:position pos:line="8" pos:column="23"/></name></decl>;<pos:position pos:line="8" pos:column="24"/></decl_stmt> <comment type="block" pos:line="8" pos:column="25">/* distance tree result */</comment>
<decl_stmt><decl><type><name pos:line="9" pos:column="1">inflate_huft<pos:position pos:line="9" pos:column="13"/></name> <modifier pos:line="9" pos:column="14">*<pos:position pos:line="9" pos:column="15"/></modifier></type><name pos:line="9" pos:column="15">hp<pos:position pos:line="9" pos:column="17"/></name></decl>;<pos:position pos:line="9" pos:column="18"/></decl_stmt>       <comment type="block" pos:line="9" pos:column="25">/* space for trees */</comment>
<decl_stmt><decl><type><name pos:line="10" pos:column="1">z_streamp<pos:position pos:line="10" pos:column="10"/></name></type> <name pos:line="10" pos:column="11">z<pos:position pos:line="10" pos:column="12"/></name></decl>;<pos:position pos:line="10" pos:column="13"/></decl_stmt>            <comment type="block" pos:line="10" pos:column="25">/* for messages */</comment>
<block pos:line="11" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">int<pos:position pos:line="12" pos:column="6"/></name></type> <name pos:line="12" pos:column="7">r<pos:position pos:line="12" pos:column="8"/></name></decl>;<pos:position pos:line="12" pos:column="9"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="13" pos:column="3">uInt<pos:position pos:line="13" pos:column="7"/></name></type> <name pos:line="13" pos:column="8">hn<pos:position pos:line="13" pos:column="10"/></name> <init pos:line="13" pos:column="11">= <expr><literal type="number" pos:line="13" pos:column="13">0<pos:position pos:line="13" pos:column="14"/></literal></expr></init></decl>;<pos:position pos:line="13" pos:column="15"/></decl_stmt>          <comment type="block" pos:line="13" pos:column="25">/* hufts used in space */</comment>
  <decl_stmt><decl><type><name pos:line="14" pos:column="3">uIntf<pos:position pos:line="14" pos:column="8"/></name> <modifier pos:line="14" pos:column="9">*<pos:position pos:line="14" pos:column="10"/></modifier></type><name pos:line="14" pos:column="10">v<pos:position pos:line="14" pos:column="11"/></name></decl>;<pos:position pos:line="14" pos:column="12"/></decl_stmt>             <comment type="block" pos:line="14" pos:column="25">/* work area for huft_build */</comment>

  <comment type="block" pos:line="16" pos:column="3">/* allocate work area */</comment>
  <if pos:line="17" pos:column="3">if <condition pos:line="17" pos:column="6">(<expr><operator pos:line="17" pos:column="7">(<pos:position pos:line="17" pos:column="8"/></operator><name pos:line="17" pos:column="8">v<pos:position pos:line="17" pos:column="9"/></name> <operator pos:line="17" pos:column="10">=<pos:position pos:line="17" pos:column="11"/></operator> <operator pos:line="17" pos:column="12">(<pos:position pos:line="17" pos:column="13"/></operator><name pos:line="17" pos:column="13">uIntf<pos:position pos:line="17" pos:column="18"/></name><operator pos:line="17" pos:column="18">*<pos:position pos:line="17" pos:column="19"/></operator><operator pos:line="17" pos:column="19">)<pos:position pos:line="17" pos:column="20"/></operator><call><name pos:line="17" pos:column="20">ZALLOC<pos:position pos:line="17" pos:column="26"/></name><argument_list pos:line="17" pos:column="26">(<argument><expr><name pos:line="17" pos:column="27">z<pos:position pos:line="17" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="17" pos:column="30">288<pos:position pos:line="17" pos:column="33"/></literal></expr></argument>, <argument><expr><sizeof pos:line="17" pos:column="35">sizeof<argument_list pos:line="17" pos:column="41">(<argument><expr><name pos:line="17" pos:column="42">uInt<pos:position pos:line="17" pos:column="46"/></name></expr></argument>)<pos:position pos:line="17" pos:column="47"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="17" pos:column="48"/></argument_list></call><operator pos:line="17" pos:column="48">)<pos:position pos:line="17" pos:column="49"/></operator> <operator pos:line="17" pos:column="50">==<pos:position pos:line="17" pos:column="52"/></operator> <name pos:line="17" pos:column="53">Z_NULL<pos:position pos:line="17" pos:column="59"/></name></expr>)<pos:position pos:line="17" pos:column="60"/></condition><then pos:line="17" pos:column="60">
    <block type="pseudo"><return pos:line="18" pos:column="5">return <expr><name pos:line="18" pos:column="12">Z_MEM_ERROR<pos:position pos:line="18" pos:column="23"/></name></expr>;<pos:position pos:line="18" pos:column="24"/></return></block></then></if>

  <comment type="block" pos:line="20" pos:column="3">/* build literal/length tree */</comment>
  <expr_stmt><expr><name pos:line="21" pos:column="3">r<pos:position pos:line="21" pos:column="4"/></name> <operator pos:line="21" pos:column="5">=<pos:position pos:line="21" pos:column="6"/></operator> <call><name pos:line="21" pos:column="7">huft_build<pos:position pos:line="21" pos:column="17"/></name><argument_list pos:line="21" pos:column="17">(<argument><expr><name pos:line="21" pos:column="18">c<pos:position pos:line="21" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="21">nl<pos:position pos:line="21" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="21" pos:column="25">257<pos:position pos:line="21" pos:column="28"/></literal></expr></argument>, <argument><expr><name pos:line="21" pos:column="30">cplens<pos:position pos:line="21" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="38">cplext<pos:position pos:line="21" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="46">tl<pos:position pos:line="21" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="50">bl<pos:position pos:line="21" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="54">hp<pos:position pos:line="21" pos:column="56"/></name></expr></argument>, <argument><expr><operator pos:line="21" pos:column="58">&amp;<pos:position pos:line="21" pos:column="63"/></operator><name pos:line="21" pos:column="59">hn<pos:position pos:line="21" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="63">v<pos:position pos:line="21" pos:column="64"/></name></expr></argument>)<pos:position pos:line="21" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="66"/></expr_stmt>
  <if pos:line="22" pos:column="3">if <condition pos:line="22" pos:column="6">(<expr><name pos:line="22" pos:column="7">r<pos:position pos:line="22" pos:column="8"/></name> <operator pos:line="22" pos:column="9">!=<pos:position pos:line="22" pos:column="11"/></operator> <name pos:line="22" pos:column="12">Z_OK<pos:position pos:line="22" pos:column="16"/></name> <operator pos:line="22" pos:column="17">||<pos:position pos:line="22" pos:column="19"/></operator> <operator pos:line="22" pos:column="20">*<pos:position pos:line="22" pos:column="21"/></operator><name pos:line="22" pos:column="21">bl<pos:position pos:line="22" pos:column="23"/></name> <operator pos:line="22" pos:column="24">==<pos:position pos:line="22" pos:column="26"/></operator> <literal type="number" pos:line="22" pos:column="27">0<pos:position pos:line="22" pos:column="28"/></literal></expr>)<pos:position pos:line="22" pos:column="29"/></condition><then pos:line="22" pos:column="29">
  <block pos:line="23" pos:column="3">{
    <if pos:line="24" pos:column="5">if <condition pos:line="24" pos:column="8">(<expr><name pos:line="24" pos:column="9">r<pos:position pos:line="24" pos:column="10"/></name> <operator pos:line="24" pos:column="11">==<pos:position pos:line="24" pos:column="13"/></operator> <name pos:line="24" pos:column="14">Z_DATA_ERROR<pos:position pos:line="24" pos:column="26"/></name></expr>)<pos:position pos:line="24" pos:column="27"/></condition><then pos:line="24" pos:column="27">
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="25" pos:column="7">z<pos:position pos:line="25" pos:column="8"/></name><operator pos:line="25" pos:column="8">-&gt;<pos:position pos:line="25" pos:column="13"/></operator><name pos:line="25" pos:column="10">msg<pos:position pos:line="25" pos:column="13"/></name></name> <operator pos:line="25" pos:column="14">=<pos:position pos:line="25" pos:column="15"/></operator> <operator pos:line="25" pos:column="16">(<pos:position pos:line="25" pos:column="17"/></operator><name pos:line="25" pos:column="17">char<pos:position pos:line="25" pos:column="21"/></name><operator pos:line="25" pos:column="21">*<pos:position pos:line="25" pos:column="22"/></operator><operator pos:line="25" pos:column="22">)<pos:position pos:line="25" pos:column="23"/></operator><literal type="string" pos:line="25" pos:column="23">"oversubscribed literal/length tree"<pos:position pos:line="25" pos:column="59"/></literal></expr>;<pos:position pos:line="25" pos:column="60"/></expr_stmt></block></then>
    <elseif pos:line="26" pos:column="5">else <if pos:line="26" pos:column="10">if <condition pos:line="26" pos:column="13">(<expr><name pos:line="26" pos:column="14">r<pos:position pos:line="26" pos:column="15"/></name> <operator pos:line="26" pos:column="16">!=<pos:position pos:line="26" pos:column="18"/></operator> <name pos:line="26" pos:column="19">Z_MEM_ERROR<pos:position pos:line="26" pos:column="30"/></name></expr>)<pos:position pos:line="26" pos:column="31"/></condition><then pos:line="26" pos:column="31">
    <block pos:line="27" pos:column="5">{
      <expr_stmt><expr><name><name pos:line="28" pos:column="7">z<pos:position pos:line="28" pos:column="8"/></name><operator pos:line="28" pos:column="8">-&gt;<pos:position pos:line="28" pos:column="13"/></operator><name pos:line="28" pos:column="10">msg<pos:position pos:line="28" pos:column="13"/></name></name> <operator pos:line="28" pos:column="14">=<pos:position pos:line="28" pos:column="15"/></operator> <operator pos:line="28" pos:column="16">(<pos:position pos:line="28" pos:column="17"/></operator><name pos:line="28" pos:column="17">char<pos:position pos:line="28" pos:column="21"/></name><operator pos:line="28" pos:column="21">*<pos:position pos:line="28" pos:column="22"/></operator><operator pos:line="28" pos:column="22">)<pos:position pos:line="28" pos:column="23"/></operator><literal type="string" pos:line="28" pos:column="23">"incomplete literal/length tree"<pos:position pos:line="28" pos:column="55"/></literal></expr>;<pos:position pos:line="28" pos:column="56"/></expr_stmt>
      <expr_stmt><expr><name pos:line="29" pos:column="7">r<pos:position pos:line="29" pos:column="8"/></name> <operator pos:line="29" pos:column="9">=<pos:position pos:line="29" pos:column="10"/></operator> <name pos:line="29" pos:column="11">Z_DATA_ERROR<pos:position pos:line="29" pos:column="23"/></name></expr>;<pos:position pos:line="29" pos:column="24"/></expr_stmt>
    }<pos:position pos:line="30" pos:column="6"/></block></then></if></elseif></if>
    <expr_stmt><expr><call><name pos:line="31" pos:column="5">ZFREE<pos:position pos:line="31" pos:column="10"/></name><argument_list pos:line="31" pos:column="10">(<argument><expr><name pos:line="31" pos:column="11">z<pos:position pos:line="31" pos:column="12"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="14">v<pos:position pos:line="31" pos:column="15"/></name></expr></argument>)<pos:position pos:line="31" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="17"/></expr_stmt>
    <return pos:line="32" pos:column="5">return <expr><name pos:line="32" pos:column="12">r<pos:position pos:line="32" pos:column="13"/></name></expr>;<pos:position pos:line="32" pos:column="14"/></return>
  }<pos:position pos:line="33" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="35" pos:column="3">/* build distance tree */</comment>
  <expr_stmt><expr><name pos:line="36" pos:column="3">r<pos:position pos:line="36" pos:column="4"/></name> <operator pos:line="36" pos:column="5">=<pos:position pos:line="36" pos:column="6"/></operator> <call><name pos:line="36" pos:column="7">huft_build<pos:position pos:line="36" pos:column="17"/></name><argument_list pos:line="36" pos:column="17">(<argument><expr><name pos:line="36" pos:column="18">c<pos:position pos:line="36" pos:column="19"/></name> <operator pos:line="36" pos:column="20">+<pos:position pos:line="36" pos:column="21"/></operator> <name pos:line="36" pos:column="22">nl<pos:position pos:line="36" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="26">nd<pos:position pos:line="36" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="36" pos:column="30">0<pos:position pos:line="36" pos:column="31"/></literal></expr></argument>, <argument><expr><name pos:line="36" pos:column="33">cpdist<pos:position pos:line="36" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="41">cpdext<pos:position pos:line="36" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="49">td<pos:position pos:line="36" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="53">bd<pos:position pos:line="36" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="57">hp<pos:position pos:line="36" pos:column="59"/></name></expr></argument>, <argument><expr><operator pos:line="36" pos:column="61">&amp;<pos:position pos:line="36" pos:column="66"/></operator><name pos:line="36" pos:column="62">hn<pos:position pos:line="36" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="66">v<pos:position pos:line="36" pos:column="67"/></name></expr></argument>)<pos:position pos:line="36" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="69"/></expr_stmt>
  <if pos:line="37" pos:column="3">if <condition pos:line="37" pos:column="6">(<expr><name pos:line="37" pos:column="7">r<pos:position pos:line="37" pos:column="8"/></name> <operator pos:line="37" pos:column="9">!=<pos:position pos:line="37" pos:column="11"/></operator> <name pos:line="37" pos:column="12">Z_OK<pos:position pos:line="37" pos:column="16"/></name> <operator pos:line="37" pos:column="17">||<pos:position pos:line="37" pos:column="19"/></operator> <operator pos:line="37" pos:column="20">(<pos:position pos:line="37" pos:column="21"/></operator><operator pos:line="37" pos:column="21">*<pos:position pos:line="37" pos:column="22"/></operator><name pos:line="37" pos:column="22">bd<pos:position pos:line="37" pos:column="24"/></name> <operator pos:line="37" pos:column="25">==<pos:position pos:line="37" pos:column="27"/></operator> <literal type="number" pos:line="37" pos:column="28">0<pos:position pos:line="37" pos:column="29"/></literal> <operator pos:line="37" pos:column="30">&amp;&amp;<pos:position pos:line="37" pos:column="40"/></operator> <name pos:line="37" pos:column="33">nl<pos:position pos:line="37" pos:column="35"/></name> <operator pos:line="37" pos:column="36">&gt;<pos:position pos:line="37" pos:column="40"/></operator> <literal type="number" pos:line="37" pos:column="38">257<pos:position pos:line="37" pos:column="41"/></literal><operator pos:line="37" pos:column="41">)<pos:position pos:line="37" pos:column="42"/></operator></expr>)<pos:position pos:line="37" pos:column="43"/></condition><then pos:line="37" pos:column="43">
  <block pos:line="38" pos:column="3">{
    <if pos:line="39" pos:column="5">if <condition pos:line="39" pos:column="8">(<expr><name pos:line="39" pos:column="9">r<pos:position pos:line="39" pos:column="10"/></name> <operator pos:line="39" pos:column="11">==<pos:position pos:line="39" pos:column="13"/></operator> <name pos:line="39" pos:column="14">Z_DATA_ERROR<pos:position pos:line="39" pos:column="26"/></name></expr>)<pos:position pos:line="39" pos:column="27"/></condition><then pos:line="39" pos:column="27">
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="40" pos:column="7">z<pos:position pos:line="40" pos:column="8"/></name><operator pos:line="40" pos:column="8">-&gt;<pos:position pos:line="40" pos:column="13"/></operator><name pos:line="40" pos:column="10">msg<pos:position pos:line="40" pos:column="13"/></name></name> <operator pos:line="40" pos:column="14">=<pos:position pos:line="40" pos:column="15"/></operator> <operator pos:line="40" pos:column="16">(<pos:position pos:line="40" pos:column="17"/></operator><name pos:line="40" pos:column="17">char<pos:position pos:line="40" pos:column="21"/></name><operator pos:line="40" pos:column="21">*<pos:position pos:line="40" pos:column="22"/></operator><operator pos:line="40" pos:column="22">)<pos:position pos:line="40" pos:column="23"/></operator><literal type="string" pos:line="40" pos:column="23">"oversubscribed distance tree"<pos:position pos:line="40" pos:column="53"/></literal></expr>;<pos:position pos:line="40" pos:column="54"/></expr_stmt></block></then>
    <elseif pos:line="41" pos:column="5">else <if pos:line="41" pos:column="10">if <condition pos:line="41" pos:column="13">(<expr><name pos:line="41" pos:column="14">r<pos:position pos:line="41" pos:column="15"/></name> <operator pos:line="41" pos:column="16">==<pos:position pos:line="41" pos:column="18"/></operator> <name pos:line="41" pos:column="19">Z_BUF_ERROR<pos:position pos:line="41" pos:column="30"/></name></expr>)<pos:position pos:line="41" pos:column="31"/></condition><then pos:line="41" pos:column="31"> <block pos:line="41" pos:column="32">{
<cpp:ifdef pos:line="42" pos:column="1">#<cpp:directive pos:line="42" pos:column="2">ifdef<pos:position pos:line="42" pos:column="7"/></cpp:directive> <name pos:line="42" pos:column="8">PKZIP_BUG_WORKAROUND<pos:position pos:line="42" pos:column="28"/></name></cpp:ifdef>
      <expr_stmt><expr><name pos:line="43" pos:column="7">r<pos:position pos:line="43" pos:column="8"/></name> <operator pos:line="43" pos:column="9">=<pos:position pos:line="43" pos:column="10"/></operator> <name pos:line="43" pos:column="11">Z_OK<pos:position pos:line="43" pos:column="15"/></name></expr>;<pos:position pos:line="43" pos:column="16"/></expr_stmt>
    }<pos:position pos:line="44" pos:column="6"/></block></then></if></elseif></if>
<cpp:else pos:line="45" pos:column="1">#<cpp:directive pos:line="45" pos:column="2">else<pos:position pos:line="45" pos:column="6"/></cpp:directive></cpp:else>
      <expr_stmt><expr><name><name pos:line="46" pos:column="7">z<pos:position pos:line="46" pos:column="8"/></name><operator pos:line="46" pos:column="8">-&gt;<pos:position pos:line="46" pos:column="13"/></operator><name pos:line="46" pos:column="10">msg<pos:position pos:line="46" pos:column="13"/></name></name> <operator pos:line="46" pos:column="14">=<pos:position pos:line="46" pos:column="15"/></operator> <operator pos:line="46" pos:column="16">(<pos:position pos:line="46" pos:column="17"/></operator><name pos:line="46" pos:column="17">char<pos:position pos:line="46" pos:column="21"/></name><operator pos:line="46" pos:column="21">*<pos:position pos:line="46" pos:column="22"/></operator><operator pos:line="46" pos:column="22">)<pos:position pos:line="46" pos:column="23"/></operator><literal type="string" pos:line="46" pos:column="23">"incomplete distance tree"<pos:position pos:line="46" pos:column="49"/></literal></expr>;<pos:position pos:line="46" pos:column="50"/></expr_stmt>
      <expr_stmt><expr><name pos:line="47" pos:column="7">r<pos:position pos:line="47" pos:column="8"/></name> <operator pos:line="47" pos:column="9">=<pos:position pos:line="47" pos:column="10"/></operator> <name pos:line="47" pos:column="11">Z_DATA_ERROR<pos:position pos:line="47" pos:column="23"/></name></expr>;<pos:position pos:line="47" pos:column="24"/></expr_stmt>
    }<pos:position pos:line="48" pos:column="6"/></block></then>
    <elseif pos:line="49" pos:column="5">else <if pos:line="49" pos:column="10">if <condition pos:line="49" pos:column="13">(<expr><name pos:line="49" pos:column="14">r<pos:position pos:line="49" pos:column="15"/></name> <operator pos:line="49" pos:column="16">!=<pos:position pos:line="49" pos:column="18"/></operator> <name pos:line="49" pos:column="19">Z_MEM_ERROR<pos:position pos:line="49" pos:column="30"/></name></expr>)<pos:position pos:line="49" pos:column="31"/></condition><then pos:line="49" pos:column="31">
    <block pos:line="50" pos:column="5">{
      <expr_stmt><expr><name><name pos:line="51" pos:column="7">z<pos:position pos:line="51" pos:column="8"/></name><operator pos:line="51" pos:column="8">-&gt;<pos:position pos:line="51" pos:column="13"/></operator><name pos:line="51" pos:column="10">msg<pos:position pos:line="51" pos:column="13"/></name></name> <operator pos:line="51" pos:column="14">=<pos:position pos:line="51" pos:column="15"/></operator> <operator pos:line="51" pos:column="16">(<pos:position pos:line="51" pos:column="17"/></operator><name pos:line="51" pos:column="17">char<pos:position pos:line="51" pos:column="21"/></name><operator pos:line="51" pos:column="21">*<pos:position pos:line="51" pos:column="22"/></operator><operator pos:line="51" pos:column="22">)<pos:position pos:line="51" pos:column="23"/></operator><literal type="string" pos:line="51" pos:column="23">"empty distance tree with lengths"<pos:position pos:line="51" pos:column="57"/></literal></expr>;<pos:position pos:line="51" pos:column="58"/></expr_stmt>
      <expr_stmt><expr><name pos:line="52" pos:column="7">r<pos:position pos:line="52" pos:column="8"/></name> <operator pos:line="52" pos:column="9">=<pos:position pos:line="52" pos:column="10"/></operator> <name pos:line="52" pos:column="11">Z_DATA_ERROR<pos:position pos:line="52" pos:column="23"/></name></expr>;<pos:position pos:line="52" pos:column="24"/></expr_stmt>
    }<pos:position pos:line="53" pos:column="6"/></block></then></if></elseif></if>
    <expr_stmt><expr><call><name pos:line="54" pos:column="5">ZFREE<pos:position pos:line="54" pos:column="10"/></name><argument_list pos:line="54" pos:column="10">(<argument><expr><name pos:line="54" pos:column="11">z<pos:position pos:line="54" pos:column="12"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="14">v<pos:position pos:line="54" pos:column="15"/></name></expr></argument>)<pos:position pos:line="54" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="17"/></expr_stmt>
    <return pos:line="55" pos:column="5">return <expr><name pos:line="55" pos:column="12">r<pos:position pos:line="55" pos:column="13"/></name></expr>;<pos:position pos:line="55" pos:column="14"/></return>
<cpp:endif pos:line="56" pos:column="1">#<cpp:directive pos:line="56" pos:column="2">endif<pos:position pos:line="56" pos:column="7"/></cpp:directive></cpp:endif>
  }<pos:position pos:line="57" pos:column="4"/></block></function_decl></unit>
