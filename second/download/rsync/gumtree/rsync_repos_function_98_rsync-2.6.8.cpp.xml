<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_98_rsync-2.6.8.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">maybe_send_keepalive<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><name pos:line="1" pos:column="27">void<pos:position pos:line="1" pos:column="31"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="32"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<if pos:line="3" pos:column="9">if <condition pos:line="3" pos:column="12">(<expr><call><name pos:line="3" pos:column="13">time<pos:position pos:line="3" pos:column="17"/></name><argument_list pos:line="3" pos:column="17">(<argument><expr><name pos:line="3" pos:column="18">NULL<pos:position pos:line="3" pos:column="22"/></name></expr></argument>)<pos:position pos:line="3" pos:column="23"/></argument_list></call> <operator pos:line="3" pos:column="24">-<pos:position pos:line="3" pos:column="25"/></operator> <name pos:line="3" pos:column="26">last_io_out<pos:position pos:line="3" pos:column="37"/></name> <operator pos:line="3" pos:column="38">&gt;=<pos:position pos:line="3" pos:column="43"/></operator> <name pos:line="3" pos:column="41">allowed_lull<pos:position pos:line="3" pos:column="53"/></name></expr>)<pos:position pos:line="3" pos:column="54"/></condition><then pos:line="3" pos:column="54"> <block pos:line="3" pos:column="55">{
		<if pos:line="4" pos:column="17">if <condition pos:line="4" pos:column="20">(<expr><operator pos:line="4" pos:column="21">!<pos:position pos:line="4" pos:column="22"/></operator><name pos:line="4" pos:column="22">iobuf_out<pos:position pos:line="4" pos:column="31"/></name> <operator pos:line="4" pos:column="32">||<pos:position pos:line="4" pos:column="34"/></operator> <operator pos:line="4" pos:column="35">!<pos:position pos:line="4" pos:column="36"/></operator><name pos:line="4" pos:column="36">iobuf_out_cnt<pos:position pos:line="4" pos:column="49"/></name></expr>)<pos:position pos:line="4" pos:column="50"/></condition><then pos:line="4" pos:column="50"> <block pos:line="4" pos:column="51">{
			<if pos:line="5" pos:column="25">if <condition pos:line="5" pos:column="28">(<expr><name pos:line="5" pos:column="29">protocol_version<pos:position pos:line="5" pos:column="45"/></name> <operator pos:line="5" pos:column="46">&lt;<pos:position pos:line="5" pos:column="50"/></operator> <literal type="number" pos:line="5" pos:column="48">29<pos:position pos:line="5" pos:column="50"/></literal></expr>)<pos:position pos:line="5" pos:column="51"/></condition><then pos:line="5" pos:column="51">
				<block type="pseudo"><return pos:line="6" pos:column="33">return;<pos:position pos:line="6" pos:column="40"/></return></block></then></if> <comment type="block" pos:line="6" pos:column="41">/* there's nothing we can do */</comment>
			<expr_stmt><expr><call><name pos:line="7" pos:column="25">write_int<pos:position pos:line="7" pos:column="34"/></name><argument_list pos:line="7" pos:column="34">(<argument><expr><name pos:line="7" pos:column="35">sock_f_out<pos:position pos:line="7" pos:column="45"/></name></expr></argument>, <argument><expr><name><name pos:line="7" pos:column="47">the_file_list<pos:position pos:line="7" pos:column="60"/></name><operator pos:line="7" pos:column="60">-&gt;<pos:position pos:line="7" pos:column="65"/></operator><name pos:line="7" pos:column="62">count<pos:position pos:line="7" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="7" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="69"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="8" pos:column="25">write_shortint<pos:position pos:line="8" pos:column="39"/></name><argument_list pos:line="8" pos:column="39">(<argument><expr><name pos:line="8" pos:column="40">sock_f_out<pos:position pos:line="8" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="52">ITEM_IS_NEW<pos:position pos:line="8" pos:column="63"/></name></expr></argument>)<pos:position pos:line="8" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="65"/></expr_stmt>
		}<pos:position pos:line="9" pos:column="18"/></block></then></if>
		<if pos:line="10" pos:column="17">if <condition pos:line="10" pos:column="20">(<expr><name pos:line="10" pos:column="21">iobuf_out<pos:position pos:line="10" pos:column="30"/></name></expr>)<pos:position pos:line="10" pos:column="31"/></condition><then pos:line="10" pos:column="31">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="11" pos:column="25">io_flush<pos:position pos:line="11" pos:column="33"/></name><argument_list pos:line="11" pos:column="33">(<argument><expr><name pos:line="11" pos:column="34">NORMAL_FLUSH<pos:position pos:line="11" pos:column="46"/></name></expr></argument>)<pos:position pos:line="11" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="48"/></expr_stmt></block></then></if>
	}<pos:position pos:line="12" pos:column="10"/></block></then></if>
}<pos:position pos:line="13" pos:column="2"/></block></function></unit>
