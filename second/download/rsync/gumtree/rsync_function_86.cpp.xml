<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_function_86.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">write_int<pos:position pos:line="1" pos:column="15"/></name><parameter_list pos:line="1" pos:column="15">(<parameter><decl><type><name pos:line="1" pos:column="16">int<pos:position pos:line="1" pos:column="19"/></name></type> <name pos:line="1" pos:column="20">f<pos:position pos:line="1" pos:column="21"/></name></decl></parameter>,<parameter><decl><type><name pos:line="1" pos:column="22">int<pos:position pos:line="1" pos:column="25"/></name></type> <name pos:line="1" pos:column="26">x<pos:position pos:line="1" pos:column="27"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="28"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">char<pos:position pos:line="3" pos:column="7"/></name></type> <name><name pos:line="3" pos:column="8">b<pos:position pos:line="3" pos:column="9"/></name><index pos:line="3" pos:column="9">[<expr><literal type="number" pos:line="3" pos:column="10">4<pos:position pos:line="3" pos:column="11"/></literal></expr>]<pos:position pos:line="3" pos:column="12"/></index></name></decl>;<pos:position pos:line="3" pos:column="13"/></decl_stmt>
  <expr_stmt><expr><call><name pos:line="4" pos:column="3">SIVAL<pos:position pos:line="4" pos:column="8"/></name><argument_list pos:line="4" pos:column="8">(<argument><expr><name pos:line="4" pos:column="9">b<pos:position pos:line="4" pos:column="10"/></name></expr></argument>,<argument><expr><literal type="number" pos:line="4" pos:column="11">0<pos:position pos:line="4" pos:column="12"/></literal></expr></argument>,<argument><expr><name pos:line="4" pos:column="13">x<pos:position pos:line="4" pos:column="14"/></name></expr></argument>)<pos:position pos:line="4" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="16"/></expr_stmt>
  <if pos:line="5" pos:column="3">if <condition pos:line="5" pos:column="6">(<expr><call><name pos:line="5" pos:column="7">write<pos:position pos:line="5" pos:column="12"/></name><argument_list pos:line="5" pos:column="12">(<argument><expr><name pos:line="5" pos:column="13">f<pos:position pos:line="5" pos:column="14"/></name></expr></argument>,<argument><expr><name pos:line="5" pos:column="15">b<pos:position pos:line="5" pos:column="16"/></name></expr></argument>,<argument><expr><literal type="number" pos:line="5" pos:column="17">4<pos:position pos:line="5" pos:column="18"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="19"/></argument_list></call> <operator pos:line="5" pos:column="20">!=<pos:position pos:line="5" pos:column="22"/></operator> <literal type="number" pos:line="5" pos:column="23">4<pos:position pos:line="5" pos:column="24"/></literal></expr>)<pos:position pos:line="5" pos:column="25"/></condition><then pos:line="5" pos:column="25"> <block pos:line="5" pos:column="26">{
    <expr_stmt><expr><call><name pos:line="6" pos:column="5">fprintf<pos:position pos:line="6" pos:column="12"/></name><argument_list pos:line="6" pos:column="12">(<argument><expr><name pos:line="6" pos:column="13">stderr<pos:position pos:line="6" pos:column="19"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="6" pos:column="20">"write_int failed : %s\n"<pos:position pos:line="6" pos:column="45"/></literal></expr></argument>,<argument><expr><call><name pos:line="6" pos:column="46">strerror<pos:position pos:line="6" pos:column="54"/></name><argument_list pos:line="6" pos:column="54">(<argument><expr><name pos:line="6" pos:column="55">errno<pos:position pos:line="6" pos:column="60"/></name></expr></argument>)<pos:position pos:line="6" pos:column="61"/></argument_list></call></expr></argument>)<pos:position pos:line="6" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="63"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="7" pos:column="5">exit<pos:position pos:line="7" pos:column="9"/></name><argument_list pos:line="7" pos:column="9">(<argument><expr><literal type="number" pos:line="7" pos:column="10">1<pos:position pos:line="7" pos:column="11"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="12"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="13"/></expr_stmt>
  }<pos:position pos:line="8" pos:column="4"/></block></then></if>
  <expr_stmt><expr><name pos:line="9" pos:column="3">total_written<pos:position pos:line="9" pos:column="16"/></name> <operator pos:line="9" pos:column="17">+=<pos:position pos:line="9" pos:column="19"/></operator> <literal type="number" pos:line="9" pos:column="20">4<pos:position pos:line="9" pos:column="21"/></literal></expr>;<pos:position pos:line="9" pos:column="22"/></expr_stmt>
}<pos:position pos:line="10" pos:column="2"/></block></function></unit>
