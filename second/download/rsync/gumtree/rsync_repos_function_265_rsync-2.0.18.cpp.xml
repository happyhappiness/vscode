<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_265_rsync-2.0.18.cpp" pos:tabs="8"><decl_stmt><decl><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">inflate_fast<pos:position pos:line="1" pos:column="17"/></name><argument_list pos:line="1" pos:column="17">(<argument><expr><name pos:line="1" pos:column="18">bl<pos:position pos:line="1" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="1" pos:column="22">bd<pos:position pos:line="1" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="1" pos:column="26">tl<pos:position pos:line="1" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="1" pos:column="30">td<pos:position pos:line="1" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="1" pos:column="34">s<pos:position pos:line="1" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="1" pos:column="37">z<pos:position pos:line="1" pos:column="38"/></name></expr></argument>)<pos:position pos:line="1" pos:column="39"/></argument_list>
<name pos:line="2" pos:column="1">uInt<pos:position pos:line="2" pos:column="5"/></name> <name pos:line="2" pos:column="6">bl<pos:position pos:line="2" pos:column="8"/></name></decl>, <decl><type ref="prev"/><name pos:line="2" pos:column="10">bd<pos:position pos:line="2" pos:column="12"/></name></decl>;<pos:position pos:line="2" pos:column="13"/></decl_stmt>
<decl_stmt><decl><type><name pos:line="3" pos:column="1">inflate_huft<pos:position pos:line="3" pos:column="13"/></name> <modifier pos:line="3" pos:column="14">*<pos:position pos:line="3" pos:column="15"/></modifier></type><name pos:line="3" pos:column="15">tl<pos:position pos:line="3" pos:column="17"/></name></decl>;<pos:position pos:line="3" pos:column="18"/></decl_stmt>
<decl_stmt><decl><type><name pos:line="4" pos:column="1">inflate_huft<pos:position pos:line="4" pos:column="13"/></name> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier></type><name pos:line="4" pos:column="15">td<pos:position pos:line="4" pos:column="17"/></name></decl>;<pos:position pos:line="4" pos:column="18"/></decl_stmt> <comment type="block" pos:line="4" pos:column="19">/* need separate declaration for Borland C++ */</comment>
<decl_stmt><decl><type><name pos:line="5" pos:column="1">inflate_blocks_statef<pos:position pos:line="5" pos:column="22"/></name> <modifier pos:line="5" pos:column="23">*<pos:position pos:line="5" pos:column="24"/></modifier></type><name pos:line="5" pos:column="24">s<pos:position pos:line="5" pos:column="25"/></name></decl>;<pos:position pos:line="5" pos:column="26"/></decl_stmt>
<decl_stmt><decl><type><name pos:line="6" pos:column="1">z_streamp<pos:position pos:line="6" pos:column="10"/></name></type> <name pos:line="6" pos:column="11">z<pos:position pos:line="6" pos:column="12"/></name></decl>;<pos:position pos:line="6" pos:column="13"/></decl_stmt>
<block pos:line="7" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">inflate_huft<pos:position pos:line="8" pos:column="15"/></name> <modifier pos:line="8" pos:column="16">*<pos:position pos:line="8" pos:column="17"/></modifier></type><name pos:line="8" pos:column="17">t<pos:position pos:line="8" pos:column="18"/></name></decl>;<pos:position pos:line="8" pos:column="19"/></decl_stmt>      <comment type="block" pos:line="8" pos:column="25">/* temporary pointer */</comment>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">uInt<pos:position pos:line="9" pos:column="7"/></name></type> <name pos:line="9" pos:column="8">e<pos:position pos:line="9" pos:column="9"/></name></decl>;<pos:position pos:line="9" pos:column="10"/></decl_stmt>               <comment type="block" pos:line="9" pos:column="25">/* extra bits or operation */</comment>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">uLong<pos:position pos:line="10" pos:column="8"/></name></type> <name pos:line="10" pos:column="9">b<pos:position pos:line="10" pos:column="10"/></name></decl>;<pos:position pos:line="10" pos:column="11"/></decl_stmt>              <comment type="block" pos:line="10" pos:column="25">/* bit buffer */</comment>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">uInt<pos:position pos:line="11" pos:column="7"/></name></type> <name pos:line="11" pos:column="8">k<pos:position pos:line="11" pos:column="9"/></name></decl>;<pos:position pos:line="11" pos:column="10"/></decl_stmt>               <comment type="block" pos:line="11" pos:column="25">/* bits in bit buffer */</comment>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">Bytef<pos:position pos:line="12" pos:column="8"/></name> <modifier pos:line="12" pos:column="9">*<pos:position pos:line="12" pos:column="10"/></modifier></type><name pos:line="12" pos:column="10">p<pos:position pos:line="12" pos:column="11"/></name></decl>;<pos:position pos:line="12" pos:column="12"/></decl_stmt>             <comment type="block" pos:line="12" pos:column="25">/* input data pointer */</comment>
  <decl_stmt><decl><type><name pos:line="13" pos:column="3">uInt<pos:position pos:line="13" pos:column="7"/></name></type> <name pos:line="13" pos:column="8">n<pos:position pos:line="13" pos:column="9"/></name></decl>;<pos:position pos:line="13" pos:column="10"/></decl_stmt>               <comment type="block" pos:line="13" pos:column="25">/* bytes available there */</comment>
  <decl_stmt><decl><type><name pos:line="14" pos:column="3">Bytef<pos:position pos:line="14" pos:column="8"/></name> <modifier pos:line="14" pos:column="9">*<pos:position pos:line="14" pos:column="10"/></modifier></type><name pos:line="14" pos:column="10">q<pos:position pos:line="14" pos:column="11"/></name></decl>;<pos:position pos:line="14" pos:column="12"/></decl_stmt>             <comment type="block" pos:line="14" pos:column="25">/* output window write pointer */</comment>
  <decl_stmt><decl><type><name pos:line="15" pos:column="3">uInt<pos:position pos:line="15" pos:column="7"/></name></type> <name pos:line="15" pos:column="8">m<pos:position pos:line="15" pos:column="9"/></name></decl>;<pos:position pos:line="15" pos:column="10"/></decl_stmt>               <comment type="block" pos:line="15" pos:column="25">/* bytes to end of window or read pointer */</comment>
  <decl_stmt><decl><type><name pos:line="16" pos:column="3">uInt<pos:position pos:line="16" pos:column="7"/></name></type> <name pos:line="16" pos:column="8">ml<pos:position pos:line="16" pos:column="10"/></name></decl>;<pos:position pos:line="16" pos:column="11"/></decl_stmt>              <comment type="block" pos:line="16" pos:column="25">/* mask for literal/length tree */</comment>
  <decl_stmt><decl><type><name pos:line="17" pos:column="3">uInt<pos:position pos:line="17" pos:column="7"/></name></type> <name pos:line="17" pos:column="8">md<pos:position pos:line="17" pos:column="10"/></name></decl>;<pos:position pos:line="17" pos:column="11"/></decl_stmt>              <comment type="block" pos:line="17" pos:column="25">/* mask for distance tree */</comment>
  <decl_stmt><decl><type><name pos:line="18" pos:column="3">uInt<pos:position pos:line="18" pos:column="7"/></name></type> <name pos:line="18" pos:column="8">c<pos:position pos:line="18" pos:column="9"/></name></decl>;<pos:position pos:line="18" pos:column="10"/></decl_stmt>               <comment type="block" pos:line="18" pos:column="25">/* bytes to copy */</comment>
  <decl_stmt><decl><type><name pos:line="19" pos:column="3">uInt<pos:position pos:line="19" pos:column="7"/></name></type> <name pos:line="19" pos:column="8">d<pos:position pos:line="19" pos:column="9"/></name></decl>;<pos:position pos:line="19" pos:column="10"/></decl_stmt>               <comment type="block" pos:line="19" pos:column="25">/* distance back to copy from */</comment>
  <decl_stmt><decl><type><name pos:line="20" pos:column="3">Bytef<pos:position pos:line="20" pos:column="8"/></name> <modifier pos:line="20" pos:column="9">*<pos:position pos:line="20" pos:column="10"/></modifier></type><name pos:line="20" pos:column="10">r<pos:position pos:line="20" pos:column="11"/></name></decl>;<pos:position pos:line="20" pos:column="12"/></decl_stmt>             <comment type="block" pos:line="20" pos:column="25">/* copy source pointer */</comment>

  <comment type="block" pos:line="22" pos:column="3">/* load input, output, bit values */</comment>
  <decl_stmt><decl><type><name pos:line="23" pos:column="3">LOAD<pos:position pos:line="23" pos:column="7"/></name></type>

  <comment type="block" pos:line="25" pos:column="3">/* initialize masks */</comment>
  <name pos:line="26" pos:column="3">ml<pos:position pos:line="26" pos:column="5"/></name> <init pos:line="26" pos:column="6">= <expr><name><name pos:line="26" pos:column="8">inflate_mask<pos:position pos:line="26" pos:column="20"/></name><index pos:line="26" pos:column="20">[<expr><name pos:line="26" pos:column="21">bl<pos:position pos:line="26" pos:column="23"/></name></expr>]<pos:position pos:line="26" pos:column="24"/></index></name></expr></init></decl>;<pos:position pos:line="26" pos:column="25"/></decl_stmt>
  <expr_stmt><expr><name pos:line="27" pos:column="3">md<pos:position pos:line="27" pos:column="5"/></name> <operator pos:line="27" pos:column="6">=<pos:position pos:line="27" pos:column="7"/></operator> <name><name pos:line="27" pos:column="8">inflate_mask<pos:position pos:line="27" pos:column="20"/></name><index pos:line="27" pos:column="20">[<expr><name pos:line="27" pos:column="21">bd<pos:position pos:line="27" pos:column="23"/></name></expr>]<pos:position pos:line="27" pos:column="24"/></index></name></expr>;<pos:position pos:line="27" pos:column="25"/></expr_stmt>

  <comment type="block" pos:line="29" pos:column="3">/* do until not enough input or output space for fast loop */</comment>
  <do pos:line="30" pos:column="3">do <block pos:line="30" pos:column="6">{                          <comment type="block" pos:line="30" pos:column="33">/* assume called with m &gt;= 258 &amp;&amp; n &gt;= 10 */</comment>
    <comment type="block" pos:line="31" pos:column="5">/* get literal/length code */</comment>
    <macro><name pos:line="32" pos:column="5">GRABBITS<pos:position pos:line="32" pos:column="13"/></name><argument_list pos:line="32" pos:column="13">(<argument><literal type="number" pos:line="32" pos:column="14">20<pos:position pos:line="32" pos:column="16"/></literal></argument>)<pos:position pos:line="32" pos:column="17"/></argument_list></macro>                <comment type="block" pos:line="32" pos:column="33">/* max bits for literal/length code */</comment>
    <if pos:line="33" pos:column="5">if <condition pos:line="33" pos:column="8">(<expr><operator pos:line="33" pos:column="9">(<pos:position pos:line="33" pos:column="10"/></operator><name pos:line="33" pos:column="10">e<pos:position pos:line="33" pos:column="11"/></name> <operator pos:line="33" pos:column="12">=<pos:position pos:line="33" pos:column="13"/></operator> <operator pos:line="33" pos:column="14">(<pos:position pos:line="33" pos:column="15"/></operator><name pos:line="33" pos:column="15">t<pos:position pos:line="33" pos:column="16"/></name> <operator pos:line="33" pos:column="17">=<pos:position pos:line="33" pos:column="18"/></operator> <name pos:line="33" pos:column="19">tl<pos:position pos:line="33" pos:column="21"/></name> <operator pos:line="33" pos:column="22">+<pos:position pos:line="33" pos:column="23"/></operator> <operator pos:line="33" pos:column="24">(<pos:position pos:line="33" pos:column="25"/></operator><operator pos:line="33" pos:column="25">(<pos:position pos:line="33" pos:column="26"/></operator><name pos:line="33" pos:column="26">uInt<pos:position pos:line="33" pos:column="30"/></name><operator pos:line="33" pos:column="30">)<pos:position pos:line="33" pos:column="31"/></operator><name pos:line="33" pos:column="31">b<pos:position pos:line="33" pos:column="32"/></name> <operator pos:line="33" pos:column="33">&amp;<pos:position pos:line="33" pos:column="38"/></operator> <name pos:line="33" pos:column="35">ml<pos:position pos:line="33" pos:column="37"/></name><operator pos:line="33" pos:column="37">)<pos:position pos:line="33" pos:column="38"/></operator><operator pos:line="33" pos:column="38">)<pos:position pos:line="33" pos:column="39"/></operator><operator pos:line="33" pos:column="39">-&gt;<pos:position pos:line="33" pos:column="44"/></operator><name pos:line="33" pos:column="41">exop<pos:position pos:line="33" pos:column="45"/></name><operator pos:line="33" pos:column="45">)<pos:position pos:line="33" pos:column="46"/></operator> <operator pos:line="33" pos:column="47">==<pos:position pos:line="33" pos:column="49"/></operator> <literal type="number" pos:line="33" pos:column="50">0<pos:position pos:line="33" pos:column="51"/></literal></expr>)<pos:position pos:line="33" pos:column="52"/></condition><then pos:line="33" pos:column="52">
    <block pos:line="34" pos:column="5">{
      <macro><name pos:line="35" pos:column="7">DUMPBITS<pos:position pos:line="35" pos:column="15"/></name><argument_list pos:line="35" pos:column="15">(<argument pos:line="35" pos:column="16">t-&gt;bits<pos:position pos:line="35" pos:column="23"/></argument>)<pos:position pos:line="35" pos:column="24"/></argument_list></macro>
      <expr_stmt><expr><call><name pos:line="36" pos:column="7">Tracevv<pos:position pos:line="36" pos:column="14"/></name><argument_list pos:line="36" pos:column="14">(<argument><expr><operator pos:line="36" pos:column="15">(<pos:position pos:line="36" pos:column="16"/></operator><name pos:line="36" pos:column="16">stderr<pos:position pos:line="36" pos:column="22"/></name><operator pos:line="36" pos:column="22">,<pos:position pos:line="36" pos:column="23"/></operator> <ternary><condition><expr><name><name pos:line="36" pos:column="24">t<pos:position pos:line="36" pos:column="25"/></name><operator pos:line="36" pos:column="25">-&gt;<pos:position pos:line="36" pos:column="30"/></operator><name pos:line="36" pos:column="27">base<pos:position pos:line="36" pos:column="31"/></name></name> <operator pos:line="36" pos:column="32">&gt;=<pos:position pos:line="36" pos:column="37"/></operator> <literal type="number" pos:line="36" pos:column="35">0x20<pos:position pos:line="36" pos:column="39"/></literal> <operator pos:line="36" pos:column="40">&amp;&amp;<pos:position pos:line="36" pos:column="50"/></operator> <name><name pos:line="36" pos:column="43">t<pos:position pos:line="36" pos:column="44"/></name><operator pos:line="36" pos:column="44">-&gt;<pos:position pos:line="36" pos:column="49"/></operator><name pos:line="36" pos:column="46">base<pos:position pos:line="36" pos:column="50"/></name></name> <operator pos:line="36" pos:column="51">&lt;<pos:position pos:line="36" pos:column="55"/></operator> <literal type="number" pos:line="36" pos:column="53">0x7f<pos:position pos:line="36" pos:column="57"/></literal></expr> ?<pos:position pos:line="36" pos:column="59"/></condition><then pos:line="36" pos:column="59">
                <expr><literal type="string" pos:line="37" pos:column="17">"inflate:         * literal '%c'\n"<pos:position pos:line="37" pos:column="52"/></literal></expr> <pos:position pos:line="37" pos:column="53"/></then><else pos:line="37" pos:column="53">:
                <expr><literal type="string" pos:line="38" pos:column="17">"inflate:         * literal 0x%02x\n"<pos:position pos:line="38" pos:column="54"/></literal></expr></else></ternary><operator pos:line="38" pos:column="54">,<pos:position pos:line="38" pos:column="55"/></operator> <name><name pos:line="38" pos:column="56">t<pos:position pos:line="38" pos:column="57"/></name><operator pos:line="38" pos:column="57">-&gt;<pos:position pos:line="38" pos:column="62"/></operator><name pos:line="38" pos:column="59">base<pos:position pos:line="38" pos:column="63"/></name></name><operator pos:line="38" pos:column="63">)<pos:position pos:line="38" pos:column="64"/></operator></expr></argument>)<pos:position pos:line="38" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="66"/></expr_stmt>
      <expr_stmt><expr><operator pos:line="39" pos:column="7">*<pos:position pos:line="39" pos:column="8"/></operator><name pos:line="39" pos:column="8">q<pos:position pos:line="39" pos:column="9"/></name><operator pos:line="39" pos:column="9">++<pos:position pos:line="39" pos:column="11"/></operator> <operator pos:line="39" pos:column="12">=<pos:position pos:line="39" pos:column="13"/></operator> <operator pos:line="39" pos:column="14">(<pos:position pos:line="39" pos:column="15"/></operator><name pos:line="39" pos:column="15">Byte<pos:position pos:line="39" pos:column="19"/></name><operator pos:line="39" pos:column="19">)<pos:position pos:line="39" pos:column="20"/></operator><name><name pos:line="39" pos:column="20">t<pos:position pos:line="39" pos:column="21"/></name><operator pos:line="39" pos:column="21">-&gt;<pos:position pos:line="39" pos:column="26"/></operator><name pos:line="39" pos:column="23">base<pos:position pos:line="39" pos:column="27"/></name></name></expr>;<pos:position pos:line="39" pos:column="28"/></expr_stmt>
      <expr_stmt><expr><name pos:line="40" pos:column="7">m<pos:position pos:line="40" pos:column="8"/></name><operator pos:line="40" pos:column="8">--<pos:position pos:line="40" pos:column="10"/></operator></expr>;<pos:position pos:line="40" pos:column="11"/></expr_stmt>
      <continue pos:line="41" pos:column="7">continue;<pos:position pos:line="41" pos:column="16"/></continue>
    }<pos:position pos:line="42" pos:column="6"/></block></then></if>
    <do pos:line="43" pos:column="5">do <block pos:line="43" pos:column="8">{
      <macro><name pos:line="44" pos:column="7">DUMPBITS<pos:position pos:line="44" pos:column="15"/></name><argument_list pos:line="44" pos:column="15">(<argument pos:line="44" pos:column="16">t-&gt;bits<pos:position pos:line="44" pos:column="23"/></argument>)<pos:position pos:line="44" pos:column="24"/></argument_list></macro>
      <if pos:line="45" pos:column="7">if <condition pos:line="45" pos:column="10">(<expr><name pos:line="45" pos:column="11">e<pos:position pos:line="45" pos:column="12"/></name> <operator pos:line="45" pos:column="13">&amp;<pos:position pos:line="45" pos:column="18"/></operator> <literal type="number" pos:line="45" pos:column="15">16<pos:position pos:line="45" pos:column="17"/></literal></expr>)<pos:position pos:line="45" pos:column="18"/></condition><then pos:line="45" pos:column="18">
      <block pos:line="46" pos:column="7">{
        <comment type="block" pos:line="47" pos:column="9">/* get extra bits for length */</comment>
        <expr_stmt><expr><name pos:line="48" pos:column="9">e<pos:position pos:line="48" pos:column="10"/></name> <operator pos:line="48" pos:column="11">&amp;=<pos:position pos:line="48" pos:column="17"/></operator> <literal type="number" pos:line="48" pos:column="14">15<pos:position pos:line="48" pos:column="16"/></literal></expr>;<pos:position pos:line="48" pos:column="17"/></expr_stmt>
        <expr_stmt><expr><name pos:line="49" pos:column="9">c<pos:position pos:line="49" pos:column="10"/></name> <operator pos:line="49" pos:column="11">=<pos:position pos:line="49" pos:column="12"/></operator> <name><name pos:line="49" pos:column="13">t<pos:position pos:line="49" pos:column="14"/></name><operator pos:line="49" pos:column="14">-&gt;<pos:position pos:line="49" pos:column="19"/></operator><name pos:line="49" pos:column="16">base<pos:position pos:line="49" pos:column="20"/></name></name> <operator pos:line="49" pos:column="21">+<pos:position pos:line="49" pos:column="22"/></operator> <operator pos:line="49" pos:column="23">(<pos:position pos:line="49" pos:column="24"/></operator><operator pos:line="49" pos:column="24">(<pos:position pos:line="49" pos:column="25"/></operator><name pos:line="49" pos:column="25">uInt<pos:position pos:line="49" pos:column="29"/></name><operator pos:line="49" pos:column="29">)<pos:position pos:line="49" pos:column="30"/></operator><name pos:line="49" pos:column="30">b<pos:position pos:line="49" pos:column="31"/></name> <operator pos:line="49" pos:column="32">&amp;<pos:position pos:line="49" pos:column="37"/></operator> <name><name pos:line="49" pos:column="34">inflate_mask<pos:position pos:line="49" pos:column="46"/></name><index pos:line="49" pos:column="46">[<expr><name pos:line="49" pos:column="47">e<pos:position pos:line="49" pos:column="48"/></name></expr>]<pos:position pos:line="49" pos:column="49"/></index></name><operator pos:line="49" pos:column="49">)<pos:position pos:line="49" pos:column="50"/></operator></expr>;<pos:position pos:line="49" pos:column="51"/></expr_stmt>
        <macro><name pos:line="50" pos:column="9">DUMPBITS<pos:position pos:line="50" pos:column="17"/></name><argument_list pos:line="50" pos:column="17">(<argument pos:line="50" pos:column="18">e<pos:position pos:line="50" pos:column="19"/></argument>)<pos:position pos:line="50" pos:column="20"/></argument_list></macro>
        <expr_stmt><expr><call><name pos:line="51" pos:column="9">Tracevv<pos:position pos:line="51" pos:column="16"/></name><argument_list pos:line="51" pos:column="16">(<argument><expr><operator pos:line="51" pos:column="17">(<pos:position pos:line="51" pos:column="18"/></operator><name pos:line="51" pos:column="18">stderr<pos:position pos:line="51" pos:column="24"/></name><operator pos:line="51" pos:column="24">,<pos:position pos:line="51" pos:column="25"/></operator> <literal type="string" pos:line="51" pos:column="26">"inflate:         * length %u\n"<pos:position pos:line="51" pos:column="58"/></literal><operator pos:line="51" pos:column="58">,<pos:position pos:line="51" pos:column="59"/></operator> <name pos:line="51" pos:column="60">c<pos:position pos:line="51" pos:column="61"/></name><operator pos:line="51" pos:column="61">)<pos:position pos:line="51" pos:column="62"/></operator></expr></argument>)<pos:position pos:line="51" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="64"/></expr_stmt>

        <comment type="block" pos:line="53" pos:column="9">/* decode distance base of block to copy */</comment>
        <expr_stmt><expr><call><name pos:line="54" pos:column="9">GRABBITS<pos:position pos:line="54" pos:column="17"/></name><argument_list pos:line="54" pos:column="17">(<argument><expr><literal type="number" pos:line="54" pos:column="18">15<pos:position pos:line="54" pos:column="20"/></literal></expr></argument>)<pos:position pos:line="54" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="22"/></expr_stmt>           <comment type="block" pos:line="54" pos:column="33">/* max bits for distance code */</comment>
        <expr_stmt><expr><name pos:line="55" pos:column="9">e<pos:position pos:line="55" pos:column="10"/></name> <operator pos:line="55" pos:column="11">=<pos:position pos:line="55" pos:column="12"/></operator> <operator pos:line="55" pos:column="13">(<pos:position pos:line="55" pos:column="14"/></operator><name pos:line="55" pos:column="14">t<pos:position pos:line="55" pos:column="15"/></name> <operator pos:line="55" pos:column="16">=<pos:position pos:line="55" pos:column="17"/></operator> <name pos:line="55" pos:column="18">td<pos:position pos:line="55" pos:column="20"/></name> <operator pos:line="55" pos:column="21">+<pos:position pos:line="55" pos:column="22"/></operator> <operator pos:line="55" pos:column="23">(<pos:position pos:line="55" pos:column="24"/></operator><operator pos:line="55" pos:column="24">(<pos:position pos:line="55" pos:column="25"/></operator><name pos:line="55" pos:column="25">uInt<pos:position pos:line="55" pos:column="29"/></name><operator pos:line="55" pos:column="29">)<pos:position pos:line="55" pos:column="30"/></operator><name pos:line="55" pos:column="30">b<pos:position pos:line="55" pos:column="31"/></name> <operator pos:line="55" pos:column="32">&amp;<pos:position pos:line="55" pos:column="37"/></operator> <name pos:line="55" pos:column="34">md<pos:position pos:line="55" pos:column="36"/></name><operator pos:line="55" pos:column="36">)<pos:position pos:line="55" pos:column="37"/></operator><operator pos:line="55" pos:column="37">)<pos:position pos:line="55" pos:column="38"/></operator><operator pos:line="55" pos:column="38">-&gt;<pos:position pos:line="55" pos:column="43"/></operator><name pos:line="55" pos:column="40">exop<pos:position pos:line="55" pos:column="44"/></name></expr>;<pos:position pos:line="55" pos:column="45"/></expr_stmt>
        <do pos:line="56" pos:column="9">do <block pos:line="56" pos:column="12">{
          <macro><name pos:line="57" pos:column="11">DUMPBITS<pos:position pos:line="57" pos:column="19"/></name><argument_list pos:line="57" pos:column="19">(<argument pos:line="57" pos:column="20">t-&gt;bits<pos:position pos:line="57" pos:column="27"/></argument>)<pos:position pos:line="57" pos:column="28"/></argument_list></macro>
          <if pos:line="58" pos:column="11">if <condition pos:line="58" pos:column="14">(<expr><name pos:line="58" pos:column="15">e<pos:position pos:line="58" pos:column="16"/></name> <operator pos:line="58" pos:column="17">&amp;<pos:position pos:line="58" pos:column="22"/></operator> <literal type="number" pos:line="58" pos:column="19">16<pos:position pos:line="58" pos:column="21"/></literal></expr>)<pos:position pos:line="58" pos:column="22"/></condition><then pos:line="58" pos:column="22">
          <block pos:line="59" pos:column="11">{
            <comment type="block" pos:line="60" pos:column="13">/* get extra bits to add to distance base */</comment>
            <expr_stmt><expr><name pos:line="61" pos:column="13">e<pos:position pos:line="61" pos:column="14"/></name> <operator pos:line="61" pos:column="15">&amp;=<pos:position pos:line="61" pos:column="21"/></operator> <literal type="number" pos:line="61" pos:column="18">15<pos:position pos:line="61" pos:column="20"/></literal></expr>;<pos:position pos:line="61" pos:column="21"/></expr_stmt>
            <macro><name pos:line="62" pos:column="13">GRABBITS<pos:position pos:line="62" pos:column="21"/></name><argument_list pos:line="62" pos:column="21">(<argument pos:line="62" pos:column="22">e<pos:position pos:line="62" pos:column="23"/></argument>)<pos:position pos:line="62" pos:column="24"/></argument_list></macro>         <comment type="block" pos:line="62" pos:column="33">/* get extra bits (up to 13) */</comment>
            <expr_stmt><expr><name pos:line="63" pos:column="13">d<pos:position pos:line="63" pos:column="14"/></name> <operator pos:line="63" pos:column="15">=<pos:position pos:line="63" pos:column="16"/></operator> <name><name pos:line="63" pos:column="17">t<pos:position pos:line="63" pos:column="18"/></name><operator pos:line="63" pos:column="18">-&gt;<pos:position pos:line="63" pos:column="23"/></operator><name pos:line="63" pos:column="20">base<pos:position pos:line="63" pos:column="24"/></name></name> <operator pos:line="63" pos:column="25">+<pos:position pos:line="63" pos:column="26"/></operator> <operator pos:line="63" pos:column="27">(<pos:position pos:line="63" pos:column="28"/></operator><operator pos:line="63" pos:column="28">(<pos:position pos:line="63" pos:column="29"/></operator><name pos:line="63" pos:column="29">uInt<pos:position pos:line="63" pos:column="33"/></name><operator pos:line="63" pos:column="33">)<pos:position pos:line="63" pos:column="34"/></operator><name pos:line="63" pos:column="34">b<pos:position pos:line="63" pos:column="35"/></name> <operator pos:line="63" pos:column="36">&amp;<pos:position pos:line="63" pos:column="41"/></operator> <name><name pos:line="63" pos:column="38">inflate_mask<pos:position pos:line="63" pos:column="50"/></name><index pos:line="63" pos:column="50">[<expr><name pos:line="63" pos:column="51">e<pos:position pos:line="63" pos:column="52"/></name></expr>]<pos:position pos:line="63" pos:column="53"/></index></name><operator pos:line="63" pos:column="53">)<pos:position pos:line="63" pos:column="54"/></operator></expr>;<pos:position pos:line="63" pos:column="55"/></expr_stmt>
            <macro><name pos:line="64" pos:column="13">DUMPBITS<pos:position pos:line="64" pos:column="21"/></name><argument_list pos:line="64" pos:column="21">(<argument pos:line="64" pos:column="22">e<pos:position pos:line="64" pos:column="23"/></argument>)<pos:position pos:line="64" pos:column="24"/></argument_list></macro>
            <expr_stmt><expr><call><name pos:line="65" pos:column="13">Tracevv<pos:position pos:line="65" pos:column="20"/></name><argument_list pos:line="65" pos:column="20">(<argument><expr><operator pos:line="65" pos:column="21">(<pos:position pos:line="65" pos:column="22"/></operator><name pos:line="65" pos:column="22">stderr<pos:position pos:line="65" pos:column="28"/></name><operator pos:line="65" pos:column="28">,<pos:position pos:line="65" pos:column="29"/></operator> <literal type="string" pos:line="65" pos:column="30">"inflate:         * distance %u\n"<pos:position pos:line="65" pos:column="64"/></literal><operator pos:line="65" pos:column="64">,<pos:position pos:line="65" pos:column="65"/></operator> <name pos:line="65" pos:column="66">d<pos:position pos:line="65" pos:column="67"/></name><operator pos:line="65" pos:column="67">)<pos:position pos:line="65" pos:column="68"/></operator></expr></argument>)<pos:position pos:line="65" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="70"/></expr_stmt>

            <comment type="block" pos:line="67" pos:column="13">/* do the copy */</comment>
            <expr_stmt><expr><name pos:line="68" pos:column="13">m<pos:position pos:line="68" pos:column="14"/></name> <operator pos:line="68" pos:column="15">-=<pos:position pos:line="68" pos:column="17"/></operator> <name pos:line="68" pos:column="18">c<pos:position pos:line="68" pos:column="19"/></name></expr>;<pos:position pos:line="68" pos:column="20"/></expr_stmt>
            <if pos:line="69" pos:column="13">if <condition pos:line="69" pos:column="16">(<expr><call pos:line="69" pos:column="17">(<name pos:line="69" pos:column="18">uInt<pos:position pos:line="69" pos:column="22"/></name>)<argument_list pos:line="69" pos:column="23">(<argument><expr><name pos:line="69" pos:column="24">q<pos:position pos:line="69" pos:column="25"/></name> <operator pos:line="69" pos:column="26">-<pos:position pos:line="69" pos:column="27"/></operator> <name><name pos:line="69" pos:column="28">s<pos:position pos:line="69" pos:column="29"/></name><operator pos:line="69" pos:column="29">-&gt;<pos:position pos:line="69" pos:column="34"/></operator><name pos:line="69" pos:column="31">window<pos:position pos:line="69" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="69" pos:column="38"/></argument_list></call> <operator pos:line="69" pos:column="39">&gt;=<pos:position pos:line="69" pos:column="44"/></operator> <name pos:line="69" pos:column="42">d<pos:position pos:line="69" pos:column="43"/></name></expr>)<pos:position pos:line="69" pos:column="44"/></condition><then pos:line="69" pos:column="44">     <comment type="block" pos:line="69" pos:column="49">/* offset before dest */</comment>
            <block pos:line="70" pos:column="13">{                                   <comment type="block" pos:line="70" pos:column="49">/*  just copy */</comment>
              <expr_stmt><expr><name pos:line="71" pos:column="15">r<pos:position pos:line="71" pos:column="16"/></name> <operator pos:line="71" pos:column="17">=<pos:position pos:line="71" pos:column="18"/></operator> <name pos:line="71" pos:column="19">q<pos:position pos:line="71" pos:column="20"/></name> <operator pos:line="71" pos:column="21">-<pos:position pos:line="71" pos:column="22"/></operator> <name pos:line="71" pos:column="23">d<pos:position pos:line="71" pos:column="24"/></name></expr>;<pos:position pos:line="71" pos:column="25"/></expr_stmt>
              <expr_stmt><expr><operator pos:line="72" pos:column="15">*<pos:position pos:line="72" pos:column="16"/></operator><name pos:line="72" pos:column="16">q<pos:position pos:line="72" pos:column="17"/></name><operator pos:line="72" pos:column="17">++<pos:position pos:line="72" pos:column="19"/></operator> <operator pos:line="72" pos:column="20">=<pos:position pos:line="72" pos:column="21"/></operator> <operator pos:line="72" pos:column="22">*<pos:position pos:line="72" pos:column="23"/></operator><name pos:line="72" pos:column="23">r<pos:position pos:line="72" pos:column="24"/></name><operator pos:line="72" pos:column="24">++<pos:position pos:line="72" pos:column="26"/></operator></expr>;<pos:position pos:line="72" pos:column="27"/></expr_stmt>  <expr_stmt><expr><name pos:line="72" pos:column="29">c<pos:position pos:line="72" pos:column="30"/></name><operator pos:line="72" pos:column="30">--<pos:position pos:line="72" pos:column="32"/></operator></expr>;<pos:position pos:line="72" pos:column="33"/></expr_stmt>        <comment type="block" pos:line="72" pos:column="41">/* minimum count is three, */</comment>
              <expr_stmt><expr><operator pos:line="73" pos:column="15">*<pos:position pos:line="73" pos:column="16"/></operator><name pos:line="73" pos:column="16">q<pos:position pos:line="73" pos:column="17"/></name><operator pos:line="73" pos:column="17">++<pos:position pos:line="73" pos:column="19"/></operator> <operator pos:line="73" pos:column="20">=<pos:position pos:line="73" pos:column="21"/></operator> <operator pos:line="73" pos:column="22">*<pos:position pos:line="73" pos:column="23"/></operator><name pos:line="73" pos:column="23">r<pos:position pos:line="73" pos:column="24"/></name><operator pos:line="73" pos:column="24">++<pos:position pos:line="73" pos:column="26"/></operator></expr>;<pos:position pos:line="73" pos:column="27"/></expr_stmt>  <expr_stmt><expr><name pos:line="73" pos:column="29">c<pos:position pos:line="73" pos:column="30"/></name><operator pos:line="73" pos:column="30">--<pos:position pos:line="73" pos:column="32"/></operator></expr>;<pos:position pos:line="73" pos:column="33"/></expr_stmt>        <comment type="block" pos:line="73" pos:column="41">/*  so unroll loop a little */</comment>
            }<pos:position pos:line="74" pos:column="14"/></block></then>
            <else pos:line="75" pos:column="13">else                        <comment type="block" pos:line="75" pos:column="41">/* else offset after destination */</comment>
            <block pos:line="76" pos:column="13">{
              <expr_stmt><expr><name pos:line="77" pos:column="15">e<pos:position pos:line="77" pos:column="16"/></name> <operator pos:line="77" pos:column="17">=<pos:position pos:line="77" pos:column="18"/></operator> <name pos:line="77" pos:column="19">d<pos:position pos:line="77" pos:column="20"/></name> <operator pos:line="77" pos:column="21">-<pos:position pos:line="77" pos:column="22"/></operator> <call pos:line="77" pos:column="23">(<name pos:line="77" pos:column="24">uInt<pos:position pos:line="77" pos:column="28"/></name>)<argument_list pos:line="77" pos:column="29">(<argument><expr><name pos:line="77" pos:column="30">q<pos:position pos:line="77" pos:column="31"/></name> <operator pos:line="77" pos:column="32">-<pos:position pos:line="77" pos:column="33"/></operator> <name><name pos:line="77" pos:column="34">s<pos:position pos:line="77" pos:column="35"/></name><operator pos:line="77" pos:column="35">-&gt;<pos:position pos:line="77" pos:column="40"/></operator><name pos:line="77" pos:column="37">window<pos:position pos:line="77" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="77" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="45"/></expr_stmt> <comment type="block" pos:line="77" pos:column="46">/* bytes from offset to end */</comment>
              <expr_stmt><expr><name pos:line="78" pos:column="15">r<pos:position pos:line="78" pos:column="16"/></name> <operator pos:line="78" pos:column="17">=<pos:position pos:line="78" pos:column="18"/></operator> <name><name pos:line="78" pos:column="19">s<pos:position pos:line="78" pos:column="20"/></name><operator pos:line="78" pos:column="20">-&gt;<pos:position pos:line="78" pos:column="25"/></operator><name pos:line="78" pos:column="22">end<pos:position pos:line="78" pos:column="25"/></name></name> <operator pos:line="78" pos:column="26">-<pos:position pos:line="78" pos:column="27"/></operator> <name pos:line="78" pos:column="28">e<pos:position pos:line="78" pos:column="29"/></name></expr>;<pos:position pos:line="78" pos:column="30"/></expr_stmt>           <comment type="block" pos:line="78" pos:column="41">/* pointer to offset */</comment>
              <if pos:line="79" pos:column="15">if <condition pos:line="79" pos:column="18">(<expr><name pos:line="79" pos:column="19">c<pos:position pos:line="79" pos:column="20"/></name> <operator pos:line="79" pos:column="21">&gt;<pos:position pos:line="79" pos:column="25"/></operator> <name pos:line="79" pos:column="23">e<pos:position pos:line="79" pos:column="24"/></name></expr>)<pos:position pos:line="79" pos:column="25"/></condition><then pos:line="79" pos:column="25">                <comment type="block" pos:line="79" pos:column="41">/* if source crosses, */</comment>
              <block pos:line="80" pos:column="15">{
                <expr_stmt><expr><name pos:line="81" pos:column="17">c<pos:position pos:line="81" pos:column="18"/></name> <operator pos:line="81" pos:column="19">-=<pos:position pos:line="81" pos:column="21"/></operator> <name pos:line="81" pos:column="22">e<pos:position pos:line="81" pos:column="23"/></name></expr>;<pos:position pos:line="81" pos:column="24"/></expr_stmt>                 <comment type="block" pos:line="81" pos:column="41">/* copy to end of window */</comment>
                <do pos:line="82" pos:column="17">do <block pos:line="82" pos:column="20">{
                  <expr_stmt><expr><operator pos:line="83" pos:column="19">*<pos:position pos:line="83" pos:column="20"/></operator><name pos:line="83" pos:column="20">q<pos:position pos:line="83" pos:column="21"/></name><operator pos:line="83" pos:column="21">++<pos:position pos:line="83" pos:column="23"/></operator> <operator pos:line="83" pos:column="24">=<pos:position pos:line="83" pos:column="25"/></operator> <operator pos:line="83" pos:column="26">*<pos:position pos:line="83" pos:column="27"/></operator><name pos:line="83" pos:column="27">r<pos:position pos:line="83" pos:column="28"/></name><operator pos:line="83" pos:column="28">++<pos:position pos:line="83" pos:column="30"/></operator></expr>;<pos:position pos:line="83" pos:column="31"/></expr_stmt>
                }<pos:position pos:line="84" pos:column="18"/></block> while <condition pos:line="84" pos:column="25">(<expr><operator pos:line="84" pos:column="26">--<pos:position pos:line="84" pos:column="28"/></operator><name pos:line="84" pos:column="28">e<pos:position pos:line="84" pos:column="29"/></name></expr>)<pos:position pos:line="84" pos:column="30"/></condition>;<pos:position pos:line="84" pos:column="31"/></do>
                <expr_stmt><expr><name pos:line="85" pos:column="17">r<pos:position pos:line="85" pos:column="18"/></name> <operator pos:line="85" pos:column="19">=<pos:position pos:line="85" pos:column="20"/></operator> <name><name pos:line="85" pos:column="21">s<pos:position pos:line="85" pos:column="22"/></name><operator pos:line="85" pos:column="22">-&gt;<pos:position pos:line="85" pos:column="27"/></operator><name pos:line="85" pos:column="24">window<pos:position pos:line="85" pos:column="30"/></name></name></expr>;<pos:position pos:line="85" pos:column="31"/></expr_stmt>          <comment type="block" pos:line="85" pos:column="41">/* copy rest from start of window */</comment>
              }<pos:position pos:line="86" pos:column="16"/></block></then></if>
            }<pos:position pos:line="87" pos:column="14"/></block></else></if>
            <do pos:line="88" pos:column="13">do <block pos:line="88" pos:column="16">{                        <comment type="block" pos:line="88" pos:column="41">/* copy all or what's left */</comment>
              <expr_stmt><expr><operator pos:line="89" pos:column="15">*<pos:position pos:line="89" pos:column="16"/></operator><name pos:line="89" pos:column="16">q<pos:position pos:line="89" pos:column="17"/></name><operator pos:line="89" pos:column="17">++<pos:position pos:line="89" pos:column="19"/></operator> <operator pos:line="89" pos:column="20">=<pos:position pos:line="89" pos:column="21"/></operator> <operator pos:line="89" pos:column="22">*<pos:position pos:line="89" pos:column="23"/></operator><name pos:line="89" pos:column="23">r<pos:position pos:line="89" pos:column="24"/></name><operator pos:line="89" pos:column="24">++<pos:position pos:line="89" pos:column="26"/></operator></expr>;<pos:position pos:line="89" pos:column="27"/></expr_stmt>
            }<pos:position pos:line="90" pos:column="14"/></block> while <condition pos:line="90" pos:column="21">(<expr><operator pos:line="90" pos:column="22">--<pos:position pos:line="90" pos:column="24"/></operator><name pos:line="90" pos:column="24">c<pos:position pos:line="90" pos:column="25"/></name></expr>)<pos:position pos:line="90" pos:column="26"/></condition>;<pos:position pos:line="90" pos:column="27"/></do>
            <break pos:line="91" pos:column="13">break;<pos:position pos:line="91" pos:column="19"/></break>
          }<pos:position pos:line="92" pos:column="12"/></block></then>
          <elseif pos:line="93" pos:column="11">else <if pos:line="93" pos:column="16">if <condition pos:line="93" pos:column="19">(<expr><operator pos:line="93" pos:column="20">(<pos:position pos:line="93" pos:column="21"/></operator><name pos:line="93" pos:column="21">e<pos:position pos:line="93" pos:column="22"/></name> <operator pos:line="93" pos:column="23">&amp;<pos:position pos:line="93" pos:column="28"/></operator> <literal type="number" pos:line="93" pos:column="25">64<pos:position pos:line="93" pos:column="27"/></literal><operator pos:line="93" pos:column="27">)<pos:position pos:line="93" pos:column="28"/></operator> <operator pos:line="93" pos:column="29">==<pos:position pos:line="93" pos:column="31"/></operator> <literal type="number" pos:line="93" pos:column="32">0<pos:position pos:line="93" pos:column="33"/></literal></expr>)<pos:position pos:line="93" pos:column="34"/></condition><then pos:line="93" pos:column="34">
          <block pos:line="94" pos:column="11">{
            <expr_stmt><expr><name pos:line="95" pos:column="13">t<pos:position pos:line="95" pos:column="14"/></name> <operator pos:line="95" pos:column="15">+=<pos:position pos:line="95" pos:column="17"/></operator> <name><name pos:line="95" pos:column="18">t<pos:position pos:line="95" pos:column="19"/></name><operator pos:line="95" pos:column="19">-&gt;<pos:position pos:line="95" pos:column="24"/></operator><name pos:line="95" pos:column="21">base<pos:position pos:line="95" pos:column="25"/></name></name></expr>;<pos:position pos:line="95" pos:column="26"/></expr_stmt>
            <expr_stmt><expr><name pos:line="96" pos:column="13">e<pos:position pos:line="96" pos:column="14"/></name> <operator pos:line="96" pos:column="15">=<pos:position pos:line="96" pos:column="16"/></operator> <operator pos:line="96" pos:column="17">(<pos:position pos:line="96" pos:column="18"/></operator><name pos:line="96" pos:column="18">t<pos:position pos:line="96" pos:column="19"/></name> <operator pos:line="96" pos:column="20">+=<pos:position pos:line="96" pos:column="22"/></operator> <operator pos:line="96" pos:column="23">(<pos:position pos:line="96" pos:column="24"/></operator><operator pos:line="96" pos:column="24">(<pos:position pos:line="96" pos:column="25"/></operator><name pos:line="96" pos:column="25">uInt<pos:position pos:line="96" pos:column="29"/></name><operator pos:line="96" pos:column="29">)<pos:position pos:line="96" pos:column="30"/></operator><name pos:line="96" pos:column="30">b<pos:position pos:line="96" pos:column="31"/></name> <operator pos:line="96" pos:column="32">&amp;<pos:position pos:line="96" pos:column="37"/></operator> <name><name pos:line="96" pos:column="34">inflate_mask<pos:position pos:line="96" pos:column="46"/></name><index pos:line="96" pos:column="46">[<expr><name pos:line="96" pos:column="47">e<pos:position pos:line="96" pos:column="48"/></name></expr>]<pos:position pos:line="96" pos:column="49"/></index></name><operator pos:line="96" pos:column="49">)<pos:position pos:line="96" pos:column="50"/></operator><operator pos:line="96" pos:column="50">)<pos:position pos:line="96" pos:column="51"/></operator><operator pos:line="96" pos:column="51">-&gt;<pos:position pos:line="96" pos:column="56"/></operator><name pos:line="96" pos:column="53">exop<pos:position pos:line="96" pos:column="57"/></name></expr>;<pos:position pos:line="96" pos:column="58"/></expr_stmt>
          }<pos:position pos:line="97" pos:column="12"/></block></then></if></elseif>
          <else pos:line="98" pos:column="11">else
          <block pos:line="99" pos:column="11">{
            <expr_stmt><expr><name><name pos:line="100" pos:column="13">z<pos:position pos:line="100" pos:column="14"/></name><operator pos:line="100" pos:column="14">-&gt;<pos:position pos:line="100" pos:column="19"/></operator><name pos:line="100" pos:column="16">msg<pos:position pos:line="100" pos:column="19"/></name></name> <operator pos:line="100" pos:column="20">=<pos:position pos:line="100" pos:column="21"/></operator> <operator pos:line="100" pos:column="22">(<pos:position pos:line="100" pos:column="23"/></operator><name pos:line="100" pos:column="23">char<pos:position pos:line="100" pos:column="27"/></name><operator pos:line="100" pos:column="27">*<pos:position pos:line="100" pos:column="28"/></operator><operator pos:line="100" pos:column="28">)<pos:position pos:line="100" pos:column="29"/></operator><literal type="string" pos:line="100" pos:column="29">"invalid distance code"<pos:position pos:line="100" pos:column="52"/></literal></expr>;<pos:position pos:line="100" pos:column="53"/></expr_stmt>
            <decl_stmt><decl><type><name pos:line="101" pos:column="13">UNGRAB<pos:position pos:line="101" pos:column="19"/></name></type>
            <name pos:line="102" pos:column="13">UPDATE<pos:position pos:line="102" pos:column="19"/></name>
            return <name pos:line="103" pos:column="20">Z_DATA_ERROR<pos:position pos:line="103" pos:column="32"/></name></decl>;<pos:position pos:line="103" pos:column="33"/></decl_stmt>
          }<pos:position pos:line="104" pos:column="12"/></block></else></if>
        }<pos:position pos:line="105" pos:column="10"/></block> while <condition pos:line="105" pos:column="17">(<expr><literal type="number" pos:line="105" pos:column="18">1<pos:position pos:line="105" pos:column="19"/></literal></expr>)<pos:position pos:line="105" pos:column="20"/></condition>;<pos:position pos:line="105" pos:column="21"/></do>
        <break pos:line="106" pos:column="9">break;<pos:position pos:line="106" pos:column="15"/></break>
      }<pos:position pos:line="107" pos:column="8"/></block></then></if>
      <if pos:line="108" pos:column="7">if <condition pos:line="108" pos:column="10">(<expr><operator pos:line="108" pos:column="11">(<pos:position pos:line="108" pos:column="12"/></operator><name pos:line="108" pos:column="12">e<pos:position pos:line="108" pos:column="13"/></name> <operator pos:line="108" pos:column="14">&amp;<pos:position pos:line="108" pos:column="19"/></operator> <literal type="number" pos:line="108" pos:column="16">64<pos:position pos:line="108" pos:column="18"/></literal><operator pos:line="108" pos:column="18">)<pos:position pos:line="108" pos:column="19"/></operator> <operator pos:line="108" pos:column="20">==<pos:position pos:line="108" pos:column="22"/></operator> <literal type="number" pos:line="108" pos:column="23">0<pos:position pos:line="108" pos:column="24"/></literal></expr>)<pos:position pos:line="108" pos:column="25"/></condition><then pos:line="108" pos:column="25">
      <block pos:line="109" pos:column="7">{
        <expr_stmt><expr><name pos:line="110" pos:column="9">t<pos:position pos:line="110" pos:column="10"/></name> <operator pos:line="110" pos:column="11">+=<pos:position pos:line="110" pos:column="13"/></operator> <name><name pos:line="110" pos:column="14">t<pos:position pos:line="110" pos:column="15"/></name><operator pos:line="110" pos:column="15">-&gt;<pos:position pos:line="110" pos:column="20"/></operator><name pos:line="110" pos:column="17">base<pos:position pos:line="110" pos:column="21"/></name></name></expr>;<pos:position pos:line="110" pos:column="22"/></expr_stmt>
        <if pos:line="111" pos:column="9">if <condition pos:line="111" pos:column="12">(<expr><operator pos:line="111" pos:column="13">(<pos:position pos:line="111" pos:column="14"/></operator><name pos:line="111" pos:column="14">e<pos:position pos:line="111" pos:column="15"/></name> <operator pos:line="111" pos:column="16">=<pos:position pos:line="111" pos:column="17"/></operator> <operator pos:line="111" pos:column="18">(<pos:position pos:line="111" pos:column="19"/></operator><name pos:line="111" pos:column="19">t<pos:position pos:line="111" pos:column="20"/></name> <operator pos:line="111" pos:column="21">+=<pos:position pos:line="111" pos:column="23"/></operator> <operator pos:line="111" pos:column="24">(<pos:position pos:line="111" pos:column="25"/></operator><operator pos:line="111" pos:column="25">(<pos:position pos:line="111" pos:column="26"/></operator><name pos:line="111" pos:column="26">uInt<pos:position pos:line="111" pos:column="30"/></name><operator pos:line="111" pos:column="30">)<pos:position pos:line="111" pos:column="31"/></operator><name pos:line="111" pos:column="31">b<pos:position pos:line="111" pos:column="32"/></name> <operator pos:line="111" pos:column="33">&amp;<pos:position pos:line="111" pos:column="38"/></operator> <name><name pos:line="111" pos:column="35">inflate_mask<pos:position pos:line="111" pos:column="47"/></name><index pos:line="111" pos:column="47">[<expr><name pos:line="111" pos:column="48">e<pos:position pos:line="111" pos:column="49"/></name></expr>]<pos:position pos:line="111" pos:column="50"/></index></name><operator pos:line="111" pos:column="50">)<pos:position pos:line="111" pos:column="51"/></operator><operator pos:line="111" pos:column="51">)<pos:position pos:line="111" pos:column="52"/></operator><operator pos:line="111" pos:column="52">-&gt;<pos:position pos:line="111" pos:column="57"/></operator><name pos:line="111" pos:column="54">exop<pos:position pos:line="111" pos:column="58"/></name><operator pos:line="111" pos:column="58">)<pos:position pos:line="111" pos:column="59"/></operator> <operator pos:line="111" pos:column="60">==<pos:position pos:line="111" pos:column="62"/></operator> <literal type="number" pos:line="111" pos:column="63">0<pos:position pos:line="111" pos:column="64"/></literal></expr>)<pos:position pos:line="111" pos:column="65"/></condition><then pos:line="111" pos:column="65">
        <block pos:line="112" pos:column="9">{
          <macro><name pos:line="113" pos:column="11">DUMPBITS<pos:position pos:line="113" pos:column="19"/></name><argument_list pos:line="113" pos:column="19">(<argument pos:line="113" pos:column="20">t-&gt;bits<pos:position pos:line="113" pos:column="27"/></argument>)<pos:position pos:line="113" pos:column="28"/></argument_list></macro>
          <expr_stmt><expr><call><name pos:line="114" pos:column="11">Tracevv<pos:position pos:line="114" pos:column="18"/></name><argument_list pos:line="114" pos:column="18">(<argument><expr><operator pos:line="114" pos:column="19">(<pos:position pos:line="114" pos:column="20"/></operator><name pos:line="114" pos:column="20">stderr<pos:position pos:line="114" pos:column="26"/></name><operator pos:line="114" pos:column="26">,<pos:position pos:line="114" pos:column="27"/></operator> <ternary><condition><expr><name><name pos:line="114" pos:column="28">t<pos:position pos:line="114" pos:column="29"/></name><operator pos:line="114" pos:column="29">-&gt;<pos:position pos:line="114" pos:column="34"/></operator><name pos:line="114" pos:column="31">base<pos:position pos:line="114" pos:column="35"/></name></name> <operator pos:line="114" pos:column="36">&gt;=<pos:position pos:line="114" pos:column="41"/></operator> <literal type="number" pos:line="114" pos:column="39">0x20<pos:position pos:line="114" pos:column="43"/></literal> <operator pos:line="114" pos:column="44">&amp;&amp;<pos:position pos:line="114" pos:column="54"/></operator> <name><name pos:line="114" pos:column="47">t<pos:position pos:line="114" pos:column="48"/></name><operator pos:line="114" pos:column="48">-&gt;<pos:position pos:line="114" pos:column="53"/></operator><name pos:line="114" pos:column="50">base<pos:position pos:line="114" pos:column="54"/></name></name> <operator pos:line="114" pos:column="55">&lt;<pos:position pos:line="114" pos:column="59"/></operator> <literal type="number" pos:line="114" pos:column="57">0x7f<pos:position pos:line="114" pos:column="61"/></literal></expr> ?<pos:position pos:line="114" pos:column="63"/></condition><then pos:line="114" pos:column="63">
                    <expr><literal type="string" pos:line="115" pos:column="21">"inflate:         * literal '%c'\n"<pos:position pos:line="115" pos:column="56"/></literal></expr> <pos:position pos:line="115" pos:column="57"/></then><else pos:line="115" pos:column="57">:
                    <expr><literal type="string" pos:line="116" pos:column="21">"inflate:         * literal 0x%02x\n"<pos:position pos:line="116" pos:column="58"/></literal></expr></else></ternary><operator pos:line="116" pos:column="58">,<pos:position pos:line="116" pos:column="59"/></operator> <name><name pos:line="116" pos:column="60">t<pos:position pos:line="116" pos:column="61"/></name><operator pos:line="116" pos:column="61">-&gt;<pos:position pos:line="116" pos:column="66"/></operator><name pos:line="116" pos:column="63">base<pos:position pos:line="116" pos:column="67"/></name></name><operator pos:line="116" pos:column="67">)<pos:position pos:line="116" pos:column="68"/></operator></expr></argument>)<pos:position pos:line="116" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="116" pos:column="70"/></expr_stmt>
          <expr_stmt><expr><operator pos:line="117" pos:column="11">*<pos:position pos:line="117" pos:column="12"/></operator><name pos:line="117" pos:column="12">q<pos:position pos:line="117" pos:column="13"/></name><operator pos:line="117" pos:column="13">++<pos:position pos:line="117" pos:column="15"/></operator> <operator pos:line="117" pos:column="16">=<pos:position pos:line="117" pos:column="17"/></operator> <operator pos:line="117" pos:column="18">(<pos:position pos:line="117" pos:column="19"/></operator><name pos:line="117" pos:column="19">Byte<pos:position pos:line="117" pos:column="23"/></name><operator pos:line="117" pos:column="23">)<pos:position pos:line="117" pos:column="24"/></operator><name><name pos:line="117" pos:column="24">t<pos:position pos:line="117" pos:column="25"/></name><operator pos:line="117" pos:column="25">-&gt;<pos:position pos:line="117" pos:column="30"/></operator><name pos:line="117" pos:column="27">base<pos:position pos:line="117" pos:column="31"/></name></name></expr>;<pos:position pos:line="117" pos:column="32"/></expr_stmt>
          <expr_stmt><expr><name pos:line="118" pos:column="11">m<pos:position pos:line="118" pos:column="12"/></name><operator pos:line="118" pos:column="12">--<pos:position pos:line="118" pos:column="14"/></operator></expr>;<pos:position pos:line="118" pos:column="15"/></expr_stmt>
          <break pos:line="119" pos:column="11">break;<pos:position pos:line="119" pos:column="17"/></break>
        }<pos:position pos:line="120" pos:column="10"/></block></then></if>
      }<pos:position pos:line="121" pos:column="8"/></block></then>
      <elseif pos:line="122" pos:column="7">else <if pos:line="122" pos:column="12">if <condition pos:line="122" pos:column="15">(<expr><name pos:line="122" pos:column="16">e<pos:position pos:line="122" pos:column="17"/></name> <operator pos:line="122" pos:column="18">&amp;<pos:position pos:line="122" pos:column="23"/></operator> <literal type="number" pos:line="122" pos:column="20">32<pos:position pos:line="122" pos:column="22"/></literal></expr>)<pos:position pos:line="122" pos:column="23"/></condition><then pos:line="122" pos:column="23">
      <block pos:line="123" pos:column="7">{
        <expr_stmt><expr><call><name pos:line="124" pos:column="9">Tracevv<pos:position pos:line="124" pos:column="16"/></name><argument_list pos:line="124" pos:column="16">(<argument><expr><operator pos:line="124" pos:column="17">(<pos:position pos:line="124" pos:column="18"/></operator><name pos:line="124" pos:column="18">stderr<pos:position pos:line="124" pos:column="24"/></name><operator pos:line="124" pos:column="24">,<pos:position pos:line="124" pos:column="25"/></operator> <literal type="string" pos:line="124" pos:column="26">"inflate:         * end of block\n"<pos:position pos:line="124" pos:column="61"/></literal><operator pos:line="124" pos:column="61">)<pos:position pos:line="124" pos:column="62"/></operator></expr></argument>)<pos:position pos:line="124" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="124" pos:column="64"/></expr_stmt>
        <decl_stmt><decl><type><name pos:line="125" pos:column="9">UNGRAB<pos:position pos:line="125" pos:column="15"/></name></type>
        <name pos:line="126" pos:column="9">UPDATE<pos:position pos:line="126" pos:column="15"/></name>
        return <name pos:line="127" pos:column="16">Z_STREAM_END<pos:position pos:line="127" pos:column="28"/></name></decl>;<pos:position pos:line="127" pos:column="29"/></decl_stmt>
      }<pos:position pos:line="128" pos:column="8"/></block></then></if></elseif>
      <else pos:line="129" pos:column="7">else
      <block pos:line="130" pos:column="7">{
        <expr_stmt><expr><name><name pos:line="131" pos:column="9">z<pos:position pos:line="131" pos:column="10"/></name><operator pos:line="131" pos:column="10">-&gt;<pos:position pos:line="131" pos:column="15"/></operator><name pos:line="131" pos:column="12">msg<pos:position pos:line="131" pos:column="15"/></name></name> <operator pos:line="131" pos:column="16">=<pos:position pos:line="131" pos:column="17"/></operator> <operator pos:line="131" pos:column="18">(<pos:position pos:line="131" pos:column="19"/></operator><name pos:line="131" pos:column="19">char<pos:position pos:line="131" pos:column="23"/></name><operator pos:line="131" pos:column="23">*<pos:position pos:line="131" pos:column="24"/></operator><operator pos:line="131" pos:column="24">)<pos:position pos:line="131" pos:column="25"/></operator><literal type="string" pos:line="131" pos:column="25">"invalid literal/length code"<pos:position pos:line="131" pos:column="54"/></literal></expr>;<pos:position pos:line="131" pos:column="55"/></expr_stmt>
        <decl_stmt><decl><type><name pos:line="132" pos:column="9">UNGRAB<pos:position pos:line="132" pos:column="15"/></name></type>
        <name pos:line="133" pos:column="9">UPDATE<pos:position pos:line="133" pos:column="15"/></name>
        return <name pos:line="134" pos:column="16">Z_DATA_ERROR<pos:position pos:line="134" pos:column="28"/></name></decl>;<pos:position pos:line="134" pos:column="29"/></decl_stmt>
      }<pos:position pos:line="135" pos:column="8"/></block></else></if>
    }<pos:position pos:line="136" pos:column="6"/></block> while <condition pos:line="136" pos:column="13">(<expr><literal type="number" pos:line="136" pos:column="14">1<pos:position pos:line="136" pos:column="15"/></literal></expr>)<pos:position pos:line="136" pos:column="16"/></condition>;<pos:position pos:line="136" pos:column="17"/></do>
  }<pos:position pos:line="137" pos:column="4"/></block> while <condition pos:line="137" pos:column="11">(<expr><name pos:line="137" pos:column="12">m<pos:position pos:line="137" pos:column="13"/></name> <operator pos:line="137" pos:column="14">&gt;=<pos:position pos:line="137" pos:column="19"/></operator> <literal type="number" pos:line="137" pos:column="17">258<pos:position pos:line="137" pos:column="20"/></literal> <operator pos:line="137" pos:column="21">&amp;&amp;<pos:position pos:line="137" pos:column="31"/></operator> <name pos:line="137" pos:column="24">n<pos:position pos:line="137" pos:column="25"/></name> <operator pos:line="137" pos:column="26">&gt;=<pos:position pos:line="137" pos:column="31"/></operator> <literal type="number" pos:line="137" pos:column="29">10<pos:position pos:line="137" pos:column="31"/></literal></expr>)<pos:position pos:line="137" pos:column="32"/></condition>;<pos:position pos:line="137" pos:column="33"/></do>

  <comment type="block" pos:line="139" pos:column="3">/* not enough input or output--restore pointers and return */</comment>
  <decl_stmt><decl><type><name pos:line="140" pos:column="3">UNGRAB<pos:position pos:line="140" pos:column="9"/></name></type>
  <name pos:line="141" pos:column="3">UPDATE<pos:position pos:line="141" pos:column="9"/></name>
  return <name pos:line="142" pos:column="10">Z_OK<pos:position pos:line="142" pos:column="14"/></name></decl>;<pos:position pos:line="142" pos:column="15"/></decl_stmt>
}<pos:position pos:line="143" pos:column="2"/></block></unit>
