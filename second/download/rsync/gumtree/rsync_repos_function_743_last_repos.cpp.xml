<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_743_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">char<pos:position pos:line="1" pos:column="5"/></name> <modifier pos:line="1" pos:column="6">*<pos:position pos:line="1" pos:column="7"/></modifier></type><name pos:line="1" pos:column="7">do_big_dnum<pos:position pos:line="1" pos:column="18"/></name><parameter_list pos:line="1" pos:column="18">(<parameter><decl><type><name pos:line="1" pos:column="19">double<pos:position pos:line="1" pos:column="25"/></name></type> <name pos:line="1" pos:column="26">dnum<pos:position pos:line="1" pos:column="30"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="32">int<pos:position pos:line="1" pos:column="35"/></name></type> <name pos:line="1" pos:column="36">human_flag<pos:position pos:line="1" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="48">int<pos:position pos:line="1" pos:column="51"/></name></type> <name pos:line="1" pos:column="52">decimal_digits<pos:position pos:line="1" pos:column="66"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="67"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><specifier pos:line="3" pos:column="9">static<pos:position pos:line="3" pos:column="15"/></specifier> <type><name pos:line="3" pos:column="16">char<pos:position pos:line="3" pos:column="20"/></name></type> <name><name pos:line="3" pos:column="21">tmp_buf<pos:position pos:line="3" pos:column="28"/></name><index pos:line="3" pos:column="28">[<expr><literal type="number" pos:line="3" pos:column="29">128<pos:position pos:line="3" pos:column="32"/></literal></expr>]<pos:position pos:line="3" pos:column="33"/></index></name></decl>;<pos:position pos:line="3" pos:column="34"/></decl_stmt>
<cpp:if pos:line="4" pos:column="1">#<cpp:directive pos:line="4" pos:column="2">if<pos:position pos:line="4" pos:column="4"/></cpp:directive> <expr><name pos:line="4" pos:column="5">SIZEOF_INT64<pos:position pos:line="4" pos:column="17"/></name> <operator pos:line="4" pos:column="18">&gt;=<pos:position pos:line="4" pos:column="23"/></operator> <literal type="number" pos:line="4" pos:column="21">8<pos:position pos:line="4" pos:column="22"/></literal></expr></cpp:if>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">char<pos:position pos:line="5" pos:column="13"/></name> <modifier pos:line="5" pos:column="14">*<pos:position pos:line="5" pos:column="15"/></modifier></type><name pos:line="5" pos:column="15">fract<pos:position pos:line="5" pos:column="20"/></name></decl>;<pos:position pos:line="5" pos:column="21"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="7" pos:column="9">snprintf<pos:position pos:line="7" pos:column="17"/></name><argument_list pos:line="7" pos:column="17">(<argument><expr><name pos:line="7" pos:column="18">tmp_buf<pos:position pos:line="7" pos:column="25"/></name></expr></argument>, <argument><expr><sizeof pos:line="7" pos:column="27">sizeof <name pos:line="7" pos:column="34">tmp_buf<pos:position pos:line="7" pos:column="41"/></name></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="7" pos:column="43">"%.*f"<pos:position pos:line="7" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="7" pos:column="51">decimal_digits<pos:position pos:line="7" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="67">dnum<pos:position pos:line="7" pos:column="71"/></name></expr></argument>)<pos:position pos:line="7" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="73"/></expr_stmt>

	<if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><operator pos:line="9" pos:column="13">!<pos:position pos:line="9" pos:column="14"/></operator><name pos:line="9" pos:column="14">human_flag<pos:position pos:line="9" pos:column="24"/></name> <operator pos:line="9" pos:column="25">||<pos:position pos:line="9" pos:column="27"/></operator> <operator pos:line="9" pos:column="28">(<pos:position pos:line="9" pos:column="29"/></operator><name><name pos:line="9" pos:column="29">dnum<pos:position pos:line="9" pos:column="33"/></name> <argument_list type="generic" pos:line="9" pos:column="34">&lt; <argument><expr><literal type="number" pos:line="9" pos:column="36">1000.0<pos:position pos:line="9" pos:column="42"/></literal> <operator pos:line="9" pos:column="43">&amp;&amp;<pos:position pos:line="9" pos:column="53"/></operator> <name pos:line="9" pos:column="46">dnum<pos:position pos:line="9" pos:column="50"/></name></expr></argument> &gt;<pos:position pos:line="9" pos:column="55"/></argument_list></name> <operator pos:line="9" pos:column="53">-<pos:position pos:line="9" pos:column="54"/></operator><literal type="number" pos:line="9" pos:column="54">1000.0<pos:position pos:line="9" pos:column="60"/></literal><operator pos:line="9" pos:column="60">)<pos:position pos:line="9" pos:column="61"/></operator></expr>)<pos:position pos:line="9" pos:column="62"/></condition><then pos:line="9" pos:column="62">
		<block type="pseudo"><return pos:line="10" pos:column="17">return <expr><name pos:line="10" pos:column="24">tmp_buf<pos:position pos:line="10" pos:column="31"/></name></expr>;<pos:position pos:line="10" pos:column="32"/></return></block></then></if>

	<for pos:line="12" pos:column="9">for <control pos:line="12" pos:column="13">(<init><expr><name pos:line="12" pos:column="14">fract<pos:position pos:line="12" pos:column="19"/></name> <operator pos:line="12" pos:column="20">=<pos:position pos:line="12" pos:column="21"/></operator> <name pos:line="12" pos:column="22">tmp_buf<pos:position pos:line="12" pos:column="29"/></name><operator pos:line="12" pos:column="29">+<pos:position pos:line="12" pos:column="30"/></operator><literal type="number" pos:line="12" pos:column="30">1<pos:position pos:line="12" pos:column="31"/></literal></expr>;<pos:position pos:line="12" pos:column="32"/></init> <condition><expr><call><name pos:line="12" pos:column="33">isDigit<pos:position pos:line="12" pos:column="40"/></name><argument_list pos:line="12" pos:column="40">(<argument><expr><name pos:line="12" pos:column="41">fract<pos:position pos:line="12" pos:column="46"/></name></expr></argument>)<pos:position pos:line="12" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="48"/></condition> <incr><expr><name pos:line="12" pos:column="49">fract<pos:position pos:line="12" pos:column="54"/></name><operator pos:line="12" pos:column="54">++<pos:position pos:line="12" pos:column="56"/></operator></expr></incr>)<pos:position pos:line="12" pos:column="57"/></control> <block pos:line="12" pos:column="58">{}<pos:position pos:line="12" pos:column="60"/></block></for>

	<return pos:line="14" pos:column="9">return <expr><call><name pos:line="14" pos:column="16">do_big_num<pos:position pos:line="14" pos:column="26"/></name><argument_list pos:line="14" pos:column="26">(<argument><expr><operator pos:line="14" pos:column="27">(<pos:position pos:line="14" pos:column="28"/></operator><name pos:line="14" pos:column="28">int64<pos:position pos:line="14" pos:column="33"/></name><operator pos:line="14" pos:column="33">)<pos:position pos:line="14" pos:column="34"/></operator><name pos:line="14" pos:column="34">dnum<pos:position pos:line="14" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="40">human_flag<pos:position pos:line="14" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="52">fract<pos:position pos:line="14" pos:column="57"/></name></expr></argument>)<pos:position pos:line="14" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="59"/></return>
<cpp:else pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">else<pos:position pos:line="15" pos:column="6"/></cpp:directive></cpp:else>
	<comment type="block" pos:line="16" pos:column="9">/* A big number might lose digits converting to a too-short int64,
	 * so let's just return the raw double conversion. */</comment>
	<expr_stmt><expr><call><name pos:line="18" pos:column="9">snprintf<pos:position pos:line="18" pos:column="17"/></name><argument_list pos:line="18" pos:column="17">(<argument><expr><name pos:line="18" pos:column="18">tmp_buf<pos:position pos:line="18" pos:column="25"/></name></expr></argument>, <argument><expr><sizeof pos:line="18" pos:column="27">sizeof <name pos:line="18" pos:column="34">tmp_buf<pos:position pos:line="18" pos:column="41"/></name></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="18" pos:column="43">"%.*f"<pos:position pos:line="18" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="18" pos:column="51">decimal_digits<pos:position pos:line="18" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="67">dnum<pos:position pos:line="18" pos:column="71"/></name></expr></argument>)<pos:position pos:line="18" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="73"/></expr_stmt>
	<return pos:line="19" pos:column="9">return <expr><name pos:line="19" pos:column="16">tmp_buf<pos:position pos:line="19" pos:column="23"/></name></expr>;<pos:position pos:line="19" pos:column="24"/></return>
<cpp:endif pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">endif<pos:position pos:line="20" pos:column="7"/></cpp:directive></cpp:endif>
}<pos:position pos:line="21" pos:column="2"/></block></function></unit>
