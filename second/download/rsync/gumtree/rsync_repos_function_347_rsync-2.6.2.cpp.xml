<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_347_rsync-2.6.2.cpp" pos:tabs="8"><decl_stmt><decl><type><name pos:line="1" pos:column="1">inflate_codes_statef<pos:position pos:line="1" pos:column="21"/></name> <modifier pos:line="1" pos:column="22">*<pos:position pos:line="1" pos:column="23"/></modifier></type><name pos:line="1" pos:column="23">inflate_codes_new<pos:position pos:line="1" pos:column="40"/></name><argument_list pos:line="1" pos:column="40">(<argument><expr><name pos:line="1" pos:column="41">bl<pos:position pos:line="1" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="1" pos:column="45">bd<pos:position pos:line="1" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="1" pos:column="49">tl<pos:position pos:line="1" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="1" pos:column="53">td<pos:position pos:line="1" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="1" pos:column="57">z<pos:position pos:line="1" pos:column="58"/></name></expr></argument>)<pos:position pos:line="1" pos:column="59"/></argument_list>
<name pos:line="2" pos:column="1">uInt<pos:position pos:line="2" pos:column="5"/></name> <name pos:line="2" pos:column="6">bl<pos:position pos:line="2" pos:column="8"/></name></decl>, <decl><type ref="prev"/><name pos:line="2" pos:column="10">bd<pos:position pos:line="2" pos:column="12"/></name></decl>;<pos:position pos:line="2" pos:column="13"/></decl_stmt>
<decl_stmt><decl><type><name pos:line="3" pos:column="1">inflate_huft<pos:position pos:line="3" pos:column="13"/></name> <modifier pos:line="3" pos:column="14">*<pos:position pos:line="3" pos:column="15"/></modifier></type><name pos:line="3" pos:column="15">tl<pos:position pos:line="3" pos:column="17"/></name></decl>;<pos:position pos:line="3" pos:column="18"/></decl_stmt>
<decl_stmt><decl><type><name pos:line="4" pos:column="1">inflate_huft<pos:position pos:line="4" pos:column="13"/></name> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier></type><name pos:line="4" pos:column="15">td<pos:position pos:line="4" pos:column="17"/></name></decl>;<pos:position pos:line="4" pos:column="18"/></decl_stmt> <comment type="block" pos:line="4" pos:column="19">/* need separate declaration for Borland C++ */</comment>
<decl_stmt><decl><type><name pos:line="5" pos:column="1">z_streamp<pos:position pos:line="5" pos:column="10"/></name></type> <name pos:line="5" pos:column="11">z<pos:position pos:line="5" pos:column="12"/></name></decl>;<pos:position pos:line="5" pos:column="13"/></decl_stmt>
<block pos:line="6" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">inflate_codes_statef<pos:position pos:line="7" pos:column="23"/></name> <modifier pos:line="7" pos:column="24">*<pos:position pos:line="7" pos:column="25"/></modifier></type><name pos:line="7" pos:column="25">c<pos:position pos:line="7" pos:column="26"/></name></decl>;<pos:position pos:line="7" pos:column="27"/></decl_stmt>

  <if pos:line="9" pos:column="3">if <condition pos:line="9" pos:column="6">(<expr><operator pos:line="9" pos:column="7">(<pos:position pos:line="9" pos:column="8"/></operator><name pos:line="9" pos:column="8">c<pos:position pos:line="9" pos:column="9"/></name> <operator pos:line="9" pos:column="10">=<pos:position pos:line="9" pos:column="11"/></operator> <operator pos:line="9" pos:column="12">(<pos:position pos:line="9" pos:column="13"/></operator><name pos:line="9" pos:column="13">inflate_codes_statef<pos:position pos:line="9" pos:column="33"/></name> <operator pos:line="9" pos:column="34">*<pos:position pos:line="9" pos:column="35"/></operator><operator pos:line="9" pos:column="35">)<pos:position pos:line="9" pos:column="36"/></operator>
       <call><name pos:line="10" pos:column="8">ZALLOC<pos:position pos:line="10" pos:column="14"/></name><argument_list pos:line="10" pos:column="14">(<argument><expr><name pos:line="10" pos:column="15">z<pos:position pos:line="10" pos:column="16"/></name></expr></argument>,<argument><expr><literal type="number" pos:line="10" pos:column="17">1<pos:position pos:line="10" pos:column="18"/></literal></expr></argument>,<argument><expr><sizeof pos:line="10" pos:column="19">sizeof<argument_list pos:line="10" pos:column="25">(<argument><expr pos:line="10" pos:column="26">struct <name pos:line="10" pos:column="33">inflate_codes_state<pos:position pos:line="10" pos:column="52"/></name></expr></argument>)<pos:position pos:line="10" pos:column="53"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="10" pos:column="54"/></argument_list></call><operator pos:line="10" pos:column="54">)<pos:position pos:line="10" pos:column="55"/></operator> <operator pos:line="10" pos:column="56">!=<pos:position pos:line="10" pos:column="58"/></operator> <name pos:line="10" pos:column="59">Z_NULL<pos:position pos:line="10" pos:column="65"/></name></expr>)<pos:position pos:line="10" pos:column="66"/></condition><then pos:line="10" pos:column="66">
  <block pos:line="11" pos:column="3">{
    <expr_stmt><expr><name><name pos:line="12" pos:column="5">c<pos:position pos:line="12" pos:column="6"/></name><operator pos:line="12" pos:column="6">-&gt;<pos:position pos:line="12" pos:column="11"/></operator><name pos:line="12" pos:column="8">mode<pos:position pos:line="12" pos:column="12"/></name></name> <operator pos:line="12" pos:column="13">=<pos:position pos:line="12" pos:column="14"/></operator> <name pos:line="12" pos:column="15">START<pos:position pos:line="12" pos:column="20"/></name></expr>;<pos:position pos:line="12" pos:column="21"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="13" pos:column="5">c<pos:position pos:line="13" pos:column="6"/></name><operator pos:line="13" pos:column="6">-&gt;<pos:position pos:line="13" pos:column="11"/></operator><name pos:line="13" pos:column="8">lbits<pos:position pos:line="13" pos:column="13"/></name></name> <operator pos:line="13" pos:column="14">=<pos:position pos:line="13" pos:column="15"/></operator> <operator pos:line="13" pos:column="16">(<pos:position pos:line="13" pos:column="17"/></operator><name pos:line="13" pos:column="17">Byte<pos:position pos:line="13" pos:column="21"/></name><operator pos:line="13" pos:column="21">)<pos:position pos:line="13" pos:column="22"/></operator><name pos:line="13" pos:column="22">bl<pos:position pos:line="13" pos:column="24"/></name></expr>;<pos:position pos:line="13" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="14" pos:column="5">c<pos:position pos:line="14" pos:column="6"/></name><operator pos:line="14" pos:column="6">-&gt;<pos:position pos:line="14" pos:column="11"/></operator><name pos:line="14" pos:column="8">dbits<pos:position pos:line="14" pos:column="13"/></name></name> <operator pos:line="14" pos:column="14">=<pos:position pos:line="14" pos:column="15"/></operator> <operator pos:line="14" pos:column="16">(<pos:position pos:line="14" pos:column="17"/></operator><name pos:line="14" pos:column="17">Byte<pos:position pos:line="14" pos:column="21"/></name><operator pos:line="14" pos:column="21">)<pos:position pos:line="14" pos:column="22"/></operator><name pos:line="14" pos:column="22">bd<pos:position pos:line="14" pos:column="24"/></name></expr>;<pos:position pos:line="14" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="15" pos:column="5">c<pos:position pos:line="15" pos:column="6"/></name><operator pos:line="15" pos:column="6">-&gt;<pos:position pos:line="15" pos:column="11"/></operator><name pos:line="15" pos:column="8">ltree<pos:position pos:line="15" pos:column="13"/></name></name> <operator pos:line="15" pos:column="14">=<pos:position pos:line="15" pos:column="15"/></operator> <name pos:line="15" pos:column="16">tl<pos:position pos:line="15" pos:column="18"/></name></expr>;<pos:position pos:line="15" pos:column="19"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="16" pos:column="5">c<pos:position pos:line="16" pos:column="6"/></name><operator pos:line="16" pos:column="6">-&gt;<pos:position pos:line="16" pos:column="11"/></operator><name pos:line="16" pos:column="8">dtree<pos:position pos:line="16" pos:column="13"/></name></name> <operator pos:line="16" pos:column="14">=<pos:position pos:line="16" pos:column="15"/></operator> <name pos:line="16" pos:column="16">td<pos:position pos:line="16" pos:column="18"/></name></expr>;<pos:position pos:line="16" pos:column="19"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="17" pos:column="5">Tracev<pos:position pos:line="17" pos:column="11"/></name><argument_list pos:line="17" pos:column="11">(<argument><expr><operator pos:line="17" pos:column="12">(<pos:position pos:line="17" pos:column="13"/></operator><name pos:line="17" pos:column="13">stderr<pos:position pos:line="17" pos:column="19"/></name><operator pos:line="17" pos:column="19">,<pos:position pos:line="17" pos:column="20"/></operator> <literal type="string" pos:line="17" pos:column="21">"inflate:       codes new\n"<pos:position pos:line="17" pos:column="49"/></literal><operator pos:line="17" pos:column="49">)<pos:position pos:line="17" pos:column="50"/></operator></expr></argument>)<pos:position pos:line="17" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="52"/></expr_stmt>
  }<pos:position pos:line="18" pos:column="4"/></block></then></if>
  <return pos:line="19" pos:column="3">return <expr><name pos:line="19" pos:column="10">c<pos:position pos:line="19" pos:column="11"/></name></expr>;<pos:position pos:line="19" pos:column="12"/></return>
}<pos:position pos:line="20" pos:column="2"/></block></unit>
