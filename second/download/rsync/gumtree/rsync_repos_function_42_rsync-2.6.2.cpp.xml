<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_42_rsync-2.6.2.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">add_exclude<pos:position pos:line="1" pos:column="17"/></name><parameter_list pos:line="1" pos:column="17">(<parameter><decl><type><name><name pos:line="1" pos:column="18">struct<pos:position pos:line="1" pos:column="24"/></name> <name pos:line="1" pos:column="25">exclude_list_struct<pos:position pos:line="1" pos:column="44"/></name></name> <modifier pos:line="1" pos:column="45">*<pos:position pos:line="1" pos:column="46"/></modifier></type><name pos:line="1" pos:column="46">listp<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="53">const<pos:position pos:line="1" pos:column="58"/></specifier> <name pos:line="1" pos:column="59">char<pos:position pos:line="1" pos:column="63"/></name> <modifier pos:line="1" pos:column="64">*<pos:position pos:line="1" pos:column="65"/></modifier></type><name pos:line="1" pos:column="65">pattern<pos:position pos:line="1" pos:column="72"/></name></decl></parameter>,
		 <parameter><decl><type><name pos:line="2" pos:column="18">int<pos:position pos:line="2" pos:column="21"/></name></type> <name pos:line="2" pos:column="22">xflags<pos:position pos:line="2" pos:column="28"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="29"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">pat_len<pos:position pos:line="4" pos:column="20"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="22">incl<pos:position pos:line="4" pos:column="26"/></name></decl>;<pos:position pos:line="4" pos:column="27"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="5" pos:column="9">const<pos:position pos:line="5" pos:column="14"/></specifier> <name pos:line="5" pos:column="15">char<pos:position pos:line="5" pos:column="19"/></name> <modifier pos:line="5" pos:column="20">*<pos:position pos:line="5" pos:column="21"/></modifier></type><name pos:line="5" pos:column="21">cp<pos:position pos:line="5" pos:column="23"/></name></decl>;<pos:position pos:line="5" pos:column="24"/></decl_stmt>

	<if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<expr><operator pos:line="7" pos:column="13">!<pos:position pos:line="7" pos:column="14"/></operator><name pos:line="7" pos:column="14">pattern<pos:position pos:line="7" pos:column="21"/></name></expr>)<pos:position pos:line="7" pos:column="22"/></condition><then pos:line="7" pos:column="22">
		<block type="pseudo"><return pos:line="8" pos:column="17">return;<pos:position pos:line="8" pos:column="24"/></return></block></then></if>

	<expr_stmt><expr><name pos:line="10" pos:column="9">cp<pos:position pos:line="10" pos:column="11"/></name> <operator pos:line="10" pos:column="12">=<pos:position pos:line="10" pos:column="13"/></operator> <name pos:line="10" pos:column="14">pattern<pos:position pos:line="10" pos:column="21"/></name></expr>;<pos:position pos:line="10" pos:column="22"/></expr_stmt>
	<expr_stmt><expr><name pos:line="11" pos:column="9">pat_len<pos:position pos:line="11" pos:column="16"/></name> <operator pos:line="11" pos:column="17">=<pos:position pos:line="11" pos:column="18"/></operator> <literal type="number" pos:line="11" pos:column="19">0<pos:position pos:line="11" pos:column="20"/></literal></expr>;<pos:position pos:line="11" pos:column="21"/></expr_stmt>
	<while pos:line="12" pos:column="9">while <condition pos:line="12" pos:column="15">(<expr><literal type="number" pos:line="12" pos:column="16">1<pos:position pos:line="12" pos:column="17"/></literal></expr>)<pos:position pos:line="12" pos:column="18"/></condition> <block pos:line="12" pos:column="19">{
		<expr_stmt><expr><name pos:line="13" pos:column="17">cp<pos:position pos:line="13" pos:column="19"/></name> <operator pos:line="13" pos:column="20">=<pos:position pos:line="13" pos:column="21"/></operator> <call><name pos:line="13" pos:column="22">get_exclude_tok<pos:position pos:line="13" pos:column="37"/></name><argument_list pos:line="13" pos:column="37">(<argument><expr><name pos:line="13" pos:column="38">cp<pos:position pos:line="13" pos:column="40"/></name> <operator pos:line="13" pos:column="41">+<pos:position pos:line="13" pos:column="42"/></operator> <name pos:line="13" pos:column="43">pat_len<pos:position pos:line="13" pos:column="50"/></name></expr></argument>, <argument><expr><operator pos:line="13" pos:column="52">&amp;<pos:position pos:line="13" pos:column="57"/></operator><name pos:line="13" pos:column="53">pat_len<pos:position pos:line="13" pos:column="60"/></name></expr></argument>, <argument><expr><operator pos:line="13" pos:column="62">&amp;<pos:position pos:line="13" pos:column="67"/></operator><name pos:line="13" pos:column="63">incl<pos:position pos:line="13" pos:column="67"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="69">xflags<pos:position pos:line="13" pos:column="75"/></name></expr></argument>)<pos:position pos:line="13" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="77"/></expr_stmt>
		<if pos:line="14" pos:column="17">if <condition pos:line="14" pos:column="20">(<expr><operator pos:line="14" pos:column="21">!<pos:position pos:line="14" pos:column="22"/></operator><name pos:line="14" pos:column="22">pat_len<pos:position pos:line="14" pos:column="29"/></name></expr>)<pos:position pos:line="14" pos:column="30"/></condition><then pos:line="14" pos:column="30">
			<block type="pseudo"><break pos:line="15" pos:column="25">break;<pos:position pos:line="15" pos:column="31"/></break></block></then></if>
		<comment type="block" pos:line="16" pos:column="17">/* If we got the special "!" token, clear the list. */</comment>
		<if pos:line="17" pos:column="17">if <condition pos:line="17" pos:column="20">(<expr><name pos:line="17" pos:column="21">incl<pos:position pos:line="17" pos:column="25"/></name> <operator pos:line="17" pos:column="26">&lt;<pos:position pos:line="17" pos:column="30"/></operator> <literal type="number" pos:line="17" pos:column="28">0<pos:position pos:line="17" pos:column="29"/></literal></expr>)<pos:position pos:line="17" pos:column="30"/></condition><then pos:line="17" pos:column="30">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="18" pos:column="25">free_exclude_list<pos:position pos:line="18" pos:column="42"/></name><argument_list pos:line="18" pos:column="42">(<argument><expr><name pos:line="18" pos:column="43">listp<pos:position pos:line="18" pos:column="48"/></name></expr></argument>)<pos:position pos:line="18" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="50"/></expr_stmt></block></then>
		<else pos:line="19" pos:column="17">else <block pos:line="19" pos:column="22">{
			<expr_stmt><expr><call><name pos:line="20" pos:column="25">make_exclude<pos:position pos:line="20" pos:column="37"/></name><argument_list pos:line="20" pos:column="37">(<argument><expr><name pos:line="20" pos:column="38">listp<pos:position pos:line="20" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="45">cp<pos:position pos:line="20" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="49">pat_len<pos:position pos:line="20" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="58">incl<pos:position pos:line="20" pos:column="62"/></name></expr></argument>)<pos:position pos:line="20" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="64"/></expr_stmt>

			<if pos:line="22" pos:column="25">if <condition pos:line="22" pos:column="28">(<expr><name pos:line="22" pos:column="29">verbose<pos:position pos:line="22" pos:column="36"/></name> <operator pos:line="22" pos:column="37">&gt;<pos:position pos:line="22" pos:column="41"/></operator> <literal type="number" pos:line="22" pos:column="39">2<pos:position pos:line="22" pos:column="40"/></literal></expr>)<pos:position pos:line="22" pos:column="41"/></condition><then pos:line="22" pos:column="41"> <block pos:line="22" pos:column="42">{
				<expr_stmt><expr><call><name pos:line="23" pos:column="33">rprintf<pos:position pos:line="23" pos:column="40"/></name><argument_list pos:line="23" pos:column="40">(<argument><expr><name pos:line="23" pos:column="41">FINFO<pos:position pos:line="23" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="23" pos:column="48">"[%s] add_exclude(%.*s, %s%s)\n"<pos:position pos:line="23" pos:column="80"/></literal></expr></argument>,
					<argument><expr><call><name pos:line="24" pos:column="41">who_am_i<pos:position pos:line="24" pos:column="49"/></name><argument_list pos:line="24" pos:column="49">()<pos:position pos:line="24" pos:column="51"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="24" pos:column="53">pat_len<pos:position pos:line="24" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="62">cp<pos:position pos:line="24" pos:column="64"/></name></expr></argument>,
					<argument><expr><name><name pos:line="25" pos:column="41">listp<pos:position pos:line="25" pos:column="46"/></name><operator pos:line="25" pos:column="46">-&gt;<pos:position pos:line="25" pos:column="51"/></operator><name pos:line="25" pos:column="48">debug_type<pos:position pos:line="25" pos:column="58"/></name></name></expr></argument>,
					<argument><expr><ternary><condition><expr><name pos:line="26" pos:column="41">incl<pos:position pos:line="26" pos:column="45"/></name></expr> ?<pos:position pos:line="26" pos:column="47"/></condition><then pos:line="26" pos:column="47"> <expr><literal type="string" pos:line="26" pos:column="48">"include"<pos:position pos:line="26" pos:column="57"/></literal></expr> <pos:position pos:line="26" pos:column="58"/></then><else pos:line="26" pos:column="58">: <expr><literal type="string" pos:line="26" pos:column="60">"exclude"<pos:position pos:line="26" pos:column="69"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="26" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="71"/></expr_stmt>
			}<pos:position pos:line="27" pos:column="26"/></block></then></if>
		}<pos:position pos:line="28" pos:column="18"/></block></else></if>
	}<pos:position pos:line="29" pos:column="10"/></block></while>
}<pos:position pos:line="30" pos:column="2"/></block></function></unit>
