<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_69_rsync-2.0.18.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">writefd_unbuffered<pos:position pos:line="1" pos:column="31"/></name><parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><name pos:line="1" pos:column="32">int<pos:position pos:line="1" pos:column="35"/></name></type> <name pos:line="1" pos:column="36">fd<pos:position pos:line="1" pos:column="38"/></name></decl></parameter>,<parameter><decl><type><name pos:line="1" pos:column="39">char<pos:position pos:line="1" pos:column="43"/></name> <modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier></type><name pos:line="1" pos:column="45">buf<pos:position pos:line="1" pos:column="48"/></name></decl></parameter>,<parameter><decl><type><name pos:line="1" pos:column="49">int<pos:position pos:line="1" pos:column="52"/></name></type> <name pos:line="1" pos:column="53">len<pos:position pos:line="1" pos:column="56"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="57"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">total<pos:position pos:line="3" pos:column="18"/></name> <init pos:line="3" pos:column="19">= <expr><literal type="number" pos:line="3" pos:column="21">0<pos:position pos:line="3" pos:column="22"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="23"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">fd_set<pos:position pos:line="4" pos:column="15"/></name></type> <name pos:line="4" pos:column="16">w_fds<pos:position pos:line="4" pos:column="21"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="23">r_fds<pos:position pos:line="4" pos:column="28"/></name></decl>;<pos:position pos:line="4" pos:column="29"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">fd_count<pos:position pos:line="5" pos:column="21"/></name></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="23">count<pos:position pos:line="5" pos:column="28"/></name></decl>;<pos:position pos:line="5" pos:column="29"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">timeval<pos:position pos:line="6" pos:column="23"/></name></name></type> <name pos:line="6" pos:column="24">tv<pos:position pos:line="6" pos:column="26"/></name></decl>;<pos:position pos:line="6" pos:column="27"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">int<pos:position pos:line="7" pos:column="12"/></name></type> <name pos:line="7" pos:column="13">reading<pos:position pos:line="7" pos:column="20"/></name></decl>;<pos:position pos:line="7" pos:column="21"/></decl_stmt>

	<expr_stmt><expr><name pos:line="9" pos:column="9">no_flush<pos:position pos:line="9" pos:column="17"/></name><operator pos:line="9" pos:column="17">++<pos:position pos:line="9" pos:column="19"/></operator></expr>;<pos:position pos:line="9" pos:column="20"/></expr_stmt>

	<expr_stmt><expr><name pos:line="11" pos:column="9">reading<pos:position pos:line="11" pos:column="16"/></name> <operator pos:line="11" pos:column="17">=<pos:position pos:line="11" pos:column="18"/></operator> <operator pos:line="11" pos:column="19">(<pos:position pos:line="11" pos:column="20"/></operator><name pos:line="11" pos:column="20">buffer_f_in<pos:position pos:line="11" pos:column="31"/></name> <operator pos:line="11" pos:column="32">!=<pos:position pos:line="11" pos:column="34"/></operator> <operator pos:line="11" pos:column="35">-<pos:position pos:line="11" pos:column="36"/></operator><literal type="number" pos:line="11" pos:column="36">1<pos:position pos:line="11" pos:column="37"/></literal> <operator pos:line="11" pos:column="38">&amp;&amp;<pos:position pos:line="11" pos:column="48"/></operator> <name pos:line="11" pos:column="41">read_buffer_len<pos:position pos:line="11" pos:column="56"/></name> <operator pos:line="11" pos:column="57">&lt;<pos:position pos:line="11" pos:column="61"/></operator> <name pos:line="11" pos:column="59">MAX_READ_BUFFER<pos:position pos:line="11" pos:column="74"/></name><operator pos:line="11" pos:column="74">)<pos:position pos:line="11" pos:column="75"/></operator></expr>;<pos:position pos:line="11" pos:column="76"/></expr_stmt>

	<while pos:line="13" pos:column="9">while <condition pos:line="13" pos:column="15">(<expr><name pos:line="13" pos:column="16">total<pos:position pos:line="13" pos:column="21"/></name> <operator pos:line="13" pos:column="22">&lt;<pos:position pos:line="13" pos:column="26"/></operator> <name pos:line="13" pos:column="24">len<pos:position pos:line="13" pos:column="27"/></name></expr>)<pos:position pos:line="13" pos:column="28"/></condition> <block pos:line="13" pos:column="29">{
		<expr_stmt><expr><call><name pos:line="14" pos:column="17">FD_ZERO<pos:position pos:line="14" pos:column="24"/></name><argument_list pos:line="14" pos:column="24">(<argument><expr><operator pos:line="14" pos:column="25">&amp;<pos:position pos:line="14" pos:column="30"/></operator><name pos:line="14" pos:column="26">w_fds<pos:position pos:line="14" pos:column="31"/></name></expr></argument>)<pos:position pos:line="14" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="33"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="15" pos:column="17">FD_ZERO<pos:position pos:line="15" pos:column="24"/></name><argument_list pos:line="15" pos:column="24">(<argument><expr><operator pos:line="15" pos:column="25">&amp;<pos:position pos:line="15" pos:column="30"/></operator><name pos:line="15" pos:column="26">r_fds<pos:position pos:line="15" pos:column="31"/></name></expr></argument>)<pos:position pos:line="15" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="33"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="16" pos:column="17">FD_SET<pos:position pos:line="16" pos:column="23"/></name><argument_list pos:line="16" pos:column="23">(<argument><expr><name pos:line="16" pos:column="24">fd<pos:position pos:line="16" pos:column="26"/></name></expr></argument>,<argument><expr><operator pos:line="16" pos:column="27">&amp;<pos:position pos:line="16" pos:column="32"/></operator><name pos:line="16" pos:column="28">w_fds<pos:position pos:line="16" pos:column="33"/></name></expr></argument>)<pos:position pos:line="16" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="35"/></expr_stmt>
		<expr_stmt><expr><name pos:line="17" pos:column="17">fd_count<pos:position pos:line="17" pos:column="25"/></name> <operator pos:line="17" pos:column="26">=<pos:position pos:line="17" pos:column="27"/></operator> <name pos:line="17" pos:column="28">fd<pos:position pos:line="17" pos:column="30"/></name><operator pos:line="17" pos:column="30">+<pos:position pos:line="17" pos:column="31"/></operator><literal type="number" pos:line="17" pos:column="31">1<pos:position pos:line="17" pos:column="32"/></literal></expr>;<pos:position pos:line="17" pos:column="33"/></expr_stmt>

		<if pos:line="19" pos:column="17">if <condition pos:line="19" pos:column="20">(<expr><name pos:line="19" pos:column="21">reading<pos:position pos:line="19" pos:column="28"/></name></expr>)<pos:position pos:line="19" pos:column="29"/></condition><then pos:line="19" pos:column="29"> <block pos:line="19" pos:column="30">{
			<expr_stmt><expr><call><name pos:line="20" pos:column="25">FD_SET<pos:position pos:line="20" pos:column="31"/></name><argument_list pos:line="20" pos:column="31">(<argument><expr><name pos:line="20" pos:column="32">buffer_f_in<pos:position pos:line="20" pos:column="43"/></name></expr></argument>,<argument><expr><operator pos:line="20" pos:column="44">&amp;<pos:position pos:line="20" pos:column="49"/></operator><name pos:line="20" pos:column="45">r_fds<pos:position pos:line="20" pos:column="50"/></name></expr></argument>)<pos:position pos:line="20" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="52"/></expr_stmt>
			<if pos:line="21" pos:column="25">if <condition pos:line="21" pos:column="28">(<expr><name pos:line="21" pos:column="29">buffer_f_in<pos:position pos:line="21" pos:column="40"/></name> <operator pos:line="21" pos:column="41">&gt;<pos:position pos:line="21" pos:column="45"/></operator> <name pos:line="21" pos:column="43">fd<pos:position pos:line="21" pos:column="45"/></name></expr>)<pos:position pos:line="21" pos:column="46"/></condition><then pos:line="21" pos:column="46"> 
				<block type="pseudo"><expr_stmt><expr><name pos:line="22" pos:column="33">fd_count<pos:position pos:line="22" pos:column="41"/></name> <operator pos:line="22" pos:column="42">=<pos:position pos:line="22" pos:column="43"/></operator> <name pos:line="22" pos:column="44">buffer_f_in<pos:position pos:line="22" pos:column="55"/></name><operator pos:line="22" pos:column="55">+<pos:position pos:line="22" pos:column="56"/></operator><literal type="number" pos:line="22" pos:column="56">1<pos:position pos:line="22" pos:column="57"/></literal></expr>;<pos:position pos:line="22" pos:column="58"/></expr_stmt></block></then></if>
		}<pos:position pos:line="23" pos:column="18"/></block></then></if>

		<expr_stmt><expr><name><name pos:line="25" pos:column="17">tv<pos:position pos:line="25" pos:column="19"/></name><operator pos:line="25" pos:column="19">.<pos:position pos:line="25" pos:column="20"/></operator><name pos:line="25" pos:column="20">tv_sec<pos:position pos:line="25" pos:column="26"/></name></name> <operator pos:line="25" pos:column="27">=<pos:position pos:line="25" pos:column="28"/></operator> <name pos:line="25" pos:column="29">io_timeout<pos:position pos:line="25" pos:column="39"/></name></expr>;<pos:position pos:line="25" pos:column="40"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="26" pos:column="17">tv<pos:position pos:line="26" pos:column="19"/></name><operator pos:line="26" pos:column="19">.<pos:position pos:line="26" pos:column="20"/></operator><name pos:line="26" pos:column="20">tv_usec<pos:position pos:line="26" pos:column="27"/></name></name> <operator pos:line="26" pos:column="28">=<pos:position pos:line="26" pos:column="29"/></operator> <literal type="number" pos:line="26" pos:column="30">0<pos:position pos:line="26" pos:column="31"/></literal></expr>;<pos:position pos:line="26" pos:column="32"/></expr_stmt>

		<expr_stmt><expr><name pos:line="28" pos:column="17">count<pos:position pos:line="28" pos:column="22"/></name> <operator pos:line="28" pos:column="23">=<pos:position pos:line="28" pos:column="24"/></operator> <call><name pos:line="28" pos:column="25">select<pos:position pos:line="28" pos:column="31"/></name><argument_list pos:line="28" pos:column="31">(<argument><expr><name pos:line="28" pos:column="32">fd_count<pos:position pos:line="28" pos:column="40"/></name></expr></argument>,
			       <argument><expr><ternary><condition><expr><name pos:line="29" pos:column="32">reading<pos:position pos:line="29" pos:column="39"/></name></expr>?<pos:position pos:line="29" pos:column="40"/></condition><then><expr><operator pos:line="29" pos:column="40">&amp;<pos:position pos:line="29" pos:column="45"/></operator><name pos:line="29" pos:column="41">r_fds<pos:position pos:line="29" pos:column="46"/></name></expr></then><else pos:line="29" pos:column="46">:<expr><name pos:line="29" pos:column="47">NULL<pos:position pos:line="29" pos:column="51"/></name></expr></else></ternary></expr></argument>,
			       <argument><expr><operator pos:line="30" pos:column="32">&amp;<pos:position pos:line="30" pos:column="37"/></operator><name pos:line="30" pos:column="33">w_fds<pos:position pos:line="30" pos:column="38"/></name></expr></argument>,<argument><expr><name pos:line="30" pos:column="39">NULL<pos:position pos:line="30" pos:column="43"/></name></expr></argument>,
			       <argument><expr><ternary><condition><expr><name pos:line="31" pos:column="32">io_timeout<pos:position pos:line="31" pos:column="42"/></name></expr>?<pos:position pos:line="31" pos:column="43"/></condition><then><expr><operator pos:line="31" pos:column="43">&amp;<pos:position pos:line="31" pos:column="48"/></operator><name pos:line="31" pos:column="44">tv<pos:position pos:line="31" pos:column="46"/></name></expr></then><else pos:line="31" pos:column="46">:<expr><name pos:line="31" pos:column="47">NULL<pos:position pos:line="31" pos:column="51"/></name></expr></else></ternary></expr></argument>)<pos:position pos:line="31" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="53"/></expr_stmt>

		<if pos:line="33" pos:column="17">if <condition pos:line="33" pos:column="20">(<expr><name pos:line="33" pos:column="21">count<pos:position pos:line="33" pos:column="26"/></name> <operator pos:line="33" pos:column="27">&lt;=<pos:position pos:line="33" pos:column="32"/></operator> <literal type="number" pos:line="33" pos:column="30">0<pos:position pos:line="33" pos:column="31"/></literal></expr>)<pos:position pos:line="33" pos:column="32"/></condition><then pos:line="33" pos:column="32"> <block pos:line="33" pos:column="33">{
			<expr_stmt><expr><call><name pos:line="34" pos:column="25">check_timeout<pos:position pos:line="34" pos:column="38"/></name><argument_list pos:line="34" pos:column="38">()<pos:position pos:line="34" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="41"/></expr_stmt>
			<continue pos:line="35" pos:column="25">continue;<pos:position pos:line="35" pos:column="34"/></continue>
		}<pos:position pos:line="36" pos:column="18"/></block></then></if>

		<if pos:line="38" pos:column="17">if <condition pos:line="38" pos:column="20">(<expr><call><name pos:line="38" pos:column="21">FD_ISSET<pos:position pos:line="38" pos:column="29"/></name><argument_list pos:line="38" pos:column="29">(<argument><expr><name pos:line="38" pos:column="30">fd<pos:position pos:line="38" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="38" pos:column="34">&amp;<pos:position pos:line="38" pos:column="39"/></operator><name pos:line="38" pos:column="35">w_fds<pos:position pos:line="38" pos:column="40"/></name></expr></argument>)<pos:position pos:line="38" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="38" pos:column="42"/></condition><then pos:line="38" pos:column="42"> <block pos:line="38" pos:column="43">{
			<decl_stmt><decl><type><name pos:line="39" pos:column="25">int<pos:position pos:line="39" pos:column="28"/></name></type> <name pos:line="39" pos:column="29">ret<pos:position pos:line="39" pos:column="32"/></name> <init pos:line="39" pos:column="33">= <expr><call><name pos:line="39" pos:column="35">write<pos:position pos:line="39" pos:column="40"/></name><argument_list pos:line="39" pos:column="40">(<argument><expr><name pos:line="39" pos:column="41">fd<pos:position pos:line="39" pos:column="43"/></name></expr></argument>,<argument><expr><name pos:line="39" pos:column="44">buf<pos:position pos:line="39" pos:column="47"/></name><operator pos:line="39" pos:column="47">+<pos:position pos:line="39" pos:column="48"/></operator><name pos:line="39" pos:column="48">total<pos:position pos:line="39" pos:column="53"/></name></expr></argument>,<argument><expr><name pos:line="39" pos:column="54">len<pos:position pos:line="39" pos:column="57"/></name><operator pos:line="39" pos:column="57">-<pos:position pos:line="39" pos:column="58"/></operator><name pos:line="39" pos:column="58">total<pos:position pos:line="39" pos:column="63"/></name></expr></argument>)<pos:position pos:line="39" pos:column="64"/></argument_list></call></expr></init></decl>;<pos:position pos:line="39" pos:column="65"/></decl_stmt>

			<if pos:line="41" pos:column="25">if <condition pos:line="41" pos:column="28">(<expr><name pos:line="41" pos:column="29">ret<pos:position pos:line="41" pos:column="32"/></name> <operator pos:line="41" pos:column="33">==<pos:position pos:line="41" pos:column="35"/></operator> <operator pos:line="41" pos:column="36">-<pos:position pos:line="41" pos:column="37"/></operator><literal type="number" pos:line="41" pos:column="37">1<pos:position pos:line="41" pos:column="38"/></literal> <operator pos:line="41" pos:column="39">&amp;&amp;<pos:position pos:line="41" pos:column="49"/></operator> <name pos:line="41" pos:column="42">errno<pos:position pos:line="41" pos:column="47"/></name> <operator pos:line="41" pos:column="48">==<pos:position pos:line="41" pos:column="50"/></operator> <name pos:line="41" pos:column="51">EINTR<pos:position pos:line="41" pos:column="56"/></name></expr>)<pos:position pos:line="41" pos:column="57"/></condition><then pos:line="41" pos:column="57"> <block pos:line="41" pos:column="58">{
				<continue pos:line="42" pos:column="33">continue;<pos:position pos:line="42" pos:column="42"/></continue>
			}<pos:position pos:line="43" pos:column="26"/></block></then></if>

			<if pos:line="45" pos:column="25">if <condition pos:line="45" pos:column="28">(<expr><name pos:line="45" pos:column="29">ret<pos:position pos:line="45" pos:column="32"/></name> <operator pos:line="45" pos:column="33">==<pos:position pos:line="45" pos:column="35"/></operator> <operator pos:line="45" pos:column="36">-<pos:position pos:line="45" pos:column="37"/></operator><literal type="number" pos:line="45" pos:column="37">1<pos:position pos:line="45" pos:column="38"/></literal> <operator pos:line="45" pos:column="39">&amp;&amp;<pos:position pos:line="45" pos:column="49"/></operator> 
			    <operator pos:line="46" pos:column="29">(<pos:position pos:line="46" pos:column="30"/></operator><name pos:line="46" pos:column="30">errno<pos:position pos:line="46" pos:column="35"/></name> <operator pos:line="46" pos:column="36">==<pos:position pos:line="46" pos:column="38"/></operator> <name pos:line="46" pos:column="39">EAGAIN<pos:position pos:line="46" pos:column="45"/></name> <operator pos:line="46" pos:column="46">||<pos:position pos:line="46" pos:column="48"/></operator> <name pos:line="46" pos:column="49">errno<pos:position pos:line="46" pos:column="54"/></name> <operator pos:line="46" pos:column="55">==<pos:position pos:line="46" pos:column="57"/></operator> <name pos:line="46" pos:column="58">EWOULDBLOCK<pos:position pos:line="46" pos:column="69"/></name><operator pos:line="46" pos:column="69">)<pos:position pos:line="46" pos:column="70"/></operator></expr>)<pos:position pos:line="46" pos:column="71"/></condition><then pos:line="46" pos:column="71"> <block pos:line="46" pos:column="72">{
				<comment type="block" pos:line="47" pos:column="33">/* this shouldn't happen, if it does then
				   sleep for a short time to prevent us
				   chewing too much CPU */</comment>
				<expr_stmt><expr><call><name pos:line="50" pos:column="33">u_sleep<pos:position pos:line="50" pos:column="40"/></name><argument_list pos:line="50" pos:column="40">(<argument><expr><literal type="number" pos:line="50" pos:column="41">100<pos:position pos:line="50" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="50" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="46"/></expr_stmt>
				<continue pos:line="51" pos:column="33">continue;<pos:position pos:line="51" pos:column="42"/></continue>
			}<pos:position pos:line="52" pos:column="26"/></block></then></if>

			<if pos:line="54" pos:column="25">if <condition pos:line="54" pos:column="28">(<expr><name pos:line="54" pos:column="29">ret<pos:position pos:line="54" pos:column="32"/></name> <operator pos:line="54" pos:column="33">&lt;=<pos:position pos:line="54" pos:column="38"/></operator> <literal type="number" pos:line="54" pos:column="36">0<pos:position pos:line="54" pos:column="37"/></literal></expr>)<pos:position pos:line="54" pos:column="38"/></condition><then pos:line="54" pos:column="38"> <block pos:line="54" pos:column="39">{
				<expr_stmt><expr><call><name pos:line="55" pos:column="33">rprintf<pos:position pos:line="55" pos:column="40"/></name><argument_list pos:line="55" pos:column="40">(<argument><expr><name pos:line="55" pos:column="41">FERROR<pos:position pos:line="55" pos:column="47"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="55" pos:column="48">"erroring writing %d bytes - exiting\n"<pos:position pos:line="55" pos:column="87"/></literal></expr></argument>, <argument><expr><name pos:line="55" pos:column="89">len<pos:position pos:line="55" pos:column="92"/></name></expr></argument>)<pos:position pos:line="55" pos:column="93"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="94"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="56" pos:column="33">exit_cleanup<pos:position pos:line="56" pos:column="45"/></name><argument_list pos:line="56" pos:column="45">(<argument><expr><literal type="number" pos:line="56" pos:column="46">1<pos:position pos:line="56" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="56" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="49"/></expr_stmt>
			}<pos:position pos:line="57" pos:column="26"/></block></then></if>

			<expr_stmt><expr><name pos:line="59" pos:column="25">total<pos:position pos:line="59" pos:column="30"/></name> <operator pos:line="59" pos:column="31">+=<pos:position pos:line="59" pos:column="33"/></operator> <name pos:line="59" pos:column="34">ret<pos:position pos:line="59" pos:column="37"/></name></expr>;<pos:position pos:line="59" pos:column="38"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="60" pos:column="25">stats<pos:position pos:line="60" pos:column="30"/></name><operator pos:line="60" pos:column="30">.<pos:position pos:line="60" pos:column="31"/></operator><name pos:line="60" pos:column="31">total_written<pos:position pos:line="60" pos:column="44"/></name></name> <operator pos:line="60" pos:column="45">+=<pos:position pos:line="60" pos:column="47"/></operator> <name pos:line="60" pos:column="48">ret<pos:position pos:line="60" pos:column="51"/></name></expr>;<pos:position pos:line="60" pos:column="52"/></expr_stmt>

			<if pos:line="62" pos:column="25">if <condition pos:line="62" pos:column="28">(<expr><name pos:line="62" pos:column="29">io_timeout<pos:position pos:line="62" pos:column="39"/></name></expr>)<pos:position pos:line="62" pos:column="40"/></condition><then pos:line="62" pos:column="40">
				<block type="pseudo"><expr_stmt><expr><name pos:line="63" pos:column="33">last_io<pos:position pos:line="63" pos:column="40"/></name> <operator pos:line="63" pos:column="41">=<pos:position pos:line="63" pos:column="42"/></operator> <call><name pos:line="63" pos:column="43">time<pos:position pos:line="63" pos:column="47"/></name><argument_list pos:line="63" pos:column="47">(<argument><expr><name pos:line="63" pos:column="48">NULL<pos:position pos:line="63" pos:column="52"/></name></expr></argument>)<pos:position pos:line="63" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="54"/></expr_stmt></block></then></if>
			<continue pos:line="64" pos:column="25">continue;<pos:position pos:line="64" pos:column="34"/></continue>
		}<pos:position pos:line="65" pos:column="18"/></block></then></if>

		<if pos:line="67" pos:column="17">if <condition pos:line="67" pos:column="20">(<expr><name pos:line="67" pos:column="21">reading<pos:position pos:line="67" pos:column="28"/></name> <operator pos:line="67" pos:column="29">&amp;&amp;<pos:position pos:line="67" pos:column="39"/></operator> <call><name pos:line="67" pos:column="32">FD_ISSET<pos:position pos:line="67" pos:column="40"/></name><argument_list pos:line="67" pos:column="40">(<argument><expr><name pos:line="67" pos:column="41">buffer_f_in<pos:position pos:line="67" pos:column="52"/></name></expr></argument>, <argument><expr><operator pos:line="67" pos:column="54">&amp;<pos:position pos:line="67" pos:column="59"/></operator><name pos:line="67" pos:column="55">r_fds<pos:position pos:line="67" pos:column="60"/></name></expr></argument>)<pos:position pos:line="67" pos:column="61"/></argument_list></call></expr>)<pos:position pos:line="67" pos:column="62"/></condition><then pos:line="67" pos:column="62"> <block pos:line="67" pos:column="63">{
			<expr_stmt><expr><call><name pos:line="68" pos:column="25">read_check<pos:position pos:line="68" pos:column="35"/></name><argument_list pos:line="68" pos:column="35">(<argument><expr><name pos:line="68" pos:column="36">buffer_f_in<pos:position pos:line="68" pos:column="47"/></name></expr></argument>)<pos:position pos:line="68" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="49"/></expr_stmt>
		}<pos:position pos:line="69" pos:column="18"/></block></then></if>
	}<pos:position pos:line="70" pos:column="10"/></block></while>

	<expr_stmt><expr><name pos:line="72" pos:column="9">no_flush<pos:position pos:line="72" pos:column="17"/></name><operator pos:line="72" pos:column="17">--<pos:position pos:line="72" pos:column="19"/></operator></expr>;<pos:position pos:line="72" pos:column="20"/></expr_stmt>
}<pos:position pos:line="73" pos:column="2"/></block></function></unit>
