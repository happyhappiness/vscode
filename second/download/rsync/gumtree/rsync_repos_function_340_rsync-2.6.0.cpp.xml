<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_340_rsync-2.6.0.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">client_run<pos:position pos:line="1" pos:column="15"/></name><parameter_list pos:line="1" pos:column="15">(<parameter><decl><type><name pos:line="1" pos:column="16">int<pos:position pos:line="1" pos:column="19"/></name></type> <name pos:line="1" pos:column="20">f_in<pos:position pos:line="1" pos:column="24"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="26">int<pos:position pos:line="1" pos:column="29"/></name></type> <name pos:line="1" pos:column="30">f_out<pos:position pos:line="1" pos:column="35"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="37">pid_t<pos:position pos:line="1" pos:column="42"/></name></type> <name pos:line="1" pos:column="43">pid<pos:position pos:line="1" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="48">int<pos:position pos:line="1" pos:column="51"/></name></type> <name pos:line="1" pos:column="52">argc<pos:position pos:line="1" pos:column="56"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="58">char<pos:position pos:line="1" pos:column="62"/></name> <modifier pos:line="1" pos:column="63">*<pos:position pos:line="1" pos:column="64"/></modifier></type><name><name pos:line="1" pos:column="64">argv<pos:position pos:line="1" pos:column="68"/></name><index pos:line="1" pos:column="68">[]<pos:position pos:line="1" pos:column="70"/></index></name></decl></parameter>)<pos:position pos:line="1" pos:column="71"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">file_list<pos:position pos:line="3" pos:column="25"/></name></name> <modifier pos:line="3" pos:column="26">*<pos:position pos:line="3" pos:column="27"/></modifier></type><name pos:line="3" pos:column="27">flist<pos:position pos:line="3" pos:column="32"/></name> <init pos:line="3" pos:column="33">= <expr><name pos:line="3" pos:column="35">NULL<pos:position pos:line="3" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="40"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">status<pos:position pos:line="4" pos:column="19"/></name> <init pos:line="4" pos:column="20">= <expr><literal type="number" pos:line="4" pos:column="22">0<pos:position pos:line="4" pos:column="23"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="25">status2<pos:position pos:line="4" pos:column="32"/></name> <init pos:line="4" pos:column="33">= <expr><literal type="number" pos:line="4" pos:column="35">0<pos:position pos:line="4" pos:column="36"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="37"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">char<pos:position pos:line="5" pos:column="13"/></name> <modifier pos:line="5" pos:column="14">*<pos:position pos:line="5" pos:column="15"/></modifier></type><name pos:line="5" pos:column="15">local_name<pos:position pos:line="5" pos:column="25"/></name> <init pos:line="5" pos:column="26">= <expr><name pos:line="5" pos:column="28">NULL<pos:position pos:line="5" pos:column="32"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="33"/></decl_stmt>
	<decl_stmt><decl><specifier pos:line="6" pos:column="9">extern<pos:position pos:line="6" pos:column="15"/></specifier> <type><name pos:line="6" pos:column="16">pid_t<pos:position pos:line="6" pos:column="21"/></name></type> <name pos:line="6" pos:column="22">cleanup_child_pid<pos:position pos:line="6" pos:column="39"/></name></decl>;<pos:position pos:line="6" pos:column="40"/></decl_stmt>
	<decl_stmt><decl><specifier pos:line="7" pos:column="9">extern<pos:position pos:line="7" pos:column="15"/></specifier> <type><name pos:line="7" pos:column="16">int<pos:position pos:line="7" pos:column="19"/></name></type> <name pos:line="7" pos:column="20">write_batch<pos:position pos:line="7" pos:column="31"/></name></decl>;<pos:position pos:line="7" pos:column="32"/></decl_stmt>
	<decl_stmt><decl><specifier pos:line="8" pos:column="9">extern<pos:position pos:line="8" pos:column="15"/></specifier> <type><name pos:line="8" pos:column="16">int<pos:position pos:line="8" pos:column="19"/></name></type> <name pos:line="8" pos:column="20">read_batch<pos:position pos:line="8" pos:column="30"/></name></decl>;<pos:position pos:line="8" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><specifier pos:line="9" pos:column="9">extern<pos:position pos:line="9" pos:column="15"/></specifier> <type><name><name pos:line="9" pos:column="16">struct<pos:position pos:line="9" pos:column="22"/></name> <name pos:line="9" pos:column="23">file_list<pos:position pos:line="9" pos:column="32"/></name></name> <modifier pos:line="9" pos:column="33">*<pos:position pos:line="9" pos:column="34"/></modifier></type><name pos:line="9" pos:column="34">batch_flist<pos:position pos:line="9" pos:column="45"/></name></decl>;<pos:position pos:line="9" pos:column="46"/></decl_stmt>

	<expr_stmt><expr><name pos:line="11" pos:column="9">cleanup_child_pid<pos:position pos:line="11" pos:column="26"/></name> <operator pos:line="11" pos:column="27">=<pos:position pos:line="11" pos:column="28"/></operator> <name pos:line="11" pos:column="29">pid<pos:position pos:line="11" pos:column="32"/></name></expr>;<pos:position pos:line="11" pos:column="33"/></expr_stmt>
	<if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><name pos:line="12" pos:column="13">read_batch<pos:position pos:line="12" pos:column="23"/></name></expr>)<pos:position pos:line="12" pos:column="24"/></condition><then pos:line="12" pos:column="24">
		<block type="pseudo"><expr_stmt><expr><name pos:line="13" pos:column="17">flist<pos:position pos:line="13" pos:column="22"/></name> <operator pos:line="13" pos:column="23">=<pos:position pos:line="13" pos:column="24"/></operator> <name pos:line="13" pos:column="25">batch_flist<pos:position pos:line="13" pos:column="36"/></name></expr>;<pos:position pos:line="13" pos:column="37"/></expr_stmt></block></then></if>

	<expr_stmt><expr><call><name pos:line="15" pos:column="9">set_nonblocking<pos:position pos:line="15" pos:column="24"/></name><argument_list pos:line="15" pos:column="24">(<argument><expr><name pos:line="15" pos:column="25">f_in<pos:position pos:line="15" pos:column="29"/></name></expr></argument>)<pos:position pos:line="15" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="31"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="16" pos:column="9">set_nonblocking<pos:position pos:line="16" pos:column="24"/></name><argument_list pos:line="16" pos:column="24">(<argument><expr><name pos:line="16" pos:column="25">f_out<pos:position pos:line="16" pos:column="30"/></name></expr></argument>)<pos:position pos:line="16" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="32"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="18" pos:column="9">setup_protocol<pos:position pos:line="18" pos:column="23"/></name><argument_list pos:line="18" pos:column="23">(<argument><expr><name pos:line="18" pos:column="24">f_out<pos:position pos:line="18" pos:column="29"/></name></expr></argument>,<argument><expr><name pos:line="18" pos:column="30">f_in<pos:position pos:line="18" pos:column="34"/></name></expr></argument>)<pos:position pos:line="18" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="36"/></expr_stmt>

	<if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><name pos:line="20" pos:column="13">protocol_version<pos:position pos:line="20" pos:column="29"/></name> <operator pos:line="20" pos:column="30">&gt;=<pos:position pos:line="20" pos:column="35"/></operator> <literal type="number" pos:line="20" pos:column="33">23<pos:position pos:line="20" pos:column="35"/></literal></expr>)<pos:position pos:line="20" pos:column="36"/></condition><then pos:line="20" pos:column="36">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="21" pos:column="17">io_start_multiplex_in<pos:position pos:line="21" pos:column="38"/></name><argument_list pos:line="21" pos:column="38">(<argument><expr><name pos:line="21" pos:column="39">f_in<pos:position pos:line="21" pos:column="43"/></name></expr></argument>)<pos:position pos:line="21" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="45"/></expr_stmt></block></then></if>

	<if pos:line="23" pos:column="9">if <condition pos:line="23" pos:column="12">(<expr><name pos:line="23" pos:column="13">am_sender<pos:position pos:line="23" pos:column="22"/></name></expr>)<pos:position pos:line="23" pos:column="23"/></condition><then pos:line="23" pos:column="23"> <block pos:line="23" pos:column="24">{
		<decl_stmt><decl><specifier pos:line="24" pos:column="17">extern<pos:position pos:line="24" pos:column="23"/></specifier> <type><name pos:line="24" pos:column="24">int<pos:position pos:line="24" pos:column="27"/></name></type> <name pos:line="24" pos:column="28">cvs_exclude<pos:position pos:line="24" pos:column="39"/></name></decl>;<pos:position pos:line="24" pos:column="40"/></decl_stmt>
		<decl_stmt><decl><specifier pos:line="25" pos:column="17">extern<pos:position pos:line="25" pos:column="23"/></specifier> <type><name pos:line="25" pos:column="24">int<pos:position pos:line="25" pos:column="27"/></name></type> <name pos:line="25" pos:column="28">delete_mode<pos:position pos:line="25" pos:column="39"/></name></decl>;<pos:position pos:line="25" pos:column="40"/></decl_stmt>
		<decl_stmt><decl><specifier pos:line="26" pos:column="17">extern<pos:position pos:line="26" pos:column="23"/></specifier> <type><name pos:line="26" pos:column="24">int<pos:position pos:line="26" pos:column="27"/></name></type> <name pos:line="26" pos:column="28">delete_excluded<pos:position pos:line="26" pos:column="43"/></name></decl>;<pos:position pos:line="26" pos:column="44"/></decl_stmt>
		<if pos:line="27" pos:column="17">if <condition pos:line="27" pos:column="20">(<expr><name pos:line="27" pos:column="21">cvs_exclude<pos:position pos:line="27" pos:column="32"/></name></expr>)<pos:position pos:line="27" pos:column="33"/></condition><then pos:line="27" pos:column="33">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="28" pos:column="25">add_cvs_excludes<pos:position pos:line="28" pos:column="41"/></name><argument_list pos:line="28" pos:column="41">()<pos:position pos:line="28" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="44"/></expr_stmt></block></then></if>
		<if pos:line="29" pos:column="17">if <condition pos:line="29" pos:column="20">(<expr><name pos:line="29" pos:column="21">delete_mode<pos:position pos:line="29" pos:column="32"/></name> <operator pos:line="29" pos:column="33">&amp;&amp;<pos:position pos:line="29" pos:column="43"/></operator> <operator pos:line="29" pos:column="36">!<pos:position pos:line="29" pos:column="37"/></operator><name pos:line="29" pos:column="37">delete_excluded<pos:position pos:line="29" pos:column="52"/></name></expr>)<pos:position pos:line="29" pos:column="53"/></condition><then pos:line="29" pos:column="53">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="30" pos:column="25">send_exclude_list<pos:position pos:line="30" pos:column="42"/></name><argument_list pos:line="30" pos:column="42">(<argument><expr><name pos:line="30" pos:column="43">f_out<pos:position pos:line="30" pos:column="48"/></name></expr></argument>)<pos:position pos:line="30" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="50"/></expr_stmt></block></then></if>
		<if pos:line="31" pos:column="17">if <condition pos:line="31" pos:column="20">(<expr><name pos:line="31" pos:column="21">remote_filesfrom_file<pos:position pos:line="31" pos:column="42"/></name></expr>)<pos:position pos:line="31" pos:column="43"/></condition><then pos:line="31" pos:column="43">
			<block type="pseudo"><expr_stmt><expr><name pos:line="32" pos:column="25">filesfrom_fd<pos:position pos:line="32" pos:column="37"/></name> <operator pos:line="32" pos:column="38">=<pos:position pos:line="32" pos:column="39"/></operator> <name pos:line="32" pos:column="40">f_in<pos:position pos:line="32" pos:column="44"/></name></expr>;<pos:position pos:line="32" pos:column="45"/></expr_stmt></block></then></if>
		<if pos:line="33" pos:column="17">if <condition pos:line="33" pos:column="20">(<expr><operator pos:line="33" pos:column="21">!<pos:position pos:line="33" pos:column="22"/></operator><name pos:line="33" pos:column="22">read_batch<pos:position pos:line="33" pos:column="32"/></name></expr>)<pos:position pos:line="33" pos:column="33"/></condition><then pos:line="33" pos:column="33"> <comment type="block" pos:line="33" pos:column="34">/*  dw -- don't write to pipe */</comment>
			<block type="pseudo"><expr_stmt><expr><name pos:line="34" pos:column="25">flist<pos:position pos:line="34" pos:column="30"/></name> <operator pos:line="34" pos:column="31">=<pos:position pos:line="34" pos:column="32"/></operator> <call><name pos:line="34" pos:column="33">send_file_list<pos:position pos:line="34" pos:column="47"/></name><argument_list pos:line="34" pos:column="47">(<argument><expr><name pos:line="34" pos:column="48">f_out<pos:position pos:line="34" pos:column="53"/></name></expr></argument>,<argument><expr><name pos:line="34" pos:column="54">argc<pos:position pos:line="34" pos:column="58"/></name></expr></argument>,<argument><expr><name pos:line="34" pos:column="59">argv<pos:position pos:line="34" pos:column="63"/></name></expr></argument>)<pos:position pos:line="34" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="65"/></expr_stmt></block></then></if>
		<if pos:line="35" pos:column="17">if <condition pos:line="35" pos:column="20">(<expr><name pos:line="35" pos:column="21">verbose<pos:position pos:line="35" pos:column="28"/></name> <operator pos:line="35" pos:column="29">&gt;<pos:position pos:line="35" pos:column="33"/></operator> <literal type="number" pos:line="35" pos:column="31">3<pos:position pos:line="35" pos:column="32"/></literal></expr>)<pos:position pos:line="35" pos:column="33"/></condition><then pos:line="35" pos:column="33">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="36" pos:column="25">rprintf<pos:position pos:line="36" pos:column="32"/></name><argument_list pos:line="36" pos:column="32">(<argument><expr><name pos:line="36" pos:column="33">FINFO<pos:position pos:line="36" pos:column="38"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="36" pos:column="39">"file list sent\n"<pos:position pos:line="36" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="59"/></expr_stmt></block></then></if>

		<expr_stmt><expr><call><name pos:line="38" pos:column="17">send_files<pos:position pos:line="38" pos:column="27"/></name><argument_list pos:line="38" pos:column="27">(<argument><expr><name pos:line="38" pos:column="28">flist<pos:position pos:line="38" pos:column="33"/></name></expr></argument>,<argument><expr><name pos:line="38" pos:column="34">f_out<pos:position pos:line="38" pos:column="39"/></name></expr></argument>,<argument><expr><name pos:line="38" pos:column="40">f_in<pos:position pos:line="38" pos:column="44"/></name></expr></argument>)<pos:position pos:line="38" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="46"/></expr_stmt>
		<if pos:line="39" pos:column="17">if <condition pos:line="39" pos:column="20">(<expr><name pos:line="39" pos:column="21">protocol_version<pos:position pos:line="39" pos:column="37"/></name> <operator pos:line="39" pos:column="38">&gt;=<pos:position pos:line="39" pos:column="43"/></operator> <literal type="number" pos:line="39" pos:column="41">24<pos:position pos:line="39" pos:column="43"/></literal></expr>)<pos:position pos:line="39" pos:column="44"/></condition><then pos:line="39" pos:column="44"> <block pos:line="39" pos:column="45">{
			<comment type="block" pos:line="40" pos:column="25">/* final goodbye message */</comment>
			<expr_stmt><expr><call><name pos:line="41" pos:column="25">read_int<pos:position pos:line="41" pos:column="33"/></name><argument_list pos:line="41" pos:column="33">(<argument><expr><name pos:line="41" pos:column="34">f_in<pos:position pos:line="41" pos:column="38"/></name></expr></argument>)<pos:position pos:line="41" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="40"/></expr_stmt>
		}<pos:position pos:line="42" pos:column="18"/></block></then></if>
		<if pos:line="43" pos:column="17">if <condition pos:line="43" pos:column="20">(<expr><name pos:line="43" pos:column="21">pid<pos:position pos:line="43" pos:column="24"/></name> <operator pos:line="43" pos:column="25">!=<pos:position pos:line="43" pos:column="27"/></operator> <operator pos:line="43" pos:column="28">-<pos:position pos:line="43" pos:column="29"/></operator><literal type="number" pos:line="43" pos:column="29">1<pos:position pos:line="43" pos:column="30"/></literal></expr>)<pos:position pos:line="43" pos:column="31"/></condition><then pos:line="43" pos:column="31"> <block pos:line="43" pos:column="32">{
			<if pos:line="44" pos:column="25">if <condition pos:line="44" pos:column="28">(<expr><name pos:line="44" pos:column="29">verbose<pos:position pos:line="44" pos:column="36"/></name> <operator pos:line="44" pos:column="37">&gt;<pos:position pos:line="44" pos:column="41"/></operator> <literal type="number" pos:line="44" pos:column="39">3<pos:position pos:line="44" pos:column="40"/></literal></expr>)<pos:position pos:line="44" pos:column="41"/></condition><then pos:line="44" pos:column="41">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="45" pos:column="33">rprintf<pos:position pos:line="45" pos:column="40"/></name><argument_list pos:line="45" pos:column="40">(<argument><expr><name pos:line="45" pos:column="41">FINFO<pos:position pos:line="45" pos:column="46"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="45" pos:column="47">"client_run waiting on %d\n"<pos:position pos:line="45" pos:column="75"/></literal></expr></argument>, <argument><expr><operator pos:line="45" pos:column="77">(<pos:position pos:line="45" pos:column="78"/></operator><name pos:line="45" pos:column="78">int<pos:position pos:line="45" pos:column="81"/></name><operator pos:line="45" pos:column="81">)<pos:position pos:line="45" pos:column="82"/></operator> <name pos:line="45" pos:column="83">pid<pos:position pos:line="45" pos:column="86"/></name></expr></argument>)<pos:position pos:line="45" pos:column="87"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="88"/></expr_stmt></block></then></if>
			<expr_stmt><expr><call><name pos:line="46" pos:column="25">io_flush<pos:position pos:line="46" pos:column="33"/></name><argument_list pos:line="46" pos:column="33">()<pos:position pos:line="46" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="36"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="47" pos:column="25">wait_process<pos:position pos:line="47" pos:column="37"/></name><argument_list pos:line="47" pos:column="37">(<argument><expr><name pos:line="47" pos:column="38">pid<pos:position pos:line="47" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="47" pos:column="43">&amp;<pos:position pos:line="47" pos:column="48"/></operator><name pos:line="47" pos:column="44">status<pos:position pos:line="47" pos:column="50"/></name></expr></argument>)<pos:position pos:line="47" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="52"/></expr_stmt>
		}<pos:position pos:line="48" pos:column="18"/></block></then></if>
		<expr_stmt><expr><call><name pos:line="49" pos:column="17">report<pos:position pos:line="49" pos:column="23"/></name><argument_list pos:line="49" pos:column="23">(<argument><expr><operator pos:line="49" pos:column="24">-<pos:position pos:line="49" pos:column="25"/></operator><literal type="number" pos:line="49" pos:column="25">1<pos:position pos:line="49" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="49" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="28"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="50" pos:column="17">exit_cleanup<pos:position pos:line="50" pos:column="29"/></name><argument_list pos:line="50" pos:column="29">(<argument><expr><name pos:line="50" pos:column="30">status<pos:position pos:line="50" pos:column="36"/></name></expr></argument>)<pos:position pos:line="50" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="38"/></expr_stmt>
	}<pos:position pos:line="51" pos:column="10"/></block></then></if>

	<if pos:line="53" pos:column="9">if <condition pos:line="53" pos:column="12">(<expr><name pos:line="53" pos:column="13">argc<pos:position pos:line="53" pos:column="17"/></name> <operator pos:line="53" pos:column="18">==<pos:position pos:line="53" pos:column="20"/></operator> <literal type="number" pos:line="53" pos:column="21">0<pos:position pos:line="53" pos:column="22"/></literal></expr>)<pos:position pos:line="53" pos:column="23"/></condition><then pos:line="53" pos:column="23"> <block pos:line="53" pos:column="24">{
		<decl_stmt><decl><specifier pos:line="54" pos:column="17">extern<pos:position pos:line="54" pos:column="23"/></specifier> <type><name pos:line="54" pos:column="24">int<pos:position pos:line="54" pos:column="27"/></name></type> <name pos:line="54" pos:column="28">list_only<pos:position pos:line="54" pos:column="37"/></name></decl>;<pos:position pos:line="54" pos:column="38"/></decl_stmt>
		<expr_stmt><expr><name pos:line="55" pos:column="17">list_only<pos:position pos:line="55" pos:column="26"/></name> <operator pos:line="55" pos:column="27">=<pos:position pos:line="55" pos:column="28"/></operator> <literal type="number" pos:line="55" pos:column="29">1<pos:position pos:line="55" pos:column="30"/></literal></expr>;<pos:position pos:line="55" pos:column="31"/></expr_stmt>
	}<pos:position pos:line="56" pos:column="10"/></block></then></if>

	<if pos:line="58" pos:column="9">if <condition pos:line="58" pos:column="12">(<expr><operator pos:line="58" pos:column="13">!<pos:position pos:line="58" pos:column="14"/></operator><name pos:line="58" pos:column="14">write_batch<pos:position pos:line="58" pos:column="25"/></name></expr>)<pos:position pos:line="58" pos:column="26"/></condition><then pos:line="58" pos:column="26">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="59" pos:column="17">send_exclude_list<pos:position pos:line="59" pos:column="34"/></name><argument_list pos:line="59" pos:column="34">(<argument><expr><name pos:line="59" pos:column="35">f_out<pos:position pos:line="59" pos:column="40"/></name></expr></argument>)<pos:position pos:line="59" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="42"/></expr_stmt></block></then></if>

	<if pos:line="61" pos:column="9">if <condition pos:line="61" pos:column="12">(<expr><name pos:line="61" pos:column="13">filesfrom_fd<pos:position pos:line="61" pos:column="25"/></name> <operator pos:line="61" pos:column="26">&gt;=<pos:position pos:line="61" pos:column="31"/></operator> <literal type="number" pos:line="61" pos:column="29">0<pos:position pos:line="61" pos:column="30"/></literal></expr>)<pos:position pos:line="61" pos:column="31"/></condition><then pos:line="61" pos:column="31"> <block pos:line="61" pos:column="32">{
		<expr_stmt><expr><call><name pos:line="62" pos:column="17">io_set_filesfrom_fds<pos:position pos:line="62" pos:column="37"/></name><argument_list pos:line="62" pos:column="37">(<argument><expr><name pos:line="62" pos:column="38">filesfrom_fd<pos:position pos:line="62" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="52">f_out<pos:position pos:line="62" pos:column="57"/></name></expr></argument>)<pos:position pos:line="62" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="59"/></expr_stmt>
		<expr_stmt><expr><name pos:line="63" pos:column="17">filesfrom_fd<pos:position pos:line="63" pos:column="29"/></name> <operator pos:line="63" pos:column="30">=<pos:position pos:line="63" pos:column="31"/></operator> <operator pos:line="63" pos:column="32">-<pos:position pos:line="63" pos:column="33"/></operator><literal type="number" pos:line="63" pos:column="33">1<pos:position pos:line="63" pos:column="34"/></literal></expr>;<pos:position pos:line="63" pos:column="35"/></expr_stmt>
	}<pos:position pos:line="64" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="66" pos:column="9">flist<pos:position pos:line="66" pos:column="14"/></name> <operator pos:line="66" pos:column="15">=<pos:position pos:line="66" pos:column="16"/></operator> <call><name pos:line="66" pos:column="17">recv_file_list<pos:position pos:line="66" pos:column="31"/></name><argument_list pos:line="66" pos:column="31">(<argument><expr><name pos:line="66" pos:column="32">f_in<pos:position pos:line="66" pos:column="36"/></name></expr></argument>)<pos:position pos:line="66" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="38"/></expr_stmt>
	<if pos:line="67" pos:column="9">if <condition pos:line="67" pos:column="12">(<expr><operator pos:line="67" pos:column="13">!<pos:position pos:line="67" pos:column="14"/></operator><name pos:line="67" pos:column="14">flist<pos:position pos:line="67" pos:column="19"/></name> <operator pos:line="67" pos:column="20">||<pos:position pos:line="67" pos:column="22"/></operator> <name><name pos:line="67" pos:column="23">flist<pos:position pos:line="67" pos:column="28"/></name><operator pos:line="67" pos:column="28">-&gt;<pos:position pos:line="67" pos:column="33"/></operator><name pos:line="67" pos:column="30">count<pos:position pos:line="67" pos:column="35"/></name></name> <operator pos:line="67" pos:column="36">==<pos:position pos:line="67" pos:column="38"/></operator> <literal type="number" pos:line="67" pos:column="39">0<pos:position pos:line="67" pos:column="40"/></literal></expr>)<pos:position pos:line="67" pos:column="41"/></condition><then pos:line="67" pos:column="41"> <block pos:line="67" pos:column="42">{
		<expr_stmt><expr><call><name pos:line="68" pos:column="17">rprintf<pos:position pos:line="68" pos:column="24"/></name><argument_list pos:line="68" pos:column="24">(<argument><expr><name pos:line="68" pos:column="25">FINFO<pos:position pos:line="68" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="68" pos:column="32">"client: nothing to do: "<pos:position pos:line="68" pos:column="57"/></literal>
			<literal type="string" pos:line="69" pos:column="25">"perhaps you need to specify some filenames or "<pos:position pos:line="69" pos:column="73"/></literal>
			<literal type="string" pos:line="70" pos:column="25">"the --recursive option?\n"<pos:position pos:line="70" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="70" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="54"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="71" pos:column="17">exit_cleanup<pos:position pos:line="71" pos:column="29"/></name><argument_list pos:line="71" pos:column="29">(<argument><expr><literal type="number" pos:line="71" pos:column="30">0<pos:position pos:line="71" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="71" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="33"/></expr_stmt>
	}<pos:position pos:line="72" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="74" pos:column="9">local_name<pos:position pos:line="74" pos:column="19"/></name> <operator pos:line="74" pos:column="20">=<pos:position pos:line="74" pos:column="21"/></operator> <call><name pos:line="74" pos:column="22">get_local_name<pos:position pos:line="74" pos:column="36"/></name><argument_list pos:line="74" pos:column="36">(<argument><expr><name pos:line="74" pos:column="37">flist<pos:position pos:line="74" pos:column="42"/></name></expr></argument>,<argument><expr><name><name pos:line="74" pos:column="43">argv<pos:position pos:line="74" pos:column="47"/></name><index pos:line="74" pos:column="47">[<expr><literal type="number" pos:line="74" pos:column="48">0<pos:position pos:line="74" pos:column="49"/></literal></expr>]<pos:position pos:line="74" pos:column="50"/></index></name></expr></argument>)<pos:position pos:line="74" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="52"/></expr_stmt>

	<expr_stmt><expr><name pos:line="76" pos:column="9">status2<pos:position pos:line="76" pos:column="16"/></name> <operator pos:line="76" pos:column="17">=<pos:position pos:line="76" pos:column="18"/></operator> <call><name pos:line="76" pos:column="19">do_recv<pos:position pos:line="76" pos:column="26"/></name><argument_list pos:line="76" pos:column="26">(<argument><expr><name pos:line="76" pos:column="27">f_in<pos:position pos:line="76" pos:column="31"/></name></expr></argument>,<argument><expr><name pos:line="76" pos:column="32">f_out<pos:position pos:line="76" pos:column="37"/></name></expr></argument>,<argument><expr><name pos:line="76" pos:column="38">flist<pos:position pos:line="76" pos:column="43"/></name></expr></argument>,<argument><expr><name pos:line="76" pos:column="44">local_name<pos:position pos:line="76" pos:column="54"/></name></expr></argument>)<pos:position pos:line="76" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="56"/></expr_stmt>

	<if pos:line="78" pos:column="9">if <condition pos:line="78" pos:column="12">(<expr><name pos:line="78" pos:column="13">pid<pos:position pos:line="78" pos:column="16"/></name> <operator pos:line="78" pos:column="17">!=<pos:position pos:line="78" pos:column="19"/></operator> <operator pos:line="78" pos:column="20">-<pos:position pos:line="78" pos:column="21"/></operator><literal type="number" pos:line="78" pos:column="21">1<pos:position pos:line="78" pos:column="22"/></literal></expr>)<pos:position pos:line="78" pos:column="23"/></condition><then pos:line="78" pos:column="23"> <block pos:line="78" pos:column="24">{
		<if pos:line="79" pos:column="17">if <condition pos:line="79" pos:column="20">(<expr><name pos:line="79" pos:column="21">verbose<pos:position pos:line="79" pos:column="28"/></name> <operator pos:line="79" pos:column="29">&gt;<pos:position pos:line="79" pos:column="33"/></operator> <literal type="number" pos:line="79" pos:column="31">3<pos:position pos:line="79" pos:column="32"/></literal></expr>)<pos:position pos:line="79" pos:column="33"/></condition><then pos:line="79" pos:column="33">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="80" pos:column="25">rprintf<pos:position pos:line="80" pos:column="32"/></name><argument_list pos:line="80" pos:column="32">(<argument><expr><name pos:line="80" pos:column="33">FINFO<pos:position pos:line="80" pos:column="38"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="80" pos:column="39">"client_run2 waiting on %d\n"<pos:position pos:line="80" pos:column="68"/></literal></expr></argument>, <argument><expr><operator pos:line="80" pos:column="70">(<pos:position pos:line="80" pos:column="71"/></operator><name pos:line="80" pos:column="71">int<pos:position pos:line="80" pos:column="74"/></name><operator pos:line="80" pos:column="74">)<pos:position pos:line="80" pos:column="75"/></operator> <name pos:line="80" pos:column="76">pid<pos:position pos:line="80" pos:column="79"/></name></expr></argument>)<pos:position pos:line="80" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="81"/></expr_stmt></block></then></if>
		<expr_stmt><expr><call><name pos:line="81" pos:column="17">io_flush<pos:position pos:line="81" pos:column="25"/></name><argument_list pos:line="81" pos:column="25">()<pos:position pos:line="81" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="28"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="82" pos:column="17">wait_process<pos:position pos:line="82" pos:column="29"/></name><argument_list pos:line="82" pos:column="29">(<argument><expr><name pos:line="82" pos:column="30">pid<pos:position pos:line="82" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="82" pos:column="35">&amp;<pos:position pos:line="82" pos:column="40"/></operator><name pos:line="82" pos:column="36">status<pos:position pos:line="82" pos:column="42"/></name></expr></argument>)<pos:position pos:line="82" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="44"/></expr_stmt>
	}<pos:position pos:line="83" pos:column="10"/></block></then></if>

	<return pos:line="85" pos:column="9">return <expr><call><name pos:line="85" pos:column="16">MAX<pos:position pos:line="85" pos:column="19"/></name><argument_list pos:line="85" pos:column="19">(<argument><expr><name pos:line="85" pos:column="20">status<pos:position pos:line="85" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="85" pos:column="28">status2<pos:position pos:line="85" pos:column="35"/></name></expr></argument>)<pos:position pos:line="85" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="37"/></return>
}<pos:position pos:line="86" pos:column="2"/></block></function></unit>
