<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_601_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">gen_trees_header<pos:position pos:line="1" pos:column="22"/></name><parameter_list pos:line="1" pos:column="22">()<pos:position pos:line="1" pos:column="24"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">FILE<pos:position pos:line="3" pos:column="9"/></name> <modifier pos:line="3" pos:column="10">*<pos:position pos:line="3" pos:column="11"/></modifier></type><name pos:line="3" pos:column="11">header<pos:position pos:line="3" pos:column="17"/></name> <init pos:line="3" pos:column="18">= <expr><call><name pos:line="3" pos:column="20">fopen<pos:position pos:line="3" pos:column="25"/></name><argument_list pos:line="3" pos:column="25">(<argument><expr><literal type="string" pos:line="3" pos:column="26">"trees.h"<pos:position pos:line="3" pos:column="35"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="3" pos:column="37">"w"<pos:position pos:line="3" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="3" pos:column="41"/></argument_list></call></expr></init></decl>;<pos:position pos:line="3" pos:column="42"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">int<pos:position pos:line="4" pos:column="8"/></name></type> <name pos:line="4" pos:column="9">i<pos:position pos:line="4" pos:column="10"/></name></decl>;<pos:position pos:line="4" pos:column="11"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="6" pos:column="5">Assert<pos:position pos:line="6" pos:column="11"/></name> <argument_list pos:line="6" pos:column="12">(<argument><expr><name pos:line="6" pos:column="13">header<pos:position pos:line="6" pos:column="19"/></name> <operator pos:line="6" pos:column="20">!=<pos:position pos:line="6" pos:column="22"/></operator> <name pos:line="6" pos:column="23">NULL<pos:position pos:line="6" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="6" pos:column="29">"Can't open trees.h"<pos:position pos:line="6" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="51"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="7" pos:column="5">fprintf<pos:position pos:line="7" pos:column="12"/></name><argument_list pos:line="7" pos:column="12">(<argument><expr><name pos:line="7" pos:column="13">header<pos:position pos:line="7" pos:column="19"/></name></expr></argument>,
            <argument><expr><literal type="string" pos:line="8" pos:column="13">"/* header created automatically with -DGEN_TREES_H */\n\n"<pos:position pos:line="8" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="74"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="10" pos:column="5">fprintf<pos:position pos:line="10" pos:column="12"/></name><argument_list pos:line="10" pos:column="12">(<argument><expr><name pos:line="10" pos:column="13">header<pos:position pos:line="10" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="10" pos:column="21">"local const ct_data static_ltree[L_CODES+2] = {\n"<pos:position pos:line="10" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="74"/></expr_stmt>
    <for pos:line="11" pos:column="5">for <control pos:line="11" pos:column="9">(<init><expr><name pos:line="11" pos:column="10">i<pos:position pos:line="11" pos:column="11"/></name> <operator pos:line="11" pos:column="12">=<pos:position pos:line="11" pos:column="13"/></operator> <literal type="number" pos:line="11" pos:column="14">0<pos:position pos:line="11" pos:column="15"/></literal></expr>;<pos:position pos:line="11" pos:column="16"/></init> <condition><expr><name pos:line="11" pos:column="17">i<pos:position pos:line="11" pos:column="18"/></name> <operator pos:line="11" pos:column="19">&lt;<pos:position pos:line="11" pos:column="23"/></operator> <name pos:line="11" pos:column="21">L_CODES<pos:position pos:line="11" pos:column="28"/></name><operator pos:line="11" pos:column="28">+<pos:position pos:line="11" pos:column="29"/></operator><literal type="number" pos:line="11" pos:column="29">2<pos:position pos:line="11" pos:column="30"/></literal></expr>;<pos:position pos:line="11" pos:column="31"/></condition> <incr><expr><name pos:line="11" pos:column="32">i<pos:position pos:line="11" pos:column="33"/></name><operator pos:line="11" pos:column="33">++<pos:position pos:line="11" pos:column="35"/></operator></expr></incr>)<pos:position pos:line="11" pos:column="36"/></control> <block pos:line="11" pos:column="37">{
        <expr_stmt><expr><call><name pos:line="12" pos:column="9">fprintf<pos:position pos:line="12" pos:column="16"/></name><argument_list pos:line="12" pos:column="16">(<argument><expr><name pos:line="12" pos:column="17">header<pos:position pos:line="12" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="12" pos:column="25">"{{%3u},{%3u}}%s"<pos:position pos:line="12" pos:column="42"/></literal></expr></argument>, <argument><expr><name><name pos:line="12" pos:column="44">static_ltree<pos:position pos:line="12" pos:column="56"/></name><index pos:line="12" pos:column="56">[<expr><name pos:line="12" pos:column="57">i<pos:position pos:line="12" pos:column="58"/></name></expr>]<pos:position pos:line="12" pos:column="59"/></index></name><operator pos:line="12" pos:column="59">.<pos:position pos:line="12" pos:column="60"/></operator><name pos:line="12" pos:column="60">Code<pos:position pos:line="12" pos:column="64"/></name></expr></argument>,
                <argument><expr><name><name pos:line="13" pos:column="17">static_ltree<pos:position pos:line="13" pos:column="29"/></name><index pos:line="13" pos:column="29">[<expr><name pos:line="13" pos:column="30">i<pos:position pos:line="13" pos:column="31"/></name></expr>]<pos:position pos:line="13" pos:column="32"/></index></name><operator pos:line="13" pos:column="32">.<pos:position pos:line="13" pos:column="33"/></operator><name pos:line="13" pos:column="33">Len<pos:position pos:line="13" pos:column="36"/></name></expr></argument>, <argument><expr><call><name pos:line="13" pos:column="38">SEPARATOR<pos:position pos:line="13" pos:column="47"/></name><argument_list pos:line="13" pos:column="47">(<argument><expr><name pos:line="13" pos:column="48">i<pos:position pos:line="13" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="51">L_CODES<pos:position pos:line="13" pos:column="58"/></name><operator pos:line="13" pos:column="58">+<pos:position pos:line="13" pos:column="59"/></operator><literal type="number" pos:line="13" pos:column="59">1<pos:position pos:line="13" pos:column="60"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="13" pos:column="62">5<pos:position pos:line="13" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="64"/></argument_list></call></expr></argument>)<pos:position pos:line="13" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="66"/></expr_stmt>
    }<pos:position pos:line="14" pos:column="6"/></block></for>

    <expr_stmt><expr><call><name pos:line="16" pos:column="5">fprintf<pos:position pos:line="16" pos:column="12"/></name><argument_list pos:line="16" pos:column="12">(<argument><expr><name pos:line="16" pos:column="13">header<pos:position pos:line="16" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="21">"local const ct_data static_dtree[D_CODES] = {\n"<pos:position pos:line="16" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="72"/></expr_stmt>
    <for pos:line="17" pos:column="5">for <control pos:line="17" pos:column="9">(<init><expr><name pos:line="17" pos:column="10">i<pos:position pos:line="17" pos:column="11"/></name> <operator pos:line="17" pos:column="12">=<pos:position pos:line="17" pos:column="13"/></operator> <literal type="number" pos:line="17" pos:column="14">0<pos:position pos:line="17" pos:column="15"/></literal></expr>;<pos:position pos:line="17" pos:column="16"/></init> <condition><expr><name pos:line="17" pos:column="17">i<pos:position pos:line="17" pos:column="18"/></name> <operator pos:line="17" pos:column="19">&lt;<pos:position pos:line="17" pos:column="23"/></operator> <name pos:line="17" pos:column="21">D_CODES<pos:position pos:line="17" pos:column="28"/></name></expr>;<pos:position pos:line="17" pos:column="29"/></condition> <incr><expr><name pos:line="17" pos:column="30">i<pos:position pos:line="17" pos:column="31"/></name><operator pos:line="17" pos:column="31">++<pos:position pos:line="17" pos:column="33"/></operator></expr></incr>)<pos:position pos:line="17" pos:column="34"/></control> <block pos:line="17" pos:column="35">{
        <expr_stmt><expr><call><name pos:line="18" pos:column="9">fprintf<pos:position pos:line="18" pos:column="16"/></name><argument_list pos:line="18" pos:column="16">(<argument><expr><name pos:line="18" pos:column="17">header<pos:position pos:line="18" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="18" pos:column="25">"{{%2u},{%2u}}%s"<pos:position pos:line="18" pos:column="42"/></literal></expr></argument>, <argument><expr><name><name pos:line="18" pos:column="44">static_dtree<pos:position pos:line="18" pos:column="56"/></name><index pos:line="18" pos:column="56">[<expr><name pos:line="18" pos:column="57">i<pos:position pos:line="18" pos:column="58"/></name></expr>]<pos:position pos:line="18" pos:column="59"/></index></name><operator pos:line="18" pos:column="59">.<pos:position pos:line="18" pos:column="60"/></operator><name pos:line="18" pos:column="60">Code<pos:position pos:line="18" pos:column="64"/></name></expr></argument>,
                <argument><expr><name><name pos:line="19" pos:column="17">static_dtree<pos:position pos:line="19" pos:column="29"/></name><index pos:line="19" pos:column="29">[<expr><name pos:line="19" pos:column="30">i<pos:position pos:line="19" pos:column="31"/></name></expr>]<pos:position pos:line="19" pos:column="32"/></index></name><operator pos:line="19" pos:column="32">.<pos:position pos:line="19" pos:column="33"/></operator><name pos:line="19" pos:column="33">Len<pos:position pos:line="19" pos:column="36"/></name></expr></argument>, <argument><expr><call><name pos:line="19" pos:column="38">SEPARATOR<pos:position pos:line="19" pos:column="47"/></name><argument_list pos:line="19" pos:column="47">(<argument><expr><name pos:line="19" pos:column="48">i<pos:position pos:line="19" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="51">D_CODES<pos:position pos:line="19" pos:column="58"/></name><operator pos:line="19" pos:column="58">-<pos:position pos:line="19" pos:column="59"/></operator><literal type="number" pos:line="19" pos:column="59">1<pos:position pos:line="19" pos:column="60"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="19" pos:column="62">5<pos:position pos:line="19" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="64"/></argument_list></call></expr></argument>)<pos:position pos:line="19" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="66"/></expr_stmt>
    }<pos:position pos:line="20" pos:column="6"/></block></for>

    <expr_stmt><expr><call><name pos:line="22" pos:column="5">fprintf<pos:position pos:line="22" pos:column="12"/></name><argument_list pos:line="22" pos:column="12">(<argument><expr><name pos:line="22" pos:column="13">header<pos:position pos:line="22" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="22" pos:column="21">"const uch ZLIB_INTERNAL _dist_code[DIST_CODE_LEN] = {\n"<pos:position pos:line="22" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="80"/></expr_stmt>
    <for pos:line="23" pos:column="5">for <control pos:line="23" pos:column="9">(<init><expr><name pos:line="23" pos:column="10">i<pos:position pos:line="23" pos:column="11"/></name> <operator pos:line="23" pos:column="12">=<pos:position pos:line="23" pos:column="13"/></operator> <literal type="number" pos:line="23" pos:column="14">0<pos:position pos:line="23" pos:column="15"/></literal></expr>;<pos:position pos:line="23" pos:column="16"/></init> <condition><expr><name pos:line="23" pos:column="17">i<pos:position pos:line="23" pos:column="18"/></name> <operator pos:line="23" pos:column="19">&lt;<pos:position pos:line="23" pos:column="23"/></operator> <name pos:line="23" pos:column="21">DIST_CODE_LEN<pos:position pos:line="23" pos:column="34"/></name></expr>;<pos:position pos:line="23" pos:column="35"/></condition> <incr><expr><name pos:line="23" pos:column="36">i<pos:position pos:line="23" pos:column="37"/></name><operator pos:line="23" pos:column="37">++<pos:position pos:line="23" pos:column="39"/></operator></expr></incr>)<pos:position pos:line="23" pos:column="40"/></control> <block pos:line="23" pos:column="41">{
        <expr_stmt><expr><call><name pos:line="24" pos:column="9">fprintf<pos:position pos:line="24" pos:column="16"/></name><argument_list pos:line="24" pos:column="16">(<argument><expr><name pos:line="24" pos:column="17">header<pos:position pos:line="24" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="24" pos:column="25">"%2u%s"<pos:position pos:line="24" pos:column="32"/></literal></expr></argument>, <argument><expr><name><name pos:line="24" pos:column="34">_dist_code<pos:position pos:line="24" pos:column="44"/></name><index pos:line="24" pos:column="44">[<expr><name pos:line="24" pos:column="45">i<pos:position pos:line="24" pos:column="46"/></name></expr>]<pos:position pos:line="24" pos:column="47"/></index></name></expr></argument>,
                <argument><expr><call><name pos:line="25" pos:column="17">SEPARATOR<pos:position pos:line="25" pos:column="26"/></name><argument_list pos:line="25" pos:column="26">(<argument><expr><name pos:line="25" pos:column="27">i<pos:position pos:line="25" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="30">DIST_CODE_LEN<pos:position pos:line="25" pos:column="43"/></name><operator pos:line="25" pos:column="43">-<pos:position pos:line="25" pos:column="44"/></operator><literal type="number" pos:line="25" pos:column="44">1<pos:position pos:line="25" pos:column="45"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="25" pos:column="47">20<pos:position pos:line="25" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="50"/></argument_list></call></expr></argument>)<pos:position pos:line="25" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="52"/></expr_stmt>
    }<pos:position pos:line="26" pos:column="6"/></block></for>

    <expr_stmt><expr><call><name pos:line="28" pos:column="5">fprintf<pos:position pos:line="28" pos:column="12"/></name><argument_list pos:line="28" pos:column="12">(<argument><expr><name pos:line="28" pos:column="13">header<pos:position pos:line="28" pos:column="19"/></name></expr></argument>,
        <argument><expr><literal type="string" pos:line="29" pos:column="9">"const uch ZLIB_INTERNAL _length_code[MAX_MATCH-MIN_MATCH+1]= {\n"<pos:position pos:line="29" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="77"/></expr_stmt>
    <for pos:line="30" pos:column="5">for <control pos:line="30" pos:column="9">(<init><expr><name pos:line="30" pos:column="10">i<pos:position pos:line="30" pos:column="11"/></name> <operator pos:line="30" pos:column="12">=<pos:position pos:line="30" pos:column="13"/></operator> <literal type="number" pos:line="30" pos:column="14">0<pos:position pos:line="30" pos:column="15"/></literal></expr>;<pos:position pos:line="30" pos:column="16"/></init> <condition><expr><name pos:line="30" pos:column="17">i<pos:position pos:line="30" pos:column="18"/></name> <operator pos:line="30" pos:column="19">&lt;<pos:position pos:line="30" pos:column="23"/></operator> <name pos:line="30" pos:column="21">MAX_MATCH<pos:position pos:line="30" pos:column="30"/></name><operator pos:line="30" pos:column="30">-<pos:position pos:line="30" pos:column="31"/></operator><name pos:line="30" pos:column="31">MIN_MATCH<pos:position pos:line="30" pos:column="40"/></name><operator pos:line="30" pos:column="40">+<pos:position pos:line="30" pos:column="41"/></operator><literal type="number" pos:line="30" pos:column="41">1<pos:position pos:line="30" pos:column="42"/></literal></expr>;<pos:position pos:line="30" pos:column="43"/></condition> <incr><expr><name pos:line="30" pos:column="44">i<pos:position pos:line="30" pos:column="45"/></name><operator pos:line="30" pos:column="45">++<pos:position pos:line="30" pos:column="47"/></operator></expr></incr>)<pos:position pos:line="30" pos:column="48"/></control> <block pos:line="30" pos:column="49">{
        <expr_stmt><expr><call><name pos:line="31" pos:column="9">fprintf<pos:position pos:line="31" pos:column="16"/></name><argument_list pos:line="31" pos:column="16">(<argument><expr><name pos:line="31" pos:column="17">header<pos:position pos:line="31" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="31" pos:column="25">"%2u%s"<pos:position pos:line="31" pos:column="32"/></literal></expr></argument>, <argument><expr><name><name pos:line="31" pos:column="34">_length_code<pos:position pos:line="31" pos:column="46"/></name><index pos:line="31" pos:column="46">[<expr><name pos:line="31" pos:column="47">i<pos:position pos:line="31" pos:column="48"/></name></expr>]<pos:position pos:line="31" pos:column="49"/></index></name></expr></argument>,
                <argument><expr><call><name pos:line="32" pos:column="17">SEPARATOR<pos:position pos:line="32" pos:column="26"/></name><argument_list pos:line="32" pos:column="26">(<argument><expr><name pos:line="32" pos:column="27">i<pos:position pos:line="32" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="30">MAX_MATCH<pos:position pos:line="32" pos:column="39"/></name><operator pos:line="32" pos:column="39">-<pos:position pos:line="32" pos:column="40"/></operator><name pos:line="32" pos:column="40">MIN_MATCH<pos:position pos:line="32" pos:column="49"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="32" pos:column="51">20<pos:position pos:line="32" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="54"/></argument_list></call></expr></argument>)<pos:position pos:line="32" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="56"/></expr_stmt>
    }<pos:position pos:line="33" pos:column="6"/></block></for>

    <expr_stmt><expr><call><name pos:line="35" pos:column="5">fprintf<pos:position pos:line="35" pos:column="12"/></name><argument_list pos:line="35" pos:column="12">(<argument><expr><name pos:line="35" pos:column="13">header<pos:position pos:line="35" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="35" pos:column="21">"local const int base_length[LENGTH_CODES] = {\n"<pos:position pos:line="35" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="72"/></expr_stmt>
    <for pos:line="36" pos:column="5">for <control pos:line="36" pos:column="9">(<init><expr><name pos:line="36" pos:column="10">i<pos:position pos:line="36" pos:column="11"/></name> <operator pos:line="36" pos:column="12">=<pos:position pos:line="36" pos:column="13"/></operator> <literal type="number" pos:line="36" pos:column="14">0<pos:position pos:line="36" pos:column="15"/></literal></expr>;<pos:position pos:line="36" pos:column="16"/></init> <condition><expr><name pos:line="36" pos:column="17">i<pos:position pos:line="36" pos:column="18"/></name> <operator pos:line="36" pos:column="19">&lt;<pos:position pos:line="36" pos:column="23"/></operator> <name pos:line="36" pos:column="21">LENGTH_CODES<pos:position pos:line="36" pos:column="33"/></name></expr>;<pos:position pos:line="36" pos:column="34"/></condition> <incr><expr><name pos:line="36" pos:column="35">i<pos:position pos:line="36" pos:column="36"/></name><operator pos:line="36" pos:column="36">++<pos:position pos:line="36" pos:column="38"/></operator></expr></incr>)<pos:position pos:line="36" pos:column="39"/></control> <block pos:line="36" pos:column="40">{
        <expr_stmt><expr><call><name pos:line="37" pos:column="9">fprintf<pos:position pos:line="37" pos:column="16"/></name><argument_list pos:line="37" pos:column="16">(<argument><expr><name pos:line="37" pos:column="17">header<pos:position pos:line="37" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="37" pos:column="25">"%1u%s"<pos:position pos:line="37" pos:column="32"/></literal></expr></argument>, <argument><expr><name><name pos:line="37" pos:column="34">base_length<pos:position pos:line="37" pos:column="45"/></name><index pos:line="37" pos:column="45">[<expr><name pos:line="37" pos:column="46">i<pos:position pos:line="37" pos:column="47"/></name></expr>]<pos:position pos:line="37" pos:column="48"/></index></name></expr></argument>,
                <argument><expr><call><name pos:line="38" pos:column="17">SEPARATOR<pos:position pos:line="38" pos:column="26"/></name><argument_list pos:line="38" pos:column="26">(<argument><expr><name pos:line="38" pos:column="27">i<pos:position pos:line="38" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="30">LENGTH_CODES<pos:position pos:line="38" pos:column="42"/></name><operator pos:line="38" pos:column="42">-<pos:position pos:line="38" pos:column="43"/></operator><literal type="number" pos:line="38" pos:column="43">1<pos:position pos:line="38" pos:column="44"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="38" pos:column="46">20<pos:position pos:line="38" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="38" pos:column="49"/></argument_list></call></expr></argument>)<pos:position pos:line="38" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="51"/></expr_stmt>
    }<pos:position pos:line="39" pos:column="6"/></block></for>

    <expr_stmt><expr><call><name pos:line="41" pos:column="5">fprintf<pos:position pos:line="41" pos:column="12"/></name><argument_list pos:line="41" pos:column="12">(<argument><expr><name pos:line="41" pos:column="13">header<pos:position pos:line="41" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="41" pos:column="21">"local const int base_dist[D_CODES] = {\n"<pos:position pos:line="41" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="65"/></expr_stmt>
    <for pos:line="42" pos:column="5">for <control pos:line="42" pos:column="9">(<init><expr><name pos:line="42" pos:column="10">i<pos:position pos:line="42" pos:column="11"/></name> <operator pos:line="42" pos:column="12">=<pos:position pos:line="42" pos:column="13"/></operator> <literal type="number" pos:line="42" pos:column="14">0<pos:position pos:line="42" pos:column="15"/></literal></expr>;<pos:position pos:line="42" pos:column="16"/></init> <condition><expr><name pos:line="42" pos:column="17">i<pos:position pos:line="42" pos:column="18"/></name> <operator pos:line="42" pos:column="19">&lt;<pos:position pos:line="42" pos:column="23"/></operator> <name pos:line="42" pos:column="21">D_CODES<pos:position pos:line="42" pos:column="28"/></name></expr>;<pos:position pos:line="42" pos:column="29"/></condition> <incr><expr><name pos:line="42" pos:column="30">i<pos:position pos:line="42" pos:column="31"/></name><operator pos:line="42" pos:column="31">++<pos:position pos:line="42" pos:column="33"/></operator></expr></incr>)<pos:position pos:line="42" pos:column="34"/></control> <block pos:line="42" pos:column="35">{
        <expr_stmt><expr><call><name pos:line="43" pos:column="9">fprintf<pos:position pos:line="43" pos:column="16"/></name><argument_list pos:line="43" pos:column="16">(<argument><expr><name pos:line="43" pos:column="17">header<pos:position pos:line="43" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="43" pos:column="25">"%5u%s"<pos:position pos:line="43" pos:column="32"/></literal></expr></argument>, <argument><expr><name><name pos:line="43" pos:column="34">base_dist<pos:position pos:line="43" pos:column="43"/></name><index pos:line="43" pos:column="43">[<expr><name pos:line="43" pos:column="44">i<pos:position pos:line="43" pos:column="45"/></name></expr>]<pos:position pos:line="43" pos:column="46"/></index></name></expr></argument>,
                <argument><expr><call><name pos:line="44" pos:column="17">SEPARATOR<pos:position pos:line="44" pos:column="26"/></name><argument_list pos:line="44" pos:column="26">(<argument><expr><name pos:line="44" pos:column="27">i<pos:position pos:line="44" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="30">D_CODES<pos:position pos:line="44" pos:column="37"/></name><operator pos:line="44" pos:column="37">-<pos:position pos:line="44" pos:column="38"/></operator><literal type="number" pos:line="44" pos:column="38">1<pos:position pos:line="44" pos:column="39"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="44" pos:column="41">10<pos:position pos:line="44" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="44"/></argument_list></call></expr></argument>)<pos:position pos:line="44" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="46"/></expr_stmt>
    }<pos:position pos:line="45" pos:column="6"/></block></for>

    <expr_stmt><expr><call><name pos:line="47" pos:column="5">fclose<pos:position pos:line="47" pos:column="11"/></name><argument_list pos:line="47" pos:column="11">(<argument><expr><name pos:line="47" pos:column="12">header<pos:position pos:line="47" pos:column="18"/></name></expr></argument>)<pos:position pos:line="47" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="20"/></expr_stmt>
}<pos:position pos:line="48" pos:column="2"/></block></function></unit>
