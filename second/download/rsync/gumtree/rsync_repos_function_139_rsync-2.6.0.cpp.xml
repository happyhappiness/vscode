<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_139_rsync-2.6.0.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">simple_send_token<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><name pos:line="1" pos:column="31">int<pos:position pos:line="1" pos:column="34"/></name></type> <name pos:line="1" pos:column="35">f<pos:position pos:line="1" pos:column="36"/></name></decl></parameter>,<parameter><decl><type><name pos:line="1" pos:column="37">int<pos:position pos:line="1" pos:column="40"/></name></type> <name pos:line="1" pos:column="41">token<pos:position pos:line="1" pos:column="46"/></name></decl></parameter>,
			      <parameter><decl><type><name><name pos:line="2" pos:column="31">struct<pos:position pos:line="2" pos:column="37"/></name> <name pos:line="2" pos:column="38">map_struct<pos:position pos:line="2" pos:column="48"/></name></name> <modifier pos:line="2" pos:column="49">*<pos:position pos:line="2" pos:column="50"/></modifier></type><name pos:line="2" pos:column="50">buf<pos:position pos:line="2" pos:column="53"/></name></decl></parameter>,<parameter><decl><type><name pos:line="2" pos:column="54">OFF_T<pos:position pos:line="2" pos:column="59"/></name></type> <name pos:line="2" pos:column="60">offset<pos:position pos:line="2" pos:column="66"/></name></decl></parameter>,<parameter><decl><type><name pos:line="2" pos:column="67">int<pos:position pos:line="2" pos:column="70"/></name></type> <name pos:line="2" pos:column="71">n<pos:position pos:line="2" pos:column="72"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="73"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><specifier pos:line="4" pos:column="9">extern<pos:position pos:line="4" pos:column="15"/></specifier> <type><name pos:line="4" pos:column="16">int<pos:position pos:line="4" pos:column="19"/></name></type> <name pos:line="4" pos:column="20">write_batch<pos:position pos:line="4" pos:column="31"/></name></decl>;<pos:position pos:line="4" pos:column="32"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">hold_int<pos:position pos:line="5" pos:column="21"/></name></decl>;<pos:position pos:line="5" pos:column="22"/></decl_stmt>

	<if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<expr><name pos:line="7" pos:column="13">n<pos:position pos:line="7" pos:column="14"/></name> <operator pos:line="7" pos:column="15">&gt;<pos:position pos:line="7" pos:column="19"/></operator> <literal type="number" pos:line="7" pos:column="17">0<pos:position pos:line="7" pos:column="18"/></literal></expr>)<pos:position pos:line="7" pos:column="19"/></condition><then pos:line="7" pos:column="19"> <block pos:line="7" pos:column="20">{
		<decl_stmt><decl><type><name pos:line="8" pos:column="17">int<pos:position pos:line="8" pos:column="20"/></name></type> <name pos:line="8" pos:column="21">l<pos:position pos:line="8" pos:column="22"/></name> <init pos:line="8" pos:column="23">= <expr><literal type="number" pos:line="8" pos:column="25">0<pos:position pos:line="8" pos:column="26"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="27"/></decl_stmt>
		<while pos:line="9" pos:column="17">while <condition pos:line="9" pos:column="23">(<expr><name pos:line="9" pos:column="24">l<pos:position pos:line="9" pos:column="25"/></name> <operator pos:line="9" pos:column="26">&lt;<pos:position pos:line="9" pos:column="30"/></operator> <name pos:line="9" pos:column="28">n<pos:position pos:line="9" pos:column="29"/></name></expr>)<pos:position pos:line="9" pos:column="30"/></condition> <block pos:line="9" pos:column="31">{
			<decl_stmt><decl><type><name pos:line="10" pos:column="25">int<pos:position pos:line="10" pos:column="28"/></name></type> <name pos:line="10" pos:column="29">n1<pos:position pos:line="10" pos:column="31"/></name> <init pos:line="10" pos:column="32">= <expr><call><name pos:line="10" pos:column="34">MIN<pos:position pos:line="10" pos:column="37"/></name><argument_list pos:line="10" pos:column="37">(<argument><expr><name pos:line="10" pos:column="38">CHUNK_SIZE<pos:position pos:line="10" pos:column="48"/></name></expr></argument>,<argument><expr><name pos:line="10" pos:column="49">n<pos:position pos:line="10" pos:column="50"/></name><operator pos:line="10" pos:column="50">-<pos:position pos:line="10" pos:column="51"/></operator><name pos:line="10" pos:column="51">l<pos:position pos:line="10" pos:column="52"/></name></expr></argument>)<pos:position pos:line="10" pos:column="53"/></argument_list></call></expr></init></decl>;<pos:position pos:line="10" pos:column="54"/></decl_stmt>
			<expr_stmt><expr><call><name pos:line="11" pos:column="25">write_int<pos:position pos:line="11" pos:column="34"/></name><argument_list pos:line="11" pos:column="34">(<argument><expr><name pos:line="11" pos:column="35">f<pos:position pos:line="11" pos:column="36"/></name></expr></argument>,<argument><expr><name pos:line="11" pos:column="37">n1<pos:position pos:line="11" pos:column="39"/></name></expr></argument>)<pos:position pos:line="11" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="41"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="12" pos:column="25">write_buf<pos:position pos:line="12" pos:column="34"/></name><argument_list pos:line="12" pos:column="34">(<argument><expr><name pos:line="12" pos:column="35">f<pos:position pos:line="12" pos:column="36"/></name></expr></argument>,<argument><expr><call><name pos:line="12" pos:column="37">map_ptr<pos:position pos:line="12" pos:column="44"/></name><argument_list pos:line="12" pos:column="44">(<argument><expr><name pos:line="12" pos:column="45">buf<pos:position pos:line="12" pos:column="48"/></name></expr></argument>,<argument><expr><name pos:line="12" pos:column="49">offset<pos:position pos:line="12" pos:column="55"/></name><operator pos:line="12" pos:column="55">+<pos:position pos:line="12" pos:column="56"/></operator><name pos:line="12" pos:column="56">l<pos:position pos:line="12" pos:column="57"/></name></expr></argument>,<argument><expr><name pos:line="12" pos:column="58">n1<pos:position pos:line="12" pos:column="60"/></name></expr></argument>)<pos:position pos:line="12" pos:column="61"/></argument_list></call></expr></argument>,<argument><expr><name pos:line="12" pos:column="62">n1<pos:position pos:line="12" pos:column="64"/></name></expr></argument>)<pos:position pos:line="12" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="66"/></expr_stmt>
			<if pos:line="13" pos:column="25">if <condition pos:line="13" pos:column="28">(<expr><name pos:line="13" pos:column="29">write_batch<pos:position pos:line="13" pos:column="40"/></name></expr>)<pos:position pos:line="13" pos:column="41"/></condition><then pos:line="13" pos:column="41"> <block pos:line="13" pos:column="42">{
				<expr_stmt><expr><call><name pos:line="14" pos:column="33">write_batch_delta_file<pos:position pos:line="14" pos:column="55"/></name><argument_list pos:line="14" pos:column="55">( <argument><expr><operator pos:line="14" pos:column="57">(<pos:position pos:line="14" pos:column="58"/></operator><name pos:line="14" pos:column="58">char<pos:position pos:line="14" pos:column="62"/></name> <operator pos:line="14" pos:column="63">*<pos:position pos:line="14" pos:column="64"/></operator><operator pos:line="14" pos:column="64">)<pos:position pos:line="14" pos:column="65"/></operator> <operator pos:line="14" pos:column="66">&amp;<pos:position pos:line="14" pos:column="71"/></operator><name pos:line="14" pos:column="67">n1<pos:position pos:line="14" pos:column="69"/></name></expr></argument>, <argument><expr><sizeof pos:line="14" pos:column="71">sizeof<argument_list pos:line="14" pos:column="77">(<argument><expr><name pos:line="14" pos:column="78">int<pos:position pos:line="14" pos:column="81"/></name></expr></argument>)<pos:position pos:line="14" pos:column="82"/></argument_list></sizeof></expr></argument> )<pos:position pos:line="14" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="85"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="15" pos:column="33">write_batch_delta_file<pos:position pos:line="15" pos:column="55"/></name><argument_list pos:line="15" pos:column="55">(<argument><expr><call><name pos:line="15" pos:column="56">map_ptr<pos:position pos:line="15" pos:column="63"/></name><argument_list pos:line="15" pos:column="63">(<argument><expr><name pos:line="15" pos:column="64">buf<pos:position pos:line="15" pos:column="67"/></name></expr></argument>,<argument><expr><name pos:line="15" pos:column="68">offset<pos:position pos:line="15" pos:column="74"/></name><operator pos:line="15" pos:column="74">+<pos:position pos:line="15" pos:column="75"/></operator><name pos:line="15" pos:column="75">l<pos:position pos:line="15" pos:column="76"/></name></expr></argument>,<argument><expr><name pos:line="15" pos:column="77">n1<pos:position pos:line="15" pos:column="79"/></name></expr></argument>)<pos:position pos:line="15" pos:column="80"/></argument_list></call></expr></argument>,<argument><expr><name pos:line="15" pos:column="81">n1<pos:position pos:line="15" pos:column="83"/></name></expr></argument>)<pos:position pos:line="15" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="85"/></expr_stmt>
			}<pos:position pos:line="16" pos:column="26"/></block></then></if>
			<expr_stmt><expr><name pos:line="17" pos:column="25">l<pos:position pos:line="17" pos:column="26"/></name> <operator pos:line="17" pos:column="27">+=<pos:position pos:line="17" pos:column="29"/></operator> <name pos:line="17" pos:column="30">n1<pos:position pos:line="17" pos:column="32"/></name></expr>;<pos:position pos:line="17" pos:column="33"/></expr_stmt>
		}<pos:position pos:line="18" pos:column="18"/></block></while>
	}<pos:position pos:line="19" pos:column="10"/></block></then></if>
	<comment type="block" pos:line="20" pos:column="9">/* a -2 token means to send data only and no token */</comment>
	<if pos:line="21" pos:column="9">if <condition pos:line="21" pos:column="12">(<expr><name pos:line="21" pos:column="13">token<pos:position pos:line="21" pos:column="18"/></name> <operator pos:line="21" pos:column="19">!=<pos:position pos:line="21" pos:column="21"/></operator> <operator pos:line="21" pos:column="22">-<pos:position pos:line="21" pos:column="23"/></operator><literal type="number" pos:line="21" pos:column="23">2<pos:position pos:line="21" pos:column="24"/></literal></expr>)<pos:position pos:line="21" pos:column="25"/></condition><then pos:line="21" pos:column="25"> <block pos:line="21" pos:column="26">{
		<expr_stmt><expr><call><name pos:line="22" pos:column="17">write_int<pos:position pos:line="22" pos:column="26"/></name><argument_list pos:line="22" pos:column="26">(<argument><expr><name pos:line="22" pos:column="27">f<pos:position pos:line="22" pos:column="28"/></name></expr></argument>,<argument><expr><operator pos:line="22" pos:column="29">-<pos:position pos:line="22" pos:column="30"/></operator><operator pos:line="22" pos:column="30">(<pos:position pos:line="22" pos:column="31"/></operator><name pos:line="22" pos:column="31">token<pos:position pos:line="22" pos:column="36"/></name><operator pos:line="22" pos:column="36">+<pos:position pos:line="22" pos:column="37"/></operator><literal type="number" pos:line="22" pos:column="37">1<pos:position pos:line="22" pos:column="38"/></literal><operator pos:line="22" pos:column="38">)<pos:position pos:line="22" pos:column="39"/></operator></expr></argument>)<pos:position pos:line="22" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="41"/></expr_stmt>
		<if pos:line="23" pos:column="17">if <condition pos:line="23" pos:column="20">(<expr><name pos:line="23" pos:column="21">write_batch<pos:position pos:line="23" pos:column="32"/></name></expr>)<pos:position pos:line="23" pos:column="33"/></condition><then pos:line="23" pos:column="33"> <block pos:line="23" pos:column="34">{
			<expr_stmt><expr><name pos:line="24" pos:column="25">hold_int<pos:position pos:line="24" pos:column="33"/></name> <operator pos:line="24" pos:column="34">=<pos:position pos:line="24" pos:column="35"/></operator> <operator pos:line="24" pos:column="36">-<pos:position pos:line="24" pos:column="37"/></operator><operator pos:line="24" pos:column="37">(<pos:position pos:line="24" pos:column="38"/></operator><name pos:line="24" pos:column="38">token<pos:position pos:line="24" pos:column="43"/></name><operator pos:line="24" pos:column="43">+<pos:position pos:line="24" pos:column="44"/></operator><literal type="number" pos:line="24" pos:column="44">1<pos:position pos:line="24" pos:column="45"/></literal><operator pos:line="24" pos:column="45">)<pos:position pos:line="24" pos:column="46"/></operator></expr>;<pos:position pos:line="24" pos:column="47"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="25" pos:column="25">write_batch_delta_file<pos:position pos:line="25" pos:column="47"/></name><argument_list pos:line="25" pos:column="47">( <argument><expr><operator pos:line="25" pos:column="49">(<pos:position pos:line="25" pos:column="50"/></operator><name pos:line="25" pos:column="50">char<pos:position pos:line="25" pos:column="54"/></name> <operator pos:line="25" pos:column="55">*<pos:position pos:line="25" pos:column="56"/></operator><operator pos:line="25" pos:column="56">)<pos:position pos:line="25" pos:column="57"/></operator> <operator pos:line="25" pos:column="58">&amp;<pos:position pos:line="25" pos:column="63"/></operator><name pos:line="25" pos:column="59">hold_int<pos:position pos:line="25" pos:column="67"/></name></expr></argument>, <argument><expr><sizeof pos:line="25" pos:column="69">sizeof<argument_list pos:line="25" pos:column="75">(<argument><expr><name pos:line="25" pos:column="76">int<pos:position pos:line="25" pos:column="79"/></name></expr></argument>)<pos:position pos:line="25" pos:column="80"/></argument_list></sizeof></expr></argument> )<pos:position pos:line="25" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="83"/></expr_stmt>
		}<pos:position pos:line="26" pos:column="18"/></block></then></if>
	}<pos:position pos:line="27" pos:column="10"/></block></then></if>
}<pos:position pos:line="28" pos:column="2"/></block></function></unit>
