<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_function_911.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">char<pos:position pos:line="1" pos:column="12"/></name> <modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier></type><name pos:line="1" pos:column="14">finish_pre_exec<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name pos:line="1" pos:column="30">pid_t<pos:position pos:line="1" pos:column="35"/></name></type> <name pos:line="1" pos:column="36">pid<pos:position pos:line="1" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="41">int<pos:position pos:line="1" pos:column="44"/></name></type> <name pos:line="1" pos:column="45">fd<pos:position pos:line="1" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="49">char<pos:position pos:line="1" pos:column="53"/></name> <modifier pos:line="1" pos:column="54">*<pos:position pos:line="1" pos:column="55"/></modifier></type><name pos:line="1" pos:column="55">request<pos:position pos:line="1" pos:column="62"/></name></decl></parameter>,
			     <parameter><decl><type><name pos:line="2" pos:column="30">char<pos:position pos:line="2" pos:column="34"/></name> <modifier pos:line="2" pos:column="35">*<pos:position pos:line="2" pos:column="36"/></modifier><modifier pos:line="2" pos:column="36">*<pos:position pos:line="2" pos:column="37"/></modifier></type><name pos:line="2" pos:column="37">early_argv<pos:position pos:line="2" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="49">char<pos:position pos:line="2" pos:column="53"/></name> <modifier pos:line="2" pos:column="54">*<pos:position pos:line="2" pos:column="55"/></modifier><modifier pos:line="2" pos:column="55">*<pos:position pos:line="2" pos:column="56"/></modifier></type><name pos:line="2" pos:column="56">argv<pos:position pos:line="2" pos:column="60"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="61"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">j<pos:position pos:line="4" pos:column="14"/></name> <init pos:line="4" pos:column="15">= <expr><literal type="number" pos:line="4" pos:column="17">0<pos:position pos:line="4" pos:column="18"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="20">status<pos:position pos:line="4" pos:column="26"/></name> <init pos:line="4" pos:column="27">= <expr><operator pos:line="4" pos:column="29">-<pos:position pos:line="4" pos:column="30"/></operator><literal type="number" pos:line="4" pos:column="30">1<pos:position pos:line="4" pos:column="31"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="32"/></decl_stmt>

	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><operator pos:line="6" pos:column="13">!<pos:position pos:line="6" pos:column="14"/></operator><name pos:line="6" pos:column="14">request<pos:position pos:line="6" pos:column="21"/></name></expr>)<pos:position pos:line="6" pos:column="22"/></condition><then pos:line="6" pos:column="22">
		<block type="pseudo"><expr_stmt><expr><name pos:line="7" pos:column="17">request<pos:position pos:line="7" pos:column="24"/></name> <operator pos:line="7" pos:column="25">=<pos:position pos:line="7" pos:column="26"/></operator> <literal type="string" pos:line="7" pos:column="27">"(NONE)"<pos:position pos:line="7" pos:column="35"/></literal></expr>;<pos:position pos:line="7" pos:column="36"/></expr_stmt></block></then></if>

	<expr_stmt><expr><call><name pos:line="9" pos:column="9">write_buf<pos:position pos:line="9" pos:column="18"/></name><argument_list pos:line="9" pos:column="18">(<argument><expr><name pos:line="9" pos:column="19">fd<pos:position pos:line="9" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="23">request<pos:position pos:line="9" pos:column="30"/></name></expr></argument>, <argument><expr><call><name pos:line="9" pos:column="32">strlen<pos:position pos:line="9" pos:column="38"/></name><argument_list pos:line="9" pos:column="38">(<argument><expr><name pos:line="9" pos:column="39">request<pos:position pos:line="9" pos:column="46"/></name></expr></argument>)<pos:position pos:line="9" pos:column="47"/></argument_list></call><operator pos:line="9" pos:column="47">+<pos:position pos:line="9" pos:column="48"/></operator><literal type="number" pos:line="9" pos:column="48">1<pos:position pos:line="9" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="51"/></expr_stmt>
	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><name pos:line="10" pos:column="13">early_argv<pos:position pos:line="10" pos:column="23"/></name></expr>)<pos:position pos:line="10" pos:column="24"/></condition><then pos:line="10" pos:column="24"> <block pos:line="10" pos:column="25">{
		<for pos:line="11" pos:column="17">for <control pos:line="11" pos:column="21">( <init pos:line="11" pos:column="23">;<pos:position pos:line="11" pos:column="24"/></init> <condition><expr><operator pos:line="11" pos:column="25">*<pos:position pos:line="11" pos:column="26"/></operator><name pos:line="11" pos:column="26">early_argv<pos:position pos:line="11" pos:column="36"/></name></expr>;<pos:position pos:line="11" pos:column="37"/></condition> <incr><expr><name pos:line="11" pos:column="38">early_argv<pos:position pos:line="11" pos:column="48"/></name><operator pos:line="11" pos:column="48">++<pos:position pos:line="11" pos:column="50"/></operator></expr></incr>)<pos:position pos:line="11" pos:column="51"/></control>
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="12" pos:column="25">write_buf<pos:position pos:line="12" pos:column="34"/></name><argument_list pos:line="12" pos:column="34">(<argument><expr><name pos:line="12" pos:column="35">fd<pos:position pos:line="12" pos:column="37"/></name></expr></argument>, <argument><expr><operator pos:line="12" pos:column="39">*<pos:position pos:line="12" pos:column="40"/></operator><name pos:line="12" pos:column="40">early_argv<pos:position pos:line="12" pos:column="50"/></name></expr></argument>, <argument><expr><call><name pos:line="12" pos:column="52">strlen<pos:position pos:line="12" pos:column="58"/></name><argument_list pos:line="12" pos:column="58">(<argument><expr><operator pos:line="12" pos:column="59">*<pos:position pos:line="12" pos:column="60"/></operator><name pos:line="12" pos:column="60">early_argv<pos:position pos:line="12" pos:column="70"/></name></expr></argument>)<pos:position pos:line="12" pos:column="71"/></argument_list></call><operator pos:line="12" pos:column="71">+<pos:position pos:line="12" pos:column="72"/></operator><literal type="number" pos:line="12" pos:column="72">1<pos:position pos:line="12" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="75"/></expr_stmt></block></for>
		<expr_stmt><expr><name pos:line="13" pos:column="17">j<pos:position pos:line="13" pos:column="18"/></name> <operator pos:line="13" pos:column="19">=<pos:position pos:line="13" pos:column="20"/></operator> <literal type="number" pos:line="13" pos:column="21">1<pos:position pos:line="13" pos:column="22"/></literal></expr>;<pos:position pos:line="13" pos:column="23"/></expr_stmt> <comment type="block" pos:line="13" pos:column="24">/* Skip arg0 name in argv. */</comment>
	}<pos:position pos:line="14" pos:column="10"/></block></then></if>
	<for pos:line="15" pos:column="9">for <control pos:line="15" pos:column="13">( <init pos:line="15" pos:column="15">;<pos:position pos:line="15" pos:column="16"/></init> <condition><expr><name><name pos:line="15" pos:column="17">argv<pos:position pos:line="15" pos:column="21"/></name><index pos:line="15" pos:column="21">[<expr><name pos:line="15" pos:column="22">j<pos:position pos:line="15" pos:column="23"/></name></expr>]<pos:position pos:line="15" pos:column="24"/></index></name></expr>;<pos:position pos:line="15" pos:column="25"/></condition> <incr><expr><name pos:line="15" pos:column="26">j<pos:position pos:line="15" pos:column="27"/></name><operator pos:line="15" pos:column="27">++<pos:position pos:line="15" pos:column="29"/></operator></expr></incr>)<pos:position pos:line="15" pos:column="30"/></control> <block pos:line="15" pos:column="31">{
		<expr_stmt><expr><call><name pos:line="16" pos:column="17">write_buf<pos:position pos:line="16" pos:column="26"/></name><argument_list pos:line="16" pos:column="26">(<argument><expr><name pos:line="16" pos:column="27">fd<pos:position pos:line="16" pos:column="29"/></name></expr></argument>, <argument><expr><name><name pos:line="16" pos:column="31">argv<pos:position pos:line="16" pos:column="35"/></name><index pos:line="16" pos:column="35">[<expr><name pos:line="16" pos:column="36">j<pos:position pos:line="16" pos:column="37"/></name></expr>]<pos:position pos:line="16" pos:column="38"/></index></name></expr></argument>, <argument><expr><call><name pos:line="16" pos:column="40">strlen<pos:position pos:line="16" pos:column="46"/></name><argument_list pos:line="16" pos:column="46">(<argument><expr><name><name pos:line="16" pos:column="47">argv<pos:position pos:line="16" pos:column="51"/></name><index pos:line="16" pos:column="51">[<expr><name pos:line="16" pos:column="52">j<pos:position pos:line="16" pos:column="53"/></name></expr>]<pos:position pos:line="16" pos:column="54"/></index></name></expr></argument>)<pos:position pos:line="16" pos:column="55"/></argument_list></call><operator pos:line="16" pos:column="55">+<pos:position pos:line="16" pos:column="56"/></operator><literal type="number" pos:line="16" pos:column="56">1<pos:position pos:line="16" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="59"/></expr_stmt>
		<if pos:line="17" pos:column="17">if <condition pos:line="17" pos:column="20">(<expr><name><name pos:line="17" pos:column="21">argv<pos:position pos:line="17" pos:column="25"/></name><index pos:line="17" pos:column="25">[<expr><name pos:line="17" pos:column="26">j<pos:position pos:line="17" pos:column="27"/></name></expr>]<pos:position pos:line="17" pos:column="28"/></index><index pos:line="17" pos:column="28">[<expr><literal type="number" pos:line="17" pos:column="29">0<pos:position pos:line="17" pos:column="30"/></literal></expr>]<pos:position pos:line="17" pos:column="31"/></index></name> <operator pos:line="17" pos:column="32">==<pos:position pos:line="17" pos:column="34"/></operator> <literal type="char" pos:line="17" pos:column="35">'.'<pos:position pos:line="17" pos:column="38"/></literal> <operator pos:line="17" pos:column="39">&amp;&amp;<pos:position pos:line="17" pos:column="49"/></operator> <name><name pos:line="17" pos:column="42">argv<pos:position pos:line="17" pos:column="46"/></name><index pos:line="17" pos:column="46">[<expr><name pos:line="17" pos:column="47">j<pos:position pos:line="17" pos:column="48"/></name></expr>]<pos:position pos:line="17" pos:column="49"/></index><index pos:line="17" pos:column="49">[<expr><literal type="number" pos:line="17" pos:column="50">1<pos:position pos:line="17" pos:column="51"/></literal></expr>]<pos:position pos:line="17" pos:column="52"/></index></name> <operator pos:line="17" pos:column="53">==<pos:position pos:line="17" pos:column="55"/></operator> <literal type="char" pos:line="17" pos:column="56">'\0'<pos:position pos:line="17" pos:column="60"/></literal></expr>)<pos:position pos:line="17" pos:column="61"/></condition><then pos:line="17" pos:column="61">
			<block type="pseudo"><break pos:line="18" pos:column="25">break;<pos:position pos:line="18" pos:column="31"/></break></block></then></if>
	}<pos:position pos:line="19" pos:column="10"/></block></for>
	<expr_stmt><expr><call><name pos:line="20" pos:column="9">write_byte<pos:position pos:line="20" pos:column="19"/></name><argument_list pos:line="20" pos:column="19">(<argument><expr><name pos:line="20" pos:column="20">fd<pos:position pos:line="20" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="20" pos:column="24">0<pos:position pos:line="20" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="27"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="22" pos:column="9">close<pos:position pos:line="22" pos:column="14"/></name><argument_list pos:line="22" pos:column="14">(<argument><expr><name pos:line="22" pos:column="15">fd<pos:position pos:line="22" pos:column="17"/></name></expr></argument>)<pos:position pos:line="22" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="19"/></expr_stmt>

	<if pos:line="24" pos:column="9">if <condition pos:line="24" pos:column="12">(<expr><call><name pos:line="24" pos:column="13">wait_process<pos:position pos:line="24" pos:column="25"/></name><argument_list pos:line="24" pos:column="25">(<argument><expr><name pos:line="24" pos:column="26">pid<pos:position pos:line="24" pos:column="29"/></name></expr></argument>, <argument><expr><operator pos:line="24" pos:column="31">&amp;<pos:position pos:line="24" pos:column="36"/></operator><name pos:line="24" pos:column="32">status<pos:position pos:line="24" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="24" pos:column="40">0<pos:position pos:line="24" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="42"/></argument_list></call> <operator pos:line="24" pos:column="43">&lt;<pos:position pos:line="24" pos:column="47"/></operator> <literal type="number" pos:line="24" pos:column="45">0<pos:position pos:line="24" pos:column="46"/></literal>
	 <operator pos:line="25" pos:column="10">||<pos:position pos:line="25" pos:column="12"/></operator> <operator pos:line="25" pos:column="13">!<pos:position pos:line="25" pos:column="14"/></operator><call><name pos:line="25" pos:column="14">WIFEXITED<pos:position pos:line="25" pos:column="23"/></name><argument_list pos:line="25" pos:column="23">(<argument><expr><name pos:line="25" pos:column="24">status<pos:position pos:line="25" pos:column="30"/></name></expr></argument>)<pos:position pos:line="25" pos:column="31"/></argument_list></call> <operator pos:line="25" pos:column="32">||<pos:position pos:line="25" pos:column="34"/></operator> <call><name pos:line="25" pos:column="35">WEXITSTATUS<pos:position pos:line="25" pos:column="46"/></name><argument_list pos:line="25" pos:column="46">(<argument><expr><name pos:line="25" pos:column="47">status<pos:position pos:line="25" pos:column="53"/></name></expr></argument>)<pos:position pos:line="25" pos:column="54"/></argument_list></call> <operator pos:line="25" pos:column="55">!=<pos:position pos:line="25" pos:column="57"/></operator> <literal type="number" pos:line="25" pos:column="58">0<pos:position pos:line="25" pos:column="59"/></literal></expr>)<pos:position pos:line="25" pos:column="60"/></condition><then pos:line="25" pos:column="60"> <block pos:line="25" pos:column="61">{
		<decl_stmt><decl><type><name pos:line="26" pos:column="17">char<pos:position pos:line="26" pos:column="21"/></name> <modifier pos:line="26" pos:column="22">*<pos:position pos:line="26" pos:column="23"/></modifier></type><name pos:line="26" pos:column="23">e<pos:position pos:line="26" pos:column="24"/></name></decl>;<pos:position pos:line="26" pos:column="25"/></decl_stmt>
		<if pos:line="27" pos:column="17">if <condition pos:line="27" pos:column="20">(<expr><call><name pos:line="27" pos:column="21">asprintf<pos:position pos:line="27" pos:column="29"/></name><argument_list pos:line="27" pos:column="29">(<argument><expr><operator pos:line="27" pos:column="30">&amp;<pos:position pos:line="27" pos:column="35"/></operator><name pos:line="27" pos:column="31">e<pos:position pos:line="27" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="27" pos:column="34">"pre-xfer exec returned failure (%d)%s%s\n"<pos:position pos:line="27" pos:column="77"/></literal></expr></argument>,
			     <argument><expr><name pos:line="28" pos:column="30">status<pos:position pos:line="28" pos:column="36"/></name></expr></argument>, <argument><expr><ternary><condition><expr><name pos:line="28" pos:column="38">status<pos:position pos:line="28" pos:column="44"/></name> <operator pos:line="28" pos:column="45">&lt;<pos:position pos:line="28" pos:column="49"/></operator> <literal type="number" pos:line="28" pos:column="47">0<pos:position pos:line="28" pos:column="48"/></literal></expr> ?<pos:position pos:line="28" pos:column="50"/></condition><then pos:line="28" pos:column="50"> <expr><literal type="string" pos:line="28" pos:column="51">": "<pos:position pos:line="28" pos:column="55"/></literal></expr> <pos:position pos:line="28" pos:column="56"/></then><else pos:line="28" pos:column="56">: <expr><literal type="string" pos:line="28" pos:column="58">""<pos:position pos:line="28" pos:column="60"/></literal></expr></else></ternary></expr></argument>,
			     <argument><expr><ternary><condition><expr><name pos:line="29" pos:column="30">status<pos:position pos:line="29" pos:column="36"/></name> <operator pos:line="29" pos:column="37">&lt;<pos:position pos:line="29" pos:column="41"/></operator> <literal type="number" pos:line="29" pos:column="39">0<pos:position pos:line="29" pos:column="40"/></literal></expr> ?<pos:position pos:line="29" pos:column="42"/></condition><then pos:line="29" pos:column="42"> <expr><call><name pos:line="29" pos:column="43">strerror<pos:position pos:line="29" pos:column="51"/></name><argument_list pos:line="29" pos:column="51">(<argument><expr><name pos:line="29" pos:column="52">errno<pos:position pos:line="29" pos:column="57"/></name></expr></argument>)<pos:position pos:line="29" pos:column="58"/></argument_list></call></expr> <pos:position pos:line="29" pos:column="59"/></then><else pos:line="29" pos:column="59">: <expr><literal type="string" pos:line="29" pos:column="61">""<pos:position pos:line="29" pos:column="63"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="29" pos:column="64"/></argument_list></call> <operator pos:line="29" pos:column="65">&lt;<pos:position pos:line="29" pos:column="69"/></operator> <literal type="number" pos:line="29" pos:column="67">0<pos:position pos:line="29" pos:column="68"/></literal></expr>)<pos:position pos:line="29" pos:column="69"/></condition><then pos:line="29" pos:column="69">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="30" pos:column="25">out_of_memory<pos:position pos:line="30" pos:column="38"/></name><argument_list pos:line="30" pos:column="38">(<argument><expr><literal type="string" pos:line="30" pos:column="39">"finish_pre_exec"<pos:position pos:line="30" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="58"/></expr_stmt></block></then></if>
		<return pos:line="31" pos:column="17">return <expr><name pos:line="31" pos:column="24">e<pos:position pos:line="31" pos:column="25"/></name></expr>;<pos:position pos:line="31" pos:column="26"/></return>
	}<pos:position pos:line="32" pos:column="10"/></block></then></if>
	<return pos:line="33" pos:column="9">return <expr><name pos:line="33" pos:column="16">NULL<pos:position pos:line="33" pos:column="20"/></name></expr>;<pos:position pos:line="33" pos:column="21"/></return>
}<pos:position pos:line="34" pos:column="2"/></block></function></unit>
