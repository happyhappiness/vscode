<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_function_826.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">parse_arguments<pos:position pos:line="1" pos:column="20"/></name><parameter_list pos:line="1" pos:column="20">(<parameter><decl><type><name pos:line="1" pos:column="21">int<pos:position pos:line="1" pos:column="24"/></name> <modifier pos:line="1" pos:column="25">*<pos:position pos:line="1" pos:column="26"/></modifier></type><name pos:line="1" pos:column="26">argc<pos:position pos:line="1" pos:column="30"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="32">const<pos:position pos:line="1" pos:column="37"/></specifier> <name pos:line="1" pos:column="38">char<pos:position pos:line="1" pos:column="42"/></name> <modifier pos:line="1" pos:column="43">*<pos:position pos:line="1" pos:column="44"/></modifier><modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier><modifier pos:line="1" pos:column="45">*<pos:position pos:line="1" pos:column="46"/></modifier></type><name pos:line="1" pos:column="46">argv<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="52">int<pos:position pos:line="1" pos:column="55"/></name></type> <name pos:line="1" pos:column="56">frommain<pos:position pos:line="1" pos:column="64"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="65"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">opt<pos:position pos:line="3" pos:column="16"/></name></decl>;<pos:position pos:line="3" pos:column="17"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier></type><name pos:line="4" pos:column="15">ref<pos:position pos:line="4" pos:column="18"/></name> <init pos:line="4" pos:column="19">= <expr><call><name pos:line="4" pos:column="21">lp_refuse_options<pos:position pos:line="4" pos:column="38"/></name><argument_list pos:line="4" pos:column="38">(<argument><expr><name pos:line="4" pos:column="39">module_id<pos:position pos:line="4" pos:column="48"/></name></expr></argument>)<pos:position pos:line="4" pos:column="49"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="50"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="5" pos:column="9">const<pos:position pos:line="5" pos:column="14"/></specifier> <name pos:line="5" pos:column="15">char<pos:position pos:line="5" pos:column="19"/></name> <modifier pos:line="5" pos:column="20">*<pos:position pos:line="5" pos:column="21"/></modifier></type><name pos:line="5" pos:column="21">arg<pos:position pos:line="5" pos:column="24"/></name></decl>;<pos:position pos:line="5" pos:column="25"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">poptContext<pos:position pos:line="6" pos:column="20"/></name></type> <name pos:line="6" pos:column="21">pc<pos:position pos:line="6" pos:column="23"/></name></decl>;<pos:position pos:line="6" pos:column="24"/></decl_stmt>

	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><name pos:line="8" pos:column="13">ref<pos:position pos:line="8" pos:column="16"/></name> <operator pos:line="8" pos:column="17">&amp;&amp;<pos:position pos:line="8" pos:column="27"/></operator> <operator pos:line="8" pos:column="20">*<pos:position pos:line="8" pos:column="21"/></operator><name pos:line="8" pos:column="21">ref<pos:position pos:line="8" pos:column="24"/></name></expr>)<pos:position pos:line="8" pos:column="25"/></condition><then pos:line="8" pos:column="25">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="9" pos:column="17">set_refuse_options<pos:position pos:line="9" pos:column="35"/></name><argument_list pos:line="9" pos:column="35">(<argument><expr><name pos:line="9" pos:column="36">ref<pos:position pos:line="9" pos:column="39"/></name></expr></argument>)<pos:position pos:line="9" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="41"/></expr_stmt></block></then></if>
	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><name pos:line="10" pos:column="13">am_daemon<pos:position pos:line="10" pos:column="22"/></name></expr>)<pos:position pos:line="10" pos:column="23"/></condition><then pos:line="10" pos:column="23">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="11" pos:column="17">set_refuse_options<pos:position pos:line="11" pos:column="35"/></name><argument_list pos:line="11" pos:column="35">(<argument><expr><literal type="string" pos:line="11" pos:column="36">"log-file*"<pos:position pos:line="11" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="49"/></expr_stmt></block></then></if>

	<comment type="block" pos:line="13" pos:column="9">/* TODO: Call poptReadDefaultConfig; handle errors. */</comment>

	<comment type="block" pos:line="15" pos:column="9">/* The context leaks in case of an error, but if there's a
	 * problem we always exit anyhow. */</comment>
	<expr_stmt><expr><name pos:line="17" pos:column="9">pc<pos:position pos:line="17" pos:column="11"/></name> <operator pos:line="17" pos:column="12">=<pos:position pos:line="17" pos:column="13"/></operator> <call><name pos:line="17" pos:column="14">poptGetContext<pos:position pos:line="17" pos:column="28"/></name><argument_list pos:line="17" pos:column="28">(<argument><expr><name pos:line="17" pos:column="29">RSYNC_NAME<pos:position pos:line="17" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="17" pos:column="41">*<pos:position pos:line="17" pos:column="42"/></operator><name pos:line="17" pos:column="42">argc<pos:position pos:line="17" pos:column="46"/></name></expr></argument>, <argument><expr><operator pos:line="17" pos:column="48">*<pos:position pos:line="17" pos:column="49"/></operator><name pos:line="17" pos:column="49">argv<pos:position pos:line="17" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="55">long_options<pos:position pos:line="17" pos:column="67"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="17" pos:column="69">0<pos:position pos:line="17" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="72"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="18" pos:column="9">poptReadDefaultConfig<pos:position pos:line="18" pos:column="30"/></name><argument_list pos:line="18" pos:column="30">(<argument><expr><name pos:line="18" pos:column="31">pc<pos:position pos:line="18" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="18" pos:column="35">0<pos:position pos:line="18" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="38"/></expr_stmt>

	<while pos:line="20" pos:column="9">while <condition pos:line="20" pos:column="15">(<expr><operator pos:line="20" pos:column="16">(<pos:position pos:line="20" pos:column="17"/></operator><name pos:line="20" pos:column="17">opt<pos:position pos:line="20" pos:column="20"/></name> <operator pos:line="20" pos:column="21">=<pos:position pos:line="20" pos:column="22"/></operator> <call><name pos:line="20" pos:column="23">poptGetNextOpt<pos:position pos:line="20" pos:column="37"/></name><argument_list pos:line="20" pos:column="37">(<argument><expr><name pos:line="20" pos:column="38">pc<pos:position pos:line="20" pos:column="40"/></name></expr></argument>)<pos:position pos:line="20" pos:column="41"/></argument_list></call><operator pos:line="20" pos:column="41">)<pos:position pos:line="20" pos:column="42"/></operator> <operator pos:line="20" pos:column="43">!=<pos:position pos:line="20" pos:column="45"/></operator> <operator pos:line="20" pos:column="46">-<pos:position pos:line="20" pos:column="47"/></operator><literal type="number" pos:line="20" pos:column="47">1<pos:position pos:line="20" pos:column="48"/></literal></expr>)<pos:position pos:line="20" pos:column="49"/></condition> <block pos:line="20" pos:column="50">{
		<comment type="block" pos:line="21" pos:column="17">/* most options are handled automatically by popt;
		 * only special cases are returned and listed here. */</comment>

		<switch pos:line="24" pos:column="17">switch <condition pos:line="24" pos:column="24">(<expr><name pos:line="24" pos:column="25">opt<pos:position pos:line="24" pos:column="28"/></name></expr>)<pos:position pos:line="24" pos:column="29"/></condition> <block pos:line="24" pos:column="30">{
		<case pos:line="25" pos:column="17">case <expr><name pos:line="25" pos:column="22">OPT_VERSION<pos:position pos:line="25" pos:column="33"/></name></expr>:<pos:position pos:line="25" pos:column="34"/></case>
			<expr_stmt><expr><call><name pos:line="26" pos:column="25">print_rsync_version<pos:position pos:line="26" pos:column="44"/></name><argument_list pos:line="26" pos:column="44">(<argument><expr><name pos:line="26" pos:column="45">FINFO<pos:position pos:line="26" pos:column="50"/></name></expr></argument>)<pos:position pos:line="26" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="52"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="27" pos:column="25">exit_cleanup<pos:position pos:line="27" pos:column="37"/></name><argument_list pos:line="27" pos:column="37">(<argument><expr><literal type="number" pos:line="27" pos:column="38">0<pos:position pos:line="27" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="41"/></expr_stmt>

		<case pos:line="29" pos:column="17">case <expr><name pos:line="29" pos:column="22">OPT_SERVER<pos:position pos:line="29" pos:column="32"/></name></expr>:<pos:position pos:line="29" pos:column="33"/></case>
			<if pos:line="30" pos:column="25">if <condition pos:line="30" pos:column="28">(<expr><operator pos:line="30" pos:column="29">!<pos:position pos:line="30" pos:column="30"/></operator><name pos:line="30" pos:column="30">am_server<pos:position pos:line="30" pos:column="39"/></name></expr>)<pos:position pos:line="30" pos:column="40"/></condition><then pos:line="30" pos:column="40"> <block pos:line="30" pos:column="41">{
				<comment type="block" pos:line="31" pos:column="33">/* Disable popt aliases on the server side and
				 * then start parsing the options again. */</comment>
				<expr_stmt><expr><call><name pos:line="33" pos:column="33">poptFreeContext<pos:position pos:line="33" pos:column="48"/></name><argument_list pos:line="33" pos:column="48">(<argument><expr><name pos:line="33" pos:column="49">pc<pos:position pos:line="33" pos:column="51"/></name></expr></argument>)<pos:position pos:line="33" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="53"/></expr_stmt>
				<expr_stmt><expr><name pos:line="34" pos:column="33">pc<pos:position pos:line="34" pos:column="35"/></name> <operator pos:line="34" pos:column="36">=<pos:position pos:line="34" pos:column="37"/></operator> <call><name pos:line="34" pos:column="38">poptGetContext<pos:position pos:line="34" pos:column="52"/></name><argument_list pos:line="34" pos:column="52">(<argument><expr><name pos:line="34" pos:column="53">RSYNC_NAME<pos:position pos:line="34" pos:column="63"/></name></expr></argument>, <argument><expr><operator pos:line="34" pos:column="65">*<pos:position pos:line="34" pos:column="66"/></operator><name pos:line="34" pos:column="66">argc<pos:position pos:line="34" pos:column="70"/></name></expr></argument>, <argument><expr><operator pos:line="34" pos:column="72">*<pos:position pos:line="34" pos:column="73"/></operator><name pos:line="34" pos:column="73">argv<pos:position pos:line="34" pos:column="77"/></name></expr></argument>,
						    <argument><expr><name pos:line="35" pos:column="53">long_options<pos:position pos:line="35" pos:column="65"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="35" pos:column="67">0<pos:position pos:line="35" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="70"/></expr_stmt>
				<expr_stmt><expr><name pos:line="36" pos:column="33">am_server<pos:position pos:line="36" pos:column="42"/></name> <operator pos:line="36" pos:column="43">=<pos:position pos:line="36" pos:column="44"/></operator> <literal type="number" pos:line="36" pos:column="45">1<pos:position pos:line="36" pos:column="46"/></literal></expr>;<pos:position pos:line="36" pos:column="47"/></expr_stmt>
			}<pos:position pos:line="37" pos:column="26"/></block></then></if>
			<break pos:line="38" pos:column="25">break;<pos:position pos:line="38" pos:column="31"/></break>

		<case pos:line="40" pos:column="17">case <expr><name pos:line="40" pos:column="22">OPT_SENDER<pos:position pos:line="40" pos:column="32"/></name></expr>:<pos:position pos:line="40" pos:column="33"/></case>
			<if pos:line="41" pos:column="25">if <condition pos:line="41" pos:column="28">(<expr><operator pos:line="41" pos:column="29">!<pos:position pos:line="41" pos:column="30"/></operator><name pos:line="41" pos:column="30">am_server<pos:position pos:line="41" pos:column="39"/></name></expr>)<pos:position pos:line="41" pos:column="40"/></condition><then pos:line="41" pos:column="40"> <block pos:line="41" pos:column="41">{
				<expr_stmt><expr><call><name pos:line="42" pos:column="33">usage<pos:position pos:line="42" pos:column="38"/></name><argument_list pos:line="42" pos:column="38">(<argument><expr><name pos:line="42" pos:column="39">FERROR<pos:position pos:line="42" pos:column="45"/></name></expr></argument>)<pos:position pos:line="42" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="47"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="43" pos:column="33">exit_cleanup<pos:position pos:line="43" pos:column="45"/></name><argument_list pos:line="43" pos:column="45">(<argument><expr><name pos:line="43" pos:column="46">RERR_SYNTAX<pos:position pos:line="43" pos:column="57"/></name></expr></argument>)<pos:position pos:line="43" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="59"/></expr_stmt>
			}<pos:position pos:line="44" pos:column="26"/></block></then></if>
			<expr_stmt><expr><name pos:line="45" pos:column="25">am_sender<pos:position pos:line="45" pos:column="34"/></name> <operator pos:line="45" pos:column="35">=<pos:position pos:line="45" pos:column="36"/></operator> <literal type="number" pos:line="45" pos:column="37">1<pos:position pos:line="45" pos:column="38"/></literal></expr>;<pos:position pos:line="45" pos:column="39"/></expr_stmt>
			<break pos:line="46" pos:column="25">break;<pos:position pos:line="46" pos:column="31"/></break>

		<case pos:line="48" pos:column="17">case <expr><name pos:line="48" pos:column="22">OPT_DAEMON<pos:position pos:line="48" pos:column="32"/></name></expr>:<pos:position pos:line="48" pos:column="33"/></case>
			<if pos:line="49" pos:column="25">if <condition pos:line="49" pos:column="28">(<expr><name pos:line="49" pos:column="29">am_daemon<pos:position pos:line="49" pos:column="38"/></name></expr>)<pos:position pos:line="49" pos:column="39"/></condition><then pos:line="49" pos:column="39"> <block pos:line="49" pos:column="40">{
				<expr_stmt><expr><call><name pos:line="50" pos:column="33">strlcpy<pos:position pos:line="50" pos:column="40"/></name><argument_list pos:line="50" pos:column="40">(<argument><expr><name pos:line="50" pos:column="41">err_buf<pos:position pos:line="50" pos:column="48"/></name></expr></argument>,
					<argument><expr><literal type="string" pos:line="51" pos:column="41">"Attempt to hack rsync thwarted!\n"<pos:position pos:line="51" pos:column="76"/></literal></expr></argument>,
					<argument><expr><sizeof pos:line="52" pos:column="41">sizeof <name pos:line="52" pos:column="48">err_buf<pos:position pos:line="52" pos:column="55"/></name></sizeof></expr></argument>)<pos:position pos:line="52" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="57"/></expr_stmt>
				<return pos:line="53" pos:column="33">return <expr><literal type="number" pos:line="53" pos:column="40">0<pos:position pos:line="53" pos:column="41"/></literal></expr>;<pos:position pos:line="53" pos:column="42"/></return>
			}<pos:position pos:line="54" pos:column="26"/></block></then></if>
			<expr_stmt><expr><call><name pos:line="55" pos:column="25">poptFreeContext<pos:position pos:line="55" pos:column="40"/></name><argument_list pos:line="55" pos:column="40">(<argument><expr><name pos:line="55" pos:column="41">pc<pos:position pos:line="55" pos:column="43"/></name></expr></argument>)<pos:position pos:line="55" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="45"/></expr_stmt>
			<expr_stmt><expr><name pos:line="56" pos:column="25">pc<pos:position pos:line="56" pos:column="27"/></name> <operator pos:line="56" pos:column="28">=<pos:position pos:line="56" pos:column="29"/></operator> <call><name pos:line="56" pos:column="30">poptGetContext<pos:position pos:line="56" pos:column="44"/></name><argument_list pos:line="56" pos:column="44">(<argument><expr><name pos:line="56" pos:column="45">RSYNC_NAME<pos:position pos:line="56" pos:column="55"/></name></expr></argument>, <argument><expr><operator pos:line="56" pos:column="57">*<pos:position pos:line="56" pos:column="58"/></operator><name pos:line="56" pos:column="58">argc<pos:position pos:line="56" pos:column="62"/></name></expr></argument>, <argument><expr><operator pos:line="56" pos:column="64">*<pos:position pos:line="56" pos:column="65"/></operator><name pos:line="56" pos:column="65">argv<pos:position pos:line="56" pos:column="69"/></name></expr></argument>,
					    <argument><expr><name pos:line="57" pos:column="45">long_daemon_options<pos:position pos:line="57" pos:column="64"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="57" pos:column="66">0<pos:position pos:line="57" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="57" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="69"/></expr_stmt>
			<while pos:line="58" pos:column="25">while <condition pos:line="58" pos:column="31">(<expr><operator pos:line="58" pos:column="32">(<pos:position pos:line="58" pos:column="33"/></operator><name pos:line="58" pos:column="33">opt<pos:position pos:line="58" pos:column="36"/></name> <operator pos:line="58" pos:column="37">=<pos:position pos:line="58" pos:column="38"/></operator> <call><name pos:line="58" pos:column="39">poptGetNextOpt<pos:position pos:line="58" pos:column="53"/></name><argument_list pos:line="58" pos:column="53">(<argument><expr><name pos:line="58" pos:column="54">pc<pos:position pos:line="58" pos:column="56"/></name></expr></argument>)<pos:position pos:line="58" pos:column="57"/></argument_list></call><operator pos:line="58" pos:column="57">)<pos:position pos:line="58" pos:column="58"/></operator> <operator pos:line="58" pos:column="59">!=<pos:position pos:line="58" pos:column="61"/></operator> <operator pos:line="58" pos:column="62">-<pos:position pos:line="58" pos:column="63"/></operator><literal type="number" pos:line="58" pos:column="63">1<pos:position pos:line="58" pos:column="64"/></literal></expr>)<pos:position pos:line="58" pos:column="65"/></condition> <block pos:line="58" pos:column="66">{
				<switch pos:line="59" pos:column="33">switch <condition pos:line="59" pos:column="40">(<expr><name pos:line="59" pos:column="41">opt<pos:position pos:line="59" pos:column="44"/></name></expr>)<pos:position pos:line="59" pos:column="45"/></condition> <block pos:line="59" pos:column="46">{
				<case pos:line="60" pos:column="33">case <expr><literal type="char" pos:line="60" pos:column="38">'h'<pos:position pos:line="60" pos:column="41"/></literal></expr>:<pos:position pos:line="60" pos:column="42"/></case>
					<expr_stmt><expr><call><name pos:line="61" pos:column="41">daemon_usage<pos:position pos:line="61" pos:column="53"/></name><argument_list pos:line="61" pos:column="53">(<argument><expr><name pos:line="61" pos:column="54">FINFO<pos:position pos:line="61" pos:column="59"/></name></expr></argument>)<pos:position pos:line="61" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="61"/></expr_stmt>
					<expr_stmt><expr><call><name pos:line="62" pos:column="41">exit_cleanup<pos:position pos:line="62" pos:column="53"/></name><argument_list pos:line="62" pos:column="53">(<argument><expr><literal type="number" pos:line="62" pos:column="54">0<pos:position pos:line="62" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="62" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="57"/></expr_stmt>

				<case pos:line="64" pos:column="33">case <expr><literal type="char" pos:line="64" pos:column="38">'v'<pos:position pos:line="64" pos:column="41"/></literal></expr>:<pos:position pos:line="64" pos:column="42"/></case>
					<expr_stmt><expr><name pos:line="65" pos:column="41">verbose<pos:position pos:line="65" pos:column="48"/></name><operator pos:line="65" pos:column="48">++<pos:position pos:line="65" pos:column="50"/></operator></expr>;<pos:position pos:line="65" pos:column="51"/></expr_stmt>
					<break pos:line="66" pos:column="41">break;<pos:position pos:line="66" pos:column="47"/></break>

				<default pos:line="68" pos:column="33">default:<pos:position pos:line="68" pos:column="41"/></default>
					<expr_stmt><expr><call><name pos:line="69" pos:column="41">rprintf<pos:position pos:line="69" pos:column="48"/></name><argument_list pos:line="69" pos:column="48">(<argument><expr><name pos:line="69" pos:column="49">FERROR<pos:position pos:line="69" pos:column="55"/></name></expr></argument>,
					    <argument><expr><literal type="string" pos:line="70" pos:column="45">"rsync: %s: %s (in daemon mode)\n"<pos:position pos:line="70" pos:column="79"/></literal></expr></argument>,
					    <argument><expr><call><name pos:line="71" pos:column="45">poptBadOption<pos:position pos:line="71" pos:column="58"/></name><argument_list pos:line="71" pos:column="58">(<argument><expr><name pos:line="71" pos:column="59">pc<pos:position pos:line="71" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="71" pos:column="63">POPT_BADOPTION_NOALIAS<pos:position pos:line="71" pos:column="85"/></name></expr></argument>)<pos:position pos:line="71" pos:column="86"/></argument_list></call></expr></argument>,
					    <argument><expr><call><name pos:line="72" pos:column="45">poptStrerror<pos:position pos:line="72" pos:column="57"/></name><argument_list pos:line="72" pos:column="57">(<argument><expr><name pos:line="72" pos:column="58">opt<pos:position pos:line="72" pos:column="61"/></name></expr></argument>)<pos:position pos:line="72" pos:column="62"/></argument_list></call></expr></argument>)<pos:position pos:line="72" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="64"/></expr_stmt>
					<goto pos:line="73" pos:column="41">goto <name pos:line="73" pos:column="46">daemon_error<pos:position pos:line="73" pos:column="58"/></name>;<pos:position pos:line="73" pos:column="59"/></goto>
				}<pos:position pos:line="74" pos:column="34"/></block></switch>
			}<pos:position pos:line="75" pos:column="26"/></block></while>

			<if pos:line="77" pos:column="25">if <condition pos:line="77" pos:column="28">(<expr><name pos:line="77" pos:column="29">tmpdir<pos:position pos:line="77" pos:column="35"/></name> <operator pos:line="77" pos:column="36">&amp;&amp;<pos:position pos:line="77" pos:column="46"/></operator> <call><name pos:line="77" pos:column="39">strlen<pos:position pos:line="77" pos:column="45"/></name><argument_list pos:line="77" pos:column="45">(<argument><expr><name pos:line="77" pos:column="46">tmpdir<pos:position pos:line="77" pos:column="52"/></name></expr></argument>)<pos:position pos:line="77" pos:column="53"/></argument_list></call> <operator pos:line="77" pos:column="54">&gt;=<pos:position pos:line="77" pos:column="59"/></operator> <name pos:line="77" pos:column="57">MAXPATHLEN<pos:position pos:line="77" pos:column="67"/></name> <operator pos:line="77" pos:column="68">-<pos:position pos:line="77" pos:column="69"/></operator> <literal type="number" pos:line="77" pos:column="70">10<pos:position pos:line="77" pos:column="72"/></literal></expr>)<pos:position pos:line="77" pos:column="73"/></condition><then pos:line="77" pos:column="73"> <block pos:line="77" pos:column="74">{
				<expr_stmt><expr><call><name pos:line="78" pos:column="33">snprintf<pos:position pos:line="78" pos:column="41"/></name><argument_list pos:line="78" pos:column="41">(<argument><expr><name pos:line="78" pos:column="42">err_buf<pos:position pos:line="78" pos:column="49"/></name></expr></argument>, <argument><expr><sizeof pos:line="78" pos:column="51">sizeof <name pos:line="78" pos:column="58">err_buf<pos:position pos:line="78" pos:column="65"/></name></sizeof></expr></argument>,
					 <argument><expr><literal type="string" pos:line="79" pos:column="42">"the --temp-dir path is WAY too long.\n"<pos:position pos:line="79" pos:column="82"/></literal></expr></argument>)<pos:position pos:line="79" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="84"/></expr_stmt>
				<return pos:line="80" pos:column="33">return <expr><literal type="number" pos:line="80" pos:column="40">0<pos:position pos:line="80" pos:column="41"/></literal></expr>;<pos:position pos:line="80" pos:column="42"/></return>
			}<pos:position pos:line="81" pos:column="26"/></block></then></if>

			<if pos:line="83" pos:column="25">if <condition pos:line="83" pos:column="28">(<expr><operator pos:line="83" pos:column="29">!<pos:position pos:line="83" pos:column="30"/></operator><name pos:line="83" pos:column="30">daemon_opt<pos:position pos:line="83" pos:column="40"/></name></expr>)<pos:position pos:line="83" pos:column="41"/></condition><then pos:line="83" pos:column="41"> <block pos:line="83" pos:column="42">{
				<expr_stmt><expr><call><name pos:line="84" pos:column="33">rprintf<pos:position pos:line="84" pos:column="40"/></name><argument_list pos:line="84" pos:column="40">(<argument><expr><name pos:line="84" pos:column="41">FERROR<pos:position pos:line="84" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="84" pos:column="49">"Daemon option(s) used without --daemon.\n"<pos:position pos:line="84" pos:column="92"/></literal></expr></argument>)<pos:position pos:line="84" pos:column="93"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="94"/></expr_stmt>
			    <label><name pos:line="85" pos:column="29">daemon_error<pos:position pos:line="85" pos:column="41"/></name>:<pos:position pos:line="85" pos:column="42"/></label>
				<expr_stmt><expr><call><name pos:line="86" pos:column="33">rprintf<pos:position pos:line="86" pos:column="40"/></name><argument_list pos:line="86" pos:column="40">(<argument><expr><name pos:line="86" pos:column="41">FERROR<pos:position pos:line="86" pos:column="47"/></name></expr></argument>,
				    <argument><expr><literal type="string" pos:line="87" pos:column="37">"(Type \"rsync --daemon --help\" for assistance with daemon mode.)\n"<pos:position pos:line="87" pos:column="106"/></literal></expr></argument>)<pos:position pos:line="87" pos:column="107"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="108"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="88" pos:column="33">exit_cleanup<pos:position pos:line="88" pos:column="45"/></name><argument_list pos:line="88" pos:column="45">(<argument><expr><name pos:line="88" pos:column="46">RERR_SYNTAX<pos:position pos:line="88" pos:column="57"/></name></expr></argument>)<pos:position pos:line="88" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="59"/></expr_stmt>
			}<pos:position pos:line="89" pos:column="26"/></block></then></if>

			<expr_stmt><expr><operator pos:line="91" pos:column="25">*<pos:position pos:line="91" pos:column="26"/></operator><name pos:line="91" pos:column="26">argv<pos:position pos:line="91" pos:column="30"/></name> <operator pos:line="91" pos:column="31">=<pos:position pos:line="91" pos:column="32"/></operator> <call><name pos:line="91" pos:column="33">poptGetArgs<pos:position pos:line="91" pos:column="44"/></name><argument_list pos:line="91" pos:column="44">(<argument><expr><name pos:line="91" pos:column="45">pc<pos:position pos:line="91" pos:column="47"/></name></expr></argument>)<pos:position pos:line="91" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="49"/></expr_stmt>
			<expr_stmt><expr><operator pos:line="92" pos:column="25">*<pos:position pos:line="92" pos:column="26"/></operator><name pos:line="92" pos:column="26">argc<pos:position pos:line="92" pos:column="30"/></name> <operator pos:line="92" pos:column="31">=<pos:position pos:line="92" pos:column="32"/></operator> <call><name pos:line="92" pos:column="33">count_args<pos:position pos:line="92" pos:column="43"/></name><argument_list pos:line="92" pos:column="43">(<argument><expr><operator pos:line="92" pos:column="44">*<pos:position pos:line="92" pos:column="45"/></operator><name pos:line="92" pos:column="45">argv<pos:position pos:line="92" pos:column="49"/></name></expr></argument>)<pos:position pos:line="92" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="51"/></expr_stmt>
			<expr_stmt><expr><name pos:line="93" pos:column="25">am_starting_up<pos:position pos:line="93" pos:column="39"/></name> <operator pos:line="93" pos:column="40">=<pos:position pos:line="93" pos:column="41"/></operator> <literal type="number" pos:line="93" pos:column="42">0<pos:position pos:line="93" pos:column="43"/></literal></expr>;<pos:position pos:line="93" pos:column="44"/></expr_stmt>
			<expr_stmt><expr><name pos:line="94" pos:column="25">daemon_opt<pos:position pos:line="94" pos:column="35"/></name> <operator pos:line="94" pos:column="36">=<pos:position pos:line="94" pos:column="37"/></operator> <literal type="number" pos:line="94" pos:column="38">0<pos:position pos:line="94" pos:column="39"/></literal></expr>;<pos:position pos:line="94" pos:column="40"/></expr_stmt>
			<expr_stmt><expr><name pos:line="95" pos:column="25">am_daemon<pos:position pos:line="95" pos:column="34"/></name> <operator pos:line="95" pos:column="35">=<pos:position pos:line="95" pos:column="36"/></operator> <literal type="number" pos:line="95" pos:column="37">1<pos:position pos:line="95" pos:column="38"/></literal></expr>;<pos:position pos:line="95" pos:column="39"/></expr_stmt>
			<return pos:line="96" pos:column="25">return <expr><literal type="number" pos:line="96" pos:column="32">1<pos:position pos:line="96" pos:column="33"/></literal></expr>;<pos:position pos:line="96" pos:column="34"/></return>

		<case pos:line="98" pos:column="17">case <expr><name pos:line="98" pos:column="22">OPT_MODIFY_WINDOW<pos:position pos:line="98" pos:column="39"/></name></expr>:<pos:position pos:line="98" pos:column="40"/></case>
			<comment type="block" pos:line="99" pos:column="25">/* The value has already been set by popt, but
			 * we need to remember that we're using a
			 * non-default setting. */</comment>
			<expr_stmt><expr><name pos:line="102" pos:column="25">modify_window_set<pos:position pos:line="102" pos:column="42"/></name> <operator pos:line="102" pos:column="43">=<pos:position pos:line="102" pos:column="44"/></operator> <literal type="number" pos:line="102" pos:column="45">1<pos:position pos:line="102" pos:column="46"/></literal></expr>;<pos:position pos:line="102" pos:column="47"/></expr_stmt>
			<break pos:line="103" pos:column="25">break;<pos:position pos:line="103" pos:column="31"/></break>

		<case pos:line="105" pos:column="17">case <expr><name pos:line="105" pos:column="22">OPT_FILTER<pos:position pos:line="105" pos:column="32"/></name></expr>:<pos:position pos:line="105" pos:column="33"/></case>
			<expr_stmt><expr><call><name pos:line="106" pos:column="25">parse_rule<pos:position pos:line="106" pos:column="35"/></name><argument_list pos:line="106" pos:column="35">(<argument><expr><operator pos:line="106" pos:column="36">&amp;<pos:position pos:line="106" pos:column="41"/></operator><name pos:line="106" pos:column="37">filter_list<pos:position pos:line="106" pos:column="48"/></name></expr></argument>, <argument><expr><call><name pos:line="106" pos:column="50">poptGetOptArg<pos:position pos:line="106" pos:column="63"/></name><argument_list pos:line="106" pos:column="63">(<argument><expr><name pos:line="106" pos:column="64">pc<pos:position pos:line="106" pos:column="66"/></name></expr></argument>)<pos:position pos:line="106" pos:column="67"/></argument_list></call></expr></argument>, <argument><expr><literal type="number" pos:line="106" pos:column="69">0<pos:position pos:line="106" pos:column="70"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="106" pos:column="72">0<pos:position pos:line="106" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="106" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="106" pos:column="75"/></expr_stmt>
			<break pos:line="107" pos:column="25">break;<pos:position pos:line="107" pos:column="31"/></break>

		<case pos:line="109" pos:column="17">case <expr><name pos:line="109" pos:column="22">OPT_EXCLUDE<pos:position pos:line="109" pos:column="33"/></name></expr>:<pos:position pos:line="109" pos:column="34"/></case>
			<expr_stmt><expr><call><name pos:line="110" pos:column="25">parse_rule<pos:position pos:line="110" pos:column="35"/></name><argument_list pos:line="110" pos:column="35">(<argument><expr><operator pos:line="110" pos:column="36">&amp;<pos:position pos:line="110" pos:column="41"/></operator><name pos:line="110" pos:column="37">filter_list<pos:position pos:line="110" pos:column="48"/></name></expr></argument>, <argument><expr><call><name pos:line="110" pos:column="50">poptGetOptArg<pos:position pos:line="110" pos:column="63"/></name><argument_list pos:line="110" pos:column="63">(<argument><expr><name pos:line="110" pos:column="64">pc<pos:position pos:line="110" pos:column="66"/></name></expr></argument>)<pos:position pos:line="110" pos:column="67"/></argument_list></call></expr></argument>,
				   <argument><expr><literal type="number" pos:line="111" pos:column="36">0<pos:position pos:line="111" pos:column="37"/></literal></expr></argument>, <argument><expr><name pos:line="111" pos:column="39">XFLG_OLD_PREFIXES<pos:position pos:line="111" pos:column="56"/></name></expr></argument>)<pos:position pos:line="111" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="111" pos:column="58"/></expr_stmt>
			<break pos:line="112" pos:column="25">break;<pos:position pos:line="112" pos:column="31"/></break>

		<case pos:line="114" pos:column="17">case <expr><name pos:line="114" pos:column="22">OPT_INCLUDE<pos:position pos:line="114" pos:column="33"/></name></expr>:<pos:position pos:line="114" pos:column="34"/></case>
			<expr_stmt><expr><call><name pos:line="115" pos:column="25">parse_rule<pos:position pos:line="115" pos:column="35"/></name><argument_list pos:line="115" pos:column="35">(<argument><expr><operator pos:line="115" pos:column="36">&amp;<pos:position pos:line="115" pos:column="41"/></operator><name pos:line="115" pos:column="37">filter_list<pos:position pos:line="115" pos:column="48"/></name></expr></argument>, <argument><expr><call><name pos:line="115" pos:column="50">poptGetOptArg<pos:position pos:line="115" pos:column="63"/></name><argument_list pos:line="115" pos:column="63">(<argument><expr><name pos:line="115" pos:column="64">pc<pos:position pos:line="115" pos:column="66"/></name></expr></argument>)<pos:position pos:line="115" pos:column="67"/></argument_list></call></expr></argument>,
				   <argument><expr><name pos:line="116" pos:column="36">MATCHFLG_INCLUDE<pos:position pos:line="116" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="116" pos:column="54">XFLG_OLD_PREFIXES<pos:position pos:line="116" pos:column="71"/></name></expr></argument>)<pos:position pos:line="116" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="116" pos:column="73"/></expr_stmt>
			<break pos:line="117" pos:column="25">break;<pos:position pos:line="117" pos:column="31"/></break>

		<case pos:line="119" pos:column="17">case <expr><name pos:line="119" pos:column="22">OPT_EXCLUDE_FROM<pos:position pos:line="119" pos:column="38"/></name></expr>:<pos:position pos:line="119" pos:column="39"/></case>
		<case pos:line="120" pos:column="17">case <expr><name pos:line="120" pos:column="22">OPT_INCLUDE_FROM<pos:position pos:line="120" pos:column="38"/></name></expr>:<pos:position pos:line="120" pos:column="39"/></case>
			<expr_stmt><expr><name pos:line="121" pos:column="25">arg<pos:position pos:line="121" pos:column="28"/></name> <operator pos:line="121" pos:column="29">=<pos:position pos:line="121" pos:column="30"/></operator> <call><name pos:line="121" pos:column="31">poptGetOptArg<pos:position pos:line="121" pos:column="44"/></name><argument_list pos:line="121" pos:column="44">(<argument><expr><name pos:line="121" pos:column="45">pc<pos:position pos:line="121" pos:column="47"/></name></expr></argument>)<pos:position pos:line="121" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="121" pos:column="49"/></expr_stmt>
			<if pos:line="122" pos:column="25">if <condition pos:line="122" pos:column="28">(<expr><name pos:line="122" pos:column="29">sanitize_paths<pos:position pos:line="122" pos:column="43"/></name></expr>)<pos:position pos:line="122" pos:column="44"/></condition><then pos:line="122" pos:column="44">
				<block type="pseudo"><expr_stmt><expr><name pos:line="123" pos:column="33">arg<pos:position pos:line="123" pos:column="36"/></name> <operator pos:line="123" pos:column="37">=<pos:position pos:line="123" pos:column="38"/></operator> <call><name pos:line="123" pos:column="39">sanitize_path<pos:position pos:line="123" pos:column="52"/></name><argument_list pos:line="123" pos:column="52">(<argument><expr><name pos:line="123" pos:column="53">NULL<pos:position pos:line="123" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="123" pos:column="59">arg<pos:position pos:line="123" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="123" pos:column="64">NULL<pos:position pos:line="123" pos:column="68"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="123" pos:column="70">0<pos:position pos:line="123" pos:column="71"/></literal></expr></argument>, <argument><expr><name pos:line="123" pos:column="73">NULL<pos:position pos:line="123" pos:column="77"/></name></expr></argument>)<pos:position pos:line="123" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="123" pos:column="79"/></expr_stmt></block></then></if>
			<if pos:line="124" pos:column="25">if <condition pos:line="124" pos:column="28">(<expr><name><name pos:line="124" pos:column="29">server_filter_list<pos:position pos:line="124" pos:column="47"/></name><operator pos:line="124" pos:column="47">.<pos:position pos:line="124" pos:column="48"/></operator><name pos:line="124" pos:column="48">head<pos:position pos:line="124" pos:column="52"/></name></name></expr>)<pos:position pos:line="124" pos:column="53"/></condition><then pos:line="124" pos:column="53"> <block pos:line="124" pos:column="54">{
				<decl_stmt><decl><type><name pos:line="125" pos:column="33">char<pos:position pos:line="125" pos:column="37"/></name> <modifier pos:line="125" pos:column="38">*<pos:position pos:line="125" pos:column="39"/></modifier></type><name pos:line="125" pos:column="39">cp<pos:position pos:line="125" pos:column="41"/></name> <init pos:line="125" pos:column="42">= <expr><call><name pos:line="125" pos:column="44">strdup<pos:position pos:line="125" pos:column="50"/></name><argument_list pos:line="125" pos:column="50">(<argument><expr><name pos:line="125" pos:column="51">arg<pos:position pos:line="125" pos:column="54"/></name></expr></argument>)<pos:position pos:line="125" pos:column="55"/></argument_list></call></expr></init></decl>;<pos:position pos:line="125" pos:column="56"/></decl_stmt>
				<if pos:line="126" pos:column="33">if <condition pos:line="126" pos:column="36">(<expr><operator pos:line="126" pos:column="37">!<pos:position pos:line="126" pos:column="38"/></operator><name pos:line="126" pos:column="38">cp<pos:position pos:line="126" pos:column="40"/></name></expr>)<pos:position pos:line="126" pos:column="41"/></condition><then pos:line="126" pos:column="41">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="127" pos:column="41">out_of_memory<pos:position pos:line="127" pos:column="54"/></name><argument_list pos:line="127" pos:column="54">(<argument><expr><literal type="string" pos:line="127" pos:column="55">"parse_arguments"<pos:position pos:line="127" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="127" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="127" pos:column="74"/></expr_stmt></block></then></if>
				<if pos:line="128" pos:column="33">if <condition pos:line="128" pos:column="36">(<expr><operator pos:line="128" pos:column="37">!<pos:position pos:line="128" pos:column="38"/></operator><operator pos:line="128" pos:column="38">*<pos:position pos:line="128" pos:column="39"/></operator><name pos:line="128" pos:column="39">cp<pos:position pos:line="128" pos:column="41"/></name></expr>)<pos:position pos:line="128" pos:column="42"/></condition><then pos:line="128" pos:column="42">
					<block type="pseudo"><goto pos:line="129" pos:column="41">goto <name pos:line="129" pos:column="46">options_rejected<pos:position pos:line="129" pos:column="62"/></name>;<pos:position pos:line="129" pos:column="63"/></goto></block></then></if>
				<expr_stmt><expr><call><name pos:line="130" pos:column="33">clean_fname<pos:position pos:line="130" pos:column="44"/></name><argument_list pos:line="130" pos:column="44">(<argument><expr><name pos:line="130" pos:column="45">cp<pos:position pos:line="130" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="130" pos:column="49">1<pos:position pos:line="130" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="130" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="130" pos:column="52"/></expr_stmt>
				<if pos:line="131" pos:column="33">if <condition pos:line="131" pos:column="36">(<expr><call><name pos:line="131" pos:column="37">check_filter<pos:position pos:line="131" pos:column="49"/></name><argument_list pos:line="131" pos:column="49">(<argument><expr><operator pos:line="131" pos:column="50">&amp;<pos:position pos:line="131" pos:column="55"/></operator><name pos:line="131" pos:column="51">server_filter_list<pos:position pos:line="131" pos:column="69"/></name></expr></argument>, <argument><expr><name pos:line="131" pos:column="71">cp<pos:position pos:line="131" pos:column="73"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="131" pos:column="75">0<pos:position pos:line="131" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="131" pos:column="77"/></argument_list></call> <operator pos:line="131" pos:column="78">&lt;<pos:position pos:line="131" pos:column="82"/></operator> <literal type="number" pos:line="131" pos:column="80">0<pos:position pos:line="131" pos:column="81"/></literal></expr>)<pos:position pos:line="131" pos:column="82"/></condition><then pos:line="131" pos:column="82">
					<block type="pseudo"><goto pos:line="132" pos:column="41">goto <name pos:line="132" pos:column="46">options_rejected<pos:position pos:line="132" pos:column="62"/></name>;<pos:position pos:line="132" pos:column="63"/></goto></block></then></if>
				<expr_stmt><expr><call><name pos:line="133" pos:column="33">free<pos:position pos:line="133" pos:column="37"/></name><argument_list pos:line="133" pos:column="37">(<argument><expr><name pos:line="133" pos:column="38">cp<pos:position pos:line="133" pos:column="40"/></name></expr></argument>)<pos:position pos:line="133" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="133" pos:column="42"/></expr_stmt>
			}<pos:position pos:line="134" pos:column="26"/></block></then></if>
			<expr_stmt><expr><call><name pos:line="135" pos:column="25">parse_filter_file<pos:position pos:line="135" pos:column="42"/></name><argument_list pos:line="135" pos:column="42">(<argument><expr><operator pos:line="135" pos:column="43">&amp;<pos:position pos:line="135" pos:column="48"/></operator><name pos:line="135" pos:column="44">filter_list<pos:position pos:line="135" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="135" pos:column="57">arg<pos:position pos:line="135" pos:column="60"/></name></expr></argument>,
				<argument><expr><ternary><condition><expr><name pos:line="136" pos:column="33">opt<pos:position pos:line="136" pos:column="36"/></name> <operator pos:line="136" pos:column="37">==<pos:position pos:line="136" pos:column="39"/></operator> <name pos:line="136" pos:column="40">OPT_INCLUDE_FROM<pos:position pos:line="136" pos:column="56"/></name></expr> ?<pos:position pos:line="136" pos:column="58"/></condition><then pos:line="136" pos:column="58"> <expr><name pos:line="136" pos:column="59">MATCHFLG_INCLUDE<pos:position pos:line="136" pos:column="75"/></name></expr> <pos:position pos:line="136" pos:column="76"/></then><else pos:line="136" pos:column="76">: <expr><literal type="number" pos:line="136" pos:column="78">0<pos:position pos:line="136" pos:column="79"/></literal></expr></else></ternary></expr></argument>,
				<argument><expr><name pos:line="137" pos:column="33">XFLG_FATAL_ERRORS<pos:position pos:line="137" pos:column="50"/></name> <operator pos:line="137" pos:column="51">|<pos:position pos:line="137" pos:column="52"/></operator> <name pos:line="137" pos:column="53">XFLG_OLD_PREFIXES<pos:position pos:line="137" pos:column="70"/></name></expr></argument>)<pos:position pos:line="137" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="137" pos:column="72"/></expr_stmt>
			<break pos:line="138" pos:column="25">break;<pos:position pos:line="138" pos:column="31"/></break>

		<case pos:line="140" pos:column="17">case <expr><literal type="char" pos:line="140" pos:column="22">'a'<pos:position pos:line="140" pos:column="25"/></literal></expr>:<pos:position pos:line="140" pos:column="26"/></case>
			<if pos:line="141" pos:column="25">if <condition pos:line="141" pos:column="28">(<expr><name pos:line="141" pos:column="29">refused_archive_part<pos:position pos:line="141" pos:column="49"/></name></expr>)<pos:position pos:line="141" pos:column="50"/></condition><then pos:line="141" pos:column="50"> <block pos:line="141" pos:column="51">{
				<expr_stmt><expr><call><name pos:line="142" pos:column="33">create_refuse_error<pos:position pos:line="142" pos:column="52"/></name><argument_list pos:line="142" pos:column="52">(<argument><expr><name pos:line="142" pos:column="53">refused_archive_part<pos:position pos:line="142" pos:column="73"/></name></expr></argument>)<pos:position pos:line="142" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="142" pos:column="75"/></expr_stmt>
				<return pos:line="143" pos:column="33">return <expr><literal type="number" pos:line="143" pos:column="40">0<pos:position pos:line="143" pos:column="41"/></literal></expr>;<pos:position pos:line="143" pos:column="42"/></return>
			}<pos:position pos:line="144" pos:column="26"/></block></then></if>
			<if pos:line="145" pos:column="25">if <condition pos:line="145" pos:column="28">(<expr><operator pos:line="145" pos:column="29">!<pos:position pos:line="145" pos:column="30"/></operator><name pos:line="145" pos:column="30">recurse<pos:position pos:line="145" pos:column="37"/></name></expr>)<pos:position pos:line="145" pos:column="38"/></condition><then pos:line="145" pos:column="38"> <comment type="block" pos:line="145" pos:column="39">/* preserve recurse == 2 */</comment>
				<block type="pseudo"><expr_stmt><expr><name pos:line="146" pos:column="33">recurse<pos:position pos:line="146" pos:column="40"/></name> <operator pos:line="146" pos:column="41">=<pos:position pos:line="146" pos:column="42"/></operator> <literal type="number" pos:line="146" pos:column="43">1<pos:position pos:line="146" pos:column="44"/></literal></expr>;<pos:position pos:line="146" pos:column="45"/></expr_stmt></block></then></if>
<cpp:ifdef pos:line="147" pos:column="1">#<cpp:directive pos:line="147" pos:column="2">ifdef<pos:position pos:line="147" pos:column="7"/></cpp:directive> <name pos:line="147" pos:column="8">SUPPORT_LINKS<pos:position pos:line="147" pos:column="21"/></name></cpp:ifdef>
			<expr_stmt><expr><name pos:line="148" pos:column="25">preserve_links<pos:position pos:line="148" pos:column="39"/></name> <operator pos:line="148" pos:column="40">=<pos:position pos:line="148" pos:column="41"/></operator> <literal type="number" pos:line="148" pos:column="42">1<pos:position pos:line="148" pos:column="43"/></literal></expr>;<pos:position pos:line="148" pos:column="44"/></expr_stmt>
<cpp:endif pos:line="149" pos:column="1">#<cpp:directive pos:line="149" pos:column="2">endif<pos:position pos:line="149" pos:column="7"/></cpp:directive></cpp:endif>
			<expr_stmt><expr><name pos:line="150" pos:column="25">preserve_perms<pos:position pos:line="150" pos:column="39"/></name> <operator pos:line="150" pos:column="40">=<pos:position pos:line="150" pos:column="41"/></operator> <literal type="number" pos:line="150" pos:column="42">1<pos:position pos:line="150" pos:column="43"/></literal></expr>;<pos:position pos:line="150" pos:column="44"/></expr_stmt>
			<expr_stmt><expr><name pos:line="151" pos:column="25">preserve_times<pos:position pos:line="151" pos:column="39"/></name> <operator pos:line="151" pos:column="40">=<pos:position pos:line="151" pos:column="41"/></operator> <literal type="number" pos:line="151" pos:column="42">1<pos:position pos:line="151" pos:column="43"/></literal></expr>;<pos:position pos:line="151" pos:column="44"/></expr_stmt>
			<expr_stmt><expr><name pos:line="152" pos:column="25">preserve_gid<pos:position pos:line="152" pos:column="37"/></name> <operator pos:line="152" pos:column="38">=<pos:position pos:line="152" pos:column="39"/></operator> <literal type="number" pos:line="152" pos:column="40">1<pos:position pos:line="152" pos:column="41"/></literal></expr>;<pos:position pos:line="152" pos:column="42"/></expr_stmt>
			<expr_stmt><expr><name pos:line="153" pos:column="25">preserve_uid<pos:position pos:line="153" pos:column="37"/></name> <operator pos:line="153" pos:column="38">=<pos:position pos:line="153" pos:column="39"/></operator> <literal type="number" pos:line="153" pos:column="40">1<pos:position pos:line="153" pos:column="41"/></literal></expr>;<pos:position pos:line="153" pos:column="42"/></expr_stmt>
			<expr_stmt><expr><name pos:line="154" pos:column="25">preserve_devices<pos:position pos:line="154" pos:column="41"/></name> <operator pos:line="154" pos:column="42">=<pos:position pos:line="154" pos:column="43"/></operator> <literal type="number" pos:line="154" pos:column="44">1<pos:position pos:line="154" pos:column="45"/></literal></expr>;<pos:position pos:line="154" pos:column="46"/></expr_stmt>
			<expr_stmt><expr><name pos:line="155" pos:column="25">preserve_specials<pos:position pos:line="155" pos:column="42"/></name> <operator pos:line="155" pos:column="43">=<pos:position pos:line="155" pos:column="44"/></operator> <literal type="number" pos:line="155" pos:column="45">1<pos:position pos:line="155" pos:column="46"/></literal></expr>;<pos:position pos:line="155" pos:column="47"/></expr_stmt>
			<break pos:line="156" pos:column="25">break;<pos:position pos:line="156" pos:column="31"/></break>

		<case pos:line="158" pos:column="17">case <expr><literal type="char" pos:line="158" pos:column="22">'D'<pos:position pos:line="158" pos:column="25"/></literal></expr>:<pos:position pos:line="158" pos:column="26"/></case>
			<expr_stmt><expr><name pos:line="159" pos:column="25">preserve_devices<pos:position pos:line="159" pos:column="41"/></name> <operator pos:line="159" pos:column="42">=<pos:position pos:line="159" pos:column="43"/></operator> <name pos:line="159" pos:column="44">preserve_specials<pos:position pos:line="159" pos:column="61"/></name> <operator pos:line="159" pos:column="62">=<pos:position pos:line="159" pos:column="63"/></operator> <literal type="number" pos:line="159" pos:column="64">1<pos:position pos:line="159" pos:column="65"/></literal></expr>;<pos:position pos:line="159" pos:column="66"/></expr_stmt>
			<break pos:line="160" pos:column="25">break;<pos:position pos:line="160" pos:column="31"/></break>

		<case pos:line="162" pos:column="17">case <expr><name pos:line="162" pos:column="22">OPT_NO_D<pos:position pos:line="162" pos:column="30"/></name></expr>:<pos:position pos:line="162" pos:column="31"/></case>
			<expr_stmt><expr><name pos:line="163" pos:column="25">preserve_devices<pos:position pos:line="163" pos:column="41"/></name> <operator pos:line="163" pos:column="42">=<pos:position pos:line="163" pos:column="43"/></operator> <name pos:line="163" pos:column="44">preserve_specials<pos:position pos:line="163" pos:column="61"/></name> <operator pos:line="163" pos:column="62">=<pos:position pos:line="163" pos:column="63"/></operator> <literal type="number" pos:line="163" pos:column="64">0<pos:position pos:line="163" pos:column="65"/></literal></expr>;<pos:position pos:line="163" pos:column="66"/></expr_stmt>
			<break pos:line="164" pos:column="25">break;<pos:position pos:line="164" pos:column="31"/></break>

		<case pos:line="166" pos:column="17">case <expr><literal type="char" pos:line="166" pos:column="22">'h'<pos:position pos:line="166" pos:column="25"/></literal></expr>:<pos:position pos:line="166" pos:column="26"/></case>
			<expr_stmt><expr><name pos:line="167" pos:column="25">human_readable<pos:position pos:line="167" pos:column="39"/></name><operator pos:line="167" pos:column="39">++<pos:position pos:line="167" pos:column="41"/></operator></expr>;<pos:position pos:line="167" pos:column="42"/></expr_stmt>
			<break pos:line="168" pos:column="25">break;<pos:position pos:line="168" pos:column="31"/></break>

		<case pos:line="170" pos:column="17">case <expr><literal type="char" pos:line="170" pos:column="22">'i'<pos:position pos:line="170" pos:column="25"/></literal></expr>:<pos:position pos:line="170" pos:column="26"/></case>
			<expr_stmt><expr><name pos:line="171" pos:column="25">itemize_changes<pos:position pos:line="171" pos:column="40"/></name><operator pos:line="171" pos:column="40">++<pos:position pos:line="171" pos:column="42"/></operator></expr>;<pos:position pos:line="171" pos:column="43"/></expr_stmt>
			<break pos:line="172" pos:column="25">break;<pos:position pos:line="172" pos:column="31"/></break>

		<case pos:line="174" pos:column="17">case <expr><literal type="char" pos:line="174" pos:column="22">'v'<pos:position pos:line="174" pos:column="25"/></literal></expr>:<pos:position pos:line="174" pos:column="26"/></case>
			<expr_stmt><expr><name pos:line="175" pos:column="25">verbose<pos:position pos:line="175" pos:column="32"/></name><operator pos:line="175" pos:column="32">++<pos:position pos:line="175" pos:column="34"/></operator></expr>;<pos:position pos:line="175" pos:column="35"/></expr_stmt>
			<break pos:line="176" pos:column="25">break;<pos:position pos:line="176" pos:column="31"/></break>

		<case pos:line="178" pos:column="17">case <expr><literal type="char" pos:line="178" pos:column="22">'q'<pos:position pos:line="178" pos:column="25"/></literal></expr>:<pos:position pos:line="178" pos:column="26"/></case>
			<if pos:line="179" pos:column="25">if <condition pos:line="179" pos:column="28">(<expr><name pos:line="179" pos:column="29">frommain<pos:position pos:line="179" pos:column="37"/></name></expr>)<pos:position pos:line="179" pos:column="38"/></condition><then pos:line="179" pos:column="38">
				<block type="pseudo"><expr_stmt><expr><name pos:line="180" pos:column="33">quiet<pos:position pos:line="180" pos:column="38"/></name><operator pos:line="180" pos:column="38">++<pos:position pos:line="180" pos:column="40"/></operator></expr>;<pos:position pos:line="180" pos:column="41"/></expr_stmt></block></then></if>
			<break pos:line="181" pos:column="25">break;<pos:position pos:line="181" pos:column="31"/></break>

		<case pos:line="183" pos:column="17">case <expr><literal type="char" pos:line="183" pos:column="22">'x'<pos:position pos:line="183" pos:column="25"/></literal></expr>:<pos:position pos:line="183" pos:column="26"/></case>
			<expr_stmt><expr><name pos:line="184" pos:column="25">one_file_system<pos:position pos:line="184" pos:column="40"/></name><operator pos:line="184" pos:column="40">++<pos:position pos:line="184" pos:column="42"/></operator></expr>;<pos:position pos:line="184" pos:column="43"/></expr_stmt>
			<break pos:line="185" pos:column="25">break;<pos:position pos:line="185" pos:column="31"/></break>

		<case pos:line="187" pos:column="17">case <expr><literal type="char" pos:line="187" pos:column="22">'F'<pos:position pos:line="187" pos:column="25"/></literal></expr>:<pos:position pos:line="187" pos:column="26"/></case>
			<switch pos:line="188" pos:column="25">switch <condition pos:line="188" pos:column="32">(<expr><operator pos:line="188" pos:column="33">++<pos:position pos:line="188" pos:column="35"/></operator><name pos:line="188" pos:column="35">F_option_cnt<pos:position pos:line="188" pos:column="47"/></name></expr>)<pos:position pos:line="188" pos:column="48"/></condition> <block pos:line="188" pos:column="49">{
			<case pos:line="189" pos:column="25">case <expr><literal type="number" pos:line="189" pos:column="30">1<pos:position pos:line="189" pos:column="31"/></literal></expr>:<pos:position pos:line="189" pos:column="32"/></case>
				<expr_stmt><expr><call><name pos:line="190" pos:column="33">parse_rule<pos:position pos:line="190" pos:column="43"/></name><argument_list pos:line="190" pos:column="43">(<argument><expr><operator pos:line="190" pos:column="44">&amp;<pos:position pos:line="190" pos:column="49"/></operator><name pos:line="190" pos:column="45">filter_list<pos:position pos:line="190" pos:column="56"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="190" pos:column="57">": /.rsync-filter"<pos:position pos:line="190" pos:column="75"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="190" pos:column="76">0<pos:position pos:line="190" pos:column="77"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="190" pos:column="78">0<pos:position pos:line="190" pos:column="79"/></literal></expr></argument>)<pos:position pos:line="190" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="190" pos:column="81"/></expr_stmt>
				<break pos:line="191" pos:column="33">break;<pos:position pos:line="191" pos:column="39"/></break>
			<case pos:line="192" pos:column="25">case <expr><literal type="number" pos:line="192" pos:column="30">2<pos:position pos:line="192" pos:column="31"/></literal></expr>:<pos:position pos:line="192" pos:column="32"/></case>
				<expr_stmt><expr><call><name pos:line="193" pos:column="33">parse_rule<pos:position pos:line="193" pos:column="43"/></name><argument_list pos:line="193" pos:column="43">(<argument><expr><operator pos:line="193" pos:column="44">&amp;<pos:position pos:line="193" pos:column="49"/></operator><name pos:line="193" pos:column="45">filter_list<pos:position pos:line="193" pos:column="56"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="193" pos:column="57">"- .rsync-filter"<pos:position pos:line="193" pos:column="74"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="193" pos:column="75">0<pos:position pos:line="193" pos:column="76"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="193" pos:column="77">0<pos:position pos:line="193" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="193" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="193" pos:column="80"/></expr_stmt>
				<break pos:line="194" pos:column="33">break;<pos:position pos:line="194" pos:column="39"/></break>
			}<pos:position pos:line="195" pos:column="26"/></block></switch>
			<break pos:line="196" pos:column="25">break;<pos:position pos:line="196" pos:column="31"/></break>

		<case pos:line="198" pos:column="17">case <expr><literal type="char" pos:line="198" pos:column="22">'P'<pos:position pos:line="198" pos:column="25"/></literal></expr>:<pos:position pos:line="198" pos:column="26"/></case>
			<if pos:line="199" pos:column="25">if <condition pos:line="199" pos:column="28">(<expr><name pos:line="199" pos:column="29">refused_partial<pos:position pos:line="199" pos:column="44"/></name> <operator pos:line="199" pos:column="45">||<pos:position pos:line="199" pos:column="47"/></operator> <name pos:line="199" pos:column="48">refused_progress<pos:position pos:line="199" pos:column="64"/></name></expr>)<pos:position pos:line="199" pos:column="65"/></condition><then pos:line="199" pos:column="65"> <block pos:line="199" pos:column="66">{
				<expr_stmt><expr><call><name pos:line="200" pos:column="33">create_refuse_error<pos:position pos:line="200" pos:column="52"/></name><argument_list pos:line="200" pos:column="52">(<argument><expr><ternary><condition><expr><name pos:line="200" pos:column="53">refused_partial<pos:position pos:line="200" pos:column="68"/></name></expr>
				    ?<pos:position pos:line="201" pos:column="38"/></condition><then pos:line="201" pos:column="38"> <expr><name pos:line="201" pos:column="39">refused_partial<pos:position pos:line="201" pos:column="54"/></name></expr> <pos:position pos:line="201" pos:column="55"/></then><else pos:line="201" pos:column="55">: <expr><name pos:line="201" pos:column="57">refused_progress<pos:position pos:line="201" pos:column="73"/></name></expr></else></ternary></expr></argument>)<pos:position pos:line="201" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="201" pos:column="75"/></expr_stmt>
				<return pos:line="202" pos:column="33">return <expr><literal type="number" pos:line="202" pos:column="40">0<pos:position pos:line="202" pos:column="41"/></literal></expr>;<pos:position pos:line="202" pos:column="42"/></return>
			}<pos:position pos:line="203" pos:column="26"/></block></then></if>
			<expr_stmt><expr><name pos:line="204" pos:column="25">do_progress<pos:position pos:line="204" pos:column="36"/></name> <operator pos:line="204" pos:column="37">=<pos:position pos:line="204" pos:column="38"/></operator> <literal type="number" pos:line="204" pos:column="39">1<pos:position pos:line="204" pos:column="40"/></literal></expr>;<pos:position pos:line="204" pos:column="41"/></expr_stmt>
			<expr_stmt><expr><name pos:line="205" pos:column="25">keep_partial<pos:position pos:line="205" pos:column="37"/></name> <operator pos:line="205" pos:column="38">=<pos:position pos:line="205" pos:column="39"/></operator> <literal type="number" pos:line="205" pos:column="40">1<pos:position pos:line="205" pos:column="41"/></literal></expr>;<pos:position pos:line="205" pos:column="42"/></expr_stmt>
			<break pos:line="206" pos:column="25">break;<pos:position pos:line="206" pos:column="31"/></break>

		<case pos:line="208" pos:column="17">case <expr><literal type="char" pos:line="208" pos:column="22">'z'<pos:position pos:line="208" pos:column="25"/></literal></expr>:<pos:position pos:line="208" pos:column="26"/></case>
			<if pos:line="209" pos:column="25">if <condition pos:line="209" pos:column="28">(<expr><name><name pos:line="209" pos:column="29">def_compress_level<pos:position pos:line="209" pos:column="47"/></name> <argument_list type="generic" pos:line="209" pos:column="48">&lt; <argument><expr><name pos:line="209" pos:column="50">Z_DEFAULT_COMPRESSION<pos:position pos:line="209" pos:column="71"/></name>
			 <operator pos:line="210" pos:column="26">||<pos:position pos:line="210" pos:column="28"/></operator> <name pos:line="210" pos:column="29">def_compress_level<pos:position pos:line="210" pos:column="47"/></name></expr></argument> &gt;<pos:position pos:line="210" pos:column="52"/></argument_list></name> <name pos:line="210" pos:column="50">Z_BEST_COMPRESSION<pos:position pos:line="210" pos:column="68"/></name></expr>)<pos:position pos:line="210" pos:column="69"/></condition><then pos:line="210" pos:column="69"> <block pos:line="210" pos:column="70">{
				<expr_stmt><expr><call><name pos:line="211" pos:column="33">snprintf<pos:position pos:line="211" pos:column="41"/></name><argument_list pos:line="211" pos:column="41">(<argument><expr><name pos:line="211" pos:column="42">err_buf<pos:position pos:line="211" pos:column="49"/></name></expr></argument>, <argument><expr><sizeof pos:line="211" pos:column="51">sizeof <name pos:line="211" pos:column="58">err_buf<pos:position pos:line="211" pos:column="65"/></name></sizeof></expr></argument>,
					<argument><expr><literal type="string" pos:line="212" pos:column="41">"--compress-level value is invalid: %d\n"<pos:position pos:line="212" pos:column="82"/></literal></expr></argument>,
					<argument><expr><name pos:line="213" pos:column="41">def_compress_level<pos:position pos:line="213" pos:column="59"/></name></expr></argument>)<pos:position pos:line="213" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="213" pos:column="61"/></expr_stmt>
				<return pos:line="214" pos:column="33">return <expr><literal type="number" pos:line="214" pos:column="40">0<pos:position pos:line="214" pos:column="41"/></literal></expr>;<pos:position pos:line="214" pos:column="42"/></return>
			}<pos:position pos:line="215" pos:column="26"/></block></then></if>
			<expr_stmt><expr><name pos:line="216" pos:column="25">do_compression<pos:position pos:line="216" pos:column="39"/></name> <operator pos:line="216" pos:column="40">=<pos:position pos:line="216" pos:column="41"/></operator> <name pos:line="216" pos:column="42">def_compress_level<pos:position pos:line="216" pos:column="60"/></name> <operator pos:line="216" pos:column="61">!=<pos:position pos:line="216" pos:column="63"/></operator> <name pos:line="216" pos:column="64">Z_NO_COMPRESSION<pos:position pos:line="216" pos:column="80"/></name></expr>;<pos:position pos:line="216" pos:column="81"/></expr_stmt>
			<if pos:line="217" pos:column="25">if <condition pos:line="217" pos:column="28">(<expr><name pos:line="217" pos:column="29">do_compression<pos:position pos:line="217" pos:column="43"/></name> <operator pos:line="217" pos:column="44">&amp;&amp;<pos:position pos:line="217" pos:column="54"/></operator> <name pos:line="217" pos:column="47">refused_compress<pos:position pos:line="217" pos:column="63"/></name></expr>)<pos:position pos:line="217" pos:column="64"/></condition><then pos:line="217" pos:column="64"> <block pos:line="217" pos:column="65">{
				<expr_stmt><expr><call><name pos:line="218" pos:column="33">create_refuse_error<pos:position pos:line="218" pos:column="52"/></name><argument_list pos:line="218" pos:column="52">(<argument><expr><name pos:line="218" pos:column="53">refused_compress<pos:position pos:line="218" pos:column="69"/></name></expr></argument>)<pos:position pos:line="218" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="218" pos:column="71"/></expr_stmt>
				<return pos:line="219" pos:column="33">return <expr><literal type="number" pos:line="219" pos:column="40">0<pos:position pos:line="219" pos:column="41"/></literal></expr>;<pos:position pos:line="219" pos:column="42"/></return>
			}<pos:position pos:line="220" pos:column="26"/></block></then></if>
			<break pos:line="221" pos:column="25">break;<pos:position pos:line="221" pos:column="31"/></break>

		<case pos:line="223" pos:column="17">case <expr><name pos:line="223" pos:column="22">OPT_WRITE_BATCH<pos:position pos:line="223" pos:column="37"/></name></expr>:<pos:position pos:line="223" pos:column="38"/></case>
			<comment type="block" pos:line="224" pos:column="25">/* batch_name is already set */</comment>
			<expr_stmt><expr><name pos:line="225" pos:column="25">write_batch<pos:position pos:line="225" pos:column="36"/></name> <operator pos:line="225" pos:column="37">=<pos:position pos:line="225" pos:column="38"/></operator> <literal type="number" pos:line="225" pos:column="39">1<pos:position pos:line="225" pos:column="40"/></literal></expr>;<pos:position pos:line="225" pos:column="41"/></expr_stmt>
			<break pos:line="226" pos:column="25">break;<pos:position pos:line="226" pos:column="31"/></break>

		<case pos:line="228" pos:column="17">case <expr><name pos:line="228" pos:column="22">OPT_ONLY_WRITE_BATCH<pos:position pos:line="228" pos:column="42"/></name></expr>:<pos:position pos:line="228" pos:column="43"/></case>
			<comment type="block" pos:line="229" pos:column="25">/* batch_name is already set */</comment>
			<expr_stmt><expr><name pos:line="230" pos:column="25">write_batch<pos:position pos:line="230" pos:column="36"/></name> <operator pos:line="230" pos:column="37">=<pos:position pos:line="230" pos:column="38"/></operator> <operator pos:line="230" pos:column="39">-<pos:position pos:line="230" pos:column="40"/></operator><literal type="number" pos:line="230" pos:column="40">1<pos:position pos:line="230" pos:column="41"/></literal></expr>;<pos:position pos:line="230" pos:column="42"/></expr_stmt>
			<break pos:line="231" pos:column="25">break;<pos:position pos:line="231" pos:column="31"/></break>

		<case pos:line="233" pos:column="17">case <expr><name pos:line="233" pos:column="22">OPT_READ_BATCH<pos:position pos:line="233" pos:column="36"/></name></expr>:<pos:position pos:line="233" pos:column="37"/></case>
			<comment type="block" pos:line="234" pos:column="25">/* batch_name is already set */</comment>
			<expr_stmt><expr><name pos:line="235" pos:column="25">read_batch<pos:position pos:line="235" pos:column="35"/></name> <operator pos:line="235" pos:column="36">=<pos:position pos:line="235" pos:column="37"/></operator> <literal type="number" pos:line="235" pos:column="38">1<pos:position pos:line="235" pos:column="39"/></literal></expr>;<pos:position pos:line="235" pos:column="40"/></expr_stmt>
			<break pos:line="236" pos:column="25">break;<pos:position pos:line="236" pos:column="31"/></break>

		<case pos:line="238" pos:column="17">case <expr><name pos:line="238" pos:column="22">OPT_MAX_SIZE<pos:position pos:line="238" pos:column="34"/></name></expr>:<pos:position pos:line="238" pos:column="35"/></case>
			<if pos:line="239" pos:column="25">if <condition pos:line="239" pos:column="28">(<expr><operator pos:line="239" pos:column="29">(<pos:position pos:line="239" pos:column="30"/></operator><name pos:line="239" pos:column="30">max_size<pos:position pos:line="239" pos:column="38"/></name> <operator pos:line="239" pos:column="39">=<pos:position pos:line="239" pos:column="40"/></operator> <call><name pos:line="239" pos:column="41">parse_size_arg<pos:position pos:line="239" pos:column="55"/></name><argument_list pos:line="239" pos:column="55">(<argument><expr><operator pos:line="239" pos:column="56">&amp;<pos:position pos:line="239" pos:column="61"/></operator><name pos:line="239" pos:column="57">max_size_arg<pos:position pos:line="239" pos:column="69"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="239" pos:column="71">'b'<pos:position pos:line="239" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="239" pos:column="75"/></argument_list></call><operator pos:line="239" pos:column="75">)<pos:position pos:line="239" pos:column="76"/></operator> <operator pos:line="239" pos:column="77">&lt;=<pos:position pos:line="239" pos:column="82"/></operator> <literal type="number" pos:line="239" pos:column="80">0<pos:position pos:line="239" pos:column="81"/></literal></expr>)<pos:position pos:line="239" pos:column="82"/></condition><then pos:line="239" pos:column="82"> <block pos:line="239" pos:column="83">{
				<expr_stmt><expr><call><name pos:line="240" pos:column="33">snprintf<pos:position pos:line="240" pos:column="41"/></name><argument_list pos:line="240" pos:column="41">(<argument><expr><name pos:line="240" pos:column="42">err_buf<pos:position pos:line="240" pos:column="49"/></name></expr></argument>, <argument><expr><sizeof pos:line="240" pos:column="51">sizeof <name pos:line="240" pos:column="58">err_buf<pos:position pos:line="240" pos:column="65"/></name></sizeof></expr></argument>,
					<argument><expr><literal type="string" pos:line="241" pos:column="41">"--max-size value is invalid: %s\n"<pos:position pos:line="241" pos:column="76"/></literal></expr></argument>,
					<argument><expr><name pos:line="242" pos:column="41">max_size_arg<pos:position pos:line="242" pos:column="53"/></name></expr></argument>)<pos:position pos:line="242" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="242" pos:column="55"/></expr_stmt>
				<return pos:line="243" pos:column="33">return <expr><literal type="number" pos:line="243" pos:column="40">0<pos:position pos:line="243" pos:column="41"/></literal></expr>;<pos:position pos:line="243" pos:column="42"/></return>
			}<pos:position pos:line="244" pos:column="26"/></block></then></if>
			<break pos:line="245" pos:column="25">break;<pos:position pos:line="245" pos:column="31"/></break>

		<case pos:line="247" pos:column="17">case <expr><name pos:line="247" pos:column="22">OPT_MIN_SIZE<pos:position pos:line="247" pos:column="34"/></name></expr>:<pos:position pos:line="247" pos:column="35"/></case>
			<if pos:line="248" pos:column="25">if <condition pos:line="248" pos:column="28">(<expr><operator pos:line="248" pos:column="29">(<pos:position pos:line="248" pos:column="30"/></operator><name pos:line="248" pos:column="30">min_size<pos:position pos:line="248" pos:column="38"/></name> <operator pos:line="248" pos:column="39">=<pos:position pos:line="248" pos:column="40"/></operator> <call><name pos:line="248" pos:column="41">parse_size_arg<pos:position pos:line="248" pos:column="55"/></name><argument_list pos:line="248" pos:column="55">(<argument><expr><operator pos:line="248" pos:column="56">&amp;<pos:position pos:line="248" pos:column="61"/></operator><name pos:line="248" pos:column="57">min_size_arg<pos:position pos:line="248" pos:column="69"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="248" pos:column="71">'b'<pos:position pos:line="248" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="248" pos:column="75"/></argument_list></call><operator pos:line="248" pos:column="75">)<pos:position pos:line="248" pos:column="76"/></operator> <operator pos:line="248" pos:column="77">&lt;=<pos:position pos:line="248" pos:column="82"/></operator> <literal type="number" pos:line="248" pos:column="80">0<pos:position pos:line="248" pos:column="81"/></literal></expr>)<pos:position pos:line="248" pos:column="82"/></condition><then pos:line="248" pos:column="82"> <block pos:line="248" pos:column="83">{
				<expr_stmt><expr><call><name pos:line="249" pos:column="33">snprintf<pos:position pos:line="249" pos:column="41"/></name><argument_list pos:line="249" pos:column="41">(<argument><expr><name pos:line="249" pos:column="42">err_buf<pos:position pos:line="249" pos:column="49"/></name></expr></argument>, <argument><expr><sizeof pos:line="249" pos:column="51">sizeof <name pos:line="249" pos:column="58">err_buf<pos:position pos:line="249" pos:column="65"/></name></sizeof></expr></argument>,
					<argument><expr><literal type="string" pos:line="250" pos:column="41">"--min-size value is invalid: %s\n"<pos:position pos:line="250" pos:column="76"/></literal></expr></argument>,
					<argument><expr><name pos:line="251" pos:column="41">min_size_arg<pos:position pos:line="251" pos:column="53"/></name></expr></argument>)<pos:position pos:line="251" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="251" pos:column="55"/></expr_stmt>
				<return pos:line="252" pos:column="33">return <expr><literal type="number" pos:line="252" pos:column="40">0<pos:position pos:line="252" pos:column="41"/></literal></expr>;<pos:position pos:line="252" pos:column="42"/></return>
			}<pos:position pos:line="253" pos:column="26"/></block></then></if>
			<break pos:line="254" pos:column="25">break;<pos:position pos:line="254" pos:column="31"/></break>

		<case pos:line="256" pos:column="17">case <expr><name pos:line="256" pos:column="22">OPT_LINK_DEST<pos:position pos:line="256" pos:column="35"/></name></expr>:<pos:position pos:line="256" pos:column="36"/></case>
<cpp:ifdef pos:line="257" pos:column="1">#<cpp:directive pos:line="257" pos:column="2">ifdef<pos:position pos:line="257" pos:column="7"/></cpp:directive> <name pos:line="257" pos:column="8">SUPPORT_HARD_LINKS<pos:position pos:line="257" pos:column="26"/></name></cpp:ifdef>
			<expr_stmt><expr><name pos:line="258" pos:column="25">link_dest<pos:position pos:line="258" pos:column="34"/></name> <operator pos:line="258" pos:column="35">=<pos:position pos:line="258" pos:column="36"/></operator> <literal type="number" pos:line="258" pos:column="37">1<pos:position pos:line="258" pos:column="38"/></literal></expr>;<pos:position pos:line="258" pos:column="39"/></expr_stmt>
			<expr_stmt><expr><name pos:line="259" pos:column="25">dest_option<pos:position pos:line="259" pos:column="36"/></name> <operator pos:line="259" pos:column="37">=<pos:position pos:line="259" pos:column="38"/></operator> <literal type="string" pos:line="259" pos:column="39">"--link-dest"<pos:position pos:line="259" pos:column="52"/></literal></expr>;<pos:position pos:line="259" pos:column="53"/></expr_stmt>
			<goto pos:line="260" pos:column="25">goto <name pos:line="260" pos:column="30">set_dest_dir<pos:position pos:line="260" pos:column="42"/></name>;<pos:position pos:line="260" pos:column="43"/></goto>
<cpp:else pos:line="261" pos:column="1">#<cpp:directive pos:line="261" pos:column="2">else<pos:position pos:line="261" pos:column="6"/></cpp:directive></cpp:else>
			<expr_stmt><expr><call><name pos:line="262" pos:column="25">snprintf<pos:position pos:line="262" pos:column="33"/></name><argument_list pos:line="262" pos:column="33">(<argument><expr><name pos:line="262" pos:column="34">err_buf<pos:position pos:line="262" pos:column="41"/></name></expr></argument>, <argument><expr><sizeof pos:line="262" pos:column="43">sizeof <name pos:line="262" pos:column="50">err_buf<pos:position pos:line="262" pos:column="57"/></name></sizeof></expr></argument>,
				 <argument><expr><literal type="string" pos:line="263" pos:column="34">"hard links are not supported on this %s\n"<pos:position pos:line="263" pos:column="77"/></literal></expr></argument>,
				 <argument><expr><ternary><condition><expr><name pos:line="264" pos:column="34">am_server<pos:position pos:line="264" pos:column="43"/></name></expr> ?<pos:position pos:line="264" pos:column="45"/></condition><then pos:line="264" pos:column="45"> <expr><literal type="string" pos:line="264" pos:column="46">"server"<pos:position pos:line="264" pos:column="54"/></literal></expr> <pos:position pos:line="264" pos:column="55"/></then><else pos:line="264" pos:column="55">: <expr><literal type="string" pos:line="264" pos:column="57">"client"<pos:position pos:line="264" pos:column="65"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="264" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="264" pos:column="67"/></expr_stmt>
			<return pos:line="265" pos:column="25">return <expr><literal type="number" pos:line="265" pos:column="32">0<pos:position pos:line="265" pos:column="33"/></literal></expr>;<pos:position pos:line="265" pos:column="34"/></return>
<cpp:endif pos:line="266" pos:column="1">#<cpp:directive pos:line="266" pos:column="2">endif<pos:position pos:line="266" pos:column="7"/></cpp:directive></cpp:endif>

		<case pos:line="268" pos:column="17">case <expr><name pos:line="268" pos:column="22">OPT_COPY_DEST<pos:position pos:line="268" pos:column="35"/></name></expr>:<pos:position pos:line="268" pos:column="36"/></case>
			<expr_stmt><expr><name pos:line="269" pos:column="25">copy_dest<pos:position pos:line="269" pos:column="34"/></name> <operator pos:line="269" pos:column="35">=<pos:position pos:line="269" pos:column="36"/></operator> <literal type="number" pos:line="269" pos:column="37">1<pos:position pos:line="269" pos:column="38"/></literal></expr>;<pos:position pos:line="269" pos:column="39"/></expr_stmt>
			<expr_stmt><expr><name pos:line="270" pos:column="25">dest_option<pos:position pos:line="270" pos:column="36"/></name> <operator pos:line="270" pos:column="37">=<pos:position pos:line="270" pos:column="38"/></operator> <literal type="string" pos:line="270" pos:column="39">"--copy-dest"<pos:position pos:line="270" pos:column="52"/></literal></expr>;<pos:position pos:line="270" pos:column="53"/></expr_stmt>
			<goto pos:line="271" pos:column="25">goto <name pos:line="271" pos:column="30">set_dest_dir<pos:position pos:line="271" pos:column="42"/></name>;<pos:position pos:line="271" pos:column="43"/></goto>

		<case pos:line="273" pos:column="17">case <expr><name pos:line="273" pos:column="22">OPT_COMPARE_DEST<pos:position pos:line="273" pos:column="38"/></name></expr>:<pos:position pos:line="273" pos:column="39"/></case>
			<expr_stmt><expr><name pos:line="274" pos:column="25">compare_dest<pos:position pos:line="274" pos:column="37"/></name> <operator pos:line="274" pos:column="38">=<pos:position pos:line="274" pos:column="39"/></operator> <literal type="number" pos:line="274" pos:column="40">1<pos:position pos:line="274" pos:column="41"/></literal></expr>;<pos:position pos:line="274" pos:column="42"/></expr_stmt>
			<expr_stmt><expr><name pos:line="275" pos:column="25">dest_option<pos:position pos:line="275" pos:column="36"/></name> <operator pos:line="275" pos:column="37">=<pos:position pos:line="275" pos:column="38"/></operator> <literal type="string" pos:line="275" pos:column="39">"--compare-dest"<pos:position pos:line="275" pos:column="55"/></literal></expr>;<pos:position pos:line="275" pos:column="56"/></expr_stmt>
		<label><name pos:line="276" pos:column="17">set_dest_dir<pos:position pos:line="276" pos:column="29"/></name>:<pos:position pos:line="276" pos:column="30"/></label>
			<if pos:line="277" pos:column="25">if <condition pos:line="277" pos:column="28">(<expr><name pos:line="277" pos:column="29">basis_dir_cnt<pos:position pos:line="277" pos:column="42"/></name> <operator pos:line="277" pos:column="43">&gt;=<pos:position pos:line="277" pos:column="48"/></operator> <name pos:line="277" pos:column="46">MAX_BASIS_DIRS<pos:position pos:line="277" pos:column="60"/></name></expr>)<pos:position pos:line="277" pos:column="61"/></condition><then pos:line="277" pos:column="61"> <block pos:line="277" pos:column="62">{
				<expr_stmt><expr><call><name pos:line="278" pos:column="33">snprintf<pos:position pos:line="278" pos:column="41"/></name><argument_list pos:line="278" pos:column="41">(<argument><expr><name pos:line="278" pos:column="42">err_buf<pos:position pos:line="278" pos:column="49"/></name></expr></argument>, <argument><expr><sizeof pos:line="278" pos:column="51">sizeof <name pos:line="278" pos:column="58">err_buf<pos:position pos:line="278" pos:column="65"/></name></sizeof></expr></argument>,
					<argument><expr><literal type="string" pos:line="279" pos:column="41">"ERROR: at most %d %s args may be specified\n"<pos:position pos:line="279" pos:column="87"/></literal></expr></argument>,
					<argument><expr><name pos:line="280" pos:column="41">MAX_BASIS_DIRS<pos:position pos:line="280" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="280" pos:column="57">dest_option<pos:position pos:line="280" pos:column="68"/></name></expr></argument>)<pos:position pos:line="280" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="280" pos:column="70"/></expr_stmt>
				<return pos:line="281" pos:column="33">return <expr><literal type="number" pos:line="281" pos:column="40">0<pos:position pos:line="281" pos:column="41"/></literal></expr>;<pos:position pos:line="281" pos:column="42"/></return>
			}<pos:position pos:line="282" pos:column="26"/></block></then></if>
			<comment type="block" pos:line="283" pos:column="25">/* We defer sanitizing this arg until we know what
			 * our destination directory is going to be. */</comment>
			<expr_stmt><expr><name><name pos:line="285" pos:column="25">basis_dir<pos:position pos:line="285" pos:column="34"/></name><index pos:line="285" pos:column="34">[<expr><name pos:line="285" pos:column="35">basis_dir_cnt<pos:position pos:line="285" pos:column="48"/></name><operator pos:line="285" pos:column="48">++<pos:position pos:line="285" pos:column="50"/></operator></expr>]<pos:position pos:line="285" pos:column="51"/></index></name> <operator pos:line="285" pos:column="52">=<pos:position pos:line="285" pos:column="53"/></operator> <operator pos:line="285" pos:column="54">(<pos:position pos:line="285" pos:column="55"/></operator><name pos:line="285" pos:column="55">char<pos:position pos:line="285" pos:column="59"/></name> <operator pos:line="285" pos:column="60">*<pos:position pos:line="285" pos:column="61"/></operator><operator pos:line="285" pos:column="61">)<pos:position pos:line="285" pos:column="62"/></operator><call><name pos:line="285" pos:column="62">poptGetOptArg<pos:position pos:line="285" pos:column="75"/></name><argument_list pos:line="285" pos:column="75">(<argument><expr><name pos:line="285" pos:column="76">pc<pos:position pos:line="285" pos:column="78"/></name></expr></argument>)<pos:position pos:line="285" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="285" pos:column="80"/></expr_stmt>
			<break pos:line="286" pos:column="25">break;<pos:position pos:line="286" pos:column="31"/></break>

		<case pos:line="288" pos:column="17">case <expr><name pos:line="288" pos:column="22">OPT_CHMOD<pos:position pos:line="288" pos:column="31"/></name></expr>:<pos:position pos:line="288" pos:column="32"/></case>
			<expr_stmt><expr><name pos:line="289" pos:column="25">arg<pos:position pos:line="289" pos:column="28"/></name> <operator pos:line="289" pos:column="29">=<pos:position pos:line="289" pos:column="30"/></operator> <call><name pos:line="289" pos:column="31">poptGetOptArg<pos:position pos:line="289" pos:column="44"/></name><argument_list pos:line="289" pos:column="44">(<argument><expr><name pos:line="289" pos:column="45">pc<pos:position pos:line="289" pos:column="47"/></name></expr></argument>)<pos:position pos:line="289" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="289" pos:column="49"/></expr_stmt>
			<if pos:line="290" pos:column="25">if <condition pos:line="290" pos:column="28">(<expr><operator pos:line="290" pos:column="29">!<pos:position pos:line="290" pos:column="30"/></operator><call><name pos:line="290" pos:column="30">parse_chmod<pos:position pos:line="290" pos:column="41"/></name><argument_list pos:line="290" pos:column="41">(<argument><expr><name pos:line="290" pos:column="42">arg<pos:position pos:line="290" pos:column="45"/></name></expr></argument>, <argument><expr><operator pos:line="290" pos:column="47">&amp;<pos:position pos:line="290" pos:column="52"/></operator><name pos:line="290" pos:column="48">chmod_modes<pos:position pos:line="290" pos:column="59"/></name></expr></argument>)<pos:position pos:line="290" pos:column="60"/></argument_list></call></expr>)<pos:position pos:line="290" pos:column="61"/></condition><then pos:line="290" pos:column="61"> <block pos:line="290" pos:column="62">{
				<expr_stmt><expr><call><name pos:line="291" pos:column="33">snprintf<pos:position pos:line="291" pos:column="41"/></name><argument_list pos:line="291" pos:column="41">(<argument><expr><name pos:line="291" pos:column="42">err_buf<pos:position pos:line="291" pos:column="49"/></name></expr></argument>, <argument><expr><sizeof pos:line="291" pos:column="51">sizeof <name pos:line="291" pos:column="58">err_buf<pos:position pos:line="291" pos:column="65"/></name></sizeof></expr></argument>,
				    <argument><expr><literal type="string" pos:line="292" pos:column="37">"Invalid argument passed to --chmod (%s)\n"<pos:position pos:line="292" pos:column="80"/></literal></expr></argument>,
				    <argument><expr><name pos:line="293" pos:column="37">arg<pos:position pos:line="293" pos:column="40"/></name></expr></argument>)<pos:position pos:line="293" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="293" pos:column="42"/></expr_stmt>
				<return pos:line="294" pos:column="33">return <expr><literal type="number" pos:line="294" pos:column="40">0<pos:position pos:line="294" pos:column="41"/></literal></expr>;<pos:position pos:line="294" pos:column="42"/></return>
			}<pos:position pos:line="295" pos:column="26"/></block></then></if>
			<break pos:line="296" pos:column="25">break;<pos:position pos:line="296" pos:column="31"/></break>

		<case pos:line="298" pos:column="17">case <expr><name pos:line="298" pos:column="22">OPT_HELP<pos:position pos:line="298" pos:column="30"/></name></expr>:<pos:position pos:line="298" pos:column="31"/></case>
			<expr_stmt><expr><call><name pos:line="299" pos:column="25">usage<pos:position pos:line="299" pos:column="30"/></name><argument_list pos:line="299" pos:column="30">(<argument><expr><name pos:line="299" pos:column="31">FINFO<pos:position pos:line="299" pos:column="36"/></name></expr></argument>)<pos:position pos:line="299" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="299" pos:column="38"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="300" pos:column="25">exit_cleanup<pos:position pos:line="300" pos:column="37"/></name><argument_list pos:line="300" pos:column="37">(<argument><expr><literal type="number" pos:line="300" pos:column="38">0<pos:position pos:line="300" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="300" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="300" pos:column="41"/></expr_stmt>

		<default pos:line="302" pos:column="17">default:<pos:position pos:line="302" pos:column="25"/></default>
			<comment type="block" pos:line="303" pos:column="25">/* A large opt value means that set_refuse_options()
			 * turned this option off. */</comment>
			<if pos:line="305" pos:column="25">if <condition pos:line="305" pos:column="28">(<expr><name pos:line="305" pos:column="29">opt<pos:position pos:line="305" pos:column="32"/></name> <operator pos:line="305" pos:column="33">&gt;=<pos:position pos:line="305" pos:column="38"/></operator> <name pos:line="305" pos:column="36">OPT_REFUSED_BASE<pos:position pos:line="305" pos:column="52"/></name></expr>)<pos:position pos:line="305" pos:column="53"/></condition><then pos:line="305" pos:column="53"> <block pos:line="305" pos:column="54">{
				<expr_stmt><expr><call><name pos:line="306" pos:column="33">create_refuse_error<pos:position pos:line="306" pos:column="52"/></name><argument_list pos:line="306" pos:column="52">(<argument><expr><name pos:line="306" pos:column="53">opt<pos:position pos:line="306" pos:column="56"/></name></expr></argument>)<pos:position pos:line="306" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="306" pos:column="58"/></expr_stmt>
				<return pos:line="307" pos:column="33">return <expr><literal type="number" pos:line="307" pos:column="40">0<pos:position pos:line="307" pos:column="41"/></literal></expr>;<pos:position pos:line="307" pos:column="42"/></return>
			}<pos:position pos:line="308" pos:column="26"/></block></then></if>
			<expr_stmt><expr><call><name pos:line="309" pos:column="25">snprintf<pos:position pos:line="309" pos:column="33"/></name><argument_list pos:line="309" pos:column="33">(<argument><expr><name pos:line="309" pos:column="34">err_buf<pos:position pos:line="309" pos:column="41"/></name></expr></argument>, <argument><expr><sizeof pos:line="309" pos:column="43">sizeof <name pos:line="309" pos:column="50">err_buf<pos:position pos:line="309" pos:column="57"/></name></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="309" pos:column="59">"%s%s: %s\n"<pos:position pos:line="309" pos:column="71"/></literal></expr></argument>,
				 <argument><expr><ternary><condition><expr><name pos:line="310" pos:column="34">am_server<pos:position pos:line="310" pos:column="43"/></name></expr> ?<pos:position pos:line="310" pos:column="45"/></condition><then pos:line="310" pos:column="45"> <expr><literal type="string" pos:line="310" pos:column="46">"on remote machine: "<pos:position pos:line="310" pos:column="67"/></literal></expr> <pos:position pos:line="310" pos:column="68"/></then><else pos:line="310" pos:column="68">: <expr><literal type="string" pos:line="310" pos:column="70">""<pos:position pos:line="310" pos:column="72"/></literal></expr></else></ternary></expr></argument>,
				 <argument><expr><call><name pos:line="311" pos:column="34">poptBadOption<pos:position pos:line="311" pos:column="47"/></name><argument_list pos:line="311" pos:column="47">(<argument><expr><name pos:line="311" pos:column="48">pc<pos:position pos:line="311" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="311" pos:column="52">POPT_BADOPTION_NOALIAS<pos:position pos:line="311" pos:column="74"/></name></expr></argument>)<pos:position pos:line="311" pos:column="75"/></argument_list></call></expr></argument>,
				 <argument><expr><call><name pos:line="312" pos:column="34">poptStrerror<pos:position pos:line="312" pos:column="46"/></name><argument_list pos:line="312" pos:column="46">(<argument><expr><name pos:line="312" pos:column="47">opt<pos:position pos:line="312" pos:column="50"/></name></expr></argument>)<pos:position pos:line="312" pos:column="51"/></argument_list></call></expr></argument>)<pos:position pos:line="312" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="312" pos:column="53"/></expr_stmt>
			<return pos:line="313" pos:column="25">return <expr><literal type="number" pos:line="313" pos:column="32">0<pos:position pos:line="313" pos:column="33"/></literal></expr>;<pos:position pos:line="313" pos:column="34"/></return>
		}<pos:position pos:line="314" pos:column="18"/></block></switch>
	}<pos:position pos:line="315" pos:column="10"/></block></while>

	<if pos:line="317" pos:column="9">if <condition pos:line="317" pos:column="12">(<expr><name pos:line="317" pos:column="13">human_readable<pos:position pos:line="317" pos:column="27"/></name> <operator pos:line="317" pos:column="28">&amp;&amp;<pos:position pos:line="317" pos:column="38"/></operator> <operator pos:line="317" pos:column="31">*<pos:position pos:line="317" pos:column="32"/></operator><name pos:line="317" pos:column="32">argc<pos:position pos:line="317" pos:column="36"/></name> <operator pos:line="317" pos:column="37">==<pos:position pos:line="317" pos:column="39"/></operator> <literal type="number" pos:line="317" pos:column="40">2<pos:position pos:line="317" pos:column="41"/></literal></expr>)<pos:position pos:line="317" pos:column="42"/></condition><then pos:line="317" pos:column="42"> <block pos:line="317" pos:column="43">{
		<comment type="block" pos:line="318" pos:column="17">/* Allow the old meaning of 'h' (--help) on its own. */</comment>
		<expr_stmt><expr><call><name pos:line="319" pos:column="17">usage<pos:position pos:line="319" pos:column="22"/></name><argument_list pos:line="319" pos:column="22">(<argument><expr><name pos:line="319" pos:column="23">FINFO<pos:position pos:line="319" pos:column="28"/></name></expr></argument>)<pos:position pos:line="319" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="319" pos:column="30"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="320" pos:column="17">exit_cleanup<pos:position pos:line="320" pos:column="29"/></name><argument_list pos:line="320" pos:column="29">(<argument><expr><literal type="number" pos:line="320" pos:column="30">0<pos:position pos:line="320" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="320" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="320" pos:column="33"/></expr_stmt>
	}<pos:position pos:line="321" pos:column="10"/></block></then></if>

<cpp:ifndef pos:line="323" pos:column="1">#<cpp:directive pos:line="323" pos:column="2">ifndef<pos:position pos:line="323" pos:column="8"/></cpp:directive> <name pos:line="323" pos:column="9">SUPPORT_LINKS<pos:position pos:line="323" pos:column="22"/></name></cpp:ifndef>
	<if pos:line="324" pos:column="9">if <condition pos:line="324" pos:column="12">(<expr><name pos:line="324" pos:column="13">preserve_links<pos:position pos:line="324" pos:column="27"/></name> <operator pos:line="324" pos:column="28">&amp;&amp;<pos:position pos:line="324" pos:column="38"/></operator> <operator pos:line="324" pos:column="31">!<pos:position pos:line="324" pos:column="32"/></operator><name pos:line="324" pos:column="32">am_sender<pos:position pos:line="324" pos:column="41"/></name></expr>)<pos:position pos:line="324" pos:column="42"/></condition><then pos:line="324" pos:column="42"> <block pos:line="324" pos:column="43">{
		<expr_stmt><expr><call><name pos:line="325" pos:column="17">snprintf<pos:position pos:line="325" pos:column="25"/></name><argument_list pos:line="325" pos:column="25">(<argument><expr><name pos:line="325" pos:column="26">err_buf<pos:position pos:line="325" pos:column="33"/></name></expr></argument>, <argument><expr><sizeof pos:line="325" pos:column="35">sizeof <name pos:line="325" pos:column="42">err_buf<pos:position pos:line="325" pos:column="49"/></name></sizeof></expr></argument>,
			 <argument><expr><literal type="string" pos:line="326" pos:column="26">"symlinks are not supported on this %s\n"<pos:position pos:line="326" pos:column="67"/></literal></expr></argument>,
			 <argument><expr><ternary><condition><expr><name pos:line="327" pos:column="26">am_server<pos:position pos:line="327" pos:column="35"/></name></expr> ?<pos:position pos:line="327" pos:column="37"/></condition><then pos:line="327" pos:column="37"> <expr><literal type="string" pos:line="327" pos:column="38">"server"<pos:position pos:line="327" pos:column="46"/></literal></expr> <pos:position pos:line="327" pos:column="47"/></then><else pos:line="327" pos:column="47">: <expr><literal type="string" pos:line="327" pos:column="49">"client"<pos:position pos:line="327" pos:column="57"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="327" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="327" pos:column="59"/></expr_stmt>
		<return pos:line="328" pos:column="17">return <expr><literal type="number" pos:line="328" pos:column="24">0<pos:position pos:line="328" pos:column="25"/></literal></expr>;<pos:position pos:line="328" pos:column="26"/></return>
	}<pos:position pos:line="329" pos:column="10"/></block></then></if>
<cpp:endif pos:line="330" pos:column="1">#<cpp:directive pos:line="330" pos:column="2">endif<pos:position pos:line="330" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:ifndef pos:line="332" pos:column="1">#<cpp:directive pos:line="332" pos:column="2">ifndef<pos:position pos:line="332" pos:column="8"/></cpp:directive> <name pos:line="332" pos:column="9">SUPPORT_HARD_LINKS<pos:position pos:line="332" pos:column="27"/></name></cpp:ifndef>
	<if pos:line="333" pos:column="9">if <condition pos:line="333" pos:column="12">(<expr><name pos:line="333" pos:column="13">preserve_hard_links<pos:position pos:line="333" pos:column="32"/></name></expr>)<pos:position pos:line="333" pos:column="33"/></condition><then pos:line="333" pos:column="33"> <block pos:line="333" pos:column="34">{
		<expr_stmt><expr><call><name pos:line="334" pos:column="17">snprintf<pos:position pos:line="334" pos:column="25"/></name><argument_list pos:line="334" pos:column="25">(<argument><expr><name pos:line="334" pos:column="26">err_buf<pos:position pos:line="334" pos:column="33"/></name></expr></argument>, <argument><expr><sizeof pos:line="334" pos:column="35">sizeof <name pos:line="334" pos:column="42">err_buf<pos:position pos:line="334" pos:column="49"/></name></sizeof></expr></argument>,
			 <argument><expr><literal type="string" pos:line="335" pos:column="26">"hard links are not supported on this %s\n"<pos:position pos:line="335" pos:column="69"/></literal></expr></argument>,
			 <argument><expr><ternary><condition><expr><name pos:line="336" pos:column="26">am_server<pos:position pos:line="336" pos:column="35"/></name></expr> ?<pos:position pos:line="336" pos:column="37"/></condition><then pos:line="336" pos:column="37"> <expr><literal type="string" pos:line="336" pos:column="38">"server"<pos:position pos:line="336" pos:column="46"/></literal></expr> <pos:position pos:line="336" pos:column="47"/></then><else pos:line="336" pos:column="47">: <expr><literal type="string" pos:line="336" pos:column="49">"client"<pos:position pos:line="336" pos:column="57"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="336" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="336" pos:column="59"/></expr_stmt>
		<return pos:line="337" pos:column="17">return <expr><literal type="number" pos:line="337" pos:column="24">0<pos:position pos:line="337" pos:column="25"/></literal></expr>;<pos:position pos:line="337" pos:column="26"/></return>
	}<pos:position pos:line="338" pos:column="10"/></block></then></if>
<cpp:endif pos:line="339" pos:column="1">#<cpp:directive pos:line="339" pos:column="2">endif<pos:position pos:line="339" pos:column="7"/></cpp:directive></cpp:endif>

	<if pos:line="341" pos:column="9">if <condition pos:line="341" pos:column="12">(<expr><name pos:line="341" pos:column="13">write_batch<pos:position pos:line="341" pos:column="24"/></name> <operator pos:line="341" pos:column="25">&amp;&amp;<pos:position pos:line="341" pos:column="35"/></operator> <name pos:line="341" pos:column="28">read_batch<pos:position pos:line="341" pos:column="38"/></name></expr>)<pos:position pos:line="341" pos:column="39"/></condition><then pos:line="341" pos:column="39"> <block pos:line="341" pos:column="40">{
		<expr_stmt><expr><call><name pos:line="342" pos:column="17">snprintf<pos:position pos:line="342" pos:column="25"/></name><argument_list pos:line="342" pos:column="25">(<argument><expr><name pos:line="342" pos:column="26">err_buf<pos:position pos:line="342" pos:column="33"/></name></expr></argument>, <argument><expr><sizeof pos:line="342" pos:column="35">sizeof <name pos:line="342" pos:column="42">err_buf<pos:position pos:line="342" pos:column="49"/></name></sizeof></expr></argument>,
			<argument><expr><literal type="string" pos:line="343" pos:column="25">"--write-batch and --read-batch can not be used together\n"<pos:position pos:line="343" pos:column="84"/></literal></expr></argument>)<pos:position pos:line="343" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="343" pos:column="86"/></expr_stmt>
		<return pos:line="344" pos:column="17">return <expr><literal type="number" pos:line="344" pos:column="24">0<pos:position pos:line="344" pos:column="25"/></literal></expr>;<pos:position pos:line="344" pos:column="26"/></return>
	}<pos:position pos:line="345" pos:column="10"/></block></then></if>
	<if pos:line="346" pos:column="9">if <condition pos:line="346" pos:column="12">(<expr><name pos:line="346" pos:column="13">write_batch<pos:position pos:line="346" pos:column="24"/></name> <operator pos:line="346" pos:column="25">&gt;<pos:position pos:line="346" pos:column="29"/></operator> <literal type="number" pos:line="346" pos:column="27">0<pos:position pos:line="346" pos:column="28"/></literal> <operator pos:line="346" pos:column="29">||<pos:position pos:line="346" pos:column="31"/></operator> <name pos:line="346" pos:column="32">read_batch<pos:position pos:line="346" pos:column="42"/></name></expr>)<pos:position pos:line="346" pos:column="43"/></condition><then pos:line="346" pos:column="43"> <block pos:line="346" pos:column="44">{
		<if pos:line="347" pos:column="17">if <condition pos:line="347" pos:column="20">(<expr><name pos:line="347" pos:column="21">am_server<pos:position pos:line="347" pos:column="30"/></name></expr>)<pos:position pos:line="347" pos:column="31"/></condition><then pos:line="347" pos:column="31"> <block pos:line="347" pos:column="32">{
			<expr_stmt><expr><call><name pos:line="348" pos:column="25">rprintf<pos:position pos:line="348" pos:column="32"/></name><argument_list pos:line="348" pos:column="32">(<argument><expr><name pos:line="348" pos:column="33">FINFO<pos:position pos:line="348" pos:column="38"/></name></expr></argument>,
				<argument><expr><literal type="string" pos:line="349" pos:column="33">"ignoring --%s-batch option sent to server\n"<pos:position pos:line="349" pos:column="78"/></literal></expr></argument>,
				<argument><expr><ternary><condition><expr><name pos:line="350" pos:column="33">write_batch<pos:position pos:line="350" pos:column="44"/></name></expr> ?<pos:position pos:line="350" pos:column="46"/></condition><then pos:line="350" pos:column="46"> <expr><literal type="string" pos:line="350" pos:column="47">"write"<pos:position pos:line="350" pos:column="54"/></literal></expr> <pos:position pos:line="350" pos:column="55"/></then><else pos:line="350" pos:column="55">: <expr><literal type="string" pos:line="350" pos:column="57">"read"<pos:position pos:line="350" pos:column="63"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="350" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="350" pos:column="65"/></expr_stmt>
			<comment type="block" pos:line="351" pos:column="25">/* We don't actually exit_cleanup(), so that we can
			 * still service older version clients that still send
			 * batch args to server. */</comment>
			<expr_stmt><expr><name pos:line="354" pos:column="25">read_batch<pos:position pos:line="354" pos:column="35"/></name> <operator pos:line="354" pos:column="36">=<pos:position pos:line="354" pos:column="37"/></operator> <name pos:line="354" pos:column="38">write_batch<pos:position pos:line="354" pos:column="49"/></name> <operator pos:line="354" pos:column="50">=<pos:position pos:line="354" pos:column="51"/></operator> <literal type="number" pos:line="354" pos:column="52">0<pos:position pos:line="354" pos:column="53"/></literal></expr>;<pos:position pos:line="354" pos:column="54"/></expr_stmt>
			<expr_stmt><expr><name pos:line="355" pos:column="25">batch_name<pos:position pos:line="355" pos:column="35"/></name> <operator pos:line="355" pos:column="36">=<pos:position pos:line="355" pos:column="37"/></operator> <name pos:line="355" pos:column="38">NULL<pos:position pos:line="355" pos:column="42"/></name></expr>;<pos:position pos:line="355" pos:column="43"/></expr_stmt>
		}<pos:position pos:line="356" pos:column="18"/></block></then> <elseif pos:line="356" pos:column="19">else <if pos:line="356" pos:column="24">if <condition pos:line="356" pos:column="27">(<expr><name pos:line="356" pos:column="28">dry_run<pos:position pos:line="356" pos:column="35"/></name></expr>)<pos:position pos:line="356" pos:column="36"/></condition><then pos:line="356" pos:column="36">
			<block type="pseudo"><expr_stmt><expr><name pos:line="357" pos:column="25">write_batch<pos:position pos:line="357" pos:column="36"/></name> <operator pos:line="357" pos:column="37">=<pos:position pos:line="357" pos:column="38"/></operator> <literal type="number" pos:line="357" pos:column="39">0<pos:position pos:line="357" pos:column="40"/></literal></expr>;<pos:position pos:line="357" pos:column="41"/></expr_stmt></block></then></if></elseif></if>
	}<pos:position pos:line="358" pos:column="10"/></block></then></if>
	<if pos:line="359" pos:column="9">if <condition pos:line="359" pos:column="12">(<expr><name pos:line="359" pos:column="13">read_batch<pos:position pos:line="359" pos:column="23"/></name> <operator pos:line="359" pos:column="24">&amp;&amp;<pos:position pos:line="359" pos:column="34"/></operator> <name pos:line="359" pos:column="27">files_from<pos:position pos:line="359" pos:column="37"/></name></expr>)<pos:position pos:line="359" pos:column="38"/></condition><then pos:line="359" pos:column="38"> <block pos:line="359" pos:column="39">{
		<expr_stmt><expr><call><name pos:line="360" pos:column="17">snprintf<pos:position pos:line="360" pos:column="25"/></name><argument_list pos:line="360" pos:column="25">(<argument><expr><name pos:line="360" pos:column="26">err_buf<pos:position pos:line="360" pos:column="33"/></name></expr></argument>, <argument><expr><sizeof pos:line="360" pos:column="35">sizeof <name pos:line="360" pos:column="42">err_buf<pos:position pos:line="360" pos:column="49"/></name></sizeof></expr></argument>,
			<argument><expr><literal type="string" pos:line="361" pos:column="25">"--read-batch cannot be used with --files-from\n"<pos:position pos:line="361" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="361" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="361" pos:column="76"/></expr_stmt>
		<return pos:line="362" pos:column="17">return <expr><literal type="number" pos:line="362" pos:column="24">0<pos:position pos:line="362" pos:column="25"/></literal></expr>;<pos:position pos:line="362" pos:column="26"/></return>
	}<pos:position pos:line="363" pos:column="10"/></block></then></if>
	<if pos:line="364" pos:column="9">if <condition pos:line="364" pos:column="12">(<expr><name pos:line="364" pos:column="13">batch_name<pos:position pos:line="364" pos:column="23"/></name> <operator pos:line="364" pos:column="24">&amp;&amp;<pos:position pos:line="364" pos:column="34"/></operator> <call><name pos:line="364" pos:column="27">strlen<pos:position pos:line="364" pos:column="33"/></name><argument_list pos:line="364" pos:column="33">(<argument><expr><name pos:line="364" pos:column="34">batch_name<pos:position pos:line="364" pos:column="44"/></name></expr></argument>)<pos:position pos:line="364" pos:column="45"/></argument_list></call> <operator pos:line="364" pos:column="46">&gt;<pos:position pos:line="364" pos:column="50"/></operator> <name pos:line="364" pos:column="48">MAX_BATCH_NAME_LEN<pos:position pos:line="364" pos:column="66"/></name></expr>)<pos:position pos:line="364" pos:column="67"/></condition><then pos:line="364" pos:column="67"> <block pos:line="364" pos:column="68">{
		<expr_stmt><expr><call><name pos:line="365" pos:column="17">snprintf<pos:position pos:line="365" pos:column="25"/></name><argument_list pos:line="365" pos:column="25">(<argument><expr><name pos:line="365" pos:column="26">err_buf<pos:position pos:line="365" pos:column="33"/></name></expr></argument>, <argument><expr><sizeof pos:line="365" pos:column="35">sizeof <name pos:line="365" pos:column="42">err_buf<pos:position pos:line="365" pos:column="49"/></name></sizeof></expr></argument>,
			<argument><expr><literal type="string" pos:line="366" pos:column="25">"the batch-file name must be %d characters or less.\n"<pos:position pos:line="366" pos:column="79"/></literal></expr></argument>,
			<argument><expr><name pos:line="367" pos:column="25">MAX_BATCH_NAME_LEN<pos:position pos:line="367" pos:column="43"/></name></expr></argument>)<pos:position pos:line="367" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="367" pos:column="45"/></expr_stmt>
		<return pos:line="368" pos:column="17">return <expr><literal type="number" pos:line="368" pos:column="24">0<pos:position pos:line="368" pos:column="25"/></literal></expr>;<pos:position pos:line="368" pos:column="26"/></return>
	}<pos:position pos:line="369" pos:column="10"/></block></then></if>

	<if pos:line="371" pos:column="9">if <condition pos:line="371" pos:column="12">(<expr><name pos:line="371" pos:column="13">tmpdir<pos:position pos:line="371" pos:column="19"/></name> <operator pos:line="371" pos:column="20">&amp;&amp;<pos:position pos:line="371" pos:column="30"/></operator> <call><name pos:line="371" pos:column="23">strlen<pos:position pos:line="371" pos:column="29"/></name><argument_list pos:line="371" pos:column="29">(<argument><expr><name pos:line="371" pos:column="30">tmpdir<pos:position pos:line="371" pos:column="36"/></name></expr></argument>)<pos:position pos:line="371" pos:column="37"/></argument_list></call> <operator pos:line="371" pos:column="38">&gt;=<pos:position pos:line="371" pos:column="43"/></operator> <name pos:line="371" pos:column="41">MAXPATHLEN<pos:position pos:line="371" pos:column="51"/></name> <operator pos:line="371" pos:column="52">-<pos:position pos:line="371" pos:column="53"/></operator> <literal type="number" pos:line="371" pos:column="54">10<pos:position pos:line="371" pos:column="56"/></literal></expr>)<pos:position pos:line="371" pos:column="57"/></condition><then pos:line="371" pos:column="57"> <block pos:line="371" pos:column="58">{
		<expr_stmt><expr><call><name pos:line="372" pos:column="17">snprintf<pos:position pos:line="372" pos:column="25"/></name><argument_list pos:line="372" pos:column="25">(<argument><expr><name pos:line="372" pos:column="26">err_buf<pos:position pos:line="372" pos:column="33"/></name></expr></argument>, <argument><expr><sizeof pos:line="372" pos:column="35">sizeof <name pos:line="372" pos:column="42">err_buf<pos:position pos:line="372" pos:column="49"/></name></sizeof></expr></argument>,
			 <argument><expr><literal type="string" pos:line="373" pos:column="26">"the --temp-dir path is WAY too long.\n"<pos:position pos:line="373" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="373" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="373" pos:column="68"/></expr_stmt>
		<return pos:line="374" pos:column="17">return <expr><literal type="number" pos:line="374" pos:column="24">0<pos:position pos:line="374" pos:column="25"/></literal></expr>;<pos:position pos:line="374" pos:column="26"/></return>
	}<pos:position pos:line="375" pos:column="10"/></block></then></if>

	<if pos:line="377" pos:column="9">if <condition pos:line="377" pos:column="12">(<expr><name pos:line="377" pos:column="13">compare_dest<pos:position pos:line="377" pos:column="25"/></name> <operator pos:line="377" pos:column="26">+<pos:position pos:line="377" pos:column="27"/></operator> <name pos:line="377" pos:column="28">copy_dest<pos:position pos:line="377" pos:column="37"/></name> <operator pos:line="377" pos:column="38">+<pos:position pos:line="377" pos:column="39"/></operator> <name pos:line="377" pos:column="40">link_dest<pos:position pos:line="377" pos:column="49"/></name> <operator pos:line="377" pos:column="50">&gt;<pos:position pos:line="377" pos:column="54"/></operator> <literal type="number" pos:line="377" pos:column="52">1<pos:position pos:line="377" pos:column="53"/></literal></expr>)<pos:position pos:line="377" pos:column="54"/></condition><then pos:line="377" pos:column="54"> <block pos:line="377" pos:column="55">{
		<expr_stmt><expr><call><name pos:line="378" pos:column="17">snprintf<pos:position pos:line="378" pos:column="25"/></name><argument_list pos:line="378" pos:column="25">(<argument><expr><name pos:line="378" pos:column="26">err_buf<pos:position pos:line="378" pos:column="33"/></name></expr></argument>, <argument><expr><sizeof pos:line="378" pos:column="35">sizeof <name pos:line="378" pos:column="42">err_buf<pos:position pos:line="378" pos:column="49"/></name></sizeof></expr></argument>,
			<argument><expr><literal type="string" pos:line="379" pos:column="25">"You may not mix --compare-dest, --copy-dest, and --link-dest.\n"<pos:position pos:line="379" pos:column="90"/></literal></expr></argument>)<pos:position pos:line="379" pos:column="91"/></argument_list></call></expr>;<pos:position pos:line="379" pos:column="92"/></expr_stmt>
		<return pos:line="380" pos:column="17">return <expr><literal type="number" pos:line="380" pos:column="24">0<pos:position pos:line="380" pos:column="25"/></literal></expr>;<pos:position pos:line="380" pos:column="26"/></return>
	}<pos:position pos:line="381" pos:column="10"/></block></then></if>

	<if pos:line="383" pos:column="9">if <condition pos:line="383" pos:column="12">(<expr><name pos:line="383" pos:column="13">files_from<pos:position pos:line="383" pos:column="23"/></name></expr>)<pos:position pos:line="383" pos:column="24"/></condition><then pos:line="383" pos:column="24"> <block pos:line="383" pos:column="25">{
		<if pos:line="384" pos:column="17">if <condition pos:line="384" pos:column="20">(<expr><name pos:line="384" pos:column="21">recurse<pos:position pos:line="384" pos:column="28"/></name> <operator pos:line="384" pos:column="29">==<pos:position pos:line="384" pos:column="31"/></operator> <literal type="number" pos:line="384" pos:column="32">1<pos:position pos:line="384" pos:column="33"/></literal></expr>)<pos:position pos:line="384" pos:column="34"/></condition><then pos:line="384" pos:column="34"> <comment type="block" pos:line="384" pos:column="35">/* preserve recurse == 2 */</comment>
			<block type="pseudo"><expr_stmt><expr><name pos:line="385" pos:column="25">recurse<pos:position pos:line="385" pos:column="32"/></name> <operator pos:line="385" pos:column="33">=<pos:position pos:line="385" pos:column="34"/></operator> <literal type="number" pos:line="385" pos:column="35">0<pos:position pos:line="385" pos:column="36"/></literal></expr>;<pos:position pos:line="385" pos:column="37"/></expr_stmt></block></then></if>
		<if pos:line="386" pos:column="17">if <condition pos:line="386" pos:column="20">(<expr><name pos:line="386" pos:column="21">xfer_dirs<pos:position pos:line="386" pos:column="30"/></name> <operator pos:line="386" pos:column="31">&lt;<pos:position pos:line="386" pos:column="35"/></operator> <literal type="number" pos:line="386" pos:column="33">0<pos:position pos:line="386" pos:column="34"/></literal></expr>)<pos:position pos:line="386" pos:column="35"/></condition><then pos:line="386" pos:column="35">
			<block type="pseudo"><expr_stmt><expr><name pos:line="387" pos:column="25">xfer_dirs<pos:position pos:line="387" pos:column="34"/></name> <operator pos:line="387" pos:column="35">=<pos:position pos:line="387" pos:column="36"/></operator> <literal type="number" pos:line="387" pos:column="37">1<pos:position pos:line="387" pos:column="38"/></literal></expr>;<pos:position pos:line="387" pos:column="39"/></expr_stmt></block></then></if>
	}<pos:position pos:line="388" pos:column="10"/></block></then></if>

	<if pos:line="390" pos:column="9">if <condition pos:line="390" pos:column="12">(<expr><name pos:line="390" pos:column="13">xfer_dirs<pos:position pos:line="390" pos:column="22"/></name> <operator pos:line="390" pos:column="23">&lt;<pos:position pos:line="390" pos:column="27"/></operator> <literal type="number" pos:line="390" pos:column="25">1<pos:position pos:line="390" pos:column="26"/></literal></expr>)<pos:position pos:line="390" pos:column="27"/></condition><then pos:line="390" pos:column="27">
		<block type="pseudo"><expr_stmt><expr><name pos:line="391" pos:column="17">xfer_dirs<pos:position pos:line="391" pos:column="26"/></name> <operator pos:line="391" pos:column="27">=<pos:position pos:line="391" pos:column="28"/></operator> <name pos:line="391" pos:column="29">recurse<pos:position pos:line="391" pos:column="36"/></name> <operator pos:line="391" pos:column="37">||<pos:position pos:line="391" pos:column="39"/></operator> <name pos:line="391" pos:column="40">list_only<pos:position pos:line="391" pos:column="49"/></name></expr>;<pos:position pos:line="391" pos:column="50"/></expr_stmt></block></then></if>

	<if pos:line="393" pos:column="9">if <condition pos:line="393" pos:column="12">(<expr><name pos:line="393" pos:column="13">relative_paths<pos:position pos:line="393" pos:column="27"/></name> <operator pos:line="393" pos:column="28">&lt;<pos:position pos:line="393" pos:column="32"/></operator> <literal type="number" pos:line="393" pos:column="30">0<pos:position pos:line="393" pos:column="31"/></literal></expr>)<pos:position pos:line="393" pos:column="32"/></condition><then pos:line="393" pos:column="32">
		<block type="pseudo"><expr_stmt><expr><name pos:line="394" pos:column="17">relative_paths<pos:position pos:line="394" pos:column="31"/></name> <operator pos:line="394" pos:column="32">=<pos:position pos:line="394" pos:column="33"/></operator> <ternary><condition><expr><name pos:line="394" pos:column="34">files_from<pos:position pos:line="394" pos:column="44"/></name></expr>?<pos:position pos:line="394" pos:column="45"/></condition><then pos:line="394" pos:column="45"> <expr><literal type="number" pos:line="394" pos:column="46">1<pos:position pos:line="394" pos:column="47"/></literal></expr> <pos:position pos:line="394" pos:column="48"/></then><else pos:line="394" pos:column="48">: <expr><literal type="number" pos:line="394" pos:column="50">0<pos:position pos:line="394" pos:column="51"/></literal></expr></else></ternary></expr>;<pos:position pos:line="394" pos:column="52"/></expr_stmt></block></then></if>
	<if pos:line="395" pos:column="9">if <condition pos:line="395" pos:column="12">(<expr><operator pos:line="395" pos:column="13">!<pos:position pos:line="395" pos:column="14"/></operator><name pos:line="395" pos:column="14">relative_paths<pos:position pos:line="395" pos:column="28"/></name></expr>)<pos:position pos:line="395" pos:column="29"/></condition><then pos:line="395" pos:column="29">
		<block type="pseudo"><expr_stmt><expr><name pos:line="396" pos:column="17">implied_dirs<pos:position pos:line="396" pos:column="29"/></name> <operator pos:line="396" pos:column="30">=<pos:position pos:line="396" pos:column="31"/></operator> <literal type="number" pos:line="396" pos:column="32">0<pos:position pos:line="396" pos:column="33"/></literal></expr>;<pos:position pos:line="396" pos:column="34"/></expr_stmt></block></then></if>

	<if pos:line="398" pos:column="9">if <condition pos:line="398" pos:column="12">(<expr><operator pos:line="398" pos:column="13">!<pos:position pos:line="398" pos:column="14"/></operator><operator pos:line="398" pos:column="14">!<pos:position pos:line="398" pos:column="15"/></operator><name pos:line="398" pos:column="15">delete_before<pos:position pos:line="398" pos:column="28"/></name> <operator pos:line="398" pos:column="29">+<pos:position pos:line="398" pos:column="30"/></operator> <name pos:line="398" pos:column="31">delete_during<pos:position pos:line="398" pos:column="44"/></name> <operator pos:line="398" pos:column="45">+<pos:position pos:line="398" pos:column="46"/></operator> <name pos:line="398" pos:column="47">delete_after<pos:position pos:line="398" pos:column="59"/></name> <operator pos:line="398" pos:column="60">&gt;<pos:position pos:line="398" pos:column="64"/></operator> <literal type="number" pos:line="398" pos:column="62">1<pos:position pos:line="398" pos:column="63"/></literal></expr>)<pos:position pos:line="398" pos:column="64"/></condition><then pos:line="398" pos:column="64"> <block pos:line="398" pos:column="65">{
		<expr_stmt><expr><call><name pos:line="399" pos:column="17">snprintf<pos:position pos:line="399" pos:column="25"/></name><argument_list pos:line="399" pos:column="25">(<argument><expr><name pos:line="399" pos:column="26">err_buf<pos:position pos:line="399" pos:column="33"/></name></expr></argument>, <argument><expr><sizeof pos:line="399" pos:column="35">sizeof <name pos:line="399" pos:column="42">err_buf<pos:position pos:line="399" pos:column="49"/></name></sizeof></expr></argument>,
			<argument><expr><literal type="string" pos:line="400" pos:column="25">"You may not combine multiple --delete-WHEN options.\n"<pos:position pos:line="400" pos:column="80"/></literal></expr></argument>)<pos:position pos:line="400" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="400" pos:column="82"/></expr_stmt>
		<return pos:line="401" pos:column="17">return <expr><literal type="number" pos:line="401" pos:column="24">0<pos:position pos:line="401" pos:column="25"/></literal></expr>;<pos:position pos:line="401" pos:column="26"/></return>
	}<pos:position pos:line="402" pos:column="10"/></block></then></if>
	<if pos:line="403" pos:column="9">if <condition pos:line="403" pos:column="12">(<expr><name pos:line="403" pos:column="13">delete_before<pos:position pos:line="403" pos:column="26"/></name> <operator pos:line="403" pos:column="27">||<pos:position pos:line="403" pos:column="29"/></operator> <name pos:line="403" pos:column="30">delete_during<pos:position pos:line="403" pos:column="43"/></name> <operator pos:line="403" pos:column="44">||<pos:position pos:line="403" pos:column="46"/></operator> <name pos:line="403" pos:column="47">delete_after<pos:position pos:line="403" pos:column="59"/></name></expr>)<pos:position pos:line="403" pos:column="60"/></condition><then pos:line="403" pos:column="60">
		<block type="pseudo"><expr_stmt><expr><name pos:line="404" pos:column="17">delete_mode<pos:position pos:line="404" pos:column="28"/></name> <operator pos:line="404" pos:column="29">=<pos:position pos:line="404" pos:column="30"/></operator> <literal type="number" pos:line="404" pos:column="31">1<pos:position pos:line="404" pos:column="32"/></literal></expr>;<pos:position pos:line="404" pos:column="33"/></expr_stmt></block></then>
	<elseif pos:line="405" pos:column="9">else <if pos:line="405" pos:column="14">if <condition pos:line="405" pos:column="17">(<expr><name pos:line="405" pos:column="18">delete_mode<pos:position pos:line="405" pos:column="29"/></name> <operator pos:line="405" pos:column="30">||<pos:position pos:line="405" pos:column="32"/></operator> <name pos:line="405" pos:column="33">delete_excluded<pos:position pos:line="405" pos:column="48"/></name></expr>)<pos:position pos:line="405" pos:column="49"/></condition><then pos:line="405" pos:column="49"> <block pos:line="405" pos:column="50">{
		<if pos:line="406" pos:column="17">if <condition pos:line="406" pos:column="20">(<expr><name pos:line="406" pos:column="21">refused_delete_before<pos:position pos:line="406" pos:column="42"/></name></expr>)<pos:position pos:line="406" pos:column="43"/></condition><then pos:line="406" pos:column="43"> <block pos:line="406" pos:column="44">{
			<expr_stmt><expr><call><name pos:line="407" pos:column="25">create_refuse_error<pos:position pos:line="407" pos:column="44"/></name><argument_list pos:line="407" pos:column="44">(<argument><expr><name pos:line="407" pos:column="45">refused_delete_before<pos:position pos:line="407" pos:column="66"/></name></expr></argument>)<pos:position pos:line="407" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="407" pos:column="68"/></expr_stmt>
			<return pos:line="408" pos:column="25">return <expr><literal type="number" pos:line="408" pos:column="32">0<pos:position pos:line="408" pos:column="33"/></literal></expr>;<pos:position pos:line="408" pos:column="34"/></return>
		}<pos:position pos:line="409" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name pos:line="410" pos:column="17">delete_mode<pos:position pos:line="410" pos:column="28"/></name> <operator pos:line="410" pos:column="29">=<pos:position pos:line="410" pos:column="30"/></operator> <name pos:line="410" pos:column="31">delete_before<pos:position pos:line="410" pos:column="44"/></name> <operator pos:line="410" pos:column="45">=<pos:position pos:line="410" pos:column="46"/></operator> <literal type="number" pos:line="410" pos:column="47">1<pos:position pos:line="410" pos:column="48"/></literal></expr>;<pos:position pos:line="410" pos:column="49"/></expr_stmt>
	}<pos:position pos:line="411" pos:column="10"/></block></then></if></elseif></if>
	<if pos:line="412" pos:column="9">if <condition pos:line="412" pos:column="12">(<expr><operator pos:line="412" pos:column="13">!<pos:position pos:line="412" pos:column="14"/></operator><name pos:line="412" pos:column="14">xfer_dirs<pos:position pos:line="412" pos:column="23"/></name> <operator pos:line="412" pos:column="24">&amp;&amp;<pos:position pos:line="412" pos:column="34"/></operator> <name pos:line="412" pos:column="27">delete_mode<pos:position pos:line="412" pos:column="38"/></name></expr>)<pos:position pos:line="412" pos:column="39"/></condition><then pos:line="412" pos:column="39"> <block pos:line="412" pos:column="40">{
		<expr_stmt><expr><call><name pos:line="413" pos:column="17">snprintf<pos:position pos:line="413" pos:column="25"/></name><argument_list pos:line="413" pos:column="25">(<argument><expr><name pos:line="413" pos:column="26">err_buf<pos:position pos:line="413" pos:column="33"/></name></expr></argument>, <argument><expr><sizeof pos:line="413" pos:column="35">sizeof <name pos:line="413" pos:column="42">err_buf<pos:position pos:line="413" pos:column="49"/></name></sizeof></expr></argument>,
			<argument><expr><literal type="string" pos:line="414" pos:column="25">"--delete does not work without -r or -d.\n"<pos:position pos:line="414" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="414" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="414" pos:column="71"/></expr_stmt>
		<return pos:line="415" pos:column="17">return <expr><literal type="number" pos:line="415" pos:column="24">0<pos:position pos:line="415" pos:column="25"/></literal></expr>;<pos:position pos:line="415" pos:column="26"/></return>
	}<pos:position pos:line="416" pos:column="10"/></block></then></if>

	<if pos:line="418" pos:column="9">if <condition pos:line="418" pos:column="12">(<expr><name pos:line="418" pos:column="13">delete_mode<pos:position pos:line="418" pos:column="24"/></name> <operator pos:line="418" pos:column="25">&amp;&amp;<pos:position pos:line="418" pos:column="35"/></operator> <name pos:line="418" pos:column="28">refused_delete<pos:position pos:line="418" pos:column="42"/></name></expr>)<pos:position pos:line="418" pos:column="43"/></condition><then pos:line="418" pos:column="43"> <block pos:line="418" pos:column="44">{
		<expr_stmt><expr><call><name pos:line="419" pos:column="17">create_refuse_error<pos:position pos:line="419" pos:column="36"/></name><argument_list pos:line="419" pos:column="36">(<argument><expr><name pos:line="419" pos:column="37">refused_delete<pos:position pos:line="419" pos:column="51"/></name></expr></argument>)<pos:position pos:line="419" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="419" pos:column="53"/></expr_stmt>
		<return pos:line="420" pos:column="17">return <expr><literal type="number" pos:line="420" pos:column="24">0<pos:position pos:line="420" pos:column="25"/></literal></expr>;<pos:position pos:line="420" pos:column="26"/></return>
	}<pos:position pos:line="421" pos:column="10"/></block></then></if>

	<if pos:line="423" pos:column="9">if <condition pos:line="423" pos:column="12">(<expr><name pos:line="423" pos:column="13">remove_source_files<pos:position pos:line="423" pos:column="32"/></name></expr>)<pos:position pos:line="423" pos:column="33"/></condition><then pos:line="423" pos:column="33"> <block pos:line="423" pos:column="34">{
		<comment type="block" pos:line="424" pos:column="17">/* We only want to infer this refusal of --remove-source-files
		 * via the refusal of "delete", not any of the "delete-FOO"
		 * options. */</comment>
		<if pos:line="427" pos:column="17">if <condition pos:line="427" pos:column="20">(<expr><name pos:line="427" pos:column="21">refused_delete<pos:position pos:line="427" pos:column="35"/></name> <operator pos:line="427" pos:column="36">&amp;&amp;<pos:position pos:line="427" pos:column="46"/></operator> <name pos:line="427" pos:column="39">am_sender<pos:position pos:line="427" pos:column="48"/></name></expr>)<pos:position pos:line="427" pos:column="49"/></condition><then pos:line="427" pos:column="49"> <block pos:line="427" pos:column="50">{
			<expr_stmt><expr><call><name pos:line="428" pos:column="25">create_refuse_error<pos:position pos:line="428" pos:column="44"/></name><argument_list pos:line="428" pos:column="44">(<argument><expr><name pos:line="428" pos:column="45">refused_delete<pos:position pos:line="428" pos:column="59"/></name></expr></argument>)<pos:position pos:line="428" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="428" pos:column="61"/></expr_stmt>
			<return pos:line="429" pos:column="25">return <expr><literal type="number" pos:line="429" pos:column="32">0<pos:position pos:line="429" pos:column="33"/></literal></expr>;<pos:position pos:line="429" pos:column="34"/></return>
		}<pos:position pos:line="430" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name pos:line="431" pos:column="17">need_messages_from_generator<pos:position pos:line="431" pos:column="45"/></name> <operator pos:line="431" pos:column="46">=<pos:position pos:line="431" pos:column="47"/></operator> <literal type="number" pos:line="431" pos:column="48">1<pos:position pos:line="431" pos:column="49"/></literal></expr>;<pos:position pos:line="431" pos:column="50"/></expr_stmt>
	}<pos:position pos:line="432" pos:column="10"/></block></then></if>

	<expr_stmt><expr><operator pos:line="434" pos:column="9">*<pos:position pos:line="434" pos:column="10"/></operator><name pos:line="434" pos:column="10">argv<pos:position pos:line="434" pos:column="14"/></name> <operator pos:line="434" pos:column="15">=<pos:position pos:line="434" pos:column="16"/></operator> <call><name pos:line="434" pos:column="17">poptGetArgs<pos:position pos:line="434" pos:column="28"/></name><argument_list pos:line="434" pos:column="28">(<argument><expr><name pos:line="434" pos:column="29">pc<pos:position pos:line="434" pos:column="31"/></name></expr></argument>)<pos:position pos:line="434" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="434" pos:column="33"/></expr_stmt>
	<expr_stmt><expr><operator pos:line="435" pos:column="9">*<pos:position pos:line="435" pos:column="10"/></operator><name pos:line="435" pos:column="10">argc<pos:position pos:line="435" pos:column="14"/></name> <operator pos:line="435" pos:column="15">=<pos:position pos:line="435" pos:column="16"/></operator> <call><name pos:line="435" pos:column="17">count_args<pos:position pos:line="435" pos:column="27"/></name><argument_list pos:line="435" pos:column="27">(<argument><expr><operator pos:line="435" pos:column="28">*<pos:position pos:line="435" pos:column="29"/></operator><name pos:line="435" pos:column="29">argv<pos:position pos:line="435" pos:column="33"/></name></expr></argument>)<pos:position pos:line="435" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="435" pos:column="35"/></expr_stmt>

	<if pos:line="437" pos:column="9">if <condition pos:line="437" pos:column="12">(<expr><name pos:line="437" pos:column="13">sanitize_paths<pos:position pos:line="437" pos:column="27"/></name></expr>)<pos:position pos:line="437" pos:column="28"/></condition><then pos:line="437" pos:column="28"> <block pos:line="437" pos:column="29">{
		<decl_stmt><decl><type><name pos:line="438" pos:column="17">int<pos:position pos:line="438" pos:column="20"/></name></type> <name pos:line="438" pos:column="21">i<pos:position pos:line="438" pos:column="22"/></name></decl>;<pos:position pos:line="438" pos:column="23"/></decl_stmt>
		<for pos:line="439" pos:column="17">for <control pos:line="439" pos:column="21">(<init><expr><name pos:line="439" pos:column="22">i<pos:position pos:line="439" pos:column="23"/></name> <operator pos:line="439" pos:column="24">=<pos:position pos:line="439" pos:column="25"/></operator> <operator pos:line="439" pos:column="26">*<pos:position pos:line="439" pos:column="27"/></operator><name pos:line="439" pos:column="27">argc<pos:position pos:line="439" pos:column="31"/></name></expr>;<pos:position pos:line="439" pos:column="32"/></init> <condition><expr><name pos:line="439" pos:column="33">i<pos:position pos:line="439" pos:column="34"/></name><operator pos:line="439" pos:column="34">--<pos:position pos:line="439" pos:column="36"/></operator> <operator pos:line="439" pos:column="37">&gt;<pos:position pos:line="439" pos:column="41"/></operator> <literal type="number" pos:line="439" pos:column="39">0<pos:position pos:line="439" pos:column="40"/></literal></expr>;<pos:position pos:line="439" pos:column="41"/></condition> <incr/>)<pos:position pos:line="439" pos:column="43"/></control>
			<block type="pseudo"><expr_stmt><expr><operator pos:line="440" pos:column="25">(<pos:position pos:line="440" pos:column="26"/></operator><operator pos:line="440" pos:column="26">*<pos:position pos:line="440" pos:column="27"/></operator><name pos:line="440" pos:column="27">argv<pos:position pos:line="440" pos:column="31"/></name><operator pos:line="440" pos:column="31">)<pos:position pos:line="440" pos:column="32"/></operator><index pos:line="440" pos:column="32">[<expr><name pos:line="440" pos:column="33">i<pos:position pos:line="440" pos:column="34"/></name></expr>]<pos:position pos:line="440" pos:column="35"/></index> <operator pos:line="440" pos:column="36">=<pos:position pos:line="440" pos:column="37"/></operator> <call><name pos:line="440" pos:column="38">sanitize_path<pos:position pos:line="440" pos:column="51"/></name><argument_list pos:line="440" pos:column="51">(<argument><expr><name pos:line="440" pos:column="52">NULL<pos:position pos:line="440" pos:column="56"/></name></expr></argument>, <argument><expr><operator pos:line="440" pos:column="58">(<pos:position pos:line="440" pos:column="59"/></operator><operator pos:line="440" pos:column="59">*<pos:position pos:line="440" pos:column="60"/></operator><name pos:line="440" pos:column="60">argv<pos:position pos:line="440" pos:column="64"/></name><operator pos:line="440" pos:column="64">)<pos:position pos:line="440" pos:column="65"/></operator><index pos:line="440" pos:column="65">[<expr><name pos:line="440" pos:column="66">i<pos:position pos:line="440" pos:column="67"/></name></expr>]<pos:position pos:line="440" pos:column="68"/></index></expr></argument>, <argument><expr><literal type="string" pos:line="440" pos:column="70">""<pos:position pos:line="440" pos:column="72"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="440" pos:column="74">0<pos:position pos:line="440" pos:column="75"/></literal></expr></argument>, <argument><expr><name pos:line="440" pos:column="77">NULL<pos:position pos:line="440" pos:column="81"/></name></expr></argument>)<pos:position pos:line="440" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="440" pos:column="83"/></expr_stmt></block></for>
		<if pos:line="441" pos:column="17">if <condition pos:line="441" pos:column="20">(<expr><name pos:line="441" pos:column="21">tmpdir<pos:position pos:line="441" pos:column="27"/></name></expr>)<pos:position pos:line="441" pos:column="28"/></condition><then pos:line="441" pos:column="28">
			<block type="pseudo"><expr_stmt><expr><name pos:line="442" pos:column="25">tmpdir<pos:position pos:line="442" pos:column="31"/></name> <operator pos:line="442" pos:column="32">=<pos:position pos:line="442" pos:column="33"/></operator> <call><name pos:line="442" pos:column="34">sanitize_path<pos:position pos:line="442" pos:column="47"/></name><argument_list pos:line="442" pos:column="47">(<argument><expr><name pos:line="442" pos:column="48">NULL<pos:position pos:line="442" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="442" pos:column="54">tmpdir<pos:position pos:line="442" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="442" pos:column="62">NULL<pos:position pos:line="442" pos:column="66"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="442" pos:column="68">0<pos:position pos:line="442" pos:column="69"/></literal></expr></argument>, <argument><expr><name pos:line="442" pos:column="71">NULL<pos:position pos:line="442" pos:column="75"/></name></expr></argument>)<pos:position pos:line="442" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="442" pos:column="77"/></expr_stmt></block></then></if>
		<if pos:line="443" pos:column="17">if <condition pos:line="443" pos:column="20">(<expr><name pos:line="443" pos:column="21">backup_dir<pos:position pos:line="443" pos:column="31"/></name></expr>)<pos:position pos:line="443" pos:column="32"/></condition><then pos:line="443" pos:column="32">
			<block type="pseudo"><expr_stmt><expr><name pos:line="444" pos:column="25">backup_dir<pos:position pos:line="444" pos:column="35"/></name> <operator pos:line="444" pos:column="36">=<pos:position pos:line="444" pos:column="37"/></operator> <call><name pos:line="444" pos:column="38">sanitize_path<pos:position pos:line="444" pos:column="51"/></name><argument_list pos:line="444" pos:column="51">(<argument><expr><name pos:line="444" pos:column="52">NULL<pos:position pos:line="444" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="444" pos:column="58">backup_dir<pos:position pos:line="444" pos:column="68"/></name></expr></argument>, <argument><expr><name pos:line="444" pos:column="70">NULL<pos:position pos:line="444" pos:column="74"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="444" pos:column="76">0<pos:position pos:line="444" pos:column="77"/></literal></expr></argument>, <argument><expr><name pos:line="444" pos:column="79">NULL<pos:position pos:line="444" pos:column="83"/></name></expr></argument>)<pos:position pos:line="444" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="444" pos:column="85"/></expr_stmt></block></then></if>
	}<pos:position pos:line="445" pos:column="10"/></block></then></if>
	<if pos:line="446" pos:column="9">if <condition pos:line="446" pos:column="12">(<expr><name><name pos:line="446" pos:column="13">server_filter_list<pos:position pos:line="446" pos:column="31"/></name><operator pos:line="446" pos:column="31">.<pos:position pos:line="446" pos:column="32"/></operator><name pos:line="446" pos:column="32">head<pos:position pos:line="446" pos:column="36"/></name></name> <operator pos:line="446" pos:column="37">&amp;&amp;<pos:position pos:line="446" pos:column="47"/></operator> <operator pos:line="446" pos:column="40">!<pos:position pos:line="446" pos:column="41"/></operator><name pos:line="446" pos:column="41">am_sender<pos:position pos:line="446" pos:column="50"/></name></expr>)<pos:position pos:line="446" pos:column="51"/></condition><then pos:line="446" pos:column="51"> <block pos:line="446" pos:column="52">{
		<decl_stmt><decl><type><name><name pos:line="447" pos:column="17">struct<pos:position pos:line="447" pos:column="23"/></name> <name pos:line="447" pos:column="24">filter_list_struct<pos:position pos:line="447" pos:column="42"/></name></name> <modifier pos:line="447" pos:column="43">*<pos:position pos:line="447" pos:column="44"/></modifier></type><name pos:line="447" pos:column="44">elp<pos:position pos:line="447" pos:column="47"/></name> <init pos:line="447" pos:column="48">= <expr><operator pos:line="447" pos:column="50">&amp;<pos:position pos:line="447" pos:column="55"/></operator><name pos:line="447" pos:column="51">server_filter_list<pos:position pos:line="447" pos:column="69"/></name></expr></init></decl>;<pos:position pos:line="447" pos:column="70"/></decl_stmt>
		<if pos:line="448" pos:column="17">if <condition pos:line="448" pos:column="20">(<expr><name pos:line="448" pos:column="21">tmpdir<pos:position pos:line="448" pos:column="27"/></name></expr>)<pos:position pos:line="448" pos:column="28"/></condition><then pos:line="448" pos:column="28"> <block pos:line="448" pos:column="29">{
			<if pos:line="449" pos:column="25">if <condition pos:line="449" pos:column="28">(<expr><operator pos:line="449" pos:column="29">!<pos:position pos:line="449" pos:column="30"/></operator><operator pos:line="449" pos:column="30">*<pos:position pos:line="449" pos:column="31"/></operator><name pos:line="449" pos:column="31">tmpdir<pos:position pos:line="449" pos:column="37"/></name></expr>)<pos:position pos:line="449" pos:column="38"/></condition><then pos:line="449" pos:column="38">
				<block type="pseudo"><goto pos:line="450" pos:column="33">goto <name pos:line="450" pos:column="38">options_rejected<pos:position pos:line="450" pos:column="54"/></name>;<pos:position pos:line="450" pos:column="55"/></goto></block></then></if>
			<expr_stmt><expr><call><name pos:line="451" pos:column="25">clean_fname<pos:position pos:line="451" pos:column="36"/></name><argument_list pos:line="451" pos:column="36">(<argument><expr><name pos:line="451" pos:column="37">tmpdir<pos:position pos:line="451" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="451" pos:column="45">1<pos:position pos:line="451" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="451" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="451" pos:column="48"/></expr_stmt>
			<if pos:line="452" pos:column="25">if <condition pos:line="452" pos:column="28">(<expr><call><name pos:line="452" pos:column="29">check_filter<pos:position pos:line="452" pos:column="41"/></name><argument_list pos:line="452" pos:column="41">(<argument><expr><name pos:line="452" pos:column="42">elp<pos:position pos:line="452" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="452" pos:column="47">tmpdir<pos:position pos:line="452" pos:column="53"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="452" pos:column="55">1<pos:position pos:line="452" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="452" pos:column="57"/></argument_list></call> <operator pos:line="452" pos:column="58">&lt;<pos:position pos:line="452" pos:column="62"/></operator> <literal type="number" pos:line="452" pos:column="60">0<pos:position pos:line="452" pos:column="61"/></literal></expr>)<pos:position pos:line="452" pos:column="62"/></condition><then pos:line="452" pos:column="62">
				<block type="pseudo"><goto pos:line="453" pos:column="33">goto <name pos:line="453" pos:column="38">options_rejected<pos:position pos:line="453" pos:column="54"/></name>;<pos:position pos:line="453" pos:column="55"/></goto></block></then></if>
		}<pos:position pos:line="454" pos:column="18"/></block></then></if>
		<if pos:line="455" pos:column="17">if <condition pos:line="455" pos:column="20">(<expr><name pos:line="455" pos:column="21">backup_dir<pos:position pos:line="455" pos:column="31"/></name></expr>)<pos:position pos:line="455" pos:column="32"/></condition><then pos:line="455" pos:column="32"> <block pos:line="455" pos:column="33">{
			<if pos:line="456" pos:column="25">if <condition pos:line="456" pos:column="28">(<expr><operator pos:line="456" pos:column="29">!<pos:position pos:line="456" pos:column="30"/></operator><operator pos:line="456" pos:column="30">*<pos:position pos:line="456" pos:column="31"/></operator><name pos:line="456" pos:column="31">backup_dir<pos:position pos:line="456" pos:column="41"/></name></expr>)<pos:position pos:line="456" pos:column="42"/></condition><then pos:line="456" pos:column="42">
				<block type="pseudo"><goto pos:line="457" pos:column="33">goto <name pos:line="457" pos:column="38">options_rejected<pos:position pos:line="457" pos:column="54"/></name>;<pos:position pos:line="457" pos:column="55"/></goto></block></then></if>
			<expr_stmt><expr><call><name pos:line="458" pos:column="25">clean_fname<pos:position pos:line="458" pos:column="36"/></name><argument_list pos:line="458" pos:column="36">(<argument><expr><name pos:line="458" pos:column="37">backup_dir<pos:position pos:line="458" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="458" pos:column="49">1<pos:position pos:line="458" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="458" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="458" pos:column="52"/></expr_stmt>
			<if pos:line="459" pos:column="25">if <condition pos:line="459" pos:column="28">(<expr><call><name pos:line="459" pos:column="29">check_filter<pos:position pos:line="459" pos:column="41"/></name><argument_list pos:line="459" pos:column="41">(<argument><expr><name pos:line="459" pos:column="42">elp<pos:position pos:line="459" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="459" pos:column="47">backup_dir<pos:position pos:line="459" pos:column="57"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="459" pos:column="59">1<pos:position pos:line="459" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="459" pos:column="61"/></argument_list></call> <operator pos:line="459" pos:column="62">&lt;<pos:position pos:line="459" pos:column="66"/></operator> <literal type="number" pos:line="459" pos:column="64">0<pos:position pos:line="459" pos:column="65"/></literal></expr>)<pos:position pos:line="459" pos:column="66"/></condition><then pos:line="459" pos:column="66"> <block pos:line="459" pos:column="67">{
			    <label><name pos:line="460" pos:column="29">options_rejected<pos:position pos:line="460" pos:column="45"/></name>:<pos:position pos:line="460" pos:column="46"/></label>
				<expr_stmt><expr><call><name pos:line="461" pos:column="33">snprintf<pos:position pos:line="461" pos:column="41"/></name><argument_list pos:line="461" pos:column="41">(<argument><expr><name pos:line="461" pos:column="42">err_buf<pos:position pos:line="461" pos:column="49"/></name></expr></argument>, <argument><expr><sizeof pos:line="461" pos:column="51">sizeof <name pos:line="461" pos:column="58">err_buf<pos:position pos:line="461" pos:column="65"/></name></sizeof></expr></argument>,
				    <argument><expr><literal type="string" pos:line="462" pos:column="37">"Your options have been rejected by the server.\n"<pos:position pos:line="462" pos:column="87"/></literal></expr></argument>)<pos:position pos:line="462" pos:column="88"/></argument_list></call></expr>;<pos:position pos:line="462" pos:column="89"/></expr_stmt>
				<return pos:line="463" pos:column="33">return <expr><literal type="number" pos:line="463" pos:column="40">0<pos:position pos:line="463" pos:column="41"/></literal></expr>;<pos:position pos:line="463" pos:column="42"/></return>
			}<pos:position pos:line="464" pos:column="26"/></block></then></if>
		}<pos:position pos:line="465" pos:column="18"/></block></then></if>
	}<pos:position pos:line="466" pos:column="10"/></block></then></if>

	<if pos:line="468" pos:column="9">if <condition pos:line="468" pos:column="12">(<expr><operator pos:line="468" pos:column="13">!<pos:position pos:line="468" pos:column="14"/></operator><name pos:line="468" pos:column="14">backup_suffix<pos:position pos:line="468" pos:column="27"/></name></expr>)<pos:position pos:line="468" pos:column="28"/></condition><then pos:line="468" pos:column="28">
		<block type="pseudo"><expr_stmt><expr><name pos:line="469" pos:column="17">backup_suffix<pos:position pos:line="469" pos:column="30"/></name> <operator pos:line="469" pos:column="31">=<pos:position pos:line="469" pos:column="32"/></operator> <ternary><condition><expr><name pos:line="469" pos:column="33">backup_dir<pos:position pos:line="469" pos:column="43"/></name></expr> ?<pos:position pos:line="469" pos:column="45"/></condition><then pos:line="469" pos:column="45"> <expr><literal type="string" pos:line="469" pos:column="46">""<pos:position pos:line="469" pos:column="48"/></literal></expr> <pos:position pos:line="469" pos:column="49"/></then><else pos:line="469" pos:column="49">: <expr><name pos:line="469" pos:column="51">BACKUP_SUFFIX<pos:position pos:line="469" pos:column="64"/></name></expr></else></ternary></expr>;<pos:position pos:line="469" pos:column="65"/></expr_stmt></block></then></if>
	<expr_stmt><expr><name pos:line="470" pos:column="9">backup_suffix_len<pos:position pos:line="470" pos:column="26"/></name> <operator pos:line="470" pos:column="27">=<pos:position pos:line="470" pos:column="28"/></operator> <call><name pos:line="470" pos:column="29">strlen<pos:position pos:line="470" pos:column="35"/></name><argument_list pos:line="470" pos:column="35">(<argument><expr><name pos:line="470" pos:column="36">backup_suffix<pos:position pos:line="470" pos:column="49"/></name></expr></argument>)<pos:position pos:line="470" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="470" pos:column="51"/></expr_stmt>
	<if pos:line="471" pos:column="9">if <condition pos:line="471" pos:column="12">(<expr><call><name pos:line="471" pos:column="13">strchr<pos:position pos:line="471" pos:column="19"/></name><argument_list pos:line="471" pos:column="19">(<argument><expr><name pos:line="471" pos:column="20">backup_suffix<pos:position pos:line="471" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="471" pos:column="35">'/'<pos:position pos:line="471" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="471" pos:column="39"/></argument_list></call> <operator pos:line="471" pos:column="40">!=<pos:position pos:line="471" pos:column="42"/></operator> <name pos:line="471" pos:column="43">NULL<pos:position pos:line="471" pos:column="47"/></name></expr>)<pos:position pos:line="471" pos:column="48"/></condition><then pos:line="471" pos:column="48"> <block pos:line="471" pos:column="49">{
		<expr_stmt><expr><call><name pos:line="472" pos:column="17">snprintf<pos:position pos:line="472" pos:column="25"/></name><argument_list pos:line="472" pos:column="25">(<argument><expr><name pos:line="472" pos:column="26">err_buf<pos:position pos:line="472" pos:column="33"/></name></expr></argument>, <argument><expr><sizeof pos:line="472" pos:column="35">sizeof <name pos:line="472" pos:column="42">err_buf<pos:position pos:line="472" pos:column="49"/></name></sizeof></expr></argument>,
			<argument><expr><literal type="string" pos:line="473" pos:column="25">"--suffix cannot contain slashes: %s\n"<pos:position pos:line="473" pos:column="64"/></literal></expr></argument>,
			<argument><expr><name pos:line="474" pos:column="25">backup_suffix<pos:position pos:line="474" pos:column="38"/></name></expr></argument>)<pos:position pos:line="474" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="474" pos:column="40"/></expr_stmt>
		<return pos:line="475" pos:column="17">return <expr><literal type="number" pos:line="475" pos:column="24">0<pos:position pos:line="475" pos:column="25"/></literal></expr>;<pos:position pos:line="475" pos:column="26"/></return>
	}<pos:position pos:line="476" pos:column="10"/></block></then></if>
	<if pos:line="477" pos:column="9">if <condition pos:line="477" pos:column="12">(<expr><name pos:line="477" pos:column="13">backup_dir<pos:position pos:line="477" pos:column="23"/></name></expr>)<pos:position pos:line="477" pos:column="24"/></condition><then pos:line="477" pos:column="24"> <block pos:line="477" pos:column="25">{
		<expr_stmt><expr><name pos:line="478" pos:column="17">backup_dir_len<pos:position pos:line="478" pos:column="31"/></name> <operator pos:line="478" pos:column="32">=<pos:position pos:line="478" pos:column="33"/></operator> <call><name pos:line="478" pos:column="34">strlcpy<pos:position pos:line="478" pos:column="41"/></name><argument_list pos:line="478" pos:column="41">(<argument><expr><name pos:line="478" pos:column="42">backup_dir_buf<pos:position pos:line="478" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="478" pos:column="58">backup_dir<pos:position pos:line="478" pos:column="68"/></name></expr></argument>, <argument><expr><sizeof pos:line="478" pos:column="70">sizeof <name pos:line="478" pos:column="77">backup_dir_buf<pos:position pos:line="478" pos:column="91"/></name></sizeof></expr></argument>)<pos:position pos:line="478" pos:column="92"/></argument_list></call></expr>;<pos:position pos:line="478" pos:column="93"/></expr_stmt>
		<expr_stmt><expr><name pos:line="479" pos:column="17">backup_dir_remainder<pos:position pos:line="479" pos:column="37"/></name> <operator pos:line="479" pos:column="38">=<pos:position pos:line="479" pos:column="39"/></operator> <sizeof pos:line="479" pos:column="40">sizeof <name pos:line="479" pos:column="47">backup_dir_buf<pos:position pos:line="479" pos:column="61"/></name></sizeof> <operator pos:line="479" pos:column="62">-<pos:position pos:line="479" pos:column="63"/></operator> <name pos:line="479" pos:column="64">backup_dir_len<pos:position pos:line="479" pos:column="78"/></name></expr>;<pos:position pos:line="479" pos:column="79"/></expr_stmt>
		<if pos:line="480" pos:column="17">if <condition pos:line="480" pos:column="20">(<expr><name pos:line="480" pos:column="21">backup_dir_remainder<pos:position pos:line="480" pos:column="41"/></name> <operator pos:line="480" pos:column="42">&lt;<pos:position pos:line="480" pos:column="46"/></operator> <literal type="number" pos:line="480" pos:column="44">32<pos:position pos:line="480" pos:column="46"/></literal></expr>)<pos:position pos:line="480" pos:column="47"/></condition><then pos:line="480" pos:column="47"> <block pos:line="480" pos:column="48">{
			<expr_stmt><expr><call><name pos:line="481" pos:column="25">snprintf<pos:position pos:line="481" pos:column="33"/></name><argument_list pos:line="481" pos:column="33">(<argument><expr><name pos:line="481" pos:column="34">err_buf<pos:position pos:line="481" pos:column="41"/></name></expr></argument>, <argument><expr><sizeof pos:line="481" pos:column="43">sizeof <name pos:line="481" pos:column="50">err_buf<pos:position pos:line="481" pos:column="57"/></name></sizeof></expr></argument>,
				<argument><expr><literal type="string" pos:line="482" pos:column="33">"the --backup-dir path is WAY too long.\n"<pos:position pos:line="482" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="482" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="482" pos:column="77"/></expr_stmt>
			<return pos:line="483" pos:column="25">return <expr><literal type="number" pos:line="483" pos:column="32">0<pos:position pos:line="483" pos:column="33"/></literal></expr>;<pos:position pos:line="483" pos:column="34"/></return>
		}<pos:position pos:line="484" pos:column="18"/></block></then></if>
		<if pos:line="485" pos:column="17">if <condition pos:line="485" pos:column="20">(<expr><name><name pos:line="485" pos:column="21">backup_dir_buf<pos:position pos:line="485" pos:column="35"/></name><index pos:line="485" pos:column="35">[<expr><name pos:line="485" pos:column="36">backup_dir_len<pos:position pos:line="485" pos:column="50"/></name> <operator pos:line="485" pos:column="51">-<pos:position pos:line="485" pos:column="52"/></operator> <literal type="number" pos:line="485" pos:column="53">1<pos:position pos:line="485" pos:column="54"/></literal></expr>]<pos:position pos:line="485" pos:column="55"/></index></name> <operator pos:line="485" pos:column="56">!=<pos:position pos:line="485" pos:column="58"/></operator> <literal type="char" pos:line="485" pos:column="59">'/'<pos:position pos:line="485" pos:column="62"/></literal></expr>)<pos:position pos:line="485" pos:column="63"/></condition><then pos:line="485" pos:column="63"> <block pos:line="485" pos:column="64">{
			<expr_stmt><expr><name><name pos:line="486" pos:column="25">backup_dir_buf<pos:position pos:line="486" pos:column="39"/></name><index pos:line="486" pos:column="39">[<expr><name pos:line="486" pos:column="40">backup_dir_len<pos:position pos:line="486" pos:column="54"/></name><operator pos:line="486" pos:column="54">++<pos:position pos:line="486" pos:column="56"/></operator></expr>]<pos:position pos:line="486" pos:column="57"/></index></name> <operator pos:line="486" pos:column="58">=<pos:position pos:line="486" pos:column="59"/></operator> <literal type="char" pos:line="486" pos:column="60">'/'<pos:position pos:line="486" pos:column="63"/></literal></expr>;<pos:position pos:line="486" pos:column="64"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="487" pos:column="25">backup_dir_buf<pos:position pos:line="487" pos:column="39"/></name><index pos:line="487" pos:column="39">[<expr><name pos:line="487" pos:column="40">backup_dir_len<pos:position pos:line="487" pos:column="54"/></name></expr>]<pos:position pos:line="487" pos:column="55"/></index></name> <operator pos:line="487" pos:column="56">=<pos:position pos:line="487" pos:column="57"/></operator> <literal type="char" pos:line="487" pos:column="58">'\0'<pos:position pos:line="487" pos:column="62"/></literal></expr>;<pos:position pos:line="487" pos:column="63"/></expr_stmt>
		}<pos:position pos:line="488" pos:column="18"/></block></then></if>
		<if pos:line="489" pos:column="17">if <condition pos:line="489" pos:column="20">(<expr><name pos:line="489" pos:column="21">verbose<pos:position pos:line="489" pos:column="28"/></name> <operator pos:line="489" pos:column="29">&gt;<pos:position pos:line="489" pos:column="33"/></operator> <literal type="number" pos:line="489" pos:column="31">1<pos:position pos:line="489" pos:column="32"/></literal> <operator pos:line="489" pos:column="33">&amp;&amp;<pos:position pos:line="489" pos:column="43"/></operator> <operator pos:line="489" pos:column="36">!<pos:position pos:line="489" pos:column="37"/></operator><name pos:line="489" pos:column="37">am_sender<pos:position pos:line="489" pos:column="46"/></name></expr>)<pos:position pos:line="489" pos:column="47"/></condition><then pos:line="489" pos:column="47">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="490" pos:column="25">rprintf<pos:position pos:line="490" pos:column="32"/></name><argument_list pos:line="490" pos:column="32">(<argument><expr><name pos:line="490" pos:column="33">FINFO<pos:position pos:line="490" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="490" pos:column="40">"backup_dir is %s\n"<pos:position pos:line="490" pos:column="60"/></literal></expr></argument>, <argument><expr><name pos:line="490" pos:column="62">backup_dir_buf<pos:position pos:line="490" pos:column="76"/></name></expr></argument>)<pos:position pos:line="490" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="490" pos:column="78"/></expr_stmt></block></then></if>
	}<pos:position pos:line="491" pos:column="10"/></block></then> <elseif pos:line="491" pos:column="11">else <if pos:line="491" pos:column="16">if <condition pos:line="491" pos:column="19">(<expr><operator pos:line="491" pos:column="20">!<pos:position pos:line="491" pos:column="21"/></operator><name pos:line="491" pos:column="21">backup_suffix_len<pos:position pos:line="491" pos:column="38"/></name> <operator pos:line="491" pos:column="39">&amp;&amp;<pos:position pos:line="491" pos:column="49"/></operator> <operator pos:line="491" pos:column="42">(<pos:position pos:line="491" pos:column="43"/></operator><operator pos:line="491" pos:column="43">!<pos:position pos:line="491" pos:column="44"/></operator><name pos:line="491" pos:column="44">am_server<pos:position pos:line="491" pos:column="53"/></name> <operator pos:line="491" pos:column="54">||<pos:position pos:line="491" pos:column="56"/></operator> <operator pos:line="491" pos:column="57">!<pos:position pos:line="491" pos:column="58"/></operator><name pos:line="491" pos:column="58">am_sender<pos:position pos:line="491" pos:column="67"/></name><operator pos:line="491" pos:column="67">)<pos:position pos:line="491" pos:column="68"/></operator></expr>)<pos:position pos:line="491" pos:column="69"/></condition><then pos:line="491" pos:column="69"> <block pos:line="491" pos:column="70">{
		<expr_stmt><expr><call><name pos:line="492" pos:column="17">snprintf<pos:position pos:line="492" pos:column="25"/></name><argument_list pos:line="492" pos:column="25">(<argument><expr><name pos:line="492" pos:column="26">err_buf<pos:position pos:line="492" pos:column="33"/></name></expr></argument>, <argument><expr><sizeof pos:line="492" pos:column="35">sizeof <name pos:line="492" pos:column="42">err_buf<pos:position pos:line="492" pos:column="49"/></name></sizeof></expr></argument>,
			<argument><expr><literal type="string" pos:line="493" pos:column="25">"--suffix cannot be a null string without --backup-dir\n"<pos:position pos:line="493" pos:column="82"/></literal></expr></argument>)<pos:position pos:line="493" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="493" pos:column="84"/></expr_stmt>
		<return pos:line="494" pos:column="17">return <expr><literal type="number" pos:line="494" pos:column="24">0<pos:position pos:line="494" pos:column="25"/></literal></expr>;<pos:position pos:line="494" pos:column="26"/></return>
	}<pos:position pos:line="495" pos:column="10"/></block></then></if></elseif> <elseif pos:line="495" pos:column="11">else <if pos:line="495" pos:column="16">if <condition pos:line="495" pos:column="19">(<expr><name pos:line="495" pos:column="20">make_backups<pos:position pos:line="495" pos:column="32"/></name> <operator pos:line="495" pos:column="33">&amp;&amp;<pos:position pos:line="495" pos:column="43"/></operator> <name pos:line="495" pos:column="36">delete_mode<pos:position pos:line="495" pos:column="47"/></name> <operator pos:line="495" pos:column="48">&amp;&amp;<pos:position pos:line="495" pos:column="58"/></operator> <operator pos:line="495" pos:column="51">!<pos:position pos:line="495" pos:column="52"/></operator><name pos:line="495" pos:column="52">delete_excluded<pos:position pos:line="495" pos:column="67"/></name></expr>)<pos:position pos:line="495" pos:column="68"/></condition><then pos:line="495" pos:column="68"> <block pos:line="495" pos:column="69">{
		<expr_stmt><expr><call><name pos:line="496" pos:column="17">snprintf<pos:position pos:line="496" pos:column="25"/></name><argument_list pos:line="496" pos:column="25">(<argument><expr><name pos:line="496" pos:column="26">backup_dir_buf<pos:position pos:line="496" pos:column="40"/></name></expr></argument>, <argument><expr><sizeof pos:line="496" pos:column="42">sizeof <name pos:line="496" pos:column="49">backup_dir_buf<pos:position pos:line="496" pos:column="63"/></name></sizeof></expr></argument>,
			<argument><expr><literal type="string" pos:line="497" pos:column="25">"P *%s"<pos:position pos:line="497" pos:column="32"/></literal></expr></argument>, <argument><expr><name pos:line="497" pos:column="34">backup_suffix<pos:position pos:line="497" pos:column="47"/></name></expr></argument>)<pos:position pos:line="497" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="497" pos:column="49"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="498" pos:column="17">parse_rule<pos:position pos:line="498" pos:column="27"/></name><argument_list pos:line="498" pos:column="27">(<argument><expr><operator pos:line="498" pos:column="28">&amp;<pos:position pos:line="498" pos:column="33"/></operator><name pos:line="498" pos:column="29">filter_list<pos:position pos:line="498" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="498" pos:column="42">backup_dir_buf<pos:position pos:line="498" pos:column="56"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="498" pos:column="58">0<pos:position pos:line="498" pos:column="59"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="498" pos:column="61">0<pos:position pos:line="498" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="498" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="498" pos:column="64"/></expr_stmt>
	}<pos:position pos:line="499" pos:column="10"/></block></then></if></elseif></if>
	<if pos:line="500" pos:column="9">if <condition pos:line="500" pos:column="12">(<expr><name pos:line="500" pos:column="13">make_backups<pos:position pos:line="500" pos:column="25"/></name> <operator pos:line="500" pos:column="26">&amp;&amp;<pos:position pos:line="500" pos:column="36"/></operator> <operator pos:line="500" pos:column="29">!<pos:position pos:line="500" pos:column="30"/></operator><name pos:line="500" pos:column="30">backup_dir<pos:position pos:line="500" pos:column="40"/></name></expr>)<pos:position pos:line="500" pos:column="41"/></condition><then pos:line="500" pos:column="41">
		<block type="pseudo"><expr_stmt><expr><name pos:line="501" pos:column="17">omit_dir_times<pos:position pos:line="501" pos:column="31"/></name> <operator pos:line="501" pos:column="32">=<pos:position pos:line="501" pos:column="33"/></operator> <literal type="number" pos:line="501" pos:column="34">1<pos:position pos:line="501" pos:column="35"/></literal></expr>;<pos:position pos:line="501" pos:column="36"/></expr_stmt></block></then></if>

	<if pos:line="503" pos:column="9">if <condition pos:line="503" pos:column="12">(<expr><name pos:line="503" pos:column="13">stdout_format<pos:position pos:line="503" pos:column="26"/></name></expr>)<pos:position pos:line="503" pos:column="27"/></condition><then pos:line="503" pos:column="27"> <block pos:line="503" pos:column="28">{
		<if pos:line="504" pos:column="17">if <condition pos:line="504" pos:column="20">(<expr><name pos:line="504" pos:column="21">am_server<pos:position pos:line="504" pos:column="30"/></name> <operator pos:line="504" pos:column="31">&amp;&amp;<pos:position pos:line="504" pos:column="41"/></operator> <call><name pos:line="504" pos:column="34">log_format_has<pos:position pos:line="504" pos:column="48"/></name><argument_list pos:line="504" pos:column="48">(<argument><expr><name pos:line="504" pos:column="49">stdout_format<pos:position pos:line="504" pos:column="62"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="504" pos:column="64">'I'<pos:position pos:line="504" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="504" pos:column="68"/></argument_list></call></expr>)<pos:position pos:line="504" pos:column="69"/></condition><then pos:line="504" pos:column="69">
			<block type="pseudo"><expr_stmt><expr><name pos:line="505" pos:column="25">stdout_format_has_i<pos:position pos:line="505" pos:column="44"/></name> <operator pos:line="505" pos:column="45">=<pos:position pos:line="505" pos:column="46"/></operator> <literal type="number" pos:line="505" pos:column="47">2<pos:position pos:line="505" pos:column="48"/></literal></expr>;<pos:position pos:line="505" pos:column="49"/></expr_stmt></block></then>
		<elseif pos:line="506" pos:column="17">else <if pos:line="506" pos:column="22">if <condition pos:line="506" pos:column="25">(<expr><call><name pos:line="506" pos:column="26">log_format_has<pos:position pos:line="506" pos:column="40"/></name><argument_list pos:line="506" pos:column="40">(<argument><expr><name pos:line="506" pos:column="41">stdout_format<pos:position pos:line="506" pos:column="54"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="506" pos:column="56">'i'<pos:position pos:line="506" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="506" pos:column="60"/></argument_list></call></expr>)<pos:position pos:line="506" pos:column="61"/></condition><then pos:line="506" pos:column="61">
			<block type="pseudo"><expr_stmt><expr><name pos:line="507" pos:column="25">stdout_format_has_i<pos:position pos:line="507" pos:column="44"/></name> <operator pos:line="507" pos:column="45">=<pos:position pos:line="507" pos:column="46"/></operator> <name pos:line="507" pos:column="47">itemize_changes<pos:position pos:line="507" pos:column="62"/></name> <operator pos:line="507" pos:column="63">|<pos:position pos:line="507" pos:column="64"/></operator> <literal type="number" pos:line="507" pos:column="65">1<pos:position pos:line="507" pos:column="66"/></literal></expr>;<pos:position pos:line="507" pos:column="67"/></expr_stmt></block></then></if></elseif></if>
		<if pos:line="508" pos:column="17">if <condition pos:line="508" pos:column="20">(<expr><operator pos:line="508" pos:column="21">!<pos:position pos:line="508" pos:column="22"/></operator><call><name pos:line="508" pos:column="22">log_format_has<pos:position pos:line="508" pos:column="36"/></name><argument_list pos:line="508" pos:column="36">(<argument><expr><name pos:line="508" pos:column="37">stdout_format<pos:position pos:line="508" pos:column="50"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="508" pos:column="52">'b'<pos:position pos:line="508" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="508" pos:column="56"/></argument_list></call>
		 <operator pos:line="509" pos:column="18">&amp;&amp;<pos:position pos:line="509" pos:column="28"/></operator> <operator pos:line="509" pos:column="21">!<pos:position pos:line="509" pos:column="22"/></operator><call><name pos:line="509" pos:column="22">log_format_has<pos:position pos:line="509" pos:column="36"/></name><argument_list pos:line="509" pos:column="36">(<argument><expr><name pos:line="509" pos:column="37">stdout_format<pos:position pos:line="509" pos:column="50"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="509" pos:column="52">'c'<pos:position pos:line="509" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="509" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="509" pos:column="57"/></condition><then pos:line="509" pos:column="57">
			<block type="pseudo"><expr_stmt><expr><name pos:line="510" pos:column="25">log_before_transfer<pos:position pos:line="510" pos:column="44"/></name> <operator pos:line="510" pos:column="45">=<pos:position pos:line="510" pos:column="46"/></operator> <operator pos:line="510" pos:column="47">!<pos:position pos:line="510" pos:column="48"/></operator><name pos:line="510" pos:column="48">am_server<pos:position pos:line="510" pos:column="57"/></name></expr>;<pos:position pos:line="510" pos:column="58"/></expr_stmt></block></then></if>
	}<pos:position pos:line="511" pos:column="10"/></block></then> <elseif pos:line="511" pos:column="11">else <if pos:line="511" pos:column="16">if <condition pos:line="511" pos:column="19">(<expr><name pos:line="511" pos:column="20">itemize_changes<pos:position pos:line="511" pos:column="35"/></name></expr>)<pos:position pos:line="511" pos:column="36"/></condition><then pos:line="511" pos:column="36"> <block pos:line="511" pos:column="37">{
		<expr_stmt><expr><name pos:line="512" pos:column="17">stdout_format<pos:position pos:line="512" pos:column="30"/></name> <operator pos:line="512" pos:column="31">=<pos:position pos:line="512" pos:column="32"/></operator> <literal type="string" pos:line="512" pos:column="33">"%i %n%L"<pos:position pos:line="512" pos:column="42"/></literal></expr>;<pos:position pos:line="512" pos:column="43"/></expr_stmt>
		<expr_stmt><expr><name pos:line="513" pos:column="17">stdout_format_has_i<pos:position pos:line="513" pos:column="36"/></name> <operator pos:line="513" pos:column="37">=<pos:position pos:line="513" pos:column="38"/></operator> <name pos:line="513" pos:column="39">itemize_changes<pos:position pos:line="513" pos:column="54"/></name></expr>;<pos:position pos:line="513" pos:column="55"/></expr_stmt>
		<expr_stmt><expr><name pos:line="514" pos:column="17">log_before_transfer<pos:position pos:line="514" pos:column="36"/></name> <operator pos:line="514" pos:column="37">=<pos:position pos:line="514" pos:column="38"/></operator> <operator pos:line="514" pos:column="39">!<pos:position pos:line="514" pos:column="40"/></operator><name pos:line="514" pos:column="40">am_server<pos:position pos:line="514" pos:column="49"/></name></expr>;<pos:position pos:line="514" pos:column="50"/></expr_stmt>
	}<pos:position pos:line="515" pos:column="10"/></block></then></if></elseif></if>

	<if pos:line="517" pos:column="9">if <condition pos:line="517" pos:column="12">(<expr><name pos:line="517" pos:column="13">do_progress<pos:position pos:line="517" pos:column="24"/></name> <operator pos:line="517" pos:column="25">&amp;&amp;<pos:position pos:line="517" pos:column="35"/></operator> <operator pos:line="517" pos:column="28">!<pos:position pos:line="517" pos:column="29"/></operator><name pos:line="517" pos:column="29">verbose<pos:position pos:line="517" pos:column="36"/></name> <operator pos:line="517" pos:column="37">&amp;&amp;<pos:position pos:line="517" pos:column="47"/></operator> <operator pos:line="517" pos:column="40">!<pos:position pos:line="517" pos:column="41"/></operator><name pos:line="517" pos:column="41">log_before_transfer<pos:position pos:line="517" pos:column="60"/></name> <operator pos:line="517" pos:column="61">&amp;&amp;<pos:position pos:line="517" pos:column="71"/></operator> <operator pos:line="517" pos:column="64">!<pos:position pos:line="517" pos:column="65"/></operator><name pos:line="517" pos:column="65">am_server<pos:position pos:line="517" pos:column="74"/></name></expr>)<pos:position pos:line="517" pos:column="75"/></condition><then pos:line="517" pos:column="75">
		<block type="pseudo"><expr_stmt><expr><name pos:line="518" pos:column="17">verbose<pos:position pos:line="518" pos:column="24"/></name> <operator pos:line="518" pos:column="25">=<pos:position pos:line="518" pos:column="26"/></operator> <literal type="number" pos:line="518" pos:column="27">1<pos:position pos:line="518" pos:column="28"/></literal></expr>;<pos:position pos:line="518" pos:column="29"/></expr_stmt></block></then></if>

	<if pos:line="520" pos:column="9">if <condition pos:line="520" pos:column="12">(<expr><name pos:line="520" pos:column="13">dry_run<pos:position pos:line="520" pos:column="20"/></name></expr>)<pos:position pos:line="520" pos:column="21"/></condition><then pos:line="520" pos:column="21">
		<block type="pseudo"><expr_stmt><expr><name pos:line="521" pos:column="17">do_xfers<pos:position pos:line="521" pos:column="25"/></name> <operator pos:line="521" pos:column="26">=<pos:position pos:line="521" pos:column="27"/></operator> <literal type="number" pos:line="521" pos:column="28">0<pos:position pos:line="521" pos:column="29"/></literal></expr>;<pos:position pos:line="521" pos:column="30"/></expr_stmt></block></then></if>

	<expr_stmt><expr><call><name pos:line="523" pos:column="9">set_io_timeout<pos:position pos:line="523" pos:column="23"/></name><argument_list pos:line="523" pos:column="23">(<argument><expr><name pos:line="523" pos:column="24">io_timeout<pos:position pos:line="523" pos:column="34"/></name></expr></argument>)<pos:position pos:line="523" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="523" pos:column="36"/></expr_stmt>

	<if pos:line="525" pos:column="9">if <condition pos:line="525" pos:column="12">(<expr><name pos:line="525" pos:column="13">verbose<pos:position pos:line="525" pos:column="20"/></name> <operator pos:line="525" pos:column="21">&amp;&amp;<pos:position pos:line="525" pos:column="31"/></operator> <operator pos:line="525" pos:column="24">!<pos:position pos:line="525" pos:column="25"/></operator><name pos:line="525" pos:column="25">stdout_format<pos:position pos:line="525" pos:column="38"/></name></expr>)<pos:position pos:line="525" pos:column="39"/></condition><then pos:line="525" pos:column="39"> <block pos:line="525" pos:column="40">{
		<expr_stmt><expr><name pos:line="526" pos:column="17">stdout_format<pos:position pos:line="526" pos:column="30"/></name> <operator pos:line="526" pos:column="31">=<pos:position pos:line="526" pos:column="32"/></operator> <literal type="string" pos:line="526" pos:column="33">"%n%L"<pos:position pos:line="526" pos:column="39"/></literal></expr>;<pos:position pos:line="526" pos:column="40"/></expr_stmt>
		<expr_stmt><expr><name pos:line="527" pos:column="17">log_before_transfer<pos:position pos:line="527" pos:column="36"/></name> <operator pos:line="527" pos:column="37">=<pos:position pos:line="527" pos:column="38"/></operator> <operator pos:line="527" pos:column="39">!<pos:position pos:line="527" pos:column="40"/></operator><name pos:line="527" pos:column="40">am_server<pos:position pos:line="527" pos:column="49"/></name></expr>;<pos:position pos:line="527" pos:column="50"/></expr_stmt>
	}<pos:position pos:line="528" pos:column="10"/></block></then></if>
	<if pos:line="529" pos:column="9">if <condition pos:line="529" pos:column="12">(<expr><name pos:line="529" pos:column="13">stdout_format_has_i<pos:position pos:line="529" pos:column="32"/></name> <operator pos:line="529" pos:column="33">||<pos:position pos:line="529" pos:column="35"/></operator> <call><name pos:line="529" pos:column="36">log_format_has<pos:position pos:line="529" pos:column="50"/></name><argument_list pos:line="529" pos:column="50">(<argument><expr><name pos:line="529" pos:column="51">stdout_format<pos:position pos:line="529" pos:column="64"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="529" pos:column="66">'o'<pos:position pos:line="529" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="529" pos:column="70"/></argument_list></call></expr>)<pos:position pos:line="529" pos:column="71"/></condition><then pos:line="529" pos:column="71">
		<block type="pseudo"><expr_stmt><expr><name pos:line="530" pos:column="17">stdout_format_has_o_or_i<pos:position pos:line="530" pos:column="41"/></name> <operator pos:line="530" pos:column="42">=<pos:position pos:line="530" pos:column="43"/></operator> <literal type="number" pos:line="530" pos:column="44">1<pos:position pos:line="530" pos:column="45"/></literal></expr>;<pos:position pos:line="530" pos:column="46"/></expr_stmt></block></then></if>

	<if pos:line="532" pos:column="9">if <condition pos:line="532" pos:column="12">(<expr><name pos:line="532" pos:column="13">logfile_name<pos:position pos:line="532" pos:column="25"/></name> <operator pos:line="532" pos:column="26">&amp;&amp;<pos:position pos:line="532" pos:column="36"/></operator> <operator pos:line="532" pos:column="29">!<pos:position pos:line="532" pos:column="30"/></operator><name pos:line="532" pos:column="30">am_daemon<pos:position pos:line="532" pos:column="39"/></name></expr>)<pos:position pos:line="532" pos:column="40"/></condition><then pos:line="532" pos:column="40"> <block pos:line="532" pos:column="41">{
		<if pos:line="533" pos:column="17">if <condition pos:line="533" pos:column="20">(<expr><operator pos:line="533" pos:column="21">!<pos:position pos:line="533" pos:column="22"/></operator><name pos:line="533" pos:column="22">logfile_format<pos:position pos:line="533" pos:column="36"/></name></expr>)<pos:position pos:line="533" pos:column="37"/></condition><then pos:line="533" pos:column="37"> <block pos:line="533" pos:column="38">{
			<expr_stmt><expr><name pos:line="534" pos:column="25">logfile_format<pos:position pos:line="534" pos:column="39"/></name> <operator pos:line="534" pos:column="40">=<pos:position pos:line="534" pos:column="41"/></operator> <literal type="string" pos:line="534" pos:column="42">"%i %n%L"<pos:position pos:line="534" pos:column="51"/></literal></expr>;<pos:position pos:line="534" pos:column="52"/></expr_stmt>
			<expr_stmt><expr><name pos:line="535" pos:column="25">logfile_format_has_i<pos:position pos:line="535" pos:column="45"/></name> <operator pos:line="535" pos:column="46">=<pos:position pos:line="535" pos:column="47"/></operator> <name pos:line="535" pos:column="48">logfile_format_has_o_or_i<pos:position pos:line="535" pos:column="73"/></name> <operator pos:line="535" pos:column="74">=<pos:position pos:line="535" pos:column="75"/></operator> <literal type="number" pos:line="535" pos:column="76">1<pos:position pos:line="535" pos:column="77"/></literal></expr>;<pos:position pos:line="535" pos:column="78"/></expr_stmt>
		}<pos:position pos:line="536" pos:column="18"/></block></then> <else pos:line="536" pos:column="19">else <block pos:line="536" pos:column="24">{
			<if pos:line="537" pos:column="25">if <condition pos:line="537" pos:column="28">(<expr><call><name pos:line="537" pos:column="29">log_format_has<pos:position pos:line="537" pos:column="43"/></name><argument_list pos:line="537" pos:column="43">(<argument><expr><name pos:line="537" pos:column="44">logfile_format<pos:position pos:line="537" pos:column="58"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="537" pos:column="60">'i'<pos:position pos:line="537" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="537" pos:column="64"/></argument_list></call></expr>)<pos:position pos:line="537" pos:column="65"/></condition><then pos:line="537" pos:column="65">
				<block type="pseudo"><expr_stmt><expr><name pos:line="538" pos:column="33">logfile_format_has_i<pos:position pos:line="538" pos:column="53"/></name> <operator pos:line="538" pos:column="54">=<pos:position pos:line="538" pos:column="55"/></operator> <literal type="number" pos:line="538" pos:column="56">1<pos:position pos:line="538" pos:column="57"/></literal></expr>;<pos:position pos:line="538" pos:column="58"/></expr_stmt></block></then></if>
			<if pos:line="539" pos:column="25">if <condition pos:line="539" pos:column="28">(<expr><name pos:line="539" pos:column="29">logfile_format_has_i<pos:position pos:line="539" pos:column="49"/></name> <operator pos:line="539" pos:column="50">||<pos:position pos:line="539" pos:column="52"/></operator> <call><name pos:line="539" pos:column="53">log_format_has<pos:position pos:line="539" pos:column="67"/></name><argument_list pos:line="539" pos:column="67">(<argument><expr><name pos:line="539" pos:column="68">logfile_format<pos:position pos:line="539" pos:column="82"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="539" pos:column="84">'o'<pos:position pos:line="539" pos:column="87"/></literal></expr></argument>)<pos:position pos:line="539" pos:column="88"/></argument_list></call></expr>)<pos:position pos:line="539" pos:column="89"/></condition><then pos:line="539" pos:column="89">
				<block type="pseudo"><expr_stmt><expr><name pos:line="540" pos:column="33">logfile_format_has_o_or_i<pos:position pos:line="540" pos:column="58"/></name> <operator pos:line="540" pos:column="59">=<pos:position pos:line="540" pos:column="60"/></operator> <literal type="number" pos:line="540" pos:column="61">1<pos:position pos:line="540" pos:column="62"/></literal></expr>;<pos:position pos:line="540" pos:column="63"/></expr_stmt></block></then></if>
		}<pos:position pos:line="541" pos:column="18"/></block></else></if>
		<expr_stmt><expr><call><name pos:line="542" pos:column="17">log_init<pos:position pos:line="542" pos:column="25"/></name><argument_list pos:line="542" pos:column="25">(<argument><expr><literal type="number" pos:line="542" pos:column="26">0<pos:position pos:line="542" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="542" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="542" pos:column="29"/></expr_stmt>
	}<pos:position pos:line="543" pos:column="10"/></block></then> <elseif pos:line="543" pos:column="11">else <if pos:line="543" pos:column="16">if <condition pos:line="543" pos:column="19">(<expr><operator pos:line="543" pos:column="20">!<pos:position pos:line="543" pos:column="21"/></operator><name pos:line="543" pos:column="21">am_daemon<pos:position pos:line="543" pos:column="30"/></name></expr>)<pos:position pos:line="543" pos:column="31"/></condition><then pos:line="543" pos:column="31">
		<block type="pseudo"><expr_stmt><expr><name pos:line="544" pos:column="17">logfile_format<pos:position pos:line="544" pos:column="31"/></name> <operator pos:line="544" pos:column="32">=<pos:position pos:line="544" pos:column="33"/></operator> <name pos:line="544" pos:column="34">NULL<pos:position pos:line="544" pos:column="38"/></name></expr>;<pos:position pos:line="544" pos:column="39"/></expr_stmt></block></then></if></elseif></if>

	<if pos:line="546" pos:column="9">if <condition pos:line="546" pos:column="12">(<expr><name pos:line="546" pos:column="13">daemon_bwlimit<pos:position pos:line="546" pos:column="27"/></name> <operator pos:line="546" pos:column="28">&amp;&amp;<pos:position pos:line="546" pos:column="38"/></operator> <operator pos:line="546" pos:column="31">(<pos:position pos:line="546" pos:column="32"/></operator><operator pos:line="546" pos:column="32">!<pos:position pos:line="546" pos:column="33"/></operator><name pos:line="546" pos:column="33">bwlimit<pos:position pos:line="546" pos:column="40"/></name> <operator pos:line="546" pos:column="41">||<pos:position pos:line="546" pos:column="43"/></operator> <name pos:line="546" pos:column="44">bwlimit<pos:position pos:line="546" pos:column="51"/></name> <operator pos:line="546" pos:column="52">&gt;<pos:position pos:line="546" pos:column="56"/></operator> <name pos:line="546" pos:column="54">daemon_bwlimit<pos:position pos:line="546" pos:column="68"/></name><operator pos:line="546" pos:column="68">)<pos:position pos:line="546" pos:column="69"/></operator></expr>)<pos:position pos:line="546" pos:column="70"/></condition><then pos:line="546" pos:column="70">
		<block type="pseudo"><expr_stmt><expr><name pos:line="547" pos:column="17">bwlimit<pos:position pos:line="547" pos:column="24"/></name> <operator pos:line="547" pos:column="25">=<pos:position pos:line="547" pos:column="26"/></operator> <name pos:line="547" pos:column="27">daemon_bwlimit<pos:position pos:line="547" pos:column="41"/></name></expr>;<pos:position pos:line="547" pos:column="42"/></expr_stmt></block></then></if>
	<if pos:line="548" pos:column="9">if <condition pos:line="548" pos:column="12">(<expr><name pos:line="548" pos:column="13">bwlimit<pos:position pos:line="548" pos:column="20"/></name></expr>)<pos:position pos:line="548" pos:column="21"/></condition><then pos:line="548" pos:column="21"> <block pos:line="548" pos:column="22">{
		<expr_stmt><expr><name pos:line="549" pos:column="17">bwlimit_writemax<pos:position pos:line="549" pos:column="33"/></name> <operator pos:line="549" pos:column="34">=<pos:position pos:line="549" pos:column="35"/></operator> <operator pos:line="549" pos:column="36">(<pos:position pos:line="549" pos:column="37"/></operator><name pos:line="549" pos:column="37">size_t<pos:position pos:line="549" pos:column="43"/></name><operator pos:line="549" pos:column="43">)<pos:position pos:line="549" pos:column="44"/></operator><name pos:line="549" pos:column="44">bwlimit<pos:position pos:line="549" pos:column="51"/></name> <operator pos:line="549" pos:column="52">*<pos:position pos:line="549" pos:column="53"/></operator> <literal type="number" pos:line="549" pos:column="54">128<pos:position pos:line="549" pos:column="57"/></literal></expr>;<pos:position pos:line="549" pos:column="58"/></expr_stmt>
		<if pos:line="550" pos:column="17">if <condition pos:line="550" pos:column="20">(<expr><name pos:line="550" pos:column="21">bwlimit_writemax<pos:position pos:line="550" pos:column="37"/></name> <operator pos:line="550" pos:column="38">&lt;<pos:position pos:line="550" pos:column="42"/></operator> <literal type="number" pos:line="550" pos:column="40">512<pos:position pos:line="550" pos:column="43"/></literal></expr>)<pos:position pos:line="550" pos:column="44"/></condition><then pos:line="550" pos:column="44">
			<block type="pseudo"><expr_stmt><expr><name pos:line="551" pos:column="25">bwlimit_writemax<pos:position pos:line="551" pos:column="41"/></name> <operator pos:line="551" pos:column="42">=<pos:position pos:line="551" pos:column="43"/></operator> <literal type="number" pos:line="551" pos:column="44">512<pos:position pos:line="551" pos:column="47"/></literal></expr>;<pos:position pos:line="551" pos:column="48"/></expr_stmt></block></then></if>
	}<pos:position pos:line="552" pos:column="10"/></block></then></if>

	<if pos:line="554" pos:column="9">if <condition pos:line="554" pos:column="12">(<expr><name pos:line="554" pos:column="13">sparse_files<pos:position pos:line="554" pos:column="25"/></name> <operator pos:line="554" pos:column="26">&amp;&amp;<pos:position pos:line="554" pos:column="36"/></operator> <name pos:line="554" pos:column="29">inplace<pos:position pos:line="554" pos:column="36"/></name></expr>)<pos:position pos:line="554" pos:column="37"/></condition><then pos:line="554" pos:column="37"> <block pos:line="554" pos:column="38">{
		<comment type="block" pos:line="555" pos:column="17">/* Note: we don't check for this below, because --append is
		 * OK with --sparse (as long as redos are handled right). */</comment>
		<expr_stmt><expr><call><name pos:line="557" pos:column="17">snprintf<pos:position pos:line="557" pos:column="25"/></name><argument_list pos:line="557" pos:column="25">(<argument><expr><name pos:line="557" pos:column="26">err_buf<pos:position pos:line="557" pos:column="33"/></name></expr></argument>, <argument><expr><sizeof pos:line="557" pos:column="35">sizeof <name pos:line="557" pos:column="42">err_buf<pos:position pos:line="557" pos:column="49"/></name></sizeof></expr></argument>,
			 <argument><expr><literal type="string" pos:line="558" pos:column="26">"--sparse cannot be used with --inplace\n"<pos:position pos:line="558" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="558" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="558" pos:column="70"/></expr_stmt>
		<return pos:line="559" pos:column="17">return <expr><literal type="number" pos:line="559" pos:column="24">0<pos:position pos:line="559" pos:column="25"/></literal></expr>;<pos:position pos:line="559" pos:column="26"/></return>
	}<pos:position pos:line="560" pos:column="10"/></block></then></if>

	<if pos:line="562" pos:column="9">if <condition pos:line="562" pos:column="12">(<expr><name pos:line="562" pos:column="13">append_mode<pos:position pos:line="562" pos:column="24"/></name></expr>)<pos:position pos:line="562" pos:column="25"/></condition><then pos:line="562" pos:column="25"> <block pos:line="562" pos:column="26">{
		<if pos:line="563" pos:column="17">if <condition pos:line="563" pos:column="20">(<expr><name pos:line="563" pos:column="21">whole_file<pos:position pos:line="563" pos:column="31"/></name> <operator pos:line="563" pos:column="32">&gt;<pos:position pos:line="563" pos:column="36"/></operator> <literal type="number" pos:line="563" pos:column="34">0<pos:position pos:line="563" pos:column="35"/></literal></expr>)<pos:position pos:line="563" pos:column="36"/></condition><then pos:line="563" pos:column="36"> <block pos:line="563" pos:column="37">{
			<expr_stmt><expr><call><name pos:line="564" pos:column="25">snprintf<pos:position pos:line="564" pos:column="33"/></name><argument_list pos:line="564" pos:column="33">(<argument><expr><name pos:line="564" pos:column="34">err_buf<pos:position pos:line="564" pos:column="41"/></name></expr></argument>, <argument><expr><sizeof pos:line="564" pos:column="43">sizeof <name pos:line="564" pos:column="50">err_buf<pos:position pos:line="564" pos:column="57"/></name></sizeof></expr></argument>,
				 <argument><expr><literal type="string" pos:line="565" pos:column="34">"--append cannot be used with --whole-file\n"<pos:position pos:line="565" pos:column="79"/></literal></expr></argument>)<pos:position pos:line="565" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="565" pos:column="81"/></expr_stmt>
			<return pos:line="566" pos:column="25">return <expr><literal type="number" pos:line="566" pos:column="32">0<pos:position pos:line="566" pos:column="33"/></literal></expr>;<pos:position pos:line="566" pos:column="34"/></return>
		}<pos:position pos:line="567" pos:column="18"/></block></then></if>
		<if pos:line="568" pos:column="17">if <condition pos:line="568" pos:column="20">(<expr><name pos:line="568" pos:column="21">refused_inplace<pos:position pos:line="568" pos:column="36"/></name></expr>)<pos:position pos:line="568" pos:column="37"/></condition><then pos:line="568" pos:column="37"> <block pos:line="568" pos:column="38">{
			<expr_stmt><expr><call><name pos:line="569" pos:column="25">create_refuse_error<pos:position pos:line="569" pos:column="44"/></name><argument_list pos:line="569" pos:column="44">(<argument><expr><name pos:line="569" pos:column="45">refused_inplace<pos:position pos:line="569" pos:column="60"/></name></expr></argument>)<pos:position pos:line="569" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="569" pos:column="62"/></expr_stmt>
			<return pos:line="570" pos:column="25">return <expr><literal type="number" pos:line="570" pos:column="32">0<pos:position pos:line="570" pos:column="33"/></literal></expr>;<pos:position pos:line="570" pos:column="34"/></return>
		}<pos:position pos:line="571" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name pos:line="572" pos:column="17">inplace<pos:position pos:line="572" pos:column="24"/></name> <operator pos:line="572" pos:column="25">=<pos:position pos:line="572" pos:column="26"/></operator> <literal type="number" pos:line="572" pos:column="27">1<pos:position pos:line="572" pos:column="28"/></literal></expr>;<pos:position pos:line="572" pos:column="29"/></expr_stmt>
	}<pos:position pos:line="573" pos:column="10"/></block></then></if>

	<if pos:line="575" pos:column="9">if <condition pos:line="575" pos:column="12">(<expr><name pos:line="575" pos:column="13">delay_updates<pos:position pos:line="575" pos:column="26"/></name> <operator pos:line="575" pos:column="27">&amp;&amp;<pos:position pos:line="575" pos:column="37"/></operator> <operator pos:line="575" pos:column="30">!<pos:position pos:line="575" pos:column="31"/></operator><name pos:line="575" pos:column="31">partial_dir<pos:position pos:line="575" pos:column="42"/></name></expr>)<pos:position pos:line="575" pos:column="43"/></condition><then pos:line="575" pos:column="43">
		<block type="pseudo"><expr_stmt><expr><name pos:line="576" pos:column="17">partial_dir<pos:position pos:line="576" pos:column="28"/></name> <operator pos:line="576" pos:column="29">=<pos:position pos:line="576" pos:column="30"/></operator> <name pos:line="576" pos:column="31">tmp_partialdir<pos:position pos:line="576" pos:column="45"/></name></expr>;<pos:position pos:line="576" pos:column="46"/></expr_stmt></block></then></if>

	<if pos:line="578" pos:column="9">if <condition pos:line="578" pos:column="12">(<expr><name pos:line="578" pos:column="13">inplace<pos:position pos:line="578" pos:column="20"/></name></expr>)<pos:position pos:line="578" pos:column="21"/></condition><then pos:line="578" pos:column="21"> <block pos:line="578" pos:column="22">{
<cpp:ifdef pos:line="579" pos:column="1">#<cpp:directive pos:line="579" pos:column="2">ifdef<pos:position pos:line="579" pos:column="7"/></cpp:directive> <name pos:line="579" pos:column="8">HAVE_FTRUNCATE<pos:position pos:line="579" pos:column="22"/></name></cpp:ifdef>
		<if pos:line="580" pos:column="17">if <condition pos:line="580" pos:column="20">(<expr><name pos:line="580" pos:column="21">partial_dir<pos:position pos:line="580" pos:column="32"/></name></expr>)<pos:position pos:line="580" pos:column="33"/></condition><then pos:line="580" pos:column="33"> <block pos:line="580" pos:column="34">{
			<expr_stmt><expr><call><name pos:line="581" pos:column="25">snprintf<pos:position pos:line="581" pos:column="33"/></name><argument_list pos:line="581" pos:column="33">(<argument><expr><name pos:line="581" pos:column="34">err_buf<pos:position pos:line="581" pos:column="41"/></name></expr></argument>, <argument><expr><sizeof pos:line="581" pos:column="43">sizeof <name pos:line="581" pos:column="50">err_buf<pos:position pos:line="581" pos:column="57"/></name></sizeof></expr></argument>,
				 <argument><expr><literal type="string" pos:line="582" pos:column="34">"--%s cannot be used with --%s\n"<pos:position pos:line="582" pos:column="67"/></literal></expr></argument>,
				 <argument><expr><ternary><condition><expr><name pos:line="583" pos:column="34">append_mode<pos:position pos:line="583" pos:column="45"/></name></expr> ?<pos:position pos:line="583" pos:column="47"/></condition><then pos:line="583" pos:column="47"> <expr><literal type="string" pos:line="583" pos:column="48">"append"<pos:position pos:line="583" pos:column="56"/></literal></expr> <pos:position pos:line="583" pos:column="57"/></then><else pos:line="583" pos:column="57">: <expr><literal type="string" pos:line="583" pos:column="59">"inplace"<pos:position pos:line="583" pos:column="68"/></literal></expr></else></ternary></expr></argument>,
				 <argument><expr><ternary><condition><expr><name pos:line="584" pos:column="34">delay_updates<pos:position pos:line="584" pos:column="47"/></name></expr> ?<pos:position pos:line="584" pos:column="49"/></condition><then pos:line="584" pos:column="49"> <expr><literal type="string" pos:line="584" pos:column="50">"delay-updates"<pos:position pos:line="584" pos:column="65"/></literal></expr> <pos:position pos:line="584" pos:column="66"/></then><else pos:line="584" pos:column="66">: <expr><literal type="string" pos:line="584" pos:column="68">"partial-dir"<pos:position pos:line="584" pos:column="81"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="584" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="584" pos:column="83"/></expr_stmt>
			<return pos:line="585" pos:column="25">return <expr><literal type="number" pos:line="585" pos:column="32">0<pos:position pos:line="585" pos:column="33"/></literal></expr>;<pos:position pos:line="585" pos:column="34"/></return>
		}<pos:position pos:line="586" pos:column="18"/></block></then></if>
		<comment type="block" pos:line="587" pos:column="17">/* --inplace implies --partial for refusal purposes, but we
		 * clear the keep_partial flag for internal logic purposes. */</comment>
		<if pos:line="589" pos:column="17">if <condition pos:line="589" pos:column="20">(<expr><name pos:line="589" pos:column="21">refused_partial<pos:position pos:line="589" pos:column="36"/></name></expr>)<pos:position pos:line="589" pos:column="37"/></condition><then pos:line="589" pos:column="37"> <block pos:line="589" pos:column="38">{
			<expr_stmt><expr><call><name pos:line="590" pos:column="25">create_refuse_error<pos:position pos:line="590" pos:column="44"/></name><argument_list pos:line="590" pos:column="44">(<argument><expr><name pos:line="590" pos:column="45">refused_partial<pos:position pos:line="590" pos:column="60"/></name></expr></argument>)<pos:position pos:line="590" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="590" pos:column="62"/></expr_stmt>
			<return pos:line="591" pos:column="25">return <expr><literal type="number" pos:line="591" pos:column="32">0<pos:position pos:line="591" pos:column="33"/></literal></expr>;<pos:position pos:line="591" pos:column="34"/></return>
		}<pos:position pos:line="592" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name pos:line="593" pos:column="17">keep_partial<pos:position pos:line="593" pos:column="29"/></name> <operator pos:line="593" pos:column="30">=<pos:position pos:line="593" pos:column="31"/></operator> <literal type="number" pos:line="593" pos:column="32">0<pos:position pos:line="593" pos:column="33"/></literal></expr>;<pos:position pos:line="593" pos:column="34"/></expr_stmt>
<cpp:else pos:line="594" pos:column="1">#<cpp:directive pos:line="594" pos:column="2">else<pos:position pos:line="594" pos:column="6"/></cpp:directive></cpp:else>
		<expr_stmt><expr><call><name pos:line="595" pos:column="17">snprintf<pos:position pos:line="595" pos:column="25"/></name><argument_list pos:line="595" pos:column="25">(<argument><expr><name pos:line="595" pos:column="26">err_buf<pos:position pos:line="595" pos:column="33"/></name></expr></argument>, <argument><expr><sizeof pos:line="595" pos:column="35">sizeof <name pos:line="595" pos:column="42">err_buf<pos:position pos:line="595" pos:column="49"/></name></sizeof></expr></argument>,
			 <argument><expr><literal type="string" pos:line="596" pos:column="26">"--%s is not supported on this %s\n"<pos:position pos:line="596" pos:column="62"/></literal></expr></argument>,
			 <argument><expr><ternary><condition><expr><name pos:line="597" pos:column="26">append_mode<pos:position pos:line="597" pos:column="37"/></name></expr> ?<pos:position pos:line="597" pos:column="39"/></condition><then pos:line="597" pos:column="39"> <expr><literal type="string" pos:line="597" pos:column="40">"append"<pos:position pos:line="597" pos:column="48"/></literal></expr> <pos:position pos:line="597" pos:column="49"/></then><else pos:line="597" pos:column="49">: <expr><literal type="string" pos:line="597" pos:column="51">"inplace"<pos:position pos:line="597" pos:column="60"/></literal></expr></else></ternary></expr></argument>,
			 <argument><expr><ternary><condition><expr><name pos:line="598" pos:column="26">am_server<pos:position pos:line="598" pos:column="35"/></name></expr> ?<pos:position pos:line="598" pos:column="37"/></condition><then pos:line="598" pos:column="37"> <expr><literal type="string" pos:line="598" pos:column="38">"server"<pos:position pos:line="598" pos:column="46"/></literal></expr> <pos:position pos:line="598" pos:column="47"/></then><else pos:line="598" pos:column="47">: <expr><literal type="string" pos:line="598" pos:column="49">"client"<pos:position pos:line="598" pos:column="57"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="598" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="598" pos:column="59"/></expr_stmt>
		<return pos:line="599" pos:column="17">return <expr><literal type="number" pos:line="599" pos:column="24">0<pos:position pos:line="599" pos:column="25"/></literal></expr>;<pos:position pos:line="599" pos:column="26"/></return>
<cpp:endif pos:line="600" pos:column="1">#<cpp:directive pos:line="600" pos:column="2">endif<pos:position pos:line="600" pos:column="7"/></cpp:directive></cpp:endif>
	}<pos:position pos:line="601" pos:column="10"/></block></then> <else pos:line="601" pos:column="11">else <block pos:line="601" pos:column="16">{
		<if pos:line="602" pos:column="17">if <condition pos:line="602" pos:column="20">(<expr><name pos:line="602" pos:column="21">keep_partial<pos:position pos:line="602" pos:column="33"/></name> <operator pos:line="602" pos:column="34">&amp;&amp;<pos:position pos:line="602" pos:column="44"/></operator> <operator pos:line="602" pos:column="37">!<pos:position pos:line="602" pos:column="38"/></operator><name pos:line="602" pos:column="38">partial_dir<pos:position pos:line="602" pos:column="49"/></name> <operator pos:line="602" pos:column="50">&amp;&amp;<pos:position pos:line="602" pos:column="60"/></operator> <operator pos:line="602" pos:column="53">!<pos:position pos:line="602" pos:column="54"/></operator><name pos:line="602" pos:column="54">am_server<pos:position pos:line="602" pos:column="63"/></name></expr>)<pos:position pos:line="602" pos:column="64"/></condition><then pos:line="602" pos:column="64"> <block pos:line="602" pos:column="65">{
			<if pos:line="603" pos:column="25">if <condition pos:line="603" pos:column="28">(<expr><operator pos:line="603" pos:column="29">(<pos:position pos:line="603" pos:column="30"/></operator><name pos:line="603" pos:column="30">arg<pos:position pos:line="603" pos:column="33"/></name> <operator pos:line="603" pos:column="34">=<pos:position pos:line="603" pos:column="35"/></operator> <call><name pos:line="603" pos:column="36">getenv<pos:position pos:line="603" pos:column="42"/></name><argument_list pos:line="603" pos:column="42">(<argument><expr><literal type="string" pos:line="603" pos:column="43">"RSYNC_PARTIAL_DIR"<pos:position pos:line="603" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="603" pos:column="63"/></argument_list></call><operator pos:line="603" pos:column="63">)<pos:position pos:line="603" pos:column="64"/></operator> <operator pos:line="603" pos:column="65">!=<pos:position pos:line="603" pos:column="67"/></operator> <name pos:line="603" pos:column="68">NULL<pos:position pos:line="603" pos:column="72"/></name> <operator pos:line="603" pos:column="73">&amp;&amp;<pos:position pos:line="603" pos:column="83"/></operator> <operator pos:line="603" pos:column="76">*<pos:position pos:line="603" pos:column="77"/></operator><name pos:line="603" pos:column="77">arg<pos:position pos:line="603" pos:column="80"/></name></expr>)<pos:position pos:line="603" pos:column="81"/></condition><then pos:line="603" pos:column="81">
				<block type="pseudo"><expr_stmt><expr><name pos:line="604" pos:column="33">partial_dir<pos:position pos:line="604" pos:column="44"/></name> <operator pos:line="604" pos:column="45">=<pos:position pos:line="604" pos:column="46"/></operator> <call><name pos:line="604" pos:column="47">strdup<pos:position pos:line="604" pos:column="53"/></name><argument_list pos:line="604" pos:column="53">(<argument><expr><name pos:line="604" pos:column="54">arg<pos:position pos:line="604" pos:column="57"/></name></expr></argument>)<pos:position pos:line="604" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="604" pos:column="59"/></expr_stmt></block></then></if>
		}<pos:position pos:line="605" pos:column="18"/></block></then></if>
		<if pos:line="606" pos:column="17">if <condition pos:line="606" pos:column="20">(<expr><name pos:line="606" pos:column="21">partial_dir<pos:position pos:line="606" pos:column="32"/></name></expr>)<pos:position pos:line="606" pos:column="33"/></condition><then pos:line="606" pos:column="33"> <block pos:line="606" pos:column="34">{
			<if pos:line="607" pos:column="25">if <condition pos:line="607" pos:column="28">(<expr><operator pos:line="607" pos:column="29">*<pos:position pos:line="607" pos:column="30"/></operator><name pos:line="607" pos:column="30">partial_dir<pos:position pos:line="607" pos:column="41"/></name></expr>)<pos:position pos:line="607" pos:column="42"/></condition><then pos:line="607" pos:column="42">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="608" pos:column="33">clean_fname<pos:position pos:line="608" pos:column="44"/></name><argument_list pos:line="608" pos:column="44">(<argument><expr><name pos:line="608" pos:column="45">partial_dir<pos:position pos:line="608" pos:column="56"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="608" pos:column="58">1<pos:position pos:line="608" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="608" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="608" pos:column="61"/></expr_stmt></block></then></if>
			<if pos:line="609" pos:column="25">if <condition pos:line="609" pos:column="28">(<expr><operator pos:line="609" pos:column="29">!<pos:position pos:line="609" pos:column="30"/></operator><operator pos:line="609" pos:column="30">*<pos:position pos:line="609" pos:column="31"/></operator><name pos:line="609" pos:column="31">partial_dir<pos:position pos:line="609" pos:column="42"/></name> <operator pos:line="609" pos:column="43">||<pos:position pos:line="609" pos:column="45"/></operator> <call><name pos:line="609" pos:column="46">strcmp<pos:position pos:line="609" pos:column="52"/></name><argument_list pos:line="609" pos:column="52">(<argument><expr><name pos:line="609" pos:column="53">partial_dir<pos:position pos:line="609" pos:column="64"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="609" pos:column="66">"."<pos:position pos:line="609" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="609" pos:column="70"/></argument_list></call> <operator pos:line="609" pos:column="71">==<pos:position pos:line="609" pos:column="73"/></operator> <literal type="number" pos:line="609" pos:column="74">0<pos:position pos:line="609" pos:column="75"/></literal></expr>)<pos:position pos:line="609" pos:column="76"/></condition><then pos:line="609" pos:column="76">
				<block type="pseudo"><expr_stmt><expr><name pos:line="610" pos:column="33">partial_dir<pos:position pos:line="610" pos:column="44"/></name> <operator pos:line="610" pos:column="45">=<pos:position pos:line="610" pos:column="46"/></operator> <name pos:line="610" pos:column="47">NULL<pos:position pos:line="610" pos:column="51"/></name></expr>;<pos:position pos:line="610" pos:column="52"/></expr_stmt></block></then>
			<elseif pos:line="611" pos:column="25">else <if pos:line="611" pos:column="30">if <condition pos:line="611" pos:column="33">(<expr><operator pos:line="611" pos:column="34">*<pos:position pos:line="611" pos:column="35"/></operator><name pos:line="611" pos:column="35">partial_dir<pos:position pos:line="611" pos:column="46"/></name> <operator pos:line="611" pos:column="47">!=<pos:position pos:line="611" pos:column="49"/></operator> <literal type="char" pos:line="611" pos:column="50">'/'<pos:position pos:line="611" pos:column="53"/></literal> <operator pos:line="611" pos:column="54">&amp;&amp;<pos:position pos:line="611" pos:column="64"/></operator> <operator pos:line="611" pos:column="57">!<pos:position pos:line="611" pos:column="58"/></operator><name pos:line="611" pos:column="58">am_server<pos:position pos:line="611" pos:column="67"/></name></expr>)<pos:position pos:line="611" pos:column="68"/></condition><then pos:line="611" pos:column="68"> <block pos:line="611" pos:column="69">{
				<expr_stmt><expr><call><name pos:line="612" pos:column="33">parse_rule<pos:position pos:line="612" pos:column="43"/></name><argument_list pos:line="612" pos:column="43">(<argument><expr><operator pos:line="612" pos:column="44">&amp;<pos:position pos:line="612" pos:column="49"/></operator><name pos:line="612" pos:column="45">filter_list<pos:position pos:line="612" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="612" pos:column="58">partial_dir<pos:position pos:line="612" pos:column="69"/></name></expr></argument>,
				    <argument><expr><name pos:line="613" pos:column="37">MATCHFLG_NO_PREFIXES<pos:position pos:line="613" pos:column="57"/></name><operator pos:line="613" pos:column="57">|<pos:position pos:line="613" pos:column="58"/></operator><name pos:line="613" pos:column="58">MATCHFLG_DIRECTORY<pos:position pos:line="613" pos:column="76"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="613" pos:column="78">0<pos:position pos:line="613" pos:column="79"/></literal></expr></argument>)<pos:position pos:line="613" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="613" pos:column="81"/></expr_stmt>
			}<pos:position pos:line="614" pos:column="26"/></block></then></if></elseif></if>
			<if pos:line="615" pos:column="25">if <condition pos:line="615" pos:column="28">(<expr><operator pos:line="615" pos:column="29">!<pos:position pos:line="615" pos:column="30"/></operator><name pos:line="615" pos:column="30">partial_dir<pos:position pos:line="615" pos:column="41"/></name> <operator pos:line="615" pos:column="42">&amp;&amp;<pos:position pos:line="615" pos:column="52"/></operator> <name pos:line="615" pos:column="45">refused_partial<pos:position pos:line="615" pos:column="60"/></name></expr>)<pos:position pos:line="615" pos:column="61"/></condition><then pos:line="615" pos:column="61"> <block pos:line="615" pos:column="62">{
				<expr_stmt><expr><call><name pos:line="616" pos:column="33">create_refuse_error<pos:position pos:line="616" pos:column="52"/></name><argument_list pos:line="616" pos:column="52">(<argument><expr><name pos:line="616" pos:column="53">refused_partial<pos:position pos:line="616" pos:column="68"/></name></expr></argument>)<pos:position pos:line="616" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="616" pos:column="70"/></expr_stmt>
				<return pos:line="617" pos:column="33">return <expr><literal type="number" pos:line="617" pos:column="40">0<pos:position pos:line="617" pos:column="41"/></literal></expr>;<pos:position pos:line="617" pos:column="42"/></return>
			}<pos:position pos:line="618" pos:column="26"/></block></then></if>
			<expr_stmt><expr><name pos:line="619" pos:column="25">keep_partial<pos:position pos:line="619" pos:column="37"/></name> <operator pos:line="619" pos:column="38">=<pos:position pos:line="619" pos:column="39"/></operator> <literal type="number" pos:line="619" pos:column="40">1<pos:position pos:line="619" pos:column="41"/></literal></expr>;<pos:position pos:line="619" pos:column="42"/></expr_stmt>
		}<pos:position pos:line="620" pos:column="18"/></block></then></if>
	}<pos:position pos:line="621" pos:column="10"/></block></else></if>

	<if pos:line="623" pos:column="9">if <condition pos:line="623" pos:column="12">(<expr><name pos:line="623" pos:column="13">files_from<pos:position pos:line="623" pos:column="23"/></name></expr>)<pos:position pos:line="623" pos:column="24"/></condition><then pos:line="623" pos:column="24"> <block pos:line="623" pos:column="25">{
		<decl_stmt><decl><type><name pos:line="624" pos:column="17">char<pos:position pos:line="624" pos:column="21"/></name> <modifier pos:line="624" pos:column="22">*<pos:position pos:line="624" pos:column="23"/></modifier></type><name pos:line="624" pos:column="23">h<pos:position pos:line="624" pos:column="24"/></name></decl>, <modifier pos:line="624" pos:column="26">*<pos:position pos:line="624" pos:column="27"/></modifier><decl><type ref="prev"/><name pos:line="624" pos:column="27">p<pos:position pos:line="624" pos:column="28"/></name></decl>;<pos:position pos:line="624" pos:column="29"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="625" pos:column="17">int<pos:position pos:line="625" pos:column="20"/></name></type> <name pos:line="625" pos:column="21">q<pos:position pos:line="625" pos:column="22"/></name></decl>;<pos:position pos:line="625" pos:column="23"/></decl_stmt>
		<if pos:line="626" pos:column="17">if <condition pos:line="626" pos:column="20">(<expr><operator pos:line="626" pos:column="21">*<pos:position pos:line="626" pos:column="22"/></operator><name pos:line="626" pos:column="22">argc<pos:position pos:line="626" pos:column="26"/></name> <operator pos:line="626" pos:column="27">&gt;<pos:position pos:line="626" pos:column="31"/></operator> <literal type="number" pos:line="626" pos:column="29">2<pos:position pos:line="626" pos:column="30"/></literal> <operator pos:line="626" pos:column="31">||<pos:position pos:line="626" pos:column="33"/></operator> <operator pos:line="626" pos:column="34">(<pos:position pos:line="626" pos:column="35"/></operator><operator pos:line="626" pos:column="35">!<pos:position pos:line="626" pos:column="36"/></operator><name pos:line="626" pos:column="36">am_daemon<pos:position pos:line="626" pos:column="45"/></name> <operator pos:line="626" pos:column="46">&amp;&amp;<pos:position pos:line="626" pos:column="56"/></operator> <operator pos:line="626" pos:column="49">*<pos:position pos:line="626" pos:column="50"/></operator><name pos:line="626" pos:column="50">argc<pos:position pos:line="626" pos:column="54"/></name> <operator pos:line="626" pos:column="55">==<pos:position pos:line="626" pos:column="57"/></operator> <literal type="number" pos:line="626" pos:column="58">1<pos:position pos:line="626" pos:column="59"/></literal><operator pos:line="626" pos:column="59">)<pos:position pos:line="626" pos:column="60"/></operator></expr>)<pos:position pos:line="626" pos:column="61"/></condition><then pos:line="626" pos:column="61"> <block pos:line="626" pos:column="62">{
			<expr_stmt><expr><call><name pos:line="627" pos:column="25">usage<pos:position pos:line="627" pos:column="30"/></name><argument_list pos:line="627" pos:column="30">(<argument><expr><name pos:line="627" pos:column="31">FERROR<pos:position pos:line="627" pos:column="37"/></name></expr></argument>)<pos:position pos:line="627" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="627" pos:column="39"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="628" pos:column="25">exit_cleanup<pos:position pos:line="628" pos:column="37"/></name><argument_list pos:line="628" pos:column="37">(<argument><expr><name pos:line="628" pos:column="38">RERR_SYNTAX<pos:position pos:line="628" pos:column="49"/></name></expr></argument>)<pos:position pos:line="628" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="628" pos:column="51"/></expr_stmt>
		}<pos:position pos:line="629" pos:column="18"/></block></then></if>
		<if pos:line="630" pos:column="17">if <condition pos:line="630" pos:column="20">(<expr><call><name pos:line="630" pos:column="21">strcmp<pos:position pos:line="630" pos:column="27"/></name><argument_list pos:line="630" pos:column="27">(<argument><expr><name pos:line="630" pos:column="28">files_from<pos:position pos:line="630" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="630" pos:column="40">"-"<pos:position pos:line="630" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="630" pos:column="44"/></argument_list></call> <operator pos:line="630" pos:column="45">==<pos:position pos:line="630" pos:column="47"/></operator> <literal type="number" pos:line="630" pos:column="48">0<pos:position pos:line="630" pos:column="49"/></literal></expr>)<pos:position pos:line="630" pos:column="50"/></condition><then pos:line="630" pos:column="50"> <block pos:line="630" pos:column="51">{
			<expr_stmt><expr><name pos:line="631" pos:column="25">filesfrom_fd<pos:position pos:line="631" pos:column="37"/></name> <operator pos:line="631" pos:column="38">=<pos:position pos:line="631" pos:column="39"/></operator> <literal type="number" pos:line="631" pos:column="40">0<pos:position pos:line="631" pos:column="41"/></literal></expr>;<pos:position pos:line="631" pos:column="42"/></expr_stmt>
			<if pos:line="632" pos:column="25">if <condition pos:line="632" pos:column="28">(<expr><name pos:line="632" pos:column="29">am_server<pos:position pos:line="632" pos:column="38"/></name></expr>)<pos:position pos:line="632" pos:column="39"/></condition><then pos:line="632" pos:column="39">
				<block type="pseudo"><expr_stmt><expr><name pos:line="633" pos:column="33">filesfrom_host<pos:position pos:line="633" pos:column="47"/></name> <operator pos:line="633" pos:column="48">=<pos:position pos:line="633" pos:column="49"/></operator> <literal type="string" pos:line="633" pos:column="50">""<pos:position pos:line="633" pos:column="52"/></literal></expr>;<pos:position pos:line="633" pos:column="53"/></expr_stmt></block></then></if> <comment type="block" pos:line="633" pos:column="54">/* reading from socket */</comment>
		}<pos:position pos:line="634" pos:column="18"/></block></then> <elseif pos:line="634" pos:column="19">else <if pos:line="634" pos:column="24">if <condition pos:line="634" pos:column="27">(<expr><operator pos:line="634" pos:column="28">(<pos:position pos:line="634" pos:column="29"/></operator><name pos:line="634" pos:column="29">p<pos:position pos:line="634" pos:column="30"/></name> <operator pos:line="634" pos:column="31">=<pos:position pos:line="634" pos:column="32"/></operator> <call><name pos:line="634" pos:column="33">check_for_hostspec<pos:position pos:line="634" pos:column="51"/></name><argument_list pos:line="634" pos:column="51">(<argument><expr><name pos:line="634" pos:column="52">files_from<pos:position pos:line="634" pos:column="62"/></name></expr></argument>, <argument><expr><operator pos:line="634" pos:column="64">&amp;<pos:position pos:line="634" pos:column="69"/></operator><name pos:line="634" pos:column="65">h<pos:position pos:line="634" pos:column="66"/></name></expr></argument>, <argument><expr><operator pos:line="634" pos:column="68">&amp;<pos:position pos:line="634" pos:column="73"/></operator><name pos:line="634" pos:column="69">q<pos:position pos:line="634" pos:column="70"/></name></expr></argument>)<pos:position pos:line="634" pos:column="71"/></argument_list></call><operator pos:line="634" pos:column="71">)<pos:position pos:line="634" pos:column="72"/></operator> <operator pos:line="634" pos:column="73">!=<pos:position pos:line="634" pos:column="75"/></operator> <literal type="number" pos:line="634" pos:column="76">0<pos:position pos:line="634" pos:column="77"/></literal></expr>)<pos:position pos:line="634" pos:column="78"/></condition><then pos:line="634" pos:column="78"> <block pos:line="634" pos:column="79">{
			<if pos:line="635" pos:column="25">if <condition pos:line="635" pos:column="28">(<expr><name pos:line="635" pos:column="29">am_server<pos:position pos:line="635" pos:column="38"/></name></expr>)<pos:position pos:line="635" pos:column="39"/></condition><then pos:line="635" pos:column="39"> <block pos:line="635" pos:column="40">{
				<expr_stmt><expr><call><name pos:line="636" pos:column="33">snprintf<pos:position pos:line="636" pos:column="41"/></name><argument_list pos:line="636" pos:column="41">(<argument><expr><name pos:line="636" pos:column="42">err_buf<pos:position pos:line="636" pos:column="49"/></name></expr></argument>, <argument><expr><sizeof pos:line="636" pos:column="51">sizeof <name pos:line="636" pos:column="58">err_buf<pos:position pos:line="636" pos:column="65"/></name></sizeof></expr></argument>,
					<argument><expr><literal type="string" pos:line="637" pos:column="41">"The --files-from sent to the server cannot specify a host.\n"<pos:position pos:line="637" pos:column="103"/></literal></expr></argument>)<pos:position pos:line="637" pos:column="104"/></argument_list></call></expr>;<pos:position pos:line="637" pos:column="105"/></expr_stmt>
				<return pos:line="638" pos:column="33">return <expr><literal type="number" pos:line="638" pos:column="40">0<pos:position pos:line="638" pos:column="41"/></literal></expr>;<pos:position pos:line="638" pos:column="42"/></return>
			}<pos:position pos:line="639" pos:column="26"/></block></then></if>
			<expr_stmt><expr><name pos:line="640" pos:column="25">files_from<pos:position pos:line="640" pos:column="35"/></name> <operator pos:line="640" pos:column="36">=<pos:position pos:line="640" pos:column="37"/></operator> <name pos:line="640" pos:column="38">p<pos:position pos:line="640" pos:column="39"/></name></expr>;<pos:position pos:line="640" pos:column="40"/></expr_stmt>
			<expr_stmt><expr><name pos:line="641" pos:column="25">filesfrom_host<pos:position pos:line="641" pos:column="39"/></name> <operator pos:line="641" pos:column="40">=<pos:position pos:line="641" pos:column="41"/></operator> <name pos:line="641" pos:column="42">h<pos:position pos:line="641" pos:column="43"/></name></expr>;<pos:position pos:line="641" pos:column="44"/></expr_stmt>
			<if pos:line="642" pos:column="25">if <condition pos:line="642" pos:column="28">(<expr><call><name pos:line="642" pos:column="29">strcmp<pos:position pos:line="642" pos:column="35"/></name><argument_list pos:line="642" pos:column="35">(<argument><expr><name pos:line="642" pos:column="36">files_from<pos:position pos:line="642" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="642" pos:column="48">"-"<pos:position pos:line="642" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="642" pos:column="52"/></argument_list></call> <operator pos:line="642" pos:column="53">==<pos:position pos:line="642" pos:column="55"/></operator> <literal type="number" pos:line="642" pos:column="56">0<pos:position pos:line="642" pos:column="57"/></literal></expr>)<pos:position pos:line="642" pos:column="58"/></condition><then pos:line="642" pos:column="58"> <block pos:line="642" pos:column="59">{
				<expr_stmt><expr><call><name pos:line="643" pos:column="33">snprintf<pos:position pos:line="643" pos:column="41"/></name><argument_list pos:line="643" pos:column="41">(<argument><expr><name pos:line="643" pos:column="42">err_buf<pos:position pos:line="643" pos:column="49"/></name></expr></argument>, <argument><expr><sizeof pos:line="643" pos:column="51">sizeof <name pos:line="643" pos:column="58">err_buf<pos:position pos:line="643" pos:column="65"/></name></sizeof></expr></argument>,
					<argument><expr><literal type="string" pos:line="644" pos:column="41">"Invalid --files-from remote filename\n"<pos:position pos:line="644" pos:column="81"/></literal></expr></argument>)<pos:position pos:line="644" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="644" pos:column="83"/></expr_stmt>
				<return pos:line="645" pos:column="33">return <expr><literal type="number" pos:line="645" pos:column="40">0<pos:position pos:line="645" pos:column="41"/></literal></expr>;<pos:position pos:line="645" pos:column="42"/></return>
			}<pos:position pos:line="646" pos:column="26"/></block></then></if>
		}<pos:position pos:line="647" pos:column="18"/></block></then></if></elseif> <else pos:line="647" pos:column="19">else <block pos:line="647" pos:column="24">{
			<if pos:line="648" pos:column="25">if <condition pos:line="648" pos:column="28">(<expr><name pos:line="648" pos:column="29">sanitize_paths<pos:position pos:line="648" pos:column="43"/></name></expr>)<pos:position pos:line="648" pos:column="44"/></condition><then pos:line="648" pos:column="44">
				<block type="pseudo"><expr_stmt><expr><name pos:line="649" pos:column="33">files_from<pos:position pos:line="649" pos:column="43"/></name> <operator pos:line="649" pos:column="44">=<pos:position pos:line="649" pos:column="45"/></operator> <call><name pos:line="649" pos:column="46">sanitize_path<pos:position pos:line="649" pos:column="59"/></name><argument_list pos:line="649" pos:column="59">(<argument><expr><name pos:line="649" pos:column="60">NULL<pos:position pos:line="649" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="649" pos:column="66">files_from<pos:position pos:line="649" pos:column="76"/></name></expr></argument>, <argument><expr><name pos:line="649" pos:column="78">NULL<pos:position pos:line="649" pos:column="82"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="649" pos:column="84">0<pos:position pos:line="649" pos:column="85"/></literal></expr></argument>, <argument><expr><name pos:line="649" pos:column="87">NULL<pos:position pos:line="649" pos:column="91"/></name></expr></argument>)<pos:position pos:line="649" pos:column="92"/></argument_list></call></expr>;<pos:position pos:line="649" pos:column="93"/></expr_stmt></block></then></if>
			<if pos:line="650" pos:column="25">if <condition pos:line="650" pos:column="28">(<expr><name><name pos:line="650" pos:column="29">server_filter_list<pos:position pos:line="650" pos:column="47"/></name><operator pos:line="650" pos:column="47">.<pos:position pos:line="650" pos:column="48"/></operator><name pos:line="650" pos:column="48">head<pos:position pos:line="650" pos:column="52"/></name></name></expr>)<pos:position pos:line="650" pos:column="53"/></condition><then pos:line="650" pos:column="53"> <block pos:line="650" pos:column="54">{
				<if pos:line="651" pos:column="33">if <condition pos:line="651" pos:column="36">(<expr><operator pos:line="651" pos:column="37">!<pos:position pos:line="651" pos:column="38"/></operator><operator pos:line="651" pos:column="38">*<pos:position pos:line="651" pos:column="39"/></operator><name pos:line="651" pos:column="39">files_from<pos:position pos:line="651" pos:column="49"/></name></expr>)<pos:position pos:line="651" pos:column="50"/></condition><then pos:line="651" pos:column="50">
					<block type="pseudo"><goto pos:line="652" pos:column="41">goto <name pos:line="652" pos:column="46">options_rejected<pos:position pos:line="652" pos:column="62"/></name>;<pos:position pos:line="652" pos:column="63"/></goto></block></then></if>
				<expr_stmt><expr><call><name pos:line="653" pos:column="33">clean_fname<pos:position pos:line="653" pos:column="44"/></name><argument_list pos:line="653" pos:column="44">(<argument><expr><name pos:line="653" pos:column="45">files_from<pos:position pos:line="653" pos:column="55"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="653" pos:column="57">1<pos:position pos:line="653" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="653" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="653" pos:column="60"/></expr_stmt>
				<if pos:line="654" pos:column="33">if <condition pos:line="654" pos:column="36">(<expr><call><name pos:line="654" pos:column="37">check_filter<pos:position pos:line="654" pos:column="49"/></name><argument_list pos:line="654" pos:column="49">(<argument><expr><operator pos:line="654" pos:column="50">&amp;<pos:position pos:line="654" pos:column="55"/></operator><name pos:line="654" pos:column="51">server_filter_list<pos:position pos:line="654" pos:column="69"/></name></expr></argument>, <argument><expr><name pos:line="654" pos:column="71">files_from<pos:position pos:line="654" pos:column="81"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="654" pos:column="83">0<pos:position pos:line="654" pos:column="84"/></literal></expr></argument>)<pos:position pos:line="654" pos:column="85"/></argument_list></call> <operator pos:line="654" pos:column="86">&lt;<pos:position pos:line="654" pos:column="90"/></operator> <literal type="number" pos:line="654" pos:column="88">0<pos:position pos:line="654" pos:column="89"/></literal></expr>)<pos:position pos:line="654" pos:column="90"/></condition><then pos:line="654" pos:column="90">
					<block type="pseudo"><goto pos:line="655" pos:column="41">goto <name pos:line="655" pos:column="46">options_rejected<pos:position pos:line="655" pos:column="62"/></name>;<pos:position pos:line="655" pos:column="63"/></goto></block></then></if>
			}<pos:position pos:line="656" pos:column="26"/></block></then></if>
			<expr_stmt><expr><name pos:line="657" pos:column="25">filesfrom_fd<pos:position pos:line="657" pos:column="37"/></name> <operator pos:line="657" pos:column="38">=<pos:position pos:line="657" pos:column="39"/></operator> <call><name pos:line="657" pos:column="40">open<pos:position pos:line="657" pos:column="44"/></name><argument_list pos:line="657" pos:column="44">(<argument><expr><name pos:line="657" pos:column="45">files_from<pos:position pos:line="657" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="657" pos:column="57">O_RDONLY<pos:position pos:line="657" pos:column="65"/></name><operator pos:line="657" pos:column="65">|<pos:position pos:line="657" pos:column="66"/></operator><name pos:line="657" pos:column="66">O_BINARY<pos:position pos:line="657" pos:column="74"/></name></expr></argument>)<pos:position pos:line="657" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="657" pos:column="76"/></expr_stmt>
			<if pos:line="658" pos:column="25">if <condition pos:line="658" pos:column="28">(<expr><name pos:line="658" pos:column="29">filesfrom_fd<pos:position pos:line="658" pos:column="41"/></name> <operator pos:line="658" pos:column="42">&lt;<pos:position pos:line="658" pos:column="46"/></operator> <literal type="number" pos:line="658" pos:column="44">0<pos:position pos:line="658" pos:column="45"/></literal></expr>)<pos:position pos:line="658" pos:column="46"/></condition><then pos:line="658" pos:column="46"> <block pos:line="658" pos:column="47">{
				<expr_stmt><expr><call><name pos:line="659" pos:column="33">snprintf<pos:position pos:line="659" pos:column="41"/></name><argument_list pos:line="659" pos:column="41">(<argument><expr><name pos:line="659" pos:column="42">err_buf<pos:position pos:line="659" pos:column="49"/></name></expr></argument>, <argument><expr><sizeof pos:line="659" pos:column="51">sizeof <name pos:line="659" pos:column="58">err_buf<pos:position pos:line="659" pos:column="65"/></name></sizeof></expr></argument>,
					<argument><expr><literal type="string" pos:line="660" pos:column="41">"failed to open files-from file %s: %s\n"<pos:position pos:line="660" pos:column="82"/></literal></expr></argument>,
					<argument><expr><name pos:line="661" pos:column="41">files_from<pos:position pos:line="661" pos:column="51"/></name></expr></argument>, <argument><expr><call><name pos:line="661" pos:column="53">strerror<pos:position pos:line="661" pos:column="61"/></name><argument_list pos:line="661" pos:column="61">(<argument><expr><name pos:line="661" pos:column="62">errno<pos:position pos:line="661" pos:column="67"/></name></expr></argument>)<pos:position pos:line="661" pos:column="68"/></argument_list></call></expr></argument>)<pos:position pos:line="661" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="661" pos:column="70"/></expr_stmt>
				<return pos:line="662" pos:column="33">return <expr><literal type="number" pos:line="662" pos:column="40">0<pos:position pos:line="662" pos:column="41"/></literal></expr>;<pos:position pos:line="662" pos:column="42"/></return>
			}<pos:position pos:line="663" pos:column="26"/></block></then></if>
		}<pos:position pos:line="664" pos:column="18"/></block></else></if>
	}<pos:position pos:line="665" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="667" pos:column="9">am_starting_up<pos:position pos:line="667" pos:column="23"/></name> <operator pos:line="667" pos:column="24">=<pos:position pos:line="667" pos:column="25"/></operator> <literal type="number" pos:line="667" pos:column="26">0<pos:position pos:line="667" pos:column="27"/></literal></expr>;<pos:position pos:line="667" pos:column="28"/></expr_stmt>

	<return pos:line="669" pos:column="9">return <expr><literal type="number" pos:line="669" pos:column="16">1<pos:position pos:line="669" pos:column="17"/></literal></expr>;<pos:position pos:line="669" pos:column="18"/></return>
}<pos:position pos:line="670" pos:column="2"/></block></function></unit>
