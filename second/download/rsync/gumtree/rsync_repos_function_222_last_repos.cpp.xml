<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_222_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">write_batch_shell_file<pos:position pos:line="1" pos:column="28"/></name><parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><name pos:line="1" pos:column="29">int<pos:position pos:line="1" pos:column="32"/></name></type> <name pos:line="1" pos:column="33">argc<pos:position pos:line="1" pos:column="37"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="39">char<pos:position pos:line="1" pos:column="43"/></name> <modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier></type><name><name pos:line="1" pos:column="45">argv<pos:position pos:line="1" pos:column="49"/></name><index pos:line="1" pos:column="49">[]<pos:position pos:line="1" pos:column="51"/></index></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="53">int<pos:position pos:line="1" pos:column="56"/></name></type> <name pos:line="1" pos:column="57">file_arg_cnt<pos:position pos:line="1" pos:column="69"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="70"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">fd<pos:position pos:line="3" pos:column="15"/></name></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="17">i<pos:position pos:line="3" pos:column="18"/></name></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="20">len<pos:position pos:line="3" pos:column="23"/></name></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="25">err<pos:position pos:line="3" pos:column="28"/></name> <init pos:line="3" pos:column="29">= <expr><literal type="number" pos:line="3" pos:column="31">0<pos:position pos:line="3" pos:column="32"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="33"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier></type><name pos:line="4" pos:column="15">p<pos:position pos:line="4" pos:column="16"/></name></decl>, <decl><type ref="prev"/><name><name pos:line="4" pos:column="18">filename<pos:position pos:line="4" pos:column="26"/></name><index pos:line="4" pos:column="26">[<expr><name pos:line="4" pos:column="27">MAXPATHLEN<pos:position pos:line="4" pos:column="37"/></name></expr>]<pos:position pos:line="4" pos:column="38"/></index></name></decl>;<pos:position pos:line="4" pos:column="39"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="6" pos:column="9">stringjoin<pos:position pos:line="6" pos:column="19"/></name><argument_list pos:line="6" pos:column="19">(<argument><expr><name pos:line="6" pos:column="20">filename<pos:position pos:line="6" pos:column="28"/></name></expr></argument>, <argument><expr><sizeof pos:line="6" pos:column="30">sizeof <name pos:line="6" pos:column="37">filename<pos:position pos:line="6" pos:column="45"/></name></sizeof></expr></argument>,
		   <argument><expr><name pos:line="7" pos:column="20">batch_name<pos:position pos:line="7" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="7" pos:column="32">".sh"<pos:position pos:line="7" pos:column="37"/></literal></expr></argument>, <argument><expr><name pos:line="7" pos:column="39">NULL<pos:position pos:line="7" pos:column="43"/></name></expr></argument>)<pos:position pos:line="7" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="45"/></expr_stmt>
	<expr_stmt><expr><name pos:line="8" pos:column="9">fd<pos:position pos:line="8" pos:column="11"/></name> <operator pos:line="8" pos:column="12">=<pos:position pos:line="8" pos:column="13"/></operator> <call><name pos:line="8" pos:column="14">do_open<pos:position pos:line="8" pos:column="21"/></name><argument_list pos:line="8" pos:column="21">(<argument><expr><name pos:line="8" pos:column="22">filename<pos:position pos:line="8" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="32">O_WRONLY<pos:position pos:line="8" pos:column="40"/></name> <operator pos:line="8" pos:column="41">|<pos:position pos:line="8" pos:column="42"/></operator> <name pos:line="8" pos:column="43">O_CREAT<pos:position pos:line="8" pos:column="50"/></name> <operator pos:line="8" pos:column="51">|<pos:position pos:line="8" pos:column="52"/></operator> <name pos:line="8" pos:column="53">O_TRUNC<pos:position pos:line="8" pos:column="60"/></name></expr></argument>,
		     <argument><expr><name pos:line="9" pos:column="22">S_IRUSR<pos:position pos:line="9" pos:column="29"/></name> <operator pos:line="9" pos:column="30">|<pos:position pos:line="9" pos:column="31"/></operator> <name pos:line="9" pos:column="32">S_IWUSR<pos:position pos:line="9" pos:column="39"/></name> <operator pos:line="9" pos:column="40">|<pos:position pos:line="9" pos:column="41"/></operator> <name pos:line="9" pos:column="42">S_IXUSR<pos:position pos:line="9" pos:column="49"/></name></expr></argument>)<pos:position pos:line="9" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="51"/></expr_stmt>
	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><name pos:line="10" pos:column="13">fd<pos:position pos:line="10" pos:column="15"/></name> <operator pos:line="10" pos:column="16">&lt;<pos:position pos:line="10" pos:column="20"/></operator> <literal type="number" pos:line="10" pos:column="18">0<pos:position pos:line="10" pos:column="19"/></literal></expr>)<pos:position pos:line="10" pos:column="20"/></condition><then pos:line="10" pos:column="20"> <block pos:line="10" pos:column="21">{
		<expr_stmt><expr><call><name pos:line="11" pos:column="17">rsyserr<pos:position pos:line="11" pos:column="24"/></name><argument_list pos:line="11" pos:column="24">(<argument><expr><name pos:line="11" pos:column="25">FERROR<pos:position pos:line="11" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="33">errno<pos:position pos:line="11" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="40">"Batch file %s open error"<pos:position pos:line="11" pos:column="66"/></literal></expr></argument>,
			<argument><expr><name pos:line="12" pos:column="25">filename<pos:position pos:line="12" pos:column="33"/></name></expr></argument>)<pos:position pos:line="12" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="35"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="13" pos:column="17">exit_cleanup<pos:position pos:line="13" pos:column="29"/></name><argument_list pos:line="13" pos:column="29">(<argument><expr><name pos:line="13" pos:column="30">RERR_FILESELECT<pos:position pos:line="13" pos:column="45"/></name></expr></argument>)<pos:position pos:line="13" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="47"/></expr_stmt>
	}<pos:position pos:line="14" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="16" pos:column="9">/* Write argvs info to BATCH.sh file */</comment>
	<if pos:line="17" pos:column="9">if <condition pos:line="17" pos:column="12">(<expr><call><name pos:line="17" pos:column="13">write_arg<pos:position pos:line="17" pos:column="22"/></name><argument_list pos:line="17" pos:column="22">(<argument><expr><name pos:line="17" pos:column="23">fd<pos:position pos:line="17" pos:column="25"/></name></expr></argument>, <argument><expr><name><name pos:line="17" pos:column="27">argv<pos:position pos:line="17" pos:column="31"/></name><index pos:line="17" pos:column="31">[<expr><literal type="number" pos:line="17" pos:column="32">0<pos:position pos:line="17" pos:column="33"/></literal></expr>]<pos:position pos:line="17" pos:column="34"/></index></name></expr></argument>)<pos:position pos:line="17" pos:column="35"/></argument_list></call> <operator pos:line="17" pos:column="36">&lt;<pos:position pos:line="17" pos:column="40"/></operator> <literal type="number" pos:line="17" pos:column="38">0<pos:position pos:line="17" pos:column="39"/></literal></expr>)<pos:position pos:line="17" pos:column="40"/></condition><then pos:line="17" pos:column="40">
		<block type="pseudo"><expr_stmt><expr><name pos:line="18" pos:column="17">err<pos:position pos:line="18" pos:column="20"/></name> <operator pos:line="18" pos:column="21">=<pos:position pos:line="18" pos:column="22"/></operator> <literal type="number" pos:line="18" pos:column="23">1<pos:position pos:line="18" pos:column="24"/></literal></expr>;<pos:position pos:line="18" pos:column="25"/></expr_stmt></block></then></if>
	<if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><name><name pos:line="19" pos:column="13">filter_list<pos:position pos:line="19" pos:column="24"/></name><operator pos:line="19" pos:column="24">.<pos:position pos:line="19" pos:column="25"/></operator><name pos:line="19" pos:column="25">head<pos:position pos:line="19" pos:column="29"/></name></name></expr>)<pos:position pos:line="19" pos:column="30"/></condition><then pos:line="19" pos:column="30"> <block pos:line="19" pos:column="31">{
		<if pos:line="20" pos:column="17">if <condition pos:line="20" pos:column="20">(<expr><name pos:line="20" pos:column="21">protocol_version<pos:position pos:line="20" pos:column="37"/></name> <operator pos:line="20" pos:column="38">&gt;=<pos:position pos:line="20" pos:column="43"/></operator> <literal type="number" pos:line="20" pos:column="41">29<pos:position pos:line="20" pos:column="43"/></literal></expr>)<pos:position pos:line="20" pos:column="44"/></condition><then pos:line="20" pos:column="44">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="21" pos:column="25">write_sbuf<pos:position pos:line="21" pos:column="35"/></name><argument_list pos:line="21" pos:column="35">(<argument><expr><name pos:line="21" pos:column="36">fd<pos:position pos:line="21" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="21" pos:column="40">" --filter=._-"<pos:position pos:line="21" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="57"/></expr_stmt></block></then>
		<else pos:line="22" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="23" pos:column="25">write_sbuf<pos:position pos:line="23" pos:column="35"/></name><argument_list pos:line="23" pos:column="35">(<argument><expr><name pos:line="23" pos:column="36">fd<pos:position pos:line="23" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="23" pos:column="40">" --exclude-from=-"<pos:position pos:line="23" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="61"/></expr_stmt></block></else></if>
	}<pos:position pos:line="24" pos:column="10"/></block></then></if>
	<for pos:line="25" pos:column="9">for <control pos:line="25" pos:column="13">(<init><expr><name pos:line="25" pos:column="14">i<pos:position pos:line="25" pos:column="15"/></name> <operator pos:line="25" pos:column="16">=<pos:position pos:line="25" pos:column="17"/></operator> <literal type="number" pos:line="25" pos:column="18">1<pos:position pos:line="25" pos:column="19"/></literal></expr>;<pos:position pos:line="25" pos:column="20"/></init> <condition><expr><name pos:line="25" pos:column="21">i<pos:position pos:line="25" pos:column="22"/></name> <operator pos:line="25" pos:column="23">&lt;<pos:position pos:line="25" pos:column="27"/></operator> <name pos:line="25" pos:column="25">argc<pos:position pos:line="25" pos:column="29"/></name> <operator pos:line="25" pos:column="30">-<pos:position pos:line="25" pos:column="31"/></operator> <name pos:line="25" pos:column="32">file_arg_cnt<pos:position pos:line="25" pos:column="44"/></name></expr>;<pos:position pos:line="25" pos:column="45"/></condition> <incr><expr><name pos:line="25" pos:column="46">i<pos:position pos:line="25" pos:column="47"/></name><operator pos:line="25" pos:column="47">++<pos:position pos:line="25" pos:column="49"/></operator></expr></incr>)<pos:position pos:line="25" pos:column="50"/></control> <block pos:line="25" pos:column="51">{
		<expr_stmt><expr><name pos:line="26" pos:column="17">p<pos:position pos:line="26" pos:column="18"/></name> <operator pos:line="26" pos:column="19">=<pos:position pos:line="26" pos:column="20"/></operator> <name><name pos:line="26" pos:column="21">argv<pos:position pos:line="26" pos:column="25"/></name><index pos:line="26" pos:column="25">[<expr><name pos:line="26" pos:column="26">i<pos:position pos:line="26" pos:column="27"/></name></expr>]<pos:position pos:line="26" pos:column="28"/></index></name></expr>;<pos:position pos:line="26" pos:column="29"/></expr_stmt>
		<if pos:line="27" pos:column="17">if <condition pos:line="27" pos:column="20">(<expr><call><name pos:line="27" pos:column="21">strncmp<pos:position pos:line="27" pos:column="28"/></name><argument_list pos:line="27" pos:column="28">(<argument><expr><name pos:line="27" pos:column="29">p<pos:position pos:line="27" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="27" pos:column="32">"--files-from"<pos:position pos:line="27" pos:column="46"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="27" pos:column="48">12<pos:position pos:line="27" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="51"/></argument_list></call> <operator pos:line="27" pos:column="52">==<pos:position pos:line="27" pos:column="54"/></operator> <literal type="number" pos:line="27" pos:column="55">0<pos:position pos:line="27" pos:column="56"/></literal>
		    <operator pos:line="28" pos:column="21">||<pos:position pos:line="28" pos:column="23"/></operator> <call><name pos:line="28" pos:column="24">strncmp<pos:position pos:line="28" pos:column="31"/></name><argument_list pos:line="28" pos:column="31">(<argument><expr><name pos:line="28" pos:column="32">p<pos:position pos:line="28" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="28" pos:column="35">"--filter"<pos:position pos:line="28" pos:column="45"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="28" pos:column="47">8<pos:position pos:line="28" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="49"/></argument_list></call> <operator pos:line="28" pos:column="50">==<pos:position pos:line="28" pos:column="52"/></operator> <literal type="number" pos:line="28" pos:column="53">0<pos:position pos:line="28" pos:column="54"/></literal>
		    <operator pos:line="29" pos:column="21">||<pos:position pos:line="29" pos:column="23"/></operator> <call><name pos:line="29" pos:column="24">strncmp<pos:position pos:line="29" pos:column="31"/></name><argument_list pos:line="29" pos:column="31">(<argument><expr><name pos:line="29" pos:column="32">p<pos:position pos:line="29" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="29" pos:column="35">"--include"<pos:position pos:line="29" pos:column="46"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="29" pos:column="48">9<pos:position pos:line="29" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="50"/></argument_list></call> <operator pos:line="29" pos:column="51">==<pos:position pos:line="29" pos:column="53"/></operator> <literal type="number" pos:line="29" pos:column="54">0<pos:position pos:line="29" pos:column="55"/></literal>
		    <operator pos:line="30" pos:column="21">||<pos:position pos:line="30" pos:column="23"/></operator> <call><name pos:line="30" pos:column="24">strncmp<pos:position pos:line="30" pos:column="31"/></name><argument_list pos:line="30" pos:column="31">(<argument><expr><name pos:line="30" pos:column="32">p<pos:position pos:line="30" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="30" pos:column="35">"--exclude"<pos:position pos:line="30" pos:column="46"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="30" pos:column="48">9<pos:position pos:line="30" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="50"/></argument_list></call> <operator pos:line="30" pos:column="51">==<pos:position pos:line="30" pos:column="53"/></operator> <literal type="number" pos:line="30" pos:column="54">0<pos:position pos:line="30" pos:column="55"/></literal></expr>)<pos:position pos:line="30" pos:column="56"/></condition><then pos:line="30" pos:column="56"> <block pos:line="30" pos:column="57">{
			<if pos:line="31" pos:column="25">if <condition pos:line="31" pos:column="28">(<expr><call><name pos:line="31" pos:column="29">strchr<pos:position pos:line="31" pos:column="35"/></name><argument_list pos:line="31" pos:column="35">(<argument><expr><name pos:line="31" pos:column="36">p<pos:position pos:line="31" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="31" pos:column="39">'='<pos:position pos:line="31" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="43"/></argument_list></call> <operator pos:line="31" pos:column="44">==<pos:position pos:line="31" pos:column="46"/></operator> <name pos:line="31" pos:column="47">NULL<pos:position pos:line="31" pos:column="51"/></name></expr>)<pos:position pos:line="31" pos:column="52"/></condition><then pos:line="31" pos:column="52">
				<block type="pseudo"><expr_stmt><expr><name pos:line="32" pos:column="33">i<pos:position pos:line="32" pos:column="34"/></name><operator pos:line="32" pos:column="34">++<pos:position pos:line="32" pos:column="36"/></operator></expr>;<pos:position pos:line="32" pos:column="37"/></expr_stmt></block></then></if>
			<continue pos:line="33" pos:column="25">continue;<pos:position pos:line="33" pos:column="34"/></continue>
		}<pos:position pos:line="34" pos:column="18"/></block></then></if>
		<if pos:line="35" pos:column="17">if <condition pos:line="35" pos:column="20">(<expr><call><name pos:line="35" pos:column="21">strcmp<pos:position pos:line="35" pos:column="27"/></name><argument_list pos:line="35" pos:column="27">(<argument><expr><name pos:line="35" pos:column="28">p<pos:position pos:line="35" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="35" pos:column="31">"-f"<pos:position pos:line="35" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="36"/></argument_list></call> <operator pos:line="35" pos:column="37">==<pos:position pos:line="35" pos:column="39"/></operator> <literal type="number" pos:line="35" pos:column="40">0<pos:position pos:line="35" pos:column="41"/></literal></expr>)<pos:position pos:line="35" pos:column="42"/></condition><then pos:line="35" pos:column="42"> <block pos:line="35" pos:column="43">{
			<expr_stmt><expr><name pos:line="36" pos:column="25">i<pos:position pos:line="36" pos:column="26"/></name><operator pos:line="36" pos:column="26">++<pos:position pos:line="36" pos:column="28"/></operator></expr>;<pos:position pos:line="36" pos:column="29"/></expr_stmt>
			<continue pos:line="37" pos:column="25">continue;<pos:position pos:line="37" pos:column="34"/></continue>
		}<pos:position pos:line="38" pos:column="18"/></block></then></if>
		<if pos:line="39" pos:column="17">if <condition pos:line="39" pos:column="20">(<expr><call><name pos:line="39" pos:column="21">write<pos:position pos:line="39" pos:column="26"/></name><argument_list pos:line="39" pos:column="26">(<argument><expr><name pos:line="39" pos:column="27">fd<pos:position pos:line="39" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="39" pos:column="31">" "<pos:position pos:line="39" pos:column="34"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="39" pos:column="36">1<pos:position pos:line="39" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="38"/></argument_list></call> <operator pos:line="39" pos:column="39">!=<pos:position pos:line="39" pos:column="41"/></operator> <literal type="number" pos:line="39" pos:column="42">1<pos:position pos:line="39" pos:column="43"/></literal></expr>)<pos:position pos:line="39" pos:column="44"/></condition><then pos:line="39" pos:column="44">
			<block type="pseudo"><expr_stmt><expr><name pos:line="40" pos:column="25">err<pos:position pos:line="40" pos:column="28"/></name> <operator pos:line="40" pos:column="29">=<pos:position pos:line="40" pos:column="30"/></operator> <literal type="number" pos:line="40" pos:column="31">1<pos:position pos:line="40" pos:column="32"/></literal></expr>;<pos:position pos:line="40" pos:column="33"/></expr_stmt></block></then></if>
		<if pos:line="41" pos:column="17">if <condition pos:line="41" pos:column="20">(<expr><call><name pos:line="41" pos:column="21">strncmp<pos:position pos:line="41" pos:column="28"/></name><argument_list pos:line="41" pos:column="28">(<argument><expr><name pos:line="41" pos:column="29">p<pos:position pos:line="41" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="41" pos:column="32">"--write-batch"<pos:position pos:line="41" pos:column="47"/></literal></expr></argument>, <argument><expr><name pos:line="41" pos:column="49">len<pos:position pos:line="41" pos:column="52"/></name> <operator pos:line="41" pos:column="53">=<pos:position pos:line="41" pos:column="54"/></operator> <literal type="number" pos:line="41" pos:column="55">13<pos:position pos:line="41" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="58"/></argument_list></call> <operator pos:line="41" pos:column="59">==<pos:position pos:line="41" pos:column="61"/></operator> <literal type="number" pos:line="41" pos:column="62">0<pos:position pos:line="41" pos:column="63"/></literal>
		 <operator pos:line="42" pos:column="18">||<pos:position pos:line="42" pos:column="20"/></operator> <call><name pos:line="42" pos:column="21">strncmp<pos:position pos:line="42" pos:column="28"/></name><argument_list pos:line="42" pos:column="28">(<argument><expr><name pos:line="42" pos:column="29">p<pos:position pos:line="42" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="42" pos:column="32">"--only-write-batch"<pos:position pos:line="42" pos:column="52"/></literal></expr></argument>, <argument><expr><name pos:line="42" pos:column="54">len<pos:position pos:line="42" pos:column="57"/></name> <operator pos:line="42" pos:column="58">=<pos:position pos:line="42" pos:column="59"/></operator> <literal type="number" pos:line="42" pos:column="60">18<pos:position pos:line="42" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="42" pos:column="63"/></argument_list></call> <operator pos:line="42" pos:column="64">==<pos:position pos:line="42" pos:column="66"/></operator> <literal type="number" pos:line="42" pos:column="67">0<pos:position pos:line="42" pos:column="68"/></literal></expr>)<pos:position pos:line="42" pos:column="69"/></condition><then pos:line="42" pos:column="69"> <block pos:line="42" pos:column="70">{
			<if pos:line="43" pos:column="25">if <condition pos:line="43" pos:column="28">(<expr><call><name pos:line="43" pos:column="29">write<pos:position pos:line="43" pos:column="34"/></name><argument_list pos:line="43" pos:column="34">(<argument><expr><name pos:line="43" pos:column="35">fd<pos:position pos:line="43" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="43" pos:column="39">"--read-batch"<pos:position pos:line="43" pos:column="53"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="43" pos:column="55">12<pos:position pos:line="43" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="58"/></argument_list></call> <operator pos:line="43" pos:column="59">!=<pos:position pos:line="43" pos:column="61"/></operator> <literal type="number" pos:line="43" pos:column="62">12<pos:position pos:line="43" pos:column="64"/></literal></expr>)<pos:position pos:line="43" pos:column="65"/></condition><then pos:line="43" pos:column="65">
				<block type="pseudo"><expr_stmt><expr><name pos:line="44" pos:column="33">err<pos:position pos:line="44" pos:column="36"/></name> <operator pos:line="44" pos:column="37">=<pos:position pos:line="44" pos:column="38"/></operator> <literal type="number" pos:line="44" pos:column="39">1<pos:position pos:line="44" pos:column="40"/></literal></expr>;<pos:position pos:line="44" pos:column="41"/></expr_stmt></block></then></if>
			<if pos:line="45" pos:column="25">if <condition pos:line="45" pos:column="28">(<expr><name><name pos:line="45" pos:column="29">p<pos:position pos:line="45" pos:column="30"/></name><index pos:line="45" pos:column="30">[<expr><name pos:line="45" pos:column="31">len<pos:position pos:line="45" pos:column="34"/></name></expr>]<pos:position pos:line="45" pos:column="35"/></index></name> <operator pos:line="45" pos:column="36">==<pos:position pos:line="45" pos:column="38"/></operator> <literal type="char" pos:line="45" pos:column="39">'='<pos:position pos:line="45" pos:column="42"/></literal></expr>)<pos:position pos:line="45" pos:column="43"/></condition><then pos:line="45" pos:column="43"> <block pos:line="45" pos:column="44">{
				<if pos:line="46" pos:column="33">if <condition pos:line="46" pos:column="36">(<expr><call><name pos:line="46" pos:column="37">write<pos:position pos:line="46" pos:column="42"/></name><argument_list pos:line="46" pos:column="42">(<argument><expr><name pos:line="46" pos:column="43">fd<pos:position pos:line="46" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="46" pos:column="47">"="<pos:position pos:line="46" pos:column="50"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="46" pos:column="52">1<pos:position pos:line="46" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="54"/></argument_list></call> <operator pos:line="46" pos:column="55">!=<pos:position pos:line="46" pos:column="57"/></operator> <literal type="number" pos:line="46" pos:column="58">1<pos:position pos:line="46" pos:column="59"/></literal>
				 <operator pos:line="47" pos:column="34">||<pos:position pos:line="47" pos:column="36"/></operator> <call><name pos:line="47" pos:column="37">write_arg<pos:position pos:line="47" pos:column="46"/></name><argument_list pos:line="47" pos:column="46">(<argument><expr><name pos:line="47" pos:column="47">fd<pos:position pos:line="47" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="51">p<pos:position pos:line="47" pos:column="52"/></name> <operator pos:line="47" pos:column="53">+<pos:position pos:line="47" pos:column="54"/></operator> <name pos:line="47" pos:column="55">len<pos:position pos:line="47" pos:column="58"/></name> <operator pos:line="47" pos:column="59">+<pos:position pos:line="47" pos:column="60"/></operator> <literal type="number" pos:line="47" pos:column="61">1<pos:position pos:line="47" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="63"/></argument_list></call> <operator pos:line="47" pos:column="64">&lt;<pos:position pos:line="47" pos:column="68"/></operator> <literal type="number" pos:line="47" pos:column="66">0<pos:position pos:line="47" pos:column="67"/></literal></expr>)<pos:position pos:line="47" pos:column="68"/></condition><then pos:line="47" pos:column="68">
					<block type="pseudo"><expr_stmt><expr><name pos:line="48" pos:column="41">err<pos:position pos:line="48" pos:column="44"/></name> <operator pos:line="48" pos:column="45">=<pos:position pos:line="48" pos:column="46"/></operator> <literal type="number" pos:line="48" pos:column="47">1<pos:position pos:line="48" pos:column="48"/></literal></expr>;<pos:position pos:line="48" pos:column="49"/></expr_stmt></block></then></if>
			}<pos:position pos:line="49" pos:column="26"/></block></then></if>
		}<pos:position pos:line="50" pos:column="18"/></block></then> <else pos:line="50" pos:column="19">else <block pos:line="50" pos:column="24">{
			<if pos:line="51" pos:column="25">if <condition pos:line="51" pos:column="28">(<expr><call><name pos:line="51" pos:column="29">write_arg<pos:position pos:line="51" pos:column="38"/></name><argument_list pos:line="51" pos:column="38">(<argument><expr><name pos:line="51" pos:column="39">fd<pos:position pos:line="51" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="43">p<pos:position pos:line="51" pos:column="44"/></name></expr></argument>)<pos:position pos:line="51" pos:column="45"/></argument_list></call> <operator pos:line="51" pos:column="46">&lt;<pos:position pos:line="51" pos:column="50"/></operator> <literal type="number" pos:line="51" pos:column="48">0<pos:position pos:line="51" pos:column="49"/></literal></expr>)<pos:position pos:line="51" pos:column="50"/></condition><then pos:line="51" pos:column="50">
				<block type="pseudo"><expr_stmt><expr><name pos:line="52" pos:column="33">err<pos:position pos:line="52" pos:column="36"/></name> <operator pos:line="52" pos:column="37">=<pos:position pos:line="52" pos:column="38"/></operator> <literal type="number" pos:line="52" pos:column="39">1<pos:position pos:line="52" pos:column="40"/></literal></expr>;<pos:position pos:line="52" pos:column="41"/></expr_stmt></block></then></if>
		}<pos:position pos:line="53" pos:column="18"/></block></else></if>
	}<pos:position pos:line="54" pos:column="10"/></block></for>
	<if pos:line="55" pos:column="9">if <condition pos:line="55" pos:column="12">(<expr><operator pos:line="55" pos:column="13">!<pos:position pos:line="55" pos:column="14"/></operator><operator pos:line="55" pos:column="14">(<pos:position pos:line="55" pos:column="15"/></operator><name pos:line="55" pos:column="15">p<pos:position pos:line="55" pos:column="16"/></name> <operator pos:line="55" pos:column="17">=<pos:position pos:line="55" pos:column="18"/></operator> <call><name pos:line="55" pos:column="19">check_for_hostspec<pos:position pos:line="55" pos:column="37"/></name><argument_list pos:line="55" pos:column="37">(<argument><expr><name><name pos:line="55" pos:column="38">argv<pos:position pos:line="55" pos:column="42"/></name><index pos:line="55" pos:column="42">[<expr><name pos:line="55" pos:column="43">argc<pos:position pos:line="55" pos:column="47"/></name> <operator pos:line="55" pos:column="48">-<pos:position pos:line="55" pos:column="49"/></operator> <literal type="number" pos:line="55" pos:column="50">1<pos:position pos:line="55" pos:column="51"/></literal></expr>]<pos:position pos:line="55" pos:column="52"/></index></name></expr></argument>, <argument><expr><operator pos:line="55" pos:column="54">&amp;<pos:position pos:line="55" pos:column="59"/></operator><name pos:line="55" pos:column="55">p<pos:position pos:line="55" pos:column="56"/></name></expr></argument>, <argument><expr><operator pos:line="55" pos:column="58">&amp;<pos:position pos:line="55" pos:column="63"/></operator><name pos:line="55" pos:column="59">i<pos:position pos:line="55" pos:column="60"/></name></expr></argument>)<pos:position pos:line="55" pos:column="61"/></argument_list></call><operator pos:line="55" pos:column="61">)<pos:position pos:line="55" pos:column="62"/></operator></expr>)<pos:position pos:line="55" pos:column="63"/></condition><then pos:line="55" pos:column="63">
		<block type="pseudo"><expr_stmt><expr><name pos:line="56" pos:column="17">p<pos:position pos:line="56" pos:column="18"/></name> <operator pos:line="56" pos:column="19">=<pos:position pos:line="56" pos:column="20"/></operator> <name><name pos:line="56" pos:column="21">argv<pos:position pos:line="56" pos:column="25"/></name><index pos:line="56" pos:column="25">[<expr><name pos:line="56" pos:column="26">argc<pos:position pos:line="56" pos:column="30"/></name> <operator pos:line="56" pos:column="31">-<pos:position pos:line="56" pos:column="32"/></operator> <literal type="number" pos:line="56" pos:column="33">1<pos:position pos:line="56" pos:column="34"/></literal></expr>]<pos:position pos:line="56" pos:column="35"/></index></name></expr>;<pos:position pos:line="56" pos:column="36"/></expr_stmt></block></then></if>
	<if pos:line="57" pos:column="9">if <condition pos:line="57" pos:column="12">(<expr><call><name pos:line="57" pos:column="13">write<pos:position pos:line="57" pos:column="18"/></name><argument_list pos:line="57" pos:column="18">(<argument><expr><name pos:line="57" pos:column="19">fd<pos:position pos:line="57" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="57" pos:column="23">" ${1:-"<pos:position pos:line="57" pos:column="31"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="57" pos:column="33">6<pos:position pos:line="57" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="57" pos:column="35"/></argument_list></call> <operator pos:line="57" pos:column="36">!=<pos:position pos:line="57" pos:column="38"/></operator> <literal type="number" pos:line="57" pos:column="39">6<pos:position pos:line="57" pos:column="40"/></literal>
	 <operator pos:line="58" pos:column="10">||<pos:position pos:line="58" pos:column="12"/></operator> <call><name pos:line="58" pos:column="13">write_arg<pos:position pos:line="58" pos:column="22"/></name><argument_list pos:line="58" pos:column="22">(<argument><expr><name pos:line="58" pos:column="23">fd<pos:position pos:line="58" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="27">p<pos:position pos:line="58" pos:column="28"/></name></expr></argument>)<pos:position pos:line="58" pos:column="29"/></argument_list></call> <operator pos:line="58" pos:column="30">&lt;<pos:position pos:line="58" pos:column="34"/></operator> <literal type="number" pos:line="58" pos:column="32">0<pos:position pos:line="58" pos:column="33"/></literal></expr>)<pos:position pos:line="58" pos:column="34"/></condition><then pos:line="58" pos:column="34">
		<block type="pseudo"><expr_stmt><expr><name pos:line="59" pos:column="17">err<pos:position pos:line="59" pos:column="20"/></name> <operator pos:line="59" pos:column="21">=<pos:position pos:line="59" pos:column="22"/></operator> <literal type="number" pos:line="59" pos:column="23">1<pos:position pos:line="59" pos:column="24"/></literal></expr>;<pos:position pos:line="59" pos:column="25"/></expr_stmt></block></then></if>
	<expr_stmt><expr><call><name pos:line="60" pos:column="9">write_byte<pos:position pos:line="60" pos:column="19"/></name><argument_list pos:line="60" pos:column="19">(<argument><expr><name pos:line="60" pos:column="20">fd<pos:position pos:line="60" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="60" pos:column="24">'}'<pos:position pos:line="60" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="60" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="29"/></expr_stmt>
	<if pos:line="61" pos:column="9">if <condition pos:line="61" pos:column="12">(<expr><name><name pos:line="61" pos:column="13">filter_list<pos:position pos:line="61" pos:column="24"/></name><operator pos:line="61" pos:column="24">.<pos:position pos:line="61" pos:column="25"/></operator><name pos:line="61" pos:column="25">head<pos:position pos:line="61" pos:column="29"/></name></name></expr>)<pos:position pos:line="61" pos:column="30"/></condition><then pos:line="61" pos:column="30">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="62" pos:column="17">write_filter_rules<pos:position pos:line="62" pos:column="35"/></name><argument_list pos:line="62" pos:column="35">(<argument><expr><name pos:line="62" pos:column="36">fd<pos:position pos:line="62" pos:column="38"/></name></expr></argument>)<pos:position pos:line="62" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="40"/></expr_stmt></block></then></if>
	<if pos:line="63" pos:column="9">if <condition pos:line="63" pos:column="12">(<expr><call><name pos:line="63" pos:column="13">write<pos:position pos:line="63" pos:column="18"/></name><argument_list pos:line="63" pos:column="18">(<argument><expr><name pos:line="63" pos:column="19">fd<pos:position pos:line="63" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="63" pos:column="23">"\n"<pos:position pos:line="63" pos:column="27"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="63" pos:column="29">1<pos:position pos:line="63" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="63" pos:column="31"/></argument_list></call> <operator pos:line="63" pos:column="32">!=<pos:position pos:line="63" pos:column="34"/></operator> <literal type="number" pos:line="63" pos:column="35">1<pos:position pos:line="63" pos:column="36"/></literal> <operator pos:line="63" pos:column="37">||<pos:position pos:line="63" pos:column="39"/></operator> <call><name pos:line="63" pos:column="40">close<pos:position pos:line="63" pos:column="45"/></name><argument_list pos:line="63" pos:column="45">(<argument><expr><name pos:line="63" pos:column="46">fd<pos:position pos:line="63" pos:column="48"/></name></expr></argument>)<pos:position pos:line="63" pos:column="49"/></argument_list></call> <operator pos:line="63" pos:column="50">&lt;<pos:position pos:line="63" pos:column="54"/></operator> <literal type="number" pos:line="63" pos:column="52">0<pos:position pos:line="63" pos:column="53"/></literal> <operator pos:line="63" pos:column="54">||<pos:position pos:line="63" pos:column="56"/></operator> <name pos:line="63" pos:column="57">err<pos:position pos:line="63" pos:column="60"/></name></expr>)<pos:position pos:line="63" pos:column="61"/></condition><then pos:line="63" pos:column="61"> <block pos:line="63" pos:column="62">{
		<expr_stmt><expr><call><name pos:line="64" pos:column="17">rsyserr<pos:position pos:line="64" pos:column="24"/></name><argument_list pos:line="64" pos:column="24">(<argument><expr><name pos:line="64" pos:column="25">FERROR<pos:position pos:line="64" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="33">errno<pos:position pos:line="64" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="64" pos:column="40">"Batch file %s write error"<pos:position pos:line="64" pos:column="67"/></literal></expr></argument>,
			<argument><expr><name pos:line="65" pos:column="25">filename<pos:position pos:line="65" pos:column="33"/></name></expr></argument>)<pos:position pos:line="65" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="35"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="66" pos:column="17">exit_cleanup<pos:position pos:line="66" pos:column="29"/></name><argument_list pos:line="66" pos:column="29">(<argument><expr><name pos:line="66" pos:column="30">RERR_FILEIO<pos:position pos:line="66" pos:column="41"/></name></expr></argument>)<pos:position pos:line="66" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="43"/></expr_stmt>
	}<pos:position pos:line="67" pos:column="10"/></block></then></if>
}<pos:position pos:line="68" pos:column="2"/></block></function></unit>
