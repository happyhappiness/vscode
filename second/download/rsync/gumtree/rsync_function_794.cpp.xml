<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_function_794.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">local<pos:position pos:line="1" pos:column="6"/></name> <name pos:line="1" pos:column="7">void<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">make_crc_table<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">()<pos:position pos:line="1" pos:column="28"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">unsigned<pos:position pos:line="3" pos:column="13"/></name> <name pos:line="3" pos:column="14">long<pos:position pos:line="3" pos:column="18"/></name></type> <name pos:line="3" pos:column="19">c<pos:position pos:line="3" pos:column="20"/></name></decl>;<pos:position pos:line="3" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">int<pos:position pos:line="4" pos:column="8"/></name></type> <name pos:line="4" pos:column="9">n<pos:position pos:line="4" pos:column="10"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="12">k<pos:position pos:line="4" pos:column="13"/></name></decl>;<pos:position pos:line="4" pos:column="14"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">unsigned<pos:position pos:line="5" pos:column="13"/></name> <name pos:line="5" pos:column="14">long<pos:position pos:line="5" pos:column="18"/></name></type> <name pos:line="5" pos:column="19">poly<pos:position pos:line="5" pos:column="23"/></name></decl>;<pos:position pos:line="5" pos:column="24"/></decl_stmt>                 <comment type="block" pos:line="5" pos:column="41">/* polynomial exclusive-or pattern */</comment>
    <comment type="block" pos:line="6" pos:column="5">/* terms of polynomial defining this crc (except x^32): */</comment>
    <decl_stmt><decl><specifier pos:line="7" pos:column="5">static<pos:position pos:line="7" pos:column="11"/></specifier> <type><specifier pos:line="7" pos:column="12">volatile<pos:position pos:line="7" pos:column="20"/></specifier> <name pos:line="7" pos:column="21">int<pos:position pos:line="7" pos:column="24"/></name></type> <name pos:line="7" pos:column="25">first<pos:position pos:line="7" pos:column="30"/></name> <init pos:line="7" pos:column="31">= <expr><literal type="number" pos:line="7" pos:column="33">1<pos:position pos:line="7" pos:column="34"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="35"/></decl_stmt>      <comment type="block" pos:line="7" pos:column="41">/* flag to limit concurrent making */</comment>
    <decl_stmt><decl><specifier pos:line="8" pos:column="5">static<pos:position pos:line="8" pos:column="11"/></specifier> <type><specifier pos:line="8" pos:column="12">const<pos:position pos:line="8" pos:column="17"/></specifier> <name pos:line="8" pos:column="18">unsigned<pos:position pos:line="8" pos:column="26"/></name> <name pos:line="8" pos:column="27">char<pos:position pos:line="8" pos:column="31"/></name></type> <name><name pos:line="8" pos:column="32">p<pos:position pos:line="8" pos:column="33"/></name><index pos:line="8" pos:column="33">[]<pos:position pos:line="8" pos:column="35"/></index></name> <init pos:line="8" pos:column="36">= <expr><block pos:line="8" pos:column="38">{<expr><literal type="number" pos:line="8" pos:column="39">0<pos:position pos:line="8" pos:column="40"/></literal></expr>,<expr><literal type="number" pos:line="8" pos:column="41">1<pos:position pos:line="8" pos:column="42"/></literal></expr>,<expr><literal type="number" pos:line="8" pos:column="43">2<pos:position pos:line="8" pos:column="44"/></literal></expr>,<expr><literal type="number" pos:line="8" pos:column="45">4<pos:position pos:line="8" pos:column="46"/></literal></expr>,<expr><literal type="number" pos:line="8" pos:column="47">5<pos:position pos:line="8" pos:column="48"/></literal></expr>,<expr><literal type="number" pos:line="8" pos:column="49">7<pos:position pos:line="8" pos:column="50"/></literal></expr>,<expr><literal type="number" pos:line="8" pos:column="51">8<pos:position pos:line="8" pos:column="52"/></literal></expr>,<expr><literal type="number" pos:line="8" pos:column="53">10<pos:position pos:line="8" pos:column="55"/></literal></expr>,<expr><literal type="number" pos:line="8" pos:column="56">11<pos:position pos:line="8" pos:column="58"/></literal></expr>,<expr><literal type="number" pos:line="8" pos:column="59">12<pos:position pos:line="8" pos:column="61"/></literal></expr>,<expr><literal type="number" pos:line="8" pos:column="62">16<pos:position pos:line="8" pos:column="64"/></literal></expr>,<expr><literal type="number" pos:line="8" pos:column="65">22<pos:position pos:line="8" pos:column="67"/></literal></expr>,<expr><literal type="number" pos:line="8" pos:column="68">23<pos:position pos:line="8" pos:column="70"/></literal></expr>,<expr><literal type="number" pos:line="8" pos:column="71">26<pos:position pos:line="8" pos:column="73"/></literal></expr>}<pos:position pos:line="8" pos:column="74"/></block></expr></init></decl>;<pos:position pos:line="8" pos:column="75"/></decl_stmt>

    <comment type="block" pos:line="10" pos:column="5">/* See if another task is already doing this (not thread-safe, but better
       than nothing -- significantly reduces duration of vulnerability in
       case the advice about DYNAMIC_CRC_TABLE is ignored) */</comment>
    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><name pos:line="13" pos:column="9">first<pos:position pos:line="13" pos:column="14"/></name></expr>)<pos:position pos:line="13" pos:column="15"/></condition><then pos:line="13" pos:column="15"> <block pos:line="13" pos:column="16">{
        <expr_stmt><expr><name pos:line="14" pos:column="9">first<pos:position pos:line="14" pos:column="14"/></name> <operator pos:line="14" pos:column="15">=<pos:position pos:line="14" pos:column="16"/></operator> <literal type="number" pos:line="14" pos:column="17">0<pos:position pos:line="14" pos:column="18"/></literal></expr>;<pos:position pos:line="14" pos:column="19"/></expr_stmt>

        <comment type="block" pos:line="16" pos:column="9">/* make exclusive-or pattern from polynomial (0xedb88320UL) */</comment>
        <expr_stmt><expr><name pos:line="17" pos:column="9">poly<pos:position pos:line="17" pos:column="13"/></name> <operator pos:line="17" pos:column="14">=<pos:position pos:line="17" pos:column="15"/></operator> <literal type="number" pos:line="17" pos:column="16">0UL<pos:position pos:line="17" pos:column="19"/></literal></expr>;<pos:position pos:line="17" pos:column="20"/></expr_stmt>
        <for pos:line="18" pos:column="9">for <control pos:line="18" pos:column="13">(<init><expr><name pos:line="18" pos:column="14">n<pos:position pos:line="18" pos:column="15"/></name> <operator pos:line="18" pos:column="16">=<pos:position pos:line="18" pos:column="17"/></operator> <literal type="number" pos:line="18" pos:column="18">0<pos:position pos:line="18" pos:column="19"/></literal></expr>;<pos:position pos:line="18" pos:column="20"/></init> <condition><expr><name pos:line="18" pos:column="21">n<pos:position pos:line="18" pos:column="22"/></name> <operator pos:line="18" pos:column="23">&lt;<pos:position pos:line="18" pos:column="27"/></operator> <sizeof pos:line="18" pos:column="25">sizeof<argument_list pos:line="18" pos:column="31">(<argument><expr><name pos:line="18" pos:column="32">p<pos:position pos:line="18" pos:column="33"/></name></expr></argument>)<pos:position pos:line="18" pos:column="34"/></argument_list></sizeof><operator pos:line="18" pos:column="34">/<pos:position pos:line="18" pos:column="35"/></operator>sizeof<operator pos:line="18" pos:column="41">(<pos:position pos:line="18" pos:column="42"/></operator><name pos:line="18" pos:column="42">unsigned<pos:position pos:line="18" pos:column="50"/></name> <name pos:line="18" pos:column="51">char<pos:position pos:line="18" pos:column="55"/></name><operator pos:line="18" pos:column="55">)<pos:position pos:line="18" pos:column="56"/></operator></expr>;<pos:position pos:line="18" pos:column="57"/></condition> <incr><expr><name pos:line="18" pos:column="58">n<pos:position pos:line="18" pos:column="59"/></name><operator pos:line="18" pos:column="59">++<pos:position pos:line="18" pos:column="61"/></operator></expr></incr>)<pos:position pos:line="18" pos:column="62"/></control>
            <block type="pseudo"><expr_stmt><expr><name pos:line="19" pos:column="13">poly<pos:position pos:line="19" pos:column="17"/></name> <operator pos:line="19" pos:column="18">|=<pos:position pos:line="19" pos:column="20"/></operator> <literal type="number" pos:line="19" pos:column="21">1UL<pos:position pos:line="19" pos:column="24"/></literal> <operator pos:line="19" pos:column="25">&lt;&lt;<pos:position pos:line="19" pos:column="33"/></operator> <operator pos:line="19" pos:column="28">(<pos:position pos:line="19" pos:column="29"/></operator><literal type="number" pos:line="19" pos:column="29">31<pos:position pos:line="19" pos:column="31"/></literal> <operator pos:line="19" pos:column="32">-<pos:position pos:line="19" pos:column="33"/></operator> <name><name pos:line="19" pos:column="34">p<pos:position pos:line="19" pos:column="35"/></name><index pos:line="19" pos:column="35">[<expr><name pos:line="19" pos:column="36">n<pos:position pos:line="19" pos:column="37"/></name></expr>]<pos:position pos:line="19" pos:column="38"/></index></name><operator pos:line="19" pos:column="38">)<pos:position pos:line="19" pos:column="39"/></operator></expr>;<pos:position pos:line="19" pos:column="40"/></expr_stmt></block></for>

        <comment type="block" pos:line="21" pos:column="9">/* generate a crc for every 8-bit value */</comment>
        <for pos:line="22" pos:column="9">for <control pos:line="22" pos:column="13">(<init><expr><name pos:line="22" pos:column="14">n<pos:position pos:line="22" pos:column="15"/></name> <operator pos:line="22" pos:column="16">=<pos:position pos:line="22" pos:column="17"/></operator> <literal type="number" pos:line="22" pos:column="18">0<pos:position pos:line="22" pos:column="19"/></literal></expr>;<pos:position pos:line="22" pos:column="20"/></init> <condition><expr><name pos:line="22" pos:column="21">n<pos:position pos:line="22" pos:column="22"/></name> <operator pos:line="22" pos:column="23">&lt;<pos:position pos:line="22" pos:column="27"/></operator> <literal type="number" pos:line="22" pos:column="25">256<pos:position pos:line="22" pos:column="28"/></literal></expr>;<pos:position pos:line="22" pos:column="29"/></condition> <incr><expr><name pos:line="22" pos:column="30">n<pos:position pos:line="22" pos:column="31"/></name><operator pos:line="22" pos:column="31">++<pos:position pos:line="22" pos:column="33"/></operator></expr></incr>)<pos:position pos:line="22" pos:column="34"/></control> <block pos:line="22" pos:column="35">{
            <expr_stmt><expr><name pos:line="23" pos:column="13">c<pos:position pos:line="23" pos:column="14"/></name> <operator pos:line="23" pos:column="15">=<pos:position pos:line="23" pos:column="16"/></operator> <operator pos:line="23" pos:column="17">(<pos:position pos:line="23" pos:column="18"/></operator><name pos:line="23" pos:column="18">unsigned<pos:position pos:line="23" pos:column="26"/></name> <name pos:line="23" pos:column="27">long<pos:position pos:line="23" pos:column="31"/></name><operator pos:line="23" pos:column="31">)<pos:position pos:line="23" pos:column="32"/></operator><name pos:line="23" pos:column="32">n<pos:position pos:line="23" pos:column="33"/></name></expr>;<pos:position pos:line="23" pos:column="34"/></expr_stmt>
            <for pos:line="24" pos:column="13">for <control pos:line="24" pos:column="17">(<init><expr><name pos:line="24" pos:column="18">k<pos:position pos:line="24" pos:column="19"/></name> <operator pos:line="24" pos:column="20">=<pos:position pos:line="24" pos:column="21"/></operator> <literal type="number" pos:line="24" pos:column="22">0<pos:position pos:line="24" pos:column="23"/></literal></expr>;<pos:position pos:line="24" pos:column="24"/></init> <condition><expr><name pos:line="24" pos:column="25">k<pos:position pos:line="24" pos:column="26"/></name> <operator pos:line="24" pos:column="27">&lt;<pos:position pos:line="24" pos:column="31"/></operator> <literal type="number" pos:line="24" pos:column="29">8<pos:position pos:line="24" pos:column="30"/></literal></expr>;<pos:position pos:line="24" pos:column="31"/></condition> <incr><expr><name pos:line="24" pos:column="32">k<pos:position pos:line="24" pos:column="33"/></name><operator pos:line="24" pos:column="33">++<pos:position pos:line="24" pos:column="35"/></operator></expr></incr>)<pos:position pos:line="24" pos:column="36"/></control>
                <block type="pseudo"><expr_stmt><expr><name pos:line="25" pos:column="17">c<pos:position pos:line="25" pos:column="18"/></name> <operator pos:line="25" pos:column="19">=<pos:position pos:line="25" pos:column="20"/></operator> <ternary><condition><expr><name pos:line="25" pos:column="21">c<pos:position pos:line="25" pos:column="22"/></name> <operator pos:line="25" pos:column="23">&amp;<pos:position pos:line="25" pos:column="28"/></operator> <literal type="number" pos:line="25" pos:column="25">1<pos:position pos:line="25" pos:column="26"/></literal></expr> ?<pos:position pos:line="25" pos:column="28"/></condition><then pos:line="25" pos:column="28"> <expr><name pos:line="25" pos:column="29">poly<pos:position pos:line="25" pos:column="33"/></name> <operator pos:line="25" pos:column="34">^<pos:position pos:line="25" pos:column="35"/></operator> <operator pos:line="25" pos:column="36">(<pos:position pos:line="25" pos:column="37"/></operator><name pos:line="25" pos:column="37">c<pos:position pos:line="25" pos:column="38"/></name> <operator pos:line="25" pos:column="39">&gt;&gt;<pos:position pos:line="25" pos:column="44"/></operator> <literal type="number" pos:line="25" pos:column="42">1<pos:position pos:line="25" pos:column="43"/></literal><operator pos:line="25" pos:column="43">)<pos:position pos:line="25" pos:column="44"/></operator></expr> <pos:position pos:line="25" pos:column="45"/></then><else pos:line="25" pos:column="45">: <expr><name pos:line="25" pos:column="47">c<pos:position pos:line="25" pos:column="48"/></name> <operator pos:line="25" pos:column="49">&gt;&gt;<pos:position pos:line="25" pos:column="54"/></operator> <literal type="number" pos:line="25" pos:column="52">1<pos:position pos:line="25" pos:column="53"/></literal></expr></else></ternary></expr>;<pos:position pos:line="25" pos:column="54"/></expr_stmt></block></for>
            <expr_stmt><expr><name><name pos:line="26" pos:column="13">crc_table<pos:position pos:line="26" pos:column="22"/></name><index pos:line="26" pos:column="22">[<expr><literal type="number" pos:line="26" pos:column="23">0<pos:position pos:line="26" pos:column="24"/></literal></expr>]<pos:position pos:line="26" pos:column="25"/></index><index pos:line="26" pos:column="25">[<expr><name pos:line="26" pos:column="26">n<pos:position pos:line="26" pos:column="27"/></name></expr>]<pos:position pos:line="26" pos:column="28"/></index></name> <operator pos:line="26" pos:column="29">=<pos:position pos:line="26" pos:column="30"/></operator> <name pos:line="26" pos:column="31">c<pos:position pos:line="26" pos:column="32"/></name></expr>;<pos:position pos:line="26" pos:column="33"/></expr_stmt>
        }<pos:position pos:line="27" pos:column="10"/></block></for>

<cpp:ifdef pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">ifdef<pos:position pos:line="29" pos:column="7"/></cpp:directive> <name pos:line="29" pos:column="8">BYFOUR<pos:position pos:line="29" pos:column="14"/></name></cpp:ifdef>
        <comment type="block" pos:line="30" pos:column="9">/* generate crc for each value followed by one, two, and three zeros,
           and then the byte reversal of those as well as the first table */</comment>
        <for pos:line="32" pos:column="9">for <control pos:line="32" pos:column="13">(<init><expr><name pos:line="32" pos:column="14">n<pos:position pos:line="32" pos:column="15"/></name> <operator pos:line="32" pos:column="16">=<pos:position pos:line="32" pos:column="17"/></operator> <literal type="number" pos:line="32" pos:column="18">0<pos:position pos:line="32" pos:column="19"/></literal></expr>;<pos:position pos:line="32" pos:column="20"/></init> <condition><expr><name pos:line="32" pos:column="21">n<pos:position pos:line="32" pos:column="22"/></name> <operator pos:line="32" pos:column="23">&lt;<pos:position pos:line="32" pos:column="27"/></operator> <literal type="number" pos:line="32" pos:column="25">256<pos:position pos:line="32" pos:column="28"/></literal></expr>;<pos:position pos:line="32" pos:column="29"/></condition> <incr><expr><name pos:line="32" pos:column="30">n<pos:position pos:line="32" pos:column="31"/></name><operator pos:line="32" pos:column="31">++<pos:position pos:line="32" pos:column="33"/></operator></expr></incr>)<pos:position pos:line="32" pos:column="34"/></control> <block pos:line="32" pos:column="35">{
            <expr_stmt><expr><name pos:line="33" pos:column="13">c<pos:position pos:line="33" pos:column="14"/></name> <operator pos:line="33" pos:column="15">=<pos:position pos:line="33" pos:column="16"/></operator> <name><name pos:line="33" pos:column="17">crc_table<pos:position pos:line="33" pos:column="26"/></name><index pos:line="33" pos:column="26">[<expr><literal type="number" pos:line="33" pos:column="27">0<pos:position pos:line="33" pos:column="28"/></literal></expr>]<pos:position pos:line="33" pos:column="29"/></index><index pos:line="33" pos:column="29">[<expr><name pos:line="33" pos:column="30">n<pos:position pos:line="33" pos:column="31"/></name></expr>]<pos:position pos:line="33" pos:column="32"/></index></name></expr>;<pos:position pos:line="33" pos:column="33"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="34" pos:column="13">crc_table<pos:position pos:line="34" pos:column="22"/></name><index pos:line="34" pos:column="22">[<expr><literal type="number" pos:line="34" pos:column="23">4<pos:position pos:line="34" pos:column="24"/></literal></expr>]<pos:position pos:line="34" pos:column="25"/></index><index pos:line="34" pos:column="25">[<expr><name pos:line="34" pos:column="26">n<pos:position pos:line="34" pos:column="27"/></name></expr>]<pos:position pos:line="34" pos:column="28"/></index></name> <operator pos:line="34" pos:column="29">=<pos:position pos:line="34" pos:column="30"/></operator> <call><name pos:line="34" pos:column="31">REV<pos:position pos:line="34" pos:column="34"/></name><argument_list pos:line="34" pos:column="34">(<argument><expr><name pos:line="34" pos:column="35">c<pos:position pos:line="34" pos:column="36"/></name></expr></argument>)<pos:position pos:line="34" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="38"/></expr_stmt>
            <for pos:line="35" pos:column="13">for <control pos:line="35" pos:column="17">(<init><expr><name pos:line="35" pos:column="18">k<pos:position pos:line="35" pos:column="19"/></name> <operator pos:line="35" pos:column="20">=<pos:position pos:line="35" pos:column="21"/></operator> <literal type="number" pos:line="35" pos:column="22">1<pos:position pos:line="35" pos:column="23"/></literal></expr>;<pos:position pos:line="35" pos:column="24"/></init> <condition><expr><name pos:line="35" pos:column="25">k<pos:position pos:line="35" pos:column="26"/></name> <operator pos:line="35" pos:column="27">&lt;<pos:position pos:line="35" pos:column="31"/></operator> <literal type="number" pos:line="35" pos:column="29">4<pos:position pos:line="35" pos:column="30"/></literal></expr>;<pos:position pos:line="35" pos:column="31"/></condition> <incr><expr><name pos:line="35" pos:column="32">k<pos:position pos:line="35" pos:column="33"/></name><operator pos:line="35" pos:column="33">++<pos:position pos:line="35" pos:column="35"/></operator></expr></incr>)<pos:position pos:line="35" pos:column="36"/></control> <block pos:line="35" pos:column="37">{
                <expr_stmt><expr><name pos:line="36" pos:column="17">c<pos:position pos:line="36" pos:column="18"/></name> <operator pos:line="36" pos:column="19">=<pos:position pos:line="36" pos:column="20"/></operator> <name><name pos:line="36" pos:column="21">crc_table<pos:position pos:line="36" pos:column="30"/></name><index pos:line="36" pos:column="30">[<expr><literal type="number" pos:line="36" pos:column="31">0<pos:position pos:line="36" pos:column="32"/></literal></expr>]<pos:position pos:line="36" pos:column="33"/></index><index pos:line="36" pos:column="33">[<expr><name pos:line="36" pos:column="34">c<pos:position pos:line="36" pos:column="35"/></name> <operator pos:line="36" pos:column="36">&amp;<pos:position pos:line="36" pos:column="41"/></operator> <literal type="number" pos:line="36" pos:column="38">0xff<pos:position pos:line="36" pos:column="42"/></literal></expr>]<pos:position pos:line="36" pos:column="43"/></index></name> <operator pos:line="36" pos:column="44">^<pos:position pos:line="36" pos:column="45"/></operator> <operator pos:line="36" pos:column="46">(<pos:position pos:line="36" pos:column="47"/></operator><name pos:line="36" pos:column="47">c<pos:position pos:line="36" pos:column="48"/></name> <operator pos:line="36" pos:column="49">&gt;&gt;<pos:position pos:line="36" pos:column="54"/></operator> <literal type="number" pos:line="36" pos:column="52">8<pos:position pos:line="36" pos:column="53"/></literal><operator pos:line="36" pos:column="53">)<pos:position pos:line="36" pos:column="54"/></operator></expr>;<pos:position pos:line="36" pos:column="55"/></expr_stmt>
                <expr_stmt><expr><name><name pos:line="37" pos:column="17">crc_table<pos:position pos:line="37" pos:column="26"/></name><index pos:line="37" pos:column="26">[<expr><name pos:line="37" pos:column="27">k<pos:position pos:line="37" pos:column="28"/></name></expr>]<pos:position pos:line="37" pos:column="29"/></index><index pos:line="37" pos:column="29">[<expr><name pos:line="37" pos:column="30">n<pos:position pos:line="37" pos:column="31"/></name></expr>]<pos:position pos:line="37" pos:column="32"/></index></name> <operator pos:line="37" pos:column="33">=<pos:position pos:line="37" pos:column="34"/></operator> <name pos:line="37" pos:column="35">c<pos:position pos:line="37" pos:column="36"/></name></expr>;<pos:position pos:line="37" pos:column="37"/></expr_stmt>
                <expr_stmt><expr><name><name pos:line="38" pos:column="17">crc_table<pos:position pos:line="38" pos:column="26"/></name><index pos:line="38" pos:column="26">[<expr><name pos:line="38" pos:column="27">k<pos:position pos:line="38" pos:column="28"/></name> <operator pos:line="38" pos:column="29">+<pos:position pos:line="38" pos:column="30"/></operator> <literal type="number" pos:line="38" pos:column="31">4<pos:position pos:line="38" pos:column="32"/></literal></expr>]<pos:position pos:line="38" pos:column="33"/></index><index pos:line="38" pos:column="33">[<expr><name pos:line="38" pos:column="34">n<pos:position pos:line="38" pos:column="35"/></name></expr>]<pos:position pos:line="38" pos:column="36"/></index></name> <operator pos:line="38" pos:column="37">=<pos:position pos:line="38" pos:column="38"/></operator> <call><name pos:line="38" pos:column="39">REV<pos:position pos:line="38" pos:column="42"/></name><argument_list pos:line="38" pos:column="42">(<argument><expr><name pos:line="38" pos:column="43">c<pos:position pos:line="38" pos:column="44"/></name></expr></argument>)<pos:position pos:line="38" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="46"/></expr_stmt>
            }<pos:position pos:line="39" pos:column="14"/></block></for>
        }<pos:position pos:line="40" pos:column="10"/></block></for>
<cpp:endif pos:line="41" pos:column="1">#<cpp:directive pos:line="41" pos:column="2">endif<pos:position pos:line="41" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="41" pos:column="8">/* BYFOUR */</comment>

        <expr_stmt><expr><name pos:line="43" pos:column="9">crc_table_empty<pos:position pos:line="43" pos:column="24"/></name> <operator pos:line="43" pos:column="25">=<pos:position pos:line="43" pos:column="26"/></operator> <literal type="number" pos:line="43" pos:column="27">0<pos:position pos:line="43" pos:column="28"/></literal></expr>;<pos:position pos:line="43" pos:column="29"/></expr_stmt>
    }<pos:position pos:line="44" pos:column="6"/></block></then>
    <else pos:line="45" pos:column="5">else <block pos:line="45" pos:column="10">{      <comment type="block" pos:line="45" pos:column="17">/* not first */</comment>
        <comment type="block" pos:line="46" pos:column="9">/* wait for the other guy to finish (not efficient, but rare) */</comment>
        <while pos:line="47" pos:column="9">while <condition pos:line="47" pos:column="15">(<expr><name pos:line="47" pos:column="16">crc_table_empty<pos:position pos:line="47" pos:column="31"/></name></expr>)<pos:position pos:line="47" pos:column="32"/></condition>
            <block type="pseudo"><empty_stmt pos:line="48" pos:column="13">;<pos:position pos:line="48" pos:column="14"/></empty_stmt></block></while>
    }<pos:position pos:line="49" pos:column="6"/></block></else></if>

<cpp:ifdef pos:line="51" pos:column="1">#<cpp:directive pos:line="51" pos:column="2">ifdef<pos:position pos:line="51" pos:column="7"/></cpp:directive> <name pos:line="51" pos:column="8">MAKECRCH<pos:position pos:line="51" pos:column="16"/></name></cpp:ifdef>
    <comment type="block" pos:line="52" pos:column="5">/* write out CRC tables to crc32.h */</comment>
    <block pos:line="53" pos:column="5">{
        <decl_stmt><decl><type><name pos:line="54" pos:column="9">FILE<pos:position pos:line="54" pos:column="13"/></name> <modifier pos:line="54" pos:column="14">*<pos:position pos:line="54" pos:column="15"/></modifier></type><name pos:line="54" pos:column="15">out<pos:position pos:line="54" pos:column="18"/></name></decl>;<pos:position pos:line="54" pos:column="19"/></decl_stmt>

        <expr_stmt><expr><name pos:line="56" pos:column="9">out<pos:position pos:line="56" pos:column="12"/></name> <operator pos:line="56" pos:column="13">=<pos:position pos:line="56" pos:column="14"/></operator> <call><name pos:line="56" pos:column="15">fopen<pos:position pos:line="56" pos:column="20"/></name><argument_list pos:line="56" pos:column="20">(<argument><expr><literal type="string" pos:line="56" pos:column="21">"crc32.h"<pos:position pos:line="56" pos:column="30"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="56" pos:column="32">"w"<pos:position pos:line="56" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="56" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="37"/></expr_stmt>
        <if pos:line="57" pos:column="9">if <condition pos:line="57" pos:column="12">(<expr><name pos:line="57" pos:column="13">out<pos:position pos:line="57" pos:column="16"/></name> <operator pos:line="57" pos:column="17">==<pos:position pos:line="57" pos:column="19"/></operator> <name pos:line="57" pos:column="20">NULL<pos:position pos:line="57" pos:column="24"/></name></expr>)<pos:position pos:line="57" pos:column="25"/></condition><then pos:line="57" pos:column="25"> <block type="pseudo"><return pos:line="57" pos:column="26">return;<pos:position pos:line="57" pos:column="33"/></return></block></then></if>
        <expr_stmt><expr><call><name pos:line="58" pos:column="9">fprintf<pos:position pos:line="58" pos:column="16"/></name><argument_list pos:line="58" pos:column="16">(<argument><expr><name pos:line="58" pos:column="17">out<pos:position pos:line="58" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="58" pos:column="22">"/* crc32.h -- tables for rapid CRC calculation\n"<pos:position pos:line="58" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="58" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="74"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="59" pos:column="9">fprintf<pos:position pos:line="59" pos:column="16"/></name><argument_list pos:line="59" pos:column="16">(<argument><expr><name pos:line="59" pos:column="17">out<pos:position pos:line="59" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="59" pos:column="22">" * Generated automatically by crc32.c\n */\n\n"<pos:position pos:line="59" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="59" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="72"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="60" pos:column="9">fprintf<pos:position pos:line="60" pos:column="16"/></name><argument_list pos:line="60" pos:column="16">(<argument><expr><name pos:line="60" pos:column="17">out<pos:position pos:line="60" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="60" pos:column="22">"local const unsigned long FAR "<pos:position pos:line="60" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="60" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="56"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="61" pos:column="9">fprintf<pos:position pos:line="61" pos:column="16"/></name><argument_list pos:line="61" pos:column="16">(<argument><expr><name pos:line="61" pos:column="17">out<pos:position pos:line="61" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="61" pos:column="22">"crc_table[TBLS][256] =\n{\n  {\n"<pos:position pos:line="61" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="61" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="58"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="62" pos:column="9">write_table<pos:position pos:line="62" pos:column="20"/></name><argument_list pos:line="62" pos:column="20">(<argument><expr><name pos:line="62" pos:column="21">out<pos:position pos:line="62" pos:column="24"/></name></expr></argument>, <argument><expr><name><name pos:line="62" pos:column="26">crc_table<pos:position pos:line="62" pos:column="35"/></name><index pos:line="62" pos:column="35">[<expr><literal type="number" pos:line="62" pos:column="36">0<pos:position pos:line="62" pos:column="37"/></literal></expr>]<pos:position pos:line="62" pos:column="38"/></index></name></expr></argument>)<pos:position pos:line="62" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="40"/></expr_stmt>
<cpp:ifdef pos:line="63" pos:column="1">#  <cpp:directive pos:line="63" pos:column="4">ifdef<pos:position pos:line="63" pos:column="9"/></cpp:directive> <name pos:line="63" pos:column="10">BYFOUR<pos:position pos:line="63" pos:column="16"/></name></cpp:ifdef>
        <expr_stmt><expr><call><name pos:line="64" pos:column="9">fprintf<pos:position pos:line="64" pos:column="16"/></name><argument_list pos:line="64" pos:column="16">(<argument><expr><name pos:line="64" pos:column="17">out<pos:position pos:line="64" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="64" pos:column="22">"#ifdef BYFOUR\n"<pos:position pos:line="64" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="64" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="41"/></expr_stmt>
        <for pos:line="65" pos:column="9">for <control pos:line="65" pos:column="13">(<init><expr><name pos:line="65" pos:column="14">k<pos:position pos:line="65" pos:column="15"/></name> <operator pos:line="65" pos:column="16">=<pos:position pos:line="65" pos:column="17"/></operator> <literal type="number" pos:line="65" pos:column="18">1<pos:position pos:line="65" pos:column="19"/></literal></expr>;<pos:position pos:line="65" pos:column="20"/></init> <condition><expr><name pos:line="65" pos:column="21">k<pos:position pos:line="65" pos:column="22"/></name> <operator pos:line="65" pos:column="23">&lt;<pos:position pos:line="65" pos:column="27"/></operator> <literal type="number" pos:line="65" pos:column="25">8<pos:position pos:line="65" pos:column="26"/></literal></expr>;<pos:position pos:line="65" pos:column="27"/></condition> <incr><expr><name pos:line="65" pos:column="28">k<pos:position pos:line="65" pos:column="29"/></name><operator pos:line="65" pos:column="29">++<pos:position pos:line="65" pos:column="31"/></operator></expr></incr>)<pos:position pos:line="65" pos:column="32"/></control> <block pos:line="65" pos:column="33">{
            <expr_stmt><expr><call><name pos:line="66" pos:column="13">fprintf<pos:position pos:line="66" pos:column="20"/></name><argument_list pos:line="66" pos:column="20">(<argument><expr><name pos:line="66" pos:column="21">out<pos:position pos:line="66" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="66" pos:column="26">"  },\n  {\n"<pos:position pos:line="66" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="66" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="41"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="67" pos:column="13">write_table<pos:position pos:line="67" pos:column="24"/></name><argument_list pos:line="67" pos:column="24">(<argument><expr><name pos:line="67" pos:column="25">out<pos:position pos:line="67" pos:column="28"/></name></expr></argument>, <argument><expr><name><name pos:line="67" pos:column="30">crc_table<pos:position pos:line="67" pos:column="39"/></name><index pos:line="67" pos:column="39">[<expr><name pos:line="67" pos:column="40">k<pos:position pos:line="67" pos:column="41"/></name></expr>]<pos:position pos:line="67" pos:column="42"/></index></name></expr></argument>)<pos:position pos:line="67" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="44"/></expr_stmt>
        }<pos:position pos:line="68" pos:column="10"/></block></for>
        <expr_stmt><expr><call><name pos:line="69" pos:column="9">fprintf<pos:position pos:line="69" pos:column="16"/></name><argument_list pos:line="69" pos:column="16">(<argument><expr><name pos:line="69" pos:column="17">out<pos:position pos:line="69" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="69" pos:column="22">"#endif\n"<pos:position pos:line="69" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="69" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="34"/></expr_stmt>
<cpp:endif pos:line="70" pos:column="1">#  <cpp:directive pos:line="70" pos:column="4">endif<pos:position pos:line="70" pos:column="9"/></cpp:directive></cpp:endif> <comment type="block" pos:line="70" pos:column="10">/* BYFOUR */</comment>
        <expr_stmt><expr><call><name pos:line="71" pos:column="9">fprintf<pos:position pos:line="71" pos:column="16"/></name><argument_list pos:line="71" pos:column="16">(<argument><expr><name pos:line="71" pos:column="17">out<pos:position pos:line="71" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="71" pos:column="22">"  }\n};\n"<pos:position pos:line="71" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="71" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="35"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="72" pos:column="9">fclose<pos:position pos:line="72" pos:column="15"/></name><argument_list pos:line="72" pos:column="15">(<argument><expr><name pos:line="72" pos:column="16">out<pos:position pos:line="72" pos:column="19"/></name></expr></argument>)<pos:position pos:line="72" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="21"/></expr_stmt>
    }<pos:position pos:line="73" pos:column="6"/></block>
<cpp:endif pos:line="74" pos:column="1">#<cpp:directive pos:line="74" pos:column="2">endif<pos:position pos:line="74" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="74" pos:column="8">/* MAKECRCH */</comment>
}<pos:position pos:line="75" pos:column="2"/></block></function></unit>
