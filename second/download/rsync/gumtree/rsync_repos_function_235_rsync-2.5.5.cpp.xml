<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_235_rsync-2.5.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">receive_data<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name pos:line="1" pos:column="25">int<pos:position pos:line="1" pos:column="28"/></name></type> <name pos:line="1" pos:column="29">f_in<pos:position pos:line="1" pos:column="33"/></name></decl></parameter>,<parameter><decl><type><name><name pos:line="1" pos:column="34">struct<pos:position pos:line="1" pos:column="40"/></name> <name pos:line="1" pos:column="41">map_struct<pos:position pos:line="1" pos:column="51"/></name></name> <modifier pos:line="1" pos:column="52">*<pos:position pos:line="1" pos:column="53"/></modifier></type><name pos:line="1" pos:column="53">buf<pos:position pos:line="1" pos:column="56"/></name></decl></parameter>,<parameter><decl><type><name pos:line="1" pos:column="57">int<pos:position pos:line="1" pos:column="60"/></name></type> <name pos:line="1" pos:column="61">fd<pos:position pos:line="1" pos:column="63"/></name></decl></parameter>,<parameter><decl><type><name pos:line="1" pos:column="64">char<pos:position pos:line="1" pos:column="68"/></name> <modifier pos:line="1" pos:column="69">*<pos:position pos:line="1" pos:column="70"/></modifier></type><name pos:line="1" pos:column="70">fname<pos:position pos:line="1" pos:column="75"/></name></decl></parameter>,
			<parameter><decl><type><name pos:line="2" pos:column="25">OFF_T<pos:position pos:line="2" pos:column="30"/></name></type> <name pos:line="2" pos:column="31">total_size<pos:position pos:line="2" pos:column="41"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="42"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">i<pos:position pos:line="4" pos:column="14"/></name></decl>;<pos:position pos:line="4" pos:column="15"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">unsigned<pos:position pos:line="5" pos:column="17"/></name> <name pos:line="5" pos:column="18">int<pos:position pos:line="5" pos:column="21"/></name></type> <name pos:line="5" pos:column="22">n<pos:position pos:line="5" pos:column="23"/></name></decl>,<decl><type ref="prev"/><name pos:line="5" pos:column="24">remainder<pos:position pos:line="5" pos:column="33"/></name></decl>,<decl><type ref="prev"/><name pos:line="5" pos:column="34">len<pos:position pos:line="5" pos:column="37"/></name></decl>,<decl><type ref="prev"/><name pos:line="5" pos:column="38">count<pos:position pos:line="5" pos:column="43"/></name></decl>;<pos:position pos:line="5" pos:column="44"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">OFF_T<pos:position pos:line="6" pos:column="14"/></name></type> <name pos:line="6" pos:column="15">offset<pos:position pos:line="6" pos:column="21"/></name> <init pos:line="6" pos:column="22">= <expr><literal type="number" pos:line="6" pos:column="24">0<pos:position pos:line="6" pos:column="25"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="26"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">OFF_T<pos:position pos:line="7" pos:column="14"/></name></type> <name pos:line="7" pos:column="15">offset2<pos:position pos:line="7" pos:column="22"/></name></decl>;<pos:position pos:line="7" pos:column="23"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">char<pos:position pos:line="8" pos:column="13"/></name> <modifier pos:line="8" pos:column="14">*<pos:position pos:line="8" pos:column="15"/></modifier></type><name pos:line="8" pos:column="15">data<pos:position pos:line="8" pos:column="19"/></name></decl>;<pos:position pos:line="8" pos:column="20"/></decl_stmt>
	<decl_stmt><decl><specifier pos:line="9" pos:column="9">static<pos:position pos:line="9" pos:column="15"/></specifier> <type><name pos:line="9" pos:column="16">char<pos:position pos:line="9" pos:column="20"/></name></type> <name><name pos:line="9" pos:column="21">file_sum1<pos:position pos:line="9" pos:column="30"/></name><index pos:line="9" pos:column="30">[<expr><name pos:line="9" pos:column="31">MD4_SUM_LENGTH<pos:position pos:line="9" pos:column="45"/></name></expr>]<pos:position pos:line="9" pos:column="46"/></index></name></decl>;<pos:position pos:line="9" pos:column="47"/></decl_stmt>
	<decl_stmt><decl><specifier pos:line="10" pos:column="9">static<pos:position pos:line="10" pos:column="15"/></specifier> <type><name pos:line="10" pos:column="16">char<pos:position pos:line="10" pos:column="20"/></name></type> <name><name pos:line="10" pos:column="21">file_sum2<pos:position pos:line="10" pos:column="30"/></name><index pos:line="10" pos:column="30">[<expr><name pos:line="10" pos:column="31">MD4_SUM_LENGTH<pos:position pos:line="10" pos:column="45"/></name></expr>]<pos:position pos:line="10" pos:column="46"/></index></name></decl>;<pos:position pos:line="10" pos:column="47"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="11" pos:column="9">char<pos:position pos:line="11" pos:column="13"/></name> <modifier pos:line="11" pos:column="14">*<pos:position pos:line="11" pos:column="15"/></modifier></type><name pos:line="11" pos:column="15">map<pos:position pos:line="11" pos:column="18"/></name><init pos:line="11" pos:column="18">=<expr><name pos:line="11" pos:column="19">NULL<pos:position pos:line="11" pos:column="23"/></name></expr></init></decl>;<pos:position pos:line="11" pos:column="24"/></decl_stmt>
	
	<expr_stmt><expr><name pos:line="13" pos:column="9">count<pos:position pos:line="13" pos:column="14"/></name> <operator pos:line="13" pos:column="15">=<pos:position pos:line="13" pos:column="16"/></operator> <call><name pos:line="13" pos:column="17">read_int<pos:position pos:line="13" pos:column="25"/></name><argument_list pos:line="13" pos:column="25">(<argument><expr><name pos:line="13" pos:column="26">f_in<pos:position pos:line="13" pos:column="30"/></name></expr></argument>)<pos:position pos:line="13" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="32"/></expr_stmt>
	<expr_stmt><expr><name pos:line="14" pos:column="9">n<pos:position pos:line="14" pos:column="10"/></name> <operator pos:line="14" pos:column="11">=<pos:position pos:line="14" pos:column="12"/></operator> <call><name pos:line="14" pos:column="13">read_int<pos:position pos:line="14" pos:column="21"/></name><argument_list pos:line="14" pos:column="21">(<argument><expr><name pos:line="14" pos:column="22">f_in<pos:position pos:line="14" pos:column="26"/></name></expr></argument>)<pos:position pos:line="14" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="28"/></expr_stmt>
	<expr_stmt><expr><name pos:line="15" pos:column="9">remainder<pos:position pos:line="15" pos:column="18"/></name> <operator pos:line="15" pos:column="19">=<pos:position pos:line="15" pos:column="20"/></operator> <call><name pos:line="15" pos:column="21">read_int<pos:position pos:line="15" pos:column="29"/></name><argument_list pos:line="15" pos:column="29">(<argument><expr><name pos:line="15" pos:column="30">f_in<pos:position pos:line="15" pos:column="34"/></name></expr></argument>)<pos:position pos:line="15" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="36"/></expr_stmt>
	
	<expr_stmt><expr><call><name pos:line="17" pos:column="9">sum_init<pos:position pos:line="17" pos:column="17"/></name><argument_list pos:line="17" pos:column="17">()<pos:position pos:line="17" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="20"/></expr_stmt>
	
	<for pos:line="19" pos:column="9">for <control pos:line="19" pos:column="13">(<init><expr><name pos:line="19" pos:column="14">i<pos:position pos:line="19" pos:column="15"/></name><operator pos:line="19" pos:column="15">=<pos:position pos:line="19" pos:column="16"/></operator><call><name pos:line="19" pos:column="16">recv_token<pos:position pos:line="19" pos:column="26"/></name><argument_list pos:line="19" pos:column="26">(<argument><expr><name pos:line="19" pos:column="27">f_in<pos:position pos:line="19" pos:column="31"/></name></expr></argument>,<argument><expr><operator pos:line="19" pos:column="32">&amp;<pos:position pos:line="19" pos:column="37"/></operator><name pos:line="19" pos:column="33">data<pos:position pos:line="19" pos:column="37"/></name></expr></argument>)<pos:position pos:line="19" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="39"/></init> <condition><expr><name pos:line="19" pos:column="40">i<pos:position pos:line="19" pos:column="41"/></name> <operator pos:line="19" pos:column="42">!=<pos:position pos:line="19" pos:column="44"/></operator> <literal type="number" pos:line="19" pos:column="45">0<pos:position pos:line="19" pos:column="46"/></literal></expr>;<pos:position pos:line="19" pos:column="47"/></condition> <incr><expr><name pos:line="19" pos:column="48">i<pos:position pos:line="19" pos:column="49"/></name><operator pos:line="19" pos:column="49">=<pos:position pos:line="19" pos:column="50"/></operator><call><name pos:line="19" pos:column="50">recv_token<pos:position pos:line="19" pos:column="60"/></name><argument_list pos:line="19" pos:column="60">(<argument><expr><name pos:line="19" pos:column="61">f_in<pos:position pos:line="19" pos:column="65"/></name></expr></argument>,<argument><expr><operator pos:line="19" pos:column="66">&amp;<pos:position pos:line="19" pos:column="71"/></operator><name pos:line="19" pos:column="67">data<pos:position pos:line="19" pos:column="71"/></name></expr></argument>)<pos:position pos:line="19" pos:column="72"/></argument_list></call></expr></incr>)<pos:position pos:line="19" pos:column="73"/></control> <block pos:line="19" pos:column="74">{

		<expr_stmt><expr><call><name pos:line="21" pos:column="17">show_progress<pos:position pos:line="21" pos:column="30"/></name><argument_list pos:line="21" pos:column="30">(<argument><expr><name pos:line="21" pos:column="31">offset<pos:position pos:line="21" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="39">total_size<pos:position pos:line="21" pos:column="49"/></name></expr></argument>)<pos:position pos:line="21" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="51"/></expr_stmt>

		<if pos:line="23" pos:column="17">if <condition pos:line="23" pos:column="20">(<expr><name pos:line="23" pos:column="21">i<pos:position pos:line="23" pos:column="22"/></name> <operator pos:line="23" pos:column="23">&gt;<pos:position pos:line="23" pos:column="27"/></operator> <literal type="number" pos:line="23" pos:column="25">0<pos:position pos:line="23" pos:column="26"/></literal></expr>)<pos:position pos:line="23" pos:column="27"/></condition><then pos:line="23" pos:column="27"> <block pos:line="23" pos:column="28">{
			<decl_stmt><decl><specifier pos:line="24" pos:column="25">extern<pos:position pos:line="24" pos:column="31"/></specifier> <type><name pos:line="24" pos:column="32">int<pos:position pos:line="24" pos:column="35"/></name></type> <name pos:line="24" pos:column="36">cleanup_got_literal<pos:position pos:line="24" pos:column="55"/></name></decl>;<pos:position pos:line="24" pos:column="56"/></decl_stmt>

			<if pos:line="26" pos:column="25">if <condition pos:line="26" pos:column="28">(<expr><name pos:line="26" pos:column="29">verbose<pos:position pos:line="26" pos:column="36"/></name> <operator pos:line="26" pos:column="37">&gt;<pos:position pos:line="26" pos:column="41"/></operator> <literal type="number" pos:line="26" pos:column="39">3<pos:position pos:line="26" pos:column="40"/></literal></expr>)<pos:position pos:line="26" pos:column="41"/></condition><then pos:line="26" pos:column="41"> <block pos:line="26" pos:column="42">{
				<expr_stmt><expr><call><name pos:line="27" pos:column="33">rprintf<pos:position pos:line="27" pos:column="40"/></name><argument_list pos:line="27" pos:column="40">(<argument><expr><name pos:line="27" pos:column="41">FINFO<pos:position pos:line="27" pos:column="46"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="27" pos:column="47">"data recv %d at %.0f\n"<pos:position pos:line="27" pos:column="71"/></literal></expr></argument>,
					<argument><expr><name pos:line="28" pos:column="41">i<pos:position pos:line="28" pos:column="42"/></name></expr></argument>,<argument><expr><operator pos:line="28" pos:column="43">(<pos:position pos:line="28" pos:column="44"/></operator><name pos:line="28" pos:column="44">double<pos:position pos:line="28" pos:column="50"/></name><operator pos:line="28" pos:column="50">)<pos:position pos:line="28" pos:column="51"/></operator><name pos:line="28" pos:column="51">offset<pos:position pos:line="28" pos:column="57"/></name></expr></argument>)<pos:position pos:line="28" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="59"/></expr_stmt>
			}<pos:position pos:line="29" pos:column="26"/></block></then></if>

			<expr_stmt><expr><name><name pos:line="31" pos:column="25">stats<pos:position pos:line="31" pos:column="30"/></name><operator pos:line="31" pos:column="30">.<pos:position pos:line="31" pos:column="31"/></operator><name pos:line="31" pos:column="31">literal_data<pos:position pos:line="31" pos:column="43"/></name></name> <operator pos:line="31" pos:column="44">+=<pos:position pos:line="31" pos:column="46"/></operator> <name pos:line="31" pos:column="47">i<pos:position pos:line="31" pos:column="48"/></name></expr>;<pos:position pos:line="31" pos:column="49"/></expr_stmt>
			<expr_stmt><expr><name pos:line="32" pos:column="25">cleanup_got_literal<pos:position pos:line="32" pos:column="44"/></name> <operator pos:line="32" pos:column="45">=<pos:position pos:line="32" pos:column="46"/></operator> <literal type="number" pos:line="32" pos:column="47">1<pos:position pos:line="32" pos:column="48"/></literal></expr>;<pos:position pos:line="32" pos:column="49"/></expr_stmt>
      
			<expr_stmt><expr><call><name pos:line="34" pos:column="25">sum_update<pos:position pos:line="34" pos:column="35"/></name><argument_list pos:line="34" pos:column="35">(<argument><expr><name pos:line="34" pos:column="36">data<pos:position pos:line="34" pos:column="40"/></name></expr></argument>,<argument><expr><name pos:line="34" pos:column="41">i<pos:position pos:line="34" pos:column="42"/></name></expr></argument>)<pos:position pos:line="34" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="44"/></expr_stmt>

			<if pos:line="36" pos:column="25">if <condition pos:line="36" pos:column="28">(<expr><name pos:line="36" pos:column="29">fd<pos:position pos:line="36" pos:column="31"/></name> <operator pos:line="36" pos:column="32">!=<pos:position pos:line="36" pos:column="34"/></operator> <operator pos:line="36" pos:column="35">-<pos:position pos:line="36" pos:column="36"/></operator><literal type="number" pos:line="36" pos:column="36">1<pos:position pos:line="36" pos:column="37"/></literal> <operator pos:line="36" pos:column="38">&amp;&amp;<pos:position pos:line="36" pos:column="48"/></operator> <call><name pos:line="36" pos:column="41">write_file<pos:position pos:line="36" pos:column="51"/></name><argument_list pos:line="36" pos:column="51">(<argument><expr><name pos:line="36" pos:column="52">fd<pos:position pos:line="36" pos:column="54"/></name></expr></argument>,<argument><expr><name pos:line="36" pos:column="55">data<pos:position pos:line="36" pos:column="59"/></name></expr></argument>,<argument><expr><name pos:line="36" pos:column="60">i<pos:position pos:line="36" pos:column="61"/></name></expr></argument>)<pos:position pos:line="36" pos:column="62"/></argument_list></call> <operator pos:line="36" pos:column="63">!=<pos:position pos:line="36" pos:column="65"/></operator> <name pos:line="36" pos:column="66">i<pos:position pos:line="36" pos:column="67"/></name></expr>)<pos:position pos:line="36" pos:column="68"/></condition><then pos:line="36" pos:column="68"> <block pos:line="36" pos:column="69">{
				<expr_stmt><expr><call><name pos:line="37" pos:column="33">rprintf<pos:position pos:line="37" pos:column="40"/></name><argument_list pos:line="37" pos:column="40">(<argument><expr><name pos:line="37" pos:column="41">FERROR<pos:position pos:line="37" pos:column="47"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="37" pos:column="48">"write failed on %s : %s\n"<pos:position pos:line="37" pos:column="75"/></literal></expr></argument>,<argument><expr><name pos:line="37" pos:column="76">fname<pos:position pos:line="37" pos:column="81"/></name></expr></argument>,<argument><expr><call><name pos:line="37" pos:column="82">strerror<pos:position pos:line="37" pos:column="90"/></name><argument_list pos:line="37" pos:column="90">(<argument><expr><name pos:line="37" pos:column="91">errno<pos:position pos:line="37" pos:column="96"/></name></expr></argument>)<pos:position pos:line="37" pos:column="97"/></argument_list></call></expr></argument>)<pos:position pos:line="37" pos:column="98"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="99"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="38" pos:column="33">exit_cleanup<pos:position pos:line="38" pos:column="45"/></name><argument_list pos:line="38" pos:column="45">(<argument><expr><name pos:line="38" pos:column="46">RERR_FILEIO<pos:position pos:line="38" pos:column="57"/></name></expr></argument>)<pos:position pos:line="38" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="59"/></expr_stmt>
			}<pos:position pos:line="39" pos:column="26"/></block></then></if>
			<expr_stmt><expr><name pos:line="40" pos:column="25">offset<pos:position pos:line="40" pos:column="31"/></name> <operator pos:line="40" pos:column="32">+=<pos:position pos:line="40" pos:column="34"/></operator> <name pos:line="40" pos:column="35">i<pos:position pos:line="40" pos:column="36"/></name></expr>;<pos:position pos:line="40" pos:column="37"/></expr_stmt>
			<continue pos:line="41" pos:column="25">continue;<pos:position pos:line="41" pos:column="34"/></continue>
		}<pos:position pos:line="42" pos:column="18"/></block></then></if> 

		<expr_stmt><expr><name pos:line="44" pos:column="17">i<pos:position pos:line="44" pos:column="18"/></name> <operator pos:line="44" pos:column="19">=<pos:position pos:line="44" pos:column="20"/></operator> <operator pos:line="44" pos:column="21">-<pos:position pos:line="44" pos:column="22"/></operator><operator pos:line="44" pos:column="22">(<pos:position pos:line="44" pos:column="23"/></operator><name pos:line="44" pos:column="23">i<pos:position pos:line="44" pos:column="24"/></name><operator pos:line="44" pos:column="24">+<pos:position pos:line="44" pos:column="25"/></operator><literal type="number" pos:line="44" pos:column="25">1<pos:position pos:line="44" pos:column="26"/></literal><operator pos:line="44" pos:column="26">)<pos:position pos:line="44" pos:column="27"/></operator></expr>;<pos:position pos:line="44" pos:column="28"/></expr_stmt>
		<expr_stmt><expr><name pos:line="45" pos:column="17">offset2<pos:position pos:line="45" pos:column="24"/></name> <operator pos:line="45" pos:column="25">=<pos:position pos:line="45" pos:column="26"/></operator> <name pos:line="45" pos:column="27">i<pos:position pos:line="45" pos:column="28"/></name><operator pos:line="45" pos:column="28">*<pos:position pos:line="45" pos:column="29"/></operator><operator pos:line="45" pos:column="29">(<pos:position pos:line="45" pos:column="30"/></operator><name pos:line="45" pos:column="30">OFF_T<pos:position pos:line="45" pos:column="35"/></name><operator pos:line="45" pos:column="35">)<pos:position pos:line="45" pos:column="36"/></operator><name pos:line="45" pos:column="36">n<pos:position pos:line="45" pos:column="37"/></name></expr>;<pos:position pos:line="45" pos:column="38"/></expr_stmt>
		<expr_stmt><expr><name pos:line="46" pos:column="17">len<pos:position pos:line="46" pos:column="20"/></name> <operator pos:line="46" pos:column="21">=<pos:position pos:line="46" pos:column="22"/></operator> <name pos:line="46" pos:column="23">n<pos:position pos:line="46" pos:column="24"/></name></expr>;<pos:position pos:line="46" pos:column="25"/></expr_stmt>
		<if pos:line="47" pos:column="17">if <condition pos:line="47" pos:column="20">(<expr><name pos:line="47" pos:column="21">i<pos:position pos:line="47" pos:column="22"/></name> <operator pos:line="47" pos:column="23">==<pos:position pos:line="47" pos:column="25"/></operator> <operator pos:line="47" pos:column="26">(<pos:position pos:line="47" pos:column="27"/></operator><name pos:line="47" pos:column="27">int<pos:position pos:line="47" pos:column="30"/></name><operator pos:line="47" pos:column="30">)<pos:position pos:line="47" pos:column="31"/></operator> <name pos:line="47" pos:column="32">count<pos:position pos:line="47" pos:column="37"/></name><operator pos:line="47" pos:column="37">-<pos:position pos:line="47" pos:column="38"/></operator><literal type="number" pos:line="47" pos:column="38">1<pos:position pos:line="47" pos:column="39"/></literal> <operator pos:line="47" pos:column="40">&amp;&amp;<pos:position pos:line="47" pos:column="50"/></operator> <name pos:line="47" pos:column="43">remainder<pos:position pos:line="47" pos:column="52"/></name> <operator pos:line="47" pos:column="53">!=<pos:position pos:line="47" pos:column="55"/></operator> <literal type="number" pos:line="47" pos:column="56">0<pos:position pos:line="47" pos:column="57"/></literal></expr>)<pos:position pos:line="47" pos:column="58"/></condition><then pos:line="47" pos:column="58">
			<block type="pseudo"><expr_stmt><expr><name pos:line="48" pos:column="25">len<pos:position pos:line="48" pos:column="28"/></name> <operator pos:line="48" pos:column="29">=<pos:position pos:line="48" pos:column="30"/></operator> <name pos:line="48" pos:column="31">remainder<pos:position pos:line="48" pos:column="40"/></name></expr>;<pos:position pos:line="48" pos:column="41"/></expr_stmt></block></then></if>
		
		<expr_stmt><expr><name><name pos:line="50" pos:column="17">stats<pos:position pos:line="50" pos:column="22"/></name><operator pos:line="50" pos:column="22">.<pos:position pos:line="50" pos:column="23"/></operator><name pos:line="50" pos:column="23">matched_data<pos:position pos:line="50" pos:column="35"/></name></name> <operator pos:line="50" pos:column="36">+=<pos:position pos:line="50" pos:column="38"/></operator> <name pos:line="50" pos:column="39">len<pos:position pos:line="50" pos:column="42"/></name></expr>;<pos:position pos:line="50" pos:column="43"/></expr_stmt>
		
		<if pos:line="52" pos:column="17">if <condition pos:line="52" pos:column="20">(<expr><name pos:line="52" pos:column="21">verbose<pos:position pos:line="52" pos:column="28"/></name> <operator pos:line="52" pos:column="29">&gt;<pos:position pos:line="52" pos:column="33"/></operator> <literal type="number" pos:line="52" pos:column="31">3<pos:position pos:line="52" pos:column="32"/></literal></expr>)<pos:position pos:line="52" pos:column="33"/></condition><then pos:line="52" pos:column="33">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="53" pos:column="25">rprintf<pos:position pos:line="53" pos:column="32"/></name><argument_list pos:line="53" pos:column="32">(<argument><expr><name pos:line="53" pos:column="33">FINFO<pos:position pos:line="53" pos:column="38"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="53" pos:column="39">"chunk[%d] of size %d at %.0f offset=%.0f\n"<pos:position pos:line="53" pos:column="83"/></literal></expr></argument>,
				<argument><expr><name pos:line="54" pos:column="33">i<pos:position pos:line="54" pos:column="34"/></name></expr></argument>,<argument><expr><name pos:line="54" pos:column="35">len<pos:position pos:line="54" pos:column="38"/></name></expr></argument>,<argument><expr><operator pos:line="54" pos:column="39">(<pos:position pos:line="54" pos:column="40"/></operator><name pos:line="54" pos:column="40">double<pos:position pos:line="54" pos:column="46"/></name><operator pos:line="54" pos:column="46">)<pos:position pos:line="54" pos:column="47"/></operator><name pos:line="54" pos:column="47">offset2<pos:position pos:line="54" pos:column="54"/></name></expr></argument>,<argument><expr><operator pos:line="54" pos:column="55">(<pos:position pos:line="54" pos:column="56"/></operator><name pos:line="54" pos:column="56">double<pos:position pos:line="54" pos:column="62"/></name><operator pos:line="54" pos:column="62">)<pos:position pos:line="54" pos:column="63"/></operator><name pos:line="54" pos:column="63">offset<pos:position pos:line="54" pos:column="69"/></name></expr></argument>)<pos:position pos:line="54" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="71"/></expr_stmt></block></then></if>
		
		<if pos:line="56" pos:column="17">if <condition pos:line="56" pos:column="20">(<expr><name pos:line="56" pos:column="21">buf<pos:position pos:line="56" pos:column="24"/></name></expr>)<pos:position pos:line="56" pos:column="25"/></condition><then pos:line="56" pos:column="25"> <block pos:line="56" pos:column="26">{
			<expr_stmt><expr><name pos:line="57" pos:column="25">map<pos:position pos:line="57" pos:column="28"/></name> <operator pos:line="57" pos:column="29">=<pos:position pos:line="57" pos:column="30"/></operator> <call><name pos:line="57" pos:column="31">map_ptr<pos:position pos:line="57" pos:column="38"/></name><argument_list pos:line="57" pos:column="38">(<argument><expr><name pos:line="57" pos:column="39">buf<pos:position pos:line="57" pos:column="42"/></name></expr></argument>,<argument><expr><name pos:line="57" pos:column="43">offset2<pos:position pos:line="57" pos:column="50"/></name></expr></argument>,<argument><expr><name pos:line="57" pos:column="51">len<pos:position pos:line="57" pos:column="54"/></name></expr></argument>)<pos:position pos:line="57" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="56"/></expr_stmt>
		
			<expr_stmt><expr><call><name pos:line="59" pos:column="25">see_token<pos:position pos:line="59" pos:column="34"/></name><argument_list pos:line="59" pos:column="34">(<argument><expr><name pos:line="59" pos:column="35">map<pos:position pos:line="59" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="40">len<pos:position pos:line="59" pos:column="43"/></name></expr></argument>)<pos:position pos:line="59" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="45"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="60" pos:column="25">sum_update<pos:position pos:line="60" pos:column="35"/></name><argument_list pos:line="60" pos:column="35">(<argument><expr><name pos:line="60" pos:column="36">map<pos:position pos:line="60" pos:column="39"/></name></expr></argument>,<argument><expr><name pos:line="60" pos:column="40">len<pos:position pos:line="60" pos:column="43"/></name></expr></argument>)<pos:position pos:line="60" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="45"/></expr_stmt>
		}<pos:position pos:line="61" pos:column="18"/></block></then></if>
		
		<if pos:line="63" pos:column="17">if <condition pos:line="63" pos:column="20">(<expr><name pos:line="63" pos:column="21">fd<pos:position pos:line="63" pos:column="23"/></name> <operator pos:line="63" pos:column="24">!=<pos:position pos:line="63" pos:column="26"/></operator> <operator pos:line="63" pos:column="27">-<pos:position pos:line="63" pos:column="28"/></operator><literal type="number" pos:line="63" pos:column="28">1<pos:position pos:line="63" pos:column="29"/></literal> <operator pos:line="63" pos:column="30">&amp;&amp;<pos:position pos:line="63" pos:column="40"/></operator> <call><name pos:line="63" pos:column="33">write_file<pos:position pos:line="63" pos:column="43"/></name><argument_list pos:line="63" pos:column="43">(<argument><expr><name pos:line="63" pos:column="44">fd<pos:position pos:line="63" pos:column="46"/></name></expr></argument>,<argument><expr><name pos:line="63" pos:column="47">map<pos:position pos:line="63" pos:column="50"/></name></expr></argument>,<argument><expr><name pos:line="63" pos:column="51">len<pos:position pos:line="63" pos:column="54"/></name></expr></argument>)<pos:position pos:line="63" pos:column="55"/></argument_list></call> <operator pos:line="63" pos:column="56">!=<pos:position pos:line="63" pos:column="58"/></operator> <operator pos:line="63" pos:column="59">(<pos:position pos:line="63" pos:column="60"/></operator><name pos:line="63" pos:column="60">int<pos:position pos:line="63" pos:column="63"/></name><operator pos:line="63" pos:column="63">)<pos:position pos:line="63" pos:column="64"/></operator> <name pos:line="63" pos:column="65">len<pos:position pos:line="63" pos:column="68"/></name></expr>)<pos:position pos:line="63" pos:column="69"/></condition><then pos:line="63" pos:column="69"> <block pos:line="63" pos:column="70">{
			<expr_stmt><expr><call><name pos:line="64" pos:column="25">rprintf<pos:position pos:line="64" pos:column="32"/></name><argument_list pos:line="64" pos:column="32">(<argument><expr><name pos:line="64" pos:column="33">FERROR<pos:position pos:line="64" pos:column="39"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="64" pos:column="40">"write failed on %s : %s\n"<pos:position pos:line="64" pos:column="67"/></literal></expr></argument>,
				<argument><expr><name pos:line="65" pos:column="33">fname<pos:position pos:line="65" pos:column="38"/></name></expr></argument>,<argument><expr><call><name pos:line="65" pos:column="39">strerror<pos:position pos:line="65" pos:column="47"/></name><argument_list pos:line="65" pos:column="47">(<argument><expr><name pos:line="65" pos:column="48">errno<pos:position pos:line="65" pos:column="53"/></name></expr></argument>)<pos:position pos:line="65" pos:column="54"/></argument_list></call></expr></argument>)<pos:position pos:line="65" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="56"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="66" pos:column="25">exit_cleanup<pos:position pos:line="66" pos:column="37"/></name><argument_list pos:line="66" pos:column="37">(<argument><expr><name pos:line="66" pos:column="38">RERR_FILEIO<pos:position pos:line="66" pos:column="49"/></name></expr></argument>)<pos:position pos:line="66" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="51"/></expr_stmt>
		}<pos:position pos:line="67" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name pos:line="68" pos:column="17">offset<pos:position pos:line="68" pos:column="23"/></name> <operator pos:line="68" pos:column="24">+=<pos:position pos:line="68" pos:column="26"/></operator> <name pos:line="68" pos:column="27">len<pos:position pos:line="68" pos:column="30"/></name></expr>;<pos:position pos:line="68" pos:column="31"/></expr_stmt>
	}<pos:position pos:line="69" pos:column="10"/></block></for>

	<expr_stmt><expr><call><name pos:line="71" pos:column="9">end_progress<pos:position pos:line="71" pos:column="21"/></name><argument_list pos:line="71" pos:column="21">(<argument><expr><name pos:line="71" pos:column="22">total_size<pos:position pos:line="71" pos:column="32"/></name></expr></argument>)<pos:position pos:line="71" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="34"/></expr_stmt>

	<if pos:line="73" pos:column="9">if <condition pos:line="73" pos:column="12">(<expr><name pos:line="73" pos:column="13">fd<pos:position pos:line="73" pos:column="15"/></name> <operator pos:line="73" pos:column="16">!=<pos:position pos:line="73" pos:column="18"/></operator> <operator pos:line="73" pos:column="19">-<pos:position pos:line="73" pos:column="20"/></operator><literal type="number" pos:line="73" pos:column="20">1<pos:position pos:line="73" pos:column="21"/></literal> <operator pos:line="73" pos:column="22">&amp;&amp;<pos:position pos:line="73" pos:column="32"/></operator> <name pos:line="73" pos:column="25">offset<pos:position pos:line="73" pos:column="31"/></name> <operator pos:line="73" pos:column="32">&gt;<pos:position pos:line="73" pos:column="36"/></operator> <literal type="number" pos:line="73" pos:column="34">0<pos:position pos:line="73" pos:column="35"/></literal> <operator pos:line="73" pos:column="36">&amp;&amp;<pos:position pos:line="73" pos:column="46"/></operator> <call><name pos:line="73" pos:column="39">sparse_end<pos:position pos:line="73" pos:column="49"/></name><argument_list pos:line="73" pos:column="49">(<argument><expr><name pos:line="73" pos:column="50">fd<pos:position pos:line="73" pos:column="52"/></name></expr></argument>)<pos:position pos:line="73" pos:column="53"/></argument_list></call> <operator pos:line="73" pos:column="54">!=<pos:position pos:line="73" pos:column="56"/></operator> <literal type="number" pos:line="73" pos:column="57">0<pos:position pos:line="73" pos:column="58"/></literal></expr>)<pos:position pos:line="73" pos:column="59"/></condition><then pos:line="73" pos:column="59"> <block pos:line="73" pos:column="60">{
		<expr_stmt><expr><call><name pos:line="74" pos:column="17">rprintf<pos:position pos:line="74" pos:column="24"/></name><argument_list pos:line="74" pos:column="24">(<argument><expr><name pos:line="74" pos:column="25">FERROR<pos:position pos:line="74" pos:column="31"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="74" pos:column="32">"write failed on %s : %s\n"<pos:position pos:line="74" pos:column="59"/></literal></expr></argument>,
			<argument><expr><name pos:line="75" pos:column="25">fname<pos:position pos:line="75" pos:column="30"/></name></expr></argument>,<argument><expr><call><name pos:line="75" pos:column="31">strerror<pos:position pos:line="75" pos:column="39"/></name><argument_list pos:line="75" pos:column="39">(<argument><expr><name pos:line="75" pos:column="40">errno<pos:position pos:line="75" pos:column="45"/></name></expr></argument>)<pos:position pos:line="75" pos:column="46"/></argument_list></call></expr></argument>)<pos:position pos:line="75" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="48"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="76" pos:column="17">exit_cleanup<pos:position pos:line="76" pos:column="29"/></name><argument_list pos:line="76" pos:column="29">(<argument><expr><name pos:line="76" pos:column="30">RERR_FILEIO<pos:position pos:line="76" pos:column="41"/></name></expr></argument>)<pos:position pos:line="76" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="43"/></expr_stmt>
	}<pos:position pos:line="77" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="79" pos:column="9">sum_end<pos:position pos:line="79" pos:column="16"/></name><argument_list pos:line="79" pos:column="16">(<argument><expr><name pos:line="79" pos:column="17">file_sum1<pos:position pos:line="79" pos:column="26"/></name></expr></argument>)<pos:position pos:line="79" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="28"/></expr_stmt>

	<if pos:line="81" pos:column="9">if <condition pos:line="81" pos:column="12">(<expr><name pos:line="81" pos:column="13">remote_version<pos:position pos:line="81" pos:column="27"/></name> <operator pos:line="81" pos:column="28">&gt;=<pos:position pos:line="81" pos:column="33"/></operator> <literal type="number" pos:line="81" pos:column="31">14<pos:position pos:line="81" pos:column="33"/></literal></expr>)<pos:position pos:line="81" pos:column="34"/></condition><then pos:line="81" pos:column="34"> <block pos:line="81" pos:column="35">{
		<expr_stmt><expr><call><name pos:line="82" pos:column="17">read_buf<pos:position pos:line="82" pos:column="25"/></name><argument_list pos:line="82" pos:column="25">(<argument><expr><name pos:line="82" pos:column="26">f_in<pos:position pos:line="82" pos:column="30"/></name></expr></argument>,<argument><expr><name pos:line="82" pos:column="31">file_sum2<pos:position pos:line="82" pos:column="40"/></name></expr></argument>,<argument><expr><name pos:line="82" pos:column="41">MD4_SUM_LENGTH<pos:position pos:line="82" pos:column="55"/></name></expr></argument>)<pos:position pos:line="82" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="57"/></expr_stmt>
		<if pos:line="83" pos:column="17">if <condition pos:line="83" pos:column="20">(<expr><name pos:line="83" pos:column="21">verbose<pos:position pos:line="83" pos:column="28"/></name> <operator pos:line="83" pos:column="29">&gt;<pos:position pos:line="83" pos:column="33"/></operator> <literal type="number" pos:line="83" pos:column="31">2<pos:position pos:line="83" pos:column="32"/></literal></expr>)<pos:position pos:line="83" pos:column="33"/></condition><then pos:line="83" pos:column="33"> <block pos:line="83" pos:column="34">{
			<expr_stmt><expr><call><name pos:line="84" pos:column="25">rprintf<pos:position pos:line="84" pos:column="32"/></name><argument_list pos:line="84" pos:column="32">(<argument><expr><name pos:line="84" pos:column="33">FINFO<pos:position pos:line="84" pos:column="38"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="84" pos:column="39">"got file_sum\n"<pos:position pos:line="84" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="84" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="57"/></expr_stmt>
		}<pos:position pos:line="85" pos:column="18"/></block></then></if>
		<if pos:line="86" pos:column="17">if <condition pos:line="86" pos:column="20">(<expr><name pos:line="86" pos:column="21">fd<pos:position pos:line="86" pos:column="23"/></name> <operator pos:line="86" pos:column="24">!=<pos:position pos:line="86" pos:column="26"/></operator> <operator pos:line="86" pos:column="27">-<pos:position pos:line="86" pos:column="28"/></operator><literal type="number" pos:line="86" pos:column="28">1<pos:position pos:line="86" pos:column="29"/></literal> <operator pos:line="86" pos:column="30">&amp;&amp;<pos:position pos:line="86" pos:column="40"/></operator> 
		    <call><name pos:line="87" pos:column="21">memcmp<pos:position pos:line="87" pos:column="27"/></name><argument_list pos:line="87" pos:column="27">(<argument><expr><name pos:line="87" pos:column="28">file_sum1<pos:position pos:line="87" pos:column="37"/></name></expr></argument>,<argument><expr><name pos:line="87" pos:column="38">file_sum2<pos:position pos:line="87" pos:column="47"/></name></expr></argument>,<argument><expr><name pos:line="87" pos:column="48">MD4_SUM_LENGTH<pos:position pos:line="87" pos:column="62"/></name></expr></argument>)<pos:position pos:line="87" pos:column="63"/></argument_list></call> <operator pos:line="87" pos:column="64">!=<pos:position pos:line="87" pos:column="66"/></operator> <literal type="number" pos:line="87" pos:column="67">0<pos:position pos:line="87" pos:column="68"/></literal></expr>)<pos:position pos:line="87" pos:column="69"/></condition><then pos:line="87" pos:column="69"> <block pos:line="87" pos:column="70">{
			<return pos:line="88" pos:column="25">return <expr><literal type="number" pos:line="88" pos:column="32">0<pos:position pos:line="88" pos:column="33"/></literal></expr>;<pos:position pos:line="88" pos:column="34"/></return>
		}<pos:position pos:line="89" pos:column="18"/></block></then></if>
	}<pos:position pos:line="90" pos:column="10"/></block></then></if>
	<return pos:line="91" pos:column="9">return <expr><literal type="number" pos:line="91" pos:column="16">1<pos:position pos:line="91" pos:column="17"/></literal></expr>;<pos:position pos:line="91" pos:column="18"/></return>
}<pos:position pos:line="92" pos:column="2"/></block></function></unit>
