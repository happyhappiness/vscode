<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_108_rsync-2.6.0.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">char<pos:position pos:line="1" pos:column="5"/></name> <modifier pos:line="1" pos:column="6">*<pos:position pos:line="1" pos:column="7"/></modifier></type><name pos:line="1" pos:column="7">client_name<pos:position pos:line="1" pos:column="18"/></name><parameter_list pos:line="1" pos:column="18">(<parameter><decl><type><name pos:line="1" pos:column="19">int<pos:position pos:line="1" pos:column="22"/></name></type> <name pos:line="1" pos:column="23">fd<pos:position pos:line="1" pos:column="25"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="26"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><specifier pos:line="3" pos:column="9">static<pos:position pos:line="3" pos:column="15"/></specifier> <type><name pos:line="3" pos:column="16">char<pos:position pos:line="3" pos:column="20"/></name></type> <name><name pos:line="3" pos:column="21">name_buf<pos:position pos:line="3" pos:column="29"/></name><index pos:line="3" pos:column="29">[<expr><literal type="number" pos:line="3" pos:column="30">100<pos:position pos:line="3" pos:column="33"/></literal></expr>]<pos:position pos:line="3" pos:column="34"/></index></name></decl>;<pos:position pos:line="3" pos:column="35"/></decl_stmt>
	<decl_stmt><decl><specifier pos:line="4" pos:column="9">static<pos:position pos:line="4" pos:column="15"/></specifier> <type><name pos:line="4" pos:column="16">char<pos:position pos:line="4" pos:column="20"/></name></type> <name><name pos:line="4" pos:column="21">port_buf<pos:position pos:line="4" pos:column="29"/></name><index pos:line="4" pos:column="29">[<expr><literal type="number" pos:line="4" pos:column="30">100<pos:position pos:line="4" pos:column="33"/></literal></expr>]<pos:position pos:line="4" pos:column="34"/></index></name></decl>;<pos:position pos:line="4" pos:column="35"/></decl_stmt>
	<decl_stmt><decl><specifier pos:line="5" pos:column="9">static<pos:position pos:line="5" pos:column="15"/></specifier> <type><name pos:line="5" pos:column="16">int<pos:position pos:line="5" pos:column="19"/></name></type> <name pos:line="5" pos:column="20">initialised<pos:position pos:line="5" pos:column="31"/></name></decl>;<pos:position pos:line="5" pos:column="32"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">sockaddr_storage<pos:position pos:line="6" pos:column="32"/></name></name></type> <name pos:line="6" pos:column="33">ss<pos:position pos:line="6" pos:column="35"/></name></decl>, <modifier pos:line="6" pos:column="37">*<pos:position pos:line="6" pos:column="38"/></modifier><decl><type ref="prev"/><name pos:line="6" pos:column="38">ssp<pos:position pos:line="6" pos:column="41"/></name></decl>;<pos:position pos:line="6" pos:column="42"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="7" pos:column="9">struct<pos:position pos:line="7" pos:column="15"/></name> <name pos:line="7" pos:column="16">sockaddr_in<pos:position pos:line="7" pos:column="27"/></name></name></type> <name pos:line="7" pos:column="28">sin<pos:position pos:line="7" pos:column="31"/></name></decl>;<pos:position pos:line="7" pos:column="32"/></decl_stmt>
<cpp:ifdef pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">ifdef<pos:position pos:line="8" pos:column="7"/></cpp:directive> <name pos:line="8" pos:column="8">INET6<pos:position pos:line="8" pos:column="13"/></name></cpp:ifdef>
	<decl_stmt><decl><type><name><name pos:line="9" pos:column="9">struct<pos:position pos:line="9" pos:column="15"/></name> <name pos:line="9" pos:column="16">sockaddr_in6<pos:position pos:line="9" pos:column="28"/></name></name></type> <name pos:line="9" pos:column="29">sin6<pos:position pos:line="9" pos:column="33"/></name></decl>;<pos:position pos:line="9" pos:column="34"/></decl_stmt>
<cpp:endif pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">endif<pos:position pos:line="10" pos:column="7"/></cpp:directive></cpp:endif>
	<decl_stmt><decl><type><name pos:line="11" pos:column="9">socklen_t<pos:position pos:line="11" pos:column="18"/></name></type> <name pos:line="11" pos:column="19">ss_len<pos:position pos:line="11" pos:column="25"/></name></decl>;<pos:position pos:line="11" pos:column="26"/></decl_stmt>

	<if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><name pos:line="13" pos:column="13">initialised<pos:position pos:line="13" pos:column="24"/></name></expr>)<pos:position pos:line="13" pos:column="25"/></condition><then pos:line="13" pos:column="25"> <block type="pseudo"><return pos:line="13" pos:column="26">return <expr><name pos:line="13" pos:column="33">name_buf<pos:position pos:line="13" pos:column="41"/></name></expr>;<pos:position pos:line="13" pos:column="42"/></return></block></then></if>

	<expr_stmt><expr><call><name pos:line="15" pos:column="9">strcpy<pos:position pos:line="15" pos:column="15"/></name><argument_list pos:line="15" pos:column="15">(<argument><expr><name pos:line="15" pos:column="16">name_buf<pos:position pos:line="15" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="26">default_name<pos:position pos:line="15" pos:column="38"/></name></expr></argument>)<pos:position pos:line="15" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="40"/></expr_stmt>
	<expr_stmt><expr><name pos:line="16" pos:column="9">initialised<pos:position pos:line="16" pos:column="20"/></name> <operator pos:line="16" pos:column="21">=<pos:position pos:line="16" pos:column="22"/></operator> <literal type="number" pos:line="16" pos:column="23">1<pos:position pos:line="16" pos:column="24"/></literal></expr>;<pos:position pos:line="16" pos:column="25"/></expr_stmt>

	<if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><name pos:line="18" pos:column="13">am_server<pos:position pos:line="18" pos:column="22"/></name></expr>)<pos:position pos:line="18" pos:column="23"/></condition><then pos:line="18" pos:column="23"> <block pos:line="18" pos:column="24">{
		<comment type="block" pos:line="19" pos:column="17">/* daemon over --rsh mode */</comment>

		<decl_stmt><decl><type><name pos:line="21" pos:column="17">char<pos:position pos:line="21" pos:column="21"/></name> <modifier pos:line="21" pos:column="22">*<pos:position pos:line="21" pos:column="23"/></modifier></type><name pos:line="21" pos:column="23">addr<pos:position pos:line="21" pos:column="27"/></name> <init pos:line="21" pos:column="28">= <expr><call><name pos:line="21" pos:column="30">client_addr<pos:position pos:line="21" pos:column="41"/></name><argument_list pos:line="21" pos:column="41">(<argument><expr><name pos:line="21" pos:column="42">fd<pos:position pos:line="21" pos:column="44"/></name></expr></argument>)<pos:position pos:line="21" pos:column="45"/></argument_list></call></expr></init></decl>;<pos:position pos:line="21" pos:column="46"/></decl_stmt>
<cpp:ifdef pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">ifdef<pos:position pos:line="22" pos:column="7"/></cpp:directive> <name pos:line="22" pos:column="8">INET6<pos:position pos:line="22" pos:column="13"/></name></cpp:ifdef>
		<decl_stmt><decl><type><name pos:line="23" pos:column="17">int<pos:position pos:line="23" pos:column="20"/></name></type> <name pos:line="23" pos:column="21">dots<pos:position pos:line="23" pos:column="25"/></name> <init pos:line="23" pos:column="26">= <expr><literal type="number" pos:line="23" pos:column="28">0<pos:position pos:line="23" pos:column="29"/></literal></expr></init></decl>;<pos:position pos:line="23" pos:column="30"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="24" pos:column="17">char<pos:position pos:line="24" pos:column="21"/></name> <modifier pos:line="24" pos:column="22">*<pos:position pos:line="24" pos:column="23"/></modifier></type><name pos:line="24" pos:column="23">p<pos:position pos:line="24" pos:column="24"/></name></decl>;<pos:position pos:line="24" pos:column="25"/></decl_stmt>

		<for pos:line="26" pos:column="17">for <control pos:line="26" pos:column="21">(<init><expr><name pos:line="26" pos:column="22">p<pos:position pos:line="26" pos:column="23"/></name> <operator pos:line="26" pos:column="24">=<pos:position pos:line="26" pos:column="25"/></operator> <name pos:line="26" pos:column="26">addr<pos:position pos:line="26" pos:column="30"/></name></expr>;<pos:position pos:line="26" pos:column="31"/></init> <condition><expr><operator pos:line="26" pos:column="32">*<pos:position pos:line="26" pos:column="33"/></operator><name pos:line="26" pos:column="33">p<pos:position pos:line="26" pos:column="34"/></name> <operator pos:line="26" pos:column="35">&amp;&amp;<pos:position pos:line="26" pos:column="45"/></operator> <operator pos:line="26" pos:column="38">(<pos:position pos:line="26" pos:column="39"/></operator><name pos:line="26" pos:column="39">dots<pos:position pos:line="26" pos:column="43"/></name> <operator pos:line="26" pos:column="44">&lt;=<pos:position pos:line="26" pos:column="49"/></operator> <literal type="number" pos:line="26" pos:column="47">3<pos:position pos:line="26" pos:column="48"/></literal><operator pos:line="26" pos:column="48">)<pos:position pos:line="26" pos:column="49"/></operator></expr>;<pos:position pos:line="26" pos:column="50"/></condition> <incr><expr><name pos:line="26" pos:column="51">p<pos:position pos:line="26" pos:column="52"/></name><operator pos:line="26" pos:column="52">++<pos:position pos:line="26" pos:column="54"/></operator></expr></incr>)<pos:position pos:line="26" pos:column="55"/></control> <block pos:line="26" pos:column="56">{
		    <if pos:line="27" pos:column="21">if <condition pos:line="27" pos:column="24">(<expr><operator pos:line="27" pos:column="25">*<pos:position pos:line="27" pos:column="26"/></operator><name pos:line="27" pos:column="26">p<pos:position pos:line="27" pos:column="27"/></name> <operator pos:line="27" pos:column="28">==<pos:position pos:line="27" pos:column="30"/></operator> <literal type="char" pos:line="27" pos:column="31">'.'<pos:position pos:line="27" pos:column="34"/></literal></expr>)<pos:position pos:line="27" pos:column="35"/></condition><then pos:line="27" pos:column="35">
			<block type="pseudo"><expr_stmt><expr><name pos:line="28" pos:column="25">dots<pos:position pos:line="28" pos:column="29"/></name><operator pos:line="28" pos:column="29">++<pos:position pos:line="28" pos:column="31"/></operator></expr>;<pos:position pos:line="28" pos:column="32"/></expr_stmt></block></then></if>
		}<pos:position pos:line="29" pos:column="18"/></block></for>
		<if pos:line="30" pos:column="17">if <condition pos:line="30" pos:column="20">(<expr><name pos:line="30" pos:column="21">dots<pos:position pos:line="30" pos:column="25"/></name> <operator pos:line="30" pos:column="26">&gt;<pos:position pos:line="30" pos:column="30"/></operator> <literal type="number" pos:line="30" pos:column="28">3<pos:position pos:line="30" pos:column="29"/></literal></expr>)<pos:position pos:line="30" pos:column="30"/></condition><then pos:line="30" pos:column="30"> <block pos:line="30" pos:column="31">{
			<comment type="block" pos:line="31" pos:column="25">/* more than 4 parts to IP address, must be ipv6 */</comment>
			<expr_stmt><expr><name pos:line="32" pos:column="25">ssp<pos:position pos:line="32" pos:column="28"/></name> <operator pos:line="32" pos:column="29">=<pos:position pos:line="32" pos:column="30"/></operator> <operator pos:line="32" pos:column="31">(<pos:position pos:line="32" pos:column="32"/></operator>struct <name pos:line="32" pos:column="39">sockaddr_storage<pos:position pos:line="32" pos:column="55"/></name> <operator pos:line="32" pos:column="56">*<pos:position pos:line="32" pos:column="57"/></operator><operator pos:line="32" pos:column="57">)<pos:position pos:line="32" pos:column="58"/></operator> <operator pos:line="32" pos:column="59">&amp;<pos:position pos:line="32" pos:column="64"/></operator><name pos:line="32" pos:column="60">sin6<pos:position pos:line="32" pos:column="64"/></name></expr>;<pos:position pos:line="32" pos:column="65"/></expr_stmt>
			<expr_stmt><expr><name pos:line="33" pos:column="25">ss_len<pos:position pos:line="33" pos:column="31"/></name> <operator pos:line="33" pos:column="32">=<pos:position pos:line="33" pos:column="33"/></operator> <sizeof pos:line="33" pos:column="34">sizeof <name pos:line="33" pos:column="41">sin6<pos:position pos:line="33" pos:column="45"/></name></sizeof></expr>;<pos:position pos:line="33" pos:column="46"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="34" pos:column="25">memset<pos:position pos:line="34" pos:column="31"/></name><argument_list pos:line="34" pos:column="31">(<argument><expr><name pos:line="34" pos:column="32">ssp<pos:position pos:line="34" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="34" pos:column="37">0<pos:position pos:line="34" pos:column="38"/></literal></expr></argument>, <argument><expr><name pos:line="34" pos:column="40">ss_len<pos:position pos:line="34" pos:column="46"/></name></expr></argument>)<pos:position pos:line="34" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="48"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="35" pos:column="25">inet_pton<pos:position pos:line="35" pos:column="34"/></name><argument_list pos:line="35" pos:column="34">(<argument><expr><name pos:line="35" pos:column="35">AF_INET6<pos:position pos:line="35" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="45">addr<pos:position pos:line="35" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="35" pos:column="51">&amp;<pos:position pos:line="35" pos:column="56"/></operator><name><name pos:line="35" pos:column="52">sin6<pos:position pos:line="35" pos:column="56"/></name><operator pos:line="35" pos:column="56">.<pos:position pos:line="35" pos:column="57"/></operator><name pos:line="35" pos:column="57">sin6_addr<pos:position pos:line="35" pos:column="66"/></name></name></expr></argument>)<pos:position pos:line="35" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="68"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="36" pos:column="25">sin6<pos:position pos:line="36" pos:column="29"/></name><operator pos:line="36" pos:column="29">.<pos:position pos:line="36" pos:column="30"/></operator><name pos:line="36" pos:column="30">sin6_family<pos:position pos:line="36" pos:column="41"/></name></name> <operator pos:line="36" pos:column="42">=<pos:position pos:line="36" pos:column="43"/></operator> <name pos:line="36" pos:column="44">AF_INET6<pos:position pos:line="36" pos:column="52"/></name></expr>;<pos:position pos:line="36" pos:column="53"/></expr_stmt>
		}<pos:position pos:line="37" pos:column="18"/></block></then> <else pos:line="37" pos:column="19">else
<cpp:endif pos:line="38" pos:column="1">#<cpp:directive pos:line="38" pos:column="2">endif<pos:position pos:line="38" pos:column="7"/></cpp:directive></cpp:endif>
		<block pos:line="39" pos:column="17">{
			<expr_stmt><expr><name pos:line="40" pos:column="25">ssp<pos:position pos:line="40" pos:column="28"/></name> <operator pos:line="40" pos:column="29">=<pos:position pos:line="40" pos:column="30"/></operator> <operator pos:line="40" pos:column="31">(<pos:position pos:line="40" pos:column="32"/></operator>struct <name pos:line="40" pos:column="39">sockaddr_storage<pos:position pos:line="40" pos:column="55"/></name> <operator pos:line="40" pos:column="56">*<pos:position pos:line="40" pos:column="57"/></operator><operator pos:line="40" pos:column="57">)<pos:position pos:line="40" pos:column="58"/></operator> <operator pos:line="40" pos:column="59">&amp;<pos:position pos:line="40" pos:column="64"/></operator><name pos:line="40" pos:column="60">sin<pos:position pos:line="40" pos:column="63"/></name></expr>;<pos:position pos:line="40" pos:column="64"/></expr_stmt>
			<expr_stmt><expr><name pos:line="41" pos:column="25">ss_len<pos:position pos:line="41" pos:column="31"/></name> <operator pos:line="41" pos:column="32">=<pos:position pos:line="41" pos:column="33"/></operator> <sizeof pos:line="41" pos:column="34">sizeof <name pos:line="41" pos:column="41">sin<pos:position pos:line="41" pos:column="44"/></name></sizeof></expr>;<pos:position pos:line="41" pos:column="45"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="42" pos:column="25">memset<pos:position pos:line="42" pos:column="31"/></name><argument_list pos:line="42" pos:column="31">(<argument><expr><name pos:line="42" pos:column="32">ssp<pos:position pos:line="42" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="42" pos:column="37">0<pos:position pos:line="42" pos:column="38"/></literal></expr></argument>, <argument><expr><name pos:line="42" pos:column="40">ss_len<pos:position pos:line="42" pos:column="46"/></name></expr></argument>)<pos:position pos:line="42" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="48"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="43" pos:column="25">inet_pton<pos:position pos:line="43" pos:column="34"/></name><argument_list pos:line="43" pos:column="34">(<argument><expr><name pos:line="43" pos:column="35">AF_INET<pos:position pos:line="43" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="44">addr<pos:position pos:line="43" pos:column="48"/></name></expr></argument>, <argument><expr><operator pos:line="43" pos:column="50">&amp;<pos:position pos:line="43" pos:column="55"/></operator><name><name pos:line="43" pos:column="51">sin<pos:position pos:line="43" pos:column="54"/></name><operator pos:line="43" pos:column="54">.<pos:position pos:line="43" pos:column="55"/></operator><name pos:line="43" pos:column="55">sin_addr<pos:position pos:line="43" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="43" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="65"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="44" pos:column="25">sin<pos:position pos:line="44" pos:column="28"/></name><operator pos:line="44" pos:column="28">.<pos:position pos:line="44" pos:column="29"/></operator><name pos:line="44" pos:column="29">sin_family<pos:position pos:line="44" pos:column="39"/></name></name> <operator pos:line="44" pos:column="40">=<pos:position pos:line="44" pos:column="41"/></operator> <name pos:line="44" pos:column="42">AF_INET<pos:position pos:line="44" pos:column="49"/></name></expr>;<pos:position pos:line="44" pos:column="50"/></expr_stmt>
		}<pos:position pos:line="45" pos:column="18"/></block></else></if>

	}<pos:position pos:line="47" pos:column="10"/></block></then> <else pos:line="47" pos:column="11">else <block pos:line="47" pos:column="16">{
		<expr_stmt><expr><name pos:line="48" pos:column="17">ss_len<pos:position pos:line="48" pos:column="23"/></name> <operator pos:line="48" pos:column="24">=<pos:position pos:line="48" pos:column="25"/></operator> <sizeof pos:line="48" pos:column="26">sizeof <name pos:line="48" pos:column="33">ss<pos:position pos:line="48" pos:column="35"/></name></sizeof></expr>;<pos:position pos:line="48" pos:column="36"/></expr_stmt>
		<expr_stmt><expr><name pos:line="49" pos:column="17">ssp<pos:position pos:line="49" pos:column="20"/></name> <operator pos:line="49" pos:column="21">=<pos:position pos:line="49" pos:column="22"/></operator> <operator pos:line="49" pos:column="23">&amp;<pos:position pos:line="49" pos:column="28"/></operator><name pos:line="49" pos:column="24">ss<pos:position pos:line="49" pos:column="26"/></name></expr>;<pos:position pos:line="49" pos:column="27"/></expr_stmt>

		<expr_stmt><expr><call><name pos:line="51" pos:column="17">client_sockaddr<pos:position pos:line="51" pos:column="32"/></name><argument_list pos:line="51" pos:column="32">(<argument><expr><name pos:line="51" pos:column="33">fd<pos:position pos:line="51" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="51" pos:column="37">&amp;<pos:position pos:line="51" pos:column="42"/></operator><name pos:line="51" pos:column="38">ss<pos:position pos:line="51" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="51" pos:column="42">&amp;<pos:position pos:line="51" pos:column="47"/></operator><name pos:line="51" pos:column="43">ss_len<pos:position pos:line="51" pos:column="49"/></name></expr></argument>)<pos:position pos:line="51" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="51"/></expr_stmt>

	}<pos:position pos:line="53" pos:column="10"/></block></else></if>

	<if pos:line="55" pos:column="9">if <condition pos:line="55" pos:column="12">(<expr><operator pos:line="55" pos:column="13">!<pos:position pos:line="55" pos:column="14"/></operator><call><name pos:line="55" pos:column="14">lookup_name<pos:position pos:line="55" pos:column="25"/></name><argument_list pos:line="55" pos:column="25">(<argument><expr><name pos:line="55" pos:column="26">fd<pos:position pos:line="55" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="30">ssp<pos:position pos:line="55" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="35">ss_len<pos:position pos:line="55" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="43">name_buf<pos:position pos:line="55" pos:column="51"/></name></expr></argument>, <argument><expr><sizeof pos:line="55" pos:column="53">sizeof <name pos:line="55" pos:column="60">name_buf<pos:position pos:line="55" pos:column="68"/></name></sizeof></expr></argument>, 
			<argument><expr><name pos:line="56" pos:column="25">port_buf<pos:position pos:line="56" pos:column="33"/></name></expr></argument>, <argument><expr><sizeof pos:line="56" pos:column="35">sizeof <name pos:line="56" pos:column="42">port_buf<pos:position pos:line="56" pos:column="50"/></name></sizeof></expr></argument>)<pos:position pos:line="56" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="56" pos:column="52"/></condition><then pos:line="56" pos:column="52">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="57" pos:column="17">check_name<pos:position pos:line="57" pos:column="27"/></name><argument_list pos:line="57" pos:column="27">(<argument><expr><name pos:line="57" pos:column="28">fd<pos:position pos:line="57" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="32">ssp<pos:position pos:line="57" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="37">name_buf<pos:position pos:line="57" pos:column="45"/></name></expr></argument>)<pos:position pos:line="57" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="47"/></expr_stmt></block></then></if>

	<return pos:line="59" pos:column="9">return <expr><name pos:line="59" pos:column="16">name_buf<pos:position pos:line="59" pos:column="24"/></name></expr>;<pos:position pos:line="59" pos:column="25"/></return>
}<pos:position pos:line="60" pos:column="2"/></block></function></unit>
