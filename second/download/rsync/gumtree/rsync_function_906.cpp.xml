<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_function_906.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">start_inband_exchange<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><name pos:line="1" pos:column="27">int<pos:position pos:line="1" pos:column="30"/></name></type> <name pos:line="1" pos:column="31">f_in<pos:position pos:line="1" pos:column="35"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="37">int<pos:position pos:line="1" pos:column="40"/></name></type> <name pos:line="1" pos:column="41">f_out<pos:position pos:line="1" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="48">const<pos:position pos:line="1" pos:column="53"/></specifier> <name pos:line="1" pos:column="54">char<pos:position pos:line="1" pos:column="58"/></name> <modifier pos:line="1" pos:column="59">*<pos:position pos:line="1" pos:column="60"/></modifier></type><name pos:line="1" pos:column="60">user<pos:position pos:line="1" pos:column="64"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="66">int<pos:position pos:line="1" pos:column="69"/></name></type> <name pos:line="1" pos:column="70">argc<pos:position pos:line="1" pos:column="74"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="76">char<pos:position pos:line="1" pos:column="80"/></name> <modifier pos:line="1" pos:column="81">*<pos:position pos:line="1" pos:column="82"/></modifier></type><name><name pos:line="1" pos:column="82">argv<pos:position pos:line="1" pos:column="86"/></name><index pos:line="1" pos:column="86">[]<pos:position pos:line="1" pos:column="88"/></index></name></decl></parameter>)<pos:position pos:line="1" pos:column="89"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">i<pos:position pos:line="3" pos:column="14"/></name></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="16">modlen<pos:position pos:line="3" pos:column="22"/></name></decl>;<pos:position pos:line="3" pos:column="23"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name></type> <name><name pos:line="4" pos:column="14">line<pos:position pos:line="4" pos:column="18"/></name><index pos:line="4" pos:column="18">[<expr><name pos:line="4" pos:column="19">BIGPATHBUFLEN<pos:position pos:line="4" pos:column="32"/></name></expr>]<pos:position pos:line="4" pos:column="33"/></index></name></decl>;<pos:position pos:line="4" pos:column="34"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">char<pos:position pos:line="5" pos:column="13"/></name> <modifier pos:line="5" pos:column="14">*<pos:position pos:line="5" pos:column="15"/></modifier></type><name><name pos:line="5" pos:column="15">sargs<pos:position pos:line="5" pos:column="20"/></name><index pos:line="5" pos:column="20">[<expr><name pos:line="5" pos:column="21">MAX_ARGS<pos:position pos:line="5" pos:column="29"/></name></expr>]<pos:position pos:line="5" pos:column="30"/></index></name></decl>;<pos:position pos:line="5" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">sargc<pos:position pos:line="6" pos:column="18"/></name> <init pos:line="6" pos:column="19">= <expr><literal type="number" pos:line="6" pos:column="21">0<pos:position pos:line="6" pos:column="22"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="23"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">char<pos:position pos:line="7" pos:column="13"/></name> <modifier pos:line="7" pos:column="14">*<pos:position pos:line="7" pos:column="15"/></modifier></type><name pos:line="7" pos:column="15">p<pos:position pos:line="7" pos:column="16"/></name></decl>, <modifier pos:line="7" pos:column="18">*<pos:position pos:line="7" pos:column="19"/></modifier><decl><type ref="prev"/><name pos:line="7" pos:column="19">modname<pos:position pos:line="7" pos:column="26"/></name></decl>;<pos:position pos:line="7" pos:column="27"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="9" pos:column="9">assert<pos:position pos:line="9" pos:column="15"/></name><argument_list pos:line="9" pos:column="15">(<argument><expr><name pos:line="9" pos:column="16">argc<pos:position pos:line="9" pos:column="20"/></name> <operator pos:line="9" pos:column="21">&gt;<pos:position pos:line="9" pos:column="25"/></operator> <literal type="number" pos:line="9" pos:column="23">0<pos:position pos:line="9" pos:column="24"/></literal> <operator pos:line="9" pos:column="25">&amp;&amp;<pos:position pos:line="9" pos:column="35"/></operator> <operator pos:line="9" pos:column="28">*<pos:position pos:line="9" pos:column="29"/></operator><name pos:line="9" pos:column="29">argv<pos:position pos:line="9" pos:column="33"/></name> <operator pos:line="9" pos:column="34">!=<pos:position pos:line="9" pos:column="36"/></operator> <name pos:line="9" pos:column="37">NULL<pos:position pos:line="9" pos:column="41"/></name></expr></argument>)<pos:position pos:line="9" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="43"/></expr_stmt>

	<if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><operator pos:line="11" pos:column="13">*<pos:position pos:line="11" pos:column="14"/></operator><operator pos:line="11" pos:column="14">*<pos:position pos:line="11" pos:column="15"/></operator><name pos:line="11" pos:column="15">argv<pos:position pos:line="11" pos:column="19"/></name> <operator pos:line="11" pos:column="20">==<pos:position pos:line="11" pos:column="22"/></operator> <literal type="char" pos:line="11" pos:column="23">'/'<pos:position pos:line="11" pos:column="26"/></literal></expr>)<pos:position pos:line="11" pos:column="27"/></condition><then pos:line="11" pos:column="27"> <block pos:line="11" pos:column="28">{
		<expr_stmt><expr><call><name pos:line="12" pos:column="17">rprintf<pos:position pos:line="12" pos:column="24"/></name><argument_list pos:line="12" pos:column="24">(<argument><expr><name pos:line="12" pos:column="25">FERROR<pos:position pos:line="12" pos:column="31"/></name></expr></argument>,
			<argument><expr><literal type="string" pos:line="13" pos:column="25">"ERROR: The remote path must start with a module name\n"<pos:position pos:line="13" pos:column="81"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="83"/></expr_stmt>
		<return pos:line="14" pos:column="17">return <expr><operator pos:line="14" pos:column="24">-<pos:position pos:line="14" pos:column="25"/></operator><literal type="number" pos:line="14" pos:column="25">1<pos:position pos:line="14" pos:column="26"/></literal></expr>;<pos:position pos:line="14" pos:column="27"/></return>
	}<pos:position pos:line="15" pos:column="10"/></block></then></if>

	<if pos:line="17" pos:column="9">if <condition pos:line="17" pos:column="12">(<expr><operator pos:line="17" pos:column="13">!<pos:position pos:line="17" pos:column="14"/></operator><operator pos:line="17" pos:column="14">(<pos:position pos:line="17" pos:column="15"/></operator><name pos:line="17" pos:column="15">p<pos:position pos:line="17" pos:column="16"/></name> <operator pos:line="17" pos:column="17">=<pos:position pos:line="17" pos:column="18"/></operator> <call><name pos:line="17" pos:column="19">strchr<pos:position pos:line="17" pos:column="25"/></name><argument_list pos:line="17" pos:column="25">(<argument><expr><operator pos:line="17" pos:column="26">*<pos:position pos:line="17" pos:column="27"/></operator><name pos:line="17" pos:column="27">argv<pos:position pos:line="17" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="17" pos:column="33">'/'<pos:position pos:line="17" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="37"/></argument_list></call><operator pos:line="17" pos:column="37">)<pos:position pos:line="17" pos:column="38"/></operator></expr>)<pos:position pos:line="17" pos:column="39"/></condition><then pos:line="17" pos:column="39">
		<block type="pseudo"><expr_stmt><expr><name pos:line="18" pos:column="17">modlen<pos:position pos:line="18" pos:column="23"/></name> <operator pos:line="18" pos:column="24">=<pos:position pos:line="18" pos:column="25"/></operator> <call><name pos:line="18" pos:column="26">strlen<pos:position pos:line="18" pos:column="32"/></name><argument_list pos:line="18" pos:column="32">(<argument><expr><operator pos:line="18" pos:column="33">*<pos:position pos:line="18" pos:column="34"/></operator><name pos:line="18" pos:column="34">argv<pos:position pos:line="18" pos:column="38"/></name></expr></argument>)<pos:position pos:line="18" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="40"/></expr_stmt></block></then>
	<else pos:line="19" pos:column="9">else
		<block type="pseudo"><expr_stmt><expr><name pos:line="20" pos:column="17">modlen<pos:position pos:line="20" pos:column="23"/></name> <operator pos:line="20" pos:column="24">=<pos:position pos:line="20" pos:column="25"/></operator> <name pos:line="20" pos:column="26">p<pos:position pos:line="20" pos:column="27"/></name> <operator pos:line="20" pos:column="28">-<pos:position pos:line="20" pos:column="29"/></operator> <operator pos:line="20" pos:column="30">*<pos:position pos:line="20" pos:column="31"/></operator><name pos:line="20" pos:column="31">argv<pos:position pos:line="20" pos:column="35"/></name></expr>;<pos:position pos:line="20" pos:column="36"/></expr_stmt></block></else></if>

	<if pos:line="22" pos:column="9">if <condition pos:line="22" pos:column="12">(<expr><operator pos:line="22" pos:column="13">!<pos:position pos:line="22" pos:column="14"/></operator><operator pos:line="22" pos:column="14">(<pos:position pos:line="22" pos:column="15"/></operator><name pos:line="22" pos:column="15">modname<pos:position pos:line="22" pos:column="22"/></name> <operator pos:line="22" pos:column="23">=<pos:position pos:line="22" pos:column="24"/></operator> <call><name pos:line="22" pos:column="25">new_array<pos:position pos:line="22" pos:column="34"/></name><argument_list pos:line="22" pos:column="34">(<argument><expr><name pos:line="22" pos:column="35">char<pos:position pos:line="22" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="41">modlen<pos:position pos:line="22" pos:column="47"/></name><operator pos:line="22" pos:column="47">+<pos:position pos:line="22" pos:column="48"/></operator><literal type="number" pos:line="22" pos:column="48">1<pos:position pos:line="22" pos:column="49"/></literal><operator pos:line="22" pos:column="49">+<pos:position pos:line="22" pos:column="50"/></operator><literal type="number" pos:line="22" pos:column="50">1<pos:position pos:line="22" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="52"/></argument_list></call><operator pos:line="22" pos:column="52">)<pos:position pos:line="22" pos:column="53"/></operator></expr>)<pos:position pos:line="22" pos:column="54"/></condition><then pos:line="22" pos:column="54"> <comment type="block" pos:line="22" pos:column="55">/* room for '/' &amp; '\0' */</comment>
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="23" pos:column="17">out_of_memory<pos:position pos:line="23" pos:column="30"/></name><argument_list pos:line="23" pos:column="30">(<argument><expr><literal type="string" pos:line="23" pos:column="31">"start_inband_exchange"<pos:position pos:line="23" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="56"/></expr_stmt></block></then></if>
	<expr_stmt><expr><call><name pos:line="24" pos:column="9">strlcpy<pos:position pos:line="24" pos:column="16"/></name><argument_list pos:line="24" pos:column="16">(<argument><expr><name pos:line="24" pos:column="17">modname<pos:position pos:line="24" pos:column="24"/></name></expr></argument>, <argument><expr><operator pos:line="24" pos:column="26">*<pos:position pos:line="24" pos:column="27"/></operator><name pos:line="24" pos:column="27">argv<pos:position pos:line="24" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="33">modlen<pos:position pos:line="24" pos:column="39"/></name> <operator pos:line="24" pos:column="40">+<pos:position pos:line="24" pos:column="41"/></operator> <literal type="number" pos:line="24" pos:column="42">1<pos:position pos:line="24" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="45"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="25" pos:column="9">modname<pos:position pos:line="25" pos:column="16"/></name><index pos:line="25" pos:column="16">[<expr><name pos:line="25" pos:column="17">modlen<pos:position pos:line="25" pos:column="23"/></name></expr>]<pos:position pos:line="25" pos:column="24"/></index></name> <operator pos:line="25" pos:column="25">=<pos:position pos:line="25" pos:column="26"/></operator> <literal type="char" pos:line="25" pos:column="27">'/'<pos:position pos:line="25" pos:column="30"/></literal></expr>;<pos:position pos:line="25" pos:column="31"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="26" pos:column="9">modname<pos:position pos:line="26" pos:column="16"/></name><index pos:line="26" pos:column="16">[<expr><name pos:line="26" pos:column="17">modlen<pos:position pos:line="26" pos:column="23"/></name><operator pos:line="26" pos:column="23">+<pos:position pos:line="26" pos:column="24"/></operator><literal type="number" pos:line="26" pos:column="24">1<pos:position pos:line="26" pos:column="25"/></literal></expr>]<pos:position pos:line="26" pos:column="26"/></index></name> <operator pos:line="26" pos:column="27">=<pos:position pos:line="26" pos:column="28"/></operator> <literal type="char" pos:line="26" pos:column="29">'\0'<pos:position pos:line="26" pos:column="33"/></literal></expr>;<pos:position pos:line="26" pos:column="34"/></expr_stmt>

	<if pos:line="28" pos:column="9">if <condition pos:line="28" pos:column="12">(<expr><operator pos:line="28" pos:column="13">!<pos:position pos:line="28" pos:column="14"/></operator><name pos:line="28" pos:column="14">user<pos:position pos:line="28" pos:column="18"/></name></expr>)<pos:position pos:line="28" pos:column="19"/></condition><then pos:line="28" pos:column="19">
		<block type="pseudo"><expr_stmt><expr><name pos:line="29" pos:column="17">user<pos:position pos:line="29" pos:column="21"/></name> <operator pos:line="29" pos:column="22">=<pos:position pos:line="29" pos:column="23"/></operator> <call><name pos:line="29" pos:column="24">getenv<pos:position pos:line="29" pos:column="30"/></name><argument_list pos:line="29" pos:column="30">(<argument><expr><literal type="string" pos:line="29" pos:column="31">"USER"<pos:position pos:line="29" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="39"/></expr_stmt></block></then></if>
	<if pos:line="30" pos:column="9">if <condition pos:line="30" pos:column="12">(<expr><operator pos:line="30" pos:column="13">!<pos:position pos:line="30" pos:column="14"/></operator><name pos:line="30" pos:column="14">user<pos:position pos:line="30" pos:column="18"/></name></expr>)<pos:position pos:line="30" pos:column="19"/></condition><then pos:line="30" pos:column="19">
		<block type="pseudo"><expr_stmt><expr><name pos:line="31" pos:column="17">user<pos:position pos:line="31" pos:column="21"/></name> <operator pos:line="31" pos:column="22">=<pos:position pos:line="31" pos:column="23"/></operator> <call><name pos:line="31" pos:column="24">getenv<pos:position pos:line="31" pos:column="30"/></name><argument_list pos:line="31" pos:column="30">(<argument><expr><literal type="string" pos:line="31" pos:column="31">"LOGNAME"<pos:position pos:line="31" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="42"/></expr_stmt></block></then></if>

	<if pos:line="33" pos:column="9">if <condition pos:line="33" pos:column="12">(<expr><call><name pos:line="33" pos:column="13">exchange_protocols<pos:position pos:line="33" pos:column="31"/></name><argument_list pos:line="33" pos:column="31">(<argument><expr><name pos:line="33" pos:column="32">f_in<pos:position pos:line="33" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="38">f_out<pos:position pos:line="33" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="45">line<pos:position pos:line="33" pos:column="49"/></name></expr></argument>, <argument><expr><sizeof pos:line="33" pos:column="51">sizeof <name pos:line="33" pos:column="58">line<pos:position pos:line="33" pos:column="62"/></name></sizeof></expr></argument>, <argument><expr><literal type="number" pos:line="33" pos:column="64">1<pos:position pos:line="33" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="66"/></argument_list></call> <operator pos:line="33" pos:column="67">&lt;<pos:position pos:line="33" pos:column="71"/></operator> <literal type="number" pos:line="33" pos:column="69">0<pos:position pos:line="33" pos:column="70"/></literal></expr>)<pos:position pos:line="33" pos:column="71"/></condition><then pos:line="33" pos:column="71">
		<block type="pseudo"><return pos:line="34" pos:column="17">return <expr><operator pos:line="34" pos:column="24">-<pos:position pos:line="34" pos:column="25"/></operator><literal type="number" pos:line="34" pos:column="25">1<pos:position pos:line="34" pos:column="26"/></literal></expr>;<pos:position pos:line="34" pos:column="27"/></return></block></then></if>

	<comment type="block" pos:line="36" pos:column="9">/* set daemon_over_rsh to false since we need to build the
	 * true set of args passed through the rsh/ssh connection;
	 * this is a no-op for direct-socket-connection mode */</comment>
	<expr_stmt><expr><name pos:line="39" pos:column="9">daemon_over_rsh<pos:position pos:line="39" pos:column="24"/></name> <operator pos:line="39" pos:column="25">=<pos:position pos:line="39" pos:column="26"/></operator> <literal type="number" pos:line="39" pos:column="27">0<pos:position pos:line="39" pos:column="28"/></literal></expr>;<pos:position pos:line="39" pos:column="29"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="40" pos:column="9">server_options<pos:position pos:line="40" pos:column="23"/></name><argument_list pos:line="40" pos:column="23">(<argument><expr><name pos:line="40" pos:column="24">sargs<pos:position pos:line="40" pos:column="29"/></name></expr></argument>, <argument><expr><operator pos:line="40" pos:column="31">&amp;<pos:position pos:line="40" pos:column="36"/></operator><name pos:line="40" pos:column="32">sargc<pos:position pos:line="40" pos:column="37"/></name></expr></argument>)<pos:position pos:line="40" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="39"/></expr_stmt>

	<if pos:line="42" pos:column="9">if <condition pos:line="42" pos:column="12">(<expr><name pos:line="42" pos:column="13">sargc<pos:position pos:line="42" pos:column="18"/></name> <operator pos:line="42" pos:column="19">&gt;=<pos:position pos:line="42" pos:column="24"/></operator> <name pos:line="42" pos:column="22">MAX_ARGS<pos:position pos:line="42" pos:column="30"/></name> <operator pos:line="42" pos:column="31">-<pos:position pos:line="42" pos:column="32"/></operator> <literal type="number" pos:line="42" pos:column="33">2<pos:position pos:line="42" pos:column="34"/></literal></expr>)<pos:position pos:line="42" pos:column="35"/></condition><then pos:line="42" pos:column="35">
		<block type="pseudo"><goto pos:line="43" pos:column="17">goto <name pos:line="43" pos:column="22">arg_overflow<pos:position pos:line="43" pos:column="34"/></name>;<pos:position pos:line="43" pos:column="35"/></goto></block></then></if>

	<expr_stmt><expr><name><name pos:line="45" pos:column="9">sargs<pos:position pos:line="45" pos:column="14"/></name><index pos:line="45" pos:column="14">[<expr><name pos:line="45" pos:column="15">sargc<pos:position pos:line="45" pos:column="20"/></name><operator pos:line="45" pos:column="20">++<pos:position pos:line="45" pos:column="22"/></operator></expr>]<pos:position pos:line="45" pos:column="23"/></index></name> <operator pos:line="45" pos:column="24">=<pos:position pos:line="45" pos:column="25"/></operator> <literal type="string" pos:line="45" pos:column="26">"."<pos:position pos:line="45" pos:column="29"/></literal></expr>;<pos:position pos:line="45" pos:column="30"/></expr_stmt>

	<while pos:line="47" pos:column="9">while <condition pos:line="47" pos:column="15">(<expr><name pos:line="47" pos:column="16">argc<pos:position pos:line="47" pos:column="20"/></name> <operator pos:line="47" pos:column="21">&gt;<pos:position pos:line="47" pos:column="25"/></operator> <literal type="number" pos:line="47" pos:column="23">0<pos:position pos:line="47" pos:column="24"/></literal></expr>)<pos:position pos:line="47" pos:column="25"/></condition> <block pos:line="47" pos:column="26">{
		<if pos:line="48" pos:column="17">if <condition pos:line="48" pos:column="20">(<expr><name pos:line="48" pos:column="21">sargc<pos:position pos:line="48" pos:column="26"/></name> <operator pos:line="48" pos:column="27">&gt;=<pos:position pos:line="48" pos:column="32"/></operator> <name pos:line="48" pos:column="30">MAX_ARGS<pos:position pos:line="48" pos:column="38"/></name> <operator pos:line="48" pos:column="39">-<pos:position pos:line="48" pos:column="40"/></operator> <literal type="number" pos:line="48" pos:column="41">1<pos:position pos:line="48" pos:column="42"/></literal></expr>)<pos:position pos:line="48" pos:column="43"/></condition><then pos:line="48" pos:column="43"> <block pos:line="48" pos:column="44">{
		  <label><name pos:line="49" pos:column="19">arg_overflow<pos:position pos:line="49" pos:column="31"/></name>:<pos:position pos:line="49" pos:column="32"/></label>
			<expr_stmt><expr><call><name pos:line="50" pos:column="25">rprintf<pos:position pos:line="50" pos:column="32"/></name><argument_list pos:line="50" pos:column="32">(<argument><expr><name pos:line="50" pos:column="33">FERROR<pos:position pos:line="50" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="50" pos:column="41">"internal: args[] overflowed in do_cmd()\n"<pos:position pos:line="50" pos:column="84"/></literal></expr></argument>)<pos:position pos:line="50" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="86"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="51" pos:column="25">exit_cleanup<pos:position pos:line="51" pos:column="37"/></name><argument_list pos:line="51" pos:column="37">(<argument><expr><name pos:line="51" pos:column="38">RERR_SYNTAX<pos:position pos:line="51" pos:column="49"/></name></expr></argument>)<pos:position pos:line="51" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="51"/></expr_stmt>
		}<pos:position pos:line="52" pos:column="18"/></block></then></if>
		<if pos:line="53" pos:column="17">if <condition pos:line="53" pos:column="20">(<expr><call><name pos:line="53" pos:column="21">strncmp<pos:position pos:line="53" pos:column="28"/></name><argument_list pos:line="53" pos:column="28">(<argument><expr><operator pos:line="53" pos:column="29">*<pos:position pos:line="53" pos:column="30"/></operator><name pos:line="53" pos:column="30">argv<pos:position pos:line="53" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="36">modname<pos:position pos:line="53" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="45">modlen<pos:position pos:line="53" pos:column="51"/></name></expr></argument>)<pos:position pos:line="53" pos:column="52"/></argument_list></call> <operator pos:line="53" pos:column="53">==<pos:position pos:line="53" pos:column="55"/></operator> <literal type="number" pos:line="53" pos:column="56">0<pos:position pos:line="53" pos:column="57"/></literal>
		 <operator pos:line="54" pos:column="18">&amp;&amp;<pos:position pos:line="54" pos:column="28"/></operator> <name><name pos:line="54" pos:column="21">argv<pos:position pos:line="54" pos:column="25"/></name><index pos:line="54" pos:column="25">[<expr><literal type="number" pos:line="54" pos:column="26">0<pos:position pos:line="54" pos:column="27"/></literal></expr>]<pos:position pos:line="54" pos:column="28"/></index><index pos:line="54" pos:column="28">[<expr><name pos:line="54" pos:column="29">modlen<pos:position pos:line="54" pos:column="35"/></name></expr>]<pos:position pos:line="54" pos:column="36"/></index></name> <operator pos:line="54" pos:column="37">==<pos:position pos:line="54" pos:column="39"/></operator> <literal type="char" pos:line="54" pos:column="40">'\0'<pos:position pos:line="54" pos:column="44"/></literal></expr>)<pos:position pos:line="54" pos:column="45"/></condition><then pos:line="54" pos:column="45">
			<block type="pseudo"><expr_stmt><expr><name><name pos:line="55" pos:column="25">sargs<pos:position pos:line="55" pos:column="30"/></name><index pos:line="55" pos:column="30">[<expr><name pos:line="55" pos:column="31">sargc<pos:position pos:line="55" pos:column="36"/></name><operator pos:line="55" pos:column="36">++<pos:position pos:line="55" pos:column="38"/></operator></expr>]<pos:position pos:line="55" pos:column="39"/></index></name> <operator pos:line="55" pos:column="40">=<pos:position pos:line="55" pos:column="41"/></operator> <name pos:line="55" pos:column="42">modname<pos:position pos:line="55" pos:column="49"/></name></expr>;<pos:position pos:line="55" pos:column="50"/></expr_stmt></block></then> <comment type="block" pos:line="55" pos:column="51">/* we send "modname/" */</comment>
		<elseif pos:line="56" pos:column="17">else <if pos:line="56" pos:column="22">if <condition pos:line="56" pos:column="25">(<expr><operator pos:line="56" pos:column="26">*<pos:position pos:line="56" pos:column="27"/></operator><operator pos:line="56" pos:column="27">*<pos:position pos:line="56" pos:column="28"/></operator><name pos:line="56" pos:column="28">argv<pos:position pos:line="56" pos:column="32"/></name> <operator pos:line="56" pos:column="33">==<pos:position pos:line="56" pos:column="35"/></operator> <literal type="char" pos:line="56" pos:column="36">'-'<pos:position pos:line="56" pos:column="39"/></literal></expr>)<pos:position pos:line="56" pos:column="40"/></condition><then pos:line="56" pos:column="40"> <block pos:line="56" pos:column="41">{
			<if pos:line="57" pos:column="25">if <condition pos:line="57" pos:column="28">(<expr><call><name pos:line="57" pos:column="29">asprintf<pos:position pos:line="57" pos:column="37"/></name><argument_list pos:line="57" pos:column="37">(<argument><expr><name pos:line="57" pos:column="38">sargs<pos:position pos:line="57" pos:column="43"/></name> <operator pos:line="57" pos:column="44">+<pos:position pos:line="57" pos:column="45"/></operator> <name pos:line="57" pos:column="46">sargc<pos:position pos:line="57" pos:column="51"/></name><operator pos:line="57" pos:column="51">++<pos:position pos:line="57" pos:column="53"/></operator></expr></argument>, <argument><expr><literal type="string" pos:line="57" pos:column="55">"./%s"<pos:position pos:line="57" pos:column="61"/></literal></expr></argument>, <argument><expr><operator pos:line="57" pos:column="63">*<pos:position pos:line="57" pos:column="64"/></operator><name pos:line="57" pos:column="64">argv<pos:position pos:line="57" pos:column="68"/></name></expr></argument>)<pos:position pos:line="57" pos:column="69"/></argument_list></call> <operator pos:line="57" pos:column="70">&lt;<pos:position pos:line="57" pos:column="74"/></operator> <literal type="number" pos:line="57" pos:column="72">0<pos:position pos:line="57" pos:column="73"/></literal></expr>)<pos:position pos:line="57" pos:column="74"/></condition><then pos:line="57" pos:column="74">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="58" pos:column="33">out_of_memory<pos:position pos:line="58" pos:column="46"/></name><argument_list pos:line="58" pos:column="46">(<argument><expr><literal type="string" pos:line="58" pos:column="47">"start_inband_exchange"<pos:position pos:line="58" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="58" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="72"/></expr_stmt></block></then></if>
		}<pos:position pos:line="59" pos:column="18"/></block></then></if></elseif> <else pos:line="59" pos:column="19">else
			<block type="pseudo"><expr_stmt><expr><name><name pos:line="60" pos:column="25">sargs<pos:position pos:line="60" pos:column="30"/></name><index pos:line="60" pos:column="30">[<expr><name pos:line="60" pos:column="31">sargc<pos:position pos:line="60" pos:column="36"/></name><operator pos:line="60" pos:column="36">++<pos:position pos:line="60" pos:column="38"/></operator></expr>]<pos:position pos:line="60" pos:column="39"/></index></name> <operator pos:line="60" pos:column="40">=<pos:position pos:line="60" pos:column="41"/></operator> <operator pos:line="60" pos:column="42">*<pos:position pos:line="60" pos:column="43"/></operator><name pos:line="60" pos:column="43">argv<pos:position pos:line="60" pos:column="47"/></name></expr>;<pos:position pos:line="60" pos:column="48"/></expr_stmt></block></else></if>
		<expr_stmt><expr><name pos:line="61" pos:column="17">argv<pos:position pos:line="61" pos:column="21"/></name><operator pos:line="61" pos:column="21">++<pos:position pos:line="61" pos:column="23"/></operator></expr>;<pos:position pos:line="61" pos:column="24"/></expr_stmt>
		<expr_stmt><expr><name pos:line="62" pos:column="17">argc<pos:position pos:line="62" pos:column="21"/></name><operator pos:line="62" pos:column="21">--<pos:position pos:line="62" pos:column="23"/></operator></expr>;<pos:position pos:line="62" pos:column="24"/></expr_stmt>
	}<pos:position pos:line="63" pos:column="10"/></block></while>

	<expr_stmt><expr><name><name pos:line="65" pos:column="9">sargs<pos:position pos:line="65" pos:column="14"/></name><index pos:line="65" pos:column="14">[<expr><name pos:line="65" pos:column="15">sargc<pos:position pos:line="65" pos:column="20"/></name></expr>]<pos:position pos:line="65" pos:column="21"/></index></name> <operator pos:line="65" pos:column="22">=<pos:position pos:line="65" pos:column="23"/></operator> <name pos:line="65" pos:column="24">NULL<pos:position pos:line="65" pos:column="28"/></name></expr>;<pos:position pos:line="65" pos:column="29"/></expr_stmt>

	<if pos:line="67" pos:column="9">if <condition pos:line="67" pos:column="12">(<expr><name pos:line="67" pos:column="13">verbose<pos:position pos:line="67" pos:column="20"/></name> <operator pos:line="67" pos:column="21">&gt;<pos:position pos:line="67" pos:column="25"/></operator> <literal type="number" pos:line="67" pos:column="23">1<pos:position pos:line="67" pos:column="24"/></literal></expr>)<pos:position pos:line="67" pos:column="25"/></condition><then pos:line="67" pos:column="25">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="68" pos:column="17">print_child_argv<pos:position pos:line="68" pos:column="33"/></name><argument_list pos:line="68" pos:column="33">(<argument><expr><literal type="string" pos:line="68" pos:column="34">"sending daemon args:"<pos:position pos:line="68" pos:column="56"/></literal></expr></argument>, <argument><expr><name pos:line="68" pos:column="58">sargs<pos:position pos:line="68" pos:column="63"/></name></expr></argument>)<pos:position pos:line="68" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="65"/></expr_stmt></block></then></if>

	<expr_stmt><expr><call><name pos:line="70" pos:column="9">io_printf<pos:position pos:line="70" pos:column="18"/></name><argument_list pos:line="70" pos:column="18">(<argument><expr><name pos:line="70" pos:column="19">f_out<pos:position pos:line="70" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="70" pos:column="26">"%.*s\n"<pos:position pos:line="70" pos:column="34"/></literal></expr></argument>, <argument><expr><name pos:line="70" pos:column="36">modlen<pos:position pos:line="70" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="70" pos:column="44">modname<pos:position pos:line="70" pos:column="51"/></name></expr></argument>)<pos:position pos:line="70" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="53"/></expr_stmt>

	<comment type="block" pos:line="72" pos:column="9">/* Old servers may just drop the connection here,
	 rather than sending a proper EXIT command.  Yuck. */</comment>
	<expr_stmt><expr><name pos:line="74" pos:column="9">kluge_around_eof<pos:position pos:line="74" pos:column="25"/></name> <operator pos:line="74" pos:column="26">=<pos:position pos:line="74" pos:column="27"/></operator> <ternary><condition><expr><name pos:line="74" pos:column="28">list_only<pos:position pos:line="74" pos:column="37"/></name> <operator pos:line="74" pos:column="38">&amp;&amp;<pos:position pos:line="74" pos:column="48"/></operator> <name pos:line="74" pos:column="41">protocol_version<pos:position pos:line="74" pos:column="57"/></name> <operator pos:line="74" pos:column="58">&lt;<pos:position pos:line="74" pos:column="62"/></operator> <literal type="number" pos:line="74" pos:column="60">25<pos:position pos:line="74" pos:column="62"/></literal></expr> ?<pos:position pos:line="74" pos:column="64"/></condition><then pos:line="74" pos:column="64"> <expr><literal type="number" pos:line="74" pos:column="65">1<pos:position pos:line="74" pos:column="66"/></literal></expr> <pos:position pos:line="74" pos:column="67"/></then><else pos:line="74" pos:column="67">: <expr><literal type="number" pos:line="74" pos:column="69">0<pos:position pos:line="74" pos:column="70"/></literal></expr></else></ternary></expr>;<pos:position pos:line="74" pos:column="71"/></expr_stmt>

	<while pos:line="76" pos:column="9">while <condition pos:line="76" pos:column="15">(<expr><literal type="number" pos:line="76" pos:column="16">1<pos:position pos:line="76" pos:column="17"/></literal></expr>)<pos:position pos:line="76" pos:column="18"/></condition> <block pos:line="76" pos:column="19">{
		<if pos:line="77" pos:column="17">if <condition pos:line="77" pos:column="20">(<expr><operator pos:line="77" pos:column="21">!<pos:position pos:line="77" pos:column="22"/></operator><call><name pos:line="77" pos:column="22">read_line_old<pos:position pos:line="77" pos:column="35"/></name><argument_list pos:line="77" pos:column="35">(<argument><expr><name pos:line="77" pos:column="36">f_in<pos:position pos:line="77" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="77" pos:column="42">line<pos:position pos:line="77" pos:column="46"/></name></expr></argument>, <argument><expr><sizeof pos:line="77" pos:column="48">sizeof <name pos:line="77" pos:column="55">line<pos:position pos:line="77" pos:column="59"/></name></sizeof></expr></argument>)<pos:position pos:line="77" pos:column="60"/></argument_list></call></expr>)<pos:position pos:line="77" pos:column="61"/></condition><then pos:line="77" pos:column="61"> <block pos:line="77" pos:column="62">{
			<expr_stmt><expr><call><name pos:line="78" pos:column="25">rprintf<pos:position pos:line="78" pos:column="32"/></name><argument_list pos:line="78" pos:column="32">(<argument><expr><name pos:line="78" pos:column="33">FERROR<pos:position pos:line="78" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="78" pos:column="41">"rsync: didn't get server startup line\n"<pos:position pos:line="78" pos:column="82"/></literal></expr></argument>)<pos:position pos:line="78" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="84"/></expr_stmt>
			<return pos:line="79" pos:column="25">return <expr><operator pos:line="79" pos:column="32">-<pos:position pos:line="79" pos:column="33"/></operator><literal type="number" pos:line="79" pos:column="33">1<pos:position pos:line="79" pos:column="34"/></literal></expr>;<pos:position pos:line="79" pos:column="35"/></return>
		}<pos:position pos:line="80" pos:column="18"/></block></then></if>

		<if pos:line="82" pos:column="17">if <condition pos:line="82" pos:column="20">(<expr><call><name pos:line="82" pos:column="21">strncmp<pos:position pos:line="82" pos:column="28"/></name><argument_list pos:line="82" pos:column="28">(<argument><expr><name pos:line="82" pos:column="29">line<pos:position pos:line="82" pos:column="33"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="82" pos:column="34">"@RSYNCD: AUTHREQD "<pos:position pos:line="82" pos:column="54"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="82" pos:column="55">18<pos:position pos:line="82" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="82" pos:column="58"/></argument_list></call> <operator pos:line="82" pos:column="59">==<pos:position pos:line="82" pos:column="61"/></operator> <literal type="number" pos:line="82" pos:column="62">0<pos:position pos:line="82" pos:column="63"/></literal></expr>)<pos:position pos:line="82" pos:column="64"/></condition><then pos:line="82" pos:column="64"> <block pos:line="82" pos:column="65">{
			<expr_stmt><expr><call><name pos:line="83" pos:column="25">auth_client<pos:position pos:line="83" pos:column="36"/></name><argument_list pos:line="83" pos:column="36">(<argument><expr><name pos:line="83" pos:column="37">f_out<pos:position pos:line="83" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="83" pos:column="44">user<pos:position pos:line="83" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="83" pos:column="50">line<pos:position pos:line="83" pos:column="54"/></name><operator pos:line="83" pos:column="54">+<pos:position pos:line="83" pos:column="55"/></operator><literal type="number" pos:line="83" pos:column="55">18<pos:position pos:line="83" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="83" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="59"/></expr_stmt>
			<continue pos:line="84" pos:column="25">continue;<pos:position pos:line="84" pos:column="34"/></continue>
		}<pos:position pos:line="85" pos:column="18"/></block></then></if>

		<if pos:line="87" pos:column="17">if <condition pos:line="87" pos:column="20">(<expr><call><name pos:line="87" pos:column="21">strcmp<pos:position pos:line="87" pos:column="27"/></name><argument_list pos:line="87" pos:column="27">(<argument><expr><name pos:line="87" pos:column="28">line<pos:position pos:line="87" pos:column="32"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="87" pos:column="33">"@RSYNCD: OK"<pos:position pos:line="87" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="87" pos:column="47"/></argument_list></call> <operator pos:line="87" pos:column="48">==<pos:position pos:line="87" pos:column="50"/></operator> <literal type="number" pos:line="87" pos:column="51">0<pos:position pos:line="87" pos:column="52"/></literal></expr>)<pos:position pos:line="87" pos:column="53"/></condition><then pos:line="87" pos:column="53">
			<block type="pseudo"><break pos:line="88" pos:column="25">break;<pos:position pos:line="88" pos:column="31"/></break></block></then></if>

		<if pos:line="90" pos:column="17">if <condition pos:line="90" pos:column="20">(<expr><call><name pos:line="90" pos:column="21">strcmp<pos:position pos:line="90" pos:column="27"/></name><argument_list pos:line="90" pos:column="27">(<argument><expr><name pos:line="90" pos:column="28">line<pos:position pos:line="90" pos:column="32"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="90" pos:column="33">"@RSYNCD: EXIT"<pos:position pos:line="90" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="90" pos:column="49"/></argument_list></call> <operator pos:line="90" pos:column="50">==<pos:position pos:line="90" pos:column="52"/></operator> <literal type="number" pos:line="90" pos:column="53">0<pos:position pos:line="90" pos:column="54"/></literal></expr>)<pos:position pos:line="90" pos:column="55"/></condition><then pos:line="90" pos:column="55"> <block pos:line="90" pos:column="56">{
			<comment type="block" pos:line="91" pos:column="25">/* This is sent by recent versions of the
			 * server to terminate the listing of modules.
			 * We don't want to go on and transfer
			 * anything; just exit. */</comment>
			<expr_stmt><expr><call><name pos:line="95" pos:column="25">exit<pos:position pos:line="95" pos:column="29"/></name><argument_list pos:line="95" pos:column="29">(<argument><expr><literal type="number" pos:line="95" pos:column="30">0<pos:position pos:line="95" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="95" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="33"/></expr_stmt>
		}<pos:position pos:line="96" pos:column="18"/></block></then></if>

		<if pos:line="98" pos:column="17">if <condition pos:line="98" pos:column="20">(<expr><call><name pos:line="98" pos:column="21">strncmp<pos:position pos:line="98" pos:column="28"/></name><argument_list pos:line="98" pos:column="28">(<argument><expr><name pos:line="98" pos:column="29">line<pos:position pos:line="98" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="98" pos:column="35">"@ERROR"<pos:position pos:line="98" pos:column="43"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="98" pos:column="45">6<pos:position pos:line="98" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="98" pos:column="47"/></argument_list></call> <operator pos:line="98" pos:column="48">==<pos:position pos:line="98" pos:column="50"/></operator> <literal type="number" pos:line="98" pos:column="51">0<pos:position pos:line="98" pos:column="52"/></literal></expr>)<pos:position pos:line="98" pos:column="53"/></condition><then pos:line="98" pos:column="53"> <block pos:line="98" pos:column="54">{
			<expr_stmt><expr><call><name pos:line="99" pos:column="25">rprintf<pos:position pos:line="99" pos:column="32"/></name><argument_list pos:line="99" pos:column="32">(<argument><expr><name pos:line="99" pos:column="33">FERROR<pos:position pos:line="99" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="99" pos:column="41">"%s\n"<pos:position pos:line="99" pos:column="47"/></literal></expr></argument>, <argument><expr><name pos:line="99" pos:column="49">line<pos:position pos:line="99" pos:column="53"/></name></expr></argument>)<pos:position pos:line="99" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="99" pos:column="55"/></expr_stmt>
			<comment type="block" pos:line="100" pos:column="25">/* This is always fatal; the server will now
			 * close the socket. */</comment>
			<return pos:line="102" pos:column="25">return <expr><operator pos:line="102" pos:column="32">-<pos:position pos:line="102" pos:column="33"/></operator><literal type="number" pos:line="102" pos:column="33">1<pos:position pos:line="102" pos:column="34"/></literal></expr>;<pos:position pos:line="102" pos:column="35"/></return>
		}<pos:position pos:line="103" pos:column="18"/></block></then></if>

		<comment type="block" pos:line="105" pos:column="17">/* This might be a MOTD line or a module listing, but there is
		 * no way to differentiate it.  The manpage mentions this. */</comment>
		<if pos:line="107" pos:column="17">if <condition pos:line="107" pos:column="20">(<expr><name pos:line="107" pos:column="21">output_motd<pos:position pos:line="107" pos:column="32"/></name></expr>)<pos:position pos:line="107" pos:column="33"/></condition><then pos:line="107" pos:column="33">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="108" pos:column="25">rprintf<pos:position pos:line="108" pos:column="32"/></name><argument_list pos:line="108" pos:column="32">(<argument><expr><name pos:line="108" pos:column="33">FINFO<pos:position pos:line="108" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="108" pos:column="40">"%s\n"<pos:position pos:line="108" pos:column="46"/></literal></expr></argument>, <argument><expr><name pos:line="108" pos:column="48">line<pos:position pos:line="108" pos:column="52"/></name></expr></argument>)<pos:position pos:line="108" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="108" pos:column="54"/></expr_stmt></block></then></if>
	}<pos:position pos:line="109" pos:column="10"/></block></while>
	<expr_stmt><expr><name pos:line="110" pos:column="9">kluge_around_eof<pos:position pos:line="110" pos:column="25"/></name> <operator pos:line="110" pos:column="26">=<pos:position pos:line="110" pos:column="27"/></operator> <literal type="number" pos:line="110" pos:column="28">0<pos:position pos:line="110" pos:column="29"/></literal></expr>;<pos:position pos:line="110" pos:column="30"/></expr_stmt>

	<if pos:line="112" pos:column="9">if <condition pos:line="112" pos:column="12">(<expr><name pos:line="112" pos:column="13">rl_nulls<pos:position pos:line="112" pos:column="21"/></name></expr>)<pos:position pos:line="112" pos:column="22"/></condition><then pos:line="112" pos:column="22"> <block pos:line="112" pos:column="23">{
		<for pos:line="113" pos:column="17">for <control pos:line="113" pos:column="21">(<init><expr><name pos:line="113" pos:column="22">i<pos:position pos:line="113" pos:column="23"/></name> <operator pos:line="113" pos:column="24">=<pos:position pos:line="113" pos:column="25"/></operator> <literal type="number" pos:line="113" pos:column="26">0<pos:position pos:line="113" pos:column="27"/></literal></expr>;<pos:position pos:line="113" pos:column="28"/></init> <condition><expr><name pos:line="113" pos:column="29">i<pos:position pos:line="113" pos:column="30"/></name> <operator pos:line="113" pos:column="31">&lt;<pos:position pos:line="113" pos:column="35"/></operator> <name pos:line="113" pos:column="33">sargc<pos:position pos:line="113" pos:column="38"/></name></expr>;<pos:position pos:line="113" pos:column="39"/></condition> <incr><expr><name pos:line="113" pos:column="40">i<pos:position pos:line="113" pos:column="41"/></name><operator pos:line="113" pos:column="41">++<pos:position pos:line="113" pos:column="43"/></operator></expr></incr>)<pos:position pos:line="113" pos:column="44"/></control> <block pos:line="113" pos:column="45">{
			<if pos:line="114" pos:column="25">if <condition pos:line="114" pos:column="28">(<expr><operator pos:line="114" pos:column="29">!<pos:position pos:line="114" pos:column="30"/></operator><name><name pos:line="114" pos:column="30">sargs<pos:position pos:line="114" pos:column="35"/></name><index pos:line="114" pos:column="35">[<expr><name pos:line="114" pos:column="36">i<pos:position pos:line="114" pos:column="37"/></name></expr>]<pos:position pos:line="114" pos:column="38"/></index></name></expr>)<pos:position pos:line="114" pos:column="39"/></condition><then pos:line="114" pos:column="39"> <comment type="block" pos:line="114" pos:column="40">/* stop at --protect-args NULL */</comment>
				<block type="pseudo"><break pos:line="115" pos:column="33">break;<pos:position pos:line="115" pos:column="39"/></break></block></then></if>
			<expr_stmt><expr><call><name pos:line="116" pos:column="25">write_sbuf<pos:position pos:line="116" pos:column="35"/></name><argument_list pos:line="116" pos:column="35">(<argument><expr><name pos:line="116" pos:column="36">f_out<pos:position pos:line="116" pos:column="41"/></name></expr></argument>, <argument><expr><name><name pos:line="116" pos:column="43">sargs<pos:position pos:line="116" pos:column="48"/></name><index pos:line="116" pos:column="48">[<expr><name pos:line="116" pos:column="49">i<pos:position pos:line="116" pos:column="50"/></name></expr>]<pos:position pos:line="116" pos:column="51"/></index></name></expr></argument>)<pos:position pos:line="116" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="116" pos:column="53"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="117" pos:column="25">write_byte<pos:position pos:line="117" pos:column="35"/></name><argument_list pos:line="117" pos:column="35">(<argument><expr><name pos:line="117" pos:column="36">f_out<pos:position pos:line="117" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="117" pos:column="43">0<pos:position pos:line="117" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="117" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="117" pos:column="46"/></expr_stmt>
		}<pos:position pos:line="118" pos:column="18"/></block></for>
		<expr_stmt><expr><call><name pos:line="119" pos:column="17">write_byte<pos:position pos:line="119" pos:column="27"/></name><argument_list pos:line="119" pos:column="27">(<argument><expr><name pos:line="119" pos:column="28">f_out<pos:position pos:line="119" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="119" pos:column="35">0<pos:position pos:line="119" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="119" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="119" pos:column="38"/></expr_stmt>
	}<pos:position pos:line="120" pos:column="10"/></block></then> <else pos:line="120" pos:column="11">else <block pos:line="120" pos:column="16">{
		<for pos:line="121" pos:column="17">for <control pos:line="121" pos:column="21">(<init><expr><name pos:line="121" pos:column="22">i<pos:position pos:line="121" pos:column="23"/></name> <operator pos:line="121" pos:column="24">=<pos:position pos:line="121" pos:column="25"/></operator> <literal type="number" pos:line="121" pos:column="26">0<pos:position pos:line="121" pos:column="27"/></literal></expr>;<pos:position pos:line="121" pos:column="28"/></init> <condition><expr><name pos:line="121" pos:column="29">i<pos:position pos:line="121" pos:column="30"/></name> <operator pos:line="121" pos:column="31">&lt;<pos:position pos:line="121" pos:column="35"/></operator> <name pos:line="121" pos:column="33">sargc<pos:position pos:line="121" pos:column="38"/></name></expr>;<pos:position pos:line="121" pos:column="39"/></condition> <incr><expr><name pos:line="121" pos:column="40">i<pos:position pos:line="121" pos:column="41"/></name><operator pos:line="121" pos:column="41">++<pos:position pos:line="121" pos:column="43"/></operator></expr></incr>)<pos:position pos:line="121" pos:column="44"/></control>
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="122" pos:column="25">io_printf<pos:position pos:line="122" pos:column="34"/></name><argument_list pos:line="122" pos:column="34">(<argument><expr><name pos:line="122" pos:column="35">f_out<pos:position pos:line="122" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="122" pos:column="42">"%s\n"<pos:position pos:line="122" pos:column="48"/></literal></expr></argument>, <argument><expr><name><name pos:line="122" pos:column="50">sargs<pos:position pos:line="122" pos:column="55"/></name><index pos:line="122" pos:column="55">[<expr><name pos:line="122" pos:column="56">i<pos:position pos:line="122" pos:column="57"/></name></expr>]<pos:position pos:line="122" pos:column="58"/></index></name></expr></argument>)<pos:position pos:line="122" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="122" pos:column="60"/></expr_stmt></block></for>
		<expr_stmt><expr><call><name pos:line="123" pos:column="17">write_sbuf<pos:position pos:line="123" pos:column="27"/></name><argument_list pos:line="123" pos:column="27">(<argument><expr><name pos:line="123" pos:column="28">f_out<pos:position pos:line="123" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="123" pos:column="35">"\n"<pos:position pos:line="123" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="123" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="123" pos:column="41"/></expr_stmt>
	}<pos:position pos:line="124" pos:column="10"/></block></else></if>

	<if pos:line="126" pos:column="9">if <condition pos:line="126" pos:column="12">(<expr><name pos:line="126" pos:column="13">protect_args<pos:position pos:line="126" pos:column="25"/></name></expr>)<pos:position pos:line="126" pos:column="26"/></condition><then pos:line="126" pos:column="26">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="127" pos:column="17">send_protected_args<pos:position pos:line="127" pos:column="36"/></name><argument_list pos:line="127" pos:column="36">(<argument><expr><name pos:line="127" pos:column="37">f_out<pos:position pos:line="127" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="127" pos:column="44">sargs<pos:position pos:line="127" pos:column="49"/></name></expr></argument>)<pos:position pos:line="127" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="127" pos:column="51"/></expr_stmt></block></then></if>

	<if pos:line="129" pos:column="9">if <condition pos:line="129" pos:column="12">(<expr><name pos:line="129" pos:column="13">protocol_version<pos:position pos:line="129" pos:column="29"/></name> <operator pos:line="129" pos:column="30">&lt;<pos:position pos:line="129" pos:column="34"/></operator> <literal type="number" pos:line="129" pos:column="32">23<pos:position pos:line="129" pos:column="34"/></literal></expr>)<pos:position pos:line="129" pos:column="35"/></condition><then pos:line="129" pos:column="35"> <block pos:line="129" pos:column="36">{
		<if pos:line="130" pos:column="17">if <condition pos:line="130" pos:column="20">(<expr><name pos:line="130" pos:column="21">protocol_version<pos:position pos:line="130" pos:column="37"/></name> <operator pos:line="130" pos:column="38">==<pos:position pos:line="130" pos:column="40"/></operator> <literal type="number" pos:line="130" pos:column="41">22<pos:position pos:line="130" pos:column="43"/></literal> <operator pos:line="130" pos:column="44">||<pos:position pos:line="130" pos:column="46"/></operator> <operator pos:line="130" pos:column="47">!<pos:position pos:line="130" pos:column="48"/></operator><name pos:line="130" pos:column="48">am_sender<pos:position pos:line="130" pos:column="57"/></name></expr>)<pos:position pos:line="130" pos:column="58"/></condition><then pos:line="130" pos:column="58">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="131" pos:column="25">io_start_multiplex_in<pos:position pos:line="131" pos:column="46"/></name><argument_list pos:line="131" pos:column="46">()<pos:position pos:line="131" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="131" pos:column="49"/></expr_stmt></block></then></if>
	}<pos:position pos:line="132" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="134" pos:column="9">free<pos:position pos:line="134" pos:column="13"/></name><argument_list pos:line="134" pos:column="13">(<argument><expr><name pos:line="134" pos:column="14">modname<pos:position pos:line="134" pos:column="21"/></name></expr></argument>)<pos:position pos:line="134" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="134" pos:column="23"/></expr_stmt>

	<return pos:line="136" pos:column="9">return <expr><literal type="number" pos:line="136" pos:column="16">0<pos:position pos:line="136" pos:column="17"/></literal></expr>;<pos:position pos:line="136" pos:column="18"/></return>
}<pos:position pos:line="137" pos:column="2"/></block></function></unit>
