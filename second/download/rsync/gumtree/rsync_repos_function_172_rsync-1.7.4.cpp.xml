<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_172_rsync-1.7.4.cpp" pos:tabs="8"><decl_stmt><decl><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">deflate<pos:position pos:line="1" pos:column="12"/></name> <argument_list pos:line="1" pos:column="13">(<argument><expr><name pos:line="1" pos:column="14">strm<pos:position pos:line="1" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="1" pos:column="20">flush<pos:position pos:line="1" pos:column="25"/></name></expr></argument>)<pos:position pos:line="1" pos:column="26"/></argument_list>
    <name pos:line="2" pos:column="5">z_stream<pos:position pos:line="2" pos:column="13"/></name> <modifier pos:line="2" pos:column="14">*<pos:position pos:line="2" pos:column="15"/></modifier><name pos:line="2" pos:column="15">strm<pos:position pos:line="2" pos:column="19"/></name></decl>;<pos:position pos:line="2" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">int<pos:position pos:line="3" pos:column="8"/></name></type> <name pos:line="3" pos:column="9">flush<pos:position pos:line="3" pos:column="14"/></name></decl>;<pos:position pos:line="3" pos:column="15"/></decl_stmt>
<block pos:line="4" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">deflate_state<pos:position pos:line="5" pos:column="18"/></name> <modifier pos:line="5" pos:column="19">*<pos:position pos:line="5" pos:column="20"/></modifier></type><name pos:line="5" pos:column="20">state<pos:position pos:line="5" pos:column="25"/></name> <init pos:line="5" pos:column="26">= <expr><operator pos:line="5" pos:column="28">(<pos:position pos:line="5" pos:column="29"/></operator><name pos:line="5" pos:column="29">deflate_state<pos:position pos:line="5" pos:column="42"/></name> <operator pos:line="5" pos:column="43">*<pos:position pos:line="5" pos:column="44"/></operator><operator pos:line="5" pos:column="44">)<pos:position pos:line="5" pos:column="45"/></operator> <name><name pos:line="5" pos:column="46">strm<pos:position pos:line="5" pos:column="50"/></name><operator pos:line="5" pos:column="50">-&gt;<pos:position pos:line="5" pos:column="55"/></operator><name pos:line="5" pos:column="52">state<pos:position pos:line="5" pos:column="57"/></name></name></expr></init></decl>;<pos:position pos:line="5" pos:column="58"/></decl_stmt>

    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><name pos:line="7" pos:column="9">strm<pos:position pos:line="7" pos:column="13"/></name> <operator pos:line="7" pos:column="14">==<pos:position pos:line="7" pos:column="16"/></operator> <name pos:line="7" pos:column="17">Z_NULL<pos:position pos:line="7" pos:column="23"/></name> <operator pos:line="7" pos:column="24">||<pos:position pos:line="7" pos:column="26"/></operator> <name pos:line="7" pos:column="27">state<pos:position pos:line="7" pos:column="32"/></name> <operator pos:line="7" pos:column="33">==<pos:position pos:line="7" pos:column="35"/></operator> <name pos:line="7" pos:column="36">Z_NULL<pos:position pos:line="7" pos:column="42"/></name></expr>)<pos:position pos:line="7" pos:column="43"/></condition><then pos:line="7" pos:column="43"> <block type="pseudo"><return pos:line="7" pos:column="44">return <expr><name pos:line="7" pos:column="51">Z_STREAM_ERROR<pos:position pos:line="7" pos:column="65"/></name></expr>;<pos:position pos:line="7" pos:column="66"/></return></block></then></if>
    
    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><name><name pos:line="9" pos:column="9">strm<pos:position pos:line="9" pos:column="13"/></name><operator pos:line="9" pos:column="13">-&gt;<pos:position pos:line="9" pos:column="18"/></operator><name pos:line="9" pos:column="15">next_in<pos:position pos:line="9" pos:column="22"/></name></name> <operator pos:line="9" pos:column="23">==<pos:position pos:line="9" pos:column="25"/></operator> <name pos:line="9" pos:column="26">Z_NULL<pos:position pos:line="9" pos:column="32"/></name> <operator pos:line="9" pos:column="33">&amp;&amp;<pos:position pos:line="9" pos:column="43"/></operator> <name><name pos:line="9" pos:column="36">strm<pos:position pos:line="9" pos:column="40"/></name><operator pos:line="9" pos:column="40">-&gt;<pos:position pos:line="9" pos:column="45"/></operator><name pos:line="9" pos:column="42">avail_in<pos:position pos:line="9" pos:column="50"/></name></name> <operator pos:line="9" pos:column="51">!=<pos:position pos:line="9" pos:column="53"/></operator> <literal type="number" pos:line="9" pos:column="54">0<pos:position pos:line="9" pos:column="55"/></literal></expr>)<pos:position pos:line="9" pos:column="56"/></condition><then pos:line="9" pos:column="56"> <block pos:line="9" pos:column="57">{
        <expr_stmt><expr><call><name pos:line="10" pos:column="9">ERR_RETURN<pos:position pos:line="10" pos:column="19"/></name><argument_list pos:line="10" pos:column="19">(<argument><expr><name pos:line="10" pos:column="20">strm<pos:position pos:line="10" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="26">Z_STREAM_ERROR<pos:position pos:line="10" pos:column="40"/></name></expr></argument>)<pos:position pos:line="10" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="42"/></expr_stmt>
    }<pos:position pos:line="11" pos:column="6"/></block></then></if>
    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><name><name pos:line="12" pos:column="9">strm<pos:position pos:line="12" pos:column="13"/></name><operator pos:line="12" pos:column="13">-&gt;<pos:position pos:line="12" pos:column="18"/></operator><name pos:line="12" pos:column="15">avail_out<pos:position pos:line="12" pos:column="24"/></name></name> <operator pos:line="12" pos:column="25">==<pos:position pos:line="12" pos:column="27"/></operator> <literal type="number" pos:line="12" pos:column="28">0<pos:position pos:line="12" pos:column="29"/></literal></expr>)<pos:position pos:line="12" pos:column="30"/></condition><then pos:line="12" pos:column="30"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="12" pos:column="31">ERR_RETURN<pos:position pos:line="12" pos:column="41"/></name><argument_list pos:line="12" pos:column="41">(<argument><expr><name pos:line="12" pos:column="42">strm<pos:position pos:line="12" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="48">Z_BUF_ERROR<pos:position pos:line="12" pos:column="59"/></name></expr></argument>)<pos:position pos:line="12" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="61"/></expr_stmt></block></then></if>

    <expr_stmt><expr><name><name pos:line="14" pos:column="5">state<pos:position pos:line="14" pos:column="10"/></name><operator pos:line="14" pos:column="10">-&gt;<pos:position pos:line="14" pos:column="15"/></operator><name pos:line="14" pos:column="12">strm<pos:position pos:line="14" pos:column="16"/></name></name> <operator pos:line="14" pos:column="17">=<pos:position pos:line="14" pos:column="18"/></operator> <name pos:line="14" pos:column="19">strm<pos:position pos:line="14" pos:column="23"/></name></expr>;<pos:position pos:line="14" pos:column="24"/></expr_stmt> <comment type="block" pos:line="14" pos:column="25">/* just in case */</comment>

    <comment type="block" pos:line="16" pos:column="5">/* Write the zlib header */</comment>
    <if pos:line="17" pos:column="5">if <condition pos:line="17" pos:column="8">(<expr><name><name pos:line="17" pos:column="9">state<pos:position pos:line="17" pos:column="14"/></name><operator pos:line="17" pos:column="14">-&gt;<pos:position pos:line="17" pos:column="19"/></operator><name pos:line="17" pos:column="16">status<pos:position pos:line="17" pos:column="22"/></name></name> <operator pos:line="17" pos:column="23">==<pos:position pos:line="17" pos:column="25"/></operator> <name pos:line="17" pos:column="26">INIT_STATE<pos:position pos:line="17" pos:column="36"/></name></expr>)<pos:position pos:line="17" pos:column="37"/></condition><then pos:line="17" pos:column="37"> <block pos:line="17" pos:column="38">{

        <decl_stmt><decl><type><name pos:line="19" pos:column="9">uInt<pos:position pos:line="19" pos:column="13"/></name></type> <name pos:line="19" pos:column="14">header<pos:position pos:line="19" pos:column="20"/></name> <init pos:line="19" pos:column="21">= <expr><operator pos:line="19" pos:column="23">(<pos:position pos:line="19" pos:column="24"/></operator><name pos:line="19" pos:column="24">DEFLATED<pos:position pos:line="19" pos:column="32"/></name> <operator pos:line="19" pos:column="33">+<pos:position pos:line="19" pos:column="34"/></operator> <operator pos:line="19" pos:column="35">(<pos:position pos:line="19" pos:column="36"/></operator><operator pos:line="19" pos:column="36">(<pos:position pos:line="19" pos:column="37"/></operator><name><name pos:line="19" pos:column="37">state<pos:position pos:line="19" pos:column="42"/></name><operator pos:line="19" pos:column="42">-&gt;<pos:position pos:line="19" pos:column="47"/></operator><name pos:line="19" pos:column="44">w_bits<pos:position pos:line="19" pos:column="50"/></name></name><operator pos:line="19" pos:column="50">-<pos:position pos:line="19" pos:column="51"/></operator><literal type="number" pos:line="19" pos:column="51">8<pos:position pos:line="19" pos:column="52"/></literal><operator pos:line="19" pos:column="52">)<pos:position pos:line="19" pos:column="53"/></operator><operator pos:line="19" pos:column="53">&lt;&lt;<pos:position pos:line="19" pos:column="61"/></operator><literal type="number" pos:line="19" pos:column="55">4<pos:position pos:line="19" pos:column="56"/></literal><operator pos:line="19" pos:column="56">)<pos:position pos:line="19" pos:column="57"/></operator><operator pos:line="19" pos:column="57">)<pos:position pos:line="19" pos:column="58"/></operator> <operator pos:line="19" pos:column="59">&lt;&lt;<pos:position pos:line="19" pos:column="67"/></operator> <literal type="number" pos:line="19" pos:column="62">8<pos:position pos:line="19" pos:column="63"/></literal></expr></init></decl>;<pos:position pos:line="19" pos:column="64"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="20" pos:column="9">uInt<pos:position pos:line="20" pos:column="13"/></name></type> <name pos:line="20" pos:column="14">level_flags<pos:position pos:line="20" pos:column="25"/></name> <init pos:line="20" pos:column="26">= <expr><operator pos:line="20" pos:column="28">(<pos:position pos:line="20" pos:column="29"/></operator><name><name pos:line="20" pos:column="29">state<pos:position pos:line="20" pos:column="34"/></name><operator pos:line="20" pos:column="34">-&gt;<pos:position pos:line="20" pos:column="39"/></operator><name pos:line="20" pos:column="36">level<pos:position pos:line="20" pos:column="41"/></name></name><operator pos:line="20" pos:column="41">-<pos:position pos:line="20" pos:column="42"/></operator><literal type="number" pos:line="20" pos:column="42">1<pos:position pos:line="20" pos:column="43"/></literal><operator pos:line="20" pos:column="43">)<pos:position pos:line="20" pos:column="44"/></operator> <operator pos:line="20" pos:column="45">&gt;&gt;<pos:position pos:line="20" pos:column="50"/></operator> <literal type="number" pos:line="20" pos:column="48">1<pos:position pos:line="20" pos:column="49"/></literal></expr></init></decl>;<pos:position pos:line="20" pos:column="50"/></decl_stmt>

        <if pos:line="22" pos:column="9">if <condition pos:line="22" pos:column="12">(<expr><name pos:line="22" pos:column="13">level_flags<pos:position pos:line="22" pos:column="24"/></name> <operator pos:line="22" pos:column="25">&gt;<pos:position pos:line="22" pos:column="29"/></operator> <literal type="number" pos:line="22" pos:column="27">3<pos:position pos:line="22" pos:column="28"/></literal></expr>)<pos:position pos:line="22" pos:column="29"/></condition><then pos:line="22" pos:column="29"> <block type="pseudo"><expr_stmt><expr><name pos:line="22" pos:column="30">level_flags<pos:position pos:line="22" pos:column="41"/></name> <operator pos:line="22" pos:column="42">=<pos:position pos:line="22" pos:column="43"/></operator> <literal type="number" pos:line="22" pos:column="44">3<pos:position pos:line="22" pos:column="45"/></literal></expr>;<pos:position pos:line="22" pos:column="46"/></expr_stmt></block></then></if>
        <expr_stmt><expr><name pos:line="23" pos:column="9">header<pos:position pos:line="23" pos:column="15"/></name> <operator pos:line="23" pos:column="16">|=<pos:position pos:line="23" pos:column="18"/></operator> <operator pos:line="23" pos:column="19">(<pos:position pos:line="23" pos:column="20"/></operator><name pos:line="23" pos:column="20">level_flags<pos:position pos:line="23" pos:column="31"/></name> <operator pos:line="23" pos:column="32">&lt;&lt;<pos:position pos:line="23" pos:column="40"/></operator> <literal type="number" pos:line="23" pos:column="35">6<pos:position pos:line="23" pos:column="36"/></literal><operator pos:line="23" pos:column="36">)<pos:position pos:line="23" pos:column="37"/></operator></expr>;<pos:position pos:line="23" pos:column="38"/></expr_stmt>
        <expr_stmt><expr><name pos:line="24" pos:column="9">header<pos:position pos:line="24" pos:column="15"/></name> <operator pos:line="24" pos:column="16">+=<pos:position pos:line="24" pos:column="18"/></operator> <literal type="number" pos:line="24" pos:column="19">31<pos:position pos:line="24" pos:column="21"/></literal> <operator pos:line="24" pos:column="22">-<pos:position pos:line="24" pos:column="23"/></operator> <operator pos:line="24" pos:column="24">(<pos:position pos:line="24" pos:column="25"/></operator><name pos:line="24" pos:column="25">header<pos:position pos:line="24" pos:column="31"/></name> <operator pos:line="24" pos:column="32">%<pos:position pos:line="24" pos:column="33"/></operator> <literal type="number" pos:line="24" pos:column="34">31<pos:position pos:line="24" pos:column="36"/></literal><operator pos:line="24" pos:column="36">)<pos:position pos:line="24" pos:column="37"/></operator></expr>;<pos:position pos:line="24" pos:column="38"/></expr_stmt>

        <expr_stmt><expr><name><name pos:line="26" pos:column="9">state<pos:position pos:line="26" pos:column="14"/></name><operator pos:line="26" pos:column="14">-&gt;<pos:position pos:line="26" pos:column="19"/></operator><name pos:line="26" pos:column="16">status<pos:position pos:line="26" pos:column="22"/></name></name> <operator pos:line="26" pos:column="23">=<pos:position pos:line="26" pos:column="24"/></operator> <name pos:line="26" pos:column="25">BUSY_STATE<pos:position pos:line="26" pos:column="35"/></name></expr>;<pos:position pos:line="26" pos:column="36"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="27" pos:column="9">putShortMSB<pos:position pos:line="27" pos:column="20"/></name><argument_list pos:line="27" pos:column="20">(<argument><expr><name pos:line="27" pos:column="21">state<pos:position pos:line="27" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="28">header<pos:position pos:line="27" pos:column="34"/></name></expr></argument>)<pos:position pos:line="27" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="36"/></expr_stmt>
    }<pos:position pos:line="28" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="30" pos:column="5">/* Flush as much pending output as possible */</comment>
    <if pos:line="31" pos:column="5">if <condition pos:line="31" pos:column="8">(<expr><name><name pos:line="31" pos:column="9">state<pos:position pos:line="31" pos:column="14"/></name><operator pos:line="31" pos:column="14">-&gt;<pos:position pos:line="31" pos:column="19"/></operator><name pos:line="31" pos:column="16">pending<pos:position pos:line="31" pos:column="23"/></name></name> <operator pos:line="31" pos:column="24">!=<pos:position pos:line="31" pos:column="26"/></operator> <literal type="number" pos:line="31" pos:column="27">0<pos:position pos:line="31" pos:column="28"/></literal></expr>)<pos:position pos:line="31" pos:column="29"/></condition><then pos:line="31" pos:column="29"> <block pos:line="31" pos:column="30">{
        <expr_stmt><expr><call><name pos:line="32" pos:column="9">flush_pending<pos:position pos:line="32" pos:column="22"/></name><argument_list pos:line="32" pos:column="22">(<argument><expr><name pos:line="32" pos:column="23">strm<pos:position pos:line="32" pos:column="27"/></name></expr></argument>)<pos:position pos:line="32" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="29"/></expr_stmt>
        <if pos:line="33" pos:column="9">if <condition pos:line="33" pos:column="12">(<expr><name><name pos:line="33" pos:column="13">strm<pos:position pos:line="33" pos:column="17"/></name><operator pos:line="33" pos:column="17">-&gt;<pos:position pos:line="33" pos:column="22"/></operator><name pos:line="33" pos:column="19">avail_out<pos:position pos:line="33" pos:column="28"/></name></name> <operator pos:line="33" pos:column="29">==<pos:position pos:line="33" pos:column="31"/></operator> <literal type="number" pos:line="33" pos:column="32">0<pos:position pos:line="33" pos:column="33"/></literal></expr>)<pos:position pos:line="33" pos:column="34"/></condition><then pos:line="33" pos:column="34"> <block type="pseudo"><return pos:line="33" pos:column="35">return <expr><name pos:line="33" pos:column="42">Z_OK<pos:position pos:line="33" pos:column="46"/></name></expr>;<pos:position pos:line="33" pos:column="47"/></return></block></then></if>
    }<pos:position pos:line="34" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="36" pos:column="5">/* If we came back in here to get the last output from
     * a previous flush, we're done for now.
     */</comment>
    <if pos:line="39" pos:column="5">if <condition pos:line="39" pos:column="8">(<expr><name><name pos:line="39" pos:column="9">state<pos:position pos:line="39" pos:column="14"/></name><operator pos:line="39" pos:column="14">-&gt;<pos:position pos:line="39" pos:column="19"/></operator><name pos:line="39" pos:column="16">status<pos:position pos:line="39" pos:column="22"/></name></name> <operator pos:line="39" pos:column="23">==<pos:position pos:line="39" pos:column="25"/></operator> <name pos:line="39" pos:column="26">FLUSH_STATE<pos:position pos:line="39" pos:column="37"/></name></expr>)<pos:position pos:line="39" pos:column="38"/></condition><then pos:line="39" pos:column="38"> <block pos:line="39" pos:column="39">{
	<expr_stmt><expr><name><name pos:line="40" pos:column="9">state<pos:position pos:line="40" pos:column="14"/></name><operator pos:line="40" pos:column="14">-&gt;<pos:position pos:line="40" pos:column="19"/></operator><name pos:line="40" pos:column="16">status<pos:position pos:line="40" pos:column="22"/></name></name> <operator pos:line="40" pos:column="23">=<pos:position pos:line="40" pos:column="24"/></operator> <name pos:line="40" pos:column="25">BUSY_STATE<pos:position pos:line="40" pos:column="35"/></name></expr>;<pos:position pos:line="40" pos:column="36"/></expr_stmt>
	<if pos:line="41" pos:column="9">if <condition pos:line="41" pos:column="12">(<expr><name pos:line="41" pos:column="13">flush<pos:position pos:line="41" pos:column="18"/></name> <operator pos:line="41" pos:column="19">!=<pos:position pos:line="41" pos:column="21"/></operator> <name pos:line="41" pos:column="22">Z_NO_FLUSH<pos:position pos:line="41" pos:column="32"/></name> <operator pos:line="41" pos:column="33">&amp;&amp;<pos:position pos:line="41" pos:column="43"/></operator> <name pos:line="41" pos:column="36">flush<pos:position pos:line="41" pos:column="41"/></name> <operator pos:line="41" pos:column="42">!=<pos:position pos:line="41" pos:column="44"/></operator> <name pos:line="41" pos:column="45">Z_FINISH<pos:position pos:line="41" pos:column="53"/></name></expr>)<pos:position pos:line="41" pos:column="54"/></condition><then pos:line="41" pos:column="54">
	    <block type="pseudo"><return pos:line="42" pos:column="13">return <expr><name pos:line="42" pos:column="20">Z_OK<pos:position pos:line="42" pos:column="24"/></name></expr>;<pos:position pos:line="42" pos:column="25"/></return></block></then></if>
    }<pos:position pos:line="43" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="45" pos:column="5">/* User must not provide more input after the first FINISH: */</comment>
    <if pos:line="46" pos:column="5">if <condition pos:line="46" pos:column="8">(<expr><name><name pos:line="46" pos:column="9">state<pos:position pos:line="46" pos:column="14"/></name><operator pos:line="46" pos:column="14">-&gt;<pos:position pos:line="46" pos:column="19"/></operator><name pos:line="46" pos:column="16">status<pos:position pos:line="46" pos:column="22"/></name></name> <operator pos:line="46" pos:column="23">==<pos:position pos:line="46" pos:column="25"/></operator> <name pos:line="46" pos:column="26">FINISH_STATE<pos:position pos:line="46" pos:column="38"/></name> <operator pos:line="46" pos:column="39">&amp;&amp;<pos:position pos:line="46" pos:column="49"/></operator> <name><name pos:line="46" pos:column="42">strm<pos:position pos:line="46" pos:column="46"/></name><operator pos:line="46" pos:column="46">-&gt;<pos:position pos:line="46" pos:column="51"/></operator><name pos:line="46" pos:column="48">avail_in<pos:position pos:line="46" pos:column="56"/></name></name> <operator pos:line="46" pos:column="57">!=<pos:position pos:line="46" pos:column="59"/></operator> <literal type="number" pos:line="46" pos:column="60">0<pos:position pos:line="46" pos:column="61"/></literal></expr>)<pos:position pos:line="46" pos:column="62"/></condition><then pos:line="46" pos:column="62"> <block pos:line="46" pos:column="63">{
        <expr_stmt><expr><call><name pos:line="47" pos:column="9">ERR_RETURN<pos:position pos:line="47" pos:column="19"/></name><argument_list pos:line="47" pos:column="19">(<argument><expr><name pos:line="47" pos:column="20">strm<pos:position pos:line="47" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="26">Z_BUF_ERROR<pos:position pos:line="47" pos:column="37"/></name></expr></argument>)<pos:position pos:line="47" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="39"/></expr_stmt>
    }<pos:position pos:line="48" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="50" pos:column="5">/* Start a new block or continue the current one.
     */</comment>
    <if pos:line="52" pos:column="5">if <condition pos:line="52" pos:column="8">(<expr><name><name pos:line="52" pos:column="9">strm<pos:position pos:line="52" pos:column="13"/></name><operator pos:line="52" pos:column="13">-&gt;<pos:position pos:line="52" pos:column="18"/></operator><name pos:line="52" pos:column="15">avail_in<pos:position pos:line="52" pos:column="23"/></name></name> <operator pos:line="52" pos:column="24">!=<pos:position pos:line="52" pos:column="26"/></operator> <literal type="number" pos:line="52" pos:column="27">0<pos:position pos:line="52" pos:column="28"/></literal> <operator pos:line="52" pos:column="29">||<pos:position pos:line="52" pos:column="31"/></operator> <name><name pos:line="52" pos:column="32">state<pos:position pos:line="52" pos:column="37"/></name><operator pos:line="52" pos:column="37">-&gt;<pos:position pos:line="52" pos:column="42"/></operator><name pos:line="52" pos:column="39">lookahead<pos:position pos:line="52" pos:column="48"/></name></name> <operator pos:line="52" pos:column="49">!=<pos:position pos:line="52" pos:column="51"/></operator> <literal type="number" pos:line="52" pos:column="52">0<pos:position pos:line="52" pos:column="53"/></literal> <operator pos:line="52" pos:column="54">||<pos:position pos:line="52" pos:column="56"/></operator>
        <operator pos:line="53" pos:column="9">(<pos:position pos:line="53" pos:column="10"/></operator><name pos:line="53" pos:column="10">flush<pos:position pos:line="53" pos:column="15"/></name> <operator pos:line="53" pos:column="16">==<pos:position pos:line="53" pos:column="18"/></operator> <name pos:line="53" pos:column="19">Z_FINISH<pos:position pos:line="53" pos:column="27"/></name> <operator pos:line="53" pos:column="28">&amp;&amp;<pos:position pos:line="53" pos:column="38"/></operator> <name><name pos:line="53" pos:column="31">state<pos:position pos:line="53" pos:column="36"/></name><operator pos:line="53" pos:column="36">-&gt;<pos:position pos:line="53" pos:column="41"/></operator><name pos:line="53" pos:column="38">status<pos:position pos:line="53" pos:column="44"/></name></name> <operator pos:line="53" pos:column="45">!=<pos:position pos:line="53" pos:column="47"/></operator> <name pos:line="53" pos:column="48">FINISH_STATE<pos:position pos:line="53" pos:column="60"/></name><operator pos:line="53" pos:column="60">)<pos:position pos:line="53" pos:column="61"/></operator></expr>)<pos:position pos:line="53" pos:column="62"/></condition><then pos:line="53" pos:column="62"> <block pos:line="53" pos:column="63">{
        <decl_stmt><decl><type><name pos:line="54" pos:column="9">int<pos:position pos:line="54" pos:column="12"/></name></type> <name pos:line="54" pos:column="13">quit<pos:position pos:line="54" pos:column="17"/></name></decl>;<pos:position pos:line="54" pos:column="18"/></decl_stmt>

        <if pos:line="56" pos:column="9">if <condition pos:line="56" pos:column="12">(<expr><name pos:line="56" pos:column="13">flush<pos:position pos:line="56" pos:column="18"/></name> <operator pos:line="56" pos:column="19">==<pos:position pos:line="56" pos:column="21"/></operator> <name pos:line="56" pos:column="22">Z_FINISH<pos:position pos:line="56" pos:column="30"/></name></expr>)<pos:position pos:line="56" pos:column="31"/></condition><then pos:line="56" pos:column="31"> <block pos:line="56" pos:column="32">{
            <expr_stmt><expr><name><name pos:line="57" pos:column="13">state<pos:position pos:line="57" pos:column="18"/></name><operator pos:line="57" pos:column="18">-&gt;<pos:position pos:line="57" pos:column="23"/></operator><name pos:line="57" pos:column="20">status<pos:position pos:line="57" pos:column="26"/></name></name> <operator pos:line="57" pos:column="27">=<pos:position pos:line="57" pos:column="28"/></operator> <name pos:line="57" pos:column="29">FINISH_STATE<pos:position pos:line="57" pos:column="41"/></name></expr>;<pos:position pos:line="57" pos:column="42"/></expr_stmt>
        }<pos:position pos:line="58" pos:column="10"/></block></then></if>
        <if pos:line="59" pos:column="9">if <condition pos:line="59" pos:column="12">(<expr><name><name pos:line="59" pos:column="13">state<pos:position pos:line="59" pos:column="18"/></name><operator pos:line="59" pos:column="18">-&gt;<pos:position pos:line="59" pos:column="23"/></operator><name pos:line="59" pos:column="20">level<pos:position pos:line="59" pos:column="25"/></name></name> <operator pos:line="59" pos:column="26">&lt;=<pos:position pos:line="59" pos:column="31"/></operator> <literal type="number" pos:line="59" pos:column="29">3<pos:position pos:line="59" pos:column="30"/></literal></expr>)<pos:position pos:line="59" pos:column="31"/></condition><then pos:line="59" pos:column="31"> <block pos:line="59" pos:column="32">{
            <expr_stmt><expr><name pos:line="60" pos:column="13">quit<pos:position pos:line="60" pos:column="17"/></name> <operator pos:line="60" pos:column="18">=<pos:position pos:line="60" pos:column="19"/></operator> <call><name pos:line="60" pos:column="20">deflate_fast<pos:position pos:line="60" pos:column="32"/></name><argument_list pos:line="60" pos:column="32">(<argument><expr><name pos:line="60" pos:column="33">state<pos:position pos:line="60" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="60" pos:column="40">flush<pos:position pos:line="60" pos:column="45"/></name></expr></argument>)<pos:position pos:line="60" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="47"/></expr_stmt>
        }<pos:position pos:line="61" pos:column="10"/></block></then> <else pos:line="61" pos:column="11">else <block pos:line="61" pos:column="16">{
            <expr_stmt><expr><name pos:line="62" pos:column="13">quit<pos:position pos:line="62" pos:column="17"/></name> <operator pos:line="62" pos:column="18">=<pos:position pos:line="62" pos:column="19"/></operator> <call><name pos:line="62" pos:column="20">deflate_slow<pos:position pos:line="62" pos:column="32"/></name><argument_list pos:line="62" pos:column="32">(<argument><expr><name pos:line="62" pos:column="33">state<pos:position pos:line="62" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="40">flush<pos:position pos:line="62" pos:column="45"/></name></expr></argument>)<pos:position pos:line="62" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="47"/></expr_stmt>
        }<pos:position pos:line="63" pos:column="10"/></block></else></if>
        <if pos:line="64" pos:column="9">if <condition pos:line="64" pos:column="12">(<expr><name pos:line="64" pos:column="13">quit<pos:position pos:line="64" pos:column="17"/></name> <operator pos:line="64" pos:column="18">||<pos:position pos:line="64" pos:column="20"/></operator> <name><name pos:line="64" pos:column="21">strm<pos:position pos:line="64" pos:column="25"/></name><operator pos:line="64" pos:column="25">-&gt;<pos:position pos:line="64" pos:column="30"/></operator><name pos:line="64" pos:column="27">avail_out<pos:position pos:line="64" pos:column="36"/></name></name> <operator pos:line="64" pos:column="37">==<pos:position pos:line="64" pos:column="39"/></operator> <literal type="number" pos:line="64" pos:column="40">0<pos:position pos:line="64" pos:column="41"/></literal></expr>)<pos:position pos:line="64" pos:column="42"/></condition><then pos:line="64" pos:column="42">
	    <block type="pseudo"><return pos:line="65" pos:column="13">return <expr><name pos:line="65" pos:column="20">Z_OK<pos:position pos:line="65" pos:column="24"/></name></expr>;<pos:position pos:line="65" pos:column="25"/></return></block></then></if>
        <comment type="block" pos:line="66" pos:column="9">/* If flush != Z_NO_FLUSH &amp;&amp; avail_out == 0, the next call
         * of deflate should use the same flush parameter to make sure
         * that the flush is complete. So we don't have to output an
         * empty block here, this will be done at next call. This also
         * ensures that for a very small output buffer, we emit at most
         * one empty block.
         */</comment>
    }<pos:position pos:line="73" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="75" pos:column="5">/* If a flush was requested, we have a little more to output now. */</comment>
    <if pos:line="76" pos:column="5">if <condition pos:line="76" pos:column="8">(<expr><name pos:line="76" pos:column="9">flush<pos:position pos:line="76" pos:column="14"/></name> <operator pos:line="76" pos:column="15">!=<pos:position pos:line="76" pos:column="17"/></operator> <name pos:line="76" pos:column="18">Z_NO_FLUSH<pos:position pos:line="76" pos:column="28"/></name> <operator pos:line="76" pos:column="29">&amp;&amp;<pos:position pos:line="76" pos:column="39"/></operator> <name pos:line="76" pos:column="32">flush<pos:position pos:line="76" pos:column="37"/></name> <operator pos:line="76" pos:column="38">!=<pos:position pos:line="76" pos:column="40"/></operator> <name pos:line="76" pos:column="41">Z_FINISH<pos:position pos:line="76" pos:column="49"/></name>
	<operator pos:line="77" pos:column="9">&amp;&amp;<pos:position pos:line="77" pos:column="19"/></operator> <name><name pos:line="77" pos:column="12">state<pos:position pos:line="77" pos:column="17"/></name><operator pos:line="77" pos:column="17">-&gt;<pos:position pos:line="77" pos:column="22"/></operator><name pos:line="77" pos:column="19">status<pos:position pos:line="77" pos:column="25"/></name></name> <operator pos:line="77" pos:column="26">!=<pos:position pos:line="77" pos:column="28"/></operator> <name pos:line="77" pos:column="29">FINISH_STATE<pos:position pos:line="77" pos:column="41"/></name></expr>)<pos:position pos:line="77" pos:column="42"/></condition><then pos:line="77" pos:column="42"> <block pos:line="77" pos:column="43">{
	<switch pos:line="78" pos:column="9">switch <condition pos:line="78" pos:column="16">(<expr><name pos:line="78" pos:column="17">flush<pos:position pos:line="78" pos:column="22"/></name></expr>)<pos:position pos:line="78" pos:column="23"/></condition> <block pos:line="78" pos:column="24">{
	<case pos:line="79" pos:column="9">case <expr><name pos:line="79" pos:column="14">Z_PARTIAL_FLUSH<pos:position pos:line="79" pos:column="29"/></name></expr>:<pos:position pos:line="79" pos:column="30"/></case>
	    <expr_stmt><expr><call><name pos:line="80" pos:column="13">ct_align<pos:position pos:line="80" pos:column="21"/></name><argument_list pos:line="80" pos:column="21">(<argument><expr><name pos:line="80" pos:column="22">state<pos:position pos:line="80" pos:column="27"/></name></expr></argument>)<pos:position pos:line="80" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="29"/></expr_stmt>
	    <break pos:line="81" pos:column="13">break;<pos:position pos:line="81" pos:column="19"/></break>
	<case pos:line="82" pos:column="9">case <expr><name pos:line="82" pos:column="14">Z_PACKET_FLUSH<pos:position pos:line="82" pos:column="28"/></name></expr>:<pos:position pos:line="82" pos:column="29"/></case>
	    <comment type="block" pos:line="83" pos:column="13">/* Output just the 3-bit `stored' block type value,
	       but not a zero length. */</comment>
	    <expr_stmt><expr><call><name pos:line="85" pos:column="13">ct_stored_type_only<pos:position pos:line="85" pos:column="32"/></name><argument_list pos:line="85" pos:column="32">(<argument><expr><name pos:line="85" pos:column="33">state<pos:position pos:line="85" pos:column="38"/></name></expr></argument>)<pos:position pos:line="85" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="40"/></expr_stmt>
	    <break pos:line="86" pos:column="13">break;<pos:position pos:line="86" pos:column="19"/></break>
	<default pos:line="87" pos:column="9">default:<pos:position pos:line="87" pos:column="17"/></default>
	    <expr_stmt><expr><call><name pos:line="88" pos:column="13">ct_stored_block<pos:position pos:line="88" pos:column="28"/></name><argument_list pos:line="88" pos:column="28">(<argument><expr><name pos:line="88" pos:column="29">state<pos:position pos:line="88" pos:column="34"/></name></expr></argument>, <argument><expr><operator pos:line="88" pos:column="36">(<pos:position pos:line="88" pos:column="37"/></operator><name pos:line="88" pos:column="37">char<pos:position pos:line="88" pos:column="41"/></name><operator pos:line="88" pos:column="41">*<pos:position pos:line="88" pos:column="42"/></operator><operator pos:line="88" pos:column="42">)<pos:position pos:line="88" pos:column="43"/></operator><literal type="number" pos:line="88" pos:column="43">0<pos:position pos:line="88" pos:column="44"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="88" pos:column="46">0L<pos:position pos:line="88" pos:column="48"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="88" pos:column="50">0<pos:position pos:line="88" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="88" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="53"/></expr_stmt>
	    <comment type="block" pos:line="89" pos:column="13">/* For a full flush, this empty block will be recognized
	     * as a special marker by inflate_sync().
	     */</comment>
	    <if pos:line="92" pos:column="13">if <condition pos:line="92" pos:column="16">(<expr><name pos:line="92" pos:column="17">flush<pos:position pos:line="92" pos:column="22"/></name> <operator pos:line="92" pos:column="23">==<pos:position pos:line="92" pos:column="25"/></operator> <name pos:line="92" pos:column="26">Z_FULL_FLUSH<pos:position pos:line="92" pos:column="38"/></name></expr>)<pos:position pos:line="92" pos:column="39"/></condition><then pos:line="92" pos:column="39"> <block pos:line="92" pos:column="40">{
		<expr_stmt><expr><call><name pos:line="93" pos:column="17">CLEAR_HASH<pos:position pos:line="93" pos:column="27"/></name><argument_list pos:line="93" pos:column="27">(<argument><expr><name pos:line="93" pos:column="28">state<pos:position pos:line="93" pos:column="33"/></name></expr></argument>)<pos:position pos:line="93" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="35"/></expr_stmt>             <comment type="block" pos:line="93" pos:column="48">/* forget history */</comment>
	    }<pos:position pos:line="94" pos:column="14"/></block></then></if>
	}<pos:position pos:line="95" pos:column="10"/></block></switch>
	<expr_stmt><expr><call><name pos:line="96" pos:column="9">flush_pending<pos:position pos:line="96" pos:column="22"/></name><argument_list pos:line="96" pos:column="22">(<argument><expr><name pos:line="96" pos:column="23">strm<pos:position pos:line="96" pos:column="27"/></name></expr></argument>)<pos:position pos:line="96" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="29"/></expr_stmt>
	<if pos:line="97" pos:column="9">if <condition pos:line="97" pos:column="12">(<expr><name><name pos:line="97" pos:column="13">strm<pos:position pos:line="97" pos:column="17"/></name><operator pos:line="97" pos:column="17">-&gt;<pos:position pos:line="97" pos:column="22"/></operator><name pos:line="97" pos:column="19">avail_out<pos:position pos:line="97" pos:column="28"/></name></name> <operator pos:line="97" pos:column="29">==<pos:position pos:line="97" pos:column="31"/></operator> <literal type="number" pos:line="97" pos:column="32">0<pos:position pos:line="97" pos:column="33"/></literal></expr>)<pos:position pos:line="97" pos:column="34"/></condition><then pos:line="97" pos:column="34"> <block pos:line="97" pos:column="35">{
	    <comment type="block" pos:line="98" pos:column="13">/* We'll have to come back to get the rest of the output;
	     * this ensures we don't output a second zero-length stored
	     * block (or whatever).
	     */</comment>
	    <expr_stmt><expr><name><name pos:line="102" pos:column="13">state<pos:position pos:line="102" pos:column="18"/></name><operator pos:line="102" pos:column="18">-&gt;<pos:position pos:line="102" pos:column="23"/></operator><name pos:line="102" pos:column="20">status<pos:position pos:line="102" pos:column="26"/></name></name> <operator pos:line="102" pos:column="27">=<pos:position pos:line="102" pos:column="28"/></operator> <name pos:line="102" pos:column="29">FLUSH_STATE<pos:position pos:line="102" pos:column="40"/></name></expr>;<pos:position pos:line="102" pos:column="41"/></expr_stmt>
	    <return pos:line="103" pos:column="13">return <expr><name pos:line="103" pos:column="20">Z_OK<pos:position pos:line="103" pos:column="24"/></name></expr>;<pos:position pos:line="103" pos:column="25"/></return>
	}<pos:position pos:line="104" pos:column="10"/></block></then></if>
    }<pos:position pos:line="105" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="107" pos:column="5">Assert<pos:position pos:line="107" pos:column="11"/></name><argument_list pos:line="107" pos:column="11">(<argument><expr><name><name pos:line="107" pos:column="12">strm<pos:position pos:line="107" pos:column="16"/></name><operator pos:line="107" pos:column="16">-&gt;<pos:position pos:line="107" pos:column="21"/></operator><name pos:line="107" pos:column="18">avail_out<pos:position pos:line="107" pos:column="27"/></name></name> <operator pos:line="107" pos:column="28">&gt;<pos:position pos:line="107" pos:column="32"/></operator> <literal type="number" pos:line="107" pos:column="30">0<pos:position pos:line="107" pos:column="31"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="107" pos:column="33">"bug2"<pos:position pos:line="107" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="107" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="107" pos:column="41"/></expr_stmt>

    <if pos:line="109" pos:column="5">if <condition pos:line="109" pos:column="8">(<expr><name pos:line="109" pos:column="9">flush<pos:position pos:line="109" pos:column="14"/></name> <operator pos:line="109" pos:column="15">!=<pos:position pos:line="109" pos:column="17"/></operator> <name pos:line="109" pos:column="18">Z_FINISH<pos:position pos:line="109" pos:column="26"/></name></expr>)<pos:position pos:line="109" pos:column="27"/></condition><then pos:line="109" pos:column="27"> <block type="pseudo"><return pos:line="109" pos:column="28">return <expr><name pos:line="109" pos:column="35">Z_OK<pos:position pos:line="109" pos:column="39"/></name></expr>;<pos:position pos:line="109" pos:column="40"/></return></block></then></if>
    <if pos:line="110" pos:column="5">if <condition pos:line="110" pos:column="8">(<expr><name><name pos:line="110" pos:column="9">state<pos:position pos:line="110" pos:column="14"/></name><operator pos:line="110" pos:column="14">-&gt;<pos:position pos:line="110" pos:column="19"/></operator><name pos:line="110" pos:column="16">noheader<pos:position pos:line="110" pos:column="24"/></name></name></expr>)<pos:position pos:line="110" pos:column="25"/></condition><then pos:line="110" pos:column="25"> <block type="pseudo"><return pos:line="110" pos:column="26">return <expr><name pos:line="110" pos:column="33">Z_STREAM_END<pos:position pos:line="110" pos:column="45"/></name></expr>;<pos:position pos:line="110" pos:column="46"/></return></block></then></if>

    <comment type="block" pos:line="112" pos:column="5">/* Write the zlib trailer (adler32) */</comment>
    <expr_stmt><expr><call><name pos:line="113" pos:column="5">putShortMSB<pos:position pos:line="113" pos:column="16"/></name><argument_list pos:line="113" pos:column="16">(<argument><expr><name pos:line="113" pos:column="17">state<pos:position pos:line="113" pos:column="22"/></name></expr></argument>, <argument><expr><call pos:line="113" pos:column="24">(<name pos:line="113" pos:column="25">uInt<pos:position pos:line="113" pos:column="29"/></name>)<argument_list pos:line="113" pos:column="30">(<argument><expr><name><name pos:line="113" pos:column="31">state<pos:position pos:line="113" pos:column="36"/></name><operator pos:line="113" pos:column="36">-&gt;<pos:position pos:line="113" pos:column="41"/></operator><name pos:line="113" pos:column="38">adler<pos:position pos:line="113" pos:column="43"/></name></name> <operator pos:line="113" pos:column="44">&gt;&gt;<pos:position pos:line="113" pos:column="49"/></operator> <literal type="number" pos:line="113" pos:column="47">16<pos:position pos:line="113" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="113" pos:column="50"/></argument_list></call></expr></argument>)<pos:position pos:line="113" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="113" pos:column="52"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="114" pos:column="5">putShortMSB<pos:position pos:line="114" pos:column="16"/></name><argument_list pos:line="114" pos:column="16">(<argument><expr><name pos:line="114" pos:column="17">state<pos:position pos:line="114" pos:column="22"/></name></expr></argument>, <argument><expr><call pos:line="114" pos:column="24">(<name pos:line="114" pos:column="25">uInt<pos:position pos:line="114" pos:column="29"/></name>)<argument_list pos:line="114" pos:column="30">(<argument><expr><name><name pos:line="114" pos:column="31">state<pos:position pos:line="114" pos:column="36"/></name><operator pos:line="114" pos:column="36">-&gt;<pos:position pos:line="114" pos:column="41"/></operator><name pos:line="114" pos:column="38">adler<pos:position pos:line="114" pos:column="43"/></name></name> <operator pos:line="114" pos:column="44">&amp;<pos:position pos:line="114" pos:column="49"/></operator> <literal type="number" pos:line="114" pos:column="46">0xffff<pos:position pos:line="114" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="114" pos:column="53"/></argument_list></call></expr></argument>)<pos:position pos:line="114" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="114" pos:column="55"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="115" pos:column="5">flush_pending<pos:position pos:line="115" pos:column="18"/></name><argument_list pos:line="115" pos:column="18">(<argument><expr><name pos:line="115" pos:column="19">strm<pos:position pos:line="115" pos:column="23"/></name></expr></argument>)<pos:position pos:line="115" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="115" pos:column="25"/></expr_stmt>
    <comment type="block" pos:line="116" pos:column="5">/* If avail_out is zero, the application will call deflate again
     * to flush the rest.
     */</comment>
    <expr_stmt><expr><name><name pos:line="119" pos:column="5">state<pos:position pos:line="119" pos:column="10"/></name><operator pos:line="119" pos:column="10">-&gt;<pos:position pos:line="119" pos:column="15"/></operator><name pos:line="119" pos:column="12">noheader<pos:position pos:line="119" pos:column="20"/></name></name> <operator pos:line="119" pos:column="21">=<pos:position pos:line="119" pos:column="22"/></operator> <operator pos:line="119" pos:column="23">-<pos:position pos:line="119" pos:column="24"/></operator><literal type="number" pos:line="119" pos:column="24">1<pos:position pos:line="119" pos:column="25"/></literal></expr>;<pos:position pos:line="119" pos:column="26"/></expr_stmt> <comment type="block" pos:line="119" pos:column="27">/* write the trailer only once! */</comment>
    <return pos:line="120" pos:column="5">return <expr><ternary><condition><expr><name><name pos:line="120" pos:column="12">state<pos:position pos:line="120" pos:column="17"/></name><operator pos:line="120" pos:column="17">-&gt;<pos:position pos:line="120" pos:column="22"/></operator><name pos:line="120" pos:column="19">pending<pos:position pos:line="120" pos:column="26"/></name></name> <operator pos:line="120" pos:column="27">!=<pos:position pos:line="120" pos:column="29"/></operator> <literal type="number" pos:line="120" pos:column="30">0<pos:position pos:line="120" pos:column="31"/></literal></expr> ?<pos:position pos:line="120" pos:column="33"/></condition><then pos:line="120" pos:column="33"> <expr><name pos:line="120" pos:column="34">Z_OK<pos:position pos:line="120" pos:column="38"/></name></expr> <pos:position pos:line="120" pos:column="39"/></then><else pos:line="120" pos:column="39">: <expr><name pos:line="120" pos:column="41">Z_STREAM_END<pos:position pos:line="120" pos:column="53"/></name></expr></else></ternary></expr>;<pos:position pos:line="120" pos:column="54"/></return>
}<pos:position pos:line="121" pos:column="2"/></block></unit>
