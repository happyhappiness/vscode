<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_21_rsync-2.5.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">BOOL<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">lp_do_parameter<pos:position pos:line="1" pos:column="28"/></name><parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><name pos:line="1" pos:column="29">int<pos:position pos:line="1" pos:column="32"/></name></type> <name pos:line="1" pos:column="33">snum<pos:position pos:line="1" pos:column="37"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="39">char<pos:position pos:line="1" pos:column="43"/></name> <modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier></type><name pos:line="1" pos:column="45">parmname<pos:position pos:line="1" pos:column="53"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="55">char<pos:position pos:line="1" pos:column="59"/></name> <modifier pos:line="1" pos:column="60">*<pos:position pos:line="1" pos:column="61"/></modifier></type><name pos:line="1" pos:column="61">parmvalue<pos:position pos:line="1" pos:column="70"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="71"/></parameter_list>
<block pos:line="2" pos:column="1">{
   <decl_stmt><decl><type><name pos:line="3" pos:column="4">int<pos:position pos:line="3" pos:column="7"/></name></type> <name pos:line="3" pos:column="8">parmnum<pos:position pos:line="3" pos:column="15"/></name></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="17">i<pos:position pos:line="3" pos:column="18"/></name></decl>;<pos:position pos:line="3" pos:column="19"/></decl_stmt>
   <decl_stmt><decl><type><name pos:line="4" pos:column="4">void<pos:position pos:line="4" pos:column="8"/></name> <modifier pos:line="4" pos:column="9">*<pos:position pos:line="4" pos:column="10"/></modifier></type><name pos:line="4" pos:column="10">parm_ptr<pos:position pos:line="4" pos:column="18"/></name><init pos:line="4" pos:column="18">=<expr><name pos:line="4" pos:column="19">NULL<pos:position pos:line="4" pos:column="23"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="24"/></decl_stmt> <comment type="block" pos:line="4" pos:column="25">/* where we are going to store the result */</comment>
   <decl_stmt><decl><type><name pos:line="5" pos:column="4">void<pos:position pos:line="5" pos:column="8"/></name> <modifier pos:line="5" pos:column="9">*<pos:position pos:line="5" pos:column="10"/></modifier></type><name pos:line="5" pos:column="10">def_ptr<pos:position pos:line="5" pos:column="17"/></name><init pos:line="5" pos:column="17">=<expr><name pos:line="5" pos:column="18">NULL<pos:position pos:line="5" pos:column="22"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="23"/></decl_stmt>

   <expr_stmt><expr><name pos:line="7" pos:column="4">parmnum<pos:position pos:line="7" pos:column="11"/></name> <operator pos:line="7" pos:column="12">=<pos:position pos:line="7" pos:column="13"/></operator> <call><name pos:line="7" pos:column="14">map_parameter<pos:position pos:line="7" pos:column="27"/></name><argument_list pos:line="7" pos:column="27">(<argument><expr><name pos:line="7" pos:column="28">parmname<pos:position pos:line="7" pos:column="36"/></name></expr></argument>)<pos:position pos:line="7" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="38"/></expr_stmt>

   <if pos:line="9" pos:column="4">if <condition pos:line="9" pos:column="7">(<expr><name pos:line="9" pos:column="8">parmnum<pos:position pos:line="9" pos:column="15"/></name> <operator pos:line="9" pos:column="16">&lt;<pos:position pos:line="9" pos:column="20"/></operator> <literal type="number" pos:line="9" pos:column="18">0<pos:position pos:line="9" pos:column="19"/></literal></expr>)<pos:position pos:line="9" pos:column="20"/></condition><then pos:line="9" pos:column="20">
     <block pos:line="10" pos:column="6">{
       <expr_stmt><expr><call><name pos:line="11" pos:column="8">rprintf<pos:position pos:line="11" pos:column="15"/></name><argument_list pos:line="11" pos:column="15">(<argument><expr><name pos:line="11" pos:column="16">FERROR<pos:position pos:line="11" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="24">"IGNORING unknown parameter \"%s\"\n"<pos:position pos:line="11" pos:column="61"/></literal></expr></argument>, <argument><expr><name pos:line="11" pos:column="63">parmname<pos:position pos:line="11" pos:column="71"/></name></expr></argument>)<pos:position pos:line="11" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="73"/></expr_stmt>
       <return pos:line="12" pos:column="8">return<expr><operator pos:line="12" pos:column="14">(<pos:position pos:line="12" pos:column="15"/></operator><name pos:line="12" pos:column="15">True<pos:position pos:line="12" pos:column="19"/></name><operator pos:line="12" pos:column="19">)<pos:position pos:line="12" pos:column="20"/></operator></expr>;<pos:position pos:line="12" pos:column="21"/></return>
     }<pos:position pos:line="13" pos:column="7"/></block></then></if>

   <expr_stmt><expr><name pos:line="15" pos:column="4">def_ptr<pos:position pos:line="15" pos:column="11"/></name> <operator pos:line="15" pos:column="12">=<pos:position pos:line="15" pos:column="13"/></operator> <name><name pos:line="15" pos:column="14">parm_table<pos:position pos:line="15" pos:column="24"/></name><index pos:line="15" pos:column="24">[<expr><name pos:line="15" pos:column="25">parmnum<pos:position pos:line="15" pos:column="32"/></name></expr>]<pos:position pos:line="15" pos:column="33"/></index></name><operator pos:line="15" pos:column="33">.<pos:position pos:line="15" pos:column="34"/></operator><name pos:line="15" pos:column="34">ptr<pos:position pos:line="15" pos:column="37"/></name></expr>;<pos:position pos:line="15" pos:column="38"/></expr_stmt>

   <comment type="block" pos:line="17" pos:column="4">/* we might point at a service, the default service or a global */</comment>
   <if pos:line="18" pos:column="4">if <condition pos:line="18" pos:column="7">(<expr><name pos:line="18" pos:column="8">snum<pos:position pos:line="18" pos:column="12"/></name> <operator pos:line="18" pos:column="13">&lt;<pos:position pos:line="18" pos:column="17"/></operator> <literal type="number" pos:line="18" pos:column="15">0<pos:position pos:line="18" pos:column="16"/></literal></expr>)<pos:position pos:line="18" pos:column="17"/></condition><then pos:line="18" pos:column="17"> <block pos:line="18" pos:column="18">{
     <expr_stmt><expr><name pos:line="19" pos:column="6">parm_ptr<pos:position pos:line="19" pos:column="14"/></name> <operator pos:line="19" pos:column="15">=<pos:position pos:line="19" pos:column="16"/></operator> <name pos:line="19" pos:column="17">def_ptr<pos:position pos:line="19" pos:column="24"/></name></expr>;<pos:position pos:line="19" pos:column="25"/></expr_stmt>
   }<pos:position pos:line="20" pos:column="5"/></block></then> <else pos:line="20" pos:column="6">else <block pos:line="20" pos:column="11">{
       <if pos:line="21" pos:column="8">if <condition pos:line="21" pos:column="11">(<expr><name><name pos:line="21" pos:column="12">parm_table<pos:position pos:line="21" pos:column="22"/></name><index pos:line="21" pos:column="22">[<expr><name pos:line="21" pos:column="23">parmnum<pos:position pos:line="21" pos:column="30"/></name></expr>]<pos:position pos:line="21" pos:column="31"/></index></name><operator pos:line="21" pos:column="31">.<pos:position pos:line="21" pos:column="32"/></operator><name pos:line="21" pos:column="32">class<pos:position pos:line="21" pos:column="37"/></name> <operator pos:line="21" pos:column="38">==<pos:position pos:line="21" pos:column="40"/></operator> <name pos:line="21" pos:column="41">P_GLOBAL<pos:position pos:line="21" pos:column="49"/></name></expr>)<pos:position pos:line="21" pos:column="50"/></condition><then pos:line="21" pos:column="50"> <block pos:line="21" pos:column="51">{
	   <expr_stmt><expr><call><name pos:line="22" pos:column="12">rprintf<pos:position pos:line="22" pos:column="19"/></name><argument_list pos:line="22" pos:column="19">(<argument><expr><name pos:line="22" pos:column="20">FERROR<pos:position pos:line="22" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="22" pos:column="28">"Global parameter %s found in service section!\n"<pos:position pos:line="22" pos:column="77"/></literal></expr></argument>,<argument><expr><name pos:line="22" pos:column="78">parmname<pos:position pos:line="22" pos:column="86"/></name></expr></argument>)<pos:position pos:line="22" pos:column="87"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="88"/></expr_stmt>
	   <return pos:line="23" pos:column="12">return<expr><operator pos:line="23" pos:column="18">(<pos:position pos:line="23" pos:column="19"/></operator><name pos:line="23" pos:column="19">True<pos:position pos:line="23" pos:column="23"/></name><operator pos:line="23" pos:column="23">)<pos:position pos:line="23" pos:column="24"/></operator></expr>;<pos:position pos:line="23" pos:column="25"/></return>
	 }<pos:position pos:line="24" pos:column="11"/></block></then></if>
       <expr_stmt><expr><name pos:line="25" pos:column="8">parm_ptr<pos:position pos:line="25" pos:column="16"/></name> <operator pos:line="25" pos:column="17">=<pos:position pos:line="25" pos:column="18"/></operator> <operator pos:line="25" pos:column="19">(<pos:position pos:line="25" pos:column="20"/></operator><operator pos:line="25" pos:column="20">(<pos:position pos:line="25" pos:column="21"/></operator><name pos:line="25" pos:column="21">char<pos:position pos:line="25" pos:column="25"/></name> <operator pos:line="25" pos:column="26">*<pos:position pos:line="25" pos:column="27"/></operator><operator pos:line="25" pos:column="27">)<pos:position pos:line="25" pos:column="28"/></operator><call><name pos:line="25" pos:column="28">pSERVICE<pos:position pos:line="25" pos:column="36"/></name><argument_list pos:line="25" pos:column="36">(<argument><expr><name pos:line="25" pos:column="37">snum<pos:position pos:line="25" pos:column="41"/></name></expr></argument>)<pos:position pos:line="25" pos:column="42"/></argument_list></call><operator pos:line="25" pos:column="42">)<pos:position pos:line="25" pos:column="43"/></operator> <operator pos:line="25" pos:column="44">+<pos:position pos:line="25" pos:column="45"/></operator> <call><name pos:line="25" pos:column="46">PTR_DIFF<pos:position pos:line="25" pos:column="54"/></name><argument_list pos:line="25" pos:column="54">(<argument><expr><name pos:line="25" pos:column="55">def_ptr<pos:position pos:line="25" pos:column="62"/></name></expr></argument>,<argument><expr><operator pos:line="25" pos:column="63">&amp;<pos:position pos:line="25" pos:column="68"/></operator><name pos:line="25" pos:column="64">sDefault<pos:position pos:line="25" pos:column="72"/></name></expr></argument>)<pos:position pos:line="25" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="74"/></expr_stmt>
   }<pos:position pos:line="26" pos:column="5"/></block></else></if>

   <comment type="block" pos:line="28" pos:column="4">/* now switch on the type of variable it is */</comment>
   <switch pos:line="29" pos:column="4">switch <condition pos:line="29" pos:column="11">(<expr><name><name pos:line="29" pos:column="12">parm_table<pos:position pos:line="29" pos:column="22"/></name><index pos:line="29" pos:column="22">[<expr><name pos:line="29" pos:column="23">parmnum<pos:position pos:line="29" pos:column="30"/></name></expr>]<pos:position pos:line="29" pos:column="31"/></index></name><operator pos:line="29" pos:column="31">.<pos:position pos:line="29" pos:column="32"/></operator><name pos:line="29" pos:column="32">type<pos:position pos:line="29" pos:column="36"/></name></expr>)<pos:position pos:line="29" pos:column="37"/></condition>
     <block pos:line="30" pos:column="6">{
     <case pos:line="31" pos:column="6">case <expr><name pos:line="31" pos:column="11">P_BOOL<pos:position pos:line="31" pos:column="17"/></name></expr>:<pos:position pos:line="31" pos:column="18"/></case>
       <expr_stmt><expr><call><name pos:line="32" pos:column="8">set_boolean<pos:position pos:line="32" pos:column="19"/></name><argument_list pos:line="32" pos:column="19">(<argument><expr><name pos:line="32" pos:column="20">parm_ptr<pos:position pos:line="32" pos:column="28"/></name></expr></argument>,<argument><expr><name pos:line="32" pos:column="29">parmvalue<pos:position pos:line="32" pos:column="38"/></name></expr></argument>)<pos:position pos:line="32" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="40"/></expr_stmt>
       <break pos:line="33" pos:column="8">break;<pos:position pos:line="33" pos:column="14"/></break>

     <case pos:line="35" pos:column="6">case <expr><name pos:line="35" pos:column="11">P_BOOLREV<pos:position pos:line="35" pos:column="20"/></name></expr>:<pos:position pos:line="35" pos:column="21"/></case>
       <expr_stmt><expr><call><name pos:line="36" pos:column="8">set_boolean<pos:position pos:line="36" pos:column="19"/></name><argument_list pos:line="36" pos:column="19">(<argument><expr><name pos:line="36" pos:column="20">parm_ptr<pos:position pos:line="36" pos:column="28"/></name></expr></argument>,<argument><expr><name pos:line="36" pos:column="29">parmvalue<pos:position pos:line="36" pos:column="38"/></name></expr></argument>)<pos:position pos:line="36" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="40"/></expr_stmt>
       <expr_stmt><expr><operator pos:line="37" pos:column="8">*<pos:position pos:line="37" pos:column="9"/></operator><operator pos:line="37" pos:column="9">(<pos:position pos:line="37" pos:column="10"/></operator><name pos:line="37" pos:column="10">BOOL<pos:position pos:line="37" pos:column="14"/></name> <operator pos:line="37" pos:column="15">*<pos:position pos:line="37" pos:column="16"/></operator><operator pos:line="37" pos:column="16">)<pos:position pos:line="37" pos:column="17"/></operator><name pos:line="37" pos:column="17">parm_ptr<pos:position pos:line="37" pos:column="25"/></name> <operator pos:line="37" pos:column="26">=<pos:position pos:line="37" pos:column="27"/></operator> <operator pos:line="37" pos:column="28">!<pos:position pos:line="37" pos:column="29"/></operator> <operator pos:line="37" pos:column="30">*<pos:position pos:line="37" pos:column="31"/></operator><operator pos:line="37" pos:column="31">(<pos:position pos:line="37" pos:column="32"/></operator><name pos:line="37" pos:column="32">BOOL<pos:position pos:line="37" pos:column="36"/></name> <operator pos:line="37" pos:column="37">*<pos:position pos:line="37" pos:column="38"/></operator><operator pos:line="37" pos:column="38">)<pos:position pos:line="37" pos:column="39"/></operator><name pos:line="37" pos:column="39">parm_ptr<pos:position pos:line="37" pos:column="47"/></name></expr>;<pos:position pos:line="37" pos:column="48"/></expr_stmt>
       <break pos:line="38" pos:column="8">break;<pos:position pos:line="38" pos:column="14"/></break>

     <case pos:line="40" pos:column="6">case <expr><name pos:line="40" pos:column="11">P_INTEGER<pos:position pos:line="40" pos:column="20"/></name></expr>:<pos:position pos:line="40" pos:column="21"/></case>
       <expr_stmt><expr><operator pos:line="41" pos:column="8">*<pos:position pos:line="41" pos:column="9"/></operator><operator pos:line="41" pos:column="9">(<pos:position pos:line="41" pos:column="10"/></operator><name pos:line="41" pos:column="10">int<pos:position pos:line="41" pos:column="13"/></name> <operator pos:line="41" pos:column="14">*<pos:position pos:line="41" pos:column="15"/></operator><operator pos:line="41" pos:column="15">)<pos:position pos:line="41" pos:column="16"/></operator><name pos:line="41" pos:column="16">parm_ptr<pos:position pos:line="41" pos:column="24"/></name> <operator pos:line="41" pos:column="25">=<pos:position pos:line="41" pos:column="26"/></operator> <call><name pos:line="41" pos:column="27">atoi<pos:position pos:line="41" pos:column="31"/></name><argument_list pos:line="41" pos:column="31">(<argument><expr><name pos:line="41" pos:column="32">parmvalue<pos:position pos:line="41" pos:column="41"/></name></expr></argument>)<pos:position pos:line="41" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="43"/></expr_stmt>
       <break pos:line="42" pos:column="8">break;<pos:position pos:line="42" pos:column="14"/></break>

     <case pos:line="44" pos:column="6">case <expr><name pos:line="44" pos:column="11">P_CHAR<pos:position pos:line="44" pos:column="17"/></name></expr>:<pos:position pos:line="44" pos:column="18"/></case>
       <expr_stmt><expr><operator pos:line="45" pos:column="8">*<pos:position pos:line="45" pos:column="9"/></operator><operator pos:line="45" pos:column="9">(<pos:position pos:line="45" pos:column="10"/></operator><name pos:line="45" pos:column="10">char<pos:position pos:line="45" pos:column="14"/></name> <operator pos:line="45" pos:column="15">*<pos:position pos:line="45" pos:column="16"/></operator><operator pos:line="45" pos:column="16">)<pos:position pos:line="45" pos:column="17"/></operator><name pos:line="45" pos:column="17">parm_ptr<pos:position pos:line="45" pos:column="25"/></name> <operator pos:line="45" pos:column="26">=<pos:position pos:line="45" pos:column="27"/></operator> <operator pos:line="45" pos:column="28">*<pos:position pos:line="45" pos:column="29"/></operator><name pos:line="45" pos:column="29">parmvalue<pos:position pos:line="45" pos:column="38"/></name></expr>;<pos:position pos:line="45" pos:column="39"/></expr_stmt>
       <break pos:line="46" pos:column="8">break;<pos:position pos:line="46" pos:column="14"/></break>

     <case pos:line="48" pos:column="6">case <expr><name pos:line="48" pos:column="11">P_OCTAL<pos:position pos:line="48" pos:column="18"/></name></expr>:<pos:position pos:line="48" pos:column="19"/></case>
       <expr_stmt><expr><call><name pos:line="49" pos:column="8">sscanf<pos:position pos:line="49" pos:column="14"/></name><argument_list pos:line="49" pos:column="14">(<argument><expr><name pos:line="49" pos:column="15">parmvalue<pos:position pos:line="49" pos:column="24"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="49" pos:column="25">"%o"<pos:position pos:line="49" pos:column="29"/></literal></expr></argument>,<argument><expr><operator pos:line="49" pos:column="30">(<pos:position pos:line="49" pos:column="31"/></operator><name pos:line="49" pos:column="31">int<pos:position pos:line="49" pos:column="34"/></name> <operator pos:line="49" pos:column="35">*<pos:position pos:line="49" pos:column="36"/></operator><operator pos:line="49" pos:column="36">)<pos:position pos:line="49" pos:column="37"/></operator><name pos:line="49" pos:column="37">parm_ptr<pos:position pos:line="49" pos:column="45"/></name></expr></argument>)<pos:position pos:line="49" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="47"/></expr_stmt>
       <break pos:line="50" pos:column="8">break;<pos:position pos:line="50" pos:column="14"/></break>

     <case pos:line="52" pos:column="6">case <expr><name pos:line="52" pos:column="11">P_STRING<pos:position pos:line="52" pos:column="19"/></name></expr>:<pos:position pos:line="52" pos:column="20"/></case>
       <expr_stmt><expr><call><name pos:line="53" pos:column="8">string_set<pos:position pos:line="53" pos:column="18"/></name><argument_list pos:line="53" pos:column="18">(<argument><expr><name pos:line="53" pos:column="19">parm_ptr<pos:position pos:line="53" pos:column="27"/></name></expr></argument>,<argument><expr><name pos:line="53" pos:column="28">parmvalue<pos:position pos:line="53" pos:column="37"/></name></expr></argument>)<pos:position pos:line="53" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="39"/></expr_stmt>
       <break pos:line="54" pos:column="8">break;<pos:position pos:line="54" pos:column="14"/></break>

     <case pos:line="56" pos:column="6">case <expr><name pos:line="56" pos:column="11">P_GSTRING<pos:position pos:line="56" pos:column="20"/></name></expr>:<pos:position pos:line="56" pos:column="21"/></case>
       <expr_stmt><expr><call><name pos:line="57" pos:column="8">strlcpy<pos:position pos:line="57" pos:column="15"/></name><argument_list pos:line="57" pos:column="15">(<argument><expr><operator pos:line="57" pos:column="16">(<pos:position pos:line="57" pos:column="17"/></operator><name pos:line="57" pos:column="17">char<pos:position pos:line="57" pos:column="21"/></name> <operator pos:line="57" pos:column="22">*<pos:position pos:line="57" pos:column="23"/></operator><operator pos:line="57" pos:column="23">)<pos:position pos:line="57" pos:column="24"/></operator><name pos:line="57" pos:column="24">parm_ptr<pos:position pos:line="57" pos:column="32"/></name></expr></argument>,<argument><expr><name pos:line="57" pos:column="33">parmvalue<pos:position pos:line="57" pos:column="42"/></name></expr></argument>,<argument><expr><sizeof pos:line="57" pos:column="43">sizeof<argument_list pos:line="57" pos:column="49">(<argument><expr><name pos:line="57" pos:column="50">pstring<pos:position pos:line="57" pos:column="57"/></name></expr></argument>)<pos:position pos:line="57" pos:column="58"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="57" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="60"/></expr_stmt>
       <break pos:line="58" pos:column="8">break;<pos:position pos:line="58" pos:column="14"/></break>

     <case pos:line="60" pos:column="6">case <expr><name pos:line="60" pos:column="11">P_ENUM<pos:position pos:line="60" pos:column="17"/></name></expr>:<pos:position pos:line="60" pos:column="18"/></case>
	     <for pos:line="61" pos:column="14">for <control pos:line="61" pos:column="18">(<init><expr><name pos:line="61" pos:column="19">i<pos:position pos:line="61" pos:column="20"/></name><operator pos:line="61" pos:column="20">=<pos:position pos:line="61" pos:column="21"/></operator><literal type="number" pos:line="61" pos:column="21">0<pos:position pos:line="61" pos:column="22"/></literal></expr>;<pos:position pos:line="61" pos:column="23"/></init><condition><expr><name><name pos:line="61" pos:column="23">parm_table<pos:position pos:line="61" pos:column="33"/></name><index pos:line="61" pos:column="33">[<expr><name pos:line="61" pos:column="34">parmnum<pos:position pos:line="61" pos:column="41"/></name></expr>]<pos:position pos:line="61" pos:column="42"/></index></name><operator pos:line="61" pos:column="42">.<pos:position pos:line="61" pos:column="43"/></operator><name><name pos:line="61" pos:column="43">enum_list<pos:position pos:line="61" pos:column="52"/></name><index pos:line="61" pos:column="52">[<expr><name pos:line="61" pos:column="53">i<pos:position pos:line="61" pos:column="54"/></name></expr>]<pos:position pos:line="61" pos:column="55"/></index></name><operator pos:line="61" pos:column="55">.<pos:position pos:line="61" pos:column="56"/></operator><name pos:line="61" pos:column="56">name<pos:position pos:line="61" pos:column="60"/></name></expr>;<pos:position pos:line="61" pos:column="61"/></condition><incr><expr><name pos:line="61" pos:column="61">i<pos:position pos:line="61" pos:column="62"/></name><operator pos:line="61" pos:column="62">++<pos:position pos:line="61" pos:column="64"/></operator></expr></incr>)<pos:position pos:line="61" pos:column="65"/></control> <block pos:line="61" pos:column="66">{
		     <if pos:line="62" pos:column="22">if <condition pos:line="62" pos:column="25">(<expr><call><name pos:line="62" pos:column="26">strequal<pos:position pos:line="62" pos:column="34"/></name><argument_list pos:line="62" pos:column="34">(<argument><expr><name pos:line="62" pos:column="35">parmvalue<pos:position pos:line="62" pos:column="44"/></name></expr></argument>, <argument><expr><name><name pos:line="62" pos:column="46">parm_table<pos:position pos:line="62" pos:column="56"/></name><index pos:line="62" pos:column="56">[<expr><name pos:line="62" pos:column="57">parmnum<pos:position pos:line="62" pos:column="64"/></name></expr>]<pos:position pos:line="62" pos:column="65"/></index></name><operator pos:line="62" pos:column="65">.<pos:position pos:line="62" pos:column="66"/></operator><name><name pos:line="62" pos:column="66">enum_list<pos:position pos:line="62" pos:column="75"/></name><index pos:line="62" pos:column="75">[<expr><name pos:line="62" pos:column="76">i<pos:position pos:line="62" pos:column="77"/></name></expr>]<pos:position pos:line="62" pos:column="78"/></index></name><operator pos:line="62" pos:column="78">.<pos:position pos:line="62" pos:column="79"/></operator><name pos:line="62" pos:column="79">name<pos:position pos:line="62" pos:column="83"/></name></expr></argument>)<pos:position pos:line="62" pos:column="84"/></argument_list></call></expr>)<pos:position pos:line="62" pos:column="85"/></condition><then pos:line="62" pos:column="85"> <block pos:line="62" pos:column="86">{
			     <expr_stmt><expr><operator pos:line="63" pos:column="30">*<pos:position pos:line="63" pos:column="31"/></operator><operator pos:line="63" pos:column="31">(<pos:position pos:line="63" pos:column="32"/></operator><name pos:line="63" pos:column="32">int<pos:position pos:line="63" pos:column="35"/></name> <operator pos:line="63" pos:column="36">*<pos:position pos:line="63" pos:column="37"/></operator><operator pos:line="63" pos:column="37">)<pos:position pos:line="63" pos:column="38"/></operator><name pos:line="63" pos:column="38">parm_ptr<pos:position pos:line="63" pos:column="46"/></name> <operator pos:line="63" pos:column="47">=<pos:position pos:line="63" pos:column="48"/></operator> <name><name pos:line="63" pos:column="49">parm_table<pos:position pos:line="63" pos:column="59"/></name><index pos:line="63" pos:column="59">[<expr><name pos:line="63" pos:column="60">parmnum<pos:position pos:line="63" pos:column="67"/></name></expr>]<pos:position pos:line="63" pos:column="68"/></index></name><operator pos:line="63" pos:column="68">.<pos:position pos:line="63" pos:column="69"/></operator><name><name pos:line="63" pos:column="69">enum_list<pos:position pos:line="63" pos:column="78"/></name><index pos:line="63" pos:column="78">[<expr><name pos:line="63" pos:column="79">i<pos:position pos:line="63" pos:column="80"/></name></expr>]<pos:position pos:line="63" pos:column="81"/></index></name><operator pos:line="63" pos:column="81">.<pos:position pos:line="63" pos:column="82"/></operator><name pos:line="63" pos:column="82">value<pos:position pos:line="63" pos:column="87"/></name></expr>;<pos:position pos:line="63" pos:column="88"/></expr_stmt>
			     <break pos:line="64" pos:column="30">break;<pos:position pos:line="64" pos:column="36"/></break>
		     }<pos:position pos:line="65" pos:column="23"/></block></then></if>
	     }<pos:position pos:line="66" pos:column="15"/></block></for>
	     <if pos:line="67" pos:column="14">if <condition pos:line="67" pos:column="17">(<expr><operator pos:line="67" pos:column="18">!<pos:position pos:line="67" pos:column="19"/></operator><name><name pos:line="67" pos:column="19">parm_table<pos:position pos:line="67" pos:column="29"/></name><index pos:line="67" pos:column="29">[<expr><name pos:line="67" pos:column="30">parmnum<pos:position pos:line="67" pos:column="37"/></name></expr>]<pos:position pos:line="67" pos:column="38"/></index></name><operator pos:line="67" pos:column="38">.<pos:position pos:line="67" pos:column="39"/></operator><name><name pos:line="67" pos:column="39">enum_list<pos:position pos:line="67" pos:column="48"/></name><index pos:line="67" pos:column="48">[<expr><name pos:line="67" pos:column="49">i<pos:position pos:line="67" pos:column="50"/></name></expr>]<pos:position pos:line="67" pos:column="51"/></index></name><operator pos:line="67" pos:column="51">.<pos:position pos:line="67" pos:column="52"/></operator><name pos:line="67" pos:column="52">name<pos:position pos:line="67" pos:column="56"/></name></expr>)<pos:position pos:line="67" pos:column="57"/></condition><then pos:line="67" pos:column="57"> <block pos:line="67" pos:column="58">{
		     <if pos:line="68" pos:column="22">if <condition pos:line="68" pos:column="25">(<expr><call><name pos:line="68" pos:column="26">atoi<pos:position pos:line="68" pos:column="30"/></name><argument_list pos:line="68" pos:column="30">(<argument><expr><name pos:line="68" pos:column="31">parmvalue<pos:position pos:line="68" pos:column="40"/></name></expr></argument>)<pos:position pos:line="68" pos:column="41"/></argument_list></call> <operator pos:line="68" pos:column="42">&gt;<pos:position pos:line="68" pos:column="46"/></operator> <literal type="number" pos:line="68" pos:column="44">0<pos:position pos:line="68" pos:column="45"/></literal></expr>)<pos:position pos:line="68" pos:column="46"/></condition><then pos:line="68" pos:column="46">
			     <block type="pseudo"><expr_stmt><expr><operator pos:line="69" pos:column="30">*<pos:position pos:line="69" pos:column="31"/></operator><operator pos:line="69" pos:column="31">(<pos:position pos:line="69" pos:column="32"/></operator><name pos:line="69" pos:column="32">int<pos:position pos:line="69" pos:column="35"/></name> <operator pos:line="69" pos:column="36">*<pos:position pos:line="69" pos:column="37"/></operator><operator pos:line="69" pos:column="37">)<pos:position pos:line="69" pos:column="38"/></operator><name pos:line="69" pos:column="38">parm_ptr<pos:position pos:line="69" pos:column="46"/></name> <operator pos:line="69" pos:column="47">=<pos:position pos:line="69" pos:column="48"/></operator> <call><name pos:line="69" pos:column="49">atoi<pos:position pos:line="69" pos:column="53"/></name><argument_list pos:line="69" pos:column="53">(<argument><expr><name pos:line="69" pos:column="54">parmvalue<pos:position pos:line="69" pos:column="63"/></name></expr></argument>)<pos:position pos:line="69" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="65"/></expr_stmt></block></then></if>
	     }<pos:position pos:line="70" pos:column="15"/></block></then></if>
	     <break pos:line="71" pos:column="14">break;<pos:position pos:line="71" pos:column="20"/></break>
     <case pos:line="72" pos:column="6">case <expr><name pos:line="72" pos:column="11">P_SEP<pos:position pos:line="72" pos:column="16"/></name></expr>:<pos:position pos:line="72" pos:column="17"/></case>
	     <break pos:line="73" pos:column="14">break;<pos:position pos:line="73" pos:column="20"/></break>
     }<pos:position pos:line="74" pos:column="7"/></block></switch>

   <return pos:line="76" pos:column="4">return<expr><operator pos:line="76" pos:column="10">(<pos:position pos:line="76" pos:column="11"/></operator><name pos:line="76" pos:column="11">True<pos:position pos:line="76" pos:column="15"/></name><operator pos:line="76" pos:column="15">)<pos:position pos:line="76" pos:column="16"/></operator></expr>;<pos:position pos:line="76" pos:column="17"/></return>
}<pos:position pos:line="77" pos:column="2"/></block></function></unit>
