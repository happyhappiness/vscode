<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_74_rsync-2.5.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">writefd_unbuffered<pos:position pos:line="1" pos:column="31"/></name><parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><name pos:line="1" pos:column="32">int<pos:position pos:line="1" pos:column="35"/></name></type> <name pos:line="1" pos:column="36">fd<pos:position pos:line="1" pos:column="38"/></name></decl></parameter>,<parameter><decl><type><name pos:line="1" pos:column="39">char<pos:position pos:line="1" pos:column="43"/></name> <modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier></type><name pos:line="1" pos:column="45">buf<pos:position pos:line="1" pos:column="48"/></name></decl></parameter>,<parameter><decl><type><name pos:line="1" pos:column="49">size_t<pos:position pos:line="1" pos:column="55"/></name></type> <name pos:line="1" pos:column="56">len<pos:position pos:line="1" pos:column="59"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="60"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">size_t<pos:position pos:line="3" pos:column="15"/></name></type> <name pos:line="3" pos:column="16">total<pos:position pos:line="3" pos:column="21"/></name> <init pos:line="3" pos:column="22">= <expr><literal type="number" pos:line="3" pos:column="24">0<pos:position pos:line="3" pos:column="25"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="26"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">fd_set<pos:position pos:line="4" pos:column="15"/></name></type> <name pos:line="4" pos:column="16">w_fds<pos:position pos:line="4" pos:column="21"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="23">r_fds<pos:position pos:line="4" pos:column="28"/></name></decl>;<pos:position pos:line="4" pos:column="29"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">fd_count<pos:position pos:line="5" pos:column="21"/></name></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="23">count<pos:position pos:line="5" pos:column="28"/></name></decl>;<pos:position pos:line="5" pos:column="29"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">timeval<pos:position pos:line="6" pos:column="23"/></name></name></type> <name pos:line="6" pos:column="24">tv<pos:position pos:line="6" pos:column="26"/></name></decl>;<pos:position pos:line="6" pos:column="27"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="8" pos:column="9">err_list_push<pos:position pos:line="8" pos:column="22"/></name><argument_list pos:line="8" pos:column="22">()<pos:position pos:line="8" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="25"/></expr_stmt>

	<expr_stmt><expr><name pos:line="10" pos:column="9">no_flush<pos:position pos:line="10" pos:column="17"/></name><operator pos:line="10" pos:column="17">++<pos:position pos:line="10" pos:column="19"/></operator></expr>;<pos:position pos:line="10" pos:column="20"/></expr_stmt>

	<while pos:line="12" pos:column="9">while <condition pos:line="12" pos:column="15">(<expr><name pos:line="12" pos:column="16">total<pos:position pos:line="12" pos:column="21"/></name> <operator pos:line="12" pos:column="22">&lt;<pos:position pos:line="12" pos:column="26"/></operator> <name pos:line="12" pos:column="24">len<pos:position pos:line="12" pos:column="27"/></name></expr>)<pos:position pos:line="12" pos:column="28"/></condition> <block pos:line="12" pos:column="29">{
		<expr_stmt><expr><call><name pos:line="13" pos:column="17">FD_ZERO<pos:position pos:line="13" pos:column="24"/></name><argument_list pos:line="13" pos:column="24">(<argument><expr><operator pos:line="13" pos:column="25">&amp;<pos:position pos:line="13" pos:column="30"/></operator><name pos:line="13" pos:column="26">w_fds<pos:position pos:line="13" pos:column="31"/></name></expr></argument>)<pos:position pos:line="13" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="33"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="14" pos:column="17">FD_ZERO<pos:position pos:line="14" pos:column="24"/></name><argument_list pos:line="14" pos:column="24">(<argument><expr><operator pos:line="14" pos:column="25">&amp;<pos:position pos:line="14" pos:column="30"/></operator><name pos:line="14" pos:column="26">r_fds<pos:position pos:line="14" pos:column="31"/></name></expr></argument>)<pos:position pos:line="14" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="33"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="15" pos:column="17">FD_SET<pos:position pos:line="15" pos:column="23"/></name><argument_list pos:line="15" pos:column="23">(<argument><expr><name pos:line="15" pos:column="24">fd<pos:position pos:line="15" pos:column="26"/></name></expr></argument>,<argument><expr><operator pos:line="15" pos:column="27">&amp;<pos:position pos:line="15" pos:column="32"/></operator><name pos:line="15" pos:column="28">w_fds<pos:position pos:line="15" pos:column="33"/></name></expr></argument>)<pos:position pos:line="15" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="35"/></expr_stmt>
		<expr_stmt><expr><name pos:line="16" pos:column="17">fd_count<pos:position pos:line="16" pos:column="25"/></name> <operator pos:line="16" pos:column="26">=<pos:position pos:line="16" pos:column="27"/></operator> <name pos:line="16" pos:column="28">fd<pos:position pos:line="16" pos:column="30"/></name></expr>;<pos:position pos:line="16" pos:column="31"/></expr_stmt>

		<if pos:line="18" pos:column="17">if <condition pos:line="18" pos:column="20">(<expr><name pos:line="18" pos:column="21">io_error_fd<pos:position pos:line="18" pos:column="32"/></name> <operator pos:line="18" pos:column="33">!=<pos:position pos:line="18" pos:column="35"/></operator> <operator pos:line="18" pos:column="36">-<pos:position pos:line="18" pos:column="37"/></operator><literal type="number" pos:line="18" pos:column="37">1<pos:position pos:line="18" pos:column="38"/></literal></expr>)<pos:position pos:line="18" pos:column="39"/></condition><then pos:line="18" pos:column="39"> <block pos:line="18" pos:column="40">{
			<expr_stmt><expr><call><name pos:line="19" pos:column="25">FD_SET<pos:position pos:line="19" pos:column="31"/></name><argument_list pos:line="19" pos:column="31">(<argument><expr><name pos:line="19" pos:column="32">io_error_fd<pos:position pos:line="19" pos:column="43"/></name></expr></argument>,<argument><expr><operator pos:line="19" pos:column="44">&amp;<pos:position pos:line="19" pos:column="49"/></operator><name pos:line="19" pos:column="45">r_fds<pos:position pos:line="19" pos:column="50"/></name></expr></argument>)<pos:position pos:line="19" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="52"/></expr_stmt>
			<if pos:line="20" pos:column="25">if <condition pos:line="20" pos:column="28">(<expr><name pos:line="20" pos:column="29">io_error_fd<pos:position pos:line="20" pos:column="40"/></name> <operator pos:line="20" pos:column="41">&gt;<pos:position pos:line="20" pos:column="45"/></operator> <name pos:line="20" pos:column="43">fd_count<pos:position pos:line="20" pos:column="51"/></name></expr>)<pos:position pos:line="20" pos:column="52"/></condition><then pos:line="20" pos:column="52"> 
				<block type="pseudo"><expr_stmt><expr><name pos:line="21" pos:column="33">fd_count<pos:position pos:line="21" pos:column="41"/></name> <operator pos:line="21" pos:column="42">=<pos:position pos:line="21" pos:column="43"/></operator> <name pos:line="21" pos:column="44">io_error_fd<pos:position pos:line="21" pos:column="55"/></name></expr>;<pos:position pos:line="21" pos:column="56"/></expr_stmt></block></then></if>
		}<pos:position pos:line="22" pos:column="18"/></block></then></if>

		<expr_stmt><expr><name><name pos:line="24" pos:column="17">tv<pos:position pos:line="24" pos:column="19"/></name><operator pos:line="24" pos:column="19">.<pos:position pos:line="24" pos:column="20"/></operator><name pos:line="24" pos:column="20">tv_sec<pos:position pos:line="24" pos:column="26"/></name></name> <operator pos:line="24" pos:column="27">=<pos:position pos:line="24" pos:column="28"/></operator> <ternary><condition><expr><name pos:line="24" pos:column="29">io_timeout<pos:position pos:line="24" pos:column="39"/></name></expr>?<pos:position pos:line="24" pos:column="40"/></condition><then><expr><name pos:line="24" pos:column="40">io_timeout<pos:position pos:line="24" pos:column="50"/></name></expr></then><else pos:line="24" pos:column="50">:<expr><name pos:line="24" pos:column="51">SELECT_TIMEOUT<pos:position pos:line="24" pos:column="65"/></name></expr></else></ternary></expr>;<pos:position pos:line="24" pos:column="66"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="25" pos:column="17">tv<pos:position pos:line="25" pos:column="19"/></name><operator pos:line="25" pos:column="19">.<pos:position pos:line="25" pos:column="20"/></operator><name pos:line="25" pos:column="20">tv_usec<pos:position pos:line="25" pos:column="27"/></name></name> <operator pos:line="25" pos:column="28">=<pos:position pos:line="25" pos:column="29"/></operator> <literal type="number" pos:line="25" pos:column="30">0<pos:position pos:line="25" pos:column="31"/></literal></expr>;<pos:position pos:line="25" pos:column="32"/></expr_stmt>

		<expr_stmt><expr><name pos:line="27" pos:column="17">errno<pos:position pos:line="27" pos:column="22"/></name> <operator pos:line="27" pos:column="23">=<pos:position pos:line="27" pos:column="24"/></operator> <literal type="number" pos:line="27" pos:column="25">0<pos:position pos:line="27" pos:column="26"/></literal></expr>;<pos:position pos:line="27" pos:column="27"/></expr_stmt>

		<expr_stmt><expr><name pos:line="29" pos:column="17">count<pos:position pos:line="29" pos:column="22"/></name> <operator pos:line="29" pos:column="23">=<pos:position pos:line="29" pos:column="24"/></operator> <call><name pos:line="29" pos:column="25">select<pos:position pos:line="29" pos:column="31"/></name><argument_list pos:line="29" pos:column="31">(<argument><expr><name pos:line="29" pos:column="32">fd_count<pos:position pos:line="29" pos:column="40"/></name><operator pos:line="29" pos:column="40">+<pos:position pos:line="29" pos:column="41"/></operator><literal type="number" pos:line="29" pos:column="41">1<pos:position pos:line="29" pos:column="42"/></literal></expr></argument>,
			       <argument><expr><ternary><condition><expr><name pos:line="30" pos:column="32">io_error_fd<pos:position pos:line="30" pos:column="43"/></name> <operator pos:line="30" pos:column="44">!=<pos:position pos:line="30" pos:column="46"/></operator> <operator pos:line="30" pos:column="47">-<pos:position pos:line="30" pos:column="48"/></operator><literal type="number" pos:line="30" pos:column="48">1<pos:position pos:line="30" pos:column="49"/></literal></expr>?<pos:position pos:line="30" pos:column="50"/></condition><then><expr><operator pos:line="30" pos:column="50">&amp;<pos:position pos:line="30" pos:column="55"/></operator><name pos:line="30" pos:column="51">r_fds<pos:position pos:line="30" pos:column="56"/></name></expr></then><else pos:line="30" pos:column="56">:<expr><name pos:line="30" pos:column="57">NULL<pos:position pos:line="30" pos:column="61"/></name></expr></else></ternary></expr></argument>,
			       <argument><expr><operator pos:line="31" pos:column="32">&amp;<pos:position pos:line="31" pos:column="37"/></operator><name pos:line="31" pos:column="33">w_fds<pos:position pos:line="31" pos:column="38"/></name></expr></argument>,<argument><expr><name pos:line="31" pos:column="39">NULL<pos:position pos:line="31" pos:column="43"/></name></expr></argument>,
			       <argument><expr><operator pos:line="32" pos:column="32">&amp;<pos:position pos:line="32" pos:column="37"/></operator><name pos:line="32" pos:column="33">tv<pos:position pos:line="32" pos:column="35"/></name></expr></argument>)<pos:position pos:line="32" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="37"/></expr_stmt>

		<if pos:line="34" pos:column="17">if <condition pos:line="34" pos:column="20">(<expr><name pos:line="34" pos:column="21">count<pos:position pos:line="34" pos:column="26"/></name> <operator pos:line="34" pos:column="27">==<pos:position pos:line="34" pos:column="29"/></operator> <literal type="number" pos:line="34" pos:column="30">0<pos:position pos:line="34" pos:column="31"/></literal></expr>)<pos:position pos:line="34" pos:column="32"/></condition><then pos:line="34" pos:column="32"> <block pos:line="34" pos:column="33">{
			<expr_stmt><expr><call><name pos:line="35" pos:column="25">check_timeout<pos:position pos:line="35" pos:column="38"/></name><argument_list pos:line="35" pos:column="38">()<pos:position pos:line="35" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="41"/></expr_stmt>
		}<pos:position pos:line="36" pos:column="18"/></block></then></if>

		<if pos:line="38" pos:column="17">if <condition pos:line="38" pos:column="20">(<expr><name pos:line="38" pos:column="21">count<pos:position pos:line="38" pos:column="26"/></name> <operator pos:line="38" pos:column="27">&lt;=<pos:position pos:line="38" pos:column="32"/></operator> <literal type="number" pos:line="38" pos:column="30">0<pos:position pos:line="38" pos:column="31"/></literal></expr>)<pos:position pos:line="38" pos:column="32"/></condition><then pos:line="38" pos:column="32"> <block pos:line="38" pos:column="33">{
			<if pos:line="39" pos:column="25">if <condition pos:line="39" pos:column="28">(<expr><name pos:line="39" pos:column="29">errno<pos:position pos:line="39" pos:column="34"/></name> <operator pos:line="39" pos:column="35">==<pos:position pos:line="39" pos:column="37"/></operator> <name pos:line="39" pos:column="38">EBADF<pos:position pos:line="39" pos:column="43"/></name></expr>)<pos:position pos:line="39" pos:column="44"/></condition><then pos:line="39" pos:column="44"> <block pos:line="39" pos:column="45">{
				<expr_stmt><expr><call><name pos:line="40" pos:column="33">exit_cleanup<pos:position pos:line="40" pos:column="45"/></name><argument_list pos:line="40" pos:column="45">(<argument><expr><name pos:line="40" pos:column="46">RERR_SOCKETIO<pos:position pos:line="40" pos:column="59"/></name></expr></argument>)<pos:position pos:line="40" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="61"/></expr_stmt>
			}<pos:position pos:line="41" pos:column="26"/></block></then></if>
			<continue pos:line="42" pos:column="25">continue;<pos:position pos:line="42" pos:column="34"/></continue>
		}<pos:position pos:line="43" pos:column="18"/></block></then></if>

		<if pos:line="45" pos:column="17">if <condition pos:line="45" pos:column="20">(<expr><name pos:line="45" pos:column="21">io_error_fd<pos:position pos:line="45" pos:column="32"/></name> <operator pos:line="45" pos:column="33">!=<pos:position pos:line="45" pos:column="35"/></operator> <operator pos:line="45" pos:column="36">-<pos:position pos:line="45" pos:column="37"/></operator><literal type="number" pos:line="45" pos:column="37">1<pos:position pos:line="45" pos:column="38"/></literal> <operator pos:line="45" pos:column="39">&amp;&amp;<pos:position pos:line="45" pos:column="49"/></operator> <call><name pos:line="45" pos:column="42">FD_ISSET<pos:position pos:line="45" pos:column="50"/></name><argument_list pos:line="45" pos:column="50">(<argument><expr><name pos:line="45" pos:column="51">io_error_fd<pos:position pos:line="45" pos:column="62"/></name></expr></argument>, <argument><expr><operator pos:line="45" pos:column="64">&amp;<pos:position pos:line="45" pos:column="69"/></operator><name pos:line="45" pos:column="65">r_fds<pos:position pos:line="45" pos:column="70"/></name></expr></argument>)<pos:position pos:line="45" pos:column="71"/></argument_list></call></expr>)<pos:position pos:line="45" pos:column="72"/></condition><then pos:line="45" pos:column="72"> <block pos:line="45" pos:column="73">{
			<expr_stmt><expr><call><name pos:line="46" pos:column="25">read_error_fd<pos:position pos:line="46" pos:column="38"/></name><argument_list pos:line="46" pos:column="38">()<pos:position pos:line="46" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="41"/></expr_stmt>
		}<pos:position pos:line="47" pos:column="18"/></block></then></if>

		<if pos:line="49" pos:column="17">if <condition pos:line="49" pos:column="20">(<expr><call><name pos:line="49" pos:column="21">FD_ISSET<pos:position pos:line="49" pos:column="29"/></name><argument_list pos:line="49" pos:column="29">(<argument><expr><name pos:line="49" pos:column="30">fd<pos:position pos:line="49" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="49" pos:column="34">&amp;<pos:position pos:line="49" pos:column="39"/></operator><name pos:line="49" pos:column="35">w_fds<pos:position pos:line="49" pos:column="40"/></name></expr></argument>)<pos:position pos:line="49" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="49" pos:column="42"/></condition><then pos:line="49" pos:column="42"> <block pos:line="49" pos:column="43">{
			<decl_stmt><decl><type><name pos:line="50" pos:column="25">int<pos:position pos:line="50" pos:column="28"/></name></type> <name pos:line="50" pos:column="29">ret<pos:position pos:line="50" pos:column="32"/></name></decl>;<pos:position pos:line="50" pos:column="33"/></decl_stmt>
			<decl_stmt><decl><type><name pos:line="51" pos:column="25">size_t<pos:position pos:line="51" pos:column="31"/></name></type> <name pos:line="51" pos:column="32">n<pos:position pos:line="51" pos:column="33"/></name> <init pos:line="51" pos:column="34">= <expr><name pos:line="51" pos:column="36">len<pos:position pos:line="51" pos:column="39"/></name><operator pos:line="51" pos:column="39">-<pos:position pos:line="51" pos:column="40"/></operator><name pos:line="51" pos:column="40">total<pos:position pos:line="51" pos:column="45"/></name></expr></init></decl>;<pos:position pos:line="51" pos:column="46"/></decl_stmt>
			<expr_stmt><expr><name pos:line="52" pos:column="25">ret<pos:position pos:line="52" pos:column="28"/></name> <operator pos:line="52" pos:column="29">=<pos:position pos:line="52" pos:column="30"/></operator> <call><name pos:line="52" pos:column="31">write<pos:position pos:line="52" pos:column="36"/></name><argument_list pos:line="52" pos:column="36">(<argument><expr><name pos:line="52" pos:column="37">fd<pos:position pos:line="52" pos:column="39"/></name></expr></argument>,<argument><expr><name pos:line="52" pos:column="40">buf<pos:position pos:line="52" pos:column="43"/></name><operator pos:line="52" pos:column="43">+<pos:position pos:line="52" pos:column="44"/></operator><name pos:line="52" pos:column="44">total<pos:position pos:line="52" pos:column="49"/></name></expr></argument>,<argument><expr><name pos:line="52" pos:column="50">n<pos:position pos:line="52" pos:column="51"/></name></expr></argument>)<pos:position pos:line="52" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="53"/></expr_stmt>

			<if pos:line="54" pos:column="25">if <condition pos:line="54" pos:column="28">(<expr><name pos:line="54" pos:column="29">ret<pos:position pos:line="54" pos:column="32"/></name> <operator pos:line="54" pos:column="33">==<pos:position pos:line="54" pos:column="35"/></operator> <operator pos:line="54" pos:column="36">-<pos:position pos:line="54" pos:column="37"/></operator><literal type="number" pos:line="54" pos:column="37">1<pos:position pos:line="54" pos:column="38"/></literal> <operator pos:line="54" pos:column="39">&amp;&amp;<pos:position pos:line="54" pos:column="49"/></operator> <name pos:line="54" pos:column="42">errno<pos:position pos:line="54" pos:column="47"/></name> <operator pos:line="54" pos:column="48">==<pos:position pos:line="54" pos:column="50"/></operator> <name pos:line="54" pos:column="51">EINTR<pos:position pos:line="54" pos:column="56"/></name></expr>)<pos:position pos:line="54" pos:column="57"/></condition><then pos:line="54" pos:column="57"> <block pos:line="54" pos:column="58">{
				<continue pos:line="55" pos:column="33">continue;<pos:position pos:line="55" pos:column="42"/></continue>
			}<pos:position pos:line="56" pos:column="26"/></block></then></if>

			<if pos:line="58" pos:column="25">if <condition pos:line="58" pos:column="28">(<expr><name pos:line="58" pos:column="29">ret<pos:position pos:line="58" pos:column="32"/></name> <operator pos:line="58" pos:column="33">==<pos:position pos:line="58" pos:column="35"/></operator> <operator pos:line="58" pos:column="36">-<pos:position pos:line="58" pos:column="37"/></operator><literal type="number" pos:line="58" pos:column="37">1<pos:position pos:line="58" pos:column="38"/></literal> <operator pos:line="58" pos:column="39">&amp;&amp;<pos:position pos:line="58" pos:column="49"/></operator> 
			    <operator pos:line="59" pos:column="29">(<pos:position pos:line="59" pos:column="30"/></operator><name pos:line="59" pos:column="30">errno<pos:position pos:line="59" pos:column="35"/></name> <operator pos:line="59" pos:column="36">==<pos:position pos:line="59" pos:column="38"/></operator> <name pos:line="59" pos:column="39">EWOULDBLOCK<pos:position pos:line="59" pos:column="50"/></name> <operator pos:line="59" pos:column="51">||<pos:position pos:line="59" pos:column="53"/></operator> <name pos:line="59" pos:column="54">errno<pos:position pos:line="59" pos:column="59"/></name> <operator pos:line="59" pos:column="60">==<pos:position pos:line="59" pos:column="62"/></operator> <name pos:line="59" pos:column="63">EAGAIN<pos:position pos:line="59" pos:column="69"/></name><operator pos:line="59" pos:column="69">)<pos:position pos:line="59" pos:column="70"/></operator></expr>)<pos:position pos:line="59" pos:column="71"/></condition><then pos:line="59" pos:column="71"> <block pos:line="59" pos:column="72">{
				<expr_stmt><expr><call><name pos:line="60" pos:column="33">msleep<pos:position pos:line="60" pos:column="39"/></name><argument_list pos:line="60" pos:column="39">(<argument><expr><literal type="number" pos:line="60" pos:column="40">1<pos:position pos:line="60" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="60" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="43"/></expr_stmt>
				<continue pos:line="61" pos:column="33">continue;<pos:position pos:line="61" pos:column="42"/></continue>
			}<pos:position pos:line="62" pos:column="26"/></block></then></if>

			<if pos:line="64" pos:column="25">if <condition pos:line="64" pos:column="28">(<expr><name pos:line="64" pos:column="29">ret<pos:position pos:line="64" pos:column="32"/></name> <operator pos:line="64" pos:column="33">&lt;=<pos:position pos:line="64" pos:column="38"/></operator> <literal type="number" pos:line="64" pos:column="36">0<pos:position pos:line="64" pos:column="37"/></literal></expr>)<pos:position pos:line="64" pos:column="38"/></condition><then pos:line="64" pos:column="38"> <block pos:line="64" pos:column="39">{
				<comment type="block" pos:line="65" pos:column="33">/* Don't try to write errors back
				 * across the stream */</comment>
				<expr_stmt><expr><call><name pos:line="67" pos:column="33">io_multiplexing_close<pos:position pos:line="67" pos:column="54"/></name><argument_list pos:line="67" pos:column="54">()<pos:position pos:line="67" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="57"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="68" pos:column="33">rprintf<pos:position pos:line="68" pos:column="40"/></name><argument_list pos:line="68" pos:column="40">(<argument><expr><name pos:line="68" pos:column="41">FERROR<pos:position pos:line="68" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="68" pos:column="49">RSYNC_NAME<pos:position pos:line="68" pos:column="59"/></name>
					<literal type="string" pos:line="69" pos:column="41">": error writing %d unbuffered bytes"<pos:position pos:line="69" pos:column="78"/></literal>
					<literal type="string" pos:line="70" pos:column="41">" - exiting: %s\n"<pos:position pos:line="70" pos:column="59"/></literal></expr></argument>, <argument><expr><name pos:line="70" pos:column="61">len<pos:position pos:line="70" pos:column="64"/></name></expr></argument>,
					<argument><expr><call><name pos:line="71" pos:column="41">strerror<pos:position pos:line="71" pos:column="49"/></name><argument_list pos:line="71" pos:column="49">(<argument><expr><name pos:line="71" pos:column="50">errno<pos:position pos:line="71" pos:column="55"/></name></expr></argument>)<pos:position pos:line="71" pos:column="56"/></argument_list></call></expr></argument>)<pos:position pos:line="71" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="58"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="72" pos:column="33">exit_cleanup<pos:position pos:line="72" pos:column="45"/></name><argument_list pos:line="72" pos:column="45">(<argument><expr><name pos:line="72" pos:column="46">RERR_STREAMIO<pos:position pos:line="72" pos:column="59"/></name></expr></argument>)<pos:position pos:line="72" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="61"/></expr_stmt>
			}<pos:position pos:line="73" pos:column="26"/></block></then></if>

			<comment type="block" pos:line="75" pos:column="25">/* Sleep after writing to limit I/O bandwidth */</comment>
			<if pos:line="76" pos:column="25">if <condition pos:line="76" pos:column="28">(<expr><name pos:line="76" pos:column="29">bwlimit<pos:position pos:line="76" pos:column="36"/></name></expr>)<pos:position pos:line="76" pos:column="37"/></condition><then pos:line="76" pos:column="37">
			<block pos:line="77" pos:column="25">{
			    <expr_stmt><expr><name><name pos:line="78" pos:column="29">tv<pos:position pos:line="78" pos:column="31"/></name><operator pos:line="78" pos:column="31">.<pos:position pos:line="78" pos:column="32"/></operator><name pos:line="78" pos:column="32">tv_sec<pos:position pos:line="78" pos:column="38"/></name></name> <operator pos:line="78" pos:column="39">=<pos:position pos:line="78" pos:column="40"/></operator> <literal type="number" pos:line="78" pos:column="41">0<pos:position pos:line="78" pos:column="42"/></literal></expr>;<pos:position pos:line="78" pos:column="43"/></expr_stmt>
			    <expr_stmt><expr><name><name pos:line="79" pos:column="29">tv<pos:position pos:line="79" pos:column="31"/></name><operator pos:line="79" pos:column="31">.<pos:position pos:line="79" pos:column="32"/></operator><name pos:line="79" pos:column="32">tv_usec<pos:position pos:line="79" pos:column="39"/></name></name> <operator pos:line="79" pos:column="40">=<pos:position pos:line="79" pos:column="41"/></operator> <name pos:line="79" pos:column="42">ret<pos:position pos:line="79" pos:column="45"/></name> <operator pos:line="79" pos:column="46">*<pos:position pos:line="79" pos:column="47"/></operator> <literal type="number" pos:line="79" pos:column="48">1000<pos:position pos:line="79" pos:column="52"/></literal> <operator pos:line="79" pos:column="53">/<pos:position pos:line="79" pos:column="54"/></operator> <name pos:line="79" pos:column="55">bwlimit<pos:position pos:line="79" pos:column="62"/></name></expr>;<pos:position pos:line="79" pos:column="63"/></expr_stmt>
			    <while pos:line="80" pos:column="29">while <condition pos:line="80" pos:column="35">(<expr><name><name pos:line="80" pos:column="36">tv<pos:position pos:line="80" pos:column="38"/></name><operator pos:line="80" pos:column="38">.<pos:position pos:line="80" pos:column="39"/></operator><name pos:line="80" pos:column="39">tv_usec<pos:position pos:line="80" pos:column="46"/></name></name> <operator pos:line="80" pos:column="47">&gt;<pos:position pos:line="80" pos:column="51"/></operator> <literal type="number" pos:line="80" pos:column="49">1000000<pos:position pos:line="80" pos:column="56"/></literal></expr>)<pos:position pos:line="80" pos:column="57"/></condition>
			    <block pos:line="81" pos:column="29">{
				<expr_stmt><expr><name><name pos:line="82" pos:column="33">tv<pos:position pos:line="82" pos:column="35"/></name><operator pos:line="82" pos:column="35">.<pos:position pos:line="82" pos:column="36"/></operator><name pos:line="82" pos:column="36">tv_sec<pos:position pos:line="82" pos:column="42"/></name></name><operator pos:line="82" pos:column="42">++<pos:position pos:line="82" pos:column="44"/></operator></expr>;<pos:position pos:line="82" pos:column="45"/></expr_stmt>
				<expr_stmt><expr><name><name pos:line="83" pos:column="33">tv<pos:position pos:line="83" pos:column="35"/></name><operator pos:line="83" pos:column="35">.<pos:position pos:line="83" pos:column="36"/></operator><name pos:line="83" pos:column="36">tv_usec<pos:position pos:line="83" pos:column="43"/></name></name> <operator pos:line="83" pos:column="44">-=<pos:position pos:line="83" pos:column="46"/></operator> <literal type="number" pos:line="83" pos:column="47">1000000<pos:position pos:line="83" pos:column="54"/></literal></expr>;<pos:position pos:line="83" pos:column="55"/></expr_stmt>
			    }<pos:position pos:line="84" pos:column="30"/></block></while>
			    <expr_stmt><expr><call><name pos:line="85" pos:column="29">select<pos:position pos:line="85" pos:column="35"/></name><argument_list pos:line="85" pos:column="35">(<argument><expr><literal type="number" pos:line="85" pos:column="36">0<pos:position pos:line="85" pos:column="37"/></literal></expr></argument>, <argument><expr><name pos:line="85" pos:column="39">NULL<pos:position pos:line="85" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="85" pos:column="45">NULL<pos:position pos:line="85" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="85" pos:column="51">NULL<pos:position pos:line="85" pos:column="55"/></name></expr></argument>, <argument><expr><operator pos:line="85" pos:column="57">&amp;<pos:position pos:line="85" pos:column="62"/></operator><name pos:line="85" pos:column="58">tv<pos:position pos:line="85" pos:column="60"/></name></expr></argument>)<pos:position pos:line="85" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="62"/></expr_stmt>
 			}<pos:position pos:line="86" pos:column="26"/></block></then></if>
 
			<expr_stmt><expr><name pos:line="88" pos:column="25">total<pos:position pos:line="88" pos:column="30"/></name> <operator pos:line="88" pos:column="31">+=<pos:position pos:line="88" pos:column="33"/></operator> <name pos:line="88" pos:column="34">ret<pos:position pos:line="88" pos:column="37"/></name></expr>;<pos:position pos:line="88" pos:column="38"/></expr_stmt>

			<if pos:line="90" pos:column="25">if <condition pos:line="90" pos:column="28">(<expr><name pos:line="90" pos:column="29">io_timeout<pos:position pos:line="90" pos:column="39"/></name></expr>)<pos:position pos:line="90" pos:column="40"/></condition><then pos:line="90" pos:column="40">
				<block type="pseudo"><expr_stmt><expr><name pos:line="91" pos:column="33">last_io<pos:position pos:line="91" pos:column="40"/></name> <operator pos:line="91" pos:column="41">=<pos:position pos:line="91" pos:column="42"/></operator> <call><name pos:line="91" pos:column="43">time<pos:position pos:line="91" pos:column="47"/></name><argument_list pos:line="91" pos:column="47">(<argument><expr><name pos:line="91" pos:column="48">NULL<pos:position pos:line="91" pos:column="52"/></name></expr></argument>)<pos:position pos:line="91" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="54"/></expr_stmt></block></then></if>
		}<pos:position pos:line="92" pos:column="18"/></block></then></if>
	}<pos:position pos:line="93" pos:column="10"/></block></while>

	<expr_stmt><expr><name pos:line="95" pos:column="9">no_flush<pos:position pos:line="95" pos:column="17"/></name><operator pos:line="95" pos:column="17">--<pos:position pos:line="95" pos:column="19"/></operator></expr>;<pos:position pos:line="95" pos:column="20"/></expr_stmt>
}<pos:position pos:line="96" pos:column="2"/></block></function></unit>
