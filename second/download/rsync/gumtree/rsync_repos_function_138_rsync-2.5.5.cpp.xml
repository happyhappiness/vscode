<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_138_rsync-2.5.5.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">open_socket_out<pos:position pos:line="1" pos:column="20"/></name><parameter_list pos:line="1" pos:column="20">(<parameter><decl><type><name pos:line="1" pos:column="21">char<pos:position pos:line="1" pos:column="25"/></name> <modifier pos:line="1" pos:column="26">*<pos:position pos:line="1" pos:column="27"/></modifier></type><name pos:line="1" pos:column="27">host<pos:position pos:line="1" pos:column="31"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="33">int<pos:position pos:line="1" pos:column="36"/></name></type> <name pos:line="1" pos:column="37">port<pos:position pos:line="1" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="43">const<pos:position pos:line="1" pos:column="48"/></specifier> <name pos:line="1" pos:column="49">char<pos:position pos:line="1" pos:column="53"/></name> <modifier pos:line="1" pos:column="54">*<pos:position pos:line="1" pos:column="55"/></modifier></type><name pos:line="1" pos:column="55">bind_address<pos:position pos:line="1" pos:column="67"/></name></decl></parameter>,
		    <parameter><decl><type><name pos:line="2" pos:column="21">int<pos:position pos:line="2" pos:column="24"/></name></type> <name pos:line="2" pos:column="25">af_hint<pos:position pos:line="2" pos:column="32"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="33"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">type<pos:position pos:line="4" pos:column="17"/></name> <init pos:line="4" pos:column="18">= <expr><name pos:line="4" pos:column="20">SOCK_STREAM<pos:position pos:line="4" pos:column="31"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="32"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">error<pos:position pos:line="5" pos:column="18"/></name></decl>;<pos:position pos:line="5" pos:column="19"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">s<pos:position pos:line="6" pos:column="14"/></name></decl>;<pos:position pos:line="6" pos:column="15"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="7" pos:column="9">struct<pos:position pos:line="7" pos:column="15"/></name> <name pos:line="7" pos:column="16">addrinfo<pos:position pos:line="7" pos:column="24"/></name></name></type> <name pos:line="7" pos:column="25">hints<pos:position pos:line="7" pos:column="30"/></name></decl>, <modifier pos:line="7" pos:column="32">*<pos:position pos:line="7" pos:column="33"/></modifier><decl><type ref="prev"/><name pos:line="7" pos:column="33">res0<pos:position pos:line="7" pos:column="37"/></name></decl>, <modifier pos:line="7" pos:column="39">*<pos:position pos:line="7" pos:column="40"/></modifier><decl><type ref="prev"/><name pos:line="7" pos:column="40">res<pos:position pos:line="7" pos:column="43"/></name></decl>;<pos:position pos:line="7" pos:column="44"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">char<pos:position pos:line="8" pos:column="13"/></name></type> <name><name pos:line="8" pos:column="14">portbuf<pos:position pos:line="8" pos:column="21"/></name><index pos:line="8" pos:column="21">[<expr><literal type="number" pos:line="8" pos:column="22">10<pos:position pos:line="8" pos:column="24"/></literal></expr>]<pos:position pos:line="8" pos:column="25"/></index></name></decl>;<pos:position pos:line="8" pos:column="26"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="9" pos:column="9">char<pos:position pos:line="9" pos:column="13"/></name> <modifier pos:line="9" pos:column="14">*<pos:position pos:line="9" pos:column="15"/></modifier></type><name pos:line="9" pos:column="15">h<pos:position pos:line="9" pos:column="16"/></name></decl>;<pos:position pos:line="9" pos:column="17"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="10" pos:column="9">int<pos:position pos:line="10" pos:column="12"/></name></type> <name pos:line="10" pos:column="13">proxied<pos:position pos:line="10" pos:column="20"/></name> <init pos:line="10" pos:column="21">= <expr><literal type="number" pos:line="10" pos:column="23">0<pos:position pos:line="10" pos:column="24"/></literal></expr></init></decl>;<pos:position pos:line="10" pos:column="25"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="11" pos:column="9">char<pos:position pos:line="11" pos:column="13"/></name></type> <name><name pos:line="11" pos:column="14">buffer<pos:position pos:line="11" pos:column="20"/></name><index pos:line="11" pos:column="20">[<expr><literal type="number" pos:line="11" pos:column="21">1024<pos:position pos:line="11" pos:column="25"/></literal></expr>]<pos:position pos:line="11" pos:column="26"/></index></name></decl>;<pos:position pos:line="11" pos:column="27"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="12" pos:column="9">char<pos:position pos:line="12" pos:column="13"/></name> <modifier pos:line="12" pos:column="14">*<pos:position pos:line="12" pos:column="15"/></modifier></type><name pos:line="12" pos:column="15">cp<pos:position pos:line="12" pos:column="17"/></name></decl>;<pos:position pos:line="12" pos:column="18"/></decl_stmt>

	<comment type="block" pos:line="14" pos:column="9">/* if we have a RSYNC_PROXY env variable then redirect our
	 * connetcion via a web proxy at the given address. The format
	 * is hostname:port */</comment>
	<expr_stmt><expr><name pos:line="17" pos:column="9">h<pos:position pos:line="17" pos:column="10"/></name> <operator pos:line="17" pos:column="11">=<pos:position pos:line="17" pos:column="12"/></operator> <call><name pos:line="17" pos:column="13">getenv<pos:position pos:line="17" pos:column="19"/></name><argument_list pos:line="17" pos:column="19">(<argument><expr><literal type="string" pos:line="17" pos:column="20">"RSYNC_PROXY"<pos:position pos:line="17" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="35"/></expr_stmt>
	<expr_stmt><expr><name pos:line="18" pos:column="9">proxied<pos:position pos:line="18" pos:column="16"/></name> <operator pos:line="18" pos:column="17">=<pos:position pos:line="18" pos:column="18"/></operator> <operator pos:line="18" pos:column="19">(<pos:position pos:line="18" pos:column="20"/></operator><name pos:line="18" pos:column="20">h<pos:position pos:line="18" pos:column="21"/></name> <operator pos:line="18" pos:column="22">!=<pos:position pos:line="18" pos:column="24"/></operator> <name pos:line="18" pos:column="25">NULL<pos:position pos:line="18" pos:column="29"/></name><operator pos:line="18" pos:column="29">)<pos:position pos:line="18" pos:column="30"/></operator> <operator pos:line="18" pos:column="31">&amp;&amp;<pos:position pos:line="18" pos:column="41"/></operator> <operator pos:line="18" pos:column="34">(<pos:position pos:line="18" pos:column="35"/></operator><operator pos:line="18" pos:column="35">*<pos:position pos:line="18" pos:column="36"/></operator><name pos:line="18" pos:column="36">h<pos:position pos:line="18" pos:column="37"/></name> <operator pos:line="18" pos:column="38">!=<pos:position pos:line="18" pos:column="40"/></operator> <literal type="char" pos:line="18" pos:column="41">'\0'<pos:position pos:line="18" pos:column="45"/></literal><operator pos:line="18" pos:column="45">)<pos:position pos:line="18" pos:column="46"/></operator></expr>;<pos:position pos:line="18" pos:column="47"/></expr_stmt>

	<if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><name pos:line="20" pos:column="13">proxied<pos:position pos:line="20" pos:column="20"/></name></expr>)<pos:position pos:line="20" pos:column="21"/></condition><then pos:line="20" pos:column="21"> <block pos:line="20" pos:column="22">{
		<expr_stmt><expr><call><name pos:line="21" pos:column="17">strlcpy<pos:position pos:line="21" pos:column="24"/></name><argument_list pos:line="21" pos:column="24">(<argument><expr><name pos:line="21" pos:column="25">buffer<pos:position pos:line="21" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="33">h<pos:position pos:line="21" pos:column="34"/></name></expr></argument>, <argument><expr><sizeof pos:line="21" pos:column="36">sizeof<argument_list pos:line="21" pos:column="42">(<argument><expr><name pos:line="21" pos:column="43">buffer<pos:position pos:line="21" pos:column="49"/></name></expr></argument>)<pos:position pos:line="21" pos:column="50"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="21" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="52"/></expr_stmt>
		<expr_stmt><expr><name pos:line="22" pos:column="17">cp<pos:position pos:line="22" pos:column="19"/></name> <operator pos:line="22" pos:column="20">=<pos:position pos:line="22" pos:column="21"/></operator> <call><name pos:line="22" pos:column="22">strchr<pos:position pos:line="22" pos:column="28"/></name><argument_list pos:line="22" pos:column="28">(<argument><expr><name pos:line="22" pos:column="29">buffer<pos:position pos:line="22" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="22" pos:column="37">':'<pos:position pos:line="22" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="42"/></expr_stmt>
		<if pos:line="23" pos:column="17">if <condition pos:line="23" pos:column="20">(<expr><name pos:line="23" pos:column="21">cp<pos:position pos:line="23" pos:column="23"/></name> <operator pos:line="23" pos:column="24">==<pos:position pos:line="23" pos:column="26"/></operator> <name pos:line="23" pos:column="27">NULL<pos:position pos:line="23" pos:column="31"/></name></expr>)<pos:position pos:line="23" pos:column="32"/></condition><then pos:line="23" pos:column="32"> <block pos:line="23" pos:column="33">{
			<expr_stmt><expr><call><name pos:line="24" pos:column="25">rprintf<pos:position pos:line="24" pos:column="32"/></name><argument_list pos:line="24" pos:column="32">(<argument><expr><name pos:line="24" pos:column="33">FERROR<pos:position pos:line="24" pos:column="39"/></name></expr></argument>,
				<argument><expr><literal type="string" pos:line="25" pos:column="33">"invalid proxy specification: should be HOST:PORT\n"<pos:position pos:line="25" pos:column="85"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="86"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="87"/></expr_stmt>
			<return pos:line="26" pos:column="25">return <expr><operator pos:line="26" pos:column="32">-<pos:position pos:line="26" pos:column="33"/></operator><literal type="number" pos:line="26" pos:column="33">1<pos:position pos:line="26" pos:column="34"/></literal></expr>;<pos:position pos:line="26" pos:column="35"/></return>
		}<pos:position pos:line="27" pos:column="18"/></block></then></if>
		<expr_stmt><expr><operator pos:line="28" pos:column="17">*<pos:position pos:line="28" pos:column="18"/></operator><name pos:line="28" pos:column="18">cp<pos:position pos:line="28" pos:column="20"/></name><operator pos:line="28" pos:column="20">++<pos:position pos:line="28" pos:column="22"/></operator> <operator pos:line="28" pos:column="23">=<pos:position pos:line="28" pos:column="24"/></operator> <literal type="char" pos:line="28" pos:column="25">'\0'<pos:position pos:line="28" pos:column="29"/></literal></expr>;<pos:position pos:line="28" pos:column="30"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="29" pos:column="17">strcpy<pos:position pos:line="29" pos:column="23"/></name><argument_list pos:line="29" pos:column="23">(<argument><expr><name pos:line="29" pos:column="24">portbuf<pos:position pos:line="29" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="33">cp<pos:position pos:line="29" pos:column="35"/></name></expr></argument>)<pos:position pos:line="29" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="37"/></expr_stmt>
		<expr_stmt><expr><name pos:line="30" pos:column="17">h<pos:position pos:line="30" pos:column="18"/></name> <operator pos:line="30" pos:column="19">=<pos:position pos:line="30" pos:column="20"/></operator> <name pos:line="30" pos:column="21">buffer<pos:position pos:line="30" pos:column="27"/></name></expr>;<pos:position pos:line="30" pos:column="28"/></expr_stmt>
		<if pos:line="31" pos:column="17">if <condition pos:line="31" pos:column="20">(<expr><name pos:line="31" pos:column="21">verbose<pos:position pos:line="31" pos:column="28"/></name> <operator pos:line="31" pos:column="29">&gt;=<pos:position pos:line="31" pos:column="34"/></operator> <literal type="number" pos:line="31" pos:column="32">2<pos:position pos:line="31" pos:column="33"/></literal></expr>)<pos:position pos:line="31" pos:column="34"/></condition><then pos:line="31" pos:column="34"> <block pos:line="31" pos:column="35">{
			<expr_stmt><expr><call><name pos:line="32" pos:column="25">rprintf<pos:position pos:line="32" pos:column="32"/></name><argument_list pos:line="32" pos:column="32">(<argument><expr><name pos:line="32" pos:column="33">FINFO<pos:position pos:line="32" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="32" pos:column="40">"connection via http proxy %s port %s\n"<pos:position pos:line="32" pos:column="80"/></literal></expr></argument>,
				<argument><expr><name pos:line="33" pos:column="33">h<pos:position pos:line="33" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="36">portbuf<pos:position pos:line="33" pos:column="43"/></name></expr></argument>)<pos:position pos:line="33" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="45"/></expr_stmt>
		}<pos:position pos:line="34" pos:column="18"/></block></then></if>
	}<pos:position pos:line="35" pos:column="10"/></block></then> <else pos:line="35" pos:column="11">else <block pos:line="35" pos:column="16">{
		<expr_stmt><expr><call><name pos:line="36" pos:column="17">snprintf<pos:position pos:line="36" pos:column="25"/></name><argument_list pos:line="36" pos:column="25">(<argument><expr><name pos:line="36" pos:column="26">portbuf<pos:position pos:line="36" pos:column="33"/></name></expr></argument>, <argument><expr><sizeof pos:line="36" pos:column="35">sizeof<argument_list pos:line="36" pos:column="41">(<argument><expr><name pos:line="36" pos:column="42">portbuf<pos:position pos:line="36" pos:column="49"/></name></expr></argument>)<pos:position pos:line="36" pos:column="50"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="36" pos:column="52">"%d"<pos:position pos:line="36" pos:column="56"/></literal></expr></argument>, <argument><expr><name pos:line="36" pos:column="58">port<pos:position pos:line="36" pos:column="62"/></name></expr></argument>)<pos:position pos:line="36" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="64"/></expr_stmt>
		<expr_stmt><expr><name pos:line="37" pos:column="17">h<pos:position pos:line="37" pos:column="18"/></name> <operator pos:line="37" pos:column="19">=<pos:position pos:line="37" pos:column="20"/></operator> <name pos:line="37" pos:column="21">host<pos:position pos:line="37" pos:column="25"/></name></expr>;<pos:position pos:line="37" pos:column="26"/></expr_stmt>
	}<pos:position pos:line="38" pos:column="10"/></block></else></if>

	<expr_stmt><expr><call><name pos:line="40" pos:column="9">memset<pos:position pos:line="40" pos:column="15"/></name><argument_list pos:line="40" pos:column="15">(<argument><expr><operator pos:line="40" pos:column="16">&amp;<pos:position pos:line="40" pos:column="21"/></operator><name pos:line="40" pos:column="17">hints<pos:position pos:line="40" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="40" pos:column="24">0<pos:position pos:line="40" pos:column="25"/></literal></expr></argument>, <argument><expr><sizeof pos:line="40" pos:column="27">sizeof<argument_list pos:line="40" pos:column="33">(<argument><expr><name pos:line="40" pos:column="34">hints<pos:position pos:line="40" pos:column="39"/></name></expr></argument>)<pos:position pos:line="40" pos:column="40"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="40" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="42"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="41" pos:column="9">hints<pos:position pos:line="41" pos:column="14"/></name><operator pos:line="41" pos:column="14">.<pos:position pos:line="41" pos:column="15"/></operator><name pos:line="41" pos:column="15">ai_family<pos:position pos:line="41" pos:column="24"/></name></name> <operator pos:line="41" pos:column="25">=<pos:position pos:line="41" pos:column="26"/></operator> <name pos:line="41" pos:column="27">af_hint<pos:position pos:line="41" pos:column="34"/></name></expr>;<pos:position pos:line="41" pos:column="35"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="42" pos:column="9">hints<pos:position pos:line="42" pos:column="14"/></name><operator pos:line="42" pos:column="14">.<pos:position pos:line="42" pos:column="15"/></operator><name pos:line="42" pos:column="15">ai_socktype<pos:position pos:line="42" pos:column="26"/></name></name> <operator pos:line="42" pos:column="27">=<pos:position pos:line="42" pos:column="28"/></operator> <name pos:line="42" pos:column="29">type<pos:position pos:line="42" pos:column="33"/></name></expr>;<pos:position pos:line="42" pos:column="34"/></expr_stmt>
	<expr_stmt><expr><name pos:line="43" pos:column="9">error<pos:position pos:line="43" pos:column="14"/></name> <operator pos:line="43" pos:column="15">=<pos:position pos:line="43" pos:column="16"/></operator> <call><name pos:line="43" pos:column="17">getaddrinfo<pos:position pos:line="43" pos:column="28"/></name><argument_list pos:line="43" pos:column="28">(<argument><expr><name pos:line="43" pos:column="29">h<pos:position pos:line="43" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="32">portbuf<pos:position pos:line="43" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="43" pos:column="41">&amp;<pos:position pos:line="43" pos:column="46"/></operator><name pos:line="43" pos:column="42">hints<pos:position pos:line="43" pos:column="47"/></name></expr></argument>, <argument><expr><operator pos:line="43" pos:column="49">&amp;<pos:position pos:line="43" pos:column="54"/></operator><name pos:line="43" pos:column="50">res0<pos:position pos:line="43" pos:column="54"/></name></expr></argument>)<pos:position pos:line="43" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="56"/></expr_stmt>
	<if pos:line="44" pos:column="9">if <condition pos:line="44" pos:column="12">(<expr><name pos:line="44" pos:column="13">error<pos:position pos:line="44" pos:column="18"/></name></expr>)<pos:position pos:line="44" pos:column="19"/></condition><then pos:line="44" pos:column="19"> <block pos:line="44" pos:column="20">{
		<expr_stmt><expr><call><name pos:line="45" pos:column="17">rprintf<pos:position pos:line="45" pos:column="24"/></name><argument_list pos:line="45" pos:column="24">(<argument><expr><name pos:line="45" pos:column="25">FERROR<pos:position pos:line="45" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="33">RSYNC_NAME<pos:position pos:line="45" pos:column="43"/></name> <literal type="string" pos:line="45" pos:column="44">": getaddrinfo: %s %s: %s\n"<pos:position pos:line="45" pos:column="72"/></literal></expr></argument>,
			<argument><expr><name pos:line="46" pos:column="25">h<pos:position pos:line="46" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="28">portbuf<pos:position pos:line="46" pos:column="35"/></name></expr></argument>, <argument><expr><call><name pos:line="46" pos:column="37">gai_strerror<pos:position pos:line="46" pos:column="49"/></name><argument_list pos:line="46" pos:column="49">(<argument><expr><name pos:line="46" pos:column="50">error<pos:position pos:line="46" pos:column="55"/></name></expr></argument>)<pos:position pos:line="46" pos:column="56"/></argument_list></call></expr></argument>)<pos:position pos:line="46" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="58"/></expr_stmt>
		<return pos:line="47" pos:column="17">return <expr><operator pos:line="47" pos:column="24">-<pos:position pos:line="47" pos:column="25"/></operator><literal type="number" pos:line="47" pos:column="25">1<pos:position pos:line="47" pos:column="26"/></literal></expr>;<pos:position pos:line="47" pos:column="27"/></return>
	}<pos:position pos:line="48" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="50" pos:column="9">s<pos:position pos:line="50" pos:column="10"/></name> <operator pos:line="50" pos:column="11">=<pos:position pos:line="50" pos:column="12"/></operator> <operator pos:line="50" pos:column="13">-<pos:position pos:line="50" pos:column="14"/></operator><literal type="number" pos:line="50" pos:column="14">1<pos:position pos:line="50" pos:column="15"/></literal></expr>;<pos:position pos:line="50" pos:column="16"/></expr_stmt>
	<comment type="block" pos:line="51" pos:column="9">/* Try to connect to all addresses for this machine until we get
	 * through.  It might e.g. be multi-homed, or have both IPv4 and IPv6
	 * addresses.  We need to create a socket for each record, since the
	 * address record tells us what protocol to use to try to connect. */</comment>
	<for pos:line="55" pos:column="9">for <control pos:line="55" pos:column="13">(<init><expr><name pos:line="55" pos:column="14">res<pos:position pos:line="55" pos:column="17"/></name> <operator pos:line="55" pos:column="18">=<pos:position pos:line="55" pos:column="19"/></operator> <name pos:line="55" pos:column="20">res0<pos:position pos:line="55" pos:column="24"/></name></expr>;<pos:position pos:line="55" pos:column="25"/></init> <condition><expr><name pos:line="55" pos:column="26">res<pos:position pos:line="55" pos:column="29"/></name></expr>;<pos:position pos:line="55" pos:column="30"/></condition> <incr><expr><name pos:line="55" pos:column="31">res<pos:position pos:line="55" pos:column="34"/></name> <operator pos:line="55" pos:column="35">=<pos:position pos:line="55" pos:column="36"/></operator> <name><name pos:line="55" pos:column="37">res<pos:position pos:line="55" pos:column="40"/></name><operator pos:line="55" pos:column="40">-&gt;<pos:position pos:line="55" pos:column="45"/></operator><name pos:line="55" pos:column="42">ai_next<pos:position pos:line="55" pos:column="49"/></name></name></expr></incr>)<pos:position pos:line="55" pos:column="50"/></control> <block pos:line="55" pos:column="51">{
		<expr_stmt><expr><name pos:line="56" pos:column="17">s<pos:position pos:line="56" pos:column="18"/></name> <operator pos:line="56" pos:column="19">=<pos:position pos:line="56" pos:column="20"/></operator> <call><name pos:line="56" pos:column="21">socket<pos:position pos:line="56" pos:column="27"/></name><argument_list pos:line="56" pos:column="27">(<argument><expr><name><name pos:line="56" pos:column="28">res<pos:position pos:line="56" pos:column="31"/></name><operator pos:line="56" pos:column="31">-&gt;<pos:position pos:line="56" pos:column="36"/></operator><name pos:line="56" pos:column="33">ai_family<pos:position pos:line="56" pos:column="42"/></name></name></expr></argument>, <argument><expr><name><name pos:line="56" pos:column="44">res<pos:position pos:line="56" pos:column="47"/></name><operator pos:line="56" pos:column="47">-&gt;<pos:position pos:line="56" pos:column="52"/></operator><name pos:line="56" pos:column="49">ai_socktype<pos:position pos:line="56" pos:column="60"/></name></name></expr></argument>, <argument><expr><name><name pos:line="56" pos:column="62">res<pos:position pos:line="56" pos:column="65"/></name><operator pos:line="56" pos:column="65">-&gt;<pos:position pos:line="56" pos:column="70"/></operator><name pos:line="56" pos:column="67">ai_protocol<pos:position pos:line="56" pos:column="78"/></name></name></expr></argument>)<pos:position pos:line="56" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="80"/></expr_stmt>
		<if pos:line="57" pos:column="17">if <condition pos:line="57" pos:column="20">(<expr><name pos:line="57" pos:column="21">s<pos:position pos:line="57" pos:column="22"/></name> <operator pos:line="57" pos:column="23">&lt;<pos:position pos:line="57" pos:column="27"/></operator> <literal type="number" pos:line="57" pos:column="25">0<pos:position pos:line="57" pos:column="26"/></literal></expr>)<pos:position pos:line="57" pos:column="27"/></condition><then pos:line="57" pos:column="27">
			<block type="pseudo"><continue pos:line="58" pos:column="25">continue;<pos:position pos:line="58" pos:column="34"/></continue></block></then></if>

		<if pos:line="60" pos:column="17">if <condition pos:line="60" pos:column="20">(<expr><name pos:line="60" pos:column="21">bind_address<pos:position pos:line="60" pos:column="33"/></name></expr>)<pos:position pos:line="60" pos:column="34"/></condition><then pos:line="60" pos:column="34">
			<block type="pseudo"><if pos:line="61" pos:column="25">if <condition pos:line="61" pos:column="28">(<expr><call><name pos:line="61" pos:column="29">try_bind_local<pos:position pos:line="61" pos:column="43"/></name><argument_list pos:line="61" pos:column="43">(<argument><expr><name pos:line="61" pos:column="44">s<pos:position pos:line="61" pos:column="45"/></name></expr></argument>, <argument><expr><name><name pos:line="61" pos:column="47">res<pos:position pos:line="61" pos:column="50"/></name><operator pos:line="61" pos:column="50">-&gt;<pos:position pos:line="61" pos:column="55"/></operator><name pos:line="61" pos:column="52">ai_family<pos:position pos:line="61" pos:column="61"/></name></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="63">type<pos:position pos:line="61" pos:column="67"/></name></expr></argument>,
					   <argument><expr><name pos:line="62" pos:column="44">bind_address<pos:position pos:line="62" pos:column="56"/></name></expr></argument>)<pos:position pos:line="62" pos:column="57"/></argument_list></call> <operator pos:line="62" pos:column="58">==<pos:position pos:line="62" pos:column="60"/></operator> <operator pos:line="62" pos:column="61">-<pos:position pos:line="62" pos:column="62"/></operator><literal type="number" pos:line="62" pos:column="62">1<pos:position pos:line="62" pos:column="63"/></literal></expr>)<pos:position pos:line="62" pos:column="64"/></condition><then pos:line="62" pos:column="64"> <block pos:line="62" pos:column="65">{
				<expr_stmt><expr><call><name pos:line="63" pos:column="33">close<pos:position pos:line="63" pos:column="38"/></name><argument_list pos:line="63" pos:column="38">(<argument><expr><name pos:line="63" pos:column="39">s<pos:position pos:line="63" pos:column="40"/></name></expr></argument>)<pos:position pos:line="63" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="42"/></expr_stmt>
				<expr_stmt><expr><name pos:line="64" pos:column="33">s<pos:position pos:line="64" pos:column="34"/></name> <operator pos:line="64" pos:column="35">=<pos:position pos:line="64" pos:column="36"/></operator> <operator pos:line="64" pos:column="37">-<pos:position pos:line="64" pos:column="38"/></operator><literal type="number" pos:line="64" pos:column="38">1<pos:position pos:line="64" pos:column="39"/></literal></expr>;<pos:position pos:line="64" pos:column="40"/></expr_stmt>
				<continue pos:line="65" pos:column="33">continue;<pos:position pos:line="65" pos:column="42"/></continue>
			}<pos:position pos:line="66" pos:column="26"/></block></then></if></block></then></if>

		<if pos:line="68" pos:column="17">if <condition pos:line="68" pos:column="20">(<expr><call><name pos:line="68" pos:column="21">connect<pos:position pos:line="68" pos:column="28"/></name><argument_list pos:line="68" pos:column="28">(<argument><expr><name pos:line="68" pos:column="29">s<pos:position pos:line="68" pos:column="30"/></name></expr></argument>, <argument><expr><name><name pos:line="68" pos:column="32">res<pos:position pos:line="68" pos:column="35"/></name><operator pos:line="68" pos:column="35">-&gt;<pos:position pos:line="68" pos:column="40"/></operator><name pos:line="68" pos:column="37">ai_addr<pos:position pos:line="68" pos:column="44"/></name></name></expr></argument>, <argument><expr><name><name pos:line="68" pos:column="46">res<pos:position pos:line="68" pos:column="49"/></name><operator pos:line="68" pos:column="49">-&gt;<pos:position pos:line="68" pos:column="54"/></operator><name pos:line="68" pos:column="51">ai_addrlen<pos:position pos:line="68" pos:column="61"/></name></name></expr></argument>)<pos:position pos:line="68" pos:column="62"/></argument_list></call> <operator pos:line="68" pos:column="63">&lt;<pos:position pos:line="68" pos:column="67"/></operator> <literal type="number" pos:line="68" pos:column="65">0<pos:position pos:line="68" pos:column="66"/></literal></expr>)<pos:position pos:line="68" pos:column="67"/></condition><then pos:line="68" pos:column="67"> <block pos:line="68" pos:column="68">{
			<expr_stmt><expr><call><name pos:line="69" pos:column="25">close<pos:position pos:line="69" pos:column="30"/></name><argument_list pos:line="69" pos:column="30">(<argument><expr><name pos:line="69" pos:column="31">s<pos:position pos:line="69" pos:column="32"/></name></expr></argument>)<pos:position pos:line="69" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="34"/></expr_stmt>
			<expr_stmt><expr><name pos:line="70" pos:column="25">s<pos:position pos:line="70" pos:column="26"/></name> <operator pos:line="70" pos:column="27">=<pos:position pos:line="70" pos:column="28"/></operator> <operator pos:line="70" pos:column="29">-<pos:position pos:line="70" pos:column="30"/></operator><literal type="number" pos:line="70" pos:column="30">1<pos:position pos:line="70" pos:column="31"/></literal></expr>;<pos:position pos:line="70" pos:column="32"/></expr_stmt>
			<continue pos:line="71" pos:column="25">continue;<pos:position pos:line="71" pos:column="34"/></continue>
		}<pos:position pos:line="72" pos:column="18"/></block></then></if>
		<if pos:line="73" pos:column="17">if <condition pos:line="73" pos:column="20">(<expr><name pos:line="73" pos:column="21">proxied<pos:position pos:line="73" pos:column="28"/></name> <operator pos:line="73" pos:column="29">&amp;&amp;<pos:position pos:line="73" pos:column="39"/></operator>
		    <call><name pos:line="74" pos:column="21">establish_proxy_connection<pos:position pos:line="74" pos:column="47"/></name><argument_list pos:line="74" pos:column="47">(<argument><expr><name pos:line="74" pos:column="48">s<pos:position pos:line="74" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="74" pos:column="51">host<pos:position pos:line="74" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="74" pos:column="57">port<pos:position pos:line="74" pos:column="61"/></name></expr></argument>)<pos:position pos:line="74" pos:column="62"/></argument_list></call> <operator pos:line="74" pos:column="63">!=<pos:position pos:line="74" pos:column="65"/></operator> <literal type="number" pos:line="74" pos:column="66">0<pos:position pos:line="74" pos:column="67"/></literal></expr>)<pos:position pos:line="74" pos:column="68"/></condition><then pos:line="74" pos:column="68"> <block pos:line="74" pos:column="69">{
			<expr_stmt><expr><call><name pos:line="75" pos:column="25">close<pos:position pos:line="75" pos:column="30"/></name><argument_list pos:line="75" pos:column="30">(<argument><expr><name pos:line="75" pos:column="31">s<pos:position pos:line="75" pos:column="32"/></name></expr></argument>)<pos:position pos:line="75" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="34"/></expr_stmt>
			<expr_stmt><expr><name pos:line="76" pos:column="25">s<pos:position pos:line="76" pos:column="26"/></name> <operator pos:line="76" pos:column="27">=<pos:position pos:line="76" pos:column="28"/></operator> <operator pos:line="76" pos:column="29">-<pos:position pos:line="76" pos:column="30"/></operator><literal type="number" pos:line="76" pos:column="30">1<pos:position pos:line="76" pos:column="31"/></literal></expr>;<pos:position pos:line="76" pos:column="32"/></expr_stmt>
			<continue pos:line="77" pos:column="25">continue;<pos:position pos:line="77" pos:column="34"/></continue>
		}<pos:position pos:line="78" pos:column="18"/></block></then> <else pos:line="78" pos:column="19">else
			<block type="pseudo"><break pos:line="79" pos:column="25">break;<pos:position pos:line="79" pos:column="31"/></break></block></else></if>
	}<pos:position pos:line="80" pos:column="10"/></block></for>
	<expr_stmt><expr><call><name pos:line="81" pos:column="9">freeaddrinfo<pos:position pos:line="81" pos:column="21"/></name><argument_list pos:line="81" pos:column="21">(<argument><expr><name pos:line="81" pos:column="22">res0<pos:position pos:line="81" pos:column="26"/></name></expr></argument>)<pos:position pos:line="81" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="28"/></expr_stmt>
	<if pos:line="82" pos:column="9">if <condition pos:line="82" pos:column="12">(<expr><name pos:line="82" pos:column="13">s<pos:position pos:line="82" pos:column="14"/></name> <operator pos:line="82" pos:column="15">&lt;<pos:position pos:line="82" pos:column="19"/></operator> <literal type="number" pos:line="82" pos:column="17">0<pos:position pos:line="82" pos:column="18"/></literal></expr>)<pos:position pos:line="82" pos:column="19"/></condition><then pos:line="82" pos:column="19"> <block pos:line="82" pos:column="20">{
		<expr_stmt><expr><call><name pos:line="83" pos:column="17">rprintf<pos:position pos:line="83" pos:column="24"/></name><argument_list pos:line="83" pos:column="24">(<argument><expr><name pos:line="83" pos:column="25">FERROR<pos:position pos:line="83" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="83" pos:column="33">RSYNC_NAME<pos:position pos:line="83" pos:column="43"/></name> <literal type="string" pos:line="83" pos:column="44">": failed to connect to %s: %s\n"<pos:position pos:line="83" pos:column="77"/></literal></expr></argument>,
			<argument><expr><name pos:line="84" pos:column="25">h<pos:position pos:line="84" pos:column="26"/></name></expr></argument>, <argument><expr><call><name pos:line="84" pos:column="28">strerror<pos:position pos:line="84" pos:column="36"/></name><argument_list pos:line="84" pos:column="36">(<argument><expr><name pos:line="84" pos:column="37">errno<pos:position pos:line="84" pos:column="42"/></name></expr></argument>)<pos:position pos:line="84" pos:column="43"/></argument_list></call></expr></argument>)<pos:position pos:line="84" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="45"/></expr_stmt>
		<return pos:line="85" pos:column="17">return <expr><operator pos:line="85" pos:column="24">-<pos:position pos:line="85" pos:column="25"/></operator><literal type="number" pos:line="85" pos:column="25">1<pos:position pos:line="85" pos:column="26"/></literal></expr>;<pos:position pos:line="85" pos:column="27"/></return>
	}<pos:position pos:line="86" pos:column="10"/></block></then></if>
	<return pos:line="87" pos:column="9">return <expr><name pos:line="87" pos:column="16">s<pos:position pos:line="87" pos:column="17"/></name></expr>;<pos:position pos:line="87" pos:column="18"/></return>
}<pos:position pos:line="88" pos:column="2"/></block></function></unit>
