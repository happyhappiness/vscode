<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_235_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">add_nocompress_suffixes<pos:position pos:line="1" pos:column="36"/></name><parameter_list pos:line="1" pos:column="36">(<parameter><decl><type><specifier pos:line="1" pos:column="37">const<pos:position pos:line="1" pos:column="42"/></specifier> <name pos:line="1" pos:column="43">char<pos:position pos:line="1" pos:column="47"/></name> <modifier pos:line="1" pos:column="48">*<pos:position pos:line="1" pos:column="49"/></modifier></type><name pos:line="1" pos:column="49">str<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="53"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">char<pos:position pos:line="3" pos:column="13"/></name> <modifier pos:line="3" pos:column="14">*<pos:position pos:line="3" pos:column="15"/></modifier></type><name pos:line="3" pos:column="15">buf<pos:position pos:line="3" pos:column="18"/></name></decl>, <modifier pos:line="3" pos:column="20">*<pos:position pos:line="3" pos:column="21"/></modifier><decl><type ref="prev"/><name pos:line="3" pos:column="21">t<pos:position pos:line="3" pos:column="22"/></name></decl>;<pos:position pos:line="3" pos:column="23"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="4" pos:column="9">const<pos:position pos:line="4" pos:column="14"/></specifier> <name pos:line="4" pos:column="15">char<pos:position pos:line="4" pos:column="19"/></name> <modifier pos:line="4" pos:column="20">*<pos:position pos:line="4" pos:column="21"/></modifier></type><name pos:line="4" pos:column="21">f<pos:position pos:line="4" pos:column="22"/></name> <init pos:line="4" pos:column="23">= <expr><name pos:line="4" pos:column="25">str<pos:position pos:line="4" pos:column="28"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="29"/></decl_stmt>

	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><operator pos:line="6" pos:column="13">!<pos:position pos:line="6" pos:column="14"/></operator><operator pos:line="6" pos:column="14">(<pos:position pos:line="6" pos:column="15"/></operator><name pos:line="6" pos:column="15">buf<pos:position pos:line="6" pos:column="18"/></name> <operator pos:line="6" pos:column="19">=<pos:position pos:line="6" pos:column="20"/></operator> <call><name pos:line="6" pos:column="21">new_array<pos:position pos:line="6" pos:column="30"/></name><argument_list pos:line="6" pos:column="30">(<argument><expr><name pos:line="6" pos:column="31">char<pos:position pos:line="6" pos:column="35"/></name></expr></argument>, <argument><expr><call><name pos:line="6" pos:column="37">strlen<pos:position pos:line="6" pos:column="43"/></name><argument_list pos:line="6" pos:column="43">(<argument><expr><name pos:line="6" pos:column="44">f<pos:position pos:line="6" pos:column="45"/></name></expr></argument>)<pos:position pos:line="6" pos:column="46"/></argument_list></call> <operator pos:line="6" pos:column="47">+<pos:position pos:line="6" pos:column="48"/></operator> <literal type="number" pos:line="6" pos:column="49">1<pos:position pos:line="6" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="51"/></argument_list></call><operator pos:line="6" pos:column="51">)<pos:position pos:line="6" pos:column="52"/></operator></expr>)<pos:position pos:line="6" pos:column="53"/></condition><then pos:line="6" pos:column="53">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="7" pos:column="17">out_of_memory<pos:position pos:line="7" pos:column="30"/></name><argument_list pos:line="7" pos:column="30">(<argument><expr><literal type="string" pos:line="7" pos:column="31">"add_nocompress_suffixes"<pos:position pos:line="7" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="58"/></expr_stmt></block></then></if>

	<while pos:line="9" pos:column="9">while <condition pos:line="9" pos:column="15">(<expr><operator pos:line="9" pos:column="16">*<pos:position pos:line="9" pos:column="17"/></operator><name pos:line="9" pos:column="17">f<pos:position pos:line="9" pos:column="18"/></name></expr>)<pos:position pos:line="9" pos:column="19"/></condition> <block pos:line="9" pos:column="20">{
		<if pos:line="10" pos:column="17">if <condition pos:line="10" pos:column="20">(<expr><operator pos:line="10" pos:column="21">*<pos:position pos:line="10" pos:column="22"/></operator><name pos:line="10" pos:column="22">f<pos:position pos:line="10" pos:column="23"/></name> <operator pos:line="10" pos:column="24">==<pos:position pos:line="10" pos:column="26"/></operator> <literal type="char" pos:line="10" pos:column="27">'/'<pos:position pos:line="10" pos:column="30"/></literal></expr>)<pos:position pos:line="10" pos:column="31"/></condition><then pos:line="10" pos:column="31"> <block pos:line="10" pos:column="32">{
			<expr_stmt><expr><name pos:line="11" pos:column="25">f<pos:position pos:line="11" pos:column="26"/></name><operator pos:line="11" pos:column="26">++<pos:position pos:line="11" pos:column="28"/></operator></expr>;<pos:position pos:line="11" pos:column="29"/></expr_stmt>
			<continue pos:line="12" pos:column="25">continue;<pos:position pos:line="12" pos:column="34"/></continue>
		}<pos:position pos:line="13" pos:column="18"/></block></then></if>

		<expr_stmt><expr><name pos:line="15" pos:column="17">t<pos:position pos:line="15" pos:column="18"/></name> <operator pos:line="15" pos:column="19">=<pos:position pos:line="15" pos:column="20"/></operator> <name pos:line="15" pos:column="21">buf<pos:position pos:line="15" pos:column="24"/></name></expr>;<pos:position pos:line="15" pos:column="25"/></expr_stmt>
		<do pos:line="16" pos:column="17">do <block pos:line="16" pos:column="20">{
			<if pos:line="17" pos:column="25">if <condition pos:line="17" pos:column="28">(<expr><call><name pos:line="17" pos:column="29">isUpper<pos:position pos:line="17" pos:column="36"/></name><argument_list pos:line="17" pos:column="36">(<argument><expr><name pos:line="17" pos:column="37">f<pos:position pos:line="17" pos:column="38"/></name></expr></argument>)<pos:position pos:line="17" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="17" pos:column="40"/></condition><then pos:line="17" pos:column="40">
				<block type="pseudo"><expr_stmt><expr><operator pos:line="18" pos:column="33">*<pos:position pos:line="18" pos:column="34"/></operator><name pos:line="18" pos:column="34">t<pos:position pos:line="18" pos:column="35"/></name><operator pos:line="18" pos:column="35">++<pos:position pos:line="18" pos:column="37"/></operator> <operator pos:line="18" pos:column="38">=<pos:position pos:line="18" pos:column="39"/></operator> <call><name pos:line="18" pos:column="40">toLower<pos:position pos:line="18" pos:column="47"/></name><argument_list pos:line="18" pos:column="47">(<argument><expr><name pos:line="18" pos:column="48">f<pos:position pos:line="18" pos:column="49"/></name></expr></argument>)<pos:position pos:line="18" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="51"/></expr_stmt></block></then>
			<else pos:line="19" pos:column="25">else
				<block type="pseudo"><expr_stmt><expr><operator pos:line="20" pos:column="33">*<pos:position pos:line="20" pos:column="34"/></operator><name pos:line="20" pos:column="34">t<pos:position pos:line="20" pos:column="35"/></name><operator pos:line="20" pos:column="35">++<pos:position pos:line="20" pos:column="37"/></operator> <operator pos:line="20" pos:column="38">=<pos:position pos:line="20" pos:column="39"/></operator> <operator pos:line="20" pos:column="40">*<pos:position pos:line="20" pos:column="41"/></operator><name pos:line="20" pos:column="41">f<pos:position pos:line="20" pos:column="42"/></name></expr>;<pos:position pos:line="20" pos:column="43"/></expr_stmt></block></else></if>
		}<pos:position pos:line="21" pos:column="18"/></block> while <condition pos:line="21" pos:column="25">(<expr><operator pos:line="21" pos:column="26">*<pos:position pos:line="21" pos:column="27"/></operator><operator pos:line="21" pos:column="27">++<pos:position pos:line="21" pos:column="29"/></operator><name pos:line="21" pos:column="29">f<pos:position pos:line="21" pos:column="30"/></name> <operator pos:line="21" pos:column="31">!=<pos:position pos:line="21" pos:column="33"/></operator> <literal type="char" pos:line="21" pos:column="34">'/'<pos:position pos:line="21" pos:column="37"/></literal> <operator pos:line="21" pos:column="38">&amp;&amp;<pos:position pos:line="21" pos:column="48"/></operator> <operator pos:line="21" pos:column="41">*<pos:position pos:line="21" pos:column="42"/></operator><name pos:line="21" pos:column="42">f<pos:position pos:line="21" pos:column="43"/></name></expr>)<pos:position pos:line="21" pos:column="44"/></condition>;<pos:position pos:line="21" pos:column="45"/></do>
		<expr_stmt><expr><operator pos:line="22" pos:column="17">*<pos:position pos:line="22" pos:column="18"/></operator><name pos:line="22" pos:column="18">t<pos:position pos:line="22" pos:column="19"/></name><operator pos:line="22" pos:column="19">++<pos:position pos:line="22" pos:column="21"/></operator> <operator pos:line="22" pos:column="22">=<pos:position pos:line="22" pos:column="23"/></operator> <literal type="char" pos:line="22" pos:column="24">'\0'<pos:position pos:line="22" pos:column="28"/></literal></expr>;<pos:position pos:line="22" pos:column="29"/></expr_stmt>

		<expr_stmt><expr><call><name pos:line="24" pos:column="17">add_suffix<pos:position pos:line="24" pos:column="27"/></name><argument_list pos:line="24" pos:column="27">(<argument><expr><operator pos:line="24" pos:column="28">&amp;<pos:position pos:line="24" pos:column="33"/></operator><name pos:line="24" pos:column="29">suftree<pos:position pos:line="24" pos:column="36"/></name></expr></argument>, <argument><expr><operator pos:line="24" pos:column="38">*<pos:position pos:line="24" pos:column="39"/></operator><name pos:line="24" pos:column="39">buf<pos:position pos:line="24" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="44">buf<pos:position pos:line="24" pos:column="47"/></name><operator pos:line="24" pos:column="47">+<pos:position pos:line="24" pos:column="48"/></operator><literal type="number" pos:line="24" pos:column="48">1<pos:position pos:line="24" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="51"/></expr_stmt>
	}<pos:position pos:line="25" pos:column="10"/></block></while>

	<expr_stmt><expr><call><name pos:line="27" pos:column="9">free<pos:position pos:line="27" pos:column="13"/></name><argument_list pos:line="27" pos:column="13">(<argument><expr><name pos:line="27" pos:column="14">buf<pos:position pos:line="27" pos:column="17"/></name></expr></argument>)<pos:position pos:line="27" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="19"/></expr_stmt>
}<pos:position pos:line="28" pos:column="2"/></block></function></unit>
