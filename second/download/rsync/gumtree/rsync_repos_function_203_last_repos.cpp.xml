<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_203_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">match_address<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><specifier pos:line="1" pos:column="26">const<pos:position pos:line="1" pos:column="31"/></specifier> <name pos:line="1" pos:column="32">char<pos:position pos:line="1" pos:column="36"/></name> <modifier pos:line="1" pos:column="37">*<pos:position pos:line="1" pos:column="38"/></modifier></type><name pos:line="1" pos:column="38">addr<pos:position pos:line="1" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="44">const<pos:position pos:line="1" pos:column="49"/></specifier> <name pos:line="1" pos:column="50">char<pos:position pos:line="1" pos:column="54"/></name> <modifier pos:line="1" pos:column="55">*<pos:position pos:line="1" pos:column="56"/></modifier></type><name pos:line="1" pos:column="56">tok<pos:position pos:line="1" pos:column="59"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="60"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">char<pos:position pos:line="3" pos:column="13"/></name> <modifier pos:line="3" pos:column="14">*<pos:position pos:line="3" pos:column="15"/></modifier></type><name pos:line="3" pos:column="15">p<pos:position pos:line="3" pos:column="16"/></name></decl>;<pos:position pos:line="3" pos:column="17"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">addrinfo<pos:position pos:line="4" pos:column="24"/></name></name></type> <name pos:line="4" pos:column="25">hints<pos:position pos:line="4" pos:column="30"/></name></decl>, <modifier pos:line="4" pos:column="32">*<pos:position pos:line="4" pos:column="33"/></modifier><decl><type ref="prev"/><name pos:line="4" pos:column="33">resa<pos:position pos:line="4" pos:column="37"/></name></decl>, <modifier pos:line="4" pos:column="39">*<pos:position pos:line="4" pos:column="40"/></modifier><decl><type ref="prev"/><name pos:line="4" pos:column="40">rest<pos:position pos:line="4" pos:column="44"/></name></decl>;<pos:position pos:line="4" pos:column="45"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">gai<pos:position pos:line="5" pos:column="16"/></name></decl>;<pos:position pos:line="5" pos:column="17"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">ret<pos:position pos:line="6" pos:column="16"/></name> <init pos:line="6" pos:column="17">= <expr><literal type="number" pos:line="6" pos:column="19">0<pos:position pos:line="6" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="21"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">int<pos:position pos:line="7" pos:column="12"/></name></type> <name pos:line="7" pos:column="13">addrlen<pos:position pos:line="7" pos:column="20"/></name> <init pos:line="7" pos:column="21">= <expr><literal type="number" pos:line="7" pos:column="23">0<pos:position pos:line="7" pos:column="24"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="25"/></decl_stmt>
<cpp:ifdef pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">ifdef<pos:position pos:line="8" pos:column="7"/></cpp:directive> <name pos:line="8" pos:column="8">HAVE_STRTOL<pos:position pos:line="8" pos:column="19"/></name></cpp:ifdef>
	<decl_stmt><decl><type><name pos:line="9" pos:column="9">long<pos:position pos:line="9" pos:column="13"/></name> <name pos:line="9" pos:column="14">int<pos:position pos:line="9" pos:column="17"/></name></type> <name pos:line="9" pos:column="18">bits<pos:position pos:line="9" pos:column="22"/></name></decl>;<pos:position pos:line="9" pos:column="23"/></decl_stmt>
<cpp:else pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">else<pos:position pos:line="10" pos:column="6"/></cpp:directive></cpp:else>
	<decl_stmt><decl><type><name pos:line="11" pos:column="9">int<pos:position pos:line="11" pos:column="12"/></name></type> <name pos:line="11" pos:column="13">bits<pos:position pos:line="11" pos:column="17"/></name></decl>;<pos:position pos:line="11" pos:column="18"/></decl_stmt>
<cpp:endif pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">endif<pos:position pos:line="12" pos:column="7"/></cpp:directive></cpp:endif>
	<decl_stmt><decl><type><name pos:line="13" pos:column="9">char<pos:position pos:line="13" pos:column="13"/></name></type> <name><name pos:line="13" pos:column="14">mask<pos:position pos:line="13" pos:column="18"/></name><index pos:line="13" pos:column="18">[<expr><literal type="number" pos:line="13" pos:column="19">16<pos:position pos:line="13" pos:column="21"/></literal></expr>]<pos:position pos:line="13" pos:column="22"/></index></name></decl>;<pos:position pos:line="13" pos:column="23"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="14" pos:column="9">char<pos:position pos:line="14" pos:column="13"/></name> <modifier pos:line="14" pos:column="14">*<pos:position pos:line="14" pos:column="15"/></modifier></type><name pos:line="14" pos:column="15">a<pos:position pos:line="14" pos:column="16"/></name> <init pos:line="14" pos:column="17">= <expr><name pos:line="14" pos:column="19">NULL<pos:position pos:line="14" pos:column="23"/></name></expr></init></decl>, <modifier pos:line="14" pos:column="25">*<pos:position pos:line="14" pos:column="26"/></modifier><decl><type ref="prev"/><name pos:line="14" pos:column="26">t<pos:position pos:line="14" pos:column="27"/></name> <init pos:line="14" pos:column="28">= <expr><name pos:line="14" pos:column="30">NULL<pos:position pos:line="14" pos:column="34"/></name></expr></init></decl>;<pos:position pos:line="14" pos:column="35"/></decl_stmt>

	<if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><operator pos:line="16" pos:column="13">!<pos:position pos:line="16" pos:column="14"/></operator><name pos:line="16" pos:column="14">addr<pos:position pos:line="16" pos:column="18"/></name> <operator pos:line="16" pos:column="19">||<pos:position pos:line="16" pos:column="21"/></operator> <operator pos:line="16" pos:column="22">!<pos:position pos:line="16" pos:column="23"/></operator><operator pos:line="16" pos:column="23">*<pos:position pos:line="16" pos:column="24"/></operator><name pos:line="16" pos:column="24">addr<pos:position pos:line="16" pos:column="28"/></name></expr>)<pos:position pos:line="16" pos:column="29"/></condition><then pos:line="16" pos:column="29">
		<block type="pseudo"><return pos:line="17" pos:column="17">return <expr><literal type="number" pos:line="17" pos:column="24">0<pos:position pos:line="17" pos:column="25"/></literal></expr>;<pos:position pos:line="17" pos:column="26"/></return></block></then></if>

	<expr_stmt><expr><name pos:line="19" pos:column="9">p<pos:position pos:line="19" pos:column="10"/></name> <operator pos:line="19" pos:column="11">=<pos:position pos:line="19" pos:column="12"/></operator> <call><name pos:line="19" pos:column="13">strchr<pos:position pos:line="19" pos:column="19"/></name><argument_list pos:line="19" pos:column="19">(<argument><expr><name pos:line="19" pos:column="20">tok<pos:position pos:line="19" pos:column="23"/></name></expr></argument>,<argument><expr><literal type="char" pos:line="19" pos:column="24">'/'<pos:position pos:line="19" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="29"/></expr_stmt>
	<if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><name pos:line="20" pos:column="13">p<pos:position pos:line="20" pos:column="14"/></name></expr>)<pos:position pos:line="20" pos:column="15"/></condition><then pos:line="20" pos:column="15">
		<block type="pseudo"><expr_stmt><expr><operator pos:line="21" pos:column="17">*<pos:position pos:line="21" pos:column="18"/></operator><name pos:line="21" pos:column="18">p<pos:position pos:line="21" pos:column="19"/></name> <operator pos:line="21" pos:column="20">=<pos:position pos:line="21" pos:column="21"/></operator> <literal type="char" pos:line="21" pos:column="22">'\0'<pos:position pos:line="21" pos:column="26"/></literal></expr>;<pos:position pos:line="21" pos:column="27"/></expr_stmt></block></then></if>

	<comment type="block" pos:line="23" pos:column="9">/* Fail quietly if tok is a hostname, not an address. */</comment>
	<if pos:line="24" pos:column="9">if <condition pos:line="24" pos:column="12">(<expr><name><name pos:line="24" pos:column="13">tok<pos:position pos:line="24" pos:column="16"/></name><index pos:line="24" pos:column="16">[<expr><call><name pos:line="24" pos:column="17">strspn<pos:position pos:line="24" pos:column="23"/></name><argument_list pos:line="24" pos:column="23">(<argument><expr><name pos:line="24" pos:column="24">tok<pos:position pos:line="24" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="24" pos:column="29">".0123456789"<pos:position pos:line="24" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="43"/></argument_list></call></expr>]<pos:position pos:line="24" pos:column="44"/></index></name> <operator pos:line="24" pos:column="45">&amp;&amp;<pos:position pos:line="24" pos:column="55"/></operator> <call><name pos:line="24" pos:column="48">strchr<pos:position pos:line="24" pos:column="54"/></name><argument_list pos:line="24" pos:column="54">(<argument><expr><name pos:line="24" pos:column="55">tok<pos:position pos:line="24" pos:column="58"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="24" pos:column="60">':'<pos:position pos:line="24" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="64"/></argument_list></call> <operator pos:line="24" pos:column="65">==<pos:position pos:line="24" pos:column="67"/></operator> <name pos:line="24" pos:column="68">NULL<pos:position pos:line="24" pos:column="72"/></name></expr>)<pos:position pos:line="24" pos:column="73"/></condition><then pos:line="24" pos:column="73"> <block pos:line="24" pos:column="74">{
		<if pos:line="25" pos:column="17">if <condition pos:line="25" pos:column="20">(<expr><name pos:line="25" pos:column="21">p<pos:position pos:line="25" pos:column="22"/></name></expr>)<pos:position pos:line="25" pos:column="23"/></condition><then pos:line="25" pos:column="23">
			<block type="pseudo"><expr_stmt><expr><operator pos:line="26" pos:column="25">*<pos:position pos:line="26" pos:column="26"/></operator><name pos:line="26" pos:column="26">p<pos:position pos:line="26" pos:column="27"/></name> <operator pos:line="26" pos:column="28">=<pos:position pos:line="26" pos:column="29"/></operator> <literal type="char" pos:line="26" pos:column="30">'/'<pos:position pos:line="26" pos:column="33"/></literal></expr>;<pos:position pos:line="26" pos:column="34"/></expr_stmt></block></then></if>
		<return pos:line="27" pos:column="17">return <expr><literal type="number" pos:line="27" pos:column="24">0<pos:position pos:line="27" pos:column="25"/></literal></expr>;<pos:position pos:line="27" pos:column="26"/></return>
	}<pos:position pos:line="28" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="30" pos:column="9">memset<pos:position pos:line="30" pos:column="15"/></name><argument_list pos:line="30" pos:column="15">(<argument><expr><operator pos:line="30" pos:column="16">&amp;<pos:position pos:line="30" pos:column="21"/></operator><name pos:line="30" pos:column="17">hints<pos:position pos:line="30" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="30" pos:column="24">0<pos:position pos:line="30" pos:column="25"/></literal></expr></argument>, <argument><expr><sizeof pos:line="30" pos:column="27">sizeof<argument_list pos:line="30" pos:column="33">(<argument><expr><name pos:line="30" pos:column="34">hints<pos:position pos:line="30" pos:column="39"/></name></expr></argument>)<pos:position pos:line="30" pos:column="40"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="30" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="42"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="31" pos:column="9">hints<pos:position pos:line="31" pos:column="14"/></name><operator pos:line="31" pos:column="14">.<pos:position pos:line="31" pos:column="15"/></operator><name pos:line="31" pos:column="15">ai_family<pos:position pos:line="31" pos:column="24"/></name></name> <operator pos:line="31" pos:column="25">=<pos:position pos:line="31" pos:column="26"/></operator> <name pos:line="31" pos:column="27">PF_UNSPEC<pos:position pos:line="31" pos:column="36"/></name></expr>;<pos:position pos:line="31" pos:column="37"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="32" pos:column="9">hints<pos:position pos:line="32" pos:column="14"/></name><operator pos:line="32" pos:column="14">.<pos:position pos:line="32" pos:column="15"/></operator><name pos:line="32" pos:column="15">ai_socktype<pos:position pos:line="32" pos:column="26"/></name></name> <operator pos:line="32" pos:column="27">=<pos:position pos:line="32" pos:column="28"/></operator> <name pos:line="32" pos:column="29">SOCK_STREAM<pos:position pos:line="32" pos:column="40"/></name></expr>;<pos:position pos:line="32" pos:column="41"/></expr_stmt>
<cpp:ifdef pos:line="33" pos:column="1">#<cpp:directive pos:line="33" pos:column="2">ifdef<pos:position pos:line="33" pos:column="7"/></cpp:directive> <name pos:line="33" pos:column="8">AI_NUMERICHOST<pos:position pos:line="33" pos:column="22"/></name></cpp:ifdef>
	<expr_stmt><expr><name><name pos:line="34" pos:column="9">hints<pos:position pos:line="34" pos:column="14"/></name><operator pos:line="34" pos:column="14">.<pos:position pos:line="34" pos:column="15"/></operator><name pos:line="34" pos:column="15">ai_flags<pos:position pos:line="34" pos:column="23"/></name></name> <operator pos:line="34" pos:column="24">=<pos:position pos:line="34" pos:column="25"/></operator> <name pos:line="34" pos:column="26">AI_NUMERICHOST<pos:position pos:line="34" pos:column="40"/></name></expr>;<pos:position pos:line="34" pos:column="41"/></expr_stmt>
<cpp:endif pos:line="35" pos:column="1">#<cpp:directive pos:line="35" pos:column="2">endif<pos:position pos:line="35" pos:column="7"/></cpp:directive></cpp:endif>

	<if pos:line="37" pos:column="9">if <condition pos:line="37" pos:column="12">(<expr><call><name pos:line="37" pos:column="13">getaddrinfo<pos:position pos:line="37" pos:column="24"/></name><argument_list pos:line="37" pos:column="24">(<argument><expr><name pos:line="37" pos:column="25">addr<pos:position pos:line="37" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="31">NULL<pos:position pos:line="37" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="37" pos:column="37">&amp;<pos:position pos:line="37" pos:column="42"/></operator><name pos:line="37" pos:column="38">hints<pos:position pos:line="37" pos:column="43"/></name></expr></argument>, <argument><expr><operator pos:line="37" pos:column="45">&amp;<pos:position pos:line="37" pos:column="50"/></operator><name pos:line="37" pos:column="46">resa<pos:position pos:line="37" pos:column="50"/></name></expr></argument>)<pos:position pos:line="37" pos:column="51"/></argument_list></call> <operator pos:line="37" pos:column="52">!=<pos:position pos:line="37" pos:column="54"/></operator> <literal type="number" pos:line="37" pos:column="55">0<pos:position pos:line="37" pos:column="56"/></literal></expr>)<pos:position pos:line="37" pos:column="57"/></condition><then pos:line="37" pos:column="57"> <block pos:line="37" pos:column="58">{
		<if pos:line="38" pos:column="17">if <condition pos:line="38" pos:column="20">(<expr><name pos:line="38" pos:column="21">p<pos:position pos:line="38" pos:column="22"/></name></expr>)<pos:position pos:line="38" pos:column="23"/></condition><then pos:line="38" pos:column="23">
			<block type="pseudo"><expr_stmt><expr><operator pos:line="39" pos:column="25">*<pos:position pos:line="39" pos:column="26"/></operator><name pos:line="39" pos:column="26">p<pos:position pos:line="39" pos:column="27"/></name> <operator pos:line="39" pos:column="28">=<pos:position pos:line="39" pos:column="29"/></operator> <literal type="char" pos:line="39" pos:column="30">'/'<pos:position pos:line="39" pos:column="33"/></literal></expr>;<pos:position pos:line="39" pos:column="34"/></expr_stmt></block></then></if>
		<return pos:line="40" pos:column="17">return <expr><literal type="number" pos:line="40" pos:column="24">0<pos:position pos:line="40" pos:column="25"/></literal></expr>;<pos:position pos:line="40" pos:column="26"/></return>
	}<pos:position pos:line="41" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="43" pos:column="9">gai<pos:position pos:line="43" pos:column="12"/></name> <operator pos:line="43" pos:column="13">=<pos:position pos:line="43" pos:column="14"/></operator> <call><name pos:line="43" pos:column="15">getaddrinfo<pos:position pos:line="43" pos:column="26"/></name><argument_list pos:line="43" pos:column="26">(<argument><expr><name pos:line="43" pos:column="27">tok<pos:position pos:line="43" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="32">NULL<pos:position pos:line="43" pos:column="36"/></name></expr></argument>, <argument><expr><operator pos:line="43" pos:column="38">&amp;<pos:position pos:line="43" pos:column="43"/></operator><name pos:line="43" pos:column="39">hints<pos:position pos:line="43" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="43" pos:column="46">&amp;<pos:position pos:line="43" pos:column="51"/></operator><name pos:line="43" pos:column="47">rest<pos:position pos:line="43" pos:column="51"/></name></expr></argument>)<pos:position pos:line="43" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="53"/></expr_stmt>
	<if pos:line="44" pos:column="9">if <condition pos:line="44" pos:column="12">(<expr><name pos:line="44" pos:column="13">p<pos:position pos:line="44" pos:column="14"/></name></expr>)<pos:position pos:line="44" pos:column="15"/></condition><then pos:line="44" pos:column="15">
		<block type="pseudo"><expr_stmt><expr><operator pos:line="45" pos:column="17">*<pos:position pos:line="45" pos:column="18"/></operator><name pos:line="45" pos:column="18">p<pos:position pos:line="45" pos:column="19"/></name><operator pos:line="45" pos:column="19">++<pos:position pos:line="45" pos:column="21"/></operator> <operator pos:line="45" pos:column="22">=<pos:position pos:line="45" pos:column="23"/></operator> <literal type="char" pos:line="45" pos:column="24">'/'<pos:position pos:line="45" pos:column="27"/></literal></expr>;<pos:position pos:line="45" pos:column="28"/></expr_stmt></block></then></if>
	<if pos:line="46" pos:column="9">if <condition pos:line="46" pos:column="12">(<expr><name pos:line="46" pos:column="13">gai<pos:position pos:line="46" pos:column="16"/></name> <operator pos:line="46" pos:column="17">!=<pos:position pos:line="46" pos:column="19"/></operator> <literal type="number" pos:line="46" pos:column="20">0<pos:position pos:line="46" pos:column="21"/></literal></expr>)<pos:position pos:line="46" pos:column="22"/></condition><then pos:line="46" pos:column="22"> <block pos:line="46" pos:column="23">{
		<expr_stmt><expr><call><name pos:line="47" pos:column="17">rprintf<pos:position pos:line="47" pos:column="24"/></name><argument_list pos:line="47" pos:column="24">(<argument><expr><name pos:line="47" pos:column="25">FLOG<pos:position pos:line="47" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="47" pos:column="31">"error matching address %s: %s\n"<pos:position pos:line="47" pos:column="64"/></literal></expr></argument>,
			<argument><expr><name pos:line="48" pos:column="25">tok<pos:position pos:line="48" pos:column="28"/></name></expr></argument>, <argument><expr><call><name pos:line="48" pos:column="30">gai_strerror<pos:position pos:line="48" pos:column="42"/></name><argument_list pos:line="48" pos:column="42">(<argument><expr><name pos:line="48" pos:column="43">gai<pos:position pos:line="48" pos:column="46"/></name></expr></argument>)<pos:position pos:line="48" pos:column="47"/></argument_list></call></expr></argument>)<pos:position pos:line="48" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="49"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="49" pos:column="17">freeaddrinfo<pos:position pos:line="49" pos:column="29"/></name><argument_list pos:line="49" pos:column="29">(<argument><expr><name pos:line="49" pos:column="30">resa<pos:position pos:line="49" pos:column="34"/></name></expr></argument>)<pos:position pos:line="49" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="36"/></expr_stmt>
		<return pos:line="50" pos:column="17">return <expr><literal type="number" pos:line="50" pos:column="24">0<pos:position pos:line="50" pos:column="25"/></literal></expr>;<pos:position pos:line="50" pos:column="26"/></return>
	}<pos:position pos:line="51" pos:column="10"/></block></then></if>

	<if pos:line="53" pos:column="9">if <condition pos:line="53" pos:column="12">(<expr><name><name pos:line="53" pos:column="13">rest<pos:position pos:line="53" pos:column="17"/></name><operator pos:line="53" pos:column="17">-&gt;<pos:position pos:line="53" pos:column="22"/></operator><name pos:line="53" pos:column="19">ai_family<pos:position pos:line="53" pos:column="28"/></name></name> <operator pos:line="53" pos:column="29">!=<pos:position pos:line="53" pos:column="31"/></operator> <name><name pos:line="53" pos:column="32">resa<pos:position pos:line="53" pos:column="36"/></name><operator pos:line="53" pos:column="36">-&gt;<pos:position pos:line="53" pos:column="41"/></operator><name pos:line="53" pos:column="38">ai_family<pos:position pos:line="53" pos:column="47"/></name></name></expr>)<pos:position pos:line="53" pos:column="48"/></condition><then pos:line="53" pos:column="48"> <block pos:line="53" pos:column="49">{
		<expr_stmt><expr><name pos:line="54" pos:column="17">ret<pos:position pos:line="54" pos:column="20"/></name> <operator pos:line="54" pos:column="21">=<pos:position pos:line="54" pos:column="22"/></operator> <literal type="number" pos:line="54" pos:column="23">0<pos:position pos:line="54" pos:column="24"/></literal></expr>;<pos:position pos:line="54" pos:column="25"/></expr_stmt>
		<goto pos:line="55" pos:column="17">goto <name pos:line="55" pos:column="22">out<pos:position pos:line="55" pos:column="25"/></name>;<pos:position pos:line="55" pos:column="26"/></goto>
	}<pos:position pos:line="56" pos:column="10"/></block></then></if>

	<switch pos:line="58" pos:column="9">switch<condition pos:line="58" pos:column="15">(<expr><name><name pos:line="58" pos:column="16">resa<pos:position pos:line="58" pos:column="20"/></name><operator pos:line="58" pos:column="20">-&gt;<pos:position pos:line="58" pos:column="25"/></operator><name pos:line="58" pos:column="22">ai_family<pos:position pos:line="58" pos:column="31"/></name></name></expr>)<pos:position pos:line="58" pos:column="32"/></condition> <block pos:line="58" pos:column="33">{
	<case pos:line="59" pos:column="9">case <expr><name pos:line="59" pos:column="14">PF_INET<pos:position pos:line="59" pos:column="21"/></name></expr>:<pos:position pos:line="59" pos:column="22"/></case>
		<expr_stmt><expr><name pos:line="60" pos:column="17">a<pos:position pos:line="60" pos:column="18"/></name> <operator pos:line="60" pos:column="19">=<pos:position pos:line="60" pos:column="20"/></operator> <operator pos:line="60" pos:column="21">(<pos:position pos:line="60" pos:column="22"/></operator><name pos:line="60" pos:column="22">char<pos:position pos:line="60" pos:column="26"/></name> <operator pos:line="60" pos:column="27">*<pos:position pos:line="60" pos:column="28"/></operator><operator pos:line="60" pos:column="28">)<pos:position pos:line="60" pos:column="29"/></operator><operator pos:line="60" pos:column="29">&amp;<pos:position pos:line="60" pos:column="34"/></operator><operator pos:line="60" pos:column="30">(<pos:position pos:line="60" pos:column="31"/></operator><operator pos:line="60" pos:column="31">(<pos:position pos:line="60" pos:column="32"/></operator>struct <name pos:line="60" pos:column="39">sockaddr_in<pos:position pos:line="60" pos:column="50"/></name> <operator pos:line="60" pos:column="51">*<pos:position pos:line="60" pos:column="52"/></operator><operator pos:line="60" pos:column="52">)<pos:position pos:line="60" pos:column="53"/></operator><name><name pos:line="60" pos:column="53">resa<pos:position pos:line="60" pos:column="57"/></name><operator pos:line="60" pos:column="57">-&gt;<pos:position pos:line="60" pos:column="62"/></operator><name pos:line="60" pos:column="59">ai_addr<pos:position pos:line="60" pos:column="66"/></name></name><operator pos:line="60" pos:column="66">)<pos:position pos:line="60" pos:column="67"/></operator><operator pos:line="60" pos:column="67">-&gt;<pos:position pos:line="60" pos:column="72"/></operator><name pos:line="60" pos:column="69">sin_addr<pos:position pos:line="60" pos:column="77"/></name></expr>;<pos:position pos:line="60" pos:column="78"/></expr_stmt>
		<expr_stmt><expr><name pos:line="61" pos:column="17">t<pos:position pos:line="61" pos:column="18"/></name> <operator pos:line="61" pos:column="19">=<pos:position pos:line="61" pos:column="20"/></operator> <operator pos:line="61" pos:column="21">(<pos:position pos:line="61" pos:column="22"/></operator><name pos:line="61" pos:column="22">char<pos:position pos:line="61" pos:column="26"/></name> <operator pos:line="61" pos:column="27">*<pos:position pos:line="61" pos:column="28"/></operator><operator pos:line="61" pos:column="28">)<pos:position pos:line="61" pos:column="29"/></operator><operator pos:line="61" pos:column="29">&amp;<pos:position pos:line="61" pos:column="34"/></operator><operator pos:line="61" pos:column="30">(<pos:position pos:line="61" pos:column="31"/></operator><operator pos:line="61" pos:column="31">(<pos:position pos:line="61" pos:column="32"/></operator>struct <name pos:line="61" pos:column="39">sockaddr_in<pos:position pos:line="61" pos:column="50"/></name> <operator pos:line="61" pos:column="51">*<pos:position pos:line="61" pos:column="52"/></operator><operator pos:line="61" pos:column="52">)<pos:position pos:line="61" pos:column="53"/></operator><name><name pos:line="61" pos:column="53">rest<pos:position pos:line="61" pos:column="57"/></name><operator pos:line="61" pos:column="57">-&gt;<pos:position pos:line="61" pos:column="62"/></operator><name pos:line="61" pos:column="59">ai_addr<pos:position pos:line="61" pos:column="66"/></name></name><operator pos:line="61" pos:column="66">)<pos:position pos:line="61" pos:column="67"/></operator><operator pos:line="61" pos:column="67">-&gt;<pos:position pos:line="61" pos:column="72"/></operator><name pos:line="61" pos:column="69">sin_addr<pos:position pos:line="61" pos:column="77"/></name></expr>;<pos:position pos:line="61" pos:column="78"/></expr_stmt>
		<expr_stmt><expr><name pos:line="62" pos:column="17">addrlen<pos:position pos:line="62" pos:column="24"/></name> <operator pos:line="62" pos:column="25">=<pos:position pos:line="62" pos:column="26"/></operator> <literal type="number" pos:line="62" pos:column="27">4<pos:position pos:line="62" pos:column="28"/></literal></expr>;<pos:position pos:line="62" pos:column="29"/></expr_stmt>

		<break pos:line="64" pos:column="17">break;<pos:position pos:line="64" pos:column="23"/></break>

<cpp:ifdef pos:line="66" pos:column="1">#<cpp:directive pos:line="66" pos:column="2">ifdef<pos:position pos:line="66" pos:column="7"/></cpp:directive> <name pos:line="66" pos:column="8">INET6<pos:position pos:line="66" pos:column="13"/></name></cpp:ifdef>
	<case pos:line="67" pos:column="9">case <expr><name pos:line="67" pos:column="14">PF_INET6<pos:position pos:line="67" pos:column="22"/></name></expr>:<pos:position pos:line="67" pos:column="23"/></case>
	    <block pos:line="68" pos:column="13">{
		<decl_stmt><decl><type><name><name pos:line="69" pos:column="17">struct<pos:position pos:line="69" pos:column="23"/></name> <name pos:line="69" pos:column="24">sockaddr_in6<pos:position pos:line="69" pos:column="36"/></name></name> <modifier pos:line="69" pos:column="37">*<pos:position pos:line="69" pos:column="38"/></modifier></type><name pos:line="69" pos:column="38">sin6a<pos:position pos:line="69" pos:column="43"/></name></decl>, <modifier pos:line="69" pos:column="45">*<pos:position pos:line="69" pos:column="46"/></modifier><decl><type ref="prev"/><name pos:line="69" pos:column="46">sin6t<pos:position pos:line="69" pos:column="51"/></name></decl>;<pos:position pos:line="69" pos:column="52"/></decl_stmt>

		<expr_stmt><expr><name pos:line="71" pos:column="17">sin6a<pos:position pos:line="71" pos:column="22"/></name> <operator pos:line="71" pos:column="23">=<pos:position pos:line="71" pos:column="24"/></operator> <operator pos:line="71" pos:column="25">(<pos:position pos:line="71" pos:column="26"/></operator>struct <name pos:line="71" pos:column="33">sockaddr_in6<pos:position pos:line="71" pos:column="45"/></name> <operator pos:line="71" pos:column="46">*<pos:position pos:line="71" pos:column="47"/></operator><operator pos:line="71" pos:column="47">)<pos:position pos:line="71" pos:column="48"/></operator><name><name pos:line="71" pos:column="48">resa<pos:position pos:line="71" pos:column="52"/></name><operator pos:line="71" pos:column="52">-&gt;<pos:position pos:line="71" pos:column="57"/></operator><name pos:line="71" pos:column="54">ai_addr<pos:position pos:line="71" pos:column="61"/></name></name></expr>;<pos:position pos:line="71" pos:column="62"/></expr_stmt>
		<expr_stmt><expr><name pos:line="72" pos:column="17">sin6t<pos:position pos:line="72" pos:column="22"/></name> <operator pos:line="72" pos:column="23">=<pos:position pos:line="72" pos:column="24"/></operator> <operator pos:line="72" pos:column="25">(<pos:position pos:line="72" pos:column="26"/></operator>struct <name pos:line="72" pos:column="33">sockaddr_in6<pos:position pos:line="72" pos:column="45"/></name> <operator pos:line="72" pos:column="46">*<pos:position pos:line="72" pos:column="47"/></operator><operator pos:line="72" pos:column="47">)<pos:position pos:line="72" pos:column="48"/></operator><name><name pos:line="72" pos:column="48">rest<pos:position pos:line="72" pos:column="52"/></name><operator pos:line="72" pos:column="52">-&gt;<pos:position pos:line="72" pos:column="57"/></operator><name pos:line="72" pos:column="54">ai_addr<pos:position pos:line="72" pos:column="61"/></name></name></expr>;<pos:position pos:line="72" pos:column="62"/></expr_stmt>

		<expr_stmt><expr><name pos:line="74" pos:column="17">a<pos:position pos:line="74" pos:column="18"/></name> <operator pos:line="74" pos:column="19">=<pos:position pos:line="74" pos:column="20"/></operator> <operator pos:line="74" pos:column="21">(<pos:position pos:line="74" pos:column="22"/></operator><name pos:line="74" pos:column="22">char<pos:position pos:line="74" pos:column="26"/></name> <operator pos:line="74" pos:column="27">*<pos:position pos:line="74" pos:column="28"/></operator><operator pos:line="74" pos:column="28">)<pos:position pos:line="74" pos:column="29"/></operator><operator pos:line="74" pos:column="29">&amp;<pos:position pos:line="74" pos:column="34"/></operator><name><name pos:line="74" pos:column="30">sin6a<pos:position pos:line="74" pos:column="35"/></name><operator pos:line="74" pos:column="35">-&gt;<pos:position pos:line="74" pos:column="40"/></operator><name pos:line="74" pos:column="37">sin6_addr<pos:position pos:line="74" pos:column="46"/></name></name></expr>;<pos:position pos:line="74" pos:column="47"/></expr_stmt>
		<expr_stmt><expr><name pos:line="75" pos:column="17">t<pos:position pos:line="75" pos:column="18"/></name> <operator pos:line="75" pos:column="19">=<pos:position pos:line="75" pos:column="20"/></operator> <operator pos:line="75" pos:column="21">(<pos:position pos:line="75" pos:column="22"/></operator><name pos:line="75" pos:column="22">char<pos:position pos:line="75" pos:column="26"/></name> <operator pos:line="75" pos:column="27">*<pos:position pos:line="75" pos:column="28"/></operator><operator pos:line="75" pos:column="28">)<pos:position pos:line="75" pos:column="29"/></operator><operator pos:line="75" pos:column="29">&amp;<pos:position pos:line="75" pos:column="34"/></operator><name><name pos:line="75" pos:column="30">sin6t<pos:position pos:line="75" pos:column="35"/></name><operator pos:line="75" pos:column="35">-&gt;<pos:position pos:line="75" pos:column="40"/></operator><name pos:line="75" pos:column="37">sin6_addr<pos:position pos:line="75" pos:column="46"/></name></name></expr>;<pos:position pos:line="75" pos:column="47"/></expr_stmt>

		<expr_stmt><expr><name pos:line="77" pos:column="17">addrlen<pos:position pos:line="77" pos:column="24"/></name> <operator pos:line="77" pos:column="25">=<pos:position pos:line="77" pos:column="26"/></operator> <literal type="number" pos:line="77" pos:column="27">16<pos:position pos:line="77" pos:column="29"/></literal></expr>;<pos:position pos:line="77" pos:column="30"/></expr_stmt>

<cpp:ifdef pos:line="79" pos:column="1">#<cpp:directive pos:line="79" pos:column="2">ifdef<pos:position pos:line="79" pos:column="7"/></cpp:directive> <name pos:line="79" pos:column="8">HAVE_SOCKADDR_IN6_SCOPE_ID<pos:position pos:line="79" pos:column="34"/></name></cpp:ifdef>
		<if pos:line="80" pos:column="17">if <condition pos:line="80" pos:column="20">(<expr><name><name pos:line="80" pos:column="21">sin6t<pos:position pos:line="80" pos:column="26"/></name><operator pos:line="80" pos:column="26">-&gt;<pos:position pos:line="80" pos:column="31"/></operator><name pos:line="80" pos:column="28">sin6_scope_id<pos:position pos:line="80" pos:column="41"/></name></name> <operator pos:line="80" pos:column="42">&amp;&amp;<pos:position pos:line="80" pos:column="52"/></operator>
		    <name><name pos:line="81" pos:column="21">sin6a<pos:position pos:line="81" pos:column="26"/></name><operator pos:line="81" pos:column="26">-&gt;<pos:position pos:line="81" pos:column="31"/></operator><name pos:line="81" pos:column="28">sin6_scope_id<pos:position pos:line="81" pos:column="41"/></name></name> <operator pos:line="81" pos:column="42">!=<pos:position pos:line="81" pos:column="44"/></operator> <name><name pos:line="81" pos:column="45">sin6t<pos:position pos:line="81" pos:column="50"/></name><operator pos:line="81" pos:column="50">-&gt;<pos:position pos:line="81" pos:column="55"/></operator><name pos:line="81" pos:column="52">sin6_scope_id<pos:position pos:line="81" pos:column="65"/></name></name></expr>)<pos:position pos:line="81" pos:column="66"/></condition><then pos:line="81" pos:column="66"> <block pos:line="81" pos:column="67">{
			<expr_stmt><expr><name pos:line="82" pos:column="25">ret<pos:position pos:line="82" pos:column="28"/></name> <operator pos:line="82" pos:column="29">=<pos:position pos:line="82" pos:column="30"/></operator> <literal type="number" pos:line="82" pos:column="31">0<pos:position pos:line="82" pos:column="32"/></literal></expr>;<pos:position pos:line="82" pos:column="33"/></expr_stmt>
			<goto pos:line="83" pos:column="25">goto <name pos:line="83" pos:column="30">out<pos:position pos:line="83" pos:column="33"/></name>;<pos:position pos:line="83" pos:column="34"/></goto>
		}<pos:position pos:line="84" pos:column="18"/></block></then></if>
<cpp:endif pos:line="85" pos:column="1">#<cpp:directive pos:line="85" pos:column="2">endif<pos:position pos:line="85" pos:column="7"/></cpp:directive></cpp:endif>

		<break pos:line="87" pos:column="17">break;<pos:position pos:line="87" pos:column="23"/></break>
	    }<pos:position pos:line="88" pos:column="14"/></block>
<cpp:endif pos:line="89" pos:column="1">#<cpp:directive pos:line="89" pos:column="2">endif<pos:position pos:line="89" pos:column="7"/></cpp:directive></cpp:endif>
	<default pos:line="90" pos:column="9">default:<pos:position pos:line="90" pos:column="17"/></default>
	    <expr_stmt><expr><call><name pos:line="91" pos:column="13">rprintf<pos:position pos:line="91" pos:column="20"/></name><argument_list pos:line="91" pos:column="20">(<argument><expr><name pos:line="91" pos:column="21">FLOG<pos:position pos:line="91" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="91" pos:column="27">"unknown family %u\n"<pos:position pos:line="91" pos:column="48"/></literal></expr></argument>, <argument><expr><name><name pos:line="91" pos:column="50">rest<pos:position pos:line="91" pos:column="54"/></name><operator pos:line="91" pos:column="54">-&gt;<pos:position pos:line="91" pos:column="59"/></operator><name pos:line="91" pos:column="56">ai_family<pos:position pos:line="91" pos:column="65"/></name></name></expr></argument>)<pos:position pos:line="91" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="67"/></expr_stmt>
	    <expr_stmt><expr><name pos:line="92" pos:column="13">ret<pos:position pos:line="92" pos:column="16"/></name> <operator pos:line="92" pos:column="17">=<pos:position pos:line="92" pos:column="18"/></operator> <literal type="number" pos:line="92" pos:column="19">0<pos:position pos:line="92" pos:column="20"/></literal></expr>;<pos:position pos:line="92" pos:column="21"/></expr_stmt>
	    <goto pos:line="93" pos:column="13">goto <name pos:line="93" pos:column="18">out<pos:position pos:line="93" pos:column="21"/></name>;<pos:position pos:line="93" pos:column="22"/></goto>
	}<pos:position pos:line="94" pos:column="10"/></block></switch>

	<expr_stmt><expr><name pos:line="96" pos:column="9">bits<pos:position pos:line="96" pos:column="13"/></name> <operator pos:line="96" pos:column="14">=<pos:position pos:line="96" pos:column="15"/></operator> <operator pos:line="96" pos:column="16">-<pos:position pos:line="96" pos:column="17"/></operator><literal type="number" pos:line="96" pos:column="17">1<pos:position pos:line="96" pos:column="18"/></literal></expr>;<pos:position pos:line="96" pos:column="19"/></expr_stmt>
	<if pos:line="97" pos:column="9">if <condition pos:line="97" pos:column="12">(<expr><name pos:line="97" pos:column="13">p<pos:position pos:line="97" pos:column="14"/></name></expr>)<pos:position pos:line="97" pos:column="15"/></condition><then pos:line="97" pos:column="15"> <block pos:line="97" pos:column="16">{
		<if pos:line="98" pos:column="17">if <condition pos:line="98" pos:column="20">(<expr><call><name pos:line="98" pos:column="21">inet_pton<pos:position pos:line="98" pos:column="30"/></name><argument_list pos:line="98" pos:column="30">(<argument><expr><name><name pos:line="98" pos:column="31">resa<pos:position pos:line="98" pos:column="35"/></name><operator pos:line="98" pos:column="35">-&gt;<pos:position pos:line="98" pos:column="40"/></operator><name pos:line="98" pos:column="37">ai_addr<pos:position pos:line="98" pos:column="44"/></name><operator pos:line="98" pos:column="44">-&gt;<pos:position pos:line="98" pos:column="49"/></operator><name pos:line="98" pos:column="46">sa_family<pos:position pos:line="98" pos:column="55"/></name></name></expr></argument>, <argument><expr><name pos:line="98" pos:column="57">p<pos:position pos:line="98" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="98" pos:column="60">mask<pos:position pos:line="98" pos:column="64"/></name></expr></argument>)<pos:position pos:line="98" pos:column="65"/></argument_list></call> <operator pos:line="98" pos:column="66">&lt;=<pos:position pos:line="98" pos:column="71"/></operator> <literal type="number" pos:line="98" pos:column="69">0<pos:position pos:line="98" pos:column="70"/></literal></expr>)<pos:position pos:line="98" pos:column="71"/></condition><then pos:line="98" pos:column="71"> <block pos:line="98" pos:column="72">{
<cpp:ifdef pos:line="99" pos:column="1">#<cpp:directive pos:line="99" pos:column="2">ifdef<pos:position pos:line="99" pos:column="7"/></cpp:directive> <name pos:line="99" pos:column="8">HAVE_STRTOL<pos:position pos:line="99" pos:column="19"/></name></cpp:ifdef>
			<decl_stmt><decl><type><name pos:line="100" pos:column="25">char<pos:position pos:line="100" pos:column="29"/></name> <modifier pos:line="100" pos:column="30">*<pos:position pos:line="100" pos:column="31"/></modifier></type><name pos:line="100" pos:column="31">ep<pos:position pos:line="100" pos:column="33"/></name> <init pos:line="100" pos:column="34">= <expr><name pos:line="100" pos:column="36">NULL<pos:position pos:line="100" pos:column="40"/></name></expr></init></decl>;<pos:position pos:line="100" pos:column="41"/></decl_stmt>
<cpp:else pos:line="101" pos:column="1">#<cpp:directive pos:line="101" pos:column="2">else<pos:position pos:line="101" pos:column="6"/></cpp:directive></cpp:else>
			<decl_stmt><decl><type><name pos:line="102" pos:column="25">unsigned<pos:position pos:line="102" pos:column="33"/></name> <name pos:line="102" pos:column="34">char<pos:position pos:line="102" pos:column="38"/></name> <modifier pos:line="102" pos:column="39">*<pos:position pos:line="102" pos:column="40"/></modifier></type><name pos:line="102" pos:column="40">pp<pos:position pos:line="102" pos:column="42"/></name></decl>;<pos:position pos:line="102" pos:column="43"/></decl_stmt>
<cpp:endif pos:line="103" pos:column="1">#<cpp:directive pos:line="103" pos:column="2">endif<pos:position pos:line="103" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:ifdef pos:line="105" pos:column="1">#<cpp:directive pos:line="105" pos:column="2">ifdef<pos:position pos:line="105" pos:column="7"/></cpp:directive> <name pos:line="105" pos:column="8">HAVE_STRTOL<pos:position pos:line="105" pos:column="19"/></name></cpp:ifdef>
			<expr_stmt><expr><name pos:line="106" pos:column="25">bits<pos:position pos:line="106" pos:column="29"/></name> <operator pos:line="106" pos:column="30">=<pos:position pos:line="106" pos:column="31"/></operator> <call><name pos:line="106" pos:column="32">strtol<pos:position pos:line="106" pos:column="38"/></name><argument_list pos:line="106" pos:column="38">(<argument><expr><name pos:line="106" pos:column="39">p<pos:position pos:line="106" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="106" pos:column="42">&amp;<pos:position pos:line="106" pos:column="47"/></operator><name pos:line="106" pos:column="43">ep<pos:position pos:line="106" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="106" pos:column="47">10<pos:position pos:line="106" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="106" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="106" pos:column="51"/></expr_stmt>
			<if pos:line="107" pos:column="25">if <condition pos:line="107" pos:column="28">(<expr><operator pos:line="107" pos:column="29">!<pos:position pos:line="107" pos:column="30"/></operator><operator pos:line="107" pos:column="30">*<pos:position pos:line="107" pos:column="31"/></operator><name pos:line="107" pos:column="31">p<pos:position pos:line="107" pos:column="32"/></name> <operator pos:line="107" pos:column="33">||<pos:position pos:line="107" pos:column="35"/></operator> <operator pos:line="107" pos:column="36">*<pos:position pos:line="107" pos:column="37"/></operator><name pos:line="107" pos:column="37">ep<pos:position pos:line="107" pos:column="39"/></name></expr>)<pos:position pos:line="107" pos:column="40"/></condition><then pos:line="107" pos:column="40"> <block pos:line="107" pos:column="41">{
				<expr_stmt><expr><call><name pos:line="108" pos:column="33">rprintf<pos:position pos:line="108" pos:column="40"/></name><argument_list pos:line="108" pos:column="40">(<argument><expr><name pos:line="108" pos:column="41">FLOG<pos:position pos:line="108" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="108" pos:column="47">"malformed mask in %s\n"<pos:position pos:line="108" pos:column="71"/></literal></expr></argument>, <argument><expr><name pos:line="108" pos:column="73">tok<pos:position pos:line="108" pos:column="76"/></name></expr></argument>)<pos:position pos:line="108" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="108" pos:column="78"/></expr_stmt>
				<expr_stmt><expr><name pos:line="109" pos:column="33">ret<pos:position pos:line="109" pos:column="36"/></name> <operator pos:line="109" pos:column="37">=<pos:position pos:line="109" pos:column="38"/></operator> <literal type="number" pos:line="109" pos:column="39">0<pos:position pos:line="109" pos:column="40"/></literal></expr>;<pos:position pos:line="109" pos:column="41"/></expr_stmt>
				<goto pos:line="110" pos:column="33">goto <name pos:line="110" pos:column="38">out<pos:position pos:line="110" pos:column="41"/></name>;<pos:position pos:line="110" pos:column="42"/></goto>
			}<pos:position pos:line="111" pos:column="26"/></block></then></if>
<cpp:else pos:line="112" pos:column="1">#<cpp:directive pos:line="112" pos:column="2">else<pos:position pos:line="112" pos:column="6"/></cpp:directive></cpp:else>
			<for pos:line="113" pos:column="25">for <control pos:line="113" pos:column="29">(<init><expr><name pos:line="113" pos:column="30">pp<pos:position pos:line="113" pos:column="32"/></name> <operator pos:line="113" pos:column="33">=<pos:position pos:line="113" pos:column="34"/></operator> <operator pos:line="113" pos:column="35">(<pos:position pos:line="113" pos:column="36"/></operator><name pos:line="113" pos:column="36">unsigned<pos:position pos:line="113" pos:column="44"/></name> <name pos:line="113" pos:column="45">char<pos:position pos:line="113" pos:column="49"/></name> <operator pos:line="113" pos:column="50">*<pos:position pos:line="113" pos:column="51"/></operator><operator pos:line="113" pos:column="51">)<pos:position pos:line="113" pos:column="52"/></operator><name pos:line="113" pos:column="52">p<pos:position pos:line="113" pos:column="53"/></name></expr>;<pos:position pos:line="113" pos:column="54"/></init> <condition><expr><operator pos:line="113" pos:column="55">*<pos:position pos:line="113" pos:column="56"/></operator><name pos:line="113" pos:column="56">pp<pos:position pos:line="113" pos:column="58"/></name></expr>;<pos:position pos:line="113" pos:column="59"/></condition> <incr><expr><name pos:line="113" pos:column="60">pp<pos:position pos:line="113" pos:column="62"/></name><operator pos:line="113" pos:column="62">++<pos:position pos:line="113" pos:column="64"/></operator></expr></incr>)<pos:position pos:line="113" pos:column="65"/></control> <block pos:line="113" pos:column="66">{
				<if pos:line="114" pos:column="33">if <condition pos:line="114" pos:column="36">(<expr><operator pos:line="114" pos:column="37">!<pos:position pos:line="114" pos:column="38"/></operator><call><name pos:line="114" pos:column="38">isascii<pos:position pos:line="114" pos:column="45"/></name><argument_list pos:line="114" pos:column="45">(<argument><expr><operator pos:line="114" pos:column="46">*<pos:position pos:line="114" pos:column="47"/></operator><name pos:line="114" pos:column="47">pp<pos:position pos:line="114" pos:column="49"/></name></expr></argument>)<pos:position pos:line="114" pos:column="50"/></argument_list></call> <operator pos:line="114" pos:column="51">||<pos:position pos:line="114" pos:column="53"/></operator> <operator pos:line="114" pos:column="54">!<pos:position pos:line="114" pos:column="55"/></operator><call><name pos:line="114" pos:column="55">isdigit<pos:position pos:line="114" pos:column="62"/></name><argument_list pos:line="114" pos:column="62">(<argument><expr><operator pos:line="114" pos:column="63">*<pos:position pos:line="114" pos:column="64"/></operator><name pos:line="114" pos:column="64">pp<pos:position pos:line="114" pos:column="66"/></name></expr></argument>)<pos:position pos:line="114" pos:column="67"/></argument_list></call></expr>)<pos:position pos:line="114" pos:column="68"/></condition><then pos:line="114" pos:column="68"> <block pos:line="114" pos:column="69">{
					<expr_stmt><expr><call><name pos:line="115" pos:column="41">rprintf<pos:position pos:line="115" pos:column="48"/></name><argument_list pos:line="115" pos:column="48">(<argument><expr><name pos:line="115" pos:column="49">FLOG<pos:position pos:line="115" pos:column="53"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="115" pos:column="55">"malformed mask in %s\n"<pos:position pos:line="115" pos:column="79"/></literal></expr></argument>, <argument><expr><name pos:line="115" pos:column="81">tok<pos:position pos:line="115" pos:column="84"/></name></expr></argument>)<pos:position pos:line="115" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="115" pos:column="86"/></expr_stmt>
					<expr_stmt><expr><name pos:line="116" pos:column="41">ret<pos:position pos:line="116" pos:column="44"/></name> <operator pos:line="116" pos:column="45">=<pos:position pos:line="116" pos:column="46"/></operator> <literal type="number" pos:line="116" pos:column="47">0<pos:position pos:line="116" pos:column="48"/></literal></expr>;<pos:position pos:line="116" pos:column="49"/></expr_stmt>
					<goto pos:line="117" pos:column="41">goto <name pos:line="117" pos:column="46">out<pos:position pos:line="117" pos:column="49"/></name>;<pos:position pos:line="117" pos:column="50"/></goto>
				}<pos:position pos:line="118" pos:column="34"/></block></then></if>
			}<pos:position pos:line="119" pos:column="26"/></block></for>
			<expr_stmt><expr><name pos:line="120" pos:column="25">bits<pos:position pos:line="120" pos:column="29"/></name> <operator pos:line="120" pos:column="30">=<pos:position pos:line="120" pos:column="31"/></operator> <call><name pos:line="120" pos:column="32">atoi<pos:position pos:line="120" pos:column="36"/></name><argument_list pos:line="120" pos:column="36">(<argument><expr><name pos:line="120" pos:column="37">p<pos:position pos:line="120" pos:column="38"/></name></expr></argument>)<pos:position pos:line="120" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="120" pos:column="40"/></expr_stmt>
<cpp:endif pos:line="121" pos:column="1">#<cpp:directive pos:line="121" pos:column="2">endif<pos:position pos:line="121" pos:column="7"/></cpp:directive></cpp:endif>
			<if pos:line="122" pos:column="25">if <condition pos:line="122" pos:column="28">(<expr><name pos:line="122" pos:column="29">bits<pos:position pos:line="122" pos:column="33"/></name> <operator pos:line="122" pos:column="34">==<pos:position pos:line="122" pos:column="36"/></operator> <literal type="number" pos:line="122" pos:column="37">0<pos:position pos:line="122" pos:column="38"/></literal></expr>)<pos:position pos:line="122" pos:column="39"/></condition><then pos:line="122" pos:column="39"> <block pos:line="122" pos:column="40">{
				<expr_stmt><expr><name pos:line="123" pos:column="33">ret<pos:position pos:line="123" pos:column="36"/></name> <operator pos:line="123" pos:column="37">=<pos:position pos:line="123" pos:column="38"/></operator> <literal type="number" pos:line="123" pos:column="39">1<pos:position pos:line="123" pos:column="40"/></literal></expr>;<pos:position pos:line="123" pos:column="41"/></expr_stmt>
				<goto pos:line="124" pos:column="33">goto <name pos:line="124" pos:column="38">out<pos:position pos:line="124" pos:column="41"/></name>;<pos:position pos:line="124" pos:column="42"/></goto>
			}<pos:position pos:line="125" pos:column="26"/></block></then></if>
			<if pos:line="126" pos:column="25">if <condition pos:line="126" pos:column="28">(<expr><call><name><name pos:line="126" pos:column="29">bits<pos:position pos:line="126" pos:column="33"/></name> <argument_list type="generic" pos:line="126" pos:column="34">&lt; <argument><expr><literal type="number" pos:line="126" pos:column="36">0<pos:position pos:line="126" pos:column="37"/></literal> <operator pos:line="126" pos:column="38">||<pos:position pos:line="126" pos:column="40"/></operator> <name pos:line="126" pos:column="41">bits<pos:position pos:line="126" pos:column="45"/></name></expr></argument> &gt;<pos:position pos:line="126" pos:column="50"/></argument_list></name> <argument_list pos:line="126" pos:column="48">(<argument><expr><name pos:line="126" pos:column="49">addrlen<pos:position pos:line="126" pos:column="56"/></name> <operator pos:line="126" pos:column="57">&lt;&lt;<pos:position pos:line="126" pos:column="65"/></operator> <literal type="number" pos:line="126" pos:column="60">3<pos:position pos:line="126" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="126" pos:column="62"/></argument_list></call></expr>)<pos:position pos:line="126" pos:column="63"/></condition><then pos:line="126" pos:column="63"> <block pos:line="126" pos:column="64">{
				<expr_stmt><expr><call><name pos:line="127" pos:column="33">rprintf<pos:position pos:line="127" pos:column="40"/></name><argument_list pos:line="127" pos:column="40">(<argument><expr><name pos:line="127" pos:column="41">FLOG<pos:position pos:line="127" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="127" pos:column="47">"malformed mask in %s\n"<pos:position pos:line="127" pos:column="71"/></literal></expr></argument>, <argument><expr><name pos:line="127" pos:column="73">tok<pos:position pos:line="127" pos:column="76"/></name></expr></argument>)<pos:position pos:line="127" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="127" pos:column="78"/></expr_stmt>
				<expr_stmt><expr><name pos:line="128" pos:column="33">ret<pos:position pos:line="128" pos:column="36"/></name> <operator pos:line="128" pos:column="37">=<pos:position pos:line="128" pos:column="38"/></operator> <literal type="number" pos:line="128" pos:column="39">0<pos:position pos:line="128" pos:column="40"/></literal></expr>;<pos:position pos:line="128" pos:column="41"/></expr_stmt>
				<goto pos:line="129" pos:column="33">goto <name pos:line="129" pos:column="38">out<pos:position pos:line="129" pos:column="41"/></name>;<pos:position pos:line="129" pos:column="42"/></goto>
			}<pos:position pos:line="130" pos:column="26"/></block></then></if>
		}<pos:position pos:line="131" pos:column="18"/></block></then></if>
	}<pos:position pos:line="132" pos:column="10"/></block></then> <else pos:line="132" pos:column="11">else <block pos:line="132" pos:column="16">{
		<expr_stmt><expr><name pos:line="133" pos:column="17">bits<pos:position pos:line="133" pos:column="21"/></name> <operator pos:line="133" pos:column="22">=<pos:position pos:line="133" pos:column="23"/></operator> <literal type="number" pos:line="133" pos:column="24">128<pos:position pos:line="133" pos:column="27"/></literal></expr>;<pos:position pos:line="133" pos:column="28"/></expr_stmt>
	}<pos:position pos:line="134" pos:column="10"/></block></else></if>

	<if pos:line="136" pos:column="9">if <condition pos:line="136" pos:column="12">(<expr><name pos:line="136" pos:column="13">bits<pos:position pos:line="136" pos:column="17"/></name> <operator pos:line="136" pos:column="18">&gt;=<pos:position pos:line="136" pos:column="23"/></operator> <literal type="number" pos:line="136" pos:column="21">0<pos:position pos:line="136" pos:column="22"/></literal></expr>)<pos:position pos:line="136" pos:column="23"/></condition><then pos:line="136" pos:column="23">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="137" pos:column="17">make_mask<pos:position pos:line="137" pos:column="26"/></name><argument_list pos:line="137" pos:column="26">(<argument><expr><name pos:line="137" pos:column="27">mask<pos:position pos:line="137" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="137" pos:column="33">bits<pos:position pos:line="137" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="137" pos:column="39">addrlen<pos:position pos:line="137" pos:column="46"/></name></expr></argument>)<pos:position pos:line="137" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="137" pos:column="48"/></expr_stmt></block></then></if>

	<expr_stmt><expr><name pos:line="139" pos:column="9">ret<pos:position pos:line="139" pos:column="12"/></name> <operator pos:line="139" pos:column="13">=<pos:position pos:line="139" pos:column="14"/></operator> <call><name pos:line="139" pos:column="15">match_binary<pos:position pos:line="139" pos:column="27"/></name><argument_list pos:line="139" pos:column="27">(<argument><expr><name pos:line="139" pos:column="28">a<pos:position pos:line="139" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="139" pos:column="31">t<pos:position pos:line="139" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="139" pos:column="34">mask<pos:position pos:line="139" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="139" pos:column="40">addrlen<pos:position pos:line="139" pos:column="47"/></name></expr></argument>)<pos:position pos:line="139" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="139" pos:column="49"/></expr_stmt>

  <label><name pos:line="141" pos:column="3">out<pos:position pos:line="141" pos:column="6"/></name>:<pos:position pos:line="141" pos:column="7"/></label>
	<expr_stmt><expr><call><name pos:line="142" pos:column="9">freeaddrinfo<pos:position pos:line="142" pos:column="21"/></name><argument_list pos:line="142" pos:column="21">(<argument><expr><name pos:line="142" pos:column="22">resa<pos:position pos:line="142" pos:column="26"/></name></expr></argument>)<pos:position pos:line="142" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="142" pos:column="28"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="143" pos:column="9">freeaddrinfo<pos:position pos:line="143" pos:column="21"/></name><argument_list pos:line="143" pos:column="21">(<argument><expr><name pos:line="143" pos:column="22">rest<pos:position pos:line="143" pos:column="26"/></name></expr></argument>)<pos:position pos:line="143" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="143" pos:column="28"/></expr_stmt>
	<return pos:line="144" pos:column="9">return <expr><name pos:line="144" pos:column="16">ret<pos:position pos:line="144" pos:column="19"/></name></expr>;<pos:position pos:line="144" pos:column="20"/></return>
}<pos:position pos:line="145" pos:column="2"/></block></function></unit>
