<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_230_rsync-2.0.18.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">do_server_sender<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name pos:line="1" pos:column="30">int<pos:position pos:line="1" pos:column="33"/></name></type> <name pos:line="1" pos:column="34">f_in<pos:position pos:line="1" pos:column="38"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="40">int<pos:position pos:line="1" pos:column="43"/></name></type> <name pos:line="1" pos:column="44">f_out<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="51">int<pos:position pos:line="1" pos:column="54"/></name></type> <name pos:line="1" pos:column="55">argc<pos:position pos:line="1" pos:column="59"/></name></decl></parameter>,<parameter><decl><type><name pos:line="1" pos:column="60">char<pos:position pos:line="1" pos:column="64"/></name> <modifier pos:line="1" pos:column="65">*<pos:position pos:line="1" pos:column="66"/></modifier></type><name><name pos:line="1" pos:column="66">argv<pos:position pos:line="1" pos:column="70"/></name><index pos:line="1" pos:column="70">[]<pos:position pos:line="1" pos:column="72"/></index></name></decl></parameter>)<pos:position pos:line="1" pos:column="73"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">i<pos:position pos:line="3" pos:column="14"/></name></decl>;<pos:position pos:line="3" pos:column="15"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">file_list<pos:position pos:line="4" pos:column="25"/></name></name> <modifier pos:line="4" pos:column="26">*<pos:position pos:line="4" pos:column="27"/></modifier></type><name pos:line="4" pos:column="27">flist<pos:position pos:line="4" pos:column="32"/></name></decl>;<pos:position pos:line="4" pos:column="33"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">char<pos:position pos:line="5" pos:column="13"/></name> <modifier pos:line="5" pos:column="14">*<pos:position pos:line="5" pos:column="15"/></modifier></type><name pos:line="5" pos:column="15">dir<pos:position pos:line="5" pos:column="18"/></name> <init pos:line="5" pos:column="19">= <expr><name><name pos:line="5" pos:column="21">argv<pos:position pos:line="5" pos:column="25"/></name><index pos:line="5" pos:column="25">[<expr><literal type="number" pos:line="5" pos:column="26">0<pos:position pos:line="5" pos:column="27"/></literal></expr>]<pos:position pos:line="5" pos:column="28"/></index></name></expr></init></decl>;<pos:position pos:line="5" pos:column="29"/></decl_stmt>
	<decl_stmt><decl><specifier pos:line="6" pos:column="9">extern<pos:position pos:line="6" pos:column="15"/></specifier> <type><name pos:line="6" pos:column="16">int<pos:position pos:line="6" pos:column="19"/></name></type> <name pos:line="6" pos:column="20">relative_paths<pos:position pos:line="6" pos:column="34"/></name></decl>;<pos:position pos:line="6" pos:column="35"/></decl_stmt>
	<decl_stmt><decl><specifier pos:line="7" pos:column="9">extern<pos:position pos:line="7" pos:column="15"/></specifier> <type><name pos:line="7" pos:column="16">int<pos:position pos:line="7" pos:column="19"/></name></type> <name pos:line="7" pos:column="20">recurse<pos:position pos:line="7" pos:column="27"/></name></decl>;<pos:position pos:line="7" pos:column="28"/></decl_stmt>

	<if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><name pos:line="9" pos:column="13">verbose<pos:position pos:line="9" pos:column="20"/></name> <operator pos:line="9" pos:column="21">&gt;<pos:position pos:line="9" pos:column="25"/></operator> <literal type="number" pos:line="9" pos:column="23">2<pos:position pos:line="9" pos:column="24"/></literal></expr>)<pos:position pos:line="9" pos:column="25"/></condition><then pos:line="9" pos:column="25">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="10" pos:column="17">rprintf<pos:position pos:line="10" pos:column="24"/></name><argument_list pos:line="10" pos:column="24">(<argument><expr><name pos:line="10" pos:column="25">FINFO<pos:position pos:line="10" pos:column="30"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="10" pos:column="31">"server_sender starting pid=%d\n"<pos:position pos:line="10" pos:column="64"/></literal></expr></argument>,<argument><expr><operator pos:line="10" pos:column="65">(<pos:position pos:line="10" pos:column="66"/></operator><name pos:line="10" pos:column="66">int<pos:position pos:line="10" pos:column="69"/></name><operator pos:line="10" pos:column="69">)<pos:position pos:line="10" pos:column="70"/></operator><call><name pos:line="10" pos:column="70">getpid<pos:position pos:line="10" pos:column="76"/></name><argument_list pos:line="10" pos:column="76">()<pos:position pos:line="10" pos:column="78"/></argument_list></call></expr></argument>)<pos:position pos:line="10" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="80"/></expr_stmt></block></then></if>
  
	<if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><operator pos:line="12" pos:column="13">!<pos:position pos:line="12" pos:column="14"/></operator><name pos:line="12" pos:column="14">relative_paths<pos:position pos:line="12" pos:column="28"/></name> <operator pos:line="12" pos:column="29">&amp;&amp;<pos:position pos:line="12" pos:column="39"/></operator> <operator pos:line="12" pos:column="32">!<pos:position pos:line="12" pos:column="33"/></operator><call><name pos:line="12" pos:column="33">push_dir<pos:position pos:line="12" pos:column="41"/></name><argument_list pos:line="12" pos:column="41">(<argument><expr><name pos:line="12" pos:column="42">dir<pos:position pos:line="12" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="12" pos:column="47">0<pos:position pos:line="12" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="12" pos:column="50"/></condition><then pos:line="12" pos:column="50"> <block pos:line="12" pos:column="51">{
		<expr_stmt><expr><call><name pos:line="13" pos:column="17">rprintf<pos:position pos:line="13" pos:column="24"/></name><argument_list pos:line="13" pos:column="24">(<argument><expr><name pos:line="13" pos:column="25">FERROR<pos:position pos:line="13" pos:column="31"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="13" pos:column="32">"push_dir %s: %s (3)\n"<pos:position pos:line="13" pos:column="55"/></literal></expr></argument>,<argument><expr><name pos:line="13" pos:column="56">dir<pos:position pos:line="13" pos:column="59"/></name></expr></argument>,<argument><expr><call><name pos:line="13" pos:column="60">strerror<pos:position pos:line="13" pos:column="68"/></name><argument_list pos:line="13" pos:column="68">(<argument><expr><name pos:line="13" pos:column="69">errno<pos:position pos:line="13" pos:column="74"/></name></expr></argument>)<pos:position pos:line="13" pos:column="75"/></argument_list></call></expr></argument>)<pos:position pos:line="13" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="77"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="14" pos:column="17">exit_cleanup<pos:position pos:line="14" pos:column="29"/></name><argument_list pos:line="14" pos:column="29">(<argument><expr><literal type="number" pos:line="14" pos:column="30">1<pos:position pos:line="14" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="33"/></expr_stmt>
	}<pos:position pos:line="15" pos:column="10"/></block></then></if>
	<expr_stmt><expr><name pos:line="16" pos:column="9">argc<pos:position pos:line="16" pos:column="13"/></name><operator pos:line="16" pos:column="13">--<pos:position pos:line="16" pos:column="15"/></operator></expr>;<pos:position pos:line="16" pos:column="16"/></expr_stmt>
	<expr_stmt><expr><name pos:line="17" pos:column="9">argv<pos:position pos:line="17" pos:column="13"/></name><operator pos:line="17" pos:column="13">++<pos:position pos:line="17" pos:column="15"/></operator></expr>;<pos:position pos:line="17" pos:column="16"/></expr_stmt>
  
	<if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><call><name pos:line="19" pos:column="13">strcmp<pos:position pos:line="19" pos:column="19"/></name><argument_list pos:line="19" pos:column="19">(<argument><expr><name pos:line="19" pos:column="20">dir<pos:position pos:line="19" pos:column="23"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="19" pos:column="24">"."<pos:position pos:line="19" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="28"/></argument_list></call></expr>)<pos:position pos:line="19" pos:column="29"/></condition><then pos:line="19" pos:column="29"> <block pos:line="19" pos:column="30">{
		<decl_stmt><decl><type><name pos:line="20" pos:column="17">int<pos:position pos:line="20" pos:column="20"/></name></type> <name pos:line="20" pos:column="21">l<pos:position pos:line="20" pos:column="22"/></name> <init pos:line="20" pos:column="23">= <expr><call><name pos:line="20" pos:column="25">strlen<pos:position pos:line="20" pos:column="31"/></name><argument_list pos:line="20" pos:column="31">(<argument><expr><name pos:line="20" pos:column="32">dir<pos:position pos:line="20" pos:column="35"/></name></expr></argument>)<pos:position pos:line="20" pos:column="36"/></argument_list></call></expr></init></decl>;<pos:position pos:line="20" pos:column="37"/></decl_stmt>
		<if pos:line="21" pos:column="17">if <condition pos:line="21" pos:column="20">(<expr><call><name pos:line="21" pos:column="21">strcmp<pos:position pos:line="21" pos:column="27"/></name><argument_list pos:line="21" pos:column="27">(<argument><expr><name pos:line="21" pos:column="28">dir<pos:position pos:line="21" pos:column="31"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="21" pos:column="32">"/"<pos:position pos:line="21" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="36"/></argument_list></call> <operator pos:line="21" pos:column="37">==<pos:position pos:line="21" pos:column="39"/></operator> <literal type="number" pos:line="21" pos:column="40">0<pos:position pos:line="21" pos:column="41"/></literal></expr>)<pos:position pos:line="21" pos:column="42"/></condition><then pos:line="21" pos:column="42"> 
			<block type="pseudo"><expr_stmt><expr><name pos:line="22" pos:column="25">l<pos:position pos:line="22" pos:column="26"/></name> <operator pos:line="22" pos:column="27">=<pos:position pos:line="22" pos:column="28"/></operator> <literal type="number" pos:line="22" pos:column="29">0<pos:position pos:line="22" pos:column="30"/></literal></expr>;<pos:position pos:line="22" pos:column="31"/></expr_stmt></block></then></if>
		<for pos:line="23" pos:column="17">for <control pos:line="23" pos:column="21">(<init><expr><name pos:line="23" pos:column="22">i<pos:position pos:line="23" pos:column="23"/></name><operator pos:line="23" pos:column="23">=<pos:position pos:line="23" pos:column="24"/></operator><literal type="number" pos:line="23" pos:column="24">0<pos:position pos:line="23" pos:column="25"/></literal></expr>;<pos:position pos:line="23" pos:column="26"/></init><condition><expr><name pos:line="23" pos:column="26">i<pos:position pos:line="23" pos:column="27"/></name><operator pos:line="23" pos:column="27">&lt;<pos:position pos:line="23" pos:column="31"/></operator><name pos:line="23" pos:column="28">argc<pos:position pos:line="23" pos:column="32"/></name></expr>;<pos:position pos:line="23" pos:column="33"/></condition><incr><expr><name pos:line="23" pos:column="33">i<pos:position pos:line="23" pos:column="34"/></name><operator pos:line="23" pos:column="34">++<pos:position pos:line="23" pos:column="36"/></operator></expr></incr>)<pos:position pos:line="23" pos:column="37"/></control>
			<block type="pseudo"><expr_stmt><expr><name><name pos:line="24" pos:column="25">argv<pos:position pos:line="24" pos:column="29"/></name><index pos:line="24" pos:column="29">[<expr><name pos:line="24" pos:column="30">i<pos:position pos:line="24" pos:column="31"/></name></expr>]<pos:position pos:line="24" pos:column="32"/></index></name> <operator pos:line="24" pos:column="33">+=<pos:position pos:line="24" pos:column="35"/></operator> <name pos:line="24" pos:column="36">l<pos:position pos:line="24" pos:column="37"/></name><operator pos:line="24" pos:column="37">+<pos:position pos:line="24" pos:column="38"/></operator><literal type="number" pos:line="24" pos:column="38">1<pos:position pos:line="24" pos:column="39"/></literal></expr>;<pos:position pos:line="24" pos:column="40"/></expr_stmt></block></for>
	}<pos:position pos:line="25" pos:column="10"/></block></then></if>

	<if pos:line="27" pos:column="9">if <condition pos:line="27" pos:column="12">(<expr><name pos:line="27" pos:column="13">argc<pos:position pos:line="27" pos:column="17"/></name> <operator pos:line="27" pos:column="18">==<pos:position pos:line="27" pos:column="20"/></operator> <literal type="number" pos:line="27" pos:column="21">0<pos:position pos:line="27" pos:column="22"/></literal> <operator pos:line="27" pos:column="23">&amp;&amp;<pos:position pos:line="27" pos:column="33"/></operator> <name pos:line="27" pos:column="26">recurse<pos:position pos:line="27" pos:column="33"/></name></expr>)<pos:position pos:line="27" pos:column="34"/></condition><then pos:line="27" pos:column="34"> <block pos:line="27" pos:column="35">{
		<expr_stmt><expr><name pos:line="28" pos:column="17">argc<pos:position pos:line="28" pos:column="21"/></name><operator pos:line="28" pos:column="21">=<pos:position pos:line="28" pos:column="22"/></operator><literal type="number" pos:line="28" pos:column="22">1<pos:position pos:line="28" pos:column="23"/></literal></expr>;<pos:position pos:line="28" pos:column="24"/></expr_stmt>
		<expr_stmt><expr><name pos:line="29" pos:column="17">argv<pos:position pos:line="29" pos:column="21"/></name><operator pos:line="29" pos:column="21">--<pos:position pos:line="29" pos:column="23"/></operator></expr>;<pos:position pos:line="29" pos:column="24"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="30" pos:column="17">argv<pos:position pos:line="30" pos:column="21"/></name><index pos:line="30" pos:column="21">[<expr><literal type="number" pos:line="30" pos:column="22">0<pos:position pos:line="30" pos:column="23"/></literal></expr>]<pos:position pos:line="30" pos:column="24"/></index></name> <operator pos:line="30" pos:column="25">=<pos:position pos:line="30" pos:column="26"/></operator> <literal type="string" pos:line="30" pos:column="27">"."<pos:position pos:line="30" pos:column="30"/></literal></expr>;<pos:position pos:line="30" pos:column="31"/></expr_stmt>
	}<pos:position pos:line="31" pos:column="10"/></block></then></if>
	
	<expr_stmt><expr><name pos:line="33" pos:column="9">flist<pos:position pos:line="33" pos:column="14"/></name> <operator pos:line="33" pos:column="15">=<pos:position pos:line="33" pos:column="16"/></operator> <call><name pos:line="33" pos:column="17">send_file_list<pos:position pos:line="33" pos:column="31"/></name><argument_list pos:line="33" pos:column="31">(<argument><expr><name pos:line="33" pos:column="32">f_out<pos:position pos:line="33" pos:column="37"/></name></expr></argument>,<argument><expr><name pos:line="33" pos:column="38">argc<pos:position pos:line="33" pos:column="42"/></name></expr></argument>,<argument><expr><name pos:line="33" pos:column="43">argv<pos:position pos:line="33" pos:column="47"/></name></expr></argument>)<pos:position pos:line="33" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="49"/></expr_stmt>
	<if pos:line="34" pos:column="9">if <condition pos:line="34" pos:column="12">(<expr><operator pos:line="34" pos:column="13">!<pos:position pos:line="34" pos:column="14"/></operator><name pos:line="34" pos:column="14">flist<pos:position pos:line="34" pos:column="19"/></name> <operator pos:line="34" pos:column="20">||<pos:position pos:line="34" pos:column="22"/></operator> <name><name pos:line="34" pos:column="23">flist<pos:position pos:line="34" pos:column="28"/></name><operator pos:line="34" pos:column="28">-&gt;<pos:position pos:line="34" pos:column="33"/></operator><name pos:line="34" pos:column="30">count<pos:position pos:line="34" pos:column="35"/></name></name> <operator pos:line="34" pos:column="36">==<pos:position pos:line="34" pos:column="38"/></operator> <literal type="number" pos:line="34" pos:column="39">0<pos:position pos:line="34" pos:column="40"/></literal></expr>)<pos:position pos:line="34" pos:column="41"/></condition><then pos:line="34" pos:column="41"> <block pos:line="34" pos:column="42">{
		<expr_stmt><expr><call><name pos:line="35" pos:column="17">exit_cleanup<pos:position pos:line="35" pos:column="29"/></name><argument_list pos:line="35" pos:column="29">(<argument><expr><literal type="number" pos:line="35" pos:column="30">0<pos:position pos:line="35" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="33"/></expr_stmt>
	}<pos:position pos:line="36" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="38" pos:column="9">set_nonblocking<pos:position pos:line="38" pos:column="24"/></name><argument_list pos:line="38" pos:column="24">(<argument><expr><name pos:line="38" pos:column="25">f_out<pos:position pos:line="38" pos:column="30"/></name></expr></argument>)<pos:position pos:line="38" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="32"/></expr_stmt>
	<if pos:line="39" pos:column="9">if <condition pos:line="39" pos:column="12">(<expr><name pos:line="39" pos:column="13">f_in<pos:position pos:line="39" pos:column="17"/></name> <operator pos:line="39" pos:column="18">!=<pos:position pos:line="39" pos:column="20"/></operator> <name pos:line="39" pos:column="21">f_out<pos:position pos:line="39" pos:column="26"/></name></expr>)<pos:position pos:line="39" pos:column="27"/></condition><then pos:line="39" pos:column="27">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="40" pos:column="17">set_nonblocking<pos:position pos:line="40" pos:column="32"/></name><argument_list pos:line="40" pos:column="32">(<argument><expr><name pos:line="40" pos:column="33">f_in<pos:position pos:line="40" pos:column="37"/></name></expr></argument>)<pos:position pos:line="40" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="39"/></expr_stmt></block></then></if>
		
	<expr_stmt><expr><call><name pos:line="42" pos:column="9">send_files<pos:position pos:line="42" pos:column="19"/></name><argument_list pos:line="42" pos:column="19">(<argument><expr><name pos:line="42" pos:column="20">flist<pos:position pos:line="42" pos:column="25"/></name></expr></argument>,<argument><expr><name pos:line="42" pos:column="26">f_out<pos:position pos:line="42" pos:column="31"/></name></expr></argument>,<argument><expr><name pos:line="42" pos:column="32">f_in<pos:position pos:line="42" pos:column="36"/></name></expr></argument>)<pos:position pos:line="42" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="38"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="43" pos:column="9">report<pos:position pos:line="43" pos:column="15"/></name><argument_list pos:line="43" pos:column="15">(<argument><expr><name pos:line="43" pos:column="16">f_out<pos:position pos:line="43" pos:column="21"/></name></expr></argument>)<pos:position pos:line="43" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="23"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="44" pos:column="9">io_flush<pos:position pos:line="44" pos:column="17"/></name><argument_list pos:line="44" pos:column="17">()<pos:position pos:line="44" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="20"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="45" pos:column="9">exit_cleanup<pos:position pos:line="45" pos:column="21"/></name><argument_list pos:line="45" pos:column="21">(<argument><expr><literal type="number" pos:line="45" pos:column="22">0<pos:position pos:line="45" pos:column="23"/></literal></expr></argument>)<pos:position pos:line="45" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="25"/></expr_stmt>
}<pos:position pos:line="46" pos:column="2"/></block></function></unit>
