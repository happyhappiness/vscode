<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_109_rsync-2.6.6.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">writefd<pos:position pos:line="1" pos:column="20"/></name><parameter_list pos:line="1" pos:column="20">(<parameter><decl><type><name pos:line="1" pos:column="21">int<pos:position pos:line="1" pos:column="24"/></name></type> <name pos:line="1" pos:column="25">fd<pos:position pos:line="1" pos:column="27"/></name></decl></parameter>,<parameter><decl><type><name pos:line="1" pos:column="28">char<pos:position pos:line="1" pos:column="32"/></name> <modifier pos:line="1" pos:column="33">*<pos:position pos:line="1" pos:column="34"/></modifier></type><name pos:line="1" pos:column="34">buf<pos:position pos:line="1" pos:column="37"/></name></decl></parameter>,<parameter><decl><type><name pos:line="1" pos:column="38">size_t<pos:position pos:line="1" pos:column="44"/></name></type> <name pos:line="1" pos:column="45">len<pos:position pos:line="1" pos:column="48"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="49"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<if pos:line="3" pos:column="9">if <condition pos:line="3" pos:column="12">(<expr><name pos:line="3" pos:column="13">fd<pos:position pos:line="3" pos:column="15"/></name> <operator pos:line="3" pos:column="16">==<pos:position pos:line="3" pos:column="18"/></operator> <name pos:line="3" pos:column="19">msg_fd_out<pos:position pos:line="3" pos:column="29"/></name></expr>)<pos:position pos:line="3" pos:column="30"/></condition><then pos:line="3" pos:column="30"> <block pos:line="3" pos:column="31">{
		<expr_stmt><expr><call><name pos:line="4" pos:column="17">rprintf<pos:position pos:line="4" pos:column="24"/></name><argument_list pos:line="4" pos:column="24">(<argument><expr><name pos:line="4" pos:column="25">FERROR<pos:position pos:line="4" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="4" pos:column="33">"Internal error: wrong write used in receiver.\n"<pos:position pos:line="4" pos:column="82"/></literal></expr></argument>)<pos:position pos:line="4" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="84"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="5" pos:column="17">exit_cleanup<pos:position pos:line="5" pos:column="29"/></name><argument_list pos:line="5" pos:column="29">(<argument><expr><name pos:line="5" pos:column="30">RERR_PROTOCOL<pos:position pos:line="5" pos:column="43"/></name></expr></argument>)<pos:position pos:line="5" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="45"/></expr_stmt>
	}<pos:position pos:line="6" pos:column="10"/></block></then></if>

	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><name pos:line="8" pos:column="13">fd<pos:position pos:line="8" pos:column="15"/></name> <operator pos:line="8" pos:column="16">==<pos:position pos:line="8" pos:column="18"/></operator> <name pos:line="8" pos:column="19">sock_f_out<pos:position pos:line="8" pos:column="29"/></name></expr>)<pos:position pos:line="8" pos:column="30"/></condition><then pos:line="8" pos:column="30">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="9" pos:column="17">stats<pos:position pos:line="9" pos:column="22"/></name><operator pos:line="9" pos:column="22">.<pos:position pos:line="9" pos:column="23"/></operator><name pos:line="9" pos:column="23">total_written<pos:position pos:line="9" pos:column="36"/></name></name> <operator pos:line="9" pos:column="37">+=<pos:position pos:line="9" pos:column="39"/></operator> <name pos:line="9" pos:column="40">len<pos:position pos:line="9" pos:column="43"/></name></expr>;<pos:position pos:line="9" pos:column="44"/></expr_stmt></block></then></if>

	<if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><name pos:line="11" pos:column="13">fd<pos:position pos:line="11" pos:column="15"/></name> <operator pos:line="11" pos:column="16">==<pos:position pos:line="11" pos:column="18"/></operator> <name pos:line="11" pos:column="19">write_batch_monitor_out<pos:position pos:line="11" pos:column="42"/></name></expr>)<pos:position pos:line="11" pos:column="43"/></condition><then pos:line="11" pos:column="43"> <block pos:line="11" pos:column="44">{
		<if pos:line="12" pos:column="17">if <condition pos:line="12" pos:column="20">(<expr><operator pos:line="12" pos:column="21">(<pos:position pos:line="12" pos:column="22"/></operator><name pos:line="12" pos:column="22">size_t<pos:position pos:line="12" pos:column="28"/></name><operator pos:line="12" pos:column="28">)<pos:position pos:line="12" pos:column="29"/></operator><call><name pos:line="12" pos:column="29">write<pos:position pos:line="12" pos:column="34"/></name><argument_list pos:line="12" pos:column="34">(<argument><expr><name pos:line="12" pos:column="35">batch_fd<pos:position pos:line="12" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="45">buf<pos:position pos:line="12" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="50">len<pos:position pos:line="12" pos:column="53"/></name></expr></argument>)<pos:position pos:line="12" pos:column="54"/></argument_list></call> <operator pos:line="12" pos:column="55">!=<pos:position pos:line="12" pos:column="57"/></operator> <name pos:line="12" pos:column="58">len<pos:position pos:line="12" pos:column="61"/></name></expr>)<pos:position pos:line="12" pos:column="62"/></condition><then pos:line="12" pos:column="62">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="13" pos:column="25">exit_cleanup<pos:position pos:line="13" pos:column="37"/></name><argument_list pos:line="13" pos:column="37">(<argument><expr><name pos:line="13" pos:column="38">RERR_FILEIO<pos:position pos:line="13" pos:column="49"/></name></expr></argument>)<pos:position pos:line="13" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="51"/></expr_stmt></block></then></if>
	}<pos:position pos:line="14" pos:column="10"/></block></then></if>

	<if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><operator pos:line="16" pos:column="13">!<pos:position pos:line="16" pos:column="14"/></operator><name pos:line="16" pos:column="14">iobuf_out<pos:position pos:line="16" pos:column="23"/></name> <operator pos:line="16" pos:column="24">||<pos:position pos:line="16" pos:column="26"/></operator> <name pos:line="16" pos:column="27">fd<pos:position pos:line="16" pos:column="29"/></name> <operator pos:line="16" pos:column="30">!=<pos:position pos:line="16" pos:column="32"/></operator> <name pos:line="16" pos:column="33">sock_f_out<pos:position pos:line="16" pos:column="43"/></name></expr>)<pos:position pos:line="16" pos:column="44"/></condition><then pos:line="16" pos:column="44"> <block pos:line="16" pos:column="45">{
		<expr_stmt><expr><call><name pos:line="17" pos:column="17">writefd_unbuffered<pos:position pos:line="17" pos:column="35"/></name><argument_list pos:line="17" pos:column="35">(<argument><expr><name pos:line="17" pos:column="36">fd<pos:position pos:line="17" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="40">buf<pos:position pos:line="17" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="45">len<pos:position pos:line="17" pos:column="48"/></name></expr></argument>)<pos:position pos:line="17" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="50"/></expr_stmt>
		<return pos:line="18" pos:column="17">return;<pos:position pos:line="18" pos:column="24"/></return>
	}<pos:position pos:line="19" pos:column="10"/></block></then></if>

	<while pos:line="21" pos:column="9">while <condition pos:line="21" pos:column="15">(<expr><name pos:line="21" pos:column="16">len<pos:position pos:line="21" pos:column="19"/></name></expr>)<pos:position pos:line="21" pos:column="20"/></condition> <block pos:line="21" pos:column="21">{
		<decl_stmt><decl><type><name pos:line="22" pos:column="17">int<pos:position pos:line="22" pos:column="20"/></name></type> <name pos:line="22" pos:column="21">n<pos:position pos:line="22" pos:column="22"/></name> <init pos:line="22" pos:column="23">= <expr><call><name pos:line="22" pos:column="25">MIN<pos:position pos:line="22" pos:column="28"/></name><argument_list pos:line="22" pos:column="28">(<argument><expr><operator pos:line="22" pos:column="29">(<pos:position pos:line="22" pos:column="30"/></operator><name pos:line="22" pos:column="30">int<pos:position pos:line="22" pos:column="33"/></name><operator pos:line="22" pos:column="33">)<pos:position pos:line="22" pos:column="34"/></operator><name pos:line="22" pos:column="34">len<pos:position pos:line="22" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="39">IO_BUFFER_SIZE<pos:position pos:line="22" pos:column="53"/></name> <operator pos:line="22" pos:column="54">-<pos:position pos:line="22" pos:column="55"/></operator> <name pos:line="22" pos:column="56">iobuf_out_cnt<pos:position pos:line="22" pos:column="69"/></name></expr></argument>)<pos:position pos:line="22" pos:column="70"/></argument_list></call></expr></init></decl>;<pos:position pos:line="22" pos:column="71"/></decl_stmt>
		<if pos:line="23" pos:column="17">if <condition pos:line="23" pos:column="20">(<expr><name pos:line="23" pos:column="21">n<pos:position pos:line="23" pos:column="22"/></name> <operator pos:line="23" pos:column="23">&gt;<pos:position pos:line="23" pos:column="27"/></operator> <literal type="number" pos:line="23" pos:column="25">0<pos:position pos:line="23" pos:column="26"/></literal></expr>)<pos:position pos:line="23" pos:column="27"/></condition><then pos:line="23" pos:column="27"> <block pos:line="23" pos:column="28">{
			<expr_stmt><expr><call><name pos:line="24" pos:column="25">memcpy<pos:position pos:line="24" pos:column="31"/></name><argument_list pos:line="24" pos:column="31">(<argument><expr><name pos:line="24" pos:column="32">iobuf_out<pos:position pos:line="24" pos:column="41"/></name><operator pos:line="24" pos:column="41">+<pos:position pos:line="24" pos:column="42"/></operator><name pos:line="24" pos:column="42">iobuf_out_cnt<pos:position pos:line="24" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="57">buf<pos:position pos:line="24" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="62">n<pos:position pos:line="24" pos:column="63"/></name></expr></argument>)<pos:position pos:line="24" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="65"/></expr_stmt>
			<expr_stmt><expr><name pos:line="25" pos:column="25">buf<pos:position pos:line="25" pos:column="28"/></name> <operator pos:line="25" pos:column="29">+=<pos:position pos:line="25" pos:column="31"/></operator> <name pos:line="25" pos:column="32">n<pos:position pos:line="25" pos:column="33"/></name></expr>;<pos:position pos:line="25" pos:column="34"/></expr_stmt>
			<expr_stmt><expr><name pos:line="26" pos:column="25">len<pos:position pos:line="26" pos:column="28"/></name> <operator pos:line="26" pos:column="29">-=<pos:position pos:line="26" pos:column="31"/></operator> <name pos:line="26" pos:column="32">n<pos:position pos:line="26" pos:column="33"/></name></expr>;<pos:position pos:line="26" pos:column="34"/></expr_stmt>
			<expr_stmt><expr><name pos:line="27" pos:column="25">iobuf_out_cnt<pos:position pos:line="27" pos:column="38"/></name> <operator pos:line="27" pos:column="39">+=<pos:position pos:line="27" pos:column="41"/></operator> <name pos:line="27" pos:column="42">n<pos:position pos:line="27" pos:column="43"/></name></expr>;<pos:position pos:line="27" pos:column="44"/></expr_stmt>
		}<pos:position pos:line="28" pos:column="18"/></block></then></if>

		<if pos:line="30" pos:column="17">if <condition pos:line="30" pos:column="20">(<expr><name pos:line="30" pos:column="21">iobuf_out_cnt<pos:position pos:line="30" pos:column="34"/></name> <operator pos:line="30" pos:column="35">==<pos:position pos:line="30" pos:column="37"/></operator> <name pos:line="30" pos:column="38">IO_BUFFER_SIZE<pos:position pos:line="30" pos:column="52"/></name></expr>)<pos:position pos:line="30" pos:column="53"/></condition><then pos:line="30" pos:column="53">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="31" pos:column="25">io_flush<pos:position pos:line="31" pos:column="33"/></name><argument_list pos:line="31" pos:column="33">(<argument><expr><name pos:line="31" pos:column="34">NORMAL_FLUSH<pos:position pos:line="31" pos:column="46"/></name></expr></argument>)<pos:position pos:line="31" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="48"/></expr_stmt></block></then></if>
	}<pos:position pos:line="32" pos:column="10"/></block></while>
}<pos:position pos:line="33" pos:column="2"/></block></function></unit>
