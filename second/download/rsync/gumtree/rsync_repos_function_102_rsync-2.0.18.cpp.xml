<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_102_rsync-2.0.18.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">open_socket_in<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><name pos:line="1" pos:column="27">int<pos:position pos:line="1" pos:column="30"/></name></type> <name pos:line="1" pos:column="31">type<pos:position pos:line="1" pos:column="35"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="37">int<pos:position pos:line="1" pos:column="40"/></name></type> <name pos:line="1" pos:column="41">port<pos:position pos:line="1" pos:column="45"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="46"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">hostent<pos:position pos:line="3" pos:column="23"/></name></name> <modifier pos:line="3" pos:column="24">*<pos:position pos:line="3" pos:column="25"/></modifier></type><name pos:line="3" pos:column="25">hp<pos:position pos:line="3" pos:column="27"/></name></decl>;<pos:position pos:line="3" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">sockaddr_in<pos:position pos:line="4" pos:column="27"/></name></name></type> <name pos:line="4" pos:column="28">sock<pos:position pos:line="4" pos:column="32"/></name></decl>;<pos:position pos:line="4" pos:column="33"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">char<pos:position pos:line="5" pos:column="13"/></name></type> <name><name pos:line="5" pos:column="14">host_name<pos:position pos:line="5" pos:column="23"/></name><index pos:line="5" pos:column="23">[<expr><literal type="number" pos:line="5" pos:column="24">200<pos:position pos:line="5" pos:column="27"/></literal></expr>]<pos:position pos:line="5" pos:column="28"/></index></name></decl>;<pos:position pos:line="5" pos:column="29"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">res<pos:position pos:line="6" pos:column="16"/></name></decl>;<pos:position pos:line="6" pos:column="17"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">int<pos:position pos:line="7" pos:column="12"/></name></type> <name pos:line="7" pos:column="13">one<pos:position pos:line="7" pos:column="16"/></name><init pos:line="7" pos:column="16">=<expr><literal type="number" pos:line="7" pos:column="17">1<pos:position pos:line="7" pos:column="18"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="19"/></decl_stmt>

	<comment type="block" pos:line="9" pos:column="9">/* get my host name */</comment>
	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><call><name pos:line="10" pos:column="13">gethostname<pos:position pos:line="10" pos:column="24"/></name><argument_list pos:line="10" pos:column="24">(<argument><expr><name pos:line="10" pos:column="25">host_name<pos:position pos:line="10" pos:column="34"/></name></expr></argument>, <argument><expr><sizeof pos:line="10" pos:column="36">sizeof<argument_list pos:line="10" pos:column="42">(<argument><expr><name pos:line="10" pos:column="43">host_name<pos:position pos:line="10" pos:column="52"/></name></expr></argument>)<pos:position pos:line="10" pos:column="53"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="10" pos:column="54"/></argument_list></call> <operator pos:line="10" pos:column="55">==<pos:position pos:line="10" pos:column="57"/></operator> <operator pos:line="10" pos:column="58">-<pos:position pos:line="10" pos:column="59"/></operator><literal type="number" pos:line="10" pos:column="59">1<pos:position pos:line="10" pos:column="60"/></literal></expr>)<pos:position pos:line="10" pos:column="61"/></condition><then pos:line="10" pos:column="61"> <block pos:line="10" pos:column="62">{ 
		<expr_stmt><expr><call><name pos:line="11" pos:column="17">rprintf<pos:position pos:line="11" pos:column="24"/></name><argument_list pos:line="11" pos:column="24">(<argument><expr><name pos:line="11" pos:column="25">FERROR<pos:position pos:line="11" pos:column="31"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="11" pos:column="32">"gethostname failed\n"<pos:position pos:line="11" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="56"/></expr_stmt> 
		<return pos:line="12" pos:column="17">return <expr><operator pos:line="12" pos:column="24">-<pos:position pos:line="12" pos:column="25"/></operator><literal type="number" pos:line="12" pos:column="25">1<pos:position pos:line="12" pos:column="26"/></literal></expr>;<pos:position pos:line="12" pos:column="27"/></return> 
	}<pos:position pos:line="13" pos:column="10"/></block></then></if> 

	<comment type="block" pos:line="15" pos:column="9">/* get host info */</comment>
	<if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><operator pos:line="16" pos:column="13">(<pos:position pos:line="16" pos:column="14"/></operator><name pos:line="16" pos:column="14">hp<pos:position pos:line="16" pos:column="16"/></name> <operator pos:line="16" pos:column="17">=<pos:position pos:line="16" pos:column="18"/></operator> <call><name pos:line="16" pos:column="19">gethostbyname<pos:position pos:line="16" pos:column="32"/></name><argument_list pos:line="16" pos:column="32">(<argument><expr><name pos:line="16" pos:column="33">host_name<pos:position pos:line="16" pos:column="42"/></name></expr></argument>)<pos:position pos:line="16" pos:column="43"/></argument_list></call><operator pos:line="16" pos:column="43">)<pos:position pos:line="16" pos:column="44"/></operator> <operator pos:line="16" pos:column="45">==<pos:position pos:line="16" pos:column="47"/></operator> <literal type="number" pos:line="16" pos:column="48">0<pos:position pos:line="16" pos:column="49"/></literal></expr>)<pos:position pos:line="16" pos:column="50"/></condition><then pos:line="16" pos:column="50"> <block pos:line="16" pos:column="51">{
		<expr_stmt><expr><call><name pos:line="17" pos:column="17">rprintf<pos:position pos:line="17" pos:column="24"/></name><argument_list pos:line="17" pos:column="24">(<argument><expr><name pos:line="17" pos:column="25">FERROR<pos:position pos:line="17" pos:column="31"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="17" pos:column="32">"gethostbyname: Unknown host %s\n"<pos:position pos:line="17" pos:column="66"/></literal></expr></argument>,<argument><expr><name pos:line="17" pos:column="67">host_name<pos:position pos:line="17" pos:column="76"/></name></expr></argument>)<pos:position pos:line="17" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="78"/></expr_stmt>
		<return pos:line="18" pos:column="17">return <expr><operator pos:line="18" pos:column="24">-<pos:position pos:line="18" pos:column="25"/></operator><literal type="number" pos:line="18" pos:column="25">1<pos:position pos:line="18" pos:column="26"/></literal></expr>;<pos:position pos:line="18" pos:column="27"/></return>
	}<pos:position pos:line="19" pos:column="10"/></block></then></if>
  
	<expr_stmt><expr><call><name pos:line="21" pos:column="9">memset<pos:position pos:line="21" pos:column="15"/></name><argument_list pos:line="21" pos:column="15">(<argument><expr><operator pos:line="21" pos:column="16">(<pos:position pos:line="21" pos:column="17"/></operator><name pos:line="21" pos:column="17">char<pos:position pos:line="21" pos:column="21"/></name> <operator pos:line="21" pos:column="22">*<pos:position pos:line="21" pos:column="23"/></operator><operator pos:line="21" pos:column="23">)<pos:position pos:line="21" pos:column="24"/></operator><operator pos:line="21" pos:column="24">&amp;<pos:position pos:line="21" pos:column="29"/></operator><name pos:line="21" pos:column="25">sock<pos:position pos:line="21" pos:column="29"/></name></expr></argument>,<argument><expr><literal type="number" pos:line="21" pos:column="30">0<pos:position pos:line="21" pos:column="31"/></literal></expr></argument>,<argument><expr><sizeof pos:line="21" pos:column="32">sizeof<argument_list pos:line="21" pos:column="38">(<argument><expr><name pos:line="21" pos:column="39">sock<pos:position pos:line="21" pos:column="43"/></name></expr></argument>)<pos:position pos:line="21" pos:column="44"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="21" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="46"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="22" pos:column="9">memcpy<pos:position pos:line="22" pos:column="15"/></name><argument_list pos:line="22" pos:column="15">(<argument><expr><operator pos:line="22" pos:column="16">(<pos:position pos:line="22" pos:column="17"/></operator><name pos:line="22" pos:column="17">char<pos:position pos:line="22" pos:column="21"/></name> <operator pos:line="22" pos:column="22">*<pos:position pos:line="22" pos:column="23"/></operator><operator pos:line="22" pos:column="23">)<pos:position pos:line="22" pos:column="24"/></operator><operator pos:line="22" pos:column="24">&amp;<pos:position pos:line="22" pos:column="29"/></operator><name><name pos:line="22" pos:column="25">sock<pos:position pos:line="22" pos:column="29"/></name><operator pos:line="22" pos:column="29">.<pos:position pos:line="22" pos:column="30"/></operator><name pos:line="22" pos:column="30">sin_addr<pos:position pos:line="22" pos:column="38"/></name></name></expr></argument>,<argument><expr><operator pos:line="22" pos:column="39">(<pos:position pos:line="22" pos:column="40"/></operator><name pos:line="22" pos:column="40">char<pos:position pos:line="22" pos:column="44"/></name> <operator pos:line="22" pos:column="45">*<pos:position pos:line="22" pos:column="46"/></operator><operator pos:line="22" pos:column="46">)<pos:position pos:line="22" pos:column="47"/></operator><name><name pos:line="22" pos:column="47">hp<pos:position pos:line="22" pos:column="49"/></name><operator pos:line="22" pos:column="49">-&gt;<pos:position pos:line="22" pos:column="54"/></operator><name pos:line="22" pos:column="51">h_addr<pos:position pos:line="22" pos:column="57"/></name></name></expr></argument>, <argument><expr><name><name pos:line="22" pos:column="59">hp<pos:position pos:line="22" pos:column="61"/></name><operator pos:line="22" pos:column="61">-&gt;<pos:position pos:line="22" pos:column="66"/></operator><name pos:line="22" pos:column="63">h_length<pos:position pos:line="22" pos:column="71"/></name></name></expr></argument>)<pos:position pos:line="22" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="73"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="23" pos:column="9">sock<pos:position pos:line="23" pos:column="13"/></name><operator pos:line="23" pos:column="13">.<pos:position pos:line="23" pos:column="14"/></operator><name pos:line="23" pos:column="14">sin_port<pos:position pos:line="23" pos:column="22"/></name></name> <operator pos:line="23" pos:column="23">=<pos:position pos:line="23" pos:column="24"/></operator> <call><name pos:line="23" pos:column="25">htons<pos:position pos:line="23" pos:column="30"/></name><argument_list pos:line="23" pos:column="30">(<argument><expr><name pos:line="23" pos:column="31">port<pos:position pos:line="23" pos:column="35"/></name></expr></argument>)<pos:position pos:line="23" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="37"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="24" pos:column="9">sock<pos:position pos:line="24" pos:column="13"/></name><operator pos:line="24" pos:column="13">.<pos:position pos:line="24" pos:column="14"/></operator><name pos:line="24" pos:column="14">sin_family<pos:position pos:line="24" pos:column="24"/></name></name> <operator pos:line="24" pos:column="25">=<pos:position pos:line="24" pos:column="26"/></operator> <name><name pos:line="24" pos:column="27">hp<pos:position pos:line="24" pos:column="29"/></name><operator pos:line="24" pos:column="29">-&gt;<pos:position pos:line="24" pos:column="34"/></operator><name pos:line="24" pos:column="31">h_addrtype<pos:position pos:line="24" pos:column="41"/></name></name></expr>;<pos:position pos:line="24" pos:column="42"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="25" pos:column="9">sock<pos:position pos:line="25" pos:column="13"/></name><operator pos:line="25" pos:column="13">.<pos:position pos:line="25" pos:column="14"/></operator><name pos:line="25" pos:column="14">sin_addr<pos:position pos:line="25" pos:column="22"/></name><operator pos:line="25" pos:column="22">.<pos:position pos:line="25" pos:column="23"/></operator><name pos:line="25" pos:column="23">s_addr<pos:position pos:line="25" pos:column="29"/></name></name> <operator pos:line="25" pos:column="30">=<pos:position pos:line="25" pos:column="31"/></operator> <name pos:line="25" pos:column="32">INADDR_ANY<pos:position pos:line="25" pos:column="42"/></name></expr>;<pos:position pos:line="25" pos:column="43"/></expr_stmt>
	<expr_stmt><expr><name pos:line="26" pos:column="9">res<pos:position pos:line="26" pos:column="12"/></name> <operator pos:line="26" pos:column="13">=<pos:position pos:line="26" pos:column="14"/></operator> <call><name pos:line="26" pos:column="15">socket<pos:position pos:line="26" pos:column="21"/></name><argument_list pos:line="26" pos:column="21">(<argument><expr><name><name pos:line="26" pos:column="22">hp<pos:position pos:line="26" pos:column="24"/></name><operator pos:line="26" pos:column="24">-&gt;<pos:position pos:line="26" pos:column="29"/></operator><name pos:line="26" pos:column="26">h_addrtype<pos:position pos:line="26" pos:column="36"/></name></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="38">type<pos:position pos:line="26" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="26" pos:column="44">0<pos:position pos:line="26" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="47"/></expr_stmt>
	<if pos:line="27" pos:column="9">if <condition pos:line="27" pos:column="12">(<expr><name pos:line="27" pos:column="13">res<pos:position pos:line="27" pos:column="16"/></name> <operator pos:line="27" pos:column="17">==<pos:position pos:line="27" pos:column="19"/></operator> <operator pos:line="27" pos:column="20">-<pos:position pos:line="27" pos:column="21"/></operator><literal type="number" pos:line="27" pos:column="21">1<pos:position pos:line="27" pos:column="22"/></literal></expr>)<pos:position pos:line="27" pos:column="23"/></condition><then pos:line="27" pos:column="23"> <block pos:line="27" pos:column="24">{ 
		<expr_stmt><expr><call><name pos:line="28" pos:column="17">rprintf<pos:position pos:line="28" pos:column="24"/></name><argument_list pos:line="28" pos:column="24">(<argument><expr><name pos:line="28" pos:column="25">FERROR<pos:position pos:line="28" pos:column="31"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="28" pos:column="32">"socket failed\n"<pos:position pos:line="28" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="51"/></expr_stmt> 
		<return pos:line="29" pos:column="17">return <expr><operator pos:line="29" pos:column="24">-<pos:position pos:line="29" pos:column="25"/></operator><literal type="number" pos:line="29" pos:column="25">1<pos:position pos:line="29" pos:column="26"/></literal></expr>;<pos:position pos:line="29" pos:column="27"/></return> 
	}<pos:position pos:line="30" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="32" pos:column="9">setsockopt<pos:position pos:line="32" pos:column="19"/></name><argument_list pos:line="32" pos:column="19">(<argument><expr><name pos:line="32" pos:column="20">res<pos:position pos:line="32" pos:column="23"/></name></expr></argument>,<argument><expr><name pos:line="32" pos:column="24">SOL_SOCKET<pos:position pos:line="32" pos:column="34"/></name></expr></argument>,<argument><expr><name pos:line="32" pos:column="35">SO_REUSEADDR<pos:position pos:line="32" pos:column="47"/></name></expr></argument>,<argument><expr><operator pos:line="32" pos:column="48">(<pos:position pos:line="32" pos:column="49"/></operator><name pos:line="32" pos:column="49">char<pos:position pos:line="32" pos:column="53"/></name> <operator pos:line="32" pos:column="54">*<pos:position pos:line="32" pos:column="55"/></operator><operator pos:line="32" pos:column="55">)<pos:position pos:line="32" pos:column="56"/></operator><operator pos:line="32" pos:column="56">&amp;<pos:position pos:line="32" pos:column="61"/></operator><name pos:line="32" pos:column="57">one<pos:position pos:line="32" pos:column="60"/></name></expr></argument>,<argument><expr><sizeof pos:line="32" pos:column="61">sizeof<argument_list pos:line="32" pos:column="67">(<argument><expr><name pos:line="32" pos:column="68">one<pos:position pos:line="32" pos:column="71"/></name></expr></argument>)<pos:position pos:line="32" pos:column="72"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="32" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="74"/></expr_stmt>

	<comment type="block" pos:line="34" pos:column="9">/* now we've got a socket - we need to bind it */</comment>
	<if pos:line="35" pos:column="9">if <condition pos:line="35" pos:column="12">(<expr><call><name pos:line="35" pos:column="13">bind<pos:position pos:line="35" pos:column="17"/></name><argument_list pos:line="35" pos:column="17">(<argument><expr><name pos:line="35" pos:column="18">res<pos:position pos:line="35" pos:column="21"/></name></expr></argument>, <argument><expr><operator pos:line="35" pos:column="23">(<pos:position pos:line="35" pos:column="24"/></operator>struct <name pos:line="35" pos:column="31">sockaddr<pos:position pos:line="35" pos:column="39"/></name> <operator pos:line="35" pos:column="40">*<pos:position pos:line="35" pos:column="41"/></operator> <operator pos:line="35" pos:column="42">)<pos:position pos:line="35" pos:column="43"/></operator> <operator pos:line="35" pos:column="44">&amp;<pos:position pos:line="35" pos:column="49"/></operator><name pos:line="35" pos:column="45">sock<pos:position pos:line="35" pos:column="49"/></name></expr></argument>,<argument><expr><sizeof pos:line="35" pos:column="50">sizeof<argument_list pos:line="35" pos:column="56">(<argument><expr><name pos:line="35" pos:column="57">sock<pos:position pos:line="35" pos:column="61"/></name></expr></argument>)<pos:position pos:line="35" pos:column="62"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="35" pos:column="63"/></argument_list></call> <operator pos:line="35" pos:column="64">==<pos:position pos:line="35" pos:column="66"/></operator> <operator pos:line="35" pos:column="67">-<pos:position pos:line="35" pos:column="68"/></operator><literal type="number" pos:line="35" pos:column="68">1<pos:position pos:line="35" pos:column="69"/></literal></expr>)<pos:position pos:line="35" pos:column="70"/></condition><then pos:line="35" pos:column="70"> <block pos:line="35" pos:column="71">{ 
		<expr_stmt><expr><call><name pos:line="36" pos:column="17">rprintf<pos:position pos:line="36" pos:column="24"/></name><argument_list pos:line="36" pos:column="24">(<argument><expr><name pos:line="36" pos:column="25">FERROR<pos:position pos:line="36" pos:column="31"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="36" pos:column="32">"bind failed on port %d\n"<pos:position pos:line="36" pos:column="58"/></literal></expr></argument>, <argument><expr><name pos:line="36" pos:column="60">port<pos:position pos:line="36" pos:column="64"/></name></expr></argument>)<pos:position pos:line="36" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="66"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="37" pos:column="17">close<pos:position pos:line="37" pos:column="22"/></name><argument_list pos:line="37" pos:column="22">(<argument><expr><name pos:line="37" pos:column="23">res<pos:position pos:line="37" pos:column="26"/></name></expr></argument>)<pos:position pos:line="37" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="28"/></expr_stmt> 
		<return pos:line="38" pos:column="17">return <expr><operator pos:line="38" pos:column="24">-<pos:position pos:line="38" pos:column="25"/></operator><literal type="number" pos:line="38" pos:column="25">1<pos:position pos:line="38" pos:column="26"/></literal></expr>;<pos:position pos:line="38" pos:column="27"/></return>
	}<pos:position pos:line="39" pos:column="10"/></block></then></if>

	<return pos:line="41" pos:column="9">return <expr><name pos:line="41" pos:column="16">res<pos:position pos:line="41" pos:column="19"/></name></expr>;<pos:position pos:line="41" pos:column="20"/></return>
}<pos:position pos:line="42" pos:column="2"/></block></function></unit>
