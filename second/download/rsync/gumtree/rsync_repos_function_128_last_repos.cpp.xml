<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_128_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">size_t<pos:position pos:line="1" pos:column="14"/></name></type> <name pos:line="1" pos:column="15">safe_read<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name pos:line="1" pos:column="25">int<pos:position pos:line="1" pos:column="28"/></name></type> <name pos:line="1" pos:column="29">fd<pos:position pos:line="1" pos:column="31"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="33">char<pos:position pos:line="1" pos:column="37"/></name> <modifier pos:line="1" pos:column="38">*<pos:position pos:line="1" pos:column="39"/></modifier></type><name pos:line="1" pos:column="39">buf<pos:position pos:line="1" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="44">size_t<pos:position pos:line="1" pos:column="50"/></name></type> <name pos:line="1" pos:column="51">len<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="55"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">size_t<pos:position pos:line="3" pos:column="15"/></name></type> <name pos:line="3" pos:column="16">got<pos:position pos:line="3" pos:column="19"/></name> <init pos:line="3" pos:column="20">= <expr><literal type="number" pos:line="3" pos:column="22">0<pos:position pos:line="3" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="24"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="5" pos:column="9">assert<pos:position pos:line="5" pos:column="15"/></name><argument_list pos:line="5" pos:column="15">(<argument><expr><name pos:line="5" pos:column="16">fd<pos:position pos:line="5" pos:column="18"/></name> <operator pos:line="5" pos:column="19">!=<pos:position pos:line="5" pos:column="21"/></operator> <name><name pos:line="5" pos:column="22">iobuf<pos:position pos:line="5" pos:column="27"/></name><operator pos:line="5" pos:column="27">.<pos:position pos:line="5" pos:column="28"/></operator><name pos:line="5" pos:column="28">in_fd<pos:position pos:line="5" pos:column="33"/></name></name></expr></argument>)<pos:position pos:line="5" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="35"/></expr_stmt>

	<while pos:line="7" pos:column="9">while <condition pos:line="7" pos:column="15">(<expr><literal type="number" pos:line="7" pos:column="16">1<pos:position pos:line="7" pos:column="17"/></literal></expr>)<pos:position pos:line="7" pos:column="18"/></condition> <block pos:line="7" pos:column="19">{
		<decl_stmt><decl><type><name><name pos:line="8" pos:column="17">struct<pos:position pos:line="8" pos:column="23"/></name> <name pos:line="8" pos:column="24">timeval<pos:position pos:line="8" pos:column="31"/></name></name></type> <name pos:line="8" pos:column="32">tv<pos:position pos:line="8" pos:column="34"/></name></decl>;<pos:position pos:line="8" pos:column="35"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="9" pos:column="17">fd_set<pos:position pos:line="9" pos:column="23"/></name></type> <name pos:line="9" pos:column="24">r_fds<pos:position pos:line="9" pos:column="29"/></name></decl>, <decl><type ref="prev"/><name pos:line="9" pos:column="31">e_fds<pos:position pos:line="9" pos:column="36"/></name></decl>;<pos:position pos:line="9" pos:column="37"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="10" pos:column="17">int<pos:position pos:line="10" pos:column="20"/></name></type> <name pos:line="10" pos:column="21">cnt<pos:position pos:line="10" pos:column="24"/></name></decl>;<pos:position pos:line="10" pos:column="25"/></decl_stmt>

		<expr_stmt><expr><call><name pos:line="12" pos:column="17">FD_ZERO<pos:position pos:line="12" pos:column="24"/></name><argument_list pos:line="12" pos:column="24">(<argument><expr><operator pos:line="12" pos:column="25">&amp;<pos:position pos:line="12" pos:column="30"/></operator><name pos:line="12" pos:column="26">r_fds<pos:position pos:line="12" pos:column="31"/></name></expr></argument>)<pos:position pos:line="12" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="33"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="13" pos:column="17">FD_SET<pos:position pos:line="13" pos:column="23"/></name><argument_list pos:line="13" pos:column="23">(<argument><expr><name pos:line="13" pos:column="24">fd<pos:position pos:line="13" pos:column="26"/></name></expr></argument>, <argument><expr><operator pos:line="13" pos:column="28">&amp;<pos:position pos:line="13" pos:column="33"/></operator><name pos:line="13" pos:column="29">r_fds<pos:position pos:line="13" pos:column="34"/></name></expr></argument>)<pos:position pos:line="13" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="36"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="14" pos:column="17">FD_ZERO<pos:position pos:line="14" pos:column="24"/></name><argument_list pos:line="14" pos:column="24">(<argument><expr><operator pos:line="14" pos:column="25">&amp;<pos:position pos:line="14" pos:column="30"/></operator><name pos:line="14" pos:column="26">e_fds<pos:position pos:line="14" pos:column="31"/></name></expr></argument>)<pos:position pos:line="14" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="33"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="15" pos:column="17">FD_SET<pos:position pos:line="15" pos:column="23"/></name><argument_list pos:line="15" pos:column="23">(<argument><expr><name pos:line="15" pos:column="24">fd<pos:position pos:line="15" pos:column="26"/></name></expr></argument>, <argument><expr><operator pos:line="15" pos:column="28">&amp;<pos:position pos:line="15" pos:column="33"/></operator><name pos:line="15" pos:column="29">e_fds<pos:position pos:line="15" pos:column="34"/></name></expr></argument>)<pos:position pos:line="15" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="36"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="16" pos:column="17">tv<pos:position pos:line="16" pos:column="19"/></name><operator pos:line="16" pos:column="19">.<pos:position pos:line="16" pos:column="20"/></operator><name pos:line="16" pos:column="20">tv_sec<pos:position pos:line="16" pos:column="26"/></name></name> <operator pos:line="16" pos:column="27">=<pos:position pos:line="16" pos:column="28"/></operator> <name pos:line="16" pos:column="29">select_timeout<pos:position pos:line="16" pos:column="43"/></name></expr>;<pos:position pos:line="16" pos:column="44"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="17" pos:column="17">tv<pos:position pos:line="17" pos:column="19"/></name><operator pos:line="17" pos:column="19">.<pos:position pos:line="17" pos:column="20"/></operator><name pos:line="17" pos:column="20">tv_usec<pos:position pos:line="17" pos:column="27"/></name></name> <operator pos:line="17" pos:column="28">=<pos:position pos:line="17" pos:column="29"/></operator> <literal type="number" pos:line="17" pos:column="30">0<pos:position pos:line="17" pos:column="31"/></literal></expr>;<pos:position pos:line="17" pos:column="32"/></expr_stmt>

		<expr_stmt><expr><name pos:line="19" pos:column="17">cnt<pos:position pos:line="19" pos:column="20"/></name> <operator pos:line="19" pos:column="21">=<pos:position pos:line="19" pos:column="22"/></operator> <call><name pos:line="19" pos:column="23">select<pos:position pos:line="19" pos:column="29"/></name><argument_list pos:line="19" pos:column="29">(<argument><expr><name pos:line="19" pos:column="30">fd<pos:position pos:line="19" pos:column="32"/></name><operator pos:line="19" pos:column="32">+<pos:position pos:line="19" pos:column="33"/></operator><literal type="number" pos:line="19" pos:column="33">1<pos:position pos:line="19" pos:column="34"/></literal></expr></argument>, <argument><expr><operator pos:line="19" pos:column="36">&amp;<pos:position pos:line="19" pos:column="41"/></operator><name pos:line="19" pos:column="37">r_fds<pos:position pos:line="19" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="44">NULL<pos:position pos:line="19" pos:column="48"/></name></expr></argument>, <argument><expr><operator pos:line="19" pos:column="50">&amp;<pos:position pos:line="19" pos:column="55"/></operator><name pos:line="19" pos:column="51">e_fds<pos:position pos:line="19" pos:column="56"/></name></expr></argument>, <argument><expr><operator pos:line="19" pos:column="58">&amp;<pos:position pos:line="19" pos:column="63"/></operator><name pos:line="19" pos:column="59">tv<pos:position pos:line="19" pos:column="61"/></name></expr></argument>)<pos:position pos:line="19" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="63"/></expr_stmt>
		<if pos:line="20" pos:column="17">if <condition pos:line="20" pos:column="20">(<expr><name pos:line="20" pos:column="21">cnt<pos:position pos:line="20" pos:column="24"/></name> <operator pos:line="20" pos:column="25">&lt;=<pos:position pos:line="20" pos:column="30"/></operator> <literal type="number" pos:line="20" pos:column="28">0<pos:position pos:line="20" pos:column="29"/></literal></expr>)<pos:position pos:line="20" pos:column="30"/></condition><then pos:line="20" pos:column="30"> <block pos:line="20" pos:column="31">{
			<if pos:line="21" pos:column="25">if <condition pos:line="21" pos:column="28">(<expr><name pos:line="21" pos:column="29">cnt<pos:position pos:line="21" pos:column="32"/></name> <operator pos:line="21" pos:column="33">&lt;<pos:position pos:line="21" pos:column="37"/></operator> <literal type="number" pos:line="21" pos:column="35">0<pos:position pos:line="21" pos:column="36"/></literal> <operator pos:line="21" pos:column="37">&amp;&amp;<pos:position pos:line="21" pos:column="47"/></operator> <name pos:line="21" pos:column="40">errno<pos:position pos:line="21" pos:column="45"/></name> <operator pos:line="21" pos:column="46">==<pos:position pos:line="21" pos:column="48"/></operator> <name pos:line="21" pos:column="49">EBADF<pos:position pos:line="21" pos:column="54"/></name></expr>)<pos:position pos:line="21" pos:column="55"/></condition><then pos:line="21" pos:column="55"> <block pos:line="21" pos:column="56">{
				<expr_stmt><expr><call><name pos:line="22" pos:column="33">rsyserr<pos:position pos:line="22" pos:column="40"/></name><argument_list pos:line="22" pos:column="40">(<argument><expr><name pos:line="22" pos:column="41">FERROR<pos:position pos:line="22" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="49">errno<pos:position pos:line="22" pos:column="54"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="22" pos:column="56">"safe_read select failed [%s]"<pos:position pos:line="22" pos:column="86"/></literal></expr></argument>,
					<argument><expr><call><name pos:line="23" pos:column="41">who_am_i<pos:position pos:line="23" pos:column="49"/></name><argument_list pos:line="23" pos:column="49">()<pos:position pos:line="23" pos:column="51"/></argument_list></call></expr></argument>)<pos:position pos:line="23" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="53"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="24" pos:column="33">exit_cleanup<pos:position pos:line="24" pos:column="45"/></name><argument_list pos:line="24" pos:column="45">(<argument><expr><name pos:line="24" pos:column="46">RERR_FILEIO<pos:position pos:line="24" pos:column="57"/></name></expr></argument>)<pos:position pos:line="24" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="59"/></expr_stmt>
			}<pos:position pos:line="25" pos:column="26"/></block></then></if>
			<expr_stmt><expr><call><name pos:line="26" pos:column="25">check_timeout<pos:position pos:line="26" pos:column="38"/></name><argument_list pos:line="26" pos:column="38">(<argument><expr><literal type="number" pos:line="26" pos:column="39">1<pos:position pos:line="26" pos:column="40"/></literal></expr></argument>, <argument><expr><name pos:line="26" pos:column="42">MSK_ALLOW_FLUSH<pos:position pos:line="26" pos:column="57"/></name></expr></argument>)<pos:position pos:line="26" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="59"/></expr_stmt>
			<continue pos:line="27" pos:column="25">continue;<pos:position pos:line="27" pos:column="34"/></continue>
		}<pos:position pos:line="28" pos:column="18"/></block></then></if>

		<comment type="block" pos:line="30" pos:column="17">/*if (FD_ISSET(fd, &amp;e_fds))
			rprintf(FINFO, "select exception on fd %d\n", fd); */</comment>

		<if pos:line="33" pos:column="17">if <condition pos:line="33" pos:column="20">(<expr><call><name pos:line="33" pos:column="21">FD_ISSET<pos:position pos:line="33" pos:column="29"/></name><argument_list pos:line="33" pos:column="29">(<argument><expr><name pos:line="33" pos:column="30">fd<pos:position pos:line="33" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="33" pos:column="34">&amp;<pos:position pos:line="33" pos:column="39"/></operator><name pos:line="33" pos:column="35">r_fds<pos:position pos:line="33" pos:column="40"/></name></expr></argument>)<pos:position pos:line="33" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="33" pos:column="42"/></condition><then pos:line="33" pos:column="42"> <block pos:line="33" pos:column="43">{
			<decl_stmt><decl><type><name pos:line="34" pos:column="25">int<pos:position pos:line="34" pos:column="28"/></name></type> <name pos:line="34" pos:column="29">n<pos:position pos:line="34" pos:column="30"/></name> <init pos:line="34" pos:column="31">= <expr><call><name pos:line="34" pos:column="33">read<pos:position pos:line="34" pos:column="37"/></name><argument_list pos:line="34" pos:column="37">(<argument><expr><name pos:line="34" pos:column="38">fd<pos:position pos:line="34" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="42">buf<pos:position pos:line="34" pos:column="45"/></name> <operator pos:line="34" pos:column="46">+<pos:position pos:line="34" pos:column="47"/></operator> <name pos:line="34" pos:column="48">got<pos:position pos:line="34" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="53">len<pos:position pos:line="34" pos:column="56"/></name> <operator pos:line="34" pos:column="57">-<pos:position pos:line="34" pos:column="58"/></operator> <name pos:line="34" pos:column="59">got<pos:position pos:line="34" pos:column="62"/></name></expr></argument>)<pos:position pos:line="34" pos:column="63"/></argument_list></call></expr></init></decl>;<pos:position pos:line="34" pos:column="64"/></decl_stmt>
			<if pos:line="35" pos:column="25">if <condition pos:line="35" pos:column="28">(<expr><call><name pos:line="35" pos:column="29">DEBUG_GTE<pos:position pos:line="35" pos:column="38"/></name><argument_list pos:line="35" pos:column="38">(<argument><expr><name pos:line="35" pos:column="39">IO<pos:position pos:line="35" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="35" pos:column="43">2<pos:position pos:line="35" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="35" pos:column="46"/></condition><then pos:line="35" pos:column="46">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="36" pos:column="33">rprintf<pos:position pos:line="36" pos:column="40"/></name><argument_list pos:line="36" pos:column="40">(<argument><expr><name pos:line="36" pos:column="41">FINFO<pos:position pos:line="36" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="36" pos:column="48">"[%s] safe_read(%d)=%ld\n"<pos:position pos:line="36" pos:column="74"/></literal></expr></argument>, <argument><expr><call><name pos:line="36" pos:column="76">who_am_i<pos:position pos:line="36" pos:column="84"/></name><argument_list pos:line="36" pos:column="84">()<pos:position pos:line="36" pos:column="86"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="36" pos:column="88">fd<pos:position pos:line="36" pos:column="90"/></name></expr></argument>, <argument><expr><operator pos:line="36" pos:column="92">(<pos:position pos:line="36" pos:column="93"/></operator><name pos:line="36" pos:column="93">long<pos:position pos:line="36" pos:column="97"/></name><operator pos:line="36" pos:column="97">)<pos:position pos:line="36" pos:column="98"/></operator><name pos:line="36" pos:column="98">n<pos:position pos:line="36" pos:column="99"/></name></expr></argument>)<pos:position pos:line="36" pos:column="100"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="101"/></expr_stmt></block></then></if>
			<if pos:line="37" pos:column="25">if <condition pos:line="37" pos:column="28">(<expr><name pos:line="37" pos:column="29">n<pos:position pos:line="37" pos:column="30"/></name> <operator pos:line="37" pos:column="31">==<pos:position pos:line="37" pos:column="33"/></operator> <literal type="number" pos:line="37" pos:column="34">0<pos:position pos:line="37" pos:column="35"/></literal></expr>)<pos:position pos:line="37" pos:column="36"/></condition><then pos:line="37" pos:column="36">
				<block type="pseudo"><break pos:line="38" pos:column="33">break;<pos:position pos:line="38" pos:column="39"/></break></block></then></if>
			<if pos:line="39" pos:column="25">if <condition pos:line="39" pos:column="28">(<expr><name pos:line="39" pos:column="29">n<pos:position pos:line="39" pos:column="30"/></name> <operator pos:line="39" pos:column="31">&lt;<pos:position pos:line="39" pos:column="35"/></operator> <literal type="number" pos:line="39" pos:column="33">0<pos:position pos:line="39" pos:column="34"/></literal></expr>)<pos:position pos:line="39" pos:column="35"/></condition><then pos:line="39" pos:column="35"> <block pos:line="39" pos:column="36">{
				<if pos:line="40" pos:column="33">if <condition pos:line="40" pos:column="36">(<expr><name pos:line="40" pos:column="37">errno<pos:position pos:line="40" pos:column="42"/></name> <operator pos:line="40" pos:column="43">==<pos:position pos:line="40" pos:column="45"/></operator> <name pos:line="40" pos:column="46">EINTR<pos:position pos:line="40" pos:column="51"/></name></expr>)<pos:position pos:line="40" pos:column="52"/></condition><then pos:line="40" pos:column="52">
					<block type="pseudo"><continue pos:line="41" pos:column="41">continue;<pos:position pos:line="41" pos:column="50"/></continue></block></then></if>
				<expr_stmt><expr><call><name pos:line="42" pos:column="33">rsyserr<pos:position pos:line="42" pos:column="40"/></name><argument_list pos:line="42" pos:column="40">(<argument><expr><name pos:line="42" pos:column="41">FERROR<pos:position pos:line="42" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="49">errno<pos:position pos:line="42" pos:column="54"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="42" pos:column="56">"safe_read failed to read %ld bytes [%s]"<pos:position pos:line="42" pos:column="97"/></literal></expr></argument>,
					<argument><expr><operator pos:line="43" pos:column="41">(<pos:position pos:line="43" pos:column="42"/></operator><name pos:line="43" pos:column="42">long<pos:position pos:line="43" pos:column="46"/></name><operator pos:line="43" pos:column="46">)<pos:position pos:line="43" pos:column="47"/></operator><name pos:line="43" pos:column="47">len<pos:position pos:line="43" pos:column="50"/></name></expr></argument>, <argument><expr><call><name pos:line="43" pos:column="52">who_am_i<pos:position pos:line="43" pos:column="60"/></name><argument_list pos:line="43" pos:column="60">()<pos:position pos:line="43" pos:column="62"/></argument_list></call></expr></argument>)<pos:position pos:line="43" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="64"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="44" pos:column="33">exit_cleanup<pos:position pos:line="44" pos:column="45"/></name><argument_list pos:line="44" pos:column="45">(<argument><expr><name pos:line="44" pos:column="46">RERR_STREAMIO<pos:position pos:line="44" pos:column="59"/></name></expr></argument>)<pos:position pos:line="44" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="61"/></expr_stmt>
			}<pos:position pos:line="45" pos:column="26"/></block></then></if>
			<if pos:line="46" pos:column="25">if <condition pos:line="46" pos:column="28">(<expr><operator pos:line="46" pos:column="29">(<pos:position pos:line="46" pos:column="30"/></operator><name pos:line="46" pos:column="30">got<pos:position pos:line="46" pos:column="33"/></name> <operator pos:line="46" pos:column="34">+=<pos:position pos:line="46" pos:column="36"/></operator> <operator pos:line="46" pos:column="37">(<pos:position pos:line="46" pos:column="38"/></operator><name pos:line="46" pos:column="38">size_t<pos:position pos:line="46" pos:column="44"/></name><operator pos:line="46" pos:column="44">)<pos:position pos:line="46" pos:column="45"/></operator><name pos:line="46" pos:column="45">n<pos:position pos:line="46" pos:column="46"/></name><operator pos:line="46" pos:column="46">)<pos:position pos:line="46" pos:column="47"/></operator> <operator pos:line="46" pos:column="48">==<pos:position pos:line="46" pos:column="50"/></operator> <name pos:line="46" pos:column="51">len<pos:position pos:line="46" pos:column="54"/></name></expr>)<pos:position pos:line="46" pos:column="55"/></condition><then pos:line="46" pos:column="55">
				<block type="pseudo"><break pos:line="47" pos:column="33">break;<pos:position pos:line="47" pos:column="39"/></break></block></then></if>
		}<pos:position pos:line="48" pos:column="18"/></block></then></if>
	}<pos:position pos:line="49" pos:column="10"/></block></while>

	<return pos:line="51" pos:column="9">return <expr><name pos:line="51" pos:column="16">got<pos:position pos:line="51" pos:column="19"/></name></expr>;<pos:position pos:line="51" pos:column="20"/></return>
}<pos:position pos:line="52" pos:column="2"/></block></function></unit>
