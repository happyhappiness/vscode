<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_815_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">SMB_ACL_T<pos:position pos:line="1" pos:column="10"/></name></type> <name pos:line="1" pos:column="11">sys_acl_get_file<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">( <parameter><decl><type><specifier pos:line="1" pos:column="29">const<pos:position pos:line="1" pos:column="34"/></specifier> <name pos:line="1" pos:column="35">char<pos:position pos:line="1" pos:column="39"/></name> <modifier pos:line="1" pos:column="40">*<pos:position pos:line="1" pos:column="41"/></modifier></type><name pos:line="1" pos:column="41">path_p<pos:position pos:line="1" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="49">SMB_ACL_TYPE_T<pos:position pos:line="1" pos:column="63"/></name></type> <name pos:line="1" pos:column="64">type<pos:position pos:line="1" pos:column="68"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="69"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">acl<pos:position pos:line="3" pos:column="19"/></name></name> <modifier pos:line="3" pos:column="20">*<pos:position pos:line="3" pos:column="21"/></modifier></type><name pos:line="3" pos:column="21">file_acl<pos:position pos:line="3" pos:column="29"/></name> <init pos:line="3" pos:column="30">= <expr><operator pos:line="3" pos:column="32">(<pos:position pos:line="3" pos:column="33"/></operator>struct <name pos:line="3" pos:column="40">acl<pos:position pos:line="3" pos:column="43"/></name> <operator pos:line="3" pos:column="44">*<pos:position pos:line="3" pos:column="45"/></operator><operator pos:line="3" pos:column="45">)<pos:position pos:line="3" pos:column="46"/></operator><name pos:line="3" pos:column="46">NULL<pos:position pos:line="3" pos:column="50"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="51"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">acl_entry<pos:position pos:line="4" pos:column="25"/></name></name> <modifier pos:line="4" pos:column="26">*<pos:position pos:line="4" pos:column="27"/></modifier></type><name pos:line="4" pos:column="27">acl_entry<pos:position pos:line="4" pos:column="36"/></name></decl>;<pos:position pos:line="4" pos:column="37"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">new_acl_entry<pos:position pos:line="5" pos:column="29"/></name></name> <modifier pos:line="5" pos:column="30">*<pos:position pos:line="5" pos:column="31"/></modifier></type><name pos:line="5" pos:column="31">new_acl_entry<pos:position pos:line="5" pos:column="44"/></name></decl>;<pos:position pos:line="5" pos:column="45"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">ace_id<pos:position pos:line="6" pos:column="22"/></name></name> <modifier pos:line="6" pos:column="23">*<pos:position pos:line="6" pos:column="24"/></modifier></type><name pos:line="6" pos:column="24">idp<pos:position pos:line="6" pos:column="27"/></name></decl>;<pos:position pos:line="6" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="7" pos:column="9">struct<pos:position pos:line="7" pos:column="15"/></name> <name pos:line="7" pos:column="16">acl_entry_link<pos:position pos:line="7" pos:column="30"/></name></name> <modifier pos:line="7" pos:column="31">*<pos:position pos:line="7" pos:column="32"/></modifier></type><name pos:line="7" pos:column="32">acl_entry_link<pos:position pos:line="7" pos:column="46"/></name></decl>;<pos:position pos:line="7" pos:column="47"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="8" pos:column="9">struct<pos:position pos:line="8" pos:column="15"/></name> <name pos:line="8" pos:column="16">acl_entry_link<pos:position pos:line="8" pos:column="30"/></name></name> <modifier pos:line="8" pos:column="31">*<pos:position pos:line="8" pos:column="32"/></modifier></type><name pos:line="8" pos:column="32">acl_entry_link_head<pos:position pos:line="8" pos:column="51"/></name></decl>;<pos:position pos:line="8" pos:column="52"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="9" pos:column="9">int<pos:position pos:line="9" pos:column="12"/></name></type> <name pos:line="9" pos:column="13">i<pos:position pos:line="9" pos:column="14"/></name></decl>;<pos:position pos:line="9" pos:column="15"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="10" pos:column="9">int<pos:position pos:line="10" pos:column="12"/></name></type> <name pos:line="10" pos:column="13">rc<pos:position pos:line="10" pos:column="15"/></name> <init pos:line="10" pos:column="16">= <expr><literal type="number" pos:line="10" pos:column="18">0<pos:position pos:line="10" pos:column="19"/></literal></expr></init></decl>;<pos:position pos:line="10" pos:column="20"/></decl_stmt>

	<comment type="block" pos:line="12" pos:column="9">/* AIX has no DEFAULT */</comment>
	<if pos:line="13" pos:column="9">if  <condition pos:line="13" pos:column="13">( <expr><name pos:line="13" pos:column="15">type<pos:position pos:line="13" pos:column="19"/></name> <operator pos:line="13" pos:column="20">==<pos:position pos:line="13" pos:column="22"/></operator> <name pos:line="13" pos:column="23">SMB_ACL_TYPE_DEFAULT<pos:position pos:line="13" pos:column="43"/></name></expr> )<pos:position pos:line="13" pos:column="45"/></condition><then pos:line="13" pos:column="45"> <block pos:line="13" pos:column="46">{
<cpp:ifdef pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">ifdef<pos:position pos:line="14" pos:column="7"/></cpp:directive> <name pos:line="14" pos:column="8">ENOTSUP<pos:position pos:line="14" pos:column="15"/></name></cpp:ifdef>
		<expr_stmt><expr><name pos:line="15" pos:column="17">errno<pos:position pos:line="15" pos:column="22"/></name> <operator pos:line="15" pos:column="23">=<pos:position pos:line="15" pos:column="24"/></operator> <name pos:line="15" pos:column="25">ENOTSUP<pos:position pos:line="15" pos:column="32"/></name></expr>;<pos:position pos:line="15" pos:column="33"/></expr_stmt>
<cpp:else pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">else<pos:position pos:line="16" pos:column="6"/></cpp:directive></cpp:else>
		<expr_stmt><expr><name pos:line="17" pos:column="17">errno<pos:position pos:line="17" pos:column="22"/></name> <operator pos:line="17" pos:column="23">=<pos:position pos:line="17" pos:column="24"/></operator> <name pos:line="17" pos:column="25">ENOSYS<pos:position pos:line="17" pos:column="31"/></name></expr>;<pos:position pos:line="17" pos:column="32"/></expr_stmt>
<cpp:endif pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">endif<pos:position pos:line="18" pos:column="7"/></cpp:directive></cpp:endif>
		<return pos:line="19" pos:column="17">return <expr><name pos:line="19" pos:column="24">NULL<pos:position pos:line="19" pos:column="28"/></name></expr>;<pos:position pos:line="19" pos:column="29"/></return>
	}<pos:position pos:line="20" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="22" pos:column="9">/* Get the acl using statacl */</comment>
 
	<expr_stmt><expr><call><name pos:line="24" pos:column="9">DEBUG<pos:position pos:line="24" pos:column="14"/></name><argument_list pos:line="24" pos:column="14">(<argument><expr><literal type="number" pos:line="24" pos:column="15">10<pos:position pos:line="24" pos:column="17"/></literal></expr></argument>,<argument><expr><operator pos:line="24" pos:column="18">(<pos:position pos:line="24" pos:column="19"/></operator><literal type="string" pos:line="24" pos:column="19">"Entering sys_acl_get_file\n"<pos:position pos:line="24" pos:column="48"/></literal><operator pos:line="24" pos:column="48">)<pos:position pos:line="24" pos:column="49"/></operator></expr></argument>)<pos:position pos:line="24" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="51"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="25" pos:column="9">DEBUG<pos:position pos:line="25" pos:column="14"/></name><argument_list pos:line="25" pos:column="14">(<argument><expr><literal type="number" pos:line="25" pos:column="15">10<pos:position pos:line="25" pos:column="17"/></literal></expr></argument>,<argument><expr><operator pos:line="25" pos:column="18">(<pos:position pos:line="25" pos:column="19"/></operator><literal type="string" pos:line="25" pos:column="19">"path_p is %s\n"<pos:position pos:line="25" pos:column="35"/></literal><operator pos:line="25" pos:column="35">,<pos:position pos:line="25" pos:column="36"/></operator><name pos:line="25" pos:column="36">path_p<pos:position pos:line="25" pos:column="42"/></name><operator pos:line="25" pos:column="42">)<pos:position pos:line="25" pos:column="43"/></operator></expr></argument>)<pos:position pos:line="25" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="45"/></expr_stmt>

	<expr_stmt><expr><name pos:line="27" pos:column="9">file_acl<pos:position pos:line="27" pos:column="17"/></name> <operator pos:line="27" pos:column="18">=<pos:position pos:line="27" pos:column="19"/></operator> <operator pos:line="27" pos:column="20">(<pos:position pos:line="27" pos:column="21"/></operator>struct <name pos:line="27" pos:column="28">acl<pos:position pos:line="27" pos:column="31"/></name> <operator pos:line="27" pos:column="32">*<pos:position pos:line="27" pos:column="33"/></operator><operator pos:line="27" pos:column="33">)<pos:position pos:line="27" pos:column="34"/></operator><call><name pos:line="27" pos:column="34">SMB_MALLOC<pos:position pos:line="27" pos:column="44"/></name><argument_list pos:line="27" pos:column="44">(<argument><expr><name pos:line="27" pos:column="45">BUFSIZ<pos:position pos:line="27" pos:column="51"/></name></expr></argument>)<pos:position pos:line="27" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="53"/></expr_stmt>
 
	<if pos:line="29" pos:column="9">if<condition pos:line="29" pos:column="11">(<expr><name pos:line="29" pos:column="12">file_acl<pos:position pos:line="29" pos:column="20"/></name> <operator pos:line="29" pos:column="21">==<pos:position pos:line="29" pos:column="23"/></operator> <name pos:line="29" pos:column="24">NULL<pos:position pos:line="29" pos:column="28"/></name></expr>)<pos:position pos:line="29" pos:column="29"/></condition><then pos:line="29" pos:column="29"> <block pos:line="29" pos:column="30">{
		<expr_stmt><expr><name pos:line="30" pos:column="17">errno<pos:position pos:line="30" pos:column="22"/></name><operator pos:line="30" pos:column="22">=<pos:position pos:line="30" pos:column="23"/></operator><name pos:line="30" pos:column="23">ENOMEM<pos:position pos:line="30" pos:column="29"/></name></expr>;<pos:position pos:line="30" pos:column="30"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="31" pos:column="17">DEBUG<pos:position pos:line="31" pos:column="22"/></name><argument_list pos:line="31" pos:column="22">(<argument><expr><literal type="number" pos:line="31" pos:column="23">0<pos:position pos:line="31" pos:column="24"/></literal></expr></argument>,<argument><expr><operator pos:line="31" pos:column="25">(<pos:position pos:line="31" pos:column="26"/></operator><literal type="string" pos:line="31" pos:column="26">"Error in AIX sys_acl_get_file: %d\n"<pos:position pos:line="31" pos:column="63"/></literal><operator pos:line="31" pos:column="63">,<pos:position pos:line="31" pos:column="64"/></operator><name pos:line="31" pos:column="64">errno<pos:position pos:line="31" pos:column="69"/></name><operator pos:line="31" pos:column="69">)<pos:position pos:line="31" pos:column="70"/></operator></expr></argument>)<pos:position pos:line="31" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="72"/></expr_stmt>
		<return pos:line="32" pos:column="17">return<expr><operator pos:line="32" pos:column="23">(<pos:position pos:line="32" pos:column="24"/></operator><name pos:line="32" pos:column="24">NULL<pos:position pos:line="32" pos:column="28"/></name><operator pos:line="32" pos:column="28">)<pos:position pos:line="32" pos:column="29"/></operator></expr>;<pos:position pos:line="32" pos:column="30"/></return>
	}<pos:position pos:line="33" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="35" pos:column="9">memset<pos:position pos:line="35" pos:column="15"/></name><argument_list pos:line="35" pos:column="15">(<argument><expr><name pos:line="35" pos:column="16">file_acl<pos:position pos:line="35" pos:column="24"/></name></expr></argument>,<argument><expr><literal type="number" pos:line="35" pos:column="25">0<pos:position pos:line="35" pos:column="26"/></literal></expr></argument>,<argument><expr><name pos:line="35" pos:column="27">BUFSIZ<pos:position pos:line="35" pos:column="33"/></name></expr></argument>)<pos:position pos:line="35" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="35"/></expr_stmt>

	<expr_stmt><expr><name pos:line="37" pos:column="9">rc<pos:position pos:line="37" pos:column="11"/></name> <operator pos:line="37" pos:column="12">=<pos:position pos:line="37" pos:column="13"/></operator> <call><name pos:line="37" pos:column="14">statacl<pos:position pos:line="37" pos:column="21"/></name><argument_list pos:line="37" pos:column="21">(<argument><expr><operator pos:line="37" pos:column="22">(<pos:position pos:line="37" pos:column="23"/></operator><name pos:line="37" pos:column="23">char<pos:position pos:line="37" pos:column="27"/></name> <operator pos:line="37" pos:column="28">*<pos:position pos:line="37" pos:column="29"/></operator><operator pos:line="37" pos:column="29">)<pos:position pos:line="37" pos:column="30"/></operator><name pos:line="37" pos:column="30">path_p<pos:position pos:line="37" pos:column="36"/></name></expr></argument>,<argument><expr><literal type="number" pos:line="37" pos:column="37">0<pos:position pos:line="37" pos:column="38"/></literal></expr></argument>,<argument><expr><name pos:line="37" pos:column="39">file_acl<pos:position pos:line="37" pos:column="47"/></name></expr></argument>,<argument><expr><name pos:line="37" pos:column="48">BUFSIZ<pos:position pos:line="37" pos:column="54"/></name></expr></argument>)<pos:position pos:line="37" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="56"/></expr_stmt>
	<if pos:line="38" pos:column="9">if<condition pos:line="38" pos:column="11">(<expr><name pos:line="38" pos:column="12">rc<pos:position pos:line="38" pos:column="14"/></name> <operator pos:line="38" pos:column="15">==<pos:position pos:line="38" pos:column="17"/></operator> <operator pos:line="38" pos:column="18">-<pos:position pos:line="38" pos:column="19"/></operator><literal type="number" pos:line="38" pos:column="19">1<pos:position pos:line="38" pos:column="20"/></literal></expr>)<pos:position pos:line="38" pos:column="21"/></condition><then pos:line="38" pos:column="21"> <block pos:line="38" pos:column="22">{
		<expr_stmt><expr><call><name pos:line="39" pos:column="17">DEBUG<pos:position pos:line="39" pos:column="22"/></name><argument_list pos:line="39" pos:column="22">(<argument><expr><literal type="number" pos:line="39" pos:column="23">0<pos:position pos:line="39" pos:column="24"/></literal></expr></argument>,<argument><expr><operator pos:line="39" pos:column="25">(<pos:position pos:line="39" pos:column="26"/></operator><literal type="string" pos:line="39" pos:column="26">"statacl returned %d with errno %d\n"<pos:position pos:line="39" pos:column="63"/></literal><operator pos:line="39" pos:column="63">,<pos:position pos:line="39" pos:column="64"/></operator><name pos:line="39" pos:column="64">rc<pos:position pos:line="39" pos:column="66"/></name><operator pos:line="39" pos:column="66">,<pos:position pos:line="39" pos:column="67"/></operator><name pos:line="39" pos:column="67">errno<pos:position pos:line="39" pos:column="72"/></name><operator pos:line="39" pos:column="72">)<pos:position pos:line="39" pos:column="73"/></operator></expr></argument>)<pos:position pos:line="39" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="75"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="40" pos:column="17">SAFE_FREE<pos:position pos:line="40" pos:column="26"/></name><argument_list pos:line="40" pos:column="26">(<argument><expr><name pos:line="40" pos:column="27">file_acl<pos:position pos:line="40" pos:column="35"/></name></expr></argument>)<pos:position pos:line="40" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="37"/></expr_stmt>
		<return pos:line="41" pos:column="17">return<expr><operator pos:line="41" pos:column="23">(<pos:position pos:line="41" pos:column="24"/></operator><name pos:line="41" pos:column="24">NULL<pos:position pos:line="41" pos:column="28"/></name><operator pos:line="41" pos:column="28">)<pos:position pos:line="41" pos:column="29"/></operator></expr>;<pos:position pos:line="41" pos:column="30"/></return>
	}<pos:position pos:line="42" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="44" pos:column="9">DEBUG<pos:position pos:line="44" pos:column="14"/></name><argument_list pos:line="44" pos:column="14">(<argument><expr><literal type="number" pos:line="44" pos:column="15">10<pos:position pos:line="44" pos:column="17"/></literal></expr></argument>,<argument><expr><operator pos:line="44" pos:column="18">(<pos:position pos:line="44" pos:column="19"/></operator><literal type="string" pos:line="44" pos:column="19">"Got facl and returned it\n"<pos:position pos:line="44" pos:column="47"/></literal><operator pos:line="44" pos:column="47">)<pos:position pos:line="44" pos:column="48"/></operator></expr></argument>)<pos:position pos:line="44" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="50"/></expr_stmt>

	<comment type="block" pos:line="46" pos:column="9">/* Point to the first acl entry in the acl */</comment>
	<expr_stmt><expr><name pos:line="47" pos:column="9">acl_entry<pos:position pos:line="47" pos:column="18"/></name> <operator pos:line="47" pos:column="19">=<pos:position pos:line="47" pos:column="20"/></operator>  <name><name pos:line="47" pos:column="22">file_acl<pos:position pos:line="47" pos:column="30"/></name><operator pos:line="47" pos:column="30">-&gt;<pos:position pos:line="47" pos:column="35"/></operator><name pos:line="47" pos:column="32">acl_ext<pos:position pos:line="47" pos:column="39"/></name></name></expr>;<pos:position pos:line="47" pos:column="40"/></expr_stmt>

	<comment type="block" pos:line="49" pos:column="9">/* Begin setting up the head of the linked list *
	 * that will be used for the storing the acl    *
	 * in a way that is useful for the posix_acls.c *
	 * code.                                          */</comment>

	<expr_stmt><expr><name pos:line="54" pos:column="9">acl_entry_link_head<pos:position pos:line="54" pos:column="28"/></name> <operator pos:line="54" pos:column="29">=<pos:position pos:line="54" pos:column="30"/></operator> <name pos:line="54" pos:column="31">acl_entry_link<pos:position pos:line="54" pos:column="45"/></name> <operator pos:line="54" pos:column="46">=<pos:position pos:line="54" pos:column="47"/></operator> <call><name pos:line="54" pos:column="48">sys_acl_init<pos:position pos:line="54" pos:column="60"/></name><argument_list pos:line="54" pos:column="60">(<argument><expr><literal type="number" pos:line="54" pos:column="61">0<pos:position pos:line="54" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="54" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="64"/></expr_stmt>
	<if pos:line="55" pos:column="9">if<condition pos:line="55" pos:column="11">(<expr><name pos:line="55" pos:column="12">acl_entry_link_head<pos:position pos:line="55" pos:column="31"/></name> <operator pos:line="55" pos:column="32">==<pos:position pos:line="55" pos:column="34"/></operator> <name pos:line="55" pos:column="35">NULL<pos:position pos:line="55" pos:column="39"/></name></expr>)<pos:position pos:line="55" pos:column="40"/></condition><then pos:line="55" pos:column="40">
		<block type="pseudo"><return pos:line="56" pos:column="17">return<expr><operator pos:line="56" pos:column="23">(<pos:position pos:line="56" pos:column="24"/></operator><name pos:line="56" pos:column="24">NULL<pos:position pos:line="56" pos:column="28"/></name><operator pos:line="56" pos:column="28">)<pos:position pos:line="56" pos:column="29"/></operator></expr>;<pos:position pos:line="56" pos:column="30"/></return></block></then></if>

	<expr_stmt><expr><name><name pos:line="58" pos:column="9">acl_entry_link<pos:position pos:line="58" pos:column="23"/></name><operator pos:line="58" pos:column="23">-&gt;<pos:position pos:line="58" pos:column="28"/></operator><name pos:line="58" pos:column="25">entryp<pos:position pos:line="58" pos:column="31"/></name></name> <operator pos:line="58" pos:column="32">=<pos:position pos:line="58" pos:column="33"/></operator> <call><name pos:line="58" pos:column="34">SMB_MALLOC_P<pos:position pos:line="58" pos:column="46"/></name><argument_list pos:line="58" pos:column="46">(<argument><expr pos:line="58" pos:column="47">struct <name pos:line="58" pos:column="54">new_acl_entry<pos:position pos:line="58" pos:column="67"/></name></expr></argument>)<pos:position pos:line="58" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="69"/></expr_stmt>
	<if pos:line="59" pos:column="9">if<condition pos:line="59" pos:column="11">(<expr><name><name pos:line="59" pos:column="12">acl_entry_link<pos:position pos:line="59" pos:column="26"/></name><operator pos:line="59" pos:column="26">-&gt;<pos:position pos:line="59" pos:column="31"/></operator><name pos:line="59" pos:column="28">entryp<pos:position pos:line="59" pos:column="34"/></name></name> <operator pos:line="59" pos:column="35">==<pos:position pos:line="59" pos:column="37"/></operator> <name pos:line="59" pos:column="38">NULL<pos:position pos:line="59" pos:column="42"/></name></expr>)<pos:position pos:line="59" pos:column="43"/></condition><then pos:line="59" pos:column="43"> <block pos:line="59" pos:column="44">{
		<expr_stmt><expr><call><name pos:line="60" pos:column="17">SAFE_FREE<pos:position pos:line="60" pos:column="26"/></name><argument_list pos:line="60" pos:column="26">(<argument><expr><name pos:line="60" pos:column="27">file_acl<pos:position pos:line="60" pos:column="35"/></name></expr></argument>)<pos:position pos:line="60" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="37"/></expr_stmt>
		<expr_stmt><expr><name pos:line="61" pos:column="17">errno<pos:position pos:line="61" pos:column="22"/></name> <operator pos:line="61" pos:column="23">=<pos:position pos:line="61" pos:column="24"/></operator> <name pos:line="61" pos:column="25">ENOMEM<pos:position pos:line="61" pos:column="31"/></name></expr>;<pos:position pos:line="61" pos:column="32"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="62" pos:column="17">DEBUG<pos:position pos:line="62" pos:column="22"/></name><argument_list pos:line="62" pos:column="22">(<argument><expr><literal type="number" pos:line="62" pos:column="23">0<pos:position pos:line="62" pos:column="24"/></literal></expr></argument>,<argument><expr><operator pos:line="62" pos:column="25">(<pos:position pos:line="62" pos:column="26"/></operator><literal type="string" pos:line="62" pos:column="26">"Error in AIX sys_acl_get_file is %d\n"<pos:position pos:line="62" pos:column="65"/></literal><operator pos:line="62" pos:column="65">,<pos:position pos:line="62" pos:column="66"/></operator><name pos:line="62" pos:column="66">errno<pos:position pos:line="62" pos:column="71"/></name><operator pos:line="62" pos:column="71">)<pos:position pos:line="62" pos:column="72"/></operator></expr></argument>)<pos:position pos:line="62" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="74"/></expr_stmt>
		<return pos:line="63" pos:column="17">return<expr><operator pos:line="63" pos:column="23">(<pos:position pos:line="63" pos:column="24"/></operator><name pos:line="63" pos:column="24">NULL<pos:position pos:line="63" pos:column="28"/></name><operator pos:line="63" pos:column="28">)<pos:position pos:line="63" pos:column="29"/></operator></expr>;<pos:position pos:line="63" pos:column="30"/></return>
	}<pos:position pos:line="64" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="66" pos:column="9">DEBUG<pos:position pos:line="66" pos:column="14"/></name><argument_list pos:line="66" pos:column="14">(<argument><expr><literal type="number" pos:line="66" pos:column="15">10<pos:position pos:line="66" pos:column="17"/></literal></expr></argument>,<argument><expr><operator pos:line="66" pos:column="18">(<pos:position pos:line="66" pos:column="19"/></operator><literal type="string" pos:line="66" pos:column="19">"acl_entry is %d\n"<pos:position pos:line="66" pos:column="38"/></literal><operator pos:line="66" pos:column="38">,<pos:position pos:line="66" pos:column="39"/></operator><name pos:line="66" pos:column="39">acl_entry<pos:position pos:line="66" pos:column="48"/></name><operator pos:line="66" pos:column="48">)<pos:position pos:line="66" pos:column="49"/></operator></expr></argument>)<pos:position pos:line="66" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="51"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="67" pos:column="9">DEBUG<pos:position pos:line="67" pos:column="14"/></name><argument_list pos:line="67" pos:column="14">(<argument><expr><literal type="number" pos:line="67" pos:column="15">10<pos:position pos:line="67" pos:column="17"/></literal></expr></argument>,<argument><expr><operator pos:line="67" pos:column="18">(<pos:position pos:line="67" pos:column="19"/></operator><literal type="string" pos:line="67" pos:column="19">"acl_last(file_acl) id %d\n"<pos:position pos:line="67" pos:column="47"/></literal><operator pos:line="67" pos:column="47">,<pos:position pos:line="67" pos:column="48"/></operator><call><name pos:line="67" pos:column="48">acl_last<pos:position pos:line="67" pos:column="56"/></name><argument_list pos:line="67" pos:column="56">(<argument><expr><name pos:line="67" pos:column="57">file_acl<pos:position pos:line="67" pos:column="65"/></name></expr></argument>)<pos:position pos:line="67" pos:column="66"/></argument_list></call><operator pos:line="67" pos:column="66">)<pos:position pos:line="67" pos:column="67"/></operator></expr></argument>)<pos:position pos:line="67" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="69"/></expr_stmt>

	<comment type="block" pos:line="69" pos:column="9">/* Check if the extended acl bit is on.   *
	 * If it isn't, do not show the           *
	 * contents of the acl since AIX intends *
	 * the extended info to remain unused     */</comment>

	<if pos:line="74" pos:column="9">if<condition pos:line="74" pos:column="11">(<expr><name><name pos:line="74" pos:column="12">file_acl<pos:position pos:line="74" pos:column="20"/></name><operator pos:line="74" pos:column="20">-&gt;<pos:position pos:line="74" pos:column="25"/></operator><name pos:line="74" pos:column="22">acl_mode<pos:position pos:line="74" pos:column="30"/></name></name> <operator pos:line="74" pos:column="31">&amp;<pos:position pos:line="74" pos:column="36"/></operator> <name pos:line="74" pos:column="33">S_IXACL<pos:position pos:line="74" pos:column="40"/></name></expr>)<pos:position pos:line="74" pos:column="41"/></condition><then><block pos:line="74" pos:column="41">{
		<comment type="block" pos:line="75" pos:column="17">/* while we are not pointing to the very end */</comment>
		<while pos:line="76" pos:column="17">while<condition pos:line="76" pos:column="22">(<expr><name pos:line="76" pos:column="23">acl_entry<pos:position pos:line="76" pos:column="32"/></name> <operator pos:line="76" pos:column="33">&lt;<pos:position pos:line="76" pos:column="37"/></operator> <call><name pos:line="76" pos:column="35">acl_last<pos:position pos:line="76" pos:column="43"/></name><argument_list pos:line="76" pos:column="43">(<argument><expr><name pos:line="76" pos:column="44">file_acl<pos:position pos:line="76" pos:column="52"/></name></expr></argument>)<pos:position pos:line="76" pos:column="53"/></argument_list></call></expr>)<pos:position pos:line="76" pos:column="54"/></condition> <block pos:line="76" pos:column="55">{
			<comment type="block" pos:line="77" pos:column="25">/* before we malloc anything, make sure this is  */</comment>
			<comment type="block" pos:line="78" pos:column="25">/* a valid acl entry and one that we want to map */</comment>
			<expr_stmt><expr><name pos:line="79" pos:column="25">idp<pos:position pos:line="79" pos:column="28"/></name> <operator pos:line="79" pos:column="29">=<pos:position pos:line="79" pos:column="30"/></operator> <call><name pos:line="79" pos:column="31">id_nxt<pos:position pos:line="79" pos:column="37"/></name><argument_list pos:line="79" pos:column="37">(<argument><expr><name><name pos:line="79" pos:column="38">acl_entry<pos:position pos:line="79" pos:column="47"/></name><operator pos:line="79" pos:column="47">-&gt;<pos:position pos:line="79" pos:column="52"/></operator><name pos:line="79" pos:column="49">ace_id<pos:position pos:line="79" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="79" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="57"/></expr_stmt>
			<if pos:line="80" pos:column="25">if<condition pos:line="80" pos:column="27">(<expr><operator pos:line="80" pos:column="28">(<pos:position pos:line="80" pos:column="29"/></operator><name><name pos:line="80" pos:column="29">acl_entry<pos:position pos:line="80" pos:column="38"/></name><operator pos:line="80" pos:column="38">-&gt;<pos:position pos:line="80" pos:column="43"/></operator><name pos:line="80" pos:column="40">ace_type<pos:position pos:line="80" pos:column="48"/></name></name> <operator pos:line="80" pos:column="49">==<pos:position pos:line="80" pos:column="51"/></operator> <name pos:line="80" pos:column="52">ACC_SPECIFY<pos:position pos:line="80" pos:column="63"/></name> <operator pos:line="80" pos:column="64">||<pos:position pos:line="80" pos:column="66"/></operator>
				<operator pos:line="81" pos:column="33">(<pos:position pos:line="81" pos:column="34"/></operator><name><name pos:line="81" pos:column="34">acl_entry<pos:position pos:line="81" pos:column="43"/></name><operator pos:line="81" pos:column="43">-&gt;<pos:position pos:line="81" pos:column="48"/></operator><name pos:line="81" pos:column="45">ace_type<pos:position pos:line="81" pos:column="53"/></name></name> <operator pos:line="81" pos:column="54">==<pos:position pos:line="81" pos:column="56"/></operator> <name pos:line="81" pos:column="57">ACC_PERMIT<pos:position pos:line="81" pos:column="67"/></name><operator pos:line="81" pos:column="67">)<pos:position pos:line="81" pos:column="68"/></operator><operator pos:line="81" pos:column="68">)<pos:position pos:line="81" pos:column="69"/></operator> <operator pos:line="81" pos:column="70">&amp;&amp;<pos:position pos:line="81" pos:column="80"/></operator> <operator pos:line="81" pos:column="73">(<pos:position pos:line="81" pos:column="74"/></operator><name pos:line="81" pos:column="74">idp<pos:position pos:line="81" pos:column="77"/></name> <operator pos:line="81" pos:column="78">!=<pos:position pos:line="81" pos:column="80"/></operator> <call><name pos:line="81" pos:column="81">id_last<pos:position pos:line="81" pos:column="88"/></name><argument_list pos:line="81" pos:column="88">(<argument><expr><name pos:line="81" pos:column="89">acl_entry<pos:position pos:line="81" pos:column="98"/></name></expr></argument>)<pos:position pos:line="81" pos:column="99"/></argument_list></call><operator pos:line="81" pos:column="99">)<pos:position pos:line="81" pos:column="100"/></operator></expr>)<pos:position pos:line="81" pos:column="101"/></condition><then pos:line="81" pos:column="101"> <block pos:line="81" pos:column="102">{
					<expr_stmt><expr><name pos:line="82" pos:column="41">acl_entry<pos:position pos:line="82" pos:column="50"/></name> <operator pos:line="82" pos:column="51">=<pos:position pos:line="82" pos:column="52"/></operator> <call><name pos:line="82" pos:column="53">acl_nxt<pos:position pos:line="82" pos:column="60"/></name><argument_list pos:line="82" pos:column="60">(<argument><expr><name pos:line="82" pos:column="61">acl_entry<pos:position pos:line="82" pos:column="70"/></name></expr></argument>)<pos:position pos:line="82" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="72"/></expr_stmt>
					<continue pos:line="83" pos:column="41">continue;<pos:position pos:line="83" pos:column="50"/></continue>
			}<pos:position pos:line="84" pos:column="26"/></block></then></if>

			<expr_stmt><expr><name pos:line="86" pos:column="25">idp<pos:position pos:line="86" pos:column="28"/></name> <operator pos:line="86" pos:column="29">=<pos:position pos:line="86" pos:column="30"/></operator> <name><name pos:line="86" pos:column="31">acl_entry<pos:position pos:line="86" pos:column="40"/></name><operator pos:line="86" pos:column="40">-&gt;<pos:position pos:line="86" pos:column="45"/></operator><name pos:line="86" pos:column="42">ace_id<pos:position pos:line="86" pos:column="48"/></name></name></expr>;<pos:position pos:line="86" pos:column="49"/></expr_stmt>

			<comment type="block" pos:line="88" pos:column="25">/* Check if this is the first entry in the linked list. *
			 * The first entry needs to keep prevp pointing to NULL *
			 * and already has entryp allocated.                  */</comment>

			<if pos:line="92" pos:column="25">if<condition pos:line="92" pos:column="27">(<expr><name><name pos:line="92" pos:column="28">acl_entry_link_head<pos:position pos:line="92" pos:column="47"/></name><operator pos:line="92" pos:column="47">-&gt;<pos:position pos:line="92" pos:column="52"/></operator><name pos:line="92" pos:column="49">count<pos:position pos:line="92" pos:column="54"/></name></name> <operator pos:line="92" pos:column="55">!=<pos:position pos:line="92" pos:column="57"/></operator> <literal type="number" pos:line="92" pos:column="58">0<pos:position pos:line="92" pos:column="59"/></literal></expr>)<pos:position pos:line="92" pos:column="60"/></condition><then pos:line="92" pos:column="60"> <block pos:line="92" pos:column="61">{
				<expr_stmt><expr><name><name pos:line="93" pos:column="33">acl_entry_link<pos:position pos:line="93" pos:column="47"/></name><operator pos:line="93" pos:column="47">-&gt;<pos:position pos:line="93" pos:column="52"/></operator><name pos:line="93" pos:column="49">nextp<pos:position pos:line="93" pos:column="54"/></name></name> <operator pos:line="93" pos:column="55">=<pos:position pos:line="93" pos:column="56"/></operator> <call><name pos:line="93" pos:column="57">SMB_MALLOC_P<pos:position pos:line="93" pos:column="69"/></name><argument_list pos:line="93" pos:column="69">(<argument><expr pos:line="93" pos:column="70">struct <name pos:line="93" pos:column="77">acl_entry_link<pos:position pos:line="93" pos:column="91"/></name></expr></argument>)<pos:position pos:line="93" pos:column="92"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="93"/></expr_stmt>

				<if pos:line="95" pos:column="33">if<condition pos:line="95" pos:column="35">(<expr><name><name pos:line="95" pos:column="36">acl_entry_link<pos:position pos:line="95" pos:column="50"/></name><operator pos:line="95" pos:column="50">-&gt;<pos:position pos:line="95" pos:column="55"/></operator><name pos:line="95" pos:column="52">nextp<pos:position pos:line="95" pos:column="57"/></name></name> <operator pos:line="95" pos:column="58">==<pos:position pos:line="95" pos:column="60"/></operator> <name pos:line="95" pos:column="61">NULL<pos:position pos:line="95" pos:column="65"/></name></expr>)<pos:position pos:line="95" pos:column="66"/></condition><then pos:line="95" pos:column="66"> <block pos:line="95" pos:column="67">{
					<expr_stmt><expr><call><name pos:line="96" pos:column="41">SAFE_FREE<pos:position pos:line="96" pos:column="50"/></name><argument_list pos:line="96" pos:column="50">(<argument><expr><name pos:line="96" pos:column="51">file_acl<pos:position pos:line="96" pos:column="59"/></name></expr></argument>)<pos:position pos:line="96" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="61"/></expr_stmt>
					<expr_stmt><expr><name pos:line="97" pos:column="41">errno<pos:position pos:line="97" pos:column="46"/></name> <operator pos:line="97" pos:column="47">=<pos:position pos:line="97" pos:column="48"/></operator> <name pos:line="97" pos:column="49">ENOMEM<pos:position pos:line="97" pos:column="55"/></name></expr>;<pos:position pos:line="97" pos:column="56"/></expr_stmt>
					<expr_stmt><expr><call><name pos:line="98" pos:column="41">DEBUG<pos:position pos:line="98" pos:column="46"/></name><argument_list pos:line="98" pos:column="46">(<argument><expr><literal type="number" pos:line="98" pos:column="47">0<pos:position pos:line="98" pos:column="48"/></literal></expr></argument>,<argument><expr><operator pos:line="98" pos:column="49">(<pos:position pos:line="98" pos:column="50"/></operator><literal type="string" pos:line="98" pos:column="50">"Error in AIX sys_acl_get_file is %d\n"<pos:position pos:line="98" pos:column="89"/></literal><operator pos:line="98" pos:column="89">,<pos:position pos:line="98" pos:column="90"/></operator><name pos:line="98" pos:column="90">errno<pos:position pos:line="98" pos:column="95"/></name><operator pos:line="98" pos:column="95">)<pos:position pos:line="98" pos:column="96"/></operator></expr></argument>)<pos:position pos:line="98" pos:column="97"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="98"/></expr_stmt>
					<return pos:line="99" pos:column="41">return<expr><operator pos:line="99" pos:column="47">(<pos:position pos:line="99" pos:column="48"/></operator><name pos:line="99" pos:column="48">NULL<pos:position pos:line="99" pos:column="52"/></name><operator pos:line="99" pos:column="52">)<pos:position pos:line="99" pos:column="53"/></operator></expr>;<pos:position pos:line="99" pos:column="54"/></return>
				}<pos:position pos:line="100" pos:column="34"/></block></then></if>

				<expr_stmt><expr><name><name pos:line="102" pos:column="33">acl_entry_link<pos:position pos:line="102" pos:column="47"/></name><operator pos:line="102" pos:column="47">-&gt;<pos:position pos:line="102" pos:column="52"/></operator><name pos:line="102" pos:column="49">nextp<pos:position pos:line="102" pos:column="54"/></name><operator pos:line="102" pos:column="54">-&gt;<pos:position pos:line="102" pos:column="59"/></operator><name pos:line="102" pos:column="56">prevp<pos:position pos:line="102" pos:column="61"/></name></name> <operator pos:line="102" pos:column="62">=<pos:position pos:line="102" pos:column="63"/></operator> <name pos:line="102" pos:column="64">acl_entry_link<pos:position pos:line="102" pos:column="78"/></name></expr>;<pos:position pos:line="102" pos:column="79"/></expr_stmt>
				<expr_stmt><expr><name pos:line="103" pos:column="33">acl_entry_link<pos:position pos:line="103" pos:column="47"/></name> <operator pos:line="103" pos:column="48">=<pos:position pos:line="103" pos:column="49"/></operator> <name><name pos:line="103" pos:column="50">acl_entry_link<pos:position pos:line="103" pos:column="64"/></name><operator pos:line="103" pos:column="64">-&gt;<pos:position pos:line="103" pos:column="69"/></operator><name pos:line="103" pos:column="66">nextp<pos:position pos:line="103" pos:column="71"/></name></name></expr>;<pos:position pos:line="103" pos:column="72"/></expr_stmt>
				<expr_stmt><expr><name><name pos:line="104" pos:column="33">acl_entry_link<pos:position pos:line="104" pos:column="47"/></name><operator pos:line="104" pos:column="47">-&gt;<pos:position pos:line="104" pos:column="52"/></operator><name pos:line="104" pos:column="49">entryp<pos:position pos:line="104" pos:column="55"/></name></name> <operator pos:line="104" pos:column="56">=<pos:position pos:line="104" pos:column="57"/></operator> <call><name pos:line="104" pos:column="58">SMB_MALLOC_P<pos:position pos:line="104" pos:column="70"/></name><argument_list pos:line="104" pos:column="70">(<argument><expr pos:line="104" pos:column="71">struct <name pos:line="104" pos:column="78">new_acl_entry<pos:position pos:line="104" pos:column="91"/></name></expr></argument>)<pos:position pos:line="104" pos:column="92"/></argument_list></call></expr>;<pos:position pos:line="104" pos:column="93"/></expr_stmt>
				<if pos:line="105" pos:column="33">if<condition pos:line="105" pos:column="35">(<expr><name><name pos:line="105" pos:column="36">acl_entry_link<pos:position pos:line="105" pos:column="50"/></name><operator pos:line="105" pos:column="50">-&gt;<pos:position pos:line="105" pos:column="55"/></operator><name pos:line="105" pos:column="52">entryp<pos:position pos:line="105" pos:column="58"/></name></name> <operator pos:line="105" pos:column="59">==<pos:position pos:line="105" pos:column="61"/></operator> <name pos:line="105" pos:column="62">NULL<pos:position pos:line="105" pos:column="66"/></name></expr>)<pos:position pos:line="105" pos:column="67"/></condition><then pos:line="105" pos:column="67"> <block pos:line="105" pos:column="68">{
					<expr_stmt><expr><call><name pos:line="106" pos:column="41">SAFE_FREE<pos:position pos:line="106" pos:column="50"/></name><argument_list pos:line="106" pos:column="50">(<argument><expr><name pos:line="106" pos:column="51">file_acl<pos:position pos:line="106" pos:column="59"/></name></expr></argument>)<pos:position pos:line="106" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="106" pos:column="61"/></expr_stmt>
					<expr_stmt><expr><name pos:line="107" pos:column="41">errno<pos:position pos:line="107" pos:column="46"/></name> <operator pos:line="107" pos:column="47">=<pos:position pos:line="107" pos:column="48"/></operator> <name pos:line="107" pos:column="49">ENOMEM<pos:position pos:line="107" pos:column="55"/></name></expr>;<pos:position pos:line="107" pos:column="56"/></expr_stmt>
					<expr_stmt><expr><call><name pos:line="108" pos:column="41">DEBUG<pos:position pos:line="108" pos:column="46"/></name><argument_list pos:line="108" pos:column="46">(<argument><expr><literal type="number" pos:line="108" pos:column="47">0<pos:position pos:line="108" pos:column="48"/></literal></expr></argument>,<argument><expr><operator pos:line="108" pos:column="49">(<pos:position pos:line="108" pos:column="50"/></operator><literal type="string" pos:line="108" pos:column="50">"Error in AIX sys_acl_get_file is %d\n"<pos:position pos:line="108" pos:column="89"/></literal><operator pos:line="108" pos:column="89">,<pos:position pos:line="108" pos:column="90"/></operator><name pos:line="108" pos:column="90">errno<pos:position pos:line="108" pos:column="95"/></name><operator pos:line="108" pos:column="95">)<pos:position pos:line="108" pos:column="96"/></operator></expr></argument>)<pos:position pos:line="108" pos:column="97"/></argument_list></call></expr>;<pos:position pos:line="108" pos:column="98"/></expr_stmt>
					<return pos:line="109" pos:column="41">return<expr><operator pos:line="109" pos:column="47">(<pos:position pos:line="109" pos:column="48"/></operator><name pos:line="109" pos:column="48">NULL<pos:position pos:line="109" pos:column="52"/></name><operator pos:line="109" pos:column="52">)<pos:position pos:line="109" pos:column="53"/></operator></expr>;<pos:position pos:line="109" pos:column="54"/></return>
				}<pos:position pos:line="110" pos:column="34"/></block></then></if>
				<expr_stmt><expr><name><name pos:line="111" pos:column="33">acl_entry_link<pos:position pos:line="111" pos:column="47"/></name><operator pos:line="111" pos:column="47">-&gt;<pos:position pos:line="111" pos:column="52"/></operator><name pos:line="111" pos:column="49">nextp<pos:position pos:line="111" pos:column="54"/></name></name> <operator pos:line="111" pos:column="55">=<pos:position pos:line="111" pos:column="56"/></operator> <name pos:line="111" pos:column="57">NULL<pos:position pos:line="111" pos:column="61"/></name></expr>;<pos:position pos:line="111" pos:column="62"/></expr_stmt>
			}<pos:position pos:line="112" pos:column="26"/></block></then></if>

			<expr_stmt><expr><name><name pos:line="114" pos:column="25">acl_entry_link<pos:position pos:line="114" pos:column="39"/></name><operator pos:line="114" pos:column="39">-&gt;<pos:position pos:line="114" pos:column="44"/></operator><name pos:line="114" pos:column="41">entryp<pos:position pos:line="114" pos:column="47"/></name><operator pos:line="114" pos:column="47">-&gt;<pos:position pos:line="114" pos:column="52"/></operator><name pos:line="114" pos:column="49">ace_len<pos:position pos:line="114" pos:column="56"/></name></name> <operator pos:line="114" pos:column="57">=<pos:position pos:line="114" pos:column="58"/></operator> <name><name pos:line="114" pos:column="59">acl_entry<pos:position pos:line="114" pos:column="68"/></name><operator pos:line="114" pos:column="68">-&gt;<pos:position pos:line="114" pos:column="73"/></operator><name pos:line="114" pos:column="70">ace_len<pos:position pos:line="114" pos:column="77"/></name></name></expr>;<pos:position pos:line="114" pos:column="78"/></expr_stmt>

			<comment type="block" pos:line="116" pos:column="25">/* Don't really need this since all types are going *
			 * to be specified but, it's better than leaving it 0 */</comment>

			<expr_stmt><expr><name><name pos:line="119" pos:column="25">acl_entry_link<pos:position pos:line="119" pos:column="39"/></name><operator pos:line="119" pos:column="39">-&gt;<pos:position pos:line="119" pos:column="44"/></operator><name pos:line="119" pos:column="41">entryp<pos:position pos:line="119" pos:column="47"/></name><operator pos:line="119" pos:column="47">-&gt;<pos:position pos:line="119" pos:column="52"/></operator><name pos:line="119" pos:column="49">ace_type<pos:position pos:line="119" pos:column="57"/></name></name> <operator pos:line="119" pos:column="58">=<pos:position pos:line="119" pos:column="59"/></operator> <name><name pos:line="119" pos:column="60">acl_entry<pos:position pos:line="119" pos:column="69"/></name><operator pos:line="119" pos:column="69">-&gt;<pos:position pos:line="119" pos:column="74"/></operator><name pos:line="119" pos:column="71">ace_type<pos:position pos:line="119" pos:column="79"/></name></name></expr>;<pos:position pos:line="119" pos:column="80"/></expr_stmt>
 
			<expr_stmt><expr><name><name pos:line="121" pos:column="25">acl_entry_link<pos:position pos:line="121" pos:column="39"/></name><operator pos:line="121" pos:column="39">-&gt;<pos:position pos:line="121" pos:column="44"/></operator><name pos:line="121" pos:column="41">entryp<pos:position pos:line="121" pos:column="47"/></name><operator pos:line="121" pos:column="47">-&gt;<pos:position pos:line="121" pos:column="52"/></operator><name pos:line="121" pos:column="49">ace_access<pos:position pos:line="121" pos:column="59"/></name></name> <operator pos:line="121" pos:column="60">=<pos:position pos:line="121" pos:column="61"/></operator> <name><name pos:line="121" pos:column="62">acl_entry<pos:position pos:line="121" pos:column="71"/></name><operator pos:line="121" pos:column="71">-&gt;<pos:position pos:line="121" pos:column="76"/></operator><name pos:line="121" pos:column="73">ace_access<pos:position pos:line="121" pos:column="83"/></name></name></expr>;<pos:position pos:line="121" pos:column="84"/></expr_stmt>
 
			<expr_stmt><expr><call><name pos:line="123" pos:column="25">memcpy<pos:position pos:line="123" pos:column="31"/></name><argument_list pos:line="123" pos:column="31">(<argument><expr><name><name pos:line="123" pos:column="32">acl_entry_link<pos:position pos:line="123" pos:column="46"/></name><operator pos:line="123" pos:column="46">-&gt;<pos:position pos:line="123" pos:column="51"/></operator><name pos:line="123" pos:column="48">entryp<pos:position pos:line="123" pos:column="54"/></name><operator pos:line="123" pos:column="54">-&gt;<pos:position pos:line="123" pos:column="59"/></operator><name pos:line="123" pos:column="56">ace_id<pos:position pos:line="123" pos:column="62"/></name></name></expr></argument>,<argument><expr><name pos:line="123" pos:column="63">idp<pos:position pos:line="123" pos:column="66"/></name></expr></argument>,<argument><expr><sizeof pos:line="123" pos:column="67">sizeof<argument_list pos:line="123" pos:column="73">(<argument><expr pos:line="123" pos:column="74">struct <name pos:line="123" pos:column="81">ace_id<pos:position pos:line="123" pos:column="87"/></name></expr></argument>)<pos:position pos:line="123" pos:column="88"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="123" pos:column="89"/></argument_list></call></expr>;<pos:position pos:line="123" pos:column="90"/></expr_stmt>

			<comment type="block" pos:line="125" pos:column="25">/* The access in the acl entries must be left shifted by *
			 * three bites, because they will ultimately be compared *
			 * to S_IRUSR, S_IWUSR, and S_IXUSR.                  */</comment>

			<switch pos:line="129" pos:column="25">switch<condition pos:line="129" pos:column="31">(<expr><name><name pos:line="129" pos:column="32">acl_entry<pos:position pos:line="129" pos:column="41"/></name><operator pos:line="129" pos:column="41">-&gt;<pos:position pos:line="129" pos:column="46"/></operator><name pos:line="129" pos:column="43">ace_type<pos:position pos:line="129" pos:column="51"/></name></name></expr>)<pos:position pos:line="129" pos:column="52"/></condition><block pos:line="129" pos:column="52">{
			<case pos:line="130" pos:column="25">case <expr><name pos:line="130" pos:column="30">ACC_PERMIT<pos:position pos:line="130" pos:column="40"/></name></expr>:<pos:position pos:line="130" pos:column="41"/></case>
			<case pos:line="131" pos:column="25">case <expr><name pos:line="131" pos:column="30">ACC_SPECIFY<pos:position pos:line="131" pos:column="41"/></name></expr>:<pos:position pos:line="131" pos:column="42"/></case>
				<expr_stmt><expr><name><name pos:line="132" pos:column="33">acl_entry_link<pos:position pos:line="132" pos:column="47"/></name><operator pos:line="132" pos:column="47">-&gt;<pos:position pos:line="132" pos:column="52"/></operator><name pos:line="132" pos:column="49">entryp<pos:position pos:line="132" pos:column="55"/></name><operator pos:line="132" pos:column="55">-&gt;<pos:position pos:line="132" pos:column="60"/></operator><name pos:line="132" pos:column="57">ace_access<pos:position pos:line="132" pos:column="67"/></name></name> <operator pos:line="132" pos:column="68">=<pos:position pos:line="132" pos:column="69"/></operator> <name><name pos:line="132" pos:column="70">acl_entry<pos:position pos:line="132" pos:column="79"/></name><operator pos:line="132" pos:column="79">-&gt;<pos:position pos:line="132" pos:column="84"/></operator><name pos:line="132" pos:column="81">ace_access<pos:position pos:line="132" pos:column="91"/></name></name></expr>;<pos:position pos:line="132" pos:column="92"/></expr_stmt>
				<expr_stmt><expr><name><name pos:line="133" pos:column="33">acl_entry_link<pos:position pos:line="133" pos:column="47"/></name><operator pos:line="133" pos:column="47">-&gt;<pos:position pos:line="133" pos:column="52"/></operator><name pos:line="133" pos:column="49">entryp<pos:position pos:line="133" pos:column="55"/></name><operator pos:line="133" pos:column="55">-&gt;<pos:position pos:line="133" pos:column="60"/></operator><name pos:line="133" pos:column="57">ace_access<pos:position pos:line="133" pos:column="67"/></name></name> <operator pos:line="133" pos:column="68">&lt;&lt;=<pos:position pos:line="133" pos:column="77"/></operator> <literal type="number" pos:line="133" pos:column="72">6<pos:position pos:line="133" pos:column="73"/></literal></expr>;<pos:position pos:line="133" pos:column="74"/></expr_stmt>
				<expr_stmt><expr><name><name pos:line="134" pos:column="33">acl_entry_link_head<pos:position pos:line="134" pos:column="52"/></name><operator pos:line="134" pos:column="52">-&gt;<pos:position pos:line="134" pos:column="57"/></operator><name pos:line="134" pos:column="54">count<pos:position pos:line="134" pos:column="59"/></name></name><operator pos:line="134" pos:column="59">++<pos:position pos:line="134" pos:column="61"/></operator></expr>;<pos:position pos:line="134" pos:column="62"/></expr_stmt>
				<break pos:line="135" pos:column="33">break;<pos:position pos:line="135" pos:column="39"/></break>
			<case pos:line="136" pos:column="25">case <expr><name pos:line="136" pos:column="30">ACC_DENY<pos:position pos:line="136" pos:column="38"/></name></expr>:<pos:position pos:line="136" pos:column="39"/></case></block></switch></block></while></block></then></if></block></function>
				<comment type="block" pos:line="137" pos:column="33">/* Since there is no way to return a DENY acl entry *
				 * change to PERM</comment></unit>
