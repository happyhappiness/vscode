<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_184_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">write_vstring<pos:position pos:line="1" pos:column="19"/></name><parameter_list pos:line="1" pos:column="19">(<parameter><decl><type><name pos:line="1" pos:column="20">int<pos:position pos:line="1" pos:column="23"/></name></type> <name pos:line="1" pos:column="24">f<pos:position pos:line="1" pos:column="25"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="27">const<pos:position pos:line="1" pos:column="32"/></specifier> <name pos:line="1" pos:column="33">char<pos:position pos:line="1" pos:column="37"/></name> <modifier pos:line="1" pos:column="38">*<pos:position pos:line="1" pos:column="39"/></modifier></type><name pos:line="1" pos:column="39">str<pos:position pos:line="1" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="44">int<pos:position pos:line="1" pos:column="47"/></name></type> <name pos:line="1" pos:column="48">len<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="52"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">uchar<pos:position pos:line="3" pos:column="14"/></name></type> <name><name pos:line="3" pos:column="15">lenbuf<pos:position pos:line="3" pos:column="21"/></name><index pos:line="3" pos:column="21">[<expr><literal type="number" pos:line="3" pos:column="22">3<pos:position pos:line="3" pos:column="23"/></literal></expr>]<pos:position pos:line="3" pos:column="24"/></index></name></decl>, <modifier pos:line="3" pos:column="26">*<pos:position pos:line="3" pos:column="27"/></modifier><decl><type ref="prev"/><name pos:line="3" pos:column="27">lb<pos:position pos:line="3" pos:column="29"/></name> <init pos:line="3" pos:column="30">= <expr><name pos:line="3" pos:column="32">lenbuf<pos:position pos:line="3" pos:column="38"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="39"/></decl_stmt>

	<if pos:line="5" pos:column="9">if <condition pos:line="5" pos:column="12">(<expr><name pos:line="5" pos:column="13">len<pos:position pos:line="5" pos:column="16"/></name> <operator pos:line="5" pos:column="17">&gt;<pos:position pos:line="5" pos:column="21"/></operator> <literal type="number" pos:line="5" pos:column="19">0x7F<pos:position pos:line="5" pos:column="23"/></literal></expr>)<pos:position pos:line="5" pos:column="24"/></condition><then pos:line="5" pos:column="24"> <block pos:line="5" pos:column="25">{
		<if pos:line="6" pos:column="17">if <condition pos:line="6" pos:column="20">(<expr><name pos:line="6" pos:column="21">len<pos:position pos:line="6" pos:column="24"/></name> <operator pos:line="6" pos:column="25">&gt;<pos:position pos:line="6" pos:column="29"/></operator> <literal type="number" pos:line="6" pos:column="27">0x7FFF<pos:position pos:line="6" pos:column="33"/></literal></expr>)<pos:position pos:line="6" pos:column="34"/></condition><then pos:line="6" pos:column="34"> <block pos:line="6" pos:column="35">{
			<expr_stmt><expr><call><name pos:line="7" pos:column="25">rprintf<pos:position pos:line="7" pos:column="32"/></name><argument_list pos:line="7" pos:column="32">(<argument><expr><name pos:line="7" pos:column="33">FERROR<pos:position pos:line="7" pos:column="39"/></name></expr></argument>,
				<argument><expr><literal type="string" pos:line="8" pos:column="33">"attempting to send over-long vstring (%d &gt; %d)\n"<pos:position pos:line="8" pos:column="86"/></literal></expr></argument>,
				<argument><expr><name pos:line="9" pos:column="33">len<pos:position pos:line="9" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="9" pos:column="38">0x7FFF<pos:position pos:line="9" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="46"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="10" pos:column="25">exit_cleanup<pos:position pos:line="10" pos:column="37"/></name><argument_list pos:line="10" pos:column="37">(<argument><expr><name pos:line="10" pos:column="38">RERR_PROTOCOL<pos:position pos:line="10" pos:column="51"/></name></expr></argument>)<pos:position pos:line="10" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="53"/></expr_stmt>
		}<pos:position pos:line="11" pos:column="18"/></block></then></if>
		<expr_stmt><expr><operator pos:line="12" pos:column="17">*<pos:position pos:line="12" pos:column="18"/></operator><name pos:line="12" pos:column="18">lb<pos:position pos:line="12" pos:column="20"/></name><operator pos:line="12" pos:column="20">++<pos:position pos:line="12" pos:column="22"/></operator> <operator pos:line="12" pos:column="23">=<pos:position pos:line="12" pos:column="24"/></operator> <name pos:line="12" pos:column="25">len<pos:position pos:line="12" pos:column="28"/></name> <operator pos:line="12" pos:column="29">/<pos:position pos:line="12" pos:column="30"/></operator> <literal type="number" pos:line="12" pos:column="31">0x100<pos:position pos:line="12" pos:column="36"/></literal> <operator pos:line="12" pos:column="37">+<pos:position pos:line="12" pos:column="38"/></operator> <literal type="number" pos:line="12" pos:column="39">0x80<pos:position pos:line="12" pos:column="43"/></literal></expr>;<pos:position pos:line="12" pos:column="44"/></expr_stmt>
	}<pos:position pos:line="13" pos:column="10"/></block></then></if>
	<expr_stmt><expr><operator pos:line="14" pos:column="9">*<pos:position pos:line="14" pos:column="10"/></operator><name pos:line="14" pos:column="10">lb<pos:position pos:line="14" pos:column="12"/></name> <operator pos:line="14" pos:column="13">=<pos:position pos:line="14" pos:column="14"/></operator> <name pos:line="14" pos:column="15">len<pos:position pos:line="14" pos:column="18"/></name></expr>;<pos:position pos:line="14" pos:column="19"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="16" pos:column="9">write_buf<pos:position pos:line="16" pos:column="18"/></name><argument_list pos:line="16" pos:column="18">(<argument><expr><name pos:line="16" pos:column="19">f<pos:position pos:line="16" pos:column="20"/></name></expr></argument>, <argument><expr><operator pos:line="16" pos:column="22">(<pos:position pos:line="16" pos:column="23"/></operator><name pos:line="16" pos:column="23">char<pos:position pos:line="16" pos:column="27"/></name><operator pos:line="16" pos:column="27">*<pos:position pos:line="16" pos:column="28"/></operator><operator pos:line="16" pos:column="28">)<pos:position pos:line="16" pos:column="29"/></operator><name pos:line="16" pos:column="29">lenbuf<pos:position pos:line="16" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="37">lb<pos:position pos:line="16" pos:column="39"/></name> <operator pos:line="16" pos:column="40">-<pos:position pos:line="16" pos:column="41"/></operator> <name pos:line="16" pos:column="42">lenbuf<pos:position pos:line="16" pos:column="48"/></name> <operator pos:line="16" pos:column="49">+<pos:position pos:line="16" pos:column="50"/></operator> <literal type="number" pos:line="16" pos:column="51">1<pos:position pos:line="16" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="54"/></expr_stmt>
	<if pos:line="17" pos:column="9">if <condition pos:line="17" pos:column="12">(<expr><name pos:line="17" pos:column="13">len<pos:position pos:line="17" pos:column="16"/></name></expr>)<pos:position pos:line="17" pos:column="17"/></condition><then pos:line="17" pos:column="17">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="18" pos:column="17">write_buf<pos:position pos:line="18" pos:column="26"/></name><argument_list pos:line="18" pos:column="26">(<argument><expr><name pos:line="18" pos:column="27">f<pos:position pos:line="18" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="30">str<pos:position pos:line="18" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="35">len<pos:position pos:line="18" pos:column="38"/></name></expr></argument>)<pos:position pos:line="18" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="40"/></expr_stmt></block></then></if>
}<pos:position pos:line="19" pos:column="2"/></block></function></unit>
