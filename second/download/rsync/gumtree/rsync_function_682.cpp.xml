<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_function_682.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">start_socket_client<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name pos:line="1" pos:column="25">char<pos:position pos:line="1" pos:column="29"/></name> <modifier pos:line="1" pos:column="30">*<pos:position pos:line="1" pos:column="31"/></modifier></type><name pos:line="1" pos:column="31">host<pos:position pos:line="1" pos:column="35"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="37">char<pos:position pos:line="1" pos:column="41"/></name> <modifier pos:line="1" pos:column="42">*<pos:position pos:line="1" pos:column="43"/></modifier></type><name pos:line="1" pos:column="43">path<pos:position pos:line="1" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="49">int<pos:position pos:line="1" pos:column="52"/></name></type> <name pos:line="1" pos:column="53">argc<pos:position pos:line="1" pos:column="57"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="59">char<pos:position pos:line="1" pos:column="63"/></name> <modifier pos:line="1" pos:column="64">*<pos:position pos:line="1" pos:column="65"/></modifier></type><name><name pos:line="1" pos:column="65">argv<pos:position pos:line="1" pos:column="69"/></name><index pos:line="1" pos:column="69">[]<pos:position pos:line="1" pos:column="71"/></index></name></decl></parameter>)<pos:position pos:line="1" pos:column="72"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">fd<pos:position pos:line="3" pos:column="15"/></name></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="17">i<pos:position pos:line="3" pos:column="18"/></name></decl>;<pos:position pos:line="3" pos:column="19"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier></type><name><name pos:line="4" pos:column="15">sargs<pos:position pos:line="4" pos:column="20"/></name><index pos:line="4" pos:column="20">[<expr><name pos:line="4" pos:column="21">MAX_ARGS<pos:position pos:line="4" pos:column="29"/></name></expr>]<pos:position pos:line="4" pos:column="30"/></index></name></decl>;<pos:position pos:line="4" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">sargc<pos:position pos:line="5" pos:column="18"/></name><init pos:line="5" pos:column="18">=<expr><literal type="number" pos:line="5" pos:column="19">0<pos:position pos:line="5" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="21"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">char<pos:position pos:line="6" pos:column="13"/></name></type> <name><name pos:line="6" pos:column="14">line<pos:position pos:line="6" pos:column="18"/></name><index pos:line="6" pos:column="18">[<expr><name pos:line="6" pos:column="19">MAXPATHLEN<pos:position pos:line="6" pos:column="29"/></name></expr>]<pos:position pos:line="6" pos:column="30"/></index></name></decl>;<pos:position pos:line="6" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">char<pos:position pos:line="7" pos:column="13"/></name> <modifier pos:line="7" pos:column="14">*<pos:position pos:line="7" pos:column="15"/></modifier></type><name pos:line="7" pos:column="15">p<pos:position pos:line="7" pos:column="16"/></name></decl>, <modifier pos:line="7" pos:column="18">*<pos:position pos:line="7" pos:column="19"/></modifier><decl><type ref="prev"/><name pos:line="7" pos:column="19">user<pos:position pos:line="7" pos:column="23"/></name><init pos:line="7" pos:column="23">=<expr><name pos:line="7" pos:column="24">NULL<pos:position pos:line="7" pos:column="28"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="29"/></decl_stmt>
	<decl_stmt><decl><specifier pos:line="8" pos:column="9">extern<pos:position pos:line="8" pos:column="15"/></specifier> <type><name pos:line="8" pos:column="16">int<pos:position pos:line="8" pos:column="19"/></name></type> <name pos:line="8" pos:column="20">remote_version<pos:position pos:line="8" pos:column="34"/></name></decl>;<pos:position pos:line="8" pos:column="35"/></decl_stmt>
	<decl_stmt><decl><specifier pos:line="9" pos:column="9">extern<pos:position pos:line="9" pos:column="15"/></specifier> <type><name pos:line="9" pos:column="16">int<pos:position pos:line="9" pos:column="19"/></name></type> <name pos:line="9" pos:column="20">am_sender<pos:position pos:line="9" pos:column="29"/></name></decl>;<pos:position pos:line="9" pos:column="30"/></decl_stmt>
	<decl_stmt><decl><specifier pos:line="10" pos:column="9">extern<pos:position pos:line="10" pos:column="15"/></specifier> <type><name pos:line="10" pos:column="16">char<pos:position pos:line="10" pos:column="20"/></name> <modifier pos:line="10" pos:column="21">*<pos:position pos:line="10" pos:column="22"/></modifier></type><name pos:line="10" pos:column="22">shell_cmd<pos:position pos:line="10" pos:column="31"/></name></decl>;<pos:position pos:line="10" pos:column="32"/></decl_stmt>
	<decl_stmt><decl><specifier pos:line="11" pos:column="9">extern<pos:position pos:line="11" pos:column="15"/></specifier> <type><name pos:line="11" pos:column="16">int<pos:position pos:line="11" pos:column="19"/></name></type> <name pos:line="11" pos:column="20">list_only<pos:position pos:line="11" pos:column="29"/></name></decl>;<pos:position pos:line="11" pos:column="30"/></decl_stmt>
	<decl_stmt><decl><specifier pos:line="12" pos:column="9">extern<pos:position pos:line="12" pos:column="15"/></specifier> <type><name pos:line="12" pos:column="16">int<pos:position pos:line="12" pos:column="19"/></name></type> <name pos:line="12" pos:column="20">kludge_around_eof<pos:position pos:line="12" pos:column="37"/></name></decl>;<pos:position pos:line="12" pos:column="38"/></decl_stmt>
	<decl_stmt><decl><specifier pos:line="13" pos:column="9">extern<pos:position pos:line="13" pos:column="15"/></specifier> <type><name pos:line="13" pos:column="16">char<pos:position pos:line="13" pos:column="20"/></name> <modifier pos:line="13" pos:column="21">*<pos:position pos:line="13" pos:column="22"/></modifier></type><name pos:line="13" pos:column="22">bind_address<pos:position pos:line="13" pos:column="34"/></name></decl>;<pos:position pos:line="13" pos:column="35"/></decl_stmt>
	<decl_stmt><decl><specifier pos:line="14" pos:column="9">extern<pos:position pos:line="14" pos:column="15"/></specifier> <type><name pos:line="14" pos:column="16">int<pos:position pos:line="14" pos:column="19"/></name></type> <name pos:line="14" pos:column="20">default_af_hint<pos:position pos:line="14" pos:column="35"/></name></decl>;<pos:position pos:line="14" pos:column="36"/></decl_stmt>
       
	<if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><name pos:line="16" pos:column="13">argc<pos:position pos:line="16" pos:column="17"/></name> <operator pos:line="16" pos:column="18">==<pos:position pos:line="16" pos:column="20"/></operator> <literal type="number" pos:line="16" pos:column="21">0<pos:position pos:line="16" pos:column="22"/></literal> <operator pos:line="16" pos:column="23">&amp;&amp;<pos:position pos:line="16" pos:column="33"/></operator> <operator pos:line="16" pos:column="26">!<pos:position pos:line="16" pos:column="27"/></operator><name pos:line="16" pos:column="27">am_sender<pos:position pos:line="16" pos:column="36"/></name></expr>)<pos:position pos:line="16" pos:column="37"/></condition><then pos:line="16" pos:column="37"> <block pos:line="16" pos:column="38">{
		<decl_stmt><decl><specifier pos:line="17" pos:column="17">extern<pos:position pos:line="17" pos:column="23"/></specifier> <type><name pos:line="17" pos:column="24">int<pos:position pos:line="17" pos:column="27"/></name></type> <name pos:line="17" pos:column="28">list_only<pos:position pos:line="17" pos:column="37"/></name></decl>;<pos:position pos:line="17" pos:column="38"/></decl_stmt>
		<expr_stmt><expr><name pos:line="18" pos:column="17">list_only<pos:position pos:line="18" pos:column="26"/></name> <operator pos:line="18" pos:column="27">=<pos:position pos:line="18" pos:column="28"/></operator> <literal type="number" pos:line="18" pos:column="29">1<pos:position pos:line="18" pos:column="30"/></literal></expr>;<pos:position pos:line="18" pos:column="31"/></expr_stmt>
	}<pos:position pos:line="19" pos:column="10"/></block></then></if>

        <comment type="block" pos:line="21" pos:column="9">/* This is just a friendliness enhancement: if the connection
         * is to an rsyncd then there is no point specifying the -e option.
         * Note that this is only set if the -e was explicitly specified,
         * not if the environment variable just happens to be set.
         * See http://lists.samba.org/pipermail/rsync/2000-September/002744.html
         */</comment>
        <if pos:line="27" pos:column="9">if <condition pos:line="27" pos:column="12">(<expr><name pos:line="27" pos:column="13">shell_cmd<pos:position pos:line="27" pos:column="22"/></name></expr>)<pos:position pos:line="27" pos:column="23"/></condition><then pos:line="27" pos:column="23"> <block pos:line="27" pos:column="24">{
                <expr_stmt><expr><call><name pos:line="28" pos:column="17">rprintf<pos:position pos:line="28" pos:column="24"/></name><argument_list pos:line="28" pos:column="24">(<argument><expr><name pos:line="28" pos:column="25">FERROR<pos:position pos:line="28" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="28" pos:column="33">"WARNING: --rsh or -e option ignored when "<pos:position pos:line="28" pos:column="76"/></literal>
                        <literal type="string" pos:line="29" pos:column="25">"connecting to rsync daemon\n"<pos:position pos:line="29" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="57"/></expr_stmt>
                <comment type="block" pos:line="30" pos:column="17">/* continue */</comment>
        }<pos:position pos:line="31" pos:column="10"/></block></then></if>
        
	<if pos:line="33" pos:column="9">if <condition pos:line="33" pos:column="12">(<expr><operator pos:line="33" pos:column="13">*<pos:position pos:line="33" pos:column="14"/></operator><name pos:line="33" pos:column="14">path<pos:position pos:line="33" pos:column="18"/></name> <operator pos:line="33" pos:column="19">==<pos:position pos:line="33" pos:column="21"/></operator> <literal type="char" pos:line="33" pos:column="22">'/'<pos:position pos:line="33" pos:column="25"/></literal></expr>)<pos:position pos:line="33" pos:column="26"/></condition><then pos:line="33" pos:column="26"> <block pos:line="33" pos:column="27">{
		<expr_stmt><expr><call><name pos:line="34" pos:column="17">rprintf<pos:position pos:line="34" pos:column="24"/></name><argument_list pos:line="34" pos:column="24">(<argument><expr><name pos:line="34" pos:column="25">FERROR<pos:position pos:line="34" pos:column="31"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="34" pos:column="32">"ERROR: The remote path must start with a module name not a /\n"<pos:position pos:line="34" pos:column="96"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="97"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="98"/></expr_stmt>
		<return pos:line="35" pos:column="17">return <expr><operator pos:line="35" pos:column="24">-<pos:position pos:line="35" pos:column="25"/></operator><literal type="number" pos:line="35" pos:column="25">1<pos:position pos:line="35" pos:column="26"/></literal></expr>;<pos:position pos:line="35" pos:column="27"/></return>
	}<pos:position pos:line="36" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="38" pos:column="9">p<pos:position pos:line="38" pos:column="10"/></name> <operator pos:line="38" pos:column="11">=<pos:position pos:line="38" pos:column="12"/></operator> <call><name pos:line="38" pos:column="13">strchr<pos:position pos:line="38" pos:column="19"/></name><argument_list pos:line="38" pos:column="19">(<argument><expr><name pos:line="38" pos:column="20">host<pos:position pos:line="38" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="38" pos:column="26">'@'<pos:position pos:line="38" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="38" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="31"/></expr_stmt>
	<if pos:line="39" pos:column="9">if <condition pos:line="39" pos:column="12">(<expr><name pos:line="39" pos:column="13">p<pos:position pos:line="39" pos:column="14"/></name></expr>)<pos:position pos:line="39" pos:column="15"/></condition><then pos:line="39" pos:column="15"> <block pos:line="39" pos:column="16">{
		<expr_stmt><expr><name pos:line="40" pos:column="17">user<pos:position pos:line="40" pos:column="21"/></name> <operator pos:line="40" pos:column="22">=<pos:position pos:line="40" pos:column="23"/></operator> <name pos:line="40" pos:column="24">host<pos:position pos:line="40" pos:column="28"/></name></expr>;<pos:position pos:line="40" pos:column="29"/></expr_stmt>
		<expr_stmt><expr><name pos:line="41" pos:column="17">host<pos:position pos:line="41" pos:column="21"/></name> <operator pos:line="41" pos:column="22">=<pos:position pos:line="41" pos:column="23"/></operator> <name pos:line="41" pos:column="24">p<pos:position pos:line="41" pos:column="25"/></name><operator pos:line="41" pos:column="25">+<pos:position pos:line="41" pos:column="26"/></operator><literal type="number" pos:line="41" pos:column="26">1<pos:position pos:line="41" pos:column="27"/></literal></expr>;<pos:position pos:line="41" pos:column="28"/></expr_stmt>
		<expr_stmt><expr><operator pos:line="42" pos:column="17">*<pos:position pos:line="42" pos:column="18"/></operator><name pos:line="42" pos:column="18">p<pos:position pos:line="42" pos:column="19"/></name> <operator pos:line="42" pos:column="20">=<pos:position pos:line="42" pos:column="21"/></operator> <literal type="number" pos:line="42" pos:column="22">0<pos:position pos:line="42" pos:column="23"/></literal></expr>;<pos:position pos:line="42" pos:column="24"/></expr_stmt>
	}<pos:position pos:line="43" pos:column="10"/></block></then></if>

	<if pos:line="45" pos:column="9">if <condition pos:line="45" pos:column="12">(<expr><operator pos:line="45" pos:column="13">!<pos:position pos:line="45" pos:column="14"/></operator><name pos:line="45" pos:column="14">user<pos:position pos:line="45" pos:column="18"/></name></expr>)<pos:position pos:line="45" pos:column="19"/></condition><then pos:line="45" pos:column="19"> <block type="pseudo"><expr_stmt><expr><name pos:line="45" pos:column="20">user<pos:position pos:line="45" pos:column="24"/></name> <operator pos:line="45" pos:column="25">=<pos:position pos:line="45" pos:column="26"/></operator> <call><name pos:line="45" pos:column="27">getenv<pos:position pos:line="45" pos:column="33"/></name><argument_list pos:line="45" pos:column="33">(<argument><expr><literal type="string" pos:line="45" pos:column="34">"USER"<pos:position pos:line="45" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="45" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="42"/></expr_stmt></block></then></if>
	<if pos:line="46" pos:column="9">if <condition pos:line="46" pos:column="12">(<expr><operator pos:line="46" pos:column="13">!<pos:position pos:line="46" pos:column="14"/></operator><name pos:line="46" pos:column="14">user<pos:position pos:line="46" pos:column="18"/></name></expr>)<pos:position pos:line="46" pos:column="19"/></condition><then pos:line="46" pos:column="19"> <block type="pseudo"><expr_stmt><expr><name pos:line="46" pos:column="20">user<pos:position pos:line="46" pos:column="24"/></name> <operator pos:line="46" pos:column="25">=<pos:position pos:line="46" pos:column="26"/></operator> <call><name pos:line="46" pos:column="27">getenv<pos:position pos:line="46" pos:column="33"/></name><argument_list pos:line="46" pos:column="33">(<argument><expr><literal type="string" pos:line="46" pos:column="34">"LOGNAME"<pos:position pos:line="46" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="45"/></expr_stmt></block></then></if>

	<if pos:line="48" pos:column="9">if <condition pos:line="48" pos:column="12">(<expr><name pos:line="48" pos:column="13">verbose<pos:position pos:line="48" pos:column="20"/></name> <operator pos:line="48" pos:column="21">&gt;=<pos:position pos:line="48" pos:column="26"/></operator> <literal type="number" pos:line="48" pos:column="24">2<pos:position pos:line="48" pos:column="25"/></literal></expr>)<pos:position pos:line="48" pos:column="26"/></condition><then pos:line="48" pos:column="26"> <block pos:line="48" pos:column="27">{
		<comment type="block" pos:line="49" pos:column="17">/* FIXME: If we're going to use a socket program for
		 * testing, then this message is wrong.  We need to
		 * say something like "(except really using %s)" */</comment>
		<expr_stmt><expr><call><name pos:line="52" pos:column="17">rprintf<pos:position pos:line="52" pos:column="24"/></name><argument_list pos:line="52" pos:column="24">(<argument><expr><name pos:line="52" pos:column="25">FINFO<pos:position pos:line="52" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="52" pos:column="32">"opening tcp connection to %s port %d\n"<pos:position pos:line="52" pos:column="72"/></literal></expr></argument>,
			<argument><expr><name pos:line="53" pos:column="25">host<pos:position pos:line="53" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="31">rsync_port<pos:position pos:line="53" pos:column="41"/></name></expr></argument>)<pos:position pos:line="53" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="43"/></expr_stmt>
	}<pos:position pos:line="54" pos:column="10"/></block></then></if>
	<expr_stmt><expr><name pos:line="55" pos:column="9">fd<pos:position pos:line="55" pos:column="11"/></name> <operator pos:line="55" pos:column="12">=<pos:position pos:line="55" pos:column="13"/></operator> <call><name pos:line="55" pos:column="14">open_socket_out_wrapped<pos:position pos:line="55" pos:column="37"/></name> <argument_list pos:line="55" pos:column="38">(<argument><expr><name pos:line="55" pos:column="39">host<pos:position pos:line="55" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="45">rsync_port<pos:position pos:line="55" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="57">bind_address<pos:position pos:line="55" pos:column="69"/></name></expr></argument>,
				      <argument><expr><name pos:line="56" pos:column="39">default_af_hint<pos:position pos:line="56" pos:column="54"/></name></expr></argument>)<pos:position pos:line="56" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="56"/></expr_stmt>
	<if pos:line="57" pos:column="9">if <condition pos:line="57" pos:column="12">(<expr><name pos:line="57" pos:column="13">fd<pos:position pos:line="57" pos:column="15"/></name> <operator pos:line="57" pos:column="16">==<pos:position pos:line="57" pos:column="18"/></operator> <operator pos:line="57" pos:column="19">-<pos:position pos:line="57" pos:column="20"/></operator><literal type="number" pos:line="57" pos:column="20">1<pos:position pos:line="57" pos:column="21"/></literal></expr>)<pos:position pos:line="57" pos:column="22"/></condition><then pos:line="57" pos:column="22"> <block pos:line="57" pos:column="23">{
		<expr_stmt><expr><call><name pos:line="58" pos:column="17">exit_cleanup<pos:position pos:line="58" pos:column="29"/></name><argument_list pos:line="58" pos:column="29">(<argument><expr><name pos:line="58" pos:column="30">RERR_SOCKETIO<pos:position pos:line="58" pos:column="43"/></name></expr></argument>)<pos:position pos:line="58" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="45"/></expr_stmt>
	}<pos:position pos:line="59" pos:column="10"/></block></then></if>
	
	<expr_stmt><expr><call><name pos:line="61" pos:column="9">server_options<pos:position pos:line="61" pos:column="23"/></name><argument_list pos:line="61" pos:column="23">(<argument><expr><name pos:line="61" pos:column="24">sargs<pos:position pos:line="61" pos:column="29"/></name></expr></argument>,<argument><expr><operator pos:line="61" pos:column="30">&amp;<pos:position pos:line="61" pos:column="35"/></operator><name pos:line="61" pos:column="31">sargc<pos:position pos:line="61" pos:column="36"/></name></expr></argument>)<pos:position pos:line="61" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="38"/></expr_stmt>

	<expr_stmt><expr><name><name pos:line="63" pos:column="9">sargs<pos:position pos:line="63" pos:column="14"/></name><index pos:line="63" pos:column="14">[<expr><name pos:line="63" pos:column="15">sargc<pos:position pos:line="63" pos:column="20"/></name><operator pos:line="63" pos:column="20">++<pos:position pos:line="63" pos:column="22"/></operator></expr>]<pos:position pos:line="63" pos:column="23"/></index></name> <operator pos:line="63" pos:column="24">=<pos:position pos:line="63" pos:column="25"/></operator> <literal type="string" pos:line="63" pos:column="26">"."<pos:position pos:line="63" pos:column="29"/></literal></expr>;<pos:position pos:line="63" pos:column="30"/></expr_stmt>

	<if pos:line="65" pos:column="9">if <condition pos:line="65" pos:column="12">(<expr><name pos:line="65" pos:column="13">path<pos:position pos:line="65" pos:column="17"/></name> <operator pos:line="65" pos:column="18">&amp;&amp;<pos:position pos:line="65" pos:column="28"/></operator> <operator pos:line="65" pos:column="21">*<pos:position pos:line="65" pos:column="22"/></operator><name pos:line="65" pos:column="22">path<pos:position pos:line="65" pos:column="26"/></name></expr>)<pos:position pos:line="65" pos:column="27"/></condition><then pos:line="65" pos:column="27"> 
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="66" pos:column="17">sargs<pos:position pos:line="66" pos:column="22"/></name><index pos:line="66" pos:column="22">[<expr><name pos:line="66" pos:column="23">sargc<pos:position pos:line="66" pos:column="28"/></name><operator pos:line="66" pos:column="28">++<pos:position pos:line="66" pos:column="30"/></operator></expr>]<pos:position pos:line="66" pos:column="31"/></index></name> <operator pos:line="66" pos:column="32">=<pos:position pos:line="66" pos:column="33"/></operator> <name pos:line="66" pos:column="34">path<pos:position pos:line="66" pos:column="38"/></name></expr>;<pos:position pos:line="66" pos:column="39"/></expr_stmt></block></then></if>

	<expr_stmt><expr><name><name pos:line="68" pos:column="9">sargs<pos:position pos:line="68" pos:column="14"/></name><index pos:line="68" pos:column="14">[<expr><name pos:line="68" pos:column="15">sargc<pos:position pos:line="68" pos:column="20"/></name></expr>]<pos:position pos:line="68" pos:column="21"/></index></name> <operator pos:line="68" pos:column="22">=<pos:position pos:line="68" pos:column="23"/></operator> <name pos:line="68" pos:column="24">NULL<pos:position pos:line="68" pos:column="28"/></name></expr>;<pos:position pos:line="68" pos:column="29"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="70" pos:column="9">io_printf<pos:position pos:line="70" pos:column="18"/></name><argument_list pos:line="70" pos:column="18">(<argument><expr><name pos:line="70" pos:column="19">fd<pos:position pos:line="70" pos:column="21"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="70" pos:column="22">"@RSYNCD: %d\n"<pos:position pos:line="70" pos:column="37"/></literal></expr></argument>, <argument><expr><name pos:line="70" pos:column="39">PROTOCOL_VERSION<pos:position pos:line="70" pos:column="55"/></name></expr></argument>)<pos:position pos:line="70" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="57"/></expr_stmt>

	<if pos:line="72" pos:column="9">if <condition pos:line="72" pos:column="12">(<expr><operator pos:line="72" pos:column="13">!<pos:position pos:line="72" pos:column="14"/></operator><call><name pos:line="72" pos:column="14">read_line<pos:position pos:line="72" pos:column="23"/></name><argument_list pos:line="72" pos:column="23">(<argument><expr><name pos:line="72" pos:column="24">fd<pos:position pos:line="72" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="72" pos:column="28">line<pos:position pos:line="72" pos:column="32"/></name></expr></argument>, <argument><expr><sizeof pos:line="72" pos:column="34">sizeof<argument_list pos:line="72" pos:column="40">(<argument><expr><name pos:line="72" pos:column="41">line<pos:position pos:line="72" pos:column="45"/></name></expr></argument>)<pos:position pos:line="72" pos:column="46"/></argument_list></sizeof><operator pos:line="72" pos:column="46">-<pos:position pos:line="72" pos:column="47"/></operator><literal type="number" pos:line="72" pos:column="47">1<pos:position pos:line="72" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="72" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="72" pos:column="50"/></condition><then pos:line="72" pos:column="50"> <block pos:line="72" pos:column="51">{
		<expr_stmt><expr><call><name pos:line="73" pos:column="17">rprintf<pos:position pos:line="73" pos:column="24"/></name><argument_list pos:line="73" pos:column="24">(<argument><expr><name pos:line="73" pos:column="25">FERROR<pos:position pos:line="73" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="73" pos:column="33">"rsync: did not see server greeting\n"<pos:position pos:line="73" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="73" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="73"/></expr_stmt>
		<return pos:line="74" pos:column="17">return <expr><operator pos:line="74" pos:column="24">-<pos:position pos:line="74" pos:column="25"/></operator><literal type="number" pos:line="74" pos:column="25">1<pos:position pos:line="74" pos:column="26"/></literal></expr>;<pos:position pos:line="74" pos:column="27"/></return>
	}<pos:position pos:line="75" pos:column="10"/></block></then></if>

	<if pos:line="77" pos:column="9">if <condition pos:line="77" pos:column="12">(<expr><call><name pos:line="77" pos:column="13">sscanf<pos:position pos:line="77" pos:column="19"/></name><argument_list pos:line="77" pos:column="19">(<argument><expr><name pos:line="77" pos:column="20">line<pos:position pos:line="77" pos:column="24"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="77" pos:column="25">"@RSYNCD: %d"<pos:position pos:line="77" pos:column="38"/></literal></expr></argument>, <argument><expr><operator pos:line="77" pos:column="40">&amp;<pos:position pos:line="77" pos:column="45"/></operator><name pos:line="77" pos:column="41">remote_version<pos:position pos:line="77" pos:column="55"/></name></expr></argument>)<pos:position pos:line="77" pos:column="56"/></argument_list></call> <operator pos:line="77" pos:column="57">!=<pos:position pos:line="77" pos:column="59"/></operator> <literal type="number" pos:line="77" pos:column="60">1<pos:position pos:line="77" pos:column="61"/></literal></expr>)<pos:position pos:line="77" pos:column="62"/></condition><then pos:line="77" pos:column="62"> <block pos:line="77" pos:column="63">{
		<comment type="block" pos:line="78" pos:column="17">/* note that read_line strips of \n or \r */</comment>
		<expr_stmt><expr><call><name pos:line="79" pos:column="17">rprintf<pos:position pos:line="79" pos:column="24"/></name><argument_list pos:line="79" pos:column="24">(<argument><expr><name pos:line="79" pos:column="25">FERROR<pos:position pos:line="79" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="79" pos:column="33">"rsync: server sent \"%s\" rather than greeting\n"<pos:position pos:line="79" pos:column="83"/></literal></expr></argument>,
			<argument><expr><name pos:line="80" pos:column="25">line<pos:position pos:line="80" pos:column="29"/></name></expr></argument>)<pos:position pos:line="80" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="31"/></expr_stmt>
		<return pos:line="81" pos:column="17">return <expr><operator pos:line="81" pos:column="24">-<pos:position pos:line="81" pos:column="25"/></operator><literal type="number" pos:line="81" pos:column="25">1<pos:position pos:line="81" pos:column="26"/></literal></expr>;<pos:position pos:line="81" pos:column="27"/></return>
	}<pos:position pos:line="82" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="84" pos:column="9">p<pos:position pos:line="84" pos:column="10"/></name> <operator pos:line="84" pos:column="11">=<pos:position pos:line="84" pos:column="12"/></operator> <call><name pos:line="84" pos:column="13">strchr<pos:position pos:line="84" pos:column="19"/></name><argument_list pos:line="84" pos:column="19">(<argument><expr><name pos:line="84" pos:column="20">path<pos:position pos:line="84" pos:column="24"/></name></expr></argument>,<argument><expr><literal type="char" pos:line="84" pos:column="25">'/'<pos:position pos:line="84" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="84" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="30"/></expr_stmt>
	<if pos:line="85" pos:column="9">if <condition pos:line="85" pos:column="12">(<expr><name pos:line="85" pos:column="13">p<pos:position pos:line="85" pos:column="14"/></name></expr>)<pos:position pos:line="85" pos:column="15"/></condition><then pos:line="85" pos:column="15"> <block type="pseudo"><expr_stmt><expr><operator pos:line="85" pos:column="16">*<pos:position pos:line="85" pos:column="17"/></operator><name pos:line="85" pos:column="17">p<pos:position pos:line="85" pos:column="18"/></name> <operator pos:line="85" pos:column="19">=<pos:position pos:line="85" pos:column="20"/></operator> <literal type="number" pos:line="85" pos:column="21">0<pos:position pos:line="85" pos:column="22"/></literal></expr>;<pos:position pos:line="85" pos:column="23"/></expr_stmt></block></then></if>
	<expr_stmt><expr><call><name pos:line="86" pos:column="9">io_printf<pos:position pos:line="86" pos:column="18"/></name><argument_list pos:line="86" pos:column="18">(<argument><expr><name pos:line="86" pos:column="19">fd<pos:position pos:line="86" pos:column="21"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="86" pos:column="22">"%s\n"<pos:position pos:line="86" pos:column="28"/></literal></expr></argument>,<argument><expr><name pos:line="86" pos:column="29">path<pos:position pos:line="86" pos:column="33"/></name></expr></argument>)<pos:position pos:line="86" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="35"/></expr_stmt>
	<if pos:line="87" pos:column="9">if <condition pos:line="87" pos:column="12">(<expr><name pos:line="87" pos:column="13">p<pos:position pos:line="87" pos:column="14"/></name></expr>)<pos:position pos:line="87" pos:column="15"/></condition><then pos:line="87" pos:column="15"> <block type="pseudo"><expr_stmt><expr><operator pos:line="87" pos:column="16">*<pos:position pos:line="87" pos:column="17"/></operator><name pos:line="87" pos:column="17">p<pos:position pos:line="87" pos:column="18"/></name> <operator pos:line="87" pos:column="19">=<pos:position pos:line="87" pos:column="20"/></operator> <literal type="char" pos:line="87" pos:column="21">'/'<pos:position pos:line="87" pos:column="24"/></literal></expr>;<pos:position pos:line="87" pos:column="25"/></expr_stmt></block></then></if>

	<comment type="block" pos:line="89" pos:column="9">/* Old servers may just drop the connection here,
	 rather than sending a proper EXIT command.  Yuck. */</comment>
	<expr_stmt><expr><name pos:line="91" pos:column="9">kludge_around_eof<pos:position pos:line="91" pos:column="26"/></name> <operator pos:line="91" pos:column="27">=<pos:position pos:line="91" pos:column="28"/></operator> <name pos:line="91" pos:column="29">list_only<pos:position pos:line="91" pos:column="38"/></name> <operator pos:line="91" pos:column="39">&amp;&amp;<pos:position pos:line="91" pos:column="49"/></operator> <operator pos:line="91" pos:column="42">(<pos:position pos:line="91" pos:column="43"/></operator><name pos:line="91" pos:column="43">remote_version<pos:position pos:line="91" pos:column="57"/></name> <operator pos:line="91" pos:column="58">&lt;<pos:position pos:line="91" pos:column="62"/></operator> <literal type="number" pos:line="91" pos:column="60">25<pos:position pos:line="91" pos:column="62"/></literal><operator pos:line="91" pos:column="62">)<pos:position pos:line="91" pos:column="63"/></operator></expr>;<pos:position pos:line="91" pos:column="64"/></expr_stmt>

	<while pos:line="93" pos:column="9">while <condition pos:line="93" pos:column="15">(<expr><literal type="number" pos:line="93" pos:column="16">1<pos:position pos:line="93" pos:column="17"/></literal></expr>)<pos:position pos:line="93" pos:column="18"/></condition> <block pos:line="93" pos:column="19">{
		<if pos:line="94" pos:column="17">if <condition pos:line="94" pos:column="20">(<expr><operator pos:line="94" pos:column="21">!<pos:position pos:line="94" pos:column="22"/></operator><call><name pos:line="94" pos:column="22">read_line<pos:position pos:line="94" pos:column="31"/></name><argument_list pos:line="94" pos:column="31">(<argument><expr><name pos:line="94" pos:column="32">fd<pos:position pos:line="94" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="94" pos:column="36">line<pos:position pos:line="94" pos:column="40"/></name></expr></argument>, <argument><expr><sizeof pos:line="94" pos:column="42">sizeof<argument_list pos:line="94" pos:column="48">(<argument><expr><name pos:line="94" pos:column="49">line<pos:position pos:line="94" pos:column="53"/></name></expr></argument>)<pos:position pos:line="94" pos:column="54"/></argument_list></sizeof><operator pos:line="94" pos:column="54">-<pos:position pos:line="94" pos:column="55"/></operator><literal type="number" pos:line="94" pos:column="55">1<pos:position pos:line="94" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="94" pos:column="57"/></argument_list></call></expr>)<pos:position pos:line="94" pos:column="58"/></condition><then pos:line="94" pos:column="58"> <block pos:line="94" pos:column="59">{
			<expr_stmt><expr><call><name pos:line="95" pos:column="25">rprintf<pos:position pos:line="95" pos:column="32"/></name><argument_list pos:line="95" pos:column="32">(<argument><expr><name pos:line="95" pos:column="33">FERROR<pos:position pos:line="95" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="95" pos:column="41">"rsync: didn't get server startup line\n"<pos:position pos:line="95" pos:column="82"/></literal></expr></argument>)<pos:position pos:line="95" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="84"/></expr_stmt>
			<return pos:line="96" pos:column="25">return <expr><operator pos:line="96" pos:column="32">-<pos:position pos:line="96" pos:column="33"/></operator><literal type="number" pos:line="96" pos:column="33">1<pos:position pos:line="96" pos:column="34"/></literal></expr>;<pos:position pos:line="96" pos:column="35"/></return>
		}<pos:position pos:line="97" pos:column="18"/></block></then></if>

		<if pos:line="99" pos:column="17">if <condition pos:line="99" pos:column="20">(<expr><call><name pos:line="99" pos:column="21">strncmp<pos:position pos:line="99" pos:column="28"/></name><argument_list pos:line="99" pos:column="28">(<argument><expr><name pos:line="99" pos:column="29">line<pos:position pos:line="99" pos:column="33"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="99" pos:column="34">"@RSYNCD: AUTHREQD "<pos:position pos:line="99" pos:column="54"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="99" pos:column="55">18<pos:position pos:line="99" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="99" pos:column="58"/></argument_list></call> <operator pos:line="99" pos:column="59">==<pos:position pos:line="99" pos:column="61"/></operator> <literal type="number" pos:line="99" pos:column="62">0<pos:position pos:line="99" pos:column="63"/></literal></expr>)<pos:position pos:line="99" pos:column="64"/></condition><then pos:line="99" pos:column="64"> <block pos:line="99" pos:column="65">{
			<expr_stmt><expr><call><name pos:line="100" pos:column="25">auth_client<pos:position pos:line="100" pos:column="36"/></name><argument_list pos:line="100" pos:column="36">(<argument><expr><name pos:line="100" pos:column="37">fd<pos:position pos:line="100" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="100" pos:column="41">user<pos:position pos:line="100" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="100" pos:column="47">line<pos:position pos:line="100" pos:column="51"/></name><operator pos:line="100" pos:column="51">+<pos:position pos:line="100" pos:column="52"/></operator><literal type="number" pos:line="100" pos:column="52">18<pos:position pos:line="100" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="100" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="100" pos:column="56"/></expr_stmt>
			<continue pos:line="101" pos:column="25">continue;<pos:position pos:line="101" pos:column="34"/></continue>
		}<pos:position pos:line="102" pos:column="18"/></block></then></if>

		<if pos:line="104" pos:column="17">if <condition pos:line="104" pos:column="20">(<expr><call><name pos:line="104" pos:column="21">strcmp<pos:position pos:line="104" pos:column="27"/></name><argument_list pos:line="104" pos:column="27">(<argument><expr><name pos:line="104" pos:column="28">line<pos:position pos:line="104" pos:column="32"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="104" pos:column="33">"@RSYNCD: OK"<pos:position pos:line="104" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="104" pos:column="47"/></argument_list></call> <operator pos:line="104" pos:column="48">==<pos:position pos:line="104" pos:column="50"/></operator> <literal type="number" pos:line="104" pos:column="51">0<pos:position pos:line="104" pos:column="52"/></literal></expr>)<pos:position pos:line="104" pos:column="53"/></condition><then pos:line="104" pos:column="53"> <block type="pseudo"><break pos:line="104" pos:column="54">break;<pos:position pos:line="104" pos:column="60"/></break></block></then></if>

		<if pos:line="106" pos:column="17">if <condition pos:line="106" pos:column="20">(<expr><call><name pos:line="106" pos:column="21">strcmp<pos:position pos:line="106" pos:column="27"/></name><argument_list pos:line="106" pos:column="27">(<argument><expr><name pos:line="106" pos:column="28">line<pos:position pos:line="106" pos:column="32"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="106" pos:column="33">"@RSYNCD: EXIT"<pos:position pos:line="106" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="106" pos:column="49"/></argument_list></call> <operator pos:line="106" pos:column="50">==<pos:position pos:line="106" pos:column="52"/></operator> <literal type="number" pos:line="106" pos:column="53">0<pos:position pos:line="106" pos:column="54"/></literal></expr>)<pos:position pos:line="106" pos:column="55"/></condition><then pos:line="106" pos:column="55"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="106" pos:column="56">exit<pos:position pos:line="106" pos:column="60"/></name><argument_list pos:line="106" pos:column="60">(<argument><expr><literal type="number" pos:line="106" pos:column="61">0<pos:position pos:line="106" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="106" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="106" pos:column="64"/></expr_stmt></block></then></if>

		<if pos:line="108" pos:column="17">if <condition pos:line="108" pos:column="20">(<expr><call><name pos:line="108" pos:column="21">strncmp<pos:position pos:line="108" pos:column="28"/></name><argument_list pos:line="108" pos:column="28">(<argument><expr><name pos:line="108" pos:column="29">line<pos:position pos:line="108" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="108" pos:column="35">"@ERROR"<pos:position pos:line="108" pos:column="43"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="108" pos:column="45">6<pos:position pos:line="108" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="108" pos:column="47"/></argument_list></call> <operator pos:line="108" pos:column="48">==<pos:position pos:line="108" pos:column="50"/></operator> <literal type="number" pos:line="108" pos:column="51">0<pos:position pos:line="108" pos:column="52"/></literal></expr>)<pos:position pos:line="108" pos:column="53"/></condition><then pos:line="108" pos:column="53">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="109" pos:column="25">rprintf<pos:position pos:line="109" pos:column="32"/></name><argument_list pos:line="109" pos:column="32">(<argument><expr><name pos:line="109" pos:column="33">FERROR<pos:position pos:line="109" pos:column="39"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="109" pos:column="40">"%s\n"<pos:position pos:line="109" pos:column="46"/></literal></expr></argument>, <argument><expr><name pos:line="109" pos:column="48">line<pos:position pos:line="109" pos:column="52"/></name></expr></argument>)<pos:position pos:line="109" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="109" pos:column="54"/></expr_stmt></block></then>
		<else pos:line="110" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="111" pos:column="25">rprintf<pos:position pos:line="111" pos:column="32"/></name><argument_list pos:line="111" pos:column="32">(<argument><expr><name pos:line="111" pos:column="33">FINFO<pos:position pos:line="111" pos:column="38"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="111" pos:column="39">"%s\n"<pos:position pos:line="111" pos:column="45"/></literal></expr></argument>, <argument><expr><name pos:line="111" pos:column="47">line<pos:position pos:line="111" pos:column="51"/></name></expr></argument>)<pos:position pos:line="111" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="111" pos:column="53"/></expr_stmt></block></else></if>
	}<pos:position pos:line="112" pos:column="10"/></block></while>
	<expr_stmt><expr><name pos:line="113" pos:column="9">kludge_around_eof<pos:position pos:line="113" pos:column="26"/></name> <operator pos:line="113" pos:column="27">=<pos:position pos:line="113" pos:column="28"/></operator> <name pos:line="113" pos:column="29">False<pos:position pos:line="113" pos:column="34"/></name></expr>;<pos:position pos:line="113" pos:column="35"/></expr_stmt>

	<for pos:line="115" pos:column="9">for <control pos:line="115" pos:column="13">(<init><expr><name pos:line="115" pos:column="14">i<pos:position pos:line="115" pos:column="15"/></name><operator pos:line="115" pos:column="15">=<pos:position pos:line="115" pos:column="16"/></operator><literal type="number" pos:line="115" pos:column="16">0<pos:position pos:line="115" pos:column="17"/></literal></expr>;<pos:position pos:line="115" pos:column="18"/></init><condition><expr><name pos:line="115" pos:column="18">i<pos:position pos:line="115" pos:column="19"/></name><operator pos:line="115" pos:column="19">&lt;<pos:position pos:line="115" pos:column="23"/></operator><name pos:line="115" pos:column="20">sargc<pos:position pos:line="115" pos:column="25"/></name></expr>;<pos:position pos:line="115" pos:column="26"/></condition><incr><expr><name pos:line="115" pos:column="26">i<pos:position pos:line="115" pos:column="27"/></name><operator pos:line="115" pos:column="27">++<pos:position pos:line="115" pos:column="29"/></operator></expr></incr>)<pos:position pos:line="115" pos:column="30"/></control> <block pos:line="115" pos:column="31">{
		<expr_stmt><expr><call><name pos:line="116" pos:column="17">io_printf<pos:position pos:line="116" pos:column="26"/></name><argument_list pos:line="116" pos:column="26">(<argument><expr><name pos:line="116" pos:column="27">fd<pos:position pos:line="116" pos:column="29"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="116" pos:column="30">"%s\n"<pos:position pos:line="116" pos:column="36"/></literal></expr></argument>, <argument><expr><name><name pos:line="116" pos:column="38">sargs<pos:position pos:line="116" pos:column="43"/></name><index pos:line="116" pos:column="43">[<expr><name pos:line="116" pos:column="44">i<pos:position pos:line="116" pos:column="45"/></name></expr>]<pos:position pos:line="116" pos:column="46"/></index></name></expr></argument>)<pos:position pos:line="116" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="116" pos:column="48"/></expr_stmt>
	}<pos:position pos:line="117" pos:column="10"/></block></for>
	<expr_stmt><expr><call><name pos:line="118" pos:column="9">io_printf<pos:position pos:line="118" pos:column="18"/></name><argument_list pos:line="118" pos:column="18">(<argument><expr><name pos:line="118" pos:column="19">fd<pos:position pos:line="118" pos:column="21"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="118" pos:column="22">"\n"<pos:position pos:line="118" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="118" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="118" pos:column="28"/></expr_stmt>

	<if pos:line="120" pos:column="9">if <condition pos:line="120" pos:column="12">(<expr><name pos:line="120" pos:column="13">remote_version<pos:position pos:line="120" pos:column="27"/></name> <operator pos:line="120" pos:column="28">&lt;<pos:position pos:line="120" pos:column="32"/></operator> <literal type="number" pos:line="120" pos:column="30">23<pos:position pos:line="120" pos:column="32"/></literal></expr>)<pos:position pos:line="120" pos:column="33"/></condition><then pos:line="120" pos:column="33"> <block pos:line="120" pos:column="34">{
		<if pos:line="121" pos:column="17">if <condition pos:line="121" pos:column="20">(<expr><name pos:line="121" pos:column="21">remote_version<pos:position pos:line="121" pos:column="35"/></name> <operator pos:line="121" pos:column="36">==<pos:position pos:line="121" pos:column="38"/></operator> <literal type="number" pos:line="121" pos:column="39">22<pos:position pos:line="121" pos:column="41"/></literal> <operator pos:line="121" pos:column="42">||<pos:position pos:line="121" pos:column="44"/></operator> <operator pos:line="121" pos:column="45">(<pos:position pos:line="121" pos:column="46"/></operator><name pos:line="121" pos:column="46">remote_version<pos:position pos:line="121" pos:column="60"/></name> <operator pos:line="121" pos:column="61">&gt;<pos:position pos:line="121" pos:column="65"/></operator> <literal type="number" pos:line="121" pos:column="63">17<pos:position pos:line="121" pos:column="65"/></literal> <operator pos:line="121" pos:column="66">&amp;&amp;<pos:position pos:line="121" pos:column="76"/></operator> <operator pos:line="121" pos:column="69">!<pos:position pos:line="121" pos:column="70"/></operator><name pos:line="121" pos:column="70">am_sender<pos:position pos:line="121" pos:column="79"/></name><operator pos:line="121" pos:column="79">)<pos:position pos:line="121" pos:column="80"/></operator></expr>)<pos:position pos:line="121" pos:column="81"/></condition><then pos:line="121" pos:column="81">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="122" pos:column="25">io_start_multiplex_in<pos:position pos:line="122" pos:column="46"/></name><argument_list pos:line="122" pos:column="46">(<argument><expr><name pos:line="122" pos:column="47">fd<pos:position pos:line="122" pos:column="49"/></name></expr></argument>)<pos:position pos:line="122" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="122" pos:column="51"/></expr_stmt></block></then></if>
	}<pos:position pos:line="123" pos:column="10"/></block></then></if>

	<return pos:line="125" pos:column="9">return <expr><call><name pos:line="125" pos:column="16">client_run<pos:position pos:line="125" pos:column="26"/></name><argument_list pos:line="125" pos:column="26">(<argument><expr><name pos:line="125" pos:column="27">fd<pos:position pos:line="125" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="125" pos:column="31">fd<pos:position pos:line="125" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="125" pos:column="35">-<pos:position pos:line="125" pos:column="36"/></operator><literal type="number" pos:line="125" pos:column="36">1<pos:position pos:line="125" pos:column="37"/></literal></expr></argument>, <argument><expr><name pos:line="125" pos:column="39">argc<pos:position pos:line="125" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="125" pos:column="45">argv<pos:position pos:line="125" pos:column="49"/></name></expr></argument>)<pos:position pos:line="125" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="125" pos:column="51"/></return>
}<pos:position pos:line="126" pos:column="2"/></block></function></unit>
