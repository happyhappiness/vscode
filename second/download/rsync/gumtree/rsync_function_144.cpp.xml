<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_function_144.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">do_server_recv<pos:position pos:line="1" pos:column="20"/></name><parameter_list pos:line="1" pos:column="20">(<parameter><decl><type><name pos:line="1" pos:column="21">int<pos:position pos:line="1" pos:column="24"/></name></type> <name pos:line="1" pos:column="25">argc<pos:position pos:line="1" pos:column="29"/></name></decl></parameter>,<parameter><decl><type><name pos:line="1" pos:column="30">char<pos:position pos:line="1" pos:column="34"/></name> <modifier pos:line="1" pos:column="35">*<pos:position pos:line="1" pos:column="36"/></modifier></type><name><name pos:line="1" pos:column="36">argv<pos:position pos:line="1" pos:column="40"/></name><index pos:line="1" pos:column="40">[]<pos:position pos:line="1" pos:column="42"/></index></name></decl></parameter>)<pos:position pos:line="1" pos:column="43"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">int<pos:position pos:line="3" pos:column="6"/></name></type> <name pos:line="3" pos:column="7">pid<pos:position pos:line="3" pos:column="10"/></name></decl>,<decl><type ref="prev"/><name pos:line="3" pos:column="11">status<pos:position pos:line="3" pos:column="17"/></name></decl>;<pos:position pos:line="3" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">char<pos:position pos:line="4" pos:column="7"/></name> <modifier pos:line="4" pos:column="8">*<pos:position pos:line="4" pos:column="9"/></modifier></type><name pos:line="4" pos:column="9">dir<pos:position pos:line="4" pos:column="12"/></name> <init pos:line="4" pos:column="13">= <expr><name pos:line="4" pos:column="15">NULL<pos:position pos:line="4" pos:column="19"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="5" pos:column="3">struct<pos:position pos:line="5" pos:column="9"/></name> <name pos:line="5" pos:column="10">file_list<pos:position pos:line="5" pos:column="19"/></name></name> <modifier pos:line="5" pos:column="20">*<pos:position pos:line="5" pos:column="21"/></modifier></type><name pos:line="5" pos:column="21">flist<pos:position pos:line="5" pos:column="26"/></name></decl>;<pos:position pos:line="5" pos:column="27"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">char<pos:position pos:line="6" pos:column="7"/></name> <modifier pos:line="6" pos:column="8">*<pos:position pos:line="6" pos:column="9"/></modifier></type><name pos:line="6" pos:column="9">local_name<pos:position pos:line="6" pos:column="19"/></name><init pos:line="6" pos:column="19">=<expr><name pos:line="6" pos:column="20">NULL<pos:position pos:line="6" pos:column="24"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="25"/></decl_stmt>
  
  <if pos:line="8" pos:column="3">if <condition pos:line="8" pos:column="6">(<expr><name pos:line="8" pos:column="7">verbose<pos:position pos:line="8" pos:column="14"/></name> <operator pos:line="8" pos:column="15">&gt;<pos:position pos:line="8" pos:column="19"/></operator> <literal type="number" pos:line="8" pos:column="17">2<pos:position pos:line="8" pos:column="18"/></literal></expr>)<pos:position pos:line="8" pos:column="19"/></condition><then pos:line="8" pos:column="19">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="9" pos:column="5">fprintf<pos:position pos:line="9" pos:column="12"/></name><argument_list pos:line="9" pos:column="12">(<argument><expr><name pos:line="9" pos:column="13">stderr<pos:position pos:line="9" pos:column="19"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="9" pos:column="20">"server_recv(%d) starting pid=%d\n"<pos:position pos:line="9" pos:column="55"/></literal></expr></argument>,<argument><expr><name pos:line="9" pos:column="56">argc<pos:position pos:line="9" pos:column="60"/></name></expr></argument>,<argument><expr><operator pos:line="9" pos:column="61">(<pos:position pos:line="9" pos:column="62"/></operator><name pos:line="9" pos:column="62">int<pos:position pos:line="9" pos:column="65"/></name><operator pos:line="9" pos:column="65">)<pos:position pos:line="9" pos:column="66"/></operator><call><name pos:line="9" pos:column="66">getpid<pos:position pos:line="9" pos:column="72"/></name><argument_list pos:line="9" pos:column="72">()<pos:position pos:line="9" pos:column="74"/></argument_list></call></expr></argument>)<pos:position pos:line="9" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="76"/></expr_stmt></block></then></if>

  <if pos:line="11" pos:column="3">if <condition pos:line="11" pos:column="6">(<expr><name pos:line="11" pos:column="7">argc<pos:position pos:line="11" pos:column="11"/></name> <operator pos:line="11" pos:column="12">&gt;<pos:position pos:line="11" pos:column="16"/></operator> <literal type="number" pos:line="11" pos:column="14">0<pos:position pos:line="11" pos:column="15"/></literal></expr>)<pos:position pos:line="11" pos:column="16"/></condition><then pos:line="11" pos:column="16"> <block pos:line="11" pos:column="17">{
    <expr_stmt><expr><name pos:line="12" pos:column="5">dir<pos:position pos:line="12" pos:column="8"/></name> <operator pos:line="12" pos:column="9">=<pos:position pos:line="12" pos:column="10"/></operator> <name><name pos:line="12" pos:column="11">argv<pos:position pos:line="12" pos:column="15"/></name><index pos:line="12" pos:column="15">[<expr><literal type="number" pos:line="12" pos:column="16">0<pos:position pos:line="12" pos:column="17"/></literal></expr>]<pos:position pos:line="12" pos:column="18"/></index></name></expr>;<pos:position pos:line="12" pos:column="19"/></expr_stmt>
    <expr_stmt><expr><name pos:line="13" pos:column="5">argc<pos:position pos:line="13" pos:column="9"/></name><operator pos:line="13" pos:column="9">--<pos:position pos:line="13" pos:column="11"/></operator></expr>;<pos:position pos:line="13" pos:column="12"/></expr_stmt>
    <expr_stmt><expr><name pos:line="14" pos:column="5">argv<pos:position pos:line="14" pos:column="9"/></name><operator pos:line="14" pos:column="9">++<pos:position pos:line="14" pos:column="11"/></operator></expr>;<pos:position pos:line="14" pos:column="12"/></expr_stmt>
    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><call><name pos:line="15" pos:column="9">chdir<pos:position pos:line="15" pos:column="14"/></name><argument_list pos:line="15" pos:column="14">(<argument><expr><name pos:line="15" pos:column="15">dir<pos:position pos:line="15" pos:column="18"/></name></expr></argument>)<pos:position pos:line="15" pos:column="19"/></argument_list></call> <operator pos:line="15" pos:column="20">!=<pos:position pos:line="15" pos:column="22"/></operator> <literal type="number" pos:line="15" pos:column="23">0<pos:position pos:line="15" pos:column="24"/></literal></expr>)<pos:position pos:line="15" pos:column="25"/></condition><then pos:line="15" pos:column="25"> <block pos:line="15" pos:column="26">{
      <expr_stmt><expr><call><name pos:line="16" pos:column="7">fprintf<pos:position pos:line="16" pos:column="14"/></name><argument_list pos:line="16" pos:column="14">(<argument><expr><name pos:line="16" pos:column="15">stderr<pos:position pos:line="16" pos:column="21"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="16" pos:column="22">"chdir %s : %s\n"<pos:position pos:line="16" pos:column="39"/></literal></expr></argument>,<argument><expr><name pos:line="16" pos:column="40">dir<pos:position pos:line="16" pos:column="43"/></name></expr></argument>,<argument><expr><call><name pos:line="16" pos:column="44">strerror<pos:position pos:line="16" pos:column="52"/></name><argument_list pos:line="16" pos:column="52">(<argument><expr><name pos:line="16" pos:column="53">errno<pos:position pos:line="16" pos:column="58"/></name></expr></argument>)<pos:position pos:line="16" pos:column="59"/></argument_list></call></expr></argument>)<pos:position pos:line="16" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="61"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="17" pos:column="7">exit_cleanup<pos:position pos:line="17" pos:column="19"/></name><argument_list pos:line="17" pos:column="19">(<argument><expr><literal type="number" pos:line="17" pos:column="20">1<pos:position pos:line="17" pos:column="21"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="23"/></expr_stmt>
    }<pos:position pos:line="18" pos:column="6"/></block></then></if>    
  }<pos:position pos:line="19" pos:column="4"/></block></then></if>

  <if pos:line="21" pos:column="3">if <condition pos:line="21" pos:column="6">(<expr><name pos:line="21" pos:column="7">delete_mode<pos:position pos:line="21" pos:column="18"/></name></expr>)<pos:position pos:line="21" pos:column="19"/></condition><then pos:line="21" pos:column="19">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="22" pos:column="5">recv_exclude_list<pos:position pos:line="22" pos:column="22"/></name><argument_list pos:line="22" pos:column="22">(<argument><expr><name pos:line="22" pos:column="23">STDIN_FILENO<pos:position pos:line="22" pos:column="35"/></name></expr></argument>)<pos:position pos:line="22" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="37"/></expr_stmt></block></then></if>

  <expr_stmt><expr><name pos:line="24" pos:column="3">flist<pos:position pos:line="24" pos:column="8"/></name> <operator pos:line="24" pos:column="9">=<pos:position pos:line="24" pos:column="10"/></operator> <call><name pos:line="24" pos:column="11">recv_file_list<pos:position pos:line="24" pos:column="25"/></name><argument_list pos:line="24" pos:column="25">(<argument><expr><name pos:line="24" pos:column="26">STDIN_FILENO<pos:position pos:line="24" pos:column="38"/></name></expr></argument>)<pos:position pos:line="24" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="40"/></expr_stmt>
  <if pos:line="25" pos:column="3">if <condition pos:line="25" pos:column="6">(<expr><operator pos:line="25" pos:column="7">!<pos:position pos:line="25" pos:column="8"/></operator><name pos:line="25" pos:column="8">flist<pos:position pos:line="25" pos:column="13"/></name> <operator pos:line="25" pos:column="14">||<pos:position pos:line="25" pos:column="16"/></operator> <name><name pos:line="25" pos:column="17">flist<pos:position pos:line="25" pos:column="22"/></name><operator pos:line="25" pos:column="22">-&gt;<pos:position pos:line="25" pos:column="27"/></operator><name pos:line="25" pos:column="24">count<pos:position pos:line="25" pos:column="29"/></name></name> <operator pos:line="25" pos:column="30">==<pos:position pos:line="25" pos:column="32"/></operator> <literal type="number" pos:line="25" pos:column="33">0<pos:position pos:line="25" pos:column="34"/></literal></expr>)<pos:position pos:line="25" pos:column="35"/></condition><then pos:line="25" pos:column="35"> <block pos:line="25" pos:column="36">{
    <expr_stmt><expr><call><name pos:line="26" pos:column="5">fprintf<pos:position pos:line="26" pos:column="12"/></name><argument_list pos:line="26" pos:column="12">(<argument><expr><name pos:line="26" pos:column="13">stderr<pos:position pos:line="26" pos:column="19"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="26" pos:column="20">"nothing to do\n"<pos:position pos:line="26" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="39"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="27" pos:column="5">exit_cleanup<pos:position pos:line="27" pos:column="17"/></name><argument_list pos:line="27" pos:column="17">(<argument><expr><literal type="number" pos:line="27" pos:column="18">1<pos:position pos:line="27" pos:column="19"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="21"/></expr_stmt>
  }<pos:position pos:line="28" pos:column="4"/></block></then></if>

  <if pos:line="30" pos:column="3">if <condition pos:line="30" pos:column="6">(<expr><name pos:line="30" pos:column="7">argc<pos:position pos:line="30" pos:column="11"/></name> <operator pos:line="30" pos:column="12">&gt;<pos:position pos:line="30" pos:column="16"/></operator> <literal type="number" pos:line="30" pos:column="14">0<pos:position pos:line="30" pos:column="15"/></literal></expr>)<pos:position pos:line="30" pos:column="16"/></condition><then pos:line="30" pos:column="16"> <block pos:line="30" pos:column="17">{    
    <if pos:line="31" pos:column="5">if <condition pos:line="31" pos:column="8">(<expr><call><name pos:line="31" pos:column="9">strcmp<pos:position pos:line="31" pos:column="15"/></name><argument_list pos:line="31" pos:column="15">(<argument><expr><name pos:line="31" pos:column="16">dir<pos:position pos:line="31" pos:column="19"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="31" pos:column="20">"."<pos:position pos:line="31" pos:column="23"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="24"/></argument_list></call></expr>)<pos:position pos:line="31" pos:column="25"/></condition><then pos:line="31" pos:column="25"> <block pos:line="31" pos:column="26">{
      <expr_stmt><expr><name><name pos:line="32" pos:column="7">argv<pos:position pos:line="32" pos:column="11"/></name><index pos:line="32" pos:column="11">[<expr><literal type="number" pos:line="32" pos:column="12">0<pos:position pos:line="32" pos:column="13"/></literal></expr>]<pos:position pos:line="32" pos:column="14"/></index></name> <operator pos:line="32" pos:column="15">+=<pos:position pos:line="32" pos:column="17"/></operator> <call><name pos:line="32" pos:column="18">strlen<pos:position pos:line="32" pos:column="24"/></name><argument_list pos:line="32" pos:column="24">(<argument><expr><name pos:line="32" pos:column="25">dir<pos:position pos:line="32" pos:column="28"/></name></expr></argument>)<pos:position pos:line="32" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="30"/></expr_stmt>
      <if pos:line="33" pos:column="7">if <condition pos:line="33" pos:column="10">(<expr><name><name pos:line="33" pos:column="11">argv<pos:position pos:line="33" pos:column="15"/></name><index pos:line="33" pos:column="15">[<expr><literal type="number" pos:line="33" pos:column="16">0<pos:position pos:line="33" pos:column="17"/></literal></expr>]<pos:position pos:line="33" pos:column="18"/></index><index pos:line="33" pos:column="18">[<expr><literal type="number" pos:line="33" pos:column="19">0<pos:position pos:line="33" pos:column="20"/></literal></expr>]<pos:position pos:line="33" pos:column="21"/></index></name> <operator pos:line="33" pos:column="22">==<pos:position pos:line="33" pos:column="24"/></operator> <literal type="char" pos:line="33" pos:column="25">'/'<pos:position pos:line="33" pos:column="28"/></literal></expr>)<pos:position pos:line="33" pos:column="29"/></condition><then pos:line="33" pos:column="29"> <block type="pseudo"><expr_stmt><expr><name><name pos:line="33" pos:column="30">argv<pos:position pos:line="33" pos:column="34"/></name><index pos:line="33" pos:column="34">[<expr><literal type="number" pos:line="33" pos:column="35">0<pos:position pos:line="33" pos:column="36"/></literal></expr>]<pos:position pos:line="33" pos:column="37"/></index></name><operator pos:line="33" pos:column="37">++<pos:position pos:line="33" pos:column="39"/></operator></expr>;<pos:position pos:line="33" pos:column="40"/></expr_stmt></block></then></if>
    }<pos:position pos:line="34" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="35" pos:column="5">local_name<pos:position pos:line="35" pos:column="15"/></name> <operator pos:line="35" pos:column="16">=<pos:position pos:line="35" pos:column="17"/></operator> <call><name pos:line="35" pos:column="18">get_local_name<pos:position pos:line="35" pos:column="32"/></name><argument_list pos:line="35" pos:column="32">(<argument><expr><name pos:line="35" pos:column="33">flist<pos:position pos:line="35" pos:column="38"/></name></expr></argument>,<argument><expr><name><name pos:line="35" pos:column="39">argv<pos:position pos:line="35" pos:column="43"/></name><index pos:line="35" pos:column="43">[<expr><literal type="number" pos:line="35" pos:column="44">0<pos:position pos:line="35" pos:column="45"/></literal></expr>]<pos:position pos:line="35" pos:column="46"/></index></name></expr></argument>)<pos:position pos:line="35" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="48"/></expr_stmt>
  }<pos:position pos:line="36" pos:column="4"/></block></then></if>

  <if pos:line="38" pos:column="3">if <condition pos:line="38" pos:column="6">(<expr><operator pos:line="38" pos:column="7">(<pos:position pos:line="38" pos:column="8"/></operator><name pos:line="38" pos:column="8">pid<pos:position pos:line="38" pos:column="11"/></name><operator pos:line="38" pos:column="11">=<pos:position pos:line="38" pos:column="12"/></operator><call><name pos:line="38" pos:column="12">fork<pos:position pos:line="38" pos:column="16"/></name><argument_list pos:line="38" pos:column="16">()<pos:position pos:line="38" pos:column="18"/></argument_list></call><operator pos:line="38" pos:column="18">)<pos:position pos:line="38" pos:column="19"/></operator> <operator pos:line="38" pos:column="20">==<pos:position pos:line="38" pos:column="22"/></operator> <literal type="number" pos:line="38" pos:column="23">0<pos:position pos:line="38" pos:column="24"/></literal></expr>)<pos:position pos:line="38" pos:column="25"/></condition><then pos:line="38" pos:column="25"> <block pos:line="38" pos:column="26">{
    <expr_stmt><expr><call><name pos:line="39" pos:column="5">recv_files<pos:position pos:line="39" pos:column="15"/></name><argument_list pos:line="39" pos:column="15">(<argument><expr><name pos:line="39" pos:column="16">STDIN_FILENO<pos:position pos:line="39" pos:column="28"/></name></expr></argument>,<argument><expr><name pos:line="39" pos:column="29">flist<pos:position pos:line="39" pos:column="34"/></name></expr></argument>,<argument><expr><name pos:line="39" pos:column="35">local_name<pos:position pos:line="39" pos:column="45"/></name></expr></argument>)<pos:position pos:line="39" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="47"/></expr_stmt>
    <if pos:line="40" pos:column="5">if <condition pos:line="40" pos:column="8">(<expr><name pos:line="40" pos:column="9">verbose<pos:position pos:line="40" pos:column="16"/></name> <operator pos:line="40" pos:column="17">&gt;<pos:position pos:line="40" pos:column="21"/></operator> <literal type="number" pos:line="40" pos:column="19">2<pos:position pos:line="40" pos:column="20"/></literal></expr>)<pos:position pos:line="40" pos:column="21"/></condition><then pos:line="40" pos:column="21">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="41" pos:column="7">fprintf<pos:position pos:line="41" pos:column="14"/></name><argument_list pos:line="41" pos:column="14">(<argument><expr><name pos:line="41" pos:column="15">stderr<pos:position pos:line="41" pos:column="21"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="41" pos:column="22">"receiver read %d\n"<pos:position pos:line="41" pos:column="42"/></literal></expr></argument>,<argument><expr><call><name pos:line="41" pos:column="43">read_total<pos:position pos:line="41" pos:column="53"/></name><argument_list pos:line="41" pos:column="53">()<pos:position pos:line="41" pos:column="55"/></argument_list></call></expr></argument>)<pos:position pos:line="41" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="57"/></expr_stmt></block></then></if>
    <expr_stmt><expr><call><name pos:line="42" pos:column="5">exit_cleanup<pos:position pos:line="42" pos:column="17"/></name><argument_list pos:line="42" pos:column="17">(<argument><expr><literal type="number" pos:line="42" pos:column="18">0<pos:position pos:line="42" pos:column="19"/></literal></expr></argument>)<pos:position pos:line="42" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="21"/></expr_stmt>
  }<pos:position pos:line="43" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="45" pos:column="3">generate_files<pos:position pos:line="45" pos:column="17"/></name><argument_list pos:line="45" pos:column="17">(<argument><expr><name pos:line="45" pos:column="18">STDOUT_FILENO<pos:position pos:line="45" pos:column="31"/></name></expr></argument>,<argument><expr><name pos:line="45" pos:column="32">flist<pos:position pos:line="45" pos:column="37"/></name></expr></argument>,<argument><expr><name pos:line="45" pos:column="38">local_name<pos:position pos:line="45" pos:column="48"/></name></expr></argument>)<pos:position pos:line="45" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="50"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="47" pos:column="3">waitpid<pos:position pos:line="47" pos:column="10"/></name><argument_list pos:line="47" pos:column="10">(<argument><expr><name pos:line="47" pos:column="11">pid<pos:position pos:line="47" pos:column="14"/></name></expr></argument>, <argument><expr><operator pos:line="47" pos:column="16">&amp;<pos:position pos:line="47" pos:column="21"/></operator><name pos:line="47" pos:column="17">status<pos:position pos:line="47" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="47" pos:column="25">0<pos:position pos:line="47" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="28"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="48" pos:column="3">exit_cleanup<pos:position pos:line="48" pos:column="15"/></name><argument_list pos:line="48" pos:column="15">(<argument><expr><name pos:line="48" pos:column="16">status<pos:position pos:line="48" pos:column="22"/></name></expr></argument>)<pos:position pos:line="48" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="24"/></expr_stmt>
}<pos:position pos:line="49" pos:column="2"/></block></function></unit>
