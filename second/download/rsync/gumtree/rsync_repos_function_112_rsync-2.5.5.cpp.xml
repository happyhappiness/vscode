<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_112_rsync-2.5.5.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">write_batch_argvs_file<pos:position pos:line="1" pos:column="28"/></name><parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><name pos:line="1" pos:column="29">int<pos:position pos:line="1" pos:column="32"/></name></type> <name pos:line="1" pos:column="33">argc<pos:position pos:line="1" pos:column="37"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="39">char<pos:position pos:line="1" pos:column="43"/></name> <modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier></type><name><name pos:line="1" pos:column="45">argv<pos:position pos:line="1" pos:column="49"/></name><index pos:line="1" pos:column="49">[]<pos:position pos:line="1" pos:column="51"/></index></name></decl></parameter>)<pos:position pos:line="1" pos:column="52"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">fdb<pos:position pos:line="3" pos:column="16"/></name></decl>;<pos:position pos:line="3" pos:column="17"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">i<pos:position pos:line="4" pos:column="14"/></name></decl>;<pos:position pos:line="4" pos:column="15"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">char<pos:position pos:line="5" pos:column="13"/></name></type> <name><name pos:line="5" pos:column="14">buff<pos:position pos:line="5" pos:column="18"/></name><index pos:line="5" pos:column="18">[<expr><literal type="number" pos:line="5" pos:column="19">256<pos:position pos:line="5" pos:column="22"/></literal></expr>]<pos:position pos:line="5" pos:column="23"/></index></name></decl>;<pos:position pos:line="5" pos:column="24"/></decl_stmt> <comment type="block" pos:line="5" pos:column="25">/* XXX */</comment>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">char<pos:position pos:line="6" pos:column="13"/></name></type> <name><name pos:line="6" pos:column="14">buff2<pos:position pos:line="6" pos:column="19"/></name><index pos:line="6" pos:column="19">[<expr><name pos:line="6" pos:column="20">MAXPATHLEN<pos:position pos:line="6" pos:column="30"/></name> <operator pos:line="6" pos:column="31">+<pos:position pos:line="6" pos:column="32"/></operator> <literal type="number" pos:line="6" pos:column="33">6<pos:position pos:line="6" pos:column="34"/></literal></expr>]<pos:position pos:line="6" pos:column="35"/></index></name></decl>;<pos:position pos:line="6" pos:column="36"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">char<pos:position pos:line="7" pos:column="13"/></name></type> <name><name pos:line="7" pos:column="14">filename<pos:position pos:line="7" pos:column="22"/></name><index pos:line="7" pos:column="22">[<expr><name pos:line="7" pos:column="23">MAXPATHLEN<pos:position pos:line="7" pos:column="33"/></name></expr>]<pos:position pos:line="7" pos:column="34"/></index></name></decl>;<pos:position pos:line="7" pos:column="35"/></decl_stmt>

	<comment type="block" pos:line="9" pos:column="9">/* Set up file extension */</comment>
	<expr_stmt><expr><call><name pos:line="10" pos:column="9">strlcpy<pos:position pos:line="10" pos:column="16"/></name><argument_list pos:line="10" pos:column="16">(<argument><expr><name pos:line="10" pos:column="17">filename<pos:position pos:line="10" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="27">batch_prefix<pos:position pos:line="10" pos:column="39"/></name></expr></argument>, <argument><expr><sizeof pos:line="10" pos:column="41">sizeof<argument_list pos:line="10" pos:column="47">(<argument><expr><name pos:line="10" pos:column="48">filename<pos:position pos:line="10" pos:column="56"/></name></expr></argument>)<pos:position pos:line="10" pos:column="57"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="10" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="59"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="11" pos:column="9">strlcat<pos:position pos:line="11" pos:column="16"/></name><argument_list pos:line="11" pos:column="16">(<argument><expr><name pos:line="11" pos:column="17">filename<pos:position pos:line="11" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="27">rsync_argvs_file<pos:position pos:line="11" pos:column="43"/></name></expr></argument>, <argument><expr><sizeof pos:line="11" pos:column="45">sizeof<argument_list pos:line="11" pos:column="51">(<argument><expr><name pos:line="11" pos:column="52">filename<pos:position pos:line="11" pos:column="60"/></name></expr></argument>)<pos:position pos:line="11" pos:column="61"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="11" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="63"/></expr_stmt>

	<comment type="block" pos:line="13" pos:column="9">/*
	 * Open batch argvs file for writing;
	 * create it if it doesn't exist
	 */</comment>
	<expr_stmt><expr><name pos:line="17" pos:column="9">fdb<pos:position pos:line="17" pos:column="12"/></name> <operator pos:line="17" pos:column="13">=<pos:position pos:line="17" pos:column="14"/></operator> <call><name pos:line="17" pos:column="15">do_open<pos:position pos:line="17" pos:column="22"/></name><argument_list pos:line="17" pos:column="22">(<argument><expr><name pos:line="17" pos:column="23">filename<pos:position pos:line="17" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="33">O_WRONLY<pos:position pos:line="17" pos:column="41"/></name> <operator pos:line="17" pos:column="42">|<pos:position pos:line="17" pos:column="43"/></operator> <name pos:line="17" pos:column="44">O_CREAT<pos:position pos:line="17" pos:column="51"/></name> <operator pos:line="17" pos:column="52">|<pos:position pos:line="17" pos:column="53"/></operator> <name pos:line="17" pos:column="54">O_TRUNC<pos:position pos:line="17" pos:column="61"/></name></expr></argument>,
		      <argument><expr><name pos:line="18" pos:column="23">S_IREAD<pos:position pos:line="18" pos:column="30"/></name> <operator pos:line="18" pos:column="31">|<pos:position pos:line="18" pos:column="32"/></operator> <name pos:line="18" pos:column="33">S_IWRITE<pos:position pos:line="18" pos:column="41"/></name> <operator pos:line="18" pos:column="42">|<pos:position pos:line="18" pos:column="43"/></operator> <name pos:line="18" pos:column="44">S_IEXEC<pos:position pos:line="18" pos:column="51"/></name></expr></argument>)<pos:position pos:line="18" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="53"/></expr_stmt>
	<if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><name pos:line="19" pos:column="13">fdb<pos:position pos:line="19" pos:column="16"/></name> <operator pos:line="19" pos:column="17">==<pos:position pos:line="19" pos:column="19"/></operator> <operator pos:line="19" pos:column="20">-<pos:position pos:line="19" pos:column="21"/></operator><literal type="number" pos:line="19" pos:column="21">1<pos:position pos:line="19" pos:column="22"/></literal></expr>)<pos:position pos:line="19" pos:column="23"/></condition><then pos:line="19" pos:column="23"> <block pos:line="19" pos:column="24">{
		<expr_stmt><expr><call><name pos:line="20" pos:column="17">rprintf<pos:position pos:line="20" pos:column="24"/></name><argument_list pos:line="20" pos:column="24">(<argument><expr><name pos:line="20" pos:column="25">FERROR<pos:position pos:line="20" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="33">"Batch file %s open error: %s\n"<pos:position pos:line="20" pos:column="65"/></literal></expr></argument>,
			<argument><expr><name pos:line="21" pos:column="25">filename<pos:position pos:line="21" pos:column="33"/></name></expr></argument>, <argument><expr><call><name pos:line="21" pos:column="35">strerror<pos:position pos:line="21" pos:column="43"/></name><argument_list pos:line="21" pos:column="43">(<argument><expr><name pos:line="21" pos:column="44">errno<pos:position pos:line="21" pos:column="49"/></name></expr></argument>)<pos:position pos:line="21" pos:column="50"/></argument_list></call></expr></argument>)<pos:position pos:line="21" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="52"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="22" pos:column="17">close<pos:position pos:line="22" pos:column="22"/></name><argument_list pos:line="22" pos:column="22">(<argument><expr><name pos:line="22" pos:column="23">fdb<pos:position pos:line="22" pos:column="26"/></name></expr></argument>)<pos:position pos:line="22" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="28"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="23" pos:column="17">exit_cleanup<pos:position pos:line="23" pos:column="29"/></name><argument_list pos:line="23" pos:column="29">(<argument><expr><literal type="number" pos:line="23" pos:column="30">1<pos:position pos:line="23" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="33"/></expr_stmt>
	}<pos:position pos:line="24" pos:column="10"/></block></then></if>
	<expr_stmt><expr><name><name pos:line="25" pos:column="9">buff<pos:position pos:line="25" pos:column="13"/></name><index pos:line="25" pos:column="13">[<expr><literal type="number" pos:line="25" pos:column="14">0<pos:position pos:line="25" pos:column="15"/></literal></expr>]<pos:position pos:line="25" pos:column="16"/></index></name> <operator pos:line="25" pos:column="17">=<pos:position pos:line="25" pos:column="18"/></operator> <literal type="char" pos:line="25" pos:column="19">'\0'<pos:position pos:line="25" pos:column="23"/></literal></expr>;<pos:position pos:line="25" pos:column="24"/></expr_stmt>

	<comment type="block" pos:line="27" pos:column="9">/* Write argvs info to batch file */</comment>

	<for pos:line="29" pos:column="9">for <control pos:line="29" pos:column="13">(<init><expr><name pos:line="29" pos:column="14">i<pos:position pos:line="29" pos:column="15"/></name> <operator pos:line="29" pos:column="16">=<pos:position pos:line="29" pos:column="17"/></operator> <literal type="number" pos:line="29" pos:column="18">0<pos:position pos:line="29" pos:column="19"/></literal></expr>;<pos:position pos:line="29" pos:column="20"/></init> <condition><expr><name pos:line="29" pos:column="21">i<pos:position pos:line="29" pos:column="22"/></name> <operator pos:line="29" pos:column="23">&lt;<pos:position pos:line="29" pos:column="27"/></operator> <name pos:line="29" pos:column="25">argc<pos:position pos:line="29" pos:column="29"/></name></expr>;<pos:position pos:line="29" pos:column="30"/></condition> <incr><expr><operator pos:line="29" pos:column="31">++<pos:position pos:line="29" pos:column="33"/></operator><name pos:line="29" pos:column="33">i<pos:position pos:line="29" pos:column="34"/></name></expr></incr>)<pos:position pos:line="29" pos:column="35"/></control> <block pos:line="29" pos:column="36">{
		<if pos:line="30" pos:column="17">if <condition pos:line="30" pos:column="20">(<expr><name pos:line="30" pos:column="21">i<pos:position pos:line="30" pos:column="22"/></name> <operator pos:line="30" pos:column="23">==<pos:position pos:line="30" pos:column="25"/></operator> <name pos:line="30" pos:column="26">argc<pos:position pos:line="30" pos:column="30"/></name> <operator pos:line="30" pos:column="31">-<pos:position pos:line="30" pos:column="32"/></operator> <literal type="number" pos:line="30" pos:column="33">2<pos:position pos:line="30" pos:column="34"/></literal></expr>)<pos:position pos:line="30" pos:column="35"/></condition><then pos:line="30" pos:column="35"> <comment type="block" pos:line="30" pos:column="36">/* Skip source directory on cmdline */</comment>
		    <block type="pseudo"><continue pos:line="31" pos:column="21">continue;<pos:position pos:line="31" pos:column="30"/></continue></block></then></if>
		<comment type="block" pos:line="32" pos:column="17">/*
		 * FIXME:
		 * I think directly manipulating argv[] is probably bogus
		 */</comment>
		<if pos:line="36" pos:column="17">if <condition pos:line="36" pos:column="20">(<expr><operator pos:line="36" pos:column="21">!<pos:position pos:line="36" pos:column="22"/></operator><call><name pos:line="36" pos:column="22">strncmp<pos:position pos:line="36" pos:column="29"/></name><argument_list pos:line="36" pos:column="29">(<argument><expr><name><name pos:line="36" pos:column="30">argv<pos:position pos:line="36" pos:column="34"/></name><index pos:line="36" pos:column="34">[<expr><name pos:line="36" pos:column="35">i<pos:position pos:line="36" pos:column="36"/></name></expr>]<pos:position pos:line="36" pos:column="37"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="36" pos:column="39">"--write-batch"<pos:position pos:line="36" pos:column="54"/></literal></expr></argument>,
			<argument><expr><call><name pos:line="37" pos:column="25">strlen<pos:position pos:line="37" pos:column="31"/></name><argument_list pos:line="37" pos:column="31">(<argument><expr><literal type="string" pos:line="37" pos:column="32">"--write-batch"<pos:position pos:line="37" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="48"/></argument_list></call></expr></argument>)<pos:position pos:line="37" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="37" pos:column="50"/></condition><then pos:line="37" pos:column="50"> <block pos:line="37" pos:column="51">{
			<comment type="block" pos:line="38" pos:column="25">/* Safer to change it here than script */</comment>
			<comment type="block" pos:line="39" pos:column="25">/*
			 * Change to --read-batch=prefix
			 * to get ready for remote
			 */</comment>
			<expr_stmt><expr><call><name pos:line="43" pos:column="25">strlcat<pos:position pos:line="43" pos:column="32"/></name><argument_list pos:line="43" pos:column="32">(<argument><expr><name pos:line="43" pos:column="33">buff<pos:position pos:line="43" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="43" pos:column="39">"--read-batch="<pos:position pos:line="43" pos:column="54"/></literal></expr></argument>, <argument><expr><sizeof pos:line="43" pos:column="56">sizeof<argument_list pos:line="43" pos:column="62">(<argument><expr><name pos:line="43" pos:column="63">buff<pos:position pos:line="43" pos:column="67"/></name></expr></argument>)<pos:position pos:line="43" pos:column="68"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="43" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="70"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="44" pos:column="25">strlcat<pos:position pos:line="44" pos:column="32"/></name><argument_list pos:line="44" pos:column="32">(<argument><expr><name pos:line="44" pos:column="33">buff<pos:position pos:line="44" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="39">batch_prefix<pos:position pos:line="44" pos:column="51"/></name></expr></argument>, <argument><expr><sizeof pos:line="44" pos:column="53">sizeof<argument_list pos:line="44" pos:column="59">(<argument><expr><name pos:line="44" pos:column="60">buff<pos:position pos:line="44" pos:column="64"/></name></expr></argument>)<pos:position pos:line="44" pos:column="65"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="44" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="67"/></expr_stmt>
		}<pos:position pos:line="45" pos:column="18"/></block></then> <elseif pos:line="45" pos:column="19">else
		<if pos:line="46" pos:column="17">if <condition pos:line="46" pos:column="20">(<expr><name pos:line="46" pos:column="21">i<pos:position pos:line="46" pos:column="22"/></name> <operator pos:line="46" pos:column="23">==<pos:position pos:line="46" pos:column="25"/></operator> <name pos:line="46" pos:column="26">argc<pos:position pos:line="46" pos:column="30"/></name> <operator pos:line="46" pos:column="31">-<pos:position pos:line="46" pos:column="32"/></operator> <literal type="number" pos:line="46" pos:column="33">1<pos:position pos:line="46" pos:column="34"/></literal></expr>)<pos:position pos:line="46" pos:column="35"/></condition><then pos:line="46" pos:column="35"> <block pos:line="46" pos:column="36">{
		    <expr_stmt><expr><call><name pos:line="47" pos:column="21">snprintf<pos:position pos:line="47" pos:column="29"/></name><argument_list pos:line="47" pos:column="29">(<argument><expr><name pos:line="47" pos:column="30">buff2<pos:position pos:line="47" pos:column="35"/></name></expr></argument>, <argument><expr><sizeof pos:line="47" pos:column="37">sizeof<argument_list pos:line="47" pos:column="43">(<argument><expr><name pos:line="47" pos:column="44">buff2<pos:position pos:line="47" pos:column="49"/></name></expr></argument>)<pos:position pos:line="47" pos:column="50"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="47" pos:column="52">"${1:-%s}"<pos:position pos:line="47" pos:column="62"/></literal></expr></argument>, <argument><expr><name><name pos:line="47" pos:column="64">argv<pos:position pos:line="47" pos:column="68"/></name><index pos:line="47" pos:column="68">[<expr><name pos:line="47" pos:column="69">i<pos:position pos:line="47" pos:column="70"/></name></expr>]<pos:position pos:line="47" pos:column="71"/></index></name></expr></argument>)<pos:position pos:line="47" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="73"/></expr_stmt>
		    <expr_stmt><expr><call><name pos:line="48" pos:column="21">strlcat<pos:position pos:line="48" pos:column="28"/></name><argument_list pos:line="48" pos:column="28">(<argument><expr><name pos:line="48" pos:column="29">buff<pos:position pos:line="48" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="35">buff2<pos:position pos:line="48" pos:column="40"/></name></expr></argument>, <argument><expr><sizeof pos:line="48" pos:column="42">sizeof<argument_list pos:line="48" pos:column="48">(<argument><expr><name pos:line="48" pos:column="49">buff<pos:position pos:line="48" pos:column="53"/></name></expr></argument>)<pos:position pos:line="48" pos:column="54"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="48" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="56"/></expr_stmt>
		}<pos:position pos:line="49" pos:column="18"/></block></then></if></elseif>
		<else pos:line="50" pos:column="17">else <block pos:line="50" pos:column="22">{
			<expr_stmt><expr><call><name pos:line="51" pos:column="25">strlcat<pos:position pos:line="51" pos:column="32"/></name><argument_list pos:line="51" pos:column="32">(<argument><expr><name pos:line="51" pos:column="33">buff<pos:position pos:line="51" pos:column="37"/></name></expr></argument>, <argument><expr><name><name pos:line="51" pos:column="39">argv<pos:position pos:line="51" pos:column="43"/></name><index pos:line="51" pos:column="43">[<expr><name pos:line="51" pos:column="44">i<pos:position pos:line="51" pos:column="45"/></name></expr>]<pos:position pos:line="51" pos:column="46"/></index></name></expr></argument>, <argument><expr><sizeof pos:line="51" pos:column="48">sizeof<argument_list pos:line="51" pos:column="54">(<argument><expr><name pos:line="51" pos:column="55">buff<pos:position pos:line="51" pos:column="59"/></name></expr></argument>)<pos:position pos:line="51" pos:column="60"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="51" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="62"/></expr_stmt>
		}<pos:position pos:line="52" pos:column="18"/></block></else></if>

		<if pos:line="54" pos:column="17">if <condition pos:line="54" pos:column="20">(<expr><name pos:line="54" pos:column="21">i<pos:position pos:line="54" pos:column="22"/></name> <operator pos:line="54" pos:column="23">&lt;<pos:position pos:line="54" pos:column="27"/></operator> <operator pos:line="54" pos:column="25">(<pos:position pos:line="54" pos:column="26"/></operator><name pos:line="54" pos:column="26">argc<pos:position pos:line="54" pos:column="30"/></name> <operator pos:line="54" pos:column="31">-<pos:position pos:line="54" pos:column="32"/></operator> <literal type="number" pos:line="54" pos:column="33">1<pos:position pos:line="54" pos:column="34"/></literal><operator pos:line="54" pos:column="34">)<pos:position pos:line="54" pos:column="35"/></operator></expr>)<pos:position pos:line="54" pos:column="36"/></condition><then pos:line="54" pos:column="36"> <block pos:line="54" pos:column="37">{
			<expr_stmt><expr><call><name pos:line="55" pos:column="25">strlcat<pos:position pos:line="55" pos:column="32"/></name><argument_list pos:line="55" pos:column="32">(<argument><expr><name pos:line="55" pos:column="33">buff<pos:position pos:line="55" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="55" pos:column="39">" "<pos:position pos:line="55" pos:column="42"/></literal></expr></argument>, <argument><expr><sizeof pos:line="55" pos:column="44">sizeof<argument_list pos:line="55" pos:column="50">(<argument><expr><name pos:line="55" pos:column="51">buff<pos:position pos:line="55" pos:column="55"/></name></expr></argument>)<pos:position pos:line="55" pos:column="56"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="55" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="58"/></expr_stmt>
		}<pos:position pos:line="56" pos:column="18"/></block></then></if>
	}<pos:position pos:line="57" pos:column="10"/></block></for>
	<expr_stmt><expr><call><name pos:line="58" pos:column="9">strlcat<pos:position pos:line="58" pos:column="16"/></name><argument_list pos:line="58" pos:column="16">(<argument><expr><name pos:line="58" pos:column="17">buff<pos:position pos:line="58" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="58" pos:column="23">"\n"<pos:position pos:line="58" pos:column="27"/></literal></expr></argument>, <argument><expr><sizeof pos:line="58" pos:column="29">sizeof<argument_list pos:line="58" pos:column="35">(<argument><expr><name pos:line="58" pos:column="36">buff<pos:position pos:line="58" pos:column="40"/></name></expr></argument>)<pos:position pos:line="58" pos:column="41"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="58" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="43"/></expr_stmt>
	<if pos:line="59" pos:column="9">if <condition pos:line="59" pos:column="12">(<expr><operator pos:line="59" pos:column="13">!<pos:position pos:line="59" pos:column="14"/></operator><call><name pos:line="59" pos:column="14">write<pos:position pos:line="59" pos:column="19"/></name><argument_list pos:line="59" pos:column="19">(<argument><expr><name pos:line="59" pos:column="20">fdb<pos:position pos:line="59" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="25">buff<pos:position pos:line="59" pos:column="29"/></name></expr></argument>, <argument><expr><call><name pos:line="59" pos:column="31">strlen<pos:position pos:line="59" pos:column="37"/></name><argument_list pos:line="59" pos:column="37">(<argument><expr><name pos:line="59" pos:column="38">buff<pos:position pos:line="59" pos:column="42"/></name></expr></argument>)<pos:position pos:line="59" pos:column="43"/></argument_list></call></expr></argument>)<pos:position pos:line="59" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="59" pos:column="45"/></condition><then pos:line="59" pos:column="45"> <block pos:line="59" pos:column="46">{
		<expr_stmt><expr><call><name pos:line="60" pos:column="17">rprintf<pos:position pos:line="60" pos:column="24"/></name><argument_list pos:line="60" pos:column="24">(<argument><expr><name pos:line="60" pos:column="25">FERROR<pos:position pos:line="60" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="60" pos:column="33">"Batch file %s write error: %s\n"<pos:position pos:line="60" pos:column="66"/></literal></expr></argument>,
			<argument><expr><name pos:line="61" pos:column="25">filename<pos:position pos:line="61" pos:column="33"/></name></expr></argument>, <argument><expr><call><name pos:line="61" pos:column="35">strerror<pos:position pos:line="61" pos:column="43"/></name><argument_list pos:line="61" pos:column="43">(<argument><expr><name pos:line="61" pos:column="44">errno<pos:position pos:line="61" pos:column="49"/></name></expr></argument>)<pos:position pos:line="61" pos:column="50"/></argument_list></call></expr></argument>)<pos:position pos:line="61" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="52"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="62" pos:column="17">close<pos:position pos:line="62" pos:column="22"/></name><argument_list pos:line="62" pos:column="22">(<argument><expr><name pos:line="62" pos:column="23">fdb<pos:position pos:line="62" pos:column="26"/></name></expr></argument>)<pos:position pos:line="62" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="28"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="63" pos:column="17">exit_cleanup<pos:position pos:line="63" pos:column="29"/></name><argument_list pos:line="63" pos:column="29">(<argument><expr><literal type="number" pos:line="63" pos:column="30">1<pos:position pos:line="63" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="63" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="33"/></expr_stmt>
	}<pos:position pos:line="64" pos:column="10"/></block></then></if>
	<expr_stmt><expr><call><name pos:line="65" pos:column="9">close<pos:position pos:line="65" pos:column="14"/></name><argument_list pos:line="65" pos:column="14">(<argument><expr><name pos:line="65" pos:column="15">fdb<pos:position pos:line="65" pos:column="18"/></name></expr></argument>)<pos:position pos:line="65" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="20"/></expr_stmt>
}<pos:position pos:line="66" pos:column="2"/></block></function></unit>
