<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_67_rsync-2.0.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">writefd<pos:position pos:line="1" pos:column="19"/></name><parameter_list pos:line="1" pos:column="19">(<parameter><decl><type><name pos:line="1" pos:column="20">int<pos:position pos:line="1" pos:column="23"/></name></type> <name pos:line="1" pos:column="24">fd<pos:position pos:line="1" pos:column="26"/></name></decl></parameter>,<parameter><decl><type><name pos:line="1" pos:column="27">char<pos:position pos:line="1" pos:column="31"/></name> <modifier pos:line="1" pos:column="32">*<pos:position pos:line="1" pos:column="33"/></modifier></type><name pos:line="1" pos:column="33">buf<pos:position pos:line="1" pos:column="36"/></name></decl></parameter>,<parameter><decl><type><name pos:line="1" pos:column="37">int<pos:position pos:line="1" pos:column="40"/></name></type> <name pos:line="1" pos:column="41">len1<pos:position pos:line="1" pos:column="45"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="46"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">len<pos:position pos:line="3" pos:column="16"/></name> <init pos:line="3" pos:column="17">= <expr><name pos:line="3" pos:column="19">len1<pos:position pos:line="3" pos:column="23"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="24"/></decl_stmt>

	<if pos:line="5" pos:column="9">if <condition pos:line="5" pos:column="12">(<expr><operator pos:line="5" pos:column="13">!<pos:position pos:line="5" pos:column="14"/></operator><name pos:line="5" pos:column="14">io_buffer<pos:position pos:line="5" pos:column="23"/></name></expr>)<pos:position pos:line="5" pos:column="24"/></condition><then pos:line="5" pos:column="24"> <block type="pseudo"><return pos:line="5" pos:column="25">return <expr><call><name pos:line="5" pos:column="32">writefd_unbuffered<pos:position pos:line="5" pos:column="50"/></name><argument_list pos:line="5" pos:column="50">(<argument><expr><name pos:line="5" pos:column="51">fd<pos:position pos:line="5" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="5" pos:column="55">buf<pos:position pos:line="5" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="5" pos:column="60">len<pos:position pos:line="5" pos:column="63"/></name></expr></argument>)<pos:position pos:line="5" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="65"/></return></block></then></if>

	<while pos:line="7" pos:column="9">while <condition pos:line="7" pos:column="15">(<expr><name pos:line="7" pos:column="16">len<pos:position pos:line="7" pos:column="19"/></name></expr>)<pos:position pos:line="7" pos:column="20"/></condition> <block pos:line="7" pos:column="21">{
		<decl_stmt><decl><type><name pos:line="8" pos:column="17">int<pos:position pos:line="8" pos:column="20"/></name></type> <name pos:line="8" pos:column="21">n<pos:position pos:line="8" pos:column="22"/></name> <init pos:line="8" pos:column="23">= <expr><call><name pos:line="8" pos:column="25">MIN<pos:position pos:line="8" pos:column="28"/></name><argument_list pos:line="8" pos:column="28">(<argument><expr><name pos:line="8" pos:column="29">len<pos:position pos:line="8" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="34">IO_BUFFER_SIZE<pos:position pos:line="8" pos:column="48"/></name><operator pos:line="8" pos:column="48">-<pos:position pos:line="8" pos:column="49"/></operator><name pos:line="8" pos:column="49">io_buffer_count<pos:position pos:line="8" pos:column="64"/></name></expr></argument>)<pos:position pos:line="8" pos:column="65"/></argument_list></call></expr></init></decl>;<pos:position pos:line="8" pos:column="66"/></decl_stmt>
		<if pos:line="9" pos:column="17">if <condition pos:line="9" pos:column="20">(<expr><name pos:line="9" pos:column="21">n<pos:position pos:line="9" pos:column="22"/></name> <operator pos:line="9" pos:column="23">&gt;<pos:position pos:line="9" pos:column="27"/></operator> <literal type="number" pos:line="9" pos:column="25">0<pos:position pos:line="9" pos:column="26"/></literal></expr>)<pos:position pos:line="9" pos:column="27"/></condition><then pos:line="9" pos:column="27"> <block pos:line="9" pos:column="28">{
			<expr_stmt><expr><call><name pos:line="10" pos:column="25">memcpy<pos:position pos:line="10" pos:column="31"/></name><argument_list pos:line="10" pos:column="31">(<argument><expr><name pos:line="10" pos:column="32">io_buffer<pos:position pos:line="10" pos:column="41"/></name><operator pos:line="10" pos:column="41">+<pos:position pos:line="10" pos:column="42"/></operator><name pos:line="10" pos:column="42">io_buffer_count<pos:position pos:line="10" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="59">buf<pos:position pos:line="10" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="64">n<pos:position pos:line="10" pos:column="65"/></name></expr></argument>)<pos:position pos:line="10" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="67"/></expr_stmt>
			<expr_stmt><expr><name pos:line="11" pos:column="25">buf<pos:position pos:line="11" pos:column="28"/></name> <operator pos:line="11" pos:column="29">+=<pos:position pos:line="11" pos:column="31"/></operator> <name pos:line="11" pos:column="32">n<pos:position pos:line="11" pos:column="33"/></name></expr>;<pos:position pos:line="11" pos:column="34"/></expr_stmt>
			<expr_stmt><expr><name pos:line="12" pos:column="25">len<pos:position pos:line="12" pos:column="28"/></name> <operator pos:line="12" pos:column="29">-=<pos:position pos:line="12" pos:column="31"/></operator> <name pos:line="12" pos:column="32">n<pos:position pos:line="12" pos:column="33"/></name></expr>;<pos:position pos:line="12" pos:column="34"/></expr_stmt>
			<expr_stmt><expr><name pos:line="13" pos:column="25">io_buffer_count<pos:position pos:line="13" pos:column="40"/></name> <operator pos:line="13" pos:column="41">+=<pos:position pos:line="13" pos:column="43"/></operator> <name pos:line="13" pos:column="44">n<pos:position pos:line="13" pos:column="45"/></name></expr>;<pos:position pos:line="13" pos:column="46"/></expr_stmt>
		}<pos:position pos:line="14" pos:column="18"/></block></then></if>
		
		<if pos:line="16" pos:column="17">if <condition pos:line="16" pos:column="20">(<expr><name pos:line="16" pos:column="21">io_buffer_count<pos:position pos:line="16" pos:column="36"/></name> <operator pos:line="16" pos:column="37">==<pos:position pos:line="16" pos:column="39"/></operator> <name pos:line="16" pos:column="40">IO_BUFFER_SIZE<pos:position pos:line="16" pos:column="54"/></name></expr>)<pos:position pos:line="16" pos:column="55"/></condition><then pos:line="16" pos:column="55"> <block pos:line="16" pos:column="56">{
			<if pos:line="17" pos:column="25">if <condition pos:line="17" pos:column="28">(<expr><call><name pos:line="17" pos:column="29">writefd_unbuffered<pos:position pos:line="17" pos:column="47"/></name><argument_list pos:line="17" pos:column="47">(<argument><expr><name pos:line="17" pos:column="48">fd<pos:position pos:line="17" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="52">io_buffer<pos:position pos:line="17" pos:column="61"/></name></expr></argument>, 
					       <argument><expr><name pos:line="18" pos:column="48">io_buffer_count<pos:position pos:line="18" pos:column="63"/></name></expr></argument>)<pos:position pos:line="18" pos:column="64"/></argument_list></call> <operator pos:line="18" pos:column="65">!=<pos:position pos:line="18" pos:column="67"/></operator> 
			    <name pos:line="19" pos:column="29">io_buffer_count<pos:position pos:line="19" pos:column="44"/></name></expr>)<pos:position pos:line="19" pos:column="45"/></condition><then pos:line="19" pos:column="45"> <block pos:line="19" pos:column="46">{
				<return pos:line="20" pos:column="33">return <expr><operator pos:line="20" pos:column="40">-<pos:position pos:line="20" pos:column="41"/></operator><literal type="number" pos:line="20" pos:column="41">1<pos:position pos:line="20" pos:column="42"/></literal></expr>;<pos:position pos:line="20" pos:column="43"/></return>
			}<pos:position pos:line="21" pos:column="26"/></block></then></if>
			<expr_stmt><expr><name pos:line="22" pos:column="25">io_buffer_count<pos:position pos:line="22" pos:column="40"/></name> <operator pos:line="22" pos:column="41">=<pos:position pos:line="22" pos:column="42"/></operator> <literal type="number" pos:line="22" pos:column="43">0<pos:position pos:line="22" pos:column="44"/></literal></expr>;<pos:position pos:line="22" pos:column="45"/></expr_stmt>
		}<pos:position pos:line="23" pos:column="18"/></block></then></if>
	}<pos:position pos:line="24" pos:column="10"/></block></while>

	<return pos:line="26" pos:column="9">return <expr><name pos:line="26" pos:column="16">len1<pos:position pos:line="26" pos:column="20"/></name></expr>;<pos:position pos:line="26" pos:column="21"/></return>
}<pos:position pos:line="27" pos:column="2"/></block></function></unit>
