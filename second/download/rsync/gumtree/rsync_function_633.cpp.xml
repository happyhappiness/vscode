<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_function_633.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name><name pos:line="1" pos:column="8">struct<pos:position pos:line="1" pos:column="14"/></name> <name pos:line="1" pos:column="15">exclude_struct<pos:position pos:line="1" pos:column="29"/></name></name> <modifier pos:line="1" pos:column="30">*<pos:position pos:line="1" pos:column="31"/></modifier></type><name pos:line="1" pos:column="31">make_exclude<pos:position pos:line="1" pos:column="43"/></name><parameter_list pos:line="1" pos:column="43">(<parameter><decl><type><name pos:line="1" pos:column="44">char<pos:position pos:line="1" pos:column="48"/></name> <modifier pos:line="1" pos:column="49">*<pos:position pos:line="1" pos:column="50"/></modifier></type><name pos:line="1" pos:column="50">pattern<pos:position pos:line="1" pos:column="57"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="59">int<pos:position pos:line="1" pos:column="62"/></name></type> <name pos:line="1" pos:column="63">include<pos:position pos:line="1" pos:column="70"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="71"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">exclude_struct<pos:position pos:line="3" pos:column="30"/></name></name> <modifier pos:line="3" pos:column="31">*<pos:position pos:line="3" pos:column="32"/></modifier></type><name pos:line="3" pos:column="32">ret<pos:position pos:line="3" pos:column="35"/></name></decl>;<pos:position pos:line="3" pos:column="36"/></decl_stmt>

	<expr_stmt><expr><name pos:line="5" pos:column="9">ret<pos:position pos:line="5" pos:column="12"/></name> <operator pos:line="5" pos:column="13">=<pos:position pos:line="5" pos:column="14"/></operator> <operator pos:line="5" pos:column="15">(<pos:position pos:line="5" pos:column="16"/></operator>struct <name pos:line="5" pos:column="23">exclude_struct<pos:position pos:line="5" pos:column="37"/></name> <operator pos:line="5" pos:column="38">*<pos:position pos:line="5" pos:column="39"/></operator><operator pos:line="5" pos:column="39">)<pos:position pos:line="5" pos:column="40"/></operator><call><name pos:line="5" pos:column="40">malloc<pos:position pos:line="5" pos:column="46"/></name><argument_list pos:line="5" pos:column="46">(<argument><expr><sizeof pos:line="5" pos:column="47">sizeof<argument_list pos:line="5" pos:column="53">(<argument><expr><operator pos:line="5" pos:column="54">*<pos:position pos:line="5" pos:column="55"/></operator><name pos:line="5" pos:column="55">ret<pos:position pos:line="5" pos:column="58"/></name></expr></argument>)<pos:position pos:line="5" pos:column="59"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="5" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="61"/></expr_stmt>
	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><operator pos:line="6" pos:column="13">!<pos:position pos:line="6" pos:column="14"/></operator><name pos:line="6" pos:column="14">ret<pos:position pos:line="6" pos:column="17"/></name></expr>)<pos:position pos:line="6" pos:column="18"/></condition><then pos:line="6" pos:column="18"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="6" pos:column="19">out_of_memory<pos:position pos:line="6" pos:column="32"/></name><argument_list pos:line="6" pos:column="32">(<argument><expr><literal type="string" pos:line="6" pos:column="33">"make_exclude"<pos:position pos:line="6" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="49"/></expr_stmt></block></then></if>

	<expr_stmt><expr><call><name pos:line="8" pos:column="9">memset<pos:position pos:line="8" pos:column="15"/></name><argument_list pos:line="8" pos:column="15">(<argument><expr><name pos:line="8" pos:column="16">ret<pos:position pos:line="8" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="8" pos:column="21">0<pos:position pos:line="8" pos:column="22"/></literal></expr></argument>, <argument><expr><sizeof pos:line="8" pos:column="24">sizeof<argument_list pos:line="8" pos:column="30">(<argument><expr><operator pos:line="8" pos:column="31">*<pos:position pos:line="8" pos:column="32"/></operator><name pos:line="8" pos:column="32">ret<pos:position pos:line="8" pos:column="35"/></name></expr></argument>)<pos:position pos:line="8" pos:column="36"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="8" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="38"/></expr_stmt>

	<expr_stmt><expr><name><name pos:line="10" pos:column="9">ret<pos:position pos:line="10" pos:column="12"/></name><operator pos:line="10" pos:column="12">-&gt;<pos:position pos:line="10" pos:column="17"/></operator><name pos:line="10" pos:column="14">orig<pos:position pos:line="10" pos:column="18"/></name></name> <operator pos:line="10" pos:column="19">=<pos:position pos:line="10" pos:column="20"/></operator> <call><name pos:line="10" pos:column="21">strdup<pos:position pos:line="10" pos:column="27"/></name><argument_list pos:line="10" pos:column="27">(<argument><expr><name pos:line="10" pos:column="28">pattern<pos:position pos:line="10" pos:column="35"/></name></expr></argument>)<pos:position pos:line="10" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="37"/></expr_stmt>

	<if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><call><name pos:line="12" pos:column="13">strncmp<pos:position pos:line="12" pos:column="20"/></name><argument_list pos:line="12" pos:column="20">(<argument><expr><name pos:line="12" pos:column="21">pattern<pos:position pos:line="12" pos:column="28"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="12" pos:column="29">"- "<pos:position pos:line="12" pos:column="33"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="12" pos:column="34">2<pos:position pos:line="12" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="36"/></argument_list></call> <operator pos:line="12" pos:column="37">==<pos:position pos:line="12" pos:column="39"/></operator> <literal type="number" pos:line="12" pos:column="40">0<pos:position pos:line="12" pos:column="41"/></literal></expr>)<pos:position pos:line="12" pos:column="42"/></condition><then pos:line="12" pos:column="42"> <block pos:line="12" pos:column="43">{
		<expr_stmt><expr><name pos:line="13" pos:column="17">pattern<pos:position pos:line="13" pos:column="24"/></name> <operator pos:line="13" pos:column="25">+=<pos:position pos:line="13" pos:column="27"/></operator> <literal type="number" pos:line="13" pos:column="28">2<pos:position pos:line="13" pos:column="29"/></literal></expr>;<pos:position pos:line="13" pos:column="30"/></expr_stmt>
	}<pos:position pos:line="14" pos:column="10"/></block></then> <elseif pos:line="14" pos:column="11">else <if pos:line="14" pos:column="16">if <condition pos:line="14" pos:column="19">(<expr><call><name pos:line="14" pos:column="20">strncmp<pos:position pos:line="14" pos:column="27"/></name><argument_list pos:line="14" pos:column="27">(<argument><expr><name pos:line="14" pos:column="28">pattern<pos:position pos:line="14" pos:column="35"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="14" pos:column="36">"+ "<pos:position pos:line="14" pos:column="40"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="14" pos:column="41">2<pos:position pos:line="14" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="43"/></argument_list></call> <operator pos:line="14" pos:column="44">==<pos:position pos:line="14" pos:column="46"/></operator> <literal type="number" pos:line="14" pos:column="47">0<pos:position pos:line="14" pos:column="48"/></literal></expr>)<pos:position pos:line="14" pos:column="49"/></condition><then pos:line="14" pos:column="49"> <block pos:line="14" pos:column="50">{
		<expr_stmt><expr><name><name pos:line="15" pos:column="17">ret<pos:position pos:line="15" pos:column="20"/></name><operator pos:line="15" pos:column="20">-&gt;<pos:position pos:line="15" pos:column="25"/></operator><name pos:line="15" pos:column="22">include<pos:position pos:line="15" pos:column="29"/></name></name> <operator pos:line="15" pos:column="30">=<pos:position pos:line="15" pos:column="31"/></operator> <literal type="number" pos:line="15" pos:column="32">1<pos:position pos:line="15" pos:column="33"/></literal></expr>;<pos:position pos:line="15" pos:column="34"/></expr_stmt>
		<expr_stmt><expr><name pos:line="16" pos:column="17">pattern<pos:position pos:line="16" pos:column="24"/></name> <operator pos:line="16" pos:column="25">+=<pos:position pos:line="16" pos:column="27"/></operator> <literal type="number" pos:line="16" pos:column="28">2<pos:position pos:line="16" pos:column="29"/></literal></expr>;<pos:position pos:line="16" pos:column="30"/></expr_stmt>
	}<pos:position pos:line="17" pos:column="10"/></block></then></if></elseif> <else pos:line="17" pos:column="11">else <block pos:line="17" pos:column="16">{
		<expr_stmt><expr><name><name pos:line="18" pos:column="17">ret<pos:position pos:line="18" pos:column="20"/></name><operator pos:line="18" pos:column="20">-&gt;<pos:position pos:line="18" pos:column="25"/></operator><name pos:line="18" pos:column="22">include<pos:position pos:line="18" pos:column="29"/></name></name> <operator pos:line="18" pos:column="30">=<pos:position pos:line="18" pos:column="31"/></operator> <name pos:line="18" pos:column="32">include<pos:position pos:line="18" pos:column="39"/></name></expr>;<pos:position pos:line="18" pos:column="40"/></expr_stmt>
	}<pos:position pos:line="19" pos:column="10"/></block></else></if>

	<expr_stmt><expr><name><name pos:line="21" pos:column="9">ret<pos:position pos:line="21" pos:column="12"/></name><operator pos:line="21" pos:column="12">-&gt;<pos:position pos:line="21" pos:column="17"/></operator><name pos:line="21" pos:column="14">pattern<pos:position pos:line="21" pos:column="21"/></name></name> <operator pos:line="21" pos:column="22">=<pos:position pos:line="21" pos:column="23"/></operator> <call><name pos:line="21" pos:column="24">strdup<pos:position pos:line="21" pos:column="30"/></name><argument_list pos:line="21" pos:column="30">(<argument><expr><name pos:line="21" pos:column="31">pattern<pos:position pos:line="21" pos:column="38"/></name></expr></argument>)<pos:position pos:line="21" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="40"/></expr_stmt>

	<if pos:line="23" pos:column="9">if <condition pos:line="23" pos:column="12">(<expr><operator pos:line="23" pos:column="13">!<pos:position pos:line="23" pos:column="14"/></operator><name><name pos:line="23" pos:column="14">ret<pos:position pos:line="23" pos:column="17"/></name><operator pos:line="23" pos:column="17">-&gt;<pos:position pos:line="23" pos:column="22"/></operator><name pos:line="23" pos:column="19">orig<pos:position pos:line="23" pos:column="23"/></name></name> <operator pos:line="23" pos:column="24">||<pos:position pos:line="23" pos:column="26"/></operator> <operator pos:line="23" pos:column="27">!<pos:position pos:line="23" pos:column="28"/></operator><name><name pos:line="23" pos:column="28">ret<pos:position pos:line="23" pos:column="31"/></name><operator pos:line="23" pos:column="31">-&gt;<pos:position pos:line="23" pos:column="36"/></operator><name pos:line="23" pos:column="33">pattern<pos:position pos:line="23" pos:column="40"/></name></name></expr>)<pos:position pos:line="23" pos:column="41"/></condition><then pos:line="23" pos:column="41"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="23" pos:column="42">out_of_memory<pos:position pos:line="23" pos:column="55"/></name><argument_list pos:line="23" pos:column="55">(<argument><expr><literal type="string" pos:line="23" pos:column="56">"make_exclude"<pos:position pos:line="23" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="72"/></expr_stmt></block></then></if>

	<if pos:line="25" pos:column="9">if <condition pos:line="25" pos:column="12">(<expr><call><name pos:line="25" pos:column="13">strpbrk<pos:position pos:line="25" pos:column="20"/></name><argument_list pos:line="25" pos:column="20">(<argument><expr><name pos:line="25" pos:column="21">pattern<pos:position pos:line="25" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="25" pos:column="30">"*[?"<pos:position pos:line="25" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="25" pos:column="37"/></condition><then pos:line="25" pos:column="37"> <block type="pseudo"><expr_stmt><expr><name><name pos:line="25" pos:column="38">ret<pos:position pos:line="25" pos:column="41"/></name><operator pos:line="25" pos:column="41">-&gt;<pos:position pos:line="25" pos:column="46"/></operator><name pos:line="25" pos:column="43">regular_exp<pos:position pos:line="25" pos:column="54"/></name></name> <operator pos:line="25" pos:column="55">=<pos:position pos:line="25" pos:column="56"/></operator> <literal type="number" pos:line="25" pos:column="57">1<pos:position pos:line="25" pos:column="58"/></literal></expr>;<pos:position pos:line="25" pos:column="59"/></expr_stmt></block></then></if>

	<if pos:line="27" pos:column="9">if <condition pos:line="27" pos:column="12">(<expr><call><name pos:line="27" pos:column="13">strlen<pos:position pos:line="27" pos:column="19"/></name><argument_list pos:line="27" pos:column="19">(<argument><expr><name pos:line="27" pos:column="20">pattern<pos:position pos:line="27" pos:column="27"/></name></expr></argument>)<pos:position pos:line="27" pos:column="28"/></argument_list></call> <operator pos:line="27" pos:column="29">&gt;<pos:position pos:line="27" pos:column="33"/></operator> <literal type="number" pos:line="27" pos:column="31">1<pos:position pos:line="27" pos:column="32"/></literal> <operator pos:line="27" pos:column="33">&amp;&amp;<pos:position pos:line="27" pos:column="43"/></operator> <name><name pos:line="27" pos:column="36">pattern<pos:position pos:line="27" pos:column="43"/></name><index pos:line="27" pos:column="43">[<expr><call><name pos:line="27" pos:column="44">strlen<pos:position pos:line="27" pos:column="50"/></name><argument_list pos:line="27" pos:column="50">(<argument><expr><name pos:line="27" pos:column="51">pattern<pos:position pos:line="27" pos:column="58"/></name></expr></argument>)<pos:position pos:line="27" pos:column="59"/></argument_list></call><operator pos:line="27" pos:column="59">-<pos:position pos:line="27" pos:column="60"/></operator><literal type="number" pos:line="27" pos:column="60">1<pos:position pos:line="27" pos:column="61"/></literal></expr>]<pos:position pos:line="27" pos:column="62"/></index></name> <operator pos:line="27" pos:column="63">==<pos:position pos:line="27" pos:column="65"/></operator> <literal type="char" pos:line="27" pos:column="66">'/'<pos:position pos:line="27" pos:column="69"/></literal></expr>)<pos:position pos:line="27" pos:column="70"/></condition><then pos:line="27" pos:column="70"> <block pos:line="27" pos:column="71">{
		<expr_stmt><expr><name><name pos:line="28" pos:column="17">ret<pos:position pos:line="28" pos:column="20"/></name><operator pos:line="28" pos:column="20">-&gt;<pos:position pos:line="28" pos:column="25"/></operator><name pos:line="28" pos:column="22">pattern<pos:position pos:line="28" pos:column="29"/></name><index pos:line="28" pos:column="29">[<expr><call><name pos:line="28" pos:column="30">strlen<pos:position pos:line="28" pos:column="36"/></name><argument_list pos:line="28" pos:column="36">(<argument><expr><name pos:line="28" pos:column="37">pattern<pos:position pos:line="28" pos:column="44"/></name></expr></argument>)<pos:position pos:line="28" pos:column="45"/></argument_list></call><operator pos:line="28" pos:column="45">-<pos:position pos:line="28" pos:column="46"/></operator><literal type="number" pos:line="28" pos:column="46">1<pos:position pos:line="28" pos:column="47"/></literal></expr>]<pos:position pos:line="28" pos:column="48"/></index></name> <operator pos:line="28" pos:column="49">=<pos:position pos:line="28" pos:column="50"/></operator> <literal type="number" pos:line="28" pos:column="51">0<pos:position pos:line="28" pos:column="52"/></literal></expr>;<pos:position pos:line="28" pos:column="53"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="29" pos:column="17">ret<pos:position pos:line="29" pos:column="20"/></name><operator pos:line="29" pos:column="20">-&gt;<pos:position pos:line="29" pos:column="25"/></operator><name pos:line="29" pos:column="22">directory<pos:position pos:line="29" pos:column="31"/></name></name> <operator pos:line="29" pos:column="32">=<pos:position pos:line="29" pos:column="33"/></operator> <literal type="number" pos:line="29" pos:column="34">1<pos:position pos:line="29" pos:column="35"/></literal></expr>;<pos:position pos:line="29" pos:column="36"/></expr_stmt>
	}<pos:position pos:line="30" pos:column="10"/></block></then></if>

	<if pos:line="32" pos:column="9">if <condition pos:line="32" pos:column="12">(<expr><operator pos:line="32" pos:column="13">!<pos:position pos:line="32" pos:column="14"/></operator><call><name pos:line="32" pos:column="14">strchr<pos:position pos:line="32" pos:column="20"/></name><argument_list pos:line="32" pos:column="20">(<argument><expr><name><name pos:line="32" pos:column="21">ret<pos:position pos:line="32" pos:column="24"/></name><operator pos:line="32" pos:column="24">-&gt;<pos:position pos:line="32" pos:column="29"/></operator><name pos:line="32" pos:column="26">pattern<pos:position pos:line="32" pos:column="33"/></name></name></expr></argument>,<argument><expr><literal type="char" pos:line="32" pos:column="34">'/'<pos:position pos:line="32" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="32" pos:column="39"/></condition><then pos:line="32" pos:column="39"> <block pos:line="32" pos:column="40">{
		<expr_stmt><expr><name><name pos:line="33" pos:column="17">ret<pos:position pos:line="33" pos:column="20"/></name><operator pos:line="33" pos:column="20">-&gt;<pos:position pos:line="33" pos:column="25"/></operator><name pos:line="33" pos:column="22">local<pos:position pos:line="33" pos:column="27"/></name></name> <operator pos:line="33" pos:column="28">=<pos:position pos:line="33" pos:column="29"/></operator> <literal type="number" pos:line="33" pos:column="30">1<pos:position pos:line="33" pos:column="31"/></literal></expr>;<pos:position pos:line="33" pos:column="32"/></expr_stmt>
	}<pos:position pos:line="34" pos:column="10"/></block></then></if>

	<return pos:line="36" pos:column="9">return <expr><name pos:line="36" pos:column="16">ret<pos:position pos:line="36" pos:column="19"/></name></expr>;<pos:position pos:line="36" pos:column="20"/></return>
}<pos:position pos:line="37" pos:column="2"/></block></function></unit>
