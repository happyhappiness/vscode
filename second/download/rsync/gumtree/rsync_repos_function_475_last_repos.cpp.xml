<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_475_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">do_open_nofollow<pos:position pos:line="1" pos:column="21"/></name><parameter_list pos:line="1" pos:column="21">(<parameter><decl><type><specifier pos:line="1" pos:column="22">const<pos:position pos:line="1" pos:column="27"/></specifier> <name pos:line="1" pos:column="28">char<pos:position pos:line="1" pos:column="32"/></name> <modifier pos:line="1" pos:column="33">*<pos:position pos:line="1" pos:column="34"/></modifier></type><name pos:line="1" pos:column="34">pathname<pos:position pos:line="1" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="44">int<pos:position pos:line="1" pos:column="47"/></name></type> <name pos:line="1" pos:column="48">flags<pos:position pos:line="1" pos:column="53"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="54"/></parameter_list>
<block pos:line="2" pos:column="1">{
<cpp:ifndef pos:line="3" pos:column="1">#<cpp:directive pos:line="3" pos:column="2">ifndef<pos:position pos:line="3" pos:column="8"/></cpp:directive> <name pos:line="3" pos:column="9">O_NOFOLLOW<pos:position pos:line="3" pos:column="19"/></name></cpp:ifndef>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">STRUCT_STAT<pos:position pos:line="4" pos:column="20"/></name></type> <name pos:line="4" pos:column="21">f_st<pos:position pos:line="4" pos:column="25"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="27">l_st<pos:position pos:line="4" pos:column="31"/></name></decl>;<pos:position pos:line="4" pos:column="32"/></decl_stmt>
<cpp:endif pos:line="5" pos:column="1">#<cpp:directive pos:line="5" pos:column="2">endif<pos:position pos:line="5" pos:column="7"/></cpp:directive></cpp:endif>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">fd<pos:position pos:line="6" pos:column="15"/></name></decl>;<pos:position pos:line="6" pos:column="16"/></decl_stmt>

	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><name pos:line="8" pos:column="13">flags<pos:position pos:line="8" pos:column="18"/></name> <operator pos:line="8" pos:column="19">!=<pos:position pos:line="8" pos:column="21"/></operator> <name pos:line="8" pos:column="22">O_RDONLY<pos:position pos:line="8" pos:column="30"/></name></expr>)<pos:position pos:line="8" pos:column="31"/></condition><then pos:line="8" pos:column="31"> <block pos:line="8" pos:column="32">{
		<expr_stmt><expr><call><name pos:line="9" pos:column="17">RETURN_ERROR_IF<pos:position pos:line="9" pos:column="32"/></name><argument_list pos:line="9" pos:column="32">(<argument><expr><name pos:line="9" pos:column="33">dry_run<pos:position pos:line="9" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="9" pos:column="42">0<pos:position pos:line="9" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="45"/></expr_stmt>
		<expr_stmt><expr><name pos:line="10" pos:column="17">RETURN_ERROR_IF_RO_OR_LO<pos:position pos:line="10" pos:column="41"/></name></expr>;<pos:position pos:line="10" pos:column="42"/></expr_stmt>
<cpp:ifndef pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">ifndef<pos:position pos:line="11" pos:column="8"/></cpp:directive> <name pos:line="11" pos:column="9">O_NOFOLLOW<pos:position pos:line="11" pos:column="19"/></name></cpp:ifndef>
		<comment type="block" pos:line="12" pos:column="17">/* This function doesn't support write attempts w/o O_NOFOLLOW. */</comment>
		<expr_stmt><expr><name pos:line="13" pos:column="17">errno<pos:position pos:line="13" pos:column="22"/></name> <operator pos:line="13" pos:column="23">=<pos:position pos:line="13" pos:column="24"/></operator> <name pos:line="13" pos:column="25">EINVAL<pos:position pos:line="13" pos:column="31"/></name></expr>;<pos:position pos:line="13" pos:column="32"/></expr_stmt>
		<return pos:line="14" pos:column="17">return <expr><operator pos:line="14" pos:column="24">-<pos:position pos:line="14" pos:column="25"/></operator><literal type="number" pos:line="14" pos:column="25">1<pos:position pos:line="14" pos:column="26"/></literal></expr>;<pos:position pos:line="14" pos:column="27"/></return>
<cpp:endif pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">endif<pos:position pos:line="15" pos:column="7"/></cpp:directive></cpp:endif>
	}<pos:position pos:line="16" pos:column="10"/></block></then></if>

<cpp:ifdef pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">ifdef<pos:position pos:line="18" pos:column="7"/></cpp:directive> <name pos:line="18" pos:column="8">O_NOFOLLOW<pos:position pos:line="18" pos:column="18"/></name></cpp:ifdef>
	<expr_stmt><expr><name pos:line="19" pos:column="9">fd<pos:position pos:line="19" pos:column="11"/></name> <operator pos:line="19" pos:column="12">=<pos:position pos:line="19" pos:column="13"/></operator> <call><name pos:line="19" pos:column="14">open<pos:position pos:line="19" pos:column="18"/></name><argument_list pos:line="19" pos:column="18">(<argument><expr><name pos:line="19" pos:column="19">pathname<pos:position pos:line="19" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="29">flags<pos:position pos:line="19" pos:column="34"/></name><operator pos:line="19" pos:column="34">|<pos:position pos:line="19" pos:column="35"/></operator><name pos:line="19" pos:column="35">O_NOFOLLOW<pos:position pos:line="19" pos:column="45"/></name></expr></argument>)<pos:position pos:line="19" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="47"/></expr_stmt>
<cpp:else pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">else<pos:position pos:line="20" pos:column="6"/></cpp:directive></cpp:else>
	<if pos:line="21" pos:column="9">if <condition pos:line="21" pos:column="12">(<expr><call><name pos:line="21" pos:column="13">do_lstat<pos:position pos:line="21" pos:column="21"/></name><argument_list pos:line="21" pos:column="21">(<argument><expr><name pos:line="21" pos:column="22">pathname<pos:position pos:line="21" pos:column="30"/></name></expr></argument>, <argument><expr><operator pos:line="21" pos:column="32">&amp;<pos:position pos:line="21" pos:column="37"/></operator><name pos:line="21" pos:column="33">l_st<pos:position pos:line="21" pos:column="37"/></name></expr></argument>)<pos:position pos:line="21" pos:column="38"/></argument_list></call> <operator pos:line="21" pos:column="39">&lt;<pos:position pos:line="21" pos:column="43"/></operator> <literal type="number" pos:line="21" pos:column="41">0<pos:position pos:line="21" pos:column="42"/></literal></expr>)<pos:position pos:line="21" pos:column="43"/></condition><then pos:line="21" pos:column="43">
		<block type="pseudo"><return pos:line="22" pos:column="17">return <expr><operator pos:line="22" pos:column="24">-<pos:position pos:line="22" pos:column="25"/></operator><literal type="number" pos:line="22" pos:column="25">1<pos:position pos:line="22" pos:column="26"/></literal></expr>;<pos:position pos:line="22" pos:column="27"/></return></block></then></if>
	<if pos:line="23" pos:column="9">if <condition pos:line="23" pos:column="12">(<expr><call><name pos:line="23" pos:column="13">S_ISLNK<pos:position pos:line="23" pos:column="20"/></name><argument_list pos:line="23" pos:column="20">(<argument><expr><name><name pos:line="23" pos:column="21">l_st<pos:position pos:line="23" pos:column="25"/></name><operator pos:line="23" pos:column="25">.<pos:position pos:line="23" pos:column="26"/></operator><name pos:line="23" pos:column="26">st_mode<pos:position pos:line="23" pos:column="33"/></name></name></expr></argument>)<pos:position pos:line="23" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="23" pos:column="35"/></condition><then pos:line="23" pos:column="35"> <block pos:line="23" pos:column="36">{
		<expr_stmt><expr><name pos:line="24" pos:column="17">errno<pos:position pos:line="24" pos:column="22"/></name> <operator pos:line="24" pos:column="23">=<pos:position pos:line="24" pos:column="24"/></operator> <name pos:line="24" pos:column="25">ELOOP<pos:position pos:line="24" pos:column="30"/></name></expr>;<pos:position pos:line="24" pos:column="31"/></expr_stmt>
		<return pos:line="25" pos:column="17">return <expr><operator pos:line="25" pos:column="24">-<pos:position pos:line="25" pos:column="25"/></operator><literal type="number" pos:line="25" pos:column="25">1<pos:position pos:line="25" pos:column="26"/></literal></expr>;<pos:position pos:line="25" pos:column="27"/></return>
	}<pos:position pos:line="26" pos:column="10"/></block></then></if>
	<if pos:line="27" pos:column="9">if <condition pos:line="27" pos:column="12">(<expr><operator pos:line="27" pos:column="13">(<pos:position pos:line="27" pos:column="14"/></operator><name pos:line="27" pos:column="14">fd<pos:position pos:line="27" pos:column="16"/></name> <operator pos:line="27" pos:column="17">=<pos:position pos:line="27" pos:column="18"/></operator> <call><name pos:line="27" pos:column="19">open<pos:position pos:line="27" pos:column="23"/></name><argument_list pos:line="27" pos:column="23">(<argument><expr><name pos:line="27" pos:column="24">pathname<pos:position pos:line="27" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="34">flags<pos:position pos:line="27" pos:column="39"/></name></expr></argument>)<pos:position pos:line="27" pos:column="40"/></argument_list></call><operator pos:line="27" pos:column="40">)<pos:position pos:line="27" pos:column="41"/></operator> <operator pos:line="27" pos:column="42">&lt;<pos:position pos:line="27" pos:column="46"/></operator> <literal type="number" pos:line="27" pos:column="44">0<pos:position pos:line="27" pos:column="45"/></literal></expr>)<pos:position pos:line="27" pos:column="46"/></condition><then pos:line="27" pos:column="46">
		<block type="pseudo"><return pos:line="28" pos:column="17">return <expr><name pos:line="28" pos:column="24">fd<pos:position pos:line="28" pos:column="26"/></name></expr>;<pos:position pos:line="28" pos:column="27"/></return></block></then></if>
	<if pos:line="29" pos:column="9">if <condition pos:line="29" pos:column="12">(<expr><call><name pos:line="29" pos:column="13">do_fstat<pos:position pos:line="29" pos:column="21"/></name><argument_list pos:line="29" pos:column="21">(<argument><expr><name pos:line="29" pos:column="22">fd<pos:position pos:line="29" pos:column="24"/></name></expr></argument>, <argument><expr><operator pos:line="29" pos:column="26">&amp;<pos:position pos:line="29" pos:column="31"/></operator><name pos:line="29" pos:column="27">f_st<pos:position pos:line="29" pos:column="31"/></name></expr></argument>)<pos:position pos:line="29" pos:column="32"/></argument_list></call> <operator pos:line="29" pos:column="33">&lt;<pos:position pos:line="29" pos:column="37"/></operator> <literal type="number" pos:line="29" pos:column="35">0<pos:position pos:line="29" pos:column="36"/></literal></expr>)<pos:position pos:line="29" pos:column="37"/></condition><then pos:line="29" pos:column="37"> <block pos:line="29" pos:column="38">{
	  <label><name pos:line="30" pos:column="11">close_and_return_error<pos:position pos:line="30" pos:column="33"/></name>:<pos:position pos:line="30" pos:column="34"/></label>
		<block pos:line="31" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="32" pos:column="25">int<pos:position pos:line="32" pos:column="28"/></name></type> <name pos:line="32" pos:column="29">save_errno<pos:position pos:line="32" pos:column="39"/></name> <init pos:line="32" pos:column="40">= <expr><name pos:line="32" pos:column="42">errno<pos:position pos:line="32" pos:column="47"/></name></expr></init></decl>;<pos:position pos:line="32" pos:column="48"/></decl_stmt>
			<expr_stmt><expr><call><name pos:line="33" pos:column="25">close<pos:position pos:line="33" pos:column="30"/></name><argument_list pos:line="33" pos:column="30">(<argument><expr><name pos:line="33" pos:column="31">fd<pos:position pos:line="33" pos:column="33"/></name></expr></argument>)<pos:position pos:line="33" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="35"/></expr_stmt>
			<expr_stmt><expr><name pos:line="34" pos:column="25">errno<pos:position pos:line="34" pos:column="30"/></name> <operator pos:line="34" pos:column="31">=<pos:position pos:line="34" pos:column="32"/></operator> <name pos:line="34" pos:column="33">save_errno<pos:position pos:line="34" pos:column="43"/></name></expr>;<pos:position pos:line="34" pos:column="44"/></expr_stmt>
		}<pos:position pos:line="35" pos:column="18"/></block>
		<return pos:line="36" pos:column="17">return <expr><operator pos:line="36" pos:column="24">-<pos:position pos:line="36" pos:column="25"/></operator><literal type="number" pos:line="36" pos:column="25">1<pos:position pos:line="36" pos:column="26"/></literal></expr>;<pos:position pos:line="36" pos:column="27"/></return>
	}<pos:position pos:line="37" pos:column="10"/></block></then></if>
	<if pos:line="38" pos:column="9">if <condition pos:line="38" pos:column="12">(<expr><name><name pos:line="38" pos:column="13">l_st<pos:position pos:line="38" pos:column="17"/></name><operator pos:line="38" pos:column="17">.<pos:position pos:line="38" pos:column="18"/></operator><name pos:line="38" pos:column="18">st_dev<pos:position pos:line="38" pos:column="24"/></name></name> <operator pos:line="38" pos:column="25">!=<pos:position pos:line="38" pos:column="27"/></operator> <name><name pos:line="38" pos:column="28">f_st<pos:position pos:line="38" pos:column="32"/></name><operator pos:line="38" pos:column="32">.<pos:position pos:line="38" pos:column="33"/></operator><name pos:line="38" pos:column="33">st_dev<pos:position pos:line="38" pos:column="39"/></name></name> <operator pos:line="38" pos:column="40">||<pos:position pos:line="38" pos:column="42"/></operator> <name><name pos:line="38" pos:column="43">l_st<pos:position pos:line="38" pos:column="47"/></name><operator pos:line="38" pos:column="47">.<pos:position pos:line="38" pos:column="48"/></operator><name pos:line="38" pos:column="48">st_ino<pos:position pos:line="38" pos:column="54"/></name></name> <operator pos:line="38" pos:column="55">!=<pos:position pos:line="38" pos:column="57"/></operator> <name><name pos:line="38" pos:column="58">f_st<pos:position pos:line="38" pos:column="62"/></name><operator pos:line="38" pos:column="62">.<pos:position pos:line="38" pos:column="63"/></operator><name pos:line="38" pos:column="63">st_ino<pos:position pos:line="38" pos:column="69"/></name></name></expr>)<pos:position pos:line="38" pos:column="70"/></condition><then pos:line="38" pos:column="70"> <block pos:line="38" pos:column="71">{
		<expr_stmt><expr><name pos:line="39" pos:column="17">errno<pos:position pos:line="39" pos:column="22"/></name> <operator pos:line="39" pos:column="23">=<pos:position pos:line="39" pos:column="24"/></operator> <name pos:line="39" pos:column="25">EINVAL<pos:position pos:line="39" pos:column="31"/></name></expr>;<pos:position pos:line="39" pos:column="32"/></expr_stmt>
		<goto pos:line="40" pos:column="17">goto <name pos:line="40" pos:column="22">close_and_return_error<pos:position pos:line="40" pos:column="44"/></name>;<pos:position pos:line="40" pos:column="45"/></goto>
	}<pos:position pos:line="41" pos:column="10"/></block></then></if>
<cpp:endif pos:line="42" pos:column="1">#<cpp:directive pos:line="42" pos:column="2">endif<pos:position pos:line="42" pos:column="7"/></cpp:directive></cpp:endif>

	<return pos:line="44" pos:column="9">return <expr><name pos:line="44" pos:column="16">fd<pos:position pos:line="44" pos:column="18"/></name></expr>;<pos:position pos:line="44" pos:column="19"/></return>
}<pos:position pos:line="45" pos:column="2"/></block></function></unit>
