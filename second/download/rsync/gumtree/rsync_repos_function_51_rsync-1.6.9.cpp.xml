<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_51_rsync-1.6.9.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">simple_recv_token<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name pos:line="1" pos:column="30">int<pos:position pos:line="1" pos:column="33"/></name></type> <name pos:line="1" pos:column="34">f<pos:position pos:line="1" pos:column="35"/></name></decl></parameter>,<parameter><decl><type><name pos:line="1" pos:column="36">char<pos:position pos:line="1" pos:column="40"/></name> <modifier pos:line="1" pos:column="41">*<pos:position pos:line="1" pos:column="42"/></modifier><modifier pos:line="1" pos:column="42">*<pos:position pos:line="1" pos:column="43"/></modifier></type><name pos:line="1" pos:column="43">data<pos:position pos:line="1" pos:column="47"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="48"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><specifier pos:line="3" pos:column="3">static<pos:position pos:line="3" pos:column="9"/></specifier> <type><name pos:line="3" pos:column="10">int<pos:position pos:line="3" pos:column="13"/></name></type> <name pos:line="3" pos:column="14">residue<pos:position pos:line="3" pos:column="21"/></name> <init pos:line="3" pos:column="22">= <expr><literal type="number" pos:line="3" pos:column="24">0<pos:position pos:line="3" pos:column="25"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="26"/></decl_stmt>
  <decl_stmt><decl><specifier pos:line="4" pos:column="3">static<pos:position pos:line="4" pos:column="9"/></specifier> <type><name pos:line="4" pos:column="10">char<pos:position pos:line="4" pos:column="14"/></name> <modifier pos:line="4" pos:column="15">*<pos:position pos:line="4" pos:column="16"/></modifier></type><name pos:line="4" pos:column="16">buf<pos:position pos:line="4" pos:column="19"/></name> <init pos:line="4" pos:column="20">= <expr><name pos:line="4" pos:column="22">NULL<pos:position pos:line="4" pos:column="26"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="27"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">int<pos:position pos:line="5" pos:column="6"/></name></type> <name pos:line="5" pos:column="7">n<pos:position pos:line="5" pos:column="8"/></name></decl>;<pos:position pos:line="5" pos:column="9"/></decl_stmt>

  <if pos:line="7" pos:column="3">if <condition pos:line="7" pos:column="6">(<expr><operator pos:line="7" pos:column="7">!<pos:position pos:line="7" pos:column="8"/></operator><name pos:line="7" pos:column="8">buf<pos:position pos:line="7" pos:column="11"/></name></expr>)<pos:position pos:line="7" pos:column="12"/></condition><then pos:line="7" pos:column="12"> <block pos:line="7" pos:column="13">{
    <expr_stmt><expr><name pos:line="8" pos:column="5">buf<pos:position pos:line="8" pos:column="8"/></name> <operator pos:line="8" pos:column="9">=<pos:position pos:line="8" pos:column="10"/></operator> <operator pos:line="8" pos:column="11">(<pos:position pos:line="8" pos:column="12"/></operator><name pos:line="8" pos:column="12">char<pos:position pos:line="8" pos:column="16"/></name> <operator pos:line="8" pos:column="17">*<pos:position pos:line="8" pos:column="18"/></operator><operator pos:line="8" pos:column="18">)<pos:position pos:line="8" pos:column="19"/></operator><call><name pos:line="8" pos:column="19">malloc<pos:position pos:line="8" pos:column="25"/></name><argument_list pos:line="8" pos:column="25">(<argument><expr><name pos:line="8" pos:column="26">CHUNK_SIZE<pos:position pos:line="8" pos:column="36"/></name></expr></argument>)<pos:position pos:line="8" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="38"/></expr_stmt>
    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><operator pos:line="9" pos:column="9">!<pos:position pos:line="9" pos:column="10"/></operator><name pos:line="9" pos:column="10">buf<pos:position pos:line="9" pos:column="13"/></name></expr>)<pos:position pos:line="9" pos:column="14"/></condition><then pos:line="9" pos:column="14"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="9" pos:column="15">out_of_memory<pos:position pos:line="9" pos:column="28"/></name><argument_list pos:line="9" pos:column="28">(<argument><expr><literal type="string" pos:line="9" pos:column="29">"simple_recv_token"<pos:position pos:line="9" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="50"/></expr_stmt></block></then></if>
  }<pos:position pos:line="10" pos:column="4"/></block></then></if>


  <if pos:line="13" pos:column="3">if <condition pos:line="13" pos:column="6">(<expr><name pos:line="13" pos:column="7">residue<pos:position pos:line="13" pos:column="14"/></name> <operator pos:line="13" pos:column="15">==<pos:position pos:line="13" pos:column="17"/></operator> <literal type="number" pos:line="13" pos:column="18">0<pos:position pos:line="13" pos:column="19"/></literal></expr>)<pos:position pos:line="13" pos:column="20"/></condition><then pos:line="13" pos:column="20"> <block pos:line="13" pos:column="21">{
    <decl_stmt><decl><type><name pos:line="14" pos:column="5">int<pos:position pos:line="14" pos:column="8"/></name></type> <name pos:line="14" pos:column="9">i<pos:position pos:line="14" pos:column="10"/></name> <init pos:line="14" pos:column="11">= <expr><call><name pos:line="14" pos:column="13">read_int<pos:position pos:line="14" pos:column="21"/></name><argument_list pos:line="14" pos:column="21">(<argument><expr><name pos:line="14" pos:column="22">f<pos:position pos:line="14" pos:column="23"/></name></expr></argument>)<pos:position pos:line="14" pos:column="24"/></argument_list></call></expr></init></decl>;<pos:position pos:line="14" pos:column="25"/></decl_stmt>
    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><name pos:line="15" pos:column="9">i<pos:position pos:line="15" pos:column="10"/></name> <operator pos:line="15" pos:column="11">&lt;=<pos:position pos:line="15" pos:column="16"/></operator> <literal type="number" pos:line="15" pos:column="14">0<pos:position pos:line="15" pos:column="15"/></literal></expr>)<pos:position pos:line="15" pos:column="16"/></condition><then pos:line="15" pos:column="16"> <block type="pseudo"><return pos:line="15" pos:column="17">return <expr><name pos:line="15" pos:column="24">i<pos:position pos:line="15" pos:column="25"/></name></expr>;<pos:position pos:line="15" pos:column="26"/></return></block></then></if>
    <expr_stmt><expr><name pos:line="16" pos:column="5">residue<pos:position pos:line="16" pos:column="12"/></name> <operator pos:line="16" pos:column="13">=<pos:position pos:line="16" pos:column="14"/></operator> <name pos:line="16" pos:column="15">i<pos:position pos:line="16" pos:column="16"/></name></expr>;<pos:position pos:line="16" pos:column="17"/></expr_stmt>
  }<pos:position pos:line="17" pos:column="4"/></block></then></if>

  <expr_stmt><expr><operator pos:line="19" pos:column="3">*<pos:position pos:line="19" pos:column="4"/></operator><name pos:line="19" pos:column="4">data<pos:position pos:line="19" pos:column="8"/></name> <operator pos:line="19" pos:column="9">=<pos:position pos:line="19" pos:column="10"/></operator> <name pos:line="19" pos:column="11">buf<pos:position pos:line="19" pos:column="14"/></name></expr>;<pos:position pos:line="19" pos:column="15"/></expr_stmt>
  <expr_stmt><expr><name pos:line="20" pos:column="3">n<pos:position pos:line="20" pos:column="4"/></name> <operator pos:line="20" pos:column="5">=<pos:position pos:line="20" pos:column="6"/></operator> <call><name pos:line="20" pos:column="7">MIN<pos:position pos:line="20" pos:column="10"/></name><argument_list pos:line="20" pos:column="10">(<argument><expr><name pos:line="20" pos:column="11">CHUNK_SIZE<pos:position pos:line="20" pos:column="21"/></name></expr></argument>,<argument><expr><name pos:line="20" pos:column="22">residue<pos:position pos:line="20" pos:column="29"/></name></expr></argument>)<pos:position pos:line="20" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="31"/></expr_stmt>
  <expr_stmt><expr><name pos:line="21" pos:column="3">residue<pos:position pos:line="21" pos:column="10"/></name> <operator pos:line="21" pos:column="11">-=<pos:position pos:line="21" pos:column="13"/></operator> <name pos:line="21" pos:column="14">n<pos:position pos:line="21" pos:column="15"/></name></expr>;<pos:position pos:line="21" pos:column="16"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="22" pos:column="3">read_buf<pos:position pos:line="22" pos:column="11"/></name><argument_list pos:line="22" pos:column="11">(<argument><expr><name pos:line="22" pos:column="12">f<pos:position pos:line="22" pos:column="13"/></name></expr></argument>,<argument><expr><name pos:line="22" pos:column="14">buf<pos:position pos:line="22" pos:column="17"/></name></expr></argument>,<argument><expr><name pos:line="22" pos:column="18">n<pos:position pos:line="22" pos:column="19"/></name></expr></argument>)<pos:position pos:line="22" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="21"/></expr_stmt>
  <return pos:line="23" pos:column="3">return <expr><name pos:line="23" pos:column="10">n<pos:position pos:line="23" pos:column="11"/></name></expr>;<pos:position pos:line="23" pos:column="12"/></return>
}<pos:position pos:line="24" pos:column="2"/></block></function></unit>
