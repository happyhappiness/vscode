<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_function_104.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">receive_data<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name pos:line="1" pos:column="26">int<pos:position pos:line="1" pos:column="29"/></name></type> <name pos:line="1" pos:column="30">f_in<pos:position pos:line="1" pos:column="34"/></name></decl></parameter>,<parameter><decl><type><name pos:line="1" pos:column="35">char<pos:position pos:line="1" pos:column="39"/></name> <modifier pos:line="1" pos:column="40">*<pos:position pos:line="1" pos:column="41"/></modifier></type><name pos:line="1" pos:column="41">buf<pos:position pos:line="1" pos:column="44"/></name></decl></parameter>,<parameter><decl><type><name pos:line="1" pos:column="45">int<pos:position pos:line="1" pos:column="48"/></name></type> <name pos:line="1" pos:column="49">fd<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>,<parameter><decl><type><name pos:line="1" pos:column="52">char<pos:position pos:line="1" pos:column="56"/></name> <modifier pos:line="1" pos:column="57">*<pos:position pos:line="1" pos:column="58"/></modifier></type><name pos:line="1" pos:column="58">fname<pos:position pos:line="1" pos:column="63"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="64"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">int<pos:position pos:line="3" pos:column="6"/></name></type> <name pos:line="3" pos:column="7">i<pos:position pos:line="3" pos:column="8"/></name></decl>,<decl><type ref="prev"/><name pos:line="3" pos:column="9">n<pos:position pos:line="3" pos:column="10"/></name></decl>,<decl><type ref="prev"/><name pos:line="3" pos:column="11">remainder<pos:position pos:line="3" pos:column="20"/></name></decl>,<decl><type ref="prev"/><name pos:line="3" pos:column="21">len<pos:position pos:line="3" pos:column="24"/></name></decl>,<decl><type ref="prev"/><name pos:line="3" pos:column="25">count<pos:position pos:line="3" pos:column="30"/></name></decl>;<pos:position pos:line="3" pos:column="31"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">off_t<pos:position pos:line="4" pos:column="8"/></name></type> <name pos:line="4" pos:column="9">offset<pos:position pos:line="4" pos:column="15"/></name> <init pos:line="4" pos:column="16">= <expr><literal type="number" pos:line="4" pos:column="18">0<pos:position pos:line="4" pos:column="19"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">off_t<pos:position pos:line="5" pos:column="8"/></name></type> <name pos:line="5" pos:column="9">offset2<pos:position pos:line="5" pos:column="16"/></name></decl>;<pos:position pos:line="5" pos:column="17"/></decl_stmt>

  <expr_stmt><expr><name pos:line="7" pos:column="3">count<pos:position pos:line="7" pos:column="8"/></name> <operator pos:line="7" pos:column="9">=<pos:position pos:line="7" pos:column="10"/></operator> <call><name pos:line="7" pos:column="11">read_int<pos:position pos:line="7" pos:column="19"/></name><argument_list pos:line="7" pos:column="19">(<argument><expr><name pos:line="7" pos:column="20">f_in<pos:position pos:line="7" pos:column="24"/></name></expr></argument>)<pos:position pos:line="7" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="26"/></expr_stmt>
  <expr_stmt><expr><name pos:line="8" pos:column="3">n<pos:position pos:line="8" pos:column="4"/></name> <operator pos:line="8" pos:column="5">=<pos:position pos:line="8" pos:column="6"/></operator> <call><name pos:line="8" pos:column="7">read_int<pos:position pos:line="8" pos:column="15"/></name><argument_list pos:line="8" pos:column="15">(<argument><expr><name pos:line="8" pos:column="16">f_in<pos:position pos:line="8" pos:column="20"/></name></expr></argument>)<pos:position pos:line="8" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="22"/></expr_stmt>
  <expr_stmt><expr><name pos:line="9" pos:column="3">remainder<pos:position pos:line="9" pos:column="12"/></name> <operator pos:line="9" pos:column="13">=<pos:position pos:line="9" pos:column="14"/></operator> <call><name pos:line="9" pos:column="15">read_int<pos:position pos:line="9" pos:column="23"/></name><argument_list pos:line="9" pos:column="23">(<argument><expr><name pos:line="9" pos:column="24">f_in<pos:position pos:line="9" pos:column="28"/></name></expr></argument>)<pos:position pos:line="9" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="30"/></expr_stmt>

  <for pos:line="11" pos:column="3">for <control pos:line="11" pos:column="7">(<init><expr><name pos:line="11" pos:column="8">i<pos:position pos:line="11" pos:column="9"/></name><operator pos:line="11" pos:column="9">=<pos:position pos:line="11" pos:column="10"/></operator><call><name pos:line="11" pos:column="10">read_int<pos:position pos:line="11" pos:column="18"/></name><argument_list pos:line="11" pos:column="18">(<argument><expr><name pos:line="11" pos:column="19">f_in<pos:position pos:line="11" pos:column="23"/></name></expr></argument>)<pos:position pos:line="11" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="25"/></init> <condition><expr><name pos:line="11" pos:column="26">i<pos:position pos:line="11" pos:column="27"/></name> <operator pos:line="11" pos:column="28">!=<pos:position pos:line="11" pos:column="30"/></operator> <literal type="number" pos:line="11" pos:column="31">0<pos:position pos:line="11" pos:column="32"/></literal></expr>;<pos:position pos:line="11" pos:column="33"/></condition> <incr><expr><name pos:line="11" pos:column="34">i<pos:position pos:line="11" pos:column="35"/></name><operator pos:line="11" pos:column="35">=<pos:position pos:line="11" pos:column="36"/></operator><call><name pos:line="11" pos:column="36">read_int<pos:position pos:line="11" pos:column="44"/></name><argument_list pos:line="11" pos:column="44">(<argument><expr><name pos:line="11" pos:column="45">f_in<pos:position pos:line="11" pos:column="49"/></name></expr></argument>)<pos:position pos:line="11" pos:column="50"/></argument_list></call></expr></incr>)<pos:position pos:line="11" pos:column="51"/></control> <block pos:line="11" pos:column="52">{
    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><name pos:line="12" pos:column="9">i<pos:position pos:line="12" pos:column="10"/></name> <operator pos:line="12" pos:column="11">&gt;<pos:position pos:line="12" pos:column="15"/></operator> <literal type="number" pos:line="12" pos:column="13">0<pos:position pos:line="12" pos:column="14"/></literal></expr>)<pos:position pos:line="12" pos:column="15"/></condition><then pos:line="12" pos:column="15"> <block pos:line="12" pos:column="16">{
      <if pos:line="13" pos:column="7">if <condition pos:line="13" pos:column="10">(<expr><name pos:line="13" pos:column="11">verbose<pos:position pos:line="13" pos:column="18"/></name> <operator pos:line="13" pos:column="19">&gt;<pos:position pos:line="13" pos:column="23"/></operator> <literal type="number" pos:line="13" pos:column="21">3<pos:position pos:line="13" pos:column="22"/></literal></expr>)<pos:position pos:line="13" pos:column="23"/></condition><then pos:line="13" pos:column="23">
	<block type="pseudo"><expr_stmt><expr><call><name pos:line="14" pos:column="9">fprintf<pos:position pos:line="14" pos:column="16"/></name><argument_list pos:line="14" pos:column="16">(<argument><expr><name pos:line="14" pos:column="17">stderr<pos:position pos:line="14" pos:column="23"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="14" pos:column="24">"data recv %d at %d\n"<pos:position pos:line="14" pos:column="46"/></literal></expr></argument>,<argument><expr><name pos:line="14" pos:column="47">i<pos:position pos:line="14" pos:column="48"/></name></expr></argument>,<argument><expr><operator pos:line="14" pos:column="49">(<pos:position pos:line="14" pos:column="50"/></operator><name pos:line="14" pos:column="50">int<pos:position pos:line="14" pos:column="53"/></name><operator pos:line="14" pos:column="53">)<pos:position pos:line="14" pos:column="54"/></operator><name pos:line="14" pos:column="54">offset<pos:position pos:line="14" pos:column="60"/></name></expr></argument>)<pos:position pos:line="14" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="62"/></expr_stmt></block></then></if>

      <if pos:line="16" pos:column="7">if <condition pos:line="16" pos:column="10">(<expr><call><name pos:line="16" pos:column="11">read_write<pos:position pos:line="16" pos:column="21"/></name><argument_list pos:line="16" pos:column="21">(<argument><expr><name pos:line="16" pos:column="22">f_in<pos:position pos:line="16" pos:column="26"/></name></expr></argument>,<argument><expr><name pos:line="16" pos:column="27">fd<pos:position pos:line="16" pos:column="29"/></name></expr></argument>,<argument><expr><name pos:line="16" pos:column="30">i<pos:position pos:line="16" pos:column="31"/></name></expr></argument>)<pos:position pos:line="16" pos:column="32"/></argument_list></call> <operator pos:line="16" pos:column="33">!=<pos:position pos:line="16" pos:column="35"/></operator> <name pos:line="16" pos:column="36">i<pos:position pos:line="16" pos:column="37"/></name></expr>)<pos:position pos:line="16" pos:column="38"/></condition><then pos:line="16" pos:column="38"> <block pos:line="16" pos:column="39">{
	<expr_stmt><expr><call><name pos:line="17" pos:column="9">fprintf<pos:position pos:line="17" pos:column="16"/></name><argument_list pos:line="17" pos:column="16">(<argument><expr><name pos:line="17" pos:column="17">stderr<pos:position pos:line="17" pos:column="23"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="17" pos:column="24">"write failed on %s : %s\n"<pos:position pos:line="17" pos:column="51"/></literal></expr></argument>,<argument><expr><name pos:line="17" pos:column="52">fname<pos:position pos:line="17" pos:column="57"/></name></expr></argument>,<argument><expr><call><name pos:line="17" pos:column="58">strerror<pos:position pos:line="17" pos:column="66"/></name><argument_list pos:line="17" pos:column="66">(<argument><expr><name pos:line="17" pos:column="67">errno<pos:position pos:line="17" pos:column="72"/></name></expr></argument>)<pos:position pos:line="17" pos:column="73"/></argument_list></call></expr></argument>)<pos:position pos:line="17" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="75"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="18" pos:column="9">exit<pos:position pos:line="18" pos:column="13"/></name><argument_list pos:line="18" pos:column="13">(<argument><expr><literal type="number" pos:line="18" pos:column="14">1<pos:position pos:line="18" pos:column="15"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="17"/></expr_stmt>
      }<pos:position pos:line="19" pos:column="8"/></block></then></if>
      <expr_stmt><expr><name pos:line="20" pos:column="7">offset<pos:position pos:line="20" pos:column="13"/></name> <operator pos:line="20" pos:column="14">+=<pos:position pos:line="20" pos:column="16"/></operator> <name pos:line="20" pos:column="17">i<pos:position pos:line="20" pos:column="18"/></name></expr>;<pos:position pos:line="20" pos:column="19"/></expr_stmt>
    }<pos:position pos:line="21" pos:column="6"/></block></then> <else pos:line="21" pos:column="7">else <block pos:line="21" pos:column="12">{
      <expr_stmt><expr><name pos:line="22" pos:column="7">i<pos:position pos:line="22" pos:column="8"/></name> <operator pos:line="22" pos:column="9">=<pos:position pos:line="22" pos:column="10"/></operator> <operator pos:line="22" pos:column="11">-<pos:position pos:line="22" pos:column="12"/></operator><operator pos:line="22" pos:column="12">(<pos:position pos:line="22" pos:column="13"/></operator><name pos:line="22" pos:column="13">i<pos:position pos:line="22" pos:column="14"/></name><operator pos:line="22" pos:column="14">+<pos:position pos:line="22" pos:column="15"/></operator><literal type="number" pos:line="22" pos:column="15">1<pos:position pos:line="22" pos:column="16"/></literal><operator pos:line="22" pos:column="16">)<pos:position pos:line="22" pos:column="17"/></operator></expr>;<pos:position pos:line="22" pos:column="18"/></expr_stmt>
      <expr_stmt><expr><name pos:line="23" pos:column="7">offset2<pos:position pos:line="23" pos:column="14"/></name> <operator pos:line="23" pos:column="15">=<pos:position pos:line="23" pos:column="16"/></operator> <name pos:line="23" pos:column="17">i<pos:position pos:line="23" pos:column="18"/></name><operator pos:line="23" pos:column="18">*<pos:position pos:line="23" pos:column="19"/></operator><name pos:line="23" pos:column="19">n<pos:position pos:line="23" pos:column="20"/></name></expr>;<pos:position pos:line="23" pos:column="21"/></expr_stmt>
      <expr_stmt><expr><name pos:line="24" pos:column="7">len<pos:position pos:line="24" pos:column="10"/></name> <operator pos:line="24" pos:column="11">=<pos:position pos:line="24" pos:column="12"/></operator> <name pos:line="24" pos:column="13">n<pos:position pos:line="24" pos:column="14"/></name></expr>;<pos:position pos:line="24" pos:column="15"/></expr_stmt>
      <if pos:line="25" pos:column="7">if <condition pos:line="25" pos:column="10">(<expr><name pos:line="25" pos:column="11">i<pos:position pos:line="25" pos:column="12"/></name> <operator pos:line="25" pos:column="13">==<pos:position pos:line="25" pos:column="15"/></operator> <name pos:line="25" pos:column="16">count<pos:position pos:line="25" pos:column="21"/></name><operator pos:line="25" pos:column="21">-<pos:position pos:line="25" pos:column="22"/></operator><literal type="number" pos:line="25" pos:column="22">1<pos:position pos:line="25" pos:column="23"/></literal> <operator pos:line="25" pos:column="24">&amp;&amp;<pos:position pos:line="25" pos:column="34"/></operator> <name pos:line="25" pos:column="27">remainder<pos:position pos:line="25" pos:column="36"/></name> <operator pos:line="25" pos:column="37">!=<pos:position pos:line="25" pos:column="39"/></operator> <literal type="number" pos:line="25" pos:column="40">0<pos:position pos:line="25" pos:column="41"/></literal></expr>)<pos:position pos:line="25" pos:column="42"/></condition><then pos:line="25" pos:column="42">
	<block type="pseudo"><expr_stmt><expr><name pos:line="26" pos:column="9">len<pos:position pos:line="26" pos:column="12"/></name> <operator pos:line="26" pos:column="13">=<pos:position pos:line="26" pos:column="14"/></operator> <name pos:line="26" pos:column="15">remainder<pos:position pos:line="26" pos:column="24"/></name></expr>;<pos:position pos:line="26" pos:column="25"/></expr_stmt></block></then></if>

      <if pos:line="28" pos:column="7">if <condition pos:line="28" pos:column="10">(<expr><name pos:line="28" pos:column="11">verbose<pos:position pos:line="28" pos:column="18"/></name> <operator pos:line="28" pos:column="19">&gt;<pos:position pos:line="28" pos:column="23"/></operator> <literal type="number" pos:line="28" pos:column="21">3<pos:position pos:line="28" pos:column="22"/></literal></expr>)<pos:position pos:line="28" pos:column="23"/></condition><then pos:line="28" pos:column="23">
	<block type="pseudo"><expr_stmt><expr><call><name pos:line="29" pos:column="9">fprintf<pos:position pos:line="29" pos:column="16"/></name><argument_list pos:line="29" pos:column="16">(<argument><expr><name pos:line="29" pos:column="17">stderr<pos:position pos:line="29" pos:column="23"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="29" pos:column="24">"chunk[%d] of size %d at %d offset=%d\n"<pos:position pos:line="29" pos:column="64"/></literal></expr></argument>,
		<argument><expr><name pos:line="30" pos:column="17">i<pos:position pos:line="30" pos:column="18"/></name></expr></argument>,<argument><expr><name pos:line="30" pos:column="19">len<pos:position pos:line="30" pos:column="22"/></name></expr></argument>,<argument><expr><operator pos:line="30" pos:column="23">(<pos:position pos:line="30" pos:column="24"/></operator><name pos:line="30" pos:column="24">int<pos:position pos:line="30" pos:column="27"/></name><operator pos:line="30" pos:column="27">)<pos:position pos:line="30" pos:column="28"/></operator><name pos:line="30" pos:column="28">offset2<pos:position pos:line="30" pos:column="35"/></name></expr></argument>,<argument><expr><operator pos:line="30" pos:column="36">(<pos:position pos:line="30" pos:column="37"/></operator><name pos:line="30" pos:column="37">int<pos:position pos:line="30" pos:column="40"/></name><operator pos:line="30" pos:column="40">)<pos:position pos:line="30" pos:column="41"/></operator><name pos:line="30" pos:column="41">offset<pos:position pos:line="30" pos:column="47"/></name></expr></argument>)<pos:position pos:line="30" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="49"/></expr_stmt></block></then></if>

      <if pos:line="32" pos:column="7">if <condition pos:line="32" pos:column="10">(<expr><call><name pos:line="32" pos:column="11">write_sparse<pos:position pos:line="32" pos:column="23"/></name><argument_list pos:line="32" pos:column="23">(<argument><expr><name pos:line="32" pos:column="24">fd<pos:position pos:line="32" pos:column="26"/></name></expr></argument>,<argument><expr><call><name pos:line="32" pos:column="27">map_ptr<pos:position pos:line="32" pos:column="34"/></name><argument_list pos:line="32" pos:column="34">(<argument><expr><name pos:line="32" pos:column="35">buf<pos:position pos:line="32" pos:column="38"/></name></expr></argument>,<argument><expr><name pos:line="32" pos:column="39">offset2<pos:position pos:line="32" pos:column="46"/></name></expr></argument>,<argument><expr><name pos:line="32" pos:column="47">len<pos:position pos:line="32" pos:column="50"/></name></expr></argument>)<pos:position pos:line="32" pos:column="51"/></argument_list></call></expr></argument>,<argument><expr><name pos:line="32" pos:column="52">len<pos:position pos:line="32" pos:column="55"/></name></expr></argument>)<pos:position pos:line="32" pos:column="56"/></argument_list></call> <operator pos:line="32" pos:column="57">!=<pos:position pos:line="32" pos:column="59"/></operator> <name pos:line="32" pos:column="60">len<pos:position pos:line="32" pos:column="63"/></name></expr>)<pos:position pos:line="32" pos:column="64"/></condition><then pos:line="32" pos:column="64"> <block pos:line="32" pos:column="65">{
	<expr_stmt><expr><call><name pos:line="33" pos:column="9">fprintf<pos:position pos:line="33" pos:column="16"/></name><argument_list pos:line="33" pos:column="16">(<argument><expr><name pos:line="33" pos:column="17">stderr<pos:position pos:line="33" pos:column="23"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="33" pos:column="24">"write failed on %s : %s\n"<pos:position pos:line="33" pos:column="51"/></literal></expr></argument>,<argument><expr><name pos:line="33" pos:column="52">fname<pos:position pos:line="33" pos:column="57"/></name></expr></argument>,<argument><expr><call><name pos:line="33" pos:column="58">strerror<pos:position pos:line="33" pos:column="66"/></name><argument_list pos:line="33" pos:column="66">(<argument><expr><name pos:line="33" pos:column="67">errno<pos:position pos:line="33" pos:column="72"/></name></expr></argument>)<pos:position pos:line="33" pos:column="73"/></argument_list></call></expr></argument>)<pos:position pos:line="33" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="75"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="34" pos:column="9">exit<pos:position pos:line="34" pos:column="13"/></name><argument_list pos:line="34" pos:column="13">(<argument><expr><literal type="number" pos:line="34" pos:column="14">1<pos:position pos:line="34" pos:column="15"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="17"/></expr_stmt>
      }<pos:position pos:line="35" pos:column="8"/></block></then></if>
      <expr_stmt><expr><name pos:line="36" pos:column="7">offset<pos:position pos:line="36" pos:column="13"/></name> <operator pos:line="36" pos:column="14">+=<pos:position pos:line="36" pos:column="16"/></operator> <name pos:line="36" pos:column="17">len<pos:position pos:line="36" pos:column="20"/></name></expr>;<pos:position pos:line="36" pos:column="21"/></expr_stmt>
    }<pos:position pos:line="37" pos:column="6"/></block></else></if>
  }<pos:position pos:line="38" pos:column="4"/></block></for>

  <if pos:line="40" pos:column="3">if <condition pos:line="40" pos:column="6">(<expr><name pos:line="40" pos:column="7">offset<pos:position pos:line="40" pos:column="13"/></name> <operator pos:line="40" pos:column="14">&gt;<pos:position pos:line="40" pos:column="18"/></operator> <literal type="number" pos:line="40" pos:column="16">0<pos:position pos:line="40" pos:column="17"/></literal> <operator pos:line="40" pos:column="18">&amp;&amp;<pos:position pos:line="40" pos:column="28"/></operator> <call><name pos:line="40" pos:column="21">sparse_end<pos:position pos:line="40" pos:column="31"/></name><argument_list pos:line="40" pos:column="31">(<argument><expr><name pos:line="40" pos:column="32">fd<pos:position pos:line="40" pos:column="34"/></name></expr></argument>)<pos:position pos:line="40" pos:column="35"/></argument_list></call> <operator pos:line="40" pos:column="36">!=<pos:position pos:line="40" pos:column="38"/></operator> <literal type="number" pos:line="40" pos:column="39">0<pos:position pos:line="40" pos:column="40"/></literal></expr>)<pos:position pos:line="40" pos:column="41"/></condition><then pos:line="40" pos:column="41"> <block pos:line="40" pos:column="42">{
    <expr_stmt><expr><call><name pos:line="41" pos:column="5">fprintf<pos:position pos:line="41" pos:column="12"/></name><argument_list pos:line="41" pos:column="12">(<argument><expr><name pos:line="41" pos:column="13">stderr<pos:position pos:line="41" pos:column="19"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="41" pos:column="20">"write failed on %s : %s\n"<pos:position pos:line="41" pos:column="47"/></literal></expr></argument>,<argument><expr><name pos:line="41" pos:column="48">fname<pos:position pos:line="41" pos:column="53"/></name></expr></argument>,<argument><expr><call><name pos:line="41" pos:column="54">strerror<pos:position pos:line="41" pos:column="62"/></name><argument_list pos:line="41" pos:column="62">(<argument><expr><name pos:line="41" pos:column="63">errno<pos:position pos:line="41" pos:column="68"/></name></expr></argument>)<pos:position pos:line="41" pos:column="69"/></argument_list></call></expr></argument>)<pos:position pos:line="41" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="71"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="42" pos:column="5">exit<pos:position pos:line="42" pos:column="9"/></name><argument_list pos:line="42" pos:column="9">(<argument><expr><literal type="number" pos:line="42" pos:column="10">1<pos:position pos:line="42" pos:column="11"/></literal></expr></argument>)<pos:position pos:line="42" pos:column="12"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="13"/></expr_stmt>
  }<pos:position pos:line="43" pos:column="4"/></block></then></if>
}<pos:position pos:line="44" pos:column="2"/></block></function></unit>
