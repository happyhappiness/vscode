<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_100_rsync-2.0.3.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">char<pos:position pos:line="1" pos:column="5"/></name> <modifier pos:line="1" pos:column="6">*<pos:position pos:line="1" pos:column="7"/></modifier></type><name pos:line="1" pos:column="7">client_addr<pos:position pos:line="1" pos:column="18"/></name><parameter_list pos:line="1" pos:column="18">(<parameter><decl><type><name pos:line="1" pos:column="19">int<pos:position pos:line="1" pos:column="22"/></name></type> <name pos:line="1" pos:column="23">fd<pos:position pos:line="1" pos:column="25"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="26"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">sockaddr<pos:position pos:line="3" pos:column="24"/></name></name></type> <name pos:line="3" pos:column="25">sa<pos:position pos:line="3" pos:column="27"/></name></decl>;<pos:position pos:line="3" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">sockaddr_in<pos:position pos:line="4" pos:column="27"/></name></name> <modifier pos:line="4" pos:column="28">*<pos:position pos:line="4" pos:column="29"/></modifier></type><name pos:line="4" pos:column="29">sockin<pos:position pos:line="4" pos:column="35"/></name> <init pos:line="4" pos:column="36">= <expr><operator pos:line="4" pos:column="38">(<pos:position pos:line="4" pos:column="39"/></operator>struct <name pos:line="4" pos:column="46">sockaddr_in<pos:position pos:line="4" pos:column="57"/></name> <operator pos:line="4" pos:column="58">*<pos:position pos:line="4" pos:column="59"/></operator><operator pos:line="4" pos:column="59">)<pos:position pos:line="4" pos:column="60"/></operator> <operator pos:line="4" pos:column="61">(<pos:position pos:line="4" pos:column="62"/></operator><operator pos:line="4" pos:column="62">&amp;<pos:position pos:line="4" pos:column="67"/></operator><name pos:line="4" pos:column="63">sa<pos:position pos:line="4" pos:column="65"/></name><operator pos:line="4" pos:column="65">)<pos:position pos:line="4" pos:column="66"/></operator></expr></init></decl>;<pos:position pos:line="4" pos:column="67"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type>     <name pos:line="5" pos:column="17">length<pos:position pos:line="5" pos:column="23"/></name> <init pos:line="5" pos:column="24">= <expr><sizeof pos:line="5" pos:column="26">sizeof<argument_list pos:line="5" pos:column="32">(<argument><expr><name pos:line="5" pos:column="33">sa<pos:position pos:line="5" pos:column="35"/></name></expr></argument>)<pos:position pos:line="5" pos:column="36"/></argument_list></sizeof></expr></init></decl>;<pos:position pos:line="5" pos:column="37"/></decl_stmt>
	<decl_stmt><decl><specifier pos:line="6" pos:column="9">static<pos:position pos:line="6" pos:column="15"/></specifier> <type><name pos:line="6" pos:column="16">char<pos:position pos:line="6" pos:column="20"/></name></type> <name><name pos:line="6" pos:column="21">addr_buf<pos:position pos:line="6" pos:column="29"/></name><index pos:line="6" pos:column="29">[<expr><literal type="number" pos:line="6" pos:column="30">100<pos:position pos:line="6" pos:column="33"/></literal></expr>]<pos:position pos:line="6" pos:column="34"/></index></name></decl>;<pos:position pos:line="6" pos:column="35"/></decl_stmt>

	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><call><name pos:line="8" pos:column="13">getpeername<pos:position pos:line="8" pos:column="24"/></name><argument_list pos:line="8" pos:column="24">(<argument><expr><name pos:line="8" pos:column="25">fd<pos:position pos:line="8" pos:column="27"/></name></expr></argument>, <argument><expr><operator pos:line="8" pos:column="29">&amp;<pos:position pos:line="8" pos:column="34"/></operator><name pos:line="8" pos:column="30">sa<pos:position pos:line="8" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="8" pos:column="34">&amp;<pos:position pos:line="8" pos:column="39"/></operator><name pos:line="8" pos:column="35">length<pos:position pos:line="8" pos:column="41"/></name></expr></argument>)<pos:position pos:line="8" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="8" pos:column="43"/></condition><then pos:line="8" pos:column="43"> <block pos:line="8" pos:column="44">{
		<expr_stmt><expr><call><name pos:line="9" pos:column="17">exit<pos:position pos:line="9" pos:column="21"/></name><argument_list pos:line="9" pos:column="21">(<argument><expr><literal type="number" pos:line="9" pos:column="22">1<pos:position pos:line="9" pos:column="23"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="25"/></expr_stmt>
	}<pos:position pos:line="10" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="12" pos:column="9">strlcpy<pos:position pos:line="12" pos:column="16"/></name><argument_list pos:line="12" pos:column="16">(<argument><expr><name pos:line="12" pos:column="17">addr_buf<pos:position pos:line="12" pos:column="25"/></name></expr></argument>,<argument><expr><operator pos:line="12" pos:column="26">(<pos:position pos:line="12" pos:column="27"/></operator><name pos:line="12" pos:column="27">char<pos:position pos:line="12" pos:column="31"/></name> <operator pos:line="12" pos:column="32">*<pos:position pos:line="12" pos:column="33"/></operator><operator pos:line="12" pos:column="33">)<pos:position pos:line="12" pos:column="34"/></operator><call><name pos:line="12" pos:column="34">inet_ntoa<pos:position pos:line="12" pos:column="43"/></name><argument_list pos:line="12" pos:column="43">(<argument><expr><name><name pos:line="12" pos:column="44">sockin<pos:position pos:line="12" pos:column="50"/></name><operator pos:line="12" pos:column="50">-&gt;<pos:position pos:line="12" pos:column="55"/></operator><name pos:line="12" pos:column="52">sin_addr<pos:position pos:line="12" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="12" pos:column="61"/></argument_list></call></expr></argument>, <argument><expr><sizeof pos:line="12" pos:column="63">sizeof<argument_list pos:line="12" pos:column="69">(<argument><expr><name pos:line="12" pos:column="70">addr_buf<pos:position pos:line="12" pos:column="78"/></name></expr></argument>)<pos:position pos:line="12" pos:column="79"/></argument_list></sizeof><operator pos:line="12" pos:column="79">-<pos:position pos:line="12" pos:column="80"/></operator><literal type="number" pos:line="12" pos:column="80">1<pos:position pos:line="12" pos:column="81"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="83"/></expr_stmt>

	<return pos:line="14" pos:column="9">return <expr><name pos:line="14" pos:column="16">addr_buf<pos:position pos:line="14" pos:column="24"/></name></expr>;<pos:position pos:line="14" pos:column="25"/></return>
}<pos:position pos:line="15" pos:column="2"/></block></function></unit>
