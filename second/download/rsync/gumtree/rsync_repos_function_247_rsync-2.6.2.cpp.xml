<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_247_rsync-2.6.2.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">receive_data<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name pos:line="1" pos:column="25">int<pos:position pos:line="1" pos:column="28"/></name></type> <name pos:line="1" pos:column="29">f_in<pos:position pos:line="1" pos:column="33"/></name></decl></parameter>,<parameter><decl><type><name><name pos:line="1" pos:column="34">struct<pos:position pos:line="1" pos:column="40"/></name> <name pos:line="1" pos:column="41">map_struct<pos:position pos:line="1" pos:column="51"/></name></name> <modifier pos:line="1" pos:column="52">*<pos:position pos:line="1" pos:column="53"/></modifier></type><name pos:line="1" pos:column="53">mapbuf<pos:position pos:line="1" pos:column="59"/></name></decl></parameter>,<parameter><decl><type><name pos:line="1" pos:column="60">int<pos:position pos:line="1" pos:column="63"/></name></type> <name pos:line="1" pos:column="64">fd<pos:position pos:line="1" pos:column="66"/></name></decl></parameter>,<parameter><decl><type><name pos:line="1" pos:column="67">char<pos:position pos:line="1" pos:column="71"/></name> <modifier pos:line="1" pos:column="72">*<pos:position pos:line="1" pos:column="73"/></modifier></type><name pos:line="1" pos:column="73">fname<pos:position pos:line="1" pos:column="78"/></name></decl></parameter>,
			<parameter><decl><type><name pos:line="2" pos:column="25">OFF_T<pos:position pos:line="2" pos:column="30"/></name></type> <name pos:line="2" pos:column="31">total_size<pos:position pos:line="2" pos:column="41"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="42"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">i<pos:position pos:line="4" pos:column="14"/></name></decl>;<pos:position pos:line="4" pos:column="15"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">sum_struct<pos:position pos:line="5" pos:column="26"/></name></name></type> <name pos:line="5" pos:column="27">sum<pos:position pos:line="5" pos:column="30"/></name></decl>;<pos:position pos:line="5" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">unsigned<pos:position pos:line="6" pos:column="17"/></name> <name pos:line="6" pos:column="18">int<pos:position pos:line="6" pos:column="21"/></name></type> <name pos:line="6" pos:column="22">len<pos:position pos:line="6" pos:column="25"/></name></decl>;<pos:position pos:line="6" pos:column="26"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">OFF_T<pos:position pos:line="7" pos:column="14"/></name></type> <name pos:line="7" pos:column="15">offset<pos:position pos:line="7" pos:column="21"/></name> <init pos:line="7" pos:column="22">= <expr><literal type="number" pos:line="7" pos:column="24">0<pos:position pos:line="7" pos:column="25"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="26"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">OFF_T<pos:position pos:line="8" pos:column="14"/></name></type> <name pos:line="8" pos:column="15">offset2<pos:position pos:line="8" pos:column="22"/></name></decl>;<pos:position pos:line="8" pos:column="23"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="9" pos:column="9">char<pos:position pos:line="9" pos:column="13"/></name> <modifier pos:line="9" pos:column="14">*<pos:position pos:line="9" pos:column="15"/></modifier></type><name pos:line="9" pos:column="15">data<pos:position pos:line="9" pos:column="19"/></name></decl>;<pos:position pos:line="9" pos:column="20"/></decl_stmt>
	<decl_stmt><decl><specifier pos:line="10" pos:column="9">static<pos:position pos:line="10" pos:column="15"/></specifier> <type><name pos:line="10" pos:column="16">char<pos:position pos:line="10" pos:column="20"/></name></type> <name><name pos:line="10" pos:column="21">file_sum1<pos:position pos:line="10" pos:column="30"/></name><index pos:line="10" pos:column="30">[<expr><name pos:line="10" pos:column="31">MD4_SUM_LENGTH<pos:position pos:line="10" pos:column="45"/></name></expr>]<pos:position pos:line="10" pos:column="46"/></index></name></decl>;<pos:position pos:line="10" pos:column="47"/></decl_stmt>
	<decl_stmt><decl><specifier pos:line="11" pos:column="9">static<pos:position pos:line="11" pos:column="15"/></specifier> <type><name pos:line="11" pos:column="16">char<pos:position pos:line="11" pos:column="20"/></name></type> <name><name pos:line="11" pos:column="21">file_sum2<pos:position pos:line="11" pos:column="30"/></name><index pos:line="11" pos:column="30">[<expr><name pos:line="11" pos:column="31">MD4_SUM_LENGTH<pos:position pos:line="11" pos:column="45"/></name></expr>]<pos:position pos:line="11" pos:column="46"/></index></name></decl>;<pos:position pos:line="11" pos:column="47"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="12" pos:column="9">char<pos:position pos:line="12" pos:column="13"/></name> <modifier pos:line="12" pos:column="14">*<pos:position pos:line="12" pos:column="15"/></modifier></type><name pos:line="12" pos:column="15">map<pos:position pos:line="12" pos:column="18"/></name><init pos:line="12" pos:column="18">=<expr><name pos:line="12" pos:column="19">NULL<pos:position pos:line="12" pos:column="23"/></name></expr></init></decl>;<pos:position pos:line="12" pos:column="24"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="14" pos:column="9">read_sum_head<pos:position pos:line="14" pos:column="22"/></name><argument_list pos:line="14" pos:column="22">(<argument><expr><name pos:line="14" pos:column="23">f_in<pos:position pos:line="14" pos:column="27"/></name></expr></argument>, <argument><expr><operator pos:line="14" pos:column="29">&amp;<pos:position pos:line="14" pos:column="34"/></operator><name pos:line="14" pos:column="30">sum<pos:position pos:line="14" pos:column="33"/></name></expr></argument>)<pos:position pos:line="14" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="35"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="16" pos:column="9">sum_init<pos:position pos:line="16" pos:column="17"/></name><argument_list pos:line="16" pos:column="17">()<pos:position pos:line="16" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="20"/></expr_stmt>

	<while pos:line="18" pos:column="9">while <condition pos:line="18" pos:column="15">(<expr><operator pos:line="18" pos:column="16">(<pos:position pos:line="18" pos:column="17"/></operator><name pos:line="18" pos:column="17">i<pos:position pos:line="18" pos:column="18"/></name> <operator pos:line="18" pos:column="19">=<pos:position pos:line="18" pos:column="20"/></operator> <call><name pos:line="18" pos:column="21">recv_token<pos:position pos:line="18" pos:column="31"/></name><argument_list pos:line="18" pos:column="31">(<argument><expr><name pos:line="18" pos:column="32">f_in<pos:position pos:line="18" pos:column="36"/></name></expr></argument>, <argument><expr><operator pos:line="18" pos:column="38">&amp;<pos:position pos:line="18" pos:column="43"/></operator><name pos:line="18" pos:column="39">data<pos:position pos:line="18" pos:column="43"/></name></expr></argument>)<pos:position pos:line="18" pos:column="44"/></argument_list></call><operator pos:line="18" pos:column="44">)<pos:position pos:line="18" pos:column="45"/></operator> <operator pos:line="18" pos:column="46">!=<pos:position pos:line="18" pos:column="48"/></operator> <literal type="number" pos:line="18" pos:column="49">0<pos:position pos:line="18" pos:column="50"/></literal></expr>)<pos:position pos:line="18" pos:column="51"/></condition> <block pos:line="18" pos:column="52">{
		<if pos:line="19" pos:column="17">if <condition pos:line="19" pos:column="20">(<expr><name pos:line="19" pos:column="21">do_progress<pos:position pos:line="19" pos:column="32"/></name></expr>)<pos:position pos:line="19" pos:column="33"/></condition><then pos:line="19" pos:column="33">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="20" pos:column="25">show_progress<pos:position pos:line="20" pos:column="38"/></name><argument_list pos:line="20" pos:column="38">(<argument><expr><name pos:line="20" pos:column="39">offset<pos:position pos:line="20" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="47">total_size<pos:position pos:line="20" pos:column="57"/></name></expr></argument>)<pos:position pos:line="20" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="59"/></expr_stmt></block></then></if>

		<if pos:line="22" pos:column="17">if <condition pos:line="22" pos:column="20">(<expr><name pos:line="22" pos:column="21">i<pos:position pos:line="22" pos:column="22"/></name> <operator pos:line="22" pos:column="23">&gt;<pos:position pos:line="22" pos:column="27"/></operator> <literal type="number" pos:line="22" pos:column="25">0<pos:position pos:line="22" pos:column="26"/></literal></expr>)<pos:position pos:line="22" pos:column="27"/></condition><then pos:line="22" pos:column="27"> <block pos:line="22" pos:column="28">{
			<if pos:line="23" pos:column="25">if <condition pos:line="23" pos:column="28">(<expr><name pos:line="23" pos:column="29">verbose<pos:position pos:line="23" pos:column="36"/></name> <operator pos:line="23" pos:column="37">&gt;<pos:position pos:line="23" pos:column="41"/></operator> <literal type="number" pos:line="23" pos:column="39">3<pos:position pos:line="23" pos:column="40"/></literal></expr>)<pos:position pos:line="23" pos:column="41"/></condition><then pos:line="23" pos:column="41"> <block pos:line="23" pos:column="42">{
				<expr_stmt><expr><call><name pos:line="24" pos:column="33">rprintf<pos:position pos:line="24" pos:column="40"/></name><argument_list pos:line="24" pos:column="40">(<argument><expr><name pos:line="24" pos:column="41">FINFO<pos:position pos:line="24" pos:column="46"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="24" pos:column="47">"data recv %d at %.0f\n"<pos:position pos:line="24" pos:column="71"/></literal></expr></argument>,
					<argument><expr><name pos:line="25" pos:column="41">i<pos:position pos:line="25" pos:column="42"/></name></expr></argument>,<argument><expr><operator pos:line="25" pos:column="43">(<pos:position pos:line="25" pos:column="44"/></operator><name pos:line="25" pos:column="44">double<pos:position pos:line="25" pos:column="50"/></name><operator pos:line="25" pos:column="50">)<pos:position pos:line="25" pos:column="51"/></operator><name pos:line="25" pos:column="51">offset<pos:position pos:line="25" pos:column="57"/></name></expr></argument>)<pos:position pos:line="25" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="59"/></expr_stmt>
			}<pos:position pos:line="26" pos:column="26"/></block></then></if>

			<expr_stmt><expr><name><name pos:line="28" pos:column="25">stats<pos:position pos:line="28" pos:column="30"/></name><operator pos:line="28" pos:column="30">.<pos:position pos:line="28" pos:column="31"/></operator><name pos:line="28" pos:column="31">literal_data<pos:position pos:line="28" pos:column="43"/></name></name> <operator pos:line="28" pos:column="44">+=<pos:position pos:line="28" pos:column="46"/></operator> <name pos:line="28" pos:column="47">i<pos:position pos:line="28" pos:column="48"/></name></expr>;<pos:position pos:line="28" pos:column="49"/></expr_stmt>
			<expr_stmt><expr><name pos:line="29" pos:column="25">cleanup_got_literal<pos:position pos:line="29" pos:column="44"/></name> <operator pos:line="29" pos:column="45">=<pos:position pos:line="29" pos:column="46"/></operator> <literal type="number" pos:line="29" pos:column="47">1<pos:position pos:line="29" pos:column="48"/></literal></expr>;<pos:position pos:line="29" pos:column="49"/></expr_stmt>

			<expr_stmt><expr><call><name pos:line="31" pos:column="25">sum_update<pos:position pos:line="31" pos:column="35"/></name><argument_list pos:line="31" pos:column="35">(<argument><expr><name pos:line="31" pos:column="36">data<pos:position pos:line="31" pos:column="40"/></name></expr></argument>,<argument><expr><name pos:line="31" pos:column="41">i<pos:position pos:line="31" pos:column="42"/></name></expr></argument>)<pos:position pos:line="31" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="44"/></expr_stmt>

			<if pos:line="33" pos:column="25">if <condition pos:line="33" pos:column="28">(<expr><name pos:line="33" pos:column="29">fd<pos:position pos:line="33" pos:column="31"/></name> <operator pos:line="33" pos:column="32">!=<pos:position pos:line="33" pos:column="34"/></operator> <operator pos:line="33" pos:column="35">-<pos:position pos:line="33" pos:column="36"/></operator><literal type="number" pos:line="33" pos:column="36">1<pos:position pos:line="33" pos:column="37"/></literal> <operator pos:line="33" pos:column="38">&amp;&amp;<pos:position pos:line="33" pos:column="48"/></operator> <call><name pos:line="33" pos:column="41">write_file<pos:position pos:line="33" pos:column="51"/></name><argument_list pos:line="33" pos:column="51">(<argument><expr><name pos:line="33" pos:column="52">fd<pos:position pos:line="33" pos:column="54"/></name></expr></argument>,<argument><expr><name pos:line="33" pos:column="55">data<pos:position pos:line="33" pos:column="59"/></name></expr></argument>,<argument><expr><name pos:line="33" pos:column="60">i<pos:position pos:line="33" pos:column="61"/></name></expr></argument>)<pos:position pos:line="33" pos:column="62"/></argument_list></call> <operator pos:line="33" pos:column="63">!=<pos:position pos:line="33" pos:column="65"/></operator> <name pos:line="33" pos:column="66">i<pos:position pos:line="33" pos:column="67"/></name></expr>)<pos:position pos:line="33" pos:column="68"/></condition><then pos:line="33" pos:column="68"> <block pos:line="33" pos:column="69">{
				<expr_stmt><expr><call><name pos:line="34" pos:column="33">rprintf<pos:position pos:line="34" pos:column="40"/></name><argument_list pos:line="34" pos:column="40">(<argument><expr><name pos:line="34" pos:column="41">FERROR<pos:position pos:line="34" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="34" pos:column="49">"write failed on %s: %s\n"<pos:position pos:line="34" pos:column="75"/></literal></expr></argument>,
					<argument><expr><call><name pos:line="35" pos:column="41">full_fname<pos:position pos:line="35" pos:column="51"/></name><argument_list pos:line="35" pos:column="51">(<argument><expr><name pos:line="35" pos:column="52">fname<pos:position pos:line="35" pos:column="57"/></name></expr></argument>)<pos:position pos:line="35" pos:column="58"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="35" pos:column="60">strerror<pos:position pos:line="35" pos:column="68"/></name><argument_list pos:line="35" pos:column="68">(<argument><expr><name pos:line="35" pos:column="69">errno<pos:position pos:line="35" pos:column="74"/></name></expr></argument>)<pos:position pos:line="35" pos:column="75"/></argument_list></call></expr></argument>)<pos:position pos:line="35" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="77"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="36" pos:column="33">exit_cleanup<pos:position pos:line="36" pos:column="45"/></name><argument_list pos:line="36" pos:column="45">(<argument><expr><name pos:line="36" pos:column="46">RERR_FILEIO<pos:position pos:line="36" pos:column="57"/></name></expr></argument>)<pos:position pos:line="36" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="59"/></expr_stmt>
			}<pos:position pos:line="37" pos:column="26"/></block></then></if>
			<expr_stmt><expr><name pos:line="38" pos:column="25">offset<pos:position pos:line="38" pos:column="31"/></name> <operator pos:line="38" pos:column="32">+=<pos:position pos:line="38" pos:column="34"/></operator> <name pos:line="38" pos:column="35">i<pos:position pos:line="38" pos:column="36"/></name></expr>;<pos:position pos:line="38" pos:column="37"/></expr_stmt>
			<continue pos:line="39" pos:column="25">continue;<pos:position pos:line="39" pos:column="34"/></continue>
		}<pos:position pos:line="40" pos:column="18"/></block></then></if>

		<expr_stmt><expr><name pos:line="42" pos:column="17">i<pos:position pos:line="42" pos:column="18"/></name> <operator pos:line="42" pos:column="19">=<pos:position pos:line="42" pos:column="20"/></operator> <operator pos:line="42" pos:column="21">-<pos:position pos:line="42" pos:column="22"/></operator><operator pos:line="42" pos:column="22">(<pos:position pos:line="42" pos:column="23"/></operator><name pos:line="42" pos:column="23">i<pos:position pos:line="42" pos:column="24"/></name><operator pos:line="42" pos:column="24">+<pos:position pos:line="42" pos:column="25"/></operator><literal type="number" pos:line="42" pos:column="25">1<pos:position pos:line="42" pos:column="26"/></literal><operator pos:line="42" pos:column="26">)<pos:position pos:line="42" pos:column="27"/></operator></expr>;<pos:position pos:line="42" pos:column="28"/></expr_stmt>
		<expr_stmt><expr><name pos:line="43" pos:column="17">offset2<pos:position pos:line="43" pos:column="24"/></name> <operator pos:line="43" pos:column="25">=<pos:position pos:line="43" pos:column="26"/></operator> <name pos:line="43" pos:column="27">i<pos:position pos:line="43" pos:column="28"/></name><operator pos:line="43" pos:column="28">*<pos:position pos:line="43" pos:column="29"/></operator><operator pos:line="43" pos:column="29">(<pos:position pos:line="43" pos:column="30"/></operator><name pos:line="43" pos:column="30">OFF_T<pos:position pos:line="43" pos:column="35"/></name><operator pos:line="43" pos:column="35">)<pos:position pos:line="43" pos:column="36"/></operator><name><name pos:line="43" pos:column="36">sum<pos:position pos:line="43" pos:column="39"/></name><operator pos:line="43" pos:column="39">.<pos:position pos:line="43" pos:column="40"/></operator><name pos:line="43" pos:column="40">blength<pos:position pos:line="43" pos:column="47"/></name></name></expr>;<pos:position pos:line="43" pos:column="48"/></expr_stmt>
		<expr_stmt><expr><name pos:line="44" pos:column="17">len<pos:position pos:line="44" pos:column="20"/></name> <operator pos:line="44" pos:column="21">=<pos:position pos:line="44" pos:column="22"/></operator> <name><name pos:line="44" pos:column="23">sum<pos:position pos:line="44" pos:column="26"/></name><operator pos:line="44" pos:column="26">.<pos:position pos:line="44" pos:column="27"/></operator><name pos:line="44" pos:column="27">blength<pos:position pos:line="44" pos:column="34"/></name></name></expr>;<pos:position pos:line="44" pos:column="35"/></expr_stmt>
		<if pos:line="45" pos:column="17">if <condition pos:line="45" pos:column="20">(<expr><name pos:line="45" pos:column="21">i<pos:position pos:line="45" pos:column="22"/></name> <operator pos:line="45" pos:column="23">==<pos:position pos:line="45" pos:column="25"/></operator> <operator pos:line="45" pos:column="26">(<pos:position pos:line="45" pos:column="27"/></operator><name pos:line="45" pos:column="27">int<pos:position pos:line="45" pos:column="30"/></name><operator pos:line="45" pos:column="30">)<pos:position pos:line="45" pos:column="31"/></operator> <name><name pos:line="45" pos:column="32">sum<pos:position pos:line="45" pos:column="35"/></name><operator pos:line="45" pos:column="35">.<pos:position pos:line="45" pos:column="36"/></operator><name pos:line="45" pos:column="36">count<pos:position pos:line="45" pos:column="41"/></name></name><operator pos:line="45" pos:column="41">-<pos:position pos:line="45" pos:column="42"/></operator><literal type="number" pos:line="45" pos:column="42">1<pos:position pos:line="45" pos:column="43"/></literal> <operator pos:line="45" pos:column="44">&amp;&amp;<pos:position pos:line="45" pos:column="54"/></operator> <name><name pos:line="45" pos:column="47">sum<pos:position pos:line="45" pos:column="50"/></name><operator pos:line="45" pos:column="50">.<pos:position pos:line="45" pos:column="51"/></operator><name pos:line="45" pos:column="51">remainder<pos:position pos:line="45" pos:column="60"/></name></name> <operator pos:line="45" pos:column="61">!=<pos:position pos:line="45" pos:column="63"/></operator> <literal type="number" pos:line="45" pos:column="64">0<pos:position pos:line="45" pos:column="65"/></literal></expr>)<pos:position pos:line="45" pos:column="66"/></condition><then pos:line="45" pos:column="66">
			<block type="pseudo"><expr_stmt><expr><name pos:line="46" pos:column="25">len<pos:position pos:line="46" pos:column="28"/></name> <operator pos:line="46" pos:column="29">=<pos:position pos:line="46" pos:column="30"/></operator> <name><name pos:line="46" pos:column="31">sum<pos:position pos:line="46" pos:column="34"/></name><operator pos:line="46" pos:column="34">.<pos:position pos:line="46" pos:column="35"/></operator><name pos:line="46" pos:column="35">remainder<pos:position pos:line="46" pos:column="44"/></name></name></expr>;<pos:position pos:line="46" pos:column="45"/></expr_stmt></block></then></if>

		<expr_stmt><expr><name><name pos:line="48" pos:column="17">stats<pos:position pos:line="48" pos:column="22"/></name><operator pos:line="48" pos:column="22">.<pos:position pos:line="48" pos:column="23"/></operator><name pos:line="48" pos:column="23">matched_data<pos:position pos:line="48" pos:column="35"/></name></name> <operator pos:line="48" pos:column="36">+=<pos:position pos:line="48" pos:column="38"/></operator> <name pos:line="48" pos:column="39">len<pos:position pos:line="48" pos:column="42"/></name></expr>;<pos:position pos:line="48" pos:column="43"/></expr_stmt>

		<if pos:line="50" pos:column="17">if <condition pos:line="50" pos:column="20">(<expr><name pos:line="50" pos:column="21">verbose<pos:position pos:line="50" pos:column="28"/></name> <operator pos:line="50" pos:column="29">&gt;<pos:position pos:line="50" pos:column="33"/></operator> <literal type="number" pos:line="50" pos:column="31">3<pos:position pos:line="50" pos:column="32"/></literal></expr>)<pos:position pos:line="50" pos:column="33"/></condition><then pos:line="50" pos:column="33">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="51" pos:column="25">rprintf<pos:position pos:line="51" pos:column="32"/></name><argument_list pos:line="51" pos:column="32">(<argument><expr><name pos:line="51" pos:column="33">FINFO<pos:position pos:line="51" pos:column="38"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="51" pos:column="39">"chunk[%d] of size %d at %.0f offset=%.0f\n"<pos:position pos:line="51" pos:column="83"/></literal></expr></argument>,
				<argument><expr><name pos:line="52" pos:column="33">i<pos:position pos:line="52" pos:column="34"/></name></expr></argument>,<argument><expr><name pos:line="52" pos:column="35">len<pos:position pos:line="52" pos:column="38"/></name></expr></argument>,<argument><expr><operator pos:line="52" pos:column="39">(<pos:position pos:line="52" pos:column="40"/></operator><name pos:line="52" pos:column="40">double<pos:position pos:line="52" pos:column="46"/></name><operator pos:line="52" pos:column="46">)<pos:position pos:line="52" pos:column="47"/></operator><name pos:line="52" pos:column="47">offset2<pos:position pos:line="52" pos:column="54"/></name></expr></argument>,<argument><expr><operator pos:line="52" pos:column="55">(<pos:position pos:line="52" pos:column="56"/></operator><name pos:line="52" pos:column="56">double<pos:position pos:line="52" pos:column="62"/></name><operator pos:line="52" pos:column="62">)<pos:position pos:line="52" pos:column="63"/></operator><name pos:line="52" pos:column="63">offset<pos:position pos:line="52" pos:column="69"/></name></expr></argument>)<pos:position pos:line="52" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="71"/></expr_stmt></block></then></if>

		<if pos:line="54" pos:column="17">if <condition pos:line="54" pos:column="20">(<expr><name pos:line="54" pos:column="21">mapbuf<pos:position pos:line="54" pos:column="27"/></name></expr>)<pos:position pos:line="54" pos:column="28"/></condition><then pos:line="54" pos:column="28"> <block pos:line="54" pos:column="29">{
			<expr_stmt><expr><name pos:line="55" pos:column="25">map<pos:position pos:line="55" pos:column="28"/></name> <operator pos:line="55" pos:column="29">=<pos:position pos:line="55" pos:column="30"/></operator> <call><name pos:line="55" pos:column="31">map_ptr<pos:position pos:line="55" pos:column="38"/></name><argument_list pos:line="55" pos:column="38">(<argument><expr><name pos:line="55" pos:column="39">mapbuf<pos:position pos:line="55" pos:column="45"/></name></expr></argument>,<argument><expr><name pos:line="55" pos:column="46">offset2<pos:position pos:line="55" pos:column="53"/></name></expr></argument>,<argument><expr><name pos:line="55" pos:column="54">len<pos:position pos:line="55" pos:column="57"/></name></expr></argument>)<pos:position pos:line="55" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="59"/></expr_stmt>

			<expr_stmt><expr><call><name pos:line="57" pos:column="25">see_token<pos:position pos:line="57" pos:column="34"/></name><argument_list pos:line="57" pos:column="34">(<argument><expr><name pos:line="57" pos:column="35">map<pos:position pos:line="57" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="40">len<pos:position pos:line="57" pos:column="43"/></name></expr></argument>)<pos:position pos:line="57" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="45"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="58" pos:column="25">sum_update<pos:position pos:line="58" pos:column="35"/></name><argument_list pos:line="58" pos:column="35">(<argument><expr><name pos:line="58" pos:column="36">map<pos:position pos:line="58" pos:column="39"/></name></expr></argument>,<argument><expr><name pos:line="58" pos:column="40">len<pos:position pos:line="58" pos:column="43"/></name></expr></argument>)<pos:position pos:line="58" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="45"/></expr_stmt>
		}<pos:position pos:line="59" pos:column="18"/></block></then></if>

		<if pos:line="61" pos:column="17">if <condition pos:line="61" pos:column="20">(<expr><name pos:line="61" pos:column="21">fd<pos:position pos:line="61" pos:column="23"/></name> <operator pos:line="61" pos:column="24">!=<pos:position pos:line="61" pos:column="26"/></operator> <operator pos:line="61" pos:column="27">-<pos:position pos:line="61" pos:column="28"/></operator><literal type="number" pos:line="61" pos:column="28">1<pos:position pos:line="61" pos:column="29"/></literal> <operator pos:line="61" pos:column="30">&amp;&amp;<pos:position pos:line="61" pos:column="40"/></operator> <call><name pos:line="61" pos:column="33">write_file<pos:position pos:line="61" pos:column="43"/></name><argument_list pos:line="61" pos:column="43">(<argument><expr><name pos:line="61" pos:column="44">fd<pos:position pos:line="61" pos:column="46"/></name></expr></argument>,<argument><expr><name pos:line="61" pos:column="47">map<pos:position pos:line="61" pos:column="50"/></name></expr></argument>,<argument><expr><name pos:line="61" pos:column="51">len<pos:position pos:line="61" pos:column="54"/></name></expr></argument>)<pos:position pos:line="61" pos:column="55"/></argument_list></call> <operator pos:line="61" pos:column="56">!=<pos:position pos:line="61" pos:column="58"/></operator> <operator pos:line="61" pos:column="59">(<pos:position pos:line="61" pos:column="60"/></operator><name pos:line="61" pos:column="60">int<pos:position pos:line="61" pos:column="63"/></name><operator pos:line="61" pos:column="63">)<pos:position pos:line="61" pos:column="64"/></operator> <name pos:line="61" pos:column="65">len<pos:position pos:line="61" pos:column="68"/></name></expr>)<pos:position pos:line="61" pos:column="69"/></condition><then pos:line="61" pos:column="69"> <block pos:line="61" pos:column="70">{
			<expr_stmt><expr><call><name pos:line="62" pos:column="25">rprintf<pos:position pos:line="62" pos:column="32"/></name><argument_list pos:line="62" pos:column="32">(<argument><expr><name pos:line="62" pos:column="33">FERROR<pos:position pos:line="62" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="62" pos:column="41">"write failed on %s: %s\n"<pos:position pos:line="62" pos:column="67"/></literal></expr></argument>,
				<argument><expr><call><name pos:line="63" pos:column="33">full_fname<pos:position pos:line="63" pos:column="43"/></name><argument_list pos:line="63" pos:column="43">(<argument><expr><name pos:line="63" pos:column="44">fname<pos:position pos:line="63" pos:column="49"/></name></expr></argument>)<pos:position pos:line="63" pos:column="50"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="63" pos:column="52">strerror<pos:position pos:line="63" pos:column="60"/></name><argument_list pos:line="63" pos:column="60">(<argument><expr><name pos:line="63" pos:column="61">errno<pos:position pos:line="63" pos:column="66"/></name></expr></argument>)<pos:position pos:line="63" pos:column="67"/></argument_list></call></expr></argument>)<pos:position pos:line="63" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="69"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="64" pos:column="25">exit_cleanup<pos:position pos:line="64" pos:column="37"/></name><argument_list pos:line="64" pos:column="37">(<argument><expr><name pos:line="64" pos:column="38">RERR_FILEIO<pos:position pos:line="64" pos:column="49"/></name></expr></argument>)<pos:position pos:line="64" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="51"/></expr_stmt>
		}<pos:position pos:line="65" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name pos:line="66" pos:column="17">offset<pos:position pos:line="66" pos:column="23"/></name> <operator pos:line="66" pos:column="24">+=<pos:position pos:line="66" pos:column="26"/></operator> <name pos:line="66" pos:column="27">len<pos:position pos:line="66" pos:column="30"/></name></expr>;<pos:position pos:line="66" pos:column="31"/></expr_stmt>
	}<pos:position pos:line="67" pos:column="10"/></block></while>

	<expr_stmt><expr><call><name pos:line="69" pos:column="9">flush_write_file<pos:position pos:line="69" pos:column="25"/></name><argument_list pos:line="69" pos:column="25">(<argument><expr><name pos:line="69" pos:column="26">fd<pos:position pos:line="69" pos:column="28"/></name></expr></argument>)<pos:position pos:line="69" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="30"/></expr_stmt>

	<if pos:line="71" pos:column="9">if <condition pos:line="71" pos:column="12">(<expr><name pos:line="71" pos:column="13">do_progress<pos:position pos:line="71" pos:column="24"/></name></expr>)<pos:position pos:line="71" pos:column="25"/></condition><then pos:line="71" pos:column="25">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="72" pos:column="17">end_progress<pos:position pos:line="72" pos:column="29"/></name><argument_list pos:line="72" pos:column="29">(<argument><expr><name pos:line="72" pos:column="30">total_size<pos:position pos:line="72" pos:column="40"/></name></expr></argument>)<pos:position pos:line="72" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="42"/></expr_stmt></block></then></if>

	<if pos:line="74" pos:column="9">if <condition pos:line="74" pos:column="12">(<expr><name pos:line="74" pos:column="13">fd<pos:position pos:line="74" pos:column="15"/></name> <operator pos:line="74" pos:column="16">!=<pos:position pos:line="74" pos:column="18"/></operator> <operator pos:line="74" pos:column="19">-<pos:position pos:line="74" pos:column="20"/></operator><literal type="number" pos:line="74" pos:column="20">1<pos:position pos:line="74" pos:column="21"/></literal> <operator pos:line="74" pos:column="22">&amp;&amp;<pos:position pos:line="74" pos:column="32"/></operator> <name pos:line="74" pos:column="25">offset<pos:position pos:line="74" pos:column="31"/></name> <operator pos:line="74" pos:column="32">&gt;<pos:position pos:line="74" pos:column="36"/></operator> <literal type="number" pos:line="74" pos:column="34">0<pos:position pos:line="74" pos:column="35"/></literal> <operator pos:line="74" pos:column="36">&amp;&amp;<pos:position pos:line="74" pos:column="46"/></operator> <call><name pos:line="74" pos:column="39">sparse_end<pos:position pos:line="74" pos:column="49"/></name><argument_list pos:line="74" pos:column="49">(<argument><expr><name pos:line="74" pos:column="50">fd<pos:position pos:line="74" pos:column="52"/></name></expr></argument>)<pos:position pos:line="74" pos:column="53"/></argument_list></call> <operator pos:line="74" pos:column="54">!=<pos:position pos:line="74" pos:column="56"/></operator> <literal type="number" pos:line="74" pos:column="57">0<pos:position pos:line="74" pos:column="58"/></literal></expr>)<pos:position pos:line="74" pos:column="59"/></condition><then pos:line="74" pos:column="59"> <block pos:line="74" pos:column="60">{
		<expr_stmt><expr><call><name pos:line="75" pos:column="17">rprintf<pos:position pos:line="75" pos:column="24"/></name><argument_list pos:line="75" pos:column="24">(<argument><expr><name pos:line="75" pos:column="25">FERROR<pos:position pos:line="75" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="75" pos:column="33">"write failed on %s: %s\n"<pos:position pos:line="75" pos:column="59"/></literal></expr></argument>,
			<argument><expr><call><name pos:line="76" pos:column="25">full_fname<pos:position pos:line="76" pos:column="35"/></name><argument_list pos:line="76" pos:column="35">(<argument><expr><name pos:line="76" pos:column="36">fname<pos:position pos:line="76" pos:column="41"/></name></expr></argument>)<pos:position pos:line="76" pos:column="42"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="76" pos:column="44">strerror<pos:position pos:line="76" pos:column="52"/></name><argument_list pos:line="76" pos:column="52">(<argument><expr><name pos:line="76" pos:column="53">errno<pos:position pos:line="76" pos:column="58"/></name></expr></argument>)<pos:position pos:line="76" pos:column="59"/></argument_list></call></expr></argument>)<pos:position pos:line="76" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="61"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="77" pos:column="17">exit_cleanup<pos:position pos:line="77" pos:column="29"/></name><argument_list pos:line="77" pos:column="29">(<argument><expr><name pos:line="77" pos:column="30">RERR_FILEIO<pos:position pos:line="77" pos:column="41"/></name></expr></argument>)<pos:position pos:line="77" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="43"/></expr_stmt>
	}<pos:position pos:line="78" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="80" pos:column="9">sum_end<pos:position pos:line="80" pos:column="16"/></name><argument_list pos:line="80" pos:column="16">(<argument><expr><name pos:line="80" pos:column="17">file_sum1<pos:position pos:line="80" pos:column="26"/></name></expr></argument>)<pos:position pos:line="80" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="28"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="82" pos:column="9">read_buf<pos:position pos:line="82" pos:column="17"/></name><argument_list pos:line="82" pos:column="17">(<argument><expr><name pos:line="82" pos:column="18">f_in<pos:position pos:line="82" pos:column="22"/></name></expr></argument>,<argument><expr><name pos:line="82" pos:column="23">file_sum2<pos:position pos:line="82" pos:column="32"/></name></expr></argument>,<argument><expr><name pos:line="82" pos:column="33">MD4_SUM_LENGTH<pos:position pos:line="82" pos:column="47"/></name></expr></argument>)<pos:position pos:line="82" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="49"/></expr_stmt>
	<if pos:line="83" pos:column="9">if <condition pos:line="83" pos:column="12">(<expr><name pos:line="83" pos:column="13">verbose<pos:position pos:line="83" pos:column="20"/></name> <operator pos:line="83" pos:column="21">&gt;<pos:position pos:line="83" pos:column="25"/></operator> <literal type="number" pos:line="83" pos:column="23">2<pos:position pos:line="83" pos:column="24"/></literal></expr>)<pos:position pos:line="83" pos:column="25"/></condition><then pos:line="83" pos:column="25"> <block pos:line="83" pos:column="26">{
		<expr_stmt><expr><call><name pos:line="84" pos:column="17">rprintf<pos:position pos:line="84" pos:column="24"/></name><argument_list pos:line="84" pos:column="24">(<argument><expr><name pos:line="84" pos:column="25">FINFO<pos:position pos:line="84" pos:column="30"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="84" pos:column="31">"got file_sum\n"<pos:position pos:line="84" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="84" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="49"/></expr_stmt>
	}<pos:position pos:line="85" pos:column="10"/></block></then></if>
	<if pos:line="86" pos:column="9">if <condition pos:line="86" pos:column="12">(<expr><name pos:line="86" pos:column="13">fd<pos:position pos:line="86" pos:column="15"/></name> <operator pos:line="86" pos:column="16">!=<pos:position pos:line="86" pos:column="18"/></operator> <operator pos:line="86" pos:column="19">-<pos:position pos:line="86" pos:column="20"/></operator><literal type="number" pos:line="86" pos:column="20">1<pos:position pos:line="86" pos:column="21"/></literal> <operator pos:line="86" pos:column="22">&amp;&amp;<pos:position pos:line="86" pos:column="32"/></operator> <call><name pos:line="86" pos:column="25">memcmp<pos:position pos:line="86" pos:column="31"/></name><argument_list pos:line="86" pos:column="31">(<argument><expr><name pos:line="86" pos:column="32">file_sum1<pos:position pos:line="86" pos:column="41"/></name></expr></argument>,<argument><expr><name pos:line="86" pos:column="42">file_sum2<pos:position pos:line="86" pos:column="51"/></name></expr></argument>,<argument><expr><name pos:line="86" pos:column="52">MD4_SUM_LENGTH<pos:position pos:line="86" pos:column="66"/></name></expr></argument>)<pos:position pos:line="86" pos:column="67"/></argument_list></call> <operator pos:line="86" pos:column="68">!=<pos:position pos:line="86" pos:column="70"/></operator> <literal type="number" pos:line="86" pos:column="71">0<pos:position pos:line="86" pos:column="72"/></literal></expr>)<pos:position pos:line="86" pos:column="73"/></condition><then pos:line="86" pos:column="73"> <block pos:line="86" pos:column="74">{
		<return pos:line="87" pos:column="17">return <expr><literal type="number" pos:line="87" pos:column="24">0<pos:position pos:line="87" pos:column="25"/></literal></expr>;<pos:position pos:line="87" pos:column="26"/></return>
	}<pos:position pos:line="88" pos:column="10"/></block></then></if>
	<return pos:line="89" pos:column="9">return <expr><literal type="number" pos:line="89" pos:column="16">1<pos:position pos:line="89" pos:column="17"/></literal></expr>;<pos:position pos:line="89" pos:column="18"/></return>
}<pos:position pos:line="90" pos:column="2"/></block></function></unit>
