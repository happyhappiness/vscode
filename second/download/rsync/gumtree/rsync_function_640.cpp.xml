<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_function_640.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">io_start_buffering<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name pos:line="1" pos:column="25">int<pos:position pos:line="1" pos:column="28"/></name></type> <name pos:line="1" pos:column="29">fd<pos:position pos:line="1" pos:column="31"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="32"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<expr_stmt><expr><name pos:line="3" pos:column="9">io_buffer<pos:position pos:line="3" pos:column="18"/></name> <operator pos:line="3" pos:column="19">=<pos:position pos:line="3" pos:column="20"/></operator> <operator pos:line="3" pos:column="21">(<pos:position pos:line="3" pos:column="22"/></operator><name pos:line="3" pos:column="22">char<pos:position pos:line="3" pos:column="26"/></name> <operator pos:line="3" pos:column="27">*<pos:position pos:line="3" pos:column="28"/></operator><operator pos:line="3" pos:column="28">)<pos:position pos:line="3" pos:column="29"/></operator><call><name pos:line="3" pos:column="29">malloc<pos:position pos:line="3" pos:column="35"/></name><argument_list pos:line="3" pos:column="35">(<argument><expr><name pos:line="3" pos:column="36">IO_BUFFER_SIZE<pos:position pos:line="3" pos:column="50"/></name></expr></argument>)<pos:position pos:line="3" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="3" pos:column="52"/></expr_stmt>
	<if pos:line="4" pos:column="9">if <condition pos:line="4" pos:column="12">(<expr><operator pos:line="4" pos:column="13">!<pos:position pos:line="4" pos:column="14"/></operator><name pos:line="4" pos:column="14">io_buffer<pos:position pos:line="4" pos:column="23"/></name></expr>)<pos:position pos:line="4" pos:column="24"/></condition><then pos:line="4" pos:column="24"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="4" pos:column="25">out_of_memory<pos:position pos:line="4" pos:column="38"/></name><argument_list pos:line="4" pos:column="38">(<argument><expr><literal type="string" pos:line="4" pos:column="39">"writefd"<pos:position pos:line="4" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="4" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="50"/></expr_stmt></block></then></if>
	<expr_stmt><expr><name pos:line="5" pos:column="9">io_buffer_count<pos:position pos:line="5" pos:column="24"/></name> <operator pos:line="5" pos:column="25">=<pos:position pos:line="5" pos:column="26"/></operator> <literal type="number" pos:line="5" pos:column="27">0<pos:position pos:line="5" pos:column="28"/></literal></expr>;<pos:position pos:line="5" pos:column="29"/></expr_stmt>
}<pos:position pos:line="6" pos:column="2"/></block></function></unit>
