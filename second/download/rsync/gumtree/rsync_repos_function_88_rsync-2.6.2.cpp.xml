<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_88_rsync-2.6.2.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">mplex_write<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name pos:line="1" pos:column="25">int<pos:position pos:line="1" pos:column="28"/></name></type> <name pos:line="1" pos:column="29">fd<pos:position pos:line="1" pos:column="31"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="33">enum<pos:position pos:line="1" pos:column="37"/></name> <name pos:line="1" pos:column="38">msgcode<pos:position pos:line="1" pos:column="45"/></name></name></type> <name pos:line="1" pos:column="46">code<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="52">char<pos:position pos:line="1" pos:column="56"/></name> <modifier pos:line="1" pos:column="57">*<pos:position pos:line="1" pos:column="58"/></modifier></type><name pos:line="1" pos:column="58">buf<pos:position pos:line="1" pos:column="61"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="63">size_t<pos:position pos:line="1" pos:column="69"/></name></type> <name pos:line="1" pos:column="70">len<pos:position pos:line="1" pos:column="73"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="74"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">char<pos:position pos:line="3" pos:column="13"/></name></type> <name><name pos:line="3" pos:column="14">buffer<pos:position pos:line="3" pos:column="20"/></name><index pos:line="3" pos:column="20">[<expr><literal type="number" pos:line="3" pos:column="21">4096<pos:position pos:line="3" pos:column="25"/></literal></expr>]<pos:position pos:line="3" pos:column="26"/></index></name></decl>;<pos:position pos:line="3" pos:column="27"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">size_t<pos:position pos:line="4" pos:column="15"/></name></type> <name pos:line="4" pos:column="16">n<pos:position pos:line="4" pos:column="17"/></name> <init pos:line="4" pos:column="18">= <expr><name pos:line="4" pos:column="20">len<pos:position pos:line="4" pos:column="23"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="24"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="6" pos:column="9">SIVAL<pos:position pos:line="6" pos:column="14"/></name><argument_list pos:line="6" pos:column="14">(<argument><expr><name pos:line="6" pos:column="15">buffer<pos:position pos:line="6" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="6" pos:column="23">0<pos:position pos:line="6" pos:column="24"/></literal></expr></argument>, <argument><expr><operator pos:line="6" pos:column="26">(<pos:position pos:line="6" pos:column="27"/></operator><operator pos:line="6" pos:column="27">(<pos:position pos:line="6" pos:column="28"/></operator><name pos:line="6" pos:column="28">MPLEX_BASE<pos:position pos:line="6" pos:column="38"/></name> <operator pos:line="6" pos:column="39">+<pos:position pos:line="6" pos:column="40"/></operator> <operator pos:line="6" pos:column="41">(<pos:position pos:line="6" pos:column="42"/></operator><name pos:line="6" pos:column="42">int<pos:position pos:line="6" pos:column="45"/></name><operator pos:line="6" pos:column="45">)<pos:position pos:line="6" pos:column="46"/></operator><name pos:line="6" pos:column="46">code<pos:position pos:line="6" pos:column="50"/></name><operator pos:line="6" pos:column="50">)<pos:position pos:line="6" pos:column="51"/></operator><operator pos:line="6" pos:column="51">&lt;&lt;<pos:position pos:line="6" pos:column="59"/></operator><literal type="number" pos:line="6" pos:column="53">24<pos:position pos:line="6" pos:column="55"/></literal><operator pos:line="6" pos:column="55">)<pos:position pos:line="6" pos:column="56"/></operator> <operator pos:line="6" pos:column="57">+<pos:position pos:line="6" pos:column="58"/></operator> <name pos:line="6" pos:column="59">len<pos:position pos:line="6" pos:column="62"/></name></expr></argument>)<pos:position pos:line="6" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="64"/></expr_stmt>

	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><name pos:line="8" pos:column="13">n<pos:position pos:line="8" pos:column="14"/></name> <operator pos:line="8" pos:column="15">&gt;<pos:position pos:line="8" pos:column="19"/></operator> <operator pos:line="8" pos:column="17">(<pos:position pos:line="8" pos:column="18"/></operator><sizeof pos:line="8" pos:column="18">sizeof <name pos:line="8" pos:column="25">buffer<pos:position pos:line="8" pos:column="31"/></name></sizeof> <operator pos:line="8" pos:column="32">-<pos:position pos:line="8" pos:column="33"/></operator> <literal type="number" pos:line="8" pos:column="34">4<pos:position pos:line="8" pos:column="35"/></literal><operator pos:line="8" pos:column="35">)<pos:position pos:line="8" pos:column="36"/></operator></expr>)<pos:position pos:line="8" pos:column="37"/></condition><then pos:line="8" pos:column="37"> <block pos:line="8" pos:column="38">{
		<expr_stmt><expr><name pos:line="9" pos:column="17">n<pos:position pos:line="9" pos:column="18"/></name> <operator pos:line="9" pos:column="19">=<pos:position pos:line="9" pos:column="20"/></operator> <sizeof pos:line="9" pos:column="21">sizeof <name pos:line="9" pos:column="28">buffer<pos:position pos:line="9" pos:column="34"/></name></sizeof> <operator pos:line="9" pos:column="35">-<pos:position pos:line="9" pos:column="36"/></operator> <literal type="number" pos:line="9" pos:column="37">4<pos:position pos:line="9" pos:column="38"/></literal></expr>;<pos:position pos:line="9" pos:column="39"/></expr_stmt>
	}<pos:position pos:line="10" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="12" pos:column="9">memcpy<pos:position pos:line="12" pos:column="15"/></name><argument_list pos:line="12" pos:column="15">(<argument><expr><operator pos:line="12" pos:column="16">&amp;<pos:position pos:line="12" pos:column="21"/></operator><name><name pos:line="12" pos:column="17">buffer<pos:position pos:line="12" pos:column="23"/></name><index pos:line="12" pos:column="23">[<expr><literal type="number" pos:line="12" pos:column="24">4<pos:position pos:line="12" pos:column="25"/></literal></expr>]<pos:position pos:line="12" pos:column="26"/></index></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="28">buf<pos:position pos:line="12" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="33">n<pos:position pos:line="12" pos:column="34"/></name></expr></argument>)<pos:position pos:line="12" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="36"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="13" pos:column="9">writefd_unbuffered<pos:position pos:line="13" pos:column="27"/></name><argument_list pos:line="13" pos:column="27">(<argument><expr><name pos:line="13" pos:column="28">fd<pos:position pos:line="13" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="32">buffer<pos:position pos:line="13" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="40">n<pos:position pos:line="13" pos:column="41"/></name><operator pos:line="13" pos:column="41">+<pos:position pos:line="13" pos:column="42"/></operator><literal type="number" pos:line="13" pos:column="42">4<pos:position pos:line="13" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="45"/></expr_stmt>

	<expr_stmt><expr><name pos:line="15" pos:column="9">len<pos:position pos:line="15" pos:column="12"/></name> <operator pos:line="15" pos:column="13">-=<pos:position pos:line="15" pos:column="15"/></operator> <name pos:line="15" pos:column="16">n<pos:position pos:line="15" pos:column="17"/></name></expr>;<pos:position pos:line="15" pos:column="18"/></expr_stmt>
	<expr_stmt><expr><name pos:line="16" pos:column="9">buf<pos:position pos:line="16" pos:column="12"/></name> <operator pos:line="16" pos:column="13">+=<pos:position pos:line="16" pos:column="15"/></operator> <name pos:line="16" pos:column="16">n<pos:position pos:line="16" pos:column="17"/></name></expr>;<pos:position pos:line="16" pos:column="18"/></expr_stmt>

	<if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><name pos:line="18" pos:column="13">len<pos:position pos:line="18" pos:column="16"/></name></expr>)<pos:position pos:line="18" pos:column="17"/></condition><then pos:line="18" pos:column="17"> <block pos:line="18" pos:column="18">{
		<expr_stmt><expr><call><name pos:line="19" pos:column="17">writefd_unbuffered<pos:position pos:line="19" pos:column="35"/></name><argument_list pos:line="19" pos:column="35">(<argument><expr><name pos:line="19" pos:column="36">fd<pos:position pos:line="19" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="40">buf<pos:position pos:line="19" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="45">len<pos:position pos:line="19" pos:column="48"/></name></expr></argument>)<pos:position pos:line="19" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="50"/></expr_stmt>
	}<pos:position pos:line="20" pos:column="10"/></block></then></if>
}<pos:position pos:line="21" pos:column="2"/></block></function></unit>
