<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_function_802.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">char<pos:position pos:line="1" pos:column="12"/></name> <modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier></type><name pos:line="1" pos:column="14">finish_pre_exec<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name pos:line="1" pos:column="30">pid_t<pos:position pos:line="1" pos:column="35"/></name></type> <name pos:line="1" pos:column="36">pid<pos:position pos:line="1" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="41">int<pos:position pos:line="1" pos:column="44"/></name></type> <name pos:line="1" pos:column="45">fd<pos:position pos:line="1" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="49">char<pos:position pos:line="1" pos:column="53"/></name> <modifier pos:line="1" pos:column="54">*<pos:position pos:line="1" pos:column="55"/></modifier></type><name pos:line="1" pos:column="55">request<pos:position pos:line="1" pos:column="62"/></name></decl></parameter>,
			     <parameter><decl><type><name pos:line="2" pos:column="30">int<pos:position pos:line="2" pos:column="33"/></name></type> <name pos:line="2" pos:column="34">argc<pos:position pos:line="2" pos:column="38"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="40">char<pos:position pos:line="2" pos:column="44"/></name> <modifier pos:line="2" pos:column="45">*<pos:position pos:line="2" pos:column="46"/></modifier></type><name><name pos:line="2" pos:column="46">argv<pos:position pos:line="2" pos:column="50"/></name><index pos:line="2" pos:column="50">[]<pos:position pos:line="2" pos:column="52"/></index></name></decl></parameter>)<pos:position pos:line="2" pos:column="53"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">j<pos:position pos:line="4" pos:column="14"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="16">status<pos:position pos:line="4" pos:column="22"/></name> <init pos:line="4" pos:column="23">= <expr><operator pos:line="4" pos:column="25">-<pos:position pos:line="4" pos:column="26"/></operator><literal type="number" pos:line="4" pos:column="26">1<pos:position pos:line="4" pos:column="27"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="28"/></decl_stmt>

	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><name pos:line="6" pos:column="13">request<pos:position pos:line="6" pos:column="20"/></name></expr>)<pos:position pos:line="6" pos:column="21"/></condition><then pos:line="6" pos:column="21"> <block pos:line="6" pos:column="22">{
		<expr_stmt><expr><call><name pos:line="7" pos:column="17">write_buf<pos:position pos:line="7" pos:column="26"/></name><argument_list pos:line="7" pos:column="26">(<argument><expr><name pos:line="7" pos:column="27">fd<pos:position pos:line="7" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="31">request<pos:position pos:line="7" pos:column="38"/></name></expr></argument>, <argument><expr><call><name pos:line="7" pos:column="40">strlen<pos:position pos:line="7" pos:column="46"/></name><argument_list pos:line="7" pos:column="46">(<argument><expr><name pos:line="7" pos:column="47">request<pos:position pos:line="7" pos:column="54"/></name></expr></argument>)<pos:position pos:line="7" pos:column="55"/></argument_list></call><operator pos:line="7" pos:column="55">+<pos:position pos:line="7" pos:column="56"/></operator><literal type="number" pos:line="7" pos:column="56">1<pos:position pos:line="7" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="59"/></expr_stmt>
		<for pos:line="8" pos:column="17">for <control pos:line="8" pos:column="21">(<init><expr><name pos:line="8" pos:column="22">j<pos:position pos:line="8" pos:column="23"/></name> <operator pos:line="8" pos:column="24">=<pos:position pos:line="8" pos:column="25"/></operator> <literal type="number" pos:line="8" pos:column="26">0<pos:position pos:line="8" pos:column="27"/></literal></expr>;<pos:position pos:line="8" pos:column="28"/></init> <condition><expr><name pos:line="8" pos:column="29">j<pos:position pos:line="8" pos:column="30"/></name> <operator pos:line="8" pos:column="31">&lt;<pos:position pos:line="8" pos:column="35"/></operator> <name pos:line="8" pos:column="33">argc<pos:position pos:line="8" pos:column="37"/></name></expr>;<pos:position pos:line="8" pos:column="38"/></condition> <incr><expr><name pos:line="8" pos:column="39">j<pos:position pos:line="8" pos:column="40"/></name><operator pos:line="8" pos:column="40">++<pos:position pos:line="8" pos:column="42"/></operator></expr></incr>)<pos:position pos:line="8" pos:column="43"/></control>
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="9" pos:column="25">write_buf<pos:position pos:line="9" pos:column="34"/></name><argument_list pos:line="9" pos:column="34">(<argument><expr><name pos:line="9" pos:column="35">fd<pos:position pos:line="9" pos:column="37"/></name></expr></argument>, <argument><expr><name><name pos:line="9" pos:column="39">argv<pos:position pos:line="9" pos:column="43"/></name><index pos:line="9" pos:column="43">[<expr><name pos:line="9" pos:column="44">j<pos:position pos:line="9" pos:column="45"/></name></expr>]<pos:position pos:line="9" pos:column="46"/></index></name></expr></argument>, <argument><expr><call><name pos:line="9" pos:column="48">strlen<pos:position pos:line="9" pos:column="54"/></name><argument_list pos:line="9" pos:column="54">(<argument><expr><name><name pos:line="9" pos:column="55">argv<pos:position pos:line="9" pos:column="59"/></name><index pos:line="9" pos:column="59">[<expr><name pos:line="9" pos:column="60">j<pos:position pos:line="9" pos:column="61"/></name></expr>]<pos:position pos:line="9" pos:column="62"/></index></name></expr></argument>)<pos:position pos:line="9" pos:column="63"/></argument_list></call><operator pos:line="9" pos:column="63">+<pos:position pos:line="9" pos:column="64"/></operator><literal type="number" pos:line="9" pos:column="64">1<pos:position pos:line="9" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="67"/></expr_stmt></block></for>
	}<pos:position pos:line="10" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="12" pos:column="9">write_byte<pos:position pos:line="12" pos:column="19"/></name><argument_list pos:line="12" pos:column="19">(<argument><expr><name pos:line="12" pos:column="20">fd<pos:position pos:line="12" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="12" pos:column="24">0<pos:position pos:line="12" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="27"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="14" pos:column="9">close<pos:position pos:line="14" pos:column="14"/></name><argument_list pos:line="14" pos:column="14">(<argument><expr><name pos:line="14" pos:column="15">fd<pos:position pos:line="14" pos:column="17"/></name></expr></argument>)<pos:position pos:line="14" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="19"/></expr_stmt>

	<if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><call><name pos:line="16" pos:column="13">wait_process<pos:position pos:line="16" pos:column="25"/></name><argument_list pos:line="16" pos:column="25">(<argument><expr><name pos:line="16" pos:column="26">pid<pos:position pos:line="16" pos:column="29"/></name></expr></argument>, <argument><expr><operator pos:line="16" pos:column="31">&amp;<pos:position pos:line="16" pos:column="36"/></operator><name pos:line="16" pos:column="32">status<pos:position pos:line="16" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="16" pos:column="40">0<pos:position pos:line="16" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="42"/></argument_list></call> <operator pos:line="16" pos:column="43">&lt;<pos:position pos:line="16" pos:column="47"/></operator> <literal type="number" pos:line="16" pos:column="45">0<pos:position pos:line="16" pos:column="46"/></literal>
	 <operator pos:line="17" pos:column="10">||<pos:position pos:line="17" pos:column="12"/></operator> <operator pos:line="17" pos:column="13">!<pos:position pos:line="17" pos:column="14"/></operator><call><name pos:line="17" pos:column="14">WIFEXITED<pos:position pos:line="17" pos:column="23"/></name><argument_list pos:line="17" pos:column="23">(<argument><expr><name pos:line="17" pos:column="24">status<pos:position pos:line="17" pos:column="30"/></name></expr></argument>)<pos:position pos:line="17" pos:column="31"/></argument_list></call> <operator pos:line="17" pos:column="32">||<pos:position pos:line="17" pos:column="34"/></operator> <call><name pos:line="17" pos:column="35">WEXITSTATUS<pos:position pos:line="17" pos:column="46"/></name><argument_list pos:line="17" pos:column="46">(<argument><expr><name pos:line="17" pos:column="47">status<pos:position pos:line="17" pos:column="53"/></name></expr></argument>)<pos:position pos:line="17" pos:column="54"/></argument_list></call> <operator pos:line="17" pos:column="55">!=<pos:position pos:line="17" pos:column="57"/></operator> <literal type="number" pos:line="17" pos:column="58">0<pos:position pos:line="17" pos:column="59"/></literal></expr>)<pos:position pos:line="17" pos:column="60"/></condition><then pos:line="17" pos:column="60"> <block pos:line="17" pos:column="61">{
		<decl_stmt><decl><type><name pos:line="18" pos:column="17">char<pos:position pos:line="18" pos:column="21"/></name> <modifier pos:line="18" pos:column="22">*<pos:position pos:line="18" pos:column="23"/></modifier></type><name pos:line="18" pos:column="23">e<pos:position pos:line="18" pos:column="24"/></name></decl>;<pos:position pos:line="18" pos:column="25"/></decl_stmt>
		<if pos:line="19" pos:column="17">if <condition pos:line="19" pos:column="20">(<expr><call><name pos:line="19" pos:column="21">asprintf<pos:position pos:line="19" pos:column="29"/></name><argument_list pos:line="19" pos:column="29">(<argument><expr><operator pos:line="19" pos:column="30">&amp;<pos:position pos:line="19" pos:column="35"/></operator><name pos:line="19" pos:column="31">e<pos:position pos:line="19" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="34">"pre-xfer exec returned failure (%d)\n"<pos:position pos:line="19" pos:column="73"/></literal></expr></argument>, <argument><expr><name pos:line="19" pos:column="75">status<pos:position pos:line="19" pos:column="81"/></name></expr></argument>)<pos:position pos:line="19" pos:column="82"/></argument_list></call> <operator pos:line="19" pos:column="83">&lt;<pos:position pos:line="19" pos:column="87"/></operator> <literal type="number" pos:line="19" pos:column="85">0<pos:position pos:line="19" pos:column="86"/></literal></expr>)<pos:position pos:line="19" pos:column="87"/></condition><then pos:line="19" pos:column="87">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="20" pos:column="25">out_of_memory<pos:position pos:line="20" pos:column="38"/></name><argument_list pos:line="20" pos:column="38">(<argument><expr><literal type="string" pos:line="20" pos:column="39">"finish_pre_exec"<pos:position pos:line="20" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="58"/></expr_stmt></block></then></if>
		<return pos:line="21" pos:column="17">return <expr><name pos:line="21" pos:column="24">e<pos:position pos:line="21" pos:column="25"/></name></expr>;<pos:position pos:line="21" pos:column="26"/></return>
	}<pos:position pos:line="22" pos:column="10"/></block></then></if>
	<return pos:line="23" pos:column="9">return <expr><name pos:line="23" pos:column="16">NULL<pos:position pos:line="23" pos:column="20"/></name></expr>;<pos:position pos:line="23" pos:column="21"/></return>
}<pos:position pos:line="24" pos:column="2"/></block></function></unit>
