<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_615_last_repos.cpp" pos:tabs="8"><decl_stmt><decl><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name> <name pos:line="1" pos:column="6">ZLIB_INTERNAL<pos:position pos:line="1" pos:column="19"/></name></type> <name pos:line="1" pos:column="20">_tr_flush_block<pos:position pos:line="1" pos:column="35"/></name><argument_list pos:line="1" pos:column="35">(<argument><expr><name pos:line="1" pos:column="36">s<pos:position pos:line="1" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="1" pos:column="39">buf<pos:position pos:line="1" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="1" pos:column="44">stored_len<pos:position pos:line="1" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="1" pos:column="56">last<pos:position pos:line="1" pos:column="60"/></name></expr></argument>)<pos:position pos:line="1" pos:column="61"/></argument_list>
    <name pos:line="2" pos:column="5">deflate_state<pos:position pos:line="2" pos:column="18"/></name> <modifier pos:line="2" pos:column="19">*<pos:position pos:line="2" pos:column="20"/></modifier><name pos:line="2" pos:column="20">s<pos:position pos:line="2" pos:column="21"/></name></decl>;<pos:position pos:line="2" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">charf<pos:position pos:line="3" pos:column="10"/></name> <modifier pos:line="3" pos:column="11">*<pos:position pos:line="3" pos:column="12"/></modifier></type><name pos:line="3" pos:column="12">buf<pos:position pos:line="3" pos:column="15"/></name></decl>;<pos:position pos:line="3" pos:column="16"/></decl_stmt>       <comment type="block" pos:line="3" pos:column="23">/* input block, or NULL if too old */</comment>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">ulg<pos:position pos:line="4" pos:column="8"/></name></type> <name pos:line="4" pos:column="9">stored_len<pos:position pos:line="4" pos:column="19"/></name></decl>;<pos:position pos:line="4" pos:column="20"/></decl_stmt>   <comment type="block" pos:line="4" pos:column="23">/* length of input block */</comment>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">int<pos:position pos:line="5" pos:column="8"/></name></type> <name pos:line="5" pos:column="9">last<pos:position pos:line="5" pos:column="13"/></name></decl>;<pos:position pos:line="5" pos:column="14"/></decl_stmt>         <comment type="block" pos:line="5" pos:column="23">/* one if this is the last block for a file */</comment>
<block pos:line="6" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">ulg<pos:position pos:line="7" pos:column="8"/></name></type> <name pos:line="7" pos:column="9">opt_lenb<pos:position pos:line="7" pos:column="17"/></name></decl>, <decl><type ref="prev"/><name pos:line="7" pos:column="19">static_lenb<pos:position pos:line="7" pos:column="30"/></name></decl>;<pos:position pos:line="7" pos:column="31"/></decl_stmt> <comment type="block" pos:line="7" pos:column="32">/* opt_len and static_len in bytes */</comment>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">int<pos:position pos:line="8" pos:column="8"/></name></type> <name pos:line="8" pos:column="9">max_blindex<pos:position pos:line="8" pos:column="20"/></name> <init pos:line="8" pos:column="21">= <expr><literal type="number" pos:line="8" pos:column="23">0<pos:position pos:line="8" pos:column="24"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="25"/></decl_stmt>  <comment type="block" pos:line="8" pos:column="27">/* index of last bit length code of non zero freq */</comment>

    <comment type="block" pos:line="10" pos:column="5">/* Build the Huffman trees unless a stored block is forced */</comment>
    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><name><name pos:line="11" pos:column="9">s<pos:position pos:line="11" pos:column="10"/></name><operator pos:line="11" pos:column="10">-&gt;<pos:position pos:line="11" pos:column="15"/></operator><name pos:line="11" pos:column="12">level<pos:position pos:line="11" pos:column="17"/></name></name> <operator pos:line="11" pos:column="18">&gt;<pos:position pos:line="11" pos:column="22"/></operator> <literal type="number" pos:line="11" pos:column="20">0<pos:position pos:line="11" pos:column="21"/></literal></expr>)<pos:position pos:line="11" pos:column="22"/></condition><then pos:line="11" pos:column="22"> <block pos:line="11" pos:column="23">{

        <comment type="block" pos:line="13" pos:column="9">/* Check if the file is binary or text */</comment>
        <if pos:line="14" pos:column="9">if <condition pos:line="14" pos:column="12">(<expr><name><name pos:line="14" pos:column="13">s<pos:position pos:line="14" pos:column="14"/></name><operator pos:line="14" pos:column="14">-&gt;<pos:position pos:line="14" pos:column="19"/></operator><name pos:line="14" pos:column="16">strm<pos:position pos:line="14" pos:column="20"/></name><operator pos:line="14" pos:column="20">-&gt;<pos:position pos:line="14" pos:column="25"/></operator><name pos:line="14" pos:column="22">data_type<pos:position pos:line="14" pos:column="31"/></name></name> <operator pos:line="14" pos:column="32">==<pos:position pos:line="14" pos:column="34"/></operator> <name pos:line="14" pos:column="35">Z_UNKNOWN<pos:position pos:line="14" pos:column="44"/></name></expr>)<pos:position pos:line="14" pos:column="45"/></condition><then pos:line="14" pos:column="45">
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="15" pos:column="13">s<pos:position pos:line="15" pos:column="14"/></name><operator pos:line="15" pos:column="14">-&gt;<pos:position pos:line="15" pos:column="19"/></operator><name pos:line="15" pos:column="16">strm<pos:position pos:line="15" pos:column="20"/></name><operator pos:line="15" pos:column="20">-&gt;<pos:position pos:line="15" pos:column="25"/></operator><name pos:line="15" pos:column="22">data_type<pos:position pos:line="15" pos:column="31"/></name></name> <operator pos:line="15" pos:column="32">=<pos:position pos:line="15" pos:column="33"/></operator> <call><name pos:line="15" pos:column="34">detect_data_type<pos:position pos:line="15" pos:column="50"/></name><argument_list pos:line="15" pos:column="50">(<argument><expr><name pos:line="15" pos:column="51">s<pos:position pos:line="15" pos:column="52"/></name></expr></argument>)<pos:position pos:line="15" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="54"/></expr_stmt></block></then></if>

        <comment type="block" pos:line="17" pos:column="9">/* Construct the literal and distance trees */</comment>
        <expr_stmt><expr><call><name pos:line="18" pos:column="9">build_tree<pos:position pos:line="18" pos:column="19"/></name><argument_list pos:line="18" pos:column="19">(<argument><expr><name pos:line="18" pos:column="20">s<pos:position pos:line="18" pos:column="21"/></name></expr></argument>, <argument><expr><operator pos:line="18" pos:column="23">(<pos:position pos:line="18" pos:column="24"/></operator><name pos:line="18" pos:column="24">tree_desc<pos:position pos:line="18" pos:column="33"/></name> <operator pos:line="18" pos:column="34">*<pos:position pos:line="18" pos:column="35"/></operator><operator pos:line="18" pos:column="35">)<pos:position pos:line="18" pos:column="36"/></operator><operator pos:line="18" pos:column="36">(<pos:position pos:line="18" pos:column="37"/></operator><operator pos:line="18" pos:column="37">&amp;<pos:position pos:line="18" pos:column="42"/></operator><operator pos:line="18" pos:column="38">(<pos:position pos:line="18" pos:column="39"/></operator><name><name pos:line="18" pos:column="39">s<pos:position pos:line="18" pos:column="40"/></name><operator pos:line="18" pos:column="40">-&gt;<pos:position pos:line="18" pos:column="45"/></operator><name pos:line="18" pos:column="42">l_desc<pos:position pos:line="18" pos:column="48"/></name></name><operator pos:line="18" pos:column="48">)<pos:position pos:line="18" pos:column="49"/></operator><operator pos:line="18" pos:column="49">)<pos:position pos:line="18" pos:column="50"/></operator></expr></argument>)<pos:position pos:line="18" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="52"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="19" pos:column="9">Tracev<pos:position pos:line="19" pos:column="15"/></name><argument_list pos:line="19" pos:column="15">(<argument><expr><operator pos:line="19" pos:column="16">(<pos:position pos:line="19" pos:column="17"/></operator><name pos:line="19" pos:column="17">stderr<pos:position pos:line="19" pos:column="23"/></name><operator pos:line="19" pos:column="23">,<pos:position pos:line="19" pos:column="24"/></operator> <literal type="string" pos:line="19" pos:column="25">"\nlit data: dyn %ld, stat %ld"<pos:position pos:line="19" pos:column="56"/></literal><operator pos:line="19" pos:column="56">,<pos:position pos:line="19" pos:column="57"/></operator> <name><name pos:line="19" pos:column="58">s<pos:position pos:line="19" pos:column="59"/></name><operator pos:line="19" pos:column="59">-&gt;<pos:position pos:line="19" pos:column="64"/></operator><name pos:line="19" pos:column="61">opt_len<pos:position pos:line="19" pos:column="68"/></name></name><operator pos:line="19" pos:column="68">,<pos:position pos:line="19" pos:column="69"/></operator>
                <name><name pos:line="20" pos:column="17">s<pos:position pos:line="20" pos:column="18"/></name><operator pos:line="20" pos:column="18">-&gt;<pos:position pos:line="20" pos:column="23"/></operator><name pos:line="20" pos:column="20">static_len<pos:position pos:line="20" pos:column="30"/></name></name><operator pos:line="20" pos:column="30">)<pos:position pos:line="20" pos:column="31"/></operator></expr></argument>)<pos:position pos:line="20" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="33"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="22" pos:column="9">build_tree<pos:position pos:line="22" pos:column="19"/></name><argument_list pos:line="22" pos:column="19">(<argument><expr><name pos:line="22" pos:column="20">s<pos:position pos:line="22" pos:column="21"/></name></expr></argument>, <argument><expr><operator pos:line="22" pos:column="23">(<pos:position pos:line="22" pos:column="24"/></operator><name pos:line="22" pos:column="24">tree_desc<pos:position pos:line="22" pos:column="33"/></name> <operator pos:line="22" pos:column="34">*<pos:position pos:line="22" pos:column="35"/></operator><operator pos:line="22" pos:column="35">)<pos:position pos:line="22" pos:column="36"/></operator><operator pos:line="22" pos:column="36">(<pos:position pos:line="22" pos:column="37"/></operator><operator pos:line="22" pos:column="37">&amp;<pos:position pos:line="22" pos:column="42"/></operator><operator pos:line="22" pos:column="38">(<pos:position pos:line="22" pos:column="39"/></operator><name><name pos:line="22" pos:column="39">s<pos:position pos:line="22" pos:column="40"/></name><operator pos:line="22" pos:column="40">-&gt;<pos:position pos:line="22" pos:column="45"/></operator><name pos:line="22" pos:column="42">d_desc<pos:position pos:line="22" pos:column="48"/></name></name><operator pos:line="22" pos:column="48">)<pos:position pos:line="22" pos:column="49"/></operator><operator pos:line="22" pos:column="49">)<pos:position pos:line="22" pos:column="50"/></operator></expr></argument>)<pos:position pos:line="22" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="52"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="23" pos:column="9">Tracev<pos:position pos:line="23" pos:column="15"/></name><argument_list pos:line="23" pos:column="15">(<argument><expr><operator pos:line="23" pos:column="16">(<pos:position pos:line="23" pos:column="17"/></operator><name pos:line="23" pos:column="17">stderr<pos:position pos:line="23" pos:column="23"/></name><operator pos:line="23" pos:column="23">,<pos:position pos:line="23" pos:column="24"/></operator> <literal type="string" pos:line="23" pos:column="25">"\ndist data: dyn %ld, stat %ld"<pos:position pos:line="23" pos:column="57"/></literal><operator pos:line="23" pos:column="57">,<pos:position pos:line="23" pos:column="58"/></operator> <name><name pos:line="23" pos:column="59">s<pos:position pos:line="23" pos:column="60"/></name><operator pos:line="23" pos:column="60">-&gt;<pos:position pos:line="23" pos:column="65"/></operator><name pos:line="23" pos:column="62">opt_len<pos:position pos:line="23" pos:column="69"/></name></name><operator pos:line="23" pos:column="69">,<pos:position pos:line="23" pos:column="70"/></operator>
                <name><name pos:line="24" pos:column="17">s<pos:position pos:line="24" pos:column="18"/></name><operator pos:line="24" pos:column="18">-&gt;<pos:position pos:line="24" pos:column="23"/></operator><name pos:line="24" pos:column="20">static_len<pos:position pos:line="24" pos:column="30"/></name></name><operator pos:line="24" pos:column="30">)<pos:position pos:line="24" pos:column="31"/></operator></expr></argument>)<pos:position pos:line="24" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="33"/></expr_stmt>
        <comment type="block" pos:line="25" pos:column="9">/* At this point, opt_len and static_len are the total bit lengths of
         * the compressed block data, excluding the tree representations.
         */</comment>

        <comment type="block" pos:line="29" pos:column="9">/* Build the bit length tree for the above two trees, and get the index
         * in bl_order of the last bit length code to send.
         */</comment>
        <expr_stmt><expr><name pos:line="32" pos:column="9">max_blindex<pos:position pos:line="32" pos:column="20"/></name> <operator pos:line="32" pos:column="21">=<pos:position pos:line="32" pos:column="22"/></operator> <call><name pos:line="32" pos:column="23">build_bl_tree<pos:position pos:line="32" pos:column="36"/></name><argument_list pos:line="32" pos:column="36">(<argument><expr><name pos:line="32" pos:column="37">s<pos:position pos:line="32" pos:column="38"/></name></expr></argument>)<pos:position pos:line="32" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="40"/></expr_stmt>

        <comment type="block" pos:line="34" pos:column="9">/* Determine the best encoding. Compute the block lengths in bytes. */</comment>
        <expr_stmt><expr><name pos:line="35" pos:column="9">opt_lenb<pos:position pos:line="35" pos:column="17"/></name> <operator pos:line="35" pos:column="18">=<pos:position pos:line="35" pos:column="19"/></operator> <operator pos:line="35" pos:column="20">(<pos:position pos:line="35" pos:column="21"/></operator><name><name pos:line="35" pos:column="21">s<pos:position pos:line="35" pos:column="22"/></name><operator pos:line="35" pos:column="22">-&gt;<pos:position pos:line="35" pos:column="27"/></operator><name pos:line="35" pos:column="24">opt_len<pos:position pos:line="35" pos:column="31"/></name></name><operator pos:line="35" pos:column="31">+<pos:position pos:line="35" pos:column="32"/></operator><literal type="number" pos:line="35" pos:column="32">3<pos:position pos:line="35" pos:column="33"/></literal><operator pos:line="35" pos:column="33">+<pos:position pos:line="35" pos:column="34"/></operator><literal type="number" pos:line="35" pos:column="34">7<pos:position pos:line="35" pos:column="35"/></literal><operator pos:line="35" pos:column="35">)<pos:position pos:line="35" pos:column="36"/></operator><operator pos:line="35" pos:column="36">&gt;&gt;<pos:position pos:line="35" pos:column="41"/></operator><literal type="number" pos:line="35" pos:column="38">3<pos:position pos:line="35" pos:column="39"/></literal></expr>;<pos:position pos:line="35" pos:column="40"/></expr_stmt>
        <expr_stmt><expr><name pos:line="36" pos:column="9">static_lenb<pos:position pos:line="36" pos:column="20"/></name> <operator pos:line="36" pos:column="21">=<pos:position pos:line="36" pos:column="22"/></operator> <operator pos:line="36" pos:column="23">(<pos:position pos:line="36" pos:column="24"/></operator><name><name pos:line="36" pos:column="24">s<pos:position pos:line="36" pos:column="25"/></name><operator pos:line="36" pos:column="25">-&gt;<pos:position pos:line="36" pos:column="30"/></operator><name pos:line="36" pos:column="27">static_len<pos:position pos:line="36" pos:column="37"/></name></name><operator pos:line="36" pos:column="37">+<pos:position pos:line="36" pos:column="38"/></operator><literal type="number" pos:line="36" pos:column="38">3<pos:position pos:line="36" pos:column="39"/></literal><operator pos:line="36" pos:column="39">+<pos:position pos:line="36" pos:column="40"/></operator><literal type="number" pos:line="36" pos:column="40">7<pos:position pos:line="36" pos:column="41"/></literal><operator pos:line="36" pos:column="41">)<pos:position pos:line="36" pos:column="42"/></operator><operator pos:line="36" pos:column="42">&gt;&gt;<pos:position pos:line="36" pos:column="47"/></operator><literal type="number" pos:line="36" pos:column="44">3<pos:position pos:line="36" pos:column="45"/></literal></expr>;<pos:position pos:line="36" pos:column="46"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="38" pos:column="9">Tracev<pos:position pos:line="38" pos:column="15"/></name><argument_list pos:line="38" pos:column="15">(<argument><expr><operator pos:line="38" pos:column="16">(<pos:position pos:line="38" pos:column="17"/></operator><name pos:line="38" pos:column="17">stderr<pos:position pos:line="38" pos:column="23"/></name><operator pos:line="38" pos:column="23">,<pos:position pos:line="38" pos:column="24"/></operator> <literal type="string" pos:line="38" pos:column="25">"\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u "<pos:position pos:line="38" pos:column="74"/></literal><operator pos:line="38" pos:column="74">,<pos:position pos:line="38" pos:column="75"/></operator>
                <name pos:line="39" pos:column="17">opt_lenb<pos:position pos:line="39" pos:column="25"/></name><operator pos:line="39" pos:column="25">,<pos:position pos:line="39" pos:column="26"/></operator> <name><name pos:line="39" pos:column="27">s<pos:position pos:line="39" pos:column="28"/></name><operator pos:line="39" pos:column="28">-&gt;<pos:position pos:line="39" pos:column="33"/></operator><name pos:line="39" pos:column="30">opt_len<pos:position pos:line="39" pos:column="37"/></name></name><operator pos:line="39" pos:column="37">,<pos:position pos:line="39" pos:column="38"/></operator> <name pos:line="39" pos:column="39">static_lenb<pos:position pos:line="39" pos:column="50"/></name><operator pos:line="39" pos:column="50">,<pos:position pos:line="39" pos:column="51"/></operator> <name><name pos:line="39" pos:column="52">s<pos:position pos:line="39" pos:column="53"/></name><operator pos:line="39" pos:column="53">-&gt;<pos:position pos:line="39" pos:column="58"/></operator><name pos:line="39" pos:column="55">static_len<pos:position pos:line="39" pos:column="65"/></name></name><operator pos:line="39" pos:column="65">,<pos:position pos:line="39" pos:column="66"/></operator> <name pos:line="39" pos:column="67">stored_len<pos:position pos:line="39" pos:column="77"/></name><operator pos:line="39" pos:column="77">,<pos:position pos:line="39" pos:column="78"/></operator>
                <name><name pos:line="40" pos:column="17">s<pos:position pos:line="40" pos:column="18"/></name><operator pos:line="40" pos:column="18">-&gt;<pos:position pos:line="40" pos:column="23"/></operator><name pos:line="40" pos:column="20">last_lit<pos:position pos:line="40" pos:column="28"/></name></name><operator pos:line="40" pos:column="28">)<pos:position pos:line="40" pos:column="29"/></operator></expr></argument>)<pos:position pos:line="40" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="31"/></expr_stmt>

        <if pos:line="42" pos:column="9">if <condition pos:line="42" pos:column="12">(<expr><name pos:line="42" pos:column="13">static_lenb<pos:position pos:line="42" pos:column="24"/></name> <operator pos:line="42" pos:column="25">&lt;=<pos:position pos:line="42" pos:column="30"/></operator> <name pos:line="42" pos:column="28">opt_lenb<pos:position pos:line="42" pos:column="36"/></name></expr>)<pos:position pos:line="42" pos:column="37"/></condition><then pos:line="42" pos:column="37"> <block type="pseudo"><expr_stmt><expr><name pos:line="42" pos:column="38">opt_lenb<pos:position pos:line="42" pos:column="46"/></name> <operator pos:line="42" pos:column="47">=<pos:position pos:line="42" pos:column="48"/></operator> <name pos:line="42" pos:column="49">static_lenb<pos:position pos:line="42" pos:column="60"/></name></expr>;<pos:position pos:line="42" pos:column="61"/></expr_stmt></block></then></if>

    }<pos:position pos:line="44" pos:column="6"/></block></then> <else pos:line="44" pos:column="7">else <block pos:line="44" pos:column="12">{
        <expr_stmt><expr><call><name pos:line="45" pos:column="9">Assert<pos:position pos:line="45" pos:column="15"/></name><argument_list pos:line="45" pos:column="15">(<argument><expr><name pos:line="45" pos:column="16">buf<pos:position pos:line="45" pos:column="19"/></name> <operator pos:line="45" pos:column="20">!=<pos:position pos:line="45" pos:column="22"/></operator> <operator pos:line="45" pos:column="23">(<pos:position pos:line="45" pos:column="24"/></operator><name pos:line="45" pos:column="24">char<pos:position pos:line="45" pos:column="28"/></name><operator pos:line="45" pos:column="28">*<pos:position pos:line="45" pos:column="29"/></operator><operator pos:line="45" pos:column="29">)<pos:position pos:line="45" pos:column="30"/></operator><literal type="number" pos:line="45" pos:column="30">0<pos:position pos:line="45" pos:column="31"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="45" pos:column="33">"lost buf"<pos:position pos:line="45" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="45" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="45"/></expr_stmt>
        <expr_stmt><expr><name pos:line="46" pos:column="9">opt_lenb<pos:position pos:line="46" pos:column="17"/></name> <operator pos:line="46" pos:column="18">=<pos:position pos:line="46" pos:column="19"/></operator> <name pos:line="46" pos:column="20">static_lenb<pos:position pos:line="46" pos:column="31"/></name> <operator pos:line="46" pos:column="32">=<pos:position pos:line="46" pos:column="33"/></operator> <name pos:line="46" pos:column="34">stored_len<pos:position pos:line="46" pos:column="44"/></name> <operator pos:line="46" pos:column="45">+<pos:position pos:line="46" pos:column="46"/></operator> <literal type="number" pos:line="46" pos:column="47">5<pos:position pos:line="46" pos:column="48"/></literal></expr>;<pos:position pos:line="46" pos:column="49"/></expr_stmt> <comment type="block" pos:line="46" pos:column="50">/* force a stored block */</comment>
    }<pos:position pos:line="47" pos:column="6"/></block></else></if>

<cpp:ifdef pos:line="49" pos:column="1">#<cpp:directive pos:line="49" pos:column="2">ifdef<pos:position pos:line="49" pos:column="7"/></cpp:directive> <name pos:line="49" pos:column="8">FORCE_STORED<pos:position pos:line="49" pos:column="20"/></name></cpp:ifdef>
    <if pos:line="50" pos:column="5">if <condition pos:line="50" pos:column="8">(<expr><name pos:line="50" pos:column="9">buf<pos:position pos:line="50" pos:column="12"/></name> <operator pos:line="50" pos:column="13">!=<pos:position pos:line="50" pos:column="15"/></operator> <operator pos:line="50" pos:column="16">(<pos:position pos:line="50" pos:column="17"/></operator><name pos:line="50" pos:column="17">char<pos:position pos:line="50" pos:column="21"/></name><operator pos:line="50" pos:column="21">*<pos:position pos:line="50" pos:column="22"/></operator><operator pos:line="50" pos:column="22">)<pos:position pos:line="50" pos:column="23"/></operator><literal type="number" pos:line="50" pos:column="23">0<pos:position pos:line="50" pos:column="24"/></literal></expr>)<pos:position pos:line="50" pos:column="25"/></condition><then pos:line="50" pos:column="25"> <block pos:line="50" pos:column="26">{ <comment type="block" pos:line="50" pos:column="28">/* force stored block */</comment>
<cpp:else pos:line="51" pos:column="1">#<cpp:directive pos:line="51" pos:column="2">else<pos:position pos:line="51" pos:column="6"/></cpp:directive></cpp:else>
    <if pos:line="52" pos:column="5">if <condition pos:line="52" pos:column="8">(<expr><name pos:line="52" pos:column="9">stored_len<pos:position pos:line="52" pos:column="19"/></name><operator pos:line="52" pos:column="19">+<pos:position pos:line="52" pos:column="20"/></operator><literal type="number" pos:line="52" pos:column="20">4<pos:position pos:line="52" pos:column="21"/></literal> <operator pos:line="52" pos:column="22">&lt;=<pos:position pos:line="52" pos:column="27"/></operator> <name pos:line="52" pos:column="25">opt_lenb<pos:position pos:line="52" pos:column="33"/></name> <operator pos:line="52" pos:column="34">&amp;&amp;<pos:position pos:line="52" pos:column="44"/></operator> <name pos:line="52" pos:column="37">buf<pos:position pos:line="52" pos:column="40"/></name> <operator pos:line="52" pos:column="41">!=<pos:position pos:line="52" pos:column="43"/></operator> <operator pos:line="52" pos:column="44">(<pos:position pos:line="52" pos:column="45"/></operator><name pos:line="52" pos:column="45">char<pos:position pos:line="52" pos:column="49"/></name><operator pos:line="52" pos:column="49">*<pos:position pos:line="52" pos:column="50"/></operator><operator pos:line="52" pos:column="50">)<pos:position pos:line="52" pos:column="51"/></operator><literal type="number" pos:line="52" pos:column="51">0<pos:position pos:line="52" pos:column="52"/></literal></expr>)<pos:position pos:line="52" pos:column="53"/></condition><then pos:line="52" pos:column="53"> <block pos:line="52" pos:column="54">{
                       <comment type="block" pos:line="53" pos:column="24">/* 4: two words for the lengths */</comment>
<cpp:endif pos:line="54" pos:column="1">#<cpp:directive pos:line="54" pos:column="2">endif<pos:position pos:line="54" pos:column="7"/></cpp:directive></cpp:endif>
        <comment type="block" pos:line="55" pos:column="9">/* The test buf != NULL is only necessary if LIT_BUFSIZE &gt; WSIZE.
         * Otherwise we can't have processed more than WSIZE input bytes since
         * the last block flush, because compression would have been
         * successful. If LIT_BUFSIZE &lt;= WSIZE, it is never too late to
         * transform a block into a stored block.
         */</comment>
        <expr_stmt><expr><call><name pos:line="61" pos:column="9">_tr_stored_block<pos:position pos:line="61" pos:column="25"/></name><argument_list pos:line="61" pos:column="25">(<argument><expr><name pos:line="61" pos:column="26">s<pos:position pos:line="61" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="29">buf<pos:position pos:line="61" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="34">stored_len<pos:position pos:line="61" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="46">last<pos:position pos:line="61" pos:column="50"/></name></expr></argument>)<pos:position pos:line="61" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="52"/></expr_stmt>

<cpp:ifdef pos:line="63" pos:column="1">#<cpp:directive pos:line="63" pos:column="2">ifdef<pos:position pos:line="63" pos:column="7"/></cpp:directive> <name pos:line="63" pos:column="8">FORCE_STATIC<pos:position pos:line="63" pos:column="20"/></name></cpp:ifdef>
    }<pos:position pos:line="64" pos:column="6"/></block></then> <elseif pos:line="64" pos:column="7">else <if pos:line="64" pos:column="12">if <condition pos:line="64" pos:column="15">(<expr><name pos:line="64" pos:column="16">static_lenb<pos:position pos:line="64" pos:column="27"/></name> <operator pos:line="64" pos:column="28">&gt;=<pos:position pos:line="64" pos:column="33"/></operator> <literal type="number" pos:line="64" pos:column="31">0<pos:position pos:line="64" pos:column="32"/></literal></expr>)<pos:position pos:line="64" pos:column="33"/></condition><then pos:line="64" pos:column="33"> <block pos:line="64" pos:column="34">{ <comment type="block" pos:line="64" pos:column="36">/* force static trees */</comment>
<cpp:else pos:line="65" pos:column="1">#<cpp:directive pos:line="65" pos:column="2">else<pos:position pos:line="65" pos:column="6"/></cpp:directive></cpp:else>
    }<pos:position pos:line="66" pos:column="6"/></block></then></if></elseif> <elseif pos:line="66" pos:column="7">else <if pos:line="66" pos:column="12">if <condition pos:line="66" pos:column="15">(<expr><name><name pos:line="66" pos:column="16">s<pos:position pos:line="66" pos:column="17"/></name><operator pos:line="66" pos:column="17">-&gt;<pos:position pos:line="66" pos:column="22"/></operator><name pos:line="66" pos:column="19">strategy<pos:position pos:line="66" pos:column="27"/></name></name> <operator pos:line="66" pos:column="28">==<pos:position pos:line="66" pos:column="30"/></operator> <name pos:line="66" pos:column="31">Z_FIXED<pos:position pos:line="66" pos:column="38"/></name> <operator pos:line="66" pos:column="39">||<pos:position pos:line="66" pos:column="41"/></operator> <name pos:line="66" pos:column="42">static_lenb<pos:position pos:line="66" pos:column="53"/></name> <operator pos:line="66" pos:column="54">==<pos:position pos:line="66" pos:column="56"/></operator> <name pos:line="66" pos:column="57">opt_lenb<pos:position pos:line="66" pos:column="65"/></name></expr>)<pos:position pos:line="66" pos:column="66"/></condition><then pos:line="66" pos:column="66"> <block pos:line="66" pos:column="67">{
<cpp:endif pos:line="67" pos:column="1">#<cpp:directive pos:line="67" pos:column="2">endif<pos:position pos:line="67" pos:column="7"/></cpp:directive></cpp:endif>
        <expr_stmt><expr><call><name pos:line="68" pos:column="9">send_bits<pos:position pos:line="68" pos:column="18"/></name><argument_list pos:line="68" pos:column="18">(<argument><expr><name pos:line="68" pos:column="19">s<pos:position pos:line="68" pos:column="20"/></name></expr></argument>, <argument><expr><operator pos:line="68" pos:column="22">(<pos:position pos:line="68" pos:column="23"/></operator><name pos:line="68" pos:column="23">STATIC_TREES<pos:position pos:line="68" pos:column="35"/></name><operator pos:line="68" pos:column="35">&lt;&lt;<pos:position pos:line="68" pos:column="43"/></operator><literal type="number" pos:line="68" pos:column="37">1<pos:position pos:line="68" pos:column="38"/></literal><operator pos:line="68" pos:column="38">)<pos:position pos:line="68" pos:column="39"/></operator><operator pos:line="68" pos:column="39">+<pos:position pos:line="68" pos:column="40"/></operator><name pos:line="68" pos:column="40">last<pos:position pos:line="68" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="68" pos:column="46">3<pos:position pos:line="68" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="68" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="49"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="69" pos:column="9">compress_block<pos:position pos:line="69" pos:column="23"/></name><argument_list pos:line="69" pos:column="23">(<argument><expr><name pos:line="69" pos:column="24">s<pos:position pos:line="69" pos:column="25"/></name></expr></argument>, <argument><expr><operator pos:line="69" pos:column="27">(<pos:position pos:line="69" pos:column="28"/></operator><specifier pos:line="69" pos:column="28">const<pos:position pos:line="69" pos:column="33"/></specifier> <name pos:line="69" pos:column="34">ct_data<pos:position pos:line="69" pos:column="41"/></name> <operator pos:line="69" pos:column="42">*<pos:position pos:line="69" pos:column="43"/></operator><operator pos:line="69" pos:column="43">)<pos:position pos:line="69" pos:column="44"/></operator><name pos:line="69" pos:column="44">static_ltree<pos:position pos:line="69" pos:column="56"/></name></expr></argument>,
                       <argument><expr><operator pos:line="70" pos:column="24">(<pos:position pos:line="70" pos:column="25"/></operator><specifier pos:line="70" pos:column="25">const<pos:position pos:line="70" pos:column="30"/></specifier> <name pos:line="70" pos:column="31">ct_data<pos:position pos:line="70" pos:column="38"/></name> <operator pos:line="70" pos:column="39">*<pos:position pos:line="70" pos:column="40"/></operator><operator pos:line="70" pos:column="40">)<pos:position pos:line="70" pos:column="41"/></operator><name pos:line="70" pos:column="41">static_dtree<pos:position pos:line="70" pos:column="53"/></name></expr></argument>)<pos:position pos:line="70" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="55"/></expr_stmt>
<cpp:ifdef pos:line="71" pos:column="1">#<cpp:directive pos:line="71" pos:column="2">ifdef<pos:position pos:line="71" pos:column="7"/></cpp:directive> <name pos:line="71" pos:column="8">DEBUG<pos:position pos:line="71" pos:column="13"/></name></cpp:ifdef>
        <expr_stmt><expr><name><name pos:line="72" pos:column="9">s<pos:position pos:line="72" pos:column="10"/></name><operator pos:line="72" pos:column="10">-&gt;<pos:position pos:line="72" pos:column="15"/></operator><name pos:line="72" pos:column="12">compressed_len<pos:position pos:line="72" pos:column="26"/></name></name> <operator pos:line="72" pos:column="27">+=<pos:position pos:line="72" pos:column="29"/></operator> <literal type="number" pos:line="72" pos:column="30">3<pos:position pos:line="72" pos:column="31"/></literal> <operator pos:line="72" pos:column="32">+<pos:position pos:line="72" pos:column="33"/></operator> <name><name pos:line="72" pos:column="34">s<pos:position pos:line="72" pos:column="35"/></name><operator pos:line="72" pos:column="35">-&gt;<pos:position pos:line="72" pos:column="40"/></operator><name pos:line="72" pos:column="37">static_len<pos:position pos:line="72" pos:column="47"/></name></name></expr>;<pos:position pos:line="72" pos:column="48"/></expr_stmt>
<cpp:endif pos:line="73" pos:column="1">#<cpp:directive pos:line="73" pos:column="2">endif<pos:position pos:line="73" pos:column="7"/></cpp:directive></cpp:endif>
    }<pos:position pos:line="74" pos:column="6"/></block></then></if></elseif> <else pos:line="74" pos:column="7">else <block pos:line="74" pos:column="12">{
        <expr_stmt><expr><call><name pos:line="75" pos:column="9">send_bits<pos:position pos:line="75" pos:column="18"/></name><argument_list pos:line="75" pos:column="18">(<argument><expr><name pos:line="75" pos:column="19">s<pos:position pos:line="75" pos:column="20"/></name></expr></argument>, <argument><expr><operator pos:line="75" pos:column="22">(<pos:position pos:line="75" pos:column="23"/></operator><name pos:line="75" pos:column="23">DYN_TREES<pos:position pos:line="75" pos:column="32"/></name><operator pos:line="75" pos:column="32">&lt;&lt;<pos:position pos:line="75" pos:column="40"/></operator><literal type="number" pos:line="75" pos:column="34">1<pos:position pos:line="75" pos:column="35"/></literal><operator pos:line="75" pos:column="35">)<pos:position pos:line="75" pos:column="36"/></operator><operator pos:line="75" pos:column="36">+<pos:position pos:line="75" pos:column="37"/></operator><name pos:line="75" pos:column="37">last<pos:position pos:line="75" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="75" pos:column="43">3<pos:position pos:line="75" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="75" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="46"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="76" pos:column="9">send_all_trees<pos:position pos:line="76" pos:column="23"/></name><argument_list pos:line="76" pos:column="23">(<argument><expr><name pos:line="76" pos:column="24">s<pos:position pos:line="76" pos:column="25"/></name></expr></argument>, <argument><expr><name><name pos:line="76" pos:column="27">s<pos:position pos:line="76" pos:column="28"/></name><operator pos:line="76" pos:column="28">-&gt;<pos:position pos:line="76" pos:column="33"/></operator><name pos:line="76" pos:column="30">l_desc<pos:position pos:line="76" pos:column="36"/></name><operator pos:line="76" pos:column="36">.<pos:position pos:line="76" pos:column="37"/></operator><name pos:line="76" pos:column="37">max_code<pos:position pos:line="76" pos:column="45"/></name></name><operator pos:line="76" pos:column="45">+<pos:position pos:line="76" pos:column="46"/></operator><literal type="number" pos:line="76" pos:column="46">1<pos:position pos:line="76" pos:column="47"/></literal></expr></argument>, <argument><expr><name><name pos:line="76" pos:column="49">s<pos:position pos:line="76" pos:column="50"/></name><operator pos:line="76" pos:column="50">-&gt;<pos:position pos:line="76" pos:column="55"/></operator><name pos:line="76" pos:column="52">d_desc<pos:position pos:line="76" pos:column="58"/></name><operator pos:line="76" pos:column="58">.<pos:position pos:line="76" pos:column="59"/></operator><name pos:line="76" pos:column="59">max_code<pos:position pos:line="76" pos:column="67"/></name></name><operator pos:line="76" pos:column="67">+<pos:position pos:line="76" pos:column="68"/></operator><literal type="number" pos:line="76" pos:column="68">1<pos:position pos:line="76" pos:column="69"/></literal></expr></argument>,
                       <argument><expr><name pos:line="77" pos:column="24">max_blindex<pos:position pos:line="77" pos:column="35"/></name><operator pos:line="77" pos:column="35">+<pos:position pos:line="77" pos:column="36"/></operator><literal type="number" pos:line="77" pos:column="36">1<pos:position pos:line="77" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="77" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="39"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="78" pos:column="9">compress_block<pos:position pos:line="78" pos:column="23"/></name><argument_list pos:line="78" pos:column="23">(<argument><expr><name pos:line="78" pos:column="24">s<pos:position pos:line="78" pos:column="25"/></name></expr></argument>, <argument><expr><operator pos:line="78" pos:column="27">(<pos:position pos:line="78" pos:column="28"/></operator><specifier pos:line="78" pos:column="28">const<pos:position pos:line="78" pos:column="33"/></specifier> <name pos:line="78" pos:column="34">ct_data<pos:position pos:line="78" pos:column="41"/></name> <operator pos:line="78" pos:column="42">*<pos:position pos:line="78" pos:column="43"/></operator><operator pos:line="78" pos:column="43">)<pos:position pos:line="78" pos:column="44"/></operator><name><name pos:line="78" pos:column="44">s<pos:position pos:line="78" pos:column="45"/></name><operator pos:line="78" pos:column="45">-&gt;<pos:position pos:line="78" pos:column="50"/></operator><name pos:line="78" pos:column="47">dyn_ltree<pos:position pos:line="78" pos:column="56"/></name></name></expr></argument>,
                       <argument><expr><operator pos:line="79" pos:column="24">(<pos:position pos:line="79" pos:column="25"/></operator><specifier pos:line="79" pos:column="25">const<pos:position pos:line="79" pos:column="30"/></specifier> <name pos:line="79" pos:column="31">ct_data<pos:position pos:line="79" pos:column="38"/></name> <operator pos:line="79" pos:column="39">*<pos:position pos:line="79" pos:column="40"/></operator><operator pos:line="79" pos:column="40">)<pos:position pos:line="79" pos:column="41"/></operator><name><name pos:line="79" pos:column="41">s<pos:position pos:line="79" pos:column="42"/></name><operator pos:line="79" pos:column="42">-&gt;<pos:position pos:line="79" pos:column="47"/></operator><name pos:line="79" pos:column="44">dyn_dtree<pos:position pos:line="79" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="79" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="55"/></expr_stmt>
<cpp:ifdef pos:line="80" pos:column="1">#<cpp:directive pos:line="80" pos:column="2">ifdef<pos:position pos:line="80" pos:column="7"/></cpp:directive> <name pos:line="80" pos:column="8">DEBUG<pos:position pos:line="80" pos:column="13"/></name></cpp:ifdef>
        <expr_stmt><expr><name><name pos:line="81" pos:column="9">s<pos:position pos:line="81" pos:column="10"/></name><operator pos:line="81" pos:column="10">-&gt;<pos:position pos:line="81" pos:column="15"/></operator><name pos:line="81" pos:column="12">compressed_len<pos:position pos:line="81" pos:column="26"/></name></name> <operator pos:line="81" pos:column="27">+=<pos:position pos:line="81" pos:column="29"/></operator> <literal type="number" pos:line="81" pos:column="30">3<pos:position pos:line="81" pos:column="31"/></literal> <operator pos:line="81" pos:column="32">+<pos:position pos:line="81" pos:column="33"/></operator> <name><name pos:line="81" pos:column="34">s<pos:position pos:line="81" pos:column="35"/></name><operator pos:line="81" pos:column="35">-&gt;<pos:position pos:line="81" pos:column="40"/></operator><name pos:line="81" pos:column="37">opt_len<pos:position pos:line="81" pos:column="44"/></name></name></expr>;<pos:position pos:line="81" pos:column="45"/></expr_stmt>
<cpp:endif pos:line="82" pos:column="1">#<cpp:directive pos:line="82" pos:column="2">endif<pos:position pos:line="82" pos:column="7"/></cpp:directive></cpp:endif>
    }<pos:position pos:line="83" pos:column="6"/></block></else></if>
    <expr_stmt><expr><call><name pos:line="84" pos:column="5">Assert<pos:position pos:line="84" pos:column="11"/></name> <argument_list pos:line="84" pos:column="12">(<argument><expr><name><name pos:line="84" pos:column="13">s<pos:position pos:line="84" pos:column="14"/></name><operator pos:line="84" pos:column="14">-&gt;<pos:position pos:line="84" pos:column="19"/></operator><name pos:line="84" pos:column="16">compressed_len<pos:position pos:line="84" pos:column="30"/></name></name> <operator pos:line="84" pos:column="31">==<pos:position pos:line="84" pos:column="33"/></operator> <name><name pos:line="84" pos:column="34">s<pos:position pos:line="84" pos:column="35"/></name><operator pos:line="84" pos:column="35">-&gt;<pos:position pos:line="84" pos:column="40"/></operator><name pos:line="84" pos:column="37">bits_sent<pos:position pos:line="84" pos:column="46"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="84" pos:column="48">"bad compressed size"<pos:position pos:line="84" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="84" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="71"/></expr_stmt>
    <comment type="block" pos:line="85" pos:column="5">/* The above check is made mod 2^32, for files larger than 512 MB
     * and uLong implemented on 32 bits.
     */</comment>
    <expr_stmt><expr><call><name pos:line="88" pos:column="5">init_block<pos:position pos:line="88" pos:column="15"/></name><argument_list pos:line="88" pos:column="15">(<argument><expr><name pos:line="88" pos:column="16">s<pos:position pos:line="88" pos:column="17"/></name></expr></argument>)<pos:position pos:line="88" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="19"/></expr_stmt>

    <if pos:line="90" pos:column="5">if <condition pos:line="90" pos:column="8">(<expr><name pos:line="90" pos:column="9">last<pos:position pos:line="90" pos:column="13"/></name></expr>)<pos:position pos:line="90" pos:column="14"/></condition><then pos:line="90" pos:column="14"> <block pos:line="90" pos:column="15">{
        <expr_stmt><expr><call><name pos:line="91" pos:column="9">bi_windup<pos:position pos:line="91" pos:column="18"/></name><argument_list pos:line="91" pos:column="18">(<argument><expr><name pos:line="91" pos:column="19">s<pos:position pos:line="91" pos:column="20"/></name></expr></argument>)<pos:position pos:line="91" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="22"/></expr_stmt>
<cpp:ifdef pos:line="92" pos:column="1">#<cpp:directive pos:line="92" pos:column="2">ifdef<pos:position pos:line="92" pos:column="7"/></cpp:directive> <name pos:line="92" pos:column="8">DEBUG<pos:position pos:line="92" pos:column="13"/></name></cpp:ifdef>
        <expr_stmt><expr><name><name pos:line="93" pos:column="9">s<pos:position pos:line="93" pos:column="10"/></name><operator pos:line="93" pos:column="10">-&gt;<pos:position pos:line="93" pos:column="15"/></operator><name pos:line="93" pos:column="12">compressed_len<pos:position pos:line="93" pos:column="26"/></name></name> <operator pos:line="93" pos:column="27">+=<pos:position pos:line="93" pos:column="29"/></operator> <literal type="number" pos:line="93" pos:column="30">7<pos:position pos:line="93" pos:column="31"/></literal></expr>;<pos:position pos:line="93" pos:column="32"/></expr_stmt>  <comment type="block" pos:line="93" pos:column="34">/* align on byte boundary */</comment>
<cpp:endif pos:line="94" pos:column="1">#<cpp:directive pos:line="94" pos:column="2">endif<pos:position pos:line="94" pos:column="7"/></cpp:directive></cpp:endif>
    }<pos:position pos:line="95" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="96" pos:column="5">Tracev<pos:position pos:line="96" pos:column="11"/></name><argument_list pos:line="96" pos:column="11">(<argument><expr><operator pos:line="96" pos:column="12">(<pos:position pos:line="96" pos:column="13"/></operator><name pos:line="96" pos:column="13">stderr<pos:position pos:line="96" pos:column="19"/></name><operator pos:line="96" pos:column="19">,<pos:position pos:line="96" pos:column="20"/></operator><literal type="string" pos:line="96" pos:column="20">"\ncomprlen %lu(%lu) "<pos:position pos:line="96" pos:column="42"/></literal><operator pos:line="96" pos:column="42">,<pos:position pos:line="96" pos:column="43"/></operator> <name><name pos:line="96" pos:column="44">s<pos:position pos:line="96" pos:column="45"/></name><operator pos:line="96" pos:column="45">-&gt;<pos:position pos:line="96" pos:column="50"/></operator><name pos:line="96" pos:column="47">compressed_len<pos:position pos:line="96" pos:column="61"/></name></name><operator pos:line="96" pos:column="61">&gt;&gt;<pos:position pos:line="96" pos:column="66"/></operator><literal type="number" pos:line="96" pos:column="63">3<pos:position pos:line="96" pos:column="64"/></literal><operator pos:line="96" pos:column="64">,<pos:position pos:line="96" pos:column="65"/></operator>
           <name><name pos:line="97" pos:column="12">s<pos:position pos:line="97" pos:column="13"/></name><operator pos:line="97" pos:column="13">-&gt;<pos:position pos:line="97" pos:column="18"/></operator><name pos:line="97" pos:column="15">compressed_len<pos:position pos:line="97" pos:column="29"/></name></name><operator pos:line="97" pos:column="29">-<pos:position pos:line="97" pos:column="30"/></operator><literal type="number" pos:line="97" pos:column="30">7<pos:position pos:line="97" pos:column="31"/></literal><operator pos:line="97" pos:column="31">*<pos:position pos:line="97" pos:column="32"/></operator><name pos:line="97" pos:column="32">last<pos:position pos:line="97" pos:column="36"/></name><operator pos:line="97" pos:column="36">)<pos:position pos:line="97" pos:column="37"/></operator></expr></argument>)<pos:position pos:line="97" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="39"/></expr_stmt>
}<pos:position pos:line="98" pos:column="2"/></block></then></if>

<comment type="block" pos:line="100" pos:column="1">/* ===========================================================================
 * Save the match info and tally the frequency counts. Return true if
 * the current block must be flushed.
 */</comment>
<decl_stmt><decl><type><name pos:line="104" pos:column="1">int<pos:position pos:line="104" pos:column="4"/></name> <name pos:line="104" pos:column="5">ZLIB_INTERNAL<pos:position pos:line="104" pos:column="18"/></name></type> <name pos:line="104" pos:column="19">_tr_tally<pos:position pos:line="104" pos:column="28"/></name> <argument_list pos:line="104" pos:column="29">(<argument><expr><name pos:line="104" pos:column="30">s<pos:position pos:line="104" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="104" pos:column="33">dist<pos:position pos:line="104" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="104" pos:column="39">lc<pos:position pos:line="104" pos:column="41"/></name></expr></argument>)<pos:position pos:line="104" pos:column="42"/></argument_list>
    <name pos:line="105" pos:column="5">deflate_state<pos:position pos:line="105" pos:column="18"/></name> <modifier pos:line="105" pos:column="19">*<pos:position pos:line="105" pos:column="20"/></modifier><name pos:line="105" pos:column="20">s<pos:position pos:line="105" pos:column="21"/></name></decl>;<pos:position pos:line="105" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="106" pos:column="5">unsigned<pos:position pos:line="106" pos:column="13"/></name></type> <name pos:line="106" pos:column="14">dist<pos:position pos:line="106" pos:column="18"/></name></decl>;<pos:position pos:line="106" pos:column="19"/></decl_stmt>  <comment type="block" pos:line="106" pos:column="21">/* distance of matched string */</comment>
    <decl_stmt><decl><type><name pos:line="107" pos:column="5">unsigned<pos:position pos:line="107" pos:column="13"/></name></type> <name pos:line="107" pos:column="14">lc<pos:position pos:line="107" pos:column="16"/></name></decl>;<pos:position pos:line="107" pos:column="17"/></decl_stmt>    <comment type="block" pos:line="107" pos:column="21">/* match length-MIN_MATCH or unmatched char (if dist==0) */</comment>
<block pos:line="108" pos:column="1">{
    <expr_stmt><expr><name><name pos:line="109" pos:column="5">s<pos:position pos:line="109" pos:column="6"/></name><operator pos:line="109" pos:column="6">-&gt;<pos:position pos:line="109" pos:column="11"/></operator><name pos:line="109" pos:column="8">d_buf<pos:position pos:line="109" pos:column="13"/></name><index pos:line="109" pos:column="13">[<expr><name><name pos:line="109" pos:column="14">s<pos:position pos:line="109" pos:column="15"/></name><operator pos:line="109" pos:column="15">-&gt;<pos:position pos:line="109" pos:column="20"/></operator><name pos:line="109" pos:column="17">last_lit<pos:position pos:line="109" pos:column="25"/></name></name></expr>]<pos:position pos:line="109" pos:column="26"/></index></name> <operator pos:line="109" pos:column="27">=<pos:position pos:line="109" pos:column="28"/></operator> <operator pos:line="109" pos:column="29">(<pos:position pos:line="109" pos:column="30"/></operator><name pos:line="109" pos:column="30">ush<pos:position pos:line="109" pos:column="33"/></name><operator pos:line="109" pos:column="33">)<pos:position pos:line="109" pos:column="34"/></operator><name pos:line="109" pos:column="34">dist<pos:position pos:line="109" pos:column="38"/></name></expr>;<pos:position pos:line="109" pos:column="39"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="110" pos:column="5">s<pos:position pos:line="110" pos:column="6"/></name><operator pos:line="110" pos:column="6">-&gt;<pos:position pos:line="110" pos:column="11"/></operator><name pos:line="110" pos:column="8">l_buf<pos:position pos:line="110" pos:column="13"/></name><index pos:line="110" pos:column="13">[<expr><name><name pos:line="110" pos:column="14">s<pos:position pos:line="110" pos:column="15"/></name><operator pos:line="110" pos:column="15">-&gt;<pos:position pos:line="110" pos:column="20"/></operator><name pos:line="110" pos:column="17">last_lit<pos:position pos:line="110" pos:column="25"/></name></name><operator pos:line="110" pos:column="25">++<pos:position pos:line="110" pos:column="27"/></operator></expr>]<pos:position pos:line="110" pos:column="28"/></index></name> <operator pos:line="110" pos:column="29">=<pos:position pos:line="110" pos:column="30"/></operator> <operator pos:line="110" pos:column="31">(<pos:position pos:line="110" pos:column="32"/></operator><name pos:line="110" pos:column="32">uch<pos:position pos:line="110" pos:column="35"/></name><operator pos:line="110" pos:column="35">)<pos:position pos:line="110" pos:column="36"/></operator><name pos:line="110" pos:column="36">lc<pos:position pos:line="110" pos:column="38"/></name></expr>;<pos:position pos:line="110" pos:column="39"/></expr_stmt>
    <if pos:line="111" pos:column="5">if <condition pos:line="111" pos:column="8">(<expr><name pos:line="111" pos:column="9">dist<pos:position pos:line="111" pos:column="13"/></name> <operator pos:line="111" pos:column="14">==<pos:position pos:line="111" pos:column="16"/></operator> <literal type="number" pos:line="111" pos:column="17">0<pos:position pos:line="111" pos:column="18"/></literal></expr>)<pos:position pos:line="111" pos:column="19"/></condition><then pos:line="111" pos:column="19"> <block pos:line="111" pos:column="20">{
        <comment type="block" pos:line="112" pos:column="9">/* lc is the unmatched char */</comment>
        <expr_stmt><expr><name><name pos:line="113" pos:column="9">s<pos:position pos:line="113" pos:column="10"/></name><operator pos:line="113" pos:column="10">-&gt;<pos:position pos:line="113" pos:column="15"/></operator><name pos:line="113" pos:column="12">dyn_ltree<pos:position pos:line="113" pos:column="21"/></name><index pos:line="113" pos:column="21">[<expr><name pos:line="113" pos:column="22">lc<pos:position pos:line="113" pos:column="24"/></name></expr>]<pos:position pos:line="113" pos:column="25"/></index></name><operator pos:line="113" pos:column="25">.<pos:position pos:line="113" pos:column="26"/></operator><name pos:line="113" pos:column="26">Freq<pos:position pos:line="113" pos:column="30"/></name><operator pos:line="113" pos:column="30">++<pos:position pos:line="113" pos:column="32"/></operator></expr>;<pos:position pos:line="113" pos:column="33"/></expr_stmt>
    }<pos:position pos:line="114" pos:column="6"/></block></then> <else pos:line="114" pos:column="7">else <block pos:line="114" pos:column="12">{
        <expr_stmt><expr><name><name pos:line="115" pos:column="9">s<pos:position pos:line="115" pos:column="10"/></name><operator pos:line="115" pos:column="10">-&gt;<pos:position pos:line="115" pos:column="15"/></operator><name pos:line="115" pos:column="12">matches<pos:position pos:line="115" pos:column="19"/></name></name><operator pos:line="115" pos:column="19">++<pos:position pos:line="115" pos:column="21"/></operator></expr>;<pos:position pos:line="115" pos:column="22"/></expr_stmt>
        <comment type="block" pos:line="116" pos:column="9">/* Here, lc is the match length - MIN_MATCH */</comment>
        <expr_stmt><expr><name pos:line="117" pos:column="9">dist<pos:position pos:line="117" pos:column="13"/></name><operator pos:line="117" pos:column="13">--<pos:position pos:line="117" pos:column="15"/></operator></expr>;<pos:position pos:line="117" pos:column="16"/></expr_stmt>             <comment type="block" pos:line="117" pos:column="29">/* dist = match distance - 1 */</comment>
        <expr_stmt><expr><call><name pos:line="118" pos:column="9">Assert<pos:position pos:line="118" pos:column="15"/></name><argument_list pos:line="118" pos:column="15">(<argument><expr><operator pos:line="118" pos:column="16">(<pos:position pos:line="118" pos:column="17"/></operator><name pos:line="118" pos:column="17">ush<pos:position pos:line="118" pos:column="20"/></name><operator pos:line="118" pos:column="20">)<pos:position pos:line="118" pos:column="21"/></operator><name pos:line="118" pos:column="21">dist<pos:position pos:line="118" pos:column="25"/></name> <operator pos:line="118" pos:column="26">&lt;<pos:position pos:line="118" pos:column="30"/></operator> <operator pos:line="118" pos:column="28">(<pos:position pos:line="118" pos:column="29"/></operator><name pos:line="118" pos:column="29">ush<pos:position pos:line="118" pos:column="32"/></name><operator pos:line="118" pos:column="32">)<pos:position pos:line="118" pos:column="33"/></operator><call><name pos:line="118" pos:column="33">MAX_DIST<pos:position pos:line="118" pos:column="41"/></name><argument_list pos:line="118" pos:column="41">(<argument><expr><name pos:line="118" pos:column="42">s<pos:position pos:line="118" pos:column="43"/></name></expr></argument>)<pos:position pos:line="118" pos:column="44"/></argument_list></call> <operator pos:line="118" pos:column="45">&amp;&amp;<pos:position pos:line="118" pos:column="55"/></operator>
               <operator pos:line="119" pos:column="16">(<pos:position pos:line="119" pos:column="17"/></operator><name pos:line="119" pos:column="17">ush<pos:position pos:line="119" pos:column="20"/></name><operator pos:line="119" pos:column="20">)<pos:position pos:line="119" pos:column="21"/></operator><name pos:line="119" pos:column="21">lc<pos:position pos:line="119" pos:column="23"/></name> <operator pos:line="119" pos:column="24">&lt;=<pos:position pos:line="119" pos:column="29"/></operator> <call pos:line="119" pos:column="27">(<name pos:line="119" pos:column="28">ush<pos:position pos:line="119" pos:column="31"/></name>)<argument_list pos:line="119" pos:column="32">(<argument><expr><name pos:line="119" pos:column="33">MAX_MATCH<pos:position pos:line="119" pos:column="42"/></name><operator pos:line="119" pos:column="42">-<pos:position pos:line="119" pos:column="43"/></operator><name pos:line="119" pos:column="43">MIN_MATCH<pos:position pos:line="119" pos:column="52"/></name></expr></argument>)<pos:position pos:line="119" pos:column="53"/></argument_list></call> <operator pos:line="119" pos:column="54">&amp;&amp;<pos:position pos:line="119" pos:column="64"/></operator>
               <operator pos:line="120" pos:column="16">(<pos:position pos:line="120" pos:column="17"/></operator><name pos:line="120" pos:column="17">ush<pos:position pos:line="120" pos:column="20"/></name><operator pos:line="120" pos:column="20">)<pos:position pos:line="120" pos:column="21"/></operator><call><name pos:line="120" pos:column="21">d_code<pos:position pos:line="120" pos:column="27"/></name><argument_list pos:line="120" pos:column="27">(<argument><expr><name pos:line="120" pos:column="28">dist<pos:position pos:line="120" pos:column="32"/></name></expr></argument>)<pos:position pos:line="120" pos:column="33"/></argument_list></call> <operator pos:line="120" pos:column="34">&lt;<pos:position pos:line="120" pos:column="38"/></operator> <operator pos:line="120" pos:column="36">(<pos:position pos:line="120" pos:column="37"/></operator><name pos:line="120" pos:column="37">ush<pos:position pos:line="120" pos:column="40"/></name><operator pos:line="120" pos:column="40">)<pos:position pos:line="120" pos:column="41"/></operator><name pos:line="120" pos:column="41">D_CODES<pos:position pos:line="120" pos:column="48"/></name></expr></argument>,  <argument><expr><literal type="string" pos:line="120" pos:column="51">"_tr_tally: bad match"<pos:position pos:line="120" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="120" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="120" pos:column="75"/></expr_stmt>

        <expr_stmt><expr><name><name pos:line="122" pos:column="9">s<pos:position pos:line="122" pos:column="10"/></name><operator pos:line="122" pos:column="10">-&gt;<pos:position pos:line="122" pos:column="15"/></operator><name pos:line="122" pos:column="12">dyn_ltree<pos:position pos:line="122" pos:column="21"/></name><index pos:line="122" pos:column="21">[<expr><name><name pos:line="122" pos:column="22">_length_code<pos:position pos:line="122" pos:column="34"/></name><index pos:line="122" pos:column="34">[<expr><name pos:line="122" pos:column="35">lc<pos:position pos:line="122" pos:column="37"/></name></expr>]<pos:position pos:line="122" pos:column="38"/></index></name><operator pos:line="122" pos:column="38">+<pos:position pos:line="122" pos:column="39"/></operator><name pos:line="122" pos:column="39">LITERALS<pos:position pos:line="122" pos:column="47"/></name><operator pos:line="122" pos:column="47">+<pos:position pos:line="122" pos:column="48"/></operator><literal type="number" pos:line="122" pos:column="48">1<pos:position pos:line="122" pos:column="49"/></literal></expr>]<pos:position pos:line="122" pos:column="50"/></index></name><operator pos:line="122" pos:column="50">.<pos:position pos:line="122" pos:column="51"/></operator><name pos:line="122" pos:column="51">Freq<pos:position pos:line="122" pos:column="55"/></name><operator pos:line="122" pos:column="55">++<pos:position pos:line="122" pos:column="57"/></operator></expr>;<pos:position pos:line="122" pos:column="58"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="123" pos:column="9">s<pos:position pos:line="123" pos:column="10"/></name><operator pos:line="123" pos:column="10">-&gt;<pos:position pos:line="123" pos:column="15"/></operator><name pos:line="123" pos:column="12">dyn_dtree<pos:position pos:line="123" pos:column="21"/></name><index pos:line="123" pos:column="21">[<expr><call><name pos:line="123" pos:column="22">d_code<pos:position pos:line="123" pos:column="28"/></name><argument_list pos:line="123" pos:column="28">(<argument><expr><name pos:line="123" pos:column="29">dist<pos:position pos:line="123" pos:column="33"/></name></expr></argument>)<pos:position pos:line="123" pos:column="34"/></argument_list></call></expr>]<pos:position pos:line="123" pos:column="35"/></index></name><operator pos:line="123" pos:column="35">.<pos:position pos:line="123" pos:column="36"/></operator><name pos:line="123" pos:column="36">Freq<pos:position pos:line="123" pos:column="40"/></name><operator pos:line="123" pos:column="40">++<pos:position pos:line="123" pos:column="42"/></operator></expr>;<pos:position pos:line="123" pos:column="43"/></expr_stmt>
    }<pos:position pos:line="124" pos:column="6"/></block></else></if>

<cpp:ifdef pos:line="126" pos:column="1">#<cpp:directive pos:line="126" pos:column="2">ifdef<pos:position pos:line="126" pos:column="7"/></cpp:directive> <name pos:line="126" pos:column="8">TRUNCATE_BLOCK<pos:position pos:line="126" pos:column="22"/></name></cpp:ifdef>
    <comment type="block" pos:line="127" pos:column="5">/* Try to guess if it is profitable to stop the current block here */</comment>
    <if pos:line="128" pos:column="5">if <condition pos:line="128" pos:column="8">(<expr><operator pos:line="128" pos:column="9">(<pos:position pos:line="128" pos:column="10"/></operator><name><name pos:line="128" pos:column="10">s<pos:position pos:line="128" pos:column="11"/></name><operator pos:line="128" pos:column="11">-&gt;<pos:position pos:line="128" pos:column="16"/></operator><name pos:line="128" pos:column="13">last_lit<pos:position pos:line="128" pos:column="21"/></name></name> <operator pos:line="128" pos:column="22">&amp;<pos:position pos:line="128" pos:column="27"/></operator> <literal type="number" pos:line="128" pos:column="24">0x1fff<pos:position pos:line="128" pos:column="30"/></literal><operator pos:line="128" pos:column="30">)<pos:position pos:line="128" pos:column="31"/></operator> <operator pos:line="128" pos:column="32">==<pos:position pos:line="128" pos:column="34"/></operator> <literal type="number" pos:line="128" pos:column="35">0<pos:position pos:line="128" pos:column="36"/></literal> <operator pos:line="128" pos:column="37">&amp;&amp;<pos:position pos:line="128" pos:column="47"/></operator> <name><name pos:line="128" pos:column="40">s<pos:position pos:line="128" pos:column="41"/></name><operator pos:line="128" pos:column="41">-&gt;<pos:position pos:line="128" pos:column="46"/></operator><name pos:line="128" pos:column="43">level<pos:position pos:line="128" pos:column="48"/></name></name> <operator pos:line="128" pos:column="49">&gt;<pos:position pos:line="128" pos:column="53"/></operator> <literal type="number" pos:line="128" pos:column="51">2<pos:position pos:line="128" pos:column="52"/></literal></expr>)<pos:position pos:line="128" pos:column="53"/></condition><then pos:line="128" pos:column="53"> <block pos:line="128" pos:column="54">{
        <comment type="block" pos:line="129" pos:column="9">/* Compute an upper bound for the compressed length */</comment>
        <decl_stmt><decl><type><name pos:line="130" pos:column="9">ulg<pos:position pos:line="130" pos:column="12"/></name></type> <name pos:line="130" pos:column="13">out_length<pos:position pos:line="130" pos:column="23"/></name> <init pos:line="130" pos:column="24">= <expr><operator pos:line="130" pos:column="26">(<pos:position pos:line="130" pos:column="27"/></operator><name pos:line="130" pos:column="27">ulg<pos:position pos:line="130" pos:column="30"/></name><operator pos:line="130" pos:column="30">)<pos:position pos:line="130" pos:column="31"/></operator><name><name pos:line="130" pos:column="31">s<pos:position pos:line="130" pos:column="32"/></name><operator pos:line="130" pos:column="32">-&gt;<pos:position pos:line="130" pos:column="37"/></operator><name pos:line="130" pos:column="34">last_lit<pos:position pos:line="130" pos:column="42"/></name></name><operator pos:line="130" pos:column="42">*<pos:position pos:line="130" pos:column="43"/></operator><literal type="number" pos:line="130" pos:column="43">8L<pos:position pos:line="130" pos:column="45"/></literal></expr></init></decl>;<pos:position pos:line="130" pos:column="46"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="131" pos:column="9">ulg<pos:position pos:line="131" pos:column="12"/></name></type> <name pos:line="131" pos:column="13">in_length<pos:position pos:line="131" pos:column="22"/></name> <init pos:line="131" pos:column="23">= <expr><call pos:line="131" pos:column="25">(<name pos:line="131" pos:column="26">ulg<pos:position pos:line="131" pos:column="29"/></name>)<argument_list pos:line="131" pos:column="30">(<argument><expr><operator pos:line="131" pos:column="31">(<pos:position pos:line="131" pos:column="32"/></operator><name pos:line="131" pos:column="32">long<pos:position pos:line="131" pos:column="36"/></name><operator pos:line="131" pos:column="36">)<pos:position pos:line="131" pos:column="37"/></operator><name><name pos:line="131" pos:column="37">s<pos:position pos:line="131" pos:column="38"/></name><operator pos:line="131" pos:column="38">-&gt;<pos:position pos:line="131" pos:column="43"/></operator><name pos:line="131" pos:column="40">strstart<pos:position pos:line="131" pos:column="48"/></name></name> <operator pos:line="131" pos:column="49">-<pos:position pos:line="131" pos:column="50"/></operator> <name><name pos:line="131" pos:column="51">s<pos:position pos:line="131" pos:column="52"/></name><operator pos:line="131" pos:column="52">-&gt;<pos:position pos:line="131" pos:column="57"/></operator><name pos:line="131" pos:column="54">block_start<pos:position pos:line="131" pos:column="65"/></name></name></expr></argument>)<pos:position pos:line="131" pos:column="66"/></argument_list></call></expr></init></decl>;<pos:position pos:line="131" pos:column="67"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="132" pos:column="9">int<pos:position pos:line="132" pos:column="12"/></name></type> <name pos:line="132" pos:column="13">dcode<pos:position pos:line="132" pos:column="18"/></name></decl>;<pos:position pos:line="132" pos:column="19"/></decl_stmt>
        <for pos:line="133" pos:column="9">for <control pos:line="133" pos:column="13">(<init><expr><name pos:line="133" pos:column="14">dcode<pos:position pos:line="133" pos:column="19"/></name> <operator pos:line="133" pos:column="20">=<pos:position pos:line="133" pos:column="21"/></operator> <literal type="number" pos:line="133" pos:column="22">0<pos:position pos:line="133" pos:column="23"/></literal></expr>;<pos:position pos:line="133" pos:column="24"/></init> <condition><expr><name pos:line="133" pos:column="25">dcode<pos:position pos:line="133" pos:column="30"/></name> <operator pos:line="133" pos:column="31">&lt;<pos:position pos:line="133" pos:column="35"/></operator> <name pos:line="133" pos:column="33">D_CODES<pos:position pos:line="133" pos:column="40"/></name></expr>;<pos:position pos:line="133" pos:column="41"/></condition> <incr><expr><name pos:line="133" pos:column="42">dcode<pos:position pos:line="133" pos:column="47"/></name><operator pos:line="133" pos:column="47">++<pos:position pos:line="133" pos:column="49"/></operator></expr></incr>)<pos:position pos:line="133" pos:column="50"/></control> <block pos:line="133" pos:column="51">{
            <expr_stmt><expr><name pos:line="134" pos:column="13">out_length<pos:position pos:line="134" pos:column="23"/></name> <operator pos:line="134" pos:column="24">+=<pos:position pos:line="134" pos:column="26"/></operator> <operator pos:line="134" pos:column="27">(<pos:position pos:line="134" pos:column="28"/></operator><name pos:line="134" pos:column="28">ulg<pos:position pos:line="134" pos:column="31"/></name><operator pos:line="134" pos:column="31">)<pos:position pos:line="134" pos:column="32"/></operator><name><name pos:line="134" pos:column="32">s<pos:position pos:line="134" pos:column="33"/></name><operator pos:line="134" pos:column="33">-&gt;<pos:position pos:line="134" pos:column="38"/></operator><name pos:line="134" pos:column="35">dyn_dtree<pos:position pos:line="134" pos:column="44"/></name><index pos:line="134" pos:column="44">[<expr><name pos:line="134" pos:column="45">dcode<pos:position pos:line="134" pos:column="50"/></name></expr>]<pos:position pos:line="134" pos:column="51"/></index></name><operator pos:line="134" pos:column="51">.<pos:position pos:line="134" pos:column="52"/></operator><name pos:line="134" pos:column="52">Freq<pos:position pos:line="134" pos:column="56"/></name> <operator pos:line="134" pos:column="57">*<pos:position pos:line="134" pos:column="58"/></operator>
                <operator pos:line="135" pos:column="17">(<pos:position pos:line="135" pos:column="18"/></operator><literal type="number" pos:line="135" pos:column="18">5L<pos:position pos:line="135" pos:column="20"/></literal><operator pos:line="135" pos:column="20">+<pos:position pos:line="135" pos:column="21"/></operator><name><name pos:line="135" pos:column="21">extra_dbits<pos:position pos:line="135" pos:column="32"/></name><index pos:line="135" pos:column="32">[<expr><name pos:line="135" pos:column="33">dcode<pos:position pos:line="135" pos:column="38"/></name></expr>]<pos:position pos:line="135" pos:column="39"/></index></name><operator pos:line="135" pos:column="39">)<pos:position pos:line="135" pos:column="40"/></operator></expr>;<pos:position pos:line="135" pos:column="41"/></expr_stmt>
        }<pos:position pos:line="136" pos:column="10"/></block></for>
        <expr_stmt><expr><name pos:line="137" pos:column="9">out_length<pos:position pos:line="137" pos:column="19"/></name> <operator pos:line="137" pos:column="20">&gt;&gt;=<pos:position pos:line="137" pos:column="29"/></operator> <literal type="number" pos:line="137" pos:column="24">3<pos:position pos:line="137" pos:column="25"/></literal></expr>;<pos:position pos:line="137" pos:column="26"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="138" pos:column="9">Tracev<pos:position pos:line="138" pos:column="15"/></name><argument_list pos:line="138" pos:column="15">(<argument><expr><operator pos:line="138" pos:column="16">(<pos:position pos:line="138" pos:column="17"/></operator><name pos:line="138" pos:column="17">stderr<pos:position pos:line="138" pos:column="23"/></name><operator pos:line="138" pos:column="23">,<pos:position pos:line="138" pos:column="24"/></operator><literal type="string" pos:line="138" pos:column="24">"\nlast_lit %u, in %ld, out ~%ld(%ld%%) "<pos:position pos:line="138" pos:column="65"/></literal><operator pos:line="138" pos:column="65">,<pos:position pos:line="138" pos:column="66"/></operator>
               <name><name pos:line="139" pos:column="16">s<pos:position pos:line="139" pos:column="17"/></name><operator pos:line="139" pos:column="17">-&gt;<pos:position pos:line="139" pos:column="22"/></operator><name pos:line="139" pos:column="19">last_lit<pos:position pos:line="139" pos:column="27"/></name></name><operator pos:line="139" pos:column="27">,<pos:position pos:line="139" pos:column="28"/></operator> <name pos:line="139" pos:column="29">in_length<pos:position pos:line="139" pos:column="38"/></name><operator pos:line="139" pos:column="38">,<pos:position pos:line="139" pos:column="39"/></operator> <name pos:line="139" pos:column="40">out_length<pos:position pos:line="139" pos:column="50"/></name><operator pos:line="139" pos:column="50">,<pos:position pos:line="139" pos:column="51"/></operator>
               <literal type="number" pos:line="140" pos:column="16">100L<pos:position pos:line="140" pos:column="20"/></literal> <operator pos:line="140" pos:column="21">-<pos:position pos:line="140" pos:column="22"/></operator> <name pos:line="140" pos:column="23">out_length<pos:position pos:line="140" pos:column="33"/></name><operator pos:line="140" pos:column="33">*<pos:position pos:line="140" pos:column="34"/></operator><literal type="number" pos:line="140" pos:column="34">100L<pos:position pos:line="140" pos:column="38"/></literal><operator pos:line="140" pos:column="38">/<pos:position pos:line="140" pos:column="39"/></operator><name pos:line="140" pos:column="39">in_length<pos:position pos:line="140" pos:column="48"/></name><operator pos:line="140" pos:column="48">)<pos:position pos:line="140" pos:column="49"/></operator></expr></argument>)<pos:position pos:line="140" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="140" pos:column="51"/></expr_stmt>
        <if pos:line="141" pos:column="9">if <condition pos:line="141" pos:column="12">(<expr><name><name pos:line="141" pos:column="13">s<pos:position pos:line="141" pos:column="14"/></name><operator pos:line="141" pos:column="14">-&gt;<pos:position pos:line="141" pos:column="19"/></operator><name pos:line="141" pos:column="16">matches<pos:position pos:line="141" pos:column="23"/></name></name> <operator pos:line="141" pos:column="24">&lt;<pos:position pos:line="141" pos:column="28"/></operator> <name><name pos:line="141" pos:column="26">s<pos:position pos:line="141" pos:column="27"/></name><operator pos:line="141" pos:column="27">-&gt;<pos:position pos:line="141" pos:column="32"/></operator><name pos:line="141" pos:column="29">last_lit<pos:position pos:line="141" pos:column="37"/></name></name><operator pos:line="141" pos:column="37">/<pos:position pos:line="141" pos:column="38"/></operator><literal type="number" pos:line="141" pos:column="38">2<pos:position pos:line="141" pos:column="39"/></literal> <operator pos:line="141" pos:column="40">&amp;&amp;<pos:position pos:line="141" pos:column="50"/></operator> <name pos:line="141" pos:column="43">out_length<pos:position pos:line="141" pos:column="53"/></name> <operator pos:line="141" pos:column="54">&lt;<pos:position pos:line="141" pos:column="58"/></operator> <name pos:line="141" pos:column="56">in_length<pos:position pos:line="141" pos:column="65"/></name><operator pos:line="141" pos:column="65">/<pos:position pos:line="141" pos:column="66"/></operator><literal type="number" pos:line="141" pos:column="66">2<pos:position pos:line="141" pos:column="67"/></literal></expr>)<pos:position pos:line="141" pos:column="68"/></condition><then pos:line="141" pos:column="68"> <block type="pseudo"><return pos:line="141" pos:column="69">return <expr><literal type="number" pos:line="141" pos:column="76">1<pos:position pos:line="141" pos:column="77"/></literal></expr>;<pos:position pos:line="141" pos:column="78"/></return></block></then></if>
    }<pos:position pos:line="142" pos:column="6"/></block></then></if>
<cpp:endif pos:line="143" pos:column="1">#<cpp:directive pos:line="143" pos:column="2">endif<pos:position pos:line="143" pos:column="7"/></cpp:directive></cpp:endif>
    <return pos:line="144" pos:column="5">return <expr><operator pos:line="144" pos:column="12">(<pos:position pos:line="144" pos:column="13"/></operator><name><name pos:line="144" pos:column="13">s<pos:position pos:line="144" pos:column="14"/></name><operator pos:line="144" pos:column="14">-&gt;<pos:position pos:line="144" pos:column="19"/></operator><name pos:line="144" pos:column="16">last_lit<pos:position pos:line="144" pos:column="24"/></name></name> <operator pos:line="144" pos:column="25">==<pos:position pos:line="144" pos:column="27"/></operator> <name><name pos:line="144" pos:column="28">s<pos:position pos:line="144" pos:column="29"/></name><operator pos:line="144" pos:column="29">-&gt;<pos:position pos:line="144" pos:column="34"/></operator><name pos:line="144" pos:column="31">lit_bufsize<pos:position pos:line="144" pos:column="42"/></name></name><operator pos:line="144" pos:column="42">-<pos:position pos:line="144" pos:column="43"/></operator><literal type="number" pos:line="144" pos:column="43">1<pos:position pos:line="144" pos:column="44"/></literal><operator pos:line="144" pos:column="44">)<pos:position pos:line="144" pos:column="45"/></operator></expr>;<pos:position pos:line="144" pos:column="46"/></return>
    <comment type="block" pos:line="145" pos:column="5">/* We avoid equality with lit_bufsize because of wraparound at 64K
     * on 16 bit machines and because stored blocks are restricted to
     * 64K-1 bytes.
     */</comment>
}<pos:position pos:line="149" pos:column="2"/></block>

<comment type="block" pos:line="151" pos:column="1">/* ===========================================================================
 * Send the block data compressed using the given Huffman trees
 */</comment>
<decl_stmt><decl><type><name pos:line="154" pos:column="1">local<pos:position pos:line="154" pos:column="6"/></name> <name pos:line="154" pos:column="7">void<pos:position pos:line="154" pos:column="11"/></name></type> <name pos:line="154" pos:column="12">compress_block<pos:position pos:line="154" pos:column="26"/></name><argument_list pos:line="154" pos:column="26">(<argument><expr><name pos:line="154" pos:column="27">s<pos:position pos:line="154" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="154" pos:column="30">ltree<pos:position pos:line="154" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="154" pos:column="37">dtree<pos:position pos:line="154" pos:column="42"/></name></expr></argument>)<pos:position pos:line="154" pos:column="43"/></argument_list>
    <name pos:line="155" pos:column="5">deflate_state<pos:position pos:line="155" pos:column="18"/></name> <modifier pos:line="155" pos:column="19">*<pos:position pos:line="155" pos:column="20"/></modifier><name pos:line="155" pos:column="20">s<pos:position pos:line="155" pos:column="21"/></name></decl>;<pos:position pos:line="155" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="156" pos:column="5">const<pos:position pos:line="156" pos:column="10"/></specifier> <name pos:line="156" pos:column="11">ct_data<pos:position pos:line="156" pos:column="18"/></name> <modifier pos:line="156" pos:column="19">*<pos:position pos:line="156" pos:column="20"/></modifier></type><name pos:line="156" pos:column="20">ltree<pos:position pos:line="156" pos:column="25"/></name></decl>;<pos:position pos:line="156" pos:column="26"/></decl_stmt> <comment type="block" pos:line="156" pos:column="27">/* literal tree */</comment>
    <decl_stmt><decl><type><specifier pos:line="157" pos:column="5">const<pos:position pos:line="157" pos:column="10"/></specifier> <name pos:line="157" pos:column="11">ct_data<pos:position pos:line="157" pos:column="18"/></name> <modifier pos:line="157" pos:column="19">*<pos:position pos:line="157" pos:column="20"/></modifier></type><name pos:line="157" pos:column="20">dtree<pos:position pos:line="157" pos:column="25"/></name></decl>;<pos:position pos:line="157" pos:column="26"/></decl_stmt> <comment type="block" pos:line="157" pos:column="27">/* distance tree */</comment>
<block pos:line="158" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="159" pos:column="5">unsigned<pos:position pos:line="159" pos:column="13"/></name></type> <name pos:line="159" pos:column="14">dist<pos:position pos:line="159" pos:column="18"/></name></decl>;<pos:position pos:line="159" pos:column="19"/></decl_stmt>      <comment type="block" pos:line="159" pos:column="25">/* distance of matched string */</comment>
    <decl_stmt><decl><type><name pos:line="160" pos:column="5">int<pos:position pos:line="160" pos:column="8"/></name></type> <name pos:line="160" pos:column="9">lc<pos:position pos:line="160" pos:column="11"/></name></decl>;<pos:position pos:line="160" pos:column="12"/></decl_stmt>             <comment type="block" pos:line="160" pos:column="25">/* match length or unmatched char (if dist == 0) */</comment>
    <decl_stmt><decl><type><name pos:line="161" pos:column="5">unsigned<pos:position pos:line="161" pos:column="13"/></name></type> <name pos:line="161" pos:column="14">lx<pos:position pos:line="161" pos:column="16"/></name> <init pos:line="161" pos:column="17">= <expr><literal type="number" pos:line="161" pos:column="19">0<pos:position pos:line="161" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="161" pos:column="21"/></decl_stmt>    <comment type="block" pos:line="161" pos:column="25">/* running index in l_buf */</comment>
    <decl_stmt><decl><type><name pos:line="162" pos:column="5">unsigned<pos:position pos:line="162" pos:column="13"/></name></type> <name pos:line="162" pos:column="14">code<pos:position pos:line="162" pos:column="18"/></name></decl>;<pos:position pos:line="162" pos:column="19"/></decl_stmt>      <comment type="block" pos:line="162" pos:column="25">/* the code to send */</comment>
    <decl_stmt><decl><type><name pos:line="163" pos:column="5">int<pos:position pos:line="163" pos:column="8"/></name></type> <name pos:line="163" pos:column="9">extra<pos:position pos:line="163" pos:column="14"/></name></decl>;<pos:position pos:line="163" pos:column="15"/></decl_stmt>          <comment type="block" pos:line="163" pos:column="25">/* number of extra bits to send */</comment>

    <if pos:line="165" pos:column="5">if <condition pos:line="165" pos:column="8">(<expr><name><name pos:line="165" pos:column="9">s<pos:position pos:line="165" pos:column="10"/></name><operator pos:line="165" pos:column="10">-&gt;<pos:position pos:line="165" pos:column="15"/></operator><name pos:line="165" pos:column="12">last_lit<pos:position pos:line="165" pos:column="20"/></name></name> <operator pos:line="165" pos:column="21">!=<pos:position pos:line="165" pos:column="23"/></operator> <literal type="number" pos:line="165" pos:column="24">0<pos:position pos:line="165" pos:column="25"/></literal></expr>)<pos:position pos:line="165" pos:column="26"/></condition><then pos:line="165" pos:column="26"> <block type="pseudo"><do pos:line="165" pos:column="27">do <block pos:line="165" pos:column="30">{
        <expr_stmt><expr><name pos:line="166" pos:column="9">dist<pos:position pos:line="166" pos:column="13"/></name> <operator pos:line="166" pos:column="14">=<pos:position pos:line="166" pos:column="15"/></operator> <name><name pos:line="166" pos:column="16">s<pos:position pos:line="166" pos:column="17"/></name><operator pos:line="166" pos:column="17">-&gt;<pos:position pos:line="166" pos:column="22"/></operator><name pos:line="166" pos:column="19">d_buf<pos:position pos:line="166" pos:column="24"/></name><index pos:line="166" pos:column="24">[<expr><name pos:line="166" pos:column="25">lx<pos:position pos:line="166" pos:column="27"/></name></expr>]<pos:position pos:line="166" pos:column="28"/></index></name></expr>;<pos:position pos:line="166" pos:column="29"/></expr_stmt>
        <expr_stmt><expr><name pos:line="167" pos:column="9">lc<pos:position pos:line="167" pos:column="11"/></name> <operator pos:line="167" pos:column="12">=<pos:position pos:line="167" pos:column="13"/></operator> <name><name pos:line="167" pos:column="14">s<pos:position pos:line="167" pos:column="15"/></name><operator pos:line="167" pos:column="15">-&gt;<pos:position pos:line="167" pos:column="20"/></operator><name pos:line="167" pos:column="17">l_buf<pos:position pos:line="167" pos:column="22"/></name><index pos:line="167" pos:column="22">[<expr><name pos:line="167" pos:column="23">lx<pos:position pos:line="167" pos:column="25"/></name><operator pos:line="167" pos:column="25">++<pos:position pos:line="167" pos:column="27"/></operator></expr>]<pos:position pos:line="167" pos:column="28"/></index></name></expr>;<pos:position pos:line="167" pos:column="29"/></expr_stmt>
        <if pos:line="168" pos:column="9">if <condition pos:line="168" pos:column="12">(<expr><name pos:line="168" pos:column="13">dist<pos:position pos:line="168" pos:column="17"/></name> <operator pos:line="168" pos:column="18">==<pos:position pos:line="168" pos:column="20"/></operator> <literal type="number" pos:line="168" pos:column="21">0<pos:position pos:line="168" pos:column="22"/></literal></expr>)<pos:position pos:line="168" pos:column="23"/></condition><then pos:line="168" pos:column="23"> <block pos:line="168" pos:column="24">{
            <expr_stmt><expr><call><name pos:line="169" pos:column="13">send_code<pos:position pos:line="169" pos:column="22"/></name><argument_list pos:line="169" pos:column="22">(<argument><expr><name pos:line="169" pos:column="23">s<pos:position pos:line="169" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="169" pos:column="26">lc<pos:position pos:line="169" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="169" pos:column="30">ltree<pos:position pos:line="169" pos:column="35"/></name></expr></argument>)<pos:position pos:line="169" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="169" pos:column="37"/></expr_stmt> <comment type="block" pos:line="169" pos:column="38">/* send a literal byte */</comment>
            <expr_stmt><expr><call><name pos:line="170" pos:column="13">Tracecv<pos:position pos:line="170" pos:column="20"/></name><argument_list pos:line="170" pos:column="20">(<argument><expr><call><name pos:line="170" pos:column="21">isgraph<pos:position pos:line="170" pos:column="28"/></name><argument_list pos:line="170" pos:column="28">(<argument><expr><name pos:line="170" pos:column="29">lc<pos:position pos:line="170" pos:column="31"/></name></expr></argument>)<pos:position pos:line="170" pos:column="32"/></argument_list></call></expr></argument>, <argument><expr><operator pos:line="170" pos:column="34">(<pos:position pos:line="170" pos:column="35"/></operator><name pos:line="170" pos:column="35">stderr<pos:position pos:line="170" pos:column="41"/></name><operator pos:line="170" pos:column="41">,<pos:position pos:line="170" pos:column="42"/></operator><literal type="string" pos:line="170" pos:column="42">" '%c' "<pos:position pos:line="170" pos:column="50"/></literal><operator pos:line="170" pos:column="50">,<pos:position pos:line="170" pos:column="51"/></operator> <name pos:line="170" pos:column="52">lc<pos:position pos:line="170" pos:column="54"/></name><operator pos:line="170" pos:column="54">)<pos:position pos:line="170" pos:column="55"/></operator></expr></argument>)<pos:position pos:line="170" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="170" pos:column="57"/></expr_stmt>
        }<pos:position pos:line="171" pos:column="10"/></block></then> <else pos:line="171" pos:column="11">else <block pos:line="171" pos:column="16">{
            <comment type="block" pos:line="172" pos:column="13">/* Here, lc is the match length - MIN_MATCH */</comment>
            <expr_stmt><expr><name pos:line="173" pos:column="13">code<pos:position pos:line="173" pos:column="17"/></name> <operator pos:line="173" pos:column="18">=<pos:position pos:line="173" pos:column="19"/></operator> <name><name pos:line="173" pos:column="20">_length_code<pos:position pos:line="173" pos:column="32"/></name><index pos:line="173" pos:column="32">[<expr><name pos:line="173" pos:column="33">lc<pos:position pos:line="173" pos:column="35"/></name></expr>]<pos:position pos:line="173" pos:column="36"/></index></name></expr>;<pos:position pos:line="173" pos:column="37"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="174" pos:column="13">send_code<pos:position pos:line="174" pos:column="22"/></name><argument_list pos:line="174" pos:column="22">(<argument><expr><name pos:line="174" pos:column="23">s<pos:position pos:line="174" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="174" pos:column="26">code<pos:position pos:line="174" pos:column="30"/></name><operator pos:line="174" pos:column="30">+<pos:position pos:line="174" pos:column="31"/></operator><name pos:line="174" pos:column="31">LITERALS<pos:position pos:line="174" pos:column="39"/></name><operator pos:line="174" pos:column="39">+<pos:position pos:line="174" pos:column="40"/></operator><literal type="number" pos:line="174" pos:column="40">1<pos:position pos:line="174" pos:column="41"/></literal></expr></argument>, <argument><expr><name pos:line="174" pos:column="43">ltree<pos:position pos:line="174" pos:column="48"/></name></expr></argument>)<pos:position pos:line="174" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="174" pos:column="50"/></expr_stmt> <comment type="block" pos:line="174" pos:column="51">/* send the length code */</comment>
            <expr_stmt><expr><name pos:line="175" pos:column="13">extra<pos:position pos:line="175" pos:column="18"/></name> <operator pos:line="175" pos:column="19">=<pos:position pos:line="175" pos:column="20"/></operator> <name><name pos:line="175" pos:column="21">extra_lbits<pos:position pos:line="175" pos:column="32"/></name><index pos:line="175" pos:column="32">[<expr><name pos:line="175" pos:column="33">code<pos:position pos:line="175" pos:column="37"/></name></expr>]<pos:position pos:line="175" pos:column="38"/></index></name></expr>;<pos:position pos:line="175" pos:column="39"/></expr_stmt>
            <if pos:line="176" pos:column="13">if <condition pos:line="176" pos:column="16">(<expr><name pos:line="176" pos:column="17">extra<pos:position pos:line="176" pos:column="22"/></name> <operator pos:line="176" pos:column="23">!=<pos:position pos:line="176" pos:column="25"/></operator> <literal type="number" pos:line="176" pos:column="26">0<pos:position pos:line="176" pos:column="27"/></literal></expr>)<pos:position pos:line="176" pos:column="28"/></condition><then pos:line="176" pos:column="28"> <block pos:line="176" pos:column="29">{
                <expr_stmt><expr><name pos:line="177" pos:column="17">lc<pos:position pos:line="177" pos:column="19"/></name> <operator pos:line="177" pos:column="20">-=<pos:position pos:line="177" pos:column="22"/></operator> <name><name pos:line="177" pos:column="23">base_length<pos:position pos:line="177" pos:column="34"/></name><index pos:line="177" pos:column="34">[<expr><name pos:line="177" pos:column="35">code<pos:position pos:line="177" pos:column="39"/></name></expr>]<pos:position pos:line="177" pos:column="40"/></index></name></expr>;<pos:position pos:line="177" pos:column="41"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="178" pos:column="17">send_bits<pos:position pos:line="178" pos:column="26"/></name><argument_list pos:line="178" pos:column="26">(<argument><expr><name pos:line="178" pos:column="27">s<pos:position pos:line="178" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="178" pos:column="30">lc<pos:position pos:line="178" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="178" pos:column="34">extra<pos:position pos:line="178" pos:column="39"/></name></expr></argument>)<pos:position pos:line="178" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="178" pos:column="41"/></expr_stmt>       <comment type="block" pos:line="178" pos:column="48">/* send the extra length bits */</comment>
            }<pos:position pos:line="179" pos:column="14"/></block></then></if>
            <expr_stmt><expr><name pos:line="180" pos:column="13">dist<pos:position pos:line="180" pos:column="17"/></name><operator pos:line="180" pos:column="17">--<pos:position pos:line="180" pos:column="19"/></operator></expr>;<pos:position pos:line="180" pos:column="20"/></expr_stmt> <comment type="block" pos:line="180" pos:column="21">/* dist is now the match distance - 1 */</comment>
            <expr_stmt><expr><name pos:line="181" pos:column="13">code<pos:position pos:line="181" pos:column="17"/></name> <operator pos:line="181" pos:column="18">=<pos:position pos:line="181" pos:column="19"/></operator> <call><name pos:line="181" pos:column="20">d_code<pos:position pos:line="181" pos:column="26"/></name><argument_list pos:line="181" pos:column="26">(<argument><expr><name pos:line="181" pos:column="27">dist<pos:position pos:line="181" pos:column="31"/></name></expr></argument>)<pos:position pos:line="181" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="181" pos:column="33"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="182" pos:column="13">Assert<pos:position pos:line="182" pos:column="19"/></name> <argument_list pos:line="182" pos:column="20">(<argument><expr><name pos:line="182" pos:column="21">code<pos:position pos:line="182" pos:column="25"/></name> <operator pos:line="182" pos:column="26">&lt;<pos:position pos:line="182" pos:column="30"/></operator> <name pos:line="182" pos:column="28">D_CODES<pos:position pos:line="182" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="182" pos:column="37">"bad d_code"<pos:position pos:line="182" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="182" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="182" pos:column="51"/></expr_stmt>

            <expr_stmt><expr><call><name pos:line="184" pos:column="13">send_code<pos:position pos:line="184" pos:column="22"/></name><argument_list pos:line="184" pos:column="22">(<argument><expr><name pos:line="184" pos:column="23">s<pos:position pos:line="184" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="184" pos:column="26">code<pos:position pos:line="184" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="184" pos:column="32">dtree<pos:position pos:line="184" pos:column="37"/></name></expr></argument>)<pos:position pos:line="184" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="184" pos:column="39"/></expr_stmt>       <comment type="block" pos:line="184" pos:column="46">/* send the distance code */</comment>
            <expr_stmt><expr><name pos:line="185" pos:column="13">extra<pos:position pos:line="185" pos:column="18"/></name> <operator pos:line="185" pos:column="19">=<pos:position pos:line="185" pos:column="20"/></operator> <name><name pos:line="185" pos:column="21">extra_dbits<pos:position pos:line="185" pos:column="32"/></name><index pos:line="185" pos:column="32">[<expr><name pos:line="185" pos:column="33">code<pos:position pos:line="185" pos:column="37"/></name></expr>]<pos:position pos:line="185" pos:column="38"/></index></name></expr>;<pos:position pos:line="185" pos:column="39"/></expr_stmt>
            <if pos:line="186" pos:column="13">if <condition pos:line="186" pos:column="16">(<expr><name pos:line="186" pos:column="17">extra<pos:position pos:line="186" pos:column="22"/></name> <operator pos:line="186" pos:column="23">!=<pos:position pos:line="186" pos:column="25"/></operator> <literal type="number" pos:line="186" pos:column="26">0<pos:position pos:line="186" pos:column="27"/></literal></expr>)<pos:position pos:line="186" pos:column="28"/></condition><then pos:line="186" pos:column="28"> <block pos:line="186" pos:column="29">{
                <expr_stmt><expr><name pos:line="187" pos:column="17">dist<pos:position pos:line="187" pos:column="21"/></name> <operator pos:line="187" pos:column="22">-=<pos:position pos:line="187" pos:column="24"/></operator> <name><name pos:line="187" pos:column="25">base_dist<pos:position pos:line="187" pos:column="34"/></name><index pos:line="187" pos:column="34">[<expr><name pos:line="187" pos:column="35">code<pos:position pos:line="187" pos:column="39"/></name></expr>]<pos:position pos:line="187" pos:column="40"/></index></name></expr>;<pos:position pos:line="187" pos:column="41"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="188" pos:column="17">send_bits<pos:position pos:line="188" pos:column="26"/></name><argument_list pos:line="188" pos:column="26">(<argument><expr><name pos:line="188" pos:column="27">s<pos:position pos:line="188" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="188" pos:column="30">dist<pos:position pos:line="188" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="188" pos:column="36">extra<pos:position pos:line="188" pos:column="41"/></name></expr></argument>)<pos:position pos:line="188" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="188" pos:column="43"/></expr_stmt>   <comment type="block" pos:line="188" pos:column="46">/* send the extra distance bits */</comment>
            }<pos:position pos:line="189" pos:column="14"/></block></then></if>
        }<pos:position pos:line="190" pos:column="10"/></block></else></if> <comment type="block" pos:line="190" pos:column="11">/* literal or match pair ? */</comment>

        <comment type="block" pos:line="192" pos:column="9">/* Check that the overlay between pending_buf and d_buf+l_buf is ok: */</comment>
        <expr_stmt><expr><call><name pos:line="193" pos:column="9">Assert<pos:position pos:line="193" pos:column="15"/></name><argument_list pos:line="193" pos:column="15">(<argument><expr><call pos:line="193" pos:column="16">(<name pos:line="193" pos:column="17">uInt<pos:position pos:line="193" pos:column="21"/></name>)<argument_list pos:line="193" pos:column="22">(<argument><expr><name><name pos:line="193" pos:column="23">s<pos:position pos:line="193" pos:column="24"/></name><operator pos:line="193" pos:column="24">-&gt;<pos:position pos:line="193" pos:column="29"/></operator><name pos:line="193" pos:column="26">pending<pos:position pos:line="193" pos:column="33"/></name></name></expr></argument>)<pos:position pos:line="193" pos:column="34"/></argument_list></call> <operator pos:line="193" pos:column="35">&lt;<pos:position pos:line="193" pos:column="39"/></operator> <name><name pos:line="193" pos:column="37">s<pos:position pos:line="193" pos:column="38"/></name><operator pos:line="193" pos:column="38">-&gt;<pos:position pos:line="193" pos:column="43"/></operator><name pos:line="193" pos:column="40">lit_bufsize<pos:position pos:line="193" pos:column="51"/></name></name> <operator pos:line="193" pos:column="52">+<pos:position pos:line="193" pos:column="53"/></operator> <literal type="number" pos:line="193" pos:column="54">2<pos:position pos:line="193" pos:column="55"/></literal><operator pos:line="193" pos:column="55">*<pos:position pos:line="193" pos:column="56"/></operator><name pos:line="193" pos:column="56">lx<pos:position pos:line="193" pos:column="58"/></name></expr></argument>,
               <argument><expr><literal type="string" pos:line="194" pos:column="16">"pendingBuf overflow"<pos:position pos:line="194" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="194" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="194" pos:column="39"/></expr_stmt>

    }<pos:position pos:line="196" pos:column="6"/></block> while <condition pos:line="196" pos:column="13">(<expr><name pos:line="196" pos:column="14">lx<pos:position pos:line="196" pos:column="16"/></name> <operator pos:line="196" pos:column="17">&lt;<pos:position pos:line="196" pos:column="21"/></operator> <name><name pos:line="196" pos:column="19">s<pos:position pos:line="196" pos:column="20"/></name><operator pos:line="196" pos:column="20">-&gt;<pos:position pos:line="196" pos:column="25"/></operator><name pos:line="196" pos:column="22">last_lit<pos:position pos:line="196" pos:column="30"/></name></name></expr>)<pos:position pos:line="196" pos:column="31"/></condition>;<pos:position pos:line="196" pos:column="32"/></do></block></then></if>

    <expr_stmt><expr><call><name pos:line="198" pos:column="5">send_code<pos:position pos:line="198" pos:column="14"/></name><argument_list pos:line="198" pos:column="14">(<argument><expr><name pos:line="198" pos:column="15">s<pos:position pos:line="198" pos:column="16"/></name></expr></argument>, <argument><expr><name pos:line="198" pos:column="18">END_BLOCK<pos:position pos:line="198" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="198" pos:column="29">ltree<pos:position pos:line="198" pos:column="34"/></name></expr></argument>)<pos:position pos:line="198" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="198" pos:column="36"/></expr_stmt>
}<pos:position pos:line="199" pos:column="2"/></block>

<comment type="block" pos:line="201" pos:column="1">/* ===========================================================================
 * Check if the data type is TEXT or BINARY, using the following algorithm:
 * - TEXT if the two conditions below are satisfied:
 *    a) There are no non-portable control characters belonging to the
 *       "black list" (0..6, 14..25, 28..31).
 *    b) There is at least one printable character belonging to the
 *       "white list" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).
 * - BINARY otherwise.
 * - The following partially-portable control characters form a
 *   "gray list" that is ignored in this detection algorithm:
 *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).
 * IN assertion: the fields Freq of dyn_ltree are set.
 */</comment>
<decl_stmt><decl><type><name pos:line="214" pos:column="1">local<pos:position pos:line="214" pos:column="6"/></name> <name pos:line="214" pos:column="7">int<pos:position pos:line="214" pos:column="10"/></name></type> <name pos:line="214" pos:column="11">detect_data_type<pos:position pos:line="214" pos:column="27"/></name><argument_list pos:line="214" pos:column="27">(<argument><expr><name pos:line="214" pos:column="28">s<pos:position pos:line="214" pos:column="29"/></name></expr></argument>)<pos:position pos:line="214" pos:column="30"/></argument_list>
    <name pos:line="215" pos:column="5">deflate_state<pos:position pos:line="215" pos:column="18"/></name> <modifier pos:line="215" pos:column="19">*<pos:position pos:line="215" pos:column="20"/></modifier><name pos:line="215" pos:column="20">s<pos:position pos:line="215" pos:column="21"/></name></decl>;<pos:position pos:line="215" pos:column="22"/></decl_stmt>
<block pos:line="216" pos:column="1">{
    <comment type="block" pos:line="217" pos:column="5">/* black_mask is the bit mask of black-listed bytes
     * set bits 0..6, 14..25, and 28..31
     * 0xf3ffc07f = binary 11110011111111111100000001111111
     */</comment>
    <decl_stmt><decl><type><name pos:line="221" pos:column="5">unsigned<pos:position pos:line="221" pos:column="13"/></name> <name pos:line="221" pos:column="14">long<pos:position pos:line="221" pos:column="18"/></name></type> <name pos:line="221" pos:column="19">black_mask<pos:position pos:line="221" pos:column="29"/></name> <init pos:line="221" pos:column="30">= <expr><literal type="number" pos:line="221" pos:column="32">0xf3ffc07fUL<pos:position pos:line="221" pos:column="44"/></literal></expr></init></decl>;<pos:position pos:line="221" pos:column="45"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="222" pos:column="5">int<pos:position pos:line="222" pos:column="8"/></name></type> <name pos:line="222" pos:column="9">n<pos:position pos:line="222" pos:column="10"/></name></decl>;<pos:position pos:line="222" pos:column="11"/></decl_stmt>

    <comment type="block" pos:line="224" pos:column="5">/* Check for non-textual ("black-listed") bytes. */</comment>
    <for pos:line="225" pos:column="5">for <control pos:line="225" pos:column="9">(<init><expr><name pos:line="225" pos:column="10">n<pos:position pos:line="225" pos:column="11"/></name> <operator pos:line="225" pos:column="12">=<pos:position pos:line="225" pos:column="13"/></operator> <literal type="number" pos:line="225" pos:column="14">0<pos:position pos:line="225" pos:column="15"/></literal></expr>;<pos:position pos:line="225" pos:column="16"/></init> <condition><expr><name pos:line="225" pos:column="17">n<pos:position pos:line="225" pos:column="18"/></name> <operator pos:line="225" pos:column="19">&lt;=<pos:position pos:line="225" pos:column="24"/></operator> <literal type="number" pos:line="225" pos:column="22">31<pos:position pos:line="225" pos:column="24"/></literal></expr>;<pos:position pos:line="225" pos:column="25"/></condition> <incr><expr><name pos:line="225" pos:column="26">n<pos:position pos:line="225" pos:column="27"/></name><operator pos:line="225" pos:column="27">++<pos:position pos:line="225" pos:column="29"/></operator></expr><operator pos:line="225" pos:column="29">,<pos:position pos:line="225" pos:column="30"/></operator> <expr><name pos:line="225" pos:column="31">black_mask<pos:position pos:line="225" pos:column="41"/></name> <operator pos:line="225" pos:column="42">&gt;&gt;=<pos:position pos:line="225" pos:column="51"/></operator> <literal type="number" pos:line="225" pos:column="46">1<pos:position pos:line="225" pos:column="47"/></literal></expr></incr>)<pos:position pos:line="225" pos:column="48"/></control>
        <block type="pseudo"><if pos:line="226" pos:column="9">if <condition pos:line="226" pos:column="12">(<expr><operator pos:line="226" pos:column="13">(<pos:position pos:line="226" pos:column="14"/></operator><name pos:line="226" pos:column="14">black_mask<pos:position pos:line="226" pos:column="24"/></name> <operator pos:line="226" pos:column="25">&amp;<pos:position pos:line="226" pos:column="30"/></operator> <literal type="number" pos:line="226" pos:column="27">1<pos:position pos:line="226" pos:column="28"/></literal><operator pos:line="226" pos:column="28">)<pos:position pos:line="226" pos:column="29"/></operator> <operator pos:line="226" pos:column="30">&amp;&amp;<pos:position pos:line="226" pos:column="40"/></operator> <operator pos:line="226" pos:column="33">(<pos:position pos:line="226" pos:column="34"/></operator><name><name pos:line="226" pos:column="34">s<pos:position pos:line="226" pos:column="35"/></name><operator pos:line="226" pos:column="35">-&gt;<pos:position pos:line="226" pos:column="40"/></operator><name pos:line="226" pos:column="37">dyn_ltree<pos:position pos:line="226" pos:column="46"/></name><index pos:line="226" pos:column="46">[<expr><name pos:line="226" pos:column="47">n<pos:position pos:line="226" pos:column="48"/></name></expr>]<pos:position pos:line="226" pos:column="49"/></index></name><operator pos:line="226" pos:column="49">.<pos:position pos:line="226" pos:column="50"/></operator><name pos:line="226" pos:column="50">Freq<pos:position pos:line="226" pos:column="54"/></name> <operator pos:line="226" pos:column="55">!=<pos:position pos:line="226" pos:column="57"/></operator> <literal type="number" pos:line="226" pos:column="58">0<pos:position pos:line="226" pos:column="59"/></literal><operator pos:line="226" pos:column="59">)<pos:position pos:line="226" pos:column="60"/></operator></expr>)<pos:position pos:line="226" pos:column="61"/></condition><then pos:line="226" pos:column="61">
            <block type="pseudo"><return pos:line="227" pos:column="13">return <expr><name pos:line="227" pos:column="20">Z_BINARY<pos:position pos:line="227" pos:column="28"/></name></expr>;<pos:position pos:line="227" pos:column="29"/></return></block></then></if></block></for>

    <comment type="block" pos:line="229" pos:column="5">/* Check for textual ("white-listed") bytes. */</comment>
    <if pos:line="230" pos:column="5">if <condition pos:line="230" pos:column="8">(<expr><name><name pos:line="230" pos:column="9">s<pos:position pos:line="230" pos:column="10"/></name><operator pos:line="230" pos:column="10">-&gt;<pos:position pos:line="230" pos:column="15"/></operator><name pos:line="230" pos:column="12">dyn_ltree<pos:position pos:line="230" pos:column="21"/></name><index pos:line="230" pos:column="21">[<expr><literal type="number" pos:line="230" pos:column="22">9<pos:position pos:line="230" pos:column="23"/></literal></expr>]<pos:position pos:line="230" pos:column="24"/></index></name><operator pos:line="230" pos:column="24">.<pos:position pos:line="230" pos:column="25"/></operator><name pos:line="230" pos:column="25">Freq<pos:position pos:line="230" pos:column="29"/></name> <operator pos:line="230" pos:column="30">!=<pos:position pos:line="230" pos:column="32"/></operator> <literal type="number" pos:line="230" pos:column="33">0<pos:position pos:line="230" pos:column="34"/></literal> <operator pos:line="230" pos:column="35">||<pos:position pos:line="230" pos:column="37"/></operator> <name><name pos:line="230" pos:column="38">s<pos:position pos:line="230" pos:column="39"/></name><operator pos:line="230" pos:column="39">-&gt;<pos:position pos:line="230" pos:column="44"/></operator><name pos:line="230" pos:column="41">dyn_ltree<pos:position pos:line="230" pos:column="50"/></name><index pos:line="230" pos:column="50">[<expr><literal type="number" pos:line="230" pos:column="51">10<pos:position pos:line="230" pos:column="53"/></literal></expr>]<pos:position pos:line="230" pos:column="54"/></index></name><operator pos:line="230" pos:column="54">.<pos:position pos:line="230" pos:column="55"/></operator><name pos:line="230" pos:column="55">Freq<pos:position pos:line="230" pos:column="59"/></name> <operator pos:line="230" pos:column="60">!=<pos:position pos:line="230" pos:column="62"/></operator> <literal type="number" pos:line="230" pos:column="63">0<pos:position pos:line="230" pos:column="64"/></literal>
            <operator pos:line="231" pos:column="13">||<pos:position pos:line="231" pos:column="15"/></operator> <name><name pos:line="231" pos:column="16">s<pos:position pos:line="231" pos:column="17"/></name><operator pos:line="231" pos:column="17">-&gt;<pos:position pos:line="231" pos:column="22"/></operator><name pos:line="231" pos:column="19">dyn_ltree<pos:position pos:line="231" pos:column="28"/></name><index pos:line="231" pos:column="28">[<expr><literal type="number" pos:line="231" pos:column="29">13<pos:position pos:line="231" pos:column="31"/></literal></expr>]<pos:position pos:line="231" pos:column="32"/></index></name><operator pos:line="231" pos:column="32">.<pos:position pos:line="231" pos:column="33"/></operator><name pos:line="231" pos:column="33">Freq<pos:position pos:line="231" pos:column="37"/></name> <operator pos:line="231" pos:column="38">!=<pos:position pos:line="231" pos:column="40"/></operator> <literal type="number" pos:line="231" pos:column="41">0<pos:position pos:line="231" pos:column="42"/></literal></expr>)<pos:position pos:line="231" pos:column="43"/></condition><then pos:line="231" pos:column="43">
        <block type="pseudo"><return pos:line="232" pos:column="9">return <expr><name pos:line="232" pos:column="16">Z_TEXT<pos:position pos:line="232" pos:column="22"/></name></expr>;<pos:position pos:line="232" pos:column="23"/></return></block></then></if>
    <for pos:line="233" pos:column="5">for <control pos:line="233" pos:column="9">(<init><expr><name pos:line="233" pos:column="10">n<pos:position pos:line="233" pos:column="11"/></name> <operator pos:line="233" pos:column="12">=<pos:position pos:line="233" pos:column="13"/></operator> <literal type="number" pos:line="233" pos:column="14">32<pos:position pos:line="233" pos:column="16"/></literal></expr>;<pos:position pos:line="233" pos:column="17"/></init> <condition><expr><name pos:line="233" pos:column="18">n<pos:position pos:line="233" pos:column="19"/></name> <operator pos:line="233" pos:column="20">&lt;<pos:position pos:line="233" pos:column="24"/></operator> <name pos:line="233" pos:column="22">LITERALS<pos:position pos:line="233" pos:column="30"/></name></expr>;<pos:position pos:line="233" pos:column="31"/></condition> <incr><expr><name pos:line="233" pos:column="32">n<pos:position pos:line="233" pos:column="33"/></name><operator pos:line="233" pos:column="33">++<pos:position pos:line="233" pos:column="35"/></operator></expr></incr>)<pos:position pos:line="233" pos:column="36"/></control>
        <block type="pseudo"><if pos:line="234" pos:column="9">if <condition pos:line="234" pos:column="12">(<expr><name><name pos:line="234" pos:column="13">s<pos:position pos:line="234" pos:column="14"/></name><operator pos:line="234" pos:column="14">-&gt;<pos:position pos:line="234" pos:column="19"/></operator><name pos:line="234" pos:column="16">dyn_ltree<pos:position pos:line="234" pos:column="25"/></name><index pos:line="234" pos:column="25">[<expr><name pos:line="234" pos:column="26">n<pos:position pos:line="234" pos:column="27"/></name></expr>]<pos:position pos:line="234" pos:column="28"/></index></name><operator pos:line="234" pos:column="28">.<pos:position pos:line="234" pos:column="29"/></operator><name pos:line="234" pos:column="29">Freq<pos:position pos:line="234" pos:column="33"/></name> <operator pos:line="234" pos:column="34">!=<pos:position pos:line="234" pos:column="36"/></operator> <literal type="number" pos:line="234" pos:column="37">0<pos:position pos:line="234" pos:column="38"/></literal></expr>)<pos:position pos:line="234" pos:column="39"/></condition><then pos:line="234" pos:column="39">
            <block type="pseudo"><return pos:line="235" pos:column="13">return <expr><name pos:line="235" pos:column="20">Z_TEXT<pos:position pos:line="235" pos:column="26"/></name></expr>;<pos:position pos:line="235" pos:column="27"/></return></block></then></if></block></for>

    <comment type="block" pos:line="237" pos:column="5">/* There are no "black-listed" or "white-listed" bytes:
     * this stream either is empty or has tolerated ("gray-listed") bytes only.
     */</comment>
    <return pos:line="240" pos:column="5">return <expr><name pos:line="240" pos:column="12">Z_BINARY<pos:position pos:line="240" pos:column="20"/></name></expr>;<pos:position pos:line="240" pos:column="21"/></return>
}<pos:position pos:line="241" pos:column="2"/></block>

<comment type="block" pos:line="243" pos:column="1">/* ===========================================================================
 * Reverse the first len bits of a code, using straightforward code (a faster
 * method would use a table)
 * IN assertion: 1 &lt;= len &lt;= 15
 */</comment>
<function_decl><type><name pos:line="248" pos:column="1">local<pos:position pos:line="248" pos:column="6"/></name> <name pos:line="248" pos:column="7">unsigned<pos:position pos:line="248" pos:column="15"/></name></type> <name pos:line="248" pos:column="16">bi_reverse<pos:position pos:line="248" pos:column="26"/></name><parameter_list pos:line="248" pos:column="26">(<parameter><decl><type><name pos:line="248" pos:column="27">code<pos:position pos:line="248" pos:column="31"/></name></type></decl></parameter>, <parameter><decl><type><name pos:line="248" pos:column="33">len<pos:position pos:line="248" pos:column="36"/></name></type></decl></parameter>)<pos:position pos:line="248" pos:column="37"/></parameter_list>
    <decl_stmt><decl><type><name pos:line="249" pos:column="5">unsigned<pos:position pos:line="249" pos:column="13"/></name></type> <name pos:line="249" pos:column="14">code<pos:position pos:line="249" pos:column="18"/></name></decl>;<pos:position pos:line="249" pos:column="19"/></decl_stmt> <comment type="block" pos:line="249" pos:column="20">/* the value to invert */</comment>
    <decl_stmt><decl><type><name pos:line="250" pos:column="5">int<pos:position pos:line="250" pos:column="8"/></name></type> <name pos:line="250" pos:column="9">len<pos:position pos:line="250" pos:column="12"/></name></decl>;<pos:position pos:line="250" pos:column="13"/></decl_stmt>       <comment type="block" pos:line="250" pos:column="20">/* its bit length */</comment>
<block pos:line="251" pos:column="1">{
    <decl_stmt><decl><type><specifier pos:line="252" pos:column="5">register<pos:position pos:line="252" pos:column="13"/></specifier> <name pos:line="252" pos:column="14">unsigned<pos:position pos:line="252" pos:column="22"/></name></type> <name pos:line="252" pos:column="23">res<pos:position pos:line="252" pos:column="26"/></name> <init pos:line="252" pos:column="27">= <expr><literal type="number" pos:line="252" pos:column="29">0<pos:position pos:line="252" pos:column="30"/></literal></expr></init></decl>;<pos:position pos:line="252" pos:column="31"/></decl_stmt>
    <do pos:line="253" pos:column="5">do <block pos:line="253" pos:column="8">{
        <expr_stmt><expr><name pos:line="254" pos:column="9">res<pos:position pos:line="254" pos:column="12"/></name> <operator pos:line="254" pos:column="13">|=<pos:position pos:line="254" pos:column="15"/></operator> <name pos:line="254" pos:column="16">code<pos:position pos:line="254" pos:column="20"/></name> <operator pos:line="254" pos:column="21">&amp;<pos:position pos:line="254" pos:column="26"/></operator> <literal type="number" pos:line="254" pos:column="23">1<pos:position pos:line="254" pos:column="24"/></literal></expr>;<pos:position pos:line="254" pos:column="25"/></expr_stmt>
        <expr_stmt><expr><name pos:line="255" pos:column="9">code<pos:position pos:line="255" pos:column="13"/></name> <operator pos:line="255" pos:column="14">&gt;&gt;=<pos:position pos:line="255" pos:column="23"/></operator> <literal type="number" pos:line="255" pos:column="18">1<pos:position pos:line="255" pos:column="19"/></literal></expr><operator pos:line="255" pos:column="19">,<pos:position pos:line="255" pos:column="20"/></operator> <expr><name pos:line="255" pos:column="21">res<pos:position pos:line="255" pos:column="24"/></name> <operator pos:line="255" pos:column="25">&lt;&lt;=<pos:position pos:line="255" pos:column="34"/></operator> <literal type="number" pos:line="255" pos:column="29">1<pos:position pos:line="255" pos:column="30"/></literal></expr>;<pos:position pos:line="255" pos:column="31"/></expr_stmt>
    }<pos:position pos:line="256" pos:column="6"/></block> while <condition pos:line="256" pos:column="13">(<expr><operator pos:line="256" pos:column="14">--<pos:position pos:line="256" pos:column="16"/></operator><name pos:line="256" pos:column="16">len<pos:position pos:line="256" pos:column="19"/></name> <operator pos:line="256" pos:column="20">&gt;<pos:position pos:line="256" pos:column="24"/></operator> <literal type="number" pos:line="256" pos:column="22">0<pos:position pos:line="256" pos:column="23"/></literal></expr>)<pos:position pos:line="256" pos:column="24"/></condition>;<pos:position pos:line="256" pos:column="25"/></do>
    <return pos:line="257" pos:column="5">return <expr><name pos:line="257" pos:column="12">res<pos:position pos:line="257" pos:column="15"/></name> <operator pos:line="257" pos:column="16">&gt;&gt;<pos:position pos:line="257" pos:column="21"/></operator> <literal type="number" pos:line="257" pos:column="19">1<pos:position pos:line="257" pos:column="20"/></literal></expr>;<pos:position pos:line="257" pos:column="21"/></return>
}<pos:position pos:line="258" pos:column="2"/></block></function_decl>

<comment type="block" pos:line="260" pos:column="1">/* ===========================================================================
 * Flush the bit buffer, keeping at most 7 bits in it.
 */</comment>
<decl_stmt><decl><type><name pos:line="263" pos:column="1">local<pos:position pos:line="263" pos:column="6"/></name> <name pos:line="263" pos:column="7">void<pos:position pos:line="263" pos:column="11"/></name></type> <name pos:line="263" pos:column="12">bi_flush<pos:position pos:line="263" pos:column="20"/></name><argument_list pos:line="263" pos:column="20">(<argument><expr><name pos:line="263" pos:column="21">s<pos:position pos:line="263" pos:column="22"/></name></expr></argument>)<pos:position pos:line="263" pos:column="23"/></argument_list>
    <name pos:line="264" pos:column="5">deflate_state<pos:position pos:line="264" pos:column="18"/></name> <modifier pos:line="264" pos:column="19">*<pos:position pos:line="264" pos:column="20"/></modifier><name pos:line="264" pos:column="20">s<pos:position pos:line="264" pos:column="21"/></name></decl>;<pos:position pos:line="264" pos:column="22"/></decl_stmt>
<block pos:line="265" pos:column="1">{
    <if pos:line="266" pos:column="5">if <condition pos:line="266" pos:column="8">(<expr><name><name pos:line="266" pos:column="9">s<pos:position pos:line="266" pos:column="10"/></name><operator pos:line="266" pos:column="10">-&gt;<pos:position pos:line="266" pos:column="15"/></operator><name pos:line="266" pos:column="12">bi_valid<pos:position pos:line="266" pos:column="20"/></name></name> <operator pos:line="266" pos:column="21">==<pos:position pos:line="266" pos:column="23"/></operator> <literal type="number" pos:line="266" pos:column="24">16<pos:position pos:line="266" pos:column="26"/></literal></expr>)<pos:position pos:line="266" pos:column="27"/></condition><then pos:line="266" pos:column="27"> <block pos:line="266" pos:column="28">{
        <expr_stmt><expr><call><name pos:line="267" pos:column="9">put_short<pos:position pos:line="267" pos:column="18"/></name><argument_list pos:line="267" pos:column="18">(<argument><expr><name pos:line="267" pos:column="19">s<pos:position pos:line="267" pos:column="20"/></name></expr></argument>, <argument><expr><name><name pos:line="267" pos:column="22">s<pos:position pos:line="267" pos:column="23"/></name><operator pos:line="267" pos:column="23">-&gt;<pos:position pos:line="267" pos:column="28"/></operator><name pos:line="267" pos:column="25">bi_buf<pos:position pos:line="267" pos:column="31"/></name></name></expr></argument>)<pos:position pos:line="267" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="267" pos:column="33"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="268" pos:column="9">s<pos:position pos:line="268" pos:column="10"/></name><operator pos:line="268" pos:column="10">-&gt;<pos:position pos:line="268" pos:column="15"/></operator><name pos:line="268" pos:column="12">bi_buf<pos:position pos:line="268" pos:column="18"/></name></name> <operator pos:line="268" pos:column="19">=<pos:position pos:line="268" pos:column="20"/></operator> <literal type="number" pos:line="268" pos:column="21">0<pos:position pos:line="268" pos:column="22"/></literal></expr>;<pos:position pos:line="268" pos:column="23"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="269" pos:column="9">s<pos:position pos:line="269" pos:column="10"/></name><operator pos:line="269" pos:column="10">-&gt;<pos:position pos:line="269" pos:column="15"/></operator><name pos:line="269" pos:column="12">bi_valid<pos:position pos:line="269" pos:column="20"/></name></name> <operator pos:line="269" pos:column="21">=<pos:position pos:line="269" pos:column="22"/></operator> <literal type="number" pos:line="269" pos:column="23">0<pos:position pos:line="269" pos:column="24"/></literal></expr>;<pos:position pos:line="269" pos:column="25"/></expr_stmt>
    }<pos:position pos:line="270" pos:column="6"/></block></then> <elseif pos:line="270" pos:column="7">else <if pos:line="270" pos:column="12">if <condition pos:line="270" pos:column="15">(<expr><name><name pos:line="270" pos:column="16">s<pos:position pos:line="270" pos:column="17"/></name><operator pos:line="270" pos:column="17">-&gt;<pos:position pos:line="270" pos:column="22"/></operator><name pos:line="270" pos:column="19">bi_valid<pos:position pos:line="270" pos:column="27"/></name></name> <operator pos:line="270" pos:column="28">&gt;=<pos:position pos:line="270" pos:column="33"/></operator> <literal type="number" pos:line="270" pos:column="31">8<pos:position pos:line="270" pos:column="32"/></literal></expr>)<pos:position pos:line="270" pos:column="33"/></condition><then pos:line="270" pos:column="33"> <block pos:line="270" pos:column="34">{
        <expr_stmt><expr><call><name pos:line="271" pos:column="9">put_byte<pos:position pos:line="271" pos:column="17"/></name><argument_list pos:line="271" pos:column="17">(<argument><expr><name pos:line="271" pos:column="18">s<pos:position pos:line="271" pos:column="19"/></name></expr></argument>, <argument><expr><operator pos:line="271" pos:column="21">(<pos:position pos:line="271" pos:column="22"/></operator><name pos:line="271" pos:column="22">Byte<pos:position pos:line="271" pos:column="26"/></name><operator pos:line="271" pos:column="26">)<pos:position pos:line="271" pos:column="27"/></operator><name><name pos:line="271" pos:column="27">s<pos:position pos:line="271" pos:column="28"/></name><operator pos:line="271" pos:column="28">-&gt;<pos:position pos:line="271" pos:column="33"/></operator><name pos:line="271" pos:column="30">bi_buf<pos:position pos:line="271" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="271" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="271" pos:column="38"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="272" pos:column="9">s<pos:position pos:line="272" pos:column="10"/></name><operator pos:line="272" pos:column="10">-&gt;<pos:position pos:line="272" pos:column="15"/></operator><name pos:line="272" pos:column="12">bi_buf<pos:position pos:line="272" pos:column="18"/></name></name> <operator pos:line="272" pos:column="19">&gt;&gt;=<pos:position pos:line="272" pos:column="28"/></operator> <literal type="number" pos:line="272" pos:column="23">8<pos:position pos:line="272" pos:column="24"/></literal></expr>;<pos:position pos:line="272" pos:column="25"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="273" pos:column="9">s<pos:position pos:line="273" pos:column="10"/></name><operator pos:line="273" pos:column="10">-&gt;<pos:position pos:line="273" pos:column="15"/></operator><name pos:line="273" pos:column="12">bi_valid<pos:position pos:line="273" pos:column="20"/></name></name> <operator pos:line="273" pos:column="21">-=<pos:position pos:line="273" pos:column="23"/></operator> <literal type="number" pos:line="273" pos:column="24">8<pos:position pos:line="273" pos:column="25"/></literal></expr>;<pos:position pos:line="273" pos:column="26"/></expr_stmt>
    }<pos:position pos:line="274" pos:column="6"/></block></then></if></elseif></if>
}<pos:position pos:line="275" pos:column="2"/></block>

<comment type="block" pos:line="277" pos:column="1">/* ===========================================================================
 * Flush the bit buffer and align the output on a byte boundary
 */</comment>
<decl_stmt><decl><type><name pos:line="280" pos:column="1">local<pos:position pos:line="280" pos:column="6"/></name> <name pos:line="280" pos:column="7">void<pos:position pos:line="280" pos:column="11"/></name></type> <name pos:line="280" pos:column="12">bi_windup<pos:position pos:line="280" pos:column="21"/></name><argument_list pos:line="280" pos:column="21">(<argument><expr><name pos:line="280" pos:column="22">s<pos:position pos:line="280" pos:column="23"/></name></expr></argument>)<pos:position pos:line="280" pos:column="24"/></argument_list>
    <name pos:line="281" pos:column="5">deflate_state<pos:position pos:line="281" pos:column="18"/></name> <modifier pos:line="281" pos:column="19">*<pos:position pos:line="281" pos:column="20"/></modifier><name pos:line="281" pos:column="20">s<pos:position pos:line="281" pos:column="21"/></name></decl>;<pos:position pos:line="281" pos:column="22"/></decl_stmt>
<block pos:line="282" pos:column="1">{
    <if pos:line="283" pos:column="5">if <condition pos:line="283" pos:column="8">(<expr><name><name pos:line="283" pos:column="9">s<pos:position pos:line="283" pos:column="10"/></name><operator pos:line="283" pos:column="10">-&gt;<pos:position pos:line="283" pos:column="15"/></operator><name pos:line="283" pos:column="12">bi_valid<pos:position pos:line="283" pos:column="20"/></name></name> <operator pos:line="283" pos:column="21">&gt;<pos:position pos:line="283" pos:column="25"/></operator> <literal type="number" pos:line="283" pos:column="23">8<pos:position pos:line="283" pos:column="24"/></literal></expr>)<pos:position pos:line="283" pos:column="25"/></condition><then pos:line="283" pos:column="25"> <block pos:line="283" pos:column="26">{
        <expr_stmt><expr><call><name pos:line="284" pos:column="9">put_short<pos:position pos:line="284" pos:column="18"/></name><argument_list pos:line="284" pos:column="18">(<argument><expr><name pos:line="284" pos:column="19">s<pos:position pos:line="284" pos:column="20"/></name></expr></argument>, <argument><expr><name><name pos:line="284" pos:column="22">s<pos:position pos:line="284" pos:column="23"/></name><operator pos:line="284" pos:column="23">-&gt;<pos:position pos:line="284" pos:column="28"/></operator><name pos:line="284" pos:column="25">bi_buf<pos:position pos:line="284" pos:column="31"/></name></name></expr></argument>)<pos:position pos:line="284" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="284" pos:column="33"/></expr_stmt>
    }<pos:position pos:line="285" pos:column="6"/></block></then> <elseif pos:line="285" pos:column="7">else <if pos:line="285" pos:column="12">if <condition pos:line="285" pos:column="15">(<expr><name><name pos:line="285" pos:column="16">s<pos:position pos:line="285" pos:column="17"/></name><operator pos:line="285" pos:column="17">-&gt;<pos:position pos:line="285" pos:column="22"/></operator><name pos:line="285" pos:column="19">bi_valid<pos:position pos:line="285" pos:column="27"/></name></name> <operator pos:line="285" pos:column="28">&gt;<pos:position pos:line="285" pos:column="32"/></operator> <literal type="number" pos:line="285" pos:column="30">0<pos:position pos:line="285" pos:column="31"/></literal></expr>)<pos:position pos:line="285" pos:column="32"/></condition><then pos:line="285" pos:column="32"> <block pos:line="285" pos:column="33">{
        <expr_stmt><expr><call><name pos:line="286" pos:column="9">put_byte<pos:position pos:line="286" pos:column="17"/></name><argument_list pos:line="286" pos:column="17">(<argument><expr><name pos:line="286" pos:column="18">s<pos:position pos:line="286" pos:column="19"/></name></expr></argument>, <argument><expr><operator pos:line="286" pos:column="21">(<pos:position pos:line="286" pos:column="22"/></operator><name pos:line="286" pos:column="22">Byte<pos:position pos:line="286" pos:column="26"/></name><operator pos:line="286" pos:column="26">)<pos:position pos:line="286" pos:column="27"/></operator><name><name pos:line="286" pos:column="27">s<pos:position pos:line="286" pos:column="28"/></name><operator pos:line="286" pos:column="28">-&gt;<pos:position pos:line="286" pos:column="33"/></operator><name pos:line="286" pos:column="30">bi_buf<pos:position pos:line="286" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="286" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="286" pos:column="38"/></expr_stmt>
    }<pos:position pos:line="287" pos:column="6"/></block></then></if></elseif></if>
    <expr_stmt><expr><name><name pos:line="288" pos:column="5">s<pos:position pos:line="288" pos:column="6"/></name><operator pos:line="288" pos:column="6">-&gt;<pos:position pos:line="288" pos:column="11"/></operator><name pos:line="288" pos:column="8">bi_buf<pos:position pos:line="288" pos:column="14"/></name></name> <operator pos:line="288" pos:column="15">=<pos:position pos:line="288" pos:column="16"/></operator> <literal type="number" pos:line="288" pos:column="17">0<pos:position pos:line="288" pos:column="18"/></literal></expr>;<pos:position pos:line="288" pos:column="19"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="289" pos:column="5">s<pos:position pos:line="289" pos:column="6"/></name><operator pos:line="289" pos:column="6">-&gt;<pos:position pos:line="289" pos:column="11"/></operator><name pos:line="289" pos:column="8">bi_valid<pos:position pos:line="289" pos:column="16"/></name></name> <operator pos:line="289" pos:column="17">=<pos:position pos:line="289" pos:column="18"/></operator> <literal type="number" pos:line="289" pos:column="19">0<pos:position pos:line="289" pos:column="20"/></literal></expr>;<pos:position pos:line="289" pos:column="21"/></expr_stmt>
<cpp:ifdef pos:line="290" pos:column="1">#<cpp:directive pos:line="290" pos:column="2">ifdef<pos:position pos:line="290" pos:column="7"/></cpp:directive> <name pos:line="290" pos:column="8">DEBUG<pos:position pos:line="290" pos:column="13"/></name></cpp:ifdef>
    <expr_stmt><expr><name><name pos:line="291" pos:column="5">s<pos:position pos:line="291" pos:column="6"/></name><operator pos:line="291" pos:column="6">-&gt;<pos:position pos:line="291" pos:column="11"/></operator><name pos:line="291" pos:column="8">bits_sent<pos:position pos:line="291" pos:column="17"/></name></name> <operator pos:line="291" pos:column="18">=<pos:position pos:line="291" pos:column="19"/></operator> <operator pos:line="291" pos:column="20">(<pos:position pos:line="291" pos:column="21"/></operator><name><name pos:line="291" pos:column="21">s<pos:position pos:line="291" pos:column="22"/></name><operator pos:line="291" pos:column="22">-&gt;<pos:position pos:line="291" pos:column="27"/></operator><name pos:line="291" pos:column="24">bits_sent<pos:position pos:line="291" pos:column="33"/></name></name><operator pos:line="291" pos:column="33">+<pos:position pos:line="291" pos:column="34"/></operator><literal type="number" pos:line="291" pos:column="34">7<pos:position pos:line="291" pos:column="35"/></literal><operator pos:line="291" pos:column="35">)<pos:position pos:line="291" pos:column="36"/></operator> <operator pos:line="291" pos:column="37">&amp;<pos:position pos:line="291" pos:column="42"/></operator> <operator pos:line="291" pos:column="39">~<pos:position pos:line="291" pos:column="40"/></operator><literal type="number" pos:line="291" pos:column="40">7<pos:position pos:line="291" pos:column="41"/></literal></expr>;<pos:position pos:line="291" pos:column="42"/></expr_stmt>
<cpp:endif pos:line="292" pos:column="1">#<cpp:directive pos:line="292" pos:column="2">endif<pos:position pos:line="292" pos:column="7"/></cpp:directive></cpp:endif>
}<pos:position pos:line="293" pos:column="2"/></block>

<comment type="block" pos:line="295" pos:column="1">/* ===========================================================================
 * Copy a stored block, storing first the length and its
 * one's complement if requested.
 */</comment>
<decl_stmt><decl><type><name pos:line="299" pos:column="1">local<pos:position pos:line="299" pos:column="6"/></name> <name pos:line="299" pos:column="7">void<pos:position pos:line="299" pos:column="11"/></name></type> <name pos:line="299" pos:column="12">copy_block<pos:position pos:line="299" pos:column="22"/></name><argument_list pos:line="299" pos:column="22">(<argument><expr><name pos:line="299" pos:column="23">s<pos:position pos:line="299" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="299" pos:column="26">buf<pos:position pos:line="299" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="299" pos:column="31">len<pos:position pos:line="299" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="299" pos:column="36">header<pos:position pos:line="299" pos:column="42"/></name></expr></argument>)<pos:position pos:line="299" pos:column="43"/></argument_list>
    <name pos:line="300" pos:column="5">deflate_state<pos:position pos:line="300" pos:column="18"/></name> <modifier pos:line="300" pos:column="19">*<pos:position pos:line="300" pos:column="20"/></modifier><name pos:line="300" pos:column="20">s<pos:position pos:line="300" pos:column="21"/></name></decl>;<pos:position pos:line="300" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="301" pos:column="5">charf<pos:position pos:line="301" pos:column="10"/></name>    <modifier pos:line="301" pos:column="14">*<pos:position pos:line="301" pos:column="15"/></modifier></type><name pos:line="301" pos:column="15">buf<pos:position pos:line="301" pos:column="18"/></name></decl>;<pos:position pos:line="301" pos:column="19"/></decl_stmt>    <comment type="block" pos:line="301" pos:column="23">/* the input data */</comment>
    <decl_stmt><decl><type><name pos:line="302" pos:column="5">unsigned<pos:position pos:line="302" pos:column="13"/></name></type> <name pos:line="302" pos:column="14">len<pos:position pos:line="302" pos:column="17"/></name></decl>;<pos:position pos:line="302" pos:column="18"/></decl_stmt>     <comment type="block" pos:line="302" pos:column="23">/* its length */</comment>
    <decl_stmt><decl><type><name pos:line="303" pos:column="5">int<pos:position pos:line="303" pos:column="8"/></name></type>      <name pos:line="303" pos:column="14">header<pos:position pos:line="303" pos:column="20"/></name></decl>;<pos:position pos:line="303" pos:column="21"/></decl_stmt>  <comment type="block" pos:line="303" pos:column="23">/* true if block header must be written */</comment>
<block pos:line="304" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="305" pos:column="5">bi_windup<pos:position pos:line="305" pos:column="14"/></name><argument_list pos:line="305" pos:column="14">(<argument><expr><name pos:line="305" pos:column="15">s<pos:position pos:line="305" pos:column="16"/></name></expr></argument>)<pos:position pos:line="305" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="305" pos:column="18"/></expr_stmt>        <comment type="block" pos:line="305" pos:column="26">/* align on byte boundary */</comment>

    <if pos:line="307" pos:column="5">if <condition pos:line="307" pos:column="8">(<expr><name pos:line="307" pos:column="9">header<pos:position pos:line="307" pos:column="15"/></name></expr>)<pos:position pos:line="307" pos:column="16"/></condition><then pos:line="307" pos:column="16"> <block pos:line="307" pos:column="17">{
        <expr_stmt><expr><call><name pos:line="308" pos:column="9">put_short<pos:position pos:line="308" pos:column="18"/></name><argument_list pos:line="308" pos:column="18">(<argument><expr><name pos:line="308" pos:column="19">s<pos:position pos:line="308" pos:column="20"/></name></expr></argument>, <argument><expr><operator pos:line="308" pos:column="22">(<pos:position pos:line="308" pos:column="23"/></operator><name pos:line="308" pos:column="23">ush<pos:position pos:line="308" pos:column="26"/></name><operator pos:line="308" pos:column="26">)<pos:position pos:line="308" pos:column="27"/></operator><name pos:line="308" pos:column="27">len<pos:position pos:line="308" pos:column="30"/></name></expr></argument>)<pos:position pos:line="308" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="308" pos:column="32"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="309" pos:column="9">put_short<pos:position pos:line="309" pos:column="18"/></name><argument_list pos:line="309" pos:column="18">(<argument><expr><name pos:line="309" pos:column="19">s<pos:position pos:line="309" pos:column="20"/></name></expr></argument>, <argument><expr><operator pos:line="309" pos:column="22">(<pos:position pos:line="309" pos:column="23"/></operator><name pos:line="309" pos:column="23">ush<pos:position pos:line="309" pos:column="26"/></name><operator pos:line="309" pos:column="26">)<pos:position pos:line="309" pos:column="27"/></operator><operator pos:line="309" pos:column="27">~<pos:position pos:line="309" pos:column="28"/></operator><name pos:line="309" pos:column="28">len<pos:position pos:line="309" pos:column="31"/></name></expr></argument>)<pos:position pos:line="309" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="309" pos:column="33"/></expr_stmt>
<cpp:ifdef pos:line="310" pos:column="1">#<cpp:directive pos:line="310" pos:column="2">ifdef<pos:position pos:line="310" pos:column="7"/></cpp:directive> <name pos:line="310" pos:column="8">DEBUG<pos:position pos:line="310" pos:column="13"/></name></cpp:ifdef>
        <expr_stmt><expr><name><name pos:line="311" pos:column="9">s<pos:position pos:line="311" pos:column="10"/></name><operator pos:line="311" pos:column="10">-&gt;<pos:position pos:line="311" pos:column="15"/></operator><name pos:line="311" pos:column="12">bits_sent<pos:position pos:line="311" pos:column="21"/></name></name> <operator pos:line="311" pos:column="22">+=<pos:position pos:line="311" pos:column="24"/></operator> <literal type="number" pos:line="311" pos:column="25">2<pos:position pos:line="311" pos:column="26"/></literal><operator pos:line="311" pos:column="26">*<pos:position pos:line="311" pos:column="27"/></operator><literal type="number" pos:line="311" pos:column="27">16<pos:position pos:line="311" pos:column="29"/></literal></expr>;<pos:position pos:line="311" pos:column="30"/></expr_stmt>
<cpp:endif pos:line="312" pos:column="1">#<cpp:directive pos:line="312" pos:column="2">endif<pos:position pos:line="312" pos:column="7"/></cpp:directive></cpp:endif>
    }<pos:position pos:line="313" pos:column="6"/></block></then></if>
<cpp:ifdef pos:line="314" pos:column="1">#<cpp:directive pos:line="314" pos:column="2">ifdef<pos:position pos:line="314" pos:column="7"/></cpp:directive> <name pos:line="314" pos:column="8">DEBUG<pos:position pos:line="314" pos:column="13"/></name></cpp:ifdef>
    <expr_stmt><expr><name><name pos:line="315" pos:column="5">s<pos:position pos:line="315" pos:column="6"/></name><operator pos:line="315" pos:column="6">-&gt;<pos:position pos:line="315" pos:column="11"/></operator><name pos:line="315" pos:column="8">bits_sent<pos:position pos:line="315" pos:column="17"/></name></name> <operator pos:line="315" pos:column="18">+=<pos:position pos:line="315" pos:column="20"/></operator> <operator pos:line="315" pos:column="21">(<pos:position pos:line="315" pos:column="22"/></operator><name pos:line="315" pos:column="22">ulg<pos:position pos:line="315" pos:column="25"/></name><operator pos:line="315" pos:column="25">)<pos:position pos:line="315" pos:column="26"/></operator><name pos:line="315" pos:column="26">len<pos:position pos:line="315" pos:column="29"/></name><operator pos:line="315" pos:column="29">&lt;&lt;<pos:position pos:line="315" pos:column="37"/></operator><literal type="number" pos:line="315" pos:column="31">3<pos:position pos:line="315" pos:column="32"/></literal></expr>;<pos:position pos:line="315" pos:column="33"/></expr_stmt>
<cpp:endif pos:line="316" pos:column="1">#<cpp:directive pos:line="316" pos:column="2">endif<pos:position pos:line="316" pos:column="7"/></cpp:directive></cpp:endif>
    <while pos:line="317" pos:column="5">while <condition pos:line="317" pos:column="11">(<expr><name pos:line="317" pos:column="12">len<pos:position pos:line="317" pos:column="15"/></name><operator pos:line="317" pos:column="15">--<pos:position pos:line="317" pos:column="17"/></operator></expr>)<pos:position pos:line="317" pos:column="18"/></condition> <block pos:line="317" pos:column="19">{
        <expr_stmt><expr><call><name pos:line="318" pos:column="9">put_byte<pos:position pos:line="318" pos:column="17"/></name><argument_list pos:line="318" pos:column="17">(<argument><expr><name pos:line="318" pos:column="18">s<pos:position pos:line="318" pos:column="19"/></name></expr></argument>, <argument><expr><operator pos:line="318" pos:column="21">*<pos:position pos:line="318" pos:column="22"/></operator><name pos:line="318" pos:column="22">buf<pos:position pos:line="318" pos:column="25"/></name><operator pos:line="318" pos:column="25">++<pos:position pos:line="318" pos:column="27"/></operator></expr></argument>)<pos:position pos:line="318" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="318" pos:column="29"/></expr_stmt>
    }<pos:position pos:line="319" pos:column="6"/></block></while>
}<pos:position pos:line="320" pos:column="2"/></block></block></unit>
