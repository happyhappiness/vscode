<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_144_rsync-3.0.9.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">writefd_unbuffered<pos:position pos:line="1" pos:column="31"/></name><parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><name pos:line="1" pos:column="32">int<pos:position pos:line="1" pos:column="35"/></name></type> <name pos:line="1" pos:column="36">fd<pos:position pos:line="1" pos:column="38"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="40">const<pos:position pos:line="1" pos:column="45"/></specifier> <name pos:line="1" pos:column="46">char<pos:position pos:line="1" pos:column="50"/></name> <modifier pos:line="1" pos:column="51">*<pos:position pos:line="1" pos:column="52"/></modifier></type><name pos:line="1" pos:column="52">buf<pos:position pos:line="1" pos:column="55"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="57">size_t<pos:position pos:line="1" pos:column="63"/></name></type> <name pos:line="1" pos:column="64">len<pos:position pos:line="1" pos:column="67"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="68"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">size_t<pos:position pos:line="3" pos:column="15"/></name></type> <name pos:line="3" pos:column="16">n<pos:position pos:line="3" pos:column="17"/></name></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="19">total<pos:position pos:line="3" pos:column="24"/></name> <init pos:line="3" pos:column="25">= <expr><literal type="number" pos:line="3" pos:column="27">0<pos:position pos:line="3" pos:column="28"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="29"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">fd_set<pos:position pos:line="4" pos:column="15"/></name></type> <name pos:line="4" pos:column="16">w_fds<pos:position pos:line="4" pos:column="21"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="23">r_fds<pos:position pos:line="4" pos:column="28"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="30">e_fds<pos:position pos:line="4" pos:column="35"/></name></decl>;<pos:position pos:line="4" pos:column="36"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">maxfd<pos:position pos:line="5" pos:column="18"/></name></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="20">count<pos:position pos:line="5" pos:column="25"/></name></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="27">cnt<pos:position pos:line="5" pos:column="30"/></name></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="32">using_r_fds<pos:position pos:line="5" pos:column="43"/></name></decl>;<pos:position pos:line="5" pos:column="44"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">defer_inc<pos:position pos:line="6" pos:column="22"/></name> <init pos:line="6" pos:column="23">= <expr><literal type="number" pos:line="6" pos:column="25">0<pos:position pos:line="6" pos:column="26"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="27"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="7" pos:column="9">struct<pos:position pos:line="7" pos:column="15"/></name> <name pos:line="7" pos:column="16">timeval<pos:position pos:line="7" pos:column="23"/></name></name></type> <name pos:line="7" pos:column="24">tv<pos:position pos:line="7" pos:column="26"/></name></decl>;<pos:position pos:line="7" pos:column="27"/></decl_stmt>

	<if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><name pos:line="9" pos:column="13">no_flush<pos:position pos:line="9" pos:column="21"/></name><operator pos:line="9" pos:column="21">++<pos:position pos:line="9" pos:column="23"/></operator></expr>)<pos:position pos:line="9" pos:column="24"/></condition><then pos:line="9" pos:column="24">
		<block type="pseudo"><expr_stmt><expr><name pos:line="10" pos:column="17">defer_forwarding_messages<pos:position pos:line="10" pos:column="42"/></name><operator pos:line="10" pos:column="42">++<pos:position pos:line="10" pos:column="44"/></operator></expr><operator pos:line="10" pos:column="44">,<pos:position pos:line="10" pos:column="45"/></operator> <expr><name pos:line="10" pos:column="46">defer_inc<pos:position pos:line="10" pos:column="55"/></name><operator pos:line="10" pos:column="55">++<pos:position pos:line="10" pos:column="57"/></operator></expr>;<pos:position pos:line="10" pos:column="58"/></expr_stmt></block></then></if>

	<while pos:line="12" pos:column="9">while <condition pos:line="12" pos:column="15">(<expr><name pos:line="12" pos:column="16">total<pos:position pos:line="12" pos:column="21"/></name> <operator pos:line="12" pos:column="22">&lt;<pos:position pos:line="12" pos:column="26"/></operator> <name pos:line="12" pos:column="24">len<pos:position pos:line="12" pos:column="27"/></name></expr>)<pos:position pos:line="12" pos:column="28"/></condition> <block pos:line="12" pos:column="29">{
		<expr_stmt><expr><call><name pos:line="13" pos:column="17">FD_ZERO<pos:position pos:line="13" pos:column="24"/></name><argument_list pos:line="13" pos:column="24">(<argument><expr><operator pos:line="13" pos:column="25">&amp;<pos:position pos:line="13" pos:column="30"/></operator><name pos:line="13" pos:column="26">w_fds<pos:position pos:line="13" pos:column="31"/></name></expr></argument>)<pos:position pos:line="13" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="33"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="14" pos:column="17">FD_SET<pos:position pos:line="14" pos:column="23"/></name><argument_list pos:line="14" pos:column="23">(<argument><expr><name pos:line="14" pos:column="24">fd<pos:position pos:line="14" pos:column="26"/></name></expr></argument>, <argument><expr><operator pos:line="14" pos:column="28">&amp;<pos:position pos:line="14" pos:column="33"/></operator><name pos:line="14" pos:column="29">w_fds<pos:position pos:line="14" pos:column="34"/></name></expr></argument>)<pos:position pos:line="14" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="36"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="15" pos:column="17">FD_ZERO<pos:position pos:line="15" pos:column="24"/></name><argument_list pos:line="15" pos:column="24">(<argument><expr><operator pos:line="15" pos:column="25">&amp;<pos:position pos:line="15" pos:column="30"/></operator><name pos:line="15" pos:column="26">e_fds<pos:position pos:line="15" pos:column="31"/></name></expr></argument>)<pos:position pos:line="15" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="33"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="16" pos:column="17">FD_SET<pos:position pos:line="16" pos:column="23"/></name><argument_list pos:line="16" pos:column="23">(<argument><expr><name pos:line="16" pos:column="24">fd<pos:position pos:line="16" pos:column="26"/></name></expr></argument>, <argument><expr><operator pos:line="16" pos:column="28">&amp;<pos:position pos:line="16" pos:column="33"/></operator><name pos:line="16" pos:column="29">e_fds<pos:position pos:line="16" pos:column="34"/></name></expr></argument>)<pos:position pos:line="16" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="36"/></expr_stmt>
		<expr_stmt><expr><name pos:line="17" pos:column="17">maxfd<pos:position pos:line="17" pos:column="22"/></name> <operator pos:line="17" pos:column="23">=<pos:position pos:line="17" pos:column="24"/></operator> <name pos:line="17" pos:column="25">fd<pos:position pos:line="17" pos:column="27"/></name></expr>;<pos:position pos:line="17" pos:column="28"/></expr_stmt>

		<if pos:line="19" pos:column="17">if <condition pos:line="19" pos:column="20">(<expr><name pos:line="19" pos:column="21">msg_fd_in<pos:position pos:line="19" pos:column="30"/></name> <operator pos:line="19" pos:column="31">&gt;=<pos:position pos:line="19" pos:column="36"/></operator> <literal type="number" pos:line="19" pos:column="34">0<pos:position pos:line="19" pos:column="35"/></literal></expr>)<pos:position pos:line="19" pos:column="36"/></condition><then pos:line="19" pos:column="36"> <block pos:line="19" pos:column="37">{
			<expr_stmt><expr><call><name pos:line="20" pos:column="25">FD_ZERO<pos:position pos:line="20" pos:column="32"/></name><argument_list pos:line="20" pos:column="32">(<argument><expr><operator pos:line="20" pos:column="33">&amp;<pos:position pos:line="20" pos:column="38"/></operator><name pos:line="20" pos:column="34">r_fds<pos:position pos:line="20" pos:column="39"/></name></expr></argument>)<pos:position pos:line="20" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="41"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="21" pos:column="25">FD_SET<pos:position pos:line="21" pos:column="31"/></name><argument_list pos:line="21" pos:column="31">(<argument><expr><name pos:line="21" pos:column="32">msg_fd_in<pos:position pos:line="21" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="21" pos:column="43">&amp;<pos:position pos:line="21" pos:column="48"/></operator><name pos:line="21" pos:column="44">r_fds<pos:position pos:line="21" pos:column="49"/></name></expr></argument>)<pos:position pos:line="21" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="51"/></expr_stmt>
			<if pos:line="22" pos:column="25">if <condition pos:line="22" pos:column="28">(<expr><name pos:line="22" pos:column="29">msg_fd_in<pos:position pos:line="22" pos:column="38"/></name> <operator pos:line="22" pos:column="39">&gt;<pos:position pos:line="22" pos:column="43"/></operator> <name pos:line="22" pos:column="41">maxfd<pos:position pos:line="22" pos:column="46"/></name></expr>)<pos:position pos:line="22" pos:column="47"/></condition><then pos:line="22" pos:column="47">
				<block type="pseudo"><expr_stmt><expr><name pos:line="23" pos:column="33">maxfd<pos:position pos:line="23" pos:column="38"/></name> <operator pos:line="23" pos:column="39">=<pos:position pos:line="23" pos:column="40"/></operator> <name pos:line="23" pos:column="41">msg_fd_in<pos:position pos:line="23" pos:column="50"/></name></expr>;<pos:position pos:line="23" pos:column="51"/></expr_stmt></block></then></if>
			<expr_stmt><expr><name pos:line="24" pos:column="25">using_r_fds<pos:position pos:line="24" pos:column="36"/></name> <operator pos:line="24" pos:column="37">=<pos:position pos:line="24" pos:column="38"/></operator> <literal type="number" pos:line="24" pos:column="39">1<pos:position pos:line="24" pos:column="40"/></literal></expr>;<pos:position pos:line="24" pos:column="41"/></expr_stmt>
		}<pos:position pos:line="25" pos:column="18"/></block></then> <else pos:line="25" pos:column="19">else
			<block type="pseudo"><expr_stmt><expr><name pos:line="26" pos:column="25">using_r_fds<pos:position pos:line="26" pos:column="36"/></name> <operator pos:line="26" pos:column="37">=<pos:position pos:line="26" pos:column="38"/></operator> <literal type="number" pos:line="26" pos:column="39">0<pos:position pos:line="26" pos:column="40"/></literal></expr>;<pos:position pos:line="26" pos:column="41"/></expr_stmt></block></else></if>

		<expr_stmt><expr><name><name pos:line="28" pos:column="17">tv<pos:position pos:line="28" pos:column="19"/></name><operator pos:line="28" pos:column="19">.<pos:position pos:line="28" pos:column="20"/></operator><name pos:line="28" pos:column="20">tv_sec<pos:position pos:line="28" pos:column="26"/></name></name> <operator pos:line="28" pos:column="27">=<pos:position pos:line="28" pos:column="28"/></operator> <name pos:line="28" pos:column="29">select_timeout<pos:position pos:line="28" pos:column="43"/></name></expr>;<pos:position pos:line="28" pos:column="44"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="29" pos:column="17">tv<pos:position pos:line="29" pos:column="19"/></name><operator pos:line="29" pos:column="19">.<pos:position pos:line="29" pos:column="20"/></operator><name pos:line="29" pos:column="20">tv_usec<pos:position pos:line="29" pos:column="27"/></name></name> <operator pos:line="29" pos:column="28">=<pos:position pos:line="29" pos:column="29"/></operator> <literal type="number" pos:line="29" pos:column="30">0<pos:position pos:line="29" pos:column="31"/></literal></expr>;<pos:position pos:line="29" pos:column="32"/></expr_stmt>

		<expr_stmt><expr><name pos:line="31" pos:column="17">errno<pos:position pos:line="31" pos:column="22"/></name> <operator pos:line="31" pos:column="23">=<pos:position pos:line="31" pos:column="24"/></operator> <literal type="number" pos:line="31" pos:column="25">0<pos:position pos:line="31" pos:column="26"/></literal></expr>;<pos:position pos:line="31" pos:column="27"/></expr_stmt>
		<expr_stmt><expr><name pos:line="32" pos:column="17">count<pos:position pos:line="32" pos:column="22"/></name> <operator pos:line="32" pos:column="23">=<pos:position pos:line="32" pos:column="24"/></operator> <call><name pos:line="32" pos:column="25">select<pos:position pos:line="32" pos:column="31"/></name><argument_list pos:line="32" pos:column="31">(<argument><expr><name pos:line="32" pos:column="32">maxfd<pos:position pos:line="32" pos:column="37"/></name> <operator pos:line="32" pos:column="38">+<pos:position pos:line="32" pos:column="39"/></operator> <literal type="number" pos:line="32" pos:column="40">1<pos:position pos:line="32" pos:column="41"/></literal></expr></argument>, <argument><expr><ternary><condition><expr><name pos:line="32" pos:column="43">using_r_fds<pos:position pos:line="32" pos:column="54"/></name></expr> ?<pos:position pos:line="32" pos:column="56"/></condition><then pos:line="32" pos:column="56"> <expr><operator pos:line="32" pos:column="57">&amp;<pos:position pos:line="32" pos:column="62"/></operator><name pos:line="32" pos:column="58">r_fds<pos:position pos:line="32" pos:column="63"/></name></expr> <pos:position pos:line="32" pos:column="64"/></then><else pos:line="32" pos:column="64">: <expr><name pos:line="32" pos:column="66">NULL<pos:position pos:line="32" pos:column="70"/></name></expr></else></ternary></expr></argument>,
			       <argument><expr><operator pos:line="33" pos:column="32">&amp;<pos:position pos:line="33" pos:column="37"/></operator><name pos:line="33" pos:column="33">w_fds<pos:position pos:line="33" pos:column="38"/></name></expr></argument>, <argument><expr><operator pos:line="33" pos:column="40">&amp;<pos:position pos:line="33" pos:column="45"/></operator><name pos:line="33" pos:column="41">e_fds<pos:position pos:line="33" pos:column="46"/></name></expr></argument>, <argument><expr><operator pos:line="33" pos:column="48">&amp;<pos:position pos:line="33" pos:column="53"/></operator><name pos:line="33" pos:column="49">tv<pos:position pos:line="33" pos:column="51"/></name></expr></argument>)<pos:position pos:line="33" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="53"/></expr_stmt>

		<if pos:line="35" pos:column="17">if <condition pos:line="35" pos:column="20">(<expr><name pos:line="35" pos:column="21">count<pos:position pos:line="35" pos:column="26"/></name> <operator pos:line="35" pos:column="27">&lt;=<pos:position pos:line="35" pos:column="32"/></operator> <literal type="number" pos:line="35" pos:column="30">0<pos:position pos:line="35" pos:column="31"/></literal></expr>)<pos:position pos:line="35" pos:column="32"/></condition><then pos:line="35" pos:column="32"> <block pos:line="35" pos:column="33">{
			<if pos:line="36" pos:column="25">if <condition pos:line="36" pos:column="28">(<expr><name pos:line="36" pos:column="29">count<pos:position pos:line="36" pos:column="34"/></name> <operator pos:line="36" pos:column="35">&lt;<pos:position pos:line="36" pos:column="39"/></operator> <literal type="number" pos:line="36" pos:column="37">0<pos:position pos:line="36" pos:column="38"/></literal> <operator pos:line="36" pos:column="39">&amp;&amp;<pos:position pos:line="36" pos:column="49"/></operator> <name pos:line="36" pos:column="42">errno<pos:position pos:line="36" pos:column="47"/></name> <operator pos:line="36" pos:column="48">==<pos:position pos:line="36" pos:column="50"/></operator> <name pos:line="36" pos:column="51">EBADF<pos:position pos:line="36" pos:column="56"/></name></expr>)<pos:position pos:line="36" pos:column="57"/></condition><then pos:line="36" pos:column="57">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="37" pos:column="33">exit_cleanup<pos:position pos:line="37" pos:column="45"/></name><argument_list pos:line="37" pos:column="45">(<argument><expr><name pos:line="37" pos:column="46">RERR_SOCKETIO<pos:position pos:line="37" pos:column="59"/></name></expr></argument>)<pos:position pos:line="37" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="61"/></expr_stmt></block></then></if>
			<expr_stmt><expr><call><name pos:line="38" pos:column="25">check_timeout<pos:position pos:line="38" pos:column="38"/></name><argument_list pos:line="38" pos:column="38">()<pos:position pos:line="38" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="41"/></expr_stmt>
			<continue pos:line="39" pos:column="25">continue;<pos:position pos:line="39" pos:column="34"/></continue>
		}<pos:position pos:line="40" pos:column="18"/></block></then></if>

		<comment type="block" pos:line="42" pos:column="17">/*if (FD_ISSET(fd, &amp;e_fds))
			rprintf(FINFO, "select exception on fd %d\n", fd); */</comment>

		<if pos:line="45" pos:column="17">if <condition pos:line="45" pos:column="20">(<expr><name pos:line="45" pos:column="21">using_r_fds<pos:position pos:line="45" pos:column="32"/></name> <operator pos:line="45" pos:column="33">&amp;&amp;<pos:position pos:line="45" pos:column="43"/></operator> <call><name pos:line="45" pos:column="36">FD_ISSET<pos:position pos:line="45" pos:column="44"/></name><argument_list pos:line="45" pos:column="44">(<argument><expr><name pos:line="45" pos:column="45">msg_fd_in<pos:position pos:line="45" pos:column="54"/></name></expr></argument>, <argument><expr><operator pos:line="45" pos:column="56">&amp;<pos:position pos:line="45" pos:column="61"/></operator><name pos:line="45" pos:column="57">r_fds<pos:position pos:line="45" pos:column="62"/></name></expr></argument>)<pos:position pos:line="45" pos:column="63"/></argument_list></call></expr>)<pos:position pos:line="45" pos:column="64"/></condition><then pos:line="45" pos:column="64">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="46" pos:column="25">read_msg_fd<pos:position pos:line="46" pos:column="36"/></name><argument_list pos:line="46" pos:column="36">()<pos:position pos:line="46" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="39"/></expr_stmt></block></then></if>

		<if pos:line="48" pos:column="17">if <condition pos:line="48" pos:column="20">(<expr><operator pos:line="48" pos:column="21">!<pos:position pos:line="48" pos:column="22"/></operator><call><name pos:line="48" pos:column="22">FD_ISSET<pos:position pos:line="48" pos:column="30"/></name><argument_list pos:line="48" pos:column="30">(<argument><expr><name pos:line="48" pos:column="31">fd<pos:position pos:line="48" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="48" pos:column="35">&amp;<pos:position pos:line="48" pos:column="40"/></operator><name pos:line="48" pos:column="36">w_fds<pos:position pos:line="48" pos:column="41"/></name></expr></argument>)<pos:position pos:line="48" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="48" pos:column="43"/></condition><then pos:line="48" pos:column="43">
			<block type="pseudo"><continue pos:line="49" pos:column="25">continue;<pos:position pos:line="49" pos:column="34"/></continue></block></then></if>

		<expr_stmt><expr><name pos:line="51" pos:column="17">n<pos:position pos:line="51" pos:column="18"/></name> <operator pos:line="51" pos:column="19">=<pos:position pos:line="51" pos:column="20"/></operator> <name pos:line="51" pos:column="21">len<pos:position pos:line="51" pos:column="24"/></name> <operator pos:line="51" pos:column="25">-<pos:position pos:line="51" pos:column="26"/></operator> <name pos:line="51" pos:column="27">total<pos:position pos:line="51" pos:column="32"/></name></expr>;<pos:position pos:line="51" pos:column="33"/></expr_stmt>
		<if pos:line="52" pos:column="17">if <condition pos:line="52" pos:column="20">(<expr><name pos:line="52" pos:column="21">bwlimit_writemax<pos:position pos:line="52" pos:column="37"/></name> <operator pos:line="52" pos:column="38">&amp;&amp;<pos:position pos:line="52" pos:column="48"/></operator> <name pos:line="52" pos:column="41">n<pos:position pos:line="52" pos:column="42"/></name> <operator pos:line="52" pos:column="43">&gt;<pos:position pos:line="52" pos:column="47"/></operator> <name pos:line="52" pos:column="45">bwlimit_writemax<pos:position pos:line="52" pos:column="61"/></name></expr>)<pos:position pos:line="52" pos:column="62"/></condition><then pos:line="52" pos:column="62">
			<block type="pseudo"><expr_stmt><expr><name pos:line="53" pos:column="25">n<pos:position pos:line="53" pos:column="26"/></name> <operator pos:line="53" pos:column="27">=<pos:position pos:line="53" pos:column="28"/></operator> <name pos:line="53" pos:column="29">bwlimit_writemax<pos:position pos:line="53" pos:column="45"/></name></expr>;<pos:position pos:line="53" pos:column="46"/></expr_stmt></block></then></if>
		<expr_stmt><expr><name pos:line="54" pos:column="17">cnt<pos:position pos:line="54" pos:column="20"/></name> <operator pos:line="54" pos:column="21">=<pos:position pos:line="54" pos:column="22"/></operator> <call><name pos:line="54" pos:column="23">write<pos:position pos:line="54" pos:column="28"/></name><argument_list pos:line="54" pos:column="28">(<argument><expr><name pos:line="54" pos:column="29">fd<pos:position pos:line="54" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="33">buf<pos:position pos:line="54" pos:column="36"/></name> <operator pos:line="54" pos:column="37">+<pos:position pos:line="54" pos:column="38"/></operator> <name pos:line="54" pos:column="39">total<pos:position pos:line="54" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="46">n<pos:position pos:line="54" pos:column="47"/></name></expr></argument>)<pos:position pos:line="54" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="49"/></expr_stmt>

		<if pos:line="56" pos:column="17">if <condition pos:line="56" pos:column="20">(<expr><name pos:line="56" pos:column="21">cnt<pos:position pos:line="56" pos:column="24"/></name> <operator pos:line="56" pos:column="25">&lt;=<pos:position pos:line="56" pos:column="30"/></operator> <literal type="number" pos:line="56" pos:column="28">0<pos:position pos:line="56" pos:column="29"/></literal></expr>)<pos:position pos:line="56" pos:column="30"/></condition><then pos:line="56" pos:column="30"> <block pos:line="56" pos:column="31">{
			<if pos:line="57" pos:column="25">if <condition pos:line="57" pos:column="28">(<expr><name pos:line="57" pos:column="29">cnt<pos:position pos:line="57" pos:column="32"/></name> <operator pos:line="57" pos:column="33">&lt;<pos:position pos:line="57" pos:column="37"/></operator> <literal type="number" pos:line="57" pos:column="35">0<pos:position pos:line="57" pos:column="36"/></literal></expr>)<pos:position pos:line="57" pos:column="37"/></condition><then pos:line="57" pos:column="37"> <block pos:line="57" pos:column="38">{
				<if pos:line="58" pos:column="33">if <condition pos:line="58" pos:column="36">(<expr><name pos:line="58" pos:column="37">errno<pos:position pos:line="58" pos:column="42"/></name> <operator pos:line="58" pos:column="43">==<pos:position pos:line="58" pos:column="45"/></operator> <name pos:line="58" pos:column="46">EINTR<pos:position pos:line="58" pos:column="51"/></name></expr>)<pos:position pos:line="58" pos:column="52"/></condition><then pos:line="58" pos:column="52">
					<block type="pseudo"><continue pos:line="59" pos:column="41">continue;<pos:position pos:line="59" pos:column="50"/></continue></block></then></if>
				<if pos:line="60" pos:column="33">if <condition pos:line="60" pos:column="36">(<expr><name pos:line="60" pos:column="37">errno<pos:position pos:line="60" pos:column="42"/></name> <operator pos:line="60" pos:column="43">==<pos:position pos:line="60" pos:column="45"/></operator> <name pos:line="60" pos:column="46">EWOULDBLOCK<pos:position pos:line="60" pos:column="57"/></name> <operator pos:line="60" pos:column="58">||<pos:position pos:line="60" pos:column="60"/></operator> <name pos:line="60" pos:column="61">errno<pos:position pos:line="60" pos:column="66"/></name> <operator pos:line="60" pos:column="67">==<pos:position pos:line="60" pos:column="69"/></operator> <name pos:line="60" pos:column="70">EAGAIN<pos:position pos:line="60" pos:column="76"/></name></expr>)<pos:position pos:line="60" pos:column="77"/></condition><then pos:line="60" pos:column="77"> <block pos:line="60" pos:column="78">{
					<expr_stmt><expr><call><name pos:line="61" pos:column="41">msleep<pos:position pos:line="61" pos:column="47"/></name><argument_list pos:line="61" pos:column="47">(<argument><expr><literal type="number" pos:line="61" pos:column="48">1<pos:position pos:line="61" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="61" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="51"/></expr_stmt>
					<continue pos:line="62" pos:column="41">continue;<pos:position pos:line="62" pos:column="50"/></continue>
				}<pos:position pos:line="63" pos:column="34"/></block></then></if>
			}<pos:position pos:line="64" pos:column="26"/></block></then></if>

			<comment type="block" pos:line="66" pos:column="25">/* Don't try to write errors back across the stream. */</comment>
			<if pos:line="67" pos:column="25">if <condition pos:line="67" pos:column="28">(<expr><name pos:line="67" pos:column="29">fd<pos:position pos:line="67" pos:column="31"/></name> <operator pos:line="67" pos:column="32">==<pos:position pos:line="67" pos:column="34"/></operator> <name pos:line="67" pos:column="35">sock_f_out<pos:position pos:line="67" pos:column="45"/></name></expr>)<pos:position pos:line="67" pos:column="46"/></condition><then pos:line="67" pos:column="46">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="68" pos:column="33">io_end_multiplex_out<pos:position pos:line="68" pos:column="53"/></name><argument_list pos:line="68" pos:column="53">()<pos:position pos:line="68" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="56"/></expr_stmt></block></then></if>
			<comment type="block" pos:line="69" pos:column="25">/* Don't try to write errors down a failing msg pipe. */</comment>
			<if pos:line="70" pos:column="25">if <condition pos:line="70" pos:column="28">(<expr><name pos:line="70" pos:column="29">am_server<pos:position pos:line="70" pos:column="38"/></name> <operator pos:line="70" pos:column="39">&amp;&amp;<pos:position pos:line="70" pos:column="49"/></operator> <name pos:line="70" pos:column="42">fd<pos:position pos:line="70" pos:column="44"/></name> <operator pos:line="70" pos:column="45">==<pos:position pos:line="70" pos:column="47"/></operator> <name pos:line="70" pos:column="48">msg_fd_out<pos:position pos:line="70" pos:column="58"/></name></expr>)<pos:position pos:line="70" pos:column="59"/></condition><then pos:line="70" pos:column="59">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="71" pos:column="33">exit_cleanup<pos:position pos:line="71" pos:column="45"/></name><argument_list pos:line="71" pos:column="45">(<argument><expr><name pos:line="71" pos:column="46">RERR_STREAMIO<pos:position pos:line="71" pos:column="59"/></name></expr></argument>)<pos:position pos:line="71" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="61"/></expr_stmt></block></then></if>
			<expr_stmt><expr><call><name pos:line="72" pos:column="25">rsyserr<pos:position pos:line="72" pos:column="32"/></name><argument_list pos:line="72" pos:column="32">(<argument><expr><name pos:line="72" pos:column="33">FERROR<pos:position pos:line="72" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="72" pos:column="41">errno<pos:position pos:line="72" pos:column="46"/></name></expr></argument>,
				<argument><expr><literal type="string" pos:line="73" pos:column="33">"writefd_unbuffered failed to write %ld bytes to %s [%s]"<pos:position pos:line="73" pos:column="90"/></literal></expr></argument>,
				<argument><expr><operator pos:line="74" pos:column="33">(<pos:position pos:line="74" pos:column="34"/></operator><name pos:line="74" pos:column="34">long<pos:position pos:line="74" pos:column="38"/></name><operator pos:line="74" pos:column="38">)<pos:position pos:line="74" pos:column="39"/></operator><name pos:line="74" pos:column="39">len<pos:position pos:line="74" pos:column="42"/></name></expr></argument>, <argument><expr><call><name pos:line="74" pos:column="44">what_fd_is<pos:position pos:line="74" pos:column="54"/></name><argument_list pos:line="74" pos:column="54">(<argument><expr><name pos:line="74" pos:column="55">fd<pos:position pos:line="74" pos:column="57"/></name></expr></argument>)<pos:position pos:line="74" pos:column="58"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="74" pos:column="60">who_am_i<pos:position pos:line="74" pos:column="68"/></name><argument_list pos:line="74" pos:column="68">()<pos:position pos:line="74" pos:column="70"/></argument_list></call></expr></argument>)<pos:position pos:line="74" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="72"/></expr_stmt>
			<comment type="block" pos:line="75" pos:column="25">/* If the other side is sending us error messages, try
			 * to grab any messages they sent before they died. */</comment>
			<while pos:line="77" pos:column="25">while <condition pos:line="77" pos:column="31">(<expr><operator pos:line="77" pos:column="32">!<pos:position pos:line="77" pos:column="33"/></operator><name pos:line="77" pos:column="33">am_server<pos:position pos:line="77" pos:column="42"/></name> <operator pos:line="77" pos:column="43">&amp;&amp;<pos:position pos:line="77" pos:column="53"/></operator> <name pos:line="77" pos:column="46">fd<pos:position pos:line="77" pos:column="48"/></name> <operator pos:line="77" pos:column="49">==<pos:position pos:line="77" pos:column="51"/></operator> <name pos:line="77" pos:column="52">sock_f_out<pos:position pos:line="77" pos:column="62"/></name> <operator pos:line="77" pos:column="63">&amp;&amp;<pos:position pos:line="77" pos:column="73"/></operator> <name pos:line="77" pos:column="66">io_multiplexing_in<pos:position pos:line="77" pos:column="84"/></name></expr>)<pos:position pos:line="77" pos:column="85"/></condition> <block pos:line="77" pos:column="86">{
				<decl_stmt><decl><type><name pos:line="78" pos:column="33">char<pos:position pos:line="78" pos:column="37"/></name></type> <name><name pos:line="78" pos:column="38">buf<pos:position pos:line="78" pos:column="41"/></name><index pos:line="78" pos:column="41">[<expr><literal type="number" pos:line="78" pos:column="42">1024<pos:position pos:line="78" pos:column="46"/></literal></expr>]<pos:position pos:line="78" pos:column="47"/></index></name></decl>;<pos:position pos:line="78" pos:column="48"/></decl_stmt>
				<expr_stmt><expr><call><name pos:line="79" pos:column="33">set_io_timeout<pos:position pos:line="79" pos:column="47"/></name><argument_list pos:line="79" pos:column="47">(<argument><expr><literal type="number" pos:line="79" pos:column="48">30<pos:position pos:line="79" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="79" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="52"/></expr_stmt>
				<expr_stmt><expr><name pos:line="80" pos:column="33">ignore_timeout<pos:position pos:line="80" pos:column="47"/></name> <operator pos:line="80" pos:column="48">=<pos:position pos:line="80" pos:column="49"/></operator> <literal type="number" pos:line="80" pos:column="50">0<pos:position pos:line="80" pos:column="51"/></literal></expr>;<pos:position pos:line="80" pos:column="52"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="81" pos:column="33">readfd_unbuffered<pos:position pos:line="81" pos:column="50"/></name><argument_list pos:line="81" pos:column="50">(<argument><expr><name pos:line="81" pos:column="51">sock_f_in<pos:position pos:line="81" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="81" pos:column="62">buf<pos:position pos:line="81" pos:column="65"/></name></expr></argument>, <argument><expr><sizeof pos:line="81" pos:column="67">sizeof <name pos:line="81" pos:column="74">buf<pos:position pos:line="81" pos:column="77"/></name></sizeof></expr></argument>)<pos:position pos:line="81" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="79"/></expr_stmt>
			}<pos:position pos:line="82" pos:column="26"/></block></while>
			<expr_stmt><expr><call><name pos:line="83" pos:column="25">exit_cleanup<pos:position pos:line="83" pos:column="37"/></name><argument_list pos:line="83" pos:column="37">(<argument><expr><name pos:line="83" pos:column="38">RERR_STREAMIO<pos:position pos:line="83" pos:column="51"/></name></expr></argument>)<pos:position pos:line="83" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="53"/></expr_stmt>
		}<pos:position pos:line="84" pos:column="18"/></block></then></if>

		<expr_stmt><expr><name pos:line="86" pos:column="17">total<pos:position pos:line="86" pos:column="22"/></name> <operator pos:line="86" pos:column="23">+=<pos:position pos:line="86" pos:column="25"/></operator> <name pos:line="86" pos:column="26">cnt<pos:position pos:line="86" pos:column="29"/></name></expr>;<pos:position pos:line="86" pos:column="30"/></expr_stmt>
		<expr_stmt><expr><name pos:line="87" pos:column="17">defer_forwarding_messages<pos:position pos:line="87" pos:column="42"/></name><operator pos:line="87" pos:column="42">++<pos:position pos:line="87" pos:column="44"/></operator></expr><operator pos:line="87" pos:column="44">,<pos:position pos:line="87" pos:column="45"/></operator> <expr><name pos:line="87" pos:column="46">defer_inc<pos:position pos:line="87" pos:column="55"/></name><operator pos:line="87" pos:column="55">++<pos:position pos:line="87" pos:column="57"/></operator></expr>;<pos:position pos:line="87" pos:column="58"/></expr_stmt>

		<if pos:line="89" pos:column="17">if <condition pos:line="89" pos:column="20">(<expr><name pos:line="89" pos:column="21">fd<pos:position pos:line="89" pos:column="23"/></name> <operator pos:line="89" pos:column="24">==<pos:position pos:line="89" pos:column="26"/></operator> <name pos:line="89" pos:column="27">sock_f_out<pos:position pos:line="89" pos:column="37"/></name></expr>)<pos:position pos:line="89" pos:column="38"/></condition><then pos:line="89" pos:column="38"> <block pos:line="89" pos:column="39">{
			<if pos:line="90" pos:column="25">if <condition pos:line="90" pos:column="28">(<expr><name pos:line="90" pos:column="29">io_timeout<pos:position pos:line="90" pos:column="39"/></name> <operator pos:line="90" pos:column="40">||<pos:position pos:line="90" pos:column="42"/></operator> <name pos:line="90" pos:column="43">am_generator<pos:position pos:line="90" pos:column="55"/></name></expr>)<pos:position pos:line="90" pos:column="56"/></condition><then pos:line="90" pos:column="56">
				<block type="pseudo"><expr_stmt><expr><name pos:line="91" pos:column="33">last_io_out<pos:position pos:line="91" pos:column="44"/></name> <operator pos:line="91" pos:column="45">=<pos:position pos:line="91" pos:column="46"/></operator> <call><name pos:line="91" pos:column="47">time<pos:position pos:line="91" pos:column="51"/></name><argument_list pos:line="91" pos:column="51">(<argument><expr><name pos:line="91" pos:column="52">NULL<pos:position pos:line="91" pos:column="56"/></name></expr></argument>)<pos:position pos:line="91" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="58"/></expr_stmt></block></then></if>
			<expr_stmt><expr><call><name pos:line="92" pos:column="25">sleep_for_bwlimit<pos:position pos:line="92" pos:column="42"/></name><argument_list pos:line="92" pos:column="42">(<argument><expr><name pos:line="92" pos:column="43">cnt<pos:position pos:line="92" pos:column="46"/></name></expr></argument>)<pos:position pos:line="92" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="48"/></expr_stmt>
		}<pos:position pos:line="93" pos:column="18"/></block></then></if>
	}<pos:position pos:line="94" pos:column="10"/></block></while>

	<expr_stmt><expr><name pos:line="96" pos:column="9">no_flush<pos:position pos:line="96" pos:column="17"/></name><operator pos:line="96" pos:column="17">--<pos:position pos:line="96" pos:column="19"/></operator></expr>;<pos:position pos:line="96" pos:column="20"/></expr_stmt>
	<if pos:line="97" pos:column="9">if <condition pos:line="97" pos:column="12">(<expr><name pos:line="97" pos:column="13">keep_defer_forwarding<pos:position pos:line="97" pos:column="34"/></name></expr>)<pos:position pos:line="97" pos:column="35"/></condition><then pos:line="97" pos:column="35">
		<block type="pseudo"><expr_stmt><expr><name pos:line="98" pos:column="17">defer_inc<pos:position pos:line="98" pos:column="26"/></name><operator pos:line="98" pos:column="26">--<pos:position pos:line="98" pos:column="28"/></operator></expr>;<pos:position pos:line="98" pos:column="29"/></expr_stmt></block></then></if>
	<if pos:line="99" pos:column="9">if <condition pos:line="99" pos:column="12">(<expr><operator pos:line="99" pos:column="13">!<pos:position pos:line="99" pos:column="14"/></operator><operator pos:line="99" pos:column="14">(<pos:position pos:line="99" pos:column="15"/></operator><name pos:line="99" pos:column="15">defer_forwarding_messages<pos:position pos:line="99" pos:column="40"/></name> <operator pos:line="99" pos:column="41">-=<pos:position pos:line="99" pos:column="43"/></operator> <name pos:line="99" pos:column="44">defer_inc<pos:position pos:line="99" pos:column="53"/></name><operator pos:line="99" pos:column="53">)<pos:position pos:line="99" pos:column="54"/></operator> <operator pos:line="99" pos:column="55">&amp;&amp;<pos:position pos:line="99" pos:column="65"/></operator> <operator pos:line="99" pos:column="58">!<pos:position pos:line="99" pos:column="59"/></operator><name pos:line="99" pos:column="59">no_flush<pos:position pos:line="99" pos:column="67"/></name></expr>)<pos:position pos:line="99" pos:column="68"/></condition><then pos:line="99" pos:column="68">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="100" pos:column="17">msg_flush<pos:position pos:line="100" pos:column="26"/></name><argument_list pos:line="100" pos:column="26">()<pos:position pos:line="100" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="100" pos:column="29"/></expr_stmt></block></then></if>
}<pos:position pos:line="101" pos:column="2"/></block></function></unit>
