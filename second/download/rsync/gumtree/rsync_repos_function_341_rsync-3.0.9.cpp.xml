<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_341_rsync-3.0.9.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">copy_file<pos:position pos:line="1" pos:column="14"/></name><parameter_list pos:line="1" pos:column="14">(<parameter><decl><type><specifier pos:line="1" pos:column="15">const<pos:position pos:line="1" pos:column="20"/></specifier> <name pos:line="1" pos:column="21">char<pos:position pos:line="1" pos:column="25"/></name> <modifier pos:line="1" pos:column="26">*<pos:position pos:line="1" pos:column="27"/></modifier></type><name pos:line="1" pos:column="27">source<pos:position pos:line="1" pos:column="33"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="35">const<pos:position pos:line="1" pos:column="40"/></specifier> <name pos:line="1" pos:column="41">char<pos:position pos:line="1" pos:column="45"/></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">dest<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="53">int<pos:position pos:line="1" pos:column="56"/></name></type> <name pos:line="1" pos:column="57">ofd<pos:position pos:line="1" pos:column="60"/></name></decl></parameter>,
	      <parameter><decl><type><name pos:line="2" pos:column="15">mode_t<pos:position pos:line="2" pos:column="21"/></name></type> <name pos:line="2" pos:column="22">mode<pos:position pos:line="2" pos:column="26"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="28">int<pos:position pos:line="2" pos:column="31"/></name></type> <name pos:line="2" pos:column="32">create_bak_dir<pos:position pos:line="2" pos:column="46"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="47"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">ifd<pos:position pos:line="4" pos:column="16"/></name></decl>;<pos:position pos:line="4" pos:column="17"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">char<pos:position pos:line="5" pos:column="13"/></name></type> <name><name pos:line="5" pos:column="14">buf<pos:position pos:line="5" pos:column="17"/></name><index pos:line="5" pos:column="17">[<expr><literal type="number" pos:line="5" pos:column="18">1024<pos:position pos:line="5" pos:column="22"/></literal> <operator pos:line="5" pos:column="23">*<pos:position pos:line="5" pos:column="24"/></operator> <literal type="number" pos:line="5" pos:column="25">8<pos:position pos:line="5" pos:column="26"/></literal></expr>]<pos:position pos:line="5" pos:column="27"/></index></name></decl>;<pos:position pos:line="5" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">len<pos:position pos:line="6" pos:column="16"/></name></decl>;<pos:position pos:line="6" pos:column="17"/></decl_stmt>   <comment type="block" pos:line="6" pos:column="20">/* Number of bytes read into `buf'. */</comment>

	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><operator pos:line="8" pos:column="13">(<pos:position pos:line="8" pos:column="14"/></operator><name pos:line="8" pos:column="14">ifd<pos:position pos:line="8" pos:column="17"/></name> <operator pos:line="8" pos:column="18">=<pos:position pos:line="8" pos:column="19"/></operator> <call><name pos:line="8" pos:column="20">do_open<pos:position pos:line="8" pos:column="27"/></name><argument_list pos:line="8" pos:column="27">(<argument><expr><name pos:line="8" pos:column="28">source<pos:position pos:line="8" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="36">O_RDONLY<pos:position pos:line="8" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="8" pos:column="46">0<pos:position pos:line="8" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="48"/></argument_list></call><operator pos:line="8" pos:column="48">)<pos:position pos:line="8" pos:column="49"/></operator> <operator pos:line="8" pos:column="50">&lt;<pos:position pos:line="8" pos:column="54"/></operator> <literal type="number" pos:line="8" pos:column="52">0<pos:position pos:line="8" pos:column="53"/></literal></expr>)<pos:position pos:line="8" pos:column="54"/></condition><then pos:line="8" pos:column="54"> <block pos:line="8" pos:column="55">{
		<decl_stmt><decl><type><name pos:line="9" pos:column="17">int<pos:position pos:line="9" pos:column="20"/></name></type> <name pos:line="9" pos:column="21">save_errno<pos:position pos:line="9" pos:column="31"/></name> <init pos:line="9" pos:column="32">= <expr><name pos:line="9" pos:column="34">errno<pos:position pos:line="9" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="9" pos:column="40"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="10" pos:column="17">rsyserr<pos:position pos:line="10" pos:column="24"/></name><argument_list pos:line="10" pos:column="24">(<argument><expr><name pos:line="10" pos:column="25">FERROR_XFER<pos:position pos:line="10" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="38">errno<pos:position pos:line="10" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="10" pos:column="45">"open %s"<pos:position pos:line="10" pos:column="54"/></literal></expr></argument>, <argument><expr><call><name pos:line="10" pos:column="56">full_fname<pos:position pos:line="10" pos:column="66"/></name><argument_list pos:line="10" pos:column="66">(<argument><expr><name pos:line="10" pos:column="67">source<pos:position pos:line="10" pos:column="73"/></name></expr></argument>)<pos:position pos:line="10" pos:column="74"/></argument_list></call></expr></argument>)<pos:position pos:line="10" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="76"/></expr_stmt>
		<expr_stmt><expr><name pos:line="11" pos:column="17">errno<pos:position pos:line="11" pos:column="22"/></name> <operator pos:line="11" pos:column="23">=<pos:position pos:line="11" pos:column="24"/></operator> <name pos:line="11" pos:column="25">save_errno<pos:position pos:line="11" pos:column="35"/></name></expr>;<pos:position pos:line="11" pos:column="36"/></expr_stmt>
		<return pos:line="12" pos:column="17">return <expr><operator pos:line="12" pos:column="24">-<pos:position pos:line="12" pos:column="25"/></operator><literal type="number" pos:line="12" pos:column="25">1<pos:position pos:line="12" pos:column="26"/></literal></expr>;<pos:position pos:line="12" pos:column="27"/></return>
	}<pos:position pos:line="13" pos:column="10"/></block></then></if>

	<if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><name pos:line="15" pos:column="13">ofd<pos:position pos:line="15" pos:column="16"/></name> <operator pos:line="15" pos:column="17">&lt;<pos:position pos:line="15" pos:column="21"/></operator> <literal type="number" pos:line="15" pos:column="19">0<pos:position pos:line="15" pos:column="20"/></literal></expr>)<pos:position pos:line="15" pos:column="21"/></condition><then pos:line="15" pos:column="21"> <block pos:line="15" pos:column="22">{
		<if pos:line="16" pos:column="17">if <condition pos:line="16" pos:column="20">(<expr><call><name pos:line="16" pos:column="21">robust_unlink<pos:position pos:line="16" pos:column="34"/></name><argument_list pos:line="16" pos:column="34">(<argument><expr><name pos:line="16" pos:column="35">dest<pos:position pos:line="16" pos:column="39"/></name></expr></argument>)<pos:position pos:line="16" pos:column="40"/></argument_list></call> <operator pos:line="16" pos:column="41">&amp;&amp;<pos:position pos:line="16" pos:column="51"/></operator> <name pos:line="16" pos:column="44">errno<pos:position pos:line="16" pos:column="49"/></name> <operator pos:line="16" pos:column="50">!=<pos:position pos:line="16" pos:column="52"/></operator> <name pos:line="16" pos:column="53">ENOENT<pos:position pos:line="16" pos:column="59"/></name></expr>)<pos:position pos:line="16" pos:column="60"/></condition><then pos:line="16" pos:column="60"> <block pos:line="16" pos:column="61">{
			<decl_stmt><decl><type><name pos:line="17" pos:column="25">int<pos:position pos:line="17" pos:column="28"/></name></type> <name pos:line="17" pos:column="29">save_errno<pos:position pos:line="17" pos:column="39"/></name> <init pos:line="17" pos:column="40">= <expr><name pos:line="17" pos:column="42">errno<pos:position pos:line="17" pos:column="47"/></name></expr></init></decl>;<pos:position pos:line="17" pos:column="48"/></decl_stmt>
			<expr_stmt><expr><call><name pos:line="18" pos:column="25">rsyserr<pos:position pos:line="18" pos:column="32"/></name><argument_list pos:line="18" pos:column="32">(<argument><expr><name pos:line="18" pos:column="33">FERROR_XFER<pos:position pos:line="18" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="46">errno<pos:position pos:line="18" pos:column="51"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="18" pos:column="53">"unlink %s"<pos:position pos:line="18" pos:column="64"/></literal></expr></argument>, <argument><expr><call><name pos:line="18" pos:column="66">full_fname<pos:position pos:line="18" pos:column="76"/></name><argument_list pos:line="18" pos:column="76">(<argument><expr><name pos:line="18" pos:column="77">dest<pos:position pos:line="18" pos:column="81"/></name></expr></argument>)<pos:position pos:line="18" pos:column="82"/></argument_list></call></expr></argument>)<pos:position pos:line="18" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="84"/></expr_stmt>
			<expr_stmt><expr><name pos:line="19" pos:column="25">errno<pos:position pos:line="19" pos:column="30"/></name> <operator pos:line="19" pos:column="31">=<pos:position pos:line="19" pos:column="32"/></operator> <name pos:line="19" pos:column="33">save_errno<pos:position pos:line="19" pos:column="43"/></name></expr>;<pos:position pos:line="19" pos:column="44"/></expr_stmt>
			<return pos:line="20" pos:column="25">return <expr><operator pos:line="20" pos:column="32">-<pos:position pos:line="20" pos:column="33"/></operator><literal type="number" pos:line="20" pos:column="33">1<pos:position pos:line="20" pos:column="34"/></literal></expr>;<pos:position pos:line="20" pos:column="35"/></return>
		}<pos:position pos:line="21" pos:column="18"/></block></then></if>

		<if pos:line="23" pos:column="17">if <condition pos:line="23" pos:column="20">(<expr><operator pos:line="23" pos:column="21">(<pos:position pos:line="23" pos:column="22"/></operator><name pos:line="23" pos:column="22">ofd<pos:position pos:line="23" pos:column="25"/></name> <operator pos:line="23" pos:column="26">=<pos:position pos:line="23" pos:column="27"/></operator> <call><name pos:line="23" pos:column="28">do_open<pos:position pos:line="23" pos:column="35"/></name><argument_list pos:line="23" pos:column="35">(<argument><expr><name pos:line="23" pos:column="36">dest<pos:position pos:line="23" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="42">O_WRONLY<pos:position pos:line="23" pos:column="50"/></name> <operator pos:line="23" pos:column="51">|<pos:position pos:line="23" pos:column="52"/></operator> <name pos:line="23" pos:column="53">O_CREAT<pos:position pos:line="23" pos:column="60"/></name> <operator pos:line="23" pos:column="61">|<pos:position pos:line="23" pos:column="62"/></operator> <name pos:line="23" pos:column="63">O_TRUNC<pos:position pos:line="23" pos:column="70"/></name> <operator pos:line="23" pos:column="71">|<pos:position pos:line="23" pos:column="72"/></operator> <name pos:line="23" pos:column="73">O_EXCL<pos:position pos:line="23" pos:column="79"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="81">mode<pos:position pos:line="23" pos:column="85"/></name></expr></argument>)<pos:position pos:line="23" pos:column="86"/></argument_list></call><operator pos:line="23" pos:column="86">)<pos:position pos:line="23" pos:column="87"/></operator> <operator pos:line="23" pos:column="88">&lt;<pos:position pos:line="23" pos:column="92"/></operator> <literal type="number" pos:line="23" pos:column="90">0<pos:position pos:line="23" pos:column="91"/></literal></expr>)<pos:position pos:line="23" pos:column="92"/></condition><then pos:line="23" pos:column="92"> <block pos:line="23" pos:column="93">{
			<decl_stmt><decl><type><name pos:line="24" pos:column="25">int<pos:position pos:line="24" pos:column="28"/></name></type> <name pos:line="24" pos:column="29">save_errno<pos:position pos:line="24" pos:column="39"/></name> <init pos:line="24" pos:column="40">= <expr><ternary><condition><expr><name pos:line="24" pos:column="42">errno<pos:position pos:line="24" pos:column="47"/></name></expr> ?<pos:position pos:line="24" pos:column="49"/></condition><then pos:line="24" pos:column="49"> <expr><name pos:line="24" pos:column="50">errno<pos:position pos:line="24" pos:column="55"/></name></expr> <pos:position pos:line="24" pos:column="56"/></then><else pos:line="24" pos:column="56">: <expr><name pos:line="24" pos:column="58">EINVAL<pos:position pos:line="24" pos:column="64"/></name></expr></else></ternary></expr></init></decl>;<pos:position pos:line="24" pos:column="65"/></decl_stmt> <comment type="block" pos:line="24" pos:column="66">/* 0 paranoia */</comment>
			<if pos:line="25" pos:column="25">if <condition pos:line="25" pos:column="28">(<expr><name pos:line="25" pos:column="29">create_bak_dir<pos:position pos:line="25" pos:column="43"/></name> <operator pos:line="25" pos:column="44">&amp;&amp;<pos:position pos:line="25" pos:column="54"/></operator> <name pos:line="25" pos:column="47">errno<pos:position pos:line="25" pos:column="52"/></name> <operator pos:line="25" pos:column="53">==<pos:position pos:line="25" pos:column="55"/></operator> <name pos:line="25" pos:column="56">ENOENT<pos:position pos:line="25" pos:column="62"/></name> <operator pos:line="25" pos:column="63">&amp;&amp;<pos:position pos:line="25" pos:column="73"/></operator> <call><name pos:line="25" pos:column="66">make_bak_dir<pos:position pos:line="25" pos:column="78"/></name><argument_list pos:line="25" pos:column="78">(<argument><expr><name pos:line="25" pos:column="79">dest<pos:position pos:line="25" pos:column="83"/></name></expr></argument>)<pos:position pos:line="25" pos:column="84"/></argument_list></call> <operator pos:line="25" pos:column="85">==<pos:position pos:line="25" pos:column="87"/></operator> <literal type="number" pos:line="25" pos:column="88">0<pos:position pos:line="25" pos:column="89"/></literal></expr>)<pos:position pos:line="25" pos:column="90"/></condition><then pos:line="25" pos:column="90"> <block pos:line="25" pos:column="91">{
				<if pos:line="26" pos:column="33">if <condition pos:line="26" pos:column="36">(<expr><operator pos:line="26" pos:column="37">(<pos:position pos:line="26" pos:column="38"/></operator><name pos:line="26" pos:column="38">ofd<pos:position pos:line="26" pos:column="41"/></name> <operator pos:line="26" pos:column="42">=<pos:position pos:line="26" pos:column="43"/></operator> <call><name pos:line="26" pos:column="44">do_open<pos:position pos:line="26" pos:column="51"/></name><argument_list pos:line="26" pos:column="51">(<argument><expr><name pos:line="26" pos:column="52">dest<pos:position pos:line="26" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="58">O_WRONLY<pos:position pos:line="26" pos:column="66"/></name> <operator pos:line="26" pos:column="67">|<pos:position pos:line="26" pos:column="68"/></operator> <name pos:line="26" pos:column="69">O_CREAT<pos:position pos:line="26" pos:column="76"/></name> <operator pos:line="26" pos:column="77">|<pos:position pos:line="26" pos:column="78"/></operator> <name pos:line="26" pos:column="79">O_TRUNC<pos:position pos:line="26" pos:column="86"/></name> <operator pos:line="26" pos:column="87">|<pos:position pos:line="26" pos:column="88"/></operator> <name pos:line="26" pos:column="89">O_EXCL<pos:position pos:line="26" pos:column="95"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="97">mode<pos:position pos:line="26" pos:column="101"/></name></expr></argument>)<pos:position pos:line="26" pos:column="102"/></argument_list></call><operator pos:line="26" pos:column="102">)<pos:position pos:line="26" pos:column="103"/></operator> <operator pos:line="26" pos:column="104">&lt;<pos:position pos:line="26" pos:column="108"/></operator> <literal type="number" pos:line="26" pos:column="106">0<pos:position pos:line="26" pos:column="107"/></literal></expr>)<pos:position pos:line="26" pos:column="108"/></condition><then pos:line="26" pos:column="108">
					<block type="pseudo"><expr_stmt><expr><name pos:line="27" pos:column="41">save_errno<pos:position pos:line="27" pos:column="51"/></name> <operator pos:line="27" pos:column="52">=<pos:position pos:line="27" pos:column="53"/></operator> <ternary><condition><expr><name pos:line="27" pos:column="54">errno<pos:position pos:line="27" pos:column="59"/></name></expr> ?<pos:position pos:line="27" pos:column="61"/></condition><then pos:line="27" pos:column="61"> <expr><name pos:line="27" pos:column="62">errno<pos:position pos:line="27" pos:column="67"/></name></expr> <pos:position pos:line="27" pos:column="68"/></then><else pos:line="27" pos:column="68">: <expr><name pos:line="27" pos:column="70">save_errno<pos:position pos:line="27" pos:column="80"/></name></expr></else></ternary></expr>;<pos:position pos:line="27" pos:column="81"/></expr_stmt></block></then>
				<else pos:line="28" pos:column="33">else
					<block type="pseudo"><expr_stmt><expr><name pos:line="29" pos:column="41">save_errno<pos:position pos:line="29" pos:column="51"/></name> <operator pos:line="29" pos:column="52">=<pos:position pos:line="29" pos:column="53"/></operator> <literal type="number" pos:line="29" pos:column="54">0<pos:position pos:line="29" pos:column="55"/></literal></expr>;<pos:position pos:line="29" pos:column="56"/></expr_stmt></block></else></if>
			}<pos:position pos:line="30" pos:column="26"/></block></then></if>
			<if pos:line="31" pos:column="25">if <condition pos:line="31" pos:column="28">(<expr><name pos:line="31" pos:column="29">save_errno<pos:position pos:line="31" pos:column="39"/></name></expr>)<pos:position pos:line="31" pos:column="40"/></condition><then pos:line="31" pos:column="40"> <block pos:line="31" pos:column="41">{
				<expr_stmt><expr><call><name pos:line="32" pos:column="33">rsyserr<pos:position pos:line="32" pos:column="40"/></name><argument_list pos:line="32" pos:column="40">(<argument><expr><name pos:line="32" pos:column="41">FERROR_XFER<pos:position pos:line="32" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="54">save_errno<pos:position pos:line="32" pos:column="64"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="32" pos:column="66">"open %s"<pos:position pos:line="32" pos:column="75"/></literal></expr></argument>, <argument><expr><call><name pos:line="32" pos:column="77">full_fname<pos:position pos:line="32" pos:column="87"/></name><argument_list pos:line="32" pos:column="87">(<argument><expr><name pos:line="32" pos:column="88">dest<pos:position pos:line="32" pos:column="92"/></name></expr></argument>)<pos:position pos:line="32" pos:column="93"/></argument_list></call></expr></argument>)<pos:position pos:line="32" pos:column="94"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="95"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="33" pos:column="33">close<pos:position pos:line="33" pos:column="38"/></name><argument_list pos:line="33" pos:column="38">(<argument><expr><name pos:line="33" pos:column="39">ifd<pos:position pos:line="33" pos:column="42"/></name></expr></argument>)<pos:position pos:line="33" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="44"/></expr_stmt>
				<expr_stmt><expr><name pos:line="34" pos:column="33">errno<pos:position pos:line="34" pos:column="38"/></name> <operator pos:line="34" pos:column="39">=<pos:position pos:line="34" pos:column="40"/></operator> <name pos:line="34" pos:column="41">save_errno<pos:position pos:line="34" pos:column="51"/></name></expr>;<pos:position pos:line="34" pos:column="52"/></expr_stmt>
				<return pos:line="35" pos:column="33">return <expr><operator pos:line="35" pos:column="40">-<pos:position pos:line="35" pos:column="41"/></operator><literal type="number" pos:line="35" pos:column="41">1<pos:position pos:line="35" pos:column="42"/></literal></expr>;<pos:position pos:line="35" pos:column="43"/></return>
			}<pos:position pos:line="36" pos:column="26"/></block></then></if>
		}<pos:position pos:line="37" pos:column="18"/></block></then></if>
	}<pos:position pos:line="38" pos:column="10"/></block></then></if>

	<while pos:line="40" pos:column="9">while <condition pos:line="40" pos:column="15">(<expr><operator pos:line="40" pos:column="16">(<pos:position pos:line="40" pos:column="17"/></operator><name pos:line="40" pos:column="17">len<pos:position pos:line="40" pos:column="20"/></name> <operator pos:line="40" pos:column="21">=<pos:position pos:line="40" pos:column="22"/></operator> <call><name pos:line="40" pos:column="23">safe_read<pos:position pos:line="40" pos:column="32"/></name><argument_list pos:line="40" pos:column="32">(<argument><expr><name pos:line="40" pos:column="33">ifd<pos:position pos:line="40" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="38">buf<pos:position pos:line="40" pos:column="41"/></name></expr></argument>, <argument><expr><sizeof pos:line="40" pos:column="43">sizeof <name pos:line="40" pos:column="50">buf<pos:position pos:line="40" pos:column="53"/></name></sizeof></expr></argument>)<pos:position pos:line="40" pos:column="54"/></argument_list></call><operator pos:line="40" pos:column="54">)<pos:position pos:line="40" pos:column="55"/></operator> <operator pos:line="40" pos:column="56">&gt;<pos:position pos:line="40" pos:column="60"/></operator> <literal type="number" pos:line="40" pos:column="58">0<pos:position pos:line="40" pos:column="59"/></literal></expr>)<pos:position pos:line="40" pos:column="60"/></condition> <block pos:line="40" pos:column="61">{
		<if pos:line="41" pos:column="17">if <condition pos:line="41" pos:column="20">(<expr><call><name pos:line="41" pos:column="21">full_write<pos:position pos:line="41" pos:column="31"/></name><argument_list pos:line="41" pos:column="31">(<argument><expr><name pos:line="41" pos:column="32">ofd<pos:position pos:line="41" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="37">buf<pos:position pos:line="41" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="42">len<pos:position pos:line="41" pos:column="45"/></name></expr></argument>)<pos:position pos:line="41" pos:column="46"/></argument_list></call> <operator pos:line="41" pos:column="47">&lt;<pos:position pos:line="41" pos:column="51"/></operator> <literal type="number" pos:line="41" pos:column="49">0<pos:position pos:line="41" pos:column="50"/></literal></expr>)<pos:position pos:line="41" pos:column="51"/></condition><then pos:line="41" pos:column="51"> <block pos:line="41" pos:column="52">{
			<decl_stmt><decl><type><name pos:line="42" pos:column="25">int<pos:position pos:line="42" pos:column="28"/></name></type> <name pos:line="42" pos:column="29">save_errno<pos:position pos:line="42" pos:column="39"/></name> <init pos:line="42" pos:column="40">= <expr><name pos:line="42" pos:column="42">errno<pos:position pos:line="42" pos:column="47"/></name></expr></init></decl>;<pos:position pos:line="42" pos:column="48"/></decl_stmt>
			<expr_stmt><expr><call><name pos:line="43" pos:column="25">rsyserr<pos:position pos:line="43" pos:column="32"/></name><argument_list pos:line="43" pos:column="32">(<argument><expr><name pos:line="43" pos:column="33">FERROR_XFER<pos:position pos:line="43" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="46">errno<pos:position pos:line="43" pos:column="51"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="43" pos:column="53">"write %s"<pos:position pos:line="43" pos:column="63"/></literal></expr></argument>, <argument><expr><call><name pos:line="43" pos:column="65">full_fname<pos:position pos:line="43" pos:column="75"/></name><argument_list pos:line="43" pos:column="75">(<argument><expr><name pos:line="43" pos:column="76">dest<pos:position pos:line="43" pos:column="80"/></name></expr></argument>)<pos:position pos:line="43" pos:column="81"/></argument_list></call></expr></argument>)<pos:position pos:line="43" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="83"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="44" pos:column="25">close<pos:position pos:line="44" pos:column="30"/></name><argument_list pos:line="44" pos:column="30">(<argument><expr><name pos:line="44" pos:column="31">ifd<pos:position pos:line="44" pos:column="34"/></name></expr></argument>)<pos:position pos:line="44" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="36"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="45" pos:column="25">close<pos:position pos:line="45" pos:column="30"/></name><argument_list pos:line="45" pos:column="30">(<argument><expr><name pos:line="45" pos:column="31">ofd<pos:position pos:line="45" pos:column="34"/></name></expr></argument>)<pos:position pos:line="45" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="36"/></expr_stmt>
			<expr_stmt><expr><name pos:line="46" pos:column="25">errno<pos:position pos:line="46" pos:column="30"/></name> <operator pos:line="46" pos:column="31">=<pos:position pos:line="46" pos:column="32"/></operator> <name pos:line="46" pos:column="33">save_errno<pos:position pos:line="46" pos:column="43"/></name></expr>;<pos:position pos:line="46" pos:column="44"/></expr_stmt>
			<return pos:line="47" pos:column="25">return <expr><operator pos:line="47" pos:column="32">-<pos:position pos:line="47" pos:column="33"/></operator><literal type="number" pos:line="47" pos:column="33">1<pos:position pos:line="47" pos:column="34"/></literal></expr>;<pos:position pos:line="47" pos:column="35"/></return>
		}<pos:position pos:line="48" pos:column="18"/></block></then></if>
	}<pos:position pos:line="49" pos:column="10"/></block></while>

	<if pos:line="51" pos:column="9">if <condition pos:line="51" pos:column="12">(<expr><name pos:line="51" pos:column="13">len<pos:position pos:line="51" pos:column="16"/></name> <operator pos:line="51" pos:column="17">&lt;<pos:position pos:line="51" pos:column="21"/></operator> <literal type="number" pos:line="51" pos:column="19">0<pos:position pos:line="51" pos:column="20"/></literal></expr>)<pos:position pos:line="51" pos:column="21"/></condition><then pos:line="51" pos:column="21"> <block pos:line="51" pos:column="22">{
		<decl_stmt><decl><type><name pos:line="52" pos:column="17">int<pos:position pos:line="52" pos:column="20"/></name></type> <name pos:line="52" pos:column="21">save_errno<pos:position pos:line="52" pos:column="31"/></name> <init pos:line="52" pos:column="32">= <expr><name pos:line="52" pos:column="34">errno<pos:position pos:line="52" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="52" pos:column="40"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="53" pos:column="17">rsyserr<pos:position pos:line="53" pos:column="24"/></name><argument_list pos:line="53" pos:column="24">(<argument><expr><name pos:line="53" pos:column="25">FERROR_XFER<pos:position pos:line="53" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="38">errno<pos:position pos:line="53" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="53" pos:column="45">"read %s"<pos:position pos:line="53" pos:column="54"/></literal></expr></argument>, <argument><expr><call><name pos:line="53" pos:column="56">full_fname<pos:position pos:line="53" pos:column="66"/></name><argument_list pos:line="53" pos:column="66">(<argument><expr><name pos:line="53" pos:column="67">source<pos:position pos:line="53" pos:column="73"/></name></expr></argument>)<pos:position pos:line="53" pos:column="74"/></argument_list></call></expr></argument>)<pos:position pos:line="53" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="76"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="54" pos:column="17">close<pos:position pos:line="54" pos:column="22"/></name><argument_list pos:line="54" pos:column="22">(<argument><expr><name pos:line="54" pos:column="23">ifd<pos:position pos:line="54" pos:column="26"/></name></expr></argument>)<pos:position pos:line="54" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="28"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="55" pos:column="17">close<pos:position pos:line="55" pos:column="22"/></name><argument_list pos:line="55" pos:column="22">(<argument><expr><name pos:line="55" pos:column="23">ofd<pos:position pos:line="55" pos:column="26"/></name></expr></argument>)<pos:position pos:line="55" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="28"/></expr_stmt>
		<expr_stmt><expr><name pos:line="56" pos:column="17">errno<pos:position pos:line="56" pos:column="22"/></name> <operator pos:line="56" pos:column="23">=<pos:position pos:line="56" pos:column="24"/></operator> <name pos:line="56" pos:column="25">save_errno<pos:position pos:line="56" pos:column="35"/></name></expr>;<pos:position pos:line="56" pos:column="36"/></expr_stmt>
		<return pos:line="57" pos:column="17">return <expr><operator pos:line="57" pos:column="24">-<pos:position pos:line="57" pos:column="25"/></operator><literal type="number" pos:line="57" pos:column="25">1<pos:position pos:line="57" pos:column="26"/></literal></expr>;<pos:position pos:line="57" pos:column="27"/></return>
	}<pos:position pos:line="58" pos:column="10"/></block></then></if>

	<if pos:line="60" pos:column="9">if <condition pos:line="60" pos:column="12">(<expr><call><name pos:line="60" pos:column="13">close<pos:position pos:line="60" pos:column="18"/></name><argument_list pos:line="60" pos:column="18">(<argument><expr><name pos:line="60" pos:column="19">ifd<pos:position pos:line="60" pos:column="22"/></name></expr></argument>)<pos:position pos:line="60" pos:column="23"/></argument_list></call> <operator pos:line="60" pos:column="24">&lt;<pos:position pos:line="60" pos:column="28"/></operator> <literal type="number" pos:line="60" pos:column="26">0<pos:position pos:line="60" pos:column="27"/></literal></expr>)<pos:position pos:line="60" pos:column="28"/></condition><then pos:line="60" pos:column="28"> <block pos:line="60" pos:column="29">{
		<expr_stmt><expr><call><name pos:line="61" pos:column="17">rsyserr<pos:position pos:line="61" pos:column="24"/></name><argument_list pos:line="61" pos:column="24">(<argument><expr><name pos:line="61" pos:column="25">FWARNING<pos:position pos:line="61" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="35">errno<pos:position pos:line="61" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="61" pos:column="42">"close failed on %s"<pos:position pos:line="61" pos:column="62"/></literal></expr></argument>,
			<argument><expr><call><name pos:line="62" pos:column="25">full_fname<pos:position pos:line="62" pos:column="35"/></name><argument_list pos:line="62" pos:column="35">(<argument><expr><name pos:line="62" pos:column="36">source<pos:position pos:line="62" pos:column="42"/></name></expr></argument>)<pos:position pos:line="62" pos:column="43"/></argument_list></call></expr></argument>)<pos:position pos:line="62" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="45"/></expr_stmt>
	}<pos:position pos:line="63" pos:column="10"/></block></then></if>

	<if pos:line="65" pos:column="9">if <condition pos:line="65" pos:column="12">(<expr><call><name pos:line="65" pos:column="13">close<pos:position pos:line="65" pos:column="18"/></name><argument_list pos:line="65" pos:column="18">(<argument><expr><name pos:line="65" pos:column="19">ofd<pos:position pos:line="65" pos:column="22"/></name></expr></argument>)<pos:position pos:line="65" pos:column="23"/></argument_list></call> <operator pos:line="65" pos:column="24">&lt;<pos:position pos:line="65" pos:column="28"/></operator> <literal type="number" pos:line="65" pos:column="26">0<pos:position pos:line="65" pos:column="27"/></literal></expr>)<pos:position pos:line="65" pos:column="28"/></condition><then pos:line="65" pos:column="28"> <block pos:line="65" pos:column="29">{
		<decl_stmt><decl><type><name pos:line="66" pos:column="17">int<pos:position pos:line="66" pos:column="20"/></name></type> <name pos:line="66" pos:column="21">save_errno<pos:position pos:line="66" pos:column="31"/></name> <init pos:line="66" pos:column="32">= <expr><name pos:line="66" pos:column="34">errno<pos:position pos:line="66" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="66" pos:column="40"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="67" pos:column="17">rsyserr<pos:position pos:line="67" pos:column="24"/></name><argument_list pos:line="67" pos:column="24">(<argument><expr><name pos:line="67" pos:column="25">FERROR_XFER<pos:position pos:line="67" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="67" pos:column="38">errno<pos:position pos:line="67" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="67" pos:column="45">"close failed on %s"<pos:position pos:line="67" pos:column="65"/></literal></expr></argument>,
			<argument><expr><call><name pos:line="68" pos:column="25">full_fname<pos:position pos:line="68" pos:column="35"/></name><argument_list pos:line="68" pos:column="35">(<argument><expr><name pos:line="68" pos:column="36">dest<pos:position pos:line="68" pos:column="40"/></name></expr></argument>)<pos:position pos:line="68" pos:column="41"/></argument_list></call></expr></argument>)<pos:position pos:line="68" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="43"/></expr_stmt>
		<expr_stmt><expr><name pos:line="69" pos:column="17">errno<pos:position pos:line="69" pos:column="22"/></name> <operator pos:line="69" pos:column="23">=<pos:position pos:line="69" pos:column="24"/></operator> <name pos:line="69" pos:column="25">save_errno<pos:position pos:line="69" pos:column="35"/></name></expr>;<pos:position pos:line="69" pos:column="36"/></expr_stmt>
		<return pos:line="70" pos:column="17">return <expr><operator pos:line="70" pos:column="24">-<pos:position pos:line="70" pos:column="25"/></operator><literal type="number" pos:line="70" pos:column="25">1<pos:position pos:line="70" pos:column="26"/></literal></expr>;<pos:position pos:line="70" pos:column="27"/></return>
	}<pos:position pos:line="71" pos:column="10"/></block></then></if>

<cpp:ifdef pos:line="73" pos:column="1">#<cpp:directive pos:line="73" pos:column="2">ifdef<pos:position pos:line="73" pos:column="7"/></cpp:directive> <name pos:line="73" pos:column="8">SUPPORT_XATTRS<pos:position pos:line="73" pos:column="22"/></name></cpp:ifdef>
	<if pos:line="74" pos:column="9">if <condition pos:line="74" pos:column="12">(<expr><name pos:line="74" pos:column="13">preserve_xattrs<pos:position pos:line="74" pos:column="28"/></name></expr>)<pos:position pos:line="74" pos:column="29"/></condition><then pos:line="74" pos:column="29">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="75" pos:column="17">copy_xattrs<pos:position pos:line="75" pos:column="28"/></name><argument_list pos:line="75" pos:column="28">(<argument><expr><name pos:line="75" pos:column="29">source<pos:position pos:line="75" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="75" pos:column="37">dest<pos:position pos:line="75" pos:column="41"/></name></expr></argument>)<pos:position pos:line="75" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="43"/></expr_stmt></block></then></if>
<cpp:endif pos:line="76" pos:column="1">#<cpp:directive pos:line="76" pos:column="2">endif<pos:position pos:line="76" pos:column="7"/></cpp:directive></cpp:endif>

	<return pos:line="78" pos:column="9">return <expr><literal type="number" pos:line="78" pos:column="16">0<pos:position pos:line="78" pos:column="17"/></literal></expr>;<pos:position pos:line="78" pos:column="18"/></return>
}<pos:position pos:line="79" pos:column="2"/></block></function></unit>
