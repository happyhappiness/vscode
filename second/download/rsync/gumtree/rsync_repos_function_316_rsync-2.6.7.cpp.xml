<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_316_rsync-2.6.7.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">sum_end<pos:position pos:line="1" pos:column="13"/></name><parameter_list pos:line="1" pos:column="13">(<parameter><decl><type><name pos:line="1" pos:column="14">char<pos:position pos:line="1" pos:column="18"/></name> <modifier pos:line="1" pos:column="19">*<pos:position pos:line="1" pos:column="20"/></modifier></type><name pos:line="1" pos:column="20">sum<pos:position pos:line="1" pos:column="23"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="24"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<if pos:line="3" pos:column="9">if <condition pos:line="3" pos:column="12">(<expr><name pos:line="3" pos:column="13">sumresidue<pos:position pos:line="3" pos:column="23"/></name> <operator pos:line="3" pos:column="24">||<pos:position pos:line="3" pos:column="26"/></operator> <name pos:line="3" pos:column="27">protocol_version<pos:position pos:line="3" pos:column="43"/></name> <operator pos:line="3" pos:column="44">&gt;=<pos:position pos:line="3" pos:column="49"/></operator> <literal type="number" pos:line="3" pos:column="47">27<pos:position pos:line="3" pos:column="49"/></literal></expr>)<pos:position pos:line="3" pos:column="50"/></condition><then pos:line="3" pos:column="50">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="4" pos:column="17">mdfour_update<pos:position pos:line="4" pos:column="30"/></name><argument_list pos:line="4" pos:column="30">(<argument><expr><operator pos:line="4" pos:column="31">&amp;<pos:position pos:line="4" pos:column="36"/></operator><name pos:line="4" pos:column="32">md<pos:position pos:line="4" pos:column="34"/></name></expr></argument>, <argument><expr><operator pos:line="4" pos:column="36">(<pos:position pos:line="4" pos:column="37"/></operator><name pos:line="4" pos:column="37">uchar<pos:position pos:line="4" pos:column="42"/></name> <operator pos:line="4" pos:column="43">*<pos:position pos:line="4" pos:column="44"/></operator><operator pos:line="4" pos:column="44">)<pos:position pos:line="4" pos:column="45"/></operator><name pos:line="4" pos:column="45">sumrbuf<pos:position pos:line="4" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="4" pos:column="54">sumresidue<pos:position pos:line="4" pos:column="64"/></name></expr></argument>)<pos:position pos:line="4" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="66"/></expr_stmt></block></then></if>

	<expr_stmt><expr><call><name pos:line="6" pos:column="9">mdfour_result<pos:position pos:line="6" pos:column="22"/></name><argument_list pos:line="6" pos:column="22">(<argument><expr><operator pos:line="6" pos:column="23">&amp;<pos:position pos:line="6" pos:column="28"/></operator><name pos:line="6" pos:column="24">md<pos:position pos:line="6" pos:column="26"/></name></expr></argument>, <argument><expr><operator pos:line="6" pos:column="28">(<pos:position pos:line="6" pos:column="29"/></operator><name pos:line="6" pos:column="29">uchar<pos:position pos:line="6" pos:column="34"/></name> <operator pos:line="6" pos:column="35">*<pos:position pos:line="6" pos:column="36"/></operator><operator pos:line="6" pos:column="36">)<pos:position pos:line="6" pos:column="37"/></operator><name pos:line="6" pos:column="37">sum<pos:position pos:line="6" pos:column="40"/></name></expr></argument>)<pos:position pos:line="6" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="42"/></expr_stmt>
}<pos:position pos:line="7" pos:column="2"/></block></function></unit>
