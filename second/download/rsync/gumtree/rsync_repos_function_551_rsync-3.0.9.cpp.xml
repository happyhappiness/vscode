<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_551_rsync-3.0.9.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">check_alt_basis_dirs<pos:position pos:line="1" pos:column="33"/></name><parameter_list pos:line="1" pos:column="33">(<parameter><decl><type><name pos:line="1" pos:column="34">void<pos:position pos:line="1" pos:column="38"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="39"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">STRUCT_STAT<pos:position pos:line="3" pos:column="20"/></name></type> <name pos:line="3" pos:column="21">st<pos:position pos:line="3" pos:column="23"/></name></decl>;<pos:position pos:line="3" pos:column="24"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier><modifier pos:line="4" pos:column="15">*<pos:position pos:line="4" pos:column="16"/></modifier></type><name pos:line="4" pos:column="16">dir_p<pos:position pos:line="4" pos:column="21"/></name></decl>, <modifier pos:line="4" pos:column="23">*<pos:position pos:line="4" pos:column="24"/></modifier><decl><type ref="prev"/><name pos:line="4" pos:column="24">slash<pos:position pos:line="4" pos:column="29"/></name> <init pos:line="4" pos:column="30">= <expr><call><name pos:line="4" pos:column="32">strrchr<pos:position pos:line="4" pos:column="39"/></name><argument_list pos:line="4" pos:column="39">(<argument><expr><name pos:line="4" pos:column="40">curr_dir<pos:position pos:line="4" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="4" pos:column="50">'/'<pos:position pos:line="4" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="4" pos:column="54"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="55"/></decl_stmt>

	<for pos:line="6" pos:column="9">for <control pos:line="6" pos:column="13">(<init><expr><name pos:line="6" pos:column="14">dir_p<pos:position pos:line="6" pos:column="19"/></name> <operator pos:line="6" pos:column="20">=<pos:position pos:line="6" pos:column="21"/></operator> <name pos:line="6" pos:column="22">basis_dir<pos:position pos:line="6" pos:column="31"/></name></expr>;<pos:position pos:line="6" pos:column="32"/></init> <condition><expr><operator pos:line="6" pos:column="33">*<pos:position pos:line="6" pos:column="34"/></operator><name pos:line="6" pos:column="34">dir_p<pos:position pos:line="6" pos:column="39"/></name></expr>;<pos:position pos:line="6" pos:column="40"/></condition> <incr><expr><name pos:line="6" pos:column="41">dir_p<pos:position pos:line="6" pos:column="46"/></name><operator pos:line="6" pos:column="46">++<pos:position pos:line="6" pos:column="48"/></operator></expr></incr>)<pos:position pos:line="6" pos:column="49"/></control> <block pos:line="6" pos:column="50">{
		<if pos:line="7" pos:column="17">if <condition pos:line="7" pos:column="20">(<expr><name pos:line="7" pos:column="21">dry_run<pos:position pos:line="7" pos:column="28"/></name> <operator pos:line="7" pos:column="29">&gt;<pos:position pos:line="7" pos:column="33"/></operator> <literal type="number" pos:line="7" pos:column="31">1<pos:position pos:line="7" pos:column="32"/></literal> <operator pos:line="7" pos:column="33">&amp;&amp;<pos:position pos:line="7" pos:column="43"/></operator> <operator pos:line="7" pos:column="36">*<pos:position pos:line="7" pos:column="37"/></operator><operator pos:line="7" pos:column="37">*<pos:position pos:line="7" pos:column="38"/></operator><name pos:line="7" pos:column="38">dir_p<pos:position pos:line="7" pos:column="43"/></name> <operator pos:line="7" pos:column="44">!=<pos:position pos:line="7" pos:column="46"/></operator> <literal type="char" pos:line="7" pos:column="47">'/'<pos:position pos:line="7" pos:column="50"/></literal></expr>)<pos:position pos:line="7" pos:column="51"/></condition><then pos:line="7" pos:column="51"> <block pos:line="7" pos:column="52">{
			<decl_stmt><decl><type><name pos:line="8" pos:column="25">int<pos:position pos:line="8" pos:column="28"/></name></type> <name pos:line="8" pos:column="29">len<pos:position pos:line="8" pos:column="32"/></name> <init pos:line="8" pos:column="33">= <expr><name pos:line="8" pos:column="35">curr_dir_len<pos:position pos:line="8" pos:column="47"/></name> <operator pos:line="8" pos:column="48">+<pos:position pos:line="8" pos:column="49"/></operator> <literal type="number" pos:line="8" pos:column="50">1<pos:position pos:line="8" pos:column="51"/></literal> <operator pos:line="8" pos:column="52">+<pos:position pos:line="8" pos:column="53"/></operator> <call><name pos:line="8" pos:column="54">strlen<pos:position pos:line="8" pos:column="60"/></name><argument_list pos:line="8" pos:column="60">(<argument><expr><operator pos:line="8" pos:column="61">*<pos:position pos:line="8" pos:column="62"/></operator><name pos:line="8" pos:column="62">dir_p<pos:position pos:line="8" pos:column="67"/></name></expr></argument>)<pos:position pos:line="8" pos:column="68"/></argument_list></call> <operator pos:line="8" pos:column="69">+<pos:position pos:line="8" pos:column="70"/></operator> <literal type="number" pos:line="8" pos:column="71">1<pos:position pos:line="8" pos:column="72"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="73"/></decl_stmt>
			<expr_stmt><expr><name pos:line="9" pos:column="25">char<pos:position pos:line="9" pos:column="29"/></name> <operator pos:line="9" pos:column="30">*<pos:position pos:line="9" pos:column="31"/></operator><operator pos:line="9" pos:column="31">new<pos:position pos:line="9" pos:column="34"/></operator> <operator pos:line="9" pos:column="35">=<pos:position pos:line="9" pos:column="36"/></operator> <call><name pos:line="9" pos:column="37">new_array<pos:position pos:line="9" pos:column="46"/></name><argument_list pos:line="9" pos:column="46">(<argument><expr><name pos:line="9" pos:column="47">char<pos:position pos:line="9" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="53">len<pos:position pos:line="9" pos:column="56"/></name></expr></argument>)<pos:position pos:line="9" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="58"/></expr_stmt>
			<if pos:line="10" pos:column="25">if <condition pos:line="10" pos:column="28">(<expr><operator pos:line="10" pos:column="29">!<pos:position pos:line="10" pos:column="30"/></operator><operator pos:line="10" pos:column="30">new<pos:position pos:line="10" pos:column="33"/></operator></expr>)<pos:position pos:line="10" pos:column="34"/></condition><then pos:line="10" pos:column="34">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="11" pos:column="33">out_of_memory<pos:position pos:line="11" pos:column="46"/></name><argument_list pos:line="11" pos:column="46">(<argument><expr><literal type="string" pos:line="11" pos:column="47">"check_alt_basis_dirs"<pos:position pos:line="11" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="71"/></expr_stmt></block></then></if>
			<if pos:line="12" pos:column="25">if <condition pos:line="12" pos:column="28">(<expr><name pos:line="12" pos:column="29">slash<pos:position pos:line="12" pos:column="34"/></name> <operator pos:line="12" pos:column="35">&amp;&amp;<pos:position pos:line="12" pos:column="45"/></operator> <call><name pos:line="12" pos:column="38">strncmp<pos:position pos:line="12" pos:column="45"/></name><argument_list pos:line="12" pos:column="45">(<argument><expr><operator pos:line="12" pos:column="46">*<pos:position pos:line="12" pos:column="47"/></operator><name pos:line="12" pos:column="47">dir_p<pos:position pos:line="12" pos:column="52"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="12" pos:column="54">"../"<pos:position pos:line="12" pos:column="59"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="12" pos:column="61">3<pos:position pos:line="12" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="63"/></argument_list></call> <operator pos:line="12" pos:column="64">==<pos:position pos:line="12" pos:column="66"/></operator> <literal type="number" pos:line="12" pos:column="67">0<pos:position pos:line="12" pos:column="68"/></literal></expr>)<pos:position pos:line="12" pos:column="69"/></condition><then pos:line="12" pos:column="69"> <block pos:line="12" pos:column="70">{
			    <comment type="block" pos:line="13" pos:column="29">/* We want to remove only one leading "../" prefix for
			     * the directory we couldn't create in dry-run mode:
			     * this ensures that any other ".." references get
			     * evaluated the same as they would for a live copy. */</comment>
			    <expr_stmt><expr><operator pos:line="17" pos:column="29">*<pos:position pos:line="17" pos:column="30"/></operator><name pos:line="17" pos:column="30">slash<pos:position pos:line="17" pos:column="35"/></name> <operator pos:line="17" pos:column="36">=<pos:position pos:line="17" pos:column="37"/></operator> <literal type="char" pos:line="17" pos:column="38">'\0'<pos:position pos:line="17" pos:column="42"/></literal></expr>;<pos:position pos:line="17" pos:column="43"/></expr_stmt>
			    <expr_stmt><expr><call><name pos:line="18" pos:column="29">pathjoin<pos:position pos:line="18" pos:column="37"/></name><argument_list pos:line="18" pos:column="37">(<argument><expr><operator pos:line="18" pos:column="38">new<pos:position pos:line="18" pos:column="41"/></operator></expr></argument>, <argument><expr><name pos:line="18" pos:column="43">len<pos:position pos:line="18" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="48">curr_dir<pos:position pos:line="18" pos:column="56"/></name></expr></argument>, <argument><expr><operator pos:line="18" pos:column="58">*<pos:position pos:line="18" pos:column="59"/></operator><name pos:line="18" pos:column="59">dir_p<pos:position pos:line="18" pos:column="64"/></name> <operator pos:line="18" pos:column="65">+<pos:position pos:line="18" pos:column="66"/></operator> <literal type="number" pos:line="18" pos:column="67">3<pos:position pos:line="18" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="70"/></expr_stmt>
			    <expr_stmt><expr><operator pos:line="19" pos:column="29">*<pos:position pos:line="19" pos:column="30"/></operator><name pos:line="19" pos:column="30">slash<pos:position pos:line="19" pos:column="35"/></name> <operator pos:line="19" pos:column="36">=<pos:position pos:line="19" pos:column="37"/></operator> <literal type="char" pos:line="19" pos:column="38">'/'<pos:position pos:line="19" pos:column="41"/></literal></expr>;<pos:position pos:line="19" pos:column="42"/></expr_stmt>
			}<pos:position pos:line="20" pos:column="26"/></block></then> <else pos:line="20" pos:column="27">else
			    <block type="pseudo"><expr_stmt><expr><call><name pos:line="21" pos:column="29">pathjoin<pos:position pos:line="21" pos:column="37"/></name><argument_list pos:line="21" pos:column="37">(<argument><expr><operator pos:line="21" pos:column="38">new<pos:position pos:line="21" pos:column="41"/></operator></expr></argument>, <argument><expr><name pos:line="21" pos:column="43">len<pos:position pos:line="21" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="48">curr_dir<pos:position pos:line="21" pos:column="56"/></name></expr></argument>, <argument><expr><operator pos:line="21" pos:column="58">*<pos:position pos:line="21" pos:column="59"/></operator><name pos:line="21" pos:column="59">dir_p<pos:position pos:line="21" pos:column="64"/></name></expr></argument>)<pos:position pos:line="21" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="66"/></expr_stmt></block></else></if>
			<expr_stmt><expr><operator pos:line="22" pos:column="25">*<pos:position pos:line="22" pos:column="26"/></operator><name pos:line="22" pos:column="26">dir_p<pos:position pos:line="22" pos:column="31"/></name> <operator pos:line="22" pos:column="32">=<pos:position pos:line="22" pos:column="33"/></operator> <operator pos:line="22" pos:column="34">new<pos:position pos:line="22" pos:column="37"/></operator></expr>;<pos:position pos:line="22" pos:column="38"/></expr_stmt>
		}<pos:position pos:line="23" pos:column="18"/></block></then></if>
		<if pos:line="24" pos:column="17">if <condition pos:line="24" pos:column="20">(<expr><call><name pos:line="24" pos:column="21">do_stat<pos:position pos:line="24" pos:column="28"/></name><argument_list pos:line="24" pos:column="28">(<argument><expr><operator pos:line="24" pos:column="29">*<pos:position pos:line="24" pos:column="30"/></operator><name pos:line="24" pos:column="30">dir_p<pos:position pos:line="24" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="24" pos:column="37">&amp;<pos:position pos:line="24" pos:column="42"/></operator><name pos:line="24" pos:column="38">st<pos:position pos:line="24" pos:column="40"/></name></expr></argument>)<pos:position pos:line="24" pos:column="41"/></argument_list></call> <operator pos:line="24" pos:column="42">&lt;<pos:position pos:line="24" pos:column="46"/></operator> <literal type="number" pos:line="24" pos:column="44">0<pos:position pos:line="24" pos:column="45"/></literal></expr>)<pos:position pos:line="24" pos:column="46"/></condition><then pos:line="24" pos:column="46"> <block pos:line="24" pos:column="47">{
			<expr_stmt><expr><call><name pos:line="25" pos:column="25">rprintf<pos:position pos:line="25" pos:column="32"/></name><argument_list pos:line="25" pos:column="32">(<argument><expr><name pos:line="25" pos:column="33">FWARNING<pos:position pos:line="25" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="25" pos:column="43">"%s arg does not exist: %s\n"<pos:position pos:line="25" pos:column="72"/></literal></expr></argument>,
				<argument><expr><name pos:line="26" pos:column="33">dest_option<pos:position pos:line="26" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="26" pos:column="46">*<pos:position pos:line="26" pos:column="47"/></operator><name pos:line="26" pos:column="47">dir_p<pos:position pos:line="26" pos:column="52"/></name></expr></argument>)<pos:position pos:line="26" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="54"/></expr_stmt>
		}<pos:position pos:line="27" pos:column="18"/></block></then> <elseif pos:line="27" pos:column="19">else <if pos:line="27" pos:column="24">if <condition pos:line="27" pos:column="27">(<expr><operator pos:line="27" pos:column="28">!<pos:position pos:line="27" pos:column="29"/></operator><call><name pos:line="27" pos:column="29">S_ISDIR<pos:position pos:line="27" pos:column="36"/></name><argument_list pos:line="27" pos:column="36">(<argument><expr><name><name pos:line="27" pos:column="37">st<pos:position pos:line="27" pos:column="39"/></name><operator pos:line="27" pos:column="39">.<pos:position pos:line="27" pos:column="40"/></operator><name pos:line="27" pos:column="40">st_mode<pos:position pos:line="27" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="27" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="27" pos:column="49"/></condition><then pos:line="27" pos:column="49"> <block pos:line="27" pos:column="50">{
			<expr_stmt><expr><call><name pos:line="28" pos:column="25">rprintf<pos:position pos:line="28" pos:column="32"/></name><argument_list pos:line="28" pos:column="32">(<argument><expr><name pos:line="28" pos:column="33">FWARNING<pos:position pos:line="28" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="28" pos:column="43">"%s arg is not a dir: %s\n"<pos:position pos:line="28" pos:column="70"/></literal></expr></argument>,
				<argument><expr><name pos:line="29" pos:column="33">dest_option<pos:position pos:line="29" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="29" pos:column="46">*<pos:position pos:line="29" pos:column="47"/></operator><name pos:line="29" pos:column="47">dir_p<pos:position pos:line="29" pos:column="52"/></name></expr></argument>)<pos:position pos:line="29" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="54"/></expr_stmt>
		}<pos:position pos:line="30" pos:column="18"/></block></then></if></elseif></if>
	}<pos:position pos:line="31" pos:column="10"/></block></for>
}<pos:position pos:line="32" pos:column="2"/></block></function></unit>
