<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_131_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">forward_filesfrom_data<pos:position pos:line="1" pos:column="35"/></name><parameter_list pos:line="1" pos:column="35">(<parameter><decl><type><name pos:line="1" pos:column="36">void<pos:position pos:line="1" pos:column="40"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="41"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">len<pos:position pos:line="3" pos:column="16"/></name></decl>;<pos:position pos:line="3" pos:column="17"/></decl_stmt>

	<expr_stmt><expr><name pos:line="5" pos:column="9">len<pos:position pos:line="5" pos:column="12"/></name> <operator pos:line="5" pos:column="13">=<pos:position pos:line="5" pos:column="14"/></operator> <call><name pos:line="5" pos:column="15">read<pos:position pos:line="5" pos:column="19"/></name><argument_list pos:line="5" pos:column="19">(<argument><expr><name pos:line="5" pos:column="20">ff_forward_fd<pos:position pos:line="5" pos:column="33"/></name></expr></argument>, <argument><expr><name><name pos:line="5" pos:column="35">ff_xb<pos:position pos:line="5" pos:column="40"/></name><operator pos:line="5" pos:column="40">.<pos:position pos:line="5" pos:column="41"/></operator><name pos:line="5" pos:column="41">buf<pos:position pos:line="5" pos:column="44"/></name></name> <operator pos:line="5" pos:column="45">+<pos:position pos:line="5" pos:column="46"/></operator> <name><name pos:line="5" pos:column="47">ff_xb<pos:position pos:line="5" pos:column="52"/></name><operator pos:line="5" pos:column="52">.<pos:position pos:line="5" pos:column="53"/></operator><name pos:line="5" pos:column="53">len<pos:position pos:line="5" pos:column="56"/></name></name></expr></argument>, <argument><expr><name><name pos:line="5" pos:column="58">ff_xb<pos:position pos:line="5" pos:column="63"/></name><operator pos:line="5" pos:column="63">.<pos:position pos:line="5" pos:column="64"/></operator><name pos:line="5" pos:column="64">size<pos:position pos:line="5" pos:column="68"/></name></name> <operator pos:line="5" pos:column="69">-<pos:position pos:line="5" pos:column="70"/></operator> <name><name pos:line="5" pos:column="71">ff_xb<pos:position pos:line="5" pos:column="76"/></name><operator pos:line="5" pos:column="76">.<pos:position pos:line="5" pos:column="77"/></operator><name pos:line="5" pos:column="77">len<pos:position pos:line="5" pos:column="80"/></name></name></expr></argument>)<pos:position pos:line="5" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="82"/></expr_stmt>
	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><name pos:line="6" pos:column="13">len<pos:position pos:line="6" pos:column="16"/></name> <operator pos:line="6" pos:column="17">&lt;=<pos:position pos:line="6" pos:column="22"/></operator> <literal type="number" pos:line="6" pos:column="20">0<pos:position pos:line="6" pos:column="21"/></literal></expr>)<pos:position pos:line="6" pos:column="22"/></condition><then pos:line="6" pos:column="22"> <block pos:line="6" pos:column="23">{
		<if pos:line="7" pos:column="17">if <condition pos:line="7" pos:column="20">(<expr><name pos:line="7" pos:column="21">len<pos:position pos:line="7" pos:column="24"/></name> <operator pos:line="7" pos:column="25">==<pos:position pos:line="7" pos:column="27"/></operator> <literal type="number" pos:line="7" pos:column="28">0<pos:position pos:line="7" pos:column="29"/></literal> <operator pos:line="7" pos:column="30">||<pos:position pos:line="7" pos:column="32"/></operator> <name pos:line="7" pos:column="33">errno<pos:position pos:line="7" pos:column="38"/></name> <operator pos:line="7" pos:column="39">!=<pos:position pos:line="7" pos:column="41"/></operator> <name pos:line="7" pos:column="42">EINTR<pos:position pos:line="7" pos:column="47"/></name></expr>)<pos:position pos:line="7" pos:column="48"/></condition><then pos:line="7" pos:column="48"> <block pos:line="7" pos:column="49">{
			<comment type="block" pos:line="8" pos:column="25">/* Send end-of-file marker */</comment>
			<expr_stmt><expr><name pos:line="9" pos:column="25">ff_forward_fd<pos:position pos:line="9" pos:column="38"/></name> <operator pos:line="9" pos:column="39">=<pos:position pos:line="9" pos:column="40"/></operator> <operator pos:line="9" pos:column="41">-<pos:position pos:line="9" pos:column="42"/></operator><literal type="number" pos:line="9" pos:column="42">1<pos:position pos:line="9" pos:column="43"/></literal></expr>;<pos:position pos:line="9" pos:column="44"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="10" pos:column="25">write_buf<pos:position pos:line="10" pos:column="34"/></name><argument_list pos:line="10" pos:column="34">(<argument><expr><name><name pos:line="10" pos:column="35">iobuf<pos:position pos:line="10" pos:column="40"/></name><operator pos:line="10" pos:column="40">.<pos:position pos:line="10" pos:column="41"/></operator><name pos:line="10" pos:column="41">out_fd<pos:position pos:line="10" pos:column="47"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="10" pos:column="49">"\0\0"<pos:position pos:line="10" pos:column="55"/></literal></expr></argument>, <argument><expr><ternary><condition><expr><name pos:line="10" pos:column="57">ff_lastchar<pos:position pos:line="10" pos:column="68"/></name></expr> ?<pos:position pos:line="10" pos:column="70"/></condition><then pos:line="10" pos:column="70"> <expr><literal type="number" pos:line="10" pos:column="71">2<pos:position pos:line="10" pos:column="72"/></literal></expr> <pos:position pos:line="10" pos:column="73"/></then><else pos:line="10" pos:column="73">: <expr><literal type="number" pos:line="10" pos:column="75">1<pos:position pos:line="10" pos:column="76"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="10" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="78"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="11" pos:column="25">free_xbuf<pos:position pos:line="11" pos:column="34"/></name><argument_list pos:line="11" pos:column="34">(<argument><expr><operator pos:line="11" pos:column="35">&amp;<pos:position pos:line="11" pos:column="40"/></operator><name pos:line="11" pos:column="36">ff_xb<pos:position pos:line="11" pos:column="41"/></name></expr></argument>)<pos:position pos:line="11" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="43"/></expr_stmt>
			<if pos:line="12" pos:column="25">if <condition pos:line="12" pos:column="28">(<expr><name pos:line="12" pos:column="29">ff_reenable_multiplex<pos:position pos:line="12" pos:column="50"/></name> <operator pos:line="12" pos:column="51">&gt;=<pos:position pos:line="12" pos:column="56"/></operator> <literal type="number" pos:line="12" pos:column="54">0<pos:position pos:line="12" pos:column="55"/></literal></expr>)<pos:position pos:line="12" pos:column="56"/></condition><then pos:line="12" pos:column="56">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="13" pos:column="33">io_start_multiplex_out<pos:position pos:line="13" pos:column="55"/></name><argument_list pos:line="13" pos:column="55">(<argument><expr><name pos:line="13" pos:column="56">ff_reenable_multiplex<pos:position pos:line="13" pos:column="77"/></name></expr></argument>)<pos:position pos:line="13" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="79"/></expr_stmt></block></then></if>
		}<pos:position pos:line="14" pos:column="18"/></block></then></if>
		<return pos:line="15" pos:column="17">return;<pos:position pos:line="15" pos:column="24"/></return>
	}<pos:position pos:line="16" pos:column="10"/></block></then></if>

	<if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><call><name pos:line="18" pos:column="13">DEBUG_GTE<pos:position pos:line="18" pos:column="22"/></name><argument_list pos:line="18" pos:column="22">(<argument><expr><name pos:line="18" pos:column="23">IO<pos:position pos:line="18" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="18" pos:column="27">2<pos:position pos:line="18" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="29"/></argument_list></call></expr>)<pos:position pos:line="18" pos:column="30"/></condition><then pos:line="18" pos:column="30">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="19" pos:column="17">rprintf<pos:position pos:line="19" pos:column="24"/></name><argument_list pos:line="19" pos:column="24">(<argument><expr><name pos:line="19" pos:column="25">FINFO<pos:position pos:line="19" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="32">"[%s] files-from read=%ld\n"<pos:position pos:line="19" pos:column="60"/></literal></expr></argument>, <argument><expr><call><name pos:line="19" pos:column="62">who_am_i<pos:position pos:line="19" pos:column="70"/></name><argument_list pos:line="19" pos:column="70">()<pos:position pos:line="19" pos:column="72"/></argument_list></call></expr></argument>, <argument><expr><operator pos:line="19" pos:column="74">(<pos:position pos:line="19" pos:column="75"/></operator><name pos:line="19" pos:column="75">long<pos:position pos:line="19" pos:column="79"/></name><operator pos:line="19" pos:column="79">)<pos:position pos:line="19" pos:column="80"/></operator><name pos:line="19" pos:column="80">len<pos:position pos:line="19" pos:column="83"/></name></expr></argument>)<pos:position pos:line="19" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="85"/></expr_stmt></block></then></if>

<cpp:ifdef pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">ifdef<pos:position pos:line="21" pos:column="7"/></cpp:directive> <name pos:line="21" pos:column="8">ICONV_OPTION<pos:position pos:line="21" pos:column="20"/></name></cpp:ifdef>
	<expr_stmt><expr><name pos:line="22" pos:column="9">len<pos:position pos:line="22" pos:column="12"/></name> <operator pos:line="22" pos:column="13">+=<pos:position pos:line="22" pos:column="15"/></operator> <name><name pos:line="22" pos:column="16">ff_xb<pos:position pos:line="22" pos:column="21"/></name><operator pos:line="22" pos:column="21">.<pos:position pos:line="22" pos:column="22"/></operator><name pos:line="22" pos:column="22">len<pos:position pos:line="22" pos:column="25"/></name></name></expr>;<pos:position pos:line="22" pos:column="26"/></expr_stmt>
<cpp:endif pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">endif<pos:position pos:line="23" pos:column="7"/></cpp:directive></cpp:endif>

	<if pos:line="25" pos:column="9">if <condition pos:line="25" pos:column="12">(<expr><operator pos:line="25" pos:column="13">!<pos:position pos:line="25" pos:column="14"/></operator><name pos:line="25" pos:column="14">eol_nulls<pos:position pos:line="25" pos:column="23"/></name></expr>)<pos:position pos:line="25" pos:column="24"/></condition><then pos:line="25" pos:column="24"> <block pos:line="25" pos:column="25">{
		<decl_stmt><decl><type><name pos:line="26" pos:column="17">char<pos:position pos:line="26" pos:column="21"/></name> <modifier pos:line="26" pos:column="22">*<pos:position pos:line="26" pos:column="23"/></modifier></type><name pos:line="26" pos:column="23">s<pos:position pos:line="26" pos:column="24"/></name> <init pos:line="26" pos:column="25">= <expr><name><name pos:line="26" pos:column="27">ff_xb<pos:position pos:line="26" pos:column="32"/></name><operator pos:line="26" pos:column="32">.<pos:position pos:line="26" pos:column="33"/></operator><name pos:line="26" pos:column="33">buf<pos:position pos:line="26" pos:column="36"/></name></name> <operator pos:line="26" pos:column="37">+<pos:position pos:line="26" pos:column="38"/></operator> <name pos:line="26" pos:column="39">len<pos:position pos:line="26" pos:column="42"/></name></expr></init></decl>;<pos:position pos:line="26" pos:column="43"/></decl_stmt>
		<comment type="block" pos:line="27" pos:column="17">/* Transform CR and/or LF into '\0' */</comment>
		<while pos:line="28" pos:column="17">while <condition pos:line="28" pos:column="23">(<expr><name pos:line="28" pos:column="24">s<pos:position pos:line="28" pos:column="25"/></name><operator pos:line="28" pos:column="25">--<pos:position pos:line="28" pos:column="27"/></operator> <operator pos:line="28" pos:column="28">&gt;<pos:position pos:line="28" pos:column="32"/></operator> <name><name pos:line="28" pos:column="30">ff_xb<pos:position pos:line="28" pos:column="35"/></name><operator pos:line="28" pos:column="35">.<pos:position pos:line="28" pos:column="36"/></operator><name pos:line="28" pos:column="36">buf<pos:position pos:line="28" pos:column="39"/></name></name></expr>)<pos:position pos:line="28" pos:column="40"/></condition> <block pos:line="28" pos:column="41">{
			<if pos:line="29" pos:column="25">if <condition pos:line="29" pos:column="28">(<expr><operator pos:line="29" pos:column="29">*<pos:position pos:line="29" pos:column="30"/></operator><name pos:line="29" pos:column="30">s<pos:position pos:line="29" pos:column="31"/></name> <operator pos:line="29" pos:column="32">==<pos:position pos:line="29" pos:column="34"/></operator> <literal type="char" pos:line="29" pos:column="35">'\n'<pos:position pos:line="29" pos:column="39"/></literal> <operator pos:line="29" pos:column="40">||<pos:position pos:line="29" pos:column="42"/></operator> <operator pos:line="29" pos:column="43">*<pos:position pos:line="29" pos:column="44"/></operator><name pos:line="29" pos:column="44">s<pos:position pos:line="29" pos:column="45"/></name> <operator pos:line="29" pos:column="46">==<pos:position pos:line="29" pos:column="48"/></operator> <literal type="char" pos:line="29" pos:column="49">'\r'<pos:position pos:line="29" pos:column="53"/></literal></expr>)<pos:position pos:line="29" pos:column="54"/></condition><then pos:line="29" pos:column="54">
				<block type="pseudo"><expr_stmt><expr><operator pos:line="30" pos:column="33">*<pos:position pos:line="30" pos:column="34"/></operator><name pos:line="30" pos:column="34">s<pos:position pos:line="30" pos:column="35"/></name> <operator pos:line="30" pos:column="36">=<pos:position pos:line="30" pos:column="37"/></operator> <literal type="char" pos:line="30" pos:column="38">'\0'<pos:position pos:line="30" pos:column="42"/></literal></expr>;<pos:position pos:line="30" pos:column="43"/></expr_stmt></block></then></if>
		}<pos:position pos:line="31" pos:column="18"/></block></while>
	}<pos:position pos:line="32" pos:column="10"/></block></then></if>

	<if pos:line="34" pos:column="9">if <condition pos:line="34" pos:column="12">(<expr><name pos:line="34" pos:column="13">ff_lastchar<pos:position pos:line="34" pos:column="24"/></name></expr>)<pos:position pos:line="34" pos:column="25"/></condition><then pos:line="34" pos:column="25">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="35" pos:column="17">ff_xb<pos:position pos:line="35" pos:column="22"/></name><operator pos:line="35" pos:column="22">.<pos:position pos:line="35" pos:column="23"/></operator><name pos:line="35" pos:column="23">pos<pos:position pos:line="35" pos:column="26"/></name></name> <operator pos:line="35" pos:column="27">=<pos:position pos:line="35" pos:column="28"/></operator> <literal type="number" pos:line="35" pos:column="29">0<pos:position pos:line="35" pos:column="30"/></literal></expr>;<pos:position pos:line="35" pos:column="31"/></expr_stmt></block></then>
	<else pos:line="36" pos:column="9">else <block pos:line="36" pos:column="14">{
		<decl_stmt><decl><type><name pos:line="37" pos:column="17">char<pos:position pos:line="37" pos:column="21"/></name> <modifier pos:line="37" pos:column="22">*<pos:position pos:line="37" pos:column="23"/></modifier></type><name pos:line="37" pos:column="23">s<pos:position pos:line="37" pos:column="24"/></name> <init pos:line="37" pos:column="25">= <expr><name><name pos:line="37" pos:column="27">ff_xb<pos:position pos:line="37" pos:column="32"/></name><operator pos:line="37" pos:column="32">.<pos:position pos:line="37" pos:column="33"/></operator><name pos:line="37" pos:column="33">buf<pos:position pos:line="37" pos:column="36"/></name></name></expr></init></decl>;<pos:position pos:line="37" pos:column="37"/></decl_stmt>
		<comment type="block" pos:line="38" pos:column="17">/* Last buf ended with a '\0', so don't let this buf start with one. */</comment>
		<while pos:line="39" pos:column="17">while <condition pos:line="39" pos:column="23">(<expr><name pos:line="39" pos:column="24">len<pos:position pos:line="39" pos:column="27"/></name> <operator pos:line="39" pos:column="28">&amp;&amp;<pos:position pos:line="39" pos:column="38"/></operator> <operator pos:line="39" pos:column="31">*<pos:position pos:line="39" pos:column="32"/></operator><name pos:line="39" pos:column="32">s<pos:position pos:line="39" pos:column="33"/></name> <operator pos:line="39" pos:column="34">==<pos:position pos:line="39" pos:column="36"/></operator> <literal type="char" pos:line="39" pos:column="37">'\0'<pos:position pos:line="39" pos:column="41"/></literal></expr>)<pos:position pos:line="39" pos:column="42"/></condition>
			<block type="pseudo"><expr_stmt><expr><name pos:line="40" pos:column="25">s<pos:position pos:line="40" pos:column="26"/></name><operator pos:line="40" pos:column="26">++<pos:position pos:line="40" pos:column="28"/></operator></expr><operator pos:line="40" pos:column="28">,<pos:position pos:line="40" pos:column="29"/></operator> <expr><name pos:line="40" pos:column="30">len<pos:position pos:line="40" pos:column="33"/></name><operator pos:line="40" pos:column="33">--<pos:position pos:line="40" pos:column="35"/></operator></expr>;<pos:position pos:line="40" pos:column="36"/></expr_stmt></block></while>
		<expr_stmt><expr><name><name pos:line="41" pos:column="17">ff_xb<pos:position pos:line="41" pos:column="22"/></name><operator pos:line="41" pos:column="22">.<pos:position pos:line="41" pos:column="23"/></operator><name pos:line="41" pos:column="23">pos<pos:position pos:line="41" pos:column="26"/></name></name> <operator pos:line="41" pos:column="27">=<pos:position pos:line="41" pos:column="28"/></operator> <name pos:line="41" pos:column="29">s<pos:position pos:line="41" pos:column="30"/></name> <operator pos:line="41" pos:column="31">-<pos:position pos:line="41" pos:column="32"/></operator> <name><name pos:line="41" pos:column="33">ff_xb<pos:position pos:line="41" pos:column="38"/></name><operator pos:line="41" pos:column="38">.<pos:position pos:line="41" pos:column="39"/></operator><name pos:line="41" pos:column="39">buf<pos:position pos:line="41" pos:column="42"/></name></name></expr>;<pos:position pos:line="41" pos:column="43"/></expr_stmt>
	}<pos:position pos:line="42" pos:column="10"/></block></else></if>

<cpp:ifdef pos:line="44" pos:column="1">#<cpp:directive pos:line="44" pos:column="2">ifdef<pos:position pos:line="44" pos:column="7"/></cpp:directive> <name pos:line="44" pos:column="8">ICONV_OPTION<pos:position pos:line="44" pos:column="20"/></name></cpp:ifdef>
	<if pos:line="45" pos:column="9">if <condition pos:line="45" pos:column="12">(<expr><name pos:line="45" pos:column="13">filesfrom_convert<pos:position pos:line="45" pos:column="30"/></name> <operator pos:line="45" pos:column="31">&amp;&amp;<pos:position pos:line="45" pos:column="41"/></operator> <name pos:line="45" pos:column="34">len<pos:position pos:line="45" pos:column="37"/></name></expr>)<pos:position pos:line="45" pos:column="38"/></condition><then pos:line="45" pos:column="38"> <block pos:line="45" pos:column="39">{
		<decl_stmt><decl><type><name pos:line="46" pos:column="17">char<pos:position pos:line="46" pos:column="21"/></name> <modifier pos:line="46" pos:column="22">*<pos:position pos:line="46" pos:column="23"/></modifier></type><name pos:line="46" pos:column="23">sob<pos:position pos:line="46" pos:column="26"/></name> <init pos:line="46" pos:column="27">= <expr><name><name pos:line="46" pos:column="29">ff_xb<pos:position pos:line="46" pos:column="34"/></name><operator pos:line="46" pos:column="34">.<pos:position pos:line="46" pos:column="35"/></operator><name pos:line="46" pos:column="35">buf<pos:position pos:line="46" pos:column="38"/></name></name> <operator pos:line="46" pos:column="39">+<pos:position pos:line="46" pos:column="40"/></operator> <name><name pos:line="46" pos:column="41">ff_xb<pos:position pos:line="46" pos:column="46"/></name><operator pos:line="46" pos:column="46">.<pos:position pos:line="46" pos:column="47"/></operator><name pos:line="46" pos:column="47">pos<pos:position pos:line="46" pos:column="50"/></name></name></expr></init></decl>, <modifier pos:line="46" pos:column="52">*<pos:position pos:line="46" pos:column="53"/></modifier><decl><type ref="prev"/><name pos:line="46" pos:column="53">s<pos:position pos:line="46" pos:column="54"/></name> <init pos:line="46" pos:column="55">= <expr><name pos:line="46" pos:column="57">sob<pos:position pos:line="46" pos:column="60"/></name></expr></init></decl>;<pos:position pos:line="46" pos:column="61"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="47" pos:column="17">char<pos:position pos:line="47" pos:column="21"/></name> <modifier pos:line="47" pos:column="22">*<pos:position pos:line="47" pos:column="23"/></modifier></type><name pos:line="47" pos:column="23">eob<pos:position pos:line="47" pos:column="26"/></name> <init pos:line="47" pos:column="27">= <expr><name pos:line="47" pos:column="29">sob<pos:position pos:line="47" pos:column="32"/></name> <operator pos:line="47" pos:column="33">+<pos:position pos:line="47" pos:column="34"/></operator> <name pos:line="47" pos:column="35">len<pos:position pos:line="47" pos:column="38"/></name></expr></init></decl>;<pos:position pos:line="47" pos:column="39"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="48" pos:column="17">int<pos:position pos:line="48" pos:column="20"/></name></type> <name pos:line="48" pos:column="21">flags<pos:position pos:line="48" pos:column="26"/></name> <init pos:line="48" pos:column="27">= <expr><name pos:line="48" pos:column="29">ICB_INCLUDE_BAD<pos:position pos:line="48" pos:column="44"/></name> <operator pos:line="48" pos:column="45">|<pos:position pos:line="48" pos:column="46"/></operator> <name pos:line="48" pos:column="47">ICB_INCLUDE_INCOMPLETE<pos:position pos:line="48" pos:column="69"/></name> <operator pos:line="48" pos:column="70">|<pos:position pos:line="48" pos:column="71"/></operator> <name pos:line="48" pos:column="72">ICB_CIRCULAR_OUT<pos:position pos:line="48" pos:column="88"/></name></expr></init></decl>;<pos:position pos:line="48" pos:column="89"/></decl_stmt>
		<if pos:line="49" pos:column="17">if <condition pos:line="49" pos:column="20">(<expr><name pos:line="49" pos:column="21">ff_lastchar<pos:position pos:line="49" pos:column="32"/></name> <operator pos:line="49" pos:column="33">==<pos:position pos:line="49" pos:column="35"/></operator> <literal type="char" pos:line="49" pos:column="36">'\0'<pos:position pos:line="49" pos:column="40"/></literal></expr>)<pos:position pos:line="49" pos:column="41"/></condition><then pos:line="49" pos:column="41">
			<block type="pseudo"><expr_stmt><expr><name pos:line="50" pos:column="25">flags<pos:position pos:line="50" pos:column="30"/></name> <operator pos:line="50" pos:column="31">|=<pos:position pos:line="50" pos:column="33"/></operator> <name pos:line="50" pos:column="34">ICB_INIT<pos:position pos:line="50" pos:column="42"/></name></expr>;<pos:position pos:line="50" pos:column="43"/></expr_stmt></block></then></if>
		<comment type="block" pos:line="51" pos:column="17">/* Convert/send each null-terminated string separately, skipping empties. */</comment>
		<while pos:line="52" pos:column="17">while <condition pos:line="52" pos:column="23">(<expr><name pos:line="52" pos:column="24">s<pos:position pos:line="52" pos:column="25"/></name> <operator pos:line="52" pos:column="26">!=<pos:position pos:line="52" pos:column="28"/></operator> <name pos:line="52" pos:column="29">eob<pos:position pos:line="52" pos:column="32"/></name></expr>)<pos:position pos:line="52" pos:column="33"/></condition> <block pos:line="52" pos:column="34">{
			<if pos:line="53" pos:column="25">if <condition pos:line="53" pos:column="28">(<expr><operator pos:line="53" pos:column="29">*<pos:position pos:line="53" pos:column="30"/></operator><name pos:line="53" pos:column="30">s<pos:position pos:line="53" pos:column="31"/></name><operator pos:line="53" pos:column="31">++<pos:position pos:line="53" pos:column="33"/></operator> <operator pos:line="53" pos:column="34">==<pos:position pos:line="53" pos:column="36"/></operator> <literal type="char" pos:line="53" pos:column="37">'\0'<pos:position pos:line="53" pos:column="41"/></literal></expr>)<pos:position pos:line="53" pos:column="42"/></condition><then pos:line="53" pos:column="42"> <block pos:line="53" pos:column="43">{
				<expr_stmt><expr><name><name pos:line="54" pos:column="33">ff_xb<pos:position pos:line="54" pos:column="38"/></name><operator pos:line="54" pos:column="38">.<pos:position pos:line="54" pos:column="39"/></operator><name pos:line="54" pos:column="39">len<pos:position pos:line="54" pos:column="42"/></name></name> <operator pos:line="54" pos:column="43">=<pos:position pos:line="54" pos:column="44"/></operator> <name pos:line="54" pos:column="45">s<pos:position pos:line="54" pos:column="46"/></name> <operator pos:line="54" pos:column="47">-<pos:position pos:line="54" pos:column="48"/></operator> <name pos:line="54" pos:column="49">sob<pos:position pos:line="54" pos:column="52"/></name> <operator pos:line="54" pos:column="53">-<pos:position pos:line="54" pos:column="54"/></operator> <literal type="number" pos:line="54" pos:column="55">1<pos:position pos:line="54" pos:column="56"/></literal></expr>;<pos:position pos:line="54" pos:column="57"/></expr_stmt>
				<if pos:line="55" pos:column="33">if <condition pos:line="55" pos:column="36">(<expr><call><name pos:line="55" pos:column="37">iconvbufs<pos:position pos:line="55" pos:column="46"/></name><argument_list pos:line="55" pos:column="46">(<argument><expr><name pos:line="55" pos:column="47">ic_send<pos:position pos:line="55" pos:column="54"/></name></expr></argument>, <argument><expr><operator pos:line="55" pos:column="56">&amp;<pos:position pos:line="55" pos:column="61"/></operator><name pos:line="55" pos:column="57">ff_xb<pos:position pos:line="55" pos:column="62"/></name></expr></argument>, <argument><expr><operator pos:line="55" pos:column="64">&amp;<pos:position pos:line="55" pos:column="69"/></operator><name><name pos:line="55" pos:column="65">iobuf<pos:position pos:line="55" pos:column="70"/></name><operator pos:line="55" pos:column="70">.<pos:position pos:line="55" pos:column="71"/></operator><name pos:line="55" pos:column="71">out<pos:position pos:line="55" pos:column="74"/></name></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="76">flags<pos:position pos:line="55" pos:column="81"/></name></expr></argument>)<pos:position pos:line="55" pos:column="82"/></argument_list></call> <operator pos:line="55" pos:column="83">&lt;<pos:position pos:line="55" pos:column="87"/></operator> <literal type="number" pos:line="55" pos:column="85">0<pos:position pos:line="55" pos:column="86"/></literal></expr>)<pos:position pos:line="55" pos:column="87"/></condition><then pos:line="55" pos:column="87">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="56" pos:column="41">exit_cleanup<pos:position pos:line="56" pos:column="53"/></name><argument_list pos:line="56" pos:column="53">(<argument><expr><name pos:line="56" pos:column="54">RERR_PROTOCOL<pos:position pos:line="56" pos:column="67"/></name></expr></argument>)<pos:position pos:line="56" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="69"/></expr_stmt></block></then></if> <comment type="block" pos:line="56" pos:column="70">/* impossible? */</comment>
				<expr_stmt><expr><call><name pos:line="57" pos:column="33">write_buf<pos:position pos:line="57" pos:column="42"/></name><argument_list pos:line="57" pos:column="42">(<argument><expr><name><name pos:line="57" pos:column="43">iobuf<pos:position pos:line="57" pos:column="48"/></name><operator pos:line="57" pos:column="48">.<pos:position pos:line="57" pos:column="49"/></operator><name pos:line="57" pos:column="49">out_fd<pos:position pos:line="57" pos:column="55"/></name></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="57">s<pos:position pos:line="57" pos:column="58"/></name><operator pos:line="57" pos:column="58">-<pos:position pos:line="57" pos:column="59"/></operator><literal type="number" pos:line="57" pos:column="59">1<pos:position pos:line="57" pos:column="60"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="57" pos:column="62">1<pos:position pos:line="57" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="57" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="65"/></expr_stmt> <comment type="block" pos:line="57" pos:column="66">/* Send the '\0'. */</comment>
				<while pos:line="58" pos:column="33">while <condition pos:line="58" pos:column="39">(<expr><name pos:line="58" pos:column="40">s<pos:position pos:line="58" pos:column="41"/></name> <operator pos:line="58" pos:column="42">!=<pos:position pos:line="58" pos:column="44"/></operator> <name pos:line="58" pos:column="45">eob<pos:position pos:line="58" pos:column="48"/></name> <operator pos:line="58" pos:column="49">&amp;&amp;<pos:position pos:line="58" pos:column="59"/></operator> <operator pos:line="58" pos:column="52">*<pos:position pos:line="58" pos:column="53"/></operator><name pos:line="58" pos:column="53">s<pos:position pos:line="58" pos:column="54"/></name> <operator pos:line="58" pos:column="55">==<pos:position pos:line="58" pos:column="57"/></operator> <literal type="char" pos:line="58" pos:column="58">'\0'<pos:position pos:line="58" pos:column="62"/></literal></expr>)<pos:position pos:line="58" pos:column="63"/></condition>
					<block type="pseudo"><expr_stmt><expr><name pos:line="59" pos:column="41">s<pos:position pos:line="59" pos:column="42"/></name><operator pos:line="59" pos:column="42">++<pos:position pos:line="59" pos:column="44"/></operator></expr>;<pos:position pos:line="59" pos:column="45"/></expr_stmt></block></while>
				<expr_stmt><expr><name pos:line="60" pos:column="33">sob<pos:position pos:line="60" pos:column="36"/></name> <operator pos:line="60" pos:column="37">=<pos:position pos:line="60" pos:column="38"/></operator> <name pos:line="60" pos:column="39">s<pos:position pos:line="60" pos:column="40"/></name></expr>;<pos:position pos:line="60" pos:column="41"/></expr_stmt>
				<expr_stmt><expr><name><name pos:line="61" pos:column="33">ff_xb<pos:position pos:line="61" pos:column="38"/></name><operator pos:line="61" pos:column="38">.<pos:position pos:line="61" pos:column="39"/></operator><name pos:line="61" pos:column="39">pos<pos:position pos:line="61" pos:column="42"/></name></name> <operator pos:line="61" pos:column="43">=<pos:position pos:line="61" pos:column="44"/></operator> <name pos:line="61" pos:column="45">sob<pos:position pos:line="61" pos:column="48"/></name> <operator pos:line="61" pos:column="49">-<pos:position pos:line="61" pos:column="50"/></operator> <name><name pos:line="61" pos:column="51">ff_xb<pos:position pos:line="61" pos:column="56"/></name><operator pos:line="61" pos:column="56">.<pos:position pos:line="61" pos:column="57"/></operator><name pos:line="61" pos:column="57">buf<pos:position pos:line="61" pos:column="60"/></name></name></expr>;<pos:position pos:line="61" pos:column="61"/></expr_stmt>
				<expr_stmt><expr><name pos:line="62" pos:column="33">flags<pos:position pos:line="62" pos:column="38"/></name> <operator pos:line="62" pos:column="39">|=<pos:position pos:line="62" pos:column="41"/></operator> <name pos:line="62" pos:column="42">ICB_INIT<pos:position pos:line="62" pos:column="50"/></name></expr>;<pos:position pos:line="62" pos:column="51"/></expr_stmt>
			}<pos:position pos:line="63" pos:column="26"/></block></then></if>
		}<pos:position pos:line="64" pos:column="18"/></block></while>

		<if pos:line="66" pos:column="17">if <condition pos:line="66" pos:column="20">(<expr><operator pos:line="66" pos:column="21">(<pos:position pos:line="66" pos:column="22"/></operator><name><name pos:line="66" pos:column="22">ff_xb<pos:position pos:line="66" pos:column="27"/></name><operator pos:line="66" pos:column="27">.<pos:position pos:line="66" pos:column="28"/></operator><name pos:line="66" pos:column="28">len<pos:position pos:line="66" pos:column="31"/></name></name> <operator pos:line="66" pos:column="32">=<pos:position pos:line="66" pos:column="33"/></operator> <name pos:line="66" pos:column="34">s<pos:position pos:line="66" pos:column="35"/></name> <operator pos:line="66" pos:column="36">-<pos:position pos:line="66" pos:column="37"/></operator> <name pos:line="66" pos:column="38">sob<pos:position pos:line="66" pos:column="41"/></name><operator pos:line="66" pos:column="41">)<pos:position pos:line="66" pos:column="42"/></operator> <operator pos:line="66" pos:column="43">==<pos:position pos:line="66" pos:column="45"/></operator> <literal type="number" pos:line="66" pos:column="46">0<pos:position pos:line="66" pos:column="47"/></literal></expr>)<pos:position pos:line="66" pos:column="48"/></condition><then pos:line="66" pos:column="48">
			<block type="pseudo"><expr_stmt><expr><name pos:line="67" pos:column="25">ff_lastchar<pos:position pos:line="67" pos:column="36"/></name> <operator pos:line="67" pos:column="37">=<pos:position pos:line="67" pos:column="38"/></operator> <literal type="char" pos:line="67" pos:column="39">'\0'<pos:position pos:line="67" pos:column="43"/></literal></expr>;<pos:position pos:line="67" pos:column="44"/></expr_stmt></block></then>
		<else pos:line="68" pos:column="17">else <block pos:line="68" pos:column="22">{
			<comment type="block" pos:line="69" pos:column="25">/* Handle a partial string specially, saving any incomplete chars. */</comment>
			<expr_stmt><expr><name pos:line="70" pos:column="25">flags<pos:position pos:line="70" pos:column="30"/></name> <operator pos:line="70" pos:column="31">&amp;=<pos:position pos:line="70" pos:column="37"/></operator> <operator pos:line="70" pos:column="34">~<pos:position pos:line="70" pos:column="35"/></operator><name pos:line="70" pos:column="35">ICB_INCLUDE_INCOMPLETE<pos:position pos:line="70" pos:column="57"/></name></expr>;<pos:position pos:line="70" pos:column="58"/></expr_stmt>
			<if pos:line="71" pos:column="25">if <condition pos:line="71" pos:column="28">(<expr><call><name pos:line="71" pos:column="29">iconvbufs<pos:position pos:line="71" pos:column="38"/></name><argument_list pos:line="71" pos:column="38">(<argument><expr><name pos:line="71" pos:column="39">ic_send<pos:position pos:line="71" pos:column="46"/></name></expr></argument>, <argument><expr><operator pos:line="71" pos:column="48">&amp;<pos:position pos:line="71" pos:column="53"/></operator><name pos:line="71" pos:column="49">ff_xb<pos:position pos:line="71" pos:column="54"/></name></expr></argument>, <argument><expr><operator pos:line="71" pos:column="56">&amp;<pos:position pos:line="71" pos:column="61"/></operator><name><name pos:line="71" pos:column="57">iobuf<pos:position pos:line="71" pos:column="62"/></name><operator pos:line="71" pos:column="62">.<pos:position pos:line="71" pos:column="63"/></operator><name pos:line="71" pos:column="63">out<pos:position pos:line="71" pos:column="66"/></name></name></expr></argument>, <argument><expr><name pos:line="71" pos:column="68">flags<pos:position pos:line="71" pos:column="73"/></name></expr></argument>)<pos:position pos:line="71" pos:column="74"/></argument_list></call> <operator pos:line="71" pos:column="75">&lt;<pos:position pos:line="71" pos:column="79"/></operator> <literal type="number" pos:line="71" pos:column="77">0<pos:position pos:line="71" pos:column="78"/></literal></expr>)<pos:position pos:line="71" pos:column="79"/></condition><then pos:line="71" pos:column="79"> <block pos:line="71" pos:column="80">{
				<if pos:line="72" pos:column="33">if <condition pos:line="72" pos:column="36">(<expr><name pos:line="72" pos:column="37">errno<pos:position pos:line="72" pos:column="42"/></name> <operator pos:line="72" pos:column="43">==<pos:position pos:line="72" pos:column="45"/></operator> <name pos:line="72" pos:column="46">E2BIG<pos:position pos:line="72" pos:column="51"/></name></expr>)<pos:position pos:line="72" pos:column="52"/></condition><then pos:line="72" pos:column="52">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="73" pos:column="41">exit_cleanup<pos:position pos:line="73" pos:column="53"/></name><argument_list pos:line="73" pos:column="53">(<argument><expr><name pos:line="73" pos:column="54">RERR_PROTOCOL<pos:position pos:line="73" pos:column="67"/></name></expr></argument>)<pos:position pos:line="73" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="69"/></expr_stmt></block></then></if> <comment type="block" pos:line="73" pos:column="70">/* impossible? */</comment>
				<if pos:line="74" pos:column="33">if <condition pos:line="74" pos:column="36">(<expr><name><name pos:line="74" pos:column="37">ff_xb<pos:position pos:line="74" pos:column="42"/></name><operator pos:line="74" pos:column="42">.<pos:position pos:line="74" pos:column="43"/></operator><name pos:line="74" pos:column="43">pos<pos:position pos:line="74" pos:column="46"/></name></name></expr>)<pos:position pos:line="74" pos:column="47"/></condition><then pos:line="74" pos:column="47">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="75" pos:column="41">memmove<pos:position pos:line="75" pos:column="48"/></name><argument_list pos:line="75" pos:column="48">(<argument><expr><name><name pos:line="75" pos:column="49">ff_xb<pos:position pos:line="75" pos:column="54"/></name><operator pos:line="75" pos:column="54">.<pos:position pos:line="75" pos:column="55"/></operator><name pos:line="75" pos:column="55">buf<pos:position pos:line="75" pos:column="58"/></name></name></expr></argument>, <argument><expr><name><name pos:line="75" pos:column="60">ff_xb<pos:position pos:line="75" pos:column="65"/></name><operator pos:line="75" pos:column="65">.<pos:position pos:line="75" pos:column="66"/></operator><name pos:line="75" pos:column="66">buf<pos:position pos:line="75" pos:column="69"/></name></name> <operator pos:line="75" pos:column="70">+<pos:position pos:line="75" pos:column="71"/></operator> <name><name pos:line="75" pos:column="72">ff_xb<pos:position pos:line="75" pos:column="77"/></name><operator pos:line="75" pos:column="77">.<pos:position pos:line="75" pos:column="78"/></operator><name pos:line="75" pos:column="78">pos<pos:position pos:line="75" pos:column="81"/></name></name></expr></argument>, <argument><expr><name><name pos:line="75" pos:column="83">ff_xb<pos:position pos:line="75" pos:column="88"/></name><operator pos:line="75" pos:column="88">.<pos:position pos:line="75" pos:column="89"/></operator><name pos:line="75" pos:column="89">len<pos:position pos:line="75" pos:column="92"/></name></name></expr></argument>)<pos:position pos:line="75" pos:column="93"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="94"/></expr_stmt></block></then></if>
			}<pos:position pos:line="76" pos:column="26"/></block></then></if>
			<expr_stmt><expr><name pos:line="77" pos:column="25">ff_lastchar<pos:position pos:line="77" pos:column="36"/></name> <operator pos:line="77" pos:column="37">=<pos:position pos:line="77" pos:column="38"/></operator> <literal type="char" pos:line="77" pos:column="39">'x'<pos:position pos:line="77" pos:column="42"/></literal></expr>;<pos:position pos:line="77" pos:column="43"/></expr_stmt> <comment type="block" pos:line="77" pos:column="44">/* Anything non-zero. */</comment>
		}<pos:position pos:line="78" pos:column="18"/></block></else></if>
	}<pos:position pos:line="79" pos:column="10"/></block></then> <elseif pos:line="79" pos:column="11">else
<cpp:endif pos:line="80" pos:column="1">#<cpp:directive pos:line="80" pos:column="2">endif<pos:position pos:line="80" pos:column="7"/></cpp:directive></cpp:endif>

	<if pos:line="82" pos:column="9">if <condition pos:line="82" pos:column="12">(<expr><name pos:line="82" pos:column="13">len<pos:position pos:line="82" pos:column="16"/></name></expr>)<pos:position pos:line="82" pos:column="17"/></condition><then pos:line="82" pos:column="17"> <block pos:line="82" pos:column="18">{
		<decl_stmt><decl><type><name pos:line="83" pos:column="17">char<pos:position pos:line="83" pos:column="21"/></name> <modifier pos:line="83" pos:column="22">*<pos:position pos:line="83" pos:column="23"/></modifier></type><name pos:line="83" pos:column="23">f<pos:position pos:line="83" pos:column="24"/></name> <init pos:line="83" pos:column="25">= <expr><name><name pos:line="83" pos:column="27">ff_xb<pos:position pos:line="83" pos:column="32"/></name><operator pos:line="83" pos:column="32">.<pos:position pos:line="83" pos:column="33"/></operator><name pos:line="83" pos:column="33">buf<pos:position pos:line="83" pos:column="36"/></name></name> <operator pos:line="83" pos:column="37">+<pos:position pos:line="83" pos:column="38"/></operator> <name><name pos:line="83" pos:column="39">ff_xb<pos:position pos:line="83" pos:column="44"/></name><operator pos:line="83" pos:column="44">.<pos:position pos:line="83" pos:column="45"/></operator><name pos:line="83" pos:column="45">pos<pos:position pos:line="83" pos:column="48"/></name></name></expr></init></decl>;<pos:position pos:line="83" pos:column="49"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="84" pos:column="17">char<pos:position pos:line="84" pos:column="21"/></name> <modifier pos:line="84" pos:column="22">*<pos:position pos:line="84" pos:column="23"/></modifier></type><name pos:line="84" pos:column="23">t<pos:position pos:line="84" pos:column="24"/></name> <init pos:line="84" pos:column="25">= <expr><name><name pos:line="84" pos:column="27">ff_xb<pos:position pos:line="84" pos:column="32"/></name><operator pos:line="84" pos:column="32">.<pos:position pos:line="84" pos:column="33"/></operator><name pos:line="84" pos:column="33">buf<pos:position pos:line="84" pos:column="36"/></name></name></expr></init></decl>;<pos:position pos:line="84" pos:column="37"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="85" pos:column="17">char<pos:position pos:line="85" pos:column="21"/></name> <modifier pos:line="85" pos:column="22">*<pos:position pos:line="85" pos:column="23"/></modifier></type><name pos:line="85" pos:column="23">eob<pos:position pos:line="85" pos:column="26"/></name> <init pos:line="85" pos:column="27">= <expr><name pos:line="85" pos:column="29">f<pos:position pos:line="85" pos:column="30"/></name> <operator pos:line="85" pos:column="31">+<pos:position pos:line="85" pos:column="32"/></operator> <name pos:line="85" pos:column="33">len<pos:position pos:line="85" pos:column="36"/></name></expr></init></decl>;<pos:position pos:line="85" pos:column="37"/></decl_stmt>
		<comment type="block" pos:line="86" pos:column="17">/* Eliminate any multi-'\0' runs. */</comment>
		<while pos:line="87" pos:column="17">while <condition pos:line="87" pos:column="23">(<expr><name pos:line="87" pos:column="24">f<pos:position pos:line="87" pos:column="25"/></name> <operator pos:line="87" pos:column="26">!=<pos:position pos:line="87" pos:column="28"/></operator> <name pos:line="87" pos:column="29">eob<pos:position pos:line="87" pos:column="32"/></name></expr>)<pos:position pos:line="87" pos:column="33"/></condition> <block pos:line="87" pos:column="34">{
			<if pos:line="88" pos:column="25">if <condition pos:line="88" pos:column="28">(<expr><operator pos:line="88" pos:column="29">!<pos:position pos:line="88" pos:column="30"/></operator><operator pos:line="88" pos:column="30">(<pos:position pos:line="88" pos:column="31"/></operator><operator pos:line="88" pos:column="31">*<pos:position pos:line="88" pos:column="32"/></operator><name pos:line="88" pos:column="32">t<pos:position pos:line="88" pos:column="33"/></name><operator pos:line="88" pos:column="33">++<pos:position pos:line="88" pos:column="35"/></operator> <operator pos:line="88" pos:column="36">=<pos:position pos:line="88" pos:column="37"/></operator> <operator pos:line="88" pos:column="38">*<pos:position pos:line="88" pos:column="39"/></operator><name pos:line="88" pos:column="39">f<pos:position pos:line="88" pos:column="40"/></name><operator pos:line="88" pos:column="40">++<pos:position pos:line="88" pos:column="42"/></operator><operator pos:line="88" pos:column="42">)<pos:position pos:line="88" pos:column="43"/></operator></expr>)<pos:position pos:line="88" pos:column="44"/></condition><then pos:line="88" pos:column="44"> <block pos:line="88" pos:column="45">{
				<while pos:line="89" pos:column="33">while <condition pos:line="89" pos:column="39">(<expr><name pos:line="89" pos:column="40">f<pos:position pos:line="89" pos:column="41"/></name> <operator pos:line="89" pos:column="42">!=<pos:position pos:line="89" pos:column="44"/></operator> <name pos:line="89" pos:column="45">eob<pos:position pos:line="89" pos:column="48"/></name> <operator pos:line="89" pos:column="49">&amp;&amp;<pos:position pos:line="89" pos:column="59"/></operator> <operator pos:line="89" pos:column="52">*<pos:position pos:line="89" pos:column="53"/></operator><name pos:line="89" pos:column="53">f<pos:position pos:line="89" pos:column="54"/></name> <operator pos:line="89" pos:column="55">==<pos:position pos:line="89" pos:column="57"/></operator> <literal type="char" pos:line="89" pos:column="58">'\0'<pos:position pos:line="89" pos:column="62"/></literal></expr>)<pos:position pos:line="89" pos:column="63"/></condition>
					<block type="pseudo"><expr_stmt><expr><name pos:line="90" pos:column="41">f<pos:position pos:line="90" pos:column="42"/></name><operator pos:line="90" pos:column="42">++<pos:position pos:line="90" pos:column="44"/></operator></expr>;<pos:position pos:line="90" pos:column="45"/></expr_stmt></block></while>
			}<pos:position pos:line="91" pos:column="26"/></block></then></if>
		}<pos:position pos:line="92" pos:column="18"/></block></while>
		<expr_stmt><expr><name pos:line="93" pos:column="17">ff_lastchar<pos:position pos:line="93" pos:column="28"/></name> <operator pos:line="93" pos:column="29">=<pos:position pos:line="93" pos:column="30"/></operator> <name><name pos:line="93" pos:column="31">f<pos:position pos:line="93" pos:column="32"/></name><index pos:line="93" pos:column="32">[<expr><operator pos:line="93" pos:column="33">-<pos:position pos:line="93" pos:column="34"/></operator><literal type="number" pos:line="93" pos:column="34">1<pos:position pos:line="93" pos:column="35"/></literal></expr>]<pos:position pos:line="93" pos:column="36"/></index></name></expr>;<pos:position pos:line="93" pos:column="37"/></expr_stmt>
		<if pos:line="94" pos:column="17">if <condition pos:line="94" pos:column="20">(<expr><operator pos:line="94" pos:column="21">(<pos:position pos:line="94" pos:column="22"/></operator><name pos:line="94" pos:column="22">len<pos:position pos:line="94" pos:column="25"/></name> <operator pos:line="94" pos:column="26">=<pos:position pos:line="94" pos:column="27"/></operator> <name pos:line="94" pos:column="28">t<pos:position pos:line="94" pos:column="29"/></name> <operator pos:line="94" pos:column="30">-<pos:position pos:line="94" pos:column="31"/></operator> <name><name pos:line="94" pos:column="32">ff_xb<pos:position pos:line="94" pos:column="37"/></name><operator pos:line="94" pos:column="37">.<pos:position pos:line="94" pos:column="38"/></operator><name pos:line="94" pos:column="38">buf<pos:position pos:line="94" pos:column="41"/></name></name><operator pos:line="94" pos:column="41">)<pos:position pos:line="94" pos:column="42"/></operator> <operator pos:line="94" pos:column="43">!=<pos:position pos:line="94" pos:column="45"/></operator> <literal type="number" pos:line="94" pos:column="46">0<pos:position pos:line="94" pos:column="47"/></literal></expr>)<pos:position pos:line="94" pos:column="48"/></condition><then pos:line="94" pos:column="48"> <block pos:line="94" pos:column="49">{
			<comment type="block" pos:line="95" pos:column="25">/* This will not circle back to perform_io() because we only get
			 * called when there is plenty of room in the output buffer. */</comment>
			<expr_stmt><expr><call><name pos:line="97" pos:column="25">write_buf<pos:position pos:line="97" pos:column="34"/></name><argument_list pos:line="97" pos:column="34">(<argument><expr><name><name pos:line="97" pos:column="35">iobuf<pos:position pos:line="97" pos:column="40"/></name><operator pos:line="97" pos:column="40">.<pos:position pos:line="97" pos:column="41"/></operator><name pos:line="97" pos:column="41">out_fd<pos:position pos:line="97" pos:column="47"/></name></name></expr></argument>, <argument><expr><name><name pos:line="97" pos:column="49">ff_xb<pos:position pos:line="97" pos:column="54"/></name><operator pos:line="97" pos:column="54">.<pos:position pos:line="97" pos:column="55"/></operator><name pos:line="97" pos:column="55">buf<pos:position pos:line="97" pos:column="58"/></name></name></expr></argument>, <argument><expr><name pos:line="97" pos:column="60">len<pos:position pos:line="97" pos:column="63"/></name></expr></argument>)<pos:position pos:line="97" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="65"/></expr_stmt>
		}<pos:position pos:line="98" pos:column="18"/></block></then></if>
	}<pos:position pos:line="99" pos:column="10"/></block></then></if></elseif></if>
}<pos:position pos:line="100" pos:column="2"/></block></function></unit>
