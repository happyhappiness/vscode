<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_45_rsync-2.0.18.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">setup_protocol<pos:position pos:line="1" pos:column="20"/></name><parameter_list pos:line="1" pos:column="20">(<parameter><decl><type><name pos:line="1" pos:column="21">int<pos:position pos:line="1" pos:column="24"/></name></type> <name pos:line="1" pos:column="25">f_out<pos:position pos:line="1" pos:column="30"/></name></decl></parameter>,<parameter><decl><type><name pos:line="1" pos:column="31">int<pos:position pos:line="1" pos:column="34"/></name></type> <name pos:line="1" pos:column="35">f_in<pos:position pos:line="1" pos:column="39"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="40"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<if pos:line="3" pos:column="9">if <condition pos:line="3" pos:column="12">(<expr><name pos:line="3" pos:column="13">remote_version<pos:position pos:line="3" pos:column="27"/></name> <operator pos:line="3" pos:column="28">==<pos:position pos:line="3" pos:column="30"/></operator> <literal type="number" pos:line="3" pos:column="31">0<pos:position pos:line="3" pos:column="32"/></literal></expr>)<pos:position pos:line="3" pos:column="33"/></condition><then pos:line="3" pos:column="33"> <block pos:line="3" pos:column="34">{
		<if pos:line="4" pos:column="17">if <condition pos:line="4" pos:column="20">(<expr><name pos:line="4" pos:column="21">am_server<pos:position pos:line="4" pos:column="30"/></name></expr>)<pos:position pos:line="4" pos:column="31"/></condition><then pos:line="4" pos:column="31"> <block pos:line="4" pos:column="32">{
			<expr_stmt><expr><name pos:line="5" pos:column="25">remote_version<pos:position pos:line="5" pos:column="39"/></name> <operator pos:line="5" pos:column="40">=<pos:position pos:line="5" pos:column="41"/></operator> <call><name pos:line="5" pos:column="42">read_int<pos:position pos:line="5" pos:column="50"/></name><argument_list pos:line="5" pos:column="50">(<argument><expr><name pos:line="5" pos:column="51">f_in<pos:position pos:line="5" pos:column="55"/></name></expr></argument>)<pos:position pos:line="5" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="57"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="6" pos:column="25">write_int<pos:position pos:line="6" pos:column="34"/></name><argument_list pos:line="6" pos:column="34">(<argument><expr><name pos:line="6" pos:column="35">f_out<pos:position pos:line="6" pos:column="40"/></name></expr></argument>,<argument><expr><name pos:line="6" pos:column="41">PROTOCOL_VERSION<pos:position pos:line="6" pos:column="57"/></name></expr></argument>)<pos:position pos:line="6" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="59"/></expr_stmt>
		}<pos:position pos:line="7" pos:column="18"/></block></then> <else pos:line="7" pos:column="19">else <block pos:line="7" pos:column="24">{
			<expr_stmt><expr><call><name pos:line="8" pos:column="25">write_int<pos:position pos:line="8" pos:column="34"/></name><argument_list pos:line="8" pos:column="34">(<argument><expr><name pos:line="8" pos:column="35">f_out<pos:position pos:line="8" pos:column="40"/></name></expr></argument>,<argument><expr><name pos:line="8" pos:column="41">PROTOCOL_VERSION<pos:position pos:line="8" pos:column="57"/></name></expr></argument>)<pos:position pos:line="8" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="59"/></expr_stmt>
			<expr_stmt><expr><name pos:line="9" pos:column="25">remote_version<pos:position pos:line="9" pos:column="39"/></name> <operator pos:line="9" pos:column="40">=<pos:position pos:line="9" pos:column="41"/></operator> <call><name pos:line="9" pos:column="42">read_int<pos:position pos:line="9" pos:column="50"/></name><argument_list pos:line="9" pos:column="50">(<argument><expr><name pos:line="9" pos:column="51">f_in<pos:position pos:line="9" pos:column="55"/></name></expr></argument>)<pos:position pos:line="9" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="57"/></expr_stmt>
		}<pos:position pos:line="10" pos:column="18"/></block></else></if>
	}<pos:position pos:line="11" pos:column="10"/></block></then></if>

	<if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><name><name pos:line="13" pos:column="13">remote_version<pos:position pos:line="13" pos:column="27"/></name> <argument_list type="generic" pos:line="13" pos:column="28">&lt; <argument><expr><name pos:line="13" pos:column="30">MIN_PROTOCOL_VERSION<pos:position pos:line="13" pos:column="50"/></name> <operator pos:line="13" pos:column="51">||<pos:position pos:line="13" pos:column="53"/></operator>
	    <name pos:line="14" pos:column="13">remote_version<pos:position pos:line="14" pos:column="27"/></name></expr></argument> &gt;<pos:position pos:line="14" pos:column="32"/></argument_list></name> <name pos:line="14" pos:column="30">MAX_PROTOCOL_VERSION<pos:position pos:line="14" pos:column="50"/></name></expr>)<pos:position pos:line="14" pos:column="51"/></condition><then pos:line="14" pos:column="51"> <block pos:line="14" pos:column="52">{
		<expr_stmt><expr><call><name pos:line="15" pos:column="17">rprintf<pos:position pos:line="15" pos:column="24"/></name><argument_list pos:line="15" pos:column="24">(<argument><expr><name pos:line="15" pos:column="25">FERROR<pos:position pos:line="15" pos:column="31"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="15" pos:column="32">"protocol version mismatch - is your shell clean?\n"<pos:position pos:line="15" pos:column="84"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="86"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="16" pos:column="17">exit_cleanup<pos:position pos:line="16" pos:column="29"/></name><argument_list pos:line="16" pos:column="29">(<argument><expr><literal type="number" pos:line="16" pos:column="30">1<pos:position pos:line="16" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="33"/></expr_stmt>
	}<pos:position pos:line="17" pos:column="10"/></block></then></if>	
	
	<if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><name pos:line="19" pos:column="13">verbose<pos:position pos:line="19" pos:column="20"/></name> <operator pos:line="19" pos:column="21">&gt;<pos:position pos:line="19" pos:column="25"/></operator> <literal type="number" pos:line="19" pos:column="23">2<pos:position pos:line="19" pos:column="24"/></literal></expr>)<pos:position pos:line="19" pos:column="25"/></condition><then pos:line="19" pos:column="25">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="20" pos:column="17">rprintf<pos:position pos:line="20" pos:column="24"/></name><argument_list pos:line="20" pos:column="24">(<argument><expr><name pos:line="20" pos:column="25">FINFO<pos:position pos:line="20" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="32">"local_version=%d remote_version=%d\n"<pos:position pos:line="20" pos:column="70"/></literal></expr></argument>,
			<argument><expr><name pos:line="21" pos:column="25">PROTOCOL_VERSION<pos:position pos:line="21" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="43">remote_version<pos:position pos:line="21" pos:column="57"/></name></expr></argument>)<pos:position pos:line="21" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="59"/></expr_stmt></block></then></if>
	
	<if pos:line="23" pos:column="9">if <condition pos:line="23" pos:column="12">(<expr><name pos:line="23" pos:column="13">remote_version<pos:position pos:line="23" pos:column="27"/></name> <operator pos:line="23" pos:column="28">&gt;=<pos:position pos:line="23" pos:column="33"/></operator> <literal type="number" pos:line="23" pos:column="31">12<pos:position pos:line="23" pos:column="33"/></literal></expr>)<pos:position pos:line="23" pos:column="34"/></condition><then pos:line="23" pos:column="34"> <block pos:line="23" pos:column="35">{
		<if pos:line="24" pos:column="17">if <condition pos:line="24" pos:column="20">(<expr><name pos:line="24" pos:column="21">am_server<pos:position pos:line="24" pos:column="30"/></name></expr>)<pos:position pos:line="24" pos:column="31"/></condition><then pos:line="24" pos:column="31"> <block pos:line="24" pos:column="32">{
			<expr_stmt><expr><name pos:line="25" pos:column="25">checksum_seed<pos:position pos:line="25" pos:column="38"/></name> <operator pos:line="25" pos:column="39">=<pos:position pos:line="25" pos:column="40"/></operator> <call><name pos:line="25" pos:column="41">time<pos:position pos:line="25" pos:column="45"/></name><argument_list pos:line="25" pos:column="45">(<argument><expr><name pos:line="25" pos:column="46">NULL<pos:position pos:line="25" pos:column="50"/></name></expr></argument>)<pos:position pos:line="25" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="52"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="26" pos:column="25">write_int<pos:position pos:line="26" pos:column="34"/></name><argument_list pos:line="26" pos:column="34">(<argument><expr><name pos:line="26" pos:column="35">f_out<pos:position pos:line="26" pos:column="40"/></name></expr></argument>,<argument><expr><name pos:line="26" pos:column="41">checksum_seed<pos:position pos:line="26" pos:column="54"/></name></expr></argument>)<pos:position pos:line="26" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="56"/></expr_stmt>
		}<pos:position pos:line="27" pos:column="18"/></block></then> <else pos:line="27" pos:column="19">else <block pos:line="27" pos:column="24">{
			<expr_stmt><expr><name pos:line="28" pos:column="25">checksum_seed<pos:position pos:line="28" pos:column="38"/></name> <operator pos:line="28" pos:column="39">=<pos:position pos:line="28" pos:column="40"/></operator> <call><name pos:line="28" pos:column="41">read_int<pos:position pos:line="28" pos:column="49"/></name><argument_list pos:line="28" pos:column="49">(<argument><expr><name pos:line="28" pos:column="50">f_in<pos:position pos:line="28" pos:column="54"/></name></expr></argument>)<pos:position pos:line="28" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="56"/></expr_stmt>
		}<pos:position pos:line="29" pos:column="18"/></block></else></if>
	}<pos:position pos:line="30" pos:column="10"/></block></then></if>
	
	<expr_stmt><expr><call><name pos:line="32" pos:column="9">checksum_init<pos:position pos:line="32" pos:column="22"/></name><argument_list pos:line="32" pos:column="22">()<pos:position pos:line="32" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="25"/></expr_stmt>
}<pos:position pos:line="33" pos:column="2"/></block></function></unit>
