<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_318_rsync-2.0.18.cpp" pos:tabs="8"><decl_stmt><decl><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">inflate_flush<pos:position pos:line="1" pos:column="18"/></name><argument_list pos:line="1" pos:column="18">(<argument><expr><name pos:line="1" pos:column="19">s<pos:position pos:line="1" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="1" pos:column="22">z<pos:position pos:line="1" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="1" pos:column="25">r<pos:position pos:line="1" pos:column="26"/></name></expr></argument>)<pos:position pos:line="1" pos:column="27"/></argument_list>
<name pos:line="2" pos:column="1">inflate_blocks_statef<pos:position pos:line="2" pos:column="22"/></name> <modifier pos:line="2" pos:column="23">*<pos:position pos:line="2" pos:column="24"/></modifier><name pos:line="2" pos:column="24">s<pos:position pos:line="2" pos:column="25"/></name></decl>;<pos:position pos:line="2" pos:column="26"/></decl_stmt>
<decl_stmt><decl><type><name pos:line="3" pos:column="1">z_streamp<pos:position pos:line="3" pos:column="10"/></name></type> <name pos:line="3" pos:column="11">z<pos:position pos:line="3" pos:column="12"/></name></decl>;<pos:position pos:line="3" pos:column="13"/></decl_stmt>
<decl_stmt><decl><type><name pos:line="4" pos:column="1">int<pos:position pos:line="4" pos:column="4"/></name></type> <name pos:line="4" pos:column="5">r<pos:position pos:line="4" pos:column="6"/></name></decl>;<pos:position pos:line="4" pos:column="7"/></decl_stmt>
<block pos:line="5" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">uInt<pos:position pos:line="6" pos:column="7"/></name></type> <name pos:line="6" pos:column="8">n<pos:position pos:line="6" pos:column="9"/></name></decl>;<pos:position pos:line="6" pos:column="10"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">Bytef<pos:position pos:line="7" pos:column="8"/></name> <modifier pos:line="7" pos:column="9">*<pos:position pos:line="7" pos:column="10"/></modifier></type><name pos:line="7" pos:column="10">p<pos:position pos:line="7" pos:column="11"/></name></decl>;<pos:position pos:line="7" pos:column="12"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">Bytef<pos:position pos:line="8" pos:column="8"/></name> <modifier pos:line="8" pos:column="9">*<pos:position pos:line="8" pos:column="10"/></modifier></type><name pos:line="8" pos:column="10">q<pos:position pos:line="8" pos:column="11"/></name></decl>;<pos:position pos:line="8" pos:column="12"/></decl_stmt>

  <comment type="block" pos:line="10" pos:column="3">/* local copies of source and destination pointers */</comment>
  <expr_stmt><expr><name pos:line="11" pos:column="3">p<pos:position pos:line="11" pos:column="4"/></name> <operator pos:line="11" pos:column="5">=<pos:position pos:line="11" pos:column="6"/></operator> <name><name pos:line="11" pos:column="7">z<pos:position pos:line="11" pos:column="8"/></name><operator pos:line="11" pos:column="8">-&gt;<pos:position pos:line="11" pos:column="13"/></operator><name pos:line="11" pos:column="10">next_out<pos:position pos:line="11" pos:column="18"/></name></name></expr>;<pos:position pos:line="11" pos:column="19"/></expr_stmt>
  <expr_stmt><expr><name pos:line="12" pos:column="3">q<pos:position pos:line="12" pos:column="4"/></name> <operator pos:line="12" pos:column="5">=<pos:position pos:line="12" pos:column="6"/></operator> <name><name pos:line="12" pos:column="7">s<pos:position pos:line="12" pos:column="8"/></name><operator pos:line="12" pos:column="8">-&gt;<pos:position pos:line="12" pos:column="13"/></operator><name pos:line="12" pos:column="10">read<pos:position pos:line="12" pos:column="14"/></name></name></expr>;<pos:position pos:line="12" pos:column="15"/></expr_stmt>

  <comment type="block" pos:line="14" pos:column="3">/* compute number of bytes to copy as far as end of window */</comment>
  <expr_stmt><expr><name pos:line="15" pos:column="3">n<pos:position pos:line="15" pos:column="4"/></name> <operator pos:line="15" pos:column="5">=<pos:position pos:line="15" pos:column="6"/></operator> <call pos:line="15" pos:column="7">(<name pos:line="15" pos:column="8">uInt<pos:position pos:line="15" pos:column="12"/></name>)<argument_list pos:line="15" pos:column="13">(<argument><expr><operator pos:line="15" pos:column="14">(<pos:position pos:line="15" pos:column="15"/></operator><ternary><condition><expr><name pos:line="15" pos:column="15">q<pos:position pos:line="15" pos:column="16"/></name> <operator pos:line="15" pos:column="17">&lt;=<pos:position pos:line="15" pos:column="22"/></operator> <name><name pos:line="15" pos:column="20">s<pos:position pos:line="15" pos:column="21"/></name><operator pos:line="15" pos:column="21">-&gt;<pos:position pos:line="15" pos:column="26"/></operator><name pos:line="15" pos:column="23">write<pos:position pos:line="15" pos:column="28"/></name></name></expr> ?<pos:position pos:line="15" pos:column="30"/></condition><then pos:line="15" pos:column="30"> <expr><name><name pos:line="15" pos:column="31">s<pos:position pos:line="15" pos:column="32"/></name><operator pos:line="15" pos:column="32">-&gt;<pos:position pos:line="15" pos:column="37"/></operator><name pos:line="15" pos:column="34">write<pos:position pos:line="15" pos:column="39"/></name></name></expr> <pos:position pos:line="15" pos:column="40"/></then><else pos:line="15" pos:column="40">: <expr><name><name pos:line="15" pos:column="42">s<pos:position pos:line="15" pos:column="43"/></name><operator pos:line="15" pos:column="43">-&gt;<pos:position pos:line="15" pos:column="48"/></operator><name pos:line="15" pos:column="45">end<pos:position pos:line="15" pos:column="48"/></name></name></expr></else></ternary><operator pos:line="15" pos:column="48">)<pos:position pos:line="15" pos:column="49"/></operator> <operator pos:line="15" pos:column="50">-<pos:position pos:line="15" pos:column="51"/></operator> <name pos:line="15" pos:column="52">q<pos:position pos:line="15" pos:column="53"/></name></expr></argument>)<pos:position pos:line="15" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="55"/></expr_stmt>
  <if pos:line="16" pos:column="3">if <condition pos:line="16" pos:column="6">(<expr><name pos:line="16" pos:column="7">n<pos:position pos:line="16" pos:column="8"/></name> <operator pos:line="16" pos:column="9">&gt;<pos:position pos:line="16" pos:column="13"/></operator> <name><name pos:line="16" pos:column="11">z<pos:position pos:line="16" pos:column="12"/></name><operator pos:line="16" pos:column="12">-&gt;<pos:position pos:line="16" pos:column="17"/></operator><name pos:line="16" pos:column="14">avail_out<pos:position pos:line="16" pos:column="23"/></name></name></expr>)<pos:position pos:line="16" pos:column="24"/></condition><then pos:line="16" pos:column="24"> <block type="pseudo"><expr_stmt><expr><name pos:line="16" pos:column="25">n<pos:position pos:line="16" pos:column="26"/></name> <operator pos:line="16" pos:column="27">=<pos:position pos:line="16" pos:column="28"/></operator> <name><name pos:line="16" pos:column="29">z<pos:position pos:line="16" pos:column="30"/></name><operator pos:line="16" pos:column="30">-&gt;<pos:position pos:line="16" pos:column="35"/></operator><name pos:line="16" pos:column="32">avail_out<pos:position pos:line="16" pos:column="41"/></name></name></expr>;<pos:position pos:line="16" pos:column="42"/></expr_stmt></block></then></if>
  <if pos:line="17" pos:column="3">if <condition pos:line="17" pos:column="6">(<expr><name pos:line="17" pos:column="7">n<pos:position pos:line="17" pos:column="8"/></name> <operator pos:line="17" pos:column="9">&amp;&amp;<pos:position pos:line="17" pos:column="19"/></operator> <name pos:line="17" pos:column="12">r<pos:position pos:line="17" pos:column="13"/></name> <operator pos:line="17" pos:column="14">==<pos:position pos:line="17" pos:column="16"/></operator> <name pos:line="17" pos:column="17">Z_BUF_ERROR<pos:position pos:line="17" pos:column="28"/></name></expr>)<pos:position pos:line="17" pos:column="29"/></condition><then pos:line="17" pos:column="29"> <block type="pseudo"><expr_stmt><expr><name pos:line="17" pos:column="30">r<pos:position pos:line="17" pos:column="31"/></name> <operator pos:line="17" pos:column="32">=<pos:position pos:line="17" pos:column="33"/></operator> <name pos:line="17" pos:column="34">Z_OK<pos:position pos:line="17" pos:column="38"/></name></expr>;<pos:position pos:line="17" pos:column="39"/></expr_stmt></block></then></if>

  <comment type="block" pos:line="19" pos:column="3">/* update counters */</comment>
  <expr_stmt><expr><name><name pos:line="20" pos:column="3">z<pos:position pos:line="20" pos:column="4"/></name><operator pos:line="20" pos:column="4">-&gt;<pos:position pos:line="20" pos:column="9"/></operator><name pos:line="20" pos:column="6">avail_out<pos:position pos:line="20" pos:column="15"/></name></name> <operator pos:line="20" pos:column="16">-=<pos:position pos:line="20" pos:column="18"/></operator> <name pos:line="20" pos:column="19">n<pos:position pos:line="20" pos:column="20"/></name></expr>;<pos:position pos:line="20" pos:column="21"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="21" pos:column="3">z<pos:position pos:line="21" pos:column="4"/></name><operator pos:line="21" pos:column="4">-&gt;<pos:position pos:line="21" pos:column="9"/></operator><name pos:line="21" pos:column="6">total_out<pos:position pos:line="21" pos:column="15"/></name></name> <operator pos:line="21" pos:column="16">+=<pos:position pos:line="21" pos:column="18"/></operator> <name pos:line="21" pos:column="19">n<pos:position pos:line="21" pos:column="20"/></name></expr>;<pos:position pos:line="21" pos:column="21"/></expr_stmt>

  <comment type="block" pos:line="23" pos:column="3">/* update check information */</comment>
  <if pos:line="24" pos:column="3">if <condition pos:line="24" pos:column="6">(<expr><name><name pos:line="24" pos:column="7">s<pos:position pos:line="24" pos:column="8"/></name><operator pos:line="24" pos:column="8">-&gt;<pos:position pos:line="24" pos:column="13"/></operator><name pos:line="24" pos:column="10">checkfn<pos:position pos:line="24" pos:column="17"/></name></name> <operator pos:line="24" pos:column="18">!=<pos:position pos:line="24" pos:column="20"/></operator> <name pos:line="24" pos:column="21">Z_NULL<pos:position pos:line="24" pos:column="27"/></name></expr>)<pos:position pos:line="24" pos:column="28"/></condition><then pos:line="24" pos:column="28">
    <block type="pseudo"><expr_stmt><expr><name><name pos:line="25" pos:column="5">z<pos:position pos:line="25" pos:column="6"/></name><operator pos:line="25" pos:column="6">-&gt;<pos:position pos:line="25" pos:column="11"/></operator><name pos:line="25" pos:column="8">adler<pos:position pos:line="25" pos:column="13"/></name></name> <operator pos:line="25" pos:column="14">=<pos:position pos:line="25" pos:column="15"/></operator> <name><name pos:line="25" pos:column="16">s<pos:position pos:line="25" pos:column="17"/></name><operator pos:line="25" pos:column="17">-&gt;<pos:position pos:line="25" pos:column="22"/></operator><name pos:line="25" pos:column="19">check<pos:position pos:line="25" pos:column="24"/></name></name> <operator pos:line="25" pos:column="25">=<pos:position pos:line="25" pos:column="26"/></operator> <call pos:line="25" pos:column="27">(<modifier pos:line="25" pos:column="28">*<pos:position pos:line="25" pos:column="29"/></modifier><name><name pos:line="25" pos:column="29">s<pos:position pos:line="25" pos:column="30"/></name><operator pos:line="25" pos:column="30">-&gt;<pos:position pos:line="25" pos:column="35"/></operator><name pos:line="25" pos:column="32">checkfn<pos:position pos:line="25" pos:column="39"/></name></name>)<argument_list pos:line="25" pos:column="40">(<argument><expr><name><name pos:line="25" pos:column="41">s<pos:position pos:line="25" pos:column="42"/></name><operator pos:line="25" pos:column="42">-&gt;<pos:position pos:line="25" pos:column="47"/></operator><name pos:line="25" pos:column="44">check<pos:position pos:line="25" pos:column="49"/></name></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="51">q<pos:position pos:line="25" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="54">n<pos:position pos:line="25" pos:column="55"/></name></expr></argument>)<pos:position pos:line="25" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="57"/></expr_stmt></block></then></if>

  <comment type="block" pos:line="27" pos:column="3">/* copy as far as end of window */</comment>
  <expr_stmt><expr><call><name pos:line="28" pos:column="3">zmemcpy<pos:position pos:line="28" pos:column="10"/></name><argument_list pos:line="28" pos:column="10">(<argument><expr><name pos:line="28" pos:column="11">p<pos:position pos:line="28" pos:column="12"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="14">q<pos:position pos:line="28" pos:column="15"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="17">n<pos:position pos:line="28" pos:column="18"/></name></expr></argument>)<pos:position pos:line="28" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="20"/></expr_stmt>
  <expr_stmt><expr><name pos:line="29" pos:column="3">p<pos:position pos:line="29" pos:column="4"/></name> <operator pos:line="29" pos:column="5">+=<pos:position pos:line="29" pos:column="7"/></operator> <name pos:line="29" pos:column="8">n<pos:position pos:line="29" pos:column="9"/></name></expr>;<pos:position pos:line="29" pos:column="10"/></expr_stmt>
  <expr_stmt><expr><name pos:line="30" pos:column="3">q<pos:position pos:line="30" pos:column="4"/></name> <operator pos:line="30" pos:column="5">+=<pos:position pos:line="30" pos:column="7"/></operator> <name pos:line="30" pos:column="8">n<pos:position pos:line="30" pos:column="9"/></name></expr>;<pos:position pos:line="30" pos:column="10"/></expr_stmt>

  <comment type="block" pos:line="32" pos:column="3">/* see if more to copy at beginning of window */</comment>
  <if pos:line="33" pos:column="3">if <condition pos:line="33" pos:column="6">(<expr><name pos:line="33" pos:column="7">q<pos:position pos:line="33" pos:column="8"/></name> <operator pos:line="33" pos:column="9">==<pos:position pos:line="33" pos:column="11"/></operator> <name><name pos:line="33" pos:column="12">s<pos:position pos:line="33" pos:column="13"/></name><operator pos:line="33" pos:column="13">-&gt;<pos:position pos:line="33" pos:column="18"/></operator><name pos:line="33" pos:column="15">end<pos:position pos:line="33" pos:column="18"/></name></name></expr>)<pos:position pos:line="33" pos:column="19"/></condition><then pos:line="33" pos:column="19">
  <block pos:line="34" pos:column="3">{
    <comment type="block" pos:line="35" pos:column="5">/* wrap pointers */</comment>
    <expr_stmt><expr><name pos:line="36" pos:column="5">q<pos:position pos:line="36" pos:column="6"/></name> <operator pos:line="36" pos:column="7">=<pos:position pos:line="36" pos:column="8"/></operator> <name><name pos:line="36" pos:column="9">s<pos:position pos:line="36" pos:column="10"/></name><operator pos:line="36" pos:column="10">-&gt;<pos:position pos:line="36" pos:column="15"/></operator><name pos:line="36" pos:column="12">window<pos:position pos:line="36" pos:column="18"/></name></name></expr>;<pos:position pos:line="36" pos:column="19"/></expr_stmt>
    <if pos:line="37" pos:column="5">if <condition pos:line="37" pos:column="8">(<expr><name><name pos:line="37" pos:column="9">s<pos:position pos:line="37" pos:column="10"/></name><operator pos:line="37" pos:column="10">-&gt;<pos:position pos:line="37" pos:column="15"/></operator><name pos:line="37" pos:column="12">write<pos:position pos:line="37" pos:column="17"/></name></name> <operator pos:line="37" pos:column="18">==<pos:position pos:line="37" pos:column="20"/></operator> <name><name pos:line="37" pos:column="21">s<pos:position pos:line="37" pos:column="22"/></name><operator pos:line="37" pos:column="22">-&gt;<pos:position pos:line="37" pos:column="27"/></operator><name pos:line="37" pos:column="24">end<pos:position pos:line="37" pos:column="27"/></name></name></expr>)<pos:position pos:line="37" pos:column="28"/></condition><then pos:line="37" pos:column="28">
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="38" pos:column="7">s<pos:position pos:line="38" pos:column="8"/></name><operator pos:line="38" pos:column="8">-&gt;<pos:position pos:line="38" pos:column="13"/></operator><name pos:line="38" pos:column="10">write<pos:position pos:line="38" pos:column="15"/></name></name> <operator pos:line="38" pos:column="16">=<pos:position pos:line="38" pos:column="17"/></operator> <name><name pos:line="38" pos:column="18">s<pos:position pos:line="38" pos:column="19"/></name><operator pos:line="38" pos:column="19">-&gt;<pos:position pos:line="38" pos:column="24"/></operator><name pos:line="38" pos:column="21">window<pos:position pos:line="38" pos:column="27"/></name></name></expr>;<pos:position pos:line="38" pos:column="28"/></expr_stmt></block></then></if>

    <comment type="block" pos:line="40" pos:column="5">/* compute bytes to copy */</comment>
    <expr_stmt><expr><name pos:line="41" pos:column="5">n<pos:position pos:line="41" pos:column="6"/></name> <operator pos:line="41" pos:column="7">=<pos:position pos:line="41" pos:column="8"/></operator> <call pos:line="41" pos:column="9">(<name pos:line="41" pos:column="10">uInt<pos:position pos:line="41" pos:column="14"/></name>)<argument_list pos:line="41" pos:column="15">(<argument><expr><name><name pos:line="41" pos:column="16">s<pos:position pos:line="41" pos:column="17"/></name><operator pos:line="41" pos:column="17">-&gt;<pos:position pos:line="41" pos:column="22"/></operator><name pos:line="41" pos:column="19">write<pos:position pos:line="41" pos:column="24"/></name></name> <operator pos:line="41" pos:column="25">-<pos:position pos:line="41" pos:column="26"/></operator> <name pos:line="41" pos:column="27">q<pos:position pos:line="41" pos:column="28"/></name></expr></argument>)<pos:position pos:line="41" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="30"/></expr_stmt>
    <if pos:line="42" pos:column="5">if <condition pos:line="42" pos:column="8">(<expr><name pos:line="42" pos:column="9">n<pos:position pos:line="42" pos:column="10"/></name> <operator pos:line="42" pos:column="11">&gt;<pos:position pos:line="42" pos:column="15"/></operator> <name><name pos:line="42" pos:column="13">z<pos:position pos:line="42" pos:column="14"/></name><operator pos:line="42" pos:column="14">-&gt;<pos:position pos:line="42" pos:column="19"/></operator><name pos:line="42" pos:column="16">avail_out<pos:position pos:line="42" pos:column="25"/></name></name></expr>)<pos:position pos:line="42" pos:column="26"/></condition><then pos:line="42" pos:column="26"> <block type="pseudo"><expr_stmt><expr><name pos:line="42" pos:column="27">n<pos:position pos:line="42" pos:column="28"/></name> <operator pos:line="42" pos:column="29">=<pos:position pos:line="42" pos:column="30"/></operator> <name><name pos:line="42" pos:column="31">z<pos:position pos:line="42" pos:column="32"/></name><operator pos:line="42" pos:column="32">-&gt;<pos:position pos:line="42" pos:column="37"/></operator><name pos:line="42" pos:column="34">avail_out<pos:position pos:line="42" pos:column="43"/></name></name></expr>;<pos:position pos:line="42" pos:column="44"/></expr_stmt></block></then></if>
    <if pos:line="43" pos:column="5">if <condition pos:line="43" pos:column="8">(<expr><name pos:line="43" pos:column="9">n<pos:position pos:line="43" pos:column="10"/></name> <operator pos:line="43" pos:column="11">&amp;&amp;<pos:position pos:line="43" pos:column="21"/></operator> <name pos:line="43" pos:column="14">r<pos:position pos:line="43" pos:column="15"/></name> <operator pos:line="43" pos:column="16">==<pos:position pos:line="43" pos:column="18"/></operator> <name pos:line="43" pos:column="19">Z_BUF_ERROR<pos:position pos:line="43" pos:column="30"/></name></expr>)<pos:position pos:line="43" pos:column="31"/></condition><then pos:line="43" pos:column="31"> <block type="pseudo"><expr_stmt><expr><name pos:line="43" pos:column="32">r<pos:position pos:line="43" pos:column="33"/></name> <operator pos:line="43" pos:column="34">=<pos:position pos:line="43" pos:column="35"/></operator> <name pos:line="43" pos:column="36">Z_OK<pos:position pos:line="43" pos:column="40"/></name></expr>;<pos:position pos:line="43" pos:column="41"/></expr_stmt></block></then></if>

    <comment type="block" pos:line="45" pos:column="5">/* update counters */</comment>
    <expr_stmt><expr><name><name pos:line="46" pos:column="5">z<pos:position pos:line="46" pos:column="6"/></name><operator pos:line="46" pos:column="6">-&gt;<pos:position pos:line="46" pos:column="11"/></operator><name pos:line="46" pos:column="8">avail_out<pos:position pos:line="46" pos:column="17"/></name></name> <operator pos:line="46" pos:column="18">-=<pos:position pos:line="46" pos:column="20"/></operator> <name pos:line="46" pos:column="21">n<pos:position pos:line="46" pos:column="22"/></name></expr>;<pos:position pos:line="46" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="47" pos:column="5">z<pos:position pos:line="47" pos:column="6"/></name><operator pos:line="47" pos:column="6">-&gt;<pos:position pos:line="47" pos:column="11"/></operator><name pos:line="47" pos:column="8">total_out<pos:position pos:line="47" pos:column="17"/></name></name> <operator pos:line="47" pos:column="18">+=<pos:position pos:line="47" pos:column="20"/></operator> <name pos:line="47" pos:column="21">n<pos:position pos:line="47" pos:column="22"/></name></expr>;<pos:position pos:line="47" pos:column="23"/></expr_stmt>

    <comment type="block" pos:line="49" pos:column="5">/* update check information */</comment>
    <if pos:line="50" pos:column="5">if <condition pos:line="50" pos:column="8">(<expr><name><name pos:line="50" pos:column="9">s<pos:position pos:line="50" pos:column="10"/></name><operator pos:line="50" pos:column="10">-&gt;<pos:position pos:line="50" pos:column="15"/></operator><name pos:line="50" pos:column="12">checkfn<pos:position pos:line="50" pos:column="19"/></name></name> <operator pos:line="50" pos:column="20">!=<pos:position pos:line="50" pos:column="22"/></operator> <name pos:line="50" pos:column="23">Z_NULL<pos:position pos:line="50" pos:column="29"/></name></expr>)<pos:position pos:line="50" pos:column="30"/></condition><then pos:line="50" pos:column="30">
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="51" pos:column="7">z<pos:position pos:line="51" pos:column="8"/></name><operator pos:line="51" pos:column="8">-&gt;<pos:position pos:line="51" pos:column="13"/></operator><name pos:line="51" pos:column="10">adler<pos:position pos:line="51" pos:column="15"/></name></name> <operator pos:line="51" pos:column="16">=<pos:position pos:line="51" pos:column="17"/></operator> <name><name pos:line="51" pos:column="18">s<pos:position pos:line="51" pos:column="19"/></name><operator pos:line="51" pos:column="19">-&gt;<pos:position pos:line="51" pos:column="24"/></operator><name pos:line="51" pos:column="21">check<pos:position pos:line="51" pos:column="26"/></name></name> <operator pos:line="51" pos:column="27">=<pos:position pos:line="51" pos:column="28"/></operator> <call pos:line="51" pos:column="29">(<modifier pos:line="51" pos:column="30">*<pos:position pos:line="51" pos:column="31"/></modifier><name><name pos:line="51" pos:column="31">s<pos:position pos:line="51" pos:column="32"/></name><operator pos:line="51" pos:column="32">-&gt;<pos:position pos:line="51" pos:column="37"/></operator><name pos:line="51" pos:column="34">checkfn<pos:position pos:line="51" pos:column="41"/></name></name>)<argument_list pos:line="51" pos:column="42">(<argument><expr><name><name pos:line="51" pos:column="43">s<pos:position pos:line="51" pos:column="44"/></name><operator pos:line="51" pos:column="44">-&gt;<pos:position pos:line="51" pos:column="49"/></operator><name pos:line="51" pos:column="46">check<pos:position pos:line="51" pos:column="51"/></name></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="53">q<pos:position pos:line="51" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="56">n<pos:position pos:line="51" pos:column="57"/></name></expr></argument>)<pos:position pos:line="51" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="59"/></expr_stmt></block></then></if>

    <comment type="block" pos:line="53" pos:column="5">/* copy */</comment>
    <expr_stmt><expr><call><name pos:line="54" pos:column="5">zmemcpy<pos:position pos:line="54" pos:column="12"/></name><argument_list pos:line="54" pos:column="12">(<argument><expr><name pos:line="54" pos:column="13">p<pos:position pos:line="54" pos:column="14"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="16">q<pos:position pos:line="54" pos:column="17"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="19">n<pos:position pos:line="54" pos:column="20"/></name></expr></argument>)<pos:position pos:line="54" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="22"/></expr_stmt>
    <expr_stmt><expr><name pos:line="55" pos:column="5">p<pos:position pos:line="55" pos:column="6"/></name> <operator pos:line="55" pos:column="7">+=<pos:position pos:line="55" pos:column="9"/></operator> <name pos:line="55" pos:column="10">n<pos:position pos:line="55" pos:column="11"/></name></expr>;<pos:position pos:line="55" pos:column="12"/></expr_stmt>
    <expr_stmt><expr><name pos:line="56" pos:column="5">q<pos:position pos:line="56" pos:column="6"/></name> <operator pos:line="56" pos:column="7">+=<pos:position pos:line="56" pos:column="9"/></operator> <name pos:line="56" pos:column="10">n<pos:position pos:line="56" pos:column="11"/></name></expr>;<pos:position pos:line="56" pos:column="12"/></expr_stmt>
  }<pos:position pos:line="57" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="59" pos:column="3">/* update pointers */</comment>
  <expr_stmt><expr><name><name pos:line="60" pos:column="3">z<pos:position pos:line="60" pos:column="4"/></name><operator pos:line="60" pos:column="4">-&gt;<pos:position pos:line="60" pos:column="9"/></operator><name pos:line="60" pos:column="6">next_out<pos:position pos:line="60" pos:column="14"/></name></name> <operator pos:line="60" pos:column="15">=<pos:position pos:line="60" pos:column="16"/></operator> <name pos:line="60" pos:column="17">p<pos:position pos:line="60" pos:column="18"/></name></expr>;<pos:position pos:line="60" pos:column="19"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="61" pos:column="3">s<pos:position pos:line="61" pos:column="4"/></name><operator pos:line="61" pos:column="4">-&gt;<pos:position pos:line="61" pos:column="9"/></operator><name pos:line="61" pos:column="6">read<pos:position pos:line="61" pos:column="10"/></name></name> <operator pos:line="61" pos:column="11">=<pos:position pos:line="61" pos:column="12"/></operator> <name pos:line="61" pos:column="13">q<pos:position pos:line="61" pos:column="14"/></name></expr>;<pos:position pos:line="61" pos:column="15"/></expr_stmt>

  <comment type="block" pos:line="63" pos:column="3">/* done */</comment>
  <return pos:line="64" pos:column="3">return <expr><name pos:line="64" pos:column="10">r<pos:position pos:line="64" pos:column="11"/></name></expr>;<pos:position pos:line="64" pos:column="12"/></return>
}<pos:position pos:line="65" pos:column="2"/></block></unit>
