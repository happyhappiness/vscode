<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_140_rsync-2.0.18.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">vslprintf<pos:position pos:line="1" pos:column="14"/></name><parameter_list pos:line="1" pos:column="14">(<parameter><decl><type><name pos:line="1" pos:column="15">char<pos:position pos:line="1" pos:column="19"/></name> <modifier pos:line="1" pos:column="20">*<pos:position pos:line="1" pos:column="21"/></modifier></type><name pos:line="1" pos:column="21">str<pos:position pos:line="1" pos:column="24"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="26">int<pos:position pos:line="1" pos:column="29"/></name></type> <name pos:line="1" pos:column="30">n<pos:position pos:line="1" pos:column="31"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="33">const<pos:position pos:line="1" pos:column="38"/></specifier> <name pos:line="1" pos:column="39">char<pos:position pos:line="1" pos:column="43"/></name> <modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier></type><name pos:line="1" pos:column="45">format<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="53">va_list<pos:position pos:line="1" pos:column="60"/></name></type> <name pos:line="1" pos:column="61">ap<pos:position pos:line="1" pos:column="63"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="64"/></parameter_list>
<block pos:line="2" pos:column="1">{
<cpp:ifdef pos:line="3" pos:column="1">#<cpp:directive pos:line="3" pos:column="2">ifdef<pos:position pos:line="3" pos:column="7"/></cpp:directive> <name pos:line="3" pos:column="8">HAVE_VSNPRINTF<pos:position pos:line="3" pos:column="22"/></name></cpp:ifdef>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">ret<pos:position pos:line="4" pos:column="16"/></name> <init pos:line="4" pos:column="17">= <expr><call><name pos:line="4" pos:column="19">vsnprintf<pos:position pos:line="4" pos:column="28"/></name><argument_list pos:line="4" pos:column="28">(<argument><expr><name pos:line="4" pos:column="29">str<pos:position pos:line="4" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="4" pos:column="34">n<pos:position pos:line="4" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="4" pos:column="37">format<pos:position pos:line="4" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="4" pos:column="45">ap<pos:position pos:line="4" pos:column="47"/></name></expr></argument>)<pos:position pos:line="4" pos:column="48"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="49"/></decl_stmt>
	<if pos:line="5" pos:column="9">if <condition pos:line="5" pos:column="12">(<expr><name pos:line="5" pos:column="13">ret<pos:position pos:line="5" pos:column="16"/></name> <operator pos:line="5" pos:column="17">&gt;<pos:position pos:line="5" pos:column="21"/></operator> <name pos:line="5" pos:column="19">n<pos:position pos:line="5" pos:column="20"/></name> <operator pos:line="5" pos:column="21">||<pos:position pos:line="5" pos:column="23"/></operator> <name pos:line="5" pos:column="24">ret<pos:position pos:line="5" pos:column="27"/></name> <operator pos:line="5" pos:column="28">&lt;<pos:position pos:line="5" pos:column="32"/></operator> <literal type="number" pos:line="5" pos:column="30">0<pos:position pos:line="5" pos:column="31"/></literal></expr>)<pos:position pos:line="5" pos:column="32"/></condition><then pos:line="5" pos:column="32"> <block pos:line="5" pos:column="33">{
		<expr_stmt><expr><name><name pos:line="6" pos:column="17">str<pos:position pos:line="6" pos:column="20"/></name><index pos:line="6" pos:column="20">[<expr><name pos:line="6" pos:column="21">n<pos:position pos:line="6" pos:column="22"/></name></expr>]<pos:position pos:line="6" pos:column="23"/></index></name> <operator pos:line="6" pos:column="24">=<pos:position pos:line="6" pos:column="25"/></operator> <literal type="number" pos:line="6" pos:column="26">0<pos:position pos:line="6" pos:column="27"/></literal></expr>;<pos:position pos:line="6" pos:column="28"/></expr_stmt>
		<return pos:line="7" pos:column="17">return <expr><operator pos:line="7" pos:column="24">-<pos:position pos:line="7" pos:column="25"/></operator><literal type="number" pos:line="7" pos:column="25">1<pos:position pos:line="7" pos:column="26"/></literal></expr>;<pos:position pos:line="7" pos:column="27"/></return>
	}<pos:position pos:line="8" pos:column="10"/></block></then></if>
	<expr_stmt><expr><name><name pos:line="9" pos:column="9">str<pos:position pos:line="9" pos:column="12"/></name><index pos:line="9" pos:column="12">[<expr><name pos:line="9" pos:column="13">ret<pos:position pos:line="9" pos:column="16"/></name></expr>]<pos:position pos:line="9" pos:column="17"/></index></name> <operator pos:line="9" pos:column="18">=<pos:position pos:line="9" pos:column="19"/></operator> <literal type="number" pos:line="9" pos:column="20">0<pos:position pos:line="9" pos:column="21"/></literal></expr>;<pos:position pos:line="9" pos:column="22"/></expr_stmt>
	<return pos:line="10" pos:column="9">return <expr><name pos:line="10" pos:column="16">ret<pos:position pos:line="10" pos:column="19"/></name></expr>;<pos:position pos:line="10" pos:column="20"/></return>
<cpp:else pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">else<pos:position pos:line="11" pos:column="6"/></cpp:directive></cpp:else>
	<decl_stmt><decl><specifier pos:line="12" pos:column="9">static<pos:position pos:line="12" pos:column="15"/></specifier> <type><name pos:line="12" pos:column="16">char<pos:position pos:line="12" pos:column="20"/></name> <modifier pos:line="12" pos:column="21">*<pos:position pos:line="12" pos:column="22"/></modifier></type><name pos:line="12" pos:column="22">buf<pos:position pos:line="12" pos:column="25"/></name></decl>;<pos:position pos:line="12" pos:column="26"/></decl_stmt>
	<decl_stmt><decl><specifier pos:line="13" pos:column="9">static<pos:position pos:line="13" pos:column="15"/></specifier> <type><name pos:line="13" pos:column="16">int<pos:position pos:line="13" pos:column="19"/></name></type> <name pos:line="13" pos:column="20">len<pos:position pos:line="13" pos:column="23"/></name><init pos:line="13" pos:column="23">=<expr><name pos:line="13" pos:column="24">MAXPATHLEN<pos:position pos:line="13" pos:column="34"/></name><operator pos:line="13" pos:column="34">*<pos:position pos:line="13" pos:column="35"/></operator><literal type="number" pos:line="13" pos:column="35">8<pos:position pos:line="13" pos:column="36"/></literal></expr></init></decl>;<pos:position pos:line="13" pos:column="37"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="14" pos:column="9">int<pos:position pos:line="14" pos:column="12"/></name></type> <name pos:line="14" pos:column="13">ret<pos:position pos:line="14" pos:column="16"/></name></decl>;<pos:position pos:line="14" pos:column="17"/></decl_stmt>

	<comment type="block" pos:line="16" pos:column="9">/* this code is NOT a proper vsnprintf() implementation. It
	   relies on the fact that all calls to slprintf() in rsync
	   pass strings which have already been checked to be less
	   than MAXPATHLEN in length and never more than 2 strings are
	   concatenated. This means the above buffer is absolutely
	   ample and can never be overflowed.

	   In the future we would like to replace this with a proper
	   vsnprintf() implementation but right now we need a solution
	   that is secure and portable. This is it.  */</comment>

	<if pos:line="27" pos:column="9">if <condition pos:line="27" pos:column="12">(<expr><operator pos:line="27" pos:column="13">!<pos:position pos:line="27" pos:column="14"/></operator><name pos:line="27" pos:column="14">buf<pos:position pos:line="27" pos:column="17"/></name></expr>)<pos:position pos:line="27" pos:column="18"/></condition><then pos:line="27" pos:column="18"> <block pos:line="27" pos:column="19">{
		<expr_stmt><expr><name pos:line="28" pos:column="17">buf<pos:position pos:line="28" pos:column="20"/></name> <operator pos:line="28" pos:column="21">=<pos:position pos:line="28" pos:column="22"/></operator> <call><name pos:line="28" pos:column="23">malloc<pos:position pos:line="28" pos:column="29"/></name><argument_list pos:line="28" pos:column="29">(<argument><expr><name pos:line="28" pos:column="30">len<pos:position pos:line="28" pos:column="33"/></name></expr></argument>)<pos:position pos:line="28" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="35"/></expr_stmt>
		<if pos:line="29" pos:column="17">if <condition pos:line="29" pos:column="20">(<expr><operator pos:line="29" pos:column="21">!<pos:position pos:line="29" pos:column="22"/></operator><name pos:line="29" pos:column="22">buf<pos:position pos:line="29" pos:column="25"/></name></expr>)<pos:position pos:line="29" pos:column="26"/></condition><then pos:line="29" pos:column="26"> <block pos:line="29" pos:column="27">{
			<comment type="block" pos:line="30" pos:column="25">/* can't call debug or we would recurse */</comment>
			<expr_stmt><expr><call><name pos:line="31" pos:column="25">exit_cleanup<pos:position pos:line="31" pos:column="37"/></name><argument_list pos:line="31" pos:column="37">(<argument><expr><literal type="number" pos:line="31" pos:column="38">1<pos:position pos:line="31" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="41"/></expr_stmt>
		}<pos:position pos:line="32" pos:column="18"/></block></then></if>
	}<pos:position pos:line="33" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="35" pos:column="9">vsprintf<pos:position pos:line="35" pos:column="17"/></name><argument_list pos:line="35" pos:column="17">(<argument><expr><name pos:line="35" pos:column="18">buf<pos:position pos:line="35" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="23">format<pos:position pos:line="35" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="31">ap<pos:position pos:line="35" pos:column="33"/></name></expr></argument>)<pos:position pos:line="35" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="35"/></expr_stmt>
	<expr_stmt><expr><name pos:line="36" pos:column="9">ret<pos:position pos:line="36" pos:column="12"/></name> <operator pos:line="36" pos:column="13">=<pos:position pos:line="36" pos:column="14"/></operator> <call><name pos:line="36" pos:column="15">strlen<pos:position pos:line="36" pos:column="21"/></name><argument_list pos:line="36" pos:column="21">(<argument><expr><name pos:line="36" pos:column="22">buf<pos:position pos:line="36" pos:column="25"/></name></expr></argument>)<pos:position pos:line="36" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="27"/></expr_stmt>
	<if pos:line="37" pos:column="9">if <condition pos:line="37" pos:column="12">(<expr><name pos:line="37" pos:column="13">ret<pos:position pos:line="37" pos:column="16"/></name> <operator pos:line="37" pos:column="17">&gt;<pos:position pos:line="37" pos:column="21"/></operator> <name pos:line="37" pos:column="19">n<pos:position pos:line="37" pos:column="20"/></name></expr>)<pos:position pos:line="37" pos:column="21"/></condition><then pos:line="37" pos:column="21"> <block pos:line="37" pos:column="22">{
		<comment type="block" pos:line="38" pos:column="17">/* yikes! */</comment>
		<expr_stmt><expr><call><name pos:line="39" pos:column="17">exit_cleanup<pos:position pos:line="39" pos:column="29"/></name><argument_list pos:line="39" pos:column="29">(<argument><expr><literal type="number" pos:line="39" pos:column="30">1<pos:position pos:line="39" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="33"/></expr_stmt>
	}<pos:position pos:line="40" pos:column="10"/></block></then></if>
	<expr_stmt><expr><name><name pos:line="41" pos:column="9">buf<pos:position pos:line="41" pos:column="12"/></name><index pos:line="41" pos:column="12">[<expr><name pos:line="41" pos:column="13">ret<pos:position pos:line="41" pos:column="16"/></name></expr>]<pos:position pos:line="41" pos:column="17"/></index></name> <operator pos:line="41" pos:column="18">=<pos:position pos:line="41" pos:column="19"/></operator> <literal type="number" pos:line="41" pos:column="20">0<pos:position pos:line="41" pos:column="21"/></literal></expr>;<pos:position pos:line="41" pos:column="22"/></expr_stmt>
	
	<expr_stmt><expr><call><name pos:line="43" pos:column="9">memcpy<pos:position pos:line="43" pos:column="15"/></name><argument_list pos:line="43" pos:column="15">(<argument><expr><name pos:line="43" pos:column="16">str<pos:position pos:line="43" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="21">buf<pos:position pos:line="43" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="26">ret<pos:position pos:line="43" pos:column="29"/></name><operator pos:line="43" pos:column="29">+<pos:position pos:line="43" pos:column="30"/></operator><literal type="number" pos:line="43" pos:column="30">1<pos:position pos:line="43" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="33"/></expr_stmt>

	<return pos:line="45" pos:column="9">return <expr><name pos:line="45" pos:column="16">ret<pos:position pos:line="45" pos:column="19"/></name></expr>;<pos:position pos:line="45" pos:column="20"/></return>
<cpp:endif pos:line="46" pos:column="1">#<cpp:directive pos:line="46" pos:column="2">endif<pos:position pos:line="46" pos:column="7"/></cpp:directive></cpp:endif>
}<pos:position pos:line="47" pos:column="2"/></block></function></unit>
