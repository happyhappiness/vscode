<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_83_rsync-2.0.18.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">io_multiplex_write<pos:position pos:line="1" pos:column="23"/></name><parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><name pos:line="1" pos:column="24">int<pos:position pos:line="1" pos:column="27"/></name></type> <name pos:line="1" pos:column="28">f<pos:position pos:line="1" pos:column="29"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="31">char<pos:position pos:line="1" pos:column="35"/></name> <modifier pos:line="1" pos:column="36">*<pos:position pos:line="1" pos:column="37"/></modifier></type><name pos:line="1" pos:column="37">buf<pos:position pos:line="1" pos:column="40"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="42">int<pos:position pos:line="1" pos:column="45"/></name></type> <name pos:line="1" pos:column="46">len<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="50"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<if pos:line="3" pos:column="9">if <condition pos:line="3" pos:column="12">(<expr><operator pos:line="3" pos:column="13">!<pos:position pos:line="3" pos:column="14"/></operator><name pos:line="3" pos:column="14">io_multiplexing_out<pos:position pos:line="3" pos:column="33"/></name></expr>)<pos:position pos:line="3" pos:column="34"/></condition><then pos:line="3" pos:column="34"> <block type="pseudo"><return pos:line="3" pos:column="35">return <expr><literal type="number" pos:line="3" pos:column="42">0<pos:position pos:line="3" pos:column="43"/></literal></expr>;<pos:position pos:line="3" pos:column="44"/></return></block></then></if>

	<expr_stmt><expr><call><name pos:line="5" pos:column="9">io_flush<pos:position pos:line="5" pos:column="17"/></name><argument_list pos:line="5" pos:column="17">()<pos:position pos:line="5" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="20"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="7" pos:column="9">SIVAL<pos:position pos:line="7" pos:column="14"/></name><argument_list pos:line="7" pos:column="14">(<argument><expr><name pos:line="7" pos:column="15">io_buffer<pos:position pos:line="7" pos:column="24"/></name><operator pos:line="7" pos:column="24">-<pos:position pos:line="7" pos:column="25"/></operator><literal type="number" pos:line="7" pos:column="25">4<pos:position pos:line="7" pos:column="26"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="7" pos:column="28">0<pos:position pos:line="7" pos:column="29"/></literal></expr></argument>, <argument><expr><operator pos:line="7" pos:column="31">(<pos:position pos:line="7" pos:column="32"/></operator><operator pos:line="7" pos:column="32">(<pos:position pos:line="7" pos:column="33"/></operator><name pos:line="7" pos:column="33">MPLEX_BASE<pos:position pos:line="7" pos:column="43"/></name> <operator pos:line="7" pos:column="44">+<pos:position pos:line="7" pos:column="45"/></operator> <name pos:line="7" pos:column="46">f<pos:position pos:line="7" pos:column="47"/></name><operator pos:line="7" pos:column="47">)<pos:position pos:line="7" pos:column="48"/></operator><operator pos:line="7" pos:column="48">&lt;&lt;<pos:position pos:line="7" pos:column="56"/></operator><literal type="number" pos:line="7" pos:column="50">24<pos:position pos:line="7" pos:column="52"/></literal><operator pos:line="7" pos:column="52">)<pos:position pos:line="7" pos:column="53"/></operator> <operator pos:line="7" pos:column="54">+<pos:position pos:line="7" pos:column="55"/></operator> <name pos:line="7" pos:column="56">len<pos:position pos:line="7" pos:column="59"/></name></expr></argument>)<pos:position pos:line="7" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="61"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="8" pos:column="9">memcpy<pos:position pos:line="8" pos:column="15"/></name><argument_list pos:line="8" pos:column="15">(<argument><expr><name pos:line="8" pos:column="16">io_buffer<pos:position pos:line="8" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="27">buf<pos:position pos:line="8" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="32">len<pos:position pos:line="8" pos:column="35"/></name></expr></argument>)<pos:position pos:line="8" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="37"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="10" pos:column="9">writefd_unbuffered<pos:position pos:line="10" pos:column="27"/></name><argument_list pos:line="10" pos:column="27">(<argument><expr><name pos:line="10" pos:column="28">multiplex_out_fd<pos:position pos:line="10" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="46">io_buffer<pos:position pos:line="10" pos:column="55"/></name><operator pos:line="10" pos:column="55">-<pos:position pos:line="10" pos:column="56"/></operator><literal type="number" pos:line="10" pos:column="56">4<pos:position pos:line="10" pos:column="57"/></literal></expr></argument>, <argument><expr><name pos:line="10" pos:column="59">len<pos:position pos:line="10" pos:column="62"/></name><operator pos:line="10" pos:column="62">+<pos:position pos:line="10" pos:column="63"/></operator><literal type="number" pos:line="10" pos:column="63">4<pos:position pos:line="10" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="66"/></expr_stmt>
	<return pos:line="11" pos:column="9">return <expr><literal type="number" pos:line="11" pos:column="16">1<pos:position pos:line="11" pos:column="17"/></literal></expr>;<pos:position pos:line="11" pos:column="18"/></return>
}<pos:position pos:line="12" pos:column="2"/></block></function></unit>
