<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_function_816.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">set_compression<pos:position pos:line="1" pos:column="21"/></name><parameter_list pos:line="1" pos:column="21">(<parameter><decl><type><name pos:line="1" pos:column="22">char<pos:position pos:line="1" pos:column="26"/></name> <modifier pos:line="1" pos:column="27">*<pos:position pos:line="1" pos:column="28"/></modifier></type><name pos:line="1" pos:column="28">fname<pos:position pos:line="1" pos:column="33"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="34"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><specifier pos:line="3" pos:column="9">static<pos:position pos:line="3" pos:column="15"/></specifier> <type><name pos:line="3" pos:column="16">char<pos:position pos:line="3" pos:column="20"/></name> <modifier pos:line="3" pos:column="21">*<pos:position pos:line="3" pos:column="22"/></modifier></type><name pos:line="3" pos:column="22">match_list<pos:position pos:line="3" pos:column="32"/></name></decl>;<pos:position pos:line="3" pos:column="33"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier></type><name pos:line="4" pos:column="15">s<pos:position pos:line="4" pos:column="16"/></name></decl>;<pos:position pos:line="4" pos:column="17"/></decl_stmt>

	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><operator pos:line="6" pos:column="13">!<pos:position pos:line="6" pos:column="14"/></operator><name pos:line="6" pos:column="14">do_compression<pos:position pos:line="6" pos:column="28"/></name></expr>)<pos:position pos:line="6" pos:column="29"/></condition><then pos:line="6" pos:column="29">
		<block type="pseudo"><return pos:line="7" pos:column="17">return;<pos:position pos:line="7" pos:column="24"/></return></block></then></if>

	<if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><operator pos:line="9" pos:column="13">!<pos:position pos:line="9" pos:column="14"/></operator><name pos:line="9" pos:column="14">match_list<pos:position pos:line="9" pos:column="24"/></name></expr>)<pos:position pos:line="9" pos:column="25"/></condition><then pos:line="9" pos:column="25"> <block pos:line="9" pos:column="26">{
		<decl_stmt><decl><type><name pos:line="10" pos:column="17">char<pos:position pos:line="10" pos:column="21"/></name> <modifier pos:line="10" pos:column="22">*<pos:position pos:line="10" pos:column="23"/></modifier></type><name pos:line="10" pos:column="23">t<pos:position pos:line="10" pos:column="24"/></name></decl>, <modifier pos:line="10" pos:column="26">*<pos:position pos:line="10" pos:column="27"/></modifier><decl><type ref="prev"/><name pos:line="10" pos:column="27">f<pos:position pos:line="10" pos:column="28"/></name> <init pos:line="10" pos:column="29">= <expr><call><name pos:line="10" pos:column="31">lp_dont_compress<pos:position pos:line="10" pos:column="47"/></name><argument_list pos:line="10" pos:column="47">(<argument><expr><name pos:line="10" pos:column="48">module_id<pos:position pos:line="10" pos:column="57"/></name></expr></argument>)<pos:position pos:line="10" pos:column="58"/></argument_list></call></expr></init></decl>;<pos:position pos:line="10" pos:column="59"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="11" pos:column="17">int<pos:position pos:line="11" pos:column="20"/></name></type> <name pos:line="11" pos:column="21">len<pos:position pos:line="11" pos:column="24"/></name> <init pos:line="11" pos:column="25">= <expr><call><name pos:line="11" pos:column="27">strlen<pos:position pos:line="11" pos:column="33"/></name><argument_list pos:line="11" pos:column="33">(<argument><expr><name pos:line="11" pos:column="34">f<pos:position pos:line="11" pos:column="35"/></name></expr></argument>)<pos:position pos:line="11" pos:column="36"/></argument_list></call></expr></init></decl>;<pos:position pos:line="11" pos:column="37"/></decl_stmt>
		<if pos:line="12" pos:column="17">if <condition pos:line="12" pos:column="20">(<expr><operator pos:line="12" pos:column="21">!<pos:position pos:line="12" pos:column="22"/></operator><operator pos:line="12" pos:column="22">(<pos:position pos:line="12" pos:column="23"/></operator><name pos:line="12" pos:column="23">match_list<pos:position pos:line="12" pos:column="33"/></name> <operator pos:line="12" pos:column="34">=<pos:position pos:line="12" pos:column="35"/></operator> <name pos:line="12" pos:column="36">t<pos:position pos:line="12" pos:column="37"/></name> <operator pos:line="12" pos:column="38">=<pos:position pos:line="12" pos:column="39"/></operator> <call><name pos:line="12" pos:column="40">new_array<pos:position pos:line="12" pos:column="49"/></name><argument_list pos:line="12" pos:column="49">(<argument><expr><name pos:line="12" pos:column="50">char<pos:position pos:line="12" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="56">len<pos:position pos:line="12" pos:column="59"/></name> <operator pos:line="12" pos:column="60">+<pos:position pos:line="12" pos:column="61"/></operator> <literal type="number" pos:line="12" pos:column="62">2<pos:position pos:line="12" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="64"/></argument_list></call><operator pos:line="12" pos:column="64">)<pos:position pos:line="12" pos:column="65"/></operator></expr>)<pos:position pos:line="12" pos:column="66"/></condition><then pos:line="12" pos:column="66">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="13" pos:column="25">out_of_memory<pos:position pos:line="13" pos:column="38"/></name><argument_list pos:line="13" pos:column="38">(<argument><expr><literal type="string" pos:line="13" pos:column="39">"set_compression"<pos:position pos:line="13" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="58"/></expr_stmt></block></then></if>
		<while pos:line="14" pos:column="17">while <condition pos:line="14" pos:column="23">(<expr><operator pos:line="14" pos:column="24">*<pos:position pos:line="14" pos:column="25"/></operator><name pos:line="14" pos:column="25">f<pos:position pos:line="14" pos:column="26"/></name></expr>)<pos:position pos:line="14" pos:column="27"/></condition> <block pos:line="14" pos:column="28">{
			<if pos:line="15" pos:column="25">if <condition pos:line="15" pos:column="28">(<expr><operator pos:line="15" pos:column="29">*<pos:position pos:line="15" pos:column="30"/></operator><name pos:line="15" pos:column="30">f<pos:position pos:line="15" pos:column="31"/></name> <operator pos:line="15" pos:column="32">==<pos:position pos:line="15" pos:column="34"/></operator> <literal type="char" pos:line="15" pos:column="35">' '<pos:position pos:line="15" pos:column="38"/></literal></expr>)<pos:position pos:line="15" pos:column="39"/></condition><then pos:line="15" pos:column="39"> <block pos:line="15" pos:column="40">{
				<expr_stmt><expr><name pos:line="16" pos:column="33">f<pos:position pos:line="16" pos:column="34"/></name><operator pos:line="16" pos:column="34">++<pos:position pos:line="16" pos:column="36"/></operator></expr>;<pos:position pos:line="16" pos:column="37"/></expr_stmt>
				<continue pos:line="17" pos:column="33">continue;<pos:position pos:line="17" pos:column="42"/></continue>
			}<pos:position pos:line="18" pos:column="26"/></block></then></if>
			<do pos:line="19" pos:column="25">do <block pos:line="19" pos:column="28">{
				<if pos:line="20" pos:column="33">if <condition pos:line="20" pos:column="36">(<expr><call><name pos:line="20" pos:column="37">isupper<pos:position pos:line="20" pos:column="44"/></name><argument_list pos:line="20" pos:column="44">(<argument><expr><operator pos:line="20" pos:column="45">*<pos:position pos:line="20" pos:column="46"/></operator><operator pos:line="20" pos:column="46">(<pos:position pos:line="20" pos:column="47"/></operator><name pos:line="20" pos:column="47">unsigned<pos:position pos:line="20" pos:column="55"/></name> <name pos:line="20" pos:column="56">char<pos:position pos:line="20" pos:column="60"/></name> <operator pos:line="20" pos:column="61">*<pos:position pos:line="20" pos:column="62"/></operator><operator pos:line="20" pos:column="62">)<pos:position pos:line="20" pos:column="63"/></operator><name pos:line="20" pos:column="63">f<pos:position pos:line="20" pos:column="64"/></name></expr></argument>)<pos:position pos:line="20" pos:column="65"/></argument_list></call></expr>)<pos:position pos:line="20" pos:column="66"/></condition><then pos:line="20" pos:column="66">
					<block type="pseudo"><expr_stmt><expr><operator pos:line="21" pos:column="41">*<pos:position pos:line="21" pos:column="42"/></operator><name pos:line="21" pos:column="42">t<pos:position pos:line="21" pos:column="43"/></name><operator pos:line="21" pos:column="43">++<pos:position pos:line="21" pos:column="45"/></operator> <operator pos:line="21" pos:column="46">=<pos:position pos:line="21" pos:column="47"/></operator> <call><name pos:line="21" pos:column="48">tolower<pos:position pos:line="21" pos:column="55"/></name><argument_list pos:line="21" pos:column="55">(<argument><expr><operator pos:line="21" pos:column="56">*<pos:position pos:line="21" pos:column="57"/></operator><operator pos:line="21" pos:column="57">(<pos:position pos:line="21" pos:column="58"/></operator><name pos:line="21" pos:column="58">unsigned<pos:position pos:line="21" pos:column="66"/></name> <name pos:line="21" pos:column="67">char<pos:position pos:line="21" pos:column="71"/></name> <operator pos:line="21" pos:column="72">*<pos:position pos:line="21" pos:column="73"/></operator><operator pos:line="21" pos:column="73">)<pos:position pos:line="21" pos:column="74"/></operator><name pos:line="21" pos:column="74">f<pos:position pos:line="21" pos:column="75"/></name></expr></argument>)<pos:position pos:line="21" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="77"/></expr_stmt></block></then>
				<else pos:line="22" pos:column="33">else
					<block type="pseudo"><expr_stmt><expr><operator pos:line="23" pos:column="41">*<pos:position pos:line="23" pos:column="42"/></operator><name pos:line="23" pos:column="42">t<pos:position pos:line="23" pos:column="43"/></name><operator pos:line="23" pos:column="43">++<pos:position pos:line="23" pos:column="45"/></operator> <operator pos:line="23" pos:column="46">=<pos:position pos:line="23" pos:column="47"/></operator> <operator pos:line="23" pos:column="48">*<pos:position pos:line="23" pos:column="49"/></operator><name pos:line="23" pos:column="49">f<pos:position pos:line="23" pos:column="50"/></name></expr>;<pos:position pos:line="23" pos:column="51"/></expr_stmt></block></else></if>
			}<pos:position pos:line="24" pos:column="26"/></block> while <condition pos:line="24" pos:column="33">(<expr><operator pos:line="24" pos:column="34">*<pos:position pos:line="24" pos:column="35"/></operator><operator pos:line="24" pos:column="35">++<pos:position pos:line="24" pos:column="37"/></operator><name pos:line="24" pos:column="37">f<pos:position pos:line="24" pos:column="38"/></name> <operator pos:line="24" pos:column="39">!=<pos:position pos:line="24" pos:column="41"/></operator> <literal type="char" pos:line="24" pos:column="42">' '<pos:position pos:line="24" pos:column="45"/></literal> <operator pos:line="24" pos:column="46">&amp;&amp;<pos:position pos:line="24" pos:column="56"/></operator> <operator pos:line="24" pos:column="49">*<pos:position pos:line="24" pos:column="50"/></operator><name pos:line="24" pos:column="50">f<pos:position pos:line="24" pos:column="51"/></name></expr>)<pos:position pos:line="24" pos:column="52"/></condition>;<pos:position pos:line="24" pos:column="53"/></do>
			<expr_stmt><expr><operator pos:line="25" pos:column="25">*<pos:position pos:line="25" pos:column="26"/></operator><name pos:line="25" pos:column="26">t<pos:position pos:line="25" pos:column="27"/></name><operator pos:line="25" pos:column="27">++<pos:position pos:line="25" pos:column="29"/></operator> <operator pos:line="25" pos:column="30">=<pos:position pos:line="25" pos:column="31"/></operator> <literal type="char" pos:line="25" pos:column="32">'\0'<pos:position pos:line="25" pos:column="36"/></literal></expr>;<pos:position pos:line="25" pos:column="37"/></expr_stmt>
		}<pos:position pos:line="26" pos:column="18"/></block></while>
		<comment type="block" pos:line="27" pos:column="17">/* Optimize a match-string of "*". */</comment>
		<if pos:line="28" pos:column="17">if <condition pos:line="28" pos:column="20">(<expr><name pos:line="28" pos:column="21">t<pos:position pos:line="28" pos:column="22"/></name> <operator pos:line="28" pos:column="23">-<pos:position pos:line="28" pos:column="24"/></operator> <name pos:line="28" pos:column="25">match_list<pos:position pos:line="28" pos:column="35"/></name> <operator pos:line="28" pos:column="36">==<pos:position pos:line="28" pos:column="38"/></operator> <literal type="number" pos:line="28" pos:column="39">2<pos:position pos:line="28" pos:column="40"/></literal> <operator pos:line="28" pos:column="41">&amp;&amp;<pos:position pos:line="28" pos:column="51"/></operator> <name><name pos:line="28" pos:column="44">match_list<pos:position pos:line="28" pos:column="54"/></name><index pos:line="28" pos:column="54">[<expr><literal type="number" pos:line="28" pos:column="55">0<pos:position pos:line="28" pos:column="56"/></literal></expr>]<pos:position pos:line="28" pos:column="57"/></index></name> <operator pos:line="28" pos:column="58">==<pos:position pos:line="28" pos:column="60"/></operator> <literal type="char" pos:line="28" pos:column="61">'*'<pos:position pos:line="28" pos:column="64"/></literal></expr>)<pos:position pos:line="28" pos:column="65"/></condition><then pos:line="28" pos:column="65"> <block pos:line="28" pos:column="66">{
			<expr_stmt><expr><name pos:line="29" pos:column="25">t<pos:position pos:line="29" pos:column="26"/></name> <operator pos:line="29" pos:column="27">=<pos:position pos:line="29" pos:column="28"/></operator> <name pos:line="29" pos:column="29">match_list<pos:position pos:line="29" pos:column="39"/></name></expr>;<pos:position pos:line="29" pos:column="40"/></expr_stmt>
			<expr_stmt><expr><name pos:line="30" pos:column="25">per_file_default_level<pos:position pos:line="30" pos:column="47"/></name> <operator pos:line="30" pos:column="48">=<pos:position pos:line="30" pos:column="49"/></operator> <literal type="number" pos:line="30" pos:column="50">0<pos:position pos:line="30" pos:column="51"/></literal></expr>;<pos:position pos:line="30" pos:column="52"/></expr_stmt>
		}<pos:position pos:line="31" pos:column="18"/></block></then> <else pos:line="31" pos:column="19">else
			<block type="pseudo"><expr_stmt><expr><name pos:line="32" pos:column="25">per_file_default_level<pos:position pos:line="32" pos:column="47"/></name> <operator pos:line="32" pos:column="48">=<pos:position pos:line="32" pos:column="49"/></operator> <name pos:line="32" pos:column="50">def_compress_level<pos:position pos:line="32" pos:column="68"/></name></expr>;<pos:position pos:line="32" pos:column="69"/></expr_stmt></block></else></if>
		<expr_stmt><expr><operator pos:line="33" pos:column="17">*<pos:position pos:line="33" pos:column="18"/></operator><name pos:line="33" pos:column="18">t<pos:position pos:line="33" pos:column="19"/></name><operator pos:line="33" pos:column="19">++<pos:position pos:line="33" pos:column="21"/></operator> <operator pos:line="33" pos:column="22">=<pos:position pos:line="33" pos:column="23"/></operator> <literal type="char" pos:line="33" pos:column="24">'\0'<pos:position pos:line="33" pos:column="28"/></literal></expr>;<pos:position pos:line="33" pos:column="29"/></expr_stmt>
	}<pos:position pos:line="34" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="36" pos:column="9">compression_level<pos:position pos:line="36" pos:column="26"/></name> <operator pos:line="36" pos:column="27">=<pos:position pos:line="36" pos:column="28"/></operator> <name pos:line="36" pos:column="29">per_file_default_level<pos:position pos:line="36" pos:column="51"/></name></expr>;<pos:position pos:line="36" pos:column="52"/></expr_stmt>

	<if pos:line="38" pos:column="9">if <condition pos:line="38" pos:column="12">(<expr><operator pos:line="38" pos:column="13">!<pos:position pos:line="38" pos:column="14"/></operator><operator pos:line="38" pos:column="14">*<pos:position pos:line="38" pos:column="15"/></operator><name pos:line="38" pos:column="15">match_list<pos:position pos:line="38" pos:column="25"/></name></expr>)<pos:position pos:line="38" pos:column="26"/></condition><then pos:line="38" pos:column="26">
		<block type="pseudo"><return pos:line="39" pos:column="17">return;<pos:position pos:line="39" pos:column="24"/></return></block></then></if>

	<if pos:line="41" pos:column="9">if <condition pos:line="41" pos:column="12">(<expr><operator pos:line="41" pos:column="13">(<pos:position pos:line="41" pos:column="14"/></operator><name pos:line="41" pos:column="14">s<pos:position pos:line="41" pos:column="15"/></name> <operator pos:line="41" pos:column="16">=<pos:position pos:line="41" pos:column="17"/></operator> <call><name pos:line="41" pos:column="18">strrchr<pos:position pos:line="41" pos:column="25"/></name><argument_list pos:line="41" pos:column="25">(<argument><expr><name pos:line="41" pos:column="26">fname<pos:position pos:line="41" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="41" pos:column="33">'/'<pos:position pos:line="41" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="37"/></argument_list></call><operator pos:line="41" pos:column="37">)<pos:position pos:line="41" pos:column="38"/></operator> <operator pos:line="41" pos:column="39">!=<pos:position pos:line="41" pos:column="41"/></operator> <name pos:line="41" pos:column="42">NULL<pos:position pos:line="41" pos:column="46"/></name></expr>)<pos:position pos:line="41" pos:column="47"/></condition><then pos:line="41" pos:column="47">
		<block type="pseudo"><expr_stmt><expr><name pos:line="42" pos:column="17">fname<pos:position pos:line="42" pos:column="22"/></name> <operator pos:line="42" pos:column="23">=<pos:position pos:line="42" pos:column="24"/></operator> <name pos:line="42" pos:column="25">s<pos:position pos:line="42" pos:column="26"/></name> <operator pos:line="42" pos:column="27">+<pos:position pos:line="42" pos:column="28"/></operator> <literal type="number" pos:line="42" pos:column="29">1<pos:position pos:line="42" pos:column="30"/></literal></expr>;<pos:position pos:line="42" pos:column="31"/></expr_stmt></block></then></if>

	<for pos:line="44" pos:column="9">for <control pos:line="44" pos:column="13">(<init><expr><name pos:line="44" pos:column="14">s<pos:position pos:line="44" pos:column="15"/></name> <operator pos:line="44" pos:column="16">=<pos:position pos:line="44" pos:column="17"/></operator> <name pos:line="44" pos:column="18">match_list<pos:position pos:line="44" pos:column="28"/></name></expr>;<pos:position pos:line="44" pos:column="29"/></init> <condition><expr><operator pos:line="44" pos:column="30">*<pos:position pos:line="44" pos:column="31"/></operator><name pos:line="44" pos:column="31">s<pos:position pos:line="44" pos:column="32"/></name></expr>;<pos:position pos:line="44" pos:column="33"/></condition> <incr><expr><name pos:line="44" pos:column="34">s<pos:position pos:line="44" pos:column="35"/></name> <operator pos:line="44" pos:column="36">+=<pos:position pos:line="44" pos:column="38"/></operator> <call><name pos:line="44" pos:column="39">strlen<pos:position pos:line="44" pos:column="45"/></name><argument_list pos:line="44" pos:column="45">(<argument><expr><name pos:line="44" pos:column="46">s<pos:position pos:line="44" pos:column="47"/></name></expr></argument>)<pos:position pos:line="44" pos:column="48"/></argument_list></call> <operator pos:line="44" pos:column="49">+<pos:position pos:line="44" pos:column="50"/></operator> <literal type="number" pos:line="44" pos:column="51">1<pos:position pos:line="44" pos:column="52"/></literal></expr></incr>)<pos:position pos:line="44" pos:column="53"/></control> <block pos:line="44" pos:column="54">{
		<if pos:line="45" pos:column="17">if <condition pos:line="45" pos:column="20">(<expr><call><name pos:line="45" pos:column="21">iwildmatch<pos:position pos:line="45" pos:column="31"/></name><argument_list pos:line="45" pos:column="31">(<argument><expr><name pos:line="45" pos:column="32">s<pos:position pos:line="45" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="35">fname<pos:position pos:line="45" pos:column="40"/></name></expr></argument>)<pos:position pos:line="45" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="45" pos:column="42"/></condition><then pos:line="45" pos:column="42"> <block pos:line="45" pos:column="43">{
			<expr_stmt><expr><name pos:line="46" pos:column="25">compression_level<pos:position pos:line="46" pos:column="42"/></name> <operator pos:line="46" pos:column="43">=<pos:position pos:line="46" pos:column="44"/></operator> <literal type="number" pos:line="46" pos:column="45">0<pos:position pos:line="46" pos:column="46"/></literal></expr>;<pos:position pos:line="46" pos:column="47"/></expr_stmt>
			<break pos:line="47" pos:column="25">break;<pos:position pos:line="47" pos:column="31"/></break>
		}<pos:position pos:line="48" pos:column="18"/></block></then></if>
	}<pos:position pos:line="49" pos:column="10"/></block></for>
}<pos:position pos:line="50" pos:column="2"/></block></function></unit>
