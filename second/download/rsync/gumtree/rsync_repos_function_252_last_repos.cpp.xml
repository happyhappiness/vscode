<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_252_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">start_accept_loop<pos:position pos:line="1" pos:column="23"/></name><parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><name pos:line="1" pos:column="24">int<pos:position pos:line="1" pos:column="27"/></name></type> <name pos:line="1" pos:column="28">port<pos:position pos:line="1" pos:column="32"/></name></decl></parameter>, <parameter><function_decl><type><name pos:line="1" pos:column="34">int<pos:position pos:line="1" pos:column="37"/></name></type> (<modifier pos:line="1" pos:column="39">*<pos:position pos:line="1" pos:column="40"/></modifier><name pos:line="1" pos:column="40">fn<pos:position pos:line="1" pos:column="42"/></name>)<parameter_list pos:line="1" pos:column="43">(<parameter><decl><type><name pos:line="1" pos:column="44">int<pos:position pos:line="1" pos:column="47"/></name></type></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="49">int<pos:position pos:line="1" pos:column="52"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="53"/></parameter_list></function_decl></parameter>)<pos:position pos:line="1" pos:column="54"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">fd_set<pos:position pos:line="3" pos:column="15"/></name></type> <name pos:line="3" pos:column="16">deffds<pos:position pos:line="3" pos:column="22"/></name></decl>;<pos:position pos:line="3" pos:column="23"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name> <modifier pos:line="4" pos:column="13">*<pos:position pos:line="4" pos:column="14"/></modifier></type><name pos:line="4" pos:column="14">sp<pos:position pos:line="4" pos:column="16"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="18">maxfd<pos:position pos:line="4" pos:column="23"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="25">i<pos:position pos:line="4" pos:column="26"/></name></decl>;<pos:position pos:line="4" pos:column="27"/></decl_stmt>

<cpp:ifdef pos:line="6" pos:column="1">#<cpp:directive pos:line="6" pos:column="2">ifdef<pos:position pos:line="6" pos:column="7"/></cpp:directive> <name pos:line="6" pos:column="8">HAVE_SIGACTION<pos:position pos:line="6" pos:column="22"/></name></cpp:ifdef>
	<expr_stmt><expr><name><name pos:line="7" pos:column="9">sigact<pos:position pos:line="7" pos:column="15"/></name><operator pos:line="7" pos:column="15">.<pos:position pos:line="7" pos:column="16"/></operator><name pos:line="7" pos:column="16">sa_flags<pos:position pos:line="7" pos:column="24"/></name></name> <operator pos:line="7" pos:column="25">=<pos:position pos:line="7" pos:column="26"/></operator> <name pos:line="7" pos:column="27">SA_NOCLDSTOP<pos:position pos:line="7" pos:column="39"/></name></expr>;<pos:position pos:line="7" pos:column="40"/></expr_stmt>
<cpp:endif pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">endif<pos:position pos:line="8" pos:column="7"/></cpp:directive></cpp:endif>

	<comment type="block" pos:line="10" pos:column="9">/* open an incoming socket */</comment>
	<expr_stmt><expr><name pos:line="11" pos:column="9">sp<pos:position pos:line="11" pos:column="11"/></name> <operator pos:line="11" pos:column="12">=<pos:position pos:line="11" pos:column="13"/></operator> <call><name pos:line="11" pos:column="14">open_socket_in<pos:position pos:line="11" pos:column="28"/></name><argument_list pos:line="11" pos:column="28">(<argument><expr><name pos:line="11" pos:column="29">SOCK_STREAM<pos:position pos:line="11" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="42">port<pos:position pos:line="11" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="48">bind_address<pos:position pos:line="11" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="62">default_af_hint<pos:position pos:line="11" pos:column="77"/></name></expr></argument>)<pos:position pos:line="11" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="79"/></expr_stmt>
	<if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><name pos:line="12" pos:column="13">sp<pos:position pos:line="12" pos:column="15"/></name> <operator pos:line="12" pos:column="16">==<pos:position pos:line="12" pos:column="18"/></operator> <name pos:line="12" pos:column="19">NULL<pos:position pos:line="12" pos:column="23"/></name></expr>)<pos:position pos:line="12" pos:column="24"/></condition><then pos:line="12" pos:column="24">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="13" pos:column="17">exit_cleanup<pos:position pos:line="13" pos:column="29"/></name><argument_list pos:line="13" pos:column="29">(<argument><expr><name pos:line="13" pos:column="30">RERR_SOCKETIO<pos:position pos:line="13" pos:column="43"/></name></expr></argument>)<pos:position pos:line="13" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="45"/></expr_stmt></block></then></if>

	<comment type="block" pos:line="15" pos:column="9">/* ready to listen */</comment>
	<expr_stmt><expr><call><name pos:line="16" pos:column="9">FD_ZERO<pos:position pos:line="16" pos:column="16"/></name><argument_list pos:line="16" pos:column="16">(<argument><expr><operator pos:line="16" pos:column="17">&amp;<pos:position pos:line="16" pos:column="22"/></operator><name pos:line="16" pos:column="18">deffds<pos:position pos:line="16" pos:column="24"/></name></expr></argument>)<pos:position pos:line="16" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="26"/></expr_stmt>
	<for pos:line="17" pos:column="9">for <control pos:line="17" pos:column="13">(<init><expr><name pos:line="17" pos:column="14">i<pos:position pos:line="17" pos:column="15"/></name> <operator pos:line="17" pos:column="16">=<pos:position pos:line="17" pos:column="17"/></operator> <literal type="number" pos:line="17" pos:column="18">0<pos:position pos:line="17" pos:column="19"/></literal></expr><operator pos:line="17" pos:column="19">,<pos:position pos:line="17" pos:column="20"/></operator> <expr><name pos:line="17" pos:column="21">maxfd<pos:position pos:line="17" pos:column="26"/></name> <operator pos:line="17" pos:column="27">=<pos:position pos:line="17" pos:column="28"/></operator> <operator pos:line="17" pos:column="29">-<pos:position pos:line="17" pos:column="30"/></operator><literal type="number" pos:line="17" pos:column="30">1<pos:position pos:line="17" pos:column="31"/></literal></expr>;<pos:position pos:line="17" pos:column="32"/></init> <condition><expr><name><name pos:line="17" pos:column="33">sp<pos:position pos:line="17" pos:column="35"/></name><index pos:line="17" pos:column="35">[<expr><name pos:line="17" pos:column="36">i<pos:position pos:line="17" pos:column="37"/></name></expr>]<pos:position pos:line="17" pos:column="38"/></index></name> <operator pos:line="17" pos:column="39">&gt;=<pos:position pos:line="17" pos:column="44"/></operator> <literal type="number" pos:line="17" pos:column="42">0<pos:position pos:line="17" pos:column="43"/></literal></expr>;<pos:position pos:line="17" pos:column="44"/></condition> <incr><expr><name pos:line="17" pos:column="45">i<pos:position pos:line="17" pos:column="46"/></name><operator pos:line="17" pos:column="46">++<pos:position pos:line="17" pos:column="48"/></operator></expr></incr>)<pos:position pos:line="17" pos:column="49"/></control> <block pos:line="17" pos:column="50">{
		<if pos:line="18" pos:column="17">if <condition pos:line="18" pos:column="20">(<expr><call><name pos:line="18" pos:column="21">listen<pos:position pos:line="18" pos:column="27"/></name><argument_list pos:line="18" pos:column="27">(<argument><expr><name><name pos:line="18" pos:column="28">sp<pos:position pos:line="18" pos:column="30"/></name><index pos:line="18" pos:column="30">[<expr><name pos:line="18" pos:column="31">i<pos:position pos:line="18" pos:column="32"/></name></expr>]<pos:position pos:line="18" pos:column="33"/></index></name></expr></argument>, <argument><expr><call><name pos:line="18" pos:column="35">lp_listen_backlog<pos:position pos:line="18" pos:column="52"/></name><argument_list pos:line="18" pos:column="52">()<pos:position pos:line="18" pos:column="54"/></argument_list></call></expr></argument>)<pos:position pos:line="18" pos:column="55"/></argument_list></call> <operator pos:line="18" pos:column="56">&lt;<pos:position pos:line="18" pos:column="60"/></operator> <literal type="number" pos:line="18" pos:column="58">0<pos:position pos:line="18" pos:column="59"/></literal></expr>)<pos:position pos:line="18" pos:column="60"/></condition><then pos:line="18" pos:column="60"> <block pos:line="18" pos:column="61">{
			<expr_stmt><expr><call><name pos:line="19" pos:column="25">rsyserr<pos:position pos:line="19" pos:column="32"/></name><argument_list pos:line="19" pos:column="32">(<argument><expr><name pos:line="19" pos:column="33">FERROR<pos:position pos:line="19" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="41">errno<pos:position pos:line="19" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="48">"listen() on socket failed"<pos:position pos:line="19" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="77"/></expr_stmt>
<cpp:ifdef pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">ifdef<pos:position pos:line="20" pos:column="7"/></cpp:directive> <name pos:line="20" pos:column="8">INET6<pos:position pos:line="20" pos:column="13"/></name></cpp:ifdef>
			<if pos:line="21" pos:column="25">if <condition pos:line="21" pos:column="28">(<expr><name pos:line="21" pos:column="29">errno<pos:position pos:line="21" pos:column="34"/></name> <operator pos:line="21" pos:column="35">==<pos:position pos:line="21" pos:column="37"/></operator> <name pos:line="21" pos:column="38">EADDRINUSE<pos:position pos:line="21" pos:column="48"/></name> <operator pos:line="21" pos:column="49">&amp;&amp;<pos:position pos:line="21" pos:column="59"/></operator> <name pos:line="21" pos:column="52">i<pos:position pos:line="21" pos:column="53"/></name> <operator pos:line="21" pos:column="54">&gt;<pos:position pos:line="21" pos:column="58"/></operator> <literal type="number" pos:line="21" pos:column="56">0<pos:position pos:line="21" pos:column="57"/></literal></expr>)<pos:position pos:line="21" pos:column="58"/></condition><then pos:line="21" pos:column="58"> <block pos:line="21" pos:column="59">{
				<expr_stmt><expr><call><name pos:line="22" pos:column="33">rprintf<pos:position pos:line="22" pos:column="40"/></name><argument_list pos:line="22" pos:column="40">(<argument><expr><name pos:line="22" pos:column="41">FINFO<pos:position pos:line="22" pos:column="46"/></name></expr></argument>,
				    <argument><expr><literal type="string" pos:line="23" pos:column="37">"Try using --ipv4 or --ipv6 to avoid this listen() error.\n"<pos:position pos:line="23" pos:column="97"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="98"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="99"/></expr_stmt>
			}<pos:position pos:line="24" pos:column="26"/></block></then></if>
<cpp:endif pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">endif<pos:position pos:line="25" pos:column="7"/></cpp:directive></cpp:endif>
			<expr_stmt><expr><call><name pos:line="26" pos:column="25">exit_cleanup<pos:position pos:line="26" pos:column="37"/></name><argument_list pos:line="26" pos:column="37">(<argument><expr><name pos:line="26" pos:column="38">RERR_SOCKETIO<pos:position pos:line="26" pos:column="51"/></name></expr></argument>)<pos:position pos:line="26" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="53"/></expr_stmt>
		}<pos:position pos:line="27" pos:column="18"/></block></then></if>
		<expr_stmt><expr><call><name pos:line="28" pos:column="17">FD_SET<pos:position pos:line="28" pos:column="23"/></name><argument_list pos:line="28" pos:column="23">(<argument><expr><name><name pos:line="28" pos:column="24">sp<pos:position pos:line="28" pos:column="26"/></name><index pos:line="28" pos:column="26">[<expr><name pos:line="28" pos:column="27">i<pos:position pos:line="28" pos:column="28"/></name></expr>]<pos:position pos:line="28" pos:column="29"/></index></name></expr></argument>, <argument><expr><operator pos:line="28" pos:column="31">&amp;<pos:position pos:line="28" pos:column="36"/></operator><name pos:line="28" pos:column="32">deffds<pos:position pos:line="28" pos:column="38"/></name></expr></argument>)<pos:position pos:line="28" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="40"/></expr_stmt>
		<if pos:line="29" pos:column="17">if <condition pos:line="29" pos:column="20">(<expr><name pos:line="29" pos:column="21">maxfd<pos:position pos:line="29" pos:column="26"/></name> <operator pos:line="29" pos:column="27">&lt;<pos:position pos:line="29" pos:column="31"/></operator> <name><name pos:line="29" pos:column="29">sp<pos:position pos:line="29" pos:column="31"/></name><index pos:line="29" pos:column="31">[<expr><name pos:line="29" pos:column="32">i<pos:position pos:line="29" pos:column="33"/></name></expr>]<pos:position pos:line="29" pos:column="34"/></index></name></expr>)<pos:position pos:line="29" pos:column="35"/></condition><then pos:line="29" pos:column="35">
			<block type="pseudo"><expr_stmt><expr><name pos:line="30" pos:column="25">maxfd<pos:position pos:line="30" pos:column="30"/></name> <operator pos:line="30" pos:column="31">=<pos:position pos:line="30" pos:column="32"/></operator> <name><name pos:line="30" pos:column="33">sp<pos:position pos:line="30" pos:column="35"/></name><index pos:line="30" pos:column="35">[<expr><name pos:line="30" pos:column="36">i<pos:position pos:line="30" pos:column="37"/></name></expr>]<pos:position pos:line="30" pos:column="38"/></index></name></expr>;<pos:position pos:line="30" pos:column="39"/></expr_stmt></block></then></if>
	}<pos:position pos:line="31" pos:column="10"/></block></for>

	<comment type="block" pos:line="33" pos:column="9">/* now accept incoming connections - forking a new process
	 * for each incoming connection */</comment>
	<while pos:line="35" pos:column="9">while <condition pos:line="35" pos:column="15">(<expr><literal type="number" pos:line="35" pos:column="16">1<pos:position pos:line="35" pos:column="17"/></literal></expr>)<pos:position pos:line="35" pos:column="18"/></condition> <block pos:line="35" pos:column="19">{
		<decl_stmt><decl><type><name pos:line="36" pos:column="17">fd_set<pos:position pos:line="36" pos:column="23"/></name></type> <name pos:line="36" pos:column="24">fds<pos:position pos:line="36" pos:column="27"/></name></decl>;<pos:position pos:line="36" pos:column="28"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="37" pos:column="17">pid_t<pos:position pos:line="37" pos:column="22"/></name></type> <name pos:line="37" pos:column="23">pid<pos:position pos:line="37" pos:column="26"/></name></decl>;<pos:position pos:line="37" pos:column="27"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="38" pos:column="17">int<pos:position pos:line="38" pos:column="20"/></name></type> <name pos:line="38" pos:column="21">fd<pos:position pos:line="38" pos:column="23"/></name></decl>;<pos:position pos:line="38" pos:column="24"/></decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="39" pos:column="17">struct<pos:position pos:line="39" pos:column="23"/></name> <name pos:line="39" pos:column="24">sockaddr_storage<pos:position pos:line="39" pos:column="40"/></name></name></type> <name pos:line="39" pos:column="41">addr<pos:position pos:line="39" pos:column="45"/></name></decl>;<pos:position pos:line="39" pos:column="46"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="40" pos:column="17">socklen_t<pos:position pos:line="40" pos:column="26"/></name></type> <name pos:line="40" pos:column="27">addrlen<pos:position pos:line="40" pos:column="34"/></name> <init pos:line="40" pos:column="35">= <expr><sizeof pos:line="40" pos:column="37">sizeof <name pos:line="40" pos:column="44">addr<pos:position pos:line="40" pos:column="48"/></name></sizeof></expr></init></decl>;<pos:position pos:line="40" pos:column="49"/></decl_stmt>

		<comment type="block" pos:line="42" pos:column="17">/* close log file before the potentially very long select so
		 * file can be trimmed by another process instead of growing
		 * forever */</comment>
		<expr_stmt><expr><call><name pos:line="45" pos:column="17">logfile_close<pos:position pos:line="45" pos:column="30"/></name><argument_list pos:line="45" pos:column="30">()<pos:position pos:line="45" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="33"/></expr_stmt>

<cpp:ifdef pos:line="47" pos:column="1">#<cpp:directive pos:line="47" pos:column="2">ifdef<pos:position pos:line="47" pos:column="7"/></cpp:directive> <name pos:line="47" pos:column="8">FD_COPY<pos:position pos:line="47" pos:column="15"/></name></cpp:ifdef>
		<expr_stmt><expr><call><name pos:line="48" pos:column="17">FD_COPY<pos:position pos:line="48" pos:column="24"/></name><argument_list pos:line="48" pos:column="24">(<argument><expr><operator pos:line="48" pos:column="25">&amp;<pos:position pos:line="48" pos:column="30"/></operator><name pos:line="48" pos:column="26">deffds<pos:position pos:line="48" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="48" pos:column="34">&amp;<pos:position pos:line="48" pos:column="39"/></operator><name pos:line="48" pos:column="35">fds<pos:position pos:line="48" pos:column="38"/></name></expr></argument>)<pos:position pos:line="48" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="40"/></expr_stmt>
<cpp:else pos:line="49" pos:column="1">#<cpp:directive pos:line="49" pos:column="2">else<pos:position pos:line="49" pos:column="6"/></cpp:directive></cpp:else>
		<expr_stmt><expr><name pos:line="50" pos:column="17">fds<pos:position pos:line="50" pos:column="20"/></name> <operator pos:line="50" pos:column="21">=<pos:position pos:line="50" pos:column="22"/></operator> <name pos:line="50" pos:column="23">deffds<pos:position pos:line="50" pos:column="29"/></name></expr>;<pos:position pos:line="50" pos:column="30"/></expr_stmt>
<cpp:endif pos:line="51" pos:column="1">#<cpp:directive pos:line="51" pos:column="2">endif<pos:position pos:line="51" pos:column="7"/></cpp:directive></cpp:endif>

		<if pos:line="53" pos:column="17">if <condition pos:line="53" pos:column="20">(<expr><call><name pos:line="53" pos:column="21">select<pos:position pos:line="53" pos:column="27"/></name><argument_list pos:line="53" pos:column="27">(<argument><expr><name pos:line="53" pos:column="28">maxfd<pos:position pos:line="53" pos:column="33"/></name> <operator pos:line="53" pos:column="34">+<pos:position pos:line="53" pos:column="35"/></operator> <literal type="number" pos:line="53" pos:column="36">1<pos:position pos:line="53" pos:column="37"/></literal></expr></argument>, <argument><expr><operator pos:line="53" pos:column="39">&amp;<pos:position pos:line="53" pos:column="44"/></operator><name pos:line="53" pos:column="40">fds<pos:position pos:line="53" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="45">NULL<pos:position pos:line="53" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="51">NULL<pos:position pos:line="53" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="57">NULL<pos:position pos:line="53" pos:column="61"/></name></expr></argument>)<pos:position pos:line="53" pos:column="62"/></argument_list></call> <operator pos:line="53" pos:column="63">&lt;<pos:position pos:line="53" pos:column="67"/></operator> <literal type="number" pos:line="53" pos:column="65">1<pos:position pos:line="53" pos:column="66"/></literal></expr>)<pos:position pos:line="53" pos:column="67"/></condition><then pos:line="53" pos:column="67">
			<block type="pseudo"><continue pos:line="54" pos:column="25">continue;<pos:position pos:line="54" pos:column="34"/></continue></block></then></if>

		<for pos:line="56" pos:column="17">for <control pos:line="56" pos:column="21">(<init><expr><name pos:line="56" pos:column="22">i<pos:position pos:line="56" pos:column="23"/></name> <operator pos:line="56" pos:column="24">=<pos:position pos:line="56" pos:column="25"/></operator> <literal type="number" pos:line="56" pos:column="26">0<pos:position pos:line="56" pos:column="27"/></literal></expr><operator pos:line="56" pos:column="27">,<pos:position pos:line="56" pos:column="28"/></operator> <expr><name pos:line="56" pos:column="29">fd<pos:position pos:line="56" pos:column="31"/></name> <operator pos:line="56" pos:column="32">=<pos:position pos:line="56" pos:column="33"/></operator> <operator pos:line="56" pos:column="34">-<pos:position pos:line="56" pos:column="35"/></operator><literal type="number" pos:line="56" pos:column="35">1<pos:position pos:line="56" pos:column="36"/></literal></expr>;<pos:position pos:line="56" pos:column="37"/></init> <condition><expr><name><name pos:line="56" pos:column="38">sp<pos:position pos:line="56" pos:column="40"/></name><index pos:line="56" pos:column="40">[<expr><name pos:line="56" pos:column="41">i<pos:position pos:line="56" pos:column="42"/></name></expr>]<pos:position pos:line="56" pos:column="43"/></index></name> <operator pos:line="56" pos:column="44">&gt;=<pos:position pos:line="56" pos:column="49"/></operator> <literal type="number" pos:line="56" pos:column="47">0<pos:position pos:line="56" pos:column="48"/></literal></expr>;<pos:position pos:line="56" pos:column="49"/></condition> <incr><expr><name pos:line="56" pos:column="50">i<pos:position pos:line="56" pos:column="51"/></name><operator pos:line="56" pos:column="51">++<pos:position pos:line="56" pos:column="53"/></operator></expr></incr>)<pos:position pos:line="56" pos:column="54"/></control> <block pos:line="56" pos:column="55">{
			<if pos:line="57" pos:column="25">if <condition pos:line="57" pos:column="28">(<expr><call><name pos:line="57" pos:column="29">FD_ISSET<pos:position pos:line="57" pos:column="37"/></name><argument_list pos:line="57" pos:column="37">(<argument><expr><name><name pos:line="57" pos:column="38">sp<pos:position pos:line="57" pos:column="40"/></name><index pos:line="57" pos:column="40">[<expr><name pos:line="57" pos:column="41">i<pos:position pos:line="57" pos:column="42"/></name></expr>]<pos:position pos:line="57" pos:column="43"/></index></name></expr></argument>, <argument><expr><operator pos:line="57" pos:column="45">&amp;<pos:position pos:line="57" pos:column="50"/></operator><name pos:line="57" pos:column="46">fds<pos:position pos:line="57" pos:column="49"/></name></expr></argument>)<pos:position pos:line="57" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="57" pos:column="51"/></condition><then pos:line="57" pos:column="51"> <block pos:line="57" pos:column="52">{
				<expr_stmt><expr><name pos:line="58" pos:column="33">fd<pos:position pos:line="58" pos:column="35"/></name> <operator pos:line="58" pos:column="36">=<pos:position pos:line="58" pos:column="37"/></operator> <call><name pos:line="58" pos:column="38">accept<pos:position pos:line="58" pos:column="44"/></name><argument_list pos:line="58" pos:column="44">(<argument><expr><name><name pos:line="58" pos:column="45">sp<pos:position pos:line="58" pos:column="47"/></name><index pos:line="58" pos:column="47">[<expr><name pos:line="58" pos:column="48">i<pos:position pos:line="58" pos:column="49"/></name></expr>]<pos:position pos:line="58" pos:column="50"/></index></name></expr></argument>, <argument><expr><operator pos:line="58" pos:column="52">(<pos:position pos:line="58" pos:column="53"/></operator>struct <name pos:line="58" pos:column="60">sockaddr<pos:position pos:line="58" pos:column="68"/></name> <operator pos:line="58" pos:column="69">*<pos:position pos:line="58" pos:column="70"/></operator><operator pos:line="58" pos:column="70">)<pos:position pos:line="58" pos:column="71"/></operator><operator pos:line="58" pos:column="71">&amp;<pos:position pos:line="58" pos:column="76"/></operator><name pos:line="58" pos:column="72">addr<pos:position pos:line="58" pos:column="76"/></name></expr></argument>,
					    <argument><expr><operator pos:line="59" pos:column="45">&amp;<pos:position pos:line="59" pos:column="50"/></operator><name pos:line="59" pos:column="46">addrlen<pos:position pos:line="59" pos:column="53"/></name></expr></argument>)<pos:position pos:line="59" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="55"/></expr_stmt>
				<break pos:line="60" pos:column="33">break;<pos:position pos:line="60" pos:column="39"/></break>
			}<pos:position pos:line="61" pos:column="26"/></block></then></if>
		}<pos:position pos:line="62" pos:column="18"/></block></for>

		<if pos:line="64" pos:column="17">if <condition pos:line="64" pos:column="20">(<expr><name pos:line="64" pos:column="21">fd<pos:position pos:line="64" pos:column="23"/></name> <operator pos:line="64" pos:column="24">&lt;<pos:position pos:line="64" pos:column="28"/></operator> <literal type="number" pos:line="64" pos:column="26">0<pos:position pos:line="64" pos:column="27"/></literal></expr>)<pos:position pos:line="64" pos:column="28"/></condition><then pos:line="64" pos:column="28">
			<block type="pseudo"><continue pos:line="65" pos:column="25">continue;<pos:position pos:line="65" pos:column="34"/></continue></block></then></if>

		<expr_stmt><expr><call><name pos:line="67" pos:column="17">SIGACTION<pos:position pos:line="67" pos:column="26"/></name><argument_list pos:line="67" pos:column="26">(<argument><expr><name pos:line="67" pos:column="27">SIGCHLD<pos:position pos:line="67" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="67" pos:column="36">sigchld_handler<pos:position pos:line="67" pos:column="51"/></name></expr></argument>)<pos:position pos:line="67" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="53"/></expr_stmt>

		<if pos:line="69" pos:column="17">if <condition pos:line="69" pos:column="20">(<expr><operator pos:line="69" pos:column="21">(<pos:position pos:line="69" pos:column="22"/></operator><name pos:line="69" pos:column="22">pid<pos:position pos:line="69" pos:column="25"/></name> <operator pos:line="69" pos:column="26">=<pos:position pos:line="69" pos:column="27"/></operator> <call><name pos:line="69" pos:column="28">fork<pos:position pos:line="69" pos:column="32"/></name><argument_list pos:line="69" pos:column="32">()<pos:position pos:line="69" pos:column="34"/></argument_list></call><operator pos:line="69" pos:column="34">)<pos:position pos:line="69" pos:column="35"/></operator> <operator pos:line="69" pos:column="36">==<pos:position pos:line="69" pos:column="38"/></operator> <literal type="number" pos:line="69" pos:column="39">0<pos:position pos:line="69" pos:column="40"/></literal></expr>)<pos:position pos:line="69" pos:column="41"/></condition><then pos:line="69" pos:column="41"> <block pos:line="69" pos:column="42">{
			<decl_stmt><decl><type><name pos:line="70" pos:column="25">int<pos:position pos:line="70" pos:column="28"/></name></type> <name pos:line="70" pos:column="29">ret<pos:position pos:line="70" pos:column="32"/></name></decl>;<pos:position pos:line="70" pos:column="33"/></decl_stmt>
			<for pos:line="71" pos:column="25">for <control pos:line="71" pos:column="29">(<init><expr><name pos:line="71" pos:column="30">i<pos:position pos:line="71" pos:column="31"/></name> <operator pos:line="71" pos:column="32">=<pos:position pos:line="71" pos:column="33"/></operator> <literal type="number" pos:line="71" pos:column="34">0<pos:position pos:line="71" pos:column="35"/></literal></expr>;<pos:position pos:line="71" pos:column="36"/></init> <condition><expr><name><name pos:line="71" pos:column="37">sp<pos:position pos:line="71" pos:column="39"/></name><index pos:line="71" pos:column="39">[<expr><name pos:line="71" pos:column="40">i<pos:position pos:line="71" pos:column="41"/></name></expr>]<pos:position pos:line="71" pos:column="42"/></index></name> <operator pos:line="71" pos:column="43">&gt;=<pos:position pos:line="71" pos:column="48"/></operator> <literal type="number" pos:line="71" pos:column="46">0<pos:position pos:line="71" pos:column="47"/></literal></expr>;<pos:position pos:line="71" pos:column="48"/></condition> <incr><expr><name pos:line="71" pos:column="49">i<pos:position pos:line="71" pos:column="50"/></name><operator pos:line="71" pos:column="50">++<pos:position pos:line="71" pos:column="52"/></operator></expr></incr>)<pos:position pos:line="71" pos:column="53"/></control>
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="72" pos:column="33">close<pos:position pos:line="72" pos:column="38"/></name><argument_list pos:line="72" pos:column="38">(<argument><expr><name><name pos:line="72" pos:column="39">sp<pos:position pos:line="72" pos:column="41"/></name><index pos:line="72" pos:column="41">[<expr><name pos:line="72" pos:column="42">i<pos:position pos:line="72" pos:column="43"/></name></expr>]<pos:position pos:line="72" pos:column="44"/></index></name></expr></argument>)<pos:position pos:line="72" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="46"/></expr_stmt></block></for>
			<comment type="block" pos:line="73" pos:column="25">/* Re-open log file in child before possibly giving
			 * up privileges (see logfile_close() above). */</comment>
			<expr_stmt><expr><call><name pos:line="75" pos:column="25">logfile_reopen<pos:position pos:line="75" pos:column="39"/></name><argument_list pos:line="75" pos:column="39">()<pos:position pos:line="75" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="42"/></expr_stmt>
			<expr_stmt><expr><name pos:line="76" pos:column="25">ret<pos:position pos:line="76" pos:column="28"/></name> <operator pos:line="76" pos:column="29">=<pos:position pos:line="76" pos:column="30"/></operator> <call><name pos:line="76" pos:column="31">fn<pos:position pos:line="76" pos:column="33"/></name><argument_list pos:line="76" pos:column="33">(<argument><expr><name pos:line="76" pos:column="34">fd<pos:position pos:line="76" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="76" pos:column="38">fd<pos:position pos:line="76" pos:column="40"/></name></expr></argument>)<pos:position pos:line="76" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="42"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="77" pos:column="25">close_all<pos:position pos:line="77" pos:column="34"/></name><argument_list pos:line="77" pos:column="34">()<pos:position pos:line="77" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="37"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="78" pos:column="25">_exit<pos:position pos:line="78" pos:column="30"/></name><argument_list pos:line="78" pos:column="30">(<argument><expr><name pos:line="78" pos:column="31">ret<pos:position pos:line="78" pos:column="34"/></name></expr></argument>)<pos:position pos:line="78" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="36"/></expr_stmt>
		}<pos:position pos:line="79" pos:column="18"/></block></then> <elseif pos:line="79" pos:column="19">else <if pos:line="79" pos:column="24">if <condition pos:line="79" pos:column="27">(<expr><name pos:line="79" pos:column="28">pid<pos:position pos:line="79" pos:column="31"/></name> <operator pos:line="79" pos:column="32">&lt;<pos:position pos:line="79" pos:column="36"/></operator> <literal type="number" pos:line="79" pos:column="34">0<pos:position pos:line="79" pos:column="35"/></literal></expr>)<pos:position pos:line="79" pos:column="36"/></condition><then pos:line="79" pos:column="36"> <block pos:line="79" pos:column="37">{
			<expr_stmt><expr><call><name pos:line="80" pos:column="25">rsyserr<pos:position pos:line="80" pos:column="32"/></name><argument_list pos:line="80" pos:column="32">(<argument><expr><name pos:line="80" pos:column="33">FERROR<pos:position pos:line="80" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="80" pos:column="41">errno<pos:position pos:line="80" pos:column="46"/></name></expr></argument>,
				<argument><expr><literal type="string" pos:line="81" pos:column="33">"could not create child server process"<pos:position pos:line="81" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="81" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="74"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="82" pos:column="25">close<pos:position pos:line="82" pos:column="30"/></name><argument_list pos:line="82" pos:column="30">(<argument><expr><name pos:line="82" pos:column="31">fd<pos:position pos:line="82" pos:column="33"/></name></expr></argument>)<pos:position pos:line="82" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="35"/></expr_stmt>
			<comment type="block" pos:line="83" pos:column="25">/* This might have happened because we're
			 * overloaded.  Sleep briefly before trying to
			 * accept again. */</comment>
			<expr_stmt><expr><call><name pos:line="86" pos:column="25">sleep<pos:position pos:line="86" pos:column="30"/></name><argument_list pos:line="86" pos:column="30">(<argument><expr><literal type="number" pos:line="86" pos:column="31">2<pos:position pos:line="86" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="86" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="34"/></expr_stmt>
		}<pos:position pos:line="87" pos:column="18"/></block></then></if></elseif> <else pos:line="87" pos:column="19">else <block pos:line="87" pos:column="24">{
			<comment type="block" pos:line="88" pos:column="25">/* Parent doesn't need this fd anymore. */</comment>
			<expr_stmt><expr><call><name pos:line="89" pos:column="25">close<pos:position pos:line="89" pos:column="30"/></name><argument_list pos:line="89" pos:column="30">(<argument><expr><name pos:line="89" pos:column="31">fd<pos:position pos:line="89" pos:column="33"/></name></expr></argument>)<pos:position pos:line="89" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="35"/></expr_stmt>
		}<pos:position pos:line="90" pos:column="18"/></block></else></if>
	}<pos:position pos:line="91" pos:column="10"/></block></while>
}<pos:position pos:line="92" pos:column="2"/></block></function></unit>
