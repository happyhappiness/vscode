<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_65_rsync-2.5.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">read_timeout<pos:position pos:line="1" pos:column="24"/></name> <parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name pos:line="1" pos:column="26">int<pos:position pos:line="1" pos:column="29"/></name></type> <name pos:line="1" pos:column="30">fd<pos:position pos:line="1" pos:column="32"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="34">char<pos:position pos:line="1" pos:column="38"/></name> <modifier pos:line="1" pos:column="39">*<pos:position pos:line="1" pos:column="40"/></modifier></type><name pos:line="1" pos:column="40">buf<pos:position pos:line="1" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="45">size_t<pos:position pos:line="1" pos:column="51"/></name></type> <name pos:line="1" pos:column="52">len<pos:position pos:line="1" pos:column="55"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="56"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">n<pos:position pos:line="3" pos:column="14"/></name></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="16">ret<pos:position pos:line="3" pos:column="19"/></name><init pos:line="3" pos:column="19">=<expr><literal type="number" pos:line="3" pos:column="20">0<pos:position pos:line="3" pos:column="21"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="22"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="5" pos:column="9">io_flush<pos:position pos:line="5" pos:column="17"/></name><argument_list pos:line="5" pos:column="17">()<pos:position pos:line="5" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="20"/></expr_stmt>

	<while pos:line="7" pos:column="9">while <condition pos:line="7" pos:column="15">(<expr><name pos:line="7" pos:column="16">ret<pos:position pos:line="7" pos:column="19"/></name> <operator pos:line="7" pos:column="20">==<pos:position pos:line="7" pos:column="22"/></operator> <literal type="number" pos:line="7" pos:column="23">0<pos:position pos:line="7" pos:column="24"/></literal></expr>)<pos:position pos:line="7" pos:column="25"/></condition> <block pos:line="7" pos:column="26">{
		<comment type="block" pos:line="8" pos:column="17">/* until we manage to read *something* */</comment>
		<decl_stmt><decl><type><name pos:line="9" pos:column="17">fd_set<pos:position pos:line="9" pos:column="23"/></name></type> <name pos:line="9" pos:column="24">fds<pos:position pos:line="9" pos:column="27"/></name></decl>;<pos:position pos:line="9" pos:column="28"/></decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="10" pos:column="17">struct<pos:position pos:line="10" pos:column="23"/></name> <name pos:line="10" pos:column="24">timeval<pos:position pos:line="10" pos:column="31"/></name></name></type> <name pos:line="10" pos:column="32">tv<pos:position pos:line="10" pos:column="34"/></name></decl>;<pos:position pos:line="10" pos:column="35"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="11" pos:column="17">int<pos:position pos:line="11" pos:column="20"/></name></type> <name pos:line="11" pos:column="21">fd_count<pos:position pos:line="11" pos:column="29"/></name> <init pos:line="11" pos:column="30">= <expr><name pos:line="11" pos:column="32">fd<pos:position pos:line="11" pos:column="34"/></name><operator pos:line="11" pos:column="34">+<pos:position pos:line="11" pos:column="35"/></operator><literal type="number" pos:line="11" pos:column="35">1<pos:position pos:line="11" pos:column="36"/></literal></expr></init></decl>;<pos:position pos:line="11" pos:column="37"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="12" pos:column="17">int<pos:position pos:line="12" pos:column="20"/></name></type> <name pos:line="12" pos:column="21">count<pos:position pos:line="12" pos:column="26"/></name></decl>;<pos:position pos:line="12" pos:column="27"/></decl_stmt>

		<expr_stmt><expr><call><name pos:line="14" pos:column="17">FD_ZERO<pos:position pos:line="14" pos:column="24"/></name><argument_list pos:line="14" pos:column="24">(<argument><expr><operator pos:line="14" pos:column="25">&amp;<pos:position pos:line="14" pos:column="30"/></operator><name pos:line="14" pos:column="26">fds<pos:position pos:line="14" pos:column="29"/></name></expr></argument>)<pos:position pos:line="14" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="31"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="15" pos:column="17">FD_SET<pos:position pos:line="15" pos:column="23"/></name><argument_list pos:line="15" pos:column="23">(<argument><expr><name pos:line="15" pos:column="24">fd<pos:position pos:line="15" pos:column="26"/></name></expr></argument>, <argument><expr><operator pos:line="15" pos:column="28">&amp;<pos:position pos:line="15" pos:column="33"/></operator><name pos:line="15" pos:column="29">fds<pos:position pos:line="15" pos:column="32"/></name></expr></argument>)<pos:position pos:line="15" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="34"/></expr_stmt>
		<if pos:line="16" pos:column="17">if <condition pos:line="16" pos:column="20">(<expr><name pos:line="16" pos:column="21">io_error_fd<pos:position pos:line="16" pos:column="32"/></name> <operator pos:line="16" pos:column="33">!=<pos:position pos:line="16" pos:column="35"/></operator> <operator pos:line="16" pos:column="36">-<pos:position pos:line="16" pos:column="37"/></operator><literal type="number" pos:line="16" pos:column="37">1<pos:position pos:line="16" pos:column="38"/></literal></expr>)<pos:position pos:line="16" pos:column="39"/></condition><then pos:line="16" pos:column="39"> <block pos:line="16" pos:column="40">{
			<expr_stmt><expr><call><name pos:line="17" pos:column="25">FD_SET<pos:position pos:line="17" pos:column="31"/></name><argument_list pos:line="17" pos:column="31">(<argument><expr><name pos:line="17" pos:column="32">io_error_fd<pos:position pos:line="17" pos:column="43"/></name></expr></argument>, <argument><expr><operator pos:line="17" pos:column="45">&amp;<pos:position pos:line="17" pos:column="50"/></operator><name pos:line="17" pos:column="46">fds<pos:position pos:line="17" pos:column="49"/></name></expr></argument>)<pos:position pos:line="17" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="51"/></expr_stmt>
			<if pos:line="18" pos:column="25">if <condition pos:line="18" pos:column="28">(<expr><name pos:line="18" pos:column="29">io_error_fd<pos:position pos:line="18" pos:column="40"/></name> <operator pos:line="18" pos:column="41">&gt;<pos:position pos:line="18" pos:column="45"/></operator> <name pos:line="18" pos:column="43">fd<pos:position pos:line="18" pos:column="45"/></name></expr>)<pos:position pos:line="18" pos:column="46"/></condition><then pos:line="18" pos:column="46"> <block type="pseudo"><expr_stmt><expr><name pos:line="18" pos:column="47">fd_count<pos:position pos:line="18" pos:column="55"/></name> <operator pos:line="18" pos:column="56">=<pos:position pos:line="18" pos:column="57"/></operator> <name pos:line="18" pos:column="58">io_error_fd<pos:position pos:line="18" pos:column="69"/></name><operator pos:line="18" pos:column="69">+<pos:position pos:line="18" pos:column="70"/></operator><literal type="number" pos:line="18" pos:column="70">1<pos:position pos:line="18" pos:column="71"/></literal></expr>;<pos:position pos:line="18" pos:column="72"/></expr_stmt></block></then></if>
		}<pos:position pos:line="19" pos:column="18"/></block></then></if>

		<expr_stmt><expr><name><name pos:line="21" pos:column="17">tv<pos:position pos:line="21" pos:column="19"/></name><operator pos:line="21" pos:column="19">.<pos:position pos:line="21" pos:column="20"/></operator><name pos:line="21" pos:column="20">tv_sec<pos:position pos:line="21" pos:column="26"/></name></name> <operator pos:line="21" pos:column="27">=<pos:position pos:line="21" pos:column="28"/></operator> <ternary><condition><expr><name pos:line="21" pos:column="29">io_timeout<pos:position pos:line="21" pos:column="39"/></name></expr>?<pos:position pos:line="21" pos:column="40"/></condition><then><expr><name pos:line="21" pos:column="40">io_timeout<pos:position pos:line="21" pos:column="50"/></name></expr></then><else pos:line="21" pos:column="50">:<expr><name pos:line="21" pos:column="51">SELECT_TIMEOUT<pos:position pos:line="21" pos:column="65"/></name></expr></else></ternary></expr>;<pos:position pos:line="21" pos:column="66"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="22" pos:column="17">tv<pos:position pos:line="22" pos:column="19"/></name><operator pos:line="22" pos:column="19">.<pos:position pos:line="22" pos:column="20"/></operator><name pos:line="22" pos:column="20">tv_usec<pos:position pos:line="22" pos:column="27"/></name></name> <operator pos:line="22" pos:column="28">=<pos:position pos:line="22" pos:column="29"/></operator> <literal type="number" pos:line="22" pos:column="30">0<pos:position pos:line="22" pos:column="31"/></literal></expr>;<pos:position pos:line="22" pos:column="32"/></expr_stmt>

		<expr_stmt><expr><name pos:line="24" pos:column="17">errno<pos:position pos:line="24" pos:column="22"/></name> <operator pos:line="24" pos:column="23">=<pos:position pos:line="24" pos:column="24"/></operator> <literal type="number" pos:line="24" pos:column="25">0<pos:position pos:line="24" pos:column="26"/></literal></expr>;<pos:position pos:line="24" pos:column="27"/></expr_stmt>

		<expr_stmt><expr><name pos:line="26" pos:column="17">count<pos:position pos:line="26" pos:column="22"/></name> <operator pos:line="26" pos:column="23">=<pos:position pos:line="26" pos:column="24"/></operator> <call><name pos:line="26" pos:column="25">select<pos:position pos:line="26" pos:column="31"/></name><argument_list pos:line="26" pos:column="31">(<argument><expr><name pos:line="26" pos:column="32">fd_count<pos:position pos:line="26" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="26" pos:column="42">&amp;<pos:position pos:line="26" pos:column="47"/></operator><name pos:line="26" pos:column="43">fds<pos:position pos:line="26" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="48">NULL<pos:position pos:line="26" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="54">NULL<pos:position pos:line="26" pos:column="58"/></name></expr></argument>, <argument><expr><operator pos:line="26" pos:column="60">&amp;<pos:position pos:line="26" pos:column="65"/></operator><name pos:line="26" pos:column="61">tv<pos:position pos:line="26" pos:column="63"/></name></expr></argument>)<pos:position pos:line="26" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="65"/></expr_stmt>

		<if pos:line="28" pos:column="17">if <condition pos:line="28" pos:column="20">(<expr><name pos:line="28" pos:column="21">count<pos:position pos:line="28" pos:column="26"/></name> <operator pos:line="28" pos:column="27">==<pos:position pos:line="28" pos:column="29"/></operator> <literal type="number" pos:line="28" pos:column="30">0<pos:position pos:line="28" pos:column="31"/></literal></expr>)<pos:position pos:line="28" pos:column="32"/></condition><then pos:line="28" pos:column="32"> <block pos:line="28" pos:column="33">{
			<expr_stmt><expr><call><name pos:line="29" pos:column="25">check_timeout<pos:position pos:line="29" pos:column="38"/></name><argument_list pos:line="29" pos:column="38">()<pos:position pos:line="29" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="41"/></expr_stmt>
		}<pos:position pos:line="30" pos:column="18"/></block></then></if>

		<if pos:line="32" pos:column="17">if <condition pos:line="32" pos:column="20">(<expr><name pos:line="32" pos:column="21">count<pos:position pos:line="32" pos:column="26"/></name> <operator pos:line="32" pos:column="27">&lt;=<pos:position pos:line="32" pos:column="32"/></operator> <literal type="number" pos:line="32" pos:column="30">0<pos:position pos:line="32" pos:column="31"/></literal></expr>)<pos:position pos:line="32" pos:column="32"/></condition><then pos:line="32" pos:column="32"> <block pos:line="32" pos:column="33">{
			<if pos:line="33" pos:column="25">if <condition pos:line="33" pos:column="28">(<expr><name pos:line="33" pos:column="29">errno<pos:position pos:line="33" pos:column="34"/></name> <operator pos:line="33" pos:column="35">==<pos:position pos:line="33" pos:column="37"/></operator> <name pos:line="33" pos:column="38">EBADF<pos:position pos:line="33" pos:column="43"/></name></expr>)<pos:position pos:line="33" pos:column="44"/></condition><then pos:line="33" pos:column="44"> <block pos:line="33" pos:column="45">{
				<expr_stmt><expr><call><name pos:line="34" pos:column="33">exit_cleanup<pos:position pos:line="34" pos:column="45"/></name><argument_list pos:line="34" pos:column="45">(<argument><expr><name pos:line="34" pos:column="46">RERR_SOCKETIO<pos:position pos:line="34" pos:column="59"/></name></expr></argument>)<pos:position pos:line="34" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="61"/></expr_stmt>
			}<pos:position pos:line="35" pos:column="26"/></block></then></if>
			<continue pos:line="36" pos:column="25">continue;<pos:position pos:line="36" pos:column="34"/></continue>
		}<pos:position pos:line="37" pos:column="18"/></block></then></if>

		<if pos:line="39" pos:column="17">if <condition pos:line="39" pos:column="20">(<expr><name pos:line="39" pos:column="21">io_error_fd<pos:position pos:line="39" pos:column="32"/></name> <operator pos:line="39" pos:column="33">!=<pos:position pos:line="39" pos:column="35"/></operator> <operator pos:line="39" pos:column="36">-<pos:position pos:line="39" pos:column="37"/></operator><literal type="number" pos:line="39" pos:column="37">1<pos:position pos:line="39" pos:column="38"/></literal> <operator pos:line="39" pos:column="39">&amp;&amp;<pos:position pos:line="39" pos:column="49"/></operator> <call><name pos:line="39" pos:column="42">FD_ISSET<pos:position pos:line="39" pos:column="50"/></name><argument_list pos:line="39" pos:column="50">(<argument><expr><name pos:line="39" pos:column="51">io_error_fd<pos:position pos:line="39" pos:column="62"/></name></expr></argument>, <argument><expr><operator pos:line="39" pos:column="64">&amp;<pos:position pos:line="39" pos:column="69"/></operator><name pos:line="39" pos:column="65">fds<pos:position pos:line="39" pos:column="68"/></name></expr></argument>)<pos:position pos:line="39" pos:column="69"/></argument_list></call></expr>)<pos:position pos:line="39" pos:column="70"/></condition><then pos:line="39" pos:column="70"> <block pos:line="39" pos:column="71">{
			<expr_stmt><expr><call><name pos:line="40" pos:column="25">read_error_fd<pos:position pos:line="40" pos:column="38"/></name><argument_list pos:line="40" pos:column="38">()<pos:position pos:line="40" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="41"/></expr_stmt>
		}<pos:position pos:line="41" pos:column="18"/></block></then></if>

		<if pos:line="43" pos:column="17">if <condition pos:line="43" pos:column="20">(<expr><operator pos:line="43" pos:column="21">!<pos:position pos:line="43" pos:column="22"/></operator><call><name pos:line="43" pos:column="22">FD_ISSET<pos:position pos:line="43" pos:column="30"/></name><argument_list pos:line="43" pos:column="30">(<argument><expr><name pos:line="43" pos:column="31">fd<pos:position pos:line="43" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="43" pos:column="35">&amp;<pos:position pos:line="43" pos:column="40"/></operator><name pos:line="43" pos:column="36">fds<pos:position pos:line="43" pos:column="39"/></name></expr></argument>)<pos:position pos:line="43" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="43" pos:column="41"/></condition><then pos:line="43" pos:column="41"> <block type="pseudo"><continue pos:line="43" pos:column="42">continue;<pos:position pos:line="43" pos:column="51"/></continue></block></then></if>

		<expr_stmt><expr><name pos:line="45" pos:column="17">n<pos:position pos:line="45" pos:column="18"/></name> <operator pos:line="45" pos:column="19">=<pos:position pos:line="45" pos:column="20"/></operator> <call><name pos:line="45" pos:column="21">read<pos:position pos:line="45" pos:column="25"/></name><argument_list pos:line="45" pos:column="25">(<argument><expr><name pos:line="45" pos:column="26">fd<pos:position pos:line="45" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="30">buf<pos:position pos:line="45" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="35">len<pos:position pos:line="45" pos:column="38"/></name></expr></argument>)<pos:position pos:line="45" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="40"/></expr_stmt>

		<if pos:line="47" pos:column="17">if <condition pos:line="47" pos:column="20">(<expr><name pos:line="47" pos:column="21">n<pos:position pos:line="47" pos:column="22"/></name> <operator pos:line="47" pos:column="23">&gt;<pos:position pos:line="47" pos:column="27"/></operator> <literal type="number" pos:line="47" pos:column="25">0<pos:position pos:line="47" pos:column="26"/></literal></expr>)<pos:position pos:line="47" pos:column="27"/></condition><then pos:line="47" pos:column="27"> <block pos:line="47" pos:column="28">{
			<expr_stmt><expr><name pos:line="48" pos:column="25">buf<pos:position pos:line="48" pos:column="28"/></name> <operator pos:line="48" pos:column="29">+=<pos:position pos:line="48" pos:column="31"/></operator> <name pos:line="48" pos:column="32">n<pos:position pos:line="48" pos:column="33"/></name></expr>;<pos:position pos:line="48" pos:column="34"/></expr_stmt>
			<expr_stmt><expr><name pos:line="49" pos:column="25">len<pos:position pos:line="49" pos:column="28"/></name> <operator pos:line="49" pos:column="29">-=<pos:position pos:line="49" pos:column="31"/></operator> <name pos:line="49" pos:column="32">n<pos:position pos:line="49" pos:column="33"/></name></expr>;<pos:position pos:line="49" pos:column="34"/></expr_stmt>
			<expr_stmt><expr><name pos:line="50" pos:column="25">ret<pos:position pos:line="50" pos:column="28"/></name> <operator pos:line="50" pos:column="29">+=<pos:position pos:line="50" pos:column="31"/></operator> <name pos:line="50" pos:column="32">n<pos:position pos:line="50" pos:column="33"/></name></expr>;<pos:position pos:line="50" pos:column="34"/></expr_stmt>
			<if pos:line="51" pos:column="25">if <condition pos:line="51" pos:column="28">(<expr><name pos:line="51" pos:column="29">io_timeout<pos:position pos:line="51" pos:column="39"/></name></expr>)<pos:position pos:line="51" pos:column="40"/></condition><then pos:line="51" pos:column="40">
				<block type="pseudo"><expr_stmt><expr><name pos:line="52" pos:column="33">last_io<pos:position pos:line="52" pos:column="40"/></name> <operator pos:line="52" pos:column="41">=<pos:position pos:line="52" pos:column="42"/></operator> <call><name pos:line="52" pos:column="43">time<pos:position pos:line="52" pos:column="47"/></name><argument_list pos:line="52" pos:column="47">(<argument><expr><name pos:line="52" pos:column="48">NULL<pos:position pos:line="52" pos:column="52"/></name></expr></argument>)<pos:position pos:line="52" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="54"/></expr_stmt></block></then></if>
			<continue pos:line="53" pos:column="25">continue;<pos:position pos:line="53" pos:column="34"/></continue>
		}<pos:position pos:line="54" pos:column="18"/></block></then> <elseif pos:line="54" pos:column="19">else <if pos:line="54" pos:column="24">if <condition pos:line="54" pos:column="27">(<expr><name pos:line="54" pos:column="28">n<pos:position pos:line="54" pos:column="29"/></name> <operator pos:line="54" pos:column="30">==<pos:position pos:line="54" pos:column="32"/></operator> <literal type="number" pos:line="54" pos:column="33">0<pos:position pos:line="54" pos:column="34"/></literal></expr>)<pos:position pos:line="54" pos:column="35"/></condition><then pos:line="54" pos:column="35"> <block pos:line="54" pos:column="36">{
			<expr_stmt><expr><call><name pos:line="55" pos:column="25">whine_about_eof<pos:position pos:line="55" pos:column="40"/></name> <argument_list pos:line="55" pos:column="41">()<pos:position pos:line="55" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="44"/></expr_stmt>
			<return pos:line="56" pos:column="25">return <expr><operator pos:line="56" pos:column="32">-<pos:position pos:line="56" pos:column="33"/></operator><literal type="number" pos:line="56" pos:column="33">1<pos:position pos:line="56" pos:column="34"/></literal></expr>;<pos:position pos:line="56" pos:column="35"/></return> <comment type="block" pos:line="56" pos:column="36">/* doesn't return */</comment>
		}<pos:position pos:line="57" pos:column="18"/></block></then></if></elseif> <elseif pos:line="57" pos:column="19">else <if pos:line="57" pos:column="24">if <condition pos:line="57" pos:column="27">(<expr><name pos:line="57" pos:column="28">n<pos:position pos:line="57" pos:column="29"/></name> <operator pos:line="57" pos:column="30">==<pos:position pos:line="57" pos:column="32"/></operator> <operator pos:line="57" pos:column="33">-<pos:position pos:line="57" pos:column="34"/></operator><literal type="number" pos:line="57" pos:column="34">1<pos:position pos:line="57" pos:column="35"/></literal></expr>)<pos:position pos:line="57" pos:column="36"/></condition><then pos:line="57" pos:column="36"> <block pos:line="57" pos:column="37">{
			<if pos:line="58" pos:column="25">if <condition pos:line="58" pos:column="28">(<expr><name pos:line="58" pos:column="29">errno<pos:position pos:line="58" pos:column="34"/></name> <operator pos:line="58" pos:column="35">==<pos:position pos:line="58" pos:column="37"/></operator> <name pos:line="58" pos:column="38">EINTR<pos:position pos:line="58" pos:column="43"/></name> <operator pos:line="58" pos:column="44">||<pos:position pos:line="58" pos:column="46"/></operator> <name pos:line="58" pos:column="47">errno<pos:position pos:line="58" pos:column="52"/></name> <operator pos:line="58" pos:column="53">==<pos:position pos:line="58" pos:column="55"/></operator> <name pos:line="58" pos:column="56">EWOULDBLOCK<pos:position pos:line="58" pos:column="67"/></name> <operator pos:line="58" pos:column="68">||<pos:position pos:line="58" pos:column="70"/></operator>
			    <name pos:line="59" pos:column="29">errno<pos:position pos:line="59" pos:column="34"/></name> <operator pos:line="59" pos:column="35">==<pos:position pos:line="59" pos:column="37"/></operator> <name pos:line="59" pos:column="38">EAGAIN<pos:position pos:line="59" pos:column="44"/></name></expr>)<pos:position pos:line="59" pos:column="45"/></condition><then pos:line="59" pos:column="45"> 
				<block type="pseudo"><continue pos:line="60" pos:column="33">continue;<pos:position pos:line="60" pos:column="42"/></continue></block></then>
			<else pos:line="61" pos:column="25">else
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="62" pos:column="33">die_from_readerr<pos:position pos:line="62" pos:column="49"/></name> <argument_list pos:line="62" pos:column="50">(<argument><expr><name pos:line="62" pos:column="51">errno<pos:position pos:line="62" pos:column="56"/></name></expr></argument>)<pos:position pos:line="62" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="58"/></expr_stmt></block></else></if>
		}<pos:position pos:line="63" pos:column="18"/></block></then></if></elseif></if>
	}<pos:position pos:line="64" pos:column="10"/></block></while>

	<return pos:line="66" pos:column="9">return <expr><name pos:line="66" pos:column="16">ret<pos:position pos:line="66" pos:column="19"/></name></expr>;<pos:position pos:line="66" pos:column="20"/></return>
}<pos:position pos:line="67" pos:column="2"/></block></function></unit>
