<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_148_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">start_filesfrom_forwarding<pos:position pos:line="1" pos:column="32"/></name><parameter_list pos:line="1" pos:column="32">(<parameter><decl><type><name pos:line="1" pos:column="33">int<pos:position pos:line="1" pos:column="36"/></name></type> <name pos:line="1" pos:column="37">fd<pos:position pos:line="1" pos:column="39"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="40"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<if pos:line="3" pos:column="9">if <condition pos:line="3" pos:column="12">(<expr><name pos:line="3" pos:column="13">protocol_version<pos:position pos:line="3" pos:column="29"/></name> <operator pos:line="3" pos:column="30">&lt;<pos:position pos:line="3" pos:column="34"/></operator> <literal type="number" pos:line="3" pos:column="32">31<pos:position pos:line="3" pos:column="34"/></literal> <operator pos:line="3" pos:column="35">&amp;&amp;<pos:position pos:line="3" pos:column="45"/></operator> <name pos:line="3" pos:column="38">OUT_MULTIPLEXED<pos:position pos:line="3" pos:column="53"/></name></expr>)<pos:position pos:line="3" pos:column="54"/></condition><then pos:line="3" pos:column="54"> <block pos:line="3" pos:column="55">{
		<comment type="block" pos:line="4" pos:column="17">/* Older protocols send the files-from data w/o packaging
		 * it in multiplexed I/O packets, so temporarily switch
		 * to buffered I/O to match this behavior. */</comment>
		<expr_stmt><expr><name><name pos:line="7" pos:column="17">iobuf<pos:position pos:line="7" pos:column="22"/></name><operator pos:line="7" pos:column="22">.<pos:position pos:line="7" pos:column="23"/></operator><name pos:line="7" pos:column="23">msg<pos:position pos:line="7" pos:column="26"/></name><operator pos:line="7" pos:column="26">.<pos:position pos:line="7" pos:column="27"/></operator><name pos:line="7" pos:column="27">pos<pos:position pos:line="7" pos:column="30"/></name></name> <operator pos:line="7" pos:column="31">=<pos:position pos:line="7" pos:column="32"/></operator> <name><name pos:line="7" pos:column="33">iobuf<pos:position pos:line="7" pos:column="38"/></name><operator pos:line="7" pos:column="38">.<pos:position pos:line="7" pos:column="39"/></operator><name pos:line="7" pos:column="39">msg<pos:position pos:line="7" pos:column="42"/></name><operator pos:line="7" pos:column="42">.<pos:position pos:line="7" pos:column="43"/></operator><name pos:line="7" pos:column="43">len<pos:position pos:line="7" pos:column="46"/></name></name> <operator pos:line="7" pos:column="47">=<pos:position pos:line="7" pos:column="48"/></operator> <literal type="number" pos:line="7" pos:column="49">0<pos:position pos:line="7" pos:column="50"/></literal></expr>;<pos:position pos:line="7" pos:column="51"/></expr_stmt> <comment type="block" pos:line="7" pos:column="52">/* Be extra sure no messages go out. */</comment>
		<expr_stmt><expr><name pos:line="8" pos:column="17">ff_reenable_multiplex<pos:position pos:line="8" pos:column="38"/></name> <operator pos:line="8" pos:column="39">=<pos:position pos:line="8" pos:column="40"/></operator> <call><name pos:line="8" pos:column="41">io_end_multiplex_out<pos:position pos:line="8" pos:column="61"/></name><argument_list pos:line="8" pos:column="61">(<argument><expr><name pos:line="8" pos:column="62">MPLX_TO_BUFFERED<pos:position pos:line="8" pos:column="78"/></name></expr></argument>)<pos:position pos:line="8" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="80"/></expr_stmt>
	}<pos:position pos:line="9" pos:column="10"/></block></then></if>
	<expr_stmt><expr><name pos:line="10" pos:column="9">ff_forward_fd<pos:position pos:line="10" pos:column="22"/></name> <operator pos:line="10" pos:column="23">=<pos:position pos:line="10" pos:column="24"/></operator> <name pos:line="10" pos:column="25">fd<pos:position pos:line="10" pos:column="27"/></name></expr>;<pos:position pos:line="10" pos:column="28"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="12" pos:column="9">alloc_xbuf<pos:position pos:line="12" pos:column="19"/></name><argument_list pos:line="12" pos:column="19">(<argument><expr><operator pos:line="12" pos:column="20">&amp;<pos:position pos:line="12" pos:column="25"/></operator><name pos:line="12" pos:column="21">ff_xb<pos:position pos:line="12" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="28">FILESFROM_BUFLEN<pos:position pos:line="12" pos:column="44"/></name></expr></argument>)<pos:position pos:line="12" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="46"/></expr_stmt>
}<pos:position pos:line="13" pos:column="2"/></block></function></unit>
