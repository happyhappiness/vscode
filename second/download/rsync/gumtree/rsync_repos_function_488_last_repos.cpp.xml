<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_488_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">BOOL<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">unpack_smb_acl<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name pos:line="1" pos:column="28">SMB_ACL_T<pos:position pos:line="1" pos:column="37"/></name></type> <name pos:line="1" pos:column="38">sacl<pos:position pos:line="1" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="44">rsync_acl<pos:position pos:line="1" pos:column="53"/></name> <modifier pos:line="1" pos:column="54">*<pos:position pos:line="1" pos:column="55"/></modifier></type><name pos:line="1" pos:column="55">racl<pos:position pos:line="1" pos:column="59"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="60"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><specifier pos:line="3" pos:column="9">static<pos:position pos:line="3" pos:column="15"/></specifier> <type><name pos:line="3" pos:column="16">item_list<pos:position pos:line="3" pos:column="25"/></name></type> <name pos:line="3" pos:column="26">temp_ida_list<pos:position pos:line="3" pos:column="39"/></name> <init pos:line="3" pos:column="40">= <expr><name pos:line="3" pos:column="42">EMPTY_ITEM_LIST<pos:position pos:line="3" pos:column="57"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="58"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">SMB_ACL_ENTRY_T<pos:position pos:line="4" pos:column="24"/></name></type> <name pos:line="4" pos:column="25">entry<pos:position pos:line="4" pos:column="30"/></name></decl>;<pos:position pos:line="4" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="5" pos:column="9">const<pos:position pos:line="5" pos:column="14"/></specifier> <name pos:line="5" pos:column="15">char<pos:position pos:line="5" pos:column="19"/></name> <modifier pos:line="5" pos:column="20">*<pos:position pos:line="5" pos:column="21"/></modifier></type><name pos:line="5" pos:column="21">errfun<pos:position pos:line="5" pos:column="27"/></name></decl>;<pos:position pos:line="5" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">rc<pos:position pos:line="6" pos:column="15"/></name></decl>;<pos:position pos:line="6" pos:column="16"/></decl_stmt>

	<expr_stmt><expr><name pos:line="8" pos:column="9">errfun<pos:position pos:line="8" pos:column="15"/></name> <operator pos:line="8" pos:column="16">=<pos:position pos:line="8" pos:column="17"/></operator> <literal type="string" pos:line="8" pos:column="18">"sys_acl_get_entry"<pos:position pos:line="8" pos:column="37"/></literal></expr>;<pos:position pos:line="8" pos:column="38"/></expr_stmt>
	<for pos:line="9" pos:column="9">for <control pos:line="9" pos:column="13">(<init><expr><name pos:line="9" pos:column="14">rc<pos:position pos:line="9" pos:column="16"/></name> <operator pos:line="9" pos:column="17">=<pos:position pos:line="9" pos:column="18"/></operator> <call><name pos:line="9" pos:column="19">sys_acl_get_entry<pos:position pos:line="9" pos:column="36"/></name><argument_list pos:line="9" pos:column="36">(<argument><expr><name pos:line="9" pos:column="37">sacl<pos:position pos:line="9" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="43">SMB_ACL_FIRST_ENTRY<pos:position pos:line="9" pos:column="62"/></name></expr></argument>, <argument><expr><operator pos:line="9" pos:column="64">&amp;<pos:position pos:line="9" pos:column="69"/></operator><name pos:line="9" pos:column="65">entry<pos:position pos:line="9" pos:column="70"/></name></expr></argument>)<pos:position pos:line="9" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="72"/></init>
	     <condition><expr><name pos:line="10" pos:column="14">rc<pos:position pos:line="10" pos:column="16"/></name> <operator pos:line="10" pos:column="17">==<pos:position pos:line="10" pos:column="19"/></operator> <literal type="number" pos:line="10" pos:column="20">1<pos:position pos:line="10" pos:column="21"/></literal></expr>;<pos:position pos:line="10" pos:column="22"/></condition>
	     <incr><expr><name pos:line="11" pos:column="14">rc<pos:position pos:line="11" pos:column="16"/></name> <operator pos:line="11" pos:column="17">=<pos:position pos:line="11" pos:column="18"/></operator> <call><name pos:line="11" pos:column="19">sys_acl_get_entry<pos:position pos:line="11" pos:column="36"/></name><argument_list pos:line="11" pos:column="36">(<argument><expr><name pos:line="11" pos:column="37">sacl<pos:position pos:line="11" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="43">SMB_ACL_NEXT_ENTRY<pos:position pos:line="11" pos:column="61"/></name></expr></argument>, <argument><expr><operator pos:line="11" pos:column="63">&amp;<pos:position pos:line="11" pos:column="68"/></operator><name pos:line="11" pos:column="64">entry<pos:position pos:line="11" pos:column="69"/></name></expr></argument>)<pos:position pos:line="11" pos:column="70"/></argument_list></call></expr></incr>)<pos:position pos:line="11" pos:column="71"/></control> <block pos:line="11" pos:column="72">{
		<decl_stmt><decl><type><name pos:line="12" pos:column="17">SMB_ACL_TAG_T<pos:position pos:line="12" pos:column="30"/></name></type> <name pos:line="12" pos:column="31">tag_type<pos:position pos:line="12" pos:column="39"/></name></decl>;<pos:position pos:line="12" pos:column="40"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="13" pos:column="17">uint32<pos:position pos:line="13" pos:column="23"/></name></type> <name pos:line="13" pos:column="24">access<pos:position pos:line="13" pos:column="30"/></name></decl>;<pos:position pos:line="13" pos:column="31"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="14" pos:column="17">id_t<pos:position pos:line="14" pos:column="21"/></name></type> <name pos:line="14" pos:column="22">g_u_id<pos:position pos:line="14" pos:column="28"/></name></decl>;<pos:position pos:line="14" pos:column="29"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="15" pos:column="17">id_access<pos:position pos:line="15" pos:column="26"/></name> <modifier pos:line="15" pos:column="27">*<pos:position pos:line="15" pos:column="28"/></modifier></type><name pos:line="15" pos:column="28">ida<pos:position pos:line="15" pos:column="31"/></name></decl>;<pos:position pos:line="15" pos:column="32"/></decl_stmt>
		<if pos:line="16" pos:column="17">if <condition pos:line="16" pos:column="20">(<expr><operator pos:line="16" pos:column="21">(<pos:position pos:line="16" pos:column="22"/></operator><name pos:line="16" pos:column="22">rc<pos:position pos:line="16" pos:column="24"/></name> <operator pos:line="16" pos:column="25">=<pos:position pos:line="16" pos:column="26"/></operator> <call><name pos:line="16" pos:column="27">sys_acl_get_info<pos:position pos:line="16" pos:column="43"/></name><argument_list pos:line="16" pos:column="43">(<argument><expr><name pos:line="16" pos:column="44">entry<pos:position pos:line="16" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="16" pos:column="51">&amp;<pos:position pos:line="16" pos:column="56"/></operator><name pos:line="16" pos:column="52">tag_type<pos:position pos:line="16" pos:column="60"/></name></expr></argument>, <argument><expr><operator pos:line="16" pos:column="62">&amp;<pos:position pos:line="16" pos:column="67"/></operator><name pos:line="16" pos:column="63">access<pos:position pos:line="16" pos:column="69"/></name></expr></argument>, <argument><expr><operator pos:line="16" pos:column="71">&amp;<pos:position pos:line="16" pos:column="76"/></operator><name pos:line="16" pos:column="72">g_u_id<pos:position pos:line="16" pos:column="78"/></name></expr></argument>)<pos:position pos:line="16" pos:column="79"/></argument_list></call><operator pos:line="16" pos:column="79">)<pos:position pos:line="16" pos:column="80"/></operator> <operator pos:line="16" pos:column="81">!=<pos:position pos:line="16" pos:column="83"/></operator> <literal type="number" pos:line="16" pos:column="84">0<pos:position pos:line="16" pos:column="85"/></literal></expr>)<pos:position pos:line="16" pos:column="86"/></condition><then pos:line="16" pos:column="86"> <block pos:line="16" pos:column="87">{
			<expr_stmt><expr><name pos:line="17" pos:column="25">errfun<pos:position pos:line="17" pos:column="31"/></name> <operator pos:line="17" pos:column="32">=<pos:position pos:line="17" pos:column="33"/></operator> <literal type="string" pos:line="17" pos:column="34">"sys_acl_get_info"<pos:position pos:line="17" pos:column="52"/></literal></expr>;<pos:position pos:line="17" pos:column="53"/></expr_stmt>
			<break pos:line="18" pos:column="25">break;<pos:position pos:line="18" pos:column="31"/></break>
		}<pos:position pos:line="19" pos:column="18"/></block></then></if>
		<comment type="block" pos:line="20" pos:column="17">/* continue == done with entry; break == store in temporary ida list */</comment>
		<switch pos:line="21" pos:column="17">switch <condition pos:line="21" pos:column="24">(<expr><name pos:line="21" pos:column="25">tag_type<pos:position pos:line="21" pos:column="33"/></name></expr>)<pos:position pos:line="21" pos:column="34"/></condition> <block pos:line="21" pos:column="35">{
<cpp:ifndef pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">ifndef<pos:position pos:line="22" pos:column="8"/></cpp:directive> <name pos:line="22" pos:column="9">HAVE_OSX_ACLS<pos:position pos:line="22" pos:column="22"/></name></cpp:ifndef>
		<case pos:line="23" pos:column="17">case <expr><name pos:line="23" pos:column="22">SMB_ACL_USER_OBJ<pos:position pos:line="23" pos:column="38"/></name></expr>:<pos:position pos:line="23" pos:column="39"/></case>
			<if pos:line="24" pos:column="25">if <condition pos:line="24" pos:column="28">(<expr><name><name pos:line="24" pos:column="29">racl<pos:position pos:line="24" pos:column="33"/></name><operator pos:line="24" pos:column="33">-&gt;<pos:position pos:line="24" pos:column="38"/></operator><name pos:line="24" pos:column="35">user_obj<pos:position pos:line="24" pos:column="43"/></name></name> <operator pos:line="24" pos:column="44">==<pos:position pos:line="24" pos:column="46"/></operator> <name pos:line="24" pos:column="47">NO_ENTRY<pos:position pos:line="24" pos:column="55"/></name></expr>)<pos:position pos:line="24" pos:column="56"/></condition><then pos:line="24" pos:column="56">
				<block type="pseudo"><expr_stmt><expr><name><name pos:line="25" pos:column="33">racl<pos:position pos:line="25" pos:column="37"/></name><operator pos:line="25" pos:column="37">-&gt;<pos:position pos:line="25" pos:column="42"/></operator><name pos:line="25" pos:column="39">user_obj<pos:position pos:line="25" pos:column="47"/></name></name> <operator pos:line="25" pos:column="48">=<pos:position pos:line="25" pos:column="49"/></operator> <name pos:line="25" pos:column="50">access<pos:position pos:line="25" pos:column="56"/></name></expr>;<pos:position pos:line="25" pos:column="57"/></expr_stmt></block></then>
			<else pos:line="26" pos:column="25">else
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="27" pos:column="33">rprintf<pos:position pos:line="27" pos:column="40"/></name><argument_list pos:line="27" pos:column="40">(<argument><expr><name pos:line="27" pos:column="41">FINFO<pos:position pos:line="27" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="27" pos:column="48">"unpack_smb_acl: warning: duplicate USER_OBJ entry ignored\n"<pos:position pos:line="27" pos:column="109"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="110"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="111"/></expr_stmt></block></else></if>
			<continue pos:line="28" pos:column="25">continue;<pos:position pos:line="28" pos:column="34"/></continue>
		<case pos:line="29" pos:column="17">case <expr><name pos:line="29" pos:column="22">SMB_ACL_GROUP_OBJ<pos:position pos:line="29" pos:column="39"/></name></expr>:<pos:position pos:line="29" pos:column="40"/></case>
			<if pos:line="30" pos:column="25">if <condition pos:line="30" pos:column="28">(<expr><name><name pos:line="30" pos:column="29">racl<pos:position pos:line="30" pos:column="33"/></name><operator pos:line="30" pos:column="33">-&gt;<pos:position pos:line="30" pos:column="38"/></operator><name pos:line="30" pos:column="35">group_obj<pos:position pos:line="30" pos:column="44"/></name></name> <operator pos:line="30" pos:column="45">==<pos:position pos:line="30" pos:column="47"/></operator> <name pos:line="30" pos:column="48">NO_ENTRY<pos:position pos:line="30" pos:column="56"/></name></expr>)<pos:position pos:line="30" pos:column="57"/></condition><then pos:line="30" pos:column="57">
				<block type="pseudo"><expr_stmt><expr><name><name pos:line="31" pos:column="33">racl<pos:position pos:line="31" pos:column="37"/></name><operator pos:line="31" pos:column="37">-&gt;<pos:position pos:line="31" pos:column="42"/></operator><name pos:line="31" pos:column="39">group_obj<pos:position pos:line="31" pos:column="48"/></name></name> <operator pos:line="31" pos:column="49">=<pos:position pos:line="31" pos:column="50"/></operator> <name pos:line="31" pos:column="51">access<pos:position pos:line="31" pos:column="57"/></name></expr>;<pos:position pos:line="31" pos:column="58"/></expr_stmt></block></then>
			<else pos:line="32" pos:column="25">else
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="33" pos:column="33">rprintf<pos:position pos:line="33" pos:column="40"/></name><argument_list pos:line="33" pos:column="40">(<argument><expr><name pos:line="33" pos:column="41">FINFO<pos:position pos:line="33" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="33" pos:column="48">"unpack_smb_acl: warning: duplicate GROUP_OBJ entry ignored\n"<pos:position pos:line="33" pos:column="110"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="111"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="112"/></expr_stmt></block></else></if>
			<continue pos:line="34" pos:column="25">continue;<pos:position pos:line="34" pos:column="34"/></continue>
		<case pos:line="35" pos:column="17">case <expr><name pos:line="35" pos:column="22">SMB_ACL_MASK<pos:position pos:line="35" pos:column="34"/></name></expr>:<pos:position pos:line="35" pos:column="35"/></case>
			<if pos:line="36" pos:column="25">if <condition pos:line="36" pos:column="28">(<expr><name><name pos:line="36" pos:column="29">racl<pos:position pos:line="36" pos:column="33"/></name><operator pos:line="36" pos:column="33">-&gt;<pos:position pos:line="36" pos:column="38"/></operator><name pos:line="36" pos:column="35">mask_obj<pos:position pos:line="36" pos:column="43"/></name></name> <operator pos:line="36" pos:column="44">==<pos:position pos:line="36" pos:column="46"/></operator> <name pos:line="36" pos:column="47">NO_ENTRY<pos:position pos:line="36" pos:column="55"/></name></expr>)<pos:position pos:line="36" pos:column="56"/></condition><then pos:line="36" pos:column="56">
				<block type="pseudo"><expr_stmt><expr><name><name pos:line="37" pos:column="33">racl<pos:position pos:line="37" pos:column="37"/></name><operator pos:line="37" pos:column="37">-&gt;<pos:position pos:line="37" pos:column="42"/></operator><name pos:line="37" pos:column="39">mask_obj<pos:position pos:line="37" pos:column="47"/></name></name> <operator pos:line="37" pos:column="48">=<pos:position pos:line="37" pos:column="49"/></operator> <name pos:line="37" pos:column="50">access<pos:position pos:line="37" pos:column="56"/></name></expr>;<pos:position pos:line="37" pos:column="57"/></expr_stmt></block></then>
			<else pos:line="38" pos:column="25">else
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="39" pos:column="33">rprintf<pos:position pos:line="39" pos:column="40"/></name><argument_list pos:line="39" pos:column="40">(<argument><expr><name pos:line="39" pos:column="41">FINFO<pos:position pos:line="39" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="39" pos:column="48">"unpack_smb_acl: warning: duplicate MASK entry ignored\n"<pos:position pos:line="39" pos:column="105"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="106"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="107"/></expr_stmt></block></else></if>
			<continue pos:line="40" pos:column="25">continue;<pos:position pos:line="40" pos:column="34"/></continue>
		<case pos:line="41" pos:column="17">case <expr><name pos:line="41" pos:column="22">SMB_ACL_OTHER<pos:position pos:line="41" pos:column="35"/></name></expr>:<pos:position pos:line="41" pos:column="36"/></case>
			<if pos:line="42" pos:column="25">if <condition pos:line="42" pos:column="28">(<expr><name><name pos:line="42" pos:column="29">racl<pos:position pos:line="42" pos:column="33"/></name><operator pos:line="42" pos:column="33">-&gt;<pos:position pos:line="42" pos:column="38"/></operator><name pos:line="42" pos:column="35">other_obj<pos:position pos:line="42" pos:column="44"/></name></name> <operator pos:line="42" pos:column="45">==<pos:position pos:line="42" pos:column="47"/></operator> <name pos:line="42" pos:column="48">NO_ENTRY<pos:position pos:line="42" pos:column="56"/></name></expr>)<pos:position pos:line="42" pos:column="57"/></condition><then pos:line="42" pos:column="57">
				<block type="pseudo"><expr_stmt><expr><name><name pos:line="43" pos:column="33">racl<pos:position pos:line="43" pos:column="37"/></name><operator pos:line="43" pos:column="37">-&gt;<pos:position pos:line="43" pos:column="42"/></operator><name pos:line="43" pos:column="39">other_obj<pos:position pos:line="43" pos:column="48"/></name></name> <operator pos:line="43" pos:column="49">=<pos:position pos:line="43" pos:column="50"/></operator> <name pos:line="43" pos:column="51">access<pos:position pos:line="43" pos:column="57"/></name></expr>;<pos:position pos:line="43" pos:column="58"/></expr_stmt></block></then>
			<else pos:line="44" pos:column="25">else
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="45" pos:column="33">rprintf<pos:position pos:line="45" pos:column="40"/></name><argument_list pos:line="45" pos:column="40">(<argument><expr><name pos:line="45" pos:column="41">FINFO<pos:position pos:line="45" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="45" pos:column="48">"unpack_smb_acl: warning: duplicate OTHER entry ignored\n"<pos:position pos:line="45" pos:column="106"/></literal></expr></argument>)<pos:position pos:line="45" pos:column="107"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="108"/></expr_stmt></block></else></if>
			<continue pos:line="46" pos:column="25">continue;<pos:position pos:line="46" pos:column="34"/></continue>
<cpp:endif pos:line="47" pos:column="1">#<cpp:directive pos:line="47" pos:column="2">endif<pos:position pos:line="47" pos:column="7"/></cpp:directive></cpp:endif>
		<case pos:line="48" pos:column="17">case <expr><name pos:line="48" pos:column="22">SMB_ACL_USER<pos:position pos:line="48" pos:column="34"/></name></expr>:<pos:position pos:line="48" pos:column="35"/></case>
			<expr_stmt><expr><name pos:line="49" pos:column="25">access<pos:position pos:line="49" pos:column="31"/></name> <operator pos:line="49" pos:column="32">|=<pos:position pos:line="49" pos:column="34"/></operator> <name pos:line="49" pos:column="35">NAME_IS_USER<pos:position pos:line="49" pos:column="47"/></name></expr>;<pos:position pos:line="49" pos:column="48"/></expr_stmt>
			<break pos:line="50" pos:column="25">break;<pos:position pos:line="50" pos:column="31"/></break>
		<case pos:line="51" pos:column="17">case <expr><name pos:line="51" pos:column="22">SMB_ACL_GROUP<pos:position pos:line="51" pos:column="35"/></name></expr>:<pos:position pos:line="51" pos:column="36"/></case>
			<break pos:line="52" pos:column="25">break;<pos:position pos:line="52" pos:column="31"/></break>
		<default pos:line="53" pos:column="17">default:<pos:position pos:line="53" pos:column="25"/></default>
			<expr_stmt><expr><call><name pos:line="54" pos:column="25">rprintf<pos:position pos:line="54" pos:column="32"/></name><argument_list pos:line="54" pos:column="32">(<argument><expr><name pos:line="54" pos:column="33">FINFO<pos:position pos:line="54" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="54" pos:column="40">"unpack_smb_acl: warning: entry with unrecognized tag type ignored\n"<pos:position pos:line="54" pos:column="109"/></literal></expr></argument>)<pos:position pos:line="54" pos:column="110"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="111"/></expr_stmt>
			<continue pos:line="55" pos:column="25">continue;<pos:position pos:line="55" pos:column="34"/></continue>
		}<pos:position pos:line="56" pos:column="18"/></block></switch>
		<expr_stmt><expr><name pos:line="57" pos:column="17">ida<pos:position pos:line="57" pos:column="20"/></name> <operator pos:line="57" pos:column="21">=<pos:position pos:line="57" pos:column="22"/></operator> <call><name pos:line="57" pos:column="23">EXPAND_ITEM_LIST<pos:position pos:line="57" pos:column="39"/></name><argument_list pos:line="57" pos:column="39">(<argument><expr><operator pos:line="57" pos:column="40">&amp;<pos:position pos:line="57" pos:column="45"/></operator><name pos:line="57" pos:column="41">temp_ida_list<pos:position pos:line="57" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="56">id_access<pos:position pos:line="57" pos:column="65"/></name></expr></argument>, <argument><expr><operator pos:line="57" pos:column="67">-<pos:position pos:line="57" pos:column="68"/></operator><literal type="number" pos:line="57" pos:column="68">10<pos:position pos:line="57" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="57" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="72"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="58" pos:column="17">ida<pos:position pos:line="58" pos:column="20"/></name><operator pos:line="58" pos:column="20">-&gt;<pos:position pos:line="58" pos:column="25"/></operator><name pos:line="58" pos:column="22">id<pos:position pos:line="58" pos:column="24"/></name></name> <operator pos:line="58" pos:column="25">=<pos:position pos:line="58" pos:column="26"/></operator> <name pos:line="58" pos:column="27">g_u_id<pos:position pos:line="58" pos:column="33"/></name></expr>;<pos:position pos:line="58" pos:column="34"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="59" pos:column="17">ida<pos:position pos:line="59" pos:column="20"/></name><operator pos:line="59" pos:column="20">-&gt;<pos:position pos:line="59" pos:column="25"/></operator><name pos:line="59" pos:column="22">access<pos:position pos:line="59" pos:column="28"/></name></name> <operator pos:line="59" pos:column="29">=<pos:position pos:line="59" pos:column="30"/></operator> <name pos:line="59" pos:column="31">access<pos:position pos:line="59" pos:column="37"/></name></expr>;<pos:position pos:line="59" pos:column="38"/></expr_stmt>
	}<pos:position pos:line="60" pos:column="10"/></block></for>
	<if pos:line="61" pos:column="9">if <condition pos:line="61" pos:column="12">(<expr><name pos:line="61" pos:column="13">rc<pos:position pos:line="61" pos:column="15"/></name></expr>)<pos:position pos:line="61" pos:column="16"/></condition><then pos:line="61" pos:column="16"> <block pos:line="61" pos:column="17">{
		<expr_stmt><expr><call><name pos:line="62" pos:column="17">rsyserr<pos:position pos:line="62" pos:column="24"/></name><argument_list pos:line="62" pos:column="24">(<argument><expr><name pos:line="62" pos:column="25">FERROR_XFER<pos:position pos:line="62" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="38">errno<pos:position pos:line="62" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="62" pos:column="45">"unpack_smb_acl: %s()"<pos:position pos:line="62" pos:column="67"/></literal></expr></argument>, <argument><expr><name pos:line="62" pos:column="69">errfun<pos:position pos:line="62" pos:column="75"/></name></expr></argument>)<pos:position pos:line="62" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="77"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="63" pos:column="17">rsync_acl_free<pos:position pos:line="63" pos:column="31"/></name><argument_list pos:line="63" pos:column="31">(<argument><expr><name pos:line="63" pos:column="32">racl<pos:position pos:line="63" pos:column="36"/></name></expr></argument>)<pos:position pos:line="63" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="38"/></expr_stmt>
		<return pos:line="64" pos:column="17">return <expr><name pos:line="64" pos:column="24">False<pos:position pos:line="64" pos:column="29"/></name></expr>;<pos:position pos:line="64" pos:column="30"/></return>
	}<pos:position pos:line="65" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="67" pos:column="9">/* Transfer the count id_access items out of the temp_ida_list
	 * into the names ida_entries list in racl. */</comment>
	<if pos:line="69" pos:column="9">if <condition pos:line="69" pos:column="12">(<expr><name><name pos:line="69" pos:column="13">temp_ida_list<pos:position pos:line="69" pos:column="26"/></name><operator pos:line="69" pos:column="26">.<pos:position pos:line="69" pos:column="27"/></operator><name pos:line="69" pos:column="27">count<pos:position pos:line="69" pos:column="32"/></name></name></expr>)<pos:position pos:line="69" pos:column="33"/></condition><then pos:line="69" pos:column="33"> <block pos:line="69" pos:column="34">{
<cpp:ifdef pos:line="70" pos:column="1">#<cpp:directive pos:line="70" pos:column="2">ifdef<pos:position pos:line="70" pos:column="7"/></cpp:directive> <name pos:line="70" pos:column="8">SMB_ACL_NEED_SORT<pos:position pos:line="70" pos:column="25"/></name></cpp:ifdef>
		<if pos:line="71" pos:column="17">if <condition pos:line="71" pos:column="20">(<expr><name><name pos:line="71" pos:column="21">temp_ida_list<pos:position pos:line="71" pos:column="34"/></name><operator pos:line="71" pos:column="34">.<pos:position pos:line="71" pos:column="35"/></operator><name pos:line="71" pos:column="35">count<pos:position pos:line="71" pos:column="40"/></name></name> <operator pos:line="71" pos:column="41">&gt;<pos:position pos:line="71" pos:column="45"/></operator> <literal type="number" pos:line="71" pos:column="43">1<pos:position pos:line="71" pos:column="44"/></literal></expr>)<pos:position pos:line="71" pos:column="45"/></condition><then pos:line="71" pos:column="45"> <block pos:line="71" pos:column="46">{
			<expr_stmt><expr><call><name pos:line="72" pos:column="25">qsort<pos:position pos:line="72" pos:column="30"/></name><argument_list pos:line="72" pos:column="30">(<argument><expr><name><name pos:line="72" pos:column="31">temp_ida_list<pos:position pos:line="72" pos:column="44"/></name><operator pos:line="72" pos:column="44">.<pos:position pos:line="72" pos:column="45"/></operator><name pos:line="72" pos:column="45">items<pos:position pos:line="72" pos:column="50"/></name></name></expr></argument>, <argument><expr><name><name pos:line="72" pos:column="52">temp_ida_list<pos:position pos:line="72" pos:column="65"/></name><operator pos:line="72" pos:column="65">.<pos:position pos:line="72" pos:column="66"/></operator><name pos:line="72" pos:column="66">count<pos:position pos:line="72" pos:column="71"/></name></name></expr></argument>,
			      <argument><expr><sizeof pos:line="73" pos:column="31">sizeof <argument_list pos:line="73" pos:column="38">(<argument><expr><name pos:line="73" pos:column="39">id_access<pos:position pos:line="73" pos:column="48"/></name></expr></argument>)<pos:position pos:line="73" pos:column="49"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="73" pos:column="51">id_access_sorter<pos:position pos:line="73" pos:column="67"/></name></expr></argument>)<pos:position pos:line="73" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="69"/></expr_stmt>
		}<pos:position pos:line="74" pos:column="18"/></block></then></if>
<cpp:endif pos:line="75" pos:column="1">#<cpp:directive pos:line="75" pos:column="2">endif<pos:position pos:line="75" pos:column="7"/></cpp:directive></cpp:endif>
		<if pos:line="76" pos:column="17">if <condition pos:line="76" pos:column="20">(<expr><operator pos:line="76" pos:column="21">!<pos:position pos:line="76" pos:column="22"/></operator><operator pos:line="76" pos:column="22">(<pos:position pos:line="76" pos:column="23"/></operator><name><name pos:line="76" pos:column="23">racl<pos:position pos:line="76" pos:column="27"/></name><operator pos:line="76" pos:column="27">-&gt;<pos:position pos:line="76" pos:column="32"/></operator><name pos:line="76" pos:column="29">names<pos:position pos:line="76" pos:column="34"/></name><operator pos:line="76" pos:column="34">.<pos:position pos:line="76" pos:column="35"/></operator><name pos:line="76" pos:column="35">idas<pos:position pos:line="76" pos:column="39"/></name></name> <operator pos:line="76" pos:column="40">=<pos:position pos:line="76" pos:column="41"/></operator> <call><name pos:line="76" pos:column="42">new_array<pos:position pos:line="76" pos:column="51"/></name><argument_list pos:line="76" pos:column="51">(<argument><expr><name pos:line="76" pos:column="52">id_access<pos:position pos:line="76" pos:column="61"/></name></expr></argument>, <argument><expr><name><name pos:line="76" pos:column="63">temp_ida_list<pos:position pos:line="76" pos:column="76"/></name><operator pos:line="76" pos:column="76">.<pos:position pos:line="76" pos:column="77"/></operator><name pos:line="76" pos:column="77">count<pos:position pos:line="76" pos:column="82"/></name></name></expr></argument>)<pos:position pos:line="76" pos:column="83"/></argument_list></call><operator pos:line="76" pos:column="83">)<pos:position pos:line="76" pos:column="84"/></operator></expr>)<pos:position pos:line="76" pos:column="85"/></condition><then pos:line="76" pos:column="85">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="77" pos:column="25">out_of_memory<pos:position pos:line="77" pos:column="38"/></name><argument_list pos:line="77" pos:column="38">(<argument><expr><literal type="string" pos:line="77" pos:column="39">"unpack_smb_acl"<pos:position pos:line="77" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="77" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="57"/></expr_stmt></block></then></if>
		<expr_stmt><expr><call><name pos:line="78" pos:column="17">memcpy<pos:position pos:line="78" pos:column="23"/></name><argument_list pos:line="78" pos:column="23">(<argument><expr><name><name pos:line="78" pos:column="24">racl<pos:position pos:line="78" pos:column="28"/></name><operator pos:line="78" pos:column="28">-&gt;<pos:position pos:line="78" pos:column="33"/></operator><name pos:line="78" pos:column="30">names<pos:position pos:line="78" pos:column="35"/></name><operator pos:line="78" pos:column="35">.<pos:position pos:line="78" pos:column="36"/></operator><name pos:line="78" pos:column="36">idas<pos:position pos:line="78" pos:column="40"/></name></name></expr></argument>, <argument><expr><name><name pos:line="78" pos:column="42">temp_ida_list<pos:position pos:line="78" pos:column="55"/></name><operator pos:line="78" pos:column="55">.<pos:position pos:line="78" pos:column="56"/></operator><name pos:line="78" pos:column="56">items<pos:position pos:line="78" pos:column="61"/></name></name></expr></argument>,
		       <argument><expr><name><name pos:line="79" pos:column="24">temp_ida_list<pos:position pos:line="79" pos:column="37"/></name><operator pos:line="79" pos:column="37">.<pos:position pos:line="79" pos:column="38"/></operator><name pos:line="79" pos:column="38">count<pos:position pos:line="79" pos:column="43"/></name></name> <operator pos:line="79" pos:column="44">*<pos:position pos:line="79" pos:column="45"/></operator> <sizeof pos:line="79" pos:column="46">sizeof <argument_list pos:line="79" pos:column="53">(<argument><expr><name pos:line="79" pos:column="54">id_access<pos:position pos:line="79" pos:column="63"/></name></expr></argument>)<pos:position pos:line="79" pos:column="64"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="79" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="66"/></expr_stmt>
	}<pos:position pos:line="80" pos:column="10"/></block></then> <else pos:line="80" pos:column="11">else
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="81" pos:column="17">racl<pos:position pos:line="81" pos:column="21"/></name><operator pos:line="81" pos:column="21">-&gt;<pos:position pos:line="81" pos:column="26"/></operator><name pos:line="81" pos:column="23">names<pos:position pos:line="81" pos:column="28"/></name><operator pos:line="81" pos:column="28">.<pos:position pos:line="81" pos:column="29"/></operator><name pos:line="81" pos:column="29">idas<pos:position pos:line="81" pos:column="33"/></name></name> <operator pos:line="81" pos:column="34">=<pos:position pos:line="81" pos:column="35"/></operator> <name pos:line="81" pos:column="36">NULL<pos:position pos:line="81" pos:column="40"/></name></expr>;<pos:position pos:line="81" pos:column="41"/></expr_stmt></block></else></if>

	<expr_stmt><expr><name><name pos:line="83" pos:column="9">racl<pos:position pos:line="83" pos:column="13"/></name><operator pos:line="83" pos:column="13">-&gt;<pos:position pos:line="83" pos:column="18"/></operator><name pos:line="83" pos:column="15">names<pos:position pos:line="83" pos:column="20"/></name><operator pos:line="83" pos:column="20">.<pos:position pos:line="83" pos:column="21"/></operator><name pos:line="83" pos:column="21">count<pos:position pos:line="83" pos:column="26"/></name></name> <operator pos:line="83" pos:column="27">=<pos:position pos:line="83" pos:column="28"/></operator> <name><name pos:line="83" pos:column="29">temp_ida_list<pos:position pos:line="83" pos:column="42"/></name><operator pos:line="83" pos:column="42">.<pos:position pos:line="83" pos:column="43"/></operator><name pos:line="83" pos:column="43">count<pos:position pos:line="83" pos:column="48"/></name></name></expr>;<pos:position pos:line="83" pos:column="49"/></expr_stmt>

	<comment type="block" pos:line="85" pos:column="9">/* Truncate the temporary list now that its idas have been saved. */</comment>
	<expr_stmt><expr><name><name pos:line="86" pos:column="9">temp_ida_list<pos:position pos:line="86" pos:column="22"/></name><operator pos:line="86" pos:column="22">.<pos:position pos:line="86" pos:column="23"/></operator><name pos:line="86" pos:column="23">count<pos:position pos:line="86" pos:column="28"/></name></name> <operator pos:line="86" pos:column="29">=<pos:position pos:line="86" pos:column="30"/></operator> <literal type="number" pos:line="86" pos:column="31">0<pos:position pos:line="86" pos:column="32"/></literal></expr>;<pos:position pos:line="86" pos:column="33"/></expr_stmt>

	<return pos:line="88" pos:column="9">return <expr><name pos:line="88" pos:column="16">True<pos:position pos:line="88" pos:column="20"/></name></expr>;<pos:position pos:line="88" pos:column="21"/></return>
}<pos:position pos:line="89" pos:column="2"/></block></function></unit>
