<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_function_858.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">read_args<pos:position pos:line="1" pos:column="14"/></name><parameter_list pos:line="1" pos:column="14">(<parameter><decl><type><name pos:line="1" pos:column="15">int<pos:position pos:line="1" pos:column="18"/></name></type> <name pos:line="1" pos:column="19">f_in<pos:position pos:line="1" pos:column="23"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="25">char<pos:position pos:line="1" pos:column="29"/></name> <modifier pos:line="1" pos:column="30">*<pos:position pos:line="1" pos:column="31"/></modifier></type><name pos:line="1" pos:column="31">mod_name<pos:position pos:line="1" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="41">char<pos:position pos:line="1" pos:column="45"/></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">buf<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="52">size_t<pos:position pos:line="1" pos:column="58"/></name></type> <name pos:line="1" pos:column="59">bufsiz<pos:position pos:line="1" pos:column="65"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="67">int<pos:position pos:line="1" pos:column="70"/></name></type> <name pos:line="1" pos:column="71">rl_nulls<pos:position pos:line="1" pos:column="79"/></name></decl></parameter>,
	      <parameter><decl><type><name pos:line="2" pos:column="15">char<pos:position pos:line="2" pos:column="19"/></name> <modifier pos:line="2" pos:column="20">*<pos:position pos:line="2" pos:column="21"/></modifier><modifier pos:line="2" pos:column="21">*<pos:position pos:line="2" pos:column="22"/></modifier><modifier pos:line="2" pos:column="22">*<pos:position pos:line="2" pos:column="23"/></modifier></type><name pos:line="2" pos:column="23">argv_p<pos:position pos:line="2" pos:column="29"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="31">int<pos:position pos:line="2" pos:column="34"/></name> <modifier pos:line="2" pos:column="35">*<pos:position pos:line="2" pos:column="36"/></modifier></type><name pos:line="2" pos:column="36">argc_p<pos:position pos:line="2" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="44">char<pos:position pos:line="2" pos:column="48"/></name> <modifier pos:line="2" pos:column="49">*<pos:position pos:line="2" pos:column="50"/></modifier><modifier pos:line="2" pos:column="50">*<pos:position pos:line="2" pos:column="51"/></modifier></type><name pos:line="2" pos:column="51">request_p<pos:position pos:line="2" pos:column="60"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="61"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">maxargs<pos:position pos:line="4" pos:column="20"/></name> <init pos:line="4" pos:column="21">= <expr><name pos:line="4" pos:column="23">MAX_ARGS<pos:position pos:line="4" pos:column="31"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="32"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">dot_pos<pos:position pos:line="5" pos:column="20"/></name> <init pos:line="5" pos:column="21">= <expr><literal type="number" pos:line="5" pos:column="23">0<pos:position pos:line="5" pos:column="24"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="25"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">argc<pos:position pos:line="6" pos:column="17"/></name> <init pos:line="6" pos:column="18">= <expr><literal type="number" pos:line="6" pos:column="20">0<pos:position pos:line="6" pos:column="21"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="22"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">char<pos:position pos:line="7" pos:column="13"/></name> <modifier pos:line="7" pos:column="14">*<pos:position pos:line="7" pos:column="15"/></modifier><modifier pos:line="7" pos:column="15">*<pos:position pos:line="7" pos:column="16"/></modifier></type><name pos:line="7" pos:column="16">argv<pos:position pos:line="7" pos:column="20"/></name></decl>, <modifier pos:line="7" pos:column="22">*<pos:position pos:line="7" pos:column="23"/></modifier><decl><type ref="prev"/><name pos:line="7" pos:column="23">p<pos:position pos:line="7" pos:column="24"/></name></decl>;<pos:position pos:line="7" pos:column="25"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">int<pos:position pos:line="8" pos:column="12"/></name></type> <name pos:line="8" pos:column="13">rl_flags<pos:position pos:line="8" pos:column="21"/></name> <init pos:line="8" pos:column="22">= <expr><operator pos:line="8" pos:column="24">(<pos:position pos:line="8" pos:column="25"/></operator><ternary><condition><expr><name pos:line="8" pos:column="25">rl_nulls<pos:position pos:line="8" pos:column="33"/></name></expr> ?<pos:position pos:line="8" pos:column="35"/></condition><then pos:line="8" pos:column="35"> <expr><name pos:line="8" pos:column="36">RL_EOL_NULLS<pos:position pos:line="8" pos:column="48"/></name></expr> <pos:position pos:line="8" pos:column="49"/></then><else pos:line="8" pos:column="49">: <expr><literal type="number" pos:line="8" pos:column="51">0<pos:position pos:line="8" pos:column="52"/></literal></expr></else></ternary><operator pos:line="8" pos:column="52">)<pos:position pos:line="8" pos:column="53"/></operator></expr></init></decl>;<pos:position pos:line="8" pos:column="54"/></decl_stmt>

<cpp:ifdef pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">ifdef<pos:position pos:line="10" pos:column="7"/></cpp:directive> <name pos:line="10" pos:column="8">ICONV_OPTION<pos:position pos:line="10" pos:column="20"/></name></cpp:ifdef>
	<expr_stmt><expr><name pos:line="11" pos:column="9">rl_flags<pos:position pos:line="11" pos:column="17"/></name> <operator pos:line="11" pos:column="18">|=<pos:position pos:line="11" pos:column="20"/></operator> <operator pos:line="11" pos:column="21">(<pos:position pos:line="11" pos:column="22"/></operator><ternary><condition><expr><name pos:line="11" pos:column="22">protect_args<pos:position pos:line="11" pos:column="34"/></name> <operator pos:line="11" pos:column="35">&amp;&amp;<pos:position pos:line="11" pos:column="45"/></operator> <name pos:line="11" pos:column="38">ic_recv<pos:position pos:line="11" pos:column="45"/></name> <operator pos:line="11" pos:column="46">!=<pos:position pos:line="11" pos:column="48"/></operator> <operator pos:line="11" pos:column="49">(<pos:position pos:line="11" pos:column="50"/></operator><name pos:line="11" pos:column="50">iconv_t<pos:position pos:line="11" pos:column="57"/></name><operator pos:line="11" pos:column="57">)<pos:position pos:line="11" pos:column="58"/></operator><operator pos:line="11" pos:column="58">-<pos:position pos:line="11" pos:column="59"/></operator><literal type="number" pos:line="11" pos:column="59">1<pos:position pos:line="11" pos:column="60"/></literal></expr> ?<pos:position pos:line="11" pos:column="62"/></condition><then pos:line="11" pos:column="62"> <expr><name pos:line="11" pos:column="63">RL_CONVERT<pos:position pos:line="11" pos:column="73"/></name></expr> <pos:position pos:line="11" pos:column="74"/></then><else pos:line="11" pos:column="74">: <expr><literal type="number" pos:line="11" pos:column="76">0<pos:position pos:line="11" pos:column="77"/></literal></expr></else></ternary><operator pos:line="11" pos:column="77">)<pos:position pos:line="11" pos:column="78"/></operator></expr>;<pos:position pos:line="11" pos:column="79"/></expr_stmt>
<cpp:endif pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">endif<pos:position pos:line="12" pos:column="7"/></cpp:directive></cpp:endif>

	<if pos:line="14" pos:column="9">if <condition pos:line="14" pos:column="12">(<expr><operator pos:line="14" pos:column="13">!<pos:position pos:line="14" pos:column="14"/></operator><operator pos:line="14" pos:column="14">(<pos:position pos:line="14" pos:column="15"/></operator><name pos:line="14" pos:column="15">argv<pos:position pos:line="14" pos:column="19"/></name> <operator pos:line="14" pos:column="20">=<pos:position pos:line="14" pos:column="21"/></operator> <call><name pos:line="14" pos:column="22">new_array<pos:position pos:line="14" pos:column="31"/></name><argument_list pos:line="14" pos:column="31">(<argument><expr><name pos:line="14" pos:column="32">char<pos:position pos:line="14" pos:column="36"/></name> <operator pos:line="14" pos:column="37">*<pos:position pos:line="14" pos:column="38"/></operator></expr></argument>, <argument><expr><name pos:line="14" pos:column="40">maxargs<pos:position pos:line="14" pos:column="47"/></name></expr></argument>)<pos:position pos:line="14" pos:column="48"/></argument_list></call><operator pos:line="14" pos:column="48">)<pos:position pos:line="14" pos:column="49"/></operator></expr>)<pos:position pos:line="14" pos:column="50"/></condition><then pos:line="14" pos:column="50">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="15" pos:column="17">out_of_memory<pos:position pos:line="15" pos:column="30"/></name><argument_list pos:line="15" pos:column="30">(<argument><expr><literal type="string" pos:line="15" pos:column="31">"read_args"<pos:position pos:line="15" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="44"/></expr_stmt></block></then></if>
	<if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><name pos:line="16" pos:column="13">mod_name<pos:position pos:line="16" pos:column="21"/></name></expr>)<pos:position pos:line="16" pos:column="22"/></condition><then pos:line="16" pos:column="22">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="17" pos:column="17">argv<pos:position pos:line="17" pos:column="21"/></name><index pos:line="17" pos:column="21">[<expr><name pos:line="17" pos:column="22">argc<pos:position pos:line="17" pos:column="26"/></name><operator pos:line="17" pos:column="26">++<pos:position pos:line="17" pos:column="28"/></operator></expr>]<pos:position pos:line="17" pos:column="29"/></index></name> <operator pos:line="17" pos:column="30">=<pos:position pos:line="17" pos:column="31"/></operator> <literal type="string" pos:line="17" pos:column="32">"rsyncd"<pos:position pos:line="17" pos:column="40"/></literal></expr>;<pos:position pos:line="17" pos:column="41"/></expr_stmt></block></then></if>

	<while pos:line="19" pos:column="9">while <condition pos:line="19" pos:column="15">(<expr><literal type="number" pos:line="19" pos:column="16">1<pos:position pos:line="19" pos:column="17"/></literal></expr>)<pos:position pos:line="19" pos:column="18"/></condition> <block pos:line="19" pos:column="19">{
		<if pos:line="20" pos:column="17">if <condition pos:line="20" pos:column="20">(<expr><call><name pos:line="20" pos:column="21">read_line<pos:position pos:line="20" pos:column="30"/></name><argument_list pos:line="20" pos:column="30">(<argument><expr><name pos:line="20" pos:column="31">f_in<pos:position pos:line="20" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="37">buf<pos:position pos:line="20" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="42">bufsiz<pos:position pos:line="20" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="50">rl_flags<pos:position pos:line="20" pos:column="58"/></name></expr></argument>)<pos:position pos:line="20" pos:column="59"/></argument_list></call> <operator pos:line="20" pos:column="60">==<pos:position pos:line="20" pos:column="62"/></operator> <literal type="number" pos:line="20" pos:column="63">0<pos:position pos:line="20" pos:column="64"/></literal></expr>)<pos:position pos:line="20" pos:column="65"/></condition><then pos:line="20" pos:column="65">
			<block type="pseudo"><break pos:line="21" pos:column="25">break;<pos:position pos:line="21" pos:column="31"/></break></block></then></if>

		<if pos:line="23" pos:column="17">if <condition pos:line="23" pos:column="20">(<expr><name pos:line="23" pos:column="21">argc<pos:position pos:line="23" pos:column="25"/></name> <operator pos:line="23" pos:column="26">==<pos:position pos:line="23" pos:column="28"/></operator> <name pos:line="23" pos:column="29">maxargs<pos:position pos:line="23" pos:column="36"/></name></expr>)<pos:position pos:line="23" pos:column="37"/></condition><then pos:line="23" pos:column="37"> <block pos:line="23" pos:column="38">{
			<expr_stmt><expr><name pos:line="24" pos:column="25">maxargs<pos:position pos:line="24" pos:column="32"/></name> <operator pos:line="24" pos:column="33">+=<pos:position pos:line="24" pos:column="35"/></operator> <name pos:line="24" pos:column="36">MAX_ARGS<pos:position pos:line="24" pos:column="44"/></name></expr>;<pos:position pos:line="24" pos:column="45"/></expr_stmt>
			<if pos:line="25" pos:column="25">if <condition pos:line="25" pos:column="28">(<expr><operator pos:line="25" pos:column="29">!<pos:position pos:line="25" pos:column="30"/></operator><operator pos:line="25" pos:column="30">(<pos:position pos:line="25" pos:column="31"/></operator><name pos:line="25" pos:column="31">argv<pos:position pos:line="25" pos:column="35"/></name> <operator pos:line="25" pos:column="36">=<pos:position pos:line="25" pos:column="37"/></operator> <call><name pos:line="25" pos:column="38">realloc_array<pos:position pos:line="25" pos:column="51"/></name><argument_list pos:line="25" pos:column="51">(<argument><expr><name pos:line="25" pos:column="52">argv<pos:position pos:line="25" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="58">char<pos:position pos:line="25" pos:column="62"/></name> <operator pos:line="25" pos:column="63">*<pos:position pos:line="25" pos:column="64"/></operator></expr></argument>, <argument><expr><name pos:line="25" pos:column="66">maxargs<pos:position pos:line="25" pos:column="73"/></name></expr></argument>)<pos:position pos:line="25" pos:column="74"/></argument_list></call><operator pos:line="25" pos:column="74">)<pos:position pos:line="25" pos:column="75"/></operator></expr>)<pos:position pos:line="25" pos:column="76"/></condition><then pos:line="25" pos:column="76">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="26" pos:column="33">out_of_memory<pos:position pos:line="26" pos:column="46"/></name><argument_list pos:line="26" pos:column="46">(<argument><expr><literal type="string" pos:line="26" pos:column="47">"read_args"<pos:position pos:line="26" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="60"/></expr_stmt></block></then></if>
		}<pos:position pos:line="27" pos:column="18"/></block></then></if>

		<if pos:line="29" pos:column="17">if <condition pos:line="29" pos:column="20">(<expr><name pos:line="29" pos:column="21">dot_pos<pos:position pos:line="29" pos:column="28"/></name></expr>)<pos:position pos:line="29" pos:column="29"/></condition><then pos:line="29" pos:column="29"> <block pos:line="29" pos:column="30">{
			<if pos:line="30" pos:column="25">if <condition pos:line="30" pos:column="28">(<expr><name pos:line="30" pos:column="29">request_p<pos:position pos:line="30" pos:column="38"/></name></expr>)<pos:position pos:line="30" pos:column="39"/></condition><then pos:line="30" pos:column="39"> <block pos:line="30" pos:column="40">{
				<expr_stmt><expr><operator pos:line="31" pos:column="33">*<pos:position pos:line="31" pos:column="34"/></operator><name pos:line="31" pos:column="34">request_p<pos:position pos:line="31" pos:column="43"/></name> <operator pos:line="31" pos:column="44">=<pos:position pos:line="31" pos:column="45"/></operator> <call><name pos:line="31" pos:column="46">strdup<pos:position pos:line="31" pos:column="52"/></name><argument_list pos:line="31" pos:column="52">(<argument><expr><name pos:line="31" pos:column="53">buf<pos:position pos:line="31" pos:column="56"/></name></expr></argument>)<pos:position pos:line="31" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="58"/></expr_stmt>
				<expr_stmt><expr><name pos:line="32" pos:column="33">request_p<pos:position pos:line="32" pos:column="42"/></name> <operator pos:line="32" pos:column="43">=<pos:position pos:line="32" pos:column="44"/></operator> <name pos:line="32" pos:column="45">NULL<pos:position pos:line="32" pos:column="49"/></name></expr>;<pos:position pos:line="32" pos:column="50"/></expr_stmt>
			}<pos:position pos:line="33" pos:column="26"/></block></then></if>
			<if pos:line="34" pos:column="25">if <condition pos:line="34" pos:column="28">(<expr><name pos:line="34" pos:column="29">mod_name<pos:position pos:line="34" pos:column="37"/></name></expr>)<pos:position pos:line="34" pos:column="38"/></condition><then pos:line="34" pos:column="38">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="35" pos:column="33">glob_expand_module<pos:position pos:line="35" pos:column="51"/></name><argument_list pos:line="35" pos:column="51">(<argument><expr><name pos:line="35" pos:column="52">mod_name<pos:position pos:line="35" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="62">buf<pos:position pos:line="35" pos:column="65"/></name></expr></argument>, <argument><expr><operator pos:line="35" pos:column="67">&amp;<pos:position pos:line="35" pos:column="72"/></operator><name pos:line="35" pos:column="68">argv<pos:position pos:line="35" pos:column="72"/></name></expr></argument>, <argument><expr><operator pos:line="35" pos:column="74">&amp;<pos:position pos:line="35" pos:column="79"/></operator><name pos:line="35" pos:column="75">argc<pos:position pos:line="35" pos:column="79"/></name></expr></argument>, <argument><expr><operator pos:line="35" pos:column="81">&amp;<pos:position pos:line="35" pos:column="86"/></operator><name pos:line="35" pos:column="82">maxargs<pos:position pos:line="35" pos:column="89"/></name></expr></argument>)<pos:position pos:line="35" pos:column="90"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="91"/></expr_stmt></block></then>
			<else pos:line="36" pos:column="25">else
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="37" pos:column="33">glob_expand<pos:position pos:line="37" pos:column="44"/></name><argument_list pos:line="37" pos:column="44">(<argument><expr><name pos:line="37" pos:column="45">buf<pos:position pos:line="37" pos:column="48"/></name></expr></argument>, <argument><expr><operator pos:line="37" pos:column="50">&amp;<pos:position pos:line="37" pos:column="55"/></operator><name pos:line="37" pos:column="51">argv<pos:position pos:line="37" pos:column="55"/></name></expr></argument>, <argument><expr><operator pos:line="37" pos:column="57">&amp;<pos:position pos:line="37" pos:column="62"/></operator><name pos:line="37" pos:column="58">argc<pos:position pos:line="37" pos:column="62"/></name></expr></argument>, <argument><expr><operator pos:line="37" pos:column="64">&amp;<pos:position pos:line="37" pos:column="69"/></operator><name pos:line="37" pos:column="65">maxargs<pos:position pos:line="37" pos:column="72"/></name></expr></argument>)<pos:position pos:line="37" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="74"/></expr_stmt></block></else></if>
		}<pos:position pos:line="38" pos:column="18"/></block></then> <else pos:line="38" pos:column="19">else <block pos:line="38" pos:column="24">{
			<if pos:line="39" pos:column="25">if <condition pos:line="39" pos:column="28">(<expr><operator pos:line="39" pos:column="29">!<pos:position pos:line="39" pos:column="30"/></operator><operator pos:line="39" pos:column="30">(<pos:position pos:line="39" pos:column="31"/></operator><name pos:line="39" pos:column="31">p<pos:position pos:line="39" pos:column="32"/></name> <operator pos:line="39" pos:column="33">=<pos:position pos:line="39" pos:column="34"/></operator> <call><name pos:line="39" pos:column="35">strdup<pos:position pos:line="39" pos:column="41"/></name><argument_list pos:line="39" pos:column="41">(<argument><expr><name pos:line="39" pos:column="42">buf<pos:position pos:line="39" pos:column="45"/></name></expr></argument>)<pos:position pos:line="39" pos:column="46"/></argument_list></call><operator pos:line="39" pos:column="46">)<pos:position pos:line="39" pos:column="47"/></operator></expr>)<pos:position pos:line="39" pos:column="48"/></condition><then pos:line="39" pos:column="48">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="40" pos:column="33">out_of_memory<pos:position pos:line="40" pos:column="46"/></name><argument_list pos:line="40" pos:column="46">(<argument><expr><literal type="string" pos:line="40" pos:column="47">"read_args"<pos:position pos:line="40" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="60"/></expr_stmt></block></then></if>
			<expr_stmt><expr><name><name pos:line="41" pos:column="25">argv<pos:position pos:line="41" pos:column="29"/></name><index pos:line="41" pos:column="29">[<expr><name pos:line="41" pos:column="30">argc<pos:position pos:line="41" pos:column="34"/></name><operator pos:line="41" pos:column="34">++<pos:position pos:line="41" pos:column="36"/></operator></expr>]<pos:position pos:line="41" pos:column="37"/></index></name> <operator pos:line="41" pos:column="38">=<pos:position pos:line="41" pos:column="39"/></operator> <name pos:line="41" pos:column="40">p<pos:position pos:line="41" pos:column="41"/></name></expr>;<pos:position pos:line="41" pos:column="42"/></expr_stmt>
			<if pos:line="42" pos:column="25">if <condition pos:line="42" pos:column="28">(<expr><operator pos:line="42" pos:column="29">*<pos:position pos:line="42" pos:column="30"/></operator><name pos:line="42" pos:column="30">p<pos:position pos:line="42" pos:column="31"/></name> <operator pos:line="42" pos:column="32">==<pos:position pos:line="42" pos:column="34"/></operator> <literal type="char" pos:line="42" pos:column="35">'.'<pos:position pos:line="42" pos:column="38"/></literal> <operator pos:line="42" pos:column="39">&amp;&amp;<pos:position pos:line="42" pos:column="49"/></operator> <name><name pos:line="42" pos:column="42">p<pos:position pos:line="42" pos:column="43"/></name><index pos:line="42" pos:column="43">[<expr><literal type="number" pos:line="42" pos:column="44">1<pos:position pos:line="42" pos:column="45"/></literal></expr>]<pos:position pos:line="42" pos:column="46"/></index></name> <operator pos:line="42" pos:column="47">==<pos:position pos:line="42" pos:column="49"/></operator> <literal type="char" pos:line="42" pos:column="50">'\0'<pos:position pos:line="42" pos:column="54"/></literal></expr>)<pos:position pos:line="42" pos:column="55"/></condition><then pos:line="42" pos:column="55">
				<block type="pseudo"><expr_stmt><expr><name pos:line="43" pos:column="33">dot_pos<pos:position pos:line="43" pos:column="40"/></name> <operator pos:line="43" pos:column="41">=<pos:position pos:line="43" pos:column="42"/></operator> <name pos:line="43" pos:column="43">argc<pos:position pos:line="43" pos:column="47"/></name></expr>;<pos:position pos:line="43" pos:column="48"/></expr_stmt></block></then></if>
		}<pos:position pos:line="44" pos:column="18"/></block></else></if>
	}<pos:position pos:line="45" pos:column="10"/></block></while>

	<expr_stmt><expr><operator pos:line="47" pos:column="9">*<pos:position pos:line="47" pos:column="10"/></operator><name pos:line="47" pos:column="10">argc_p<pos:position pos:line="47" pos:column="16"/></name> <operator pos:line="47" pos:column="17">=<pos:position pos:line="47" pos:column="18"/></operator> <name pos:line="47" pos:column="19">argc<pos:position pos:line="47" pos:column="23"/></name></expr>;<pos:position pos:line="47" pos:column="24"/></expr_stmt>
	<expr_stmt><expr><operator pos:line="48" pos:column="9">*<pos:position pos:line="48" pos:column="10"/></operator><name pos:line="48" pos:column="10">argv_p<pos:position pos:line="48" pos:column="16"/></name> <operator pos:line="48" pos:column="17">=<pos:position pos:line="48" pos:column="18"/></operator> <name pos:line="48" pos:column="19">argv<pos:position pos:line="48" pos:column="23"/></name></expr>;<pos:position pos:line="48" pos:column="24"/></expr_stmt>

	<return pos:line="50" pos:column="9">return <expr><ternary><condition><expr><name pos:line="50" pos:column="16">dot_pos<pos:position pos:line="50" pos:column="23"/></name></expr> ?<pos:position pos:line="50" pos:column="25"/></condition><then pos:line="50" pos:column="25"> <expr><name pos:line="50" pos:column="26">dot_pos<pos:position pos:line="50" pos:column="33"/></name></expr> <pos:position pos:line="50" pos:column="34"/></then><else pos:line="50" pos:column="34">: <expr><name pos:line="50" pos:column="36">argc<pos:position pos:line="50" pos:column="40"/></name></expr></else></ternary></expr>;<pos:position pos:line="50" pos:column="41"/></return>
}<pos:position pos:line="51" pos:column="2"/></block></function></unit>
