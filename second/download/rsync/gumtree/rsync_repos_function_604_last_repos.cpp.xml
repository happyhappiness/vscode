<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_604_last_repos.cpp" pos:tabs="8"><decl_stmt><decl><type><name pos:line="1" pos:column="1">local<pos:position pos:line="1" pos:column="6"/></name> <name pos:line="1" pos:column="7">void<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">pqdownheap<pos:position pos:line="1" pos:column="22"/></name><argument_list pos:line="1" pos:column="22">(<argument><expr><name pos:line="1" pos:column="23">s<pos:position pos:line="1" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="1" pos:column="26">tree<pos:position pos:line="1" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="1" pos:column="32">k<pos:position pos:line="1" pos:column="33"/></name></expr></argument>)<pos:position pos:line="1" pos:column="34"/></argument_list>
    <name pos:line="2" pos:column="5">deflate_state<pos:position pos:line="2" pos:column="18"/></name> <modifier pos:line="2" pos:column="19">*<pos:position pos:line="2" pos:column="20"/></modifier><name pos:line="2" pos:column="20">s<pos:position pos:line="2" pos:column="21"/></name></decl>;<pos:position pos:line="2" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">ct_data<pos:position pos:line="3" pos:column="12"/></name> <modifier pos:line="3" pos:column="13">*<pos:position pos:line="3" pos:column="14"/></modifier></type><name pos:line="3" pos:column="14">tree<pos:position pos:line="3" pos:column="18"/></name></decl>;<pos:position pos:line="3" pos:column="19"/></decl_stmt>  <comment type="block" pos:line="3" pos:column="21">/* the tree to restore */</comment>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">int<pos:position pos:line="4" pos:column="8"/></name></type> <name pos:line="4" pos:column="9">k<pos:position pos:line="4" pos:column="10"/></name></decl>;<pos:position pos:line="4" pos:column="11"/></decl_stmt>               <comment type="block" pos:line="4" pos:column="26">/* node to move down */</comment>
<block pos:line="5" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">int<pos:position pos:line="6" pos:column="8"/></name></type> <name pos:line="6" pos:column="9">v<pos:position pos:line="6" pos:column="10"/></name> <init pos:line="6" pos:column="11">= <expr><name><name pos:line="6" pos:column="13">s<pos:position pos:line="6" pos:column="14"/></name><operator pos:line="6" pos:column="14">-&gt;<pos:position pos:line="6" pos:column="19"/></operator><name pos:line="6" pos:column="16">heap<pos:position pos:line="6" pos:column="20"/></name><index pos:line="6" pos:column="20">[<expr><name pos:line="6" pos:column="21">k<pos:position pos:line="6" pos:column="22"/></name></expr>]<pos:position pos:line="6" pos:column="23"/></index></name></expr></init></decl>;<pos:position pos:line="6" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">int<pos:position pos:line="7" pos:column="8"/></name></type> <name pos:line="7" pos:column="9">j<pos:position pos:line="7" pos:column="10"/></name> <init pos:line="7" pos:column="11">= <expr><name pos:line="7" pos:column="13">k<pos:position pos:line="7" pos:column="14"/></name> <operator pos:line="7" pos:column="15">&lt;&lt;<pos:position pos:line="7" pos:column="23"/></operator> <literal type="number" pos:line="7" pos:column="18">1<pos:position pos:line="7" pos:column="19"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="20"/></decl_stmt>  <comment type="block" pos:line="7" pos:column="22">/* left son of k */</comment>
    <while pos:line="8" pos:column="5">while <condition pos:line="8" pos:column="11">(<expr><name pos:line="8" pos:column="12">j<pos:position pos:line="8" pos:column="13"/></name> <operator pos:line="8" pos:column="14">&lt;=<pos:position pos:line="8" pos:column="19"/></operator> <name><name pos:line="8" pos:column="17">s<pos:position pos:line="8" pos:column="18"/></name><operator pos:line="8" pos:column="18">-&gt;<pos:position pos:line="8" pos:column="23"/></operator><name pos:line="8" pos:column="20">heap_len<pos:position pos:line="8" pos:column="28"/></name></name></expr>)<pos:position pos:line="8" pos:column="29"/></condition> <block pos:line="8" pos:column="30">{
        <comment type="block" pos:line="9" pos:column="9">/* Set j to the smallest of the two sons: */</comment>
        <if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><name pos:line="10" pos:column="13">j<pos:position pos:line="10" pos:column="14"/></name> <operator pos:line="10" pos:column="15">&lt;<pos:position pos:line="10" pos:column="19"/></operator> <name><name pos:line="10" pos:column="17">s<pos:position pos:line="10" pos:column="18"/></name><operator pos:line="10" pos:column="18">-&gt;<pos:position pos:line="10" pos:column="23"/></operator><name pos:line="10" pos:column="20">heap_len<pos:position pos:line="10" pos:column="28"/></name></name> <operator pos:line="10" pos:column="29">&amp;&amp;<pos:position pos:line="10" pos:column="39"/></operator>
            <call><name pos:line="11" pos:column="13">smaller<pos:position pos:line="11" pos:column="20"/></name><argument_list pos:line="11" pos:column="20">(<argument><expr><name pos:line="11" pos:column="21">tree<pos:position pos:line="11" pos:column="25"/></name></expr></argument>, <argument><expr><name><name pos:line="11" pos:column="27">s<pos:position pos:line="11" pos:column="28"/></name><operator pos:line="11" pos:column="28">-&gt;<pos:position pos:line="11" pos:column="33"/></operator><name pos:line="11" pos:column="30">heap<pos:position pos:line="11" pos:column="34"/></name><index pos:line="11" pos:column="34">[<expr><name pos:line="11" pos:column="35">j<pos:position pos:line="11" pos:column="36"/></name><operator pos:line="11" pos:column="36">+<pos:position pos:line="11" pos:column="37"/></operator><literal type="number" pos:line="11" pos:column="37">1<pos:position pos:line="11" pos:column="38"/></literal></expr>]<pos:position pos:line="11" pos:column="39"/></index></name></expr></argument>, <argument><expr><name><name pos:line="11" pos:column="41">s<pos:position pos:line="11" pos:column="42"/></name><operator pos:line="11" pos:column="42">-&gt;<pos:position pos:line="11" pos:column="47"/></operator><name pos:line="11" pos:column="44">heap<pos:position pos:line="11" pos:column="48"/></name><index pos:line="11" pos:column="48">[<expr><name pos:line="11" pos:column="49">j<pos:position pos:line="11" pos:column="50"/></name></expr>]<pos:position pos:line="11" pos:column="51"/></index></name></expr></argument>, <argument><expr><name><name pos:line="11" pos:column="53">s<pos:position pos:line="11" pos:column="54"/></name><operator pos:line="11" pos:column="54">-&gt;<pos:position pos:line="11" pos:column="59"/></operator><name pos:line="11" pos:column="56">depth<pos:position pos:line="11" pos:column="61"/></name></name></expr></argument>)<pos:position pos:line="11" pos:column="62"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="63"/></condition><then pos:line="11" pos:column="63"> <block pos:line="11" pos:column="64">{
            <expr_stmt><expr><name pos:line="12" pos:column="13">j<pos:position pos:line="12" pos:column="14"/></name><operator pos:line="12" pos:column="14">++<pos:position pos:line="12" pos:column="16"/></operator></expr>;<pos:position pos:line="12" pos:column="17"/></expr_stmt>
        }<pos:position pos:line="13" pos:column="10"/></block></then></if>
        <comment type="block" pos:line="14" pos:column="9">/* Exit if v is smaller than both sons */</comment>
        <if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><call><name pos:line="15" pos:column="13">smaller<pos:position pos:line="15" pos:column="20"/></name><argument_list pos:line="15" pos:column="20">(<argument><expr><name pos:line="15" pos:column="21">tree<pos:position pos:line="15" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="27">v<pos:position pos:line="15" pos:column="28"/></name></expr></argument>, <argument><expr><name><name pos:line="15" pos:column="30">s<pos:position pos:line="15" pos:column="31"/></name><operator pos:line="15" pos:column="31">-&gt;<pos:position pos:line="15" pos:column="36"/></operator><name pos:line="15" pos:column="33">heap<pos:position pos:line="15" pos:column="37"/></name><index pos:line="15" pos:column="37">[<expr><name pos:line="15" pos:column="38">j<pos:position pos:line="15" pos:column="39"/></name></expr>]<pos:position pos:line="15" pos:column="40"/></index></name></expr></argument>, <argument><expr><name><name pos:line="15" pos:column="42">s<pos:position pos:line="15" pos:column="43"/></name><operator pos:line="15" pos:column="43">-&gt;<pos:position pos:line="15" pos:column="48"/></operator><name pos:line="15" pos:column="45">depth<pos:position pos:line="15" pos:column="50"/></name></name></expr></argument>)<pos:position pos:line="15" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="52"/></condition><then pos:line="15" pos:column="52"> <block type="pseudo"><break pos:line="15" pos:column="53">break;<pos:position pos:line="15" pos:column="59"/></break></block></then></if>

        <comment type="block" pos:line="17" pos:column="9">/* Exchange v with the smallest son */</comment>
        <expr_stmt><expr><name><name pos:line="18" pos:column="9">s<pos:position pos:line="18" pos:column="10"/></name><operator pos:line="18" pos:column="10">-&gt;<pos:position pos:line="18" pos:column="15"/></operator><name pos:line="18" pos:column="12">heap<pos:position pos:line="18" pos:column="16"/></name><index pos:line="18" pos:column="16">[<expr><name pos:line="18" pos:column="17">k<pos:position pos:line="18" pos:column="18"/></name></expr>]<pos:position pos:line="18" pos:column="19"/></index></name> <operator pos:line="18" pos:column="20">=<pos:position pos:line="18" pos:column="21"/></operator> <name><name pos:line="18" pos:column="22">s<pos:position pos:line="18" pos:column="23"/></name><operator pos:line="18" pos:column="23">-&gt;<pos:position pos:line="18" pos:column="28"/></operator><name pos:line="18" pos:column="25">heap<pos:position pos:line="18" pos:column="29"/></name><index pos:line="18" pos:column="29">[<expr><name pos:line="18" pos:column="30">j<pos:position pos:line="18" pos:column="31"/></name></expr>]<pos:position pos:line="18" pos:column="32"/></index></name></expr>;<pos:position pos:line="18" pos:column="33"/></expr_stmt>  <expr_stmt><expr><name pos:line="18" pos:column="35">k<pos:position pos:line="18" pos:column="36"/></name> <operator pos:line="18" pos:column="37">=<pos:position pos:line="18" pos:column="38"/></operator> <name pos:line="18" pos:column="39">j<pos:position pos:line="18" pos:column="40"/></name></expr>;<pos:position pos:line="18" pos:column="41"/></expr_stmt>

        <comment type="block" pos:line="20" pos:column="9">/* And continue down the tree, setting j to the left son of k */</comment>
        <expr_stmt><expr><name pos:line="21" pos:column="9">j<pos:position pos:line="21" pos:column="10"/></name> <operator pos:line="21" pos:column="11">&lt;&lt;=<pos:position pos:line="21" pos:column="20"/></operator> <literal type="number" pos:line="21" pos:column="15">1<pos:position pos:line="21" pos:column="16"/></literal></expr>;<pos:position pos:line="21" pos:column="17"/></expr_stmt>
    }<pos:position pos:line="22" pos:column="6"/></block></while>
    <expr_stmt><expr><name><name pos:line="23" pos:column="5">s<pos:position pos:line="23" pos:column="6"/></name><operator pos:line="23" pos:column="6">-&gt;<pos:position pos:line="23" pos:column="11"/></operator><name pos:line="23" pos:column="8">heap<pos:position pos:line="23" pos:column="12"/></name><index pos:line="23" pos:column="12">[<expr><name pos:line="23" pos:column="13">k<pos:position pos:line="23" pos:column="14"/></name></expr>]<pos:position pos:line="23" pos:column="15"/></index></name> <operator pos:line="23" pos:column="16">=<pos:position pos:line="23" pos:column="17"/></operator> <name pos:line="23" pos:column="18">v<pos:position pos:line="23" pos:column="19"/></name></expr>;<pos:position pos:line="23" pos:column="20"/></expr_stmt>
}<pos:position pos:line="24" pos:column="2"/></block></unit>
