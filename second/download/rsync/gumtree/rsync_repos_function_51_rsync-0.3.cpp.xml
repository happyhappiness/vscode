<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_51_rsync-0.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">report<pos:position pos:line="1" pos:column="19"/></name><parameter_list pos:line="1" pos:column="19">(<parameter><decl><type><name pos:line="1" pos:column="20">int<pos:position pos:line="1" pos:column="23"/></name></type> <name pos:line="1" pos:column="24">f<pos:position pos:line="1" pos:column="25"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="26"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">int<pos:position pos:line="3" pos:column="6"/></name></type> <name pos:line="3" pos:column="7">in<pos:position pos:line="3" pos:column="9"/></name></decl>,<decl><type ref="prev"/><name pos:line="3" pos:column="10">out<pos:position pos:line="3" pos:column="13"/></name></decl>,<decl><type ref="prev"/><name pos:line="3" pos:column="14">tsize<pos:position pos:line="3" pos:column="19"/></name></decl>;<pos:position pos:line="3" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">time_t<pos:position pos:line="4" pos:column="9"/></name></type> <name pos:line="4" pos:column="10">t<pos:position pos:line="4" pos:column="11"/></name> <init pos:line="4" pos:column="12">= <expr><call><name pos:line="4" pos:column="14">time<pos:position pos:line="4" pos:column="18"/></name><argument_list pos:line="4" pos:column="18">(<argument><expr><name pos:line="4" pos:column="19">NULL<pos:position pos:line="4" pos:column="23"/></name></expr></argument>)<pos:position pos:line="4" pos:column="24"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="25"/></decl_stmt>
  
  <if pos:line="6" pos:column="3">if <condition pos:line="6" pos:column="6">(<expr><operator pos:line="6" pos:column="7">!<pos:position pos:line="6" pos:column="8"/></operator><name pos:line="6" pos:column="8">verbose<pos:position pos:line="6" pos:column="15"/></name></expr>)<pos:position pos:line="6" pos:column="16"/></condition><then pos:line="6" pos:column="16"> <block type="pseudo"><return pos:line="6" pos:column="17">return;<pos:position pos:line="6" pos:column="24"/></return></block></then></if>

  <if pos:line="8" pos:column="3">if <condition pos:line="8" pos:column="6">(<expr><name pos:line="8" pos:column="7">am_server<pos:position pos:line="8" pos:column="16"/></name> <operator pos:line="8" pos:column="17">&amp;&amp;<pos:position pos:line="8" pos:column="27"/></operator> <name pos:line="8" pos:column="20">sender<pos:position pos:line="8" pos:column="26"/></name></expr>)<pos:position pos:line="8" pos:column="27"/></condition><then pos:line="8" pos:column="27"> <block pos:line="8" pos:column="28">{
    <expr_stmt><expr><call><name pos:line="9" pos:column="5">write_int<pos:position pos:line="9" pos:column="14"/></name><argument_list pos:line="9" pos:column="14">(<argument><expr><name pos:line="9" pos:column="15">f<pos:position pos:line="9" pos:column="16"/></name></expr></argument>,<argument><expr><call><name pos:line="9" pos:column="17">read_total<pos:position pos:line="9" pos:column="27"/></name><argument_list pos:line="9" pos:column="27">()<pos:position pos:line="9" pos:column="29"/></argument_list></call></expr></argument>)<pos:position pos:line="9" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="10" pos:column="5">write_int<pos:position pos:line="10" pos:column="14"/></name><argument_list pos:line="10" pos:column="14">(<argument><expr><name pos:line="10" pos:column="15">f<pos:position pos:line="10" pos:column="16"/></name></expr></argument>,<argument><expr><call><name pos:line="10" pos:column="17">write_total<pos:position pos:line="10" pos:column="28"/></name><argument_list pos:line="10" pos:column="28">()<pos:position pos:line="10" pos:column="30"/></argument_list></call></expr></argument>)<pos:position pos:line="10" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="11" pos:column="5">write_int<pos:position pos:line="11" pos:column="14"/></name><argument_list pos:line="11" pos:column="14">(<argument><expr><name pos:line="11" pos:column="15">f<pos:position pos:line="11" pos:column="16"/></name></expr></argument>,<argument><expr><name pos:line="11" pos:column="17">total_size<pos:position pos:line="11" pos:column="27"/></name></expr></argument>)<pos:position pos:line="11" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="12" pos:column="5">write_flush<pos:position pos:line="12" pos:column="16"/></name><argument_list pos:line="12" pos:column="16">(<argument><expr><name pos:line="12" pos:column="17">f<pos:position pos:line="12" pos:column="18"/></name></expr></argument>)<pos:position pos:line="12" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="20"/></expr_stmt>
    <return pos:line="13" pos:column="5">return;<pos:position pos:line="13" pos:column="12"/></return>
  }<pos:position pos:line="14" pos:column="4"/></block></then></if>
    
  <if pos:line="16" pos:column="3">if <condition pos:line="16" pos:column="6">(<expr><name pos:line="16" pos:column="7">sender<pos:position pos:line="16" pos:column="13"/></name></expr>)<pos:position pos:line="16" pos:column="14"/></condition><then pos:line="16" pos:column="14"> <block pos:line="16" pos:column="15">{
    <expr_stmt><expr><name pos:line="17" pos:column="5">in<pos:position pos:line="17" pos:column="7"/></name> <operator pos:line="17" pos:column="8">=<pos:position pos:line="17" pos:column="9"/></operator> <call><name pos:line="17" pos:column="10">read_total<pos:position pos:line="17" pos:column="20"/></name><argument_list pos:line="17" pos:column="20">()<pos:position pos:line="17" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><name pos:line="18" pos:column="5">out<pos:position pos:line="18" pos:column="8"/></name> <operator pos:line="18" pos:column="9">=<pos:position pos:line="18" pos:column="10"/></operator> <call><name pos:line="18" pos:column="11">write_total<pos:position pos:line="18" pos:column="22"/></name><argument_list pos:line="18" pos:column="22">()<pos:position pos:line="18" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><name pos:line="19" pos:column="5">tsize<pos:position pos:line="19" pos:column="10"/></name> <operator pos:line="19" pos:column="11">=<pos:position pos:line="19" pos:column="12"/></operator> <operator pos:line="19" pos:column="13">(<pos:position pos:line="19" pos:column="14"/></operator><name pos:line="19" pos:column="14">int<pos:position pos:line="19" pos:column="17"/></name><operator pos:line="19" pos:column="17">)<pos:position pos:line="19" pos:column="18"/></operator><name pos:line="19" pos:column="18">total_size<pos:position pos:line="19" pos:column="28"/></name></expr>;<pos:position pos:line="19" pos:column="29"/></expr_stmt>
  }<pos:position pos:line="20" pos:column="4"/></block></then> <else pos:line="20" pos:column="5">else <block pos:line="20" pos:column="10">{
    <expr_stmt><expr><name pos:line="21" pos:column="5">in<pos:position pos:line="21" pos:column="7"/></name> <operator pos:line="21" pos:column="8">=<pos:position pos:line="21" pos:column="9"/></operator> <call><name pos:line="21" pos:column="10">read_int<pos:position pos:line="21" pos:column="18"/></name><argument_list pos:line="21" pos:column="18">(<argument><expr><name pos:line="21" pos:column="19">f<pos:position pos:line="21" pos:column="20"/></name></expr></argument>)<pos:position pos:line="21" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="22"/></expr_stmt>
    <expr_stmt><expr><name pos:line="22" pos:column="5">out<pos:position pos:line="22" pos:column="8"/></name> <operator pos:line="22" pos:column="9">=<pos:position pos:line="22" pos:column="10"/></operator> <call><name pos:line="22" pos:column="11">read_int<pos:position pos:line="22" pos:column="19"/></name><argument_list pos:line="22" pos:column="19">(<argument><expr><name pos:line="22" pos:column="20">f<pos:position pos:line="22" pos:column="21"/></name></expr></argument>)<pos:position pos:line="22" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><name pos:line="23" pos:column="5">tsize<pos:position pos:line="23" pos:column="10"/></name> <operator pos:line="23" pos:column="11">=<pos:position pos:line="23" pos:column="12"/></operator> <call><name pos:line="23" pos:column="13">read_int<pos:position pos:line="23" pos:column="21"/></name><argument_list pos:line="23" pos:column="21">(<argument><expr><name pos:line="23" pos:column="22">f<pos:position pos:line="23" pos:column="23"/></name></expr></argument>)<pos:position pos:line="23" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="25"/></expr_stmt>
  }<pos:position pos:line="24" pos:column="4"/></block></else></if>

  <expr_stmt><expr><call><name pos:line="26" pos:column="3">printf<pos:position pos:line="26" pos:column="9"/></name><argument_list pos:line="26" pos:column="9">(<argument><expr><literal type="string" pos:line="26" pos:column="10">"wrote %d bytes  read %d bytes  %g bytes/sec\n"<pos:position pos:line="26" pos:column="57"/></literal></expr></argument>,
	 <argument><expr><name pos:line="27" pos:column="10">out<pos:position pos:line="27" pos:column="13"/></name></expr></argument>,<argument><expr><name pos:line="27" pos:column="14">in<pos:position pos:line="27" pos:column="16"/></name></expr></argument>,<argument><expr><operator pos:line="27" pos:column="17">(<pos:position pos:line="27" pos:column="18"/></operator><name pos:line="27" pos:column="18">in<pos:position pos:line="27" pos:column="20"/></name><operator pos:line="27" pos:column="20">+<pos:position pos:line="27" pos:column="21"/></operator><name pos:line="27" pos:column="21">out<pos:position pos:line="27" pos:column="24"/></name><operator pos:line="27" pos:column="24">)<pos:position pos:line="27" pos:column="25"/></operator><operator pos:line="27" pos:column="25">/<pos:position pos:line="27" pos:column="26"/></operator><operator pos:line="27" pos:column="26">(<pos:position pos:line="27" pos:column="27"/></operator><literal type="number" pos:line="27" pos:column="27">0.5<pos:position pos:line="27" pos:column="30"/></literal> <operator pos:line="27" pos:column="31">+<pos:position pos:line="27" pos:column="32"/></operator> <operator pos:line="27" pos:column="33">(<pos:position pos:line="27" pos:column="34"/></operator><name pos:line="27" pos:column="34">t<pos:position pos:line="27" pos:column="35"/></name><operator pos:line="27" pos:column="35">-<pos:position pos:line="27" pos:column="36"/></operator><name pos:line="27" pos:column="36">starttime<pos:position pos:line="27" pos:column="45"/></name><operator pos:line="27" pos:column="45">)<pos:position pos:line="27" pos:column="46"/></operator><operator pos:line="27" pos:column="46">)<pos:position pos:line="27" pos:column="47"/></operator></expr></argument>)<pos:position pos:line="27" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="49"/></expr_stmt>        
  <expr_stmt><expr><call><name pos:line="28" pos:column="3">printf<pos:position pos:line="28" pos:column="9"/></name><argument_list pos:line="28" pos:column="9">(<argument><expr><literal type="string" pos:line="28" pos:column="10">"total size is %d  speedup is %g\n"<pos:position pos:line="28" pos:column="45"/></literal></expr></argument>,
	 <argument><expr><name pos:line="29" pos:column="10">tsize<pos:position pos:line="29" pos:column="15"/></name></expr></argument>,<argument><expr><operator pos:line="29" pos:column="16">(<pos:position pos:line="29" pos:column="17"/></operator><literal type="number" pos:line="29" pos:column="17">1.0<pos:position pos:line="29" pos:column="20"/></literal><operator pos:line="29" pos:column="20">*<pos:position pos:line="29" pos:column="21"/></operator><name pos:line="29" pos:column="21">tsize<pos:position pos:line="29" pos:column="26"/></name><operator pos:line="29" pos:column="26">)<pos:position pos:line="29" pos:column="27"/></operator><operator pos:line="29" pos:column="27">/<pos:position pos:line="29" pos:column="28"/></operator><operator pos:line="29" pos:column="28">(<pos:position pos:line="29" pos:column="29"/></operator><name pos:line="29" pos:column="29">in<pos:position pos:line="29" pos:column="31"/></name><operator pos:line="29" pos:column="31">+<pos:position pos:line="29" pos:column="32"/></operator><name pos:line="29" pos:column="32">out<pos:position pos:line="29" pos:column="35"/></name><operator pos:line="29" pos:column="35">)<pos:position pos:line="29" pos:column="36"/></operator></expr></argument>)<pos:position pos:line="29" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="38"/></expr_stmt>
}<pos:position pos:line="30" pos:column="2"/></block></function></unit>
