<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_704_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name pos:line="2" pos:column="1">run_program<pos:position pos:line="2" pos:column="12"/></name><parameter_list pos:line="2" pos:column="12">(<parameter><decl><type><name pos:line="2" pos:column="13">char<pos:position pos:line="2" pos:column="17"/></name> <modifier pos:line="2" pos:column="18">*<pos:position pos:line="2" pos:column="19"/></modifier><modifier pos:line="2" pos:column="19">*<pos:position pos:line="2" pos:column="20"/></modifier></type><name pos:line="2" pos:column="20">command<pos:position pos:line="2" pos:column="27"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="28"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">int<pos:position pos:line="4" pos:column="8"/></name></type> <name><name pos:line="4" pos:column="9">pipe_fds<pos:position pos:line="4" pos:column="17"/></name><index pos:line="4" pos:column="17">[<expr><literal type="number" pos:line="4" pos:column="18">2<pos:position pos:line="4" pos:column="19"/></literal></expr>]<pos:position pos:line="4" pos:column="20"/></index></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="22">ret<pos:position pos:line="4" pos:column="25"/></name></decl>;<pos:position pos:line="4" pos:column="26"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">pid_t<pos:position pos:line="5" pos:column="10"/></name></type> <name pos:line="5" pos:column="11">pid<pos:position pos:line="5" pos:column="14"/></name></decl>;<pos:position pos:line="5" pos:column="15"/></decl_stmt>

    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><call><name pos:line="7" pos:column="9">pipe<pos:position pos:line="7" pos:column="13"/></name><argument_list pos:line="7" pos:column="13">(<argument><expr><name pos:line="7" pos:column="14">pipe_fds<pos:position pos:line="7" pos:column="22"/></name></expr></argument>)<pos:position pos:line="7" pos:column="23"/></argument_list></call> <operator pos:line="7" pos:column="24">&lt;<pos:position pos:line="7" pos:column="28"/></operator> <literal type="number" pos:line="7" pos:column="26">0<pos:position pos:line="7" pos:column="27"/></literal></expr>)<pos:position pos:line="7" pos:column="28"/></condition><then pos:line="7" pos:column="28"> <block pos:line="7" pos:column="29">{
	<expr_stmt><expr><call><name pos:line="8" pos:column="9">fprintf<pos:position pos:line="8" pos:column="16"/></name><argument_list pos:line="8" pos:column="16">(<argument><expr><name pos:line="8" pos:column="17">stderr<pos:position pos:line="8" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="8" pos:column="25">"pipe failed: %s\n"<pos:position pos:line="8" pos:column="44"/></literal></expr></argument>, <argument><expr><call><name pos:line="8" pos:column="46">strerror<pos:position pos:line="8" pos:column="54"/></name><argument_list pos:line="8" pos:column="54">(<argument><expr><name pos:line="8" pos:column="55">errno<pos:position pos:line="8" pos:column="60"/></name></expr></argument>)<pos:position pos:line="8" pos:column="61"/></argument_list></call></expr></argument>)<pos:position pos:line="8" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="63"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="9" pos:column="9">exit<pos:position pos:line="9" pos:column="13"/></name><argument_list pos:line="9" pos:column="13">(<argument><expr><literal type="number" pos:line="9" pos:column="14">1<pos:position pos:line="9" pos:column="15"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="17"/></expr_stmt>
    }<pos:position pos:line="10" pos:column="6"/></block></then></if>

    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><operator pos:line="12" pos:column="9">(<pos:position pos:line="12" pos:column="10"/></operator><name pos:line="12" pos:column="10">pid<pos:position pos:line="12" pos:column="13"/></name> <operator pos:line="12" pos:column="14">=<pos:position pos:line="12" pos:column="15"/></operator> <call><name pos:line="12" pos:column="16">fork<pos:position pos:line="12" pos:column="20"/></name><argument_list pos:line="12" pos:column="20">()<pos:position pos:line="12" pos:column="22"/></argument_list></call><operator pos:line="12" pos:column="22">)<pos:position pos:line="12" pos:column="23"/></operator> <operator pos:line="12" pos:column="24">&lt;<pos:position pos:line="12" pos:column="28"/></operator> <literal type="number" pos:line="12" pos:column="26">0<pos:position pos:line="12" pos:column="27"/></literal></expr>)<pos:position pos:line="12" pos:column="28"/></condition><then pos:line="12" pos:column="28"> <block pos:line="12" pos:column="29">{
	<expr_stmt><expr><call><name pos:line="13" pos:column="9">fprintf<pos:position pos:line="13" pos:column="16"/></name><argument_list pos:line="13" pos:column="16">(<argument><expr><name pos:line="13" pos:column="17">stderr<pos:position pos:line="13" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="25">"fork failed: %s\n"<pos:position pos:line="13" pos:column="44"/></literal></expr></argument>, <argument><expr><call><name pos:line="13" pos:column="46">strerror<pos:position pos:line="13" pos:column="54"/></name><argument_list pos:line="13" pos:column="54">(<argument><expr><name pos:line="13" pos:column="55">errno<pos:position pos:line="13" pos:column="60"/></name></expr></argument>)<pos:position pos:line="13" pos:column="61"/></argument_list></call></expr></argument>)<pos:position pos:line="13" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="63"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="14" pos:column="9">exit<pos:position pos:line="14" pos:column="13"/></name><argument_list pos:line="14" pos:column="13">(<argument><expr><literal type="number" pos:line="14" pos:column="14">1<pos:position pos:line="14" pos:column="15"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="17"/></expr_stmt>
    }<pos:position pos:line="15" pos:column="6"/></block></then></if>

    <if pos:line="17" pos:column="5">if <condition pos:line="17" pos:column="8">(<expr><name pos:line="17" pos:column="9">pid<pos:position pos:line="17" pos:column="12"/></name> <operator pos:line="17" pos:column="13">==<pos:position pos:line="17" pos:column="15"/></operator> <literal type="number" pos:line="17" pos:column="16">0<pos:position pos:line="17" pos:column="17"/></literal></expr>)<pos:position pos:line="17" pos:column="18"/></condition><then pos:line="17" pos:column="18"> <block pos:line="17" pos:column="19">{
	<if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><name pos:line="18" pos:column="13">save_data_from_program<pos:position pos:line="18" pos:column="35"/></name></expr>)<pos:position pos:line="18" pos:column="36"/></condition><then pos:line="18" pos:column="36">
	    <block type="pseudo"><expr_stmt><expr><name pos:line="19" pos:column="13">ret<pos:position pos:line="19" pos:column="16"/></name> <operator pos:line="19" pos:column="17">=<pos:position pos:line="19" pos:column="18"/></operator> <call><name pos:line="19" pos:column="19">dup2<pos:position pos:line="19" pos:column="23"/></name><argument_list pos:line="19" pos:column="23">(<argument><expr><name><name pos:line="19" pos:column="24">pipe_fds<pos:position pos:line="19" pos:column="32"/></name><index pos:line="19" pos:column="32">[<expr><literal type="number" pos:line="19" pos:column="33">1<pos:position pos:line="19" pos:column="34"/></literal></expr>]<pos:position pos:line="19" pos:column="35"/></index></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="37">STDOUT_FILENO<pos:position pos:line="19" pos:column="50"/></name></expr></argument>)<pos:position pos:line="19" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="52"/></expr_stmt></block></then>
	<else pos:line="20" pos:column="9">else
	    <block type="pseudo"><expr_stmt><expr><name pos:line="21" pos:column="13">ret<pos:position pos:line="21" pos:column="16"/></name> <operator pos:line="21" pos:column="17">=<pos:position pos:line="21" pos:column="18"/></operator> <call><name pos:line="21" pos:column="19">dup2<pos:position pos:line="21" pos:column="23"/></name><argument_list pos:line="21" pos:column="23">(<argument><expr><name><name pos:line="21" pos:column="24">pipe_fds<pos:position pos:line="21" pos:column="32"/></name><index pos:line="21" pos:column="32">[<expr><literal type="number" pos:line="21" pos:column="33">0<pos:position pos:line="21" pos:column="34"/></literal></expr>]<pos:position pos:line="21" pos:column="35"/></index></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="37">STDIN_FILENO<pos:position pos:line="21" pos:column="49"/></name></expr></argument>)<pos:position pos:line="21" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="51"/></expr_stmt></block></else></if>
	<if pos:line="22" pos:column="9">if <condition pos:line="22" pos:column="12">(<expr><name pos:line="22" pos:column="13">ret<pos:position pos:line="22" pos:column="16"/></name> <operator pos:line="22" pos:column="17">&lt;<pos:position pos:line="22" pos:column="21"/></operator> <literal type="number" pos:line="22" pos:column="19">0<pos:position pos:line="22" pos:column="20"/></literal></expr>)<pos:position pos:line="22" pos:column="21"/></condition><then pos:line="22" pos:column="21"> <block pos:line="22" pos:column="22">{
	    <expr_stmt><expr><call><name pos:line="23" pos:column="13">fprintf<pos:position pos:line="23" pos:column="20"/></name><argument_list pos:line="23" pos:column="20">(<argument><expr><name pos:line="23" pos:column="21">stderr<pos:position pos:line="23" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="23" pos:column="29">"Failed to dup (in child): %s\n"<pos:position pos:line="23" pos:column="61"/></literal></expr></argument>, <argument><expr><call><name pos:line="23" pos:column="63">strerror<pos:position pos:line="23" pos:column="71"/></name><argument_list pos:line="23" pos:column="71">(<argument><expr><name pos:line="23" pos:column="72">errno<pos:position pos:line="23" pos:column="77"/></name></expr></argument>)<pos:position pos:line="23" pos:column="78"/></argument_list></call></expr></argument>)<pos:position pos:line="23" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="80"/></expr_stmt>
	    <expr_stmt><expr><call><name pos:line="24" pos:column="13">exit<pos:position pos:line="24" pos:column="17"/></name><argument_list pos:line="24" pos:column="17">(<argument><expr><literal type="number" pos:line="24" pos:column="18">1<pos:position pos:line="24" pos:column="19"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="21"/></expr_stmt>
	}<pos:position pos:line="25" pos:column="10"/></block></then></if>
	<expr_stmt><expr><call><name pos:line="26" pos:column="9">close<pos:position pos:line="26" pos:column="14"/></name><argument_list pos:line="26" pos:column="14">(<argument><expr><name><name pos:line="26" pos:column="15">pipe_fds<pos:position pos:line="26" pos:column="23"/></name><index pos:line="26" pos:column="23">[<expr><literal type="number" pos:line="26" pos:column="24">0<pos:position pos:line="26" pos:column="25"/></literal></expr>]<pos:position pos:line="26" pos:column="26"/></index></name></expr></argument>)<pos:position pos:line="26" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="28"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="27" pos:column="9">close<pos:position pos:line="27" pos:column="14"/></name><argument_list pos:line="27" pos:column="14">(<argument><expr><name><name pos:line="27" pos:column="15">pipe_fds<pos:position pos:line="27" pos:column="23"/></name><index pos:line="27" pos:column="23">[<expr><literal type="number" pos:line="27" pos:column="24">1<pos:position pos:line="27" pos:column="25"/></literal></expr>]<pos:position pos:line="27" pos:column="26"/></index></name></expr></argument>)<pos:position pos:line="27" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="28"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="28" pos:column="9">set_blocking<pos:position pos:line="28" pos:column="21"/></name><argument_list pos:line="28" pos:column="21">(<argument><expr><name pos:line="28" pos:column="22">STDIN_FILENO<pos:position pos:line="28" pos:column="34"/></name></expr></argument>)<pos:position pos:line="28" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="36"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="29" pos:column="9">set_blocking<pos:position pos:line="29" pos:column="21"/></name><argument_list pos:line="29" pos:column="21">(<argument><expr><name pos:line="29" pos:column="22">STDOUT_FILENO<pos:position pos:line="29" pos:column="35"/></name></expr></argument>)<pos:position pos:line="29" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="37"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="30" pos:column="9">execvp<pos:position pos:line="30" pos:column="15"/></name><argument_list pos:line="30" pos:column="15">(<argument><expr><name><name pos:line="30" pos:column="16">command<pos:position pos:line="30" pos:column="23"/></name><index pos:line="30" pos:column="23">[<expr><literal type="number" pos:line="30" pos:column="24">0<pos:position pos:line="30" pos:column="25"/></literal></expr>]<pos:position pos:line="30" pos:column="26"/></index></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="28">command<pos:position pos:line="30" pos:column="35"/></name></expr></argument>)<pos:position pos:line="30" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="37"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="31" pos:column="9">fprintf<pos:position pos:line="31" pos:column="16"/></name><argument_list pos:line="31" pos:column="16">(<argument><expr><name pos:line="31" pos:column="17">stderr<pos:position pos:line="31" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="31" pos:column="25">"Failed to exec %s: %s\n"<pos:position pos:line="31" pos:column="50"/></literal></expr></argument>, <argument><expr><name><name pos:line="31" pos:column="52">command<pos:position pos:line="31" pos:column="59"/></name><index pos:line="31" pos:column="59">[<expr><literal type="number" pos:line="31" pos:column="60">0<pos:position pos:line="31" pos:column="61"/></literal></expr>]<pos:position pos:line="31" pos:column="62"/></index></name></expr></argument>, <argument><expr><call><name pos:line="31" pos:column="64">strerror<pos:position pos:line="31" pos:column="72"/></name><argument_list pos:line="31" pos:column="72">(<argument><expr><name pos:line="31" pos:column="73">errno<pos:position pos:line="31" pos:column="78"/></name></expr></argument>)<pos:position pos:line="31" pos:column="79"/></argument_list></call></expr></argument>)<pos:position pos:line="31" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="81"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="32" pos:column="9">exit<pos:position pos:line="32" pos:column="13"/></name><argument_list pos:line="32" pos:column="13">(<argument><expr><literal type="number" pos:line="32" pos:column="14">1<pos:position pos:line="32" pos:column="15"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="17"/></expr_stmt>
    }<pos:position pos:line="33" pos:column="6"/></block></then></if>

    <if pos:line="35" pos:column="5">if <condition pos:line="35" pos:column="8">(<expr><name pos:line="35" pos:column="9">save_data_from_program<pos:position pos:line="35" pos:column="31"/></name></expr>)<pos:position pos:line="35" pos:column="32"/></condition><then pos:line="35" pos:column="32">
	<block type="pseudo"><expr_stmt><expr><name pos:line="36" pos:column="9">ret<pos:position pos:line="36" pos:column="12"/></name> <operator pos:line="36" pos:column="13">=<pos:position pos:line="36" pos:column="14"/></operator> <call><name pos:line="36" pos:column="15">dup2<pos:position pos:line="36" pos:column="19"/></name><argument_list pos:line="36" pos:column="19">(<argument><expr><name><name pos:line="36" pos:column="20">pipe_fds<pos:position pos:line="36" pos:column="28"/></name><index pos:line="36" pos:column="28">[<expr><literal type="number" pos:line="36" pos:column="29">0<pos:position pos:line="36" pos:column="30"/></literal></expr>]<pos:position pos:line="36" pos:column="31"/></index></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="33">STDIN_FILENO<pos:position pos:line="36" pos:column="45"/></name></expr></argument>)<pos:position pos:line="36" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="47"/></expr_stmt></block></then>
    <else pos:line="37" pos:column="5">else
	<block type="pseudo"><expr_stmt><expr><name pos:line="38" pos:column="9">ret<pos:position pos:line="38" pos:column="12"/></name> <operator pos:line="38" pos:column="13">=<pos:position pos:line="38" pos:column="14"/></operator> <call><name pos:line="38" pos:column="15">dup2<pos:position pos:line="38" pos:column="19"/></name><argument_list pos:line="38" pos:column="19">(<argument><expr><name><name pos:line="38" pos:column="20">pipe_fds<pos:position pos:line="38" pos:column="28"/></name><index pos:line="38" pos:column="28">[<expr><literal type="number" pos:line="38" pos:column="29">1<pos:position pos:line="38" pos:column="30"/></literal></expr>]<pos:position pos:line="38" pos:column="31"/></index></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="33">STDOUT_FILENO<pos:position pos:line="38" pos:column="46"/></name></expr></argument>)<pos:position pos:line="38" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="48"/></expr_stmt></block></else></if>
    <if pos:line="39" pos:column="5">if <condition pos:line="39" pos:column="8">(<expr><name pos:line="39" pos:column="9">ret<pos:position pos:line="39" pos:column="12"/></name> <operator pos:line="39" pos:column="13">&lt;<pos:position pos:line="39" pos:column="17"/></operator> <literal type="number" pos:line="39" pos:column="15">0<pos:position pos:line="39" pos:column="16"/></literal></expr>)<pos:position pos:line="39" pos:column="17"/></condition><then pos:line="39" pos:column="17"> <block pos:line="39" pos:column="18">{
	<expr_stmt><expr><call><name pos:line="40" pos:column="9">fprintf<pos:position pos:line="40" pos:column="16"/></name><argument_list pos:line="40" pos:column="16">(<argument><expr><name pos:line="40" pos:column="17">stderr<pos:position pos:line="40" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="40" pos:column="25">"Failed to dup (in parent): %s\n"<pos:position pos:line="40" pos:column="58"/></literal></expr></argument>, <argument><expr><call><name pos:line="40" pos:column="60">strerror<pos:position pos:line="40" pos:column="68"/></name><argument_list pos:line="40" pos:column="68">(<argument><expr><name pos:line="40" pos:column="69">errno<pos:position pos:line="40" pos:column="74"/></name></expr></argument>)<pos:position pos:line="40" pos:column="75"/></argument_list></call></expr></argument>)<pos:position pos:line="40" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="77"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="41" pos:column="9">exit<pos:position pos:line="41" pos:column="13"/></name><argument_list pos:line="41" pos:column="13">(<argument><expr><literal type="number" pos:line="41" pos:column="14">1<pos:position pos:line="41" pos:column="15"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="17"/></expr_stmt>
    }<pos:position pos:line="42" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="43" pos:column="5">close<pos:position pos:line="43" pos:column="10"/></name><argument_list pos:line="43" pos:column="10">(<argument><expr><name><name pos:line="43" pos:column="11">pipe_fds<pos:position pos:line="43" pos:column="19"/></name><index pos:line="43" pos:column="19">[<expr><literal type="number" pos:line="43" pos:column="20">0<pos:position pos:line="43" pos:column="21"/></literal></expr>]<pos:position pos:line="43" pos:column="22"/></index></name></expr></argument>)<pos:position pos:line="43" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="44" pos:column="5">close<pos:position pos:line="44" pos:column="10"/></name><argument_list pos:line="44" pos:column="10">(<argument><expr><name><name pos:line="44" pos:column="11">pipe_fds<pos:position pos:line="44" pos:column="19"/></name><index pos:line="44" pos:column="19">[<expr><literal type="number" pos:line="44" pos:column="20">1<pos:position pos:line="44" pos:column="21"/></literal></expr>]<pos:position pos:line="44" pos:column="22"/></index></name></expr></argument>)<pos:position pos:line="44" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="24"/></expr_stmt>
}<pos:position pos:line="45" pos:column="2"/></block></function></unit>
