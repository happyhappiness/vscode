<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_417_rsync-3.0.9.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><specifier pos:line="1" pos:column="8">const<pos:position pos:line="1" pos:column="13"/></specifier> <name pos:line="1" pos:column="14">char<pos:position pos:line="1" pos:column="18"/></name> <modifier pos:line="1" pos:column="19">*<pos:position pos:line="1" pos:column="20"/></modifier></type><name pos:line="1" pos:column="20">getpassf<pos:position pos:line="1" pos:column="28"/></name><parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><specifier pos:line="1" pos:column="29">const<pos:position pos:line="1" pos:column="34"/></specifier> <name pos:line="1" pos:column="35">char<pos:position pos:line="1" pos:column="39"/></name> <modifier pos:line="1" pos:column="40">*<pos:position pos:line="1" pos:column="41"/></modifier></type><name pos:line="1" pos:column="41">filename<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="50"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">STRUCT_STAT<pos:position pos:line="3" pos:column="20"/></name></type> <name pos:line="3" pos:column="21">st<pos:position pos:line="3" pos:column="23"/></name></decl>;<pos:position pos:line="3" pos:column="24"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name></type> <name><name pos:line="4" pos:column="14">buffer<pos:position pos:line="4" pos:column="20"/></name><index pos:line="4" pos:column="20">[<expr><literal type="number" pos:line="4" pos:column="21">512<pos:position pos:line="4" pos:column="24"/></literal></expr>]<pos:position pos:line="4" pos:column="25"/></index></name></decl>, <modifier pos:line="4" pos:column="27">*<pos:position pos:line="4" pos:column="28"/></modifier><decl><type ref="prev"/><name pos:line="4" pos:column="28">p<pos:position pos:line="4" pos:column="29"/></name></decl>;<pos:position pos:line="4" pos:column="30"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">fd<pos:position pos:line="5" pos:column="15"/></name></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="17">n<pos:position pos:line="5" pos:column="18"/></name></decl>;<pos:position pos:line="5" pos:column="19"/></decl_stmt>

	<if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<expr><operator pos:line="7" pos:column="13">!<pos:position pos:line="7" pos:column="14"/></operator><name pos:line="7" pos:column="14">filename<pos:position pos:line="7" pos:column="22"/></name></expr>)<pos:position pos:line="7" pos:column="23"/></condition><then pos:line="7" pos:column="23">
		<block type="pseudo"><return pos:line="8" pos:column="17">return <expr><name pos:line="8" pos:column="24">NULL<pos:position pos:line="8" pos:column="28"/></name></expr>;<pos:position pos:line="8" pos:column="29"/></return></block></then></if>

	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><operator pos:line="10" pos:column="13">(<pos:position pos:line="10" pos:column="14"/></operator><name pos:line="10" pos:column="14">fd<pos:position pos:line="10" pos:column="16"/></name> <operator pos:line="10" pos:column="17">=<pos:position pos:line="10" pos:column="18"/></operator> <call><name pos:line="10" pos:column="19">open<pos:position pos:line="10" pos:column="23"/></name><argument_list pos:line="10" pos:column="23">(<argument><expr><name pos:line="10" pos:column="24">filename<pos:position pos:line="10" pos:column="32"/></name></expr></argument>,<argument><expr><name pos:line="10" pos:column="33">O_RDONLY<pos:position pos:line="10" pos:column="41"/></name></expr></argument>)<pos:position pos:line="10" pos:column="42"/></argument_list></call><operator pos:line="10" pos:column="42">)<pos:position pos:line="10" pos:column="43"/></operator> <operator pos:line="10" pos:column="44">&lt;<pos:position pos:line="10" pos:column="48"/></operator> <literal type="number" pos:line="10" pos:column="46">0<pos:position pos:line="10" pos:column="47"/></literal></expr>)<pos:position pos:line="10" pos:column="48"/></condition><then pos:line="10" pos:column="48"> <block pos:line="10" pos:column="49">{
		<expr_stmt><expr><call><name pos:line="11" pos:column="17">rsyserr<pos:position pos:line="11" pos:column="24"/></name><argument_list pos:line="11" pos:column="24">(<argument><expr><name pos:line="11" pos:column="25">FERROR<pos:position pos:line="11" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="33">errno<pos:position pos:line="11" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="40">"could not open password file %s"<pos:position pos:line="11" pos:column="73"/></literal></expr></argument>, <argument><expr><name pos:line="11" pos:column="75">filename<pos:position pos:line="11" pos:column="83"/></name></expr></argument>)<pos:position pos:line="11" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="85"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="12" pos:column="17">exit_cleanup<pos:position pos:line="12" pos:column="29"/></name><argument_list pos:line="12" pos:column="29">(<argument><expr><name pos:line="12" pos:column="30">RERR_SYNTAX<pos:position pos:line="12" pos:column="41"/></name></expr></argument>)<pos:position pos:line="12" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="43"/></expr_stmt>
	}<pos:position pos:line="13" pos:column="10"/></block></then></if>

	<if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><call><name pos:line="15" pos:column="13">do_stat<pos:position pos:line="15" pos:column="20"/></name><argument_list pos:line="15" pos:column="20">(<argument><expr><name pos:line="15" pos:column="21">filename<pos:position pos:line="15" pos:column="29"/></name></expr></argument>, <argument><expr><operator pos:line="15" pos:column="31">&amp;<pos:position pos:line="15" pos:column="36"/></operator><name pos:line="15" pos:column="32">st<pos:position pos:line="15" pos:column="34"/></name></expr></argument>)<pos:position pos:line="15" pos:column="35"/></argument_list></call> <operator pos:line="15" pos:column="36">==<pos:position pos:line="15" pos:column="38"/></operator> <operator pos:line="15" pos:column="39">-<pos:position pos:line="15" pos:column="40"/></operator><literal type="number" pos:line="15" pos:column="40">1<pos:position pos:line="15" pos:column="41"/></literal></expr>)<pos:position pos:line="15" pos:column="42"/></condition><then pos:line="15" pos:column="42"> <block pos:line="15" pos:column="43">{
		<expr_stmt><expr><call><name pos:line="16" pos:column="17">rsyserr<pos:position pos:line="16" pos:column="24"/></name><argument_list pos:line="16" pos:column="24">(<argument><expr><name pos:line="16" pos:column="25">FERROR<pos:position pos:line="16" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="33">errno<pos:position pos:line="16" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="40">"stat(%s)"<pos:position pos:line="16" pos:column="50"/></literal></expr></argument>, <argument><expr><name pos:line="16" pos:column="52">filename<pos:position pos:line="16" pos:column="60"/></name></expr></argument>)<pos:position pos:line="16" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="62"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="17" pos:column="17">exit_cleanup<pos:position pos:line="17" pos:column="29"/></name><argument_list pos:line="17" pos:column="29">(<argument><expr><name pos:line="17" pos:column="30">RERR_SYNTAX<pos:position pos:line="17" pos:column="41"/></name></expr></argument>)<pos:position pos:line="17" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="43"/></expr_stmt>
	}<pos:position pos:line="18" pos:column="10"/></block></then></if>
	<if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><operator pos:line="19" pos:column="13">(<pos:position pos:line="19" pos:column="14"/></operator><name><name pos:line="19" pos:column="14">st<pos:position pos:line="19" pos:column="16"/></name><operator pos:line="19" pos:column="16">.<pos:position pos:line="19" pos:column="17"/></operator><name pos:line="19" pos:column="17">st_mode<pos:position pos:line="19" pos:column="24"/></name></name> <operator pos:line="19" pos:column="25">&amp;<pos:position pos:line="19" pos:column="30"/></operator> <literal type="number" pos:line="19" pos:column="27">06<pos:position pos:line="19" pos:column="29"/></literal><operator pos:line="19" pos:column="29">)<pos:position pos:line="19" pos:column="30"/></operator> <operator pos:line="19" pos:column="31">!=<pos:position pos:line="19" pos:column="33"/></operator> <literal type="number" pos:line="19" pos:column="34">0<pos:position pos:line="19" pos:column="35"/></literal></expr>)<pos:position pos:line="19" pos:column="36"/></condition><then pos:line="19" pos:column="36"> <block pos:line="19" pos:column="37">{
		<expr_stmt><expr><call><name pos:line="20" pos:column="17">rprintf<pos:position pos:line="20" pos:column="24"/></name><argument_list pos:line="20" pos:column="24">(<argument><expr><name pos:line="20" pos:column="25">FERROR<pos:position pos:line="20" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="33">"ERROR: password file must not be other-accessible\n"<pos:position pos:line="20" pos:column="86"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="87"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="88"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="21" pos:column="17">exit_cleanup<pos:position pos:line="21" pos:column="29"/></name><argument_list pos:line="21" pos:column="29">(<argument><expr><name pos:line="21" pos:column="30">RERR_SYNTAX<pos:position pos:line="21" pos:column="41"/></name></expr></argument>)<pos:position pos:line="21" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="43"/></expr_stmt>
	}<pos:position pos:line="22" pos:column="10"/></block></then></if>
	<if pos:line="23" pos:column="9">if <condition pos:line="23" pos:column="12">(<expr><call><name pos:line="23" pos:column="13">MY_UID<pos:position pos:line="23" pos:column="19"/></name><argument_list pos:line="23" pos:column="19">()<pos:position pos:line="23" pos:column="21"/></argument_list></call> <operator pos:line="23" pos:column="22">==<pos:position pos:line="23" pos:column="24"/></operator> <literal type="number" pos:line="23" pos:column="25">0<pos:position pos:line="23" pos:column="26"/></literal> <operator pos:line="23" pos:column="27">&amp;&amp;<pos:position pos:line="23" pos:column="37"/></operator> <name><name pos:line="23" pos:column="30">st<pos:position pos:line="23" pos:column="32"/></name><operator pos:line="23" pos:column="32">.<pos:position pos:line="23" pos:column="33"/></operator><name pos:line="23" pos:column="33">st_uid<pos:position pos:line="23" pos:column="39"/></name></name> <operator pos:line="23" pos:column="40">!=<pos:position pos:line="23" pos:column="42"/></operator> <literal type="number" pos:line="23" pos:column="43">0<pos:position pos:line="23" pos:column="44"/></literal></expr>)<pos:position pos:line="23" pos:column="45"/></condition><then pos:line="23" pos:column="45"> <block pos:line="23" pos:column="46">{
		<expr_stmt><expr><call><name pos:line="24" pos:column="17">rprintf<pos:position pos:line="24" pos:column="24"/></name><argument_list pos:line="24" pos:column="24">(<argument><expr><name pos:line="24" pos:column="25">FERROR<pos:position pos:line="24" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="24" pos:column="33">"ERROR: password file must be owned by root when running as root\n"<pos:position pos:line="24" pos:column="100"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="101"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="102"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="25" pos:column="17">exit_cleanup<pos:position pos:line="25" pos:column="29"/></name><argument_list pos:line="25" pos:column="29">(<argument><expr><name pos:line="25" pos:column="30">RERR_SYNTAX<pos:position pos:line="25" pos:column="41"/></name></expr></argument>)<pos:position pos:line="25" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="43"/></expr_stmt>
	}<pos:position pos:line="26" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="28" pos:column="9">n<pos:position pos:line="28" pos:column="10"/></name> <operator pos:line="28" pos:column="11">=<pos:position pos:line="28" pos:column="12"/></operator> <call><name pos:line="28" pos:column="13">read<pos:position pos:line="28" pos:column="17"/></name><argument_list pos:line="28" pos:column="17">(<argument><expr><name pos:line="28" pos:column="18">fd<pos:position pos:line="28" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="22">buffer<pos:position pos:line="28" pos:column="28"/></name></expr></argument>, <argument><expr><sizeof pos:line="28" pos:column="30">sizeof <name pos:line="28" pos:column="37">buffer<pos:position pos:line="28" pos:column="43"/></name></sizeof> <operator pos:line="28" pos:column="44">-<pos:position pos:line="28" pos:column="45"/></operator> <literal type="number" pos:line="28" pos:column="46">1<pos:position pos:line="28" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="49"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="29" pos:column="9">close<pos:position pos:line="29" pos:column="14"/></name><argument_list pos:line="29" pos:column="14">(<argument><expr><name pos:line="29" pos:column="15">fd<pos:position pos:line="29" pos:column="17"/></name></expr></argument>)<pos:position pos:line="29" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="19"/></expr_stmt>
	<if pos:line="30" pos:column="9">if <condition pos:line="30" pos:column="12">(<expr><name pos:line="30" pos:column="13">n<pos:position pos:line="30" pos:column="14"/></name> <operator pos:line="30" pos:column="15">&gt;<pos:position pos:line="30" pos:column="19"/></operator> <literal type="number" pos:line="30" pos:column="17">0<pos:position pos:line="30" pos:column="18"/></literal></expr>)<pos:position pos:line="30" pos:column="19"/></condition><then pos:line="30" pos:column="19"> <block pos:line="30" pos:column="20">{
		<expr_stmt><expr><name><name pos:line="31" pos:column="17">buffer<pos:position pos:line="31" pos:column="23"/></name><index pos:line="31" pos:column="23">[<expr><name pos:line="31" pos:column="24">n<pos:position pos:line="31" pos:column="25"/></name></expr>]<pos:position pos:line="31" pos:column="26"/></index></name> <operator pos:line="31" pos:column="27">=<pos:position pos:line="31" pos:column="28"/></operator> <literal type="char" pos:line="31" pos:column="29">'\0'<pos:position pos:line="31" pos:column="33"/></literal></expr>;<pos:position pos:line="31" pos:column="34"/></expr_stmt>
		<if pos:line="32" pos:column="17">if <condition pos:line="32" pos:column="20">(<expr><operator pos:line="32" pos:column="21">(<pos:position pos:line="32" pos:column="22"/></operator><name pos:line="32" pos:column="22">p<pos:position pos:line="32" pos:column="23"/></name> <operator pos:line="32" pos:column="24">=<pos:position pos:line="32" pos:column="25"/></operator> <call><name pos:line="32" pos:column="26">strtok<pos:position pos:line="32" pos:column="32"/></name><argument_list pos:line="32" pos:column="32">(<argument><expr><name pos:line="32" pos:column="33">buffer<pos:position pos:line="32" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="32" pos:column="41">"\n\r"<pos:position pos:line="32" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="48"/></argument_list></call><operator pos:line="32" pos:column="48">)<pos:position pos:line="32" pos:column="49"/></operator> <operator pos:line="32" pos:column="50">!=<pos:position pos:line="32" pos:column="52"/></operator> <name pos:line="32" pos:column="53">NULL<pos:position pos:line="32" pos:column="57"/></name></expr>)<pos:position pos:line="32" pos:column="58"/></condition><then pos:line="32" pos:column="58">
			<block type="pseudo"><return pos:line="33" pos:column="25">return <expr><call><name pos:line="33" pos:column="32">strdup<pos:position pos:line="33" pos:column="38"/></name><argument_list pos:line="33" pos:column="38">(<argument><expr><name pos:line="33" pos:column="39">p<pos:position pos:line="33" pos:column="40"/></name></expr></argument>)<pos:position pos:line="33" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="42"/></return></block></then></if>
	}<pos:position pos:line="34" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="36" pos:column="9">rprintf<pos:position pos:line="36" pos:column="16"/></name><argument_list pos:line="36" pos:column="16">(<argument><expr><name pos:line="36" pos:column="17">FERROR<pos:position pos:line="36" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="36" pos:column="25">"ERROR: failed to read a password from %s\n"<pos:position pos:line="36" pos:column="69"/></literal></expr></argument>, <argument><expr><name pos:line="36" pos:column="71">filename<pos:position pos:line="36" pos:column="79"/></name></expr></argument>)<pos:position pos:line="36" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="81"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="37" pos:column="9">exit_cleanup<pos:position pos:line="37" pos:column="21"/></name><argument_list pos:line="37" pos:column="21">(<argument><expr><name pos:line="37" pos:column="22">RERR_SYNTAX<pos:position pos:line="37" pos:column="33"/></name></expr></argument>)<pos:position pos:line="37" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="35"/></expr_stmt>
}<pos:position pos:line="38" pos:column="2"/></block></function></unit>
