<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_function_860.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">rwrite<pos:position pos:line="1" pos:column="12"/></name><parameter_list pos:line="1" pos:column="12">(<parameter><decl><type><name><name pos:line="1" pos:column="13">enum<pos:position pos:line="1" pos:column="17"/></name> <name pos:line="1" pos:column="18">logcode<pos:position pos:line="1" pos:column="25"/></name></name></type> <name pos:line="1" pos:column="26">code<pos:position pos:line="1" pos:column="30"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="32">char<pos:position pos:line="1" pos:column="36"/></name> <modifier pos:line="1" pos:column="37">*<pos:position pos:line="1" pos:column="38"/></modifier></type><name pos:line="1" pos:column="38">buf<pos:position pos:line="1" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="43">int<pos:position pos:line="1" pos:column="46"/></name></type> <name pos:line="1" pos:column="47">len<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="51"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">trailing_CR_or_NL<pos:position pos:line="3" pos:column="30"/></name></decl>;<pos:position pos:line="3" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">FILE<pos:position pos:line="4" pos:column="13"/></name> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier></type><name pos:line="4" pos:column="15">f<pos:position pos:line="4" pos:column="16"/></name> <init pos:line="4" pos:column="17">= <expr><name pos:line="4" pos:column="19">NULL<pos:position pos:line="4" pos:column="23"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="24"/></decl_stmt>

	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><name pos:line="6" pos:column="13">len<pos:position pos:line="6" pos:column="16"/></name> <operator pos:line="6" pos:column="17">&lt;<pos:position pos:line="6" pos:column="21"/></operator> <literal type="number" pos:line="6" pos:column="19">0<pos:position pos:line="6" pos:column="20"/></literal></expr>)<pos:position pos:line="6" pos:column="21"/></condition><then pos:line="6" pos:column="21">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="7" pos:column="17">exit_cleanup<pos:position pos:line="7" pos:column="29"/></name><argument_list pos:line="7" pos:column="29">(<argument><expr><name pos:line="7" pos:column="30">RERR_MESSAGEIO<pos:position pos:line="7" pos:column="44"/></name></expr></argument>)<pos:position pos:line="7" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="46"/></expr_stmt></block></then></if>

	<if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><name pos:line="9" pos:column="13">am_server<pos:position pos:line="9" pos:column="22"/></name> <operator pos:line="9" pos:column="23">&amp;&amp;<pos:position pos:line="9" pos:column="33"/></operator> <name pos:line="9" pos:column="26">msg_fd_out<pos:position pos:line="9" pos:column="36"/></name> <operator pos:line="9" pos:column="37">&gt;=<pos:position pos:line="9" pos:column="42"/></operator> <literal type="number" pos:line="9" pos:column="40">0<pos:position pos:line="9" pos:column="41"/></literal></expr>)<pos:position pos:line="9" pos:column="42"/></condition><then pos:line="9" pos:column="42"> <block pos:line="9" pos:column="43">{
		<comment type="block" pos:line="10" pos:column="17">/* Pass the message to our sibling. */</comment>
		<expr_stmt><expr><call><name pos:line="11" pos:column="17">send_msg<pos:position pos:line="11" pos:column="25"/></name><argument_list pos:line="11" pos:column="25">(<argument><expr><operator pos:line="11" pos:column="26">(<pos:position pos:line="11" pos:column="27"/></operator>enum <name pos:line="11" pos:column="32">msgcode<pos:position pos:line="11" pos:column="39"/></name><operator pos:line="11" pos:column="39">)<pos:position pos:line="11" pos:column="40"/></operator><name pos:line="11" pos:column="40">code<pos:position pos:line="11" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="46">buf<pos:position pos:line="11" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="51">len<pos:position pos:line="11" pos:column="54"/></name></expr></argument>)<pos:position pos:line="11" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="56"/></expr_stmt>
		<return pos:line="12" pos:column="17">return;<pos:position pos:line="12" pos:column="24"/></return>
	}<pos:position pos:line="13" pos:column="10"/></block></then></if>

	<if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><name pos:line="15" pos:column="13">code<pos:position pos:line="15" pos:column="17"/></name> <operator pos:line="15" pos:column="18">==<pos:position pos:line="15" pos:column="20"/></operator> <name pos:line="15" pos:column="21">FSOCKERR<pos:position pos:line="15" pos:column="29"/></name></expr>)<pos:position pos:line="15" pos:column="30"/></condition><then pos:line="15" pos:column="30"> <comment type="block" pos:line="15" pos:column="31">/* This gets simplified for a non-sibling. */</comment>
		<block type="pseudo"><expr_stmt><expr><name pos:line="16" pos:column="17">code<pos:position pos:line="16" pos:column="21"/></name> <operator pos:line="16" pos:column="22">=<pos:position pos:line="16" pos:column="23"/></operator> <name pos:line="16" pos:column="24">FERROR<pos:position pos:line="16" pos:column="30"/></name></expr>;<pos:position pos:line="16" pos:column="31"/></expr_stmt></block></then></if>

	<if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><name pos:line="18" pos:column="13">code<pos:position pos:line="18" pos:column="17"/></name> <operator pos:line="18" pos:column="18">==<pos:position pos:line="18" pos:column="20"/></operator> <name pos:line="18" pos:column="21">FCLIENT<pos:position pos:line="18" pos:column="28"/></name></expr>)<pos:position pos:line="18" pos:column="29"/></condition><then pos:line="18" pos:column="29">
		<block type="pseudo"><expr_stmt><expr><name pos:line="19" pos:column="17">code<pos:position pos:line="19" pos:column="21"/></name> <operator pos:line="19" pos:column="22">=<pos:position pos:line="19" pos:column="23"/></operator> <name pos:line="19" pos:column="24">FINFO<pos:position pos:line="19" pos:column="29"/></name></expr>;<pos:position pos:line="19" pos:column="30"/></expr_stmt></block></then>
	<elseif pos:line="20" pos:column="9">else <if pos:line="20" pos:column="14">if <condition pos:line="20" pos:column="17">(<expr><name pos:line="20" pos:column="18">am_daemon<pos:position pos:line="20" pos:column="27"/></name> <operator pos:line="20" pos:column="28">||<pos:position pos:line="20" pos:column="30"/></operator> <name pos:line="20" pos:column="31">logfile_name<pos:position pos:line="20" pos:column="43"/></name></expr>)<pos:position pos:line="20" pos:column="44"/></condition><then pos:line="20" pos:column="44"> <block pos:line="20" pos:column="45">{
		<decl_stmt><decl><specifier pos:line="21" pos:column="17">static<pos:position pos:line="21" pos:column="23"/></specifier> <type><name pos:line="21" pos:column="24">int<pos:position pos:line="21" pos:column="27"/></name></type> <name pos:line="21" pos:column="28">in_block<pos:position pos:line="21" pos:column="36"/></name></decl>;<pos:position pos:line="21" pos:column="37"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="22" pos:column="17">char<pos:position pos:line="22" pos:column="21"/></name></type> <name><name pos:line="22" pos:column="22">msg<pos:position pos:line="22" pos:column="25"/></name><index pos:line="22" pos:column="25">[<expr><literal type="number" pos:line="22" pos:column="26">2048<pos:position pos:line="22" pos:column="30"/></literal></expr>]<pos:position pos:line="22" pos:column="31"/></index></name></decl>;<pos:position pos:line="22" pos:column="32"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="23" pos:column="17">int<pos:position pos:line="23" pos:column="20"/></name></type> <name pos:line="23" pos:column="21">priority<pos:position pos:line="23" pos:column="29"/></name> <init pos:line="23" pos:column="30">= <expr><ternary><condition><expr><name pos:line="23" pos:column="32">code<pos:position pos:line="23" pos:column="36"/></name> <operator pos:line="23" pos:column="37">==<pos:position pos:line="23" pos:column="39"/></operator> <name pos:line="23" pos:column="40">FERROR<pos:position pos:line="23" pos:column="46"/></name></expr> ?<pos:position pos:line="23" pos:column="48"/></condition><then pos:line="23" pos:column="48"> <expr><name pos:line="23" pos:column="49">LOG_WARNING<pos:position pos:line="23" pos:column="60"/></name></expr> <pos:position pos:line="23" pos:column="61"/></then><else pos:line="23" pos:column="61">: <expr><name pos:line="23" pos:column="63">LOG_INFO<pos:position pos:line="23" pos:column="71"/></name></expr></else></ternary></expr></init></decl>;<pos:position pos:line="23" pos:column="72"/></decl_stmt>

		<if pos:line="25" pos:column="17">if <condition pos:line="25" pos:column="20">(<expr><name pos:line="25" pos:column="21">in_block<pos:position pos:line="25" pos:column="29"/></name></expr>)<pos:position pos:line="25" pos:column="30"/></condition><then pos:line="25" pos:column="30">
			<block type="pseudo"><return pos:line="26" pos:column="25">return;<pos:position pos:line="26" pos:column="32"/></return></block></then></if>
		<expr_stmt><expr><name pos:line="27" pos:column="17">in_block<pos:position pos:line="27" pos:column="25"/></name> <operator pos:line="27" pos:column="26">=<pos:position pos:line="27" pos:column="27"/></operator> <literal type="number" pos:line="27" pos:column="28">1<pos:position pos:line="27" pos:column="29"/></literal></expr>;<pos:position pos:line="27" pos:column="30"/></expr_stmt>
		<if pos:line="28" pos:column="17">if <condition pos:line="28" pos:column="20">(<expr><operator pos:line="28" pos:column="21">!<pos:position pos:line="28" pos:column="22"/></operator><name pos:line="28" pos:column="22">log_initialised<pos:position pos:line="28" pos:column="37"/></name></expr>)<pos:position pos:line="28" pos:column="38"/></condition><then pos:line="28" pos:column="38">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="29" pos:column="25">log_init<pos:position pos:line="29" pos:column="33"/></name><argument_list pos:line="29" pos:column="33">(<argument><expr><literal type="number" pos:line="29" pos:column="34">0<pos:position pos:line="29" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="37"/></expr_stmt></block></then></if>
		<expr_stmt><expr><call><name pos:line="30" pos:column="17">strlcpy<pos:position pos:line="30" pos:column="24"/></name><argument_list pos:line="30" pos:column="24">(<argument><expr><name pos:line="30" pos:column="25">msg<pos:position pos:line="30" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="30">buf<pos:position pos:line="30" pos:column="33"/></name></expr></argument>, <argument><expr><call><name pos:line="30" pos:column="35">MIN<pos:position pos:line="30" pos:column="38"/></name><argument_list pos:line="30" pos:column="38">(<argument><expr><operator pos:line="30" pos:column="39">(<pos:position pos:line="30" pos:column="40"/></operator><name pos:line="30" pos:column="40">int<pos:position pos:line="30" pos:column="43"/></name><operator pos:line="30" pos:column="43">)<pos:position pos:line="30" pos:column="44"/></operator><sizeof pos:line="30" pos:column="44">sizeof <name pos:line="30" pos:column="51">msg<pos:position pos:line="30" pos:column="54"/></name></sizeof></expr></argument>, <argument><expr><name pos:line="30" pos:column="56">len<pos:position pos:line="30" pos:column="59"/></name> <operator pos:line="30" pos:column="60">+<pos:position pos:line="30" pos:column="61"/></operator> <literal type="number" pos:line="30" pos:column="62">1<pos:position pos:line="30" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="64"/></argument_list></call></expr></argument>)<pos:position pos:line="30" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="66"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="31" pos:column="17">logit<pos:position pos:line="31" pos:column="22"/></name><argument_list pos:line="31" pos:column="22">(<argument><expr><name pos:line="31" pos:column="23">priority<pos:position pos:line="31" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="33">msg<pos:position pos:line="31" pos:column="36"/></name></expr></argument>)<pos:position pos:line="31" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="38"/></expr_stmt>
		<expr_stmt><expr><name pos:line="32" pos:column="17">in_block<pos:position pos:line="32" pos:column="25"/></name> <operator pos:line="32" pos:column="26">=<pos:position pos:line="32" pos:column="27"/></operator> <literal type="number" pos:line="32" pos:column="28">0<pos:position pos:line="32" pos:column="29"/></literal></expr>;<pos:position pos:line="32" pos:column="30"/></expr_stmt>

		<if pos:line="34" pos:column="17">if <condition pos:line="34" pos:column="20">(<expr><name pos:line="34" pos:column="21">code<pos:position pos:line="34" pos:column="25"/></name> <operator pos:line="34" pos:column="26">==<pos:position pos:line="34" pos:column="28"/></operator> <name pos:line="34" pos:column="29">FLOG<pos:position pos:line="34" pos:column="33"/></name> <operator pos:line="34" pos:column="34">||<pos:position pos:line="34" pos:column="36"/></operator> <operator pos:line="34" pos:column="37">(<pos:position pos:line="34" pos:column="38"/></operator><name pos:line="34" pos:column="38">am_daemon<pos:position pos:line="34" pos:column="47"/></name> <operator pos:line="34" pos:column="48">&amp;&amp;<pos:position pos:line="34" pos:column="58"/></operator> <operator pos:line="34" pos:column="51">!<pos:position pos:line="34" pos:column="52"/></operator><name pos:line="34" pos:column="52">am_server<pos:position pos:line="34" pos:column="61"/></name><operator pos:line="34" pos:column="61">)<pos:position pos:line="34" pos:column="62"/></operator></expr>)<pos:position pos:line="34" pos:column="63"/></condition><then pos:line="34" pos:column="63">
			<block type="pseudo"><return pos:line="35" pos:column="25">return;<pos:position pos:line="35" pos:column="32"/></return></block></then></if>
	}<pos:position pos:line="36" pos:column="10"/></block></then></if></elseif> <elseif pos:line="36" pos:column="11">else <if pos:line="36" pos:column="16">if <condition pos:line="36" pos:column="19">(<expr><name pos:line="36" pos:column="20">code<pos:position pos:line="36" pos:column="24"/></name> <operator pos:line="36" pos:column="25">==<pos:position pos:line="36" pos:column="27"/></operator> <name pos:line="36" pos:column="28">FLOG<pos:position pos:line="36" pos:column="32"/></name></expr>)<pos:position pos:line="36" pos:column="33"/></condition><then pos:line="36" pos:column="33">
		<block type="pseudo"><return pos:line="37" pos:column="17">return;<pos:position pos:line="37" pos:column="24"/></return></block></then></if></elseif></if>

	<if pos:line="39" pos:column="9">if <condition pos:line="39" pos:column="12">(<expr><name pos:line="39" pos:column="13">quiet<pos:position pos:line="39" pos:column="18"/></name> <operator pos:line="39" pos:column="19">&amp;&amp;<pos:position pos:line="39" pos:column="29"/></operator> <name pos:line="39" pos:column="22">code<pos:position pos:line="39" pos:column="26"/></name> <operator pos:line="39" pos:column="27">!=<pos:position pos:line="39" pos:column="29"/></operator> <name pos:line="39" pos:column="30">FERROR<pos:position pos:line="39" pos:column="36"/></name></expr>)<pos:position pos:line="39" pos:column="37"/></condition><then pos:line="39" pos:column="37">
		<block type="pseudo"><return pos:line="40" pos:column="17">return;<pos:position pos:line="40" pos:column="24"/></return></block></then></if>

	<if pos:line="42" pos:column="9">if <condition pos:line="42" pos:column="12">(<expr><name pos:line="42" pos:column="13">am_server<pos:position pos:line="42" pos:column="22"/></name></expr>)<pos:position pos:line="42" pos:column="23"/></condition><then pos:line="42" pos:column="23"> <block pos:line="42" pos:column="24">{
		<comment type="block" pos:line="43" pos:column="17">/* Pass the message to the non-server side. */</comment>
		<if pos:line="44" pos:column="17">if <condition pos:line="44" pos:column="20">(<expr><call><name pos:line="44" pos:column="21">send_msg<pos:position pos:line="44" pos:column="29"/></name><argument_list pos:line="44" pos:column="29">(<argument><expr><operator pos:line="44" pos:column="30">(<pos:position pos:line="44" pos:column="31"/></operator>enum <name pos:line="44" pos:column="36">msgcode<pos:position pos:line="44" pos:column="43"/></name><operator pos:line="44" pos:column="43">)<pos:position pos:line="44" pos:column="44"/></operator><name pos:line="44" pos:column="44">code<pos:position pos:line="44" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="50">buf<pos:position pos:line="44" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="55">len<pos:position pos:line="44" pos:column="58"/></name></expr></argument>)<pos:position pos:line="44" pos:column="59"/></argument_list></call></expr>)<pos:position pos:line="44" pos:column="60"/></condition><then pos:line="44" pos:column="60">
			<block type="pseudo"><return pos:line="45" pos:column="25">return;<pos:position pos:line="45" pos:column="32"/></return></block></then></if>
		<if pos:line="46" pos:column="17">if <condition pos:line="46" pos:column="20">(<expr><name pos:line="46" pos:column="21">am_daemon<pos:position pos:line="46" pos:column="30"/></name></expr>)<pos:position pos:line="46" pos:column="31"/></condition><then pos:line="46" pos:column="31"> <block pos:line="46" pos:column="32">{
			<comment type="block" pos:line="47" pos:column="25">/* TODO: can we send the error to the user somehow? */</comment>
			<return pos:line="48" pos:column="25">return;<pos:position pos:line="48" pos:column="32"/></return>
		}<pos:position pos:line="49" pos:column="18"/></block></then></if>
	}<pos:position pos:line="50" pos:column="10"/></block></then></if>

	<switch pos:line="52" pos:column="9">switch <condition pos:line="52" pos:column="16">(<expr><name pos:line="52" pos:column="17">code<pos:position pos:line="52" pos:column="21"/></name></expr>)<pos:position pos:line="52" pos:column="22"/></condition> <block pos:line="52" pos:column="23">{
	<case pos:line="53" pos:column="9">case <expr><name pos:line="53" pos:column="14">FERROR<pos:position pos:line="53" pos:column="20"/></name></expr>:<pos:position pos:line="53" pos:column="21"/></case>
		<expr_stmt><expr><name pos:line="54" pos:column="17">log_got_error<pos:position pos:line="54" pos:column="30"/></name> <operator pos:line="54" pos:column="31">=<pos:position pos:line="54" pos:column="32"/></operator> <literal type="number" pos:line="54" pos:column="33">1<pos:position pos:line="54" pos:column="34"/></literal></expr>;<pos:position pos:line="54" pos:column="35"/></expr_stmt>
		<expr_stmt><expr><name pos:line="55" pos:column="17">f<pos:position pos:line="55" pos:column="18"/></name> <operator pos:line="55" pos:column="19">=<pos:position pos:line="55" pos:column="20"/></operator> <name pos:line="55" pos:column="21">stderr<pos:position pos:line="55" pos:column="27"/></name></expr>;<pos:position pos:line="55" pos:column="28"/></expr_stmt>
		<break pos:line="56" pos:column="17">break;<pos:position pos:line="56" pos:column="23"/></break>
	<case pos:line="57" pos:column="9">case <expr><name pos:line="57" pos:column="14">FINFO<pos:position pos:line="57" pos:column="19"/></name></expr>:<pos:position pos:line="57" pos:column="20"/></case>
		<expr_stmt><expr><name pos:line="58" pos:column="17">f<pos:position pos:line="58" pos:column="18"/></name> <operator pos:line="58" pos:column="19">=<pos:position pos:line="58" pos:column="20"/></operator> <ternary><condition><expr><name pos:line="58" pos:column="21">am_server<pos:position pos:line="58" pos:column="30"/></name></expr> ?<pos:position pos:line="58" pos:column="32"/></condition><then pos:line="58" pos:column="32"> <expr><name pos:line="58" pos:column="33">stderr<pos:position pos:line="58" pos:column="39"/></name></expr> <pos:position pos:line="58" pos:column="40"/></then><else pos:line="58" pos:column="40">: <expr><name pos:line="58" pos:column="42">stdout<pos:position pos:line="58" pos:column="48"/></name></expr></else></ternary></expr>;<pos:position pos:line="58" pos:column="49"/></expr_stmt>
		<break pos:line="59" pos:column="17">break;<pos:position pos:line="59" pos:column="23"/></break>
	<default pos:line="60" pos:column="9">default:<pos:position pos:line="60" pos:column="17"/></default>
		<expr_stmt><expr><call><name pos:line="61" pos:column="17">exit_cleanup<pos:position pos:line="61" pos:column="29"/></name><argument_list pos:line="61" pos:column="29">(<argument><expr><name pos:line="61" pos:column="30">RERR_MESSAGEIO<pos:position pos:line="61" pos:column="44"/></name></expr></argument>)<pos:position pos:line="61" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="46"/></expr_stmt>
	}<pos:position pos:line="62" pos:column="10"/></block></switch>

	<expr_stmt><expr><name pos:line="64" pos:column="9">trailing_CR_or_NL<pos:position pos:line="64" pos:column="26"/></name> <operator pos:line="64" pos:column="27">=<pos:position pos:line="64" pos:column="28"/></operator> <ternary><condition><expr><name pos:line="64" pos:column="29">len<pos:position pos:line="64" pos:column="32"/></name> <operator pos:line="64" pos:column="33">&amp;&amp;<pos:position pos:line="64" pos:column="43"/></operator> <operator pos:line="64" pos:column="36">(<pos:position pos:line="64" pos:column="37"/></operator><name><name pos:line="64" pos:column="37">buf<pos:position pos:line="64" pos:column="40"/></name><index pos:line="64" pos:column="40">[<expr><name pos:line="64" pos:column="41">len<pos:position pos:line="64" pos:column="44"/></name><operator pos:line="64" pos:column="44">-<pos:position pos:line="64" pos:column="45"/></operator><literal type="number" pos:line="64" pos:column="45">1<pos:position pos:line="64" pos:column="46"/></literal></expr>]<pos:position pos:line="64" pos:column="47"/></index></name> <operator pos:line="64" pos:column="48">==<pos:position pos:line="64" pos:column="50"/></operator> <literal type="char" pos:line="64" pos:column="51">'\n'<pos:position pos:line="64" pos:column="55"/></literal> <operator pos:line="64" pos:column="56">||<pos:position pos:line="64" pos:column="58"/></operator> <name><name pos:line="64" pos:column="59">buf<pos:position pos:line="64" pos:column="62"/></name><index pos:line="64" pos:column="62">[<expr><name pos:line="64" pos:column="63">len<pos:position pos:line="64" pos:column="66"/></name><operator pos:line="64" pos:column="66">-<pos:position pos:line="64" pos:column="67"/></operator><literal type="number" pos:line="64" pos:column="67">1<pos:position pos:line="64" pos:column="68"/></literal></expr>]<pos:position pos:line="64" pos:column="69"/></index></name> <operator pos:line="64" pos:column="70">==<pos:position pos:line="64" pos:column="72"/></operator> <literal type="char" pos:line="64" pos:column="73">'\r'<pos:position pos:line="64" pos:column="77"/></literal><operator pos:line="64" pos:column="77">)<pos:position pos:line="64" pos:column="78"/></operator></expr>
			  ?<pos:position pos:line="65" pos:column="28"/></condition><then pos:line="65" pos:column="28"> <expr><name><name pos:line="65" pos:column="29">buf<pos:position pos:line="65" pos:column="32"/></name><index pos:line="65" pos:column="32">[<expr><operator pos:line="65" pos:column="33">--<pos:position pos:line="65" pos:column="35"/></operator><name pos:line="65" pos:column="35">len<pos:position pos:line="65" pos:column="38"/></name></expr>]<pos:position pos:line="65" pos:column="39"/></index></name></expr> <pos:position pos:line="65" pos:column="40"/></then><else pos:line="65" pos:column="40">: <expr><literal type="number" pos:line="65" pos:column="42">0<pos:position pos:line="65" pos:column="43"/></literal></expr></else></ternary></expr>;<pos:position pos:line="65" pos:column="44"/></expr_stmt>

<cpp:if pos:line="67" pos:column="1">#<cpp:directive pos:line="67" pos:column="2">if<pos:position pos:line="67" pos:column="4"/></cpp:directive> <expr><name pos:line="67" pos:column="5">defined<pos:position pos:line="67" pos:column="12"/></name> <name pos:line="67" pos:column="13">HAVE_ICONV_OPEN<pos:position pos:line="67" pos:column="28"/></name> <operator pos:line="67" pos:column="29">&amp;&amp;<pos:position pos:line="67" pos:column="39"/></operator> <name pos:line="67" pos:column="32">defined<pos:position pos:line="67" pos:column="39"/></name> <name pos:line="67" pos:column="40">HAVE_ICONV_H<pos:position pos:line="67" pos:column="52"/></name></expr></cpp:if>
	<if pos:line="68" pos:column="9">if <condition pos:line="68" pos:column="12">(<expr><name pos:line="68" pos:column="13">ic_chck<pos:position pos:line="68" pos:column="20"/></name> <operator pos:line="68" pos:column="21">!=<pos:position pos:line="68" pos:column="23"/></operator> <operator pos:line="68" pos:column="24">(<pos:position pos:line="68" pos:column="25"/></operator><name pos:line="68" pos:column="25">iconv_t<pos:position pos:line="68" pos:column="32"/></name><operator pos:line="68" pos:column="32">)<pos:position pos:line="68" pos:column="33"/></operator><operator pos:line="68" pos:column="33">-<pos:position pos:line="68" pos:column="34"/></operator><literal type="number" pos:line="68" pos:column="34">1<pos:position pos:line="68" pos:column="35"/></literal></expr>)<pos:position pos:line="68" pos:column="36"/></condition><then pos:line="68" pos:column="36"> <block pos:line="68" pos:column="37">{
		<decl_stmt><decl><type><name pos:line="69" pos:column="17">char<pos:position pos:line="69" pos:column="21"/></name></type> <name><name pos:line="69" pos:column="22">convbuf<pos:position pos:line="69" pos:column="29"/></name><index pos:line="69" pos:column="29">[<expr><literal type="number" pos:line="69" pos:column="30">1024<pos:position pos:line="69" pos:column="34"/></literal></expr>]<pos:position pos:line="69" pos:column="35"/></index></name></decl>;<pos:position pos:line="69" pos:column="36"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="70" pos:column="17">char<pos:position pos:line="70" pos:column="21"/></name> <modifier pos:line="70" pos:column="22">*<pos:position pos:line="70" pos:column="23"/></modifier></type><name pos:line="70" pos:column="23">in_buf<pos:position pos:line="70" pos:column="29"/></name> <init pos:line="70" pos:column="30">= <expr><name pos:line="70" pos:column="32">buf<pos:position pos:line="70" pos:column="35"/></name></expr></init></decl>, <modifier pos:line="70" pos:column="37">*<pos:position pos:line="70" pos:column="38"/></modifier><decl><type ref="prev"/><name pos:line="70" pos:column="38">out_buf<pos:position pos:line="70" pos:column="45"/></name> <init pos:line="70" pos:column="46">= <expr><name pos:line="70" pos:column="48">convbuf<pos:position pos:line="70" pos:column="55"/></name></expr></init></decl>;<pos:position pos:line="70" pos:column="56"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="71" pos:column="17">size_t<pos:position pos:line="71" pos:column="23"/></name></type> <name pos:line="71" pos:column="24">in_cnt<pos:position pos:line="71" pos:column="30"/></name> <init pos:line="71" pos:column="31">= <expr><name pos:line="71" pos:column="33">len<pos:position pos:line="71" pos:column="36"/></name></expr></init></decl>, <decl><type ref="prev"/><name pos:line="71" pos:column="38">out_cnt<pos:position pos:line="71" pos:column="45"/></name> <init pos:line="71" pos:column="46">= <expr><sizeof pos:line="71" pos:column="48">sizeof <name pos:line="71" pos:column="55">convbuf<pos:position pos:line="71" pos:column="62"/></name></sizeof> <operator pos:line="71" pos:column="63">-<pos:position pos:line="71" pos:column="64"/></operator> <literal type="number" pos:line="71" pos:column="65">1<pos:position pos:line="71" pos:column="66"/></literal></expr></init></decl>;<pos:position pos:line="71" pos:column="67"/></decl_stmt>

		<expr_stmt><expr><call><name pos:line="73" pos:column="17">iconv<pos:position pos:line="73" pos:column="22"/></name><argument_list pos:line="73" pos:column="22">(<argument><expr><name pos:line="73" pos:column="23">ic_chck<pos:position pos:line="73" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="73" pos:column="32">NULL<pos:position pos:line="73" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="73" pos:column="38">0<pos:position pos:line="73" pos:column="39"/></literal></expr></argument>, <argument><expr><name pos:line="73" pos:column="41">NULL<pos:position pos:line="73" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="73" pos:column="47">0<pos:position pos:line="73" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="73" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="50"/></expr_stmt>
		<while pos:line="74" pos:column="17">while <condition pos:line="74" pos:column="23">(<expr><call><name pos:line="74" pos:column="24">iconv<pos:position pos:line="74" pos:column="29"/></name><argument_list pos:line="74" pos:column="29">(<argument><expr><name pos:line="74" pos:column="30">ic_chck<pos:position pos:line="74" pos:column="37"/></name></expr></argument>, <argument><expr><operator pos:line="74" pos:column="39">&amp;<pos:position pos:line="74" pos:column="44"/></operator><name pos:line="74" pos:column="40">in_buf<pos:position pos:line="74" pos:column="46"/></name></expr></argument>,<argument><expr><operator pos:line="74" pos:column="47">&amp;<pos:position pos:line="74" pos:column="52"/></operator><name pos:line="74" pos:column="48">in_cnt<pos:position pos:line="74" pos:column="54"/></name></expr></argument>,
				 <argument><expr><operator pos:line="75" pos:column="34">&amp;<pos:position pos:line="75" pos:column="39"/></operator><name pos:line="75" pos:column="35">out_buf<pos:position pos:line="75" pos:column="42"/></name></expr></argument>,<argument><expr><operator pos:line="75" pos:column="43">&amp;<pos:position pos:line="75" pos:column="48"/></operator><name pos:line="75" pos:column="44">out_cnt<pos:position pos:line="75" pos:column="51"/></name></expr></argument>)<pos:position pos:line="75" pos:column="52"/></argument_list></call> <operator pos:line="75" pos:column="53">==<pos:position pos:line="75" pos:column="55"/></operator> <operator pos:line="75" pos:column="56">(<pos:position pos:line="75" pos:column="57"/></operator><name pos:line="75" pos:column="57">size_t<pos:position pos:line="75" pos:column="63"/></name><operator pos:line="75" pos:column="63">)<pos:position pos:line="75" pos:column="64"/></operator><operator pos:line="75" pos:column="64">-<pos:position pos:line="75" pos:column="65"/></operator><literal type="number" pos:line="75" pos:column="65">1<pos:position pos:line="75" pos:column="66"/></literal></expr>)<pos:position pos:line="75" pos:column="67"/></condition> <block pos:line="75" pos:column="68">{
			<if pos:line="76" pos:column="25">if <condition pos:line="76" pos:column="28">(<expr><name pos:line="76" pos:column="29">out_buf<pos:position pos:line="76" pos:column="36"/></name> <operator pos:line="76" pos:column="37">!=<pos:position pos:line="76" pos:column="39"/></operator> <name pos:line="76" pos:column="40">convbuf<pos:position pos:line="76" pos:column="47"/></name></expr>)<pos:position pos:line="76" pos:column="48"/></condition><then pos:line="76" pos:column="48"> <block pos:line="76" pos:column="49">{
				<expr_stmt><expr><call><name pos:line="77" pos:column="33">filtered_fwrite<pos:position pos:line="77" pos:column="48"/></name><argument_list pos:line="77" pos:column="48">(<argument><expr><name pos:line="77" pos:column="49">f<pos:position pos:line="77" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="77" pos:column="52">convbuf<pos:position pos:line="77" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="77" pos:column="61">out_buf<pos:position pos:line="77" pos:column="68"/></name> <operator pos:line="77" pos:column="69">-<pos:position pos:line="77" pos:column="70"/></operator> <name pos:line="77" pos:column="71">convbuf<pos:position pos:line="77" pos:column="78"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="77" pos:column="80">0<pos:position pos:line="77" pos:column="81"/></literal></expr></argument>)<pos:position pos:line="77" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="83"/></expr_stmt>
				<expr_stmt><expr><name pos:line="78" pos:column="33">out_buf<pos:position pos:line="78" pos:column="40"/></name> <operator pos:line="78" pos:column="41">=<pos:position pos:line="78" pos:column="42"/></operator> <name pos:line="78" pos:column="43">convbuf<pos:position pos:line="78" pos:column="50"/></name></expr>;<pos:position pos:line="78" pos:column="51"/></expr_stmt>
				<expr_stmt><expr><name pos:line="79" pos:column="33">out_cnt<pos:position pos:line="79" pos:column="40"/></name> <operator pos:line="79" pos:column="41">=<pos:position pos:line="79" pos:column="42"/></operator> <sizeof pos:line="79" pos:column="43">sizeof <name pos:line="79" pos:column="50">convbuf<pos:position pos:line="79" pos:column="57"/></name></sizeof> <operator pos:line="79" pos:column="58">-<pos:position pos:line="79" pos:column="59"/></operator> <literal type="number" pos:line="79" pos:column="60">1<pos:position pos:line="79" pos:column="61"/></literal></expr>;<pos:position pos:line="79" pos:column="62"/></expr_stmt>
			}<pos:position pos:line="80" pos:column="26"/></block></then></if>
			<if pos:line="81" pos:column="25">if <condition pos:line="81" pos:column="28">(<expr><name pos:line="81" pos:column="29">errno<pos:position pos:line="81" pos:column="34"/></name> <operator pos:line="81" pos:column="35">==<pos:position pos:line="81" pos:column="37"/></operator> <name pos:line="81" pos:column="38">E2BIG<pos:position pos:line="81" pos:column="43"/></name></expr>)<pos:position pos:line="81" pos:column="44"/></condition><then pos:line="81" pos:column="44">
				<block type="pseudo"><continue pos:line="82" pos:column="33">continue;<pos:position pos:line="82" pos:column="42"/></continue></block></then></if>
			<expr_stmt><expr><call><name pos:line="83" pos:column="25">fprintf<pos:position pos:line="83" pos:column="32"/></name><argument_list pos:line="83" pos:column="32">(<argument><expr><name pos:line="83" pos:column="33">f<pos:position pos:line="83" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="83" pos:column="36">"\\#%03o"<pos:position pos:line="83" pos:column="45"/></literal></expr></argument>, <argument><expr><operator pos:line="83" pos:column="47">*<pos:position pos:line="83" pos:column="48"/></operator><operator pos:line="83" pos:column="48">(<pos:position pos:line="83" pos:column="49"/></operator><name pos:line="83" pos:column="49">uchar<pos:position pos:line="83" pos:column="54"/></name><operator pos:line="83" pos:column="54">*<pos:position pos:line="83" pos:column="55"/></operator><operator pos:line="83" pos:column="55">)<pos:position pos:line="83" pos:column="56"/></operator><name pos:line="83" pos:column="56">in_buf<pos:position pos:line="83" pos:column="62"/></name><operator pos:line="83" pos:column="62">++<pos:position pos:line="83" pos:column="64"/></operator></expr></argument>)<pos:position pos:line="83" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="66"/></expr_stmt>
			<expr_stmt><expr><name pos:line="84" pos:column="25">in_cnt<pos:position pos:line="84" pos:column="31"/></name><operator pos:line="84" pos:column="31">--<pos:position pos:line="84" pos:column="33"/></operator></expr>;<pos:position pos:line="84" pos:column="34"/></expr_stmt>
		}<pos:position pos:line="85" pos:column="18"/></block></while>
		<if pos:line="86" pos:column="17">if <condition pos:line="86" pos:column="20">(<expr><name pos:line="86" pos:column="21">out_buf<pos:position pos:line="86" pos:column="28"/></name> <operator pos:line="86" pos:column="29">!=<pos:position pos:line="86" pos:column="31"/></operator> <name pos:line="86" pos:column="32">convbuf<pos:position pos:line="86" pos:column="39"/></name></expr>)<pos:position pos:line="86" pos:column="40"/></condition><then pos:line="86" pos:column="40">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="87" pos:column="25">filtered_fwrite<pos:position pos:line="87" pos:column="40"/></name><argument_list pos:line="87" pos:column="40">(<argument><expr><name pos:line="87" pos:column="41">f<pos:position pos:line="87" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="87" pos:column="44">convbuf<pos:position pos:line="87" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="87" pos:column="53">out_buf<pos:position pos:line="87" pos:column="60"/></name> <operator pos:line="87" pos:column="61">-<pos:position pos:line="87" pos:column="62"/></operator> <name pos:line="87" pos:column="63">convbuf<pos:position pos:line="87" pos:column="70"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="87" pos:column="72">0<pos:position pos:line="87" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="87" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="75"/></expr_stmt></block></then></if>
	}<pos:position pos:line="88" pos:column="10"/></block></then> <else pos:line="88" pos:column="11">else
<cpp:endif pos:line="89" pos:column="1">#<cpp:directive pos:line="89" pos:column="2">endif<pos:position pos:line="89" pos:column="7"/></cpp:directive></cpp:endif>
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="90" pos:column="17">filtered_fwrite<pos:position pos:line="90" pos:column="32"/></name><argument_list pos:line="90" pos:column="32">(<argument><expr><name pos:line="90" pos:column="33">f<pos:position pos:line="90" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="90" pos:column="36">buf<pos:position pos:line="90" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="90" pos:column="41">len<pos:position pos:line="90" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="90" pos:column="46">!<pos:position pos:line="90" pos:column="47"/></operator><name pos:line="90" pos:column="47">allow_8bit_chars<pos:position pos:line="90" pos:column="63"/></name></expr></argument>)<pos:position pos:line="90" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="65"/></expr_stmt></block></else></if>

	<if pos:line="92" pos:column="9">if <condition pos:line="92" pos:column="12">(<expr><name pos:line="92" pos:column="13">trailing_CR_or_NL<pos:position pos:line="92" pos:column="30"/></name></expr>)<pos:position pos:line="92" pos:column="31"/></condition><then pos:line="92" pos:column="31"> <block pos:line="92" pos:column="32">{
		<expr_stmt><expr><call><name pos:line="93" pos:column="17">fputc<pos:position pos:line="93" pos:column="22"/></name><argument_list pos:line="93" pos:column="22">(<argument><expr><name pos:line="93" pos:column="23">trailing_CR_or_NL<pos:position pos:line="93" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="93" pos:column="42">f<pos:position pos:line="93" pos:column="43"/></name></expr></argument>)<pos:position pos:line="93" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="45"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="94" pos:column="17">fflush<pos:position pos:line="94" pos:column="23"/></name><argument_list pos:line="94" pos:column="23">(<argument><expr><name pos:line="94" pos:column="24">f<pos:position pos:line="94" pos:column="25"/></name></expr></argument>)<pos:position pos:line="94" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="27"/></expr_stmt>
	}<pos:position pos:line="95" pos:column="10"/></block></then></if>
}<pos:position pos:line="96" pos:column="2"/></block></function></unit>
