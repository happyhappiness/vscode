<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_431_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">include_config<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><name pos:line="1" pos:column="27">char<pos:position pos:line="1" pos:column="31"/></name> <modifier pos:line="1" pos:column="32">*<pos:position pos:line="1" pos:column="33"/></modifier></type><name pos:line="1" pos:column="33">include<pos:position pos:line="1" pos:column="40"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="42">int<pos:position pos:line="1" pos:column="45"/></name></type> <name pos:line="1" pos:column="46">manage_globals<pos:position pos:line="1" pos:column="60"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="61"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">STRUCT_STAT<pos:position pos:line="3" pos:column="16"/></name></type> <name pos:line="3" pos:column="17">sb<pos:position pos:line="3" pos:column="19"/></name></decl>;<pos:position pos:line="3" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">char<pos:position pos:line="4" pos:column="9"/></name> <modifier pos:line="4" pos:column="10">*<pos:position pos:line="4" pos:column="11"/></modifier></type><name pos:line="4" pos:column="11">match<pos:position pos:line="4" pos:column="16"/></name> <init pos:line="4" pos:column="17">= <expr><ternary><condition><expr><name pos:line="4" pos:column="19">manage_globals<pos:position pos:line="4" pos:column="33"/></name></expr> ?<pos:position pos:line="4" pos:column="35"/></condition><then pos:line="4" pos:column="35"> <expr><literal type="string" pos:line="4" pos:column="36">"*.conf"<pos:position pos:line="4" pos:column="44"/></literal></expr> <pos:position pos:line="4" pos:column="45"/></then><else pos:line="4" pos:column="45">: <expr><literal type="string" pos:line="4" pos:column="47">"*.inc"<pos:position pos:line="4" pos:column="54"/></literal></expr></else></ternary></expr></init></decl>;<pos:position pos:line="4" pos:column="55"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">int<pos:position pos:line="5" pos:column="8"/></name></type> <name pos:line="5" pos:column="9">ret<pos:position pos:line="5" pos:column="12"/></name></decl>;<pos:position pos:line="5" pos:column="13"/></decl_stmt>

    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><call><name pos:line="7" pos:column="9">do_stat<pos:position pos:line="7" pos:column="16"/></name><argument_list pos:line="7" pos:column="16">(<argument><expr><name pos:line="7" pos:column="17">include<pos:position pos:line="7" pos:column="24"/></name></expr></argument>, <argument><expr><operator pos:line="7" pos:column="26">&amp;<pos:position pos:line="7" pos:column="31"/></operator><name pos:line="7" pos:column="27">sb<pos:position pos:line="7" pos:column="29"/></name></expr></argument>)<pos:position pos:line="7" pos:column="30"/></argument_list></call> <operator pos:line="7" pos:column="31">&lt;<pos:position pos:line="7" pos:column="35"/></operator> <literal type="number" pos:line="7" pos:column="33">0<pos:position pos:line="7" pos:column="34"/></literal></expr>)<pos:position pos:line="7" pos:column="35"/></condition><then pos:line="7" pos:column="35"> <block pos:line="7" pos:column="36">{
	<expr_stmt><expr><call><name pos:line="8" pos:column="9">rsyserr<pos:position pos:line="8" pos:column="16"/></name><argument_list pos:line="8" pos:column="16">(<argument><expr><name pos:line="8" pos:column="17">FLOG<pos:position pos:line="8" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="23">errno<pos:position pos:line="8" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="8" pos:column="30">"unable to stat config file \"%s\""<pos:position pos:line="8" pos:column="65"/></literal></expr></argument>, <argument><expr><name pos:line="8" pos:column="67">include<pos:position pos:line="8" pos:column="74"/></name></expr></argument>)<pos:position pos:line="8" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="76"/></expr_stmt>
	<return pos:line="9" pos:column="9">return <expr><literal type="number" pos:line="9" pos:column="16">0<pos:position pos:line="9" pos:column="17"/></literal></expr>;<pos:position pos:line="9" pos:column="18"/></return>
    }<pos:position pos:line="10" pos:column="6"/></block></then></if>

    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><call><name pos:line="12" pos:column="9">S_ISREG<pos:position pos:line="12" pos:column="16"/></name><argument_list pos:line="12" pos:column="16">(<argument><expr><name><name pos:line="12" pos:column="17">sb<pos:position pos:line="12" pos:column="19"/></name><operator pos:line="12" pos:column="19">.<pos:position pos:line="12" pos:column="20"/></operator><name pos:line="12" pos:column="20">st_mode<pos:position pos:line="12" pos:column="27"/></name></name></expr></argument>)<pos:position pos:line="12" pos:column="28"/></argument_list></call></expr>)<pos:position pos:line="12" pos:column="29"/></condition><then pos:line="12" pos:column="29"> <block pos:line="12" pos:column="30">{
	<if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><name pos:line="13" pos:column="13">manage_globals<pos:position pos:line="13" pos:column="27"/></name> <operator pos:line="13" pos:column="28">&amp;&amp;<pos:position pos:line="13" pos:column="38"/></operator> <name pos:line="13" pos:column="31">the_sfunc<pos:position pos:line="13" pos:column="40"/></name></expr>)<pos:position pos:line="13" pos:column="41"/></condition><then pos:line="13" pos:column="41">
	    <block type="pseudo"><expr_stmt><expr><call><name pos:line="14" pos:column="13">the_sfunc<pos:position pos:line="14" pos:column="22"/></name><argument_list pos:line="14" pos:column="22">(<argument><expr><literal type="string" pos:line="14" pos:column="23">"]push"<pos:position pos:line="14" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="32"/></expr_stmt></block></then></if>
	<expr_stmt><expr><name pos:line="15" pos:column="9">ret<pos:position pos:line="15" pos:column="12"/></name> <operator pos:line="15" pos:column="13">=<pos:position pos:line="15" pos:column="14"/></operator> <call><name pos:line="15" pos:column="15">pm_process<pos:position pos:line="15" pos:column="25"/></name><argument_list pos:line="15" pos:column="25">(<argument><expr><name pos:line="15" pos:column="26">include<pos:position pos:line="15" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="35">the_sfunc<pos:position pos:line="15" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="46">the_pfunc<pos:position pos:line="15" pos:column="55"/></name></expr></argument>)<pos:position pos:line="15" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="57"/></expr_stmt>
	<if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><name pos:line="16" pos:column="13">manage_globals<pos:position pos:line="16" pos:column="27"/></name> <operator pos:line="16" pos:column="28">&amp;&amp;<pos:position pos:line="16" pos:column="38"/></operator> <name pos:line="16" pos:column="31">the_sfunc<pos:position pos:line="16" pos:column="40"/></name></expr>)<pos:position pos:line="16" pos:column="41"/></condition><then pos:line="16" pos:column="41">
	    <block type="pseudo"><expr_stmt><expr><call><name pos:line="17" pos:column="13">the_sfunc<pos:position pos:line="17" pos:column="22"/></name><argument_list pos:line="17" pos:column="22">(<argument><expr><literal type="string" pos:line="17" pos:column="23">"]pop"<pos:position pos:line="17" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="31"/></expr_stmt></block></then></if>
    }<pos:position pos:line="18" pos:column="6"/></block></then> <elseif pos:line="18" pos:column="7">else <if pos:line="18" pos:column="12">if <condition pos:line="18" pos:column="15">(<expr><call><name pos:line="18" pos:column="16">S_ISDIR<pos:position pos:line="18" pos:column="23"/></name><argument_list pos:line="18" pos:column="23">(<argument><expr><name><name pos:line="18" pos:column="24">sb<pos:position pos:line="18" pos:column="26"/></name><operator pos:line="18" pos:column="26">.<pos:position pos:line="18" pos:column="27"/></operator><name pos:line="18" pos:column="27">st_mode<pos:position pos:line="18" pos:column="34"/></name></name></expr></argument>)<pos:position pos:line="18" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="18" pos:column="36"/></condition><then pos:line="18" pos:column="36"> <block pos:line="18" pos:column="37">{
	<decl_stmt><decl><type><name pos:line="19" pos:column="9">char<pos:position pos:line="19" pos:column="13"/></name></type> <name><name pos:line="19" pos:column="14">buf<pos:position pos:line="19" pos:column="17"/></name><index pos:line="19" pos:column="17">[<expr><name pos:line="19" pos:column="18">MAXPATHLEN<pos:position pos:line="19" pos:column="28"/></name></expr>]<pos:position pos:line="19" pos:column="29"/></index></name></decl>, <modifier pos:line="19" pos:column="31">*<pos:position pos:line="19" pos:column="32"/></modifier><modifier pos:line="19" pos:column="32">*<pos:position pos:line="19" pos:column="33"/></modifier><decl><type ref="prev"/><name pos:line="19" pos:column="33">bpp<pos:position pos:line="19" pos:column="36"/></name></decl>;<pos:position pos:line="19" pos:column="37"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="20" pos:column="9">item_list<pos:position pos:line="20" pos:column="18"/></name></type> <name pos:line="20" pos:column="19">conf_list<pos:position pos:line="20" pos:column="28"/></name></decl>;<pos:position pos:line="20" pos:column="29"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="21" pos:column="9">struct<pos:position pos:line="21" pos:column="15"/></name> <name pos:line="21" pos:column="16">dirent<pos:position pos:line="21" pos:column="22"/></name></name> <modifier pos:line="21" pos:column="23">*<pos:position pos:line="21" pos:column="24"/></modifier></type><name pos:line="21" pos:column="24">di<pos:position pos:line="21" pos:column="26"/></name></decl>;<pos:position pos:line="21" pos:column="27"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="22" pos:column="9">size_t<pos:position pos:line="22" pos:column="15"/></name></type> <name pos:line="22" pos:column="16">j<pos:position pos:line="22" pos:column="17"/></name></decl>;<pos:position pos:line="22" pos:column="18"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="23" pos:column="9">DIR<pos:position pos:line="23" pos:column="12"/></name> <modifier pos:line="23" pos:column="13">*<pos:position pos:line="23" pos:column="14"/></modifier></type><name pos:line="23" pos:column="14">d<pos:position pos:line="23" pos:column="15"/></name></decl>;<pos:position pos:line="23" pos:column="16"/></decl_stmt>

	<if pos:line="25" pos:column="9">if <condition pos:line="25" pos:column="12">(<expr><operator pos:line="25" pos:column="13">!<pos:position pos:line="25" pos:column="14"/></operator><operator pos:line="25" pos:column="14">(<pos:position pos:line="25" pos:column="15"/></operator><name pos:line="25" pos:column="15">d<pos:position pos:line="25" pos:column="16"/></name> <operator pos:line="25" pos:column="17">=<pos:position pos:line="25" pos:column="18"/></operator> <call><name pos:line="25" pos:column="19">opendir<pos:position pos:line="25" pos:column="26"/></name><argument_list pos:line="25" pos:column="26">(<argument><expr><name pos:line="25" pos:column="27">include<pos:position pos:line="25" pos:column="34"/></name></expr></argument>)<pos:position pos:line="25" pos:column="35"/></argument_list></call><operator pos:line="25" pos:column="35">)<pos:position pos:line="25" pos:column="36"/></operator></expr>)<pos:position pos:line="25" pos:column="37"/></condition><then pos:line="25" pos:column="37"> <block pos:line="25" pos:column="38">{
	    <expr_stmt><expr><call><name pos:line="26" pos:column="13">rsyserr<pos:position pos:line="26" pos:column="20"/></name><argument_list pos:line="26" pos:column="20">(<argument><expr><name pos:line="26" pos:column="21">FLOG<pos:position pos:line="26" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="27">errno<pos:position pos:line="26" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="26" pos:column="34">"unable to open config dir \"%s\""<pos:position pos:line="26" pos:column="68"/></literal></expr></argument>, <argument><expr><name pos:line="26" pos:column="70">include<pos:position pos:line="26" pos:column="77"/></name></expr></argument>)<pos:position pos:line="26" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="79"/></expr_stmt>
	    <return pos:line="27" pos:column="13">return <expr><literal type="number" pos:line="27" pos:column="20">0<pos:position pos:line="27" pos:column="21"/></literal></expr>;<pos:position pos:line="27" pos:column="22"/></return>
	}<pos:position pos:line="28" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="30" pos:column="9">memset<pos:position pos:line="30" pos:column="15"/></name><argument_list pos:line="30" pos:column="15">(<argument><expr><operator pos:line="30" pos:column="16">&amp;<pos:position pos:line="30" pos:column="21"/></operator><name pos:line="30" pos:column="17">conf_list<pos:position pos:line="30" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="30" pos:column="28">0<pos:position pos:line="30" pos:column="29"/></literal></expr></argument>, <argument><expr><sizeof pos:line="30" pos:column="31">sizeof <name pos:line="30" pos:column="38">conf_list<pos:position pos:line="30" pos:column="47"/></name></sizeof></expr></argument>)<pos:position pos:line="30" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="49"/></expr_stmt>

	<while pos:line="32" pos:column="9">while <condition pos:line="32" pos:column="15">(<expr><operator pos:line="32" pos:column="16">(<pos:position pos:line="32" pos:column="17"/></operator><name pos:line="32" pos:column="17">di<pos:position pos:line="32" pos:column="19"/></name> <operator pos:line="32" pos:column="20">=<pos:position pos:line="32" pos:column="21"/></operator> <call><name pos:line="32" pos:column="22">readdir<pos:position pos:line="32" pos:column="29"/></name><argument_list pos:line="32" pos:column="29">(<argument><expr><name pos:line="32" pos:column="30">d<pos:position pos:line="32" pos:column="31"/></name></expr></argument>)<pos:position pos:line="32" pos:column="32"/></argument_list></call><operator pos:line="32" pos:column="32">)<pos:position pos:line="32" pos:column="33"/></operator> <operator pos:line="32" pos:column="34">!=<pos:position pos:line="32" pos:column="36"/></operator> <name pos:line="32" pos:column="37">NULL<pos:position pos:line="32" pos:column="41"/></name></expr>)<pos:position pos:line="32" pos:column="42"/></condition> <block pos:line="32" pos:column="43">{
	    <decl_stmt><decl><type><name pos:line="33" pos:column="13">char<pos:position pos:line="33" pos:column="17"/></name> <modifier pos:line="33" pos:column="18">*<pos:position pos:line="33" pos:column="19"/></modifier></type><name pos:line="33" pos:column="19">dname<pos:position pos:line="33" pos:column="24"/></name> <init pos:line="33" pos:column="25">= <expr><call><name pos:line="33" pos:column="27">d_name<pos:position pos:line="33" pos:column="33"/></name><argument_list pos:line="33" pos:column="33">(<argument><expr><name pos:line="33" pos:column="34">di<pos:position pos:line="33" pos:column="36"/></name></expr></argument>)<pos:position pos:line="33" pos:column="37"/></argument_list></call></expr></init></decl>;<pos:position pos:line="33" pos:column="38"/></decl_stmt>
	    <if pos:line="34" pos:column="13">if <condition pos:line="34" pos:column="16">(<expr><operator pos:line="34" pos:column="17">!<pos:position pos:line="34" pos:column="18"/></operator><call><name pos:line="34" pos:column="18">wildmatch<pos:position pos:line="34" pos:column="27"/></name><argument_list pos:line="34" pos:column="27">(<argument><expr><name pos:line="34" pos:column="28">match<pos:position pos:line="34" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="35">dname<pos:position pos:line="34" pos:column="40"/></name></expr></argument>)<pos:position pos:line="34" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="34" pos:column="42"/></condition><then pos:line="34" pos:column="42">
		<block type="pseudo"><continue pos:line="35" pos:column="17">continue;<pos:position pos:line="35" pos:column="26"/></continue></block></then></if>
	    <expr_stmt><expr><name pos:line="36" pos:column="13">bpp<pos:position pos:line="36" pos:column="16"/></name> <operator pos:line="36" pos:column="17">=<pos:position pos:line="36" pos:column="18"/></operator> <call><name pos:line="36" pos:column="19">EXPAND_ITEM_LIST<pos:position pos:line="36" pos:column="35"/></name><argument_list pos:line="36" pos:column="35">(<argument><expr><operator pos:line="36" pos:column="36">&amp;<pos:position pos:line="36" pos:column="41"/></operator><name pos:line="36" pos:column="37">conf_list<pos:position pos:line="36" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="48">char<pos:position pos:line="36" pos:column="52"/></name> <operator pos:line="36" pos:column="53">*<pos:position pos:line="36" pos:column="54"/></operator></expr></argument>, <argument><expr><literal type="number" pos:line="36" pos:column="56">32<pos:position pos:line="36" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="60"/></expr_stmt>
	    <expr_stmt><expr><call><name pos:line="37" pos:column="13">pathjoin<pos:position pos:line="37" pos:column="21"/></name><argument_list pos:line="37" pos:column="21">(<argument><expr><name pos:line="37" pos:column="22">buf<pos:position pos:line="37" pos:column="25"/></name></expr></argument>, <argument><expr><sizeof pos:line="37" pos:column="27">sizeof <name pos:line="37" pos:column="34">buf<pos:position pos:line="37" pos:column="37"/></name></sizeof></expr></argument>, <argument><expr><name pos:line="37" pos:column="39">include<pos:position pos:line="37" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="48">dname<pos:position pos:line="37" pos:column="53"/></name></expr></argument>)<pos:position pos:line="37" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="55"/></expr_stmt>
	    <expr_stmt><expr><operator pos:line="38" pos:column="13">*<pos:position pos:line="38" pos:column="14"/></operator><name pos:line="38" pos:column="14">bpp<pos:position pos:line="38" pos:column="17"/></name> <operator pos:line="38" pos:column="18">=<pos:position pos:line="38" pos:column="19"/></operator> <call><name pos:line="38" pos:column="20">strdup<pos:position pos:line="38" pos:column="26"/></name><argument_list pos:line="38" pos:column="26">(<argument><expr><name pos:line="38" pos:column="27">buf<pos:position pos:line="38" pos:column="30"/></name></expr></argument>)<pos:position pos:line="38" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="32"/></expr_stmt>
	}<pos:position pos:line="39" pos:column="10"/></block></while>
	<expr_stmt><expr><call><name pos:line="40" pos:column="9">closedir<pos:position pos:line="40" pos:column="17"/></name><argument_list pos:line="40" pos:column="17">(<argument><expr><name pos:line="40" pos:column="18">d<pos:position pos:line="40" pos:column="19"/></name></expr></argument>)<pos:position pos:line="40" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="21"/></expr_stmt>

	<if pos:line="42" pos:column="9">if <condition pos:line="42" pos:column="12">(<expr><operator pos:line="42" pos:column="13">!<pos:position pos:line="42" pos:column="14"/></operator><operator pos:line="42" pos:column="14">(<pos:position pos:line="42" pos:column="15"/></operator><name pos:line="42" pos:column="15">bpp<pos:position pos:line="42" pos:column="18"/></name> <operator pos:line="42" pos:column="19">=<pos:position pos:line="42" pos:column="20"/></operator> <name><name pos:line="42" pos:column="21">conf_list<pos:position pos:line="42" pos:column="30"/></name><operator pos:line="42" pos:column="30">.<pos:position pos:line="42" pos:column="31"/></operator><name pos:line="42" pos:column="31">items<pos:position pos:line="42" pos:column="36"/></name></name><operator pos:line="42" pos:column="36">)<pos:position pos:line="42" pos:column="37"/></operator></expr>)<pos:position pos:line="42" pos:column="38"/></condition><then pos:line="42" pos:column="38">
	    <block type="pseudo"><return pos:line="43" pos:column="13">return <expr><literal type="number" pos:line="43" pos:column="20">1<pos:position pos:line="43" pos:column="21"/></literal></expr>;<pos:position pos:line="43" pos:column="22"/></return></block></then></if>

	<if pos:line="45" pos:column="9">if <condition pos:line="45" pos:column="12">(<expr><name><name pos:line="45" pos:column="13">conf_list<pos:position pos:line="45" pos:column="22"/></name><operator pos:line="45" pos:column="22">.<pos:position pos:line="45" pos:column="23"/></operator><name pos:line="45" pos:column="23">count<pos:position pos:line="45" pos:column="28"/></name></name> <operator pos:line="45" pos:column="29">&gt;<pos:position pos:line="45" pos:column="33"/></operator> <literal type="number" pos:line="45" pos:column="31">1<pos:position pos:line="45" pos:column="32"/></literal></expr>)<pos:position pos:line="45" pos:column="33"/></condition><then pos:line="45" pos:column="33">
	    <block type="pseudo"><expr_stmt><expr><call><name pos:line="46" pos:column="13">qsort<pos:position pos:line="46" pos:column="18"/></name><argument_list pos:line="46" pos:column="18">(<argument><expr><name pos:line="46" pos:column="19">bpp<pos:position pos:line="46" pos:column="22"/></name></expr></argument>, <argument><expr><name><name pos:line="46" pos:column="24">conf_list<pos:position pos:line="46" pos:column="33"/></name><operator pos:line="46" pos:column="33">.<pos:position pos:line="46" pos:column="34"/></operator><name pos:line="46" pos:column="34">count<pos:position pos:line="46" pos:column="39"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="46" pos:column="41">sizeof <argument_list pos:line="46" pos:column="48">(<argument><expr><name pos:line="46" pos:column="49">char<pos:position pos:line="46" pos:column="53"/></name> <operator pos:line="46" pos:column="54">*<pos:position pos:line="46" pos:column="55"/></operator></expr></argument>)<pos:position pos:line="46" pos:column="56"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="46" pos:column="58">name_cmp<pos:position pos:line="46" pos:column="66"/></name></expr></argument>)<pos:position pos:line="46" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="68"/></expr_stmt></block></then></if>

	<for pos:line="48" pos:column="9">for <control pos:line="48" pos:column="13">(<init><expr><name pos:line="48" pos:column="14">j<pos:position pos:line="48" pos:column="15"/></name> <operator pos:line="48" pos:column="16">=<pos:position pos:line="48" pos:column="17"/></operator> <literal type="number" pos:line="48" pos:column="18">0<pos:position pos:line="48" pos:column="19"/></literal></expr><operator pos:line="48" pos:column="19">,<pos:position pos:line="48" pos:column="20"/></operator> <expr><name pos:line="48" pos:column="21">ret<pos:position pos:line="48" pos:column="24"/></name> <operator pos:line="48" pos:column="25">=<pos:position pos:line="48" pos:column="26"/></operator> <literal type="number" pos:line="48" pos:column="27">1<pos:position pos:line="48" pos:column="28"/></literal></expr>;<pos:position pos:line="48" pos:column="29"/></init> <condition><expr><name pos:line="48" pos:column="30">j<pos:position pos:line="48" pos:column="31"/></name> <operator pos:line="48" pos:column="32">&lt;<pos:position pos:line="48" pos:column="36"/></operator> <name><name pos:line="48" pos:column="34">conf_list<pos:position pos:line="48" pos:column="43"/></name><operator pos:line="48" pos:column="43">.<pos:position pos:line="48" pos:column="44"/></operator><name pos:line="48" pos:column="44">count<pos:position pos:line="48" pos:column="49"/></name></name></expr>;<pos:position pos:line="48" pos:column="50"/></condition> <incr><expr><name pos:line="48" pos:column="51">j<pos:position pos:line="48" pos:column="52"/></name><operator pos:line="48" pos:column="52">++<pos:position pos:line="48" pos:column="54"/></operator></expr></incr>)<pos:position pos:line="48" pos:column="55"/></control> <block pos:line="48" pos:column="56">{
	    <if pos:line="49" pos:column="13">if <condition pos:line="49" pos:column="16">(<expr><name pos:line="49" pos:column="17">manage_globals<pos:position pos:line="49" pos:column="31"/></name> <operator pos:line="49" pos:column="32">&amp;&amp;<pos:position pos:line="49" pos:column="42"/></operator> <name pos:line="49" pos:column="35">the_sfunc<pos:position pos:line="49" pos:column="44"/></name></expr>)<pos:position pos:line="49" pos:column="45"/></condition><then pos:line="49" pos:column="45">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="50" pos:column="17">the_sfunc<pos:position pos:line="50" pos:column="26"/></name><argument_list pos:line="50" pos:column="26">(<argument><expr><ternary><condition><expr><name pos:line="50" pos:column="27">j<pos:position pos:line="50" pos:column="28"/></name> <operator pos:line="50" pos:column="29">==<pos:position pos:line="50" pos:column="31"/></operator> <literal type="number" pos:line="50" pos:column="32">0<pos:position pos:line="50" pos:column="33"/></literal></expr> ?<pos:position pos:line="50" pos:column="35"/></condition><then pos:line="50" pos:column="35"> <expr><literal type="string" pos:line="50" pos:column="36">"]push"<pos:position pos:line="50" pos:column="43"/></literal></expr> <pos:position pos:line="50" pos:column="44"/></then><else pos:line="50" pos:column="44">: <expr><literal type="string" pos:line="50" pos:column="46">"]reset"<pos:position pos:line="50" pos:column="54"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="50" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="56"/></expr_stmt></block></then></if>
	    <if pos:line="51" pos:column="13">if <condition pos:line="51" pos:column="16">(<expr><operator pos:line="51" pos:column="17">(<pos:position pos:line="51" pos:column="18"/></operator><name pos:line="51" pos:column="18">ret<pos:position pos:line="51" pos:column="21"/></name> <operator pos:line="51" pos:column="22">=<pos:position pos:line="51" pos:column="23"/></operator> <call><name pos:line="51" pos:column="24">pm_process<pos:position pos:line="51" pos:column="34"/></name><argument_list pos:line="51" pos:column="34">(<argument><expr><name><name pos:line="51" pos:column="35">bpp<pos:position pos:line="51" pos:column="38"/></name><index pos:line="51" pos:column="38">[<expr><name pos:line="51" pos:column="39">j<pos:position pos:line="51" pos:column="40"/></name></expr>]<pos:position pos:line="51" pos:column="41"/></index></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="43">the_sfunc<pos:position pos:line="51" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="54">the_pfunc<pos:position pos:line="51" pos:column="63"/></name></expr></argument>)<pos:position pos:line="51" pos:column="64"/></argument_list></call><operator pos:line="51" pos:column="64">)<pos:position pos:line="51" pos:column="65"/></operator> <operator pos:line="51" pos:column="66">!=<pos:position pos:line="51" pos:column="68"/></operator> <literal type="number" pos:line="51" pos:column="69">1<pos:position pos:line="51" pos:column="70"/></literal></expr>)<pos:position pos:line="51" pos:column="71"/></condition><then pos:line="51" pos:column="71">
		<block type="pseudo"><break pos:line="52" pos:column="17">break;<pos:position pos:line="52" pos:column="23"/></break></block></then></if>
	}<pos:position pos:line="53" pos:column="10"/></block></for>

	<if pos:line="55" pos:column="9">if <condition pos:line="55" pos:column="12">(<expr><name pos:line="55" pos:column="13">manage_globals<pos:position pos:line="55" pos:column="27"/></name> <operator pos:line="55" pos:column="28">&amp;&amp;<pos:position pos:line="55" pos:column="38"/></operator> <name pos:line="55" pos:column="31">the_sfunc<pos:position pos:line="55" pos:column="40"/></name></expr>)<pos:position pos:line="55" pos:column="41"/></condition><then pos:line="55" pos:column="41">
	    <block type="pseudo"><expr_stmt><expr><call><name pos:line="56" pos:column="13">the_sfunc<pos:position pos:line="56" pos:column="22"/></name><argument_list pos:line="56" pos:column="22">(<argument><expr><literal type="string" pos:line="56" pos:column="23">"]pop"<pos:position pos:line="56" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="56" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="31"/></expr_stmt></block></then></if>

	<for pos:line="58" pos:column="9">for <control pos:line="58" pos:column="13">(<init><expr><name pos:line="58" pos:column="14">j<pos:position pos:line="58" pos:column="15"/></name> <operator pos:line="58" pos:column="16">=<pos:position pos:line="58" pos:column="17"/></operator> <literal type="number" pos:line="58" pos:column="18">0<pos:position pos:line="58" pos:column="19"/></literal></expr>;<pos:position pos:line="58" pos:column="20"/></init> <condition><expr><name pos:line="58" pos:column="21">j<pos:position pos:line="58" pos:column="22"/></name> <operator pos:line="58" pos:column="23">&lt;<pos:position pos:line="58" pos:column="27"/></operator> <name><name pos:line="58" pos:column="25">conf_list<pos:position pos:line="58" pos:column="34"/></name><operator pos:line="58" pos:column="34">.<pos:position pos:line="58" pos:column="35"/></operator><name pos:line="58" pos:column="35">count<pos:position pos:line="58" pos:column="40"/></name></name></expr>;<pos:position pos:line="58" pos:column="41"/></condition> <incr><expr><name pos:line="58" pos:column="42">j<pos:position pos:line="58" pos:column="43"/></name><operator pos:line="58" pos:column="43">++<pos:position pos:line="58" pos:column="45"/></operator></expr></incr>)<pos:position pos:line="58" pos:column="46"/></control>
	    <block type="pseudo"><expr_stmt><expr><call><name pos:line="59" pos:column="13">free<pos:position pos:line="59" pos:column="17"/></name><argument_list pos:line="59" pos:column="17">(<argument><expr><name><name pos:line="59" pos:column="18">bpp<pos:position pos:line="59" pos:column="21"/></name><index pos:line="59" pos:column="21">[<expr><name pos:line="59" pos:column="22">j<pos:position pos:line="59" pos:column="23"/></name></expr>]<pos:position pos:line="59" pos:column="24"/></index></name></expr></argument>)<pos:position pos:line="59" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="26"/></expr_stmt></block></for>
	<expr_stmt><expr><call><name pos:line="60" pos:column="9">free<pos:position pos:line="60" pos:column="13"/></name><argument_list pos:line="60" pos:column="13">(<argument><expr><name pos:line="60" pos:column="14">bpp<pos:position pos:line="60" pos:column="17"/></name></expr></argument>)<pos:position pos:line="60" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="19"/></expr_stmt>
    }<pos:position pos:line="61" pos:column="6"/></block></then></if></elseif> <else pos:line="61" pos:column="7">else
	<block type="pseudo"><expr_stmt><expr><name pos:line="62" pos:column="9">ret<pos:position pos:line="62" pos:column="12"/></name> <operator pos:line="62" pos:column="13">=<pos:position pos:line="62" pos:column="14"/></operator> <literal type="number" pos:line="62" pos:column="15">0<pos:position pos:line="62" pos:column="16"/></literal></expr>;<pos:position pos:line="62" pos:column="17"/></expr_stmt></block></else></if>

    <return pos:line="64" pos:column="5">return <expr><name pos:line="64" pos:column="12">ret<pos:position pos:line="64" pos:column="15"/></name></expr>;<pos:position pos:line="64" pos:column="16"/></return>
}<pos:position pos:line="65" pos:column="2"/></block></function></unit>
