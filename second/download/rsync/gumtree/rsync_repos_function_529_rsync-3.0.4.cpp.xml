<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_529_rsync-3.0.4.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">do_recv<pos:position pos:line="1" pos:column="19"/></name><parameter_list pos:line="1" pos:column="19">(<parameter><decl><type><name pos:line="1" pos:column="20">int<pos:position pos:line="1" pos:column="23"/></name></type> <name pos:line="1" pos:column="24">f_in<pos:position pos:line="1" pos:column="28"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="30">int<pos:position pos:line="1" pos:column="33"/></name></type> <name pos:line="1" pos:column="34">f_out<pos:position pos:line="1" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="41">char<pos:position pos:line="1" pos:column="45"/></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">local_name<pos:position pos:line="1" pos:column="57"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="58"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">pid<pos:position pos:line="3" pos:column="16"/></name></decl>;<pos:position pos:line="3" pos:column="17"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">exit_code<pos:position pos:line="4" pos:column="22"/></name> <init pos:line="4" pos:column="23">= <expr><literal type="number" pos:line="4" pos:column="25">0<pos:position pos:line="4" pos:column="26"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="27"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name><name pos:line="5" pos:column="13">error_pipe<pos:position pos:line="5" pos:column="23"/></name><index pos:line="5" pos:column="23">[<expr><literal type="number" pos:line="5" pos:column="24">2<pos:position pos:line="5" pos:column="25"/></literal></expr>]<pos:position pos:line="5" pos:column="26"/></index></name></decl>;<pos:position pos:line="5" pos:column="27"/></decl_stmt>

	<comment type="block" pos:line="7" pos:column="9">/* The receiving side mustn't obey this, or an existing symlink that
	 * points to an identical file won't be replaced by the referent. */</comment>
	<expr_stmt><expr><name pos:line="9" pos:column="9">copy_links<pos:position pos:line="9" pos:column="19"/></name> <operator pos:line="9" pos:column="20">=<pos:position pos:line="9" pos:column="21"/></operator> <name pos:line="9" pos:column="22">copy_dirlinks<pos:position pos:line="9" pos:column="35"/></name> <operator pos:line="9" pos:column="36">=<pos:position pos:line="9" pos:column="37"/></operator> <name pos:line="9" pos:column="38">copy_unsafe_links<pos:position pos:line="9" pos:column="55"/></name> <operator pos:line="9" pos:column="56">=<pos:position pos:line="9" pos:column="57"/></operator> <literal type="number" pos:line="9" pos:column="58">0<pos:position pos:line="9" pos:column="59"/></literal></expr>;<pos:position pos:line="9" pos:column="60"/></expr_stmt>

<cpp:ifdef pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">ifdef<pos:position pos:line="11" pos:column="7"/></cpp:directive> <name pos:line="11" pos:column="8">SUPPORT_HARD_LINKS<pos:position pos:line="11" pos:column="26"/></name></cpp:ifdef>
	<if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><name pos:line="12" pos:column="13">preserve_hard_links<pos:position pos:line="12" pos:column="32"/></name> <operator pos:line="12" pos:column="33">&amp;&amp;<pos:position pos:line="12" pos:column="43"/></operator> <operator pos:line="12" pos:column="36">!<pos:position pos:line="12" pos:column="37"/></operator><name pos:line="12" pos:column="37">inc_recurse<pos:position pos:line="12" pos:column="48"/></name></expr>)<pos:position pos:line="12" pos:column="49"/></condition><then pos:line="12" pos:column="49">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="13" pos:column="17">match_hard_links<pos:position pos:line="13" pos:column="33"/></name><argument_list pos:line="13" pos:column="33">(<argument><expr><name pos:line="13" pos:column="34">first_flist<pos:position pos:line="13" pos:column="45"/></name></expr></argument>)<pos:position pos:line="13" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="47"/></expr_stmt></block></then></if>
<cpp:endif pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">endif<pos:position pos:line="14" pos:column="7"/></cpp:directive></cpp:endif>

	<if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><call><name pos:line="16" pos:column="13">fd_pair<pos:position pos:line="16" pos:column="20"/></name><argument_list pos:line="16" pos:column="20">(<argument><expr><name pos:line="16" pos:column="21">error_pipe<pos:position pos:line="16" pos:column="31"/></name></expr></argument>)<pos:position pos:line="16" pos:column="32"/></argument_list></call> <operator pos:line="16" pos:column="33">&lt;<pos:position pos:line="16" pos:column="37"/></operator> <literal type="number" pos:line="16" pos:column="35">0<pos:position pos:line="16" pos:column="36"/></literal></expr>)<pos:position pos:line="16" pos:column="37"/></condition><then pos:line="16" pos:column="37"> <block pos:line="16" pos:column="38">{
		<expr_stmt><expr><call><name pos:line="17" pos:column="17">rsyserr<pos:position pos:line="17" pos:column="24"/></name><argument_list pos:line="17" pos:column="24">(<argument><expr><name pos:line="17" pos:column="25">FERROR<pos:position pos:line="17" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="33">errno<pos:position pos:line="17" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="40">"pipe failed in do_recv"<pos:position pos:line="17" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="66"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="18" pos:column="17">exit_cleanup<pos:position pos:line="18" pos:column="29"/></name><argument_list pos:line="18" pos:column="29">(<argument><expr><name pos:line="18" pos:column="30">RERR_IPC<pos:position pos:line="18" pos:column="38"/></name></expr></argument>)<pos:position pos:line="18" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="40"/></expr_stmt>
	}<pos:position pos:line="19" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="21" pos:column="9">io_flush<pos:position pos:line="21" pos:column="17"/></name><argument_list pos:line="21" pos:column="17">(<argument><expr><name pos:line="21" pos:column="18">NORMAL_FLUSH<pos:position pos:line="21" pos:column="30"/></name></expr></argument>)<pos:position pos:line="21" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="32"/></expr_stmt>

	<if pos:line="23" pos:column="9">if <condition pos:line="23" pos:column="12">(<expr><operator pos:line="23" pos:column="13">(<pos:position pos:line="23" pos:column="14"/></operator><name pos:line="23" pos:column="14">pid<pos:position pos:line="23" pos:column="17"/></name> <operator pos:line="23" pos:column="18">=<pos:position pos:line="23" pos:column="19"/></operator> <call><name pos:line="23" pos:column="20">do_fork<pos:position pos:line="23" pos:column="27"/></name><argument_list pos:line="23" pos:column="27">()<pos:position pos:line="23" pos:column="29"/></argument_list></call><operator pos:line="23" pos:column="29">)<pos:position pos:line="23" pos:column="30"/></operator> <operator pos:line="23" pos:column="31">==<pos:position pos:line="23" pos:column="33"/></operator> <operator pos:line="23" pos:column="34">-<pos:position pos:line="23" pos:column="35"/></operator><literal type="number" pos:line="23" pos:column="35">1<pos:position pos:line="23" pos:column="36"/></literal></expr>)<pos:position pos:line="23" pos:column="37"/></condition><then pos:line="23" pos:column="37"> <block pos:line="23" pos:column="38">{
		<expr_stmt><expr><call><name pos:line="24" pos:column="17">rsyserr<pos:position pos:line="24" pos:column="24"/></name><argument_list pos:line="24" pos:column="24">(<argument><expr><name pos:line="24" pos:column="25">FERROR<pos:position pos:line="24" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="33">errno<pos:position pos:line="24" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="24" pos:column="40">"fork failed in do_recv"<pos:position pos:line="24" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="66"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="25" pos:column="17">exit_cleanup<pos:position pos:line="25" pos:column="29"/></name><argument_list pos:line="25" pos:column="29">(<argument><expr><name pos:line="25" pos:column="30">RERR_IPC<pos:position pos:line="25" pos:column="38"/></name></expr></argument>)<pos:position pos:line="25" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="40"/></expr_stmt>
	}<pos:position pos:line="26" pos:column="10"/></block></then></if>

	<if pos:line="28" pos:column="9">if <condition pos:line="28" pos:column="12">(<expr><name pos:line="28" pos:column="13">pid<pos:position pos:line="28" pos:column="16"/></name> <operator pos:line="28" pos:column="17">==<pos:position pos:line="28" pos:column="19"/></operator> <literal type="number" pos:line="28" pos:column="20">0<pos:position pos:line="28" pos:column="21"/></literal></expr>)<pos:position pos:line="28" pos:column="22"/></condition><then pos:line="28" pos:column="22"> <block pos:line="28" pos:column="23">{
		<expr_stmt><expr><call><name pos:line="29" pos:column="17">close<pos:position pos:line="29" pos:column="22"/></name><argument_list pos:line="29" pos:column="22">(<argument><expr><name><name pos:line="29" pos:column="23">error_pipe<pos:position pos:line="29" pos:column="33"/></name><index pos:line="29" pos:column="33">[<expr><literal type="number" pos:line="29" pos:column="34">0<pos:position pos:line="29" pos:column="35"/></literal></expr>]<pos:position pos:line="29" pos:column="36"/></index></name></expr></argument>)<pos:position pos:line="29" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="38"/></expr_stmt>
		<if pos:line="30" pos:column="17">if <condition pos:line="30" pos:column="20">(<expr><name pos:line="30" pos:column="21">f_in<pos:position pos:line="30" pos:column="25"/></name> <operator pos:line="30" pos:column="26">!=<pos:position pos:line="30" pos:column="28"/></operator> <name pos:line="30" pos:column="29">f_out<pos:position pos:line="30" pos:column="34"/></name></expr>)<pos:position pos:line="30" pos:column="35"/></condition><then pos:line="30" pos:column="35">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="31" pos:column="25">close<pos:position pos:line="31" pos:column="30"/></name><argument_list pos:line="31" pos:column="30">(<argument><expr><name pos:line="31" pos:column="31">f_out<pos:position pos:line="31" pos:column="36"/></name></expr></argument>)<pos:position pos:line="31" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="38"/></expr_stmt></block></then></if>

		<comment type="block" pos:line="33" pos:column="17">/* we can't let two processes write to the socket at one time */</comment>
		<expr_stmt><expr><call><name pos:line="34" pos:column="17">io_end_multiplex_out<pos:position pos:line="34" pos:column="37"/></name><argument_list pos:line="34" pos:column="37">()<pos:position pos:line="34" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="40"/></expr_stmt>

		<comment type="block" pos:line="36" pos:column="17">/* set place to send errors */</comment>
		<expr_stmt><expr><call><name pos:line="37" pos:column="17">set_msg_fd_out<pos:position pos:line="37" pos:column="31"/></name><argument_list pos:line="37" pos:column="31">(<argument><expr><name><name pos:line="37" pos:column="32">error_pipe<pos:position pos:line="37" pos:column="42"/></name><index pos:line="37" pos:column="42">[<expr><literal type="number" pos:line="37" pos:column="43">1<pos:position pos:line="37" pos:column="44"/></literal></expr>]<pos:position pos:line="37" pos:column="45"/></index></name></expr></argument>)<pos:position pos:line="37" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="47"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="38" pos:column="17">io_start_buffering_out<pos:position pos:line="38" pos:column="39"/></name><argument_list pos:line="38" pos:column="39">(<argument><expr><name><name pos:line="38" pos:column="40">error_pipe<pos:position pos:line="38" pos:column="50"/></name><index pos:line="38" pos:column="50">[<expr><literal type="number" pos:line="38" pos:column="51">1<pos:position pos:line="38" pos:column="52"/></literal></expr>]<pos:position pos:line="38" pos:column="53"/></index></name></expr></argument>)<pos:position pos:line="38" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="55"/></expr_stmt>

		<expr_stmt><expr><call><name pos:line="40" pos:column="17">recv_files<pos:position pos:line="40" pos:column="27"/></name><argument_list pos:line="40" pos:column="27">(<argument><expr><name pos:line="40" pos:column="28">f_in<pos:position pos:line="40" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="34">local_name<pos:position pos:line="40" pos:column="44"/></name></expr></argument>)<pos:position pos:line="40" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="46"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="41" pos:column="17">io_flush<pos:position pos:line="41" pos:column="25"/></name><argument_list pos:line="41" pos:column="25">(<argument><expr><name pos:line="41" pos:column="26">FULL_FLUSH<pos:position pos:line="41" pos:column="36"/></name></expr></argument>)<pos:position pos:line="41" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="38"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="42" pos:column="17">handle_stats<pos:position pos:line="42" pos:column="29"/></name><argument_list pos:line="42" pos:column="29">(<argument><expr><name pos:line="42" pos:column="30">f_in<pos:position pos:line="42" pos:column="34"/></name></expr></argument>)<pos:position pos:line="42" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="36"/></expr_stmt>

		<expr_stmt><expr><call><name pos:line="44" pos:column="17">send_msg<pos:position pos:line="44" pos:column="25"/></name><argument_list pos:line="44" pos:column="25">(<argument><expr><name pos:line="44" pos:column="26">MSG_DONE<pos:position pos:line="44" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="44" pos:column="36">""<pos:position pos:line="44" pos:column="38"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="44" pos:column="40">1<pos:position pos:line="44" pos:column="41"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="44" pos:column="43">0<pos:position pos:line="44" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="46"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="45" pos:column="17">write_varlong<pos:position pos:line="45" pos:column="30"/></name><argument_list pos:line="45" pos:column="30">(<argument><expr><name><name pos:line="45" pos:column="31">error_pipe<pos:position pos:line="45" pos:column="41"/></name><index pos:line="45" pos:column="41">[<expr><literal type="number" pos:line="45" pos:column="42">1<pos:position pos:line="45" pos:column="43"/></literal></expr>]<pos:position pos:line="45" pos:column="44"/></index></name></expr></argument>, <argument><expr><name><name pos:line="45" pos:column="46">stats<pos:position pos:line="45" pos:column="51"/></name><operator pos:line="45" pos:column="51">.<pos:position pos:line="45" pos:column="52"/></operator><name pos:line="45" pos:column="52">total_read<pos:position pos:line="45" pos:column="62"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="45" pos:column="64">3<pos:position pos:line="45" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="45" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="67"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="46" pos:column="17">io_flush<pos:position pos:line="46" pos:column="25"/></name><argument_list pos:line="46" pos:column="25">(<argument><expr><name pos:line="46" pos:column="26">FULL_FLUSH<pos:position pos:line="46" pos:column="36"/></name></expr></argument>)<pos:position pos:line="46" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="38"/></expr_stmt>

		<comment type="block" pos:line="48" pos:column="17">/* Handle any keep-alive packets from the post-processing work
		 * that the generator does. */</comment>
		<if pos:line="50" pos:column="17">if <condition pos:line="50" pos:column="20">(<expr><name pos:line="50" pos:column="21">protocol_version<pos:position pos:line="50" pos:column="37"/></name> <operator pos:line="50" pos:column="38">&gt;=<pos:position pos:line="50" pos:column="43"/></operator> <literal type="number" pos:line="50" pos:column="41">29<pos:position pos:line="50" pos:column="43"/></literal></expr>)<pos:position pos:line="50" pos:column="44"/></condition><then pos:line="50" pos:column="44"> <block pos:line="50" pos:column="45">{
			<decl_stmt><decl><type><name pos:line="51" pos:column="25">int<pos:position pos:line="51" pos:column="28"/></name></type> <name pos:line="51" pos:column="29">iflags<pos:position pos:line="51" pos:column="35"/></name></decl>, <decl><type ref="prev"/><name pos:line="51" pos:column="37">xlen<pos:position pos:line="51" pos:column="41"/></name></decl>;<pos:position pos:line="51" pos:column="42"/></decl_stmt>
			<decl_stmt><decl><type><name pos:line="52" pos:column="25">uchar<pos:position pos:line="52" pos:column="30"/></name></type> <name pos:line="52" pos:column="31">fnamecmp_type<pos:position pos:line="52" pos:column="44"/></name></decl>;<pos:position pos:line="52" pos:column="45"/></decl_stmt>
			<decl_stmt><decl><type><name pos:line="53" pos:column="25">char<pos:position pos:line="53" pos:column="29"/></name></type> <name><name pos:line="53" pos:column="30">xname<pos:position pos:line="53" pos:column="35"/></name><index pos:line="53" pos:column="35">[<expr><name pos:line="53" pos:column="36">MAXPATHLEN<pos:position pos:line="53" pos:column="46"/></name></expr>]<pos:position pos:line="53" pos:column="47"/></index></name></decl>;<pos:position pos:line="53" pos:column="48"/></decl_stmt>

			<expr_stmt><expr><name pos:line="55" pos:column="25">kluge_around_eof<pos:position pos:line="55" pos:column="41"/></name> <operator pos:line="55" pos:column="42">=<pos:position pos:line="55" pos:column="43"/></operator> <operator pos:line="55" pos:column="44">-<pos:position pos:line="55" pos:column="45"/></operator><literal type="number" pos:line="55" pos:column="45">1<pos:position pos:line="55" pos:column="46"/></literal></expr>;<pos:position pos:line="55" pos:column="47"/></expr_stmt>

			<comment type="block" pos:line="57" pos:column="25">/* This should only get stopped via a USR2 signal. */</comment>
			<expr_stmt><expr><call><name pos:line="58" pos:column="25">read_ndx_and_attrs<pos:position pos:line="58" pos:column="43"/></name><argument_list pos:line="58" pos:column="43">(<argument><expr><name pos:line="58" pos:column="44">f_in<pos:position pos:line="58" pos:column="48"/></name></expr></argument>, <argument><expr><operator pos:line="58" pos:column="50">&amp;<pos:position pos:line="58" pos:column="55"/></operator><name pos:line="58" pos:column="51">iflags<pos:position pos:line="58" pos:column="57"/></name></expr></argument>, <argument><expr><operator pos:line="58" pos:column="59">&amp;<pos:position pos:line="58" pos:column="64"/></operator><name pos:line="58" pos:column="60">fnamecmp_type<pos:position pos:line="58" pos:column="73"/></name></expr></argument>,
					   <argument><expr><name pos:line="59" pos:column="44">xname<pos:position pos:line="59" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="59" pos:column="51">&amp;<pos:position pos:line="59" pos:column="56"/></operator><name pos:line="59" pos:column="52">xlen<pos:position pos:line="59" pos:column="56"/></name></expr></argument>)<pos:position pos:line="59" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="58"/></expr_stmt>

			<expr_stmt><expr><call><name pos:line="61" pos:column="25">rprintf<pos:position pos:line="61" pos:column="32"/></name><argument_list pos:line="61" pos:column="32">(<argument><expr><name pos:line="61" pos:column="33">FERROR<pos:position pos:line="61" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="61" pos:column="41">"Invalid packet at end of run [%s]\n"<pos:position pos:line="61" pos:column="78"/></literal></expr></argument>,
				<argument><expr><call><name pos:line="62" pos:column="33">who_am_i<pos:position pos:line="62" pos:column="41"/></name><argument_list pos:line="62" pos:column="41">()<pos:position pos:line="62" pos:column="43"/></argument_list></call></expr></argument>)<pos:position pos:line="62" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="45"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="63" pos:column="25">exit_cleanup<pos:position pos:line="63" pos:column="37"/></name><argument_list pos:line="63" pos:column="37">(<argument><expr><name pos:line="63" pos:column="38">RERR_PROTOCOL<pos:position pos:line="63" pos:column="51"/></name></expr></argument>)<pos:position pos:line="63" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="53"/></expr_stmt>
		}<pos:position pos:line="64" pos:column="18"/></block></then></if>

		<comment type="block" pos:line="66" pos:column="17">/* Finally, we go to sleep until our parent kills us with a
		 * USR2 signal.  We sleep for a short time, as on some OSes
		 * a signal won't interrupt a sleep! */</comment>
		<while pos:line="69" pos:column="17">while <condition pos:line="69" pos:column="23">(<expr><literal type="number" pos:line="69" pos:column="24">1<pos:position pos:line="69" pos:column="25"/></literal></expr>)<pos:position pos:line="69" pos:column="26"/></condition>
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="70" pos:column="25">msleep<pos:position pos:line="70" pos:column="31"/></name><argument_list pos:line="70" pos:column="31">(<argument><expr><literal type="number" pos:line="70" pos:column="32">20<pos:position pos:line="70" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="70" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="36"/></expr_stmt></block></while>
	}<pos:position pos:line="71" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="73" pos:column="9">am_generator<pos:position pos:line="73" pos:column="21"/></name> <operator pos:line="73" pos:column="22">=<pos:position pos:line="73" pos:column="23"/></operator> <literal type="number" pos:line="73" pos:column="24">1<pos:position pos:line="73" pos:column="25"/></literal></expr>;<pos:position pos:line="73" pos:column="26"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="75" pos:column="9">io_end_multiplex_in<pos:position pos:line="75" pos:column="28"/></name><argument_list pos:line="75" pos:column="28">()<pos:position pos:line="75" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="31"/></expr_stmt>
	<if pos:line="76" pos:column="9">if <condition pos:line="76" pos:column="12">(<expr><name pos:line="76" pos:column="13">write_batch<pos:position pos:line="76" pos:column="24"/></name> <operator pos:line="76" pos:column="25">&amp;&amp;<pos:position pos:line="76" pos:column="35"/></operator> <operator pos:line="76" pos:column="28">!<pos:position pos:line="76" pos:column="29"/></operator><name pos:line="76" pos:column="29">am_server<pos:position pos:line="76" pos:column="38"/></name></expr>)<pos:position pos:line="76" pos:column="39"/></condition><then pos:line="76" pos:column="39">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="77" pos:column="17">stop_write_batch<pos:position pos:line="77" pos:column="33"/></name><argument_list pos:line="77" pos:column="33">()<pos:position pos:line="77" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="36"/></expr_stmt></block></then></if>

	<expr_stmt><expr><call><name pos:line="79" pos:column="9">close<pos:position pos:line="79" pos:column="14"/></name><argument_list pos:line="79" pos:column="14">(<argument><expr><name><name pos:line="79" pos:column="15">error_pipe<pos:position pos:line="79" pos:column="25"/></name><index pos:line="79" pos:column="25">[<expr><literal type="number" pos:line="79" pos:column="26">1<pos:position pos:line="79" pos:column="27"/></literal></expr>]<pos:position pos:line="79" pos:column="28"/></index></name></expr></argument>)<pos:position pos:line="79" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="30"/></expr_stmt>
	<if pos:line="80" pos:column="9">if <condition pos:line="80" pos:column="12">(<expr><name pos:line="80" pos:column="13">f_in<pos:position pos:line="80" pos:column="17"/></name> <operator pos:line="80" pos:column="18">!=<pos:position pos:line="80" pos:column="20"/></operator> <name pos:line="80" pos:column="21">f_out<pos:position pos:line="80" pos:column="26"/></name></expr>)<pos:position pos:line="80" pos:column="27"/></condition><then pos:line="80" pos:column="27">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="81" pos:column="17">close<pos:position pos:line="81" pos:column="22"/></name><argument_list pos:line="81" pos:column="22">(<argument><expr><name pos:line="81" pos:column="23">f_in<pos:position pos:line="81" pos:column="27"/></name></expr></argument>)<pos:position pos:line="81" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="29"/></expr_stmt></block></then></if>

	<expr_stmt><expr><call><name pos:line="83" pos:column="9">io_start_buffering_out<pos:position pos:line="83" pos:column="31"/></name><argument_list pos:line="83" pos:column="31">(<argument><expr><name pos:line="83" pos:column="32">f_out<pos:position pos:line="83" pos:column="37"/></name></expr></argument>)<pos:position pos:line="83" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="39"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="85" pos:column="9">set_msg_fd_in<pos:position pos:line="85" pos:column="22"/></name><argument_list pos:line="85" pos:column="22">(<argument><expr><name><name pos:line="85" pos:column="23">error_pipe<pos:position pos:line="85" pos:column="33"/></name><index pos:line="85" pos:column="33">[<expr><literal type="number" pos:line="85" pos:column="34">0<pos:position pos:line="85" pos:column="35"/></literal></expr>]<pos:position pos:line="85" pos:column="36"/></index></name></expr></argument>)<pos:position pos:line="85" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="38"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="86" pos:column="9">io_start_buffering_in<pos:position pos:line="86" pos:column="30"/></name><argument_list pos:line="86" pos:column="30">(<argument><expr><name><name pos:line="86" pos:column="31">error_pipe<pos:position pos:line="86" pos:column="41"/></name><index pos:line="86" pos:column="41">[<expr><literal type="number" pos:line="86" pos:column="42">0<pos:position pos:line="86" pos:column="43"/></literal></expr>]<pos:position pos:line="86" pos:column="44"/></index></name></expr></argument>)<pos:position pos:line="86" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="46"/></expr_stmt>

<cpp:ifdef pos:line="88" pos:column="1">#<cpp:directive pos:line="88" pos:column="2">ifdef<pos:position pos:line="88" pos:column="7"/></cpp:directive> <name pos:line="88" pos:column="8">SUPPORT_HARD_LINKS<pos:position pos:line="88" pos:column="26"/></name></cpp:ifdef>
	<if pos:line="89" pos:column="9">if <condition pos:line="89" pos:column="12">(<expr><name pos:line="89" pos:column="13">preserve_hard_links<pos:position pos:line="89" pos:column="32"/></name> <operator pos:line="89" pos:column="33">&amp;&amp;<pos:position pos:line="89" pos:column="43"/></operator> <name pos:line="89" pos:column="36">inc_recurse<pos:position pos:line="89" pos:column="47"/></name></expr>)<pos:position pos:line="89" pos:column="48"/></condition><then pos:line="89" pos:column="48"> <block pos:line="89" pos:column="49">{
		<decl_stmt><decl><type><name><name pos:line="90" pos:column="17">struct<pos:position pos:line="90" pos:column="23"/></name> <name pos:line="90" pos:column="24">file_list<pos:position pos:line="90" pos:column="33"/></name></name> <modifier pos:line="90" pos:column="34">*<pos:position pos:line="90" pos:column="35"/></modifier></type><name pos:line="90" pos:column="35">flist<pos:position pos:line="90" pos:column="40"/></name></decl>;<pos:position pos:line="90" pos:column="41"/></decl_stmt>
		<for pos:line="91" pos:column="17">for <control pos:line="91" pos:column="21">(<init><expr><name pos:line="91" pos:column="22">flist<pos:position pos:line="91" pos:column="27"/></name> <operator pos:line="91" pos:column="28">=<pos:position pos:line="91" pos:column="29"/></operator> <name pos:line="91" pos:column="30">first_flist<pos:position pos:line="91" pos:column="41"/></name></expr>;<pos:position pos:line="91" pos:column="42"/></init> <condition><expr><name pos:line="91" pos:column="43">flist<pos:position pos:line="91" pos:column="48"/></name></expr>;<pos:position pos:line="91" pos:column="49"/></condition> <incr><expr><name pos:line="91" pos:column="50">flist<pos:position pos:line="91" pos:column="55"/></name> <operator pos:line="91" pos:column="56">=<pos:position pos:line="91" pos:column="57"/></operator> <name><name pos:line="91" pos:column="58">flist<pos:position pos:line="91" pos:column="63"/></name><operator pos:line="91" pos:column="63">-&gt;<pos:position pos:line="91" pos:column="68"/></operator><name pos:line="91" pos:column="65">next<pos:position pos:line="91" pos:column="69"/></name></name></expr></incr>)<pos:position pos:line="91" pos:column="70"/></control>
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="92" pos:column="25">match_hard_links<pos:position pos:line="92" pos:column="41"/></name><argument_list pos:line="92" pos:column="41">(<argument><expr><name pos:line="92" pos:column="42">flist<pos:position pos:line="92" pos:column="47"/></name></expr></argument>)<pos:position pos:line="92" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="49"/></expr_stmt></block></for>
	}<pos:position pos:line="93" pos:column="10"/></block></then></if>
<cpp:endif pos:line="94" pos:column="1">#<cpp:directive pos:line="94" pos:column="2">endif<pos:position pos:line="94" pos:column="7"/></cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name pos:line="96" pos:column="9">generate_files<pos:position pos:line="96" pos:column="23"/></name><argument_list pos:line="96" pos:column="23">(<argument><expr><name pos:line="96" pos:column="24">f_out<pos:position pos:line="96" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="96" pos:column="31">local_name<pos:position pos:line="96" pos:column="41"/></name></expr></argument>)<pos:position pos:line="96" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="43"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="98" pos:column="9">handle_stats<pos:position pos:line="98" pos:column="21"/></name><argument_list pos:line="98" pos:column="21">(<argument><expr><operator pos:line="98" pos:column="22">-<pos:position pos:line="98" pos:column="23"/></operator><literal type="number" pos:line="98" pos:column="23">1<pos:position pos:line="98" pos:column="24"/></literal></expr></argument>)<pos:position pos:line="98" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="26"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="99" pos:column="9">io_flush<pos:position pos:line="99" pos:column="17"/></name><argument_list pos:line="99" pos:column="17">(<argument><expr><name pos:line="99" pos:column="18">FULL_FLUSH<pos:position pos:line="99" pos:column="28"/></name></expr></argument>)<pos:position pos:line="99" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="99" pos:column="30"/></expr_stmt>
	<if pos:line="100" pos:column="9">if <condition pos:line="100" pos:column="12">(<expr><name pos:line="100" pos:column="13">protocol_version<pos:position pos:line="100" pos:column="29"/></name> <operator pos:line="100" pos:column="30">&gt;=<pos:position pos:line="100" pos:column="35"/></operator> <literal type="number" pos:line="100" pos:column="33">24<pos:position pos:line="100" pos:column="35"/></literal></expr>)<pos:position pos:line="100" pos:column="36"/></condition><then pos:line="100" pos:column="36"> <block pos:line="100" pos:column="37">{
		<comment type="block" pos:line="101" pos:column="17">/* send a final goodbye message */</comment>
		<expr_stmt><expr><call><name pos:line="102" pos:column="17">write_ndx<pos:position pos:line="102" pos:column="26"/></name><argument_list pos:line="102" pos:column="26">(<argument><expr><name pos:line="102" pos:column="27">f_out<pos:position pos:line="102" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="102" pos:column="34">NDX_DONE<pos:position pos:line="102" pos:column="42"/></name></expr></argument>)<pos:position pos:line="102" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="102" pos:column="44"/></expr_stmt>
	}<pos:position pos:line="103" pos:column="10"/></block></then></if>
	<expr_stmt><expr><call><name pos:line="104" pos:column="9">io_flush<pos:position pos:line="104" pos:column="17"/></name><argument_list pos:line="104" pos:column="17">(<argument><expr><name pos:line="104" pos:column="18">FULL_FLUSH<pos:position pos:line="104" pos:column="28"/></name></expr></argument>)<pos:position pos:line="104" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="104" pos:column="30"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="106" pos:column="9">set_msg_fd_in<pos:position pos:line="106" pos:column="22"/></name><argument_list pos:line="106" pos:column="22">(<argument><expr><operator pos:line="106" pos:column="23">-<pos:position pos:line="106" pos:column="24"/></operator><literal type="number" pos:line="106" pos:column="24">1<pos:position pos:line="106" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="106" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="106" pos:column="27"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="107" pos:column="9">kill<pos:position pos:line="107" pos:column="13"/></name><argument_list pos:line="107" pos:column="13">(<argument><expr><name pos:line="107" pos:column="14">pid<pos:position pos:line="107" pos:column="17"/></name></expr></argument>, <argument><expr><name pos:line="107" pos:column="19">SIGUSR2<pos:position pos:line="107" pos:column="26"/></name></expr></argument>)<pos:position pos:line="107" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="107" pos:column="28"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="108" pos:column="9">wait_process_with_flush<pos:position pos:line="108" pos:column="32"/></name><argument_list pos:line="108" pos:column="32">(<argument><expr><name pos:line="108" pos:column="33">pid<pos:position pos:line="108" pos:column="36"/></name></expr></argument>, <argument><expr><operator pos:line="108" pos:column="38">&amp;<pos:position pos:line="108" pos:column="43"/></operator><name pos:line="108" pos:column="39">exit_code<pos:position pos:line="108" pos:column="48"/></name></expr></argument>)<pos:position pos:line="108" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="108" pos:column="50"/></expr_stmt>
	<return pos:line="109" pos:column="9">return <expr><name pos:line="109" pos:column="16">exit_code<pos:position pos:line="109" pos:column="25"/></name></expr>;<pos:position pos:line="109" pos:column="26"/></return>
}<pos:position pos:line="110" pos:column="2"/></block></function></unit>
