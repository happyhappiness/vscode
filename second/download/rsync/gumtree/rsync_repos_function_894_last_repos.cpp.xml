<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_894_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">getservicenameinfo<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><specifier pos:line="1" pos:column="31">const<pos:position pos:line="1" pos:column="36"/></specifier> <name><name pos:line="1" pos:column="37">struct<pos:position pos:line="1" pos:column="43"/></name> <name pos:line="1" pos:column="44">sockaddr<pos:position pos:line="1" pos:column="52"/></name></name> <modifier pos:line="1" pos:column="53">*<pos:position pos:line="1" pos:column="54"/></modifier></type><name pos:line="1" pos:column="54">sa<pos:position pos:line="1" pos:column="56"/></name></decl></parameter>,
			<parameter><decl><type><name pos:line="2" pos:column="25">char<pos:position pos:line="2" pos:column="29"/></name> <modifier pos:line="2" pos:column="30">*<pos:position pos:line="2" pos:column="31"/></modifier></type><name pos:line="2" pos:column="31">service<pos:position pos:line="2" pos:column="38"/></name></decl></parameter>,
			<parameter><decl><type><name pos:line="3" pos:column="25">size_t<pos:position pos:line="3" pos:column="31"/></name></type> <name pos:line="3" pos:column="32">servicelen<pos:position pos:line="3" pos:column="42"/></name></decl></parameter>,
			<parameter><decl><type><name pos:line="4" pos:column="25">int<pos:position pos:line="4" pos:column="28"/></name></type> <name pos:line="4" pos:column="29">flags<pos:position pos:line="4" pos:column="34"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="35"/></parameter_list>
<block pos:line="5" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">ret<pos:position pos:line="6" pos:column="16"/></name> <init pos:line="6" pos:column="17">= <expr><operator pos:line="6" pos:column="19">-<pos:position pos:line="6" pos:column="20"/></operator><literal type="number" pos:line="6" pos:column="20">1<pos:position pos:line="6" pos:column="21"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="22"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">int<pos:position pos:line="7" pos:column="12"/></name></type> <name pos:line="7" pos:column="13">port<pos:position pos:line="7" pos:column="17"/></name> <init pos:line="7" pos:column="18">= <expr><call><name pos:line="7" pos:column="20">ntohs<pos:position pos:line="7" pos:column="25"/></name><argument_list pos:line="7" pos:column="25">(<argument><expr><operator pos:line="7" pos:column="26">(<pos:position pos:line="7" pos:column="27"/></operator><operator pos:line="7" pos:column="27">(<pos:position pos:line="7" pos:column="28"/></operator>struct <name pos:line="7" pos:column="35">sockaddr_in<pos:position pos:line="7" pos:column="46"/></name> <operator pos:line="7" pos:column="47">*<pos:position pos:line="7" pos:column="48"/></operator><operator pos:line="7" pos:column="48">)<pos:position pos:line="7" pos:column="49"/></operator><name pos:line="7" pos:column="49">sa<pos:position pos:line="7" pos:column="51"/></name><operator pos:line="7" pos:column="51">)<pos:position pos:line="7" pos:column="52"/></operator><operator pos:line="7" pos:column="52">-&gt;<pos:position pos:line="7" pos:column="57"/></operator><name pos:line="7" pos:column="54">sin_port<pos:position pos:line="7" pos:column="62"/></name></expr></argument>)<pos:position pos:line="7" pos:column="63"/></argument_list></call></expr></init></decl>;<pos:position pos:line="7" pos:column="64"/></decl_stmt>

	<if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><operator pos:line="9" pos:column="13">!<pos:position pos:line="9" pos:column="14"/></operator><operator pos:line="9" pos:column="14">(<pos:position pos:line="9" pos:column="15"/></operator><name pos:line="9" pos:column="15">flags<pos:position pos:line="9" pos:column="20"/></name> <operator pos:line="9" pos:column="21">&amp;<pos:position pos:line="9" pos:column="26"/></operator> <name pos:line="9" pos:column="23">NI_NUMERICSERV<pos:position pos:line="9" pos:column="37"/></name><operator pos:line="9" pos:column="37">)<pos:position pos:line="9" pos:column="38"/></operator></expr>)<pos:position pos:line="9" pos:column="39"/></condition><then pos:line="9" pos:column="39"> <block pos:line="9" pos:column="40">{
		<decl_stmt><decl><type><name><name pos:line="10" pos:column="17">struct<pos:position pos:line="10" pos:column="23"/></name> <name pos:line="10" pos:column="24">servent<pos:position pos:line="10" pos:column="31"/></name></name> <modifier pos:line="10" pos:column="32">*<pos:position pos:line="10" pos:column="33"/></modifier></type><name pos:line="10" pos:column="33">se<pos:position pos:line="10" pos:column="35"/></name> <init pos:line="10" pos:column="36">= <expr><call><name pos:line="10" pos:column="38">getservbyport<pos:position pos:line="10" pos:column="51"/></name><argument_list pos:line="10" pos:column="51">(
				<argument><expr><name pos:line="11" pos:column="33">port<pos:position pos:line="11" pos:column="37"/></name></expr></argument>,
				<argument><expr><ternary><condition><expr><operator pos:line="12" pos:column="33">(<pos:position pos:line="12" pos:column="34"/></operator><name pos:line="12" pos:column="34">flags<pos:position pos:line="12" pos:column="39"/></name> <operator pos:line="12" pos:column="40">&amp;<pos:position pos:line="12" pos:column="45"/></operator> <name pos:line="12" pos:column="42">NI_DGRAM<pos:position pos:line="12" pos:column="50"/></name><operator pos:line="12" pos:column="50">)<pos:position pos:line="12" pos:column="51"/></operator></expr> ?<pos:position pos:line="12" pos:column="53"/></condition><then pos:line="12" pos:column="53"> <expr><literal type="string" pos:line="12" pos:column="54">"udp"<pos:position pos:line="12" pos:column="59"/></literal></expr> <pos:position pos:line="12" pos:column="60"/></then><else pos:line="12" pos:column="60">: <expr><literal type="string" pos:line="12" pos:column="62">"tcp"<pos:position pos:line="12" pos:column="67"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="12" pos:column="68"/></argument_list></call></expr></init></decl>;<pos:position pos:line="12" pos:column="69"/></decl_stmt>
		<if pos:line="13" pos:column="17">if <condition pos:line="13" pos:column="20">(<expr><name pos:line="13" pos:column="21">se<pos:position pos:line="13" pos:column="23"/></name> <operator pos:line="13" pos:column="24">&amp;&amp;<pos:position pos:line="13" pos:column="34"/></operator> <name><name pos:line="13" pos:column="27">se<pos:position pos:line="13" pos:column="29"/></name><operator pos:line="13" pos:column="29">-&gt;<pos:position pos:line="13" pos:column="34"/></operator><name pos:line="13" pos:column="31">s_name<pos:position pos:line="13" pos:column="37"/></name></name></expr>)<pos:position pos:line="13" pos:column="38"/></condition><then pos:line="13" pos:column="38"> <block pos:line="13" pos:column="39">{
			<comment type="block" pos:line="14" pos:column="25">/* Service name looked up successfully. */</comment>
			<expr_stmt><expr><name pos:line="15" pos:column="25">ret<pos:position pos:line="15" pos:column="28"/></name> <operator pos:line="15" pos:column="29">=<pos:position pos:line="15" pos:column="30"/></operator> <call><name pos:line="15" pos:column="31">snprintf<pos:position pos:line="15" pos:column="39"/></name><argument_list pos:line="15" pos:column="39">(<argument><expr><name pos:line="15" pos:column="40">service<pos:position pos:line="15" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="49">servicelen<pos:position pos:line="15" pos:column="59"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="61">"%s"<pos:position pos:line="15" pos:column="65"/></literal></expr></argument>, <argument><expr><name><name pos:line="15" pos:column="67">se<pos:position pos:line="15" pos:column="69"/></name><operator pos:line="15" pos:column="69">-&gt;<pos:position pos:line="15" pos:column="74"/></operator><name pos:line="15" pos:column="71">s_name<pos:position pos:line="15" pos:column="77"/></name></name></expr></argument>)<pos:position pos:line="15" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="79"/></expr_stmt>
			<if pos:line="16" pos:column="25">if <condition pos:line="16" pos:column="28">(<expr><name pos:line="16" pos:column="29">ret<pos:position pos:line="16" pos:column="32"/></name> <operator pos:line="16" pos:column="33">&lt;<pos:position pos:line="16" pos:column="37"/></operator> <literal type="number" pos:line="16" pos:column="35">0<pos:position pos:line="16" pos:column="36"/></literal> <operator pos:line="16" pos:column="37">||<pos:position pos:line="16" pos:column="39"/></operator> <operator pos:line="16" pos:column="40">(<pos:position pos:line="16" pos:column="41"/></operator><name pos:line="16" pos:column="41">size_t<pos:position pos:line="16" pos:column="47"/></name><operator pos:line="16" pos:column="47">)<pos:position pos:line="16" pos:column="48"/></operator><name pos:line="16" pos:column="48">ret<pos:position pos:line="16" pos:column="51"/></name> <operator pos:line="16" pos:column="52">&gt;=<pos:position pos:line="16" pos:column="57"/></operator> <name pos:line="16" pos:column="55">servicelen<pos:position pos:line="16" pos:column="65"/></name></expr>)<pos:position pos:line="16" pos:column="66"/></condition><then pos:line="16" pos:column="66"> <block pos:line="16" pos:column="67">{
				<return pos:line="17" pos:column="33">return <expr><name pos:line="17" pos:column="40">EAI_MEMORY<pos:position pos:line="17" pos:column="50"/></name></expr>;<pos:position pos:line="17" pos:column="51"/></return>
			}<pos:position pos:line="18" pos:column="26"/></block></then></if>
			<return pos:line="19" pos:column="25">return <expr><literal type="number" pos:line="19" pos:column="32">0<pos:position pos:line="19" pos:column="33"/></literal></expr>;<pos:position pos:line="19" pos:column="34"/></return>
		}<pos:position pos:line="20" pos:column="18"/></block></then></if>
		<comment type="block" pos:line="21" pos:column="17">/* Otherwise just fall into the numeric service code... */</comment>
	}<pos:position pos:line="22" pos:column="10"/></block></then></if>
	<expr_stmt><expr><name pos:line="23" pos:column="9">ret<pos:position pos:line="23" pos:column="12"/></name> <operator pos:line="23" pos:column="13">=<pos:position pos:line="23" pos:column="14"/></operator> <call><name pos:line="23" pos:column="15">snprintf<pos:position pos:line="23" pos:column="23"/></name><argument_list pos:line="23" pos:column="23">(<argument><expr><name pos:line="23" pos:column="24">service<pos:position pos:line="23" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="33">servicelen<pos:position pos:line="23" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="23" pos:column="45">"%d"<pos:position pos:line="23" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="23" pos:column="51">port<pos:position pos:line="23" pos:column="55"/></name></expr></argument>)<pos:position pos:line="23" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="57"/></expr_stmt>
	<if pos:line="24" pos:column="9">if <condition pos:line="24" pos:column="12">(<expr><name pos:line="24" pos:column="13">ret<pos:position pos:line="24" pos:column="16"/></name> <operator pos:line="24" pos:column="17">&lt;<pos:position pos:line="24" pos:column="21"/></operator> <literal type="number" pos:line="24" pos:column="19">0<pos:position pos:line="24" pos:column="20"/></literal> <operator pos:line="24" pos:column="21">||<pos:position pos:line="24" pos:column="23"/></operator> <operator pos:line="24" pos:column="24">(<pos:position pos:line="24" pos:column="25"/></operator><name pos:line="24" pos:column="25">size_t<pos:position pos:line="24" pos:column="31"/></name><operator pos:line="24" pos:column="31">)<pos:position pos:line="24" pos:column="32"/></operator><name pos:line="24" pos:column="32">ret<pos:position pos:line="24" pos:column="35"/></name> <operator pos:line="24" pos:column="36">&gt;=<pos:position pos:line="24" pos:column="41"/></operator> <name pos:line="24" pos:column="39">servicelen<pos:position pos:line="24" pos:column="49"/></name></expr>)<pos:position pos:line="24" pos:column="50"/></condition><then pos:line="24" pos:column="50"> <block pos:line="24" pos:column="51">{
		<return pos:line="25" pos:column="17">return <expr><name pos:line="25" pos:column="24">EAI_MEMORY<pos:position pos:line="25" pos:column="34"/></name></expr>;<pos:position pos:line="25" pos:column="35"/></return>
	}<pos:position pos:line="26" pos:column="10"/></block></then></if>
	<return pos:line="27" pos:column="9">return <expr><literal type="number" pos:line="27" pos:column="16">0<pos:position pos:line="27" pos:column="17"/></literal></expr>;<pos:position pos:line="27" pos:column="18"/></return>
}<pos:position pos:line="28" pos:column="2"/></block></function></unit>
