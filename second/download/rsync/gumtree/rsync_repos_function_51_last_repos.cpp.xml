<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_51_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">write_sparse<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name pos:line="1" pos:column="25">int<pos:position pos:line="1" pos:column="28"/></name></type> <name pos:line="1" pos:column="29">f<pos:position pos:line="1" pos:column="30"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="32">char<pos:position pos:line="1" pos:column="36"/></name> <modifier pos:line="1" pos:column="37">*<pos:position pos:line="1" pos:column="38"/></modifier></type><name pos:line="1" pos:column="38">buf<pos:position pos:line="1" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="43">int<pos:position pos:line="1" pos:column="46"/></name></type> <name pos:line="1" pos:column="47">len<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="51"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">l1<pos:position pos:line="3" pos:column="15"/></name> <init pos:line="3" pos:column="16">= <expr><literal type="number" pos:line="3" pos:column="18">0<pos:position pos:line="3" pos:column="19"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="21">l2<pos:position pos:line="3" pos:column="23"/></name> <init pos:line="3" pos:column="24">= <expr><literal type="number" pos:line="3" pos:column="26">0<pos:position pos:line="3" pos:column="27"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">ret<pos:position pos:line="4" pos:column="16"/></name></decl>;<pos:position pos:line="4" pos:column="17"/></decl_stmt>

	<for pos:line="6" pos:column="9">for <control pos:line="6" pos:column="13">(<init><expr><name pos:line="6" pos:column="14">l1<pos:position pos:line="6" pos:column="16"/></name> <operator pos:line="6" pos:column="17">=<pos:position pos:line="6" pos:column="18"/></operator> <literal type="number" pos:line="6" pos:column="19">0<pos:position pos:line="6" pos:column="20"/></literal></expr>;<pos:position pos:line="6" pos:column="21"/></init> <condition><expr><name pos:line="6" pos:column="22">l1<pos:position pos:line="6" pos:column="24"/></name> <operator pos:line="6" pos:column="25">&lt;<pos:position pos:line="6" pos:column="29"/></operator> <name pos:line="6" pos:column="27">len<pos:position pos:line="6" pos:column="30"/></name> <operator pos:line="6" pos:column="31">&amp;&amp;<pos:position pos:line="6" pos:column="41"/></operator> <name><name pos:line="6" pos:column="34">buf<pos:position pos:line="6" pos:column="37"/></name><index pos:line="6" pos:column="37">[<expr><name pos:line="6" pos:column="38">l1<pos:position pos:line="6" pos:column="40"/></name></expr>]<pos:position pos:line="6" pos:column="41"/></index></name> <operator pos:line="6" pos:column="42">==<pos:position pos:line="6" pos:column="44"/></operator> <literal type="number" pos:line="6" pos:column="45">0<pos:position pos:line="6" pos:column="46"/></literal></expr>;<pos:position pos:line="6" pos:column="47"/></condition> <incr><expr><name pos:line="6" pos:column="48">l1<pos:position pos:line="6" pos:column="50"/></name><operator pos:line="6" pos:column="50">++<pos:position pos:line="6" pos:column="52"/></operator></expr></incr>)<pos:position pos:line="6" pos:column="53"/></control> <block pos:line="6" pos:column="54">{}<pos:position pos:line="6" pos:column="56"/></block></for>
	<for pos:line="7" pos:column="9">for <control pos:line="7" pos:column="13">(<init><expr><name pos:line="7" pos:column="14">l2<pos:position pos:line="7" pos:column="16"/></name> <operator pos:line="7" pos:column="17">=<pos:position pos:line="7" pos:column="18"/></operator> <literal type="number" pos:line="7" pos:column="19">0<pos:position pos:line="7" pos:column="20"/></literal></expr>;<pos:position pos:line="7" pos:column="21"/></init> <condition><expr><name pos:line="7" pos:column="22">l2<pos:position pos:line="7" pos:column="24"/></name> <operator pos:line="7" pos:column="25">&lt;<pos:position pos:line="7" pos:column="29"/></operator> <name pos:line="7" pos:column="27">len<pos:position pos:line="7" pos:column="30"/></name><operator pos:line="7" pos:column="30">-<pos:position pos:line="7" pos:column="31"/></operator><name pos:line="7" pos:column="31">l1<pos:position pos:line="7" pos:column="33"/></name> <operator pos:line="7" pos:column="34">&amp;&amp;<pos:position pos:line="7" pos:column="44"/></operator> <name><name pos:line="7" pos:column="37">buf<pos:position pos:line="7" pos:column="40"/></name><index pos:line="7" pos:column="40">[<expr><name pos:line="7" pos:column="41">len<pos:position pos:line="7" pos:column="44"/></name><operator pos:line="7" pos:column="44">-<pos:position pos:line="7" pos:column="45"/></operator><operator pos:line="7" pos:column="45">(<pos:position pos:line="7" pos:column="46"/></operator><name pos:line="7" pos:column="46">l2<pos:position pos:line="7" pos:column="48"/></name><operator pos:line="7" pos:column="48">+<pos:position pos:line="7" pos:column="49"/></operator><literal type="number" pos:line="7" pos:column="49">1<pos:position pos:line="7" pos:column="50"/></literal><operator pos:line="7" pos:column="50">)<pos:position pos:line="7" pos:column="51"/></operator></expr>]<pos:position pos:line="7" pos:column="52"/></index></name> <operator pos:line="7" pos:column="53">==<pos:position pos:line="7" pos:column="55"/></operator> <literal type="number" pos:line="7" pos:column="56">0<pos:position pos:line="7" pos:column="57"/></literal></expr>;<pos:position pos:line="7" pos:column="58"/></condition> <incr><expr><name pos:line="7" pos:column="59">l2<pos:position pos:line="7" pos:column="61"/></name><operator pos:line="7" pos:column="61">++<pos:position pos:line="7" pos:column="63"/></operator></expr></incr>)<pos:position pos:line="7" pos:column="64"/></control> <block pos:line="7" pos:column="65">{}<pos:position pos:line="7" pos:column="67"/></block></for>

	<expr_stmt><expr><name pos:line="9" pos:column="9">sparse_seek<pos:position pos:line="9" pos:column="20"/></name> <operator pos:line="9" pos:column="21">+=<pos:position pos:line="9" pos:column="23"/></operator> <name pos:line="9" pos:column="24">l1<pos:position pos:line="9" pos:column="26"/></name></expr>;<pos:position pos:line="9" pos:column="27"/></expr_stmt>

	<if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><name pos:line="11" pos:column="13">l1<pos:position pos:line="11" pos:column="15"/></name> <operator pos:line="11" pos:column="16">==<pos:position pos:line="11" pos:column="18"/></operator> <name pos:line="11" pos:column="19">len<pos:position pos:line="11" pos:column="22"/></name></expr>)<pos:position pos:line="11" pos:column="23"/></condition><then pos:line="11" pos:column="23">
		<block type="pseudo"><return pos:line="12" pos:column="17">return <expr><name pos:line="12" pos:column="24">len<pos:position pos:line="12" pos:column="27"/></name></expr>;<pos:position pos:line="12" pos:column="28"/></return></block></then></if>

	<if pos:line="14" pos:column="9">if <condition pos:line="14" pos:column="12">(<expr><name pos:line="14" pos:column="13">sparse_seek<pos:position pos:line="14" pos:column="24"/></name></expr>)<pos:position pos:line="14" pos:column="25"/></condition><then pos:line="14" pos:column="25">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="15" pos:column="17">do_lseek<pos:position pos:line="15" pos:column="25"/></name><argument_list pos:line="15" pos:column="25">(<argument><expr><name pos:line="15" pos:column="26">f<pos:position pos:line="15" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="29">sparse_seek<pos:position pos:line="15" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="42">SEEK_CUR<pos:position pos:line="15" pos:column="50"/></name></expr></argument>)<pos:position pos:line="15" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="52"/></expr_stmt></block></then></if>
	<expr_stmt><expr><name pos:line="16" pos:column="9">sparse_seek<pos:position pos:line="16" pos:column="20"/></name> <operator pos:line="16" pos:column="21">=<pos:position pos:line="16" pos:column="22"/></operator> <name pos:line="16" pos:column="23">l2<pos:position pos:line="16" pos:column="25"/></name></expr>;<pos:position pos:line="16" pos:column="26"/></expr_stmt>

	<while pos:line="18" pos:column="9">while <condition pos:line="18" pos:column="15">(<expr><operator pos:line="18" pos:column="16">(<pos:position pos:line="18" pos:column="17"/></operator><name pos:line="18" pos:column="17">ret<pos:position pos:line="18" pos:column="20"/></name> <operator pos:line="18" pos:column="21">=<pos:position pos:line="18" pos:column="22"/></operator> <call><name pos:line="18" pos:column="23">write<pos:position pos:line="18" pos:column="28"/></name><argument_list pos:line="18" pos:column="28">(<argument><expr><name pos:line="18" pos:column="29">f<pos:position pos:line="18" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="32">buf<pos:position pos:line="18" pos:column="35"/></name> <operator pos:line="18" pos:column="36">+<pos:position pos:line="18" pos:column="37"/></operator> <name pos:line="18" pos:column="38">l1<pos:position pos:line="18" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="42">len<pos:position pos:line="18" pos:column="45"/></name> <operator pos:line="18" pos:column="46">-<pos:position pos:line="18" pos:column="47"/></operator> <operator pos:line="18" pos:column="48">(<pos:position pos:line="18" pos:column="49"/></operator><name pos:line="18" pos:column="49">l1<pos:position pos:line="18" pos:column="51"/></name><operator pos:line="18" pos:column="51">+<pos:position pos:line="18" pos:column="52"/></operator><name pos:line="18" pos:column="52">l2<pos:position pos:line="18" pos:column="54"/></name><operator pos:line="18" pos:column="54">)<pos:position pos:line="18" pos:column="55"/></operator></expr></argument>)<pos:position pos:line="18" pos:column="56"/></argument_list></call><operator pos:line="18" pos:column="56">)<pos:position pos:line="18" pos:column="57"/></operator> <operator pos:line="18" pos:column="58">&lt;=<pos:position pos:line="18" pos:column="63"/></operator> <literal type="number" pos:line="18" pos:column="61">0<pos:position pos:line="18" pos:column="62"/></literal></expr>)<pos:position pos:line="18" pos:column="63"/></condition> <block pos:line="18" pos:column="64">{
		<if pos:line="19" pos:column="17">if <condition pos:line="19" pos:column="20">(<expr><name pos:line="19" pos:column="21">ret<pos:position pos:line="19" pos:column="24"/></name> <operator pos:line="19" pos:column="25">&lt;<pos:position pos:line="19" pos:column="29"/></operator> <literal type="number" pos:line="19" pos:column="27">0<pos:position pos:line="19" pos:column="28"/></literal> <operator pos:line="19" pos:column="29">&amp;&amp;<pos:position pos:line="19" pos:column="39"/></operator> <name pos:line="19" pos:column="32">errno<pos:position pos:line="19" pos:column="37"/></name> <operator pos:line="19" pos:column="38">==<pos:position pos:line="19" pos:column="40"/></operator> <name pos:line="19" pos:column="41">EINTR<pos:position pos:line="19" pos:column="46"/></name></expr>)<pos:position pos:line="19" pos:column="47"/></condition><then pos:line="19" pos:column="47">
			<block type="pseudo"><continue pos:line="20" pos:column="25">continue;<pos:position pos:line="20" pos:column="34"/></continue></block></then></if>
		<expr_stmt><expr><name pos:line="21" pos:column="17">sparse_seek<pos:position pos:line="21" pos:column="28"/></name> <operator pos:line="21" pos:column="29">=<pos:position pos:line="21" pos:column="30"/></operator> <literal type="number" pos:line="21" pos:column="31">0<pos:position pos:line="21" pos:column="32"/></literal></expr>;<pos:position pos:line="21" pos:column="33"/></expr_stmt>
		<return pos:line="22" pos:column="17">return <expr><name pos:line="22" pos:column="24">ret<pos:position pos:line="22" pos:column="27"/></name></expr>;<pos:position pos:line="22" pos:column="28"/></return>
	}<pos:position pos:line="23" pos:column="10"/></block></while>

	<if pos:line="25" pos:column="9">if <condition pos:line="25" pos:column="12">(<expr><name pos:line="25" pos:column="13">ret<pos:position pos:line="25" pos:column="16"/></name> <operator pos:line="25" pos:column="17">!=<pos:position pos:line="25" pos:column="19"/></operator> <call pos:line="25" pos:column="20">(<name pos:line="25" pos:column="21">int<pos:position pos:line="25" pos:column="24"/></name>)<argument_list pos:line="25" pos:column="25">(<argument><expr><name pos:line="25" pos:column="26">len<pos:position pos:line="25" pos:column="29"/></name> <operator pos:line="25" pos:column="30">-<pos:position pos:line="25" pos:column="31"/></operator> <operator pos:line="25" pos:column="32">(<pos:position pos:line="25" pos:column="33"/></operator><name pos:line="25" pos:column="33">l1<pos:position pos:line="25" pos:column="35"/></name><operator pos:line="25" pos:column="35">+<pos:position pos:line="25" pos:column="36"/></operator><name pos:line="25" pos:column="36">l2<pos:position pos:line="25" pos:column="38"/></name><operator pos:line="25" pos:column="38">)<pos:position pos:line="25" pos:column="39"/></operator></expr></argument>)<pos:position pos:line="25" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="25" pos:column="41"/></condition><then pos:line="25" pos:column="41"> <block pos:line="25" pos:column="42">{
		<expr_stmt><expr><name pos:line="26" pos:column="17">sparse_seek<pos:position pos:line="26" pos:column="28"/></name> <operator pos:line="26" pos:column="29">=<pos:position pos:line="26" pos:column="30"/></operator> <literal type="number" pos:line="26" pos:column="31">0<pos:position pos:line="26" pos:column="32"/></literal></expr>;<pos:position pos:line="26" pos:column="33"/></expr_stmt>
		<return pos:line="27" pos:column="17">return <expr><name pos:line="27" pos:column="24">l1<pos:position pos:line="27" pos:column="26"/></name><operator pos:line="27" pos:column="26">+<pos:position pos:line="27" pos:column="27"/></operator><name pos:line="27" pos:column="27">ret<pos:position pos:line="27" pos:column="30"/></name></expr>;<pos:position pos:line="27" pos:column="31"/></return>
	}<pos:position pos:line="28" pos:column="10"/></block></then></if>

	<return pos:line="30" pos:column="9">return <expr><name pos:line="30" pos:column="16">len<pos:position pos:line="30" pos:column="19"/></name></expr>;<pos:position pos:line="30" pos:column="20"/></return>
}<pos:position pos:line="31" pos:column="2"/></block></function></unit>
