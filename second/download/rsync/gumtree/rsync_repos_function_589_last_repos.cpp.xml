<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_589_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">do_server_sender<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name pos:line="1" pos:column="30">int<pos:position pos:line="1" pos:column="33"/></name></type> <name pos:line="1" pos:column="34">f_in<pos:position pos:line="1" pos:column="38"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="40">int<pos:position pos:line="1" pos:column="43"/></name></type> <name pos:line="1" pos:column="44">f_out<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="51">int<pos:position pos:line="1" pos:column="54"/></name></type> <name pos:line="1" pos:column="55">argc<pos:position pos:line="1" pos:column="59"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="61">char<pos:position pos:line="1" pos:column="65"/></name> <modifier pos:line="1" pos:column="66">*<pos:position pos:line="1" pos:column="67"/></modifier></type><name><name pos:line="1" pos:column="67">argv<pos:position pos:line="1" pos:column="71"/></name><index pos:line="1" pos:column="71">[]<pos:position pos:line="1" pos:column="73"/></index></name></decl></parameter>)<pos:position pos:line="1" pos:column="74"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">file_list<pos:position pos:line="3" pos:column="25"/></name></name> <modifier pos:line="3" pos:column="26">*<pos:position pos:line="3" pos:column="27"/></modifier></type><name pos:line="3" pos:column="27">flist<pos:position pos:line="3" pos:column="32"/></name></decl>;<pos:position pos:line="3" pos:column="33"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier></type><name pos:line="4" pos:column="15">dir<pos:position pos:line="4" pos:column="18"/></name> <init pos:line="4" pos:column="19">= <expr><name><name pos:line="4" pos:column="21">argv<pos:position pos:line="4" pos:column="25"/></name><index pos:line="4" pos:column="25">[<expr><literal type="number" pos:line="4" pos:column="26">0<pos:position pos:line="4" pos:column="27"/></literal></expr>]<pos:position pos:line="4" pos:column="28"/></index></name></expr></init></decl>;<pos:position pos:line="4" pos:column="29"/></decl_stmt>

	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><call><name pos:line="6" pos:column="13">DEBUG_GTE<pos:position pos:line="6" pos:column="22"/></name><argument_list pos:line="6" pos:column="22">(<argument><expr><name pos:line="6" pos:column="23">SEND<pos:position pos:line="6" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="6" pos:column="29">1<pos:position pos:line="6" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="31"/></argument_list></call></expr>)<pos:position pos:line="6" pos:column="32"/></condition><then pos:line="6" pos:column="32">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="7" pos:column="17">rprintf<pos:position pos:line="7" pos:column="24"/></name><argument_list pos:line="7" pos:column="24">(<argument><expr><name pos:line="7" pos:column="25">FINFO<pos:position pos:line="7" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="7" pos:column="32">"server_sender starting pid=%d\n"<pos:position pos:line="7" pos:column="65"/></literal></expr></argument>, <argument><expr><operator pos:line="7" pos:column="67">(<pos:position pos:line="7" pos:column="68"/></operator><name pos:line="7" pos:column="68">int<pos:position pos:line="7" pos:column="71"/></name><operator pos:line="7" pos:column="71">)<pos:position pos:line="7" pos:column="72"/></operator><call><name pos:line="7" pos:column="72">getpid<pos:position pos:line="7" pos:column="78"/></name><argument_list pos:line="7" pos:column="78">()<pos:position pos:line="7" pos:column="80"/></argument_list></call></expr></argument>)<pos:position pos:line="7" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="82"/></expr_stmt></block></then></if>

	<if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><name pos:line="9" pos:column="13">am_daemon<pos:position pos:line="9" pos:column="22"/></name> <operator pos:line="9" pos:column="23">&amp;&amp;<pos:position pos:line="9" pos:column="33"/></operator> <call><name pos:line="9" pos:column="26">lp_write_only<pos:position pos:line="9" pos:column="39"/></name><argument_list pos:line="9" pos:column="39">(<argument><expr><name pos:line="9" pos:column="40">module_id<pos:position pos:line="9" pos:column="49"/></name></expr></argument>)<pos:position pos:line="9" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="9" pos:column="51"/></condition><then pos:line="9" pos:column="51"> <block pos:line="9" pos:column="52">{
		<expr_stmt><expr><call><name pos:line="10" pos:column="17">rprintf<pos:position pos:line="10" pos:column="24"/></name><argument_list pos:line="10" pos:column="24">(<argument><expr><name pos:line="10" pos:column="25">FERROR<pos:position pos:line="10" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="10" pos:column="33">"ERROR: module is write only\n"<pos:position pos:line="10" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="66"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="11" pos:column="17">exit_cleanup<pos:position pos:line="11" pos:column="29"/></name><argument_list pos:line="11" pos:column="29">(<argument><expr><name pos:line="11" pos:column="30">RERR_SYNTAX<pos:position pos:line="11" pos:column="41"/></name></expr></argument>)<pos:position pos:line="11" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="43"/></expr_stmt>
		<return pos:line="12" pos:column="17">return;<pos:position pos:line="12" pos:column="24"/></return>
	}<pos:position pos:line="13" pos:column="10"/></block></then></if>
	<if pos:line="14" pos:column="9">if <condition pos:line="14" pos:column="12">(<expr><name pos:line="14" pos:column="13">am_daemon<pos:position pos:line="14" pos:column="22"/></name> <operator pos:line="14" pos:column="23">&amp;&amp;<pos:position pos:line="14" pos:column="33"/></operator> <name pos:line="14" pos:column="26">read_only<pos:position pos:line="14" pos:column="35"/></name> <operator pos:line="14" pos:column="36">&amp;&amp;<pos:position pos:line="14" pos:column="46"/></operator> <name pos:line="14" pos:column="39">remove_source_files<pos:position pos:line="14" pos:column="58"/></name></expr>)<pos:position pos:line="14" pos:column="59"/></condition><then pos:line="14" pos:column="59"> <block pos:line="14" pos:column="60">{
		<expr_stmt><expr><call><name pos:line="15" pos:column="17">rprintf<pos:position pos:line="15" pos:column="24"/></name><argument_list pos:line="15" pos:column="24">(<argument><expr><name pos:line="15" pos:column="25">FERROR<pos:position pos:line="15" pos:column="31"/></name></expr></argument>,
		    <argument><expr><literal type="string" pos:line="16" pos:column="21">"ERROR: --remove-%s-files cannot be used with a read-only module\n"<pos:position pos:line="16" pos:column="88"/></literal></expr></argument>,
		    <argument><expr><ternary><condition><expr><name pos:line="17" pos:column="21">remove_source_files<pos:position pos:line="17" pos:column="40"/></name> <operator pos:line="17" pos:column="41">==<pos:position pos:line="17" pos:column="43"/></operator> <literal type="number" pos:line="17" pos:column="44">1<pos:position pos:line="17" pos:column="45"/></literal></expr> ?<pos:position pos:line="17" pos:column="47"/></condition><then pos:line="17" pos:column="47"> <expr><literal type="string" pos:line="17" pos:column="48">"source"<pos:position pos:line="17" pos:column="56"/></literal></expr> <pos:position pos:line="17" pos:column="57"/></then><else pos:line="17" pos:column="57">: <expr><literal type="string" pos:line="17" pos:column="59">"sent"<pos:position pos:line="17" pos:column="65"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="17" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="67"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="18" pos:column="17">exit_cleanup<pos:position pos:line="18" pos:column="29"/></name><argument_list pos:line="18" pos:column="29">(<argument><expr><name pos:line="18" pos:column="30">RERR_SYNTAX<pos:position pos:line="18" pos:column="41"/></name></expr></argument>)<pos:position pos:line="18" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="43"/></expr_stmt>
		<return pos:line="19" pos:column="17">return;<pos:position pos:line="19" pos:column="24"/></return>
	}<pos:position pos:line="20" pos:column="10"/></block></then></if>

	<if pos:line="22" pos:column="9">if <condition pos:line="22" pos:column="12">(<expr><operator pos:line="22" pos:column="13">!<pos:position pos:line="22" pos:column="14"/></operator><name pos:line="22" pos:column="14">relative_paths<pos:position pos:line="22" pos:column="28"/></name></expr>)<pos:position pos:line="22" pos:column="29"/></condition><then pos:line="22" pos:column="29"> <block pos:line="22" pos:column="30">{
		<if pos:line="23" pos:column="17">if <condition pos:line="23" pos:column="20">(<expr><operator pos:line="23" pos:column="21">!<pos:position pos:line="23" pos:column="22"/></operator><call><name pos:line="23" pos:column="22">change_dir<pos:position pos:line="23" pos:column="32"/></name><argument_list pos:line="23" pos:column="32">(<argument><expr><name pos:line="23" pos:column="33">dir<pos:position pos:line="23" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="38">CD_NORMAL<pos:position pos:line="23" pos:column="47"/></name></expr></argument>)<pos:position pos:line="23" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="23" pos:column="49"/></condition><then pos:line="23" pos:column="49"> <block pos:line="23" pos:column="50">{
			<expr_stmt><expr><call><name pos:line="24" pos:column="25">rsyserr<pos:position pos:line="24" pos:column="32"/></name><argument_list pos:line="24" pos:column="32">(<argument><expr><name pos:line="24" pos:column="33">FERROR<pos:position pos:line="24" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="41">errno<pos:position pos:line="24" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="24" pos:column="48">"change_dir#3 %s failed"<pos:position pos:line="24" pos:column="72"/></literal></expr></argument>,
				<argument><expr><call><name pos:line="25" pos:column="33">full_fname<pos:position pos:line="25" pos:column="43"/></name><argument_list pos:line="25" pos:column="43">(<argument><expr><name pos:line="25" pos:column="44">dir<pos:position pos:line="25" pos:column="47"/></name></expr></argument>)<pos:position pos:line="25" pos:column="48"/></argument_list></call></expr></argument>)<pos:position pos:line="25" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="50"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="26" pos:column="25">exit_cleanup<pos:position pos:line="26" pos:column="37"/></name><argument_list pos:line="26" pos:column="37">(<argument><expr><name pos:line="26" pos:column="38">RERR_FILESELECT<pos:position pos:line="26" pos:column="53"/></name></expr></argument>)<pos:position pos:line="26" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="55"/></expr_stmt>
		}<pos:position pos:line="27" pos:column="18"/></block></then></if>
	}<pos:position pos:line="28" pos:column="10"/></block></then></if>
	<expr_stmt><expr><name pos:line="29" pos:column="9">argc<pos:position pos:line="29" pos:column="13"/></name><operator pos:line="29" pos:column="13">--<pos:position pos:line="29" pos:column="15"/></operator></expr>;<pos:position pos:line="29" pos:column="16"/></expr_stmt>
	<expr_stmt><expr><name pos:line="30" pos:column="9">argv<pos:position pos:line="30" pos:column="13"/></name><operator pos:line="30" pos:column="13">++<pos:position pos:line="30" pos:column="15"/></operator></expr>;<pos:position pos:line="30" pos:column="16"/></expr_stmt>

	<if pos:line="32" pos:column="9">if <condition pos:line="32" pos:column="12">(<expr><name pos:line="32" pos:column="13">argc<pos:position pos:line="32" pos:column="17"/></name> <operator pos:line="32" pos:column="18">==<pos:position pos:line="32" pos:column="20"/></operator> <literal type="number" pos:line="32" pos:column="21">0<pos:position pos:line="32" pos:column="22"/></literal> <operator pos:line="32" pos:column="23">&amp;&amp;<pos:position pos:line="32" pos:column="33"/></operator> <operator pos:line="32" pos:column="26">(<pos:position pos:line="32" pos:column="27"/></operator><name pos:line="32" pos:column="27">recurse<pos:position pos:line="32" pos:column="34"/></name> <operator pos:line="32" pos:column="35">||<pos:position pos:line="32" pos:column="37"/></operator> <name pos:line="32" pos:column="38">xfer_dirs<pos:position pos:line="32" pos:column="47"/></name> <operator pos:line="32" pos:column="48">||<pos:position pos:line="32" pos:column="50"/></operator> <name pos:line="32" pos:column="51">list_only<pos:position pos:line="32" pos:column="60"/></name><operator pos:line="32" pos:column="60">)<pos:position pos:line="32" pos:column="61"/></operator></expr>)<pos:position pos:line="32" pos:column="62"/></condition><then pos:line="32" pos:column="62"> <block pos:line="32" pos:column="63">{
		<expr_stmt><expr><name pos:line="33" pos:column="17">argc<pos:position pos:line="33" pos:column="21"/></name> <operator pos:line="33" pos:column="22">=<pos:position pos:line="33" pos:column="23"/></operator> <literal type="number" pos:line="33" pos:column="24">1<pos:position pos:line="33" pos:column="25"/></literal></expr>;<pos:position pos:line="33" pos:column="26"/></expr_stmt>
		<expr_stmt><expr><name pos:line="34" pos:column="17">argv<pos:position pos:line="34" pos:column="21"/></name><operator pos:line="34" pos:column="21">--<pos:position pos:line="34" pos:column="23"/></operator></expr>;<pos:position pos:line="34" pos:column="24"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="35" pos:column="17">argv<pos:position pos:line="35" pos:column="21"/></name><index pos:line="35" pos:column="21">[<expr><literal type="number" pos:line="35" pos:column="22">0<pos:position pos:line="35" pos:column="23"/></literal></expr>]<pos:position pos:line="35" pos:column="24"/></index></name> <operator pos:line="35" pos:column="25">=<pos:position pos:line="35" pos:column="26"/></operator> <literal type="string" pos:line="35" pos:column="27">"."<pos:position pos:line="35" pos:column="30"/></literal></expr>;<pos:position pos:line="35" pos:column="31"/></expr_stmt>
	}<pos:position pos:line="36" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="38" pos:column="9">flist<pos:position pos:line="38" pos:column="14"/></name> <operator pos:line="38" pos:column="15">=<pos:position pos:line="38" pos:column="16"/></operator> <call><name pos:line="38" pos:column="17">send_file_list<pos:position pos:line="38" pos:column="31"/></name><argument_list pos:line="38" pos:column="31">(<argument><expr><name pos:line="38" pos:column="32">f_out<pos:position pos:line="38" pos:column="37"/></name></expr></argument>,<argument><expr><name pos:line="38" pos:column="38">argc<pos:position pos:line="38" pos:column="42"/></name></expr></argument>,<argument><expr><name pos:line="38" pos:column="43">argv<pos:position pos:line="38" pos:column="47"/></name></expr></argument>)<pos:position pos:line="38" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="49"/></expr_stmt>
	<if pos:line="39" pos:column="9">if <condition pos:line="39" pos:column="12">(<expr><operator pos:line="39" pos:column="13">!<pos:position pos:line="39" pos:column="14"/></operator><name pos:line="39" pos:column="14">flist<pos:position pos:line="39" pos:column="19"/></name> <operator pos:line="39" pos:column="20">||<pos:position pos:line="39" pos:column="22"/></operator> <name><name pos:line="39" pos:column="23">flist<pos:position pos:line="39" pos:column="28"/></name><operator pos:line="39" pos:column="28">-&gt;<pos:position pos:line="39" pos:column="33"/></operator><name pos:line="39" pos:column="30">used<pos:position pos:line="39" pos:column="34"/></name></name> <operator pos:line="39" pos:column="35">==<pos:position pos:line="39" pos:column="37"/></operator> <literal type="number" pos:line="39" pos:column="38">0<pos:position pos:line="39" pos:column="39"/></literal></expr>)<pos:position pos:line="39" pos:column="40"/></condition><then pos:line="39" pos:column="40"> <block pos:line="39" pos:column="41">{
		<comment type="block" pos:line="40" pos:column="17">/* Make sure input buffering is off so we can't hang in noop_io_until_death(). */</comment>
		<expr_stmt><expr><call><name pos:line="41" pos:column="17">io_end_buffering_in<pos:position pos:line="41" pos:column="36"/></name><argument_list pos:line="41" pos:column="36">(<argument><expr><literal type="number" pos:line="41" pos:column="37">0<pos:position pos:line="41" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="40"/></expr_stmt>
		<comment type="block" pos:line="42" pos:column="17">/* TODO:  we should really exit in a more controlled manner. */</comment>
		<expr_stmt><expr><call><name pos:line="43" pos:column="17">exit_cleanup<pos:position pos:line="43" pos:column="29"/></name><argument_list pos:line="43" pos:column="29">(<argument><expr><literal type="number" pos:line="43" pos:column="30">0<pos:position pos:line="43" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="33"/></expr_stmt>
	}<pos:position pos:line="44" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="46" pos:column="9">io_start_buffering_in<pos:position pos:line="46" pos:column="30"/></name><argument_list pos:line="46" pos:column="30">(<argument><expr><name pos:line="46" pos:column="31">f_in<pos:position pos:line="46" pos:column="35"/></name></expr></argument>)<pos:position pos:line="46" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="37"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="48" pos:column="9">send_files<pos:position pos:line="48" pos:column="19"/></name><argument_list pos:line="48" pos:column="19">(<argument><expr><name pos:line="48" pos:column="20">f_in<pos:position pos:line="48" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="26">f_out<pos:position pos:line="48" pos:column="31"/></name></expr></argument>)<pos:position pos:line="48" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="33"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="49" pos:column="9">io_flush<pos:position pos:line="49" pos:column="17"/></name><argument_list pos:line="49" pos:column="17">(<argument><expr><name pos:line="49" pos:column="18">FULL_FLUSH<pos:position pos:line="49" pos:column="28"/></name></expr></argument>)<pos:position pos:line="49" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="30"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="50" pos:column="9">handle_stats<pos:position pos:line="50" pos:column="21"/></name><argument_list pos:line="50" pos:column="21">(<argument><expr><name pos:line="50" pos:column="22">f_out<pos:position pos:line="50" pos:column="27"/></name></expr></argument>)<pos:position pos:line="50" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="29"/></expr_stmt>
	<if pos:line="51" pos:column="9">if <condition pos:line="51" pos:column="12">(<expr><name pos:line="51" pos:column="13">protocol_version<pos:position pos:line="51" pos:column="29"/></name> <operator pos:line="51" pos:column="30">&gt;=<pos:position pos:line="51" pos:column="35"/></operator> <literal type="number" pos:line="51" pos:column="33">24<pos:position pos:line="51" pos:column="35"/></literal></expr>)<pos:position pos:line="51" pos:column="36"/></condition><then pos:line="51" pos:column="36">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="52" pos:column="17">read_final_goodbye<pos:position pos:line="52" pos:column="35"/></name><argument_list pos:line="52" pos:column="35">(<argument><expr><name pos:line="52" pos:column="36">f_in<pos:position pos:line="52" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="42">f_out<pos:position pos:line="52" pos:column="47"/></name></expr></argument>)<pos:position pos:line="52" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="49"/></expr_stmt></block></then></if>
	<expr_stmt><expr><call><name pos:line="53" pos:column="9">io_flush<pos:position pos:line="53" pos:column="17"/></name><argument_list pos:line="53" pos:column="17">(<argument><expr><name pos:line="53" pos:column="18">FULL_FLUSH<pos:position pos:line="53" pos:column="28"/></name></expr></argument>)<pos:position pos:line="53" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="30"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="54" pos:column="9">exit_cleanup<pos:position pos:line="54" pos:column="21"/></name><argument_list pos:line="54" pos:column="21">(<argument><expr><literal type="number" pos:line="54" pos:column="22">0<pos:position pos:line="54" pos:column="23"/></literal></expr></argument>)<pos:position pos:line="54" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="25"/></expr_stmt>
}<pos:position pos:line="55" pos:column="2"/></block></function></unit>
