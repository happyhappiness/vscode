<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_55_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">char<pos:position pos:line="1" pos:column="5"/></name> <modifier pos:line="1" pos:column="6">*<pos:position pos:line="1" pos:column="7"/></modifier></type><name pos:line="1" pos:column="7">map_ptr<pos:position pos:line="1" pos:column="14"/></name><parameter_list pos:line="1" pos:column="14">(<parameter><decl><type><name><name pos:line="1" pos:column="15">struct<pos:position pos:line="1" pos:column="21"/></name> <name pos:line="1" pos:column="22">map_struct<pos:position pos:line="1" pos:column="32"/></name></name> <modifier pos:line="1" pos:column="33">*<pos:position pos:line="1" pos:column="34"/></modifier></type><name pos:line="1" pos:column="34">map<pos:position pos:line="1" pos:column="37"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="39">OFF_T<pos:position pos:line="1" pos:column="44"/></name></type> <name pos:line="1" pos:column="45">offset<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="53">int32<pos:position pos:line="1" pos:column="58"/></name></type> <name pos:line="1" pos:column="59">len<pos:position pos:line="1" pos:column="62"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="63"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">OFF_T<pos:position pos:line="3" pos:column="14"/></name></type> <name pos:line="3" pos:column="15">window_start<pos:position pos:line="3" pos:column="27"/></name></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="29">read_start<pos:position pos:line="3" pos:column="39"/></name></decl>;<pos:position pos:line="3" pos:column="40"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int32<pos:position pos:line="4" pos:column="14"/></name></type> <name pos:line="4" pos:column="15">window_size<pos:position pos:line="4" pos:column="26"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="28">read_size<pos:position pos:line="4" pos:column="37"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="39">read_offset<pos:position pos:line="4" pos:column="50"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="52">align_fudge<pos:position pos:line="4" pos:column="63"/></name></decl>;<pos:position pos:line="4" pos:column="64"/></decl_stmt>

	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><name pos:line="6" pos:column="13">len<pos:position pos:line="6" pos:column="16"/></name> <operator pos:line="6" pos:column="17">==<pos:position pos:line="6" pos:column="19"/></operator> <literal type="number" pos:line="6" pos:column="20">0<pos:position pos:line="6" pos:column="21"/></literal></expr>)<pos:position pos:line="6" pos:column="22"/></condition><then pos:line="6" pos:column="22">
		<block type="pseudo"><return pos:line="7" pos:column="17">return <expr><name pos:line="7" pos:column="24">NULL<pos:position pos:line="7" pos:column="28"/></name></expr>;<pos:position pos:line="7" pos:column="29"/></return></block></then></if>
	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><name pos:line="8" pos:column="13">len<pos:position pos:line="8" pos:column="16"/></name> <operator pos:line="8" pos:column="17">&lt;<pos:position pos:line="8" pos:column="21"/></operator> <literal type="number" pos:line="8" pos:column="19">0<pos:position pos:line="8" pos:column="20"/></literal></expr>)<pos:position pos:line="8" pos:column="21"/></condition><then pos:line="8" pos:column="21"> <block pos:line="8" pos:column="22">{
		<expr_stmt><expr><call><name pos:line="9" pos:column="17">rprintf<pos:position pos:line="9" pos:column="24"/></name><argument_list pos:line="9" pos:column="24">(<argument><expr><name pos:line="9" pos:column="25">FERROR<pos:position pos:line="9" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="9" pos:column="33">"invalid len passed to map_ptr: %ld\n"<pos:position pos:line="9" pos:column="71"/></literal></expr></argument>,
			<argument><expr><operator pos:line="10" pos:column="25">(<pos:position pos:line="10" pos:column="26"/></operator><name pos:line="10" pos:column="26">long<pos:position pos:line="10" pos:column="30"/></name><operator pos:line="10" pos:column="30">)<pos:position pos:line="10" pos:column="31"/></operator><name pos:line="10" pos:column="31">len<pos:position pos:line="10" pos:column="34"/></name></expr></argument>)<pos:position pos:line="10" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="36"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="11" pos:column="17">exit_cleanup<pos:position pos:line="11" pos:column="29"/></name><argument_list pos:line="11" pos:column="29">(<argument><expr><name pos:line="11" pos:column="30">RERR_FILEIO<pos:position pos:line="11" pos:column="41"/></name></expr></argument>)<pos:position pos:line="11" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="43"/></expr_stmt>
	}<pos:position pos:line="12" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="14" pos:column="9">/* in most cases the region will already be available */</comment>
	<if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><name pos:line="15" pos:column="13">offset<pos:position pos:line="15" pos:column="19"/></name> <operator pos:line="15" pos:column="20">&gt;=<pos:position pos:line="15" pos:column="25"/></operator> <name><name pos:line="15" pos:column="23">map<pos:position pos:line="15" pos:column="26"/></name><operator pos:line="15" pos:column="26">-&gt;<pos:position pos:line="15" pos:column="31"/></operator><name pos:line="15" pos:column="28">p_offset<pos:position pos:line="15" pos:column="36"/></name></name> <operator pos:line="15" pos:column="37">&amp;&amp;<pos:position pos:line="15" pos:column="47"/></operator> <name pos:line="15" pos:column="40">offset<pos:position pos:line="15" pos:column="46"/></name><operator pos:line="15" pos:column="46">+<pos:position pos:line="15" pos:column="47"/></operator><name pos:line="15" pos:column="47">len<pos:position pos:line="15" pos:column="50"/></name> <operator pos:line="15" pos:column="51">&lt;=<pos:position pos:line="15" pos:column="56"/></operator> <name><name pos:line="15" pos:column="54">map<pos:position pos:line="15" pos:column="57"/></name><operator pos:line="15" pos:column="57">-&gt;<pos:position pos:line="15" pos:column="62"/></operator><name pos:line="15" pos:column="59">p_offset<pos:position pos:line="15" pos:column="67"/></name></name><operator pos:line="15" pos:column="67">+<pos:position pos:line="15" pos:column="68"/></operator><name><name pos:line="15" pos:column="68">map<pos:position pos:line="15" pos:column="71"/></name><operator pos:line="15" pos:column="71">-&gt;<pos:position pos:line="15" pos:column="76"/></operator><name pos:line="15" pos:column="73">p_len<pos:position pos:line="15" pos:column="78"/></name></name></expr>)<pos:position pos:line="15" pos:column="79"/></condition><then pos:line="15" pos:column="79">
		<block type="pseudo"><return pos:line="16" pos:column="17">return <expr><name><name pos:line="16" pos:column="24">map<pos:position pos:line="16" pos:column="27"/></name><operator pos:line="16" pos:column="27">-&gt;<pos:position pos:line="16" pos:column="32"/></operator><name pos:line="16" pos:column="29">p<pos:position pos:line="16" pos:column="30"/></name></name> <operator pos:line="16" pos:column="31">+<pos:position pos:line="16" pos:column="32"/></operator> <operator pos:line="16" pos:column="33">(<pos:position pos:line="16" pos:column="34"/></operator><name pos:line="16" pos:column="34">offset<pos:position pos:line="16" pos:column="40"/></name> <operator pos:line="16" pos:column="41">-<pos:position pos:line="16" pos:column="42"/></operator> <name><name pos:line="16" pos:column="43">map<pos:position pos:line="16" pos:column="46"/></name><operator pos:line="16" pos:column="46">-&gt;<pos:position pos:line="16" pos:column="51"/></operator><name pos:line="16" pos:column="48">p_offset<pos:position pos:line="16" pos:column="56"/></name></name><operator pos:line="16" pos:column="56">)<pos:position pos:line="16" pos:column="57"/></operator></expr>;<pos:position pos:line="16" pos:column="58"/></return></block></then></if>

	<comment type="block" pos:line="18" pos:column="9">/* nope, we are going to have to do a read. Work out our desired window */</comment>
	<expr_stmt><expr><name pos:line="19" pos:column="9">align_fudge<pos:position pos:line="19" pos:column="20"/></name> <operator pos:line="19" pos:column="21">=<pos:position pos:line="19" pos:column="22"/></operator> <operator pos:line="19" pos:column="23">(<pos:position pos:line="19" pos:column="24"/></operator><name pos:line="19" pos:column="24">int32<pos:position pos:line="19" pos:column="29"/></name><operator pos:line="19" pos:column="29">)<pos:position pos:line="19" pos:column="30"/></operator><call><name pos:line="19" pos:column="30">ALIGNED_OVERSHOOT<pos:position pos:line="19" pos:column="47"/></name><argument_list pos:line="19" pos:column="47">(<argument><expr><name pos:line="19" pos:column="48">offset<pos:position pos:line="19" pos:column="54"/></name></expr></argument>)<pos:position pos:line="19" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="56"/></expr_stmt>
	<expr_stmt><expr><name pos:line="20" pos:column="9">window_start<pos:position pos:line="20" pos:column="21"/></name> <operator pos:line="20" pos:column="22">=<pos:position pos:line="20" pos:column="23"/></operator> <name pos:line="20" pos:column="24">offset<pos:position pos:line="20" pos:column="30"/></name> <operator pos:line="20" pos:column="31">-<pos:position pos:line="20" pos:column="32"/></operator> <name pos:line="20" pos:column="33">align_fudge<pos:position pos:line="20" pos:column="44"/></name></expr>;<pos:position pos:line="20" pos:column="45"/></expr_stmt>
	<expr_stmt><expr><name pos:line="21" pos:column="9">window_size<pos:position pos:line="21" pos:column="20"/></name> <operator pos:line="21" pos:column="21">=<pos:position pos:line="21" pos:column="22"/></operator> <name><name pos:line="21" pos:column="23">map<pos:position pos:line="21" pos:column="26"/></name><operator pos:line="21" pos:column="26">-&gt;<pos:position pos:line="21" pos:column="31"/></operator><name pos:line="21" pos:column="28">def_window_size<pos:position pos:line="21" pos:column="43"/></name></name></expr>;<pos:position pos:line="21" pos:column="44"/></expr_stmt>
	<if pos:line="22" pos:column="9">if <condition pos:line="22" pos:column="12">(<expr><name pos:line="22" pos:column="13">window_start<pos:position pos:line="22" pos:column="25"/></name> <operator pos:line="22" pos:column="26">+<pos:position pos:line="22" pos:column="27"/></operator> <name pos:line="22" pos:column="28">window_size<pos:position pos:line="22" pos:column="39"/></name> <operator pos:line="22" pos:column="40">&gt;<pos:position pos:line="22" pos:column="44"/></operator> <name><name pos:line="22" pos:column="42">map<pos:position pos:line="22" pos:column="45"/></name><operator pos:line="22" pos:column="45">-&gt;<pos:position pos:line="22" pos:column="50"/></operator><name pos:line="22" pos:column="47">file_size<pos:position pos:line="22" pos:column="56"/></name></name></expr>)<pos:position pos:line="22" pos:column="57"/></condition><then pos:line="22" pos:column="57">
		<block type="pseudo"><expr_stmt><expr><name pos:line="23" pos:column="17">window_size<pos:position pos:line="23" pos:column="28"/></name> <operator pos:line="23" pos:column="29">=<pos:position pos:line="23" pos:column="30"/></operator> <call pos:line="23" pos:column="31">(<name pos:line="23" pos:column="32">int32<pos:position pos:line="23" pos:column="37"/></name>)<argument_list pos:line="23" pos:column="38">(<argument><expr><name><name pos:line="23" pos:column="39">map<pos:position pos:line="23" pos:column="42"/></name><operator pos:line="23" pos:column="42">-&gt;<pos:position pos:line="23" pos:column="47"/></operator><name pos:line="23" pos:column="44">file_size<pos:position pos:line="23" pos:column="53"/></name></name> <operator pos:line="23" pos:column="54">-<pos:position pos:line="23" pos:column="55"/></operator> <name pos:line="23" pos:column="56">window_start<pos:position pos:line="23" pos:column="68"/></name></expr></argument>)<pos:position pos:line="23" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="70"/></expr_stmt></block></then></if>
	<if pos:line="24" pos:column="9">if <condition pos:line="24" pos:column="12">(<expr><name pos:line="24" pos:column="13">window_size<pos:position pos:line="24" pos:column="24"/></name> <operator pos:line="24" pos:column="25">&lt;<pos:position pos:line="24" pos:column="29"/></operator> <name pos:line="24" pos:column="27">len<pos:position pos:line="24" pos:column="30"/></name> <operator pos:line="24" pos:column="31">+<pos:position pos:line="24" pos:column="32"/></operator> <name pos:line="24" pos:column="33">align_fudge<pos:position pos:line="24" pos:column="44"/></name></expr>)<pos:position pos:line="24" pos:column="45"/></condition><then pos:line="24" pos:column="45">
		<block type="pseudo"><expr_stmt><expr><name pos:line="25" pos:column="17">window_size<pos:position pos:line="25" pos:column="28"/></name> <operator pos:line="25" pos:column="29">=<pos:position pos:line="25" pos:column="30"/></operator> <call><name pos:line="25" pos:column="31">ALIGNED_LENGTH<pos:position pos:line="25" pos:column="45"/></name><argument_list pos:line="25" pos:column="45">(<argument><expr><name pos:line="25" pos:column="46">len<pos:position pos:line="25" pos:column="49"/></name> <operator pos:line="25" pos:column="50">+<pos:position pos:line="25" pos:column="51"/></operator> <name pos:line="25" pos:column="52">align_fudge<pos:position pos:line="25" pos:column="63"/></name></expr></argument>)<pos:position pos:line="25" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="65"/></expr_stmt></block></then></if>

	<comment type="block" pos:line="27" pos:column="9">/* make sure we have allocated enough memory for the window */</comment>
	<if pos:line="28" pos:column="9">if <condition pos:line="28" pos:column="12">(<expr><name pos:line="28" pos:column="13">window_size<pos:position pos:line="28" pos:column="24"/></name> <operator pos:line="28" pos:column="25">&gt;<pos:position pos:line="28" pos:column="29"/></operator> <name><name pos:line="28" pos:column="27">map<pos:position pos:line="28" pos:column="30"/></name><operator pos:line="28" pos:column="30">-&gt;<pos:position pos:line="28" pos:column="35"/></operator><name pos:line="28" pos:column="32">p_size<pos:position pos:line="28" pos:column="38"/></name></name></expr>)<pos:position pos:line="28" pos:column="39"/></condition><then pos:line="28" pos:column="39"> <block pos:line="28" pos:column="40">{
		<expr_stmt><expr><name><name pos:line="29" pos:column="17">map<pos:position pos:line="29" pos:column="20"/></name><operator pos:line="29" pos:column="20">-&gt;<pos:position pos:line="29" pos:column="25"/></operator><name pos:line="29" pos:column="22">p<pos:position pos:line="29" pos:column="23"/></name></name> <operator pos:line="29" pos:column="24">=<pos:position pos:line="29" pos:column="25"/></operator> <call><name pos:line="29" pos:column="26">realloc_array<pos:position pos:line="29" pos:column="39"/></name><argument_list pos:line="29" pos:column="39">(<argument><expr><name><name pos:line="29" pos:column="40">map<pos:position pos:line="29" pos:column="43"/></name><operator pos:line="29" pos:column="43">-&gt;<pos:position pos:line="29" pos:column="48"/></operator><name pos:line="29" pos:column="45">p<pos:position pos:line="29" pos:column="46"/></name></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="48">char<pos:position pos:line="29" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="54">window_size<pos:position pos:line="29" pos:column="65"/></name></expr></argument>)<pos:position pos:line="29" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="67"/></expr_stmt>
		<if pos:line="30" pos:column="17">if <condition pos:line="30" pos:column="20">(<expr><operator pos:line="30" pos:column="21">!<pos:position pos:line="30" pos:column="22"/></operator><name><name pos:line="30" pos:column="22">map<pos:position pos:line="30" pos:column="25"/></name><operator pos:line="30" pos:column="25">-&gt;<pos:position pos:line="30" pos:column="30"/></operator><name pos:line="30" pos:column="27">p<pos:position pos:line="30" pos:column="28"/></name></name></expr>)<pos:position pos:line="30" pos:column="29"/></condition><then pos:line="30" pos:column="29">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="31" pos:column="25">out_of_memory<pos:position pos:line="31" pos:column="38"/></name><argument_list pos:line="31" pos:column="38">(<argument><expr><literal type="string" pos:line="31" pos:column="39">"map_ptr"<pos:position pos:line="31" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="50"/></expr_stmt></block></then></if>
		<expr_stmt><expr><name><name pos:line="32" pos:column="17">map<pos:position pos:line="32" pos:column="20"/></name><operator pos:line="32" pos:column="20">-&gt;<pos:position pos:line="32" pos:column="25"/></operator><name pos:line="32" pos:column="22">p_size<pos:position pos:line="32" pos:column="28"/></name></name> <operator pos:line="32" pos:column="29">=<pos:position pos:line="32" pos:column="30"/></operator> <name pos:line="32" pos:column="31">window_size<pos:position pos:line="32" pos:column="42"/></name></expr>;<pos:position pos:line="32" pos:column="43"/></expr_stmt>
	}<pos:position pos:line="33" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="35" pos:column="9">/* Now try to avoid re-reading any bytes by reusing any bytes from the previous buffer. */</comment>
	<if pos:line="36" pos:column="9">if <condition pos:line="36" pos:column="12">(<expr><name pos:line="36" pos:column="13">window_start<pos:position pos:line="36" pos:column="25"/></name> <operator pos:line="36" pos:column="26">&gt;=<pos:position pos:line="36" pos:column="31"/></operator> <name><name pos:line="36" pos:column="29">map<pos:position pos:line="36" pos:column="32"/></name><operator pos:line="36" pos:column="32">-&gt;<pos:position pos:line="36" pos:column="37"/></operator><name pos:line="36" pos:column="34">p_offset<pos:position pos:line="36" pos:column="42"/></name></name> <operator pos:line="36" pos:column="43">&amp;&amp;<pos:position pos:line="36" pos:column="53"/></operator> <name pos:line="36" pos:column="46">window_start<pos:position pos:line="36" pos:column="58"/></name> <operator pos:line="36" pos:column="59">&lt;<pos:position pos:line="36" pos:column="63"/></operator> <name><name pos:line="36" pos:column="61">map<pos:position pos:line="36" pos:column="64"/></name><operator pos:line="36" pos:column="64">-&gt;<pos:position pos:line="36" pos:column="69"/></operator><name pos:line="36" pos:column="66">p_offset<pos:position pos:line="36" pos:column="74"/></name></name> <operator pos:line="36" pos:column="75">+<pos:position pos:line="36" pos:column="76"/></operator> <name><name pos:line="36" pos:column="77">map<pos:position pos:line="36" pos:column="80"/></name><operator pos:line="36" pos:column="80">-&gt;<pos:position pos:line="36" pos:column="85"/></operator><name pos:line="36" pos:column="82">p_len<pos:position pos:line="36" pos:column="87"/></name></name>
	 <operator pos:line="37" pos:column="10">&amp;&amp;<pos:position pos:line="37" pos:column="20"/></operator> <name pos:line="37" pos:column="13">window_start<pos:position pos:line="37" pos:column="25"/></name> <operator pos:line="37" pos:column="26">+<pos:position pos:line="37" pos:column="27"/></operator> <name pos:line="37" pos:column="28">window_size<pos:position pos:line="37" pos:column="39"/></name> <operator pos:line="37" pos:column="40">&gt;=<pos:position pos:line="37" pos:column="45"/></operator> <name><name pos:line="37" pos:column="43">map<pos:position pos:line="37" pos:column="46"/></name><operator pos:line="37" pos:column="46">-&gt;<pos:position pos:line="37" pos:column="51"/></operator><name pos:line="37" pos:column="48">p_offset<pos:position pos:line="37" pos:column="56"/></name></name> <operator pos:line="37" pos:column="57">+<pos:position pos:line="37" pos:column="58"/></operator> <name><name pos:line="37" pos:column="59">map<pos:position pos:line="37" pos:column="62"/></name><operator pos:line="37" pos:column="62">-&gt;<pos:position pos:line="37" pos:column="67"/></operator><name pos:line="37" pos:column="64">p_len<pos:position pos:line="37" pos:column="69"/></name></name></expr>)<pos:position pos:line="37" pos:column="70"/></condition><then pos:line="37" pos:column="70"> <block pos:line="37" pos:column="71">{
		<expr_stmt><expr><name pos:line="38" pos:column="17">read_start<pos:position pos:line="38" pos:column="27"/></name> <operator pos:line="38" pos:column="28">=<pos:position pos:line="38" pos:column="29"/></operator> <name><name pos:line="38" pos:column="30">map<pos:position pos:line="38" pos:column="33"/></name><operator pos:line="38" pos:column="33">-&gt;<pos:position pos:line="38" pos:column="38"/></operator><name pos:line="38" pos:column="35">p_offset<pos:position pos:line="38" pos:column="43"/></name></name> <operator pos:line="38" pos:column="44">+<pos:position pos:line="38" pos:column="45"/></operator> <name><name pos:line="38" pos:column="46">map<pos:position pos:line="38" pos:column="49"/></name><operator pos:line="38" pos:column="49">-&gt;<pos:position pos:line="38" pos:column="54"/></operator><name pos:line="38" pos:column="51">p_len<pos:position pos:line="38" pos:column="56"/></name></name></expr>;<pos:position pos:line="38" pos:column="57"/></expr_stmt>
		<expr_stmt><expr><name pos:line="39" pos:column="17">read_offset<pos:position pos:line="39" pos:column="28"/></name> <operator pos:line="39" pos:column="29">=<pos:position pos:line="39" pos:column="30"/></operator> <call pos:line="39" pos:column="31">(<name pos:line="39" pos:column="32">int32<pos:position pos:line="39" pos:column="37"/></name>)<argument_list pos:line="39" pos:column="38">(<argument><expr><name pos:line="39" pos:column="39">read_start<pos:position pos:line="39" pos:column="49"/></name> <operator pos:line="39" pos:column="50">-<pos:position pos:line="39" pos:column="51"/></operator> <name pos:line="39" pos:column="52">window_start<pos:position pos:line="39" pos:column="64"/></name></expr></argument>)<pos:position pos:line="39" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="66"/></expr_stmt>
		<expr_stmt><expr><name pos:line="40" pos:column="17">read_size<pos:position pos:line="40" pos:column="26"/></name> <operator pos:line="40" pos:column="27">=<pos:position pos:line="40" pos:column="28"/></operator> <name pos:line="40" pos:column="29">window_size<pos:position pos:line="40" pos:column="40"/></name> <operator pos:line="40" pos:column="41">-<pos:position pos:line="40" pos:column="42"/></operator> <name pos:line="40" pos:column="43">read_offset<pos:position pos:line="40" pos:column="54"/></name></expr>;<pos:position pos:line="40" pos:column="55"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="41" pos:column="17">memmove<pos:position pos:line="41" pos:column="24"/></name><argument_list pos:line="41" pos:column="24">(<argument><expr><name><name pos:line="41" pos:column="25">map<pos:position pos:line="41" pos:column="28"/></name><operator pos:line="41" pos:column="28">-&gt;<pos:position pos:line="41" pos:column="33"/></operator><name pos:line="41" pos:column="30">p<pos:position pos:line="41" pos:column="31"/></name></name></expr></argument>, <argument><expr><name><name pos:line="41" pos:column="33">map<pos:position pos:line="41" pos:column="36"/></name><operator pos:line="41" pos:column="36">-&gt;<pos:position pos:line="41" pos:column="41"/></operator><name pos:line="41" pos:column="38">p<pos:position pos:line="41" pos:column="39"/></name></name> <operator pos:line="41" pos:column="40">+<pos:position pos:line="41" pos:column="41"/></operator> <operator pos:line="41" pos:column="42">(<pos:position pos:line="41" pos:column="43"/></operator><name><name pos:line="41" pos:column="43">map<pos:position pos:line="41" pos:column="46"/></name><operator pos:line="41" pos:column="46">-&gt;<pos:position pos:line="41" pos:column="51"/></operator><name pos:line="41" pos:column="48">p_len<pos:position pos:line="41" pos:column="53"/></name></name> <operator pos:line="41" pos:column="54">-<pos:position pos:line="41" pos:column="55"/></operator> <name pos:line="41" pos:column="56">read_offset<pos:position pos:line="41" pos:column="67"/></name><operator pos:line="41" pos:column="67">)<pos:position pos:line="41" pos:column="68"/></operator></expr></argument>, <argument><expr><name pos:line="41" pos:column="70">read_offset<pos:position pos:line="41" pos:column="81"/></name></expr></argument>)<pos:position pos:line="41" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="83"/></expr_stmt>
	}<pos:position pos:line="42" pos:column="10"/></block></then> <else pos:line="42" pos:column="11">else <block pos:line="42" pos:column="16">{
		<expr_stmt><expr><name pos:line="43" pos:column="17">read_start<pos:position pos:line="43" pos:column="27"/></name> <operator pos:line="43" pos:column="28">=<pos:position pos:line="43" pos:column="29"/></operator> <name pos:line="43" pos:column="30">window_start<pos:position pos:line="43" pos:column="42"/></name></expr>;<pos:position pos:line="43" pos:column="43"/></expr_stmt>
		<expr_stmt><expr><name pos:line="44" pos:column="17">read_size<pos:position pos:line="44" pos:column="26"/></name> <operator pos:line="44" pos:column="27">=<pos:position pos:line="44" pos:column="28"/></operator> <name pos:line="44" pos:column="29">window_size<pos:position pos:line="44" pos:column="40"/></name></expr>;<pos:position pos:line="44" pos:column="41"/></expr_stmt>
		<expr_stmt><expr><name pos:line="45" pos:column="17">read_offset<pos:position pos:line="45" pos:column="28"/></name> <operator pos:line="45" pos:column="29">=<pos:position pos:line="45" pos:column="30"/></operator> <literal type="number" pos:line="45" pos:column="31">0<pos:position pos:line="45" pos:column="32"/></literal></expr>;<pos:position pos:line="45" pos:column="33"/></expr_stmt>
	}<pos:position pos:line="46" pos:column="10"/></block></else></if>

	<if pos:line="48" pos:column="9">if <condition pos:line="48" pos:column="12">(<expr><name pos:line="48" pos:column="13">read_size<pos:position pos:line="48" pos:column="22"/></name> <operator pos:line="48" pos:column="23">&lt;=<pos:position pos:line="48" pos:column="28"/></operator> <literal type="number" pos:line="48" pos:column="26">0<pos:position pos:line="48" pos:column="27"/></literal></expr>)<pos:position pos:line="48" pos:column="28"/></condition><then pos:line="48" pos:column="28"> <block pos:line="48" pos:column="29">{
		<expr_stmt><expr><call><name pos:line="49" pos:column="17">rprintf<pos:position pos:line="49" pos:column="24"/></name><argument_list pos:line="49" pos:column="24">(<argument><expr><name pos:line="49" pos:column="25">FERROR<pos:position pos:line="49" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="49" pos:column="33">"invalid read_size of %ld in map_ptr\n"<pos:position pos:line="49" pos:column="72"/></literal></expr></argument>,
			<argument><expr><operator pos:line="50" pos:column="25">(<pos:position pos:line="50" pos:column="26"/></operator><name pos:line="50" pos:column="26">long<pos:position pos:line="50" pos:column="30"/></name><operator pos:line="50" pos:column="30">)<pos:position pos:line="50" pos:column="31"/></operator><name pos:line="50" pos:column="31">read_size<pos:position pos:line="50" pos:column="40"/></name></expr></argument>)<pos:position pos:line="50" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="42"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="51" pos:column="17">exit_cleanup<pos:position pos:line="51" pos:column="29"/></name><argument_list pos:line="51" pos:column="29">(<argument><expr><name pos:line="51" pos:column="30">RERR_FILEIO<pos:position pos:line="51" pos:column="41"/></name></expr></argument>)<pos:position pos:line="51" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="43"/></expr_stmt>
	}<pos:position pos:line="52" pos:column="10"/></block></then></if>

	<if pos:line="54" pos:column="9">if <condition pos:line="54" pos:column="12">(<expr><name><name pos:line="54" pos:column="13">map<pos:position pos:line="54" pos:column="16"/></name><operator pos:line="54" pos:column="16">-&gt;<pos:position pos:line="54" pos:column="21"/></operator><name pos:line="54" pos:column="18">p_fd_offset<pos:position pos:line="54" pos:column="29"/></name></name> <operator pos:line="54" pos:column="30">!=<pos:position pos:line="54" pos:column="32"/></operator> <name pos:line="54" pos:column="33">read_start<pos:position pos:line="54" pos:column="43"/></name></expr>)<pos:position pos:line="54" pos:column="44"/></condition><then pos:line="54" pos:column="44"> <block pos:line="54" pos:column="45">{
		<decl_stmt><decl><type><name pos:line="55" pos:column="17">OFF_T<pos:position pos:line="55" pos:column="22"/></name></type> <name pos:line="55" pos:column="23">ret<pos:position pos:line="55" pos:column="26"/></name> <init pos:line="55" pos:column="27">= <expr><call><name pos:line="55" pos:column="29">do_lseek<pos:position pos:line="55" pos:column="37"/></name><argument_list pos:line="55" pos:column="37">(<argument><expr><name><name pos:line="55" pos:column="38">map<pos:position pos:line="55" pos:column="41"/></name><operator pos:line="55" pos:column="41">-&gt;<pos:position pos:line="55" pos:column="46"/></operator><name pos:line="55" pos:column="43">fd<pos:position pos:line="55" pos:column="45"/></name></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="47">read_start<pos:position pos:line="55" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="59">SEEK_SET<pos:position pos:line="55" pos:column="67"/></name></expr></argument>)<pos:position pos:line="55" pos:column="68"/></argument_list></call></expr></init></decl>;<pos:position pos:line="55" pos:column="69"/></decl_stmt>
		<if pos:line="56" pos:column="17">if <condition pos:line="56" pos:column="20">(<expr><name pos:line="56" pos:column="21">ret<pos:position pos:line="56" pos:column="24"/></name> <operator pos:line="56" pos:column="25">!=<pos:position pos:line="56" pos:column="27"/></operator> <name pos:line="56" pos:column="28">read_start<pos:position pos:line="56" pos:column="38"/></name></expr>)<pos:position pos:line="56" pos:column="39"/></condition><then pos:line="56" pos:column="39"> <block pos:line="56" pos:column="40">{
			<expr_stmt><expr><call><name pos:line="57" pos:column="25">rsyserr<pos:position pos:line="57" pos:column="32"/></name><argument_list pos:line="57" pos:column="32">(<argument><expr><name pos:line="57" pos:column="33">FERROR<pos:position pos:line="57" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="41">errno<pos:position pos:line="57" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="57" pos:column="48">"lseek returned %s, not %s"<pos:position pos:line="57" pos:column="75"/></literal></expr></argument>,
				<argument><expr><call><name pos:line="58" pos:column="33">big_num<pos:position pos:line="58" pos:column="40"/></name><argument_list pos:line="58" pos:column="40">(<argument><expr><name pos:line="58" pos:column="41">ret<pos:position pos:line="58" pos:column="44"/></name></expr></argument>)<pos:position pos:line="58" pos:column="45"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="58" pos:column="47">big_num<pos:position pos:line="58" pos:column="54"/></name><argument_list pos:line="58" pos:column="54">(<argument><expr><name pos:line="58" pos:column="55">read_start<pos:position pos:line="58" pos:column="65"/></name></expr></argument>)<pos:position pos:line="58" pos:column="66"/></argument_list></call></expr></argument>)<pos:position pos:line="58" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="68"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="59" pos:column="25">exit_cleanup<pos:position pos:line="59" pos:column="37"/></name><argument_list pos:line="59" pos:column="37">(<argument><expr><name pos:line="59" pos:column="38">RERR_FILEIO<pos:position pos:line="59" pos:column="49"/></name></expr></argument>)<pos:position pos:line="59" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="51"/></expr_stmt>
		}<pos:position pos:line="60" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name><name pos:line="61" pos:column="17">map<pos:position pos:line="61" pos:column="20"/></name><operator pos:line="61" pos:column="20">-&gt;<pos:position pos:line="61" pos:column="25"/></operator><name pos:line="61" pos:column="22">p_fd_offset<pos:position pos:line="61" pos:column="33"/></name></name> <operator pos:line="61" pos:column="34">=<pos:position pos:line="61" pos:column="35"/></operator> <name pos:line="61" pos:column="36">read_start<pos:position pos:line="61" pos:column="46"/></name></expr>;<pos:position pos:line="61" pos:column="47"/></expr_stmt>
	}<pos:position pos:line="62" pos:column="10"/></block></then></if>
	<expr_stmt><expr><name><name pos:line="63" pos:column="9">map<pos:position pos:line="63" pos:column="12"/></name><operator pos:line="63" pos:column="12">-&gt;<pos:position pos:line="63" pos:column="17"/></operator><name pos:line="63" pos:column="14">p_offset<pos:position pos:line="63" pos:column="22"/></name></name> <operator pos:line="63" pos:column="23">=<pos:position pos:line="63" pos:column="24"/></operator> <name pos:line="63" pos:column="25">window_start<pos:position pos:line="63" pos:column="37"/></name></expr>;<pos:position pos:line="63" pos:column="38"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="64" pos:column="9">map<pos:position pos:line="64" pos:column="12"/></name><operator pos:line="64" pos:column="12">-&gt;<pos:position pos:line="64" pos:column="17"/></operator><name pos:line="64" pos:column="14">p_len<pos:position pos:line="64" pos:column="19"/></name></name> <operator pos:line="64" pos:column="20">=<pos:position pos:line="64" pos:column="21"/></operator> <name pos:line="64" pos:column="22">window_size<pos:position pos:line="64" pos:column="33"/></name></expr>;<pos:position pos:line="64" pos:column="34"/></expr_stmt>

	<while pos:line="66" pos:column="9">while <condition pos:line="66" pos:column="15">(<expr><name pos:line="66" pos:column="16">read_size<pos:position pos:line="66" pos:column="25"/></name> <operator pos:line="66" pos:column="26">&gt;<pos:position pos:line="66" pos:column="30"/></operator> <literal type="number" pos:line="66" pos:column="28">0<pos:position pos:line="66" pos:column="29"/></literal></expr>)<pos:position pos:line="66" pos:column="30"/></condition> <block pos:line="66" pos:column="31">{
		<decl_stmt><decl><type><name pos:line="67" pos:column="17">int32<pos:position pos:line="67" pos:column="22"/></name></type> <name pos:line="67" pos:column="23">nread<pos:position pos:line="67" pos:column="28"/></name> <init pos:line="67" pos:column="29">= <expr><call><name pos:line="67" pos:column="31">read<pos:position pos:line="67" pos:column="35"/></name><argument_list pos:line="67" pos:column="35">(<argument><expr><name><name pos:line="67" pos:column="36">map<pos:position pos:line="67" pos:column="39"/></name><operator pos:line="67" pos:column="39">-&gt;<pos:position pos:line="67" pos:column="44"/></operator><name pos:line="67" pos:column="41">fd<pos:position pos:line="67" pos:column="43"/></name></name></expr></argument>, <argument><expr><name><name pos:line="67" pos:column="45">map<pos:position pos:line="67" pos:column="48"/></name><operator pos:line="67" pos:column="48">-&gt;<pos:position pos:line="67" pos:column="53"/></operator><name pos:line="67" pos:column="50">p<pos:position pos:line="67" pos:column="51"/></name></name> <operator pos:line="67" pos:column="52">+<pos:position pos:line="67" pos:column="53"/></operator> <name pos:line="67" pos:column="54">read_offset<pos:position pos:line="67" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="67" pos:column="67">read_size<pos:position pos:line="67" pos:column="76"/></name></expr></argument>)<pos:position pos:line="67" pos:column="77"/></argument_list></call></expr></init></decl>;<pos:position pos:line="67" pos:column="78"/></decl_stmt>
		<if pos:line="68" pos:column="17">if <condition pos:line="68" pos:column="20">(<expr><name pos:line="68" pos:column="21">nread<pos:position pos:line="68" pos:column="26"/></name> <operator pos:line="68" pos:column="27">&lt;=<pos:position pos:line="68" pos:column="32"/></operator> <literal type="number" pos:line="68" pos:column="30">0<pos:position pos:line="68" pos:column="31"/></literal></expr>)<pos:position pos:line="68" pos:column="32"/></condition><then pos:line="68" pos:column="32"> <block pos:line="68" pos:column="33">{
			<if pos:line="69" pos:column="25">if <condition pos:line="69" pos:column="28">(<expr><operator pos:line="69" pos:column="29">!<pos:position pos:line="69" pos:column="30"/></operator><name><name pos:line="69" pos:column="30">map<pos:position pos:line="69" pos:column="33"/></name><operator pos:line="69" pos:column="33">-&gt;<pos:position pos:line="69" pos:column="38"/></operator><name pos:line="69" pos:column="35">status<pos:position pos:line="69" pos:column="41"/></name></name></expr>)<pos:position pos:line="69" pos:column="42"/></condition><then pos:line="69" pos:column="42">
				<block type="pseudo"><expr_stmt><expr><name><name pos:line="70" pos:column="33">map<pos:position pos:line="70" pos:column="36"/></name><operator pos:line="70" pos:column="36">-&gt;<pos:position pos:line="70" pos:column="41"/></operator><name pos:line="70" pos:column="38">status<pos:position pos:line="70" pos:column="44"/></name></name> <operator pos:line="70" pos:column="45">=<pos:position pos:line="70" pos:column="46"/></operator> <ternary><condition><expr><name pos:line="70" pos:column="47">nread<pos:position pos:line="70" pos:column="52"/></name></expr> ?<pos:position pos:line="70" pos:column="54"/></condition><then pos:line="70" pos:column="54"> <expr><name pos:line="70" pos:column="55">errno<pos:position pos:line="70" pos:column="60"/></name></expr> <pos:position pos:line="70" pos:column="61"/></then><else pos:line="70" pos:column="61">: <expr><name pos:line="70" pos:column="63">ENODATA<pos:position pos:line="70" pos:column="70"/></name></expr></else></ternary></expr>;<pos:position pos:line="70" pos:column="71"/></expr_stmt></block></then></if>
			<comment type="block" pos:line="71" pos:column="25">/* The best we can do is zero the buffer -- the file
			 * has changed mid transfer! */</comment>
			<expr_stmt><expr><call><name pos:line="73" pos:column="25">memset<pos:position pos:line="73" pos:column="31"/></name><argument_list pos:line="73" pos:column="31">(<argument><expr><name><name pos:line="73" pos:column="32">map<pos:position pos:line="73" pos:column="35"/></name><operator pos:line="73" pos:column="35">-&gt;<pos:position pos:line="73" pos:column="40"/></operator><name pos:line="73" pos:column="37">p<pos:position pos:line="73" pos:column="38"/></name></name> <operator pos:line="73" pos:column="39">+<pos:position pos:line="73" pos:column="40"/></operator> <name pos:line="73" pos:column="41">read_offset<pos:position pos:line="73" pos:column="52"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="73" pos:column="54">0<pos:position pos:line="73" pos:column="55"/></literal></expr></argument>, <argument><expr><name pos:line="73" pos:column="57">read_size<pos:position pos:line="73" pos:column="66"/></name></expr></argument>)<pos:position pos:line="73" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="68"/></expr_stmt>
			<break pos:line="74" pos:column="25">break;<pos:position pos:line="74" pos:column="31"/></break>
		}<pos:position pos:line="75" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name><name pos:line="76" pos:column="17">map<pos:position pos:line="76" pos:column="20"/></name><operator pos:line="76" pos:column="20">-&gt;<pos:position pos:line="76" pos:column="25"/></operator><name pos:line="76" pos:column="22">p_fd_offset<pos:position pos:line="76" pos:column="33"/></name></name> <operator pos:line="76" pos:column="34">+=<pos:position pos:line="76" pos:column="36"/></operator> <name pos:line="76" pos:column="37">nread<pos:position pos:line="76" pos:column="42"/></name></expr>;<pos:position pos:line="76" pos:column="43"/></expr_stmt>
		<expr_stmt><expr><name pos:line="77" pos:column="17">read_offset<pos:position pos:line="77" pos:column="28"/></name> <operator pos:line="77" pos:column="29">+=<pos:position pos:line="77" pos:column="31"/></operator> <name pos:line="77" pos:column="32">nread<pos:position pos:line="77" pos:column="37"/></name></expr>;<pos:position pos:line="77" pos:column="38"/></expr_stmt>
		<expr_stmt><expr><name pos:line="78" pos:column="17">read_size<pos:position pos:line="78" pos:column="26"/></name> <operator pos:line="78" pos:column="27">-=<pos:position pos:line="78" pos:column="29"/></operator> <name pos:line="78" pos:column="30">nread<pos:position pos:line="78" pos:column="35"/></name></expr>;<pos:position pos:line="78" pos:column="36"/></expr_stmt>
	}<pos:position pos:line="79" pos:column="10"/></block></while>

	<return pos:line="81" pos:column="9">return <expr><name><name pos:line="81" pos:column="16">map<pos:position pos:line="81" pos:column="19"/></name><operator pos:line="81" pos:column="19">-&gt;<pos:position pos:line="81" pos:column="24"/></operator><name pos:line="81" pos:column="21">p<pos:position pos:line="81" pos:column="22"/></name></name> <operator pos:line="81" pos:column="23">+<pos:position pos:line="81" pos:column="24"/></operator> <name pos:line="81" pos:column="25">align_fudge<pos:position pos:line="81" pos:column="36"/></name></expr>;<pos:position pos:line="81" pos:column="37"/></return>
}<pos:position pos:line="82" pos:column="2"/></block></function></unit>
