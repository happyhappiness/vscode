<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_function_722.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">unsafe_symlink<pos:position pos:line="1" pos:column="19"/></name><parameter_list pos:line="1" pos:column="19">(<parameter><decl><type><name pos:line="1" pos:column="20">char<pos:position pos:line="1" pos:column="24"/></name> <modifier pos:line="1" pos:column="25">*<pos:position pos:line="1" pos:column="26"/></modifier></type><name pos:line="1" pos:column="26">dest<pos:position pos:line="1" pos:column="30"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="32">char<pos:position pos:line="1" pos:column="36"/></name> <modifier pos:line="1" pos:column="37">*<pos:position pos:line="1" pos:column="38"/></modifier></type><name pos:line="1" pos:column="38">src<pos:position pos:line="1" pos:column="41"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="42"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">char<pos:position pos:line="3" pos:column="13"/></name> <modifier pos:line="3" pos:column="14">*<pos:position pos:line="3" pos:column="15"/></modifier></type><name pos:line="3" pos:column="15">tok<pos:position pos:line="3" pos:column="18"/></name></decl>;<pos:position pos:line="3" pos:column="19"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">depth<pos:position pos:line="4" pos:column="18"/></name> <init pos:line="4" pos:column="19">= <expr><literal type="number" pos:line="4" pos:column="21">0<pos:position pos:line="4" pos:column="22"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="23"/></decl_stmt>

	<comment type="block" pos:line="6" pos:column="9">/* all absolute and null symlinks are unsafe */</comment>
	<if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<expr><operator pos:line="7" pos:column="13">!<pos:position pos:line="7" pos:column="14"/></operator><name pos:line="7" pos:column="14">dest<pos:position pos:line="7" pos:column="18"/></name> <operator pos:line="7" pos:column="19">||<pos:position pos:line="7" pos:column="21"/></operator> <operator pos:line="7" pos:column="22">!<pos:position pos:line="7" pos:column="23"/></operator><operator pos:line="7" pos:column="23">(<pos:position pos:line="7" pos:column="24"/></operator><operator pos:line="7" pos:column="24">*<pos:position pos:line="7" pos:column="25"/></operator><name pos:line="7" pos:column="25">dest<pos:position pos:line="7" pos:column="29"/></name><operator pos:line="7" pos:column="29">)<pos:position pos:line="7" pos:column="30"/></operator> <operator pos:line="7" pos:column="31">||<pos:position pos:line="7" pos:column="33"/></operator> <operator pos:line="7" pos:column="34">(<pos:position pos:line="7" pos:column="35"/></operator><operator pos:line="7" pos:column="35">*<pos:position pos:line="7" pos:column="36"/></operator><name pos:line="7" pos:column="36">dest<pos:position pos:line="7" pos:column="40"/></name> <operator pos:line="7" pos:column="41">==<pos:position pos:line="7" pos:column="43"/></operator> <literal type="char" pos:line="7" pos:column="44">'/'<pos:position pos:line="7" pos:column="47"/></literal><operator pos:line="7" pos:column="47">)<pos:position pos:line="7" pos:column="48"/></operator></expr>)<pos:position pos:line="7" pos:column="49"/></condition><then pos:line="7" pos:column="49"> <block type="pseudo"><return pos:line="7" pos:column="50">return <expr><literal type="number" pos:line="7" pos:column="57">1<pos:position pos:line="7" pos:column="58"/></literal></expr>;<pos:position pos:line="7" pos:column="59"/></return></block></then></if>

	<expr_stmt><expr><name pos:line="9" pos:column="9">src<pos:position pos:line="9" pos:column="12"/></name> <operator pos:line="9" pos:column="13">=<pos:position pos:line="9" pos:column="14"/></operator> <call><name pos:line="9" pos:column="15">strdup<pos:position pos:line="9" pos:column="21"/></name><argument_list pos:line="9" pos:column="21">(<argument><expr><name pos:line="9" pos:column="22">src<pos:position pos:line="9" pos:column="25"/></name></expr></argument>)<pos:position pos:line="9" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="27"/></expr_stmt>
	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><operator pos:line="10" pos:column="13">!<pos:position pos:line="10" pos:column="14"/></operator><name pos:line="10" pos:column="14">src<pos:position pos:line="10" pos:column="17"/></name></expr>)<pos:position pos:line="10" pos:column="18"/></condition><then pos:line="10" pos:column="18"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="10" pos:column="19">out_of_memory<pos:position pos:line="10" pos:column="32"/></name><argument_list pos:line="10" pos:column="32">(<argument><expr><literal type="string" pos:line="10" pos:column="33">"unsafe_symlink"<pos:position pos:line="10" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="51"/></expr_stmt></block></then></if>

	<comment type="block" pos:line="12" pos:column="9">/* find out what our safety margin is */</comment>
	<for pos:line="13" pos:column="9">for <control pos:line="13" pos:column="13">(<init><expr><name pos:line="13" pos:column="14">tok<pos:position pos:line="13" pos:column="17"/></name><operator pos:line="13" pos:column="17">=<pos:position pos:line="13" pos:column="18"/></operator><call><name pos:line="13" pos:column="18">strtok<pos:position pos:line="13" pos:column="24"/></name><argument_list pos:line="13" pos:column="24">(<argument><expr><name pos:line="13" pos:column="25">src<pos:position pos:line="13" pos:column="28"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="13" pos:column="29">"/"<pos:position pos:line="13" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="34"/></init> <condition><expr><name pos:line="13" pos:column="35">tok<pos:position pos:line="13" pos:column="38"/></name></expr>;<pos:position pos:line="13" pos:column="39"/></condition> <incr><expr><name pos:line="13" pos:column="40">tok<pos:position pos:line="13" pos:column="43"/></name><operator pos:line="13" pos:column="43">=<pos:position pos:line="13" pos:column="44"/></operator><call><name pos:line="13" pos:column="44">strtok<pos:position pos:line="13" pos:column="50"/></name><argument_list pos:line="13" pos:column="50">(<argument><expr><name pos:line="13" pos:column="51">NULL<pos:position pos:line="13" pos:column="55"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="13" pos:column="56">"/"<pos:position pos:line="13" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="60"/></argument_list></call></expr></incr>)<pos:position pos:line="13" pos:column="61"/></control> <block pos:line="13" pos:column="62">{
		<if pos:line="14" pos:column="17">if <condition pos:line="14" pos:column="20">(<expr><call><name pos:line="14" pos:column="21">strcmp<pos:position pos:line="14" pos:column="27"/></name><argument_list pos:line="14" pos:column="27">(<argument><expr><name pos:line="14" pos:column="28">tok<pos:position pos:line="14" pos:column="31"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="14" pos:column="32">".."<pos:position pos:line="14" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="37"/></argument_list></call> <operator pos:line="14" pos:column="38">==<pos:position pos:line="14" pos:column="40"/></operator> <literal type="number" pos:line="14" pos:column="41">0<pos:position pos:line="14" pos:column="42"/></literal></expr>)<pos:position pos:line="14" pos:column="43"/></condition><then pos:line="14" pos:column="43"> <block pos:line="14" pos:column="44">{
			<expr_stmt><expr><name pos:line="15" pos:column="25">depth<pos:position pos:line="15" pos:column="30"/></name><operator pos:line="15" pos:column="30">=<pos:position pos:line="15" pos:column="31"/></operator><literal type="number" pos:line="15" pos:column="31">0<pos:position pos:line="15" pos:column="32"/></literal></expr>;<pos:position pos:line="15" pos:column="33"/></expr_stmt>
		}<pos:position pos:line="16" pos:column="18"/></block></then> <elseif pos:line="16" pos:column="19">else <if pos:line="16" pos:column="24">if <condition pos:line="16" pos:column="27">(<expr><call><name pos:line="16" pos:column="28">strcmp<pos:position pos:line="16" pos:column="34"/></name><argument_list pos:line="16" pos:column="34">(<argument><expr><name pos:line="16" pos:column="35">tok<pos:position pos:line="16" pos:column="38"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="16" pos:column="39">"."<pos:position pos:line="16" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="43"/></argument_list></call> <operator pos:line="16" pos:column="44">==<pos:position pos:line="16" pos:column="46"/></operator> <literal type="number" pos:line="16" pos:column="47">0<pos:position pos:line="16" pos:column="48"/></literal></expr>)<pos:position pos:line="16" pos:column="49"/></condition><then pos:line="16" pos:column="49"> <block pos:line="16" pos:column="50">{
			<comment type="block" pos:line="17" pos:column="25">/* nothing */</comment>
		}<pos:position pos:line="18" pos:column="18"/></block></then></if></elseif> <else pos:line="18" pos:column="19">else <block pos:line="18" pos:column="24">{
			<expr_stmt><expr><name pos:line="19" pos:column="25">depth<pos:position pos:line="19" pos:column="30"/></name><operator pos:line="19" pos:column="30">++<pos:position pos:line="19" pos:column="32"/></operator></expr>;<pos:position pos:line="19" pos:column="33"/></expr_stmt>
		}<pos:position pos:line="20" pos:column="18"/></block></else></if>
	}<pos:position pos:line="21" pos:column="10"/></block></for>
	<expr_stmt><expr><call><name pos:line="22" pos:column="9">free<pos:position pos:line="22" pos:column="13"/></name><argument_list pos:line="22" pos:column="13">(<argument><expr><name pos:line="22" pos:column="14">src<pos:position pos:line="22" pos:column="17"/></name></expr></argument>)<pos:position pos:line="22" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="19"/></expr_stmt>

	<comment type="block" pos:line="24" pos:column="9">/* drop by one to account for the filename portion */</comment>
	<expr_stmt><expr><name pos:line="25" pos:column="9">depth<pos:position pos:line="25" pos:column="14"/></name><operator pos:line="25" pos:column="14">--<pos:position pos:line="25" pos:column="16"/></operator></expr>;<pos:position pos:line="25" pos:column="17"/></expr_stmt>

	<expr_stmt><expr><name pos:line="27" pos:column="9">dest<pos:position pos:line="27" pos:column="13"/></name> <operator pos:line="27" pos:column="14">=<pos:position pos:line="27" pos:column="15"/></operator> <call><name pos:line="27" pos:column="16">strdup<pos:position pos:line="27" pos:column="22"/></name><argument_list pos:line="27" pos:column="22">(<argument><expr><name pos:line="27" pos:column="23">dest<pos:position pos:line="27" pos:column="27"/></name></expr></argument>)<pos:position pos:line="27" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="29"/></expr_stmt>
	<if pos:line="28" pos:column="9">if <condition pos:line="28" pos:column="12">(<expr><operator pos:line="28" pos:column="13">!<pos:position pos:line="28" pos:column="14"/></operator><name pos:line="28" pos:column="14">dest<pos:position pos:line="28" pos:column="18"/></name></expr>)<pos:position pos:line="28" pos:column="19"/></condition><then pos:line="28" pos:column="19"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="28" pos:column="20">out_of_memory<pos:position pos:line="28" pos:column="33"/></name><argument_list pos:line="28" pos:column="33">(<argument><expr><literal type="string" pos:line="28" pos:column="34">"unsafe_symlink"<pos:position pos:line="28" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="52"/></expr_stmt></block></then></if>

	<for pos:line="30" pos:column="9">for <control pos:line="30" pos:column="13">(<init><expr><name pos:line="30" pos:column="14">tok<pos:position pos:line="30" pos:column="17"/></name><operator pos:line="30" pos:column="17">=<pos:position pos:line="30" pos:column="18"/></operator><call><name pos:line="30" pos:column="18">strtok<pos:position pos:line="30" pos:column="24"/></name><argument_list pos:line="30" pos:column="24">(<argument><expr><name pos:line="30" pos:column="25">dest<pos:position pos:line="30" pos:column="29"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="30" pos:column="30">"/"<pos:position pos:line="30" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="35"/></init> <condition><expr><name pos:line="30" pos:column="36">tok<pos:position pos:line="30" pos:column="39"/></name></expr>;<pos:position pos:line="30" pos:column="40"/></condition> <incr><expr><name pos:line="30" pos:column="41">tok<pos:position pos:line="30" pos:column="44"/></name><operator pos:line="30" pos:column="44">=<pos:position pos:line="30" pos:column="45"/></operator><call><name pos:line="30" pos:column="45">strtok<pos:position pos:line="30" pos:column="51"/></name><argument_list pos:line="30" pos:column="51">(<argument><expr><name pos:line="30" pos:column="52">NULL<pos:position pos:line="30" pos:column="56"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="30" pos:column="57">"/"<pos:position pos:line="30" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="61"/></argument_list></call></expr></incr>)<pos:position pos:line="30" pos:column="62"/></control> <block pos:line="30" pos:column="63">{
		<if pos:line="31" pos:column="17">if <condition pos:line="31" pos:column="20">(<expr><call><name pos:line="31" pos:column="21">strcmp<pos:position pos:line="31" pos:column="27"/></name><argument_list pos:line="31" pos:column="27">(<argument><expr><name pos:line="31" pos:column="28">tok<pos:position pos:line="31" pos:column="31"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="31" pos:column="32">".."<pos:position pos:line="31" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="37"/></argument_list></call> <operator pos:line="31" pos:column="38">==<pos:position pos:line="31" pos:column="40"/></operator> <literal type="number" pos:line="31" pos:column="41">0<pos:position pos:line="31" pos:column="42"/></literal></expr>)<pos:position pos:line="31" pos:column="43"/></condition><then pos:line="31" pos:column="43"> <block pos:line="31" pos:column="44">{
			<expr_stmt><expr><name pos:line="32" pos:column="25">depth<pos:position pos:line="32" pos:column="30"/></name><operator pos:line="32" pos:column="30">--<pos:position pos:line="32" pos:column="32"/></operator></expr>;<pos:position pos:line="32" pos:column="33"/></expr_stmt>
		}<pos:position pos:line="33" pos:column="18"/></block></then> <elseif pos:line="33" pos:column="19">else <if pos:line="33" pos:column="24">if <condition pos:line="33" pos:column="27">(<expr><call><name pos:line="33" pos:column="28">strcmp<pos:position pos:line="33" pos:column="34"/></name><argument_list pos:line="33" pos:column="34">(<argument><expr><name pos:line="33" pos:column="35">tok<pos:position pos:line="33" pos:column="38"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="33" pos:column="39">"."<pos:position pos:line="33" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="43"/></argument_list></call> <operator pos:line="33" pos:column="44">==<pos:position pos:line="33" pos:column="46"/></operator> <literal type="number" pos:line="33" pos:column="47">0<pos:position pos:line="33" pos:column="48"/></literal></expr>)<pos:position pos:line="33" pos:column="49"/></condition><then pos:line="33" pos:column="49"> <block pos:line="33" pos:column="50">{
			<comment type="block" pos:line="34" pos:column="25">/* nothing */</comment>
		}<pos:position pos:line="35" pos:column="18"/></block></then></if></elseif> <else pos:line="35" pos:column="19">else <block pos:line="35" pos:column="24">{
			<expr_stmt><expr><name pos:line="36" pos:column="25">depth<pos:position pos:line="36" pos:column="30"/></name><operator pos:line="36" pos:column="30">++<pos:position pos:line="36" pos:column="32"/></operator></expr>;<pos:position pos:line="36" pos:column="33"/></expr_stmt>
		}<pos:position pos:line="37" pos:column="18"/></block></else></if>
		<comment type="block" pos:line="38" pos:column="17">/* if at any point we go outside the current directory then
		   stop - it is unsafe */</comment>
		<if pos:line="40" pos:column="17">if <condition pos:line="40" pos:column="20">(<expr><name pos:line="40" pos:column="21">depth<pos:position pos:line="40" pos:column="26"/></name> <operator pos:line="40" pos:column="27">&lt;<pos:position pos:line="40" pos:column="31"/></operator> <literal type="number" pos:line="40" pos:column="29">0<pos:position pos:line="40" pos:column="30"/></literal></expr>)<pos:position pos:line="40" pos:column="31"/></condition><then pos:line="40" pos:column="31"> <block type="pseudo"><break pos:line="40" pos:column="32">break;<pos:position pos:line="40" pos:column="38"/></break></block></then></if>
	}<pos:position pos:line="41" pos:column="10"/></block></for>

	<expr_stmt><expr><call><name pos:line="43" pos:column="9">free<pos:position pos:line="43" pos:column="13"/></name><argument_list pos:line="43" pos:column="13">(<argument><expr><name pos:line="43" pos:column="14">dest<pos:position pos:line="43" pos:column="18"/></name></expr></argument>)<pos:position pos:line="43" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="20"/></expr_stmt>
	<return pos:line="44" pos:column="9">return <expr><operator pos:line="44" pos:column="16">(<pos:position pos:line="44" pos:column="17"/></operator><name pos:line="44" pos:column="17">depth<pos:position pos:line="44" pos:column="22"/></name> <operator pos:line="44" pos:column="23">&lt;<pos:position pos:line="44" pos:column="27"/></operator> <literal type="number" pos:line="44" pos:column="25">0<pos:position pos:line="44" pos:column="26"/></literal><operator pos:line="44" pos:column="26">)<pos:position pos:line="44" pos:column="27"/></operator></expr>;<pos:position pos:line="44" pos:column="28"/></return>
}<pos:position pos:line="45" pos:column="2"/></block></function></unit>
