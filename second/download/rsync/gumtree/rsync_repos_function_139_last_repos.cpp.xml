<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_139_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">send_msg<pos:position pos:line="1" pos:column="13"/></name><parameter_list pos:line="1" pos:column="13">(<parameter><decl><type><name><name pos:line="1" pos:column="14">enum<pos:position pos:line="1" pos:column="18"/></name> <name pos:line="1" pos:column="19">msgcode<pos:position pos:line="1" pos:column="26"/></name></name></type> <name pos:line="1" pos:column="27">code<pos:position pos:line="1" pos:column="31"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="33">const<pos:position pos:line="1" pos:column="38"/></specifier> <name pos:line="1" pos:column="39">char<pos:position pos:line="1" pos:column="43"/></name> <modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier></type><name pos:line="1" pos:column="45">buf<pos:position pos:line="1" pos:column="48"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="50">size_t<pos:position pos:line="1" pos:column="56"/></name></type> <name pos:line="1" pos:column="57">len<pos:position pos:line="1" pos:column="60"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="62">int<pos:position pos:line="1" pos:column="65"/></name></type> <name pos:line="1" pos:column="66">convert<pos:position pos:line="1" pos:column="73"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="74"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">char<pos:position pos:line="3" pos:column="13"/></name> <modifier pos:line="3" pos:column="14">*<pos:position pos:line="3" pos:column="15"/></modifier></type><name pos:line="3" pos:column="15">hdr<pos:position pos:line="3" pos:column="18"/></name></decl>;<pos:position pos:line="3" pos:column="19"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">size_t<pos:position pos:line="4" pos:column="15"/></name></type> <name pos:line="4" pos:column="16">needed<pos:position pos:line="4" pos:column="22"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="24">pos<pos:position pos:line="4" pos:column="27"/></name></decl>;<pos:position pos:line="4" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">BOOL<pos:position pos:line="5" pos:column="13"/></name></type> <name pos:line="5" pos:column="14">want_debug<pos:position pos:line="5" pos:column="24"/></name> <init pos:line="5" pos:column="25">= <expr><call><name pos:line="5" pos:column="27">DEBUG_GTE<pos:position pos:line="5" pos:column="36"/></name><argument_list pos:line="5" pos:column="36">(<argument><expr><name pos:line="5" pos:column="37">IO<pos:position pos:line="5" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="5" pos:column="41">1<pos:position pos:line="5" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="43"/></argument_list></call> <operator pos:line="5" pos:column="44">&amp;&amp;<pos:position pos:line="5" pos:column="54"/></operator> <name pos:line="5" pos:column="47">convert<pos:position pos:line="5" pos:column="54"/></name> <operator pos:line="5" pos:column="55">&gt;=<pos:position pos:line="5" pos:column="60"/></operator> <literal type="number" pos:line="5" pos:column="58">0<pos:position pos:line="5" pos:column="59"/></literal> <operator pos:line="5" pos:column="60">&amp;&amp;<pos:position pos:line="5" pos:column="70"/></operator> <operator pos:line="5" pos:column="63">(<pos:position pos:line="5" pos:column="64"/></operator><name pos:line="5" pos:column="64">msgs2stderr<pos:position pos:line="5" pos:column="75"/></name> <operator pos:line="5" pos:column="76">||<pos:position pos:line="5" pos:column="78"/></operator> <name pos:line="5" pos:column="79">code<pos:position pos:line="5" pos:column="83"/></name> <operator pos:line="5" pos:column="84">!=<pos:position pos:line="5" pos:column="86"/></operator> <name pos:line="5" pos:column="87">MSG_INFO<pos:position pos:line="5" pos:column="95"/></name><operator pos:line="5" pos:column="95">)<pos:position pos:line="5" pos:column="96"/></operator></expr></init></decl>;<pos:position pos:line="5" pos:column="97"/></decl_stmt>

	<if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<expr><operator pos:line="7" pos:column="13">!<pos:position pos:line="7" pos:column="14"/></operator><name pos:line="7" pos:column="14">OUT_MULTIPLEXED<pos:position pos:line="7" pos:column="29"/></name></expr>)<pos:position pos:line="7" pos:column="30"/></condition><then pos:line="7" pos:column="30">
		<block type="pseudo"><return pos:line="8" pos:column="17">return <expr><literal type="number" pos:line="8" pos:column="24">0<pos:position pos:line="8" pos:column="25"/></literal></expr>;<pos:position pos:line="8" pos:column="26"/></return></block></then></if>

	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><name pos:line="10" pos:column="13">want_debug<pos:position pos:line="10" pos:column="23"/></name></expr>)<pos:position pos:line="10" pos:column="24"/></condition><then pos:line="10" pos:column="24">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="11" pos:column="17">rprintf<pos:position pos:line="11" pos:column="24"/></name><argument_list pos:line="11" pos:column="24">(<argument><expr><name pos:line="11" pos:column="25">FINFO<pos:position pos:line="11" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="32">"[%s] send_msg(%d, %ld)\n"<pos:position pos:line="11" pos:column="58"/></literal></expr></argument>, <argument><expr><call><name pos:line="11" pos:column="60">who_am_i<pos:position pos:line="11" pos:column="68"/></name><argument_list pos:line="11" pos:column="68">()<pos:position pos:line="11" pos:column="70"/></argument_list></call></expr></argument>, <argument><expr><operator pos:line="11" pos:column="72">(<pos:position pos:line="11" pos:column="73"/></operator><name pos:line="11" pos:column="73">int<pos:position pos:line="11" pos:column="76"/></name><operator pos:line="11" pos:column="76">)<pos:position pos:line="11" pos:column="77"/></operator><name pos:line="11" pos:column="77">code<pos:position pos:line="11" pos:column="81"/></name></expr></argument>, <argument><expr><operator pos:line="11" pos:column="83">(<pos:position pos:line="11" pos:column="84"/></operator><name pos:line="11" pos:column="84">long<pos:position pos:line="11" pos:column="88"/></name><operator pos:line="11" pos:column="88">)<pos:position pos:line="11" pos:column="89"/></operator><name pos:line="11" pos:column="89">len<pos:position pos:line="11" pos:column="92"/></name></expr></argument>)<pos:position pos:line="11" pos:column="93"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="94"/></expr_stmt></block></then></if>

	<comment type="block" pos:line="13" pos:column="9">/* When checking for enough free space for this message, we need to
	 * make sure that there is space for the 4-byte header, plus we'll
	 * assume that we may waste up to 3 bytes (if the header doesn't fit
	 * at the physical end of the buffer). */</comment>
<cpp:ifdef pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">ifdef<pos:position pos:line="17" pos:column="7"/></cpp:directive> <name pos:line="17" pos:column="8">ICONV_OPTION<pos:position pos:line="17" pos:column="20"/></name></cpp:ifdef>
	<if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><name pos:line="18" pos:column="13">convert<pos:position pos:line="18" pos:column="20"/></name> <operator pos:line="18" pos:column="21">&gt;<pos:position pos:line="18" pos:column="25"/></operator> <literal type="number" pos:line="18" pos:column="23">0<pos:position pos:line="18" pos:column="24"/></literal> <operator pos:line="18" pos:column="25">&amp;&amp;<pos:position pos:line="18" pos:column="35"/></operator> <name pos:line="18" pos:column="28">ic_send<pos:position pos:line="18" pos:column="35"/></name> <operator pos:line="18" pos:column="36">==<pos:position pos:line="18" pos:column="38"/></operator> <operator pos:line="18" pos:column="39">(<pos:position pos:line="18" pos:column="40"/></operator><name pos:line="18" pos:column="40">iconv_t<pos:position pos:line="18" pos:column="47"/></name><operator pos:line="18" pos:column="47">)<pos:position pos:line="18" pos:column="48"/></operator><operator pos:line="18" pos:column="48">-<pos:position pos:line="18" pos:column="49"/></operator><literal type="number" pos:line="18" pos:column="49">1<pos:position pos:line="18" pos:column="50"/></literal></expr>)<pos:position pos:line="18" pos:column="51"/></condition><then pos:line="18" pos:column="51">
		<block type="pseudo"><expr_stmt><expr><name pos:line="19" pos:column="17">convert<pos:position pos:line="19" pos:column="24"/></name> <operator pos:line="19" pos:column="25">=<pos:position pos:line="19" pos:column="26"/></operator> <literal type="number" pos:line="19" pos:column="27">0<pos:position pos:line="19" pos:column="28"/></literal></expr>;<pos:position pos:line="19" pos:column="29"/></expr_stmt></block></then></if>
	<if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><name pos:line="20" pos:column="13">convert<pos:position pos:line="20" pos:column="20"/></name> <operator pos:line="20" pos:column="21">&gt;<pos:position pos:line="20" pos:column="25"/></operator> <literal type="number" pos:line="20" pos:column="23">0<pos:position pos:line="20" pos:column="24"/></literal></expr>)<pos:position pos:line="20" pos:column="25"/></condition><then pos:line="20" pos:column="25"> <block pos:line="20" pos:column="26">{
		<comment type="block" pos:line="21" pos:column="17">/* Ensuring double-size room leaves space for maximal conversion expansion. */</comment>
		<expr_stmt><expr><name pos:line="22" pos:column="17">needed<pos:position pos:line="22" pos:column="23"/></name> <operator pos:line="22" pos:column="24">=<pos:position pos:line="22" pos:column="25"/></operator> <name pos:line="22" pos:column="26">len<pos:position pos:line="22" pos:column="29"/></name><operator pos:line="22" pos:column="29">*<pos:position pos:line="22" pos:column="30"/></operator><literal type="number" pos:line="22" pos:column="30">2<pos:position pos:line="22" pos:column="31"/></literal> <operator pos:line="22" pos:column="32">+<pos:position pos:line="22" pos:column="33"/></operator> <literal type="number" pos:line="22" pos:column="34">4<pos:position pos:line="22" pos:column="35"/></literal> <operator pos:line="22" pos:column="36">+<pos:position pos:line="22" pos:column="37"/></operator> <literal type="number" pos:line="22" pos:column="38">3<pos:position pos:line="22" pos:column="39"/></literal></expr>;<pos:position pos:line="22" pos:column="40"/></expr_stmt>
	}<pos:position pos:line="23" pos:column="10"/></block></then> <else pos:line="23" pos:column="11">else
<cpp:endif pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">endif<pos:position pos:line="24" pos:column="7"/></cpp:directive></cpp:endif>
		<block type="pseudo"><expr_stmt><expr><name pos:line="25" pos:column="17">needed<pos:position pos:line="25" pos:column="23"/></name> <operator pos:line="25" pos:column="24">=<pos:position pos:line="25" pos:column="25"/></operator> <name pos:line="25" pos:column="26">len<pos:position pos:line="25" pos:column="29"/></name> <operator pos:line="25" pos:column="30">+<pos:position pos:line="25" pos:column="31"/></operator> <literal type="number" pos:line="25" pos:column="32">4<pos:position pos:line="25" pos:column="33"/></literal> <operator pos:line="25" pos:column="34">+<pos:position pos:line="25" pos:column="35"/></operator> <literal type="number" pos:line="25" pos:column="36">3<pos:position pos:line="25" pos:column="37"/></literal></expr>;<pos:position pos:line="25" pos:column="38"/></expr_stmt></block></else></if>
	<if pos:line="26" pos:column="9">if <condition pos:line="26" pos:column="12">(<expr><name><name pos:line="26" pos:column="13">iobuf<pos:position pos:line="26" pos:column="18"/></name><operator pos:line="26" pos:column="18">.<pos:position pos:line="26" pos:column="19"/></operator><name pos:line="26" pos:column="19">msg<pos:position pos:line="26" pos:column="22"/></name><operator pos:line="26" pos:column="22">.<pos:position pos:line="26" pos:column="23"/></operator><name pos:line="26" pos:column="23">len<pos:position pos:line="26" pos:column="26"/></name></name> <operator pos:line="26" pos:column="27">+<pos:position pos:line="26" pos:column="28"/></operator> <name pos:line="26" pos:column="29">needed<pos:position pos:line="26" pos:column="35"/></name> <operator pos:line="26" pos:column="36">&gt;<pos:position pos:line="26" pos:column="40"/></operator> <name><name pos:line="26" pos:column="38">iobuf<pos:position pos:line="26" pos:column="43"/></name><operator pos:line="26" pos:column="43">.<pos:position pos:line="26" pos:column="44"/></operator><name pos:line="26" pos:column="44">msg<pos:position pos:line="26" pos:column="47"/></name><operator pos:line="26" pos:column="47">.<pos:position pos:line="26" pos:column="48"/></operator><name pos:line="26" pos:column="48">size<pos:position pos:line="26" pos:column="52"/></name></name></expr>)<pos:position pos:line="26" pos:column="53"/></condition><then pos:line="26" pos:column="53">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="27" pos:column="17">perform_io<pos:position pos:line="27" pos:column="27"/></name><argument_list pos:line="27" pos:column="27">(<argument><expr><name pos:line="27" pos:column="28">needed<pos:position pos:line="27" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="36">PIO_NEED_MSGROOM<pos:position pos:line="27" pos:column="52"/></name></expr></argument>)<pos:position pos:line="27" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="54"/></expr_stmt></block></then></if>

	<expr_stmt><expr><name pos:line="29" pos:column="9">pos<pos:position pos:line="29" pos:column="12"/></name> <operator pos:line="29" pos:column="13">=<pos:position pos:line="29" pos:column="14"/></operator> <name><name pos:line="29" pos:column="15">iobuf<pos:position pos:line="29" pos:column="20"/></name><operator pos:line="29" pos:column="20">.<pos:position pos:line="29" pos:column="21"/></operator><name pos:line="29" pos:column="21">msg<pos:position pos:line="29" pos:column="24"/></name><operator pos:line="29" pos:column="24">.<pos:position pos:line="29" pos:column="25"/></operator><name pos:line="29" pos:column="25">pos<pos:position pos:line="29" pos:column="28"/></name></name> <operator pos:line="29" pos:column="29">+<pos:position pos:line="29" pos:column="30"/></operator> <name><name pos:line="29" pos:column="31">iobuf<pos:position pos:line="29" pos:column="36"/></name><operator pos:line="29" pos:column="36">.<pos:position pos:line="29" pos:column="37"/></operator><name pos:line="29" pos:column="37">msg<pos:position pos:line="29" pos:column="40"/></name><operator pos:line="29" pos:column="40">.<pos:position pos:line="29" pos:column="41"/></operator><name pos:line="29" pos:column="41">len<pos:position pos:line="29" pos:column="44"/></name></name></expr>;<pos:position pos:line="29" pos:column="45"/></expr_stmt> <comment type="block" pos:line="29" pos:column="46">/* Must be set after any flushing. */</comment>
	<if pos:line="30" pos:column="9">if <condition pos:line="30" pos:column="12">(<expr><name pos:line="30" pos:column="13">pos<pos:position pos:line="30" pos:column="16"/></name> <operator pos:line="30" pos:column="17">&gt;=<pos:position pos:line="30" pos:column="22"/></operator> <name><name pos:line="30" pos:column="20">iobuf<pos:position pos:line="30" pos:column="25"/></name><operator pos:line="30" pos:column="25">.<pos:position pos:line="30" pos:column="26"/></operator><name pos:line="30" pos:column="26">msg<pos:position pos:line="30" pos:column="29"/></name><operator pos:line="30" pos:column="29">.<pos:position pos:line="30" pos:column="30"/></operator><name pos:line="30" pos:column="30">size<pos:position pos:line="30" pos:column="34"/></name></name></expr>)<pos:position pos:line="30" pos:column="35"/></condition><then pos:line="30" pos:column="35">
		<block type="pseudo"><expr_stmt><expr><name pos:line="31" pos:column="17">pos<pos:position pos:line="31" pos:column="20"/></name> <operator pos:line="31" pos:column="21">-=<pos:position pos:line="31" pos:column="23"/></operator> <name><name pos:line="31" pos:column="24">iobuf<pos:position pos:line="31" pos:column="29"/></name><operator pos:line="31" pos:column="29">.<pos:position pos:line="31" pos:column="30"/></operator><name pos:line="31" pos:column="30">msg<pos:position pos:line="31" pos:column="33"/></name><operator pos:line="31" pos:column="33">.<pos:position pos:line="31" pos:column="34"/></operator><name pos:line="31" pos:column="34">size<pos:position pos:line="31" pos:column="38"/></name></name></expr>;<pos:position pos:line="31" pos:column="39"/></expr_stmt></block></then>
	<elseif pos:line="32" pos:column="9">else <if pos:line="32" pos:column="14">if <condition pos:line="32" pos:column="17">(<expr><name pos:line="32" pos:column="18">pos<pos:position pos:line="32" pos:column="21"/></name> <operator pos:line="32" pos:column="22">+<pos:position pos:line="32" pos:column="23"/></operator> <literal type="number" pos:line="32" pos:column="24">4<pos:position pos:line="32" pos:column="25"/></literal> <operator pos:line="32" pos:column="26">&gt;<pos:position pos:line="32" pos:column="30"/></operator> <name><name pos:line="32" pos:column="28">iobuf<pos:position pos:line="32" pos:column="33"/></name><operator pos:line="32" pos:column="33">.<pos:position pos:line="32" pos:column="34"/></operator><name pos:line="32" pos:column="34">msg<pos:position pos:line="32" pos:column="37"/></name><operator pos:line="32" pos:column="37">.<pos:position pos:line="32" pos:column="38"/></operator><name pos:line="32" pos:column="38">size<pos:position pos:line="32" pos:column="42"/></name></name></expr>)<pos:position pos:line="32" pos:column="43"/></condition><then pos:line="32" pos:column="43"> <block pos:line="32" pos:column="44">{
		<comment type="block" pos:line="33" pos:column="17">/* The 4-byte header won't fit at the end of the buffer,
		 * so we'll temporarily reduce the message buffer's size
		 * and put the header at the start of the buffer. */</comment>
		<expr_stmt><expr><call><name pos:line="36" pos:column="17">reduce_iobuf_size<pos:position pos:line="36" pos:column="34"/></name><argument_list pos:line="36" pos:column="34">(<argument><expr><operator pos:line="36" pos:column="35">&amp;<pos:position pos:line="36" pos:column="40"/></operator><name><name pos:line="36" pos:column="36">iobuf<pos:position pos:line="36" pos:column="41"/></name><operator pos:line="36" pos:column="41">.<pos:position pos:line="36" pos:column="42"/></operator><name pos:line="36" pos:column="42">msg<pos:position pos:line="36" pos:column="45"/></name></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="47">pos<pos:position pos:line="36" pos:column="50"/></name></expr></argument>)<pos:position pos:line="36" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="52"/></expr_stmt>
		<expr_stmt><expr><name pos:line="37" pos:column="17">pos<pos:position pos:line="37" pos:column="20"/></name> <operator pos:line="37" pos:column="21">=<pos:position pos:line="37" pos:column="22"/></operator> <literal type="number" pos:line="37" pos:column="23">0<pos:position pos:line="37" pos:column="24"/></literal></expr>;<pos:position pos:line="37" pos:column="25"/></expr_stmt>
	}<pos:position pos:line="38" pos:column="10"/></block></then></if></elseif></if>
	<expr_stmt><expr><name pos:line="39" pos:column="9">hdr<pos:position pos:line="39" pos:column="12"/></name> <operator pos:line="39" pos:column="13">=<pos:position pos:line="39" pos:column="14"/></operator> <name><name pos:line="39" pos:column="15">iobuf<pos:position pos:line="39" pos:column="20"/></name><operator pos:line="39" pos:column="20">.<pos:position pos:line="39" pos:column="21"/></operator><name pos:line="39" pos:column="21">msg<pos:position pos:line="39" pos:column="24"/></name><operator pos:line="39" pos:column="24">.<pos:position pos:line="39" pos:column="25"/></operator><name pos:line="39" pos:column="25">buf<pos:position pos:line="39" pos:column="28"/></name></name> <operator pos:line="39" pos:column="29">+<pos:position pos:line="39" pos:column="30"/></operator> <name pos:line="39" pos:column="31">pos<pos:position pos:line="39" pos:column="34"/></name></expr>;<pos:position pos:line="39" pos:column="35"/></expr_stmt>

	<expr_stmt><expr><name><name pos:line="41" pos:column="9">iobuf<pos:position pos:line="41" pos:column="14"/></name><operator pos:line="41" pos:column="14">.<pos:position pos:line="41" pos:column="15"/></operator><name pos:line="41" pos:column="15">msg<pos:position pos:line="41" pos:column="18"/></name><operator pos:line="41" pos:column="18">.<pos:position pos:line="41" pos:column="19"/></operator><name pos:line="41" pos:column="19">len<pos:position pos:line="41" pos:column="22"/></name></name> <operator pos:line="41" pos:column="23">+=<pos:position pos:line="41" pos:column="25"/></operator> <literal type="number" pos:line="41" pos:column="26">4<pos:position pos:line="41" pos:column="27"/></literal></expr>;<pos:position pos:line="41" pos:column="28"/></expr_stmt> <comment type="block" pos:line="41" pos:column="29">/* Allocate room for the coming header bytes. */</comment>

<cpp:ifdef pos:line="43" pos:column="1">#<cpp:directive pos:line="43" pos:column="2">ifdef<pos:position pos:line="43" pos:column="7"/></cpp:directive> <name pos:line="43" pos:column="8">ICONV_OPTION<pos:position pos:line="43" pos:column="20"/></name></cpp:ifdef>
	<if pos:line="44" pos:column="9">if <condition pos:line="44" pos:column="12">(<expr><name pos:line="44" pos:column="13">convert<pos:position pos:line="44" pos:column="20"/></name> <operator pos:line="44" pos:column="21">&gt;<pos:position pos:line="44" pos:column="25"/></operator> <literal type="number" pos:line="44" pos:column="23">0<pos:position pos:line="44" pos:column="24"/></literal></expr>)<pos:position pos:line="44" pos:column="25"/></condition><then pos:line="44" pos:column="25"> <block pos:line="44" pos:column="26">{
		<decl_stmt><decl><type><name pos:line="45" pos:column="17">xbuf<pos:position pos:line="45" pos:column="21"/></name></type> <name pos:line="45" pos:column="22">inbuf<pos:position pos:line="45" pos:column="27"/></name></decl>;<pos:position pos:line="45" pos:column="28"/></decl_stmt>

		<expr_stmt><expr><call><name pos:line="47" pos:column="17">INIT_XBUF<pos:position pos:line="47" pos:column="26"/></name><argument_list pos:line="47" pos:column="26">(<argument><expr><name pos:line="47" pos:column="27">inbuf<pos:position pos:line="47" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="47" pos:column="34">(<pos:position pos:line="47" pos:column="35"/></operator><name pos:line="47" pos:column="35">char<pos:position pos:line="47" pos:column="39"/></name><operator pos:line="47" pos:column="39">*<pos:position pos:line="47" pos:column="40"/></operator><operator pos:line="47" pos:column="40">)<pos:position pos:line="47" pos:column="41"/></operator><name pos:line="47" pos:column="41">buf<pos:position pos:line="47" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="46">len<pos:position pos:line="47" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="47" pos:column="51">(<pos:position pos:line="47" pos:column="52"/></operator><name pos:line="47" pos:column="52">size_t<pos:position pos:line="47" pos:column="58"/></name><operator pos:line="47" pos:column="58">)<pos:position pos:line="47" pos:column="59"/></operator><operator pos:line="47" pos:column="59">-<pos:position pos:line="47" pos:column="60"/></operator><literal type="number" pos:line="47" pos:column="60">1<pos:position pos:line="47" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="63"/></expr_stmt>

		<expr_stmt><expr><name pos:line="49" pos:column="17">len<pos:position pos:line="49" pos:column="20"/></name> <operator pos:line="49" pos:column="21">=<pos:position pos:line="49" pos:column="22"/></operator> <name><name pos:line="49" pos:column="23">iobuf<pos:position pos:line="49" pos:column="28"/></name><operator pos:line="49" pos:column="28">.<pos:position pos:line="49" pos:column="29"/></operator><name pos:line="49" pos:column="29">msg<pos:position pos:line="49" pos:column="32"/></name><operator pos:line="49" pos:column="32">.<pos:position pos:line="49" pos:column="33"/></operator><name pos:line="49" pos:column="33">len<pos:position pos:line="49" pos:column="36"/></name></name></expr>;<pos:position pos:line="49" pos:column="37"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="50" pos:column="17">iconvbufs<pos:position pos:line="50" pos:column="26"/></name><argument_list pos:line="50" pos:column="26">(<argument><expr><name pos:line="50" pos:column="27">ic_send<pos:position pos:line="50" pos:column="34"/></name></expr></argument>, <argument><expr><operator pos:line="50" pos:column="36">&amp;<pos:position pos:line="50" pos:column="41"/></operator><name pos:line="50" pos:column="37">inbuf<pos:position pos:line="50" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="50" pos:column="44">&amp;<pos:position pos:line="50" pos:column="49"/></operator><name><name pos:line="50" pos:column="45">iobuf<pos:position pos:line="50" pos:column="50"/></name><operator pos:line="50" pos:column="50">.<pos:position pos:line="50" pos:column="51"/></operator><name pos:line="50" pos:column="51">msg<pos:position pos:line="50" pos:column="54"/></name></name></expr></argument>,
			  <argument><expr><name pos:line="51" pos:column="27">ICB_INCLUDE_BAD<pos:position pos:line="51" pos:column="42"/></name> <operator pos:line="51" pos:column="43">|<pos:position pos:line="51" pos:column="44"/></operator> <name pos:line="51" pos:column="45">ICB_INCLUDE_INCOMPLETE<pos:position pos:line="51" pos:column="67"/></name> <operator pos:line="51" pos:column="68">|<pos:position pos:line="51" pos:column="69"/></operator> <name pos:line="51" pos:column="70">ICB_CIRCULAR_OUT<pos:position pos:line="51" pos:column="86"/></name> <operator pos:line="51" pos:column="87">|<pos:position pos:line="51" pos:column="88"/></operator> <name pos:line="51" pos:column="89">ICB_INIT<pos:position pos:line="51" pos:column="97"/></name></expr></argument>)<pos:position pos:line="51" pos:column="98"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="99"/></expr_stmt>
		<if pos:line="52" pos:column="17">if <condition pos:line="52" pos:column="20">(<expr><name><name pos:line="52" pos:column="21">inbuf<pos:position pos:line="52" pos:column="26"/></name><operator pos:line="52" pos:column="26">.<pos:position pos:line="52" pos:column="27"/></operator><name pos:line="52" pos:column="27">len<pos:position pos:line="52" pos:column="30"/></name></name> <operator pos:line="52" pos:column="31">&gt;<pos:position pos:line="52" pos:column="35"/></operator> <literal type="number" pos:line="52" pos:column="33">0<pos:position pos:line="52" pos:column="34"/></literal></expr>)<pos:position pos:line="52" pos:column="35"/></condition><then pos:line="52" pos:column="35"> <block pos:line="52" pos:column="36">{
			<expr_stmt><expr><call><name pos:line="53" pos:column="25">rprintf<pos:position pos:line="53" pos:column="32"/></name><argument_list pos:line="53" pos:column="32">(<argument><expr><name pos:line="53" pos:column="33">FERROR<pos:position pos:line="53" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="53" pos:column="41">"overflowed iobuf.msg buffer in send_msg"<pos:position pos:line="53" pos:column="82"/></literal></expr></argument>)<pos:position pos:line="53" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="84"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="54" pos:column="25">exit_cleanup<pos:position pos:line="54" pos:column="37"/></name><argument_list pos:line="54" pos:column="37">(<argument><expr><name pos:line="54" pos:column="38">RERR_UNSUPPORTED<pos:position pos:line="54" pos:column="54"/></name></expr></argument>)<pos:position pos:line="54" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="56"/></expr_stmt>
		}<pos:position pos:line="55" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name pos:line="56" pos:column="17">len<pos:position pos:line="56" pos:column="20"/></name> <operator pos:line="56" pos:column="21">=<pos:position pos:line="56" pos:column="22"/></operator> <name><name pos:line="56" pos:column="23">iobuf<pos:position pos:line="56" pos:column="28"/></name><operator pos:line="56" pos:column="28">.<pos:position pos:line="56" pos:column="29"/></operator><name pos:line="56" pos:column="29">msg<pos:position pos:line="56" pos:column="32"/></name><operator pos:line="56" pos:column="32">.<pos:position pos:line="56" pos:column="33"/></operator><name pos:line="56" pos:column="33">len<pos:position pos:line="56" pos:column="36"/></name></name> <operator pos:line="56" pos:column="37">-<pos:position pos:line="56" pos:column="38"/></operator> <name pos:line="56" pos:column="39">len<pos:position pos:line="56" pos:column="42"/></name></expr>;<pos:position pos:line="56" pos:column="43"/></expr_stmt>
	}<pos:position pos:line="57" pos:column="10"/></block></then> <else pos:line="57" pos:column="11">else
<cpp:endif pos:line="58" pos:column="1">#<cpp:directive pos:line="58" pos:column="2">endif<pos:position pos:line="58" pos:column="7"/></cpp:directive></cpp:endif>
	<block pos:line="59" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="60" pos:column="17">size_t<pos:position pos:line="60" pos:column="23"/></name></type> <name pos:line="60" pos:column="24">siz<pos:position pos:line="60" pos:column="27"/></name></decl>;<pos:position pos:line="60" pos:column="28"/></decl_stmt>

		<if pos:line="62" pos:column="17">if <condition pos:line="62" pos:column="20">(<expr><operator pos:line="62" pos:column="21">(<pos:position pos:line="62" pos:column="22"/></operator><name pos:line="62" pos:column="22">pos<pos:position pos:line="62" pos:column="25"/></name> <operator pos:line="62" pos:column="26">+=<pos:position pos:line="62" pos:column="28"/></operator> <literal type="number" pos:line="62" pos:column="29">4<pos:position pos:line="62" pos:column="30"/></literal><operator pos:line="62" pos:column="30">)<pos:position pos:line="62" pos:column="31"/></operator> <operator pos:line="62" pos:column="32">==<pos:position pos:line="62" pos:column="34"/></operator> <name><name pos:line="62" pos:column="35">iobuf<pos:position pos:line="62" pos:column="40"/></name><operator pos:line="62" pos:column="40">.<pos:position pos:line="62" pos:column="41"/></operator><name pos:line="62" pos:column="41">msg<pos:position pos:line="62" pos:column="44"/></name><operator pos:line="62" pos:column="44">.<pos:position pos:line="62" pos:column="45"/></operator><name pos:line="62" pos:column="45">size<pos:position pos:line="62" pos:column="49"/></name></name></expr>)<pos:position pos:line="62" pos:column="50"/></condition><then pos:line="62" pos:column="50">
			<block type="pseudo"><expr_stmt><expr><name pos:line="63" pos:column="25">pos<pos:position pos:line="63" pos:column="28"/></name> <operator pos:line="63" pos:column="29">=<pos:position pos:line="63" pos:column="30"/></operator> <literal type="number" pos:line="63" pos:column="31">0<pos:position pos:line="63" pos:column="32"/></literal></expr>;<pos:position pos:line="63" pos:column="33"/></expr_stmt></block></then></if>

		<comment type="block" pos:line="65" pos:column="17">/* Handle a split copy if we wrap around the end of the circular buffer. */</comment>
		<if pos:line="66" pos:column="17">if <condition pos:line="66" pos:column="20">(<expr><name pos:line="66" pos:column="21">pos<pos:position pos:line="66" pos:column="24"/></name> <operator pos:line="66" pos:column="25">&gt;=<pos:position pos:line="66" pos:column="30"/></operator> <name><name pos:line="66" pos:column="28">iobuf<pos:position pos:line="66" pos:column="33"/></name><operator pos:line="66" pos:column="33">.<pos:position pos:line="66" pos:column="34"/></operator><name pos:line="66" pos:column="34">msg<pos:position pos:line="66" pos:column="37"/></name><operator pos:line="66" pos:column="37">.<pos:position pos:line="66" pos:column="38"/></operator><name pos:line="66" pos:column="38">pos<pos:position pos:line="66" pos:column="41"/></name></name> <operator pos:line="66" pos:column="42">&amp;&amp;<pos:position pos:line="66" pos:column="52"/></operator> <operator pos:line="66" pos:column="45">(<pos:position pos:line="66" pos:column="46"/></operator><name pos:line="66" pos:column="46">siz<pos:position pos:line="66" pos:column="49"/></name> <operator pos:line="66" pos:column="50">=<pos:position pos:line="66" pos:column="51"/></operator> <name><name pos:line="66" pos:column="52">iobuf<pos:position pos:line="66" pos:column="57"/></name><operator pos:line="66" pos:column="57">.<pos:position pos:line="66" pos:column="58"/></operator><name pos:line="66" pos:column="58">msg<pos:position pos:line="66" pos:column="61"/></name><operator pos:line="66" pos:column="61">.<pos:position pos:line="66" pos:column="62"/></operator><name pos:line="66" pos:column="62">size<pos:position pos:line="66" pos:column="66"/></name></name> <operator pos:line="66" pos:column="67">-<pos:position pos:line="66" pos:column="68"/></operator> <name pos:line="66" pos:column="69">pos<pos:position pos:line="66" pos:column="72"/></name><operator pos:line="66" pos:column="72">)<pos:position pos:line="66" pos:column="73"/></operator> <operator pos:line="66" pos:column="74">&lt;<pos:position pos:line="66" pos:column="78"/></operator> <name pos:line="66" pos:column="76">len<pos:position pos:line="66" pos:column="79"/></name></expr>)<pos:position pos:line="66" pos:column="80"/></condition><then pos:line="66" pos:column="80"> <block pos:line="66" pos:column="81">{
			<expr_stmt><expr><call><name pos:line="67" pos:column="25">memcpy<pos:position pos:line="67" pos:column="31"/></name><argument_list pos:line="67" pos:column="31">(<argument><expr><name><name pos:line="67" pos:column="32">iobuf<pos:position pos:line="67" pos:column="37"/></name><operator pos:line="67" pos:column="37">.<pos:position pos:line="67" pos:column="38"/></operator><name pos:line="67" pos:column="38">msg<pos:position pos:line="67" pos:column="41"/></name><operator pos:line="67" pos:column="41">.<pos:position pos:line="67" pos:column="42"/></operator><name pos:line="67" pos:column="42">buf<pos:position pos:line="67" pos:column="45"/></name></name> <operator pos:line="67" pos:column="46">+<pos:position pos:line="67" pos:column="47"/></operator> <name pos:line="67" pos:column="48">pos<pos:position pos:line="67" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="67" pos:column="53">buf<pos:position pos:line="67" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="67" pos:column="58">siz<pos:position pos:line="67" pos:column="61"/></name></expr></argument>)<pos:position pos:line="67" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="63"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="68" pos:column="25">memcpy<pos:position pos:line="68" pos:column="31"/></name><argument_list pos:line="68" pos:column="31">(<argument><expr><name><name pos:line="68" pos:column="32">iobuf<pos:position pos:line="68" pos:column="37"/></name><operator pos:line="68" pos:column="37">.<pos:position pos:line="68" pos:column="38"/></operator><name pos:line="68" pos:column="38">msg<pos:position pos:line="68" pos:column="41"/></name><operator pos:line="68" pos:column="41">.<pos:position pos:line="68" pos:column="42"/></operator><name pos:line="68" pos:column="42">buf<pos:position pos:line="68" pos:column="45"/></name></name></expr></argument>, <argument><expr><name pos:line="68" pos:column="47">buf<pos:position pos:line="68" pos:column="50"/></name> <operator pos:line="68" pos:column="51">+<pos:position pos:line="68" pos:column="52"/></operator> <name pos:line="68" pos:column="53">siz<pos:position pos:line="68" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="68" pos:column="58">len<pos:position pos:line="68" pos:column="61"/></name> <operator pos:line="68" pos:column="62">-<pos:position pos:line="68" pos:column="63"/></operator> <name pos:line="68" pos:column="64">siz<pos:position pos:line="68" pos:column="67"/></name></expr></argument>)<pos:position pos:line="68" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="69"/></expr_stmt>
		}<pos:position pos:line="69" pos:column="18"/></block></then> <else pos:line="69" pos:column="19">else
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="70" pos:column="25">memcpy<pos:position pos:line="70" pos:column="31"/></name><argument_list pos:line="70" pos:column="31">(<argument><expr><name><name pos:line="70" pos:column="32">iobuf<pos:position pos:line="70" pos:column="37"/></name><operator pos:line="70" pos:column="37">.<pos:position pos:line="70" pos:column="38"/></operator><name pos:line="70" pos:column="38">msg<pos:position pos:line="70" pos:column="41"/></name><operator pos:line="70" pos:column="41">.<pos:position pos:line="70" pos:column="42"/></operator><name pos:line="70" pos:column="42">buf<pos:position pos:line="70" pos:column="45"/></name></name> <operator pos:line="70" pos:column="46">+<pos:position pos:line="70" pos:column="47"/></operator> <name pos:line="70" pos:column="48">pos<pos:position pos:line="70" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="70" pos:column="53">buf<pos:position pos:line="70" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="70" pos:column="58">len<pos:position pos:line="70" pos:column="61"/></name></expr></argument>)<pos:position pos:line="70" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="63"/></expr_stmt></block></else></if>

		<expr_stmt><expr><name><name pos:line="72" pos:column="17">iobuf<pos:position pos:line="72" pos:column="22"/></name><operator pos:line="72" pos:column="22">.<pos:position pos:line="72" pos:column="23"/></operator><name pos:line="72" pos:column="23">msg<pos:position pos:line="72" pos:column="26"/></name><operator pos:line="72" pos:column="26">.<pos:position pos:line="72" pos:column="27"/></operator><name pos:line="72" pos:column="27">len<pos:position pos:line="72" pos:column="30"/></name></name> <operator pos:line="72" pos:column="31">+=<pos:position pos:line="72" pos:column="33"/></operator> <name pos:line="72" pos:column="34">len<pos:position pos:line="72" pos:column="37"/></name></expr>;<pos:position pos:line="72" pos:column="38"/></expr_stmt>
	}<pos:position pos:line="73" pos:column="10"/></block></else></if>

	<expr_stmt><expr><call><name pos:line="75" pos:column="9">SIVAL<pos:position pos:line="75" pos:column="14"/></name><argument_list pos:line="75" pos:column="14">(<argument><expr><name pos:line="75" pos:column="15">hdr<pos:position pos:line="75" pos:column="18"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="75" pos:column="20">0<pos:position pos:line="75" pos:column="21"/></literal></expr></argument>, <argument><expr><operator pos:line="75" pos:column="23">(<pos:position pos:line="75" pos:column="24"/></operator><operator pos:line="75" pos:column="24">(<pos:position pos:line="75" pos:column="25"/></operator><name pos:line="75" pos:column="25">MPLEX_BASE<pos:position pos:line="75" pos:column="35"/></name> <operator pos:line="75" pos:column="36">+<pos:position pos:line="75" pos:column="37"/></operator> <operator pos:line="75" pos:column="38">(<pos:position pos:line="75" pos:column="39"/></operator><name pos:line="75" pos:column="39">int<pos:position pos:line="75" pos:column="42"/></name><operator pos:line="75" pos:column="42">)<pos:position pos:line="75" pos:column="43"/></operator><name pos:line="75" pos:column="43">code<pos:position pos:line="75" pos:column="47"/></name><operator pos:line="75" pos:column="47">)<pos:position pos:line="75" pos:column="48"/></operator><operator pos:line="75" pos:column="48">&lt;&lt;<pos:position pos:line="75" pos:column="56"/></operator><literal type="number" pos:line="75" pos:column="50">24<pos:position pos:line="75" pos:column="52"/></literal><operator pos:line="75" pos:column="52">)<pos:position pos:line="75" pos:column="53"/></operator> <operator pos:line="75" pos:column="54">+<pos:position pos:line="75" pos:column="55"/></operator> <name pos:line="75" pos:column="56">len<pos:position pos:line="75" pos:column="59"/></name></expr></argument>)<pos:position pos:line="75" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="61"/></expr_stmt>

	<if pos:line="77" pos:column="9">if <condition pos:line="77" pos:column="12">(<expr><name pos:line="77" pos:column="13">want_debug<pos:position pos:line="77" pos:column="23"/></name> <operator pos:line="77" pos:column="24">&amp;&amp;<pos:position pos:line="77" pos:column="34"/></operator> <name pos:line="77" pos:column="27">convert<pos:position pos:line="77" pos:column="34"/></name> <operator pos:line="77" pos:column="35">&gt;<pos:position pos:line="77" pos:column="39"/></operator> <literal type="number" pos:line="77" pos:column="37">0<pos:position pos:line="77" pos:column="38"/></literal></expr>)<pos:position pos:line="77" pos:column="39"/></condition><then pos:line="77" pos:column="39">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="78" pos:column="17">rprintf<pos:position pos:line="78" pos:column="24"/></name><argument_list pos:line="78" pos:column="24">(<argument><expr><name pos:line="78" pos:column="25">FINFO<pos:position pos:line="78" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="78" pos:column="32">"[%s] converted msg len=%ld\n"<pos:position pos:line="78" pos:column="62"/></literal></expr></argument>, <argument><expr><call><name pos:line="78" pos:column="64">who_am_i<pos:position pos:line="78" pos:column="72"/></name><argument_list pos:line="78" pos:column="72">()<pos:position pos:line="78" pos:column="74"/></argument_list></call></expr></argument>, <argument><expr><operator pos:line="78" pos:column="76">(<pos:position pos:line="78" pos:column="77"/></operator><name pos:line="78" pos:column="77">long<pos:position pos:line="78" pos:column="81"/></name><operator pos:line="78" pos:column="81">)<pos:position pos:line="78" pos:column="82"/></operator><name pos:line="78" pos:column="82">len<pos:position pos:line="78" pos:column="85"/></name></expr></argument>)<pos:position pos:line="78" pos:column="86"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="87"/></expr_stmt></block></then></if>

	<return pos:line="80" pos:column="9">return <expr><literal type="number" pos:line="80" pos:column="16">1<pos:position pos:line="80" pos:column="17"/></literal></expr>;<pos:position pos:line="80" pos:column="18"/></return>
}<pos:position pos:line="81" pos:column="2"/></block></function></unit>
