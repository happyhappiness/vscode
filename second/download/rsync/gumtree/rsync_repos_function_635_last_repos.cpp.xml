<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_635_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">makefixed<pos:position pos:line="1" pos:column="15"/></name><parameter_list pos:line="1" pos:column="15">()<pos:position pos:line="1" pos:column="17"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">unsigned<pos:position pos:line="3" pos:column="13"/></name></type> <name pos:line="3" pos:column="14">low<pos:position pos:line="3" pos:column="17"/></name></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="19">size<pos:position pos:line="3" pos:column="23"/></name></decl>;<pos:position pos:line="3" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="4" pos:column="5">struct<pos:position pos:line="4" pos:column="11"/></name> <name pos:line="4" pos:column="12">inflate_state<pos:position pos:line="4" pos:column="25"/></name></name></type> <name pos:line="4" pos:column="26">state<pos:position pos:line="4" pos:column="31"/></name></decl>;<pos:position pos:line="4" pos:column="32"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="6" pos:column="5">fixedtables<pos:position pos:line="6" pos:column="16"/></name><argument_list pos:line="6" pos:column="16">(<argument><expr><operator pos:line="6" pos:column="17">&amp;<pos:position pos:line="6" pos:column="22"/></operator><name pos:line="6" pos:column="18">state<pos:position pos:line="6" pos:column="23"/></name></expr></argument>)<pos:position pos:line="6" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="7" pos:column="5">puts<pos:position pos:line="7" pos:column="9"/></name><argument_list pos:line="7" pos:column="9">(<argument><expr><literal type="string" pos:line="7" pos:column="10">"    /* inffixed.h -- table for decoding fixed codes"<pos:position pos:line="7" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="65"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="8" pos:column="5">puts<pos:position pos:line="8" pos:column="9"/></name><argument_list pos:line="8" pos:column="9">(<argument><expr><literal type="string" pos:line="8" pos:column="10">"     * Generated automatically by makefixed()."<pos:position pos:line="8" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="60"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="9" pos:column="5">puts<pos:position pos:line="9" pos:column="9"/></name><argument_list pos:line="9" pos:column="9">(<argument><expr><literal type="string" pos:line="9" pos:column="10">"     */"<pos:position pos:line="9" pos:column="19"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="21"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="10" pos:column="5">puts<pos:position pos:line="10" pos:column="9"/></name><argument_list pos:line="10" pos:column="9">(<argument><expr><literal type="string" pos:line="10" pos:column="10">""<pos:position pos:line="10" pos:column="12"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="13"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="14"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="11" pos:column="5">puts<pos:position pos:line="11" pos:column="9"/></name><argument_list pos:line="11" pos:column="9">(<argument><expr><literal type="string" pos:line="11" pos:column="10">"    /* WARNING: this file should *not* be used by applications."<pos:position pos:line="11" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="77"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="12" pos:column="5">puts<pos:position pos:line="12" pos:column="9"/></name><argument_list pos:line="12" pos:column="9">(<argument><expr><literal type="string" pos:line="12" pos:column="10">"       It is part of the implementation of this library and is"<pos:position pos:line="12" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="76"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="13" pos:column="5">puts<pos:position pos:line="13" pos:column="9"/></name><argument_list pos:line="13" pos:column="9">(<argument><expr><literal type="string" pos:line="13" pos:column="10">"       subject to change. Applications should only use zlib.h."<pos:position pos:line="13" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="76"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="14" pos:column="5">puts<pos:position pos:line="14" pos:column="9"/></name><argument_list pos:line="14" pos:column="9">(<argument><expr><literal type="string" pos:line="14" pos:column="10">"     */"<pos:position pos:line="14" pos:column="19"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="21"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="15" pos:column="5">puts<pos:position pos:line="15" pos:column="9"/></name><argument_list pos:line="15" pos:column="9">(<argument><expr><literal type="string" pos:line="15" pos:column="10">""<pos:position pos:line="15" pos:column="12"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="13"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="14"/></expr_stmt>
    <expr_stmt><expr><name pos:line="16" pos:column="5">size<pos:position pos:line="16" pos:column="9"/></name> <operator pos:line="16" pos:column="10">=<pos:position pos:line="16" pos:column="11"/></operator> <literal type="number" pos:line="16" pos:column="12">1U<pos:position pos:line="16" pos:column="14"/></literal> <operator pos:line="16" pos:column="15">&lt;&lt;<pos:position pos:line="16" pos:column="23"/></operator> <literal type="number" pos:line="16" pos:column="18">9<pos:position pos:line="16" pos:column="19"/></literal></expr>;<pos:position pos:line="16" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="17" pos:column="5">printf<pos:position pos:line="17" pos:column="11"/></name><argument_list pos:line="17" pos:column="11">(<argument><expr><literal type="string" pos:line="17" pos:column="12">"    static const code lenfix[%u] = {"<pos:position pos:line="17" pos:column="50"/></literal></expr></argument>, <argument><expr><name pos:line="17" pos:column="52">size<pos:position pos:line="17" pos:column="56"/></name></expr></argument>)<pos:position pos:line="17" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="58"/></expr_stmt>
    <expr_stmt><expr><name pos:line="18" pos:column="5">low<pos:position pos:line="18" pos:column="8"/></name> <operator pos:line="18" pos:column="9">=<pos:position pos:line="18" pos:column="10"/></operator> <literal type="number" pos:line="18" pos:column="11">0<pos:position pos:line="18" pos:column="12"/></literal></expr>;<pos:position pos:line="18" pos:column="13"/></expr_stmt>
    <for pos:line="19" pos:column="5">for <control pos:line="19" pos:column="9">(<init pos:line="19" pos:column="10">;<pos:position pos:line="19" pos:column="11"/></init><condition pos:line="19" pos:column="11">;<pos:position pos:line="19" pos:column="12"/></condition><incr/>)<pos:position pos:line="19" pos:column="13"/></control> <block pos:line="19" pos:column="14">{
        <if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><operator pos:line="20" pos:column="13">(<pos:position pos:line="20" pos:column="14"/></operator><name pos:line="20" pos:column="14">low<pos:position pos:line="20" pos:column="17"/></name> <operator pos:line="20" pos:column="18">%<pos:position pos:line="20" pos:column="19"/></operator> <literal type="number" pos:line="20" pos:column="20">7<pos:position pos:line="20" pos:column="21"/></literal><operator pos:line="20" pos:column="21">)<pos:position pos:line="20" pos:column="22"/></operator> <operator pos:line="20" pos:column="23">==<pos:position pos:line="20" pos:column="25"/></operator> <literal type="number" pos:line="20" pos:column="26">0<pos:position pos:line="20" pos:column="27"/></literal></expr>)<pos:position pos:line="20" pos:column="28"/></condition><then pos:line="20" pos:column="28"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="20" pos:column="29">printf<pos:position pos:line="20" pos:column="35"/></name><argument_list pos:line="20" pos:column="35">(<argument><expr><literal type="string" pos:line="20" pos:column="36">"\n        "<pos:position pos:line="20" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="50"/></expr_stmt></block></then></if>
        <expr_stmt><expr><call><name pos:line="21" pos:column="9">printf<pos:position pos:line="21" pos:column="15"/></name><argument_list pos:line="21" pos:column="15">(<argument><expr><literal type="string" pos:line="21" pos:column="16">"{%u,%u,%d}"<pos:position pos:line="21" pos:column="28"/></literal></expr></argument>, <argument><expr><ternary><condition><expr><operator pos:line="21" pos:column="30">(<pos:position pos:line="21" pos:column="31"/></operator><name pos:line="21" pos:column="31">low<pos:position pos:line="21" pos:column="34"/></name> <operator pos:line="21" pos:column="35">&amp;<pos:position pos:line="21" pos:column="40"/></operator> <literal type="number" pos:line="21" pos:column="37">127<pos:position pos:line="21" pos:column="40"/></literal><operator pos:line="21" pos:column="40">)<pos:position pos:line="21" pos:column="41"/></operator> <operator pos:line="21" pos:column="42">==<pos:position pos:line="21" pos:column="44"/></operator> <literal type="number" pos:line="21" pos:column="45">99<pos:position pos:line="21" pos:column="47"/></literal></expr> ?<pos:position pos:line="21" pos:column="49"/></condition><then pos:line="21" pos:column="49"> <expr><literal type="number" pos:line="21" pos:column="50">64<pos:position pos:line="21" pos:column="52"/></literal></expr> <pos:position pos:line="21" pos:column="53"/></then><else pos:line="21" pos:column="53">: <expr><name><name pos:line="21" pos:column="55">state<pos:position pos:line="21" pos:column="60"/></name><operator pos:line="21" pos:column="60">.<pos:position pos:line="21" pos:column="61"/></operator><name pos:line="21" pos:column="61">lencode<pos:position pos:line="21" pos:column="68"/></name><index pos:line="21" pos:column="68">[<expr><name pos:line="21" pos:column="69">low<pos:position pos:line="21" pos:column="72"/></name></expr>]<pos:position pos:line="21" pos:column="73"/></index></name><operator pos:line="21" pos:column="73">.<pos:position pos:line="21" pos:column="74"/></operator><name pos:line="21" pos:column="74">op<pos:position pos:line="21" pos:column="76"/></name></expr></else></ternary></expr></argument>,
               <argument><expr><name><name pos:line="22" pos:column="16">state<pos:position pos:line="22" pos:column="21"/></name><operator pos:line="22" pos:column="21">.<pos:position pos:line="22" pos:column="22"/></operator><name pos:line="22" pos:column="22">lencode<pos:position pos:line="22" pos:column="29"/></name><index pos:line="22" pos:column="29">[<expr><name pos:line="22" pos:column="30">low<pos:position pos:line="22" pos:column="33"/></name></expr>]<pos:position pos:line="22" pos:column="34"/></index></name><operator pos:line="22" pos:column="34">.<pos:position pos:line="22" pos:column="35"/></operator><name pos:line="22" pos:column="35">bits<pos:position pos:line="22" pos:column="39"/></name></expr></argument>, <argument><expr><name><name pos:line="22" pos:column="41">state<pos:position pos:line="22" pos:column="46"/></name><operator pos:line="22" pos:column="46">.<pos:position pos:line="22" pos:column="47"/></operator><name pos:line="22" pos:column="47">lencode<pos:position pos:line="22" pos:column="54"/></name><index pos:line="22" pos:column="54">[<expr><name pos:line="22" pos:column="55">low<pos:position pos:line="22" pos:column="58"/></name></expr>]<pos:position pos:line="22" pos:column="59"/></index></name><operator pos:line="22" pos:column="59">.<pos:position pos:line="22" pos:column="60"/></operator><name pos:line="22" pos:column="60">val<pos:position pos:line="22" pos:column="63"/></name></expr></argument>)<pos:position pos:line="22" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="65"/></expr_stmt>
        <if pos:line="23" pos:column="9">if <condition pos:line="23" pos:column="12">(<expr><operator pos:line="23" pos:column="13">++<pos:position pos:line="23" pos:column="15"/></operator><name pos:line="23" pos:column="15">low<pos:position pos:line="23" pos:column="18"/></name> <operator pos:line="23" pos:column="19">==<pos:position pos:line="23" pos:column="21"/></operator> <name pos:line="23" pos:column="22">size<pos:position pos:line="23" pos:column="26"/></name></expr>)<pos:position pos:line="23" pos:column="27"/></condition><then pos:line="23" pos:column="27"> <block type="pseudo"><break pos:line="23" pos:column="28">break;<pos:position pos:line="23" pos:column="34"/></break></block></then></if>
        <expr_stmt><expr><call><name pos:line="24" pos:column="9">putchar<pos:position pos:line="24" pos:column="16"/></name><argument_list pos:line="24" pos:column="16">(<argument><expr><literal type="char" pos:line="24" pos:column="17">','<pos:position pos:line="24" pos:column="20"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="22"/></expr_stmt>
    }<pos:position pos:line="25" pos:column="6"/></block></for>
    <expr_stmt><expr><call><name pos:line="26" pos:column="5">puts<pos:position pos:line="26" pos:column="9"/></name><argument_list pos:line="26" pos:column="9">(<argument><expr><literal type="string" pos:line="26" pos:column="10">"\n    };"<pos:position pos:line="26" pos:column="20"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="22"/></expr_stmt>
    <expr_stmt><expr><name pos:line="27" pos:column="5">size<pos:position pos:line="27" pos:column="9"/></name> <operator pos:line="27" pos:column="10">=<pos:position pos:line="27" pos:column="11"/></operator> <literal type="number" pos:line="27" pos:column="12">1U<pos:position pos:line="27" pos:column="14"/></literal> <operator pos:line="27" pos:column="15">&lt;&lt;<pos:position pos:line="27" pos:column="23"/></operator> <literal type="number" pos:line="27" pos:column="18">5<pos:position pos:line="27" pos:column="19"/></literal></expr>;<pos:position pos:line="27" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="28" pos:column="5">printf<pos:position pos:line="28" pos:column="11"/></name><argument_list pos:line="28" pos:column="11">(<argument><expr><literal type="string" pos:line="28" pos:column="12">"\n    static const code distfix[%u] = {"<pos:position pos:line="28" pos:column="53"/></literal></expr></argument>, <argument><expr><name pos:line="28" pos:column="55">size<pos:position pos:line="28" pos:column="59"/></name></expr></argument>)<pos:position pos:line="28" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="61"/></expr_stmt>
    <expr_stmt><expr><name pos:line="29" pos:column="5">low<pos:position pos:line="29" pos:column="8"/></name> <operator pos:line="29" pos:column="9">=<pos:position pos:line="29" pos:column="10"/></operator> <literal type="number" pos:line="29" pos:column="11">0<pos:position pos:line="29" pos:column="12"/></literal></expr>;<pos:position pos:line="29" pos:column="13"/></expr_stmt>
    <for pos:line="30" pos:column="5">for <control pos:line="30" pos:column="9">(<init pos:line="30" pos:column="10">;<pos:position pos:line="30" pos:column="11"/></init><condition pos:line="30" pos:column="11">;<pos:position pos:line="30" pos:column="12"/></condition><incr/>)<pos:position pos:line="30" pos:column="13"/></control> <block pos:line="30" pos:column="14">{
        <if pos:line="31" pos:column="9">if <condition pos:line="31" pos:column="12">(<expr><operator pos:line="31" pos:column="13">(<pos:position pos:line="31" pos:column="14"/></operator><name pos:line="31" pos:column="14">low<pos:position pos:line="31" pos:column="17"/></name> <operator pos:line="31" pos:column="18">%<pos:position pos:line="31" pos:column="19"/></operator> <literal type="number" pos:line="31" pos:column="20">6<pos:position pos:line="31" pos:column="21"/></literal><operator pos:line="31" pos:column="21">)<pos:position pos:line="31" pos:column="22"/></operator> <operator pos:line="31" pos:column="23">==<pos:position pos:line="31" pos:column="25"/></operator> <literal type="number" pos:line="31" pos:column="26">0<pos:position pos:line="31" pos:column="27"/></literal></expr>)<pos:position pos:line="31" pos:column="28"/></condition><then pos:line="31" pos:column="28"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="31" pos:column="29">printf<pos:position pos:line="31" pos:column="35"/></name><argument_list pos:line="31" pos:column="35">(<argument><expr><literal type="string" pos:line="31" pos:column="36">"\n        "<pos:position pos:line="31" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="50"/></expr_stmt></block></then></if>
        <expr_stmt><expr><call><name pos:line="32" pos:column="9">printf<pos:position pos:line="32" pos:column="15"/></name><argument_list pos:line="32" pos:column="15">(<argument><expr><literal type="string" pos:line="32" pos:column="16">"{%u,%u,%d}"<pos:position pos:line="32" pos:column="28"/></literal></expr></argument>, <argument><expr><name><name pos:line="32" pos:column="30">state<pos:position pos:line="32" pos:column="35"/></name><operator pos:line="32" pos:column="35">.<pos:position pos:line="32" pos:column="36"/></operator><name pos:line="32" pos:column="36">distcode<pos:position pos:line="32" pos:column="44"/></name><index pos:line="32" pos:column="44">[<expr><name pos:line="32" pos:column="45">low<pos:position pos:line="32" pos:column="48"/></name></expr>]<pos:position pos:line="32" pos:column="49"/></index></name><operator pos:line="32" pos:column="49">.<pos:position pos:line="32" pos:column="50"/></operator><name pos:line="32" pos:column="50">op<pos:position pos:line="32" pos:column="52"/></name></expr></argument>, <argument><expr><name><name pos:line="32" pos:column="54">state<pos:position pos:line="32" pos:column="59"/></name><operator pos:line="32" pos:column="59">.<pos:position pos:line="32" pos:column="60"/></operator><name pos:line="32" pos:column="60">distcode<pos:position pos:line="32" pos:column="68"/></name><index pos:line="32" pos:column="68">[<expr><name pos:line="32" pos:column="69">low<pos:position pos:line="32" pos:column="72"/></name></expr>]<pos:position pos:line="32" pos:column="73"/></index></name><operator pos:line="32" pos:column="73">.<pos:position pos:line="32" pos:column="74"/></operator><name pos:line="32" pos:column="74">bits<pos:position pos:line="32" pos:column="78"/></name></expr></argument>,
               <argument><expr><name><name pos:line="33" pos:column="16">state<pos:position pos:line="33" pos:column="21"/></name><operator pos:line="33" pos:column="21">.<pos:position pos:line="33" pos:column="22"/></operator><name pos:line="33" pos:column="22">distcode<pos:position pos:line="33" pos:column="30"/></name><index pos:line="33" pos:column="30">[<expr><name pos:line="33" pos:column="31">low<pos:position pos:line="33" pos:column="34"/></name></expr>]<pos:position pos:line="33" pos:column="35"/></index></name><operator pos:line="33" pos:column="35">.<pos:position pos:line="33" pos:column="36"/></operator><name pos:line="33" pos:column="36">val<pos:position pos:line="33" pos:column="39"/></name></expr></argument>)<pos:position pos:line="33" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="41"/></expr_stmt>
        <if pos:line="34" pos:column="9">if <condition pos:line="34" pos:column="12">(<expr><operator pos:line="34" pos:column="13">++<pos:position pos:line="34" pos:column="15"/></operator><name pos:line="34" pos:column="15">low<pos:position pos:line="34" pos:column="18"/></name> <operator pos:line="34" pos:column="19">==<pos:position pos:line="34" pos:column="21"/></operator> <name pos:line="34" pos:column="22">size<pos:position pos:line="34" pos:column="26"/></name></expr>)<pos:position pos:line="34" pos:column="27"/></condition><then pos:line="34" pos:column="27"> <block type="pseudo"><break pos:line="34" pos:column="28">break;<pos:position pos:line="34" pos:column="34"/></break></block></then></if>
        <expr_stmt><expr><call><name pos:line="35" pos:column="9">putchar<pos:position pos:line="35" pos:column="16"/></name><argument_list pos:line="35" pos:column="16">(<argument><expr><literal type="char" pos:line="35" pos:column="17">','<pos:position pos:line="35" pos:column="20"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="22"/></expr_stmt>
    }<pos:position pos:line="36" pos:column="6"/></block></for>
    <expr_stmt><expr><call><name pos:line="37" pos:column="5">puts<pos:position pos:line="37" pos:column="9"/></name><argument_list pos:line="37" pos:column="9">(<argument><expr><literal type="string" pos:line="37" pos:column="10">"\n    };"<pos:position pos:line="37" pos:column="20"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="22"/></expr_stmt>
}<pos:position pos:line="38" pos:column="2"/></block></function></unit>
