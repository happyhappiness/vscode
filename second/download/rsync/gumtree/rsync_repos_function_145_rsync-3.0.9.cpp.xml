<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_145_rsync-3.0.9.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">io_flush<pos:position pos:line="1" pos:column="13"/></name><parameter_list pos:line="1" pos:column="13">(<parameter><decl><type><name pos:line="1" pos:column="14">int<pos:position pos:line="1" pos:column="17"/></name></type> <name pos:line="1" pos:column="18">flush_it_all<pos:position pos:line="1" pos:column="30"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="31"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">flushed_something<pos:position pos:line="3" pos:column="30"/></name> <init pos:line="3" pos:column="31">= <expr><literal type="number" pos:line="3" pos:column="33">0<pos:position pos:line="3" pos:column="34"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="35"/></decl_stmt>

	<if pos:line="5" pos:column="9">if <condition pos:line="5" pos:column="12">(<expr><name pos:line="5" pos:column="13">no_flush<pos:position pos:line="5" pos:column="21"/></name></expr>)<pos:position pos:line="5" pos:column="22"/></condition><then pos:line="5" pos:column="22">
		<block type="pseudo"><return pos:line="6" pos:column="17">return <expr><literal type="number" pos:line="6" pos:column="24">0<pos:position pos:line="6" pos:column="25"/></literal></expr>;<pos:position pos:line="6" pos:column="26"/></return></block></then></if>

	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><name pos:line="8" pos:column="13">iobuf_out_cnt<pos:position pos:line="8" pos:column="26"/></name></expr>)<pos:position pos:line="8" pos:column="27"/></condition><then pos:line="8" pos:column="27"> <block pos:line="8" pos:column="28">{
		<if pos:line="9" pos:column="17">if <condition pos:line="9" pos:column="20">(<expr><name pos:line="9" pos:column="21">io_multiplexing_out<pos:position pos:line="9" pos:column="40"/></name></expr>)<pos:position pos:line="9" pos:column="41"/></condition><then pos:line="9" pos:column="41">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="10" pos:column="25">mplex_write<pos:position pos:line="10" pos:column="36"/></name><argument_list pos:line="10" pos:column="36">(<argument><expr><name pos:line="10" pos:column="37">sock_f_out<pos:position pos:line="10" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="49">MSG_DATA<pos:position pos:line="10" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="59">iobuf_out<pos:position pos:line="10" pos:column="68"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="70">iobuf_out_cnt<pos:position pos:line="10" pos:column="83"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="10" pos:column="85">0<pos:position pos:line="10" pos:column="86"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="87"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="88"/></expr_stmt></block></then>
		<else pos:line="11" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="12" pos:column="25">writefd_unbuffered<pos:position pos:line="12" pos:column="43"/></name><argument_list pos:line="12" pos:column="43">(<argument><expr><name pos:line="12" pos:column="44">iobuf_f_out<pos:position pos:line="12" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="57">iobuf_out<pos:position pos:line="12" pos:column="66"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="68">iobuf_out_cnt<pos:position pos:line="12" pos:column="81"/></name></expr></argument>)<pos:position pos:line="12" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="83"/></expr_stmt></block></else></if>
		<expr_stmt><expr><name pos:line="13" pos:column="17">iobuf_out_cnt<pos:position pos:line="13" pos:column="30"/></name> <operator pos:line="13" pos:column="31">=<pos:position pos:line="13" pos:column="32"/></operator> <literal type="number" pos:line="13" pos:column="33">0<pos:position pos:line="13" pos:column="34"/></literal></expr>;<pos:position pos:line="13" pos:column="35"/></expr_stmt>
		<expr_stmt><expr><name pos:line="14" pos:column="17">flushed_something<pos:position pos:line="14" pos:column="34"/></name> <operator pos:line="14" pos:column="35">=<pos:position pos:line="14" pos:column="36"/></operator> <literal type="number" pos:line="14" pos:column="37">1<pos:position pos:line="14" pos:column="38"/></literal></expr>;<pos:position pos:line="14" pos:column="39"/></expr_stmt>
	}<pos:position pos:line="15" pos:column="10"/></block></then></if>

	<if pos:line="17" pos:column="9">if <condition pos:line="17" pos:column="12">(<expr><name pos:line="17" pos:column="13">flush_it_all<pos:position pos:line="17" pos:column="25"/></name> <operator pos:line="17" pos:column="26">&amp;&amp;<pos:position pos:line="17" pos:column="36"/></operator> <operator pos:line="17" pos:column="29">!<pos:position pos:line="17" pos:column="30"/></operator><name pos:line="17" pos:column="30">defer_forwarding_messages<pos:position pos:line="17" pos:column="55"/></name> <operator pos:line="17" pos:column="56">&amp;&amp;<pos:position pos:line="17" pos:column="66"/></operator> <name><name pos:line="17" pos:column="59">msg_queue<pos:position pos:line="17" pos:column="68"/></name><operator pos:line="17" pos:column="68">.<pos:position pos:line="17" pos:column="69"/></operator><name pos:line="17" pos:column="69">head<pos:position pos:line="17" pos:column="73"/></name></name></expr>)<pos:position pos:line="17" pos:column="74"/></condition><then pos:line="17" pos:column="74"> <block pos:line="17" pos:column="75">{
		<expr_stmt><expr><call><name pos:line="18" pos:column="17">msg_flush<pos:position pos:line="18" pos:column="26"/></name><argument_list pos:line="18" pos:column="26">()<pos:position pos:line="18" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="29"/></expr_stmt>
		<expr_stmt><expr><name pos:line="19" pos:column="17">flushed_something<pos:position pos:line="19" pos:column="34"/></name> <operator pos:line="19" pos:column="35">=<pos:position pos:line="19" pos:column="36"/></operator> <literal type="number" pos:line="19" pos:column="37">1<pos:position pos:line="19" pos:column="38"/></literal></expr>;<pos:position pos:line="19" pos:column="39"/></expr_stmt>
	}<pos:position pos:line="20" pos:column="10"/></block></then></if>

	<return pos:line="22" pos:column="9">return <expr><name pos:line="22" pos:column="16">flushed_something<pos:position pos:line="22" pos:column="33"/></name></expr>;<pos:position pos:line="22" pos:column="34"/></return>
}<pos:position pos:line="23" pos:column="2"/></block></function></unit>
