<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_159_rsync-2.6.0.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">send_files<pos:position pos:line="1" pos:column="16"/></name><parameter_list pos:line="1" pos:column="16">(<parameter><decl><type><name><name pos:line="1" pos:column="17">struct<pos:position pos:line="1" pos:column="23"/></name> <name pos:line="1" pos:column="24">file_list<pos:position pos:line="1" pos:column="33"/></name></name> <modifier pos:line="1" pos:column="34">*<pos:position pos:line="1" pos:column="35"/></modifier></type><name pos:line="1" pos:column="35">flist<pos:position pos:line="1" pos:column="40"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="42">int<pos:position pos:line="1" pos:column="45"/></name></type> <name pos:line="1" pos:column="46">f_out<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="53">int<pos:position pos:line="1" pos:column="56"/></name></type> <name pos:line="1" pos:column="57">f_in<pos:position pos:line="1" pos:column="61"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="62"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">fd<pos:position pos:line="3" pos:column="15"/></name> <init pos:line="3" pos:column="16">= <expr><operator pos:line="3" pos:column="18">-<pos:position pos:line="3" pos:column="19"/></operator><literal type="number" pos:line="3" pos:column="19">1<pos:position pos:line="3" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="21"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">sum_struct<pos:position pos:line="4" pos:column="26"/></name></name> <modifier pos:line="4" pos:column="27">*<pos:position pos:line="4" pos:column="28"/></modifier></type><name pos:line="4" pos:column="28">s<pos:position pos:line="4" pos:column="29"/></name></decl>;<pos:position pos:line="4" pos:column="30"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">map_struct<pos:position pos:line="5" pos:column="26"/></name></name> <modifier pos:line="5" pos:column="27">*<pos:position pos:line="5" pos:column="28"/></modifier></type><name pos:line="5" pos:column="28">buf<pos:position pos:line="5" pos:column="31"/></name> <init pos:line="5" pos:column="32">= <expr><name pos:line="5" pos:column="34">NULL<pos:position pos:line="5" pos:column="38"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="39"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">STRUCT_STAT<pos:position pos:line="6" pos:column="20"/></name></type> <name pos:line="6" pos:column="21">st<pos:position pos:line="6" pos:column="23"/></name></decl>;<pos:position pos:line="6" pos:column="24"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">char<pos:position pos:line="7" pos:column="13"/></name></type> <name><name pos:line="7" pos:column="14">fname<pos:position pos:line="7" pos:column="19"/></name><index pos:line="7" pos:column="19">[<expr><name pos:line="7" pos:column="20">MAXPATHLEN<pos:position pos:line="7" pos:column="30"/></name></expr>]<pos:position pos:line="7" pos:column="31"/></index></name></decl>;<pos:position pos:line="7" pos:column="32"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">int<pos:position pos:line="8" pos:column="12"/></name></type> <name pos:line="8" pos:column="13">i<pos:position pos:line="8" pos:column="14"/></name></decl>;<pos:position pos:line="8" pos:column="15"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="9" pos:column="9">struct<pos:position pos:line="9" pos:column="15"/></name> <name pos:line="9" pos:column="16">file_struct<pos:position pos:line="9" pos:column="27"/></name></name> <modifier pos:line="9" pos:column="28">*<pos:position pos:line="9" pos:column="29"/></modifier></type><name pos:line="9" pos:column="29">file<pos:position pos:line="9" pos:column="33"/></name></decl>;<pos:position pos:line="9" pos:column="34"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="10" pos:column="9">int<pos:position pos:line="10" pos:column="12"/></name></type> <name pos:line="10" pos:column="13">phase<pos:position pos:line="10" pos:column="18"/></name> <init pos:line="10" pos:column="19">= <expr><literal type="number" pos:line="10" pos:column="21">0<pos:position pos:line="10" pos:column="22"/></literal></expr></init></decl>;<pos:position pos:line="10" pos:column="23"/></decl_stmt>
	<decl_stmt><decl><specifier pos:line="11" pos:column="9">extern<pos:position pos:line="11" pos:column="15"/></specifier> <type><name><name pos:line="11" pos:column="16">struct<pos:position pos:line="11" pos:column="22"/></name> <name pos:line="11" pos:column="23">stats<pos:position pos:line="11" pos:column="28"/></name></name></type> <name pos:line="11" pos:column="29">stats<pos:position pos:line="11" pos:column="34"/></name></decl>;<pos:position pos:line="11" pos:column="35"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="12" pos:column="9">struct<pos:position pos:line="12" pos:column="15"/></name> <name pos:line="12" pos:column="16">stats<pos:position pos:line="12" pos:column="21"/></name></name></type> <name pos:line="12" pos:column="22">initial_stats<pos:position pos:line="12" pos:column="35"/></name></decl>;<pos:position pos:line="12" pos:column="36"/></decl_stmt>
	<decl_stmt><decl><specifier pos:line="13" pos:column="9">extern<pos:position pos:line="13" pos:column="15"/></specifier> <type><name pos:line="13" pos:column="16">int<pos:position pos:line="13" pos:column="19"/></name></type> <name pos:line="13" pos:column="20">write_batch<pos:position pos:line="13" pos:column="31"/></name></decl>;<pos:position pos:line="13" pos:column="32"/></decl_stmt>   <comment type="block" pos:line="13" pos:column="35">/* dw */</comment>
	<decl_stmt><decl><specifier pos:line="14" pos:column="9">extern<pos:position pos:line="14" pos:column="15"/></specifier> <type><name pos:line="14" pos:column="16">int<pos:position pos:line="14" pos:column="19"/></name></type> <name pos:line="14" pos:column="20">read_batch<pos:position pos:line="14" pos:column="30"/></name></decl>;<pos:position pos:line="14" pos:column="31"/></decl_stmt>    <comment type="block" pos:line="14" pos:column="35">/* dw */</comment>
	<decl_stmt><decl><type><name pos:line="15" pos:column="9">int<pos:position pos:line="15" pos:column="12"/></name></type> <name pos:line="15" pos:column="13">checksums_match<pos:position pos:line="15" pos:column="28"/></name></decl>;<pos:position pos:line="15" pos:column="29"/></decl_stmt>   <comment type="block" pos:line="15" pos:column="32">/* dw */</comment>
	<decl_stmt><decl><type><name pos:line="16" pos:column="9">int<pos:position pos:line="16" pos:column="12"/></name></type> <name pos:line="16" pos:column="13">buff_len<pos:position pos:line="16" pos:column="21"/></name></decl>;<pos:position pos:line="16" pos:column="22"/></decl_stmt>  <comment type="block" pos:line="16" pos:column="24">/* dw */</comment>
	<decl_stmt><decl><type><name pos:line="17" pos:column="9">char<pos:position pos:line="17" pos:column="13"/></name></type> <name><name pos:line="17" pos:column="14">buff<pos:position pos:line="17" pos:column="18"/></name><index pos:line="17" pos:column="18">[<expr><name pos:line="17" pos:column="19">CHUNK_SIZE<pos:position pos:line="17" pos:column="29"/></name></expr>]<pos:position pos:line="17" pos:column="30"/></index></name></decl>;<pos:position pos:line="17" pos:column="31"/></decl_stmt>    <comment type="block" pos:line="17" pos:column="35">/* dw */</comment>
	<decl_stmt><decl><type><name pos:line="18" pos:column="9">int<pos:position pos:line="18" pos:column="12"/></name></type> <name pos:line="18" pos:column="13">j<pos:position pos:line="18" pos:column="14"/></name></decl>;<pos:position pos:line="18" pos:column="15"/></decl_stmt>   <comment type="block" pos:line="18" pos:column="18">/* dw */</comment>
	<decl_stmt><decl><type><name pos:line="19" pos:column="9">int<pos:position pos:line="19" pos:column="12"/></name></type> <name pos:line="19" pos:column="13">done<pos:position pos:line="19" pos:column="17"/></name></decl>;<pos:position pos:line="19" pos:column="18"/></decl_stmt>   <comment type="block" pos:line="19" pos:column="21">/* dw */</comment>

	<if pos:line="21" pos:column="9">if <condition pos:line="21" pos:column="12">(<expr><name pos:line="21" pos:column="13">verbose<pos:position pos:line="21" pos:column="20"/></name> <operator pos:line="21" pos:column="21">&gt;<pos:position pos:line="21" pos:column="25"/></operator> <literal type="number" pos:line="21" pos:column="23">2<pos:position pos:line="21" pos:column="24"/></literal></expr>)<pos:position pos:line="21" pos:column="25"/></condition><then pos:line="21" pos:column="25">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="22" pos:column="17">rprintf<pos:position pos:line="22" pos:column="24"/></name><argument_list pos:line="22" pos:column="24">(<argument><expr><name pos:line="22" pos:column="25">FINFO<pos:position pos:line="22" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="22" pos:column="32">"send_files starting\n"<pos:position pos:line="22" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="57"/></expr_stmt></block></then></if>

	<while pos:line="24" pos:column="9">while <condition pos:line="24" pos:column="15">(<expr><literal type="number" pos:line="24" pos:column="16">1<pos:position pos:line="24" pos:column="17"/></literal></expr>)<pos:position pos:line="24" pos:column="18"/></condition> <block pos:line="24" pos:column="19">{
		<decl_stmt><decl><type><name pos:line="25" pos:column="17">int<pos:position pos:line="25" pos:column="20"/></name></type> <name pos:line="25" pos:column="21">offset<pos:position pos:line="25" pos:column="27"/></name> <init pos:line="25" pos:column="28">= <expr><literal type="number" pos:line="25" pos:column="30">0<pos:position pos:line="25" pos:column="31"/></literal></expr></init></decl>;<pos:position pos:line="25" pos:column="32"/></decl_stmt>

		<expr_stmt><expr><name pos:line="27" pos:column="17">i<pos:position pos:line="27" pos:column="18"/></name> <operator pos:line="27" pos:column="19">=<pos:position pos:line="27" pos:column="20"/></operator> <call><name pos:line="27" pos:column="21">read_int<pos:position pos:line="27" pos:column="29"/></name><argument_list pos:line="27" pos:column="29">(<argument><expr><name pos:line="27" pos:column="30">f_in<pos:position pos:line="27" pos:column="34"/></name></expr></argument>)<pos:position pos:line="27" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="36"/></expr_stmt>
		<if pos:line="28" pos:column="17">if <condition pos:line="28" pos:column="20">(<expr><name pos:line="28" pos:column="21">i<pos:position pos:line="28" pos:column="22"/></name> <operator pos:line="28" pos:column="23">==<pos:position pos:line="28" pos:column="25"/></operator> <operator pos:line="28" pos:column="26">-<pos:position pos:line="28" pos:column="27"/></operator><literal type="number" pos:line="28" pos:column="27">1<pos:position pos:line="28" pos:column="28"/></literal></expr>)<pos:position pos:line="28" pos:column="29"/></condition><then pos:line="28" pos:column="29"> <block pos:line="28" pos:column="30">{
			<if pos:line="29" pos:column="25">if <condition pos:line="29" pos:column="28">(<expr><name pos:line="29" pos:column="29">phase<pos:position pos:line="29" pos:column="34"/></name> <operator pos:line="29" pos:column="35">==<pos:position pos:line="29" pos:column="37"/></operator> <literal type="number" pos:line="29" pos:column="38">0<pos:position pos:line="29" pos:column="39"/></literal></expr>)<pos:position pos:line="29" pos:column="40"/></condition><then pos:line="29" pos:column="40"> <block pos:line="29" pos:column="41">{
				<expr_stmt><expr><name pos:line="30" pos:column="33">phase<pos:position pos:line="30" pos:column="38"/></name><operator pos:line="30" pos:column="38">++<pos:position pos:line="30" pos:column="40"/></operator></expr>;<pos:position pos:line="30" pos:column="41"/></expr_stmt>
				<expr_stmt><expr><name pos:line="31" pos:column="33">csum_length<pos:position pos:line="31" pos:column="44"/></name> <operator pos:line="31" pos:column="45">=<pos:position pos:line="31" pos:column="46"/></operator> <name pos:line="31" pos:column="47">SUM_LENGTH<pos:position pos:line="31" pos:column="57"/></name></expr>;<pos:position pos:line="31" pos:column="58"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="32" pos:column="33">write_int<pos:position pos:line="32" pos:column="42"/></name><argument_list pos:line="32" pos:column="42">(<argument><expr><name pos:line="32" pos:column="43">f_out<pos:position pos:line="32" pos:column="48"/></name></expr></argument>, <argument><expr><operator pos:line="32" pos:column="50">-<pos:position pos:line="32" pos:column="51"/></operator><literal type="number" pos:line="32" pos:column="51">1<pos:position pos:line="32" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="54"/></expr_stmt>
				<if pos:line="33" pos:column="33">if <condition pos:line="33" pos:column="36">(<expr><name pos:line="33" pos:column="37">verbose<pos:position pos:line="33" pos:column="44"/></name> <operator pos:line="33" pos:column="45">&gt;<pos:position pos:line="33" pos:column="49"/></operator> <literal type="number" pos:line="33" pos:column="47">2<pos:position pos:line="33" pos:column="48"/></literal></expr>)<pos:position pos:line="33" pos:column="49"/></condition><then pos:line="33" pos:column="49">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="34" pos:column="41">rprintf<pos:position pos:line="34" pos:column="48"/></name><argument_list pos:line="34" pos:column="48">(<argument><expr><name pos:line="34" pos:column="49">FINFO<pos:position pos:line="34" pos:column="54"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="34" pos:column="56">"send_files phase=%d\n"<pos:position pos:line="34" pos:column="79"/></literal></expr></argument>, <argument><expr><name pos:line="34" pos:column="81">phase<pos:position pos:line="34" pos:column="86"/></name></expr></argument>)<pos:position pos:line="34" pos:column="87"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="88"/></expr_stmt></block></then></if>
				<continue pos:line="35" pos:column="33">continue;<pos:position pos:line="35" pos:column="42"/></continue>
			}<pos:position pos:line="36" pos:column="26"/></block></then></if>
			<break pos:line="37" pos:column="25">break;<pos:position pos:line="37" pos:column="31"/></break>
		}<pos:position pos:line="38" pos:column="18"/></block></then></if>

		<if pos:line="40" pos:column="17">if <condition pos:line="40" pos:column="20">(<expr><name pos:line="40" pos:column="21">i<pos:position pos:line="40" pos:column="22"/></name> <operator pos:line="40" pos:column="23">&lt;<pos:position pos:line="40" pos:column="27"/></operator> <literal type="number" pos:line="40" pos:column="25">0<pos:position pos:line="40" pos:column="26"/></literal> <operator pos:line="40" pos:column="27">||<pos:position pos:line="40" pos:column="29"/></operator> <name pos:line="40" pos:column="30">i<pos:position pos:line="40" pos:column="31"/></name> <operator pos:line="40" pos:column="32">&gt;=<pos:position pos:line="40" pos:column="37"/></operator> <name><name pos:line="40" pos:column="35">flist<pos:position pos:line="40" pos:column="40"/></name><operator pos:line="40" pos:column="40">-&gt;<pos:position pos:line="40" pos:column="45"/></operator><name pos:line="40" pos:column="42">count<pos:position pos:line="40" pos:column="47"/></name></name></expr>)<pos:position pos:line="40" pos:column="48"/></condition><then pos:line="40" pos:column="48"> <block pos:line="40" pos:column="49">{
			<expr_stmt><expr><call><name pos:line="41" pos:column="25">rprintf<pos:position pos:line="41" pos:column="32"/></name><argument_list pos:line="41" pos:column="32">(<argument><expr><name pos:line="41" pos:column="33">FERROR<pos:position pos:line="41" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="41" pos:column="41">"Invalid file index %d (count=%d)\n"<pos:position pos:line="41" pos:column="77"/></literal></expr></argument>,
				<argument><expr><name pos:line="42" pos:column="33">i<pos:position pos:line="42" pos:column="34"/></name></expr></argument>, <argument><expr><name><name pos:line="42" pos:column="36">flist<pos:position pos:line="42" pos:column="41"/></name><operator pos:line="42" pos:column="41">-&gt;<pos:position pos:line="42" pos:column="46"/></operator><name pos:line="42" pos:column="43">count<pos:position pos:line="42" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="42" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="50"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="43" pos:column="25">exit_cleanup<pos:position pos:line="43" pos:column="37"/></name><argument_list pos:line="43" pos:column="37">(<argument><expr><name pos:line="43" pos:column="38">RERR_PROTOCOL<pos:position pos:line="43" pos:column="51"/></name></expr></argument>)<pos:position pos:line="43" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="53"/></expr_stmt>
		}<pos:position pos:line="44" pos:column="18"/></block></then></if>

		<expr_stmt><expr><name pos:line="46" pos:column="17">file<pos:position pos:line="46" pos:column="21"/></name> <operator pos:line="46" pos:column="22">=<pos:position pos:line="46" pos:column="23"/></operator> <name><name pos:line="46" pos:column="24">flist<pos:position pos:line="46" pos:column="29"/></name><operator pos:line="46" pos:column="29">-&gt;<pos:position pos:line="46" pos:column="34"/></operator><name pos:line="46" pos:column="31">files<pos:position pos:line="46" pos:column="36"/></name><index pos:line="46" pos:column="36">[<expr><name pos:line="46" pos:column="37">i<pos:position pos:line="46" pos:column="38"/></name></expr>]<pos:position pos:line="46" pos:column="39"/></index></name></expr>;<pos:position pos:line="46" pos:column="40"/></expr_stmt>

		<expr_stmt><expr><name><name pos:line="48" pos:column="17">stats<pos:position pos:line="48" pos:column="22"/></name><operator pos:line="48" pos:column="22">.<pos:position pos:line="48" pos:column="23"/></operator><name pos:line="48" pos:column="23">num_transferred_files<pos:position pos:line="48" pos:column="44"/></name></name><operator pos:line="48" pos:column="44">++<pos:position pos:line="48" pos:column="46"/></operator></expr>;<pos:position pos:line="48" pos:column="47"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="49" pos:column="17">stats<pos:position pos:line="49" pos:column="22"/></name><operator pos:line="49" pos:column="22">.<pos:position pos:line="49" pos:column="23"/></operator><name pos:line="49" pos:column="23">total_transferred_size<pos:position pos:line="49" pos:column="45"/></name></name> <operator pos:line="49" pos:column="46">+=<pos:position pos:line="49" pos:column="48"/></operator> <name><name pos:line="49" pos:column="49">file<pos:position pos:line="49" pos:column="53"/></name><operator pos:line="49" pos:column="53">-&gt;<pos:position pos:line="49" pos:column="58"/></operator><name pos:line="49" pos:column="55">length<pos:position pos:line="49" pos:column="61"/></name></name></expr>;<pos:position pos:line="49" pos:column="62"/></expr_stmt>

		<expr_stmt><expr><name><name pos:line="51" pos:column="17">fname<pos:position pos:line="51" pos:column="22"/></name><index pos:line="51" pos:column="22">[<expr><literal type="number" pos:line="51" pos:column="23">0<pos:position pos:line="51" pos:column="24"/></literal></expr>]<pos:position pos:line="51" pos:column="25"/></index></name> <operator pos:line="51" pos:column="26">=<pos:position pos:line="51" pos:column="27"/></operator> <literal type="number" pos:line="51" pos:column="28">0<pos:position pos:line="51" pos:column="29"/></literal></expr>;<pos:position pos:line="51" pos:column="30"/></expr_stmt>
		<if pos:line="52" pos:column="17">if <condition pos:line="52" pos:column="20">(<expr><name><name pos:line="52" pos:column="21">file<pos:position pos:line="52" pos:column="25"/></name><operator pos:line="52" pos:column="25">-&gt;<pos:position pos:line="52" pos:column="30"/></operator><name pos:line="52" pos:column="27">basedir<pos:position pos:line="52" pos:column="34"/></name></name></expr>)<pos:position pos:line="52" pos:column="35"/></condition><then pos:line="52" pos:column="35"> <block pos:line="52" pos:column="36">{
			<expr_stmt><expr><call><name pos:line="53" pos:column="25">strlcpy<pos:position pos:line="53" pos:column="32"/></name><argument_list pos:line="53" pos:column="32">(<argument><expr><name pos:line="53" pos:column="33">fname<pos:position pos:line="53" pos:column="38"/></name></expr></argument>, <argument><expr><name><name pos:line="53" pos:column="40">file<pos:position pos:line="53" pos:column="44"/></name><operator pos:line="53" pos:column="44">-&gt;<pos:position pos:line="53" pos:column="49"/></operator><name pos:line="53" pos:column="46">basedir<pos:position pos:line="53" pos:column="53"/></name></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="55">MAXPATHLEN<pos:position pos:line="53" pos:column="65"/></name></expr></argument>)<pos:position pos:line="53" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="67"/></expr_stmt>
			<if pos:line="54" pos:column="25">if <condition pos:line="54" pos:column="28">(<expr><call><name pos:line="54" pos:column="29">strlen<pos:position pos:line="54" pos:column="35"/></name><argument_list pos:line="54" pos:column="35">(<argument><expr><name pos:line="54" pos:column="36">fname<pos:position pos:line="54" pos:column="41"/></name></expr></argument>)<pos:position pos:line="54" pos:column="42"/></argument_list></call> <operator pos:line="54" pos:column="43">==<pos:position pos:line="54" pos:column="45"/></operator> <name pos:line="54" pos:column="46">MAXPATHLEN<pos:position pos:line="54" pos:column="56"/></name><operator pos:line="54" pos:column="56">-<pos:position pos:line="54" pos:column="57"/></operator><literal type="number" pos:line="54" pos:column="57">1<pos:position pos:line="54" pos:column="58"/></literal></expr>)<pos:position pos:line="54" pos:column="59"/></condition><then pos:line="54" pos:column="59"> <block pos:line="54" pos:column="60">{
				<expr_stmt><expr><name pos:line="55" pos:column="33">io_error<pos:position pos:line="55" pos:column="41"/></name> <operator pos:line="55" pos:column="42">|=<pos:position pos:line="55" pos:column="44"/></operator> <name pos:line="55" pos:column="45">IOERR_GENERAL<pos:position pos:line="55" pos:column="58"/></name></expr>;<pos:position pos:line="55" pos:column="59"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="56" pos:column="33">rprintf<pos:position pos:line="56" pos:column="40"/></name><argument_list pos:line="56" pos:column="40">(<argument><expr><name pos:line="56" pos:column="41">FERROR<pos:position pos:line="56" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="56" pos:column="49">"send_files failed on long-named directory %s\n"<pos:position pos:line="56" pos:column="97"/></literal></expr></argument>,
					<argument><expr><call><name pos:line="57" pos:column="41">full_fname<pos:position pos:line="57" pos:column="51"/></name><argument_list pos:line="57" pos:column="51">(<argument><expr><name pos:line="57" pos:column="52">fname<pos:position pos:line="57" pos:column="57"/></name></expr></argument>)<pos:position pos:line="57" pos:column="58"/></argument_list></call></expr></argument>)<pos:position pos:line="57" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="60"/></expr_stmt>
				<return pos:line="58" pos:column="33">return;<pos:position pos:line="58" pos:column="40"/></return>
			}<pos:position pos:line="59" pos:column="26"/></block></then></if>
			<expr_stmt><expr><call><name pos:line="60" pos:column="25">strlcat<pos:position pos:line="60" pos:column="32"/></name><argument_list pos:line="60" pos:column="32">(<argument><expr><name pos:line="60" pos:column="33">fname<pos:position pos:line="60" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="60" pos:column="40">"/"<pos:position pos:line="60" pos:column="43"/></literal></expr></argument>, <argument><expr><name pos:line="60" pos:column="45">MAXPATHLEN<pos:position pos:line="60" pos:column="55"/></name></expr></argument>)<pos:position pos:line="60" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="57"/></expr_stmt>
			<expr_stmt><expr><name pos:line="61" pos:column="25">offset<pos:position pos:line="61" pos:column="31"/></name> <operator pos:line="61" pos:column="32">=<pos:position pos:line="61" pos:column="33"/></operator> <call><name pos:line="61" pos:column="34">strlen<pos:position pos:line="61" pos:column="40"/></name><argument_list pos:line="61" pos:column="40">(<argument><expr><name><name pos:line="61" pos:column="41">file<pos:position pos:line="61" pos:column="45"/></name><operator pos:line="61" pos:column="45">-&gt;<pos:position pos:line="61" pos:column="50"/></operator><name pos:line="61" pos:column="47">basedir<pos:position pos:line="61" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="61" pos:column="55"/></argument_list></call><operator pos:line="61" pos:column="55">+<pos:position pos:line="61" pos:column="56"/></operator><literal type="number" pos:line="61" pos:column="56">1<pos:position pos:line="61" pos:column="57"/></literal></expr>;<pos:position pos:line="61" pos:column="58"/></expr_stmt>
		}<pos:position pos:line="62" pos:column="18"/></block></then></if>
		<expr_stmt><expr><call><name pos:line="63" pos:column="17">strlcat<pos:position pos:line="63" pos:column="24"/></name><argument_list pos:line="63" pos:column="24">(<argument><expr><name pos:line="63" pos:column="25">fname<pos:position pos:line="63" pos:column="30"/></name></expr></argument>, <argument><expr><call><name pos:line="63" pos:column="32">f_name<pos:position pos:line="63" pos:column="38"/></name><argument_list pos:line="63" pos:column="38">(<argument><expr><name pos:line="63" pos:column="39">file<pos:position pos:line="63" pos:column="43"/></name></expr></argument>)<pos:position pos:line="63" pos:column="44"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="63" pos:column="46">MAXPATHLEN<pos:position pos:line="63" pos:column="56"/></name></expr></argument>)<pos:position pos:line="63" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="58"/></expr_stmt>

		<if pos:line="65" pos:column="17">if <condition pos:line="65" pos:column="20">(<expr><name pos:line="65" pos:column="21">verbose<pos:position pos:line="65" pos:column="28"/></name> <operator pos:line="65" pos:column="29">&gt;<pos:position pos:line="65" pos:column="33"/></operator> <literal type="number" pos:line="65" pos:column="31">2<pos:position pos:line="65" pos:column="32"/></literal></expr>)<pos:position pos:line="65" pos:column="33"/></condition><then pos:line="65" pos:column="33">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="66" pos:column="25">rprintf<pos:position pos:line="66" pos:column="32"/></name><argument_list pos:line="66" pos:column="32">(<argument><expr><name pos:line="66" pos:column="33">FINFO<pos:position pos:line="66" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="66" pos:column="40">"send_files(%d, %s)\n"<pos:position pos:line="66" pos:column="62"/></literal></expr></argument>, <argument><expr><name pos:line="66" pos:column="64">i<pos:position pos:line="66" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="67">fname<pos:position pos:line="66" pos:column="72"/></name></expr></argument>)<pos:position pos:line="66" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="74"/></expr_stmt></block></then></if>

		<if pos:line="68" pos:column="17">if <condition pos:line="68" pos:column="20">(<expr><name pos:line="68" pos:column="21">dry_run<pos:position pos:line="68" pos:column="28"/></name></expr>)<pos:position pos:line="68" pos:column="29"/></condition><then pos:line="68" pos:column="29"> <block pos:line="68" pos:column="30">{
			<if pos:line="69" pos:column="25">if <condition pos:line="69" pos:column="28">(<expr><operator pos:line="69" pos:column="29">!<pos:position pos:line="69" pos:column="30"/></operator><name pos:line="69" pos:column="30">am_server<pos:position pos:line="69" pos:column="39"/></name> <operator pos:line="69" pos:column="40">&amp;&amp;<pos:position pos:line="69" pos:column="50"/></operator> <name pos:line="69" pos:column="43">verbose<pos:position pos:line="69" pos:column="50"/></name></expr>)<pos:position pos:line="69" pos:column="51"/></condition><then pos:line="69" pos:column="51"> <block pos:line="69" pos:column="52">{	<comment type="block" pos:line="69" pos:column="57">/* log transfer */</comment>
				<expr_stmt><expr><call><name pos:line="70" pos:column="33">rprintf<pos:position pos:line="70" pos:column="40"/></name><argument_list pos:line="70" pos:column="40">(<argument><expr><name pos:line="70" pos:column="41">FINFO<pos:position pos:line="70" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="70" pos:column="48">"%s\n"<pos:position pos:line="70" pos:column="54"/></literal></expr></argument>, <argument><expr><name pos:line="70" pos:column="56">fname<pos:position pos:line="70" pos:column="61"/></name><operator pos:line="70" pos:column="61">+<pos:position pos:line="70" pos:column="62"/></operator><name pos:line="70" pos:column="62">offset<pos:position pos:line="70" pos:column="68"/></name></expr></argument>)<pos:position pos:line="70" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="70"/></expr_stmt>
			}<pos:position pos:line="71" pos:column="26"/></block></then></if>
			<expr_stmt><expr><call><name pos:line="72" pos:column="25">write_int<pos:position pos:line="72" pos:column="34"/></name><argument_list pos:line="72" pos:column="34">(<argument><expr><name pos:line="72" pos:column="35">f_out<pos:position pos:line="72" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="72" pos:column="42">i<pos:position pos:line="72" pos:column="43"/></name></expr></argument>)<pos:position pos:line="72" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="45"/></expr_stmt>
			<continue pos:line="73" pos:column="25">continue;<pos:position pos:line="73" pos:column="34"/></continue>
		}<pos:position pos:line="74" pos:column="18"/></block></then></if>

		<expr_stmt><expr><name pos:line="76" pos:column="17">initial_stats<pos:position pos:line="76" pos:column="30"/></name> <operator pos:line="76" pos:column="31">=<pos:position pos:line="76" pos:column="32"/></operator> <name pos:line="76" pos:column="33">stats<pos:position pos:line="76" pos:column="38"/></name></expr>;<pos:position pos:line="76" pos:column="39"/></expr_stmt>

		<expr_stmt><expr><name pos:line="78" pos:column="17">s<pos:position pos:line="78" pos:column="18"/></name> <operator pos:line="78" pos:column="19">=<pos:position pos:line="78" pos:column="20"/></operator> <call><name pos:line="78" pos:column="21">receive_sums<pos:position pos:line="78" pos:column="33"/></name><argument_list pos:line="78" pos:column="33">(<argument><expr><name pos:line="78" pos:column="34">f_in<pos:position pos:line="78" pos:column="38"/></name></expr></argument>)<pos:position pos:line="78" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="40"/></expr_stmt>
		<if pos:line="79" pos:column="17">if <condition pos:line="79" pos:column="20">(<expr><operator pos:line="79" pos:column="21">!<pos:position pos:line="79" pos:column="22"/></operator><name pos:line="79" pos:column="22">s<pos:position pos:line="79" pos:column="23"/></name></expr>)<pos:position pos:line="79" pos:column="24"/></condition><then pos:line="79" pos:column="24"> <block pos:line="79" pos:column="25">{
			<expr_stmt><expr><name pos:line="80" pos:column="25">io_error<pos:position pos:line="80" pos:column="33"/></name> <operator pos:line="80" pos:column="34">|=<pos:position pos:line="80" pos:column="36"/></operator> <name pos:line="80" pos:column="37">IOERR_GENERAL<pos:position pos:line="80" pos:column="50"/></name></expr>;<pos:position pos:line="80" pos:column="51"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="81" pos:column="25">rprintf<pos:position pos:line="81" pos:column="32"/></name><argument_list pos:line="81" pos:column="32">(<argument><expr><name pos:line="81" pos:column="33">FERROR<pos:position pos:line="81" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="81" pos:column="41">"receive_sums failed\n"<pos:position pos:line="81" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="81" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="66"/></expr_stmt>
			<return pos:line="82" pos:column="25">return;<pos:position pos:line="82" pos:column="32"/></return>
		}<pos:position pos:line="83" pos:column="18"/></block></then></if>

		<if pos:line="85" pos:column="17">if <condition pos:line="85" pos:column="20">(<expr><name pos:line="85" pos:column="21">write_batch<pos:position pos:line="85" pos:column="32"/></name></expr>)<pos:position pos:line="85" pos:column="33"/></condition><then pos:line="85" pos:column="33">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="86" pos:column="25">write_batch_csum_info<pos:position pos:line="86" pos:column="46"/></name><argument_list pos:line="86" pos:column="46">(<argument><expr><operator pos:line="86" pos:column="47">&amp;<pos:position pos:line="86" pos:column="52"/></operator><name pos:line="86" pos:column="48">i<pos:position pos:line="86" pos:column="49"/></name></expr></argument>, <argument><expr><name><name pos:line="86" pos:column="51">flist<pos:position pos:line="86" pos:column="56"/></name><operator pos:line="86" pos:column="56">-&gt;<pos:position pos:line="86" pos:column="61"/></operator><name pos:line="86" pos:column="58">count<pos:position pos:line="86" pos:column="63"/></name></name></expr></argument>, <argument><expr><name pos:line="86" pos:column="65">s<pos:position pos:line="86" pos:column="66"/></name></expr></argument>)<pos:position pos:line="86" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="68"/></expr_stmt></block></then></if>

		<if pos:line="88" pos:column="17">if <condition pos:line="88" pos:column="20">(<expr><operator pos:line="88" pos:column="21">!<pos:position pos:line="88" pos:column="22"/></operator><name pos:line="88" pos:column="22">read_batch<pos:position pos:line="88" pos:column="32"/></name></expr>)<pos:position pos:line="88" pos:column="33"/></condition><then pos:line="88" pos:column="33"> <block pos:line="88" pos:column="34">{
			<expr_stmt><expr><name pos:line="89" pos:column="25">fd<pos:position pos:line="89" pos:column="27"/></name> <operator pos:line="89" pos:column="28">=<pos:position pos:line="89" pos:column="29"/></operator> <call><name pos:line="89" pos:column="30">do_open<pos:position pos:line="89" pos:column="37"/></name><argument_list pos:line="89" pos:column="37">(<argument><expr><name pos:line="89" pos:column="38">fname<pos:position pos:line="89" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="89" pos:column="45">O_RDONLY<pos:position pos:line="89" pos:column="53"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="89" pos:column="55">0<pos:position pos:line="89" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="89" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="58"/></expr_stmt>
			<if pos:line="90" pos:column="25">if <condition pos:line="90" pos:column="28">(<expr><name pos:line="90" pos:column="29">fd<pos:position pos:line="90" pos:column="31"/></name> <operator pos:line="90" pos:column="32">==<pos:position pos:line="90" pos:column="34"/></operator> <operator pos:line="90" pos:column="35">-<pos:position pos:line="90" pos:column="36"/></operator><literal type="number" pos:line="90" pos:column="36">1<pos:position pos:line="90" pos:column="37"/></literal></expr>)<pos:position pos:line="90" pos:column="38"/></condition><then pos:line="90" pos:column="38"> <block pos:line="90" pos:column="39">{
				<if pos:line="91" pos:column="33">if <condition pos:line="91" pos:column="36">(<expr><name pos:line="91" pos:column="37">errno<pos:position pos:line="91" pos:column="42"/></name> <operator pos:line="91" pos:column="43">==<pos:position pos:line="91" pos:column="45"/></operator> <name pos:line="91" pos:column="46">ENOENT<pos:position pos:line="91" pos:column="52"/></name></expr>)<pos:position pos:line="91" pos:column="53"/></condition><then pos:line="91" pos:column="53"> <block pos:line="91" pos:column="54">{
					<expr_stmt><expr><name pos:line="92" pos:column="41">io_error<pos:position pos:line="92" pos:column="49"/></name> <operator pos:line="92" pos:column="50">|=<pos:position pos:line="92" pos:column="52"/></operator> <name pos:line="92" pos:column="53">IOERR_VANISHED<pos:position pos:line="92" pos:column="67"/></name></expr>;<pos:position pos:line="92" pos:column="68"/></expr_stmt>
					<expr_stmt><expr><call><name pos:line="93" pos:column="41">rprintf<pos:position pos:line="93" pos:column="48"/></name><argument_list pos:line="93" pos:column="48">(<argument><expr><name pos:line="93" pos:column="49">FINFO<pos:position pos:line="93" pos:column="54"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="93" pos:column="56">"file has vanished: %s\n"<pos:position pos:line="93" pos:column="81"/></literal></expr></argument>,
			 			<argument><expr><call><name pos:line="94" pos:column="49">full_fname<pos:position pos:line="94" pos:column="59"/></name><argument_list pos:line="94" pos:column="59">(<argument><expr><name pos:line="94" pos:column="60">fname<pos:position pos:line="94" pos:column="65"/></name></expr></argument>)<pos:position pos:line="94" pos:column="66"/></argument_list></call></expr></argument>)<pos:position pos:line="94" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="68"/></expr_stmt>
				}<pos:position pos:line="95" pos:column="34"/></block></then> <else pos:line="95" pos:column="35">else <block pos:line="95" pos:column="40">{
					<expr_stmt><expr><name pos:line="96" pos:column="41">io_error<pos:position pos:line="96" pos:column="49"/></name> <operator pos:line="96" pos:column="50">|=<pos:position pos:line="96" pos:column="52"/></operator> <name pos:line="96" pos:column="53">IOERR_GENERAL<pos:position pos:line="96" pos:column="66"/></name></expr>;<pos:position pos:line="96" pos:column="67"/></expr_stmt>
					<expr_stmt><expr><call><name pos:line="97" pos:column="41">rprintf<pos:position pos:line="97" pos:column="48"/></name><argument_list pos:line="97" pos:column="48">(<argument><expr><name pos:line="97" pos:column="49">FERROR<pos:position pos:line="97" pos:column="55"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="97" pos:column="57">"send_files failed to open %s: %s\n"<pos:position pos:line="97" pos:column="93"/></literal></expr></argument>,
						<argument><expr><call><name pos:line="98" pos:column="49">full_fname<pos:position pos:line="98" pos:column="59"/></name><argument_list pos:line="98" pos:column="59">(<argument><expr><name pos:line="98" pos:column="60">fname<pos:position pos:line="98" pos:column="65"/></name></expr></argument>)<pos:position pos:line="98" pos:column="66"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="98" pos:column="68">strerror<pos:position pos:line="98" pos:column="76"/></name><argument_list pos:line="98" pos:column="76">(<argument><expr><name pos:line="98" pos:column="77">errno<pos:position pos:line="98" pos:column="82"/></name></expr></argument>)<pos:position pos:line="98" pos:column="83"/></argument_list></call></expr></argument>)<pos:position pos:line="98" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="85"/></expr_stmt>
				}<pos:position pos:line="99" pos:column="34"/></block></else></if>
				<expr_stmt><expr><call><name pos:line="100" pos:column="33">free_sums<pos:position pos:line="100" pos:column="42"/></name><argument_list pos:line="100" pos:column="42">(<argument><expr><name pos:line="100" pos:column="43">s<pos:position pos:line="100" pos:column="44"/></name></expr></argument>)<pos:position pos:line="100" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="100" pos:column="46"/></expr_stmt>
				<continue pos:line="101" pos:column="33">continue;<pos:position pos:line="101" pos:column="42"/></continue>
			}<pos:position pos:line="102" pos:column="26"/></block></then></if>

			<comment type="block" pos:line="104" pos:column="25">/* map the local file */</comment>
			<if pos:line="105" pos:column="25">if <condition pos:line="105" pos:column="28">(<expr><call><name pos:line="105" pos:column="29">do_fstat<pos:position pos:line="105" pos:column="37"/></name><argument_list pos:line="105" pos:column="37">(<argument><expr><name pos:line="105" pos:column="38">fd<pos:position pos:line="105" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="105" pos:column="42">&amp;<pos:position pos:line="105" pos:column="47"/></operator><name pos:line="105" pos:column="43">st<pos:position pos:line="105" pos:column="45"/></name></expr></argument>)<pos:position pos:line="105" pos:column="46"/></argument_list></call> <operator pos:line="105" pos:column="47">!=<pos:position pos:line="105" pos:column="49"/></operator> <literal type="number" pos:line="105" pos:column="50">0<pos:position pos:line="105" pos:column="51"/></literal></expr>)<pos:position pos:line="105" pos:column="52"/></condition><then pos:line="105" pos:column="52"> <block pos:line="105" pos:column="53">{
				<expr_stmt><expr><name pos:line="106" pos:column="33">io_error<pos:position pos:line="106" pos:column="41"/></name> <operator pos:line="106" pos:column="42">|=<pos:position pos:line="106" pos:column="44"/></operator> <name pos:line="106" pos:column="45">IOERR_GENERAL<pos:position pos:line="106" pos:column="58"/></name></expr>;<pos:position pos:line="106" pos:column="59"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="107" pos:column="33">rprintf<pos:position pos:line="107" pos:column="40"/></name><argument_list pos:line="107" pos:column="40">(<argument><expr><name pos:line="107" pos:column="41">FERROR<pos:position pos:line="107" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="107" pos:column="49">"fstat failed: %s\n"<pos:position pos:line="107" pos:column="69"/></literal></expr></argument>, <argument><expr><call><name pos:line="107" pos:column="71">strerror<pos:position pos:line="107" pos:column="79"/></name><argument_list pos:line="107" pos:column="79">(<argument><expr><name pos:line="107" pos:column="80">errno<pos:position pos:line="107" pos:column="85"/></name></expr></argument>)<pos:position pos:line="107" pos:column="86"/></argument_list></call></expr></argument>)<pos:position pos:line="107" pos:column="87"/></argument_list></call></expr>;<pos:position pos:line="107" pos:column="88"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="108" pos:column="33">free_sums<pos:position pos:line="108" pos:column="42"/></name><argument_list pos:line="108" pos:column="42">(<argument><expr><name pos:line="108" pos:column="43">s<pos:position pos:line="108" pos:column="44"/></name></expr></argument>)<pos:position pos:line="108" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="108" pos:column="46"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="109" pos:column="33">close<pos:position pos:line="109" pos:column="38"/></name><argument_list pos:line="109" pos:column="38">(<argument><expr><name pos:line="109" pos:column="39">fd<pos:position pos:line="109" pos:column="41"/></name></expr></argument>)<pos:position pos:line="109" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="109" pos:column="43"/></expr_stmt>
				<return pos:line="110" pos:column="33">return;<pos:position pos:line="110" pos:column="40"/></return>
			}<pos:position pos:line="111" pos:column="26"/></block></then></if>

			<if pos:line="113" pos:column="25">if <condition pos:line="113" pos:column="28">(<expr><name><name pos:line="113" pos:column="29">st<pos:position pos:line="113" pos:column="31"/></name><operator pos:line="113" pos:column="31">.<pos:position pos:line="113" pos:column="32"/></operator><name pos:line="113" pos:column="32">st_size<pos:position pos:line="113" pos:column="39"/></name></name> <operator pos:line="113" pos:column="40">&gt;<pos:position pos:line="113" pos:column="44"/></operator> <literal type="number" pos:line="113" pos:column="42">0<pos:position pos:line="113" pos:column="43"/></literal></expr>)<pos:position pos:line="113" pos:column="44"/></condition><then pos:line="113" pos:column="44"> <block pos:line="113" pos:column="45">{
				<expr_stmt><expr><name pos:line="114" pos:column="33">buf<pos:position pos:line="114" pos:column="36"/></name> <operator pos:line="114" pos:column="37">=<pos:position pos:line="114" pos:column="38"/></operator> <call><name pos:line="114" pos:column="39">map_file<pos:position pos:line="114" pos:column="47"/></name><argument_list pos:line="114" pos:column="47">(<argument><expr><name pos:line="114" pos:column="48">fd<pos:position pos:line="114" pos:column="50"/></name></expr></argument>, <argument><expr><name><name pos:line="114" pos:column="52">st<pos:position pos:line="114" pos:column="54"/></name><operator pos:line="114" pos:column="54">.<pos:position pos:line="114" pos:column="55"/></operator><name pos:line="114" pos:column="55">st_size<pos:position pos:line="114" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="114" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="114" pos:column="64"/></expr_stmt>
			}<pos:position pos:line="115" pos:column="26"/></block></then> <else pos:line="115" pos:column="27">else <block pos:line="115" pos:column="32">{
				<expr_stmt><expr><name pos:line="116" pos:column="33">buf<pos:position pos:line="116" pos:column="36"/></name> <operator pos:line="116" pos:column="37">=<pos:position pos:line="116" pos:column="38"/></operator> <name pos:line="116" pos:column="39">NULL<pos:position pos:line="116" pos:column="43"/></name></expr>;<pos:position pos:line="116" pos:column="44"/></expr_stmt>
			}<pos:position pos:line="117" pos:column="26"/></block></else></if>

			<if pos:line="119" pos:column="25">if <condition pos:line="119" pos:column="28">(<expr><name pos:line="119" pos:column="29">verbose<pos:position pos:line="119" pos:column="36"/></name> <operator pos:line="119" pos:column="37">&gt;<pos:position pos:line="119" pos:column="41"/></operator> <literal type="number" pos:line="119" pos:column="39">2<pos:position pos:line="119" pos:column="40"/></literal></expr>)<pos:position pos:line="119" pos:column="41"/></condition><then pos:line="119" pos:column="41">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="120" pos:column="33">rprintf<pos:position pos:line="120" pos:column="40"/></name><argument_list pos:line="120" pos:column="40">(<argument><expr><name pos:line="120" pos:column="41">FINFO<pos:position pos:line="120" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="120" pos:column="48">"send_files mapped %s of size %.0f\n"<pos:position pos:line="120" pos:column="85"/></literal></expr></argument>,
					<argument><expr><name pos:line="121" pos:column="41">fname<pos:position pos:line="121" pos:column="46"/></name></expr></argument>, <argument><expr><operator pos:line="121" pos:column="48">(<pos:position pos:line="121" pos:column="49"/></operator><name pos:line="121" pos:column="49">double<pos:position pos:line="121" pos:column="55"/></name><operator pos:line="121" pos:column="55">)<pos:position pos:line="121" pos:column="56"/></operator><name><name pos:line="121" pos:column="56">st<pos:position pos:line="121" pos:column="58"/></name><operator pos:line="121" pos:column="58">.<pos:position pos:line="121" pos:column="59"/></operator><name pos:line="121" pos:column="59">st_size<pos:position pos:line="121" pos:column="66"/></name></name></expr></argument>)<pos:position pos:line="121" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="121" pos:column="68"/></expr_stmt></block></then></if>

			<expr_stmt><expr><call><name pos:line="123" pos:column="25">write_int<pos:position pos:line="123" pos:column="34"/></name><argument_list pos:line="123" pos:column="34">(<argument><expr><name pos:line="123" pos:column="35">f_out<pos:position pos:line="123" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="123" pos:column="42">i<pos:position pos:line="123" pos:column="43"/></name></expr></argument>)<pos:position pos:line="123" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="123" pos:column="45"/></expr_stmt>

			<if pos:line="125" pos:column="25">if <condition pos:line="125" pos:column="28">(<expr><name pos:line="125" pos:column="29">write_batch<pos:position pos:line="125" pos:column="40"/></name></expr>)<pos:position pos:line="125" pos:column="41"/></condition><then pos:line="125" pos:column="41">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="126" pos:column="33">write_batch_delta_file<pos:position pos:line="126" pos:column="55"/></name><argument_list pos:line="126" pos:column="55">(<argument><expr><operator pos:line="126" pos:column="56">(<pos:position pos:line="126" pos:column="57"/></operator><name pos:line="126" pos:column="57">char<pos:position pos:line="126" pos:column="61"/></name> <operator pos:line="126" pos:column="62">*<pos:position pos:line="126" pos:column="63"/></operator><operator pos:line="126" pos:column="63">)<pos:position pos:line="126" pos:column="64"/></operator><operator pos:line="126" pos:column="64">&amp;<pos:position pos:line="126" pos:column="69"/></operator><name pos:line="126" pos:column="65">i<pos:position pos:line="126" pos:column="66"/></name></expr></argument>, <argument><expr><sizeof pos:line="126" pos:column="68">sizeof<argument_list pos:line="126" pos:column="74">(<argument><expr><name pos:line="126" pos:column="75">i<pos:position pos:line="126" pos:column="76"/></name></expr></argument>)<pos:position pos:line="126" pos:column="77"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="126" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="126" pos:column="79"/></expr_stmt></block></then></if>

			<expr_stmt><expr><call><name pos:line="128" pos:column="25">write_sum_head<pos:position pos:line="128" pos:column="39"/></name><argument_list pos:line="128" pos:column="39">(<argument><expr><name pos:line="128" pos:column="40">f_out<pos:position pos:line="128" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="128" pos:column="47">s<pos:position pos:line="128" pos:column="48"/></name></expr></argument>)<pos:position pos:line="128" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="128" pos:column="50"/></expr_stmt>
		}<pos:position pos:line="129" pos:column="18"/></block></then></if>

		<if pos:line="131" pos:column="17">if <condition pos:line="131" pos:column="20">(<expr><name pos:line="131" pos:column="21">verbose<pos:position pos:line="131" pos:column="28"/></name> <operator pos:line="131" pos:column="29">&gt;<pos:position pos:line="131" pos:column="33"/></operator> <literal type="number" pos:line="131" pos:column="31">2<pos:position pos:line="131" pos:column="32"/></literal> <operator pos:line="131" pos:column="33">&amp;&amp;<pos:position pos:line="131" pos:column="43"/></operator> <operator pos:line="131" pos:column="36">!<pos:position pos:line="131" pos:column="37"/></operator><name pos:line="131" pos:column="37">read_batch<pos:position pos:line="131" pos:column="47"/></name></expr>)<pos:position pos:line="131" pos:column="48"/></condition><then pos:line="131" pos:column="48">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="132" pos:column="25">rprintf<pos:position pos:line="132" pos:column="32"/></name><argument_list pos:line="132" pos:column="32">(<argument><expr><name pos:line="132" pos:column="33">FINFO<pos:position pos:line="132" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="132" pos:column="40">"calling match_sums %s\n"<pos:position pos:line="132" pos:column="65"/></literal></expr></argument>, <argument><expr><name pos:line="132" pos:column="67">fname<pos:position pos:line="132" pos:column="72"/></name></expr></argument>)<pos:position pos:line="132" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="132" pos:column="74"/></expr_stmt></block></then></if>

		<if pos:line="134" pos:column="17">if <condition pos:line="134" pos:column="20">(<expr><operator pos:line="134" pos:column="21">!<pos:position pos:line="134" pos:column="22"/></operator><name pos:line="134" pos:column="22">am_server<pos:position pos:line="134" pos:column="31"/></name> <operator pos:line="134" pos:column="32">&amp;&amp;<pos:position pos:line="134" pos:column="42"/></operator> <name pos:line="134" pos:column="35">verbose<pos:position pos:line="134" pos:column="42"/></name></expr>)<pos:position pos:line="134" pos:column="43"/></condition><then pos:line="134" pos:column="43"> <block pos:line="134" pos:column="44">{	<comment type="block" pos:line="134" pos:column="49">/* log transfer */</comment>
			<expr_stmt><expr><call><name pos:line="135" pos:column="25">rprintf<pos:position pos:line="135" pos:column="32"/></name><argument_list pos:line="135" pos:column="32">(<argument><expr><name pos:line="135" pos:column="33">FINFO<pos:position pos:line="135" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="135" pos:column="40">"%s\n"<pos:position pos:line="135" pos:column="46"/></literal></expr></argument>, <argument><expr><name pos:line="135" pos:column="48">fname<pos:position pos:line="135" pos:column="53"/></name><operator pos:line="135" pos:column="53">+<pos:position pos:line="135" pos:column="54"/></operator><name pos:line="135" pos:column="54">offset<pos:position pos:line="135" pos:column="60"/></name></expr></argument>)<pos:position pos:line="135" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="135" pos:column="62"/></expr_stmt>
		}<pos:position pos:line="136" pos:column="18"/></block></then></if>

		<expr_stmt><expr><call><name pos:line="138" pos:column="17">set_compression<pos:position pos:line="138" pos:column="32"/></name><argument_list pos:line="138" pos:column="32">(<argument><expr><name pos:line="138" pos:column="33">fname<pos:position pos:line="138" pos:column="38"/></name></expr></argument>)<pos:position pos:line="138" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="138" pos:column="40"/></expr_stmt>

		<if pos:line="140" pos:column="17">if <condition pos:line="140" pos:column="20">(<expr><name pos:line="140" pos:column="21">read_batch<pos:position pos:line="140" pos:column="31"/></name></expr>)<pos:position pos:line="140" pos:column="32"/></condition><then pos:line="140" pos:column="32"> <block pos:line="140" pos:column="33">{ <comment type="block" pos:line="140" pos:column="35">/* dw */</comment>
			<comment type="block" pos:line="141" pos:column="25">/* read checksums originally computed on sender side */</comment>
			<expr_stmt><expr><call><name pos:line="142" pos:column="25">read_batch_csum_info<pos:position pos:line="142" pos:column="45"/></name><argument_list pos:line="142" pos:column="45">(<argument><expr><name pos:line="142" pos:column="46">i<pos:position pos:line="142" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="142" pos:column="49">s<pos:position pos:line="142" pos:column="50"/></name></expr></argument>, <argument><expr><operator pos:line="142" pos:column="52">&amp;<pos:position pos:line="142" pos:column="57"/></operator><name pos:line="142" pos:column="53">checksums_match<pos:position pos:line="142" pos:column="68"/></name></expr></argument>)<pos:position pos:line="142" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="142" pos:column="70"/></expr_stmt>
			<if pos:line="143" pos:column="25">if <condition pos:line="143" pos:column="28">(<expr><name pos:line="143" pos:column="29">checksums_match<pos:position pos:line="143" pos:column="44"/></name></expr>)<pos:position pos:line="143" pos:column="45"/></condition><then pos:line="143" pos:column="45"> <block pos:line="143" pos:column="46">{
				<expr_stmt><expr><call><name pos:line="144" pos:column="33">read_batch_delta_file<pos:position pos:line="144" pos:column="54"/></name><argument_list pos:line="144" pos:column="54">( <argument><expr><operator pos:line="144" pos:column="56">(<pos:position pos:line="144" pos:column="57"/></operator><name pos:line="144" pos:column="57">char<pos:position pos:line="144" pos:column="61"/></name> <operator pos:line="144" pos:column="62">*<pos:position pos:line="144" pos:column="63"/></operator><operator pos:line="144" pos:column="63">)<pos:position pos:line="144" pos:column="64"/></operator> <operator pos:line="144" pos:column="65">&amp;<pos:position pos:line="144" pos:column="70"/></operator><name pos:line="144" pos:column="66">j<pos:position pos:line="144" pos:column="67"/></name></expr></argument>, <argument><expr><sizeof pos:line="144" pos:column="69">sizeof<argument_list pos:line="144" pos:column="75">(<argument><expr><name pos:line="144" pos:column="76">int<pos:position pos:line="144" pos:column="79"/></name></expr></argument>)<pos:position pos:line="144" pos:column="80"/></argument_list></sizeof></expr></argument> )<pos:position pos:line="144" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="144" pos:column="83"/></expr_stmt>
				<if pos:line="145" pos:column="33">if <condition pos:line="145" pos:column="36">(<expr><name pos:line="145" pos:column="37">j<pos:position pos:line="145" pos:column="38"/></name> <operator pos:line="145" pos:column="39">!=<pos:position pos:line="145" pos:column="41"/></operator> <name pos:line="145" pos:column="42">i<pos:position pos:line="145" pos:column="43"/></name></expr>)<pos:position pos:line="145" pos:column="44"/></condition><then pos:line="145" pos:column="44"> <block pos:line="145" pos:column="45">{    <comment type="block" pos:line="145" pos:column="50">/* if flist index entries don't match*/</comment>
					<expr_stmt><expr><call><name pos:line="146" pos:column="41">rprintf<pos:position pos:line="146" pos:column="48"/></name><argument_list pos:line="146" pos:column="48">(<argument><expr><name pos:line="146" pos:column="49">FINFO<pos:position pos:line="146" pos:column="54"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="146" pos:column="56">"index mismatch in send_files\n"<pos:position pos:line="146" pos:column="88"/></literal></expr></argument>)<pos:position pos:line="146" pos:column="89"/></argument_list></call></expr>;<pos:position pos:line="146" pos:column="90"/></expr_stmt>
					<expr_stmt><expr><call><name pos:line="147" pos:column="41">rprintf<pos:position pos:line="147" pos:column="48"/></name><argument_list pos:line="147" pos:column="48">(<argument><expr><name pos:line="147" pos:column="49">FINFO<pos:position pos:line="147" pos:column="54"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="147" pos:column="56">"read index = %d flist ndx = %d\n"<pos:position pos:line="147" pos:column="90"/></literal></expr></argument>, <argument><expr><name pos:line="147" pos:column="92">j<pos:position pos:line="147" pos:column="93"/></name></expr></argument>, <argument><expr><name pos:line="147" pos:column="95">i<pos:position pos:line="147" pos:column="96"/></name></expr></argument>)<pos:position pos:line="147" pos:column="97"/></argument_list></call></expr>;<pos:position pos:line="147" pos:column="98"/></expr_stmt>
					<expr_stmt><expr><call><name pos:line="148" pos:column="41">close_batch_delta_file<pos:position pos:line="148" pos:column="63"/></name><argument_list pos:line="148" pos:column="63">()<pos:position pos:line="148" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="148" pos:column="66"/></expr_stmt>
					<expr_stmt><expr><call><name pos:line="149" pos:column="41">close_batch_csums_file<pos:position pos:line="149" pos:column="63"/></name><argument_list pos:line="149" pos:column="63">()<pos:position pos:line="149" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="149" pos:column="66"/></expr_stmt>
					<expr_stmt><expr><call><name pos:line="150" pos:column="41">exit_cleanup<pos:position pos:line="150" pos:column="53"/></name><argument_list pos:line="150" pos:column="53">(<argument><expr><literal type="number" pos:line="150" pos:column="54">1<pos:position pos:line="150" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="150" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="150" pos:column="57"/></expr_stmt>
				}<pos:position pos:line="151" pos:column="34"/></block></then> <else pos:line="151" pos:column="35">else <block pos:line="151" pos:column="40">{
					<expr_stmt><expr><call><name pos:line="152" pos:column="41">write_int<pos:position pos:line="152" pos:column="50"/></name><argument_list pos:line="152" pos:column="50">(<argument><expr><name pos:line="152" pos:column="51">f_out<pos:position pos:line="152" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="152" pos:column="58">j<pos:position pos:line="152" pos:column="59"/></name></expr></argument>)<pos:position pos:line="152" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="152" pos:column="61"/></expr_stmt>
					<expr_stmt><expr><call><name pos:line="153" pos:column="41">write_sum_head<pos:position pos:line="153" pos:column="55"/></name><argument_list pos:line="153" pos:column="55">(<argument><expr><name pos:line="153" pos:column="56">f_out<pos:position pos:line="153" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="153" pos:column="63">s<pos:position pos:line="153" pos:column="64"/></name></expr></argument>)<pos:position pos:line="153" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="153" pos:column="66"/></expr_stmt>
					<expr_stmt><expr><name pos:line="154" pos:column="41">done<pos:position pos:line="154" pos:column="45"/></name> <operator pos:line="154" pos:column="46">=<pos:position pos:line="154" pos:column="47"/></operator> <literal type="number" pos:line="154" pos:column="48">0<pos:position pos:line="154" pos:column="49"/></literal></expr>;<pos:position pos:line="154" pos:column="50"/></expr_stmt>
					<while pos:line="155" pos:column="41">while <condition pos:line="155" pos:column="47">(<expr><operator pos:line="155" pos:column="48">!<pos:position pos:line="155" pos:column="49"/></operator><name pos:line="155" pos:column="49">done<pos:position pos:line="155" pos:column="53"/></name></expr>)<pos:position pos:line="155" pos:column="54"/></condition> <block pos:line="155" pos:column="55">{
						<expr_stmt><expr><call><name pos:line="156" pos:column="49">read_batch_delta_file<pos:position pos:line="156" pos:column="70"/></name><argument_list pos:line="156" pos:column="70">( <argument><expr><operator pos:line="156" pos:column="72">(<pos:position pos:line="156" pos:column="73"/></operator><name pos:line="156" pos:column="73">char<pos:position pos:line="156" pos:column="77"/></name> <operator pos:line="156" pos:column="78">*<pos:position pos:line="156" pos:column="79"/></operator><operator pos:line="156" pos:column="79">)<pos:position pos:line="156" pos:column="80"/></operator> <operator pos:line="156" pos:column="81">&amp;<pos:position pos:line="156" pos:column="86"/></operator><name pos:line="156" pos:column="82">buff_len<pos:position pos:line="156" pos:column="90"/></name></expr></argument>, <argument><expr><sizeof pos:line="156" pos:column="92">sizeof<argument_list pos:line="156" pos:column="98">(<argument><expr><name pos:line="156" pos:column="99">int<pos:position pos:line="156" pos:column="102"/></name></expr></argument>)<pos:position pos:line="156" pos:column="103"/></argument_list></sizeof></expr></argument> )<pos:position pos:line="156" pos:column="105"/></argument_list></call></expr>;<pos:position pos:line="156" pos:column="106"/></expr_stmt>
						<expr_stmt><expr><call><name pos:line="157" pos:column="49">write_int<pos:position pos:line="157" pos:column="58"/></name><argument_list pos:line="157" pos:column="58">(<argument><expr><name pos:line="157" pos:column="59">f_out<pos:position pos:line="157" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="157" pos:column="66">buff_len<pos:position pos:line="157" pos:column="74"/></name></expr></argument>)<pos:position pos:line="157" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="157" pos:column="76"/></expr_stmt>
						<if pos:line="158" pos:column="49">if <condition pos:line="158" pos:column="52">(<expr><name pos:line="158" pos:column="53">buff_len<pos:position pos:line="158" pos:column="61"/></name> <operator pos:line="158" pos:column="62">==<pos:position pos:line="158" pos:column="64"/></operator> <literal type="number" pos:line="158" pos:column="65">0<pos:position pos:line="158" pos:column="66"/></literal></expr>)<pos:position pos:line="158" pos:column="67"/></condition><then pos:line="158" pos:column="67"> <block pos:line="158" pos:column="68">{
							<expr_stmt><expr><name pos:line="159" pos:column="57">done<pos:position pos:line="159" pos:column="61"/></name> <operator pos:line="159" pos:column="62">=<pos:position pos:line="159" pos:column="63"/></operator> <literal type="number" pos:line="159" pos:column="64">1<pos:position pos:line="159" pos:column="65"/></literal></expr>;<pos:position pos:line="159" pos:column="66"/></expr_stmt>
						}<pos:position pos:line="160" pos:column="50"/></block></then> <else pos:line="160" pos:column="51">else <block pos:line="160" pos:column="56">{
							<if pos:line="161" pos:column="57">if <condition pos:line="161" pos:column="60">(<expr><name pos:line="161" pos:column="61">buff_len<pos:position pos:line="161" pos:column="69"/></name> <operator pos:line="161" pos:column="70">&gt;<pos:position pos:line="161" pos:column="74"/></operator> <literal type="number" pos:line="161" pos:column="72">0<pos:position pos:line="161" pos:column="73"/></literal></expr>)<pos:position pos:line="161" pos:column="74"/></condition><then pos:line="161" pos:column="74"> <block pos:line="161" pos:column="75">{
								<expr_stmt><expr><call><name pos:line="162" pos:column="65">read_batch_delta_file<pos:position pos:line="162" pos:column="86"/></name><argument_list pos:line="162" pos:column="86">(<argument><expr><name pos:line="162" pos:column="87">buff<pos:position pos:line="162" pos:column="91"/></name></expr></argument>, <argument><expr><name pos:line="162" pos:column="93">buff_len<pos:position pos:line="162" pos:column="101"/></name></expr></argument>)<pos:position pos:line="162" pos:column="102"/></argument_list></call></expr>;<pos:position pos:line="162" pos:column="103"/></expr_stmt>
								<expr_stmt><expr><call><name pos:line="163" pos:column="65">write_buf<pos:position pos:line="163" pos:column="74"/></name><argument_list pos:line="163" pos:column="74">(<argument><expr><name pos:line="163" pos:column="75">f_out<pos:position pos:line="163" pos:column="80"/></name></expr></argument>, <argument><expr><name pos:line="163" pos:column="82">buff<pos:position pos:line="163" pos:column="86"/></name></expr></argument>, <argument><expr><name pos:line="163" pos:column="88">buff_len<pos:position pos:line="163" pos:column="96"/></name></expr></argument>)<pos:position pos:line="163" pos:column="97"/></argument_list></call></expr>;<pos:position pos:line="163" pos:column="98"/></expr_stmt>
							}<pos:position pos:line="164" pos:column="58"/></block></then></if>
						}<pos:position pos:line="165" pos:column="50"/></block></else></if>
					}<pos:position pos:line="166" pos:column="42"/></block></while>  <comment type="block" pos:line="166" pos:column="44">/* end while  */</comment>
					<expr_stmt><expr><call><name pos:line="167" pos:column="41">read_batch_delta_file<pos:position pos:line="167" pos:column="62"/></name><argument_list pos:line="167" pos:column="62">( <argument><expr><name pos:line="167" pos:column="64">buff<pos:position pos:line="167" pos:column="68"/></name></expr></argument>, <argument><expr><name pos:line="167" pos:column="70">MD4_SUM_LENGTH<pos:position pos:line="167" pos:column="84"/></name></expr></argument>)<pos:position pos:line="167" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="167" pos:column="86"/></expr_stmt>
					<expr_stmt><expr><call><name pos:line="168" pos:column="41">write_buf<pos:position pos:line="168" pos:column="50"/></name><argument_list pos:line="168" pos:column="50">(<argument><expr><name pos:line="168" pos:column="51">f_out<pos:position pos:line="168" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="168" pos:column="58">buff<pos:position pos:line="168" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="168" pos:column="64">MD4_SUM_LENGTH<pos:position pos:line="168" pos:column="78"/></name></expr></argument>)<pos:position pos:line="168" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="168" pos:column="80"/></expr_stmt>

				}<pos:position pos:line="170" pos:column="34"/></block></else></if>  <comment type="block" pos:line="170" pos:column="36">/* j=i */</comment>
			}<pos:position pos:line="171" pos:column="26"/></block></then> <else pos:line="171" pos:column="27">else <block pos:line="171" pos:column="32">{  <comment type="block" pos:line="171" pos:column="35">/* not checksum match */</comment>
				<expr_stmt><expr><call><name pos:line="172" pos:column="33">rprintf<pos:position pos:line="172" pos:column="40"/></name> <argument_list pos:line="172" pos:column="41">(<argument><expr><name pos:line="172" pos:column="42">FINFO<pos:position pos:line="172" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="172" pos:column="49">"readbatch &amp; checksums don't match\n"<pos:position pos:line="172" pos:column="90"/></literal></expr></argument>)<pos:position pos:line="172" pos:column="87"/></argument_list></call></expr>;<pos:position pos:line="172" pos:column="88"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="173" pos:column="33">rprintf<pos:position pos:line="173" pos:column="40"/></name> <argument_list pos:line="173" pos:column="41">(<argument><expr><name pos:line="173" pos:column="42">FINFO<pos:position pos:line="173" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="173" pos:column="49">"filename=%s is being skipped\n"<pos:position pos:line="173" pos:column="81"/></literal></expr></argument>, <argument><expr><name pos:line="173" pos:column="83">fname<pos:position pos:line="173" pos:column="88"/></name></expr></argument>)<pos:position pos:line="173" pos:column="89"/></argument_list></call></expr>;<pos:position pos:line="173" pos:column="90"/></expr_stmt>
				<continue pos:line="174" pos:column="33">continue;<pos:position pos:line="174" pos:column="42"/></continue>
			}<pos:position pos:line="175" pos:column="26"/></block></else></if>
		}<pos:position pos:line="176" pos:column="18"/></block></then> <else pos:line="176" pos:column="19">else  <block pos:line="176" pos:column="25">{
			<expr_stmt><expr><call><name pos:line="177" pos:column="25">match_sums<pos:position pos:line="177" pos:column="35"/></name><argument_list pos:line="177" pos:column="35">(<argument><expr><name pos:line="177" pos:column="36">f_out<pos:position pos:line="177" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="177" pos:column="43">s<pos:position pos:line="177" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="177" pos:column="46">buf<pos:position pos:line="177" pos:column="49"/></name></expr></argument>, <argument><expr><name><name pos:line="177" pos:column="51">st<pos:position pos:line="177" pos:column="53"/></name><operator pos:line="177" pos:column="53">.<pos:position pos:line="177" pos:column="54"/></operator><name pos:line="177" pos:column="54">st_size<pos:position pos:line="177" pos:column="61"/></name></name></expr></argument>)<pos:position pos:line="177" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="177" pos:column="63"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="178" pos:column="25">log_send<pos:position pos:line="178" pos:column="33"/></name><argument_list pos:line="178" pos:column="33">(<argument><expr><name pos:line="178" pos:column="34">file<pos:position pos:line="178" pos:column="38"/></name></expr></argument>, <argument><expr><operator pos:line="178" pos:column="40">&amp;<pos:position pos:line="178" pos:column="45"/></operator><name pos:line="178" pos:column="41">initial_stats<pos:position pos:line="178" pos:column="54"/></name></expr></argument>)<pos:position pos:line="178" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="178" pos:column="56"/></expr_stmt>
		}<pos:position pos:line="179" pos:column="18"/></block></else></if>

		<if pos:line="181" pos:column="17">if <condition pos:line="181" pos:column="20">(<expr><operator pos:line="181" pos:column="21">!<pos:position pos:line="181" pos:column="22"/></operator><name pos:line="181" pos:column="22">read_batch<pos:position pos:line="181" pos:column="32"/></name></expr>)<pos:position pos:line="181" pos:column="33"/></condition><then pos:line="181" pos:column="33"> <block pos:line="181" pos:column="34">{ <comment type="block" pos:line="181" pos:column="36">/* dw */</comment>
			<if pos:line="182" pos:column="25">if <condition pos:line="182" pos:column="28">(<expr><name pos:line="182" pos:column="29">buf<pos:position pos:line="182" pos:column="32"/></name></expr>)<pos:position pos:line="182" pos:column="33"/></condition><then pos:line="182" pos:column="33"> <block pos:line="182" pos:column="34">{
				<expr_stmt><expr><name pos:line="183" pos:column="33">j<pos:position pos:line="183" pos:column="34"/></name> <operator pos:line="183" pos:column="35">=<pos:position pos:line="183" pos:column="36"/></operator> <call><name pos:line="183" pos:column="37">unmap_file<pos:position pos:line="183" pos:column="47"/></name><argument_list pos:line="183" pos:column="47">(<argument><expr><name pos:line="183" pos:column="48">buf<pos:position pos:line="183" pos:column="51"/></name></expr></argument>)<pos:position pos:line="183" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="183" pos:column="53"/></expr_stmt>
				<if pos:line="184" pos:column="33">if <condition pos:line="184" pos:column="36">(<expr><name pos:line="184" pos:column="37">j<pos:position pos:line="184" pos:column="38"/></name></expr>)<pos:position pos:line="184" pos:column="39"/></condition><then pos:line="184" pos:column="39"> <block pos:line="184" pos:column="40">{
					<expr_stmt><expr><name pos:line="185" pos:column="41">io_error<pos:position pos:line="185" pos:column="49"/></name> <operator pos:line="185" pos:column="50">|=<pos:position pos:line="185" pos:column="52"/></operator> <name pos:line="185" pos:column="53">IOERR_GENERAL<pos:position pos:line="185" pos:column="66"/></name></expr>;<pos:position pos:line="185" pos:column="67"/></expr_stmt>
					<expr_stmt><expr><call><name pos:line="186" pos:column="41">rprintf<pos:position pos:line="186" pos:column="48"/></name><argument_list pos:line="186" pos:column="48">(<argument><expr><name pos:line="186" pos:column="49">FERROR<pos:position pos:line="186" pos:column="55"/></name></expr></argument>,
					    <argument><expr><literal type="string" pos:line="187" pos:column="45">"read errors mapping %s: (%d) %s\n"<pos:position pos:line="187" pos:column="80"/></literal></expr></argument>,
					    <argument><expr><call><name pos:line="188" pos:column="45">full_fname<pos:position pos:line="188" pos:column="55"/></name><argument_list pos:line="188" pos:column="55">(<argument><expr><name pos:line="188" pos:column="56">fname<pos:position pos:line="188" pos:column="61"/></name></expr></argument>)<pos:position pos:line="188" pos:column="62"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="188" pos:column="64">j<pos:position pos:line="188" pos:column="65"/></name></expr></argument>, <argument><expr><call><name pos:line="188" pos:column="67">strerror<pos:position pos:line="188" pos:column="75"/></name><argument_list pos:line="188" pos:column="75">(<argument><expr><name pos:line="188" pos:column="76">j<pos:position pos:line="188" pos:column="77"/></name></expr></argument>)<pos:position pos:line="188" pos:column="78"/></argument_list></call></expr></argument>)<pos:position pos:line="188" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="188" pos:column="80"/></expr_stmt>
				}<pos:position pos:line="189" pos:column="34"/></block></then></if>
			}<pos:position pos:line="190" pos:column="26"/></block></then></if>
			<expr_stmt><expr><call><name pos:line="191" pos:column="25">close<pos:position pos:line="191" pos:column="30"/></name><argument_list pos:line="191" pos:column="30">(<argument><expr><name pos:line="191" pos:column="31">fd<pos:position pos:line="191" pos:column="33"/></name></expr></argument>)<pos:position pos:line="191" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="191" pos:column="35"/></expr_stmt>
		}<pos:position pos:line="192" pos:column="18"/></block></then></if>

		<expr_stmt><expr><call><name pos:line="194" pos:column="17">free_sums<pos:position pos:line="194" pos:column="26"/></name><argument_list pos:line="194" pos:column="26">(<argument><expr><name pos:line="194" pos:column="27">s<pos:position pos:line="194" pos:column="28"/></name></expr></argument>)<pos:position pos:line="194" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="194" pos:column="30"/></expr_stmt>

		<if pos:line="196" pos:column="17">if <condition pos:line="196" pos:column="20">(<expr><name pos:line="196" pos:column="21">verbose<pos:position pos:line="196" pos:column="28"/></name> <operator pos:line="196" pos:column="29">&gt;<pos:position pos:line="196" pos:column="33"/></operator> <literal type="number" pos:line="196" pos:column="31">2<pos:position pos:line="196" pos:column="32"/></literal></expr>)<pos:position pos:line="196" pos:column="33"/></condition><then pos:line="196" pos:column="33">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="197" pos:column="25">rprintf<pos:position pos:line="197" pos:column="32"/></name><argument_list pos:line="197" pos:column="32">(<argument><expr><name pos:line="197" pos:column="33">FINFO<pos:position pos:line="197" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="197" pos:column="40">"sender finished %s\n"<pos:position pos:line="197" pos:column="62"/></literal></expr></argument>, <argument><expr><name pos:line="197" pos:column="64">fname<pos:position pos:line="197" pos:column="69"/></name></expr></argument>)<pos:position pos:line="197" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="197" pos:column="71"/></expr_stmt></block></then></if>
	}<pos:position pos:line="198" pos:column="10"/></block></while>

	<if pos:line="200" pos:column="9">if <condition pos:line="200" pos:column="12">(<expr><name pos:line="200" pos:column="13">verbose<pos:position pos:line="200" pos:column="20"/></name> <operator pos:line="200" pos:column="21">&gt;<pos:position pos:line="200" pos:column="25"/></operator> <literal type="number" pos:line="200" pos:column="23">2<pos:position pos:line="200" pos:column="24"/></literal></expr>)<pos:position pos:line="200" pos:column="25"/></condition><then pos:line="200" pos:column="25">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="201" pos:column="17">rprintf<pos:position pos:line="201" pos:column="24"/></name><argument_list pos:line="201" pos:column="24">(<argument><expr><name pos:line="201" pos:column="25">FINFO<pos:position pos:line="201" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="201" pos:column="32">"send files finished\n"<pos:position pos:line="201" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="201" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="201" pos:column="57"/></expr_stmt></block></then></if>

	<expr_stmt><expr><call><name pos:line="203" pos:column="9">match_report<pos:position pos:line="203" pos:column="21"/></name><argument_list pos:line="203" pos:column="21">()<pos:position pos:line="203" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="203" pos:column="24"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="205" pos:column="9">write_int<pos:position pos:line="205" pos:column="18"/></name><argument_list pos:line="205" pos:column="18">(<argument><expr><name pos:line="205" pos:column="19">f_out<pos:position pos:line="205" pos:column="24"/></name></expr></argument>, <argument><expr><operator pos:line="205" pos:column="26">-<pos:position pos:line="205" pos:column="27"/></operator><literal type="number" pos:line="205" pos:column="27">1<pos:position pos:line="205" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="205" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="205" pos:column="30"/></expr_stmt>
	<if pos:line="206" pos:column="9">if <condition pos:line="206" pos:column="12">(<expr><name pos:line="206" pos:column="13">write_batch<pos:position pos:line="206" pos:column="24"/></name> <operator pos:line="206" pos:column="25">||<pos:position pos:line="206" pos:column="27"/></operator> <name pos:line="206" pos:column="28">read_batch<pos:position pos:line="206" pos:column="38"/></name></expr>)<pos:position pos:line="206" pos:column="39"/></condition><then pos:line="206" pos:column="39"> <block pos:line="206" pos:column="40">{ <comment type="block" pos:line="206" pos:column="42">/* dw */</comment>
		<expr_stmt><expr><call><name pos:line="207" pos:column="17">close_batch_csums_file<pos:position pos:line="207" pos:column="39"/></name><argument_list pos:line="207" pos:column="39">()<pos:position pos:line="207" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="207" pos:column="42"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="208" pos:column="17">close_batch_delta_file<pos:position pos:line="208" pos:column="39"/></name><argument_list pos:line="208" pos:column="39">()<pos:position pos:line="208" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="208" pos:column="42"/></expr_stmt>
	}<pos:position pos:line="209" pos:column="10"/></block></then></if>

}<pos:position pos:line="211" pos:column="2"/></block></function></unit>
