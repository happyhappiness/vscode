<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_338_rsync-2.6.2.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">do_recv<pos:position pos:line="1" pos:column="19"/></name><parameter_list pos:line="1" pos:column="19">(<parameter><decl><type><name pos:line="1" pos:column="20">int<pos:position pos:line="1" pos:column="23"/></name></type> <name pos:line="1" pos:column="24">f_in<pos:position pos:line="1" pos:column="28"/></name></decl></parameter>,<parameter><decl><type><name pos:line="1" pos:column="29">int<pos:position pos:line="1" pos:column="32"/></name></type> <name pos:line="1" pos:column="33">f_out<pos:position pos:line="1" pos:column="38"/></name></decl></parameter>,<parameter><decl><type><name><name pos:line="1" pos:column="39">struct<pos:position pos:line="1" pos:column="45"/></name> <name pos:line="1" pos:column="46">file_list<pos:position pos:line="1" pos:column="55"/></name></name> <modifier pos:line="1" pos:column="56">*<pos:position pos:line="1" pos:column="57"/></modifier></type><name pos:line="1" pos:column="57">flist<pos:position pos:line="1" pos:column="62"/></name></decl></parameter>,<parameter><decl><type><name pos:line="1" pos:column="63">char<pos:position pos:line="1" pos:column="67"/></name> <modifier pos:line="1" pos:column="68">*<pos:position pos:line="1" pos:column="69"/></modifier></type><name pos:line="1" pos:column="69">local_name<pos:position pos:line="1" pos:column="79"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="80"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">pid<pos:position pos:line="3" pos:column="16"/></name></decl>;<pos:position pos:line="3" pos:column="17"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">status<pos:position pos:line="4" pos:column="19"/></name><init pos:line="4" pos:column="19">=<expr><literal type="number" pos:line="4" pos:column="20">0<pos:position pos:line="4" pos:column="21"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="22"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name><name pos:line="5" pos:column="13">error_pipe<pos:position pos:line="5" pos:column="23"/></name><index pos:line="5" pos:column="23">[<expr><literal type="number" pos:line="5" pos:column="24">2<pos:position pos:line="5" pos:column="25"/></literal></expr>]<pos:position pos:line="5" pos:column="26"/></index></name></decl>;<pos:position pos:line="5" pos:column="27"/></decl_stmt>

	<if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<expr><name pos:line="7" pos:column="13">preserve_hard_links<pos:position pos:line="7" pos:column="32"/></name></expr>)<pos:position pos:line="7" pos:column="33"/></condition><then pos:line="7" pos:column="33">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="8" pos:column="17">init_hard_links<pos:position pos:line="8" pos:column="32"/></name><argument_list pos:line="8" pos:column="32">(<argument><expr><name pos:line="8" pos:column="33">flist<pos:position pos:line="8" pos:column="38"/></name></expr></argument>)<pos:position pos:line="8" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="40"/></expr_stmt></block></then></if>

	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><operator pos:line="10" pos:column="13">!<pos:position pos:line="10" pos:column="14"/></operator><name pos:line="10" pos:column="14">delete_after<pos:position pos:line="10" pos:column="26"/></name></expr>)<pos:position pos:line="10" pos:column="27"/></condition><then pos:line="10" pos:column="27"> <block pos:line="10" pos:column="28">{
		<comment type="block" pos:line="11" pos:column="17">/* I moved this here from recv_files() to prevent a race condition */</comment>
		<if pos:line="12" pos:column="17">if <condition pos:line="12" pos:column="20">(<expr><name pos:line="12" pos:column="21">recurse<pos:position pos:line="12" pos:column="28"/></name> <operator pos:line="12" pos:column="29">&amp;&amp;<pos:position pos:line="12" pos:column="39"/></operator> <name pos:line="12" pos:column="32">delete_mode<pos:position pos:line="12" pos:column="43"/></name> <operator pos:line="12" pos:column="44">&amp;&amp;<pos:position pos:line="12" pos:column="54"/></operator> <operator pos:line="12" pos:column="47">!<pos:position pos:line="12" pos:column="48"/></operator><name pos:line="12" pos:column="48">local_name<pos:position pos:line="12" pos:column="58"/></name> <operator pos:line="12" pos:column="59">&amp;&amp;<pos:position pos:line="12" pos:column="69"/></operator> <name><name pos:line="12" pos:column="62">flist<pos:position pos:line="12" pos:column="67"/></name><operator pos:line="12" pos:column="67">-&gt;<pos:position pos:line="12" pos:column="72"/></operator><name pos:line="12" pos:column="69">count<pos:position pos:line="12" pos:column="74"/></name></name><operator pos:line="12" pos:column="74">&gt;<pos:position pos:line="12" pos:column="78"/></operator><literal type="number" pos:line="12" pos:column="75">0<pos:position pos:line="12" pos:column="76"/></literal></expr>)<pos:position pos:line="12" pos:column="77"/></condition><then pos:line="12" pos:column="77"> <block pos:line="12" pos:column="78">{
			<expr_stmt><expr><call><name pos:line="13" pos:column="25">delete_files<pos:position pos:line="13" pos:column="37"/></name><argument_list pos:line="13" pos:column="37">(<argument><expr><name pos:line="13" pos:column="38">flist<pos:position pos:line="13" pos:column="43"/></name></expr></argument>)<pos:position pos:line="13" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="45"/></expr_stmt>
		}<pos:position pos:line="14" pos:column="18"/></block></then></if>
	}<pos:position pos:line="15" pos:column="10"/></block></then></if>

	<if pos:line="17" pos:column="9">if <condition pos:line="17" pos:column="12">(<expr><call><name pos:line="17" pos:column="13">fd_pair<pos:position pos:line="17" pos:column="20"/></name><argument_list pos:line="17" pos:column="20">(<argument><expr><name pos:line="17" pos:column="21">error_pipe<pos:position pos:line="17" pos:column="31"/></name></expr></argument>)<pos:position pos:line="17" pos:column="32"/></argument_list></call> <operator pos:line="17" pos:column="33">&lt;<pos:position pos:line="17" pos:column="37"/></operator> <literal type="number" pos:line="17" pos:column="35">0<pos:position pos:line="17" pos:column="36"/></literal></expr>)<pos:position pos:line="17" pos:column="37"/></condition><then pos:line="17" pos:column="37"> <block pos:line="17" pos:column="38">{
		<expr_stmt><expr><call><name pos:line="18" pos:column="17">rprintf<pos:position pos:line="18" pos:column="24"/></name><argument_list pos:line="18" pos:column="24">(<argument><expr><name pos:line="18" pos:column="25">FERROR<pos:position pos:line="18" pos:column="31"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="18" pos:column="32">"error pipe failed in do_recv\n"<pos:position pos:line="18" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="66"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="19" pos:column="17">exit_cleanup<pos:position pos:line="19" pos:column="29"/></name><argument_list pos:line="19" pos:column="29">(<argument><expr><name pos:line="19" pos:column="30">RERR_SOCKETIO<pos:position pos:line="19" pos:column="43"/></name></expr></argument>)<pos:position pos:line="19" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="45"/></expr_stmt>
	}<pos:position pos:line="20" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="22" pos:column="9">io_flush<pos:position pos:line="22" pos:column="17"/></name><argument_list pos:line="22" pos:column="17">(<argument><expr><name pos:line="22" pos:column="18">NORMAL_FLUSH<pos:position pos:line="22" pos:column="30"/></name></expr></argument>)<pos:position pos:line="22" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="32"/></expr_stmt>

	<if pos:line="24" pos:column="9">if <condition pos:line="24" pos:column="12">(<expr><operator pos:line="24" pos:column="13">(<pos:position pos:line="24" pos:column="14"/></operator><name pos:line="24" pos:column="14">pid<pos:position pos:line="24" pos:column="17"/></name><operator pos:line="24" pos:column="17">=<pos:position pos:line="24" pos:column="18"/></operator><call><name pos:line="24" pos:column="18">do_fork<pos:position pos:line="24" pos:column="25"/></name><argument_list pos:line="24" pos:column="25">()<pos:position pos:line="24" pos:column="27"/></argument_list></call><operator pos:line="24" pos:column="27">)<pos:position pos:line="24" pos:column="28"/></operator> <operator pos:line="24" pos:column="29">==<pos:position pos:line="24" pos:column="31"/></operator> <literal type="number" pos:line="24" pos:column="32">0<pos:position pos:line="24" pos:column="33"/></literal></expr>)<pos:position pos:line="24" pos:column="34"/></condition><then pos:line="24" pos:column="34"> <block pos:line="24" pos:column="35">{
		<expr_stmt><expr><call><name pos:line="25" pos:column="17">close<pos:position pos:line="25" pos:column="22"/></name><argument_list pos:line="25" pos:column="22">(<argument><expr><name><name pos:line="25" pos:column="23">error_pipe<pos:position pos:line="25" pos:column="33"/></name><index pos:line="25" pos:column="33">[<expr><literal type="number" pos:line="25" pos:column="34">0<pos:position pos:line="25" pos:column="35"/></literal></expr>]<pos:position pos:line="25" pos:column="36"/></index></name></expr></argument>)<pos:position pos:line="25" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="38"/></expr_stmt>
		<if pos:line="26" pos:column="17">if <condition pos:line="26" pos:column="20">(<expr><name pos:line="26" pos:column="21">f_in<pos:position pos:line="26" pos:column="25"/></name> <operator pos:line="26" pos:column="26">!=<pos:position pos:line="26" pos:column="28"/></operator> <name pos:line="26" pos:column="29">f_out<pos:position pos:line="26" pos:column="34"/></name></expr>)<pos:position pos:line="26" pos:column="35"/></condition><then pos:line="26" pos:column="35"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="26" pos:column="36">close<pos:position pos:line="26" pos:column="41"/></name><argument_list pos:line="26" pos:column="41">(<argument><expr><name pos:line="26" pos:column="42">f_out<pos:position pos:line="26" pos:column="47"/></name></expr></argument>)<pos:position pos:line="26" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="49"/></expr_stmt></block></then></if>

		<comment type="block" pos:line="28" pos:column="17">/* we can't let two processes write to the socket at one time */</comment>
		<expr_stmt><expr><call><name pos:line="29" pos:column="17">io_multiplexing_close<pos:position pos:line="29" pos:column="38"/></name><argument_list pos:line="29" pos:column="38">()<pos:position pos:line="29" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="41"/></expr_stmt>

		<comment type="block" pos:line="31" pos:column="17">/* set place to send errors */</comment>
		<expr_stmt><expr><call><name pos:line="32" pos:column="17">set_msg_fd_out<pos:position pos:line="32" pos:column="31"/></name><argument_list pos:line="32" pos:column="31">(<argument><expr><name><name pos:line="32" pos:column="32">error_pipe<pos:position pos:line="32" pos:column="42"/></name><index pos:line="32" pos:column="42">[<expr><literal type="number" pos:line="32" pos:column="43">1<pos:position pos:line="32" pos:column="44"/></literal></expr>]<pos:position pos:line="32" pos:column="45"/></index></name></expr></argument>)<pos:position pos:line="32" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="47"/></expr_stmt>

		<expr_stmt><expr><call><name pos:line="34" pos:column="17">recv_files<pos:position pos:line="34" pos:column="27"/></name><argument_list pos:line="34" pos:column="27">(<argument><expr><name pos:line="34" pos:column="28">f_in<pos:position pos:line="34" pos:column="32"/></name></expr></argument>,<argument><expr><name pos:line="34" pos:column="33">flist<pos:position pos:line="34" pos:column="38"/></name></expr></argument>,<argument><expr><name pos:line="34" pos:column="39">local_name<pos:position pos:line="34" pos:column="49"/></name></expr></argument>)<pos:position pos:line="34" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="51"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="35" pos:column="17">io_flush<pos:position pos:line="35" pos:column="25"/></name><argument_list pos:line="35" pos:column="25">(<argument><expr><name pos:line="35" pos:column="26">FULL_FLUSH<pos:position pos:line="35" pos:column="36"/></name></expr></argument>)<pos:position pos:line="35" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="38"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="36" pos:column="17">report<pos:position pos:line="36" pos:column="23"/></name><argument_list pos:line="36" pos:column="23">(<argument><expr><name pos:line="36" pos:column="24">f_in<pos:position pos:line="36" pos:column="28"/></name></expr></argument>)<pos:position pos:line="36" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="30"/></expr_stmt>

		<expr_stmt><expr><call><name pos:line="38" pos:column="17">send_msg<pos:position pos:line="38" pos:column="25"/></name><argument_list pos:line="38" pos:column="25">(<argument><expr><name pos:line="38" pos:column="26">MSG_DONE<pos:position pos:line="38" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="38" pos:column="36">""<pos:position pos:line="38" pos:column="38"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="38" pos:column="40">0<pos:position pos:line="38" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="38" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="43"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="39" pos:column="17">io_flush<pos:position pos:line="39" pos:column="25"/></name><argument_list pos:line="39" pos:column="25">(<argument><expr><name pos:line="39" pos:column="26">FULL_FLUSH<pos:position pos:line="39" pos:column="36"/></name></expr></argument>)<pos:position pos:line="39" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="38"/></expr_stmt>
		<comment type="block" pos:line="40" pos:column="17">/* finally we go to sleep until our parent kills us
		 * with a USR2 signal. We sleep for a short time as on
		 * some OSes a signal won't interrupt a sleep! */</comment>
		<while pos:line="43" pos:column="17">while <condition pos:line="43" pos:column="23">(<expr><literal type="number" pos:line="43" pos:column="24">1<pos:position pos:line="43" pos:column="25"/></literal></expr>)<pos:position pos:line="43" pos:column="26"/></condition>
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="44" pos:column="25">msleep<pos:position pos:line="44" pos:column="31"/></name><argument_list pos:line="44" pos:column="31">(<argument><expr><literal type="number" pos:line="44" pos:column="32">20<pos:position pos:line="44" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="36"/></expr_stmt></block></while>
	}<pos:position pos:line="45" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="47" pos:column="9">am_generator<pos:position pos:line="47" pos:column="21"/></name> <operator pos:line="47" pos:column="22">=<pos:position pos:line="47" pos:column="23"/></operator> <literal type="number" pos:line="47" pos:column="24">1<pos:position pos:line="47" pos:column="25"/></literal></expr>;<pos:position pos:line="47" pos:column="26"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="49" pos:column="9">close<pos:position pos:line="49" pos:column="14"/></name><argument_list pos:line="49" pos:column="14">(<argument><expr><name><name pos:line="49" pos:column="15">error_pipe<pos:position pos:line="49" pos:column="25"/></name><index pos:line="49" pos:column="25">[<expr><literal type="number" pos:line="49" pos:column="26">1<pos:position pos:line="49" pos:column="27"/></literal></expr>]<pos:position pos:line="49" pos:column="28"/></index></name></expr></argument>)<pos:position pos:line="49" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="30"/></expr_stmt>
	<if pos:line="50" pos:column="9">if <condition pos:line="50" pos:column="12">(<expr><name pos:line="50" pos:column="13">f_in<pos:position pos:line="50" pos:column="17"/></name> <operator pos:line="50" pos:column="18">!=<pos:position pos:line="50" pos:column="20"/></operator> <name pos:line="50" pos:column="21">f_out<pos:position pos:line="50" pos:column="26"/></name></expr>)<pos:position pos:line="50" pos:column="27"/></condition><then pos:line="50" pos:column="27"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="50" pos:column="28">close<pos:position pos:line="50" pos:column="33"/></name><argument_list pos:line="50" pos:column="33">(<argument><expr><name pos:line="50" pos:column="34">f_in<pos:position pos:line="50" pos:column="38"/></name></expr></argument>)<pos:position pos:line="50" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="40"/></expr_stmt></block></then></if>

	<expr_stmt><expr><call><name pos:line="52" pos:column="9">io_start_buffering_out<pos:position pos:line="52" pos:column="31"/></name><argument_list pos:line="52" pos:column="31">(<argument><expr><name pos:line="52" pos:column="32">f_out<pos:position pos:line="52" pos:column="37"/></name></expr></argument>)<pos:position pos:line="52" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="39"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="54" pos:column="9">set_msg_fd_in<pos:position pos:line="54" pos:column="22"/></name><argument_list pos:line="54" pos:column="22">(<argument><expr><name><name pos:line="54" pos:column="23">error_pipe<pos:position pos:line="54" pos:column="33"/></name><index pos:line="54" pos:column="33">[<expr><literal type="number" pos:line="54" pos:column="34">0<pos:position pos:line="54" pos:column="35"/></literal></expr>]<pos:position pos:line="54" pos:column="36"/></index></name></expr></argument>)<pos:position pos:line="54" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="38"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="56" pos:column="9">generate_files<pos:position pos:line="56" pos:column="23"/></name><argument_list pos:line="56" pos:column="23">(<argument><expr><name pos:line="56" pos:column="24">f_out<pos:position pos:line="56" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="31">flist<pos:position pos:line="56" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="38">local_name<pos:position pos:line="56" pos:column="48"/></name></expr></argument>)<pos:position pos:line="56" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="50"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="58" pos:column="9">get_redo_num<pos:position pos:line="58" pos:column="21"/></name><argument_list pos:line="58" pos:column="21">()<pos:position pos:line="58" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="24"/></expr_stmt> <comment type="block" pos:line="58" pos:column="25">/* Read final MSG_DONE and any prior messages. */</comment>
	<expr_stmt><expr><call><name pos:line="59" pos:column="9">report<pos:position pos:line="59" pos:column="15"/></name><argument_list pos:line="59" pos:column="15">(<argument><expr><operator pos:line="59" pos:column="16">-<pos:position pos:line="59" pos:column="17"/></operator><literal type="number" pos:line="59" pos:column="17">1<pos:position pos:line="59" pos:column="18"/></literal></expr></argument>)<pos:position pos:line="59" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="20"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="60" pos:column="9">io_flush<pos:position pos:line="60" pos:column="17"/></name><argument_list pos:line="60" pos:column="17">(<argument><expr><name pos:line="60" pos:column="18">FULL_FLUSH<pos:position pos:line="60" pos:column="28"/></name></expr></argument>)<pos:position pos:line="60" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="30"/></expr_stmt>
	<if pos:line="61" pos:column="9">if <condition pos:line="61" pos:column="12">(<expr><name pos:line="61" pos:column="13">protocol_version<pos:position pos:line="61" pos:column="29"/></name> <operator pos:line="61" pos:column="30">&gt;=<pos:position pos:line="61" pos:column="35"/></operator> <literal type="number" pos:line="61" pos:column="33">24<pos:position pos:line="61" pos:column="35"/></literal></expr>)<pos:position pos:line="61" pos:column="36"/></condition><then pos:line="61" pos:column="36"> <block pos:line="61" pos:column="37">{
		<comment type="block" pos:line="62" pos:column="17">/* send a final goodbye message */</comment>
		<expr_stmt><expr><call><name pos:line="63" pos:column="17">write_int<pos:position pos:line="63" pos:column="26"/></name><argument_list pos:line="63" pos:column="26">(<argument><expr><name pos:line="63" pos:column="27">f_out<pos:position pos:line="63" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="63" pos:column="34">-<pos:position pos:line="63" pos:column="35"/></operator><literal type="number" pos:line="63" pos:column="35">1<pos:position pos:line="63" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="63" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="38"/></expr_stmt>
	}<pos:position pos:line="64" pos:column="10"/></block></then></if>
	<expr_stmt><expr><call><name pos:line="65" pos:column="9">io_flush<pos:position pos:line="65" pos:column="17"/></name><argument_list pos:line="65" pos:column="17">(<argument><expr><name pos:line="65" pos:column="18">FULL_FLUSH<pos:position pos:line="65" pos:column="28"/></name></expr></argument>)<pos:position pos:line="65" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="30"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="67" pos:column="9">set_msg_fd_in<pos:position pos:line="67" pos:column="22"/></name><argument_list pos:line="67" pos:column="22">(<argument><expr><operator pos:line="67" pos:column="23">-<pos:position pos:line="67" pos:column="24"/></operator><literal type="number" pos:line="67" pos:column="24">1<pos:position pos:line="67" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="67" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="27"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="68" pos:column="9">kill<pos:position pos:line="68" pos:column="13"/></name><argument_list pos:line="68" pos:column="13">(<argument><expr><name pos:line="68" pos:column="14">pid<pos:position pos:line="68" pos:column="17"/></name></expr></argument>, <argument><expr><name pos:line="68" pos:column="19">SIGUSR2<pos:position pos:line="68" pos:column="26"/></name></expr></argument>)<pos:position pos:line="68" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="28"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="69" pos:column="9">wait_process<pos:position pos:line="69" pos:column="21"/></name><argument_list pos:line="69" pos:column="21">(<argument><expr><name pos:line="69" pos:column="22">pid<pos:position pos:line="69" pos:column="25"/></name></expr></argument>, <argument><expr><operator pos:line="69" pos:column="27">&amp;<pos:position pos:line="69" pos:column="32"/></operator><name pos:line="69" pos:column="28">status<pos:position pos:line="69" pos:column="34"/></name></expr></argument>)<pos:position pos:line="69" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="36"/></expr_stmt>
	<return pos:line="70" pos:column="9">return <expr><name pos:line="70" pos:column="16">status<pos:position pos:line="70" pos:column="22"/></name></expr>;<pos:position pos:line="70" pos:column="23"/></return>
}<pos:position pos:line="71" pos:column="2"/></block></function></unit>
