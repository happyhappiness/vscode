<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_600_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">local<pos:position pos:line="1" pos:column="6"/></name> <name pos:line="1" pos:column="7">void<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">tr_static_init<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">()<pos:position pos:line="1" pos:column="28"/></parameter_list>
<block pos:line="2" pos:column="1">{
<cpp:if pos:line="3" pos:column="1">#<cpp:directive pos:line="3" pos:column="2">if<pos:position pos:line="3" pos:column="4"/></cpp:directive> <expr><call><name pos:line="3" pos:column="5">defined<pos:position pos:line="3" pos:column="12"/></name><argument_list pos:line="3" pos:column="12">(<argument><expr><name pos:line="3" pos:column="13">GEN_TREES_H<pos:position pos:line="3" pos:column="24"/></name></expr></argument>)<pos:position pos:line="3" pos:column="25"/></argument_list></call> <operator pos:line="3" pos:column="26">||<pos:position pos:line="3" pos:column="28"/></operator> <operator pos:line="3" pos:column="29">!<pos:position pos:line="3" pos:column="30"/></operator><call><name pos:line="3" pos:column="30">defined<pos:position pos:line="3" pos:column="37"/></name><argument_list pos:line="3" pos:column="37">(<argument><expr><name pos:line="3" pos:column="38">STDC<pos:position pos:line="3" pos:column="42"/></name></expr></argument>)<pos:position pos:line="3" pos:column="43"/></argument_list></call></expr></cpp:if>
    <decl_stmt><decl><specifier pos:line="4" pos:column="5">static<pos:position pos:line="4" pos:column="11"/></specifier> <type><name pos:line="4" pos:column="12">int<pos:position pos:line="4" pos:column="15"/></name></type> <name pos:line="4" pos:column="16">static_init_done<pos:position pos:line="4" pos:column="32"/></name> <init pos:line="4" pos:column="33">= <expr><literal type="number" pos:line="4" pos:column="35">0<pos:position pos:line="4" pos:column="36"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="37"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">int<pos:position pos:line="5" pos:column="8"/></name></type> <name pos:line="5" pos:column="9">n<pos:position pos:line="5" pos:column="10"/></name></decl>;<pos:position pos:line="5" pos:column="11"/></decl_stmt>        <comment type="block" pos:line="5" pos:column="19">/* iterates over tree elements */</comment>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">int<pos:position pos:line="6" pos:column="8"/></name></type> <name pos:line="6" pos:column="9">bits<pos:position pos:line="6" pos:column="13"/></name></decl>;<pos:position pos:line="6" pos:column="14"/></decl_stmt>     <comment type="block" pos:line="6" pos:column="19">/* bit counter */</comment>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">int<pos:position pos:line="7" pos:column="8"/></name></type> <name pos:line="7" pos:column="9">length<pos:position pos:line="7" pos:column="15"/></name></decl>;<pos:position pos:line="7" pos:column="16"/></decl_stmt>   <comment type="block" pos:line="7" pos:column="19">/* length value */</comment>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">int<pos:position pos:line="8" pos:column="8"/></name></type> <name pos:line="8" pos:column="9">code<pos:position pos:line="8" pos:column="13"/></name></decl>;<pos:position pos:line="8" pos:column="14"/></decl_stmt>     <comment type="block" pos:line="8" pos:column="19">/* code value */</comment>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">int<pos:position pos:line="9" pos:column="8"/></name></type> <name pos:line="9" pos:column="9">dist<pos:position pos:line="9" pos:column="13"/></name></decl>;<pos:position pos:line="9" pos:column="14"/></decl_stmt>     <comment type="block" pos:line="9" pos:column="19">/* distance index */</comment>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">ush<pos:position pos:line="10" pos:column="8"/></name></type> <name><name pos:line="10" pos:column="9">bl_count<pos:position pos:line="10" pos:column="17"/></name><index pos:line="10" pos:column="17">[<expr><name pos:line="10" pos:column="18">MAX_BITS<pos:position pos:line="10" pos:column="26"/></name><operator pos:line="10" pos:column="26">+<pos:position pos:line="10" pos:column="27"/></operator><literal type="number" pos:line="10" pos:column="27">1<pos:position pos:line="10" pos:column="28"/></literal></expr>]<pos:position pos:line="10" pos:column="29"/></index></name></decl>;<pos:position pos:line="10" pos:column="30"/></decl_stmt>
    <comment type="block" pos:line="11" pos:column="5">/* number of codes at each bit length for an optimal tree */</comment>

    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><name pos:line="13" pos:column="9">static_init_done<pos:position pos:line="13" pos:column="25"/></name></expr>)<pos:position pos:line="13" pos:column="26"/></condition><then pos:line="13" pos:column="26"> <block type="pseudo"><return pos:line="13" pos:column="27">return;<pos:position pos:line="13" pos:column="34"/></return></block></then></if>

    <comment type="block" pos:line="15" pos:column="5">/* For some embedded targets, global variables are not initialized: */</comment>
<cpp:ifdef pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">ifdef<pos:position pos:line="16" pos:column="7"/></cpp:directive> <name pos:line="16" pos:column="8">NO_INIT_GLOBAL_POINTERS<pos:position pos:line="16" pos:column="31"/></name></cpp:ifdef>
    <expr_stmt><expr><name><name pos:line="17" pos:column="5">static_l_desc<pos:position pos:line="17" pos:column="18"/></name><operator pos:line="17" pos:column="18">.<pos:position pos:line="17" pos:column="19"/></operator><name pos:line="17" pos:column="19">static_tree<pos:position pos:line="17" pos:column="30"/></name></name> <operator pos:line="17" pos:column="31">=<pos:position pos:line="17" pos:column="32"/></operator> <name pos:line="17" pos:column="33">static_ltree<pos:position pos:line="17" pos:column="45"/></name></expr>;<pos:position pos:line="17" pos:column="46"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="18" pos:column="5">static_l_desc<pos:position pos:line="18" pos:column="18"/></name><operator pos:line="18" pos:column="18">.<pos:position pos:line="18" pos:column="19"/></operator><name pos:line="18" pos:column="19">extra_bits<pos:position pos:line="18" pos:column="29"/></name></name> <operator pos:line="18" pos:column="30">=<pos:position pos:line="18" pos:column="31"/></operator> <name pos:line="18" pos:column="32">extra_lbits<pos:position pos:line="18" pos:column="43"/></name></expr>;<pos:position pos:line="18" pos:column="44"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="19" pos:column="5">static_d_desc<pos:position pos:line="19" pos:column="18"/></name><operator pos:line="19" pos:column="18">.<pos:position pos:line="19" pos:column="19"/></operator><name pos:line="19" pos:column="19">static_tree<pos:position pos:line="19" pos:column="30"/></name></name> <operator pos:line="19" pos:column="31">=<pos:position pos:line="19" pos:column="32"/></operator> <name pos:line="19" pos:column="33">static_dtree<pos:position pos:line="19" pos:column="45"/></name></expr>;<pos:position pos:line="19" pos:column="46"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="20" pos:column="5">static_d_desc<pos:position pos:line="20" pos:column="18"/></name><operator pos:line="20" pos:column="18">.<pos:position pos:line="20" pos:column="19"/></operator><name pos:line="20" pos:column="19">extra_bits<pos:position pos:line="20" pos:column="29"/></name></name> <operator pos:line="20" pos:column="30">=<pos:position pos:line="20" pos:column="31"/></operator> <name pos:line="20" pos:column="32">extra_dbits<pos:position pos:line="20" pos:column="43"/></name></expr>;<pos:position pos:line="20" pos:column="44"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="21" pos:column="5">static_bl_desc<pos:position pos:line="21" pos:column="19"/></name><operator pos:line="21" pos:column="19">.<pos:position pos:line="21" pos:column="20"/></operator><name pos:line="21" pos:column="20">extra_bits<pos:position pos:line="21" pos:column="30"/></name></name> <operator pos:line="21" pos:column="31">=<pos:position pos:line="21" pos:column="32"/></operator> <name pos:line="21" pos:column="33">extra_blbits<pos:position pos:line="21" pos:column="45"/></name></expr>;<pos:position pos:line="21" pos:column="46"/></expr_stmt>
<cpp:endif pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">endif<pos:position pos:line="22" pos:column="7"/></cpp:directive></cpp:endif>

    <comment type="block" pos:line="24" pos:column="5">/* Initialize the mapping length (0..255) -&gt; length code (0..28) */</comment>
    <expr_stmt><expr><name pos:line="25" pos:column="5">length<pos:position pos:line="25" pos:column="11"/></name> <operator pos:line="25" pos:column="12">=<pos:position pos:line="25" pos:column="13"/></operator> <literal type="number" pos:line="25" pos:column="14">0<pos:position pos:line="25" pos:column="15"/></literal></expr>;<pos:position pos:line="25" pos:column="16"/></expr_stmt>
    <for pos:line="26" pos:column="5">for <control pos:line="26" pos:column="9">(<init><expr><name pos:line="26" pos:column="10">code<pos:position pos:line="26" pos:column="14"/></name> <operator pos:line="26" pos:column="15">=<pos:position pos:line="26" pos:column="16"/></operator> <literal type="number" pos:line="26" pos:column="17">0<pos:position pos:line="26" pos:column="18"/></literal></expr>;<pos:position pos:line="26" pos:column="19"/></init> <condition><expr><name pos:line="26" pos:column="20">code<pos:position pos:line="26" pos:column="24"/></name> <operator pos:line="26" pos:column="25">&lt;<pos:position pos:line="26" pos:column="29"/></operator> <name pos:line="26" pos:column="27">LENGTH_CODES<pos:position pos:line="26" pos:column="39"/></name><operator pos:line="26" pos:column="39">-<pos:position pos:line="26" pos:column="40"/></operator><literal type="number" pos:line="26" pos:column="40">1<pos:position pos:line="26" pos:column="41"/></literal></expr>;<pos:position pos:line="26" pos:column="42"/></condition> <incr><expr><name pos:line="26" pos:column="43">code<pos:position pos:line="26" pos:column="47"/></name><operator pos:line="26" pos:column="47">++<pos:position pos:line="26" pos:column="49"/></operator></expr></incr>)<pos:position pos:line="26" pos:column="50"/></control> <block pos:line="26" pos:column="51">{
        <expr_stmt><expr><name><name pos:line="27" pos:column="9">base_length<pos:position pos:line="27" pos:column="20"/></name><index pos:line="27" pos:column="20">[<expr><name pos:line="27" pos:column="21">code<pos:position pos:line="27" pos:column="25"/></name></expr>]<pos:position pos:line="27" pos:column="26"/></index></name> <operator pos:line="27" pos:column="27">=<pos:position pos:line="27" pos:column="28"/></operator> <name pos:line="27" pos:column="29">length<pos:position pos:line="27" pos:column="35"/></name></expr>;<pos:position pos:line="27" pos:column="36"/></expr_stmt>
        <for pos:line="28" pos:column="9">for <control pos:line="28" pos:column="13">(<init><expr><name pos:line="28" pos:column="14">n<pos:position pos:line="28" pos:column="15"/></name> <operator pos:line="28" pos:column="16">=<pos:position pos:line="28" pos:column="17"/></operator> <literal type="number" pos:line="28" pos:column="18">0<pos:position pos:line="28" pos:column="19"/></literal></expr>;<pos:position pos:line="28" pos:column="20"/></init> <condition><expr><name pos:line="28" pos:column="21">n<pos:position pos:line="28" pos:column="22"/></name> <operator pos:line="28" pos:column="23">&lt;<pos:position pos:line="28" pos:column="27"/></operator> <operator pos:line="28" pos:column="25">(<pos:position pos:line="28" pos:column="26"/></operator><literal type="number" pos:line="28" pos:column="26">1<pos:position pos:line="28" pos:column="27"/></literal><operator pos:line="28" pos:column="27">&lt;&lt;<pos:position pos:line="28" pos:column="35"/></operator><name><name pos:line="28" pos:column="29">extra_lbits<pos:position pos:line="28" pos:column="40"/></name><index pos:line="28" pos:column="40">[<expr><name pos:line="28" pos:column="41">code<pos:position pos:line="28" pos:column="45"/></name></expr>]<pos:position pos:line="28" pos:column="46"/></index></name><operator pos:line="28" pos:column="46">)<pos:position pos:line="28" pos:column="47"/></operator></expr>;<pos:position pos:line="28" pos:column="48"/></condition> <incr><expr><name pos:line="28" pos:column="49">n<pos:position pos:line="28" pos:column="50"/></name><operator pos:line="28" pos:column="50">++<pos:position pos:line="28" pos:column="52"/></operator></expr></incr>)<pos:position pos:line="28" pos:column="53"/></control> <block pos:line="28" pos:column="54">{
            <expr_stmt><expr><name><name pos:line="29" pos:column="13">_length_code<pos:position pos:line="29" pos:column="25"/></name><index pos:line="29" pos:column="25">[<expr><name pos:line="29" pos:column="26">length<pos:position pos:line="29" pos:column="32"/></name><operator pos:line="29" pos:column="32">++<pos:position pos:line="29" pos:column="34"/></operator></expr>]<pos:position pos:line="29" pos:column="35"/></index></name> <operator pos:line="29" pos:column="36">=<pos:position pos:line="29" pos:column="37"/></operator> <operator pos:line="29" pos:column="38">(<pos:position pos:line="29" pos:column="39"/></operator><name pos:line="29" pos:column="39">uch<pos:position pos:line="29" pos:column="42"/></name><operator pos:line="29" pos:column="42">)<pos:position pos:line="29" pos:column="43"/></operator><name pos:line="29" pos:column="43">code<pos:position pos:line="29" pos:column="47"/></name></expr>;<pos:position pos:line="29" pos:column="48"/></expr_stmt>
        }<pos:position pos:line="30" pos:column="10"/></block></for>
    }<pos:position pos:line="31" pos:column="6"/></block></for>
    <expr_stmt><expr><call><name pos:line="32" pos:column="5">Assert<pos:position pos:line="32" pos:column="11"/></name> <argument_list pos:line="32" pos:column="12">(<argument><expr><name pos:line="32" pos:column="13">length<pos:position pos:line="32" pos:column="19"/></name> <operator pos:line="32" pos:column="20">==<pos:position pos:line="32" pos:column="22"/></operator> <literal type="number" pos:line="32" pos:column="23">256<pos:position pos:line="32" pos:column="26"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="32" pos:column="28">"tr_static_init: length != 256"<pos:position pos:line="32" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="61"/></expr_stmt>
    <comment type="block" pos:line="33" pos:column="5">/* Note that the length 255 (match length 258) can be represented
     * in two different ways: code 284 + 5 bits or code 285, so we
     * overwrite length_code[255] to use the best encoding:
     */</comment>
    <expr_stmt><expr><name><name pos:line="37" pos:column="5">_length_code<pos:position pos:line="37" pos:column="17"/></name><index pos:line="37" pos:column="17">[<expr><name pos:line="37" pos:column="18">length<pos:position pos:line="37" pos:column="24"/></name><operator pos:line="37" pos:column="24">-<pos:position pos:line="37" pos:column="25"/></operator><literal type="number" pos:line="37" pos:column="25">1<pos:position pos:line="37" pos:column="26"/></literal></expr>]<pos:position pos:line="37" pos:column="27"/></index></name> <operator pos:line="37" pos:column="28">=<pos:position pos:line="37" pos:column="29"/></operator> <operator pos:line="37" pos:column="30">(<pos:position pos:line="37" pos:column="31"/></operator><name pos:line="37" pos:column="31">uch<pos:position pos:line="37" pos:column="34"/></name><operator pos:line="37" pos:column="34">)<pos:position pos:line="37" pos:column="35"/></operator><name pos:line="37" pos:column="35">code<pos:position pos:line="37" pos:column="39"/></name></expr>;<pos:position pos:line="37" pos:column="40"/></expr_stmt>

    <comment type="block" pos:line="39" pos:column="5">/* Initialize the mapping dist (0..32K) -&gt; dist code (0..29) */</comment>
    <expr_stmt><expr><name pos:line="40" pos:column="5">dist<pos:position pos:line="40" pos:column="9"/></name> <operator pos:line="40" pos:column="10">=<pos:position pos:line="40" pos:column="11"/></operator> <literal type="number" pos:line="40" pos:column="12">0<pos:position pos:line="40" pos:column="13"/></literal></expr>;<pos:position pos:line="40" pos:column="14"/></expr_stmt>
    <for pos:line="41" pos:column="5">for <control pos:line="41" pos:column="9">(<init><expr><name pos:line="41" pos:column="10">code<pos:position pos:line="41" pos:column="14"/></name> <operator pos:line="41" pos:column="15">=<pos:position pos:line="41" pos:column="16"/></operator> <literal type="number" pos:line="41" pos:column="17">0<pos:position pos:line="41" pos:column="18"/></literal></expr> ;<pos:position pos:line="41" pos:column="20"/></init> <condition><expr><name pos:line="41" pos:column="21">code<pos:position pos:line="41" pos:column="25"/></name> <operator pos:line="41" pos:column="26">&lt;<pos:position pos:line="41" pos:column="30"/></operator> <literal type="number" pos:line="41" pos:column="28">16<pos:position pos:line="41" pos:column="30"/></literal></expr>;<pos:position pos:line="41" pos:column="31"/></condition> <incr><expr><name pos:line="41" pos:column="32">code<pos:position pos:line="41" pos:column="36"/></name><operator pos:line="41" pos:column="36">++<pos:position pos:line="41" pos:column="38"/></operator></expr></incr>)<pos:position pos:line="41" pos:column="39"/></control> <block pos:line="41" pos:column="40">{
        <expr_stmt><expr><name><name pos:line="42" pos:column="9">base_dist<pos:position pos:line="42" pos:column="18"/></name><index pos:line="42" pos:column="18">[<expr><name pos:line="42" pos:column="19">code<pos:position pos:line="42" pos:column="23"/></name></expr>]<pos:position pos:line="42" pos:column="24"/></index></name> <operator pos:line="42" pos:column="25">=<pos:position pos:line="42" pos:column="26"/></operator> <name pos:line="42" pos:column="27">dist<pos:position pos:line="42" pos:column="31"/></name></expr>;<pos:position pos:line="42" pos:column="32"/></expr_stmt>
        <for pos:line="43" pos:column="9">for <control pos:line="43" pos:column="13">(<init><expr><name pos:line="43" pos:column="14">n<pos:position pos:line="43" pos:column="15"/></name> <operator pos:line="43" pos:column="16">=<pos:position pos:line="43" pos:column="17"/></operator> <literal type="number" pos:line="43" pos:column="18">0<pos:position pos:line="43" pos:column="19"/></literal></expr>;<pos:position pos:line="43" pos:column="20"/></init> <condition><expr><name pos:line="43" pos:column="21">n<pos:position pos:line="43" pos:column="22"/></name> <operator pos:line="43" pos:column="23">&lt;<pos:position pos:line="43" pos:column="27"/></operator> <operator pos:line="43" pos:column="25">(<pos:position pos:line="43" pos:column="26"/></operator><literal type="number" pos:line="43" pos:column="26">1<pos:position pos:line="43" pos:column="27"/></literal><operator pos:line="43" pos:column="27">&lt;&lt;<pos:position pos:line="43" pos:column="35"/></operator><name><name pos:line="43" pos:column="29">extra_dbits<pos:position pos:line="43" pos:column="40"/></name><index pos:line="43" pos:column="40">[<expr><name pos:line="43" pos:column="41">code<pos:position pos:line="43" pos:column="45"/></name></expr>]<pos:position pos:line="43" pos:column="46"/></index></name><operator pos:line="43" pos:column="46">)<pos:position pos:line="43" pos:column="47"/></operator></expr>;<pos:position pos:line="43" pos:column="48"/></condition> <incr><expr><name pos:line="43" pos:column="49">n<pos:position pos:line="43" pos:column="50"/></name><operator pos:line="43" pos:column="50">++<pos:position pos:line="43" pos:column="52"/></operator></expr></incr>)<pos:position pos:line="43" pos:column="53"/></control> <block pos:line="43" pos:column="54">{
            <expr_stmt><expr><name><name pos:line="44" pos:column="13">_dist_code<pos:position pos:line="44" pos:column="23"/></name><index pos:line="44" pos:column="23">[<expr><name pos:line="44" pos:column="24">dist<pos:position pos:line="44" pos:column="28"/></name><operator pos:line="44" pos:column="28">++<pos:position pos:line="44" pos:column="30"/></operator></expr>]<pos:position pos:line="44" pos:column="31"/></index></name> <operator pos:line="44" pos:column="32">=<pos:position pos:line="44" pos:column="33"/></operator> <operator pos:line="44" pos:column="34">(<pos:position pos:line="44" pos:column="35"/></operator><name pos:line="44" pos:column="35">uch<pos:position pos:line="44" pos:column="38"/></name><operator pos:line="44" pos:column="38">)<pos:position pos:line="44" pos:column="39"/></operator><name pos:line="44" pos:column="39">code<pos:position pos:line="44" pos:column="43"/></name></expr>;<pos:position pos:line="44" pos:column="44"/></expr_stmt>
        }<pos:position pos:line="45" pos:column="10"/></block></for>
    }<pos:position pos:line="46" pos:column="6"/></block></for>
    <expr_stmt><expr><call><name pos:line="47" pos:column="5">Assert<pos:position pos:line="47" pos:column="11"/></name> <argument_list pos:line="47" pos:column="12">(<argument><expr><name pos:line="47" pos:column="13">dist<pos:position pos:line="47" pos:column="17"/></name> <operator pos:line="47" pos:column="18">==<pos:position pos:line="47" pos:column="20"/></operator> <literal type="number" pos:line="47" pos:column="21">256<pos:position pos:line="47" pos:column="24"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="47" pos:column="26">"tr_static_init: dist != 256"<pos:position pos:line="47" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="57"/></expr_stmt>
    <expr_stmt><expr><name pos:line="48" pos:column="5">dist<pos:position pos:line="48" pos:column="9"/></name> <operator pos:line="48" pos:column="10">&gt;&gt;=<pos:position pos:line="48" pos:column="19"/></operator> <literal type="number" pos:line="48" pos:column="14">7<pos:position pos:line="48" pos:column="15"/></literal></expr>;<pos:position pos:line="48" pos:column="16"/></expr_stmt> <comment type="block" pos:line="48" pos:column="17">/* from now on, all distances are divided by 128 */</comment>
    <for pos:line="49" pos:column="5">for <control pos:line="49" pos:column="9">( <init pos:line="49" pos:column="11">;<pos:position pos:line="49" pos:column="12"/></init> <condition><expr><name pos:line="49" pos:column="13">code<pos:position pos:line="49" pos:column="17"/></name> <operator pos:line="49" pos:column="18">&lt;<pos:position pos:line="49" pos:column="22"/></operator> <name pos:line="49" pos:column="20">D_CODES<pos:position pos:line="49" pos:column="27"/></name></expr>;<pos:position pos:line="49" pos:column="28"/></condition> <incr><expr><name pos:line="49" pos:column="29">code<pos:position pos:line="49" pos:column="33"/></name><operator pos:line="49" pos:column="33">++<pos:position pos:line="49" pos:column="35"/></operator></expr></incr>)<pos:position pos:line="49" pos:column="36"/></control> <block pos:line="49" pos:column="37">{
        <expr_stmt><expr><name><name pos:line="50" pos:column="9">base_dist<pos:position pos:line="50" pos:column="18"/></name><index pos:line="50" pos:column="18">[<expr><name pos:line="50" pos:column="19">code<pos:position pos:line="50" pos:column="23"/></name></expr>]<pos:position pos:line="50" pos:column="24"/></index></name> <operator pos:line="50" pos:column="25">=<pos:position pos:line="50" pos:column="26"/></operator> <name pos:line="50" pos:column="27">dist<pos:position pos:line="50" pos:column="31"/></name> <operator pos:line="50" pos:column="32">&lt;&lt;<pos:position pos:line="50" pos:column="40"/></operator> <literal type="number" pos:line="50" pos:column="35">7<pos:position pos:line="50" pos:column="36"/></literal></expr>;<pos:position pos:line="50" pos:column="37"/></expr_stmt>
        <for pos:line="51" pos:column="9">for <control pos:line="51" pos:column="13">(<init><expr><name pos:line="51" pos:column="14">n<pos:position pos:line="51" pos:column="15"/></name> <operator pos:line="51" pos:column="16">=<pos:position pos:line="51" pos:column="17"/></operator> <literal type="number" pos:line="51" pos:column="18">0<pos:position pos:line="51" pos:column="19"/></literal></expr>;<pos:position pos:line="51" pos:column="20"/></init> <condition><expr><name pos:line="51" pos:column="21">n<pos:position pos:line="51" pos:column="22"/></name> <operator pos:line="51" pos:column="23">&lt;<pos:position pos:line="51" pos:column="27"/></operator> <operator pos:line="51" pos:column="25">(<pos:position pos:line="51" pos:column="26"/></operator><literal type="number" pos:line="51" pos:column="26">1<pos:position pos:line="51" pos:column="27"/></literal><operator pos:line="51" pos:column="27">&lt;&lt;<pos:position pos:line="51" pos:column="35"/></operator><operator pos:line="51" pos:column="29">(<pos:position pos:line="51" pos:column="30"/></operator><name><name pos:line="51" pos:column="30">extra_dbits<pos:position pos:line="51" pos:column="41"/></name><index pos:line="51" pos:column="41">[<expr><name pos:line="51" pos:column="42">code<pos:position pos:line="51" pos:column="46"/></name></expr>]<pos:position pos:line="51" pos:column="47"/></index></name><operator pos:line="51" pos:column="47">-<pos:position pos:line="51" pos:column="48"/></operator><literal type="number" pos:line="51" pos:column="48">7<pos:position pos:line="51" pos:column="49"/></literal><operator pos:line="51" pos:column="49">)<pos:position pos:line="51" pos:column="50"/></operator><operator pos:line="51" pos:column="50">)<pos:position pos:line="51" pos:column="51"/></operator></expr>;<pos:position pos:line="51" pos:column="52"/></condition> <incr><expr><name pos:line="51" pos:column="53">n<pos:position pos:line="51" pos:column="54"/></name><operator pos:line="51" pos:column="54">++<pos:position pos:line="51" pos:column="56"/></operator></expr></incr>)<pos:position pos:line="51" pos:column="57"/></control> <block pos:line="51" pos:column="58">{
            <expr_stmt><expr><name><name pos:line="52" pos:column="13">_dist_code<pos:position pos:line="52" pos:column="23"/></name><index pos:line="52" pos:column="23">[<expr><literal type="number" pos:line="52" pos:column="24">256<pos:position pos:line="52" pos:column="27"/></literal> <operator pos:line="52" pos:column="28">+<pos:position pos:line="52" pos:column="29"/></operator> <name pos:line="52" pos:column="30">dist<pos:position pos:line="52" pos:column="34"/></name><operator pos:line="52" pos:column="34">++<pos:position pos:line="52" pos:column="36"/></operator></expr>]<pos:position pos:line="52" pos:column="37"/></index></name> <operator pos:line="52" pos:column="38">=<pos:position pos:line="52" pos:column="39"/></operator> <operator pos:line="52" pos:column="40">(<pos:position pos:line="52" pos:column="41"/></operator><name pos:line="52" pos:column="41">uch<pos:position pos:line="52" pos:column="44"/></name><operator pos:line="52" pos:column="44">)<pos:position pos:line="52" pos:column="45"/></operator><name pos:line="52" pos:column="45">code<pos:position pos:line="52" pos:column="49"/></name></expr>;<pos:position pos:line="52" pos:column="50"/></expr_stmt>
        }<pos:position pos:line="53" pos:column="10"/></block></for>
    }<pos:position pos:line="54" pos:column="6"/></block></for>
    <expr_stmt><expr><call><name pos:line="55" pos:column="5">Assert<pos:position pos:line="55" pos:column="11"/></name> <argument_list pos:line="55" pos:column="12">(<argument><expr><name pos:line="55" pos:column="13">dist<pos:position pos:line="55" pos:column="17"/></name> <operator pos:line="55" pos:column="18">==<pos:position pos:line="55" pos:column="20"/></operator> <literal type="number" pos:line="55" pos:column="21">256<pos:position pos:line="55" pos:column="24"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="55" pos:column="26">"tr_static_init: 256+dist != 512"<pos:position pos:line="55" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="55" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="61"/></expr_stmt>

    <comment type="block" pos:line="57" pos:column="5">/* Construct the codes of the static literal tree */</comment>
    <for pos:line="58" pos:column="5">for <control pos:line="58" pos:column="9">(<init><expr><name pos:line="58" pos:column="10">bits<pos:position pos:line="58" pos:column="14"/></name> <operator pos:line="58" pos:column="15">=<pos:position pos:line="58" pos:column="16"/></operator> <literal type="number" pos:line="58" pos:column="17">0<pos:position pos:line="58" pos:column="18"/></literal></expr>;<pos:position pos:line="58" pos:column="19"/></init> <condition><expr><name pos:line="58" pos:column="20">bits<pos:position pos:line="58" pos:column="24"/></name> <operator pos:line="58" pos:column="25">&lt;=<pos:position pos:line="58" pos:column="30"/></operator> <name pos:line="58" pos:column="28">MAX_BITS<pos:position pos:line="58" pos:column="36"/></name></expr>;<pos:position pos:line="58" pos:column="37"/></condition> <incr><expr><name pos:line="58" pos:column="38">bits<pos:position pos:line="58" pos:column="42"/></name><operator pos:line="58" pos:column="42">++<pos:position pos:line="58" pos:column="44"/></operator></expr></incr>)<pos:position pos:line="58" pos:column="45"/></control> <block type="pseudo"><expr_stmt><expr><name><name pos:line="58" pos:column="46">bl_count<pos:position pos:line="58" pos:column="54"/></name><index pos:line="58" pos:column="54">[<expr><name pos:line="58" pos:column="55">bits<pos:position pos:line="58" pos:column="59"/></name></expr>]<pos:position pos:line="58" pos:column="60"/></index></name> <operator pos:line="58" pos:column="61">=<pos:position pos:line="58" pos:column="62"/></operator> <literal type="number" pos:line="58" pos:column="63">0<pos:position pos:line="58" pos:column="64"/></literal></expr>;<pos:position pos:line="58" pos:column="65"/></expr_stmt></block></for>
    <expr_stmt><expr><name pos:line="59" pos:column="5">n<pos:position pos:line="59" pos:column="6"/></name> <operator pos:line="59" pos:column="7">=<pos:position pos:line="59" pos:column="8"/></operator> <literal type="number" pos:line="59" pos:column="9">0<pos:position pos:line="59" pos:column="10"/></literal></expr>;<pos:position pos:line="59" pos:column="11"/></expr_stmt>
    <while pos:line="60" pos:column="5">while <condition pos:line="60" pos:column="11">(<expr><name pos:line="60" pos:column="12">n<pos:position pos:line="60" pos:column="13"/></name> <operator pos:line="60" pos:column="14">&lt;=<pos:position pos:line="60" pos:column="19"/></operator> <literal type="number" pos:line="60" pos:column="17">143<pos:position pos:line="60" pos:column="20"/></literal></expr>)<pos:position pos:line="60" pos:column="21"/></condition> <block type="pseudo"><expr_stmt><expr><name><name pos:line="60" pos:column="22">static_ltree<pos:position pos:line="60" pos:column="34"/></name><index pos:line="60" pos:column="34">[<expr><name pos:line="60" pos:column="35">n<pos:position pos:line="60" pos:column="36"/></name><operator pos:line="60" pos:column="36">++<pos:position pos:line="60" pos:column="38"/></operator></expr>]<pos:position pos:line="60" pos:column="39"/></index></name><operator pos:line="60" pos:column="39">.<pos:position pos:line="60" pos:column="40"/></operator><name pos:line="60" pos:column="40">Len<pos:position pos:line="60" pos:column="43"/></name> <operator pos:line="60" pos:column="44">=<pos:position pos:line="60" pos:column="45"/></operator> <literal type="number" pos:line="60" pos:column="46">8<pos:position pos:line="60" pos:column="47"/></literal></expr><operator pos:line="60" pos:column="47">,<pos:position pos:line="60" pos:column="48"/></operator> <expr><name><name pos:line="60" pos:column="49">bl_count<pos:position pos:line="60" pos:column="57"/></name><index pos:line="60" pos:column="57">[<expr><literal type="number" pos:line="60" pos:column="58">8<pos:position pos:line="60" pos:column="59"/></literal></expr>]<pos:position pos:line="60" pos:column="60"/></index></name><operator pos:line="60" pos:column="60">++<pos:position pos:line="60" pos:column="62"/></operator></expr>;<pos:position pos:line="60" pos:column="63"/></expr_stmt></block></while>
    <while pos:line="61" pos:column="5">while <condition pos:line="61" pos:column="11">(<expr><name pos:line="61" pos:column="12">n<pos:position pos:line="61" pos:column="13"/></name> <operator pos:line="61" pos:column="14">&lt;=<pos:position pos:line="61" pos:column="19"/></operator> <literal type="number" pos:line="61" pos:column="17">255<pos:position pos:line="61" pos:column="20"/></literal></expr>)<pos:position pos:line="61" pos:column="21"/></condition> <block type="pseudo"><expr_stmt><expr><name><name pos:line="61" pos:column="22">static_ltree<pos:position pos:line="61" pos:column="34"/></name><index pos:line="61" pos:column="34">[<expr><name pos:line="61" pos:column="35">n<pos:position pos:line="61" pos:column="36"/></name><operator pos:line="61" pos:column="36">++<pos:position pos:line="61" pos:column="38"/></operator></expr>]<pos:position pos:line="61" pos:column="39"/></index></name><operator pos:line="61" pos:column="39">.<pos:position pos:line="61" pos:column="40"/></operator><name pos:line="61" pos:column="40">Len<pos:position pos:line="61" pos:column="43"/></name> <operator pos:line="61" pos:column="44">=<pos:position pos:line="61" pos:column="45"/></operator> <literal type="number" pos:line="61" pos:column="46">9<pos:position pos:line="61" pos:column="47"/></literal></expr><operator pos:line="61" pos:column="47">,<pos:position pos:line="61" pos:column="48"/></operator> <expr><name><name pos:line="61" pos:column="49">bl_count<pos:position pos:line="61" pos:column="57"/></name><index pos:line="61" pos:column="57">[<expr><literal type="number" pos:line="61" pos:column="58">9<pos:position pos:line="61" pos:column="59"/></literal></expr>]<pos:position pos:line="61" pos:column="60"/></index></name><operator pos:line="61" pos:column="60">++<pos:position pos:line="61" pos:column="62"/></operator></expr>;<pos:position pos:line="61" pos:column="63"/></expr_stmt></block></while>
    <while pos:line="62" pos:column="5">while <condition pos:line="62" pos:column="11">(<expr><name pos:line="62" pos:column="12">n<pos:position pos:line="62" pos:column="13"/></name> <operator pos:line="62" pos:column="14">&lt;=<pos:position pos:line="62" pos:column="19"/></operator> <literal type="number" pos:line="62" pos:column="17">279<pos:position pos:line="62" pos:column="20"/></literal></expr>)<pos:position pos:line="62" pos:column="21"/></condition> <block type="pseudo"><expr_stmt><expr><name><name pos:line="62" pos:column="22">static_ltree<pos:position pos:line="62" pos:column="34"/></name><index pos:line="62" pos:column="34">[<expr><name pos:line="62" pos:column="35">n<pos:position pos:line="62" pos:column="36"/></name><operator pos:line="62" pos:column="36">++<pos:position pos:line="62" pos:column="38"/></operator></expr>]<pos:position pos:line="62" pos:column="39"/></index></name><operator pos:line="62" pos:column="39">.<pos:position pos:line="62" pos:column="40"/></operator><name pos:line="62" pos:column="40">Len<pos:position pos:line="62" pos:column="43"/></name> <operator pos:line="62" pos:column="44">=<pos:position pos:line="62" pos:column="45"/></operator> <literal type="number" pos:line="62" pos:column="46">7<pos:position pos:line="62" pos:column="47"/></literal></expr><operator pos:line="62" pos:column="47">,<pos:position pos:line="62" pos:column="48"/></operator> <expr><name><name pos:line="62" pos:column="49">bl_count<pos:position pos:line="62" pos:column="57"/></name><index pos:line="62" pos:column="57">[<expr><literal type="number" pos:line="62" pos:column="58">7<pos:position pos:line="62" pos:column="59"/></literal></expr>]<pos:position pos:line="62" pos:column="60"/></index></name><operator pos:line="62" pos:column="60">++<pos:position pos:line="62" pos:column="62"/></operator></expr>;<pos:position pos:line="62" pos:column="63"/></expr_stmt></block></while>
    <while pos:line="63" pos:column="5">while <condition pos:line="63" pos:column="11">(<expr><name pos:line="63" pos:column="12">n<pos:position pos:line="63" pos:column="13"/></name> <operator pos:line="63" pos:column="14">&lt;=<pos:position pos:line="63" pos:column="19"/></operator> <literal type="number" pos:line="63" pos:column="17">287<pos:position pos:line="63" pos:column="20"/></literal></expr>)<pos:position pos:line="63" pos:column="21"/></condition> <block type="pseudo"><expr_stmt><expr><name><name pos:line="63" pos:column="22">static_ltree<pos:position pos:line="63" pos:column="34"/></name><index pos:line="63" pos:column="34">[<expr><name pos:line="63" pos:column="35">n<pos:position pos:line="63" pos:column="36"/></name><operator pos:line="63" pos:column="36">++<pos:position pos:line="63" pos:column="38"/></operator></expr>]<pos:position pos:line="63" pos:column="39"/></index></name><operator pos:line="63" pos:column="39">.<pos:position pos:line="63" pos:column="40"/></operator><name pos:line="63" pos:column="40">Len<pos:position pos:line="63" pos:column="43"/></name> <operator pos:line="63" pos:column="44">=<pos:position pos:line="63" pos:column="45"/></operator> <literal type="number" pos:line="63" pos:column="46">8<pos:position pos:line="63" pos:column="47"/></literal></expr><operator pos:line="63" pos:column="47">,<pos:position pos:line="63" pos:column="48"/></operator> <expr><name><name pos:line="63" pos:column="49">bl_count<pos:position pos:line="63" pos:column="57"/></name><index pos:line="63" pos:column="57">[<expr><literal type="number" pos:line="63" pos:column="58">8<pos:position pos:line="63" pos:column="59"/></literal></expr>]<pos:position pos:line="63" pos:column="60"/></index></name><operator pos:line="63" pos:column="60">++<pos:position pos:line="63" pos:column="62"/></operator></expr>;<pos:position pos:line="63" pos:column="63"/></expr_stmt></block></while>
    <comment type="block" pos:line="64" pos:column="5">/* Codes 286 and 287 do not exist, but we must include them in the
     * tree construction to get a canonical Huffman tree (longest code
     * all ones)
     */</comment>
    <expr_stmt><expr><call><name pos:line="68" pos:column="5">gen_codes<pos:position pos:line="68" pos:column="14"/></name><argument_list pos:line="68" pos:column="14">(<argument><expr><operator pos:line="68" pos:column="15">(<pos:position pos:line="68" pos:column="16"/></operator><name pos:line="68" pos:column="16">ct_data<pos:position pos:line="68" pos:column="23"/></name> <operator pos:line="68" pos:column="24">*<pos:position pos:line="68" pos:column="25"/></operator><operator pos:line="68" pos:column="25">)<pos:position pos:line="68" pos:column="26"/></operator><name pos:line="68" pos:column="26">static_ltree<pos:position pos:line="68" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="68" pos:column="40">L_CODES<pos:position pos:line="68" pos:column="47"/></name><operator pos:line="68" pos:column="47">+<pos:position pos:line="68" pos:column="48"/></operator><literal type="number" pos:line="68" pos:column="48">1<pos:position pos:line="68" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="68" pos:column="51">bl_count<pos:position pos:line="68" pos:column="59"/></name></expr></argument>)<pos:position pos:line="68" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="61"/></expr_stmt>

    <comment type="block" pos:line="70" pos:column="5">/* The static distance tree is trivial: */</comment>
    <for pos:line="71" pos:column="5">for <control pos:line="71" pos:column="9">(<init><expr><name pos:line="71" pos:column="10">n<pos:position pos:line="71" pos:column="11"/></name> <operator pos:line="71" pos:column="12">=<pos:position pos:line="71" pos:column="13"/></operator> <literal type="number" pos:line="71" pos:column="14">0<pos:position pos:line="71" pos:column="15"/></literal></expr>;<pos:position pos:line="71" pos:column="16"/></init> <condition><expr><name pos:line="71" pos:column="17">n<pos:position pos:line="71" pos:column="18"/></name> <operator pos:line="71" pos:column="19">&lt;<pos:position pos:line="71" pos:column="23"/></operator> <name pos:line="71" pos:column="21">D_CODES<pos:position pos:line="71" pos:column="28"/></name></expr>;<pos:position pos:line="71" pos:column="29"/></condition> <incr><expr><name pos:line="71" pos:column="30">n<pos:position pos:line="71" pos:column="31"/></name><operator pos:line="71" pos:column="31">++<pos:position pos:line="71" pos:column="33"/></operator></expr></incr>)<pos:position pos:line="71" pos:column="34"/></control> <block pos:line="71" pos:column="35">{
        <expr_stmt><expr><name><name pos:line="72" pos:column="9">static_dtree<pos:position pos:line="72" pos:column="21"/></name><index pos:line="72" pos:column="21">[<expr><name pos:line="72" pos:column="22">n<pos:position pos:line="72" pos:column="23"/></name></expr>]<pos:position pos:line="72" pos:column="24"/></index></name><operator pos:line="72" pos:column="24">.<pos:position pos:line="72" pos:column="25"/></operator><name pos:line="72" pos:column="25">Len<pos:position pos:line="72" pos:column="28"/></name> <operator pos:line="72" pos:column="29">=<pos:position pos:line="72" pos:column="30"/></operator> <literal type="number" pos:line="72" pos:column="31">5<pos:position pos:line="72" pos:column="32"/></literal></expr>;<pos:position pos:line="72" pos:column="33"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="73" pos:column="9">static_dtree<pos:position pos:line="73" pos:column="21"/></name><index pos:line="73" pos:column="21">[<expr><name pos:line="73" pos:column="22">n<pos:position pos:line="73" pos:column="23"/></name></expr>]<pos:position pos:line="73" pos:column="24"/></index></name><operator pos:line="73" pos:column="24">.<pos:position pos:line="73" pos:column="25"/></operator><name pos:line="73" pos:column="25">Code<pos:position pos:line="73" pos:column="29"/></name> <operator pos:line="73" pos:column="30">=<pos:position pos:line="73" pos:column="31"/></operator> <call><name pos:line="73" pos:column="32">bi_reverse<pos:position pos:line="73" pos:column="42"/></name><argument_list pos:line="73" pos:column="42">(<argument><expr><operator pos:line="73" pos:column="43">(<pos:position pos:line="73" pos:column="44"/></operator><name pos:line="73" pos:column="44">unsigned<pos:position pos:line="73" pos:column="52"/></name><operator pos:line="73" pos:column="52">)<pos:position pos:line="73" pos:column="53"/></operator><name pos:line="73" pos:column="53">n<pos:position pos:line="73" pos:column="54"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="73" pos:column="56">5<pos:position pos:line="73" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="73" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="59"/></expr_stmt>
    }<pos:position pos:line="74" pos:column="6"/></block></for>
    <expr_stmt><expr><name pos:line="75" pos:column="5">static_init_done<pos:position pos:line="75" pos:column="21"/></name> <operator pos:line="75" pos:column="22">=<pos:position pos:line="75" pos:column="23"/></operator> <literal type="number" pos:line="75" pos:column="24">1<pos:position pos:line="75" pos:column="25"/></literal></expr>;<pos:position pos:line="75" pos:column="26"/></expr_stmt>

<cpp:ifdef pos:line="77" pos:column="1">#  <cpp:directive pos:line="77" pos:column="4">ifdef<pos:position pos:line="77" pos:column="9"/></cpp:directive> <name pos:line="77" pos:column="10">GEN_TREES_H<pos:position pos:line="77" pos:column="21"/></name></cpp:ifdef>
    <expr_stmt><expr><call><name pos:line="78" pos:column="5">gen_trees_header<pos:position pos:line="78" pos:column="21"/></name><argument_list pos:line="78" pos:column="21">()<pos:position pos:line="78" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="24"/></expr_stmt>
<cpp:endif pos:line="79" pos:column="1">#  <cpp:directive pos:line="79" pos:column="4">endif<pos:position pos:line="79" pos:column="9"/></cpp:directive></cpp:endif>
<cpp:endif pos:line="80" pos:column="1">#<cpp:directive pos:line="80" pos:column="2">endif<pos:position pos:line="80" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="80" pos:column="8">/* defined(GEN_TREES_H) || !defined(STDC) */</comment>
}<pos:position pos:line="81" pos:column="2"/></block></function></unit>
