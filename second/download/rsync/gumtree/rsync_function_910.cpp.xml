<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_function_910.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">char<pos:position pos:line="1" pos:column="5"/></name> <modifier pos:line="1" pos:column="6">*<pos:position pos:line="1" pos:column="7"/></modifier></type><name pos:line="1" pos:column="7">auth_server<pos:position pos:line="1" pos:column="18"/></name><parameter_list pos:line="1" pos:column="18">(<parameter><decl><type><name pos:line="1" pos:column="19">int<pos:position pos:line="1" pos:column="22"/></name></type> <name pos:line="1" pos:column="23">f_in<pos:position pos:line="1" pos:column="27"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="29">int<pos:position pos:line="1" pos:column="32"/></name></type> <name pos:line="1" pos:column="33">f_out<pos:position pos:line="1" pos:column="38"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="40">int<pos:position pos:line="1" pos:column="43"/></name></type> <name pos:line="1" pos:column="44">module<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="52">const<pos:position pos:line="1" pos:column="57"/></specifier> <name pos:line="1" pos:column="58">char<pos:position pos:line="1" pos:column="62"/></name> <modifier pos:line="1" pos:column="63">*<pos:position pos:line="1" pos:column="64"/></modifier></type><name pos:line="1" pos:column="64">host<pos:position pos:line="1" pos:column="68"/></name></decl></parameter>,
		  <parameter><decl><type><specifier pos:line="2" pos:column="19">const<pos:position pos:line="2" pos:column="24"/></specifier> <name pos:line="2" pos:column="25">char<pos:position pos:line="2" pos:column="29"/></name> <modifier pos:line="2" pos:column="30">*<pos:position pos:line="2" pos:column="31"/></modifier></type><name pos:line="2" pos:column="31">addr<pos:position pos:line="2" pos:column="35"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="37">const<pos:position pos:line="2" pos:column="42"/></specifier> <name pos:line="2" pos:column="43">char<pos:position pos:line="2" pos:column="47"/></name> <modifier pos:line="2" pos:column="48">*<pos:position pos:line="2" pos:column="49"/></modifier></type><name pos:line="2" pos:column="49">leader<pos:position pos:line="2" pos:column="55"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="56"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier></type><name pos:line="4" pos:column="15">users<pos:position pos:line="4" pos:column="20"/></name> <init pos:line="4" pos:column="21">= <expr><call><name pos:line="4" pos:column="23">lp_auth_users<pos:position pos:line="4" pos:column="36"/></name><argument_list pos:line="4" pos:column="36">(<argument><expr><name pos:line="4" pos:column="37">module<pos:position pos:line="4" pos:column="43"/></name></expr></argument>)<pos:position pos:line="4" pos:column="44"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="45"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">char<pos:position pos:line="5" pos:column="13"/></name></type> <name><name pos:line="5" pos:column="14">challenge<pos:position pos:line="5" pos:column="23"/></name><index pos:line="5" pos:column="23">[<expr><name pos:line="5" pos:column="24">MAX_DIGEST_LEN<pos:position pos:line="5" pos:column="38"/></name><operator pos:line="5" pos:column="38">*<pos:position pos:line="5" pos:column="39"/></operator><literal type="number" pos:line="5" pos:column="39">2<pos:position pos:line="5" pos:column="40"/></literal></expr>]<pos:position pos:line="5" pos:column="41"/></index></name></decl>;<pos:position pos:line="5" pos:column="42"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">char<pos:position pos:line="6" pos:column="13"/></name></type> <name><name pos:line="6" pos:column="14">line<pos:position pos:line="6" pos:column="18"/></name><index pos:line="6" pos:column="18">[<expr><name pos:line="6" pos:column="19">BIGPATHBUFLEN<pos:position pos:line="6" pos:column="32"/></name></expr>]<pos:position pos:line="6" pos:column="33"/></index></name></decl>;<pos:position pos:line="6" pos:column="34"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">char<pos:position pos:line="7" pos:column="13"/></name> <modifier pos:line="7" pos:column="14">*<pos:position pos:line="7" pos:column="15"/></modifier><modifier pos:line="7" pos:column="15">*<pos:position pos:line="7" pos:column="16"/></modifier></type><name pos:line="7" pos:column="16">auth_uid_groups<pos:position pos:line="7" pos:column="31"/></name> <init pos:line="7" pos:column="32">= <expr><name pos:line="7" pos:column="34">NULL<pos:position pos:line="7" pos:column="38"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="39"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">int<pos:position pos:line="8" pos:column="12"/></name></type> <name pos:line="8" pos:column="13">auth_uid_groups_cnt<pos:position pos:line="8" pos:column="32"/></name> <init pos:line="8" pos:column="33">= <expr><operator pos:line="8" pos:column="35">-<pos:position pos:line="8" pos:column="36"/></operator><literal type="number" pos:line="8" pos:column="36">1<pos:position pos:line="8" pos:column="37"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="38"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="9" pos:column="9">const<pos:position pos:line="9" pos:column="14"/></specifier> <name pos:line="9" pos:column="15">char<pos:position pos:line="9" pos:column="19"/></name> <modifier pos:line="9" pos:column="20">*<pos:position pos:line="9" pos:column="21"/></modifier></type><name pos:line="9" pos:column="21">err<pos:position pos:line="9" pos:column="24"/></name> <init pos:line="9" pos:column="25">= <expr><name pos:line="9" pos:column="27">NULL<pos:position pos:line="9" pos:column="31"/></name></expr></init></decl>;<pos:position pos:line="9" pos:column="32"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="10" pos:column="9">int<pos:position pos:line="10" pos:column="12"/></name></type> <name pos:line="10" pos:column="13">group_match<pos:position pos:line="10" pos:column="24"/></name> <init pos:line="10" pos:column="25">= <expr><operator pos:line="10" pos:column="27">-<pos:position pos:line="10" pos:column="28"/></operator><literal type="number" pos:line="10" pos:column="28">1<pos:position pos:line="10" pos:column="29"/></literal></expr></init></decl>;<pos:position pos:line="10" pos:column="30"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="11" pos:column="9">char<pos:position pos:line="11" pos:column="13"/></name> <modifier pos:line="11" pos:column="14">*<pos:position pos:line="11" pos:column="15"/></modifier></type><name pos:line="11" pos:column="15">tok<pos:position pos:line="11" pos:column="18"/></name></decl>, <modifier pos:line="11" pos:column="20">*<pos:position pos:line="11" pos:column="21"/></modifier><decl><type ref="prev"/><name pos:line="11" pos:column="21">pass<pos:position pos:line="11" pos:column="25"/></name></decl>;<pos:position pos:line="11" pos:column="26"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="12" pos:column="9">char<pos:position pos:line="12" pos:column="13"/></name></type> <name pos:line="12" pos:column="14">opt_ch<pos:position pos:line="12" pos:column="20"/></name> <init pos:line="12" pos:column="21">= <expr><literal type="char" pos:line="12" pos:column="23">'\0'<pos:position pos:line="12" pos:column="27"/></literal></expr></init></decl>;<pos:position pos:line="12" pos:column="28"/></decl_stmt>

	<comment type="block" pos:line="14" pos:column="9">/* if no auth list then allow anyone in! */</comment>
	<if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><operator pos:line="15" pos:column="13">!<pos:position pos:line="15" pos:column="14"/></operator><name pos:line="15" pos:column="14">users<pos:position pos:line="15" pos:column="19"/></name> <operator pos:line="15" pos:column="20">||<pos:position pos:line="15" pos:column="22"/></operator> <operator pos:line="15" pos:column="23">!<pos:position pos:line="15" pos:column="24"/></operator><operator pos:line="15" pos:column="24">*<pos:position pos:line="15" pos:column="25"/></operator><name pos:line="15" pos:column="25">users<pos:position pos:line="15" pos:column="30"/></name></expr>)<pos:position pos:line="15" pos:column="31"/></condition><then pos:line="15" pos:column="31">
		<block type="pseudo"><return pos:line="16" pos:column="17">return <expr><literal type="string" pos:line="16" pos:column="24">""<pos:position pos:line="16" pos:column="26"/></literal></expr>;<pos:position pos:line="16" pos:column="27"/></return></block></then></if>

	<expr_stmt><expr><call><name pos:line="18" pos:column="9">gen_challenge<pos:position pos:line="18" pos:column="22"/></name><argument_list pos:line="18" pos:column="22">(<argument><expr><name pos:line="18" pos:column="23">addr<pos:position pos:line="18" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="29">challenge<pos:position pos:line="18" pos:column="38"/></name></expr></argument>)<pos:position pos:line="18" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="40"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="20" pos:column="9">io_printf<pos:position pos:line="20" pos:column="18"/></name><argument_list pos:line="20" pos:column="18">(<argument><expr><name pos:line="20" pos:column="19">f_out<pos:position pos:line="20" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="26">"%s%s\n"<pos:position pos:line="20" pos:column="34"/></literal></expr></argument>, <argument><expr><name pos:line="20" pos:column="36">leader<pos:position pos:line="20" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="44">challenge<pos:position pos:line="20" pos:column="53"/></name></expr></argument>)<pos:position pos:line="20" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="55"/></expr_stmt>

	<if pos:line="22" pos:column="9">if <condition pos:line="22" pos:column="12">(<expr><operator pos:line="22" pos:column="13">!<pos:position pos:line="22" pos:column="14"/></operator><call><name pos:line="22" pos:column="14">read_line_old<pos:position pos:line="22" pos:column="27"/></name><argument_list pos:line="22" pos:column="27">(<argument><expr><name pos:line="22" pos:column="28">f_in<pos:position pos:line="22" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="34">line<pos:position pos:line="22" pos:column="38"/></name></expr></argument>, <argument><expr><sizeof pos:line="22" pos:column="40">sizeof <name pos:line="22" pos:column="47">line<pos:position pos:line="22" pos:column="51"/></name></sizeof></expr></argument>, <argument><expr><literal type="number" pos:line="22" pos:column="53">0<pos:position pos:line="22" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="55"/></argument_list></call>
	 <operator pos:line="23" pos:column="10">||<pos:position pos:line="23" pos:column="12"/></operator> <operator pos:line="23" pos:column="13">(<pos:position pos:line="23" pos:column="14"/></operator><name pos:line="23" pos:column="14">pass<pos:position pos:line="23" pos:column="18"/></name> <operator pos:line="23" pos:column="19">=<pos:position pos:line="23" pos:column="20"/></operator> <call><name pos:line="23" pos:column="21">strchr<pos:position pos:line="23" pos:column="27"/></name><argument_list pos:line="23" pos:column="27">(<argument><expr><name pos:line="23" pos:column="28">line<pos:position pos:line="23" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="23" pos:column="34">' '<pos:position pos:line="23" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="38"/></argument_list></call><operator pos:line="23" pos:column="38">)<pos:position pos:line="23" pos:column="39"/></operator> <operator pos:line="23" pos:column="40">==<pos:position pos:line="23" pos:column="42"/></operator> <name pos:line="23" pos:column="43">NULL<pos:position pos:line="23" pos:column="47"/></name></expr>)<pos:position pos:line="23" pos:column="48"/></condition><then pos:line="23" pos:column="48"> <block pos:line="23" pos:column="49">{
		<expr_stmt><expr><call><name pos:line="24" pos:column="17">rprintf<pos:position pos:line="24" pos:column="24"/></name><argument_list pos:line="24" pos:column="24">(<argument><expr><name pos:line="24" pos:column="25">FLOG<pos:position pos:line="24" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="24" pos:column="31">"auth failed on module %s from %s (%s): "<pos:position pos:line="24" pos:column="72"/></literal>
			<literal type="string" pos:line="25" pos:column="25">"invalid challenge response\n"<pos:position pos:line="25" pos:column="55"/></literal></expr></argument>,
			<argument><expr><call><name pos:line="26" pos:column="25">lp_name<pos:position pos:line="26" pos:column="32"/></name><argument_list pos:line="26" pos:column="32">(<argument><expr><name pos:line="26" pos:column="33">module<pos:position pos:line="26" pos:column="39"/></name></expr></argument>)<pos:position pos:line="26" pos:column="40"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="26" pos:column="42">host<pos:position pos:line="26" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="48">addr<pos:position pos:line="26" pos:column="52"/></name></expr></argument>)<pos:position pos:line="26" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="54"/></expr_stmt>
		<return pos:line="27" pos:column="17">return <expr><name pos:line="27" pos:column="24">NULL<pos:position pos:line="27" pos:column="28"/></name></expr>;<pos:position pos:line="27" pos:column="29"/></return>
	}<pos:position pos:line="28" pos:column="10"/></block></then></if>
	<expr_stmt><expr><operator pos:line="29" pos:column="9">*<pos:position pos:line="29" pos:column="10"/></operator><name pos:line="29" pos:column="10">pass<pos:position pos:line="29" pos:column="14"/></name><operator pos:line="29" pos:column="14">++<pos:position pos:line="29" pos:column="16"/></operator> <operator pos:line="29" pos:column="17">=<pos:position pos:line="29" pos:column="18"/></operator> <literal type="char" pos:line="29" pos:column="19">'\0'<pos:position pos:line="29" pos:column="23"/></literal></expr>;<pos:position pos:line="29" pos:column="24"/></expr_stmt>

	<if pos:line="31" pos:column="9">if <condition pos:line="31" pos:column="12">(<expr><operator pos:line="31" pos:column="13">!<pos:position pos:line="31" pos:column="14"/></operator><operator pos:line="31" pos:column="14">(<pos:position pos:line="31" pos:column="15"/></operator><name pos:line="31" pos:column="15">users<pos:position pos:line="31" pos:column="20"/></name> <operator pos:line="31" pos:column="21">=<pos:position pos:line="31" pos:column="22"/></operator> <call><name pos:line="31" pos:column="23">strdup<pos:position pos:line="31" pos:column="29"/></name><argument_list pos:line="31" pos:column="29">(<argument><expr><name pos:line="31" pos:column="30">users<pos:position pos:line="31" pos:column="35"/></name></expr></argument>)<pos:position pos:line="31" pos:column="36"/></argument_list></call><operator pos:line="31" pos:column="36">)<pos:position pos:line="31" pos:column="37"/></operator></expr>)<pos:position pos:line="31" pos:column="38"/></condition><then pos:line="31" pos:column="38">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="32" pos:column="17">out_of_memory<pos:position pos:line="32" pos:column="30"/></name><argument_list pos:line="32" pos:column="30">(<argument><expr><literal type="string" pos:line="32" pos:column="31">"auth_server"<pos:position pos:line="32" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="46"/></expr_stmt></block></then></if>

	<for pos:line="34" pos:column="9">for <control pos:line="34" pos:column="13">(<init><expr><name pos:line="34" pos:column="14">tok<pos:position pos:line="34" pos:column="17"/></name> <operator pos:line="34" pos:column="18">=<pos:position pos:line="34" pos:column="19"/></operator> <call><name pos:line="34" pos:column="20">strtok<pos:position pos:line="34" pos:column="26"/></name><argument_list pos:line="34" pos:column="26">(<argument><expr><name pos:line="34" pos:column="27">users<pos:position pos:line="34" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="34" pos:column="34">" ,\t"<pos:position pos:line="34" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="42"/></init> <condition><expr><name pos:line="34" pos:column="43">tok<pos:position pos:line="34" pos:column="46"/></name></expr>;<pos:position pos:line="34" pos:column="47"/></condition> <incr><expr><name pos:line="34" pos:column="48">tok<pos:position pos:line="34" pos:column="51"/></name> <operator pos:line="34" pos:column="52">=<pos:position pos:line="34" pos:column="53"/></operator> <call><name pos:line="34" pos:column="54">strtok<pos:position pos:line="34" pos:column="60"/></name><argument_list pos:line="34" pos:column="60">(<argument><expr><name pos:line="34" pos:column="61">NULL<pos:position pos:line="34" pos:column="65"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="34" pos:column="67">" ,\t"<pos:position pos:line="34" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="74"/></argument_list></call></expr></incr>)<pos:position pos:line="34" pos:column="75"/></control> <block pos:line="34" pos:column="76">{
		<decl_stmt><decl><type><name pos:line="35" pos:column="17">char<pos:position pos:line="35" pos:column="21"/></name> <modifier pos:line="35" pos:column="22">*<pos:position pos:line="35" pos:column="23"/></modifier></type><name pos:line="35" pos:column="23">opts<pos:position pos:line="35" pos:column="27"/></name></decl>;<pos:position pos:line="35" pos:column="28"/></decl_stmt>
		<comment type="block" pos:line="36" pos:column="17">/* See if the user appended :deny, :ro, or :rw. */</comment>
		<if pos:line="37" pos:column="17">if <condition pos:line="37" pos:column="20">(<expr><operator pos:line="37" pos:column="21">(<pos:position pos:line="37" pos:column="22"/></operator><name pos:line="37" pos:column="22">opts<pos:position pos:line="37" pos:column="26"/></name> <operator pos:line="37" pos:column="27">=<pos:position pos:line="37" pos:column="28"/></operator> <call><name pos:line="37" pos:column="29">strchr<pos:position pos:line="37" pos:column="35"/></name><argument_list pos:line="37" pos:column="35">(<argument><expr><name pos:line="37" pos:column="36">tok<pos:position pos:line="37" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="37" pos:column="41">':'<pos:position pos:line="37" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="45"/></argument_list></call><operator pos:line="37" pos:column="45">)<pos:position pos:line="37" pos:column="46"/></operator> <operator pos:line="37" pos:column="47">!=<pos:position pos:line="37" pos:column="49"/></operator> <name pos:line="37" pos:column="50">NULL<pos:position pos:line="37" pos:column="54"/></name></expr>)<pos:position pos:line="37" pos:column="55"/></condition><then pos:line="37" pos:column="55"> <block pos:line="37" pos:column="56">{
			<expr_stmt><expr><operator pos:line="38" pos:column="25">*<pos:position pos:line="38" pos:column="26"/></operator><name pos:line="38" pos:column="26">opts<pos:position pos:line="38" pos:column="30"/></name><operator pos:line="38" pos:column="30">++<pos:position pos:line="38" pos:column="32"/></operator> <operator pos:line="38" pos:column="33">=<pos:position pos:line="38" pos:column="34"/></operator> <literal type="char" pos:line="38" pos:column="35">'\0'<pos:position pos:line="38" pos:column="39"/></literal></expr>;<pos:position pos:line="38" pos:column="40"/></expr_stmt>
			<expr_stmt><expr><name pos:line="39" pos:column="25">opt_ch<pos:position pos:line="39" pos:column="31"/></name> <operator pos:line="39" pos:column="32">=<pos:position pos:line="39" pos:column="33"/></operator> <ternary><condition><expr><call><name pos:line="39" pos:column="34">isUpper<pos:position pos:line="39" pos:column="41"/></name><argument_list pos:line="39" pos:column="41">(<argument><expr><name pos:line="39" pos:column="42">opts<pos:position pos:line="39" pos:column="46"/></name></expr></argument>)<pos:position pos:line="39" pos:column="47"/></argument_list></call></expr> ?<pos:position pos:line="39" pos:column="49"/></condition><then pos:line="39" pos:column="49"> <expr><call><name pos:line="39" pos:column="50">toLower<pos:position pos:line="39" pos:column="57"/></name><argument_list pos:line="39" pos:column="57">(<argument><expr><name pos:line="39" pos:column="58">opts<pos:position pos:line="39" pos:column="62"/></name></expr></argument>)<pos:position pos:line="39" pos:column="63"/></argument_list></call></expr> <pos:position pos:line="39" pos:column="64"/></then><else pos:line="39" pos:column="64">: <expr><operator pos:line="39" pos:column="66">*<pos:position pos:line="39" pos:column="67"/></operator><name pos:line="39" pos:column="67">opts<pos:position pos:line="39" pos:column="71"/></name></expr></else></ternary></expr>;<pos:position pos:line="39" pos:column="72"/></expr_stmt>
			<if pos:line="40" pos:column="25">if <condition pos:line="40" pos:column="28">(<expr><name pos:line="40" pos:column="29">opt_ch<pos:position pos:line="40" pos:column="35"/></name> <operator pos:line="40" pos:column="36">==<pos:position pos:line="40" pos:column="38"/></operator> <literal type="char" pos:line="40" pos:column="39">'r'<pos:position pos:line="40" pos:column="42"/></literal></expr>)<pos:position pos:line="40" pos:column="43"/></condition><then pos:line="40" pos:column="43"> <block pos:line="40" pos:column="44">{ <comment type="block" pos:line="40" pos:column="46">/* handle ro and rw */</comment>
				<expr_stmt><expr><name pos:line="41" pos:column="33">opt_ch<pos:position pos:line="41" pos:column="39"/></name> <operator pos:line="41" pos:column="40">=<pos:position pos:line="41" pos:column="41"/></operator> <ternary><condition><expr><call><name pos:line="41" pos:column="42">isUpper<pos:position pos:line="41" pos:column="49"/></name><argument_list pos:line="41" pos:column="49">(<argument><expr><name pos:line="41" pos:column="50">opts<pos:position pos:line="41" pos:column="54"/></name><operator pos:line="41" pos:column="54">+<pos:position pos:line="41" pos:column="55"/></operator><literal type="number" pos:line="41" pos:column="55">1<pos:position pos:line="41" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="57"/></argument_list></call></expr> ?<pos:position pos:line="41" pos:column="59"/></condition><then pos:line="41" pos:column="59"> <expr><call><name pos:line="41" pos:column="60">toLower<pos:position pos:line="41" pos:column="67"/></name><argument_list pos:line="41" pos:column="67">(<argument><expr><name pos:line="41" pos:column="68">opts<pos:position pos:line="41" pos:column="72"/></name><operator pos:line="41" pos:column="72">+<pos:position pos:line="41" pos:column="73"/></operator><literal type="number" pos:line="41" pos:column="73">1<pos:position pos:line="41" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="75"/></argument_list></call></expr> <pos:position pos:line="41" pos:column="76"/></then><else pos:line="41" pos:column="76">: <expr><name><name pos:line="41" pos:column="78">opts<pos:position pos:line="41" pos:column="82"/></name><index pos:line="41" pos:column="82">[<expr><literal type="number" pos:line="41" pos:column="83">1<pos:position pos:line="41" pos:column="84"/></literal></expr>]<pos:position pos:line="41" pos:column="85"/></index></name></expr></else></ternary></expr>;<pos:position pos:line="41" pos:column="86"/></expr_stmt>
				<if pos:line="42" pos:column="33">if <condition pos:line="42" pos:column="36">(<expr><name pos:line="42" pos:column="37">opt_ch<pos:position pos:line="42" pos:column="43"/></name> <operator pos:line="42" pos:column="44">==<pos:position pos:line="42" pos:column="46"/></operator> <literal type="char" pos:line="42" pos:column="47">'o'<pos:position pos:line="42" pos:column="50"/></literal></expr>)<pos:position pos:line="42" pos:column="51"/></condition><then pos:line="42" pos:column="51">
					<block type="pseudo"><expr_stmt><expr><name pos:line="43" pos:column="41">opt_ch<pos:position pos:line="43" pos:column="47"/></name> <operator pos:line="43" pos:column="48">=<pos:position pos:line="43" pos:column="49"/></operator> <literal type="char" pos:line="43" pos:column="50">'r'<pos:position pos:line="43" pos:column="53"/></literal></expr>;<pos:position pos:line="43" pos:column="54"/></expr_stmt></block></then>
				<elseif pos:line="44" pos:column="33">else <if pos:line="44" pos:column="38">if <condition pos:line="44" pos:column="41">(<expr><name pos:line="44" pos:column="42">opt_ch<pos:position pos:line="44" pos:column="48"/></name> <operator pos:line="44" pos:column="49">!=<pos:position pos:line="44" pos:column="51"/></operator> <literal type="char" pos:line="44" pos:column="52">'w'<pos:position pos:line="44" pos:column="55"/></literal></expr>)<pos:position pos:line="44" pos:column="56"/></condition><then pos:line="44" pos:column="56">
					<block type="pseudo"><expr_stmt><expr><name pos:line="45" pos:column="41">opt_ch<pos:position pos:line="45" pos:column="47"/></name> <operator pos:line="45" pos:column="48">=<pos:position pos:line="45" pos:column="49"/></operator> <literal type="char" pos:line="45" pos:column="50">'\0'<pos:position pos:line="45" pos:column="54"/></literal></expr>;<pos:position pos:line="45" pos:column="55"/></expr_stmt></block></then></if></elseif></if>
			}<pos:position pos:line="46" pos:column="26"/></block></then> <elseif pos:line="46" pos:column="27">else <if pos:line="46" pos:column="32">if <condition pos:line="46" pos:column="35">(<expr><name pos:line="46" pos:column="36">opt_ch<pos:position pos:line="46" pos:column="42"/></name> <operator pos:line="46" pos:column="43">!=<pos:position pos:line="46" pos:column="45"/></operator> <literal type="char" pos:line="46" pos:column="46">'d'<pos:position pos:line="46" pos:column="49"/></literal></expr>)<pos:position pos:line="46" pos:column="50"/></condition><then pos:line="46" pos:column="50"> <comment type="block" pos:line="46" pos:column="51">/* if it's not deny, ignore it */</comment>
				<block type="pseudo"><expr_stmt><expr><name pos:line="47" pos:column="33">opt_ch<pos:position pos:line="47" pos:column="39"/></name> <operator pos:line="47" pos:column="40">=<pos:position pos:line="47" pos:column="41"/></operator> <literal type="char" pos:line="47" pos:column="42">'\0'<pos:position pos:line="47" pos:column="46"/></literal></expr>;<pos:position pos:line="47" pos:column="47"/></expr_stmt></block></then></if></elseif></if>
		}<pos:position pos:line="48" pos:column="18"/></block></then> <else pos:line="48" pos:column="19">else
			<block type="pseudo"><expr_stmt><expr><name pos:line="49" pos:column="25">opt_ch<pos:position pos:line="49" pos:column="31"/></name> <operator pos:line="49" pos:column="32">=<pos:position pos:line="49" pos:column="33"/></operator> <literal type="char" pos:line="49" pos:column="34">'\0'<pos:position pos:line="49" pos:column="38"/></literal></expr>;<pos:position pos:line="49" pos:column="39"/></expr_stmt></block></else></if>
		<if pos:line="50" pos:column="17">if <condition pos:line="50" pos:column="20">(<expr><operator pos:line="50" pos:column="21">*<pos:position pos:line="50" pos:column="22"/></operator><name pos:line="50" pos:column="22">tok<pos:position pos:line="50" pos:column="25"/></name> <operator pos:line="50" pos:column="26">!=<pos:position pos:line="50" pos:column="28"/></operator> <literal type="char" pos:line="50" pos:column="29">'@'<pos:position pos:line="50" pos:column="32"/></literal></expr>)<pos:position pos:line="50" pos:column="33"/></condition><then pos:line="50" pos:column="33"> <block pos:line="50" pos:column="34">{
			<comment type="block" pos:line="51" pos:column="25">/* Match the username */</comment>
			<if pos:line="52" pos:column="25">if <condition pos:line="52" pos:column="28">(<expr><call><name pos:line="52" pos:column="29">wildmatch<pos:position pos:line="52" pos:column="38"/></name><argument_list pos:line="52" pos:column="38">(<argument><expr><name pos:line="52" pos:column="39">tok<pos:position pos:line="52" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="44">line<pos:position pos:line="52" pos:column="48"/></name></expr></argument>)<pos:position pos:line="52" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="52" pos:column="50"/></condition><then pos:line="52" pos:column="50">
				<block type="pseudo"><break pos:line="53" pos:column="33">break;<pos:position pos:line="53" pos:column="39"/></break></block></then></if>
		}<pos:position pos:line="54" pos:column="18"/></block></then> <else pos:line="54" pos:column="19">else <block pos:line="54" pos:column="24">{
<cpp:ifdef pos:line="55" pos:column="1">#<cpp:directive pos:line="55" pos:column="2">ifdef<pos:position pos:line="55" pos:column="7"/></cpp:directive> <name pos:line="55" pos:column="8">HAVE_GETGROUPLIST<pos:position pos:line="55" pos:column="25"/></name></cpp:ifdef>
			<decl_stmt><decl><type><name pos:line="56" pos:column="25">int<pos:position pos:line="56" pos:column="28"/></name></type> <name pos:line="56" pos:column="29">j<pos:position pos:line="56" pos:column="30"/></name></decl>;<pos:position pos:line="56" pos:column="31"/></decl_stmt>
			<comment type="block" pos:line="57" pos:column="25">/* See if authorizing user is a real user, and if so, see
			 * if it is in a group that matches tok+1 wildmat. */</comment>
			<if pos:line="59" pos:column="25">if <condition pos:line="59" pos:column="28">(<expr><name pos:line="59" pos:column="29">auth_uid_groups_cnt<pos:position pos:line="59" pos:column="48"/></name> <operator pos:line="59" pos:column="49">&lt;<pos:position pos:line="59" pos:column="53"/></operator> <literal type="number" pos:line="59" pos:column="51">0<pos:position pos:line="59" pos:column="52"/></literal></expr>)<pos:position pos:line="59" pos:column="53"/></condition><then pos:line="59" pos:column="53"> <block pos:line="59" pos:column="54">{
				<decl_stmt><decl><type><name pos:line="60" pos:column="33">gid_t<pos:position pos:line="60" pos:column="38"/></name></type> <name><name pos:line="60" pos:column="39">gid_list<pos:position pos:line="60" pos:column="47"/></name><index pos:line="60" pos:column="47">[<expr><literal type="number" pos:line="60" pos:column="48">64<pos:position pos:line="60" pos:column="50"/></literal></expr>]<pos:position pos:line="60" pos:column="51"/></index></name></decl>;<pos:position pos:line="60" pos:column="52"/></decl_stmt>
				<decl_stmt><decl><type><name pos:line="61" pos:column="33">uid_t<pos:position pos:line="61" pos:column="38"/></name></type> <name pos:line="61" pos:column="39">auth_uid<pos:position pos:line="61" pos:column="47"/></name></decl>;<pos:position pos:line="61" pos:column="48"/></decl_stmt>
				<expr_stmt><expr><name pos:line="62" pos:column="33">auth_uid_groups_cnt<pos:position pos:line="62" pos:column="52"/></name> <operator pos:line="62" pos:column="53">=<pos:position pos:line="62" pos:column="54"/></operator> <sizeof pos:line="62" pos:column="55">sizeof <name pos:line="62" pos:column="62">gid_list<pos:position pos:line="62" pos:column="70"/></name></sizeof> <operator pos:line="62" pos:column="71">/<pos:position pos:line="62" pos:column="72"/></operator> <sizeof pos:line="62" pos:column="73">sizeof <argument_list pos:line="62" pos:column="80">(<argument><expr><name pos:line="62" pos:column="81">gid_t<pos:position pos:line="62" pos:column="86"/></name></expr></argument>)<pos:position pos:line="62" pos:column="87"/></argument_list></sizeof></expr>;<pos:position pos:line="62" pos:column="88"/></expr_stmt>
				<if pos:line="63" pos:column="33">if <condition pos:line="63" pos:column="36">(<expr><operator pos:line="63" pos:column="37">!<pos:position pos:line="63" pos:column="38"/></operator><call><name pos:line="63" pos:column="38">user_to_uid<pos:position pos:line="63" pos:column="49"/></name><argument_list pos:line="63" pos:column="49">(<argument><expr><name pos:line="63" pos:column="50">line<pos:position pos:line="63" pos:column="54"/></name></expr></argument>, <argument><expr><operator pos:line="63" pos:column="56">&amp;<pos:position pos:line="63" pos:column="61"/></operator><name pos:line="63" pos:column="57">auth_uid<pos:position pos:line="63" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="63" pos:column="67">False<pos:position pos:line="63" pos:column="72"/></name></expr></argument>)<pos:position pos:line="63" pos:column="73"/></argument_list></call>
				 <operator pos:line="64" pos:column="34">||<pos:position pos:line="64" pos:column="36"/></operator> <call><name pos:line="64" pos:column="37">getallgroups<pos:position pos:line="64" pos:column="49"/></name><argument_list pos:line="64" pos:column="49">(<argument><expr><name pos:line="64" pos:column="50">auth_uid<pos:position pos:line="64" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="60">gid_list<pos:position pos:line="64" pos:column="68"/></name></expr></argument>, <argument><expr><operator pos:line="64" pos:column="70">&amp;<pos:position pos:line="64" pos:column="75"/></operator><name pos:line="64" pos:column="71">auth_uid_groups_cnt<pos:position pos:line="64" pos:column="90"/></name></expr></argument>)<pos:position pos:line="64" pos:column="91"/></argument_list></call> <operator pos:line="64" pos:column="92">!=<pos:position pos:line="64" pos:column="94"/></operator> <name pos:line="64" pos:column="95">NULL<pos:position pos:line="64" pos:column="99"/></name></expr>)<pos:position pos:line="64" pos:column="100"/></condition><then pos:line="64" pos:column="100">
					<block type="pseudo"><expr_stmt><expr><name pos:line="65" pos:column="41">auth_uid_groups_cnt<pos:position pos:line="65" pos:column="60"/></name> <operator pos:line="65" pos:column="61">=<pos:position pos:line="65" pos:column="62"/></operator> <literal type="number" pos:line="65" pos:column="63">0<pos:position pos:line="65" pos:column="64"/></literal></expr>;<pos:position pos:line="65" pos:column="65"/></expr_stmt></block></then>
				<else pos:line="66" pos:column="33">else <block pos:line="66" pos:column="38">{
					<if pos:line="67" pos:column="41">if <condition pos:line="67" pos:column="44">(<expr><operator pos:line="67" pos:column="45">(<pos:position pos:line="67" pos:column="46"/></operator><name pos:line="67" pos:column="46">auth_uid_groups<pos:position pos:line="67" pos:column="61"/></name> <operator pos:line="67" pos:column="62">=<pos:position pos:line="67" pos:column="63"/></operator> <call><name pos:line="67" pos:column="64">new_array<pos:position pos:line="67" pos:column="73"/></name><argument_list pos:line="67" pos:column="73">(<argument><expr><name pos:line="67" pos:column="74">char<pos:position pos:line="67" pos:column="78"/></name> <operator pos:line="67" pos:column="79">*<pos:position pos:line="67" pos:column="80"/></operator></expr></argument>, <argument><expr><name pos:line="67" pos:column="82">auth_uid_groups_cnt<pos:position pos:line="67" pos:column="101"/></name></expr></argument>)<pos:position pos:line="67" pos:column="102"/></argument_list></call><operator pos:line="67" pos:column="102">)<pos:position pos:line="67" pos:column="103"/></operator> <operator pos:line="67" pos:column="104">==<pos:position pos:line="67" pos:column="106"/></operator> <name pos:line="67" pos:column="107">NULL<pos:position pos:line="67" pos:column="111"/></name></expr>)<pos:position pos:line="67" pos:column="112"/></condition><then pos:line="67" pos:column="112">
						<block type="pseudo"><expr_stmt><expr><call><name pos:line="68" pos:column="49">out_of_memory<pos:position pos:line="68" pos:column="62"/></name><argument_list pos:line="68" pos:column="62">(<argument><expr><literal type="string" pos:line="68" pos:column="63">"auth_server"<pos:position pos:line="68" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="68" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="78"/></expr_stmt></block></then></if>
					<for pos:line="69" pos:column="41">for <control pos:line="69" pos:column="45">(<init><expr><name pos:line="69" pos:column="46">j<pos:position pos:line="69" pos:column="47"/></name> <operator pos:line="69" pos:column="48">=<pos:position pos:line="69" pos:column="49"/></operator> <literal type="number" pos:line="69" pos:column="50">0<pos:position pos:line="69" pos:column="51"/></literal></expr>;<pos:position pos:line="69" pos:column="52"/></init> <condition><expr><name pos:line="69" pos:column="53">j<pos:position pos:line="69" pos:column="54"/></name> <operator pos:line="69" pos:column="55">&lt;<pos:position pos:line="69" pos:column="59"/></operator> <name pos:line="69" pos:column="57">auth_uid_groups_cnt<pos:position pos:line="69" pos:column="76"/></name></expr>;<pos:position pos:line="69" pos:column="77"/></condition> <incr><expr><name pos:line="69" pos:column="78">j<pos:position pos:line="69" pos:column="79"/></name><operator pos:line="69" pos:column="79">++<pos:position pos:line="69" pos:column="81"/></operator></expr></incr>)<pos:position pos:line="69" pos:column="82"/></control>
						<block type="pseudo"><expr_stmt><expr><name><name pos:line="70" pos:column="49">auth_uid_groups<pos:position pos:line="70" pos:column="64"/></name><index pos:line="70" pos:column="64">[<expr><name pos:line="70" pos:column="65">j<pos:position pos:line="70" pos:column="66"/></name></expr>]<pos:position pos:line="70" pos:column="67"/></index></name> <operator pos:line="70" pos:column="68">=<pos:position pos:line="70" pos:column="69"/></operator> <call><name pos:line="70" pos:column="70">gid_to_group<pos:position pos:line="70" pos:column="82"/></name><argument_list pos:line="70" pos:column="82">(<argument><expr><name><name pos:line="70" pos:column="83">gid_list<pos:position pos:line="70" pos:column="91"/></name><index pos:line="70" pos:column="91">[<expr><name pos:line="70" pos:column="92">j<pos:position pos:line="70" pos:column="93"/></name></expr>]<pos:position pos:line="70" pos:column="94"/></index></name></expr></argument>)<pos:position pos:line="70" pos:column="95"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="96"/></expr_stmt></block></for>
				}<pos:position pos:line="71" pos:column="34"/></block></else></if>
			}<pos:position pos:line="72" pos:column="26"/></block></then></if>
			<for pos:line="73" pos:column="25">for <control pos:line="73" pos:column="29">(<init><expr><name pos:line="73" pos:column="30">j<pos:position pos:line="73" pos:column="31"/></name> <operator pos:line="73" pos:column="32">=<pos:position pos:line="73" pos:column="33"/></operator> <literal type="number" pos:line="73" pos:column="34">0<pos:position pos:line="73" pos:column="35"/></literal></expr>;<pos:position pos:line="73" pos:column="36"/></init> <condition><expr><name pos:line="73" pos:column="37">j<pos:position pos:line="73" pos:column="38"/></name> <operator pos:line="73" pos:column="39">&lt;<pos:position pos:line="73" pos:column="43"/></operator> <name pos:line="73" pos:column="41">auth_uid_groups_cnt<pos:position pos:line="73" pos:column="60"/></name></expr>;<pos:position pos:line="73" pos:column="61"/></condition> <incr><expr><name pos:line="73" pos:column="62">j<pos:position pos:line="73" pos:column="63"/></name><operator pos:line="73" pos:column="63">++<pos:position pos:line="73" pos:column="65"/></operator></expr></incr>)<pos:position pos:line="73" pos:column="66"/></control> <block pos:line="73" pos:column="67">{
				<if pos:line="74" pos:column="33">if <condition pos:line="74" pos:column="36">(<expr><name><name pos:line="74" pos:column="37">auth_uid_groups<pos:position pos:line="74" pos:column="52"/></name><index pos:line="74" pos:column="52">[<expr><name pos:line="74" pos:column="53">j<pos:position pos:line="74" pos:column="54"/></name></expr>]<pos:position pos:line="74" pos:column="55"/></index></name> <operator pos:line="74" pos:column="56">&amp;&amp;<pos:position pos:line="74" pos:column="66"/></operator> <call><name pos:line="74" pos:column="59">wildmatch<pos:position pos:line="74" pos:column="68"/></name><argument_list pos:line="74" pos:column="68">(<argument><expr><name pos:line="74" pos:column="69">tok<pos:position pos:line="74" pos:column="72"/></name><operator pos:line="74" pos:column="72">+<pos:position pos:line="74" pos:column="73"/></operator><literal type="number" pos:line="74" pos:column="73">1<pos:position pos:line="74" pos:column="74"/></literal></expr></argument>, <argument><expr><name><name pos:line="74" pos:column="76">auth_uid_groups<pos:position pos:line="74" pos:column="91"/></name><index pos:line="74" pos:column="91">[<expr><name pos:line="74" pos:column="92">j<pos:position pos:line="74" pos:column="93"/></name></expr>]<pos:position pos:line="74" pos:column="94"/></index></name></expr></argument>)<pos:position pos:line="74" pos:column="95"/></argument_list></call></expr>)<pos:position pos:line="74" pos:column="96"/></condition><then pos:line="74" pos:column="96"> <block pos:line="74" pos:column="97">{
					<expr_stmt><expr><name pos:line="75" pos:column="41">group_match<pos:position pos:line="75" pos:column="52"/></name> <operator pos:line="75" pos:column="53">=<pos:position pos:line="75" pos:column="54"/></operator> <name pos:line="75" pos:column="55">j<pos:position pos:line="75" pos:column="56"/></name></expr>;<pos:position pos:line="75" pos:column="57"/></expr_stmt>
					<break pos:line="76" pos:column="41">break;<pos:position pos:line="76" pos:column="47"/></break>
				}<pos:position pos:line="77" pos:column="34"/></block></then></if>
			}<pos:position pos:line="78" pos:column="26"/></block></for>
			<if pos:line="79" pos:column="25">if <condition pos:line="79" pos:column="28">(<expr><name pos:line="79" pos:column="29">group_match<pos:position pos:line="79" pos:column="40"/></name> <operator pos:line="79" pos:column="41">&gt;=<pos:position pos:line="79" pos:column="46"/></operator> <literal type="number" pos:line="79" pos:column="44">0<pos:position pos:line="79" pos:column="45"/></literal></expr>)<pos:position pos:line="79" pos:column="46"/></condition><then pos:line="79" pos:column="46">
				<block type="pseudo"><break pos:line="80" pos:column="33">break;<pos:position pos:line="80" pos:column="39"/></break></block></then></if>
<cpp:else pos:line="81" pos:column="1">#<cpp:directive pos:line="81" pos:column="2">else<pos:position pos:line="81" pos:column="6"/></cpp:directive></cpp:else>
			<expr_stmt><expr><call><name pos:line="82" pos:column="25">rprintf<pos:position pos:line="82" pos:column="32"/></name><argument_list pos:line="82" pos:column="32">(<argument><expr><name pos:line="82" pos:column="33">FLOG<pos:position pos:line="82" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="82" pos:column="39">"your computer doesn't support getgrouplist(), so no @group authorization is possible.\n"<pos:position pos:line="82" pos:column="128"/></literal></expr></argument>)<pos:position pos:line="82" pos:column="129"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="130"/></expr_stmt>
<cpp:endif pos:line="83" pos:column="1">#<cpp:directive pos:line="83" pos:column="2">endif<pos:position pos:line="83" pos:column="7"/></cpp:directive></cpp:endif>
		}<pos:position pos:line="84" pos:column="18"/></block></else></if>
	}<pos:position pos:line="85" pos:column="10"/></block></for>

	<expr_stmt><expr><call><name pos:line="87" pos:column="9">free<pos:position pos:line="87" pos:column="13"/></name><argument_list pos:line="87" pos:column="13">(<argument><expr><name pos:line="87" pos:column="14">users<pos:position pos:line="87" pos:column="19"/></name></expr></argument>)<pos:position pos:line="87" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="21"/></expr_stmt>

	<if pos:line="89" pos:column="9">if <condition pos:line="89" pos:column="12">(<expr><operator pos:line="89" pos:column="13">!<pos:position pos:line="89" pos:column="14"/></operator><name pos:line="89" pos:column="14">tok<pos:position pos:line="89" pos:column="17"/></name></expr>)<pos:position pos:line="89" pos:column="18"/></condition><then pos:line="89" pos:column="18">
		<block type="pseudo"><expr_stmt><expr><name pos:line="90" pos:column="17">err<pos:position pos:line="90" pos:column="20"/></name> <operator pos:line="90" pos:column="21">=<pos:position pos:line="90" pos:column="22"/></operator> <literal type="string" pos:line="90" pos:column="23">"no matching rule"<pos:position pos:line="90" pos:column="41"/></literal></expr>;<pos:position pos:line="90" pos:column="42"/></expr_stmt></block></then>
	<elseif pos:line="91" pos:column="9">else <if pos:line="91" pos:column="14">if <condition pos:line="91" pos:column="17">(<expr><name pos:line="91" pos:column="18">opt_ch<pos:position pos:line="91" pos:column="24"/></name> <operator pos:line="91" pos:column="25">==<pos:position pos:line="91" pos:column="27"/></operator> <literal type="char" pos:line="91" pos:column="28">'d'<pos:position pos:line="91" pos:column="31"/></literal></expr>)<pos:position pos:line="91" pos:column="32"/></condition><then pos:line="91" pos:column="32">
		<block type="pseudo"><expr_stmt><expr><name pos:line="92" pos:column="17">err<pos:position pos:line="92" pos:column="20"/></name> <operator pos:line="92" pos:column="21">=<pos:position pos:line="92" pos:column="22"/></operator> <literal type="string" pos:line="92" pos:column="23">"denied by rule"<pos:position pos:line="92" pos:column="39"/></literal></expr>;<pos:position pos:line="92" pos:column="40"/></expr_stmt></block></then></if></elseif>
	<else pos:line="93" pos:column="9">else <block pos:line="93" pos:column="14">{
		<decl_stmt><decl><type><name pos:line="94" pos:column="17">char<pos:position pos:line="94" pos:column="21"/></name> <modifier pos:line="94" pos:column="22">*<pos:position pos:line="94" pos:column="23"/></modifier></type><name pos:line="94" pos:column="23">group<pos:position pos:line="94" pos:column="28"/></name> <init pos:line="94" pos:column="29">= <expr><ternary><condition><expr><name pos:line="94" pos:column="31">group_match<pos:position pos:line="94" pos:column="42"/></name> <operator pos:line="94" pos:column="43">&gt;=<pos:position pos:line="94" pos:column="48"/></operator> <literal type="number" pos:line="94" pos:column="46">0<pos:position pos:line="94" pos:column="47"/></literal></expr> ?<pos:position pos:line="94" pos:column="49"/></condition><then pos:line="94" pos:column="49"> <expr><name><name pos:line="94" pos:column="50">auth_uid_groups<pos:position pos:line="94" pos:column="65"/></name><index pos:line="94" pos:column="65">[<expr><name pos:line="94" pos:column="66">group_match<pos:position pos:line="94" pos:column="77"/></name></expr>]<pos:position pos:line="94" pos:column="78"/></index></name></expr> <pos:position pos:line="94" pos:column="79"/></then><else pos:line="94" pos:column="79">: <expr><name pos:line="94" pos:column="81">NULL<pos:position pos:line="94" pos:column="85"/></name></expr></else></ternary></expr></init></decl>;<pos:position pos:line="94" pos:column="86"/></decl_stmt>
		<expr_stmt><expr><name pos:line="95" pos:column="17">err<pos:position pos:line="95" pos:column="20"/></name> <operator pos:line="95" pos:column="21">=<pos:position pos:line="95" pos:column="22"/></operator> <call><name pos:line="95" pos:column="23">check_secret<pos:position pos:line="95" pos:column="35"/></name><argument_list pos:line="95" pos:column="35">(<argument><expr><name pos:line="95" pos:column="36">module<pos:position pos:line="95" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="95" pos:column="44">line<pos:position pos:line="95" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="95" pos:column="50">group<pos:position pos:line="95" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="95" pos:column="57">challenge<pos:position pos:line="95" pos:column="66"/></name></expr></argument>, <argument><expr><name pos:line="95" pos:column="68">pass<pos:position pos:line="95" pos:column="72"/></name></expr></argument>)<pos:position pos:line="95" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="74"/></expr_stmt>
	}<pos:position pos:line="96" pos:column="10"/></block></else></if>

	<expr_stmt><expr><call><name pos:line="98" pos:column="9">memset<pos:position pos:line="98" pos:column="15"/></name><argument_list pos:line="98" pos:column="15">(<argument><expr><name pos:line="98" pos:column="16">challenge<pos:position pos:line="98" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="98" pos:column="27">0<pos:position pos:line="98" pos:column="28"/></literal></expr></argument>, <argument><expr><sizeof pos:line="98" pos:column="30">sizeof <name pos:line="98" pos:column="37">challenge<pos:position pos:line="98" pos:column="46"/></name></sizeof></expr></argument>)<pos:position pos:line="98" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="48"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="99" pos:column="9">memset<pos:position pos:line="99" pos:column="15"/></name><argument_list pos:line="99" pos:column="15">(<argument><expr><name pos:line="99" pos:column="16">pass<pos:position pos:line="99" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="99" pos:column="22">0<pos:position pos:line="99" pos:column="23"/></literal></expr></argument>, <argument><expr><call><name pos:line="99" pos:column="25">strlen<pos:position pos:line="99" pos:column="31"/></name><argument_list pos:line="99" pos:column="31">(<argument><expr><name pos:line="99" pos:column="32">pass<pos:position pos:line="99" pos:column="36"/></name></expr></argument>)<pos:position pos:line="99" pos:column="37"/></argument_list></call></expr></argument>)<pos:position pos:line="99" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="99" pos:column="39"/></expr_stmt>

	<if pos:line="101" pos:column="9">if <condition pos:line="101" pos:column="12">(<expr><name pos:line="101" pos:column="13">auth_uid_groups<pos:position pos:line="101" pos:column="28"/></name></expr>)<pos:position pos:line="101" pos:column="29"/></condition><then pos:line="101" pos:column="29"> <block pos:line="101" pos:column="30">{
		<decl_stmt><decl><type><name pos:line="102" pos:column="17">int<pos:position pos:line="102" pos:column="20"/></name></type> <name pos:line="102" pos:column="21">j<pos:position pos:line="102" pos:column="22"/></name></decl>;<pos:position pos:line="102" pos:column="23"/></decl_stmt>
		<for pos:line="103" pos:column="17">for <control pos:line="103" pos:column="21">(<init><expr><name pos:line="103" pos:column="22">j<pos:position pos:line="103" pos:column="23"/></name> <operator pos:line="103" pos:column="24">=<pos:position pos:line="103" pos:column="25"/></operator> <literal type="number" pos:line="103" pos:column="26">0<pos:position pos:line="103" pos:column="27"/></literal></expr>;<pos:position pos:line="103" pos:column="28"/></init> <condition><expr><name pos:line="103" pos:column="29">j<pos:position pos:line="103" pos:column="30"/></name> <operator pos:line="103" pos:column="31">&lt;<pos:position pos:line="103" pos:column="35"/></operator> <name pos:line="103" pos:column="33">auth_uid_groups_cnt<pos:position pos:line="103" pos:column="52"/></name></expr>;<pos:position pos:line="103" pos:column="53"/></condition> <incr><expr><name pos:line="103" pos:column="54">j<pos:position pos:line="103" pos:column="55"/></name><operator pos:line="103" pos:column="55">++<pos:position pos:line="103" pos:column="57"/></operator></expr></incr>)<pos:position pos:line="103" pos:column="58"/></control> <block pos:line="103" pos:column="59">{
			<if pos:line="104" pos:column="25">if <condition pos:line="104" pos:column="28">(<expr><name><name pos:line="104" pos:column="29">auth_uid_groups<pos:position pos:line="104" pos:column="44"/></name><index pos:line="104" pos:column="44">[<expr><name pos:line="104" pos:column="45">j<pos:position pos:line="104" pos:column="46"/></name></expr>]<pos:position pos:line="104" pos:column="47"/></index></name></expr>)<pos:position pos:line="104" pos:column="48"/></condition><then pos:line="104" pos:column="48">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="105" pos:column="33">free<pos:position pos:line="105" pos:column="37"/></name><argument_list pos:line="105" pos:column="37">(<argument><expr><name><name pos:line="105" pos:column="38">auth_uid_groups<pos:position pos:line="105" pos:column="53"/></name><index pos:line="105" pos:column="53">[<expr><name pos:line="105" pos:column="54">j<pos:position pos:line="105" pos:column="55"/></name></expr>]<pos:position pos:line="105" pos:column="56"/></index></name></expr></argument>)<pos:position pos:line="105" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="105" pos:column="58"/></expr_stmt></block></then></if>
		}<pos:position pos:line="106" pos:column="18"/></block></for>
		<expr_stmt><expr><call><name pos:line="107" pos:column="17">free<pos:position pos:line="107" pos:column="21"/></name><argument_list pos:line="107" pos:column="21">(<argument><expr><name pos:line="107" pos:column="22">auth_uid_groups<pos:position pos:line="107" pos:column="37"/></name></expr></argument>)<pos:position pos:line="107" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="107" pos:column="39"/></expr_stmt>
	}<pos:position pos:line="108" pos:column="10"/></block></then></if>

	<if pos:line="110" pos:column="9">if <condition pos:line="110" pos:column="12">(<expr><name pos:line="110" pos:column="13">err<pos:position pos:line="110" pos:column="16"/></name></expr>)<pos:position pos:line="110" pos:column="17"/></condition><then pos:line="110" pos:column="17"> <block pos:line="110" pos:column="18">{
		<expr_stmt><expr><call><name pos:line="111" pos:column="17">rprintf<pos:position pos:line="111" pos:column="24"/></name><argument_list pos:line="111" pos:column="24">(<argument><expr><name pos:line="111" pos:column="25">FLOG<pos:position pos:line="111" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="111" pos:column="31">"auth failed on module %s from %s (%s) for %s: %s\n"<pos:position pos:line="111" pos:column="83"/></literal></expr></argument>,
			<argument><expr><call><name pos:line="112" pos:column="25">lp_name<pos:position pos:line="112" pos:column="32"/></name><argument_list pos:line="112" pos:column="32">(<argument><expr><name pos:line="112" pos:column="33">module<pos:position pos:line="112" pos:column="39"/></name></expr></argument>)<pos:position pos:line="112" pos:column="40"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="112" pos:column="42">host<pos:position pos:line="112" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="112" pos:column="48">addr<pos:position pos:line="112" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="112" pos:column="54">line<pos:position pos:line="112" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="112" pos:column="60">err<pos:position pos:line="112" pos:column="63"/></name></expr></argument>)<pos:position pos:line="112" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="112" pos:column="65"/></expr_stmt>
		<return pos:line="113" pos:column="17">return <expr><name pos:line="113" pos:column="24">NULL<pos:position pos:line="113" pos:column="28"/></name></expr>;<pos:position pos:line="113" pos:column="29"/></return>
	}<pos:position pos:line="114" pos:column="10"/></block></then></if>

	<if pos:line="116" pos:column="9">if <condition pos:line="116" pos:column="12">(<expr><name pos:line="116" pos:column="13">opt_ch<pos:position pos:line="116" pos:column="19"/></name> <operator pos:line="116" pos:column="20">==<pos:position pos:line="116" pos:column="22"/></operator> <literal type="char" pos:line="116" pos:column="23">'r'<pos:position pos:line="116" pos:column="26"/></literal></expr>)<pos:position pos:line="116" pos:column="27"/></condition><then pos:line="116" pos:column="27">
		<block type="pseudo"><expr_stmt><expr><name pos:line="117" pos:column="17">read_only<pos:position pos:line="117" pos:column="26"/></name> <operator pos:line="117" pos:column="27">=<pos:position pos:line="117" pos:column="28"/></operator> <literal type="number" pos:line="117" pos:column="29">1<pos:position pos:line="117" pos:column="30"/></literal></expr>;<pos:position pos:line="117" pos:column="31"/></expr_stmt></block></then>
	<elseif pos:line="118" pos:column="9">else <if pos:line="118" pos:column="14">if <condition pos:line="118" pos:column="17">(<expr><name pos:line="118" pos:column="18">opt_ch<pos:position pos:line="118" pos:column="24"/></name> <operator pos:line="118" pos:column="25">==<pos:position pos:line="118" pos:column="27"/></operator> <literal type="char" pos:line="118" pos:column="28">'w'<pos:position pos:line="118" pos:column="31"/></literal></expr>)<pos:position pos:line="118" pos:column="32"/></condition><then pos:line="118" pos:column="32">
		<block type="pseudo"><expr_stmt><expr><name pos:line="119" pos:column="17">read_only<pos:position pos:line="119" pos:column="26"/></name> <operator pos:line="119" pos:column="27">=<pos:position pos:line="119" pos:column="28"/></operator> <literal type="number" pos:line="119" pos:column="29">0<pos:position pos:line="119" pos:column="30"/></literal></expr>;<pos:position pos:line="119" pos:column="31"/></expr_stmt></block></then></if></elseif></if>

	<return pos:line="121" pos:column="9">return <expr><call><name pos:line="121" pos:column="16">strdup<pos:position pos:line="121" pos:column="22"/></name><argument_list pos:line="121" pos:column="22">(<argument><expr><name pos:line="121" pos:column="23">line<pos:position pos:line="121" pos:column="27"/></name></expr></argument>)<pos:position pos:line="121" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="121" pos:column="29"/></return>
}<pos:position pos:line="122" pos:column="2"/></block></function></unit>
