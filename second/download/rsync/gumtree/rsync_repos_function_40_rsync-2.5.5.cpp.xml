<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_40_rsync-2.5.5.cpp" pos:tabs="8"><function><type><name><name pos:line="1" pos:column="1">struct<pos:position pos:line="1" pos:column="7"/></name> <name pos:line="1" pos:column="8">exclude_struct<pos:position pos:line="1" pos:column="22"/></name></name> <modifier pos:line="1" pos:column="23">*<pos:position pos:line="1" pos:column="24"/></modifier><modifier pos:line="1" pos:column="24">*<pos:position pos:line="1" pos:column="25"/></modifier></type><name pos:line="1" pos:column="25">make_exclude_list<pos:position pos:line="1" pos:column="42"/></name><parameter_list pos:line="1" pos:column="42">(<parameter><decl><type><specifier pos:line="1" pos:column="43">const<pos:position pos:line="1" pos:column="48"/></specifier> <name pos:line="1" pos:column="49">char<pos:position pos:line="1" pos:column="53"/></name> <modifier pos:line="1" pos:column="54">*<pos:position pos:line="1" pos:column="55"/></modifier></type><name pos:line="1" pos:column="55">fname<pos:position pos:line="1" pos:column="60"/></name></decl></parameter>,
					  <parameter><decl><type><name><name pos:line="2" pos:column="43">struct<pos:position pos:line="2" pos:column="49"/></name> <name pos:line="2" pos:column="50">exclude_struct<pos:position pos:line="2" pos:column="64"/></name></name> <modifier pos:line="2" pos:column="65">*<pos:position pos:line="2" pos:column="66"/></modifier><modifier pos:line="2" pos:column="66">*<pos:position pos:line="2" pos:column="67"/></modifier></type><name pos:line="2" pos:column="67">list1<pos:position pos:line="2" pos:column="72"/></name></decl></parameter>,
					  <parameter><decl><type><name pos:line="3" pos:column="43">int<pos:position pos:line="3" pos:column="46"/></name></type> <name pos:line="3" pos:column="47">fatal<pos:position pos:line="3" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="54">int<pos:position pos:line="3" pos:column="57"/></name></type> <name pos:line="3" pos:column="58">include<pos:position pos:line="3" pos:column="65"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="66"/></parameter_list>
<block pos:line="4" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">exclude_struct<pos:position pos:line="5" pos:column="30"/></name></name> <modifier pos:line="5" pos:column="31">*<pos:position pos:line="5" pos:column="32"/></modifier><modifier pos:line="5" pos:column="32">*<pos:position pos:line="5" pos:column="33"/></modifier></type><name pos:line="5" pos:column="33">list<pos:position pos:line="5" pos:column="37"/></name><init pos:line="5" pos:column="37">=<expr><name pos:line="5" pos:column="38">list1<pos:position pos:line="5" pos:column="43"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="44"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">FILE<pos:position pos:line="6" pos:column="13"/></name> <modifier pos:line="6" pos:column="14">*<pos:position pos:line="6" pos:column="15"/></modifier></type><name pos:line="6" pos:column="15">f<pos:position pos:line="6" pos:column="16"/></name> <init pos:line="6" pos:column="17">= <expr><call><name pos:line="6" pos:column="19">fopen<pos:position pos:line="6" pos:column="24"/></name><argument_list pos:line="6" pos:column="24">(<argument><expr><name pos:line="6" pos:column="25">fname<pos:position pos:line="6" pos:column="30"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="6" pos:column="31">"r"<pos:position pos:line="6" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="35"/></argument_list></call></expr></init></decl>;<pos:position pos:line="6" pos:column="36"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">char<pos:position pos:line="7" pos:column="13"/></name></type> <name><name pos:line="7" pos:column="14">line<pos:position pos:line="7" pos:column="18"/></name><index pos:line="7" pos:column="18">[<expr><name pos:line="7" pos:column="19">MAXPATHLEN<pos:position pos:line="7" pos:column="29"/></name></expr>]<pos:position pos:line="7" pos:column="30"/></index></name></decl>;<pos:position pos:line="7" pos:column="31"/></decl_stmt>
	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><operator pos:line="8" pos:column="13">!<pos:position pos:line="8" pos:column="14"/></operator><name pos:line="8" pos:column="14">f<pos:position pos:line="8" pos:column="15"/></name></expr>)<pos:position pos:line="8" pos:column="16"/></condition><then pos:line="8" pos:column="16"> <block pos:line="8" pos:column="17">{
		<if pos:line="9" pos:column="17">if <condition pos:line="9" pos:column="20">(<expr><name pos:line="9" pos:column="21">fatal<pos:position pos:line="9" pos:column="26"/></name></expr>)<pos:position pos:line="9" pos:column="27"/></condition><then pos:line="9" pos:column="27"> <block pos:line="9" pos:column="28">{
			<expr_stmt><expr><call><name pos:line="10" pos:column="25">rsyserr<pos:position pos:line="10" pos:column="32"/></name><argument_list pos:line="10" pos:column="32">(<argument><expr><name pos:line="10" pos:column="33">FERROR<pos:position pos:line="10" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="41">errno<pos:position pos:line="10" pos:column="46"/></name></expr></argument>,
                                <argument><expr><literal type="string" pos:line="11" pos:column="33">"failed to open %s file %s"<pos:position pos:line="11" pos:column="60"/></literal></expr></argument>,
                                <argument><expr><ternary><condition><expr><name pos:line="12" pos:column="33">include<pos:position pos:line="12" pos:column="40"/></name></expr> ?<pos:position pos:line="12" pos:column="42"/></condition><then pos:line="12" pos:column="42"> <expr><literal type="string" pos:line="12" pos:column="43">"include"<pos:position pos:line="12" pos:column="52"/></literal></expr> <pos:position pos:line="12" pos:column="53"/></then><else pos:line="12" pos:column="53">: <expr><literal type="string" pos:line="12" pos:column="55">"exclude"<pos:position pos:line="12" pos:column="64"/></literal></expr></else></ternary></expr></argument>,
                                <argument><expr><name pos:line="13" pos:column="33">fname<pos:position pos:line="13" pos:column="38"/></name></expr></argument>)<pos:position pos:line="13" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="40"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="14" pos:column="25">exit_cleanup<pos:position pos:line="14" pos:column="37"/></name><argument_list pos:line="14" pos:column="37">(<argument><expr><name pos:line="14" pos:column="38">RERR_FILEIO<pos:position pos:line="14" pos:column="49"/></name></expr></argument>)<pos:position pos:line="14" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="51"/></expr_stmt>
		}<pos:position pos:line="15" pos:column="18"/></block></then></if>
		<return pos:line="16" pos:column="17">return <expr><name pos:line="16" pos:column="24">list<pos:position pos:line="16" pos:column="28"/></name></expr>;<pos:position pos:line="16" pos:column="29"/></return>
	}<pos:position pos:line="17" pos:column="10"/></block></then></if>

	<while pos:line="19" pos:column="9">while <condition pos:line="19" pos:column="15">(<expr><call><name pos:line="19" pos:column="16">fgets<pos:position pos:line="19" pos:column="21"/></name><argument_list pos:line="19" pos:column="21">(<argument><expr><name pos:line="19" pos:column="22">line<pos:position pos:line="19" pos:column="26"/></name></expr></argument>,<argument><expr><name pos:line="19" pos:column="27">MAXPATHLEN<pos:position pos:line="19" pos:column="37"/></name></expr></argument>,<argument><expr><name pos:line="19" pos:column="38">f<pos:position pos:line="19" pos:column="39"/></name></expr></argument>)<pos:position pos:line="19" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="19" pos:column="41"/></condition> <block pos:line="19" pos:column="42">{
		<decl_stmt><decl><type><name pos:line="20" pos:column="17">int<pos:position pos:line="20" pos:column="20"/></name></type> <name pos:line="20" pos:column="21">l<pos:position pos:line="20" pos:column="22"/></name> <init pos:line="20" pos:column="23">= <expr><call><name pos:line="20" pos:column="25">strlen<pos:position pos:line="20" pos:column="31"/></name><argument_list pos:line="20" pos:column="31">(<argument><expr><name pos:line="20" pos:column="32">line<pos:position pos:line="20" pos:column="36"/></name></expr></argument>)<pos:position pos:line="20" pos:column="37"/></argument_list></call></expr></init></decl>;<pos:position pos:line="20" pos:column="38"/></decl_stmt>
		<if pos:line="21" pos:column="17">if <condition pos:line="21" pos:column="20">(<expr><name pos:line="21" pos:column="21">l<pos:position pos:line="21" pos:column="22"/></name> <operator pos:line="21" pos:column="23">&amp;&amp;<pos:position pos:line="21" pos:column="33"/></operator> <name><name pos:line="21" pos:column="26">line<pos:position pos:line="21" pos:column="30"/></name><index pos:line="21" pos:column="30">[<expr><name pos:line="21" pos:column="31">l<pos:position pos:line="21" pos:column="32"/></name><operator pos:line="21" pos:column="32">-<pos:position pos:line="21" pos:column="33"/></operator><literal type="number" pos:line="21" pos:column="33">1<pos:position pos:line="21" pos:column="34"/></literal></expr>]<pos:position pos:line="21" pos:column="35"/></index></name> <operator pos:line="21" pos:column="36">==<pos:position pos:line="21" pos:column="38"/></operator> <literal type="char" pos:line="21" pos:column="39">'\n'<pos:position pos:line="21" pos:column="43"/></literal></expr>)<pos:position pos:line="21" pos:column="44"/></condition><then pos:line="21" pos:column="44"> <block type="pseudo"><expr_stmt><expr><name pos:line="21" pos:column="45">l<pos:position pos:line="21" pos:column="46"/></name><operator pos:line="21" pos:column="46">--<pos:position pos:line="21" pos:column="48"/></operator></expr>;<pos:position pos:line="21" pos:column="49"/></expr_stmt></block></then></if>
		<expr_stmt><expr><name><name pos:line="22" pos:column="17">line<pos:position pos:line="22" pos:column="21"/></name><index pos:line="22" pos:column="21">[<expr><name pos:line="22" pos:column="22">l<pos:position pos:line="22" pos:column="23"/></name></expr>]<pos:position pos:line="22" pos:column="24"/></index></name> <operator pos:line="22" pos:column="25">=<pos:position pos:line="22" pos:column="26"/></operator> <literal type="number" pos:line="22" pos:column="27">0<pos:position pos:line="22" pos:column="28"/></literal></expr>;<pos:position pos:line="22" pos:column="29"/></expr_stmt>
		<if pos:line="23" pos:column="17">if <condition pos:line="23" pos:column="20">(<expr><name><name pos:line="23" pos:column="21">line<pos:position pos:line="23" pos:column="25"/></name><index pos:line="23" pos:column="25">[<expr><literal type="number" pos:line="23" pos:column="26">0<pos:position pos:line="23" pos:column="27"/></literal></expr>]<pos:position pos:line="23" pos:column="28"/></index></name> <operator pos:line="23" pos:column="29">&amp;&amp;<pos:position pos:line="23" pos:column="39"/></operator> <operator pos:line="23" pos:column="32">(<pos:position pos:line="23" pos:column="33"/></operator><name><name pos:line="23" pos:column="33">line<pos:position pos:line="23" pos:column="37"/></name><index pos:line="23" pos:column="37">[<expr><literal type="number" pos:line="23" pos:column="38">0<pos:position pos:line="23" pos:column="39"/></literal></expr>]<pos:position pos:line="23" pos:column="40"/></index></name> <operator pos:line="23" pos:column="41">!=<pos:position pos:line="23" pos:column="43"/></operator> <literal type="char" pos:line="23" pos:column="44">';'<pos:position pos:line="23" pos:column="47"/></literal><operator pos:line="23" pos:column="47">)<pos:position pos:line="23" pos:column="48"/></operator> <operator pos:line="23" pos:column="49">&amp;&amp;<pos:position pos:line="23" pos:column="59"/></operator> <operator pos:line="23" pos:column="52">(<pos:position pos:line="23" pos:column="53"/></operator><name><name pos:line="23" pos:column="53">line<pos:position pos:line="23" pos:column="57"/></name><index pos:line="23" pos:column="57">[<expr><literal type="number" pos:line="23" pos:column="58">0<pos:position pos:line="23" pos:column="59"/></literal></expr>]<pos:position pos:line="23" pos:column="60"/></index></name> <operator pos:line="23" pos:column="61">!=<pos:position pos:line="23" pos:column="63"/></operator> <literal type="char" pos:line="23" pos:column="64">'#'<pos:position pos:line="23" pos:column="67"/></literal><operator pos:line="23" pos:column="67">)<pos:position pos:line="23" pos:column="68"/></operator></expr>)<pos:position pos:line="23" pos:column="69"/></condition><then pos:line="23" pos:column="69"> <block pos:line="23" pos:column="70">{
			<comment type="block" pos:line="24" pos:column="25">/* Skip lines starting with semicolon or pound.
			   It probably wouldn't cause any harm to not skip
			     them but there's no need to save them. */</comment>
			<expr_stmt><expr><call><name pos:line="27" pos:column="25">add_exclude_list<pos:position pos:line="27" pos:column="41"/></name><argument_list pos:line="27" pos:column="41">(<argument><expr><name pos:line="27" pos:column="42">line<pos:position pos:line="27" pos:column="46"/></name></expr></argument>,<argument><expr><operator pos:line="27" pos:column="47">&amp;<pos:position pos:line="27" pos:column="52"/></operator><name pos:line="27" pos:column="48">list<pos:position pos:line="27" pos:column="52"/></name></expr></argument>,<argument><expr><name pos:line="27" pos:column="53">include<pos:position pos:line="27" pos:column="60"/></name></expr></argument>)<pos:position pos:line="27" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="62"/></expr_stmt>
		}<pos:position pos:line="28" pos:column="18"/></block></then></if>
	}<pos:position pos:line="29" pos:column="10"/></block></while>
	<expr_stmt><expr><call><name pos:line="30" pos:column="9">fclose<pos:position pos:line="30" pos:column="15"/></name><argument_list pos:line="30" pos:column="15">(<argument><expr><name pos:line="30" pos:column="16">f<pos:position pos:line="30" pos:column="17"/></name></expr></argument>)<pos:position pos:line="30" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="19"/></expr_stmt>
	<return pos:line="31" pos:column="9">return <expr><name pos:line="31" pos:column="16">list<pos:position pos:line="31" pos:column="20"/></name></expr>;<pos:position pos:line="31" pos:column="21"/></return>
}<pos:position pos:line="32" pos:column="2"/></block></function></unit>
