<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_175_rsync-1.6.9.cpp" pos:tabs="8"><decl_stmt><decl><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">inflateEnd<pos:position pos:line="1" pos:column="15"/></name><argument_list pos:line="1" pos:column="15">(<argument><expr><name pos:line="1" pos:column="16">z<pos:position pos:line="1" pos:column="17"/></name></expr></argument>)<pos:position pos:line="1" pos:column="18"/></argument_list>
<name pos:line="2" pos:column="1">z_stream<pos:position pos:line="2" pos:column="9"/></name> <modifier pos:line="2" pos:column="10">*<pos:position pos:line="2" pos:column="11"/></modifier><name pos:line="2" pos:column="11">z<pos:position pos:line="2" pos:column="12"/></name></decl>;<pos:position pos:line="2" pos:column="13"/></decl_stmt>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">uLong<pos:position pos:line="4" pos:column="8"/></name></type> <name pos:line="4" pos:column="9">c<pos:position pos:line="4" pos:column="10"/></name></decl>;<pos:position pos:line="4" pos:column="11"/></decl_stmt>

  <if pos:line="6" pos:column="3">if <condition pos:line="6" pos:column="6">(<expr><name pos:line="6" pos:column="7">z<pos:position pos:line="6" pos:column="8"/></name> <operator pos:line="6" pos:column="9">==<pos:position pos:line="6" pos:column="11"/></operator> <name pos:line="6" pos:column="12">Z_NULL<pos:position pos:line="6" pos:column="18"/></name> <operator pos:line="6" pos:column="19">||<pos:position pos:line="6" pos:column="21"/></operator> <name><name pos:line="6" pos:column="22">z<pos:position pos:line="6" pos:column="23"/></name><operator pos:line="6" pos:column="23">-&gt;<pos:position pos:line="6" pos:column="28"/></operator><name pos:line="6" pos:column="25">state<pos:position pos:line="6" pos:column="30"/></name></name> <operator pos:line="6" pos:column="31">==<pos:position pos:line="6" pos:column="33"/></operator> <name pos:line="6" pos:column="34">Z_NULL<pos:position pos:line="6" pos:column="40"/></name> <operator pos:line="6" pos:column="41">||<pos:position pos:line="6" pos:column="43"/></operator> <name><name pos:line="6" pos:column="44">z<pos:position pos:line="6" pos:column="45"/></name><operator pos:line="6" pos:column="45">-&gt;<pos:position pos:line="6" pos:column="50"/></operator><name pos:line="6" pos:column="47">zfree<pos:position pos:line="6" pos:column="52"/></name></name> <operator pos:line="6" pos:column="53">==<pos:position pos:line="6" pos:column="55"/></operator> <name pos:line="6" pos:column="56">Z_NULL<pos:position pos:line="6" pos:column="62"/></name></expr>)<pos:position pos:line="6" pos:column="63"/></condition><then pos:line="6" pos:column="63">
    <block type="pseudo"><return pos:line="7" pos:column="5">return <expr><name pos:line="7" pos:column="12">Z_STREAM_ERROR<pos:position pos:line="7" pos:column="26"/></name></expr>;<pos:position pos:line="7" pos:column="27"/></return></block></then></if>
  <if pos:line="8" pos:column="3">if <condition pos:line="8" pos:column="6">(<expr><name><name pos:line="8" pos:column="7">z<pos:position pos:line="8" pos:column="8"/></name><operator pos:line="8" pos:column="8">-&gt;<pos:position pos:line="8" pos:column="13"/></operator><name pos:line="8" pos:column="10">state<pos:position pos:line="8" pos:column="15"/></name><operator pos:line="8" pos:column="15">-&gt;<pos:position pos:line="8" pos:column="20"/></operator><name pos:line="8" pos:column="17">blocks<pos:position pos:line="8" pos:column="23"/></name></name> <operator pos:line="8" pos:column="24">!=<pos:position pos:line="8" pos:column="26"/></operator> <name pos:line="8" pos:column="27">Z_NULL<pos:position pos:line="8" pos:column="33"/></name></expr>)<pos:position pos:line="8" pos:column="34"/></condition><then pos:line="8" pos:column="34">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="9" pos:column="5">inflate_blocks_free<pos:position pos:line="9" pos:column="24"/></name><argument_list pos:line="9" pos:column="24">(<argument><expr><name><name pos:line="9" pos:column="25">z<pos:position pos:line="9" pos:column="26"/></name><operator pos:line="9" pos:column="26">-&gt;<pos:position pos:line="9" pos:column="31"/></operator><name pos:line="9" pos:column="28">state<pos:position pos:line="9" pos:column="33"/></name><operator pos:line="9" pos:column="33">-&gt;<pos:position pos:line="9" pos:column="38"/></operator><name pos:line="9" pos:column="35">blocks<pos:position pos:line="9" pos:column="41"/></name></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="43">z<pos:position pos:line="9" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="9" pos:column="46">&amp;<pos:position pos:line="9" pos:column="51"/></operator><name pos:line="9" pos:column="47">c<pos:position pos:line="9" pos:column="48"/></name></expr></argument>)<pos:position pos:line="9" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="50"/></expr_stmt></block></then></if>
  <expr_stmt><expr><call><name pos:line="10" pos:column="3">ZFREE<pos:position pos:line="10" pos:column="8"/></name><argument_list pos:line="10" pos:column="8">(<argument><expr><name pos:line="10" pos:column="9">z<pos:position pos:line="10" pos:column="10"/></name></expr></argument>, <argument><expr><name><name pos:line="10" pos:column="12">z<pos:position pos:line="10" pos:column="13"/></name><operator pos:line="10" pos:column="13">-&gt;<pos:position pos:line="10" pos:column="18"/></operator><name pos:line="10" pos:column="15">state<pos:position pos:line="10" pos:column="20"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="10" pos:column="22">sizeof<argument_list pos:line="10" pos:column="28">(<argument><expr pos:line="10" pos:column="29">struct <name pos:line="10" pos:column="36">internal_state<pos:position pos:line="10" pos:column="50"/></name></expr></argument>)<pos:position pos:line="10" pos:column="51"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="10" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="53"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="11" pos:column="3">z<pos:position pos:line="11" pos:column="4"/></name><operator pos:line="11" pos:column="4">-&gt;<pos:position pos:line="11" pos:column="9"/></operator><name pos:line="11" pos:column="6">state<pos:position pos:line="11" pos:column="11"/></name></name> <operator pos:line="11" pos:column="12">=<pos:position pos:line="11" pos:column="13"/></operator> <name pos:line="11" pos:column="14">Z_NULL<pos:position pos:line="11" pos:column="20"/></name></expr>;<pos:position pos:line="11" pos:column="21"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="12" pos:column="3">Trace<pos:position pos:line="12" pos:column="8"/></name><argument_list pos:line="12" pos:column="8">(<argument><expr><operator pos:line="12" pos:column="9">(<pos:position pos:line="12" pos:column="10"/></operator><name pos:line="12" pos:column="10">stderr<pos:position pos:line="12" pos:column="16"/></name><operator pos:line="12" pos:column="16">,<pos:position pos:line="12" pos:column="17"/></operator> <literal type="string" pos:line="12" pos:column="18">"inflate: end\n"<pos:position pos:line="12" pos:column="34"/></literal><operator pos:line="12" pos:column="34">)<pos:position pos:line="12" pos:column="35"/></operator></expr></argument>)<pos:position pos:line="12" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="37"/></expr_stmt>
  <return pos:line="13" pos:column="3">return <expr><name pos:line="13" pos:column="10">Z_OK<pos:position pos:line="13" pos:column="14"/></name></expr>;<pos:position pos:line="13" pos:column="15"/></return>
}<pos:position pos:line="14" pos:column="2"/></block></unit>
