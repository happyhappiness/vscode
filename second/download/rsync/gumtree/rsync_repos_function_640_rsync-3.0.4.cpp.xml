<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_640_rsync-3.0.4.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">fmtfp<pos:position pos:line="1" pos:column="18"/></name> <parameter_list pos:line="1" pos:column="19">(<parameter><decl><type><name pos:line="1" pos:column="20">char<pos:position pos:line="1" pos:column="24"/></name> <modifier pos:line="1" pos:column="25">*<pos:position pos:line="1" pos:column="26"/></modifier></type><name pos:line="1" pos:column="26">buffer<pos:position pos:line="1" pos:column="32"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="34">size_t<pos:position pos:line="1" pos:column="40"/></name> <modifier pos:line="1" pos:column="41">*<pos:position pos:line="1" pos:column="42"/></modifier></type><name pos:line="1" pos:column="42">currlen<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="51">size_t<pos:position pos:line="1" pos:column="57"/></name></type> <name pos:line="1" pos:column="58">maxlen<pos:position pos:line="1" pos:column="64"/></name></decl></parameter>,
		   <parameter><decl><type><name pos:line="2" pos:column="20">LDOUBLE<pos:position pos:line="2" pos:column="27"/></name></type> <name pos:line="2" pos:column="28">fvalue<pos:position pos:line="2" pos:column="34"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="36">int<pos:position pos:line="2" pos:column="39"/></name></type> <name pos:line="2" pos:column="40">min<pos:position pos:line="2" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="45">int<pos:position pos:line="2" pos:column="48"/></name></type> <name pos:line="2" pos:column="49">max<pos:position pos:line="2" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="54">int<pos:position pos:line="2" pos:column="57"/></name></type> <name pos:line="2" pos:column="58">flags<pos:position pos:line="2" pos:column="63"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="64"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">signvalue<pos:position pos:line="4" pos:column="22"/></name> <init pos:line="4" pos:column="23">= <expr><literal type="number" pos:line="4" pos:column="25">0<pos:position pos:line="4" pos:column="26"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="27"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">double<pos:position pos:line="5" pos:column="15"/></name></type> <name pos:line="5" pos:column="16">ufvalue<pos:position pos:line="5" pos:column="23"/></name></decl>;<pos:position pos:line="5" pos:column="24"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">char<pos:position pos:line="6" pos:column="13"/></name></type> <name><name pos:line="6" pos:column="14">iconvert<pos:position pos:line="6" pos:column="22"/></name><index pos:line="6" pos:column="22">[<expr><literal type="number" pos:line="6" pos:column="23">311<pos:position pos:line="6" pos:column="26"/></literal></expr>]<pos:position pos:line="6" pos:column="27"/></index></name></decl>;<pos:position pos:line="6" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">char<pos:position pos:line="7" pos:column="13"/></name></type> <name><name pos:line="7" pos:column="14">fconvert<pos:position pos:line="7" pos:column="22"/></name><index pos:line="7" pos:column="22">[<expr><literal type="number" pos:line="7" pos:column="23">311<pos:position pos:line="7" pos:column="26"/></literal></expr>]<pos:position pos:line="7" pos:column="27"/></index></name></decl>;<pos:position pos:line="7" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">int<pos:position pos:line="8" pos:column="12"/></name></type> <name pos:line="8" pos:column="13">iplace<pos:position pos:line="8" pos:column="19"/></name> <init pos:line="8" pos:column="20">= <expr><literal type="number" pos:line="8" pos:column="22">0<pos:position pos:line="8" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="24"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="9" pos:column="9">int<pos:position pos:line="9" pos:column="12"/></name></type> <name pos:line="9" pos:column="13">fplace<pos:position pos:line="9" pos:column="19"/></name> <init pos:line="9" pos:column="20">= <expr><literal type="number" pos:line="9" pos:column="22">0<pos:position pos:line="9" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="24"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="10" pos:column="9">int<pos:position pos:line="10" pos:column="12"/></name></type> <name pos:line="10" pos:column="13">padlen<pos:position pos:line="10" pos:column="19"/></name> <init pos:line="10" pos:column="20">= <expr><literal type="number" pos:line="10" pos:column="22">0<pos:position pos:line="10" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="10" pos:column="24"/></decl_stmt> <comment type="block" pos:line="10" pos:column="25">/* amount to pad */</comment>
	<decl_stmt><decl><type><name pos:line="11" pos:column="9">int<pos:position pos:line="11" pos:column="12"/></name></type> <name pos:line="11" pos:column="13">zpadlen<pos:position pos:line="11" pos:column="20"/></name> <init pos:line="11" pos:column="21">= <expr><literal type="number" pos:line="11" pos:column="23">0<pos:position pos:line="11" pos:column="24"/></literal></expr></init></decl>;<pos:position pos:line="11" pos:column="25"/></decl_stmt> 
	<decl_stmt><decl><type><name pos:line="12" pos:column="9">int<pos:position pos:line="12" pos:column="12"/></name></type> <name pos:line="12" pos:column="13">caps<pos:position pos:line="12" pos:column="17"/></name> <init pos:line="12" pos:column="18">= <expr><literal type="number" pos:line="12" pos:column="20">0<pos:position pos:line="12" pos:column="21"/></literal></expr></init></decl>;<pos:position pos:line="12" pos:column="22"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="13" pos:column="9">int<pos:position pos:line="13" pos:column="12"/></name></type> <name pos:line="13" pos:column="13">idx<pos:position pos:line="13" pos:column="16"/></name></decl>;<pos:position pos:line="13" pos:column="17"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="14" pos:column="9">double<pos:position pos:line="14" pos:column="15"/></name></type> <name pos:line="14" pos:column="16">intpart<pos:position pos:line="14" pos:column="23"/></name></decl>;<pos:position pos:line="14" pos:column="24"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="15" pos:column="9">double<pos:position pos:line="15" pos:column="15"/></name></type> <name pos:line="15" pos:column="16">fracpart<pos:position pos:line="15" pos:column="24"/></name></decl>;<pos:position pos:line="15" pos:column="25"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="16" pos:column="9">double<pos:position pos:line="16" pos:column="15"/></name></type> <name pos:line="16" pos:column="16">temp<pos:position pos:line="16" pos:column="20"/></name></decl>;<pos:position pos:line="16" pos:column="21"/></decl_stmt>
  
	<comment type="block" pos:line="18" pos:column="9">/* 
	 * AIX manpage says the default is 0, but Solaris says the default
	 * is 6, and sprintf on AIX defaults to 6
	 */</comment>
	<if pos:line="22" pos:column="9">if <condition pos:line="22" pos:column="12">(<expr><name pos:line="22" pos:column="13">max<pos:position pos:line="22" pos:column="16"/></name> <operator pos:line="22" pos:column="17">&lt;<pos:position pos:line="22" pos:column="21"/></operator> <literal type="number" pos:line="22" pos:column="19">0<pos:position pos:line="22" pos:column="20"/></literal></expr>)<pos:position pos:line="22" pos:column="21"/></condition><then pos:line="22" pos:column="21">
		<block type="pseudo"><expr_stmt><expr><name pos:line="23" pos:column="17">max<pos:position pos:line="23" pos:column="20"/></name> <operator pos:line="23" pos:column="21">=<pos:position pos:line="23" pos:column="22"/></operator> <literal type="number" pos:line="23" pos:column="23">6<pos:position pos:line="23" pos:column="24"/></literal></expr>;<pos:position pos:line="23" pos:column="25"/></expr_stmt></block></then></if>

	<expr_stmt><expr><name pos:line="25" pos:column="9">ufvalue<pos:position pos:line="25" pos:column="16"/></name> <operator pos:line="25" pos:column="17">=<pos:position pos:line="25" pos:column="18"/></operator> <call><name pos:line="25" pos:column="19">abs_val<pos:position pos:line="25" pos:column="26"/></name> <argument_list pos:line="25" pos:column="27">(<argument><expr><name pos:line="25" pos:column="28">fvalue<pos:position pos:line="25" pos:column="34"/></name></expr></argument>)<pos:position pos:line="25" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="36"/></expr_stmt>

	<if pos:line="27" pos:column="9">if <condition pos:line="27" pos:column="12">(<expr><name pos:line="27" pos:column="13">fvalue<pos:position pos:line="27" pos:column="19"/></name> <operator pos:line="27" pos:column="20">&lt;<pos:position pos:line="27" pos:column="24"/></operator> <literal type="number" pos:line="27" pos:column="22">0<pos:position pos:line="27" pos:column="23"/></literal></expr>)<pos:position pos:line="27" pos:column="24"/></condition><then pos:line="27" pos:column="24"> <block pos:line="27" pos:column="25">{
		<expr_stmt><expr><name pos:line="28" pos:column="17">signvalue<pos:position pos:line="28" pos:column="26"/></name> <operator pos:line="28" pos:column="27">=<pos:position pos:line="28" pos:column="28"/></operator> <literal type="char" pos:line="28" pos:column="29">'-'<pos:position pos:line="28" pos:column="32"/></literal></expr>;<pos:position pos:line="28" pos:column="33"/></expr_stmt>
	}<pos:position pos:line="29" pos:column="10"/></block></then> <else pos:line="29" pos:column="11">else <block pos:line="29" pos:column="16">{
		<if pos:line="30" pos:column="17">if <condition pos:line="30" pos:column="20">(<expr><name pos:line="30" pos:column="21">flags<pos:position pos:line="30" pos:column="26"/></name> <operator pos:line="30" pos:column="27">&amp;<pos:position pos:line="30" pos:column="32"/></operator> <name pos:line="30" pos:column="29">DP_F_PLUS<pos:position pos:line="30" pos:column="38"/></name></expr>)<pos:position pos:line="30" pos:column="39"/></condition><then pos:line="30" pos:column="39"> <block pos:line="30" pos:column="40">{ <comment type="block" pos:line="30" pos:column="42">/* Do a sign (+/i) */</comment>
			<expr_stmt><expr><name pos:line="31" pos:column="25">signvalue<pos:position pos:line="31" pos:column="34"/></name> <operator pos:line="31" pos:column="35">=<pos:position pos:line="31" pos:column="36"/></operator> <literal type="char" pos:line="31" pos:column="37">'+'<pos:position pos:line="31" pos:column="40"/></literal></expr>;<pos:position pos:line="31" pos:column="41"/></expr_stmt>
		}<pos:position pos:line="32" pos:column="18"/></block></then> <else pos:line="32" pos:column="19">else <block pos:line="32" pos:column="24">{
			<if pos:line="33" pos:column="25">if <condition pos:line="33" pos:column="28">(<expr><name pos:line="33" pos:column="29">flags<pos:position pos:line="33" pos:column="34"/></name> <operator pos:line="33" pos:column="35">&amp;<pos:position pos:line="33" pos:column="40"/></operator> <name pos:line="33" pos:column="37">DP_F_SPACE<pos:position pos:line="33" pos:column="47"/></name></expr>)<pos:position pos:line="33" pos:column="48"/></condition><then pos:line="33" pos:column="48">
				<block type="pseudo"><expr_stmt><expr><name pos:line="34" pos:column="33">signvalue<pos:position pos:line="34" pos:column="42"/></name> <operator pos:line="34" pos:column="43">=<pos:position pos:line="34" pos:column="44"/></operator> <literal type="char" pos:line="34" pos:column="45">' '<pos:position pos:line="34" pos:column="48"/></literal></expr>;<pos:position pos:line="34" pos:column="49"/></expr_stmt></block></then></if>
		}<pos:position pos:line="35" pos:column="18"/></block></else></if>
	}<pos:position pos:line="36" pos:column="10"/></block></else></if>

<cpp:if pos:line="38" pos:column="1">#<cpp:directive pos:line="38" pos:column="2">if<pos:position pos:line="38" pos:column="4"/></cpp:directive> <expr><literal type="number" pos:line="38" pos:column="5">0<pos:position pos:line="38" pos:column="6"/></literal></expr></cpp:if>
	if (flags &amp; DP_F_UP) caps = 1; <comment type="block" pos:line="39" pos:column="40">/* Should characters be upper case? */</comment>
<cpp:endif pos:line="40" pos:column="1">#<cpp:directive pos:line="40" pos:column="2">endif<pos:position pos:line="40" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:if pos:line="42" pos:column="1">#<cpp:directive pos:line="42" pos:column="2">if<pos:position pos:line="42" pos:column="4"/></cpp:directive> <expr><literal type="number" pos:line="42" pos:column="5">0<pos:position pos:line="42" pos:column="6"/></literal></expr></cpp:if>
	 if (max == 0) ufvalue += 0.5; <comment type="block" pos:line="43" pos:column="40">/* if max = 0 we must round */</comment>
<cpp:endif pos:line="44" pos:column="1">#<cpp:directive pos:line="44" pos:column="2">endif<pos:position pos:line="44" pos:column="7"/></cpp:directive></cpp:endif>

	<comment type="block" pos:line="46" pos:column="9">/* 
	 * Sorry, we only support 16 digits past the decimal because of our 
	 * conversion method
	 */</comment>
	<if pos:line="50" pos:column="9">if <condition pos:line="50" pos:column="12">(<expr><name pos:line="50" pos:column="13">max<pos:position pos:line="50" pos:column="16"/></name> <operator pos:line="50" pos:column="17">&gt;<pos:position pos:line="50" pos:column="21"/></operator> <literal type="number" pos:line="50" pos:column="19">16<pos:position pos:line="50" pos:column="21"/></literal></expr>)<pos:position pos:line="50" pos:column="22"/></condition><then pos:line="50" pos:column="22">
		<block type="pseudo"><expr_stmt><expr><name pos:line="51" pos:column="17">max<pos:position pos:line="51" pos:column="20"/></name> <operator pos:line="51" pos:column="21">=<pos:position pos:line="51" pos:column="22"/></operator> <literal type="number" pos:line="51" pos:column="23">16<pos:position pos:line="51" pos:column="25"/></literal></expr>;<pos:position pos:line="51" pos:column="26"/></expr_stmt></block></then></if>

	<comment type="block" pos:line="53" pos:column="9">/* We "cheat" by converting the fractional part to integer by
	 * multiplying by a factor of 10
	 */</comment>

	<expr_stmt><expr><name pos:line="57" pos:column="9">temp<pos:position pos:line="57" pos:column="13"/></name> <operator pos:line="57" pos:column="14">=<pos:position pos:line="57" pos:column="15"/></operator> <name pos:line="57" pos:column="16">ufvalue<pos:position pos:line="57" pos:column="23"/></name></expr>;<pos:position pos:line="57" pos:column="24"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="58" pos:column="9">my_modf<pos:position pos:line="58" pos:column="16"/></name><argument_list pos:line="58" pos:column="16">(<argument><expr><name pos:line="58" pos:column="17">temp<pos:position pos:line="58" pos:column="21"/></name></expr></argument>, <argument><expr><operator pos:line="58" pos:column="23">&amp;<pos:position pos:line="58" pos:column="28"/></operator><name pos:line="58" pos:column="24">intpart<pos:position pos:line="58" pos:column="31"/></name></expr></argument>)<pos:position pos:line="58" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="33"/></expr_stmt>

	<expr_stmt><expr><name pos:line="60" pos:column="9">fracpart<pos:position pos:line="60" pos:column="17"/></name> <operator pos:line="60" pos:column="18">=<pos:position pos:line="60" pos:column="19"/></operator> <call><name pos:line="60" pos:column="20">ROUND<pos:position pos:line="60" pos:column="25"/></name><argument_list pos:line="60" pos:column="25">(<argument><expr><operator pos:line="60" pos:column="26">(<pos:position pos:line="60" pos:column="27"/></operator><call><name pos:line="60" pos:column="27">POW10<pos:position pos:line="60" pos:column="32"/></name><argument_list pos:line="60" pos:column="32">(<argument><expr><name pos:line="60" pos:column="33">max<pos:position pos:line="60" pos:column="36"/></name></expr></argument>)<pos:position pos:line="60" pos:column="37"/></argument_list></call><operator pos:line="60" pos:column="37">)<pos:position pos:line="60" pos:column="38"/></operator> <operator pos:line="60" pos:column="39">*<pos:position pos:line="60" pos:column="40"/></operator> <operator pos:line="60" pos:column="41">(<pos:position pos:line="60" pos:column="42"/></operator><name pos:line="60" pos:column="42">ufvalue<pos:position pos:line="60" pos:column="49"/></name> <operator pos:line="60" pos:column="50">-<pos:position pos:line="60" pos:column="51"/></operator> <name pos:line="60" pos:column="52">intpart<pos:position pos:line="60" pos:column="59"/></name><operator pos:line="60" pos:column="59">)<pos:position pos:line="60" pos:column="60"/></operator></expr></argument>)<pos:position pos:line="60" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="62"/></expr_stmt>
	
	<if pos:line="62" pos:column="9">if <condition pos:line="62" pos:column="12">(<expr><name pos:line="62" pos:column="13">fracpart<pos:position pos:line="62" pos:column="21"/></name> <operator pos:line="62" pos:column="22">&gt;=<pos:position pos:line="62" pos:column="27"/></operator> <call><name pos:line="62" pos:column="25">POW10<pos:position pos:line="62" pos:column="30"/></name><argument_list pos:line="62" pos:column="30">(<argument><expr><name pos:line="62" pos:column="31">max<pos:position pos:line="62" pos:column="34"/></name></expr></argument>)<pos:position pos:line="62" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="62" pos:column="36"/></condition><then pos:line="62" pos:column="36"> <block pos:line="62" pos:column="37">{
		<expr_stmt><expr><name pos:line="63" pos:column="17">intpart<pos:position pos:line="63" pos:column="24"/></name><operator pos:line="63" pos:column="24">++<pos:position pos:line="63" pos:column="26"/></operator></expr>;<pos:position pos:line="63" pos:column="27"/></expr_stmt>
		<expr_stmt><expr><name pos:line="64" pos:column="17">fracpart<pos:position pos:line="64" pos:column="25"/></name> <operator pos:line="64" pos:column="26">-=<pos:position pos:line="64" pos:column="28"/></operator> <call><name pos:line="64" pos:column="29">POW10<pos:position pos:line="64" pos:column="34"/></name><argument_list pos:line="64" pos:column="34">(<argument><expr><name pos:line="64" pos:column="35">max<pos:position pos:line="64" pos:column="38"/></name></expr></argument>)<pos:position pos:line="64" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="40"/></expr_stmt>
	}<pos:position pos:line="65" pos:column="10"/></block></then></if>


	<comment type="block" pos:line="68" pos:column="9">/* Convert integer part */</comment>
	<do pos:line="69" pos:column="9">do <block pos:line="69" pos:column="12">{
		<expr_stmt><expr><name pos:line="70" pos:column="17">temp<pos:position pos:line="70" pos:column="21"/></name> <operator pos:line="70" pos:column="22">=<pos:position pos:line="70" pos:column="23"/></operator> <name pos:line="70" pos:column="24">intpart<pos:position pos:line="70" pos:column="31"/></name><operator pos:line="70" pos:column="31">*<pos:position pos:line="70" pos:column="32"/></operator><literal type="number" pos:line="70" pos:column="32">0.1<pos:position pos:line="70" pos:column="35"/></literal></expr>;<pos:position pos:line="70" pos:column="36"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="71" pos:column="17">my_modf<pos:position pos:line="71" pos:column="24"/></name><argument_list pos:line="71" pos:column="24">(<argument><expr><name pos:line="71" pos:column="25">temp<pos:position pos:line="71" pos:column="29"/></name></expr></argument>, <argument><expr><operator pos:line="71" pos:column="31">&amp;<pos:position pos:line="71" pos:column="36"/></operator><name pos:line="71" pos:column="32">intpart<pos:position pos:line="71" pos:column="39"/></name></expr></argument>)<pos:position pos:line="71" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="41"/></expr_stmt>
		<expr_stmt><expr><name pos:line="72" pos:column="17">idx<pos:position pos:line="72" pos:column="20"/></name> <operator pos:line="72" pos:column="21">=<pos:position pos:line="72" pos:column="22"/></operator> <call pos:line="72" pos:column="23">(<name pos:line="72" pos:column="24">int<pos:position pos:line="72" pos:column="27"/></name>) <argument_list pos:line="72" pos:column="29">(<argument><expr><operator pos:line="72" pos:column="30">(<pos:position pos:line="72" pos:column="31"/></operator><name pos:line="72" pos:column="31">temp<pos:position pos:line="72" pos:column="35"/></name> <operator pos:line="72" pos:column="36">-<pos:position pos:line="72" pos:column="37"/></operator><name pos:line="72" pos:column="37">intpart<pos:position pos:line="72" pos:column="44"/></name> <operator pos:line="72" pos:column="45">+<pos:position pos:line="72" pos:column="46"/></operator><literal type="number" pos:line="72" pos:column="46">0.05<pos:position pos:line="72" pos:column="50"/></literal><operator pos:line="72" pos:column="50">)<pos:position pos:line="72" pos:column="51"/></operator><operator pos:line="72" pos:column="51">*<pos:position pos:line="72" pos:column="52"/></operator> <literal type="number" pos:line="72" pos:column="53">10.0<pos:position pos:line="72" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="72" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="59"/></expr_stmt>
		<comment type="block" pos:line="73" pos:column="17">/* idx = (int) (((double)(temp*0.1) -intpart +0.05) *10.0); */</comment>
		<comment type="block" pos:line="74" pos:column="17">/* printf ("%llf, %f, %x\n", temp, intpart, idx); */</comment>
		<expr_stmt><expr><name><name pos:line="75" pos:column="17">iconvert<pos:position pos:line="75" pos:column="25"/></name><index pos:line="75" pos:column="25">[<expr><name pos:line="75" pos:column="26">iplace<pos:position pos:line="75" pos:column="32"/></name><operator pos:line="75" pos:column="32">++<pos:position pos:line="75" pos:column="34"/></operator></expr>]<pos:position pos:line="75" pos:column="35"/></index></name> <operator pos:line="75" pos:column="36">=<pos:position pos:line="75" pos:column="37"/></operator>
			<operator pos:line="76" pos:column="25">(<pos:position pos:line="76" pos:column="26"/></operator><ternary><condition><expr><name pos:line="76" pos:column="26">caps<pos:position pos:line="76" pos:column="30"/></name></expr>?<pos:position pos:line="76" pos:column="31"/></condition><then pos:line="76" pos:column="31"> <expr><literal type="string" pos:line="76" pos:column="32">"0123456789ABCDEF"<pos:position pos:line="76" pos:column="50"/></literal></expr></then><else pos:line="76" pos:column="50">:<expr><literal type="string" pos:line="76" pos:column="51">"0123456789abcdef"<pos:position pos:line="76" pos:column="69"/></literal></expr></else></ternary><operator pos:line="76" pos:column="69">)<pos:position pos:line="76" pos:column="70"/></operator><index pos:line="76" pos:column="70">[<expr><name pos:line="76" pos:column="71">idx<pos:position pos:line="76" pos:column="74"/></name></expr>]<pos:position pos:line="76" pos:column="75"/></index></expr>;<pos:position pos:line="76" pos:column="76"/></expr_stmt>
	}<pos:position pos:line="77" pos:column="10"/></block> while <condition pos:line="77" pos:column="17">(<expr><name pos:line="77" pos:column="18">intpart<pos:position pos:line="77" pos:column="25"/></name> <operator pos:line="77" pos:column="26">&amp;&amp;<pos:position pos:line="77" pos:column="36"/></operator> <operator pos:line="77" pos:column="29">(<pos:position pos:line="77" pos:column="30"/></operator><name pos:line="77" pos:column="30">iplace<pos:position pos:line="77" pos:column="36"/></name> <operator pos:line="77" pos:column="37">&lt;<pos:position pos:line="77" pos:column="41"/></operator> <literal type="number" pos:line="77" pos:column="39">311<pos:position pos:line="77" pos:column="42"/></literal><operator pos:line="77" pos:column="42">)<pos:position pos:line="77" pos:column="43"/></operator></expr>)<pos:position pos:line="77" pos:column="44"/></condition>;<pos:position pos:line="77" pos:column="45"/></do>
	<if pos:line="78" pos:column="9">if <condition pos:line="78" pos:column="12">(<expr><name pos:line="78" pos:column="13">iplace<pos:position pos:line="78" pos:column="19"/></name> <operator pos:line="78" pos:column="20">==<pos:position pos:line="78" pos:column="22"/></operator> <literal type="number" pos:line="78" pos:column="23">311<pos:position pos:line="78" pos:column="26"/></literal></expr>)<pos:position pos:line="78" pos:column="27"/></condition><then pos:line="78" pos:column="27"> <block type="pseudo"><expr_stmt><expr><name pos:line="78" pos:column="28">iplace<pos:position pos:line="78" pos:column="34"/></name><operator pos:line="78" pos:column="34">--<pos:position pos:line="78" pos:column="36"/></operator></expr>;<pos:position pos:line="78" pos:column="37"/></expr_stmt></block></then></if>
	<expr_stmt><expr><name><name pos:line="79" pos:column="9">iconvert<pos:position pos:line="79" pos:column="17"/></name><index pos:line="79" pos:column="17">[<expr><name pos:line="79" pos:column="18">iplace<pos:position pos:line="79" pos:column="24"/></name></expr>]<pos:position pos:line="79" pos:column="25"/></index></name> <operator pos:line="79" pos:column="26">=<pos:position pos:line="79" pos:column="27"/></operator> <literal type="number" pos:line="79" pos:column="28">0<pos:position pos:line="79" pos:column="29"/></literal></expr>;<pos:position pos:line="79" pos:column="30"/></expr_stmt>

	<comment type="block" pos:line="81" pos:column="9">/* Convert fractional part */</comment>
	<if pos:line="82" pos:column="9">if <condition pos:line="82" pos:column="12">(<expr><name pos:line="82" pos:column="13">fracpart<pos:position pos:line="82" pos:column="21"/></name></expr>)<pos:position pos:line="82" pos:column="22"/></condition><then pos:line="82" pos:column="22">
	<block pos:line="83" pos:column="9">{
		<do pos:line="84" pos:column="17">do <block pos:line="84" pos:column="20">{
			<expr_stmt><expr><name pos:line="85" pos:column="25">temp<pos:position pos:line="85" pos:column="29"/></name> <operator pos:line="85" pos:column="30">=<pos:position pos:line="85" pos:column="31"/></operator> <name pos:line="85" pos:column="32">fracpart<pos:position pos:line="85" pos:column="40"/></name><operator pos:line="85" pos:column="40">*<pos:position pos:line="85" pos:column="41"/></operator><literal type="number" pos:line="85" pos:column="41">0.1<pos:position pos:line="85" pos:column="44"/></literal></expr>;<pos:position pos:line="85" pos:column="45"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="86" pos:column="25">my_modf<pos:position pos:line="86" pos:column="32"/></name><argument_list pos:line="86" pos:column="32">(<argument><expr><name pos:line="86" pos:column="33">temp<pos:position pos:line="86" pos:column="37"/></name></expr></argument>, <argument><expr><operator pos:line="86" pos:column="39">&amp;<pos:position pos:line="86" pos:column="44"/></operator><name pos:line="86" pos:column="40">fracpart<pos:position pos:line="86" pos:column="48"/></name></expr></argument>)<pos:position pos:line="86" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="50"/></expr_stmt>
			<expr_stmt><expr><name pos:line="87" pos:column="25">idx<pos:position pos:line="87" pos:column="28"/></name> <operator pos:line="87" pos:column="29">=<pos:position pos:line="87" pos:column="30"/></operator> <call pos:line="87" pos:column="31">(<name pos:line="87" pos:column="32">int<pos:position pos:line="87" pos:column="35"/></name>) <argument_list pos:line="87" pos:column="37">(<argument><expr><operator pos:line="87" pos:column="38">(<pos:position pos:line="87" pos:column="39"/></operator><name pos:line="87" pos:column="39">temp<pos:position pos:line="87" pos:column="43"/></name> <operator pos:line="87" pos:column="44">-<pos:position pos:line="87" pos:column="45"/></operator><name pos:line="87" pos:column="45">fracpart<pos:position pos:line="87" pos:column="53"/></name> <operator pos:line="87" pos:column="54">+<pos:position pos:line="87" pos:column="55"/></operator><literal type="number" pos:line="87" pos:column="55">0.05<pos:position pos:line="87" pos:column="59"/></literal><operator pos:line="87" pos:column="59">)<pos:position pos:line="87" pos:column="60"/></operator><operator pos:line="87" pos:column="60">*<pos:position pos:line="87" pos:column="61"/></operator> <literal type="number" pos:line="87" pos:column="62">10.0<pos:position pos:line="87" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="87" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="68"/></expr_stmt>
			<comment type="block" pos:line="88" pos:column="25">/* idx = (int) ((((temp/10) -fracpart) +0.05) *10); */</comment>
			<comment type="block" pos:line="89" pos:column="25">/* printf ("%lf, %lf, %ld\n", temp, fracpart, idx ); */</comment>
			<expr_stmt><expr><name><name pos:line="90" pos:column="25">fconvert<pos:position pos:line="90" pos:column="33"/></name><index pos:line="90" pos:column="33">[<expr><name pos:line="90" pos:column="34">fplace<pos:position pos:line="90" pos:column="40"/></name><operator pos:line="90" pos:column="40">++<pos:position pos:line="90" pos:column="42"/></operator></expr>]<pos:position pos:line="90" pos:column="43"/></index></name> <operator pos:line="90" pos:column="44">=<pos:position pos:line="90" pos:column="45"/></operator>
			<operator pos:line="91" pos:column="25">(<pos:position pos:line="91" pos:column="26"/></operator><ternary><condition><expr><name pos:line="91" pos:column="26">caps<pos:position pos:line="91" pos:column="30"/></name></expr>?<pos:position pos:line="91" pos:column="31"/></condition><then pos:line="91" pos:column="31"> <expr><literal type="string" pos:line="91" pos:column="32">"0123456789ABCDEF"<pos:position pos:line="91" pos:column="50"/></literal></expr></then><else pos:line="91" pos:column="50">:<expr><literal type="string" pos:line="91" pos:column="51">"0123456789abcdef"<pos:position pos:line="91" pos:column="69"/></literal></expr></else></ternary><operator pos:line="91" pos:column="69">)<pos:position pos:line="91" pos:column="70"/></operator><index pos:line="91" pos:column="70">[<expr><name pos:line="91" pos:column="71">idx<pos:position pos:line="91" pos:column="74"/></name></expr>]<pos:position pos:line="91" pos:column="75"/></index></expr>;<pos:position pos:line="91" pos:column="76"/></expr_stmt>
		}<pos:position pos:line="92" pos:column="18"/></block> while<condition pos:line="92" pos:column="24">(<expr><name pos:line="92" pos:column="25">fracpart<pos:position pos:line="92" pos:column="33"/></name> <operator pos:line="92" pos:column="34">&amp;&amp;<pos:position pos:line="92" pos:column="44"/></operator> <operator pos:line="92" pos:column="37">(<pos:position pos:line="92" pos:column="38"/></operator><name pos:line="92" pos:column="38">fplace<pos:position pos:line="92" pos:column="44"/></name> <operator pos:line="92" pos:column="45">&lt;<pos:position pos:line="92" pos:column="49"/></operator> <literal type="number" pos:line="92" pos:column="47">311<pos:position pos:line="92" pos:column="50"/></literal><operator pos:line="92" pos:column="50">)<pos:position pos:line="92" pos:column="51"/></operator></expr>)<pos:position pos:line="92" pos:column="52"/></condition>;<pos:position pos:line="92" pos:column="53"/></do>
		<if pos:line="93" pos:column="17">if <condition pos:line="93" pos:column="20">(<expr><name pos:line="93" pos:column="21">fplace<pos:position pos:line="93" pos:column="27"/></name> <operator pos:line="93" pos:column="28">==<pos:position pos:line="93" pos:column="30"/></operator> <literal type="number" pos:line="93" pos:column="31">311<pos:position pos:line="93" pos:column="34"/></literal></expr>)<pos:position pos:line="93" pos:column="35"/></condition><then pos:line="93" pos:column="35"> <block type="pseudo"><expr_stmt><expr><name pos:line="93" pos:column="36">fplace<pos:position pos:line="93" pos:column="42"/></name><operator pos:line="93" pos:column="42">--<pos:position pos:line="93" pos:column="44"/></operator></expr>;<pos:position pos:line="93" pos:column="45"/></expr_stmt></block></then></if>
	}<pos:position pos:line="94" pos:column="10"/></block></then></if>
	<expr_stmt><expr><name><name pos:line="95" pos:column="9">fconvert<pos:position pos:line="95" pos:column="17"/></name><index pos:line="95" pos:column="17">[<expr><name pos:line="95" pos:column="18">fplace<pos:position pos:line="95" pos:column="24"/></name></expr>]<pos:position pos:line="95" pos:column="25"/></index></name> <operator pos:line="95" pos:column="26">=<pos:position pos:line="95" pos:column="27"/></operator> <literal type="number" pos:line="95" pos:column="28">0<pos:position pos:line="95" pos:column="29"/></literal></expr>;<pos:position pos:line="95" pos:column="30"/></expr_stmt>
  
	<comment type="block" pos:line="97" pos:column="9">/* -1 for decimal point, another -1 if we are printing a sign */</comment>
	<expr_stmt><expr><name pos:line="98" pos:column="9">padlen<pos:position pos:line="98" pos:column="15"/></name> <operator pos:line="98" pos:column="16">=<pos:position pos:line="98" pos:column="17"/></operator> <name pos:line="98" pos:column="18">min<pos:position pos:line="98" pos:column="21"/></name> <operator pos:line="98" pos:column="22">-<pos:position pos:line="98" pos:column="23"/></operator> <name pos:line="98" pos:column="24">iplace<pos:position pos:line="98" pos:column="30"/></name> <operator pos:line="98" pos:column="31">-<pos:position pos:line="98" pos:column="32"/></operator> <name pos:line="98" pos:column="33">max<pos:position pos:line="98" pos:column="36"/></name> <operator pos:line="98" pos:column="37">-<pos:position pos:line="98" pos:column="38"/></operator> <literal type="number" pos:line="98" pos:column="39">1<pos:position pos:line="98" pos:column="40"/></literal> <operator pos:line="98" pos:column="41">-<pos:position pos:line="98" pos:column="42"/></operator> <operator pos:line="98" pos:column="43">(<pos:position pos:line="98" pos:column="44"/></operator><ternary><condition><expr><operator pos:line="98" pos:column="44">(<pos:position pos:line="98" pos:column="45"/></operator><name pos:line="98" pos:column="45">signvalue<pos:position pos:line="98" pos:column="54"/></name><operator pos:line="98" pos:column="54">)<pos:position pos:line="98" pos:column="55"/></operator></expr> ?<pos:position pos:line="98" pos:column="57"/></condition><then pos:line="98" pos:column="57"> <expr><literal type="number" pos:line="98" pos:column="58">1<pos:position pos:line="98" pos:column="59"/></literal></expr> <pos:position pos:line="98" pos:column="60"/></then><else pos:line="98" pos:column="60">: <expr><literal type="number" pos:line="98" pos:column="62">0<pos:position pos:line="98" pos:column="63"/></literal></expr></else></ternary><operator pos:line="98" pos:column="63">)<pos:position pos:line="98" pos:column="64"/></operator></expr>;<pos:position pos:line="98" pos:column="65"/></expr_stmt> 
	<expr_stmt><expr><name pos:line="99" pos:column="9">zpadlen<pos:position pos:line="99" pos:column="16"/></name> <operator pos:line="99" pos:column="17">=<pos:position pos:line="99" pos:column="18"/></operator> <name pos:line="99" pos:column="19">max<pos:position pos:line="99" pos:column="22"/></name> <operator pos:line="99" pos:column="23">-<pos:position pos:line="99" pos:column="24"/></operator> <name pos:line="99" pos:column="25">fplace<pos:position pos:line="99" pos:column="31"/></name></expr>;<pos:position pos:line="99" pos:column="32"/></expr_stmt>
	<if pos:line="100" pos:column="9">if <condition pos:line="100" pos:column="12">(<expr><name pos:line="100" pos:column="13">zpadlen<pos:position pos:line="100" pos:column="20"/></name> <operator pos:line="100" pos:column="21">&lt;<pos:position pos:line="100" pos:column="25"/></operator> <literal type="number" pos:line="100" pos:column="23">0<pos:position pos:line="100" pos:column="24"/></literal></expr>)<pos:position pos:line="100" pos:column="25"/></condition><then pos:line="100" pos:column="25"> <block type="pseudo"><expr_stmt><expr><name pos:line="100" pos:column="26">zpadlen<pos:position pos:line="100" pos:column="33"/></name> <operator pos:line="100" pos:column="34">=<pos:position pos:line="100" pos:column="35"/></operator> <literal type="number" pos:line="100" pos:column="36">0<pos:position pos:line="100" pos:column="37"/></literal></expr>;<pos:position pos:line="100" pos:column="38"/></expr_stmt></block></then></if>
	<if pos:line="101" pos:column="9">if <condition pos:line="101" pos:column="12">(<expr><name pos:line="101" pos:column="13">padlen<pos:position pos:line="101" pos:column="19"/></name> <operator pos:line="101" pos:column="20">&lt;<pos:position pos:line="101" pos:column="24"/></operator> <literal type="number" pos:line="101" pos:column="22">0<pos:position pos:line="101" pos:column="23"/></literal></expr>)<pos:position pos:line="101" pos:column="24"/></condition><then pos:line="101" pos:column="24"> 
		<block type="pseudo"><expr_stmt><expr><name pos:line="102" pos:column="17">padlen<pos:position pos:line="102" pos:column="23"/></name> <operator pos:line="102" pos:column="24">=<pos:position pos:line="102" pos:column="25"/></operator> <literal type="number" pos:line="102" pos:column="26">0<pos:position pos:line="102" pos:column="27"/></literal></expr>;<pos:position pos:line="102" pos:column="28"/></expr_stmt></block></then></if>
	<if pos:line="103" pos:column="9">if <condition pos:line="103" pos:column="12">(<expr><name pos:line="103" pos:column="13">flags<pos:position pos:line="103" pos:column="18"/></name> <operator pos:line="103" pos:column="19">&amp;<pos:position pos:line="103" pos:column="24"/></operator> <name pos:line="103" pos:column="21">DP_F_MINUS<pos:position pos:line="103" pos:column="31"/></name></expr>)<pos:position pos:line="103" pos:column="32"/></condition><then pos:line="103" pos:column="32"> 
		<block type="pseudo"><expr_stmt><expr><name pos:line="104" pos:column="17">padlen<pos:position pos:line="104" pos:column="23"/></name> <operator pos:line="104" pos:column="24">=<pos:position pos:line="104" pos:column="25"/></operator> <operator pos:line="104" pos:column="26">-<pos:position pos:line="104" pos:column="27"/></operator><name pos:line="104" pos:column="27">padlen<pos:position pos:line="104" pos:column="33"/></name></expr>;<pos:position pos:line="104" pos:column="34"/></expr_stmt></block></then></if> <comment type="block" pos:line="104" pos:column="35">/* Left Justifty */</comment>
	
	<if pos:line="106" pos:column="9">if <condition pos:line="106" pos:column="12">(<expr><operator pos:line="106" pos:column="13">(<pos:position pos:line="106" pos:column="14"/></operator><name pos:line="106" pos:column="14">flags<pos:position pos:line="106" pos:column="19"/></name> <operator pos:line="106" pos:column="20">&amp;<pos:position pos:line="106" pos:column="25"/></operator> <name pos:line="106" pos:column="22">DP_F_ZERO<pos:position pos:line="106" pos:column="31"/></name><operator pos:line="106" pos:column="31">)<pos:position pos:line="106" pos:column="32"/></operator> <operator pos:line="106" pos:column="33">&amp;&amp;<pos:position pos:line="106" pos:column="43"/></operator> <operator pos:line="106" pos:column="36">(<pos:position pos:line="106" pos:column="37"/></operator><name pos:line="106" pos:column="37">padlen<pos:position pos:line="106" pos:column="43"/></name> <operator pos:line="106" pos:column="44">&gt;<pos:position pos:line="106" pos:column="48"/></operator> <literal type="number" pos:line="106" pos:column="46">0<pos:position pos:line="106" pos:column="47"/></literal><operator pos:line="106" pos:column="47">)<pos:position pos:line="106" pos:column="48"/></operator></expr>)<pos:position pos:line="106" pos:column="49"/></condition><then pos:line="106" pos:column="49"> <block pos:line="106" pos:column="50">{
		<if pos:line="107" pos:column="17">if <condition pos:line="107" pos:column="20">(<expr><name pos:line="107" pos:column="21">signvalue<pos:position pos:line="107" pos:column="30"/></name></expr>)<pos:position pos:line="107" pos:column="31"/></condition><then pos:line="107" pos:column="31"> <block pos:line="107" pos:column="32">{
			<expr_stmt><expr><call><name pos:line="108" pos:column="25">dopr_outch<pos:position pos:line="108" pos:column="35"/></name> <argument_list pos:line="108" pos:column="36">(<argument><expr><name pos:line="108" pos:column="37">buffer<pos:position pos:line="108" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="108" pos:column="45">currlen<pos:position pos:line="108" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="108" pos:column="54">maxlen<pos:position pos:line="108" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="108" pos:column="62">signvalue<pos:position pos:line="108" pos:column="71"/></name></expr></argument>)<pos:position pos:line="108" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="108" pos:column="73"/></expr_stmt>
			<expr_stmt><expr><operator pos:line="109" pos:column="25">--<pos:position pos:line="109" pos:column="27"/></operator><name pos:line="109" pos:column="27">padlen<pos:position pos:line="109" pos:column="33"/></name></expr>;<pos:position pos:line="109" pos:column="34"/></expr_stmt>
			<expr_stmt><expr><name pos:line="110" pos:column="25">signvalue<pos:position pos:line="110" pos:column="34"/></name> <operator pos:line="110" pos:column="35">=<pos:position pos:line="110" pos:column="36"/></operator> <literal type="number" pos:line="110" pos:column="37">0<pos:position pos:line="110" pos:column="38"/></literal></expr>;<pos:position pos:line="110" pos:column="39"/></expr_stmt>
		}<pos:position pos:line="111" pos:column="18"/></block></then></if>
		<while pos:line="112" pos:column="17">while <condition pos:line="112" pos:column="23">(<expr><name pos:line="112" pos:column="24">padlen<pos:position pos:line="112" pos:column="30"/></name> <operator pos:line="112" pos:column="31">&gt;<pos:position pos:line="112" pos:column="35"/></operator> <literal type="number" pos:line="112" pos:column="33">0<pos:position pos:line="112" pos:column="34"/></literal></expr>)<pos:position pos:line="112" pos:column="35"/></condition> <block pos:line="112" pos:column="36">{
			<expr_stmt><expr><call><name pos:line="113" pos:column="25">dopr_outch<pos:position pos:line="113" pos:column="35"/></name> <argument_list pos:line="113" pos:column="36">(<argument><expr><name pos:line="113" pos:column="37">buffer<pos:position pos:line="113" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="113" pos:column="45">currlen<pos:position pos:line="113" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="113" pos:column="54">maxlen<pos:position pos:line="113" pos:column="60"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="113" pos:column="62">'0'<pos:position pos:line="113" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="113" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="113" pos:column="67"/></expr_stmt>
			<expr_stmt><expr><operator pos:line="114" pos:column="25">--<pos:position pos:line="114" pos:column="27"/></operator><name pos:line="114" pos:column="27">padlen<pos:position pos:line="114" pos:column="33"/></name></expr>;<pos:position pos:line="114" pos:column="34"/></expr_stmt>
		}<pos:position pos:line="115" pos:column="18"/></block></while>
	}<pos:position pos:line="116" pos:column="10"/></block></then></if>
	<while pos:line="117" pos:column="9">while <condition pos:line="117" pos:column="15">(<expr><name pos:line="117" pos:column="16">padlen<pos:position pos:line="117" pos:column="22"/></name> <operator pos:line="117" pos:column="23">&gt;<pos:position pos:line="117" pos:column="27"/></operator> <literal type="number" pos:line="117" pos:column="25">0<pos:position pos:line="117" pos:column="26"/></literal></expr>)<pos:position pos:line="117" pos:column="27"/></condition> <block pos:line="117" pos:column="28">{
		<expr_stmt><expr><call><name pos:line="118" pos:column="17">dopr_outch<pos:position pos:line="118" pos:column="27"/></name> <argument_list pos:line="118" pos:column="28">(<argument><expr><name pos:line="118" pos:column="29">buffer<pos:position pos:line="118" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="118" pos:column="37">currlen<pos:position pos:line="118" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="118" pos:column="46">maxlen<pos:position pos:line="118" pos:column="52"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="118" pos:column="54">' '<pos:position pos:line="118" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="118" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="118" pos:column="59"/></expr_stmt>
		<expr_stmt><expr><operator pos:line="119" pos:column="17">--<pos:position pos:line="119" pos:column="19"/></operator><name pos:line="119" pos:column="19">padlen<pos:position pos:line="119" pos:column="25"/></name></expr>;<pos:position pos:line="119" pos:column="26"/></expr_stmt>
	}<pos:position pos:line="120" pos:column="10"/></block></while>
	<if pos:line="121" pos:column="9">if <condition pos:line="121" pos:column="12">(<expr><name pos:line="121" pos:column="13">signvalue<pos:position pos:line="121" pos:column="22"/></name></expr>)<pos:position pos:line="121" pos:column="23"/></condition><then pos:line="121" pos:column="23"> 
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="122" pos:column="17">dopr_outch<pos:position pos:line="122" pos:column="27"/></name> <argument_list pos:line="122" pos:column="28">(<argument><expr><name pos:line="122" pos:column="29">buffer<pos:position pos:line="122" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="122" pos:column="37">currlen<pos:position pos:line="122" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="122" pos:column="46">maxlen<pos:position pos:line="122" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="122" pos:column="54">signvalue<pos:position pos:line="122" pos:column="63"/></name></expr></argument>)<pos:position pos:line="122" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="122" pos:column="65"/></expr_stmt></block></then></if>
	
	<while pos:line="124" pos:column="9">while <condition pos:line="124" pos:column="15">(<expr><name pos:line="124" pos:column="16">iplace<pos:position pos:line="124" pos:column="22"/></name> <operator pos:line="124" pos:column="23">&gt;<pos:position pos:line="124" pos:column="27"/></operator> <literal type="number" pos:line="124" pos:column="25">0<pos:position pos:line="124" pos:column="26"/></literal></expr>)<pos:position pos:line="124" pos:column="27"/></condition> 
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="125" pos:column="17">dopr_outch<pos:position pos:line="125" pos:column="27"/></name> <argument_list pos:line="125" pos:column="28">(<argument><expr><name pos:line="125" pos:column="29">buffer<pos:position pos:line="125" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="125" pos:column="37">currlen<pos:position pos:line="125" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="125" pos:column="46">maxlen<pos:position pos:line="125" pos:column="52"/></name></expr></argument>, <argument><expr><name><name pos:line="125" pos:column="54">iconvert<pos:position pos:line="125" pos:column="62"/></name><index pos:line="125" pos:column="62">[<expr><operator pos:line="125" pos:column="63">--<pos:position pos:line="125" pos:column="65"/></operator><name pos:line="125" pos:column="65">iplace<pos:position pos:line="125" pos:column="71"/></name></expr>]<pos:position pos:line="125" pos:column="72"/></index></name></expr></argument>)<pos:position pos:line="125" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="125" pos:column="74"/></expr_stmt></block></while>

<cpp:ifdef pos:line="127" pos:column="1">#<cpp:directive pos:line="127" pos:column="2">ifdef<pos:position pos:line="127" pos:column="7"/></cpp:directive> <name pos:line="127" pos:column="8">DEBUG_SNPRINTF<pos:position pos:line="127" pos:column="22"/></name></cpp:ifdef>
	<expr_stmt><expr><call><name pos:line="128" pos:column="9">printf<pos:position pos:line="128" pos:column="15"/></name><argument_list pos:line="128" pos:column="15">(<argument><expr><literal type="string" pos:line="128" pos:column="16">"fmtfp: fplace=%d zpadlen=%d\n"<pos:position pos:line="128" pos:column="47"/></literal></expr></argument>, <argument><expr><name pos:line="128" pos:column="49">fplace<pos:position pos:line="128" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="128" pos:column="57">zpadlen<pos:position pos:line="128" pos:column="64"/></name></expr></argument>)<pos:position pos:line="128" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="128" pos:column="66"/></expr_stmt>
<cpp:endif pos:line="129" pos:column="1">#<cpp:directive pos:line="129" pos:column="2">endif<pos:position pos:line="129" pos:column="7"/></cpp:directive></cpp:endif>

	<comment type="block" pos:line="131" pos:column="9">/*
	 * Decimal point.  This should probably use locale to find the correct
	 * char to print out.
	 */</comment>
	<if pos:line="135" pos:column="9">if <condition pos:line="135" pos:column="12">(<expr><name pos:line="135" pos:column="13">max<pos:position pos:line="135" pos:column="16"/></name> <operator pos:line="135" pos:column="17">&gt;<pos:position pos:line="135" pos:column="21"/></operator> <literal type="number" pos:line="135" pos:column="19">0<pos:position pos:line="135" pos:column="20"/></literal></expr>)<pos:position pos:line="135" pos:column="21"/></condition><then pos:line="135" pos:column="21"> <block pos:line="135" pos:column="22">{
		<expr_stmt><expr><call><name pos:line="136" pos:column="17">dopr_outch<pos:position pos:line="136" pos:column="27"/></name> <argument_list pos:line="136" pos:column="28">(<argument><expr><name pos:line="136" pos:column="29">buffer<pos:position pos:line="136" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="136" pos:column="37">currlen<pos:position pos:line="136" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="136" pos:column="46">maxlen<pos:position pos:line="136" pos:column="52"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="136" pos:column="54">'.'<pos:position pos:line="136" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="136" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="136" pos:column="59"/></expr_stmt>
		
		<while pos:line="138" pos:column="17">while <condition pos:line="138" pos:column="23">(<expr><name pos:line="138" pos:column="24">zpadlen<pos:position pos:line="138" pos:column="31"/></name> <operator pos:line="138" pos:column="32">&gt;<pos:position pos:line="138" pos:column="36"/></operator> <literal type="number" pos:line="138" pos:column="34">0<pos:position pos:line="138" pos:column="35"/></literal></expr>)<pos:position pos:line="138" pos:column="36"/></condition> <block pos:line="138" pos:column="37">{
			<expr_stmt><expr><call><name pos:line="139" pos:column="25">dopr_outch<pos:position pos:line="139" pos:column="35"/></name> <argument_list pos:line="139" pos:column="36">(<argument><expr><name pos:line="139" pos:column="37">buffer<pos:position pos:line="139" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="139" pos:column="45">currlen<pos:position pos:line="139" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="139" pos:column="54">maxlen<pos:position pos:line="139" pos:column="60"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="139" pos:column="62">'0'<pos:position pos:line="139" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="139" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="139" pos:column="67"/></expr_stmt>
			<expr_stmt><expr><operator pos:line="140" pos:column="25">--<pos:position pos:line="140" pos:column="27"/></operator><name pos:line="140" pos:column="27">zpadlen<pos:position pos:line="140" pos:column="34"/></name></expr>;<pos:position pos:line="140" pos:column="35"/></expr_stmt>
		}<pos:position pos:line="141" pos:column="18"/></block></while>

		<while pos:line="143" pos:column="17">while <condition pos:line="143" pos:column="23">(<expr><name pos:line="143" pos:column="24">fplace<pos:position pos:line="143" pos:column="30"/></name> <operator pos:line="143" pos:column="31">&gt;<pos:position pos:line="143" pos:column="35"/></operator> <literal type="number" pos:line="143" pos:column="33">0<pos:position pos:line="143" pos:column="34"/></literal></expr>)<pos:position pos:line="143" pos:column="35"/></condition> 
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="144" pos:column="25">dopr_outch<pos:position pos:line="144" pos:column="35"/></name> <argument_list pos:line="144" pos:column="36">(<argument><expr><name pos:line="144" pos:column="37">buffer<pos:position pos:line="144" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="144" pos:column="45">currlen<pos:position pos:line="144" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="144" pos:column="54">maxlen<pos:position pos:line="144" pos:column="60"/></name></expr></argument>, <argument><expr><name><name pos:line="144" pos:column="62">fconvert<pos:position pos:line="144" pos:column="70"/></name><index pos:line="144" pos:column="70">[<expr><operator pos:line="144" pos:column="71">--<pos:position pos:line="144" pos:column="73"/></operator><name pos:line="144" pos:column="73">fplace<pos:position pos:line="144" pos:column="79"/></name></expr>]<pos:position pos:line="144" pos:column="80"/></index></name></expr></argument>)<pos:position pos:line="144" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="144" pos:column="82"/></expr_stmt></block></while>
	}<pos:position pos:line="145" pos:column="10"/></block></then></if>

	<while pos:line="147" pos:column="9">while <condition pos:line="147" pos:column="15">(<expr><name pos:line="147" pos:column="16">padlen<pos:position pos:line="147" pos:column="22"/></name> <operator pos:line="147" pos:column="23">&lt;<pos:position pos:line="147" pos:column="27"/></operator> <literal type="number" pos:line="147" pos:column="25">0<pos:position pos:line="147" pos:column="26"/></literal></expr>)<pos:position pos:line="147" pos:column="27"/></condition> <block pos:line="147" pos:column="28">{
		<expr_stmt><expr><call><name pos:line="148" pos:column="17">dopr_outch<pos:position pos:line="148" pos:column="27"/></name> <argument_list pos:line="148" pos:column="28">(<argument><expr><name pos:line="148" pos:column="29">buffer<pos:position pos:line="148" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="148" pos:column="37">currlen<pos:position pos:line="148" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="148" pos:column="46">maxlen<pos:position pos:line="148" pos:column="52"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="148" pos:column="54">' '<pos:position pos:line="148" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="148" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="148" pos:column="59"/></expr_stmt>
		<expr_stmt><expr><operator pos:line="149" pos:column="17">++<pos:position pos:line="149" pos:column="19"/></operator><name pos:line="149" pos:column="19">padlen<pos:position pos:line="149" pos:column="25"/></name></expr>;<pos:position pos:line="149" pos:column="26"/></expr_stmt>
	}<pos:position pos:line="150" pos:column="10"/></block></while>
}<pos:position pos:line="151" pos:column="2"/></block></function></unit>
