<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_function_918.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">rsync_module<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name pos:line="1" pos:column="25">int<pos:position pos:line="1" pos:column="28"/></name></type> <name pos:line="1" pos:column="29">f_in<pos:position pos:line="1" pos:column="33"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="35">int<pos:position pos:line="1" pos:column="38"/></name></type> <name pos:line="1" pos:column="39">f_out<pos:position pos:line="1" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="46">int<pos:position pos:line="1" pos:column="49"/></name></type> <name pos:line="1" pos:column="50">i<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="53">char<pos:position pos:line="1" pos:column="57"/></name> <modifier pos:line="1" pos:column="58">*<pos:position pos:line="1" pos:column="59"/></modifier></type><name pos:line="1" pos:column="59">addr<pos:position pos:line="1" pos:column="63"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="65">char<pos:position pos:line="1" pos:column="69"/></name> <modifier pos:line="1" pos:column="70">*<pos:position pos:line="1" pos:column="71"/></modifier></type><name pos:line="1" pos:column="71">host<pos:position pos:line="1" pos:column="75"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="76"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">argc<pos:position pos:line="3" pos:column="17"/></name></decl>;<pos:position pos:line="3" pos:column="18"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier><modifier pos:line="4" pos:column="15">*<pos:position pos:line="4" pos:column="16"/></modifier></type><name pos:line="4" pos:column="16">argv<pos:position pos:line="4" pos:column="20"/></name></decl>, <modifier pos:line="4" pos:column="22">*<pos:position pos:line="4" pos:column="23"/></modifier><modifier pos:line="4" pos:column="23">*<pos:position pos:line="4" pos:column="24"/></modifier><decl><type ref="prev"/><name pos:line="4" pos:column="24">orig_argv<pos:position pos:line="4" pos:column="33"/></name></decl>, <modifier pos:line="4" pos:column="35">*<pos:position pos:line="4" pos:column="36"/></modifier><modifier pos:line="4" pos:column="36">*<pos:position pos:line="4" pos:column="37"/></modifier><decl><type ref="prev"/><name pos:line="4" pos:column="37">orig_early_argv<pos:position pos:line="4" pos:column="52"/></name></decl>, <modifier pos:line="4" pos:column="54">*<pos:position pos:line="4" pos:column="55"/></modifier><decl><type ref="prev"/><name pos:line="4" pos:column="55">module_chdir<pos:position pos:line="4" pos:column="67"/></name></decl>;<pos:position pos:line="4" pos:column="68"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">char<pos:position pos:line="5" pos:column="13"/></name></type> <name><name pos:line="5" pos:column="14">line<pos:position pos:line="5" pos:column="18"/></name><index pos:line="5" pos:column="18">[<expr><name pos:line="5" pos:column="19">BIGPATHBUFLEN<pos:position pos:line="5" pos:column="32"/></name></expr>]<pos:position pos:line="5" pos:column="33"/></index></name></decl>;<pos:position pos:line="5" pos:column="34"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">uid_t<pos:position pos:line="6" pos:column="14"/></name></type> <name pos:line="6" pos:column="15">uid<pos:position pos:line="6" pos:column="18"/></name> <init pos:line="6" pos:column="19">= <expr><operator pos:line="6" pos:column="21">(<pos:position pos:line="6" pos:column="22"/></operator><name pos:line="6" pos:column="22">uid_t<pos:position pos:line="6" pos:column="27"/></name><operator pos:line="6" pos:column="27">)<pos:position pos:line="6" pos:column="28"/></operator><operator pos:line="6" pos:column="28">-<pos:position pos:line="6" pos:column="29"/></operator><literal type="number" pos:line="6" pos:column="29">2<pos:position pos:line="6" pos:column="30"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="31"/></decl_stmt>  <comment type="block" pos:line="6" pos:column="33">/* canonically "nobody" */</comment>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">gid_t<pos:position pos:line="7" pos:column="14"/></name></type> <name pos:line="7" pos:column="15">gid<pos:position pos:line="7" pos:column="18"/></name> <init pos:line="7" pos:column="19">= <expr><operator pos:line="7" pos:column="21">(<pos:position pos:line="7" pos:column="22"/></operator><name pos:line="7" pos:column="22">gid_t<pos:position pos:line="7" pos:column="27"/></name><operator pos:line="7" pos:column="27">)<pos:position pos:line="7" pos:column="28"/></operator><operator pos:line="7" pos:column="28">-<pos:position pos:line="7" pos:column="29"/></operator><literal type="number" pos:line="7" pos:column="29">2<pos:position pos:line="7" pos:column="30"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">char<pos:position pos:line="8" pos:column="13"/></name> <modifier pos:line="8" pos:column="14">*<pos:position pos:line="8" pos:column="15"/></modifier></type><name pos:line="8" pos:column="15">p<pos:position pos:line="8" pos:column="16"/></name></decl>, <modifier pos:line="8" pos:column="18">*<pos:position pos:line="8" pos:column="19"/></modifier><decl><type ref="prev"/><name pos:line="8" pos:column="19">err_msg<pos:position pos:line="8" pos:column="26"/></name> <init pos:line="8" pos:column="27">= <expr><name pos:line="8" pos:column="29">NULL<pos:position pos:line="8" pos:column="33"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="34"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="9" pos:column="9">char<pos:position pos:line="9" pos:column="13"/></name> <modifier pos:line="9" pos:column="14">*<pos:position pos:line="9" pos:column="15"/></modifier></type><name pos:line="9" pos:column="15">name<pos:position pos:line="9" pos:column="19"/></name> <init pos:line="9" pos:column="20">= <expr><call><name pos:line="9" pos:column="22">lp_name<pos:position pos:line="9" pos:column="29"/></name><argument_list pos:line="9" pos:column="29">(<argument><expr><name pos:line="9" pos:column="30">i<pos:position pos:line="9" pos:column="31"/></name></expr></argument>)<pos:position pos:line="9" pos:column="32"/></argument_list></call></expr></init></decl>;<pos:position pos:line="9" pos:column="33"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="10" pos:column="9">int<pos:position pos:line="10" pos:column="12"/></name></type> <name pos:line="10" pos:column="13">use_chroot<pos:position pos:line="10" pos:column="23"/></name> <init pos:line="10" pos:column="24">= <expr><call><name pos:line="10" pos:column="26">lp_use_chroot<pos:position pos:line="10" pos:column="39"/></name><argument_list pos:line="10" pos:column="39">(<argument><expr><name pos:line="10" pos:column="40">i<pos:position pos:line="10" pos:column="41"/></name></expr></argument>)<pos:position pos:line="10" pos:column="42"/></argument_list></call></expr></init></decl>;<pos:position pos:line="10" pos:column="43"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="11" pos:column="9">int<pos:position pos:line="11" pos:column="12"/></name></type> <name pos:line="11" pos:column="13">ret<pos:position pos:line="11" pos:column="16"/></name></decl>, <decl><type ref="prev"/><name pos:line="11" pos:column="18">pre_exec_fd<pos:position pos:line="11" pos:column="29"/></name> <init pos:line="11" pos:column="30">= <expr><operator pos:line="11" pos:column="32">-<pos:position pos:line="11" pos:column="33"/></operator><literal type="number" pos:line="11" pos:column="33">1<pos:position pos:line="11" pos:column="34"/></literal></expr></init></decl>;<pos:position pos:line="11" pos:column="35"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="12" pos:column="9">pid_t<pos:position pos:line="12" pos:column="14"/></name></type> <name pos:line="12" pos:column="15">pre_exec_pid<pos:position pos:line="12" pos:column="27"/></name> <init pos:line="12" pos:column="28">= <expr><literal type="number" pos:line="12" pos:column="30">0<pos:position pos:line="12" pos:column="31"/></literal></expr></init></decl>;<pos:position pos:line="12" pos:column="32"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="13" pos:column="9">char<pos:position pos:line="13" pos:column="13"/></name> <modifier pos:line="13" pos:column="14">*<pos:position pos:line="13" pos:column="15"/></modifier></type><name pos:line="13" pos:column="15">request<pos:position pos:line="13" pos:column="22"/></name> <init pos:line="13" pos:column="23">= <expr><name pos:line="13" pos:column="25">NULL<pos:position pos:line="13" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="13" pos:column="30"/></decl_stmt>

<cpp:ifdef pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">ifdef<pos:position pos:line="15" pos:column="7"/></cpp:directive> <name pos:line="15" pos:column="8">ICONV_OPTION<pos:position pos:line="15" pos:column="20"/></name></cpp:ifdef>
	<expr_stmt><expr><name pos:line="16" pos:column="9">iconv_opt<pos:position pos:line="16" pos:column="18"/></name> <operator pos:line="16" pos:column="19">=<pos:position pos:line="16" pos:column="20"/></operator> <call><name pos:line="16" pos:column="21">lp_charset<pos:position pos:line="16" pos:column="31"/></name><argument_list pos:line="16" pos:column="31">(<argument><expr><name pos:line="16" pos:column="32">i<pos:position pos:line="16" pos:column="33"/></name></expr></argument>)<pos:position pos:line="16" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="35"/></expr_stmt>
	<if pos:line="17" pos:column="9">if <condition pos:line="17" pos:column="12">(<expr><operator pos:line="17" pos:column="13">*<pos:position pos:line="17" pos:column="14"/></operator><name pos:line="17" pos:column="14">iconv_opt<pos:position pos:line="17" pos:column="23"/></name></expr>)<pos:position pos:line="17" pos:column="24"/></condition><then pos:line="17" pos:column="24">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="18" pos:column="17">setup_iconv<pos:position pos:line="18" pos:column="28"/></name><argument_list pos:line="18" pos:column="28">()<pos:position pos:line="18" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="31"/></expr_stmt></block></then></if>
	<expr_stmt><expr><name pos:line="19" pos:column="9">iconv_opt<pos:position pos:line="19" pos:column="18"/></name> <operator pos:line="19" pos:column="19">=<pos:position pos:line="19" pos:column="20"/></operator> <name pos:line="19" pos:column="21">NULL<pos:position pos:line="19" pos:column="25"/></name></expr>;<pos:position pos:line="19" pos:column="26"/></expr_stmt>
<cpp:endif pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">endif<pos:position pos:line="20" pos:column="7"/></cpp:directive></cpp:endif>

	<if pos:line="22" pos:column="9">if <condition pos:line="22" pos:column="12">(<expr><operator pos:line="22" pos:column="13">!<pos:position pos:line="22" pos:column="14"/></operator><call><name pos:line="22" pos:column="14">allow_access<pos:position pos:line="22" pos:column="26"/></name><argument_list pos:line="22" pos:column="26">(<argument><expr><name pos:line="22" pos:column="27">addr<pos:position pos:line="22" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="33">host<pos:position pos:line="22" pos:column="37"/></name></expr></argument>, <argument><expr><call><name pos:line="22" pos:column="39">lp_hosts_allow<pos:position pos:line="22" pos:column="53"/></name><argument_list pos:line="22" pos:column="53">(<argument><expr><name pos:line="22" pos:column="54">i<pos:position pos:line="22" pos:column="55"/></name></expr></argument>)<pos:position pos:line="22" pos:column="56"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="22" pos:column="58">lp_hosts_deny<pos:position pos:line="22" pos:column="71"/></name><argument_list pos:line="22" pos:column="71">(<argument><expr><name pos:line="22" pos:column="72">i<pos:position pos:line="22" pos:column="73"/></name></expr></argument>)<pos:position pos:line="22" pos:column="74"/></argument_list></call></expr></argument>)<pos:position pos:line="22" pos:column="75"/></argument_list></call></expr>)<pos:position pos:line="22" pos:column="76"/></condition><then pos:line="22" pos:column="76"> <block pos:line="22" pos:column="77">{
		<expr_stmt><expr><call><name pos:line="23" pos:column="17">rprintf<pos:position pos:line="23" pos:column="24"/></name><argument_list pos:line="23" pos:column="24">(<argument><expr><name pos:line="23" pos:column="25">FLOG<pos:position pos:line="23" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="23" pos:column="31">"rsync denied on module %s from %s (%s)\n"<pos:position pos:line="23" pos:column="73"/></literal></expr></argument>,
			<argument><expr><name pos:line="24" pos:column="25">name<pos:position pos:line="24" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="31">host<pos:position pos:line="24" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="37">addr<pos:position pos:line="24" pos:column="41"/></name></expr></argument>)<pos:position pos:line="24" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="43"/></expr_stmt>
		<if pos:line="25" pos:column="17">if <condition pos:line="25" pos:column="20">(<expr><operator pos:line="25" pos:column="21">!<pos:position pos:line="25" pos:column="22"/></operator><call><name pos:line="25" pos:column="22">lp_list<pos:position pos:line="25" pos:column="29"/></name><argument_list pos:line="25" pos:column="29">(<argument><expr><name pos:line="25" pos:column="30">i<pos:position pos:line="25" pos:column="31"/></name></expr></argument>)<pos:position pos:line="25" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="25" pos:column="33"/></condition><then pos:line="25" pos:column="33">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="26" pos:column="25">io_printf<pos:position pos:line="26" pos:column="34"/></name><argument_list pos:line="26" pos:column="34">(<argument><expr><name pos:line="26" pos:column="35">f_out<pos:position pos:line="26" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="26" pos:column="42">"@ERROR: Unknown module '%s'\n"<pos:position pos:line="26" pos:column="73"/></literal></expr></argument>, <argument><expr><name pos:line="26" pos:column="75">name<pos:position pos:line="26" pos:column="79"/></name></expr></argument>)<pos:position pos:line="26" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="81"/></expr_stmt></block></then>
		<else pos:line="27" pos:column="17">else <block pos:line="27" pos:column="22">{
			<expr_stmt><expr><call><name pos:line="28" pos:column="25">io_printf<pos:position pos:line="28" pos:column="34"/></name><argument_list pos:line="28" pos:column="34">(<argument><expr><name pos:line="28" pos:column="35">f_out<pos:position pos:line="28" pos:column="40"/></name></expr></argument>,
				  <argument><expr><literal type="string" pos:line="29" pos:column="35">"@ERROR: access denied to %s from %s (%s)\n"<pos:position pos:line="29" pos:column="79"/></literal></expr></argument>,
				  <argument><expr><name pos:line="30" pos:column="35">name<pos:position pos:line="30" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="41">host<pos:position pos:line="30" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="47">addr<pos:position pos:line="30" pos:column="51"/></name></expr></argument>)<pos:position pos:line="30" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="53"/></expr_stmt>
		}<pos:position pos:line="31" pos:column="18"/></block></else></if>
		<return pos:line="32" pos:column="17">return <expr><operator pos:line="32" pos:column="24">-<pos:position pos:line="32" pos:column="25"/></operator><literal type="number" pos:line="32" pos:column="25">1<pos:position pos:line="32" pos:column="26"/></literal></expr>;<pos:position pos:line="32" pos:column="27"/></return>
	}<pos:position pos:line="33" pos:column="10"/></block></then></if>

	<if pos:line="35" pos:column="9">if <condition pos:line="35" pos:column="12">(<expr><name pos:line="35" pos:column="13">am_daemon<pos:position pos:line="35" pos:column="22"/></name> <operator pos:line="35" pos:column="23">&amp;&amp;<pos:position pos:line="35" pos:column="33"/></operator> <name pos:line="35" pos:column="26">am_server<pos:position pos:line="35" pos:column="35"/></name></expr>)<pos:position pos:line="35" pos:column="36"/></condition><then pos:line="35" pos:column="36"> <block pos:line="35" pos:column="37">{
		<expr_stmt><expr><call><name pos:line="36" pos:column="17">rprintf<pos:position pos:line="36" pos:column="24"/></name><argument_list pos:line="36" pos:column="24">(<argument><expr><name pos:line="36" pos:column="25">FLOG<pos:position pos:line="36" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="36" pos:column="31">"rsync allowed access on module %s from %s (%s)\n"<pos:position pos:line="36" pos:column="81"/></literal></expr></argument>,
			<argument><expr><name pos:line="37" pos:column="25">name<pos:position pos:line="37" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="31">host<pos:position pos:line="37" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="37">addr<pos:position pos:line="37" pos:column="41"/></name></expr></argument>)<pos:position pos:line="37" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="43"/></expr_stmt>
	}<pos:position pos:line="38" pos:column="10"/></block></then></if>

	<if pos:line="40" pos:column="9">if <condition pos:line="40" pos:column="12">(<expr><operator pos:line="40" pos:column="13">!<pos:position pos:line="40" pos:column="14"/></operator><call><name pos:line="40" pos:column="14">claim_connection<pos:position pos:line="40" pos:column="30"/></name><argument_list pos:line="40" pos:column="30">(<argument><expr><call><name pos:line="40" pos:column="31">lp_lock_file<pos:position pos:line="40" pos:column="43"/></name><argument_list pos:line="40" pos:column="43">(<argument><expr><name pos:line="40" pos:column="44">i<pos:position pos:line="40" pos:column="45"/></name></expr></argument>)<pos:position pos:line="40" pos:column="46"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="40" pos:column="48">lp_max_connections<pos:position pos:line="40" pos:column="66"/></name><argument_list pos:line="40" pos:column="66">(<argument><expr><name pos:line="40" pos:column="67">i<pos:position pos:line="40" pos:column="68"/></name></expr></argument>)<pos:position pos:line="40" pos:column="69"/></argument_list></call></expr></argument>)<pos:position pos:line="40" pos:column="70"/></argument_list></call></expr>)<pos:position pos:line="40" pos:column="71"/></condition><then pos:line="40" pos:column="71"> <block pos:line="40" pos:column="72">{
		<if pos:line="41" pos:column="17">if <condition pos:line="41" pos:column="20">(<expr><name pos:line="41" pos:column="21">errno<pos:position pos:line="41" pos:column="26"/></name></expr>)<pos:position pos:line="41" pos:column="27"/></condition><then pos:line="41" pos:column="27"> <block pos:line="41" pos:column="28">{
			<expr_stmt><expr><call><name pos:line="42" pos:column="25">rsyserr<pos:position pos:line="42" pos:column="32"/></name><argument_list pos:line="42" pos:column="32">(<argument><expr><name pos:line="42" pos:column="33">FLOG<pos:position pos:line="42" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="39">errno<pos:position pos:line="42" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="42" pos:column="46">"failed to open lock file %s"<pos:position pos:line="42" pos:column="75"/></literal></expr></argument>,
				<argument><expr><call><name pos:line="43" pos:column="33">lp_lock_file<pos:position pos:line="43" pos:column="45"/></name><argument_list pos:line="43" pos:column="45">(<argument><expr><name pos:line="43" pos:column="46">i<pos:position pos:line="43" pos:column="47"/></name></expr></argument>)<pos:position pos:line="43" pos:column="48"/></argument_list></call></expr></argument>)<pos:position pos:line="43" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="50"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="44" pos:column="25">io_printf<pos:position pos:line="44" pos:column="34"/></name><argument_list pos:line="44" pos:column="34">(<argument><expr><name pos:line="44" pos:column="35">f_out<pos:position pos:line="44" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="44" pos:column="42">"@ERROR: failed to open lock file\n"<pos:position pos:line="44" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="80"/></expr_stmt>
		}<pos:position pos:line="45" pos:column="18"/></block></then> <else pos:line="45" pos:column="19">else <block pos:line="45" pos:column="24">{
			<expr_stmt><expr><call><name pos:line="46" pos:column="25">rprintf<pos:position pos:line="46" pos:column="32"/></name><argument_list pos:line="46" pos:column="32">(<argument><expr><name pos:line="46" pos:column="33">FLOG<pos:position pos:line="46" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="46" pos:column="39">"max connections (%d) reached\n"<pos:position pos:line="46" pos:column="71"/></literal></expr></argument>,
				<argument><expr><call><name pos:line="47" pos:column="33">lp_max_connections<pos:position pos:line="47" pos:column="51"/></name><argument_list pos:line="47" pos:column="51">(<argument><expr><name pos:line="47" pos:column="52">i<pos:position pos:line="47" pos:column="53"/></name></expr></argument>)<pos:position pos:line="47" pos:column="54"/></argument_list></call></expr></argument>)<pos:position pos:line="47" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="56"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="48" pos:column="25">io_printf<pos:position pos:line="48" pos:column="34"/></name><argument_list pos:line="48" pos:column="34">(<argument><expr><name pos:line="48" pos:column="35">f_out<pos:position pos:line="48" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="48" pos:column="42">"@ERROR: max connections (%d) reached -- try again later\n"<pos:position pos:line="48" pos:column="101"/></literal></expr></argument>,
				<argument><expr><call><name pos:line="49" pos:column="33">lp_max_connections<pos:position pos:line="49" pos:column="51"/></name><argument_list pos:line="49" pos:column="51">(<argument><expr><name pos:line="49" pos:column="52">i<pos:position pos:line="49" pos:column="53"/></name></expr></argument>)<pos:position pos:line="49" pos:column="54"/></argument_list></call></expr></argument>)<pos:position pos:line="49" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="56"/></expr_stmt>
		}<pos:position pos:line="50" pos:column="18"/></block></else></if>
		<return pos:line="51" pos:column="17">return <expr><operator pos:line="51" pos:column="24">-<pos:position pos:line="51" pos:column="25"/></operator><literal type="number" pos:line="51" pos:column="25">1<pos:position pos:line="51" pos:column="26"/></literal></expr>;<pos:position pos:line="51" pos:column="27"/></return>
	}<pos:position pos:line="52" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="54" pos:column="9">auth_user<pos:position pos:line="54" pos:column="18"/></name> <operator pos:line="54" pos:column="19">=<pos:position pos:line="54" pos:column="20"/></operator> <call><name pos:line="54" pos:column="21">auth_server<pos:position pos:line="54" pos:column="32"/></name><argument_list pos:line="54" pos:column="32">(<argument><expr><name pos:line="54" pos:column="33">f_in<pos:position pos:line="54" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="39">f_out<pos:position pos:line="54" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="46">i<pos:position pos:line="54" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="49">host<pos:position pos:line="54" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="55">addr<pos:position pos:line="54" pos:column="59"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="54" pos:column="61">"@RSYNCD: AUTHREQD "<pos:position pos:line="54" pos:column="81"/></literal></expr></argument>)<pos:position pos:line="54" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="83"/></expr_stmt>

	<if pos:line="56" pos:column="9">if <condition pos:line="56" pos:column="12">(<expr><operator pos:line="56" pos:column="13">!<pos:position pos:line="56" pos:column="14"/></operator><name pos:line="56" pos:column="14">auth_user<pos:position pos:line="56" pos:column="23"/></name></expr>)<pos:position pos:line="56" pos:column="24"/></condition><then pos:line="56" pos:column="24"> <block pos:line="56" pos:column="25">{
		<expr_stmt><expr><call><name pos:line="57" pos:column="17">io_printf<pos:position pos:line="57" pos:column="26"/></name><argument_list pos:line="57" pos:column="26">(<argument><expr><name pos:line="57" pos:column="27">f_out<pos:position pos:line="57" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="57" pos:column="34">"@ERROR: auth failed on module %s\n"<pos:position pos:line="57" pos:column="70"/></literal></expr></argument>, <argument><expr><name pos:line="57" pos:column="72">name<pos:position pos:line="57" pos:column="76"/></name></expr></argument>)<pos:position pos:line="57" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="78"/></expr_stmt>
		<return pos:line="58" pos:column="17">return <expr><operator pos:line="58" pos:column="24">-<pos:position pos:line="58" pos:column="25"/></operator><literal type="number" pos:line="58" pos:column="25">1<pos:position pos:line="58" pos:column="26"/></literal></expr>;<pos:position pos:line="58" pos:column="27"/></return>
	}<pos:position pos:line="59" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="61" pos:column="9">module_id<pos:position pos:line="61" pos:column="18"/></name> <operator pos:line="61" pos:column="19">=<pos:position pos:line="61" pos:column="20"/></operator> <name pos:line="61" pos:column="21">i<pos:position pos:line="61" pos:column="22"/></name></expr>;<pos:position pos:line="61" pos:column="23"/></expr_stmt>

	<if pos:line="63" pos:column="9">if <condition pos:line="63" pos:column="12">(<expr><call><name pos:line="63" pos:column="13">lp_read_only<pos:position pos:line="63" pos:column="25"/></name><argument_list pos:line="63" pos:column="25">(<argument><expr><name pos:line="63" pos:column="26">i<pos:position pos:line="63" pos:column="27"/></name></expr></argument>)<pos:position pos:line="63" pos:column="28"/></argument_list></call></expr>)<pos:position pos:line="63" pos:column="29"/></condition><then pos:line="63" pos:column="29">
		<block type="pseudo"><expr_stmt><expr><name pos:line="64" pos:column="17">read_only<pos:position pos:line="64" pos:column="26"/></name> <operator pos:line="64" pos:column="27">=<pos:position pos:line="64" pos:column="28"/></operator> <literal type="number" pos:line="64" pos:column="29">1<pos:position pos:line="64" pos:column="30"/></literal></expr>;<pos:position pos:line="64" pos:column="31"/></expr_stmt></block></then></if>

	<if pos:line="66" pos:column="9">if <condition pos:line="66" pos:column="12">(<expr><call><name pos:line="66" pos:column="13">lp_transfer_logging<pos:position pos:line="66" pos:column="32"/></name><argument_list pos:line="66" pos:column="32">(<argument><expr><name pos:line="66" pos:column="33">i<pos:position pos:line="66" pos:column="34"/></name></expr></argument>)<pos:position pos:line="66" pos:column="35"/></argument_list></call> <operator pos:line="66" pos:column="36">&amp;&amp;<pos:position pos:line="66" pos:column="46"/></operator> <operator pos:line="66" pos:column="39">!<pos:position pos:line="66" pos:column="40"/></operator><name pos:line="66" pos:column="40">logfile_format<pos:position pos:line="66" pos:column="54"/></name></expr>)<pos:position pos:line="66" pos:column="55"/></condition><then pos:line="66" pos:column="55">
		<block type="pseudo"><expr_stmt><expr><name pos:line="67" pos:column="17">logfile_format<pos:position pos:line="67" pos:column="31"/></name> <operator pos:line="67" pos:column="32">=<pos:position pos:line="67" pos:column="33"/></operator> <call><name pos:line="67" pos:column="34">lp_log_format<pos:position pos:line="67" pos:column="47"/></name><argument_list pos:line="67" pos:column="47">(<argument><expr><name pos:line="67" pos:column="48">i<pos:position pos:line="67" pos:column="49"/></name></expr></argument>)<pos:position pos:line="67" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="51"/></expr_stmt></block></then></if>
	<if pos:line="68" pos:column="9">if <condition pos:line="68" pos:column="12">(<expr><call><name pos:line="68" pos:column="13">log_format_has<pos:position pos:line="68" pos:column="27"/></name><argument_list pos:line="68" pos:column="27">(<argument><expr><name pos:line="68" pos:column="28">logfile_format<pos:position pos:line="68" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="68" pos:column="44">'i'<pos:position pos:line="68" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="68" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="68" pos:column="49"/></condition><then pos:line="68" pos:column="49">
		<block type="pseudo"><expr_stmt><expr><name pos:line="69" pos:column="17">logfile_format_has_i<pos:position pos:line="69" pos:column="37"/></name> <operator pos:line="69" pos:column="38">=<pos:position pos:line="69" pos:column="39"/></operator> <literal type="number" pos:line="69" pos:column="40">1<pos:position pos:line="69" pos:column="41"/></literal></expr>;<pos:position pos:line="69" pos:column="42"/></expr_stmt></block></then></if>
	<if pos:line="70" pos:column="9">if <condition pos:line="70" pos:column="12">(<expr><name pos:line="70" pos:column="13">logfile_format_has_i<pos:position pos:line="70" pos:column="33"/></name> <operator pos:line="70" pos:column="34">||<pos:position pos:line="70" pos:column="36"/></operator> <call><name pos:line="70" pos:column="37">log_format_has<pos:position pos:line="70" pos:column="51"/></name><argument_list pos:line="70" pos:column="51">(<argument><expr><name pos:line="70" pos:column="52">logfile_format<pos:position pos:line="70" pos:column="66"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="70" pos:column="68">'o'<pos:position pos:line="70" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="70" pos:column="72"/></argument_list></call></expr>)<pos:position pos:line="70" pos:column="73"/></condition><then pos:line="70" pos:column="73">
		<block type="pseudo"><expr_stmt><expr><name pos:line="71" pos:column="17">logfile_format_has_o_or_i<pos:position pos:line="71" pos:column="42"/></name> <operator pos:line="71" pos:column="43">=<pos:position pos:line="71" pos:column="44"/></operator> <literal type="number" pos:line="71" pos:column="45">1<pos:position pos:line="71" pos:column="46"/></literal></expr>;<pos:position pos:line="71" pos:column="47"/></expr_stmt></block></then></if>

	<expr_stmt><expr><name pos:line="73" pos:column="9">am_root<pos:position pos:line="73" pos:column="16"/></name> <operator pos:line="73" pos:column="17">=<pos:position pos:line="73" pos:column="18"/></operator> <operator pos:line="73" pos:column="19">(<pos:position pos:line="73" pos:column="20"/></operator><call><name pos:line="73" pos:column="20">MY_UID<pos:position pos:line="73" pos:column="26"/></name><argument_list pos:line="73" pos:column="26">()<pos:position pos:line="73" pos:column="28"/></argument_list></call> <operator pos:line="73" pos:column="29">==<pos:position pos:line="73" pos:column="31"/></operator> <literal type="number" pos:line="73" pos:column="32">0<pos:position pos:line="73" pos:column="33"/></literal><operator pos:line="73" pos:column="33">)<pos:position pos:line="73" pos:column="34"/></operator></expr>;<pos:position pos:line="73" pos:column="35"/></expr_stmt>

	<if pos:line="75" pos:column="9">if <condition pos:line="75" pos:column="12">(<expr><name pos:line="75" pos:column="13">am_root<pos:position pos:line="75" pos:column="20"/></name></expr>)<pos:position pos:line="75" pos:column="21"/></condition><then pos:line="75" pos:column="21"> <block pos:line="75" pos:column="22">{
		<expr_stmt><expr><name pos:line="76" pos:column="17">p<pos:position pos:line="76" pos:column="18"/></name> <operator pos:line="76" pos:column="19">=<pos:position pos:line="76" pos:column="20"/></operator> <call><name pos:line="76" pos:column="21">lp_uid<pos:position pos:line="76" pos:column="27"/></name><argument_list pos:line="76" pos:column="27">(<argument><expr><name pos:line="76" pos:column="28">i<pos:position pos:line="76" pos:column="29"/></name></expr></argument>)<pos:position pos:line="76" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="31"/></expr_stmt>
		<if pos:line="77" pos:column="17">if <condition pos:line="77" pos:column="20">(<expr><operator pos:line="77" pos:column="21">!<pos:position pos:line="77" pos:column="22"/></operator><call><name pos:line="77" pos:column="22">name_to_uid<pos:position pos:line="77" pos:column="33"/></name><argument_list pos:line="77" pos:column="33">(<argument><expr><name pos:line="77" pos:column="34">p<pos:position pos:line="77" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="77" pos:column="37">&amp;<pos:position pos:line="77" pos:column="42"/></operator><name pos:line="77" pos:column="38">uid<pos:position pos:line="77" pos:column="41"/></name></expr></argument>)<pos:position pos:line="77" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="77" pos:column="43"/></condition><then pos:line="77" pos:column="43"> <block pos:line="77" pos:column="44">{
			<if pos:line="78" pos:column="25">if <condition pos:line="78" pos:column="28">(<expr><operator pos:line="78" pos:column="29">!<pos:position pos:line="78" pos:column="30"/></operator><call><name pos:line="78" pos:column="30">isDigit<pos:position pos:line="78" pos:column="37"/></name><argument_list pos:line="78" pos:column="37">(<argument><expr><name pos:line="78" pos:column="38">p<pos:position pos:line="78" pos:column="39"/></name></expr></argument>)<pos:position pos:line="78" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="78" pos:column="41"/></condition><then pos:line="78" pos:column="41"> <block pos:line="78" pos:column="42">{
				<expr_stmt><expr><call><name pos:line="79" pos:column="33">rprintf<pos:position pos:line="79" pos:column="40"/></name><argument_list pos:line="79" pos:column="40">(<argument><expr><name pos:line="79" pos:column="41">FLOG<pos:position pos:line="79" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="79" pos:column="47">"Invalid uid %s\n"<pos:position pos:line="79" pos:column="65"/></literal></expr></argument>, <argument><expr><name pos:line="79" pos:column="67">p<pos:position pos:line="79" pos:column="68"/></name></expr></argument>)<pos:position pos:line="79" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="70"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="80" pos:column="33">io_printf<pos:position pos:line="80" pos:column="42"/></name><argument_list pos:line="80" pos:column="42">(<argument><expr><name pos:line="80" pos:column="43">f_out<pos:position pos:line="80" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="80" pos:column="50">"@ERROR: invalid uid %s\n"<pos:position pos:line="80" pos:column="76"/></literal></expr></argument>, <argument><expr><name pos:line="80" pos:column="78">p<pos:position pos:line="80" pos:column="79"/></name></expr></argument>)<pos:position pos:line="80" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="81"/></expr_stmt>
				<return pos:line="81" pos:column="33">return <expr><operator pos:line="81" pos:column="40">-<pos:position pos:line="81" pos:column="41"/></operator><literal type="number" pos:line="81" pos:column="41">1<pos:position pos:line="81" pos:column="42"/></literal></expr>;<pos:position pos:line="81" pos:column="43"/></return>
			}<pos:position pos:line="82" pos:column="26"/></block></then></if>
			<expr_stmt><expr><name pos:line="83" pos:column="25">uid<pos:position pos:line="83" pos:column="28"/></name> <operator pos:line="83" pos:column="29">=<pos:position pos:line="83" pos:column="30"/></operator> <call><name pos:line="83" pos:column="31">atoi<pos:position pos:line="83" pos:column="35"/></name><argument_list pos:line="83" pos:column="35">(<argument><expr><name pos:line="83" pos:column="36">p<pos:position pos:line="83" pos:column="37"/></name></expr></argument>)<pos:position pos:line="83" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="39"/></expr_stmt>
		}<pos:position pos:line="84" pos:column="18"/></block></then></if>

		<expr_stmt><expr><name pos:line="86" pos:column="17">p<pos:position pos:line="86" pos:column="18"/></name> <operator pos:line="86" pos:column="19">=<pos:position pos:line="86" pos:column="20"/></operator> <call><name pos:line="86" pos:column="21">lp_gid<pos:position pos:line="86" pos:column="27"/></name><argument_list pos:line="86" pos:column="27">(<argument><expr><name pos:line="86" pos:column="28">i<pos:position pos:line="86" pos:column="29"/></name></expr></argument>)<pos:position pos:line="86" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="31"/></expr_stmt>
		<if pos:line="87" pos:column="17">if <condition pos:line="87" pos:column="20">(<expr><operator pos:line="87" pos:column="21">!<pos:position pos:line="87" pos:column="22"/></operator><call><name pos:line="87" pos:column="22">name_to_gid<pos:position pos:line="87" pos:column="33"/></name><argument_list pos:line="87" pos:column="33">(<argument><expr><name pos:line="87" pos:column="34">p<pos:position pos:line="87" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="87" pos:column="37">&amp;<pos:position pos:line="87" pos:column="42"/></operator><name pos:line="87" pos:column="38">gid<pos:position pos:line="87" pos:column="41"/></name></expr></argument>)<pos:position pos:line="87" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="87" pos:column="43"/></condition><then pos:line="87" pos:column="43"> <block pos:line="87" pos:column="44">{
			<if pos:line="88" pos:column="25">if <condition pos:line="88" pos:column="28">(<expr><operator pos:line="88" pos:column="29">!<pos:position pos:line="88" pos:column="30"/></operator><call><name pos:line="88" pos:column="30">isDigit<pos:position pos:line="88" pos:column="37"/></name><argument_list pos:line="88" pos:column="37">(<argument><expr><name pos:line="88" pos:column="38">p<pos:position pos:line="88" pos:column="39"/></name></expr></argument>)<pos:position pos:line="88" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="88" pos:column="41"/></condition><then pos:line="88" pos:column="41"> <block pos:line="88" pos:column="42">{
				<expr_stmt><expr><call><name pos:line="89" pos:column="33">rprintf<pos:position pos:line="89" pos:column="40"/></name><argument_list pos:line="89" pos:column="40">(<argument><expr><name pos:line="89" pos:column="41">FLOG<pos:position pos:line="89" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="89" pos:column="47">"Invalid gid %s\n"<pos:position pos:line="89" pos:column="65"/></literal></expr></argument>, <argument><expr><name pos:line="89" pos:column="67">p<pos:position pos:line="89" pos:column="68"/></name></expr></argument>)<pos:position pos:line="89" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="70"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="90" pos:column="33">io_printf<pos:position pos:line="90" pos:column="42"/></name><argument_list pos:line="90" pos:column="42">(<argument><expr><name pos:line="90" pos:column="43">f_out<pos:position pos:line="90" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="90" pos:column="50">"@ERROR: invalid gid %s\n"<pos:position pos:line="90" pos:column="76"/></literal></expr></argument>, <argument><expr><name pos:line="90" pos:column="78">p<pos:position pos:line="90" pos:column="79"/></name></expr></argument>)<pos:position pos:line="90" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="81"/></expr_stmt>
				<return pos:line="91" pos:column="33">return <expr><operator pos:line="91" pos:column="40">-<pos:position pos:line="91" pos:column="41"/></operator><literal type="number" pos:line="91" pos:column="41">1<pos:position pos:line="91" pos:column="42"/></literal></expr>;<pos:position pos:line="91" pos:column="43"/></return>
			}<pos:position pos:line="92" pos:column="26"/></block></then></if>
			<expr_stmt><expr><name pos:line="93" pos:column="25">gid<pos:position pos:line="93" pos:column="28"/></name> <operator pos:line="93" pos:column="29">=<pos:position pos:line="93" pos:column="30"/></operator> <call><name pos:line="93" pos:column="31">atoi<pos:position pos:line="93" pos:column="35"/></name><argument_list pos:line="93" pos:column="35">(<argument><expr><name pos:line="93" pos:column="36">p<pos:position pos:line="93" pos:column="37"/></name></expr></argument>)<pos:position pos:line="93" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="39"/></expr_stmt>
		}<pos:position pos:line="94" pos:column="18"/></block></then></if>
	}<pos:position pos:line="95" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="97" pos:column="9">/* TODO: If we're not root, but the configuration requests
	 * that we change to some uid other than the current one, then
	 * log a warning. */</comment>

	<comment type="block" pos:line="101" pos:column="9">/* TODO: Perhaps take a list of gids, and make them into the
	 * supplementary groups. */</comment>

	<expr_stmt><expr><name pos:line="104" pos:column="9">module_dir<pos:position pos:line="104" pos:column="19"/></name> <operator pos:line="104" pos:column="20">=<pos:position pos:line="104" pos:column="21"/></operator> <call><name pos:line="104" pos:column="22">lp_path<pos:position pos:line="104" pos:column="29"/></name><argument_list pos:line="104" pos:column="29">(<argument><expr><name pos:line="104" pos:column="30">i<pos:position pos:line="104" pos:column="31"/></name></expr></argument>)<pos:position pos:line="104" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="104" pos:column="33"/></expr_stmt>
	<if pos:line="105" pos:column="9">if <condition pos:line="105" pos:column="12">(<expr><operator pos:line="105" pos:column="13">*<pos:position pos:line="105" pos:column="14"/></operator><name pos:line="105" pos:column="14">module_dir<pos:position pos:line="105" pos:column="24"/></name> <operator pos:line="105" pos:column="25">==<pos:position pos:line="105" pos:column="27"/></operator> <literal type="char" pos:line="105" pos:column="28">'\0'<pos:position pos:line="105" pos:column="32"/></literal></expr>)<pos:position pos:line="105" pos:column="33"/></condition><then pos:line="105" pos:column="33"> <block pos:line="105" pos:column="34">{
		<expr_stmt><expr><call><name pos:line="106" pos:column="17">rprintf<pos:position pos:line="106" pos:column="24"/></name><argument_list pos:line="106" pos:column="24">(<argument><expr><name pos:line="106" pos:column="25">FLOG<pos:position pos:line="106" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="106" pos:column="31">"No path specified for module %s\n"<pos:position pos:line="106" pos:column="66"/></literal></expr></argument>, <argument><expr><name pos:line="106" pos:column="68">name<pos:position pos:line="106" pos:column="72"/></name></expr></argument>)<pos:position pos:line="106" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="106" pos:column="74"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="107" pos:column="17">io_printf<pos:position pos:line="107" pos:column="26"/></name><argument_list pos:line="107" pos:column="26">(<argument><expr><name pos:line="107" pos:column="27">f_out<pos:position pos:line="107" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="107" pos:column="34">"@ERROR: no path setting.\n"<pos:position pos:line="107" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="107" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="107" pos:column="64"/></expr_stmt>
		<return pos:line="108" pos:column="17">return <expr><operator pos:line="108" pos:column="24">-<pos:position pos:line="108" pos:column="25"/></operator><literal type="number" pos:line="108" pos:column="25">1<pos:position pos:line="108" pos:column="26"/></literal></expr>;<pos:position pos:line="108" pos:column="27"/></return>
	}<pos:position pos:line="109" pos:column="10"/></block></then></if>
	<if pos:line="110" pos:column="9">if <condition pos:line="110" pos:column="12">(<expr><name pos:line="110" pos:column="13">use_chroot<pos:position pos:line="110" pos:column="23"/></name></expr>)<pos:position pos:line="110" pos:column="24"/></condition><then pos:line="110" pos:column="24"> <block pos:line="110" pos:column="25">{
		<if pos:line="111" pos:column="17">if <condition pos:line="111" pos:column="20">(<expr><operator pos:line="111" pos:column="21">(<pos:position pos:line="111" pos:column="22"/></operator><name pos:line="111" pos:column="22">p<pos:position pos:line="111" pos:column="23"/></name> <operator pos:line="111" pos:column="24">=<pos:position pos:line="111" pos:column="25"/></operator> <call><name pos:line="111" pos:column="26">strstr<pos:position pos:line="111" pos:column="32"/></name><argument_list pos:line="111" pos:column="32">(<argument><expr><name pos:line="111" pos:column="33">module_dir<pos:position pos:line="111" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="111" pos:column="45">"/./"<pos:position pos:line="111" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="111" pos:column="51"/></argument_list></call><operator pos:line="111" pos:column="51">)<pos:position pos:line="111" pos:column="52"/></operator> <operator pos:line="111" pos:column="53">!=<pos:position pos:line="111" pos:column="55"/></operator> <name pos:line="111" pos:column="56">NULL<pos:position pos:line="111" pos:column="60"/></name></expr>)<pos:position pos:line="111" pos:column="61"/></condition><then pos:line="111" pos:column="61"> <block pos:line="111" pos:column="62">{
			<expr_stmt><expr><operator pos:line="112" pos:column="25">*<pos:position pos:line="112" pos:column="26"/></operator><name pos:line="112" pos:column="26">p<pos:position pos:line="112" pos:column="27"/></name> <operator pos:line="112" pos:column="28">=<pos:position pos:line="112" pos:column="29"/></operator> <literal type="char" pos:line="112" pos:column="30">'\0'<pos:position pos:line="112" pos:column="34"/></literal></expr>;<pos:position pos:line="112" pos:column="35"/></expr_stmt> <comment type="block" pos:line="112" pos:column="36">/* Temporary... */</comment>
			<if pos:line="113" pos:column="25">if <condition pos:line="113" pos:column="28">(<expr><operator pos:line="113" pos:column="29">!<pos:position pos:line="113" pos:column="30"/></operator><operator pos:line="113" pos:column="30">(<pos:position pos:line="113" pos:column="31"/></operator><name pos:line="113" pos:column="31">module_chdir<pos:position pos:line="113" pos:column="43"/></name> <operator pos:line="113" pos:column="44">=<pos:position pos:line="113" pos:column="45"/></operator> <call><name pos:line="113" pos:column="46">normalize_path<pos:position pos:line="113" pos:column="60"/></name><argument_list pos:line="113" pos:column="60">(<argument><expr><name pos:line="113" pos:column="61">module_dir<pos:position pos:line="113" pos:column="71"/></name></expr></argument>, <argument><expr><name pos:line="113" pos:column="73">True<pos:position pos:line="113" pos:column="77"/></name></expr></argument>, <argument><expr><name pos:line="113" pos:column="79">NULL<pos:position pos:line="113" pos:column="83"/></name></expr></argument>)<pos:position pos:line="113" pos:column="84"/></argument_list></call><operator pos:line="113" pos:column="84">)<pos:position pos:line="113" pos:column="85"/></operator></expr>)<pos:position pos:line="113" pos:column="86"/></condition><then pos:line="113" pos:column="86">
				<block type="pseudo"><return pos:line="114" pos:column="33">return <expr><call><name pos:line="114" pos:column="40">path_failure<pos:position pos:line="114" pos:column="52"/></name><argument_list pos:line="114" pos:column="52">(<argument><expr><name pos:line="114" pos:column="53">f_out<pos:position pos:line="114" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="114" pos:column="60">module_dir<pos:position pos:line="114" pos:column="70"/></name></expr></argument>, <argument><expr><name pos:line="114" pos:column="72">False<pos:position pos:line="114" pos:column="77"/></name></expr></argument>)<pos:position pos:line="114" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="114" pos:column="79"/></return></block></then></if>
			<expr_stmt><expr><operator pos:line="115" pos:column="25">*<pos:position pos:line="115" pos:column="26"/></operator><name pos:line="115" pos:column="26">p<pos:position pos:line="115" pos:column="27"/></name> <operator pos:line="115" pos:column="28">=<pos:position pos:line="115" pos:column="29"/></operator> <literal type="char" pos:line="115" pos:column="30">'/'<pos:position pos:line="115" pos:column="33"/></literal></expr>;<pos:position pos:line="115" pos:column="34"/></expr_stmt>
			<if pos:line="116" pos:column="25">if <condition pos:line="116" pos:column="28">(<expr><operator pos:line="116" pos:column="29">!<pos:position pos:line="116" pos:column="30"/></operator><operator pos:line="116" pos:column="30">(<pos:position pos:line="116" pos:column="31"/></operator><name pos:line="116" pos:column="31">p<pos:position pos:line="116" pos:column="32"/></name> <operator pos:line="116" pos:column="33">=<pos:position pos:line="116" pos:column="34"/></operator> <call><name pos:line="116" pos:column="35">normalize_path<pos:position pos:line="116" pos:column="49"/></name><argument_list pos:line="116" pos:column="49">(<argument><expr><name pos:line="116" pos:column="50">p<pos:position pos:line="116" pos:column="51"/></name> <operator pos:line="116" pos:column="52">+<pos:position pos:line="116" pos:column="53"/></operator> <literal type="number" pos:line="116" pos:column="54">2<pos:position pos:line="116" pos:column="55"/></literal></expr></argument>, <argument><expr><name pos:line="116" pos:column="57">True<pos:position pos:line="116" pos:column="61"/></name></expr></argument>, <argument><expr><operator pos:line="116" pos:column="63">&amp;<pos:position pos:line="116" pos:column="68"/></operator><name pos:line="116" pos:column="64">module_dirlen<pos:position pos:line="116" pos:column="77"/></name></expr></argument>)<pos:position pos:line="116" pos:column="78"/></argument_list></call><operator pos:line="116" pos:column="78">)<pos:position pos:line="116" pos:column="79"/></operator></expr>)<pos:position pos:line="116" pos:column="80"/></condition><then pos:line="116" pos:column="80">
				<block type="pseudo"><return pos:line="117" pos:column="33">return <expr><call><name pos:line="117" pos:column="40">path_failure<pos:position pos:line="117" pos:column="52"/></name><argument_list pos:line="117" pos:column="52">(<argument><expr><name pos:line="117" pos:column="53">f_out<pos:position pos:line="117" pos:column="58"/></name></expr></argument>, <argument><expr><call><name pos:line="117" pos:column="60">strstr<pos:position pos:line="117" pos:column="66"/></name><argument_list pos:line="117" pos:column="66">(<argument><expr><name pos:line="117" pos:column="67">module_dir<pos:position pos:line="117" pos:column="77"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="117" pos:column="79">"/./"<pos:position pos:line="117" pos:column="84"/></literal></expr></argument>)<pos:position pos:line="117" pos:column="85"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="117" pos:column="87">False<pos:position pos:line="117" pos:column="92"/></name></expr></argument>)<pos:position pos:line="117" pos:column="93"/></argument_list></call></expr>;<pos:position pos:line="117" pos:column="94"/></return></block></then></if>
			<if pos:line="118" pos:column="25">if <condition pos:line="118" pos:column="28">(<expr><operator pos:line="118" pos:column="29">!<pos:position pos:line="118" pos:column="30"/></operator><operator pos:line="118" pos:column="30">(<pos:position pos:line="118" pos:column="31"/></operator><name pos:line="118" pos:column="31">full_module_path<pos:position pos:line="118" pos:column="47"/></name> <operator pos:line="118" pos:column="48">=<pos:position pos:line="118" pos:column="49"/></operator> <call><name pos:line="118" pos:column="50">normalize_path<pos:position pos:line="118" pos:column="64"/></name><argument_list pos:line="118" pos:column="64">(<argument><expr><name pos:line="118" pos:column="65">module_dir<pos:position pos:line="118" pos:column="75"/></name></expr></argument>, <argument><expr><name pos:line="118" pos:column="77">False<pos:position pos:line="118" pos:column="82"/></name></expr></argument>, <argument><expr><name pos:line="118" pos:column="84">NULL<pos:position pos:line="118" pos:column="88"/></name></expr></argument>)<pos:position pos:line="118" pos:column="89"/></argument_list></call><operator pos:line="118" pos:column="89">)<pos:position pos:line="118" pos:column="90"/></operator></expr>)<pos:position pos:line="118" pos:column="91"/></condition><then pos:line="118" pos:column="91">
				<block type="pseudo"><expr_stmt><expr><name pos:line="119" pos:column="33">full_module_path<pos:position pos:line="119" pos:column="49"/></name> <operator pos:line="119" pos:column="50">=<pos:position pos:line="119" pos:column="51"/></operator> <name pos:line="119" pos:column="52">module_dir<pos:position pos:line="119" pos:column="62"/></name></expr>;<pos:position pos:line="119" pos:column="63"/></expr_stmt></block></then></if>
			<expr_stmt><expr><name pos:line="120" pos:column="25">module_dir<pos:position pos:line="120" pos:column="35"/></name> <operator pos:line="120" pos:column="36">=<pos:position pos:line="120" pos:column="37"/></operator> <name pos:line="120" pos:column="38">p<pos:position pos:line="120" pos:column="39"/></name></expr>;<pos:position pos:line="120" pos:column="40"/></expr_stmt>
		}<pos:position pos:line="121" pos:column="18"/></block></then> <else pos:line="121" pos:column="19">else <block pos:line="121" pos:column="24">{
			<if pos:line="122" pos:column="25">if <condition pos:line="122" pos:column="28">(<expr><operator pos:line="122" pos:column="29">!<pos:position pos:line="122" pos:column="30"/></operator><operator pos:line="122" pos:column="30">(<pos:position pos:line="122" pos:column="31"/></operator><name pos:line="122" pos:column="31">module_chdir<pos:position pos:line="122" pos:column="43"/></name> <operator pos:line="122" pos:column="44">=<pos:position pos:line="122" pos:column="45"/></operator> <call><name pos:line="122" pos:column="46">normalize_path<pos:position pos:line="122" pos:column="60"/></name><argument_list pos:line="122" pos:column="60">(<argument><expr><name pos:line="122" pos:column="61">module_dir<pos:position pos:line="122" pos:column="71"/></name></expr></argument>, <argument><expr><name pos:line="122" pos:column="73">False<pos:position pos:line="122" pos:column="78"/></name></expr></argument>, <argument><expr><name pos:line="122" pos:column="80">NULL<pos:position pos:line="122" pos:column="84"/></name></expr></argument>)<pos:position pos:line="122" pos:column="85"/></argument_list></call><operator pos:line="122" pos:column="85">)<pos:position pos:line="122" pos:column="86"/></operator></expr>)<pos:position pos:line="122" pos:column="87"/></condition><then pos:line="122" pos:column="87">
				<block type="pseudo"><return pos:line="123" pos:column="33">return <expr><call><name pos:line="123" pos:column="40">path_failure<pos:position pos:line="123" pos:column="52"/></name><argument_list pos:line="123" pos:column="52">(<argument><expr><name pos:line="123" pos:column="53">f_out<pos:position pos:line="123" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="123" pos:column="60">module_dir<pos:position pos:line="123" pos:column="70"/></name></expr></argument>, <argument><expr><name pos:line="123" pos:column="72">False<pos:position pos:line="123" pos:column="77"/></name></expr></argument>)<pos:position pos:line="123" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="123" pos:column="79"/></return></block></then></if>
			<expr_stmt><expr><name pos:line="124" pos:column="25">full_module_path<pos:position pos:line="124" pos:column="41"/></name> <operator pos:line="124" pos:column="42">=<pos:position pos:line="124" pos:column="43"/></operator> <name pos:line="124" pos:column="44">module_chdir<pos:position pos:line="124" pos:column="56"/></name></expr>;<pos:position pos:line="124" pos:column="57"/></expr_stmt>
			<expr_stmt><expr><name pos:line="125" pos:column="25">module_dir<pos:position pos:line="125" pos:column="35"/></name> <operator pos:line="125" pos:column="36">=<pos:position pos:line="125" pos:column="37"/></operator> <literal type="string" pos:line="125" pos:column="38">"/"<pos:position pos:line="125" pos:column="41"/></literal></expr>;<pos:position pos:line="125" pos:column="42"/></expr_stmt>
			<expr_stmt><expr><name pos:line="126" pos:column="25">module_dirlen<pos:position pos:line="126" pos:column="38"/></name> <operator pos:line="126" pos:column="39">=<pos:position pos:line="126" pos:column="40"/></operator> <literal type="number" pos:line="126" pos:column="41">1<pos:position pos:line="126" pos:column="42"/></literal></expr>;<pos:position pos:line="126" pos:column="43"/></expr_stmt>
		}<pos:position pos:line="127" pos:column="18"/></block></else></if>
	}<pos:position pos:line="128" pos:column="10"/></block></then> <else pos:line="128" pos:column="11">else <block pos:line="128" pos:column="16">{
		<if pos:line="129" pos:column="17">if <condition pos:line="129" pos:column="20">(<expr><operator pos:line="129" pos:column="21">!<pos:position pos:line="129" pos:column="22"/></operator><operator pos:line="129" pos:column="22">(<pos:position pos:line="129" pos:column="23"/></operator><name pos:line="129" pos:column="23">module_chdir<pos:position pos:line="129" pos:column="35"/></name> <operator pos:line="129" pos:column="36">=<pos:position pos:line="129" pos:column="37"/></operator> <call><name pos:line="129" pos:column="38">normalize_path<pos:position pos:line="129" pos:column="52"/></name><argument_list pos:line="129" pos:column="52">(<argument><expr><name pos:line="129" pos:column="53">module_dir<pos:position pos:line="129" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="129" pos:column="65">False<pos:position pos:line="129" pos:column="70"/></name></expr></argument>, <argument><expr><operator pos:line="129" pos:column="72">&amp;<pos:position pos:line="129" pos:column="77"/></operator><name pos:line="129" pos:column="73">module_dirlen<pos:position pos:line="129" pos:column="86"/></name></expr></argument>)<pos:position pos:line="129" pos:column="87"/></argument_list></call><operator pos:line="129" pos:column="87">)<pos:position pos:line="129" pos:column="88"/></operator></expr>)<pos:position pos:line="129" pos:column="89"/></condition><then pos:line="129" pos:column="89">
			<block type="pseudo"><return pos:line="130" pos:column="25">return <expr><call><name pos:line="130" pos:column="32">path_failure<pos:position pos:line="130" pos:column="44"/></name><argument_list pos:line="130" pos:column="44">(<argument><expr><name pos:line="130" pos:column="45">f_out<pos:position pos:line="130" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="130" pos:column="52">module_dir<pos:position pos:line="130" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="130" pos:column="64">False<pos:position pos:line="130" pos:column="69"/></name></expr></argument>)<pos:position pos:line="130" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="130" pos:column="71"/></return></block></then></if>
		<expr_stmt><expr><name pos:line="131" pos:column="17">full_module_path<pos:position pos:line="131" pos:column="33"/></name> <operator pos:line="131" pos:column="34">=<pos:position pos:line="131" pos:column="35"/></operator> <name pos:line="131" pos:column="36">module_dir<pos:position pos:line="131" pos:column="46"/></name> <operator pos:line="131" pos:column="47">=<pos:position pos:line="131" pos:column="48"/></operator> <name pos:line="131" pos:column="49">module_chdir<pos:position pos:line="131" pos:column="61"/></name></expr>;<pos:position pos:line="131" pos:column="62"/></expr_stmt>
	}<pos:position pos:line="132" pos:column="10"/></block></else></if>

	<if pos:line="134" pos:column="9">if <condition pos:line="134" pos:column="12">(<expr><name pos:line="134" pos:column="13">module_dirlen<pos:position pos:line="134" pos:column="26"/></name> <operator pos:line="134" pos:column="27">==<pos:position pos:line="134" pos:column="29"/></operator> <literal type="number" pos:line="134" pos:column="30">1<pos:position pos:line="134" pos:column="31"/></literal></expr>)<pos:position pos:line="134" pos:column="32"/></condition><then pos:line="134" pos:column="32"> <block pos:line="134" pos:column="33">{
		<expr_stmt><expr><name pos:line="135" pos:column="17">module_dirlen<pos:position pos:line="135" pos:column="30"/></name> <operator pos:line="135" pos:column="31">=<pos:position pos:line="135" pos:column="32"/></operator> <literal type="number" pos:line="135" pos:column="33">0<pos:position pos:line="135" pos:column="34"/></literal></expr>;<pos:position pos:line="135" pos:column="35"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="136" pos:column="17">set_filter_dir<pos:position pos:line="136" pos:column="31"/></name><argument_list pos:line="136" pos:column="31">(<argument><expr><literal type="string" pos:line="136" pos:column="32">"/"<pos:position pos:line="136" pos:column="35"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="136" pos:column="37">1<pos:position pos:line="136" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="136" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="136" pos:column="40"/></expr_stmt>
	}<pos:position pos:line="137" pos:column="10"/></block></then> <else pos:line="137" pos:column="11">else
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="138" pos:column="17">set_filter_dir<pos:position pos:line="138" pos:column="31"/></name><argument_list pos:line="138" pos:column="31">(<argument><expr><name pos:line="138" pos:column="32">module_dir<pos:position pos:line="138" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="138" pos:column="44">module_dirlen<pos:position pos:line="138" pos:column="57"/></name></expr></argument>)<pos:position pos:line="138" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="138" pos:column="59"/></expr_stmt></block></else></if>

	<expr_stmt><expr><name pos:line="140" pos:column="9">p<pos:position pos:line="140" pos:column="10"/></name> <operator pos:line="140" pos:column="11">=<pos:position pos:line="140" pos:column="12"/></operator> <call><name pos:line="140" pos:column="13">lp_filter<pos:position pos:line="140" pos:column="22"/></name><argument_list pos:line="140" pos:column="22">(<argument><expr><name pos:line="140" pos:column="23">i<pos:position pos:line="140" pos:column="24"/></name></expr></argument>)<pos:position pos:line="140" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="140" pos:column="26"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="141" pos:column="9">parse_rule<pos:position pos:line="141" pos:column="19"/></name><argument_list pos:line="141" pos:column="19">(<argument><expr><operator pos:line="141" pos:column="20">&amp;<pos:position pos:line="141" pos:column="25"/></operator><name pos:line="141" pos:column="21">daemon_filter_list<pos:position pos:line="141" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="141" pos:column="41">p<pos:position pos:line="141" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="141" pos:column="44">MATCHFLG_WORD_SPLIT<pos:position pos:line="141" pos:column="63"/></name></expr></argument>,
		   <argument><expr><name pos:line="142" pos:column="20">XFLG_ABS_IF_SLASH<pos:position pos:line="142" pos:column="37"/></name> <operator pos:line="142" pos:column="38">|<pos:position pos:line="142" pos:column="39"/></operator> <name pos:line="142" pos:column="40">XFLG_DIR2WILD3<pos:position pos:line="142" pos:column="54"/></name></expr></argument>)<pos:position pos:line="142" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="142" pos:column="56"/></expr_stmt>

	<expr_stmt><expr><name pos:line="144" pos:column="9">p<pos:position pos:line="144" pos:column="10"/></name> <operator pos:line="144" pos:column="11">=<pos:position pos:line="144" pos:column="12"/></operator> <call><name pos:line="144" pos:column="13">lp_include_from<pos:position pos:line="144" pos:column="28"/></name><argument_list pos:line="144" pos:column="28">(<argument><expr><name pos:line="144" pos:column="29">i<pos:position pos:line="144" pos:column="30"/></name></expr></argument>)<pos:position pos:line="144" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="144" pos:column="32"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="145" pos:column="9">parse_filter_file<pos:position pos:line="145" pos:column="26"/></name><argument_list pos:line="145" pos:column="26">(<argument><expr><operator pos:line="145" pos:column="27">&amp;<pos:position pos:line="145" pos:column="32"/></operator><name pos:line="145" pos:column="28">daemon_filter_list<pos:position pos:line="145" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="145" pos:column="48">p<pos:position pos:line="145" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="145" pos:column="51">MATCHFLG_INCLUDE<pos:position pos:line="145" pos:column="67"/></name></expr></argument>,
	    <argument><expr><name pos:line="146" pos:column="13">XFLG_ABS_IF_SLASH<pos:position pos:line="146" pos:column="30"/></name> <operator pos:line="146" pos:column="31">|<pos:position pos:line="146" pos:column="32"/></operator> <name pos:line="146" pos:column="33">XFLG_DIR2WILD3<pos:position pos:line="146" pos:column="47"/></name> <operator pos:line="146" pos:column="48">|<pos:position pos:line="146" pos:column="49"/></operator> <name pos:line="146" pos:column="50">XFLG_OLD_PREFIXES<pos:position pos:line="146" pos:column="67"/></name> <operator pos:line="146" pos:column="68">|<pos:position pos:line="146" pos:column="69"/></operator> <name pos:line="146" pos:column="70">XFLG_FATAL_ERRORS<pos:position pos:line="146" pos:column="87"/></name></expr></argument>)<pos:position pos:line="146" pos:column="88"/></argument_list></call></expr>;<pos:position pos:line="146" pos:column="89"/></expr_stmt>

	<expr_stmt><expr><name pos:line="148" pos:column="9">p<pos:position pos:line="148" pos:column="10"/></name> <operator pos:line="148" pos:column="11">=<pos:position pos:line="148" pos:column="12"/></operator> <call><name pos:line="148" pos:column="13">lp_include<pos:position pos:line="148" pos:column="23"/></name><argument_list pos:line="148" pos:column="23">(<argument><expr><name pos:line="148" pos:column="24">i<pos:position pos:line="148" pos:column="25"/></name></expr></argument>)<pos:position pos:line="148" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="148" pos:column="27"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="149" pos:column="9">parse_rule<pos:position pos:line="149" pos:column="19"/></name><argument_list pos:line="149" pos:column="19">(<argument><expr><operator pos:line="149" pos:column="20">&amp;<pos:position pos:line="149" pos:column="25"/></operator><name pos:line="149" pos:column="21">daemon_filter_list<pos:position pos:line="149" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="149" pos:column="41">p<pos:position pos:line="149" pos:column="42"/></name></expr></argument>,
		   <argument><expr><name pos:line="150" pos:column="20">MATCHFLG_INCLUDE<pos:position pos:line="150" pos:column="36"/></name> <operator pos:line="150" pos:column="37">|<pos:position pos:line="150" pos:column="38"/></operator> <name pos:line="150" pos:column="39">MATCHFLG_WORD_SPLIT<pos:position pos:line="150" pos:column="58"/></name></expr></argument>,
		   <argument><expr><name pos:line="151" pos:column="20">XFLG_ABS_IF_SLASH<pos:position pos:line="151" pos:column="37"/></name> <operator pos:line="151" pos:column="38">|<pos:position pos:line="151" pos:column="39"/></operator> <name pos:line="151" pos:column="40">XFLG_DIR2WILD3<pos:position pos:line="151" pos:column="54"/></name> <operator pos:line="151" pos:column="55">|<pos:position pos:line="151" pos:column="56"/></operator> <name pos:line="151" pos:column="57">XFLG_OLD_PREFIXES<pos:position pos:line="151" pos:column="74"/></name></expr></argument>)<pos:position pos:line="151" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="151" pos:column="76"/></expr_stmt>

	<expr_stmt><expr><name pos:line="153" pos:column="9">p<pos:position pos:line="153" pos:column="10"/></name> <operator pos:line="153" pos:column="11">=<pos:position pos:line="153" pos:column="12"/></operator> <call><name pos:line="153" pos:column="13">lp_exclude_from<pos:position pos:line="153" pos:column="28"/></name><argument_list pos:line="153" pos:column="28">(<argument><expr><name pos:line="153" pos:column="29">i<pos:position pos:line="153" pos:column="30"/></name></expr></argument>)<pos:position pos:line="153" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="153" pos:column="32"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="154" pos:column="9">parse_filter_file<pos:position pos:line="154" pos:column="26"/></name><argument_list pos:line="154" pos:column="26">(<argument><expr><operator pos:line="154" pos:column="27">&amp;<pos:position pos:line="154" pos:column="32"/></operator><name pos:line="154" pos:column="28">daemon_filter_list<pos:position pos:line="154" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="154" pos:column="48">p<pos:position pos:line="154" pos:column="49"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="154" pos:column="51">0<pos:position pos:line="154" pos:column="52"/></literal></expr></argument>,
	    <argument><expr><name pos:line="155" pos:column="13">XFLG_ABS_IF_SLASH<pos:position pos:line="155" pos:column="30"/></name> <operator pos:line="155" pos:column="31">|<pos:position pos:line="155" pos:column="32"/></operator> <name pos:line="155" pos:column="33">XFLG_DIR2WILD3<pos:position pos:line="155" pos:column="47"/></name> <operator pos:line="155" pos:column="48">|<pos:position pos:line="155" pos:column="49"/></operator> <name pos:line="155" pos:column="50">XFLG_OLD_PREFIXES<pos:position pos:line="155" pos:column="67"/></name> <operator pos:line="155" pos:column="68">|<pos:position pos:line="155" pos:column="69"/></operator> <name pos:line="155" pos:column="70">XFLG_FATAL_ERRORS<pos:position pos:line="155" pos:column="87"/></name></expr></argument>)<pos:position pos:line="155" pos:column="88"/></argument_list></call></expr>;<pos:position pos:line="155" pos:column="89"/></expr_stmt>

	<expr_stmt><expr><name pos:line="157" pos:column="9">p<pos:position pos:line="157" pos:column="10"/></name> <operator pos:line="157" pos:column="11">=<pos:position pos:line="157" pos:column="12"/></operator> <call><name pos:line="157" pos:column="13">lp_exclude<pos:position pos:line="157" pos:column="23"/></name><argument_list pos:line="157" pos:column="23">(<argument><expr><name pos:line="157" pos:column="24">i<pos:position pos:line="157" pos:column="25"/></name></expr></argument>)<pos:position pos:line="157" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="157" pos:column="27"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="158" pos:column="9">parse_rule<pos:position pos:line="158" pos:column="19"/></name><argument_list pos:line="158" pos:column="19">(<argument><expr><operator pos:line="158" pos:column="20">&amp;<pos:position pos:line="158" pos:column="25"/></operator><name pos:line="158" pos:column="21">daemon_filter_list<pos:position pos:line="158" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="158" pos:column="41">p<pos:position pos:line="158" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="158" pos:column="44">MATCHFLG_WORD_SPLIT<pos:position pos:line="158" pos:column="63"/></name></expr></argument>,
		   <argument><expr><name pos:line="159" pos:column="20">XFLG_ABS_IF_SLASH<pos:position pos:line="159" pos:column="37"/></name> <operator pos:line="159" pos:column="38">|<pos:position pos:line="159" pos:column="39"/></operator> <name pos:line="159" pos:column="40">XFLG_DIR2WILD3<pos:position pos:line="159" pos:column="54"/></name> <operator pos:line="159" pos:column="55">|<pos:position pos:line="159" pos:column="56"/></operator> <name pos:line="159" pos:column="57">XFLG_OLD_PREFIXES<pos:position pos:line="159" pos:column="74"/></name></expr></argument>)<pos:position pos:line="159" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="159" pos:column="76"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="161" pos:column="9">log_init<pos:position pos:line="161" pos:column="17"/></name><argument_list pos:line="161" pos:column="17">(<argument><expr><literal type="number" pos:line="161" pos:column="18">1<pos:position pos:line="161" pos:column="19"/></literal></expr></argument>)<pos:position pos:line="161" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="161" pos:column="21"/></expr_stmt>

<cpp:ifdef pos:line="163" pos:column="1">#<cpp:directive pos:line="163" pos:column="2">ifdef<pos:position pos:line="163" pos:column="7"/></cpp:directive> <name pos:line="163" pos:column="8">HAVE_PUTENV<pos:position pos:line="163" pos:column="19"/></name></cpp:ifdef>
	<if pos:line="164" pos:column="9">if <condition pos:line="164" pos:column="12">(<expr><operator pos:line="164" pos:column="13">*<pos:position pos:line="164" pos:column="14"/></operator><call><name pos:line="164" pos:column="14">lp_prexfer_exec<pos:position pos:line="164" pos:column="29"/></name><argument_list pos:line="164" pos:column="29">(<argument><expr><name pos:line="164" pos:column="30">i<pos:position pos:line="164" pos:column="31"/></name></expr></argument>)<pos:position pos:line="164" pos:column="32"/></argument_list></call> <operator pos:line="164" pos:column="33">||<pos:position pos:line="164" pos:column="35"/></operator> <operator pos:line="164" pos:column="36">*<pos:position pos:line="164" pos:column="37"/></operator><call><name pos:line="164" pos:column="37">lp_postxfer_exec<pos:position pos:line="164" pos:column="53"/></name><argument_list pos:line="164" pos:column="53">(<argument><expr><name pos:line="164" pos:column="54">i<pos:position pos:line="164" pos:column="55"/></name></expr></argument>)<pos:position pos:line="164" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="164" pos:column="57"/></condition><then pos:line="164" pos:column="57"> <block pos:line="164" pos:column="58">{
		<decl_stmt><decl><type><name pos:line="165" pos:column="17">char<pos:position pos:line="165" pos:column="21"/></name> <modifier pos:line="165" pos:column="22">*<pos:position pos:line="165" pos:column="23"/></modifier></type><name pos:line="165" pos:column="23">modname<pos:position pos:line="165" pos:column="30"/></name></decl>, <modifier pos:line="165" pos:column="32">*<pos:position pos:line="165" pos:column="33"/></modifier><decl><type ref="prev"/><name pos:line="165" pos:column="33">modpath<pos:position pos:line="165" pos:column="40"/></name></decl>, <modifier pos:line="165" pos:column="42">*<pos:position pos:line="165" pos:column="43"/></modifier><decl><type ref="prev"/><name pos:line="165" pos:column="43">hostaddr<pos:position pos:line="165" pos:column="51"/></name></decl>, <modifier pos:line="165" pos:column="53">*<pos:position pos:line="165" pos:column="54"/></modifier><decl><type ref="prev"/><name pos:line="165" pos:column="54">hostname<pos:position pos:line="165" pos:column="62"/></name></decl>, <modifier pos:line="165" pos:column="64">*<pos:position pos:line="165" pos:column="65"/></modifier><decl><type ref="prev"/><name pos:line="165" pos:column="65">username<pos:position pos:line="165" pos:column="73"/></name></decl>;<pos:position pos:line="165" pos:column="74"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="166" pos:column="17">int<pos:position pos:line="166" pos:column="20"/></name></type> <name pos:line="166" pos:column="21">status<pos:position pos:line="166" pos:column="27"/></name></decl>;<pos:position pos:line="166" pos:column="28"/></decl_stmt>

		<if pos:line="168" pos:column="17">if <condition pos:line="168" pos:column="20">(<expr><call><name pos:line="168" pos:column="21">asprintf<pos:position pos:line="168" pos:column="29"/></name><argument_list pos:line="168" pos:column="29">(<argument><expr><operator pos:line="168" pos:column="30">&amp;<pos:position pos:line="168" pos:column="35"/></operator><name pos:line="168" pos:column="31">modname<pos:position pos:line="168" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="168" pos:column="40">"RSYNC_MODULE_NAME=%s"<pos:position pos:line="168" pos:column="62"/></literal></expr></argument>, <argument><expr><name pos:line="168" pos:column="64">name<pos:position pos:line="168" pos:column="68"/></name></expr></argument>)<pos:position pos:line="168" pos:column="69"/></argument_list></call> <operator pos:line="168" pos:column="70">&lt;<pos:position pos:line="168" pos:column="74"/></operator> <literal type="number" pos:line="168" pos:column="72">0<pos:position pos:line="168" pos:column="73"/></literal>
		 <operator pos:line="169" pos:column="18">||<pos:position pos:line="169" pos:column="20"/></operator> <call><name pos:line="169" pos:column="21">asprintf<pos:position pos:line="169" pos:column="29"/></name><argument_list pos:line="169" pos:column="29">(<argument><expr><operator pos:line="169" pos:column="30">&amp;<pos:position pos:line="169" pos:column="35"/></operator><name pos:line="169" pos:column="31">modpath<pos:position pos:line="169" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="169" pos:column="40">"RSYNC_MODULE_PATH=%s"<pos:position pos:line="169" pos:column="62"/></literal></expr></argument>, <argument><expr><name pos:line="169" pos:column="64">full_module_path<pos:position pos:line="169" pos:column="80"/></name></expr></argument>)<pos:position pos:line="169" pos:column="81"/></argument_list></call> <operator pos:line="169" pos:column="82">&lt;<pos:position pos:line="169" pos:column="86"/></operator> <literal type="number" pos:line="169" pos:column="84">0<pos:position pos:line="169" pos:column="85"/></literal>
		 <operator pos:line="170" pos:column="18">||<pos:position pos:line="170" pos:column="20"/></operator> <call><name pos:line="170" pos:column="21">asprintf<pos:position pos:line="170" pos:column="29"/></name><argument_list pos:line="170" pos:column="29">(<argument><expr><operator pos:line="170" pos:column="30">&amp;<pos:position pos:line="170" pos:column="35"/></operator><name pos:line="170" pos:column="31">hostaddr<pos:position pos:line="170" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="170" pos:column="41">"RSYNC_HOST_ADDR=%s"<pos:position pos:line="170" pos:column="61"/></literal></expr></argument>, <argument><expr><name pos:line="170" pos:column="63">addr<pos:position pos:line="170" pos:column="67"/></name></expr></argument>)<pos:position pos:line="170" pos:column="68"/></argument_list></call> <operator pos:line="170" pos:column="69">&lt;<pos:position pos:line="170" pos:column="73"/></operator> <literal type="number" pos:line="170" pos:column="71">0<pos:position pos:line="170" pos:column="72"/></literal>
		 <operator pos:line="171" pos:column="18">||<pos:position pos:line="171" pos:column="20"/></operator> <call><name pos:line="171" pos:column="21">asprintf<pos:position pos:line="171" pos:column="29"/></name><argument_list pos:line="171" pos:column="29">(<argument><expr><operator pos:line="171" pos:column="30">&amp;<pos:position pos:line="171" pos:column="35"/></operator><name pos:line="171" pos:column="31">hostname<pos:position pos:line="171" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="171" pos:column="41">"RSYNC_HOST_NAME=%s"<pos:position pos:line="171" pos:column="61"/></literal></expr></argument>, <argument><expr><name pos:line="171" pos:column="63">host<pos:position pos:line="171" pos:column="67"/></name></expr></argument>)<pos:position pos:line="171" pos:column="68"/></argument_list></call> <operator pos:line="171" pos:column="69">&lt;<pos:position pos:line="171" pos:column="73"/></operator> <literal type="number" pos:line="171" pos:column="71">0<pos:position pos:line="171" pos:column="72"/></literal>
		 <operator pos:line="172" pos:column="18">||<pos:position pos:line="172" pos:column="20"/></operator> <call><name pos:line="172" pos:column="21">asprintf<pos:position pos:line="172" pos:column="29"/></name><argument_list pos:line="172" pos:column="29">(<argument><expr><operator pos:line="172" pos:column="30">&amp;<pos:position pos:line="172" pos:column="35"/></operator><name pos:line="172" pos:column="31">username<pos:position pos:line="172" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="172" pos:column="41">"RSYNC_USER_NAME=%s"<pos:position pos:line="172" pos:column="61"/></literal></expr></argument>, <argument><expr><name pos:line="172" pos:column="63">auth_user<pos:position pos:line="172" pos:column="72"/></name></expr></argument>)<pos:position pos:line="172" pos:column="73"/></argument_list></call> <operator pos:line="172" pos:column="74">&lt;<pos:position pos:line="172" pos:column="78"/></operator> <literal type="number" pos:line="172" pos:column="76">0<pos:position pos:line="172" pos:column="77"/></literal></expr>)<pos:position pos:line="172" pos:column="78"/></condition><then pos:line="172" pos:column="78">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="173" pos:column="25">out_of_memory<pos:position pos:line="173" pos:column="38"/></name><argument_list pos:line="173" pos:column="38">(<argument><expr><literal type="string" pos:line="173" pos:column="39">"rsync_module"<pos:position pos:line="173" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="173" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="173" pos:column="55"/></expr_stmt></block></then></if>
		<expr_stmt><expr><call><name pos:line="174" pos:column="17">putenv<pos:position pos:line="174" pos:column="23"/></name><argument_list pos:line="174" pos:column="23">(<argument><expr><name pos:line="174" pos:column="24">modname<pos:position pos:line="174" pos:column="31"/></name></expr></argument>)<pos:position pos:line="174" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="174" pos:column="33"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="175" pos:column="17">putenv<pos:position pos:line="175" pos:column="23"/></name><argument_list pos:line="175" pos:column="23">(<argument><expr><name pos:line="175" pos:column="24">modpath<pos:position pos:line="175" pos:column="31"/></name></expr></argument>)<pos:position pos:line="175" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="175" pos:column="33"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="176" pos:column="17">putenv<pos:position pos:line="176" pos:column="23"/></name><argument_list pos:line="176" pos:column="23">(<argument><expr><name pos:line="176" pos:column="24">hostaddr<pos:position pos:line="176" pos:column="32"/></name></expr></argument>)<pos:position pos:line="176" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="176" pos:column="34"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="177" pos:column="17">putenv<pos:position pos:line="177" pos:column="23"/></name><argument_list pos:line="177" pos:column="23">(<argument><expr><name pos:line="177" pos:column="24">hostname<pos:position pos:line="177" pos:column="32"/></name></expr></argument>)<pos:position pos:line="177" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="177" pos:column="34"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="178" pos:column="17">putenv<pos:position pos:line="178" pos:column="23"/></name><argument_list pos:line="178" pos:column="23">(<argument><expr><name pos:line="178" pos:column="24">username<pos:position pos:line="178" pos:column="32"/></name></expr></argument>)<pos:position pos:line="178" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="178" pos:column="34"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="179" pos:column="17">umask<pos:position pos:line="179" pos:column="22"/></name><argument_list pos:line="179" pos:column="22">(<argument><expr><name pos:line="179" pos:column="23">orig_umask<pos:position pos:line="179" pos:column="33"/></name></expr></argument>)<pos:position pos:line="179" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="179" pos:column="35"/></expr_stmt>
		<comment type="block" pos:line="180" pos:column="17">/* For post-xfer exec, fork a new process to run the rsync
		 * daemon while this process waits for the exit status and
		 * runs the indicated command at that point. */</comment>
		<if pos:line="183" pos:column="17">if <condition pos:line="183" pos:column="20">(<expr><operator pos:line="183" pos:column="21">*<pos:position pos:line="183" pos:column="22"/></operator><call><name pos:line="183" pos:column="22">lp_postxfer_exec<pos:position pos:line="183" pos:column="38"/></name><argument_list pos:line="183" pos:column="38">(<argument><expr><name pos:line="183" pos:column="39">i<pos:position pos:line="183" pos:column="40"/></name></expr></argument>)<pos:position pos:line="183" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="183" pos:column="42"/></condition><then pos:line="183" pos:column="42"> <block pos:line="183" pos:column="43">{
			<decl_stmt><decl><type><name pos:line="184" pos:column="25">pid_t<pos:position pos:line="184" pos:column="30"/></name></type> <name pos:line="184" pos:column="31">pid<pos:position pos:line="184" pos:column="34"/></name> <init pos:line="184" pos:column="35">= <expr><call><name pos:line="184" pos:column="37">fork<pos:position pos:line="184" pos:column="41"/></name><argument_list pos:line="184" pos:column="41">()<pos:position pos:line="184" pos:column="43"/></argument_list></call></expr></init></decl>;<pos:position pos:line="184" pos:column="44"/></decl_stmt>
			<if pos:line="185" pos:column="25">if <condition pos:line="185" pos:column="28">(<expr><name pos:line="185" pos:column="29">pid<pos:position pos:line="185" pos:column="32"/></name> <operator pos:line="185" pos:column="33">&lt;<pos:position pos:line="185" pos:column="37"/></operator> <literal type="number" pos:line="185" pos:column="35">0<pos:position pos:line="185" pos:column="36"/></literal></expr>)<pos:position pos:line="185" pos:column="37"/></condition><then pos:line="185" pos:column="37"> <block pos:line="185" pos:column="38">{
				<expr_stmt><expr><call><name pos:line="186" pos:column="33">rsyserr<pos:position pos:line="186" pos:column="40"/></name><argument_list pos:line="186" pos:column="40">(<argument><expr><name pos:line="186" pos:column="41">FLOG<pos:position pos:line="186" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="186" pos:column="47">errno<pos:position pos:line="186" pos:column="52"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="186" pos:column="54">"fork failed"<pos:position pos:line="186" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="186" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="186" pos:column="69"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="187" pos:column="33">io_printf<pos:position pos:line="187" pos:column="42"/></name><argument_list pos:line="187" pos:column="42">(<argument><expr><name pos:line="187" pos:column="43">f_out<pos:position pos:line="187" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="187" pos:column="50">"@ERROR: fork failed\n"<pos:position pos:line="187" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="187" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="187" pos:column="75"/></expr_stmt>
				<return pos:line="188" pos:column="33">return <expr><operator pos:line="188" pos:column="40">-<pos:position pos:line="188" pos:column="41"/></operator><literal type="number" pos:line="188" pos:column="41">1<pos:position pos:line="188" pos:column="42"/></literal></expr>;<pos:position pos:line="188" pos:column="43"/></return>
			}<pos:position pos:line="189" pos:column="26"/></block></then></if>
			<if pos:line="190" pos:column="25">if <condition pos:line="190" pos:column="28">(<expr><name pos:line="190" pos:column="29">pid<pos:position pos:line="190" pos:column="32"/></name></expr>)<pos:position pos:line="190" pos:column="33"/></condition><then pos:line="190" pos:column="33"> <block pos:line="190" pos:column="34">{
				<if pos:line="191" pos:column="33">if <condition pos:line="191" pos:column="36">(<expr><call><name pos:line="191" pos:column="37">asprintf<pos:position pos:line="191" pos:column="45"/></name><argument_list pos:line="191" pos:column="45">(<argument><expr><operator pos:line="191" pos:column="46">&amp;<pos:position pos:line="191" pos:column="51"/></operator><name pos:line="191" pos:column="47">p<pos:position pos:line="191" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="191" pos:column="50">"RSYNC_PID=%ld"<pos:position pos:line="191" pos:column="65"/></literal></expr></argument>, <argument><expr><operator pos:line="191" pos:column="67">(<pos:position pos:line="191" pos:column="68"/></operator><name pos:line="191" pos:column="68">long<pos:position pos:line="191" pos:column="72"/></name><operator pos:line="191" pos:column="72">)<pos:position pos:line="191" pos:column="73"/></operator><name pos:line="191" pos:column="73">pid<pos:position pos:line="191" pos:column="76"/></name></expr></argument>)<pos:position pos:line="191" pos:column="77"/></argument_list></call> <operator pos:line="191" pos:column="78">&gt;<pos:position pos:line="191" pos:column="82"/></operator> <literal type="number" pos:line="191" pos:column="80">0<pos:position pos:line="191" pos:column="81"/></literal></expr>)<pos:position pos:line="191" pos:column="82"/></condition><then pos:line="191" pos:column="82">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="192" pos:column="41">putenv<pos:position pos:line="192" pos:column="47"/></name><argument_list pos:line="192" pos:column="47">(<argument><expr><name pos:line="192" pos:column="48">p<pos:position pos:line="192" pos:column="49"/></name></expr></argument>)<pos:position pos:line="192" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="192" pos:column="51"/></expr_stmt></block></then></if>
				<if pos:line="193" pos:column="33">if <condition pos:line="193" pos:column="36">(<expr><call><name pos:line="193" pos:column="37">wait_process<pos:position pos:line="193" pos:column="49"/></name><argument_list pos:line="193" pos:column="49">(<argument><expr><name pos:line="193" pos:column="50">pid<pos:position pos:line="193" pos:column="53"/></name></expr></argument>, <argument><expr><operator pos:line="193" pos:column="55">&amp;<pos:position pos:line="193" pos:column="60"/></operator><name pos:line="193" pos:column="56">status<pos:position pos:line="193" pos:column="62"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="193" pos:column="64">0<pos:position pos:line="193" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="193" pos:column="66"/></argument_list></call> <operator pos:line="193" pos:column="67">&lt;<pos:position pos:line="193" pos:column="71"/></operator> <literal type="number" pos:line="193" pos:column="69">0<pos:position pos:line="193" pos:column="70"/></literal></expr>)<pos:position pos:line="193" pos:column="71"/></condition><then pos:line="193" pos:column="71">
					<block type="pseudo"><expr_stmt><expr><name pos:line="194" pos:column="41">status<pos:position pos:line="194" pos:column="47"/></name> <operator pos:line="194" pos:column="48">=<pos:position pos:line="194" pos:column="49"/></operator> <operator pos:line="194" pos:column="50">-<pos:position pos:line="194" pos:column="51"/></operator><literal type="number" pos:line="194" pos:column="51">1<pos:position pos:line="194" pos:column="52"/></literal></expr>;<pos:position pos:line="194" pos:column="53"/></expr_stmt></block></then></if>
				<if pos:line="195" pos:column="33">if <condition pos:line="195" pos:column="36">(<expr><call><name pos:line="195" pos:column="37">asprintf<pos:position pos:line="195" pos:column="45"/></name><argument_list pos:line="195" pos:column="45">(<argument><expr><operator pos:line="195" pos:column="46">&amp;<pos:position pos:line="195" pos:column="51"/></operator><name pos:line="195" pos:column="47">p<pos:position pos:line="195" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="195" pos:column="50">"RSYNC_RAW_STATUS=%d"<pos:position pos:line="195" pos:column="71"/></literal></expr></argument>, <argument><expr><name pos:line="195" pos:column="73">status<pos:position pos:line="195" pos:column="79"/></name></expr></argument>)<pos:position pos:line="195" pos:column="80"/></argument_list></call> <operator pos:line="195" pos:column="81">&gt;<pos:position pos:line="195" pos:column="85"/></operator> <literal type="number" pos:line="195" pos:column="83">0<pos:position pos:line="195" pos:column="84"/></literal></expr>)<pos:position pos:line="195" pos:column="85"/></condition><then pos:line="195" pos:column="85">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="196" pos:column="41">putenv<pos:position pos:line="196" pos:column="47"/></name><argument_list pos:line="196" pos:column="47">(<argument><expr><name pos:line="196" pos:column="48">p<pos:position pos:line="196" pos:column="49"/></name></expr></argument>)<pos:position pos:line="196" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="196" pos:column="51"/></expr_stmt></block></then></if>
				<if pos:line="197" pos:column="33">if <condition pos:line="197" pos:column="36">(<expr><call><name pos:line="197" pos:column="37">WIFEXITED<pos:position pos:line="197" pos:column="46"/></name><argument_list pos:line="197" pos:column="46">(<argument><expr><name pos:line="197" pos:column="47">status<pos:position pos:line="197" pos:column="53"/></name></expr></argument>)<pos:position pos:line="197" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="197" pos:column="55"/></condition><then pos:line="197" pos:column="55">
					<block type="pseudo"><expr_stmt><expr><name pos:line="198" pos:column="41">status<pos:position pos:line="198" pos:column="47"/></name> <operator pos:line="198" pos:column="48">=<pos:position pos:line="198" pos:column="49"/></operator> <call><name pos:line="198" pos:column="50">WEXITSTATUS<pos:position pos:line="198" pos:column="61"/></name><argument_list pos:line="198" pos:column="61">(<argument><expr><name pos:line="198" pos:column="62">status<pos:position pos:line="198" pos:column="68"/></name></expr></argument>)<pos:position pos:line="198" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="198" pos:column="70"/></expr_stmt></block></then>
				<else pos:line="199" pos:column="33">else
					<block type="pseudo"><expr_stmt><expr><name pos:line="200" pos:column="41">status<pos:position pos:line="200" pos:column="47"/></name> <operator pos:line="200" pos:column="48">=<pos:position pos:line="200" pos:column="49"/></operator> <operator pos:line="200" pos:column="50">-<pos:position pos:line="200" pos:column="51"/></operator><literal type="number" pos:line="200" pos:column="51">1<pos:position pos:line="200" pos:column="52"/></literal></expr>;<pos:position pos:line="200" pos:column="53"/></expr_stmt></block></else></if>
				<if pos:line="201" pos:column="33">if <condition pos:line="201" pos:column="36">(<expr><call><name pos:line="201" pos:column="37">asprintf<pos:position pos:line="201" pos:column="45"/></name><argument_list pos:line="201" pos:column="45">(<argument><expr><operator pos:line="201" pos:column="46">&amp;<pos:position pos:line="201" pos:column="51"/></operator><name pos:line="201" pos:column="47">p<pos:position pos:line="201" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="201" pos:column="50">"RSYNC_EXIT_STATUS=%d"<pos:position pos:line="201" pos:column="72"/></literal></expr></argument>, <argument><expr><name pos:line="201" pos:column="74">status<pos:position pos:line="201" pos:column="80"/></name></expr></argument>)<pos:position pos:line="201" pos:column="81"/></argument_list></call> <operator pos:line="201" pos:column="82">&gt;<pos:position pos:line="201" pos:column="86"/></operator> <literal type="number" pos:line="201" pos:column="84">0<pos:position pos:line="201" pos:column="85"/></literal></expr>)<pos:position pos:line="201" pos:column="86"/></condition><then pos:line="201" pos:column="86">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="202" pos:column="41">putenv<pos:position pos:line="202" pos:column="47"/></name><argument_list pos:line="202" pos:column="47">(<argument><expr><name pos:line="202" pos:column="48">p<pos:position pos:line="202" pos:column="49"/></name></expr></argument>)<pos:position pos:line="202" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="202" pos:column="51"/></expr_stmt></block></then></if>
				<if pos:line="203" pos:column="33">if <condition pos:line="203" pos:column="36">(<expr><call><name pos:line="203" pos:column="37">system<pos:position pos:line="203" pos:column="43"/></name><argument_list pos:line="203" pos:column="43">(<argument><expr><call><name pos:line="203" pos:column="44">lp_postxfer_exec<pos:position pos:line="203" pos:column="60"/></name><argument_list pos:line="203" pos:column="60">(<argument><expr><name pos:line="203" pos:column="61">i<pos:position pos:line="203" pos:column="62"/></name></expr></argument>)<pos:position pos:line="203" pos:column="63"/></argument_list></call></expr></argument>)<pos:position pos:line="203" pos:column="64"/></argument_list></call> <operator pos:line="203" pos:column="65">&lt;<pos:position pos:line="203" pos:column="69"/></operator> <literal type="number" pos:line="203" pos:column="67">0<pos:position pos:line="203" pos:column="68"/></literal></expr>)<pos:position pos:line="203" pos:column="69"/></condition><then pos:line="203" pos:column="69">
					<block type="pseudo"><expr_stmt><expr><name pos:line="204" pos:column="41">status<pos:position pos:line="204" pos:column="47"/></name> <operator pos:line="204" pos:column="48">=<pos:position pos:line="204" pos:column="49"/></operator> <operator pos:line="204" pos:column="50">-<pos:position pos:line="204" pos:column="51"/></operator><literal type="number" pos:line="204" pos:column="51">1<pos:position pos:line="204" pos:column="52"/></literal></expr>;<pos:position pos:line="204" pos:column="53"/></expr_stmt></block></then></if>
				<expr_stmt><expr><call><name pos:line="205" pos:column="33">_exit<pos:position pos:line="205" pos:column="38"/></name><argument_list pos:line="205" pos:column="38">(<argument><expr><name pos:line="205" pos:column="39">status<pos:position pos:line="205" pos:column="45"/></name></expr></argument>)<pos:position pos:line="205" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="205" pos:column="47"/></expr_stmt>
			}<pos:position pos:line="206" pos:column="26"/></block></then></if>
		}<pos:position pos:line="207" pos:column="18"/></block></then></if>
		<comment type="block" pos:line="208" pos:column="17">/* For pre-xfer exec, fork a child process to run the indicated
		 * command, though it first waits for the parent process to
		 * send us the user's request via a pipe. */</comment>
		<if pos:line="211" pos:column="17">if <condition pos:line="211" pos:column="20">(<expr><operator pos:line="211" pos:column="21">*<pos:position pos:line="211" pos:column="22"/></operator><call><name pos:line="211" pos:column="22">lp_prexfer_exec<pos:position pos:line="211" pos:column="37"/></name><argument_list pos:line="211" pos:column="37">(<argument><expr><name pos:line="211" pos:column="38">i<pos:position pos:line="211" pos:column="39"/></name></expr></argument>)<pos:position pos:line="211" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="211" pos:column="41"/></condition><then pos:line="211" pos:column="41"> <block pos:line="211" pos:column="42">{
			<decl_stmt><decl><type><name pos:line="212" pos:column="25">int<pos:position pos:line="212" pos:column="28"/></name></type> <name><name pos:line="212" pos:column="29">fds<pos:position pos:line="212" pos:column="32"/></name><index pos:line="212" pos:column="32">[<expr><literal type="number" pos:line="212" pos:column="33">2<pos:position pos:line="212" pos:column="34"/></literal></expr>]<pos:position pos:line="212" pos:column="35"/></index></name></decl>;<pos:position pos:line="212" pos:column="36"/></decl_stmt>
			<if pos:line="213" pos:column="25">if <condition pos:line="213" pos:column="28">(<expr><call><name pos:line="213" pos:column="29">asprintf<pos:position pos:line="213" pos:column="37"/></name><argument_list pos:line="213" pos:column="37">(<argument><expr><operator pos:line="213" pos:column="38">&amp;<pos:position pos:line="213" pos:column="43"/></operator><name pos:line="213" pos:column="39">p<pos:position pos:line="213" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="213" pos:column="42">"RSYNC_PID=%ld"<pos:position pos:line="213" pos:column="57"/></literal></expr></argument>, <argument><expr><operator pos:line="213" pos:column="59">(<pos:position pos:line="213" pos:column="60"/></operator><name pos:line="213" pos:column="60">long<pos:position pos:line="213" pos:column="64"/></name><operator pos:line="213" pos:column="64">)<pos:position pos:line="213" pos:column="65"/></operator><call><name pos:line="213" pos:column="65">getpid<pos:position pos:line="213" pos:column="71"/></name><argument_list pos:line="213" pos:column="71">()<pos:position pos:line="213" pos:column="73"/></argument_list></call></expr></argument>)<pos:position pos:line="213" pos:column="74"/></argument_list></call> <operator pos:line="213" pos:column="75">&gt;<pos:position pos:line="213" pos:column="79"/></operator> <literal type="number" pos:line="213" pos:column="77">0<pos:position pos:line="213" pos:column="78"/></literal></expr>)<pos:position pos:line="213" pos:column="79"/></condition><then pos:line="213" pos:column="79">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="214" pos:column="33">putenv<pos:position pos:line="214" pos:column="39"/></name><argument_list pos:line="214" pos:column="39">(<argument><expr><name pos:line="214" pos:column="40">p<pos:position pos:line="214" pos:column="41"/></name></expr></argument>)<pos:position pos:line="214" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="214" pos:column="43"/></expr_stmt></block></then></if>
			<if pos:line="215" pos:column="25">if <condition pos:line="215" pos:column="28">(<expr><call><name pos:line="215" pos:column="29">pipe<pos:position pos:line="215" pos:column="33"/></name><argument_list pos:line="215" pos:column="33">(<argument><expr><name pos:line="215" pos:column="34">fds<pos:position pos:line="215" pos:column="37"/></name></expr></argument>)<pos:position pos:line="215" pos:column="38"/></argument_list></call> <operator pos:line="215" pos:column="39">&lt;<pos:position pos:line="215" pos:column="43"/></operator> <literal type="number" pos:line="215" pos:column="41">0<pos:position pos:line="215" pos:column="42"/></literal> <operator pos:line="215" pos:column="43">||<pos:position pos:line="215" pos:column="45"/></operator> <operator pos:line="215" pos:column="46">(<pos:position pos:line="215" pos:column="47"/></operator><name pos:line="215" pos:column="47">pre_exec_pid<pos:position pos:line="215" pos:column="59"/></name> <operator pos:line="215" pos:column="60">=<pos:position pos:line="215" pos:column="61"/></operator> <call><name pos:line="215" pos:column="62">fork<pos:position pos:line="215" pos:column="66"/></name><argument_list pos:line="215" pos:column="66">()<pos:position pos:line="215" pos:column="68"/></argument_list></call><operator pos:line="215" pos:column="68">)<pos:position pos:line="215" pos:column="69"/></operator> <operator pos:line="215" pos:column="70">&lt;<pos:position pos:line="215" pos:column="74"/></operator> <literal type="number" pos:line="215" pos:column="72">0<pos:position pos:line="215" pos:column="73"/></literal></expr>)<pos:position pos:line="215" pos:column="74"/></condition><then pos:line="215" pos:column="74"> <block pos:line="215" pos:column="75">{
				<expr_stmt><expr><call><name pos:line="216" pos:column="33">rsyserr<pos:position pos:line="216" pos:column="40"/></name><argument_list pos:line="216" pos:column="40">(<argument><expr><name pos:line="216" pos:column="41">FLOG<pos:position pos:line="216" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="216" pos:column="47">errno<pos:position pos:line="216" pos:column="52"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="216" pos:column="54">"pre-xfer exec preparation failed"<pos:position pos:line="216" pos:column="88"/></literal></expr></argument>)<pos:position pos:line="216" pos:column="89"/></argument_list></call></expr>;<pos:position pos:line="216" pos:column="90"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="217" pos:column="33">io_printf<pos:position pos:line="217" pos:column="42"/></name><argument_list pos:line="217" pos:column="42">(<argument><expr><name pos:line="217" pos:column="43">f_out<pos:position pos:line="217" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="217" pos:column="50">"@ERROR: pre-xfer exec preparation failed\n"<pos:position pos:line="217" pos:column="94"/></literal></expr></argument>)<pos:position pos:line="217" pos:column="95"/></argument_list></call></expr>;<pos:position pos:line="217" pos:column="96"/></expr_stmt>
				<return pos:line="218" pos:column="33">return <expr><operator pos:line="218" pos:column="40">-<pos:position pos:line="218" pos:column="41"/></operator><literal type="number" pos:line="218" pos:column="41">1<pos:position pos:line="218" pos:column="42"/></literal></expr>;<pos:position pos:line="218" pos:column="43"/></return>
			}<pos:position pos:line="219" pos:column="26"/></block></then></if>
			<if pos:line="220" pos:column="25">if <condition pos:line="220" pos:column="28">(<expr><name pos:line="220" pos:column="29">pre_exec_pid<pos:position pos:line="220" pos:column="41"/></name> <operator pos:line="220" pos:column="42">==<pos:position pos:line="220" pos:column="44"/></operator> <literal type="number" pos:line="220" pos:column="45">0<pos:position pos:line="220" pos:column="46"/></literal></expr>)<pos:position pos:line="220" pos:column="47"/></condition><then pos:line="220" pos:column="47"> <block pos:line="220" pos:column="48">{
				<decl_stmt><decl><type><name pos:line="221" pos:column="33">char<pos:position pos:line="221" pos:column="37"/></name></type> <name><name pos:line="221" pos:column="38">buf<pos:position pos:line="221" pos:column="41"/></name><index pos:line="221" pos:column="41">[<expr><name pos:line="221" pos:column="42">BIGPATHBUFLEN<pos:position pos:line="221" pos:column="55"/></name></expr>]<pos:position pos:line="221" pos:column="56"/></index></name></decl>;<pos:position pos:line="221" pos:column="57"/></decl_stmt>
				<decl_stmt><decl><type><name pos:line="222" pos:column="33">int<pos:position pos:line="222" pos:column="36"/></name></type> <name pos:line="222" pos:column="37">j<pos:position pos:line="222" pos:column="38"/></name></decl>, <decl><type ref="prev"/><name pos:line="222" pos:column="40">len<pos:position pos:line="222" pos:column="43"/></name></decl>;<pos:position pos:line="222" pos:column="44"/></decl_stmt>
				<expr_stmt><expr><call><name pos:line="223" pos:column="33">close<pos:position pos:line="223" pos:column="38"/></name><argument_list pos:line="223" pos:column="38">(<argument><expr><name><name pos:line="223" pos:column="39">fds<pos:position pos:line="223" pos:column="42"/></name><index pos:line="223" pos:column="42">[<expr><literal type="number" pos:line="223" pos:column="43">1<pos:position pos:line="223" pos:column="44"/></literal></expr>]<pos:position pos:line="223" pos:column="45"/></index></name></expr></argument>)<pos:position pos:line="223" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="223" pos:column="47"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="224" pos:column="33">set_blocking<pos:position pos:line="224" pos:column="45"/></name><argument_list pos:line="224" pos:column="45">(<argument><expr><name><name pos:line="224" pos:column="46">fds<pos:position pos:line="224" pos:column="49"/></name><index pos:line="224" pos:column="49">[<expr><literal type="number" pos:line="224" pos:column="50">0<pos:position pos:line="224" pos:column="51"/></literal></expr>]<pos:position pos:line="224" pos:column="52"/></index></name></expr></argument>)<pos:position pos:line="224" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="224" pos:column="54"/></expr_stmt>
				<expr_stmt><expr><name pos:line="225" pos:column="33">len<pos:position pos:line="225" pos:column="36"/></name> <operator pos:line="225" pos:column="37">=<pos:position pos:line="225" pos:column="38"/></operator> <call><name pos:line="225" pos:column="39">read_arg_from_pipe<pos:position pos:line="225" pos:column="57"/></name><argument_list pos:line="225" pos:column="57">(<argument><expr><name><name pos:line="225" pos:column="58">fds<pos:position pos:line="225" pos:column="61"/></name><index pos:line="225" pos:column="61">[<expr><literal type="number" pos:line="225" pos:column="62">0<pos:position pos:line="225" pos:column="63"/></literal></expr>]<pos:position pos:line="225" pos:column="64"/></index></name></expr></argument>, <argument><expr><name pos:line="225" pos:column="66">buf<pos:position pos:line="225" pos:column="69"/></name></expr></argument>, <argument><expr><name pos:line="225" pos:column="71">BIGPATHBUFLEN<pos:position pos:line="225" pos:column="84"/></name></expr></argument>)<pos:position pos:line="225" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="225" pos:column="86"/></expr_stmt>
				<if pos:line="226" pos:column="33">if <condition pos:line="226" pos:column="36">(<expr><name pos:line="226" pos:column="37">len<pos:position pos:line="226" pos:column="40"/></name> <operator pos:line="226" pos:column="41">&lt;=<pos:position pos:line="226" pos:column="46"/></operator> <literal type="number" pos:line="226" pos:column="44">0<pos:position pos:line="226" pos:column="45"/></literal></expr>)<pos:position pos:line="226" pos:column="46"/></condition><then pos:line="226" pos:column="46">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="227" pos:column="41">_exit<pos:position pos:line="227" pos:column="46"/></name><argument_list pos:line="227" pos:column="46">(<argument><expr><literal type="number" pos:line="227" pos:column="47">1<pos:position pos:line="227" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="227" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="227" pos:column="50"/></expr_stmt></block></then></if>
				<if pos:line="228" pos:column="33">if <condition pos:line="228" pos:column="36">(<expr><call><name pos:line="228" pos:column="37">asprintf<pos:position pos:line="228" pos:column="45"/></name><argument_list pos:line="228" pos:column="45">(<argument><expr><operator pos:line="228" pos:column="46">&amp;<pos:position pos:line="228" pos:column="51"/></operator><name pos:line="228" pos:column="47">p<pos:position pos:line="228" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="228" pos:column="50">"RSYNC_REQUEST=%s"<pos:position pos:line="228" pos:column="68"/></literal></expr></argument>, <argument><expr><name pos:line="228" pos:column="70">buf<pos:position pos:line="228" pos:column="73"/></name></expr></argument>)<pos:position pos:line="228" pos:column="74"/></argument_list></call> <operator pos:line="228" pos:column="75">&gt;<pos:position pos:line="228" pos:column="79"/></operator> <literal type="number" pos:line="228" pos:column="77">0<pos:position pos:line="228" pos:column="78"/></literal></expr>)<pos:position pos:line="228" pos:column="79"/></condition><then pos:line="228" pos:column="79">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="229" pos:column="41">putenv<pos:position pos:line="229" pos:column="47"/></name><argument_list pos:line="229" pos:column="47">(<argument><expr><name pos:line="229" pos:column="48">p<pos:position pos:line="229" pos:column="49"/></name></expr></argument>)<pos:position pos:line="229" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="229" pos:column="51"/></expr_stmt></block></then></if>
				<for pos:line="230" pos:column="33">for <control pos:line="230" pos:column="37">(<init><expr><name pos:line="230" pos:column="38">j<pos:position pos:line="230" pos:column="39"/></name> <operator pos:line="230" pos:column="40">=<pos:position pos:line="230" pos:column="41"/></operator> <literal type="number" pos:line="230" pos:column="42">0<pos:position pos:line="230" pos:column="43"/></literal></expr>;<pos:position pos:line="230" pos:column="44"/></init> <condition pos:line="230" pos:column="45">;<pos:position pos:line="230" pos:column="46"/></condition> <incr><expr><name pos:line="230" pos:column="47">j<pos:position pos:line="230" pos:column="48"/></name><operator pos:line="230" pos:column="48">++<pos:position pos:line="230" pos:column="50"/></operator></expr></incr>)<pos:position pos:line="230" pos:column="51"/></control> <block pos:line="230" pos:column="52">{
					<expr_stmt><expr><name pos:line="231" pos:column="41">len<pos:position pos:line="231" pos:column="44"/></name> <operator pos:line="231" pos:column="45">=<pos:position pos:line="231" pos:column="46"/></operator> <call><name pos:line="231" pos:column="47">read_arg_from_pipe<pos:position pos:line="231" pos:column="65"/></name><argument_list pos:line="231" pos:column="65">(<argument><expr><name><name pos:line="231" pos:column="66">fds<pos:position pos:line="231" pos:column="69"/></name><index pos:line="231" pos:column="69">[<expr><literal type="number" pos:line="231" pos:column="70">0<pos:position pos:line="231" pos:column="71"/></literal></expr>]<pos:position pos:line="231" pos:column="72"/></index></name></expr></argument>, <argument><expr><name pos:line="231" pos:column="74">buf<pos:position pos:line="231" pos:column="77"/></name></expr></argument>,
								 <argument><expr><name pos:line="232" pos:column="66">BIGPATHBUFLEN<pos:position pos:line="232" pos:column="79"/></name></expr></argument>)<pos:position pos:line="232" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="232" pos:column="81"/></expr_stmt>
					<if pos:line="233" pos:column="41">if <condition pos:line="233" pos:column="44">(<expr><name pos:line="233" pos:column="45">len<pos:position pos:line="233" pos:column="48"/></name> <operator pos:line="233" pos:column="49">&lt;=<pos:position pos:line="233" pos:column="54"/></operator> <literal type="number" pos:line="233" pos:column="52">0<pos:position pos:line="233" pos:column="53"/></literal></expr>)<pos:position pos:line="233" pos:column="54"/></condition><then pos:line="233" pos:column="54"> <block pos:line="233" pos:column="55">{
						<if pos:line="234" pos:column="49">if <condition pos:line="234" pos:column="52">(<expr><operator pos:line="234" pos:column="53">!<pos:position pos:line="234" pos:column="54"/></operator><name pos:line="234" pos:column="54">len<pos:position pos:line="234" pos:column="57"/></name></expr>)<pos:position pos:line="234" pos:column="58"/></condition><then pos:line="234" pos:column="58">
							<block type="pseudo"><break pos:line="235" pos:column="57">break;<pos:position pos:line="235" pos:column="63"/></break></block></then></if>
						<expr_stmt><expr><call><name pos:line="236" pos:column="49">_exit<pos:position pos:line="236" pos:column="54"/></name><argument_list pos:line="236" pos:column="54">(<argument><expr><literal type="number" pos:line="236" pos:column="55">1<pos:position pos:line="236" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="236" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="236" pos:column="58"/></expr_stmt>
					}<pos:position pos:line="237" pos:column="42"/></block></then></if>
					<if pos:line="238" pos:column="41">if <condition pos:line="238" pos:column="44">(<expr><call><name pos:line="238" pos:column="45">asprintf<pos:position pos:line="238" pos:column="53"/></name><argument_list pos:line="238" pos:column="53">(<argument><expr><operator pos:line="238" pos:column="54">&amp;<pos:position pos:line="238" pos:column="59"/></operator><name pos:line="238" pos:column="55">p<pos:position pos:line="238" pos:column="56"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="238" pos:column="58">"RSYNC_ARG%d=%s"<pos:position pos:line="238" pos:column="74"/></literal></expr></argument>, <argument><expr><name pos:line="238" pos:column="76">j<pos:position pos:line="238" pos:column="77"/></name></expr></argument>, <argument><expr><name pos:line="238" pos:column="79">buf<pos:position pos:line="238" pos:column="82"/></name></expr></argument>)<pos:position pos:line="238" pos:column="83"/></argument_list></call> <operator pos:line="238" pos:column="84">&gt;<pos:position pos:line="238" pos:column="88"/></operator> <literal type="number" pos:line="238" pos:column="86">0<pos:position pos:line="238" pos:column="87"/></literal></expr>)<pos:position pos:line="238" pos:column="88"/></condition><then pos:line="238" pos:column="88">
						<block type="pseudo"><expr_stmt><expr><call><name pos:line="239" pos:column="49">putenv<pos:position pos:line="239" pos:column="55"/></name><argument_list pos:line="239" pos:column="55">(<argument><expr><name pos:line="239" pos:column="56">p<pos:position pos:line="239" pos:column="57"/></name></expr></argument>)<pos:position pos:line="239" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="239" pos:column="59"/></expr_stmt></block></then></if>
				}<pos:position pos:line="240" pos:column="34"/></block></for>
				<expr_stmt><expr><call><name pos:line="241" pos:column="33">close<pos:position pos:line="241" pos:column="38"/></name><argument_list pos:line="241" pos:column="38">(<argument><expr><name><name pos:line="241" pos:column="39">fds<pos:position pos:line="241" pos:column="42"/></name><index pos:line="241" pos:column="42">[<expr><literal type="number" pos:line="241" pos:column="43">0<pos:position pos:line="241" pos:column="44"/></literal></expr>]<pos:position pos:line="241" pos:column="45"/></index></name></expr></argument>)<pos:position pos:line="241" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="241" pos:column="47"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="242" pos:column="33">close<pos:position pos:line="242" pos:column="38"/></name><argument_list pos:line="242" pos:column="38">(<argument><expr><name pos:line="242" pos:column="39">STDIN_FILENO<pos:position pos:line="242" pos:column="51"/></name></expr></argument>)<pos:position pos:line="242" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="242" pos:column="53"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="243" pos:column="33">close<pos:position pos:line="243" pos:column="38"/></name><argument_list pos:line="243" pos:column="38">(<argument><expr><name pos:line="243" pos:column="39">STDOUT_FILENO<pos:position pos:line="243" pos:column="52"/></name></expr></argument>)<pos:position pos:line="243" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="243" pos:column="54"/></expr_stmt>
				<expr_stmt><expr><name pos:line="244" pos:column="33">status<pos:position pos:line="244" pos:column="39"/></name> <operator pos:line="244" pos:column="40">=<pos:position pos:line="244" pos:column="41"/></operator> <call><name pos:line="244" pos:column="42">system<pos:position pos:line="244" pos:column="48"/></name><argument_list pos:line="244" pos:column="48">(<argument><expr><call><name pos:line="244" pos:column="49">lp_prexfer_exec<pos:position pos:line="244" pos:column="64"/></name><argument_list pos:line="244" pos:column="64">(<argument><expr><name pos:line="244" pos:column="65">i<pos:position pos:line="244" pos:column="66"/></name></expr></argument>)<pos:position pos:line="244" pos:column="67"/></argument_list></call></expr></argument>)<pos:position pos:line="244" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="244" pos:column="69"/></expr_stmt>
				<if pos:line="245" pos:column="33">if <condition pos:line="245" pos:column="36">(<expr><operator pos:line="245" pos:column="37">!<pos:position pos:line="245" pos:column="38"/></operator><call><name pos:line="245" pos:column="38">WIFEXITED<pos:position pos:line="245" pos:column="47"/></name><argument_list pos:line="245" pos:column="47">(<argument><expr><name pos:line="245" pos:column="48">status<pos:position pos:line="245" pos:column="54"/></name></expr></argument>)<pos:position pos:line="245" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="245" pos:column="56"/></condition><then pos:line="245" pos:column="56">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="246" pos:column="41">_exit<pos:position pos:line="246" pos:column="46"/></name><argument_list pos:line="246" pos:column="46">(<argument><expr><literal type="number" pos:line="246" pos:column="47">1<pos:position pos:line="246" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="246" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="246" pos:column="50"/></expr_stmt></block></then></if>
				<expr_stmt><expr><call><name pos:line="247" pos:column="33">_exit<pos:position pos:line="247" pos:column="38"/></name><argument_list pos:line="247" pos:column="38">(<argument><expr><call><name pos:line="247" pos:column="39">WEXITSTATUS<pos:position pos:line="247" pos:column="50"/></name><argument_list pos:line="247" pos:column="50">(<argument><expr><name pos:line="247" pos:column="51">status<pos:position pos:line="247" pos:column="57"/></name></expr></argument>)<pos:position pos:line="247" pos:column="58"/></argument_list></call></expr></argument>)<pos:position pos:line="247" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="247" pos:column="60"/></expr_stmt>
			}<pos:position pos:line="248" pos:column="26"/></block></then></if>
			<expr_stmt><expr><call><name pos:line="249" pos:column="25">close<pos:position pos:line="249" pos:column="30"/></name><argument_list pos:line="249" pos:column="30">(<argument><expr><name><name pos:line="249" pos:column="31">fds<pos:position pos:line="249" pos:column="34"/></name><index pos:line="249" pos:column="34">[<expr><literal type="number" pos:line="249" pos:column="35">0<pos:position pos:line="249" pos:column="36"/></literal></expr>]<pos:position pos:line="249" pos:column="37"/></index></name></expr></argument>)<pos:position pos:line="249" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="249" pos:column="39"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="250" pos:column="25">set_blocking<pos:position pos:line="250" pos:column="37"/></name><argument_list pos:line="250" pos:column="37">(<argument><expr><name><name pos:line="250" pos:column="38">fds<pos:position pos:line="250" pos:column="41"/></name><index pos:line="250" pos:column="41">[<expr><literal type="number" pos:line="250" pos:column="42">1<pos:position pos:line="250" pos:column="43"/></literal></expr>]<pos:position pos:line="250" pos:column="44"/></index></name></expr></argument>)<pos:position pos:line="250" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="250" pos:column="46"/></expr_stmt>
			<expr_stmt><expr><name pos:line="251" pos:column="25">pre_exec_fd<pos:position pos:line="251" pos:column="36"/></name> <operator pos:line="251" pos:column="37">=<pos:position pos:line="251" pos:column="38"/></operator> <name><name pos:line="251" pos:column="39">fds<pos:position pos:line="251" pos:column="42"/></name><index pos:line="251" pos:column="42">[<expr><literal type="number" pos:line="251" pos:column="43">1<pos:position pos:line="251" pos:column="44"/></literal></expr>]<pos:position pos:line="251" pos:column="45"/></index></name></expr>;<pos:position pos:line="251" pos:column="46"/></expr_stmt>
		}<pos:position pos:line="252" pos:column="18"/></block></then></if>
		<expr_stmt><expr><call><name pos:line="253" pos:column="17">umask<pos:position pos:line="253" pos:column="22"/></name><argument_list pos:line="253" pos:column="22">(<argument><expr><literal type="number" pos:line="253" pos:column="23">0<pos:position pos:line="253" pos:column="24"/></literal></expr></argument>)<pos:position pos:line="253" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="253" pos:column="26"/></expr_stmt>
	}<pos:position pos:line="254" pos:column="10"/></block></then></if>
<cpp:endif pos:line="255" pos:column="1">#<cpp:directive pos:line="255" pos:column="2">endif<pos:position pos:line="255" pos:column="7"/></cpp:directive></cpp:endif>

	<if pos:line="257" pos:column="9">if <condition pos:line="257" pos:column="12">(<expr><name pos:line="257" pos:column="13">use_chroot<pos:position pos:line="257" pos:column="23"/></name></expr>)<pos:position pos:line="257" pos:column="24"/></condition><then pos:line="257" pos:column="24"> <block pos:line="257" pos:column="25">{
		<comment type="block" pos:line="258" pos:column="17">/*
		 * XXX: The 'use chroot' flag is a fairly reliable
		 * source of confusion, because it fails under two
		 * important circumstances: running as non-root,
		 * running on Win32 (or possibly others).  On the
		 * other hand, if you are running as root, then it
		 * might be better to always use chroot.
		 *
		 * So, perhaps if we can't chroot we should just issue
		 * a warning, unless a "require chroot" flag is set,
		 * in which case we fail.
		 */</comment>
		<if pos:line="270" pos:column="17">if <condition pos:line="270" pos:column="20">(<expr><call><name pos:line="270" pos:column="21">chroot<pos:position pos:line="270" pos:column="27"/></name><argument_list pos:line="270" pos:column="27">(<argument><expr><name pos:line="270" pos:column="28">module_chdir<pos:position pos:line="270" pos:column="40"/></name></expr></argument>)<pos:position pos:line="270" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="270" pos:column="42"/></condition><then pos:line="270" pos:column="42"> <block pos:line="270" pos:column="43">{
			<expr_stmt><expr><call><name pos:line="271" pos:column="25">rsyserr<pos:position pos:line="271" pos:column="32"/></name><argument_list pos:line="271" pos:column="32">(<argument><expr><name pos:line="271" pos:column="33">FLOG<pos:position pos:line="271" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="271" pos:column="39">errno<pos:position pos:line="271" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="271" pos:column="46">"chroot %s failed"<pos:position pos:line="271" pos:column="64"/></literal></expr></argument>, <argument><expr><name pos:line="271" pos:column="66">module_chdir<pos:position pos:line="271" pos:column="78"/></name></expr></argument>)<pos:position pos:line="271" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="271" pos:column="80"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="272" pos:column="25">io_printf<pos:position pos:line="272" pos:column="34"/></name><argument_list pos:line="272" pos:column="34">(<argument><expr><name pos:line="272" pos:column="35">f_out<pos:position pos:line="272" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="272" pos:column="42">"@ERROR: chroot failed\n"<pos:position pos:line="272" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="272" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="272" pos:column="69"/></expr_stmt>
			<return pos:line="273" pos:column="25">return <expr><operator pos:line="273" pos:column="32">-<pos:position pos:line="273" pos:column="33"/></operator><literal type="number" pos:line="273" pos:column="33">1<pos:position pos:line="273" pos:column="34"/></literal></expr>;<pos:position pos:line="273" pos:column="35"/></return>
		}<pos:position pos:line="274" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name pos:line="275" pos:column="17">module_chdir<pos:position pos:line="275" pos:column="29"/></name> <operator pos:line="275" pos:column="30">=<pos:position pos:line="275" pos:column="31"/></operator> <name pos:line="275" pos:column="32">module_dir<pos:position pos:line="275" pos:column="42"/></name></expr>;<pos:position pos:line="275" pos:column="43"/></expr_stmt>
	}<pos:position pos:line="276" pos:column="10"/></block></then></if>

	<if pos:line="278" pos:column="9">if <condition pos:line="278" pos:column="12">(<expr><operator pos:line="278" pos:column="13">!<pos:position pos:line="278" pos:column="14"/></operator><call><name pos:line="278" pos:column="14">change_dir<pos:position pos:line="278" pos:column="24"/></name><argument_list pos:line="278" pos:column="24">(<argument><expr><name pos:line="278" pos:column="25">module_chdir<pos:position pos:line="278" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="278" pos:column="39">CD_NORMAL<pos:position pos:line="278" pos:column="48"/></name></expr></argument>)<pos:position pos:line="278" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="278" pos:column="50"/></condition><then pos:line="278" pos:column="50">
		<block type="pseudo"><return pos:line="279" pos:column="17">return <expr><call><name pos:line="279" pos:column="24">path_failure<pos:position pos:line="279" pos:column="36"/></name><argument_list pos:line="279" pos:column="36">(<argument><expr><name pos:line="279" pos:column="37">f_out<pos:position pos:line="279" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="279" pos:column="44">module_chdir<pos:position pos:line="279" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="279" pos:column="58">True<pos:position pos:line="279" pos:column="62"/></name></expr></argument>)<pos:position pos:line="279" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="279" pos:column="64"/></return></block></then></if>
	<if pos:line="280" pos:column="9">if <condition pos:line="280" pos:column="12">(<expr><name pos:line="280" pos:column="13">module_dirlen<pos:position pos:line="280" pos:column="26"/></name> <operator pos:line="280" pos:column="27">||<pos:position pos:line="280" pos:column="29"/></operator> <operator pos:line="280" pos:column="30">!<pos:position pos:line="280" pos:column="31"/></operator><name pos:line="280" pos:column="31">use_chroot<pos:position pos:line="280" pos:column="41"/></name></expr>)<pos:position pos:line="280" pos:column="42"/></condition><then pos:line="280" pos:column="42">
		<block type="pseudo"><expr_stmt><expr><name pos:line="281" pos:column="17">sanitize_paths<pos:position pos:line="281" pos:column="31"/></name> <operator pos:line="281" pos:column="32">=<pos:position pos:line="281" pos:column="33"/></operator> <literal type="number" pos:line="281" pos:column="34">1<pos:position pos:line="281" pos:column="35"/></literal></expr>;<pos:position pos:line="281" pos:column="36"/></expr_stmt></block></then></if>

	<if pos:line="283" pos:column="9">if <condition pos:line="283" pos:column="12">(<expr><operator pos:line="283" pos:column="13">(<pos:position pos:line="283" pos:column="14"/></operator><name pos:line="283" pos:column="14">munge_symlinks<pos:position pos:line="283" pos:column="28"/></name> <operator pos:line="283" pos:column="29">=<pos:position pos:line="283" pos:column="30"/></operator> <call><name pos:line="283" pos:column="31">lp_munge_symlinks<pos:position pos:line="283" pos:column="48"/></name><argument_list pos:line="283" pos:column="48">(<argument><expr><name pos:line="283" pos:column="49">i<pos:position pos:line="283" pos:column="50"/></name></expr></argument>)<pos:position pos:line="283" pos:column="51"/></argument_list></call><operator pos:line="283" pos:column="51">)<pos:position pos:line="283" pos:column="52"/></operator> <operator pos:line="283" pos:column="53">&lt;<pos:position pos:line="283" pos:column="57"/></operator> <literal type="number" pos:line="283" pos:column="55">0<pos:position pos:line="283" pos:column="56"/></literal></expr>)<pos:position pos:line="283" pos:column="57"/></condition><then pos:line="283" pos:column="57">
		<block type="pseudo"><expr_stmt><expr><name pos:line="284" pos:column="17">munge_symlinks<pos:position pos:line="284" pos:column="31"/></name> <operator pos:line="284" pos:column="32">=<pos:position pos:line="284" pos:column="33"/></operator> <operator pos:line="284" pos:column="34">!<pos:position pos:line="284" pos:column="35"/></operator><name pos:line="284" pos:column="35">use_chroot<pos:position pos:line="284" pos:column="45"/></name> <operator pos:line="284" pos:column="46">||<pos:position pos:line="284" pos:column="48"/></operator> <name pos:line="284" pos:column="49">module_dirlen<pos:position pos:line="284" pos:column="62"/></name></expr>;<pos:position pos:line="284" pos:column="63"/></expr_stmt></block></then></if>
	<if pos:line="285" pos:column="9">if <condition pos:line="285" pos:column="12">(<expr><name pos:line="285" pos:column="13">munge_symlinks<pos:position pos:line="285" pos:column="27"/></name></expr>)<pos:position pos:line="285" pos:column="28"/></condition><then pos:line="285" pos:column="28"> <block pos:line="285" pos:column="29">{
		<decl_stmt><decl><type><name pos:line="286" pos:column="17">STRUCT_STAT<pos:position pos:line="286" pos:column="28"/></name></type> <name pos:line="286" pos:column="29">st<pos:position pos:line="286" pos:column="31"/></name></decl>;<pos:position pos:line="286" pos:column="32"/></decl_stmt>
		<if pos:line="287" pos:column="17">if <condition pos:line="287" pos:column="20">(<expr><call><name pos:line="287" pos:column="21">do_stat<pos:position pos:line="287" pos:column="28"/></name><argument_list pos:line="287" pos:column="28">(<argument><expr><name pos:line="287" pos:column="29">SYMLINK_PREFIX<pos:position pos:line="287" pos:column="43"/></name></expr></argument>, <argument><expr><operator pos:line="287" pos:column="45">&amp;<pos:position pos:line="287" pos:column="50"/></operator><name pos:line="287" pos:column="46">st<pos:position pos:line="287" pos:column="48"/></name></expr></argument>)<pos:position pos:line="287" pos:column="49"/></argument_list></call> <operator pos:line="287" pos:column="50">==<pos:position pos:line="287" pos:column="52"/></operator> <literal type="number" pos:line="287" pos:column="53">0<pos:position pos:line="287" pos:column="54"/></literal> <operator pos:line="287" pos:column="55">&amp;&amp;<pos:position pos:line="287" pos:column="65"/></operator> <call><name pos:line="287" pos:column="58">S_ISDIR<pos:position pos:line="287" pos:column="65"/></name><argument_list pos:line="287" pos:column="65">(<argument><expr><name><name pos:line="287" pos:column="66">st<pos:position pos:line="287" pos:column="68"/></name><operator pos:line="287" pos:column="68">.<pos:position pos:line="287" pos:column="69"/></operator><name pos:line="287" pos:column="69">st_mode<pos:position pos:line="287" pos:column="76"/></name></name></expr></argument>)<pos:position pos:line="287" pos:column="77"/></argument_list></call></expr>)<pos:position pos:line="287" pos:column="78"/></condition><then pos:line="287" pos:column="78"> <block pos:line="287" pos:column="79">{
			<expr_stmt><expr><call><name pos:line="288" pos:column="25">rprintf<pos:position pos:line="288" pos:column="32"/></name><argument_list pos:line="288" pos:column="32">(<argument><expr><name pos:line="288" pos:column="33">FLOG<pos:position pos:line="288" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="288" pos:column="39">"Symlink munging is unsupported when a %s directory exists.\n"<pos:position pos:line="288" pos:column="101"/></literal></expr></argument>,
				<argument><expr><name pos:line="289" pos:column="33">SYMLINK_PREFIX<pos:position pos:line="289" pos:column="47"/></name></expr></argument>)<pos:position pos:line="289" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="289" pos:column="49"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="290" pos:column="25">io_printf<pos:position pos:line="290" pos:column="34"/></name><argument_list pos:line="290" pos:column="34">(<argument><expr><name pos:line="290" pos:column="35">f_out<pos:position pos:line="290" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="290" pos:column="42">"@ERROR: daemon security issue -- contact admin\n"<pos:position pos:line="290" pos:column="92"/></literal></expr></argument>, <argument><expr><name pos:line="290" pos:column="94">name<pos:position pos:line="290" pos:column="98"/></name></expr></argument>)<pos:position pos:line="290" pos:column="99"/></argument_list></call></expr>;<pos:position pos:line="290" pos:column="100"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="291" pos:column="25">exit_cleanup<pos:position pos:line="291" pos:column="37"/></name><argument_list pos:line="291" pos:column="37">(<argument><expr><name pos:line="291" pos:column="38">RERR_UNSUPPORTED<pos:position pos:line="291" pos:column="54"/></name></expr></argument>)<pos:position pos:line="291" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="291" pos:column="56"/></expr_stmt>
		}<pos:position pos:line="292" pos:column="18"/></block></then></if>
	}<pos:position pos:line="293" pos:column="10"/></block></then></if>

	<if pos:line="295" pos:column="9">if <condition pos:line="295" pos:column="12">(<expr><name pos:line="295" pos:column="13">am_root<pos:position pos:line="295" pos:column="20"/></name></expr>)<pos:position pos:line="295" pos:column="21"/></condition><then pos:line="295" pos:column="21"> <block pos:line="295" pos:column="22">{
		<comment type="block" pos:line="296" pos:column="17">/* XXXX: You could argue that if the daemon is started
		 * by a non-root user and they explicitly specify a
		 * gid, then we should try to change to that gid --
		 * this could be possible if it's already in their
		 * supplementary groups. */</comment>

		<comment type="block" pos:line="302" pos:column="17">/* TODO: Perhaps we need to document that if rsyncd is
		 * started by somebody other than root it will inherit
		 * all their supplementary groups. */</comment>

		<if pos:line="306" pos:column="17">if <condition pos:line="306" pos:column="20">(<expr><call><name pos:line="306" pos:column="21">setgid<pos:position pos:line="306" pos:column="27"/></name><argument_list pos:line="306" pos:column="27">(<argument><expr><name pos:line="306" pos:column="28">gid<pos:position pos:line="306" pos:column="31"/></name></expr></argument>)<pos:position pos:line="306" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="306" pos:column="33"/></condition><then pos:line="306" pos:column="33"> <block pos:line="306" pos:column="34">{
			<expr_stmt><expr><call><name pos:line="307" pos:column="25">rsyserr<pos:position pos:line="307" pos:column="32"/></name><argument_list pos:line="307" pos:column="32">(<argument><expr><name pos:line="307" pos:column="33">FLOG<pos:position pos:line="307" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="307" pos:column="39">errno<pos:position pos:line="307" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="307" pos:column="46">"setgid %d failed"<pos:position pos:line="307" pos:column="64"/></literal></expr></argument>, <argument><expr><operator pos:line="307" pos:column="66">(<pos:position pos:line="307" pos:column="67"/></operator><name pos:line="307" pos:column="67">int<pos:position pos:line="307" pos:column="70"/></name><operator pos:line="307" pos:column="70">)<pos:position pos:line="307" pos:column="71"/></operator><name pos:line="307" pos:column="71">gid<pos:position pos:line="307" pos:column="74"/></name></expr></argument>)<pos:position pos:line="307" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="307" pos:column="76"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="308" pos:column="25">io_printf<pos:position pos:line="308" pos:column="34"/></name><argument_list pos:line="308" pos:column="34">(<argument><expr><name pos:line="308" pos:column="35">f_out<pos:position pos:line="308" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="308" pos:column="42">"@ERROR: setgid failed\n"<pos:position pos:line="308" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="308" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="308" pos:column="69"/></expr_stmt>
			<return pos:line="309" pos:column="25">return <expr><operator pos:line="309" pos:column="32">-<pos:position pos:line="309" pos:column="33"/></operator><literal type="number" pos:line="309" pos:column="33">1<pos:position pos:line="309" pos:column="34"/></literal></expr>;<pos:position pos:line="309" pos:column="35"/></return>
		}<pos:position pos:line="310" pos:column="18"/></block></then></if>
<cpp:ifdef pos:line="311" pos:column="1">#<cpp:directive pos:line="311" pos:column="2">ifdef<pos:position pos:line="311" pos:column="7"/></cpp:directive> <name pos:line="311" pos:column="8">HAVE_SETGROUPS<pos:position pos:line="311" pos:column="22"/></name></cpp:ifdef>
		<comment type="block" pos:line="312" pos:column="17">/* Get rid of any supplementary groups this process
		 * might have inheristed. */</comment>
		<if pos:line="314" pos:column="17">if <condition pos:line="314" pos:column="20">(<expr><call><name pos:line="314" pos:column="21">setgroups<pos:position pos:line="314" pos:column="30"/></name><argument_list pos:line="314" pos:column="30">(<argument><expr><literal type="number" pos:line="314" pos:column="31">1<pos:position pos:line="314" pos:column="32"/></literal></expr></argument>, <argument><expr><operator pos:line="314" pos:column="34">&amp;<pos:position pos:line="314" pos:column="39"/></operator><name pos:line="314" pos:column="35">gid<pos:position pos:line="314" pos:column="38"/></name></expr></argument>)<pos:position pos:line="314" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="314" pos:column="40"/></condition><then pos:line="314" pos:column="40"> <block pos:line="314" pos:column="41">{
			<expr_stmt><expr><call><name pos:line="315" pos:column="25">rsyserr<pos:position pos:line="315" pos:column="32"/></name><argument_list pos:line="315" pos:column="32">(<argument><expr><name pos:line="315" pos:column="33">FLOG<pos:position pos:line="315" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="315" pos:column="39">errno<pos:position pos:line="315" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="315" pos:column="46">"setgroups failed"<pos:position pos:line="315" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="315" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="315" pos:column="66"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="316" pos:column="25">io_printf<pos:position pos:line="316" pos:column="34"/></name><argument_list pos:line="316" pos:column="34">(<argument><expr><name pos:line="316" pos:column="35">f_out<pos:position pos:line="316" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="316" pos:column="42">"@ERROR: setgroups failed\n"<pos:position pos:line="316" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="316" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="316" pos:column="72"/></expr_stmt>
			<return pos:line="317" pos:column="25">return <expr><operator pos:line="317" pos:column="32">-<pos:position pos:line="317" pos:column="33"/></operator><literal type="number" pos:line="317" pos:column="33">1<pos:position pos:line="317" pos:column="34"/></literal></expr>;<pos:position pos:line="317" pos:column="35"/></return>
		}<pos:position pos:line="318" pos:column="18"/></block></then></if>
<cpp:endif pos:line="319" pos:column="1">#<cpp:directive pos:line="319" pos:column="2">endif<pos:position pos:line="319" pos:column="7"/></cpp:directive></cpp:endif>

		<if pos:line="321" pos:column="17">if <condition pos:line="321" pos:column="20">(<expr><call><name pos:line="321" pos:column="21">setuid<pos:position pos:line="321" pos:column="27"/></name><argument_list pos:line="321" pos:column="27">(<argument><expr><name pos:line="321" pos:column="28">uid<pos:position pos:line="321" pos:column="31"/></name></expr></argument>)<pos:position pos:line="321" pos:column="32"/></argument_list></call> <operator pos:line="321" pos:column="33">&lt;<pos:position pos:line="321" pos:column="37"/></operator> <literal type="number" pos:line="321" pos:column="35">0<pos:position pos:line="321" pos:column="36"/></literal>
<cpp:ifdef pos:line="322" pos:column="1">#<cpp:directive pos:line="322" pos:column="2">ifdef<pos:position pos:line="322" pos:column="7"/></cpp:directive> <name pos:line="322" pos:column="8">HAVE_SETEUID<pos:position pos:line="322" pos:column="20"/></name></cpp:ifdef>
		 <operator pos:line="323" pos:column="18">||<pos:position pos:line="323" pos:column="20"/></operator> <call><name pos:line="323" pos:column="21">seteuid<pos:position pos:line="323" pos:column="28"/></name><argument_list pos:line="323" pos:column="28">(<argument><expr><name pos:line="323" pos:column="29">uid<pos:position pos:line="323" pos:column="32"/></name></expr></argument>)<pos:position pos:line="323" pos:column="33"/></argument_list></call> <operator pos:line="323" pos:column="34">&lt;<pos:position pos:line="323" pos:column="38"/></operator> <literal type="number" pos:line="323" pos:column="36">0<pos:position pos:line="323" pos:column="37"/></literal></expr>
<cpp:endif pos:line="324" pos:column="1">#<cpp:directive pos:line="324" pos:column="2">endif<pos:position pos:line="324" pos:column="7"/></cpp:directive></cpp:endif>
		)<pos:position pos:line="325" pos:column="18"/></condition><then pos:line="325" pos:column="18"> <block pos:line="325" pos:column="19">{
			<expr_stmt><expr><call><name pos:line="326" pos:column="25">rsyserr<pos:position pos:line="326" pos:column="32"/></name><argument_list pos:line="326" pos:column="32">(<argument><expr><name pos:line="326" pos:column="33">FLOG<pos:position pos:line="326" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="326" pos:column="39">errno<pos:position pos:line="326" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="326" pos:column="46">"setuid %d failed"<pos:position pos:line="326" pos:column="64"/></literal></expr></argument>, <argument><expr><operator pos:line="326" pos:column="66">(<pos:position pos:line="326" pos:column="67"/></operator><name pos:line="326" pos:column="67">int<pos:position pos:line="326" pos:column="70"/></name><operator pos:line="326" pos:column="70">)<pos:position pos:line="326" pos:column="71"/></operator><name pos:line="326" pos:column="71">uid<pos:position pos:line="326" pos:column="74"/></name></expr></argument>)<pos:position pos:line="326" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="326" pos:column="76"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="327" pos:column="25">io_printf<pos:position pos:line="327" pos:column="34"/></name><argument_list pos:line="327" pos:column="34">(<argument><expr><name pos:line="327" pos:column="35">f_out<pos:position pos:line="327" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="327" pos:column="42">"@ERROR: setuid failed\n"<pos:position pos:line="327" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="327" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="327" pos:column="69"/></expr_stmt>
			<return pos:line="328" pos:column="25">return <expr><operator pos:line="328" pos:column="32">-<pos:position pos:line="328" pos:column="33"/></operator><literal type="number" pos:line="328" pos:column="33">1<pos:position pos:line="328" pos:column="34"/></literal></expr>;<pos:position pos:line="328" pos:column="35"/></return>
		}<pos:position pos:line="329" pos:column="18"/></block></then></if>

		<expr_stmt><expr><name pos:line="331" pos:column="17">am_root<pos:position pos:line="331" pos:column="24"/></name> <operator pos:line="331" pos:column="25">=<pos:position pos:line="331" pos:column="26"/></operator> <operator pos:line="331" pos:column="27">(<pos:position pos:line="331" pos:column="28"/></operator><call><name pos:line="331" pos:column="28">MY_UID<pos:position pos:line="331" pos:column="34"/></name><argument_list pos:line="331" pos:column="34">()<pos:position pos:line="331" pos:column="36"/></argument_list></call> <operator pos:line="331" pos:column="37">==<pos:position pos:line="331" pos:column="39"/></operator> <literal type="number" pos:line="331" pos:column="40">0<pos:position pos:line="331" pos:column="41"/></literal><operator pos:line="331" pos:column="41">)<pos:position pos:line="331" pos:column="42"/></operator></expr>;<pos:position pos:line="331" pos:column="43"/></expr_stmt>
	}<pos:position pos:line="332" pos:column="10"/></block></then></if>

	<if pos:line="334" pos:column="9">if <condition pos:line="334" pos:column="12">(<expr><call><name pos:line="334" pos:column="13">lp_temp_dir<pos:position pos:line="334" pos:column="24"/></name><argument_list pos:line="334" pos:column="24">(<argument><expr><name pos:line="334" pos:column="25">i<pos:position pos:line="334" pos:column="26"/></name></expr></argument>)<pos:position pos:line="334" pos:column="27"/></argument_list></call> <operator pos:line="334" pos:column="28">&amp;&amp;<pos:position pos:line="334" pos:column="38"/></operator> <operator pos:line="334" pos:column="31">*<pos:position pos:line="334" pos:column="32"/></operator><call><name pos:line="334" pos:column="32">lp_temp_dir<pos:position pos:line="334" pos:column="43"/></name><argument_list pos:line="334" pos:column="43">(<argument><expr><name pos:line="334" pos:column="44">i<pos:position pos:line="334" pos:column="45"/></name></expr></argument>)<pos:position pos:line="334" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="334" pos:column="47"/></condition><then pos:line="334" pos:column="47"> <block pos:line="334" pos:column="48">{
		<expr_stmt><expr><name pos:line="335" pos:column="17">tmpdir<pos:position pos:line="335" pos:column="23"/></name> <operator pos:line="335" pos:column="24">=<pos:position pos:line="335" pos:column="25"/></operator> <call><name pos:line="335" pos:column="26">lp_temp_dir<pos:position pos:line="335" pos:column="37"/></name><argument_list pos:line="335" pos:column="37">(<argument><expr><name pos:line="335" pos:column="38">i<pos:position pos:line="335" pos:column="39"/></name></expr></argument>)<pos:position pos:line="335" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="335" pos:column="41"/></expr_stmt>
		<if pos:line="336" pos:column="17">if <condition pos:line="336" pos:column="20">(<expr><call><name pos:line="336" pos:column="21">strlen<pos:position pos:line="336" pos:column="27"/></name><argument_list pos:line="336" pos:column="27">(<argument><expr><name pos:line="336" pos:column="28">tmpdir<pos:position pos:line="336" pos:column="34"/></name></expr></argument>)<pos:position pos:line="336" pos:column="35"/></argument_list></call> <operator pos:line="336" pos:column="36">&gt;=<pos:position pos:line="336" pos:column="41"/></operator> <name pos:line="336" pos:column="39">MAXPATHLEN<pos:position pos:line="336" pos:column="49"/></name> <operator pos:line="336" pos:column="50">-<pos:position pos:line="336" pos:column="51"/></operator> <literal type="number" pos:line="336" pos:column="52">10<pos:position pos:line="336" pos:column="54"/></literal></expr>)<pos:position pos:line="336" pos:column="55"/></condition><then pos:line="336" pos:column="55"> <block pos:line="336" pos:column="56">{
			<expr_stmt><expr><call><name pos:line="337" pos:column="25">rprintf<pos:position pos:line="337" pos:column="32"/></name><argument_list pos:line="337" pos:column="32">(<argument><expr><name pos:line="337" pos:column="33">FLOG<pos:position pos:line="337" pos:column="37"/></name></expr></argument>,
				<argument><expr><literal type="string" pos:line="338" pos:column="33">"the 'temp dir' value for %s is WAY too long -- ignoring.\n"<pos:position pos:line="338" pos:column="93"/></literal></expr></argument>,
				<argument><expr><name pos:line="339" pos:column="33">name<pos:position pos:line="339" pos:column="37"/></name></expr></argument>)<pos:position pos:line="339" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="339" pos:column="39"/></expr_stmt>
			<expr_stmt><expr><name pos:line="340" pos:column="25">tmpdir<pos:position pos:line="340" pos:column="31"/></name> <operator pos:line="340" pos:column="32">=<pos:position pos:line="340" pos:column="33"/></operator> <name pos:line="340" pos:column="34">NULL<pos:position pos:line="340" pos:column="38"/></name></expr>;<pos:position pos:line="340" pos:column="39"/></expr_stmt>
		}<pos:position pos:line="341" pos:column="18"/></block></then></if>
	}<pos:position pos:line="342" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="344" pos:column="9">io_printf<pos:position pos:line="344" pos:column="18"/></name><argument_list pos:line="344" pos:column="18">(<argument><expr><name pos:line="344" pos:column="19">f_out<pos:position pos:line="344" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="344" pos:column="26">"@RSYNCD: OK\n"<pos:position pos:line="344" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="344" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="344" pos:column="43"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="346" pos:column="9">read_args<pos:position pos:line="346" pos:column="18"/></name><argument_list pos:line="346" pos:column="18">(<argument><expr><name pos:line="346" pos:column="19">f_in<pos:position pos:line="346" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="346" pos:column="25">name<pos:position pos:line="346" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="346" pos:column="31">line<pos:position pos:line="346" pos:column="35"/></name></expr></argument>, <argument><expr><sizeof pos:line="346" pos:column="37">sizeof <name pos:line="346" pos:column="44">line<pos:position pos:line="346" pos:column="48"/></name></sizeof></expr></argument>, <argument><expr><name pos:line="346" pos:column="50">rl_nulls<pos:position pos:line="346" pos:column="58"/></name></expr></argument>, <argument><expr><operator pos:line="346" pos:column="60">&amp;<pos:position pos:line="346" pos:column="65"/></operator><name pos:line="346" pos:column="61">argv<pos:position pos:line="346" pos:column="65"/></name></expr></argument>, <argument><expr><operator pos:line="346" pos:column="67">&amp;<pos:position pos:line="346" pos:column="72"/></operator><name pos:line="346" pos:column="68">argc<pos:position pos:line="346" pos:column="72"/></name></expr></argument>, <argument><expr><operator pos:line="346" pos:column="74">&amp;<pos:position pos:line="346" pos:column="79"/></operator><name pos:line="346" pos:column="75">request<pos:position pos:line="346" pos:column="82"/></name></expr></argument>)<pos:position pos:line="346" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="346" pos:column="84"/></expr_stmt>
	<expr_stmt><expr><name pos:line="347" pos:column="9">orig_argv<pos:position pos:line="347" pos:column="18"/></name> <operator pos:line="347" pos:column="19">=<pos:position pos:line="347" pos:column="20"/></operator> <name pos:line="347" pos:column="21">argv<pos:position pos:line="347" pos:column="25"/></name></expr>;<pos:position pos:line="347" pos:column="26"/></expr_stmt>

	<expr_stmt><expr><name pos:line="349" pos:column="9">verbose<pos:position pos:line="349" pos:column="16"/></name> <operator pos:line="349" pos:column="17">=<pos:position pos:line="349" pos:column="18"/></operator> <literal type="number" pos:line="349" pos:column="19">0<pos:position pos:line="349" pos:column="20"/></literal></expr>;<pos:position pos:line="349" pos:column="21"/></expr_stmt> <comment type="block" pos:line="349" pos:column="22">/* future verbosity is controlled by client options */</comment>
	<expr_stmt><expr><name pos:line="350" pos:column="9">ret<pos:position pos:line="350" pos:column="12"/></name> <operator pos:line="350" pos:column="13">=<pos:position pos:line="350" pos:column="14"/></operator> <call><name pos:line="350" pos:column="15">parse_arguments<pos:position pos:line="350" pos:column="30"/></name><argument_list pos:line="350" pos:column="30">(<argument><expr><operator pos:line="350" pos:column="31">&amp;<pos:position pos:line="350" pos:column="36"/></operator><name pos:line="350" pos:column="32">argc<pos:position pos:line="350" pos:column="36"/></name></expr></argument>, <argument><expr><operator pos:line="350" pos:column="38">(<pos:position pos:line="350" pos:column="39"/></operator><specifier pos:line="350" pos:column="39">const<pos:position pos:line="350" pos:column="44"/></specifier> <name pos:line="350" pos:column="45">char<pos:position pos:line="350" pos:column="49"/></name> <operator pos:line="350" pos:column="50">*<pos:position pos:line="350" pos:column="51"/></operator><operator pos:line="350" pos:column="51">*<pos:position pos:line="350" pos:column="52"/></operator><operator pos:line="350" pos:column="52">*<pos:position pos:line="350" pos:column="53"/></operator><operator pos:line="350" pos:column="53">)<pos:position pos:line="350" pos:column="54"/></operator> <operator pos:line="350" pos:column="55">&amp;<pos:position pos:line="350" pos:column="60"/></operator><name pos:line="350" pos:column="56">argv<pos:position pos:line="350" pos:column="60"/></name></expr></argument>)<pos:position pos:line="350" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="350" pos:column="62"/></expr_stmt>
	<if pos:line="351" pos:column="9">if <condition pos:line="351" pos:column="12">(<expr><name pos:line="351" pos:column="13">protect_args<pos:position pos:line="351" pos:column="25"/></name> <operator pos:line="351" pos:column="26">&amp;&amp;<pos:position pos:line="351" pos:column="36"/></operator> <name pos:line="351" pos:column="29">ret<pos:position pos:line="351" pos:column="32"/></name></expr>)<pos:position pos:line="351" pos:column="33"/></condition><then pos:line="351" pos:column="33"> <block pos:line="351" pos:column="34">{
		<expr_stmt><expr><name pos:line="352" pos:column="17">orig_early_argv<pos:position pos:line="352" pos:column="32"/></name> <operator pos:line="352" pos:column="33">=<pos:position pos:line="352" pos:column="34"/></operator> <name pos:line="352" pos:column="35">orig_argv<pos:position pos:line="352" pos:column="44"/></name></expr>;<pos:position pos:line="352" pos:column="45"/></expr_stmt>
		<expr_stmt><expr><name pos:line="353" pos:column="17">protect_args<pos:position pos:line="353" pos:column="29"/></name> <operator pos:line="353" pos:column="30">=<pos:position pos:line="353" pos:column="31"/></operator> <literal type="number" pos:line="353" pos:column="32">2<pos:position pos:line="353" pos:column="33"/></literal></expr>;<pos:position pos:line="353" pos:column="34"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="354" pos:column="17">read_args<pos:position pos:line="354" pos:column="26"/></name><argument_list pos:line="354" pos:column="26">(<argument><expr><name pos:line="354" pos:column="27">f_in<pos:position pos:line="354" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="354" pos:column="33">name<pos:position pos:line="354" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="354" pos:column="39">line<pos:position pos:line="354" pos:column="43"/></name></expr></argument>, <argument><expr><sizeof pos:line="354" pos:column="45">sizeof <name pos:line="354" pos:column="52">line<pos:position pos:line="354" pos:column="56"/></name></sizeof></expr></argument>, <argument><expr><literal type="number" pos:line="354" pos:column="58">1<pos:position pos:line="354" pos:column="59"/></literal></expr></argument>, <argument><expr><operator pos:line="354" pos:column="61">&amp;<pos:position pos:line="354" pos:column="66"/></operator><name pos:line="354" pos:column="62">argv<pos:position pos:line="354" pos:column="66"/></name></expr></argument>, <argument><expr><operator pos:line="354" pos:column="68">&amp;<pos:position pos:line="354" pos:column="73"/></operator><name pos:line="354" pos:column="69">argc<pos:position pos:line="354" pos:column="73"/></name></expr></argument>, <argument><expr><operator pos:line="354" pos:column="75">&amp;<pos:position pos:line="354" pos:column="80"/></operator><name pos:line="354" pos:column="76">request<pos:position pos:line="354" pos:column="83"/></name></expr></argument>)<pos:position pos:line="354" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="354" pos:column="85"/></expr_stmt>
		<expr_stmt><expr><name pos:line="355" pos:column="17">orig_argv<pos:position pos:line="355" pos:column="26"/></name> <operator pos:line="355" pos:column="27">=<pos:position pos:line="355" pos:column="28"/></operator> <name pos:line="355" pos:column="29">argv<pos:position pos:line="355" pos:column="33"/></name></expr>;<pos:position pos:line="355" pos:column="34"/></expr_stmt>
		<expr_stmt><expr><name pos:line="356" pos:column="17">ret<pos:position pos:line="356" pos:column="20"/></name> <operator pos:line="356" pos:column="21">=<pos:position pos:line="356" pos:column="22"/></operator> <call><name pos:line="356" pos:column="23">parse_arguments<pos:position pos:line="356" pos:column="38"/></name><argument_list pos:line="356" pos:column="38">(<argument><expr><operator pos:line="356" pos:column="39">&amp;<pos:position pos:line="356" pos:column="44"/></operator><name pos:line="356" pos:column="40">argc<pos:position pos:line="356" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="356" pos:column="46">(<pos:position pos:line="356" pos:column="47"/></operator><specifier pos:line="356" pos:column="47">const<pos:position pos:line="356" pos:column="52"/></specifier> <name pos:line="356" pos:column="53">char<pos:position pos:line="356" pos:column="57"/></name> <operator pos:line="356" pos:column="58">*<pos:position pos:line="356" pos:column="59"/></operator><operator pos:line="356" pos:column="59">*<pos:position pos:line="356" pos:column="60"/></operator><operator pos:line="356" pos:column="60">*<pos:position pos:line="356" pos:column="61"/></operator><operator pos:line="356" pos:column="61">)<pos:position pos:line="356" pos:column="62"/></operator> <operator pos:line="356" pos:column="63">&amp;<pos:position pos:line="356" pos:column="68"/></operator><name pos:line="356" pos:column="64">argv<pos:position pos:line="356" pos:column="68"/></name></expr></argument>)<pos:position pos:line="356" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="356" pos:column="70"/></expr_stmt>
	}<pos:position pos:line="357" pos:column="10"/></block></then> <else pos:line="357" pos:column="11">else
		<block type="pseudo"><expr_stmt><expr><name pos:line="358" pos:column="17">orig_early_argv<pos:position pos:line="358" pos:column="32"/></name> <operator pos:line="358" pos:column="33">=<pos:position pos:line="358" pos:column="34"/></operator> <name pos:line="358" pos:column="35">NULL<pos:position pos:line="358" pos:column="39"/></name></expr>;<pos:position pos:line="358" pos:column="40"/></expr_stmt></block></else></if>

	<if pos:line="360" pos:column="9">if <condition pos:line="360" pos:column="12">(<expr><name pos:line="360" pos:column="13">pre_exec_pid<pos:position pos:line="360" pos:column="25"/></name></expr>)<pos:position pos:line="360" pos:column="26"/></condition><then pos:line="360" pos:column="26"> <block pos:line="360" pos:column="27">{
		<expr_stmt><expr><name pos:line="361" pos:column="17">err_msg<pos:position pos:line="361" pos:column="24"/></name> <operator pos:line="361" pos:column="25">=<pos:position pos:line="361" pos:column="26"/></operator> <call><name pos:line="361" pos:column="27">finish_pre_exec<pos:position pos:line="361" pos:column="42"/></name><argument_list pos:line="361" pos:column="42">(<argument><expr><name pos:line="361" pos:column="43">pre_exec_pid<pos:position pos:line="361" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="361" pos:column="57">pre_exec_fd<pos:position pos:line="361" pos:column="68"/></name></expr></argument>, <argument><expr><name pos:line="361" pos:column="70">request<pos:position pos:line="361" pos:column="77"/></name></expr></argument>,
					  <argument><expr><name pos:line="362" pos:column="43">orig_early_argv<pos:position pos:line="362" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="362" pos:column="60">orig_argv<pos:position pos:line="362" pos:column="69"/></name></expr></argument>)<pos:position pos:line="362" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="362" pos:column="71"/></expr_stmt>
	}<pos:position pos:line="363" pos:column="10"/></block></then></if>

	<if pos:line="365" pos:column="9">if <condition pos:line="365" pos:column="12">(<expr><name pos:line="365" pos:column="13">orig_early_argv<pos:position pos:line="365" pos:column="28"/></name></expr>)<pos:position pos:line="365" pos:column="29"/></condition><then pos:line="365" pos:column="29">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="366" pos:column="17">free<pos:position pos:line="366" pos:column="21"/></name><argument_list pos:line="366" pos:column="21">(<argument><expr><name pos:line="366" pos:column="22">orig_early_argv<pos:position pos:line="366" pos:column="37"/></name></expr></argument>)<pos:position pos:line="366" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="366" pos:column="39"/></expr_stmt></block></then></if>

	<expr_stmt><expr><name pos:line="368" pos:column="9">am_server<pos:position pos:line="368" pos:column="18"/></name> <operator pos:line="368" pos:column="19">=<pos:position pos:line="368" pos:column="20"/></operator> <literal type="number" pos:line="368" pos:column="21">1<pos:position pos:line="368" pos:column="22"/></literal></expr>;<pos:position pos:line="368" pos:column="23"/></expr_stmt> <comment type="block" pos:line="368" pos:column="24">/* Don't let someone try to be tricky. */</comment>
	<expr_stmt><expr><name pos:line="369" pos:column="9">quiet<pos:position pos:line="369" pos:column="14"/></name> <operator pos:line="369" pos:column="15">=<pos:position pos:line="369" pos:column="16"/></operator> <literal type="number" pos:line="369" pos:column="17">0<pos:position pos:line="369" pos:column="18"/></literal></expr>;<pos:position pos:line="369" pos:column="19"/></expr_stmt>
	<if pos:line="370" pos:column="9">if <condition pos:line="370" pos:column="12">(<expr><call><name pos:line="370" pos:column="13">lp_ignore_errors<pos:position pos:line="370" pos:column="29"/></name><argument_list pos:line="370" pos:column="29">(<argument><expr><name pos:line="370" pos:column="30">module_id<pos:position pos:line="370" pos:column="39"/></name></expr></argument>)<pos:position pos:line="370" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="370" pos:column="41"/></condition><then pos:line="370" pos:column="41">
		<block type="pseudo"><expr_stmt><expr><name pos:line="371" pos:column="17">ignore_errors<pos:position pos:line="371" pos:column="30"/></name> <operator pos:line="371" pos:column="31">=<pos:position pos:line="371" pos:column="32"/></operator> <literal type="number" pos:line="371" pos:column="33">1<pos:position pos:line="371" pos:column="34"/></literal></expr>;<pos:position pos:line="371" pos:column="35"/></expr_stmt></block></then></if>
	<if pos:line="372" pos:column="9">if <condition pos:line="372" pos:column="12">(<expr><name pos:line="372" pos:column="13">write_batch<pos:position pos:line="372" pos:column="24"/></name> <operator pos:line="372" pos:column="25">&lt;<pos:position pos:line="372" pos:column="29"/></operator> <literal type="number" pos:line="372" pos:column="27">0<pos:position pos:line="372" pos:column="28"/></literal></expr>)<pos:position pos:line="372" pos:column="29"/></condition><then pos:line="372" pos:column="29">
		<block type="pseudo"><expr_stmt><expr><name pos:line="373" pos:column="17">dry_run<pos:position pos:line="373" pos:column="24"/></name> <operator pos:line="373" pos:column="25">=<pos:position pos:line="373" pos:column="26"/></operator> <literal type="number" pos:line="373" pos:column="27">1<pos:position pos:line="373" pos:column="28"/></literal></expr>;<pos:position pos:line="373" pos:column="29"/></expr_stmt></block></then></if>

	<if pos:line="375" pos:column="9">if <condition pos:line="375" pos:column="12">(<expr><call><name pos:line="375" pos:column="13">lp_fake_super<pos:position pos:line="375" pos:column="26"/></name><argument_list pos:line="375" pos:column="26">(<argument><expr><name pos:line="375" pos:column="27">i<pos:position pos:line="375" pos:column="28"/></name></expr></argument>)<pos:position pos:line="375" pos:column="29"/></argument_list></call></expr>)<pos:position pos:line="375" pos:column="30"/></condition><then pos:line="375" pos:column="30"> <block pos:line="375" pos:column="31">{
		<if pos:line="376" pos:column="17">if <condition pos:line="376" pos:column="20">(<expr><name pos:line="376" pos:column="21">preserve_xattrs<pos:position pos:line="376" pos:column="36"/></name> <operator pos:line="376" pos:column="37">&gt;<pos:position pos:line="376" pos:column="41"/></operator> <literal type="number" pos:line="376" pos:column="39">1<pos:position pos:line="376" pos:column="40"/></literal></expr>)<pos:position pos:line="376" pos:column="41"/></condition><then pos:line="376" pos:column="41">
			<block type="pseudo"><expr_stmt><expr><name pos:line="377" pos:column="25">preserve_xattrs<pos:position pos:line="377" pos:column="40"/></name> <operator pos:line="377" pos:column="41">=<pos:position pos:line="377" pos:column="42"/></operator> <literal type="number" pos:line="377" pos:column="43">1<pos:position pos:line="377" pos:column="44"/></literal></expr>;<pos:position pos:line="377" pos:column="45"/></expr_stmt></block></then></if>
		<expr_stmt><expr><name pos:line="378" pos:column="17">am_root<pos:position pos:line="378" pos:column="24"/></name> <operator pos:line="378" pos:column="25">=<pos:position pos:line="378" pos:column="26"/></operator> <operator pos:line="378" pos:column="27">-<pos:position pos:line="378" pos:column="28"/></operator><literal type="number" pos:line="378" pos:column="28">1<pos:position pos:line="378" pos:column="29"/></literal></expr>;<pos:position pos:line="378" pos:column="30"/></expr_stmt>
	}<pos:position pos:line="379" pos:column="10"/></block></then> <elseif pos:line="379" pos:column="11">else <if pos:line="379" pos:column="16">if <condition pos:line="379" pos:column="19">(<expr><name pos:line="379" pos:column="20">am_root<pos:position pos:line="379" pos:column="27"/></name> <operator pos:line="379" pos:column="28">&lt;<pos:position pos:line="379" pos:column="32"/></operator> <literal type="number" pos:line="379" pos:column="30">0<pos:position pos:line="379" pos:column="31"/></literal></expr>)<pos:position pos:line="379" pos:column="32"/></condition><then pos:line="379" pos:column="32"> <comment type="block" pos:line="379" pos:column="33">/* Treat --fake-super from client as --super. */</comment>
		<block type="pseudo"><expr_stmt><expr><name pos:line="380" pos:column="17">am_root<pos:position pos:line="380" pos:column="24"/></name> <operator pos:line="380" pos:column="25">=<pos:position pos:line="380" pos:column="26"/></operator> <literal type="number" pos:line="380" pos:column="27">2<pos:position pos:line="380" pos:column="28"/></literal></expr>;<pos:position pos:line="380" pos:column="29"/></expr_stmt></block></then></if></elseif></if>

	<if pos:line="382" pos:column="9">if <condition pos:line="382" pos:column="12">(<expr><name pos:line="382" pos:column="13">filesfrom_fd<pos:position pos:line="382" pos:column="25"/></name> <operator pos:line="382" pos:column="26">==<pos:position pos:line="382" pos:column="28"/></operator> <literal type="number" pos:line="382" pos:column="29">0<pos:position pos:line="382" pos:column="30"/></literal></expr>)<pos:position pos:line="382" pos:column="31"/></condition><then pos:line="382" pos:column="31">
		<block type="pseudo"><expr_stmt><expr><name pos:line="383" pos:column="17">filesfrom_fd<pos:position pos:line="383" pos:column="29"/></name> <operator pos:line="383" pos:column="30">=<pos:position pos:line="383" pos:column="31"/></operator> <name pos:line="383" pos:column="32">f_in<pos:position pos:line="383" pos:column="36"/></name></expr>;<pos:position pos:line="383" pos:column="37"/></expr_stmt></block></then></if>

	<if pos:line="385" pos:column="9">if <condition pos:line="385" pos:column="12">(<expr><name pos:line="385" pos:column="13">request<pos:position pos:line="385" pos:column="20"/></name></expr>)<pos:position pos:line="385" pos:column="21"/></condition><then pos:line="385" pos:column="21"> <block pos:line="385" pos:column="22">{
		<if pos:line="386" pos:column="17">if <condition pos:line="386" pos:column="20">(<expr><operator pos:line="386" pos:column="21">*<pos:position pos:line="386" pos:column="22"/></operator><name pos:line="386" pos:column="22">auth_user<pos:position pos:line="386" pos:column="31"/></name></expr>)<pos:position pos:line="386" pos:column="32"/></condition><then pos:line="386" pos:column="32"> <block pos:line="386" pos:column="33">{
			<expr_stmt><expr><call><name pos:line="387" pos:column="25">rprintf<pos:position pos:line="387" pos:column="32"/></name><argument_list pos:line="387" pos:column="32">(<argument><expr><name pos:line="387" pos:column="33">FLOG<pos:position pos:line="387" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="387" pos:column="39">"rsync %s %s from %s@%s (%s)\n"<pos:position pos:line="387" pos:column="70"/></literal></expr></argument>,
				<argument><expr><ternary><condition><expr><name pos:line="388" pos:column="33">am_sender<pos:position pos:line="388" pos:column="42"/></name></expr> ?<pos:position pos:line="388" pos:column="44"/></condition><then pos:line="388" pos:column="44"> <expr><literal type="string" pos:line="388" pos:column="45">"on"<pos:position pos:line="388" pos:column="49"/></literal></expr> <pos:position pos:line="388" pos:column="50"/></then><else pos:line="388" pos:column="50">: <expr><literal type="string" pos:line="388" pos:column="52">"to"<pos:position pos:line="388" pos:column="56"/></literal></expr></else></ternary></expr></argument>,
				<argument><expr><name pos:line="389" pos:column="33">request<pos:position pos:line="389" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="389" pos:column="42">auth_user<pos:position pos:line="389" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="389" pos:column="53">host<pos:position pos:line="389" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="389" pos:column="59">addr<pos:position pos:line="389" pos:column="63"/></name></expr></argument>)<pos:position pos:line="389" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="389" pos:column="65"/></expr_stmt>
		}<pos:position pos:line="390" pos:column="18"/></block></then> <else pos:line="390" pos:column="19">else <block pos:line="390" pos:column="24">{
			<expr_stmt><expr><call><name pos:line="391" pos:column="25">rprintf<pos:position pos:line="391" pos:column="32"/></name><argument_list pos:line="391" pos:column="32">(<argument><expr><name pos:line="391" pos:column="33">FLOG<pos:position pos:line="391" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="391" pos:column="39">"rsync %s %s from %s (%s)\n"<pos:position pos:line="391" pos:column="67"/></literal></expr></argument>,
				<argument><expr><ternary><condition><expr><name pos:line="392" pos:column="33">am_sender<pos:position pos:line="392" pos:column="42"/></name></expr> ?<pos:position pos:line="392" pos:column="44"/></condition><then pos:line="392" pos:column="44"> <expr><literal type="string" pos:line="392" pos:column="45">"on"<pos:position pos:line="392" pos:column="49"/></literal></expr> <pos:position pos:line="392" pos:column="50"/></then><else pos:line="392" pos:column="50">: <expr><literal type="string" pos:line="392" pos:column="52">"to"<pos:position pos:line="392" pos:column="56"/></literal></expr></else></ternary></expr></argument>,
				<argument><expr><name pos:line="393" pos:column="33">request<pos:position pos:line="393" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="393" pos:column="42">host<pos:position pos:line="393" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="393" pos:column="48">addr<pos:position pos:line="393" pos:column="52"/></name></expr></argument>)<pos:position pos:line="393" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="393" pos:column="54"/></expr_stmt>
		}<pos:position pos:line="394" pos:column="18"/></block></else></if>
		<expr_stmt><expr><call><name pos:line="395" pos:column="17">free<pos:position pos:line="395" pos:column="21"/></name><argument_list pos:line="395" pos:column="21">(<argument><expr><name pos:line="395" pos:column="22">request<pos:position pos:line="395" pos:column="29"/></name></expr></argument>)<pos:position pos:line="395" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="395" pos:column="31"/></expr_stmt>
	}<pos:position pos:line="396" pos:column="10"/></block></then></if>

<cpp:ifndef pos:line="398" pos:column="1">#<cpp:directive pos:line="398" pos:column="2">ifndef<pos:position pos:line="398" pos:column="8"/></cpp:directive> <name pos:line="398" pos:column="9">DEBUG<pos:position pos:line="398" pos:column="14"/></name></cpp:ifndef>
	<comment type="block" pos:line="399" pos:column="9">/* don't allow the logs to be flooded too fast */</comment>
	<if pos:line="400" pos:column="9">if <condition pos:line="400" pos:column="12">(<expr><name pos:line="400" pos:column="13">verbose<pos:position pos:line="400" pos:column="20"/></name> <operator pos:line="400" pos:column="21">&gt;<pos:position pos:line="400" pos:column="25"/></operator> <call><name pos:line="400" pos:column="23">lp_max_verbosity<pos:position pos:line="400" pos:column="39"/></name><argument_list pos:line="400" pos:column="39">(<argument><expr><name pos:line="400" pos:column="40">i<pos:position pos:line="400" pos:column="41"/></name></expr></argument>)<pos:position pos:line="400" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="400" pos:column="43"/></condition><then pos:line="400" pos:column="43">
		<block type="pseudo"><expr_stmt><expr><name pos:line="401" pos:column="17">verbose<pos:position pos:line="401" pos:column="24"/></name> <operator pos:line="401" pos:column="25">=<pos:position pos:line="401" pos:column="26"/></operator> <call><name pos:line="401" pos:column="27">lp_max_verbosity<pos:position pos:line="401" pos:column="43"/></name><argument_list pos:line="401" pos:column="43">(<argument><expr><name pos:line="401" pos:column="44">i<pos:position pos:line="401" pos:column="45"/></name></expr></argument>)<pos:position pos:line="401" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="401" pos:column="47"/></expr_stmt></block></then></if>
<cpp:endif pos:line="402" pos:column="1">#<cpp:directive pos:line="402" pos:column="2">endif<pos:position pos:line="402" pos:column="7"/></cpp:directive></cpp:endif>

	<if pos:line="404" pos:column="9">if <condition pos:line="404" pos:column="12">(<expr><name pos:line="404" pos:column="13">protocol_version<pos:position pos:line="404" pos:column="29"/></name> <operator pos:line="404" pos:column="30">&lt;<pos:position pos:line="404" pos:column="34"/></operator> <literal type="number" pos:line="404" pos:column="32">23<pos:position pos:line="404" pos:column="34"/></literal>
	    <operator pos:line="405" pos:column="13">&amp;&amp;<pos:position pos:line="405" pos:column="23"/></operator> <operator pos:line="405" pos:column="16">(<pos:position pos:line="405" pos:column="17"/></operator><name pos:line="405" pos:column="17">protocol_version<pos:position pos:line="405" pos:column="33"/></name> <operator pos:line="405" pos:column="34">==<pos:position pos:line="405" pos:column="36"/></operator> <literal type="number" pos:line="405" pos:column="37">22<pos:position pos:line="405" pos:column="39"/></literal> <operator pos:line="405" pos:column="40">||<pos:position pos:line="405" pos:column="42"/></operator> <name pos:line="405" pos:column="43">am_sender<pos:position pos:line="405" pos:column="52"/></name><operator pos:line="405" pos:column="52">)<pos:position pos:line="405" pos:column="53"/></operator></expr>)<pos:position pos:line="405" pos:column="54"/></condition><then pos:line="405" pos:column="54">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="406" pos:column="17">io_start_multiplex_out<pos:position pos:line="406" pos:column="39"/></name><argument_list pos:line="406" pos:column="39">()<pos:position pos:line="406" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="406" pos:column="42"/></expr_stmt></block></then>
	<elseif pos:line="407" pos:column="9">else <if pos:line="407" pos:column="14">if <condition pos:line="407" pos:column="17">(<expr><operator pos:line="407" pos:column="18">!<pos:position pos:line="407" pos:column="19"/></operator><name pos:line="407" pos:column="19">ret<pos:position pos:line="407" pos:column="22"/></name> <operator pos:line="407" pos:column="23">||<pos:position pos:line="407" pos:column="25"/></operator> <name pos:line="407" pos:column="26">err_msg<pos:position pos:line="407" pos:column="33"/></name></expr>)<pos:position pos:line="407" pos:column="34"/></condition><then pos:line="407" pos:column="34"> <block pos:line="407" pos:column="35">{
		<comment type="block" pos:line="408" pos:column="17">/* We have to get I/O multiplexing started so that we can
		 * get the error back to the client.  This means getting
		 * the protocol setup finished first in later versions. */</comment>
		<expr_stmt><expr><call><name pos:line="411" pos:column="17">setup_protocol<pos:position pos:line="411" pos:column="31"/></name><argument_list pos:line="411" pos:column="31">(<argument><expr><name pos:line="411" pos:column="32">f_out<pos:position pos:line="411" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="411" pos:column="39">f_in<pos:position pos:line="411" pos:column="43"/></name></expr></argument>)<pos:position pos:line="411" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="411" pos:column="45"/></expr_stmt>
		<if pos:line="412" pos:column="17">if <condition pos:line="412" pos:column="20">(<expr><operator pos:line="412" pos:column="21">!<pos:position pos:line="412" pos:column="22"/></operator><name pos:line="412" pos:column="22">am_sender<pos:position pos:line="412" pos:column="31"/></name></expr>)<pos:position pos:line="412" pos:column="32"/></condition><then pos:line="412" pos:column="32"> <block pos:line="412" pos:column="33">{
			<comment type="block" pos:line="413" pos:column="25">/* Since we failed in our option parsing, we may not
			 * have finished parsing that the client sent us a
			 * --files-from option, so look for it manually.
			 * Without this, the socket would be in the wrong
			 * state for the upcoming error message. */</comment>
			<if pos:line="418" pos:column="25">if <condition pos:line="418" pos:column="28">(<expr><operator pos:line="418" pos:column="29">!<pos:position pos:line="418" pos:column="30"/></operator><name pos:line="418" pos:column="30">files_from<pos:position pos:line="418" pos:column="40"/></name></expr>)<pos:position pos:line="418" pos:column="41"/></condition><then pos:line="418" pos:column="41"> <block pos:line="418" pos:column="42">{
				<decl_stmt><decl><type><name pos:line="419" pos:column="33">int<pos:position pos:line="419" pos:column="36"/></name></type> <name pos:line="419" pos:column="37">i<pos:position pos:line="419" pos:column="38"/></name></decl>;<pos:position pos:line="419" pos:column="39"/></decl_stmt>
				<for pos:line="420" pos:column="33">for <control pos:line="420" pos:column="37">(<init><expr><name pos:line="420" pos:column="38">i<pos:position pos:line="420" pos:column="39"/></name> <operator pos:line="420" pos:column="40">=<pos:position pos:line="420" pos:column="41"/></operator> <literal type="number" pos:line="420" pos:column="42">0<pos:position pos:line="420" pos:column="43"/></literal></expr>;<pos:position pos:line="420" pos:column="44"/></init> <condition><expr><name pos:line="420" pos:column="45">i<pos:position pos:line="420" pos:column="46"/></name> <operator pos:line="420" pos:column="47">&lt;<pos:position pos:line="420" pos:column="51"/></operator> <name pos:line="420" pos:column="49">argc<pos:position pos:line="420" pos:column="53"/></name></expr>;<pos:position pos:line="420" pos:column="54"/></condition> <incr><expr><name pos:line="420" pos:column="55">i<pos:position pos:line="420" pos:column="56"/></name><operator pos:line="420" pos:column="56">++<pos:position pos:line="420" pos:column="58"/></operator></expr></incr>)<pos:position pos:line="420" pos:column="59"/></control> <block pos:line="420" pos:column="60">{
					<if pos:line="421" pos:column="41">if <condition pos:line="421" pos:column="44">(<expr><call><name pos:line="421" pos:column="45">strncmp<pos:position pos:line="421" pos:column="52"/></name><argument_list pos:line="421" pos:column="52">(<argument><expr><name><name pos:line="421" pos:column="53">argv<pos:position pos:line="421" pos:column="57"/></name><index pos:line="421" pos:column="57">[<expr><name pos:line="421" pos:column="58">i<pos:position pos:line="421" pos:column="59"/></name></expr>]<pos:position pos:line="421" pos:column="60"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="421" pos:column="62">"--files-from"<pos:position pos:line="421" pos:column="76"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="421" pos:column="78">12<pos:position pos:line="421" pos:column="80"/></literal></expr></argument>)<pos:position pos:line="421" pos:column="81"/></argument_list></call> <operator pos:line="421" pos:column="82">==<pos:position pos:line="421" pos:column="84"/></operator> <literal type="number" pos:line="421" pos:column="85">0<pos:position pos:line="421" pos:column="86"/></literal></expr>)<pos:position pos:line="421" pos:column="87"/></condition><then pos:line="421" pos:column="87"> <block pos:line="421" pos:column="88">{
						<expr_stmt><expr><name pos:line="422" pos:column="49">files_from<pos:position pos:line="422" pos:column="59"/></name> <operator pos:line="422" pos:column="60">=<pos:position pos:line="422" pos:column="61"/></operator> <literal type="string" pos:line="422" pos:column="62">""<pos:position pos:line="422" pos:column="64"/></literal></expr>;<pos:position pos:line="422" pos:column="65"/></expr_stmt>
						<break pos:line="423" pos:column="49">break;<pos:position pos:line="423" pos:column="55"/></break>
					}<pos:position pos:line="424" pos:column="42"/></block></then></if>
				}<pos:position pos:line="425" pos:column="34"/></block></for>
			}<pos:position pos:line="426" pos:column="26"/></block></then></if>
			<if pos:line="427" pos:column="25">if <condition pos:line="427" pos:column="28">(<expr><name pos:line="427" pos:column="29">files_from<pos:position pos:line="427" pos:column="39"/></name></expr>)<pos:position pos:line="427" pos:column="40"/></condition><then pos:line="427" pos:column="40">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="428" pos:column="33">write_byte<pos:position pos:line="428" pos:column="43"/></name><argument_list pos:line="428" pos:column="43">(<argument><expr><name pos:line="428" pos:column="44">f_out<pos:position pos:line="428" pos:column="49"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="428" pos:column="51">0<pos:position pos:line="428" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="428" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="428" pos:column="54"/></expr_stmt></block></then></if>
		}<pos:position pos:line="429" pos:column="18"/></block></then></if>
		<expr_stmt><expr><call><name pos:line="430" pos:column="17">io_start_multiplex_out<pos:position pos:line="430" pos:column="39"/></name><argument_list pos:line="430" pos:column="39">()<pos:position pos:line="430" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="430" pos:column="42"/></expr_stmt>
	}<pos:position pos:line="431" pos:column="10"/></block></then></if></elseif></if>

	<if pos:line="433" pos:column="9">if <condition pos:line="433" pos:column="12">(<expr><operator pos:line="433" pos:column="13">!<pos:position pos:line="433" pos:column="14"/></operator><name pos:line="433" pos:column="14">ret<pos:position pos:line="433" pos:column="17"/></name> <operator pos:line="433" pos:column="18">||<pos:position pos:line="433" pos:column="20"/></operator> <name pos:line="433" pos:column="21">err_msg<pos:position pos:line="433" pos:column="28"/></name></expr>)<pos:position pos:line="433" pos:column="29"/></condition><then pos:line="433" pos:column="29"> <block pos:line="433" pos:column="30">{
		<if pos:line="434" pos:column="17">if <condition pos:line="434" pos:column="20">(<expr><name pos:line="434" pos:column="21">err_msg<pos:position pos:line="434" pos:column="28"/></name></expr>)<pos:position pos:line="434" pos:column="29"/></condition><then pos:line="434" pos:column="29">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="435" pos:column="25">rwrite<pos:position pos:line="435" pos:column="31"/></name><argument_list pos:line="435" pos:column="31">(<argument><expr><name pos:line="435" pos:column="32">FERROR<pos:position pos:line="435" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="435" pos:column="40">err_msg<pos:position pos:line="435" pos:column="47"/></name></expr></argument>, <argument><expr><call><name pos:line="435" pos:column="49">strlen<pos:position pos:line="435" pos:column="55"/></name><argument_list pos:line="435" pos:column="55">(<argument><expr><name pos:line="435" pos:column="56">err_msg<pos:position pos:line="435" pos:column="63"/></name></expr></argument>)<pos:position pos:line="435" pos:column="64"/></argument_list></call></expr></argument>, <argument><expr><literal type="number" pos:line="435" pos:column="66">0<pos:position pos:line="435" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="435" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="435" pos:column="69"/></expr_stmt></block></then>
		<else pos:line="436" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="437" pos:column="25">option_error<pos:position pos:line="437" pos:column="37"/></name><argument_list pos:line="437" pos:column="37">()<pos:position pos:line="437" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="437" pos:column="40"/></expr_stmt></block></else></if>
		<expr_stmt><expr><call><name pos:line="438" pos:column="17">msleep<pos:position pos:line="438" pos:column="23"/></name><argument_list pos:line="438" pos:column="23">(<argument><expr><literal type="number" pos:line="438" pos:column="24">400<pos:position pos:line="438" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="438" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="438" pos:column="29"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="439" pos:column="17">exit_cleanup<pos:position pos:line="439" pos:column="29"/></name><argument_list pos:line="439" pos:column="29">(<argument><expr><name pos:line="439" pos:column="30">RERR_UNSUPPORTED<pos:position pos:line="439" pos:column="46"/></name></expr></argument>)<pos:position pos:line="439" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="439" pos:column="48"/></expr_stmt>
	}<pos:position pos:line="440" pos:column="10"/></block></then></if>

<cpp:ifdef pos:line="442" pos:column="1">#<cpp:directive pos:line="442" pos:column="2">ifdef<pos:position pos:line="442" pos:column="7"/></cpp:directive> <name pos:line="442" pos:column="8">ICONV_OPTION<pos:position pos:line="442" pos:column="20"/></name></cpp:ifdef>
	<if pos:line="443" pos:column="9">if <condition pos:line="443" pos:column="12">(<expr><operator pos:line="443" pos:column="13">!<pos:position pos:line="443" pos:column="14"/></operator><name pos:line="443" pos:column="14">iconv_opt<pos:position pos:line="443" pos:column="23"/></name></expr>)<pos:position pos:line="443" pos:column="24"/></condition><then pos:line="443" pos:column="24"> <block pos:line="443" pos:column="25">{
		<if pos:line="444" pos:column="17">if <condition pos:line="444" pos:column="20">(<expr><name pos:line="444" pos:column="21">ic_send<pos:position pos:line="444" pos:column="28"/></name> <operator pos:line="444" pos:column="29">!=<pos:position pos:line="444" pos:column="31"/></operator> <operator pos:line="444" pos:column="32">(<pos:position pos:line="444" pos:column="33"/></operator><name pos:line="444" pos:column="33">iconv_t<pos:position pos:line="444" pos:column="40"/></name><operator pos:line="444" pos:column="40">)<pos:position pos:line="444" pos:column="41"/></operator><operator pos:line="444" pos:column="41">-<pos:position pos:line="444" pos:column="42"/></operator><literal type="number" pos:line="444" pos:column="42">1<pos:position pos:line="444" pos:column="43"/></literal></expr>)<pos:position pos:line="444" pos:column="44"/></condition><then pos:line="444" pos:column="44"> <block pos:line="444" pos:column="45">{
			<expr_stmt><expr><call><name pos:line="445" pos:column="25">iconv_close<pos:position pos:line="445" pos:column="36"/></name><argument_list pos:line="445" pos:column="36">(<argument><expr><name pos:line="445" pos:column="37">ic_send<pos:position pos:line="445" pos:column="44"/></name></expr></argument>)<pos:position pos:line="445" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="445" pos:column="46"/></expr_stmt>
			<expr_stmt><expr><name pos:line="446" pos:column="25">ic_send<pos:position pos:line="446" pos:column="32"/></name> <operator pos:line="446" pos:column="33">=<pos:position pos:line="446" pos:column="34"/></operator> <operator pos:line="446" pos:column="35">(<pos:position pos:line="446" pos:column="36"/></operator><name pos:line="446" pos:column="36">iconv_t<pos:position pos:line="446" pos:column="43"/></name><operator pos:line="446" pos:column="43">)<pos:position pos:line="446" pos:column="44"/></operator><operator pos:line="446" pos:column="44">-<pos:position pos:line="446" pos:column="45"/></operator><literal type="number" pos:line="446" pos:column="45">1<pos:position pos:line="446" pos:column="46"/></literal></expr>;<pos:position pos:line="446" pos:column="47"/></expr_stmt>
		}<pos:position pos:line="447" pos:column="18"/></block></then></if>
		<if pos:line="448" pos:column="17">if <condition pos:line="448" pos:column="20">(<expr><name pos:line="448" pos:column="21">ic_recv<pos:position pos:line="448" pos:column="28"/></name> <operator pos:line="448" pos:column="29">!=<pos:position pos:line="448" pos:column="31"/></operator> <operator pos:line="448" pos:column="32">(<pos:position pos:line="448" pos:column="33"/></operator><name pos:line="448" pos:column="33">iconv_t<pos:position pos:line="448" pos:column="40"/></name><operator pos:line="448" pos:column="40">)<pos:position pos:line="448" pos:column="41"/></operator><operator pos:line="448" pos:column="41">-<pos:position pos:line="448" pos:column="42"/></operator><literal type="number" pos:line="448" pos:column="42">1<pos:position pos:line="448" pos:column="43"/></literal></expr>)<pos:position pos:line="448" pos:column="44"/></condition><then pos:line="448" pos:column="44"> <block pos:line="448" pos:column="45">{
			<expr_stmt><expr><call><name pos:line="449" pos:column="25">iconv_close<pos:position pos:line="449" pos:column="36"/></name><argument_list pos:line="449" pos:column="36">(<argument><expr><name pos:line="449" pos:column="37">ic_recv<pos:position pos:line="449" pos:column="44"/></name></expr></argument>)<pos:position pos:line="449" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="449" pos:column="46"/></expr_stmt>
			<expr_stmt><expr><name pos:line="450" pos:column="25">ic_recv<pos:position pos:line="450" pos:column="32"/></name> <operator pos:line="450" pos:column="33">=<pos:position pos:line="450" pos:column="34"/></operator> <operator pos:line="450" pos:column="35">(<pos:position pos:line="450" pos:column="36"/></operator><name pos:line="450" pos:column="36">iconv_t<pos:position pos:line="450" pos:column="43"/></name><operator pos:line="450" pos:column="43">)<pos:position pos:line="450" pos:column="44"/></operator><operator pos:line="450" pos:column="44">-<pos:position pos:line="450" pos:column="45"/></operator><literal type="number" pos:line="450" pos:column="45">1<pos:position pos:line="450" pos:column="46"/></literal></expr>;<pos:position pos:line="450" pos:column="47"/></expr_stmt>
		}<pos:position pos:line="451" pos:column="18"/></block></then></if>
	}<pos:position pos:line="452" pos:column="10"/></block></then></if>
<cpp:endif pos:line="453" pos:column="1">#<cpp:directive pos:line="453" pos:column="2">endif<pos:position pos:line="453" pos:column="7"/></cpp:directive></cpp:endif>

	<if pos:line="455" pos:column="9">if <condition pos:line="455" pos:column="12">(<expr><operator pos:line="455" pos:column="13">!<pos:position pos:line="455" pos:column="14"/></operator><name pos:line="455" pos:column="14">numeric_ids<pos:position pos:line="455" pos:column="25"/></name>
	 <operator pos:line="456" pos:column="10">&amp;&amp;<pos:position pos:line="456" pos:column="20"/></operator> <operator pos:line="456" pos:column="13">(<pos:position pos:line="456" pos:column="14"/></operator><ternary><condition><expr><name pos:line="456" pos:column="14">use_chroot<pos:position pos:line="456" pos:column="24"/></name></expr> ?<pos:position pos:line="456" pos:column="26"/></condition><then pos:line="456" pos:column="26"> <expr><call><name pos:line="456" pos:column="27">lp_numeric_ids<pos:position pos:line="456" pos:column="41"/></name><argument_list pos:line="456" pos:column="41">(<argument><expr><name pos:line="456" pos:column="42">i<pos:position pos:line="456" pos:column="43"/></name></expr></argument>)<pos:position pos:line="456" pos:column="44"/></argument_list></call> <operator pos:line="456" pos:column="45">!=<pos:position pos:line="456" pos:column="47"/></operator> <name pos:line="456" pos:column="48">False<pos:position pos:line="456" pos:column="53"/></name></expr> <pos:position pos:line="456" pos:column="54"/></then><else pos:line="456" pos:column="54">: <expr><call><name pos:line="456" pos:column="56">lp_numeric_ids<pos:position pos:line="456" pos:column="70"/></name><argument_list pos:line="456" pos:column="70">(<argument><expr><name pos:line="456" pos:column="71">i<pos:position pos:line="456" pos:column="72"/></name></expr></argument>)<pos:position pos:line="456" pos:column="73"/></argument_list></call> <operator pos:line="456" pos:column="74">==<pos:position pos:line="456" pos:column="76"/></operator> <name pos:line="456" pos:column="77">True<pos:position pos:line="456" pos:column="81"/></name></expr></else></ternary><operator pos:line="456" pos:column="81">)<pos:position pos:line="456" pos:column="82"/></operator></expr>)<pos:position pos:line="456" pos:column="83"/></condition><then pos:line="456" pos:column="83">
		<block type="pseudo"><expr_stmt><expr><name pos:line="457" pos:column="17">numeric_ids<pos:position pos:line="457" pos:column="28"/></name> <operator pos:line="457" pos:column="29">=<pos:position pos:line="457" pos:column="30"/></operator> <operator pos:line="457" pos:column="31">-<pos:position pos:line="457" pos:column="32"/></operator><literal type="number" pos:line="457" pos:column="32">1<pos:position pos:line="457" pos:column="33"/></literal></expr>;<pos:position pos:line="457" pos:column="34"/></expr_stmt></block></then></if> <comment type="block" pos:line="457" pos:column="35">/* Set --numeric-ids w/o breaking protocol. */</comment>

	<if pos:line="459" pos:column="9">if <condition pos:line="459" pos:column="12">(<expr><call><name pos:line="459" pos:column="13">lp_timeout<pos:position pos:line="459" pos:column="23"/></name><argument_list pos:line="459" pos:column="23">(<argument><expr><name pos:line="459" pos:column="24">i<pos:position pos:line="459" pos:column="25"/></name></expr></argument>)<pos:position pos:line="459" pos:column="26"/></argument_list></call> <operator pos:line="459" pos:column="27">&amp;&amp;<pos:position pos:line="459" pos:column="37"/></operator> <operator pos:line="459" pos:column="30">(<pos:position pos:line="459" pos:column="31"/></operator><operator pos:line="459" pos:column="31">!<pos:position pos:line="459" pos:column="32"/></operator><name pos:line="459" pos:column="32">io_timeout<pos:position pos:line="459" pos:column="42"/></name> <operator pos:line="459" pos:column="43">||<pos:position pos:line="459" pos:column="45"/></operator> <call><name pos:line="459" pos:column="46">lp_timeout<pos:position pos:line="459" pos:column="56"/></name><argument_list pos:line="459" pos:column="56">(<argument><expr><name pos:line="459" pos:column="57">i<pos:position pos:line="459" pos:column="58"/></name></expr></argument>)<pos:position pos:line="459" pos:column="59"/></argument_list></call> <operator pos:line="459" pos:column="60">&lt;<pos:position pos:line="459" pos:column="64"/></operator> <name pos:line="459" pos:column="62">io_timeout<pos:position pos:line="459" pos:column="72"/></name><operator pos:line="459" pos:column="72">)<pos:position pos:line="459" pos:column="73"/></operator></expr>)<pos:position pos:line="459" pos:column="74"/></condition><then pos:line="459" pos:column="74">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="460" pos:column="17">set_io_timeout<pos:position pos:line="460" pos:column="31"/></name><argument_list pos:line="460" pos:column="31">(<argument><expr><call><name pos:line="460" pos:column="32">lp_timeout<pos:position pos:line="460" pos:column="42"/></name><argument_list pos:line="460" pos:column="42">(<argument><expr><name pos:line="460" pos:column="43">i<pos:position pos:line="460" pos:column="44"/></name></expr></argument>)<pos:position pos:line="460" pos:column="45"/></argument_list></call></expr></argument>)<pos:position pos:line="460" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="460" pos:column="47"/></expr_stmt></block></then></if>

	<comment type="block" pos:line="462" pos:column="9">/* If we have some incoming/outgoing chmod changes, append them to
	 * any user-specified changes (making our changes have priority).
	 * We also get a pointer to just our changes so that a receiver
	 * process can use them separately if --perms wasn't specified. */</comment>
	<if pos:line="466" pos:column="9">if <condition pos:line="466" pos:column="12">(<expr><name pos:line="466" pos:column="13">am_sender<pos:position pos:line="466" pos:column="22"/></name></expr>)<pos:position pos:line="466" pos:column="23"/></condition><then pos:line="466" pos:column="23">
		<block type="pseudo"><expr_stmt><expr><name pos:line="467" pos:column="17">p<pos:position pos:line="467" pos:column="18"/></name> <operator pos:line="467" pos:column="19">=<pos:position pos:line="467" pos:column="20"/></operator> <call><name pos:line="467" pos:column="21">lp_outgoing_chmod<pos:position pos:line="467" pos:column="38"/></name><argument_list pos:line="467" pos:column="38">(<argument><expr><name pos:line="467" pos:column="39">i<pos:position pos:line="467" pos:column="40"/></name></expr></argument>)<pos:position pos:line="467" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="467" pos:column="42"/></expr_stmt></block></then>
	<else pos:line="468" pos:column="9">else
		<block type="pseudo"><expr_stmt><expr><name pos:line="469" pos:column="17">p<pos:position pos:line="469" pos:column="18"/></name> <operator pos:line="469" pos:column="19">=<pos:position pos:line="469" pos:column="20"/></operator> <call><name pos:line="469" pos:column="21">lp_incoming_chmod<pos:position pos:line="469" pos:column="38"/></name><argument_list pos:line="469" pos:column="38">(<argument><expr><name pos:line="469" pos:column="39">i<pos:position pos:line="469" pos:column="40"/></name></expr></argument>)<pos:position pos:line="469" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="469" pos:column="42"/></expr_stmt></block></else></if>
	<if pos:line="470" pos:column="9">if <condition pos:line="470" pos:column="12">(<expr><operator pos:line="470" pos:column="13">*<pos:position pos:line="470" pos:column="14"/></operator><name pos:line="470" pos:column="14">p<pos:position pos:line="470" pos:column="15"/></name> <operator pos:line="470" pos:column="16">&amp;&amp;<pos:position pos:line="470" pos:column="26"/></operator> <operator pos:line="470" pos:column="19">!<pos:position pos:line="470" pos:column="20"/></operator><operator pos:line="470" pos:column="20">(<pos:position pos:line="470" pos:column="21"/></operator><name pos:line="470" pos:column="21">daemon_chmod_modes<pos:position pos:line="470" pos:column="39"/></name> <operator pos:line="470" pos:column="40">=<pos:position pos:line="470" pos:column="41"/></operator> <call><name pos:line="470" pos:column="42">parse_chmod<pos:position pos:line="470" pos:column="53"/></name><argument_list pos:line="470" pos:column="53">(<argument><expr><name pos:line="470" pos:column="54">p<pos:position pos:line="470" pos:column="55"/></name></expr></argument>, <argument><expr><operator pos:line="470" pos:column="57">&amp;<pos:position pos:line="470" pos:column="62"/></operator><name pos:line="470" pos:column="58">chmod_modes<pos:position pos:line="470" pos:column="69"/></name></expr></argument>)<pos:position pos:line="470" pos:column="70"/></argument_list></call><operator pos:line="470" pos:column="70">)<pos:position pos:line="470" pos:column="71"/></operator></expr>)<pos:position pos:line="470" pos:column="72"/></condition><then pos:line="470" pos:column="72"> <block pos:line="470" pos:column="73">{
		<expr_stmt><expr><call><name pos:line="471" pos:column="17">rprintf<pos:position pos:line="471" pos:column="24"/></name><argument_list pos:line="471" pos:column="24">(<argument><expr><name pos:line="471" pos:column="25">FLOG<pos:position pos:line="471" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="471" pos:column="31">"Invalid \"%sing chmod\" directive: %s\n"<pos:position pos:line="471" pos:column="72"/></literal></expr></argument>,
			<argument><expr><ternary><condition><expr><name pos:line="472" pos:column="25">am_sender<pos:position pos:line="472" pos:column="34"/></name></expr> ?<pos:position pos:line="472" pos:column="36"/></condition><then pos:line="472" pos:column="36"> <expr><literal type="string" pos:line="472" pos:column="37">"outgo"<pos:position pos:line="472" pos:column="44"/></literal></expr> <pos:position pos:line="472" pos:column="45"/></then><else pos:line="472" pos:column="45">: <expr><literal type="string" pos:line="472" pos:column="47">"incom"<pos:position pos:line="472" pos:column="54"/></literal></expr></else></ternary></expr></argument>, <argument><expr><name pos:line="472" pos:column="56">p<pos:position pos:line="472" pos:column="57"/></name></expr></argument>)<pos:position pos:line="472" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="472" pos:column="59"/></expr_stmt>
	}<pos:position pos:line="473" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="475" pos:column="9">start_server<pos:position pos:line="475" pos:column="21"/></name><argument_list pos:line="475" pos:column="21">(<argument><expr><name pos:line="475" pos:column="22">f_in<pos:position pos:line="475" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="475" pos:column="28">f_out<pos:position pos:line="475" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="475" pos:column="35">argc<pos:position pos:line="475" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="475" pos:column="41">argv<pos:position pos:line="475" pos:column="45"/></name></expr></argument>)<pos:position pos:line="475" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="475" pos:column="47"/></expr_stmt>

	<return pos:line="477" pos:column="9">return <expr><literal type="number" pos:line="477" pos:column="16">0<pos:position pos:line="477" pos:column="17"/></literal></expr>;<pos:position pos:line="477" pos:column="18"/></return>
}<pos:position pos:line="478" pos:column="2"/></block></function></unit>
