<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_591_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">do_server_recv<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name pos:line="1" pos:column="28">int<pos:position pos:line="1" pos:column="31"/></name></type> <name pos:line="1" pos:column="32">f_in<pos:position pos:line="1" pos:column="36"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="38">int<pos:position pos:line="1" pos:column="41"/></name></type> <name pos:line="1" pos:column="42">f_out<pos:position pos:line="1" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="49">int<pos:position pos:line="1" pos:column="52"/></name></type> <name pos:line="1" pos:column="53">argc<pos:position pos:line="1" pos:column="57"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="59">char<pos:position pos:line="1" pos:column="63"/></name> <modifier pos:line="1" pos:column="64">*<pos:position pos:line="1" pos:column="65"/></modifier></type><name><name pos:line="1" pos:column="65">argv<pos:position pos:line="1" pos:column="69"/></name><index pos:line="1" pos:column="69">[]<pos:position pos:line="1" pos:column="71"/></index></name></decl></parameter>)<pos:position pos:line="1" pos:column="72"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">exit_code<pos:position pos:line="3" pos:column="22"/></name></decl>;<pos:position pos:line="3" pos:column="23"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">file_list<pos:position pos:line="4" pos:column="25"/></name></name> <modifier pos:line="4" pos:column="26">*<pos:position pos:line="4" pos:column="27"/></modifier></type><name pos:line="4" pos:column="27">flist<pos:position pos:line="4" pos:column="32"/></name></decl>;<pos:position pos:line="4" pos:column="33"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">char<pos:position pos:line="5" pos:column="13"/></name> <modifier pos:line="5" pos:column="14">*<pos:position pos:line="5" pos:column="15"/></modifier></type><name pos:line="5" pos:column="15">local_name<pos:position pos:line="5" pos:column="25"/></name> <init pos:line="5" pos:column="26">= <expr><name pos:line="5" pos:column="28">NULL<pos:position pos:line="5" pos:column="32"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="33"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">negated_levels<pos:position pos:line="6" pos:column="27"/></name></decl>;<pos:position pos:line="6" pos:column="28"/></decl_stmt>

	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><name pos:line="8" pos:column="13">filesfrom_fd<pos:position pos:line="8" pos:column="25"/></name> <operator pos:line="8" pos:column="26">&gt;=<pos:position pos:line="8" pos:column="31"/></operator> <literal type="number" pos:line="8" pos:column="29">0<pos:position pos:line="8" pos:column="30"/></literal> <operator pos:line="8" pos:column="31">&amp;&amp;<pos:position pos:line="8" pos:column="41"/></operator> <operator pos:line="8" pos:column="34">!<pos:position pos:line="8" pos:column="35"/></operator><name pos:line="8" pos:column="35">msgs2stderr<pos:position pos:line="8" pos:column="46"/></name> <operator pos:line="8" pos:column="47">&amp;&amp;<pos:position pos:line="8" pos:column="57"/></operator> <name pos:line="8" pos:column="50">protocol_version<pos:position pos:line="8" pos:column="66"/></name> <operator pos:line="8" pos:column="67">&lt;<pos:position pos:line="8" pos:column="71"/></operator> <literal type="number" pos:line="8" pos:column="69">31<pos:position pos:line="8" pos:column="71"/></literal></expr>)<pos:position pos:line="8" pos:column="72"/></condition><then pos:line="8" pos:column="72"> <block pos:line="8" pos:column="73">{
		<comment type="block" pos:line="9" pos:column="17">/* We can't mix messages with files-from data on the socket,
		 * so temporarily turn off info/debug messages. */</comment>
		<expr_stmt><expr><call><name pos:line="11" pos:column="17">negate_output_levels<pos:position pos:line="11" pos:column="37"/></name><argument_list pos:line="11" pos:column="37">()<pos:position pos:line="11" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="40"/></expr_stmt>
		<expr_stmt><expr><name pos:line="12" pos:column="17">negated_levels<pos:position pos:line="12" pos:column="31"/></name> <operator pos:line="12" pos:column="32">=<pos:position pos:line="12" pos:column="33"/></operator> <literal type="number" pos:line="12" pos:column="34">1<pos:position pos:line="12" pos:column="35"/></literal></expr>;<pos:position pos:line="12" pos:column="36"/></expr_stmt>
	}<pos:position pos:line="13" pos:column="10"/></block></then> <else pos:line="13" pos:column="11">else
		<block type="pseudo"><expr_stmt><expr><name pos:line="14" pos:column="17">negated_levels<pos:position pos:line="14" pos:column="31"/></name> <operator pos:line="14" pos:column="32">=<pos:position pos:line="14" pos:column="33"/></operator> <literal type="number" pos:line="14" pos:column="34">0<pos:position pos:line="14" pos:column="35"/></literal></expr>;<pos:position pos:line="14" pos:column="36"/></expr_stmt></block></else></if>

	<if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><call><name pos:line="16" pos:column="13">DEBUG_GTE<pos:position pos:line="16" pos:column="22"/></name><argument_list pos:line="16" pos:column="22">(<argument><expr><name pos:line="16" pos:column="23">RECV<pos:position pos:line="16" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="16" pos:column="29">1<pos:position pos:line="16" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="31"/></argument_list></call></expr>)<pos:position pos:line="16" pos:column="32"/></condition><then pos:line="16" pos:column="32">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="17" pos:column="17">rprintf<pos:position pos:line="17" pos:column="24"/></name><argument_list pos:line="17" pos:column="24">(<argument><expr><name pos:line="17" pos:column="25">FINFO<pos:position pos:line="17" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="32">"server_recv(%d) starting pid=%d\n"<pos:position pos:line="17" pos:column="67"/></literal></expr></argument>, <argument><expr><name pos:line="17" pos:column="69">argc<pos:position pos:line="17" pos:column="73"/></name></expr></argument>, <argument><expr><operator pos:line="17" pos:column="75">(<pos:position pos:line="17" pos:column="76"/></operator><name pos:line="17" pos:column="76">int<pos:position pos:line="17" pos:column="79"/></name><operator pos:line="17" pos:column="79">)<pos:position pos:line="17" pos:column="80"/></operator><call><name pos:line="17" pos:column="80">getpid<pos:position pos:line="17" pos:column="86"/></name><argument_list pos:line="17" pos:column="86">()<pos:position pos:line="17" pos:column="88"/></argument_list></call></expr></argument>)<pos:position pos:line="17" pos:column="89"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="90"/></expr_stmt></block></then></if>

	<if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><name pos:line="19" pos:column="13">am_daemon<pos:position pos:line="19" pos:column="22"/></name> <operator pos:line="19" pos:column="23">&amp;&amp;<pos:position pos:line="19" pos:column="33"/></operator> <name pos:line="19" pos:column="26">read_only<pos:position pos:line="19" pos:column="35"/></name></expr>)<pos:position pos:line="19" pos:column="36"/></condition><then pos:line="19" pos:column="36"> <block pos:line="19" pos:column="37">{
		<expr_stmt><expr><call><name pos:line="20" pos:column="17">rprintf<pos:position pos:line="20" pos:column="24"/></name><argument_list pos:line="20" pos:column="24">(<argument><expr><name pos:line="20" pos:column="25">FERROR<pos:position pos:line="20" pos:column="31"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="20" pos:column="32">"ERROR: module is read only\n"<pos:position pos:line="20" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="64"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="21" pos:column="17">exit_cleanup<pos:position pos:line="21" pos:column="29"/></name><argument_list pos:line="21" pos:column="29">(<argument><expr><name pos:line="21" pos:column="30">RERR_SYNTAX<pos:position pos:line="21" pos:column="41"/></name></expr></argument>)<pos:position pos:line="21" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="43"/></expr_stmt>
		<return pos:line="22" pos:column="17">return;<pos:position pos:line="22" pos:column="24"/></return>
	}<pos:position pos:line="23" pos:column="10"/></block></then></if>

	<if pos:line="25" pos:column="9">if <condition pos:line="25" pos:column="12">(<expr><name pos:line="25" pos:column="13">argc<pos:position pos:line="25" pos:column="17"/></name> <operator pos:line="25" pos:column="18">&gt;<pos:position pos:line="25" pos:column="22"/></operator> <literal type="number" pos:line="25" pos:column="20">0<pos:position pos:line="25" pos:column="21"/></literal></expr>)<pos:position pos:line="25" pos:column="22"/></condition><then pos:line="25" pos:column="22"> <block pos:line="25" pos:column="23">{
		<decl_stmt><decl><type><name pos:line="26" pos:column="17">char<pos:position pos:line="26" pos:column="21"/></name> <modifier pos:line="26" pos:column="22">*<pos:position pos:line="26" pos:column="23"/></modifier></type><name pos:line="26" pos:column="23">dir<pos:position pos:line="26" pos:column="26"/></name> <init pos:line="26" pos:column="27">= <expr><name><name pos:line="26" pos:column="29">argv<pos:position pos:line="26" pos:column="33"/></name><index pos:line="26" pos:column="33">[<expr><literal type="number" pos:line="26" pos:column="34">0<pos:position pos:line="26" pos:column="35"/></literal></expr>]<pos:position pos:line="26" pos:column="36"/></index></name></expr></init></decl>;<pos:position pos:line="26" pos:column="37"/></decl_stmt>
		<expr_stmt><expr><name pos:line="27" pos:column="17">argc<pos:position pos:line="27" pos:column="21"/></name><operator pos:line="27" pos:column="21">--<pos:position pos:line="27" pos:column="23"/></operator></expr>;<pos:position pos:line="27" pos:column="24"/></expr_stmt>
		<expr_stmt><expr><name pos:line="28" pos:column="17">argv<pos:position pos:line="28" pos:column="21"/></name><operator pos:line="28" pos:column="21">++<pos:position pos:line="28" pos:column="23"/></operator></expr>;<pos:position pos:line="28" pos:column="24"/></expr_stmt>
		<if pos:line="29" pos:column="17">if <condition pos:line="29" pos:column="20">(<expr><operator pos:line="29" pos:column="21">!<pos:position pos:line="29" pos:column="22"/></operator><name pos:line="29" pos:column="22">am_daemon<pos:position pos:line="29" pos:column="31"/></name> <operator pos:line="29" pos:column="32">&amp;&amp;<pos:position pos:line="29" pos:column="42"/></operator> <operator pos:line="29" pos:column="35">!<pos:position pos:line="29" pos:column="36"/></operator><call><name pos:line="29" pos:column="36">change_dir<pos:position pos:line="29" pos:column="46"/></name><argument_list pos:line="29" pos:column="46">(<argument><expr><name pos:line="29" pos:column="47">dir<pos:position pos:line="29" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="52">CD_NORMAL<pos:position pos:line="29" pos:column="61"/></name></expr></argument>)<pos:position pos:line="29" pos:column="62"/></argument_list></call></expr>)<pos:position pos:line="29" pos:column="63"/></condition><then pos:line="29" pos:column="63"> <block pos:line="29" pos:column="64">{
			<expr_stmt><expr><call><name pos:line="30" pos:column="25">rsyserr<pos:position pos:line="30" pos:column="32"/></name><argument_list pos:line="30" pos:column="32">(<argument><expr><name pos:line="30" pos:column="33">FERROR<pos:position pos:line="30" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="41">errno<pos:position pos:line="30" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="30" pos:column="48">"change_dir#4 %s failed"<pos:position pos:line="30" pos:column="72"/></literal></expr></argument>,
				<argument><expr><call><name pos:line="31" pos:column="33">full_fname<pos:position pos:line="31" pos:column="43"/></name><argument_list pos:line="31" pos:column="43">(<argument><expr><name pos:line="31" pos:column="44">dir<pos:position pos:line="31" pos:column="47"/></name></expr></argument>)<pos:position pos:line="31" pos:column="48"/></argument_list></call></expr></argument>)<pos:position pos:line="31" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="50"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="32" pos:column="25">exit_cleanup<pos:position pos:line="32" pos:column="37"/></name><argument_list pos:line="32" pos:column="37">(<argument><expr><name pos:line="32" pos:column="38">RERR_FILESELECT<pos:position pos:line="32" pos:column="53"/></name></expr></argument>)<pos:position pos:line="32" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="55"/></expr_stmt>
		}<pos:position pos:line="33" pos:column="18"/></block></then></if>
	}<pos:position pos:line="34" pos:column="10"/></block></then></if>

	<if pos:line="36" pos:column="9">if <condition pos:line="36" pos:column="12">(<expr><name pos:line="36" pos:column="13">protocol_version<pos:position pos:line="36" pos:column="29"/></name> <operator pos:line="36" pos:column="30">&gt;=<pos:position pos:line="36" pos:column="35"/></operator> <literal type="number" pos:line="36" pos:column="33">30<pos:position pos:line="36" pos:column="35"/></literal></expr>)<pos:position pos:line="36" pos:column="36"/></condition><then pos:line="36" pos:column="36">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="37" pos:column="17">io_start_multiplex_in<pos:position pos:line="37" pos:column="38"/></name><argument_list pos:line="37" pos:column="38">(<argument><expr><name pos:line="37" pos:column="39">f_in<pos:position pos:line="37" pos:column="43"/></name></expr></argument>)<pos:position pos:line="37" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="45"/></expr_stmt></block></then>
	<else pos:line="38" pos:column="9">else
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="39" pos:column="17">io_start_buffering_in<pos:position pos:line="39" pos:column="38"/></name><argument_list pos:line="39" pos:column="38">(<argument><expr><name pos:line="39" pos:column="39">f_in<pos:position pos:line="39" pos:column="43"/></name></expr></argument>)<pos:position pos:line="39" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="45"/></expr_stmt></block></else></if>
	<expr_stmt><expr><call><name pos:line="40" pos:column="9">recv_filter_list<pos:position pos:line="40" pos:column="25"/></name><argument_list pos:line="40" pos:column="25">(<argument><expr><name pos:line="40" pos:column="26">f_in<pos:position pos:line="40" pos:column="30"/></name></expr></argument>)<pos:position pos:line="40" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="32"/></expr_stmt>

	<if pos:line="42" pos:column="9">if <condition pos:line="42" pos:column="12">(<expr><name pos:line="42" pos:column="13">filesfrom_fd<pos:position pos:line="42" pos:column="25"/></name> <operator pos:line="42" pos:column="26">&gt;=<pos:position pos:line="42" pos:column="31"/></operator> <literal type="number" pos:line="42" pos:column="29">0<pos:position pos:line="42" pos:column="30"/></literal></expr>)<pos:position pos:line="42" pos:column="31"/></condition><then pos:line="42" pos:column="31"> <block pos:line="42" pos:column="32">{
		<comment type="block" pos:line="43" pos:column="17">/* We need to send the files-from names to the sender at the
		 * same time that we receive the file-list from them, so we
		 * need the IO routines to automatically write out the names
		 * onto our f_out socket as we read the file-list.  This
		 * avoids both deadlock and extra delays/buffers. */</comment>
		<expr_stmt><expr><call><name pos:line="48" pos:column="17">start_filesfrom_forwarding<pos:position pos:line="48" pos:column="43"/></name><argument_list pos:line="48" pos:column="43">(<argument><expr><name pos:line="48" pos:column="44">filesfrom_fd<pos:position pos:line="48" pos:column="56"/></name></expr></argument>)<pos:position pos:line="48" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="58"/></expr_stmt>
		<expr_stmt><expr><name pos:line="49" pos:column="17">filesfrom_fd<pos:position pos:line="49" pos:column="29"/></name> <operator pos:line="49" pos:column="30">=<pos:position pos:line="49" pos:column="31"/></operator> <operator pos:line="49" pos:column="32">-<pos:position pos:line="49" pos:column="33"/></operator><literal type="number" pos:line="49" pos:column="33">1<pos:position pos:line="49" pos:column="34"/></literal></expr>;<pos:position pos:line="49" pos:column="35"/></expr_stmt>
	}<pos:position pos:line="50" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="52" pos:column="9">flist<pos:position pos:line="52" pos:column="14"/></name> <operator pos:line="52" pos:column="15">=<pos:position pos:line="52" pos:column="16"/></operator> <call><name pos:line="52" pos:column="17">recv_file_list<pos:position pos:line="52" pos:column="31"/></name><argument_list pos:line="52" pos:column="31">(<argument><expr><name pos:line="52" pos:column="32">f_in<pos:position pos:line="52" pos:column="36"/></name></expr></argument>, <argument><expr><operator pos:line="52" pos:column="38">-<pos:position pos:line="52" pos:column="39"/></operator><literal type="number" pos:line="52" pos:column="39">1<pos:position pos:line="52" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="52" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="42"/></expr_stmt>
	<if pos:line="53" pos:column="9">if <condition pos:line="53" pos:column="12">(<expr><operator pos:line="53" pos:column="13">!<pos:position pos:line="53" pos:column="14"/></operator><name pos:line="53" pos:column="14">flist<pos:position pos:line="53" pos:column="19"/></name></expr>)<pos:position pos:line="53" pos:column="20"/></condition><then pos:line="53" pos:column="20"> <block pos:line="53" pos:column="21">{
		<expr_stmt><expr><call><name pos:line="54" pos:column="17">rprintf<pos:position pos:line="54" pos:column="24"/></name><argument_list pos:line="54" pos:column="24">(<argument><expr><name pos:line="54" pos:column="25">FERROR<pos:position pos:line="54" pos:column="31"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="54" pos:column="32">"server_recv: recv_file_list error\n"<pos:position pos:line="54" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="54" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="71"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="55" pos:column="17">exit_cleanup<pos:position pos:line="55" pos:column="29"/></name><argument_list pos:line="55" pos:column="29">(<argument><expr><name pos:line="55" pos:column="30">RERR_FILESELECT<pos:position pos:line="55" pos:column="45"/></name></expr></argument>)<pos:position pos:line="55" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="47"/></expr_stmt>
	}<pos:position pos:line="56" pos:column="10"/></block></then></if>
	<if pos:line="57" pos:column="9">if <condition pos:line="57" pos:column="12">(<expr><name pos:line="57" pos:column="13">inc_recurse<pos:position pos:line="57" pos:column="24"/></name> <operator pos:line="57" pos:column="25">&amp;&amp;<pos:position pos:line="57" pos:column="35"/></operator> <name pos:line="57" pos:column="28">file_total<pos:position pos:line="57" pos:column="38"/></name> <operator pos:line="57" pos:column="39">==<pos:position pos:line="57" pos:column="41"/></operator> <literal type="number" pos:line="57" pos:column="42">1<pos:position pos:line="57" pos:column="43"/></literal></expr>)<pos:position pos:line="57" pos:column="44"/></condition><then pos:line="57" pos:column="44">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="58" pos:column="17">recv_additional_file_list<pos:position pos:line="58" pos:column="42"/></name><argument_list pos:line="58" pos:column="42">(<argument><expr><name pos:line="58" pos:column="43">f_in<pos:position pos:line="58" pos:column="47"/></name></expr></argument>)<pos:position pos:line="58" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="49"/></expr_stmt></block></then></if>

	<if pos:line="60" pos:column="9">if <condition pos:line="60" pos:column="12">(<expr><name pos:line="60" pos:column="13">negated_levels<pos:position pos:line="60" pos:column="27"/></name></expr>)<pos:position pos:line="60" pos:column="28"/></condition><then pos:line="60" pos:column="28">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="61" pos:column="17">negate_output_levels<pos:position pos:line="61" pos:column="37"/></name><argument_list pos:line="61" pos:column="37">()<pos:position pos:line="61" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="40"/></expr_stmt></block></then></if>

	<if pos:line="63" pos:column="9">if <condition pos:line="63" pos:column="12">(<expr><name pos:line="63" pos:column="13">argc<pos:position pos:line="63" pos:column="17"/></name> <operator pos:line="63" pos:column="18">&gt;<pos:position pos:line="63" pos:column="22"/></operator> <literal type="number" pos:line="63" pos:column="20">0<pos:position pos:line="63" pos:column="21"/></literal></expr>)<pos:position pos:line="63" pos:column="22"/></condition><then pos:line="63" pos:column="22">
		<block type="pseudo"><expr_stmt><expr><name pos:line="64" pos:column="17">local_name<pos:position pos:line="64" pos:column="27"/></name> <operator pos:line="64" pos:column="28">=<pos:position pos:line="64" pos:column="29"/></operator> <call><name pos:line="64" pos:column="30">get_local_name<pos:position pos:line="64" pos:column="44"/></name><argument_list pos:line="64" pos:column="44">(<argument><expr><name pos:line="64" pos:column="45">flist<pos:position pos:line="64" pos:column="50"/></name></expr></argument>,<argument><expr><name><name pos:line="64" pos:column="51">argv<pos:position pos:line="64" pos:column="55"/></name><index pos:line="64" pos:column="55">[<expr><literal type="number" pos:line="64" pos:column="56">0<pos:position pos:line="64" pos:column="57"/></literal></expr>]<pos:position pos:line="64" pos:column="58"/></index></name></expr></argument>)<pos:position pos:line="64" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="60"/></expr_stmt></block></then></if>

	<comment type="block" pos:line="66" pos:column="9">/* Now that we know what our destination directory turned out to be,
	 * we can sanitize the --link-/copy-/compare-dest args correctly. */</comment>
	<if pos:line="68" pos:column="9">if <condition pos:line="68" pos:column="12">(<expr><name pos:line="68" pos:column="13">sanitize_paths<pos:position pos:line="68" pos:column="27"/></name></expr>)<pos:position pos:line="68" pos:column="28"/></condition><then pos:line="68" pos:column="28"> <block pos:line="68" pos:column="29">{
		<decl_stmt><decl><type><name pos:line="69" pos:column="17">char<pos:position pos:line="69" pos:column="21"/></name> <modifier pos:line="69" pos:column="22">*<pos:position pos:line="69" pos:column="23"/></modifier><modifier pos:line="69" pos:column="23">*<pos:position pos:line="69" pos:column="24"/></modifier></type><name pos:line="69" pos:column="24">dir_p<pos:position pos:line="69" pos:column="29"/></name></decl>;<pos:position pos:line="69" pos:column="30"/></decl_stmt>
		<for pos:line="70" pos:column="17">for <control pos:line="70" pos:column="21">(<init><expr><name pos:line="70" pos:column="22">dir_p<pos:position pos:line="70" pos:column="27"/></name> <operator pos:line="70" pos:column="28">=<pos:position pos:line="70" pos:column="29"/></operator> <name pos:line="70" pos:column="30">basis_dir<pos:position pos:line="70" pos:column="39"/></name></expr>;<pos:position pos:line="70" pos:column="40"/></init> <condition><expr><operator pos:line="70" pos:column="41">*<pos:position pos:line="70" pos:column="42"/></operator><name pos:line="70" pos:column="42">dir_p<pos:position pos:line="70" pos:column="47"/></name></expr>;<pos:position pos:line="70" pos:column="48"/></condition> <incr><expr><name pos:line="70" pos:column="49">dir_p<pos:position pos:line="70" pos:column="54"/></name><operator pos:line="70" pos:column="54">++<pos:position pos:line="70" pos:column="56"/></operator></expr></incr>)<pos:position pos:line="70" pos:column="57"/></control>
			<block type="pseudo"><expr_stmt><expr><operator pos:line="71" pos:column="25">*<pos:position pos:line="71" pos:column="26"/></operator><name pos:line="71" pos:column="26">dir_p<pos:position pos:line="71" pos:column="31"/></name> <operator pos:line="71" pos:column="32">=<pos:position pos:line="71" pos:column="33"/></operator> <call><name pos:line="71" pos:column="34">sanitize_path<pos:position pos:line="71" pos:column="47"/></name><argument_list pos:line="71" pos:column="47">(<argument><expr><name pos:line="71" pos:column="48">NULL<pos:position pos:line="71" pos:column="52"/></name></expr></argument>, <argument><expr><operator pos:line="71" pos:column="54">*<pos:position pos:line="71" pos:column="55"/></operator><name pos:line="71" pos:column="55">dir_p<pos:position pos:line="71" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="71" pos:column="62">NULL<pos:position pos:line="71" pos:column="66"/></name></expr></argument>, <argument><expr><name pos:line="71" pos:column="68">curr_dir_depth<pos:position pos:line="71" pos:column="82"/></name></expr></argument>, <argument><expr><name pos:line="71" pos:column="84">SP_DEFAULT<pos:position pos:line="71" pos:column="94"/></name></expr></argument>)<pos:position pos:line="71" pos:column="95"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="96"/></expr_stmt></block></for>
		<if pos:line="72" pos:column="17">if <condition pos:line="72" pos:column="20">(<expr><name pos:line="72" pos:column="21">partial_dir<pos:position pos:line="72" pos:column="32"/></name></expr>)<pos:position pos:line="72" pos:column="33"/></condition><then pos:line="72" pos:column="33">
			<block type="pseudo"><expr_stmt><expr><name pos:line="73" pos:column="25">partial_dir<pos:position pos:line="73" pos:column="36"/></name> <operator pos:line="73" pos:column="37">=<pos:position pos:line="73" pos:column="38"/></operator> <call><name pos:line="73" pos:column="39">sanitize_path<pos:position pos:line="73" pos:column="52"/></name><argument_list pos:line="73" pos:column="52">(<argument><expr><name pos:line="73" pos:column="53">NULL<pos:position pos:line="73" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="73" pos:column="59">partial_dir<pos:position pos:line="73" pos:column="70"/></name></expr></argument>, <argument><expr><name pos:line="73" pos:column="72">NULL<pos:position pos:line="73" pos:column="76"/></name></expr></argument>, <argument><expr><name pos:line="73" pos:column="78">curr_dir_depth<pos:position pos:line="73" pos:column="92"/></name></expr></argument>, <argument><expr><name pos:line="73" pos:column="94">SP_DEFAULT<pos:position pos:line="73" pos:column="104"/></name></expr></argument>)<pos:position pos:line="73" pos:column="105"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="106"/></expr_stmt></block></then></if>
	}<pos:position pos:line="74" pos:column="10"/></block></then></if>
	<expr_stmt><expr><call><name pos:line="75" pos:column="9">check_alt_basis_dirs<pos:position pos:line="75" pos:column="29"/></name><argument_list pos:line="75" pos:column="29">()<pos:position pos:line="75" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="32"/></expr_stmt>

	<if pos:line="77" pos:column="9">if <condition pos:line="77" pos:column="12">(<expr><name><name pos:line="77" pos:column="13">daemon_filter_list<pos:position pos:line="77" pos:column="31"/></name><operator pos:line="77" pos:column="31">.<pos:position pos:line="77" pos:column="32"/></operator><name pos:line="77" pos:column="32">head<pos:position pos:line="77" pos:column="36"/></name></name></expr>)<pos:position pos:line="77" pos:column="37"/></condition><then pos:line="77" pos:column="37"> <block pos:line="77" pos:column="38">{
		<decl_stmt><decl><type><name pos:line="78" pos:column="17">char<pos:position pos:line="78" pos:column="21"/></name> <modifier pos:line="78" pos:column="22">*<pos:position pos:line="78" pos:column="23"/></modifier><modifier pos:line="78" pos:column="23">*<pos:position pos:line="78" pos:column="24"/></modifier></type><name pos:line="78" pos:column="24">dir_p<pos:position pos:line="78" pos:column="29"/></name></decl>;<pos:position pos:line="78" pos:column="30"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="79" pos:column="17">filter_rule_list<pos:position pos:line="79" pos:column="33"/></name> <modifier pos:line="79" pos:column="34">*<pos:position pos:line="79" pos:column="35"/></modifier></type><name pos:line="79" pos:column="35">elp<pos:position pos:line="79" pos:column="38"/></name> <init pos:line="79" pos:column="39">= <expr><operator pos:line="79" pos:column="41">&amp;<pos:position pos:line="79" pos:column="46"/></operator><name pos:line="79" pos:column="42">daemon_filter_list<pos:position pos:line="79" pos:column="60"/></name></expr></init></decl>;<pos:position pos:line="79" pos:column="61"/></decl_stmt>

		<for pos:line="81" pos:column="17">for <control pos:line="81" pos:column="21">(<init><expr><name pos:line="81" pos:column="22">dir_p<pos:position pos:line="81" pos:column="27"/></name> <operator pos:line="81" pos:column="28">=<pos:position pos:line="81" pos:column="29"/></operator> <name pos:line="81" pos:column="30">basis_dir<pos:position pos:line="81" pos:column="39"/></name></expr>;<pos:position pos:line="81" pos:column="40"/></init> <condition><expr><operator pos:line="81" pos:column="41">*<pos:position pos:line="81" pos:column="42"/></operator><name pos:line="81" pos:column="42">dir_p<pos:position pos:line="81" pos:column="47"/></name></expr>;<pos:position pos:line="81" pos:column="48"/></condition> <incr><expr><name pos:line="81" pos:column="49">dir_p<pos:position pos:line="81" pos:column="54"/></name><operator pos:line="81" pos:column="54">++<pos:position pos:line="81" pos:column="56"/></operator></expr></incr>)<pos:position pos:line="81" pos:column="57"/></control> <block pos:line="81" pos:column="58">{
			<decl_stmt><decl><type><name pos:line="82" pos:column="25">char<pos:position pos:line="82" pos:column="29"/></name> <modifier pos:line="82" pos:column="30">*<pos:position pos:line="82" pos:column="31"/></modifier></type><name pos:line="82" pos:column="31">dir<pos:position pos:line="82" pos:column="34"/></name> <init pos:line="82" pos:column="35">= <expr><operator pos:line="82" pos:column="37">*<pos:position pos:line="82" pos:column="38"/></operator><name pos:line="82" pos:column="38">dir_p<pos:position pos:line="82" pos:column="43"/></name></expr></init></decl>;<pos:position pos:line="82" pos:column="44"/></decl_stmt>
			<if pos:line="83" pos:column="25">if <condition pos:line="83" pos:column="28">(<expr><operator pos:line="83" pos:column="29">*<pos:position pos:line="83" pos:column="30"/></operator><name pos:line="83" pos:column="30">dir<pos:position pos:line="83" pos:column="33"/></name> <operator pos:line="83" pos:column="34">==<pos:position pos:line="83" pos:column="36"/></operator> <literal type="char" pos:line="83" pos:column="37">'/'<pos:position pos:line="83" pos:column="40"/></literal></expr>)<pos:position pos:line="83" pos:column="41"/></condition><then pos:line="83" pos:column="41">
				<block type="pseudo"><expr_stmt><expr><name pos:line="84" pos:column="33">dir<pos:position pos:line="84" pos:column="36"/></name> <operator pos:line="84" pos:column="37">+=<pos:position pos:line="84" pos:column="39"/></operator> <name pos:line="84" pos:column="40">module_dirlen<pos:position pos:line="84" pos:column="53"/></name></expr>;<pos:position pos:line="84" pos:column="54"/></expr_stmt></block></then></if>
			<if pos:line="85" pos:column="25">if <condition pos:line="85" pos:column="28">(<expr><call><name pos:line="85" pos:column="29">check_filter<pos:position pos:line="85" pos:column="41"/></name><argument_list pos:line="85" pos:column="41">(<argument><expr><name pos:line="85" pos:column="42">elp<pos:position pos:line="85" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="85" pos:column="47">FLOG<pos:position pos:line="85" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="85" pos:column="53">dir<pos:position pos:line="85" pos:column="56"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="85" pos:column="58">1<pos:position pos:line="85" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="85" pos:column="60"/></argument_list></call> <operator pos:line="85" pos:column="61">&lt;<pos:position pos:line="85" pos:column="65"/></operator> <literal type="number" pos:line="85" pos:column="63">0<pos:position pos:line="85" pos:column="64"/></literal></expr>)<pos:position pos:line="85" pos:column="65"/></condition><then pos:line="85" pos:column="65">
				<block type="pseudo"><goto pos:line="86" pos:column="33">goto <name pos:line="86" pos:column="38">options_rejected<pos:position pos:line="86" pos:column="54"/></name>;<pos:position pos:line="86" pos:column="55"/></goto></block></then></if>
		}<pos:position pos:line="87" pos:column="18"/></block></for>
		<if pos:line="88" pos:column="17">if <condition pos:line="88" pos:column="20">(<expr><name pos:line="88" pos:column="21">partial_dir<pos:position pos:line="88" pos:column="32"/></name> <operator pos:line="88" pos:column="33">&amp;&amp;<pos:position pos:line="88" pos:column="43"/></operator> <operator pos:line="88" pos:column="36">*<pos:position pos:line="88" pos:column="37"/></operator><name pos:line="88" pos:column="37">partial_dir<pos:position pos:line="88" pos:column="48"/></name> <operator pos:line="88" pos:column="49">==<pos:position pos:line="88" pos:column="51"/></operator> <literal type="char" pos:line="88" pos:column="52">'/'<pos:position pos:line="88" pos:column="55"/></literal>
		 <operator pos:line="89" pos:column="18">&amp;&amp;<pos:position pos:line="89" pos:column="28"/></operator> <call><name pos:line="89" pos:column="21">check_filter<pos:position pos:line="89" pos:column="33"/></name><argument_list pos:line="89" pos:column="33">(<argument><expr><name pos:line="89" pos:column="34">elp<pos:position pos:line="89" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="89" pos:column="39">FLOG<pos:position pos:line="89" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="89" pos:column="45">partial_dir<pos:position pos:line="89" pos:column="56"/></name> <operator pos:line="89" pos:column="57">+<pos:position pos:line="89" pos:column="58"/></operator> <name pos:line="89" pos:column="59">module_dirlen<pos:position pos:line="89" pos:column="72"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="89" pos:column="74">1<pos:position pos:line="89" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="89" pos:column="76"/></argument_list></call> <operator pos:line="89" pos:column="77">&lt;<pos:position pos:line="89" pos:column="81"/></operator> <literal type="number" pos:line="89" pos:column="79">0<pos:position pos:line="89" pos:column="80"/></literal></expr>)<pos:position pos:line="89" pos:column="81"/></condition><then pos:line="89" pos:column="81"> <block pos:line="89" pos:column="82">{
		    <label><name pos:line="90" pos:column="21">options_rejected<pos:position pos:line="90" pos:column="37"/></name>:<pos:position pos:line="90" pos:column="38"/></label>
			<expr_stmt><expr><call><name pos:line="91" pos:column="25">rprintf<pos:position pos:line="91" pos:column="32"/></name><argument_list pos:line="91" pos:column="32">(<argument><expr><name pos:line="91" pos:column="33">FERROR<pos:position pos:line="91" pos:column="39"/></name></expr></argument>,
				<argument><expr><literal type="string" pos:line="92" pos:column="33">"Your options have been rejected by the server.\n"<pos:position pos:line="92" pos:column="83"/></literal></expr></argument>)<pos:position pos:line="92" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="85"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="93" pos:column="25">exit_cleanup<pos:position pos:line="93" pos:column="37"/></name><argument_list pos:line="93" pos:column="37">(<argument><expr><name pos:line="93" pos:column="38">RERR_SYNTAX<pos:position pos:line="93" pos:column="49"/></name></expr></argument>)<pos:position pos:line="93" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="51"/></expr_stmt>
		}<pos:position pos:line="94" pos:column="18"/></block></then></if>
	}<pos:position pos:line="95" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="97" pos:column="9">exit_code<pos:position pos:line="97" pos:column="18"/></name> <operator pos:line="97" pos:column="19">=<pos:position pos:line="97" pos:column="20"/></operator> <call><name pos:line="97" pos:column="21">do_recv<pos:position pos:line="97" pos:column="28"/></name><argument_list pos:line="97" pos:column="28">(<argument><expr><name pos:line="97" pos:column="29">f_in<pos:position pos:line="97" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="97" pos:column="35">f_out<pos:position pos:line="97" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="97" pos:column="42">local_name<pos:position pos:line="97" pos:column="52"/></name></expr></argument>)<pos:position pos:line="97" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="54"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="98" pos:column="9">exit_cleanup<pos:position pos:line="98" pos:column="21"/></name><argument_list pos:line="98" pos:column="21">(<argument><expr><name pos:line="98" pos:column="22">exit_code<pos:position pos:line="98" pos:column="31"/></name></expr></argument>)<pos:position pos:line="98" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="33"/></expr_stmt>
}<pos:position pos:line="99" pos:column="2"/></block></function></unit>
