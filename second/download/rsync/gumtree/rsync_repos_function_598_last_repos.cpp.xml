<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_598_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">main<pos:position pos:line="1" pos:column="9"/></name><parameter_list pos:line="1" pos:column="9">(<parameter><decl><type><name pos:line="1" pos:column="10">int<pos:position pos:line="1" pos:column="13"/></name></type> <name pos:line="1" pos:column="14">argc<pos:position pos:line="1" pos:column="18"/></name></decl></parameter>,<parameter><decl><type><name pos:line="1" pos:column="19">char<pos:position pos:line="1" pos:column="23"/></name> <modifier pos:line="1" pos:column="24">*<pos:position pos:line="1" pos:column="25"/></modifier></type><name><name pos:line="1" pos:column="25">argv<pos:position pos:line="1" pos:column="29"/></name><index pos:line="1" pos:column="29">[]<pos:position pos:line="1" pos:column="31"/></index></name></decl></parameter>)<pos:position pos:line="1" pos:column="32"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">ret<pos:position pos:line="3" pos:column="16"/></name></decl>;<pos:position pos:line="3" pos:column="17"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">orig_argc<pos:position pos:line="4" pos:column="22"/></name> <init pos:line="4" pos:column="23">= <expr><name pos:line="4" pos:column="25">argc<pos:position pos:line="4" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="30"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">char<pos:position pos:line="5" pos:column="13"/></name> <modifier pos:line="5" pos:column="14">*<pos:position pos:line="5" pos:column="15"/></modifier><modifier pos:line="5" pos:column="15">*<pos:position pos:line="5" pos:column="16"/></modifier></type><name pos:line="5" pos:column="16">orig_argv<pos:position pos:line="5" pos:column="25"/></name> <init pos:line="5" pos:column="26">= <expr><name pos:line="5" pos:column="28">argv<pos:position pos:line="5" pos:column="32"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="33"/></decl_stmt>
<cpp:ifdef pos:line="6" pos:column="1">#<cpp:directive pos:line="6" pos:column="2">ifdef<pos:position pos:line="6" pos:column="7"/></cpp:directive> <name pos:line="6" pos:column="8">HAVE_SIGACTION<pos:position pos:line="6" pos:column="22"/></name></cpp:ifdef>
<cpp:ifdef pos:line="7" pos:column="1"># <cpp:directive pos:line="7" pos:column="3">ifdef<pos:position pos:line="7" pos:column="8"/></cpp:directive> <name pos:line="7" pos:column="9">HAVE_SIGPROCMASK<pos:position pos:line="7" pos:column="25"/></name></cpp:ifdef>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">sigset_t<pos:position pos:line="8" pos:column="17"/></name></type> <name pos:line="8" pos:column="18">sigmask<pos:position pos:line="8" pos:column="25"/></name></decl>;<pos:position pos:line="8" pos:column="26"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="10" pos:column="9">sigemptyset<pos:position pos:line="10" pos:column="20"/></name><argument_list pos:line="10" pos:column="20">(<argument><expr><operator pos:line="10" pos:column="21">&amp;<pos:position pos:line="10" pos:column="26"/></operator><name pos:line="10" pos:column="22">sigmask<pos:position pos:line="10" pos:column="29"/></name></expr></argument>)<pos:position pos:line="10" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="31"/></expr_stmt>
<cpp:endif pos:line="11" pos:column="1"># <cpp:directive pos:line="11" pos:column="3">endif<pos:position pos:line="11" pos:column="8"/></cpp:directive></cpp:endif>
	<expr_stmt><expr><name><name pos:line="12" pos:column="9">sigact<pos:position pos:line="12" pos:column="15"/></name><operator pos:line="12" pos:column="15">.<pos:position pos:line="12" pos:column="16"/></operator><name pos:line="12" pos:column="16">sa_flags<pos:position pos:line="12" pos:column="24"/></name></name> <operator pos:line="12" pos:column="25">=<pos:position pos:line="12" pos:column="26"/></operator> <name pos:line="12" pos:column="27">SA_NOCLDSTOP<pos:position pos:line="12" pos:column="39"/></name></expr>;<pos:position pos:line="12" pos:column="40"/></expr_stmt>
<cpp:endif pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">endif<pos:position pos:line="13" pos:column="7"/></cpp:directive></cpp:endif>
	<expr_stmt><expr><call><name pos:line="14" pos:column="9">SIGACTMASK<pos:position pos:line="14" pos:column="19"/></name><argument_list pos:line="14" pos:column="19">(<argument><expr><name pos:line="14" pos:column="20">SIGUSR1<pos:position pos:line="14" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="29">sigusr1_handler<pos:position pos:line="14" pos:column="44"/></name></expr></argument>)<pos:position pos:line="14" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="46"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="15" pos:column="9">SIGACTMASK<pos:position pos:line="15" pos:column="19"/></name><argument_list pos:line="15" pos:column="19">(<argument><expr><name pos:line="15" pos:column="20">SIGUSR2<pos:position pos:line="15" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="29">sigusr2_handler<pos:position pos:line="15" pos:column="44"/></name></expr></argument>)<pos:position pos:line="15" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="46"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="16" pos:column="9">SIGACTMASK<pos:position pos:line="16" pos:column="19"/></name><argument_list pos:line="16" pos:column="19">(<argument><expr><name pos:line="16" pos:column="20">SIGCHLD<pos:position pos:line="16" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="29">remember_children<pos:position pos:line="16" pos:column="46"/></name></expr></argument>)<pos:position pos:line="16" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="48"/></expr_stmt>
<cpp:ifdef pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">ifdef<pos:position pos:line="17" pos:column="7"/></cpp:directive> <name pos:line="17" pos:column="8">MAINTAINER_MODE<pos:position pos:line="17" pos:column="23"/></name></cpp:ifdef>
	<expr_stmt><expr><call><name pos:line="18" pos:column="9">SIGACTMASK<pos:position pos:line="18" pos:column="19"/></name><argument_list pos:line="18" pos:column="19">(<argument><expr><name pos:line="18" pos:column="20">SIGSEGV<pos:position pos:line="18" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="29">rsync_panic_handler<pos:position pos:line="18" pos:column="48"/></name></expr></argument>)<pos:position pos:line="18" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="50"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="19" pos:column="9">SIGACTMASK<pos:position pos:line="19" pos:column="19"/></name><argument_list pos:line="19" pos:column="19">(<argument><expr><name pos:line="19" pos:column="20">SIGFPE<pos:position pos:line="19" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="28">rsync_panic_handler<pos:position pos:line="19" pos:column="47"/></name></expr></argument>)<pos:position pos:line="19" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="49"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="20" pos:column="9">SIGACTMASK<pos:position pos:line="20" pos:column="19"/></name><argument_list pos:line="20" pos:column="19">(<argument><expr><name pos:line="20" pos:column="20">SIGABRT<pos:position pos:line="20" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="29">rsync_panic_handler<pos:position pos:line="20" pos:column="48"/></name></expr></argument>)<pos:position pos:line="20" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="50"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="21" pos:column="9">SIGACTMASK<pos:position pos:line="21" pos:column="19"/></name><argument_list pos:line="21" pos:column="19">(<argument><expr><name pos:line="21" pos:column="20">SIGBUS<pos:position pos:line="21" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="28">rsync_panic_handler<pos:position pos:line="21" pos:column="47"/></name></expr></argument>)<pos:position pos:line="21" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="49"/></expr_stmt>
<cpp:endif pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">endif<pos:position pos:line="22" pos:column="7"/></cpp:directive></cpp:endif>

	<expr_stmt><expr><name pos:line="24" pos:column="9">starttime<pos:position pos:line="24" pos:column="18"/></name> <operator pos:line="24" pos:column="19">=<pos:position pos:line="24" pos:column="20"/></operator> <call><name pos:line="24" pos:column="21">time<pos:position pos:line="24" pos:column="25"/></name><argument_list pos:line="24" pos:column="25">(<argument><expr><name pos:line="24" pos:column="26">NULL<pos:position pos:line="24" pos:column="30"/></name></expr></argument>)<pos:position pos:line="24" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="32"/></expr_stmt>
	<expr_stmt><expr><name pos:line="25" pos:column="9">our_uid<pos:position pos:line="25" pos:column="16"/></name> <operator pos:line="25" pos:column="17">=<pos:position pos:line="25" pos:column="18"/></operator> <call><name pos:line="25" pos:column="19">MY_UID<pos:position pos:line="25" pos:column="25"/></name><argument_list pos:line="25" pos:column="25">()<pos:position pos:line="25" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="28"/></expr_stmt>
	<expr_stmt><expr><name pos:line="26" pos:column="9">our_gid<pos:position pos:line="26" pos:column="16"/></name> <operator pos:line="26" pos:column="17">=<pos:position pos:line="26" pos:column="18"/></operator> <call><name pos:line="26" pos:column="19">MY_GID<pos:position pos:line="26" pos:column="25"/></name><argument_list pos:line="26" pos:column="25">()<pos:position pos:line="26" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="28"/></expr_stmt>
	<expr_stmt><expr><name pos:line="27" pos:column="9">am_root<pos:position pos:line="27" pos:column="16"/></name> <operator pos:line="27" pos:column="17">=<pos:position pos:line="27" pos:column="18"/></operator> <name pos:line="27" pos:column="19">our_uid<pos:position pos:line="27" pos:column="26"/></name> <operator pos:line="27" pos:column="27">==<pos:position pos:line="27" pos:column="29"/></operator> <literal type="number" pos:line="27" pos:column="30">0<pos:position pos:line="27" pos:column="31"/></literal></expr>;<pos:position pos:line="27" pos:column="32"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="29" pos:column="9">memset<pos:position pos:line="29" pos:column="15"/></name><argument_list pos:line="29" pos:column="15">(<argument><expr><operator pos:line="29" pos:column="16">&amp;<pos:position pos:line="29" pos:column="21"/></operator><name pos:line="29" pos:column="17">stats<pos:position pos:line="29" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="29" pos:column="24">0<pos:position pos:line="29" pos:column="25"/></literal></expr></argument>, <argument><expr><sizeof pos:line="29" pos:column="27">sizeof<argument_list pos:line="29" pos:column="33">(<argument><expr><name pos:line="29" pos:column="34">stats<pos:position pos:line="29" pos:column="39"/></name></expr></argument>)<pos:position pos:line="29" pos:column="40"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="29" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="42"/></expr_stmt>

	<if pos:line="31" pos:column="9">if <condition pos:line="31" pos:column="12">(<expr><name pos:line="31" pos:column="13">argc<pos:position pos:line="31" pos:column="17"/></name> <operator pos:line="31" pos:column="18">&lt;<pos:position pos:line="31" pos:column="22"/></operator> <literal type="number" pos:line="31" pos:column="20">2<pos:position pos:line="31" pos:column="21"/></literal></expr>)<pos:position pos:line="31" pos:column="22"/></condition><then pos:line="31" pos:column="22"> <block pos:line="31" pos:column="23">{
		<expr_stmt><expr><call><name pos:line="32" pos:column="17">usage<pos:position pos:line="32" pos:column="22"/></name><argument_list pos:line="32" pos:column="22">(<argument><expr><name pos:line="32" pos:column="23">FERROR<pos:position pos:line="32" pos:column="29"/></name></expr></argument>)<pos:position pos:line="32" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="31"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="33" pos:column="17">exit_cleanup<pos:position pos:line="33" pos:column="29"/></name><argument_list pos:line="33" pos:column="29">(<argument><expr><name pos:line="33" pos:column="30">RERR_SYNTAX<pos:position pos:line="33" pos:column="41"/></name></expr></argument>)<pos:position pos:line="33" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="43"/></expr_stmt>
	}<pos:position pos:line="34" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="36" pos:column="9">/* Get the umask for use in permission calculations.  We no longer set
	 * it to zero; that is ugly and pointless now that all the callers that
	 * relied on it have been reeducated to work with default ACLs. */</comment>
	<expr_stmt><expr><call><name pos:line="39" pos:column="9">umask<pos:position pos:line="39" pos:column="14"/></name><argument_list pos:line="39" pos:column="14">(<argument><expr><name pos:line="39" pos:column="15">orig_umask<pos:position pos:line="39" pos:column="25"/></name> <operator pos:line="39" pos:column="26">=<pos:position pos:line="39" pos:column="27"/></operator> <call><name pos:line="39" pos:column="28">umask<pos:position pos:line="39" pos:column="33"/></name><argument_list pos:line="39" pos:column="33">(<argument><expr><literal type="number" pos:line="39" pos:column="34">0<pos:position pos:line="39" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="36"/></argument_list></call></expr></argument>)<pos:position pos:line="39" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="38"/></expr_stmt>

<cpp:if pos:line="41" pos:column="1">#<cpp:directive pos:line="41" pos:column="2">if<pos:position pos:line="41" pos:column="4"/></cpp:directive> <expr><name pos:line="41" pos:column="5">defined<pos:position pos:line="41" pos:column="12"/></name> <name pos:line="41" pos:column="13">CONFIG_LOCALE<pos:position pos:line="41" pos:column="26"/></name> <operator pos:line="41" pos:column="27">&amp;&amp;<pos:position pos:line="41" pos:column="37"/></operator> <name pos:line="41" pos:column="30">defined<pos:position pos:line="41" pos:column="37"/></name> <name pos:line="41" pos:column="38">HAVE_SETLOCALE<pos:position pos:line="41" pos:column="52"/></name></expr></cpp:if>
	<expr_stmt><expr><call><name pos:line="42" pos:column="9">setlocale<pos:position pos:line="42" pos:column="18"/></name><argument_list pos:line="42" pos:column="18">(<argument><expr><name pos:line="42" pos:column="19">LC_CTYPE<pos:position pos:line="42" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="42" pos:column="29">""<pos:position pos:line="42" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="42" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="33"/></expr_stmt>
<cpp:endif pos:line="43" pos:column="1">#<cpp:directive pos:line="43" pos:column="2">endif<pos:position pos:line="43" pos:column="7"/></cpp:directive></cpp:endif>

	<if pos:line="45" pos:column="9">if <condition pos:line="45" pos:column="12">(<expr><operator pos:line="45" pos:column="13">!<pos:position pos:line="45" pos:column="14"/></operator><call><name pos:line="45" pos:column="14">parse_arguments<pos:position pos:line="45" pos:column="29"/></name><argument_list pos:line="45" pos:column="29">(<argument><expr><operator pos:line="45" pos:column="30">&amp;<pos:position pos:line="45" pos:column="35"/></operator><name pos:line="45" pos:column="31">argc<pos:position pos:line="45" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="45" pos:column="37">(<pos:position pos:line="45" pos:column="38"/></operator><specifier pos:line="45" pos:column="38">const<pos:position pos:line="45" pos:column="43"/></specifier> <name pos:line="45" pos:column="44">char<pos:position pos:line="45" pos:column="48"/></name> <operator pos:line="45" pos:column="49">*<pos:position pos:line="45" pos:column="50"/></operator><operator pos:line="45" pos:column="50">*<pos:position pos:line="45" pos:column="51"/></operator><operator pos:line="45" pos:column="51">*<pos:position pos:line="45" pos:column="52"/></operator><operator pos:line="45" pos:column="52">)<pos:position pos:line="45" pos:column="53"/></operator> <operator pos:line="45" pos:column="54">&amp;<pos:position pos:line="45" pos:column="59"/></operator><name pos:line="45" pos:column="55">argv<pos:position pos:line="45" pos:column="59"/></name></expr></argument>)<pos:position pos:line="45" pos:column="60"/></argument_list></call></expr>)<pos:position pos:line="45" pos:column="61"/></condition><then pos:line="45" pos:column="61"> <block pos:line="45" pos:column="62">{
		<comment type="block" pos:line="46" pos:column="17">/* FIXME: We ought to call the same error-handling
		 * code here, rather than relying on getopt. */</comment>
		<expr_stmt><expr><call><name pos:line="48" pos:column="17">option_error<pos:position pos:line="48" pos:column="29"/></name><argument_list pos:line="48" pos:column="29">()<pos:position pos:line="48" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="32"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="49" pos:column="17">exit_cleanup<pos:position pos:line="49" pos:column="29"/></name><argument_list pos:line="49" pos:column="29">(<argument><expr><name pos:line="49" pos:column="30">RERR_SYNTAX<pos:position pos:line="49" pos:column="41"/></name></expr></argument>)<pos:position pos:line="49" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="43"/></expr_stmt>
	}<pos:position pos:line="50" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="52" pos:column="9">SIGACTMASK<pos:position pos:line="52" pos:column="19"/></name><argument_list pos:line="52" pos:column="19">(<argument><expr><name pos:line="52" pos:column="20">SIGINT<pos:position pos:line="52" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="28">sig_int<pos:position pos:line="52" pos:column="35"/></name></expr></argument>)<pos:position pos:line="52" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="37"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="53" pos:column="9">SIGACTMASK<pos:position pos:line="53" pos:column="19"/></name><argument_list pos:line="53" pos:column="19">(<argument><expr><name pos:line="53" pos:column="20">SIGHUP<pos:position pos:line="53" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="28">sig_int<pos:position pos:line="53" pos:column="35"/></name></expr></argument>)<pos:position pos:line="53" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="37"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="54" pos:column="9">SIGACTMASK<pos:position pos:line="54" pos:column="19"/></name><argument_list pos:line="54" pos:column="19">(<argument><expr><name pos:line="54" pos:column="20">SIGTERM<pos:position pos:line="54" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="29">sig_int<pos:position pos:line="54" pos:column="36"/></name></expr></argument>)<pos:position pos:line="54" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="38"/></expr_stmt>
<cpp:if pos:line="55" pos:column="1">#<cpp:directive pos:line="55" pos:column="2">if<pos:position pos:line="55" pos:column="4"/></cpp:directive> <expr><name pos:line="55" pos:column="5">defined<pos:position pos:line="55" pos:column="12"/></name> <name pos:line="55" pos:column="13">HAVE_SIGACTION<pos:position pos:line="55" pos:column="27"/></name> <operator pos:line="55" pos:column="28">&amp;&amp;<pos:position pos:line="55" pos:column="38"/></operator> <name pos:line="55" pos:column="31">HAVE_SIGPROCMASK<pos:position pos:line="55" pos:column="47"/></name></expr></cpp:if>
	<expr_stmt><expr><call><name pos:line="56" pos:column="9">sigprocmask<pos:position pos:line="56" pos:column="20"/></name><argument_list pos:line="56" pos:column="20">(<argument><expr><name pos:line="56" pos:column="21">SIG_UNBLOCK<pos:position pos:line="56" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="56" pos:column="34">&amp;<pos:position pos:line="56" pos:column="39"/></operator><name pos:line="56" pos:column="35">sigmask<pos:position pos:line="56" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="44">NULL<pos:position pos:line="56" pos:column="48"/></name></expr></argument>)<pos:position pos:line="56" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="50"/></expr_stmt>
<cpp:endif pos:line="57" pos:column="1">#<cpp:directive pos:line="57" pos:column="2">endif<pos:position pos:line="57" pos:column="7"/></cpp:directive></cpp:endif>

	<comment type="block" pos:line="59" pos:column="9">/* Ignore SIGPIPE; we consistently check error codes and will
	 * see the EPIPE. */</comment>
	<expr_stmt><expr><call><name pos:line="61" pos:column="9">SIGACTION<pos:position pos:line="61" pos:column="18"/></name><argument_list pos:line="61" pos:column="18">(<argument><expr><name pos:line="61" pos:column="19">SIGPIPE<pos:position pos:line="61" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="28">SIG_IGN<pos:position pos:line="61" pos:column="35"/></name></expr></argument>)<pos:position pos:line="61" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="37"/></expr_stmt>
<cpp:ifdef pos:line="62" pos:column="1">#<cpp:directive pos:line="62" pos:column="2">ifdef<pos:position pos:line="62" pos:column="7"/></cpp:directive> <name pos:line="62" pos:column="8">SIGXFSZ<pos:position pos:line="62" pos:column="15"/></name></cpp:ifdef>
	<expr_stmt><expr><call><name pos:line="63" pos:column="9">SIGACTION<pos:position pos:line="63" pos:column="18"/></name><argument_list pos:line="63" pos:column="18">(<argument><expr><name pos:line="63" pos:column="19">SIGXFSZ<pos:position pos:line="63" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="63" pos:column="28">SIG_IGN<pos:position pos:line="63" pos:column="35"/></name></expr></argument>)<pos:position pos:line="63" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="37"/></expr_stmt>
<cpp:endif pos:line="64" pos:column="1">#<cpp:directive pos:line="64" pos:column="2">endif<pos:position pos:line="64" pos:column="7"/></cpp:directive></cpp:endif>

	<comment type="block" pos:line="66" pos:column="9">/* Initialize change_dir() here because on some old systems getcwd
	 * (implemented by forking "pwd" and reading its output) doesn't
	 * work when there are other child processes.  Also, on all systems
	 * that implement getcwd that way "pwd" can't be found after chroot. */</comment>
	<expr_stmt><expr><call><name pos:line="70" pos:column="9">change_dir<pos:position pos:line="70" pos:column="19"/></name><argument_list pos:line="70" pos:column="19">(<argument><expr><name pos:line="70" pos:column="20">NULL<pos:position pos:line="70" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="70" pos:column="26">CD_NORMAL<pos:position pos:line="70" pos:column="35"/></name></expr></argument>)<pos:position pos:line="70" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="37"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="72" pos:column="9">init_flist<pos:position pos:line="72" pos:column="19"/></name><argument_list pos:line="72" pos:column="19">()<pos:position pos:line="72" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="22"/></expr_stmt>

	<if pos:line="74" pos:column="9">if <condition pos:line="74" pos:column="12">(<expr><operator pos:line="74" pos:column="13">(<pos:position pos:line="74" pos:column="14"/></operator><name pos:line="74" pos:column="14">write_batch<pos:position pos:line="74" pos:column="25"/></name> <operator pos:line="74" pos:column="26">||<pos:position pos:line="74" pos:column="28"/></operator> <name pos:line="74" pos:column="29">read_batch<pos:position pos:line="74" pos:column="39"/></name><operator pos:line="74" pos:column="39">)<pos:position pos:line="74" pos:column="40"/></operator> <operator pos:line="74" pos:column="41">&amp;&amp;<pos:position pos:line="74" pos:column="51"/></operator> <operator pos:line="74" pos:column="44">!<pos:position pos:line="74" pos:column="45"/></operator><name pos:line="74" pos:column="45">am_server<pos:position pos:line="74" pos:column="54"/></name></expr>)<pos:position pos:line="74" pos:column="55"/></condition><then pos:line="74" pos:column="55"> <block pos:line="74" pos:column="56">{
		<if pos:line="75" pos:column="17">if <condition pos:line="75" pos:column="20">(<expr><name pos:line="75" pos:column="21">write_batch<pos:position pos:line="75" pos:column="32"/></name></expr>)<pos:position pos:line="75" pos:column="33"/></condition><then pos:line="75" pos:column="33">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="76" pos:column="25">write_batch_shell_file<pos:position pos:line="76" pos:column="47"/></name><argument_list pos:line="76" pos:column="47">(<argument><expr><name pos:line="76" pos:column="48">orig_argc<pos:position pos:line="76" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="76" pos:column="59">orig_argv<pos:position pos:line="76" pos:column="68"/></name></expr></argument>, <argument><expr><name pos:line="76" pos:column="70">argc<pos:position pos:line="76" pos:column="74"/></name></expr></argument>)<pos:position pos:line="76" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="76"/></expr_stmt></block></then></if>

		<if pos:line="78" pos:column="17">if <condition pos:line="78" pos:column="20">(<expr><name pos:line="78" pos:column="21">read_batch<pos:position pos:line="78" pos:column="31"/></name> <operator pos:line="78" pos:column="32">&amp;&amp;<pos:position pos:line="78" pos:column="42"/></operator> <call><name pos:line="78" pos:column="35">strcmp<pos:position pos:line="78" pos:column="41"/></name><argument_list pos:line="78" pos:column="41">(<argument><expr><name pos:line="78" pos:column="42">batch_name<pos:position pos:line="78" pos:column="52"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="78" pos:column="54">"-"<pos:position pos:line="78" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="78" pos:column="58"/></argument_list></call> <operator pos:line="78" pos:column="59">==<pos:position pos:line="78" pos:column="61"/></operator> <literal type="number" pos:line="78" pos:column="62">0<pos:position pos:line="78" pos:column="63"/></literal></expr>)<pos:position pos:line="78" pos:column="64"/></condition><then pos:line="78" pos:column="64">
			<block type="pseudo"><expr_stmt><expr><name pos:line="79" pos:column="25">batch_fd<pos:position pos:line="79" pos:column="33"/></name> <operator pos:line="79" pos:column="34">=<pos:position pos:line="79" pos:column="35"/></operator> <name pos:line="79" pos:column="36">STDIN_FILENO<pos:position pos:line="79" pos:column="48"/></name></expr>;<pos:position pos:line="79" pos:column="49"/></expr_stmt></block></then>
		<else pos:line="80" pos:column="17">else <block pos:line="80" pos:column="22">{
			<expr_stmt><expr><name pos:line="81" pos:column="25">batch_fd<pos:position pos:line="81" pos:column="33"/></name> <operator pos:line="81" pos:column="34">=<pos:position pos:line="81" pos:column="35"/></operator> <call><name pos:line="81" pos:column="36">do_open<pos:position pos:line="81" pos:column="43"/></name><argument_list pos:line="81" pos:column="43">(<argument><expr><name pos:line="81" pos:column="44">batch_name<pos:position pos:line="81" pos:column="54"/></name></expr></argument>,
				   <argument><expr><ternary><condition><expr><name pos:line="82" pos:column="36">write_batch<pos:position pos:line="82" pos:column="47"/></name></expr> ?<pos:position pos:line="82" pos:column="49"/></condition><then pos:line="82" pos:column="49"> <expr><name pos:line="82" pos:column="50">O_WRONLY<pos:position pos:line="82" pos:column="58"/></name> <operator pos:line="82" pos:column="59">|<pos:position pos:line="82" pos:column="60"/></operator> <name pos:line="82" pos:column="61">O_CREAT<pos:position pos:line="82" pos:column="68"/></name> <operator pos:line="82" pos:column="69">|<pos:position pos:line="82" pos:column="70"/></operator> <name pos:line="82" pos:column="71">O_TRUNC<pos:position pos:line="82" pos:column="78"/></name></expr>
				   <pos:position pos:line="83" pos:column="8"/></then><else pos:line="83" pos:column="36">: <expr><name pos:line="83" pos:column="38">O_RDONLY<pos:position pos:line="83" pos:column="46"/></name></expr></else></ternary></expr></argument>, <argument><expr><name pos:line="83" pos:column="48">S_IRUSR<pos:position pos:line="83" pos:column="55"/></name> <operator pos:line="83" pos:column="56">|<pos:position pos:line="83" pos:column="57"/></operator> <name pos:line="83" pos:column="58">S_IWUSR<pos:position pos:line="83" pos:column="65"/></name></expr></argument>)<pos:position pos:line="83" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="67"/></expr_stmt>
		}<pos:position pos:line="84" pos:column="18"/></block></else></if>
		<if pos:line="85" pos:column="17">if <condition pos:line="85" pos:column="20">(<expr><name pos:line="85" pos:column="21">batch_fd<pos:position pos:line="85" pos:column="29"/></name> <operator pos:line="85" pos:column="30">&lt;<pos:position pos:line="85" pos:column="34"/></operator> <literal type="number" pos:line="85" pos:column="32">0<pos:position pos:line="85" pos:column="33"/></literal></expr>)<pos:position pos:line="85" pos:column="34"/></condition><then pos:line="85" pos:column="34"> <block pos:line="85" pos:column="35">{
			<expr_stmt><expr><call><name pos:line="86" pos:column="25">rsyserr<pos:position pos:line="86" pos:column="32"/></name><argument_list pos:line="86" pos:column="32">(<argument><expr><name pos:line="86" pos:column="33">FERROR<pos:position pos:line="86" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="86" pos:column="41">errno<pos:position pos:line="86" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="86" pos:column="48">"Batch file %s open error"<pos:position pos:line="86" pos:column="74"/></literal></expr></argument>,
				<argument><expr><call><name pos:line="87" pos:column="33">full_fname<pos:position pos:line="87" pos:column="43"/></name><argument_list pos:line="87" pos:column="43">(<argument><expr><name pos:line="87" pos:column="44">batch_name<pos:position pos:line="87" pos:column="54"/></name></expr></argument>)<pos:position pos:line="87" pos:column="55"/></argument_list></call></expr></argument>)<pos:position pos:line="87" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="57"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="88" pos:column="25">exit_cleanup<pos:position pos:line="88" pos:column="37"/></name><argument_list pos:line="88" pos:column="37">(<argument><expr><name pos:line="88" pos:column="38">RERR_FILEIO<pos:position pos:line="88" pos:column="49"/></name></expr></argument>)<pos:position pos:line="88" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="51"/></expr_stmt>
		}<pos:position pos:line="89" pos:column="18"/></block></then></if>
		<if pos:line="90" pos:column="17">if <condition pos:line="90" pos:column="20">(<expr><name pos:line="90" pos:column="21">read_batch<pos:position pos:line="90" pos:column="31"/></name></expr>)<pos:position pos:line="90" pos:column="32"/></condition><then pos:line="90" pos:column="32">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="91" pos:column="25">read_stream_flags<pos:position pos:line="91" pos:column="42"/></name><argument_list pos:line="91" pos:column="42">(<argument><expr><name pos:line="91" pos:column="43">batch_fd<pos:position pos:line="91" pos:column="51"/></name></expr></argument>)<pos:position pos:line="91" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="53"/></expr_stmt></block></then>
		<else pos:line="92" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="93" pos:column="25">write_stream_flags<pos:position pos:line="93" pos:column="43"/></name><argument_list pos:line="93" pos:column="43">(<argument><expr><name pos:line="93" pos:column="44">batch_fd<pos:position pos:line="93" pos:column="52"/></name></expr></argument>)<pos:position pos:line="93" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="54"/></expr_stmt></block></else></if>
	}<pos:position pos:line="94" pos:column="10"/></block></then></if>
	<if pos:line="95" pos:column="9">if <condition pos:line="95" pos:column="12">(<expr><name pos:line="95" pos:column="13">write_batch<pos:position pos:line="95" pos:column="24"/></name> <operator pos:line="95" pos:column="25">&lt;<pos:position pos:line="95" pos:column="29"/></operator> <literal type="number" pos:line="95" pos:column="27">0<pos:position pos:line="95" pos:column="28"/></literal></expr>)<pos:position pos:line="95" pos:column="29"/></condition><then pos:line="95" pos:column="29">
		<block type="pseudo"><expr_stmt><expr><name pos:line="96" pos:column="17">dry_run<pos:position pos:line="96" pos:column="24"/></name> <operator pos:line="96" pos:column="25">=<pos:position pos:line="96" pos:column="26"/></operator> <literal type="number" pos:line="96" pos:column="27">1<pos:position pos:line="96" pos:column="28"/></literal></expr>;<pos:position pos:line="96" pos:column="29"/></expr_stmt></block></then></if>

	<if pos:line="98" pos:column="9">if <condition pos:line="98" pos:column="12">(<expr><name pos:line="98" pos:column="13">am_server<pos:position pos:line="98" pos:column="22"/></name></expr>)<pos:position pos:line="98" pos:column="23"/></condition><then pos:line="98" pos:column="23"> <block pos:line="98" pos:column="24">{
<cpp:ifdef pos:line="99" pos:column="1">#<cpp:directive pos:line="99" pos:column="2">ifdef<pos:position pos:line="99" pos:column="7"/></cpp:directive> <name pos:line="99" pos:column="8">ICONV_CONST<pos:position pos:line="99" pos:column="19"/></name></cpp:ifdef>
		<expr_stmt><expr><call><name pos:line="100" pos:column="17">setup_iconv<pos:position pos:line="100" pos:column="28"/></name><argument_list pos:line="100" pos:column="28">()<pos:position pos:line="100" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="100" pos:column="31"/></expr_stmt>
<cpp:endif pos:line="101" pos:column="1">#<cpp:directive pos:line="101" pos:column="2">endif<pos:position pos:line="101" pos:column="7"/></cpp:directive></cpp:endif>
	}<pos:position pos:line="102" pos:column="10"/></block></then> <elseif pos:line="102" pos:column="11">else <if pos:line="102" pos:column="16">if <condition pos:line="102" pos:column="19">(<expr><name pos:line="102" pos:column="20">am_daemon<pos:position pos:line="102" pos:column="29"/></name></expr>)<pos:position pos:line="102" pos:column="30"/></condition><then pos:line="102" pos:column="30">
		<block type="pseudo"><return pos:line="103" pos:column="17">return <expr><call><name pos:line="103" pos:column="24">daemon_main<pos:position pos:line="103" pos:column="35"/></name><argument_list pos:line="103" pos:column="35">()<pos:position pos:line="103" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="103" pos:column="38"/></return></block></then></if></elseif></if>

	<if pos:line="105" pos:column="9">if <condition pos:line="105" pos:column="12">(<expr><name pos:line="105" pos:column="13">am_server<pos:position pos:line="105" pos:column="22"/></name> <operator pos:line="105" pos:column="23">&amp;&amp;<pos:position pos:line="105" pos:column="33"/></operator> <name pos:line="105" pos:column="26">protect_args<pos:position pos:line="105" pos:column="38"/></name></expr>)<pos:position pos:line="105" pos:column="39"/></condition><then pos:line="105" pos:column="39"> <block pos:line="105" pos:column="40">{
		<decl_stmt><decl><type><name pos:line="106" pos:column="17">char<pos:position pos:line="106" pos:column="21"/></name></type> <name><name pos:line="106" pos:column="22">buf<pos:position pos:line="106" pos:column="25"/></name><index pos:line="106" pos:column="25">[<expr><name pos:line="106" pos:column="26">MAXPATHLEN<pos:position pos:line="106" pos:column="36"/></name></expr>]<pos:position pos:line="106" pos:column="37"/></index></name></decl>;<pos:position pos:line="106" pos:column="38"/></decl_stmt>
		<expr_stmt><expr><name pos:line="107" pos:column="17">protect_args<pos:position pos:line="107" pos:column="29"/></name> <operator pos:line="107" pos:column="30">=<pos:position pos:line="107" pos:column="31"/></operator> <literal type="number" pos:line="107" pos:column="32">2<pos:position pos:line="107" pos:column="33"/></literal></expr>;<pos:position pos:line="107" pos:column="34"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="108" pos:column="17">read_args<pos:position pos:line="108" pos:column="26"/></name><argument_list pos:line="108" pos:column="26">(<argument><expr><name pos:line="108" pos:column="27">STDIN_FILENO<pos:position pos:line="108" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="108" pos:column="41">NULL<pos:position pos:line="108" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="108" pos:column="47">buf<pos:position pos:line="108" pos:column="50"/></name></expr></argument>, <argument><expr><sizeof pos:line="108" pos:column="52">sizeof <name pos:line="108" pos:column="59">buf<pos:position pos:line="108" pos:column="62"/></name></sizeof></expr></argument>, <argument><expr><literal type="number" pos:line="108" pos:column="64">1<pos:position pos:line="108" pos:column="65"/></literal></expr></argument>, <argument><expr><operator pos:line="108" pos:column="67">&amp;<pos:position pos:line="108" pos:column="72"/></operator><name pos:line="108" pos:column="68">argv<pos:position pos:line="108" pos:column="72"/></name></expr></argument>, <argument><expr><operator pos:line="108" pos:column="74">&amp;<pos:position pos:line="108" pos:column="79"/></operator><name pos:line="108" pos:column="75">argc<pos:position pos:line="108" pos:column="79"/></name></expr></argument>, <argument><expr><name pos:line="108" pos:column="81">NULL<pos:position pos:line="108" pos:column="85"/></name></expr></argument>)<pos:position pos:line="108" pos:column="86"/></argument_list></call></expr>;<pos:position pos:line="108" pos:column="87"/></expr_stmt>
		<if pos:line="109" pos:column="17">if <condition pos:line="109" pos:column="20">(<expr><operator pos:line="109" pos:column="21">!<pos:position pos:line="109" pos:column="22"/></operator><call><name pos:line="109" pos:column="22">parse_arguments<pos:position pos:line="109" pos:column="37"/></name><argument_list pos:line="109" pos:column="37">(<argument><expr><operator pos:line="109" pos:column="38">&amp;<pos:position pos:line="109" pos:column="43"/></operator><name pos:line="109" pos:column="39">argc<pos:position pos:line="109" pos:column="43"/></name></expr></argument>, <argument><expr><operator pos:line="109" pos:column="45">(<pos:position pos:line="109" pos:column="46"/></operator><specifier pos:line="109" pos:column="46">const<pos:position pos:line="109" pos:column="51"/></specifier> <name pos:line="109" pos:column="52">char<pos:position pos:line="109" pos:column="56"/></name> <operator pos:line="109" pos:column="57">*<pos:position pos:line="109" pos:column="58"/></operator><operator pos:line="109" pos:column="58">*<pos:position pos:line="109" pos:column="59"/></operator><operator pos:line="109" pos:column="59">*<pos:position pos:line="109" pos:column="60"/></operator><operator pos:line="109" pos:column="60">)<pos:position pos:line="109" pos:column="61"/></operator> <operator pos:line="109" pos:column="62">&amp;<pos:position pos:line="109" pos:column="67"/></operator><name pos:line="109" pos:column="63">argv<pos:position pos:line="109" pos:column="67"/></name></expr></argument>)<pos:position pos:line="109" pos:column="68"/></argument_list></call></expr>)<pos:position pos:line="109" pos:column="69"/></condition><then pos:line="109" pos:column="69"> <block pos:line="109" pos:column="70">{
			<expr_stmt><expr><call><name pos:line="110" pos:column="25">option_error<pos:position pos:line="110" pos:column="37"/></name><argument_list pos:line="110" pos:column="37">()<pos:position pos:line="110" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="110" pos:column="40"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="111" pos:column="25">exit_cleanup<pos:position pos:line="111" pos:column="37"/></name><argument_list pos:line="111" pos:column="37">(<argument><expr><name pos:line="111" pos:column="38">RERR_SYNTAX<pos:position pos:line="111" pos:column="49"/></name></expr></argument>)<pos:position pos:line="111" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="111" pos:column="51"/></expr_stmt>
		}<pos:position pos:line="112" pos:column="18"/></block></then></if>
	}<pos:position pos:line="113" pos:column="10"/></block></then></if>

	<if pos:line="115" pos:column="9">if <condition pos:line="115" pos:column="12">(<expr><name pos:line="115" pos:column="13">argc<pos:position pos:line="115" pos:column="17"/></name> <operator pos:line="115" pos:column="18">&lt;<pos:position pos:line="115" pos:column="22"/></operator> <literal type="number" pos:line="115" pos:column="20">1<pos:position pos:line="115" pos:column="21"/></literal></expr>)<pos:position pos:line="115" pos:column="22"/></condition><then pos:line="115" pos:column="22"> <block pos:line="115" pos:column="23">{
		<expr_stmt><expr><call><name pos:line="116" pos:column="17">usage<pos:position pos:line="116" pos:column="22"/></name><argument_list pos:line="116" pos:column="22">(<argument><expr><name pos:line="116" pos:column="23">FERROR<pos:position pos:line="116" pos:column="29"/></name></expr></argument>)<pos:position pos:line="116" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="116" pos:column="31"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="117" pos:column="17">exit_cleanup<pos:position pos:line="117" pos:column="29"/></name><argument_list pos:line="117" pos:column="29">(<argument><expr><name pos:line="117" pos:column="30">RERR_SYNTAX<pos:position pos:line="117" pos:column="41"/></name></expr></argument>)<pos:position pos:line="117" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="117" pos:column="43"/></expr_stmt>
	}<pos:position pos:line="118" pos:column="10"/></block></then></if>

	<if pos:line="120" pos:column="9">if <condition pos:line="120" pos:column="12">(<expr><name pos:line="120" pos:column="13">am_server<pos:position pos:line="120" pos:column="22"/></name></expr>)<pos:position pos:line="120" pos:column="23"/></condition><then pos:line="120" pos:column="23"> <block pos:line="120" pos:column="24">{
		<expr_stmt><expr><call><name pos:line="121" pos:column="17">set_nonblocking<pos:position pos:line="121" pos:column="32"/></name><argument_list pos:line="121" pos:column="32">(<argument><expr><name pos:line="121" pos:column="33">STDIN_FILENO<pos:position pos:line="121" pos:column="45"/></name></expr></argument>)<pos:position pos:line="121" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="121" pos:column="47"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="122" pos:column="17">set_nonblocking<pos:position pos:line="122" pos:column="32"/></name><argument_list pos:line="122" pos:column="32">(<argument><expr><name pos:line="122" pos:column="33">STDOUT_FILENO<pos:position pos:line="122" pos:column="46"/></name></expr></argument>)<pos:position pos:line="122" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="122" pos:column="48"/></expr_stmt>
		<if pos:line="123" pos:column="17">if <condition pos:line="123" pos:column="20">(<expr><name pos:line="123" pos:column="21">am_daemon<pos:position pos:line="123" pos:column="30"/></name></expr>)<pos:position pos:line="123" pos:column="31"/></condition><then pos:line="123" pos:column="31">
			<block type="pseudo"><return pos:line="124" pos:column="25">return <expr><call><name pos:line="124" pos:column="32">start_daemon<pos:position pos:line="124" pos:column="44"/></name><argument_list pos:line="124" pos:column="44">(<argument><expr><name pos:line="124" pos:column="45">STDIN_FILENO<pos:position pos:line="124" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="124" pos:column="59">STDOUT_FILENO<pos:position pos:line="124" pos:column="72"/></name></expr></argument>)<pos:position pos:line="124" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="124" pos:column="74"/></return></block></then></if>
		<expr_stmt><expr><call><name pos:line="125" pos:column="17">start_server<pos:position pos:line="125" pos:column="29"/></name><argument_list pos:line="125" pos:column="29">(<argument><expr><name pos:line="125" pos:column="30">STDIN_FILENO<pos:position pos:line="125" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="125" pos:column="44">STDOUT_FILENO<pos:position pos:line="125" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="125" pos:column="59">argc<pos:position pos:line="125" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="125" pos:column="65">argv<pos:position pos:line="125" pos:column="69"/></name></expr></argument>)<pos:position pos:line="125" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="125" pos:column="71"/></expr_stmt>
	}<pos:position pos:line="126" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="128" pos:column="9">ret<pos:position pos:line="128" pos:column="12"/></name> <operator pos:line="128" pos:column="13">=<pos:position pos:line="128" pos:column="14"/></operator> <call><name pos:line="128" pos:column="15">start_client<pos:position pos:line="128" pos:column="27"/></name><argument_list pos:line="128" pos:column="27">(<argument><expr><name pos:line="128" pos:column="28">argc<pos:position pos:line="128" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="128" pos:column="34">argv<pos:position pos:line="128" pos:column="38"/></name></expr></argument>)<pos:position pos:line="128" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="128" pos:column="40"/></expr_stmt>
	<if pos:line="129" pos:column="9">if <condition pos:line="129" pos:column="12">(<expr><name pos:line="129" pos:column="13">ret<pos:position pos:line="129" pos:column="16"/></name> <operator pos:line="129" pos:column="17">==<pos:position pos:line="129" pos:column="19"/></operator> <operator pos:line="129" pos:column="20">-<pos:position pos:line="129" pos:column="21"/></operator><literal type="number" pos:line="129" pos:column="21">1<pos:position pos:line="129" pos:column="22"/></literal></expr>)<pos:position pos:line="129" pos:column="23"/></condition><then pos:line="129" pos:column="23">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="130" pos:column="17">exit_cleanup<pos:position pos:line="130" pos:column="29"/></name><argument_list pos:line="130" pos:column="29">(<argument><expr><name pos:line="130" pos:column="30">RERR_STARTCLIENT<pos:position pos:line="130" pos:column="46"/></name></expr></argument>)<pos:position pos:line="130" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="130" pos:column="48"/></expr_stmt></block></then>
	<else pos:line="131" pos:column="9">else
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="132" pos:column="17">exit_cleanup<pos:position pos:line="132" pos:column="29"/></name><argument_list pos:line="132" pos:column="29">(<argument><expr><name pos:line="132" pos:column="30">ret<pos:position pos:line="132" pos:column="33"/></name></expr></argument>)<pos:position pos:line="132" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="132" pos:column="35"/></expr_stmt></block></else></if>

	<return pos:line="134" pos:column="9">return <expr><name pos:line="134" pos:column="16">ret<pos:position pos:line="134" pos:column="19"/></name></expr>;<pos:position pos:line="134" pos:column="20"/></return>
}<pos:position pos:line="135" pos:column="2"/></block></function></unit>
