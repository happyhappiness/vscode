<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_function_843.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">create_pid_file<pos:position pos:line="1" pos:column="28"/></name><parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><name pos:line="1" pos:column="29">void<pos:position pos:line="1" pos:column="33"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="34"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">char<pos:position pos:line="3" pos:column="13"/></name> <modifier pos:line="3" pos:column="14">*<pos:position pos:line="3" pos:column="15"/></modifier></type><name pos:line="3" pos:column="15">pid_file<pos:position pos:line="3" pos:column="23"/></name> <init pos:line="3" pos:column="24">= <expr><call><name pos:line="3" pos:column="26">lp_pid_file<pos:position pos:line="3" pos:column="37"/></name><argument_list pos:line="3" pos:column="37">()<pos:position pos:line="3" pos:column="39"/></argument_list></call></expr></init></decl>;<pos:position pos:line="3" pos:column="40"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name></type> <name><name pos:line="4" pos:column="14">pidbuf<pos:position pos:line="4" pos:column="20"/></name><index pos:line="4" pos:column="20">[<expr><literal type="number" pos:line="4" pos:column="21">16<pos:position pos:line="4" pos:column="23"/></literal></expr>]<pos:position pos:line="4" pos:column="24"/></index></name></decl>;<pos:position pos:line="4" pos:column="25"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">pid_t<pos:position pos:line="5" pos:column="14"/></name></type> <name pos:line="5" pos:column="15">pid<pos:position pos:line="5" pos:column="18"/></name> <init pos:line="5" pos:column="19">= <expr><call><name pos:line="5" pos:column="21">getpid<pos:position pos:line="5" pos:column="27"/></name><argument_list pos:line="5" pos:column="27">()<pos:position pos:line="5" pos:column="29"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="30"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">fd<pos:position pos:line="6" pos:column="15"/></name></decl>;<pos:position pos:line="6" pos:column="16"/></decl_stmt>

	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><operator pos:line="8" pos:column="13">!<pos:position pos:line="8" pos:column="14"/></operator><name pos:line="8" pos:column="14">pid_file<pos:position pos:line="8" pos:column="22"/></name> <operator pos:line="8" pos:column="23">||<pos:position pos:line="8" pos:column="25"/></operator> <operator pos:line="8" pos:column="26">!<pos:position pos:line="8" pos:column="27"/></operator><operator pos:line="8" pos:column="27">*<pos:position pos:line="8" pos:column="28"/></operator><name pos:line="8" pos:column="28">pid_file<pos:position pos:line="8" pos:column="36"/></name></expr>)<pos:position pos:line="8" pos:column="37"/></condition><then pos:line="8" pos:column="37">
		<block type="pseudo"><return pos:line="9" pos:column="17">return;<pos:position pos:line="9" pos:column="24"/></return></block></then></if>

	<expr_stmt><expr><call><name pos:line="11" pos:column="9">cleanup_set_pid<pos:position pos:line="11" pos:column="24"/></name><argument_list pos:line="11" pos:column="24">(<argument><expr><name pos:line="11" pos:column="25">pid<pos:position pos:line="11" pos:column="28"/></name></expr></argument>)<pos:position pos:line="11" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="30"/></expr_stmt>
	<if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><operator pos:line="12" pos:column="13">(<pos:position pos:line="12" pos:column="14"/></operator><name pos:line="12" pos:column="14">fd<pos:position pos:line="12" pos:column="16"/></name> <operator pos:line="12" pos:column="17">=<pos:position pos:line="12" pos:column="18"/></operator> <call><name pos:line="12" pos:column="19">do_open<pos:position pos:line="12" pos:column="26"/></name><argument_list pos:line="12" pos:column="26">(<argument><expr><name pos:line="12" pos:column="27">pid_file<pos:position pos:line="12" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="37">O_WRONLY<pos:position pos:line="12" pos:column="45"/></name><operator pos:line="12" pos:column="45">|<pos:position pos:line="12" pos:column="46"/></operator><name pos:line="12" pos:column="46">O_CREAT<pos:position pos:line="12" pos:column="53"/></name><operator pos:line="12" pos:column="53">|<pos:position pos:line="12" pos:column="54"/></operator><name pos:line="12" pos:column="54">O_EXCL<pos:position pos:line="12" pos:column="60"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="12" pos:column="62">0666<pos:position pos:line="12" pos:column="66"/></literal> <operator pos:line="12" pos:column="67">&amp;<pos:position pos:line="12" pos:column="72"/></operator> <operator pos:line="12" pos:column="69">~<pos:position pos:line="12" pos:column="70"/></operator><name pos:line="12" pos:column="70">orig_umask<pos:position pos:line="12" pos:column="80"/></name></expr></argument>)<pos:position pos:line="12" pos:column="81"/></argument_list></call><operator pos:line="12" pos:column="81">)<pos:position pos:line="12" pos:column="82"/></operator> <operator pos:line="12" pos:column="83">==<pos:position pos:line="12" pos:column="85"/></operator> <operator pos:line="12" pos:column="86">-<pos:position pos:line="12" pos:column="87"/></operator><literal type="number" pos:line="12" pos:column="87">1<pos:position pos:line="12" pos:column="88"/></literal></expr>)<pos:position pos:line="12" pos:column="89"/></condition><then pos:line="12" pos:column="89"> <block pos:line="12" pos:column="90">{
		<expr_stmt><expr><call><name pos:line="13" pos:column="17">cleanup_set_pid<pos:position pos:line="13" pos:column="32"/></name><argument_list pos:line="13" pos:column="32">(<argument><expr><literal type="number" pos:line="13" pos:column="33">0<pos:position pos:line="13" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="36"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="14" pos:column="17">fprintf<pos:position pos:line="14" pos:column="24"/></name><argument_list pos:line="14" pos:column="24">(<argument><expr><name pos:line="14" pos:column="25">stderr<pos:position pos:line="14" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="14" pos:column="33">"failed to create pid file %s: %s\n"<pos:position pos:line="14" pos:column="69"/></literal></expr></argument>, <argument><expr><name pos:line="14" pos:column="71">pid_file<pos:position pos:line="14" pos:column="79"/></name></expr></argument>, <argument><expr><call><name pos:line="14" pos:column="81">strerror<pos:position pos:line="14" pos:column="89"/></name><argument_list pos:line="14" pos:column="89">(<argument><expr><name pos:line="14" pos:column="90">errno<pos:position pos:line="14" pos:column="95"/></name></expr></argument>)<pos:position pos:line="14" pos:column="96"/></argument_list></call></expr></argument>)<pos:position pos:line="14" pos:column="97"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="98"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="15" pos:column="17">rsyserr<pos:position pos:line="15" pos:column="24"/></name><argument_list pos:line="15" pos:column="24">(<argument><expr><name pos:line="15" pos:column="25">FLOG<pos:position pos:line="15" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="31">errno<pos:position pos:line="15" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="38">"failed to create pid file %s"<pos:position pos:line="15" pos:column="68"/></literal></expr></argument>, <argument><expr><name pos:line="15" pos:column="70">pid_file<pos:position pos:line="15" pos:column="78"/></name></expr></argument>)<pos:position pos:line="15" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="80"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="16" pos:column="17">exit_cleanup<pos:position pos:line="16" pos:column="29"/></name><argument_list pos:line="16" pos:column="29">(<argument><expr><name pos:line="16" pos:column="30">RERR_FILEIO<pos:position pos:line="16" pos:column="41"/></name></expr></argument>)<pos:position pos:line="16" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="43"/></expr_stmt>
	}<pos:position pos:line="17" pos:column="10"/></block></then></if>
	<expr_stmt><expr><call><name pos:line="18" pos:column="9">snprintf<pos:position pos:line="18" pos:column="17"/></name><argument_list pos:line="18" pos:column="17">(<argument><expr><name pos:line="18" pos:column="18">pidbuf<pos:position pos:line="18" pos:column="24"/></name></expr></argument>, <argument><expr><sizeof pos:line="18" pos:column="26">sizeof <name pos:line="18" pos:column="33">pidbuf<pos:position pos:line="18" pos:column="39"/></name></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="18" pos:column="41">"%ld\n"<pos:position pos:line="18" pos:column="48"/></literal></expr></argument>, <argument><expr><operator pos:line="18" pos:column="50">(<pos:position pos:line="18" pos:column="51"/></operator><name pos:line="18" pos:column="51">long<pos:position pos:line="18" pos:column="55"/></name><operator pos:line="18" pos:column="55">)<pos:position pos:line="18" pos:column="56"/></operator><name pos:line="18" pos:column="56">pid<pos:position pos:line="18" pos:column="59"/></name></expr></argument>)<pos:position pos:line="18" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="61"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="19" pos:column="9">write<pos:position pos:line="19" pos:column="14"/></name><argument_list pos:line="19" pos:column="14">(<argument><expr><name pos:line="19" pos:column="15">fd<pos:position pos:line="19" pos:column="17"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="19">pidbuf<pos:position pos:line="19" pos:column="25"/></name></expr></argument>, <argument><expr><call><name pos:line="19" pos:column="27">strlen<pos:position pos:line="19" pos:column="33"/></name><argument_list pos:line="19" pos:column="33">(<argument><expr><name pos:line="19" pos:column="34">pidbuf<pos:position pos:line="19" pos:column="40"/></name></expr></argument>)<pos:position pos:line="19" pos:column="41"/></argument_list></call></expr></argument>)<pos:position pos:line="19" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="43"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="20" pos:column="9">close<pos:position pos:line="20" pos:column="14"/></name><argument_list pos:line="20" pos:column="14">(<argument><expr><name pos:line="20" pos:column="15">fd<pos:position pos:line="20" pos:column="17"/></name></expr></argument>)<pos:position pos:line="20" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="19"/></expr_stmt>
}<pos:position pos:line="21" pos:column="2"/></block></function></unit>
