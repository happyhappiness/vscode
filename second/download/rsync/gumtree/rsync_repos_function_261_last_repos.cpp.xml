<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_261_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">NORETURN<pos:position pos:line="1" pos:column="9"/></name> <name pos:line="1" pos:column="10">void<pos:position pos:line="1" pos:column="14"/></name></type> <name pos:line="1" pos:column="15">_exit_cleanup<pos:position pos:line="1" pos:column="28"/></name><parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><name pos:line="1" pos:column="29">int<pos:position pos:line="1" pos:column="32"/></name></type> <name pos:line="1" pos:column="33">code<pos:position pos:line="1" pos:column="37"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="39">const<pos:position pos:line="1" pos:column="44"/></specifier> <name pos:line="1" pos:column="45">char<pos:position pos:line="1" pos:column="49"/></name> <modifier pos:line="1" pos:column="50">*<pos:position pos:line="1" pos:column="51"/></modifier></type><name pos:line="1" pos:column="51">file<pos:position pos:line="1" pos:column="55"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="57">int<pos:position pos:line="1" pos:column="60"/></name></type> <name pos:line="1" pos:column="61">line<pos:position pos:line="1" pos:column="65"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="66"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><specifier pos:line="3" pos:column="9">static<pos:position pos:line="3" pos:column="15"/></specifier> <type><name pos:line="3" pos:column="16">int<pos:position pos:line="3" pos:column="19"/></name></type> <name pos:line="3" pos:column="20">switch_step<pos:position pos:line="3" pos:column="31"/></name> <init pos:line="3" pos:column="32">= <expr><literal type="number" pos:line="3" pos:column="34">0<pos:position pos:line="3" pos:column="35"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="36"/></decl_stmt>
	<decl_stmt><decl><specifier pos:line="4" pos:column="9">static<pos:position pos:line="4" pos:column="15"/></specifier> <type><name pos:line="4" pos:column="16">int<pos:position pos:line="4" pos:column="19"/></name></type> <name pos:line="4" pos:column="20">exit_code<pos:position pos:line="4" pos:column="29"/></name> <init pos:line="4" pos:column="30">= <expr><literal type="number" pos:line="4" pos:column="32">0<pos:position pos:line="4" pos:column="33"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="35">exit_line<pos:position pos:line="4" pos:column="44"/></name> <init pos:line="4" pos:column="45">= <expr><literal type="number" pos:line="4" pos:column="47">0<pos:position pos:line="4" pos:column="48"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="49"/></decl_stmt>
	<decl_stmt><decl><specifier pos:line="5" pos:column="9">static<pos:position pos:line="5" pos:column="15"/></specifier> <type><specifier pos:line="5" pos:column="16">const<pos:position pos:line="5" pos:column="21"/></specifier> <name pos:line="5" pos:column="22">char<pos:position pos:line="5" pos:column="26"/></name> <modifier pos:line="5" pos:column="27">*<pos:position pos:line="5" pos:column="28"/></modifier></type><name pos:line="5" pos:column="28">exit_file<pos:position pos:line="5" pos:column="37"/></name> <init pos:line="5" pos:column="38">= <expr><name pos:line="5" pos:column="40">NULL<pos:position pos:line="5" pos:column="44"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="45"/></decl_stmt>
	<decl_stmt><decl><specifier pos:line="6" pos:column="9">static<pos:position pos:line="6" pos:column="15"/></specifier> <type><name pos:line="6" pos:column="16">int<pos:position pos:line="6" pos:column="19"/></name></type> <name pos:line="6" pos:column="20">first_code<pos:position pos:line="6" pos:column="30"/></name> <init pos:line="6" pos:column="31">= <expr><literal type="number" pos:line="6" pos:column="33">0<pos:position pos:line="6" pos:column="34"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="35"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="8" pos:column="9">SIGACTION<pos:position pos:line="8" pos:column="18"/></name><argument_list pos:line="8" pos:column="18">(<argument><expr><name pos:line="8" pos:column="19">SIGUSR1<pos:position pos:line="8" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="28">SIG_IGN<pos:position pos:line="8" pos:column="35"/></name></expr></argument>)<pos:position pos:line="8" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="37"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="9" pos:column="9">SIGACTION<pos:position pos:line="9" pos:column="18"/></name><argument_list pos:line="9" pos:column="18">(<argument><expr><name pos:line="9" pos:column="19">SIGUSR2<pos:position pos:line="9" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="28">SIG_IGN<pos:position pos:line="9" pos:column="35"/></name></expr></argument>)<pos:position pos:line="9" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="37"/></expr_stmt>

	<if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><operator pos:line="11" pos:column="13">!<pos:position pos:line="11" pos:column="14"/></operator><name pos:line="11" pos:column="14">exit_code<pos:position pos:line="11" pos:column="23"/></name></expr>)<pos:position pos:line="11" pos:column="24"/></condition><then pos:line="11" pos:column="24"> <block pos:line="11" pos:column="25">{ <comment type="block" pos:line="11" pos:column="27">/* Preserve first error exit info when recursing. */</comment>
		<expr_stmt><expr><name pos:line="12" pos:column="17">exit_code<pos:position pos:line="12" pos:column="26"/></name> <operator pos:line="12" pos:column="27">=<pos:position pos:line="12" pos:column="28"/></operator> <name pos:line="12" pos:column="29">code<pos:position pos:line="12" pos:column="33"/></name></expr>;<pos:position pos:line="12" pos:column="34"/></expr_stmt>
		<expr_stmt><expr><name pos:line="13" pos:column="17">exit_file<pos:position pos:line="13" pos:column="26"/></name> <operator pos:line="13" pos:column="27">=<pos:position pos:line="13" pos:column="28"/></operator> <name pos:line="13" pos:column="29">file<pos:position pos:line="13" pos:column="33"/></name></expr>;<pos:position pos:line="13" pos:column="34"/></expr_stmt>
		<expr_stmt><expr><name pos:line="14" pos:column="17">exit_line<pos:position pos:line="14" pos:column="26"/></name> <operator pos:line="14" pos:column="27">=<pos:position pos:line="14" pos:column="28"/></operator> <ternary><condition><expr><name pos:line="14" pos:column="29">line<pos:position pos:line="14" pos:column="33"/></name> <operator pos:line="14" pos:column="34">&lt;<pos:position pos:line="14" pos:column="38"/></operator> <literal type="number" pos:line="14" pos:column="36">0<pos:position pos:line="14" pos:column="37"/></literal></expr> ?<pos:position pos:line="14" pos:column="39"/></condition><then pos:line="14" pos:column="39"> <expr><operator pos:line="14" pos:column="40">-<pos:position pos:line="14" pos:column="41"/></operator><name pos:line="14" pos:column="41">line<pos:position pos:line="14" pos:column="45"/></name></expr> <pos:position pos:line="14" pos:column="46"/></then><else pos:line="14" pos:column="46">: <expr><name pos:line="14" pos:column="48">line<pos:position pos:line="14" pos:column="52"/></name></expr></else></ternary></expr>;<pos:position pos:line="14" pos:column="53"/></expr_stmt>
	}<pos:position pos:line="15" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="17" pos:column="9">/* If this is the exit at the end of the run, the server side
	 * should not attempt to output a message (see log_exit()). */</comment>
	<if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><name pos:line="19" pos:column="13">am_server<pos:position pos:line="19" pos:column="22"/></name> <operator pos:line="19" pos:column="23">&amp;&amp;<pos:position pos:line="19" pos:column="33"/></operator> <name pos:line="19" pos:column="26">code<pos:position pos:line="19" pos:column="30"/></name> <operator pos:line="19" pos:column="31">==<pos:position pos:line="19" pos:column="33"/></operator> <literal type="number" pos:line="19" pos:column="34">0<pos:position pos:line="19" pos:column="35"/></literal></expr>)<pos:position pos:line="19" pos:column="36"/></condition><then pos:line="19" pos:column="36">
		<block type="pseudo"><expr_stmt><expr><name pos:line="20" pos:column="17">am_server<pos:position pos:line="20" pos:column="26"/></name> <operator pos:line="20" pos:column="27">=<pos:position pos:line="20" pos:column="28"/></operator> <literal type="number" pos:line="20" pos:column="29">2<pos:position pos:line="20" pos:column="30"/></literal></expr>;<pos:position pos:line="20" pos:column="31"/></expr_stmt></block></then></if>

	<comment type="block" pos:line="22" pos:column="9">/* Some of our actions might cause a recursive call back here, so we
	 * keep track of where we are in the cleanup and never repeat a step. */</comment>
	<switch pos:line="24" pos:column="9">switch <condition pos:line="24" pos:column="16">(<expr><name pos:line="24" pos:column="17">switch_step<pos:position pos:line="24" pos:column="28"/></name></expr>)<pos:position pos:line="24" pos:column="29"/></condition> <block pos:line="24" pos:column="30">{
<cpp:include pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">include<pos:position pos:line="25" pos:column="9"/></cpp:directive> <cpp:file pos:line="25" pos:column="10">"case_N.h"<pos:position pos:line="25" pos:column="20"/></cpp:file></cpp:include> <comment type="block" pos:line="25" pos:column="21">/* case 0: */</comment>
		<expr_stmt><expr><name pos:line="26" pos:column="17">switch_step<pos:position pos:line="26" pos:column="28"/></name><operator pos:line="26" pos:column="28">++<pos:position pos:line="26" pos:column="30"/></operator></expr>;<pos:position pos:line="26" pos:column="31"/></expr_stmt>

		<expr_stmt><expr><name pos:line="28" pos:column="17">first_code<pos:position pos:line="28" pos:column="27"/></name> <operator pos:line="28" pos:column="28">=<pos:position pos:line="28" pos:column="29"/></operator> <name pos:line="28" pos:column="30">code<pos:position pos:line="28" pos:column="34"/></name></expr>;<pos:position pos:line="28" pos:column="35"/></expr_stmt>

		<if pos:line="30" pos:column="17">if <condition pos:line="30" pos:column="20">(<expr><name pos:line="30" pos:column="21">output_needs_newline<pos:position pos:line="30" pos:column="41"/></name></expr>)<pos:position pos:line="30" pos:column="42"/></condition><then pos:line="30" pos:column="42"> <block pos:line="30" pos:column="43">{
			<expr_stmt><expr><call><name pos:line="31" pos:column="25">fputc<pos:position pos:line="31" pos:column="30"/></name><argument_list pos:line="31" pos:column="30">(<argument><expr><literal type="char" pos:line="31" pos:column="31">'\n'<pos:position pos:line="31" pos:column="35"/></literal></expr></argument>, <argument><expr><name pos:line="31" pos:column="37">stdout<pos:position pos:line="31" pos:column="43"/></name></expr></argument>)<pos:position pos:line="31" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="45"/></expr_stmt>
			<expr_stmt><expr><name pos:line="32" pos:column="25">output_needs_newline<pos:position pos:line="32" pos:column="45"/></name> <operator pos:line="32" pos:column="46">=<pos:position pos:line="32" pos:column="47"/></operator> <literal type="number" pos:line="32" pos:column="48">0<pos:position pos:line="32" pos:column="49"/></literal></expr>;<pos:position pos:line="32" pos:column="50"/></expr_stmt>
		}<pos:position pos:line="33" pos:column="18"/></block></then></if>

		<if pos:line="35" pos:column="17">if <condition pos:line="35" pos:column="20">(<expr><call><name pos:line="35" pos:column="21">DEBUG_GTE<pos:position pos:line="35" pos:column="30"/></name><argument_list pos:line="35" pos:column="30">(<argument><expr><name pos:line="35" pos:column="31">EXIT<pos:position pos:line="35" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="35" pos:column="37">2<pos:position pos:line="35" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="35" pos:column="40"/></condition><then pos:line="35" pos:column="40"> <block pos:line="35" pos:column="41">{
			<expr_stmt><expr><call><name pos:line="36" pos:column="25">rprintf<pos:position pos:line="36" pos:column="32"/></name><argument_list pos:line="36" pos:column="32">(<argument><expr><name pos:line="36" pos:column="33">FINFO<pos:position pos:line="36" pos:column="38"/></name></expr></argument>,
				<argument><expr><literal type="string" pos:line="37" pos:column="33">"[%s] _exit_cleanup(code=%d, file=%s, line=%d): entered\n"<pos:position pos:line="37" pos:column="91"/></literal></expr></argument>,
				<argument><expr><call><name pos:line="38" pos:column="33">who_am_i<pos:position pos:line="38" pos:column="41"/></name><argument_list pos:line="38" pos:column="41">()<pos:position pos:line="38" pos:column="43"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="38" pos:column="45">code<pos:position pos:line="38" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="51">file<pos:position pos:line="38" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="57">line<pos:position pos:line="38" pos:column="61"/></name></expr></argument>)<pos:position pos:line="38" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="63"/></expr_stmt>
		}<pos:position pos:line="39" pos:column="18"/></block></then></if>

		<comment type="block" pos:line="41" pos:column="17">/* FALLTHROUGH */</comment>
<cpp:include pos:line="42" pos:column="1">#<cpp:directive pos:line="42" pos:column="2">include<pos:position pos:line="42" pos:column="9"/></cpp:directive> <cpp:file pos:line="42" pos:column="10">"case_N.h"<pos:position pos:line="42" pos:column="20"/></cpp:file></cpp:include>
		<expr_stmt><expr><name pos:line="43" pos:column="17">switch_step<pos:position pos:line="43" pos:column="28"/></name><operator pos:line="43" pos:column="28">++<pos:position pos:line="43" pos:column="30"/></operator></expr>;<pos:position pos:line="43" pos:column="31"/></expr_stmt>

		<if pos:line="45" pos:column="17">if <condition pos:line="45" pos:column="20">(<expr><name pos:line="45" pos:column="21">cleanup_child_pid<pos:position pos:line="45" pos:column="38"/></name> <operator pos:line="45" pos:column="39">!=<pos:position pos:line="45" pos:column="41"/></operator> <operator pos:line="45" pos:column="42">-<pos:position pos:line="45" pos:column="43"/></operator><literal type="number" pos:line="45" pos:column="43">1<pos:position pos:line="45" pos:column="44"/></literal></expr>)<pos:position pos:line="45" pos:column="45"/></condition><then pos:line="45" pos:column="45"> <block pos:line="45" pos:column="46">{
			<decl_stmt><decl><type><name pos:line="46" pos:column="25">int<pos:position pos:line="46" pos:column="28"/></name></type> <name pos:line="46" pos:column="29">status<pos:position pos:line="46" pos:column="35"/></name></decl>;<pos:position pos:line="46" pos:column="36"/></decl_stmt>
			<decl_stmt><decl><type><name pos:line="47" pos:column="25">int<pos:position pos:line="47" pos:column="28"/></name></type> <name pos:line="47" pos:column="29">pid<pos:position pos:line="47" pos:column="32"/></name> <init pos:line="47" pos:column="33">= <expr><call><name pos:line="47" pos:column="35">wait_process<pos:position pos:line="47" pos:column="47"/></name><argument_list pos:line="47" pos:column="47">(<argument><expr><name pos:line="47" pos:column="48">cleanup_child_pid<pos:position pos:line="47" pos:column="65"/></name></expr></argument>, <argument><expr><operator pos:line="47" pos:column="67">&amp;<pos:position pos:line="47" pos:column="72"/></operator><name pos:line="47" pos:column="68">status<pos:position pos:line="47" pos:column="74"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="76">WNOHANG<pos:position pos:line="47" pos:column="83"/></name></expr></argument>)<pos:position pos:line="47" pos:column="84"/></argument_list></call></expr></init></decl>;<pos:position pos:line="47" pos:column="85"/></decl_stmt>
			<if pos:line="48" pos:column="25">if <condition pos:line="48" pos:column="28">(<expr><name pos:line="48" pos:column="29">pid<pos:position pos:line="48" pos:column="32"/></name> <operator pos:line="48" pos:column="33">==<pos:position pos:line="48" pos:column="35"/></operator> <name pos:line="48" pos:column="36">cleanup_child_pid<pos:position pos:line="48" pos:column="53"/></name></expr>)<pos:position pos:line="48" pos:column="54"/></condition><then pos:line="48" pos:column="54"> <block pos:line="48" pos:column="55">{
				<expr_stmt><expr><name pos:line="49" pos:column="33">status<pos:position pos:line="49" pos:column="39"/></name> <operator pos:line="49" pos:column="40">=<pos:position pos:line="49" pos:column="41"/></operator> <call><name pos:line="49" pos:column="42">WEXITSTATUS<pos:position pos:line="49" pos:column="53"/></name><argument_list pos:line="49" pos:column="53">(<argument><expr><name pos:line="49" pos:column="54">status<pos:position pos:line="49" pos:column="60"/></name></expr></argument>)<pos:position pos:line="49" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="62"/></expr_stmt>
				<if pos:line="50" pos:column="33">if <condition pos:line="50" pos:column="36">(<expr><name pos:line="50" pos:column="37">status<pos:position pos:line="50" pos:column="43"/></name> <operator pos:line="50" pos:column="44">&gt;<pos:position pos:line="50" pos:column="48"/></operator> <name pos:line="50" pos:column="46">exit_code<pos:position pos:line="50" pos:column="55"/></name></expr>)<pos:position pos:line="50" pos:column="56"/></condition><then pos:line="50" pos:column="56">
					<block type="pseudo"><expr_stmt><expr><name pos:line="51" pos:column="41">exit_code<pos:position pos:line="51" pos:column="50"/></name> <operator pos:line="51" pos:column="51">=<pos:position pos:line="51" pos:column="52"/></operator> <name pos:line="51" pos:column="53">status<pos:position pos:line="51" pos:column="59"/></name></expr>;<pos:position pos:line="51" pos:column="60"/></expr_stmt></block></then></if>
			}<pos:position pos:line="52" pos:column="26"/></block></then></if>
		}<pos:position pos:line="53" pos:column="18"/></block></then></if>

		<comment type="block" pos:line="55" pos:column="17">/* FALLTHROUGH */</comment>
<cpp:include pos:line="56" pos:column="1">#<cpp:directive pos:line="56" pos:column="2">include<pos:position pos:line="56" pos:column="9"/></cpp:directive> <cpp:file pos:line="56" pos:column="10">"case_N.h"<pos:position pos:line="56" pos:column="20"/></cpp:file></cpp:include>
		<expr_stmt><expr><name pos:line="57" pos:column="17">switch_step<pos:position pos:line="57" pos:column="28"/></name><operator pos:line="57" pos:column="28">++<pos:position pos:line="57" pos:column="30"/></operator></expr>;<pos:position pos:line="57" pos:column="31"/></expr_stmt>

		<if pos:line="59" pos:column="17">if <condition pos:line="59" pos:column="20">(<expr><name pos:line="59" pos:column="21">cleanup_got_literal<pos:position pos:line="59" pos:column="40"/></name> <operator pos:line="59" pos:column="41">&amp;&amp;<pos:position pos:line="59" pos:column="51"/></operator> <operator pos:line="59" pos:column="44">(<pos:position pos:line="59" pos:column="45"/></operator><name pos:line="59" pos:column="45">cleanup_fname<pos:position pos:line="59" pos:column="58"/></name> <operator pos:line="59" pos:column="59">||<pos:position pos:line="59" pos:column="61"/></operator> <name pos:line="59" pos:column="62">cleanup_fd_w<pos:position pos:line="59" pos:column="74"/></name> <operator pos:line="59" pos:column="75">!=<pos:position pos:line="59" pos:column="77"/></operator> <operator pos:line="59" pos:column="78">-<pos:position pos:line="59" pos:column="79"/></operator><literal type="number" pos:line="59" pos:column="79">1<pos:position pos:line="59" pos:column="80"/></literal><operator pos:line="59" pos:column="80">)<pos:position pos:line="59" pos:column="81"/></operator></expr>)<pos:position pos:line="59" pos:column="82"/></condition><then pos:line="59" pos:column="82"> <block pos:line="59" pos:column="83">{
			<if pos:line="60" pos:column="25">if <condition pos:line="60" pos:column="28">(<expr><name pos:line="60" pos:column="29">cleanup_fd_r<pos:position pos:line="60" pos:column="41"/></name> <operator pos:line="60" pos:column="42">!=<pos:position pos:line="60" pos:column="44"/></operator> <operator pos:line="60" pos:column="45">-<pos:position pos:line="60" pos:column="46"/></operator><literal type="number" pos:line="60" pos:column="46">1<pos:position pos:line="60" pos:column="47"/></literal></expr>)<pos:position pos:line="60" pos:column="48"/></condition><then pos:line="60" pos:column="48"> <block pos:line="60" pos:column="49">{
				<expr_stmt><expr><call><name pos:line="61" pos:column="33">close<pos:position pos:line="61" pos:column="38"/></name><argument_list pos:line="61" pos:column="38">(<argument><expr><name pos:line="61" pos:column="39">cleanup_fd_r<pos:position pos:line="61" pos:column="51"/></name></expr></argument>)<pos:position pos:line="61" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="53"/></expr_stmt>
				<expr_stmt><expr><name pos:line="62" pos:column="33">cleanup_fd_r<pos:position pos:line="62" pos:column="45"/></name> <operator pos:line="62" pos:column="46">=<pos:position pos:line="62" pos:column="47"/></operator> <operator pos:line="62" pos:column="48">-<pos:position pos:line="62" pos:column="49"/></operator><literal type="number" pos:line="62" pos:column="49">1<pos:position pos:line="62" pos:column="50"/></literal></expr>;<pos:position pos:line="62" pos:column="51"/></expr_stmt>
			}<pos:position pos:line="63" pos:column="26"/></block></then></if>
			<if pos:line="64" pos:column="25">if <condition pos:line="64" pos:column="28">(<expr><name pos:line="64" pos:column="29">cleanup_fd_w<pos:position pos:line="64" pos:column="41"/></name> <operator pos:line="64" pos:column="42">!=<pos:position pos:line="64" pos:column="44"/></operator> <operator pos:line="64" pos:column="45">-<pos:position pos:line="64" pos:column="46"/></operator><literal type="number" pos:line="64" pos:column="46">1<pos:position pos:line="64" pos:column="47"/></literal></expr>)<pos:position pos:line="64" pos:column="48"/></condition><then pos:line="64" pos:column="48"> <block pos:line="64" pos:column="49">{
				<expr_stmt><expr><call><name pos:line="65" pos:column="33">flush_write_file<pos:position pos:line="65" pos:column="49"/></name><argument_list pos:line="65" pos:column="49">(<argument><expr><name pos:line="65" pos:column="50">cleanup_fd_w<pos:position pos:line="65" pos:column="62"/></name></expr></argument>)<pos:position pos:line="65" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="64"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="66" pos:column="33">close<pos:position pos:line="66" pos:column="38"/></name><argument_list pos:line="66" pos:column="38">(<argument><expr><name pos:line="66" pos:column="39">cleanup_fd_w<pos:position pos:line="66" pos:column="51"/></name></expr></argument>)<pos:position pos:line="66" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="53"/></expr_stmt>
				<expr_stmt><expr><name pos:line="67" pos:column="33">cleanup_fd_w<pos:position pos:line="67" pos:column="45"/></name> <operator pos:line="67" pos:column="46">=<pos:position pos:line="67" pos:column="47"/></operator> <operator pos:line="67" pos:column="48">-<pos:position pos:line="67" pos:column="49"/></operator><literal type="number" pos:line="67" pos:column="49">1<pos:position pos:line="67" pos:column="50"/></literal></expr>;<pos:position pos:line="67" pos:column="51"/></expr_stmt>
			}<pos:position pos:line="68" pos:column="26"/></block></then></if>
			<if pos:line="69" pos:column="25">if <condition pos:line="69" pos:column="28">(<expr><name pos:line="69" pos:column="29">cleanup_fname<pos:position pos:line="69" pos:column="42"/></name> <operator pos:line="69" pos:column="43">&amp;&amp;<pos:position pos:line="69" pos:column="53"/></operator> <name pos:line="69" pos:column="46">cleanup_new_fname<pos:position pos:line="69" pos:column="63"/></name> <operator pos:line="69" pos:column="64">&amp;&amp;<pos:position pos:line="69" pos:column="74"/></operator> <name pos:line="69" pos:column="67">keep_partial<pos:position pos:line="69" pos:column="79"/></name>
			 <operator pos:line="70" pos:column="26">&amp;&amp;<pos:position pos:line="70" pos:column="36"/></operator> <call><name pos:line="70" pos:column="29">handle_partial_dir<pos:position pos:line="70" pos:column="47"/></name><argument_list pos:line="70" pos:column="47">(<argument><expr><name pos:line="70" pos:column="48">cleanup_new_fname<pos:position pos:line="70" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="70" pos:column="67">PDIR_CREATE<pos:position pos:line="70" pos:column="78"/></name></expr></argument>)<pos:position pos:line="70" pos:column="79"/></argument_list></call></expr>)<pos:position pos:line="70" pos:column="80"/></condition><then pos:line="70" pos:column="80"> <block pos:line="70" pos:column="81">{
				<decl_stmt><decl><type><name pos:line="71" pos:column="33">int<pos:position pos:line="71" pos:column="36"/></name></type> <name pos:line="71" pos:column="37">tweak_modtime<pos:position pos:line="71" pos:column="50"/></name> <init pos:line="71" pos:column="51">= <expr><literal type="number" pos:line="71" pos:column="53">0<pos:position pos:line="71" pos:column="54"/></literal></expr></init></decl>;<pos:position pos:line="71" pos:column="55"/></decl_stmt>
				<decl_stmt><decl><type><specifier pos:line="72" pos:column="33">const<pos:position pos:line="72" pos:column="38"/></specifier> <name pos:line="72" pos:column="39">char<pos:position pos:line="72" pos:column="43"/></name> <modifier pos:line="72" pos:column="44">*<pos:position pos:line="72" pos:column="45"/></modifier></type><name pos:line="72" pos:column="45">fname<pos:position pos:line="72" pos:column="50"/></name> <init pos:line="72" pos:column="51">= <expr><name pos:line="72" pos:column="53">cleanup_fname<pos:position pos:line="72" pos:column="66"/></name></expr></init></decl>;<pos:position pos:line="72" pos:column="67"/></decl_stmt>
				<expr_stmt><expr><name pos:line="73" pos:column="33">cleanup_fname<pos:position pos:line="73" pos:column="46"/></name> <operator pos:line="73" pos:column="47">=<pos:position pos:line="73" pos:column="48"/></operator> <name pos:line="73" pos:column="49">NULL<pos:position pos:line="73" pos:column="53"/></name></expr>;<pos:position pos:line="73" pos:column="54"/></expr_stmt>
				<if pos:line="74" pos:column="33">if <condition pos:line="74" pos:column="36">(<expr><operator pos:line="74" pos:column="37">!<pos:position pos:line="74" pos:column="38"/></operator><name pos:line="74" pos:column="38">partial_dir<pos:position pos:line="74" pos:column="49"/></name></expr>)<pos:position pos:line="74" pos:column="50"/></condition><then pos:line="74" pos:column="50"> <block pos:line="74" pos:column="51">{
				    <comment type="block" pos:line="75" pos:column="37">/* We don't want to leave a partial file with a modern time or it
				     * could be skipped via --update.  Setting the time to something
				     * really old also helps it to stand out as unfinished in an ls. */</comment>
				    <expr_stmt><expr><name pos:line="78" pos:column="37">tweak_modtime<pos:position pos:line="78" pos:column="50"/></name> <operator pos:line="78" pos:column="51">=<pos:position pos:line="78" pos:column="52"/></operator> <literal type="number" pos:line="78" pos:column="53">1<pos:position pos:line="78" pos:column="54"/></literal></expr>;<pos:position pos:line="78" pos:column="55"/></expr_stmt>
				    <expr_stmt><expr><name><name pos:line="79" pos:column="37">cleanup_file<pos:position pos:line="79" pos:column="49"/></name><operator pos:line="79" pos:column="49">-&gt;<pos:position pos:line="79" pos:column="54"/></operator><name pos:line="79" pos:column="51">modtime<pos:position pos:line="79" pos:column="58"/></name></name> <operator pos:line="79" pos:column="59">=<pos:position pos:line="79" pos:column="60"/></operator> <literal type="number" pos:line="79" pos:column="61">0<pos:position pos:line="79" pos:column="62"/></literal></expr>;<pos:position pos:line="79" pos:column="63"/></expr_stmt>
				}<pos:position pos:line="80" pos:column="34"/></block></then></if>
				<expr_stmt><expr><call><name pos:line="81" pos:column="33">finish_transfer<pos:position pos:line="81" pos:column="48"/></name><argument_list pos:line="81" pos:column="48">(<argument><expr><name pos:line="81" pos:column="49">cleanup_new_fname<pos:position pos:line="81" pos:column="66"/></name></expr></argument>, <argument><expr><name pos:line="81" pos:column="68">fname<pos:position pos:line="81" pos:column="73"/></name></expr></argument>, <argument><expr><name pos:line="81" pos:column="75">NULL<pos:position pos:line="81" pos:column="79"/></name></expr></argument>, <argument><expr><name pos:line="81" pos:column="81">NULL<pos:position pos:line="81" pos:column="85"/></name></expr></argument>,
						<argument><expr><name pos:line="82" pos:column="49">cleanup_file<pos:position pos:line="82" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="82" pos:column="63">tweak_modtime<pos:position pos:line="82" pos:column="76"/></name></expr></argument>, <argument><expr><operator pos:line="82" pos:column="78">!<pos:position pos:line="82" pos:column="79"/></operator><name pos:line="82" pos:column="79">partial_dir<pos:position pos:line="82" pos:column="90"/></name></expr></argument>)<pos:position pos:line="82" pos:column="91"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="92"/></expr_stmt>
			}<pos:position pos:line="83" pos:column="26"/></block></then></if>
		}<pos:position pos:line="84" pos:column="18"/></block></then></if>

		<comment type="block" pos:line="86" pos:column="17">/* FALLTHROUGH */</comment>
<cpp:include pos:line="87" pos:column="1">#<cpp:directive pos:line="87" pos:column="2">include<pos:position pos:line="87" pos:column="9"/></cpp:directive> <cpp:file pos:line="87" pos:column="10">"case_N.h"<pos:position pos:line="87" pos:column="20"/></cpp:file></cpp:include>
		<expr_stmt><expr><name pos:line="88" pos:column="17">switch_step<pos:position pos:line="88" pos:column="28"/></name><operator pos:line="88" pos:column="28">++<pos:position pos:line="88" pos:column="30"/></operator></expr>;<pos:position pos:line="88" pos:column="31"/></expr_stmt>

		<if pos:line="90" pos:column="17">if <condition pos:line="90" pos:column="20">(<expr><name pos:line="90" pos:column="21">flush_ok_after_signal<pos:position pos:line="90" pos:column="42"/></name></expr>)<pos:position pos:line="90" pos:column="43"/></condition><then pos:line="90" pos:column="43"> <block pos:line="90" pos:column="44">{
			<expr_stmt><expr><name pos:line="91" pos:column="25">flush_ok_after_signal<pos:position pos:line="91" pos:column="46"/></name> <operator pos:line="91" pos:column="47">=<pos:position pos:line="91" pos:column="48"/></operator> <name pos:line="91" pos:column="49">False<pos:position pos:line="91" pos:column="54"/></name></expr>;<pos:position pos:line="91" pos:column="55"/></expr_stmt>
			<if pos:line="92" pos:column="25">if <condition pos:line="92" pos:column="28">(<expr><name pos:line="92" pos:column="29">code<pos:position pos:line="92" pos:column="33"/></name> <operator pos:line="92" pos:column="34">==<pos:position pos:line="92" pos:column="36"/></operator> <name pos:line="92" pos:column="37">RERR_SIGNAL<pos:position pos:line="92" pos:column="48"/></name></expr>)<pos:position pos:line="92" pos:column="49"/></condition><then pos:line="92" pos:column="49">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="93" pos:column="33">io_flush<pos:position pos:line="93" pos:column="41"/></name><argument_list pos:line="93" pos:column="41">(<argument><expr><name pos:line="93" pos:column="42">FULL_FLUSH<pos:position pos:line="93" pos:column="52"/></name></expr></argument>)<pos:position pos:line="93" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="54"/></expr_stmt></block></then></if>
		}<pos:position pos:line="94" pos:column="18"/></block></then></if>
		<if pos:line="95" pos:column="17">if <condition pos:line="95" pos:column="20">(<expr><operator pos:line="95" pos:column="21">!<pos:position pos:line="95" pos:column="22"/></operator><name pos:line="95" pos:column="22">exit_code<pos:position pos:line="95" pos:column="31"/></name> <operator pos:line="95" pos:column="32">&amp;&amp;<pos:position pos:line="95" pos:column="42"/></operator> <operator pos:line="95" pos:column="35">!<pos:position pos:line="95" pos:column="36"/></operator><name pos:line="95" pos:column="36">code<pos:position pos:line="95" pos:column="40"/></name></expr>)<pos:position pos:line="95" pos:column="41"/></condition><then pos:line="95" pos:column="41">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="96" pos:column="25">io_flush<pos:position pos:line="96" pos:column="33"/></name><argument_list pos:line="96" pos:column="33">(<argument><expr><name pos:line="96" pos:column="34">FULL_FLUSH<pos:position pos:line="96" pos:column="44"/></name></expr></argument>)<pos:position pos:line="96" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="46"/></expr_stmt></block></then></if>

		<comment type="block" pos:line="98" pos:column="17">/* FALLTHROUGH */</comment>
<cpp:include pos:line="99" pos:column="1">#<cpp:directive pos:line="99" pos:column="2">include<pos:position pos:line="99" pos:column="9"/></cpp:directive> <cpp:file pos:line="99" pos:column="10">"case_N.h"<pos:position pos:line="99" pos:column="20"/></cpp:file></cpp:include>
		<expr_stmt><expr><name pos:line="100" pos:column="17">switch_step<pos:position pos:line="100" pos:column="28"/></name><operator pos:line="100" pos:column="28">++<pos:position pos:line="100" pos:column="30"/></operator></expr>;<pos:position pos:line="100" pos:column="31"/></expr_stmt>

		<if pos:line="102" pos:column="17">if <condition pos:line="102" pos:column="20">(<expr><name pos:line="102" pos:column="21">cleanup_fname<pos:position pos:line="102" pos:column="34"/></name></expr>)<pos:position pos:line="102" pos:column="35"/></condition><then pos:line="102" pos:column="35">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="103" pos:column="25">do_unlink<pos:position pos:line="103" pos:column="34"/></name><argument_list pos:line="103" pos:column="34">(<argument><expr><name pos:line="103" pos:column="35">cleanup_fname<pos:position pos:line="103" pos:column="48"/></name></expr></argument>)<pos:position pos:line="103" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="103" pos:column="50"/></expr_stmt></block></then></if>
		<if pos:line="104" pos:column="17">if <condition pos:line="104" pos:column="20">(<expr><name pos:line="104" pos:column="21">exit_code<pos:position pos:line="104" pos:column="30"/></name></expr>)<pos:position pos:line="104" pos:column="31"/></condition><then pos:line="104" pos:column="31">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="105" pos:column="25">kill_all<pos:position pos:line="105" pos:column="33"/></name><argument_list pos:line="105" pos:column="33">(<argument><expr><name pos:line="105" pos:column="34">SIGUSR1<pos:position pos:line="105" pos:column="41"/></name></expr></argument>)<pos:position pos:line="105" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="105" pos:column="43"/></expr_stmt></block></then></if>
		<if pos:line="106" pos:column="17">if <condition pos:line="106" pos:column="20">(<expr><name pos:line="106" pos:column="21">cleanup_pid<pos:position pos:line="106" pos:column="32"/></name> <operator pos:line="106" pos:column="33">&amp;&amp;<pos:position pos:line="106" pos:column="43"/></operator> <name pos:line="106" pos:column="36">cleanup_pid<pos:position pos:line="106" pos:column="47"/></name> <operator pos:line="106" pos:column="48">==<pos:position pos:line="106" pos:column="50"/></operator> <call><name pos:line="106" pos:column="51">getpid<pos:position pos:line="106" pos:column="57"/></name><argument_list pos:line="106" pos:column="57">()<pos:position pos:line="106" pos:column="59"/></argument_list></call></expr>)<pos:position pos:line="106" pos:column="60"/></condition><then pos:line="106" pos:column="60"> <block pos:line="106" pos:column="61">{
			<decl_stmt><decl><type><name pos:line="107" pos:column="25">char<pos:position pos:line="107" pos:column="29"/></name> <modifier pos:line="107" pos:column="30">*<pos:position pos:line="107" pos:column="31"/></modifier></type><name pos:line="107" pos:column="31">pidf<pos:position pos:line="107" pos:column="35"/></name> <init pos:line="107" pos:column="36">= <expr><call><name pos:line="107" pos:column="38">lp_pid_file<pos:position pos:line="107" pos:column="49"/></name><argument_list pos:line="107" pos:column="49">()<pos:position pos:line="107" pos:column="51"/></argument_list></call></expr></init></decl>;<pos:position pos:line="107" pos:column="52"/></decl_stmt>
			<if pos:line="108" pos:column="25">if <condition pos:line="108" pos:column="28">(<expr><name pos:line="108" pos:column="29">pidf<pos:position pos:line="108" pos:column="33"/></name> <operator pos:line="108" pos:column="34">&amp;&amp;<pos:position pos:line="108" pos:column="44"/></operator> <operator pos:line="108" pos:column="37">*<pos:position pos:line="108" pos:column="38"/></operator><name pos:line="108" pos:column="38">pidf<pos:position pos:line="108" pos:column="42"/></name></expr>)<pos:position pos:line="108" pos:column="43"/></condition><then pos:line="108" pos:column="43">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="109" pos:column="33">unlink<pos:position pos:line="109" pos:column="39"/></name><argument_list pos:line="109" pos:column="39">(<argument><expr><call><name pos:line="109" pos:column="40">lp_pid_file<pos:position pos:line="109" pos:column="51"/></name><argument_list pos:line="109" pos:column="51">()<pos:position pos:line="109" pos:column="53"/></argument_list></call></expr></argument>)<pos:position pos:line="109" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="109" pos:column="55"/></expr_stmt></block></then></if>
		}<pos:position pos:line="110" pos:column="18"/></block></then></if>

		<if pos:line="112" pos:column="17">if <condition pos:line="112" pos:column="20">(<expr><name pos:line="112" pos:column="21">exit_code<pos:position pos:line="112" pos:column="30"/></name> <operator pos:line="112" pos:column="31">==<pos:position pos:line="112" pos:column="33"/></operator> <literal type="number" pos:line="112" pos:column="34">0<pos:position pos:line="112" pos:column="35"/></literal></expr>)<pos:position pos:line="112" pos:column="36"/></condition><then pos:line="112" pos:column="36"> <block pos:line="112" pos:column="37">{
			<if pos:line="113" pos:column="25">if <condition pos:line="113" pos:column="28">(<expr><name pos:line="113" pos:column="29">code<pos:position pos:line="113" pos:column="33"/></name></expr>)<pos:position pos:line="113" pos:column="34"/></condition><then pos:line="113" pos:column="34">
				<block type="pseudo"><expr_stmt><expr><name pos:line="114" pos:column="33">exit_code<pos:position pos:line="114" pos:column="42"/></name> <operator pos:line="114" pos:column="43">=<pos:position pos:line="114" pos:column="44"/></operator> <name pos:line="114" pos:column="45">code<pos:position pos:line="114" pos:column="49"/></name></expr>;<pos:position pos:line="114" pos:column="50"/></expr_stmt></block></then></if>
			<if pos:line="115" pos:column="25">if <condition pos:line="115" pos:column="28">(<expr><name pos:line="115" pos:column="29">io_error<pos:position pos:line="115" pos:column="37"/></name> <operator pos:line="115" pos:column="38">&amp;<pos:position pos:line="115" pos:column="43"/></operator> <name pos:line="115" pos:column="40">IOERR_DEL_LIMIT<pos:position pos:line="115" pos:column="55"/></name></expr>)<pos:position pos:line="115" pos:column="56"/></condition><then pos:line="115" pos:column="56">
				<block type="pseudo"><expr_stmt><expr><name pos:line="116" pos:column="33">exit_code<pos:position pos:line="116" pos:column="42"/></name> <operator pos:line="116" pos:column="43">=<pos:position pos:line="116" pos:column="44"/></operator> <name pos:line="116" pos:column="45">RERR_DEL_LIMIT<pos:position pos:line="116" pos:column="59"/></name></expr>;<pos:position pos:line="116" pos:column="60"/></expr_stmt></block></then></if>
			<if pos:line="117" pos:column="25">if <condition pos:line="117" pos:column="28">(<expr><name pos:line="117" pos:column="29">io_error<pos:position pos:line="117" pos:column="37"/></name> <operator pos:line="117" pos:column="38">&amp;<pos:position pos:line="117" pos:column="43"/></operator> <name pos:line="117" pos:column="40">IOERR_VANISHED<pos:position pos:line="117" pos:column="54"/></name></expr>)<pos:position pos:line="117" pos:column="55"/></condition><then pos:line="117" pos:column="55">
				<block type="pseudo"><expr_stmt><expr><name pos:line="118" pos:column="33">exit_code<pos:position pos:line="118" pos:column="42"/></name> <operator pos:line="118" pos:column="43">=<pos:position pos:line="118" pos:column="44"/></operator> <name pos:line="118" pos:column="45">RERR_VANISHED<pos:position pos:line="118" pos:column="58"/></name></expr>;<pos:position pos:line="118" pos:column="59"/></expr_stmt></block></then></if>
			<if pos:line="119" pos:column="25">if <condition pos:line="119" pos:column="28">(<expr><name pos:line="119" pos:column="29">io_error<pos:position pos:line="119" pos:column="37"/></name> <operator pos:line="119" pos:column="38">&amp;<pos:position pos:line="119" pos:column="43"/></operator> <name pos:line="119" pos:column="40">IOERR_GENERAL<pos:position pos:line="119" pos:column="53"/></name> <operator pos:line="119" pos:column="54">||<pos:position pos:line="119" pos:column="56"/></operator> <name pos:line="119" pos:column="57">got_xfer_error<pos:position pos:line="119" pos:column="71"/></name></expr>)<pos:position pos:line="119" pos:column="72"/></condition><then pos:line="119" pos:column="72">
				<block type="pseudo"><expr_stmt><expr><name pos:line="120" pos:column="33">exit_code<pos:position pos:line="120" pos:column="42"/></name> <operator pos:line="120" pos:column="43">=<pos:position pos:line="120" pos:column="44"/></operator> <name pos:line="120" pos:column="45">RERR_PARTIAL<pos:position pos:line="120" pos:column="57"/></name></expr>;<pos:position pos:line="120" pos:column="58"/></expr_stmt></block></then></if>
		}<pos:position pos:line="121" pos:column="18"/></block></then></if>

		<comment type="block" pos:line="123" pos:column="17">/* If line &lt; 0, this exit is after a MSG_ERROR_EXIT event, so
		 * we don't want to output a duplicate error. */</comment>
		<if pos:line="125" pos:column="17">if <condition pos:line="125" pos:column="20">(<expr><operator pos:line="125" pos:column="21">(<pos:position pos:line="125" pos:column="22"/></operator><name pos:line="125" pos:column="22">exit_code<pos:position pos:line="125" pos:column="31"/></name> <operator pos:line="125" pos:column="32">&amp;&amp;<pos:position pos:line="125" pos:column="42"/></operator> <name pos:line="125" pos:column="35">line<pos:position pos:line="125" pos:column="39"/></name> <operator pos:line="125" pos:column="40">&gt;<pos:position pos:line="125" pos:column="44"/></operator> <literal type="number" pos:line="125" pos:column="42">0<pos:position pos:line="125" pos:column="43"/></literal><operator pos:line="125" pos:column="43">)<pos:position pos:line="125" pos:column="44"/></operator>
		 <operator pos:line="126" pos:column="18">||<pos:position pos:line="126" pos:column="20"/></operator> <name pos:line="126" pos:column="21">am_daemon<pos:position pos:line="126" pos:column="30"/></name> <operator pos:line="126" pos:column="31">||<pos:position pos:line="126" pos:column="33"/></operator> <operator pos:line="126" pos:column="34">(<pos:position pos:line="126" pos:column="35"/></operator><name pos:line="126" pos:column="35">logfile_name<pos:position pos:line="126" pos:column="47"/></name> <operator pos:line="126" pos:column="48">&amp;&amp;<pos:position pos:line="126" pos:column="58"/></operator> <operator pos:line="126" pos:column="51">(<pos:position pos:line="126" pos:column="52"/></operator><name pos:line="126" pos:column="52">am_server<pos:position pos:line="126" pos:column="61"/></name> <operator pos:line="126" pos:column="62">||<pos:position pos:line="126" pos:column="64"/></operator> <operator pos:line="126" pos:column="65">!<pos:position pos:line="126" pos:column="66"/></operator><call><name pos:line="126" pos:column="66">INFO_GTE<pos:position pos:line="126" pos:column="74"/></name><argument_list pos:line="126" pos:column="74">(<argument><expr><name pos:line="126" pos:column="75">STATS<pos:position pos:line="126" pos:column="80"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="126" pos:column="82">1<pos:position pos:line="126" pos:column="83"/></literal></expr></argument>)<pos:position pos:line="126" pos:column="84"/></argument_list></call><operator pos:line="126" pos:column="84">)<pos:position pos:line="126" pos:column="85"/></operator><operator pos:line="126" pos:column="85">)<pos:position pos:line="126" pos:column="86"/></operator></expr>)<pos:position pos:line="126" pos:column="87"/></condition><then pos:line="126" pos:column="87">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="127" pos:column="25">log_exit<pos:position pos:line="127" pos:column="33"/></name><argument_list pos:line="127" pos:column="33">(<argument><expr><name pos:line="127" pos:column="34">exit_code<pos:position pos:line="127" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="127" pos:column="45">exit_file<pos:position pos:line="127" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="127" pos:column="56">exit_line<pos:position pos:line="127" pos:column="65"/></name></expr></argument>)<pos:position pos:line="127" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="127" pos:column="67"/></expr_stmt></block></then></if>

		<comment type="block" pos:line="129" pos:column="17">/* FALLTHROUGH */</comment>
<cpp:include pos:line="130" pos:column="1">#<cpp:directive pos:line="130" pos:column="2">include<pos:position pos:line="130" pos:column="9"/></cpp:directive> <cpp:file pos:line="130" pos:column="10">"case_N.h"<pos:position pos:line="130" pos:column="20"/></cpp:file></cpp:include>
		<expr_stmt><expr><name pos:line="131" pos:column="17">switch_step<pos:position pos:line="131" pos:column="28"/></name><operator pos:line="131" pos:column="28">++<pos:position pos:line="131" pos:column="30"/></operator></expr>;<pos:position pos:line="131" pos:column="31"/></expr_stmt>

		<if pos:line="133" pos:column="17">if <condition pos:line="133" pos:column="20">(<expr><call><name pos:line="133" pos:column="21">DEBUG_GTE<pos:position pos:line="133" pos:column="30"/></name><argument_list pos:line="133" pos:column="30">(<argument><expr><name pos:line="133" pos:column="31">EXIT<pos:position pos:line="133" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="133" pos:column="37">1<pos:position pos:line="133" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="133" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="133" pos:column="40"/></condition><then pos:line="133" pos:column="40"> <block pos:line="133" pos:column="41">{
			<expr_stmt><expr><call><name pos:line="134" pos:column="25">rprintf<pos:position pos:line="134" pos:column="32"/></name><argument_list pos:line="134" pos:column="32">(<argument><expr><name pos:line="134" pos:column="33">FINFO<pos:position pos:line="134" pos:column="38"/></name></expr></argument>,
				<argument><expr><literal type="string" pos:line="135" pos:column="33">"[%s] _exit_cleanup(code=%d, file=%s, line=%d): "<pos:position pos:line="135" pos:column="82"/></literal>
				<literal type="string" pos:line="136" pos:column="33">"about to call exit(%d)%s\n"<pos:position pos:line="136" pos:column="61"/></literal></expr></argument>,
				<argument><expr><call><name pos:line="137" pos:column="33">who_am_i<pos:position pos:line="137" pos:column="41"/></name><argument_list pos:line="137" pos:column="41">()<pos:position pos:line="137" pos:column="43"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="137" pos:column="45">first_code<pos:position pos:line="137" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="137" pos:column="57">exit_file<pos:position pos:line="137" pos:column="66"/></name></expr></argument>, <argument><expr><name pos:line="137" pos:column="68">exit_line<pos:position pos:line="137" pos:column="77"/></name></expr></argument>, <argument><expr><name pos:line="137" pos:column="79">exit_code<pos:position pos:line="137" pos:column="88"/></name></expr></argument>,
				<argument><expr><ternary><condition><expr><name pos:line="138" pos:column="33">dry_run<pos:position pos:line="138" pos:column="40"/></name></expr> ?<pos:position pos:line="138" pos:column="42"/></condition><then pos:line="138" pos:column="42"> <expr><literal type="string" pos:line="138" pos:column="43">" (DRY RUN)"<pos:position pos:line="138" pos:column="55"/></literal></expr> <pos:position pos:line="138" pos:column="56"/></then><else pos:line="138" pos:column="56">: <expr><literal type="string" pos:line="138" pos:column="58">""<pos:position pos:line="138" pos:column="60"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="138" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="138" pos:column="62"/></expr_stmt>
		}<pos:position pos:line="139" pos:column="18"/></block></then></if>

		<comment type="block" pos:line="141" pos:column="17">/* FALLTHROUGH */</comment>
<cpp:include pos:line="142" pos:column="1">#<cpp:directive pos:line="142" pos:column="2">include<pos:position pos:line="142" pos:column="9"/></cpp:directive> <cpp:file pos:line="142" pos:column="10">"case_N.h"<pos:position pos:line="142" pos:column="20"/></cpp:file></cpp:include>
		<expr_stmt><expr><name pos:line="143" pos:column="17">switch_step<pos:position pos:line="143" pos:column="28"/></name><operator pos:line="143" pos:column="28">++<pos:position pos:line="143" pos:column="30"/></operator></expr>;<pos:position pos:line="143" pos:column="31"/></expr_stmt>

		<if pos:line="145" pos:column="17">if <condition pos:line="145" pos:column="20">(<expr><name pos:line="145" pos:column="21">exit_code<pos:position pos:line="145" pos:column="30"/></name> <operator pos:line="145" pos:column="31">&amp;&amp;<pos:position pos:line="145" pos:column="41"/></operator> <name pos:line="145" pos:column="34">exit_code<pos:position pos:line="145" pos:column="43"/></name> <operator pos:line="145" pos:column="44">!=<pos:position pos:line="145" pos:column="46"/></operator> <name pos:line="145" pos:column="47">RERR_SOCKETIO<pos:position pos:line="145" pos:column="60"/></name> <operator pos:line="145" pos:column="61">&amp;&amp;<pos:position pos:line="145" pos:column="71"/></operator> <name pos:line="145" pos:column="64">exit_code<pos:position pos:line="145" pos:column="73"/></name> <operator pos:line="145" pos:column="74">!=<pos:position pos:line="145" pos:column="76"/></operator> <name pos:line="145" pos:column="77">RERR_STREAMIO<pos:position pos:line="145" pos:column="90"/></name> <operator pos:line="145" pos:column="91">&amp;&amp;<pos:position pos:line="145" pos:column="101"/></operator> <name pos:line="145" pos:column="94">exit_code<pos:position pos:line="145" pos:column="103"/></name> <operator pos:line="145" pos:column="104">!=<pos:position pos:line="145" pos:column="106"/></operator> <name pos:line="145" pos:column="107">RERR_SIGNAL1<pos:position pos:line="145" pos:column="119"/></name>
		 <operator pos:line="146" pos:column="18">&amp;&amp;<pos:position pos:line="146" pos:column="28"/></operator> <name pos:line="146" pos:column="21">exit_code<pos:position pos:line="146" pos:column="30"/></name> <operator pos:line="146" pos:column="31">!=<pos:position pos:line="146" pos:column="33"/></operator> <name pos:line="146" pos:column="34">RERR_TIMEOUT<pos:position pos:line="146" pos:column="46"/></name> <operator pos:line="146" pos:column="47">&amp;&amp;<pos:position pos:line="146" pos:column="57"/></operator> <operator pos:line="146" pos:column="50">!<pos:position pos:line="146" pos:column="51"/></operator><name pos:line="146" pos:column="51">shutting_down<pos:position pos:line="146" pos:column="64"/></name> <operator pos:line="146" pos:column="65">&amp;&amp;<pos:position pos:line="146" pos:column="75"/></operator> <operator pos:line="146" pos:column="68">(<pos:position pos:line="146" pos:column="69"/></operator><name pos:line="146" pos:column="69">protocol_version<pos:position pos:line="146" pos:column="85"/></name> <operator pos:line="146" pos:column="86">&gt;=<pos:position pos:line="146" pos:column="91"/></operator> <literal type="number" pos:line="146" pos:column="89">31<pos:position pos:line="146" pos:column="91"/></literal> <operator pos:line="146" pos:column="92">||<pos:position pos:line="146" pos:column="94"/></operator> <name pos:line="146" pos:column="95">am_receiver<pos:position pos:line="146" pos:column="106"/></name><operator pos:line="146" pos:column="106">)<pos:position pos:line="146" pos:column="107"/></operator></expr>)<pos:position pos:line="146" pos:column="108"/></condition><then pos:line="146" pos:column="108"> <block pos:line="146" pos:column="109">{
			<if pos:line="147" pos:column="25">if <condition pos:line="147" pos:column="28">(<expr><name pos:line="147" pos:column="29">line<pos:position pos:line="147" pos:column="33"/></name> <operator pos:line="147" pos:column="34">&gt;<pos:position pos:line="147" pos:column="38"/></operator> <literal type="number" pos:line="147" pos:column="36">0<pos:position pos:line="147" pos:column="37"/></literal></expr>)<pos:position pos:line="147" pos:column="38"/></condition><then pos:line="147" pos:column="38"> <block pos:line="147" pos:column="39">{
				<if pos:line="148" pos:column="33">if <condition pos:line="148" pos:column="36">(<expr><call><name pos:line="148" pos:column="37">DEBUG_GTE<pos:position pos:line="148" pos:column="46"/></name><argument_list pos:line="148" pos:column="46">(<argument><expr><name pos:line="148" pos:column="47">EXIT<pos:position pos:line="148" pos:column="51"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="148" pos:column="53">3<pos:position pos:line="148" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="148" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="148" pos:column="56"/></condition><then pos:line="148" pos:column="56"> <block pos:line="148" pos:column="57">{
					<expr_stmt><expr><call><name pos:line="149" pos:column="41">rprintf<pos:position pos:line="149" pos:column="48"/></name><argument_list pos:line="149" pos:column="48">(<argument><expr><name pos:line="149" pos:column="49">FINFO<pos:position pos:line="149" pos:column="54"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="149" pos:column="56">"[%s] sending MSG_ERROR_EXIT with exit_code %d\n"<pos:position pos:line="149" pos:column="105"/></literal></expr></argument>,
						<argument><expr><call><name pos:line="150" pos:column="49">who_am_i<pos:position pos:line="150" pos:column="57"/></name><argument_list pos:line="150" pos:column="57">()<pos:position pos:line="150" pos:column="59"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="150" pos:column="61">exit_code<pos:position pos:line="150" pos:column="70"/></name></expr></argument>)<pos:position pos:line="150" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="150" pos:column="72"/></expr_stmt>
				}<pos:position pos:line="151" pos:column="34"/></block></then></if>
				<expr_stmt><expr><call><name pos:line="152" pos:column="33">send_msg_int<pos:position pos:line="152" pos:column="45"/></name><argument_list pos:line="152" pos:column="45">(<argument><expr><name pos:line="152" pos:column="46">MSG_ERROR_EXIT<pos:position pos:line="152" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="152" pos:column="62">exit_code<pos:position pos:line="152" pos:column="71"/></name></expr></argument>)<pos:position pos:line="152" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="152" pos:column="73"/></expr_stmt>
			}<pos:position pos:line="153" pos:column="26"/></block></then></if>
			<expr_stmt><expr><call><name pos:line="154" pos:column="25">noop_io_until_death<pos:position pos:line="154" pos:column="44"/></name><argument_list pos:line="154" pos:column="44">()<pos:position pos:line="154" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="154" pos:column="47"/></expr_stmt>
		}<pos:position pos:line="155" pos:column="18"/></block></then></if>

		<comment type="block" pos:line="157" pos:column="17">/* FALLTHROUGH */</comment>
<cpp:include pos:line="158" pos:column="1">#<cpp:directive pos:line="158" pos:column="2">include<pos:position pos:line="158" pos:column="9"/></cpp:directive> <cpp:file pos:line="158" pos:column="10">"case_N.h"<pos:position pos:line="158" pos:column="20"/></cpp:file></cpp:include>
		<expr_stmt><expr><name pos:line="159" pos:column="17">switch_step<pos:position pos:line="159" pos:column="28"/></name><operator pos:line="159" pos:column="28">++<pos:position pos:line="159" pos:column="30"/></operator></expr>;<pos:position pos:line="159" pos:column="31"/></expr_stmt>

		<if pos:line="161" pos:column="17">if <condition pos:line="161" pos:column="20">(<expr><name pos:line="161" pos:column="21">am_server<pos:position pos:line="161" pos:column="30"/></name> <operator pos:line="161" pos:column="31">&amp;&amp;<pos:position pos:line="161" pos:column="41"/></operator> <name pos:line="161" pos:column="34">exit_code<pos:position pos:line="161" pos:column="43"/></name></expr>)<pos:position pos:line="161" pos:column="44"/></condition><then pos:line="161" pos:column="44">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="162" pos:column="25">msleep<pos:position pos:line="162" pos:column="31"/></name><argument_list pos:line="162" pos:column="31">(<argument><expr><literal type="number" pos:line="162" pos:column="32">100<pos:position pos:line="162" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="162" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="162" pos:column="37"/></expr_stmt></block></then></if>
		<expr_stmt><expr><call><name pos:line="163" pos:column="17">close_all<pos:position pos:line="163" pos:column="26"/></name><argument_list pos:line="163" pos:column="26">()<pos:position pos:line="163" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="163" pos:column="29"/></expr_stmt>

		<comment type="block" pos:line="165" pos:column="17">/* FALLTHROUGH */</comment>
	<default pos:line="166" pos:column="9">default:<pos:position pos:line="166" pos:column="17"/></default>
		<break pos:line="167" pos:column="17">break;<pos:position pos:line="167" pos:column="23"/></break>
	}<pos:position pos:line="168" pos:column="10"/></block></switch>

	<expr_stmt><expr><call><name pos:line="170" pos:column="9">exit<pos:position pos:line="170" pos:column="13"/></name><argument_list pos:line="170" pos:column="13">(<argument><expr><name pos:line="170" pos:column="14">exit_code<pos:position pos:line="170" pos:column="23"/></name></expr></argument>)<pos:position pos:line="170" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="170" pos:column="25"/></expr_stmt>
}<pos:position pos:line="171" pos:column="2"/></block></function></unit>
