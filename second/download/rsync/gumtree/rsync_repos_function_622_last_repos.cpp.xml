<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_622_last_repos.cpp" pos:tabs="8"><decl_stmt><decl><type><name pos:line="1" pos:column="1">local<pos:position pos:line="1" pos:column="6"/></name> <name pos:line="1" pos:column="7">void<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">copy_block<pos:position pos:line="1" pos:column="22"/></name><argument_list pos:line="1" pos:column="22">(<argument><expr><name pos:line="1" pos:column="23">s<pos:position pos:line="1" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="1" pos:column="26">buf<pos:position pos:line="1" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="1" pos:column="31">len<pos:position pos:line="1" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="1" pos:column="36">header<pos:position pos:line="1" pos:column="42"/></name></expr></argument>)<pos:position pos:line="1" pos:column="43"/></argument_list>
    <name pos:line="2" pos:column="5">deflate_state<pos:position pos:line="2" pos:column="18"/></name> <modifier pos:line="2" pos:column="19">*<pos:position pos:line="2" pos:column="20"/></modifier><name pos:line="2" pos:column="20">s<pos:position pos:line="2" pos:column="21"/></name></decl>;<pos:position pos:line="2" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">charf<pos:position pos:line="3" pos:column="10"/></name>    <modifier pos:line="3" pos:column="14">*<pos:position pos:line="3" pos:column="15"/></modifier></type><name pos:line="3" pos:column="15">buf<pos:position pos:line="3" pos:column="18"/></name></decl>;<pos:position pos:line="3" pos:column="19"/></decl_stmt>    <comment type="block" pos:line="3" pos:column="23">/* the input data */</comment>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">unsigned<pos:position pos:line="4" pos:column="13"/></name></type> <name pos:line="4" pos:column="14">len<pos:position pos:line="4" pos:column="17"/></name></decl>;<pos:position pos:line="4" pos:column="18"/></decl_stmt>     <comment type="block" pos:line="4" pos:column="23">/* its length */</comment>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">int<pos:position pos:line="5" pos:column="8"/></name></type>      <name pos:line="5" pos:column="14">header<pos:position pos:line="5" pos:column="20"/></name></decl>;<pos:position pos:line="5" pos:column="21"/></decl_stmt>  <comment type="block" pos:line="5" pos:column="23">/* true if block header must be written */</comment>
<block pos:line="6" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="7" pos:column="5">bi_windup<pos:position pos:line="7" pos:column="14"/></name><argument_list pos:line="7" pos:column="14">(<argument><expr><name pos:line="7" pos:column="15">s<pos:position pos:line="7" pos:column="16"/></name></expr></argument>)<pos:position pos:line="7" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="18"/></expr_stmt>        <comment type="block" pos:line="7" pos:column="26">/* align on byte boundary */</comment>

    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><name pos:line="9" pos:column="9">header<pos:position pos:line="9" pos:column="15"/></name></expr>)<pos:position pos:line="9" pos:column="16"/></condition><then pos:line="9" pos:column="16"> <block pos:line="9" pos:column="17">{
        <expr_stmt><expr><call><name pos:line="10" pos:column="9">put_short<pos:position pos:line="10" pos:column="18"/></name><argument_list pos:line="10" pos:column="18">(<argument><expr><name pos:line="10" pos:column="19">s<pos:position pos:line="10" pos:column="20"/></name></expr></argument>, <argument><expr><operator pos:line="10" pos:column="22">(<pos:position pos:line="10" pos:column="23"/></operator><name pos:line="10" pos:column="23">ush<pos:position pos:line="10" pos:column="26"/></name><operator pos:line="10" pos:column="26">)<pos:position pos:line="10" pos:column="27"/></operator><name pos:line="10" pos:column="27">len<pos:position pos:line="10" pos:column="30"/></name></expr></argument>)<pos:position pos:line="10" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="32"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="11" pos:column="9">put_short<pos:position pos:line="11" pos:column="18"/></name><argument_list pos:line="11" pos:column="18">(<argument><expr><name pos:line="11" pos:column="19">s<pos:position pos:line="11" pos:column="20"/></name></expr></argument>, <argument><expr><operator pos:line="11" pos:column="22">(<pos:position pos:line="11" pos:column="23"/></operator><name pos:line="11" pos:column="23">ush<pos:position pos:line="11" pos:column="26"/></name><operator pos:line="11" pos:column="26">)<pos:position pos:line="11" pos:column="27"/></operator><operator pos:line="11" pos:column="27">~<pos:position pos:line="11" pos:column="28"/></operator><name pos:line="11" pos:column="28">len<pos:position pos:line="11" pos:column="31"/></name></expr></argument>)<pos:position pos:line="11" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="33"/></expr_stmt>
<cpp:ifdef pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">ifdef<pos:position pos:line="12" pos:column="7"/></cpp:directive> <name pos:line="12" pos:column="8">DEBUG<pos:position pos:line="12" pos:column="13"/></name></cpp:ifdef>
        <expr_stmt><expr><name><name pos:line="13" pos:column="9">s<pos:position pos:line="13" pos:column="10"/></name><operator pos:line="13" pos:column="10">-&gt;<pos:position pos:line="13" pos:column="15"/></operator><name pos:line="13" pos:column="12">bits_sent<pos:position pos:line="13" pos:column="21"/></name></name> <operator pos:line="13" pos:column="22">+=<pos:position pos:line="13" pos:column="24"/></operator> <literal type="number" pos:line="13" pos:column="25">2<pos:position pos:line="13" pos:column="26"/></literal><operator pos:line="13" pos:column="26">*<pos:position pos:line="13" pos:column="27"/></operator><literal type="number" pos:line="13" pos:column="27">16<pos:position pos:line="13" pos:column="29"/></literal></expr>;<pos:position pos:line="13" pos:column="30"/></expr_stmt>
<cpp:endif pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">endif<pos:position pos:line="14" pos:column="7"/></cpp:directive></cpp:endif>
    }<pos:position pos:line="15" pos:column="6"/></block></then></if>
<cpp:ifdef pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">ifdef<pos:position pos:line="16" pos:column="7"/></cpp:directive> <name pos:line="16" pos:column="8">DEBUG<pos:position pos:line="16" pos:column="13"/></name></cpp:ifdef>
    <expr_stmt><expr><name><name pos:line="17" pos:column="5">s<pos:position pos:line="17" pos:column="6"/></name><operator pos:line="17" pos:column="6">-&gt;<pos:position pos:line="17" pos:column="11"/></operator><name pos:line="17" pos:column="8">bits_sent<pos:position pos:line="17" pos:column="17"/></name></name> <operator pos:line="17" pos:column="18">+=<pos:position pos:line="17" pos:column="20"/></operator> <operator pos:line="17" pos:column="21">(<pos:position pos:line="17" pos:column="22"/></operator><name pos:line="17" pos:column="22">ulg<pos:position pos:line="17" pos:column="25"/></name><operator pos:line="17" pos:column="25">)<pos:position pos:line="17" pos:column="26"/></operator><name pos:line="17" pos:column="26">len<pos:position pos:line="17" pos:column="29"/></name><operator pos:line="17" pos:column="29">&lt;&lt;<pos:position pos:line="17" pos:column="37"/></operator><literal type="number" pos:line="17" pos:column="31">3<pos:position pos:line="17" pos:column="32"/></literal></expr>;<pos:position pos:line="17" pos:column="33"/></expr_stmt>
<cpp:endif pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">endif<pos:position pos:line="18" pos:column="7"/></cpp:directive></cpp:endif>
    <while pos:line="19" pos:column="5">while <condition pos:line="19" pos:column="11">(<expr><name pos:line="19" pos:column="12">len<pos:position pos:line="19" pos:column="15"/></name><operator pos:line="19" pos:column="15">--<pos:position pos:line="19" pos:column="17"/></operator></expr>)<pos:position pos:line="19" pos:column="18"/></condition> <block pos:line="19" pos:column="19">{
        <expr_stmt><expr><call><name pos:line="20" pos:column="9">put_byte<pos:position pos:line="20" pos:column="17"/></name><argument_list pos:line="20" pos:column="17">(<argument><expr><name pos:line="20" pos:column="18">s<pos:position pos:line="20" pos:column="19"/></name></expr></argument>, <argument><expr><operator pos:line="20" pos:column="21">*<pos:position pos:line="20" pos:column="22"/></operator><name pos:line="20" pos:column="22">buf<pos:position pos:line="20" pos:column="25"/></name><operator pos:line="20" pos:column="25">++<pos:position pos:line="20" pos:column="27"/></operator></expr></argument>)<pos:position pos:line="20" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="29"/></expr_stmt>
    }<pos:position pos:line="21" pos:column="6"/></block></while>
}<pos:position pos:line="22" pos:column="2"/></block></unit>
