<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_289_rsync-2.0.3.cpp" pos:tabs="8"><decl_stmt><decl><type><name pos:line="1" pos:column="1">local<pos:position pos:line="1" pos:column="6"/></name> <name pos:line="1" pos:column="7">int<pos:position pos:line="1" pos:column="10"/></name></type> <name pos:line="1" pos:column="11">inflate_trees_bits<pos:position pos:line="1" pos:column="29"/></name><argument_list pos:line="1" pos:column="29">(<argument><expr><name pos:line="1" pos:column="30">c<pos:position pos:line="1" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="1" pos:column="33">bb<pos:position pos:line="1" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="1" pos:column="37">tb<pos:position pos:line="1" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="1" pos:column="41">z<pos:position pos:line="1" pos:column="42"/></name></expr></argument>)<pos:position pos:line="1" pos:column="43"/></argument_list>
<name pos:line="2" pos:column="1">uIntf<pos:position pos:line="2" pos:column="6"/></name> <modifier pos:line="2" pos:column="7">*<pos:position pos:line="2" pos:column="8"/></modifier><name pos:line="2" pos:column="8">c<pos:position pos:line="2" pos:column="9"/></name></decl>;<pos:position pos:line="2" pos:column="10"/></decl_stmt>               <comment type="block" pos:line="2" pos:column="25">/* 19 code lengths */</comment>
<decl_stmt><decl><type><name pos:line="3" pos:column="1">uIntf<pos:position pos:line="3" pos:column="6"/></name> <modifier pos:line="3" pos:column="7">*<pos:position pos:line="3" pos:column="8"/></modifier></type><name pos:line="3" pos:column="8">bb<pos:position pos:line="3" pos:column="10"/></name></decl>;<pos:position pos:line="3" pos:column="11"/></decl_stmt>              <comment type="block" pos:line="3" pos:column="25">/* bits tree desired/actual depth */</comment>
<decl_stmt><decl><type><name pos:line="4" pos:column="1">inflate_huft<pos:position pos:line="4" pos:column="13"/></name> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier> <name pos:line="4" pos:column="16">FAR<pos:position pos:line="4" pos:column="19"/></name> <modifier pos:line="4" pos:column="20">*<pos:position pos:line="4" pos:column="21"/></modifier></type><name pos:line="4" pos:column="21">tb<pos:position pos:line="4" pos:column="23"/></name></decl>;<pos:position pos:line="4" pos:column="24"/></decl_stmt> <comment type="block" pos:line="4" pos:column="25">/* bits tree result */</comment>
<decl_stmt><decl><type><name pos:line="5" pos:column="1">z_stream<pos:position pos:line="5" pos:column="9"/></name> <modifier pos:line="5" pos:column="10">*<pos:position pos:line="5" pos:column="11"/></modifier></type><name pos:line="5" pos:column="11">z<pos:position pos:line="5" pos:column="12"/></name></decl>;<pos:position pos:line="5" pos:column="13"/></decl_stmt>            <comment type="block" pos:line="5" pos:column="25">/* for zfree function */</comment>
<block pos:line="6" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">int<pos:position pos:line="7" pos:column="6"/></name></type> <name pos:line="7" pos:column="7">r<pos:position pos:line="7" pos:column="8"/></name></decl>;<pos:position pos:line="7" pos:column="9"/></decl_stmt>

  <expr_stmt><expr><name pos:line="9" pos:column="3">r<pos:position pos:line="9" pos:column="4"/></name> <operator pos:line="9" pos:column="5">=<pos:position pos:line="9" pos:column="6"/></operator> <call><name pos:line="9" pos:column="7">huft_build<pos:position pos:line="9" pos:column="17"/></name><argument_list pos:line="9" pos:column="17">(<argument><expr><name pos:line="9" pos:column="18">c<pos:position pos:line="9" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="9" pos:column="21">19<pos:position pos:line="9" pos:column="23"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="9" pos:column="25">19<pos:position pos:line="9" pos:column="27"/></literal></expr></argument>, <argument><expr><operator pos:line="9" pos:column="29">(<pos:position pos:line="9" pos:column="30"/></operator><name pos:line="9" pos:column="30">uIntf<pos:position pos:line="9" pos:column="35"/></name><operator pos:line="9" pos:column="35">*<pos:position pos:line="9" pos:column="36"/></operator><operator pos:line="9" pos:column="36">)<pos:position pos:line="9" pos:column="37"/></operator><name pos:line="9" pos:column="37">Z_NULL<pos:position pos:line="9" pos:column="43"/></name></expr></argument>, <argument><expr><operator pos:line="9" pos:column="45">(<pos:position pos:line="9" pos:column="46"/></operator><name pos:line="9" pos:column="46">uIntf<pos:position pos:line="9" pos:column="51"/></name><operator pos:line="9" pos:column="51">*<pos:position pos:line="9" pos:column="52"/></operator><operator pos:line="9" pos:column="52">)<pos:position pos:line="9" pos:column="53"/></operator><name pos:line="9" pos:column="53">Z_NULL<pos:position pos:line="9" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="61">tb<pos:position pos:line="9" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="65">bb<pos:position pos:line="9" pos:column="67"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="69">z<pos:position pos:line="9" pos:column="70"/></name></expr></argument>)<pos:position pos:line="9" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="72"/></expr_stmt>
  <if pos:line="10" pos:column="3">if <condition pos:line="10" pos:column="6">(<expr><name pos:line="10" pos:column="7">r<pos:position pos:line="10" pos:column="8"/></name> <operator pos:line="10" pos:column="9">==<pos:position pos:line="10" pos:column="11"/></operator> <name pos:line="10" pos:column="12">Z_DATA_ERROR<pos:position pos:line="10" pos:column="24"/></name></expr>)<pos:position pos:line="10" pos:column="25"/></condition><then pos:line="10" pos:column="25">
    <block type="pseudo"><expr_stmt><expr><name><name pos:line="11" pos:column="5">z<pos:position pos:line="11" pos:column="6"/></name><operator pos:line="11" pos:column="6">-&gt;<pos:position pos:line="11" pos:column="11"/></operator><name pos:line="11" pos:column="8">msg<pos:position pos:line="11" pos:column="11"/></name></name> <operator pos:line="11" pos:column="12">=<pos:position pos:line="11" pos:column="13"/></operator> <literal type="string" pos:line="11" pos:column="14">"oversubscribed dynamic bit lengths tree"<pos:position pos:line="11" pos:column="55"/></literal></expr>;<pos:position pos:line="11" pos:column="56"/></expr_stmt></block></then>
  <elseif pos:line="12" pos:column="3">else <if pos:line="12" pos:column="8">if <condition pos:line="12" pos:column="11">(<expr><name pos:line="12" pos:column="12">r<pos:position pos:line="12" pos:column="13"/></name> <operator pos:line="12" pos:column="14">==<pos:position pos:line="12" pos:column="16"/></operator> <name pos:line="12" pos:column="17">Z_BUF_ERROR<pos:position pos:line="12" pos:column="28"/></name></expr>)<pos:position pos:line="12" pos:column="29"/></condition><then pos:line="12" pos:column="29">
  <block pos:line="13" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="14" pos:column="5">inflate_trees_free<pos:position pos:line="14" pos:column="23"/></name><argument_list pos:line="14" pos:column="23">(<argument><expr><operator pos:line="14" pos:column="24">*<pos:position pos:line="14" pos:column="25"/></operator><name pos:line="14" pos:column="25">tb<pos:position pos:line="14" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="29">z<pos:position pos:line="14" pos:column="30"/></name></expr></argument>)<pos:position pos:line="14" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="15" pos:column="5">z<pos:position pos:line="15" pos:column="6"/></name><operator pos:line="15" pos:column="6">-&gt;<pos:position pos:line="15" pos:column="11"/></operator><name pos:line="15" pos:column="8">msg<pos:position pos:line="15" pos:column="11"/></name></name> <operator pos:line="15" pos:column="12">=<pos:position pos:line="15" pos:column="13"/></operator> <literal type="string" pos:line="15" pos:column="14">"incomplete dynamic bit lengths tree"<pos:position pos:line="15" pos:column="51"/></literal></expr>;<pos:position pos:line="15" pos:column="52"/></expr_stmt>
    <expr_stmt><expr><name pos:line="16" pos:column="5">r<pos:position pos:line="16" pos:column="6"/></name> <operator pos:line="16" pos:column="7">=<pos:position pos:line="16" pos:column="8"/></operator> <name pos:line="16" pos:column="9">Z_DATA_ERROR<pos:position pos:line="16" pos:column="21"/></name></expr>;<pos:position pos:line="16" pos:column="22"/></expr_stmt>
  }<pos:position pos:line="17" pos:column="4"/></block></then></if></elseif></if>
  <return pos:line="18" pos:column="3">return <expr><name pos:line="18" pos:column="10">r<pos:position pos:line="18" pos:column="11"/></name></expr>;<pos:position pos:line="18" pos:column="12"/></return>
}<pos:position pos:line="19" pos:column="2"/></block></unit>
