<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_306_rsync-2.0.18.cpp" pos:tabs="8"><function_decl><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name> <name pos:line="1" pos:column="5">ZEXPORT<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">deflate<pos:position pos:line="1" pos:column="20"/></name> <parameter_list pos:line="1" pos:column="21">(<parameter><decl><type><name pos:line="1" pos:column="22">strm<pos:position pos:line="1" pos:column="26"/></name></type></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="28">flush<pos:position pos:line="1" pos:column="33"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="34"/></parameter_list>
    <decl_stmt><decl><type><name pos:line="2" pos:column="5">z_streamp<pos:position pos:line="2" pos:column="14"/></name></type> <name pos:line="2" pos:column="15">strm<pos:position pos:line="2" pos:column="19"/></name></decl>;<pos:position pos:line="2" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">int<pos:position pos:line="3" pos:column="8"/></name></type> <name pos:line="3" pos:column="9">flush<pos:position pos:line="3" pos:column="14"/></name></decl>;<pos:position pos:line="3" pos:column="15"/></decl_stmt>
<block pos:line="4" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">int<pos:position pos:line="5" pos:column="8"/></name></type> <name pos:line="5" pos:column="9">old_flush<pos:position pos:line="5" pos:column="18"/></name></decl>;<pos:position pos:line="5" pos:column="19"/></decl_stmt> <comment type="block" pos:line="5" pos:column="20">/* value of flush param for previous deflate call */</comment>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">deflate_state<pos:position pos:line="6" pos:column="18"/></name> <modifier pos:line="6" pos:column="19">*<pos:position pos:line="6" pos:column="20"/></modifier></type><name pos:line="6" pos:column="20">s<pos:position pos:line="6" pos:column="21"/></name></decl>;<pos:position pos:line="6" pos:column="22"/></decl_stmt>

    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><name pos:line="8" pos:column="9">strm<pos:position pos:line="8" pos:column="13"/></name> <operator pos:line="8" pos:column="14">==<pos:position pos:line="8" pos:column="16"/></operator> <name pos:line="8" pos:column="17">Z_NULL<pos:position pos:line="8" pos:column="23"/></name> <operator pos:line="8" pos:column="24">||<pos:position pos:line="8" pos:column="26"/></operator> <name><name pos:line="8" pos:column="27">strm<pos:position pos:line="8" pos:column="31"/></name><operator pos:line="8" pos:column="31">-&gt;<pos:position pos:line="8" pos:column="36"/></operator><name pos:line="8" pos:column="33">state<pos:position pos:line="8" pos:column="38"/></name></name> <operator pos:line="8" pos:column="39">==<pos:position pos:line="8" pos:column="41"/></operator> <name pos:line="8" pos:column="42">Z_NULL<pos:position pos:line="8" pos:column="48"/></name> <operator pos:line="8" pos:column="49">||<pos:position pos:line="8" pos:column="51"/></operator>
	<name pos:line="9" pos:column="9">flush<pos:position pos:line="9" pos:column="14"/></name> <operator pos:line="9" pos:column="15">&gt;<pos:position pos:line="9" pos:column="19"/></operator> <name pos:line="9" pos:column="17">Z_INSERT_ONLY<pos:position pos:line="9" pos:column="30"/></name> <operator pos:line="9" pos:column="31">||<pos:position pos:line="9" pos:column="33"/></operator> <name pos:line="9" pos:column="34">flush<pos:position pos:line="9" pos:column="39"/></name> <operator pos:line="9" pos:column="40">&lt;<pos:position pos:line="9" pos:column="44"/></operator> <literal type="number" pos:line="9" pos:column="42">0<pos:position pos:line="9" pos:column="43"/></literal></expr>)<pos:position pos:line="9" pos:column="44"/></condition><then pos:line="9" pos:column="44"> <block pos:line="9" pos:column="45">{
        <return pos:line="10" pos:column="9">return <expr><name pos:line="10" pos:column="16">Z_STREAM_ERROR<pos:position pos:line="10" pos:column="30"/></name></expr>;<pos:position pos:line="10" pos:column="31"/></return>
    }<pos:position pos:line="11" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="12" pos:column="5">s<pos:position pos:line="12" pos:column="6"/></name> <operator pos:line="12" pos:column="7">=<pos:position pos:line="12" pos:column="8"/></operator> <name><name pos:line="12" pos:column="9">strm<pos:position pos:line="12" pos:column="13"/></name><operator pos:line="12" pos:column="13">-&gt;<pos:position pos:line="12" pos:column="18"/></operator><name pos:line="12" pos:column="15">state<pos:position pos:line="12" pos:column="20"/></name></name></expr>;<pos:position pos:line="12" pos:column="21"/></expr_stmt>

    <if pos:line="14" pos:column="5">if <condition pos:line="14" pos:column="8">(<expr><name><name pos:line="14" pos:column="9">strm<pos:position pos:line="14" pos:column="13"/></name><operator pos:line="14" pos:column="13">-&gt;<pos:position pos:line="14" pos:column="18"/></operator><name pos:line="14" pos:column="15">next_out<pos:position pos:line="14" pos:column="23"/></name></name> <operator pos:line="14" pos:column="24">==<pos:position pos:line="14" pos:column="26"/></operator> <name pos:line="14" pos:column="27">Z_NULL<pos:position pos:line="14" pos:column="33"/></name> <operator pos:line="14" pos:column="34">||<pos:position pos:line="14" pos:column="36"/></operator>
        <operator pos:line="15" pos:column="9">(<pos:position pos:line="15" pos:column="10"/></operator><name><name pos:line="15" pos:column="10">strm<pos:position pos:line="15" pos:column="14"/></name><operator pos:line="15" pos:column="14">-&gt;<pos:position pos:line="15" pos:column="19"/></operator><name pos:line="15" pos:column="16">next_in<pos:position pos:line="15" pos:column="23"/></name></name> <operator pos:line="15" pos:column="24">==<pos:position pos:line="15" pos:column="26"/></operator> <name pos:line="15" pos:column="27">Z_NULL<pos:position pos:line="15" pos:column="33"/></name> <operator pos:line="15" pos:column="34">&amp;&amp;<pos:position pos:line="15" pos:column="44"/></operator> <name><name pos:line="15" pos:column="37">strm<pos:position pos:line="15" pos:column="41"/></name><operator pos:line="15" pos:column="41">-&gt;<pos:position pos:line="15" pos:column="46"/></operator><name pos:line="15" pos:column="43">avail_in<pos:position pos:line="15" pos:column="51"/></name></name> <operator pos:line="15" pos:column="52">!=<pos:position pos:line="15" pos:column="54"/></operator> <literal type="number" pos:line="15" pos:column="55">0<pos:position pos:line="15" pos:column="56"/></literal><operator pos:line="15" pos:column="56">)<pos:position pos:line="15" pos:column="57"/></operator> <operator pos:line="15" pos:column="58">||<pos:position pos:line="15" pos:column="60"/></operator>
	<operator pos:line="16" pos:column="9">(<pos:position pos:line="16" pos:column="10"/></operator><name><name pos:line="16" pos:column="10">s<pos:position pos:line="16" pos:column="11"/></name><operator pos:line="16" pos:column="11">-&gt;<pos:position pos:line="16" pos:column="16"/></operator><name pos:line="16" pos:column="13">status<pos:position pos:line="16" pos:column="19"/></name></name> <operator pos:line="16" pos:column="20">==<pos:position pos:line="16" pos:column="22"/></operator> <name pos:line="16" pos:column="23">FINISH_STATE<pos:position pos:line="16" pos:column="35"/></name> <operator pos:line="16" pos:column="36">&amp;&amp;<pos:position pos:line="16" pos:column="46"/></operator> <name pos:line="16" pos:column="39">flush<pos:position pos:line="16" pos:column="44"/></name> <operator pos:line="16" pos:column="45">!=<pos:position pos:line="16" pos:column="47"/></operator> <name pos:line="16" pos:column="48">Z_FINISH<pos:position pos:line="16" pos:column="56"/></name><operator pos:line="16" pos:column="56">)<pos:position pos:line="16" pos:column="57"/></operator></expr>)<pos:position pos:line="16" pos:column="58"/></condition><then pos:line="16" pos:column="58"> <block pos:line="16" pos:column="59">{
        <expr_stmt><expr><call><name pos:line="17" pos:column="9">ERR_RETURN<pos:position pos:line="17" pos:column="19"/></name><argument_list pos:line="17" pos:column="19">(<argument><expr><name pos:line="17" pos:column="20">strm<pos:position pos:line="17" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="26">Z_STREAM_ERROR<pos:position pos:line="17" pos:column="40"/></name></expr></argument>)<pos:position pos:line="17" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="42"/></expr_stmt>
    }<pos:position pos:line="18" pos:column="6"/></block></then></if>
    <if pos:line="19" pos:column="5">if <condition pos:line="19" pos:column="8">(<expr><name><name pos:line="19" pos:column="9">strm<pos:position pos:line="19" pos:column="13"/></name><operator pos:line="19" pos:column="13">-&gt;<pos:position pos:line="19" pos:column="18"/></operator><name pos:line="19" pos:column="15">avail_out<pos:position pos:line="19" pos:column="24"/></name></name> <operator pos:line="19" pos:column="25">==<pos:position pos:line="19" pos:column="27"/></operator> <literal type="number" pos:line="19" pos:column="28">0<pos:position pos:line="19" pos:column="29"/></literal></expr>)<pos:position pos:line="19" pos:column="30"/></condition><then pos:line="19" pos:column="30"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="19" pos:column="31">ERR_RETURN<pos:position pos:line="19" pos:column="41"/></name><argument_list pos:line="19" pos:column="41">(<argument><expr><name pos:line="19" pos:column="42">strm<pos:position pos:line="19" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="48">Z_BUF_ERROR<pos:position pos:line="19" pos:column="59"/></name></expr></argument>)<pos:position pos:line="19" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="61"/></expr_stmt></block></then></if>

    <expr_stmt><expr><name><name pos:line="21" pos:column="5">s<pos:position pos:line="21" pos:column="6"/></name><operator pos:line="21" pos:column="6">-&gt;<pos:position pos:line="21" pos:column="11"/></operator><name pos:line="21" pos:column="8">strm<pos:position pos:line="21" pos:column="12"/></name></name> <operator pos:line="21" pos:column="13">=<pos:position pos:line="21" pos:column="14"/></operator> <name pos:line="21" pos:column="15">strm<pos:position pos:line="21" pos:column="19"/></name></expr>;<pos:position pos:line="21" pos:column="20"/></expr_stmt> <comment type="block" pos:line="21" pos:column="21">/* just in case */</comment>
    <expr_stmt><expr><name pos:line="22" pos:column="5">old_flush<pos:position pos:line="22" pos:column="14"/></name> <operator pos:line="22" pos:column="15">=<pos:position pos:line="22" pos:column="16"/></operator> <name><name pos:line="22" pos:column="17">s<pos:position pos:line="22" pos:column="18"/></name><operator pos:line="22" pos:column="18">-&gt;<pos:position pos:line="22" pos:column="23"/></operator><name pos:line="22" pos:column="20">last_flush<pos:position pos:line="22" pos:column="30"/></name></name></expr>;<pos:position pos:line="22" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="23" pos:column="5">s<pos:position pos:line="23" pos:column="6"/></name><operator pos:line="23" pos:column="6">-&gt;<pos:position pos:line="23" pos:column="11"/></operator><name pos:line="23" pos:column="8">last_flush<pos:position pos:line="23" pos:column="18"/></name></name> <operator pos:line="23" pos:column="19">=<pos:position pos:line="23" pos:column="20"/></operator> <name pos:line="23" pos:column="21">flush<pos:position pos:line="23" pos:column="26"/></name></expr>;<pos:position pos:line="23" pos:column="27"/></expr_stmt>

    <comment type="block" pos:line="25" pos:column="5">/* Write the zlib header */</comment>
    <if pos:line="26" pos:column="5">if <condition pos:line="26" pos:column="8">(<expr><name><name pos:line="26" pos:column="9">s<pos:position pos:line="26" pos:column="10"/></name><operator pos:line="26" pos:column="10">-&gt;<pos:position pos:line="26" pos:column="15"/></operator><name pos:line="26" pos:column="12">status<pos:position pos:line="26" pos:column="18"/></name></name> <operator pos:line="26" pos:column="19">==<pos:position pos:line="26" pos:column="21"/></operator> <name pos:line="26" pos:column="22">INIT_STATE<pos:position pos:line="26" pos:column="32"/></name></expr>)<pos:position pos:line="26" pos:column="33"/></condition><then pos:line="26" pos:column="33"> <block pos:line="26" pos:column="34">{

        <decl_stmt><decl><type><name pos:line="28" pos:column="9">uInt<pos:position pos:line="28" pos:column="13"/></name></type> <name pos:line="28" pos:column="14">header<pos:position pos:line="28" pos:column="20"/></name> <init pos:line="28" pos:column="21">= <expr><operator pos:line="28" pos:column="23">(<pos:position pos:line="28" pos:column="24"/></operator><name pos:line="28" pos:column="24">Z_DEFLATED<pos:position pos:line="28" pos:column="34"/></name> <operator pos:line="28" pos:column="35">+<pos:position pos:line="28" pos:column="36"/></operator> <operator pos:line="28" pos:column="37">(<pos:position pos:line="28" pos:column="38"/></operator><operator pos:line="28" pos:column="38">(<pos:position pos:line="28" pos:column="39"/></operator><name><name pos:line="28" pos:column="39">s<pos:position pos:line="28" pos:column="40"/></name><operator pos:line="28" pos:column="40">-&gt;<pos:position pos:line="28" pos:column="45"/></operator><name pos:line="28" pos:column="42">w_bits<pos:position pos:line="28" pos:column="48"/></name></name><operator pos:line="28" pos:column="48">-<pos:position pos:line="28" pos:column="49"/></operator><literal type="number" pos:line="28" pos:column="49">8<pos:position pos:line="28" pos:column="50"/></literal><operator pos:line="28" pos:column="50">)<pos:position pos:line="28" pos:column="51"/></operator><operator pos:line="28" pos:column="51">&lt;&lt;<pos:position pos:line="28" pos:column="59"/></operator><literal type="number" pos:line="28" pos:column="53">4<pos:position pos:line="28" pos:column="54"/></literal><operator pos:line="28" pos:column="54">)<pos:position pos:line="28" pos:column="55"/></operator><operator pos:line="28" pos:column="55">)<pos:position pos:line="28" pos:column="56"/></operator> <operator pos:line="28" pos:column="57">&lt;&lt;<pos:position pos:line="28" pos:column="65"/></operator> <literal type="number" pos:line="28" pos:column="60">8<pos:position pos:line="28" pos:column="61"/></literal></expr></init></decl>;<pos:position pos:line="28" pos:column="62"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="29" pos:column="9">uInt<pos:position pos:line="29" pos:column="13"/></name></type> <name pos:line="29" pos:column="14">level_flags<pos:position pos:line="29" pos:column="25"/></name> <init pos:line="29" pos:column="26">= <expr><operator pos:line="29" pos:column="28">(<pos:position pos:line="29" pos:column="29"/></operator><name><name pos:line="29" pos:column="29">s<pos:position pos:line="29" pos:column="30"/></name><operator pos:line="29" pos:column="30">-&gt;<pos:position pos:line="29" pos:column="35"/></operator><name pos:line="29" pos:column="32">level<pos:position pos:line="29" pos:column="37"/></name></name><operator pos:line="29" pos:column="37">-<pos:position pos:line="29" pos:column="38"/></operator><literal type="number" pos:line="29" pos:column="38">1<pos:position pos:line="29" pos:column="39"/></literal><operator pos:line="29" pos:column="39">)<pos:position pos:line="29" pos:column="40"/></operator> <operator pos:line="29" pos:column="41">&gt;&gt;<pos:position pos:line="29" pos:column="46"/></operator> <literal type="number" pos:line="29" pos:column="44">1<pos:position pos:line="29" pos:column="45"/></literal></expr></init></decl>;<pos:position pos:line="29" pos:column="46"/></decl_stmt>

        <if pos:line="31" pos:column="9">if <condition pos:line="31" pos:column="12">(<expr><name pos:line="31" pos:column="13">level_flags<pos:position pos:line="31" pos:column="24"/></name> <operator pos:line="31" pos:column="25">&gt;<pos:position pos:line="31" pos:column="29"/></operator> <literal type="number" pos:line="31" pos:column="27">3<pos:position pos:line="31" pos:column="28"/></literal></expr>)<pos:position pos:line="31" pos:column="29"/></condition><then pos:line="31" pos:column="29"> <block type="pseudo"><expr_stmt><expr><name pos:line="31" pos:column="30">level_flags<pos:position pos:line="31" pos:column="41"/></name> <operator pos:line="31" pos:column="42">=<pos:position pos:line="31" pos:column="43"/></operator> <literal type="number" pos:line="31" pos:column="44">3<pos:position pos:line="31" pos:column="45"/></literal></expr>;<pos:position pos:line="31" pos:column="46"/></expr_stmt></block></then></if>
        <expr_stmt><expr><name pos:line="32" pos:column="9">header<pos:position pos:line="32" pos:column="15"/></name> <operator pos:line="32" pos:column="16">|=<pos:position pos:line="32" pos:column="18"/></operator> <operator pos:line="32" pos:column="19">(<pos:position pos:line="32" pos:column="20"/></operator><name pos:line="32" pos:column="20">level_flags<pos:position pos:line="32" pos:column="31"/></name> <operator pos:line="32" pos:column="32">&lt;&lt;<pos:position pos:line="32" pos:column="40"/></operator> <literal type="number" pos:line="32" pos:column="35">6<pos:position pos:line="32" pos:column="36"/></literal><operator pos:line="32" pos:column="36">)<pos:position pos:line="32" pos:column="37"/></operator></expr>;<pos:position pos:line="32" pos:column="38"/></expr_stmt>
	<if pos:line="33" pos:column="9">if <condition pos:line="33" pos:column="12">(<expr><name><name pos:line="33" pos:column="13">s<pos:position pos:line="33" pos:column="14"/></name><operator pos:line="33" pos:column="14">-&gt;<pos:position pos:line="33" pos:column="19"/></operator><name pos:line="33" pos:column="16">strstart<pos:position pos:line="33" pos:column="24"/></name></name> <operator pos:line="33" pos:column="25">!=<pos:position pos:line="33" pos:column="27"/></operator> <literal type="number" pos:line="33" pos:column="28">0<pos:position pos:line="33" pos:column="29"/></literal></expr>)<pos:position pos:line="33" pos:column="30"/></condition><then pos:line="33" pos:column="30"> <block type="pseudo"><expr_stmt><expr><name pos:line="33" pos:column="31">header<pos:position pos:line="33" pos:column="37"/></name> <operator pos:line="33" pos:column="38">|=<pos:position pos:line="33" pos:column="40"/></operator> <name pos:line="33" pos:column="41">PRESET_DICT<pos:position pos:line="33" pos:column="52"/></name></expr>;<pos:position pos:line="33" pos:column="53"/></expr_stmt></block></then></if>
        <expr_stmt><expr><name pos:line="34" pos:column="9">header<pos:position pos:line="34" pos:column="15"/></name> <operator pos:line="34" pos:column="16">+=<pos:position pos:line="34" pos:column="18"/></operator> <literal type="number" pos:line="34" pos:column="19">31<pos:position pos:line="34" pos:column="21"/></literal> <operator pos:line="34" pos:column="22">-<pos:position pos:line="34" pos:column="23"/></operator> <operator pos:line="34" pos:column="24">(<pos:position pos:line="34" pos:column="25"/></operator><name pos:line="34" pos:column="25">header<pos:position pos:line="34" pos:column="31"/></name> <operator pos:line="34" pos:column="32">%<pos:position pos:line="34" pos:column="33"/></operator> <literal type="number" pos:line="34" pos:column="34">31<pos:position pos:line="34" pos:column="36"/></literal><operator pos:line="34" pos:column="36">)<pos:position pos:line="34" pos:column="37"/></operator></expr>;<pos:position pos:line="34" pos:column="38"/></expr_stmt>

        <expr_stmt><expr><name><name pos:line="36" pos:column="9">s<pos:position pos:line="36" pos:column="10"/></name><operator pos:line="36" pos:column="10">-&gt;<pos:position pos:line="36" pos:column="15"/></operator><name pos:line="36" pos:column="12">status<pos:position pos:line="36" pos:column="18"/></name></name> <operator pos:line="36" pos:column="19">=<pos:position pos:line="36" pos:column="20"/></operator> <name pos:line="36" pos:column="21">BUSY_STATE<pos:position pos:line="36" pos:column="31"/></name></expr>;<pos:position pos:line="36" pos:column="32"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="37" pos:column="9">putShortMSB<pos:position pos:line="37" pos:column="20"/></name><argument_list pos:line="37" pos:column="20">(<argument><expr><name pos:line="37" pos:column="21">s<pos:position pos:line="37" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="24">header<pos:position pos:line="37" pos:column="30"/></name></expr></argument>)<pos:position pos:line="37" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="32"/></expr_stmt>

	<comment type="block" pos:line="39" pos:column="9">/* Save the adler32 of the preset dictionary: */</comment>
	<if pos:line="40" pos:column="9">if <condition pos:line="40" pos:column="12">(<expr><name><name pos:line="40" pos:column="13">s<pos:position pos:line="40" pos:column="14"/></name><operator pos:line="40" pos:column="14">-&gt;<pos:position pos:line="40" pos:column="19"/></operator><name pos:line="40" pos:column="16">strstart<pos:position pos:line="40" pos:column="24"/></name></name> <operator pos:line="40" pos:column="25">!=<pos:position pos:line="40" pos:column="27"/></operator> <literal type="number" pos:line="40" pos:column="28">0<pos:position pos:line="40" pos:column="29"/></literal></expr>)<pos:position pos:line="40" pos:column="30"/></condition><then pos:line="40" pos:column="30"> <block pos:line="40" pos:column="31">{
	    <expr_stmt><expr><call><name pos:line="41" pos:column="13">putShortMSB<pos:position pos:line="41" pos:column="24"/></name><argument_list pos:line="41" pos:column="24">(<argument><expr><name pos:line="41" pos:column="25">s<pos:position pos:line="41" pos:column="26"/></name></expr></argument>, <argument><expr><call pos:line="41" pos:column="28">(<name pos:line="41" pos:column="29">uInt<pos:position pos:line="41" pos:column="33"/></name>)<argument_list pos:line="41" pos:column="34">(<argument><expr><name><name pos:line="41" pos:column="35">strm<pos:position pos:line="41" pos:column="39"/></name><operator pos:line="41" pos:column="39">-&gt;<pos:position pos:line="41" pos:column="44"/></operator><name pos:line="41" pos:column="41">adler<pos:position pos:line="41" pos:column="46"/></name></name> <operator pos:line="41" pos:column="47">&gt;&gt;<pos:position pos:line="41" pos:column="52"/></operator> <literal type="number" pos:line="41" pos:column="50">16<pos:position pos:line="41" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="53"/></argument_list></call></expr></argument>)<pos:position pos:line="41" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="55"/></expr_stmt>
	    <expr_stmt><expr><call><name pos:line="42" pos:column="13">putShortMSB<pos:position pos:line="42" pos:column="24"/></name><argument_list pos:line="42" pos:column="24">(<argument><expr><name pos:line="42" pos:column="25">s<pos:position pos:line="42" pos:column="26"/></name></expr></argument>, <argument><expr><call pos:line="42" pos:column="28">(<name pos:line="42" pos:column="29">uInt<pos:position pos:line="42" pos:column="33"/></name>)<argument_list pos:line="42" pos:column="34">(<argument><expr><name><name pos:line="42" pos:column="35">strm<pos:position pos:line="42" pos:column="39"/></name><operator pos:line="42" pos:column="39">-&gt;<pos:position pos:line="42" pos:column="44"/></operator><name pos:line="42" pos:column="41">adler<pos:position pos:line="42" pos:column="46"/></name></name> <operator pos:line="42" pos:column="47">&amp;<pos:position pos:line="42" pos:column="52"/></operator> <literal type="number" pos:line="42" pos:column="49">0xffff<pos:position pos:line="42" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="42" pos:column="56"/></argument_list></call></expr></argument>)<pos:position pos:line="42" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="58"/></expr_stmt>
	}<pos:position pos:line="43" pos:column="10"/></block></then></if>
	<expr_stmt><expr><name><name pos:line="44" pos:column="9">strm<pos:position pos:line="44" pos:column="13"/></name><operator pos:line="44" pos:column="13">-&gt;<pos:position pos:line="44" pos:column="18"/></operator><name pos:line="44" pos:column="15">adler<pos:position pos:line="44" pos:column="20"/></name></name> <operator pos:line="44" pos:column="21">=<pos:position pos:line="44" pos:column="22"/></operator> <literal type="number" pos:line="44" pos:column="23">1L<pos:position pos:line="44" pos:column="25"/></literal></expr>;<pos:position pos:line="44" pos:column="26"/></expr_stmt>
    }<pos:position pos:line="45" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="47" pos:column="5">/* Flush as much pending output as possible */</comment>
    <if pos:line="48" pos:column="5">if <condition pos:line="48" pos:column="8">(<expr><name><name pos:line="48" pos:column="9">s<pos:position pos:line="48" pos:column="10"/></name><operator pos:line="48" pos:column="10">-&gt;<pos:position pos:line="48" pos:column="15"/></operator><name pos:line="48" pos:column="12">pending<pos:position pos:line="48" pos:column="19"/></name></name> <operator pos:line="48" pos:column="20">!=<pos:position pos:line="48" pos:column="22"/></operator> <literal type="number" pos:line="48" pos:column="23">0<pos:position pos:line="48" pos:column="24"/></literal></expr>)<pos:position pos:line="48" pos:column="25"/></condition><then pos:line="48" pos:column="25"> <block pos:line="48" pos:column="26">{
        <expr_stmt><expr><call><name pos:line="49" pos:column="9">flush_pending<pos:position pos:line="49" pos:column="22"/></name><argument_list pos:line="49" pos:column="22">(<argument><expr><name pos:line="49" pos:column="23">strm<pos:position pos:line="49" pos:column="27"/></name></expr></argument>)<pos:position pos:line="49" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="29"/></expr_stmt>
        <if pos:line="50" pos:column="9">if <condition pos:line="50" pos:column="12">(<expr><name><name pos:line="50" pos:column="13">strm<pos:position pos:line="50" pos:column="17"/></name><operator pos:line="50" pos:column="17">-&gt;<pos:position pos:line="50" pos:column="22"/></operator><name pos:line="50" pos:column="19">avail_out<pos:position pos:line="50" pos:column="28"/></name></name> <operator pos:line="50" pos:column="29">==<pos:position pos:line="50" pos:column="31"/></operator> <literal type="number" pos:line="50" pos:column="32">0<pos:position pos:line="50" pos:column="33"/></literal></expr>)<pos:position pos:line="50" pos:column="34"/></condition><then pos:line="50" pos:column="34"> <block pos:line="50" pos:column="35">{
	    <comment type="block" pos:line="51" pos:column="13">/* Since avail_out is 0, deflate will be called again with
	     * more output space, but possibly with both pending and
	     * avail_in equal to zero. There won't be anything to do,
	     * but this is not an error situation so make sure we
	     * return OK instead of BUF_ERROR at next call of deflate:
             */</comment>
	    <expr_stmt><expr><name><name pos:line="57" pos:column="13">s<pos:position pos:line="57" pos:column="14"/></name><operator pos:line="57" pos:column="14">-&gt;<pos:position pos:line="57" pos:column="19"/></operator><name pos:line="57" pos:column="16">last_flush<pos:position pos:line="57" pos:column="26"/></name></name> <operator pos:line="57" pos:column="27">=<pos:position pos:line="57" pos:column="28"/></operator> <operator pos:line="57" pos:column="29">-<pos:position pos:line="57" pos:column="30"/></operator><literal type="number" pos:line="57" pos:column="30">1<pos:position pos:line="57" pos:column="31"/></literal></expr>;<pos:position pos:line="57" pos:column="32"/></expr_stmt>
	    <return pos:line="58" pos:column="13">return <expr><name pos:line="58" pos:column="20">Z_OK<pos:position pos:line="58" pos:column="24"/></name></expr>;<pos:position pos:line="58" pos:column="25"/></return>
	}<pos:position pos:line="59" pos:column="10"/></block></then></if>

    <comment type="block" pos:line="61" pos:column="5">/* Make sure there is something to do and avoid duplicate consecutive
     * flushes. For repeated and useless calls with Z_FINISH, we keep
     * returning Z_STREAM_END instead of Z_BUFF_ERROR.
     */</comment>
    }<pos:position pos:line="65" pos:column="6"/></block></then> <elseif pos:line="65" pos:column="7">else <if pos:line="65" pos:column="12">if <condition pos:line="65" pos:column="15">(<expr><name><name pos:line="65" pos:column="16">strm<pos:position pos:line="65" pos:column="20"/></name><operator pos:line="65" pos:column="20">-&gt;<pos:position pos:line="65" pos:column="25"/></operator><name pos:line="65" pos:column="22">avail_in<pos:position pos:line="65" pos:column="30"/></name></name> <operator pos:line="65" pos:column="31">==<pos:position pos:line="65" pos:column="33"/></operator> <literal type="number" pos:line="65" pos:column="34">0<pos:position pos:line="65" pos:column="35"/></literal> <operator pos:line="65" pos:column="36">&amp;&amp;<pos:position pos:line="65" pos:column="46"/></operator> <name pos:line="65" pos:column="39">flush<pos:position pos:line="65" pos:column="44"/></name> <operator pos:line="65" pos:column="45">&lt;=<pos:position pos:line="65" pos:column="50"/></operator> <name pos:line="65" pos:column="48">old_flush<pos:position pos:line="65" pos:column="57"/></name> <operator pos:line="65" pos:column="58">&amp;&amp;<pos:position pos:line="65" pos:column="68"/></operator>
	       <name pos:line="66" pos:column="16">flush<pos:position pos:line="66" pos:column="21"/></name> <operator pos:line="66" pos:column="22">!=<pos:position pos:line="66" pos:column="24"/></operator> <name pos:line="66" pos:column="25">Z_FINISH<pos:position pos:line="66" pos:column="33"/></name></expr>)<pos:position pos:line="66" pos:column="34"/></condition><then pos:line="66" pos:column="34"> <block pos:line="66" pos:column="35">{
        <expr_stmt><expr><call><name pos:line="67" pos:column="9">ERR_RETURN<pos:position pos:line="67" pos:column="19"/></name><argument_list pos:line="67" pos:column="19">(<argument><expr><name pos:line="67" pos:column="20">strm<pos:position pos:line="67" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="67" pos:column="26">Z_BUF_ERROR<pos:position pos:line="67" pos:column="37"/></name></expr></argument>)<pos:position pos:line="67" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="39"/></expr_stmt>
    }<pos:position pos:line="68" pos:column="6"/></block></then></if></elseif></if>

    <comment type="block" pos:line="70" pos:column="5">/* User must not provide more input after the first FINISH: */</comment>
    <if pos:line="71" pos:column="5">if <condition pos:line="71" pos:column="8">(<expr><name><name pos:line="71" pos:column="9">s<pos:position pos:line="71" pos:column="10"/></name><operator pos:line="71" pos:column="10">-&gt;<pos:position pos:line="71" pos:column="15"/></operator><name pos:line="71" pos:column="12">status<pos:position pos:line="71" pos:column="18"/></name></name> <operator pos:line="71" pos:column="19">==<pos:position pos:line="71" pos:column="21"/></operator> <name pos:line="71" pos:column="22">FINISH_STATE<pos:position pos:line="71" pos:column="34"/></name> <operator pos:line="71" pos:column="35">&amp;&amp;<pos:position pos:line="71" pos:column="45"/></operator> <name><name pos:line="71" pos:column="38">strm<pos:position pos:line="71" pos:column="42"/></name><operator pos:line="71" pos:column="42">-&gt;<pos:position pos:line="71" pos:column="47"/></operator><name pos:line="71" pos:column="44">avail_in<pos:position pos:line="71" pos:column="52"/></name></name> <operator pos:line="71" pos:column="53">!=<pos:position pos:line="71" pos:column="55"/></operator> <literal type="number" pos:line="71" pos:column="56">0<pos:position pos:line="71" pos:column="57"/></literal></expr>)<pos:position pos:line="71" pos:column="58"/></condition><then pos:line="71" pos:column="58"> <block pos:line="71" pos:column="59">{
        <expr_stmt><expr><call><name pos:line="72" pos:column="9">ERR_RETURN<pos:position pos:line="72" pos:column="19"/></name><argument_list pos:line="72" pos:column="19">(<argument><expr><name pos:line="72" pos:column="20">strm<pos:position pos:line="72" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="72" pos:column="26">Z_BUF_ERROR<pos:position pos:line="72" pos:column="37"/></name></expr></argument>)<pos:position pos:line="72" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="39"/></expr_stmt>
    }<pos:position pos:line="73" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="75" pos:column="5">/* Start a new block or continue the current one.
     */</comment>
    <if pos:line="77" pos:column="5">if <condition pos:line="77" pos:column="8">(<expr><name><name pos:line="77" pos:column="9">strm<pos:position pos:line="77" pos:column="13"/></name><operator pos:line="77" pos:column="13">-&gt;<pos:position pos:line="77" pos:column="18"/></operator><name pos:line="77" pos:column="15">avail_in<pos:position pos:line="77" pos:column="23"/></name></name> <operator pos:line="77" pos:column="24">!=<pos:position pos:line="77" pos:column="26"/></operator> <literal type="number" pos:line="77" pos:column="27">0<pos:position pos:line="77" pos:column="28"/></literal> <operator pos:line="77" pos:column="29">||<pos:position pos:line="77" pos:column="31"/></operator> <name><name pos:line="77" pos:column="32">s<pos:position pos:line="77" pos:column="33"/></name><operator pos:line="77" pos:column="33">-&gt;<pos:position pos:line="77" pos:column="38"/></operator><name pos:line="77" pos:column="35">lookahead<pos:position pos:line="77" pos:column="44"/></name></name> <operator pos:line="77" pos:column="45">!=<pos:position pos:line="77" pos:column="47"/></operator> <literal type="number" pos:line="77" pos:column="48">0<pos:position pos:line="77" pos:column="49"/></literal> <operator pos:line="77" pos:column="50">||<pos:position pos:line="77" pos:column="52"/></operator>
        <operator pos:line="78" pos:column="9">(<pos:position pos:line="78" pos:column="10"/></operator><name pos:line="78" pos:column="10">flush<pos:position pos:line="78" pos:column="15"/></name> <operator pos:line="78" pos:column="16">!=<pos:position pos:line="78" pos:column="18"/></operator> <name pos:line="78" pos:column="19">Z_NO_FLUSH<pos:position pos:line="78" pos:column="29"/></name> <operator pos:line="78" pos:column="30">&amp;&amp;<pos:position pos:line="78" pos:column="40"/></operator> <name><name pos:line="78" pos:column="33">s<pos:position pos:line="78" pos:column="34"/></name><operator pos:line="78" pos:column="34">-&gt;<pos:position pos:line="78" pos:column="39"/></operator><name pos:line="78" pos:column="36">status<pos:position pos:line="78" pos:column="42"/></name></name> <operator pos:line="78" pos:column="43">!=<pos:position pos:line="78" pos:column="45"/></operator> <name pos:line="78" pos:column="46">FINISH_STATE<pos:position pos:line="78" pos:column="58"/></name><operator pos:line="78" pos:column="58">)<pos:position pos:line="78" pos:column="59"/></operator></expr>)<pos:position pos:line="78" pos:column="60"/></condition><then pos:line="78" pos:column="60"> <block pos:line="78" pos:column="61">{
        <decl_stmt><decl><type><name pos:line="79" pos:column="9">block_state<pos:position pos:line="79" pos:column="20"/></name></type> <name pos:line="79" pos:column="21">bstate<pos:position pos:line="79" pos:column="27"/></name></decl>;<pos:position pos:line="79" pos:column="28"/></decl_stmt>

	<expr_stmt><expr><name pos:line="81" pos:column="9">bstate<pos:position pos:line="81" pos:column="15"/></name> <operator pos:line="81" pos:column="16">=<pos:position pos:line="81" pos:column="17"/></operator> <operator pos:line="81" pos:column="18">(<pos:position pos:line="81" pos:column="19"/></operator><operator pos:line="81" pos:column="19">*<pos:position pos:line="81" pos:column="20"/></operator><operator pos:line="81" pos:column="20">(<pos:position pos:line="81" pos:column="21"/></operator><name><name pos:line="81" pos:column="21">configuration_table<pos:position pos:line="81" pos:column="40"/></name><index pos:line="81" pos:column="40">[<expr><name><name pos:line="81" pos:column="41">s<pos:position pos:line="81" pos:column="42"/></name><operator pos:line="81" pos:column="42">-&gt;<pos:position pos:line="81" pos:column="47"/></operator><name pos:line="81" pos:column="44">level<pos:position pos:line="81" pos:column="49"/></name></name></expr>]<pos:position pos:line="81" pos:column="50"/></index></name><operator pos:line="81" pos:column="50">.<pos:position pos:line="81" pos:column="51"/></operator><name pos:line="81" pos:column="51">func<pos:position pos:line="81" pos:column="55"/></name><operator pos:line="81" pos:column="55">)<pos:position pos:line="81" pos:column="56"/></operator><operator pos:line="81" pos:column="56">)<pos:position pos:line="81" pos:column="57"/></operator><operator pos:line="81" pos:column="57">(<pos:position pos:line="81" pos:column="58"/></operator><name pos:line="81" pos:column="58">s<pos:position pos:line="81" pos:column="59"/></name><operator pos:line="81" pos:column="59">,<pos:position pos:line="81" pos:column="60"/></operator> <name pos:line="81" pos:column="61">flush<pos:position pos:line="81" pos:column="66"/></name><operator pos:line="81" pos:column="66">)<pos:position pos:line="81" pos:column="67"/></operator></expr>;<pos:position pos:line="81" pos:column="68"/></expr_stmt>

        <if pos:line="83" pos:column="9">if <condition pos:line="83" pos:column="12">(<expr><name pos:line="83" pos:column="13">bstate<pos:position pos:line="83" pos:column="19"/></name> <operator pos:line="83" pos:column="20">==<pos:position pos:line="83" pos:column="22"/></operator> <name pos:line="83" pos:column="23">finish_started<pos:position pos:line="83" pos:column="37"/></name> <operator pos:line="83" pos:column="38">||<pos:position pos:line="83" pos:column="40"/></operator> <name pos:line="83" pos:column="41">bstate<pos:position pos:line="83" pos:column="47"/></name> <operator pos:line="83" pos:column="48">==<pos:position pos:line="83" pos:column="50"/></operator> <name pos:line="83" pos:column="51">finish_done<pos:position pos:line="83" pos:column="62"/></name></expr>)<pos:position pos:line="83" pos:column="63"/></condition><then pos:line="83" pos:column="63"> <block pos:line="83" pos:column="64">{
            <expr_stmt><expr><name><name pos:line="84" pos:column="13">s<pos:position pos:line="84" pos:column="14"/></name><operator pos:line="84" pos:column="14">-&gt;<pos:position pos:line="84" pos:column="19"/></operator><name pos:line="84" pos:column="16">status<pos:position pos:line="84" pos:column="22"/></name></name> <operator pos:line="84" pos:column="23">=<pos:position pos:line="84" pos:column="24"/></operator> <name pos:line="84" pos:column="25">FINISH_STATE<pos:position pos:line="84" pos:column="37"/></name></expr>;<pos:position pos:line="84" pos:column="38"/></expr_stmt>
        }<pos:position pos:line="85" pos:column="10"/></block></then></if>
        <if pos:line="86" pos:column="9">if <condition pos:line="86" pos:column="12">(<expr><name pos:line="86" pos:column="13">bstate<pos:position pos:line="86" pos:column="19"/></name> <operator pos:line="86" pos:column="20">==<pos:position pos:line="86" pos:column="22"/></operator> <name pos:line="86" pos:column="23">need_more<pos:position pos:line="86" pos:column="32"/></name> <operator pos:line="86" pos:column="33">||<pos:position pos:line="86" pos:column="35"/></operator> <name pos:line="86" pos:column="36">bstate<pos:position pos:line="86" pos:column="42"/></name> <operator pos:line="86" pos:column="43">==<pos:position pos:line="86" pos:column="45"/></operator> <name pos:line="86" pos:column="46">finish_started<pos:position pos:line="86" pos:column="60"/></name></expr>)<pos:position pos:line="86" pos:column="61"/></condition><then pos:line="86" pos:column="61"> <block pos:line="86" pos:column="62">{
	    <if pos:line="87" pos:column="13">if <condition pos:line="87" pos:column="16">(<expr><name><name pos:line="87" pos:column="17">strm<pos:position pos:line="87" pos:column="21"/></name><operator pos:line="87" pos:column="21">-&gt;<pos:position pos:line="87" pos:column="26"/></operator><name pos:line="87" pos:column="23">avail_out<pos:position pos:line="87" pos:column="32"/></name></name> <operator pos:line="87" pos:column="33">==<pos:position pos:line="87" pos:column="35"/></operator> <literal type="number" pos:line="87" pos:column="36">0<pos:position pos:line="87" pos:column="37"/></literal></expr>)<pos:position pos:line="87" pos:column="38"/></condition><then pos:line="87" pos:column="38"> <block pos:line="87" pos:column="39">{
	        <expr_stmt><expr><name><name pos:line="88" pos:column="17">s<pos:position pos:line="88" pos:column="18"/></name><operator pos:line="88" pos:column="18">-&gt;<pos:position pos:line="88" pos:column="23"/></operator><name pos:line="88" pos:column="20">last_flush<pos:position pos:line="88" pos:column="30"/></name></name> <operator pos:line="88" pos:column="31">=<pos:position pos:line="88" pos:column="32"/></operator> <operator pos:line="88" pos:column="33">-<pos:position pos:line="88" pos:column="34"/></operator><literal type="number" pos:line="88" pos:column="34">1<pos:position pos:line="88" pos:column="35"/></literal></expr>;<pos:position pos:line="88" pos:column="36"/></expr_stmt> <comment type="block" pos:line="88" pos:column="37">/* avoid BUF_ERROR next call, see above */</comment>
	    }<pos:position pos:line="89" pos:column="14"/></block></then></if>
	    <return pos:line="90" pos:column="13">return <expr><name pos:line="90" pos:column="20">Z_OK<pos:position pos:line="90" pos:column="24"/></name></expr>;<pos:position pos:line="90" pos:column="25"/></return>
	    <comment type="block" pos:line="91" pos:column="13">/* If flush != Z_NO_FLUSH &amp;&amp; avail_out == 0, the next call
	     * of deflate should use the same flush parameter to make sure
	     * that the flush is complete. So we don't have to output an
	     * empty block here, this will be done at next call. This also
	     * ensures that for a very small output buffer, we emit at most
	     * one empty block.
	     */</comment>
	}<pos:position pos:line="98" pos:column="10"/></block></then></if>
        <if pos:line="99" pos:column="9">if <condition pos:line="99" pos:column="12">(<expr><name pos:line="99" pos:column="13">bstate<pos:position pos:line="99" pos:column="19"/></name> <operator pos:line="99" pos:column="20">==<pos:position pos:line="99" pos:column="22"/></operator> <name pos:line="99" pos:column="23">block_done<pos:position pos:line="99" pos:column="33"/></name></expr>)<pos:position pos:line="99" pos:column="34"/></condition><then pos:line="99" pos:column="34"> <block pos:line="99" pos:column="35">{
            <if pos:line="100" pos:column="13">if <condition pos:line="100" pos:column="16">(<expr><name pos:line="100" pos:column="17">flush<pos:position pos:line="100" pos:column="22"/></name> <operator pos:line="100" pos:column="23">==<pos:position pos:line="100" pos:column="25"/></operator> <name pos:line="100" pos:column="26">Z_PARTIAL_FLUSH<pos:position pos:line="100" pos:column="41"/></name></expr>)<pos:position pos:line="100" pos:column="42"/></condition><then pos:line="100" pos:column="42"> <block pos:line="100" pos:column="43">{
                <expr_stmt><expr><call><name pos:line="101" pos:column="17">_tr_align<pos:position pos:line="101" pos:column="26"/></name><argument_list pos:line="101" pos:column="26">(<argument><expr><name pos:line="101" pos:column="27">s<pos:position pos:line="101" pos:column="28"/></name></expr></argument>)<pos:position pos:line="101" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="30"/></expr_stmt>
            }<pos:position pos:line="102" pos:column="14"/></block></then> <else pos:line="102" pos:column="15">else <block pos:line="102" pos:column="20">{ <comment type="block" pos:line="102" pos:column="22">/* FULL_FLUSH or SYNC_FLUSH */</comment>
                <expr_stmt><expr><call><name pos:line="103" pos:column="17">_tr_stored_block<pos:position pos:line="103" pos:column="33"/></name><argument_list pos:line="103" pos:column="33">(<argument><expr><name pos:line="103" pos:column="34">s<pos:position pos:line="103" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="103" pos:column="37">(<pos:position pos:line="103" pos:column="38"/></operator><name pos:line="103" pos:column="38">char<pos:position pos:line="103" pos:column="42"/></name><operator pos:line="103" pos:column="42">*<pos:position pos:line="103" pos:column="43"/></operator><operator pos:line="103" pos:column="43">)<pos:position pos:line="103" pos:column="44"/></operator><literal type="number" pos:line="103" pos:column="44">0<pos:position pos:line="103" pos:column="45"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="103" pos:column="47">0L<pos:position pos:line="103" pos:column="49"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="103" pos:column="51">0<pos:position pos:line="103" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="103" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="103" pos:column="54"/></expr_stmt>
                <comment type="block" pos:line="104" pos:column="17">/* For a full flush, this empty block will be recognized
                 * as a special marker by inflate_sync().
                 */</comment>
                <if pos:line="107" pos:column="17">if <condition pos:line="107" pos:column="20">(<expr><name pos:line="107" pos:column="21">flush<pos:position pos:line="107" pos:column="26"/></name> <operator pos:line="107" pos:column="27">==<pos:position pos:line="107" pos:column="29"/></operator> <name pos:line="107" pos:column="30">Z_FULL_FLUSH<pos:position pos:line="107" pos:column="42"/></name></expr>)<pos:position pos:line="107" pos:column="43"/></condition><then pos:line="107" pos:column="43"> <block pos:line="107" pos:column="44">{
                    <expr_stmt><expr><call><name pos:line="108" pos:column="21">CLEAR_HASH<pos:position pos:line="108" pos:column="31"/></name><argument_list pos:line="108" pos:column="31">(<argument><expr><name pos:line="108" pos:column="32">s<pos:position pos:line="108" pos:column="33"/></name></expr></argument>)<pos:position pos:line="108" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="108" pos:column="35"/></expr_stmt>             <comment type="block" pos:line="108" pos:column="48">/* forget history */</comment>
                }<pos:position pos:line="109" pos:column="18"/></block></then></if>
            }<pos:position pos:line="110" pos:column="14"/></block></else></if>
            <expr_stmt><expr><call><name pos:line="111" pos:column="13">flush_pending<pos:position pos:line="111" pos:column="26"/></name><argument_list pos:line="111" pos:column="26">(<argument><expr><name pos:line="111" pos:column="27">strm<pos:position pos:line="111" pos:column="31"/></name></expr></argument>)<pos:position pos:line="111" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="111" pos:column="33"/></expr_stmt>
	    <if pos:line="112" pos:column="13">if <condition pos:line="112" pos:column="16">(<expr><name><name pos:line="112" pos:column="17">strm<pos:position pos:line="112" pos:column="21"/></name><operator pos:line="112" pos:column="21">-&gt;<pos:position pos:line="112" pos:column="26"/></operator><name pos:line="112" pos:column="23">avail_out<pos:position pos:line="112" pos:column="32"/></name></name> <operator pos:line="112" pos:column="33">==<pos:position pos:line="112" pos:column="35"/></operator> <literal type="number" pos:line="112" pos:column="36">0<pos:position pos:line="112" pos:column="37"/></literal></expr>)<pos:position pos:line="112" pos:column="38"/></condition><then pos:line="112" pos:column="38"> <block pos:line="112" pos:column="39">{
	      <expr_stmt><expr><name><name pos:line="113" pos:column="15">s<pos:position pos:line="113" pos:column="16"/></name><operator pos:line="113" pos:column="16">-&gt;<pos:position pos:line="113" pos:column="21"/></operator><name pos:line="113" pos:column="18">last_flush<pos:position pos:line="113" pos:column="28"/></name></name> <operator pos:line="113" pos:column="29">=<pos:position pos:line="113" pos:column="30"/></operator> <operator pos:line="113" pos:column="31">-<pos:position pos:line="113" pos:column="32"/></operator><literal type="number" pos:line="113" pos:column="32">1<pos:position pos:line="113" pos:column="33"/></literal></expr>;<pos:position pos:line="113" pos:column="34"/></expr_stmt> <comment type="block" pos:line="113" pos:column="35">/* avoid BUF_ERROR at next call, see above */</comment>
	      <return pos:line="114" pos:column="15">return <expr><name pos:line="114" pos:column="22">Z_OK<pos:position pos:line="114" pos:column="26"/></name></expr>;<pos:position pos:line="114" pos:column="27"/></return>
	    }<pos:position pos:line="115" pos:column="14"/></block></then></if>
        }<pos:position pos:line="116" pos:column="10"/></block></then></if>
    }<pos:position pos:line="117" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="118" pos:column="5">Assert<pos:position pos:line="118" pos:column="11"/></name><argument_list pos:line="118" pos:column="11">(<argument><expr><name><name pos:line="118" pos:column="12">strm<pos:position pos:line="118" pos:column="16"/></name><operator pos:line="118" pos:column="16">-&gt;<pos:position pos:line="118" pos:column="21"/></operator><name pos:line="118" pos:column="18">avail_out<pos:position pos:line="118" pos:column="27"/></name></name> <operator pos:line="118" pos:column="28">&gt;<pos:position pos:line="118" pos:column="32"/></operator> <literal type="number" pos:line="118" pos:column="30">0<pos:position pos:line="118" pos:column="31"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="118" pos:column="33">"bug2"<pos:position pos:line="118" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="118" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="118" pos:column="41"/></expr_stmt>

    <if pos:line="120" pos:column="5">if <condition pos:line="120" pos:column="8">(<expr><name pos:line="120" pos:column="9">flush<pos:position pos:line="120" pos:column="14"/></name> <operator pos:line="120" pos:column="15">!=<pos:position pos:line="120" pos:column="17"/></operator> <name pos:line="120" pos:column="18">Z_FINISH<pos:position pos:line="120" pos:column="26"/></name></expr>)<pos:position pos:line="120" pos:column="27"/></condition><then pos:line="120" pos:column="27"> <block type="pseudo"><return pos:line="120" pos:column="28">return <expr><name pos:line="120" pos:column="35">Z_OK<pos:position pos:line="120" pos:column="39"/></name></expr>;<pos:position pos:line="120" pos:column="40"/></return></block></then></if>
    <if pos:line="121" pos:column="5">if <condition pos:line="121" pos:column="8">(<expr><name><name pos:line="121" pos:column="9">s<pos:position pos:line="121" pos:column="10"/></name><operator pos:line="121" pos:column="10">-&gt;<pos:position pos:line="121" pos:column="15"/></operator><name pos:line="121" pos:column="12">noheader<pos:position pos:line="121" pos:column="20"/></name></name></expr>)<pos:position pos:line="121" pos:column="21"/></condition><then pos:line="121" pos:column="21"> <block type="pseudo"><return pos:line="121" pos:column="22">return <expr><name pos:line="121" pos:column="29">Z_STREAM_END<pos:position pos:line="121" pos:column="41"/></name></expr>;<pos:position pos:line="121" pos:column="42"/></return></block></then></if>

    <comment type="block" pos:line="123" pos:column="5">/* Write the zlib trailer (adler32) */</comment>
    <expr_stmt><expr><call><name pos:line="124" pos:column="5">putShortMSB<pos:position pos:line="124" pos:column="16"/></name><argument_list pos:line="124" pos:column="16">(<argument><expr><name pos:line="124" pos:column="17">s<pos:position pos:line="124" pos:column="18"/></name></expr></argument>, <argument><expr><call pos:line="124" pos:column="20">(<name pos:line="124" pos:column="21">uInt<pos:position pos:line="124" pos:column="25"/></name>)<argument_list pos:line="124" pos:column="26">(<argument><expr><name><name pos:line="124" pos:column="27">strm<pos:position pos:line="124" pos:column="31"/></name><operator pos:line="124" pos:column="31">-&gt;<pos:position pos:line="124" pos:column="36"/></operator><name pos:line="124" pos:column="33">adler<pos:position pos:line="124" pos:column="38"/></name></name> <operator pos:line="124" pos:column="39">&gt;&gt;<pos:position pos:line="124" pos:column="44"/></operator> <literal type="number" pos:line="124" pos:column="42">16<pos:position pos:line="124" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="124" pos:column="45"/></argument_list></call></expr></argument>)<pos:position pos:line="124" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="124" pos:column="47"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="125" pos:column="5">putShortMSB<pos:position pos:line="125" pos:column="16"/></name><argument_list pos:line="125" pos:column="16">(<argument><expr><name pos:line="125" pos:column="17">s<pos:position pos:line="125" pos:column="18"/></name></expr></argument>, <argument><expr><call pos:line="125" pos:column="20">(<name pos:line="125" pos:column="21">uInt<pos:position pos:line="125" pos:column="25"/></name>)<argument_list pos:line="125" pos:column="26">(<argument><expr><name><name pos:line="125" pos:column="27">strm<pos:position pos:line="125" pos:column="31"/></name><operator pos:line="125" pos:column="31">-&gt;<pos:position pos:line="125" pos:column="36"/></operator><name pos:line="125" pos:column="33">adler<pos:position pos:line="125" pos:column="38"/></name></name> <operator pos:line="125" pos:column="39">&amp;<pos:position pos:line="125" pos:column="44"/></operator> <literal type="number" pos:line="125" pos:column="41">0xffff<pos:position pos:line="125" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="125" pos:column="48"/></argument_list></call></expr></argument>)<pos:position pos:line="125" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="125" pos:column="50"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="126" pos:column="5">flush_pending<pos:position pos:line="126" pos:column="18"/></name><argument_list pos:line="126" pos:column="18">(<argument><expr><name pos:line="126" pos:column="19">strm<pos:position pos:line="126" pos:column="23"/></name></expr></argument>)<pos:position pos:line="126" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="126" pos:column="25"/></expr_stmt>
    <comment type="block" pos:line="127" pos:column="5">/* If avail_out is zero, the application will call deflate again
     * to flush the rest.
     */</comment>
    <expr_stmt><expr><name><name pos:line="130" pos:column="5">s<pos:position pos:line="130" pos:column="6"/></name><operator pos:line="130" pos:column="6">-&gt;<pos:position pos:line="130" pos:column="11"/></operator><name pos:line="130" pos:column="8">noheader<pos:position pos:line="130" pos:column="16"/></name></name> <operator pos:line="130" pos:column="17">=<pos:position pos:line="130" pos:column="18"/></operator> <operator pos:line="130" pos:column="19">-<pos:position pos:line="130" pos:column="20"/></operator><literal type="number" pos:line="130" pos:column="20">1<pos:position pos:line="130" pos:column="21"/></literal></expr>;<pos:position pos:line="130" pos:column="22"/></expr_stmt> <comment type="block" pos:line="130" pos:column="23">/* write the trailer only once! */</comment>
    <return pos:line="131" pos:column="5">return <expr><ternary><condition><expr><name><name pos:line="131" pos:column="12">s<pos:position pos:line="131" pos:column="13"/></name><operator pos:line="131" pos:column="13">-&gt;<pos:position pos:line="131" pos:column="18"/></operator><name pos:line="131" pos:column="15">pending<pos:position pos:line="131" pos:column="22"/></name></name> <operator pos:line="131" pos:column="23">!=<pos:position pos:line="131" pos:column="25"/></operator> <literal type="number" pos:line="131" pos:column="26">0<pos:position pos:line="131" pos:column="27"/></literal></expr> ?<pos:position pos:line="131" pos:column="29"/></condition><then pos:line="131" pos:column="29"> <expr><name pos:line="131" pos:column="30">Z_OK<pos:position pos:line="131" pos:column="34"/></name></expr> <pos:position pos:line="131" pos:column="35"/></then><else pos:line="131" pos:column="35">: <expr><name pos:line="131" pos:column="37">Z_STREAM_END<pos:position pos:line="131" pos:column="49"/></name></expr></else></ternary></expr>;<pos:position pos:line="131" pos:column="50"/></return>
}<pos:position pos:line="132" pos:column="2"/></block></function_decl></unit>
