<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_63_rsync-2.6.6.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name><name pos:line="1" pos:column="8">struct<pos:position pos:line="1" pos:column="14"/></name> <name pos:line="1" pos:column="15">idlist<pos:position pos:line="1" pos:column="21"/></name></name> <modifier pos:line="1" pos:column="22">*<pos:position pos:line="1" pos:column="23"/></modifier></type><name pos:line="1" pos:column="23">recv_add_uid<pos:position pos:line="1" pos:column="35"/></name><parameter_list pos:line="1" pos:column="35">(<parameter><decl><type><name pos:line="1" pos:column="36">int<pos:position pos:line="1" pos:column="39"/></name></type> <name pos:line="1" pos:column="40">id<pos:position pos:line="1" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="44">char<pos:position pos:line="1" pos:column="48"/></name> <modifier pos:line="1" pos:column="49">*<pos:position pos:line="1" pos:column="50"/></modifier></type><name pos:line="1" pos:column="50">name<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="55"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">id2<pos:position pos:line="3" pos:column="16"/></name> <init pos:line="3" pos:column="17">= <expr><ternary><condition><expr><name pos:line="3" pos:column="19">name<pos:position pos:line="3" pos:column="23"/></name></expr> ?<pos:position pos:line="3" pos:column="25"/></condition><then pos:line="3" pos:column="25"> <expr><call><name pos:line="3" pos:column="26">map_uid<pos:position pos:line="3" pos:column="33"/></name><argument_list pos:line="3" pos:column="33">(<argument><expr><name pos:line="3" pos:column="34">id<pos:position pos:line="3" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="3" pos:column="38">name<pos:position pos:line="3" pos:column="42"/></name></expr></argument>)<pos:position pos:line="3" pos:column="43"/></argument_list></call></expr> <pos:position pos:line="3" pos:column="44"/></then><else pos:line="3" pos:column="44">: <expr><name pos:line="3" pos:column="46">id<pos:position pos:line="3" pos:column="48"/></name></expr></else></ternary></expr></init></decl>;<pos:position pos:line="3" pos:column="49"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">idlist<pos:position pos:line="4" pos:column="22"/></name></name> <modifier pos:line="4" pos:column="23">*<pos:position pos:line="4" pos:column="24"/></modifier></type><name pos:line="4" pos:column="24">node<pos:position pos:line="4" pos:column="28"/></name></decl>;<pos:position pos:line="4" pos:column="29"/></decl_stmt>

	<expr_stmt><expr><name pos:line="6" pos:column="9">node<pos:position pos:line="6" pos:column="13"/></name> <operator pos:line="6" pos:column="14">=<pos:position pos:line="6" pos:column="15"/></operator> <call><name pos:line="6" pos:column="16">add_to_list<pos:position pos:line="6" pos:column="27"/></name><argument_list pos:line="6" pos:column="27">(<argument><expr><operator pos:line="6" pos:column="28">&amp;<pos:position pos:line="6" pos:column="33"/></operator><name pos:line="6" pos:column="29">uidlist<pos:position pos:line="6" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="38">id<pos:position pos:line="6" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="42">name<pos:position pos:line="6" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="48">id2<pos:position pos:line="6" pos:column="51"/></name></expr></argument>)<pos:position pos:line="6" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="53"/></expr_stmt>

	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><name pos:line="8" pos:column="13">verbose<pos:position pos:line="8" pos:column="20"/></name> <operator pos:line="8" pos:column="21">&gt;<pos:position pos:line="8" pos:column="25"/></operator> <literal type="number" pos:line="8" pos:column="23">3<pos:position pos:line="8" pos:column="24"/></literal></expr>)<pos:position pos:line="8" pos:column="25"/></condition><then pos:line="8" pos:column="25"> <block pos:line="8" pos:column="26">{
		<expr_stmt><expr><call><name pos:line="9" pos:column="17">rprintf<pos:position pos:line="9" pos:column="24"/></name><argument_list pos:line="9" pos:column="24">(<argument><expr><name pos:line="9" pos:column="25">FINFO<pos:position pos:line="9" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="9" pos:column="32">"uid %d(%s) maps to %d\n"<pos:position pos:line="9" pos:column="57"/></literal></expr></argument>,
		    <argument><expr><name pos:line="10" pos:column="21">id<pos:position pos:line="10" pos:column="23"/></name></expr></argument>, <argument><expr><ternary><condition><expr><name pos:line="10" pos:column="25">name<pos:position pos:line="10" pos:column="29"/></name></expr> ?<pos:position pos:line="10" pos:column="31"/></condition><then pos:line="10" pos:column="31"> <expr><name pos:line="10" pos:column="32">name<pos:position pos:line="10" pos:column="36"/></name></expr> <pos:position pos:line="10" pos:column="37"/></then><else pos:line="10" pos:column="37">: <expr><literal type="string" pos:line="10" pos:column="39">""<pos:position pos:line="10" pos:column="41"/></literal></expr></else></ternary></expr></argument>, <argument><expr><name pos:line="10" pos:column="43">id2<pos:position pos:line="10" pos:column="46"/></name></expr></argument>)<pos:position pos:line="10" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="48"/></expr_stmt>
	}<pos:position pos:line="11" pos:column="10"/></block></then></if>

	<return pos:line="13" pos:column="9">return <expr><name pos:line="13" pos:column="16">node<pos:position pos:line="13" pos:column="20"/></name></expr>;<pos:position pos:line="13" pos:column="21"/></return>
}<pos:position pos:line="14" pos:column="2"/></block></function></unit>
