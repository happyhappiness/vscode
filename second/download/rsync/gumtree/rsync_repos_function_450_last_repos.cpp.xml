<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_450_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">pid_t<pos:position pos:line="1" pos:column="6"/></name></type> <name pos:line="1" pos:column="7">local_child<pos:position pos:line="1" pos:column="18"/></name><parameter_list pos:line="1" pos:column="18">(<parameter><decl><type><name pos:line="1" pos:column="19">int<pos:position pos:line="1" pos:column="22"/></name></type> <name pos:line="1" pos:column="23">argc<pos:position pos:line="1" pos:column="27"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="29">char<pos:position pos:line="1" pos:column="33"/></name> <modifier pos:line="1" pos:column="34">*<pos:position pos:line="1" pos:column="35"/></modifier><modifier pos:line="1" pos:column="35">*<pos:position pos:line="1" pos:column="36"/></modifier></type><name pos:line="1" pos:column="36">argv<pos:position pos:line="1" pos:column="40"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="42">int<pos:position pos:line="1" pos:column="45"/></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">f_in<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="53">int<pos:position pos:line="1" pos:column="56"/></name> <modifier pos:line="1" pos:column="57">*<pos:position pos:line="1" pos:column="58"/></modifier></type><name pos:line="1" pos:column="58">f_out<pos:position pos:line="1" pos:column="63"/></name></decl></parameter>,
		  <parameter><function_decl><type><name pos:line="2" pos:column="19">int<pos:position pos:line="2" pos:column="22"/></name></type> (<modifier pos:line="2" pos:column="24">*<pos:position pos:line="2" pos:column="25"/></modifier><name pos:line="2" pos:column="25">child_main<pos:position pos:line="2" pos:column="35"/></name>)<parameter_list pos:line="2" pos:column="36">(<parameter><decl><type><name pos:line="2" pos:column="37">int<pos:position pos:line="2" pos:column="40"/></name></type></decl></parameter>, <parameter><decl><type><name><name pos:line="2" pos:column="42">char<pos:position pos:line="2" pos:column="46"/></name><modifier pos:line="2" pos:column="46">*<pos:position pos:line="2" pos:column="47"/></modifier><index pos:line="2" pos:column="47">[]<pos:position pos:line="2" pos:column="49"/></index></name></type></decl></parameter>)<pos:position pos:line="2" pos:column="50"/></parameter_list></function_decl></parameter>)<pos:position pos:line="2" pos:column="51"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">pid_t<pos:position pos:line="4" pos:column="14"/></name></type> <name pos:line="4" pos:column="15">pid<pos:position pos:line="4" pos:column="18"/></name></decl>;<pos:position pos:line="4" pos:column="19"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name><name pos:line="5" pos:column="13">to_child_pipe<pos:position pos:line="5" pos:column="26"/></name><index pos:line="5" pos:column="26">[<expr><literal type="number" pos:line="5" pos:column="27">2<pos:position pos:line="5" pos:column="28"/></literal></expr>]<pos:position pos:line="5" pos:column="29"/></index></name></decl>;<pos:position pos:line="5" pos:column="30"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type> <name><name pos:line="6" pos:column="13">from_child_pipe<pos:position pos:line="6" pos:column="28"/></name><index pos:line="6" pos:column="28">[<expr><literal type="number" pos:line="6" pos:column="29">2<pos:position pos:line="6" pos:column="30"/></literal></expr>]<pos:position pos:line="6" pos:column="31"/></index></name></decl>;<pos:position pos:line="6" pos:column="32"/></decl_stmt>

	<comment type="block" pos:line="8" pos:column="9">/* The parent process is always the sender for a local rsync. */</comment>
	<expr_stmt><expr><call><name pos:line="9" pos:column="9">assert<pos:position pos:line="9" pos:column="15"/></name><argument_list pos:line="9" pos:column="15">(<argument><expr><name pos:line="9" pos:column="16">am_sender<pos:position pos:line="9" pos:column="25"/></name></expr></argument>)<pos:position pos:line="9" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="27"/></expr_stmt>

	<if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><call><name pos:line="11" pos:column="13">fd_pair<pos:position pos:line="11" pos:column="20"/></name><argument_list pos:line="11" pos:column="20">(<argument><expr><name pos:line="11" pos:column="21">to_child_pipe<pos:position pos:line="11" pos:column="34"/></name></expr></argument>)<pos:position pos:line="11" pos:column="35"/></argument_list></call> <operator pos:line="11" pos:column="36">&lt;<pos:position pos:line="11" pos:column="40"/></operator> <literal type="number" pos:line="11" pos:column="38">0<pos:position pos:line="11" pos:column="39"/></literal> <operator pos:line="11" pos:column="40">||<pos:position pos:line="11" pos:column="42"/></operator>
	    <call><name pos:line="12" pos:column="13">fd_pair<pos:position pos:line="12" pos:column="20"/></name><argument_list pos:line="12" pos:column="20">(<argument><expr><name pos:line="12" pos:column="21">from_child_pipe<pos:position pos:line="12" pos:column="36"/></name></expr></argument>)<pos:position pos:line="12" pos:column="37"/></argument_list></call> <operator pos:line="12" pos:column="38">&lt;<pos:position pos:line="12" pos:column="42"/></operator> <literal type="number" pos:line="12" pos:column="40">0<pos:position pos:line="12" pos:column="41"/></literal></expr>)<pos:position pos:line="12" pos:column="42"/></condition><then pos:line="12" pos:column="42"> <block pos:line="12" pos:column="43">{
		<expr_stmt><expr><call><name pos:line="13" pos:column="17">rsyserr<pos:position pos:line="13" pos:column="24"/></name><argument_list pos:line="13" pos:column="24">(<argument><expr><name pos:line="13" pos:column="25">FERROR<pos:position pos:line="13" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="33">errno<pos:position pos:line="13" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="40">"pipe"<pos:position pos:line="13" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="48"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="14" pos:column="17">exit_cleanup<pos:position pos:line="14" pos:column="29"/></name><argument_list pos:line="14" pos:column="29">(<argument><expr><name pos:line="14" pos:column="30">RERR_IPC<pos:position pos:line="14" pos:column="38"/></name></expr></argument>)<pos:position pos:line="14" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="40"/></expr_stmt>
	}<pos:position pos:line="15" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="17" pos:column="9">pid<pos:position pos:line="17" pos:column="12"/></name> <operator pos:line="17" pos:column="13">=<pos:position pos:line="17" pos:column="14"/></operator> <call><name pos:line="17" pos:column="15">do_fork<pos:position pos:line="17" pos:column="22"/></name><argument_list pos:line="17" pos:column="22">()<pos:position pos:line="17" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="25"/></expr_stmt>
	<if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><name pos:line="18" pos:column="13">pid<pos:position pos:line="18" pos:column="16"/></name> <operator pos:line="18" pos:column="17">==<pos:position pos:line="18" pos:column="19"/></operator> <operator pos:line="18" pos:column="20">-<pos:position pos:line="18" pos:column="21"/></operator><literal type="number" pos:line="18" pos:column="21">1<pos:position pos:line="18" pos:column="22"/></literal></expr>)<pos:position pos:line="18" pos:column="23"/></condition><then pos:line="18" pos:column="23"> <block pos:line="18" pos:column="24">{
		<expr_stmt><expr><call><name pos:line="19" pos:column="17">rsyserr<pos:position pos:line="19" pos:column="24"/></name><argument_list pos:line="19" pos:column="24">(<argument><expr><name pos:line="19" pos:column="25">FERROR<pos:position pos:line="19" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="33">errno<pos:position pos:line="19" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="40">"fork"<pos:position pos:line="19" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="48"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="20" pos:column="17">exit_cleanup<pos:position pos:line="20" pos:column="29"/></name><argument_list pos:line="20" pos:column="29">(<argument><expr><name pos:line="20" pos:column="30">RERR_IPC<pos:position pos:line="20" pos:column="38"/></name></expr></argument>)<pos:position pos:line="20" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="40"/></expr_stmt>
	}<pos:position pos:line="21" pos:column="10"/></block></then></if>

	<if pos:line="23" pos:column="9">if <condition pos:line="23" pos:column="12">(<expr><name pos:line="23" pos:column="13">pid<pos:position pos:line="23" pos:column="16"/></name> <operator pos:line="23" pos:column="17">==<pos:position pos:line="23" pos:column="19"/></operator> <literal type="number" pos:line="23" pos:column="20">0<pos:position pos:line="23" pos:column="21"/></literal></expr>)<pos:position pos:line="23" pos:column="22"/></condition><then pos:line="23" pos:column="22"> <block pos:line="23" pos:column="23">{
		<expr_stmt><expr><name pos:line="24" pos:column="17">am_sender<pos:position pos:line="24" pos:column="26"/></name> <operator pos:line="24" pos:column="27">=<pos:position pos:line="24" pos:column="28"/></operator> <literal type="number" pos:line="24" pos:column="29">0<pos:position pos:line="24" pos:column="30"/></literal></expr>;<pos:position pos:line="24" pos:column="31"/></expr_stmt>
		<expr_stmt><expr><name pos:line="25" pos:column="17">am_server<pos:position pos:line="25" pos:column="26"/></name> <operator pos:line="25" pos:column="27">=<pos:position pos:line="25" pos:column="28"/></operator> <literal type="number" pos:line="25" pos:column="29">1<pos:position pos:line="25" pos:column="30"/></literal></expr>;<pos:position pos:line="25" pos:column="31"/></expr_stmt>
		<expr_stmt><expr><name pos:line="26" pos:column="17">filesfrom_fd<pos:position pos:line="26" pos:column="29"/></name> <operator pos:line="26" pos:column="30">=<pos:position pos:line="26" pos:column="31"/></operator> <operator pos:line="26" pos:column="32">-<pos:position pos:line="26" pos:column="33"/></operator><literal type="number" pos:line="26" pos:column="33">1<pos:position pos:line="26" pos:column="34"/></literal></expr>;<pos:position pos:line="26" pos:column="35"/></expr_stmt>
		<expr_stmt><expr><name pos:line="27" pos:column="17">munge_symlinks<pos:position pos:line="27" pos:column="31"/></name> <operator pos:line="27" pos:column="32">=<pos:position pos:line="27" pos:column="33"/></operator> <literal type="number" pos:line="27" pos:column="34">0<pos:position pos:line="27" pos:column="35"/></literal></expr>;<pos:position pos:line="27" pos:column="36"/></expr_stmt> <comment type="block" pos:line="27" pos:column="37">/* Each side needs its own option. */</comment>
		<expr_stmt><expr><name pos:line="28" pos:column="17">chmod_modes<pos:position pos:line="28" pos:column="28"/></name> <operator pos:line="28" pos:column="29">=<pos:position pos:line="28" pos:column="30"/></operator> <name pos:line="28" pos:column="31">NULL<pos:position pos:line="28" pos:column="35"/></name></expr>;<pos:position pos:line="28" pos:column="36"/></expr_stmt> <comment type="block" pos:line="28" pos:column="37">/* Let the sending side handle this. */</comment>

		<comment type="block" pos:line="30" pos:column="17">/* Let the client side handle this. */</comment>
		<if pos:line="31" pos:column="17">if <condition pos:line="31" pos:column="20">(<expr><name pos:line="31" pos:column="21">logfile_name<pos:position pos:line="31" pos:column="33"/></name></expr>)<pos:position pos:line="31" pos:column="34"/></condition><then pos:line="31" pos:column="34"> <block pos:line="31" pos:column="35">{
			<expr_stmt><expr><name pos:line="32" pos:column="25">logfile_name<pos:position pos:line="32" pos:column="37"/></name> <operator pos:line="32" pos:column="38">=<pos:position pos:line="32" pos:column="39"/></operator> <name pos:line="32" pos:column="40">NULL<pos:position pos:line="32" pos:column="44"/></name></expr>;<pos:position pos:line="32" pos:column="45"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="33" pos:column="25">logfile_close<pos:position pos:line="33" pos:column="38"/></name><argument_list pos:line="33" pos:column="38">()<pos:position pos:line="33" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="41"/></expr_stmt>
		}<pos:position pos:line="34" pos:column="18"/></block></then></if>

		<if pos:line="36" pos:column="17">if <condition pos:line="36" pos:column="20">(<expr><name pos:line="36" pos:column="21">remote_option_cnt<pos:position pos:line="36" pos:column="38"/></name></expr>)<pos:position pos:line="36" pos:column="39"/></condition><then pos:line="36" pos:column="39"> <block pos:line="36" pos:column="40">{
			<decl_stmt><decl><type><name pos:line="37" pos:column="25">int<pos:position pos:line="37" pos:column="28"/></name></type> <name pos:line="37" pos:column="29">rc<pos:position pos:line="37" pos:column="31"/></name> <init pos:line="37" pos:column="32">= <expr><name pos:line="37" pos:column="34">remote_option_cnt<pos:position pos:line="37" pos:column="51"/></name> <operator pos:line="37" pos:column="52">+<pos:position pos:line="37" pos:column="53"/></operator> <literal type="number" pos:line="37" pos:column="54">1<pos:position pos:line="37" pos:column="55"/></literal></expr></init></decl>;<pos:position pos:line="37" pos:column="56"/></decl_stmt>
			<decl_stmt><decl><type><specifier pos:line="38" pos:column="25">const<pos:position pos:line="38" pos:column="30"/></specifier> <name pos:line="38" pos:column="31">char<pos:position pos:line="38" pos:column="35"/></name> <modifier pos:line="38" pos:column="36">*<pos:position pos:line="38" pos:column="37"/></modifier><modifier pos:line="38" pos:column="37">*<pos:position pos:line="38" pos:column="38"/></modifier></type><name pos:line="38" pos:column="38">rv<pos:position pos:line="38" pos:column="40"/></name> <init pos:line="38" pos:column="41">= <expr><name pos:line="38" pos:column="43">remote_options<pos:position pos:line="38" pos:column="57"/></name></expr></init></decl>;<pos:position pos:line="38" pos:column="58"/></decl_stmt>
			<if pos:line="39" pos:column="25">if <condition pos:line="39" pos:column="28">(<expr><operator pos:line="39" pos:column="29">!<pos:position pos:line="39" pos:column="30"/></operator><call><name pos:line="39" pos:column="30">parse_arguments<pos:position pos:line="39" pos:column="45"/></name><argument_list pos:line="39" pos:column="45">(<argument><expr><operator pos:line="39" pos:column="46">&amp;<pos:position pos:line="39" pos:column="51"/></operator><name pos:line="39" pos:column="47">rc<pos:position pos:line="39" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="39" pos:column="51">&amp;<pos:position pos:line="39" pos:column="56"/></operator><name pos:line="39" pos:column="52">rv<pos:position pos:line="39" pos:column="54"/></name></expr></argument>)<pos:position pos:line="39" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="39" pos:column="56"/></condition><then pos:line="39" pos:column="56"> <block pos:line="39" pos:column="57">{
				<expr_stmt><expr><call><name pos:line="40" pos:column="33">option_error<pos:position pos:line="40" pos:column="45"/></name><argument_list pos:line="40" pos:column="45">()<pos:position pos:line="40" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="48"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="41" pos:column="33">exit_cleanup<pos:position pos:line="41" pos:column="45"/></name><argument_list pos:line="41" pos:column="45">(<argument><expr><name pos:line="41" pos:column="46">RERR_SYNTAX<pos:position pos:line="41" pos:column="57"/></name></expr></argument>)<pos:position pos:line="41" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="59"/></expr_stmt>
			}<pos:position pos:line="42" pos:column="26"/></block></then></if>
		}<pos:position pos:line="43" pos:column="18"/></block></then></if>

		<if pos:line="45" pos:column="17">if <condition pos:line="45" pos:column="20">(<expr><call><name pos:line="45" pos:column="21">dup2<pos:position pos:line="45" pos:column="25"/></name><argument_list pos:line="45" pos:column="25">(<argument><expr><name><name pos:line="45" pos:column="26">to_child_pipe<pos:position pos:line="45" pos:column="39"/></name><index pos:line="45" pos:column="39">[<expr><literal type="number" pos:line="45" pos:column="40">0<pos:position pos:line="45" pos:column="41"/></literal></expr>]<pos:position pos:line="45" pos:column="42"/></index></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="44">STDIN_FILENO<pos:position pos:line="45" pos:column="56"/></name></expr></argument>)<pos:position pos:line="45" pos:column="57"/></argument_list></call> <operator pos:line="45" pos:column="58">&lt;<pos:position pos:line="45" pos:column="62"/></operator> <literal type="number" pos:line="45" pos:column="60">0<pos:position pos:line="45" pos:column="61"/></literal> <operator pos:line="45" pos:column="62">||<pos:position pos:line="45" pos:column="64"/></operator>
		    <call><name pos:line="46" pos:column="21">close<pos:position pos:line="46" pos:column="26"/></name><argument_list pos:line="46" pos:column="26">(<argument><expr><name><name pos:line="46" pos:column="27">to_child_pipe<pos:position pos:line="46" pos:column="40"/></name><index pos:line="46" pos:column="40">[<expr><literal type="number" pos:line="46" pos:column="41">1<pos:position pos:line="46" pos:column="42"/></literal></expr>]<pos:position pos:line="46" pos:column="43"/></index></name></expr></argument>)<pos:position pos:line="46" pos:column="44"/></argument_list></call> <operator pos:line="46" pos:column="45">&lt;<pos:position pos:line="46" pos:column="49"/></operator> <literal type="number" pos:line="46" pos:column="47">0<pos:position pos:line="46" pos:column="48"/></literal> <operator pos:line="46" pos:column="49">||<pos:position pos:line="46" pos:column="51"/></operator>
		    <call><name pos:line="47" pos:column="21">close<pos:position pos:line="47" pos:column="26"/></name><argument_list pos:line="47" pos:column="26">(<argument><expr><name><name pos:line="47" pos:column="27">from_child_pipe<pos:position pos:line="47" pos:column="42"/></name><index pos:line="47" pos:column="42">[<expr><literal type="number" pos:line="47" pos:column="43">0<pos:position pos:line="47" pos:column="44"/></literal></expr>]<pos:position pos:line="47" pos:column="45"/></index></name></expr></argument>)<pos:position pos:line="47" pos:column="46"/></argument_list></call> <operator pos:line="47" pos:column="47">&lt;<pos:position pos:line="47" pos:column="51"/></operator> <literal type="number" pos:line="47" pos:column="49">0<pos:position pos:line="47" pos:column="50"/></literal> <operator pos:line="47" pos:column="51">||<pos:position pos:line="47" pos:column="53"/></operator>
		    <call><name pos:line="48" pos:column="21">dup2<pos:position pos:line="48" pos:column="25"/></name><argument_list pos:line="48" pos:column="25">(<argument><expr><name><name pos:line="48" pos:column="26">from_child_pipe<pos:position pos:line="48" pos:column="41"/></name><index pos:line="48" pos:column="41">[<expr><literal type="number" pos:line="48" pos:column="42">1<pos:position pos:line="48" pos:column="43"/></literal></expr>]<pos:position pos:line="48" pos:column="44"/></index></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="46">STDOUT_FILENO<pos:position pos:line="48" pos:column="59"/></name></expr></argument>)<pos:position pos:line="48" pos:column="60"/></argument_list></call> <operator pos:line="48" pos:column="61">&lt;<pos:position pos:line="48" pos:column="65"/></operator> <literal type="number" pos:line="48" pos:column="63">0<pos:position pos:line="48" pos:column="64"/></literal></expr>)<pos:position pos:line="48" pos:column="65"/></condition><then pos:line="48" pos:column="65"> <block pos:line="48" pos:column="66">{
			<expr_stmt><expr><call><name pos:line="49" pos:column="25">rsyserr<pos:position pos:line="49" pos:column="32"/></name><argument_list pos:line="49" pos:column="32">(<argument><expr><name pos:line="49" pos:column="33">FERROR<pos:position pos:line="49" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="41">errno<pos:position pos:line="49" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="49" pos:column="48">"Failed to dup/close"<pos:position pos:line="49" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="49" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="71"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="50" pos:column="25">exit_cleanup<pos:position pos:line="50" pos:column="37"/></name><argument_list pos:line="50" pos:column="37">(<argument><expr><name pos:line="50" pos:column="38">RERR_IPC<pos:position pos:line="50" pos:column="46"/></name></expr></argument>)<pos:position pos:line="50" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="48"/></expr_stmt>
		}<pos:position pos:line="51" pos:column="18"/></block></then></if>
		<if pos:line="52" pos:column="17">if <condition pos:line="52" pos:column="20">(<expr><name><name pos:line="52" pos:column="21">to_child_pipe<pos:position pos:line="52" pos:column="34"/></name><index pos:line="52" pos:column="34">[<expr><literal type="number" pos:line="52" pos:column="35">0<pos:position pos:line="52" pos:column="36"/></literal></expr>]<pos:position pos:line="52" pos:column="37"/></index></name> <operator pos:line="52" pos:column="38">!=<pos:position pos:line="52" pos:column="40"/></operator> <name pos:line="52" pos:column="41">STDIN_FILENO<pos:position pos:line="52" pos:column="53"/></name></expr>)<pos:position pos:line="52" pos:column="54"/></condition><then pos:line="52" pos:column="54">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="53" pos:column="25">close<pos:position pos:line="53" pos:column="30"/></name><argument_list pos:line="53" pos:column="30">(<argument><expr><name><name pos:line="53" pos:column="31">to_child_pipe<pos:position pos:line="53" pos:column="44"/></name><index pos:line="53" pos:column="44">[<expr><literal type="number" pos:line="53" pos:column="45">0<pos:position pos:line="53" pos:column="46"/></literal></expr>]<pos:position pos:line="53" pos:column="47"/></index></name></expr></argument>)<pos:position pos:line="53" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="49"/></expr_stmt></block></then></if>
		<if pos:line="54" pos:column="17">if <condition pos:line="54" pos:column="20">(<expr><name><name pos:line="54" pos:column="21">from_child_pipe<pos:position pos:line="54" pos:column="36"/></name><index pos:line="54" pos:column="36">[<expr><literal type="number" pos:line="54" pos:column="37">1<pos:position pos:line="54" pos:column="38"/></literal></expr>]<pos:position pos:line="54" pos:column="39"/></index></name> <operator pos:line="54" pos:column="40">!=<pos:position pos:line="54" pos:column="42"/></operator> <name pos:line="54" pos:column="43">STDOUT_FILENO<pos:position pos:line="54" pos:column="56"/></name></expr>)<pos:position pos:line="54" pos:column="57"/></condition><then pos:line="54" pos:column="57">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="55" pos:column="25">close<pos:position pos:line="55" pos:column="30"/></name><argument_list pos:line="55" pos:column="30">(<argument><expr><name><name pos:line="55" pos:column="31">from_child_pipe<pos:position pos:line="55" pos:column="46"/></name><index pos:line="55" pos:column="46">[<expr><literal type="number" pos:line="55" pos:column="47">1<pos:position pos:line="55" pos:column="48"/></literal></expr>]<pos:position pos:line="55" pos:column="49"/></index></name></expr></argument>)<pos:position pos:line="55" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="51"/></expr_stmt></block></then></if>
<cpp:ifdef pos:line="56" pos:column="1">#<cpp:directive pos:line="56" pos:column="2">ifdef<pos:position pos:line="56" pos:column="7"/></cpp:directive> <name pos:line="56" pos:column="8">ICONV_CONST<pos:position pos:line="56" pos:column="19"/></name></cpp:ifdef>
		<expr_stmt><expr><call><name pos:line="57" pos:column="17">setup_iconv<pos:position pos:line="57" pos:column="28"/></name><argument_list pos:line="57" pos:column="28">()<pos:position pos:line="57" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="31"/></expr_stmt>
<cpp:endif pos:line="58" pos:column="1">#<cpp:directive pos:line="58" pos:column="2">endif<pos:position pos:line="58" pos:column="7"/></cpp:directive></cpp:endif>
		<expr_stmt><expr><call><name pos:line="59" pos:column="17">child_main<pos:position pos:line="59" pos:column="27"/></name><argument_list pos:line="59" pos:column="27">(<argument><expr><name pos:line="59" pos:column="28">argc<pos:position pos:line="59" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="34">argv<pos:position pos:line="59" pos:column="38"/></name></expr></argument>)<pos:position pos:line="59" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="40"/></expr_stmt>
	}<pos:position pos:line="60" pos:column="10"/></block></then></if>

	<if pos:line="62" pos:column="9">if <condition pos:line="62" pos:column="12">(<expr><call><name pos:line="62" pos:column="13">close<pos:position pos:line="62" pos:column="18"/></name><argument_list pos:line="62" pos:column="18">(<argument><expr><name><name pos:line="62" pos:column="19">from_child_pipe<pos:position pos:line="62" pos:column="34"/></name><index pos:line="62" pos:column="34">[<expr><literal type="number" pos:line="62" pos:column="35">1<pos:position pos:line="62" pos:column="36"/></literal></expr>]<pos:position pos:line="62" pos:column="37"/></index></name></expr></argument>)<pos:position pos:line="62" pos:column="38"/></argument_list></call> <operator pos:line="62" pos:column="39">&lt;<pos:position pos:line="62" pos:column="43"/></operator> <literal type="number" pos:line="62" pos:column="41">0<pos:position pos:line="62" pos:column="42"/></literal> <operator pos:line="62" pos:column="43">||<pos:position pos:line="62" pos:column="45"/></operator>
	    <call><name pos:line="63" pos:column="13">close<pos:position pos:line="63" pos:column="18"/></name><argument_list pos:line="63" pos:column="18">(<argument><expr><name><name pos:line="63" pos:column="19">to_child_pipe<pos:position pos:line="63" pos:column="32"/></name><index pos:line="63" pos:column="32">[<expr><literal type="number" pos:line="63" pos:column="33">0<pos:position pos:line="63" pos:column="34"/></literal></expr>]<pos:position pos:line="63" pos:column="35"/></index></name></expr></argument>)<pos:position pos:line="63" pos:column="36"/></argument_list></call> <operator pos:line="63" pos:column="37">&lt;<pos:position pos:line="63" pos:column="41"/></operator> <literal type="number" pos:line="63" pos:column="39">0<pos:position pos:line="63" pos:column="40"/></literal></expr>)<pos:position pos:line="63" pos:column="41"/></condition><then pos:line="63" pos:column="41"> <block pos:line="63" pos:column="42">{
		<expr_stmt><expr><call><name pos:line="64" pos:column="17">rsyserr<pos:position pos:line="64" pos:column="24"/></name><argument_list pos:line="64" pos:column="24">(<argument><expr><name pos:line="64" pos:column="25">FERROR<pos:position pos:line="64" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="33">errno<pos:position pos:line="64" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="64" pos:column="40">"Failed to close"<pos:position pos:line="64" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="64" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="59"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="65" pos:column="17">exit_cleanup<pos:position pos:line="65" pos:column="29"/></name><argument_list pos:line="65" pos:column="29">(<argument><expr><name pos:line="65" pos:column="30">RERR_IPC<pos:position pos:line="65" pos:column="38"/></name></expr></argument>)<pos:position pos:line="65" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="40"/></expr_stmt>
	}<pos:position pos:line="66" pos:column="10"/></block></then></if>

	<expr_stmt><expr><operator pos:line="68" pos:column="9">*<pos:position pos:line="68" pos:column="10"/></operator><name pos:line="68" pos:column="10">f_in<pos:position pos:line="68" pos:column="14"/></name> <operator pos:line="68" pos:column="15">=<pos:position pos:line="68" pos:column="16"/></operator> <name><name pos:line="68" pos:column="17">from_child_pipe<pos:position pos:line="68" pos:column="32"/></name><index pos:line="68" pos:column="32">[<expr><literal type="number" pos:line="68" pos:column="33">0<pos:position pos:line="68" pos:column="34"/></literal></expr>]<pos:position pos:line="68" pos:column="35"/></index></name></expr>;<pos:position pos:line="68" pos:column="36"/></expr_stmt>
	<expr_stmt><expr><operator pos:line="69" pos:column="9">*<pos:position pos:line="69" pos:column="10"/></operator><name pos:line="69" pos:column="10">f_out<pos:position pos:line="69" pos:column="15"/></name> <operator pos:line="69" pos:column="16">=<pos:position pos:line="69" pos:column="17"/></operator> <name><name pos:line="69" pos:column="18">to_child_pipe<pos:position pos:line="69" pos:column="31"/></name><index pos:line="69" pos:column="31">[<expr><literal type="number" pos:line="69" pos:column="32">1<pos:position pos:line="69" pos:column="33"/></literal></expr>]<pos:position pos:line="69" pos:column="34"/></index></name></expr>;<pos:position pos:line="69" pos:column="35"/></expr_stmt>

	<return pos:line="71" pos:column="9">return <expr><name pos:line="71" pos:column="16">pid<pos:position pos:line="71" pos:column="19"/></name></expr>;<pos:position pos:line="71" pos:column="20"/></return>
}<pos:position pos:line="72" pos:column="2"/></block></function></unit>
