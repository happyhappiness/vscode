<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_function_414.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">setup_protocol<pos:position pos:line="1" pos:column="20"/></name><parameter_list pos:line="1" pos:column="20">(<parameter><decl><type><name pos:line="1" pos:column="21">int<pos:position pos:line="1" pos:column="24"/></name></type> <name pos:line="1" pos:column="25">f_out<pos:position pos:line="1" pos:column="30"/></name></decl></parameter>,<parameter><decl><type><name pos:line="1" pos:column="31">int<pos:position pos:line="1" pos:column="34"/></name></type> <name pos:line="1" pos:column="35">f_in<pos:position pos:line="1" pos:column="39"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="40"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <if pos:line="3" pos:column="3">if <condition pos:line="3" pos:column="6">(<expr><name pos:line="3" pos:column="7">am_server<pos:position pos:line="3" pos:column="16"/></name></expr>)<pos:position pos:line="3" pos:column="17"/></condition><then pos:line="3" pos:column="17"> <block pos:line="3" pos:column="18">{
    <expr_stmt><expr><name pos:line="4" pos:column="5">remote_version<pos:position pos:line="4" pos:column="19"/></name> <operator pos:line="4" pos:column="20">=<pos:position pos:line="4" pos:column="21"/></operator> <call><name pos:line="4" pos:column="22">read_int<pos:position pos:line="4" pos:column="30"/></name><argument_list pos:line="4" pos:column="30">(<argument><expr><name pos:line="4" pos:column="31">f_in<pos:position pos:line="4" pos:column="35"/></name></expr></argument>)<pos:position pos:line="4" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="37"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">write_int<pos:position pos:line="5" pos:column="14"/></name><argument_list pos:line="5" pos:column="14">(<argument><expr><name pos:line="5" pos:column="15">f_out<pos:position pos:line="5" pos:column="20"/></name></expr></argument>,<argument><expr><name pos:line="5" pos:column="21">PROTOCOL_VERSION<pos:position pos:line="5" pos:column="37"/></name></expr></argument>)<pos:position pos:line="5" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="39"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="6" pos:column="5">write_flush<pos:position pos:line="6" pos:column="16"/></name><argument_list pos:line="6" pos:column="16">(<argument><expr><name pos:line="6" pos:column="17">f_out<pos:position pos:line="6" pos:column="22"/></name></expr></argument>)<pos:position pos:line="6" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="24"/></expr_stmt>
  }<pos:position pos:line="7" pos:column="4"/></block></then> <else pos:line="7" pos:column="5">else <block pos:line="7" pos:column="10">{
    <expr_stmt><expr><call><name pos:line="8" pos:column="5">write_int<pos:position pos:line="8" pos:column="14"/></name><argument_list pos:line="8" pos:column="14">(<argument><expr><name pos:line="8" pos:column="15">f_out<pos:position pos:line="8" pos:column="20"/></name></expr></argument>,<argument><expr><name pos:line="8" pos:column="21">PROTOCOL_VERSION<pos:position pos:line="8" pos:column="37"/></name></expr></argument>)<pos:position pos:line="8" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="39"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="9" pos:column="5">write_flush<pos:position pos:line="9" pos:column="16"/></name><argument_list pos:line="9" pos:column="16">(<argument><expr><name pos:line="9" pos:column="17">f_out<pos:position pos:line="9" pos:column="22"/></name></expr></argument>)<pos:position pos:line="9" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><name pos:line="10" pos:column="5">remote_version<pos:position pos:line="10" pos:column="19"/></name> <operator pos:line="10" pos:column="20">=<pos:position pos:line="10" pos:column="21"/></operator> <call><name pos:line="10" pos:column="22">read_int<pos:position pos:line="10" pos:column="30"/></name><argument_list pos:line="10" pos:column="30">(<argument><expr><name pos:line="10" pos:column="31">f_in<pos:position pos:line="10" pos:column="35"/></name></expr></argument>)<pos:position pos:line="10" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="37"/></expr_stmt>
  }<pos:position pos:line="11" pos:column="4"/></block></else></if>

  <if pos:line="13" pos:column="3">if <condition pos:line="13" pos:column="6">(<expr><name><name pos:line="13" pos:column="7">remote_version<pos:position pos:line="13" pos:column="21"/></name> <argument_list type="generic" pos:line="13" pos:column="22">&lt; <argument><expr><name pos:line="13" pos:column="24">MIN_PROTOCOL_VERSION<pos:position pos:line="13" pos:column="44"/></name> <operator pos:line="13" pos:column="45">||<pos:position pos:line="13" pos:column="47"/></operator>
      <name pos:line="14" pos:column="7">remote_version<pos:position pos:line="14" pos:column="21"/></name></expr></argument> &gt;<pos:position pos:line="14" pos:column="26"/></argument_list></name> <name pos:line="14" pos:column="24">MAX_PROTOCOL_VERSION<pos:position pos:line="14" pos:column="44"/></name></expr>)<pos:position pos:line="14" pos:column="45"/></condition><then pos:line="14" pos:column="45"> <block pos:line="14" pos:column="46">{
    <expr_stmt><expr><call><name pos:line="15" pos:column="5">fprintf<pos:position pos:line="15" pos:column="12"/></name><argument_list pos:line="15" pos:column="12">(<argument><expr><name pos:line="15" pos:column="13">FERROR<pos:position pos:line="15" pos:column="19"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="15" pos:column="20">"protocol version mismatch - is your shell clean?\n"<pos:position pos:line="15" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="74"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="16" pos:column="5">exit_cleanup<pos:position pos:line="16" pos:column="17"/></name><argument_list pos:line="16" pos:column="17">(<argument><expr><literal type="number" pos:line="16" pos:column="18">1<pos:position pos:line="16" pos:column="19"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="21"/></expr_stmt>
  }<pos:position pos:line="17" pos:column="4"/></block></then></if>	

  <if pos:line="19" pos:column="3">if <condition pos:line="19" pos:column="6">(<expr><name pos:line="19" pos:column="7">verbose<pos:position pos:line="19" pos:column="14"/></name> <operator pos:line="19" pos:column="15">&gt;<pos:position pos:line="19" pos:column="19"/></operator> <literal type="number" pos:line="19" pos:column="17">2<pos:position pos:line="19" pos:column="18"/></literal></expr>)<pos:position pos:line="19" pos:column="19"/></condition><then pos:line="19" pos:column="19">
	  <block type="pseudo"><expr_stmt><expr><call><name pos:line="20" pos:column="11">fprintf<pos:position pos:line="20" pos:column="18"/></name><argument_list pos:line="20" pos:column="18">(<argument><expr><name pos:line="20" pos:column="19">FINFO<pos:position pos:line="20" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="26">"local_version=%d remote_version=%d\n"<pos:position pos:line="20" pos:column="64"/></literal></expr></argument>,
		  <argument><expr><name pos:line="21" pos:column="19">PROTOCOL_VERSION<pos:position pos:line="21" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="37">remote_version<pos:position pos:line="21" pos:column="51"/></name></expr></argument>)<pos:position pos:line="21" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="53"/></expr_stmt></block></then></if>

  <if pos:line="23" pos:column="3">if <condition pos:line="23" pos:column="6">(<expr><name pos:line="23" pos:column="7">remote_version<pos:position pos:line="23" pos:column="21"/></name> <operator pos:line="23" pos:column="22">&gt;=<pos:position pos:line="23" pos:column="27"/></operator> <literal type="number" pos:line="23" pos:column="25">12<pos:position pos:line="23" pos:column="27"/></literal></expr>)<pos:position pos:line="23" pos:column="28"/></condition><then pos:line="23" pos:column="28"> <block pos:line="23" pos:column="29">{
    <if pos:line="24" pos:column="5">if <condition pos:line="24" pos:column="8">(<expr><name pos:line="24" pos:column="9">am_server<pos:position pos:line="24" pos:column="18"/></name></expr>)<pos:position pos:line="24" pos:column="19"/></condition><then pos:line="24" pos:column="19"> <block pos:line="24" pos:column="20">{
      <expr_stmt><expr><name pos:line="25" pos:column="7">checksum_seed<pos:position pos:line="25" pos:column="20"/></name> <operator pos:line="25" pos:column="21">=<pos:position pos:line="25" pos:column="22"/></operator> <call><name pos:line="25" pos:column="23">time<pos:position pos:line="25" pos:column="27"/></name><argument_list pos:line="25" pos:column="27">(<argument><expr><name pos:line="25" pos:column="28">NULL<pos:position pos:line="25" pos:column="32"/></name></expr></argument>)<pos:position pos:line="25" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="34"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="26" pos:column="7">write_int<pos:position pos:line="26" pos:column="16"/></name><argument_list pos:line="26" pos:column="16">(<argument><expr><name pos:line="26" pos:column="17">f_out<pos:position pos:line="26" pos:column="22"/></name></expr></argument>,<argument><expr><name pos:line="26" pos:column="23">checksum_seed<pos:position pos:line="26" pos:column="36"/></name></expr></argument>)<pos:position pos:line="26" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="38"/></expr_stmt>
    }<pos:position pos:line="27" pos:column="6"/></block></then> <else pos:line="27" pos:column="7">else <block pos:line="27" pos:column="12">{
      <expr_stmt><expr><name pos:line="28" pos:column="7">checksum_seed<pos:position pos:line="28" pos:column="20"/></name> <operator pos:line="28" pos:column="21">=<pos:position pos:line="28" pos:column="22"/></operator> <call><name pos:line="28" pos:column="23">read_int<pos:position pos:line="28" pos:column="31"/></name><argument_list pos:line="28" pos:column="31">(<argument><expr><name pos:line="28" pos:column="32">f_in<pos:position pos:line="28" pos:column="36"/></name></expr></argument>)<pos:position pos:line="28" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="38"/></expr_stmt>
    }<pos:position pos:line="29" pos:column="6"/></block></else></if>
  }<pos:position pos:line="30" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="32" pos:column="3">checksum_init<pos:position pos:line="32" pos:column="16"/></name><argument_list pos:line="32" pos:column="16">()<pos:position pos:line="32" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="19"/></expr_stmt>
}<pos:position pos:line="33" pos:column="2"/></block></function></unit>
