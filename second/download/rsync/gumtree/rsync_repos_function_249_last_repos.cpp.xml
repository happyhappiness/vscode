<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_249_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">open_socket_out_wrapped<pos:position pos:line="1" pos:column="28"/></name><parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><name pos:line="1" pos:column="29">char<pos:position pos:line="1" pos:column="33"/></name> <modifier pos:line="1" pos:column="34">*<pos:position pos:line="1" pos:column="35"/></modifier></type><name pos:line="1" pos:column="35">host<pos:position pos:line="1" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="41">int<pos:position pos:line="1" pos:column="44"/></name></type> <name pos:line="1" pos:column="45">port<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="51">const<pos:position pos:line="1" pos:column="56"/></specifier> <name pos:line="1" pos:column="57">char<pos:position pos:line="1" pos:column="61"/></name> <modifier pos:line="1" pos:column="62">*<pos:position pos:line="1" pos:column="63"/></modifier></type><name pos:line="1" pos:column="63">bind_addr<pos:position pos:line="1" pos:column="72"/></name></decl></parameter>,
			    <parameter><decl><type><name pos:line="2" pos:column="29">int<pos:position pos:line="2" pos:column="32"/></name></type> <name pos:line="2" pos:column="33">af_hint<pos:position pos:line="2" pos:column="40"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="41"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier></type><name pos:line="4" pos:column="15">prog<pos:position pos:line="4" pos:column="19"/></name> <init pos:line="4" pos:column="20">= <expr><call><name pos:line="4" pos:column="22">getenv<pos:position pos:line="4" pos:column="28"/></name><argument_list pos:line="4" pos:column="28">(<argument><expr><literal type="string" pos:line="4" pos:column="29">"RSYNC_CONNECT_PROG"<pos:position pos:line="4" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="4" pos:column="50"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="51"/></decl_stmt>

	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><name pos:line="6" pos:column="13">prog<pos:position pos:line="6" pos:column="17"/></name> <operator pos:line="6" pos:column="18">&amp;&amp;<pos:position pos:line="6" pos:column="28"/></operator> <call><name pos:line="6" pos:column="21">strchr<pos:position pos:line="6" pos:column="27"/></name><argument_list pos:line="6" pos:column="27">(<argument><expr><name pos:line="6" pos:column="28">prog<pos:position pos:line="6" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="6" pos:column="34">'%'<pos:position pos:line="6" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="6" pos:column="39"/></condition><then pos:line="6" pos:column="39"> <block pos:line="6" pos:column="40">{
		<decl_stmt><decl><type><name pos:line="7" pos:column="17">int<pos:position pos:line="7" pos:column="20"/></name></type> <name pos:line="7" pos:column="21">hlen<pos:position pos:line="7" pos:column="25"/></name> <init pos:line="7" pos:column="26">= <expr><call><name pos:line="7" pos:column="28">strlen<pos:position pos:line="7" pos:column="34"/></name><argument_list pos:line="7" pos:column="34">(<argument><expr><name pos:line="7" pos:column="35">host<pos:position pos:line="7" pos:column="39"/></name></expr></argument>)<pos:position pos:line="7" pos:column="40"/></argument_list></call></expr></init></decl>;<pos:position pos:line="7" pos:column="41"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="8" pos:column="17">int<pos:position pos:line="8" pos:column="20"/></name></type> <name pos:line="8" pos:column="21">len<pos:position pos:line="8" pos:column="24"/></name> <init pos:line="8" pos:column="25">= <expr><call><name pos:line="8" pos:column="27">strlen<pos:position pos:line="8" pos:column="33"/></name><argument_list pos:line="8" pos:column="33">(<argument><expr><name pos:line="8" pos:column="34">prog<pos:position pos:line="8" pos:column="38"/></name></expr></argument>)<pos:position pos:line="8" pos:column="39"/></argument_list></call> <operator pos:line="8" pos:column="40">+<pos:position pos:line="8" pos:column="41"/></operator> <literal type="number" pos:line="8" pos:column="42">1<pos:position pos:line="8" pos:column="43"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="44"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="9" pos:column="17">char<pos:position pos:line="9" pos:column="21"/></name> <modifier pos:line="9" pos:column="22">*<pos:position pos:line="9" pos:column="23"/></modifier></type><name pos:line="9" pos:column="23">f<pos:position pos:line="9" pos:column="24"/></name></decl>, <modifier pos:line="9" pos:column="26">*<pos:position pos:line="9" pos:column="27"/></modifier><decl><type ref="prev"/><name pos:line="9" pos:column="27">t<pos:position pos:line="9" pos:column="28"/></name></decl>;<pos:position pos:line="9" pos:column="29"/></decl_stmt>
		<for pos:line="10" pos:column="17">for <control pos:line="10" pos:column="21">(<init><expr><name pos:line="10" pos:column="22">f<pos:position pos:line="10" pos:column="23"/></name> <operator pos:line="10" pos:column="24">=<pos:position pos:line="10" pos:column="25"/></operator> <name pos:line="10" pos:column="26">prog<pos:position pos:line="10" pos:column="30"/></name></expr>;<pos:position pos:line="10" pos:column="31"/></init> <condition><expr><operator pos:line="10" pos:column="32">*<pos:position pos:line="10" pos:column="33"/></operator><name pos:line="10" pos:column="33">f<pos:position pos:line="10" pos:column="34"/></name></expr>;<pos:position pos:line="10" pos:column="35"/></condition> <incr><expr><name pos:line="10" pos:column="36">f<pos:position pos:line="10" pos:column="37"/></name><operator pos:line="10" pos:column="37">++<pos:position pos:line="10" pos:column="39"/></operator></expr></incr>)<pos:position pos:line="10" pos:column="40"/></control> <block pos:line="10" pos:column="41">{
			<if pos:line="11" pos:column="25">if <condition pos:line="11" pos:column="28">(<expr><operator pos:line="11" pos:column="29">*<pos:position pos:line="11" pos:column="30"/></operator><name pos:line="11" pos:column="30">f<pos:position pos:line="11" pos:column="31"/></name> <operator pos:line="11" pos:column="32">!=<pos:position pos:line="11" pos:column="34"/></operator> <literal type="char" pos:line="11" pos:column="35">'%'<pos:position pos:line="11" pos:column="38"/></literal></expr>)<pos:position pos:line="11" pos:column="39"/></condition><then pos:line="11" pos:column="39">
				<block type="pseudo"><continue pos:line="12" pos:column="33">continue;<pos:position pos:line="12" pos:column="42"/></continue></block></then></if>
			<comment type="block" pos:line="13" pos:column="25">/* Compute more than enough room. */</comment>
			<if pos:line="14" pos:column="25">if <condition pos:line="14" pos:column="28">(<expr><name><name pos:line="14" pos:column="29">f<pos:position pos:line="14" pos:column="30"/></name><index pos:line="14" pos:column="30">[<expr><literal type="number" pos:line="14" pos:column="31">1<pos:position pos:line="14" pos:column="32"/></literal></expr>]<pos:position pos:line="14" pos:column="33"/></index></name> <operator pos:line="14" pos:column="34">==<pos:position pos:line="14" pos:column="36"/></operator> <literal type="char" pos:line="14" pos:column="37">'%'<pos:position pos:line="14" pos:column="40"/></literal></expr>)<pos:position pos:line="14" pos:column="41"/></condition><then pos:line="14" pos:column="41">
				<block type="pseudo"><expr_stmt><expr><name pos:line="15" pos:column="33">f<pos:position pos:line="15" pos:column="34"/></name><operator pos:line="15" pos:column="34">++<pos:position pos:line="15" pos:column="36"/></operator></expr>;<pos:position pos:line="15" pos:column="37"/></expr_stmt></block></then>
			<else pos:line="16" pos:column="25">else
				<block type="pseudo"><expr_stmt><expr><name pos:line="17" pos:column="33">len<pos:position pos:line="17" pos:column="36"/></name> <operator pos:line="17" pos:column="37">+=<pos:position pos:line="17" pos:column="39"/></operator> <name pos:line="17" pos:column="40">hlen<pos:position pos:line="17" pos:column="44"/></name></expr>;<pos:position pos:line="17" pos:column="45"/></expr_stmt></block></else></if>
		}<pos:position pos:line="18" pos:column="18"/></block></for>
		<expr_stmt><expr><name pos:line="19" pos:column="17">f<pos:position pos:line="19" pos:column="18"/></name> <operator pos:line="19" pos:column="19">=<pos:position pos:line="19" pos:column="20"/></operator> <name pos:line="19" pos:column="21">prog<pos:position pos:line="19" pos:column="25"/></name></expr>;<pos:position pos:line="19" pos:column="26"/></expr_stmt>
		<if pos:line="20" pos:column="17">if <condition pos:line="20" pos:column="20">(<expr><operator pos:line="20" pos:column="21">!<pos:position pos:line="20" pos:column="22"/></operator><operator pos:line="20" pos:column="22">(<pos:position pos:line="20" pos:column="23"/></operator><name pos:line="20" pos:column="23">prog<pos:position pos:line="20" pos:column="27"/></name> <operator pos:line="20" pos:column="28">=<pos:position pos:line="20" pos:column="29"/></operator> <call><name pos:line="20" pos:column="30">new_array<pos:position pos:line="20" pos:column="39"/></name><argument_list pos:line="20" pos:column="39">(<argument><expr><name pos:line="20" pos:column="40">char<pos:position pos:line="20" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="46">len<pos:position pos:line="20" pos:column="49"/></name></expr></argument>)<pos:position pos:line="20" pos:column="50"/></argument_list></call><operator pos:line="20" pos:column="50">)<pos:position pos:line="20" pos:column="51"/></operator></expr>)<pos:position pos:line="20" pos:column="52"/></condition><then pos:line="20" pos:column="52">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="21" pos:column="25">out_of_memory<pos:position pos:line="21" pos:column="38"/></name><argument_list pos:line="21" pos:column="38">(<argument><expr><literal type="string" pos:line="21" pos:column="39">"open_socket_out_wrapped"<pos:position pos:line="21" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="66"/></expr_stmt></block></then></if>
		<for pos:line="22" pos:column="17">for <control pos:line="22" pos:column="21">(<init><expr><name pos:line="22" pos:column="22">t<pos:position pos:line="22" pos:column="23"/></name> <operator pos:line="22" pos:column="24">=<pos:position pos:line="22" pos:column="25"/></operator> <name pos:line="22" pos:column="26">prog<pos:position pos:line="22" pos:column="30"/></name></expr>;<pos:position pos:line="22" pos:column="31"/></init> <condition><expr><operator pos:line="22" pos:column="32">*<pos:position pos:line="22" pos:column="33"/></operator><name pos:line="22" pos:column="33">f<pos:position pos:line="22" pos:column="34"/></name></expr>;<pos:position pos:line="22" pos:column="35"/></condition> <incr><expr><name pos:line="22" pos:column="36">f<pos:position pos:line="22" pos:column="37"/></name><operator pos:line="22" pos:column="37">++<pos:position pos:line="22" pos:column="39"/></operator></expr></incr>)<pos:position pos:line="22" pos:column="40"/></control> <block pos:line="22" pos:column="41">{
			<if pos:line="23" pos:column="25">if <condition pos:line="23" pos:column="28">(<expr><operator pos:line="23" pos:column="29">*<pos:position pos:line="23" pos:column="30"/></operator><name pos:line="23" pos:column="30">f<pos:position pos:line="23" pos:column="31"/></name> <operator pos:line="23" pos:column="32">==<pos:position pos:line="23" pos:column="34"/></operator> <literal type="char" pos:line="23" pos:column="35">'%'<pos:position pos:line="23" pos:column="38"/></literal></expr>)<pos:position pos:line="23" pos:column="39"/></condition><then pos:line="23" pos:column="39"> <block pos:line="23" pos:column="40">{
				<switch pos:line="24" pos:column="33">switch <condition pos:line="24" pos:column="40">(<expr><operator pos:line="24" pos:column="41">*<pos:position pos:line="24" pos:column="42"/></operator><operator pos:line="24" pos:column="42">++<pos:position pos:line="24" pos:column="44"/></operator><name pos:line="24" pos:column="44">f<pos:position pos:line="24" pos:column="45"/></name></expr>)<pos:position pos:line="24" pos:column="46"/></condition> <block pos:line="24" pos:column="47">{
				<case pos:line="25" pos:column="33">case <expr><literal type="char" pos:line="25" pos:column="38">'%'<pos:position pos:line="25" pos:column="41"/></literal></expr>:<pos:position pos:line="25" pos:column="42"/></case>
					<comment type="block" pos:line="26" pos:column="41">/* Just skips the extra '%'. */</comment>
					<break pos:line="27" pos:column="41">break;<pos:position pos:line="27" pos:column="47"/></break>
				<case pos:line="28" pos:column="33">case <expr><literal type="char" pos:line="28" pos:column="38">'H'<pos:position pos:line="28" pos:column="41"/></literal></expr>:<pos:position pos:line="28" pos:column="42"/></case>
					<expr_stmt><expr><call><name pos:line="29" pos:column="41">memcpy<pos:position pos:line="29" pos:column="47"/></name><argument_list pos:line="29" pos:column="47">(<argument><expr><name pos:line="29" pos:column="48">t<pos:position pos:line="29" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="51">host<pos:position pos:line="29" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="57">hlen<pos:position pos:line="29" pos:column="61"/></name></expr></argument>)<pos:position pos:line="29" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="63"/></expr_stmt>
					<expr_stmt><expr><name pos:line="30" pos:column="41">t<pos:position pos:line="30" pos:column="42"/></name> <operator pos:line="30" pos:column="43">+=<pos:position pos:line="30" pos:column="45"/></operator> <name pos:line="30" pos:column="46">hlen<pos:position pos:line="30" pos:column="50"/></name></expr>;<pos:position pos:line="30" pos:column="51"/></expr_stmt>
					<continue pos:line="31" pos:column="41">continue;<pos:position pos:line="31" pos:column="50"/></continue>
				<default pos:line="32" pos:column="33">default:<pos:position pos:line="32" pos:column="41"/></default>
					<expr_stmt><expr><name pos:line="33" pos:column="41">f<pos:position pos:line="33" pos:column="42"/></name><operator pos:line="33" pos:column="42">--<pos:position pos:line="33" pos:column="44"/></operator></expr>;<pos:position pos:line="33" pos:column="45"/></expr_stmt> <comment type="block" pos:line="33" pos:column="46">/* pass % through */</comment>
					<break pos:line="34" pos:column="41">break;<pos:position pos:line="34" pos:column="47"/></break>
				}<pos:position pos:line="35" pos:column="34"/></block></switch>
			}<pos:position pos:line="36" pos:column="26"/></block></then></if>
			<expr_stmt><expr><operator pos:line="37" pos:column="25">*<pos:position pos:line="37" pos:column="26"/></operator><name pos:line="37" pos:column="26">t<pos:position pos:line="37" pos:column="27"/></name><operator pos:line="37" pos:column="27">++<pos:position pos:line="37" pos:column="29"/></operator> <operator pos:line="37" pos:column="30">=<pos:position pos:line="37" pos:column="31"/></operator> <operator pos:line="37" pos:column="32">*<pos:position pos:line="37" pos:column="33"/></operator><name pos:line="37" pos:column="33">f<pos:position pos:line="37" pos:column="34"/></name></expr>;<pos:position pos:line="37" pos:column="35"/></expr_stmt>
		}<pos:position pos:line="38" pos:column="18"/></block></for>
		<expr_stmt><expr><operator pos:line="39" pos:column="17">*<pos:position pos:line="39" pos:column="18"/></operator><name pos:line="39" pos:column="18">t<pos:position pos:line="39" pos:column="19"/></name> <operator pos:line="39" pos:column="20">=<pos:position pos:line="39" pos:column="21"/></operator> <literal type="char" pos:line="39" pos:column="22">'\0'<pos:position pos:line="39" pos:column="26"/></literal></expr>;<pos:position pos:line="39" pos:column="27"/></expr_stmt>
	}<pos:position pos:line="40" pos:column="10"/></block></then></if>

	<if pos:line="42" pos:column="9">if <condition pos:line="42" pos:column="12">(<expr><call><name pos:line="42" pos:column="13">DEBUG_GTE<pos:position pos:line="42" pos:column="22"/></name><argument_list pos:line="42" pos:column="22">(<argument><expr><name pos:line="42" pos:column="23">CONNECT<pos:position pos:line="42" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="42" pos:column="32">1<pos:position pos:line="42" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="42" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="42" pos:column="35"/></condition><then pos:line="42" pos:column="35"> <block pos:line="42" pos:column="36">{
		<expr_stmt><expr><call><name pos:line="43" pos:column="17">rprintf<pos:position pos:line="43" pos:column="24"/></name><argument_list pos:line="43" pos:column="24">(<argument><expr><name pos:line="43" pos:column="25">FINFO<pos:position pos:line="43" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="43" pos:column="32">"%sopening tcp connection to %s port %d\n"<pos:position pos:line="43" pos:column="74"/></literal></expr></argument>,
			<argument><expr><ternary><condition><expr><name pos:line="44" pos:column="25">prog<pos:position pos:line="44" pos:column="29"/></name></expr> ?<pos:position pos:line="44" pos:column="31"/></condition><then pos:line="44" pos:column="31"> <expr><literal type="string" pos:line="44" pos:column="32">"Using RSYNC_CONNECT_PROG instead of "<pos:position pos:line="44" pos:column="70"/></literal></expr> <pos:position pos:line="44" pos:column="71"/></then><else pos:line="44" pos:column="71">: <expr><literal type="string" pos:line="44" pos:column="73">""<pos:position pos:line="44" pos:column="75"/></literal></expr></else></ternary></expr></argument>,
			<argument><expr><name pos:line="45" pos:column="25">host<pos:position pos:line="45" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="31">port<pos:position pos:line="45" pos:column="35"/></name></expr></argument>)<pos:position pos:line="45" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="37"/></expr_stmt>
	}<pos:position pos:line="46" pos:column="10"/></block></then></if>
	<if pos:line="47" pos:column="9">if <condition pos:line="47" pos:column="12">(<expr><name pos:line="47" pos:column="13">prog<pos:position pos:line="47" pos:column="17"/></name></expr>)<pos:position pos:line="47" pos:column="18"/></condition><then pos:line="47" pos:column="18">
		<block type="pseudo"><return pos:line="48" pos:column="17">return <expr><call><name pos:line="48" pos:column="24">sock_exec<pos:position pos:line="48" pos:column="33"/></name><argument_list pos:line="48" pos:column="33">(<argument><expr><name pos:line="48" pos:column="34">prog<pos:position pos:line="48" pos:column="38"/></name></expr></argument>)<pos:position pos:line="48" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="40"/></return></block></then></if>
	<return pos:line="49" pos:column="9">return <expr><call><name pos:line="49" pos:column="16">open_socket_out<pos:position pos:line="49" pos:column="31"/></name><argument_list pos:line="49" pos:column="31">(<argument><expr><name pos:line="49" pos:column="32">host<pos:position pos:line="49" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="38">port<pos:position pos:line="49" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="44">bind_addr<pos:position pos:line="49" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="55">af_hint<pos:position pos:line="49" pos:column="62"/></name></expr></argument>)<pos:position pos:line="49" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="64"/></return>
}<pos:position pos:line="50" pos:column="2"/></block></function></unit>
