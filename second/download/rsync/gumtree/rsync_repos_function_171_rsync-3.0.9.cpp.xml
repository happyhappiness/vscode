<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_171_rsync-3.0.9.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">keep_backup<pos:position pos:line="1" pos:column="23"/></name><parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><specifier pos:line="1" pos:column="24">const<pos:position pos:line="1" pos:column="29"/></specifier> <name pos:line="1" pos:column="30">char<pos:position pos:line="1" pos:column="34"/></name> <modifier pos:line="1" pos:column="35">*<pos:position pos:line="1" pos:column="36"/></modifier></type><name pos:line="1" pos:column="36">fname<pos:position pos:line="1" pos:column="41"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="42"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">stat_x<pos:position pos:line="3" pos:column="15"/></name></type> <name pos:line="3" pos:column="16">sx<pos:position pos:line="3" pos:column="18"/></name></decl>;<pos:position pos:line="3" pos:column="19"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">file_struct<pos:position pos:line="4" pos:column="27"/></name></name> <modifier pos:line="4" pos:column="28">*<pos:position pos:line="4" pos:column="29"/></modifier></type><name pos:line="4" pos:column="29">file<pos:position pos:line="4" pos:column="33"/></name></decl>;<pos:position pos:line="4" pos:column="34"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">char<pos:position pos:line="5" pos:column="13"/></name> <modifier pos:line="5" pos:column="14">*<pos:position pos:line="5" pos:column="15"/></modifier></type><name pos:line="5" pos:column="15">buf<pos:position pos:line="5" pos:column="18"/></name></decl>;<pos:position pos:line="5" pos:column="19"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">save_preserve_xattrs<pos:position pos:line="6" pos:column="33"/></name> <init pos:line="6" pos:column="34">= <expr><name pos:line="6" pos:column="36">preserve_xattrs<pos:position pos:line="6" pos:column="51"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="52"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">int<pos:position pos:line="7" pos:column="12"/></name></type> <name pos:line="7" pos:column="13">kept<pos:position pos:line="7" pos:column="17"/></name> <init pos:line="7" pos:column="18">= <expr><literal type="number" pos:line="7" pos:column="20">0<pos:position pos:line="7" pos:column="21"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="22"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">int<pos:position pos:line="8" pos:column="12"/></name></type> <name pos:line="8" pos:column="13">ret_code<pos:position pos:line="8" pos:column="21"/></name></decl>;<pos:position pos:line="8" pos:column="22"/></decl_stmt>

	<comment type="block" pos:line="10" pos:column="9">/* return if no file to keep */</comment>
	<if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><call><name pos:line="11" pos:column="13">x_lstat<pos:position pos:line="11" pos:column="20"/></name><argument_list pos:line="11" pos:column="20">(<argument><expr><name pos:line="11" pos:column="21">fname<pos:position pos:line="11" pos:column="26"/></name></expr></argument>, <argument><expr><operator pos:line="11" pos:column="28">&amp;<pos:position pos:line="11" pos:column="33"/></operator><name><name pos:line="11" pos:column="29">sx<pos:position pos:line="11" pos:column="31"/></name><operator pos:line="11" pos:column="31">.<pos:position pos:line="11" pos:column="32"/></operator><name pos:line="11" pos:column="32">st<pos:position pos:line="11" pos:column="34"/></name></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="36">NULL<pos:position pos:line="11" pos:column="40"/></name></expr></argument>)<pos:position pos:line="11" pos:column="41"/></argument_list></call> <operator pos:line="11" pos:column="42">&lt;<pos:position pos:line="11" pos:column="46"/></operator> <literal type="number" pos:line="11" pos:column="44">0<pos:position pos:line="11" pos:column="45"/></literal></expr>)<pos:position pos:line="11" pos:column="46"/></condition><then pos:line="11" pos:column="46">
		<block type="pseudo"><return pos:line="12" pos:column="17">return <expr><literal type="number" pos:line="12" pos:column="24">1<pos:position pos:line="12" pos:column="25"/></literal></expr>;<pos:position pos:line="12" pos:column="26"/></return></block></then></if>
<cpp:ifdef pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">ifdef<pos:position pos:line="13" pos:column="7"/></cpp:directive> <name pos:line="13" pos:column="8">SUPPORT_ACLS<pos:position pos:line="13" pos:column="20"/></name></cpp:ifdef>
	<expr_stmt><expr><name><name pos:line="14" pos:column="9">sx<pos:position pos:line="14" pos:column="11"/></name><operator pos:line="14" pos:column="11">.<pos:position pos:line="14" pos:column="12"/></operator><name pos:line="14" pos:column="12">acc_acl<pos:position pos:line="14" pos:column="19"/></name></name> <operator pos:line="14" pos:column="20">=<pos:position pos:line="14" pos:column="21"/></operator> <name><name pos:line="14" pos:column="22">sx<pos:position pos:line="14" pos:column="24"/></name><operator pos:line="14" pos:column="24">.<pos:position pos:line="14" pos:column="25"/></operator><name pos:line="14" pos:column="25">def_acl<pos:position pos:line="14" pos:column="32"/></name></name> <operator pos:line="14" pos:column="33">=<pos:position pos:line="14" pos:column="34"/></operator> <name pos:line="14" pos:column="35">NULL<pos:position pos:line="14" pos:column="39"/></name></expr>;<pos:position pos:line="14" pos:column="40"/></expr_stmt>
<cpp:endif pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">endif<pos:position pos:line="15" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:ifdef pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">ifdef<pos:position pos:line="16" pos:column="7"/></cpp:directive> <name pos:line="16" pos:column="8">SUPPORT_XATTRS<pos:position pos:line="16" pos:column="22"/></name></cpp:ifdef>
	<expr_stmt><expr><name><name pos:line="17" pos:column="9">sx<pos:position pos:line="17" pos:column="11"/></name><operator pos:line="17" pos:column="11">.<pos:position pos:line="17" pos:column="12"/></operator><name pos:line="17" pos:column="12">xattr<pos:position pos:line="17" pos:column="17"/></name></name> <operator pos:line="17" pos:column="18">=<pos:position pos:line="17" pos:column="19"/></operator> <name pos:line="17" pos:column="20">NULL<pos:position pos:line="17" pos:column="24"/></name></expr>;<pos:position pos:line="17" pos:column="25"/></expr_stmt>
<cpp:endif pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">endif<pos:position pos:line="18" pos:column="7"/></cpp:directive></cpp:endif>

	<if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><operator pos:line="20" pos:column="13">!<pos:position pos:line="20" pos:column="14"/></operator><operator pos:line="20" pos:column="14">(<pos:position pos:line="20" pos:column="15"/></operator><name pos:line="20" pos:column="15">file<pos:position pos:line="20" pos:column="19"/></name> <operator pos:line="20" pos:column="20">=<pos:position pos:line="20" pos:column="21"/></operator> <call><name pos:line="20" pos:column="22">make_file<pos:position pos:line="20" pos:column="31"/></name><argument_list pos:line="20" pos:column="31">(<argument><expr><name pos:line="20" pos:column="32">fname<pos:position pos:line="20" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="39">NULL<pos:position pos:line="20" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="45">NULL<pos:position pos:line="20" pos:column="49"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="20" pos:column="51">0<pos:position pos:line="20" pos:column="52"/></literal></expr></argument>, <argument><expr><name pos:line="20" pos:column="54">NO_FILTERS<pos:position pos:line="20" pos:column="64"/></name></expr></argument>)<pos:position pos:line="20" pos:column="65"/></argument_list></call><operator pos:line="20" pos:column="65">)<pos:position pos:line="20" pos:column="66"/></operator></expr>)<pos:position pos:line="20" pos:column="67"/></condition><then pos:line="20" pos:column="67">
		<block type="pseudo"><return pos:line="21" pos:column="17">return <expr><literal type="number" pos:line="21" pos:column="24">1<pos:position pos:line="21" pos:column="25"/></literal></expr>;<pos:position pos:line="21" pos:column="26"/></return></block></then></if> <comment type="block" pos:line="21" pos:column="27">/* the file could have disappeared */</comment>

	<if pos:line="23" pos:column="9">if <condition pos:line="23" pos:column="12">(<expr><operator pos:line="23" pos:column="13">!<pos:position pos:line="23" pos:column="14"/></operator><operator pos:line="23" pos:column="14">(<pos:position pos:line="23" pos:column="15"/></operator><name pos:line="23" pos:column="15">buf<pos:position pos:line="23" pos:column="18"/></name> <operator pos:line="23" pos:column="19">=<pos:position pos:line="23" pos:column="20"/></operator> <call><name pos:line="23" pos:column="21">get_backup_name<pos:position pos:line="23" pos:column="36"/></name><argument_list pos:line="23" pos:column="36">(<argument><expr><name pos:line="23" pos:column="37">fname<pos:position pos:line="23" pos:column="42"/></name></expr></argument>)<pos:position pos:line="23" pos:column="43"/></argument_list></call><operator pos:line="23" pos:column="43">)<pos:position pos:line="23" pos:column="44"/></operator></expr>)<pos:position pos:line="23" pos:column="45"/></condition><then pos:line="23" pos:column="45"> <block pos:line="23" pos:column="46">{
		<expr_stmt><expr><call><name pos:line="24" pos:column="17">unmake_file<pos:position pos:line="24" pos:column="28"/></name><argument_list pos:line="24" pos:column="28">(<argument><expr><name pos:line="24" pos:column="29">file<pos:position pos:line="24" pos:column="33"/></name></expr></argument>)<pos:position pos:line="24" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="35"/></expr_stmt>
<cpp:ifdef pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">ifdef<pos:position pos:line="25" pos:column="7"/></cpp:directive> <name pos:line="25" pos:column="8">SUPPORT_ACLS<pos:position pos:line="25" pos:column="20"/></name></cpp:ifdef>
		<expr_stmt><expr><call><name pos:line="26" pos:column="17">uncache_tmp_acls<pos:position pos:line="26" pos:column="33"/></name><argument_list pos:line="26" pos:column="33">()<pos:position pos:line="26" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="36"/></expr_stmt>
<cpp:endif pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">endif<pos:position pos:line="27" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:ifdef pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">ifdef<pos:position pos:line="28" pos:column="7"/></cpp:directive> <name pos:line="28" pos:column="8">SUPPORT_XATTRS<pos:position pos:line="28" pos:column="22"/></name></cpp:ifdef>
		<expr_stmt><expr><call><name pos:line="29" pos:column="17">uncache_tmp_xattrs<pos:position pos:line="29" pos:column="35"/></name><argument_list pos:line="29" pos:column="35">()<pos:position pos:line="29" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="38"/></expr_stmt>
<cpp:endif pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">endif<pos:position pos:line="30" pos:column="7"/></cpp:directive></cpp:endif>
		<return pos:line="31" pos:column="17">return <expr><literal type="number" pos:line="31" pos:column="24">0<pos:position pos:line="31" pos:column="25"/></literal></expr>;<pos:position pos:line="31" pos:column="26"/></return>
	}<pos:position pos:line="32" pos:column="10"/></block></then></if>

<cpp:ifdef pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">ifdef<pos:position pos:line="34" pos:column="7"/></cpp:directive> <name pos:line="34" pos:column="8">SUPPORT_ACLS<pos:position pos:line="34" pos:column="20"/></name></cpp:ifdef>
	<if pos:line="35" pos:column="9">if <condition pos:line="35" pos:column="12">(<expr><name pos:line="35" pos:column="13">preserve_acls<pos:position pos:line="35" pos:column="26"/></name> <operator pos:line="35" pos:column="27">&amp;&amp;<pos:position pos:line="35" pos:column="37"/></operator> <operator pos:line="35" pos:column="30">!<pos:position pos:line="35" pos:column="31"/></operator><call><name pos:line="35" pos:column="31">S_ISLNK<pos:position pos:line="35" pos:column="38"/></name><argument_list pos:line="35" pos:column="38">(<argument><expr><name><name pos:line="35" pos:column="39">file<pos:position pos:line="35" pos:column="43"/></name><operator pos:line="35" pos:column="43">-&gt;<pos:position pos:line="35" pos:column="48"/></operator><name pos:line="35" pos:column="45">mode<pos:position pos:line="35" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="35" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="35" pos:column="51"/></condition><then pos:line="35" pos:column="51"> <block pos:line="35" pos:column="52">{
		<expr_stmt><expr><call><name pos:line="36" pos:column="17">get_acl<pos:position pos:line="36" pos:column="24"/></name><argument_list pos:line="36" pos:column="24">(<argument><expr><name pos:line="36" pos:column="25">fname<pos:position pos:line="36" pos:column="30"/></name></expr></argument>, <argument><expr><operator pos:line="36" pos:column="32">&amp;<pos:position pos:line="36" pos:column="37"/></operator><name pos:line="36" pos:column="33">sx<pos:position pos:line="36" pos:column="35"/></name></expr></argument>)<pos:position pos:line="36" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="37"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="37" pos:column="17">cache_tmp_acl<pos:position pos:line="37" pos:column="30"/></name><argument_list pos:line="37" pos:column="30">(<argument><expr><name pos:line="37" pos:column="31">file<pos:position pos:line="37" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="37" pos:column="37">&amp;<pos:position pos:line="37" pos:column="42"/></operator><name pos:line="37" pos:column="38">sx<pos:position pos:line="37" pos:column="40"/></name></expr></argument>)<pos:position pos:line="37" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="42"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="38" pos:column="17">free_acl<pos:position pos:line="38" pos:column="25"/></name><argument_list pos:line="38" pos:column="25">(<argument><expr><operator pos:line="38" pos:column="26">&amp;<pos:position pos:line="38" pos:column="31"/></operator><name pos:line="38" pos:column="27">sx<pos:position pos:line="38" pos:column="29"/></name></expr></argument>)<pos:position pos:line="38" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="31"/></expr_stmt>
	}<pos:position pos:line="39" pos:column="10"/></block></then></if>
<cpp:endif pos:line="40" pos:column="1">#<cpp:directive pos:line="40" pos:column="2">endif<pos:position pos:line="40" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:ifdef pos:line="41" pos:column="1">#<cpp:directive pos:line="41" pos:column="2">ifdef<pos:position pos:line="41" pos:column="7"/></cpp:directive> <name pos:line="41" pos:column="8">SUPPORT_XATTRS<pos:position pos:line="41" pos:column="22"/></name></cpp:ifdef>
	<if pos:line="42" pos:column="9">if <condition pos:line="42" pos:column="12">(<expr><name pos:line="42" pos:column="13">preserve_xattrs<pos:position pos:line="42" pos:column="28"/></name></expr>)<pos:position pos:line="42" pos:column="29"/></condition><then pos:line="42" pos:column="29"> <block pos:line="42" pos:column="30">{
		<expr_stmt><expr><call><name pos:line="43" pos:column="17">get_xattr<pos:position pos:line="43" pos:column="26"/></name><argument_list pos:line="43" pos:column="26">(<argument><expr><name pos:line="43" pos:column="27">fname<pos:position pos:line="43" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="43" pos:column="34">&amp;<pos:position pos:line="43" pos:column="39"/></operator><name pos:line="43" pos:column="35">sx<pos:position pos:line="43" pos:column="37"/></name></expr></argument>)<pos:position pos:line="43" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="39"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="44" pos:column="17">cache_tmp_xattr<pos:position pos:line="44" pos:column="32"/></name><argument_list pos:line="44" pos:column="32">(<argument><expr><name pos:line="44" pos:column="33">file<pos:position pos:line="44" pos:column="37"/></name></expr></argument>, <argument><expr><operator pos:line="44" pos:column="39">&amp;<pos:position pos:line="44" pos:column="44"/></operator><name pos:line="44" pos:column="40">sx<pos:position pos:line="44" pos:column="42"/></name></expr></argument>)<pos:position pos:line="44" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="44"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="45" pos:column="17">free_xattr<pos:position pos:line="45" pos:column="27"/></name><argument_list pos:line="45" pos:column="27">(<argument><expr><operator pos:line="45" pos:column="28">&amp;<pos:position pos:line="45" pos:column="33"/></operator><name pos:line="45" pos:column="29">sx<pos:position pos:line="45" pos:column="31"/></name></expr></argument>)<pos:position pos:line="45" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="33"/></expr_stmt>
	}<pos:position pos:line="46" pos:column="10"/></block></then></if>
<cpp:endif pos:line="47" pos:column="1">#<cpp:directive pos:line="47" pos:column="2">endif<pos:position pos:line="47" pos:column="7"/></cpp:directive></cpp:endif>

	<comment type="block" pos:line="49" pos:column="9">/* Check to see if this is a device file, or link */</comment>
	<if pos:line="50" pos:column="9">if <condition pos:line="50" pos:column="12">(<expr><operator pos:line="50" pos:column="13">(<pos:position pos:line="50" pos:column="14"/></operator><name pos:line="50" pos:column="14">am_root<pos:position pos:line="50" pos:column="21"/></name> <operator pos:line="50" pos:column="22">&amp;&amp;<pos:position pos:line="50" pos:column="32"/></operator> <name pos:line="50" pos:column="25">preserve_devices<pos:position pos:line="50" pos:column="41"/></name> <operator pos:line="50" pos:column="42">&amp;&amp;<pos:position pos:line="50" pos:column="52"/></operator> <call><name pos:line="50" pos:column="45">IS_DEVICE<pos:position pos:line="50" pos:column="54"/></name><argument_list pos:line="50" pos:column="54">(<argument><expr><name><name pos:line="50" pos:column="55">file<pos:position pos:line="50" pos:column="59"/></name><operator pos:line="50" pos:column="59">-&gt;<pos:position pos:line="50" pos:column="64"/></operator><name pos:line="50" pos:column="61">mode<pos:position pos:line="50" pos:column="65"/></name></name></expr></argument>)<pos:position pos:line="50" pos:column="66"/></argument_list></call><operator pos:line="50" pos:column="66">)<pos:position pos:line="50" pos:column="67"/></operator>
	 <operator pos:line="51" pos:column="10">||<pos:position pos:line="51" pos:column="12"/></operator> <operator pos:line="51" pos:column="13">(<pos:position pos:line="51" pos:column="14"/></operator><name pos:line="51" pos:column="14">preserve_specials<pos:position pos:line="51" pos:column="31"/></name> <operator pos:line="51" pos:column="32">&amp;&amp;<pos:position pos:line="51" pos:column="42"/></operator> <call><name pos:line="51" pos:column="35">IS_SPECIAL<pos:position pos:line="51" pos:column="45"/></name><argument_list pos:line="51" pos:column="45">(<argument><expr><name><name pos:line="51" pos:column="46">file<pos:position pos:line="51" pos:column="50"/></name><operator pos:line="51" pos:column="50">-&gt;<pos:position pos:line="51" pos:column="55"/></operator><name pos:line="51" pos:column="52">mode<pos:position pos:line="51" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="51" pos:column="57"/></argument_list></call><operator pos:line="51" pos:column="57">)<pos:position pos:line="51" pos:column="58"/></operator></expr>)<pos:position pos:line="51" pos:column="59"/></condition><then pos:line="51" pos:column="59"> <block pos:line="51" pos:column="60">{
		<decl_stmt><decl><type><name pos:line="52" pos:column="17">int<pos:position pos:line="52" pos:column="20"/></name></type> <name pos:line="52" pos:column="21">save_errno<pos:position pos:line="52" pos:column="31"/></name></decl>;<pos:position pos:line="52" pos:column="32"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="53" pos:column="17">do_unlink<pos:position pos:line="53" pos:column="26"/></name><argument_list pos:line="53" pos:column="26">(<argument><expr><name pos:line="53" pos:column="27">buf<pos:position pos:line="53" pos:column="30"/></name></expr></argument>)<pos:position pos:line="53" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="32"/></expr_stmt>
		<if pos:line="54" pos:column="17">if <condition pos:line="54" pos:column="20">(<expr><call><name pos:line="54" pos:column="21">do_mknod<pos:position pos:line="54" pos:column="29"/></name><argument_list pos:line="54" pos:column="29">(<argument><expr><name pos:line="54" pos:column="30">buf<pos:position pos:line="54" pos:column="33"/></name></expr></argument>, <argument><expr><name><name pos:line="54" pos:column="35">file<pos:position pos:line="54" pos:column="39"/></name><operator pos:line="54" pos:column="39">-&gt;<pos:position pos:line="54" pos:column="44"/></operator><name pos:line="54" pos:column="41">mode<pos:position pos:line="54" pos:column="45"/></name></name></expr></argument>, <argument><expr><name><name pos:line="54" pos:column="47">sx<pos:position pos:line="54" pos:column="49"/></name><operator pos:line="54" pos:column="49">.<pos:position pos:line="54" pos:column="50"/></operator><name pos:line="54" pos:column="50">st<pos:position pos:line="54" pos:column="52"/></name><operator pos:line="54" pos:column="52">.<pos:position pos:line="54" pos:column="53"/></operator><name pos:line="54" pos:column="53">st_rdev<pos:position pos:line="54" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="54" pos:column="61"/></argument_list></call> <operator pos:line="54" pos:column="62">&lt;<pos:position pos:line="54" pos:column="66"/></operator> <literal type="number" pos:line="54" pos:column="64">0<pos:position pos:line="54" pos:column="65"/></literal></expr>)<pos:position pos:line="54" pos:column="66"/></condition><then pos:line="54" pos:column="66"> <block pos:line="54" pos:column="67">{
			<expr_stmt><expr><name pos:line="55" pos:column="25">save_errno<pos:position pos:line="55" pos:column="35"/></name> <operator pos:line="55" pos:column="36">=<pos:position pos:line="55" pos:column="37"/></operator> <ternary><condition><expr><name pos:line="55" pos:column="38">errno<pos:position pos:line="55" pos:column="43"/></name></expr> ?<pos:position pos:line="55" pos:column="45"/></condition><then pos:line="55" pos:column="45"> <expr><name pos:line="55" pos:column="46">errno<pos:position pos:line="55" pos:column="51"/></name></expr> <pos:position pos:line="55" pos:column="52"/></then><else pos:line="55" pos:column="52">: <expr><name pos:line="55" pos:column="54">EINVAL<pos:position pos:line="55" pos:column="60"/></name></expr></else></ternary></expr>;<pos:position pos:line="55" pos:column="61"/></expr_stmt> <comment type="block" pos:line="55" pos:column="62">/* 0 paranoia */</comment>
			<if pos:line="56" pos:column="25">if <condition pos:line="56" pos:column="28">(<expr><name pos:line="56" pos:column="29">errno<pos:position pos:line="56" pos:column="34"/></name> <operator pos:line="56" pos:column="35">==<pos:position pos:line="56" pos:column="37"/></operator> <name pos:line="56" pos:column="38">ENOENT<pos:position pos:line="56" pos:column="44"/></name> <operator pos:line="56" pos:column="45">&amp;&amp;<pos:position pos:line="56" pos:column="55"/></operator> <call><name pos:line="56" pos:column="48">make_bak_dir<pos:position pos:line="56" pos:column="60"/></name><argument_list pos:line="56" pos:column="60">(<argument><expr><name pos:line="56" pos:column="61">buf<pos:position pos:line="56" pos:column="64"/></name></expr></argument>)<pos:position pos:line="56" pos:column="65"/></argument_list></call> <operator pos:line="56" pos:column="66">==<pos:position pos:line="56" pos:column="68"/></operator> <literal type="number" pos:line="56" pos:column="69">0<pos:position pos:line="56" pos:column="70"/></literal></expr>)<pos:position pos:line="56" pos:column="71"/></condition><then pos:line="56" pos:column="71"> <block pos:line="56" pos:column="72">{
				<if pos:line="57" pos:column="33">if <condition pos:line="57" pos:column="36">(<expr><call><name pos:line="57" pos:column="37">do_mknod<pos:position pos:line="57" pos:column="45"/></name><argument_list pos:line="57" pos:column="45">(<argument><expr><name pos:line="57" pos:column="46">buf<pos:position pos:line="57" pos:column="49"/></name></expr></argument>, <argument><expr><name><name pos:line="57" pos:column="51">file<pos:position pos:line="57" pos:column="55"/></name><operator pos:line="57" pos:column="55">-&gt;<pos:position pos:line="57" pos:column="60"/></operator><name pos:line="57" pos:column="57">mode<pos:position pos:line="57" pos:column="61"/></name></name></expr></argument>, <argument><expr><name><name pos:line="57" pos:column="63">sx<pos:position pos:line="57" pos:column="65"/></name><operator pos:line="57" pos:column="65">.<pos:position pos:line="57" pos:column="66"/></operator><name pos:line="57" pos:column="66">st<pos:position pos:line="57" pos:column="68"/></name><operator pos:line="57" pos:column="68">.<pos:position pos:line="57" pos:column="69"/></operator><name pos:line="57" pos:column="69">st_rdev<pos:position pos:line="57" pos:column="76"/></name></name></expr></argument>)<pos:position pos:line="57" pos:column="77"/></argument_list></call> <operator pos:line="57" pos:column="78">&lt;<pos:position pos:line="57" pos:column="82"/></operator> <literal type="number" pos:line="57" pos:column="80">0<pos:position pos:line="57" pos:column="81"/></literal></expr>)<pos:position pos:line="57" pos:column="82"/></condition><then pos:line="57" pos:column="82">
					<block type="pseudo"><expr_stmt><expr><name pos:line="58" pos:column="41">save_errno<pos:position pos:line="58" pos:column="51"/></name> <operator pos:line="58" pos:column="52">=<pos:position pos:line="58" pos:column="53"/></operator> <ternary><condition><expr><name pos:line="58" pos:column="54">errno<pos:position pos:line="58" pos:column="59"/></name></expr> ?<pos:position pos:line="58" pos:column="61"/></condition><then pos:line="58" pos:column="61"> <expr><name pos:line="58" pos:column="62">errno<pos:position pos:line="58" pos:column="67"/></name></expr> <pos:position pos:line="58" pos:column="68"/></then><else pos:line="58" pos:column="68">: <expr><name pos:line="58" pos:column="70">save_errno<pos:position pos:line="58" pos:column="80"/></name></expr></else></ternary></expr>;<pos:position pos:line="58" pos:column="81"/></expr_stmt></block></then>
				<else pos:line="59" pos:column="33">else
					<block type="pseudo"><expr_stmt><expr><name pos:line="60" pos:column="41">save_errno<pos:position pos:line="60" pos:column="51"/></name> <operator pos:line="60" pos:column="52">=<pos:position pos:line="60" pos:column="53"/></operator> <literal type="number" pos:line="60" pos:column="54">0<pos:position pos:line="60" pos:column="55"/></literal></expr>;<pos:position pos:line="60" pos:column="56"/></expr_stmt></block></else></if>
			}<pos:position pos:line="61" pos:column="26"/></block></then></if>
			<if pos:line="62" pos:column="25">if <condition pos:line="62" pos:column="28">(<expr><name pos:line="62" pos:column="29">save_errno<pos:position pos:line="62" pos:column="39"/></name></expr>)<pos:position pos:line="62" pos:column="40"/></condition><then pos:line="62" pos:column="40"> <block pos:line="62" pos:column="41">{
				<expr_stmt><expr><call><name pos:line="63" pos:column="33">rsyserr<pos:position pos:line="63" pos:column="40"/></name><argument_list pos:line="63" pos:column="40">(<argument><expr><name pos:line="63" pos:column="41">FERROR<pos:position pos:line="63" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="63" pos:column="49">save_errno<pos:position pos:line="63" pos:column="59"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="63" pos:column="61">"mknod %s failed"<pos:position pos:line="63" pos:column="78"/></literal></expr></argument>,
					<argument><expr><call><name pos:line="64" pos:column="41">full_fname<pos:position pos:line="64" pos:column="51"/></name><argument_list pos:line="64" pos:column="51">(<argument><expr><name pos:line="64" pos:column="52">buf<pos:position pos:line="64" pos:column="55"/></name></expr></argument>)<pos:position pos:line="64" pos:column="56"/></argument_list></call></expr></argument>)<pos:position pos:line="64" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="58"/></expr_stmt>
			}<pos:position pos:line="65" pos:column="26"/></block></then></if>
		}<pos:position pos:line="66" pos:column="18"/></block></then> <else pos:line="66" pos:column="19">else
			<block type="pseudo"><expr_stmt><expr><name pos:line="67" pos:column="25">save_errno<pos:position pos:line="67" pos:column="35"/></name> <operator pos:line="67" pos:column="36">=<pos:position pos:line="67" pos:column="37"/></operator> <literal type="number" pos:line="67" pos:column="38">0<pos:position pos:line="67" pos:column="39"/></literal></expr>;<pos:position pos:line="67" pos:column="40"/></expr_stmt></block></else></if>
		<if pos:line="68" pos:column="17">if <condition pos:line="68" pos:column="20">(<expr><name pos:line="68" pos:column="21">verbose<pos:position pos:line="68" pos:column="28"/></name> <operator pos:line="68" pos:column="29">&gt;<pos:position pos:line="68" pos:column="33"/></operator> <literal type="number" pos:line="68" pos:column="31">2<pos:position pos:line="68" pos:column="32"/></literal> <operator pos:line="68" pos:column="33">&amp;&amp;<pos:position pos:line="68" pos:column="43"/></operator> <name pos:line="68" pos:column="36">save_errno<pos:position pos:line="68" pos:column="46"/></name> <operator pos:line="68" pos:column="47">==<pos:position pos:line="68" pos:column="49"/></operator> <literal type="number" pos:line="68" pos:column="50">0<pos:position pos:line="68" pos:column="51"/></literal></expr>)<pos:position pos:line="68" pos:column="52"/></condition><then pos:line="68" pos:column="52"> <block pos:line="68" pos:column="53">{
			<expr_stmt><expr><call><name pos:line="69" pos:column="25">rprintf<pos:position pos:line="69" pos:column="32"/></name><argument_list pos:line="69" pos:column="32">(<argument><expr><name pos:line="69" pos:column="33">FINFO<pos:position pos:line="69" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="69" pos:column="40">"make_backup: DEVICE %s successful.\n"<pos:position pos:line="69" pos:column="78"/></literal></expr></argument>,
				<argument><expr><name pos:line="70" pos:column="33">fname<pos:position pos:line="70" pos:column="38"/></name></expr></argument>)<pos:position pos:line="70" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="40"/></expr_stmt>
		}<pos:position pos:line="71" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name pos:line="72" pos:column="17">kept<pos:position pos:line="72" pos:column="21"/></name> <operator pos:line="72" pos:column="22">=<pos:position pos:line="72" pos:column="23"/></operator> <literal type="number" pos:line="72" pos:column="24">1<pos:position pos:line="72" pos:column="25"/></literal></expr>;<pos:position pos:line="72" pos:column="26"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="73" pos:column="17">do_unlink<pos:position pos:line="73" pos:column="26"/></name><argument_list pos:line="73" pos:column="26">(<argument><expr><name pos:line="73" pos:column="27">fname<pos:position pos:line="73" pos:column="32"/></name></expr></argument>)<pos:position pos:line="73" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="34"/></expr_stmt>
	}<pos:position pos:line="74" pos:column="10"/></block></then></if>

	<if pos:line="76" pos:column="9">if <condition pos:line="76" pos:column="12">(<expr><operator pos:line="76" pos:column="13">!<pos:position pos:line="76" pos:column="14"/></operator><name pos:line="76" pos:column="14">kept<pos:position pos:line="76" pos:column="18"/></name> <operator pos:line="76" pos:column="19">&amp;&amp;<pos:position pos:line="76" pos:column="29"/></operator> <call><name pos:line="76" pos:column="22">S_ISDIR<pos:position pos:line="76" pos:column="29"/></name><argument_list pos:line="76" pos:column="29">(<argument><expr><name><name pos:line="76" pos:column="30">file<pos:position pos:line="76" pos:column="34"/></name><operator pos:line="76" pos:column="34">-&gt;<pos:position pos:line="76" pos:column="39"/></operator><name pos:line="76" pos:column="36">mode<pos:position pos:line="76" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="76" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="76" pos:column="42"/></condition><then pos:line="76" pos:column="42"> <block pos:line="76" pos:column="43">{
		<comment type="block" pos:line="77" pos:column="17">/* make an empty directory */</comment>
		<if pos:line="78" pos:column="17">if <condition pos:line="78" pos:column="20">(<expr><call><name pos:line="78" pos:column="21">do_mkdir<pos:position pos:line="78" pos:column="29"/></name><argument_list pos:line="78" pos:column="29">(<argument><expr><name pos:line="78" pos:column="30">buf<pos:position pos:line="78" pos:column="33"/></name></expr></argument>, <argument><expr><name><name pos:line="78" pos:column="35">file<pos:position pos:line="78" pos:column="39"/></name><operator pos:line="78" pos:column="39">-&gt;<pos:position pos:line="78" pos:column="44"/></operator><name pos:line="78" pos:column="41">mode<pos:position pos:line="78" pos:column="45"/></name></name></expr></argument>)<pos:position pos:line="78" pos:column="46"/></argument_list></call> <operator pos:line="78" pos:column="47">&lt;<pos:position pos:line="78" pos:column="51"/></operator> <literal type="number" pos:line="78" pos:column="49">0<pos:position pos:line="78" pos:column="50"/></literal></expr>)<pos:position pos:line="78" pos:column="51"/></condition><then pos:line="78" pos:column="51"> <block pos:line="78" pos:column="52">{
			<decl_stmt><decl><type><name pos:line="79" pos:column="25">int<pos:position pos:line="79" pos:column="28"/></name></type> <name pos:line="79" pos:column="29">save_errno<pos:position pos:line="79" pos:column="39"/></name> <init pos:line="79" pos:column="40">= <expr><ternary><condition><expr><name pos:line="79" pos:column="42">errno<pos:position pos:line="79" pos:column="47"/></name></expr> ?<pos:position pos:line="79" pos:column="49"/></condition><then pos:line="79" pos:column="49"> <expr><name pos:line="79" pos:column="50">errno<pos:position pos:line="79" pos:column="55"/></name></expr> <pos:position pos:line="79" pos:column="56"/></then><else pos:line="79" pos:column="56">: <expr><name pos:line="79" pos:column="58">EINVAL<pos:position pos:line="79" pos:column="64"/></name></expr></else></ternary></expr></init></decl>;<pos:position pos:line="79" pos:column="65"/></decl_stmt> <comment type="block" pos:line="79" pos:column="66">/* 0 paranoia */</comment>
			<if pos:line="80" pos:column="25">if <condition pos:line="80" pos:column="28">(<expr><name pos:line="80" pos:column="29">errno<pos:position pos:line="80" pos:column="34"/></name> <operator pos:line="80" pos:column="35">==<pos:position pos:line="80" pos:column="37"/></operator> <name pos:line="80" pos:column="38">ENOENT<pos:position pos:line="80" pos:column="44"/></name> <operator pos:line="80" pos:column="45">&amp;&amp;<pos:position pos:line="80" pos:column="55"/></operator> <call><name pos:line="80" pos:column="48">make_bak_dir<pos:position pos:line="80" pos:column="60"/></name><argument_list pos:line="80" pos:column="60">(<argument><expr><name pos:line="80" pos:column="61">buf<pos:position pos:line="80" pos:column="64"/></name></expr></argument>)<pos:position pos:line="80" pos:column="65"/></argument_list></call> <operator pos:line="80" pos:column="66">==<pos:position pos:line="80" pos:column="68"/></operator> <literal type="number" pos:line="80" pos:column="69">0<pos:position pos:line="80" pos:column="70"/></literal></expr>)<pos:position pos:line="80" pos:column="71"/></condition><then pos:line="80" pos:column="71"> <block pos:line="80" pos:column="72">{
				<if pos:line="81" pos:column="33">if <condition pos:line="81" pos:column="36">(<expr><call><name pos:line="81" pos:column="37">do_mkdir<pos:position pos:line="81" pos:column="45"/></name><argument_list pos:line="81" pos:column="45">(<argument><expr><name pos:line="81" pos:column="46">buf<pos:position pos:line="81" pos:column="49"/></name></expr></argument>, <argument><expr><name><name pos:line="81" pos:column="51">file<pos:position pos:line="81" pos:column="55"/></name><operator pos:line="81" pos:column="55">-&gt;<pos:position pos:line="81" pos:column="60"/></operator><name pos:line="81" pos:column="57">mode<pos:position pos:line="81" pos:column="61"/></name></name></expr></argument>)<pos:position pos:line="81" pos:column="62"/></argument_list></call> <operator pos:line="81" pos:column="63">&lt;<pos:position pos:line="81" pos:column="67"/></operator> <literal type="number" pos:line="81" pos:column="65">0<pos:position pos:line="81" pos:column="66"/></literal></expr>)<pos:position pos:line="81" pos:column="67"/></condition><then pos:line="81" pos:column="67">
					<block type="pseudo"><expr_stmt><expr><name pos:line="82" pos:column="41">save_errno<pos:position pos:line="82" pos:column="51"/></name> <operator pos:line="82" pos:column="52">=<pos:position pos:line="82" pos:column="53"/></operator> <ternary><condition><expr><name pos:line="82" pos:column="54">errno<pos:position pos:line="82" pos:column="59"/></name></expr> ?<pos:position pos:line="82" pos:column="61"/></condition><then pos:line="82" pos:column="61"> <expr><name pos:line="82" pos:column="62">errno<pos:position pos:line="82" pos:column="67"/></name></expr> <pos:position pos:line="82" pos:column="68"/></then><else pos:line="82" pos:column="68">: <expr><name pos:line="82" pos:column="70">save_errno<pos:position pos:line="82" pos:column="80"/></name></expr></else></ternary></expr>;<pos:position pos:line="82" pos:column="81"/></expr_stmt></block></then>
				<else pos:line="83" pos:column="33">else
					<block type="pseudo"><expr_stmt><expr><name pos:line="84" pos:column="41">save_errno<pos:position pos:line="84" pos:column="51"/></name> <operator pos:line="84" pos:column="52">=<pos:position pos:line="84" pos:column="53"/></operator> <literal type="number" pos:line="84" pos:column="54">0<pos:position pos:line="84" pos:column="55"/></literal></expr>;<pos:position pos:line="84" pos:column="56"/></expr_stmt></block></else></if>
			}<pos:position pos:line="85" pos:column="26"/></block></then></if>
			<if pos:line="86" pos:column="25">if <condition pos:line="86" pos:column="28">(<expr><name pos:line="86" pos:column="29">save_errno<pos:position pos:line="86" pos:column="39"/></name></expr>)<pos:position pos:line="86" pos:column="40"/></condition><then pos:line="86" pos:column="40"> <block pos:line="86" pos:column="41">{
				<expr_stmt><expr><call><name pos:line="87" pos:column="33">rsyserr<pos:position pos:line="87" pos:column="40"/></name><argument_list pos:line="87" pos:column="40">(<argument><expr><name pos:line="87" pos:column="41">FINFO<pos:position pos:line="87" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="87" pos:column="48">save_errno<pos:position pos:line="87" pos:column="58"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="87" pos:column="60">"mkdir %s failed"<pos:position pos:line="87" pos:column="77"/></literal></expr></argument>,
					<argument><expr><call><name pos:line="88" pos:column="41">full_fname<pos:position pos:line="88" pos:column="51"/></name><argument_list pos:line="88" pos:column="51">(<argument><expr><name pos:line="88" pos:column="52">buf<pos:position pos:line="88" pos:column="55"/></name></expr></argument>)<pos:position pos:line="88" pos:column="56"/></argument_list></call></expr></argument>)<pos:position pos:line="88" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="58"/></expr_stmt>
			}<pos:position pos:line="89" pos:column="26"/></block></then></if>
		}<pos:position pos:line="90" pos:column="18"/></block></then></if>

		<expr_stmt><expr><name pos:line="92" pos:column="17">ret_code<pos:position pos:line="92" pos:column="25"/></name> <operator pos:line="92" pos:column="26">=<pos:position pos:line="92" pos:column="27"/></operator> <call><name pos:line="92" pos:column="28">do_rmdir<pos:position pos:line="92" pos:column="36"/></name><argument_list pos:line="92" pos:column="36">(<argument><expr><name pos:line="92" pos:column="37">fname<pos:position pos:line="92" pos:column="42"/></name></expr></argument>)<pos:position pos:line="92" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="44"/></expr_stmt>
		<if pos:line="93" pos:column="17">if <condition pos:line="93" pos:column="20">(<expr><name pos:line="93" pos:column="21">verbose<pos:position pos:line="93" pos:column="28"/></name> <operator pos:line="93" pos:column="29">&gt;<pos:position pos:line="93" pos:column="33"/></operator> <literal type="number" pos:line="93" pos:column="31">2<pos:position pos:line="93" pos:column="32"/></literal></expr>)<pos:position pos:line="93" pos:column="33"/></condition><then pos:line="93" pos:column="33"> <block pos:line="93" pos:column="34">{
			<expr_stmt><expr><call><name pos:line="94" pos:column="25">rprintf<pos:position pos:line="94" pos:column="32"/></name><argument_list pos:line="94" pos:column="32">(<argument><expr><name pos:line="94" pos:column="33">FINFO<pos:position pos:line="94" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="94" pos:column="40">"make_backup: RMDIR %s returns %i\n"<pos:position pos:line="94" pos:column="76"/></literal></expr></argument>,
				<argument><expr><call><name pos:line="95" pos:column="33">full_fname<pos:position pos:line="95" pos:column="43"/></name><argument_list pos:line="95" pos:column="43">(<argument><expr><name pos:line="95" pos:column="44">fname<pos:position pos:line="95" pos:column="49"/></name></expr></argument>)<pos:position pos:line="95" pos:column="50"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="95" pos:column="52">ret_code<pos:position pos:line="95" pos:column="60"/></name></expr></argument>)<pos:position pos:line="95" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="62"/></expr_stmt>
		}<pos:position pos:line="96" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name pos:line="97" pos:column="17">kept<pos:position pos:line="97" pos:column="21"/></name> <operator pos:line="97" pos:column="22">=<pos:position pos:line="97" pos:column="23"/></operator> <literal type="number" pos:line="97" pos:column="24">1<pos:position pos:line="97" pos:column="25"/></literal></expr>;<pos:position pos:line="97" pos:column="26"/></expr_stmt>
	}<pos:position pos:line="98" pos:column="10"/></block></then></if>

<cpp:ifdef pos:line="100" pos:column="1">#<cpp:directive pos:line="100" pos:column="2">ifdef<pos:position pos:line="100" pos:column="7"/></cpp:directive> <name pos:line="100" pos:column="8">SUPPORT_LINKS<pos:position pos:line="100" pos:column="21"/></name></cpp:ifdef>
	<if pos:line="101" pos:column="9">if <condition pos:line="101" pos:column="12">(<expr><operator pos:line="101" pos:column="13">!<pos:position pos:line="101" pos:column="14"/></operator><name pos:line="101" pos:column="14">kept<pos:position pos:line="101" pos:column="18"/></name> <operator pos:line="101" pos:column="19">&amp;&amp;<pos:position pos:line="101" pos:column="29"/></operator> <name pos:line="101" pos:column="22">preserve_links<pos:position pos:line="101" pos:column="36"/></name> <operator pos:line="101" pos:column="37">&amp;&amp;<pos:position pos:line="101" pos:column="47"/></operator> <call><name pos:line="101" pos:column="40">S_ISLNK<pos:position pos:line="101" pos:column="47"/></name><argument_list pos:line="101" pos:column="47">(<argument><expr><name><name pos:line="101" pos:column="48">file<pos:position pos:line="101" pos:column="52"/></name><operator pos:line="101" pos:column="52">-&gt;<pos:position pos:line="101" pos:column="57"/></operator><name pos:line="101" pos:column="54">mode<pos:position pos:line="101" pos:column="58"/></name></name></expr></argument>)<pos:position pos:line="101" pos:column="59"/></argument_list></call></expr>)<pos:position pos:line="101" pos:column="60"/></condition><then pos:line="101" pos:column="60"> <block pos:line="101" pos:column="61">{
		<decl_stmt><decl><type><specifier pos:line="102" pos:column="17">const<pos:position pos:line="102" pos:column="22"/></specifier> <name pos:line="102" pos:column="23">char<pos:position pos:line="102" pos:column="27"/></name> <modifier pos:line="102" pos:column="28">*<pos:position pos:line="102" pos:column="29"/></modifier></type><name pos:line="102" pos:column="29">sl<pos:position pos:line="102" pos:column="31"/></name> <init pos:line="102" pos:column="32">= <expr><call><name pos:line="102" pos:column="34">F_SYMLINK<pos:position pos:line="102" pos:column="43"/></name><argument_list pos:line="102" pos:column="43">(<argument><expr><name pos:line="102" pos:column="44">file<pos:position pos:line="102" pos:column="48"/></name></expr></argument>)<pos:position pos:line="102" pos:column="49"/></argument_list></call></expr></init></decl>;<pos:position pos:line="102" pos:column="50"/></decl_stmt>
		<if pos:line="103" pos:column="17">if <condition pos:line="103" pos:column="20">(<expr><name pos:line="103" pos:column="21">safe_symlinks<pos:position pos:line="103" pos:column="34"/></name> <operator pos:line="103" pos:column="35">&amp;&amp;<pos:position pos:line="103" pos:column="45"/></operator> <call><name pos:line="103" pos:column="38">unsafe_symlink<pos:position pos:line="103" pos:column="52"/></name><argument_list pos:line="103" pos:column="52">(<argument><expr><name pos:line="103" pos:column="53">sl<pos:position pos:line="103" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="103" pos:column="57">fname<pos:position pos:line="103" pos:column="62"/></name></expr></argument>)<pos:position pos:line="103" pos:column="63"/></argument_list></call></expr>)<pos:position pos:line="103" pos:column="64"/></condition><then pos:line="103" pos:column="64"> <block pos:line="103" pos:column="65">{
			<if pos:line="104" pos:column="25">if <condition pos:line="104" pos:column="28">(<expr><name pos:line="104" pos:column="29">verbose<pos:position pos:line="104" pos:column="36"/></name></expr>)<pos:position pos:line="104" pos:column="37"/></condition><then pos:line="104" pos:column="37"> <block pos:line="104" pos:column="38">{
				<expr_stmt><expr><call><name pos:line="105" pos:column="33">rprintf<pos:position pos:line="105" pos:column="40"/></name><argument_list pos:line="105" pos:column="40">(<argument><expr><name pos:line="105" pos:column="41">FINFO<pos:position pos:line="105" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="105" pos:column="48">"not backing up unsafe symlink \"%s\" -&gt; \"%s\"\n"<pos:position pos:line="105" pos:column="101"/></literal></expr></argument>,
					<argument><expr><name pos:line="106" pos:column="41">fname<pos:position pos:line="106" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="106" pos:column="48">sl<pos:position pos:line="106" pos:column="50"/></name></expr></argument>)<pos:position pos:line="106" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="106" pos:column="52"/></expr_stmt>
			}<pos:position pos:line="107" pos:column="26"/></block></then></if>
			<expr_stmt><expr><name pos:line="108" pos:column="25">kept<pos:position pos:line="108" pos:column="29"/></name> <operator pos:line="108" pos:column="30">=<pos:position pos:line="108" pos:column="31"/></operator> <literal type="number" pos:line="108" pos:column="32">1<pos:position pos:line="108" pos:column="33"/></literal></expr>;<pos:position pos:line="108" pos:column="34"/></expr_stmt>
		}<pos:position pos:line="109" pos:column="18"/></block></then> <else pos:line="109" pos:column="19">else <block pos:line="109" pos:column="24">{
			<expr_stmt><expr><call><name pos:line="110" pos:column="25">do_unlink<pos:position pos:line="110" pos:column="34"/></name><argument_list pos:line="110" pos:column="34">(<argument><expr><name pos:line="110" pos:column="35">buf<pos:position pos:line="110" pos:column="38"/></name></expr></argument>)<pos:position pos:line="110" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="110" pos:column="40"/></expr_stmt>
			<if pos:line="111" pos:column="25">if <condition pos:line="111" pos:column="28">(<expr><call><name pos:line="111" pos:column="29">do_symlink<pos:position pos:line="111" pos:column="39"/></name><argument_list pos:line="111" pos:column="39">(<argument><expr><name pos:line="111" pos:column="40">sl<pos:position pos:line="111" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="111" pos:column="44">buf<pos:position pos:line="111" pos:column="47"/></name></expr></argument>)<pos:position pos:line="111" pos:column="48"/></argument_list></call> <operator pos:line="111" pos:column="49">&lt;<pos:position pos:line="111" pos:column="53"/></operator> <literal type="number" pos:line="111" pos:column="51">0<pos:position pos:line="111" pos:column="52"/></literal></expr>)<pos:position pos:line="111" pos:column="53"/></condition><then pos:line="111" pos:column="53"> <block pos:line="111" pos:column="54">{
				<decl_stmt><decl><type><name pos:line="112" pos:column="33">int<pos:position pos:line="112" pos:column="36"/></name></type> <name pos:line="112" pos:column="37">save_errno<pos:position pos:line="112" pos:column="47"/></name> <init pos:line="112" pos:column="48">= <expr><ternary><condition><expr><name pos:line="112" pos:column="50">errno<pos:position pos:line="112" pos:column="55"/></name></expr> ?<pos:position pos:line="112" pos:column="57"/></condition><then pos:line="112" pos:column="57"> <expr><name pos:line="112" pos:column="58">errno<pos:position pos:line="112" pos:column="63"/></name></expr> <pos:position pos:line="112" pos:column="64"/></then><else pos:line="112" pos:column="64">: <expr><name pos:line="112" pos:column="66">EINVAL<pos:position pos:line="112" pos:column="72"/></name></expr></else></ternary></expr></init></decl>;<pos:position pos:line="112" pos:column="73"/></decl_stmt> <comment type="block" pos:line="112" pos:column="74">/* 0 paranoia */</comment>
				<if pos:line="113" pos:column="33">if <condition pos:line="113" pos:column="36">(<expr><name pos:line="113" pos:column="37">errno<pos:position pos:line="113" pos:column="42"/></name> <operator pos:line="113" pos:column="43">==<pos:position pos:line="113" pos:column="45"/></operator> <name pos:line="113" pos:column="46">ENOENT<pos:position pos:line="113" pos:column="52"/></name> <operator pos:line="113" pos:column="53">&amp;&amp;<pos:position pos:line="113" pos:column="63"/></operator> <call><name pos:line="113" pos:column="56">make_bak_dir<pos:position pos:line="113" pos:column="68"/></name><argument_list pos:line="113" pos:column="68">(<argument><expr><name pos:line="113" pos:column="69">buf<pos:position pos:line="113" pos:column="72"/></name></expr></argument>)<pos:position pos:line="113" pos:column="73"/></argument_list></call> <operator pos:line="113" pos:column="74">==<pos:position pos:line="113" pos:column="76"/></operator> <literal type="number" pos:line="113" pos:column="77">0<pos:position pos:line="113" pos:column="78"/></literal></expr>)<pos:position pos:line="113" pos:column="79"/></condition><then pos:line="113" pos:column="79"> <block pos:line="113" pos:column="80">{
					<if pos:line="114" pos:column="41">if <condition pos:line="114" pos:column="44">(<expr><call><name pos:line="114" pos:column="45">do_symlink<pos:position pos:line="114" pos:column="55"/></name><argument_list pos:line="114" pos:column="55">(<argument><expr><name pos:line="114" pos:column="56">sl<pos:position pos:line="114" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="114" pos:column="60">buf<pos:position pos:line="114" pos:column="63"/></name></expr></argument>)<pos:position pos:line="114" pos:column="64"/></argument_list></call> <operator pos:line="114" pos:column="65">&lt;<pos:position pos:line="114" pos:column="69"/></operator> <literal type="number" pos:line="114" pos:column="67">0<pos:position pos:line="114" pos:column="68"/></literal></expr>)<pos:position pos:line="114" pos:column="69"/></condition><then pos:line="114" pos:column="69">
						<block type="pseudo"><expr_stmt><expr><name pos:line="115" pos:column="49">save_errno<pos:position pos:line="115" pos:column="59"/></name> <operator pos:line="115" pos:column="60">=<pos:position pos:line="115" pos:column="61"/></operator> <ternary><condition><expr><name pos:line="115" pos:column="62">errno<pos:position pos:line="115" pos:column="67"/></name></expr> ?<pos:position pos:line="115" pos:column="69"/></condition><then pos:line="115" pos:column="69"> <expr><name pos:line="115" pos:column="70">errno<pos:position pos:line="115" pos:column="75"/></name></expr> <pos:position pos:line="115" pos:column="76"/></then><else pos:line="115" pos:column="76">: <expr><name pos:line="115" pos:column="78">save_errno<pos:position pos:line="115" pos:column="88"/></name></expr></else></ternary></expr>;<pos:position pos:line="115" pos:column="89"/></expr_stmt></block></then>
					<else pos:line="116" pos:column="41">else
						<block type="pseudo"><expr_stmt><expr><name pos:line="117" pos:column="49">save_errno<pos:position pos:line="117" pos:column="59"/></name> <operator pos:line="117" pos:column="60">=<pos:position pos:line="117" pos:column="61"/></operator> <literal type="number" pos:line="117" pos:column="62">0<pos:position pos:line="117" pos:column="63"/></literal></expr>;<pos:position pos:line="117" pos:column="64"/></expr_stmt></block></else></if>
				}<pos:position pos:line="118" pos:column="34"/></block></then></if>
				<if pos:line="119" pos:column="33">if <condition pos:line="119" pos:column="36">(<expr><name pos:line="119" pos:column="37">save_errno<pos:position pos:line="119" pos:column="47"/></name></expr>)<pos:position pos:line="119" pos:column="48"/></condition><then pos:line="119" pos:column="48"> <block pos:line="119" pos:column="49">{
					<expr_stmt><expr><call><name pos:line="120" pos:column="41">rsyserr<pos:position pos:line="120" pos:column="48"/></name><argument_list pos:line="120" pos:column="48">(<argument><expr><name pos:line="120" pos:column="49">FERROR<pos:position pos:line="120" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="120" pos:column="57">save_errno<pos:position pos:line="120" pos:column="67"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="120" pos:column="69">"link %s -&gt; \"%s\""<pos:position pos:line="120" pos:column="91"/></literal></expr></argument>,
						<argument><expr><call><name pos:line="121" pos:column="49">full_fname<pos:position pos:line="121" pos:column="59"/></name><argument_list pos:line="121" pos:column="59">(<argument><expr><name pos:line="121" pos:column="60">buf<pos:position pos:line="121" pos:column="63"/></name></expr></argument>)<pos:position pos:line="121" pos:column="64"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="121" pos:column="66">sl<pos:position pos:line="121" pos:column="68"/></name></expr></argument>)<pos:position pos:line="121" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="121" pos:column="70"/></expr_stmt>
				}<pos:position pos:line="122" pos:column="34"/></block></then></if>
			}<pos:position pos:line="123" pos:column="26"/></block></then></if>
			<expr_stmt><expr><call><name pos:line="124" pos:column="25">do_unlink<pos:position pos:line="124" pos:column="34"/></name><argument_list pos:line="124" pos:column="34">(<argument><expr><name pos:line="124" pos:column="35">fname<pos:position pos:line="124" pos:column="40"/></name></expr></argument>)<pos:position pos:line="124" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="124" pos:column="42"/></expr_stmt>
			<expr_stmt><expr><name pos:line="125" pos:column="25">kept<pos:position pos:line="125" pos:column="29"/></name> <operator pos:line="125" pos:column="30">=<pos:position pos:line="125" pos:column="31"/></operator> <literal type="number" pos:line="125" pos:column="32">1<pos:position pos:line="125" pos:column="33"/></literal></expr>;<pos:position pos:line="125" pos:column="34"/></expr_stmt>
		}<pos:position pos:line="126" pos:column="18"/></block></else></if>
	}<pos:position pos:line="127" pos:column="10"/></block></then></if>
<cpp:endif pos:line="128" pos:column="1">#<cpp:directive pos:line="128" pos:column="2">endif<pos:position pos:line="128" pos:column="7"/></cpp:directive></cpp:endif>

	<if pos:line="130" pos:column="9">if <condition pos:line="130" pos:column="12">(<expr><operator pos:line="130" pos:column="13">!<pos:position pos:line="130" pos:column="14"/></operator><name pos:line="130" pos:column="14">kept<pos:position pos:line="130" pos:column="18"/></name> <operator pos:line="130" pos:column="19">&amp;&amp;<pos:position pos:line="130" pos:column="29"/></operator> <operator pos:line="130" pos:column="22">!<pos:position pos:line="130" pos:column="23"/></operator><call><name pos:line="130" pos:column="23">S_ISREG<pos:position pos:line="130" pos:column="30"/></name><argument_list pos:line="130" pos:column="30">(<argument><expr><name><name pos:line="130" pos:column="31">file<pos:position pos:line="130" pos:column="35"/></name><operator pos:line="130" pos:column="35">-&gt;<pos:position pos:line="130" pos:column="40"/></operator><name pos:line="130" pos:column="37">mode<pos:position pos:line="130" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="130" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="130" pos:column="43"/></condition><then pos:line="130" pos:column="43"> <block pos:line="130" pos:column="44">{
		<expr_stmt><expr><call><name pos:line="131" pos:column="17">rprintf<pos:position pos:line="131" pos:column="24"/></name><argument_list pos:line="131" pos:column="24">(<argument><expr><name pos:line="131" pos:column="25">FINFO<pos:position pos:line="131" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="131" pos:column="32">"make_bak: skipping non-regular file %s\n"<pos:position pos:line="131" pos:column="74"/></literal></expr></argument>,
			<argument><expr><name pos:line="132" pos:column="25">fname<pos:position pos:line="132" pos:column="30"/></name></expr></argument>)<pos:position pos:line="132" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="132" pos:column="32"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="133" pos:column="17">unmake_file<pos:position pos:line="133" pos:column="28"/></name><argument_list pos:line="133" pos:column="28">(<argument><expr><name pos:line="133" pos:column="29">file<pos:position pos:line="133" pos:column="33"/></name></expr></argument>)<pos:position pos:line="133" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="133" pos:column="35"/></expr_stmt>
<cpp:ifdef pos:line="134" pos:column="1">#<cpp:directive pos:line="134" pos:column="2">ifdef<pos:position pos:line="134" pos:column="7"/></cpp:directive> <name pos:line="134" pos:column="8">SUPPORT_ACLS<pos:position pos:line="134" pos:column="20"/></name></cpp:ifdef>
		<expr_stmt><expr><call><name pos:line="135" pos:column="17">uncache_tmp_acls<pos:position pos:line="135" pos:column="33"/></name><argument_list pos:line="135" pos:column="33">()<pos:position pos:line="135" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="135" pos:column="36"/></expr_stmt>
<cpp:endif pos:line="136" pos:column="1">#<cpp:directive pos:line="136" pos:column="2">endif<pos:position pos:line="136" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:ifdef pos:line="137" pos:column="1">#<cpp:directive pos:line="137" pos:column="2">ifdef<pos:position pos:line="137" pos:column="7"/></cpp:directive> <name pos:line="137" pos:column="8">SUPPORT_XATTRS<pos:position pos:line="137" pos:column="22"/></name></cpp:ifdef>
		<expr_stmt><expr><call><name pos:line="138" pos:column="17">uncache_tmp_xattrs<pos:position pos:line="138" pos:column="35"/></name><argument_list pos:line="138" pos:column="35">()<pos:position pos:line="138" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="138" pos:column="38"/></expr_stmt>
<cpp:endif pos:line="139" pos:column="1">#<cpp:directive pos:line="139" pos:column="2">endif<pos:position pos:line="139" pos:column="7"/></cpp:directive></cpp:endif>
		<return pos:line="140" pos:column="17">return <expr><literal type="number" pos:line="140" pos:column="24">1<pos:position pos:line="140" pos:column="25"/></literal></expr>;<pos:position pos:line="140" pos:column="26"/></return>
	}<pos:position pos:line="141" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="143" pos:column="9">/* move to keep tree if a file */</comment>
	<if pos:line="144" pos:column="9">if <condition pos:line="144" pos:column="12">(<expr><operator pos:line="144" pos:column="13">!<pos:position pos:line="144" pos:column="14"/></operator><name pos:line="144" pos:column="14">kept<pos:position pos:line="144" pos:column="18"/></name></expr>)<pos:position pos:line="144" pos:column="19"/></condition><then pos:line="144" pos:column="19"> <block pos:line="144" pos:column="20">{
		<if pos:line="145" pos:column="17">if <condition pos:line="145" pos:column="20">(<expr><call><name pos:line="145" pos:column="21">robust_move<pos:position pos:line="145" pos:column="32"/></name><argument_list pos:line="145" pos:column="32">(<argument><expr><name pos:line="145" pos:column="33">fname<pos:position pos:line="145" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="145" pos:column="40">buf<pos:position pos:line="145" pos:column="43"/></name></expr></argument>)<pos:position pos:line="145" pos:column="44"/></argument_list></call> <operator pos:line="145" pos:column="45">!=<pos:position pos:line="145" pos:column="47"/></operator> <literal type="number" pos:line="145" pos:column="48">0<pos:position pos:line="145" pos:column="49"/></literal></expr>)<pos:position pos:line="145" pos:column="50"/></condition><then pos:line="145" pos:column="50"> <block pos:line="145" pos:column="51">{
			<expr_stmt><expr><call><name pos:line="146" pos:column="25">rsyserr<pos:position pos:line="146" pos:column="32"/></name><argument_list pos:line="146" pos:column="32">(<argument><expr><name pos:line="146" pos:column="33">FERROR<pos:position pos:line="146" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="146" pos:column="41">errno<pos:position pos:line="146" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="146" pos:column="48">"keep_backup failed: %s -&gt; \"%s\""<pos:position pos:line="146" pos:column="85"/></literal></expr></argument>,
				<argument><expr><call><name pos:line="147" pos:column="33">full_fname<pos:position pos:line="147" pos:column="43"/></name><argument_list pos:line="147" pos:column="43">(<argument><expr><name pos:line="147" pos:column="44">fname<pos:position pos:line="147" pos:column="49"/></name></expr></argument>)<pos:position pos:line="147" pos:column="50"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="147" pos:column="52">buf<pos:position pos:line="147" pos:column="55"/></name></expr></argument>)<pos:position pos:line="147" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="147" pos:column="57"/></expr_stmt>
		}<pos:position pos:line="148" pos:column="18"/></block></then> <elseif pos:line="148" pos:column="19">else <if pos:line="148" pos:column="24">if <condition pos:line="148" pos:column="27">(<expr><name><name pos:line="148" pos:column="28">sx<pos:position pos:line="148" pos:column="30"/></name><operator pos:line="148" pos:column="30">.<pos:position pos:line="148" pos:column="31"/></operator><name pos:line="148" pos:column="31">st<pos:position pos:line="148" pos:column="33"/></name><operator pos:line="148" pos:column="33">.<pos:position pos:line="148" pos:column="34"/></operator><name pos:line="148" pos:column="34">st_nlink<pos:position pos:line="148" pos:column="42"/></name></name> <operator pos:line="148" pos:column="43">&gt;<pos:position pos:line="148" pos:column="47"/></operator> <literal type="number" pos:line="148" pos:column="45">1<pos:position pos:line="148" pos:column="46"/></literal></expr>)<pos:position pos:line="148" pos:column="47"/></condition><then pos:line="148" pos:column="47"> <block pos:line="148" pos:column="48">{
			<comment type="block" pos:line="149" pos:column="25">/* If someone has hard-linked the file into the backup
			 * dir, rename() might return success but do nothing! */</comment>
			<expr_stmt><expr><call><name pos:line="151" pos:column="25">robust_unlink<pos:position pos:line="151" pos:column="38"/></name><argument_list pos:line="151" pos:column="38">(<argument><expr><name pos:line="151" pos:column="39">fname<pos:position pos:line="151" pos:column="44"/></name></expr></argument>)<pos:position pos:line="151" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="151" pos:column="46"/></expr_stmt> <comment type="block" pos:line="151" pos:column="47">/* Just in case... */</comment>
		}<pos:position pos:line="152" pos:column="18"/></block></then></if></elseif></if>
	}<pos:position pos:line="153" pos:column="10"/></block></then></if>
	<expr_stmt><expr><name pos:line="154" pos:column="9">preserve_xattrs<pos:position pos:line="154" pos:column="24"/></name> <operator pos:line="154" pos:column="25">=<pos:position pos:line="154" pos:column="26"/></operator> <literal type="number" pos:line="154" pos:column="27">0<pos:position pos:line="154" pos:column="28"/></literal></expr>;<pos:position pos:line="154" pos:column="29"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="155" pos:column="9">set_file_attrs<pos:position pos:line="155" pos:column="23"/></name><argument_list pos:line="155" pos:column="23">(<argument><expr><name pos:line="155" pos:column="24">buf<pos:position pos:line="155" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="155" pos:column="29">file<pos:position pos:line="155" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="155" pos:column="35">NULL<pos:position pos:line="155" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="155" pos:column="41">fname<pos:position pos:line="155" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="155" pos:column="48">0<pos:position pos:line="155" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="155" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="155" pos:column="51"/></expr_stmt>
	<expr_stmt><expr><name pos:line="156" pos:column="9">preserve_xattrs<pos:position pos:line="156" pos:column="24"/></name> <operator pos:line="156" pos:column="25">=<pos:position pos:line="156" pos:column="26"/></operator> <name pos:line="156" pos:column="27">save_preserve_xattrs<pos:position pos:line="156" pos:column="47"/></name></expr>;<pos:position pos:line="156" pos:column="48"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="157" pos:column="9">unmake_file<pos:position pos:line="157" pos:column="20"/></name><argument_list pos:line="157" pos:column="20">(<argument><expr><name pos:line="157" pos:column="21">file<pos:position pos:line="157" pos:column="25"/></name></expr></argument>)<pos:position pos:line="157" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="157" pos:column="27"/></expr_stmt>
<cpp:ifdef pos:line="158" pos:column="1">#<cpp:directive pos:line="158" pos:column="2">ifdef<pos:position pos:line="158" pos:column="7"/></cpp:directive> <name pos:line="158" pos:column="8">SUPPORT_ACLS<pos:position pos:line="158" pos:column="20"/></name></cpp:ifdef>
	<expr_stmt><expr><call><name pos:line="159" pos:column="9">uncache_tmp_acls<pos:position pos:line="159" pos:column="25"/></name><argument_list pos:line="159" pos:column="25">()<pos:position pos:line="159" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="159" pos:column="28"/></expr_stmt>
<cpp:endif pos:line="160" pos:column="1">#<cpp:directive pos:line="160" pos:column="2">endif<pos:position pos:line="160" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:ifdef pos:line="161" pos:column="1">#<cpp:directive pos:line="161" pos:column="2">ifdef<pos:position pos:line="161" pos:column="7"/></cpp:directive> <name pos:line="161" pos:column="8">SUPPORT_XATTRS<pos:position pos:line="161" pos:column="22"/></name></cpp:ifdef>
	<expr_stmt><expr><call><name pos:line="162" pos:column="9">uncache_tmp_xattrs<pos:position pos:line="162" pos:column="27"/></name><argument_list pos:line="162" pos:column="27">()<pos:position pos:line="162" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="162" pos:column="30"/></expr_stmt>
<cpp:endif pos:line="163" pos:column="1">#<cpp:directive pos:line="163" pos:column="2">endif<pos:position pos:line="163" pos:column="7"/></cpp:directive></cpp:endif>

	<if pos:line="165" pos:column="9">if <condition pos:line="165" pos:column="12">(<expr><name pos:line="165" pos:column="13">verbose<pos:position pos:line="165" pos:column="20"/></name> <operator pos:line="165" pos:column="21">&gt;<pos:position pos:line="165" pos:column="25"/></operator> <literal type="number" pos:line="165" pos:column="23">1<pos:position pos:line="165" pos:column="24"/></literal></expr>)<pos:position pos:line="165" pos:column="25"/></condition><then pos:line="165" pos:column="25"> <block pos:line="165" pos:column="26">{
		<expr_stmt><expr><call><name pos:line="166" pos:column="17">rprintf<pos:position pos:line="166" pos:column="24"/></name><argument_list pos:line="166" pos:column="24">(<argument><expr><name pos:line="166" pos:column="25">FINFO<pos:position pos:line="166" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="166" pos:column="32">"backed up %s to %s\n"<pos:position pos:line="166" pos:column="54"/></literal></expr></argument>,
			<argument><expr><name pos:line="167" pos:column="25">fname<pos:position pos:line="167" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="167" pos:column="32">buf<pos:position pos:line="167" pos:column="35"/></name></expr></argument>)<pos:position pos:line="167" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="167" pos:column="37"/></expr_stmt>
	}<pos:position pos:line="168" pos:column="10"/></block></then></if>
	<return pos:line="169" pos:column="9">return <expr><literal type="number" pos:line="169" pos:column="16">1<pos:position pos:line="169" pos:column="17"/></literal></expr>;<pos:position pos:line="169" pos:column="18"/></return>
}<pos:position pos:line="170" pos:column="2"/></block></function></unit>
