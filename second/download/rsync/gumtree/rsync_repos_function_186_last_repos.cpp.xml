<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_186_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int32<pos:position pos:line="1" pos:column="6"/></name></type> <name pos:line="1" pos:column="7">read_ndx<pos:position pos:line="1" pos:column="15"/></name><parameter_list pos:line="1" pos:column="15">(<parameter><decl><type><name pos:line="1" pos:column="16">int<pos:position pos:line="1" pos:column="19"/></name></type> <name pos:line="1" pos:column="20">f<pos:position pos:line="1" pos:column="21"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="22"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><specifier pos:line="3" pos:column="9">static<pos:position pos:line="3" pos:column="15"/></specifier> <type><name pos:line="3" pos:column="16">int32<pos:position pos:line="3" pos:column="21"/></name></type> <name pos:line="3" pos:column="22">prev_positive<pos:position pos:line="3" pos:column="35"/></name> <init pos:line="3" pos:column="36">= <expr><operator pos:line="3" pos:column="38">-<pos:position pos:line="3" pos:column="39"/></operator><literal type="number" pos:line="3" pos:column="39">1<pos:position pos:line="3" pos:column="40"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="42">prev_negative<pos:position pos:line="3" pos:column="55"/></name> <init pos:line="3" pos:column="56">= <expr><literal type="number" pos:line="3" pos:column="58">1<pos:position pos:line="3" pos:column="59"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="60"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int32<pos:position pos:line="4" pos:column="14"/></name> <modifier pos:line="4" pos:column="15">*<pos:position pos:line="4" pos:column="16"/></modifier></type><name pos:line="4" pos:column="16">prev_ptr<pos:position pos:line="4" pos:column="24"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="26">num<pos:position pos:line="4" pos:column="29"/></name></decl>;<pos:position pos:line="4" pos:column="30"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">char<pos:position pos:line="5" pos:column="13"/></name></type> <name><name pos:line="5" pos:column="14">b<pos:position pos:line="5" pos:column="15"/></name><index pos:line="5" pos:column="15">[<expr><literal type="number" pos:line="5" pos:column="16">4<pos:position pos:line="5" pos:column="17"/></literal></expr>]<pos:position pos:line="5" pos:column="18"/></index></name></decl>;<pos:position pos:line="5" pos:column="19"/></decl_stmt>

	<if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<expr><name pos:line="7" pos:column="13">protocol_version<pos:position pos:line="7" pos:column="29"/></name> <operator pos:line="7" pos:column="30">&lt;<pos:position pos:line="7" pos:column="34"/></operator> <literal type="number" pos:line="7" pos:column="32">30<pos:position pos:line="7" pos:column="34"/></literal></expr>)<pos:position pos:line="7" pos:column="35"/></condition><then pos:line="7" pos:column="35">
		<block type="pseudo"><return pos:line="8" pos:column="17">return <expr><call><name pos:line="8" pos:column="24">read_int<pos:position pos:line="8" pos:column="32"/></name><argument_list pos:line="8" pos:column="32">(<argument><expr><name pos:line="8" pos:column="33">f<pos:position pos:line="8" pos:column="34"/></name></expr></argument>)<pos:position pos:line="8" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="36"/></return></block></then></if>

	<expr_stmt><expr><call><name pos:line="10" pos:column="9">read_buf<pos:position pos:line="10" pos:column="17"/></name><argument_list pos:line="10" pos:column="17">(<argument><expr><name pos:line="10" pos:column="18">f<pos:position pos:line="10" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="21">b<pos:position pos:line="10" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="10" pos:column="24">1<pos:position pos:line="10" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="27"/></expr_stmt>
	<if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><call><name pos:line="11" pos:column="13">CVAL<pos:position pos:line="11" pos:column="17"/></name><argument_list pos:line="11" pos:column="17">(<argument><expr><name pos:line="11" pos:column="18">b<pos:position pos:line="11" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="11" pos:column="21">0<pos:position pos:line="11" pos:column="22"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="23"/></argument_list></call> <operator pos:line="11" pos:column="24">==<pos:position pos:line="11" pos:column="26"/></operator> <literal type="number" pos:line="11" pos:column="27">0xFF<pos:position pos:line="11" pos:column="31"/></literal></expr>)<pos:position pos:line="11" pos:column="32"/></condition><then pos:line="11" pos:column="32"> <block pos:line="11" pos:column="33">{
		<expr_stmt><expr><call><name pos:line="12" pos:column="17">read_buf<pos:position pos:line="12" pos:column="25"/></name><argument_list pos:line="12" pos:column="25">(<argument><expr><name pos:line="12" pos:column="26">f<pos:position pos:line="12" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="29">b<pos:position pos:line="12" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="12" pos:column="32">1<pos:position pos:line="12" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="35"/></expr_stmt>
		<expr_stmt><expr><name pos:line="13" pos:column="17">prev_ptr<pos:position pos:line="13" pos:column="25"/></name> <operator pos:line="13" pos:column="26">=<pos:position pos:line="13" pos:column="27"/></operator> <operator pos:line="13" pos:column="28">&amp;<pos:position pos:line="13" pos:column="33"/></operator><name pos:line="13" pos:column="29">prev_negative<pos:position pos:line="13" pos:column="42"/></name></expr>;<pos:position pos:line="13" pos:column="43"/></expr_stmt>
	}<pos:position pos:line="14" pos:column="10"/></block></then> <elseif pos:line="14" pos:column="11">else <if pos:line="14" pos:column="16">if <condition pos:line="14" pos:column="19">(<expr><call><name pos:line="14" pos:column="20">CVAL<pos:position pos:line="14" pos:column="24"/></name><argument_list pos:line="14" pos:column="24">(<argument><expr><name pos:line="14" pos:column="25">b<pos:position pos:line="14" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="14" pos:column="28">0<pos:position pos:line="14" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="30"/></argument_list></call> <operator pos:line="14" pos:column="31">==<pos:position pos:line="14" pos:column="33"/></operator> <literal type="number" pos:line="14" pos:column="34">0<pos:position pos:line="14" pos:column="35"/></literal></expr>)<pos:position pos:line="14" pos:column="36"/></condition><then pos:line="14" pos:column="36">
		<block type="pseudo"><return pos:line="15" pos:column="17">return <expr><name pos:line="15" pos:column="24">NDX_DONE<pos:position pos:line="15" pos:column="32"/></name></expr>;<pos:position pos:line="15" pos:column="33"/></return></block></then></if></elseif>
	<else pos:line="16" pos:column="9">else
		<block type="pseudo"><expr_stmt><expr><name pos:line="17" pos:column="17">prev_ptr<pos:position pos:line="17" pos:column="25"/></name> <operator pos:line="17" pos:column="26">=<pos:position pos:line="17" pos:column="27"/></operator> <operator pos:line="17" pos:column="28">&amp;<pos:position pos:line="17" pos:column="33"/></operator><name pos:line="17" pos:column="29">prev_positive<pos:position pos:line="17" pos:column="42"/></name></expr>;<pos:position pos:line="17" pos:column="43"/></expr_stmt></block></else></if>
	<if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><call><name pos:line="18" pos:column="13">CVAL<pos:position pos:line="18" pos:column="17"/></name><argument_list pos:line="18" pos:column="17">(<argument><expr><name pos:line="18" pos:column="18">b<pos:position pos:line="18" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="18" pos:column="21">0<pos:position pos:line="18" pos:column="22"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="23"/></argument_list></call> <operator pos:line="18" pos:column="24">==<pos:position pos:line="18" pos:column="26"/></operator> <literal type="number" pos:line="18" pos:column="27">0xFE<pos:position pos:line="18" pos:column="31"/></literal></expr>)<pos:position pos:line="18" pos:column="32"/></condition><then pos:line="18" pos:column="32"> <block pos:line="18" pos:column="33">{
		<expr_stmt><expr><call><name pos:line="19" pos:column="17">read_buf<pos:position pos:line="19" pos:column="25"/></name><argument_list pos:line="19" pos:column="25">(<argument><expr><name pos:line="19" pos:column="26">f<pos:position pos:line="19" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="29">b<pos:position pos:line="19" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="19" pos:column="32">2<pos:position pos:line="19" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="35"/></expr_stmt>
		<if pos:line="20" pos:column="17">if <condition pos:line="20" pos:column="20">(<expr><call><name pos:line="20" pos:column="21">CVAL<pos:position pos:line="20" pos:column="25"/></name><argument_list pos:line="20" pos:column="25">(<argument><expr><name pos:line="20" pos:column="26">b<pos:position pos:line="20" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="20" pos:column="29">0<pos:position pos:line="20" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="31"/></argument_list></call> <operator pos:line="20" pos:column="32">&amp;<pos:position pos:line="20" pos:column="37"/></operator> <literal type="number" pos:line="20" pos:column="34">0x80<pos:position pos:line="20" pos:column="38"/></literal></expr>)<pos:position pos:line="20" pos:column="39"/></condition><then pos:line="20" pos:column="39"> <block pos:line="20" pos:column="40">{
			<expr_stmt><expr><name><name pos:line="21" pos:column="25">b<pos:position pos:line="21" pos:column="26"/></name><index pos:line="21" pos:column="26">[<expr><literal type="number" pos:line="21" pos:column="27">3<pos:position pos:line="21" pos:column="28"/></literal></expr>]<pos:position pos:line="21" pos:column="29"/></index></name> <operator pos:line="21" pos:column="30">=<pos:position pos:line="21" pos:column="31"/></operator> <call><name pos:line="21" pos:column="32">CVAL<pos:position pos:line="21" pos:column="36"/></name><argument_list pos:line="21" pos:column="36">(<argument><expr><name pos:line="21" pos:column="37">b<pos:position pos:line="21" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="21" pos:column="40">0<pos:position pos:line="21" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="42"/></argument_list></call> <operator pos:line="21" pos:column="43">&amp;<pos:position pos:line="21" pos:column="48"/></operator> <operator pos:line="21" pos:column="45">~<pos:position pos:line="21" pos:column="46"/></operator><literal type="number" pos:line="21" pos:column="46">0x80<pos:position pos:line="21" pos:column="50"/></literal></expr>;<pos:position pos:line="21" pos:column="51"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="22" pos:column="25">b<pos:position pos:line="22" pos:column="26"/></name><index pos:line="22" pos:column="26">[<expr><literal type="number" pos:line="22" pos:column="27">0<pos:position pos:line="22" pos:column="28"/></literal></expr>]<pos:position pos:line="22" pos:column="29"/></index></name> <operator pos:line="22" pos:column="30">=<pos:position pos:line="22" pos:column="31"/></operator> <name><name pos:line="22" pos:column="32">b<pos:position pos:line="22" pos:column="33"/></name><index pos:line="22" pos:column="33">[<expr><literal type="number" pos:line="22" pos:column="34">1<pos:position pos:line="22" pos:column="35"/></literal></expr>]<pos:position pos:line="22" pos:column="36"/></index></name></expr>;<pos:position pos:line="22" pos:column="37"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="23" pos:column="25">read_buf<pos:position pos:line="23" pos:column="33"/></name><argument_list pos:line="23" pos:column="33">(<argument><expr><name pos:line="23" pos:column="34">f<pos:position pos:line="23" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="37">b<pos:position pos:line="23" pos:column="38"/></name><operator pos:line="23" pos:column="38">+<pos:position pos:line="23" pos:column="39"/></operator><literal type="number" pos:line="23" pos:column="39">1<pos:position pos:line="23" pos:column="40"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="23" pos:column="42">2<pos:position pos:line="23" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="45"/></expr_stmt>
			<expr_stmt><expr><name pos:line="24" pos:column="25">num<pos:position pos:line="24" pos:column="28"/></name> <operator pos:line="24" pos:column="29">=<pos:position pos:line="24" pos:column="30"/></operator> <call><name pos:line="24" pos:column="31">IVAL<pos:position pos:line="24" pos:column="35"/></name><argument_list pos:line="24" pos:column="35">(<argument><expr><name pos:line="24" pos:column="36">b<pos:position pos:line="24" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="24" pos:column="39">0<pos:position pos:line="24" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="42"/></expr_stmt>
		}<pos:position pos:line="25" pos:column="18"/></block></then> <else pos:line="25" pos:column="19">else
			<block type="pseudo"><expr_stmt><expr><name pos:line="26" pos:column="25">num<pos:position pos:line="26" pos:column="28"/></name> <operator pos:line="26" pos:column="29">=<pos:position pos:line="26" pos:column="30"/></operator> <operator pos:line="26" pos:column="31">(<pos:position pos:line="26" pos:column="32"/></operator><call><name pos:line="26" pos:column="32">UVAL<pos:position pos:line="26" pos:column="36"/></name><argument_list pos:line="26" pos:column="36">(<argument><expr><name pos:line="26" pos:column="37">b<pos:position pos:line="26" pos:column="38"/></name></expr></argument>,<argument><expr><literal type="number" pos:line="26" pos:column="39">0<pos:position pos:line="26" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="41"/></argument_list></call><operator pos:line="26" pos:column="41">&lt;&lt;<pos:position pos:line="26" pos:column="49"/></operator><literal type="number" pos:line="26" pos:column="43">8<pos:position pos:line="26" pos:column="44"/></literal><operator pos:line="26" pos:column="44">)<pos:position pos:line="26" pos:column="45"/></operator> <operator pos:line="26" pos:column="46">+<pos:position pos:line="26" pos:column="47"/></operator> <call><name pos:line="26" pos:column="48">UVAL<pos:position pos:line="26" pos:column="52"/></name><argument_list pos:line="26" pos:column="52">(<argument><expr><name pos:line="26" pos:column="53">b<pos:position pos:line="26" pos:column="54"/></name></expr></argument>,<argument><expr><literal type="number" pos:line="26" pos:column="55">1<pos:position pos:line="26" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="57"/></argument_list></call> <operator pos:line="26" pos:column="58">+<pos:position pos:line="26" pos:column="59"/></operator> <operator pos:line="26" pos:column="60">*<pos:position pos:line="26" pos:column="61"/></operator><name pos:line="26" pos:column="61">prev_ptr<pos:position pos:line="26" pos:column="69"/></name></expr>;<pos:position pos:line="26" pos:column="70"/></expr_stmt></block></else></if>
	}<pos:position pos:line="27" pos:column="10"/></block></then> <else pos:line="27" pos:column="11">else
		<block type="pseudo"><expr_stmt><expr><name pos:line="28" pos:column="17">num<pos:position pos:line="28" pos:column="20"/></name> <operator pos:line="28" pos:column="21">=<pos:position pos:line="28" pos:column="22"/></operator> <call><name pos:line="28" pos:column="23">UVAL<pos:position pos:line="28" pos:column="27"/></name><argument_list pos:line="28" pos:column="27">(<argument><expr><name pos:line="28" pos:column="28">b<pos:position pos:line="28" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="28" pos:column="31">0<pos:position pos:line="28" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="33"/></argument_list></call> <operator pos:line="28" pos:column="34">+<pos:position pos:line="28" pos:column="35"/></operator> <operator pos:line="28" pos:column="36">*<pos:position pos:line="28" pos:column="37"/></operator><name pos:line="28" pos:column="37">prev_ptr<pos:position pos:line="28" pos:column="45"/></name></expr>;<pos:position pos:line="28" pos:column="46"/></expr_stmt></block></else></if>
	<expr_stmt><expr><operator pos:line="29" pos:column="9">*<pos:position pos:line="29" pos:column="10"/></operator><name pos:line="29" pos:column="10">prev_ptr<pos:position pos:line="29" pos:column="18"/></name> <operator pos:line="29" pos:column="19">=<pos:position pos:line="29" pos:column="20"/></operator> <name pos:line="29" pos:column="21">num<pos:position pos:line="29" pos:column="24"/></name></expr>;<pos:position pos:line="29" pos:column="25"/></expr_stmt>
	<if pos:line="30" pos:column="9">if <condition pos:line="30" pos:column="12">(<expr><name pos:line="30" pos:column="13">prev_ptr<pos:position pos:line="30" pos:column="21"/></name> <operator pos:line="30" pos:column="22">==<pos:position pos:line="30" pos:column="24"/></operator> <operator pos:line="30" pos:column="25">&amp;<pos:position pos:line="30" pos:column="30"/></operator><name pos:line="30" pos:column="26">prev_negative<pos:position pos:line="30" pos:column="39"/></name></expr>)<pos:position pos:line="30" pos:column="40"/></condition><then pos:line="30" pos:column="40">
		<block type="pseudo"><expr_stmt><expr><name pos:line="31" pos:column="17">num<pos:position pos:line="31" pos:column="20"/></name> <operator pos:line="31" pos:column="21">=<pos:position pos:line="31" pos:column="22"/></operator> <operator pos:line="31" pos:column="23">-<pos:position pos:line="31" pos:column="24"/></operator><name pos:line="31" pos:column="24">num<pos:position pos:line="31" pos:column="27"/></name></expr>;<pos:position pos:line="31" pos:column="28"/></expr_stmt></block></then></if>
	<return pos:line="32" pos:column="9">return <expr><name pos:line="32" pos:column="16">num<pos:position pos:line="32" pos:column="19"/></name></expr>;<pos:position pos:line="32" pos:column="20"/></return>
}<pos:position pos:line="33" pos:column="2"/></block></function></unit>
