<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_function_735.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name><name pos:line="1" pos:column="8">struct<pos:position pos:line="1" pos:column="14"/></name> <name pos:line="1" pos:column="15">exclude_struct<pos:position pos:line="1" pos:column="29"/></name></name> <modifier pos:line="1" pos:column="30">*<pos:position pos:line="1" pos:column="31"/></modifier></type><name pos:line="1" pos:column="31">make_exclude<pos:position pos:line="1" pos:column="43"/></name><parameter_list pos:line="1" pos:column="43">(<parameter><decl><type><specifier pos:line="1" pos:column="44">const<pos:position pos:line="1" pos:column="49"/></specifier> <name pos:line="1" pos:column="50">char<pos:position pos:line="1" pos:column="54"/></name> <modifier pos:line="1" pos:column="55">*<pos:position pos:line="1" pos:column="56"/></modifier></type><name pos:line="1" pos:column="56">pattern<pos:position pos:line="1" pos:column="63"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="65">int<pos:position pos:line="1" pos:column="68"/></name></type> <name pos:line="1" pos:column="69">include<pos:position pos:line="1" pos:column="76"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="77"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">exclude_struct<pos:position pos:line="3" pos:column="30"/></name></name> <modifier pos:line="3" pos:column="31">*<pos:position pos:line="3" pos:column="32"/></modifier></type><name pos:line="3" pos:column="32">ret<pos:position pos:line="3" pos:column="35"/></name></decl>;<pos:position pos:line="3" pos:column="36"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier></type><name pos:line="4" pos:column="15">cp<pos:position pos:line="4" pos:column="17"/></name></decl>;<pos:position pos:line="4" pos:column="18"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">pat_len<pos:position pos:line="5" pos:column="20"/></name></decl>;<pos:position pos:line="5" pos:column="21"/></decl_stmt>

	<expr_stmt><expr><name pos:line="7" pos:column="9">ret<pos:position pos:line="7" pos:column="12"/></name> <operator pos:line="7" pos:column="13">=<pos:position pos:line="7" pos:column="14"/></operator> <operator pos:line="7" pos:column="15">new<pos:position pos:line="7" pos:column="18"/></operator><operator pos:line="7" pos:column="18">(<pos:position pos:line="7" pos:column="19"/></operator>struct <name pos:line="7" pos:column="26">exclude_struct<pos:position pos:line="7" pos:column="40"/></name><operator pos:line="7" pos:column="40">)<pos:position pos:line="7" pos:column="41"/></operator></expr>;<pos:position pos:line="7" pos:column="42"/></expr_stmt>
	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><operator pos:line="8" pos:column="13">!<pos:position pos:line="8" pos:column="14"/></operator><name pos:line="8" pos:column="14">ret<pos:position pos:line="8" pos:column="17"/></name></expr>)<pos:position pos:line="8" pos:column="18"/></condition><then pos:line="8" pos:column="18"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="8" pos:column="19">out_of_memory<pos:position pos:line="8" pos:column="32"/></name><argument_list pos:line="8" pos:column="32">(<argument><expr><literal type="string" pos:line="8" pos:column="33">"make_exclude"<pos:position pos:line="8" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="49"/></expr_stmt></block></then></if>

	<expr_stmt><expr><call><name pos:line="10" pos:column="9">memset<pos:position pos:line="10" pos:column="15"/></name><argument_list pos:line="10" pos:column="15">(<argument><expr><name pos:line="10" pos:column="16">ret<pos:position pos:line="10" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="10" pos:column="21">0<pos:position pos:line="10" pos:column="22"/></literal></expr></argument>, <argument><expr><sizeof pos:line="10" pos:column="24">sizeof<argument_list pos:line="10" pos:column="30">(<argument><expr><operator pos:line="10" pos:column="31">*<pos:position pos:line="10" pos:column="32"/></operator><name pos:line="10" pos:column="32">ret<pos:position pos:line="10" pos:column="35"/></name></expr></argument>)<pos:position pos:line="10" pos:column="36"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="10" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="38"/></expr_stmt>

	<if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><call><name pos:line="12" pos:column="13">strncmp<pos:position pos:line="12" pos:column="20"/></name><argument_list pos:line="12" pos:column="20">(<argument><expr><name pos:line="12" pos:column="21">pattern<pos:position pos:line="12" pos:column="28"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="12" pos:column="29">"- "<pos:position pos:line="12" pos:column="33"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="12" pos:column="34">2<pos:position pos:line="12" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="36"/></argument_list></call> <operator pos:line="12" pos:column="37">==<pos:position pos:line="12" pos:column="39"/></operator> <literal type="number" pos:line="12" pos:column="40">0<pos:position pos:line="12" pos:column="41"/></literal></expr>)<pos:position pos:line="12" pos:column="42"/></condition><then pos:line="12" pos:column="42"> <block pos:line="12" pos:column="43">{
		<expr_stmt><expr><name pos:line="13" pos:column="17">pattern<pos:position pos:line="13" pos:column="24"/></name> <operator pos:line="13" pos:column="25">+=<pos:position pos:line="13" pos:column="27"/></operator> <literal type="number" pos:line="13" pos:column="28">2<pos:position pos:line="13" pos:column="29"/></literal></expr>;<pos:position pos:line="13" pos:column="30"/></expr_stmt>
	}<pos:position pos:line="14" pos:column="10"/></block></then> <elseif pos:line="14" pos:column="11">else <if pos:line="14" pos:column="16">if <condition pos:line="14" pos:column="19">(<expr><call><name pos:line="14" pos:column="20">strncmp<pos:position pos:line="14" pos:column="27"/></name><argument_list pos:line="14" pos:column="27">(<argument><expr><name pos:line="14" pos:column="28">pattern<pos:position pos:line="14" pos:column="35"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="14" pos:column="36">"+ "<pos:position pos:line="14" pos:column="40"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="14" pos:column="41">2<pos:position pos:line="14" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="43"/></argument_list></call> <operator pos:line="14" pos:column="44">==<pos:position pos:line="14" pos:column="46"/></operator> <literal type="number" pos:line="14" pos:column="47">0<pos:position pos:line="14" pos:column="48"/></literal></expr>)<pos:position pos:line="14" pos:column="49"/></condition><then pos:line="14" pos:column="49"> <block pos:line="14" pos:column="50">{
		<expr_stmt><expr><name><name pos:line="15" pos:column="17">ret<pos:position pos:line="15" pos:column="20"/></name><operator pos:line="15" pos:column="20">-&gt;<pos:position pos:line="15" pos:column="25"/></operator><name pos:line="15" pos:column="22">include<pos:position pos:line="15" pos:column="29"/></name></name> <operator pos:line="15" pos:column="30">=<pos:position pos:line="15" pos:column="31"/></operator> <literal type="number" pos:line="15" pos:column="32">1<pos:position pos:line="15" pos:column="33"/></literal></expr>;<pos:position pos:line="15" pos:column="34"/></expr_stmt>
		<expr_stmt><expr><name pos:line="16" pos:column="17">pattern<pos:position pos:line="16" pos:column="24"/></name> <operator pos:line="16" pos:column="25">+=<pos:position pos:line="16" pos:column="27"/></operator> <literal type="number" pos:line="16" pos:column="28">2<pos:position pos:line="16" pos:column="29"/></literal></expr>;<pos:position pos:line="16" pos:column="30"/></expr_stmt>
	}<pos:position pos:line="17" pos:column="10"/></block></then></if></elseif> <else pos:line="17" pos:column="11">else <block pos:line="17" pos:column="16">{
		<expr_stmt><expr><name><name pos:line="18" pos:column="17">ret<pos:position pos:line="18" pos:column="20"/></name><operator pos:line="18" pos:column="20">-&gt;<pos:position pos:line="18" pos:column="25"/></operator><name pos:line="18" pos:column="22">include<pos:position pos:line="18" pos:column="29"/></name></name> <operator pos:line="18" pos:column="30">=<pos:position pos:line="18" pos:column="31"/></operator> <name pos:line="18" pos:column="32">include<pos:position pos:line="18" pos:column="39"/></name></expr>;<pos:position pos:line="18" pos:column="40"/></expr_stmt>
	}<pos:position pos:line="19" pos:column="10"/></block></else></if>

	<if pos:line="21" pos:column="9">if <condition pos:line="21" pos:column="12">(<expr><name pos:line="21" pos:column="13">exclude_path_prefix<pos:position pos:line="21" pos:column="32"/></name></expr>)<pos:position pos:line="21" pos:column="33"/></condition><then pos:line="21" pos:column="33">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="22" pos:column="17">ret<pos:position pos:line="22" pos:column="20"/></name><operator pos:line="22" pos:column="20">-&gt;<pos:position pos:line="22" pos:column="25"/></operator><name pos:line="22" pos:column="22">match_flags<pos:position pos:line="22" pos:column="33"/></name></name> <operator pos:line="22" pos:column="34">|=<pos:position pos:line="22" pos:column="36"/></operator> <name pos:line="22" pos:column="37">MATCHFLG_ABS_PATH<pos:position pos:line="22" pos:column="54"/></name></expr>;<pos:position pos:line="22" pos:column="55"/></expr_stmt></block></then></if>
	<if pos:line="23" pos:column="9">if <condition pos:line="23" pos:column="12">(<expr><name pos:line="23" pos:column="13">exclude_path_prefix<pos:position pos:line="23" pos:column="32"/></name> <operator pos:line="23" pos:column="33">&amp;&amp;<pos:position pos:line="23" pos:column="43"/></operator> <operator pos:line="23" pos:column="36">*<pos:position pos:line="23" pos:column="37"/></operator><name pos:line="23" pos:column="37">pattern<pos:position pos:line="23" pos:column="44"/></name> <operator pos:line="23" pos:column="45">==<pos:position pos:line="23" pos:column="47"/></operator> <literal type="char" pos:line="23" pos:column="48">'/'<pos:position pos:line="23" pos:column="51"/></literal></expr>)<pos:position pos:line="23" pos:column="52"/></condition><then pos:line="23" pos:column="52"> <block pos:line="23" pos:column="53">{
		<expr_stmt><expr><name><name pos:line="24" pos:column="17">ret<pos:position pos:line="24" pos:column="20"/></name><operator pos:line="24" pos:column="20">-&gt;<pos:position pos:line="24" pos:column="25"/></operator><name pos:line="24" pos:column="22">pattern<pos:position pos:line="24" pos:column="29"/></name></name> <operator pos:line="24" pos:column="30">=<pos:position pos:line="24" pos:column="31"/></operator> <call><name pos:line="24" pos:column="32">new_array<pos:position pos:line="24" pos:column="41"/></name><argument_list pos:line="24" pos:column="41">(<argument><expr><name pos:line="24" pos:column="42">char<pos:position pos:line="24" pos:column="46"/></name></expr></argument>,
			<argument><expr><call><name pos:line="25" pos:column="25">strlen<pos:position pos:line="25" pos:column="31"/></name><argument_list pos:line="25" pos:column="31">(<argument><expr><name pos:line="25" pos:column="32">exclude_path_prefix<pos:position pos:line="25" pos:column="51"/></name></expr></argument>)<pos:position pos:line="25" pos:column="52"/></argument_list></call> <operator pos:line="25" pos:column="53">+<pos:position pos:line="25" pos:column="54"/></operator> <call><name pos:line="25" pos:column="55">strlen<pos:position pos:line="25" pos:column="61"/></name><argument_list pos:line="25" pos:column="61">(<argument><expr><name pos:line="25" pos:column="62">pattern<pos:position pos:line="25" pos:column="69"/></name></expr></argument>)<pos:position pos:line="25" pos:column="70"/></argument_list></call> <operator pos:line="25" pos:column="71">+<pos:position pos:line="25" pos:column="72"/></operator> <literal type="number" pos:line="25" pos:column="73">1<pos:position pos:line="25" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="76"/></expr_stmt>
		<if pos:line="26" pos:column="17">if <condition pos:line="26" pos:column="20">(<expr><operator pos:line="26" pos:column="21">!<pos:position pos:line="26" pos:column="22"/></operator><name><name pos:line="26" pos:column="22">ret<pos:position pos:line="26" pos:column="25"/></name><operator pos:line="26" pos:column="25">-&gt;<pos:position pos:line="26" pos:column="30"/></operator><name pos:line="26" pos:column="27">pattern<pos:position pos:line="26" pos:column="34"/></name></name></expr>)<pos:position pos:line="26" pos:column="35"/></condition><then pos:line="26" pos:column="35"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="26" pos:column="36">out_of_memory<pos:position pos:line="26" pos:column="49"/></name><argument_list pos:line="26" pos:column="49">(<argument><expr><literal type="string" pos:line="26" pos:column="50">"make_exclude"<pos:position pos:line="26" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="66"/></expr_stmt></block></then></if>
		<expr_stmt><expr><call><name pos:line="27" pos:column="17">sprintf<pos:position pos:line="27" pos:column="24"/></name><argument_list pos:line="27" pos:column="24">(<argument><expr><name><name pos:line="27" pos:column="25">ret<pos:position pos:line="27" pos:column="28"/></name><operator pos:line="27" pos:column="28">-&gt;<pos:position pos:line="27" pos:column="33"/></operator><name pos:line="27" pos:column="30">pattern<pos:position pos:line="27" pos:column="37"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="27" pos:column="39">"%s%s"<pos:position pos:line="27" pos:column="45"/></literal></expr></argument>, <argument><expr><name pos:line="27" pos:column="47">exclude_path_prefix<pos:position pos:line="27" pos:column="66"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="68">pattern<pos:position pos:line="27" pos:column="75"/></name></expr></argument>)<pos:position pos:line="27" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="77"/></expr_stmt>
	}<pos:position pos:line="28" pos:column="10"/></block></then>
	<else pos:line="29" pos:column="9">else <block pos:line="29" pos:column="14">{
		<expr_stmt><expr><name><name pos:line="30" pos:column="17">ret<pos:position pos:line="30" pos:column="20"/></name><operator pos:line="30" pos:column="20">-&gt;<pos:position pos:line="30" pos:column="25"/></operator><name pos:line="30" pos:column="22">pattern<pos:position pos:line="30" pos:column="29"/></name></name> <operator pos:line="30" pos:column="30">=<pos:position pos:line="30" pos:column="31"/></operator> <call><name pos:line="30" pos:column="32">strdup<pos:position pos:line="30" pos:column="38"/></name><argument_list pos:line="30" pos:column="38">(<argument><expr><name pos:line="30" pos:column="39">pattern<pos:position pos:line="30" pos:column="46"/></name></expr></argument>)<pos:position pos:line="30" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="48"/></expr_stmt>
		<if pos:line="31" pos:column="17">if <condition pos:line="31" pos:column="20">(<expr><operator pos:line="31" pos:column="21">!<pos:position pos:line="31" pos:column="22"/></operator><name><name pos:line="31" pos:column="22">ret<pos:position pos:line="31" pos:column="25"/></name><operator pos:line="31" pos:column="25">-&gt;<pos:position pos:line="31" pos:column="30"/></operator><name pos:line="31" pos:column="27">pattern<pos:position pos:line="31" pos:column="34"/></name></name></expr>)<pos:position pos:line="31" pos:column="35"/></condition><then pos:line="31" pos:column="35"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="31" pos:column="36">out_of_memory<pos:position pos:line="31" pos:column="49"/></name><argument_list pos:line="31" pos:column="49">(<argument><expr><literal type="string" pos:line="31" pos:column="50">"make_exclude"<pos:position pos:line="31" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="66"/></expr_stmt></block></then></if>
	}<pos:position pos:line="32" pos:column="10"/></block></else></if>

	<if pos:line="34" pos:column="9">if <condition pos:line="34" pos:column="12">(<expr><call><name pos:line="34" pos:column="13">strpbrk<pos:position pos:line="34" pos:column="20"/></name><argument_list pos:line="34" pos:column="20">(<argument><expr><name pos:line="34" pos:column="21">pattern<pos:position pos:line="34" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="34" pos:column="30">"*[?"<pos:position pos:line="34" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="34" pos:column="37"/></condition><then pos:line="34" pos:column="37"> <block pos:line="34" pos:column="38">{
		<expr_stmt><expr><name><name pos:line="35" pos:column="17">ret<pos:position pos:line="35" pos:column="20"/></name><operator pos:line="35" pos:column="20">-&gt;<pos:position pos:line="35" pos:column="25"/></operator><name pos:line="35" pos:column="22">match_flags<pos:position pos:line="35" pos:column="33"/></name></name> <operator pos:line="35" pos:column="34">|=<pos:position pos:line="35" pos:column="36"/></operator> <name pos:line="35" pos:column="37">MATCHFLG_WILD<pos:position pos:line="35" pos:column="50"/></name></expr>;<pos:position pos:line="35" pos:column="51"/></expr_stmt>
		<if pos:line="36" pos:column="17">if <condition pos:line="36" pos:column="20">(<expr><call><name pos:line="36" pos:column="21">strstr<pos:position pos:line="36" pos:column="27"/></name><argument_list pos:line="36" pos:column="27">(<argument><expr><name pos:line="36" pos:column="28">pattern<pos:position pos:line="36" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="36" pos:column="37">"**"<pos:position pos:line="36" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="36" pos:column="43"/></condition><then pos:line="36" pos:column="43"> <block pos:line="36" pos:column="44">{
			<expr_stmt><expr><name><name pos:line="37" pos:column="25">ret<pos:position pos:line="37" pos:column="28"/></name><operator pos:line="37" pos:column="28">-&gt;<pos:position pos:line="37" pos:column="33"/></operator><name pos:line="37" pos:column="30">match_flags<pos:position pos:line="37" pos:column="41"/></name></name> <operator pos:line="37" pos:column="42">|=<pos:position pos:line="37" pos:column="44"/></operator> <name pos:line="37" pos:column="45">MATCHFLG_WILD2<pos:position pos:line="37" pos:column="59"/></name></expr>;<pos:position pos:line="37" pos:column="60"/></expr_stmt>
			<comment type="block" pos:line="38" pos:column="25">/* If the pattern starts with **, note that. */</comment>
			<if pos:line="39" pos:column="25">if <condition pos:line="39" pos:column="28">(<expr><operator pos:line="39" pos:column="29">*<pos:position pos:line="39" pos:column="30"/></operator><name pos:line="39" pos:column="30">pattern<pos:position pos:line="39" pos:column="37"/></name> <operator pos:line="39" pos:column="38">==<pos:position pos:line="39" pos:column="40"/></operator> <literal type="char" pos:line="39" pos:column="41">'*'<pos:position pos:line="39" pos:column="44"/></literal> <operator pos:line="39" pos:column="45">&amp;&amp;<pos:position pos:line="39" pos:column="55"/></operator> <name><name pos:line="39" pos:column="48">pattern<pos:position pos:line="39" pos:column="55"/></name><index pos:line="39" pos:column="55">[<expr><literal type="number" pos:line="39" pos:column="56">1<pos:position pos:line="39" pos:column="57"/></literal></expr>]<pos:position pos:line="39" pos:column="58"/></index></name> <operator pos:line="39" pos:column="59">==<pos:position pos:line="39" pos:column="61"/></operator> <literal type="char" pos:line="39" pos:column="62">'*'<pos:position pos:line="39" pos:column="65"/></literal></expr>)<pos:position pos:line="39" pos:column="66"/></condition><then pos:line="39" pos:column="66">
				<block type="pseudo"><expr_stmt><expr><name><name pos:line="40" pos:column="33">ret<pos:position pos:line="40" pos:column="36"/></name><operator pos:line="40" pos:column="36">-&gt;<pos:position pos:line="40" pos:column="41"/></operator><name pos:line="40" pos:column="38">match_flags<pos:position pos:line="40" pos:column="49"/></name></name> <operator pos:line="40" pos:column="50">|=<pos:position pos:line="40" pos:column="52"/></operator> <name pos:line="40" pos:column="53">MATCHFLG_WILD2_PREFIX<pos:position pos:line="40" pos:column="74"/></name></expr>;<pos:position pos:line="40" pos:column="75"/></expr_stmt></block></then></if>
		}<pos:position pos:line="41" pos:column="18"/></block></then></if>
	}<pos:position pos:line="42" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="44" pos:column="9">pat_len<pos:position pos:line="44" pos:column="16"/></name> <operator pos:line="44" pos:column="17">=<pos:position pos:line="44" pos:column="18"/></operator> <call><name pos:line="44" pos:column="19">strlen<pos:position pos:line="44" pos:column="25"/></name><argument_list pos:line="44" pos:column="25">(<argument><expr><name><name pos:line="44" pos:column="26">ret<pos:position pos:line="44" pos:column="29"/></name><operator pos:line="44" pos:column="29">-&gt;<pos:position pos:line="44" pos:column="34"/></operator><name pos:line="44" pos:column="31">pattern<pos:position pos:line="44" pos:column="38"/></name></name></expr></argument>)<pos:position pos:line="44" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="40"/></expr_stmt>
	<if pos:line="45" pos:column="9">if <condition pos:line="45" pos:column="12">(<expr><name pos:line="45" pos:column="13">pat_len<pos:position pos:line="45" pos:column="20"/></name> <operator pos:line="45" pos:column="21">&gt;<pos:position pos:line="45" pos:column="25"/></operator> <literal type="number" pos:line="45" pos:column="23">1<pos:position pos:line="45" pos:column="24"/></literal> <operator pos:line="45" pos:column="25">&amp;&amp;<pos:position pos:line="45" pos:column="35"/></operator> <name><name pos:line="45" pos:column="28">ret<pos:position pos:line="45" pos:column="31"/></name><operator pos:line="45" pos:column="31">-&gt;<pos:position pos:line="45" pos:column="36"/></operator><name pos:line="45" pos:column="33">pattern<pos:position pos:line="45" pos:column="40"/></name><index pos:line="45" pos:column="40">[<expr><name pos:line="45" pos:column="41">pat_len<pos:position pos:line="45" pos:column="48"/></name><operator pos:line="45" pos:column="48">-<pos:position pos:line="45" pos:column="49"/></operator><literal type="number" pos:line="45" pos:column="49">1<pos:position pos:line="45" pos:column="50"/></literal></expr>]<pos:position pos:line="45" pos:column="51"/></index></name> <operator pos:line="45" pos:column="52">==<pos:position pos:line="45" pos:column="54"/></operator> <literal type="char" pos:line="45" pos:column="55">'/'<pos:position pos:line="45" pos:column="58"/></literal></expr>)<pos:position pos:line="45" pos:column="59"/></condition><then pos:line="45" pos:column="59"> <block pos:line="45" pos:column="60">{
		<expr_stmt><expr><name><name pos:line="46" pos:column="17">ret<pos:position pos:line="46" pos:column="20"/></name><operator pos:line="46" pos:column="20">-&gt;<pos:position pos:line="46" pos:column="25"/></operator><name pos:line="46" pos:column="22">pattern<pos:position pos:line="46" pos:column="29"/></name><index pos:line="46" pos:column="29">[<expr><name pos:line="46" pos:column="30">pat_len<pos:position pos:line="46" pos:column="37"/></name><operator pos:line="46" pos:column="37">-<pos:position pos:line="46" pos:column="38"/></operator><literal type="number" pos:line="46" pos:column="38">1<pos:position pos:line="46" pos:column="39"/></literal></expr>]<pos:position pos:line="46" pos:column="40"/></index></name> <operator pos:line="46" pos:column="41">=<pos:position pos:line="46" pos:column="42"/></operator> <literal type="number" pos:line="46" pos:column="43">0<pos:position pos:line="46" pos:column="44"/></literal></expr>;<pos:position pos:line="46" pos:column="45"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="47" pos:column="17">ret<pos:position pos:line="47" pos:column="20"/></name><operator pos:line="47" pos:column="20">-&gt;<pos:position pos:line="47" pos:column="25"/></operator><name pos:line="47" pos:column="22">directory<pos:position pos:line="47" pos:column="31"/></name></name> <operator pos:line="47" pos:column="32">=<pos:position pos:line="47" pos:column="33"/></operator> <literal type="number" pos:line="47" pos:column="34">1<pos:position pos:line="47" pos:column="35"/></literal></expr>;<pos:position pos:line="47" pos:column="36"/></expr_stmt>
	}<pos:position pos:line="48" pos:column="10"/></block></then></if>

	<for pos:line="50" pos:column="9">for <control pos:line="50" pos:column="13">(<init><expr><name pos:line="50" pos:column="14">cp<pos:position pos:line="50" pos:column="16"/></name> <operator pos:line="50" pos:column="17">=<pos:position pos:line="50" pos:column="18"/></operator> <name><name pos:line="50" pos:column="19">ret<pos:position pos:line="50" pos:column="22"/></name><operator pos:line="50" pos:column="22">-&gt;<pos:position pos:line="50" pos:column="27"/></operator><name pos:line="50" pos:column="24">pattern<pos:position pos:line="50" pos:column="31"/></name></name></expr>;<pos:position pos:line="50" pos:column="32"/></init> <condition><expr><operator pos:line="50" pos:column="33">(<pos:position pos:line="50" pos:column="34"/></operator><name pos:line="50" pos:column="34">cp<pos:position pos:line="50" pos:column="36"/></name> <operator pos:line="50" pos:column="37">=<pos:position pos:line="50" pos:column="38"/></operator> <call><name pos:line="50" pos:column="39">strchr<pos:position pos:line="50" pos:column="45"/></name><argument_list pos:line="50" pos:column="45">(<argument><expr><name pos:line="50" pos:column="46">cp<pos:position pos:line="50" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="50" pos:column="50">'/'<pos:position pos:line="50" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="50" pos:column="54"/></argument_list></call><operator pos:line="50" pos:column="54">)<pos:position pos:line="50" pos:column="55"/></operator> <operator pos:line="50" pos:column="56">!=<pos:position pos:line="50" pos:column="58"/></operator> <name pos:line="50" pos:column="59">NULL<pos:position pos:line="50" pos:column="63"/></name></expr>;<pos:position pos:line="50" pos:column="64"/></condition> <incr><expr><name pos:line="50" pos:column="65">cp<pos:position pos:line="50" pos:column="67"/></name><operator pos:line="50" pos:column="67">++<pos:position pos:line="50" pos:column="69"/></operator></expr></incr>)<pos:position pos:line="50" pos:column="70"/></control>
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="51" pos:column="17">ret<pos:position pos:line="51" pos:column="20"/></name><operator pos:line="51" pos:column="20">-&gt;<pos:position pos:line="51" pos:column="25"/></operator><name pos:line="51" pos:column="22">slash_cnt<pos:position pos:line="51" pos:column="31"/></name></name><operator pos:line="51" pos:column="31">++<pos:position pos:line="51" pos:column="33"/></operator></expr>;<pos:position pos:line="51" pos:column="34"/></expr_stmt></block></for>

	<return pos:line="53" pos:column="9">return <expr><name pos:line="53" pos:column="16">ret<pos:position pos:line="53" pos:column="19"/></name></expr>;<pos:position pos:line="53" pos:column="20"/></return>
}<pos:position pos:line="54" pos:column="2"/></block></function></unit>
