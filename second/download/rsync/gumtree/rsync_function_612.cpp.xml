<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_function_612.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name pos:line="2" pos:column="1">see_deflate_token<pos:position pos:line="2" pos:column="18"/></name><parameter_list pos:line="2" pos:column="18">(<parameter><decl><type><name pos:line="2" pos:column="19">char<pos:position pos:line="2" pos:column="23"/></name> <modifier pos:line="2" pos:column="24">*<pos:position pos:line="2" pos:column="25"/></modifier></type><name pos:line="2" pos:column="25">buf<pos:position pos:line="2" pos:column="28"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="30">int<pos:position pos:line="2" pos:column="33"/></name></type> <name pos:line="2" pos:column="34">len<pos:position pos:line="2" pos:column="37"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="38"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">int<pos:position pos:line="4" pos:column="8"/></name></type> <name pos:line="4" pos:column="9">r<pos:position pos:line="4" pos:column="10"/></name></decl>;<pos:position pos:line="4" pos:column="11"/></decl_stmt>

    <expr_stmt><expr><name><name pos:line="6" pos:column="5">rx_strm<pos:position pos:line="6" pos:column="12"/></name><operator pos:line="6" pos:column="12">.<pos:position pos:line="6" pos:column="13"/></operator><name pos:line="6" pos:column="13">next_in<pos:position pos:line="6" pos:column="20"/></name></name> <operator pos:line="6" pos:column="21">=<pos:position pos:line="6" pos:column="22"/></operator> <operator pos:line="6" pos:column="23">(<pos:position pos:line="6" pos:column="24"/></operator><name pos:line="6" pos:column="24">Bytef<pos:position pos:line="6" pos:column="29"/></name> <operator pos:line="6" pos:column="30">*<pos:position pos:line="6" pos:column="31"/></operator><operator pos:line="6" pos:column="31">)<pos:position pos:line="6" pos:column="32"/></operator><name pos:line="6" pos:column="32">buf<pos:position pos:line="6" pos:column="35"/></name></expr>;<pos:position pos:line="6" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="7" pos:column="5">rx_strm<pos:position pos:line="7" pos:column="12"/></name><operator pos:line="7" pos:column="12">.<pos:position pos:line="7" pos:column="13"/></operator><name pos:line="7" pos:column="13">avail_in<pos:position pos:line="7" pos:column="21"/></name></name> <operator pos:line="7" pos:column="22">=<pos:position pos:line="7" pos:column="23"/></operator> <name pos:line="7" pos:column="24">len<pos:position pos:line="7" pos:column="27"/></name></expr>;<pos:position pos:line="7" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><name pos:line="8" pos:column="5">r<pos:position pos:line="8" pos:column="6"/></name> <operator pos:line="8" pos:column="7">=<pos:position pos:line="8" pos:column="8"/></operator> <call><name pos:line="8" pos:column="9">inflateIncomp<pos:position pos:line="8" pos:column="22"/></name><argument_list pos:line="8" pos:column="22">(<argument><expr><operator pos:line="8" pos:column="23">&amp;<pos:position pos:line="8" pos:column="28"/></operator><name pos:line="8" pos:column="24">rx_strm<pos:position pos:line="8" pos:column="31"/></name></expr></argument>)<pos:position pos:line="8" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="33"/></expr_stmt>
    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><name pos:line="9" pos:column="9">r<pos:position pos:line="9" pos:column="10"/></name> <operator pos:line="9" pos:column="11">!=<pos:position pos:line="9" pos:column="13"/></operator> <name pos:line="9" pos:column="14">Z_OK<pos:position pos:line="9" pos:column="18"/></name></expr>)<pos:position pos:line="9" pos:column="19"/></condition><then pos:line="9" pos:column="19"> <block pos:line="9" pos:column="20">{
	<expr_stmt><expr><call><name pos:line="10" pos:column="9">fprintf<pos:position pos:line="10" pos:column="16"/></name><argument_list pos:line="10" pos:column="16">(<argument><expr><name pos:line="10" pos:column="17">FERROR<pos:position pos:line="10" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="10" pos:column="25">"inflateIncomp returned %d\n"<pos:position pos:line="10" pos:column="54"/></literal></expr></argument>, <argument><expr><name pos:line="10" pos:column="56">r<pos:position pos:line="10" pos:column="57"/></name></expr></argument>)<pos:position pos:line="10" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="59"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="11" pos:column="9">exit_cleanup<pos:position pos:line="11" pos:column="21"/></name><argument_list pos:line="11" pos:column="21">(<argument><expr><literal type="number" pos:line="11" pos:column="22">1<pos:position pos:line="11" pos:column="23"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="25"/></expr_stmt>
    }<pos:position pos:line="12" pos:column="6"/></block></then></if>
}<pos:position pos:line="13" pos:column="2"/></block></function></unit>
