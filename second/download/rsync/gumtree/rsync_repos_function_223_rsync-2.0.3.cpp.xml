<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_223_rsync-2.0.3.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">main<pos:position pos:line="1" pos:column="9"/></name><parameter_list pos:line="1" pos:column="9">(<parameter><decl><type><name pos:line="1" pos:column="10">int<pos:position pos:line="1" pos:column="13"/></name></type> <name pos:line="1" pos:column="14">argc<pos:position pos:line="1" pos:column="18"/></name></decl></parameter>,<parameter><decl><type><name pos:line="1" pos:column="19">char<pos:position pos:line="1" pos:column="23"/></name> <modifier pos:line="1" pos:column="24">*<pos:position pos:line="1" pos:column="25"/></modifier></type><name><name pos:line="1" pos:column="25">argv<pos:position pos:line="1" pos:column="29"/></name><index pos:line="1" pos:column="29">[]<pos:position pos:line="1" pos:column="31"/></index></name></decl></parameter>)<pos:position pos:line="1" pos:column="32"/></parameter_list>
<block pos:line="2" pos:column="1">{       
	<decl_stmt><decl><specifier pos:line="3" pos:column="9">extern<pos:position pos:line="3" pos:column="15"/></specifier> <type><name pos:line="3" pos:column="16">int<pos:position pos:line="3" pos:column="19"/></name></type> <name pos:line="3" pos:column="20">am_root<pos:position pos:line="3" pos:column="27"/></name></decl>;<pos:position pos:line="3" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><specifier pos:line="4" pos:column="9">extern<pos:position pos:line="4" pos:column="15"/></specifier> <type><name pos:line="4" pos:column="16">int<pos:position pos:line="4" pos:column="19"/></name></type> <name pos:line="4" pos:column="20">orig_umask<pos:position pos:line="4" pos:column="30"/></name></decl>;<pos:position pos:line="4" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><specifier pos:line="5" pos:column="9">extern<pos:position pos:line="5" pos:column="15"/></specifier> <type><name pos:line="5" pos:column="16">int<pos:position pos:line="5" pos:column="19"/></name></type> <name pos:line="5" pos:column="20">dry_run<pos:position pos:line="5" pos:column="27"/></name></decl>;<pos:position pos:line="5" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><specifier pos:line="6" pos:column="9">extern<pos:position pos:line="6" pos:column="15"/></specifier> <type><name pos:line="6" pos:column="16">int<pos:position pos:line="6" pos:column="19"/></name></type> <name pos:line="6" pos:column="20">am_daemon<pos:position pos:line="6" pos:column="29"/></name></decl>;<pos:position pos:line="6" pos:column="30"/></decl_stmt>
	<decl_stmt><decl><specifier pos:line="7" pos:column="9">extern<pos:position pos:line="7" pos:column="15"/></specifier> <type><name pos:line="7" pos:column="16">int<pos:position pos:line="7" pos:column="19"/></name></type> <name pos:line="7" pos:column="20">am_server<pos:position pos:line="7" pos:column="29"/></name></decl>;<pos:position pos:line="7" pos:column="30"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="9" pos:column="9">signal<pos:position pos:line="9" pos:column="15"/></name><argument_list pos:line="9" pos:column="15">(<argument><expr><name pos:line="9" pos:column="16">SIGUSR1<pos:position pos:line="9" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="25">sigusr1_handler<pos:position pos:line="9" pos:column="40"/></name></expr></argument>)<pos:position pos:line="9" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="42"/></expr_stmt>

	<expr_stmt><expr><name pos:line="11" pos:column="9">starttime<pos:position pos:line="11" pos:column="18"/></name> <operator pos:line="11" pos:column="19">=<pos:position pos:line="11" pos:column="20"/></operator> <call><name pos:line="11" pos:column="21">time<pos:position pos:line="11" pos:column="25"/></name><argument_list pos:line="11" pos:column="25">(<argument><expr><name pos:line="11" pos:column="26">NULL<pos:position pos:line="11" pos:column="30"/></name></expr></argument>)<pos:position pos:line="11" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="32"/></expr_stmt>
	<expr_stmt><expr><name pos:line="12" pos:column="9">am_root<pos:position pos:line="12" pos:column="16"/></name> <operator pos:line="12" pos:column="17">=<pos:position pos:line="12" pos:column="18"/></operator> <operator pos:line="12" pos:column="19">(<pos:position pos:line="12" pos:column="20"/></operator><call><name pos:line="12" pos:column="20">getuid<pos:position pos:line="12" pos:column="26"/></name><argument_list pos:line="12" pos:column="26">()<pos:position pos:line="12" pos:column="28"/></argument_list></call> <operator pos:line="12" pos:column="29">==<pos:position pos:line="12" pos:column="31"/></operator> <literal type="number" pos:line="12" pos:column="32">0<pos:position pos:line="12" pos:column="33"/></literal><operator pos:line="12" pos:column="33">)<pos:position pos:line="12" pos:column="34"/></operator></expr>;<pos:position pos:line="12" pos:column="35"/></expr_stmt>

	<if pos:line="14" pos:column="9">if <condition pos:line="14" pos:column="12">(<expr><name pos:line="14" pos:column="13">argc<pos:position pos:line="14" pos:column="17"/></name> <operator pos:line="14" pos:column="18">&lt;<pos:position pos:line="14" pos:column="22"/></operator> <literal type="number" pos:line="14" pos:column="20">2<pos:position pos:line="14" pos:column="21"/></literal></expr>)<pos:position pos:line="14" pos:column="22"/></condition><then pos:line="14" pos:column="22"> <block pos:line="14" pos:column="23">{
		<expr_stmt><expr><call><name pos:line="15" pos:column="17">usage<pos:position pos:line="15" pos:column="22"/></name><argument_list pos:line="15" pos:column="22">(<argument><expr><name pos:line="15" pos:column="23">FERROR<pos:position pos:line="15" pos:column="29"/></name></expr></argument>)<pos:position pos:line="15" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="31"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="16" pos:column="17">exit<pos:position pos:line="16" pos:column="21"/></name><argument_list pos:line="16" pos:column="21">(<argument><expr><literal type="number" pos:line="16" pos:column="22">1<pos:position pos:line="16" pos:column="23"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="25"/></expr_stmt>
	}<pos:position pos:line="17" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="19" pos:column="9">/* we set a 0 umask so that correct file permissions can be
	   carried across */</comment>
	<expr_stmt><expr><name pos:line="21" pos:column="9">orig_umask<pos:position pos:line="21" pos:column="19"/></name> <operator pos:line="21" pos:column="20">=<pos:position pos:line="21" pos:column="21"/></operator> <operator pos:line="21" pos:column="22">(<pos:position pos:line="21" pos:column="23"/></operator><name pos:line="21" pos:column="23">int<pos:position pos:line="21" pos:column="26"/></name><operator pos:line="21" pos:column="26">)<pos:position pos:line="21" pos:column="27"/></operator><call><name pos:line="21" pos:column="27">umask<pos:position pos:line="21" pos:column="32"/></name><argument_list pos:line="21" pos:column="32">(<argument><expr><literal type="number" pos:line="21" pos:column="33">0<pos:position pos:line="21" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="36"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="23" pos:column="9">parse_arguments<pos:position pos:line="23" pos:column="24"/></name><argument_list pos:line="23" pos:column="24">(<argument><expr><name pos:line="23" pos:column="25">argc<pos:position pos:line="23" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="31">argv<pos:position pos:line="23" pos:column="35"/></name></expr></argument>)<pos:position pos:line="23" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="37"/></expr_stmt>

	<expr_stmt><expr><name pos:line="25" pos:column="9">argc<pos:position pos:line="25" pos:column="13"/></name> <operator pos:line="25" pos:column="14">-=<pos:position pos:line="25" pos:column="16"/></operator> <name pos:line="25" pos:column="17">optind<pos:position pos:line="25" pos:column="23"/></name></expr>;<pos:position pos:line="25" pos:column="24"/></expr_stmt>
	<expr_stmt><expr><name pos:line="26" pos:column="9">argv<pos:position pos:line="26" pos:column="13"/></name> <operator pos:line="26" pos:column="14">+=<pos:position pos:line="26" pos:column="16"/></operator> <name pos:line="26" pos:column="17">optind<pos:position pos:line="26" pos:column="23"/></name></expr>;<pos:position pos:line="26" pos:column="24"/></expr_stmt>
	<expr_stmt><expr><name pos:line="27" pos:column="9">optind<pos:position pos:line="27" pos:column="15"/></name> <operator pos:line="27" pos:column="16">=<pos:position pos:line="27" pos:column="17"/></operator> <literal type="number" pos:line="27" pos:column="18">0<pos:position pos:line="27" pos:column="19"/></literal></expr>;<pos:position pos:line="27" pos:column="20"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="29" pos:column="9">signal<pos:position pos:line="29" pos:column="15"/></name><argument_list pos:line="29" pos:column="15">(<argument><expr><name pos:line="29" pos:column="16">SIGCHLD<pos:position pos:line="29" pos:column="23"/></name></expr></argument>,<argument><expr><name pos:line="29" pos:column="24">SIG_IGN<pos:position pos:line="29" pos:column="31"/></name></expr></argument>)<pos:position pos:line="29" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="33"/></expr_stmt>
	<macro><name pos:line="30" pos:column="9">signal<pos:position pos:line="30" pos:column="15"/></name><argument_list pos:line="30" pos:column="15">(<argument pos:line="30" pos:column="16">SIGINT<pos:position pos:line="30" pos:column="22"/></argument>,<argument pos:line="30" pos:column="23">SIGNAL_CAST sig_int<pos:position pos:line="30" pos:column="42"/></argument>)<pos:position pos:line="30" pos:column="43"/></argument_list></macro><empty_stmt pos:line="30" pos:column="43">;<pos:position pos:line="30" pos:column="44"/></empty_stmt>
	<macro><name pos:line="31" pos:column="9">signal<pos:position pos:line="31" pos:column="15"/></name><argument_list pos:line="31" pos:column="15">(<argument pos:line="31" pos:column="16">SIGPIPE<pos:position pos:line="31" pos:column="23"/></argument>,<argument pos:line="31" pos:column="24">SIGNAL_CAST sig_int<pos:position pos:line="31" pos:column="43"/></argument>)<pos:position pos:line="31" pos:column="44"/></argument_list></macro><empty_stmt pos:line="31" pos:column="44">;<pos:position pos:line="31" pos:column="45"/></empty_stmt>
	<macro><name pos:line="32" pos:column="9">signal<pos:position pos:line="32" pos:column="15"/></name><argument_list pos:line="32" pos:column="15">(<argument pos:line="32" pos:column="16">SIGHUP<pos:position pos:line="32" pos:column="22"/></argument>,<argument pos:line="32" pos:column="23">SIGNAL_CAST sig_int<pos:position pos:line="32" pos:column="42"/></argument>)<pos:position pos:line="32" pos:column="43"/></argument_list></macro><empty_stmt pos:line="32" pos:column="43">;<pos:position pos:line="32" pos:column="44"/></empty_stmt>

	<if pos:line="34" pos:column="9">if <condition pos:line="34" pos:column="12">(<expr><name pos:line="34" pos:column="13">am_daemon<pos:position pos:line="34" pos:column="22"/></name></expr>)<pos:position pos:line="34" pos:column="23"/></condition><then pos:line="34" pos:column="23"> <block pos:line="34" pos:column="24">{
		<return pos:line="35" pos:column="17">return <expr><call><name pos:line="35" pos:column="24">daemon_main<pos:position pos:line="35" pos:column="35"/></name><argument_list pos:line="35" pos:column="35">()<pos:position pos:line="35" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="38"/></return>
	}<pos:position pos:line="36" pos:column="10"/></block></then></if>

	<if pos:line="38" pos:column="9">if <condition pos:line="38" pos:column="12">(<expr><name pos:line="38" pos:column="13">dry_run<pos:position pos:line="38" pos:column="20"/></name></expr>)<pos:position pos:line="38" pos:column="21"/></condition><then pos:line="38" pos:column="21">
		<block type="pseudo"><expr_stmt><expr><name pos:line="39" pos:column="17">verbose<pos:position pos:line="39" pos:column="24"/></name> <operator pos:line="39" pos:column="25">=<pos:position pos:line="39" pos:column="26"/></operator> <call><name pos:line="39" pos:column="27">MAX<pos:position pos:line="39" pos:column="30"/></name><argument_list pos:line="39" pos:column="30">(<argument><expr><name pos:line="39" pos:column="31">verbose<pos:position pos:line="39" pos:column="38"/></name></expr></argument>,<argument><expr><literal type="number" pos:line="39" pos:column="39">1<pos:position pos:line="39" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="42"/></expr_stmt></block></then></if>

<cpp:ifndef pos:line="41" pos:column="1">#<cpp:directive pos:line="41" pos:column="2">ifndef<pos:position pos:line="41" pos:column="8"/></cpp:directive> <name pos:line="41" pos:column="9">SUPPORT_LINKS<pos:position pos:line="41" pos:column="22"/></name></cpp:ifndef>
	<if pos:line="42" pos:column="9">if <condition pos:line="42" pos:column="12">(<expr><operator pos:line="42" pos:column="13">!<pos:position pos:line="42" pos:column="14"/></operator><name pos:line="42" pos:column="14">am_server<pos:position pos:line="42" pos:column="23"/></name> <operator pos:line="42" pos:column="24">&amp;&amp;<pos:position pos:line="42" pos:column="34"/></operator> <name pos:line="42" pos:column="27">preserve_links<pos:position pos:line="42" pos:column="41"/></name></expr>)<pos:position pos:line="42" pos:column="42"/></condition><then pos:line="42" pos:column="42"> <block pos:line="42" pos:column="43">{
		<expr_stmt><expr><call><name pos:line="43" pos:column="17">rprintf<pos:position pos:line="43" pos:column="24"/></name><argument_list pos:line="43" pos:column="24">(<argument><expr><name pos:line="43" pos:column="25">FERROR<pos:position pos:line="43" pos:column="31"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="43" pos:column="32">"ERROR: symbolic links not supported\n"<pos:position pos:line="43" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="73"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="44" pos:column="17">exit_cleanup<pos:position pos:line="44" pos:column="29"/></name><argument_list pos:line="44" pos:column="29">(<argument><expr><literal type="number" pos:line="44" pos:column="30">1<pos:position pos:line="44" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="33"/></expr_stmt>
	}<pos:position pos:line="45" pos:column="10"/></block></then></if>
<cpp:endif pos:line="46" pos:column="1">#<cpp:directive pos:line="46" pos:column="2">endif<pos:position pos:line="46" pos:column="7"/></cpp:directive></cpp:endif>

	<if pos:line="48" pos:column="9">if <condition pos:line="48" pos:column="12">(<expr><name pos:line="48" pos:column="13">am_server<pos:position pos:line="48" pos:column="22"/></name></expr>)<pos:position pos:line="48" pos:column="23"/></condition><then pos:line="48" pos:column="23"> <block pos:line="48" pos:column="24">{
		<expr_stmt><expr><call><name pos:line="49" pos:column="17">start_server<pos:position pos:line="49" pos:column="29"/></name><argument_list pos:line="49" pos:column="29">(<argument><expr><name pos:line="49" pos:column="30">STDIN_FILENO<pos:position pos:line="49" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="44">STDOUT_FILENO<pos:position pos:line="49" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="59">argc<pos:position pos:line="49" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="65">argv<pos:position pos:line="49" pos:column="69"/></name></expr></argument>)<pos:position pos:line="49" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="71"/></expr_stmt>
	}<pos:position pos:line="50" pos:column="10"/></block></then></if>

	<return pos:line="52" pos:column="9">return <expr><call><name pos:line="52" pos:column="16">start_client<pos:position pos:line="52" pos:column="28"/></name><argument_list pos:line="52" pos:column="28">(<argument><expr><name pos:line="52" pos:column="29">argc<pos:position pos:line="52" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="35">argv<pos:position pos:line="52" pos:column="39"/></name></expr></argument>)<pos:position pos:line="52" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="41"/></return>
}<pos:position pos:line="53" pos:column="2"/></block></function></unit>
