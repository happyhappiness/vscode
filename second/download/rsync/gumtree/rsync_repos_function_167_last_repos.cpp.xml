<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_167_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">read_buf<pos:position pos:line="1" pos:column="14"/></name><parameter_list pos:line="1" pos:column="14">(<parameter><decl><type><name pos:line="1" pos:column="15">int<pos:position pos:line="1" pos:column="18"/></name></type> <name pos:line="1" pos:column="19">f<pos:position pos:line="1" pos:column="20"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="22">char<pos:position pos:line="1" pos:column="26"/></name> <modifier pos:line="1" pos:column="27">*<pos:position pos:line="1" pos:column="28"/></modifier></type><name pos:line="1" pos:column="28">buf<pos:position pos:line="1" pos:column="31"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="33">size_t<pos:position pos:line="1" pos:column="39"/></name></type> <name pos:line="1" pos:column="40">len<pos:position pos:line="1" pos:column="43"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="44"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<if pos:line="3" pos:column="9">if <condition pos:line="3" pos:column="12">(<expr><name pos:line="3" pos:column="13">f<pos:position pos:line="3" pos:column="14"/></name> <operator pos:line="3" pos:column="15">!=<pos:position pos:line="3" pos:column="17"/></operator> <name><name pos:line="3" pos:column="18">iobuf<pos:position pos:line="3" pos:column="23"/></name><operator pos:line="3" pos:column="23">.<pos:position pos:line="3" pos:column="24"/></operator><name pos:line="3" pos:column="24">in_fd<pos:position pos:line="3" pos:column="29"/></name></name></expr>)<pos:position pos:line="3" pos:column="30"/></condition><then pos:line="3" pos:column="30"> <block pos:line="3" pos:column="31">{
		<if pos:line="4" pos:column="17">if <condition pos:line="4" pos:column="20">(<expr><call><name pos:line="4" pos:column="21">safe_read<pos:position pos:line="4" pos:column="30"/></name><argument_list pos:line="4" pos:column="30">(<argument><expr><name pos:line="4" pos:column="31">f<pos:position pos:line="4" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="4" pos:column="34">buf<pos:position pos:line="4" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="4" pos:column="39">len<pos:position pos:line="4" pos:column="42"/></name></expr></argument>)<pos:position pos:line="4" pos:column="43"/></argument_list></call> <operator pos:line="4" pos:column="44">!=<pos:position pos:line="4" pos:column="46"/></operator> <name pos:line="4" pos:column="47">len<pos:position pos:line="4" pos:column="50"/></name></expr>)<pos:position pos:line="4" pos:column="51"/></condition><then pos:line="4" pos:column="51">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="5" pos:column="25">whine_about_eof<pos:position pos:line="5" pos:column="40"/></name><argument_list pos:line="5" pos:column="40">(<argument><expr><name pos:line="5" pos:column="41">False<pos:position pos:line="5" pos:column="46"/></name></expr></argument>)<pos:position pos:line="5" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="48"/></expr_stmt></block></then></if> <comment type="block" pos:line="5" pos:column="49">/* Doesn't return. */</comment>
		<goto pos:line="6" pos:column="17">goto <name pos:line="6" pos:column="22">batch_copy<pos:position pos:line="6" pos:column="32"/></name>;<pos:position pos:line="6" pos:column="33"/></goto>
	}<pos:position pos:line="7" pos:column="10"/></block></then></if>

	<if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><operator pos:line="9" pos:column="13">!<pos:position pos:line="9" pos:column="14"/></operator><name pos:line="9" pos:column="14">IN_MULTIPLEXED<pos:position pos:line="9" pos:column="28"/></name></expr>)<pos:position pos:line="9" pos:column="29"/></condition><then pos:line="9" pos:column="29"> <block pos:line="9" pos:column="30">{
		<expr_stmt><expr><call><name pos:line="10" pos:column="17">raw_read_buf<pos:position pos:line="10" pos:column="29"/></name><argument_list pos:line="10" pos:column="29">(<argument><expr><name pos:line="10" pos:column="30">buf<pos:position pos:line="10" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="35">len<pos:position pos:line="10" pos:column="38"/></name></expr></argument>)<pos:position pos:line="10" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="40"/></expr_stmt>
		<expr_stmt><expr><name pos:line="11" pos:column="17">total_data_read<pos:position pos:line="11" pos:column="32"/></name> <operator pos:line="11" pos:column="33">+=<pos:position pos:line="11" pos:column="35"/></operator> <name pos:line="11" pos:column="36">len<pos:position pos:line="11" pos:column="39"/></name></expr>;<pos:position pos:line="11" pos:column="40"/></expr_stmt>
		<if pos:line="12" pos:column="17">if <condition pos:line="12" pos:column="20">(<expr><name pos:line="12" pos:column="21">forward_flist_data<pos:position pos:line="12" pos:column="39"/></name></expr>)<pos:position pos:line="12" pos:column="40"/></condition><then pos:line="12" pos:column="40">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="13" pos:column="25">write_buf<pos:position pos:line="13" pos:column="34"/></name><argument_list pos:line="13" pos:column="34">(<argument><expr><name><name pos:line="13" pos:column="35">iobuf<pos:position pos:line="13" pos:column="40"/></name><operator pos:line="13" pos:column="40">.<pos:position pos:line="13" pos:column="41"/></operator><name pos:line="13" pos:column="41">out_fd<pos:position pos:line="13" pos:column="47"/></name></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="49">buf<pos:position pos:line="13" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="54">len<pos:position pos:line="13" pos:column="57"/></name></expr></argument>)<pos:position pos:line="13" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="59"/></expr_stmt></block></then></if>
	  <label><name pos:line="14" pos:column="11">batch_copy<pos:position pos:line="14" pos:column="21"/></name>:<pos:position pos:line="14" pos:column="22"/></label>
		<if pos:line="15" pos:column="17">if <condition pos:line="15" pos:column="20">(<expr><name pos:line="15" pos:column="21">f<pos:position pos:line="15" pos:column="22"/></name> <operator pos:line="15" pos:column="23">==<pos:position pos:line="15" pos:column="25"/></operator> <name pos:line="15" pos:column="26">write_batch_monitor_in<pos:position pos:line="15" pos:column="48"/></name></expr>)<pos:position pos:line="15" pos:column="49"/></condition><then pos:line="15" pos:column="49">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="16" pos:column="25">safe_write<pos:position pos:line="16" pos:column="35"/></name><argument_list pos:line="16" pos:column="35">(<argument><expr><name pos:line="16" pos:column="36">batch_fd<pos:position pos:line="16" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="46">buf<pos:position pos:line="16" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="51">len<pos:position pos:line="16" pos:column="54"/></name></expr></argument>)<pos:position pos:line="16" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="56"/></expr_stmt></block></then></if>
		<return pos:line="17" pos:column="17">return;<pos:position pos:line="17" pos:column="24"/></return>
	}<pos:position pos:line="18" pos:column="10"/></block></then></if>

	<while pos:line="20" pos:column="9">while <condition pos:line="20" pos:column="15">(<expr><literal type="number" pos:line="20" pos:column="16">1<pos:position pos:line="20" pos:column="17"/></literal></expr>)<pos:position pos:line="20" pos:column="18"/></condition> <block pos:line="20" pos:column="19">{
		<decl_stmt><decl><type><name pos:line="21" pos:column="17">size_t<pos:position pos:line="21" pos:column="23"/></name></type> <name pos:line="21" pos:column="24">siz<pos:position pos:line="21" pos:column="27"/></name></decl>;<pos:position pos:line="21" pos:column="28"/></decl_stmt>

		<while pos:line="23" pos:column="17">while <condition pos:line="23" pos:column="23">(<expr><operator pos:line="23" pos:column="24">!<pos:position pos:line="23" pos:column="25"/></operator><name><name pos:line="23" pos:column="25">iobuf<pos:position pos:line="23" pos:column="30"/></name><operator pos:line="23" pos:column="30">.<pos:position pos:line="23" pos:column="31"/></operator><name pos:line="23" pos:column="31">raw_input_ends_before<pos:position pos:line="23" pos:column="52"/></name></name></expr>)<pos:position pos:line="23" pos:column="53"/></condition>
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="24" pos:column="25">read_a_msg<pos:position pos:line="24" pos:column="35"/></name><argument_list pos:line="24" pos:column="35">()<pos:position pos:line="24" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="38"/></expr_stmt></block></while>

		<expr_stmt><expr><name pos:line="26" pos:column="17">siz<pos:position pos:line="26" pos:column="20"/></name> <operator pos:line="26" pos:column="21">=<pos:position pos:line="26" pos:column="22"/></operator> <call><name pos:line="26" pos:column="23">MIN<pos:position pos:line="26" pos:column="26"/></name><argument_list pos:line="26" pos:column="26">(<argument><expr><name pos:line="26" pos:column="27">len<pos:position pos:line="26" pos:column="30"/></name></expr></argument>, <argument><expr><name><name pos:line="26" pos:column="32">iobuf<pos:position pos:line="26" pos:column="37"/></name><operator pos:line="26" pos:column="37">.<pos:position pos:line="26" pos:column="38"/></operator><name pos:line="26" pos:column="38">raw_input_ends_before<pos:position pos:line="26" pos:column="59"/></name></name> <operator pos:line="26" pos:column="60">-<pos:position pos:line="26" pos:column="61"/></operator> <name><name pos:line="26" pos:column="62">iobuf<pos:position pos:line="26" pos:column="67"/></name><operator pos:line="26" pos:column="67">.<pos:position pos:line="26" pos:column="68"/></operator><name pos:line="26" pos:column="68">in<pos:position pos:line="26" pos:column="70"/></name><operator pos:line="26" pos:column="70">.<pos:position pos:line="26" pos:column="71"/></operator><name pos:line="26" pos:column="71">pos<pos:position pos:line="26" pos:column="74"/></name></name></expr></argument>)<pos:position pos:line="26" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="76"/></expr_stmt>
		<if pos:line="27" pos:column="17">if <condition pos:line="27" pos:column="20">(<expr><name pos:line="27" pos:column="21">siz<pos:position pos:line="27" pos:column="24"/></name> <operator pos:line="27" pos:column="25">&gt;=<pos:position pos:line="27" pos:column="30"/></operator> <name><name pos:line="27" pos:column="28">iobuf<pos:position pos:line="27" pos:column="33"/></name><operator pos:line="27" pos:column="33">.<pos:position pos:line="27" pos:column="34"/></operator><name pos:line="27" pos:column="34">in<pos:position pos:line="27" pos:column="36"/></name><operator pos:line="27" pos:column="36">.<pos:position pos:line="27" pos:column="37"/></operator><name pos:line="27" pos:column="37">size<pos:position pos:line="27" pos:column="41"/></name></name></expr>)<pos:position pos:line="27" pos:column="42"/></condition><then pos:line="27" pos:column="42">
			<block type="pseudo"><expr_stmt><expr><name pos:line="28" pos:column="25">siz<pos:position pos:line="28" pos:column="28"/></name> <operator pos:line="28" pos:column="29">=<pos:position pos:line="28" pos:column="30"/></operator> <name><name pos:line="28" pos:column="31">iobuf<pos:position pos:line="28" pos:column="36"/></name><operator pos:line="28" pos:column="36">.<pos:position pos:line="28" pos:column="37"/></operator><name pos:line="28" pos:column="37">in<pos:position pos:line="28" pos:column="39"/></name><operator pos:line="28" pos:column="39">.<pos:position pos:line="28" pos:column="40"/></operator><name pos:line="28" pos:column="40">size<pos:position pos:line="28" pos:column="44"/></name></name></expr>;<pos:position pos:line="28" pos:column="45"/></expr_stmt></block></then></if>
		<expr_stmt><expr><call><name pos:line="29" pos:column="17">raw_read_buf<pos:position pos:line="29" pos:column="29"/></name><argument_list pos:line="29" pos:column="29">(<argument><expr><name pos:line="29" pos:column="30">buf<pos:position pos:line="29" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="35">siz<pos:position pos:line="29" pos:column="38"/></name></expr></argument>)<pos:position pos:line="29" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="40"/></expr_stmt>
		<expr_stmt><expr><name pos:line="30" pos:column="17">total_data_read<pos:position pos:line="30" pos:column="32"/></name> <operator pos:line="30" pos:column="33">+=<pos:position pos:line="30" pos:column="35"/></operator> <name pos:line="30" pos:column="36">siz<pos:position pos:line="30" pos:column="39"/></name></expr>;<pos:position pos:line="30" pos:column="40"/></expr_stmt>

		<if pos:line="32" pos:column="17">if <condition pos:line="32" pos:column="20">(<expr><name pos:line="32" pos:column="21">forward_flist_data<pos:position pos:line="32" pos:column="39"/></name></expr>)<pos:position pos:line="32" pos:column="40"/></condition><then pos:line="32" pos:column="40">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="33" pos:column="25">write_buf<pos:position pos:line="33" pos:column="34"/></name><argument_list pos:line="33" pos:column="34">(<argument><expr><name><name pos:line="33" pos:column="35">iobuf<pos:position pos:line="33" pos:column="40"/></name><operator pos:line="33" pos:column="40">.<pos:position pos:line="33" pos:column="41"/></operator><name pos:line="33" pos:column="41">out_fd<pos:position pos:line="33" pos:column="47"/></name></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="49">buf<pos:position pos:line="33" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="54">siz<pos:position pos:line="33" pos:column="57"/></name></expr></argument>)<pos:position pos:line="33" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="59"/></expr_stmt></block></then></if>

		<if pos:line="35" pos:column="17">if <condition pos:line="35" pos:column="20">(<expr><name pos:line="35" pos:column="21">f<pos:position pos:line="35" pos:column="22"/></name> <operator pos:line="35" pos:column="23">==<pos:position pos:line="35" pos:column="25"/></operator> <name pos:line="35" pos:column="26">write_batch_monitor_in<pos:position pos:line="35" pos:column="48"/></name></expr>)<pos:position pos:line="35" pos:column="49"/></condition><then pos:line="35" pos:column="49">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="36" pos:column="25">safe_write<pos:position pos:line="36" pos:column="35"/></name><argument_list pos:line="36" pos:column="35">(<argument><expr><name pos:line="36" pos:column="36">batch_fd<pos:position pos:line="36" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="46">buf<pos:position pos:line="36" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="51">siz<pos:position pos:line="36" pos:column="54"/></name></expr></argument>)<pos:position pos:line="36" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="56"/></expr_stmt></block></then></if>

		<if pos:line="38" pos:column="17">if <condition pos:line="38" pos:column="20">(<expr><operator pos:line="38" pos:column="21">(<pos:position pos:line="38" pos:column="22"/></operator><name pos:line="38" pos:column="22">len<pos:position pos:line="38" pos:column="25"/></name> <operator pos:line="38" pos:column="26">-=<pos:position pos:line="38" pos:column="28"/></operator> <name pos:line="38" pos:column="29">siz<pos:position pos:line="38" pos:column="32"/></name><operator pos:line="38" pos:column="32">)<pos:position pos:line="38" pos:column="33"/></operator> <operator pos:line="38" pos:column="34">==<pos:position pos:line="38" pos:column="36"/></operator> <literal type="number" pos:line="38" pos:column="37">0<pos:position pos:line="38" pos:column="38"/></literal></expr>)<pos:position pos:line="38" pos:column="39"/></condition><then pos:line="38" pos:column="39">
			<block type="pseudo"><break pos:line="39" pos:column="25">break;<pos:position pos:line="39" pos:column="31"/></break></block></then></if>
		<expr_stmt><expr><name pos:line="40" pos:column="17">buf<pos:position pos:line="40" pos:column="20"/></name> <operator pos:line="40" pos:column="21">+=<pos:position pos:line="40" pos:column="23"/></operator> <name pos:line="40" pos:column="24">siz<pos:position pos:line="40" pos:column="27"/></name></expr>;<pos:position pos:line="40" pos:column="28"/></expr_stmt>
	}<pos:position pos:line="41" pos:column="10"/></block></while>
}<pos:position pos:line="42" pos:column="2"/></block></function></unit>
