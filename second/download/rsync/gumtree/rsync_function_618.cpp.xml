<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_function_618.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">piped_child<pos:position pos:line="1" pos:column="16"/></name><parameter_list pos:line="1" pos:column="16">(<parameter><decl><type><name pos:line="1" pos:column="17">char<pos:position pos:line="1" pos:column="21"/></name> <modifier pos:line="1" pos:column="22">*<pos:position pos:line="1" pos:column="23"/></modifier><modifier pos:line="1" pos:column="23">*<pos:position pos:line="1" pos:column="24"/></modifier></type><name pos:line="1" pos:column="24">command<pos:position pos:line="1" pos:column="31"/></name></decl></parameter>,<parameter><decl><type><name pos:line="1" pos:column="32">int<pos:position pos:line="1" pos:column="35"/></name> <modifier pos:line="1" pos:column="36">*<pos:position pos:line="1" pos:column="37"/></modifier></type><name pos:line="1" pos:column="37">f_in<pos:position pos:line="1" pos:column="41"/></name></decl></parameter>,<parameter><decl><type><name pos:line="1" pos:column="42">int<pos:position pos:line="1" pos:column="45"/></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">f_out<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="53"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">int<pos:position pos:line="3" pos:column="6"/></name></type> <name pos:line="3" pos:column="7">pid<pos:position pos:line="3" pos:column="10"/></name></decl>;<pos:position pos:line="3" pos:column="11"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name><name pos:line="4" pos:column="7">to_child_pipe<pos:position pos:line="4" pos:column="20"/></name><index pos:line="4" pos:column="20">[<expr><literal type="number" pos:line="4" pos:column="21">2<pos:position pos:line="4" pos:column="22"/></literal></expr>]<pos:position pos:line="4" pos:column="23"/></index></name></decl>;<pos:position pos:line="4" pos:column="24"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">int<pos:position pos:line="5" pos:column="6"/></name></type> <name><name pos:line="5" pos:column="7">from_child_pipe<pos:position pos:line="5" pos:column="22"/></name><index pos:line="5" pos:column="22">[<expr><literal type="number" pos:line="5" pos:column="23">2<pos:position pos:line="5" pos:column="24"/></literal></expr>]<pos:position pos:line="5" pos:column="25"/></index></name></decl>;<pos:position pos:line="5" pos:column="26"/></decl_stmt>

  <if pos:line="7" pos:column="3">if <condition pos:line="7" pos:column="6">(<expr><call><name pos:line="7" pos:column="7">pipe<pos:position pos:line="7" pos:column="11"/></name><argument_list pos:line="7" pos:column="11">(<argument><expr><name pos:line="7" pos:column="12">to_child_pipe<pos:position pos:line="7" pos:column="25"/></name></expr></argument>)<pos:position pos:line="7" pos:column="26"/></argument_list></call> <operator pos:line="7" pos:column="27">&lt;<pos:position pos:line="7" pos:column="31"/></operator> <literal type="number" pos:line="7" pos:column="29">0<pos:position pos:line="7" pos:column="30"/></literal> <operator pos:line="7" pos:column="31">||<pos:position pos:line="7" pos:column="33"/></operator>
      <call><name pos:line="8" pos:column="7">pipe<pos:position pos:line="8" pos:column="11"/></name><argument_list pos:line="8" pos:column="11">(<argument><expr><name pos:line="8" pos:column="12">from_child_pipe<pos:position pos:line="8" pos:column="27"/></name></expr></argument>)<pos:position pos:line="8" pos:column="28"/></argument_list></call> <operator pos:line="8" pos:column="29">&lt;<pos:position pos:line="8" pos:column="33"/></operator> <literal type="number" pos:line="8" pos:column="31">0<pos:position pos:line="8" pos:column="32"/></literal></expr>)<pos:position pos:line="8" pos:column="33"/></condition><then pos:line="8" pos:column="33"> <block pos:line="8" pos:column="34">{
    <expr_stmt><expr><call><name pos:line="9" pos:column="5">fprintf<pos:position pos:line="9" pos:column="12"/></name><argument_list pos:line="9" pos:column="12">(<argument><expr><name pos:line="9" pos:column="13">FERROR<pos:position pos:line="9" pos:column="19"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="9" pos:column="20">"pipe: %s\n"<pos:position pos:line="9" pos:column="32"/></literal></expr></argument>,<argument><expr><call><name pos:line="9" pos:column="33">strerror<pos:position pos:line="9" pos:column="41"/></name><argument_list pos:line="9" pos:column="41">(<argument><expr><name pos:line="9" pos:column="42">errno<pos:position pos:line="9" pos:column="47"/></name></expr></argument>)<pos:position pos:line="9" pos:column="48"/></argument_list></call></expr></argument>)<pos:position pos:line="9" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="50"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="10" pos:column="5">exit_cleanup<pos:position pos:line="10" pos:column="17"/></name><argument_list pos:line="10" pos:column="17">(<argument><expr><literal type="number" pos:line="10" pos:column="18">1<pos:position pos:line="10" pos:column="19"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="21"/></expr_stmt>
  }<pos:position pos:line="11" pos:column="4"/></block></then></if>


  <expr_stmt><expr><name pos:line="14" pos:column="3">pid<pos:position pos:line="14" pos:column="6"/></name> <operator pos:line="14" pos:column="7">=<pos:position pos:line="14" pos:column="8"/></operator> <call><name pos:line="14" pos:column="9">do_fork<pos:position pos:line="14" pos:column="16"/></name><argument_list pos:line="14" pos:column="16">()<pos:position pos:line="14" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="19"/></expr_stmt>
  <if pos:line="15" pos:column="3">if <condition pos:line="15" pos:column="6">(<expr><name pos:line="15" pos:column="7">pid<pos:position pos:line="15" pos:column="10"/></name> <operator pos:line="15" pos:column="11">&lt;<pos:position pos:line="15" pos:column="15"/></operator> <literal type="number" pos:line="15" pos:column="13">0<pos:position pos:line="15" pos:column="14"/></literal></expr>)<pos:position pos:line="15" pos:column="15"/></condition><then pos:line="15" pos:column="15"> <block pos:line="15" pos:column="16">{
    <expr_stmt><expr><call><name pos:line="16" pos:column="5">fprintf<pos:position pos:line="16" pos:column="12"/></name><argument_list pos:line="16" pos:column="12">(<argument><expr><name pos:line="16" pos:column="13">FERROR<pos:position pos:line="16" pos:column="19"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="16" pos:column="20">"fork: %s\n"<pos:position pos:line="16" pos:column="32"/></literal></expr></argument>,<argument><expr><call><name pos:line="16" pos:column="33">strerror<pos:position pos:line="16" pos:column="41"/></name><argument_list pos:line="16" pos:column="41">(<argument><expr><name pos:line="16" pos:column="42">errno<pos:position pos:line="16" pos:column="47"/></name></expr></argument>)<pos:position pos:line="16" pos:column="48"/></argument_list></call></expr></argument>)<pos:position pos:line="16" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="50"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="17" pos:column="5">exit_cleanup<pos:position pos:line="17" pos:column="17"/></name><argument_list pos:line="17" pos:column="17">(<argument><expr><literal type="number" pos:line="17" pos:column="18">1<pos:position pos:line="17" pos:column="19"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="21"/></expr_stmt>
  }<pos:position pos:line="18" pos:column="4"/></block></then></if>

  <if pos:line="20" pos:column="3">if <condition pos:line="20" pos:column="6">(<expr><name pos:line="20" pos:column="7">pid<pos:position pos:line="20" pos:column="10"/></name> <operator pos:line="20" pos:column="11">==<pos:position pos:line="20" pos:column="13"/></operator> <literal type="number" pos:line="20" pos:column="14">0<pos:position pos:line="20" pos:column="15"/></literal></expr>)<pos:position pos:line="20" pos:column="16"/></condition><then pos:line="20" pos:column="16">
    <block pos:line="21" pos:column="5">{
      <decl_stmt><decl><specifier pos:line="22" pos:column="7">extern<pos:position pos:line="22" pos:column="13"/></specifier> <type><name pos:line="22" pos:column="14">int<pos:position pos:line="22" pos:column="17"/></name></type> <name pos:line="22" pos:column="18">orig_umask<pos:position pos:line="22" pos:column="28"/></name></decl>;<pos:position pos:line="22" pos:column="29"/></decl_stmt>
      <if pos:line="23" pos:column="7">if <condition pos:line="23" pos:column="10">(<expr><call><name pos:line="23" pos:column="11">dup2<pos:position pos:line="23" pos:column="15"/></name><argument_list pos:line="23" pos:column="15">(<argument><expr><name><name pos:line="23" pos:column="16">to_child_pipe<pos:position pos:line="23" pos:column="29"/></name><index pos:line="23" pos:column="29">[<expr><literal type="number" pos:line="23" pos:column="30">0<pos:position pos:line="23" pos:column="31"/></literal></expr>]<pos:position pos:line="23" pos:column="32"/></index></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="34">STDIN_FILENO<pos:position pos:line="23" pos:column="46"/></name></expr></argument>)<pos:position pos:line="23" pos:column="47"/></argument_list></call> <operator pos:line="23" pos:column="48">&lt;<pos:position pos:line="23" pos:column="52"/></operator> <literal type="number" pos:line="23" pos:column="50">0<pos:position pos:line="23" pos:column="51"/></literal> <operator pos:line="23" pos:column="52">||<pos:position pos:line="23" pos:column="54"/></operator>
	  <call><name pos:line="24" pos:column="11">close<pos:position pos:line="24" pos:column="16"/></name><argument_list pos:line="24" pos:column="16">(<argument><expr><name><name pos:line="24" pos:column="17">to_child_pipe<pos:position pos:line="24" pos:column="30"/></name><index pos:line="24" pos:column="30">[<expr><literal type="number" pos:line="24" pos:column="31">1<pos:position pos:line="24" pos:column="32"/></literal></expr>]<pos:position pos:line="24" pos:column="33"/></index></name></expr></argument>)<pos:position pos:line="24" pos:column="34"/></argument_list></call> <operator pos:line="24" pos:column="35">&lt;<pos:position pos:line="24" pos:column="39"/></operator> <literal type="number" pos:line="24" pos:column="37">0<pos:position pos:line="24" pos:column="38"/></literal> <operator pos:line="24" pos:column="39">||<pos:position pos:line="24" pos:column="41"/></operator>
	  <call><name pos:line="25" pos:column="11">close<pos:position pos:line="25" pos:column="16"/></name><argument_list pos:line="25" pos:column="16">(<argument><expr><name><name pos:line="25" pos:column="17">from_child_pipe<pos:position pos:line="25" pos:column="32"/></name><index pos:line="25" pos:column="32">[<expr><literal type="number" pos:line="25" pos:column="33">0<pos:position pos:line="25" pos:column="34"/></literal></expr>]<pos:position pos:line="25" pos:column="35"/></index></name></expr></argument>)<pos:position pos:line="25" pos:column="36"/></argument_list></call> <operator pos:line="25" pos:column="37">&lt;<pos:position pos:line="25" pos:column="41"/></operator> <literal type="number" pos:line="25" pos:column="39">0<pos:position pos:line="25" pos:column="40"/></literal> <operator pos:line="25" pos:column="41">||<pos:position pos:line="25" pos:column="43"/></operator>
	  <call><name pos:line="26" pos:column="11">dup2<pos:position pos:line="26" pos:column="15"/></name><argument_list pos:line="26" pos:column="15">(<argument><expr><name><name pos:line="26" pos:column="16">from_child_pipe<pos:position pos:line="26" pos:column="31"/></name><index pos:line="26" pos:column="31">[<expr><literal type="number" pos:line="26" pos:column="32">1<pos:position pos:line="26" pos:column="33"/></literal></expr>]<pos:position pos:line="26" pos:column="34"/></index></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="36">STDOUT_FILENO<pos:position pos:line="26" pos:column="49"/></name></expr></argument>)<pos:position pos:line="26" pos:column="50"/></argument_list></call> <operator pos:line="26" pos:column="51">&lt;<pos:position pos:line="26" pos:column="55"/></operator> <literal type="number" pos:line="26" pos:column="53">0<pos:position pos:line="26" pos:column="54"/></literal></expr>)<pos:position pos:line="26" pos:column="55"/></condition><then pos:line="26" pos:column="55"> <block pos:line="26" pos:column="56">{
	<expr_stmt><expr><call><name pos:line="27" pos:column="9">fprintf<pos:position pos:line="27" pos:column="16"/></name><argument_list pos:line="27" pos:column="16">(<argument><expr><name pos:line="27" pos:column="17">FERROR<pos:position pos:line="27" pos:column="23"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="27" pos:column="24">"Failed to dup/close : %s\n"<pos:position pos:line="27" pos:column="52"/></literal></expr></argument>,<argument><expr><call><name pos:line="27" pos:column="53">strerror<pos:position pos:line="27" pos:column="61"/></name><argument_list pos:line="27" pos:column="61">(<argument><expr><name pos:line="27" pos:column="62">errno<pos:position pos:line="27" pos:column="67"/></name></expr></argument>)<pos:position pos:line="27" pos:column="68"/></argument_list></call></expr></argument>)<pos:position pos:line="27" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="70"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="28" pos:column="9">exit_cleanup<pos:position pos:line="28" pos:column="21"/></name><argument_list pos:line="28" pos:column="21">(<argument><expr><literal type="number" pos:line="28" pos:column="22">1<pos:position pos:line="28" pos:column="23"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="25"/></expr_stmt>
      }<pos:position pos:line="29" pos:column="8"/></block></then></if>
      <if pos:line="30" pos:column="7">if <condition pos:line="30" pos:column="10">(<expr><name><name pos:line="30" pos:column="11">to_child_pipe<pos:position pos:line="30" pos:column="24"/></name><index pos:line="30" pos:column="24">[<expr><literal type="number" pos:line="30" pos:column="25">0<pos:position pos:line="30" pos:column="26"/></literal></expr>]<pos:position pos:line="30" pos:column="27"/></index></name> <operator pos:line="30" pos:column="28">!=<pos:position pos:line="30" pos:column="30"/></operator> <name pos:line="30" pos:column="31">STDIN_FILENO<pos:position pos:line="30" pos:column="43"/></name></expr>)<pos:position pos:line="30" pos:column="44"/></condition><then pos:line="30" pos:column="44"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="30" pos:column="45">close<pos:position pos:line="30" pos:column="50"/></name><argument_list pos:line="30" pos:column="50">(<argument><expr><name><name pos:line="30" pos:column="51">to_child_pipe<pos:position pos:line="30" pos:column="64"/></name><index pos:line="30" pos:column="64">[<expr><literal type="number" pos:line="30" pos:column="65">0<pos:position pos:line="30" pos:column="66"/></literal></expr>]<pos:position pos:line="30" pos:column="67"/></index></name></expr></argument>)<pos:position pos:line="30" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="69"/></expr_stmt></block></then></if>
      <if pos:line="31" pos:column="7">if <condition pos:line="31" pos:column="10">(<expr><name><name pos:line="31" pos:column="11">from_child_pipe<pos:position pos:line="31" pos:column="26"/></name><index pos:line="31" pos:column="26">[<expr><literal type="number" pos:line="31" pos:column="27">1<pos:position pos:line="31" pos:column="28"/></literal></expr>]<pos:position pos:line="31" pos:column="29"/></index></name> <operator pos:line="31" pos:column="30">!=<pos:position pos:line="31" pos:column="32"/></operator> <name pos:line="31" pos:column="33">STDOUT_FILENO<pos:position pos:line="31" pos:column="46"/></name></expr>)<pos:position pos:line="31" pos:column="47"/></condition><then pos:line="31" pos:column="47"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="31" pos:column="48">close<pos:position pos:line="31" pos:column="53"/></name><argument_list pos:line="31" pos:column="53">(<argument><expr><name><name pos:line="31" pos:column="54">from_child_pipe<pos:position pos:line="31" pos:column="69"/></name><index pos:line="31" pos:column="69">[<expr><literal type="number" pos:line="31" pos:column="70">1<pos:position pos:line="31" pos:column="71"/></literal></expr>]<pos:position pos:line="31" pos:column="72"/></index></name></expr></argument>)<pos:position pos:line="31" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="74"/></expr_stmt></block></then></if>
      <expr_stmt><expr><call><name pos:line="32" pos:column="7">umask<pos:position pos:line="32" pos:column="12"/></name><argument_list pos:line="32" pos:column="12">(<argument><expr><name pos:line="32" pos:column="13">orig_umask<pos:position pos:line="32" pos:column="23"/></name></expr></argument>)<pos:position pos:line="32" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="25"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="33" pos:column="7">execvp<pos:position pos:line="33" pos:column="13"/></name><argument_list pos:line="33" pos:column="13">(<argument><expr><name><name pos:line="33" pos:column="14">command<pos:position pos:line="33" pos:column="21"/></name><index pos:line="33" pos:column="21">[<expr><literal type="number" pos:line="33" pos:column="22">0<pos:position pos:line="33" pos:column="23"/></literal></expr>]<pos:position pos:line="33" pos:column="24"/></index></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="26">command<pos:position pos:line="33" pos:column="33"/></name></expr></argument>)<pos:position pos:line="33" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="35"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="34" pos:column="7">fprintf<pos:position pos:line="34" pos:column="14"/></name><argument_list pos:line="34" pos:column="14">(<argument><expr><name pos:line="34" pos:column="15">FERROR<pos:position pos:line="34" pos:column="21"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="34" pos:column="22">"Failed to exec %s : %s\n"<pos:position pos:line="34" pos:column="48"/></literal></expr></argument>,
	      <argument><expr><name><name pos:line="35" pos:column="15">command<pos:position pos:line="35" pos:column="22"/></name><index pos:line="35" pos:column="22">[<expr><literal type="number" pos:line="35" pos:column="23">0<pos:position pos:line="35" pos:column="24"/></literal></expr>]<pos:position pos:line="35" pos:column="25"/></index></name></expr></argument>,<argument><expr><call><name pos:line="35" pos:column="26">strerror<pos:position pos:line="35" pos:column="34"/></name><argument_list pos:line="35" pos:column="34">(<argument><expr><name pos:line="35" pos:column="35">errno<pos:position pos:line="35" pos:column="40"/></name></expr></argument>)<pos:position pos:line="35" pos:column="41"/></argument_list></call></expr></argument>)<pos:position pos:line="35" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="43"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="36" pos:column="7">exit_cleanup<pos:position pos:line="36" pos:column="19"/></name><argument_list pos:line="36" pos:column="19">(<argument><expr><literal type="number" pos:line="36" pos:column="20">1<pos:position pos:line="36" pos:column="21"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="23"/></expr_stmt>
    }<pos:position pos:line="37" pos:column="6"/></block></then></if>

  <if pos:line="39" pos:column="3">if <condition pos:line="39" pos:column="6">(<expr><call><name pos:line="39" pos:column="7">close<pos:position pos:line="39" pos:column="12"/></name><argument_list pos:line="39" pos:column="12">(<argument><expr><name><name pos:line="39" pos:column="13">from_child_pipe<pos:position pos:line="39" pos:column="28"/></name><index pos:line="39" pos:column="28">[<expr><literal type="number" pos:line="39" pos:column="29">1<pos:position pos:line="39" pos:column="30"/></literal></expr>]<pos:position pos:line="39" pos:column="31"/></index></name></expr></argument>)<pos:position pos:line="39" pos:column="32"/></argument_list></call> <operator pos:line="39" pos:column="33">&lt;<pos:position pos:line="39" pos:column="37"/></operator> <literal type="number" pos:line="39" pos:column="35">0<pos:position pos:line="39" pos:column="36"/></literal> <operator pos:line="39" pos:column="37">||<pos:position pos:line="39" pos:column="39"/></operator>
      <call><name pos:line="40" pos:column="7">close<pos:position pos:line="40" pos:column="12"/></name><argument_list pos:line="40" pos:column="12">(<argument><expr><name><name pos:line="40" pos:column="13">to_child_pipe<pos:position pos:line="40" pos:column="26"/></name><index pos:line="40" pos:column="26">[<expr><literal type="number" pos:line="40" pos:column="27">0<pos:position pos:line="40" pos:column="28"/></literal></expr>]<pos:position pos:line="40" pos:column="29"/></index></name></expr></argument>)<pos:position pos:line="40" pos:column="30"/></argument_list></call> <operator pos:line="40" pos:column="31">&lt;<pos:position pos:line="40" pos:column="35"/></operator> <literal type="number" pos:line="40" pos:column="33">0<pos:position pos:line="40" pos:column="34"/></literal></expr>)<pos:position pos:line="40" pos:column="35"/></condition><then pos:line="40" pos:column="35"> <block pos:line="40" pos:column="36">{
    <expr_stmt><expr><call><name pos:line="41" pos:column="5">fprintf<pos:position pos:line="41" pos:column="12"/></name><argument_list pos:line="41" pos:column="12">(<argument><expr><name pos:line="41" pos:column="13">FERROR<pos:position pos:line="41" pos:column="19"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="41" pos:column="20">"Failed to close : %s\n"<pos:position pos:line="41" pos:column="44"/></literal></expr></argument>,<argument><expr><call><name pos:line="41" pos:column="45">strerror<pos:position pos:line="41" pos:column="53"/></name><argument_list pos:line="41" pos:column="53">(<argument><expr><name pos:line="41" pos:column="54">errno<pos:position pos:line="41" pos:column="59"/></name></expr></argument>)<pos:position pos:line="41" pos:column="60"/></argument_list></call></expr></argument>)<pos:position pos:line="41" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="62"/></expr_stmt>   
    <expr_stmt><expr><call><name pos:line="42" pos:column="5">exit_cleanup<pos:position pos:line="42" pos:column="17"/></name><argument_list pos:line="42" pos:column="17">(<argument><expr><literal type="number" pos:line="42" pos:column="18">1<pos:position pos:line="42" pos:column="19"/></literal></expr></argument>)<pos:position pos:line="42" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="21"/></expr_stmt>
  }<pos:position pos:line="43" pos:column="4"/></block></then></if>

  <expr_stmt><expr><operator pos:line="45" pos:column="3">*<pos:position pos:line="45" pos:column="4"/></operator><name pos:line="45" pos:column="4">f_in<pos:position pos:line="45" pos:column="8"/></name> <operator pos:line="45" pos:column="9">=<pos:position pos:line="45" pos:column="10"/></operator> <name><name pos:line="45" pos:column="11">from_child_pipe<pos:position pos:line="45" pos:column="26"/></name><index pos:line="45" pos:column="26">[<expr><literal type="number" pos:line="45" pos:column="27">0<pos:position pos:line="45" pos:column="28"/></literal></expr>]<pos:position pos:line="45" pos:column="29"/></index></name></expr>;<pos:position pos:line="45" pos:column="30"/></expr_stmt>
  <expr_stmt><expr><operator pos:line="46" pos:column="3">*<pos:position pos:line="46" pos:column="4"/></operator><name pos:line="46" pos:column="4">f_out<pos:position pos:line="46" pos:column="9"/></name> <operator pos:line="46" pos:column="10">=<pos:position pos:line="46" pos:column="11"/></operator> <name><name pos:line="46" pos:column="12">to_child_pipe<pos:position pos:line="46" pos:column="25"/></name><index pos:line="46" pos:column="25">[<expr><literal type="number" pos:line="46" pos:column="26">1<pos:position pos:line="46" pos:column="27"/></literal></expr>]<pos:position pos:line="46" pos:column="28"/></index></name></expr>;<pos:position pos:line="46" pos:column="29"/></expr_stmt>
  
  <return pos:line="48" pos:column="3">return <expr><name pos:line="48" pos:column="10">pid<pos:position pos:line="48" pos:column="13"/></name></expr>;<pos:position pos:line="48" pos:column="14"/></return>
}<pos:position pos:line="49" pos:column="2"/></block></function></unit>
