<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_221_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">write_filter_rules<pos:position pos:line="1" pos:column="31"/></name><parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><name pos:line="1" pos:column="32">int<pos:position pos:line="1" pos:column="35"/></name></type> <name pos:line="1" pos:column="36">fd<pos:position pos:line="1" pos:column="38"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="39"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">filter_rule<pos:position pos:line="3" pos:column="20"/></name> <modifier pos:line="3" pos:column="21">*<pos:position pos:line="3" pos:column="22"/></modifier></type><name pos:line="3" pos:column="22">ent<pos:position pos:line="3" pos:column="25"/></name></decl>;<pos:position pos:line="3" pos:column="26"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="5" pos:column="9">write_sbuf<pos:position pos:line="5" pos:column="19"/></name><argument_list pos:line="5" pos:column="19">(<argument><expr><name pos:line="5" pos:column="20">fd<pos:position pos:line="5" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="5" pos:column="24">" &lt;&lt;'#E#'\n"<pos:position pos:line="5" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="38"/></expr_stmt>
	<for pos:line="6" pos:column="9">for <control pos:line="6" pos:column="13">(<init><expr><name pos:line="6" pos:column="14">ent<pos:position pos:line="6" pos:column="17"/></name> <operator pos:line="6" pos:column="18">=<pos:position pos:line="6" pos:column="19"/></operator> <name><name pos:line="6" pos:column="20">filter_list<pos:position pos:line="6" pos:column="31"/></name><operator pos:line="6" pos:column="31">.<pos:position pos:line="6" pos:column="32"/></operator><name pos:line="6" pos:column="32">head<pos:position pos:line="6" pos:column="36"/></name></name></expr>;<pos:position pos:line="6" pos:column="37"/></init> <condition><expr><name pos:line="6" pos:column="38">ent<pos:position pos:line="6" pos:column="41"/></name></expr>;<pos:position pos:line="6" pos:column="42"/></condition> <incr><expr><name pos:line="6" pos:column="43">ent<pos:position pos:line="6" pos:column="46"/></name> <operator pos:line="6" pos:column="47">=<pos:position pos:line="6" pos:column="48"/></operator> <name><name pos:line="6" pos:column="49">ent<pos:position pos:line="6" pos:column="52"/></name><operator pos:line="6" pos:column="52">-&gt;<pos:position pos:line="6" pos:column="57"/></operator><name pos:line="6" pos:column="54">next<pos:position pos:line="6" pos:column="58"/></name></name></expr></incr>)<pos:position pos:line="6" pos:column="59"/></control> <block pos:line="6" pos:column="60">{
		<decl_stmt><decl><type><name pos:line="7" pos:column="17">unsigned<pos:position pos:line="7" pos:column="25"/></name> <name pos:line="7" pos:column="26">int<pos:position pos:line="7" pos:column="29"/></name></type> <name pos:line="7" pos:column="30">plen<pos:position pos:line="7" pos:column="34"/></name></decl>;<pos:position pos:line="7" pos:column="35"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="8" pos:column="17">char<pos:position pos:line="8" pos:column="21"/></name> <modifier pos:line="8" pos:column="22">*<pos:position pos:line="8" pos:column="23"/></modifier></type><name pos:line="8" pos:column="23">p<pos:position pos:line="8" pos:column="24"/></name> <init pos:line="8" pos:column="25">= <expr><call><name pos:line="8" pos:column="27">get_rule_prefix<pos:position pos:line="8" pos:column="42"/></name><argument_list pos:line="8" pos:column="42">(<argument><expr><name pos:line="8" pos:column="43">ent<pos:position pos:line="8" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="8" pos:column="48">"- "<pos:position pos:line="8" pos:column="52"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="8" pos:column="54">0<pos:position pos:line="8" pos:column="55"/></literal></expr></argument>, <argument><expr><operator pos:line="8" pos:column="57">&amp;<pos:position pos:line="8" pos:column="62"/></operator><name pos:line="8" pos:column="58">plen<pos:position pos:line="8" pos:column="62"/></name></expr></argument>)<pos:position pos:line="8" pos:column="63"/></argument_list></call></expr></init></decl>;<pos:position pos:line="8" pos:column="64"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="9" pos:column="17">write_buf<pos:position pos:line="9" pos:column="26"/></name><argument_list pos:line="9" pos:column="26">(<argument><expr><name pos:line="9" pos:column="27">fd<pos:position pos:line="9" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="31">p<pos:position pos:line="9" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="34">plen<pos:position pos:line="9" pos:column="38"/></name></expr></argument>)<pos:position pos:line="9" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="40"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="10" pos:column="17">write_sbuf<pos:position pos:line="10" pos:column="27"/></name><argument_list pos:line="10" pos:column="27">(<argument><expr><name pos:line="10" pos:column="28">fd<pos:position pos:line="10" pos:column="30"/></name></expr></argument>, <argument><expr><name><name pos:line="10" pos:column="32">ent<pos:position pos:line="10" pos:column="35"/></name><operator pos:line="10" pos:column="35">-&gt;<pos:position pos:line="10" pos:column="40"/></operator><name pos:line="10" pos:column="37">pattern<pos:position pos:line="10" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="10" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="46"/></expr_stmt>
		<if pos:line="11" pos:column="17">if <condition pos:line="11" pos:column="20">(<expr><name><name pos:line="11" pos:column="21">ent<pos:position pos:line="11" pos:column="24"/></name><operator pos:line="11" pos:column="24">-&gt;<pos:position pos:line="11" pos:column="29"/></operator><name pos:line="11" pos:column="26">rflags<pos:position pos:line="11" pos:column="32"/></name></name> <operator pos:line="11" pos:column="33">&amp;<pos:position pos:line="11" pos:column="38"/></operator> <name pos:line="11" pos:column="35">FILTRULE_DIRECTORY<pos:position pos:line="11" pos:column="53"/></name></expr>)<pos:position pos:line="11" pos:column="54"/></condition><then pos:line="11" pos:column="54">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="12" pos:column="25">write_byte<pos:position pos:line="12" pos:column="35"/></name><argument_list pos:line="12" pos:column="35">(<argument><expr><name pos:line="12" pos:column="36">fd<pos:position pos:line="12" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="12" pos:column="40">'/'<pos:position pos:line="12" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="45"/></expr_stmt></block></then></if>
		<expr_stmt><expr><call><name pos:line="13" pos:column="17">write_byte<pos:position pos:line="13" pos:column="27"/></name><argument_list pos:line="13" pos:column="27">(<argument><expr><name pos:line="13" pos:column="28">fd<pos:position pos:line="13" pos:column="30"/></name></expr></argument>, <argument><expr><ternary><condition><expr><name pos:line="13" pos:column="32">eol_nulls<pos:position pos:line="13" pos:column="41"/></name></expr> ?<pos:position pos:line="13" pos:column="43"/></condition><then pos:line="13" pos:column="43"> <expr><literal type="number" pos:line="13" pos:column="44">0<pos:position pos:line="13" pos:column="45"/></literal></expr> <pos:position pos:line="13" pos:column="46"/></then><else pos:line="13" pos:column="46">: <expr><literal type="char" pos:line="13" pos:column="48">'\n'<pos:position pos:line="13" pos:column="52"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="13" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="54"/></expr_stmt>
	}<pos:position pos:line="14" pos:column="10"/></block></for>
	<if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><name pos:line="15" pos:column="13">eol_nulls<pos:position pos:line="15" pos:column="22"/></name></expr>)<pos:position pos:line="15" pos:column="23"/></condition><then pos:line="15" pos:column="23">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="16" pos:column="17">write_sbuf<pos:position pos:line="16" pos:column="27"/></name><argument_list pos:line="16" pos:column="27">(<argument><expr><name pos:line="16" pos:column="28">fd<pos:position pos:line="16" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="32">";\n"<pos:position pos:line="16" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="39"/></expr_stmt></block></then></if>
	<expr_stmt><expr><call><name pos:line="17" pos:column="9">write_sbuf<pos:position pos:line="17" pos:column="19"/></name><argument_list pos:line="17" pos:column="19">(<argument><expr><name pos:line="17" pos:column="20">fd<pos:position pos:line="17" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="24">"#E#"<pos:position pos:line="17" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="31"/></expr_stmt>
}<pos:position pos:line="18" pos:column="2"/></block></function></unit>
