<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_818_rsync-3.0.9.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">ssize_t<pos:position pos:line="1" pos:column="8"/></name></type> <name pos:line="1" pos:column="9">sys_llistxattr<pos:position pos:line="1" pos:column="23"/></name><parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><specifier pos:line="1" pos:column="24">const<pos:position pos:line="1" pos:column="29"/></specifier> <name pos:line="1" pos:column="30">char<pos:position pos:line="1" pos:column="34"/></name> <modifier pos:line="1" pos:column="35">*<pos:position pos:line="1" pos:column="36"/></modifier></type><name pos:line="1" pos:column="36">path<pos:position pos:line="1" pos:column="40"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="42">char<pos:position pos:line="1" pos:column="46"/></name> <modifier pos:line="1" pos:column="47">*<pos:position pos:line="1" pos:column="48"/></modifier></type><name pos:line="1" pos:column="48">list<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="54">size_t<pos:position pos:line="1" pos:column="60"/></name></type> <name pos:line="1" pos:column="61">size<pos:position pos:line="1" pos:column="65"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="66"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">unsigned<pos:position pos:line="3" pos:column="17"/></name> <name pos:line="3" pos:column="18">char<pos:position pos:line="3" pos:column="22"/></name></type> <name pos:line="3" pos:column="23">keylen<pos:position pos:line="3" pos:column="29"/></name></decl>;<pos:position pos:line="3" pos:column="30"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">ssize_t<pos:position pos:line="4" pos:column="16"/></name></type> <name pos:line="4" pos:column="17">off<pos:position pos:line="4" pos:column="20"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="22">len<pos:position pos:line="4" pos:column="25"/></name> <init pos:line="4" pos:column="26">= <expr><call><name pos:line="4" pos:column="28">extattr_list_link<pos:position pos:line="4" pos:column="45"/></name><argument_list pos:line="4" pos:column="45">(<argument><expr><name pos:line="4" pos:column="46">path<pos:position pos:line="4" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="4" pos:column="52">EXTATTR_NAMESPACE_USER<pos:position pos:line="4" pos:column="74"/></name></expr></argument>, <argument><expr><name pos:line="4" pos:column="76">list<pos:position pos:line="4" pos:column="80"/></name></expr></argument>, <argument><expr><name pos:line="4" pos:column="82">size<pos:position pos:line="4" pos:column="86"/></name></expr></argument>)<pos:position pos:line="4" pos:column="87"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="88"/></decl_stmt>

	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><name pos:line="6" pos:column="13">len<pos:position pos:line="6" pos:column="16"/></name> <operator pos:line="6" pos:column="17">&lt;=<pos:position pos:line="6" pos:column="22"/></operator> <literal type="number" pos:line="6" pos:column="20">0<pos:position pos:line="6" pos:column="21"/></literal> <operator pos:line="6" pos:column="22">||<pos:position pos:line="6" pos:column="24"/></operator> <operator pos:line="6" pos:column="25">(<pos:position pos:line="6" pos:column="26"/></operator><name pos:line="6" pos:column="26">size_t<pos:position pos:line="6" pos:column="32"/></name><operator pos:line="6" pos:column="32">)<pos:position pos:line="6" pos:column="33"/></operator><name pos:line="6" pos:column="33">len<pos:position pos:line="6" pos:column="36"/></name> <operator pos:line="6" pos:column="37">&gt;<pos:position pos:line="6" pos:column="41"/></operator> <name pos:line="6" pos:column="39">size<pos:position pos:line="6" pos:column="43"/></name></expr>)<pos:position pos:line="6" pos:column="44"/></condition><then pos:line="6" pos:column="44">
		<block type="pseudo"><return pos:line="7" pos:column="17">return <expr><name pos:line="7" pos:column="24">len<pos:position pos:line="7" pos:column="27"/></name></expr>;<pos:position pos:line="7" pos:column="28"/></return></block></then></if>

	<comment type="block" pos:line="9" pos:column="9">/* FreeBSD puts a single-byte length before each string, with no '\0'
	 * terminator.  We need to change this into a series of null-terminted
	 * strings.  Since the size is the same, we can simply transform the
	 * output in place. */</comment>
	<for pos:line="13" pos:column="9">for <control pos:line="13" pos:column="13">(<init><expr><name pos:line="13" pos:column="14">off<pos:position pos:line="13" pos:column="17"/></name> <operator pos:line="13" pos:column="18">=<pos:position pos:line="13" pos:column="19"/></operator> <literal type="number" pos:line="13" pos:column="20">0<pos:position pos:line="13" pos:column="21"/></literal></expr>;<pos:position pos:line="13" pos:column="22"/></init> <condition><expr><name pos:line="13" pos:column="23">off<pos:position pos:line="13" pos:column="26"/></name> <operator pos:line="13" pos:column="27">&lt;<pos:position pos:line="13" pos:column="31"/></operator> <name pos:line="13" pos:column="29">len<pos:position pos:line="13" pos:column="32"/></name></expr>;<pos:position pos:line="13" pos:column="33"/></condition> <incr><expr><name pos:line="13" pos:column="34">off<pos:position pos:line="13" pos:column="37"/></name> <operator pos:line="13" pos:column="38">+=<pos:position pos:line="13" pos:column="40"/></operator> <name pos:line="13" pos:column="41">keylen<pos:position pos:line="13" pos:column="47"/></name> <operator pos:line="13" pos:column="48">+<pos:position pos:line="13" pos:column="49"/></operator> <literal type="number" pos:line="13" pos:column="50">1<pos:position pos:line="13" pos:column="51"/></literal></expr></incr>)<pos:position pos:line="13" pos:column="52"/></control> <block pos:line="13" pos:column="53">{
		<expr_stmt><expr><name pos:line="14" pos:column="17">keylen<pos:position pos:line="14" pos:column="23"/></name> <operator pos:line="14" pos:column="24">=<pos:position pos:line="14" pos:column="25"/></operator> <operator pos:line="14" pos:column="26">(<pos:position pos:line="14" pos:column="27"/></operator><operator pos:line="14" pos:column="27">(<pos:position pos:line="14" pos:column="28"/></operator><name pos:line="14" pos:column="28">unsigned<pos:position pos:line="14" pos:column="36"/></name> <name pos:line="14" pos:column="37">char<pos:position pos:line="14" pos:column="41"/></name><operator pos:line="14" pos:column="41">*<pos:position pos:line="14" pos:column="42"/></operator><operator pos:line="14" pos:column="42">)<pos:position pos:line="14" pos:column="43"/></operator><name pos:line="14" pos:column="43">list<pos:position pos:line="14" pos:column="47"/></name><operator pos:line="14" pos:column="47">)<pos:position pos:line="14" pos:column="48"/></operator><index pos:line="14" pos:column="48">[<expr><name pos:line="14" pos:column="49">off<pos:position pos:line="14" pos:column="52"/></name></expr>]<pos:position pos:line="14" pos:column="53"/></index></expr>;<pos:position pos:line="14" pos:column="54"/></expr_stmt>
		<if pos:line="15" pos:column="17">if <condition pos:line="15" pos:column="20">(<expr><name pos:line="15" pos:column="21">off<pos:position pos:line="15" pos:column="24"/></name> <operator pos:line="15" pos:column="25">+<pos:position pos:line="15" pos:column="26"/></operator> <name pos:line="15" pos:column="27">keylen<pos:position pos:line="15" pos:column="33"/></name> <operator pos:line="15" pos:column="34">&gt;=<pos:position pos:line="15" pos:column="39"/></operator> <name pos:line="15" pos:column="37">len<pos:position pos:line="15" pos:column="40"/></name></expr>)<pos:position pos:line="15" pos:column="41"/></condition><then pos:line="15" pos:column="41"> <block pos:line="15" pos:column="42">{
			<comment type="block" pos:line="16" pos:column="25">/* Should be impossible, but kernel bugs happen! */</comment>
			<expr_stmt><expr><name pos:line="17" pos:column="25">errno<pos:position pos:line="17" pos:column="30"/></name> <operator pos:line="17" pos:column="31">=<pos:position pos:line="17" pos:column="32"/></operator> <name pos:line="17" pos:column="33">EINVAL<pos:position pos:line="17" pos:column="39"/></name></expr>;<pos:position pos:line="17" pos:column="40"/></expr_stmt>
			<return pos:line="18" pos:column="25">return <expr><operator pos:line="18" pos:column="32">-<pos:position pos:line="18" pos:column="33"/></operator><literal type="number" pos:line="18" pos:column="33">1<pos:position pos:line="18" pos:column="34"/></literal></expr>;<pos:position pos:line="18" pos:column="35"/></return>
		}<pos:position pos:line="19" pos:column="18"/></block></then></if>
		<expr_stmt><expr><call><name pos:line="20" pos:column="17">memmove<pos:position pos:line="20" pos:column="24"/></name><argument_list pos:line="20" pos:column="24">(<argument><expr><name pos:line="20" pos:column="25">list<pos:position pos:line="20" pos:column="29"/></name><operator pos:line="20" pos:column="29">+<pos:position pos:line="20" pos:column="30"/></operator><name pos:line="20" pos:column="30">off<pos:position pos:line="20" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="35">list<pos:position pos:line="20" pos:column="39"/></name><operator pos:line="20" pos:column="39">+<pos:position pos:line="20" pos:column="40"/></operator><name pos:line="20" pos:column="40">off<pos:position pos:line="20" pos:column="43"/></name><operator pos:line="20" pos:column="43">+<pos:position pos:line="20" pos:column="44"/></operator><literal type="number" pos:line="20" pos:column="44">1<pos:position pos:line="20" pos:column="45"/></literal></expr></argument>, <argument><expr><name pos:line="20" pos:column="47">keylen<pos:position pos:line="20" pos:column="53"/></name></expr></argument>)<pos:position pos:line="20" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="55"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="21" pos:column="17">list<pos:position pos:line="21" pos:column="21"/></name><index pos:line="21" pos:column="21">[<expr><name pos:line="21" pos:column="22">off<pos:position pos:line="21" pos:column="25"/></name><operator pos:line="21" pos:column="25">+<pos:position pos:line="21" pos:column="26"/></operator><name pos:line="21" pos:column="26">keylen<pos:position pos:line="21" pos:column="32"/></name></expr>]<pos:position pos:line="21" pos:column="33"/></index></name> <operator pos:line="21" pos:column="34">=<pos:position pos:line="21" pos:column="35"/></operator> <literal type="char" pos:line="21" pos:column="36">'\0'<pos:position pos:line="21" pos:column="40"/></literal></expr>;<pos:position pos:line="21" pos:column="41"/></expr_stmt>
	}<pos:position pos:line="22" pos:column="10"/></block></for>

	<return pos:line="24" pos:column="9">return <expr><name pos:line="24" pos:column="16">len<pos:position pos:line="24" pos:column="19"/></name></expr>;<pos:position pos:line="24" pos:column="20"/></return>
}<pos:position pos:line="25" pos:column="2"/></block></function></unit>
