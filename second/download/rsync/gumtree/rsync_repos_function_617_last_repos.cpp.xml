<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_617_last_repos.cpp" pos:tabs="8"><decl_stmt><decl><type><name pos:line="1" pos:column="1">local<pos:position pos:line="1" pos:column="6"/></name> <name pos:line="1" pos:column="7">void<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">compress_block<pos:position pos:line="1" pos:column="26"/></name><argument_list pos:line="1" pos:column="26">(<argument><expr><name pos:line="1" pos:column="27">s<pos:position pos:line="1" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="1" pos:column="30">ltree<pos:position pos:line="1" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="1" pos:column="37">dtree<pos:position pos:line="1" pos:column="42"/></name></expr></argument>)<pos:position pos:line="1" pos:column="43"/></argument_list>
    <name pos:line="2" pos:column="5">deflate_state<pos:position pos:line="2" pos:column="18"/></name> <modifier pos:line="2" pos:column="19">*<pos:position pos:line="2" pos:column="20"/></modifier><name pos:line="2" pos:column="20">s<pos:position pos:line="2" pos:column="21"/></name></decl>;<pos:position pos:line="2" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="3" pos:column="5">const<pos:position pos:line="3" pos:column="10"/></specifier> <name pos:line="3" pos:column="11">ct_data<pos:position pos:line="3" pos:column="18"/></name> <modifier pos:line="3" pos:column="19">*<pos:position pos:line="3" pos:column="20"/></modifier></type><name pos:line="3" pos:column="20">ltree<pos:position pos:line="3" pos:column="25"/></name></decl>;<pos:position pos:line="3" pos:column="26"/></decl_stmt> <comment type="block" pos:line="3" pos:column="27">/* literal tree */</comment>
    <decl_stmt><decl><type><specifier pos:line="4" pos:column="5">const<pos:position pos:line="4" pos:column="10"/></specifier> <name pos:line="4" pos:column="11">ct_data<pos:position pos:line="4" pos:column="18"/></name> <modifier pos:line="4" pos:column="19">*<pos:position pos:line="4" pos:column="20"/></modifier></type><name pos:line="4" pos:column="20">dtree<pos:position pos:line="4" pos:column="25"/></name></decl>;<pos:position pos:line="4" pos:column="26"/></decl_stmt> <comment type="block" pos:line="4" pos:column="27">/* distance tree */</comment>
<block pos:line="5" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">unsigned<pos:position pos:line="6" pos:column="13"/></name></type> <name pos:line="6" pos:column="14">dist<pos:position pos:line="6" pos:column="18"/></name></decl>;<pos:position pos:line="6" pos:column="19"/></decl_stmt>      <comment type="block" pos:line="6" pos:column="25">/* distance of matched string */</comment>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">int<pos:position pos:line="7" pos:column="8"/></name></type> <name pos:line="7" pos:column="9">lc<pos:position pos:line="7" pos:column="11"/></name></decl>;<pos:position pos:line="7" pos:column="12"/></decl_stmt>             <comment type="block" pos:line="7" pos:column="25">/* match length or unmatched char (if dist == 0) */</comment>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">unsigned<pos:position pos:line="8" pos:column="13"/></name></type> <name pos:line="8" pos:column="14">lx<pos:position pos:line="8" pos:column="16"/></name> <init pos:line="8" pos:column="17">= <expr><literal type="number" pos:line="8" pos:column="19">0<pos:position pos:line="8" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="21"/></decl_stmt>    <comment type="block" pos:line="8" pos:column="25">/* running index in l_buf */</comment>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">unsigned<pos:position pos:line="9" pos:column="13"/></name></type> <name pos:line="9" pos:column="14">code<pos:position pos:line="9" pos:column="18"/></name></decl>;<pos:position pos:line="9" pos:column="19"/></decl_stmt>      <comment type="block" pos:line="9" pos:column="25">/* the code to send */</comment>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">int<pos:position pos:line="10" pos:column="8"/></name></type> <name pos:line="10" pos:column="9">extra<pos:position pos:line="10" pos:column="14"/></name></decl>;<pos:position pos:line="10" pos:column="15"/></decl_stmt>          <comment type="block" pos:line="10" pos:column="25">/* number of extra bits to send */</comment>

    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><name><name pos:line="12" pos:column="9">s<pos:position pos:line="12" pos:column="10"/></name><operator pos:line="12" pos:column="10">-&gt;<pos:position pos:line="12" pos:column="15"/></operator><name pos:line="12" pos:column="12">last_lit<pos:position pos:line="12" pos:column="20"/></name></name> <operator pos:line="12" pos:column="21">!=<pos:position pos:line="12" pos:column="23"/></operator> <literal type="number" pos:line="12" pos:column="24">0<pos:position pos:line="12" pos:column="25"/></literal></expr>)<pos:position pos:line="12" pos:column="26"/></condition><then pos:line="12" pos:column="26"> <block type="pseudo"><do pos:line="12" pos:column="27">do <block pos:line="12" pos:column="30">{
        <expr_stmt><expr><name pos:line="13" pos:column="9">dist<pos:position pos:line="13" pos:column="13"/></name> <operator pos:line="13" pos:column="14">=<pos:position pos:line="13" pos:column="15"/></operator> <name><name pos:line="13" pos:column="16">s<pos:position pos:line="13" pos:column="17"/></name><operator pos:line="13" pos:column="17">-&gt;<pos:position pos:line="13" pos:column="22"/></operator><name pos:line="13" pos:column="19">d_buf<pos:position pos:line="13" pos:column="24"/></name><index pos:line="13" pos:column="24">[<expr><name pos:line="13" pos:column="25">lx<pos:position pos:line="13" pos:column="27"/></name></expr>]<pos:position pos:line="13" pos:column="28"/></index></name></expr>;<pos:position pos:line="13" pos:column="29"/></expr_stmt>
        <expr_stmt><expr><name pos:line="14" pos:column="9">lc<pos:position pos:line="14" pos:column="11"/></name> <operator pos:line="14" pos:column="12">=<pos:position pos:line="14" pos:column="13"/></operator> <name><name pos:line="14" pos:column="14">s<pos:position pos:line="14" pos:column="15"/></name><operator pos:line="14" pos:column="15">-&gt;<pos:position pos:line="14" pos:column="20"/></operator><name pos:line="14" pos:column="17">l_buf<pos:position pos:line="14" pos:column="22"/></name><index pos:line="14" pos:column="22">[<expr><name pos:line="14" pos:column="23">lx<pos:position pos:line="14" pos:column="25"/></name><operator pos:line="14" pos:column="25">++<pos:position pos:line="14" pos:column="27"/></operator></expr>]<pos:position pos:line="14" pos:column="28"/></index></name></expr>;<pos:position pos:line="14" pos:column="29"/></expr_stmt>
        <if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><name pos:line="15" pos:column="13">dist<pos:position pos:line="15" pos:column="17"/></name> <operator pos:line="15" pos:column="18">==<pos:position pos:line="15" pos:column="20"/></operator> <literal type="number" pos:line="15" pos:column="21">0<pos:position pos:line="15" pos:column="22"/></literal></expr>)<pos:position pos:line="15" pos:column="23"/></condition><then pos:line="15" pos:column="23"> <block pos:line="15" pos:column="24">{
            <expr_stmt><expr><call><name pos:line="16" pos:column="13">send_code<pos:position pos:line="16" pos:column="22"/></name><argument_list pos:line="16" pos:column="22">(<argument><expr><name pos:line="16" pos:column="23">s<pos:position pos:line="16" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="26">lc<pos:position pos:line="16" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="30">ltree<pos:position pos:line="16" pos:column="35"/></name></expr></argument>)<pos:position pos:line="16" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="37"/></expr_stmt> <comment type="block" pos:line="16" pos:column="38">/* send a literal byte */</comment>
            <expr_stmt><expr><call><name pos:line="17" pos:column="13">Tracecv<pos:position pos:line="17" pos:column="20"/></name><argument_list pos:line="17" pos:column="20">(<argument><expr><call><name pos:line="17" pos:column="21">isgraph<pos:position pos:line="17" pos:column="28"/></name><argument_list pos:line="17" pos:column="28">(<argument><expr><name pos:line="17" pos:column="29">lc<pos:position pos:line="17" pos:column="31"/></name></expr></argument>)<pos:position pos:line="17" pos:column="32"/></argument_list></call></expr></argument>, <argument><expr><operator pos:line="17" pos:column="34">(<pos:position pos:line="17" pos:column="35"/></operator><name pos:line="17" pos:column="35">stderr<pos:position pos:line="17" pos:column="41"/></name><operator pos:line="17" pos:column="41">,<pos:position pos:line="17" pos:column="42"/></operator><literal type="string" pos:line="17" pos:column="42">" '%c' "<pos:position pos:line="17" pos:column="50"/></literal><operator pos:line="17" pos:column="50">,<pos:position pos:line="17" pos:column="51"/></operator> <name pos:line="17" pos:column="52">lc<pos:position pos:line="17" pos:column="54"/></name><operator pos:line="17" pos:column="54">)<pos:position pos:line="17" pos:column="55"/></operator></expr></argument>)<pos:position pos:line="17" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="57"/></expr_stmt>
        }<pos:position pos:line="18" pos:column="10"/></block></then> <else pos:line="18" pos:column="11">else <block pos:line="18" pos:column="16">{
            <comment type="block" pos:line="19" pos:column="13">/* Here, lc is the match length - MIN_MATCH */</comment>
            <expr_stmt><expr><name pos:line="20" pos:column="13">code<pos:position pos:line="20" pos:column="17"/></name> <operator pos:line="20" pos:column="18">=<pos:position pos:line="20" pos:column="19"/></operator> <name><name pos:line="20" pos:column="20">_length_code<pos:position pos:line="20" pos:column="32"/></name><index pos:line="20" pos:column="32">[<expr><name pos:line="20" pos:column="33">lc<pos:position pos:line="20" pos:column="35"/></name></expr>]<pos:position pos:line="20" pos:column="36"/></index></name></expr>;<pos:position pos:line="20" pos:column="37"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="21" pos:column="13">send_code<pos:position pos:line="21" pos:column="22"/></name><argument_list pos:line="21" pos:column="22">(<argument><expr><name pos:line="21" pos:column="23">s<pos:position pos:line="21" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="26">code<pos:position pos:line="21" pos:column="30"/></name><operator pos:line="21" pos:column="30">+<pos:position pos:line="21" pos:column="31"/></operator><name pos:line="21" pos:column="31">LITERALS<pos:position pos:line="21" pos:column="39"/></name><operator pos:line="21" pos:column="39">+<pos:position pos:line="21" pos:column="40"/></operator><literal type="number" pos:line="21" pos:column="40">1<pos:position pos:line="21" pos:column="41"/></literal></expr></argument>, <argument><expr><name pos:line="21" pos:column="43">ltree<pos:position pos:line="21" pos:column="48"/></name></expr></argument>)<pos:position pos:line="21" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="50"/></expr_stmt> <comment type="block" pos:line="21" pos:column="51">/* send the length code */</comment>
            <expr_stmt><expr><name pos:line="22" pos:column="13">extra<pos:position pos:line="22" pos:column="18"/></name> <operator pos:line="22" pos:column="19">=<pos:position pos:line="22" pos:column="20"/></operator> <name><name pos:line="22" pos:column="21">extra_lbits<pos:position pos:line="22" pos:column="32"/></name><index pos:line="22" pos:column="32">[<expr><name pos:line="22" pos:column="33">code<pos:position pos:line="22" pos:column="37"/></name></expr>]<pos:position pos:line="22" pos:column="38"/></index></name></expr>;<pos:position pos:line="22" pos:column="39"/></expr_stmt>
            <if pos:line="23" pos:column="13">if <condition pos:line="23" pos:column="16">(<expr><name pos:line="23" pos:column="17">extra<pos:position pos:line="23" pos:column="22"/></name> <operator pos:line="23" pos:column="23">!=<pos:position pos:line="23" pos:column="25"/></operator> <literal type="number" pos:line="23" pos:column="26">0<pos:position pos:line="23" pos:column="27"/></literal></expr>)<pos:position pos:line="23" pos:column="28"/></condition><then pos:line="23" pos:column="28"> <block pos:line="23" pos:column="29">{
                <expr_stmt><expr><name pos:line="24" pos:column="17">lc<pos:position pos:line="24" pos:column="19"/></name> <operator pos:line="24" pos:column="20">-=<pos:position pos:line="24" pos:column="22"/></operator> <name><name pos:line="24" pos:column="23">base_length<pos:position pos:line="24" pos:column="34"/></name><index pos:line="24" pos:column="34">[<expr><name pos:line="24" pos:column="35">code<pos:position pos:line="24" pos:column="39"/></name></expr>]<pos:position pos:line="24" pos:column="40"/></index></name></expr>;<pos:position pos:line="24" pos:column="41"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="25" pos:column="17">send_bits<pos:position pos:line="25" pos:column="26"/></name><argument_list pos:line="25" pos:column="26">(<argument><expr><name pos:line="25" pos:column="27">s<pos:position pos:line="25" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="30">lc<pos:position pos:line="25" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="34">extra<pos:position pos:line="25" pos:column="39"/></name></expr></argument>)<pos:position pos:line="25" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="41"/></expr_stmt>       <comment type="block" pos:line="25" pos:column="48">/* send the extra length bits */</comment>
            }<pos:position pos:line="26" pos:column="14"/></block></then></if>
            <expr_stmt><expr><name pos:line="27" pos:column="13">dist<pos:position pos:line="27" pos:column="17"/></name><operator pos:line="27" pos:column="17">--<pos:position pos:line="27" pos:column="19"/></operator></expr>;<pos:position pos:line="27" pos:column="20"/></expr_stmt> <comment type="block" pos:line="27" pos:column="21">/* dist is now the match distance - 1 */</comment>
            <expr_stmt><expr><name pos:line="28" pos:column="13">code<pos:position pos:line="28" pos:column="17"/></name> <operator pos:line="28" pos:column="18">=<pos:position pos:line="28" pos:column="19"/></operator> <call><name pos:line="28" pos:column="20">d_code<pos:position pos:line="28" pos:column="26"/></name><argument_list pos:line="28" pos:column="26">(<argument><expr><name pos:line="28" pos:column="27">dist<pos:position pos:line="28" pos:column="31"/></name></expr></argument>)<pos:position pos:line="28" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="33"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="29" pos:column="13">Assert<pos:position pos:line="29" pos:column="19"/></name> <argument_list pos:line="29" pos:column="20">(<argument><expr><name pos:line="29" pos:column="21">code<pos:position pos:line="29" pos:column="25"/></name> <operator pos:line="29" pos:column="26">&lt;<pos:position pos:line="29" pos:column="30"/></operator> <name pos:line="29" pos:column="28">D_CODES<pos:position pos:line="29" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="29" pos:column="37">"bad d_code"<pos:position pos:line="29" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="51"/></expr_stmt>

            <expr_stmt><expr><call><name pos:line="31" pos:column="13">send_code<pos:position pos:line="31" pos:column="22"/></name><argument_list pos:line="31" pos:column="22">(<argument><expr><name pos:line="31" pos:column="23">s<pos:position pos:line="31" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="26">code<pos:position pos:line="31" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="32">dtree<pos:position pos:line="31" pos:column="37"/></name></expr></argument>)<pos:position pos:line="31" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="39"/></expr_stmt>       <comment type="block" pos:line="31" pos:column="46">/* send the distance code */</comment>
            <expr_stmt><expr><name pos:line="32" pos:column="13">extra<pos:position pos:line="32" pos:column="18"/></name> <operator pos:line="32" pos:column="19">=<pos:position pos:line="32" pos:column="20"/></operator> <name><name pos:line="32" pos:column="21">extra_dbits<pos:position pos:line="32" pos:column="32"/></name><index pos:line="32" pos:column="32">[<expr><name pos:line="32" pos:column="33">code<pos:position pos:line="32" pos:column="37"/></name></expr>]<pos:position pos:line="32" pos:column="38"/></index></name></expr>;<pos:position pos:line="32" pos:column="39"/></expr_stmt>
            <if pos:line="33" pos:column="13">if <condition pos:line="33" pos:column="16">(<expr><name pos:line="33" pos:column="17">extra<pos:position pos:line="33" pos:column="22"/></name> <operator pos:line="33" pos:column="23">!=<pos:position pos:line="33" pos:column="25"/></operator> <literal type="number" pos:line="33" pos:column="26">0<pos:position pos:line="33" pos:column="27"/></literal></expr>)<pos:position pos:line="33" pos:column="28"/></condition><then pos:line="33" pos:column="28"> <block pos:line="33" pos:column="29">{
                <expr_stmt><expr><name pos:line="34" pos:column="17">dist<pos:position pos:line="34" pos:column="21"/></name> <operator pos:line="34" pos:column="22">-=<pos:position pos:line="34" pos:column="24"/></operator> <name><name pos:line="34" pos:column="25">base_dist<pos:position pos:line="34" pos:column="34"/></name><index pos:line="34" pos:column="34">[<expr><name pos:line="34" pos:column="35">code<pos:position pos:line="34" pos:column="39"/></name></expr>]<pos:position pos:line="34" pos:column="40"/></index></name></expr>;<pos:position pos:line="34" pos:column="41"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="35" pos:column="17">send_bits<pos:position pos:line="35" pos:column="26"/></name><argument_list pos:line="35" pos:column="26">(<argument><expr><name pos:line="35" pos:column="27">s<pos:position pos:line="35" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="30">dist<pos:position pos:line="35" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="36">extra<pos:position pos:line="35" pos:column="41"/></name></expr></argument>)<pos:position pos:line="35" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="43"/></expr_stmt>   <comment type="block" pos:line="35" pos:column="46">/* send the extra distance bits */</comment>
            }<pos:position pos:line="36" pos:column="14"/></block></then></if>
        }<pos:position pos:line="37" pos:column="10"/></block></else></if> <comment type="block" pos:line="37" pos:column="11">/* literal or match pair ? */</comment>

        <comment type="block" pos:line="39" pos:column="9">/* Check that the overlay between pending_buf and d_buf+l_buf is ok: */</comment>
        <expr_stmt><expr><call><name pos:line="40" pos:column="9">Assert<pos:position pos:line="40" pos:column="15"/></name><argument_list pos:line="40" pos:column="15">(<argument><expr><call pos:line="40" pos:column="16">(<name pos:line="40" pos:column="17">uInt<pos:position pos:line="40" pos:column="21"/></name>)<argument_list pos:line="40" pos:column="22">(<argument><expr><name><name pos:line="40" pos:column="23">s<pos:position pos:line="40" pos:column="24"/></name><operator pos:line="40" pos:column="24">-&gt;<pos:position pos:line="40" pos:column="29"/></operator><name pos:line="40" pos:column="26">pending<pos:position pos:line="40" pos:column="33"/></name></name></expr></argument>)<pos:position pos:line="40" pos:column="34"/></argument_list></call> <operator pos:line="40" pos:column="35">&lt;<pos:position pos:line="40" pos:column="39"/></operator> <name><name pos:line="40" pos:column="37">s<pos:position pos:line="40" pos:column="38"/></name><operator pos:line="40" pos:column="38">-&gt;<pos:position pos:line="40" pos:column="43"/></operator><name pos:line="40" pos:column="40">lit_bufsize<pos:position pos:line="40" pos:column="51"/></name></name> <operator pos:line="40" pos:column="52">+<pos:position pos:line="40" pos:column="53"/></operator> <literal type="number" pos:line="40" pos:column="54">2<pos:position pos:line="40" pos:column="55"/></literal><operator pos:line="40" pos:column="55">*<pos:position pos:line="40" pos:column="56"/></operator><name pos:line="40" pos:column="56">lx<pos:position pos:line="40" pos:column="58"/></name></expr></argument>,
               <argument><expr><literal type="string" pos:line="41" pos:column="16">"pendingBuf overflow"<pos:position pos:line="41" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="39"/></expr_stmt>

    }<pos:position pos:line="43" pos:column="6"/></block> while <condition pos:line="43" pos:column="13">(<expr><name pos:line="43" pos:column="14">lx<pos:position pos:line="43" pos:column="16"/></name> <operator pos:line="43" pos:column="17">&lt;<pos:position pos:line="43" pos:column="21"/></operator> <name><name pos:line="43" pos:column="19">s<pos:position pos:line="43" pos:column="20"/></name><operator pos:line="43" pos:column="20">-&gt;<pos:position pos:line="43" pos:column="25"/></operator><name pos:line="43" pos:column="22">last_lit<pos:position pos:line="43" pos:column="30"/></name></name></expr>)<pos:position pos:line="43" pos:column="31"/></condition>;<pos:position pos:line="43" pos:column="32"/></do></block></then></if>

    <expr_stmt><expr><call><name pos:line="45" pos:column="5">send_code<pos:position pos:line="45" pos:column="14"/></name><argument_list pos:line="45" pos:column="14">(<argument><expr><name pos:line="45" pos:column="15">s<pos:position pos:line="45" pos:column="16"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="18">END_BLOCK<pos:position pos:line="45" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="29">ltree<pos:position pos:line="45" pos:column="34"/></name></expr></argument>)<pos:position pos:line="45" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="36"/></expr_stmt>
}<pos:position pos:line="46" pos:column="2"/></block></unit>
