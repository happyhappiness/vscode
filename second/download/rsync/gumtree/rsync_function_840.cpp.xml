<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_function_840.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">start_daemon<pos:position pos:line="1" pos:column="17"/></name><parameter_list pos:line="1" pos:column="17">(<parameter><decl><type><name pos:line="1" pos:column="18">int<pos:position pos:line="1" pos:column="21"/></name></type> <name pos:line="1" pos:column="22">f_in<pos:position pos:line="1" pos:column="26"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="28">int<pos:position pos:line="1" pos:column="31"/></name></type> <name pos:line="1" pos:column="32">f_out<pos:position pos:line="1" pos:column="37"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="38"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">char<pos:position pos:line="3" pos:column="13"/></name></type> <name><name pos:line="3" pos:column="14">line<pos:position pos:line="3" pos:column="18"/></name><index pos:line="3" pos:column="18">[<expr><literal type="number" pos:line="3" pos:column="19">1024<pos:position pos:line="3" pos:column="23"/></literal></expr>]<pos:position pos:line="3" pos:column="24"/></index></name></decl>;<pos:position pos:line="3" pos:column="25"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier></type><name pos:line="4" pos:column="15">motd<pos:position pos:line="4" pos:column="19"/></name></decl>, <modifier pos:line="4" pos:column="21">*<pos:position pos:line="4" pos:column="22"/></modifier><decl><type ref="prev"/><name pos:line="4" pos:column="22">addr<pos:position pos:line="4" pos:column="26"/></name></decl>, <modifier pos:line="4" pos:column="28">*<pos:position pos:line="4" pos:column="29"/></modifier><decl><type ref="prev"/><name pos:line="4" pos:column="29">host<pos:position pos:line="4" pos:column="33"/></name></decl>;<pos:position pos:line="4" pos:column="34"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">i<pos:position pos:line="5" pos:column="14"/></name></decl>;<pos:position pos:line="5" pos:column="15"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="7" pos:column="9">io_set_sock_fds<pos:position pos:line="7" pos:column="24"/></name><argument_list pos:line="7" pos:column="24">(<argument><expr><name pos:line="7" pos:column="25">f_in<pos:position pos:line="7" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="31">f_out<pos:position pos:line="7" pos:column="36"/></name></expr></argument>)<pos:position pos:line="7" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="38"/></expr_stmt>

	<comment type="block" pos:line="9" pos:column="9">/* We must load the config file before calling any function that
	 * might cause log-file output to occur.  This ensures that the
	 * "log file" param gets honored for the 2 non-forked use-cases
	 * (when rsync is run by init and run by a remote shell). */</comment>
	<if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><operator pos:line="13" pos:column="13">!<pos:position pos:line="13" pos:column="14"/></operator><call><name pos:line="13" pos:column="14">lp_load<pos:position pos:line="13" pos:column="21"/></name><argument_list pos:line="13" pos:column="21">(<argument><expr><name pos:line="13" pos:column="22">config_file<pos:position pos:line="13" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="13" pos:column="35">0<pos:position pos:line="13" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="13" pos:column="38"/></condition><then pos:line="13" pos:column="38">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="14" pos:column="17">exit_cleanup<pos:position pos:line="14" pos:column="29"/></name><argument_list pos:line="14" pos:column="29">(<argument><expr><name pos:line="14" pos:column="30">RERR_SYNTAX<pos:position pos:line="14" pos:column="41"/></name></expr></argument>)<pos:position pos:line="14" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="43"/></expr_stmt></block></then></if>

	<expr_stmt><expr><name pos:line="16" pos:column="9">addr<pos:position pos:line="16" pos:column="13"/></name> <operator pos:line="16" pos:column="14">=<pos:position pos:line="16" pos:column="15"/></operator> <call><name pos:line="16" pos:column="16">client_addr<pos:position pos:line="16" pos:column="27"/></name><argument_list pos:line="16" pos:column="27">(<argument><expr><name pos:line="16" pos:column="28">f_in<pos:position pos:line="16" pos:column="32"/></name></expr></argument>)<pos:position pos:line="16" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="34"/></expr_stmt>
	<expr_stmt><expr><name pos:line="17" pos:column="9">host<pos:position pos:line="17" pos:column="13"/></name> <operator pos:line="17" pos:column="14">=<pos:position pos:line="17" pos:column="15"/></operator> <call><name pos:line="17" pos:column="16">client_name<pos:position pos:line="17" pos:column="27"/></name><argument_list pos:line="17" pos:column="27">(<argument><expr><name pos:line="17" pos:column="28">f_in<pos:position pos:line="17" pos:column="32"/></name></expr></argument>)<pos:position pos:line="17" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="34"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="18" pos:column="9">rprintf<pos:position pos:line="18" pos:column="16"/></name><argument_list pos:line="18" pos:column="16">(<argument><expr><name pos:line="18" pos:column="17">FLOG<pos:position pos:line="18" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="18" pos:column="23">"connect from %s (%s)\n"<pos:position pos:line="18" pos:column="47"/></literal></expr></argument>, <argument><expr><name pos:line="18" pos:column="49">host<pos:position pos:line="18" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="55">addr<pos:position pos:line="18" pos:column="59"/></name></expr></argument>)<pos:position pos:line="18" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="61"/></expr_stmt>

	<if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><operator pos:line="20" pos:column="13">!<pos:position pos:line="20" pos:column="14"/></operator><name pos:line="20" pos:column="14">am_server<pos:position pos:line="20" pos:column="23"/></name></expr>)<pos:position pos:line="20" pos:column="24"/></condition><then pos:line="20" pos:column="24"> <block pos:line="20" pos:column="25">{
		<expr_stmt><expr><call><name pos:line="21" pos:column="17">set_socket_options<pos:position pos:line="21" pos:column="35"/></name><argument_list pos:line="21" pos:column="35">(<argument><expr><name pos:line="21" pos:column="36">f_in<pos:position pos:line="21" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="21" pos:column="42">"SO_KEEPALIVE"<pos:position pos:line="21" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="58"/></expr_stmt>
		<if pos:line="22" pos:column="17">if <condition pos:line="22" pos:column="20">(<expr><name pos:line="22" pos:column="21">sockopts<pos:position pos:line="22" pos:column="29"/></name></expr>)<pos:position pos:line="22" pos:column="30"/></condition><then pos:line="22" pos:column="30">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="23" pos:column="25">set_socket_options<pos:position pos:line="23" pos:column="43"/></name><argument_list pos:line="23" pos:column="43">(<argument><expr><name pos:line="23" pos:column="44">f_in<pos:position pos:line="23" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="50">sockopts<pos:position pos:line="23" pos:column="58"/></name></expr></argument>)<pos:position pos:line="23" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="60"/></expr_stmt></block></then>
		<else pos:line="24" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="25" pos:column="25">set_socket_options<pos:position pos:line="25" pos:column="43"/></name><argument_list pos:line="25" pos:column="43">(<argument><expr><name pos:line="25" pos:column="44">f_in<pos:position pos:line="25" pos:column="48"/></name></expr></argument>, <argument><expr><call><name pos:line="25" pos:column="50">lp_socket_options<pos:position pos:line="25" pos:column="67"/></name><argument_list pos:line="25" pos:column="67">()<pos:position pos:line="25" pos:column="69"/></argument_list></call></expr></argument>)<pos:position pos:line="25" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="71"/></expr_stmt></block></else></if>
		<expr_stmt><expr><call><name pos:line="26" pos:column="17">set_nonblocking<pos:position pos:line="26" pos:column="32"/></name><argument_list pos:line="26" pos:column="32">(<argument><expr><name pos:line="26" pos:column="33">f_in<pos:position pos:line="26" pos:column="37"/></name></expr></argument>)<pos:position pos:line="26" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="39"/></expr_stmt>
	}<pos:position pos:line="27" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="29" pos:column="9">io_printf<pos:position pos:line="29" pos:column="18"/></name><argument_list pos:line="29" pos:column="18">(<argument><expr><name pos:line="29" pos:column="19">f_out<pos:position pos:line="29" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="29" pos:column="26">"@RSYNCD: %d\n"<pos:position pos:line="29" pos:column="41"/></literal></expr></argument>, <argument><expr><name pos:line="29" pos:column="43">protocol_version<pos:position pos:line="29" pos:column="59"/></name></expr></argument>)<pos:position pos:line="29" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="61"/></expr_stmt>

	<expr_stmt><expr><name pos:line="31" pos:column="9">motd<pos:position pos:line="31" pos:column="13"/></name> <operator pos:line="31" pos:column="14">=<pos:position pos:line="31" pos:column="15"/></operator> <call><name pos:line="31" pos:column="16">lp_motd_file<pos:position pos:line="31" pos:column="28"/></name><argument_list pos:line="31" pos:column="28">()<pos:position pos:line="31" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="31"/></expr_stmt>
	<if pos:line="32" pos:column="9">if <condition pos:line="32" pos:column="12">(<expr><name pos:line="32" pos:column="13">motd<pos:position pos:line="32" pos:column="17"/></name> <operator pos:line="32" pos:column="18">&amp;&amp;<pos:position pos:line="32" pos:column="28"/></operator> <operator pos:line="32" pos:column="21">*<pos:position pos:line="32" pos:column="22"/></operator><name pos:line="32" pos:column="22">motd<pos:position pos:line="32" pos:column="26"/></name></expr>)<pos:position pos:line="32" pos:column="27"/></condition><then pos:line="32" pos:column="27"> <block pos:line="32" pos:column="28">{
		<decl_stmt><decl><type><name pos:line="33" pos:column="17">FILE<pos:position pos:line="33" pos:column="21"/></name> <modifier pos:line="33" pos:column="22">*<pos:position pos:line="33" pos:column="23"/></modifier></type><name pos:line="33" pos:column="23">f<pos:position pos:line="33" pos:column="24"/></name> <init pos:line="33" pos:column="25">= <expr><call><name pos:line="33" pos:column="27">fopen<pos:position pos:line="33" pos:column="32"/></name><argument_list pos:line="33" pos:column="32">(<argument><expr><name pos:line="33" pos:column="33">motd<pos:position pos:line="33" pos:column="37"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="33" pos:column="38">"r"<pos:position pos:line="33" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="42"/></argument_list></call></expr></init></decl>;<pos:position pos:line="33" pos:column="43"/></decl_stmt>
		<while pos:line="34" pos:column="17">while <condition pos:line="34" pos:column="23">(<expr><name pos:line="34" pos:column="24">f<pos:position pos:line="34" pos:column="25"/></name> <operator pos:line="34" pos:column="26">&amp;&amp;<pos:position pos:line="34" pos:column="36"/></operator> <operator pos:line="34" pos:column="29">!<pos:position pos:line="34" pos:column="30"/></operator><call><name pos:line="34" pos:column="30">feof<pos:position pos:line="34" pos:column="34"/></name><argument_list pos:line="34" pos:column="34">(<argument><expr><name pos:line="34" pos:column="35">f<pos:position pos:line="34" pos:column="36"/></name></expr></argument>)<pos:position pos:line="34" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="34" pos:column="38"/></condition> <block pos:line="34" pos:column="39">{
			<decl_stmt><decl><type><name pos:line="35" pos:column="25">int<pos:position pos:line="35" pos:column="28"/></name></type> <name pos:line="35" pos:column="29">len<pos:position pos:line="35" pos:column="32"/></name> <init pos:line="35" pos:column="33">= <expr><call><name pos:line="35" pos:column="35">fread<pos:position pos:line="35" pos:column="40"/></name><argument_list pos:line="35" pos:column="40">(<argument><expr><name pos:line="35" pos:column="41">line<pos:position pos:line="35" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="35" pos:column="47">1<pos:position pos:line="35" pos:column="48"/></literal></expr></argument>, <argument><expr><sizeof pos:line="35" pos:column="50">sizeof <name pos:line="35" pos:column="57">line<pos:position pos:line="35" pos:column="61"/></name></sizeof> <operator pos:line="35" pos:column="62">-<pos:position pos:line="35" pos:column="63"/></operator> <literal type="number" pos:line="35" pos:column="64">1<pos:position pos:line="35" pos:column="65"/></literal></expr></argument>, <argument><expr><name pos:line="35" pos:column="67">f<pos:position pos:line="35" pos:column="68"/></name></expr></argument>)<pos:position pos:line="35" pos:column="69"/></argument_list></call></expr></init></decl>;<pos:position pos:line="35" pos:column="70"/></decl_stmt>
			<if pos:line="36" pos:column="25">if <condition pos:line="36" pos:column="28">(<expr><name pos:line="36" pos:column="29">len<pos:position pos:line="36" pos:column="32"/></name> <operator pos:line="36" pos:column="33">&gt;<pos:position pos:line="36" pos:column="37"/></operator> <literal type="number" pos:line="36" pos:column="35">0<pos:position pos:line="36" pos:column="36"/></literal></expr>)<pos:position pos:line="36" pos:column="37"/></condition><then pos:line="36" pos:column="37"> <block pos:line="36" pos:column="38">{
				<expr_stmt><expr><name><name pos:line="37" pos:column="33">line<pos:position pos:line="37" pos:column="37"/></name><index pos:line="37" pos:column="37">[<expr><name pos:line="37" pos:column="38">len<pos:position pos:line="37" pos:column="41"/></name></expr>]<pos:position pos:line="37" pos:column="42"/></index></name> <operator pos:line="37" pos:column="43">=<pos:position pos:line="37" pos:column="44"/></operator> <literal type="number" pos:line="37" pos:column="45">0<pos:position pos:line="37" pos:column="46"/></literal></expr>;<pos:position pos:line="37" pos:column="47"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="38" pos:column="33">io_printf<pos:position pos:line="38" pos:column="42"/></name><argument_list pos:line="38" pos:column="42">(<argument><expr><name pos:line="38" pos:column="43">f_out<pos:position pos:line="38" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="38" pos:column="50">"%s"<pos:position pos:line="38" pos:column="54"/></literal></expr></argument>, <argument><expr><name pos:line="38" pos:column="56">line<pos:position pos:line="38" pos:column="60"/></name></expr></argument>)<pos:position pos:line="38" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="62"/></expr_stmt>
			}<pos:position pos:line="39" pos:column="26"/></block></then></if>
		}<pos:position pos:line="40" pos:column="18"/></block></while>
		<if pos:line="41" pos:column="17">if <condition pos:line="41" pos:column="20">(<expr><name pos:line="41" pos:column="21">f<pos:position pos:line="41" pos:column="22"/></name></expr>)<pos:position pos:line="41" pos:column="23"/></condition><then pos:line="41" pos:column="23">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="42" pos:column="25">fclose<pos:position pos:line="42" pos:column="31"/></name><argument_list pos:line="42" pos:column="31">(<argument><expr><name pos:line="42" pos:column="32">f<pos:position pos:line="42" pos:column="33"/></name></expr></argument>)<pos:position pos:line="42" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="35"/></expr_stmt></block></then></if>
		<expr_stmt><expr><call><name pos:line="43" pos:column="17">io_printf<pos:position pos:line="43" pos:column="26"/></name><argument_list pos:line="43" pos:column="26">(<argument><expr><name pos:line="43" pos:column="27">f_out<pos:position pos:line="43" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="43" pos:column="34">"\n"<pos:position pos:line="43" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="40"/></expr_stmt>
	}<pos:position pos:line="44" pos:column="10"/></block></then></if>

	<if pos:line="46" pos:column="9">if <condition pos:line="46" pos:column="12">(<expr><operator pos:line="46" pos:column="13">!<pos:position pos:line="46" pos:column="14"/></operator><call><name pos:line="46" pos:column="14">read_line<pos:position pos:line="46" pos:column="23"/></name><argument_list pos:line="46" pos:column="23">(<argument><expr><name pos:line="46" pos:column="24">f_in<pos:position pos:line="46" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="30">line<pos:position pos:line="46" pos:column="34"/></name></expr></argument>, <argument><expr><sizeof pos:line="46" pos:column="36">sizeof <name pos:line="46" pos:column="43">line<pos:position pos:line="46" pos:column="47"/></name></sizeof> <operator pos:line="46" pos:column="48">-<pos:position pos:line="46" pos:column="49"/></operator> <literal type="number" pos:line="46" pos:column="50">1<pos:position pos:line="46" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="46" pos:column="53"/></condition><then pos:line="46" pos:column="53">
		<block type="pseudo"><return pos:line="47" pos:column="17">return <expr><operator pos:line="47" pos:column="24">-<pos:position pos:line="47" pos:column="25"/></operator><literal type="number" pos:line="47" pos:column="25">1<pos:position pos:line="47" pos:column="26"/></literal></expr>;<pos:position pos:line="47" pos:column="27"/></return></block></then></if>

	<if pos:line="49" pos:column="9">if <condition pos:line="49" pos:column="12">(<expr><call><name pos:line="49" pos:column="13">sscanf<pos:position pos:line="49" pos:column="19"/></name><argument_list pos:line="49" pos:column="19">(<argument><expr><name pos:line="49" pos:column="20">line<pos:position pos:line="49" pos:column="24"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="49" pos:column="25">"@RSYNCD: %d"<pos:position pos:line="49" pos:column="38"/></literal></expr></argument>, <argument><expr><operator pos:line="49" pos:column="40">&amp;<pos:position pos:line="49" pos:column="45"/></operator><name pos:line="49" pos:column="41">remote_protocol<pos:position pos:line="49" pos:column="56"/></name></expr></argument>)<pos:position pos:line="49" pos:column="57"/></argument_list></call> <operator pos:line="49" pos:column="58">!=<pos:position pos:line="49" pos:column="60"/></operator> <literal type="number" pos:line="49" pos:column="61">1<pos:position pos:line="49" pos:column="62"/></literal></expr>)<pos:position pos:line="49" pos:column="63"/></condition><then pos:line="49" pos:column="63"> <block pos:line="49" pos:column="64">{
		<expr_stmt><expr><call><name pos:line="50" pos:column="17">io_printf<pos:position pos:line="50" pos:column="26"/></name><argument_list pos:line="50" pos:column="26">(<argument><expr><name pos:line="50" pos:column="27">f_out<pos:position pos:line="50" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="50" pos:column="34">"@ERROR: protocol startup error\n"<pos:position pos:line="50" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="50" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="70"/></expr_stmt>
		<return pos:line="51" pos:column="17">return <expr><operator pos:line="51" pos:column="24">-<pos:position pos:line="51" pos:column="25"/></operator><literal type="number" pos:line="51" pos:column="25">1<pos:position pos:line="51" pos:column="26"/></literal></expr>;<pos:position pos:line="51" pos:column="27"/></return>
	}<pos:position pos:line="52" pos:column="10"/></block></then></if>
	<if pos:line="53" pos:column="9">if <condition pos:line="53" pos:column="12">(<expr><name pos:line="53" pos:column="13">protocol_version<pos:position pos:line="53" pos:column="29"/></name> <operator pos:line="53" pos:column="30">&gt;<pos:position pos:line="53" pos:column="34"/></operator> <name pos:line="53" pos:column="32">remote_protocol<pos:position pos:line="53" pos:column="47"/></name></expr>)<pos:position pos:line="53" pos:column="48"/></condition><then pos:line="53" pos:column="48">
		<block type="pseudo"><expr_stmt><expr><name pos:line="54" pos:column="17">protocol_version<pos:position pos:line="54" pos:column="33"/></name> <operator pos:line="54" pos:column="34">=<pos:position pos:line="54" pos:column="35"/></operator> <name pos:line="54" pos:column="36">remote_protocol<pos:position pos:line="54" pos:column="51"/></name></expr>;<pos:position pos:line="54" pos:column="52"/></expr_stmt></block></then></if>

	<expr_stmt><expr><name><name pos:line="56" pos:column="9">line<pos:position pos:line="56" pos:column="13"/></name><index pos:line="56" pos:column="13">[<expr><literal type="number" pos:line="56" pos:column="14">0<pos:position pos:line="56" pos:column="15"/></literal></expr>]<pos:position pos:line="56" pos:column="16"/></index></name> <operator pos:line="56" pos:column="17">=<pos:position pos:line="56" pos:column="18"/></operator> <literal type="number" pos:line="56" pos:column="19">0<pos:position pos:line="56" pos:column="20"/></literal></expr>;<pos:position pos:line="56" pos:column="21"/></expr_stmt>
	<if pos:line="57" pos:column="9">if <condition pos:line="57" pos:column="12">(<expr><operator pos:line="57" pos:column="13">!<pos:position pos:line="57" pos:column="14"/></operator><call><name pos:line="57" pos:column="14">read_line<pos:position pos:line="57" pos:column="23"/></name><argument_list pos:line="57" pos:column="23">(<argument><expr><name pos:line="57" pos:column="24">f_in<pos:position pos:line="57" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="30">line<pos:position pos:line="57" pos:column="34"/></name></expr></argument>, <argument><expr><sizeof pos:line="57" pos:column="36">sizeof <name pos:line="57" pos:column="43">line<pos:position pos:line="57" pos:column="47"/></name></sizeof> <operator pos:line="57" pos:column="48">-<pos:position pos:line="57" pos:column="49"/></operator> <literal type="number" pos:line="57" pos:column="50">1<pos:position pos:line="57" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="57" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="57" pos:column="53"/></condition><then pos:line="57" pos:column="53">
		<block type="pseudo"><return pos:line="58" pos:column="17">return <expr><operator pos:line="58" pos:column="24">-<pos:position pos:line="58" pos:column="25"/></operator><literal type="number" pos:line="58" pos:column="25">1<pos:position pos:line="58" pos:column="26"/></literal></expr>;<pos:position pos:line="58" pos:column="27"/></return></block></then></if>

	<if pos:line="60" pos:column="9">if <condition pos:line="60" pos:column="12">(<expr><operator pos:line="60" pos:column="13">!<pos:position pos:line="60" pos:column="14"/></operator><operator pos:line="60" pos:column="14">*<pos:position pos:line="60" pos:column="15"/></operator><name pos:line="60" pos:column="15">line<pos:position pos:line="60" pos:column="19"/></name> <operator pos:line="60" pos:column="20">||<pos:position pos:line="60" pos:column="22"/></operator> <call><name pos:line="60" pos:column="23">strcmp<pos:position pos:line="60" pos:column="29"/></name><argument_list pos:line="60" pos:column="29">(<argument><expr><name pos:line="60" pos:column="30">line<pos:position pos:line="60" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="60" pos:column="36">"#list"<pos:position pos:line="60" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="60" pos:column="44"/></argument_list></call> <operator pos:line="60" pos:column="45">==<pos:position pos:line="60" pos:column="47"/></operator> <literal type="number" pos:line="60" pos:column="48">0<pos:position pos:line="60" pos:column="49"/></literal></expr>)<pos:position pos:line="60" pos:column="50"/></condition><then pos:line="60" pos:column="50"> <block pos:line="60" pos:column="51">{
		<expr_stmt><expr><call><name pos:line="61" pos:column="17">rprintf<pos:position pos:line="61" pos:column="24"/></name><argument_list pos:line="61" pos:column="24">(<argument><expr><name pos:line="61" pos:column="25">FLOG<pos:position pos:line="61" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="61" pos:column="31">"module-list request from %s (%s)\n"<pos:position pos:line="61" pos:column="67"/></literal></expr></argument>,
			<argument><expr><name pos:line="62" pos:column="25">host<pos:position pos:line="62" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="31">addr<pos:position pos:line="62" pos:column="35"/></name></expr></argument>)<pos:position pos:line="62" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="37"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="63" pos:column="17">send_listing<pos:position pos:line="63" pos:column="29"/></name><argument_list pos:line="63" pos:column="29">(<argument><expr><name pos:line="63" pos:column="30">f_out<pos:position pos:line="63" pos:column="35"/></name></expr></argument>)<pos:position pos:line="63" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="37"/></expr_stmt>
		<return pos:line="64" pos:column="17">return <expr><operator pos:line="64" pos:column="24">-<pos:position pos:line="64" pos:column="25"/></operator><literal type="number" pos:line="64" pos:column="25">1<pos:position pos:line="64" pos:column="26"/></literal></expr>;<pos:position pos:line="64" pos:column="27"/></return>
	}<pos:position pos:line="65" pos:column="10"/></block></then></if>

	<if pos:line="67" pos:column="9">if <condition pos:line="67" pos:column="12">(<expr><operator pos:line="67" pos:column="13">*<pos:position pos:line="67" pos:column="14"/></operator><name pos:line="67" pos:column="14">line<pos:position pos:line="67" pos:column="18"/></name> <operator pos:line="67" pos:column="19">==<pos:position pos:line="67" pos:column="21"/></operator> <literal type="char" pos:line="67" pos:column="22">'#'<pos:position pos:line="67" pos:column="25"/></literal></expr>)<pos:position pos:line="67" pos:column="26"/></condition><then pos:line="67" pos:column="26"> <block pos:line="67" pos:column="27">{
		<comment type="block" pos:line="68" pos:column="17">/* it's some sort of command that I don't understand */</comment>
		<expr_stmt><expr><call><name pos:line="69" pos:column="17">io_printf<pos:position pos:line="69" pos:column="26"/></name><argument_list pos:line="69" pos:column="26">(<argument><expr><name pos:line="69" pos:column="27">f_out<pos:position pos:line="69" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="69" pos:column="34">"@ERROR: Unknown command '%s'\n"<pos:position pos:line="69" pos:column="66"/></literal></expr></argument>, <argument><expr><name pos:line="69" pos:column="68">line<pos:position pos:line="69" pos:column="72"/></name></expr></argument>)<pos:position pos:line="69" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="74"/></expr_stmt>
		<return pos:line="70" pos:column="17">return <expr><operator pos:line="70" pos:column="24">-<pos:position pos:line="70" pos:column="25"/></operator><literal type="number" pos:line="70" pos:column="25">1<pos:position pos:line="70" pos:column="26"/></literal></expr>;<pos:position pos:line="70" pos:column="27"/></return>
	}<pos:position pos:line="71" pos:column="10"/></block></then></if>

	<if pos:line="73" pos:column="9">if <condition pos:line="73" pos:column="12">(<expr><operator pos:line="73" pos:column="13">(<pos:position pos:line="73" pos:column="14"/></operator><name pos:line="73" pos:column="14">i<pos:position pos:line="73" pos:column="15"/></name> <operator pos:line="73" pos:column="16">=<pos:position pos:line="73" pos:column="17"/></operator> <call><name pos:line="73" pos:column="18">lp_number<pos:position pos:line="73" pos:column="27"/></name><argument_list pos:line="73" pos:column="27">(<argument><expr><name pos:line="73" pos:column="28">line<pos:position pos:line="73" pos:column="32"/></name></expr></argument>)<pos:position pos:line="73" pos:column="33"/></argument_list></call><operator pos:line="73" pos:column="33">)<pos:position pos:line="73" pos:column="34"/></operator> <operator pos:line="73" pos:column="35">&lt;<pos:position pos:line="73" pos:column="39"/></operator> <literal type="number" pos:line="73" pos:column="37">0<pos:position pos:line="73" pos:column="38"/></literal></expr>)<pos:position pos:line="73" pos:column="39"/></condition><then pos:line="73" pos:column="39"> <block pos:line="73" pos:column="40">{
		<expr_stmt><expr><call><name pos:line="74" pos:column="17">rprintf<pos:position pos:line="74" pos:column="24"/></name><argument_list pos:line="74" pos:column="24">(<argument><expr><name pos:line="74" pos:column="25">FLOG<pos:position pos:line="74" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="74" pos:column="31">"unknown module '%s' tried from %s (%s)\n"<pos:position pos:line="74" pos:column="73"/></literal></expr></argument>,
			<argument><expr><name pos:line="75" pos:column="25">line<pos:position pos:line="75" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="75" pos:column="31">host<pos:position pos:line="75" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="75" pos:column="37">addr<pos:position pos:line="75" pos:column="41"/></name></expr></argument>)<pos:position pos:line="75" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="43"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="76" pos:column="17">io_printf<pos:position pos:line="76" pos:column="26"/></name><argument_list pos:line="76" pos:column="26">(<argument><expr><name pos:line="76" pos:column="27">f_out<pos:position pos:line="76" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="76" pos:column="34">"@ERROR: Unknown module '%s'\n"<pos:position pos:line="76" pos:column="65"/></literal></expr></argument>, <argument><expr><name pos:line="76" pos:column="67">line<pos:position pos:line="76" pos:column="71"/></name></expr></argument>)<pos:position pos:line="76" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="73"/></expr_stmt>
		<return pos:line="77" pos:column="17">return <expr><operator pos:line="77" pos:column="24">-<pos:position pos:line="77" pos:column="25"/></operator><literal type="number" pos:line="77" pos:column="25">1<pos:position pos:line="77" pos:column="26"/></literal></expr>;<pos:position pos:line="77" pos:column="27"/></return>
	}<pos:position pos:line="78" pos:column="10"/></block></then></if>

<cpp:ifdef pos:line="80" pos:column="1">#<cpp:directive pos:line="80" pos:column="2">ifdef<pos:position pos:line="80" pos:column="7"/></cpp:directive> <name pos:line="80" pos:column="8">HAVE_SIGACTION<pos:position pos:line="80" pos:column="22"/></name></cpp:ifdef>
	<expr_stmt><expr><name><name pos:line="81" pos:column="9">sigact<pos:position pos:line="81" pos:column="15"/></name><operator pos:line="81" pos:column="15">.<pos:position pos:line="81" pos:column="16"/></operator><name pos:line="81" pos:column="16">sa_flags<pos:position pos:line="81" pos:column="24"/></name></name> <operator pos:line="81" pos:column="25">=<pos:position pos:line="81" pos:column="26"/></operator> <name pos:line="81" pos:column="27">SA_NOCLDSTOP<pos:position pos:line="81" pos:column="39"/></name></expr>;<pos:position pos:line="81" pos:column="40"/></expr_stmt>
<cpp:endif pos:line="82" pos:column="1">#<cpp:directive pos:line="82" pos:column="2">endif<pos:position pos:line="82" pos:column="7"/></cpp:directive></cpp:endif>
	<expr_stmt><expr><call><name pos:line="83" pos:column="9">SIGACTION<pos:position pos:line="83" pos:column="18"/></name><argument_list pos:line="83" pos:column="18">(<argument><expr><name pos:line="83" pos:column="19">SIGCHLD<pos:position pos:line="83" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="83" pos:column="28">remember_children<pos:position pos:line="83" pos:column="45"/></name></expr></argument>)<pos:position pos:line="83" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="47"/></expr_stmt>

	<return pos:line="85" pos:column="9">return <expr><call><name pos:line="85" pos:column="16">rsync_module<pos:position pos:line="85" pos:column="28"/></name><argument_list pos:line="85" pos:column="28">(<argument><expr><name pos:line="85" pos:column="29">f_in<pos:position pos:line="85" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="85" pos:column="35">f_out<pos:position pos:line="85" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="85" pos:column="42">i<pos:position pos:line="85" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="85" pos:column="45">addr<pos:position pos:line="85" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="85" pos:column="51">host<pos:position pos:line="85" pos:column="55"/></name></expr></argument>)<pos:position pos:line="85" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="57"/></return>
}<pos:position pos:line="86" pos:column="2"/></block></function></unit>
