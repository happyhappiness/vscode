<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_241_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int32<pos:position pos:line="1" pos:column="13"/></name></type> <name pos:line="1" pos:column="14">recv_deflated_token<pos:position pos:line="1" pos:column="33"/></name><parameter_list pos:line="1" pos:column="33">(<parameter><decl><type><name pos:line="1" pos:column="34">int<pos:position pos:line="1" pos:column="37"/></name></type> <name pos:line="1" pos:column="38">f<pos:position pos:line="1" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="41">char<pos:position pos:line="1" pos:column="45"/></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier><modifier pos:line="1" pos:column="47">*<pos:position pos:line="1" pos:column="48"/></modifier></type><name pos:line="1" pos:column="48">data<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="53"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><specifier pos:line="3" pos:column="9">static<pos:position pos:line="3" pos:column="15"/></specifier> <type><name pos:line="3" pos:column="16">int<pos:position pos:line="3" pos:column="19"/></name></type> <name pos:line="3" pos:column="20">init_done<pos:position pos:line="3" pos:column="29"/></name></decl>;<pos:position pos:line="3" pos:column="30"/></decl_stmt>
	<decl_stmt><decl><specifier pos:line="4" pos:column="9">static<pos:position pos:line="4" pos:column="15"/></specifier> <type><name pos:line="4" pos:column="16">int32<pos:position pos:line="4" pos:column="21"/></name></type> <name pos:line="4" pos:column="22">saved_flag<pos:position pos:line="4" pos:column="32"/></name></decl>;<pos:position pos:line="4" pos:column="33"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int32<pos:position pos:line="5" pos:column="14"/></name></type> <name pos:line="5" pos:column="15">n<pos:position pos:line="5" pos:column="16"/></name></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="18">flag<pos:position pos:line="5" pos:column="22"/></name></decl>;<pos:position pos:line="5" pos:column="23"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">r<pos:position pos:line="6" pos:column="14"/></name></decl>;<pos:position pos:line="6" pos:column="15"/></decl_stmt>

	<for pos:line="8" pos:column="9">for <control pos:line="8" pos:column="13">(<init pos:line="8" pos:column="14">;<pos:position pos:line="8" pos:column="15"/></init><condition pos:line="8" pos:column="15">;<pos:position pos:line="8" pos:column="16"/></condition><incr/>)<pos:position pos:line="8" pos:column="17"/></control> <block pos:line="8" pos:column="18">{
		<switch pos:line="9" pos:column="17">switch <condition pos:line="9" pos:column="24">(<expr><name pos:line="9" pos:column="25">recv_state<pos:position pos:line="9" pos:column="35"/></name></expr>)<pos:position pos:line="9" pos:column="36"/></condition> <block pos:line="9" pos:column="37">{
		<case pos:line="10" pos:column="17">case <expr><name pos:line="10" pos:column="22">r_init<pos:position pos:line="10" pos:column="28"/></name></expr>:<pos:position pos:line="10" pos:column="29"/></case>
			<if pos:line="11" pos:column="25">if <condition pos:line="11" pos:column="28">(<expr><operator pos:line="11" pos:column="29">!<pos:position pos:line="11" pos:column="30"/></operator><name pos:line="11" pos:column="30">init_done<pos:position pos:line="11" pos:column="39"/></name></expr>)<pos:position pos:line="11" pos:column="40"/></condition><then pos:line="11" pos:column="40"> <block pos:line="11" pos:column="41">{
				<expr_stmt><expr><name><name pos:line="12" pos:column="33">rx_strm<pos:position pos:line="12" pos:column="40"/></name><operator pos:line="12" pos:column="40">.<pos:position pos:line="12" pos:column="41"/></operator><name pos:line="12" pos:column="41">next_out<pos:position pos:line="12" pos:column="49"/></name></name> <operator pos:line="12" pos:column="50">=<pos:position pos:line="12" pos:column="51"/></operator> <name pos:line="12" pos:column="52">NULL<pos:position pos:line="12" pos:column="56"/></name></expr>;<pos:position pos:line="12" pos:column="57"/></expr_stmt>
				<expr_stmt><expr><name><name pos:line="13" pos:column="33">rx_strm<pos:position pos:line="13" pos:column="40"/></name><operator pos:line="13" pos:column="40">.<pos:position pos:line="13" pos:column="41"/></operator><name pos:line="13" pos:column="41">zalloc<pos:position pos:line="13" pos:column="47"/></name></name> <operator pos:line="13" pos:column="48">=<pos:position pos:line="13" pos:column="49"/></operator> <name pos:line="13" pos:column="50">NULL<pos:position pos:line="13" pos:column="54"/></name></expr>;<pos:position pos:line="13" pos:column="55"/></expr_stmt>
				<expr_stmt><expr><name><name pos:line="14" pos:column="33">rx_strm<pos:position pos:line="14" pos:column="40"/></name><operator pos:line="14" pos:column="40">.<pos:position pos:line="14" pos:column="41"/></operator><name pos:line="14" pos:column="41">zfree<pos:position pos:line="14" pos:column="46"/></name></name> <operator pos:line="14" pos:column="47">=<pos:position pos:line="14" pos:column="48"/></operator> <name pos:line="14" pos:column="49">NULL<pos:position pos:line="14" pos:column="53"/></name></expr>;<pos:position pos:line="14" pos:column="54"/></expr_stmt>
				<if pos:line="15" pos:column="33">if <condition pos:line="15" pos:column="36">(<expr><call><name pos:line="15" pos:column="37">inflateInit2<pos:position pos:line="15" pos:column="49"/></name><argument_list pos:line="15" pos:column="49">(<argument><expr><operator pos:line="15" pos:column="50">&amp;<pos:position pos:line="15" pos:column="55"/></operator><name pos:line="15" pos:column="51">rx_strm<pos:position pos:line="15" pos:column="58"/></name></expr></argument>, <argument><expr><operator pos:line="15" pos:column="60">-<pos:position pos:line="15" pos:column="61"/></operator><literal type="number" pos:line="15" pos:column="61">15<pos:position pos:line="15" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="64"/></argument_list></call> <operator pos:line="15" pos:column="65">!=<pos:position pos:line="15" pos:column="67"/></operator> <name pos:line="15" pos:column="68">Z_OK<pos:position pos:line="15" pos:column="72"/></name></expr>)<pos:position pos:line="15" pos:column="73"/></condition><then pos:line="15" pos:column="73"> <block pos:line="15" pos:column="74">{
					<expr_stmt><expr><call><name pos:line="16" pos:column="41">rprintf<pos:position pos:line="16" pos:column="48"/></name><argument_list pos:line="16" pos:column="48">(<argument><expr><name pos:line="16" pos:column="49">FERROR<pos:position pos:line="16" pos:column="55"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="57">"inflate init failed\n"<pos:position pos:line="16" pos:column="80"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="82"/></expr_stmt>
					<expr_stmt><expr><call><name pos:line="17" pos:column="41">exit_cleanup<pos:position pos:line="17" pos:column="53"/></name><argument_list pos:line="17" pos:column="53">(<argument><expr><name pos:line="17" pos:column="54">RERR_PROTOCOL<pos:position pos:line="17" pos:column="67"/></name></expr></argument>)<pos:position pos:line="17" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="69"/></expr_stmt>
				}<pos:position pos:line="18" pos:column="34"/></block></then></if>
				<if pos:line="19" pos:column="33">if <condition pos:line="19" pos:column="36">(<expr><operator pos:line="19" pos:column="37">!<pos:position pos:line="19" pos:column="38"/></operator><operator pos:line="19" pos:column="38">(<pos:position pos:line="19" pos:column="39"/></operator><name pos:line="19" pos:column="39">cbuf<pos:position pos:line="19" pos:column="43"/></name> <operator pos:line="19" pos:column="44">=<pos:position pos:line="19" pos:column="45"/></operator> <call><name pos:line="19" pos:column="46">new_array<pos:position pos:line="19" pos:column="55"/></name><argument_list pos:line="19" pos:column="55">(<argument><expr><name pos:line="19" pos:column="56">char<pos:position pos:line="19" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="62">MAX_DATA_COUNT<pos:position pos:line="19" pos:column="76"/></name></expr></argument>)<pos:position pos:line="19" pos:column="77"/></argument_list></call><operator pos:line="19" pos:column="77">)<pos:position pos:line="19" pos:column="78"/></operator>
				    <operator pos:line="20" pos:column="37">||<pos:position pos:line="20" pos:column="39"/></operator> <operator pos:line="20" pos:column="40">!<pos:position pos:line="20" pos:column="41"/></operator><operator pos:line="20" pos:column="41">(<pos:position pos:line="20" pos:column="42"/></operator><name pos:line="20" pos:column="42">dbuf<pos:position pos:line="20" pos:column="46"/></name> <operator pos:line="20" pos:column="47">=<pos:position pos:line="20" pos:column="48"/></operator> <call><name pos:line="20" pos:column="49">new_array<pos:position pos:line="20" pos:column="58"/></name><argument_list pos:line="20" pos:column="58">(<argument><expr><name pos:line="20" pos:column="59">char<pos:position pos:line="20" pos:column="63"/></name></expr></argument>, <argument><expr><call><name pos:line="20" pos:column="65">AVAIL_OUT_SIZE<pos:position pos:line="20" pos:column="79"/></name><argument_list pos:line="20" pos:column="79">(<argument><expr><name pos:line="20" pos:column="80">CHUNK_SIZE<pos:position pos:line="20" pos:column="90"/></name></expr></argument>)<pos:position pos:line="20" pos:column="91"/></argument_list></call></expr></argument>)<pos:position pos:line="20" pos:column="92"/></argument_list></call><operator pos:line="20" pos:column="92">)<pos:position pos:line="20" pos:column="93"/></operator></expr>)<pos:position pos:line="20" pos:column="94"/></condition><then pos:line="20" pos:column="94">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="21" pos:column="41">out_of_memory<pos:position pos:line="21" pos:column="54"/></name><argument_list pos:line="21" pos:column="54">(<argument><expr><literal type="string" pos:line="21" pos:column="55">"recv_deflated_token"<pos:position pos:line="21" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="78"/></expr_stmt></block></then></if>
				<expr_stmt><expr><name pos:line="22" pos:column="33">init_done<pos:position pos:line="22" pos:column="42"/></name> <operator pos:line="22" pos:column="43">=<pos:position pos:line="22" pos:column="44"/></operator> <literal type="number" pos:line="22" pos:column="45">1<pos:position pos:line="22" pos:column="46"/></literal></expr>;<pos:position pos:line="22" pos:column="47"/></expr_stmt>
			}<pos:position pos:line="23" pos:column="26"/></block></then> <else pos:line="23" pos:column="27">else <block pos:line="23" pos:column="32">{
				<expr_stmt><expr><call><name pos:line="24" pos:column="33">inflateReset<pos:position pos:line="24" pos:column="45"/></name><argument_list pos:line="24" pos:column="45">(<argument><expr><operator pos:line="24" pos:column="46">&amp;<pos:position pos:line="24" pos:column="51"/></operator><name pos:line="24" pos:column="47">rx_strm<pos:position pos:line="24" pos:column="54"/></name></expr></argument>)<pos:position pos:line="24" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="56"/></expr_stmt>
			}<pos:position pos:line="25" pos:column="26"/></block></else></if>
			<expr_stmt><expr><name pos:line="26" pos:column="25">recv_state<pos:position pos:line="26" pos:column="35"/></name> <operator pos:line="26" pos:column="36">=<pos:position pos:line="26" pos:column="37"/></operator> <name pos:line="26" pos:column="38">r_idle<pos:position pos:line="26" pos:column="44"/></name></expr>;<pos:position pos:line="26" pos:column="45"/></expr_stmt>
			<expr_stmt><expr><name pos:line="27" pos:column="25">rx_token<pos:position pos:line="27" pos:column="33"/></name> <operator pos:line="27" pos:column="34">=<pos:position pos:line="27" pos:column="35"/></operator> <literal type="number" pos:line="27" pos:column="36">0<pos:position pos:line="27" pos:column="37"/></literal></expr>;<pos:position pos:line="27" pos:column="38"/></expr_stmt>
			<break pos:line="28" pos:column="25">break;<pos:position pos:line="28" pos:column="31"/></break>

		<case pos:line="30" pos:column="17">case <expr><name pos:line="30" pos:column="22">r_idle<pos:position pos:line="30" pos:column="28"/></name></expr>:<pos:position pos:line="30" pos:column="29"/></case>
		<case pos:line="31" pos:column="17">case <expr><name pos:line="31" pos:column="22">r_inflated<pos:position pos:line="31" pos:column="32"/></name></expr>:<pos:position pos:line="31" pos:column="33"/></case>
			<if pos:line="32" pos:column="25">if <condition pos:line="32" pos:column="28">(<expr><name pos:line="32" pos:column="29">saved_flag<pos:position pos:line="32" pos:column="39"/></name></expr>)<pos:position pos:line="32" pos:column="40"/></condition><then pos:line="32" pos:column="40"> <block pos:line="32" pos:column="41">{
				<expr_stmt><expr><name pos:line="33" pos:column="33">flag<pos:position pos:line="33" pos:column="37"/></name> <operator pos:line="33" pos:column="38">=<pos:position pos:line="33" pos:column="39"/></operator> <name pos:line="33" pos:column="40">saved_flag<pos:position pos:line="33" pos:column="50"/></name> <operator pos:line="33" pos:column="51">&amp;<pos:position pos:line="33" pos:column="56"/></operator> <literal type="number" pos:line="33" pos:column="53">0xff<pos:position pos:line="33" pos:column="57"/></literal></expr>;<pos:position pos:line="33" pos:column="58"/></expr_stmt>
				<expr_stmt><expr><name pos:line="34" pos:column="33">saved_flag<pos:position pos:line="34" pos:column="43"/></name> <operator pos:line="34" pos:column="44">=<pos:position pos:line="34" pos:column="45"/></operator> <literal type="number" pos:line="34" pos:column="46">0<pos:position pos:line="34" pos:column="47"/></literal></expr>;<pos:position pos:line="34" pos:column="48"/></expr_stmt>
			}<pos:position pos:line="35" pos:column="26"/></block></then> <else pos:line="35" pos:column="27">else
				<block type="pseudo"><expr_stmt><expr><name pos:line="36" pos:column="33">flag<pos:position pos:line="36" pos:column="37"/></name> <operator pos:line="36" pos:column="38">=<pos:position pos:line="36" pos:column="39"/></operator> <call><name pos:line="36" pos:column="40">read_byte<pos:position pos:line="36" pos:column="49"/></name><argument_list pos:line="36" pos:column="49">(<argument><expr><name pos:line="36" pos:column="50">f<pos:position pos:line="36" pos:column="51"/></name></expr></argument>)<pos:position pos:line="36" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="53"/></expr_stmt></block></else></if>
			<if pos:line="37" pos:column="25">if <condition pos:line="37" pos:column="28">(<expr><operator pos:line="37" pos:column="29">(<pos:position pos:line="37" pos:column="30"/></operator><name pos:line="37" pos:column="30">flag<pos:position pos:line="37" pos:column="34"/></name> <operator pos:line="37" pos:column="35">&amp;<pos:position pos:line="37" pos:column="40"/></operator> <literal type="number" pos:line="37" pos:column="37">0xC0<pos:position pos:line="37" pos:column="41"/></literal><operator pos:line="37" pos:column="41">)<pos:position pos:line="37" pos:column="42"/></operator> <operator pos:line="37" pos:column="43">==<pos:position pos:line="37" pos:column="45"/></operator> <name pos:line="37" pos:column="46">DEFLATED_DATA<pos:position pos:line="37" pos:column="59"/></name></expr>)<pos:position pos:line="37" pos:column="60"/></condition><then pos:line="37" pos:column="60"> <block pos:line="37" pos:column="61">{
				<expr_stmt><expr><name pos:line="38" pos:column="33">n<pos:position pos:line="38" pos:column="34"/></name> <operator pos:line="38" pos:column="35">=<pos:position pos:line="38" pos:column="36"/></operator> <operator pos:line="38" pos:column="37">(<pos:position pos:line="38" pos:column="38"/></operator><operator pos:line="38" pos:column="38">(<pos:position pos:line="38" pos:column="39"/></operator><name pos:line="38" pos:column="39">flag<pos:position pos:line="38" pos:column="43"/></name> <operator pos:line="38" pos:column="44">&amp;<pos:position pos:line="38" pos:column="49"/></operator> <literal type="number" pos:line="38" pos:column="46">0x3f<pos:position pos:line="38" pos:column="50"/></literal><operator pos:line="38" pos:column="50">)<pos:position pos:line="38" pos:column="51"/></operator> <operator pos:line="38" pos:column="52">&lt;&lt;<pos:position pos:line="38" pos:column="60"/></operator> <literal type="number" pos:line="38" pos:column="55">8<pos:position pos:line="38" pos:column="56"/></literal><operator pos:line="38" pos:column="56">)<pos:position pos:line="38" pos:column="57"/></operator> <operator pos:line="38" pos:column="58">+<pos:position pos:line="38" pos:column="59"/></operator> <call><name pos:line="38" pos:column="60">read_byte<pos:position pos:line="38" pos:column="69"/></name><argument_list pos:line="38" pos:column="69">(<argument><expr><name pos:line="38" pos:column="70">f<pos:position pos:line="38" pos:column="71"/></name></expr></argument>)<pos:position pos:line="38" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="73"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="39" pos:column="33">read_buf<pos:position pos:line="39" pos:column="41"/></name><argument_list pos:line="39" pos:column="41">(<argument><expr><name pos:line="39" pos:column="42">f<pos:position pos:line="39" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="45">cbuf<pos:position pos:line="39" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="51">n<pos:position pos:line="39" pos:column="52"/></name></expr></argument>)<pos:position pos:line="39" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="54"/></expr_stmt>
				<expr_stmt><expr><name><name pos:line="40" pos:column="33">rx_strm<pos:position pos:line="40" pos:column="40"/></name><operator pos:line="40" pos:column="40">.<pos:position pos:line="40" pos:column="41"/></operator><name pos:line="40" pos:column="41">next_in<pos:position pos:line="40" pos:column="48"/></name></name> <operator pos:line="40" pos:column="49">=<pos:position pos:line="40" pos:column="50"/></operator> <operator pos:line="40" pos:column="51">(<pos:position pos:line="40" pos:column="52"/></operator><name pos:line="40" pos:column="52">Bytef<pos:position pos:line="40" pos:column="57"/></name> <operator pos:line="40" pos:column="58">*<pos:position pos:line="40" pos:column="59"/></operator><operator pos:line="40" pos:column="59">)<pos:position pos:line="40" pos:column="60"/></operator><name pos:line="40" pos:column="60">cbuf<pos:position pos:line="40" pos:column="64"/></name></expr>;<pos:position pos:line="40" pos:column="65"/></expr_stmt>
				<expr_stmt><expr><name><name pos:line="41" pos:column="33">rx_strm<pos:position pos:line="41" pos:column="40"/></name><operator pos:line="41" pos:column="40">.<pos:position pos:line="41" pos:column="41"/></operator><name pos:line="41" pos:column="41">avail_in<pos:position pos:line="41" pos:column="49"/></name></name> <operator pos:line="41" pos:column="50">=<pos:position pos:line="41" pos:column="51"/></operator> <name pos:line="41" pos:column="52">n<pos:position pos:line="41" pos:column="53"/></name></expr>;<pos:position pos:line="41" pos:column="54"/></expr_stmt>
				<expr_stmt><expr><name pos:line="42" pos:column="33">recv_state<pos:position pos:line="42" pos:column="43"/></name> <operator pos:line="42" pos:column="44">=<pos:position pos:line="42" pos:column="45"/></operator> <name pos:line="42" pos:column="46">r_inflating<pos:position pos:line="42" pos:column="57"/></name></expr>;<pos:position pos:line="42" pos:column="58"/></expr_stmt>
				<break pos:line="43" pos:column="33">break;<pos:position pos:line="43" pos:column="39"/></break>
			}<pos:position pos:line="44" pos:column="26"/></block></then></if>
			<if pos:line="45" pos:column="25">if <condition pos:line="45" pos:column="28">(<expr><name pos:line="45" pos:column="29">recv_state<pos:position pos:line="45" pos:column="39"/></name> <operator pos:line="45" pos:column="40">==<pos:position pos:line="45" pos:column="42"/></operator> <name pos:line="45" pos:column="43">r_inflated<pos:position pos:line="45" pos:column="53"/></name></expr>)<pos:position pos:line="45" pos:column="54"/></condition><then pos:line="45" pos:column="54"> <block pos:line="45" pos:column="55">{
				<comment type="block" pos:line="46" pos:column="33">/* check previous inflated stuff ended correctly */</comment>
				<expr_stmt><expr><name><name pos:line="47" pos:column="33">rx_strm<pos:position pos:line="47" pos:column="40"/></name><operator pos:line="47" pos:column="40">.<pos:position pos:line="47" pos:column="41"/></operator><name pos:line="47" pos:column="41">avail_in<pos:position pos:line="47" pos:column="49"/></name></name> <operator pos:line="47" pos:column="50">=<pos:position pos:line="47" pos:column="51"/></operator> <literal type="number" pos:line="47" pos:column="52">0<pos:position pos:line="47" pos:column="53"/></literal></expr>;<pos:position pos:line="47" pos:column="54"/></expr_stmt>
				<expr_stmt><expr><name><name pos:line="48" pos:column="33">rx_strm<pos:position pos:line="48" pos:column="40"/></name><operator pos:line="48" pos:column="40">.<pos:position pos:line="48" pos:column="41"/></operator><name pos:line="48" pos:column="41">next_out<pos:position pos:line="48" pos:column="49"/></name></name> <operator pos:line="48" pos:column="50">=<pos:position pos:line="48" pos:column="51"/></operator> <operator pos:line="48" pos:column="52">(<pos:position pos:line="48" pos:column="53"/></operator><name pos:line="48" pos:column="53">Bytef<pos:position pos:line="48" pos:column="58"/></name> <operator pos:line="48" pos:column="59">*<pos:position pos:line="48" pos:column="60"/></operator><operator pos:line="48" pos:column="60">)<pos:position pos:line="48" pos:column="61"/></operator><name pos:line="48" pos:column="61">dbuf<pos:position pos:line="48" pos:column="65"/></name></expr>;<pos:position pos:line="48" pos:column="66"/></expr_stmt>
				<expr_stmt><expr><name><name pos:line="49" pos:column="33">rx_strm<pos:position pos:line="49" pos:column="40"/></name><operator pos:line="49" pos:column="40">.<pos:position pos:line="49" pos:column="41"/></operator><name pos:line="49" pos:column="41">avail_out<pos:position pos:line="49" pos:column="50"/></name></name> <operator pos:line="49" pos:column="51">=<pos:position pos:line="49" pos:column="52"/></operator> <call><name pos:line="49" pos:column="53">AVAIL_OUT_SIZE<pos:position pos:line="49" pos:column="67"/></name><argument_list pos:line="49" pos:column="67">(<argument><expr><name pos:line="49" pos:column="68">CHUNK_SIZE<pos:position pos:line="49" pos:column="78"/></name></expr></argument>)<pos:position pos:line="49" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="80"/></expr_stmt>
				<expr_stmt><expr><name pos:line="50" pos:column="33">r<pos:position pos:line="50" pos:column="34"/></name> <operator pos:line="50" pos:column="35">=<pos:position pos:line="50" pos:column="36"/></operator> <call><name pos:line="50" pos:column="37">inflate<pos:position pos:line="50" pos:column="44"/></name><argument_list pos:line="50" pos:column="44">(<argument><expr><operator pos:line="50" pos:column="45">&amp;<pos:position pos:line="50" pos:column="50"/></operator><name pos:line="50" pos:column="46">rx_strm<pos:position pos:line="50" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="55">Z_SYNC_FLUSH<pos:position pos:line="50" pos:column="67"/></name></expr></argument>)<pos:position pos:line="50" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="69"/></expr_stmt>
				<expr_stmt><expr><name pos:line="51" pos:column="33">n<pos:position pos:line="51" pos:column="34"/></name> <operator pos:line="51" pos:column="35">=<pos:position pos:line="51" pos:column="36"/></operator> <call><name pos:line="51" pos:column="37">AVAIL_OUT_SIZE<pos:position pos:line="51" pos:column="51"/></name><argument_list pos:line="51" pos:column="51">(<argument><expr><name pos:line="51" pos:column="52">CHUNK_SIZE<pos:position pos:line="51" pos:column="62"/></name></expr></argument>)<pos:position pos:line="51" pos:column="63"/></argument_list></call> <operator pos:line="51" pos:column="64">-<pos:position pos:line="51" pos:column="65"/></operator> <name><name pos:line="51" pos:column="66">rx_strm<pos:position pos:line="51" pos:column="73"/></name><operator pos:line="51" pos:column="73">.<pos:position pos:line="51" pos:column="74"/></operator><name pos:line="51" pos:column="74">avail_out<pos:position pos:line="51" pos:column="83"/></name></name></expr>;<pos:position pos:line="51" pos:column="84"/></expr_stmt>
				<comment type="block" pos:line="52" pos:column="33">/*
				 * Z_BUF_ERROR just means no progress was
				 * made, i.e. the decompressor didn't have
				 * any pending output for us.
				 */</comment>
				<if pos:line="57" pos:column="33">if <condition pos:line="57" pos:column="36">(<expr><name pos:line="57" pos:column="37">r<pos:position pos:line="57" pos:column="38"/></name> <operator pos:line="57" pos:column="39">!=<pos:position pos:line="57" pos:column="41"/></operator> <name pos:line="57" pos:column="42">Z_OK<pos:position pos:line="57" pos:column="46"/></name> <operator pos:line="57" pos:column="47">&amp;&amp;<pos:position pos:line="57" pos:column="57"/></operator> <name pos:line="57" pos:column="50">r<pos:position pos:line="57" pos:column="51"/></name> <operator pos:line="57" pos:column="52">!=<pos:position pos:line="57" pos:column="54"/></operator> <name pos:line="57" pos:column="55">Z_BUF_ERROR<pos:position pos:line="57" pos:column="66"/></name></expr>)<pos:position pos:line="57" pos:column="67"/></condition><then pos:line="57" pos:column="67"> <block pos:line="57" pos:column="68">{
					<expr_stmt><expr><call><name pos:line="58" pos:column="41">rprintf<pos:position pos:line="58" pos:column="48"/></name><argument_list pos:line="58" pos:column="48">(<argument><expr><name pos:line="58" pos:column="49">FERROR<pos:position pos:line="58" pos:column="55"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="58" pos:column="57">"inflate flush returned %d (%d bytes)\n"<pos:position pos:line="58" pos:column="97"/></literal></expr></argument>,
						<argument><expr><name pos:line="59" pos:column="49">r<pos:position pos:line="59" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="52">n<pos:position pos:line="59" pos:column="53"/></name></expr></argument>)<pos:position pos:line="59" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="55"/></expr_stmt>
					<expr_stmt><expr><call><name pos:line="60" pos:column="41">exit_cleanup<pos:position pos:line="60" pos:column="53"/></name><argument_list pos:line="60" pos:column="53">(<argument><expr><name pos:line="60" pos:column="54">RERR_STREAMIO<pos:position pos:line="60" pos:column="67"/></name></expr></argument>)<pos:position pos:line="60" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="69"/></expr_stmt>
				}<pos:position pos:line="61" pos:column="34"/></block></then></if>
				<if pos:line="62" pos:column="33">if <condition pos:line="62" pos:column="36">(<expr><name pos:line="62" pos:column="37">n<pos:position pos:line="62" pos:column="38"/></name> <operator pos:line="62" pos:column="39">!=<pos:position pos:line="62" pos:column="41"/></operator> <literal type="number" pos:line="62" pos:column="42">0<pos:position pos:line="62" pos:column="43"/></literal> <operator pos:line="62" pos:column="44">&amp;&amp;<pos:position pos:line="62" pos:column="54"/></operator> <name pos:line="62" pos:column="47">r<pos:position pos:line="62" pos:column="48"/></name> <operator pos:line="62" pos:column="49">!=<pos:position pos:line="62" pos:column="51"/></operator> <name pos:line="62" pos:column="52">Z_BUF_ERROR<pos:position pos:line="62" pos:column="63"/></name></expr>)<pos:position pos:line="62" pos:column="64"/></condition><then pos:line="62" pos:column="64"> <block pos:line="62" pos:column="65">{
					<comment type="block" pos:line="63" pos:column="41">/* have to return some more data and
					   save the flag for later. */</comment>
					<expr_stmt><expr><name pos:line="65" pos:column="41">saved_flag<pos:position pos:line="65" pos:column="51"/></name> <operator pos:line="65" pos:column="52">=<pos:position pos:line="65" pos:column="53"/></operator> <name pos:line="65" pos:column="54">flag<pos:position pos:line="65" pos:column="58"/></name> <operator pos:line="65" pos:column="59">+<pos:position pos:line="65" pos:column="60"/></operator> <literal type="number" pos:line="65" pos:column="61">0x10000<pos:position pos:line="65" pos:column="68"/></literal></expr>;<pos:position pos:line="65" pos:column="69"/></expr_stmt>
					<expr_stmt><expr><operator pos:line="66" pos:column="41">*<pos:position pos:line="66" pos:column="42"/></operator><name pos:line="66" pos:column="42">data<pos:position pos:line="66" pos:column="46"/></name> <operator pos:line="66" pos:column="47">=<pos:position pos:line="66" pos:column="48"/></operator> <name pos:line="66" pos:column="49">dbuf<pos:position pos:line="66" pos:column="53"/></name></expr>;<pos:position pos:line="66" pos:column="54"/></expr_stmt>
					<return pos:line="67" pos:column="41">return <expr><name pos:line="67" pos:column="48">n<pos:position pos:line="67" pos:column="49"/></name></expr>;<pos:position pos:line="67" pos:column="50"/></return>
				}<pos:position pos:line="68" pos:column="34"/></block></then></if>
				<comment type="block" pos:line="69" pos:column="33">/*
				 * At this point the decompressor should
				 * be expecting to see the 0, 0, ff, ff bytes.
				 */</comment>
				<if pos:line="73" pos:column="33">if <condition pos:line="73" pos:column="36">(<expr><operator pos:line="73" pos:column="37">!<pos:position pos:line="73" pos:column="38"/></operator><call><name pos:line="73" pos:column="38">inflateSyncPoint<pos:position pos:line="73" pos:column="54"/></name><argument_list pos:line="73" pos:column="54">(<argument><expr><operator pos:line="73" pos:column="55">&amp;<pos:position pos:line="73" pos:column="60"/></operator><name pos:line="73" pos:column="56">rx_strm<pos:position pos:line="73" pos:column="63"/></name></expr></argument>)<pos:position pos:line="73" pos:column="64"/></argument_list></call></expr>)<pos:position pos:line="73" pos:column="65"/></condition><then pos:line="73" pos:column="65"> <block pos:line="73" pos:column="66">{
					<expr_stmt><expr><call><name pos:line="74" pos:column="41">rprintf<pos:position pos:line="74" pos:column="48"/></name><argument_list pos:line="74" pos:column="48">(<argument><expr><name pos:line="74" pos:column="49">FERROR<pos:position pos:line="74" pos:column="55"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="74" pos:column="57">"decompressor lost sync!\n"<pos:position pos:line="74" pos:column="84"/></literal></expr></argument>)<pos:position pos:line="74" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="86"/></expr_stmt>
					<expr_stmt><expr><call><name pos:line="75" pos:column="41">exit_cleanup<pos:position pos:line="75" pos:column="53"/></name><argument_list pos:line="75" pos:column="53">(<argument><expr><name pos:line="75" pos:column="54">RERR_STREAMIO<pos:position pos:line="75" pos:column="67"/></name></expr></argument>)<pos:position pos:line="75" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="69"/></expr_stmt>
				}<pos:position pos:line="76" pos:column="34"/></block></then></if>
				<expr_stmt><expr><name><name pos:line="77" pos:column="33">rx_strm<pos:position pos:line="77" pos:column="40"/></name><operator pos:line="77" pos:column="40">.<pos:position pos:line="77" pos:column="41"/></operator><name pos:line="77" pos:column="41">avail_in<pos:position pos:line="77" pos:column="49"/></name></name> <operator pos:line="77" pos:column="50">=<pos:position pos:line="77" pos:column="51"/></operator> <literal type="number" pos:line="77" pos:column="52">4<pos:position pos:line="77" pos:column="53"/></literal></expr>;<pos:position pos:line="77" pos:column="54"/></expr_stmt>
				<expr_stmt><expr><name><name pos:line="78" pos:column="33">rx_strm<pos:position pos:line="78" pos:column="40"/></name><operator pos:line="78" pos:column="40">.<pos:position pos:line="78" pos:column="41"/></operator><name pos:line="78" pos:column="41">next_in<pos:position pos:line="78" pos:column="48"/></name></name> <operator pos:line="78" pos:column="49">=<pos:position pos:line="78" pos:column="50"/></operator> <operator pos:line="78" pos:column="51">(<pos:position pos:line="78" pos:column="52"/></operator><name pos:line="78" pos:column="52">Bytef<pos:position pos:line="78" pos:column="57"/></name> <operator pos:line="78" pos:column="58">*<pos:position pos:line="78" pos:column="59"/></operator><operator pos:line="78" pos:column="59">)<pos:position pos:line="78" pos:column="60"/></operator><name pos:line="78" pos:column="60">cbuf<pos:position pos:line="78" pos:column="64"/></name></expr>;<pos:position pos:line="78" pos:column="65"/></expr_stmt>
				<expr_stmt><expr><name><name pos:line="79" pos:column="33">cbuf<pos:position pos:line="79" pos:column="37"/></name><index pos:line="79" pos:column="37">[<expr><literal type="number" pos:line="79" pos:column="38">0<pos:position pos:line="79" pos:column="39"/></literal></expr>]<pos:position pos:line="79" pos:column="40"/></index></name> <operator pos:line="79" pos:column="41">=<pos:position pos:line="79" pos:column="42"/></operator> <name><name pos:line="79" pos:column="43">cbuf<pos:position pos:line="79" pos:column="47"/></name><index pos:line="79" pos:column="47">[<expr><literal type="number" pos:line="79" pos:column="48">1<pos:position pos:line="79" pos:column="49"/></literal></expr>]<pos:position pos:line="79" pos:column="50"/></index></name> <operator pos:line="79" pos:column="51">=<pos:position pos:line="79" pos:column="52"/></operator> <literal type="number" pos:line="79" pos:column="53">0<pos:position pos:line="79" pos:column="54"/></literal></expr>;<pos:position pos:line="79" pos:column="55"/></expr_stmt>
				<expr_stmt><expr><name><name pos:line="80" pos:column="33">cbuf<pos:position pos:line="80" pos:column="37"/></name><index pos:line="80" pos:column="37">[<expr><literal type="number" pos:line="80" pos:column="38">2<pos:position pos:line="80" pos:column="39"/></literal></expr>]<pos:position pos:line="80" pos:column="40"/></index></name> <operator pos:line="80" pos:column="41">=<pos:position pos:line="80" pos:column="42"/></operator> <name><name pos:line="80" pos:column="43">cbuf<pos:position pos:line="80" pos:column="47"/></name><index pos:line="80" pos:column="47">[<expr><literal type="number" pos:line="80" pos:column="48">3<pos:position pos:line="80" pos:column="49"/></literal></expr>]<pos:position pos:line="80" pos:column="50"/></index></name> <operator pos:line="80" pos:column="51">=<pos:position pos:line="80" pos:column="52"/></operator> <literal type="number" pos:line="80" pos:column="53">0xff<pos:position pos:line="80" pos:column="57"/></literal></expr>;<pos:position pos:line="80" pos:column="58"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="81" pos:column="33">inflate<pos:position pos:line="81" pos:column="40"/></name><argument_list pos:line="81" pos:column="40">(<argument><expr><operator pos:line="81" pos:column="41">&amp;<pos:position pos:line="81" pos:column="46"/></operator><name pos:line="81" pos:column="42">rx_strm<pos:position pos:line="81" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="81" pos:column="51">Z_SYNC_FLUSH<pos:position pos:line="81" pos:column="63"/></name></expr></argument>)<pos:position pos:line="81" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="65"/></expr_stmt>
				<expr_stmt><expr><name pos:line="82" pos:column="33">recv_state<pos:position pos:line="82" pos:column="43"/></name> <operator pos:line="82" pos:column="44">=<pos:position pos:line="82" pos:column="45"/></operator> <name pos:line="82" pos:column="46">r_idle<pos:position pos:line="82" pos:column="52"/></name></expr>;<pos:position pos:line="82" pos:column="53"/></expr_stmt>
			}<pos:position pos:line="83" pos:column="26"/></block></then></if>
			<if pos:line="84" pos:column="25">if <condition pos:line="84" pos:column="28">(<expr><name pos:line="84" pos:column="29">flag<pos:position pos:line="84" pos:column="33"/></name> <operator pos:line="84" pos:column="34">==<pos:position pos:line="84" pos:column="36"/></operator> <name pos:line="84" pos:column="37">END_FLAG<pos:position pos:line="84" pos:column="45"/></name></expr>)<pos:position pos:line="84" pos:column="46"/></condition><then pos:line="84" pos:column="46"> <block pos:line="84" pos:column="47">{
				<comment type="block" pos:line="85" pos:column="33">/* that's all folks */</comment>
				<expr_stmt><expr><name pos:line="86" pos:column="33">recv_state<pos:position pos:line="86" pos:column="43"/></name> <operator pos:line="86" pos:column="44">=<pos:position pos:line="86" pos:column="45"/></operator> <name pos:line="86" pos:column="46">r_init<pos:position pos:line="86" pos:column="52"/></name></expr>;<pos:position pos:line="86" pos:column="53"/></expr_stmt>
				<return pos:line="87" pos:column="33">return <expr><literal type="number" pos:line="87" pos:column="40">0<pos:position pos:line="87" pos:column="41"/></literal></expr>;<pos:position pos:line="87" pos:column="42"/></return>
			}<pos:position pos:line="88" pos:column="26"/></block></then></if>

			<comment type="block" pos:line="90" pos:column="25">/* here we have a token of some kind */</comment>
			<if pos:line="91" pos:column="25">if <condition pos:line="91" pos:column="28">(<expr><name pos:line="91" pos:column="29">flag<pos:position pos:line="91" pos:column="33"/></name> <operator pos:line="91" pos:column="34">&amp;<pos:position pos:line="91" pos:column="39"/></operator> <name pos:line="91" pos:column="36">TOKEN_REL<pos:position pos:line="91" pos:column="45"/></name></expr>)<pos:position pos:line="91" pos:column="46"/></condition><then pos:line="91" pos:column="46"> <block pos:line="91" pos:column="47">{
				<expr_stmt><expr><name pos:line="92" pos:column="33">rx_token<pos:position pos:line="92" pos:column="41"/></name> <operator pos:line="92" pos:column="42">+=<pos:position pos:line="92" pos:column="44"/></operator> <name pos:line="92" pos:column="45">flag<pos:position pos:line="92" pos:column="49"/></name> <operator pos:line="92" pos:column="50">&amp;<pos:position pos:line="92" pos:column="55"/></operator> <literal type="number" pos:line="92" pos:column="52">0x3f<pos:position pos:line="92" pos:column="56"/></literal></expr>;<pos:position pos:line="92" pos:column="57"/></expr_stmt>
				<expr_stmt><expr><name pos:line="93" pos:column="33">flag<pos:position pos:line="93" pos:column="37"/></name> <operator pos:line="93" pos:column="38">&gt;&gt;=<pos:position pos:line="93" pos:column="47"/></operator> <literal type="number" pos:line="93" pos:column="42">6<pos:position pos:line="93" pos:column="43"/></literal></expr>;<pos:position pos:line="93" pos:column="44"/></expr_stmt>
			}<pos:position pos:line="94" pos:column="26"/></block></then> <else pos:line="94" pos:column="27">else
				<block type="pseudo"><expr_stmt><expr><name pos:line="95" pos:column="33">rx_token<pos:position pos:line="95" pos:column="41"/></name> <operator pos:line="95" pos:column="42">=<pos:position pos:line="95" pos:column="43"/></operator> <call><name pos:line="95" pos:column="44">read_int<pos:position pos:line="95" pos:column="52"/></name><argument_list pos:line="95" pos:column="52">(<argument><expr><name pos:line="95" pos:column="53">f<pos:position pos:line="95" pos:column="54"/></name></expr></argument>)<pos:position pos:line="95" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="56"/></expr_stmt></block></else></if>
			<if pos:line="96" pos:column="25">if <condition pos:line="96" pos:column="28">(<expr><name pos:line="96" pos:column="29">flag<pos:position pos:line="96" pos:column="33"/></name> <operator pos:line="96" pos:column="34">&amp;<pos:position pos:line="96" pos:column="39"/></operator> <literal type="number" pos:line="96" pos:column="36">1<pos:position pos:line="96" pos:column="37"/></literal></expr>)<pos:position pos:line="96" pos:column="38"/></condition><then pos:line="96" pos:column="38"> <block pos:line="96" pos:column="39">{
				<expr_stmt><expr><name pos:line="97" pos:column="33">rx_run<pos:position pos:line="97" pos:column="39"/></name> <operator pos:line="97" pos:column="40">=<pos:position pos:line="97" pos:column="41"/></operator> <call><name pos:line="97" pos:column="42">read_byte<pos:position pos:line="97" pos:column="51"/></name><argument_list pos:line="97" pos:column="51">(<argument><expr><name pos:line="97" pos:column="52">f<pos:position pos:line="97" pos:column="53"/></name></expr></argument>)<pos:position pos:line="97" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="55"/></expr_stmt>
				<expr_stmt><expr><name pos:line="98" pos:column="33">rx_run<pos:position pos:line="98" pos:column="39"/></name> <operator pos:line="98" pos:column="40">+=<pos:position pos:line="98" pos:column="42"/></operator> <call><name pos:line="98" pos:column="43">read_byte<pos:position pos:line="98" pos:column="52"/></name><argument_list pos:line="98" pos:column="52">(<argument><expr><name pos:line="98" pos:column="53">f<pos:position pos:line="98" pos:column="54"/></name></expr></argument>)<pos:position pos:line="98" pos:column="55"/></argument_list></call> <operator pos:line="98" pos:column="56">&lt;&lt;<pos:position pos:line="98" pos:column="64"/></operator> <literal type="number" pos:line="98" pos:column="59">8<pos:position pos:line="98" pos:column="60"/></literal></expr>;<pos:position pos:line="98" pos:column="61"/></expr_stmt>
				<expr_stmt><expr><name pos:line="99" pos:column="33">recv_state<pos:position pos:line="99" pos:column="43"/></name> <operator pos:line="99" pos:column="44">=<pos:position pos:line="99" pos:column="45"/></operator> <name pos:line="99" pos:column="46">r_running<pos:position pos:line="99" pos:column="55"/></name></expr>;<pos:position pos:line="99" pos:column="56"/></expr_stmt>
			}<pos:position pos:line="100" pos:column="26"/></block></then></if>
			<return pos:line="101" pos:column="25">return <expr><operator pos:line="101" pos:column="32">-<pos:position pos:line="101" pos:column="33"/></operator><literal type="number" pos:line="101" pos:column="33">1<pos:position pos:line="101" pos:column="34"/></literal> <operator pos:line="101" pos:column="35">-<pos:position pos:line="101" pos:column="36"/></operator> <name pos:line="101" pos:column="37">rx_token<pos:position pos:line="101" pos:column="45"/></name></expr>;<pos:position pos:line="101" pos:column="46"/></return>

		<case pos:line="103" pos:column="17">case <expr><name pos:line="103" pos:column="22">r_inflating<pos:position pos:line="103" pos:column="33"/></name></expr>:<pos:position pos:line="103" pos:column="34"/></case>
			<expr_stmt><expr><name><name pos:line="104" pos:column="25">rx_strm<pos:position pos:line="104" pos:column="32"/></name><operator pos:line="104" pos:column="32">.<pos:position pos:line="104" pos:column="33"/></operator><name pos:line="104" pos:column="33">next_out<pos:position pos:line="104" pos:column="41"/></name></name> <operator pos:line="104" pos:column="42">=<pos:position pos:line="104" pos:column="43"/></operator> <operator pos:line="104" pos:column="44">(<pos:position pos:line="104" pos:column="45"/></operator><name pos:line="104" pos:column="45">Bytef<pos:position pos:line="104" pos:column="50"/></name> <operator pos:line="104" pos:column="51">*<pos:position pos:line="104" pos:column="52"/></operator><operator pos:line="104" pos:column="52">)<pos:position pos:line="104" pos:column="53"/></operator><name pos:line="104" pos:column="53">dbuf<pos:position pos:line="104" pos:column="57"/></name></expr>;<pos:position pos:line="104" pos:column="58"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="105" pos:column="25">rx_strm<pos:position pos:line="105" pos:column="32"/></name><operator pos:line="105" pos:column="32">.<pos:position pos:line="105" pos:column="33"/></operator><name pos:line="105" pos:column="33">avail_out<pos:position pos:line="105" pos:column="42"/></name></name> <operator pos:line="105" pos:column="43">=<pos:position pos:line="105" pos:column="44"/></operator> <call><name pos:line="105" pos:column="45">AVAIL_OUT_SIZE<pos:position pos:line="105" pos:column="59"/></name><argument_list pos:line="105" pos:column="59">(<argument><expr><name pos:line="105" pos:column="60">CHUNK_SIZE<pos:position pos:line="105" pos:column="70"/></name></expr></argument>)<pos:position pos:line="105" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="105" pos:column="72"/></expr_stmt>
			<expr_stmt><expr><name pos:line="106" pos:column="25">r<pos:position pos:line="106" pos:column="26"/></name> <operator pos:line="106" pos:column="27">=<pos:position pos:line="106" pos:column="28"/></operator> <call><name pos:line="106" pos:column="29">inflate<pos:position pos:line="106" pos:column="36"/></name><argument_list pos:line="106" pos:column="36">(<argument><expr><operator pos:line="106" pos:column="37">&amp;<pos:position pos:line="106" pos:column="42"/></operator><name pos:line="106" pos:column="38">rx_strm<pos:position pos:line="106" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="106" pos:column="47">Z_NO_FLUSH<pos:position pos:line="106" pos:column="57"/></name></expr></argument>)<pos:position pos:line="106" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="106" pos:column="59"/></expr_stmt>
			<expr_stmt><expr><name pos:line="107" pos:column="25">n<pos:position pos:line="107" pos:column="26"/></name> <operator pos:line="107" pos:column="27">=<pos:position pos:line="107" pos:column="28"/></operator> <call><name pos:line="107" pos:column="29">AVAIL_OUT_SIZE<pos:position pos:line="107" pos:column="43"/></name><argument_list pos:line="107" pos:column="43">(<argument><expr><name pos:line="107" pos:column="44">CHUNK_SIZE<pos:position pos:line="107" pos:column="54"/></name></expr></argument>)<pos:position pos:line="107" pos:column="55"/></argument_list></call> <operator pos:line="107" pos:column="56">-<pos:position pos:line="107" pos:column="57"/></operator> <name><name pos:line="107" pos:column="58">rx_strm<pos:position pos:line="107" pos:column="65"/></name><operator pos:line="107" pos:column="65">.<pos:position pos:line="107" pos:column="66"/></operator><name pos:line="107" pos:column="66">avail_out<pos:position pos:line="107" pos:column="75"/></name></name></expr>;<pos:position pos:line="107" pos:column="76"/></expr_stmt>
			<if pos:line="108" pos:column="25">if <condition pos:line="108" pos:column="28">(<expr><name pos:line="108" pos:column="29">r<pos:position pos:line="108" pos:column="30"/></name> <operator pos:line="108" pos:column="31">!=<pos:position pos:line="108" pos:column="33"/></operator> <name pos:line="108" pos:column="34">Z_OK<pos:position pos:line="108" pos:column="38"/></name></expr>)<pos:position pos:line="108" pos:column="39"/></condition><then pos:line="108" pos:column="39"> <block pos:line="108" pos:column="40">{
				<expr_stmt><expr><call><name pos:line="109" pos:column="33">rprintf<pos:position pos:line="109" pos:column="40"/></name><argument_list pos:line="109" pos:column="40">(<argument><expr><name pos:line="109" pos:column="41">FERROR<pos:position pos:line="109" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="109" pos:column="49">"inflate returned %d (%d bytes)\n"<pos:position pos:line="109" pos:column="83"/></literal></expr></argument>, <argument><expr><name pos:line="109" pos:column="85">r<pos:position pos:line="109" pos:column="86"/></name></expr></argument>, <argument><expr><name pos:line="109" pos:column="88">n<pos:position pos:line="109" pos:column="89"/></name></expr></argument>)<pos:position pos:line="109" pos:column="90"/></argument_list></call></expr>;<pos:position pos:line="109" pos:column="91"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="110" pos:column="33">exit_cleanup<pos:position pos:line="110" pos:column="45"/></name><argument_list pos:line="110" pos:column="45">(<argument><expr><name pos:line="110" pos:column="46">RERR_STREAMIO<pos:position pos:line="110" pos:column="59"/></name></expr></argument>)<pos:position pos:line="110" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="110" pos:column="61"/></expr_stmt>
			}<pos:position pos:line="111" pos:column="26"/></block></then></if>
			<if pos:line="112" pos:column="25">if <condition pos:line="112" pos:column="28">(<expr><name><name pos:line="112" pos:column="29">rx_strm<pos:position pos:line="112" pos:column="36"/></name><operator pos:line="112" pos:column="36">.<pos:position pos:line="112" pos:column="37"/></operator><name pos:line="112" pos:column="37">avail_in<pos:position pos:line="112" pos:column="45"/></name></name> <operator pos:line="112" pos:column="46">==<pos:position pos:line="112" pos:column="48"/></operator> <literal type="number" pos:line="112" pos:column="49">0<pos:position pos:line="112" pos:column="50"/></literal></expr>)<pos:position pos:line="112" pos:column="51"/></condition><then pos:line="112" pos:column="51">
				<block type="pseudo"><expr_stmt><expr><name pos:line="113" pos:column="33">recv_state<pos:position pos:line="113" pos:column="43"/></name> <operator pos:line="113" pos:column="44">=<pos:position pos:line="113" pos:column="45"/></operator> <name pos:line="113" pos:column="46">r_inflated<pos:position pos:line="113" pos:column="56"/></name></expr>;<pos:position pos:line="113" pos:column="57"/></expr_stmt></block></then></if>
			<if pos:line="114" pos:column="25">if <condition pos:line="114" pos:column="28">(<expr><name pos:line="114" pos:column="29">n<pos:position pos:line="114" pos:column="30"/></name> <operator pos:line="114" pos:column="31">!=<pos:position pos:line="114" pos:column="33"/></operator> <literal type="number" pos:line="114" pos:column="34">0<pos:position pos:line="114" pos:column="35"/></literal></expr>)<pos:position pos:line="114" pos:column="36"/></condition><then pos:line="114" pos:column="36"> <block pos:line="114" pos:column="37">{
				<expr_stmt><expr><operator pos:line="115" pos:column="33">*<pos:position pos:line="115" pos:column="34"/></operator><name pos:line="115" pos:column="34">data<pos:position pos:line="115" pos:column="38"/></name> <operator pos:line="115" pos:column="39">=<pos:position pos:line="115" pos:column="40"/></operator> <name pos:line="115" pos:column="41">dbuf<pos:position pos:line="115" pos:column="45"/></name></expr>;<pos:position pos:line="115" pos:column="46"/></expr_stmt>
				<return pos:line="116" pos:column="33">return <expr><name pos:line="116" pos:column="40">n<pos:position pos:line="116" pos:column="41"/></name></expr>;<pos:position pos:line="116" pos:column="42"/></return>
			}<pos:position pos:line="117" pos:column="26"/></block></then></if>
			<break pos:line="118" pos:column="25">break;<pos:position pos:line="118" pos:column="31"/></break>

		<case pos:line="120" pos:column="17">case <expr><name pos:line="120" pos:column="22">r_running<pos:position pos:line="120" pos:column="31"/></name></expr>:<pos:position pos:line="120" pos:column="32"/></case>
			<expr_stmt><expr><operator pos:line="121" pos:column="25">++<pos:position pos:line="121" pos:column="27"/></operator><name pos:line="121" pos:column="27">rx_token<pos:position pos:line="121" pos:column="35"/></name></expr>;<pos:position pos:line="121" pos:column="36"/></expr_stmt>
			<if pos:line="122" pos:column="25">if <condition pos:line="122" pos:column="28">(<expr><operator pos:line="122" pos:column="29">--<pos:position pos:line="122" pos:column="31"/></operator><name pos:line="122" pos:column="31">rx_run<pos:position pos:line="122" pos:column="37"/></name> <operator pos:line="122" pos:column="38">==<pos:position pos:line="122" pos:column="40"/></operator> <literal type="number" pos:line="122" pos:column="41">0<pos:position pos:line="122" pos:column="42"/></literal></expr>)<pos:position pos:line="122" pos:column="43"/></condition><then pos:line="122" pos:column="43">
				<block type="pseudo"><expr_stmt><expr><name pos:line="123" pos:column="33">recv_state<pos:position pos:line="123" pos:column="43"/></name> <operator pos:line="123" pos:column="44">=<pos:position pos:line="123" pos:column="45"/></operator> <name pos:line="123" pos:column="46">r_idle<pos:position pos:line="123" pos:column="52"/></name></expr>;<pos:position pos:line="123" pos:column="53"/></expr_stmt></block></then></if>
			<return pos:line="124" pos:column="25">return <expr><operator pos:line="124" pos:column="32">-<pos:position pos:line="124" pos:column="33"/></operator><literal type="number" pos:line="124" pos:column="33">1<pos:position pos:line="124" pos:column="34"/></literal> <operator pos:line="124" pos:column="35">-<pos:position pos:line="124" pos:column="36"/></operator> <name pos:line="124" pos:column="37">rx_token<pos:position pos:line="124" pos:column="45"/></name></expr>;<pos:position pos:line="124" pos:column="46"/></return>
		}<pos:position pos:line="125" pos:column="18"/></block></switch>
	}<pos:position pos:line="126" pos:column="10"/></block></for>
}<pos:position pos:line="127" pos:column="2"/></block></function></unit>
