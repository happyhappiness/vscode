<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_463_rsync-2.6.0.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">file_checksum1<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name pos:line="1" pos:column="28">char<pos:position pos:line="1" pos:column="32"/></name> <modifier pos:line="1" pos:column="33">*<pos:position pos:line="1" pos:column="34"/></modifier></type><name pos:line="1" pos:column="34">fname<pos:position pos:line="1" pos:column="39"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="40"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">fd<pos:position pos:line="3" pos:column="15"/></name></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="17">i<pos:position pos:line="3" pos:column="18"/></name></decl>;<pos:position pos:line="3" pos:column="19"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">mdfour<pos:position pos:line="4" pos:column="22"/></name></name></type> <name pos:line="4" pos:column="23">md<pos:position pos:line="4" pos:column="25"/></name></decl>;<pos:position pos:line="4" pos:column="26"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">unsigned<pos:position pos:line="5" pos:column="17"/></name> <name pos:line="5" pos:column="18">char<pos:position pos:line="5" pos:column="22"/></name></type> <name><name pos:line="5" pos:column="23">buf<pos:position pos:line="5" pos:column="26"/></name><index pos:line="5" pos:column="26">[<expr><literal type="number" pos:line="5" pos:column="27">64<pos:position pos:line="5" pos:column="29"/></literal><operator pos:line="5" pos:column="29">*<pos:position pos:line="5" pos:column="30"/></operator><literal type="number" pos:line="5" pos:column="30">1024<pos:position pos:line="5" pos:column="34"/></literal></expr>]<pos:position pos:line="5" pos:column="35"/></index></name></decl>, <decl><type ref="prev"/><name><name pos:line="5" pos:column="37">sum<pos:position pos:line="5" pos:column="40"/></name><index pos:line="5" pos:column="40">[<expr><literal type="number" pos:line="5" pos:column="41">16<pos:position pos:line="5" pos:column="43"/></literal></expr>]<pos:position pos:line="5" pos:column="44"/></index></name></decl>;<pos:position pos:line="5" pos:column="45"/></decl_stmt>
	
	<expr_stmt><expr><name pos:line="7" pos:column="9">fd<pos:position pos:line="7" pos:column="11"/></name> <operator pos:line="7" pos:column="12">=<pos:position pos:line="7" pos:column="13"/></operator> <call><name pos:line="7" pos:column="14">open<pos:position pos:line="7" pos:column="18"/></name><argument_list pos:line="7" pos:column="18">(<argument><expr><name pos:line="7" pos:column="19">fname<pos:position pos:line="7" pos:column="24"/></name></expr></argument>,<argument><expr><name pos:line="7" pos:column="25">O_RDONLY<pos:position pos:line="7" pos:column="33"/></name></expr></argument>)<pos:position pos:line="7" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="35"/></expr_stmt>
	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><name pos:line="8" pos:column="13">fd<pos:position pos:line="8" pos:column="15"/></name> <operator pos:line="8" pos:column="16">==<pos:position pos:line="8" pos:column="18"/></operator> <operator pos:line="8" pos:column="19">-<pos:position pos:line="8" pos:column="20"/></operator><literal type="number" pos:line="8" pos:column="20">1<pos:position pos:line="8" pos:column="21"/></literal></expr>)<pos:position pos:line="8" pos:column="22"/></condition><then pos:line="8" pos:column="22"> <block pos:line="8" pos:column="23">{
		<expr_stmt><expr><call><name pos:line="9" pos:column="17">perror<pos:position pos:line="9" pos:column="23"/></name><argument_list pos:line="9" pos:column="23">(<argument><expr><literal type="string" pos:line="9" pos:column="24">"fname"<pos:position pos:line="9" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="33"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="10" pos:column="17">exit<pos:position pos:line="10" pos:column="21"/></name><argument_list pos:line="10" pos:column="21">(<argument><expr><literal type="number" pos:line="10" pos:column="22">1<pos:position pos:line="10" pos:column="23"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="25"/></expr_stmt>
	}<pos:position pos:line="11" pos:column="10"/></block></then></if>
	
	<expr_stmt><expr><call><name pos:line="13" pos:column="9">mdfour_begin<pos:position pos:line="13" pos:column="21"/></name><argument_list pos:line="13" pos:column="21">(<argument><expr><operator pos:line="13" pos:column="22">&amp;<pos:position pos:line="13" pos:column="27"/></operator><name pos:line="13" pos:column="23">md<pos:position pos:line="13" pos:column="25"/></name></expr></argument>)<pos:position pos:line="13" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="27"/></expr_stmt>

	<while pos:line="15" pos:column="9">while <condition pos:line="15" pos:column="15">(<expr><literal type="number" pos:line="15" pos:column="16">1<pos:position pos:line="15" pos:column="17"/></literal></expr>)<pos:position pos:line="15" pos:column="18"/></condition> <block pos:line="15" pos:column="19">{
		<decl_stmt><decl><type><name pos:line="16" pos:column="17">int<pos:position pos:line="16" pos:column="20"/></name></type> <name pos:line="16" pos:column="21">n<pos:position pos:line="16" pos:column="22"/></name> <init pos:line="16" pos:column="23">= <expr><call><name pos:line="16" pos:column="25">read<pos:position pos:line="16" pos:column="29"/></name><argument_list pos:line="16" pos:column="29">(<argument><expr><name pos:line="16" pos:column="30">fd<pos:position pos:line="16" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="34">buf<pos:position pos:line="16" pos:column="37"/></name></expr></argument>, <argument><expr><sizeof pos:line="16" pos:column="39">sizeof<argument_list pos:line="16" pos:column="45">(<argument><expr><name pos:line="16" pos:column="46">buf<pos:position pos:line="16" pos:column="49"/></name></expr></argument>)<pos:position pos:line="16" pos:column="50"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="16" pos:column="51"/></argument_list></call></expr></init></decl>;<pos:position pos:line="16" pos:column="52"/></decl_stmt>
		<if pos:line="17" pos:column="17">if <condition pos:line="17" pos:column="20">(<expr><name pos:line="17" pos:column="21">n<pos:position pos:line="17" pos:column="22"/></name> <operator pos:line="17" pos:column="23">&lt;=<pos:position pos:line="17" pos:column="28"/></operator> <literal type="number" pos:line="17" pos:column="26">0<pos:position pos:line="17" pos:column="27"/></literal></expr>)<pos:position pos:line="17" pos:column="28"/></condition><then pos:line="17" pos:column="28"> <block type="pseudo"><break pos:line="17" pos:column="29">break;<pos:position pos:line="17" pos:column="35"/></break></block></then></if>
		<expr_stmt><expr><call><name pos:line="18" pos:column="17">mdfour_update<pos:position pos:line="18" pos:column="30"/></name><argument_list pos:line="18" pos:column="30">(<argument><expr><operator pos:line="18" pos:column="31">&amp;<pos:position pos:line="18" pos:column="36"/></operator><name pos:line="18" pos:column="32">md<pos:position pos:line="18" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="36">buf<pos:position pos:line="18" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="41">n<pos:position pos:line="18" pos:column="42"/></name></expr></argument>)<pos:position pos:line="18" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="44"/></expr_stmt>
	}<pos:position pos:line="19" pos:column="10"/></block></while>

	<expr_stmt><expr><call><name pos:line="21" pos:column="9">close<pos:position pos:line="21" pos:column="14"/></name><argument_list pos:line="21" pos:column="14">(<argument><expr><name pos:line="21" pos:column="15">fd<pos:position pos:line="21" pos:column="17"/></name></expr></argument>)<pos:position pos:line="21" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="19"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="23" pos:column="9">mdfour_result<pos:position pos:line="23" pos:column="22"/></name><argument_list pos:line="23" pos:column="22">(<argument><expr><operator pos:line="23" pos:column="23">&amp;<pos:position pos:line="23" pos:column="28"/></operator><name pos:line="23" pos:column="24">md<pos:position pos:line="23" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="28">sum<pos:position pos:line="23" pos:column="31"/></name></expr></argument>)<pos:position pos:line="23" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="33"/></expr_stmt>

	<for pos:line="25" pos:column="9">for <control pos:line="25" pos:column="13">(<init><expr><name pos:line="25" pos:column="14">i<pos:position pos:line="25" pos:column="15"/></name><operator pos:line="25" pos:column="15">=<pos:position pos:line="25" pos:column="16"/></operator><literal type="number" pos:line="25" pos:column="16">0<pos:position pos:line="25" pos:column="17"/></literal></expr>;<pos:position pos:line="25" pos:column="18"/></init><condition><expr><name pos:line="25" pos:column="18">i<pos:position pos:line="25" pos:column="19"/></name><operator pos:line="25" pos:column="19">&lt;<pos:position pos:line="25" pos:column="23"/></operator><literal type="number" pos:line="25" pos:column="20">16<pos:position pos:line="25" pos:column="22"/></literal></expr>;<pos:position pos:line="25" pos:column="23"/></condition><incr><expr><name pos:line="25" pos:column="23">i<pos:position pos:line="25" pos:column="24"/></name><operator pos:line="25" pos:column="24">++<pos:position pos:line="25" pos:column="26"/></operator></expr></incr>)<pos:position pos:line="25" pos:column="27"/></control>
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="26" pos:column="17">printf<pos:position pos:line="26" pos:column="23"/></name><argument_list pos:line="26" pos:column="23">(<argument><expr><literal type="string" pos:line="26" pos:column="24">"%02X"<pos:position pos:line="26" pos:column="30"/></literal></expr></argument>, <argument><expr><name><name pos:line="26" pos:column="32">sum<pos:position pos:line="26" pos:column="35"/></name><index pos:line="26" pos:column="35">[<expr><name pos:line="26" pos:column="36">i<pos:position pos:line="26" pos:column="37"/></name></expr>]<pos:position pos:line="26" pos:column="38"/></index></name></expr></argument>)<pos:position pos:line="26" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="40"/></expr_stmt></block></for>
	<expr_stmt><expr><call><name pos:line="27" pos:column="9">printf<pos:position pos:line="27" pos:column="15"/></name><argument_list pos:line="27" pos:column="15">(<argument><expr><literal type="string" pos:line="27" pos:column="16">"\n"<pos:position pos:line="27" pos:column="20"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="22"/></expr_stmt>
}<pos:position pos:line="28" pos:column="2"/></block></function></unit>
