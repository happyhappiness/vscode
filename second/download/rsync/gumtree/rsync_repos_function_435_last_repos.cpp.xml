<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_435_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">pm_process<pos:position pos:line="1" pos:column="15"/></name><parameter_list pos:line="1" pos:column="15">( <parameter><decl><type><name pos:line="1" pos:column="17">char<pos:position pos:line="1" pos:column="21"/></name> <modifier pos:line="1" pos:column="22">*<pos:position pos:line="1" pos:column="23"/></modifier></type><name pos:line="1" pos:column="23">FileName<pos:position pos:line="1" pos:column="31"/></name></decl></parameter>,
                 <parameter><function_decl><type><name pos:line="2" pos:column="18">BOOL<pos:position pos:line="2" pos:column="22"/></name></type> (<modifier pos:line="2" pos:column="24">*<pos:position pos:line="2" pos:column="25"/></modifier><name pos:line="2" pos:column="25">sfunc<pos:position pos:line="2" pos:column="30"/></name>)<parameter_list pos:line="2" pos:column="31">(<parameter><decl><type><name pos:line="2" pos:column="32">char<pos:position pos:line="2" pos:column="36"/></name> <modifier pos:line="2" pos:column="37">*<pos:position pos:line="2" pos:column="38"/></modifier></type></decl></parameter>)<pos:position pos:line="2" pos:column="39"/></parameter_list></function_decl></parameter>,
                 <parameter><function_decl><type><name pos:line="3" pos:column="18">BOOL<pos:position pos:line="3" pos:column="22"/></name></type> (<modifier pos:line="3" pos:column="24">*<pos:position pos:line="3" pos:column="25"/></modifier><name pos:line="3" pos:column="25">pfunc<pos:position pos:line="3" pos:column="30"/></name>)<parameter_list pos:line="3" pos:column="31">(<parameter><decl><type><name pos:line="3" pos:column="32">char<pos:position pos:line="3" pos:column="36"/></name> <modifier pos:line="3" pos:column="37">*<pos:position pos:line="3" pos:column="38"/></modifier></type></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="40">char<pos:position pos:line="3" pos:column="44"/></name> <modifier pos:line="3" pos:column="45">*<pos:position pos:line="3" pos:column="46"/></modifier></type></decl></parameter>)<pos:position pos:line="3" pos:column="47"/></parameter_list></function_decl></parameter> )<pos:position pos:line="3" pos:column="49"/></parameter_list>
  <comment type="block" pos:line="4" pos:column="3">/* ------------------------------------------------------------------------ **
   * Process the named parameter file.
   *
   *  Input:  FileName  - The pathname of the parameter file to be opened.
   *          sfunc     - A pointer to a function that will be called when
   *                      a section name is discovered.
   *          pfunc     - A pointer to a function that will be called when
   *                      a parameter name and value are discovered.
   *
   *  Output: 1 if the file was successfully parsed, 2 if parsing ended at a
   *  section header w/o a section function, else 0.
   *
   * ------------------------------------------------------------------------ **
   */</comment>
  <block pos:line="18" pos:column="3">{
  <decl_stmt><decl><type><name pos:line="19" pos:column="3">int<pos:position pos:line="19" pos:column="6"/></name></type>   <name pos:line="19" pos:column="9">result<pos:position pos:line="19" pos:column="15"/></name></decl>;<pos:position pos:line="19" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="20" pos:column="3">FILE<pos:position pos:line="20" pos:column="7"/></name> <modifier pos:line="20" pos:column="8">*<pos:position pos:line="20" pos:column="9"/></modifier></type><name pos:line="20" pos:column="9">InFile<pos:position pos:line="20" pos:column="15"/></name></decl>;<pos:position pos:line="20" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="21" pos:column="3">char<pos:position pos:line="21" pos:column="7"/></name> <modifier pos:line="21" pos:column="8">*<pos:position pos:line="21" pos:column="9"/></modifier></type><name pos:line="21" pos:column="9">func<pos:position pos:line="21" pos:column="13"/></name> <init pos:line="21" pos:column="14">= <expr><literal type="string" pos:line="21" pos:column="16">"params.c:pm_process() -"<pos:position pos:line="21" pos:column="41"/></literal></expr></init></decl>;<pos:position pos:line="21" pos:column="42"/></decl_stmt>

  <expr_stmt><expr><name pos:line="23" pos:column="3">InFile<pos:position pos:line="23" pos:column="9"/></name> <operator pos:line="23" pos:column="10">=<pos:position pos:line="23" pos:column="11"/></operator> <call><name pos:line="23" pos:column="12">OpenConfFile<pos:position pos:line="23" pos:column="24"/></name><argument_list pos:line="23" pos:column="24">( <argument><expr><name pos:line="23" pos:column="26">FileName<pos:position pos:line="23" pos:column="34"/></name></expr></argument> )<pos:position pos:line="23" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="37"/></expr_stmt>          <comment type="block" pos:line="23" pos:column="47">/* Open the config file. */</comment>
  <if pos:line="24" pos:column="3">if<condition pos:line="24" pos:column="5">( <expr><name pos:line="24" pos:column="7">NULL<pos:position pos:line="24" pos:column="11"/></name> <operator pos:line="24" pos:column="12">==<pos:position pos:line="24" pos:column="14"/></operator> <name pos:line="24" pos:column="15">InFile<pos:position pos:line="24" pos:column="21"/></name></expr> )<pos:position pos:line="24" pos:column="23"/></condition><then pos:line="24" pos:column="23">
    <block type="pseudo"><return pos:line="25" pos:column="5">return<expr><operator pos:line="25" pos:column="11">(<pos:position pos:line="25" pos:column="12"/></operator> <name pos:line="25" pos:column="13">False<pos:position pos:line="25" pos:column="18"/></name> <operator pos:line="25" pos:column="19">)<pos:position pos:line="25" pos:column="20"/></operator></expr>;<pos:position pos:line="25" pos:column="21"/></return></block></then></if>

  <if pos:line="27" pos:column="3">if<condition pos:line="27" pos:column="5">( <expr><name pos:line="27" pos:column="7">NULL<pos:position pos:line="27" pos:column="11"/></name> <operator pos:line="27" pos:column="12">!=<pos:position pos:line="27" pos:column="14"/></operator> <name pos:line="27" pos:column="15">bufr<pos:position pos:line="27" pos:column="19"/></name></expr> )<pos:position pos:line="27" pos:column="21"/></condition><then pos:line="27" pos:column="21">                          <comment type="block" pos:line="27" pos:column="47">/* If we already have a buffer */</comment>
    <block type="pseudo"><expr_stmt><expr><name pos:line="28" pos:column="5">result<pos:position pos:line="28" pos:column="11"/></name> <operator pos:line="28" pos:column="12">=<pos:position pos:line="28" pos:column="13"/></operator> <call><name pos:line="28" pos:column="14">Parse<pos:position pos:line="28" pos:column="19"/></name><argument_list pos:line="28" pos:column="19">( <argument><expr><name pos:line="28" pos:column="21">InFile<pos:position pos:line="28" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="29">sfunc<pos:position pos:line="28" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="36">pfunc<pos:position pos:line="28" pos:column="41"/></name></expr></argument> )<pos:position pos:line="28" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="44"/></expr_stmt></block></then>   <comment type="block" pos:line="28" pos:column="47">/* (recursive call), then just */</comment>
                                              <comment type="block" pos:line="29" pos:column="47">/* use it.                     */</comment>

  <else pos:line="31" pos:column="3">else                                        <comment type="block" pos:line="31" pos:column="47">/* If we don't have a buffer   */</comment>
    <block pos:line="32" pos:column="5">{                                         <comment type="block" pos:line="32" pos:column="47">/* allocate one, then parse,   */</comment>
    <expr_stmt><expr><name pos:line="33" pos:column="5">bSize<pos:position pos:line="33" pos:column="10"/></name> <operator pos:line="33" pos:column="11">=<pos:position pos:line="33" pos:column="12"/></operator> <name pos:line="33" pos:column="13">BUFR_INC<pos:position pos:line="33" pos:column="21"/></name></expr>;<pos:position pos:line="33" pos:column="22"/></expr_stmt>                         <comment type="block" pos:line="33" pos:column="47">/* then free.                  */</comment>
    <expr_stmt><expr><name pos:line="34" pos:column="5">bufr<pos:position pos:line="34" pos:column="9"/></name> <operator pos:line="34" pos:column="10">=<pos:position pos:line="34" pos:column="11"/></operator> <call><name pos:line="34" pos:column="12">new_array<pos:position pos:line="34" pos:column="21"/></name><argument_list pos:line="34" pos:column="21">( <argument><expr><name pos:line="34" pos:column="23">char<pos:position pos:line="34" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="29">bSize<pos:position pos:line="34" pos:column="34"/></name></expr></argument> )<pos:position pos:line="34" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="37"/></expr_stmt>
    <if pos:line="35" pos:column="5">if<condition pos:line="35" pos:column="7">( <expr><name pos:line="35" pos:column="9">NULL<pos:position pos:line="35" pos:column="13"/></name> <operator pos:line="35" pos:column="14">==<pos:position pos:line="35" pos:column="16"/></operator> <name pos:line="35" pos:column="17">bufr<pos:position pos:line="35" pos:column="21"/></name></expr> )<pos:position pos:line="35" pos:column="23"/></condition><then pos:line="35" pos:column="23">
      <block pos:line="36" pos:column="7">{
      <expr_stmt><expr><call><name pos:line="37" pos:column="7">rprintf<pos:position pos:line="37" pos:column="14"/></name><argument_list pos:line="37" pos:column="14">(<argument><expr><name pos:line="37" pos:column="15">FLOG<pos:position pos:line="37" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="37" pos:column="21">"%s memory allocation failure.\n"<pos:position pos:line="37" pos:column="54"/></literal></expr></argument>, <argument><expr><name pos:line="37" pos:column="56">func<pos:position pos:line="37" pos:column="60"/></name></expr></argument>)<pos:position pos:line="37" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="62"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="38" pos:column="7">fclose<pos:position pos:line="38" pos:column="13"/></name><argument_list pos:line="38" pos:column="13">(<argument><expr><name pos:line="38" pos:column="14">InFile<pos:position pos:line="38" pos:column="20"/></name></expr></argument>)<pos:position pos:line="38" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="22"/></expr_stmt>
      <return pos:line="39" pos:column="7">return<expr><operator pos:line="39" pos:column="13">(<pos:position pos:line="39" pos:column="14"/></operator> <name pos:line="39" pos:column="15">False<pos:position pos:line="39" pos:column="20"/></name> <operator pos:line="39" pos:column="21">)<pos:position pos:line="39" pos:column="22"/></operator></expr>;<pos:position pos:line="39" pos:column="23"/></return>
      }<pos:position pos:line="40" pos:column="8"/></block></then></if>
    <expr_stmt><expr><name pos:line="41" pos:column="5">result<pos:position pos:line="41" pos:column="11"/></name> <operator pos:line="41" pos:column="12">=<pos:position pos:line="41" pos:column="13"/></operator> <call><name pos:line="41" pos:column="14">Parse<pos:position pos:line="41" pos:column="19"/></name><argument_list pos:line="41" pos:column="19">( <argument><expr><name pos:line="41" pos:column="21">InFile<pos:position pos:line="41" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="29">sfunc<pos:position pos:line="41" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="36">pfunc<pos:position pos:line="41" pos:column="41"/></name></expr></argument> )<pos:position pos:line="41" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="44"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="42" pos:column="5">free<pos:position pos:line="42" pos:column="9"/></name><argument_list pos:line="42" pos:column="9">( <argument><expr><name pos:line="42" pos:column="11">bufr<pos:position pos:line="42" pos:column="15"/></name></expr></argument> )<pos:position pos:line="42" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="18"/></expr_stmt>
    <expr_stmt><expr><name pos:line="43" pos:column="5">bufr<pos:position pos:line="43" pos:column="9"/></name>  <operator pos:line="43" pos:column="11">=<pos:position pos:line="43" pos:column="12"/></operator> <name pos:line="43" pos:column="13">NULL<pos:position pos:line="43" pos:column="17"/></name></expr>;<pos:position pos:line="43" pos:column="18"/></expr_stmt>
    <expr_stmt><expr><name pos:line="44" pos:column="5">bSize<pos:position pos:line="44" pos:column="10"/></name> <operator pos:line="44" pos:column="11">=<pos:position pos:line="44" pos:column="12"/></operator> <literal type="number" pos:line="44" pos:column="13">0<pos:position pos:line="44" pos:column="14"/></literal></expr>;<pos:position pos:line="44" pos:column="15"/></expr_stmt>
    }<pos:position pos:line="45" pos:column="6"/></block></else></if>

  <expr_stmt><expr><call><name pos:line="47" pos:column="3">fclose<pos:position pos:line="47" pos:column="9"/></name><argument_list pos:line="47" pos:column="9">(<argument><expr><name pos:line="47" pos:column="10">InFile<pos:position pos:line="47" pos:column="16"/></name></expr></argument>)<pos:position pos:line="47" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="18"/></expr_stmt>

  <if pos:line="49" pos:column="3">if<condition pos:line="49" pos:column="5">( <expr><operator pos:line="49" pos:column="7">!<pos:position pos:line="49" pos:column="8"/></operator><name pos:line="49" pos:column="8">result<pos:position pos:line="49" pos:column="14"/></name></expr> )<pos:position pos:line="49" pos:column="16"/></condition><then pos:line="49" pos:column="16">                               <comment type="block" pos:line="49" pos:column="47">/* Generic failure. */</comment>
    <block pos:line="50" pos:column="5">{
    <expr_stmt><expr><call><name pos:line="51" pos:column="5">rprintf<pos:position pos:line="51" pos:column="12"/></name><argument_list pos:line="51" pos:column="12">(<argument><expr><name pos:line="51" pos:column="13">FLOG<pos:position pos:line="51" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="51" pos:column="19">"%s Failed.  Error returned from params.c:parse().\n"<pos:position pos:line="51" pos:column="72"/></literal></expr></argument>, <argument><expr><name pos:line="51" pos:column="74">func<pos:position pos:line="51" pos:column="78"/></name></expr></argument>)<pos:position pos:line="51" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="80"/></expr_stmt>
    <return pos:line="52" pos:column="5">return <expr><literal type="number" pos:line="52" pos:column="12">0<pos:position pos:line="52" pos:column="13"/></literal></expr>;<pos:position pos:line="52" pos:column="14"/></return>
    }<pos:position pos:line="53" pos:column="6"/></block></then></if>

  <return pos:line="55" pos:column="3">return <expr><name pos:line="55" pos:column="10">result<pos:position pos:line="55" pos:column="16"/></name></expr>;<pos:position pos:line="55" pos:column="17"/></return>
  }<pos:position pos:line="56" pos:column="4"/></block></function></unit>
