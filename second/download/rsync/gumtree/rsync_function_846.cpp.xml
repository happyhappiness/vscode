<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_function_846.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">setup_protocol<pos:position pos:line="1" pos:column="20"/></name><parameter_list pos:line="1" pos:column="20">(<parameter><decl><type><name pos:line="1" pos:column="21">int<pos:position pos:line="1" pos:column="24"/></name></type> <name pos:line="1" pos:column="25">f_out<pos:position pos:line="1" pos:column="30"/></name></decl></parameter>,<parameter><decl><type><name pos:line="1" pos:column="31">int<pos:position pos:line="1" pos:column="34"/></name></type> <name pos:line="1" pos:column="35">f_in<pos:position pos:line="1" pos:column="39"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="40"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<if pos:line="3" pos:column="9">if <condition pos:line="3" pos:column="12">(<expr><name pos:line="3" pos:column="13">am_sender<pos:position pos:line="3" pos:column="22"/></name></expr>)<pos:position pos:line="3" pos:column="23"/></condition><then pos:line="3" pos:column="23">
		<block type="pseudo"><expr_stmt><expr><name pos:line="4" pos:column="17">file_extra_cnt<pos:position pos:line="4" pos:column="31"/></name> <operator pos:line="4" pos:column="32">+=<pos:position pos:line="4" pos:column="34"/></operator> <name pos:line="4" pos:column="35">PTR_EXTRA_CNT<pos:position pos:line="4" pos:column="48"/></name></expr>;<pos:position pos:line="4" pos:column="49"/></expr_stmt></block></then>
	<else pos:line="5" pos:column="9">else
		<block type="pseudo"><expr_stmt><expr><name pos:line="6" pos:column="17">file_extra_cnt<pos:position pos:line="6" pos:column="31"/></name><operator pos:line="6" pos:column="31">++<pos:position pos:line="6" pos:column="33"/></operator></expr>;<pos:position pos:line="6" pos:column="34"/></expr_stmt></block></else></if>
	<if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<expr><name pos:line="7" pos:column="13">preserve_uid<pos:position pos:line="7" pos:column="25"/></name></expr>)<pos:position pos:line="7" pos:column="26"/></condition><then pos:line="7" pos:column="26">
		<block type="pseudo"><expr_stmt><expr><name pos:line="8" pos:column="17">uid_ndx<pos:position pos:line="8" pos:column="24"/></name> <operator pos:line="8" pos:column="25">=<pos:position pos:line="8" pos:column="26"/></operator> <operator pos:line="8" pos:column="27">++<pos:position pos:line="8" pos:column="29"/></operator><name pos:line="8" pos:column="29">file_extra_cnt<pos:position pos:line="8" pos:column="43"/></name></expr>;<pos:position pos:line="8" pos:column="44"/></expr_stmt></block></then></if>
	<if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><name pos:line="9" pos:column="13">preserve_gid<pos:position pos:line="9" pos:column="25"/></name></expr>)<pos:position pos:line="9" pos:column="26"/></condition><then pos:line="9" pos:column="26">
		<block type="pseudo"><expr_stmt><expr><name pos:line="10" pos:column="17">gid_ndx<pos:position pos:line="10" pos:column="24"/></name> <operator pos:line="10" pos:column="25">=<pos:position pos:line="10" pos:column="26"/></operator> <operator pos:line="10" pos:column="27">++<pos:position pos:line="10" pos:column="29"/></operator><name pos:line="10" pos:column="29">file_extra_cnt<pos:position pos:line="10" pos:column="43"/></name></expr>;<pos:position pos:line="10" pos:column="44"/></expr_stmt></block></then></if>
	<if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><name pos:line="11" pos:column="13">preserve_acls<pos:position pos:line="11" pos:column="26"/></name> <operator pos:line="11" pos:column="27">&amp;&amp;<pos:position pos:line="11" pos:column="37"/></operator> <operator pos:line="11" pos:column="30">!<pos:position pos:line="11" pos:column="31"/></operator><name pos:line="11" pos:column="31">am_sender<pos:position pos:line="11" pos:column="40"/></name></expr>)<pos:position pos:line="11" pos:column="41"/></condition><then pos:line="11" pos:column="41">
		<block type="pseudo"><expr_stmt><expr><name pos:line="12" pos:column="17">acls_ndx<pos:position pos:line="12" pos:column="25"/></name> <operator pos:line="12" pos:column="26">=<pos:position pos:line="12" pos:column="27"/></operator> <operator pos:line="12" pos:column="28">++<pos:position pos:line="12" pos:column="30"/></operator><name pos:line="12" pos:column="30">file_extra_cnt<pos:position pos:line="12" pos:column="44"/></name></expr>;<pos:position pos:line="12" pos:column="45"/></expr_stmt></block></then></if>
	<if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><name pos:line="13" pos:column="13">preserve_xattrs<pos:position pos:line="13" pos:column="28"/></name></expr>)<pos:position pos:line="13" pos:column="29"/></condition><then pos:line="13" pos:column="29">
		<block type="pseudo"><expr_stmt><expr><name pos:line="14" pos:column="17">xattrs_ndx<pos:position pos:line="14" pos:column="27"/></name> <operator pos:line="14" pos:column="28">=<pos:position pos:line="14" pos:column="29"/></operator> <operator pos:line="14" pos:column="30">++<pos:position pos:line="14" pos:column="32"/></operator><name pos:line="14" pos:column="32">file_extra_cnt<pos:position pos:line="14" pos:column="46"/></name></expr>;<pos:position pos:line="14" pos:column="47"/></expr_stmt></block></then></if>

	<if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><name pos:line="16" pos:column="13">am_server<pos:position pos:line="16" pos:column="22"/></name></expr>)<pos:position pos:line="16" pos:column="23"/></condition><then pos:line="16" pos:column="23">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="17" pos:column="17">set_allow_inc_recurse<pos:position pos:line="17" pos:column="38"/></name><argument_list pos:line="17" pos:column="38">()<pos:position pos:line="17" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="41"/></expr_stmt></block></then></if>

	<if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><name pos:line="19" pos:column="13">remote_protocol<pos:position pos:line="19" pos:column="28"/></name> <operator pos:line="19" pos:column="29">==<pos:position pos:line="19" pos:column="31"/></operator> <literal type="number" pos:line="19" pos:column="32">0<pos:position pos:line="19" pos:column="33"/></literal></expr>)<pos:position pos:line="19" pos:column="34"/></condition><then pos:line="19" pos:column="34"> <block pos:line="19" pos:column="35">{
		<if pos:line="20" pos:column="17">if <condition pos:line="20" pos:column="20">(<expr><name pos:line="20" pos:column="21">am_server<pos:position pos:line="20" pos:column="30"/></name> <operator pos:line="20" pos:column="31">&amp;&amp;<pos:position pos:line="20" pos:column="41"/></operator> <operator pos:line="20" pos:column="34">!<pos:position pos:line="20" pos:column="35"/></operator><name pos:line="20" pos:column="35">local_server<pos:position pos:line="20" pos:column="47"/></name></expr>)<pos:position pos:line="20" pos:column="48"/></condition><then pos:line="20" pos:column="48">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="21" pos:column="25">check_sub_protocol<pos:position pos:line="21" pos:column="43"/></name><argument_list pos:line="21" pos:column="43">()<pos:position pos:line="21" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="46"/></expr_stmt></block></then></if>
		<if pos:line="22" pos:column="17">if <condition pos:line="22" pos:column="20">(<expr><operator pos:line="22" pos:column="21">!<pos:position pos:line="22" pos:column="22"/></operator><name pos:line="22" pos:column="22">read_batch<pos:position pos:line="22" pos:column="32"/></name></expr>)<pos:position pos:line="22" pos:column="33"/></condition><then pos:line="22" pos:column="33">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="23" pos:column="25">write_int<pos:position pos:line="23" pos:column="34"/></name><argument_list pos:line="23" pos:column="34">(<argument><expr><name pos:line="23" pos:column="35">f_out<pos:position pos:line="23" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="42">protocol_version<pos:position pos:line="23" pos:column="58"/></name></expr></argument>)<pos:position pos:line="23" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="60"/></expr_stmt></block></then></if>
		<expr_stmt><expr><name pos:line="24" pos:column="17">remote_protocol<pos:position pos:line="24" pos:column="32"/></name> <operator pos:line="24" pos:column="33">=<pos:position pos:line="24" pos:column="34"/></operator> <call><name pos:line="24" pos:column="35">read_int<pos:position pos:line="24" pos:column="43"/></name><argument_list pos:line="24" pos:column="43">(<argument><expr><name pos:line="24" pos:column="44">f_in<pos:position pos:line="24" pos:column="48"/></name></expr></argument>)<pos:position pos:line="24" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="50"/></expr_stmt>
		<if pos:line="25" pos:column="17">if <condition pos:line="25" pos:column="20">(<expr><name pos:line="25" pos:column="21">protocol_version<pos:position pos:line="25" pos:column="37"/></name> <operator pos:line="25" pos:column="38">&gt;<pos:position pos:line="25" pos:column="42"/></operator> <name pos:line="25" pos:column="40">remote_protocol<pos:position pos:line="25" pos:column="55"/></name></expr>)<pos:position pos:line="25" pos:column="56"/></condition><then pos:line="25" pos:column="56">
			<block type="pseudo"><expr_stmt><expr><name pos:line="26" pos:column="25">protocol_version<pos:position pos:line="26" pos:column="41"/></name> <operator pos:line="26" pos:column="42">=<pos:position pos:line="26" pos:column="43"/></operator> <name pos:line="26" pos:column="44">remote_protocol<pos:position pos:line="26" pos:column="59"/></name></expr>;<pos:position pos:line="26" pos:column="60"/></expr_stmt></block></then></if>
	}<pos:position pos:line="27" pos:column="10"/></block></then></if>
	<if pos:line="28" pos:column="9">if <condition pos:line="28" pos:column="12">(<expr><name pos:line="28" pos:column="13">read_batch<pos:position pos:line="28" pos:column="23"/></name> <operator pos:line="28" pos:column="24">&amp;&amp;<pos:position pos:line="28" pos:column="34"/></operator> <name pos:line="28" pos:column="27">remote_protocol<pos:position pos:line="28" pos:column="42"/></name> <operator pos:line="28" pos:column="43">&gt;<pos:position pos:line="28" pos:column="47"/></operator> <name pos:line="28" pos:column="45">protocol_version<pos:position pos:line="28" pos:column="61"/></name></expr>)<pos:position pos:line="28" pos:column="62"/></condition><then pos:line="28" pos:column="62"> <block pos:line="28" pos:column="63">{
		<expr_stmt><expr><call><name pos:line="29" pos:column="17">rprintf<pos:position pos:line="29" pos:column="24"/></name><argument_list pos:line="29" pos:column="24">(<argument><expr><name pos:line="29" pos:column="25">FERROR<pos:position pos:line="29" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="29" pos:column="33">"The protocol version in the batch file is too new (%d &gt; %d).\n"<pos:position pos:line="29" pos:column="100"/></literal></expr></argument>,
			<argument><expr><name pos:line="30" pos:column="25">remote_protocol<pos:position pos:line="30" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="42">protocol_version<pos:position pos:line="30" pos:column="58"/></name></expr></argument>)<pos:position pos:line="30" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="60"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="31" pos:column="17">exit_cleanup<pos:position pos:line="31" pos:column="29"/></name><argument_list pos:line="31" pos:column="29">(<argument><expr><name pos:line="31" pos:column="30">RERR_PROTOCOL<pos:position pos:line="31" pos:column="43"/></name></expr></argument>)<pos:position pos:line="31" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="45"/></expr_stmt>
	}<pos:position pos:line="32" pos:column="10"/></block></then></if>

	<if pos:line="34" pos:column="9">if <condition pos:line="34" pos:column="12">(<expr><name pos:line="34" pos:column="13">verbose<pos:position pos:line="34" pos:column="20"/></name> <operator pos:line="34" pos:column="21">&gt;<pos:position pos:line="34" pos:column="25"/></operator> <literal type="number" pos:line="34" pos:column="23">3<pos:position pos:line="34" pos:column="24"/></literal></expr>)<pos:position pos:line="34" pos:column="25"/></condition><then pos:line="34" pos:column="25"> <block pos:line="34" pos:column="26">{
		<expr_stmt><expr><call><name pos:line="35" pos:column="17">rprintf<pos:position pos:line="35" pos:column="24"/></name><argument_list pos:line="35" pos:column="24">(<argument><expr><name pos:line="35" pos:column="25">FINFO<pos:position pos:line="35" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="35" pos:column="32">"(%s) Protocol versions: remote=%d, negotiated=%d\n"<pos:position pos:line="35" pos:column="84"/></literal></expr></argument>,
			<argument><expr><ternary><condition><expr><name pos:line="36" pos:column="25">am_server<pos:position pos:line="36" pos:column="34"/></name></expr>?<pos:position pos:line="36" pos:column="35"/></condition><then pos:line="36" pos:column="35"> <expr><literal type="string" pos:line="36" pos:column="36">"Server"<pos:position pos:line="36" pos:column="44"/></literal></expr> <pos:position pos:line="36" pos:column="45"/></then><else pos:line="36" pos:column="45">: <expr><literal type="string" pos:line="36" pos:column="47">"Client"<pos:position pos:line="36" pos:column="55"/></literal></expr></else></ternary></expr></argument>, <argument><expr><name pos:line="36" pos:column="57">remote_protocol<pos:position pos:line="36" pos:column="72"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="74">protocol_version<pos:position pos:line="36" pos:column="90"/></name></expr></argument>)<pos:position pos:line="36" pos:column="91"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="92"/></expr_stmt>
	}<pos:position pos:line="37" pos:column="10"/></block></then></if>
	<if pos:line="38" pos:column="9">if <condition pos:line="38" pos:column="12">(<expr><name><name pos:line="38" pos:column="13">remote_protocol<pos:position pos:line="38" pos:column="28"/></name> <argument_list type="generic" pos:line="38" pos:column="29">&lt; <argument><expr><name pos:line="38" pos:column="31">MIN_PROTOCOL_VERSION<pos:position pos:line="38" pos:column="51"/></name>
	 <operator pos:line="39" pos:column="10">||<pos:position pos:line="39" pos:column="12"/></operator> <name pos:line="39" pos:column="13">remote_protocol<pos:position pos:line="39" pos:column="28"/></name></expr></argument> &gt;<pos:position pos:line="39" pos:column="33"/></argument_list></name> <name pos:line="39" pos:column="31">MAX_PROTOCOL_VERSION<pos:position pos:line="39" pos:column="51"/></name></expr>)<pos:position pos:line="39" pos:column="52"/></condition><then pos:line="39" pos:column="52"> <block pos:line="39" pos:column="53">{
		<expr_stmt><expr><call><name pos:line="40" pos:column="17">rprintf<pos:position pos:line="40" pos:column="24"/></name><argument_list pos:line="40" pos:column="24">(<argument><expr><name pos:line="40" pos:column="25">FERROR<pos:position pos:line="40" pos:column="31"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="40" pos:column="32">"protocol version mismatch -- is your shell clean?\n"<pos:position pos:line="40" pos:column="85"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="86"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="87"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="41" pos:column="17">rprintf<pos:position pos:line="41" pos:column="24"/></name><argument_list pos:line="41" pos:column="24">(<argument><expr><name pos:line="41" pos:column="25">FERROR<pos:position pos:line="41" pos:column="31"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="41" pos:column="32">"(see the rsync man page for an explanation)\n"<pos:position pos:line="41" pos:column="79"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="81"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="42" pos:column="17">exit_cleanup<pos:position pos:line="42" pos:column="29"/></name><argument_list pos:line="42" pos:column="29">(<argument><expr><name pos:line="42" pos:column="30">RERR_PROTOCOL<pos:position pos:line="42" pos:column="43"/></name></expr></argument>)<pos:position pos:line="42" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="45"/></expr_stmt>
	}<pos:position pos:line="43" pos:column="10"/></block></then></if>
	<if pos:line="44" pos:column="9">if <condition pos:line="44" pos:column="12">(<expr><name pos:line="44" pos:column="13">remote_protocol<pos:position pos:line="44" pos:column="28"/></name> <operator pos:line="44" pos:column="29">&lt;<pos:position pos:line="44" pos:column="33"/></operator> <name pos:line="44" pos:column="31">OLD_PROTOCOL_VERSION<pos:position pos:line="44" pos:column="51"/></name></expr>)<pos:position pos:line="44" pos:column="52"/></condition><then pos:line="44" pos:column="52"> <block pos:line="44" pos:column="53">{
		<expr_stmt><expr><call><name pos:line="45" pos:column="17">rprintf<pos:position pos:line="45" pos:column="24"/></name><argument_list pos:line="45" pos:column="24">(<argument><expr><name pos:line="45" pos:column="25">FINFO<pos:position pos:line="45" pos:column="30"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="45" pos:column="31">"%s is very old version of rsync, upgrade recommended.\n"<pos:position pos:line="45" pos:column="88"/></literal></expr></argument>,
			<argument><expr><ternary><condition><expr><name pos:line="46" pos:column="25">am_server<pos:position pos:line="46" pos:column="34"/></name></expr>?<pos:position pos:line="46" pos:column="35"/></condition><then pos:line="46" pos:column="35"> <expr><literal type="string" pos:line="46" pos:column="36">"Client"<pos:position pos:line="46" pos:column="44"/></literal></expr> <pos:position pos:line="46" pos:column="45"/></then><else pos:line="46" pos:column="45">: <expr><literal type="string" pos:line="46" pos:column="47">"Server"<pos:position pos:line="46" pos:column="55"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="46" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="57"/></expr_stmt>
	}<pos:position pos:line="47" pos:column="10"/></block></then></if>
	<if pos:line="48" pos:column="9">if <condition pos:line="48" pos:column="12">(<expr><name pos:line="48" pos:column="13">protocol_version<pos:position pos:line="48" pos:column="29"/></name> <operator pos:line="48" pos:column="30">&lt;<pos:position pos:line="48" pos:column="34"/></operator> <name pos:line="48" pos:column="32">MIN_PROTOCOL_VERSION<pos:position pos:line="48" pos:column="52"/></name></expr>)<pos:position pos:line="48" pos:column="53"/></condition><then pos:line="48" pos:column="53"> <block pos:line="48" pos:column="54">{
		<expr_stmt><expr><call><name pos:line="49" pos:column="17">rprintf<pos:position pos:line="49" pos:column="24"/></name><argument_list pos:line="49" pos:column="24">(<argument><expr><name pos:line="49" pos:column="25">FERROR<pos:position pos:line="49" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="49" pos:column="33">"--protocol must be at least %d on the %s.\n"<pos:position pos:line="49" pos:column="78"/></literal></expr></argument>,
			<argument><expr><name pos:line="50" pos:column="25">MIN_PROTOCOL_VERSION<pos:position pos:line="50" pos:column="45"/></name></expr></argument>, <argument><expr><ternary><condition><expr><name pos:line="50" pos:column="47">am_server<pos:position pos:line="50" pos:column="56"/></name></expr>?<pos:position pos:line="50" pos:column="57"/></condition><then pos:line="50" pos:column="57"> <expr><literal type="string" pos:line="50" pos:column="58">"Server"<pos:position pos:line="50" pos:column="66"/></literal></expr> <pos:position pos:line="50" pos:column="67"/></then><else pos:line="50" pos:column="67">: <expr><literal type="string" pos:line="50" pos:column="69">"Client"<pos:position pos:line="50" pos:column="77"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="50" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="79"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="51" pos:column="17">exit_cleanup<pos:position pos:line="51" pos:column="29"/></name><argument_list pos:line="51" pos:column="29">(<argument><expr><name pos:line="51" pos:column="30">RERR_PROTOCOL<pos:position pos:line="51" pos:column="43"/></name></expr></argument>)<pos:position pos:line="51" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="45"/></expr_stmt>
	}<pos:position pos:line="52" pos:column="10"/></block></then></if>
	<if pos:line="53" pos:column="9">if <condition pos:line="53" pos:column="12">(<expr><name pos:line="53" pos:column="13">protocol_version<pos:position pos:line="53" pos:column="29"/></name> <operator pos:line="53" pos:column="30">&gt;<pos:position pos:line="53" pos:column="34"/></operator> <name pos:line="53" pos:column="32">PROTOCOL_VERSION<pos:position pos:line="53" pos:column="48"/></name></expr>)<pos:position pos:line="53" pos:column="49"/></condition><then pos:line="53" pos:column="49"> <block pos:line="53" pos:column="50">{
		<expr_stmt><expr><call><name pos:line="54" pos:column="17">rprintf<pos:position pos:line="54" pos:column="24"/></name><argument_list pos:line="54" pos:column="24">(<argument><expr><name pos:line="54" pos:column="25">FERROR<pos:position pos:line="54" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="54" pos:column="33">"--protocol must be no more than %d on the %s.\n"<pos:position pos:line="54" pos:column="82"/></literal></expr></argument>,
			<argument><expr><name pos:line="55" pos:column="25">PROTOCOL_VERSION<pos:position pos:line="55" pos:column="41"/></name></expr></argument>, <argument><expr><ternary><condition><expr><name pos:line="55" pos:column="43">am_server<pos:position pos:line="55" pos:column="52"/></name></expr>?<pos:position pos:line="55" pos:column="53"/></condition><then pos:line="55" pos:column="53"> <expr><literal type="string" pos:line="55" pos:column="54">"Server"<pos:position pos:line="55" pos:column="62"/></literal></expr> <pos:position pos:line="55" pos:column="63"/></then><else pos:line="55" pos:column="63">: <expr><literal type="string" pos:line="55" pos:column="65">"Client"<pos:position pos:line="55" pos:column="73"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="55" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="75"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="56" pos:column="17">exit_cleanup<pos:position pos:line="56" pos:column="29"/></name><argument_list pos:line="56" pos:column="29">(<argument><expr><name pos:line="56" pos:column="30">RERR_PROTOCOL<pos:position pos:line="56" pos:column="43"/></name></expr></argument>)<pos:position pos:line="56" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="45"/></expr_stmt>
	}<pos:position pos:line="57" pos:column="10"/></block></then></if>
	<if pos:line="58" pos:column="9">if <condition pos:line="58" pos:column="12">(<expr><name pos:line="58" pos:column="13">read_batch<pos:position pos:line="58" pos:column="23"/></name></expr>)<pos:position pos:line="58" pos:column="24"/></condition><then pos:line="58" pos:column="24">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="59" pos:column="17">check_batch_flags<pos:position pos:line="59" pos:column="34"/></name><argument_list pos:line="59" pos:column="34">()<pos:position pos:line="59" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="37"/></expr_stmt></block></then></if>

	<if pos:line="61" pos:column="9">if <condition pos:line="61" pos:column="12">(<expr><name pos:line="61" pos:column="13">protocol_version<pos:position pos:line="61" pos:column="29"/></name> <operator pos:line="61" pos:column="30">&lt;<pos:position pos:line="61" pos:column="34"/></operator> <literal type="number" pos:line="61" pos:column="32">30<pos:position pos:line="61" pos:column="34"/></literal></expr>)<pos:position pos:line="61" pos:column="35"/></condition><then pos:line="61" pos:column="35"> <block pos:line="61" pos:column="36">{
		<if pos:line="62" pos:column="17">if <condition pos:line="62" pos:column="20">(<expr><name pos:line="62" pos:column="21">append_mode<pos:position pos:line="62" pos:column="32"/></name> <operator pos:line="62" pos:column="33">==<pos:position pos:line="62" pos:column="35"/></operator> <literal type="number" pos:line="62" pos:column="36">1<pos:position pos:line="62" pos:column="37"/></literal></expr>)<pos:position pos:line="62" pos:column="38"/></condition><then pos:line="62" pos:column="38">
			<block type="pseudo"><expr_stmt><expr><name pos:line="63" pos:column="25">append_mode<pos:position pos:line="63" pos:column="36"/></name> <operator pos:line="63" pos:column="37">=<pos:position pos:line="63" pos:column="38"/></operator> <literal type="number" pos:line="63" pos:column="39">2<pos:position pos:line="63" pos:column="40"/></literal></expr>;<pos:position pos:line="63" pos:column="41"/></expr_stmt></block></then></if>
		<if pos:line="64" pos:column="17">if <condition pos:line="64" pos:column="20">(<expr><name pos:line="64" pos:column="21">preserve_acls<pos:position pos:line="64" pos:column="34"/></name> <operator pos:line="64" pos:column="35">&amp;&amp;<pos:position pos:line="64" pos:column="45"/></operator> <operator pos:line="64" pos:column="38">!<pos:position pos:line="64" pos:column="39"/></operator><name pos:line="64" pos:column="39">local_server<pos:position pos:line="64" pos:column="51"/></name></expr>)<pos:position pos:line="64" pos:column="52"/></condition><then pos:line="64" pos:column="52"> <block pos:line="64" pos:column="53">{
			<expr_stmt><expr><call><name pos:line="65" pos:column="25">rprintf<pos:position pos:line="65" pos:column="32"/></name><argument_list pos:line="65" pos:column="32">(<argument><expr><name pos:line="65" pos:column="33">FERROR<pos:position pos:line="65" pos:column="39"/></name></expr></argument>,
			    <argument><expr><literal type="string" pos:line="66" pos:column="29">"--acls requires protocol 30 or higher"<pos:position pos:line="66" pos:column="68"/></literal>
			    <literal type="string" pos:line="67" pos:column="29">" (negotiated %d).\n"<pos:position pos:line="67" pos:column="50"/></literal></expr></argument>,
			    <argument><expr><name pos:line="68" pos:column="29">protocol_version<pos:position pos:line="68" pos:column="45"/></name></expr></argument>)<pos:position pos:line="68" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="47"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="69" pos:column="25">exit_cleanup<pos:position pos:line="69" pos:column="37"/></name><argument_list pos:line="69" pos:column="37">(<argument><expr><name pos:line="69" pos:column="38">RERR_PROTOCOL<pos:position pos:line="69" pos:column="51"/></name></expr></argument>)<pos:position pos:line="69" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="53"/></expr_stmt>
		}<pos:position pos:line="70" pos:column="18"/></block></then></if>
		<if pos:line="71" pos:column="17">if <condition pos:line="71" pos:column="20">(<expr><name pos:line="71" pos:column="21">preserve_xattrs<pos:position pos:line="71" pos:column="36"/></name> <operator pos:line="71" pos:column="37">&amp;&amp;<pos:position pos:line="71" pos:column="47"/></operator> <operator pos:line="71" pos:column="40">!<pos:position pos:line="71" pos:column="41"/></operator><name pos:line="71" pos:column="41">local_server<pos:position pos:line="71" pos:column="53"/></name></expr>)<pos:position pos:line="71" pos:column="54"/></condition><then pos:line="71" pos:column="54"> <block pos:line="71" pos:column="55">{
			<expr_stmt><expr><call><name pos:line="72" pos:column="25">rprintf<pos:position pos:line="72" pos:column="32"/></name><argument_list pos:line="72" pos:column="32">(<argument><expr><name pos:line="72" pos:column="33">FERROR<pos:position pos:line="72" pos:column="39"/></name></expr></argument>,
			    <argument><expr><literal type="string" pos:line="73" pos:column="29">"--xattrs requires protocol 30 or higher"<pos:position pos:line="73" pos:column="70"/></literal>
			    <literal type="string" pos:line="74" pos:column="29">" (negotiated %d).\n"<pos:position pos:line="74" pos:column="50"/></literal></expr></argument>,
			    <argument><expr><name pos:line="75" pos:column="29">protocol_version<pos:position pos:line="75" pos:column="45"/></name></expr></argument>)<pos:position pos:line="75" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="47"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="76" pos:column="25">exit_cleanup<pos:position pos:line="76" pos:column="37"/></name><argument_list pos:line="76" pos:column="37">(<argument><expr><name pos:line="76" pos:column="38">RERR_PROTOCOL<pos:position pos:line="76" pos:column="51"/></name></expr></argument>)<pos:position pos:line="76" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="53"/></expr_stmt>
		}<pos:position pos:line="77" pos:column="18"/></block></then></if>
	}<pos:position pos:line="78" pos:column="10"/></block></then></if>

	<if pos:line="80" pos:column="9">if <condition pos:line="80" pos:column="12">(<expr><name pos:line="80" pos:column="13">delete_mode<pos:position pos:line="80" pos:column="24"/></name> <operator pos:line="80" pos:column="25">&amp;&amp;<pos:position pos:line="80" pos:column="35"/></operator> <operator pos:line="80" pos:column="28">!<pos:position pos:line="80" pos:column="29"/></operator><operator pos:line="80" pos:column="29">(<pos:position pos:line="80" pos:column="30"/></operator><name pos:line="80" pos:column="30">delete_before<pos:position pos:line="80" pos:column="43"/></name><operator pos:line="80" pos:column="43">+<pos:position pos:line="80" pos:column="44"/></operator><name pos:line="80" pos:column="44">delete_during<pos:position pos:line="80" pos:column="57"/></name><operator pos:line="80" pos:column="57">+<pos:position pos:line="80" pos:column="58"/></operator><name pos:line="80" pos:column="58">delete_after<pos:position pos:line="80" pos:column="70"/></name><operator pos:line="80" pos:column="70">)<pos:position pos:line="80" pos:column="71"/></operator></expr>)<pos:position pos:line="80" pos:column="72"/></condition><then pos:line="80" pos:column="72"> <block pos:line="80" pos:column="73">{
		<if pos:line="81" pos:column="17">if <condition pos:line="81" pos:column="20">(<expr><name pos:line="81" pos:column="21">protocol_version<pos:position pos:line="81" pos:column="37"/></name> <operator pos:line="81" pos:column="38">&lt;<pos:position pos:line="81" pos:column="42"/></operator> <literal type="number" pos:line="81" pos:column="40">30<pos:position pos:line="81" pos:column="42"/></literal></expr>)<pos:position pos:line="81" pos:column="43"/></condition><then pos:line="81" pos:column="43">
			<block type="pseudo"><expr_stmt><expr><name pos:line="82" pos:column="25">delete_before<pos:position pos:line="82" pos:column="38"/></name> <operator pos:line="82" pos:column="39">=<pos:position pos:line="82" pos:column="40"/></operator> <literal type="number" pos:line="82" pos:column="41">1<pos:position pos:line="82" pos:column="42"/></literal></expr>;<pos:position pos:line="82" pos:column="43"/></expr_stmt></block></then>
		<else pos:line="83" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><name pos:line="84" pos:column="25">delete_during<pos:position pos:line="84" pos:column="38"/></name> <operator pos:line="84" pos:column="39">=<pos:position pos:line="84" pos:column="40"/></operator> <literal type="number" pos:line="84" pos:column="41">1<pos:position pos:line="84" pos:column="42"/></literal></expr>;<pos:position pos:line="84" pos:column="43"/></expr_stmt></block></else></if>
	}<pos:position pos:line="85" pos:column="10"/></block></then></if>

	<if pos:line="87" pos:column="9">if <condition pos:line="87" pos:column="12">(<expr><name pos:line="87" pos:column="13">protocol_version<pos:position pos:line="87" pos:column="29"/></name> <operator pos:line="87" pos:column="30">&lt;<pos:position pos:line="87" pos:column="34"/></operator> <literal type="number" pos:line="87" pos:column="32">29<pos:position pos:line="87" pos:column="34"/></literal></expr>)<pos:position pos:line="87" pos:column="35"/></condition><then pos:line="87" pos:column="35"> <block pos:line="87" pos:column="36">{
		<if pos:line="88" pos:column="17">if <condition pos:line="88" pos:column="20">(<expr><name pos:line="88" pos:column="21">fuzzy_basis<pos:position pos:line="88" pos:column="32"/></name></expr>)<pos:position pos:line="88" pos:column="33"/></condition><then pos:line="88" pos:column="33"> <block pos:line="88" pos:column="34">{
			<expr_stmt><expr><call><name pos:line="89" pos:column="25">rprintf<pos:position pos:line="89" pos:column="32"/></name><argument_list pos:line="89" pos:column="32">(<argument><expr><name pos:line="89" pos:column="33">FERROR<pos:position pos:line="89" pos:column="39"/></name></expr></argument>,
			    <argument><expr><literal type="string" pos:line="90" pos:column="29">"--fuzzy requires protocol 29 or higher"<pos:position pos:line="90" pos:column="69"/></literal>
			    <literal type="string" pos:line="91" pos:column="29">" (negotiated %d).\n"<pos:position pos:line="91" pos:column="50"/></literal></expr></argument>,
			    <argument><expr><name pos:line="92" pos:column="29">protocol_version<pos:position pos:line="92" pos:column="45"/></name></expr></argument>)<pos:position pos:line="92" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="47"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="93" pos:column="25">exit_cleanup<pos:position pos:line="93" pos:column="37"/></name><argument_list pos:line="93" pos:column="37">(<argument><expr><name pos:line="93" pos:column="38">RERR_PROTOCOL<pos:position pos:line="93" pos:column="51"/></name></expr></argument>)<pos:position pos:line="93" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="53"/></expr_stmt>
		}<pos:position pos:line="94" pos:column="18"/></block></then></if>

		<if pos:line="96" pos:column="17">if <condition pos:line="96" pos:column="20">(<expr><name pos:line="96" pos:column="21">basis_dir_cnt<pos:position pos:line="96" pos:column="34"/></name> <operator pos:line="96" pos:column="35">&amp;&amp;<pos:position pos:line="96" pos:column="45"/></operator> <name pos:line="96" pos:column="38">inplace<pos:position pos:line="96" pos:column="45"/></name></expr>)<pos:position pos:line="96" pos:column="46"/></condition><then pos:line="96" pos:column="46"> <block pos:line="96" pos:column="47">{
			<expr_stmt><expr><call><name pos:line="97" pos:column="25">rprintf<pos:position pos:line="97" pos:column="32"/></name><argument_list pos:line="97" pos:column="32">(<argument><expr><name pos:line="97" pos:column="33">FERROR<pos:position pos:line="97" pos:column="39"/></name></expr></argument>,
			    <argument><expr><literal type="string" pos:line="98" pos:column="29">"%s with --inplace requires protocol 29 or higher"<pos:position pos:line="98" pos:column="79"/></literal>
			    <literal type="string" pos:line="99" pos:column="29">" (negotiated %d).\n"<pos:position pos:line="99" pos:column="50"/></literal></expr></argument>,
			    <argument><expr><name pos:line="100" pos:column="29">dest_option<pos:position pos:line="100" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="100" pos:column="42">protocol_version<pos:position pos:line="100" pos:column="58"/></name></expr></argument>)<pos:position pos:line="100" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="100" pos:column="60"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="101" pos:column="25">exit_cleanup<pos:position pos:line="101" pos:column="37"/></name><argument_list pos:line="101" pos:column="37">(<argument><expr><name pos:line="101" pos:column="38">RERR_PROTOCOL<pos:position pos:line="101" pos:column="51"/></name></expr></argument>)<pos:position pos:line="101" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="53"/></expr_stmt>
		}<pos:position pos:line="102" pos:column="18"/></block></then></if>

		<if pos:line="104" pos:column="17">if <condition pos:line="104" pos:column="20">(<expr><name pos:line="104" pos:column="21">basis_dir_cnt<pos:position pos:line="104" pos:column="34"/></name> <operator pos:line="104" pos:column="35">&gt;<pos:position pos:line="104" pos:column="39"/></operator> <literal type="number" pos:line="104" pos:column="37">1<pos:position pos:line="104" pos:column="38"/></literal></expr>)<pos:position pos:line="104" pos:column="39"/></condition><then pos:line="104" pos:column="39"> <block pos:line="104" pos:column="40">{
			<expr_stmt><expr><call><name pos:line="105" pos:column="25">rprintf<pos:position pos:line="105" pos:column="32"/></name><argument_list pos:line="105" pos:column="32">(<argument><expr><name pos:line="105" pos:column="33">FERROR<pos:position pos:line="105" pos:column="39"/></name></expr></argument>,
			    <argument><expr><literal type="string" pos:line="106" pos:column="29">"Using more than one %s option requires protocol"<pos:position pos:line="106" pos:column="78"/></literal>
			    <literal type="string" pos:line="107" pos:column="29">" 29 or higher (negotiated %d).\n"<pos:position pos:line="107" pos:column="63"/></literal></expr></argument>,
			    <argument><expr><name pos:line="108" pos:column="29">dest_option<pos:position pos:line="108" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="108" pos:column="42">protocol_version<pos:position pos:line="108" pos:column="58"/></name></expr></argument>)<pos:position pos:line="108" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="108" pos:column="60"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="109" pos:column="25">exit_cleanup<pos:position pos:line="109" pos:column="37"/></name><argument_list pos:line="109" pos:column="37">(<argument><expr><name pos:line="109" pos:column="38">RERR_PROTOCOL<pos:position pos:line="109" pos:column="51"/></name></expr></argument>)<pos:position pos:line="109" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="109" pos:column="53"/></expr_stmt>
		}<pos:position pos:line="110" pos:column="18"/></block></then></if>

		<if pos:line="112" pos:column="17">if <condition pos:line="112" pos:column="20">(<expr><name pos:line="112" pos:column="21">prune_empty_dirs<pos:position pos:line="112" pos:column="37"/></name></expr>)<pos:position pos:line="112" pos:column="38"/></condition><then pos:line="112" pos:column="38"> <block pos:line="112" pos:column="39">{
			<expr_stmt><expr><call><name pos:line="113" pos:column="25">rprintf<pos:position pos:line="113" pos:column="32"/></name><argument_list pos:line="113" pos:column="32">(<argument><expr><name pos:line="113" pos:column="33">FERROR<pos:position pos:line="113" pos:column="39"/></name></expr></argument>,
			    <argument><expr><literal type="string" pos:line="114" pos:column="29">"--prune-empty-dirs requires protocol 29 or higher"<pos:position pos:line="114" pos:column="80"/></literal>
			    <literal type="string" pos:line="115" pos:column="29">" (negotiated %d).\n"<pos:position pos:line="115" pos:column="50"/></literal></expr></argument>,
			    <argument><expr><name pos:line="116" pos:column="29">protocol_version<pos:position pos:line="116" pos:column="45"/></name></expr></argument>)<pos:position pos:line="116" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="116" pos:column="47"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="117" pos:column="25">exit_cleanup<pos:position pos:line="117" pos:column="37"/></name><argument_list pos:line="117" pos:column="37">(<argument><expr><name pos:line="117" pos:column="38">RERR_PROTOCOL<pos:position pos:line="117" pos:column="51"/></name></expr></argument>)<pos:position pos:line="117" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="117" pos:column="53"/></expr_stmt>
		}<pos:position pos:line="118" pos:column="18"/></block></then></if>
	}<pos:position pos:line="119" pos:column="10"/></block></then> <elseif pos:line="119" pos:column="11">else <if pos:line="119" pos:column="16">if <condition pos:line="119" pos:column="19">(<expr><name pos:line="119" pos:column="20">protocol_version<pos:position pos:line="119" pos:column="36"/></name> <operator pos:line="119" pos:column="37">&gt;=<pos:position pos:line="119" pos:column="42"/></operator> <literal type="number" pos:line="119" pos:column="40">30<pos:position pos:line="119" pos:column="42"/></literal></expr>)<pos:position pos:line="119" pos:column="43"/></condition><then pos:line="119" pos:column="43"> <block pos:line="119" pos:column="44">{
		<decl_stmt><decl><type><name pos:line="120" pos:column="17">int<pos:position pos:line="120" pos:column="20"/></name></type> <name pos:line="120" pos:column="21">compat_flags<pos:position pos:line="120" pos:column="33"/></name></decl>;<pos:position pos:line="120" pos:column="34"/></decl_stmt>
		<if pos:line="121" pos:column="17">if <condition pos:line="121" pos:column="20">(<expr><name pos:line="121" pos:column="21">am_server<pos:position pos:line="121" pos:column="30"/></name></expr>)<pos:position pos:line="121" pos:column="31"/></condition><then pos:line="121" pos:column="31"> <block pos:line="121" pos:column="32">{
			<expr_stmt><expr><name pos:line="122" pos:column="25">compat_flags<pos:position pos:line="122" pos:column="37"/></name> <operator pos:line="122" pos:column="38">=<pos:position pos:line="122" pos:column="39"/></operator> <ternary><condition><expr><name pos:line="122" pos:column="40">allow_inc_recurse<pos:position pos:line="122" pos:column="57"/></name></expr> ?<pos:position pos:line="122" pos:column="59"/></condition><then pos:line="122" pos:column="59"> <expr><name pos:line="122" pos:column="60">CF_INC_RECURSE<pos:position pos:line="122" pos:column="74"/></name></expr> <pos:position pos:line="122" pos:column="75"/></then><else pos:line="122" pos:column="75">: <expr><literal type="number" pos:line="122" pos:column="77">0<pos:position pos:line="122" pos:column="78"/></literal></expr></else></ternary></expr>;<pos:position pos:line="122" pos:column="79"/></expr_stmt>
<cpp:if pos:line="123" pos:column="1">#<cpp:directive pos:line="123" pos:column="2">if<pos:position pos:line="123" pos:column="4"/></cpp:directive> <expr><name pos:line="123" pos:column="5">defined<pos:position pos:line="123" pos:column="12"/></name> <name pos:line="123" pos:column="13">HAVE_LUTIMES<pos:position pos:line="123" pos:column="25"/></name> <operator pos:line="123" pos:column="26">&amp;&amp;<pos:position pos:line="123" pos:column="36"/></operator> <name pos:line="123" pos:column="29">defined<pos:position pos:line="123" pos:column="36"/></name> <name pos:line="123" pos:column="37">HAVE_UTIMES<pos:position pos:line="123" pos:column="48"/></name></expr></cpp:if>
			<expr_stmt><expr><name pos:line="124" pos:column="25">compat_flags<pos:position pos:line="124" pos:column="37"/></name> <operator pos:line="124" pos:column="38">|=<pos:position pos:line="124" pos:column="40"/></operator> <name pos:line="124" pos:column="41">CF_SYMLINK_TIMES<pos:position pos:line="124" pos:column="57"/></name></expr>;<pos:position pos:line="124" pos:column="58"/></expr_stmt>
<cpp:endif pos:line="125" pos:column="1">#<cpp:directive pos:line="125" pos:column="2">endif<pos:position pos:line="125" pos:column="7"/></cpp:directive></cpp:endif>
			<expr_stmt><expr><call><name pos:line="126" pos:column="25">write_byte<pos:position pos:line="126" pos:column="35"/></name><argument_list pos:line="126" pos:column="35">(<argument><expr><name pos:line="126" pos:column="36">f_out<pos:position pos:line="126" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="126" pos:column="43">compat_flags<pos:position pos:line="126" pos:column="55"/></name></expr></argument>)<pos:position pos:line="126" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="126" pos:column="57"/></expr_stmt>
		}<pos:position pos:line="127" pos:column="18"/></block></then> <else pos:line="127" pos:column="19">else
			<block type="pseudo"><expr_stmt><expr><name pos:line="128" pos:column="25">compat_flags<pos:position pos:line="128" pos:column="37"/></name> <operator pos:line="128" pos:column="38">=<pos:position pos:line="128" pos:column="39"/></operator> <call><name pos:line="128" pos:column="40">read_byte<pos:position pos:line="128" pos:column="49"/></name><argument_list pos:line="128" pos:column="49">(<argument><expr><name pos:line="128" pos:column="50">f_in<pos:position pos:line="128" pos:column="54"/></name></expr></argument>)<pos:position pos:line="128" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="128" pos:column="56"/></expr_stmt></block></else></if>
		<comment type="block" pos:line="129" pos:column="17">/* The inc_recurse var MUST be set to 0 or 1. */</comment>
		<expr_stmt><expr><name pos:line="130" pos:column="17">inc_recurse<pos:position pos:line="130" pos:column="28"/></name> <operator pos:line="130" pos:column="29">=<pos:position pos:line="130" pos:column="30"/></operator> <ternary><condition><expr><name pos:line="130" pos:column="31">compat_flags<pos:position pos:line="130" pos:column="43"/></name> <operator pos:line="130" pos:column="44">&amp;<pos:position pos:line="130" pos:column="49"/></operator> <name pos:line="130" pos:column="46">CF_INC_RECURSE<pos:position pos:line="130" pos:column="60"/></name></expr> ?<pos:position pos:line="130" pos:column="62"/></condition><then pos:line="130" pos:column="62"> <expr><literal type="number" pos:line="130" pos:column="63">1<pos:position pos:line="130" pos:column="64"/></literal></expr> <pos:position pos:line="130" pos:column="65"/></then><else pos:line="130" pos:column="65">: <expr><literal type="number" pos:line="130" pos:column="67">0<pos:position pos:line="130" pos:column="68"/></literal></expr></else></ternary></expr>;<pos:position pos:line="130" pos:column="69"/></expr_stmt>
		<if pos:line="131" pos:column="17">if <condition pos:line="131" pos:column="20">(<expr><name pos:line="131" pos:column="21">am_sender<pos:position pos:line="131" pos:column="30"/></name></expr>)<pos:position pos:line="131" pos:column="31"/></condition><then pos:line="131" pos:column="31"> <block pos:line="131" pos:column="32">{
			<expr_stmt><expr><name pos:line="132" pos:column="25">receiver_symlink_times<pos:position pos:line="132" pos:column="47"/></name> <operator pos:line="132" pos:column="48">=<pos:position pos:line="132" pos:column="49"/></operator> <ternary><condition><expr><name pos:line="132" pos:column="50">am_server<pos:position pos:line="132" pos:column="59"/></name></expr>
			    ?<pos:position pos:line="133" pos:column="30"/></condition><then pos:line="133" pos:column="30"> <expr><call><name pos:line="133" pos:column="31">strchr<pos:position pos:line="133" pos:column="37"/></name><argument_list pos:line="133" pos:column="37">(<argument><expr><name pos:line="133" pos:column="38">client_info<pos:position pos:line="133" pos:column="49"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="133" pos:column="51">'L'<pos:position pos:line="133" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="133" pos:column="55"/></argument_list></call> <operator pos:line="133" pos:column="56">!=<pos:position pos:line="133" pos:column="58"/></operator> <name pos:line="133" pos:column="59">NULL<pos:position pos:line="133" pos:column="63"/></name></expr>
			    <pos:position pos:line="134" pos:column="8"/></then><else pos:line="134" pos:column="29">: <expr><operator pos:line="134" pos:column="31">!<pos:position pos:line="134" pos:column="32"/></operator><operator pos:line="134" pos:column="32">!<pos:position pos:line="134" pos:column="33"/></operator><operator pos:line="134" pos:column="33">(<pos:position pos:line="134" pos:column="34"/></operator><name pos:line="134" pos:column="34">compat_flags<pos:position pos:line="134" pos:column="46"/></name> <operator pos:line="134" pos:column="47">&amp;<pos:position pos:line="134" pos:column="52"/></operator> <name pos:line="134" pos:column="49">CF_SYMLINK_TIMES<pos:position pos:line="134" pos:column="65"/></name><operator pos:line="134" pos:column="65">)<pos:position pos:line="134" pos:column="66"/></operator></expr></else></ternary></expr>;<pos:position pos:line="134" pos:column="67"/></expr_stmt>
		}<pos:position pos:line="135" pos:column="18"/></block></then>
<cpp:if pos:line="136" pos:column="1">#<cpp:directive pos:line="136" pos:column="2">if<pos:position pos:line="136" pos:column="4"/></cpp:directive> <expr><name pos:line="136" pos:column="5">defined<pos:position pos:line="136" pos:column="12"/></name> <name pos:line="136" pos:column="13">HAVE_LUTIMES<pos:position pos:line="136" pos:column="25"/></name> <operator pos:line="136" pos:column="26">&amp;&amp;<pos:position pos:line="136" pos:column="36"/></operator> <name pos:line="136" pos:column="29">defined<pos:position pos:line="136" pos:column="36"/></name> <name pos:line="136" pos:column="37">HAVE_UTIMES<pos:position pos:line="136" pos:column="48"/></name></expr></cpp:if>
		<else pos:line="137" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><name pos:line="138" pos:column="25">receiver_symlink_times<pos:position pos:line="138" pos:column="47"/></name> <operator pos:line="138" pos:column="48">=<pos:position pos:line="138" pos:column="49"/></operator> <literal type="number" pos:line="138" pos:column="50">1<pos:position pos:line="138" pos:column="51"/></literal></expr>;<pos:position pos:line="138" pos:column="52"/></expr_stmt></block></else></if>
<cpp:endif pos:line="139" pos:column="1">#<cpp:directive pos:line="139" pos:column="2">endif<pos:position pos:line="139" pos:column="7"/></cpp:directive></cpp:endif>
		<if pos:line="140" pos:column="17">if <condition pos:line="140" pos:column="20">(<expr><name pos:line="140" pos:column="21">inc_recurse<pos:position pos:line="140" pos:column="32"/></name> <operator pos:line="140" pos:column="33">&amp;&amp;<pos:position pos:line="140" pos:column="43"/></operator> <operator pos:line="140" pos:column="36">!<pos:position pos:line="140" pos:column="37"/></operator><name pos:line="140" pos:column="37">allow_inc_recurse<pos:position pos:line="140" pos:column="54"/></name></expr>)<pos:position pos:line="140" pos:column="55"/></condition><then pos:line="140" pos:column="55"> <block pos:line="140" pos:column="56">{
			<comment type="block" pos:line="141" pos:column="25">/* This should only be able to happen in a batch. */</comment>
			<expr_stmt><expr><call><name pos:line="142" pos:column="25">fprintf<pos:position pos:line="142" pos:column="32"/></name><argument_list pos:line="142" pos:column="32">(<argument><expr><name pos:line="142" pos:column="33">stderr<pos:position pos:line="142" pos:column="39"/></name></expr></argument>,
			    <argument><expr><literal type="string" pos:line="143" pos:column="29">"Incompatible options specified for inc-recursive %s.\n"<pos:position pos:line="143" pos:column="85"/></literal></expr></argument>,
			    <argument><expr><ternary><condition><expr><name pos:line="144" pos:column="29">read_batch<pos:position pos:line="144" pos:column="39"/></name></expr> ?<pos:position pos:line="144" pos:column="41"/></condition><then pos:line="144" pos:column="41"> <expr><literal type="string" pos:line="144" pos:column="42">"batch file"<pos:position pos:line="144" pos:column="54"/></literal></expr> <pos:position pos:line="144" pos:column="55"/></then><else pos:line="144" pos:column="55">: <expr><literal type="string" pos:line="144" pos:column="57">"connection"<pos:position pos:line="144" pos:column="69"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="144" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="144" pos:column="71"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="145" pos:column="25">exit_cleanup<pos:position pos:line="145" pos:column="37"/></name><argument_list pos:line="145" pos:column="37">(<argument><expr><name pos:line="145" pos:column="38">RERR_SYNTAX<pos:position pos:line="145" pos:column="49"/></name></expr></argument>)<pos:position pos:line="145" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="145" pos:column="51"/></expr_stmt>
		}<pos:position pos:line="146" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name pos:line="147" pos:column="17">need_messages_from_generator<pos:position pos:line="147" pos:column="45"/></name> <operator pos:line="147" pos:column="46">=<pos:position pos:line="147" pos:column="47"/></operator> <literal type="number" pos:line="147" pos:column="48">1<pos:position pos:line="147" pos:column="49"/></literal></expr>;<pos:position pos:line="147" pos:column="50"/></expr_stmt>
	}<pos:position pos:line="148" pos:column="10"/></block></then></if></elseif></if>

	<if pos:line="150" pos:column="9">if <condition pos:line="150" pos:column="12">(<expr><name pos:line="150" pos:column="13">need_unsorted_flist<pos:position pos:line="150" pos:column="32"/></name> <operator pos:line="150" pos:column="33">&amp;&amp;<pos:position pos:line="150" pos:column="43"/></operator> <operator pos:line="150" pos:column="36">(<pos:position pos:line="150" pos:column="37"/></operator><operator pos:line="150" pos:column="37">!<pos:position pos:line="150" pos:column="38"/></operator><name pos:line="150" pos:column="38">am_sender<pos:position pos:line="150" pos:column="47"/></name> <operator pos:line="150" pos:column="48">||<pos:position pos:line="150" pos:column="50"/></operator> <name pos:line="150" pos:column="51">inc_recurse<pos:position pos:line="150" pos:column="62"/></name><operator pos:line="150" pos:column="62">)<pos:position pos:line="150" pos:column="63"/></operator></expr>)<pos:position pos:line="150" pos:column="64"/></condition><then pos:line="150" pos:column="64">
		<block type="pseudo"><expr_stmt><expr><name pos:line="151" pos:column="17">unsort_ndx<pos:position pos:line="151" pos:column="27"/></name> <operator pos:line="151" pos:column="28">=<pos:position pos:line="151" pos:column="29"/></operator> <operator pos:line="151" pos:column="30">++<pos:position pos:line="151" pos:column="32"/></operator><name pos:line="151" pos:column="32">file_extra_cnt<pos:position pos:line="151" pos:column="46"/></name></expr>;<pos:position pos:line="151" pos:column="47"/></expr_stmt></block></then></if>

	<if pos:line="153" pos:column="9">if <condition pos:line="153" pos:column="12">(<expr><name pos:line="153" pos:column="13">partial_dir<pos:position pos:line="153" pos:column="24"/></name> <operator pos:line="153" pos:column="25">&amp;&amp;<pos:position pos:line="153" pos:column="35"/></operator> <operator pos:line="153" pos:column="28">*<pos:position pos:line="153" pos:column="29"/></operator><name pos:line="153" pos:column="29">partial_dir<pos:position pos:line="153" pos:column="40"/></name> <operator pos:line="153" pos:column="41">!=<pos:position pos:line="153" pos:column="43"/></operator> <literal type="char" pos:line="153" pos:column="44">'/'<pos:position pos:line="153" pos:column="47"/></literal> <operator pos:line="153" pos:column="48">&amp;&amp;<pos:position pos:line="153" pos:column="58"/></operator> <operator pos:line="153" pos:column="51">(<pos:position pos:line="153" pos:column="52"/></operator><operator pos:line="153" pos:column="52">!<pos:position pos:line="153" pos:column="53"/></operator><name pos:line="153" pos:column="53">am_server<pos:position pos:line="153" pos:column="62"/></name> <operator pos:line="153" pos:column="63">||<pos:position pos:line="153" pos:column="65"/></operator> <name pos:line="153" pos:column="66">local_server<pos:position pos:line="153" pos:column="78"/></name><operator pos:line="153" pos:column="78">)<pos:position pos:line="153" pos:column="79"/></operator></expr>)<pos:position pos:line="153" pos:column="80"/></condition><then pos:line="153" pos:column="80"> <block pos:line="153" pos:column="81">{
		<decl_stmt><decl><type><name pos:line="154" pos:column="17">int<pos:position pos:line="154" pos:column="20"/></name></type> <name pos:line="154" pos:column="21">flags<pos:position pos:line="154" pos:column="26"/></name> <init pos:line="154" pos:column="27">= <expr><name pos:line="154" pos:column="29">MATCHFLG_NO_PREFIXES<pos:position pos:line="154" pos:column="49"/></name> <operator pos:line="154" pos:column="50">|<pos:position pos:line="154" pos:column="51"/></operator> <name pos:line="154" pos:column="52">MATCHFLG_DIRECTORY<pos:position pos:line="154" pos:column="70"/></name></expr></init></decl>;<pos:position pos:line="154" pos:column="71"/></decl_stmt>
		<if pos:line="155" pos:column="17">if <condition pos:line="155" pos:column="20">(<expr><operator pos:line="155" pos:column="21">!<pos:position pos:line="155" pos:column="22"/></operator><name pos:line="155" pos:column="22">am_sender<pos:position pos:line="155" pos:column="31"/></name> <operator pos:line="155" pos:column="32">||<pos:position pos:line="155" pos:column="34"/></operator> <name pos:line="155" pos:column="35">protocol_version<pos:position pos:line="155" pos:column="51"/></name> <operator pos:line="155" pos:column="52">&gt;=<pos:position pos:line="155" pos:column="57"/></operator> <literal type="number" pos:line="155" pos:column="55">30<pos:position pos:line="155" pos:column="57"/></literal></expr>)<pos:position pos:line="155" pos:column="58"/></condition><then pos:line="155" pos:column="58">
			<block type="pseudo"><expr_stmt><expr><name pos:line="156" pos:column="25">flags<pos:position pos:line="156" pos:column="30"/></name> <operator pos:line="156" pos:column="31">|=<pos:position pos:line="156" pos:column="33"/></operator> <name pos:line="156" pos:column="34">MATCHFLG_PERISHABLE<pos:position pos:line="156" pos:column="53"/></name></expr>;<pos:position pos:line="156" pos:column="54"/></expr_stmt></block></then></if>
		<expr_stmt><expr><call><name pos:line="157" pos:column="17">parse_rule<pos:position pos:line="157" pos:column="27"/></name><argument_list pos:line="157" pos:column="27">(<argument><expr><operator pos:line="157" pos:column="28">&amp;<pos:position pos:line="157" pos:column="33"/></operator><name pos:line="157" pos:column="29">filter_list<pos:position pos:line="157" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="157" pos:column="42">partial_dir<pos:position pos:line="157" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="157" pos:column="55">flags<pos:position pos:line="157" pos:column="60"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="157" pos:column="62">0<pos:position pos:line="157" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="157" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="157" pos:column="65"/></expr_stmt>
	}<pos:position pos:line="158" pos:column="10"/></block></then></if>


<cpp:ifdef pos:line="161" pos:column="1">#<cpp:directive pos:line="161" pos:column="2">ifdef<pos:position pos:line="161" pos:column="7"/></cpp:directive> <name pos:line="161" pos:column="8">ICONV_OPTION<pos:position pos:line="161" pos:column="20"/></name></cpp:ifdef>
	<if pos:line="162" pos:column="9">if <condition pos:line="162" pos:column="12">(<expr><name pos:line="162" pos:column="13">protect_args<pos:position pos:line="162" pos:column="25"/></name> <operator pos:line="162" pos:column="26">&amp;&amp;<pos:position pos:line="162" pos:column="36"/></operator> <name pos:line="162" pos:column="29">files_from<pos:position pos:line="162" pos:column="39"/></name></expr>)<pos:position pos:line="162" pos:column="40"/></condition><then pos:line="162" pos:column="40"> <block pos:line="162" pos:column="41">{
		<if pos:line="163" pos:column="17">if <condition pos:line="163" pos:column="20">(<expr><name pos:line="163" pos:column="21">am_sender<pos:position pos:line="163" pos:column="30"/></name></expr>)<pos:position pos:line="163" pos:column="31"/></condition><then pos:line="163" pos:column="31">
			<block type="pseudo"><expr_stmt><expr><name pos:line="164" pos:column="25">filesfrom_convert<pos:position pos:line="164" pos:column="42"/></name> <operator pos:line="164" pos:column="43">=<pos:position pos:line="164" pos:column="44"/></operator> <name pos:line="164" pos:column="45">filesfrom_host<pos:position pos:line="164" pos:column="59"/></name> <operator pos:line="164" pos:column="60">&amp;&amp;<pos:position pos:line="164" pos:column="70"/></operator> <name pos:line="164" pos:column="63">ic_send<pos:position pos:line="164" pos:column="70"/></name> <operator pos:line="164" pos:column="71">!=<pos:position pos:line="164" pos:column="73"/></operator> <operator pos:line="164" pos:column="74">(<pos:position pos:line="164" pos:column="75"/></operator><name pos:line="164" pos:column="75">iconv_t<pos:position pos:line="164" pos:column="82"/></name><operator pos:line="164" pos:column="82">)<pos:position pos:line="164" pos:column="83"/></operator><operator pos:line="164" pos:column="83">-<pos:position pos:line="164" pos:column="84"/></operator><literal type="number" pos:line="164" pos:column="84">1<pos:position pos:line="164" pos:column="85"/></literal></expr>;<pos:position pos:line="164" pos:column="86"/></expr_stmt></block></then>
		<else pos:line="165" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><name pos:line="166" pos:column="25">filesfrom_convert<pos:position pos:line="166" pos:column="42"/></name> <operator pos:line="166" pos:column="43">=<pos:position pos:line="166" pos:column="44"/></operator> <operator pos:line="166" pos:column="45">!<pos:position pos:line="166" pos:column="46"/></operator><name pos:line="166" pos:column="46">filesfrom_host<pos:position pos:line="166" pos:column="60"/></name> <operator pos:line="166" pos:column="61">&amp;&amp;<pos:position pos:line="166" pos:column="71"/></operator> <name pos:line="166" pos:column="64">ic_recv<pos:position pos:line="166" pos:column="71"/></name> <operator pos:line="166" pos:column="72">!=<pos:position pos:line="166" pos:column="74"/></operator> <operator pos:line="166" pos:column="75">(<pos:position pos:line="166" pos:column="76"/></operator><name pos:line="166" pos:column="76">iconv_t<pos:position pos:line="166" pos:column="83"/></name><operator pos:line="166" pos:column="83">)<pos:position pos:line="166" pos:column="84"/></operator><operator pos:line="166" pos:column="84">-<pos:position pos:line="166" pos:column="85"/></operator><literal type="number" pos:line="166" pos:column="85">1<pos:position pos:line="166" pos:column="86"/></literal></expr>;<pos:position pos:line="166" pos:column="87"/></expr_stmt></block></else></if>
	}<pos:position pos:line="167" pos:column="10"/></block></then></if>
<cpp:endif pos:line="168" pos:column="1">#<cpp:directive pos:line="168" pos:column="2">endif<pos:position pos:line="168" pos:column="7"/></cpp:directive></cpp:endif>

	<if pos:line="170" pos:column="9">if <condition pos:line="170" pos:column="12">(<expr><name pos:line="170" pos:column="13">am_server<pos:position pos:line="170" pos:column="22"/></name></expr>)<pos:position pos:line="170" pos:column="23"/></condition><then pos:line="170" pos:column="23"> <block pos:line="170" pos:column="24">{
		<if pos:line="171" pos:column="17">if <condition pos:line="171" pos:column="20">(<expr><operator pos:line="171" pos:column="21">!<pos:position pos:line="171" pos:column="22"/></operator><name pos:line="171" pos:column="22">checksum_seed<pos:position pos:line="171" pos:column="35"/></name></expr>)<pos:position pos:line="171" pos:column="36"/></condition><then pos:line="171" pos:column="36">
			<block type="pseudo"><expr_stmt><expr><name pos:line="172" pos:column="25">checksum_seed<pos:position pos:line="172" pos:column="38"/></name> <operator pos:line="172" pos:column="39">=<pos:position pos:line="172" pos:column="40"/></operator> <call><name pos:line="172" pos:column="41">time<pos:position pos:line="172" pos:column="45"/></name><argument_list pos:line="172" pos:column="45">(<argument><expr><name pos:line="172" pos:column="46">NULL<pos:position pos:line="172" pos:column="50"/></name></expr></argument>)<pos:position pos:line="172" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="172" pos:column="52"/></expr_stmt></block></then></if>
		<expr_stmt><expr><call><name pos:line="173" pos:column="17">write_int<pos:position pos:line="173" pos:column="26"/></name><argument_list pos:line="173" pos:column="26">(<argument><expr><name pos:line="173" pos:column="27">f_out<pos:position pos:line="173" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="173" pos:column="34">checksum_seed<pos:position pos:line="173" pos:column="47"/></name></expr></argument>)<pos:position pos:line="173" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="173" pos:column="49"/></expr_stmt>
	}<pos:position pos:line="174" pos:column="10"/></block></then> <else pos:line="174" pos:column="11">else <block pos:line="174" pos:column="16">{
		<expr_stmt><expr><name pos:line="175" pos:column="17">checksum_seed<pos:position pos:line="175" pos:column="30"/></name> <operator pos:line="175" pos:column="31">=<pos:position pos:line="175" pos:column="32"/></operator> <call><name pos:line="175" pos:column="33">read_int<pos:position pos:line="175" pos:column="41"/></name><argument_list pos:line="175" pos:column="41">(<argument><expr><name pos:line="175" pos:column="42">f_in<pos:position pos:line="175" pos:column="46"/></name></expr></argument>)<pos:position pos:line="175" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="175" pos:column="48"/></expr_stmt>
	}<pos:position pos:line="176" pos:column="10"/></block></else></if>
}<pos:position pos:line="177" pos:column="2"/></block></function></unit>
