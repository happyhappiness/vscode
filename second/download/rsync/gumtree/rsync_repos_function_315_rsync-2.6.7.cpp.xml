<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_315_rsync-2.6.7.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">sum_update<pos:position pos:line="1" pos:column="16"/></name><parameter_list pos:line="1" pos:column="16">(<parameter><decl><type><name pos:line="1" pos:column="17">char<pos:position pos:line="1" pos:column="21"/></name> <modifier pos:line="1" pos:column="22">*<pos:position pos:line="1" pos:column="23"/></modifier></type><name pos:line="1" pos:column="23">p<pos:position pos:line="1" pos:column="24"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="26">int32<pos:position pos:line="1" pos:column="31"/></name></type> <name pos:line="1" pos:column="32">len<pos:position pos:line="1" pos:column="35"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="36"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<if pos:line="3" pos:column="9">if <condition pos:line="3" pos:column="12">(<expr><name pos:line="3" pos:column="13">len<pos:position pos:line="3" pos:column="16"/></name> <operator pos:line="3" pos:column="17">+<pos:position pos:line="3" pos:column="18"/></operator> <name pos:line="3" pos:column="19">sumresidue<pos:position pos:line="3" pos:column="29"/></name> <operator pos:line="3" pos:column="30">&lt;<pos:position pos:line="3" pos:column="34"/></operator> <name pos:line="3" pos:column="32">CSUM_CHUNK<pos:position pos:line="3" pos:column="42"/></name></expr>)<pos:position pos:line="3" pos:column="43"/></condition><then pos:line="3" pos:column="43"> <block pos:line="3" pos:column="44">{
		<expr_stmt><expr><call><name pos:line="4" pos:column="17">memcpy<pos:position pos:line="4" pos:column="23"/></name><argument_list pos:line="4" pos:column="23">(<argument><expr><name pos:line="4" pos:column="24">sumrbuf<pos:position pos:line="4" pos:column="31"/></name> <operator pos:line="4" pos:column="32">+<pos:position pos:line="4" pos:column="33"/></operator> <name pos:line="4" pos:column="34">sumresidue<pos:position pos:line="4" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="4" pos:column="46">p<pos:position pos:line="4" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="4" pos:column="49">len<pos:position pos:line="4" pos:column="52"/></name></expr></argument>)<pos:position pos:line="4" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="54"/></expr_stmt>
		<expr_stmt><expr><name pos:line="5" pos:column="17">sumresidue<pos:position pos:line="5" pos:column="27"/></name> <operator pos:line="5" pos:column="28">+=<pos:position pos:line="5" pos:column="30"/></operator> <name pos:line="5" pos:column="31">len<pos:position pos:line="5" pos:column="34"/></name></expr>;<pos:position pos:line="5" pos:column="35"/></expr_stmt>
		<return pos:line="6" pos:column="17">return;<pos:position pos:line="6" pos:column="24"/></return>
	}<pos:position pos:line="7" pos:column="10"/></block></then></if>

	<if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><name pos:line="9" pos:column="13">sumresidue<pos:position pos:line="9" pos:column="23"/></name></expr>)<pos:position pos:line="9" pos:column="24"/></condition><then pos:line="9" pos:column="24"> <block pos:line="9" pos:column="25">{
		<decl_stmt><decl><type><name pos:line="10" pos:column="17">int32<pos:position pos:line="10" pos:column="22"/></name></type> <name pos:line="10" pos:column="23">i<pos:position pos:line="10" pos:column="24"/></name> <init pos:line="10" pos:column="25">= <expr><name pos:line="10" pos:column="27">CSUM_CHUNK<pos:position pos:line="10" pos:column="37"/></name> <operator pos:line="10" pos:column="38">-<pos:position pos:line="10" pos:column="39"/></operator> <name pos:line="10" pos:column="40">sumresidue<pos:position pos:line="10" pos:column="50"/></name></expr></init></decl>;<pos:position pos:line="10" pos:column="51"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="11" pos:column="17">memcpy<pos:position pos:line="11" pos:column="23"/></name><argument_list pos:line="11" pos:column="23">(<argument><expr><name pos:line="11" pos:column="24">sumrbuf<pos:position pos:line="11" pos:column="31"/></name> <operator pos:line="11" pos:column="32">+<pos:position pos:line="11" pos:column="33"/></operator> <name pos:line="11" pos:column="34">sumresidue<pos:position pos:line="11" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="46">p<pos:position pos:line="11" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="49">i<pos:position pos:line="11" pos:column="50"/></name></expr></argument>)<pos:position pos:line="11" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="52"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="12" pos:column="17">mdfour_update<pos:position pos:line="12" pos:column="30"/></name><argument_list pos:line="12" pos:column="30">(<argument><expr><operator pos:line="12" pos:column="31">&amp;<pos:position pos:line="12" pos:column="36"/></operator><name pos:line="12" pos:column="32">md<pos:position pos:line="12" pos:column="34"/></name></expr></argument>, <argument><expr><operator pos:line="12" pos:column="36">(<pos:position pos:line="12" pos:column="37"/></operator><name pos:line="12" pos:column="37">uchar<pos:position pos:line="12" pos:column="42"/></name> <operator pos:line="12" pos:column="43">*<pos:position pos:line="12" pos:column="44"/></operator><operator pos:line="12" pos:column="44">)<pos:position pos:line="12" pos:column="45"/></operator><name pos:line="12" pos:column="45">sumrbuf<pos:position pos:line="12" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="54">CSUM_CHUNK<pos:position pos:line="12" pos:column="64"/></name></expr></argument>)<pos:position pos:line="12" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="66"/></expr_stmt>
		<expr_stmt><expr><name pos:line="13" pos:column="17">len<pos:position pos:line="13" pos:column="20"/></name> <operator pos:line="13" pos:column="21">-=<pos:position pos:line="13" pos:column="23"/></operator> <name pos:line="13" pos:column="24">i<pos:position pos:line="13" pos:column="25"/></name></expr>;<pos:position pos:line="13" pos:column="26"/></expr_stmt>
		<expr_stmt><expr><name pos:line="14" pos:column="17">p<pos:position pos:line="14" pos:column="18"/></name> <operator pos:line="14" pos:column="19">+=<pos:position pos:line="14" pos:column="21"/></operator> <name pos:line="14" pos:column="22">i<pos:position pos:line="14" pos:column="23"/></name></expr>;<pos:position pos:line="14" pos:column="24"/></expr_stmt>
	}<pos:position pos:line="15" pos:column="10"/></block></then></if>

	<while pos:line="17" pos:column="9">while <condition pos:line="17" pos:column="15">(<expr><name pos:line="17" pos:column="16">len<pos:position pos:line="17" pos:column="19"/></name> <operator pos:line="17" pos:column="20">&gt;=<pos:position pos:line="17" pos:column="25"/></operator> <name pos:line="17" pos:column="23">CSUM_CHUNK<pos:position pos:line="17" pos:column="33"/></name></expr>)<pos:position pos:line="17" pos:column="34"/></condition> <block pos:line="17" pos:column="35">{
		<expr_stmt><expr><call><name pos:line="18" pos:column="17">mdfour_update<pos:position pos:line="18" pos:column="30"/></name><argument_list pos:line="18" pos:column="30">(<argument><expr><operator pos:line="18" pos:column="31">&amp;<pos:position pos:line="18" pos:column="36"/></operator><name pos:line="18" pos:column="32">md<pos:position pos:line="18" pos:column="34"/></name></expr></argument>, <argument><expr><operator pos:line="18" pos:column="36">(<pos:position pos:line="18" pos:column="37"/></operator><name pos:line="18" pos:column="37">uchar<pos:position pos:line="18" pos:column="42"/></name> <operator pos:line="18" pos:column="43">*<pos:position pos:line="18" pos:column="44"/></operator><operator pos:line="18" pos:column="44">)<pos:position pos:line="18" pos:column="45"/></operator><name pos:line="18" pos:column="45">p<pos:position pos:line="18" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="48">CSUM_CHUNK<pos:position pos:line="18" pos:column="58"/></name></expr></argument>)<pos:position pos:line="18" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="60"/></expr_stmt>
		<expr_stmt><expr><name pos:line="19" pos:column="17">len<pos:position pos:line="19" pos:column="20"/></name> <operator pos:line="19" pos:column="21">-=<pos:position pos:line="19" pos:column="23"/></operator> <name pos:line="19" pos:column="24">CSUM_CHUNK<pos:position pos:line="19" pos:column="34"/></name></expr>;<pos:position pos:line="19" pos:column="35"/></expr_stmt>
		<expr_stmt><expr><name pos:line="20" pos:column="17">p<pos:position pos:line="20" pos:column="18"/></name> <operator pos:line="20" pos:column="19">+=<pos:position pos:line="20" pos:column="21"/></operator> <name pos:line="20" pos:column="22">CSUM_CHUNK<pos:position pos:line="20" pos:column="32"/></name></expr>;<pos:position pos:line="20" pos:column="33"/></expr_stmt>
	}<pos:position pos:line="21" pos:column="10"/></block></while>

	<expr_stmt><expr><name pos:line="23" pos:column="9">sumresidue<pos:position pos:line="23" pos:column="19"/></name> <operator pos:line="23" pos:column="20">=<pos:position pos:line="23" pos:column="21"/></operator> <name pos:line="23" pos:column="22">len<pos:position pos:line="23" pos:column="25"/></name></expr>;<pos:position pos:line="23" pos:column="26"/></expr_stmt>
	<if pos:line="24" pos:column="9">if <condition pos:line="24" pos:column="12">(<expr><name pos:line="24" pos:column="13">sumresidue<pos:position pos:line="24" pos:column="23"/></name></expr>)<pos:position pos:line="24" pos:column="24"/></condition><then pos:line="24" pos:column="24">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="25" pos:column="17">memcpy<pos:position pos:line="25" pos:column="23"/></name><argument_list pos:line="25" pos:column="23">(<argument><expr><name pos:line="25" pos:column="24">sumrbuf<pos:position pos:line="25" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="33">p<pos:position pos:line="25" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="36">sumresidue<pos:position pos:line="25" pos:column="46"/></name></expr></argument>)<pos:position pos:line="25" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="48"/></expr_stmt></block></then></if>
}<pos:position pos:line="26" pos:column="2"/></block></function></unit>
