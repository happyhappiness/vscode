<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_124_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">parse_name_map<pos:position pos:line="1" pos:column="20"/></name><parameter_list pos:line="1" pos:column="20">(<parameter><decl><type><name pos:line="1" pos:column="21">char<pos:position pos:line="1" pos:column="25"/></name> <modifier pos:line="1" pos:column="26">*<pos:position pos:line="1" pos:column="27"/></modifier></type><name pos:line="1" pos:column="27">map<pos:position pos:line="1" pos:column="30"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="32">BOOL<pos:position pos:line="1" pos:column="36"/></name></type> <name pos:line="1" pos:column="37">usernames<pos:position pos:line="1" pos:column="46"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="47"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">idlist<pos:position pos:line="3" pos:column="22"/></name></name> <modifier pos:line="3" pos:column="23">*<pos:position pos:line="3" pos:column="24"/></modifier><modifier pos:line="3" pos:column="24">*<pos:position pos:line="3" pos:column="25"/></modifier></type><name pos:line="3" pos:column="25">idmap_ptr<pos:position pos:line="3" pos:column="34"/></name> <init pos:line="3" pos:column="35">= <expr><ternary><condition><expr><name pos:line="3" pos:column="37">usernames<pos:position pos:line="3" pos:column="46"/></name></expr> ?<pos:position pos:line="3" pos:column="48"/></condition><then pos:line="3" pos:column="48"> <expr><operator pos:line="3" pos:column="49">&amp;<pos:position pos:line="3" pos:column="54"/></operator><name pos:line="3" pos:column="50">uidmap<pos:position pos:line="3" pos:column="56"/></name></expr> <pos:position pos:line="3" pos:column="57"/></then><else pos:line="3" pos:column="57">: <expr><operator pos:line="3" pos:column="59">&amp;<pos:position pos:line="3" pos:column="64"/></operator><name pos:line="3" pos:column="60">gidmap<pos:position pos:line="3" pos:column="66"/></name></expr></else></ternary></expr></init></decl>;<pos:position pos:line="3" pos:column="67"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">idlist<pos:position pos:line="4" pos:column="22"/></name></name> <modifier pos:line="4" pos:column="23">*<pos:position pos:line="4" pos:column="24"/></modifier><modifier pos:line="4" pos:column="24">*<pos:position pos:line="4" pos:column="25"/></modifier></type><name pos:line="4" pos:column="25">idlist_ptr<pos:position pos:line="4" pos:column="35"/></name> <init pos:line="4" pos:column="36">= <expr><ternary><condition><expr><name pos:line="4" pos:column="38">usernames<pos:position pos:line="4" pos:column="47"/></name></expr> ?<pos:position pos:line="4" pos:column="49"/></condition><then pos:line="4" pos:column="49"> <expr><operator pos:line="4" pos:column="50">&amp;<pos:position pos:line="4" pos:column="55"/></operator><name pos:line="4" pos:column="51">uidlist<pos:position pos:line="4" pos:column="58"/></name></expr> <pos:position pos:line="4" pos:column="59"/></then><else pos:line="4" pos:column="59">: <expr><operator pos:line="4" pos:column="61">&amp;<pos:position pos:line="4" pos:column="66"/></operator><name pos:line="4" pos:column="62">gidlist<pos:position pos:line="4" pos:column="69"/></name></expr></else></ternary></expr></init></decl>;<pos:position pos:line="4" pos:column="70"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">char<pos:position pos:line="5" pos:column="13"/></name> <modifier pos:line="5" pos:column="14">*<pos:position pos:line="5" pos:column="15"/></modifier></type><name pos:line="5" pos:column="15">colon<pos:position pos:line="5" pos:column="20"/></name></decl>, <modifier pos:line="5" pos:column="22">*<pos:position pos:line="5" pos:column="23"/></modifier><decl><type ref="prev"/><name pos:line="5" pos:column="23">cp<pos:position pos:line="5" pos:column="25"/></name> <init pos:line="5" pos:column="26">= <expr><name pos:line="5" pos:column="28">map<pos:position pos:line="5" pos:column="31"/></name> <operator pos:line="5" pos:column="32">+<pos:position pos:line="5" pos:column="33"/></operator> <call><name pos:line="5" pos:column="34">strlen<pos:position pos:line="5" pos:column="40"/></name><argument_list pos:line="5" pos:column="40">(<argument><expr><name pos:line="5" pos:column="41">map<pos:position pos:line="5" pos:column="44"/></name></expr></argument>)<pos:position pos:line="5" pos:column="45"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="46"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">union<pos:position pos:line="6" pos:column="14"/></name> <name pos:line="6" pos:column="15">name_or_id<pos:position pos:line="6" pos:column="25"/></name></name></type> <name pos:line="6" pos:column="26">noiu<pos:position pos:line="6" pos:column="30"/></name></decl>;<pos:position pos:line="6" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">id_t<pos:position pos:line="7" pos:column="13"/></name></type> <name pos:line="7" pos:column="14">id1<pos:position pos:line="7" pos:column="17"/></name></decl>;<pos:position pos:line="7" pos:column="18"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">uint16<pos:position pos:line="8" pos:column="15"/></name></type> <name pos:line="8" pos:column="16">flags<pos:position pos:line="8" pos:column="21"/></name></decl>;<pos:position pos:line="8" pos:column="22"/></decl_stmt>

	<comment type="block" pos:line="10" pos:column="9">/* Parse the list in reverse, so the order in the struct is right. */</comment>
	<while pos:line="11" pos:column="9">while <condition pos:line="11" pos:column="15">(<expr><literal type="number" pos:line="11" pos:column="16">1<pos:position pos:line="11" pos:column="17"/></literal></expr>)<pos:position pos:line="11" pos:column="18"/></condition> <block pos:line="11" pos:column="19">{
		<while pos:line="12" pos:column="17">while <condition pos:line="12" pos:column="23">(<expr><name pos:line="12" pos:column="24">cp<pos:position pos:line="12" pos:column="26"/></name> <operator pos:line="12" pos:column="27">&gt;<pos:position pos:line="12" pos:column="31"/></operator> <name pos:line="12" pos:column="29">map<pos:position pos:line="12" pos:column="32"/></name> <operator pos:line="12" pos:column="33">&amp;&amp;<pos:position pos:line="12" pos:column="43"/></operator> <name><name pos:line="12" pos:column="36">cp<pos:position pos:line="12" pos:column="38"/></name><index pos:line="12" pos:column="38">[<expr><operator pos:line="12" pos:column="39">-<pos:position pos:line="12" pos:column="40"/></operator><literal type="number" pos:line="12" pos:column="40">1<pos:position pos:line="12" pos:column="41"/></literal></expr>]<pos:position pos:line="12" pos:column="42"/></index></name> <operator pos:line="12" pos:column="43">!=<pos:position pos:line="12" pos:column="45"/></operator> <literal type="char" pos:line="12" pos:column="46">','<pos:position pos:line="12" pos:column="49"/></literal></expr>)<pos:position pos:line="12" pos:column="50"/></condition> <block type="pseudo"><expr_stmt><expr><name pos:line="12" pos:column="51">cp<pos:position pos:line="12" pos:column="53"/></name><operator pos:line="12" pos:column="53">--<pos:position pos:line="12" pos:column="55"/></operator></expr>;<pos:position pos:line="12" pos:column="56"/></expr_stmt></block></while>
		<if pos:line="13" pos:column="17">if <condition pos:line="13" pos:column="20">(<expr><operator pos:line="13" pos:column="21">!<pos:position pos:line="13" pos:column="22"/></operator><operator pos:line="13" pos:column="22">(<pos:position pos:line="13" pos:column="23"/></operator><name pos:line="13" pos:column="23">colon<pos:position pos:line="13" pos:column="28"/></name> <operator pos:line="13" pos:column="29">=<pos:position pos:line="13" pos:column="30"/></operator> <call><name pos:line="13" pos:column="31">strchr<pos:position pos:line="13" pos:column="37"/></name><argument_list pos:line="13" pos:column="37">(<argument><expr><name pos:line="13" pos:column="38">cp<pos:position pos:line="13" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="13" pos:column="42">':'<pos:position pos:line="13" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="46"/></argument_list></call><operator pos:line="13" pos:column="46">)<pos:position pos:line="13" pos:column="47"/></operator></expr>)<pos:position pos:line="13" pos:column="48"/></condition><then pos:line="13" pos:column="48"> <block pos:line="13" pos:column="49">{
			<expr_stmt><expr><call><name pos:line="14" pos:column="25">rprintf<pos:position pos:line="14" pos:column="32"/></name><argument_list pos:line="14" pos:column="32">(<argument><expr><name pos:line="14" pos:column="33">FERROR<pos:position pos:line="14" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="14" pos:column="41">"No colon found in --%smap: %s\n"<pos:position pos:line="14" pos:column="74"/></literal></expr></argument>,
				<argument><expr><ternary><condition><expr><name pos:line="15" pos:column="33">usernames<pos:position pos:line="15" pos:column="42"/></name></expr> ?<pos:position pos:line="15" pos:column="44"/></condition><then pos:line="15" pos:column="44"> <expr><literal type="string" pos:line="15" pos:column="45">"user"<pos:position pos:line="15" pos:column="51"/></literal></expr> <pos:position pos:line="15" pos:column="52"/></then><else pos:line="15" pos:column="52">: <expr><literal type="string" pos:line="15" pos:column="54">"group"<pos:position pos:line="15" pos:column="61"/></literal></expr></else></ternary></expr></argument>, <argument><expr><name pos:line="15" pos:column="63">cp<pos:position pos:line="15" pos:column="65"/></name></expr></argument>)<pos:position pos:line="15" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="67"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="16" pos:column="25">exit_cleanup<pos:position pos:line="16" pos:column="37"/></name><argument_list pos:line="16" pos:column="37">(<argument><expr><name pos:line="16" pos:column="38">RERR_SYNTAX<pos:position pos:line="16" pos:column="49"/></name></expr></argument>)<pos:position pos:line="16" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="51"/></expr_stmt>
		}<pos:position pos:line="17" pos:column="18"/></block></then></if>
		<if pos:line="18" pos:column="17">if <condition pos:line="18" pos:column="20">(<expr><operator pos:line="18" pos:column="21">!<pos:position pos:line="18" pos:column="22"/></operator><name><name pos:line="18" pos:column="22">colon<pos:position pos:line="18" pos:column="27"/></name><index pos:line="18" pos:column="27">[<expr><literal type="number" pos:line="18" pos:column="28">1<pos:position pos:line="18" pos:column="29"/></literal></expr>]<pos:position pos:line="18" pos:column="30"/></index></name></expr>)<pos:position pos:line="18" pos:column="31"/></condition><then pos:line="18" pos:column="31"> <block pos:line="18" pos:column="32">{
			<expr_stmt><expr><call><name pos:line="19" pos:column="25">rprintf<pos:position pos:line="19" pos:column="32"/></name><argument_list pos:line="19" pos:column="32">(<argument><expr><name pos:line="19" pos:column="33">FERROR<pos:position pos:line="19" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="41">"No name found after colon --%smap: %s\n"<pos:position pos:line="19" pos:column="82"/></literal></expr></argument>,
				<argument><expr><ternary><condition><expr><name pos:line="20" pos:column="33">usernames<pos:position pos:line="20" pos:column="42"/></name></expr> ?<pos:position pos:line="20" pos:column="44"/></condition><then pos:line="20" pos:column="44"> <expr><literal type="string" pos:line="20" pos:column="45">"user"<pos:position pos:line="20" pos:column="51"/></literal></expr> <pos:position pos:line="20" pos:column="52"/></then><else pos:line="20" pos:column="52">: <expr><literal type="string" pos:line="20" pos:column="54">"group"<pos:position pos:line="20" pos:column="61"/></literal></expr></else></ternary></expr></argument>, <argument><expr><name pos:line="20" pos:column="63">cp<pos:position pos:line="20" pos:column="65"/></name></expr></argument>)<pos:position pos:line="20" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="67"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="21" pos:column="25">exit_cleanup<pos:position pos:line="21" pos:column="37"/></name><argument_list pos:line="21" pos:column="37">(<argument><expr><name pos:line="21" pos:column="38">RERR_SYNTAX<pos:position pos:line="21" pos:column="49"/></name></expr></argument>)<pos:position pos:line="21" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="51"/></expr_stmt>
		}<pos:position pos:line="22" pos:column="18"/></block></then></if>
		<expr_stmt><expr><operator pos:line="23" pos:column="17">*<pos:position pos:line="23" pos:column="18"/></operator><name pos:line="23" pos:column="18">colon<pos:position pos:line="23" pos:column="23"/></name> <operator pos:line="23" pos:column="24">=<pos:position pos:line="23" pos:column="25"/></operator> <literal type="char" pos:line="23" pos:column="26">'\0'<pos:position pos:line="23" pos:column="30"/></literal></expr>;<pos:position pos:line="23" pos:column="31"/></expr_stmt>

		<if pos:line="25" pos:column="17">if <condition pos:line="25" pos:column="20">(<expr><call><name pos:line="25" pos:column="21">isDigit<pos:position pos:line="25" pos:column="28"/></name><argument_list pos:line="25" pos:column="28">(<argument><expr><name pos:line="25" pos:column="29">cp<pos:position pos:line="25" pos:column="31"/></name></expr></argument>)<pos:position pos:line="25" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="25" pos:column="33"/></condition><then pos:line="25" pos:column="33"> <block pos:line="25" pos:column="34">{
			<decl_stmt><decl><type><name pos:line="26" pos:column="25">char<pos:position pos:line="26" pos:column="29"/></name> <modifier pos:line="26" pos:column="30">*<pos:position pos:line="26" pos:column="31"/></modifier></type><name pos:line="26" pos:column="31">dash<pos:position pos:line="26" pos:column="35"/></name> <init pos:line="26" pos:column="36">= <expr><call><name pos:line="26" pos:column="38">strchr<pos:position pos:line="26" pos:column="44"/></name><argument_list pos:line="26" pos:column="44">(<argument><expr><name pos:line="26" pos:column="45">cp<pos:position pos:line="26" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="26" pos:column="49">'-'<pos:position pos:line="26" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="53"/></argument_list></call></expr></init></decl>;<pos:position pos:line="26" pos:column="54"/></decl_stmt>
			<if pos:line="27" pos:column="25">if <condition pos:line="27" pos:column="28">(<expr><call><name pos:line="27" pos:column="29">strspn<pos:position pos:line="27" pos:column="35"/></name><argument_list pos:line="27" pos:column="35">(<argument><expr><name pos:line="27" pos:column="36">cp<pos:position pos:line="27" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="27" pos:column="40">"0123456789-"<pos:position pos:line="27" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="54"/></argument_list></call> <operator pos:line="27" pos:column="55">!=<pos:position pos:line="27" pos:column="57"/></operator> <call pos:line="27" pos:column="58">(<name pos:line="27" pos:column="59">size_t<pos:position pos:line="27" pos:column="65"/></name>)<argument_list pos:line="27" pos:column="66">(<argument><expr><name pos:line="27" pos:column="67">colon<pos:position pos:line="27" pos:column="72"/></name> <operator pos:line="27" pos:column="73">-<pos:position pos:line="27" pos:column="74"/></operator> <name pos:line="27" pos:column="75">cp<pos:position pos:line="27" pos:column="77"/></name></expr></argument>)<pos:position pos:line="27" pos:column="78"/></argument_list></call>
			 <operator pos:line="28" pos:column="26">||<pos:position pos:line="28" pos:column="28"/></operator> <operator pos:line="28" pos:column="29">(<pos:position pos:line="28" pos:column="30"/></operator><name pos:line="28" pos:column="30">dash<pos:position pos:line="28" pos:column="34"/></name> <operator pos:line="28" pos:column="35">&amp;&amp;<pos:position pos:line="28" pos:column="45"/></operator> <operator pos:line="28" pos:column="38">(<pos:position pos:line="28" pos:column="39"/></operator><operator pos:line="28" pos:column="39">!<pos:position pos:line="28" pos:column="40"/></operator><name><name pos:line="28" pos:column="40">dash<pos:position pos:line="28" pos:column="44"/></name><index pos:line="28" pos:column="44">[<expr><literal type="number" pos:line="28" pos:column="45">1<pos:position pos:line="28" pos:column="46"/></literal></expr>]<pos:position pos:line="28" pos:column="47"/></index></name> <operator pos:line="28" pos:column="48">||<pos:position pos:line="28" pos:column="50"/></operator> <call><name pos:line="28" pos:column="51">strchr<pos:position pos:line="28" pos:column="57"/></name><argument_list pos:line="28" pos:column="57">(<argument><expr><name pos:line="28" pos:column="58">dash<pos:position pos:line="28" pos:column="62"/></name><operator pos:line="28" pos:column="62">+<pos:position pos:line="28" pos:column="63"/></operator><literal type="number" pos:line="28" pos:column="63">1<pos:position pos:line="28" pos:column="64"/></literal></expr></argument>, <argument><expr><literal type="char" pos:line="28" pos:column="66">'-'<pos:position pos:line="28" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="70"/></argument_list></call><operator pos:line="28" pos:column="70">)<pos:position pos:line="28" pos:column="71"/></operator><operator pos:line="28" pos:column="71">)<pos:position pos:line="28" pos:column="72"/></operator></expr>)<pos:position pos:line="28" pos:column="73"/></condition><then pos:line="28" pos:column="73"> <block pos:line="28" pos:column="74">{
				<expr_stmt><expr><call><name pos:line="29" pos:column="33">rprintf<pos:position pos:line="29" pos:column="40"/></name><argument_list pos:line="29" pos:column="40">(<argument><expr><name pos:line="29" pos:column="41">FERROR<pos:position pos:line="29" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="29" pos:column="49">"Invalid number in --%smap: %s\n"<pos:position pos:line="29" pos:column="82"/></literal></expr></argument>,
					<argument><expr><ternary><condition><expr><name pos:line="30" pos:column="41">usernames<pos:position pos:line="30" pos:column="50"/></name></expr> ?<pos:position pos:line="30" pos:column="52"/></condition><then pos:line="30" pos:column="52"> <expr><literal type="string" pos:line="30" pos:column="53">"user"<pos:position pos:line="30" pos:column="59"/></literal></expr> <pos:position pos:line="30" pos:column="60"/></then><else pos:line="30" pos:column="60">: <expr><literal type="string" pos:line="30" pos:column="62">"group"<pos:position pos:line="30" pos:column="69"/></literal></expr></else></ternary></expr></argument>, <argument><expr><name pos:line="30" pos:column="71">cp<pos:position pos:line="30" pos:column="73"/></name></expr></argument>)<pos:position pos:line="30" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="75"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="31" pos:column="33">exit_cleanup<pos:position pos:line="31" pos:column="45"/></name><argument_list pos:line="31" pos:column="45">(<argument><expr><name pos:line="31" pos:column="46">RERR_SYNTAX<pos:position pos:line="31" pos:column="57"/></name></expr></argument>)<pos:position pos:line="31" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="59"/></expr_stmt>
			}<pos:position pos:line="32" pos:column="26"/></block></then></if>
			<if pos:line="33" pos:column="25">if <condition pos:line="33" pos:column="28">(<expr><name pos:line="33" pos:column="29">dash<pos:position pos:line="33" pos:column="33"/></name></expr>)<pos:position pos:line="33" pos:column="34"/></condition><then pos:line="33" pos:column="34"> <block pos:line="33" pos:column="35">{
				<expr_stmt><expr><operator pos:line="34" pos:column="33">*<pos:position pos:line="34" pos:column="34"/></operator><name pos:line="34" pos:column="34">dash<pos:position pos:line="34" pos:column="38"/></name> <operator pos:line="34" pos:column="39">=<pos:position pos:line="34" pos:column="40"/></operator> <literal type="char" pos:line="34" pos:column="41">'\0'<pos:position pos:line="34" pos:column="45"/></literal></expr>;<pos:position pos:line="34" pos:column="46"/></expr_stmt>
				<expr_stmt><expr><name><name pos:line="35" pos:column="33">noiu<pos:position pos:line="35" pos:column="37"/></name><operator pos:line="35" pos:column="37">.<pos:position pos:line="35" pos:column="38"/></operator><name pos:line="35" pos:column="38">max_id<pos:position pos:line="35" pos:column="44"/></name></name> <operator pos:line="35" pos:column="45">=<pos:position pos:line="35" pos:column="46"/></operator> <call><name pos:line="35" pos:column="47">id_parse<pos:position pos:line="35" pos:column="55"/></name><argument_list pos:line="35" pos:column="55">(<argument><expr><name pos:line="35" pos:column="56">dash<pos:position pos:line="35" pos:column="60"/></name><operator pos:line="35" pos:column="60">+<pos:position pos:line="35" pos:column="61"/></operator><literal type="number" pos:line="35" pos:column="61">1<pos:position pos:line="35" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="64"/></expr_stmt>
			}<pos:position pos:line="36" pos:column="26"/></block></then> <else pos:line="36" pos:column="27">else
				<block type="pseudo"><expr_stmt><expr><name><name pos:line="37" pos:column="33">noiu<pos:position pos:line="37" pos:column="37"/></name><operator pos:line="37" pos:column="37">.<pos:position pos:line="37" pos:column="38"/></operator><name pos:line="37" pos:column="38">max_id<pos:position pos:line="37" pos:column="44"/></name></name> <operator pos:line="37" pos:column="45">=<pos:position pos:line="37" pos:column="46"/></operator> <literal type="number" pos:line="37" pos:column="47">0<pos:position pos:line="37" pos:column="48"/></literal></expr>;<pos:position pos:line="37" pos:column="49"/></expr_stmt></block></else></if>
			<expr_stmt><expr><name pos:line="38" pos:column="25">flags<pos:position pos:line="38" pos:column="30"/></name> <operator pos:line="38" pos:column="31">=<pos:position pos:line="38" pos:column="32"/></operator> <literal type="number" pos:line="38" pos:column="33">0<pos:position pos:line="38" pos:column="34"/></literal></expr>;<pos:position pos:line="38" pos:column="35"/></expr_stmt>
			<expr_stmt><expr><name pos:line="39" pos:column="25">id1<pos:position pos:line="39" pos:column="28"/></name> <operator pos:line="39" pos:column="29">=<pos:position pos:line="39" pos:column="30"/></operator> <call><name pos:line="39" pos:column="31">id_parse<pos:position pos:line="39" pos:column="39"/></name><argument_list pos:line="39" pos:column="39">(<argument><expr><name pos:line="39" pos:column="40">cp<pos:position pos:line="39" pos:column="42"/></name></expr></argument>)<pos:position pos:line="39" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="44"/></expr_stmt>
			<if pos:line="40" pos:column="25">if <condition pos:line="40" pos:column="28">(<expr><name pos:line="40" pos:column="29">dash<pos:position pos:line="40" pos:column="33"/></name></expr>)<pos:position pos:line="40" pos:column="34"/></condition><then pos:line="40" pos:column="34">
				<block type="pseudo"><expr_stmt><expr><operator pos:line="41" pos:column="33">*<pos:position pos:line="41" pos:column="34"/></operator><name pos:line="41" pos:column="34">dash<pos:position pos:line="41" pos:column="38"/></name> <operator pos:line="41" pos:column="39">=<pos:position pos:line="41" pos:column="40"/></operator> <literal type="char" pos:line="41" pos:column="41">'-'<pos:position pos:line="41" pos:column="44"/></literal></expr>;<pos:position pos:line="41" pos:column="45"/></expr_stmt></block></then></if>
		}<pos:position pos:line="42" pos:column="18"/></block></then> <elseif pos:line="42" pos:column="19">else <if pos:line="42" pos:column="24">if <condition pos:line="42" pos:column="27">(<expr><call><name pos:line="42" pos:column="28">strpbrk<pos:position pos:line="42" pos:column="35"/></name><argument_list pos:line="42" pos:column="35">(<argument><expr><name pos:line="42" pos:column="36">cp<pos:position pos:line="42" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="42" pos:column="40">"*[?"<pos:position pos:line="42" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="42" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="42" pos:column="47"/></condition><then pos:line="42" pos:column="47"> <block pos:line="42" pos:column="48">{
			<expr_stmt><expr><name pos:line="43" pos:column="25">flags<pos:position pos:line="43" pos:column="30"/></name> <operator pos:line="43" pos:column="31">=<pos:position pos:line="43" pos:column="32"/></operator> <name pos:line="43" pos:column="33">NFLAGS_WILD_NAME_MATCH<pos:position pos:line="43" pos:column="55"/></name></expr>;<pos:position pos:line="43" pos:column="56"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="44" pos:column="25">noiu<pos:position pos:line="44" pos:column="29"/></name><operator pos:line="44" pos:column="29">.<pos:position pos:line="44" pos:column="30"/></operator><name pos:line="44" pos:column="30">name<pos:position pos:line="44" pos:column="34"/></name></name> <operator pos:line="44" pos:column="35">=<pos:position pos:line="44" pos:column="36"/></operator> <name pos:line="44" pos:column="37">cp<pos:position pos:line="44" pos:column="39"/></name></expr>;<pos:position pos:line="44" pos:column="40"/></expr_stmt>
			<expr_stmt><expr><name pos:line="45" pos:column="25">id1<pos:position pos:line="45" pos:column="28"/></name> <operator pos:line="45" pos:column="29">=<pos:position pos:line="45" pos:column="30"/></operator> <literal type="number" pos:line="45" pos:column="31">0<pos:position pos:line="45" pos:column="32"/></literal></expr>;<pos:position pos:line="45" pos:column="33"/></expr_stmt>
		}<pos:position pos:line="46" pos:column="18"/></block></then></if></elseif> <else pos:line="46" pos:column="19">else <block pos:line="46" pos:column="24">{
			<expr_stmt><expr><name pos:line="47" pos:column="25">flags<pos:position pos:line="47" pos:column="30"/></name> <operator pos:line="47" pos:column="31">=<pos:position pos:line="47" pos:column="32"/></operator> <name pos:line="47" pos:column="33">NFLAGS_NAME_MATCH<pos:position pos:line="47" pos:column="50"/></name></expr>;<pos:position pos:line="47" pos:column="51"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="48" pos:column="25">noiu<pos:position pos:line="48" pos:column="29"/></name><operator pos:line="48" pos:column="29">.<pos:position pos:line="48" pos:column="30"/></operator><name pos:line="48" pos:column="30">name<pos:position pos:line="48" pos:column="34"/></name></name> <operator pos:line="48" pos:column="35">=<pos:position pos:line="48" pos:column="36"/></operator> <name pos:line="48" pos:column="37">cp<pos:position pos:line="48" pos:column="39"/></name></expr>;<pos:position pos:line="48" pos:column="40"/></expr_stmt>
			<expr_stmt><expr><name pos:line="49" pos:column="25">id1<pos:position pos:line="49" pos:column="28"/></name> <operator pos:line="49" pos:column="29">=<pos:position pos:line="49" pos:column="30"/></operator> <literal type="number" pos:line="49" pos:column="31">0<pos:position pos:line="49" pos:column="32"/></literal></expr>;<pos:position pos:line="49" pos:column="33"/></expr_stmt>
		}<pos:position pos:line="50" pos:column="18"/></block></else></if>

		<if pos:line="52" pos:column="17">if <condition pos:line="52" pos:column="20">(<expr><name pos:line="52" pos:column="21">usernames<pos:position pos:line="52" pos:column="30"/></name></expr>)<pos:position pos:line="52" pos:column="31"/></condition><then pos:line="52" pos:column="31"> <block pos:line="52" pos:column="32">{
			<decl_stmt><decl><type><name pos:line="53" pos:column="25">uid_t<pos:position pos:line="53" pos:column="30"/></name></type> <name pos:line="53" pos:column="31">uid<pos:position pos:line="53" pos:column="34"/></name></decl>;<pos:position pos:line="53" pos:column="35"/></decl_stmt>
			<if pos:line="54" pos:column="25">if <condition pos:line="54" pos:column="28">(<expr><call><name pos:line="54" pos:column="29">user_to_uid<pos:position pos:line="54" pos:column="40"/></name><argument_list pos:line="54" pos:column="40">(<argument><expr><name pos:line="54" pos:column="41">colon<pos:position pos:line="54" pos:column="46"/></name><operator pos:line="54" pos:column="46">+<pos:position pos:line="54" pos:column="47"/></operator><literal type="number" pos:line="54" pos:column="47">1<pos:position pos:line="54" pos:column="48"/></literal></expr></argument>, <argument><expr><operator pos:line="54" pos:column="50">&amp;<pos:position pos:line="54" pos:column="55"/></operator><name pos:line="54" pos:column="51">uid<pos:position pos:line="54" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="56">True<pos:position pos:line="54" pos:column="60"/></name></expr></argument>)<pos:position pos:line="54" pos:column="61"/></argument_list></call></expr>)<pos:position pos:line="54" pos:column="62"/></condition><then pos:line="54" pos:column="62">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="55" pos:column="33">add_to_list<pos:position pos:line="55" pos:column="44"/></name><argument_list pos:line="55" pos:column="44">(<argument><expr><name pos:line="55" pos:column="45">idmap_ptr<pos:position pos:line="55" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="56">id1<pos:position pos:line="55" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="61">noiu<pos:position pos:line="55" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="67">uid<pos:position pos:line="55" pos:column="70"/></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="72">flags<pos:position pos:line="55" pos:column="77"/></name></expr></argument>)<pos:position pos:line="55" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="79"/></expr_stmt></block></then>
			<else pos:line="56" pos:column="25">else <block pos:line="56" pos:column="30">{
				<expr_stmt><expr><call><name pos:line="57" pos:column="33">rprintf<pos:position pos:line="57" pos:column="40"/></name><argument_list pos:line="57" pos:column="40">(<argument><expr><name pos:line="57" pos:column="41">FERROR<pos:position pos:line="57" pos:column="47"/></name></expr></argument>,
				    <argument><expr><literal type="string" pos:line="58" pos:column="37">"Unknown --usermap name on receiver: %s\n"<pos:position pos:line="58" pos:column="79"/></literal></expr></argument>,
				    <argument><expr><name pos:line="59" pos:column="37">colon<pos:position pos:line="59" pos:column="42"/></name><operator pos:line="59" pos:column="42">+<pos:position pos:line="59" pos:column="43"/></operator><literal type="number" pos:line="59" pos:column="43">1<pos:position pos:line="59" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="59" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="46"/></expr_stmt>
			}<pos:position pos:line="60" pos:column="26"/></block></else></if>
		}<pos:position pos:line="61" pos:column="18"/></block></then> <else pos:line="61" pos:column="19">else <block pos:line="61" pos:column="24">{
			<decl_stmt><decl><type><name pos:line="62" pos:column="25">gid_t<pos:position pos:line="62" pos:column="30"/></name></type> <name pos:line="62" pos:column="31">gid<pos:position pos:line="62" pos:column="34"/></name></decl>;<pos:position pos:line="62" pos:column="35"/></decl_stmt>
			<if pos:line="63" pos:column="25">if <condition pos:line="63" pos:column="28">(<expr><call><name pos:line="63" pos:column="29">group_to_gid<pos:position pos:line="63" pos:column="41"/></name><argument_list pos:line="63" pos:column="41">(<argument><expr><name pos:line="63" pos:column="42">colon<pos:position pos:line="63" pos:column="47"/></name><operator pos:line="63" pos:column="47">+<pos:position pos:line="63" pos:column="48"/></operator><literal type="number" pos:line="63" pos:column="48">1<pos:position pos:line="63" pos:column="49"/></literal></expr></argument>, <argument><expr><operator pos:line="63" pos:column="51">&amp;<pos:position pos:line="63" pos:column="56"/></operator><name pos:line="63" pos:column="52">gid<pos:position pos:line="63" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="63" pos:column="57">True<pos:position pos:line="63" pos:column="61"/></name></expr></argument>)<pos:position pos:line="63" pos:column="62"/></argument_list></call></expr>)<pos:position pos:line="63" pos:column="63"/></condition><then pos:line="63" pos:column="63">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="64" pos:column="33">add_to_list<pos:position pos:line="64" pos:column="44"/></name><argument_list pos:line="64" pos:column="44">(<argument><expr><name pos:line="64" pos:column="45">idmap_ptr<pos:position pos:line="64" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="56">id1<pos:position pos:line="64" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="61">noiu<pos:position pos:line="64" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="67">gid<pos:position pos:line="64" pos:column="70"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="72">flags<pos:position pos:line="64" pos:column="77"/></name></expr></argument>)<pos:position pos:line="64" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="79"/></expr_stmt></block></then>
			<else pos:line="65" pos:column="25">else <block pos:line="65" pos:column="30">{
				<expr_stmt><expr><call><name pos:line="66" pos:column="33">rprintf<pos:position pos:line="66" pos:column="40"/></name><argument_list pos:line="66" pos:column="40">(<argument><expr><name pos:line="66" pos:column="41">FERROR<pos:position pos:line="66" pos:column="47"/></name></expr></argument>,
				    <argument><expr><literal type="string" pos:line="67" pos:column="37">"Unknown --groupmap name on receiver: %s\n"<pos:position pos:line="67" pos:column="80"/></literal></expr></argument>,
				    <argument><expr><name pos:line="68" pos:column="37">colon<pos:position pos:line="68" pos:column="42"/></name><operator pos:line="68" pos:column="42">+<pos:position pos:line="68" pos:column="43"/></operator><literal type="number" pos:line="68" pos:column="43">1<pos:position pos:line="68" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="68" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="46"/></expr_stmt>
			}<pos:position pos:line="69" pos:column="26"/></block></else></if>
		}<pos:position pos:line="70" pos:column="18"/></block></else></if>

		<if pos:line="72" pos:column="17">if <condition pos:line="72" pos:column="20">(<expr><name pos:line="72" pos:column="21">cp<pos:position pos:line="72" pos:column="23"/></name> <operator pos:line="72" pos:column="24">==<pos:position pos:line="72" pos:column="26"/></operator> <name pos:line="72" pos:column="27">map<pos:position pos:line="72" pos:column="30"/></name></expr>)<pos:position pos:line="72" pos:column="31"/></condition><then pos:line="72" pos:column="31">
			<block type="pseudo"><break pos:line="73" pos:column="25">break;<pos:position pos:line="73" pos:column="31"/></break></block></then></if>

		<expr_stmt><expr><operator pos:line="75" pos:column="17">*<pos:position pos:line="75" pos:column="18"/></operator><operator pos:line="75" pos:column="18">--<pos:position pos:line="75" pos:column="20"/></operator><name pos:line="75" pos:column="20">cp<pos:position pos:line="75" pos:column="22"/></name> <operator pos:line="75" pos:column="23">=<pos:position pos:line="75" pos:column="24"/></operator> <literal type="char" pos:line="75" pos:column="25">'\0'<pos:position pos:line="75" pos:column="29"/></literal></expr>;<pos:position pos:line="75" pos:column="30"/></expr_stmt> <comment type="block" pos:line="75" pos:column="31">/* replace comma */</comment>
	}<pos:position pos:line="76" pos:column="10"/></block></while>

	<comment type="block" pos:line="78" pos:column="9">/* The 0 user/group doesn't get its name sent, so add it explicitly. */</comment>
	<expr_stmt><expr><call><name pos:line="79" pos:column="9">recv_add_id<pos:position pos:line="79" pos:column="20"/></name><argument_list pos:line="79" pos:column="20">(<argument><expr><name pos:line="79" pos:column="21">idlist_ptr<pos:position pos:line="79" pos:column="31"/></name></expr></argument>, <argument><expr><operator pos:line="79" pos:column="33">*<pos:position pos:line="79" pos:column="34"/></operator><name pos:line="79" pos:column="34">idmap_ptr<pos:position pos:line="79" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="79" pos:column="45">0<pos:position pos:line="79" pos:column="46"/></literal></expr></argument>,
		    <argument><expr><ternary><condition><expr><name pos:line="80" pos:column="21">numeric_ids<pos:position pos:line="80" pos:column="32"/></name></expr> ?<pos:position pos:line="80" pos:column="34"/></condition><then pos:line="80" pos:column="34"> <expr><name pos:line="80" pos:column="35">NULL<pos:position pos:line="80" pos:column="39"/></name></expr> <pos:position pos:line="80" pos:column="40"/></then><else pos:line="80" pos:column="40">: <expr><ternary><condition><expr><name pos:line="80" pos:column="42">usernames<pos:position pos:line="80" pos:column="51"/></name></expr> ?<pos:position pos:line="80" pos:column="53"/></condition><then pos:line="80" pos:column="53"> <expr><call><name pos:line="80" pos:column="54">uid_to_user<pos:position pos:line="80" pos:column="65"/></name><argument_list pos:line="80" pos:column="65">(<argument><expr><literal type="number" pos:line="80" pos:column="66">0<pos:position pos:line="80" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="80" pos:column="68"/></argument_list></call></expr> <pos:position pos:line="80" pos:column="69"/></then><else pos:line="80" pos:column="69">: <expr><call><name pos:line="80" pos:column="71">gid_to_group<pos:position pos:line="80" pos:column="83"/></name><argument_list pos:line="80" pos:column="83">(<argument><expr><literal type="number" pos:line="80" pos:column="84">0<pos:position pos:line="80" pos:column="85"/></literal></expr></argument>)<pos:position pos:line="80" pos:column="86"/></argument_list></call></expr></else></ternary></expr></else></ternary></expr></argument>)<pos:position pos:line="80" pos:column="87"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="88"/></expr_stmt>
}<pos:position pos:line="81" pos:column="2"/></block></function></unit>
