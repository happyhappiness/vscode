<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_428_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">BOOL<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">Section<pos:position pos:line="1" pos:column="20"/></name><parameter_list pos:line="1" pos:column="20">( <parameter><decl><type><name pos:line="1" pos:column="22">FILE<pos:position pos:line="1" pos:column="26"/></name> <modifier pos:line="1" pos:column="27">*<pos:position pos:line="1" pos:column="28"/></modifier></type><name pos:line="1" pos:column="28">InFile<pos:position pos:line="1" pos:column="34"/></name></decl></parameter>, <parameter><function_decl><type><name pos:line="1" pos:column="36">BOOL<pos:position pos:line="1" pos:column="40"/></name></type> (<modifier pos:line="1" pos:column="42">*<pos:position pos:line="1" pos:column="43"/></modifier><name pos:line="1" pos:column="43">sfunc<pos:position pos:line="1" pos:column="48"/></name>)<parameter_list pos:line="1" pos:column="49">(<parameter><decl><type><name pos:line="1" pos:column="50">char<pos:position pos:line="1" pos:column="54"/></name> <modifier pos:line="1" pos:column="55">*<pos:position pos:line="1" pos:column="56"/></modifier></type></decl></parameter>)<pos:position pos:line="1" pos:column="57"/></parameter_list></function_decl></parameter> )<pos:position pos:line="1" pos:column="59"/></parameter_list>
  <comment type="block" pos:line="2" pos:column="3">/* ------------------------------------------------------------------------ **
   * Scan a section name, and pass the name to function sfunc().
   *
   *  Input:  InFile  - Input source.
   *          sfunc   - Pointer to the function to be called if the section
   *                    name is successfully read.
   *
   *  Output: True if the section name was read and True was returned from
   *          &lt;sfunc&gt;.  False if &lt;sfunc&gt; failed or if a lexical error was
   *          encountered.
   *
   * ------------------------------------------------------------------------ **
   */</comment>
  <block pos:line="15" pos:column="3">{
  <decl_stmt><decl><type><name pos:line="16" pos:column="3">int<pos:position pos:line="16" pos:column="6"/></name></type>   <name pos:line="16" pos:column="9">c<pos:position pos:line="16" pos:column="10"/></name></decl>;<pos:position pos:line="16" pos:column="11"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="17" pos:column="3">int<pos:position pos:line="17" pos:column="6"/></name></type>   <name pos:line="17" pos:column="9">i<pos:position pos:line="17" pos:column="10"/></name></decl>;<pos:position pos:line="17" pos:column="11"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="18" pos:column="3">int<pos:position pos:line="18" pos:column="6"/></name></type>   <name pos:line="18" pos:column="9">end<pos:position pos:line="18" pos:column="12"/></name></decl>;<pos:position pos:line="18" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="19" pos:column="3">char<pos:position pos:line="19" pos:column="7"/></name> <modifier pos:line="19" pos:column="8">*<pos:position pos:line="19" pos:column="9"/></modifier></type><name pos:line="19" pos:column="9">func<pos:position pos:line="19" pos:column="13"/></name>  <init pos:line="19" pos:column="15">= <expr><literal type="string" pos:line="19" pos:column="17">"params.c:Section() -"<pos:position pos:line="19" pos:column="39"/></literal></expr></init></decl>;<pos:position pos:line="19" pos:column="40"/></decl_stmt>

  <expr_stmt><expr><name pos:line="21" pos:column="3">i<pos:position pos:line="21" pos:column="4"/></name> <operator pos:line="21" pos:column="5">=<pos:position pos:line="21" pos:column="6"/></operator> <literal type="number" pos:line="21" pos:column="7">0<pos:position pos:line="21" pos:column="8"/></literal></expr>;<pos:position pos:line="21" pos:column="9"/></expr_stmt>      <comment type="block" pos:line="21" pos:column="15">/* &lt;i&gt; is the offset of the next free byte in bufr[] and  */</comment>
  <expr_stmt><expr><name pos:line="22" pos:column="3">end<pos:position pos:line="22" pos:column="6"/></name> <operator pos:line="22" pos:column="7">=<pos:position pos:line="22" pos:column="8"/></operator> <literal type="number" pos:line="22" pos:column="9">0<pos:position pos:line="22" pos:column="10"/></literal></expr>;<pos:position pos:line="22" pos:column="11"/></expr_stmt>    <comment type="block" pos:line="22" pos:column="15">/* &lt;end&gt; is the current "end of string" offset.  In most  */</comment>
              <comment type="block" pos:line="23" pos:column="15">/* cases these will be the same, but if the last          */</comment>
              <comment type="block" pos:line="24" pos:column="15">/* character written to bufr[] is a space, then &lt;end&gt;     */</comment>
              <comment type="block" pos:line="25" pos:column="15">/* will be one less than &lt;i&gt;.                             */</comment>

  <expr_stmt><expr><name pos:line="27" pos:column="3">c<pos:position pos:line="27" pos:column="4"/></name> <operator pos:line="27" pos:column="5">=<pos:position pos:line="27" pos:column="6"/></operator> <call><name pos:line="27" pos:column="7">EatWhitespace<pos:position pos:line="27" pos:column="20"/></name><argument_list pos:line="27" pos:column="20">( <argument><expr><name pos:line="27" pos:column="22">InFile<pos:position pos:line="27" pos:column="28"/></name></expr></argument> )<pos:position pos:line="27" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="31"/></expr_stmt>    <comment type="block" pos:line="27" pos:column="35">/* We've already got the '['.  Scan */</comment>
                                  <comment type="block" pos:line="28" pos:column="35">/* past initial white space.        */</comment>

  <while pos:line="30" pos:column="3">while<condition pos:line="30" pos:column="8">( <expr><operator pos:line="30" pos:column="10">(<pos:position pos:line="30" pos:column="11"/></operator><name pos:line="30" pos:column="11">EOF<pos:position pos:line="30" pos:column="14"/></name> <operator pos:line="30" pos:column="15">!=<pos:position pos:line="30" pos:column="17"/></operator> <name pos:line="30" pos:column="18">c<pos:position pos:line="30" pos:column="19"/></name><operator pos:line="30" pos:column="19">)<pos:position pos:line="30" pos:column="20"/></operator> <operator pos:line="30" pos:column="21">&amp;&amp;<pos:position pos:line="30" pos:column="31"/></operator> <operator pos:line="30" pos:column="24">(<pos:position pos:line="30" pos:column="25"/></operator><name pos:line="30" pos:column="25">c<pos:position pos:line="30" pos:column="26"/></name> <operator pos:line="30" pos:column="27">&gt;<pos:position pos:line="30" pos:column="31"/></operator> <literal type="number" pos:line="30" pos:column="29">0<pos:position pos:line="30" pos:column="30"/></literal><operator pos:line="30" pos:column="30">)<pos:position pos:line="30" pos:column="31"/></operator></expr> )<pos:position pos:line="30" pos:column="33"/></condition>
    <block pos:line="31" pos:column="5">{

    <comment type="block" pos:line="33" pos:column="5">/* Check that the buffer is big enough for the next character. */</comment>
    <if pos:line="34" pos:column="5">if<condition pos:line="34" pos:column="7">( <expr><name pos:line="34" pos:column="9">i<pos:position pos:line="34" pos:column="10"/></name> <operator pos:line="34" pos:column="11">&gt;<pos:position pos:line="34" pos:column="15"/></operator> <operator pos:line="34" pos:column="13">(<pos:position pos:line="34" pos:column="14"/></operator><name pos:line="34" pos:column="14">bSize<pos:position pos:line="34" pos:column="19"/></name> <operator pos:line="34" pos:column="20">-<pos:position pos:line="34" pos:column="21"/></operator> <literal type="number" pos:line="34" pos:column="22">2<pos:position pos:line="34" pos:column="23"/></literal><operator pos:line="34" pos:column="23">)<pos:position pos:line="34" pos:column="24"/></operator></expr> )<pos:position pos:line="34" pos:column="26"/></condition><then pos:line="34" pos:column="26">
      <block pos:line="35" pos:column="7">{
      <expr_stmt><expr><name pos:line="36" pos:column="7">bSize<pos:position pos:line="36" pos:column="12"/></name> <operator pos:line="36" pos:column="13">+=<pos:position pos:line="36" pos:column="15"/></operator> <name pos:line="36" pos:column="16">BUFR_INC<pos:position pos:line="36" pos:column="24"/></name></expr>;<pos:position pos:line="36" pos:column="25"/></expr_stmt>
      <expr_stmt><expr><name pos:line="37" pos:column="7">bufr<pos:position pos:line="37" pos:column="11"/></name>   <operator pos:line="37" pos:column="14">=<pos:position pos:line="37" pos:column="15"/></operator> <call><name pos:line="37" pos:column="16">realloc_array<pos:position pos:line="37" pos:column="29"/></name><argument_list pos:line="37" pos:column="29">( <argument><expr><name pos:line="37" pos:column="31">bufr<pos:position pos:line="37" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="37">char<pos:position pos:line="37" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="43">bSize<pos:position pos:line="37" pos:column="48"/></name></expr></argument> )<pos:position pos:line="37" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="51"/></expr_stmt>
      <if pos:line="38" pos:column="7">if<condition pos:line="38" pos:column="9">( <expr><name pos:line="38" pos:column="11">NULL<pos:position pos:line="38" pos:column="15"/></name> <operator pos:line="38" pos:column="16">==<pos:position pos:line="38" pos:column="18"/></operator> <name pos:line="38" pos:column="19">bufr<pos:position pos:line="38" pos:column="23"/></name></expr> )<pos:position pos:line="38" pos:column="25"/></condition><then pos:line="38" pos:column="25">
        <block pos:line="39" pos:column="9">{
        <expr_stmt><expr><call><name pos:line="40" pos:column="9">rprintf<pos:position pos:line="40" pos:column="16"/></name><argument_list pos:line="40" pos:column="16">(<argument><expr><name pos:line="40" pos:column="17">FLOG<pos:position pos:line="40" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="40" pos:column="23">"%s Memory re-allocation failure."<pos:position pos:line="40" pos:column="57"/></literal></expr></argument>, <argument><expr><name pos:line="40" pos:column="59">func<pos:position pos:line="40" pos:column="63"/></name></expr></argument>)<pos:position pos:line="40" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="65"/></expr_stmt>
        <return pos:line="41" pos:column="9">return<expr><operator pos:line="41" pos:column="15">(<pos:position pos:line="41" pos:column="16"/></operator> <name pos:line="41" pos:column="17">False<pos:position pos:line="41" pos:column="22"/></name> <operator pos:line="41" pos:column="23">)<pos:position pos:line="41" pos:column="24"/></operator></expr>;<pos:position pos:line="41" pos:column="25"/></return>
        }<pos:position pos:line="42" pos:column="10"/></block></then></if>
      }<pos:position pos:line="43" pos:column="8"/></block></then></if>

    <comment type="block" pos:line="45" pos:column="5">/* Handle a single character. */</comment>
    <switch pos:line="46" pos:column="5">switch<condition pos:line="46" pos:column="11">( <expr><name pos:line="46" pos:column="13">c<pos:position pos:line="46" pos:column="14"/></name></expr> )<pos:position pos:line="46" pos:column="16"/></condition>
      <block pos:line="47" pos:column="7">{
      <case pos:line="48" pos:column="7">case <expr><literal type="char" pos:line="48" pos:column="12">']'<pos:position pos:line="48" pos:column="15"/></literal></expr>:<pos:position pos:line="48" pos:column="16"/></case>                       <comment type="block" pos:line="48" pos:column="39">/* Found the closing bracket.         */</comment>
        <expr_stmt><expr><name><name pos:line="49" pos:column="9">bufr<pos:position pos:line="49" pos:column="13"/></name><index pos:line="49" pos:column="13">[<expr><name pos:line="49" pos:column="14">end<pos:position pos:line="49" pos:column="17"/></name></expr>]<pos:position pos:line="49" pos:column="18"/></index></name> <operator pos:line="49" pos:column="19">=<pos:position pos:line="49" pos:column="20"/></operator> <literal type="char" pos:line="49" pos:column="21">'\0'<pos:position pos:line="49" pos:column="25"/></literal></expr>;<pos:position pos:line="49" pos:column="26"/></expr_stmt>
        <if pos:line="50" pos:column="9">if<condition pos:line="50" pos:column="11">( <expr><literal type="number" pos:line="50" pos:column="13">0<pos:position pos:line="50" pos:column="14"/></literal> <operator pos:line="50" pos:column="15">==<pos:position pos:line="50" pos:column="17"/></operator> <name pos:line="50" pos:column="18">end<pos:position pos:line="50" pos:column="21"/></name></expr> )<pos:position pos:line="50" pos:column="23"/></condition><then pos:line="50" pos:column="23">                  <comment type="block" pos:line="50" pos:column="41">/* Don't allow an empty name.       */</comment>
          <block pos:line="51" pos:column="11">{
          <expr_stmt><expr><call><name pos:line="52" pos:column="11">rprintf<pos:position pos:line="52" pos:column="18"/></name><argument_list pos:line="52" pos:column="18">(<argument><expr><name pos:line="52" pos:column="19">FLOG<pos:position pos:line="52" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="52" pos:column="25">"%s Empty section name in config file.\n"<pos:position pos:line="52" pos:column="66"/></literal></expr></argument>, <argument><expr><name pos:line="52" pos:column="68">func<pos:position pos:line="52" pos:column="72"/></name></expr></argument> )<pos:position pos:line="52" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="75"/></expr_stmt>
          <return pos:line="53" pos:column="11">return<expr><operator pos:line="53" pos:column="17">(<pos:position pos:line="53" pos:column="18"/></operator> <name pos:line="53" pos:column="19">False<pos:position pos:line="53" pos:column="24"/></name> <operator pos:line="53" pos:column="25">)<pos:position pos:line="53" pos:column="26"/></operator></expr>;<pos:position pos:line="53" pos:column="27"/></return>
          }<pos:position pos:line="54" pos:column="12"/></block></then></if>
        <if pos:line="55" pos:column="9">if<condition pos:line="55" pos:column="11">( <expr><operator pos:line="55" pos:column="13">!<pos:position pos:line="55" pos:column="14"/></operator><call><name pos:line="55" pos:column="14">sfunc<pos:position pos:line="55" pos:column="19"/></name><argument_list pos:line="55" pos:column="19">( <argument><expr><name pos:line="55" pos:column="21">bufr<pos:position pos:line="55" pos:column="25"/></name></expr></argument> )<pos:position pos:line="55" pos:column="27"/></argument_list></call></expr> )<pos:position pos:line="55" pos:column="29"/></condition><then pos:line="55" pos:column="29">            <comment type="block" pos:line="55" pos:column="41">/* Got a valid name.  Deal with it. */</comment>
          <block type="pseudo"><return pos:line="56" pos:column="11">return<expr><operator pos:line="56" pos:column="17">(<pos:position pos:line="56" pos:column="18"/></operator> <name pos:line="56" pos:column="19">False<pos:position pos:line="56" pos:column="24"/></name> <operator pos:line="56" pos:column="25">)<pos:position pos:line="56" pos:column="26"/></operator></expr>;<pos:position pos:line="56" pos:column="27"/></return></block></then></if>
        <expr_stmt><expr><operator pos:line="57" pos:column="9">(<pos:position pos:line="57" pos:column="10"/></operator><name pos:line="57" pos:column="10">void<pos:position pos:line="57" pos:column="14"/></name><operator pos:line="57" pos:column="14">)<pos:position pos:line="57" pos:column="15"/></operator><call><name pos:line="57" pos:column="15">EatComment<pos:position pos:line="57" pos:column="25"/></name><argument_list pos:line="57" pos:column="25">( <argument><expr><name pos:line="57" pos:column="27">InFile<pos:position pos:line="57" pos:column="33"/></name></expr></argument> )<pos:position pos:line="57" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="36"/></expr_stmt>     <comment type="block" pos:line="57" pos:column="41">/* Finish off the line.             */</comment>
        <return pos:line="58" pos:column="9">return<expr><operator pos:line="58" pos:column="15">(<pos:position pos:line="58" pos:column="16"/></operator> <name pos:line="58" pos:column="17">True<pos:position pos:line="58" pos:column="21"/></name> <operator pos:line="58" pos:column="22">)<pos:position pos:line="58" pos:column="23"/></operator></expr>;<pos:position pos:line="58" pos:column="24"/></return>

      <case pos:line="60" pos:column="7">case <expr><literal type="char" pos:line="60" pos:column="12">'\n'<pos:position pos:line="60" pos:column="16"/></literal></expr>:<pos:position pos:line="60" pos:column="17"/></case>                      <comment type="block" pos:line="60" pos:column="39">/* Got newline before closing ']'.    */</comment>
        <expr_stmt><expr><name pos:line="61" pos:column="9">i<pos:position pos:line="61" pos:column="10"/></name> <operator pos:line="61" pos:column="11">=<pos:position pos:line="61" pos:column="12"/></operator> <call><name pos:line="61" pos:column="13">Continuation<pos:position pos:line="61" pos:column="25"/></name><argument_list pos:line="61" pos:column="25">( <argument><expr><name pos:line="61" pos:column="27">bufr<pos:position pos:line="61" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="33">i<pos:position pos:line="61" pos:column="34"/></name></expr></argument> )<pos:position pos:line="61" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="37"/></expr_stmt>    <comment type="block" pos:line="61" pos:column="41">/* Check for line continuation.     */</comment>
        <if pos:line="62" pos:column="9">if<condition pos:line="62" pos:column="11">( <expr><name pos:line="62" pos:column="13">i<pos:position pos:line="62" pos:column="14"/></name> <operator pos:line="62" pos:column="15">&lt;<pos:position pos:line="62" pos:column="19"/></operator> <literal type="number" pos:line="62" pos:column="17">0<pos:position pos:line="62" pos:column="18"/></literal></expr> )<pos:position pos:line="62" pos:column="20"/></condition><then pos:line="62" pos:column="20">
          <block pos:line="63" pos:column="11">{
          <expr_stmt><expr><name><name pos:line="64" pos:column="11">bufr<pos:position pos:line="64" pos:column="15"/></name><index pos:line="64" pos:column="15">[<expr><name pos:line="64" pos:column="16">end<pos:position pos:line="64" pos:column="19"/></name></expr>]<pos:position pos:line="64" pos:column="20"/></index></name> <operator pos:line="64" pos:column="21">=<pos:position pos:line="64" pos:column="22"/></operator> <literal type="char" pos:line="64" pos:column="23">'\0'<pos:position pos:line="64" pos:column="27"/></literal></expr>;<pos:position pos:line="64" pos:column="28"/></expr_stmt>
          <expr_stmt><expr><call><name pos:line="65" pos:column="11">rprintf<pos:position pos:line="65" pos:column="18"/></name><argument_list pos:line="65" pos:column="18">(<argument><expr><name pos:line="65" pos:column="19">FLOG<pos:position pos:line="65" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="65" pos:column="25">"%s Badly formed line in config file: %s\n"<pos:position pos:line="65" pos:column="68"/></literal></expr></argument>,
                   <argument><expr><name pos:line="66" pos:column="20">func<pos:position pos:line="66" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="26">bufr<pos:position pos:line="66" pos:column="30"/></name></expr></argument> )<pos:position pos:line="66" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="33"/></expr_stmt>
          <return pos:line="67" pos:column="11">return<expr><operator pos:line="67" pos:column="17">(<pos:position pos:line="67" pos:column="18"/></operator> <name pos:line="67" pos:column="19">False<pos:position pos:line="67" pos:column="24"/></name> <operator pos:line="67" pos:column="25">)<pos:position pos:line="67" pos:column="26"/></operator></expr>;<pos:position pos:line="67" pos:column="27"/></return>
          }<pos:position pos:line="68" pos:column="12"/></block></then></if>
        <expr_stmt><expr><name pos:line="69" pos:column="9">end<pos:position pos:line="69" pos:column="12"/></name> <operator pos:line="69" pos:column="13">=<pos:position pos:line="69" pos:column="14"/></operator> <ternary><condition><expr><operator pos:line="69" pos:column="15">(<pos:position pos:line="69" pos:column="16"/></operator> <operator pos:line="69" pos:column="17">(<pos:position pos:line="69" pos:column="18"/></operator><name pos:line="69" pos:column="18">i<pos:position pos:line="69" pos:column="19"/></name> <operator pos:line="69" pos:column="20">&gt;<pos:position pos:line="69" pos:column="24"/></operator> <literal type="number" pos:line="69" pos:column="22">0<pos:position pos:line="69" pos:column="23"/></literal><operator pos:line="69" pos:column="23">)<pos:position pos:line="69" pos:column="24"/></operator> <operator pos:line="69" pos:column="25">&amp;&amp;<pos:position pos:line="69" pos:column="35"/></operator> <operator pos:line="69" pos:column="28">(<pos:position pos:line="69" pos:column="29"/></operator><literal type="char" pos:line="69" pos:column="29">' '<pos:position pos:line="69" pos:column="32"/></literal> <operator pos:line="69" pos:column="33">==<pos:position pos:line="69" pos:column="35"/></operator> <name><name pos:line="69" pos:column="36">bufr<pos:position pos:line="69" pos:column="40"/></name><index pos:line="69" pos:column="40">[<expr><name pos:line="69" pos:column="41">i<pos:position pos:line="69" pos:column="42"/></name> <operator pos:line="69" pos:column="43">-<pos:position pos:line="69" pos:column="44"/></operator> <literal type="number" pos:line="69" pos:column="45">1<pos:position pos:line="69" pos:column="46"/></literal></expr>]<pos:position pos:line="69" pos:column="47"/></index></name><operator pos:line="69" pos:column="47">)<pos:position pos:line="69" pos:column="48"/></operator> <operator pos:line="69" pos:column="49">)<pos:position pos:line="69" pos:column="50"/></operator></expr> ?<pos:position pos:line="69" pos:column="52"/></condition><then pos:line="69" pos:column="52"> <expr><operator pos:line="69" pos:column="53">(<pos:position pos:line="69" pos:column="54"/></operator><name pos:line="69" pos:column="54">i<pos:position pos:line="69" pos:column="55"/></name> <operator pos:line="69" pos:column="56">-<pos:position pos:line="69" pos:column="57"/></operator> <literal type="number" pos:line="69" pos:column="58">1<pos:position pos:line="69" pos:column="59"/></literal><operator pos:line="69" pos:column="59">)<pos:position pos:line="69" pos:column="60"/></operator></expr> <pos:position pos:line="69" pos:column="61"/></then><else pos:line="69" pos:column="61">: <expr><operator pos:line="69" pos:column="63">(<pos:position pos:line="69" pos:column="64"/></operator><name pos:line="69" pos:column="64">i<pos:position pos:line="69" pos:column="65"/></name><operator pos:line="69" pos:column="65">)<pos:position pos:line="69" pos:column="66"/></operator></expr></else></ternary></expr>;<pos:position pos:line="69" pos:column="67"/></expr_stmt>
        <expr_stmt><expr><name pos:line="70" pos:column="9">c<pos:position pos:line="70" pos:column="10"/></name> <operator pos:line="70" pos:column="11">=<pos:position pos:line="70" pos:column="12"/></operator> <call><name pos:line="70" pos:column="13">getc<pos:position pos:line="70" pos:column="17"/></name><argument_list pos:line="70" pos:column="17">( <argument><expr><name pos:line="70" pos:column="19">InFile<pos:position pos:line="70" pos:column="25"/></name></expr></argument> )<pos:position pos:line="70" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="28"/></expr_stmt>             <comment type="block" pos:line="70" pos:column="41">/* Continue with next line.         */</comment>
        <break pos:line="71" pos:column="9">break;<pos:position pos:line="71" pos:column="15"/></break>

      <default pos:line="73" pos:column="7">default:<pos:position pos:line="73" pos:column="15"/></default>                        <comment type="block" pos:line="73" pos:column="39">/* All else are a valid name chars.   */</comment>
        <if pos:line="74" pos:column="9">if<condition pos:line="74" pos:column="11">( <expr><call><name pos:line="74" pos:column="13">isspace<pos:position pos:line="74" pos:column="20"/></name><argument_list pos:line="74" pos:column="20">( <argument><expr><name pos:line="74" pos:column="22">c<pos:position pos:line="74" pos:column="23"/></name></expr></argument> )<pos:position pos:line="74" pos:column="25"/></argument_list></call></expr> )<pos:position pos:line="74" pos:column="27"/></condition><then pos:line="74" pos:column="27">              <comment type="block" pos:line="74" pos:column="41">/* One space per whitespace region. */</comment>
          <block pos:line="75" pos:column="11">{
          <expr_stmt><expr><name><name pos:line="76" pos:column="11">bufr<pos:position pos:line="76" pos:column="15"/></name><index pos:line="76" pos:column="15">[<expr><name pos:line="76" pos:column="16">end<pos:position pos:line="76" pos:column="19"/></name></expr>]<pos:position pos:line="76" pos:column="20"/></index></name> <operator pos:line="76" pos:column="21">=<pos:position pos:line="76" pos:column="22"/></operator> <literal type="char" pos:line="76" pos:column="23">' '<pos:position pos:line="76" pos:column="26"/></literal></expr>;<pos:position pos:line="76" pos:column="27"/></expr_stmt>
          <expr_stmt><expr><name pos:line="77" pos:column="11">i<pos:position pos:line="77" pos:column="12"/></name> <operator pos:line="77" pos:column="13">=<pos:position pos:line="77" pos:column="14"/></operator> <name pos:line="77" pos:column="15">end<pos:position pos:line="77" pos:column="18"/></name> <operator pos:line="77" pos:column="19">+<pos:position pos:line="77" pos:column="20"/></operator> <literal type="number" pos:line="77" pos:column="21">1<pos:position pos:line="77" pos:column="22"/></literal></expr>;<pos:position pos:line="77" pos:column="23"/></expr_stmt>
          <expr_stmt><expr><name pos:line="78" pos:column="11">c<pos:position pos:line="78" pos:column="12"/></name> <operator pos:line="78" pos:column="13">=<pos:position pos:line="78" pos:column="14"/></operator> <call><name pos:line="78" pos:column="15">EatWhitespace<pos:position pos:line="78" pos:column="28"/></name><argument_list pos:line="78" pos:column="28">( <argument><expr><name pos:line="78" pos:column="30">InFile<pos:position pos:line="78" pos:column="36"/></name></expr></argument> )<pos:position pos:line="78" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="39"/></expr_stmt>
          }<pos:position pos:line="79" pos:column="12"/></block></then>
        <else pos:line="80" pos:column="9">else                            <comment type="block" pos:line="80" pos:column="41">/* All others copy verbatim.        */</comment>
          <block pos:line="81" pos:column="11">{
          <expr_stmt><expr><name><name pos:line="82" pos:column="11">bufr<pos:position pos:line="82" pos:column="15"/></name><index pos:line="82" pos:column="15">[<expr><name pos:line="82" pos:column="16">i<pos:position pos:line="82" pos:column="17"/></name><operator pos:line="82" pos:column="17">++<pos:position pos:line="82" pos:column="19"/></operator></expr>]<pos:position pos:line="82" pos:column="20"/></index></name> <operator pos:line="82" pos:column="21">=<pos:position pos:line="82" pos:column="22"/></operator> <name pos:line="82" pos:column="23">c<pos:position pos:line="82" pos:column="24"/></name></expr>;<pos:position pos:line="82" pos:column="25"/></expr_stmt>
          <expr_stmt><expr><name pos:line="83" pos:column="11">end<pos:position pos:line="83" pos:column="14"/></name> <operator pos:line="83" pos:column="15">=<pos:position pos:line="83" pos:column="16"/></operator> <name pos:line="83" pos:column="17">i<pos:position pos:line="83" pos:column="18"/></name></expr>;<pos:position pos:line="83" pos:column="19"/></expr_stmt>
          <expr_stmt><expr><name pos:line="84" pos:column="11">c<pos:position pos:line="84" pos:column="12"/></name> <operator pos:line="84" pos:column="13">=<pos:position pos:line="84" pos:column="14"/></operator> <call><name pos:line="84" pos:column="15">getc<pos:position pos:line="84" pos:column="19"/></name><argument_list pos:line="84" pos:column="19">( <argument><expr><name pos:line="84" pos:column="21">InFile<pos:position pos:line="84" pos:column="27"/></name></expr></argument> )<pos:position pos:line="84" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="30"/></expr_stmt>
          }<pos:position pos:line="85" pos:column="12"/></block></else></if>
      }<pos:position pos:line="86" pos:column="8"/></block></switch>
    }<pos:position pos:line="87" pos:column="6"/></block></while>

  <comment type="block" pos:line="89" pos:column="3">/* We arrive here if we've met the EOF before the closing bracket. */</comment>
  <expr_stmt><expr><call><name pos:line="90" pos:column="3">rprintf<pos:position pos:line="90" pos:column="10"/></name><argument_list pos:line="90" pos:column="10">(<argument><expr><name pos:line="90" pos:column="11">FLOG<pos:position pos:line="90" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="90" pos:column="17">"%s Unexpected EOF in the config file: %s\n"<pos:position pos:line="90" pos:column="61"/></literal></expr></argument>, <argument><expr><name pos:line="90" pos:column="63">func<pos:position pos:line="90" pos:column="67"/></name></expr></argument>, <argument><expr><name pos:line="90" pos:column="69">bufr<pos:position pos:line="90" pos:column="73"/></name></expr></argument> )<pos:position pos:line="90" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="76"/></expr_stmt>
  <return pos:line="91" pos:column="3">return<expr><operator pos:line="91" pos:column="9">(<pos:position pos:line="91" pos:column="10"/></operator> <name pos:line="91" pos:column="11">False<pos:position pos:line="91" pos:column="16"/></name> <operator pos:line="91" pos:column="17">)<pos:position pos:line="91" pos:column="18"/></operator></expr>;<pos:position pos:line="91" pos:column="19"/></return>
  }<pos:position pos:line="92" pos:column="4"/></block></function></unit>
