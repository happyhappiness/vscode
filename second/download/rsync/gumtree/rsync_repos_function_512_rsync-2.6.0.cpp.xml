<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_512_rsync-2.6.0.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">displayArgs<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name pos:line="1" pos:column="25">poptContext<pos:position pos:line="1" pos:column="36"/></name></type> <name pos:line="1" pos:column="37">con<pos:position pos:line="1" pos:column="40"/></name></decl></parameter>,
		<comment type="block" pos:line="2" pos:column="17">/*@unused@*/</comment> <parameter><decl><type><name><name pos:line="2" pos:column="30">enum<pos:position pos:line="2" pos:column="34"/></name> <name pos:line="2" pos:column="35">poptCallbackReason<pos:position pos:line="2" pos:column="53"/></name></name></type> <name pos:line="2" pos:column="54">foo<pos:position pos:line="2" pos:column="57"/></name></decl></parameter>,
		<parameter><decl><type><name><name pos:line="3" pos:column="17">struct<pos:position pos:line="3" pos:column="23"/></name> <name pos:line="3" pos:column="24">poptOption<pos:position pos:line="3" pos:column="34"/></name></name> <modifier pos:line="3" pos:column="35">*<pos:position pos:line="3" pos:column="36"/></modifier></type> <name pos:line="3" pos:column="37">key<pos:position pos:line="3" pos:column="40"/></name></decl></parameter>, 
		<comment type="block" pos:line="4" pos:column="17">/*@unused@*/</comment> <parameter><decl><type><specifier pos:line="4" pos:column="30">const<pos:position pos:line="4" pos:column="35"/></specifier> <name pos:line="4" pos:column="36">char<pos:position pos:line="4" pos:column="40"/></name> <modifier pos:line="4" pos:column="41">*<pos:position pos:line="4" pos:column="42"/></modifier></type> <name pos:line="4" pos:column="43">arg<pos:position pos:line="4" pos:column="46"/></name></decl></parameter>, <comment type="block" pos:line="4" pos:column="48">/*@unused@*/</comment> <parameter><decl><type><name pos:line="4" pos:column="61">void<pos:position pos:line="4" pos:column="65"/></name> <modifier pos:line="4" pos:column="66">*<pos:position pos:line="4" pos:column="67"/></modifier></type> <name pos:line="4" pos:column="68">data<pos:position pos:line="4" pos:column="72"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="73"/></parameter_list>
	<comment type="block" pos:line="5" pos:column="9">/*@globals fileSystem@*/</comment>
	<comment type="block" pos:line="6" pos:column="9">/*@modifies fileSystem@*/</comment>
<block pos:line="7" pos:column="1">{
    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><name><name pos:line="8" pos:column="9">key<pos:position pos:line="8" pos:column="12"/></name><operator pos:line="8" pos:column="12">-&gt;<pos:position pos:line="8" pos:column="17"/></operator><name pos:line="8" pos:column="14">shortName<pos:position pos:line="8" pos:column="23"/></name></name> <operator pos:line="8" pos:column="24">==<pos:position pos:line="8" pos:column="26"/></operator> <literal type="char" pos:line="8" pos:column="27">'?'<pos:position pos:line="8" pos:column="30"/></literal></expr>)<pos:position pos:line="8" pos:column="31"/></condition><then pos:line="8" pos:column="31">
	<block type="pseudo"><expr_stmt><expr><call><name pos:line="9" pos:column="9">poptPrintHelp<pos:position pos:line="9" pos:column="22"/></name><argument_list pos:line="9" pos:column="22">(<argument><expr><name pos:line="9" pos:column="23">con<pos:position pos:line="9" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="28">stdout<pos:position pos:line="9" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="9" pos:column="36">0<pos:position pos:line="9" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="39"/></expr_stmt></block></then>
    <else pos:line="10" pos:column="5">else
	<block type="pseudo"><expr_stmt><expr><call><name pos:line="11" pos:column="9">poptPrintUsage<pos:position pos:line="11" pos:column="23"/></name><argument_list pos:line="11" pos:column="23">(<argument><expr><name pos:line="11" pos:column="24">con<pos:position pos:line="11" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="29">stdout<pos:position pos:line="11" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="11" pos:column="37">0<pos:position pos:line="11" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="40"/></expr_stmt></block></else></if>
    <expr_stmt><expr><call><name pos:line="12" pos:column="5">exit<pos:position pos:line="12" pos:column="9"/></name><argument_list pos:line="12" pos:column="9">(<argument><expr><literal type="number" pos:line="12" pos:column="10">0<pos:position pos:line="12" pos:column="11"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="12"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="13"/></expr_stmt>
}<pos:position pos:line="13" pos:column="2"/></block></function></unit>
