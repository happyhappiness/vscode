<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_107_rsync-3.0.9.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">read_msg_fd<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name pos:line="1" pos:column="25">void<pos:position pos:line="1" pos:column="29"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="30"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">char<pos:position pos:line="3" pos:column="13"/></name></type> <name><name pos:line="3" pos:column="14">buf<pos:position pos:line="3" pos:column="17"/></name><index pos:line="3" pos:column="17">[<expr><literal type="number" pos:line="3" pos:column="18">2048<pos:position pos:line="3" pos:column="22"/></literal></expr>]<pos:position pos:line="3" pos:column="23"/></index></name></decl>;<pos:position pos:line="3" pos:column="24"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">size_t<pos:position pos:line="4" pos:column="15"/></name></type> <name pos:line="4" pos:column="16">n<pos:position pos:line="4" pos:column="17"/></name></decl>;<pos:position pos:line="4" pos:column="18"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">file_list<pos:position pos:line="5" pos:column="25"/></name></name> <modifier pos:line="5" pos:column="26">*<pos:position pos:line="5" pos:column="27"/></modifier></type><name pos:line="5" pos:column="27">flist<pos:position pos:line="5" pos:column="32"/></name></decl>;<pos:position pos:line="5" pos:column="33"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">fd<pos:position pos:line="6" pos:column="15"/></name> <init pos:line="6" pos:column="16">= <expr><name pos:line="6" pos:column="18">msg_fd_in<pos:position pos:line="6" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">int<pos:position pos:line="7" pos:column="12"/></name></type> <name pos:line="7" pos:column="13">tag<pos:position pos:line="7" pos:column="16"/></name></decl>, <decl><type ref="prev"/><name pos:line="7" pos:column="18">len<pos:position pos:line="7" pos:column="21"/></name></decl>;<pos:position pos:line="7" pos:column="22"/></decl_stmt>

	<comment type="block" pos:line="9" pos:column="9">/* Temporarily disable msg_fd_in.  This is needed to avoid looping back
	 * to this routine from writefd_unbuffered(). */</comment>
	<expr_stmt><expr><name pos:line="11" pos:column="9">no_flush<pos:position pos:line="11" pos:column="17"/></name><operator pos:line="11" pos:column="17">++<pos:position pos:line="11" pos:column="19"/></operator></expr>;<pos:position pos:line="11" pos:column="20"/></expr_stmt>
	<expr_stmt><expr><name pos:line="12" pos:column="9">msg_fd_in<pos:position pos:line="12" pos:column="18"/></name> <operator pos:line="12" pos:column="19">=<pos:position pos:line="12" pos:column="20"/></operator> <operator pos:line="12" pos:column="21">-<pos:position pos:line="12" pos:column="22"/></operator><literal type="number" pos:line="12" pos:column="22">1<pos:position pos:line="12" pos:column="23"/></literal></expr>;<pos:position pos:line="12" pos:column="24"/></expr_stmt>
	<expr_stmt><expr><name pos:line="13" pos:column="9">defer_forwarding_messages<pos:position pos:line="13" pos:column="34"/></name><operator pos:line="13" pos:column="34">++<pos:position pos:line="13" pos:column="36"/></operator></expr>;<pos:position pos:line="13" pos:column="37"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="15" pos:column="9">readfd<pos:position pos:line="15" pos:column="15"/></name><argument_list pos:line="15" pos:column="15">(<argument><expr><name pos:line="15" pos:column="16">fd<pos:position pos:line="15" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="20">buf<pos:position pos:line="15" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="15" pos:column="25">4<pos:position pos:line="15" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="28"/></expr_stmt>
	<expr_stmt><expr><name pos:line="16" pos:column="9">tag<pos:position pos:line="16" pos:column="12"/></name> <operator pos:line="16" pos:column="13">=<pos:position pos:line="16" pos:column="14"/></operator> <call><name pos:line="16" pos:column="15">IVAL<pos:position pos:line="16" pos:column="19"/></name><argument_list pos:line="16" pos:column="19">(<argument><expr><name pos:line="16" pos:column="20">buf<pos:position pos:line="16" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="16" pos:column="25">0<pos:position pos:line="16" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="28"/></expr_stmt>

	<expr_stmt><expr><name pos:line="18" pos:column="9">len<pos:position pos:line="18" pos:column="12"/></name> <operator pos:line="18" pos:column="13">=<pos:position pos:line="18" pos:column="14"/></operator> <name pos:line="18" pos:column="15">tag<pos:position pos:line="18" pos:column="18"/></name> <operator pos:line="18" pos:column="19">&amp;<pos:position pos:line="18" pos:column="24"/></operator> <literal type="number" pos:line="18" pos:column="21">0xFFFFFF<pos:position pos:line="18" pos:column="29"/></literal></expr>;<pos:position pos:line="18" pos:column="30"/></expr_stmt>
	<expr_stmt><expr><name pos:line="19" pos:column="9">tag<pos:position pos:line="19" pos:column="12"/></name> <operator pos:line="19" pos:column="13">=<pos:position pos:line="19" pos:column="14"/></operator> <operator pos:line="19" pos:column="15">(<pos:position pos:line="19" pos:column="16"/></operator><name pos:line="19" pos:column="16">tag<pos:position pos:line="19" pos:column="19"/></name> <operator pos:line="19" pos:column="20">&gt;&gt;<pos:position pos:line="19" pos:column="25"/></operator> <literal type="number" pos:line="19" pos:column="23">24<pos:position pos:line="19" pos:column="25"/></literal><operator pos:line="19" pos:column="25">)<pos:position pos:line="19" pos:column="26"/></operator> <operator pos:line="19" pos:column="27">-<pos:position pos:line="19" pos:column="28"/></operator> <name pos:line="19" pos:column="29">MPLEX_BASE<pos:position pos:line="19" pos:column="39"/></name></expr>;<pos:position pos:line="19" pos:column="40"/></expr_stmt>

	<switch pos:line="21" pos:column="9">switch <condition pos:line="21" pos:column="16">(<expr><name pos:line="21" pos:column="17">tag<pos:position pos:line="21" pos:column="20"/></name></expr>)<pos:position pos:line="21" pos:column="21"/></condition> <block pos:line="21" pos:column="22">{
	<case pos:line="22" pos:column="9">case <expr><name pos:line="22" pos:column="14">MSG_DONE<pos:position pos:line="22" pos:column="22"/></name></expr>:<pos:position pos:line="22" pos:column="23"/></case>
		<if pos:line="23" pos:column="17">if <condition pos:line="23" pos:column="20">(<expr><name><name pos:line="23" pos:column="21">len<pos:position pos:line="23" pos:column="24"/></name> <argument_list type="generic" pos:line="23" pos:column="25">&lt; <argument><expr><literal type="number" pos:line="23" pos:column="27">0<pos:position pos:line="23" pos:column="28"/></literal> <operator pos:line="23" pos:column="29">||<pos:position pos:line="23" pos:column="31"/></operator> <name pos:line="23" pos:column="32">len<pos:position pos:line="23" pos:column="35"/></name></expr></argument> &gt;<pos:position pos:line="23" pos:column="40"/></argument_list></name> <literal type="number" pos:line="23" pos:column="38">1<pos:position pos:line="23" pos:column="39"/></literal> <operator pos:line="23" pos:column="40">||<pos:position pos:line="23" pos:column="42"/></operator> <operator pos:line="23" pos:column="43">!<pos:position pos:line="23" pos:column="44"/></operator><name pos:line="23" pos:column="44">am_generator<pos:position pos:line="23" pos:column="56"/></name></expr>)<pos:position pos:line="23" pos:column="57"/></condition><then pos:line="23" pos:column="57"> <block pos:line="23" pos:column="58">{
		  <label><name pos:line="24" pos:column="19">invalid_msg<pos:position pos:line="24" pos:column="30"/></name>:<pos:position pos:line="24" pos:column="31"/></label>
			<expr_stmt><expr><call><name pos:line="25" pos:column="25">rprintf<pos:position pos:line="25" pos:column="32"/></name><argument_list pos:line="25" pos:column="32">(<argument><expr><name pos:line="25" pos:column="33">FERROR<pos:position pos:line="25" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="25" pos:column="41">"invalid message %d:%d [%s%s]\n"<pos:position pos:line="25" pos:column="73"/></literal></expr></argument>,
				<argument><expr><name pos:line="26" pos:column="33">tag<pos:position pos:line="26" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="38">len<pos:position pos:line="26" pos:column="41"/></name></expr></argument>, <argument><expr><call><name pos:line="26" pos:column="43">who_am_i<pos:position pos:line="26" pos:column="51"/></name><argument_list pos:line="26" pos:column="51">()<pos:position pos:line="26" pos:column="53"/></argument_list></call></expr></argument>,
				<argument><expr><ternary><condition><expr><name pos:line="27" pos:column="33">inc_recurse<pos:position pos:line="27" pos:column="44"/></name></expr> ?<pos:position pos:line="27" pos:column="46"/></condition><then pos:line="27" pos:column="46"> <expr><literal type="string" pos:line="27" pos:column="47">"/inc"<pos:position pos:line="27" pos:column="53"/></literal></expr> <pos:position pos:line="27" pos:column="54"/></then><else pos:line="27" pos:column="54">: <expr><literal type="string" pos:line="27" pos:column="56">""<pos:position pos:line="27" pos:column="58"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="27" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="60"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="28" pos:column="25">exit_cleanup<pos:position pos:line="28" pos:column="37"/></name><argument_list pos:line="28" pos:column="37">(<argument><expr><name pos:line="28" pos:column="38">RERR_STREAMIO<pos:position pos:line="28" pos:column="51"/></name></expr></argument>)<pos:position pos:line="28" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="53"/></expr_stmt>
		}<pos:position pos:line="29" pos:column="18"/></block></then></if>
		<if pos:line="30" pos:column="17">if <condition pos:line="30" pos:column="20">(<expr><name pos:line="30" pos:column="21">len<pos:position pos:line="30" pos:column="24"/></name></expr>)<pos:position pos:line="30" pos:column="25"/></condition><then pos:line="30" pos:column="25"> <block pos:line="30" pos:column="26">{
			<expr_stmt><expr><call><name pos:line="31" pos:column="25">readfd<pos:position pos:line="31" pos:column="31"/></name><argument_list pos:line="31" pos:column="31">(<argument><expr><name pos:line="31" pos:column="32">fd<pos:position pos:line="31" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="36">buf<pos:position pos:line="31" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="41">len<pos:position pos:line="31" pos:column="44"/></name></expr></argument>)<pos:position pos:line="31" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="46"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="32" pos:column="25">stats<pos:position pos:line="32" pos:column="30"/></name><operator pos:line="32" pos:column="30">.<pos:position pos:line="32" pos:column="31"/></operator><name pos:line="32" pos:column="31">total_read<pos:position pos:line="32" pos:column="41"/></name></name> <operator pos:line="32" pos:column="42">=<pos:position pos:line="32" pos:column="43"/></operator> <call><name pos:line="32" pos:column="44">read_varlong<pos:position pos:line="32" pos:column="56"/></name><argument_list pos:line="32" pos:column="56">(<argument><expr><name pos:line="32" pos:column="57">fd<pos:position pos:line="32" pos:column="59"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="32" pos:column="61">3<pos:position pos:line="32" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="64"/></expr_stmt>
		}<pos:position pos:line="33" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name pos:line="34" pos:column="17">msgdone_cnt<pos:position pos:line="34" pos:column="28"/></name><operator pos:line="34" pos:column="28">++<pos:position pos:line="34" pos:column="30"/></operator></expr>;<pos:position pos:line="34" pos:column="31"/></expr_stmt>
		<break pos:line="35" pos:column="17">break;<pos:position pos:line="35" pos:column="23"/></break>
	<case pos:line="36" pos:column="9">case <expr><name pos:line="36" pos:column="14">MSG_REDO<pos:position pos:line="36" pos:column="22"/></name></expr>:<pos:position pos:line="36" pos:column="23"/></case>
		<if pos:line="37" pos:column="17">if <condition pos:line="37" pos:column="20">(<expr><name pos:line="37" pos:column="21">len<pos:position pos:line="37" pos:column="24"/></name> <operator pos:line="37" pos:column="25">!=<pos:position pos:line="37" pos:column="27"/></operator> <literal type="number" pos:line="37" pos:column="28">4<pos:position pos:line="37" pos:column="29"/></literal> <operator pos:line="37" pos:column="30">||<pos:position pos:line="37" pos:column="32"/></operator> <operator pos:line="37" pos:column="33">!<pos:position pos:line="37" pos:column="34"/></operator><name pos:line="37" pos:column="34">am_generator<pos:position pos:line="37" pos:column="46"/></name></expr>)<pos:position pos:line="37" pos:column="47"/></condition><then pos:line="37" pos:column="47">
			<block type="pseudo"><goto pos:line="38" pos:column="25">goto <name pos:line="38" pos:column="30">invalid_msg<pos:position pos:line="38" pos:column="41"/></name>;<pos:position pos:line="38" pos:column="42"/></goto></block></then></if>
		<expr_stmt><expr><call><name pos:line="39" pos:column="17">readfd<pos:position pos:line="39" pos:column="23"/></name><argument_list pos:line="39" pos:column="23">(<argument><expr><name pos:line="39" pos:column="24">fd<pos:position pos:line="39" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="28">buf<pos:position pos:line="39" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="39" pos:column="33">4<pos:position pos:line="39" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="36"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="40" pos:column="17">got_flist_entry_status<pos:position pos:line="40" pos:column="39"/></name><argument_list pos:line="40" pos:column="39">(<argument><expr><name pos:line="40" pos:column="40">FES_REDO<pos:position pos:line="40" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="50">buf<pos:position pos:line="40" pos:column="53"/></name></expr></argument>)<pos:position pos:line="40" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="55"/></expr_stmt>
		<break pos:line="41" pos:column="17">break;<pos:position pos:line="41" pos:column="23"/></break>
	<case pos:line="42" pos:column="9">case <expr><name pos:line="42" pos:column="14">MSG_FLIST<pos:position pos:line="42" pos:column="23"/></name></expr>:<pos:position pos:line="42" pos:column="24"/></case>
		<if pos:line="43" pos:column="17">if <condition pos:line="43" pos:column="20">(<expr><name pos:line="43" pos:column="21">len<pos:position pos:line="43" pos:column="24"/></name> <operator pos:line="43" pos:column="25">!=<pos:position pos:line="43" pos:column="27"/></operator> <literal type="number" pos:line="43" pos:column="28">4<pos:position pos:line="43" pos:column="29"/></literal> <operator pos:line="43" pos:column="30">||<pos:position pos:line="43" pos:column="32"/></operator> <operator pos:line="43" pos:column="33">!<pos:position pos:line="43" pos:column="34"/></operator><name pos:line="43" pos:column="34">am_generator<pos:position pos:line="43" pos:column="46"/></name> <operator pos:line="43" pos:column="47">||<pos:position pos:line="43" pos:column="49"/></operator> <operator pos:line="43" pos:column="50">!<pos:position pos:line="43" pos:column="51"/></operator><name pos:line="43" pos:column="51">inc_recurse<pos:position pos:line="43" pos:column="62"/></name></expr>)<pos:position pos:line="43" pos:column="63"/></condition><then pos:line="43" pos:column="63">
			<block type="pseudo"><goto pos:line="44" pos:column="25">goto <name pos:line="44" pos:column="30">invalid_msg<pos:position pos:line="44" pos:column="41"/></name>;<pos:position pos:line="44" pos:column="42"/></goto></block></then></if>
		<expr_stmt><expr><call><name pos:line="45" pos:column="17">readfd<pos:position pos:line="45" pos:column="23"/></name><argument_list pos:line="45" pos:column="23">(<argument><expr><name pos:line="45" pos:column="24">fd<pos:position pos:line="45" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="28">buf<pos:position pos:line="45" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="45" pos:column="33">4<pos:position pos:line="45" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="45" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="36"/></expr_stmt>
		<comment type="block" pos:line="46" pos:column="17">/* Read extra file list from receiver. */</comment>
		<expr_stmt><expr><call><name pos:line="47" pos:column="17">assert<pos:position pos:line="47" pos:column="23"/></name><argument_list pos:line="47" pos:column="23">(<argument><expr><name pos:line="47" pos:column="24">iobuf_in<pos:position pos:line="47" pos:column="32"/></name> <operator pos:line="47" pos:column="33">!=<pos:position pos:line="47" pos:column="35"/></operator> <name pos:line="47" pos:column="36">NULL<pos:position pos:line="47" pos:column="40"/></name></expr></argument>)<pos:position pos:line="47" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="42"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="48" pos:column="17">assert<pos:position pos:line="48" pos:column="23"/></name><argument_list pos:line="48" pos:column="23">(<argument><expr><name pos:line="48" pos:column="24">iobuf_f_in<pos:position pos:line="48" pos:column="34"/></name> <operator pos:line="48" pos:column="35">==<pos:position pos:line="48" pos:column="37"/></operator> <name pos:line="48" pos:column="38">fd<pos:position pos:line="48" pos:column="40"/></name></expr></argument>)<pos:position pos:line="48" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="42"/></expr_stmt>
		<if pos:line="49" pos:column="17">if <condition pos:line="49" pos:column="20">(<expr><name pos:line="49" pos:column="21">verbose<pos:position pos:line="49" pos:column="28"/></name> <operator pos:line="49" pos:column="29">&gt;<pos:position pos:line="49" pos:column="33"/></operator> <literal type="number" pos:line="49" pos:column="31">3<pos:position pos:line="49" pos:column="32"/></literal></expr>)<pos:position pos:line="49" pos:column="33"/></condition><then pos:line="49" pos:column="33"> <block pos:line="49" pos:column="34">{
			<expr_stmt><expr><call><name pos:line="50" pos:column="25">rprintf<pos:position pos:line="50" pos:column="32"/></name><argument_list pos:line="50" pos:column="32">(<argument><expr><name pos:line="50" pos:column="33">FINFO<pos:position pos:line="50" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="50" pos:column="40">"[%s] receiving flist for dir %d\n"<pos:position pos:line="50" pos:column="75"/></literal></expr></argument>,
				<argument><expr><call><name pos:line="51" pos:column="33">who_am_i<pos:position pos:line="51" pos:column="41"/></name><argument_list pos:line="51" pos:column="41">()<pos:position pos:line="51" pos:column="43"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="51" pos:column="45">IVAL<pos:position pos:line="51" pos:column="49"/></name><argument_list pos:line="51" pos:column="49">(<argument><expr><name pos:line="51" pos:column="50">buf<pos:position pos:line="51" pos:column="53"/></name></expr></argument>,<argument><expr><literal type="number" pos:line="51" pos:column="54">0<pos:position pos:line="51" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="51" pos:column="56"/></argument_list></call></expr></argument>)<pos:position pos:line="51" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="58"/></expr_stmt>
		}<pos:position pos:line="52" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name pos:line="53" pos:column="17">flist<pos:position pos:line="53" pos:column="22"/></name> <operator pos:line="53" pos:column="23">=<pos:position pos:line="53" pos:column="24"/></operator> <call><name pos:line="53" pos:column="25">recv_file_list<pos:position pos:line="53" pos:column="39"/></name><argument_list pos:line="53" pos:column="39">(<argument><expr><name pos:line="53" pos:column="40">fd<pos:position pos:line="53" pos:column="42"/></name></expr></argument>)<pos:position pos:line="53" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="44"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="54" pos:column="17">flist<pos:position pos:line="54" pos:column="22"/></name><operator pos:line="54" pos:column="22">-&gt;<pos:position pos:line="54" pos:column="27"/></operator><name pos:line="54" pos:column="24">parent_ndx<pos:position pos:line="54" pos:column="34"/></name></name> <operator pos:line="54" pos:column="35">=<pos:position pos:line="54" pos:column="36"/></operator> <call><name pos:line="54" pos:column="37">IVAL<pos:position pos:line="54" pos:column="41"/></name><argument_list pos:line="54" pos:column="41">(<argument><expr><name pos:line="54" pos:column="42">buf<pos:position pos:line="54" pos:column="45"/></name></expr></argument>,<argument><expr><literal type="number" pos:line="54" pos:column="46">0<pos:position pos:line="54" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="54" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="49"/></expr_stmt>
<cpp:ifdef pos:line="55" pos:column="1">#<cpp:directive pos:line="55" pos:column="2">ifdef<pos:position pos:line="55" pos:column="7"/></cpp:directive> <name pos:line="55" pos:column="8">SUPPORT_HARD_LINKS<pos:position pos:line="55" pos:column="26"/></name></cpp:ifdef>
		<if pos:line="56" pos:column="17">if <condition pos:line="56" pos:column="20">(<expr><name pos:line="56" pos:column="21">preserve_hard_links<pos:position pos:line="56" pos:column="40"/></name></expr>)<pos:position pos:line="56" pos:column="41"/></condition><then pos:line="56" pos:column="41">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="57" pos:column="25">match_hard_links<pos:position pos:line="57" pos:column="41"/></name><argument_list pos:line="57" pos:column="41">(<argument><expr><name pos:line="57" pos:column="42">flist<pos:position pos:line="57" pos:column="47"/></name></expr></argument>)<pos:position pos:line="57" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="49"/></expr_stmt></block></then></if>
<cpp:endif pos:line="58" pos:column="1">#<cpp:directive pos:line="58" pos:column="2">endif<pos:position pos:line="58" pos:column="7"/></cpp:directive></cpp:endif>
		<break pos:line="59" pos:column="17">break;<pos:position pos:line="59" pos:column="23"/></break>
	<case pos:line="60" pos:column="9">case <expr><name pos:line="60" pos:column="14">MSG_FLIST_EOF<pos:position pos:line="60" pos:column="27"/></name></expr>:<pos:position pos:line="60" pos:column="28"/></case>
		<if pos:line="61" pos:column="17">if <condition pos:line="61" pos:column="20">(<expr><name pos:line="61" pos:column="21">len<pos:position pos:line="61" pos:column="24"/></name> <operator pos:line="61" pos:column="25">!=<pos:position pos:line="61" pos:column="27"/></operator> <literal type="number" pos:line="61" pos:column="28">0<pos:position pos:line="61" pos:column="29"/></literal> <operator pos:line="61" pos:column="30">||<pos:position pos:line="61" pos:column="32"/></operator> <operator pos:line="61" pos:column="33">!<pos:position pos:line="61" pos:column="34"/></operator><name pos:line="61" pos:column="34">am_generator<pos:position pos:line="61" pos:column="46"/></name> <operator pos:line="61" pos:column="47">||<pos:position pos:line="61" pos:column="49"/></operator> <operator pos:line="61" pos:column="50">!<pos:position pos:line="61" pos:column="51"/></operator><name pos:line="61" pos:column="51">inc_recurse<pos:position pos:line="61" pos:column="62"/></name></expr>)<pos:position pos:line="61" pos:column="63"/></condition><then pos:line="61" pos:column="63">
			<block type="pseudo"><goto pos:line="62" pos:column="25">goto <name pos:line="62" pos:column="30">invalid_msg<pos:position pos:line="62" pos:column="41"/></name>;<pos:position pos:line="62" pos:column="42"/></goto></block></then></if>
		<expr_stmt><expr><name pos:line="63" pos:column="17">flist_eof<pos:position pos:line="63" pos:column="26"/></name> <operator pos:line="63" pos:column="27">=<pos:position pos:line="63" pos:column="28"/></operator> <literal type="number" pos:line="63" pos:column="29">1<pos:position pos:line="63" pos:column="30"/></literal></expr>;<pos:position pos:line="63" pos:column="31"/></expr_stmt>
		<break pos:line="64" pos:column="17">break;<pos:position pos:line="64" pos:column="23"/></break>
	<case pos:line="65" pos:column="9">case <expr><name pos:line="65" pos:column="14">MSG_IO_ERROR<pos:position pos:line="65" pos:column="26"/></name></expr>:<pos:position pos:line="65" pos:column="27"/></case>
		<if pos:line="66" pos:column="17">if <condition pos:line="66" pos:column="20">(<expr><name pos:line="66" pos:column="21">len<pos:position pos:line="66" pos:column="24"/></name> <operator pos:line="66" pos:column="25">!=<pos:position pos:line="66" pos:column="27"/></operator> <literal type="number" pos:line="66" pos:column="28">4<pos:position pos:line="66" pos:column="29"/></literal></expr>)<pos:position pos:line="66" pos:column="30"/></condition><then pos:line="66" pos:column="30">
			<block type="pseudo"><goto pos:line="67" pos:column="25">goto <name pos:line="67" pos:column="30">invalid_msg<pos:position pos:line="67" pos:column="41"/></name>;<pos:position pos:line="67" pos:column="42"/></goto></block></then></if>
		<expr_stmt><expr><call><name pos:line="68" pos:column="17">readfd<pos:position pos:line="68" pos:column="23"/></name><argument_list pos:line="68" pos:column="23">(<argument><expr><name pos:line="68" pos:column="24">fd<pos:position pos:line="68" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="68" pos:column="28">buf<pos:position pos:line="68" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="68" pos:column="33">len<pos:position pos:line="68" pos:column="36"/></name></expr></argument>)<pos:position pos:line="68" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="38"/></expr_stmt>
		<expr_stmt><expr><name pos:line="69" pos:column="17">io_error<pos:position pos:line="69" pos:column="25"/></name> <operator pos:line="69" pos:column="26">|=<pos:position pos:line="69" pos:column="28"/></operator> <call><name pos:line="69" pos:column="29">IVAL<pos:position pos:line="69" pos:column="33"/></name><argument_list pos:line="69" pos:column="33">(<argument><expr><name pos:line="69" pos:column="34">buf<pos:position pos:line="69" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="69" pos:column="39">0<pos:position pos:line="69" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="69" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="42"/></expr_stmt>
		<break pos:line="70" pos:column="17">break;<pos:position pos:line="70" pos:column="23"/></break>
	<case pos:line="71" pos:column="9">case <expr><name pos:line="71" pos:column="14">MSG_DELETED<pos:position pos:line="71" pos:column="25"/></name></expr>:<pos:position pos:line="71" pos:column="26"/></case>
		<if pos:line="72" pos:column="17">if <condition pos:line="72" pos:column="20">(<expr><name pos:line="72" pos:column="21">len<pos:position pos:line="72" pos:column="24"/></name> <operator pos:line="72" pos:column="25">&gt;=<pos:position pos:line="72" pos:column="30"/></operator> <operator pos:line="72" pos:column="28">(<pos:position pos:line="72" pos:column="29"/></operator><name pos:line="72" pos:column="29">int<pos:position pos:line="72" pos:column="32"/></name><operator pos:line="72" pos:column="32">)<pos:position pos:line="72" pos:column="33"/></operator><sizeof pos:line="72" pos:column="33">sizeof <name pos:line="72" pos:column="40">buf<pos:position pos:line="72" pos:column="43"/></name></sizeof> <operator pos:line="72" pos:column="44">||<pos:position pos:line="72" pos:column="46"/></operator> <operator pos:line="72" pos:column="47">!<pos:position pos:line="72" pos:column="48"/></operator><name pos:line="72" pos:column="48">am_generator<pos:position pos:line="72" pos:column="60"/></name></expr>)<pos:position pos:line="72" pos:column="61"/></condition><then pos:line="72" pos:column="61">
			<block type="pseudo"><goto pos:line="73" pos:column="25">goto <name pos:line="73" pos:column="30">invalid_msg<pos:position pos:line="73" pos:column="41"/></name>;<pos:position pos:line="73" pos:column="42"/></goto></block></then></if>
		<expr_stmt><expr><call><name pos:line="74" pos:column="17">readfd<pos:position pos:line="74" pos:column="23"/></name><argument_list pos:line="74" pos:column="23">(<argument><expr><name pos:line="74" pos:column="24">fd<pos:position pos:line="74" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="74" pos:column="28">buf<pos:position pos:line="74" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="74" pos:column="33">len<pos:position pos:line="74" pos:column="36"/></name></expr></argument>)<pos:position pos:line="74" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="38"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="75" pos:column="17">send_msg<pos:position pos:line="75" pos:column="25"/></name><argument_list pos:line="75" pos:column="25">(<argument><expr><name pos:line="75" pos:column="26">MSG_DELETED<pos:position pos:line="75" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="75" pos:column="39">buf<pos:position pos:line="75" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="75" pos:column="44">len<pos:position pos:line="75" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="75" pos:column="49">1<pos:position pos:line="75" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="75" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="52"/></expr_stmt>
		<break pos:line="76" pos:column="17">break;<pos:position pos:line="76" pos:column="23"/></break>
	<case pos:line="77" pos:column="9">case <expr><name pos:line="77" pos:column="14">MSG_SUCCESS<pos:position pos:line="77" pos:column="25"/></name></expr>:<pos:position pos:line="77" pos:column="26"/></case>
		<if pos:line="78" pos:column="17">if <condition pos:line="78" pos:column="20">(<expr><name pos:line="78" pos:column="21">len<pos:position pos:line="78" pos:column="24"/></name> <operator pos:line="78" pos:column="25">!=<pos:position pos:line="78" pos:column="27"/></operator> <literal type="number" pos:line="78" pos:column="28">4<pos:position pos:line="78" pos:column="29"/></literal> <operator pos:line="78" pos:column="30">||<pos:position pos:line="78" pos:column="32"/></operator> <operator pos:line="78" pos:column="33">!<pos:position pos:line="78" pos:column="34"/></operator><name pos:line="78" pos:column="34">am_generator<pos:position pos:line="78" pos:column="46"/></name></expr>)<pos:position pos:line="78" pos:column="47"/></condition><then pos:line="78" pos:column="47">
			<block type="pseudo"><goto pos:line="79" pos:column="25">goto <name pos:line="79" pos:column="30">invalid_msg<pos:position pos:line="79" pos:column="41"/></name>;<pos:position pos:line="79" pos:column="42"/></goto></block></then></if>
		<expr_stmt><expr><call><name pos:line="80" pos:column="17">readfd<pos:position pos:line="80" pos:column="23"/></name><argument_list pos:line="80" pos:column="23">(<argument><expr><name pos:line="80" pos:column="24">fd<pos:position pos:line="80" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="80" pos:column="28">buf<pos:position pos:line="80" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="80" pos:column="33">4<pos:position pos:line="80" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="80" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="36"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="81" pos:column="17">got_flist_entry_status<pos:position pos:line="81" pos:column="39"/></name><argument_list pos:line="81" pos:column="39">(<argument><expr><name pos:line="81" pos:column="40">FES_SUCCESS<pos:position pos:line="81" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="81" pos:column="53">buf<pos:position pos:line="81" pos:column="56"/></name></expr></argument>)<pos:position pos:line="81" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="58"/></expr_stmt>
		<break pos:line="82" pos:column="17">break;<pos:position pos:line="82" pos:column="23"/></break>
	<case pos:line="83" pos:column="9">case <expr><name pos:line="83" pos:column="14">MSG_NO_SEND<pos:position pos:line="83" pos:column="25"/></name></expr>:<pos:position pos:line="83" pos:column="26"/></case>
		<if pos:line="84" pos:column="17">if <condition pos:line="84" pos:column="20">(<expr><name pos:line="84" pos:column="21">len<pos:position pos:line="84" pos:column="24"/></name> <operator pos:line="84" pos:column="25">!=<pos:position pos:line="84" pos:column="27"/></operator> <literal type="number" pos:line="84" pos:column="28">4<pos:position pos:line="84" pos:column="29"/></literal> <operator pos:line="84" pos:column="30">||<pos:position pos:line="84" pos:column="32"/></operator> <operator pos:line="84" pos:column="33">!<pos:position pos:line="84" pos:column="34"/></operator><name pos:line="84" pos:column="34">am_generator<pos:position pos:line="84" pos:column="46"/></name></expr>)<pos:position pos:line="84" pos:column="47"/></condition><then pos:line="84" pos:column="47">
			<block type="pseudo"><goto pos:line="85" pos:column="25">goto <name pos:line="85" pos:column="30">invalid_msg<pos:position pos:line="85" pos:column="41"/></name>;<pos:position pos:line="85" pos:column="42"/></goto></block></then></if>
		<expr_stmt><expr><call><name pos:line="86" pos:column="17">readfd<pos:position pos:line="86" pos:column="23"/></name><argument_list pos:line="86" pos:column="23">(<argument><expr><name pos:line="86" pos:column="24">fd<pos:position pos:line="86" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="86" pos:column="28">buf<pos:position pos:line="86" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="86" pos:column="33">4<pos:position pos:line="86" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="86" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="36"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="87" pos:column="17">got_flist_entry_status<pos:position pos:line="87" pos:column="39"/></name><argument_list pos:line="87" pos:column="39">(<argument><expr><name pos:line="87" pos:column="40">FES_NO_SEND<pos:position pos:line="87" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="87" pos:column="53">buf<pos:position pos:line="87" pos:column="56"/></name></expr></argument>)<pos:position pos:line="87" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="58"/></expr_stmt>
		<break pos:line="88" pos:column="17">break;<pos:position pos:line="88" pos:column="23"/></break>
	<case pos:line="89" pos:column="9">case <expr><name pos:line="89" pos:column="14">MSG_ERROR_SOCKET<pos:position pos:line="89" pos:column="30"/></name></expr>:<pos:position pos:line="89" pos:column="31"/></case>
	<case pos:line="90" pos:column="9">case <expr><name pos:line="90" pos:column="14">MSG_ERROR_UTF8<pos:position pos:line="90" pos:column="28"/></name></expr>:<pos:position pos:line="90" pos:column="29"/></case>
	<case pos:line="91" pos:column="9">case <expr><name pos:line="91" pos:column="14">MSG_CLIENT<pos:position pos:line="91" pos:column="24"/></name></expr>:<pos:position pos:line="91" pos:column="25"/></case>
		<if pos:line="92" pos:column="17">if <condition pos:line="92" pos:column="20">(<expr><operator pos:line="92" pos:column="21">!<pos:position pos:line="92" pos:column="22"/></operator><name pos:line="92" pos:column="22">am_generator<pos:position pos:line="92" pos:column="34"/></name></expr>)<pos:position pos:line="92" pos:column="35"/></condition><then pos:line="92" pos:column="35">
			<block type="pseudo"><goto pos:line="93" pos:column="25">goto <name pos:line="93" pos:column="30">invalid_msg<pos:position pos:line="93" pos:column="41"/></name>;<pos:position pos:line="93" pos:column="42"/></goto></block></then></if>
		<if pos:line="94" pos:column="17">if <condition pos:line="94" pos:column="20">(<expr><name pos:line="94" pos:column="21">tag<pos:position pos:line="94" pos:column="24"/></name> <operator pos:line="94" pos:column="25">==<pos:position pos:line="94" pos:column="27"/></operator> <name pos:line="94" pos:column="28">MSG_ERROR_SOCKET<pos:position pos:line="94" pos:column="44"/></name></expr>)<pos:position pos:line="94" pos:column="45"/></condition><then pos:line="94" pos:column="45">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="95" pos:column="25">io_end_multiplex_out<pos:position pos:line="95" pos:column="45"/></name><argument_list pos:line="95" pos:column="45">()<pos:position pos:line="95" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="48"/></expr_stmt></block></then></if>
		<comment type="block" pos:line="96" pos:column="17">/* FALL THROUGH */</comment>
	<case pos:line="97" pos:column="9">case <expr><name pos:line="97" pos:column="14">MSG_INFO<pos:position pos:line="97" pos:column="22"/></name></expr>:<pos:position pos:line="97" pos:column="23"/></case>
	<case pos:line="98" pos:column="9">case <expr><name pos:line="98" pos:column="14">MSG_ERROR<pos:position pos:line="98" pos:column="23"/></name></expr>:<pos:position pos:line="98" pos:column="24"/></case>
	<case pos:line="99" pos:column="9">case <expr><name pos:line="99" pos:column="14">MSG_ERROR_XFER<pos:position pos:line="99" pos:column="28"/></name></expr>:<pos:position pos:line="99" pos:column="29"/></case>
	<case pos:line="100" pos:column="9">case <expr><name pos:line="100" pos:column="14">MSG_WARNING<pos:position pos:line="100" pos:column="25"/></name></expr>:<pos:position pos:line="100" pos:column="26"/></case>
	<case pos:line="101" pos:column="9">case <expr><name pos:line="101" pos:column="14">MSG_LOG<pos:position pos:line="101" pos:column="21"/></name></expr>:<pos:position pos:line="101" pos:column="22"/></case>
		<while pos:line="102" pos:column="17">while <condition pos:line="102" pos:column="23">(<expr><name pos:line="102" pos:column="24">len<pos:position pos:line="102" pos:column="27"/></name></expr>)<pos:position pos:line="102" pos:column="28"/></condition> <block pos:line="102" pos:column="29">{
			<expr_stmt><expr><name pos:line="103" pos:column="25">n<pos:position pos:line="103" pos:column="26"/></name> <operator pos:line="103" pos:column="27">=<pos:position pos:line="103" pos:column="28"/></operator> <name pos:line="103" pos:column="29">len<pos:position pos:line="103" pos:column="32"/></name></expr>;<pos:position pos:line="103" pos:column="33"/></expr_stmt>
			<if pos:line="104" pos:column="25">if <condition pos:line="104" pos:column="28">(<expr><name pos:line="104" pos:column="29">n<pos:position pos:line="104" pos:column="30"/></name> <operator pos:line="104" pos:column="31">&gt;=<pos:position pos:line="104" pos:column="36"/></operator> <sizeof pos:line="104" pos:column="34">sizeof <name pos:line="104" pos:column="41">buf<pos:position pos:line="104" pos:column="44"/></name></sizeof></expr>)<pos:position pos:line="104" pos:column="45"/></condition><then pos:line="104" pos:column="45">
				<block type="pseudo"><expr_stmt><expr><name pos:line="105" pos:column="33">n<pos:position pos:line="105" pos:column="34"/></name> <operator pos:line="105" pos:column="35">=<pos:position pos:line="105" pos:column="36"/></operator> <sizeof pos:line="105" pos:column="37">sizeof <name pos:line="105" pos:column="44">buf<pos:position pos:line="105" pos:column="47"/></name></sizeof> <operator pos:line="105" pos:column="48">-<pos:position pos:line="105" pos:column="49"/></operator> <literal type="number" pos:line="105" pos:column="50">1<pos:position pos:line="105" pos:column="51"/></literal></expr>;<pos:position pos:line="105" pos:column="52"/></expr_stmt></block></then></if>
			<expr_stmt><expr><call><name pos:line="106" pos:column="25">readfd<pos:position pos:line="106" pos:column="31"/></name><argument_list pos:line="106" pos:column="31">(<argument><expr><name pos:line="106" pos:column="32">fd<pos:position pos:line="106" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="106" pos:column="36">buf<pos:position pos:line="106" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="106" pos:column="41">n<pos:position pos:line="106" pos:column="42"/></name></expr></argument>)<pos:position pos:line="106" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="106" pos:column="44"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="107" pos:column="25">rwrite<pos:position pos:line="107" pos:column="31"/></name><argument_list pos:line="107" pos:column="31">(<argument><expr><operator pos:line="107" pos:column="32">(<pos:position pos:line="107" pos:column="33"/></operator>enum <name pos:line="107" pos:column="38">logcode<pos:position pos:line="107" pos:column="45"/></name><operator pos:line="107" pos:column="45">)<pos:position pos:line="107" pos:column="46"/></operator><name pos:line="107" pos:column="46">tag<pos:position pos:line="107" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="107" pos:column="51">buf<pos:position pos:line="107" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="107" pos:column="56">n<pos:position pos:line="107" pos:column="57"/></name></expr></argument>, <argument><expr><operator pos:line="107" pos:column="59">!<pos:position pos:line="107" pos:column="60"/></operator><name pos:line="107" pos:column="60">am_generator<pos:position pos:line="107" pos:column="72"/></name></expr></argument>)<pos:position pos:line="107" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="107" pos:column="74"/></expr_stmt>
			<expr_stmt><expr><name pos:line="108" pos:column="25">len<pos:position pos:line="108" pos:column="28"/></name> <operator pos:line="108" pos:column="29">-=<pos:position pos:line="108" pos:column="31"/></operator> <name pos:line="108" pos:column="32">n<pos:position pos:line="108" pos:column="33"/></name></expr>;<pos:position pos:line="108" pos:column="34"/></expr_stmt>
		}<pos:position pos:line="109" pos:column="18"/></block></while>
		<break pos:line="110" pos:column="17">break;<pos:position pos:line="110" pos:column="23"/></break>
	<default pos:line="111" pos:column="9">default:<pos:position pos:line="111" pos:column="17"/></default>
		<expr_stmt><expr><call><name pos:line="112" pos:column="17">rprintf<pos:position pos:line="112" pos:column="24"/></name><argument_list pos:line="112" pos:column="24">(<argument><expr><name pos:line="112" pos:column="25">FERROR<pos:position pos:line="112" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="112" pos:column="33">"unknown message %d:%d [%s]\n"<pos:position pos:line="112" pos:column="63"/></literal></expr></argument>,
			<argument><expr><name pos:line="113" pos:column="25">tag<pos:position pos:line="113" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="113" pos:column="30">len<pos:position pos:line="113" pos:column="33"/></name></expr></argument>, <argument><expr><call><name pos:line="113" pos:column="35">who_am_i<pos:position pos:line="113" pos:column="43"/></name><argument_list pos:line="113" pos:column="43">()<pos:position pos:line="113" pos:column="45"/></argument_list></call></expr></argument>)<pos:position pos:line="113" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="113" pos:column="47"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="114" pos:column="17">exit_cleanup<pos:position pos:line="114" pos:column="29"/></name><argument_list pos:line="114" pos:column="29">(<argument><expr><name pos:line="114" pos:column="30">RERR_STREAMIO<pos:position pos:line="114" pos:column="43"/></name></expr></argument>)<pos:position pos:line="114" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="114" pos:column="45"/></expr_stmt>
	}<pos:position pos:line="115" pos:column="10"/></block></switch>

	<expr_stmt><expr><name pos:line="117" pos:column="9">no_flush<pos:position pos:line="117" pos:column="17"/></name><operator pos:line="117" pos:column="17">--<pos:position pos:line="117" pos:column="19"/></operator></expr>;<pos:position pos:line="117" pos:column="20"/></expr_stmt>
	<expr_stmt><expr><name pos:line="118" pos:column="9">msg_fd_in<pos:position pos:line="118" pos:column="18"/></name> <operator pos:line="118" pos:column="19">=<pos:position pos:line="118" pos:column="20"/></operator> <name pos:line="118" pos:column="21">fd<pos:position pos:line="118" pos:column="23"/></name></expr>;<pos:position pos:line="118" pos:column="24"/></expr_stmt>
	<if pos:line="119" pos:column="9">if <condition pos:line="119" pos:column="12">(<expr><operator pos:line="119" pos:column="13">!<pos:position pos:line="119" pos:column="14"/></operator><operator pos:line="119" pos:column="14">--<pos:position pos:line="119" pos:column="16"/></operator><name pos:line="119" pos:column="16">defer_forwarding_messages<pos:position pos:line="119" pos:column="41"/></name> <operator pos:line="119" pos:column="42">&amp;&amp;<pos:position pos:line="119" pos:column="52"/></operator> <operator pos:line="119" pos:column="45">!<pos:position pos:line="119" pos:column="46"/></operator><name pos:line="119" pos:column="46">no_flush<pos:position pos:line="119" pos:column="54"/></name></expr>)<pos:position pos:line="119" pos:column="55"/></condition><then pos:line="119" pos:column="55">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="120" pos:column="17">msg_flush<pos:position pos:line="120" pos:column="26"/></name><argument_list pos:line="120" pos:column="26">()<pos:position pos:line="120" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="120" pos:column="29"/></expr_stmt></block></then></if>
}<pos:position pos:line="121" pos:column="2"/></block></function></unit>
