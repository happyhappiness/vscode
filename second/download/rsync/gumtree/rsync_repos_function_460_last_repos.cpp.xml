<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_460_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">do_open<pos:position pos:line="1" pos:column="12"/></name><parameter_list pos:line="1" pos:column="12">(<parameter><decl><type><specifier pos:line="1" pos:column="13">const<pos:position pos:line="1" pos:column="18"/></specifier> <name pos:line="1" pos:column="19">char<pos:position pos:line="1" pos:column="23"/></name> <modifier pos:line="1" pos:column="24">*<pos:position pos:line="1" pos:column="25"/></modifier></type><name pos:line="1" pos:column="25">pathname<pos:position pos:line="1" pos:column="33"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="35">int<pos:position pos:line="1" pos:column="38"/></name></type> <name pos:line="1" pos:column="39">flags<pos:position pos:line="1" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="46">mode_t<pos:position pos:line="1" pos:column="52"/></name></type> <name pos:line="1" pos:column="53">mode<pos:position pos:line="1" pos:column="57"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="58"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<if pos:line="3" pos:column="9">if <condition pos:line="3" pos:column="12">(<expr><name pos:line="3" pos:column="13">flags<pos:position pos:line="3" pos:column="18"/></name> <operator pos:line="3" pos:column="19">!=<pos:position pos:line="3" pos:column="21"/></operator> <name pos:line="3" pos:column="22">O_RDONLY<pos:position pos:line="3" pos:column="30"/></name></expr>)<pos:position pos:line="3" pos:column="31"/></condition><then pos:line="3" pos:column="31"> <block pos:line="3" pos:column="32">{
		<expr_stmt><expr><call><name pos:line="4" pos:column="17">RETURN_ERROR_IF<pos:position pos:line="4" pos:column="32"/></name><argument_list pos:line="4" pos:column="32">(<argument><expr><name pos:line="4" pos:column="33">dry_run<pos:position pos:line="4" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="4" pos:column="42">0<pos:position pos:line="4" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="4" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="45"/></expr_stmt>
		<expr_stmt><expr><name pos:line="5" pos:column="17">RETURN_ERROR_IF_RO_OR_LO<pos:position pos:line="5" pos:column="41"/></name></expr>;<pos:position pos:line="5" pos:column="42"/></expr_stmt>
	}<pos:position pos:line="6" pos:column="10"/></block></then></if>

	<return pos:line="8" pos:column="9">return <expr><call><name pos:line="8" pos:column="16">open<pos:position pos:line="8" pos:column="20"/></name><argument_list pos:line="8" pos:column="20">(<argument><expr><name pos:line="8" pos:column="21">pathname<pos:position pos:line="8" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="31">flags<pos:position pos:line="8" pos:column="36"/></name> <operator pos:line="8" pos:column="37">|<pos:position pos:line="8" pos:column="38"/></operator> <name pos:line="8" pos:column="39">O_BINARY<pos:position pos:line="8" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="49">mode<pos:position pos:line="8" pos:column="53"/></name></expr></argument>)<pos:position pos:line="8" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="55"/></return>
}<pos:position pos:line="9" pos:column="2"/></block></function></unit>
