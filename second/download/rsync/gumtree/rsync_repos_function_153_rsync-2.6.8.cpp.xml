<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_153_rsync-2.6.8.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">read_stream_flags<pos:position pos:line="1" pos:column="23"/></name><parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><name pos:line="1" pos:column="24">int<pos:position pos:line="1" pos:column="27"/></name></type> <name pos:line="1" pos:column="28">fd<pos:position pos:line="1" pos:column="30"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="31"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">i<pos:position pos:line="3" pos:column="14"/></name></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="16">flags<pos:position pos:line="3" pos:column="21"/></name></decl>;<pos:position pos:line="3" pos:column="22"/></decl_stmt>

	<if pos:line="5" pos:column="9">if <condition pos:line="5" pos:column="12">(<expr><name pos:line="5" pos:column="13">protocol_version<pos:position pos:line="5" pos:column="29"/></name> <operator pos:line="5" pos:column="30">&lt;<pos:position pos:line="5" pos:column="34"/></operator> <literal type="number" pos:line="5" pos:column="32">29<pos:position pos:line="5" pos:column="34"/></literal></expr>)<pos:position pos:line="5" pos:column="35"/></condition><then pos:line="5" pos:column="35">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="6" pos:column="17">flag_ptr<pos:position pos:line="6" pos:column="25"/></name><index pos:line="6" pos:column="25">[<expr><literal type="number" pos:line="6" pos:column="26">7<pos:position pos:line="6" pos:column="27"/></literal></expr>]<pos:position pos:line="6" pos:column="28"/></index></name> <operator pos:line="6" pos:column="29">=<pos:position pos:line="6" pos:column="30"/></operator> <name pos:line="6" pos:column="31">NULL<pos:position pos:line="6" pos:column="35"/></name></expr>;<pos:position pos:line="6" pos:column="36"/></expr_stmt></block></then></if>
	<for pos:line="7" pos:column="9">for <control pos:line="7" pos:column="13">(<init><expr><name pos:line="7" pos:column="14">i<pos:position pos:line="7" pos:column="15"/></name> <operator pos:line="7" pos:column="16">=<pos:position pos:line="7" pos:column="17"/></operator> <literal type="number" pos:line="7" pos:column="18">0<pos:position pos:line="7" pos:column="19"/></literal></expr><operator pos:line="7" pos:column="19">,<pos:position pos:line="7" pos:column="20"/></operator> <expr><name pos:line="7" pos:column="21">flags<pos:position pos:line="7" pos:column="26"/></name> <operator pos:line="7" pos:column="27">=<pos:position pos:line="7" pos:column="28"/></operator> <call><name pos:line="7" pos:column="29">read_int<pos:position pos:line="7" pos:column="37"/></name><argument_list pos:line="7" pos:column="37">(<argument><expr><name pos:line="7" pos:column="38">fd<pos:position pos:line="7" pos:column="40"/></name></expr></argument>)<pos:position pos:line="7" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="42"/></init> <condition><expr><name><name pos:line="7" pos:column="43">flag_ptr<pos:position pos:line="7" pos:column="51"/></name><index pos:line="7" pos:column="51">[<expr><name pos:line="7" pos:column="52">i<pos:position pos:line="7" pos:column="53"/></name></expr>]<pos:position pos:line="7" pos:column="54"/></index></name></expr>;<pos:position pos:line="7" pos:column="55"/></condition> <incr><expr><name pos:line="7" pos:column="56">i<pos:position pos:line="7" pos:column="57"/></name><operator pos:line="7" pos:column="57">++<pos:position pos:line="7" pos:column="59"/></operator></expr></incr>)<pos:position pos:line="7" pos:column="60"/></control> <block pos:line="7" pos:column="61">{
		<decl_stmt><decl><type><name pos:line="8" pos:column="17">int<pos:position pos:line="8" pos:column="20"/></name></type> <name pos:line="8" pos:column="21">set<pos:position pos:line="8" pos:column="24"/></name> <init pos:line="8" pos:column="25">= <expr><ternary><condition><expr><name pos:line="8" pos:column="27">flags<pos:position pos:line="8" pos:column="32"/></name> <operator pos:line="8" pos:column="33">&amp;<pos:position pos:line="8" pos:column="38"/></operator> <operator pos:line="8" pos:column="35">(<pos:position pos:line="8" pos:column="36"/></operator><literal type="number" pos:line="8" pos:column="36">1<pos:position pos:line="8" pos:column="37"/></literal> <operator pos:line="8" pos:column="38">&lt;&lt;<pos:position pos:line="8" pos:column="46"/></operator> <name pos:line="8" pos:column="41">i<pos:position pos:line="8" pos:column="42"/></name><operator pos:line="8" pos:column="42">)<pos:position pos:line="8" pos:column="43"/></operator></expr> ?<pos:position pos:line="8" pos:column="45"/></condition><then pos:line="8" pos:column="45"> <expr><literal type="number" pos:line="8" pos:column="46">1<pos:position pos:line="8" pos:column="47"/></literal></expr> <pos:position pos:line="8" pos:column="48"/></then><else pos:line="8" pos:column="48">: <expr><literal type="number" pos:line="8" pos:column="50">0<pos:position pos:line="8" pos:column="51"/></literal></expr></else></ternary></expr></init></decl>;<pos:position pos:line="8" pos:column="52"/></decl_stmt>
		<if pos:line="9" pos:column="17">if <condition pos:line="9" pos:column="20">(<expr><operator pos:line="9" pos:column="21">*<pos:position pos:line="9" pos:column="22"/></operator><name><name pos:line="9" pos:column="22">flag_ptr<pos:position pos:line="9" pos:column="30"/></name><index pos:line="9" pos:column="30">[<expr><name pos:line="9" pos:column="31">i<pos:position pos:line="9" pos:column="32"/></name></expr>]<pos:position pos:line="9" pos:column="33"/></index></name> <operator pos:line="9" pos:column="34">!=<pos:position pos:line="9" pos:column="36"/></operator> <name pos:line="9" pos:column="37">set<pos:position pos:line="9" pos:column="40"/></name></expr>)<pos:position pos:line="9" pos:column="41"/></condition><then pos:line="9" pos:column="41"> <block pos:line="9" pos:column="42">{
			<if pos:line="10" pos:column="25">if <condition pos:line="10" pos:column="28">(<expr><name pos:line="10" pos:column="29">verbose<pos:position pos:line="10" pos:column="36"/></name></expr>)<pos:position pos:line="10" pos:column="37"/></condition><then pos:line="10" pos:column="37"> <block pos:line="10" pos:column="38">{
				<expr_stmt><expr><call><name pos:line="11" pos:column="33">rprintf<pos:position pos:line="11" pos:column="40"/></name><argument_list pos:line="11" pos:column="40">(<argument><expr><name pos:line="11" pos:column="41">FINFO<pos:position pos:line="11" pos:column="46"/></name></expr></argument>,
					<argument><expr><literal type="string" pos:line="12" pos:column="41">"%sing the %s option to match the batchfile.\n"<pos:position pos:line="12" pos:column="88"/></literal></expr></argument>,
					<argument><expr><ternary><condition><expr><name pos:line="13" pos:column="41">set<pos:position pos:line="13" pos:column="44"/></name></expr> ?<pos:position pos:line="13" pos:column="46"/></condition><then pos:line="13" pos:column="46"> <expr><literal type="string" pos:line="13" pos:column="47">"Sett"<pos:position pos:line="13" pos:column="53"/></literal></expr> <pos:position pos:line="13" pos:column="54"/></then><else pos:line="13" pos:column="54">: <expr><literal type="string" pos:line="13" pos:column="56">"Clear"<pos:position pos:line="13" pos:column="63"/></literal></expr></else></ternary></expr></argument>, <argument><expr><name><name pos:line="13" pos:column="65">flag_name<pos:position pos:line="13" pos:column="74"/></name><index pos:line="13" pos:column="74">[<expr><name pos:line="13" pos:column="75">i<pos:position pos:line="13" pos:column="76"/></name></expr>]<pos:position pos:line="13" pos:column="77"/></index></name></expr></argument>)<pos:position pos:line="13" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="79"/></expr_stmt>
			}<pos:position pos:line="14" pos:column="26"/></block></then></if>
			<expr_stmt><expr><operator pos:line="15" pos:column="25">*<pos:position pos:line="15" pos:column="26"/></operator><name><name pos:line="15" pos:column="26">flag_ptr<pos:position pos:line="15" pos:column="34"/></name><index pos:line="15" pos:column="34">[<expr><name pos:line="15" pos:column="35">i<pos:position pos:line="15" pos:column="36"/></name></expr>]<pos:position pos:line="15" pos:column="37"/></index></name> <operator pos:line="15" pos:column="38">=<pos:position pos:line="15" pos:column="39"/></operator> <name pos:line="15" pos:column="40">set<pos:position pos:line="15" pos:column="43"/></name></expr>;<pos:position pos:line="15" pos:column="44"/></expr_stmt>
		}<pos:position pos:line="16" pos:column="18"/></block></then></if>
	}<pos:position pos:line="17" pos:column="10"/></block></for>
	<if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><name pos:line="18" pos:column="13">protocol_version<pos:position pos:line="18" pos:column="29"/></name> <operator pos:line="18" pos:column="30">&lt;<pos:position pos:line="18" pos:column="34"/></operator> <literal type="number" pos:line="18" pos:column="32">29<pos:position pos:line="18" pos:column="34"/></literal></expr>)<pos:position pos:line="18" pos:column="35"/></condition><then pos:line="18" pos:column="35"> <block pos:line="18" pos:column="36">{
		<if pos:line="19" pos:column="17">if <condition pos:line="19" pos:column="20">(<expr><name pos:line="19" pos:column="21">recurse<pos:position pos:line="19" pos:column="28"/></name></expr>)<pos:position pos:line="19" pos:column="29"/></condition><then pos:line="19" pos:column="29">
			<block type="pseudo"><expr_stmt><expr><name pos:line="20" pos:column="25">xfer_dirs<pos:position pos:line="20" pos:column="34"/></name> <operator pos:line="20" pos:column="35">|=<pos:position pos:line="20" pos:column="37"/></operator> <literal type="number" pos:line="20" pos:column="38">1<pos:position pos:line="20" pos:column="39"/></literal></expr>;<pos:position pos:line="20" pos:column="40"/></expr_stmt></block></then>
		<elseif pos:line="21" pos:column="17">else <if pos:line="21" pos:column="22">if <condition pos:line="21" pos:column="25">(<expr><name pos:line="21" pos:column="26">xfer_dirs<pos:position pos:line="21" pos:column="35"/></name> <operator pos:line="21" pos:column="36">&lt;<pos:position pos:line="21" pos:column="40"/></operator> <literal type="number" pos:line="21" pos:column="38">2<pos:position pos:line="21" pos:column="39"/></literal></expr>)<pos:position pos:line="21" pos:column="40"/></condition><then pos:line="21" pos:column="40">
			<block type="pseudo"><expr_stmt><expr><name pos:line="22" pos:column="25">xfer_dirs<pos:position pos:line="22" pos:column="34"/></name> <operator pos:line="22" pos:column="35">=<pos:position pos:line="22" pos:column="36"/></operator> <literal type="number" pos:line="22" pos:column="37">0<pos:position pos:line="22" pos:column="38"/></literal></expr>;<pos:position pos:line="22" pos:column="39"/></expr_stmt></block></then></if></elseif></if>
	}<pos:position pos:line="23" pos:column="10"/></block></then></if>

	<if pos:line="25" pos:column="9">if <condition pos:line="25" pos:column="12">(<expr><name pos:line="25" pos:column="13">tweaked_compress_level<pos:position pos:line="25" pos:column="35"/></name> <operator pos:line="25" pos:column="36">==<pos:position pos:line="25" pos:column="38"/></operator> <literal type="number" pos:line="25" pos:column="39">0<pos:position pos:line="25" pos:column="40"/></literal> <operator pos:line="25" pos:column="41">||<pos:position pos:line="25" pos:column="43"/></operator> <name pos:line="25" pos:column="44">tweaked_compress_level<pos:position pos:line="25" pos:column="66"/></name> <operator pos:line="25" pos:column="67">==<pos:position pos:line="25" pos:column="69"/></operator> <literal type="number" pos:line="25" pos:column="70">2<pos:position pos:line="25" pos:column="71"/></literal></expr>)<pos:position pos:line="25" pos:column="72"/></condition><then pos:line="25" pos:column="72">
		<block type="pseudo"><expr_stmt><expr><name pos:line="26" pos:column="17">do_compression<pos:position pos:line="26" pos:column="31"/></name> <operator pos:line="26" pos:column="32">=<pos:position pos:line="26" pos:column="33"/></operator> <literal type="number" pos:line="26" pos:column="34">0<pos:position pos:line="26" pos:column="35"/></literal></expr>;<pos:position pos:line="26" pos:column="36"/></expr_stmt></block></then>
	<else pos:line="27" pos:column="9">else <block pos:line="27" pos:column="14">{
		<expr_stmt><expr><name pos:line="28" pos:column="17">do_compression<pos:position pos:line="28" pos:column="31"/></name> <operator pos:line="28" pos:column="32">=<pos:position pos:line="28" pos:column="33"/></operator> <literal type="number" pos:line="28" pos:column="34">1<pos:position pos:line="28" pos:column="35"/></literal></expr>;<pos:position pos:line="28" pos:column="36"/></expr_stmt>
		<expr_stmt><expr><name pos:line="29" pos:column="17">def_compress_level<pos:position pos:line="29" pos:column="35"/></name> <operator pos:line="29" pos:column="36">=<pos:position pos:line="29" pos:column="37"/></operator> <name pos:line="29" pos:column="38">tweaked_compress_level<pos:position pos:line="29" pos:column="60"/></name> <operator pos:line="29" pos:column="61">-<pos:position pos:line="29" pos:column="62"/></operator> <literal type="number" pos:line="29" pos:column="63">2<pos:position pos:line="29" pos:column="64"/></literal></expr>;<pos:position pos:line="29" pos:column="65"/></expr_stmt>
	}<pos:position pos:line="30" pos:column="10"/></block></else></if>
}<pos:position pos:line="31" pos:column="2"/></block></function></unit>
