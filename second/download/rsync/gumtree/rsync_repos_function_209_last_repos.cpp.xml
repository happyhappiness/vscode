<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_209_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">client_sockaddr<pos:position pos:line="1" pos:column="21"/></name><parameter_list pos:line="1" pos:column="21">(<parameter><decl><type><name pos:line="1" pos:column="22">int<pos:position pos:line="1" pos:column="25"/></name></type> <name pos:line="1" pos:column="26">fd<pos:position pos:line="1" pos:column="28"/></name></decl></parameter>,
		     <parameter><decl><type><name><name pos:line="2" pos:column="22">struct<pos:position pos:line="2" pos:column="28"/></name> <name pos:line="2" pos:column="29">sockaddr_storage<pos:position pos:line="2" pos:column="45"/></name></name> <modifier pos:line="2" pos:column="46">*<pos:position pos:line="2" pos:column="47"/></modifier></type><name pos:line="2" pos:column="47">ss<pos:position pos:line="2" pos:column="49"/></name></decl></parameter>,
		     <parameter><decl><type><name pos:line="3" pos:column="22">socklen_t<pos:position pos:line="3" pos:column="31"/></name> <modifier pos:line="3" pos:column="32">*<pos:position pos:line="3" pos:column="33"/></modifier></type><name pos:line="3" pos:column="33">ss_len<pos:position pos:line="3" pos:column="39"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="40"/></parameter_list>
<block pos:line="4" pos:column="1">{
	<expr_stmt><expr><call><name pos:line="5" pos:column="9">memset<pos:position pos:line="5" pos:column="15"/></name><argument_list pos:line="5" pos:column="15">(<argument><expr><name pos:line="5" pos:column="16">ss<pos:position pos:line="5" pos:column="18"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="5" pos:column="20">0<pos:position pos:line="5" pos:column="21"/></literal></expr></argument>, <argument><expr><sizeof pos:line="5" pos:column="23">sizeof <name><pos:position pos:line="5" pos:column="30"/></name></sizeof>*<name pos:line="5" pos:column="31">ss<pos:position pos:line="5" pos:column="33"/></name></expr></argument>)<pos:position pos:line="5" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="35"/></expr_stmt>

	<if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<expr><call><name pos:line="7" pos:column="13">getpeername<pos:position pos:line="7" pos:column="24"/></name><argument_list pos:line="7" pos:column="24">(<argument><expr><name pos:line="7" pos:column="25">fd<pos:position pos:line="7" pos:column="27"/></name></expr></argument>, <argument><expr><operator pos:line="7" pos:column="29">(<pos:position pos:line="7" pos:column="30"/></operator>struct <name pos:line="7" pos:column="37">sockaddr<pos:position pos:line="7" pos:column="45"/></name> <operator pos:line="7" pos:column="46">*<pos:position pos:line="7" pos:column="47"/></operator><operator pos:line="7" pos:column="47">)<pos:position pos:line="7" pos:column="48"/></operator> <name pos:line="7" pos:column="49">ss<pos:position pos:line="7" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="53">ss_len<pos:position pos:line="7" pos:column="59"/></name></expr></argument>)<pos:position pos:line="7" pos:column="60"/></argument_list></call></expr>)<pos:position pos:line="7" pos:column="61"/></condition><then pos:line="7" pos:column="61"> <block pos:line="7" pos:column="62">{
		<comment type="block" pos:line="8" pos:column="17">/* FIXME: Can we really not continue? */</comment>
		<expr_stmt><expr><call><name pos:line="9" pos:column="17">rsyserr<pos:position pos:line="9" pos:column="24"/></name><argument_list pos:line="9" pos:column="24">(<argument><expr><name pos:line="9" pos:column="25">FLOG<pos:position pos:line="9" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="31">errno<pos:position pos:line="9" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="9" pos:column="38">"getpeername on fd%d failed"<pos:position pos:line="9" pos:column="66"/></literal></expr></argument>, <argument><expr><name pos:line="9" pos:column="68">fd<pos:position pos:line="9" pos:column="70"/></name></expr></argument>)<pos:position pos:line="9" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="72"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="10" pos:column="17">exit_cleanup<pos:position pos:line="10" pos:column="29"/></name><argument_list pos:line="10" pos:column="29">(<argument><expr><name pos:line="10" pos:column="30">RERR_SOCKETIO<pos:position pos:line="10" pos:column="43"/></name></expr></argument>)<pos:position pos:line="10" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="45"/></expr_stmt>
	}<pos:position pos:line="11" pos:column="10"/></block></then></if>

<cpp:ifdef pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">ifdef<pos:position pos:line="13" pos:column="7"/></cpp:directive> <name pos:line="13" pos:column="8">INET6<pos:position pos:line="13" pos:column="13"/></name></cpp:ifdef>
	<if pos:line="14" pos:column="9">if <condition pos:line="14" pos:column="12">(<expr><call><name pos:line="14" pos:column="13">get_sockaddr_family<pos:position pos:line="14" pos:column="32"/></name><argument_list pos:line="14" pos:column="32">(<argument><expr><name pos:line="14" pos:column="33">ss<pos:position pos:line="14" pos:column="35"/></name></expr></argument>)<pos:position pos:line="14" pos:column="36"/></argument_list></call> <operator pos:line="14" pos:column="37">==<pos:position pos:line="14" pos:column="39"/></operator> <name pos:line="14" pos:column="40">AF_INET6<pos:position pos:line="14" pos:column="48"/></name> <operator pos:line="14" pos:column="49">&amp;&amp;<pos:position pos:line="14" pos:column="59"/></operator>
	    <call><name pos:line="15" pos:column="13">IN6_IS_ADDR_V4MAPPED<pos:position pos:line="15" pos:column="33"/></name><argument_list pos:line="15" pos:column="33">(<argument><expr><operator pos:line="15" pos:column="34">&amp;<pos:position pos:line="15" pos:column="39"/></operator><operator pos:line="15" pos:column="35">(<pos:position pos:line="15" pos:column="36"/></operator><operator pos:line="15" pos:column="36">(<pos:position pos:line="15" pos:column="37"/></operator>struct <name pos:line="15" pos:column="44">sockaddr_in6<pos:position pos:line="15" pos:column="56"/></name> <operator pos:line="15" pos:column="57">*<pos:position pos:line="15" pos:column="58"/></operator><operator pos:line="15" pos:column="58">)<pos:position pos:line="15" pos:column="59"/></operator><name pos:line="15" pos:column="59">ss<pos:position pos:line="15" pos:column="61"/></name><operator pos:line="15" pos:column="61">)<pos:position pos:line="15" pos:column="62"/></operator><operator pos:line="15" pos:column="62">-&gt;<pos:position pos:line="15" pos:column="67"/></operator><name pos:line="15" pos:column="64">sin6_addr<pos:position pos:line="15" pos:column="73"/></name></expr></argument>)<pos:position pos:line="15" pos:column="74"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="75"/></condition><then pos:line="15" pos:column="75"> <block pos:line="15" pos:column="76">{
		<comment type="block" pos:line="16" pos:column="17">/* OK, so ss is in the IPv6 family, but it is really
		 * an IPv4 address: something like
		 * "::ffff:10.130.1.2".  If we use it as-is, then the
		 * reverse lookup might fail or perhaps something else
		 * bad might happen.  So instead we convert it to an
		 * equivalent address in the IPv4 address family.  */</comment>
		<decl_stmt><decl><type><name><name pos:line="22" pos:column="17">struct<pos:position pos:line="22" pos:column="23"/></name> <name pos:line="22" pos:column="24">sockaddr_in6<pos:position pos:line="22" pos:column="36"/></name></name></type> <name pos:line="22" pos:column="37">sin6<pos:position pos:line="22" pos:column="41"/></name></decl>;<pos:position pos:line="22" pos:column="42"/></decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="23" pos:column="17">struct<pos:position pos:line="23" pos:column="23"/></name> <name pos:line="23" pos:column="24">sockaddr_in<pos:position pos:line="23" pos:column="35"/></name></name> <modifier pos:line="23" pos:column="36">*<pos:position pos:line="23" pos:column="37"/></modifier></type><name pos:line="23" pos:column="37">sin<pos:position pos:line="23" pos:column="40"/></name></decl>;<pos:position pos:line="23" pos:column="41"/></decl_stmt>

		<expr_stmt><expr><call><name pos:line="25" pos:column="17">memcpy<pos:position pos:line="25" pos:column="23"/></name><argument_list pos:line="25" pos:column="23">(<argument><expr><operator pos:line="25" pos:column="24">&amp;<pos:position pos:line="25" pos:column="29"/></operator><name pos:line="25" pos:column="25">sin6<pos:position pos:line="25" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="31">ss<pos:position pos:line="25" pos:column="33"/></name></expr></argument>, <argument><expr><sizeof pos:line="25" pos:column="35">sizeof <name pos:line="25" pos:column="42">sin6<pos:position pos:line="25" pos:column="46"/></name></sizeof></expr></argument>)<pos:position pos:line="25" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="48"/></expr_stmt>
		<expr_stmt><expr><name pos:line="26" pos:column="17">sin<pos:position pos:line="26" pos:column="20"/></name> <operator pos:line="26" pos:column="21">=<pos:position pos:line="26" pos:column="22"/></operator> <operator pos:line="26" pos:column="23">(<pos:position pos:line="26" pos:column="24"/></operator>struct <name pos:line="26" pos:column="31">sockaddr_in<pos:position pos:line="26" pos:column="42"/></name> <operator pos:line="26" pos:column="43">*<pos:position pos:line="26" pos:column="44"/></operator><operator pos:line="26" pos:column="44">)<pos:position pos:line="26" pos:column="45"/></operator><name pos:line="26" pos:column="45">ss<pos:position pos:line="26" pos:column="47"/></name></expr>;<pos:position pos:line="26" pos:column="48"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="27" pos:column="17">memset<pos:position pos:line="27" pos:column="23"/></name><argument_list pos:line="27" pos:column="23">(<argument><expr><name pos:line="27" pos:column="24">sin<pos:position pos:line="27" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="27" pos:column="29">0<pos:position pos:line="27" pos:column="30"/></literal></expr></argument>, <argument><expr><sizeof pos:line="27" pos:column="32">sizeof <name><pos:position pos:line="27" pos:column="39"/></name></sizeof>*<name pos:line="27" pos:column="40">sin<pos:position pos:line="27" pos:column="43"/></name></expr></argument>)<pos:position pos:line="27" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="45"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="28" pos:column="17">sin<pos:position pos:line="28" pos:column="20"/></name><operator pos:line="28" pos:column="20">-&gt;<pos:position pos:line="28" pos:column="25"/></operator><name pos:line="28" pos:column="22">sin_family<pos:position pos:line="28" pos:column="32"/></name></name> <operator pos:line="28" pos:column="33">=<pos:position pos:line="28" pos:column="34"/></operator> <name pos:line="28" pos:column="35">AF_INET<pos:position pos:line="28" pos:column="42"/></name></expr>;<pos:position pos:line="28" pos:column="43"/></expr_stmt>
		<expr_stmt><expr><operator pos:line="29" pos:column="17">*<pos:position pos:line="29" pos:column="18"/></operator><name pos:line="29" pos:column="18">ss_len<pos:position pos:line="29" pos:column="24"/></name> <operator pos:line="29" pos:column="25">=<pos:position pos:line="29" pos:column="26"/></operator> <sizeof pos:line="29" pos:column="27">sizeof <argument_list pos:line="29" pos:column="34">(<argument><expr pos:line="29" pos:column="35">struct <name pos:line="29" pos:column="42">sockaddr_in<pos:position pos:line="29" pos:column="53"/></name></expr></argument>)<pos:position pos:line="29" pos:column="54"/></argument_list></sizeof></expr>;<pos:position pos:line="29" pos:column="55"/></expr_stmt>
<cpp:ifdef pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">ifdef<pos:position pos:line="30" pos:column="7"/></cpp:directive> <name pos:line="30" pos:column="8">HAVE_SOCKADDR_IN_LEN<pos:position pos:line="30" pos:column="28"/></name></cpp:ifdef>
		<expr_stmt><expr><name><name pos:line="31" pos:column="17">sin<pos:position pos:line="31" pos:column="20"/></name><operator pos:line="31" pos:column="20">-&gt;<pos:position pos:line="31" pos:column="25"/></operator><name pos:line="31" pos:column="22">sin_len<pos:position pos:line="31" pos:column="29"/></name></name> <operator pos:line="31" pos:column="30">=<pos:position pos:line="31" pos:column="31"/></operator> <operator pos:line="31" pos:column="32">*<pos:position pos:line="31" pos:column="33"/></operator><name pos:line="31" pos:column="33">ss_len<pos:position pos:line="31" pos:column="39"/></name></expr>;<pos:position pos:line="31" pos:column="40"/></expr_stmt>
<cpp:endif pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">endif<pos:position pos:line="32" pos:column="7"/></cpp:directive></cpp:endif>
		<expr_stmt><expr><name><name pos:line="33" pos:column="17">sin<pos:position pos:line="33" pos:column="20"/></name><operator pos:line="33" pos:column="20">-&gt;<pos:position pos:line="33" pos:column="25"/></operator><name pos:line="33" pos:column="22">sin_port<pos:position pos:line="33" pos:column="30"/></name></name> <operator pos:line="33" pos:column="31">=<pos:position pos:line="33" pos:column="32"/></operator> <name><name pos:line="33" pos:column="33">sin6<pos:position pos:line="33" pos:column="37"/></name><operator pos:line="33" pos:column="37">.<pos:position pos:line="33" pos:column="38"/></operator><name pos:line="33" pos:column="38">sin6_port<pos:position pos:line="33" pos:column="47"/></name></name></expr>;<pos:position pos:line="33" pos:column="48"/></expr_stmt>

		<comment type="block" pos:line="35" pos:column="17">/* There is a macro to extract the mapped part
		 * (IN6_V4MAPPED_TO_SINADDR ?), but it does not seem
		 * to be present in the Linux headers. */</comment>
		<expr_stmt><expr><call><name pos:line="38" pos:column="17">memcpy<pos:position pos:line="38" pos:column="23"/></name><argument_list pos:line="38" pos:column="23">(<argument><expr><operator pos:line="38" pos:column="24">&amp;<pos:position pos:line="38" pos:column="29"/></operator><name><name pos:line="38" pos:column="25">sin<pos:position pos:line="38" pos:column="28"/></name><operator pos:line="38" pos:column="28">-&gt;<pos:position pos:line="38" pos:column="33"/></operator><name pos:line="38" pos:column="30">sin_addr<pos:position pos:line="38" pos:column="38"/></name></name></expr></argument>, <argument><expr><operator pos:line="38" pos:column="40">&amp;<pos:position pos:line="38" pos:column="45"/></operator><name><name pos:line="38" pos:column="41">sin6<pos:position pos:line="38" pos:column="45"/></name><operator pos:line="38" pos:column="45">.<pos:position pos:line="38" pos:column="46"/></operator><name pos:line="38" pos:column="46">sin6_addr<pos:position pos:line="38" pos:column="55"/></name><operator pos:line="38" pos:column="55">.<pos:position pos:line="38" pos:column="56"/></operator><name pos:line="38" pos:column="56">s6_addr<pos:position pos:line="38" pos:column="63"/></name><index pos:line="38" pos:column="63">[<expr><literal type="number" pos:line="38" pos:column="64">12<pos:position pos:line="38" pos:column="66"/></literal></expr>]<pos:position pos:line="38" pos:column="67"/></index></name></expr></argument>,
		    <argument><expr><sizeof pos:line="39" pos:column="21">sizeof <name><name pos:line="39" pos:column="28">sin<pos:position pos:line="39" pos:column="31"/></name><operator pos:line="39" pos:column="31">-&gt;<pos:position pos:line="39" pos:column="36"/></operator><name pos:line="39" pos:column="33">sin_addr<pos:position pos:line="39" pos:column="41"/></name></name></sizeof></expr></argument>)<pos:position pos:line="39" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="43"/></expr_stmt>
	}<pos:position pos:line="40" pos:column="10"/></block></then></if>
<cpp:endif pos:line="41" pos:column="1">#<cpp:directive pos:line="41" pos:column="2">endif<pos:position pos:line="41" pos:column="7"/></cpp:directive></cpp:endif>
}<pos:position pos:line="42" pos:column="2"/></block></function></unit>
