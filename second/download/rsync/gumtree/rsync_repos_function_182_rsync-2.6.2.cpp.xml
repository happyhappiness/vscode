<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_182_rsync-2.6.2.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">rwrite<pos:position pos:line="1" pos:column="12"/></name><parameter_list pos:line="1" pos:column="12">(<parameter><decl><type><name><name pos:line="1" pos:column="13">enum<pos:position pos:line="1" pos:column="17"/></name> <name pos:line="1" pos:column="18">logcode<pos:position pos:line="1" pos:column="25"/></name></name></type> <name pos:line="1" pos:column="26">code<pos:position pos:line="1" pos:column="30"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="32">char<pos:position pos:line="1" pos:column="36"/></name> <modifier pos:line="1" pos:column="37">*<pos:position pos:line="1" pos:column="38"/></modifier></type><name pos:line="1" pos:column="38">buf<pos:position pos:line="1" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="43">int<pos:position pos:line="1" pos:column="46"/></name></type> <name pos:line="1" pos:column="47">len<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="51"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">FILE<pos:position pos:line="3" pos:column="13"/></name> <modifier pos:line="3" pos:column="14">*<pos:position pos:line="3" pos:column="15"/></modifier></type><name pos:line="3" pos:column="15">f<pos:position pos:line="3" pos:column="16"/></name><init pos:line="3" pos:column="16">=<expr><name pos:line="3" pos:column="17">NULL<pos:position pos:line="3" pos:column="21"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="22"/></decl_stmt>
	<comment type="block" pos:line="4" pos:column="9">/* recursion can happen with certain fatal conditions */</comment>

	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><name pos:line="6" pos:column="13">quiet<pos:position pos:line="6" pos:column="18"/></name> <operator pos:line="6" pos:column="19">&amp;&amp;<pos:position pos:line="6" pos:column="29"/></operator> <name pos:line="6" pos:column="22">code<pos:position pos:line="6" pos:column="26"/></name> <operator pos:line="6" pos:column="27">==<pos:position pos:line="6" pos:column="29"/></operator> <name pos:line="6" pos:column="30">FINFO<pos:position pos:line="6" pos:column="35"/></name></expr>)<pos:position pos:line="6" pos:column="36"/></condition><then pos:line="6" pos:column="36">
		<block type="pseudo"><return pos:line="7" pos:column="17">return;<pos:position pos:line="7" pos:column="24"/></return></block></then></if>

	<if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><name pos:line="9" pos:column="13">len<pos:position pos:line="9" pos:column="16"/></name> <operator pos:line="9" pos:column="17">&lt;<pos:position pos:line="9" pos:column="21"/></operator> <literal type="number" pos:line="9" pos:column="19">0<pos:position pos:line="9" pos:column="20"/></literal></expr>)<pos:position pos:line="9" pos:column="21"/></condition><then pos:line="9" pos:column="21">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="10" pos:column="17">exit_cleanup<pos:position pos:line="10" pos:column="29"/></name><argument_list pos:line="10" pos:column="29">(<argument><expr><name pos:line="10" pos:column="30">RERR_MESSAGEIO<pos:position pos:line="10" pos:column="44"/></name></expr></argument>)<pos:position pos:line="10" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="46"/></expr_stmt></block></then></if>

	<expr_stmt><expr><name><name pos:line="12" pos:column="9">buf<pos:position pos:line="12" pos:column="12"/></name><index pos:line="12" pos:column="12">[<expr><name pos:line="12" pos:column="13">len<pos:position pos:line="12" pos:column="16"/></name></expr>]<pos:position pos:line="12" pos:column="17"/></index></name> <operator pos:line="12" pos:column="18">=<pos:position pos:line="12" pos:column="19"/></operator> <literal type="number" pos:line="12" pos:column="20">0<pos:position pos:line="12" pos:column="21"/></literal></expr>;<pos:position pos:line="12" pos:column="22"/></expr_stmt>

	<if pos:line="14" pos:column="9">if <condition pos:line="14" pos:column="12">(<expr><name pos:line="14" pos:column="13">code<pos:position pos:line="14" pos:column="17"/></name> <operator pos:line="14" pos:column="18">==<pos:position pos:line="14" pos:column="20"/></operator> <name pos:line="14" pos:column="21">FLOG<pos:position pos:line="14" pos:column="25"/></name></expr>)<pos:position pos:line="14" pos:column="26"/></condition><then pos:line="14" pos:column="26"> <block pos:line="14" pos:column="27">{
		<if pos:line="15" pos:column="17">if <condition pos:line="15" pos:column="20">(<expr><name pos:line="15" pos:column="21">am_daemon<pos:position pos:line="15" pos:column="30"/></name></expr>)<pos:position pos:line="15" pos:column="31"/></condition><then pos:line="15" pos:column="31"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="15" pos:column="32">logit<pos:position pos:line="15" pos:column="37"/></name><argument_list pos:line="15" pos:column="37">(<argument><expr><name pos:line="15" pos:column="38">LOG_INFO<pos:position pos:line="15" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="48">buf<pos:position pos:line="15" pos:column="51"/></name></expr></argument>)<pos:position pos:line="15" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="53"/></expr_stmt></block></then></if>
		<return pos:line="16" pos:column="17">return;<pos:position pos:line="16" pos:column="24"/></return>
	}<pos:position pos:line="17" pos:column="10"/></block></then></if>

	<if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><name pos:line="19" pos:column="13">am_server<pos:position pos:line="19" pos:column="22"/></name></expr>)<pos:position pos:line="19" pos:column="23"/></condition><then pos:line="19" pos:column="23"> <block pos:line="19" pos:column="24">{
		<comment type="block" pos:line="20" pos:column="17">/* Pass it to non-server side, perhaps through our sibling. */</comment>
		<if pos:line="21" pos:column="17">if <condition pos:line="21" pos:column="20">(<expr><name pos:line="21" pos:column="21">msg_fd_out<pos:position pos:line="21" pos:column="31"/></name> <operator pos:line="21" pos:column="32">&gt;=<pos:position pos:line="21" pos:column="37"/></operator> <literal type="number" pos:line="21" pos:column="35">0<pos:position pos:line="21" pos:column="36"/></literal></expr>)<pos:position pos:line="21" pos:column="37"/></condition><then pos:line="21" pos:column="37"> <block pos:line="21" pos:column="38">{
			<expr_stmt><expr><call><name pos:line="22" pos:column="25">send_msg<pos:position pos:line="22" pos:column="33"/></name><argument_list pos:line="22" pos:column="33">(<argument><expr><operator pos:line="22" pos:column="34">(<pos:position pos:line="22" pos:column="35"/></operator>enum <name pos:line="22" pos:column="40">msgcode<pos:position pos:line="22" pos:column="47"/></name><operator pos:line="22" pos:column="47">)<pos:position pos:line="22" pos:column="48"/></operator><name pos:line="22" pos:column="48">code<pos:position pos:line="22" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="54">buf<pos:position pos:line="22" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="59">len<pos:position pos:line="22" pos:column="62"/></name></expr></argument>)<pos:position pos:line="22" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="64"/></expr_stmt>
			<return pos:line="23" pos:column="25">return;<pos:position pos:line="23" pos:column="32"/></return>
		}<pos:position pos:line="24" pos:column="18"/></block></then></if>
		<if pos:line="25" pos:column="17">if <condition pos:line="25" pos:column="20">(<expr><operator pos:line="25" pos:column="21">!<pos:position pos:line="25" pos:column="22"/></operator><name pos:line="25" pos:column="22">am_daemon<pos:position pos:line="25" pos:column="31"/></name>
		    <operator pos:line="26" pos:column="21">&amp;&amp;<pos:position pos:line="26" pos:column="31"/></operator> <call><name pos:line="26" pos:column="24">io_multiplex_write<pos:position pos:line="26" pos:column="42"/></name><argument_list pos:line="26" pos:column="42">(<argument><expr><operator pos:line="26" pos:column="43">(<pos:position pos:line="26" pos:column="44"/></operator>enum <name pos:line="26" pos:column="49">msgcode<pos:position pos:line="26" pos:column="56"/></name><operator pos:line="26" pos:column="56">)<pos:position pos:line="26" pos:column="57"/></operator><name pos:line="26" pos:column="57">code<pos:position pos:line="26" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="63">buf<pos:position pos:line="26" pos:column="66"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="68">len<pos:position pos:line="26" pos:column="71"/></name></expr></argument>)<pos:position pos:line="26" pos:column="72"/></argument_list></call></expr>)<pos:position pos:line="26" pos:column="73"/></condition><then pos:line="26" pos:column="73">
			<block type="pseudo"><return pos:line="27" pos:column="25">return;<pos:position pos:line="27" pos:column="32"/></return></block></then></if>
	}<pos:position pos:line="28" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="30" pos:column="9">/* otherwise, if in daemon mode and either we are not a server
	 *  (that is, we are not running --daemon over a remote shell) or
	 *  the log has already been initialised, log the message on this
	 *  side because we don't want the client to see most errors for
	 *  security reasons.  We do want early messages when running daemon
	 *  mode over a remote shell to go to the remote side; those will
	 *  fall through to the next case.
	 * Note that this is only for the time before multiplexing is enabled.
	 */</comment>
	<if pos:line="39" pos:column="9">if <condition pos:line="39" pos:column="12">(<expr><name pos:line="39" pos:column="13">am_daemon<pos:position pos:line="39" pos:column="22"/></name> <operator pos:line="39" pos:column="23">&amp;&amp;<pos:position pos:line="39" pos:column="33"/></operator> <operator pos:line="39" pos:column="26">(<pos:position pos:line="39" pos:column="27"/></operator><operator pos:line="39" pos:column="27">!<pos:position pos:line="39" pos:column="28"/></operator><name pos:line="39" pos:column="28">am_server<pos:position pos:line="39" pos:column="37"/></name> <operator pos:line="39" pos:column="38">||<pos:position pos:line="39" pos:column="40"/></operator> <name pos:line="39" pos:column="41">log_initialised<pos:position pos:line="39" pos:column="56"/></name><operator pos:line="39" pos:column="56">)<pos:position pos:line="39" pos:column="57"/></operator></expr>)<pos:position pos:line="39" pos:column="58"/></condition><then pos:line="39" pos:column="58"> <block pos:line="39" pos:column="59">{
		<decl_stmt><decl><specifier pos:line="40" pos:column="17">static<pos:position pos:line="40" pos:column="23"/></specifier> <type><name pos:line="40" pos:column="24">int<pos:position pos:line="40" pos:column="27"/></name></type> <name pos:line="40" pos:column="28">depth<pos:position pos:line="40" pos:column="33"/></name></decl>;<pos:position pos:line="40" pos:column="34"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="41" pos:column="17">int<pos:position pos:line="41" pos:column="20"/></name></type> <name pos:line="41" pos:column="21">priority<pos:position pos:line="41" pos:column="29"/></name> <init pos:line="41" pos:column="30">= <expr><name pos:line="41" pos:column="32">LOG_INFO<pos:position pos:line="41" pos:column="40"/></name></expr></init></decl>;<pos:position pos:line="41" pos:column="41"/></decl_stmt>
		<if pos:line="42" pos:column="17">if <condition pos:line="42" pos:column="20">(<expr><name pos:line="42" pos:column="21">code<pos:position pos:line="42" pos:column="25"/></name> <operator pos:line="42" pos:column="26">==<pos:position pos:line="42" pos:column="28"/></operator> <name pos:line="42" pos:column="29">FERROR<pos:position pos:line="42" pos:column="35"/></name></expr>)<pos:position pos:line="42" pos:column="36"/></condition><then pos:line="42" pos:column="36"> <block type="pseudo"><expr_stmt><expr><name pos:line="42" pos:column="37">priority<pos:position pos:line="42" pos:column="45"/></name> <operator pos:line="42" pos:column="46">=<pos:position pos:line="42" pos:column="47"/></operator> <name pos:line="42" pos:column="48">LOG_WARNING<pos:position pos:line="42" pos:column="59"/></name></expr>;<pos:position pos:line="42" pos:column="60"/></expr_stmt></block></then></if>

		<if pos:line="44" pos:column="17">if <condition pos:line="44" pos:column="20">(<expr><name pos:line="44" pos:column="21">depth<pos:position pos:line="44" pos:column="26"/></name></expr>)<pos:position pos:line="44" pos:column="27"/></condition><then pos:line="44" pos:column="27"> <block type="pseudo"><return pos:line="44" pos:column="28">return;<pos:position pos:line="44" pos:column="35"/></return></block></then></if>

		<expr_stmt><expr><name pos:line="46" pos:column="17">depth<pos:position pos:line="46" pos:column="22"/></name><operator pos:line="46" pos:column="22">++<pos:position pos:line="46" pos:column="24"/></operator></expr>;<pos:position pos:line="46" pos:column="25"/></expr_stmt>

		<expr_stmt><expr><call><name pos:line="48" pos:column="17">log_init<pos:position pos:line="48" pos:column="25"/></name><argument_list pos:line="48" pos:column="25">()<pos:position pos:line="48" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="28"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="49" pos:column="17">logit<pos:position pos:line="49" pos:column="22"/></name><argument_list pos:line="49" pos:column="22">(<argument><expr><name pos:line="49" pos:column="23">priority<pos:position pos:line="49" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="33">buf<pos:position pos:line="49" pos:column="36"/></name></expr></argument>)<pos:position pos:line="49" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="38"/></expr_stmt>

		<expr_stmt><expr><name pos:line="51" pos:column="17">depth<pos:position pos:line="51" pos:column="22"/></name><operator pos:line="51" pos:column="22">--<pos:position pos:line="51" pos:column="24"/></operator></expr>;<pos:position pos:line="51" pos:column="25"/></expr_stmt>
		<return pos:line="52" pos:column="17">return;<pos:position pos:line="52" pos:column="24"/></return>
	}<pos:position pos:line="53" pos:column="10"/></block></then></if>

	<if pos:line="55" pos:column="9">if <condition pos:line="55" pos:column="12">(<expr><name pos:line="55" pos:column="13">code<pos:position pos:line="55" pos:column="17"/></name> <operator pos:line="55" pos:column="18">==<pos:position pos:line="55" pos:column="20"/></operator> <name pos:line="55" pos:column="21">FERROR<pos:position pos:line="55" pos:column="27"/></name></expr>)<pos:position pos:line="55" pos:column="28"/></condition><then pos:line="55" pos:column="28"> <block pos:line="55" pos:column="29">{
		<expr_stmt><expr><name pos:line="56" pos:column="17">log_got_error<pos:position pos:line="56" pos:column="30"/></name> <operator pos:line="56" pos:column="31">=<pos:position pos:line="56" pos:column="32"/></operator> <literal type="number" pos:line="56" pos:column="33">1<pos:position pos:line="56" pos:column="34"/></literal></expr>;<pos:position pos:line="56" pos:column="35"/></expr_stmt>
		<expr_stmt><expr><name pos:line="57" pos:column="17">f<pos:position pos:line="57" pos:column="18"/></name> <operator pos:line="57" pos:column="19">=<pos:position pos:line="57" pos:column="20"/></operator> <name pos:line="57" pos:column="21">stderr<pos:position pos:line="57" pos:column="27"/></name></expr>;<pos:position pos:line="57" pos:column="28"/></expr_stmt>
	}<pos:position pos:line="58" pos:column="10"/></block></then></if>

	<if pos:line="60" pos:column="9">if <condition pos:line="60" pos:column="12">(<expr><name pos:line="60" pos:column="13">code<pos:position pos:line="60" pos:column="17"/></name> <operator pos:line="60" pos:column="18">==<pos:position pos:line="60" pos:column="20"/></operator> <name pos:line="60" pos:column="21">FINFO<pos:position pos:line="60" pos:column="26"/></name></expr>)<pos:position pos:line="60" pos:column="27"/></condition><then pos:line="60" pos:column="27"> <block pos:line="60" pos:column="28">{
		<if pos:line="61" pos:column="17">if <condition pos:line="61" pos:column="20">(<expr><name pos:line="61" pos:column="21">am_server<pos:position pos:line="61" pos:column="30"/></name></expr>)<pos:position pos:line="61" pos:column="31"/></condition><then pos:line="61" pos:column="31">
			<block type="pseudo"><expr_stmt><expr><name pos:line="62" pos:column="25">f<pos:position pos:line="62" pos:column="26"/></name> <operator pos:line="62" pos:column="27">=<pos:position pos:line="62" pos:column="28"/></operator> <name pos:line="62" pos:column="29">stderr<pos:position pos:line="62" pos:column="35"/></name></expr>;<pos:position pos:line="62" pos:column="36"/></expr_stmt></block></then>
		<else pos:line="63" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><name pos:line="64" pos:column="25">f<pos:position pos:line="64" pos:column="26"/></name> <operator pos:line="64" pos:column="27">=<pos:position pos:line="64" pos:column="28"/></operator> <name pos:line="64" pos:column="29">stdout<pos:position pos:line="64" pos:column="35"/></name></expr>;<pos:position pos:line="64" pos:column="36"/></expr_stmt></block></else></if>
	}<pos:position pos:line="65" pos:column="10"/></block></then></if>

	<if pos:line="67" pos:column="9">if <condition pos:line="67" pos:column="12">(<expr><operator pos:line="67" pos:column="13">!<pos:position pos:line="67" pos:column="14"/></operator><name pos:line="67" pos:column="14">f<pos:position pos:line="67" pos:column="15"/></name></expr>)<pos:position pos:line="67" pos:column="16"/></condition><then pos:line="67" pos:column="16"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="67" pos:column="17">exit_cleanup<pos:position pos:line="67" pos:column="29"/></name><argument_list pos:line="67" pos:column="29">(<argument><expr><name pos:line="67" pos:column="30">RERR_MESSAGEIO<pos:position pos:line="67" pos:column="44"/></name></expr></argument>)<pos:position pos:line="67" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="46"/></expr_stmt></block></then></if>

	<if pos:line="69" pos:column="9">if <condition pos:line="69" pos:column="12">(<expr><call><name pos:line="69" pos:column="13">fwrite<pos:position pos:line="69" pos:column="19"/></name><argument_list pos:line="69" pos:column="19">(<argument><expr><name pos:line="69" pos:column="20">buf<pos:position pos:line="69" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="69" pos:column="25">len<pos:position pos:line="69" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="69" pos:column="30">1<pos:position pos:line="69" pos:column="31"/></literal></expr></argument>, <argument><expr><name pos:line="69" pos:column="33">f<pos:position pos:line="69" pos:column="34"/></name></expr></argument>)<pos:position pos:line="69" pos:column="35"/></argument_list></call> <operator pos:line="69" pos:column="36">!=<pos:position pos:line="69" pos:column="38"/></operator> <literal type="number" pos:line="69" pos:column="39">1<pos:position pos:line="69" pos:column="40"/></literal></expr>)<pos:position pos:line="69" pos:column="41"/></condition><then pos:line="69" pos:column="41"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="69" pos:column="42">exit_cleanup<pos:position pos:line="69" pos:column="54"/></name><argument_list pos:line="69" pos:column="54">(<argument><expr><name pos:line="69" pos:column="55">RERR_MESSAGEIO<pos:position pos:line="69" pos:column="69"/></name></expr></argument>)<pos:position pos:line="69" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="71"/></expr_stmt></block></then></if>

	<if pos:line="71" pos:column="9">if <condition pos:line="71" pos:column="12">(<expr><name><name pos:line="71" pos:column="13">buf<pos:position pos:line="71" pos:column="16"/></name><index pos:line="71" pos:column="16">[<expr><name pos:line="71" pos:column="17">len<pos:position pos:line="71" pos:column="20"/></name><operator pos:line="71" pos:column="20">-<pos:position pos:line="71" pos:column="21"/></operator><literal type="number" pos:line="71" pos:column="21">1<pos:position pos:line="71" pos:column="22"/></literal></expr>]<pos:position pos:line="71" pos:column="23"/></index></name> <operator pos:line="71" pos:column="24">==<pos:position pos:line="71" pos:column="26"/></operator> <literal type="char" pos:line="71" pos:column="27">'\r'<pos:position pos:line="71" pos:column="31"/></literal> <operator pos:line="71" pos:column="32">||<pos:position pos:line="71" pos:column="34"/></operator> <name><name pos:line="71" pos:column="35">buf<pos:position pos:line="71" pos:column="38"/></name><index pos:line="71" pos:column="38">[<expr><name pos:line="71" pos:column="39">len<pos:position pos:line="71" pos:column="42"/></name><operator pos:line="71" pos:column="42">-<pos:position pos:line="71" pos:column="43"/></operator><literal type="number" pos:line="71" pos:column="43">1<pos:position pos:line="71" pos:column="44"/></literal></expr>]<pos:position pos:line="71" pos:column="45"/></index></name> <operator pos:line="71" pos:column="46">==<pos:position pos:line="71" pos:column="48"/></operator> <literal type="char" pos:line="71" pos:column="49">'\n'<pos:position pos:line="71" pos:column="53"/></literal></expr>)<pos:position pos:line="71" pos:column="54"/></condition><then pos:line="71" pos:column="54"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="71" pos:column="55">fflush<pos:position pos:line="71" pos:column="61"/></name><argument_list pos:line="71" pos:column="61">(<argument><expr><name pos:line="71" pos:column="62">f<pos:position pos:line="71" pos:column="63"/></name></expr></argument>)<pos:position pos:line="71" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="65"/></expr_stmt></block></then></if>
}<pos:position pos:line="72" pos:column="2"/></block></function></unit>
