<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_199_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">make_backup<pos:position pos:line="1" pos:column="16"/></name><parameter_list pos:line="1" pos:column="16">(<parameter><decl><type><specifier pos:line="1" pos:column="17">const<pos:position pos:line="1" pos:column="22"/></specifier> <name pos:line="1" pos:column="23">char<pos:position pos:line="1" pos:column="27"/></name> <modifier pos:line="1" pos:column="28">*<pos:position pos:line="1" pos:column="29"/></modifier></type><name pos:line="1" pos:column="29">fname<pos:position pos:line="1" pos:column="34"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="36">BOOL<pos:position pos:line="1" pos:column="40"/></name></type> <name pos:line="1" pos:column="41">prefer_rename<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="55"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">stat_x<pos:position pos:line="3" pos:column="15"/></name></type> <name pos:line="3" pos:column="16">sx<pos:position pos:line="3" pos:column="18"/></name></decl>;<pos:position pos:line="3" pos:column="19"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">file_struct<pos:position pos:line="4" pos:column="27"/></name></name> <modifier pos:line="4" pos:column="28">*<pos:position pos:line="4" pos:column="29"/></modifier></type><name pos:line="4" pos:column="29">file<pos:position pos:line="4" pos:column="33"/></name></decl>;<pos:position pos:line="4" pos:column="34"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">save_preserve_xattrs<pos:position pos:line="5" pos:column="33"/></name></decl>;<pos:position pos:line="5" pos:column="34"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">char<pos:position pos:line="6" pos:column="13"/></name> <modifier pos:line="6" pos:column="14">*<pos:position pos:line="6" pos:column="15"/></modifier></type><name pos:line="6" pos:column="15">buf<pos:position pos:line="6" pos:column="18"/></name></decl>;<pos:position pos:line="6" pos:column="19"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">int<pos:position pos:line="7" pos:column="12"/></name></type> <name pos:line="7" pos:column="13">ret<pos:position pos:line="7" pos:column="16"/></name> <init pos:line="7" pos:column="17">= <expr><literal type="number" pos:line="7" pos:column="19">0<pos:position pos:line="7" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="21"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="9" pos:column="9">init_stat_x<pos:position pos:line="9" pos:column="20"/></name><argument_list pos:line="9" pos:column="20">(<argument><expr><operator pos:line="9" pos:column="21">&amp;<pos:position pos:line="9" pos:column="26"/></operator><name pos:line="9" pos:column="22">sx<pos:position pos:line="9" pos:column="24"/></name></expr></argument>)<pos:position pos:line="9" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="26"/></expr_stmt>
	<comment type="block" pos:line="10" pos:column="9">/* Return success if no file to keep. */</comment>
	<if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><call><name pos:line="11" pos:column="13">x_lstat<pos:position pos:line="11" pos:column="20"/></name><argument_list pos:line="11" pos:column="20">(<argument><expr><name pos:line="11" pos:column="21">fname<pos:position pos:line="11" pos:column="26"/></name></expr></argument>, <argument><expr><operator pos:line="11" pos:column="28">&amp;<pos:position pos:line="11" pos:column="33"/></operator><name><name pos:line="11" pos:column="29">sx<pos:position pos:line="11" pos:column="31"/></name><operator pos:line="11" pos:column="31">.<pos:position pos:line="11" pos:column="32"/></operator><name pos:line="11" pos:column="32">st<pos:position pos:line="11" pos:column="34"/></name></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="36">NULL<pos:position pos:line="11" pos:column="40"/></name></expr></argument>)<pos:position pos:line="11" pos:column="41"/></argument_list></call> <operator pos:line="11" pos:column="42">&lt;<pos:position pos:line="11" pos:column="46"/></operator> <literal type="number" pos:line="11" pos:column="44">0<pos:position pos:line="11" pos:column="45"/></literal></expr>)<pos:position pos:line="11" pos:column="46"/></condition><then pos:line="11" pos:column="46">
		<block type="pseudo"><return pos:line="12" pos:column="17">return <expr><literal type="number" pos:line="12" pos:column="24">3<pos:position pos:line="12" pos:column="25"/></literal></expr>;<pos:position pos:line="12" pos:column="26"/></return></block></then></if>

	<if pos:line="14" pos:column="9">if <condition pos:line="14" pos:column="12">(<expr><operator pos:line="14" pos:column="13">!<pos:position pos:line="14" pos:column="14"/></operator><operator pos:line="14" pos:column="14">(<pos:position pos:line="14" pos:column="15"/></operator><name pos:line="14" pos:column="15">buf<pos:position pos:line="14" pos:column="18"/></name> <operator pos:line="14" pos:column="19">=<pos:position pos:line="14" pos:column="20"/></operator> <call><name pos:line="14" pos:column="21">get_backup_name<pos:position pos:line="14" pos:column="36"/></name><argument_list pos:line="14" pos:column="36">(<argument><expr><name pos:line="14" pos:column="37">fname<pos:position pos:line="14" pos:column="42"/></name></expr></argument>)<pos:position pos:line="14" pos:column="43"/></argument_list></call><operator pos:line="14" pos:column="43">)<pos:position pos:line="14" pos:column="44"/></operator></expr>)<pos:position pos:line="14" pos:column="45"/></condition><then pos:line="14" pos:column="45">
		<block type="pseudo"><return pos:line="15" pos:column="17">return <expr><literal type="number" pos:line="15" pos:column="24">0<pos:position pos:line="15" pos:column="25"/></literal></expr>;<pos:position pos:line="15" pos:column="26"/></return></block></then></if>

	<comment type="block" pos:line="17" pos:column="9">/* Try a hard-link or a rename first.  Using rename is not atomic, but
	 * is more efficient than forcing a copy for larger files when no hard-
	 * linking is possible. */</comment>
	<if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><operator pos:line="20" pos:column="13">(<pos:position pos:line="20" pos:column="14"/></operator><name pos:line="20" pos:column="14">ret<pos:position pos:line="20" pos:column="17"/></name> <operator pos:line="20" pos:column="18">=<pos:position pos:line="20" pos:column="19"/></operator> <call><name pos:line="20" pos:column="20">link_or_rename<pos:position pos:line="20" pos:column="34"/></name><argument_list pos:line="20" pos:column="34">(<argument><expr><name pos:line="20" pos:column="35">fname<pos:position pos:line="20" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="42">buf<pos:position pos:line="20" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="47">prefer_rename<pos:position pos:line="20" pos:column="60"/></name></expr></argument>, <argument><expr><operator pos:line="20" pos:column="62">&amp;<pos:position pos:line="20" pos:column="67"/></operator><name><name pos:line="20" pos:column="63">sx<pos:position pos:line="20" pos:column="65"/></name><operator pos:line="20" pos:column="65">.<pos:position pos:line="20" pos:column="66"/></operator><name pos:line="20" pos:column="66">st<pos:position pos:line="20" pos:column="68"/></name></name></expr></argument>)<pos:position pos:line="20" pos:column="69"/></argument_list></call><operator pos:line="20" pos:column="69">)<pos:position pos:line="20" pos:column="70"/></operator> <operator pos:line="20" pos:column="71">!=<pos:position pos:line="20" pos:column="73"/></operator> <literal type="number" pos:line="20" pos:column="74">0<pos:position pos:line="20" pos:column="75"/></literal></expr>)<pos:position pos:line="20" pos:column="76"/></condition><then pos:line="20" pos:column="76">
		<block type="pseudo"><goto pos:line="21" pos:column="17">goto <name pos:line="21" pos:column="22">success<pos:position pos:line="21" pos:column="29"/></name>;<pos:position pos:line="21" pos:column="30"/></goto></block></then></if>
	<if pos:line="22" pos:column="9">if <condition pos:line="22" pos:column="12">(<expr><name pos:line="22" pos:column="13">errno<pos:position pos:line="22" pos:column="18"/></name> <operator pos:line="22" pos:column="19">==<pos:position pos:line="22" pos:column="21"/></operator> <name pos:line="22" pos:column="22">EEXIST<pos:position pos:line="22" pos:column="28"/></name> <operator pos:line="22" pos:column="29">||<pos:position pos:line="22" pos:column="31"/></operator> <name pos:line="22" pos:column="32">errno<pos:position pos:line="22" pos:column="37"/></name> <operator pos:line="22" pos:column="38">==<pos:position pos:line="22" pos:column="40"/></operator> <name pos:line="22" pos:column="41">EISDIR<pos:position pos:line="22" pos:column="47"/></name></expr>)<pos:position pos:line="22" pos:column="48"/></condition><then pos:line="22" pos:column="48"> <block pos:line="22" pos:column="49">{
		<decl_stmt><decl><type><name pos:line="23" pos:column="17">STRUCT_STAT<pos:position pos:line="23" pos:column="28"/></name></type> <name pos:line="23" pos:column="29">bakst<pos:position pos:line="23" pos:column="34"/></name></decl>;<pos:position pos:line="23" pos:column="35"/></decl_stmt>
		<if pos:line="24" pos:column="17">if <condition pos:line="24" pos:column="20">(<expr><call><name pos:line="24" pos:column="21">do_lstat<pos:position pos:line="24" pos:column="29"/></name><argument_list pos:line="24" pos:column="29">(<argument><expr><name pos:line="24" pos:column="30">buf<pos:position pos:line="24" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="24" pos:column="35">&amp;<pos:position pos:line="24" pos:column="40"/></operator><name pos:line="24" pos:column="36">bakst<pos:position pos:line="24" pos:column="41"/></name></expr></argument>)<pos:position pos:line="24" pos:column="42"/></argument_list></call> <operator pos:line="24" pos:column="43">==<pos:position pos:line="24" pos:column="45"/></operator> <literal type="number" pos:line="24" pos:column="46">0<pos:position pos:line="24" pos:column="47"/></literal></expr>)<pos:position pos:line="24" pos:column="48"/></condition><then pos:line="24" pos:column="48"> <block pos:line="24" pos:column="49">{
			<decl_stmt><decl><type><name pos:line="25" pos:column="25">int<pos:position pos:line="25" pos:column="28"/></name></type> <name pos:line="25" pos:column="29">flags<pos:position pos:line="25" pos:column="34"/></name> <init pos:line="25" pos:column="35">= <expr><call><name pos:line="25" pos:column="37">get_del_for_flag<pos:position pos:line="25" pos:column="53"/></name><argument_list pos:line="25" pos:column="53">(<argument><expr><name><name pos:line="25" pos:column="54">bakst<pos:position pos:line="25" pos:column="59"/></name><operator pos:line="25" pos:column="59">.<pos:position pos:line="25" pos:column="60"/></operator><name pos:line="25" pos:column="60">st_mode<pos:position pos:line="25" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="25" pos:column="68"/></argument_list></call> <operator pos:line="25" pos:column="69">|<pos:position pos:line="25" pos:column="70"/></operator> <name pos:line="25" pos:column="71">DEL_FOR_BACKUP<pos:position pos:line="25" pos:column="85"/></name> <operator pos:line="25" pos:column="86">|<pos:position pos:line="25" pos:column="87"/></operator> <name pos:line="25" pos:column="88">DEL_RECURSE<pos:position pos:line="25" pos:column="99"/></name></expr></init></decl>;<pos:position pos:line="25" pos:column="100"/></decl_stmt>
			<if pos:line="26" pos:column="25">if <condition pos:line="26" pos:column="28">(<expr><call><name pos:line="26" pos:column="29">delete_item<pos:position pos:line="26" pos:column="40"/></name><argument_list pos:line="26" pos:column="40">(<argument><expr><name pos:line="26" pos:column="41">buf<pos:position pos:line="26" pos:column="44"/></name></expr></argument>, <argument><expr><name><name pos:line="26" pos:column="46">bakst<pos:position pos:line="26" pos:column="51"/></name><operator pos:line="26" pos:column="51">.<pos:position pos:line="26" pos:column="52"/></operator><name pos:line="26" pos:column="52">st_mode<pos:position pos:line="26" pos:column="59"/></name></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="61">flags<pos:position pos:line="26" pos:column="66"/></name></expr></argument>)<pos:position pos:line="26" pos:column="67"/></argument_list></call> <operator pos:line="26" pos:column="68">!=<pos:position pos:line="26" pos:column="70"/></operator> <literal type="number" pos:line="26" pos:column="71">0<pos:position pos:line="26" pos:column="72"/></literal></expr>)<pos:position pos:line="26" pos:column="73"/></condition><then pos:line="26" pos:column="73">
				<block type="pseudo"><return pos:line="27" pos:column="33">return <expr><literal type="number" pos:line="27" pos:column="40">0<pos:position pos:line="27" pos:column="41"/></literal></expr>;<pos:position pos:line="27" pos:column="42"/></return></block></then></if>
		}<pos:position pos:line="28" pos:column="18"/></block></then></if>
		<if pos:line="29" pos:column="17">if <condition pos:line="29" pos:column="20">(<expr><operator pos:line="29" pos:column="21">(<pos:position pos:line="29" pos:column="22"/></operator><name pos:line="29" pos:column="22">ret<pos:position pos:line="29" pos:column="25"/></name> <operator pos:line="29" pos:column="26">=<pos:position pos:line="29" pos:column="27"/></operator> <call><name pos:line="29" pos:column="28">link_or_rename<pos:position pos:line="29" pos:column="42"/></name><argument_list pos:line="29" pos:column="42">(<argument><expr><name pos:line="29" pos:column="43">fname<pos:position pos:line="29" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="50">buf<pos:position pos:line="29" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="55">prefer_rename<pos:position pos:line="29" pos:column="68"/></name></expr></argument>, <argument><expr><operator pos:line="29" pos:column="70">&amp;<pos:position pos:line="29" pos:column="75"/></operator><name><name pos:line="29" pos:column="71">sx<pos:position pos:line="29" pos:column="73"/></name><operator pos:line="29" pos:column="73">.<pos:position pos:line="29" pos:column="74"/></operator><name pos:line="29" pos:column="74">st<pos:position pos:line="29" pos:column="76"/></name></name></expr></argument>)<pos:position pos:line="29" pos:column="77"/></argument_list></call><operator pos:line="29" pos:column="77">)<pos:position pos:line="29" pos:column="78"/></operator> <operator pos:line="29" pos:column="79">!=<pos:position pos:line="29" pos:column="81"/></operator> <literal type="number" pos:line="29" pos:column="82">0<pos:position pos:line="29" pos:column="83"/></literal></expr>)<pos:position pos:line="29" pos:column="84"/></condition><then pos:line="29" pos:column="84">
			<block type="pseudo"><goto pos:line="30" pos:column="25">goto <name pos:line="30" pos:column="30">success<pos:position pos:line="30" pos:column="37"/></name>;<pos:position pos:line="30" pos:column="38"/></goto></block></then></if>
	}<pos:position pos:line="31" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="33" pos:column="9">/* Fall back to making a copy. */</comment>
	<if pos:line="34" pos:column="9">if <condition pos:line="34" pos:column="12">(<expr><operator pos:line="34" pos:column="13">!<pos:position pos:line="34" pos:column="14"/></operator><operator pos:line="34" pos:column="14">(<pos:position pos:line="34" pos:column="15"/></operator><name pos:line="34" pos:column="15">file<pos:position pos:line="34" pos:column="19"/></name> <operator pos:line="34" pos:column="20">=<pos:position pos:line="34" pos:column="21"/></operator> <call><name pos:line="34" pos:column="22">make_file<pos:position pos:line="34" pos:column="31"/></name><argument_list pos:line="34" pos:column="31">(<argument><expr><name pos:line="34" pos:column="32">fname<pos:position pos:line="34" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="39">NULL<pos:position pos:line="34" pos:column="43"/></name></expr></argument>, <argument><expr><operator pos:line="34" pos:column="45">&amp;<pos:position pos:line="34" pos:column="50"/></operator><name><name pos:line="34" pos:column="46">sx<pos:position pos:line="34" pos:column="48"/></name><operator pos:line="34" pos:column="48">.<pos:position pos:line="34" pos:column="49"/></operator><name pos:line="34" pos:column="49">st<pos:position pos:line="34" pos:column="51"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="34" pos:column="53">0<pos:position pos:line="34" pos:column="54"/></literal></expr></argument>, <argument><expr><name pos:line="34" pos:column="56">NO_FILTERS<pos:position pos:line="34" pos:column="66"/></name></expr></argument>)<pos:position pos:line="34" pos:column="67"/></argument_list></call><operator pos:line="34" pos:column="67">)<pos:position pos:line="34" pos:column="68"/></operator></expr>)<pos:position pos:line="34" pos:column="69"/></condition><then pos:line="34" pos:column="69">
		<block type="pseudo"><return pos:line="35" pos:column="17">return <expr><literal type="number" pos:line="35" pos:column="24">3<pos:position pos:line="35" pos:column="25"/></literal></expr>;<pos:position pos:line="35" pos:column="26"/></return></block></then></if> <comment type="block" pos:line="35" pos:column="27">/* the file could have disappeared */</comment>

<cpp:ifdef pos:line="37" pos:column="1">#<cpp:directive pos:line="37" pos:column="2">ifdef<pos:position pos:line="37" pos:column="7"/></cpp:directive> <name pos:line="37" pos:column="8">SUPPORT_ACLS<pos:position pos:line="37" pos:column="20"/></name></cpp:ifdef>
	<if pos:line="38" pos:column="9">if <condition pos:line="38" pos:column="12">(<expr><name pos:line="38" pos:column="13">preserve_acls<pos:position pos:line="38" pos:column="26"/></name> <operator pos:line="38" pos:column="27">&amp;&amp;<pos:position pos:line="38" pos:column="37"/></operator> <operator pos:line="38" pos:column="30">!<pos:position pos:line="38" pos:column="31"/></operator><call><name pos:line="38" pos:column="31">S_ISLNK<pos:position pos:line="38" pos:column="38"/></name><argument_list pos:line="38" pos:column="38">(<argument><expr><name><name pos:line="38" pos:column="39">file<pos:position pos:line="38" pos:column="43"/></name><operator pos:line="38" pos:column="43">-&gt;<pos:position pos:line="38" pos:column="48"/></operator><name pos:line="38" pos:column="45">mode<pos:position pos:line="38" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="38" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="38" pos:column="51"/></condition><then pos:line="38" pos:column="51"> <block pos:line="38" pos:column="52">{
		<expr_stmt><expr><call><name pos:line="39" pos:column="17">get_acl<pos:position pos:line="39" pos:column="24"/></name><argument_list pos:line="39" pos:column="24">(<argument><expr><name pos:line="39" pos:column="25">fname<pos:position pos:line="39" pos:column="30"/></name></expr></argument>, <argument><expr><operator pos:line="39" pos:column="32">&amp;<pos:position pos:line="39" pos:column="37"/></operator><name pos:line="39" pos:column="33">sx<pos:position pos:line="39" pos:column="35"/></name></expr></argument>)<pos:position pos:line="39" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="37"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="40" pos:column="17">cache_tmp_acl<pos:position pos:line="40" pos:column="30"/></name><argument_list pos:line="40" pos:column="30">(<argument><expr><name pos:line="40" pos:column="31">file<pos:position pos:line="40" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="40" pos:column="37">&amp;<pos:position pos:line="40" pos:column="42"/></operator><name pos:line="40" pos:column="38">sx<pos:position pos:line="40" pos:column="40"/></name></expr></argument>)<pos:position pos:line="40" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="42"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="41" pos:column="17">free_acl<pos:position pos:line="41" pos:column="25"/></name><argument_list pos:line="41" pos:column="25">(<argument><expr><operator pos:line="41" pos:column="26">&amp;<pos:position pos:line="41" pos:column="31"/></operator><name pos:line="41" pos:column="27">sx<pos:position pos:line="41" pos:column="29"/></name></expr></argument>)<pos:position pos:line="41" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="31"/></expr_stmt>
	}<pos:position pos:line="42" pos:column="10"/></block></then></if>
<cpp:endif pos:line="43" pos:column="1">#<cpp:directive pos:line="43" pos:column="2">endif<pos:position pos:line="43" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:ifdef pos:line="44" pos:column="1">#<cpp:directive pos:line="44" pos:column="2">ifdef<pos:position pos:line="44" pos:column="7"/></cpp:directive> <name pos:line="44" pos:column="8">SUPPORT_XATTRS<pos:position pos:line="44" pos:column="22"/></name></cpp:ifdef>
	<if pos:line="45" pos:column="9">if <condition pos:line="45" pos:column="12">(<expr><name pos:line="45" pos:column="13">preserve_xattrs<pos:position pos:line="45" pos:column="28"/></name></expr>)<pos:position pos:line="45" pos:column="29"/></condition><then pos:line="45" pos:column="29"> <block pos:line="45" pos:column="30">{
		<expr_stmt><expr><call><name pos:line="46" pos:column="17">get_xattr<pos:position pos:line="46" pos:column="26"/></name><argument_list pos:line="46" pos:column="26">(<argument><expr><name pos:line="46" pos:column="27">fname<pos:position pos:line="46" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="46" pos:column="34">&amp;<pos:position pos:line="46" pos:column="39"/></operator><name pos:line="46" pos:column="35">sx<pos:position pos:line="46" pos:column="37"/></name></expr></argument>)<pos:position pos:line="46" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="39"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="47" pos:column="17">cache_tmp_xattr<pos:position pos:line="47" pos:column="32"/></name><argument_list pos:line="47" pos:column="32">(<argument><expr><name pos:line="47" pos:column="33">file<pos:position pos:line="47" pos:column="37"/></name></expr></argument>, <argument><expr><operator pos:line="47" pos:column="39">&amp;<pos:position pos:line="47" pos:column="44"/></operator><name pos:line="47" pos:column="40">sx<pos:position pos:line="47" pos:column="42"/></name></expr></argument>)<pos:position pos:line="47" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="44"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="48" pos:column="17">free_xattr<pos:position pos:line="48" pos:column="27"/></name><argument_list pos:line="48" pos:column="27">(<argument><expr><operator pos:line="48" pos:column="28">&amp;<pos:position pos:line="48" pos:column="33"/></operator><name pos:line="48" pos:column="29">sx<pos:position pos:line="48" pos:column="31"/></name></expr></argument>)<pos:position pos:line="48" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="33"/></expr_stmt>
	}<pos:position pos:line="49" pos:column="10"/></block></then></if>
<cpp:endif pos:line="50" pos:column="1">#<cpp:directive pos:line="50" pos:column="2">endif<pos:position pos:line="50" pos:column="7"/></cpp:directive></cpp:endif>

	<comment type="block" pos:line="52" pos:column="9">/* Check to see if this is a device file, or link */</comment>
	<if pos:line="53" pos:column="9">if <condition pos:line="53" pos:column="12">(<expr><operator pos:line="53" pos:column="13">(<pos:position pos:line="53" pos:column="14"/></operator><name pos:line="53" pos:column="14">am_root<pos:position pos:line="53" pos:column="21"/></name> <operator pos:line="53" pos:column="22">&amp;&amp;<pos:position pos:line="53" pos:column="32"/></operator> <name pos:line="53" pos:column="25">preserve_devices<pos:position pos:line="53" pos:column="41"/></name> <operator pos:line="53" pos:column="42">&amp;&amp;<pos:position pos:line="53" pos:column="52"/></operator> <call><name pos:line="53" pos:column="45">IS_DEVICE<pos:position pos:line="53" pos:column="54"/></name><argument_list pos:line="53" pos:column="54">(<argument><expr><name><name pos:line="53" pos:column="55">file<pos:position pos:line="53" pos:column="59"/></name><operator pos:line="53" pos:column="59">-&gt;<pos:position pos:line="53" pos:column="64"/></operator><name pos:line="53" pos:column="61">mode<pos:position pos:line="53" pos:column="65"/></name></name></expr></argument>)<pos:position pos:line="53" pos:column="66"/></argument_list></call><operator pos:line="53" pos:column="66">)<pos:position pos:line="53" pos:column="67"/></operator>
	 <operator pos:line="54" pos:column="10">||<pos:position pos:line="54" pos:column="12"/></operator> <operator pos:line="54" pos:column="13">(<pos:position pos:line="54" pos:column="14"/></operator><name pos:line="54" pos:column="14">preserve_specials<pos:position pos:line="54" pos:column="31"/></name> <operator pos:line="54" pos:column="32">&amp;&amp;<pos:position pos:line="54" pos:column="42"/></operator> <call><name pos:line="54" pos:column="35">IS_SPECIAL<pos:position pos:line="54" pos:column="45"/></name><argument_list pos:line="54" pos:column="45">(<argument><expr><name><name pos:line="54" pos:column="46">file<pos:position pos:line="54" pos:column="50"/></name><operator pos:line="54" pos:column="50">-&gt;<pos:position pos:line="54" pos:column="55"/></operator><name pos:line="54" pos:column="52">mode<pos:position pos:line="54" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="54" pos:column="57"/></argument_list></call><operator pos:line="54" pos:column="57">)<pos:position pos:line="54" pos:column="58"/></operator></expr>)<pos:position pos:line="54" pos:column="59"/></condition><then pos:line="54" pos:column="59"> <block pos:line="54" pos:column="60">{
		<if pos:line="55" pos:column="17">if <condition pos:line="55" pos:column="20">(<expr><call><name pos:line="55" pos:column="21">do_mknod<pos:position pos:line="55" pos:column="29"/></name><argument_list pos:line="55" pos:column="29">(<argument><expr><name pos:line="55" pos:column="30">buf<pos:position pos:line="55" pos:column="33"/></name></expr></argument>, <argument><expr><name><name pos:line="55" pos:column="35">file<pos:position pos:line="55" pos:column="39"/></name><operator pos:line="55" pos:column="39">-&gt;<pos:position pos:line="55" pos:column="44"/></operator><name pos:line="55" pos:column="41">mode<pos:position pos:line="55" pos:column="45"/></name></name></expr></argument>, <argument><expr><name><name pos:line="55" pos:column="47">sx<pos:position pos:line="55" pos:column="49"/></name><operator pos:line="55" pos:column="49">.<pos:position pos:line="55" pos:column="50"/></operator><name pos:line="55" pos:column="50">st<pos:position pos:line="55" pos:column="52"/></name><operator pos:line="55" pos:column="52">.<pos:position pos:line="55" pos:column="53"/></operator><name pos:line="55" pos:column="53">st_rdev<pos:position pos:line="55" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="55" pos:column="61"/></argument_list></call> <operator pos:line="55" pos:column="62">&lt;<pos:position pos:line="55" pos:column="66"/></operator> <literal type="number" pos:line="55" pos:column="64">0<pos:position pos:line="55" pos:column="65"/></literal></expr>)<pos:position pos:line="55" pos:column="66"/></condition><then pos:line="55" pos:column="66">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="56" pos:column="25">rsyserr<pos:position pos:line="56" pos:column="32"/></name><argument_list pos:line="56" pos:column="32">(<argument><expr><name pos:line="56" pos:column="33">FERROR<pos:position pos:line="56" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="41">errno<pos:position pos:line="56" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="56" pos:column="48">"mknod %s failed"<pos:position pos:line="56" pos:column="65"/></literal></expr></argument>, <argument><expr><call><name pos:line="56" pos:column="67">full_fname<pos:position pos:line="56" pos:column="77"/></name><argument_list pos:line="56" pos:column="77">(<argument><expr><name pos:line="56" pos:column="78">buf<pos:position pos:line="56" pos:column="81"/></name></expr></argument>)<pos:position pos:line="56" pos:column="82"/></argument_list></call></expr></argument>)<pos:position pos:line="56" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="84"/></expr_stmt></block></then>
		<elseif pos:line="57" pos:column="17">else <if pos:line="57" pos:column="22">if <condition pos:line="57" pos:column="25">(<expr><call><name pos:line="57" pos:column="26">DEBUG_GTE<pos:position pos:line="57" pos:column="35"/></name><argument_list pos:line="57" pos:column="35">(<argument><expr><name pos:line="57" pos:column="36">BACKUP<pos:position pos:line="57" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="57" pos:column="44">1<pos:position pos:line="57" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="57" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="57" pos:column="47"/></condition><then pos:line="57" pos:column="47">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="58" pos:column="25">rprintf<pos:position pos:line="58" pos:column="32"/></name><argument_list pos:line="58" pos:column="32">(<argument><expr><name pos:line="58" pos:column="33">FINFO<pos:position pos:line="58" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="58" pos:column="40">"make_backup: DEVICE %s successful.\n"<pos:position pos:line="58" pos:column="78"/></literal></expr></argument>, <argument><expr><name pos:line="58" pos:column="80">fname<pos:position pos:line="58" pos:column="85"/></name></expr></argument>)<pos:position pos:line="58" pos:column="86"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="87"/></expr_stmt></block></then></if></elseif></if>
		<expr_stmt><expr><name pos:line="59" pos:column="17">ret<pos:position pos:line="59" pos:column="20"/></name> <operator pos:line="59" pos:column="21">=<pos:position pos:line="59" pos:column="22"/></operator> <literal type="number" pos:line="59" pos:column="23">2<pos:position pos:line="59" pos:column="24"/></literal></expr>;<pos:position pos:line="59" pos:column="25"/></expr_stmt>
	}<pos:position pos:line="60" pos:column="10"/></block></then></if>

<cpp:ifdef pos:line="62" pos:column="1">#<cpp:directive pos:line="62" pos:column="2">ifdef<pos:position pos:line="62" pos:column="7"/></cpp:directive> <name pos:line="62" pos:column="8">SUPPORT_LINKS<pos:position pos:line="62" pos:column="21"/></name></cpp:ifdef>
	<if pos:line="63" pos:column="9">if <condition pos:line="63" pos:column="12">(<expr><operator pos:line="63" pos:column="13">!<pos:position pos:line="63" pos:column="14"/></operator><name pos:line="63" pos:column="14">ret<pos:position pos:line="63" pos:column="17"/></name> <operator pos:line="63" pos:column="18">&amp;&amp;<pos:position pos:line="63" pos:column="28"/></operator> <name pos:line="63" pos:column="21">preserve_links<pos:position pos:line="63" pos:column="35"/></name> <operator pos:line="63" pos:column="36">&amp;&amp;<pos:position pos:line="63" pos:column="46"/></operator> <call><name pos:line="63" pos:column="39">S_ISLNK<pos:position pos:line="63" pos:column="46"/></name><argument_list pos:line="63" pos:column="46">(<argument><expr><name><name pos:line="63" pos:column="47">file<pos:position pos:line="63" pos:column="51"/></name><operator pos:line="63" pos:column="51">-&gt;<pos:position pos:line="63" pos:column="56"/></operator><name pos:line="63" pos:column="53">mode<pos:position pos:line="63" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="63" pos:column="58"/></argument_list></call></expr>)<pos:position pos:line="63" pos:column="59"/></condition><then pos:line="63" pos:column="59"> <block pos:line="63" pos:column="60">{
		<decl_stmt><decl><type><specifier pos:line="64" pos:column="17">const<pos:position pos:line="64" pos:column="22"/></specifier> <name pos:line="64" pos:column="23">char<pos:position pos:line="64" pos:column="27"/></name> <modifier pos:line="64" pos:column="28">*<pos:position pos:line="64" pos:column="29"/></modifier></type><name pos:line="64" pos:column="29">sl<pos:position pos:line="64" pos:column="31"/></name> <init pos:line="64" pos:column="32">= <expr><call><name pos:line="64" pos:column="34">F_SYMLINK<pos:position pos:line="64" pos:column="43"/></name><argument_list pos:line="64" pos:column="43">(<argument><expr><name pos:line="64" pos:column="44">file<pos:position pos:line="64" pos:column="48"/></name></expr></argument>)<pos:position pos:line="64" pos:column="49"/></argument_list></call></expr></init></decl>;<pos:position pos:line="64" pos:column="50"/></decl_stmt>
		<if pos:line="65" pos:column="17">if <condition pos:line="65" pos:column="20">(<expr><name pos:line="65" pos:column="21">safe_symlinks<pos:position pos:line="65" pos:column="34"/></name> <operator pos:line="65" pos:column="35">&amp;&amp;<pos:position pos:line="65" pos:column="45"/></operator> <call><name pos:line="65" pos:column="38">unsafe_symlink<pos:position pos:line="65" pos:column="52"/></name><argument_list pos:line="65" pos:column="52">(<argument><expr><name pos:line="65" pos:column="53">sl<pos:position pos:line="65" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="57">fname<pos:position pos:line="65" pos:column="62"/></name></expr></argument>)<pos:position pos:line="65" pos:column="63"/></argument_list></call></expr>)<pos:position pos:line="65" pos:column="64"/></condition><then pos:line="65" pos:column="64"> <block pos:line="65" pos:column="65">{
			<if pos:line="66" pos:column="25">if <condition pos:line="66" pos:column="28">(<expr><call><name pos:line="66" pos:column="29">INFO_GTE<pos:position pos:line="66" pos:column="37"/></name><argument_list pos:line="66" pos:column="37">(<argument><expr><name pos:line="66" pos:column="38">SYMSAFE<pos:position pos:line="66" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="66" pos:column="47">1<pos:position pos:line="66" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="66" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="66" pos:column="50"/></condition><then pos:line="66" pos:column="50"> <block pos:line="66" pos:column="51">{
				<expr_stmt><expr><call><name pos:line="67" pos:column="33">rprintf<pos:position pos:line="67" pos:column="40"/></name><argument_list pos:line="67" pos:column="40">(<argument><expr><name pos:line="67" pos:column="41">FINFO<pos:position pos:line="67" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="67" pos:column="48">"not backing up unsafe symlink \"%s\" -&gt; \"%s\"\n"<pos:position pos:line="67" pos:column="101"/></literal></expr></argument>,
					<argument><expr><name pos:line="68" pos:column="41">fname<pos:position pos:line="68" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="68" pos:column="48">sl<pos:position pos:line="68" pos:column="50"/></name></expr></argument>)<pos:position pos:line="68" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="52"/></expr_stmt>
			}<pos:position pos:line="69" pos:column="26"/></block></then></if>
			<expr_stmt><expr><name pos:line="70" pos:column="25">ret<pos:position pos:line="70" pos:column="28"/></name> <operator pos:line="70" pos:column="29">=<pos:position pos:line="70" pos:column="30"/></operator> <literal type="number" pos:line="70" pos:column="31">2<pos:position pos:line="70" pos:column="32"/></literal></expr>;<pos:position pos:line="70" pos:column="33"/></expr_stmt>
		}<pos:position pos:line="71" pos:column="18"/></block></then> <else pos:line="71" pos:column="19">else <block pos:line="71" pos:column="24">{
			<if pos:line="72" pos:column="25">if <condition pos:line="72" pos:column="28">(<expr><call><name pos:line="72" pos:column="29">do_symlink<pos:position pos:line="72" pos:column="39"/></name><argument_list pos:line="72" pos:column="39">(<argument><expr><name pos:line="72" pos:column="40">sl<pos:position pos:line="72" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="72" pos:column="44">buf<pos:position pos:line="72" pos:column="47"/></name></expr></argument>)<pos:position pos:line="72" pos:column="48"/></argument_list></call> <operator pos:line="72" pos:column="49">&lt;<pos:position pos:line="72" pos:column="53"/></operator> <literal type="number" pos:line="72" pos:column="51">0<pos:position pos:line="72" pos:column="52"/></literal></expr>)<pos:position pos:line="72" pos:column="53"/></condition><then pos:line="72" pos:column="53">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="73" pos:column="33">rsyserr<pos:position pos:line="73" pos:column="40"/></name><argument_list pos:line="73" pos:column="40">(<argument><expr><name pos:line="73" pos:column="41">FERROR<pos:position pos:line="73" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="73" pos:column="49">errno<pos:position pos:line="73" pos:column="54"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="73" pos:column="56">"link %s -&gt; \"%s\""<pos:position pos:line="73" pos:column="78"/></literal></expr></argument>, <argument><expr><call><name pos:line="73" pos:column="77">full_fname<pos:position pos:line="73" pos:column="87"/></name><argument_list pos:line="73" pos:column="87">(<argument><expr><name pos:line="73" pos:column="88">buf<pos:position pos:line="73" pos:column="91"/></name></expr></argument>)<pos:position pos:line="73" pos:column="92"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="73" pos:column="94">sl<pos:position pos:line="73" pos:column="96"/></name></expr></argument>)<pos:position pos:line="73" pos:column="97"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="98"/></expr_stmt></block></then>
			<elseif pos:line="74" pos:column="25">else <if pos:line="74" pos:column="30">if <condition pos:line="74" pos:column="33">(<expr><call><name pos:line="74" pos:column="34">DEBUG_GTE<pos:position pos:line="74" pos:column="43"/></name><argument_list pos:line="74" pos:column="43">(<argument><expr><name pos:line="74" pos:column="44">BACKUP<pos:position pos:line="74" pos:column="50"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="74" pos:column="52">1<pos:position pos:line="74" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="74" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="74" pos:column="55"/></condition><then pos:line="74" pos:column="55">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="75" pos:column="33">rprintf<pos:position pos:line="75" pos:column="40"/></name><argument_list pos:line="75" pos:column="40">(<argument><expr><name pos:line="75" pos:column="41">FINFO<pos:position pos:line="75" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="75" pos:column="48">"make_backup: SYMLINK %s successful.\n"<pos:position pos:line="75" pos:column="87"/></literal></expr></argument>, <argument><expr><name pos:line="75" pos:column="89">fname<pos:position pos:line="75" pos:column="94"/></name></expr></argument>)<pos:position pos:line="75" pos:column="95"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="96"/></expr_stmt></block></then></if></elseif></if>
			<expr_stmt><expr><name pos:line="76" pos:column="25">ret<pos:position pos:line="76" pos:column="28"/></name> <operator pos:line="76" pos:column="29">=<pos:position pos:line="76" pos:column="30"/></operator> <literal type="number" pos:line="76" pos:column="31">2<pos:position pos:line="76" pos:column="32"/></literal></expr>;<pos:position pos:line="76" pos:column="33"/></expr_stmt>
		}<pos:position pos:line="77" pos:column="18"/></block></else></if>
	}<pos:position pos:line="78" pos:column="10"/></block></then></if>
<cpp:endif pos:line="79" pos:column="1">#<cpp:directive pos:line="79" pos:column="2">endif<pos:position pos:line="79" pos:column="7"/></cpp:directive></cpp:endif>

	<if pos:line="81" pos:column="9">if <condition pos:line="81" pos:column="12">(<expr><operator pos:line="81" pos:column="13">!<pos:position pos:line="81" pos:column="14"/></operator><name pos:line="81" pos:column="14">ret<pos:position pos:line="81" pos:column="17"/></name> <operator pos:line="81" pos:column="18">&amp;&amp;<pos:position pos:line="81" pos:column="28"/></operator> <operator pos:line="81" pos:column="21">!<pos:position pos:line="81" pos:column="22"/></operator><call><name pos:line="81" pos:column="22">S_ISREG<pos:position pos:line="81" pos:column="29"/></name><argument_list pos:line="81" pos:column="29">(<argument><expr><name><name pos:line="81" pos:column="30">file<pos:position pos:line="81" pos:column="34"/></name><operator pos:line="81" pos:column="34">-&gt;<pos:position pos:line="81" pos:column="39"/></operator><name pos:line="81" pos:column="36">mode<pos:position pos:line="81" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="81" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="81" pos:column="42"/></condition><then pos:line="81" pos:column="42"> <block pos:line="81" pos:column="43">{
		<expr_stmt><expr><call><name pos:line="82" pos:column="17">rprintf<pos:position pos:line="82" pos:column="24"/></name><argument_list pos:line="82" pos:column="24">(<argument><expr><name pos:line="82" pos:column="25">FINFO<pos:position pos:line="82" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="82" pos:column="32">"make_bak: skipping non-regular file %s\n"<pos:position pos:line="82" pos:column="74"/></literal></expr></argument>, <argument><expr><name pos:line="82" pos:column="76">fname<pos:position pos:line="82" pos:column="81"/></name></expr></argument>)<pos:position pos:line="82" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="83"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="83" pos:column="17">unmake_file<pos:position pos:line="83" pos:column="28"/></name><argument_list pos:line="83" pos:column="28">(<argument><expr><name pos:line="83" pos:column="29">file<pos:position pos:line="83" pos:column="33"/></name></expr></argument>)<pos:position pos:line="83" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="35"/></expr_stmt>
<cpp:ifdef pos:line="84" pos:column="1">#<cpp:directive pos:line="84" pos:column="2">ifdef<pos:position pos:line="84" pos:column="7"/></cpp:directive> <name pos:line="84" pos:column="8">SUPPORT_ACLS<pos:position pos:line="84" pos:column="20"/></name></cpp:ifdef>
		<expr_stmt><expr><call><name pos:line="85" pos:column="17">uncache_tmp_acls<pos:position pos:line="85" pos:column="33"/></name><argument_list pos:line="85" pos:column="33">()<pos:position pos:line="85" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="36"/></expr_stmt>
<cpp:endif pos:line="86" pos:column="1">#<cpp:directive pos:line="86" pos:column="2">endif<pos:position pos:line="86" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:ifdef pos:line="87" pos:column="1">#<cpp:directive pos:line="87" pos:column="2">ifdef<pos:position pos:line="87" pos:column="7"/></cpp:directive> <name pos:line="87" pos:column="8">SUPPORT_XATTRS<pos:position pos:line="87" pos:column="22"/></name></cpp:ifdef>
		<expr_stmt><expr><call><name pos:line="88" pos:column="17">uncache_tmp_xattrs<pos:position pos:line="88" pos:column="35"/></name><argument_list pos:line="88" pos:column="35">()<pos:position pos:line="88" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="38"/></expr_stmt>
<cpp:endif pos:line="89" pos:column="1">#<cpp:directive pos:line="89" pos:column="2">endif<pos:position pos:line="89" pos:column="7"/></cpp:directive></cpp:endif>
		<return pos:line="90" pos:column="17">return <expr><literal type="number" pos:line="90" pos:column="24">3<pos:position pos:line="90" pos:column="25"/></literal></expr>;<pos:position pos:line="90" pos:column="26"/></return>
	}<pos:position pos:line="91" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="93" pos:column="9">/* Copy to backup tree if a file. */</comment>
	<if pos:line="94" pos:column="9">if <condition pos:line="94" pos:column="12">(<expr><operator pos:line="94" pos:column="13">!<pos:position pos:line="94" pos:column="14"/></operator><name pos:line="94" pos:column="14">ret<pos:position pos:line="94" pos:column="17"/></name></expr>)<pos:position pos:line="94" pos:column="18"/></condition><then pos:line="94" pos:column="18"> <block pos:line="94" pos:column="19">{
		<if pos:line="95" pos:column="17">if <condition pos:line="95" pos:column="20">(<expr><call><name pos:line="95" pos:column="21">copy_file<pos:position pos:line="95" pos:column="30"/></name><argument_list pos:line="95" pos:column="30">(<argument><expr><name pos:line="95" pos:column="31">fname<pos:position pos:line="95" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="95" pos:column="38">buf<pos:position pos:line="95" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="95" pos:column="43">-<pos:position pos:line="95" pos:column="44"/></operator><literal type="number" pos:line="95" pos:column="44">1<pos:position pos:line="95" pos:column="45"/></literal></expr></argument>, <argument><expr><name><name pos:line="95" pos:column="47">file<pos:position pos:line="95" pos:column="51"/></name><operator pos:line="95" pos:column="51">-&gt;<pos:position pos:line="95" pos:column="56"/></operator><name pos:line="95" pos:column="53">mode<pos:position pos:line="95" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="95" pos:column="58"/></argument_list></call> <operator pos:line="95" pos:column="59">&lt;<pos:position pos:line="95" pos:column="63"/></operator> <literal type="number" pos:line="95" pos:column="61">0<pos:position pos:line="95" pos:column="62"/></literal></expr>)<pos:position pos:line="95" pos:column="63"/></condition><then pos:line="95" pos:column="63"> <block pos:line="95" pos:column="64">{
			<expr_stmt><expr><call><name pos:line="96" pos:column="25">rsyserr<pos:position pos:line="96" pos:column="32"/></name><argument_list pos:line="96" pos:column="32">(<argument><expr><name pos:line="96" pos:column="33">FERROR<pos:position pos:line="96" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="96" pos:column="41">errno<pos:position pos:line="96" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="96" pos:column="48">"keep_backup failed: %s -&gt; \"%s\""<pos:position pos:line="96" pos:column="85"/></literal></expr></argument>,
				<argument><expr><call><name pos:line="97" pos:column="33">full_fname<pos:position pos:line="97" pos:column="43"/></name><argument_list pos:line="97" pos:column="43">(<argument><expr><name pos:line="97" pos:column="44">fname<pos:position pos:line="97" pos:column="49"/></name></expr></argument>)<pos:position pos:line="97" pos:column="50"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="97" pos:column="52">buf<pos:position pos:line="97" pos:column="55"/></name></expr></argument>)<pos:position pos:line="97" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="57"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="98" pos:column="25">unmake_file<pos:position pos:line="98" pos:column="36"/></name><argument_list pos:line="98" pos:column="36">(<argument><expr><name pos:line="98" pos:column="37">file<pos:position pos:line="98" pos:column="41"/></name></expr></argument>)<pos:position pos:line="98" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="43"/></expr_stmt>
<cpp:ifdef pos:line="99" pos:column="1">#<cpp:directive pos:line="99" pos:column="2">ifdef<pos:position pos:line="99" pos:column="7"/></cpp:directive> <name pos:line="99" pos:column="8">SUPPORT_ACLS<pos:position pos:line="99" pos:column="20"/></name></cpp:ifdef>
			<expr_stmt><expr><call><name pos:line="100" pos:column="25">uncache_tmp_acls<pos:position pos:line="100" pos:column="41"/></name><argument_list pos:line="100" pos:column="41">()<pos:position pos:line="100" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="100" pos:column="44"/></expr_stmt>
<cpp:endif pos:line="101" pos:column="1">#<cpp:directive pos:line="101" pos:column="2">endif<pos:position pos:line="101" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:ifdef pos:line="102" pos:column="1">#<cpp:directive pos:line="102" pos:column="2">ifdef<pos:position pos:line="102" pos:column="7"/></cpp:directive> <name pos:line="102" pos:column="8">SUPPORT_XATTRS<pos:position pos:line="102" pos:column="22"/></name></cpp:ifdef>
			<expr_stmt><expr><call><name pos:line="103" pos:column="25">uncache_tmp_xattrs<pos:position pos:line="103" pos:column="43"/></name><argument_list pos:line="103" pos:column="43">()<pos:position pos:line="103" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="103" pos:column="46"/></expr_stmt>
<cpp:endif pos:line="104" pos:column="1">#<cpp:directive pos:line="104" pos:column="2">endif<pos:position pos:line="104" pos:column="7"/></cpp:directive></cpp:endif>
			<return pos:line="105" pos:column="25">return <expr><literal type="number" pos:line="105" pos:column="32">0<pos:position pos:line="105" pos:column="33"/></literal></expr>;<pos:position pos:line="105" pos:column="34"/></return>
		}<pos:position pos:line="106" pos:column="18"/></block></then></if>
		<if pos:line="107" pos:column="17">if <condition pos:line="107" pos:column="20">(<expr><call><name pos:line="107" pos:column="21">DEBUG_GTE<pos:position pos:line="107" pos:column="30"/></name><argument_list pos:line="107" pos:column="30">(<argument><expr><name pos:line="107" pos:column="31">BACKUP<pos:position pos:line="107" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="107" pos:column="39">1<pos:position pos:line="107" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="107" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="107" pos:column="42"/></condition><then pos:line="107" pos:column="42">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="108" pos:column="25">rprintf<pos:position pos:line="108" pos:column="32"/></name><argument_list pos:line="108" pos:column="32">(<argument><expr><name pos:line="108" pos:column="33">FINFO<pos:position pos:line="108" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="108" pos:column="40">"make_backup: COPY %s successful.\n"<pos:position pos:line="108" pos:column="76"/></literal></expr></argument>, <argument><expr><name pos:line="108" pos:column="78">fname<pos:position pos:line="108" pos:column="83"/></name></expr></argument>)<pos:position pos:line="108" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="108" pos:column="85"/></expr_stmt></block></then></if>
		<expr_stmt><expr><name pos:line="109" pos:column="17">ret<pos:position pos:line="109" pos:column="20"/></name> <operator pos:line="109" pos:column="21">=<pos:position pos:line="109" pos:column="22"/></operator> <literal type="number" pos:line="109" pos:column="23">2<pos:position pos:line="109" pos:column="24"/></literal></expr>;<pos:position pos:line="109" pos:column="25"/></expr_stmt>
	}<pos:position pos:line="110" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="112" pos:column="9">save_preserve_xattrs<pos:position pos:line="112" pos:column="29"/></name> <operator pos:line="112" pos:column="30">=<pos:position pos:line="112" pos:column="31"/></operator> <name pos:line="112" pos:column="32">preserve_xattrs<pos:position pos:line="112" pos:column="47"/></name></expr>;<pos:position pos:line="112" pos:column="48"/></expr_stmt>
	<expr_stmt><expr><name pos:line="113" pos:column="9">preserve_xattrs<pos:position pos:line="113" pos:column="24"/></name> <operator pos:line="113" pos:column="25">=<pos:position pos:line="113" pos:column="26"/></operator> <literal type="number" pos:line="113" pos:column="27">0<pos:position pos:line="113" pos:column="28"/></literal></expr>;<pos:position pos:line="113" pos:column="29"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="114" pos:column="9">set_file_attrs<pos:position pos:line="114" pos:column="23"/></name><argument_list pos:line="114" pos:column="23">(<argument><expr><name pos:line="114" pos:column="24">buf<pos:position pos:line="114" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="114" pos:column="29">file<pos:position pos:line="114" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="114" pos:column="35">NULL<pos:position pos:line="114" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="114" pos:column="41">fname<pos:position pos:line="114" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="114" pos:column="48">0<pos:position pos:line="114" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="114" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="114" pos:column="51"/></expr_stmt>
	<expr_stmt><expr><name pos:line="115" pos:column="9">preserve_xattrs<pos:position pos:line="115" pos:column="24"/></name> <operator pos:line="115" pos:column="25">=<pos:position pos:line="115" pos:column="26"/></operator> <name pos:line="115" pos:column="27">save_preserve_xattrs<pos:position pos:line="115" pos:column="47"/></name></expr>;<pos:position pos:line="115" pos:column="48"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="117" pos:column="9">unmake_file<pos:position pos:line="117" pos:column="20"/></name><argument_list pos:line="117" pos:column="20">(<argument><expr><name pos:line="117" pos:column="21">file<pos:position pos:line="117" pos:column="25"/></name></expr></argument>)<pos:position pos:line="117" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="117" pos:column="27"/></expr_stmt>
<cpp:ifdef pos:line="118" pos:column="1">#<cpp:directive pos:line="118" pos:column="2">ifdef<pos:position pos:line="118" pos:column="7"/></cpp:directive> <name pos:line="118" pos:column="8">SUPPORT_ACLS<pos:position pos:line="118" pos:column="20"/></name></cpp:ifdef>
	<expr_stmt><expr><call><name pos:line="119" pos:column="9">uncache_tmp_acls<pos:position pos:line="119" pos:column="25"/></name><argument_list pos:line="119" pos:column="25">()<pos:position pos:line="119" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="119" pos:column="28"/></expr_stmt>
<cpp:endif pos:line="120" pos:column="1">#<cpp:directive pos:line="120" pos:column="2">endif<pos:position pos:line="120" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:ifdef pos:line="121" pos:column="1">#<cpp:directive pos:line="121" pos:column="2">ifdef<pos:position pos:line="121" pos:column="7"/></cpp:directive> <name pos:line="121" pos:column="8">SUPPORT_XATTRS<pos:position pos:line="121" pos:column="22"/></name></cpp:ifdef>
	<expr_stmt><expr><call><name pos:line="122" pos:column="9">uncache_tmp_xattrs<pos:position pos:line="122" pos:column="27"/></name><argument_list pos:line="122" pos:column="27">()<pos:position pos:line="122" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="122" pos:column="30"/></expr_stmt>
<cpp:endif pos:line="123" pos:column="1">#<cpp:directive pos:line="123" pos:column="2">endif<pos:position pos:line="123" pos:column="7"/></cpp:directive></cpp:endif>

  <label><name pos:line="125" pos:column="3">success<pos:position pos:line="125" pos:column="10"/></name>:<pos:position pos:line="125" pos:column="11"/></label>
	<if pos:line="126" pos:column="9">if <condition pos:line="126" pos:column="12">(<expr><call><name pos:line="126" pos:column="13">INFO_GTE<pos:position pos:line="126" pos:column="21"/></name><argument_list pos:line="126" pos:column="21">(<argument><expr><name pos:line="126" pos:column="22">BACKUP<pos:position pos:line="126" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="126" pos:column="30">1<pos:position pos:line="126" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="126" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="126" pos:column="33"/></condition><then pos:line="126" pos:column="33">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="127" pos:column="17">rprintf<pos:position pos:line="127" pos:column="24"/></name><argument_list pos:line="127" pos:column="24">(<argument><expr><name pos:line="127" pos:column="25">FINFO<pos:position pos:line="127" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="127" pos:column="32">"backed up %s to %s\n"<pos:position pos:line="127" pos:column="54"/></literal></expr></argument>, <argument><expr><name pos:line="127" pos:column="56">fname<pos:position pos:line="127" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="127" pos:column="63">buf<pos:position pos:line="127" pos:column="66"/></name></expr></argument>)<pos:position pos:line="127" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="127" pos:column="68"/></expr_stmt></block></then></if>
	<return pos:line="128" pos:column="9">return <expr><name pos:line="128" pos:column="16">ret<pos:position pos:line="128" pos:column="19"/></name></expr>;<pos:position pos:line="128" pos:column="20"/></return>
}<pos:position pos:line="129" pos:column="2"/></block></function></unit>
