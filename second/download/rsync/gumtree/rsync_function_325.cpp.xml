<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_function_325.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int64<pos:position pos:line="1" pos:column="6"/></name></type> <name pos:line="1" pos:column="7">read_longint<pos:position pos:line="1" pos:column="19"/></name><parameter_list pos:line="1" pos:column="19">(<parameter><decl><type><name pos:line="1" pos:column="20">int<pos:position pos:line="1" pos:column="23"/></name></type> <name pos:line="1" pos:column="24">f<pos:position pos:line="1" pos:column="25"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="26"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><specifier pos:line="3" pos:column="9">extern<pos:position pos:line="3" pos:column="15"/></specifier> <type><name pos:line="3" pos:column="16">int<pos:position pos:line="3" pos:column="19"/></name></type> <name pos:line="3" pos:column="20">remote_version<pos:position pos:line="3" pos:column="34"/></name></decl>;<pos:position pos:line="3" pos:column="35"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int64<pos:position pos:line="4" pos:column="14"/></name></type> <name pos:line="4" pos:column="15">ret<pos:position pos:line="4" pos:column="18"/></name></decl>;<pos:position pos:line="4" pos:column="19"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">char<pos:position pos:line="5" pos:column="13"/></name></type> <name><name pos:line="5" pos:column="14">b<pos:position pos:line="5" pos:column="15"/></name><index pos:line="5" pos:column="15">[<expr><literal type="number" pos:line="5" pos:column="16">8<pos:position pos:line="5" pos:column="17"/></literal></expr>]<pos:position pos:line="5" pos:column="18"/></index></name></decl>;<pos:position pos:line="5" pos:column="19"/></decl_stmt>
	<expr_stmt><expr><name pos:line="6" pos:column="9">ret<pos:position pos:line="6" pos:column="12"/></name> <operator pos:line="6" pos:column="13">=<pos:position pos:line="6" pos:column="14"/></operator> <call><name pos:line="6" pos:column="15">read_int<pos:position pos:line="6" pos:column="23"/></name><argument_list pos:line="6" pos:column="23">(<argument><expr><name pos:line="6" pos:column="24">f<pos:position pos:line="6" pos:column="25"/></name></expr></argument>)<pos:position pos:line="6" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="27"/></expr_stmt>

	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><name pos:line="8" pos:column="13">ret<pos:position pos:line="8" pos:column="16"/></name> <operator pos:line="8" pos:column="17">!=<pos:position pos:line="8" pos:column="19"/></operator> <operator pos:line="8" pos:column="20">-<pos:position pos:line="8" pos:column="21"/></operator><literal type="number" pos:line="8" pos:column="21">1<pos:position pos:line="8" pos:column="22"/></literal></expr>)<pos:position pos:line="8" pos:column="23"/></condition><then pos:line="8" pos:column="23"> <block type="pseudo"><return pos:line="8" pos:column="24">return <expr><name pos:line="8" pos:column="31">ret<pos:position pos:line="8" pos:column="34"/></name></expr>;<pos:position pos:line="8" pos:column="35"/></return></block></then></if>

<cpp:ifndef pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">ifndef<pos:position pos:line="10" pos:column="8"/></cpp:directive> <name pos:line="10" pos:column="9">HAVE_LONGLONG<pos:position pos:line="10" pos:column="22"/></name></cpp:ifndef>
	<expr_stmt><expr><call><name pos:line="11" pos:column="9">fprintf<pos:position pos:line="11" pos:column="16"/></name><argument_list pos:line="11" pos:column="16">(<argument><expr><name pos:line="11" pos:column="17">FERROR<pos:position pos:line="11" pos:column="23"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="11" pos:column="24">"Integer overflow - attempted 64 bit offset\n"<pos:position pos:line="11" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="72"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="12" pos:column="9">exit_cleanup<pos:position pos:line="12" pos:column="21"/></name><argument_list pos:line="12" pos:column="21">(<argument><expr><literal type="number" pos:line="12" pos:column="22">1<pos:position pos:line="12" pos:column="23"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="25"/></expr_stmt>
<cpp:else pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">else<pos:position pos:line="13" pos:column="6"/></cpp:directive></cpp:else>
	<if pos:line="14" pos:column="9">if <condition pos:line="14" pos:column="12">(<expr><name pos:line="14" pos:column="13">remote_version<pos:position pos:line="14" pos:column="27"/></name> <operator pos:line="14" pos:column="28">&gt;=<pos:position pos:line="14" pos:column="33"/></operator> <literal type="number" pos:line="14" pos:column="31">16<pos:position pos:line="14" pos:column="33"/></literal></expr>)<pos:position pos:line="14" pos:column="34"/></condition><then pos:line="14" pos:column="34"> <block pos:line="14" pos:column="35">{
		<if pos:line="15" pos:column="17">if <condition pos:line="15" pos:column="20">(<expr><operator pos:line="15" pos:column="21">(<pos:position pos:line="15" pos:column="22"/></operator><name pos:line="15" pos:column="22">ret<pos:position pos:line="15" pos:column="25"/></name><operator pos:line="15" pos:column="25">=<pos:position pos:line="15" pos:column="26"/></operator><call><name pos:line="15" pos:column="26">readfd<pos:position pos:line="15" pos:column="32"/></name><argument_list pos:line="15" pos:column="32">(<argument><expr><name pos:line="15" pos:column="33">f<pos:position pos:line="15" pos:column="34"/></name></expr></argument>,<argument><expr><name pos:line="15" pos:column="35">b<pos:position pos:line="15" pos:column="36"/></name></expr></argument>,<argument><expr><literal type="number" pos:line="15" pos:column="37">8<pos:position pos:line="15" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="39"/></argument_list></call><operator pos:line="15" pos:column="39">)<pos:position pos:line="15" pos:column="40"/></operator> <operator pos:line="15" pos:column="41">!=<pos:position pos:line="15" pos:column="43"/></operator> <literal type="number" pos:line="15" pos:column="44">8<pos:position pos:line="15" pos:column="45"/></literal></expr>)<pos:position pos:line="15" pos:column="46"/></condition><then pos:line="15" pos:column="46"> <block pos:line="15" pos:column="47">{
			<if pos:line="16" pos:column="25">if <condition pos:line="16" pos:column="28">(<expr><name pos:line="16" pos:column="29">verbose<pos:position pos:line="16" pos:column="36"/></name> <operator pos:line="16" pos:column="37">&gt;<pos:position pos:line="16" pos:column="41"/></operator> <literal type="number" pos:line="16" pos:column="39">1<pos:position pos:line="16" pos:column="40"/></literal></expr>)<pos:position pos:line="16" pos:column="41"/></condition><then pos:line="16" pos:column="41"> 
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="17" pos:column="33">fprintf<pos:position pos:line="17" pos:column="40"/></name><argument_list pos:line="17" pos:column="40">(<argument><expr><name pos:line="17" pos:column="41">FERROR<pos:position pos:line="17" pos:column="47"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="17" pos:column="48">"(%d) Error reading %d bytes : %s\n"<pos:position pos:line="17" pos:column="84"/></literal></expr></argument>,
					<argument><expr><call><name pos:line="18" pos:column="41">getpid<pos:position pos:line="18" pos:column="47"/></name><argument_list pos:line="18" pos:column="47">()<pos:position pos:line="18" pos:column="49"/></argument_list></call></expr></argument>,<argument><expr><literal type="number" pos:line="18" pos:column="50">8<pos:position pos:line="18" pos:column="51"/></literal></expr></argument>,<argument><expr><ternary><condition><expr><name pos:line="18" pos:column="52">ret<pos:position pos:line="18" pos:column="55"/></name><operator pos:line="18" pos:column="55">==<pos:position pos:line="18" pos:column="57"/></operator><operator pos:line="18" pos:column="57">-<pos:position pos:line="18" pos:column="58"/></operator><literal type="number" pos:line="18" pos:column="58">1<pos:position pos:line="18" pos:column="59"/></literal></expr>?<pos:position pos:line="18" pos:column="60"/></condition><then><expr><call><name pos:line="18" pos:column="60">strerror<pos:position pos:line="18" pos:column="68"/></name><argument_list pos:line="18" pos:column="68">(<argument><expr><name pos:line="18" pos:column="69">errno<pos:position pos:line="18" pos:column="74"/></name></expr></argument>)<pos:position pos:line="18" pos:column="75"/></argument_list></call></expr></then><else pos:line="18" pos:column="75">:<expr><literal type="string" pos:line="18" pos:column="76">"EOF"<pos:position pos:line="18" pos:column="81"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="18" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="83"/></expr_stmt></block></then></if>
			<expr_stmt><expr><call><name pos:line="19" pos:column="25">exit_cleanup<pos:position pos:line="19" pos:column="37"/></name><argument_list pos:line="19" pos:column="37">(<argument><expr><literal type="number" pos:line="19" pos:column="38">1<pos:position pos:line="19" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="41"/></expr_stmt>
		}<pos:position pos:line="20" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name pos:line="21" pos:column="17">total_read<pos:position pos:line="21" pos:column="27"/></name> <operator pos:line="21" pos:column="28">+=<pos:position pos:line="21" pos:column="30"/></operator> <literal type="number" pos:line="21" pos:column="31">8<pos:position pos:line="21" pos:column="32"/></literal></expr>;<pos:position pos:line="21" pos:column="33"/></expr_stmt>
		<expr_stmt><expr><name pos:line="22" pos:column="17">ret<pos:position pos:line="22" pos:column="20"/></name> <operator pos:line="22" pos:column="21">=<pos:position pos:line="22" pos:column="22"/></operator> <call><name pos:line="22" pos:column="23">IVAL<pos:position pos:line="22" pos:column="27"/></name><argument_list pos:line="22" pos:column="27">(<argument><expr><name pos:line="22" pos:column="28">b<pos:position pos:line="22" pos:column="29"/></name></expr></argument>,<argument><expr><literal type="number" pos:line="22" pos:column="30">0<pos:position pos:line="22" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="32"/></argument_list></call> <operator pos:line="22" pos:column="33">|<pos:position pos:line="22" pos:column="34"/></operator> <operator pos:line="22" pos:column="35">(<pos:position pos:line="22" pos:column="36"/></operator><operator pos:line="22" pos:column="36">(<pos:position pos:line="22" pos:column="37"/></operator><operator pos:line="22" pos:column="37">(<pos:position pos:line="22" pos:column="38"/></operator><name pos:line="22" pos:column="38">int64<pos:position pos:line="22" pos:column="43"/></name><operator pos:line="22" pos:column="43">)<pos:position pos:line="22" pos:column="44"/></operator><call><name pos:line="22" pos:column="44">IVAL<pos:position pos:line="22" pos:column="48"/></name><argument_list pos:line="22" pos:column="48">(<argument><expr><name pos:line="22" pos:column="49">b<pos:position pos:line="22" pos:column="50"/></name></expr></argument>,<argument><expr><literal type="number" pos:line="22" pos:column="51">4<pos:position pos:line="22" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="53"/></argument_list></call><operator pos:line="22" pos:column="53">)<pos:position pos:line="22" pos:column="54"/></operator><operator pos:line="22" pos:column="54">&lt;&lt;<pos:position pos:line="22" pos:column="62"/></operator><literal type="number" pos:line="22" pos:column="56">32<pos:position pos:line="22" pos:column="58"/></literal><operator pos:line="22" pos:column="58">)<pos:position pos:line="22" pos:column="59"/></operator></expr>;<pos:position pos:line="22" pos:column="60"/></expr_stmt>
	}<pos:position pos:line="23" pos:column="10"/></block></then></if>
<cpp:endif pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">endif<pos:position pos:line="24" pos:column="7"/></cpp:directive></cpp:endif>

	<return pos:line="26" pos:column="9">return <expr><name pos:line="26" pos:column="16">ret<pos:position pos:line="26" pos:column="19"/></name></expr>;<pos:position pos:line="26" pos:column="20"/></return>
}<pos:position pos:line="27" pos:column="2"/></block></function></unit>
