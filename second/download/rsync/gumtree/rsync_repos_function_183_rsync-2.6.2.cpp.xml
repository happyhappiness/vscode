<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_183_rsync-2.6.2.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">rprintf<pos:position pos:line="1" pos:column="13"/></name><parameter_list pos:line="1" pos:column="13">(<parameter><decl><type><name><name pos:line="1" pos:column="14">enum<pos:position pos:line="1" pos:column="18"/></name> <name pos:line="1" pos:column="19">logcode<pos:position pos:line="1" pos:column="26"/></name></name></type> <name pos:line="1" pos:column="27">code<pos:position pos:line="1" pos:column="31"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="33">const<pos:position pos:line="1" pos:column="38"/></specifier> <name pos:line="1" pos:column="39">char<pos:position pos:line="1" pos:column="43"/></name> <modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier></type><name pos:line="1" pos:column="45">format<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>, <parameter><decl><type><modifier pos:line="1" pos:column="53">...<pos:position pos:line="1" pos:column="56"/></modifier></type></decl></parameter>)<pos:position pos:line="1" pos:column="57"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">va_list<pos:position pos:line="3" pos:column="16"/></name></type> <name pos:line="3" pos:column="17">ap<pos:position pos:line="3" pos:column="19"/></name></decl>;<pos:position pos:line="3" pos:column="20"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name></type> <name><name pos:line="4" pos:column="14">buf<pos:position pos:line="4" pos:column="17"/></name><index pos:line="4" pos:column="17">[<expr><literal type="number" pos:line="4" pos:column="18">1024<pos:position pos:line="4" pos:column="22"/></literal></expr>]<pos:position pos:line="4" pos:column="23"/></index></name></decl>;<pos:position pos:line="4" pos:column="24"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">len<pos:position pos:line="5" pos:column="16"/></name></decl>;<pos:position pos:line="5" pos:column="17"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="7" pos:column="9">va_start<pos:position pos:line="7" pos:column="17"/></name><argument_list pos:line="7" pos:column="17">(<argument><expr><name pos:line="7" pos:column="18">ap<pos:position pos:line="7" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="22">format<pos:position pos:line="7" pos:column="28"/></name></expr></argument>)<pos:position pos:line="7" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="30"/></expr_stmt>
	<comment type="block" pos:line="8" pos:column="9">/* Note: might return -1 */</comment>
	<expr_stmt><expr><name pos:line="9" pos:column="9">len<pos:position pos:line="9" pos:column="12"/></name> <operator pos:line="9" pos:column="13">=<pos:position pos:line="9" pos:column="14"/></operator> <call><name pos:line="9" pos:column="15">vsnprintf<pos:position pos:line="9" pos:column="24"/></name><argument_list pos:line="9" pos:column="24">(<argument><expr><name pos:line="9" pos:column="25">buf<pos:position pos:line="9" pos:column="28"/></name></expr></argument>, <argument><expr><sizeof pos:line="9" pos:column="30">sizeof<argument_list pos:line="9" pos:column="36">(<argument><expr><name pos:line="9" pos:column="37">buf<pos:position pos:line="9" pos:column="40"/></name></expr></argument>)<pos:position pos:line="9" pos:column="41"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="9" pos:column="43">format<pos:position pos:line="9" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="51">ap<pos:position pos:line="9" pos:column="53"/></name></expr></argument>)<pos:position pos:line="9" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="55"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="10" pos:column="9">va_end<pos:position pos:line="10" pos:column="15"/></name><argument_list pos:line="10" pos:column="15">(<argument><expr><name pos:line="10" pos:column="16">ap<pos:position pos:line="10" pos:column="18"/></name></expr></argument>)<pos:position pos:line="10" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="20"/></expr_stmt>

	<comment type="block" pos:line="12" pos:column="9">/* Deal with buffer overruns.  Instead of panicking, just
	 * truncate the resulting string.  Note that some vsnprintf()s
	 * return -1 on truncation, e.g., glibc 2.0.6 and earlier. */</comment>
	<if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><operator pos:line="15" pos:column="13">(<pos:position pos:line="15" pos:column="14"/></operator><name pos:line="15" pos:column="14">size_t<pos:position pos:line="15" pos:column="20"/></name><operator pos:line="15" pos:column="20">)<pos:position pos:line="15" pos:column="21"/></operator> <name pos:line="15" pos:column="22">len<pos:position pos:line="15" pos:column="25"/></name> <operator pos:line="15" pos:column="26">&gt;<pos:position pos:line="15" pos:column="30"/></operator> <sizeof pos:line="15" pos:column="28">sizeof<argument_list pos:line="15" pos:column="34">(<argument><expr><name pos:line="15" pos:column="35">buf<pos:position pos:line="15" pos:column="38"/></name></expr></argument>)<pos:position pos:line="15" pos:column="39"/></argument_list></sizeof><operator pos:line="15" pos:column="39">-<pos:position pos:line="15" pos:column="40"/></operator><literal type="number" pos:line="15" pos:column="40">1<pos:position pos:line="15" pos:column="41"/></literal>  <operator pos:line="15" pos:column="43">||<pos:position pos:line="15" pos:column="45"/></operator>  <name pos:line="15" pos:column="47">len<pos:position pos:line="15" pos:column="50"/></name> <operator pos:line="15" pos:column="51">&lt;<pos:position pos:line="15" pos:column="55"/></operator> <literal type="number" pos:line="15" pos:column="53">0<pos:position pos:line="15" pos:column="54"/></literal></expr>)<pos:position pos:line="15" pos:column="55"/></condition><then pos:line="15" pos:column="55"> <block pos:line="15" pos:column="56">{
		<decl_stmt><decl><type><specifier pos:line="16" pos:column="17">const<pos:position pos:line="16" pos:column="22"/></specifier> <name pos:line="16" pos:column="23">char<pos:position pos:line="16" pos:column="27"/></name></type> <name><name pos:line="16" pos:column="28">ellipsis<pos:position pos:line="16" pos:column="36"/></name><index pos:line="16" pos:column="36">[]<pos:position pos:line="16" pos:column="38"/></index></name> <init pos:line="16" pos:column="39">= <expr><literal type="string" pos:line="16" pos:column="41">"[...]"<pos:position pos:line="16" pos:column="48"/></literal></expr></init></decl>;<pos:position pos:line="16" pos:column="49"/></decl_stmt>

		<comment type="block" pos:line="18" pos:column="17">/* Reset length, and zero-terminate the end of our buffer */</comment>
		<expr_stmt><expr><name pos:line="19" pos:column="17">len<pos:position pos:line="19" pos:column="20"/></name> <operator pos:line="19" pos:column="21">=<pos:position pos:line="19" pos:column="22"/></operator> <sizeof pos:line="19" pos:column="23">sizeof<argument_list pos:line="19" pos:column="29">(<argument><expr><name pos:line="19" pos:column="30">buf<pos:position pos:line="19" pos:column="33"/></name></expr></argument>)<pos:position pos:line="19" pos:column="34"/></argument_list></sizeof><operator pos:line="19" pos:column="34">-<pos:position pos:line="19" pos:column="35"/></operator><literal type="number" pos:line="19" pos:column="35">1<pos:position pos:line="19" pos:column="36"/></literal></expr>;<pos:position pos:line="19" pos:column="37"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="20" pos:column="17">buf<pos:position pos:line="20" pos:column="20"/></name><index pos:line="20" pos:column="20">[<expr><name pos:line="20" pos:column="21">len<pos:position pos:line="20" pos:column="24"/></name></expr>]<pos:position pos:line="20" pos:column="25"/></index></name> <operator pos:line="20" pos:column="26">=<pos:position pos:line="20" pos:column="27"/></operator> <literal type="char" pos:line="20" pos:column="28">'\0'<pos:position pos:line="20" pos:column="32"/></literal></expr>;<pos:position pos:line="20" pos:column="33"/></expr_stmt>

		<comment type="block" pos:line="22" pos:column="17">/* Copy the ellipsis to the end of the string, but give
		 * us one extra character:
		 *
		 *                  v--- null byte at buf[sizeof(buf)-1]
		 *        abcdefghij0
		 *     -&gt; abcd[...]00  &lt;-- now two null bytes at end
		 *
		 * If the input format string has a trailing newline,
		 * we copy it into that extra null; if it doesn't, well,
		 * all we lose is one byte.  */</comment>
		<expr_stmt><expr><call><name pos:line="32" pos:column="17">strncpy<pos:position pos:line="32" pos:column="24"/></name><argument_list pos:line="32" pos:column="24">(<argument><expr><name pos:line="32" pos:column="25">buf<pos:position pos:line="32" pos:column="28"/></name><operator pos:line="32" pos:column="28">+<pos:position pos:line="32" pos:column="29"/></operator><name pos:line="32" pos:column="29">len<pos:position pos:line="32" pos:column="32"/></name><operator pos:line="32" pos:column="32">-<pos:position pos:line="32" pos:column="33"/></operator><sizeof pos:line="32" pos:column="33">sizeof<argument_list pos:line="32" pos:column="39">(<argument><expr><name pos:line="32" pos:column="40">ellipsis<pos:position pos:line="32" pos:column="48"/></name></expr></argument>)<pos:position pos:line="32" pos:column="49"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="32" pos:column="51">ellipsis<pos:position pos:line="32" pos:column="59"/></name></expr></argument>, <argument><expr><sizeof pos:line="32" pos:column="61">sizeof<argument_list pos:line="32" pos:column="67">(<argument><expr><name pos:line="32" pos:column="68">ellipsis<pos:position pos:line="32" pos:column="76"/></name></expr></argument>)<pos:position pos:line="32" pos:column="77"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="32" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="79"/></expr_stmt>
		<if pos:line="33" pos:column="17">if <condition pos:line="33" pos:column="20">(<expr><name><name pos:line="33" pos:column="21">format<pos:position pos:line="33" pos:column="27"/></name><index pos:line="33" pos:column="27">[<expr><call><name pos:line="33" pos:column="28">strlen<pos:position pos:line="33" pos:column="34"/></name><argument_list pos:line="33" pos:column="34">(<argument><expr><name pos:line="33" pos:column="35">format<pos:position pos:line="33" pos:column="41"/></name></expr></argument>)<pos:position pos:line="33" pos:column="42"/></argument_list></call><operator pos:line="33" pos:column="42">-<pos:position pos:line="33" pos:column="43"/></operator><literal type="number" pos:line="33" pos:column="43">1<pos:position pos:line="33" pos:column="44"/></literal></expr>]<pos:position pos:line="33" pos:column="45"/></index></name> <operator pos:line="33" pos:column="46">==<pos:position pos:line="33" pos:column="48"/></operator> <literal type="char" pos:line="33" pos:column="49">'\n'<pos:position pos:line="33" pos:column="53"/></literal></expr>)<pos:position pos:line="33" pos:column="54"/></condition><then pos:line="33" pos:column="54"> <block pos:line="33" pos:column="55">{
			<expr_stmt><expr><name><name pos:line="34" pos:column="25">buf<pos:position pos:line="34" pos:column="28"/></name><index pos:line="34" pos:column="28">[<expr><name pos:line="34" pos:column="29">len<pos:position pos:line="34" pos:column="32"/></name><operator pos:line="34" pos:column="32">-<pos:position pos:line="34" pos:column="33"/></operator><literal type="number" pos:line="34" pos:column="33">1<pos:position pos:line="34" pos:column="34"/></literal></expr>]<pos:position pos:line="34" pos:column="35"/></index></name> <operator pos:line="34" pos:column="36">=<pos:position pos:line="34" pos:column="37"/></operator> <literal type="char" pos:line="34" pos:column="38">'\n'<pos:position pos:line="34" pos:column="42"/></literal></expr>;<pos:position pos:line="34" pos:column="43"/></expr_stmt>
		}<pos:position pos:line="35" pos:column="18"/></block></then></if>
	}<pos:position pos:line="36" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="38" pos:column="9">rwrite<pos:position pos:line="38" pos:column="15"/></name><argument_list pos:line="38" pos:column="15">(<argument><expr><name pos:line="38" pos:column="16">code<pos:position pos:line="38" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="22">buf<pos:position pos:line="38" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="27">len<pos:position pos:line="38" pos:column="30"/></name></expr></argument>)<pos:position pos:line="38" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="32"/></expr_stmt>
}<pos:position pos:line="39" pos:column="2"/></block></function></unit>
