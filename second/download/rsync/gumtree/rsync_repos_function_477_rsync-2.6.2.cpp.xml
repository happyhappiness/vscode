<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_477_rsync-2.6.2.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">get_ai<pos:position pos:line="1" pos:column="18"/></name><parameter_list pos:line="1" pos:column="18">(<parameter><decl><type><name><name pos:line="1" pos:column="19">struct<pos:position pos:line="1" pos:column="25"/></name> <name pos:line="1" pos:column="26">addrinfo<pos:position pos:line="1" pos:column="34"/></name></name> <modifier pos:line="1" pos:column="35">*<pos:position pos:line="1" pos:column="36"/></modifier><modifier pos:line="1" pos:column="36">*<pos:position pos:line="1" pos:column="37"/></modifier></type> <name pos:line="1" pos:column="38">to_ai<pos:position pos:line="1" pos:column="43"/></name></decl></parameter>,
		   <parameter><decl><type><name><name pos:line="2" pos:column="20">struct<pos:position pos:line="2" pos:column="26"/></name> <name pos:line="2" pos:column="27">addrinfo<pos:position pos:line="2" pos:column="35"/></name></name> <specifier pos:line="2" pos:column="36">const<pos:position pos:line="2" pos:column="41"/></specifier> <modifier pos:line="2" pos:column="42">*<pos:position pos:line="2" pos:column="43"/></modifier></type> <name pos:line="2" pos:column="44">pai<pos:position pos:line="2" pos:column="47"/></name></decl></parameter>,
		   <parameter><decl><type><name><name pos:line="3" pos:column="20">struct<pos:position pos:line="3" pos:column="26"/></name> <name pos:line="3" pos:column="27">afd<pos:position pos:line="3" pos:column="30"/></name></name> <modifier pos:line="3" pos:column="31">*<pos:position pos:line="3" pos:column="32"/></modifier></type><name pos:line="3" pos:column="32">afd<pos:position pos:line="3" pos:column="35"/></name></decl></parameter>,
		   <parameter><decl><type><specifier pos:line="4" pos:column="20">const<pos:position pos:line="4" pos:column="25"/></specifier> <name pos:line="4" pos:column="26">char<pos:position pos:line="4" pos:column="30"/></name> <modifier pos:line="4" pos:column="31">*<pos:position pos:line="4" pos:column="32"/></modifier></type><name pos:line="4" pos:column="32">addr<pos:position pos:line="4" pos:column="36"/></name></decl></parameter>,
		   <parameter><decl><type><name pos:line="5" pos:column="20">short<pos:position pos:line="5" pos:column="25"/></name></type> <name pos:line="5" pos:column="26">port<pos:position pos:line="5" pos:column="30"/></name></decl></parameter>)<pos:position pos:line="5" pos:column="31"/></parameter_list>
<block pos:line="6" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">char<pos:position pos:line="7" pos:column="13"/></name> <modifier pos:line="7" pos:column="14">*<pos:position pos:line="7" pos:column="15"/></modifier></type><name pos:line="7" pos:column="15">p<pos:position pos:line="7" pos:column="16"/></name></decl>;<pos:position pos:line="7" pos:column="17"/></decl_stmt>
	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><operator pos:line="8" pos:column="13">(<pos:position pos:line="8" pos:column="14"/></operator><operator pos:line="8" pos:column="14">*<pos:position pos:line="8" pos:column="15"/></operator><name pos:line="8" pos:column="15">to_ai<pos:position pos:line="8" pos:column="20"/></name> <operator pos:line="8" pos:column="21">=<pos:position pos:line="8" pos:column="22"/></operator> <operator pos:line="8" pos:column="23">(<pos:position pos:line="8" pos:column="24"/></operator>struct <name pos:line="8" pos:column="31">addrinfo<pos:position pos:line="8" pos:column="39"/></name> <operator pos:line="8" pos:column="40">*<pos:position pos:line="8" pos:column="41"/></operator><operator pos:line="8" pos:column="41">)<pos:position pos:line="8" pos:column="42"/></operator><call><name pos:line="8" pos:column="42">malloc<pos:position pos:line="8" pos:column="48"/></name><argument_list pos:line="8" pos:column="48">(<argument><expr><sizeof pos:line="8" pos:column="49">sizeof<argument_list pos:line="8" pos:column="55">(<argument><expr pos:line="8" pos:column="56">struct <name pos:line="8" pos:column="63">addrinfo<pos:position pos:line="8" pos:column="71"/></name></expr></argument>)<pos:position pos:line="8" pos:column="72"/></argument_list></sizeof> <operator pos:line="8" pos:column="73">+<pos:position pos:line="8" pos:column="74"/></operator>
					      <operator pos:line="9" pos:column="47">(<pos:position pos:line="9" pos:column="48"/></operator><name><operator pos:line="9" pos:column="48">(<pos:position pos:line="9" pos:column="49"/></operator><name pos:line="9" pos:column="49">afd<pos:position pos:line="9" pos:column="52"/></name><operator pos:line="9" pos:column="52">)<pos:position pos:line="9" pos:column="53"/></operator><operator pos:line="9" pos:column="53">-&gt;<pos:position pos:line="9" pos:column="58"/></operator><name pos:line="9" pos:column="55">a_socklen<pos:position pos:line="9" pos:column="64"/></name></name><operator pos:line="9" pos:column="64">)<pos:position pos:line="9" pos:column="65"/></operator></expr></argument>)<pos:position pos:line="9" pos:column="66"/></argument_list></call><operator pos:line="9" pos:column="66">)<pos:position pos:line="9" pos:column="67"/></operator>
	    <operator pos:line="10" pos:column="13">==<pos:position pos:line="10" pos:column="15"/></operator> <name pos:line="10" pos:column="16">NULL<pos:position pos:line="10" pos:column="20"/></name></expr>)<pos:position pos:line="10" pos:column="21"/></condition><then pos:line="10" pos:column="21"> 
		<block type="pseudo"><return pos:line="11" pos:column="17">return <expr><literal type="number" pos:line="11" pos:column="24">0<pos:position pos:line="11" pos:column="25"/></literal></expr>;<pos:position pos:line="11" pos:column="26"/></return></block></then></if>
	<expr_stmt><expr><call><name pos:line="12" pos:column="9">memcpy<pos:position pos:line="12" pos:column="15"/></name><argument_list pos:line="12" pos:column="15">(<argument><expr><operator pos:line="12" pos:column="16">*<pos:position pos:line="12" pos:column="17"/></operator><name pos:line="12" pos:column="17">to_ai<pos:position pos:line="12" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="24">pai<pos:position pos:line="12" pos:column="27"/></name></expr></argument>, <argument><expr><sizeof pos:line="12" pos:column="29">sizeof<argument_list pos:line="12" pos:column="35">(<argument><expr pos:line="12" pos:column="36">struct <name pos:line="12" pos:column="43">addrinfo<pos:position pos:line="12" pos:column="51"/></name></expr></argument>)<pos:position pos:line="12" pos:column="52"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="12" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="54"/></expr_stmt>
	<expr_stmt><expr><name><operator pos:line="13" pos:column="9">(<pos:position pos:line="13" pos:column="10"/></operator><operator pos:line="13" pos:column="10">*<pos:position pos:line="13" pos:column="11"/></operator><name pos:line="13" pos:column="11">to_ai<pos:position pos:line="13" pos:column="16"/></name><operator pos:line="13" pos:column="16">)<pos:position pos:line="13" pos:column="17"/></operator><operator pos:line="13" pos:column="17">-&gt;<pos:position pos:line="13" pos:column="22"/></operator><name pos:line="13" pos:column="19">ai_addr<pos:position pos:line="13" pos:column="26"/></name></name> <operator pos:line="13" pos:column="27">=<pos:position pos:line="13" pos:column="28"/></operator> <operator pos:line="13" pos:column="29">(<pos:position pos:line="13" pos:column="30"/></operator>struct <name pos:line="13" pos:column="37">sockaddr<pos:position pos:line="13" pos:column="45"/></name> <operator pos:line="13" pos:column="46">*<pos:position pos:line="13" pos:column="47"/></operator><operator pos:line="13" pos:column="47">)<pos:position pos:line="13" pos:column="48"/></operator><operator pos:line="13" pos:column="48">(<pos:position pos:line="13" pos:column="49"/></operator><operator pos:line="13" pos:column="49">(<pos:position pos:line="13" pos:column="50"/></operator><operator pos:line="13" pos:column="50">*<pos:position pos:line="13" pos:column="51"/></operator><name pos:line="13" pos:column="51">to_ai<pos:position pos:line="13" pos:column="56"/></name><operator pos:line="13" pos:column="56">)<pos:position pos:line="13" pos:column="57"/></operator> <operator pos:line="13" pos:column="58">+<pos:position pos:line="13" pos:column="59"/></operator> <literal type="number" pos:line="13" pos:column="60">1<pos:position pos:line="13" pos:column="61"/></literal><operator pos:line="13" pos:column="61">)<pos:position pos:line="13" pos:column="62"/></operator></expr>;<pos:position pos:line="13" pos:column="63"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="14" pos:column="9">memset<pos:position pos:line="14" pos:column="15"/></name><argument_list pos:line="14" pos:column="15">(<argument><expr><name><operator pos:line="14" pos:column="16">(<pos:position pos:line="14" pos:column="17"/></operator><operator pos:line="14" pos:column="17">*<pos:position pos:line="14" pos:column="18"/></operator><name pos:line="14" pos:column="18">to_ai<pos:position pos:line="14" pos:column="23"/></name><operator pos:line="14" pos:column="23">)<pos:position pos:line="14" pos:column="24"/></operator><operator pos:line="14" pos:column="24">-&gt;<pos:position pos:line="14" pos:column="29"/></operator><name pos:line="14" pos:column="26">ai_addr<pos:position pos:line="14" pos:column="33"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="14" pos:column="35">0<pos:position pos:line="14" pos:column="36"/></literal></expr></argument>, <argument><expr><name><operator pos:line="14" pos:column="38">(<pos:position pos:line="14" pos:column="39"/></operator><name pos:line="14" pos:column="39">afd<pos:position pos:line="14" pos:column="42"/></name><operator pos:line="14" pos:column="42">)<pos:position pos:line="14" pos:column="43"/></operator><operator pos:line="14" pos:column="43">-&gt;<pos:position pos:line="14" pos:column="48"/></operator><name pos:line="14" pos:column="45">a_socklen<pos:position pos:line="14" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="14" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="56"/></expr_stmt>
	<expr_stmt><expr><name><operator pos:line="15" pos:column="9">(<pos:position pos:line="15" pos:column="10"/></operator><operator pos:line="15" pos:column="10">*<pos:position pos:line="15" pos:column="11"/></operator><name pos:line="15" pos:column="11">to_ai<pos:position pos:line="15" pos:column="16"/></name><operator pos:line="15" pos:column="16">)<pos:position pos:line="15" pos:column="17"/></operator><operator pos:line="15" pos:column="17">-&gt;<pos:position pos:line="15" pos:column="22"/></operator><name pos:line="15" pos:column="19">ai_addrlen<pos:position pos:line="15" pos:column="29"/></name></name> <operator pos:line="15" pos:column="30">=<pos:position pos:line="15" pos:column="31"/></operator> <name><operator pos:line="15" pos:column="32">(<pos:position pos:line="15" pos:column="33"/></operator><name pos:line="15" pos:column="33">afd<pos:position pos:line="15" pos:column="36"/></name><operator pos:line="15" pos:column="36">)<pos:position pos:line="15" pos:column="37"/></operator><operator pos:line="15" pos:column="37">-&gt;<pos:position pos:line="15" pos:column="42"/></operator><name pos:line="15" pos:column="39">a_socklen<pos:position pos:line="15" pos:column="48"/></name></name></expr>;<pos:position pos:line="15" pos:column="49"/></expr_stmt>
<cpp:if pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">if<pos:position pos:line="16" pos:column="4"/></cpp:directive> <expr><name pos:line="16" pos:column="5">HAVE_SOCKADDR_LEN<pos:position pos:line="16" pos:column="22"/></name></expr></cpp:if>
	<expr_stmt><expr><name><operator pos:line="17" pos:column="9">(<pos:position pos:line="17" pos:column="10"/></operator><operator pos:line="17" pos:column="10">*<pos:position pos:line="17" pos:column="11"/></operator><name pos:line="17" pos:column="11">to_ai<pos:position pos:line="17" pos:column="16"/></name><operator pos:line="17" pos:column="16">)<pos:position pos:line="17" pos:column="17"/></operator><operator pos:line="17" pos:column="17">-&gt;<pos:position pos:line="17" pos:column="22"/></operator><name><name pos:line="17" pos:column="19">ai_addr<pos:position pos:line="17" pos:column="26"/></name><operator pos:line="17" pos:column="26">-&gt;<pos:position pos:line="17" pos:column="31"/></operator><name pos:line="17" pos:column="28">sa_len<pos:position pos:line="17" pos:column="34"/></name></name></name> <operator pos:line="17" pos:column="35">=<pos:position pos:line="17" pos:column="36"/></operator> <name><operator pos:line="17" pos:column="37">(<pos:position pos:line="17" pos:column="38"/></operator><name pos:line="17" pos:column="38">afd<pos:position pos:line="17" pos:column="41"/></name><operator pos:line="17" pos:column="41">)<pos:position pos:line="17" pos:column="42"/></operator><operator pos:line="17" pos:column="42">-&gt;<pos:position pos:line="17" pos:column="47"/></operator><name pos:line="17" pos:column="44">a_socklen<pos:position pos:line="17" pos:column="53"/></name></name></expr>;<pos:position pos:line="17" pos:column="54"/></expr_stmt>
<cpp:endif pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">endif<pos:position pos:line="18" pos:column="7"/></cpp:directive></cpp:endif>
	<expr_stmt><expr><name><operator pos:line="19" pos:column="9">(<pos:position pos:line="19" pos:column="10"/></operator><operator pos:line="19" pos:column="10">*<pos:position pos:line="19" pos:column="11"/></operator><name pos:line="19" pos:column="11">to_ai<pos:position pos:line="19" pos:column="16"/></name><operator pos:line="19" pos:column="16">)<pos:position pos:line="19" pos:column="17"/></operator><operator pos:line="19" pos:column="17">-&gt;<pos:position pos:line="19" pos:column="22"/></operator><name><name pos:line="19" pos:column="19">ai_addr<pos:position pos:line="19" pos:column="26"/></name><operator pos:line="19" pos:column="26">-&gt;<pos:position pos:line="19" pos:column="31"/></operator><name pos:line="19" pos:column="28">sa_family<pos:position pos:line="19" pos:column="37"/></name></name></name> <operator pos:line="19" pos:column="38">=<pos:position pos:line="19" pos:column="39"/></operator> <name><operator pos:line="19" pos:column="40">(<pos:position pos:line="19" pos:column="41"/></operator><operator pos:line="19" pos:column="41">*<pos:position pos:line="19" pos:column="42"/></operator><name pos:line="19" pos:column="42">to_ai<pos:position pos:line="19" pos:column="47"/></name><operator pos:line="19" pos:column="47">)<pos:position pos:line="19" pos:column="48"/></operator><operator pos:line="19" pos:column="48">-&gt;<pos:position pos:line="19" pos:column="53"/></operator><name pos:line="19" pos:column="50">ai_family<pos:position pos:line="19" pos:column="59"/></name></name> <operator pos:line="19" pos:column="60">=<pos:position pos:line="19" pos:column="61"/></operator> <name><operator pos:line="19" pos:column="62">(<pos:position pos:line="19" pos:column="63"/></operator><name pos:line="19" pos:column="63">afd<pos:position pos:line="19" pos:column="66"/></name><operator pos:line="19" pos:column="66">)<pos:position pos:line="19" pos:column="67"/></operator><operator pos:line="19" pos:column="67">-&gt;<pos:position pos:line="19" pos:column="72"/></operator><name pos:line="19" pos:column="69">a_af<pos:position pos:line="19" pos:column="73"/></name></name></expr>;<pos:position pos:line="19" pos:column="74"/></expr_stmt>
	<expr_stmt><expr><operator pos:line="20" pos:column="9">(<pos:position pos:line="20" pos:column="10"/></operator><operator pos:line="20" pos:column="10">(<pos:position pos:line="20" pos:column="11"/></operator>struct <name pos:line="20" pos:column="18">sockinet<pos:position pos:line="20" pos:column="26"/></name> <operator pos:line="20" pos:column="27">*<pos:position pos:line="20" pos:column="28"/></operator><operator pos:line="20" pos:column="28">)<pos:position pos:line="20" pos:column="29"/></operator><name><operator pos:line="20" pos:column="29">(<pos:position pos:line="20" pos:column="30"/></operator><operator pos:line="20" pos:column="30">*<pos:position pos:line="20" pos:column="31"/></operator><name pos:line="20" pos:column="31">to_ai<pos:position pos:line="20" pos:column="36"/></name><operator pos:line="20" pos:column="36">)<pos:position pos:line="20" pos:column="37"/></operator><operator pos:line="20" pos:column="37">-&gt;<pos:position pos:line="20" pos:column="42"/></operator><name pos:line="20" pos:column="39">ai_addr<pos:position pos:line="20" pos:column="46"/></name></name><operator pos:line="20" pos:column="46">)<pos:position pos:line="20" pos:column="47"/></operator><operator pos:line="20" pos:column="47">-&gt;<pos:position pos:line="20" pos:column="52"/></operator><name pos:line="20" pos:column="49">si_port<pos:position pos:line="20" pos:column="56"/></name> <operator pos:line="20" pos:column="57">=<pos:position pos:line="20" pos:column="58"/></operator> <name pos:line="20" pos:column="59">port<pos:position pos:line="20" pos:column="63"/></name></expr>;<pos:position pos:line="20" pos:column="64"/></expr_stmt>
	<expr_stmt><expr><name pos:line="21" pos:column="9">p<pos:position pos:line="21" pos:column="10"/></name> <operator pos:line="21" pos:column="11">=<pos:position pos:line="21" pos:column="12"/></operator> <operator pos:line="21" pos:column="13">(<pos:position pos:line="21" pos:column="14"/></operator><name pos:line="21" pos:column="14">char<pos:position pos:line="21" pos:column="18"/></name> <operator pos:line="21" pos:column="19">*<pos:position pos:line="21" pos:column="20"/></operator><operator pos:line="21" pos:column="20">)<pos:position pos:line="21" pos:column="21"/></operator><operator pos:line="21" pos:column="21">(<pos:position pos:line="21" pos:column="22"/></operator><name><operator pos:line="21" pos:column="22">(<pos:position pos:line="21" pos:column="23"/></operator><operator pos:line="21" pos:column="23">*<pos:position pos:line="21" pos:column="24"/></operator><name pos:line="21" pos:column="24">to_ai<pos:position pos:line="21" pos:column="29"/></name><operator pos:line="21" pos:column="29">)<pos:position pos:line="21" pos:column="30"/></operator><operator pos:line="21" pos:column="30">-&gt;<pos:position pos:line="21" pos:column="35"/></operator><name pos:line="21" pos:column="32">ai_addr<pos:position pos:line="21" pos:column="39"/></name></name><operator pos:line="21" pos:column="39">)<pos:position pos:line="21" pos:column="40"/></operator></expr>;<pos:position pos:line="21" pos:column="41"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="22" pos:column="9">memcpy<pos:position pos:line="22" pos:column="15"/></name><argument_list pos:line="22" pos:column="15">(<argument><expr><name pos:line="22" pos:column="16">p<pos:position pos:line="22" pos:column="17"/></name> <operator pos:line="22" pos:column="18">+<pos:position pos:line="22" pos:column="19"/></operator> <name><operator pos:line="22" pos:column="20">(<pos:position pos:line="22" pos:column="21"/></operator><name pos:line="22" pos:column="21">afd<pos:position pos:line="22" pos:column="24"/></name><operator pos:line="22" pos:column="24">)<pos:position pos:line="22" pos:column="25"/></operator><operator pos:line="22" pos:column="25">-&gt;<pos:position pos:line="22" pos:column="30"/></operator><name pos:line="22" pos:column="27">a_off<pos:position pos:line="22" pos:column="32"/></name></name></expr></argument>, <argument><expr><operator pos:line="22" pos:column="34">(<pos:position pos:line="22" pos:column="35"/></operator><name pos:line="22" pos:column="35">addr<pos:position pos:line="22" pos:column="39"/></name><operator pos:line="22" pos:column="39">)<pos:position pos:line="22" pos:column="40"/></operator></expr></argument>, <argument><expr><name><operator pos:line="22" pos:column="42">(<pos:position pos:line="22" pos:column="43"/></operator><name pos:line="22" pos:column="43">afd<pos:position pos:line="22" pos:column="46"/></name><operator pos:line="22" pos:column="46">)<pos:position pos:line="22" pos:column="47"/></operator><operator pos:line="22" pos:column="47">-&gt;<pos:position pos:line="22" pos:column="52"/></operator><name pos:line="22" pos:column="49">a_addrlen<pos:position pos:line="22" pos:column="58"/></name></name></expr></argument>)<pos:position pos:line="22" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="60"/></expr_stmt>
	<return pos:line="23" pos:column="9">return <expr><literal type="number" pos:line="23" pos:column="16">1<pos:position pos:line="23" pos:column="17"/></literal></expr>;<pos:position pos:line="23" pos:column="18"/></return>
}<pos:position pos:line="24" pos:column="2"/></block></function></unit>
