<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_38_rsync-1.4.5.cpp" pos:tabs="8"><function_decl><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
 <name pos:line="2" pos:column="2">MDupdate<pos:position pos:line="2" pos:column="10"/></name><parameter_list pos:line="2" pos:column="10">(<parameter><decl><type><name pos:line="2" pos:column="11">MDp<pos:position pos:line="2" pos:column="14"/></name></type></decl></parameter>,<parameter><decl><type><name pos:line="2" pos:column="15">X<pos:position pos:line="2" pos:column="16"/></name></type></decl></parameter>,<parameter><decl><type><name pos:line="2" pos:column="17">count<pos:position pos:line="2" pos:column="22"/></name></type></decl></parameter>)<pos:position pos:line="2" pos:column="23"/></parameter_list>
 <decl_stmt><decl><type><name pos:line="3" pos:column="2">MDptr<pos:position pos:line="3" pos:column="7"/></name></type> <name pos:line="3" pos:column="8">MDp<pos:position pos:line="3" pos:column="11"/></name></decl>;<pos:position pos:line="3" pos:column="12"/></decl_stmt>
 <decl_stmt><decl><type><name pos:line="4" pos:column="2">unsigned<pos:position pos:line="4" pos:column="10"/></name> <name pos:line="4" pos:column="11">char<pos:position pos:line="4" pos:column="15"/></name> <modifier pos:line="4" pos:column="16">*<pos:position pos:line="4" pos:column="17"/></modifier></type><name pos:line="4" pos:column="17">X<pos:position pos:line="4" pos:column="18"/></name></decl>;<pos:position pos:line="4" pos:column="19"/></decl_stmt>
 <decl_stmt><decl><type><name pos:line="5" pos:column="2">unsigned<pos:position pos:line="5" pos:column="10"/></name> <name pos:line="5" pos:column="11">int<pos:position pos:line="5" pos:column="14"/></name></type> <name pos:line="5" pos:column="15">count<pos:position pos:line="5" pos:column="20"/></name></decl>;<pos:position pos:line="5" pos:column="21"/></decl_stmt>
 <block pos:line="6" pos:column="2">{ <decl_stmt><decl><type><name pos:line="6" pos:column="4">unsigned<pos:position pos:line="6" pos:column="12"/></name> <name pos:line="6" pos:column="13">int32<pos:position pos:line="6" pos:column="18"/></name></type> <name pos:line="6" pos:column="19">i<pos:position pos:line="6" pos:column="20"/></name></decl>, <decl><type ref="prev"/><name pos:line="6" pos:column="22">tmp<pos:position pos:line="6" pos:column="25"/></name></decl>, <decl><type ref="prev"/><name pos:line="6" pos:column="27">bit<pos:position pos:line="6" pos:column="30"/></name></decl>, <decl><type ref="prev"/><name pos:line="6" pos:column="32">byte<pos:position pos:line="6" pos:column="36"/></name></decl>, <decl><type ref="prev"/><name pos:line="6" pos:column="38">mask<pos:position pos:line="6" pos:column="42"/></name></decl>;<pos:position pos:line="6" pos:column="43"/></decl_stmt>
   <decl_stmt><decl><type><name pos:line="7" pos:column="4">unsigned<pos:position pos:line="7" pos:column="12"/></name> <name pos:line="7" pos:column="13">char<pos:position pos:line="7" pos:column="17"/></name></type> <name><name pos:line="7" pos:column="18">XX<pos:position pos:line="7" pos:column="20"/></name><index pos:line="7" pos:column="20">[<expr><literal type="number" pos:line="7" pos:column="21">64<pos:position pos:line="7" pos:column="23"/></literal></expr>]<pos:position pos:line="7" pos:column="24"/></index></name></decl>;<pos:position pos:line="7" pos:column="25"/></decl_stmt>
   <decl_stmt><decl><type><name pos:line="8" pos:column="4">unsigned<pos:position pos:line="8" pos:column="12"/></name> <name pos:line="8" pos:column="13">char<pos:position pos:line="8" pos:column="17"/></name> <modifier pos:line="8" pos:column="18">*<pos:position pos:line="8" pos:column="19"/></modifier></type><name pos:line="8" pos:column="19">p<pos:position pos:line="8" pos:column="20"/></name></decl>;<pos:position pos:line="8" pos:column="21"/></decl_stmt>
   <comment type="block" pos:line="9" pos:column="4">/* return with no error if this is a courtesy close with count
   ** zero and MDp-&gt;done is true.
   */</comment>
   <if pos:line="12" pos:column="4">if <condition pos:line="12" pos:column="7">(<expr><name pos:line="12" pos:column="8">count<pos:position pos:line="12" pos:column="13"/></name> <operator pos:line="12" pos:column="14">==<pos:position pos:line="12" pos:column="16"/></operator> <literal type="number" pos:line="12" pos:column="17">0<pos:position pos:line="12" pos:column="18"/></literal> <operator pos:line="12" pos:column="19">&amp;&amp;<pos:position pos:line="12" pos:column="29"/></operator> <name><name pos:line="12" pos:column="22">MDp<pos:position pos:line="12" pos:column="25"/></name><operator pos:line="12" pos:column="25">-&gt;<pos:position pos:line="12" pos:column="30"/></operator><name pos:line="12" pos:column="27">done<pos:position pos:line="12" pos:column="31"/></name></name></expr>)<pos:position pos:line="12" pos:column="32"/></condition><then pos:line="12" pos:column="32"> <block type="pseudo"><return pos:line="12" pos:column="33">return;<pos:position pos:line="12" pos:column="40"/></return></block></then></if>
   <comment type="block" pos:line="13" pos:column="4">/* check to see if MD is already done and report error */</comment>
   <if pos:line="14" pos:column="4">if <condition pos:line="14" pos:column="7">(<expr><name><name pos:line="14" pos:column="8">MDp<pos:position pos:line="14" pos:column="11"/></name><operator pos:line="14" pos:column="11">-&gt;<pos:position pos:line="14" pos:column="16"/></operator><name pos:line="14" pos:column="13">done<pos:position pos:line="14" pos:column="17"/></name></name></expr>)<pos:position pos:line="14" pos:column="18"/></condition><then pos:line="14" pos:column="18">
          <block pos:line="15" pos:column="11">{ <expr_stmt><expr><call><name pos:line="15" pos:column="13">printf<pos:position pos:line="15" pos:column="19"/></name><argument_list pos:line="15" pos:column="19">(<argument><expr><literal type="string" pos:line="15" pos:column="20">"\nError: MDupdate MD already done."<pos:position pos:line="15" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="58"/></expr_stmt> <return pos:line="15" pos:column="59">return;<pos:position pos:line="15" pos:column="66"/></return> }<pos:position pos:line="15" pos:column="68"/></block></then></if>
   <comment type="block" pos:line="16" pos:column="4">/* Add count to MDp-&gt;count */</comment>
   <expr_stmt><expr><name pos:line="17" pos:column="4">tmp<pos:position pos:line="17" pos:column="7"/></name> <operator pos:line="17" pos:column="8">=<pos:position pos:line="17" pos:column="9"/></operator> <name pos:line="17" pos:column="10">count<pos:position pos:line="17" pos:column="15"/></name></expr>;<pos:position pos:line="17" pos:column="16"/></expr_stmt>
   <expr_stmt><expr><name pos:line="18" pos:column="4">p<pos:position pos:line="18" pos:column="5"/></name> <operator pos:line="18" pos:column="6">=<pos:position pos:line="18" pos:column="7"/></operator> <name><name pos:line="18" pos:column="8">MDp<pos:position pos:line="18" pos:column="11"/></name><operator pos:line="18" pos:column="11">-&gt;<pos:position pos:line="18" pos:column="16"/></operator><name pos:line="18" pos:column="13">count<pos:position pos:line="18" pos:column="18"/></name></name></expr>;<pos:position pos:line="18" pos:column="19"/></expr_stmt>
   <while pos:line="19" pos:column="4">while <condition pos:line="19" pos:column="10">(<expr><name pos:line="19" pos:column="11">tmp<pos:position pos:line="19" pos:column="14"/></name></expr>)<pos:position pos:line="19" pos:column="15"/></condition>
     <block pos:line="20" pos:column="6">{ <expr_stmt><expr><name pos:line="20" pos:column="8">tmp<pos:position pos:line="20" pos:column="11"/></name> <operator pos:line="20" pos:column="12">+=<pos:position pos:line="20" pos:column="14"/></operator> <operator pos:line="20" pos:column="15">*<pos:position pos:line="20" pos:column="16"/></operator><name pos:line="20" pos:column="16">p<pos:position pos:line="20" pos:column="17"/></name></expr>;<pos:position pos:line="20" pos:column="18"/></expr_stmt>
       <expr_stmt><expr><operator pos:line="21" pos:column="8">*<pos:position pos:line="21" pos:column="9"/></operator><name pos:line="21" pos:column="9">p<pos:position pos:line="21" pos:column="10"/></name><operator pos:line="21" pos:column="10">++<pos:position pos:line="21" pos:column="12"/></operator> <operator pos:line="21" pos:column="13">=<pos:position pos:line="21" pos:column="14"/></operator> <name pos:line="21" pos:column="15">tmp<pos:position pos:line="21" pos:column="18"/></name></expr>;<pos:position pos:line="21" pos:column="19"/></expr_stmt>
       <expr_stmt><expr><name pos:line="22" pos:column="8">tmp<pos:position pos:line="22" pos:column="11"/></name> <operator pos:line="22" pos:column="12">=<pos:position pos:line="22" pos:column="13"/></operator> <name pos:line="22" pos:column="14">tmp<pos:position pos:line="22" pos:column="17"/></name> <operator pos:line="22" pos:column="18">&gt;&gt;<pos:position pos:line="22" pos:column="23"/></operator> <literal type="number" pos:line="22" pos:column="21">8<pos:position pos:line="22" pos:column="22"/></literal></expr>;<pos:position pos:line="22" pos:column="23"/></expr_stmt>
     }<pos:position pos:line="23" pos:column="7"/></block></while>
   <comment type="block" pos:line="24" pos:column="4">/* Process data */</comment>
   <if pos:line="25" pos:column="4">if <condition pos:line="25" pos:column="7">(<expr><name pos:line="25" pos:column="8">count<pos:position pos:line="25" pos:column="13"/></name> <operator pos:line="25" pos:column="14">==<pos:position pos:line="25" pos:column="16"/></operator> <literal type="number" pos:line="25" pos:column="17">512<pos:position pos:line="25" pos:column="20"/></literal></expr>)<pos:position pos:line="25" pos:column="21"/></condition><then pos:line="25" pos:column="21">
     <block pos:line="26" pos:column="6">{ <comment type="block" pos:line="26" pos:column="8">/* Full block of data to handle */</comment>
       <expr_stmt><expr><call><name pos:line="27" pos:column="8">MDblock<pos:position pos:line="27" pos:column="15"/></name><argument_list pos:line="27" pos:column="15">(<argument><expr><name pos:line="27" pos:column="16">MDp<pos:position pos:line="27" pos:column="19"/></name></expr></argument>,<argument><expr><operator pos:line="27" pos:column="20">(<pos:position pos:line="27" pos:column="21"/></operator><name pos:line="27" pos:column="21">unsigned<pos:position pos:line="27" pos:column="29"/></name> <name pos:line="27" pos:column="30">int<pos:position pos:line="27" pos:column="33"/></name> <operator pos:line="27" pos:column="34">*<pos:position pos:line="27" pos:column="35"/></operator><operator pos:line="27" pos:column="35">)<pos:position pos:line="27" pos:column="36"/></operator><name pos:line="27" pos:column="36">X<pos:position pos:line="27" pos:column="37"/></name></expr></argument>)<pos:position pos:line="27" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="39"/></expr_stmt>
     }<pos:position pos:line="28" pos:column="7"/></block></then>
   <elseif pos:line="29" pos:column="4">else <if pos:line="29" pos:column="9">if <condition pos:line="29" pos:column="12">(<expr><name pos:line="29" pos:column="13">count<pos:position pos:line="29" pos:column="18"/></name> <operator pos:line="29" pos:column="19">&gt;<pos:position pos:line="29" pos:column="23"/></operator> <literal type="number" pos:line="29" pos:column="21">512<pos:position pos:line="29" pos:column="24"/></literal></expr>)<pos:position pos:line="29" pos:column="25"/></condition><then pos:line="29" pos:column="25"> <comment type="block" pos:line="29" pos:column="26">/* Check for count too large */</comment>
     <block pos:line="30" pos:column="6">{ <expr_stmt><expr><call><name pos:line="30" pos:column="8">printf<pos:position pos:line="30" pos:column="14"/></name><argument_list pos:line="30" pos:column="14">(<argument><expr><literal type="string" pos:line="30" pos:column="15">"\nError: MDupdate called with illegal count value %d."<pos:position pos:line="30" pos:column="70"/></literal></expr></argument>
              ,<argument><expr><name pos:line="31" pos:column="16">count<pos:position pos:line="31" pos:column="21"/></name></expr></argument>)<pos:position pos:line="31" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="23"/></expr_stmt>
       <return pos:line="32" pos:column="8">return;<pos:position pos:line="32" pos:column="15"/></return>
     }<pos:position pos:line="33" pos:column="7"/></block></then></if></elseif>
   <else pos:line="34" pos:column="4">else <comment type="block" pos:line="34" pos:column="9">/* partial block -- must be last block so finish up */</comment>
     <block pos:line="35" pos:column="6">{ <comment type="block" pos:line="35" pos:column="8">/* Find out how many bytes and residual bits there are */</comment>
       <expr_stmt><expr><name pos:line="36" pos:column="8">byte<pos:position pos:line="36" pos:column="12"/></name> <operator pos:line="36" pos:column="13">=<pos:position pos:line="36" pos:column="14"/></operator> <name pos:line="36" pos:column="15">count<pos:position pos:line="36" pos:column="20"/></name> <operator pos:line="36" pos:column="21">&gt;&gt;<pos:position pos:line="36" pos:column="26"/></operator> <literal type="number" pos:line="36" pos:column="24">3<pos:position pos:line="36" pos:column="25"/></literal></expr>;<pos:position pos:line="36" pos:column="26"/></expr_stmt>
       <expr_stmt><expr><name pos:line="37" pos:column="8">bit<pos:position pos:line="37" pos:column="11"/></name> <operator pos:line="37" pos:column="12">=<pos:position pos:line="37" pos:column="13"/></operator>  <name pos:line="37" pos:column="15">count<pos:position pos:line="37" pos:column="20"/></name> <operator pos:line="37" pos:column="21">&amp;<pos:position pos:line="37" pos:column="26"/></operator> <literal type="number" pos:line="37" pos:column="23">7<pos:position pos:line="37" pos:column="24"/></literal></expr>;<pos:position pos:line="37" pos:column="25"/></expr_stmt>
       <comment type="block" pos:line="38" pos:column="8">/* Copy X into XX since we need to modify it */</comment>
       <for pos:line="39" pos:column="8">for <control pos:line="39" pos:column="12">(<init><expr><name pos:line="39" pos:column="13">i<pos:position pos:line="39" pos:column="14"/></name><operator pos:line="39" pos:column="14">=<pos:position pos:line="39" pos:column="15"/></operator><literal type="number" pos:line="39" pos:column="15">0<pos:position pos:line="39" pos:column="16"/></literal></expr>;<pos:position pos:line="39" pos:column="17"/></init><condition><expr><name pos:line="39" pos:column="17">i<pos:position pos:line="39" pos:column="18"/></name><operator pos:line="39" pos:column="18">&lt;=<pos:position pos:line="39" pos:column="23"/></operator><name pos:line="39" pos:column="20">byte<pos:position pos:line="39" pos:column="24"/></name></expr>;<pos:position pos:line="39" pos:column="25"/></condition><incr><expr><name pos:line="39" pos:column="25">i<pos:position pos:line="39" pos:column="26"/></name><operator pos:line="39" pos:column="26">++<pos:position pos:line="39" pos:column="28"/></operator></expr></incr>)<pos:position pos:line="39" pos:column="29"/></control>   <block type="pseudo"><expr_stmt><expr><name><name pos:line="39" pos:column="32">XX<pos:position pos:line="39" pos:column="34"/></name><index pos:line="39" pos:column="34">[<expr><name pos:line="39" pos:column="35">i<pos:position pos:line="39" pos:column="36"/></name></expr>]<pos:position pos:line="39" pos:column="37"/></index></name> <operator pos:line="39" pos:column="38">=<pos:position pos:line="39" pos:column="39"/></operator> <name><name pos:line="39" pos:column="40">X<pos:position pos:line="39" pos:column="41"/></name><index pos:line="39" pos:column="41">[<expr><name pos:line="39" pos:column="42">i<pos:position pos:line="39" pos:column="43"/></name></expr>]<pos:position pos:line="39" pos:column="44"/></index></name></expr>;<pos:position pos:line="39" pos:column="45"/></expr_stmt></block></for>
       <for pos:line="40" pos:column="8">for <control pos:line="40" pos:column="12">(<init><expr><name pos:line="40" pos:column="13">i<pos:position pos:line="40" pos:column="14"/></name><operator pos:line="40" pos:column="14">=<pos:position pos:line="40" pos:column="15"/></operator><name pos:line="40" pos:column="15">byte<pos:position pos:line="40" pos:column="19"/></name><operator pos:line="40" pos:column="19">+<pos:position pos:line="40" pos:column="20"/></operator><literal type="number" pos:line="40" pos:column="20">1<pos:position pos:line="40" pos:column="21"/></literal></expr>;<pos:position pos:line="40" pos:column="22"/></init><condition><expr><name pos:line="40" pos:column="22">i<pos:position pos:line="40" pos:column="23"/></name><operator pos:line="40" pos:column="23">&lt;<pos:position pos:line="40" pos:column="27"/></operator><literal type="number" pos:line="40" pos:column="24">64<pos:position pos:line="40" pos:column="26"/></literal></expr>;<pos:position pos:line="40" pos:column="27"/></condition><incr><expr><name pos:line="40" pos:column="27">i<pos:position pos:line="40" pos:column="28"/></name><operator pos:line="40" pos:column="28">++<pos:position pos:line="40" pos:column="30"/></operator></expr></incr>)<pos:position pos:line="40" pos:column="31"/></control> <block type="pseudo"><expr_stmt><expr><name><name pos:line="40" pos:column="32">XX<pos:position pos:line="40" pos:column="34"/></name><index pos:line="40" pos:column="34">[<expr><name pos:line="40" pos:column="35">i<pos:position pos:line="40" pos:column="36"/></name></expr>]<pos:position pos:line="40" pos:column="37"/></index></name> <operator pos:line="40" pos:column="38">=<pos:position pos:line="40" pos:column="39"/></operator> <literal type="number" pos:line="40" pos:column="40">0<pos:position pos:line="40" pos:column="41"/></literal></expr>;<pos:position pos:line="40" pos:column="42"/></expr_stmt></block></for>
       <comment type="block" pos:line="41" pos:column="8">/* Add padding '1' bit and low-order zeros in last byte */</comment>
       <expr_stmt><expr><name pos:line="42" pos:column="8">mask<pos:position pos:line="42" pos:column="12"/></name> <operator pos:line="42" pos:column="13">=<pos:position pos:line="42" pos:column="14"/></operator> <literal type="number" pos:line="42" pos:column="15">1<pos:position pos:line="42" pos:column="16"/></literal> <operator pos:line="42" pos:column="17">&lt;&lt;<pos:position pos:line="42" pos:column="25"/></operator> <operator pos:line="42" pos:column="20">(<pos:position pos:line="42" pos:column="21"/></operator><literal type="number" pos:line="42" pos:column="21">7<pos:position pos:line="42" pos:column="22"/></literal> <operator pos:line="42" pos:column="23">-<pos:position pos:line="42" pos:column="24"/></operator> <name pos:line="42" pos:column="25">bit<pos:position pos:line="42" pos:column="28"/></name><operator pos:line="42" pos:column="28">)<pos:position pos:line="42" pos:column="29"/></operator></expr>;<pos:position pos:line="42" pos:column="30"/></expr_stmt>
       <expr_stmt><expr><name><name pos:line="43" pos:column="8">XX<pos:position pos:line="43" pos:column="10"/></name><index pos:line="43" pos:column="10">[<expr><name pos:line="43" pos:column="11">byte<pos:position pos:line="43" pos:column="15"/></name></expr>]<pos:position pos:line="43" pos:column="16"/></index></name> <operator pos:line="43" pos:column="17">=<pos:position pos:line="43" pos:column="18"/></operator> <operator pos:line="43" pos:column="19">(<pos:position pos:line="43" pos:column="20"/></operator><name><name pos:line="43" pos:column="20">XX<pos:position pos:line="43" pos:column="22"/></name><index pos:line="43" pos:column="22">[<expr><name pos:line="43" pos:column="23">byte<pos:position pos:line="43" pos:column="27"/></name></expr>]<pos:position pos:line="43" pos:column="28"/></index></name> <operator pos:line="43" pos:column="29">|<pos:position pos:line="43" pos:column="30"/></operator> <name pos:line="43" pos:column="31">mask<pos:position pos:line="43" pos:column="35"/></name><operator pos:line="43" pos:column="35">)<pos:position pos:line="43" pos:column="36"/></operator> <operator pos:line="43" pos:column="37">&amp;<pos:position pos:line="43" pos:column="42"/></operator> <operator pos:line="43" pos:column="39">~<pos:position pos:line="43" pos:column="40"/></operator><operator pos:line="43" pos:column="40">(<pos:position pos:line="43" pos:column="41"/></operator> <name pos:line="43" pos:column="42">mask<pos:position pos:line="43" pos:column="46"/></name> <operator pos:line="43" pos:column="47">-<pos:position pos:line="43" pos:column="48"/></operator> <literal type="number" pos:line="43" pos:column="49">1<pos:position pos:line="43" pos:column="50"/></literal><operator pos:line="43" pos:column="50">)<pos:position pos:line="43" pos:column="51"/></operator></expr>;<pos:position pos:line="43" pos:column="52"/></expr_stmt>
       <comment type="block" pos:line="44" pos:column="8">/* If room for bit count, finish up with this block */</comment>
       <if pos:line="45" pos:column="8">if <condition pos:line="45" pos:column="11">(<expr><name pos:line="45" pos:column="12">byte<pos:position pos:line="45" pos:column="16"/></name> <operator pos:line="45" pos:column="17">&lt;=<pos:position pos:line="45" pos:column="22"/></operator> <literal type="number" pos:line="45" pos:column="20">55<pos:position pos:line="45" pos:column="22"/></literal></expr>)<pos:position pos:line="45" pos:column="23"/></condition><then pos:line="45" pos:column="23">
         <block pos:line="46" pos:column="10">{ <for pos:line="46" pos:column="12">for <control pos:line="46" pos:column="16">(<init><expr><name pos:line="46" pos:column="17">i<pos:position pos:line="46" pos:column="18"/></name><operator pos:line="46" pos:column="18">=<pos:position pos:line="46" pos:column="19"/></operator><literal type="number" pos:line="46" pos:column="19">0<pos:position pos:line="46" pos:column="20"/></literal></expr>;<pos:position pos:line="46" pos:column="21"/></init><condition><expr><name pos:line="46" pos:column="21">i<pos:position pos:line="46" pos:column="22"/></name><operator pos:line="46" pos:column="22">&lt;<pos:position pos:line="46" pos:column="26"/></operator><literal type="number" pos:line="46" pos:column="23">8<pos:position pos:line="46" pos:column="24"/></literal></expr>;<pos:position pos:line="46" pos:column="25"/></condition><incr><expr><name pos:line="46" pos:column="25">i<pos:position pos:line="46" pos:column="26"/></name><operator pos:line="46" pos:column="26">++<pos:position pos:line="46" pos:column="28"/></operator></expr></incr>)<pos:position pos:line="46" pos:column="29"/></control> <block type="pseudo"><expr_stmt><expr><name><name pos:line="46" pos:column="30">XX<pos:position pos:line="46" pos:column="32"/></name><index pos:line="46" pos:column="32">[<expr><literal type="number" pos:line="46" pos:column="33">56<pos:position pos:line="46" pos:column="35"/></literal><operator pos:line="46" pos:column="35">+<pos:position pos:line="46" pos:column="36"/></operator><name pos:line="46" pos:column="36">i<pos:position pos:line="46" pos:column="37"/></name></expr>]<pos:position pos:line="46" pos:column="38"/></index></name> <operator pos:line="46" pos:column="39">=<pos:position pos:line="46" pos:column="40"/></operator> <name><name pos:line="46" pos:column="41">MDp<pos:position pos:line="46" pos:column="44"/></name><operator pos:line="46" pos:column="44">-&gt;<pos:position pos:line="46" pos:column="49"/></operator><name pos:line="46" pos:column="46">count<pos:position pos:line="46" pos:column="51"/></name><index pos:line="46" pos:column="51">[<expr><name pos:line="46" pos:column="52">i<pos:position pos:line="46" pos:column="53"/></name></expr>]<pos:position pos:line="46" pos:column="54"/></index></name></expr>;<pos:position pos:line="46" pos:column="55"/></expr_stmt></block></for>
           <expr_stmt><expr><call><name pos:line="47" pos:column="12">MDblock<pos:position pos:line="47" pos:column="19"/></name><argument_list pos:line="47" pos:column="19">(<argument><expr><name pos:line="47" pos:column="20">MDp<pos:position pos:line="47" pos:column="23"/></name></expr></argument>,<argument><expr><operator pos:line="47" pos:column="24">(<pos:position pos:line="47" pos:column="25"/></operator><name pos:line="47" pos:column="25">unsigned<pos:position pos:line="47" pos:column="33"/></name> <name pos:line="47" pos:column="34">int32<pos:position pos:line="47" pos:column="39"/></name> <operator pos:line="47" pos:column="40">*<pos:position pos:line="47" pos:column="41"/></operator><operator pos:line="47" pos:column="41">)<pos:position pos:line="47" pos:column="42"/></operator><name pos:line="47" pos:column="42">XX<pos:position pos:line="47" pos:column="44"/></name></expr></argument>)<pos:position pos:line="47" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="46"/></expr_stmt>
         }<pos:position pos:line="48" pos:column="11"/></block></then>
       <else pos:line="49" pos:column="8">else <comment type="block" pos:line="49" pos:column="13">/* need to do two blocks to finish up */</comment>
         <block pos:line="50" pos:column="10">{ <expr_stmt><expr><call><name pos:line="50" pos:column="12">MDblock<pos:position pos:line="50" pos:column="19"/></name><argument_list pos:line="50" pos:column="19">(<argument><expr><name pos:line="50" pos:column="20">MDp<pos:position pos:line="50" pos:column="23"/></name></expr></argument>,<argument><expr><operator pos:line="50" pos:column="24">(<pos:position pos:line="50" pos:column="25"/></operator><name pos:line="50" pos:column="25">unsigned<pos:position pos:line="50" pos:column="33"/></name> <name pos:line="50" pos:column="34">int32<pos:position pos:line="50" pos:column="39"/></name> <operator pos:line="50" pos:column="40">*<pos:position pos:line="50" pos:column="41"/></operator><operator pos:line="50" pos:column="41">)<pos:position pos:line="50" pos:column="42"/></operator><name pos:line="50" pos:column="42">XX<pos:position pos:line="50" pos:column="44"/></name></expr></argument>)<pos:position pos:line="50" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="46"/></expr_stmt>
           <for pos:line="51" pos:column="12">for <control pos:line="51" pos:column="16">(<init><expr><name pos:line="51" pos:column="17">i<pos:position pos:line="51" pos:column="18"/></name><operator pos:line="51" pos:column="18">=<pos:position pos:line="51" pos:column="19"/></operator><literal type="number" pos:line="51" pos:column="19">0<pos:position pos:line="51" pos:column="20"/></literal></expr>;<pos:position pos:line="51" pos:column="21"/></init><condition><expr><name pos:line="51" pos:column="21">i<pos:position pos:line="51" pos:column="22"/></name><operator pos:line="51" pos:column="22">&lt;<pos:position pos:line="51" pos:column="26"/></operator><literal type="number" pos:line="51" pos:column="23">56<pos:position pos:line="51" pos:column="25"/></literal></expr>;<pos:position pos:line="51" pos:column="26"/></condition><incr><expr><name pos:line="51" pos:column="26">i<pos:position pos:line="51" pos:column="27"/></name><operator pos:line="51" pos:column="27">++<pos:position pos:line="51" pos:column="29"/></operator></expr></incr>)<pos:position pos:line="51" pos:column="30"/></control> <block type="pseudo"><expr_stmt><expr><name><name pos:line="51" pos:column="31">XX<pos:position pos:line="51" pos:column="33"/></name><index pos:line="51" pos:column="33">[<expr><name pos:line="51" pos:column="34">i<pos:position pos:line="51" pos:column="35"/></name></expr>]<pos:position pos:line="51" pos:column="36"/></index></name> <operator pos:line="51" pos:column="37">=<pos:position pos:line="51" pos:column="38"/></operator> <literal type="number" pos:line="51" pos:column="39">0<pos:position pos:line="51" pos:column="40"/></literal></expr>;<pos:position pos:line="51" pos:column="41"/></expr_stmt></block></for>
           <for pos:line="52" pos:column="12">for <control pos:line="52" pos:column="16">(<init><expr><name pos:line="52" pos:column="17">i<pos:position pos:line="52" pos:column="18"/></name><operator pos:line="52" pos:column="18">=<pos:position pos:line="52" pos:column="19"/></operator><literal type="number" pos:line="52" pos:column="19">0<pos:position pos:line="52" pos:column="20"/></literal></expr>;<pos:position pos:line="52" pos:column="21"/></init><condition><expr><name pos:line="52" pos:column="21">i<pos:position pos:line="52" pos:column="22"/></name><operator pos:line="52" pos:column="22">&lt;<pos:position pos:line="52" pos:column="26"/></operator><literal type="number" pos:line="52" pos:column="23">8<pos:position pos:line="52" pos:column="24"/></literal></expr>;<pos:position pos:line="52" pos:column="25"/></condition><incr><expr><name pos:line="52" pos:column="25">i<pos:position pos:line="52" pos:column="26"/></name><operator pos:line="52" pos:column="26">++<pos:position pos:line="52" pos:column="28"/></operator></expr></incr>)<pos:position pos:line="52" pos:column="29"/></control>  <block type="pseudo"><expr_stmt><expr><name><name pos:line="52" pos:column="31">XX<pos:position pos:line="52" pos:column="33"/></name><index pos:line="52" pos:column="33">[<expr><literal type="number" pos:line="52" pos:column="34">56<pos:position pos:line="52" pos:column="36"/></literal><operator pos:line="52" pos:column="36">+<pos:position pos:line="52" pos:column="37"/></operator><name pos:line="52" pos:column="37">i<pos:position pos:line="52" pos:column="38"/></name></expr>]<pos:position pos:line="52" pos:column="39"/></index></name> <operator pos:line="52" pos:column="40">=<pos:position pos:line="52" pos:column="41"/></operator> <name><name pos:line="52" pos:column="42">MDp<pos:position pos:line="52" pos:column="45"/></name><operator pos:line="52" pos:column="45">-&gt;<pos:position pos:line="52" pos:column="50"/></operator><name pos:line="52" pos:column="47">count<pos:position pos:line="52" pos:column="52"/></name><index pos:line="52" pos:column="52">[<expr><name pos:line="52" pos:column="53">i<pos:position pos:line="52" pos:column="54"/></name></expr>]<pos:position pos:line="52" pos:column="55"/></index></name></expr>;<pos:position pos:line="52" pos:column="56"/></expr_stmt></block></for>
           <expr_stmt><expr><call><name pos:line="53" pos:column="12">MDblock<pos:position pos:line="53" pos:column="19"/></name><argument_list pos:line="53" pos:column="19">(<argument><expr><name pos:line="53" pos:column="20">MDp<pos:position pos:line="53" pos:column="23"/></name></expr></argument>,<argument><expr><operator pos:line="53" pos:column="24">(<pos:position pos:line="53" pos:column="25"/></operator><name pos:line="53" pos:column="25">unsigned<pos:position pos:line="53" pos:column="33"/></name> <name pos:line="53" pos:column="34">int32<pos:position pos:line="53" pos:column="39"/></name> <operator pos:line="53" pos:column="40">*<pos:position pos:line="53" pos:column="41"/></operator><operator pos:line="53" pos:column="41">)<pos:position pos:line="53" pos:column="42"/></operator><name pos:line="53" pos:column="42">XX<pos:position pos:line="53" pos:column="44"/></name></expr></argument>)<pos:position pos:line="53" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="46"/></expr_stmt>
         }<pos:position pos:line="54" pos:column="11"/></block></else></if>
       <comment type="block" pos:line="55" pos:column="8">/* Set flag saying we're done with MD computation */</comment>
       <expr_stmt><expr><name><name pos:line="56" pos:column="8">MDp<pos:position pos:line="56" pos:column="11"/></name><operator pos:line="56" pos:column="11">-&gt;<pos:position pos:line="56" pos:column="16"/></operator><name pos:line="56" pos:column="13">done<pos:position pos:line="56" pos:column="17"/></name></name> <operator pos:line="56" pos:column="18">=<pos:position pos:line="56" pos:column="19"/></operator> <literal type="number" pos:line="56" pos:column="20">1<pos:position pos:line="56" pos:column="21"/></literal></expr>;<pos:position pos:line="56" pos:column="22"/></expr_stmt>
     }<pos:position pos:line="57" pos:column="7"/></block></else></if>
 }<pos:position pos:line="58" pos:column="3"/></block></function_decl></unit>
