<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_606_last_repos.cpp" pos:tabs="8"><decl_stmt><decl><type><name pos:line="1" pos:column="1">local<pos:position pos:line="1" pos:column="6"/></name> <name pos:line="1" pos:column="7">void<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">gen_codes<pos:position pos:line="1" pos:column="21"/></name> <argument_list pos:line="1" pos:column="22">(<argument><expr><name pos:line="1" pos:column="23">tree<pos:position pos:line="1" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="1" pos:column="29">max_code<pos:position pos:line="1" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="1" pos:column="39">bl_count<pos:position pos:line="1" pos:column="47"/></name></expr></argument>)<pos:position pos:line="1" pos:column="48"/></argument_list>
    <name pos:line="2" pos:column="5">ct_data<pos:position pos:line="2" pos:column="12"/></name> <modifier pos:line="2" pos:column="13">*<pos:position pos:line="2" pos:column="14"/></modifier><name pos:line="2" pos:column="14">tree<pos:position pos:line="2" pos:column="18"/></name></decl>;<pos:position pos:line="2" pos:column="19"/></decl_stmt>             <comment type="block" pos:line="2" pos:column="32">/* the tree to decorate */</comment>
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">int<pos:position pos:line="3" pos:column="8"/></name></type> <name pos:line="3" pos:column="9">max_code<pos:position pos:line="3" pos:column="17"/></name></decl>;<pos:position pos:line="3" pos:column="18"/></decl_stmt>              <comment type="block" pos:line="3" pos:column="32">/* largest code with non zero frequency */</comment>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">ushf<pos:position pos:line="4" pos:column="9"/></name> <modifier pos:line="4" pos:column="10">*<pos:position pos:line="4" pos:column="11"/></modifier></type><name pos:line="4" pos:column="11">bl_count<pos:position pos:line="4" pos:column="19"/></name></decl>;<pos:position pos:line="4" pos:column="20"/></decl_stmt>            <comment type="block" pos:line="4" pos:column="32">/* number of codes at each bit length */</comment>
<block pos:line="5" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">ush<pos:position pos:line="6" pos:column="8"/></name></type> <name><name pos:line="6" pos:column="9">next_code<pos:position pos:line="6" pos:column="18"/></name><index pos:line="6" pos:column="18">[<expr><name pos:line="6" pos:column="19">MAX_BITS<pos:position pos:line="6" pos:column="27"/></name><operator pos:line="6" pos:column="27">+<pos:position pos:line="6" pos:column="28"/></operator><literal type="number" pos:line="6" pos:column="28">1<pos:position pos:line="6" pos:column="29"/></literal></expr>]<pos:position pos:line="6" pos:column="30"/></index></name></decl>;<pos:position pos:line="6" pos:column="31"/></decl_stmt> <comment type="block" pos:line="6" pos:column="32">/* next code value for each bit length */</comment>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">ush<pos:position pos:line="7" pos:column="8"/></name></type> <name pos:line="7" pos:column="9">code<pos:position pos:line="7" pos:column="13"/></name> <init pos:line="7" pos:column="14">= <expr><literal type="number" pos:line="7" pos:column="16">0<pos:position pos:line="7" pos:column="17"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="18"/></decl_stmt>              <comment type="block" pos:line="7" pos:column="32">/* running code value */</comment>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">int<pos:position pos:line="8" pos:column="8"/></name></type> <name pos:line="8" pos:column="9">bits<pos:position pos:line="8" pos:column="13"/></name></decl>;<pos:position pos:line="8" pos:column="14"/></decl_stmt>                  <comment type="block" pos:line="8" pos:column="32">/* bit index */</comment>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">int<pos:position pos:line="9" pos:column="8"/></name></type> <name pos:line="9" pos:column="9">n<pos:position pos:line="9" pos:column="10"/></name></decl>;<pos:position pos:line="9" pos:column="11"/></decl_stmt>                     <comment type="block" pos:line="9" pos:column="32">/* code index */</comment>

    <comment type="block" pos:line="11" pos:column="5">/* The distribution counts are first used to generate the code values
     * without bit reversal.
     */</comment>
    <for pos:line="14" pos:column="5">for <control pos:line="14" pos:column="9">(<init><expr><name pos:line="14" pos:column="10">bits<pos:position pos:line="14" pos:column="14"/></name> <operator pos:line="14" pos:column="15">=<pos:position pos:line="14" pos:column="16"/></operator> <literal type="number" pos:line="14" pos:column="17">1<pos:position pos:line="14" pos:column="18"/></literal></expr>;<pos:position pos:line="14" pos:column="19"/></init> <condition><expr><name pos:line="14" pos:column="20">bits<pos:position pos:line="14" pos:column="24"/></name> <operator pos:line="14" pos:column="25">&lt;=<pos:position pos:line="14" pos:column="30"/></operator> <name pos:line="14" pos:column="28">MAX_BITS<pos:position pos:line="14" pos:column="36"/></name></expr>;<pos:position pos:line="14" pos:column="37"/></condition> <incr><expr><name pos:line="14" pos:column="38">bits<pos:position pos:line="14" pos:column="42"/></name><operator pos:line="14" pos:column="42">++<pos:position pos:line="14" pos:column="44"/></operator></expr></incr>)<pos:position pos:line="14" pos:column="45"/></control> <block pos:line="14" pos:column="46">{
        <expr_stmt><expr><name><name pos:line="15" pos:column="9">next_code<pos:position pos:line="15" pos:column="18"/></name><index pos:line="15" pos:column="18">[<expr><name pos:line="15" pos:column="19">bits<pos:position pos:line="15" pos:column="23"/></name></expr>]<pos:position pos:line="15" pos:column="24"/></index></name> <operator pos:line="15" pos:column="25">=<pos:position pos:line="15" pos:column="26"/></operator> <name pos:line="15" pos:column="27">code<pos:position pos:line="15" pos:column="31"/></name> <operator pos:line="15" pos:column="32">=<pos:position pos:line="15" pos:column="33"/></operator> <operator pos:line="15" pos:column="34">(<pos:position pos:line="15" pos:column="35"/></operator><name pos:line="15" pos:column="35">code<pos:position pos:line="15" pos:column="39"/></name> <operator pos:line="15" pos:column="40">+<pos:position pos:line="15" pos:column="41"/></operator> <name><name pos:line="15" pos:column="42">bl_count<pos:position pos:line="15" pos:column="50"/></name><index pos:line="15" pos:column="50">[<expr><name pos:line="15" pos:column="51">bits<pos:position pos:line="15" pos:column="55"/></name><operator pos:line="15" pos:column="55">-<pos:position pos:line="15" pos:column="56"/></operator><literal type="number" pos:line="15" pos:column="56">1<pos:position pos:line="15" pos:column="57"/></literal></expr>]<pos:position pos:line="15" pos:column="58"/></index></name><operator pos:line="15" pos:column="58">)<pos:position pos:line="15" pos:column="59"/></operator> <operator pos:line="15" pos:column="60">&lt;&lt;<pos:position pos:line="15" pos:column="68"/></operator> <literal type="number" pos:line="15" pos:column="63">1<pos:position pos:line="15" pos:column="64"/></literal></expr>;<pos:position pos:line="15" pos:column="65"/></expr_stmt>
    }<pos:position pos:line="16" pos:column="6"/></block></for>
    <comment type="block" pos:line="17" pos:column="5">/* Check that the bit counts in bl_count are consistent. The last code
     * must be all ones.
     */</comment>
    <expr_stmt><expr><call><name pos:line="20" pos:column="5">Assert<pos:position pos:line="20" pos:column="11"/></name> <argument_list pos:line="20" pos:column="12">(<argument><expr><name pos:line="20" pos:column="13">code<pos:position pos:line="20" pos:column="17"/></name> <operator pos:line="20" pos:column="18">+<pos:position pos:line="20" pos:column="19"/></operator> <name><name pos:line="20" pos:column="20">bl_count<pos:position pos:line="20" pos:column="28"/></name><index pos:line="20" pos:column="28">[<expr><name pos:line="20" pos:column="29">MAX_BITS<pos:position pos:line="20" pos:column="37"/></name></expr>]<pos:position pos:line="20" pos:column="38"/></index></name><operator pos:line="20" pos:column="38">-<pos:position pos:line="20" pos:column="39"/></operator><literal type="number" pos:line="20" pos:column="39">1<pos:position pos:line="20" pos:column="40"/></literal> <operator pos:line="20" pos:column="41">==<pos:position pos:line="20" pos:column="43"/></operator> <operator pos:line="20" pos:column="44">(<pos:position pos:line="20" pos:column="45"/></operator><literal type="number" pos:line="20" pos:column="45">1<pos:position pos:line="20" pos:column="46"/></literal><operator pos:line="20" pos:column="46">&lt;&lt;<pos:position pos:line="20" pos:column="54"/></operator><name pos:line="20" pos:column="48">MAX_BITS<pos:position pos:line="20" pos:column="56"/></name><operator pos:line="20" pos:column="56">)<pos:position pos:line="20" pos:column="57"/></operator><operator pos:line="20" pos:column="57">-<pos:position pos:line="20" pos:column="58"/></operator><literal type="number" pos:line="20" pos:column="58">1<pos:position pos:line="20" pos:column="59"/></literal></expr></argument>,
            <argument><expr><literal type="string" pos:line="21" pos:column="13">"inconsistent bit counts"<pos:position pos:line="21" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="40"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="22" pos:column="5">Tracev<pos:position pos:line="22" pos:column="11"/></name><argument_list pos:line="22" pos:column="11">(<argument><expr><operator pos:line="22" pos:column="12">(<pos:position pos:line="22" pos:column="13"/></operator><name pos:line="22" pos:column="13">stderr<pos:position pos:line="22" pos:column="19"/></name><operator pos:line="22" pos:column="19">,<pos:position pos:line="22" pos:column="20"/></operator><literal type="string" pos:line="22" pos:column="20">"\ngen_codes: max_code %d "<pos:position pos:line="22" pos:column="47"/></literal><operator pos:line="22" pos:column="47">,<pos:position pos:line="22" pos:column="48"/></operator> <name pos:line="22" pos:column="49">max_code<pos:position pos:line="22" pos:column="57"/></name><operator pos:line="22" pos:column="57">)<pos:position pos:line="22" pos:column="58"/></operator></expr></argument>)<pos:position pos:line="22" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="60"/></expr_stmt>

    <for pos:line="24" pos:column="5">for <control pos:line="24" pos:column="9">(<init><expr><name pos:line="24" pos:column="10">n<pos:position pos:line="24" pos:column="11"/></name> <operator pos:line="24" pos:column="12">=<pos:position pos:line="24" pos:column="13"/></operator> <literal type="number" pos:line="24" pos:column="14">0<pos:position pos:line="24" pos:column="15"/></literal></expr>;<pos:position pos:line="24" pos:column="16"/></init>  <condition><expr><name pos:line="24" pos:column="18">n<pos:position pos:line="24" pos:column="19"/></name> <operator pos:line="24" pos:column="20">&lt;=<pos:position pos:line="24" pos:column="25"/></operator> <name pos:line="24" pos:column="23">max_code<pos:position pos:line="24" pos:column="31"/></name></expr>;<pos:position pos:line="24" pos:column="32"/></condition> <incr><expr><name pos:line="24" pos:column="33">n<pos:position pos:line="24" pos:column="34"/></name><operator pos:line="24" pos:column="34">++<pos:position pos:line="24" pos:column="36"/></operator></expr></incr>)<pos:position pos:line="24" pos:column="37"/></control> <block pos:line="24" pos:column="38">{
        <decl_stmt><decl><type><name pos:line="25" pos:column="9">int<pos:position pos:line="25" pos:column="12"/></name></type> <name pos:line="25" pos:column="13">len<pos:position pos:line="25" pos:column="16"/></name> <init pos:line="25" pos:column="17">= <expr><name><name pos:line="25" pos:column="19">tree<pos:position pos:line="25" pos:column="23"/></name><index pos:line="25" pos:column="23">[<expr><name pos:line="25" pos:column="24">n<pos:position pos:line="25" pos:column="25"/></name></expr>]<pos:position pos:line="25" pos:column="26"/></index></name><operator pos:line="25" pos:column="26">.<pos:position pos:line="25" pos:column="27"/></operator><name pos:line="25" pos:column="27">Len<pos:position pos:line="25" pos:column="30"/></name></expr></init></decl>;<pos:position pos:line="25" pos:column="31"/></decl_stmt>
        <if pos:line="26" pos:column="9">if <condition pos:line="26" pos:column="12">(<expr><name pos:line="26" pos:column="13">len<pos:position pos:line="26" pos:column="16"/></name> <operator pos:line="26" pos:column="17">==<pos:position pos:line="26" pos:column="19"/></operator> <literal type="number" pos:line="26" pos:column="20">0<pos:position pos:line="26" pos:column="21"/></literal></expr>)<pos:position pos:line="26" pos:column="22"/></condition><then pos:line="26" pos:column="22"> <block type="pseudo"><continue pos:line="26" pos:column="23">continue;<pos:position pos:line="26" pos:column="32"/></continue></block></then></if>
        <comment type="block" pos:line="27" pos:column="9">/* Now reverse the bits */</comment>
        <expr_stmt><expr><name><name pos:line="28" pos:column="9">tree<pos:position pos:line="28" pos:column="13"/></name><index pos:line="28" pos:column="13">[<expr><name pos:line="28" pos:column="14">n<pos:position pos:line="28" pos:column="15"/></name></expr>]<pos:position pos:line="28" pos:column="16"/></index></name><operator pos:line="28" pos:column="16">.<pos:position pos:line="28" pos:column="17"/></operator><name pos:line="28" pos:column="17">Code<pos:position pos:line="28" pos:column="21"/></name> <operator pos:line="28" pos:column="22">=<pos:position pos:line="28" pos:column="23"/></operator> <call><name pos:line="28" pos:column="24">bi_reverse<pos:position pos:line="28" pos:column="34"/></name><argument_list pos:line="28" pos:column="34">(<argument><expr><name><name pos:line="28" pos:column="35">next_code<pos:position pos:line="28" pos:column="44"/></name><index pos:line="28" pos:column="44">[<expr><name pos:line="28" pos:column="45">len<pos:position pos:line="28" pos:column="48"/></name></expr>]<pos:position pos:line="28" pos:column="49"/></index></name><operator pos:line="28" pos:column="49">++<pos:position pos:line="28" pos:column="51"/></operator></expr></argument>, <argument><expr><name pos:line="28" pos:column="53">len<pos:position pos:line="28" pos:column="56"/></name></expr></argument>)<pos:position pos:line="28" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="58"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="30" pos:column="9">Tracecv<pos:position pos:line="30" pos:column="16"/></name><argument_list pos:line="30" pos:column="16">(<argument><expr><name pos:line="30" pos:column="17">tree<pos:position pos:line="30" pos:column="21"/></name> <operator pos:line="30" pos:column="22">!=<pos:position pos:line="30" pos:column="24"/></operator> <name pos:line="30" pos:column="25">static_ltree<pos:position pos:line="30" pos:column="37"/></name></expr></argument>, <argument><expr><operator pos:line="30" pos:column="39">(<pos:position pos:line="30" pos:column="40"/></operator><name pos:line="30" pos:column="40">stderr<pos:position pos:line="30" pos:column="46"/></name><operator pos:line="30" pos:column="46">,<pos:position pos:line="30" pos:column="47"/></operator><literal type="string" pos:line="30" pos:column="47">"\nn %3d %c l %2d c %4x (%x) "<pos:position pos:line="30" pos:column="77"/></literal><operator pos:line="30" pos:column="77">,<pos:position pos:line="30" pos:column="78"/></operator>
             <name pos:line="31" pos:column="14">n<pos:position pos:line="31" pos:column="15"/></name><operator pos:line="31" pos:column="15">,<pos:position pos:line="31" pos:column="16"/></operator> <operator pos:line="31" pos:column="17">(<pos:position pos:line="31" pos:column="18"/></operator><ternary><condition><expr><call><name pos:line="31" pos:column="18">isgraph<pos:position pos:line="31" pos:column="25"/></name><argument_list pos:line="31" pos:column="25">(<argument><expr><name pos:line="31" pos:column="26">n<pos:position pos:line="31" pos:column="27"/></name></expr></argument>)<pos:position pos:line="31" pos:column="28"/></argument_list></call></expr> ?<pos:position pos:line="31" pos:column="30"/></condition><then pos:line="31" pos:column="30"> <expr><name pos:line="31" pos:column="31">n<pos:position pos:line="31" pos:column="32"/></name></expr> <pos:position pos:line="31" pos:column="33"/></then><else pos:line="31" pos:column="33">: <expr><literal type="char" pos:line="31" pos:column="35">' '<pos:position pos:line="31" pos:column="38"/></literal></expr></else></ternary><operator pos:line="31" pos:column="38">)<pos:position pos:line="31" pos:column="39"/></operator><operator pos:line="31" pos:column="39">,<pos:position pos:line="31" pos:column="40"/></operator> <name pos:line="31" pos:column="41">len<pos:position pos:line="31" pos:column="44"/></name><operator pos:line="31" pos:column="44">,<pos:position pos:line="31" pos:column="45"/></operator> <name><name pos:line="31" pos:column="46">tree<pos:position pos:line="31" pos:column="50"/></name><index pos:line="31" pos:column="50">[<expr><name pos:line="31" pos:column="51">n<pos:position pos:line="31" pos:column="52"/></name></expr>]<pos:position pos:line="31" pos:column="53"/></index></name><operator pos:line="31" pos:column="53">.<pos:position pos:line="31" pos:column="54"/></operator><name pos:line="31" pos:column="54">Code<pos:position pos:line="31" pos:column="58"/></name><operator pos:line="31" pos:column="58">,<pos:position pos:line="31" pos:column="59"/></operator> <name><name pos:line="31" pos:column="60">next_code<pos:position pos:line="31" pos:column="69"/></name><index pos:line="31" pos:column="69">[<expr><name pos:line="31" pos:column="70">len<pos:position pos:line="31" pos:column="73"/></name></expr>]<pos:position pos:line="31" pos:column="74"/></index></name><operator pos:line="31" pos:column="74">-<pos:position pos:line="31" pos:column="75"/></operator><literal type="number" pos:line="31" pos:column="75">1<pos:position pos:line="31" pos:column="76"/></literal><operator pos:line="31" pos:column="76">)<pos:position pos:line="31" pos:column="77"/></operator></expr></argument>)<pos:position pos:line="31" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="79"/></expr_stmt>
    }<pos:position pos:line="32" pos:column="6"/></block></for>
}<pos:position pos:line="33" pos:column="2"/></block></unit>
