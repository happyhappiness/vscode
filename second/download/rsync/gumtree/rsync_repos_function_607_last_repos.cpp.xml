<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_607_last_repos.cpp" pos:tabs="8"><decl_stmt><decl><type><name pos:line="1" pos:column="1">local<pos:position pos:line="1" pos:column="6"/></name> <name pos:line="1" pos:column="7">void<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">build_tree<pos:position pos:line="1" pos:column="22"/></name><argument_list pos:line="1" pos:column="22">(<argument><expr><name pos:line="1" pos:column="23">s<pos:position pos:line="1" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="1" pos:column="26">desc<pos:position pos:line="1" pos:column="30"/></name></expr></argument>)<pos:position pos:line="1" pos:column="31"/></argument_list>
    <name pos:line="2" pos:column="5">deflate_state<pos:position pos:line="2" pos:column="18"/></name> <modifier pos:line="2" pos:column="19">*<pos:position pos:line="2" pos:column="20"/></modifier><name pos:line="2" pos:column="20">s<pos:position pos:line="2" pos:column="21"/></name></decl>;<pos:position pos:line="2" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">tree_desc<pos:position pos:line="3" pos:column="14"/></name> <modifier pos:line="3" pos:column="15">*<pos:position pos:line="3" pos:column="16"/></modifier></type><name pos:line="3" pos:column="16">desc<pos:position pos:line="3" pos:column="20"/></name></decl>;<pos:position pos:line="3" pos:column="21"/></decl_stmt> <comment type="block" pos:line="3" pos:column="22">/* the tree descriptor */</comment>
<block pos:line="4" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">ct_data<pos:position pos:line="5" pos:column="12"/></name> <modifier pos:line="5" pos:column="13">*<pos:position pos:line="5" pos:column="14"/></modifier></type><name pos:line="5" pos:column="14">tree<pos:position pos:line="5" pos:column="18"/></name>         <init pos:line="5" pos:column="27">= <expr><name><name pos:line="5" pos:column="29">desc<pos:position pos:line="5" pos:column="33"/></name><operator pos:line="5" pos:column="33">-&gt;<pos:position pos:line="5" pos:column="38"/></operator><name pos:line="5" pos:column="35">dyn_tree<pos:position pos:line="5" pos:column="43"/></name></name></expr></init></decl>;<pos:position pos:line="5" pos:column="44"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="6" pos:column="5">const<pos:position pos:line="6" pos:column="10"/></specifier> <name pos:line="6" pos:column="11">ct_data<pos:position pos:line="6" pos:column="18"/></name> <modifier pos:line="6" pos:column="19">*<pos:position pos:line="6" pos:column="20"/></modifier></type><name pos:line="6" pos:column="20">stree<pos:position pos:line="6" pos:column="25"/></name>  <init pos:line="6" pos:column="27">= <expr><name><name pos:line="6" pos:column="29">desc<pos:position pos:line="6" pos:column="33"/></name><operator pos:line="6" pos:column="33">-&gt;<pos:position pos:line="6" pos:column="38"/></operator><name pos:line="6" pos:column="35">stat_desc<pos:position pos:line="6" pos:column="44"/></name><operator pos:line="6" pos:column="44">-&gt;<pos:position pos:line="6" pos:column="49"/></operator><name pos:line="6" pos:column="46">static_tree<pos:position pos:line="6" pos:column="57"/></name></name></expr></init></decl>;<pos:position pos:line="6" pos:column="58"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">int<pos:position pos:line="7" pos:column="8"/></name></type> <name pos:line="7" pos:column="9">elems<pos:position pos:line="7" pos:column="14"/></name>             <init pos:line="7" pos:column="27">= <expr><name><name pos:line="7" pos:column="29">desc<pos:position pos:line="7" pos:column="33"/></name><operator pos:line="7" pos:column="33">-&gt;<pos:position pos:line="7" pos:column="38"/></operator><name pos:line="7" pos:column="35">stat_desc<pos:position pos:line="7" pos:column="44"/></name><operator pos:line="7" pos:column="44">-&gt;<pos:position pos:line="7" pos:column="49"/></operator><name pos:line="7" pos:column="46">elems<pos:position pos:line="7" pos:column="51"/></name></name></expr></init></decl>;<pos:position pos:line="7" pos:column="52"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">int<pos:position pos:line="8" pos:column="8"/></name></type> <name pos:line="8" pos:column="9">n<pos:position pos:line="8" pos:column="10"/></name></decl>, <decl><type ref="prev"/><name pos:line="8" pos:column="12">m<pos:position pos:line="8" pos:column="13"/></name></decl>;<pos:position pos:line="8" pos:column="14"/></decl_stmt>          <comment type="block" pos:line="8" pos:column="24">/* iterate over heap elements */</comment>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">int<pos:position pos:line="9" pos:column="8"/></name></type> <name pos:line="9" pos:column="9">max_code<pos:position pos:line="9" pos:column="17"/></name> <init pos:line="9" pos:column="18">= <expr><operator pos:line="9" pos:column="20">-<pos:position pos:line="9" pos:column="21"/></operator><literal type="number" pos:line="9" pos:column="21">1<pos:position pos:line="9" pos:column="22"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="23"/></decl_stmt> <comment type="block" pos:line="9" pos:column="24">/* largest code with non zero frequency */</comment>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">int<pos:position pos:line="10" pos:column="8"/></name></type> <name pos:line="10" pos:column="9">node<pos:position pos:line="10" pos:column="13"/></name></decl>;<pos:position pos:line="10" pos:column="14"/></decl_stmt>          <comment type="block" pos:line="10" pos:column="24">/* new node being created */</comment>

    <comment type="block" pos:line="12" pos:column="5">/* Construct the initial heap, with least frequent element in
     * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
     * heap[0] is not used.
     */</comment>
    <expr_stmt><expr><name><name pos:line="16" pos:column="5">s<pos:position pos:line="16" pos:column="6"/></name><operator pos:line="16" pos:column="6">-&gt;<pos:position pos:line="16" pos:column="11"/></operator><name pos:line="16" pos:column="8">heap_len<pos:position pos:line="16" pos:column="16"/></name></name> <operator pos:line="16" pos:column="17">=<pos:position pos:line="16" pos:column="18"/></operator> <literal type="number" pos:line="16" pos:column="19">0<pos:position pos:line="16" pos:column="20"/></literal></expr><operator pos:line="16" pos:column="20">,<pos:position pos:line="16" pos:column="21"/></operator> <expr><name><name pos:line="16" pos:column="22">s<pos:position pos:line="16" pos:column="23"/></name><operator pos:line="16" pos:column="23">-&gt;<pos:position pos:line="16" pos:column="28"/></operator><name pos:line="16" pos:column="25">heap_max<pos:position pos:line="16" pos:column="33"/></name></name> <operator pos:line="16" pos:column="34">=<pos:position pos:line="16" pos:column="35"/></operator> <name pos:line="16" pos:column="36">HEAP_SIZE<pos:position pos:line="16" pos:column="45"/></name></expr>;<pos:position pos:line="16" pos:column="46"/></expr_stmt>

    <for pos:line="18" pos:column="5">for <control pos:line="18" pos:column="9">(<init><expr><name pos:line="18" pos:column="10">n<pos:position pos:line="18" pos:column="11"/></name> <operator pos:line="18" pos:column="12">=<pos:position pos:line="18" pos:column="13"/></operator> <literal type="number" pos:line="18" pos:column="14">0<pos:position pos:line="18" pos:column="15"/></literal></expr>;<pos:position pos:line="18" pos:column="16"/></init> <condition><expr><name pos:line="18" pos:column="17">n<pos:position pos:line="18" pos:column="18"/></name> <operator pos:line="18" pos:column="19">&lt;<pos:position pos:line="18" pos:column="23"/></operator> <name pos:line="18" pos:column="21">elems<pos:position pos:line="18" pos:column="26"/></name></expr>;<pos:position pos:line="18" pos:column="27"/></condition> <incr><expr><name pos:line="18" pos:column="28">n<pos:position pos:line="18" pos:column="29"/></name><operator pos:line="18" pos:column="29">++<pos:position pos:line="18" pos:column="31"/></operator></expr></incr>)<pos:position pos:line="18" pos:column="32"/></control> <block pos:line="18" pos:column="33">{
        <if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><name><name pos:line="19" pos:column="13">tree<pos:position pos:line="19" pos:column="17"/></name><index pos:line="19" pos:column="17">[<expr><name pos:line="19" pos:column="18">n<pos:position pos:line="19" pos:column="19"/></name></expr>]<pos:position pos:line="19" pos:column="20"/></index></name><operator pos:line="19" pos:column="20">.<pos:position pos:line="19" pos:column="21"/></operator><name pos:line="19" pos:column="21">Freq<pos:position pos:line="19" pos:column="25"/></name> <operator pos:line="19" pos:column="26">!=<pos:position pos:line="19" pos:column="28"/></operator> <literal type="number" pos:line="19" pos:column="29">0<pos:position pos:line="19" pos:column="30"/></literal></expr>)<pos:position pos:line="19" pos:column="31"/></condition><then pos:line="19" pos:column="31"> <block pos:line="19" pos:column="32">{
            <expr_stmt><expr><name><name pos:line="20" pos:column="13">s<pos:position pos:line="20" pos:column="14"/></name><operator pos:line="20" pos:column="14">-&gt;<pos:position pos:line="20" pos:column="19"/></operator><name pos:line="20" pos:column="16">heap<pos:position pos:line="20" pos:column="20"/></name><index pos:line="20" pos:column="20">[<expr><operator pos:line="20" pos:column="21">++<pos:position pos:line="20" pos:column="23"/></operator><operator pos:line="20" pos:column="23">(<pos:position pos:line="20" pos:column="24"/></operator><name><name pos:line="20" pos:column="24">s<pos:position pos:line="20" pos:column="25"/></name><operator pos:line="20" pos:column="25">-&gt;<pos:position pos:line="20" pos:column="30"/></operator><name pos:line="20" pos:column="27">heap_len<pos:position pos:line="20" pos:column="35"/></name></name><operator pos:line="20" pos:column="35">)<pos:position pos:line="20" pos:column="36"/></operator></expr>]<pos:position pos:line="20" pos:column="37"/></index></name> <operator pos:line="20" pos:column="38">=<pos:position pos:line="20" pos:column="39"/></operator> <name pos:line="20" pos:column="40">max_code<pos:position pos:line="20" pos:column="48"/></name> <operator pos:line="20" pos:column="49">=<pos:position pos:line="20" pos:column="50"/></operator> <name pos:line="20" pos:column="51">n<pos:position pos:line="20" pos:column="52"/></name></expr>;<pos:position pos:line="20" pos:column="53"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="21" pos:column="13">s<pos:position pos:line="21" pos:column="14"/></name><operator pos:line="21" pos:column="14">-&gt;<pos:position pos:line="21" pos:column="19"/></operator><name pos:line="21" pos:column="16">depth<pos:position pos:line="21" pos:column="21"/></name><index pos:line="21" pos:column="21">[<expr><name pos:line="21" pos:column="22">n<pos:position pos:line="21" pos:column="23"/></name></expr>]<pos:position pos:line="21" pos:column="24"/></index></name> <operator pos:line="21" pos:column="25">=<pos:position pos:line="21" pos:column="26"/></operator> <literal type="number" pos:line="21" pos:column="27">0<pos:position pos:line="21" pos:column="28"/></literal></expr>;<pos:position pos:line="21" pos:column="29"/></expr_stmt>
        }<pos:position pos:line="22" pos:column="10"/></block></then> <else pos:line="22" pos:column="11">else <block pos:line="22" pos:column="16">{
            <expr_stmt><expr><name><name pos:line="23" pos:column="13">tree<pos:position pos:line="23" pos:column="17"/></name><index pos:line="23" pos:column="17">[<expr><name pos:line="23" pos:column="18">n<pos:position pos:line="23" pos:column="19"/></name></expr>]<pos:position pos:line="23" pos:column="20"/></index></name><operator pos:line="23" pos:column="20">.<pos:position pos:line="23" pos:column="21"/></operator><name pos:line="23" pos:column="21">Len<pos:position pos:line="23" pos:column="24"/></name> <operator pos:line="23" pos:column="25">=<pos:position pos:line="23" pos:column="26"/></operator> <literal type="number" pos:line="23" pos:column="27">0<pos:position pos:line="23" pos:column="28"/></literal></expr>;<pos:position pos:line="23" pos:column="29"/></expr_stmt>
        }<pos:position pos:line="24" pos:column="10"/></block></else></if>
    }<pos:position pos:line="25" pos:column="6"/></block></for>

    <comment type="block" pos:line="27" pos:column="5">/* The pkzip format requires that at least one distance code exists,
     * and that at least one bit should be sent even if there is only one
     * possible code. So to avoid special checks later on we force at least
     * two codes of non zero frequency.
     */</comment>
    <while pos:line="32" pos:column="5">while <condition pos:line="32" pos:column="11">(<expr><name><name pos:line="32" pos:column="12">s<pos:position pos:line="32" pos:column="13"/></name><operator pos:line="32" pos:column="13">-&gt;<pos:position pos:line="32" pos:column="18"/></operator><name pos:line="32" pos:column="15">heap_len<pos:position pos:line="32" pos:column="23"/></name></name> <operator pos:line="32" pos:column="24">&lt;<pos:position pos:line="32" pos:column="28"/></operator> <literal type="number" pos:line="32" pos:column="26">2<pos:position pos:line="32" pos:column="27"/></literal></expr>)<pos:position pos:line="32" pos:column="28"/></condition> <block pos:line="32" pos:column="29">{
        <expr_stmt><expr><name pos:line="33" pos:column="9">node<pos:position pos:line="33" pos:column="13"/></name> <operator pos:line="33" pos:column="14">=<pos:position pos:line="33" pos:column="15"/></operator> <name><name pos:line="33" pos:column="16">s<pos:position pos:line="33" pos:column="17"/></name><operator pos:line="33" pos:column="17">-&gt;<pos:position pos:line="33" pos:column="22"/></operator><name pos:line="33" pos:column="19">heap<pos:position pos:line="33" pos:column="23"/></name><index pos:line="33" pos:column="23">[<expr><operator pos:line="33" pos:column="24">++<pos:position pos:line="33" pos:column="26"/></operator><operator pos:line="33" pos:column="26">(<pos:position pos:line="33" pos:column="27"/></operator><name><name pos:line="33" pos:column="27">s<pos:position pos:line="33" pos:column="28"/></name><operator pos:line="33" pos:column="28">-&gt;<pos:position pos:line="33" pos:column="33"/></operator><name pos:line="33" pos:column="30">heap_len<pos:position pos:line="33" pos:column="38"/></name></name><operator pos:line="33" pos:column="38">)<pos:position pos:line="33" pos:column="39"/></operator></expr>]<pos:position pos:line="33" pos:column="40"/></index></name> <operator pos:line="33" pos:column="41">=<pos:position pos:line="33" pos:column="42"/></operator> <operator pos:line="33" pos:column="43">(<pos:position pos:line="33" pos:column="44"/></operator><ternary><condition><expr><name pos:line="33" pos:column="44">max_code<pos:position pos:line="33" pos:column="52"/></name> <operator pos:line="33" pos:column="53">&lt;<pos:position pos:line="33" pos:column="57"/></operator> <literal type="number" pos:line="33" pos:column="55">2<pos:position pos:line="33" pos:column="56"/></literal></expr> ?<pos:position pos:line="33" pos:column="58"/></condition><then pos:line="33" pos:column="58"> <expr><operator pos:line="33" pos:column="59">++<pos:position pos:line="33" pos:column="61"/></operator><name pos:line="33" pos:column="61">max_code<pos:position pos:line="33" pos:column="69"/></name></expr> <pos:position pos:line="33" pos:column="70"/></then><else pos:line="33" pos:column="70">: <expr><literal type="number" pos:line="33" pos:column="72">0<pos:position pos:line="33" pos:column="73"/></literal></expr></else></ternary><operator pos:line="33" pos:column="73">)<pos:position pos:line="33" pos:column="74"/></operator></expr>;<pos:position pos:line="33" pos:column="75"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="34" pos:column="9">tree<pos:position pos:line="34" pos:column="13"/></name><index pos:line="34" pos:column="13">[<expr><name pos:line="34" pos:column="14">node<pos:position pos:line="34" pos:column="18"/></name></expr>]<pos:position pos:line="34" pos:column="19"/></index></name><operator pos:line="34" pos:column="19">.<pos:position pos:line="34" pos:column="20"/></operator><name pos:line="34" pos:column="20">Freq<pos:position pos:line="34" pos:column="24"/></name> <operator pos:line="34" pos:column="25">=<pos:position pos:line="34" pos:column="26"/></operator> <literal type="number" pos:line="34" pos:column="27">1<pos:position pos:line="34" pos:column="28"/></literal></expr>;<pos:position pos:line="34" pos:column="29"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="35" pos:column="9">s<pos:position pos:line="35" pos:column="10"/></name><operator pos:line="35" pos:column="10">-&gt;<pos:position pos:line="35" pos:column="15"/></operator><name pos:line="35" pos:column="12">depth<pos:position pos:line="35" pos:column="17"/></name><index pos:line="35" pos:column="17">[<expr><name pos:line="35" pos:column="18">node<pos:position pos:line="35" pos:column="22"/></name></expr>]<pos:position pos:line="35" pos:column="23"/></index></name> <operator pos:line="35" pos:column="24">=<pos:position pos:line="35" pos:column="25"/></operator> <literal type="number" pos:line="35" pos:column="26">0<pos:position pos:line="35" pos:column="27"/></literal></expr>;<pos:position pos:line="35" pos:column="28"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="36" pos:column="9">s<pos:position pos:line="36" pos:column="10"/></name><operator pos:line="36" pos:column="10">-&gt;<pos:position pos:line="36" pos:column="15"/></operator><name pos:line="36" pos:column="12">opt_len<pos:position pos:line="36" pos:column="19"/></name></name><operator pos:line="36" pos:column="19">--<pos:position pos:line="36" pos:column="21"/></operator></expr>;<pos:position pos:line="36" pos:column="22"/></expr_stmt> <if pos:line="36" pos:column="23">if <condition pos:line="36" pos:column="26">(<expr><name pos:line="36" pos:column="27">stree<pos:position pos:line="36" pos:column="32"/></name></expr>)<pos:position pos:line="36" pos:column="33"/></condition><then pos:line="36" pos:column="33"> <block type="pseudo"><expr_stmt><expr><name><name pos:line="36" pos:column="34">s<pos:position pos:line="36" pos:column="35"/></name><operator pos:line="36" pos:column="35">-&gt;<pos:position pos:line="36" pos:column="40"/></operator><name pos:line="36" pos:column="37">static_len<pos:position pos:line="36" pos:column="47"/></name></name> <operator pos:line="36" pos:column="48">-=<pos:position pos:line="36" pos:column="50"/></operator> <name><name pos:line="36" pos:column="51">stree<pos:position pos:line="36" pos:column="56"/></name><index pos:line="36" pos:column="56">[<expr><name pos:line="36" pos:column="57">node<pos:position pos:line="36" pos:column="61"/></name></expr>]<pos:position pos:line="36" pos:column="62"/></index></name><operator pos:line="36" pos:column="62">.<pos:position pos:line="36" pos:column="63"/></operator><name pos:line="36" pos:column="63">Len<pos:position pos:line="36" pos:column="66"/></name></expr>;<pos:position pos:line="36" pos:column="67"/></expr_stmt></block></then></if>
        <comment type="block" pos:line="37" pos:column="9">/* node is 0 or 1 so it does not have extra bits */</comment>
    }<pos:position pos:line="38" pos:column="6"/></block></while>
    <expr_stmt><expr><name><name pos:line="39" pos:column="5">desc<pos:position pos:line="39" pos:column="9"/></name><operator pos:line="39" pos:column="9">-&gt;<pos:position pos:line="39" pos:column="14"/></operator><name pos:line="39" pos:column="11">max_code<pos:position pos:line="39" pos:column="19"/></name></name> <operator pos:line="39" pos:column="20">=<pos:position pos:line="39" pos:column="21"/></operator> <name pos:line="39" pos:column="22">max_code<pos:position pos:line="39" pos:column="30"/></name></expr>;<pos:position pos:line="39" pos:column="31"/></expr_stmt>

    <comment type="block" pos:line="41" pos:column="5">/* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
     * establish sub-heaps of increasing lengths:
     */</comment>
    <for pos:line="44" pos:column="5">for <control pos:line="44" pos:column="9">(<init><expr><name pos:line="44" pos:column="10">n<pos:position pos:line="44" pos:column="11"/></name> <operator pos:line="44" pos:column="12">=<pos:position pos:line="44" pos:column="13"/></operator> <name><name pos:line="44" pos:column="14">s<pos:position pos:line="44" pos:column="15"/></name><operator pos:line="44" pos:column="15">-&gt;<pos:position pos:line="44" pos:column="20"/></operator><name pos:line="44" pos:column="17">heap_len<pos:position pos:line="44" pos:column="25"/></name></name><operator pos:line="44" pos:column="25">/<pos:position pos:line="44" pos:column="26"/></operator><literal type="number" pos:line="44" pos:column="26">2<pos:position pos:line="44" pos:column="27"/></literal></expr>;<pos:position pos:line="44" pos:column="28"/></init> <condition><expr><name pos:line="44" pos:column="29">n<pos:position pos:line="44" pos:column="30"/></name> <operator pos:line="44" pos:column="31">&gt;=<pos:position pos:line="44" pos:column="36"/></operator> <literal type="number" pos:line="44" pos:column="34">1<pos:position pos:line="44" pos:column="35"/></literal></expr>;<pos:position pos:line="44" pos:column="36"/></condition> <incr><expr><name pos:line="44" pos:column="37">n<pos:position pos:line="44" pos:column="38"/></name><operator pos:line="44" pos:column="38">--<pos:position pos:line="44" pos:column="40"/></operator></expr></incr>)<pos:position pos:line="44" pos:column="41"/></control> <block type="pseudo"><expr_stmt><expr><call><name pos:line="44" pos:column="42">pqdownheap<pos:position pos:line="44" pos:column="52"/></name><argument_list pos:line="44" pos:column="52">(<argument><expr><name pos:line="44" pos:column="53">s<pos:position pos:line="44" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="56">tree<pos:position pos:line="44" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="62">n<pos:position pos:line="44" pos:column="63"/></name></expr></argument>)<pos:position pos:line="44" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="65"/></expr_stmt></block></for>

    <comment type="block" pos:line="46" pos:column="5">/* Construct the Huffman tree by repeatedly combining the least two
     * frequent nodes.
     */</comment>
    <expr_stmt><expr><name pos:line="49" pos:column="5">node<pos:position pos:line="49" pos:column="9"/></name> <operator pos:line="49" pos:column="10">=<pos:position pos:line="49" pos:column="11"/></operator> <name pos:line="49" pos:column="12">elems<pos:position pos:line="49" pos:column="17"/></name></expr>;<pos:position pos:line="49" pos:column="18"/></expr_stmt>              <comment type="block" pos:line="49" pos:column="32">/* next internal node of the tree */</comment>
    <do pos:line="50" pos:column="5">do <block pos:line="50" pos:column="8">{
        <expr_stmt><expr><call><name pos:line="51" pos:column="9">pqremove<pos:position pos:line="51" pos:column="17"/></name><argument_list pos:line="51" pos:column="17">(<argument><expr><name pos:line="51" pos:column="18">s<pos:position pos:line="51" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="21">tree<pos:position pos:line="51" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="27">n<pos:position pos:line="51" pos:column="28"/></name></expr></argument>)<pos:position pos:line="51" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="30"/></expr_stmt>  <comment type="block" pos:line="51" pos:column="32">/* n = node of least frequency */</comment>
        <expr_stmt><expr><name pos:line="52" pos:column="9">m<pos:position pos:line="52" pos:column="10"/></name> <operator pos:line="52" pos:column="11">=<pos:position pos:line="52" pos:column="12"/></operator> <name><name pos:line="52" pos:column="13">s<pos:position pos:line="52" pos:column="14"/></name><operator pos:line="52" pos:column="14">-&gt;<pos:position pos:line="52" pos:column="19"/></operator><name pos:line="52" pos:column="16">heap<pos:position pos:line="52" pos:column="20"/></name><index pos:line="52" pos:column="20">[<expr><name pos:line="52" pos:column="21">SMALLEST<pos:position pos:line="52" pos:column="29"/></name></expr>]<pos:position pos:line="52" pos:column="30"/></index></name></expr>;<pos:position pos:line="52" pos:column="31"/></expr_stmt> <comment type="block" pos:line="52" pos:column="32">/* m = node of next least frequency */</comment>

        <expr_stmt><expr><name><name pos:line="54" pos:column="9">s<pos:position pos:line="54" pos:column="10"/></name><operator pos:line="54" pos:column="10">-&gt;<pos:position pos:line="54" pos:column="15"/></operator><name pos:line="54" pos:column="12">heap<pos:position pos:line="54" pos:column="16"/></name><index pos:line="54" pos:column="16">[<expr><operator pos:line="54" pos:column="17">--<pos:position pos:line="54" pos:column="19"/></operator><operator pos:line="54" pos:column="19">(<pos:position pos:line="54" pos:column="20"/></operator><name><name pos:line="54" pos:column="20">s<pos:position pos:line="54" pos:column="21"/></name><operator pos:line="54" pos:column="21">-&gt;<pos:position pos:line="54" pos:column="26"/></operator><name pos:line="54" pos:column="23">heap_max<pos:position pos:line="54" pos:column="31"/></name></name><operator pos:line="54" pos:column="31">)<pos:position pos:line="54" pos:column="32"/></operator></expr>]<pos:position pos:line="54" pos:column="33"/></index></name> <operator pos:line="54" pos:column="34">=<pos:position pos:line="54" pos:column="35"/></operator> <name pos:line="54" pos:column="36">n<pos:position pos:line="54" pos:column="37"/></name></expr>;<pos:position pos:line="54" pos:column="38"/></expr_stmt> <comment type="block" pos:line="54" pos:column="39">/* keep the nodes sorted by frequency */</comment>
        <expr_stmt><expr><name><name pos:line="55" pos:column="9">s<pos:position pos:line="55" pos:column="10"/></name><operator pos:line="55" pos:column="10">-&gt;<pos:position pos:line="55" pos:column="15"/></operator><name pos:line="55" pos:column="12">heap<pos:position pos:line="55" pos:column="16"/></name><index pos:line="55" pos:column="16">[<expr><operator pos:line="55" pos:column="17">--<pos:position pos:line="55" pos:column="19"/></operator><operator pos:line="55" pos:column="19">(<pos:position pos:line="55" pos:column="20"/></operator><name><name pos:line="55" pos:column="20">s<pos:position pos:line="55" pos:column="21"/></name><operator pos:line="55" pos:column="21">-&gt;<pos:position pos:line="55" pos:column="26"/></operator><name pos:line="55" pos:column="23">heap_max<pos:position pos:line="55" pos:column="31"/></name></name><operator pos:line="55" pos:column="31">)<pos:position pos:line="55" pos:column="32"/></operator></expr>]<pos:position pos:line="55" pos:column="33"/></index></name> <operator pos:line="55" pos:column="34">=<pos:position pos:line="55" pos:column="35"/></operator> <name pos:line="55" pos:column="36">m<pos:position pos:line="55" pos:column="37"/></name></expr>;<pos:position pos:line="55" pos:column="38"/></expr_stmt>

        <comment type="block" pos:line="57" pos:column="9">/* Create a new node father of n and m */</comment>
        <expr_stmt><expr><name><name pos:line="58" pos:column="9">tree<pos:position pos:line="58" pos:column="13"/></name><index pos:line="58" pos:column="13">[<expr><name pos:line="58" pos:column="14">node<pos:position pos:line="58" pos:column="18"/></name></expr>]<pos:position pos:line="58" pos:column="19"/></index></name><operator pos:line="58" pos:column="19">.<pos:position pos:line="58" pos:column="20"/></operator><name pos:line="58" pos:column="20">Freq<pos:position pos:line="58" pos:column="24"/></name> <operator pos:line="58" pos:column="25">=<pos:position pos:line="58" pos:column="26"/></operator> <name><name pos:line="58" pos:column="27">tree<pos:position pos:line="58" pos:column="31"/></name><index pos:line="58" pos:column="31">[<expr><name pos:line="58" pos:column="32">n<pos:position pos:line="58" pos:column="33"/></name></expr>]<pos:position pos:line="58" pos:column="34"/></index></name><operator pos:line="58" pos:column="34">.<pos:position pos:line="58" pos:column="35"/></operator><name pos:line="58" pos:column="35">Freq<pos:position pos:line="58" pos:column="39"/></name> <operator pos:line="58" pos:column="40">+<pos:position pos:line="58" pos:column="41"/></operator> <name><name pos:line="58" pos:column="42">tree<pos:position pos:line="58" pos:column="46"/></name><index pos:line="58" pos:column="46">[<expr><name pos:line="58" pos:column="47">m<pos:position pos:line="58" pos:column="48"/></name></expr>]<pos:position pos:line="58" pos:column="49"/></index></name><operator pos:line="58" pos:column="49">.<pos:position pos:line="58" pos:column="50"/></operator><name pos:line="58" pos:column="50">Freq<pos:position pos:line="58" pos:column="54"/></name></expr>;<pos:position pos:line="58" pos:column="55"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="59" pos:column="9">s<pos:position pos:line="59" pos:column="10"/></name><operator pos:line="59" pos:column="10">-&gt;<pos:position pos:line="59" pos:column="15"/></operator><name pos:line="59" pos:column="12">depth<pos:position pos:line="59" pos:column="17"/></name><index pos:line="59" pos:column="17">[<expr><name pos:line="59" pos:column="18">node<pos:position pos:line="59" pos:column="22"/></name></expr>]<pos:position pos:line="59" pos:column="23"/></index></name> <operator pos:line="59" pos:column="24">=<pos:position pos:line="59" pos:column="25"/></operator> <call pos:line="59" pos:column="26">(<name pos:line="59" pos:column="27">uch<pos:position pos:line="59" pos:column="30"/></name>)<argument_list pos:line="59" pos:column="31">(<argument><expr><operator pos:line="59" pos:column="32">(<pos:position pos:line="59" pos:column="33"/></operator><ternary><condition><expr><name><name pos:line="59" pos:column="33">s<pos:position pos:line="59" pos:column="34"/></name><operator pos:line="59" pos:column="34">-&gt;<pos:position pos:line="59" pos:column="39"/></operator><name pos:line="59" pos:column="36">depth<pos:position pos:line="59" pos:column="41"/></name><index pos:line="59" pos:column="41">[<expr><name pos:line="59" pos:column="42">n<pos:position pos:line="59" pos:column="43"/></name></expr>]<pos:position pos:line="59" pos:column="44"/></index></name> <operator pos:line="59" pos:column="45">&gt;=<pos:position pos:line="59" pos:column="50"/></operator> <name><name pos:line="59" pos:column="48">s<pos:position pos:line="59" pos:column="49"/></name><operator pos:line="59" pos:column="49">-&gt;<pos:position pos:line="59" pos:column="54"/></operator><name pos:line="59" pos:column="51">depth<pos:position pos:line="59" pos:column="56"/></name><index pos:line="59" pos:column="56">[<expr><name pos:line="59" pos:column="57">m<pos:position pos:line="59" pos:column="58"/></name></expr>]<pos:position pos:line="59" pos:column="59"/></index></name></expr> ?<pos:position pos:line="59" pos:column="61"/></condition><then pos:line="59" pos:column="61">
                                <expr><name><name pos:line="60" pos:column="33">s<pos:position pos:line="60" pos:column="34"/></name><operator pos:line="60" pos:column="34">-&gt;<pos:position pos:line="60" pos:column="39"/></operator><name pos:line="60" pos:column="36">depth<pos:position pos:line="60" pos:column="41"/></name><index pos:line="60" pos:column="41">[<expr><name pos:line="60" pos:column="42">n<pos:position pos:line="60" pos:column="43"/></name></expr>]<pos:position pos:line="60" pos:column="44"/></index></name></expr> <pos:position pos:line="60" pos:column="45"/></then><else pos:line="60" pos:column="45">: <expr><name><name pos:line="60" pos:column="47">s<pos:position pos:line="60" pos:column="48"/></name><operator pos:line="60" pos:column="48">-&gt;<pos:position pos:line="60" pos:column="53"/></operator><name pos:line="60" pos:column="50">depth<pos:position pos:line="60" pos:column="55"/></name><index pos:line="60" pos:column="55">[<expr><name pos:line="60" pos:column="56">m<pos:position pos:line="60" pos:column="57"/></name></expr>]<pos:position pos:line="60" pos:column="58"/></index></name></expr></else></ternary><operator pos:line="60" pos:column="58">)<pos:position pos:line="60" pos:column="59"/></operator> <operator pos:line="60" pos:column="60">+<pos:position pos:line="60" pos:column="61"/></operator> <literal type="number" pos:line="60" pos:column="62">1<pos:position pos:line="60" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="60" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="65"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="61" pos:column="9">tree<pos:position pos:line="61" pos:column="13"/></name><index pos:line="61" pos:column="13">[<expr><name pos:line="61" pos:column="14">n<pos:position pos:line="61" pos:column="15"/></name></expr>]<pos:position pos:line="61" pos:column="16"/></index></name><operator pos:line="61" pos:column="16">.<pos:position pos:line="61" pos:column="17"/></operator><name pos:line="61" pos:column="17">Dad<pos:position pos:line="61" pos:column="20"/></name> <operator pos:line="61" pos:column="21">=<pos:position pos:line="61" pos:column="22"/></operator> <name><name pos:line="61" pos:column="23">tree<pos:position pos:line="61" pos:column="27"/></name><index pos:line="61" pos:column="27">[<expr><name pos:line="61" pos:column="28">m<pos:position pos:line="61" pos:column="29"/></name></expr>]<pos:position pos:line="61" pos:column="30"/></index></name><operator pos:line="61" pos:column="30">.<pos:position pos:line="61" pos:column="31"/></operator><name pos:line="61" pos:column="31">Dad<pos:position pos:line="61" pos:column="34"/></name> <operator pos:line="61" pos:column="35">=<pos:position pos:line="61" pos:column="36"/></operator> <operator pos:line="61" pos:column="37">(<pos:position pos:line="61" pos:column="38"/></operator><name pos:line="61" pos:column="38">ush<pos:position pos:line="61" pos:column="41"/></name><operator pos:line="61" pos:column="41">)<pos:position pos:line="61" pos:column="42"/></operator><name pos:line="61" pos:column="42">node<pos:position pos:line="61" pos:column="46"/></name></expr>;<pos:position pos:line="61" pos:column="47"/></expr_stmt>
<cpp:ifdef pos:line="62" pos:column="1">#<cpp:directive pos:line="62" pos:column="2">ifdef<pos:position pos:line="62" pos:column="7"/></cpp:directive> <name pos:line="62" pos:column="8">DUMP_BL_TREE<pos:position pos:line="62" pos:column="20"/></name></cpp:ifdef>
        <if pos:line="63" pos:column="9">if <condition pos:line="63" pos:column="12">(<expr><name pos:line="63" pos:column="13">tree<pos:position pos:line="63" pos:column="17"/></name> <operator pos:line="63" pos:column="18">==<pos:position pos:line="63" pos:column="20"/></operator> <name><name pos:line="63" pos:column="21">s<pos:position pos:line="63" pos:column="22"/></name><operator pos:line="63" pos:column="22">-&gt;<pos:position pos:line="63" pos:column="27"/></operator><name pos:line="63" pos:column="24">bl_tree<pos:position pos:line="63" pos:column="31"/></name></name></expr>)<pos:position pos:line="63" pos:column="32"/></condition><then pos:line="63" pos:column="32"> <block pos:line="63" pos:column="33">{
            <expr_stmt><expr><call><name pos:line="64" pos:column="13">fprintf<pos:position pos:line="64" pos:column="20"/></name><argument_list pos:line="64" pos:column="20">(<argument><expr><name pos:line="64" pos:column="21">stderr<pos:position pos:line="64" pos:column="27"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="64" pos:column="28">"\nnode %d(%d), sons %d(%d) %d(%d)"<pos:position pos:line="64" pos:column="63"/></literal></expr></argument>,
                    <argument><expr><name pos:line="65" pos:column="21">node<pos:position pos:line="65" pos:column="25"/></name></expr></argument>, <argument><expr><name><name pos:line="65" pos:column="27">tree<pos:position pos:line="65" pos:column="31"/></name><index pos:line="65" pos:column="31">[<expr><name pos:line="65" pos:column="32">node<pos:position pos:line="65" pos:column="36"/></name></expr>]<pos:position pos:line="65" pos:column="37"/></index></name><operator pos:line="65" pos:column="37">.<pos:position pos:line="65" pos:column="38"/></operator><name pos:line="65" pos:column="38">Freq<pos:position pos:line="65" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="44">n<pos:position pos:line="65" pos:column="45"/></name></expr></argument>, <argument><expr><name><name pos:line="65" pos:column="47">tree<pos:position pos:line="65" pos:column="51"/></name><index pos:line="65" pos:column="51">[<expr><name pos:line="65" pos:column="52">n<pos:position pos:line="65" pos:column="53"/></name></expr>]<pos:position pos:line="65" pos:column="54"/></index></name><operator pos:line="65" pos:column="54">.<pos:position pos:line="65" pos:column="55"/></operator><name pos:line="65" pos:column="55">Freq<pos:position pos:line="65" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="61">m<pos:position pos:line="65" pos:column="62"/></name></expr></argument>, <argument><expr><name><name pos:line="65" pos:column="64">tree<pos:position pos:line="65" pos:column="68"/></name><index pos:line="65" pos:column="68">[<expr><name pos:line="65" pos:column="69">m<pos:position pos:line="65" pos:column="70"/></name></expr>]<pos:position pos:line="65" pos:column="71"/></index></name><operator pos:line="65" pos:column="71">.<pos:position pos:line="65" pos:column="72"/></operator><name pos:line="65" pos:column="72">Freq<pos:position pos:line="65" pos:column="76"/></name></expr></argument>)<pos:position pos:line="65" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="78"/></expr_stmt>
        }<pos:position pos:line="66" pos:column="10"/></block></then></if>
<cpp:endif pos:line="67" pos:column="1">#<cpp:directive pos:line="67" pos:column="2">endif<pos:position pos:line="67" pos:column="7"/></cpp:directive></cpp:endif>
        <comment type="block" pos:line="68" pos:column="9">/* and insert the new node in the heap */</comment>
        <expr_stmt><expr><name><name pos:line="69" pos:column="9">s<pos:position pos:line="69" pos:column="10"/></name><operator pos:line="69" pos:column="10">-&gt;<pos:position pos:line="69" pos:column="15"/></operator><name pos:line="69" pos:column="12">heap<pos:position pos:line="69" pos:column="16"/></name><index pos:line="69" pos:column="16">[<expr><name pos:line="69" pos:column="17">SMALLEST<pos:position pos:line="69" pos:column="25"/></name></expr>]<pos:position pos:line="69" pos:column="26"/></index></name> <operator pos:line="69" pos:column="27">=<pos:position pos:line="69" pos:column="28"/></operator> <name pos:line="69" pos:column="29">node<pos:position pos:line="69" pos:column="33"/></name><operator pos:line="69" pos:column="33">++<pos:position pos:line="69" pos:column="35"/></operator></expr>;<pos:position pos:line="69" pos:column="36"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="70" pos:column="9">pqdownheap<pos:position pos:line="70" pos:column="19"/></name><argument_list pos:line="70" pos:column="19">(<argument><expr><name pos:line="70" pos:column="20">s<pos:position pos:line="70" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="70" pos:column="23">tree<pos:position pos:line="70" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="70" pos:column="29">SMALLEST<pos:position pos:line="70" pos:column="37"/></name></expr></argument>)<pos:position pos:line="70" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="39"/></expr_stmt>

    }<pos:position pos:line="72" pos:column="6"/></block> while <condition pos:line="72" pos:column="13">(<expr><name><name pos:line="72" pos:column="14">s<pos:position pos:line="72" pos:column="15"/></name><operator pos:line="72" pos:column="15">-&gt;<pos:position pos:line="72" pos:column="20"/></operator><name pos:line="72" pos:column="17">heap_len<pos:position pos:line="72" pos:column="25"/></name></name> <operator pos:line="72" pos:column="26">&gt;=<pos:position pos:line="72" pos:column="31"/></operator> <literal type="number" pos:line="72" pos:column="29">2<pos:position pos:line="72" pos:column="30"/></literal></expr>)<pos:position pos:line="72" pos:column="31"/></condition>;<pos:position pos:line="72" pos:column="32"/></do>

    <expr_stmt><expr><name><name pos:line="74" pos:column="5">s<pos:position pos:line="74" pos:column="6"/></name><operator pos:line="74" pos:column="6">-&gt;<pos:position pos:line="74" pos:column="11"/></operator><name pos:line="74" pos:column="8">heap<pos:position pos:line="74" pos:column="12"/></name><index pos:line="74" pos:column="12">[<expr><operator pos:line="74" pos:column="13">--<pos:position pos:line="74" pos:column="15"/></operator><operator pos:line="74" pos:column="15">(<pos:position pos:line="74" pos:column="16"/></operator><name><name pos:line="74" pos:column="16">s<pos:position pos:line="74" pos:column="17"/></name><operator pos:line="74" pos:column="17">-&gt;<pos:position pos:line="74" pos:column="22"/></operator><name pos:line="74" pos:column="19">heap_max<pos:position pos:line="74" pos:column="27"/></name></name><operator pos:line="74" pos:column="27">)<pos:position pos:line="74" pos:column="28"/></operator></expr>]<pos:position pos:line="74" pos:column="29"/></index></name> <operator pos:line="74" pos:column="30">=<pos:position pos:line="74" pos:column="31"/></operator> <name><name pos:line="74" pos:column="32">s<pos:position pos:line="74" pos:column="33"/></name><operator pos:line="74" pos:column="33">-&gt;<pos:position pos:line="74" pos:column="38"/></operator><name pos:line="74" pos:column="35">heap<pos:position pos:line="74" pos:column="39"/></name><index pos:line="74" pos:column="39">[<expr><name pos:line="74" pos:column="40">SMALLEST<pos:position pos:line="74" pos:column="48"/></name></expr>]<pos:position pos:line="74" pos:column="49"/></index></name></expr>;<pos:position pos:line="74" pos:column="50"/></expr_stmt>

    <comment type="block" pos:line="76" pos:column="5">/* At this point, the fields freq and dad are set. We can now
     * generate the bit lengths.
     */</comment>
    <expr_stmt><expr><call><name pos:line="79" pos:column="5">gen_bitlen<pos:position pos:line="79" pos:column="15"/></name><argument_list pos:line="79" pos:column="15">(<argument><expr><name pos:line="79" pos:column="16">s<pos:position pos:line="79" pos:column="17"/></name></expr></argument>, <argument><expr><operator pos:line="79" pos:column="19">(<pos:position pos:line="79" pos:column="20"/></operator><name pos:line="79" pos:column="20">tree_desc<pos:position pos:line="79" pos:column="29"/></name> <operator pos:line="79" pos:column="30">*<pos:position pos:line="79" pos:column="31"/></operator><operator pos:line="79" pos:column="31">)<pos:position pos:line="79" pos:column="32"/></operator><name pos:line="79" pos:column="32">desc<pos:position pos:line="79" pos:column="36"/></name></expr></argument>)<pos:position pos:line="79" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="38"/></expr_stmt>

    <comment type="block" pos:line="81" pos:column="5">/* The field len is now set, we can generate the bit codes */</comment>
    <expr_stmt><expr><call><name pos:line="82" pos:column="5">gen_codes<pos:position pos:line="82" pos:column="14"/></name> <argument_list pos:line="82" pos:column="15">(<argument><expr><operator pos:line="82" pos:column="16">(<pos:position pos:line="82" pos:column="17"/></operator><name pos:line="82" pos:column="17">ct_data<pos:position pos:line="82" pos:column="24"/></name> <operator pos:line="82" pos:column="25">*<pos:position pos:line="82" pos:column="26"/></operator><operator pos:line="82" pos:column="26">)<pos:position pos:line="82" pos:column="27"/></operator><name pos:line="82" pos:column="27">tree<pos:position pos:line="82" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="82" pos:column="33">max_code<pos:position pos:line="82" pos:column="41"/></name></expr></argument>, <argument><expr><name><name pos:line="82" pos:column="43">s<pos:position pos:line="82" pos:column="44"/></name><operator pos:line="82" pos:column="44">-&gt;<pos:position pos:line="82" pos:column="49"/></operator><name pos:line="82" pos:column="46">bl_count<pos:position pos:line="82" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="82" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="56"/></expr_stmt>
}<pos:position pos:line="83" pos:column="2"/></block></unit>
