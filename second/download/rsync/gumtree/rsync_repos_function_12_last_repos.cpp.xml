<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_12_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">hash_search<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name pos:line="1" pos:column="25">int<pos:position pos:line="1" pos:column="28"/></name></type> <name pos:line="1" pos:column="29">f<pos:position pos:line="1" pos:column="30"/></name></decl></parameter>,<parameter><decl><type><name><name pos:line="1" pos:column="31">struct<pos:position pos:line="1" pos:column="37"/></name> <name pos:line="1" pos:column="38">sum_struct<pos:position pos:line="1" pos:column="48"/></name></name> <modifier pos:line="1" pos:column="49">*<pos:position pos:line="1" pos:column="50"/></modifier></type><name pos:line="1" pos:column="50">s<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>,
			<parameter><decl><type><name><name pos:line="2" pos:column="25">struct<pos:position pos:line="2" pos:column="31"/></name> <name pos:line="2" pos:column="32">map_struct<pos:position pos:line="2" pos:column="42"/></name></name> <modifier pos:line="2" pos:column="43">*<pos:position pos:line="2" pos:column="44"/></modifier></type><name pos:line="2" pos:column="44">buf<pos:position pos:line="2" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="49">OFF_T<pos:position pos:line="2" pos:column="54"/></name></type> <name pos:line="2" pos:column="55">len<pos:position pos:line="2" pos:column="58"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="59"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">OFF_T<pos:position pos:line="4" pos:column="14"/></name></type> <name pos:line="4" pos:column="15">offset<pos:position pos:line="4" pos:column="21"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="23">aligned_offset<pos:position pos:line="4" pos:column="37"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="39">end<pos:position pos:line="4" pos:column="42"/></name></decl>;<pos:position pos:line="4" pos:column="43"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int32<pos:position pos:line="5" pos:column="14"/></name></type> <name pos:line="5" pos:column="15">k<pos:position pos:line="5" pos:column="16"/></name></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="18">want_i<pos:position pos:line="5" pos:column="24"/></name></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="26">aligned_i<pos:position pos:line="5" pos:column="35"/></name></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="37">backup<pos:position pos:line="5" pos:column="43"/></name></decl>;<pos:position pos:line="5" pos:column="44"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">char<pos:position pos:line="6" pos:column="13"/></name></type> <name><name pos:line="6" pos:column="14">sum2<pos:position pos:line="6" pos:column="18"/></name><index pos:line="6" pos:column="18">[<expr><name pos:line="6" pos:column="19">SUM_LENGTH<pos:position pos:line="6" pos:column="29"/></name></expr>]<pos:position pos:line="6" pos:column="30"/></index></name></decl>;<pos:position pos:line="6" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">uint32<pos:position pos:line="7" pos:column="15"/></name></type> <name pos:line="7" pos:column="16">s1<pos:position pos:line="7" pos:column="18"/></name></decl>, <decl><type ref="prev"/><name pos:line="7" pos:column="20">s2<pos:position pos:line="7" pos:column="22"/></name></decl>, <decl><type ref="prev"/><name pos:line="7" pos:column="24">sum<pos:position pos:line="7" pos:column="27"/></name></decl>;<pos:position pos:line="7" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">int<pos:position pos:line="8" pos:column="12"/></name></type> <name pos:line="8" pos:column="13">more<pos:position pos:line="8" pos:column="17"/></name></decl>;<pos:position pos:line="8" pos:column="18"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="9" pos:column="9">schar<pos:position pos:line="9" pos:column="14"/></name> <modifier pos:line="9" pos:column="15">*<pos:position pos:line="9" pos:column="16"/></modifier></type><name pos:line="9" pos:column="16">map<pos:position pos:line="9" pos:column="19"/></name></decl>;<pos:position pos:line="9" pos:column="20"/></decl_stmt>

	<comment type="block" pos:line="11" pos:column="9">/* want_i is used to encourage adjacent matches, allowing the RLL
	 * coding of the output to work more efficiently. */</comment>
	<expr_stmt><expr><name pos:line="13" pos:column="9">want_i<pos:position pos:line="13" pos:column="15"/></name> <operator pos:line="13" pos:column="16">=<pos:position pos:line="13" pos:column="17"/></operator> <literal type="number" pos:line="13" pos:column="18">0<pos:position pos:line="13" pos:column="19"/></literal></expr>;<pos:position pos:line="13" pos:column="20"/></expr_stmt>

	<if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><call><name pos:line="15" pos:column="13">DEBUG_GTE<pos:position pos:line="15" pos:column="22"/></name><argument_list pos:line="15" pos:column="22">(<argument><expr><name pos:line="15" pos:column="23">DELTASUM<pos:position pos:line="15" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="15" pos:column="33">2<pos:position pos:line="15" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="36"/></condition><then pos:line="15" pos:column="36"> <block pos:line="15" pos:column="37">{
		<expr_stmt><expr><call><name pos:line="16" pos:column="17">rprintf<pos:position pos:line="16" pos:column="24"/></name><argument_list pos:line="16" pos:column="24">(<argument><expr><name pos:line="16" pos:column="25">FINFO<pos:position pos:line="16" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="32">"hash search b=%ld len=%s\n"<pos:position pos:line="16" pos:column="60"/></literal></expr></argument>,
			<argument><expr><operator pos:line="17" pos:column="25">(<pos:position pos:line="17" pos:column="26"/></operator><name pos:line="17" pos:column="26">long<pos:position pos:line="17" pos:column="30"/></name><operator pos:line="17" pos:column="30">)<pos:position pos:line="17" pos:column="31"/></operator><name><name pos:line="17" pos:column="31">s<pos:position pos:line="17" pos:column="32"/></name><operator pos:line="17" pos:column="32">-&gt;<pos:position pos:line="17" pos:column="37"/></operator><name pos:line="17" pos:column="34">blength<pos:position pos:line="17" pos:column="41"/></name></name></expr></argument>, <argument><expr><call><name pos:line="17" pos:column="43">big_num<pos:position pos:line="17" pos:column="50"/></name><argument_list pos:line="17" pos:column="50">(<argument><expr><name pos:line="17" pos:column="51">len<pos:position pos:line="17" pos:column="54"/></name></expr></argument>)<pos:position pos:line="17" pos:column="55"/></argument_list></call></expr></argument>)<pos:position pos:line="17" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="57"/></expr_stmt>
	}<pos:position pos:line="18" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="20" pos:column="9">k<pos:position pos:line="20" pos:column="10"/></name> <operator pos:line="20" pos:column="11">=<pos:position pos:line="20" pos:column="12"/></operator> <operator pos:line="20" pos:column="13">(<pos:position pos:line="20" pos:column="14"/></operator><name pos:line="20" pos:column="14">int32<pos:position pos:line="20" pos:column="19"/></name><operator pos:line="20" pos:column="19">)<pos:position pos:line="20" pos:column="20"/></operator><call><name pos:line="20" pos:column="20">MIN<pos:position pos:line="20" pos:column="23"/></name><argument_list pos:line="20" pos:column="23">(<argument><expr><name pos:line="20" pos:column="24">len<pos:position pos:line="20" pos:column="27"/></name></expr></argument>, <argument><expr><operator pos:line="20" pos:column="29">(<pos:position pos:line="20" pos:column="30"/></operator><name pos:line="20" pos:column="30">OFF_T<pos:position pos:line="20" pos:column="35"/></name><operator pos:line="20" pos:column="35">)<pos:position pos:line="20" pos:column="36"/></operator><name><name pos:line="20" pos:column="36">s<pos:position pos:line="20" pos:column="37"/></name><operator pos:line="20" pos:column="37">-&gt;<pos:position pos:line="20" pos:column="42"/></operator><name pos:line="20" pos:column="39">blength<pos:position pos:line="20" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="20" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="48"/></expr_stmt>

	<expr_stmt><expr><name pos:line="22" pos:column="9">map<pos:position pos:line="22" pos:column="12"/></name> <operator pos:line="22" pos:column="13">=<pos:position pos:line="22" pos:column="14"/></operator> <operator pos:line="22" pos:column="15">(<pos:position pos:line="22" pos:column="16"/></operator><name pos:line="22" pos:column="16">schar<pos:position pos:line="22" pos:column="21"/></name> <operator pos:line="22" pos:column="22">*<pos:position pos:line="22" pos:column="23"/></operator><operator pos:line="22" pos:column="23">)<pos:position pos:line="22" pos:column="24"/></operator><call><name pos:line="22" pos:column="24">map_ptr<pos:position pos:line="22" pos:column="31"/></name><argument_list pos:line="22" pos:column="31">(<argument><expr><name pos:line="22" pos:column="32">buf<pos:position pos:line="22" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="22" pos:column="37">0<pos:position pos:line="22" pos:column="38"/></literal></expr></argument>, <argument><expr><name pos:line="22" pos:column="40">k<pos:position pos:line="22" pos:column="41"/></name></expr></argument>)<pos:position pos:line="22" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="43"/></expr_stmt>

	<expr_stmt><expr><name pos:line="24" pos:column="9">sum<pos:position pos:line="24" pos:column="12"/></name> <operator pos:line="24" pos:column="13">=<pos:position pos:line="24" pos:column="14"/></operator> <call><name pos:line="24" pos:column="15">get_checksum1<pos:position pos:line="24" pos:column="28"/></name><argument_list pos:line="24" pos:column="28">(<argument><expr><operator pos:line="24" pos:column="29">(<pos:position pos:line="24" pos:column="30"/></operator><name pos:line="24" pos:column="30">char<pos:position pos:line="24" pos:column="34"/></name> <operator pos:line="24" pos:column="35">*<pos:position pos:line="24" pos:column="36"/></operator><operator pos:line="24" pos:column="36">)<pos:position pos:line="24" pos:column="37"/></operator><name pos:line="24" pos:column="37">map<pos:position pos:line="24" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="42">k<pos:position pos:line="24" pos:column="43"/></name></expr></argument>)<pos:position pos:line="24" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="45"/></expr_stmt>
	<expr_stmt><expr><name pos:line="25" pos:column="9">s1<pos:position pos:line="25" pos:column="11"/></name> <operator pos:line="25" pos:column="12">=<pos:position pos:line="25" pos:column="13"/></operator> <name pos:line="25" pos:column="14">sum<pos:position pos:line="25" pos:column="17"/></name> <operator pos:line="25" pos:column="18">&amp;<pos:position pos:line="25" pos:column="23"/></operator> <literal type="number" pos:line="25" pos:column="20">0xFFFF<pos:position pos:line="25" pos:column="26"/></literal></expr>;<pos:position pos:line="25" pos:column="27"/></expr_stmt>
	<expr_stmt><expr><name pos:line="26" pos:column="9">s2<pos:position pos:line="26" pos:column="11"/></name> <operator pos:line="26" pos:column="12">=<pos:position pos:line="26" pos:column="13"/></operator> <name pos:line="26" pos:column="14">sum<pos:position pos:line="26" pos:column="17"/></name> <operator pos:line="26" pos:column="18">&gt;&gt;<pos:position pos:line="26" pos:column="23"/></operator> <literal type="number" pos:line="26" pos:column="21">16<pos:position pos:line="26" pos:column="23"/></literal></expr>;<pos:position pos:line="26" pos:column="24"/></expr_stmt>
	<if pos:line="27" pos:column="9">if <condition pos:line="27" pos:column="12">(<expr><call><name pos:line="27" pos:column="13">DEBUG_GTE<pos:position pos:line="27" pos:column="22"/></name><argument_list pos:line="27" pos:column="22">(<argument><expr><name pos:line="27" pos:column="23">DELTASUM<pos:position pos:line="27" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="27" pos:column="33">3<pos:position pos:line="27" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="27" pos:column="36"/></condition><then pos:line="27" pos:column="36">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="28" pos:column="17">rprintf<pos:position pos:line="28" pos:column="24"/></name><argument_list pos:line="28" pos:column="24">(<argument><expr><name pos:line="28" pos:column="25">FINFO<pos:position pos:line="28" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="28" pos:column="32">"sum=%.8x k=%ld\n"<pos:position pos:line="28" pos:column="50"/></literal></expr></argument>, <argument><expr><name pos:line="28" pos:column="52">sum<pos:position pos:line="28" pos:column="55"/></name></expr></argument>, <argument><expr><operator pos:line="28" pos:column="57">(<pos:position pos:line="28" pos:column="58"/></operator><name pos:line="28" pos:column="58">long<pos:position pos:line="28" pos:column="62"/></name><operator pos:line="28" pos:column="62">)<pos:position pos:line="28" pos:column="63"/></operator><name pos:line="28" pos:column="63">k<pos:position pos:line="28" pos:column="64"/></name></expr></argument>)<pos:position pos:line="28" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="66"/></expr_stmt></block></then></if>

	<expr_stmt><expr><name pos:line="30" pos:column="9">offset<pos:position pos:line="30" pos:column="15"/></name> <operator pos:line="30" pos:column="16">=<pos:position pos:line="30" pos:column="17"/></operator> <name pos:line="30" pos:column="18">aligned_offset<pos:position pos:line="30" pos:column="32"/></name> <operator pos:line="30" pos:column="33">=<pos:position pos:line="30" pos:column="34"/></operator> <name pos:line="30" pos:column="35">aligned_i<pos:position pos:line="30" pos:column="44"/></name> <operator pos:line="30" pos:column="45">=<pos:position pos:line="30" pos:column="46"/></operator> <literal type="number" pos:line="30" pos:column="47">0<pos:position pos:line="30" pos:column="48"/></literal></expr>;<pos:position pos:line="30" pos:column="49"/></expr_stmt>

	<expr_stmt><expr><name pos:line="32" pos:column="9">end<pos:position pos:line="32" pos:column="12"/></name> <operator pos:line="32" pos:column="13">=<pos:position pos:line="32" pos:column="14"/></operator> <name pos:line="32" pos:column="15">len<pos:position pos:line="32" pos:column="18"/></name> <operator pos:line="32" pos:column="19">+<pos:position pos:line="32" pos:column="20"/></operator> <literal type="number" pos:line="32" pos:column="21">1<pos:position pos:line="32" pos:column="22"/></literal> <operator pos:line="32" pos:column="23">-<pos:position pos:line="32" pos:column="24"/></operator> <name><name pos:line="32" pos:column="25">s<pos:position pos:line="32" pos:column="26"/></name><operator pos:line="32" pos:column="26">-&gt;<pos:position pos:line="32" pos:column="31"/></operator><name pos:line="32" pos:column="28">sums<pos:position pos:line="32" pos:column="32"/></name><index pos:line="32" pos:column="32">[<expr><name><name pos:line="32" pos:column="33">s<pos:position pos:line="32" pos:column="34"/></name><operator pos:line="32" pos:column="34">-&gt;<pos:position pos:line="32" pos:column="39"/></operator><name pos:line="32" pos:column="36">count<pos:position pos:line="32" pos:column="41"/></name></name><operator pos:line="32" pos:column="41">-<pos:position pos:line="32" pos:column="42"/></operator><literal type="number" pos:line="32" pos:column="42">1<pos:position pos:line="32" pos:column="43"/></literal></expr>]<pos:position pos:line="32" pos:column="44"/></index></name><operator pos:line="32" pos:column="44">.<pos:position pos:line="32" pos:column="45"/></operator><name pos:line="32" pos:column="45">len<pos:position pos:line="32" pos:column="48"/></name></expr>;<pos:position pos:line="32" pos:column="49"/></expr_stmt>

	<if pos:line="34" pos:column="9">if <condition pos:line="34" pos:column="12">(<expr><call><name pos:line="34" pos:column="13">DEBUG_GTE<pos:position pos:line="34" pos:column="22"/></name><argument_list pos:line="34" pos:column="22">(<argument><expr><name pos:line="34" pos:column="23">DELTASUM<pos:position pos:line="34" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="34" pos:column="33">3<pos:position pos:line="34" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="34" pos:column="36"/></condition><then pos:line="34" pos:column="36"> <block pos:line="34" pos:column="37">{
		<expr_stmt><expr><call><name pos:line="35" pos:column="17">rprintf<pos:position pos:line="35" pos:column="24"/></name><argument_list pos:line="35" pos:column="24">(<argument><expr><name pos:line="35" pos:column="25">FINFO<pos:position pos:line="35" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="35" pos:column="32">"hash search s-&gt;blength=%ld len=%s count=%s\n"<pos:position pos:line="35" pos:column="81"/></literal></expr></argument>,
			<argument><expr><operator pos:line="36" pos:column="25">(<pos:position pos:line="36" pos:column="26"/></operator><name pos:line="36" pos:column="26">long<pos:position pos:line="36" pos:column="30"/></name><operator pos:line="36" pos:column="30">)<pos:position pos:line="36" pos:column="31"/></operator><name><name pos:line="36" pos:column="31">s<pos:position pos:line="36" pos:column="32"/></name><operator pos:line="36" pos:column="32">-&gt;<pos:position pos:line="36" pos:column="37"/></operator><name pos:line="36" pos:column="34">blength<pos:position pos:line="36" pos:column="41"/></name></name></expr></argument>, <argument><expr><call><name pos:line="36" pos:column="43">big_num<pos:position pos:line="36" pos:column="50"/></name><argument_list pos:line="36" pos:column="50">(<argument><expr><name pos:line="36" pos:column="51">len<pos:position pos:line="36" pos:column="54"/></name></expr></argument>)<pos:position pos:line="36" pos:column="55"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="36" pos:column="57">big_num<pos:position pos:line="36" pos:column="64"/></name><argument_list pos:line="36" pos:column="64">(<argument><expr><name><name pos:line="36" pos:column="65">s<pos:position pos:line="36" pos:column="66"/></name><operator pos:line="36" pos:column="66">-&gt;<pos:position pos:line="36" pos:column="71"/></operator><name pos:line="36" pos:column="68">count<pos:position pos:line="36" pos:column="73"/></name></name></expr></argument>)<pos:position pos:line="36" pos:column="74"/></argument_list></call></expr></argument>)<pos:position pos:line="36" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="76"/></expr_stmt>
	}<pos:position pos:line="37" pos:column="10"/></block></then></if>

	<do pos:line="39" pos:column="9">do <block pos:line="39" pos:column="12">{
		<decl_stmt><decl><type><name pos:line="40" pos:column="17">int<pos:position pos:line="40" pos:column="20"/></name></type> <name pos:line="40" pos:column="21">done_csum2<pos:position pos:line="40" pos:column="31"/></name> <init pos:line="40" pos:column="32">= <expr><literal type="number" pos:line="40" pos:column="34">0<pos:position pos:line="40" pos:column="35"/></literal></expr></init></decl>;<pos:position pos:line="40" pos:column="36"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="41" pos:column="17">uint32<pos:position pos:line="41" pos:column="23"/></name></type> <name pos:line="41" pos:column="24">hash_entry<pos:position pos:line="41" pos:column="34"/></name></decl>;<pos:position pos:line="41" pos:column="35"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="42" pos:column="17">int32<pos:position pos:line="42" pos:column="22"/></name></type> <name pos:line="42" pos:column="23">i<pos:position pos:line="42" pos:column="24"/></name></decl>, <modifier pos:line="42" pos:column="26">*<pos:position pos:line="42" pos:column="27"/></modifier><decl><type ref="prev"/><name pos:line="42" pos:column="27">prev<pos:position pos:line="42" pos:column="31"/></name></decl>;<pos:position pos:line="42" pos:column="32"/></decl_stmt>

		<if pos:line="44" pos:column="17">if <condition pos:line="44" pos:column="20">(<expr><call><name pos:line="44" pos:column="21">DEBUG_GTE<pos:position pos:line="44" pos:column="30"/></name><argument_list pos:line="44" pos:column="30">(<argument><expr><name pos:line="44" pos:column="31">DELTASUM<pos:position pos:line="44" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="44" pos:column="41">4<pos:position pos:line="44" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="44" pos:column="44"/></condition><then pos:line="44" pos:column="44"> <block pos:line="44" pos:column="45">{
			<expr_stmt><expr><call><name pos:line="45" pos:column="25">rprintf<pos:position pos:line="45" pos:column="32"/></name><argument_list pos:line="45" pos:column="32">(<argument><expr><name pos:line="45" pos:column="33">FINFO<pos:position pos:line="45" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="45" pos:column="40">"offset=%s sum=%04x%04x\n"<pos:position pos:line="45" pos:column="66"/></literal></expr></argument>,
				<argument><expr><call><name pos:line="46" pos:column="33">big_num<pos:position pos:line="46" pos:column="40"/></name><argument_list pos:line="46" pos:column="40">(<argument><expr><name pos:line="46" pos:column="41">offset<pos:position pos:line="46" pos:column="47"/></name></expr></argument>)<pos:position pos:line="46" pos:column="48"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="46" pos:column="50">s2<pos:position pos:line="46" pos:column="52"/></name> <operator pos:line="46" pos:column="53">&amp;<pos:position pos:line="46" pos:column="58"/></operator> <literal type="number" pos:line="46" pos:column="55">0xFFFF<pos:position pos:line="46" pos:column="61"/></literal></expr></argument>, <argument><expr><name pos:line="46" pos:column="63">s1<pos:position pos:line="46" pos:column="65"/></name> <operator pos:line="46" pos:column="66">&amp;<pos:position pos:line="46" pos:column="71"/></operator> <literal type="number" pos:line="46" pos:column="68">0xFFFF<pos:position pos:line="46" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="76"/></expr_stmt>
		}<pos:position pos:line="47" pos:column="18"/></block></then></if>

		<if pos:line="49" pos:column="17">if <condition pos:line="49" pos:column="20">(<expr><name pos:line="49" pos:column="21">tablesize<pos:position pos:line="49" pos:column="30"/></name> <operator pos:line="49" pos:column="31">==<pos:position pos:line="49" pos:column="33"/></operator> <name pos:line="49" pos:column="34">TRADITIONAL_TABLESIZE<pos:position pos:line="49" pos:column="55"/></name></expr>)<pos:position pos:line="49" pos:column="56"/></condition><then pos:line="49" pos:column="56"> <block pos:line="49" pos:column="57">{
			<expr_stmt><expr><name pos:line="50" pos:column="25">hash_entry<pos:position pos:line="50" pos:column="35"/></name> <operator pos:line="50" pos:column="36">=<pos:position pos:line="50" pos:column="37"/></operator> <call><name pos:line="50" pos:column="38">SUM2HASH2<pos:position pos:line="50" pos:column="47"/></name><argument_list pos:line="50" pos:column="47">(<argument><expr><name pos:line="50" pos:column="48">s1<pos:position pos:line="50" pos:column="50"/></name></expr></argument>,<argument><expr><name pos:line="50" pos:column="51">s2<pos:position pos:line="50" pos:column="53"/></name></expr></argument>)<pos:position pos:line="50" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="55"/></expr_stmt>
			<if pos:line="51" pos:column="25">if <condition pos:line="51" pos:column="28">(<expr><operator pos:line="51" pos:column="29">(<pos:position pos:line="51" pos:column="30"/></operator><name pos:line="51" pos:column="30">i<pos:position pos:line="51" pos:column="31"/></name> <operator pos:line="51" pos:column="32">=<pos:position pos:line="51" pos:column="33"/></operator> <name><name pos:line="51" pos:column="34">hash_table<pos:position pos:line="51" pos:column="44"/></name><index pos:line="51" pos:column="44">[<expr><name pos:line="51" pos:column="45">hash_entry<pos:position pos:line="51" pos:column="55"/></name></expr>]<pos:position pos:line="51" pos:column="56"/></index></name><operator pos:line="51" pos:column="56">)<pos:position pos:line="51" pos:column="57"/></operator> <operator pos:line="51" pos:column="58">&lt;<pos:position pos:line="51" pos:column="62"/></operator> <literal type="number" pos:line="51" pos:column="60">0<pos:position pos:line="51" pos:column="61"/></literal></expr>)<pos:position pos:line="51" pos:column="62"/></condition><then pos:line="51" pos:column="62">
				<block type="pseudo"><goto pos:line="52" pos:column="33">goto <name pos:line="52" pos:column="38">null_hash<pos:position pos:line="52" pos:column="47"/></name>;<pos:position pos:line="52" pos:column="48"/></goto></block></then></if>
			<expr_stmt><expr><name pos:line="53" pos:column="25">sum<pos:position pos:line="53" pos:column="28"/></name> <operator pos:line="53" pos:column="29">=<pos:position pos:line="53" pos:column="30"/></operator> <operator pos:line="53" pos:column="31">(<pos:position pos:line="53" pos:column="32"/></operator><name pos:line="53" pos:column="32">s1<pos:position pos:line="53" pos:column="34"/></name> <operator pos:line="53" pos:column="35">&amp;<pos:position pos:line="53" pos:column="40"/></operator> <literal type="number" pos:line="53" pos:column="37">0xffff<pos:position pos:line="53" pos:column="43"/></literal><operator pos:line="53" pos:column="43">)<pos:position pos:line="53" pos:column="44"/></operator> <operator pos:line="53" pos:column="45">|<pos:position pos:line="53" pos:column="46"/></operator> <operator pos:line="53" pos:column="47">(<pos:position pos:line="53" pos:column="48"/></operator><name pos:line="53" pos:column="48">s2<pos:position pos:line="53" pos:column="50"/></name> <operator pos:line="53" pos:column="51">&lt;&lt;<pos:position pos:line="53" pos:column="59"/></operator> <literal type="number" pos:line="53" pos:column="54">16<pos:position pos:line="53" pos:column="56"/></literal><operator pos:line="53" pos:column="56">)<pos:position pos:line="53" pos:column="57"/></operator></expr>;<pos:position pos:line="53" pos:column="58"/></expr_stmt>
		}<pos:position pos:line="54" pos:column="18"/></block></then> <else pos:line="54" pos:column="19">else <block pos:line="54" pos:column="24">{
			<expr_stmt><expr><name pos:line="55" pos:column="25">sum<pos:position pos:line="55" pos:column="28"/></name> <operator pos:line="55" pos:column="29">=<pos:position pos:line="55" pos:column="30"/></operator> <operator pos:line="55" pos:column="31">(<pos:position pos:line="55" pos:column="32"/></operator><name pos:line="55" pos:column="32">s1<pos:position pos:line="55" pos:column="34"/></name> <operator pos:line="55" pos:column="35">&amp;<pos:position pos:line="55" pos:column="40"/></operator> <literal type="number" pos:line="55" pos:column="37">0xffff<pos:position pos:line="55" pos:column="43"/></literal><operator pos:line="55" pos:column="43">)<pos:position pos:line="55" pos:column="44"/></operator> <operator pos:line="55" pos:column="45">|<pos:position pos:line="55" pos:column="46"/></operator> <operator pos:line="55" pos:column="47">(<pos:position pos:line="55" pos:column="48"/></operator><name pos:line="55" pos:column="48">s2<pos:position pos:line="55" pos:column="50"/></name> <operator pos:line="55" pos:column="51">&lt;&lt;<pos:position pos:line="55" pos:column="59"/></operator> <literal type="number" pos:line="55" pos:column="54">16<pos:position pos:line="55" pos:column="56"/></literal><operator pos:line="55" pos:column="56">)<pos:position pos:line="55" pos:column="57"/></operator></expr>;<pos:position pos:line="55" pos:column="58"/></expr_stmt>
			<expr_stmt><expr><name pos:line="56" pos:column="25">hash_entry<pos:position pos:line="56" pos:column="35"/></name> <operator pos:line="56" pos:column="36">=<pos:position pos:line="56" pos:column="37"/></operator> <call><name pos:line="56" pos:column="38">BIG_SUM2HASH<pos:position pos:line="56" pos:column="50"/></name><argument_list pos:line="56" pos:column="50">(<argument><expr><name pos:line="56" pos:column="51">sum<pos:position pos:line="56" pos:column="54"/></name></expr></argument>)<pos:position pos:line="56" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="56"/></expr_stmt>
			<if pos:line="57" pos:column="25">if <condition pos:line="57" pos:column="28">(<expr><operator pos:line="57" pos:column="29">(<pos:position pos:line="57" pos:column="30"/></operator><name pos:line="57" pos:column="30">i<pos:position pos:line="57" pos:column="31"/></name> <operator pos:line="57" pos:column="32">=<pos:position pos:line="57" pos:column="33"/></operator> <name><name pos:line="57" pos:column="34">hash_table<pos:position pos:line="57" pos:column="44"/></name><index pos:line="57" pos:column="44">[<expr><name pos:line="57" pos:column="45">hash_entry<pos:position pos:line="57" pos:column="55"/></name></expr>]<pos:position pos:line="57" pos:column="56"/></index></name><operator pos:line="57" pos:column="56">)<pos:position pos:line="57" pos:column="57"/></operator> <operator pos:line="57" pos:column="58">&lt;<pos:position pos:line="57" pos:column="62"/></operator> <literal type="number" pos:line="57" pos:column="60">0<pos:position pos:line="57" pos:column="61"/></literal></expr>)<pos:position pos:line="57" pos:column="62"/></condition><then pos:line="57" pos:column="62">
				<block type="pseudo"><goto pos:line="58" pos:column="33">goto <name pos:line="58" pos:column="38">null_hash<pos:position pos:line="58" pos:column="47"/></name>;<pos:position pos:line="58" pos:column="48"/></goto></block></then></if>
		}<pos:position pos:line="59" pos:column="18"/></block></else></if>
		<expr_stmt><expr><name pos:line="60" pos:column="17">prev<pos:position pos:line="60" pos:column="21"/></name> <operator pos:line="60" pos:column="22">=<pos:position pos:line="60" pos:column="23"/></operator> <operator pos:line="60" pos:column="24">&amp;<pos:position pos:line="60" pos:column="29"/></operator><name><name pos:line="60" pos:column="25">hash_table<pos:position pos:line="60" pos:column="35"/></name><index pos:line="60" pos:column="35">[<expr><name pos:line="60" pos:column="36">hash_entry<pos:position pos:line="60" pos:column="46"/></name></expr>]<pos:position pos:line="60" pos:column="47"/></index></name></expr>;<pos:position pos:line="60" pos:column="48"/></expr_stmt>

		<expr_stmt><expr><name pos:line="62" pos:column="17">hash_hits<pos:position pos:line="62" pos:column="26"/></name><operator pos:line="62" pos:column="26">++<pos:position pos:line="62" pos:column="28"/></operator></expr>;<pos:position pos:line="62" pos:column="29"/></expr_stmt>
		<do pos:line="63" pos:column="17">do <block pos:line="63" pos:column="20">{
			<decl_stmt><decl><type><name pos:line="64" pos:column="25">int32<pos:position pos:line="64" pos:column="30"/></name></type> <name pos:line="64" pos:column="31">l<pos:position pos:line="64" pos:column="32"/></name></decl>;<pos:position pos:line="64" pos:column="33"/></decl_stmt>

			<comment type="block" pos:line="66" pos:column="25">/* When updating in-place, the chunk's offset must be
			 * either &gt;= our offset or identical data at that offset.
			 * Remove any bypassed entries that we can never use. */</comment>
			<if pos:line="69" pos:column="25">if <condition pos:line="69" pos:column="28">(<expr><name pos:line="69" pos:column="29">updating_basis_file<pos:position pos:line="69" pos:column="48"/></name> <operator pos:line="69" pos:column="49">&amp;&amp;<pos:position pos:line="69" pos:column="59"/></operator> <name><name pos:line="69" pos:column="52">s<pos:position pos:line="69" pos:column="53"/></name><operator pos:line="69" pos:column="53">-&gt;<pos:position pos:line="69" pos:column="58"/></operator><name pos:line="69" pos:column="55">sums<pos:position pos:line="69" pos:column="59"/></name><index pos:line="69" pos:column="59">[<expr><name pos:line="69" pos:column="60">i<pos:position pos:line="69" pos:column="61"/></name></expr>]<pos:position pos:line="69" pos:column="62"/></index></name><operator pos:line="69" pos:column="62">.<pos:position pos:line="69" pos:column="63"/></operator><name pos:line="69" pos:column="63">offset<pos:position pos:line="69" pos:column="69"/></name> <operator pos:line="69" pos:column="70">&lt;<pos:position pos:line="69" pos:column="74"/></operator> <name pos:line="69" pos:column="72">offset<pos:position pos:line="69" pos:column="78"/></name>
			    <operator pos:line="70" pos:column="29">&amp;&amp;<pos:position pos:line="70" pos:column="39"/></operator> <operator pos:line="70" pos:column="32">!<pos:position pos:line="70" pos:column="33"/></operator><operator pos:line="70" pos:column="33">(<pos:position pos:line="70" pos:column="34"/></operator><name><name pos:line="70" pos:column="34">s<pos:position pos:line="70" pos:column="35"/></name><operator pos:line="70" pos:column="35">-&gt;<pos:position pos:line="70" pos:column="40"/></operator><name pos:line="70" pos:column="37">sums<pos:position pos:line="70" pos:column="41"/></name><index pos:line="70" pos:column="41">[<expr><name pos:line="70" pos:column="42">i<pos:position pos:line="70" pos:column="43"/></name></expr>]<pos:position pos:line="70" pos:column="44"/></index></name><operator pos:line="70" pos:column="44">.<pos:position pos:line="70" pos:column="45"/></operator><name pos:line="70" pos:column="45">flags<pos:position pos:line="70" pos:column="50"/></name> <operator pos:line="70" pos:column="51">&amp;<pos:position pos:line="70" pos:column="56"/></operator> <name pos:line="70" pos:column="53">SUMFLG_SAME_OFFSET<pos:position pos:line="70" pos:column="71"/></name><operator pos:line="70" pos:column="71">)<pos:position pos:line="70" pos:column="72"/></operator></expr>)<pos:position pos:line="70" pos:column="73"/></condition><then pos:line="70" pos:column="73"> <block pos:line="70" pos:column="74">{
				<expr_stmt><expr><operator pos:line="71" pos:column="33">*<pos:position pos:line="71" pos:column="34"/></operator><name pos:line="71" pos:column="34">prev<pos:position pos:line="71" pos:column="38"/></name> <operator pos:line="71" pos:column="39">=<pos:position pos:line="71" pos:column="40"/></operator> <name><name pos:line="71" pos:column="41">s<pos:position pos:line="71" pos:column="42"/></name><operator pos:line="71" pos:column="42">-&gt;<pos:position pos:line="71" pos:column="47"/></operator><name pos:line="71" pos:column="44">sums<pos:position pos:line="71" pos:column="48"/></name><index pos:line="71" pos:column="48">[<expr><name pos:line="71" pos:column="49">i<pos:position pos:line="71" pos:column="50"/></name></expr>]<pos:position pos:line="71" pos:column="51"/></index></name><operator pos:line="71" pos:column="51">.<pos:position pos:line="71" pos:column="52"/></operator><name pos:line="71" pos:column="52">chain<pos:position pos:line="71" pos:column="57"/></name></expr>;<pos:position pos:line="71" pos:column="58"/></expr_stmt>
				<continue pos:line="72" pos:column="33">continue;<pos:position pos:line="72" pos:column="42"/></continue>
			}<pos:position pos:line="73" pos:column="26"/></block></then></if>
			<expr_stmt><expr><name pos:line="74" pos:column="25">prev<pos:position pos:line="74" pos:column="29"/></name> <operator pos:line="74" pos:column="30">=<pos:position pos:line="74" pos:column="31"/></operator> <operator pos:line="74" pos:column="32">&amp;<pos:position pos:line="74" pos:column="37"/></operator><name><name pos:line="74" pos:column="33">s<pos:position pos:line="74" pos:column="34"/></name><operator pos:line="74" pos:column="34">-&gt;<pos:position pos:line="74" pos:column="39"/></operator><name pos:line="74" pos:column="36">sums<pos:position pos:line="74" pos:column="40"/></name><index pos:line="74" pos:column="40">[<expr><name pos:line="74" pos:column="41">i<pos:position pos:line="74" pos:column="42"/></name></expr>]<pos:position pos:line="74" pos:column="43"/></index></name><operator pos:line="74" pos:column="43">.<pos:position pos:line="74" pos:column="44"/></operator><name pos:line="74" pos:column="44">chain<pos:position pos:line="74" pos:column="49"/></name></expr>;<pos:position pos:line="74" pos:column="50"/></expr_stmt>

			<if pos:line="76" pos:column="25">if <condition pos:line="76" pos:column="28">(<expr><name pos:line="76" pos:column="29">sum<pos:position pos:line="76" pos:column="32"/></name> <operator pos:line="76" pos:column="33">!=<pos:position pos:line="76" pos:column="35"/></operator> <name><name pos:line="76" pos:column="36">s<pos:position pos:line="76" pos:column="37"/></name><operator pos:line="76" pos:column="37">-&gt;<pos:position pos:line="76" pos:column="42"/></operator><name pos:line="76" pos:column="39">sums<pos:position pos:line="76" pos:column="43"/></name><index pos:line="76" pos:column="43">[<expr><name pos:line="76" pos:column="44">i<pos:position pos:line="76" pos:column="45"/></name></expr>]<pos:position pos:line="76" pos:column="46"/></index></name><operator pos:line="76" pos:column="46">.<pos:position pos:line="76" pos:column="47"/></operator><name pos:line="76" pos:column="47">sum1<pos:position pos:line="76" pos:column="51"/></name></expr>)<pos:position pos:line="76" pos:column="52"/></condition><then pos:line="76" pos:column="52">
				<block type="pseudo"><continue pos:line="77" pos:column="33">continue;<pos:position pos:line="77" pos:column="42"/></continue></block></then></if>

			<comment type="block" pos:line="79" pos:column="25">/* also make sure the two blocks are the same length */</comment>
			<expr_stmt><expr><name pos:line="80" pos:column="25">l<pos:position pos:line="80" pos:column="26"/></name> <operator pos:line="80" pos:column="27">=<pos:position pos:line="80" pos:column="28"/></operator> <operator pos:line="80" pos:column="29">(<pos:position pos:line="80" pos:column="30"/></operator><name pos:line="80" pos:column="30">int32<pos:position pos:line="80" pos:column="35"/></name><operator pos:line="80" pos:column="35">)<pos:position pos:line="80" pos:column="36"/></operator><call><name pos:line="80" pos:column="36">MIN<pos:position pos:line="80" pos:column="39"/></name><argument_list pos:line="80" pos:column="39">(<argument><expr><operator pos:line="80" pos:column="40">(<pos:position pos:line="80" pos:column="41"/></operator><name pos:line="80" pos:column="41">OFF_T<pos:position pos:line="80" pos:column="46"/></name><operator pos:line="80" pos:column="46">)<pos:position pos:line="80" pos:column="47"/></operator><name><name pos:line="80" pos:column="47">s<pos:position pos:line="80" pos:column="48"/></name><operator pos:line="80" pos:column="48">-&gt;<pos:position pos:line="80" pos:column="53"/></operator><name pos:line="80" pos:column="50">blength<pos:position pos:line="80" pos:column="57"/></name></name></expr></argument>, <argument><expr><name pos:line="80" pos:column="59">len<pos:position pos:line="80" pos:column="62"/></name><operator pos:line="80" pos:column="62">-<pos:position pos:line="80" pos:column="63"/></operator><name pos:line="80" pos:column="63">offset<pos:position pos:line="80" pos:column="69"/></name></expr></argument>)<pos:position pos:line="80" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="71"/></expr_stmt>
			<if pos:line="81" pos:column="25">if <condition pos:line="81" pos:column="28">(<expr><name pos:line="81" pos:column="29">l<pos:position pos:line="81" pos:column="30"/></name> <operator pos:line="81" pos:column="31">!=<pos:position pos:line="81" pos:column="33"/></operator> <name><name pos:line="81" pos:column="34">s<pos:position pos:line="81" pos:column="35"/></name><operator pos:line="81" pos:column="35">-&gt;<pos:position pos:line="81" pos:column="40"/></operator><name pos:line="81" pos:column="37">sums<pos:position pos:line="81" pos:column="41"/></name><index pos:line="81" pos:column="41">[<expr><name pos:line="81" pos:column="42">i<pos:position pos:line="81" pos:column="43"/></name></expr>]<pos:position pos:line="81" pos:column="44"/></index></name><operator pos:line="81" pos:column="44">.<pos:position pos:line="81" pos:column="45"/></operator><name pos:line="81" pos:column="45">len<pos:position pos:line="81" pos:column="48"/></name></expr>)<pos:position pos:line="81" pos:column="49"/></condition><then pos:line="81" pos:column="49">
				<block type="pseudo"><continue pos:line="82" pos:column="33">continue;<pos:position pos:line="82" pos:column="42"/></continue></block></then></if>

			<if pos:line="84" pos:column="25">if <condition pos:line="84" pos:column="28">(<expr><call><name pos:line="84" pos:column="29">DEBUG_GTE<pos:position pos:line="84" pos:column="38"/></name><argument_list pos:line="84" pos:column="38">(<argument><expr><name pos:line="84" pos:column="39">DELTASUM<pos:position pos:line="84" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="84" pos:column="49">3<pos:position pos:line="84" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="84" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="84" pos:column="52"/></condition><then pos:line="84" pos:column="52"> <block pos:line="84" pos:column="53">{
				<expr_stmt><expr><call><name pos:line="85" pos:column="33">rprintf<pos:position pos:line="85" pos:column="40"/></name><argument_list pos:line="85" pos:column="40">(<argument><expr><name pos:line="85" pos:column="41">FINFO<pos:position pos:line="85" pos:column="46"/></name></expr></argument>,
					<argument><expr><literal type="string" pos:line="86" pos:column="41">"potential match at %s i=%ld sum=%08x\n"<pos:position pos:line="86" pos:column="81"/></literal></expr></argument>,
					<argument><expr><call><name pos:line="87" pos:column="41">big_num<pos:position pos:line="87" pos:column="48"/></name><argument_list pos:line="87" pos:column="48">(<argument><expr><name pos:line="87" pos:column="49">offset<pos:position pos:line="87" pos:column="55"/></name></expr></argument>)<pos:position pos:line="87" pos:column="56"/></argument_list></call></expr></argument>, <argument><expr><operator pos:line="87" pos:column="58">(<pos:position pos:line="87" pos:column="59"/></operator><name pos:line="87" pos:column="59">long<pos:position pos:line="87" pos:column="63"/></name><operator pos:line="87" pos:column="63">)<pos:position pos:line="87" pos:column="64"/></operator><name pos:line="87" pos:column="64">i<pos:position pos:line="87" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="87" pos:column="67">sum<pos:position pos:line="87" pos:column="70"/></name></expr></argument>)<pos:position pos:line="87" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="72"/></expr_stmt>
			}<pos:position pos:line="88" pos:column="26"/></block></then></if>

			<if pos:line="90" pos:column="25">if <condition pos:line="90" pos:column="28">(<expr><operator pos:line="90" pos:column="29">!<pos:position pos:line="90" pos:column="30"/></operator><name pos:line="90" pos:column="30">done_csum2<pos:position pos:line="90" pos:column="40"/></name></expr>)<pos:position pos:line="90" pos:column="41"/></condition><then pos:line="90" pos:column="41"> <block pos:line="90" pos:column="42">{
				<expr_stmt><expr><name pos:line="91" pos:column="33">map<pos:position pos:line="91" pos:column="36"/></name> <operator pos:line="91" pos:column="37">=<pos:position pos:line="91" pos:column="38"/></operator> <operator pos:line="91" pos:column="39">(<pos:position pos:line="91" pos:column="40"/></operator><name pos:line="91" pos:column="40">schar<pos:position pos:line="91" pos:column="45"/></name> <operator pos:line="91" pos:column="46">*<pos:position pos:line="91" pos:column="47"/></operator><operator pos:line="91" pos:column="47">)<pos:position pos:line="91" pos:column="48"/></operator><call><name pos:line="91" pos:column="48">map_ptr<pos:position pos:line="91" pos:column="55"/></name><argument_list pos:line="91" pos:column="55">(<argument><expr><name pos:line="91" pos:column="56">buf<pos:position pos:line="91" pos:column="59"/></name></expr></argument>,<argument><expr><name pos:line="91" pos:column="60">offset<pos:position pos:line="91" pos:column="66"/></name></expr></argument>,<argument><expr><name pos:line="91" pos:column="67">l<pos:position pos:line="91" pos:column="68"/></name></expr></argument>)<pos:position pos:line="91" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="70"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="92" pos:column="33">get_checksum2<pos:position pos:line="92" pos:column="46"/></name><argument_list pos:line="92" pos:column="46">(<argument><expr><operator pos:line="92" pos:column="47">(<pos:position pos:line="92" pos:column="48"/></operator><name pos:line="92" pos:column="48">char<pos:position pos:line="92" pos:column="52"/></name> <operator pos:line="92" pos:column="53">*<pos:position pos:line="92" pos:column="54"/></operator><operator pos:line="92" pos:column="54">)<pos:position pos:line="92" pos:column="55"/></operator><name pos:line="92" pos:column="55">map<pos:position pos:line="92" pos:column="58"/></name></expr></argument>,<argument><expr><name pos:line="92" pos:column="59">l<pos:position pos:line="92" pos:column="60"/></name></expr></argument>,<argument><expr><name pos:line="92" pos:column="61">sum2<pos:position pos:line="92" pos:column="65"/></name></expr></argument>)<pos:position pos:line="92" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="67"/></expr_stmt>
				<expr_stmt><expr><name pos:line="93" pos:column="33">done_csum2<pos:position pos:line="93" pos:column="43"/></name> <operator pos:line="93" pos:column="44">=<pos:position pos:line="93" pos:column="45"/></operator> <literal type="number" pos:line="93" pos:column="46">1<pos:position pos:line="93" pos:column="47"/></literal></expr>;<pos:position pos:line="93" pos:column="48"/></expr_stmt>
			}<pos:position pos:line="94" pos:column="26"/></block></then></if>

			<if pos:line="96" pos:column="25">if <condition pos:line="96" pos:column="28">(<expr><call><name pos:line="96" pos:column="29">memcmp<pos:position pos:line="96" pos:column="35"/></name><argument_list pos:line="96" pos:column="35">(<argument><expr><name pos:line="96" pos:column="36">sum2<pos:position pos:line="96" pos:column="40"/></name></expr></argument>,<argument><expr><name><name pos:line="96" pos:column="41">s<pos:position pos:line="96" pos:column="42"/></name><operator pos:line="96" pos:column="42">-&gt;<pos:position pos:line="96" pos:column="47"/></operator><name pos:line="96" pos:column="44">sums<pos:position pos:line="96" pos:column="48"/></name><index pos:line="96" pos:column="48">[<expr><name pos:line="96" pos:column="49">i<pos:position pos:line="96" pos:column="50"/></name></expr>]<pos:position pos:line="96" pos:column="51"/></index></name><operator pos:line="96" pos:column="51">.<pos:position pos:line="96" pos:column="52"/></operator><name pos:line="96" pos:column="52">sum2<pos:position pos:line="96" pos:column="56"/></name></expr></argument>,<argument><expr><name><name pos:line="96" pos:column="57">s<pos:position pos:line="96" pos:column="58"/></name><operator pos:line="96" pos:column="58">-&gt;<pos:position pos:line="96" pos:column="63"/></operator><name pos:line="96" pos:column="60">s2length<pos:position pos:line="96" pos:column="68"/></name></name></expr></argument>)<pos:position pos:line="96" pos:column="69"/></argument_list></call> <operator pos:line="96" pos:column="70">!=<pos:position pos:line="96" pos:column="72"/></operator> <literal type="number" pos:line="96" pos:column="73">0<pos:position pos:line="96" pos:column="74"/></literal></expr>)<pos:position pos:line="96" pos:column="75"/></condition><then pos:line="96" pos:column="75"> <block pos:line="96" pos:column="76">{
				<expr_stmt><expr><name pos:line="97" pos:column="33">false_alarms<pos:position pos:line="97" pos:column="45"/></name><operator pos:line="97" pos:column="45">++<pos:position pos:line="97" pos:column="47"/></operator></expr>;<pos:position pos:line="97" pos:column="48"/></expr_stmt>
				<continue pos:line="98" pos:column="33">continue;<pos:position pos:line="98" pos:column="42"/></continue>
			}<pos:position pos:line="99" pos:column="26"/></block></then></if>

			<comment type="block" pos:line="101" pos:column="25">/* When updating in-place, the best possible match is
			 * one with an identical offset, so we prefer that over
			 * the adjacent want_i optimization. */</comment>
			<if pos:line="104" pos:column="25">if <condition pos:line="104" pos:column="28">(<expr><name pos:line="104" pos:column="29">updating_basis_file<pos:position pos:line="104" pos:column="48"/></name></expr>)<pos:position pos:line="104" pos:column="49"/></condition><then pos:line="104" pos:column="49"> <block pos:line="104" pos:column="50">{
				<comment type="block" pos:line="105" pos:column="33">/* All the generator's chunks start at blength boundaries. */</comment>
				<while pos:line="106" pos:column="33">while <condition pos:line="106" pos:column="39">(<expr><name pos:line="106" pos:column="40">aligned_offset<pos:position pos:line="106" pos:column="54"/></name> <operator pos:line="106" pos:column="55">&lt;<pos:position pos:line="106" pos:column="59"/></operator> <name pos:line="106" pos:column="57">offset<pos:position pos:line="106" pos:column="63"/></name></expr>)<pos:position pos:line="106" pos:column="64"/></condition> <block pos:line="106" pos:column="65">{
					<expr_stmt><expr><name pos:line="107" pos:column="41">aligned_offset<pos:position pos:line="107" pos:column="55"/></name> <operator pos:line="107" pos:column="56">+=<pos:position pos:line="107" pos:column="58"/></operator> <name><name pos:line="107" pos:column="59">s<pos:position pos:line="107" pos:column="60"/></name><operator pos:line="107" pos:column="60">-&gt;<pos:position pos:line="107" pos:column="65"/></operator><name pos:line="107" pos:column="62">blength<pos:position pos:line="107" pos:column="69"/></name></name></expr>;<pos:position pos:line="107" pos:column="70"/></expr_stmt>
					<expr_stmt><expr><name pos:line="108" pos:column="41">aligned_i<pos:position pos:line="108" pos:column="50"/></name><operator pos:line="108" pos:column="50">++<pos:position pos:line="108" pos:column="52"/></operator></expr>;<pos:position pos:line="108" pos:column="53"/></expr_stmt>
				}<pos:position pos:line="109" pos:column="34"/></block></while>
				<if pos:line="110" pos:column="33">if <condition pos:line="110" pos:column="36">(<expr><operator pos:line="110" pos:column="37">(<pos:position pos:line="110" pos:column="38"/></operator><name pos:line="110" pos:column="38">offset<pos:position pos:line="110" pos:column="44"/></name> <operator pos:line="110" pos:column="45">==<pos:position pos:line="110" pos:column="47"/></operator> <name pos:line="110" pos:column="48">aligned_offset<pos:position pos:line="110" pos:column="62"/></name>
				  <operator pos:line="111" pos:column="35">||<pos:position pos:line="111" pos:column="37"/></operator> <operator pos:line="111" pos:column="38">(<pos:position pos:line="111" pos:column="39"/></operator><name pos:line="111" pos:column="39">sum<pos:position pos:line="111" pos:column="42"/></name> <operator pos:line="111" pos:column="43">==<pos:position pos:line="111" pos:column="45"/></operator> <literal type="number" pos:line="111" pos:column="46">0<pos:position pos:line="111" pos:column="47"/></literal> <operator pos:line="111" pos:column="48">&amp;&amp;<pos:position pos:line="111" pos:column="58"/></operator> <name pos:line="111" pos:column="51">l<pos:position pos:line="111" pos:column="52"/></name> <operator pos:line="111" pos:column="53">==<pos:position pos:line="111" pos:column="55"/></operator> <name><name pos:line="111" pos:column="56">s<pos:position pos:line="111" pos:column="57"/></name><operator pos:line="111" pos:column="57">-&gt;<pos:position pos:line="111" pos:column="62"/></operator><name pos:line="111" pos:column="59">blength<pos:position pos:line="111" pos:column="66"/></name></name> <operator pos:line="111" pos:column="67">&amp;&amp;<pos:position pos:line="111" pos:column="77"/></operator> <name pos:line="111" pos:column="70">aligned_offset<pos:position pos:line="111" pos:column="84"/></name> <operator pos:line="111" pos:column="85">+<pos:position pos:line="111" pos:column="86"/></operator> <name pos:line="111" pos:column="87">l<pos:position pos:line="111" pos:column="88"/></name> <operator pos:line="111" pos:column="89">&lt;=<pos:position pos:line="111" pos:column="94"/></operator> <name pos:line="111" pos:column="92">len<pos:position pos:line="111" pos:column="95"/></name><operator pos:line="111" pos:column="95">)<pos:position pos:line="111" pos:column="96"/></operator><operator pos:line="111" pos:column="96">)<pos:position pos:line="111" pos:column="97"/></operator>
				 <operator pos:line="112" pos:column="34">&amp;&amp;<pos:position pos:line="112" pos:column="44"/></operator> <name pos:line="112" pos:column="37">aligned_i<pos:position pos:line="112" pos:column="46"/></name> <operator pos:line="112" pos:column="47">&lt;<pos:position pos:line="112" pos:column="51"/></operator> <name><name pos:line="112" pos:column="49">s<pos:position pos:line="112" pos:column="50"/></name><operator pos:line="112" pos:column="50">-&gt;<pos:position pos:line="112" pos:column="55"/></operator><name pos:line="112" pos:column="52">count<pos:position pos:line="112" pos:column="57"/></name></name></expr>)<pos:position pos:line="112" pos:column="58"/></condition><then pos:line="112" pos:column="58"> <block pos:line="112" pos:column="59">{
					<if pos:line="113" pos:column="41">if <condition pos:line="113" pos:column="44">(<expr><name pos:line="113" pos:column="45">i<pos:position pos:line="113" pos:column="46"/></name> <operator pos:line="113" pos:column="47">!=<pos:position pos:line="113" pos:column="49"/></operator> <name pos:line="113" pos:column="50">aligned_i<pos:position pos:line="113" pos:column="59"/></name></expr>)<pos:position pos:line="113" pos:column="60"/></condition><then pos:line="113" pos:column="60"> <block pos:line="113" pos:column="61">{
						<if pos:line="114" pos:column="49">if <condition pos:line="114" pos:column="52">(<expr><name pos:line="114" pos:column="53">sum<pos:position pos:line="114" pos:column="56"/></name> <operator pos:line="114" pos:column="57">!=<pos:position pos:line="114" pos:column="59"/></operator> <name><name pos:line="114" pos:column="60">s<pos:position pos:line="114" pos:column="61"/></name><operator pos:line="114" pos:column="61">-&gt;<pos:position pos:line="114" pos:column="66"/></operator><name pos:line="114" pos:column="63">sums<pos:position pos:line="114" pos:column="67"/></name><index pos:line="114" pos:column="67">[<expr><name pos:line="114" pos:column="68">aligned_i<pos:position pos:line="114" pos:column="77"/></name></expr>]<pos:position pos:line="114" pos:column="78"/></index></name><operator pos:line="114" pos:column="78">.<pos:position pos:line="114" pos:column="79"/></operator><name pos:line="114" pos:column="79">sum1<pos:position pos:line="114" pos:column="83"/></name>
						 <operator pos:line="115" pos:column="50">||<pos:position pos:line="115" pos:column="52"/></operator> <name pos:line="115" pos:column="53">l<pos:position pos:line="115" pos:column="54"/></name> <operator pos:line="115" pos:column="55">!=<pos:position pos:line="115" pos:column="57"/></operator> <name><name pos:line="115" pos:column="58">s<pos:position pos:line="115" pos:column="59"/></name><operator pos:line="115" pos:column="59">-&gt;<pos:position pos:line="115" pos:column="64"/></operator><name pos:line="115" pos:column="61">sums<pos:position pos:line="115" pos:column="65"/></name><index pos:line="115" pos:column="65">[<expr><name pos:line="115" pos:column="66">aligned_i<pos:position pos:line="115" pos:column="75"/></name></expr>]<pos:position pos:line="115" pos:column="76"/></index></name><operator pos:line="115" pos:column="76">.<pos:position pos:line="115" pos:column="77"/></operator><name pos:line="115" pos:column="77">len<pos:position pos:line="115" pos:column="80"/></name>
						 <operator pos:line="116" pos:column="50">||<pos:position pos:line="116" pos:column="52"/></operator> <call><name pos:line="116" pos:column="53">memcmp<pos:position pos:line="116" pos:column="59"/></name><argument_list pos:line="116" pos:column="59">(<argument><expr><name pos:line="116" pos:column="60">sum2<pos:position pos:line="116" pos:column="64"/></name></expr></argument>, <argument><expr><name><name pos:line="116" pos:column="66">s<pos:position pos:line="116" pos:column="67"/></name><operator pos:line="116" pos:column="67">-&gt;<pos:position pos:line="116" pos:column="72"/></operator><name pos:line="116" pos:column="69">sums<pos:position pos:line="116" pos:column="73"/></name><index pos:line="116" pos:column="73">[<expr><name pos:line="116" pos:column="74">aligned_i<pos:position pos:line="116" pos:column="83"/></name></expr>]<pos:position pos:line="116" pos:column="84"/></index></name><operator pos:line="116" pos:column="84">.<pos:position pos:line="116" pos:column="85"/></operator><name pos:line="116" pos:column="85">sum2<pos:position pos:line="116" pos:column="89"/></name></expr></argument>, <argument><expr><name><name pos:line="116" pos:column="91">s<pos:position pos:line="116" pos:column="92"/></name><operator pos:line="116" pos:column="92">-&gt;<pos:position pos:line="116" pos:column="97"/></operator><name pos:line="116" pos:column="94">s2length<pos:position pos:line="116" pos:column="102"/></name></name></expr></argument>)<pos:position pos:line="116" pos:column="103"/></argument_list></call> <operator pos:line="116" pos:column="104">!=<pos:position pos:line="116" pos:column="106"/></operator> <literal type="number" pos:line="116" pos:column="107">0<pos:position pos:line="116" pos:column="108"/></literal></expr>)<pos:position pos:line="116" pos:column="109"/></condition><then pos:line="116" pos:column="109">
							<block type="pseudo"><goto pos:line="117" pos:column="57">goto <name pos:line="117" pos:column="62">check_want_i<pos:position pos:line="117" pos:column="74"/></name>;<pos:position pos:line="117" pos:column="75"/></goto></block></then></if>
						<expr_stmt><expr><name pos:line="118" pos:column="49">i<pos:position pos:line="118" pos:column="50"/></name> <operator pos:line="118" pos:column="51">=<pos:position pos:line="118" pos:column="52"/></operator> <name pos:line="118" pos:column="53">aligned_i<pos:position pos:line="118" pos:column="62"/></name></expr>;<pos:position pos:line="118" pos:column="63"/></expr_stmt>
					}<pos:position pos:line="119" pos:column="42"/></block></then></if>
					<if pos:line="120" pos:column="41">if <condition pos:line="120" pos:column="44">(<expr><name pos:line="120" pos:column="45">offset<pos:position pos:line="120" pos:column="51"/></name> <operator pos:line="120" pos:column="52">!=<pos:position pos:line="120" pos:column="54"/></operator> <name pos:line="120" pos:column="55">aligned_offset<pos:position pos:line="120" pos:column="69"/></name></expr>)<pos:position pos:line="120" pos:column="70"/></condition><then pos:line="120" pos:column="70"> <block pos:line="120" pos:column="71">{
						<comment type="block" pos:line="121" pos:column="49">/* We've matched some zeros in a spot that is also zeros
						 * further along in the basis file, if we find zeros ahead
						 * in the sender's file, we'll output enough literal data
						 * to re-align with the basis file, and get back to seeking
						 * instead of writing. */</comment>
						<expr_stmt><expr><name pos:line="126" pos:column="49">backup<pos:position pos:line="126" pos:column="55"/></name> <operator pos:line="126" pos:column="56">=<pos:position pos:line="126" pos:column="57"/></operator> <call pos:line="126" pos:column="58">(<name pos:line="126" pos:column="59">int32<pos:position pos:line="126" pos:column="64"/></name>)<argument_list pos:line="126" pos:column="65">(<argument><expr><name pos:line="126" pos:column="66">aligned_offset<pos:position pos:line="126" pos:column="80"/></name> <operator pos:line="126" pos:column="81">-<pos:position pos:line="126" pos:column="82"/></operator> <name pos:line="126" pos:column="83">last_match<pos:position pos:line="126" pos:column="93"/></name></expr></argument>)<pos:position pos:line="126" pos:column="94"/></argument_list></call></expr>;<pos:position pos:line="126" pos:column="95"/></expr_stmt>
						<if pos:line="127" pos:column="49">if <condition pos:line="127" pos:column="52">(<expr><name pos:line="127" pos:column="53">backup<pos:position pos:line="127" pos:column="59"/></name> <operator pos:line="127" pos:column="60">&lt;<pos:position pos:line="127" pos:column="64"/></operator> <literal type="number" pos:line="127" pos:column="62">0<pos:position pos:line="127" pos:column="63"/></literal></expr>)<pos:position pos:line="127" pos:column="64"/></condition><then pos:line="127" pos:column="64">
							<block type="pseudo"><expr_stmt><expr><name pos:line="128" pos:column="57">backup<pos:position pos:line="128" pos:column="63"/></name> <operator pos:line="128" pos:column="64">=<pos:position pos:line="128" pos:column="65"/></operator> <literal type="number" pos:line="128" pos:column="66">0<pos:position pos:line="128" pos:column="67"/></literal></expr>;<pos:position pos:line="128" pos:column="68"/></expr_stmt></block></then></if>
						<expr_stmt><expr><name pos:line="129" pos:column="49">map<pos:position pos:line="129" pos:column="52"/></name> <operator pos:line="129" pos:column="53">=<pos:position pos:line="129" pos:column="54"/></operator> <operator pos:line="129" pos:column="55">(<pos:position pos:line="129" pos:column="56"/></operator><name pos:line="129" pos:column="56">schar<pos:position pos:line="129" pos:column="61"/></name> <operator pos:line="129" pos:column="62">*<pos:position pos:line="129" pos:column="63"/></operator><operator pos:line="129" pos:column="63">)<pos:position pos:line="129" pos:column="64"/></operator><call><name pos:line="129" pos:column="64">map_ptr<pos:position pos:line="129" pos:column="71"/></name><argument_list pos:line="129" pos:column="71">(<argument><expr><name pos:line="129" pos:column="72">buf<pos:position pos:line="129" pos:column="75"/></name></expr></argument>, <argument><expr><name pos:line="129" pos:column="77">aligned_offset<pos:position pos:line="129" pos:column="91"/></name> <operator pos:line="129" pos:column="92">-<pos:position pos:line="129" pos:column="93"/></operator> <name pos:line="129" pos:column="94">backup<pos:position pos:line="129" pos:column="100"/></name></expr></argument>, <argument><expr><name pos:line="129" pos:column="102">l<pos:position pos:line="129" pos:column="103"/></name> <operator pos:line="129" pos:column="104">+<pos:position pos:line="129" pos:column="105"/></operator> <name pos:line="129" pos:column="106">backup<pos:position pos:line="129" pos:column="112"/></name></expr></argument>)<pos:position pos:line="129" pos:column="113"/></argument_list></call>
						    <operator pos:line="130" pos:column="53">+<pos:position pos:line="130" pos:column="54"/></operator> <name pos:line="130" pos:column="55">backup<pos:position pos:line="130" pos:column="61"/></name></expr>;<pos:position pos:line="130" pos:column="62"/></expr_stmt>
						<expr_stmt><expr><name pos:line="131" pos:column="49">sum<pos:position pos:line="131" pos:column="52"/></name> <operator pos:line="131" pos:column="53">=<pos:position pos:line="131" pos:column="54"/></operator> <call><name pos:line="131" pos:column="55">get_checksum1<pos:position pos:line="131" pos:column="68"/></name><argument_list pos:line="131" pos:column="68">(<argument><expr><operator pos:line="131" pos:column="69">(<pos:position pos:line="131" pos:column="70"/></operator><name pos:line="131" pos:column="70">char<pos:position pos:line="131" pos:column="74"/></name> <operator pos:line="131" pos:column="75">*<pos:position pos:line="131" pos:column="76"/></operator><operator pos:line="131" pos:column="76">)<pos:position pos:line="131" pos:column="77"/></operator><name pos:line="131" pos:column="77">map<pos:position pos:line="131" pos:column="80"/></name></expr></argument>, <argument><expr><name pos:line="131" pos:column="82">l<pos:position pos:line="131" pos:column="83"/></name></expr></argument>)<pos:position pos:line="131" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="131" pos:column="85"/></expr_stmt>
						<if pos:line="132" pos:column="49">if <condition pos:line="132" pos:column="52">(<expr><name pos:line="132" pos:column="53">sum<pos:position pos:line="132" pos:column="56"/></name> <operator pos:line="132" pos:column="57">!=<pos:position pos:line="132" pos:column="59"/></operator> <name><name pos:line="132" pos:column="60">s<pos:position pos:line="132" pos:column="61"/></name><operator pos:line="132" pos:column="61">-&gt;<pos:position pos:line="132" pos:column="66"/></operator><name pos:line="132" pos:column="63">sums<pos:position pos:line="132" pos:column="67"/></name><index pos:line="132" pos:column="67">[<expr><name pos:line="132" pos:column="68">i<pos:position pos:line="132" pos:column="69"/></name></expr>]<pos:position pos:line="132" pos:column="70"/></index></name><operator pos:line="132" pos:column="70">.<pos:position pos:line="132" pos:column="71"/></operator><name pos:line="132" pos:column="71">sum1<pos:position pos:line="132" pos:column="75"/></name></expr>)<pos:position pos:line="132" pos:column="76"/></condition><then pos:line="132" pos:column="76">
							<block type="pseudo"><goto pos:line="133" pos:column="57">goto <name pos:line="133" pos:column="62">check_want_i<pos:position pos:line="133" pos:column="74"/></name>;<pos:position pos:line="133" pos:column="75"/></goto></block></then></if>
						<expr_stmt><expr><call><name pos:line="134" pos:column="49">get_checksum2<pos:position pos:line="134" pos:column="62"/></name><argument_list pos:line="134" pos:column="62">(<argument><expr><operator pos:line="134" pos:column="63">(<pos:position pos:line="134" pos:column="64"/></operator><name pos:line="134" pos:column="64">char<pos:position pos:line="134" pos:column="68"/></name> <operator pos:line="134" pos:column="69">*<pos:position pos:line="134" pos:column="70"/></operator><operator pos:line="134" pos:column="70">)<pos:position pos:line="134" pos:column="71"/></operator><name pos:line="134" pos:column="71">map<pos:position pos:line="134" pos:column="74"/></name></expr></argument>, <argument><expr><name pos:line="134" pos:column="76">l<pos:position pos:line="134" pos:column="77"/></name></expr></argument>, <argument><expr><name pos:line="134" pos:column="79">sum2<pos:position pos:line="134" pos:column="83"/></name></expr></argument>)<pos:position pos:line="134" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="134" pos:column="85"/></expr_stmt>
						<if pos:line="135" pos:column="49">if <condition pos:line="135" pos:column="52">(<expr><call><name pos:line="135" pos:column="53">memcmp<pos:position pos:line="135" pos:column="59"/></name><argument_list pos:line="135" pos:column="59">(<argument><expr><name pos:line="135" pos:column="60">sum2<pos:position pos:line="135" pos:column="64"/></name></expr></argument>, <argument><expr><name><name pos:line="135" pos:column="66">s<pos:position pos:line="135" pos:column="67"/></name><operator pos:line="135" pos:column="67">-&gt;<pos:position pos:line="135" pos:column="72"/></operator><name pos:line="135" pos:column="69">sums<pos:position pos:line="135" pos:column="73"/></name><index pos:line="135" pos:column="73">[<expr><name pos:line="135" pos:column="74">i<pos:position pos:line="135" pos:column="75"/></name></expr>]<pos:position pos:line="135" pos:column="76"/></index></name><operator pos:line="135" pos:column="76">.<pos:position pos:line="135" pos:column="77"/></operator><name pos:line="135" pos:column="77">sum2<pos:position pos:line="135" pos:column="81"/></name></expr></argument>, <argument><expr><name><name pos:line="135" pos:column="83">s<pos:position pos:line="135" pos:column="84"/></name><operator pos:line="135" pos:column="84">-&gt;<pos:position pos:line="135" pos:column="89"/></operator><name pos:line="135" pos:column="86">s2length<pos:position pos:line="135" pos:column="94"/></name></name></expr></argument>)<pos:position pos:line="135" pos:column="95"/></argument_list></call> <operator pos:line="135" pos:column="96">!=<pos:position pos:line="135" pos:column="98"/></operator> <literal type="number" pos:line="135" pos:column="99">0<pos:position pos:line="135" pos:column="100"/></literal></expr>)<pos:position pos:line="135" pos:column="101"/></condition><then pos:line="135" pos:column="101">
							<block type="pseudo"><goto pos:line="136" pos:column="57">goto <name pos:line="136" pos:column="62">check_want_i<pos:position pos:line="136" pos:column="74"/></name>;<pos:position pos:line="136" pos:column="75"/></goto></block></then></if>
						<comment type="block" pos:line="137" pos:column="49">/* OK, we have a re-alignment match.  Bump the offset
						 * forward to the new match point. */</comment>
						<expr_stmt><expr><name pos:line="139" pos:column="49">offset<pos:position pos:line="139" pos:column="55"/></name> <operator pos:line="139" pos:column="56">=<pos:position pos:line="139" pos:column="57"/></operator> <name pos:line="139" pos:column="58">aligned_offset<pos:position pos:line="139" pos:column="72"/></name></expr>;<pos:position pos:line="139" pos:column="73"/></expr_stmt>
					}<pos:position pos:line="140" pos:column="42"/></block></then></if>
					<comment type="block" pos:line="141" pos:column="41">/* This identical chunk is in the same spot in the old and new file. */</comment>
					<expr_stmt><expr><name><name pos:line="142" pos:column="41">s<pos:position pos:line="142" pos:column="42"/></name><operator pos:line="142" pos:column="42">-&gt;<pos:position pos:line="142" pos:column="47"/></operator><name pos:line="142" pos:column="44">sums<pos:position pos:line="142" pos:column="48"/></name><index pos:line="142" pos:column="48">[<expr><name pos:line="142" pos:column="49">i<pos:position pos:line="142" pos:column="50"/></name></expr>]<pos:position pos:line="142" pos:column="51"/></index></name><operator pos:line="142" pos:column="51">.<pos:position pos:line="142" pos:column="52"/></operator><name pos:line="142" pos:column="52">flags<pos:position pos:line="142" pos:column="57"/></name> <operator pos:line="142" pos:column="58">|=<pos:position pos:line="142" pos:column="60"/></operator> <name pos:line="142" pos:column="61">SUMFLG_SAME_OFFSET<pos:position pos:line="142" pos:column="79"/></name></expr>;<pos:position pos:line="142" pos:column="80"/></expr_stmt>
					<expr_stmt><expr><name pos:line="143" pos:column="41">want_i<pos:position pos:line="143" pos:column="47"/></name> <operator pos:line="143" pos:column="48">=<pos:position pos:line="143" pos:column="49"/></operator> <name pos:line="143" pos:column="50">i<pos:position pos:line="143" pos:column="51"/></name></expr>;<pos:position pos:line="143" pos:column="52"/></expr_stmt>
				}<pos:position pos:line="144" pos:column="34"/></block></then></if>
			}<pos:position pos:line="145" pos:column="26"/></block></then></if>

		  <label><name pos:line="147" pos:column="19">check_want_i<pos:position pos:line="147" pos:column="31"/></name>:<pos:position pos:line="147" pos:column="32"/></label>
			<comment type="block" pos:line="148" pos:column="25">/* we've found a match, but now check to see
			 * if want_i can hint at a better match. */</comment>
			<if pos:line="150" pos:column="25">if <condition pos:line="150" pos:column="28">(<expr><name pos:line="150" pos:column="29">i<pos:position pos:line="150" pos:column="30"/></name> <operator pos:line="150" pos:column="31">!=<pos:position pos:line="150" pos:column="33"/></operator> <name pos:line="150" pos:column="34">want_i<pos:position pos:line="150" pos:column="40"/></name> <operator pos:line="150" pos:column="41">&amp;&amp;<pos:position pos:line="150" pos:column="51"/></operator> <name pos:line="150" pos:column="44">want_i<pos:position pos:line="150" pos:column="50"/></name> <operator pos:line="150" pos:column="51">&lt;<pos:position pos:line="150" pos:column="55"/></operator> <name><name pos:line="150" pos:column="53">s<pos:position pos:line="150" pos:column="54"/></name><operator pos:line="150" pos:column="54">-&gt;<pos:position pos:line="150" pos:column="59"/></operator><name pos:line="150" pos:column="56">count<pos:position pos:line="150" pos:column="61"/></name></name>
			    <operator pos:line="151" pos:column="29">&amp;&amp;<pos:position pos:line="151" pos:column="39"/></operator> <operator pos:line="151" pos:column="32">(<pos:position pos:line="151" pos:column="33"/></operator><operator pos:line="151" pos:column="33">!<pos:position pos:line="151" pos:column="34"/></operator><name pos:line="151" pos:column="34">updating_basis_file<pos:position pos:line="151" pos:column="53"/></name> <operator pos:line="151" pos:column="54">||<pos:position pos:line="151" pos:column="56"/></operator> <name><name pos:line="151" pos:column="57">s<pos:position pos:line="151" pos:column="58"/></name><operator pos:line="151" pos:column="58">-&gt;<pos:position pos:line="151" pos:column="63"/></operator><name pos:line="151" pos:column="60">sums<pos:position pos:line="151" pos:column="64"/></name><index pos:line="151" pos:column="64">[<expr><name pos:line="151" pos:column="65">want_i<pos:position pos:line="151" pos:column="71"/></name></expr>]<pos:position pos:line="151" pos:column="72"/></index></name><operator pos:line="151" pos:column="72">.<pos:position pos:line="151" pos:column="73"/></operator><name pos:line="151" pos:column="73">offset<pos:position pos:line="151" pos:column="79"/></name> <operator pos:line="151" pos:column="80">&gt;=<pos:position pos:line="151" pos:column="85"/></operator> <name pos:line="151" pos:column="83">offset<pos:position pos:line="151" pos:column="89"/></name>
			     <operator pos:line="152" pos:column="30">||<pos:position pos:line="152" pos:column="32"/></operator> <name><name pos:line="152" pos:column="33">s<pos:position pos:line="152" pos:column="34"/></name><operator pos:line="152" pos:column="34">-&gt;<pos:position pos:line="152" pos:column="39"/></operator><name pos:line="152" pos:column="36">sums<pos:position pos:line="152" pos:column="40"/></name><index pos:line="152" pos:column="40">[<expr><name pos:line="152" pos:column="41">want_i<pos:position pos:line="152" pos:column="47"/></name></expr>]<pos:position pos:line="152" pos:column="48"/></index></name><operator pos:line="152" pos:column="48">.<pos:position pos:line="152" pos:column="49"/></operator><name pos:line="152" pos:column="49">flags<pos:position pos:line="152" pos:column="54"/></name> <operator pos:line="152" pos:column="55">&amp;<pos:position pos:line="152" pos:column="60"/></operator> <name pos:line="152" pos:column="57">SUMFLG_SAME_OFFSET<pos:position pos:line="152" pos:column="75"/></name><operator pos:line="152" pos:column="75">)<pos:position pos:line="152" pos:column="76"/></operator>
			    <operator pos:line="153" pos:column="29">&amp;&amp;<pos:position pos:line="153" pos:column="39"/></operator> <name pos:line="153" pos:column="32">sum<pos:position pos:line="153" pos:column="35"/></name> <operator pos:line="153" pos:column="36">==<pos:position pos:line="153" pos:column="38"/></operator> <name><name pos:line="153" pos:column="39">s<pos:position pos:line="153" pos:column="40"/></name><operator pos:line="153" pos:column="40">-&gt;<pos:position pos:line="153" pos:column="45"/></operator><name pos:line="153" pos:column="42">sums<pos:position pos:line="153" pos:column="46"/></name><index pos:line="153" pos:column="46">[<expr><name pos:line="153" pos:column="47">want_i<pos:position pos:line="153" pos:column="53"/></name></expr>]<pos:position pos:line="153" pos:column="54"/></index></name><operator pos:line="153" pos:column="54">.<pos:position pos:line="153" pos:column="55"/></operator><name pos:line="153" pos:column="55">sum1<pos:position pos:line="153" pos:column="59"/></name>
			    <operator pos:line="154" pos:column="29">&amp;&amp;<pos:position pos:line="154" pos:column="39"/></operator> <call><name pos:line="154" pos:column="32">memcmp<pos:position pos:line="154" pos:column="38"/></name><argument_list pos:line="154" pos:column="38">(<argument><expr><name pos:line="154" pos:column="39">sum2<pos:position pos:line="154" pos:column="43"/></name></expr></argument>, <argument><expr><name><name pos:line="154" pos:column="45">s<pos:position pos:line="154" pos:column="46"/></name><operator pos:line="154" pos:column="46">-&gt;<pos:position pos:line="154" pos:column="51"/></operator><name pos:line="154" pos:column="48">sums<pos:position pos:line="154" pos:column="52"/></name><index pos:line="154" pos:column="52">[<expr><name pos:line="154" pos:column="53">want_i<pos:position pos:line="154" pos:column="59"/></name></expr>]<pos:position pos:line="154" pos:column="60"/></index></name><operator pos:line="154" pos:column="60">.<pos:position pos:line="154" pos:column="61"/></operator><name pos:line="154" pos:column="61">sum2<pos:position pos:line="154" pos:column="65"/></name></expr></argument>, <argument><expr><name><name pos:line="154" pos:column="67">s<pos:position pos:line="154" pos:column="68"/></name><operator pos:line="154" pos:column="68">-&gt;<pos:position pos:line="154" pos:column="73"/></operator><name pos:line="154" pos:column="70">s2length<pos:position pos:line="154" pos:column="78"/></name></name></expr></argument>)<pos:position pos:line="154" pos:column="79"/></argument_list></call> <operator pos:line="154" pos:column="80">==<pos:position pos:line="154" pos:column="82"/></operator> <literal type="number" pos:line="154" pos:column="83">0<pos:position pos:line="154" pos:column="84"/></literal></expr>)<pos:position pos:line="154" pos:column="85"/></condition><then pos:line="154" pos:column="85"> <block pos:line="154" pos:column="86">{
				<comment type="block" pos:line="155" pos:column="33">/* we've found an adjacent match - the RLL coder
				 * will be happy */</comment>
				<expr_stmt><expr><name pos:line="157" pos:column="33">i<pos:position pos:line="157" pos:column="34"/></name> <operator pos:line="157" pos:column="35">=<pos:position pos:line="157" pos:column="36"/></operator> <name pos:line="157" pos:column="37">want_i<pos:position pos:line="157" pos:column="43"/></name></expr>;<pos:position pos:line="157" pos:column="44"/></expr_stmt>
			}<pos:position pos:line="158" pos:column="26"/></block></then></if>
			<expr_stmt><expr><name pos:line="159" pos:column="25">want_i<pos:position pos:line="159" pos:column="31"/></name> <operator pos:line="159" pos:column="32">=<pos:position pos:line="159" pos:column="33"/></operator> <name pos:line="159" pos:column="34">i<pos:position pos:line="159" pos:column="35"/></name> <operator pos:line="159" pos:column="36">+<pos:position pos:line="159" pos:column="37"/></operator> <literal type="number" pos:line="159" pos:column="38">1<pos:position pos:line="159" pos:column="39"/></literal></expr>;<pos:position pos:line="159" pos:column="40"/></expr_stmt>

			<expr_stmt><expr><call><name pos:line="161" pos:column="25">matched<pos:position pos:line="161" pos:column="32"/></name><argument_list pos:line="161" pos:column="32">(<argument><expr><name pos:line="161" pos:column="33">f<pos:position pos:line="161" pos:column="34"/></name></expr></argument>,<argument><expr><name pos:line="161" pos:column="35">s<pos:position pos:line="161" pos:column="36"/></name></expr></argument>,<argument><expr><name pos:line="161" pos:column="37">buf<pos:position pos:line="161" pos:column="40"/></name></expr></argument>,<argument><expr><name pos:line="161" pos:column="41">offset<pos:position pos:line="161" pos:column="47"/></name></expr></argument>,<argument><expr><name pos:line="161" pos:column="48">i<pos:position pos:line="161" pos:column="49"/></name></expr></argument>)<pos:position pos:line="161" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="161" pos:column="51"/></expr_stmt>
			<expr_stmt><expr><name pos:line="162" pos:column="25">offset<pos:position pos:line="162" pos:column="31"/></name> <operator pos:line="162" pos:column="32">+=<pos:position pos:line="162" pos:column="34"/></operator> <name><name pos:line="162" pos:column="35">s<pos:position pos:line="162" pos:column="36"/></name><operator pos:line="162" pos:column="36">-&gt;<pos:position pos:line="162" pos:column="41"/></operator><name pos:line="162" pos:column="38">sums<pos:position pos:line="162" pos:column="42"/></name><index pos:line="162" pos:column="42">[<expr><name pos:line="162" pos:column="43">i<pos:position pos:line="162" pos:column="44"/></name></expr>]<pos:position pos:line="162" pos:column="45"/></index></name><operator pos:line="162" pos:column="45">.<pos:position pos:line="162" pos:column="46"/></operator><name pos:line="162" pos:column="46">len<pos:position pos:line="162" pos:column="49"/></name> <operator pos:line="162" pos:column="50">-<pos:position pos:line="162" pos:column="51"/></operator> <literal type="number" pos:line="162" pos:column="52">1<pos:position pos:line="162" pos:column="53"/></literal></expr>;<pos:position pos:line="162" pos:column="54"/></expr_stmt>
			<expr_stmt><expr><name pos:line="163" pos:column="25">k<pos:position pos:line="163" pos:column="26"/></name> <operator pos:line="163" pos:column="27">=<pos:position pos:line="163" pos:column="28"/></operator> <operator pos:line="163" pos:column="29">(<pos:position pos:line="163" pos:column="30"/></operator><name pos:line="163" pos:column="30">int32<pos:position pos:line="163" pos:column="35"/></name><operator pos:line="163" pos:column="35">)<pos:position pos:line="163" pos:column="36"/></operator><call><name pos:line="163" pos:column="36">MIN<pos:position pos:line="163" pos:column="39"/></name><argument_list pos:line="163" pos:column="39">(<argument><expr><operator pos:line="163" pos:column="40">(<pos:position pos:line="163" pos:column="41"/></operator><name pos:line="163" pos:column="41">OFF_T<pos:position pos:line="163" pos:column="46"/></name><operator pos:line="163" pos:column="46">)<pos:position pos:line="163" pos:column="47"/></operator><name><name pos:line="163" pos:column="47">s<pos:position pos:line="163" pos:column="48"/></name><operator pos:line="163" pos:column="48">-&gt;<pos:position pos:line="163" pos:column="53"/></operator><name pos:line="163" pos:column="50">blength<pos:position pos:line="163" pos:column="57"/></name></name></expr></argument>, <argument><expr><name pos:line="163" pos:column="59">len<pos:position pos:line="163" pos:column="62"/></name><operator pos:line="163" pos:column="62">-<pos:position pos:line="163" pos:column="63"/></operator><name pos:line="163" pos:column="63">offset<pos:position pos:line="163" pos:column="69"/></name></expr></argument>)<pos:position pos:line="163" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="163" pos:column="71"/></expr_stmt>
			<expr_stmt><expr><name pos:line="164" pos:column="25">map<pos:position pos:line="164" pos:column="28"/></name> <operator pos:line="164" pos:column="29">=<pos:position pos:line="164" pos:column="30"/></operator> <operator pos:line="164" pos:column="31">(<pos:position pos:line="164" pos:column="32"/></operator><name pos:line="164" pos:column="32">schar<pos:position pos:line="164" pos:column="37"/></name> <operator pos:line="164" pos:column="38">*<pos:position pos:line="164" pos:column="39"/></operator><operator pos:line="164" pos:column="39">)<pos:position pos:line="164" pos:column="40"/></operator><call><name pos:line="164" pos:column="40">map_ptr<pos:position pos:line="164" pos:column="47"/></name><argument_list pos:line="164" pos:column="47">(<argument><expr><name pos:line="164" pos:column="48">buf<pos:position pos:line="164" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="164" pos:column="53">offset<pos:position pos:line="164" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="164" pos:column="61">k<pos:position pos:line="164" pos:column="62"/></name></expr></argument>)<pos:position pos:line="164" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="164" pos:column="64"/></expr_stmt>
			<expr_stmt><expr><name pos:line="165" pos:column="25">sum<pos:position pos:line="165" pos:column="28"/></name> <operator pos:line="165" pos:column="29">=<pos:position pos:line="165" pos:column="30"/></operator> <call><name pos:line="165" pos:column="31">get_checksum1<pos:position pos:line="165" pos:column="44"/></name><argument_list pos:line="165" pos:column="44">(<argument><expr><operator pos:line="165" pos:column="45">(<pos:position pos:line="165" pos:column="46"/></operator><name pos:line="165" pos:column="46">char<pos:position pos:line="165" pos:column="50"/></name> <operator pos:line="165" pos:column="51">*<pos:position pos:line="165" pos:column="52"/></operator><operator pos:line="165" pos:column="52">)<pos:position pos:line="165" pos:column="53"/></operator><name pos:line="165" pos:column="53">map<pos:position pos:line="165" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="165" pos:column="58">k<pos:position pos:line="165" pos:column="59"/></name></expr></argument>)<pos:position pos:line="165" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="165" pos:column="61"/></expr_stmt>
			<expr_stmt><expr><name pos:line="166" pos:column="25">s1<pos:position pos:line="166" pos:column="27"/></name> <operator pos:line="166" pos:column="28">=<pos:position pos:line="166" pos:column="29"/></operator> <name pos:line="166" pos:column="30">sum<pos:position pos:line="166" pos:column="33"/></name> <operator pos:line="166" pos:column="34">&amp;<pos:position pos:line="166" pos:column="39"/></operator> <literal type="number" pos:line="166" pos:column="36">0xFFFF<pos:position pos:line="166" pos:column="42"/></literal></expr>;<pos:position pos:line="166" pos:column="43"/></expr_stmt>
			<expr_stmt><expr><name pos:line="167" pos:column="25">s2<pos:position pos:line="167" pos:column="27"/></name> <operator pos:line="167" pos:column="28">=<pos:position pos:line="167" pos:column="29"/></operator> <name pos:line="167" pos:column="30">sum<pos:position pos:line="167" pos:column="33"/></name> <operator pos:line="167" pos:column="34">&gt;&gt;<pos:position pos:line="167" pos:column="39"/></operator> <literal type="number" pos:line="167" pos:column="37">16<pos:position pos:line="167" pos:column="39"/></literal></expr>;<pos:position pos:line="167" pos:column="40"/></expr_stmt>
			<expr_stmt><expr><name pos:line="168" pos:column="25">matches<pos:position pos:line="168" pos:column="32"/></name><operator pos:line="168" pos:column="32">++<pos:position pos:line="168" pos:column="34"/></operator></expr>;<pos:position pos:line="168" pos:column="35"/></expr_stmt>
			<break pos:line="169" pos:column="25">break;<pos:position pos:line="169" pos:column="31"/></break>
		}<pos:position pos:line="170" pos:column="18"/></block> while <condition pos:line="170" pos:column="25">(<expr><operator pos:line="170" pos:column="26">(<pos:position pos:line="170" pos:column="27"/></operator><name pos:line="170" pos:column="27">i<pos:position pos:line="170" pos:column="28"/></name> <operator pos:line="170" pos:column="29">=<pos:position pos:line="170" pos:column="30"/></operator> <name><name pos:line="170" pos:column="31">s<pos:position pos:line="170" pos:column="32"/></name><operator pos:line="170" pos:column="32">-&gt;<pos:position pos:line="170" pos:column="37"/></operator><name pos:line="170" pos:column="34">sums<pos:position pos:line="170" pos:column="38"/></name><index pos:line="170" pos:column="38">[<expr><name pos:line="170" pos:column="39">i<pos:position pos:line="170" pos:column="40"/></name></expr>]<pos:position pos:line="170" pos:column="41"/></index></name><operator pos:line="170" pos:column="41">.<pos:position pos:line="170" pos:column="42"/></operator><name pos:line="170" pos:column="42">chain<pos:position pos:line="170" pos:column="47"/></name><operator pos:line="170" pos:column="47">)<pos:position pos:line="170" pos:column="48"/></operator> <operator pos:line="170" pos:column="49">&gt;=<pos:position pos:line="170" pos:column="54"/></operator> <literal type="number" pos:line="170" pos:column="52">0<pos:position pos:line="170" pos:column="53"/></literal></expr>)<pos:position pos:line="170" pos:column="54"/></condition>;<pos:position pos:line="170" pos:column="55"/></do>

	  <label><name pos:line="172" pos:column="11">null_hash<pos:position pos:line="172" pos:column="20"/></name>:<pos:position pos:line="172" pos:column="21"/></label>
		<expr_stmt><expr><name pos:line="173" pos:column="17">backup<pos:position pos:line="173" pos:column="23"/></name> <operator pos:line="173" pos:column="24">=<pos:position pos:line="173" pos:column="25"/></operator> <call pos:line="173" pos:column="26">(<name pos:line="173" pos:column="27">int32<pos:position pos:line="173" pos:column="32"/></name>)<argument_list pos:line="173" pos:column="33">(<argument><expr><name pos:line="173" pos:column="34">offset<pos:position pos:line="173" pos:column="40"/></name> <operator pos:line="173" pos:column="41">-<pos:position pos:line="173" pos:column="42"/></operator> <name pos:line="173" pos:column="43">last_match<pos:position pos:line="173" pos:column="53"/></name></expr></argument>)<pos:position pos:line="173" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="173" pos:column="55"/></expr_stmt>
		<comment type="block" pos:line="174" pos:column="17">/* We sometimes read 1 byte prior to last_match... */</comment>
		<if pos:line="175" pos:column="17">if <condition pos:line="175" pos:column="20">(<expr><name pos:line="175" pos:column="21">backup<pos:position pos:line="175" pos:column="27"/></name> <operator pos:line="175" pos:column="28">&lt;<pos:position pos:line="175" pos:column="32"/></operator> <literal type="number" pos:line="175" pos:column="30">0<pos:position pos:line="175" pos:column="31"/></literal></expr>)<pos:position pos:line="175" pos:column="32"/></condition><then pos:line="175" pos:column="32">
			<block type="pseudo"><expr_stmt><expr><name pos:line="176" pos:column="25">backup<pos:position pos:line="176" pos:column="31"/></name> <operator pos:line="176" pos:column="32">=<pos:position pos:line="176" pos:column="33"/></operator> <literal type="number" pos:line="176" pos:column="34">0<pos:position pos:line="176" pos:column="35"/></literal></expr>;<pos:position pos:line="176" pos:column="36"/></expr_stmt></block></then></if>

		<comment type="block" pos:line="178" pos:column="17">/* Trim off the first byte from the checksum */</comment>
		<expr_stmt><expr><name pos:line="179" pos:column="17">more<pos:position pos:line="179" pos:column="21"/></name> <operator pos:line="179" pos:column="22">=<pos:position pos:line="179" pos:column="23"/></operator> <name pos:line="179" pos:column="24">offset<pos:position pos:line="179" pos:column="30"/></name> <operator pos:line="179" pos:column="31">+<pos:position pos:line="179" pos:column="32"/></operator> <name pos:line="179" pos:column="33">k<pos:position pos:line="179" pos:column="34"/></name> <operator pos:line="179" pos:column="35">&lt;<pos:position pos:line="179" pos:column="39"/></operator> <name pos:line="179" pos:column="37">len<pos:position pos:line="179" pos:column="40"/></name></expr>;<pos:position pos:line="179" pos:column="41"/></expr_stmt>
		<expr_stmt><expr><name pos:line="180" pos:column="17">map<pos:position pos:line="180" pos:column="20"/></name> <operator pos:line="180" pos:column="21">=<pos:position pos:line="180" pos:column="22"/></operator> <operator pos:line="180" pos:column="23">(<pos:position pos:line="180" pos:column="24"/></operator><name pos:line="180" pos:column="24">schar<pos:position pos:line="180" pos:column="29"/></name> <operator pos:line="180" pos:column="30">*<pos:position pos:line="180" pos:column="31"/></operator><operator pos:line="180" pos:column="31">)<pos:position pos:line="180" pos:column="32"/></operator><call><name pos:line="180" pos:column="32">map_ptr<pos:position pos:line="180" pos:column="39"/></name><argument_list pos:line="180" pos:column="39">(<argument><expr><name pos:line="180" pos:column="40">buf<pos:position pos:line="180" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="180" pos:column="45">offset<pos:position pos:line="180" pos:column="51"/></name> <operator pos:line="180" pos:column="52">-<pos:position pos:line="180" pos:column="53"/></operator> <name pos:line="180" pos:column="54">backup<pos:position pos:line="180" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="180" pos:column="62">k<pos:position pos:line="180" pos:column="63"/></name> <operator pos:line="180" pos:column="64">+<pos:position pos:line="180" pos:column="65"/></operator> <name pos:line="180" pos:column="66">more<pos:position pos:line="180" pos:column="70"/></name> <operator pos:line="180" pos:column="71">+<pos:position pos:line="180" pos:column="72"/></operator> <name pos:line="180" pos:column="73">backup<pos:position pos:line="180" pos:column="79"/></name></expr></argument>)<pos:position pos:line="180" pos:column="80"/></argument_list></call>
		    <operator pos:line="181" pos:column="21">+<pos:position pos:line="181" pos:column="22"/></operator> <name pos:line="181" pos:column="23">backup<pos:position pos:line="181" pos:column="29"/></name></expr>;<pos:position pos:line="181" pos:column="30"/></expr_stmt>
		<expr_stmt><expr><name pos:line="182" pos:column="17">s1<pos:position pos:line="182" pos:column="19"/></name> <operator pos:line="182" pos:column="20">-=<pos:position pos:line="182" pos:column="22"/></operator> <name><name pos:line="182" pos:column="23">map<pos:position pos:line="182" pos:column="26"/></name><index pos:line="182" pos:column="26">[<expr><literal type="number" pos:line="182" pos:column="27">0<pos:position pos:line="182" pos:column="28"/></literal></expr>]<pos:position pos:line="182" pos:column="29"/></index></name> <operator pos:line="182" pos:column="30">+<pos:position pos:line="182" pos:column="31"/></operator> <name pos:line="182" pos:column="32">CHAR_OFFSET<pos:position pos:line="182" pos:column="43"/></name></expr>;<pos:position pos:line="182" pos:column="44"/></expr_stmt>
		<expr_stmt><expr><name pos:line="183" pos:column="17">s2<pos:position pos:line="183" pos:column="19"/></name> <operator pos:line="183" pos:column="20">-=<pos:position pos:line="183" pos:column="22"/></operator> <name pos:line="183" pos:column="23">k<pos:position pos:line="183" pos:column="24"/></name> <operator pos:line="183" pos:column="25">*<pos:position pos:line="183" pos:column="26"/></operator> <operator pos:line="183" pos:column="27">(<pos:position pos:line="183" pos:column="28"/></operator><name><name pos:line="183" pos:column="28">map<pos:position pos:line="183" pos:column="31"/></name><index pos:line="183" pos:column="31">[<expr><literal type="number" pos:line="183" pos:column="32">0<pos:position pos:line="183" pos:column="33"/></literal></expr>]<pos:position pos:line="183" pos:column="34"/></index></name><operator pos:line="183" pos:column="34">+<pos:position pos:line="183" pos:column="35"/></operator><name pos:line="183" pos:column="35">CHAR_OFFSET<pos:position pos:line="183" pos:column="46"/></name><operator pos:line="183" pos:column="46">)<pos:position pos:line="183" pos:column="47"/></operator></expr>;<pos:position pos:line="183" pos:column="48"/></expr_stmt>

		<comment type="block" pos:line="185" pos:column="17">/* Add on the next byte (if there is one) to the checksum */</comment>
		<if pos:line="186" pos:column="17">if <condition pos:line="186" pos:column="20">(<expr><name pos:line="186" pos:column="21">more<pos:position pos:line="186" pos:column="25"/></name></expr>)<pos:position pos:line="186" pos:column="26"/></condition><then pos:line="186" pos:column="26"> <block pos:line="186" pos:column="27">{
			<expr_stmt><expr><name pos:line="187" pos:column="25">s1<pos:position pos:line="187" pos:column="27"/></name> <operator pos:line="187" pos:column="28">+=<pos:position pos:line="187" pos:column="30"/></operator> <name><name pos:line="187" pos:column="31">map<pos:position pos:line="187" pos:column="34"/></name><index pos:line="187" pos:column="34">[<expr><name pos:line="187" pos:column="35">k<pos:position pos:line="187" pos:column="36"/></name></expr>]<pos:position pos:line="187" pos:column="37"/></index></name> <operator pos:line="187" pos:column="38">+<pos:position pos:line="187" pos:column="39"/></operator> <name pos:line="187" pos:column="40">CHAR_OFFSET<pos:position pos:line="187" pos:column="51"/></name></expr>;<pos:position pos:line="187" pos:column="52"/></expr_stmt>
			<expr_stmt><expr><name pos:line="188" pos:column="25">s2<pos:position pos:line="188" pos:column="27"/></name> <operator pos:line="188" pos:column="28">+=<pos:position pos:line="188" pos:column="30"/></operator> <name pos:line="188" pos:column="31">s1<pos:position pos:line="188" pos:column="33"/></name></expr>;<pos:position pos:line="188" pos:column="34"/></expr_stmt>
		}<pos:position pos:line="189" pos:column="18"/></block></then> <else pos:line="189" pos:column="19">else
			<block type="pseudo"><expr_stmt><expr><operator pos:line="190" pos:column="25">--<pos:position pos:line="190" pos:column="27"/></operator><name pos:line="190" pos:column="27">k<pos:position pos:line="190" pos:column="28"/></name></expr>;<pos:position pos:line="190" pos:column="29"/></expr_stmt></block></else></if>

		<comment type="block" pos:line="192" pos:column="17">/* By matching early we avoid re-reading the
		   data 3 times in the case where a token
		   match comes a long way after last
		   match. The 3 reads are caused by the
		   running match, the checksum update and the
		   literal send. */</comment>
		<if pos:line="198" pos:column="17">if <condition pos:line="198" pos:column="20">(<expr><name pos:line="198" pos:column="21">backup<pos:position pos:line="198" pos:column="27"/></name> <operator pos:line="198" pos:column="28">&gt;=<pos:position pos:line="198" pos:column="33"/></operator> <name><name pos:line="198" pos:column="31">s<pos:position pos:line="198" pos:column="32"/></name><operator pos:line="198" pos:column="32">-&gt;<pos:position pos:line="198" pos:column="37"/></operator><name pos:line="198" pos:column="34">blength<pos:position pos:line="198" pos:column="41"/></name></name><operator pos:line="198" pos:column="41">+<pos:position pos:line="198" pos:column="42"/></operator><name pos:line="198" pos:column="42">CHUNK_SIZE<pos:position pos:line="198" pos:column="52"/></name> <operator pos:line="198" pos:column="53">&amp;&amp;<pos:position pos:line="198" pos:column="63"/></operator> <name pos:line="198" pos:column="56">end<pos:position pos:line="198" pos:column="59"/></name><operator pos:line="198" pos:column="59">-<pos:position pos:line="198" pos:column="60"/></operator><name pos:line="198" pos:column="60">offset<pos:position pos:line="198" pos:column="66"/></name> <operator pos:line="198" pos:column="67">&gt;<pos:position pos:line="198" pos:column="71"/></operator> <name pos:line="198" pos:column="69">CHUNK_SIZE<pos:position pos:line="198" pos:column="79"/></name></expr>)<pos:position pos:line="198" pos:column="80"/></condition><then pos:line="198" pos:column="80">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="199" pos:column="25">matched<pos:position pos:line="199" pos:column="32"/></name><argument_list pos:line="199" pos:column="32">(<argument><expr><name pos:line="199" pos:column="33">f<pos:position pos:line="199" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="199" pos:column="36">s<pos:position pos:line="199" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="199" pos:column="39">buf<pos:position pos:line="199" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="199" pos:column="44">offset<pos:position pos:line="199" pos:column="50"/></name> <operator pos:line="199" pos:column="51">-<pos:position pos:line="199" pos:column="52"/></operator> <name><name pos:line="199" pos:column="53">s<pos:position pos:line="199" pos:column="54"/></name><operator pos:line="199" pos:column="54">-&gt;<pos:position pos:line="199" pos:column="59"/></operator><name pos:line="199" pos:column="56">blength<pos:position pos:line="199" pos:column="63"/></name></name></expr></argument>, <argument><expr><operator pos:line="199" pos:column="65">-<pos:position pos:line="199" pos:column="66"/></operator><literal type="number" pos:line="199" pos:column="66">2<pos:position pos:line="199" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="199" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="199" pos:column="69"/></expr_stmt></block></then></if>
	}<pos:position pos:line="200" pos:column="10"/></block> while <condition pos:line="200" pos:column="17">(<expr><operator pos:line="200" pos:column="18">++<pos:position pos:line="200" pos:column="20"/></operator><name pos:line="200" pos:column="20">offset<pos:position pos:line="200" pos:column="26"/></name> <operator pos:line="200" pos:column="27">&lt;<pos:position pos:line="200" pos:column="31"/></operator> <name pos:line="200" pos:column="29">end<pos:position pos:line="200" pos:column="32"/></name></expr>)<pos:position pos:line="200" pos:column="33"/></condition>;<pos:position pos:line="200" pos:column="34"/></do>

	<expr_stmt><expr><call><name pos:line="202" pos:column="9">matched<pos:position pos:line="202" pos:column="16"/></name><argument_list pos:line="202" pos:column="16">(<argument><expr><name pos:line="202" pos:column="17">f<pos:position pos:line="202" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="202" pos:column="20">s<pos:position pos:line="202" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="202" pos:column="23">buf<pos:position pos:line="202" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="202" pos:column="28">len<pos:position pos:line="202" pos:column="31"/></name></expr></argument>, <argument><expr><operator pos:line="202" pos:column="33">-<pos:position pos:line="202" pos:column="34"/></operator><literal type="number" pos:line="202" pos:column="34">1<pos:position pos:line="202" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="202" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="202" pos:column="37"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="203" pos:column="9">map_ptr<pos:position pos:line="203" pos:column="16"/></name><argument_list pos:line="203" pos:column="16">(<argument><expr><name pos:line="203" pos:column="17">buf<pos:position pos:line="203" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="203" pos:column="22">len<pos:position pos:line="203" pos:column="25"/></name><operator pos:line="203" pos:column="25">-<pos:position pos:line="203" pos:column="26"/></operator><literal type="number" pos:line="203" pos:column="26">1<pos:position pos:line="203" pos:column="27"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="203" pos:column="29">1<pos:position pos:line="203" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="203" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="203" pos:column="32"/></expr_stmt>
}<pos:position pos:line="204" pos:column="2"/></block></function></unit>
