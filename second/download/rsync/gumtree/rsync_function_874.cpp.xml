<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_function_874.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">add_suffix<pos:position pos:line="1" pos:column="23"/></name><parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><name><name pos:line="1" pos:column="24">struct<pos:position pos:line="1" pos:column="30"/></name> <name pos:line="1" pos:column="31">suffix_tree<pos:position pos:line="1" pos:column="42"/></name></name> <modifier pos:line="1" pos:column="43">*<pos:position pos:line="1" pos:column="44"/></modifier><modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier></type><name pos:line="1" pos:column="45">prior<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="52">char<pos:position pos:line="1" pos:column="56"/></name></type> <name pos:line="1" pos:column="57">ltr<pos:position pos:line="1" pos:column="60"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="62">const<pos:position pos:line="1" pos:column="67"/></specifier> <name pos:line="1" pos:column="68">char<pos:position pos:line="1" pos:column="72"/></name> <modifier pos:line="1" pos:column="73">*<pos:position pos:line="1" pos:column="74"/></modifier></type><name pos:line="1" pos:column="74">str<pos:position pos:line="1" pos:column="77"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="78"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">suffix_tree<pos:position pos:line="3" pos:column="27"/></name></name> <modifier pos:line="3" pos:column="28">*<pos:position pos:line="3" pos:column="29"/></modifier></type><name pos:line="3" pos:column="29">node<pos:position pos:line="3" pos:column="33"/></name></decl>, <modifier pos:line="3" pos:column="35">*<pos:position pos:line="3" pos:column="36"/></modifier><decl><type ref="prev"/><name pos:line="3" pos:column="36">newnode<pos:position pos:line="3" pos:column="43"/></name></decl>;<pos:position pos:line="3" pos:column="44"/></decl_stmt>

	<if pos:line="5" pos:column="9">if <condition pos:line="5" pos:column="12">(<expr><name pos:line="5" pos:column="13">ltr<pos:position pos:line="5" pos:column="16"/></name> <operator pos:line="5" pos:column="17">==<pos:position pos:line="5" pos:column="19"/></operator> <literal type="char" pos:line="5" pos:column="20">'['<pos:position pos:line="5" pos:column="23"/></literal></expr>)<pos:position pos:line="5" pos:column="24"/></condition><then pos:line="5" pos:column="24"> <block pos:line="5" pos:column="25">{
		<decl_stmt><decl><type><specifier pos:line="6" pos:column="17">const<pos:position pos:line="6" pos:column="22"/></specifier> <name pos:line="6" pos:column="23">char<pos:position pos:line="6" pos:column="27"/></name> <modifier pos:line="6" pos:column="28">*<pos:position pos:line="6" pos:column="29"/></modifier></type><name pos:line="6" pos:column="29">after<pos:position pos:line="6" pos:column="34"/></name> <init pos:line="6" pos:column="35">= <expr><call><name pos:line="6" pos:column="37">strchr<pos:position pos:line="6" pos:column="43"/></name><argument_list pos:line="6" pos:column="43">(<argument><expr><name pos:line="6" pos:column="44">str<pos:position pos:line="6" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="6" pos:column="49">']'<pos:position pos:line="6" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="53"/></argument_list></call></expr></init></decl>;<pos:position pos:line="6" pos:column="54"/></decl_stmt>
		<comment type="block" pos:line="7" pos:column="17">/* Just skip bogus character classes. */</comment>
		<if pos:line="8" pos:column="17">if <condition pos:line="8" pos:column="20">(<expr><operator pos:line="8" pos:column="21">!<pos:position pos:line="8" pos:column="22"/></operator><name pos:line="8" pos:column="22">after<pos:position pos:line="8" pos:column="27"/></name><operator pos:line="8" pos:column="27">++<pos:position pos:line="8" pos:column="29"/></operator></expr>)<pos:position pos:line="8" pos:column="30"/></condition><then pos:line="8" pos:column="30">
			<block type="pseudo"><return pos:line="9" pos:column="25">return;<pos:position pos:line="9" pos:column="32"/></return></block></then></if>
		<while pos:line="10" pos:column="17">while <condition pos:line="10" pos:column="23">(<expr><operator pos:line="10" pos:column="24">(<pos:position pos:line="10" pos:column="25"/></operator><name pos:line="10" pos:column="25">ltr<pos:position pos:line="10" pos:column="28"/></name> <operator pos:line="10" pos:column="29">=<pos:position pos:line="10" pos:column="30"/></operator> <operator pos:line="10" pos:column="31">*<pos:position pos:line="10" pos:column="32"/></operator><name pos:line="10" pos:column="32">str<pos:position pos:line="10" pos:column="35"/></name><operator pos:line="10" pos:column="35">++<pos:position pos:line="10" pos:column="37"/></operator><operator pos:line="10" pos:column="37">)<pos:position pos:line="10" pos:column="38"/></operator> <operator pos:line="10" pos:column="39">!=<pos:position pos:line="10" pos:column="41"/></operator> <literal type="char" pos:line="10" pos:column="42">']'<pos:position pos:line="10" pos:column="45"/></literal></expr>)<pos:position pos:line="10" pos:column="46"/></condition>
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="11" pos:column="25">add_suffix<pos:position pos:line="11" pos:column="35"/></name><argument_list pos:line="11" pos:column="35">(<argument><expr><name pos:line="11" pos:column="36">prior<pos:position pos:line="11" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="43">ltr<pos:position pos:line="11" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="48">after<pos:position pos:line="11" pos:column="53"/></name></expr></argument>)<pos:position pos:line="11" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="55"/></expr_stmt></block></while>
		<return pos:line="12" pos:column="17">return;<pos:position pos:line="12" pos:column="24"/></return>
	}<pos:position pos:line="13" pos:column="10"/></block></then></if>

	<for pos:line="15" pos:column="9">for <control pos:line="15" pos:column="13">(<init><expr><name pos:line="15" pos:column="14">node<pos:position pos:line="15" pos:column="18"/></name> <operator pos:line="15" pos:column="19">=<pos:position pos:line="15" pos:column="20"/></operator> <operator pos:line="15" pos:column="21">*<pos:position pos:line="15" pos:column="22"/></operator><name pos:line="15" pos:column="22">prior<pos:position pos:line="15" pos:column="27"/></name></expr>;<pos:position pos:line="15" pos:column="28"/></init> <condition><expr><name pos:line="15" pos:column="29">node<pos:position pos:line="15" pos:column="33"/></name></expr>;<pos:position pos:line="15" pos:column="34"/></condition> <incr><expr><name pos:line="15" pos:column="35">prior<pos:position pos:line="15" pos:column="40"/></name> <operator pos:line="15" pos:column="41">=<pos:position pos:line="15" pos:column="42"/></operator> <operator pos:line="15" pos:column="43">&amp;<pos:position pos:line="15" pos:column="48"/></operator><name><name pos:line="15" pos:column="44">node<pos:position pos:line="15" pos:column="48"/></name><operator pos:line="15" pos:column="48">-&gt;<pos:position pos:line="15" pos:column="53"/></operator><name pos:line="15" pos:column="50">sibling<pos:position pos:line="15" pos:column="57"/></name></name></expr><operator pos:line="15" pos:column="57">,<pos:position pos:line="15" pos:column="58"/></operator> <expr><name pos:line="15" pos:column="59">node<pos:position pos:line="15" pos:column="63"/></name> <operator pos:line="15" pos:column="64">=<pos:position pos:line="15" pos:column="65"/></operator> <name><name pos:line="15" pos:column="66">node<pos:position pos:line="15" pos:column="70"/></name><operator pos:line="15" pos:column="70">-&gt;<pos:position pos:line="15" pos:column="75"/></operator><name pos:line="15" pos:column="72">sibling<pos:position pos:line="15" pos:column="79"/></name></name></expr></incr>)<pos:position pos:line="15" pos:column="80"/></control> <block pos:line="15" pos:column="81">{
		<if pos:line="16" pos:column="17">if <condition pos:line="16" pos:column="20">(<expr><name><name pos:line="16" pos:column="21">node<pos:position pos:line="16" pos:column="25"/></name><operator pos:line="16" pos:column="25">-&gt;<pos:position pos:line="16" pos:column="30"/></operator><name pos:line="16" pos:column="27">letter<pos:position pos:line="16" pos:column="33"/></name></name> <operator pos:line="16" pos:column="34">==<pos:position pos:line="16" pos:column="36"/></operator> <name pos:line="16" pos:column="37">ltr<pos:position pos:line="16" pos:column="40"/></name></expr>)<pos:position pos:line="16" pos:column="41"/></condition><then pos:line="16" pos:column="41"> <block pos:line="16" pos:column="42">{
			<if pos:line="17" pos:column="25">if <condition pos:line="17" pos:column="28">(<expr><operator pos:line="17" pos:column="29">*<pos:position pos:line="17" pos:column="30"/></operator><name pos:line="17" pos:column="30">str<pos:position pos:line="17" pos:column="33"/></name></expr>)<pos:position pos:line="17" pos:column="34"/></condition><then pos:line="17" pos:column="34">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="18" pos:column="33">add_suffix<pos:position pos:line="18" pos:column="43"/></name><argument_list pos:line="18" pos:column="43">(<argument><expr><operator pos:line="18" pos:column="44">&amp;<pos:position pos:line="18" pos:column="49"/></operator><name><name pos:line="18" pos:column="45">node<pos:position pos:line="18" pos:column="49"/></name><operator pos:line="18" pos:column="49">-&gt;<pos:position pos:line="18" pos:column="54"/></operator><name pos:line="18" pos:column="51">child<pos:position pos:line="18" pos:column="56"/></name></name></expr></argument>, <argument><expr><operator pos:line="18" pos:column="58">*<pos:position pos:line="18" pos:column="59"/></operator><name pos:line="18" pos:column="59">str<pos:position pos:line="18" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="64">str<pos:position pos:line="18" pos:column="67"/></name><operator pos:line="18" pos:column="67">+<pos:position pos:line="18" pos:column="68"/></operator><literal type="number" pos:line="18" pos:column="68">1<pos:position pos:line="18" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="71"/></expr_stmt></block></then>
			<else pos:line="19" pos:column="25">else
				<block type="pseudo"><expr_stmt><expr><name><name pos:line="20" pos:column="33">node<pos:position pos:line="20" pos:column="37"/></name><operator pos:line="20" pos:column="37">-&gt;<pos:position pos:line="20" pos:column="42"/></operator><name pos:line="20" pos:column="39">word_end<pos:position pos:line="20" pos:column="47"/></name></name> <operator pos:line="20" pos:column="48">=<pos:position pos:line="20" pos:column="49"/></operator> <literal type="number" pos:line="20" pos:column="50">1<pos:position pos:line="20" pos:column="51"/></literal></expr>;<pos:position pos:line="20" pos:column="52"/></expr_stmt></block></else></if>
			<return pos:line="21" pos:column="25">return;<pos:position pos:line="21" pos:column="32"/></return>
		}<pos:position pos:line="22" pos:column="18"/></block></then></if>
		<if pos:line="23" pos:column="17">if <condition pos:line="23" pos:column="20">(<expr><name><name pos:line="23" pos:column="21">node<pos:position pos:line="23" pos:column="25"/></name><operator pos:line="23" pos:column="25">-&gt;<pos:position pos:line="23" pos:column="30"/></operator><name pos:line="23" pos:column="27">letter<pos:position pos:line="23" pos:column="33"/></name></name> <operator pos:line="23" pos:column="34">&gt;<pos:position pos:line="23" pos:column="38"/></operator> <name pos:line="23" pos:column="36">ltr<pos:position pos:line="23" pos:column="39"/></name></expr>)<pos:position pos:line="23" pos:column="40"/></condition><then pos:line="23" pos:column="40">
			<block type="pseudo"><break pos:line="24" pos:column="25">break;<pos:position pos:line="24" pos:column="31"/></break></block></then></if>
	}<pos:position pos:line="25" pos:column="10"/></block></for>
	<if pos:line="26" pos:column="9">if <condition pos:line="26" pos:column="12">(<expr><operator pos:line="26" pos:column="13">!<pos:position pos:line="26" pos:column="14"/></operator><operator pos:line="26" pos:column="14">(<pos:position pos:line="26" pos:column="15"/></operator><name pos:line="26" pos:column="15">newnode<pos:position pos:line="26" pos:column="22"/></name> <operator pos:line="26" pos:column="23">=<pos:position pos:line="26" pos:column="24"/></operator> <operator pos:line="26" pos:column="25">new<pos:position pos:line="26" pos:column="28"/></operator><operator pos:line="26" pos:column="28">(<pos:position pos:line="26" pos:column="29"/></operator>struct <name pos:line="26" pos:column="36">suffix_tree<pos:position pos:line="26" pos:column="47"/></name><operator pos:line="26" pos:column="47">)<pos:position pos:line="26" pos:column="48"/></operator><operator pos:line="26" pos:column="48">)<pos:position pos:line="26" pos:column="49"/></operator></expr>)<pos:position pos:line="26" pos:column="50"/></condition><then pos:line="26" pos:column="50">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="27" pos:column="17">out_of_memory<pos:position pos:line="27" pos:column="30"/></name><argument_list pos:line="27" pos:column="30">(<argument><expr><literal type="string" pos:line="27" pos:column="31">"add_suffix"<pos:position pos:line="27" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="45"/></expr_stmt></block></then></if>
	<expr_stmt><expr><name><name pos:line="28" pos:column="9">newnode<pos:position pos:line="28" pos:column="16"/></name><operator pos:line="28" pos:column="16">-&gt;<pos:position pos:line="28" pos:column="21"/></operator><name pos:line="28" pos:column="18">sibling<pos:position pos:line="28" pos:column="25"/></name></name> <operator pos:line="28" pos:column="26">=<pos:position pos:line="28" pos:column="27"/></operator> <name pos:line="28" pos:column="28">node<pos:position pos:line="28" pos:column="32"/></name></expr>;<pos:position pos:line="28" pos:column="33"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="29" pos:column="9">newnode<pos:position pos:line="29" pos:column="16"/></name><operator pos:line="29" pos:column="16">-&gt;<pos:position pos:line="29" pos:column="21"/></operator><name pos:line="29" pos:column="18">child<pos:position pos:line="29" pos:column="23"/></name></name> <operator pos:line="29" pos:column="24">=<pos:position pos:line="29" pos:column="25"/></operator> <name pos:line="29" pos:column="26">NULL<pos:position pos:line="29" pos:column="30"/></name></expr>;<pos:position pos:line="29" pos:column="31"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="30" pos:column="9">newnode<pos:position pos:line="30" pos:column="16"/></name><operator pos:line="30" pos:column="16">-&gt;<pos:position pos:line="30" pos:column="21"/></operator><name pos:line="30" pos:column="18">letter<pos:position pos:line="30" pos:column="24"/></name></name> <operator pos:line="30" pos:column="25">=<pos:position pos:line="30" pos:column="26"/></operator> <name pos:line="30" pos:column="27">ltr<pos:position pos:line="30" pos:column="30"/></name></expr>;<pos:position pos:line="30" pos:column="31"/></expr_stmt>
	<expr_stmt><expr><operator pos:line="31" pos:column="9">*<pos:position pos:line="31" pos:column="10"/></operator><name pos:line="31" pos:column="10">prior<pos:position pos:line="31" pos:column="15"/></name> <operator pos:line="31" pos:column="16">=<pos:position pos:line="31" pos:column="17"/></operator> <name pos:line="31" pos:column="18">newnode<pos:position pos:line="31" pos:column="25"/></name></expr>;<pos:position pos:line="31" pos:column="26"/></expr_stmt>
	<if pos:line="32" pos:column="9">if <condition pos:line="32" pos:column="12">(<expr><operator pos:line="32" pos:column="13">*<pos:position pos:line="32" pos:column="14"/></operator><name pos:line="32" pos:column="14">str<pos:position pos:line="32" pos:column="17"/></name></expr>)<pos:position pos:line="32" pos:column="18"/></condition><then pos:line="32" pos:column="18"> <block pos:line="32" pos:column="19">{
		<expr_stmt><expr><call><name pos:line="33" pos:column="17">add_suffix<pos:position pos:line="33" pos:column="27"/></name><argument_list pos:line="33" pos:column="27">(<argument><expr><operator pos:line="33" pos:column="28">&amp;<pos:position pos:line="33" pos:column="33"/></operator><name><name pos:line="33" pos:column="29">newnode<pos:position pos:line="33" pos:column="36"/></name><operator pos:line="33" pos:column="36">-&gt;<pos:position pos:line="33" pos:column="41"/></operator><name pos:line="33" pos:column="38">child<pos:position pos:line="33" pos:column="43"/></name></name></expr></argument>, <argument><expr><operator pos:line="33" pos:column="45">*<pos:position pos:line="33" pos:column="46"/></operator><name pos:line="33" pos:column="46">str<pos:position pos:line="33" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="51">str<pos:position pos:line="33" pos:column="54"/></name><operator pos:line="33" pos:column="54">+<pos:position pos:line="33" pos:column="55"/></operator><literal type="number" pos:line="33" pos:column="55">1<pos:position pos:line="33" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="58"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="34" pos:column="17">newnode<pos:position pos:line="34" pos:column="24"/></name><operator pos:line="34" pos:column="24">-&gt;<pos:position pos:line="34" pos:column="29"/></operator><name pos:line="34" pos:column="26">word_end<pos:position pos:line="34" pos:column="34"/></name></name> <operator pos:line="34" pos:column="35">=<pos:position pos:line="34" pos:column="36"/></operator> <literal type="number" pos:line="34" pos:column="37">0<pos:position pos:line="34" pos:column="38"/></literal></expr>;<pos:position pos:line="34" pos:column="39"/></expr_stmt>
	}<pos:position pos:line="35" pos:column="10"/></block></then> <else pos:line="35" pos:column="11">else
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="36" pos:column="17">newnode<pos:position pos:line="36" pos:column="24"/></name><operator pos:line="36" pos:column="24">-&gt;<pos:position pos:line="36" pos:column="29"/></operator><name pos:line="36" pos:column="26">word_end<pos:position pos:line="36" pos:column="34"/></name></name> <operator pos:line="36" pos:column="35">=<pos:position pos:line="36" pos:column="36"/></operator> <literal type="number" pos:line="36" pos:column="37">1<pos:position pos:line="36" pos:column="38"/></literal></expr>;<pos:position pos:line="36" pos:column="39"/></expr_stmt></block></else></if>
}<pos:position pos:line="37" pos:column="2"/></block></function></unit>
