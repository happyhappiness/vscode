<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_240_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">send_deflated_token<pos:position pos:line="2" pos:column="20"/></name><parameter_list pos:line="2" pos:column="20">(<parameter><decl><type><name pos:line="2" pos:column="21">int<pos:position pos:line="2" pos:column="24"/></name></type> <name pos:line="2" pos:column="25">f<pos:position pos:line="2" pos:column="26"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="28">int32<pos:position pos:line="2" pos:column="33"/></name></type> <name pos:line="2" pos:column="34">token<pos:position pos:line="2" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="2" pos:column="41">struct<pos:position pos:line="2" pos:column="47"/></name> <name pos:line="2" pos:column="48">map_struct<pos:position pos:line="2" pos:column="58"/></name></name> <modifier pos:line="2" pos:column="59">*<pos:position pos:line="2" pos:column="60"/></modifier></type><name pos:line="2" pos:column="60">buf<pos:position pos:line="2" pos:column="63"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="65">OFF_T<pos:position pos:line="2" pos:column="70"/></name></type> <name pos:line="2" pos:column="71">offset<pos:position pos:line="2" pos:column="77"/></name></decl></parameter>,
		    <parameter><decl><type><name pos:line="3" pos:column="21">int32<pos:position pos:line="3" pos:column="26"/></name></type> <name pos:line="3" pos:column="27">nb<pos:position pos:line="3" pos:column="29"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="31">int32<pos:position pos:line="3" pos:column="36"/></name></type> <name pos:line="3" pos:column="37">toklen<pos:position pos:line="3" pos:column="43"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="44"/></parameter_list>
<block pos:line="4" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int32<pos:position pos:line="5" pos:column="14"/></name></type> <name pos:line="5" pos:column="15">n<pos:position pos:line="5" pos:column="16"/></name></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="18">r<pos:position pos:line="5" pos:column="19"/></name></decl>;<pos:position pos:line="5" pos:column="20"/></decl_stmt>
	<decl_stmt><decl><specifier pos:line="6" pos:column="9">static<pos:position pos:line="6" pos:column="15"/></specifier> <type><name pos:line="6" pos:column="16">int<pos:position pos:line="6" pos:column="19"/></name></type> <name pos:line="6" pos:column="20">init_done<pos:position pos:line="6" pos:column="29"/></name></decl>, <decl><type ref="prev"/><name pos:line="6" pos:column="31">flush_pending<pos:position pos:line="6" pos:column="44"/></name></decl>;<pos:position pos:line="6" pos:column="45"/></decl_stmt>

	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><name pos:line="8" pos:column="13">last_token<pos:position pos:line="8" pos:column="23"/></name> <operator pos:line="8" pos:column="24">==<pos:position pos:line="8" pos:column="26"/></operator> <operator pos:line="8" pos:column="27">-<pos:position pos:line="8" pos:column="28"/></operator><literal type="number" pos:line="8" pos:column="28">1<pos:position pos:line="8" pos:column="29"/></literal></expr>)<pos:position pos:line="8" pos:column="30"/></condition><then pos:line="8" pos:column="30"> <block pos:line="8" pos:column="31">{
		<comment type="block" pos:line="9" pos:column="17">/* initialization */</comment>
		<if pos:line="10" pos:column="17">if <condition pos:line="10" pos:column="20">(<expr><operator pos:line="10" pos:column="21">!<pos:position pos:line="10" pos:column="22"/></operator><name pos:line="10" pos:column="22">init_done<pos:position pos:line="10" pos:column="31"/></name></expr>)<pos:position pos:line="10" pos:column="32"/></condition><then pos:line="10" pos:column="32"> <block pos:line="10" pos:column="33">{
			<expr_stmt><expr><name><name pos:line="11" pos:column="25">tx_strm<pos:position pos:line="11" pos:column="32"/></name><operator pos:line="11" pos:column="32">.<pos:position pos:line="11" pos:column="33"/></operator><name pos:line="11" pos:column="33">next_in<pos:position pos:line="11" pos:column="40"/></name></name> <operator pos:line="11" pos:column="41">=<pos:position pos:line="11" pos:column="42"/></operator> <name pos:line="11" pos:column="43">NULL<pos:position pos:line="11" pos:column="47"/></name></expr>;<pos:position pos:line="11" pos:column="48"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="12" pos:column="25">tx_strm<pos:position pos:line="12" pos:column="32"/></name><operator pos:line="12" pos:column="32">.<pos:position pos:line="12" pos:column="33"/></operator><name pos:line="12" pos:column="33">zalloc<pos:position pos:line="12" pos:column="39"/></name></name> <operator pos:line="12" pos:column="40">=<pos:position pos:line="12" pos:column="41"/></operator> <name pos:line="12" pos:column="42">NULL<pos:position pos:line="12" pos:column="46"/></name></expr>;<pos:position pos:line="12" pos:column="47"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="13" pos:column="25">tx_strm<pos:position pos:line="13" pos:column="32"/></name><operator pos:line="13" pos:column="32">.<pos:position pos:line="13" pos:column="33"/></operator><name pos:line="13" pos:column="33">zfree<pos:position pos:line="13" pos:column="38"/></name></name> <operator pos:line="13" pos:column="39">=<pos:position pos:line="13" pos:column="40"/></operator> <name pos:line="13" pos:column="41">NULL<pos:position pos:line="13" pos:column="45"/></name></expr>;<pos:position pos:line="13" pos:column="46"/></expr_stmt>
			<if pos:line="14" pos:column="25">if <condition pos:line="14" pos:column="28">(<expr><call><name pos:line="14" pos:column="29">deflateInit2<pos:position pos:line="14" pos:column="41"/></name><argument_list pos:line="14" pos:column="41">(<argument><expr><operator pos:line="14" pos:column="42">&amp;<pos:position pos:line="14" pos:column="47"/></operator><name pos:line="14" pos:column="43">tx_strm<pos:position pos:line="14" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="52">compression_level<pos:position pos:line="14" pos:column="69"/></name></expr></argument>,
					 <argument><expr><name pos:line="15" pos:column="42">Z_DEFLATED<pos:position pos:line="15" pos:column="52"/></name></expr></argument>, <argument><expr><operator pos:line="15" pos:column="54">-<pos:position pos:line="15" pos:column="55"/></operator><literal type="number" pos:line="15" pos:column="55">15<pos:position pos:line="15" pos:column="57"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="15" pos:column="59">8<pos:position pos:line="15" pos:column="60"/></literal></expr></argument>,
					 <argument><expr><name pos:line="16" pos:column="42">Z_DEFAULT_STRATEGY<pos:position pos:line="16" pos:column="60"/></name></expr></argument>)<pos:position pos:line="16" pos:column="61"/></argument_list></call> <operator pos:line="16" pos:column="62">!=<pos:position pos:line="16" pos:column="64"/></operator> <name pos:line="16" pos:column="65">Z_OK<pos:position pos:line="16" pos:column="69"/></name></expr>)<pos:position pos:line="16" pos:column="70"/></condition><then pos:line="16" pos:column="70"> <block pos:line="16" pos:column="71">{
				<expr_stmt><expr><call><name pos:line="17" pos:column="33">rprintf<pos:position pos:line="17" pos:column="40"/></name><argument_list pos:line="17" pos:column="40">(<argument><expr><name pos:line="17" pos:column="41">FERROR<pos:position pos:line="17" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="49">"compression init failed\n"<pos:position pos:line="17" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="78"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="18" pos:column="33">exit_cleanup<pos:position pos:line="18" pos:column="45"/></name><argument_list pos:line="18" pos:column="45">(<argument><expr><name pos:line="18" pos:column="46">RERR_PROTOCOL<pos:position pos:line="18" pos:column="59"/></name></expr></argument>)<pos:position pos:line="18" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="61"/></expr_stmt>
			}<pos:position pos:line="19" pos:column="26"/></block></then></if>
			<if pos:line="20" pos:column="25">if <condition pos:line="20" pos:column="28">(<expr><operator pos:line="20" pos:column="29">(<pos:position pos:line="20" pos:column="30"/></operator><name pos:line="20" pos:column="30">obuf<pos:position pos:line="20" pos:column="34"/></name> <operator pos:line="20" pos:column="35">=<pos:position pos:line="20" pos:column="36"/></operator> <call><name pos:line="20" pos:column="37">new_array<pos:position pos:line="20" pos:column="46"/></name><argument_list pos:line="20" pos:column="46">(<argument><expr><name pos:line="20" pos:column="47">char<pos:position pos:line="20" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="53">OBUF_SIZE<pos:position pos:line="20" pos:column="62"/></name></expr></argument>)<pos:position pos:line="20" pos:column="63"/></argument_list></call><operator pos:line="20" pos:column="63">)<pos:position pos:line="20" pos:column="64"/></operator> <operator pos:line="20" pos:column="65">==<pos:position pos:line="20" pos:column="67"/></operator> <name pos:line="20" pos:column="68">NULL<pos:position pos:line="20" pos:column="72"/></name></expr>)<pos:position pos:line="20" pos:column="73"/></condition><then pos:line="20" pos:column="73">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="21" pos:column="33">out_of_memory<pos:position pos:line="21" pos:column="46"/></name><argument_list pos:line="21" pos:column="46">(<argument><expr><literal type="string" pos:line="21" pos:column="47">"send_deflated_token"<pos:position pos:line="21" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="70"/></expr_stmt></block></then></if>
			<expr_stmt><expr><name pos:line="22" pos:column="25">init_done<pos:position pos:line="22" pos:column="34"/></name> <operator pos:line="22" pos:column="35">=<pos:position pos:line="22" pos:column="36"/></operator> <literal type="number" pos:line="22" pos:column="37">1<pos:position pos:line="22" pos:column="38"/></literal></expr>;<pos:position pos:line="22" pos:column="39"/></expr_stmt>
		}<pos:position pos:line="23" pos:column="18"/></block></then> <else pos:line="23" pos:column="19">else
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="24" pos:column="25">deflateReset<pos:position pos:line="24" pos:column="37"/></name><argument_list pos:line="24" pos:column="37">(<argument><expr><operator pos:line="24" pos:column="38">&amp;<pos:position pos:line="24" pos:column="43"/></operator><name pos:line="24" pos:column="39">tx_strm<pos:position pos:line="24" pos:column="46"/></name></expr></argument>)<pos:position pos:line="24" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="48"/></expr_stmt></block></else></if>
		<expr_stmt><expr><name pos:line="25" pos:column="17">last_run_end<pos:position pos:line="25" pos:column="29"/></name> <operator pos:line="25" pos:column="30">=<pos:position pos:line="25" pos:column="31"/></operator> <literal type="number" pos:line="25" pos:column="32">0<pos:position pos:line="25" pos:column="33"/></literal></expr>;<pos:position pos:line="25" pos:column="34"/></expr_stmt>
		<expr_stmt><expr><name pos:line="26" pos:column="17">run_start<pos:position pos:line="26" pos:column="26"/></name> <operator pos:line="26" pos:column="27">=<pos:position pos:line="26" pos:column="28"/></operator> <name pos:line="26" pos:column="29">token<pos:position pos:line="26" pos:column="34"/></name></expr>;<pos:position pos:line="26" pos:column="35"/></expr_stmt>
		<expr_stmt><expr><name pos:line="27" pos:column="17">flush_pending<pos:position pos:line="27" pos:column="30"/></name> <operator pos:line="27" pos:column="31">=<pos:position pos:line="27" pos:column="32"/></operator> <literal type="number" pos:line="27" pos:column="33">0<pos:position pos:line="27" pos:column="34"/></literal></expr>;<pos:position pos:line="27" pos:column="35"/></expr_stmt>
	}<pos:position pos:line="28" pos:column="10"/></block></then> <elseif pos:line="28" pos:column="11">else <if pos:line="28" pos:column="16">if <condition pos:line="28" pos:column="19">(<expr><name pos:line="28" pos:column="20">last_token<pos:position pos:line="28" pos:column="30"/></name> <operator pos:line="28" pos:column="31">==<pos:position pos:line="28" pos:column="33"/></operator> <operator pos:line="28" pos:column="34">-<pos:position pos:line="28" pos:column="35"/></operator><literal type="number" pos:line="28" pos:column="35">2<pos:position pos:line="28" pos:column="36"/></literal></expr>)<pos:position pos:line="28" pos:column="37"/></condition><then pos:line="28" pos:column="37"> <block pos:line="28" pos:column="38">{
		<expr_stmt><expr><name pos:line="29" pos:column="17">run_start<pos:position pos:line="29" pos:column="26"/></name> <operator pos:line="29" pos:column="27">=<pos:position pos:line="29" pos:column="28"/></operator> <name pos:line="29" pos:column="29">token<pos:position pos:line="29" pos:column="34"/></name></expr>;<pos:position pos:line="29" pos:column="35"/></expr_stmt>
	}<pos:position pos:line="30" pos:column="10"/></block></then></if></elseif> <elseif pos:line="30" pos:column="11">else <if pos:line="30" pos:column="16">if <condition pos:line="30" pos:column="19">(<expr><name pos:line="30" pos:column="20">nb<pos:position pos:line="30" pos:column="22"/></name> <operator pos:line="30" pos:column="23">!=<pos:position pos:line="30" pos:column="25"/></operator> <literal type="number" pos:line="30" pos:column="26">0<pos:position pos:line="30" pos:column="27"/></literal> <operator pos:line="30" pos:column="28">||<pos:position pos:line="30" pos:column="30"/></operator> <name pos:line="30" pos:column="31">token<pos:position pos:line="30" pos:column="36"/></name> <operator pos:line="30" pos:column="37">!=<pos:position pos:line="30" pos:column="39"/></operator> <name pos:line="30" pos:column="40">last_token<pos:position pos:line="30" pos:column="50"/></name> <operator pos:line="30" pos:column="51">+<pos:position pos:line="30" pos:column="52"/></operator> <literal type="number" pos:line="30" pos:column="53">1<pos:position pos:line="30" pos:column="54"/></literal>
		   <operator pos:line="31" pos:column="20">||<pos:position pos:line="31" pos:column="22"/></operator> <name pos:line="31" pos:column="23">token<pos:position pos:line="31" pos:column="28"/></name> <operator pos:line="31" pos:column="29">&gt;=<pos:position pos:line="31" pos:column="34"/></operator> <name pos:line="31" pos:column="32">run_start<pos:position pos:line="31" pos:column="41"/></name> <operator pos:line="31" pos:column="42">+<pos:position pos:line="31" pos:column="43"/></operator> <literal type="number" pos:line="31" pos:column="44">65536<pos:position pos:line="31" pos:column="49"/></literal></expr>)<pos:position pos:line="31" pos:column="50"/></condition><then pos:line="31" pos:column="50"> <block pos:line="31" pos:column="51">{
		<comment type="block" pos:line="32" pos:column="17">/* output previous run */</comment>
		<expr_stmt><expr><name pos:line="33" pos:column="17">r<pos:position pos:line="33" pos:column="18"/></name> <operator pos:line="33" pos:column="19">=<pos:position pos:line="33" pos:column="20"/></operator> <name pos:line="33" pos:column="21">run_start<pos:position pos:line="33" pos:column="30"/></name> <operator pos:line="33" pos:column="31">-<pos:position pos:line="33" pos:column="32"/></operator> <name pos:line="33" pos:column="33">last_run_end<pos:position pos:line="33" pos:column="45"/></name></expr>;<pos:position pos:line="33" pos:column="46"/></expr_stmt>
		<expr_stmt><expr><name pos:line="34" pos:column="17">n<pos:position pos:line="34" pos:column="18"/></name> <operator pos:line="34" pos:column="19">=<pos:position pos:line="34" pos:column="20"/></operator> <name pos:line="34" pos:column="21">last_token<pos:position pos:line="34" pos:column="31"/></name> <operator pos:line="34" pos:column="32">-<pos:position pos:line="34" pos:column="33"/></operator> <name pos:line="34" pos:column="34">run_start<pos:position pos:line="34" pos:column="43"/></name></expr>;<pos:position pos:line="34" pos:column="44"/></expr_stmt>
		<if pos:line="35" pos:column="17">if <condition pos:line="35" pos:column="20">(<expr><name pos:line="35" pos:column="21">r<pos:position pos:line="35" pos:column="22"/></name> <operator pos:line="35" pos:column="23">&gt;=<pos:position pos:line="35" pos:column="28"/></operator> <literal type="number" pos:line="35" pos:column="26">0<pos:position pos:line="35" pos:column="27"/></literal> <operator pos:line="35" pos:column="28">&amp;&amp;<pos:position pos:line="35" pos:column="38"/></operator> <name pos:line="35" pos:column="31">r<pos:position pos:line="35" pos:column="32"/></name> <operator pos:line="35" pos:column="33">&lt;=<pos:position pos:line="35" pos:column="38"/></operator> <literal type="number" pos:line="35" pos:column="36">63<pos:position pos:line="35" pos:column="38"/></literal></expr>)<pos:position pos:line="35" pos:column="39"/></condition><then pos:line="35" pos:column="39"> <block pos:line="35" pos:column="40">{
			<expr_stmt><expr><call><name pos:line="36" pos:column="25">write_byte<pos:position pos:line="36" pos:column="35"/></name><argument_list pos:line="36" pos:column="35">(<argument><expr><name pos:line="36" pos:column="36">f<pos:position pos:line="36" pos:column="37"/></name></expr></argument>, <argument><expr><operator pos:line="36" pos:column="39">(<pos:position pos:line="36" pos:column="40"/></operator><ternary><condition><expr><name pos:line="36" pos:column="40">n<pos:position pos:line="36" pos:column="41"/></name><operator pos:line="36" pos:column="41">==<pos:position pos:line="36" pos:column="43"/></operator><literal type="number" pos:line="36" pos:column="43">0<pos:position pos:line="36" pos:column="44"/></literal></expr>?<pos:position pos:line="36" pos:column="45"/></condition><then pos:line="36" pos:column="45"> <expr><name pos:line="36" pos:column="46">TOKEN_REL<pos:position pos:line="36" pos:column="55"/></name></expr></then><else pos:line="36" pos:column="55">: <expr><name pos:line="36" pos:column="57">TOKENRUN_REL<pos:position pos:line="36" pos:column="69"/></name></expr></else></ternary><operator pos:line="36" pos:column="69">)<pos:position pos:line="36" pos:column="70"/></operator> <operator pos:line="36" pos:column="71">+<pos:position pos:line="36" pos:column="72"/></operator> <name pos:line="36" pos:column="73">r<pos:position pos:line="36" pos:column="74"/></name></expr></argument>)<pos:position pos:line="36" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="76"/></expr_stmt>
		}<pos:position pos:line="37" pos:column="18"/></block></then> <else pos:line="37" pos:column="19">else <block pos:line="37" pos:column="24">{
			<expr_stmt><expr><call><name pos:line="38" pos:column="25">write_byte<pos:position pos:line="38" pos:column="35"/></name><argument_list pos:line="38" pos:column="35">(<argument><expr><name pos:line="38" pos:column="36">f<pos:position pos:line="38" pos:column="37"/></name></expr></argument>, <argument><expr><operator pos:line="38" pos:column="39">(<pos:position pos:line="38" pos:column="40"/></operator><ternary><condition><expr><name pos:line="38" pos:column="40">n<pos:position pos:line="38" pos:column="41"/></name><operator pos:line="38" pos:column="41">==<pos:position pos:line="38" pos:column="43"/></operator><literal type="number" pos:line="38" pos:column="43">0<pos:position pos:line="38" pos:column="44"/></literal></expr>?<pos:position pos:line="38" pos:column="45"/></condition><then pos:line="38" pos:column="45"> <expr><name pos:line="38" pos:column="46">TOKEN_LONG<pos:position pos:line="38" pos:column="56"/></name></expr></then><else pos:line="38" pos:column="56">: <expr><name pos:line="38" pos:column="58">TOKENRUN_LONG<pos:position pos:line="38" pos:column="71"/></name></expr></else></ternary><operator pos:line="38" pos:column="71">)<pos:position pos:line="38" pos:column="72"/></operator></expr></argument>)<pos:position pos:line="38" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="74"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="39" pos:column="25">write_int<pos:position pos:line="39" pos:column="34"/></name><argument_list pos:line="39" pos:column="34">(<argument><expr><name pos:line="39" pos:column="35">f<pos:position pos:line="39" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="38">run_start<pos:position pos:line="39" pos:column="47"/></name></expr></argument>)<pos:position pos:line="39" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="49"/></expr_stmt>
		}<pos:position pos:line="40" pos:column="18"/></block></else></if>
		<if pos:line="41" pos:column="17">if <condition pos:line="41" pos:column="20">(<expr><name pos:line="41" pos:column="21">n<pos:position pos:line="41" pos:column="22"/></name> <operator pos:line="41" pos:column="23">!=<pos:position pos:line="41" pos:column="25"/></operator> <literal type="number" pos:line="41" pos:column="26">0<pos:position pos:line="41" pos:column="27"/></literal></expr>)<pos:position pos:line="41" pos:column="28"/></condition><then pos:line="41" pos:column="28"> <block pos:line="41" pos:column="29">{
			<expr_stmt><expr><call><name pos:line="42" pos:column="25">write_byte<pos:position pos:line="42" pos:column="35"/></name><argument_list pos:line="42" pos:column="35">(<argument><expr><name pos:line="42" pos:column="36">f<pos:position pos:line="42" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="39">n<pos:position pos:line="42" pos:column="40"/></name></expr></argument>)<pos:position pos:line="42" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="42"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="43" pos:column="25">write_byte<pos:position pos:line="43" pos:column="35"/></name><argument_list pos:line="43" pos:column="35">(<argument><expr><name pos:line="43" pos:column="36">f<pos:position pos:line="43" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="39">n<pos:position pos:line="43" pos:column="40"/></name> <operator pos:line="43" pos:column="41">&gt;&gt;<pos:position pos:line="43" pos:column="46"/></operator> <literal type="number" pos:line="43" pos:column="44">8<pos:position pos:line="43" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="47"/></expr_stmt>
		}<pos:position pos:line="44" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name pos:line="45" pos:column="17">last_run_end<pos:position pos:line="45" pos:column="29"/></name> <operator pos:line="45" pos:column="30">=<pos:position pos:line="45" pos:column="31"/></operator> <name pos:line="45" pos:column="32">last_token<pos:position pos:line="45" pos:column="42"/></name></expr>;<pos:position pos:line="45" pos:column="43"/></expr_stmt>
		<expr_stmt><expr><name pos:line="46" pos:column="17">run_start<pos:position pos:line="46" pos:column="26"/></name> <operator pos:line="46" pos:column="27">=<pos:position pos:line="46" pos:column="28"/></operator> <name pos:line="46" pos:column="29">token<pos:position pos:line="46" pos:column="34"/></name></expr>;<pos:position pos:line="46" pos:column="35"/></expr_stmt>
	}<pos:position pos:line="47" pos:column="10"/></block></then></if></elseif></if>

	<expr_stmt><expr><name pos:line="49" pos:column="9">last_token<pos:position pos:line="49" pos:column="19"/></name> <operator pos:line="49" pos:column="20">=<pos:position pos:line="49" pos:column="21"/></operator> <name pos:line="49" pos:column="22">token<pos:position pos:line="49" pos:column="27"/></name></expr>;<pos:position pos:line="49" pos:column="28"/></expr_stmt>

	<if pos:line="51" pos:column="9">if <condition pos:line="51" pos:column="12">(<expr><name pos:line="51" pos:column="13">nb<pos:position pos:line="51" pos:column="15"/></name> <operator pos:line="51" pos:column="16">!=<pos:position pos:line="51" pos:column="18"/></operator> <literal type="number" pos:line="51" pos:column="19">0<pos:position pos:line="51" pos:column="20"/></literal> <operator pos:line="51" pos:column="21">||<pos:position pos:line="51" pos:column="23"/></operator> <name pos:line="51" pos:column="24">flush_pending<pos:position pos:line="51" pos:column="37"/></name></expr>)<pos:position pos:line="51" pos:column="38"/></condition><then pos:line="51" pos:column="38"> <block pos:line="51" pos:column="39">{
		<comment type="block" pos:line="52" pos:column="17">/* deflate the data starting at offset */</comment>
		<decl_stmt><decl><type><name pos:line="53" pos:column="17">int<pos:position pos:line="53" pos:column="20"/></name></type> <name pos:line="53" pos:column="21">flush<pos:position pos:line="53" pos:column="26"/></name> <init pos:line="53" pos:column="27">= <expr><name pos:line="53" pos:column="29">Z_NO_FLUSH<pos:position pos:line="53" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="53" pos:column="40"/></decl_stmt>
		<expr_stmt><expr><name><name pos:line="54" pos:column="17">tx_strm<pos:position pos:line="54" pos:column="24"/></name><operator pos:line="54" pos:column="24">.<pos:position pos:line="54" pos:column="25"/></operator><name pos:line="54" pos:column="25">avail_in<pos:position pos:line="54" pos:column="33"/></name></name> <operator pos:line="54" pos:column="34">=<pos:position pos:line="54" pos:column="35"/></operator> <literal type="number" pos:line="54" pos:column="36">0<pos:position pos:line="54" pos:column="37"/></literal></expr>;<pos:position pos:line="54" pos:column="38"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="55" pos:column="17">tx_strm<pos:position pos:line="55" pos:column="24"/></name><operator pos:line="55" pos:column="24">.<pos:position pos:line="55" pos:column="25"/></operator><name pos:line="55" pos:column="25">avail_out<pos:position pos:line="55" pos:column="34"/></name></name> <operator pos:line="55" pos:column="35">=<pos:position pos:line="55" pos:column="36"/></operator> <literal type="number" pos:line="55" pos:column="37">0<pos:position pos:line="55" pos:column="38"/></literal></expr>;<pos:position pos:line="55" pos:column="39"/></expr_stmt>
		<do pos:line="56" pos:column="17">do <block pos:line="56" pos:column="20">{
			<if pos:line="57" pos:column="25">if <condition pos:line="57" pos:column="28">(<expr><name><name pos:line="57" pos:column="29">tx_strm<pos:position pos:line="57" pos:column="36"/></name><operator pos:line="57" pos:column="36">.<pos:position pos:line="57" pos:column="37"/></operator><name pos:line="57" pos:column="37">avail_in<pos:position pos:line="57" pos:column="45"/></name></name> <operator pos:line="57" pos:column="46">==<pos:position pos:line="57" pos:column="48"/></operator> <literal type="number" pos:line="57" pos:column="49">0<pos:position pos:line="57" pos:column="50"/></literal> <operator pos:line="57" pos:column="51">&amp;&amp;<pos:position pos:line="57" pos:column="61"/></operator> <name pos:line="57" pos:column="54">nb<pos:position pos:line="57" pos:column="56"/></name> <operator pos:line="57" pos:column="57">!=<pos:position pos:line="57" pos:column="59"/></operator> <literal type="number" pos:line="57" pos:column="60">0<pos:position pos:line="57" pos:column="61"/></literal></expr>)<pos:position pos:line="57" pos:column="62"/></condition><then pos:line="57" pos:column="62"> <block pos:line="57" pos:column="63">{
				<comment type="block" pos:line="58" pos:column="33">/* give it some more input */</comment>
				<expr_stmt><expr><name pos:line="59" pos:column="33">n<pos:position pos:line="59" pos:column="34"/></name> <operator pos:line="59" pos:column="35">=<pos:position pos:line="59" pos:column="36"/></operator> <call><name pos:line="59" pos:column="37">MIN<pos:position pos:line="59" pos:column="40"/></name><argument_list pos:line="59" pos:column="40">(<argument><expr><name pos:line="59" pos:column="41">nb<pos:position pos:line="59" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="45">CHUNK_SIZE<pos:position pos:line="59" pos:column="55"/></name></expr></argument>)<pos:position pos:line="59" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="57"/></expr_stmt>
				<expr_stmt><expr><name><name pos:line="60" pos:column="33">tx_strm<pos:position pos:line="60" pos:column="40"/></name><operator pos:line="60" pos:column="40">.<pos:position pos:line="60" pos:column="41"/></operator><name pos:line="60" pos:column="41">next_in<pos:position pos:line="60" pos:column="48"/></name></name> <operator pos:line="60" pos:column="49">=<pos:position pos:line="60" pos:column="50"/></operator> <operator pos:line="60" pos:column="51">(<pos:position pos:line="60" pos:column="52"/></operator><name pos:line="60" pos:column="52">Bytef<pos:position pos:line="60" pos:column="57"/></name> <operator pos:line="60" pos:column="58">*<pos:position pos:line="60" pos:column="59"/></operator><operator pos:line="60" pos:column="59">)<pos:position pos:line="60" pos:column="60"/></operator>
					<call><name pos:line="61" pos:column="41">map_ptr<pos:position pos:line="61" pos:column="48"/></name><argument_list pos:line="61" pos:column="48">(<argument><expr><name pos:line="61" pos:column="49">buf<pos:position pos:line="61" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="54">offset<pos:position pos:line="61" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="62">n<pos:position pos:line="61" pos:column="63"/></name></expr></argument>)<pos:position pos:line="61" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="65"/></expr_stmt>
				<expr_stmt><expr><name><name pos:line="62" pos:column="33">tx_strm<pos:position pos:line="62" pos:column="40"/></name><operator pos:line="62" pos:column="40">.<pos:position pos:line="62" pos:column="41"/></operator><name pos:line="62" pos:column="41">avail_in<pos:position pos:line="62" pos:column="49"/></name></name> <operator pos:line="62" pos:column="50">=<pos:position pos:line="62" pos:column="51"/></operator> <name pos:line="62" pos:column="52">n<pos:position pos:line="62" pos:column="53"/></name></expr>;<pos:position pos:line="62" pos:column="54"/></expr_stmt>
				<expr_stmt><expr><name pos:line="63" pos:column="33">nb<pos:position pos:line="63" pos:column="35"/></name> <operator pos:line="63" pos:column="36">-=<pos:position pos:line="63" pos:column="38"/></operator> <name pos:line="63" pos:column="39">n<pos:position pos:line="63" pos:column="40"/></name></expr>;<pos:position pos:line="63" pos:column="41"/></expr_stmt>
				<expr_stmt><expr><name pos:line="64" pos:column="33">offset<pos:position pos:line="64" pos:column="39"/></name> <operator pos:line="64" pos:column="40">+=<pos:position pos:line="64" pos:column="42"/></operator> <name pos:line="64" pos:column="43">n<pos:position pos:line="64" pos:column="44"/></name></expr>;<pos:position pos:line="64" pos:column="45"/></expr_stmt>
			}<pos:position pos:line="65" pos:column="26"/></block></then></if>
			<if pos:line="66" pos:column="25">if <condition pos:line="66" pos:column="28">(<expr><name><name pos:line="66" pos:column="29">tx_strm<pos:position pos:line="66" pos:column="36"/></name><operator pos:line="66" pos:column="36">.<pos:position pos:line="66" pos:column="37"/></operator><name pos:line="66" pos:column="37">avail_out<pos:position pos:line="66" pos:column="46"/></name></name> <operator pos:line="66" pos:column="47">==<pos:position pos:line="66" pos:column="49"/></operator> <literal type="number" pos:line="66" pos:column="50">0<pos:position pos:line="66" pos:column="51"/></literal></expr>)<pos:position pos:line="66" pos:column="52"/></condition><then pos:line="66" pos:column="52"> <block pos:line="66" pos:column="53">{
				<expr_stmt><expr><name><name pos:line="67" pos:column="33">tx_strm<pos:position pos:line="67" pos:column="40"/></name><operator pos:line="67" pos:column="40">.<pos:position pos:line="67" pos:column="41"/></operator><name pos:line="67" pos:column="41">next_out<pos:position pos:line="67" pos:column="49"/></name></name> <operator pos:line="67" pos:column="50">=<pos:position pos:line="67" pos:column="51"/></operator> <operator pos:line="67" pos:column="52">(<pos:position pos:line="67" pos:column="53"/></operator><name pos:line="67" pos:column="53">Bytef<pos:position pos:line="67" pos:column="58"/></name> <operator pos:line="67" pos:column="59">*<pos:position pos:line="67" pos:column="60"/></operator><operator pos:line="67" pos:column="60">)<pos:position pos:line="67" pos:column="61"/></operator><operator pos:line="67" pos:column="61">(<pos:position pos:line="67" pos:column="62"/></operator><name pos:line="67" pos:column="62">obuf<pos:position pos:line="67" pos:column="66"/></name> <operator pos:line="67" pos:column="67">+<pos:position pos:line="67" pos:column="68"/></operator> <literal type="number" pos:line="67" pos:column="69">2<pos:position pos:line="67" pos:column="70"/></literal><operator pos:line="67" pos:column="70">)<pos:position pos:line="67" pos:column="71"/></operator></expr>;<pos:position pos:line="67" pos:column="72"/></expr_stmt>
				<expr_stmt><expr><name><name pos:line="68" pos:column="33">tx_strm<pos:position pos:line="68" pos:column="40"/></name><operator pos:line="68" pos:column="40">.<pos:position pos:line="68" pos:column="41"/></operator><name pos:line="68" pos:column="41">avail_out<pos:position pos:line="68" pos:column="50"/></name></name> <operator pos:line="68" pos:column="51">=<pos:position pos:line="68" pos:column="52"/></operator> <name pos:line="68" pos:column="53">MAX_DATA_COUNT<pos:position pos:line="68" pos:column="67"/></name></expr>;<pos:position pos:line="68" pos:column="68"/></expr_stmt>
				<if pos:line="69" pos:column="33">if <condition pos:line="69" pos:column="36">(<expr><name pos:line="69" pos:column="37">flush<pos:position pos:line="69" pos:column="42"/></name> <operator pos:line="69" pos:column="43">!=<pos:position pos:line="69" pos:column="45"/></operator> <name pos:line="69" pos:column="46">Z_NO_FLUSH<pos:position pos:line="69" pos:column="56"/></name></expr>)<pos:position pos:line="69" pos:column="57"/></condition><then pos:line="69" pos:column="57"> <block pos:line="69" pos:column="58">{
					<comment type="block" pos:line="70" pos:column="41">/*
					 * We left the last 4 bytes in the
					 * buffer, in case they are the
					 * last 4.  Move them to the front.
					 */</comment>
					<expr_stmt><expr><call><name pos:line="75" pos:column="41">memcpy<pos:position pos:line="75" pos:column="47"/></name><argument_list pos:line="75" pos:column="47">(<argument><expr><name><name pos:line="75" pos:column="48">tx_strm<pos:position pos:line="75" pos:column="55"/></name><operator pos:line="75" pos:column="55">.<pos:position pos:line="75" pos:column="56"/></operator><name pos:line="75" pos:column="56">next_out<pos:position pos:line="75" pos:column="64"/></name></name></expr></argument>,
					       <argument><expr><name pos:line="76" pos:column="48">obuf<pos:position pos:line="76" pos:column="52"/></name><operator pos:line="76" pos:column="52">+<pos:position pos:line="76" pos:column="53"/></operator><name pos:line="76" pos:column="53">MAX_DATA_COUNT<pos:position pos:line="76" pos:column="67"/></name><operator pos:line="76" pos:column="67">-<pos:position pos:line="76" pos:column="68"/></operator><literal type="number" pos:line="76" pos:column="68">2<pos:position pos:line="76" pos:column="69"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="76" pos:column="71">4<pos:position pos:line="76" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="76" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="74"/></expr_stmt>
					<expr_stmt><expr><name><name pos:line="77" pos:column="41">tx_strm<pos:position pos:line="77" pos:column="48"/></name><operator pos:line="77" pos:column="48">.<pos:position pos:line="77" pos:column="49"/></operator><name pos:line="77" pos:column="49">next_out<pos:position pos:line="77" pos:column="57"/></name></name> <operator pos:line="77" pos:column="58">+=<pos:position pos:line="77" pos:column="60"/></operator> <literal type="number" pos:line="77" pos:column="61">4<pos:position pos:line="77" pos:column="62"/></literal></expr>;<pos:position pos:line="77" pos:column="63"/></expr_stmt>
					<expr_stmt><expr><name><name pos:line="78" pos:column="41">tx_strm<pos:position pos:line="78" pos:column="48"/></name><operator pos:line="78" pos:column="48">.<pos:position pos:line="78" pos:column="49"/></operator><name pos:line="78" pos:column="49">avail_out<pos:position pos:line="78" pos:column="58"/></name></name> <operator pos:line="78" pos:column="59">-=<pos:position pos:line="78" pos:column="61"/></operator> <literal type="number" pos:line="78" pos:column="62">4<pos:position pos:line="78" pos:column="63"/></literal></expr>;<pos:position pos:line="78" pos:column="64"/></expr_stmt>
				}<pos:position pos:line="79" pos:column="34"/></block></then></if>
			}<pos:position pos:line="80" pos:column="26"/></block></then></if>
			<if pos:line="81" pos:column="25">if <condition pos:line="81" pos:column="28">(<expr><name pos:line="81" pos:column="29">nb<pos:position pos:line="81" pos:column="31"/></name> <operator pos:line="81" pos:column="32">==<pos:position pos:line="81" pos:column="34"/></operator> <literal type="number" pos:line="81" pos:column="35">0<pos:position pos:line="81" pos:column="36"/></literal> <operator pos:line="81" pos:column="37">&amp;&amp;<pos:position pos:line="81" pos:column="47"/></operator> <name pos:line="81" pos:column="40">token<pos:position pos:line="81" pos:column="45"/></name> <operator pos:line="81" pos:column="46">!=<pos:position pos:line="81" pos:column="48"/></operator> <operator pos:line="81" pos:column="49">-<pos:position pos:line="81" pos:column="50"/></operator><literal type="number" pos:line="81" pos:column="50">2<pos:position pos:line="81" pos:column="51"/></literal></expr>)<pos:position pos:line="81" pos:column="52"/></condition><then pos:line="81" pos:column="52">
				<block type="pseudo"><expr_stmt><expr><name pos:line="82" pos:column="33">flush<pos:position pos:line="82" pos:column="38"/></name> <operator pos:line="82" pos:column="39">=<pos:position pos:line="82" pos:column="40"/></operator> <name pos:line="82" pos:column="41">Z_SYNC_FLUSH<pos:position pos:line="82" pos:column="53"/></name></expr>;<pos:position pos:line="82" pos:column="54"/></expr_stmt></block></then></if>
			<expr_stmt><expr><name pos:line="83" pos:column="25">r<pos:position pos:line="83" pos:column="26"/></name> <operator pos:line="83" pos:column="27">=<pos:position pos:line="83" pos:column="28"/></operator> <call><name pos:line="83" pos:column="29">deflate<pos:position pos:line="83" pos:column="36"/></name><argument_list pos:line="83" pos:column="36">(<argument><expr><operator pos:line="83" pos:column="37">&amp;<pos:position pos:line="83" pos:column="42"/></operator><name pos:line="83" pos:column="38">tx_strm<pos:position pos:line="83" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="83" pos:column="47">flush<pos:position pos:line="83" pos:column="52"/></name></expr></argument>)<pos:position pos:line="83" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="54"/></expr_stmt>
			<if pos:line="84" pos:column="25">if <condition pos:line="84" pos:column="28">(<expr><name pos:line="84" pos:column="29">r<pos:position pos:line="84" pos:column="30"/></name> <operator pos:line="84" pos:column="31">!=<pos:position pos:line="84" pos:column="33"/></operator> <name pos:line="84" pos:column="34">Z_OK<pos:position pos:line="84" pos:column="38"/></name></expr>)<pos:position pos:line="84" pos:column="39"/></condition><then pos:line="84" pos:column="39"> <block pos:line="84" pos:column="40">{
				<expr_stmt><expr><call><name pos:line="85" pos:column="33">rprintf<pos:position pos:line="85" pos:column="40"/></name><argument_list pos:line="85" pos:column="40">(<argument><expr><name pos:line="85" pos:column="41">FERROR<pos:position pos:line="85" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="85" pos:column="49">"deflate returned %d\n"<pos:position pos:line="85" pos:column="72"/></literal></expr></argument>, <argument><expr><name pos:line="85" pos:column="74">r<pos:position pos:line="85" pos:column="75"/></name></expr></argument>)<pos:position pos:line="85" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="77"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="86" pos:column="33">exit_cleanup<pos:position pos:line="86" pos:column="45"/></name><argument_list pos:line="86" pos:column="45">(<argument><expr><name pos:line="86" pos:column="46">RERR_STREAMIO<pos:position pos:line="86" pos:column="59"/></name></expr></argument>)<pos:position pos:line="86" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="61"/></expr_stmt>
			}<pos:position pos:line="87" pos:column="26"/></block></then></if>
			<if pos:line="88" pos:column="25">if <condition pos:line="88" pos:column="28">(<expr><name pos:line="88" pos:column="29">nb<pos:position pos:line="88" pos:column="31"/></name> <operator pos:line="88" pos:column="32">==<pos:position pos:line="88" pos:column="34"/></operator> <literal type="number" pos:line="88" pos:column="35">0<pos:position pos:line="88" pos:column="36"/></literal> <operator pos:line="88" pos:column="37">||<pos:position pos:line="88" pos:column="39"/></operator> <name><name pos:line="88" pos:column="40">tx_strm<pos:position pos:line="88" pos:column="47"/></name><operator pos:line="88" pos:column="47">.<pos:position pos:line="88" pos:column="48"/></operator><name pos:line="88" pos:column="48">avail_out<pos:position pos:line="88" pos:column="57"/></name></name> <operator pos:line="88" pos:column="58">==<pos:position pos:line="88" pos:column="60"/></operator> <literal type="number" pos:line="88" pos:column="61">0<pos:position pos:line="88" pos:column="62"/></literal></expr>)<pos:position pos:line="88" pos:column="63"/></condition><then pos:line="88" pos:column="63"> <block pos:line="88" pos:column="64">{
				<expr_stmt><expr><name pos:line="89" pos:column="33">n<pos:position pos:line="89" pos:column="34"/></name> <operator pos:line="89" pos:column="35">=<pos:position pos:line="89" pos:column="36"/></operator> <name pos:line="89" pos:column="37">MAX_DATA_COUNT<pos:position pos:line="89" pos:column="51"/></name> <operator pos:line="89" pos:column="52">-<pos:position pos:line="89" pos:column="53"/></operator> <name><name pos:line="89" pos:column="54">tx_strm<pos:position pos:line="89" pos:column="61"/></name><operator pos:line="89" pos:column="61">.<pos:position pos:line="89" pos:column="62"/></operator><name pos:line="89" pos:column="62">avail_out<pos:position pos:line="89" pos:column="71"/></name></name></expr>;<pos:position pos:line="89" pos:column="72"/></expr_stmt>
				<if pos:line="90" pos:column="33">if <condition pos:line="90" pos:column="36">(<expr><name pos:line="90" pos:column="37">flush<pos:position pos:line="90" pos:column="42"/></name> <operator pos:line="90" pos:column="43">!=<pos:position pos:line="90" pos:column="45"/></operator> <name pos:line="90" pos:column="46">Z_NO_FLUSH<pos:position pos:line="90" pos:column="56"/></name></expr>)<pos:position pos:line="90" pos:column="57"/></condition><then pos:line="90" pos:column="57"> <block pos:line="90" pos:column="58">{
					<comment type="block" pos:line="91" pos:column="41">/*
					 * We have to trim off the last 4
					 * bytes of output when flushing
					 * (they are just 0, 0, ff, ff).
					 */</comment>
					<expr_stmt><expr><name pos:line="96" pos:column="41">n<pos:position pos:line="96" pos:column="42"/></name> <operator pos:line="96" pos:column="43">-=<pos:position pos:line="96" pos:column="45"/></operator> <literal type="number" pos:line="96" pos:column="46">4<pos:position pos:line="96" pos:column="47"/></literal></expr>;<pos:position pos:line="96" pos:column="48"/></expr_stmt>
				}<pos:position pos:line="97" pos:column="34"/></block></then></if>
				<if pos:line="98" pos:column="33">if <condition pos:line="98" pos:column="36">(<expr><name pos:line="98" pos:column="37">n<pos:position pos:line="98" pos:column="38"/></name> <operator pos:line="98" pos:column="39">&gt;<pos:position pos:line="98" pos:column="43"/></operator> <literal type="number" pos:line="98" pos:column="41">0<pos:position pos:line="98" pos:column="42"/></literal></expr>)<pos:position pos:line="98" pos:column="43"/></condition><then pos:line="98" pos:column="43"> <block pos:line="98" pos:column="44">{
					<expr_stmt><expr><name><name pos:line="99" pos:column="41">obuf<pos:position pos:line="99" pos:column="45"/></name><index pos:line="99" pos:column="45">[<expr><literal type="number" pos:line="99" pos:column="46">0<pos:position pos:line="99" pos:column="47"/></literal></expr>]<pos:position pos:line="99" pos:column="48"/></index></name> <operator pos:line="99" pos:column="49">=<pos:position pos:line="99" pos:column="50"/></operator> <name pos:line="99" pos:column="51">DEFLATED_DATA<pos:position pos:line="99" pos:column="64"/></name> <operator pos:line="99" pos:column="65">+<pos:position pos:line="99" pos:column="66"/></operator> <operator pos:line="99" pos:column="67">(<pos:position pos:line="99" pos:column="68"/></operator><name pos:line="99" pos:column="68">n<pos:position pos:line="99" pos:column="69"/></name> <operator pos:line="99" pos:column="70">&gt;&gt;<pos:position pos:line="99" pos:column="75"/></operator> <literal type="number" pos:line="99" pos:column="73">8<pos:position pos:line="99" pos:column="74"/></literal><operator pos:line="99" pos:column="74">)<pos:position pos:line="99" pos:column="75"/></operator></expr>;<pos:position pos:line="99" pos:column="76"/></expr_stmt>
					<expr_stmt><expr><name><name pos:line="100" pos:column="41">obuf<pos:position pos:line="100" pos:column="45"/></name><index pos:line="100" pos:column="45">[<expr><literal type="number" pos:line="100" pos:column="46">1<pos:position pos:line="100" pos:column="47"/></literal></expr>]<pos:position pos:line="100" pos:column="48"/></index></name> <operator pos:line="100" pos:column="49">=<pos:position pos:line="100" pos:column="50"/></operator> <name pos:line="100" pos:column="51">n<pos:position pos:line="100" pos:column="52"/></name></expr>;<pos:position pos:line="100" pos:column="53"/></expr_stmt>
					<expr_stmt><expr><call><name pos:line="101" pos:column="41">write_buf<pos:position pos:line="101" pos:column="50"/></name><argument_list pos:line="101" pos:column="50">(<argument><expr><name pos:line="101" pos:column="51">f<pos:position pos:line="101" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="101" pos:column="54">obuf<pos:position pos:line="101" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="101" pos:column="60">n<pos:position pos:line="101" pos:column="61"/></name><operator pos:line="101" pos:column="61">+<pos:position pos:line="101" pos:column="62"/></operator><literal type="number" pos:line="101" pos:column="62">2<pos:position pos:line="101" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="101" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="65"/></expr_stmt>
				}<pos:position pos:line="102" pos:column="34"/></block></then></if>
			}<pos:position pos:line="103" pos:column="26"/></block></then></if>
		}<pos:position pos:line="104" pos:column="18"/></block> while <condition pos:line="104" pos:column="25">(<expr><name pos:line="104" pos:column="26">nb<pos:position pos:line="104" pos:column="28"/></name> <operator pos:line="104" pos:column="29">!=<pos:position pos:line="104" pos:column="31"/></operator> <literal type="number" pos:line="104" pos:column="32">0<pos:position pos:line="104" pos:column="33"/></literal> <operator pos:line="104" pos:column="34">||<pos:position pos:line="104" pos:column="36"/></operator> <name><name pos:line="104" pos:column="37">tx_strm<pos:position pos:line="104" pos:column="44"/></name><operator pos:line="104" pos:column="44">.<pos:position pos:line="104" pos:column="45"/></operator><name pos:line="104" pos:column="45">avail_out<pos:position pos:line="104" pos:column="54"/></name></name> <operator pos:line="104" pos:column="55">==<pos:position pos:line="104" pos:column="57"/></operator> <literal type="number" pos:line="104" pos:column="58">0<pos:position pos:line="104" pos:column="59"/></literal></expr>)<pos:position pos:line="104" pos:column="60"/></condition>;<pos:position pos:line="104" pos:column="61"/></do>
		<expr_stmt><expr><name pos:line="105" pos:column="17">flush_pending<pos:position pos:line="105" pos:column="30"/></name> <operator pos:line="105" pos:column="31">=<pos:position pos:line="105" pos:column="32"/></operator> <name pos:line="105" pos:column="33">token<pos:position pos:line="105" pos:column="38"/></name> <operator pos:line="105" pos:column="39">==<pos:position pos:line="105" pos:column="41"/></operator> <operator pos:line="105" pos:column="42">-<pos:position pos:line="105" pos:column="43"/></operator><literal type="number" pos:line="105" pos:column="43">2<pos:position pos:line="105" pos:column="44"/></literal></expr>;<pos:position pos:line="105" pos:column="45"/></expr_stmt>
	}<pos:position pos:line="106" pos:column="10"/></block></then></if>

	<if pos:line="108" pos:column="9">if <condition pos:line="108" pos:column="12">(<expr><name pos:line="108" pos:column="13">token<pos:position pos:line="108" pos:column="18"/></name> <operator pos:line="108" pos:column="19">==<pos:position pos:line="108" pos:column="21"/></operator> <operator pos:line="108" pos:column="22">-<pos:position pos:line="108" pos:column="23"/></operator><literal type="number" pos:line="108" pos:column="23">1<pos:position pos:line="108" pos:column="24"/></literal></expr>)<pos:position pos:line="108" pos:column="25"/></condition><then pos:line="108" pos:column="25"> <block pos:line="108" pos:column="26">{
		<comment type="block" pos:line="109" pos:column="17">/* end of file - clean up */</comment>
		<expr_stmt><expr><call><name pos:line="110" pos:column="17">write_byte<pos:position pos:line="110" pos:column="27"/></name><argument_list pos:line="110" pos:column="27">(<argument><expr><name pos:line="110" pos:column="28">f<pos:position pos:line="110" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="110" pos:column="31">END_FLAG<pos:position pos:line="110" pos:column="39"/></name></expr></argument>)<pos:position pos:line="110" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="110" pos:column="41"/></expr_stmt>
	}<pos:position pos:line="111" pos:column="10"/></block></then> <elseif pos:line="111" pos:column="11">else <if pos:line="111" pos:column="16">if <condition pos:line="111" pos:column="19">(<expr><name pos:line="111" pos:column="20">token<pos:position pos:line="111" pos:column="25"/></name> <operator pos:line="111" pos:column="26">!=<pos:position pos:line="111" pos:column="28"/></operator> <operator pos:line="111" pos:column="29">-<pos:position pos:line="111" pos:column="30"/></operator><literal type="number" pos:line="111" pos:column="30">2<pos:position pos:line="111" pos:column="31"/></literal> <operator pos:line="111" pos:column="32">&amp;&amp;<pos:position pos:line="111" pos:column="42"/></operator> <name pos:line="111" pos:column="35">do_compression<pos:position pos:line="111" pos:column="49"/></name> <operator pos:line="111" pos:column="50">==<pos:position pos:line="111" pos:column="52"/></operator> <literal type="number" pos:line="111" pos:column="53">1<pos:position pos:line="111" pos:column="54"/></literal></expr>)<pos:position pos:line="111" pos:column="55"/></condition><then pos:line="111" pos:column="55"> <block pos:line="111" pos:column="56">{
		<comment type="block" pos:line="112" pos:column="17">/* Add the data in the current block to the compressor's
		 * history and hash table. */</comment>
<cpp:ifndef pos:line="114" pos:column="1">#<cpp:directive pos:line="114" pos:column="2">ifndef<pos:position pos:line="114" pos:column="8"/></cpp:directive> <name pos:line="114" pos:column="9">EXTERNAL_ZLIB<pos:position pos:line="114" pos:column="22"/></name></cpp:ifndef>
		<do pos:line="115" pos:column="17">do <block pos:line="115" pos:column="20">{
			<comment type="block" pos:line="116" pos:column="25">/* Break up long sections in the same way that
			 * see_deflate_token() does. */</comment>
			<decl_stmt><decl><type><name pos:line="118" pos:column="25">int32<pos:position pos:line="118" pos:column="30"/></name></type> <name pos:line="118" pos:column="31">n1<pos:position pos:line="118" pos:column="33"/></name> <init pos:line="118" pos:column="34">= <expr><ternary><condition><expr><name pos:line="118" pos:column="36">toklen<pos:position pos:line="118" pos:column="42"/></name> <operator pos:line="118" pos:column="43">&gt;<pos:position pos:line="118" pos:column="47"/></operator> <literal type="number" pos:line="118" pos:column="45">0xffff<pos:position pos:line="118" pos:column="51"/></literal></expr> ?<pos:position pos:line="118" pos:column="53"/></condition><then pos:line="118" pos:column="53"> <expr><literal type="number" pos:line="118" pos:column="54">0xffff<pos:position pos:line="118" pos:column="60"/></literal></expr> <pos:position pos:line="118" pos:column="61"/></then><else pos:line="118" pos:column="61">: <expr><name pos:line="118" pos:column="63">toklen<pos:position pos:line="118" pos:column="69"/></name></expr></else></ternary></expr></init></decl>;<pos:position pos:line="118" pos:column="70"/></decl_stmt>
			<expr_stmt><expr><name pos:line="119" pos:column="25">toklen<pos:position pos:line="119" pos:column="31"/></name> <operator pos:line="119" pos:column="32">-=<pos:position pos:line="119" pos:column="34"/></operator> <name pos:line="119" pos:column="35">n1<pos:position pos:line="119" pos:column="37"/></name></expr>;<pos:position pos:line="119" pos:column="38"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="120" pos:column="25">tx_strm<pos:position pos:line="120" pos:column="32"/></name><operator pos:line="120" pos:column="32">.<pos:position pos:line="120" pos:column="33"/></operator><name pos:line="120" pos:column="33">next_in<pos:position pos:line="120" pos:column="40"/></name></name> <operator pos:line="120" pos:column="41">=<pos:position pos:line="120" pos:column="42"/></operator> <operator pos:line="120" pos:column="43">(<pos:position pos:line="120" pos:column="44"/></operator><name pos:line="120" pos:column="44">Bytef<pos:position pos:line="120" pos:column="49"/></name> <operator pos:line="120" pos:column="50">*<pos:position pos:line="120" pos:column="51"/></operator><operator pos:line="120" pos:column="51">)<pos:position pos:line="120" pos:column="52"/></operator><call><name pos:line="120" pos:column="52">map_ptr<pos:position pos:line="120" pos:column="59"/></name><argument_list pos:line="120" pos:column="59">(<argument><expr><name pos:line="120" pos:column="60">buf<pos:position pos:line="120" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="120" pos:column="65">offset<pos:position pos:line="120" pos:column="71"/></name></expr></argument>, <argument><expr><name pos:line="120" pos:column="73">n1<pos:position pos:line="120" pos:column="75"/></name></expr></argument>)<pos:position pos:line="120" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="120" pos:column="77"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="121" pos:column="25">tx_strm<pos:position pos:line="121" pos:column="32"/></name><operator pos:line="121" pos:column="32">.<pos:position pos:line="121" pos:column="33"/></operator><name pos:line="121" pos:column="33">avail_in<pos:position pos:line="121" pos:column="41"/></name></name> <operator pos:line="121" pos:column="42">=<pos:position pos:line="121" pos:column="43"/></operator> <name pos:line="121" pos:column="44">n1<pos:position pos:line="121" pos:column="46"/></name></expr>;<pos:position pos:line="121" pos:column="47"/></expr_stmt>
			<if pos:line="122" pos:column="25">if <condition pos:line="122" pos:column="28">(<expr><name pos:line="122" pos:column="29">protocol_version<pos:position pos:line="122" pos:column="45"/></name> <operator pos:line="122" pos:column="46">&gt;=<pos:position pos:line="122" pos:column="51"/></operator> <literal type="number" pos:line="122" pos:column="49">31<pos:position pos:line="122" pos:column="51"/></literal></expr>)<pos:position pos:line="122" pos:column="52"/></condition><then pos:line="122" pos:column="52"> <comment type="block" pos:line="122" pos:column="53">/* Newer protocols avoid a data-duplicating bug */</comment>
				<block type="pseudo"><expr_stmt><expr><name pos:line="123" pos:column="33">offset<pos:position pos:line="123" pos:column="39"/></name> <operator pos:line="123" pos:column="40">+=<pos:position pos:line="123" pos:column="42"/></operator> <name pos:line="123" pos:column="43">n1<pos:position pos:line="123" pos:column="45"/></name></expr>;<pos:position pos:line="123" pos:column="46"/></expr_stmt></block></then></if>
			<expr_stmt><expr><name><name pos:line="124" pos:column="25">tx_strm<pos:position pos:line="124" pos:column="32"/></name><operator pos:line="124" pos:column="32">.<pos:position pos:line="124" pos:column="33"/></operator><name pos:line="124" pos:column="33">next_out<pos:position pos:line="124" pos:column="41"/></name></name> <operator pos:line="124" pos:column="42">=<pos:position pos:line="124" pos:column="43"/></operator> <operator pos:line="124" pos:column="44">(<pos:position pos:line="124" pos:column="45"/></operator><name pos:line="124" pos:column="45">Bytef<pos:position pos:line="124" pos:column="50"/></name> <operator pos:line="124" pos:column="51">*<pos:position pos:line="124" pos:column="52"/></operator><operator pos:line="124" pos:column="52">)<pos:position pos:line="124" pos:column="53"/></operator> <name pos:line="124" pos:column="54">obuf<pos:position pos:line="124" pos:column="58"/></name></expr>;<pos:position pos:line="124" pos:column="59"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="125" pos:column="25">tx_strm<pos:position pos:line="125" pos:column="32"/></name><operator pos:line="125" pos:column="32">.<pos:position pos:line="125" pos:column="33"/></operator><name pos:line="125" pos:column="33">avail_out<pos:position pos:line="125" pos:column="42"/></name></name> <operator pos:line="125" pos:column="43">=<pos:position pos:line="125" pos:column="44"/></operator> <call><name pos:line="125" pos:column="45">AVAIL_OUT_SIZE<pos:position pos:line="125" pos:column="59"/></name><argument_list pos:line="125" pos:column="59">(<argument><expr><name pos:line="125" pos:column="60">CHUNK_SIZE<pos:position pos:line="125" pos:column="70"/></name></expr></argument>)<pos:position pos:line="125" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="125" pos:column="72"/></expr_stmt>
			<expr_stmt><expr><name pos:line="126" pos:column="25">r<pos:position pos:line="126" pos:column="26"/></name> <operator pos:line="126" pos:column="27">=<pos:position pos:line="126" pos:column="28"/></operator> <call><name pos:line="126" pos:column="29">deflate<pos:position pos:line="126" pos:column="36"/></name><argument_list pos:line="126" pos:column="36">(<argument><expr><operator pos:line="126" pos:column="37">&amp;<pos:position pos:line="126" pos:column="42"/></operator><name pos:line="126" pos:column="38">tx_strm<pos:position pos:line="126" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="126" pos:column="47">Z_INSERT_ONLY<pos:position pos:line="126" pos:column="60"/></name></expr></argument>)<pos:position pos:line="126" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="126" pos:column="62"/></expr_stmt>
			<if pos:line="127" pos:column="25">if <condition pos:line="127" pos:column="28">(<expr><name pos:line="127" pos:column="29">r<pos:position pos:line="127" pos:column="30"/></name> <operator pos:line="127" pos:column="31">!=<pos:position pos:line="127" pos:column="33"/></operator> <name pos:line="127" pos:column="34">Z_OK<pos:position pos:line="127" pos:column="38"/></name> <operator pos:line="127" pos:column="39">||<pos:position pos:line="127" pos:column="41"/></operator> <name><name pos:line="127" pos:column="42">tx_strm<pos:position pos:line="127" pos:column="49"/></name><operator pos:line="127" pos:column="49">.<pos:position pos:line="127" pos:column="50"/></operator><name pos:line="127" pos:column="50">avail_in<pos:position pos:line="127" pos:column="58"/></name></name> <operator pos:line="127" pos:column="59">!=<pos:position pos:line="127" pos:column="61"/></operator> <literal type="number" pos:line="127" pos:column="62">0<pos:position pos:line="127" pos:column="63"/></literal></expr>)<pos:position pos:line="127" pos:column="64"/></condition><then pos:line="127" pos:column="64"> <block pos:line="127" pos:column="65">{
				<expr_stmt><expr><call><name pos:line="128" pos:column="33">rprintf<pos:position pos:line="128" pos:column="40"/></name><argument_list pos:line="128" pos:column="40">(<argument><expr><name pos:line="128" pos:column="41">FERROR<pos:position pos:line="128" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="128" pos:column="49">"deflate on token returned %d (%d bytes left)\n"<pos:position pos:line="128" pos:column="97"/></literal></expr></argument>,
					<argument><expr><name pos:line="129" pos:column="41">r<pos:position pos:line="129" pos:column="42"/></name></expr></argument>, <argument><expr><name><name pos:line="129" pos:column="44">tx_strm<pos:position pos:line="129" pos:column="51"/></name><operator pos:line="129" pos:column="51">.<pos:position pos:line="129" pos:column="52"/></operator><name pos:line="129" pos:column="52">avail_in<pos:position pos:line="129" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="129" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="129" pos:column="62"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="130" pos:column="33">exit_cleanup<pos:position pos:line="130" pos:column="45"/></name><argument_list pos:line="130" pos:column="45">(<argument><expr><name pos:line="130" pos:column="46">RERR_STREAMIO<pos:position pos:line="130" pos:column="59"/></name></expr></argument>)<pos:position pos:line="130" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="130" pos:column="61"/></expr_stmt>
			}<pos:position pos:line="131" pos:column="26"/></block></then></if>
		}<pos:position pos:line="132" pos:column="18"/></block> while <condition pos:line="132" pos:column="25">(<expr><name pos:line="132" pos:column="26">toklen<pos:position pos:line="132" pos:column="32"/></name> <operator pos:line="132" pos:column="33">&gt;<pos:position pos:line="132" pos:column="37"/></operator> <literal type="number" pos:line="132" pos:column="35">0<pos:position pos:line="132" pos:column="36"/></literal></expr>)<pos:position pos:line="132" pos:column="37"/></condition>;<pos:position pos:line="132" pos:column="38"/></do>
<cpp:else pos:line="133" pos:column="1">#<cpp:directive pos:line="133" pos:column="2">else<pos:position pos:line="133" pos:column="6"/></cpp:directive></cpp:else>
		<expr_stmt><expr><name pos:line="134" pos:column="17">toklen<pos:position pos:line="134" pos:column="23"/></name><operator pos:line="134" pos:column="23">++<pos:position pos:line="134" pos:column="25"/></operator></expr>;<pos:position pos:line="134" pos:column="26"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="135" pos:column="17">rprintf<pos:position pos:line="135" pos:column="24"/></name><argument_list pos:line="135" pos:column="24">(<argument><expr><name pos:line="135" pos:column="25">FERROR<pos:position pos:line="135" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="135" pos:column="33">"Impossible error in external-zlib code (1).\n"<pos:position pos:line="135" pos:column="80"/></literal></expr></argument>)<pos:position pos:line="135" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="135" pos:column="82"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="136" pos:column="17">exit_cleanup<pos:position pos:line="136" pos:column="29"/></name><argument_list pos:line="136" pos:column="29">(<argument><expr><name pos:line="136" pos:column="30">RERR_STREAMIO<pos:position pos:line="136" pos:column="43"/></name></expr></argument>)<pos:position pos:line="136" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="136" pos:column="45"/></expr_stmt>
<cpp:endif pos:line="137" pos:column="1">#<cpp:directive pos:line="137" pos:column="2">endif<pos:position pos:line="137" pos:column="7"/></cpp:directive></cpp:endif>
	}<pos:position pos:line="138" pos:column="10"/></block></then></if></elseif></if>
}<pos:position pos:line="139" pos:column="2"/></block></function></unit>
