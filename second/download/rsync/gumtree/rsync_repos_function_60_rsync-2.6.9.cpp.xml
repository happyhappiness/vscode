<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_60_rsync-2.6.9.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">setup_protocol<pos:position pos:line="1" pos:column="20"/></name><parameter_list pos:line="1" pos:column="20">(<parameter><decl><type><name pos:line="1" pos:column="21">int<pos:position pos:line="1" pos:column="24"/></name></type> <name pos:line="1" pos:column="25">f_out<pos:position pos:line="1" pos:column="30"/></name></decl></parameter>,<parameter><decl><type><name pos:line="1" pos:column="31">int<pos:position pos:line="1" pos:column="34"/></name></type> <name pos:line="1" pos:column="35">f_in<pos:position pos:line="1" pos:column="39"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="40"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<if pos:line="3" pos:column="9">if <condition pos:line="3" pos:column="12">(<expr><name pos:line="3" pos:column="13">remote_protocol<pos:position pos:line="3" pos:column="28"/></name> <operator pos:line="3" pos:column="29">==<pos:position pos:line="3" pos:column="31"/></operator> <literal type="number" pos:line="3" pos:column="32">0<pos:position pos:line="3" pos:column="33"/></literal></expr>)<pos:position pos:line="3" pos:column="34"/></condition><then pos:line="3" pos:column="34"> <block pos:line="3" pos:column="35">{
		<if pos:line="4" pos:column="17">if <condition pos:line="4" pos:column="20">(<expr><operator pos:line="4" pos:column="21">!<pos:position pos:line="4" pos:column="22"/></operator><name pos:line="4" pos:column="22">read_batch<pos:position pos:line="4" pos:column="32"/></name></expr>)<pos:position pos:line="4" pos:column="33"/></condition><then pos:line="4" pos:column="33">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="5" pos:column="25">write_int<pos:position pos:line="5" pos:column="34"/></name><argument_list pos:line="5" pos:column="34">(<argument><expr><name pos:line="5" pos:column="35">f_out<pos:position pos:line="5" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="5" pos:column="42">protocol_version<pos:position pos:line="5" pos:column="58"/></name></expr></argument>)<pos:position pos:line="5" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="60"/></expr_stmt></block></then></if>
		<expr_stmt><expr><name pos:line="6" pos:column="17">remote_protocol<pos:position pos:line="6" pos:column="32"/></name> <operator pos:line="6" pos:column="33">=<pos:position pos:line="6" pos:column="34"/></operator> <call><name pos:line="6" pos:column="35">read_int<pos:position pos:line="6" pos:column="43"/></name><argument_list pos:line="6" pos:column="43">(<argument><expr><name pos:line="6" pos:column="44">f_in<pos:position pos:line="6" pos:column="48"/></name></expr></argument>)<pos:position pos:line="6" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="50"/></expr_stmt>
		<if pos:line="7" pos:column="17">if <condition pos:line="7" pos:column="20">(<expr><name pos:line="7" pos:column="21">protocol_version<pos:position pos:line="7" pos:column="37"/></name> <operator pos:line="7" pos:column="38">&gt;<pos:position pos:line="7" pos:column="42"/></operator> <name pos:line="7" pos:column="40">remote_protocol<pos:position pos:line="7" pos:column="55"/></name></expr>)<pos:position pos:line="7" pos:column="56"/></condition><then pos:line="7" pos:column="56">
			<block type="pseudo"><expr_stmt><expr><name pos:line="8" pos:column="25">protocol_version<pos:position pos:line="8" pos:column="41"/></name> <operator pos:line="8" pos:column="42">=<pos:position pos:line="8" pos:column="43"/></operator> <name pos:line="8" pos:column="44">remote_protocol<pos:position pos:line="8" pos:column="59"/></name></expr>;<pos:position pos:line="8" pos:column="60"/></expr_stmt></block></then></if>
	}<pos:position pos:line="9" pos:column="10"/></block></then></if>
	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><name pos:line="10" pos:column="13">read_batch<pos:position pos:line="10" pos:column="23"/></name> <operator pos:line="10" pos:column="24">&amp;&amp;<pos:position pos:line="10" pos:column="34"/></operator> <name pos:line="10" pos:column="27">remote_protocol<pos:position pos:line="10" pos:column="42"/></name> <operator pos:line="10" pos:column="43">&gt;<pos:position pos:line="10" pos:column="47"/></operator> <name pos:line="10" pos:column="45">protocol_version<pos:position pos:line="10" pos:column="61"/></name></expr>)<pos:position pos:line="10" pos:column="62"/></condition><then pos:line="10" pos:column="62"> <block pos:line="10" pos:column="63">{
	        <expr_stmt><expr><call><name pos:line="11" pos:column="17">rprintf<pos:position pos:line="11" pos:column="24"/></name><argument_list pos:line="11" pos:column="24">(<argument><expr><name pos:line="11" pos:column="25">FERROR<pos:position pos:line="11" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="33">"The protocol version in the batch file is too new (%d &gt; %d).\n"<pos:position pos:line="11" pos:column="100"/></literal></expr></argument>,
			<argument><expr><name pos:line="12" pos:column="25">remote_protocol<pos:position pos:line="12" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="42">protocol_version<pos:position pos:line="12" pos:column="58"/></name></expr></argument>)<pos:position pos:line="12" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="60"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="13" pos:column="17">exit_cleanup<pos:position pos:line="13" pos:column="29"/></name><argument_list pos:line="13" pos:column="29">(<argument><expr><name pos:line="13" pos:column="30">RERR_PROTOCOL<pos:position pos:line="13" pos:column="43"/></name></expr></argument>)<pos:position pos:line="13" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="45"/></expr_stmt>
	}<pos:position pos:line="14" pos:column="10"/></block></then></if>

	<if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><name pos:line="16" pos:column="13">verbose<pos:position pos:line="16" pos:column="20"/></name> <operator pos:line="16" pos:column="21">&gt;<pos:position pos:line="16" pos:column="25"/></operator> <literal type="number" pos:line="16" pos:column="23">3<pos:position pos:line="16" pos:column="24"/></literal></expr>)<pos:position pos:line="16" pos:column="25"/></condition><then pos:line="16" pos:column="25"> <block pos:line="16" pos:column="26">{
		<expr_stmt><expr><call><name pos:line="17" pos:column="17">rprintf<pos:position pos:line="17" pos:column="24"/></name><argument_list pos:line="17" pos:column="24">(<argument><expr><name pos:line="17" pos:column="25">FINFO<pos:position pos:line="17" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="32">"(%s) Protocol versions: remote=%d, negotiated=%d\n"<pos:position pos:line="17" pos:column="84"/></literal></expr></argument>,
			<argument><expr><ternary><condition><expr><name pos:line="18" pos:column="25">am_server<pos:position pos:line="18" pos:column="34"/></name></expr>?<pos:position pos:line="18" pos:column="35"/></condition><then pos:line="18" pos:column="35"> <expr><literal type="string" pos:line="18" pos:column="36">"Server"<pos:position pos:line="18" pos:column="44"/></literal></expr> <pos:position pos:line="18" pos:column="45"/></then><else pos:line="18" pos:column="45">: <expr><literal type="string" pos:line="18" pos:column="47">"Client"<pos:position pos:line="18" pos:column="55"/></literal></expr></else></ternary></expr></argument>, <argument><expr><name pos:line="18" pos:column="57">remote_protocol<pos:position pos:line="18" pos:column="72"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="74">protocol_version<pos:position pos:line="18" pos:column="90"/></name></expr></argument>)<pos:position pos:line="18" pos:column="91"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="92"/></expr_stmt>
	}<pos:position pos:line="19" pos:column="10"/></block></then></if>
	<if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><name><name pos:line="20" pos:column="13">remote_protocol<pos:position pos:line="20" pos:column="28"/></name> <argument_list type="generic" pos:line="20" pos:column="29">&lt; <argument><expr><name pos:line="20" pos:column="31">MIN_PROTOCOL_VERSION<pos:position pos:line="20" pos:column="51"/></name>
	 <operator pos:line="21" pos:column="10">||<pos:position pos:line="21" pos:column="12"/></operator> <name pos:line="21" pos:column="13">remote_protocol<pos:position pos:line="21" pos:column="28"/></name></expr></argument> &gt;<pos:position pos:line="21" pos:column="33"/></argument_list></name> <name pos:line="21" pos:column="31">MAX_PROTOCOL_VERSION<pos:position pos:line="21" pos:column="51"/></name></expr>)<pos:position pos:line="21" pos:column="52"/></condition><then pos:line="21" pos:column="52"> <block pos:line="21" pos:column="53">{
		<expr_stmt><expr><call><name pos:line="22" pos:column="17">rprintf<pos:position pos:line="22" pos:column="24"/></name><argument_list pos:line="22" pos:column="24">(<argument><expr><name pos:line="22" pos:column="25">FERROR<pos:position pos:line="22" pos:column="31"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="22" pos:column="32">"protocol version mismatch -- is your shell clean?\n"<pos:position pos:line="22" pos:column="85"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="86"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="87"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="23" pos:column="17">rprintf<pos:position pos:line="23" pos:column="24"/></name><argument_list pos:line="23" pos:column="24">(<argument><expr><name pos:line="23" pos:column="25">FERROR<pos:position pos:line="23" pos:column="31"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="23" pos:column="32">"(see the rsync man page for an explanation)\n"<pos:position pos:line="23" pos:column="79"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="81"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="24" pos:column="17">exit_cleanup<pos:position pos:line="24" pos:column="29"/></name><argument_list pos:line="24" pos:column="29">(<argument><expr><name pos:line="24" pos:column="30">RERR_PROTOCOL<pos:position pos:line="24" pos:column="43"/></name></expr></argument>)<pos:position pos:line="24" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="45"/></expr_stmt>
	}<pos:position pos:line="25" pos:column="10"/></block></then></if>
	<if pos:line="26" pos:column="9">if <condition pos:line="26" pos:column="12">(<expr><name pos:line="26" pos:column="13">remote_protocol<pos:position pos:line="26" pos:column="28"/></name> <operator pos:line="26" pos:column="29">&lt;<pos:position pos:line="26" pos:column="33"/></operator> <name pos:line="26" pos:column="31">OLD_PROTOCOL_VERSION<pos:position pos:line="26" pos:column="51"/></name></expr>)<pos:position pos:line="26" pos:column="52"/></condition><then pos:line="26" pos:column="52"> <block pos:line="26" pos:column="53">{
		<expr_stmt><expr><call><name pos:line="27" pos:column="17">rprintf<pos:position pos:line="27" pos:column="24"/></name><argument_list pos:line="27" pos:column="24">(<argument><expr><name pos:line="27" pos:column="25">FINFO<pos:position pos:line="27" pos:column="30"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="27" pos:column="31">"%s is very old version of rsync, upgrade recommended.\n"<pos:position pos:line="27" pos:column="88"/></literal></expr></argument>,
			<argument><expr><ternary><condition><expr><name pos:line="28" pos:column="25">am_server<pos:position pos:line="28" pos:column="34"/></name></expr>?<pos:position pos:line="28" pos:column="35"/></condition><then pos:line="28" pos:column="35"> <expr><literal type="string" pos:line="28" pos:column="36">"Client"<pos:position pos:line="28" pos:column="44"/></literal></expr> <pos:position pos:line="28" pos:column="45"/></then><else pos:line="28" pos:column="45">: <expr><literal type="string" pos:line="28" pos:column="47">"Server"<pos:position pos:line="28" pos:column="55"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="28" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="57"/></expr_stmt>
	}<pos:position pos:line="29" pos:column="10"/></block></then></if>
	<if pos:line="30" pos:column="9">if <condition pos:line="30" pos:column="12">(<expr><name pos:line="30" pos:column="13">protocol_version<pos:position pos:line="30" pos:column="29"/></name> <operator pos:line="30" pos:column="30">&lt;<pos:position pos:line="30" pos:column="34"/></operator> <name pos:line="30" pos:column="32">MIN_PROTOCOL_VERSION<pos:position pos:line="30" pos:column="52"/></name></expr>)<pos:position pos:line="30" pos:column="53"/></condition><then pos:line="30" pos:column="53"> <block pos:line="30" pos:column="54">{
		<expr_stmt><expr><call><name pos:line="31" pos:column="17">rprintf<pos:position pos:line="31" pos:column="24"/></name><argument_list pos:line="31" pos:column="24">(<argument><expr><name pos:line="31" pos:column="25">FERROR<pos:position pos:line="31" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="31" pos:column="33">"--protocol must be at least %d on the %s.\n"<pos:position pos:line="31" pos:column="78"/></literal></expr></argument>,
			<argument><expr><name pos:line="32" pos:column="25">MIN_PROTOCOL_VERSION<pos:position pos:line="32" pos:column="45"/></name></expr></argument>, <argument><expr><ternary><condition><expr><name pos:line="32" pos:column="47">am_server<pos:position pos:line="32" pos:column="56"/></name></expr>?<pos:position pos:line="32" pos:column="57"/></condition><then pos:line="32" pos:column="57"> <expr><literal type="string" pos:line="32" pos:column="58">"Server"<pos:position pos:line="32" pos:column="66"/></literal></expr> <pos:position pos:line="32" pos:column="67"/></then><else pos:line="32" pos:column="67">: <expr><literal type="string" pos:line="32" pos:column="69">"Client"<pos:position pos:line="32" pos:column="77"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="32" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="79"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="33" pos:column="17">exit_cleanup<pos:position pos:line="33" pos:column="29"/></name><argument_list pos:line="33" pos:column="29">(<argument><expr><name pos:line="33" pos:column="30">RERR_PROTOCOL<pos:position pos:line="33" pos:column="43"/></name></expr></argument>)<pos:position pos:line="33" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="45"/></expr_stmt>
	}<pos:position pos:line="34" pos:column="10"/></block></then></if>
	<if pos:line="35" pos:column="9">if <condition pos:line="35" pos:column="12">(<expr><name pos:line="35" pos:column="13">protocol_version<pos:position pos:line="35" pos:column="29"/></name> <operator pos:line="35" pos:column="30">&gt;<pos:position pos:line="35" pos:column="34"/></operator> <name pos:line="35" pos:column="32">PROTOCOL_VERSION<pos:position pos:line="35" pos:column="48"/></name></expr>)<pos:position pos:line="35" pos:column="49"/></condition><then pos:line="35" pos:column="49"> <block pos:line="35" pos:column="50">{
		<expr_stmt><expr><call><name pos:line="36" pos:column="17">rprintf<pos:position pos:line="36" pos:column="24"/></name><argument_list pos:line="36" pos:column="24">(<argument><expr><name pos:line="36" pos:column="25">FERROR<pos:position pos:line="36" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="36" pos:column="33">"--protocol must be no more than %d on the %s.\n"<pos:position pos:line="36" pos:column="82"/></literal></expr></argument>,
			<argument><expr><name pos:line="37" pos:column="25">PROTOCOL_VERSION<pos:position pos:line="37" pos:column="41"/></name></expr></argument>, <argument><expr><ternary><condition><expr><name pos:line="37" pos:column="43">am_server<pos:position pos:line="37" pos:column="52"/></name></expr>?<pos:position pos:line="37" pos:column="53"/></condition><then pos:line="37" pos:column="53"> <expr><literal type="string" pos:line="37" pos:column="54">"Server"<pos:position pos:line="37" pos:column="62"/></literal></expr> <pos:position pos:line="37" pos:column="63"/></then><else pos:line="37" pos:column="63">: <expr><literal type="string" pos:line="37" pos:column="65">"Client"<pos:position pos:line="37" pos:column="73"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="37" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="75"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="38" pos:column="17">exit_cleanup<pos:position pos:line="38" pos:column="29"/></name><argument_list pos:line="38" pos:column="29">(<argument><expr><name pos:line="38" pos:column="30">RERR_PROTOCOL<pos:position pos:line="38" pos:column="43"/></name></expr></argument>)<pos:position pos:line="38" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="45"/></expr_stmt>
	}<pos:position pos:line="39" pos:column="10"/></block></then></if>

	<if pos:line="41" pos:column="9">if <condition pos:line="41" pos:column="12">(<expr><name pos:line="41" pos:column="13">protocol_version<pos:position pos:line="41" pos:column="29"/></name> <operator pos:line="41" pos:column="30">&lt;<pos:position pos:line="41" pos:column="34"/></operator> <literal type="number" pos:line="41" pos:column="32">29<pos:position pos:line="41" pos:column="34"/></literal></expr>)<pos:position pos:line="41" pos:column="35"/></condition><then pos:line="41" pos:column="35"> <block pos:line="41" pos:column="36">{
		<if pos:line="42" pos:column="17">if <condition pos:line="42" pos:column="20">(<expr><name pos:line="42" pos:column="21">fuzzy_basis<pos:position pos:line="42" pos:column="32"/></name></expr>)<pos:position pos:line="42" pos:column="33"/></condition><then pos:line="42" pos:column="33"> <block pos:line="42" pos:column="34">{
			<expr_stmt><expr><call><name pos:line="43" pos:column="25">rprintf<pos:position pos:line="43" pos:column="32"/></name><argument_list pos:line="43" pos:column="32">(<argument><expr><name pos:line="43" pos:column="33">FERROR<pos:position pos:line="43" pos:column="39"/></name></expr></argument>,
			    <argument><expr><literal type="string" pos:line="44" pos:column="29">"--fuzzy requires protocol 29 or higher"<pos:position pos:line="44" pos:column="69"/></literal>
			    <literal type="string" pos:line="45" pos:column="29">" (negotiated %d).\n"<pos:position pos:line="45" pos:column="50"/></literal></expr></argument>,
			    <argument><expr><name pos:line="46" pos:column="29">protocol_version<pos:position pos:line="46" pos:column="45"/></name></expr></argument>)<pos:position pos:line="46" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="47"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="47" pos:column="25">exit_cleanup<pos:position pos:line="47" pos:column="37"/></name><argument_list pos:line="47" pos:column="37">(<argument><expr><name pos:line="47" pos:column="38">RERR_PROTOCOL<pos:position pos:line="47" pos:column="51"/></name></expr></argument>)<pos:position pos:line="47" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="53"/></expr_stmt>
		}<pos:position pos:line="48" pos:column="18"/></block></then></if>

		<if pos:line="50" pos:column="17">if <condition pos:line="50" pos:column="20">(<expr><name pos:line="50" pos:column="21">basis_dir_cnt<pos:position pos:line="50" pos:column="34"/></name> <operator pos:line="50" pos:column="35">&amp;&amp;<pos:position pos:line="50" pos:column="45"/></operator> <name pos:line="50" pos:column="38">inplace<pos:position pos:line="50" pos:column="45"/></name></expr>)<pos:position pos:line="50" pos:column="46"/></condition><then pos:line="50" pos:column="46"> <block pos:line="50" pos:column="47">{
			<expr_stmt><expr><call><name pos:line="51" pos:column="25">rprintf<pos:position pos:line="51" pos:column="32"/></name><argument_list pos:line="51" pos:column="32">(<argument><expr><name pos:line="51" pos:column="33">FERROR<pos:position pos:line="51" pos:column="39"/></name></expr></argument>,
			    <argument><expr><literal type="string" pos:line="52" pos:column="29">"%s with --inplace requires protocol 29 or higher"<pos:position pos:line="52" pos:column="79"/></literal>
			    <literal type="string" pos:line="53" pos:column="29">" (negotiated %d).\n"<pos:position pos:line="53" pos:column="50"/></literal></expr></argument>,
			    <argument><expr><name pos:line="54" pos:column="29">dest_option<pos:position pos:line="54" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="42">protocol_version<pos:position pos:line="54" pos:column="58"/></name></expr></argument>)<pos:position pos:line="54" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="60"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="55" pos:column="25">exit_cleanup<pos:position pos:line="55" pos:column="37"/></name><argument_list pos:line="55" pos:column="37">(<argument><expr><name pos:line="55" pos:column="38">RERR_PROTOCOL<pos:position pos:line="55" pos:column="51"/></name></expr></argument>)<pos:position pos:line="55" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="53"/></expr_stmt>
		}<pos:position pos:line="56" pos:column="18"/></block></then></if>

		<if pos:line="58" pos:column="17">if <condition pos:line="58" pos:column="20">(<expr><name pos:line="58" pos:column="21">basis_dir_cnt<pos:position pos:line="58" pos:column="34"/></name> <operator pos:line="58" pos:column="35">&gt;<pos:position pos:line="58" pos:column="39"/></operator> <literal type="number" pos:line="58" pos:column="37">1<pos:position pos:line="58" pos:column="38"/></literal></expr>)<pos:position pos:line="58" pos:column="39"/></condition><then pos:line="58" pos:column="39"> <block pos:line="58" pos:column="40">{
			<expr_stmt><expr><call><name pos:line="59" pos:column="25">rprintf<pos:position pos:line="59" pos:column="32"/></name><argument_list pos:line="59" pos:column="32">(<argument><expr><name pos:line="59" pos:column="33">FERROR<pos:position pos:line="59" pos:column="39"/></name></expr></argument>,
			    <argument><expr><literal type="string" pos:line="60" pos:column="29">"Using more than one %s option requires protocol"<pos:position pos:line="60" pos:column="78"/></literal>
			    <literal type="string" pos:line="61" pos:column="29">" 29 or higher (negotiated %d).\n"<pos:position pos:line="61" pos:column="63"/></literal></expr></argument>,
			    <argument><expr><name pos:line="62" pos:column="29">dest_option<pos:position pos:line="62" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="42">protocol_version<pos:position pos:line="62" pos:column="58"/></name></expr></argument>)<pos:position pos:line="62" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="60"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="63" pos:column="25">exit_cleanup<pos:position pos:line="63" pos:column="37"/></name><argument_list pos:line="63" pos:column="37">(<argument><expr><name pos:line="63" pos:column="38">RERR_PROTOCOL<pos:position pos:line="63" pos:column="51"/></name></expr></argument>)<pos:position pos:line="63" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="53"/></expr_stmt>
		}<pos:position pos:line="64" pos:column="18"/></block></then></if>

		<if pos:line="66" pos:column="17">if <condition pos:line="66" pos:column="20">(<expr><name pos:line="66" pos:column="21">prune_empty_dirs<pos:position pos:line="66" pos:column="37"/></name></expr>)<pos:position pos:line="66" pos:column="38"/></condition><then pos:line="66" pos:column="38"> <block pos:line="66" pos:column="39">{
			<expr_stmt><expr><call><name pos:line="67" pos:column="25">rprintf<pos:position pos:line="67" pos:column="32"/></name><argument_list pos:line="67" pos:column="32">(<argument><expr><name pos:line="67" pos:column="33">FERROR<pos:position pos:line="67" pos:column="39"/></name></expr></argument>,
			    <argument><expr><literal type="string" pos:line="68" pos:column="29">"--prune-empty-dirs requires protocol 29 or higher"<pos:position pos:line="68" pos:column="80"/></literal>
			    <literal type="string" pos:line="69" pos:column="29">" (negotiated %d).\n"<pos:position pos:line="69" pos:column="50"/></literal></expr></argument>,
			    <argument><expr><name pos:line="70" pos:column="29">protocol_version<pos:position pos:line="70" pos:column="45"/></name></expr></argument>)<pos:position pos:line="70" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="47"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="71" pos:column="25">exit_cleanup<pos:position pos:line="71" pos:column="37"/></name><argument_list pos:line="71" pos:column="37">(<argument><expr><name pos:line="71" pos:column="38">RERR_PROTOCOL<pos:position pos:line="71" pos:column="51"/></name></expr></argument>)<pos:position pos:line="71" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="53"/></expr_stmt>
		}<pos:position pos:line="72" pos:column="18"/></block></then></if>
	}<pos:position pos:line="73" pos:column="10"/></block></then></if>

	<if pos:line="75" pos:column="9">if <condition pos:line="75" pos:column="12">(<expr><name pos:line="75" pos:column="13">am_server<pos:position pos:line="75" pos:column="22"/></name></expr>)<pos:position pos:line="75" pos:column="23"/></condition><then pos:line="75" pos:column="23"> <block pos:line="75" pos:column="24">{
		<if pos:line="76" pos:column="17">if <condition pos:line="76" pos:column="20">(<expr><operator pos:line="76" pos:column="21">!<pos:position pos:line="76" pos:column="22"/></operator><name pos:line="76" pos:column="22">checksum_seed<pos:position pos:line="76" pos:column="35"/></name></expr>)<pos:position pos:line="76" pos:column="36"/></condition><then pos:line="76" pos:column="36">
			<block type="pseudo"><expr_stmt><expr><name pos:line="77" pos:column="25">checksum_seed<pos:position pos:line="77" pos:column="38"/></name> <operator pos:line="77" pos:column="39">=<pos:position pos:line="77" pos:column="40"/></operator> <call><name pos:line="77" pos:column="41">time<pos:position pos:line="77" pos:column="45"/></name><argument_list pos:line="77" pos:column="45">(<argument><expr><name pos:line="77" pos:column="46">NULL<pos:position pos:line="77" pos:column="50"/></name></expr></argument>)<pos:position pos:line="77" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="52"/></expr_stmt></block></then></if>
		<expr_stmt><expr><call><name pos:line="78" pos:column="17">write_int<pos:position pos:line="78" pos:column="26"/></name><argument_list pos:line="78" pos:column="26">(<argument><expr><name pos:line="78" pos:column="27">f_out<pos:position pos:line="78" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="78" pos:column="34">checksum_seed<pos:position pos:line="78" pos:column="47"/></name></expr></argument>)<pos:position pos:line="78" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="49"/></expr_stmt>
	}<pos:position pos:line="79" pos:column="10"/></block></then> <else pos:line="79" pos:column="11">else <block pos:line="79" pos:column="16">{
		<expr_stmt><expr><name pos:line="80" pos:column="17">checksum_seed<pos:position pos:line="80" pos:column="30"/></name> <operator pos:line="80" pos:column="31">=<pos:position pos:line="80" pos:column="32"/></operator> <call><name pos:line="80" pos:column="33">read_int<pos:position pos:line="80" pos:column="41"/></name><argument_list pos:line="80" pos:column="41">(<argument><expr><name pos:line="80" pos:column="42">f_in<pos:position pos:line="80" pos:column="46"/></name></expr></argument>)<pos:position pos:line="80" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="48"/></expr_stmt>
	}<pos:position pos:line="81" pos:column="10"/></block></else></if>
}<pos:position pos:line="82" pos:column="2"/></block></function></unit>
