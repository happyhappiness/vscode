<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_152_rsync-2.6.0.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">start_accept_loop<pos:position pos:line="1" pos:column="23"/></name><parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><name pos:line="1" pos:column="24">int<pos:position pos:line="1" pos:column="27"/></name></type> <name pos:line="1" pos:column="28">port<pos:position pos:line="1" pos:column="32"/></name></decl></parameter>, <parameter><function_decl><type><name pos:line="1" pos:column="34">int<pos:position pos:line="1" pos:column="37"/></name></type> (<modifier pos:line="1" pos:column="39">*<pos:position pos:line="1" pos:column="40"/></modifier><name pos:line="1" pos:column="40">fn<pos:position pos:line="1" pos:column="42"/></name>)<parameter_list pos:line="1" pos:column="43">(<parameter><decl><type><name pos:line="1" pos:column="44">int<pos:position pos:line="1" pos:column="47"/></name></type></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="49">int<pos:position pos:line="1" pos:column="52"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="53"/></parameter_list></function_decl></parameter>)<pos:position pos:line="1" pos:column="54"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">s<pos:position pos:line="3" pos:column="14"/></name></decl>;<pos:position pos:line="3" pos:column="15"/></decl_stmt>
	<decl_stmt><decl><specifier pos:line="4" pos:column="9">extern<pos:position pos:line="4" pos:column="15"/></specifier> <type><name pos:line="4" pos:column="16">char<pos:position pos:line="4" pos:column="20"/></name> <modifier pos:line="4" pos:column="21">*<pos:position pos:line="4" pos:column="22"/></modifier></type><name pos:line="4" pos:column="22">bind_address<pos:position pos:line="4" pos:column="34"/></name></decl>;<pos:position pos:line="4" pos:column="35"/></decl_stmt>
	<decl_stmt><decl><specifier pos:line="5" pos:column="9">extern<pos:position pos:line="5" pos:column="15"/></specifier> <type><name pos:line="5" pos:column="16">int<pos:position pos:line="5" pos:column="19"/></name></type> <name pos:line="5" pos:column="20">default_af_hint<pos:position pos:line="5" pos:column="35"/></name></decl>;<pos:position pos:line="5" pos:column="36"/></decl_stmt>

	<comment type="block" pos:line="7" pos:column="9">/* open an incoming socket */</comment>
	<expr_stmt><expr><name pos:line="8" pos:column="9">s<pos:position pos:line="8" pos:column="10"/></name> <operator pos:line="8" pos:column="11">=<pos:position pos:line="8" pos:column="12"/></operator> <call><name pos:line="8" pos:column="13">open_socket_in<pos:position pos:line="8" pos:column="27"/></name><argument_list pos:line="8" pos:column="27">(<argument><expr><name pos:line="8" pos:column="28">SOCK_STREAM<pos:position pos:line="8" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="41">port<pos:position pos:line="8" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="47">bind_address<pos:position pos:line="8" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="61">default_af_hint<pos:position pos:line="8" pos:column="76"/></name></expr></argument>)<pos:position pos:line="8" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="78"/></expr_stmt>
	<if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><name pos:line="9" pos:column="13">s<pos:position pos:line="9" pos:column="14"/></name> <operator pos:line="9" pos:column="15">==<pos:position pos:line="9" pos:column="17"/></operator> <operator pos:line="9" pos:column="18">-<pos:position pos:line="9" pos:column="19"/></operator><literal type="number" pos:line="9" pos:column="19">1<pos:position pos:line="9" pos:column="20"/></literal></expr>)<pos:position pos:line="9" pos:column="21"/></condition><then pos:line="9" pos:column="21">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="10" pos:column="17">exit_cleanup<pos:position pos:line="10" pos:column="29"/></name><argument_list pos:line="10" pos:column="29">(<argument><expr><name pos:line="10" pos:column="30">RERR_SOCKETIO<pos:position pos:line="10" pos:column="43"/></name></expr></argument>)<pos:position pos:line="10" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="45"/></expr_stmt></block></then></if>

	<comment type="block" pos:line="12" pos:column="9">/* ready to listen */</comment>
	<if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><call><name pos:line="13" pos:column="13">listen<pos:position pos:line="13" pos:column="19"/></name><argument_list pos:line="13" pos:column="19">(<argument><expr><name pos:line="13" pos:column="20">s<pos:position pos:line="13" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="13" pos:column="23">5<pos:position pos:line="13" pos:column="24"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="25"/></argument_list></call> <operator pos:line="13" pos:column="26">==<pos:position pos:line="13" pos:column="28"/></operator> <operator pos:line="13" pos:column="29">-<pos:position pos:line="13" pos:column="30"/></operator><literal type="number" pos:line="13" pos:column="30">1<pos:position pos:line="13" pos:column="31"/></literal></expr>)<pos:position pos:line="13" pos:column="32"/></condition><then pos:line="13" pos:column="32"> <block pos:line="13" pos:column="33">{
		<expr_stmt><expr><call><name pos:line="14" pos:column="17">close<pos:position pos:line="14" pos:column="22"/></name><argument_list pos:line="14" pos:column="22">(<argument><expr><name pos:line="14" pos:column="23">s<pos:position pos:line="14" pos:column="24"/></name></expr></argument>)<pos:position pos:line="14" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="26"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="15" pos:column="17">exit_cleanup<pos:position pos:line="15" pos:column="29"/></name><argument_list pos:line="15" pos:column="29">(<argument><expr><name pos:line="15" pos:column="30">RERR_SOCKETIO<pos:position pos:line="15" pos:column="43"/></name></expr></argument>)<pos:position pos:line="15" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="45"/></expr_stmt>
	}<pos:position pos:line="16" pos:column="10"/></block></then></if>


	<comment type="block" pos:line="19" pos:column="9">/* now accept incoming connections - forking a new process
	   for each incoming connection */</comment>
	<while pos:line="21" pos:column="9">while <condition pos:line="21" pos:column="15">(<expr><literal type="number" pos:line="21" pos:column="16">1<pos:position pos:line="21" pos:column="17"/></literal></expr>)<pos:position pos:line="21" pos:column="18"/></condition> <block pos:line="21" pos:column="19">{
		<decl_stmt><decl><type><name pos:line="22" pos:column="17">fd_set<pos:position pos:line="22" pos:column="23"/></name></type> <name pos:line="22" pos:column="24">fds<pos:position pos:line="22" pos:column="27"/></name></decl>;<pos:position pos:line="22" pos:column="28"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="23" pos:column="17">pid_t<pos:position pos:line="23" pos:column="22"/></name></type> <name pos:line="23" pos:column="23">pid<pos:position pos:line="23" pos:column="26"/></name></decl>;<pos:position pos:line="23" pos:column="27"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="24" pos:column="17">int<pos:position pos:line="24" pos:column="20"/></name></type> <name pos:line="24" pos:column="21">fd<pos:position pos:line="24" pos:column="23"/></name></decl>;<pos:position pos:line="24" pos:column="24"/></decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="25" pos:column="17">struct<pos:position pos:line="25" pos:column="23"/></name> <name pos:line="25" pos:column="24">sockaddr_storage<pos:position pos:line="25" pos:column="40"/></name></name></type> <name pos:line="25" pos:column="41">addr<pos:position pos:line="25" pos:column="45"/></name></decl>;<pos:position pos:line="25" pos:column="46"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="26" pos:column="17">socklen_t<pos:position pos:line="26" pos:column="26"/></name></type> <name pos:line="26" pos:column="27">addrlen<pos:position pos:line="26" pos:column="34"/></name> <init pos:line="26" pos:column="35">= <expr><sizeof pos:line="26" pos:column="37">sizeof <name pos:line="26" pos:column="44">addr<pos:position pos:line="26" pos:column="48"/></name></sizeof></expr></init></decl>;<pos:position pos:line="26" pos:column="49"/></decl_stmt>

		<comment type="block" pos:line="28" pos:column="17">/* close log file before the potentially very long select so
		   file can be trimmed by another process instead of growing
		   forever */</comment>
		<expr_stmt><expr><call><name pos:line="31" pos:column="17">log_close<pos:position pos:line="31" pos:column="26"/></name><argument_list pos:line="31" pos:column="26">()<pos:position pos:line="31" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="29"/></expr_stmt>

		<expr_stmt><expr><call><name pos:line="33" pos:column="17">FD_ZERO<pos:position pos:line="33" pos:column="24"/></name><argument_list pos:line="33" pos:column="24">(<argument><expr><operator pos:line="33" pos:column="25">&amp;<pos:position pos:line="33" pos:column="30"/></operator><name pos:line="33" pos:column="26">fds<pos:position pos:line="33" pos:column="29"/></name></expr></argument>)<pos:position pos:line="33" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="31"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="34" pos:column="17">FD_SET<pos:position pos:line="34" pos:column="23"/></name><argument_list pos:line="34" pos:column="23">(<argument><expr><name pos:line="34" pos:column="24">s<pos:position pos:line="34" pos:column="25"/></name></expr></argument>, <argument><expr><operator pos:line="34" pos:column="27">&amp;<pos:position pos:line="34" pos:column="32"/></operator><name pos:line="34" pos:column="28">fds<pos:position pos:line="34" pos:column="31"/></name></expr></argument>)<pos:position pos:line="34" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="33"/></expr_stmt>

		<if pos:line="36" pos:column="17">if <condition pos:line="36" pos:column="20">(<expr><call><name pos:line="36" pos:column="21">select<pos:position pos:line="36" pos:column="27"/></name><argument_list pos:line="36" pos:column="27">(<argument><expr><name pos:line="36" pos:column="28">s<pos:position pos:line="36" pos:column="29"/></name><operator pos:line="36" pos:column="29">+<pos:position pos:line="36" pos:column="30"/></operator><literal type="number" pos:line="36" pos:column="30">1<pos:position pos:line="36" pos:column="31"/></literal></expr></argument>, <argument><expr><operator pos:line="36" pos:column="33">&amp;<pos:position pos:line="36" pos:column="38"/></operator><name pos:line="36" pos:column="34">fds<pos:position pos:line="36" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="39">NULL<pos:position pos:line="36" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="45">NULL<pos:position pos:line="36" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="51">NULL<pos:position pos:line="36" pos:column="55"/></name></expr></argument>)<pos:position pos:line="36" pos:column="56"/></argument_list></call> <operator pos:line="36" pos:column="57">!=<pos:position pos:line="36" pos:column="59"/></operator> <literal type="number" pos:line="36" pos:column="60">1<pos:position pos:line="36" pos:column="61"/></literal></expr>)<pos:position pos:line="36" pos:column="62"/></condition><then pos:line="36" pos:column="62"> <block pos:line="36" pos:column="63">{
			<continue pos:line="37" pos:column="25">continue;<pos:position pos:line="37" pos:column="34"/></continue>
		}<pos:position pos:line="38" pos:column="18"/></block></then></if>

		<if pos:line="40" pos:column="17">if<condition pos:line="40" pos:column="19">(<expr><operator pos:line="40" pos:column="20">!<pos:position pos:line="40" pos:column="21"/></operator><call><name pos:line="40" pos:column="21">FD_ISSET<pos:position pos:line="40" pos:column="29"/></name><argument_list pos:line="40" pos:column="29">(<argument><expr><name pos:line="40" pos:column="30">s<pos:position pos:line="40" pos:column="31"/></name></expr></argument>, <argument><expr><operator pos:line="40" pos:column="33">&amp;<pos:position pos:line="40" pos:column="38"/></operator><name pos:line="40" pos:column="34">fds<pos:position pos:line="40" pos:column="37"/></name></expr></argument>)<pos:position pos:line="40" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="40" pos:column="39"/></condition><then pos:line="40" pos:column="39"> <block type="pseudo"><continue pos:line="40" pos:column="40">continue;<pos:position pos:line="40" pos:column="49"/></continue></block></then></if>

		<expr_stmt><expr><name pos:line="42" pos:column="17">fd<pos:position pos:line="42" pos:column="19"/></name> <operator pos:line="42" pos:column="20">=<pos:position pos:line="42" pos:column="21"/></operator> <call><name pos:line="42" pos:column="22">accept<pos:position pos:line="42" pos:column="28"/></name><argument_list pos:line="42" pos:column="28">(<argument><expr><name pos:line="42" pos:column="29">s<pos:position pos:line="42" pos:column="30"/></name></expr></argument>,<argument><expr><operator pos:line="42" pos:column="31">(<pos:position pos:line="42" pos:column="32"/></operator>struct <name pos:line="42" pos:column="39">sockaddr<pos:position pos:line="42" pos:column="47"/></name> <operator pos:line="42" pos:column="48">*<pos:position pos:line="42" pos:column="49"/></operator><operator pos:line="42" pos:column="49">)<pos:position pos:line="42" pos:column="50"/></operator><operator pos:line="42" pos:column="50">&amp;<pos:position pos:line="42" pos:column="55"/></operator><name pos:line="42" pos:column="51">addr<pos:position pos:line="42" pos:column="55"/></name></expr></argument>,<argument><expr><operator pos:line="42" pos:column="56">&amp;<pos:position pos:line="42" pos:column="61"/></operator><name pos:line="42" pos:column="57">addrlen<pos:position pos:line="42" pos:column="64"/></name></expr></argument>)<pos:position pos:line="42" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="66"/></expr_stmt>

		<if pos:line="44" pos:column="17">if <condition pos:line="44" pos:column="20">(<expr><name pos:line="44" pos:column="21">fd<pos:position pos:line="44" pos:column="23"/></name> <operator pos:line="44" pos:column="24">==<pos:position pos:line="44" pos:column="26"/></operator> <operator pos:line="44" pos:column="27">-<pos:position pos:line="44" pos:column="28"/></operator><literal type="number" pos:line="44" pos:column="28">1<pos:position pos:line="44" pos:column="29"/></literal></expr>)<pos:position pos:line="44" pos:column="30"/></condition><then pos:line="44" pos:column="30"> <block type="pseudo"><continue pos:line="44" pos:column="31">continue;<pos:position pos:line="44" pos:column="40"/></continue></block></then></if>

		<expr_stmt><expr><call><name pos:line="46" pos:column="17">signal<pos:position pos:line="46" pos:column="23"/></name><argument_list pos:line="46" pos:column="23">(<argument><expr><name pos:line="46" pos:column="24">SIGCHLD<pos:position pos:line="46" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="33">sigchld_handler<pos:position pos:line="46" pos:column="48"/></name></expr></argument>)<pos:position pos:line="46" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="50"/></expr_stmt>

		<if pos:line="48" pos:column="17">if <condition pos:line="48" pos:column="20">(<expr><operator pos:line="48" pos:column="21">(<pos:position pos:line="48" pos:column="22"/></operator><name pos:line="48" pos:column="22">pid<pos:position pos:line="48" pos:column="25"/></name> <operator pos:line="48" pos:column="26">=<pos:position pos:line="48" pos:column="27"/></operator> <call><name pos:line="48" pos:column="28">fork<pos:position pos:line="48" pos:column="32"/></name><argument_list pos:line="48" pos:column="32">()<pos:position pos:line="48" pos:column="34"/></argument_list></call><operator pos:line="48" pos:column="34">)<pos:position pos:line="48" pos:column="35"/></operator> <operator pos:line="48" pos:column="36">==<pos:position pos:line="48" pos:column="38"/></operator> <literal type="number" pos:line="48" pos:column="39">0<pos:position pos:line="48" pos:column="40"/></literal></expr>)<pos:position pos:line="48" pos:column="41"/></condition><then pos:line="48" pos:column="41"> <block pos:line="48" pos:column="42">{
			<decl_stmt><decl><type><name pos:line="49" pos:column="25">int<pos:position pos:line="49" pos:column="28"/></name></type> <name pos:line="49" pos:column="29">ret<pos:position pos:line="49" pos:column="32"/></name></decl>;<pos:position pos:line="49" pos:column="33"/></decl_stmt>
			<expr_stmt><expr><call><name pos:line="50" pos:column="25">close<pos:position pos:line="50" pos:column="30"/></name><argument_list pos:line="50" pos:column="30">(<argument><expr><name pos:line="50" pos:column="31">s<pos:position pos:line="50" pos:column="32"/></name></expr></argument>)<pos:position pos:line="50" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="34"/></expr_stmt>
			<comment type="block" pos:line="51" pos:column="25">/* open log file in child before possibly giving
			   up privileges  */</comment>
			<expr_stmt><expr><call><name pos:line="53" pos:column="25">log_open<pos:position pos:line="53" pos:column="33"/></name><argument_list pos:line="53" pos:column="33">()<pos:position pos:line="53" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="36"/></expr_stmt>
			<expr_stmt><expr><name pos:line="54" pos:column="25">ret<pos:position pos:line="54" pos:column="28"/></name> <operator pos:line="54" pos:column="29">=<pos:position pos:line="54" pos:column="30"/></operator> <call><name pos:line="54" pos:column="31">fn<pos:position pos:line="54" pos:column="33"/></name><argument_list pos:line="54" pos:column="33">(<argument><expr><name pos:line="54" pos:column="34">fd<pos:position pos:line="54" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="38">fd<pos:position pos:line="54" pos:column="40"/></name></expr></argument>)<pos:position pos:line="54" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="42"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="55" pos:column="25">close_all<pos:position pos:line="55" pos:column="34"/></name><argument_list pos:line="55" pos:column="34">()<pos:position pos:line="55" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="37"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="56" pos:column="25">_exit<pos:position pos:line="56" pos:column="30"/></name><argument_list pos:line="56" pos:column="30">(<argument><expr><name pos:line="56" pos:column="31">ret<pos:position pos:line="56" pos:column="34"/></name></expr></argument>)<pos:position pos:line="56" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="36"/></expr_stmt>
		}<pos:position pos:line="57" pos:column="18"/></block></then> <elseif pos:line="57" pos:column="19">else <if pos:line="57" pos:column="24">if <condition pos:line="57" pos:column="27">(<expr><name pos:line="57" pos:column="28">pid<pos:position pos:line="57" pos:column="31"/></name> <operator pos:line="57" pos:column="32">&lt;<pos:position pos:line="57" pos:column="36"/></operator> <literal type="number" pos:line="57" pos:column="34">0<pos:position pos:line="57" pos:column="35"/></literal></expr>)<pos:position pos:line="57" pos:column="36"/></condition><then pos:line="57" pos:column="36"> <block pos:line="57" pos:column="37">{
			<expr_stmt><expr><call><name pos:line="58" pos:column="25">rprintf<pos:position pos:line="58" pos:column="32"/></name><argument_list pos:line="58" pos:column="32">(<argument><expr><name pos:line="58" pos:column="33">FERROR<pos:position pos:line="58" pos:column="39"/></name></expr></argument>,
				<argument><expr><name pos:line="59" pos:column="33">RSYNC_NAME<pos:position pos:line="59" pos:column="43"/></name>
				<literal type="string" pos:line="60" pos:column="33">": could not create child server process: %s\n"<pos:position pos:line="60" pos:column="80"/></literal></expr></argument>,
				<argument><expr><call><name pos:line="61" pos:column="33">strerror<pos:position pos:line="61" pos:column="41"/></name><argument_list pos:line="61" pos:column="41">(<argument><expr><name pos:line="61" pos:column="42">errno<pos:position pos:line="61" pos:column="47"/></name></expr></argument>)<pos:position pos:line="61" pos:column="48"/></argument_list></call></expr></argument>)<pos:position pos:line="61" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="50"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="62" pos:column="25">close<pos:position pos:line="62" pos:column="30"/></name><argument_list pos:line="62" pos:column="30">(<argument><expr><name pos:line="62" pos:column="31">fd<pos:position pos:line="62" pos:column="33"/></name></expr></argument>)<pos:position pos:line="62" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="35"/></expr_stmt>
			<comment type="block" pos:line="63" pos:column="25">/* This might have happened because we're
			 * overloaded.  Sleep briefly before trying to
			 * accept again. */</comment>
			<expr_stmt><expr><call><name pos:line="66" pos:column="25">sleep<pos:position pos:line="66" pos:column="30"/></name><argument_list pos:line="66" pos:column="30">(<argument><expr><literal type="number" pos:line="66" pos:column="31">2<pos:position pos:line="66" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="66" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="34"/></expr_stmt>
		}<pos:position pos:line="67" pos:column="18"/></block></then></if></elseif> <else pos:line="67" pos:column="19">else <block pos:line="67" pos:column="24">{
			<comment type="block" pos:line="68" pos:column="25">/* Parent doesn't need this fd anymore. */</comment>
			<expr_stmt><expr><call><name pos:line="69" pos:column="25">close<pos:position pos:line="69" pos:column="30"/></name><argument_list pos:line="69" pos:column="30">(<argument><expr><name pos:line="69" pos:column="31">fd<pos:position pos:line="69" pos:column="33"/></name></expr></argument>)<pos:position pos:line="69" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="35"/></expr_stmt>
		}<pos:position pos:line="70" pos:column="18"/></block></else></if>
	}<pos:position pos:line="71" pos:column="10"/></block></while>
}<pos:position pos:line="72" pos:column="2"/></block></function></unit>
