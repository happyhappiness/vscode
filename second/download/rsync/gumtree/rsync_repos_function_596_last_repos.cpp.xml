<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_596_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">start_client<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name pos:line="1" pos:column="25">int<pos:position pos:line="1" pos:column="28"/></name></type> <name pos:line="1" pos:column="29">argc<pos:position pos:line="1" pos:column="33"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="35">char<pos:position pos:line="1" pos:column="39"/></name> <modifier pos:line="1" pos:column="40">*<pos:position pos:line="1" pos:column="41"/></modifier></type><name><name pos:line="1" pos:column="41">argv<pos:position pos:line="1" pos:column="45"/></name><index pos:line="1" pos:column="45">[]<pos:position pos:line="1" pos:column="47"/></index></name></decl></parameter>)<pos:position pos:line="1" pos:column="48"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">char<pos:position pos:line="3" pos:column="13"/></name> <modifier pos:line="3" pos:column="14">*<pos:position pos:line="3" pos:column="15"/></modifier></type><name pos:line="3" pos:column="15">p<pos:position pos:line="3" pos:column="16"/></name></decl>, <modifier pos:line="3" pos:column="18">*<pos:position pos:line="3" pos:column="19"/></modifier><decl><type ref="prev"/><name pos:line="3" pos:column="19">shell_machine<pos:position pos:line="3" pos:column="32"/></name> <init pos:line="3" pos:column="33">= <expr><name pos:line="3" pos:column="35">NULL<pos:position pos:line="3" pos:column="39"/></name></expr></init></decl>, <modifier pos:line="3" pos:column="41">*<pos:position pos:line="3" pos:column="42"/></modifier><decl><type ref="prev"/><name pos:line="3" pos:column="42">shell_user<pos:position pos:line="3" pos:column="52"/></name> <init pos:line="3" pos:column="53">= <expr><name pos:line="3" pos:column="55">NULL<pos:position pos:line="3" pos:column="59"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="60"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier><modifier pos:line="4" pos:column="15">*<pos:position pos:line="4" pos:column="16"/></modifier></type><name pos:line="4" pos:column="16">remote_argv<pos:position pos:line="4" pos:column="27"/></name></decl>;<pos:position pos:line="4" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">remote_argc<pos:position pos:line="5" pos:column="24"/></name></decl>;<pos:position pos:line="5" pos:column="25"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">f_in<pos:position pos:line="6" pos:column="17"/></name></decl>, <decl><type ref="prev"/><name pos:line="6" pos:column="19">f_out<pos:position pos:line="6" pos:column="24"/></name></decl>;<pos:position pos:line="6" pos:column="25"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">int<pos:position pos:line="7" pos:column="12"/></name></type> <name pos:line="7" pos:column="13">ret<pos:position pos:line="7" pos:column="16"/></name></decl>;<pos:position pos:line="7" pos:column="17"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">pid_t<pos:position pos:line="8" pos:column="14"/></name></type> <name pos:line="8" pos:column="15">pid<pos:position pos:line="8" pos:column="18"/></name></decl>;<pos:position pos:line="8" pos:column="19"/></decl_stmt>

	<comment type="block" pos:line="10" pos:column="9">/* Don't clobber argv[] so that ps(1) can still show the right
	 * command line. */</comment>
	<if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><operator pos:line="12" pos:column="13">(<pos:position pos:line="12" pos:column="14"/></operator><name pos:line="12" pos:column="14">ret<pos:position pos:line="12" pos:column="17"/></name> <operator pos:line="12" pos:column="18">=<pos:position pos:line="12" pos:column="19"/></operator> <call><name pos:line="12" pos:column="20">copy_argv<pos:position pos:line="12" pos:column="29"/></name><argument_list pos:line="12" pos:column="29">(<argument><expr><name pos:line="12" pos:column="30">argv<pos:position pos:line="12" pos:column="34"/></name></expr></argument>)<pos:position pos:line="12" pos:column="35"/></argument_list></call><operator pos:line="12" pos:column="35">)<pos:position pos:line="12" pos:column="36"/></operator> <operator pos:line="12" pos:column="37">!=<pos:position pos:line="12" pos:column="39"/></operator> <literal type="number" pos:line="12" pos:column="40">0<pos:position pos:line="12" pos:column="41"/></literal></expr>)<pos:position pos:line="12" pos:column="42"/></condition><then pos:line="12" pos:column="42">
		<block type="pseudo"><return pos:line="13" pos:column="17">return <expr><name pos:line="13" pos:column="24">ret<pos:position pos:line="13" pos:column="27"/></name></expr>;<pos:position pos:line="13" pos:column="28"/></return></block></then></if>

	<if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><operator pos:line="15" pos:column="13">!<pos:position pos:line="15" pos:column="14"/></operator><name pos:line="15" pos:column="14">read_batch<pos:position pos:line="15" pos:column="24"/></name></expr>)<pos:position pos:line="15" pos:column="25"/></condition><then pos:line="15" pos:column="25"> <block pos:line="15" pos:column="26">{ <comment type="block" pos:line="15" pos:column="28">/* for read_batch, NO source is specified */</comment>
		<decl_stmt><decl><type><name pos:line="16" pos:column="17">char<pos:position pos:line="16" pos:column="21"/></name> <modifier pos:line="16" pos:column="22">*<pos:position pos:line="16" pos:column="23"/></modifier></type><name pos:line="16" pos:column="23">path<pos:position pos:line="16" pos:column="27"/></name> <init pos:line="16" pos:column="28">= <expr><call><name pos:line="16" pos:column="30">check_for_hostspec<pos:position pos:line="16" pos:column="48"/></name><argument_list pos:line="16" pos:column="48">(<argument><expr><name><name pos:line="16" pos:column="49">argv<pos:position pos:line="16" pos:column="53"/></name><index pos:line="16" pos:column="53">[<expr><literal type="number" pos:line="16" pos:column="54">0<pos:position pos:line="16" pos:column="55"/></literal></expr>]<pos:position pos:line="16" pos:column="56"/></index></name></expr></argument>, <argument><expr><operator pos:line="16" pos:column="58">&amp;<pos:position pos:line="16" pos:column="63"/></operator><name pos:line="16" pos:column="59">shell_machine<pos:position pos:line="16" pos:column="72"/></name></expr></argument>, <argument><expr><operator pos:line="16" pos:column="74">&amp;<pos:position pos:line="16" pos:column="79"/></operator><name pos:line="16" pos:column="75">rsync_port<pos:position pos:line="16" pos:column="85"/></name></expr></argument>)<pos:position pos:line="16" pos:column="86"/></argument_list></call></expr></init></decl>;<pos:position pos:line="16" pos:column="87"/></decl_stmt>
		<if pos:line="17" pos:column="17">if <condition pos:line="17" pos:column="20">(<expr><name pos:line="17" pos:column="21">path<pos:position pos:line="17" pos:column="25"/></name></expr>)<pos:position pos:line="17" pos:column="26"/></condition><then pos:line="17" pos:column="26"> <block pos:line="17" pos:column="27">{ <comment type="block" pos:line="17" pos:column="29">/* source is remote */</comment>
			<decl_stmt><decl><type><name pos:line="18" pos:column="25">char<pos:position pos:line="18" pos:column="29"/></name> <modifier pos:line="18" pos:column="30">*<pos:position pos:line="18" pos:column="31"/></modifier></type><name pos:line="18" pos:column="31">dummy_host<pos:position pos:line="18" pos:column="41"/></name></decl>;<pos:position pos:line="18" pos:column="42"/></decl_stmt>
			<decl_stmt><decl><type><name pos:line="19" pos:column="25">int<pos:position pos:line="19" pos:column="28"/></name></type> <name pos:line="19" pos:column="29">dummy_port<pos:position pos:line="19" pos:column="39"/></name> <init pos:line="19" pos:column="40">= <expr><literal type="number" pos:line="19" pos:column="42">0<pos:position pos:line="19" pos:column="43"/></literal></expr></init></decl>;<pos:position pos:line="19" pos:column="44"/></decl_stmt>
			<expr_stmt><expr><operator pos:line="20" pos:column="25">*<pos:position pos:line="20" pos:column="26"/></operator><name pos:line="20" pos:column="26">argv<pos:position pos:line="20" pos:column="30"/></name> <operator pos:line="20" pos:column="31">=<pos:position pos:line="20" pos:column="32"/></operator> <name pos:line="20" pos:column="33">path<pos:position pos:line="20" pos:column="37"/></name></expr>;<pos:position pos:line="20" pos:column="38"/></expr_stmt>
			<expr_stmt><expr><name pos:line="21" pos:column="25">remote_argv<pos:position pos:line="21" pos:column="36"/></name> <operator pos:line="21" pos:column="37">=<pos:position pos:line="21" pos:column="38"/></operator> <name pos:line="21" pos:column="39">argv<pos:position pos:line="21" pos:column="43"/></name></expr>;<pos:position pos:line="21" pos:column="44"/></expr_stmt>
			<expr_stmt><expr><name pos:line="22" pos:column="25">remote_argc<pos:position pos:line="22" pos:column="36"/></name> <operator pos:line="22" pos:column="37">=<pos:position pos:line="22" pos:column="38"/></operator> <name pos:line="22" pos:column="39">argc<pos:position pos:line="22" pos:column="43"/></name></expr>;<pos:position pos:line="22" pos:column="44"/></expr_stmt>
			<expr_stmt><expr><name pos:line="23" pos:column="25">argv<pos:position pos:line="23" pos:column="29"/></name> <operator pos:line="23" pos:column="30">+=<pos:position pos:line="23" pos:column="32"/></operator> <name pos:line="23" pos:column="33">argc<pos:position pos:line="23" pos:column="37"/></name> <operator pos:line="23" pos:column="38">-<pos:position pos:line="23" pos:column="39"/></operator> <literal type="number" pos:line="23" pos:column="40">1<pos:position pos:line="23" pos:column="41"/></literal></expr>;<pos:position pos:line="23" pos:column="42"/></expr_stmt>
			<if pos:line="24" pos:column="25">if <condition pos:line="24" pos:column="28">(<expr><name pos:line="24" pos:column="29">argc<pos:position pos:line="24" pos:column="33"/></name> <operator pos:line="24" pos:column="34">==<pos:position pos:line="24" pos:column="36"/></operator> <literal type="number" pos:line="24" pos:column="37">1<pos:position pos:line="24" pos:column="38"/></literal> <operator pos:line="24" pos:column="39">||<pos:position pos:line="24" pos:column="41"/></operator> <operator pos:line="24" pos:column="42">*<pos:position pos:line="24" pos:column="43"/></operator><operator pos:line="24" pos:column="43">*<pos:position pos:line="24" pos:column="44"/></operator><name pos:line="24" pos:column="44">argv<pos:position pos:line="24" pos:column="48"/></name> <operator pos:line="24" pos:column="49">==<pos:position pos:line="24" pos:column="51"/></operator> <literal type="char" pos:line="24" pos:column="52">':'<pos:position pos:line="24" pos:column="55"/></literal></expr>)<pos:position pos:line="24" pos:column="56"/></condition><then pos:line="24" pos:column="56">
				<block type="pseudo"><expr_stmt><expr><name pos:line="25" pos:column="33">argc<pos:position pos:line="25" pos:column="37"/></name> <operator pos:line="25" pos:column="38">=<pos:position pos:line="25" pos:column="39"/></operator> <literal type="number" pos:line="25" pos:column="40">0<pos:position pos:line="25" pos:column="41"/></literal></expr>;<pos:position pos:line="25" pos:column="42"/></expr_stmt></block></then> <comment type="block" pos:line="25" pos:column="43">/* no dest arg */</comment>
			<elseif pos:line="26" pos:column="25">else <if pos:line="26" pos:column="30">if <condition pos:line="26" pos:column="33">(<expr><call><name pos:line="26" pos:column="34">check_for_hostspec<pos:position pos:line="26" pos:column="52"/></name><argument_list pos:line="26" pos:column="52">(<argument><expr><operator pos:line="26" pos:column="53">*<pos:position pos:line="26" pos:column="54"/></operator><name pos:line="26" pos:column="54">argv<pos:position pos:line="26" pos:column="58"/></name></expr></argument>, <argument><expr><operator pos:line="26" pos:column="60">&amp;<pos:position pos:line="26" pos:column="65"/></operator><name pos:line="26" pos:column="61">dummy_host<pos:position pos:line="26" pos:column="71"/></name></expr></argument>, <argument><expr><operator pos:line="26" pos:column="73">&amp;<pos:position pos:line="26" pos:column="78"/></operator><name pos:line="26" pos:column="74">dummy_port<pos:position pos:line="26" pos:column="84"/></name></expr></argument>)<pos:position pos:line="26" pos:column="85"/></argument_list></call></expr>)<pos:position pos:line="26" pos:column="86"/></condition><then pos:line="26" pos:column="86"> <block pos:line="26" pos:column="87">{
				<expr_stmt><expr><call><name pos:line="27" pos:column="33">rprintf<pos:position pos:line="27" pos:column="40"/></name><argument_list pos:line="27" pos:column="40">(<argument><expr><name pos:line="27" pos:column="41">FERROR<pos:position pos:line="27" pos:column="47"/></name></expr></argument>,
					<argument><expr><literal type="string" pos:line="28" pos:column="41">"The source and destination cannot both be remote.\n"<pos:position pos:line="28" pos:column="94"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="95"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="96"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="29" pos:column="33">exit_cleanup<pos:position pos:line="29" pos:column="45"/></name><argument_list pos:line="29" pos:column="45">(<argument><expr><name pos:line="29" pos:column="46">RERR_SYNTAX<pos:position pos:line="29" pos:column="57"/></name></expr></argument>)<pos:position pos:line="29" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="59"/></expr_stmt>
			}<pos:position pos:line="30" pos:column="26"/></block></then></if></elseif> <else pos:line="30" pos:column="27">else <block pos:line="30" pos:column="32">{
				<expr_stmt><expr><name pos:line="31" pos:column="33">remote_argc<pos:position pos:line="31" pos:column="44"/></name><operator pos:line="31" pos:column="44">--<pos:position pos:line="31" pos:column="46"/></operator></expr>;<pos:position pos:line="31" pos:column="47"/></expr_stmt> <comment type="block" pos:line="31" pos:column="48">/* don't count dest */</comment>
				<expr_stmt><expr><name pos:line="32" pos:column="33">argc<pos:position pos:line="32" pos:column="37"/></name> <operator pos:line="32" pos:column="38">=<pos:position pos:line="32" pos:column="39"/></operator> <literal type="number" pos:line="32" pos:column="40">1<pos:position pos:line="32" pos:column="41"/></literal></expr>;<pos:position pos:line="32" pos:column="42"/></expr_stmt>
			}<pos:position pos:line="33" pos:column="26"/></block></else></if>
			<if pos:line="34" pos:column="25">if <condition pos:line="34" pos:column="28">(<expr><name pos:line="34" pos:column="29">filesfrom_host<pos:position pos:line="34" pos:column="43"/></name> <operator pos:line="34" pos:column="44">&amp;&amp;<pos:position pos:line="34" pos:column="54"/></operator> <operator pos:line="34" pos:column="47">*<pos:position pos:line="34" pos:column="48"/></operator><name pos:line="34" pos:column="48">filesfrom_host<pos:position pos:line="34" pos:column="62"/></name>
			    <operator pos:line="35" pos:column="29">&amp;&amp;<pos:position pos:line="35" pos:column="39"/></operator> <call><name pos:line="35" pos:column="32">strcmp<pos:position pos:line="35" pos:column="38"/></name><argument_list pos:line="35" pos:column="38">(<argument><expr><name pos:line="35" pos:column="39">filesfrom_host<pos:position pos:line="35" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="55">shell_machine<pos:position pos:line="35" pos:column="68"/></name></expr></argument>)<pos:position pos:line="35" pos:column="69"/></argument_list></call> <operator pos:line="35" pos:column="70">!=<pos:position pos:line="35" pos:column="72"/></operator> <literal type="number" pos:line="35" pos:column="73">0<pos:position pos:line="35" pos:column="74"/></literal></expr>)<pos:position pos:line="35" pos:column="75"/></condition><then pos:line="35" pos:column="75"> <block pos:line="35" pos:column="76">{
				<expr_stmt><expr><call><name pos:line="36" pos:column="33">rprintf<pos:position pos:line="36" pos:column="40"/></name><argument_list pos:line="36" pos:column="40">(<argument><expr><name pos:line="36" pos:column="41">FERROR<pos:position pos:line="36" pos:column="47"/></name></expr></argument>,
					<argument><expr><literal type="string" pos:line="37" pos:column="41">"--files-from hostname is not the same as the transfer hostname\n"<pos:position pos:line="37" pos:column="107"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="108"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="109"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="38" pos:column="33">exit_cleanup<pos:position pos:line="38" pos:column="45"/></name><argument_list pos:line="38" pos:column="45">(<argument><expr><name pos:line="38" pos:column="46">RERR_SYNTAX<pos:position pos:line="38" pos:column="57"/></name></expr></argument>)<pos:position pos:line="38" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="59"/></expr_stmt>
			}<pos:position pos:line="39" pos:column="26"/></block></then></if>
			<expr_stmt><expr><name pos:line="40" pos:column="25">am_sender<pos:position pos:line="40" pos:column="34"/></name> <operator pos:line="40" pos:column="35">=<pos:position pos:line="40" pos:column="36"/></operator> <literal type="number" pos:line="40" pos:column="37">0<pos:position pos:line="40" pos:column="38"/></literal></expr>;<pos:position pos:line="40" pos:column="39"/></expr_stmt>
			<if pos:line="41" pos:column="25">if <condition pos:line="41" pos:column="28">(<expr><name pos:line="41" pos:column="29">rsync_port<pos:position pos:line="41" pos:column="39"/></name></expr>)<pos:position pos:line="41" pos:column="40"/></condition><then pos:line="41" pos:column="40">
				<block type="pseudo"><expr_stmt><expr><name pos:line="42" pos:column="33">daemon_over_rsh<pos:position pos:line="42" pos:column="48"/></name> <operator pos:line="42" pos:column="49">=<pos:position pos:line="42" pos:column="50"/></operator> <ternary><condition><expr><name pos:line="42" pos:column="51">shell_cmd<pos:position pos:line="42" pos:column="60"/></name></expr> ?<pos:position pos:line="42" pos:column="62"/></condition><then pos:line="42" pos:column="62"> <expr><literal type="number" pos:line="42" pos:column="63">1<pos:position pos:line="42" pos:column="64"/></literal></expr> <pos:position pos:line="42" pos:column="65"/></then><else pos:line="42" pos:column="65">: <expr><operator pos:line="42" pos:column="67">-<pos:position pos:line="42" pos:column="68"/></operator><literal type="number" pos:line="42" pos:column="68">1<pos:position pos:line="42" pos:column="69"/></literal></expr></else></ternary></expr>;<pos:position pos:line="42" pos:column="70"/></expr_stmt></block></then></if>
		}<pos:position pos:line="43" pos:column="18"/></block></then> <else pos:line="43" pos:column="19">else <block pos:line="43" pos:column="24">{ <comment type="block" pos:line="43" pos:column="26">/* source is local, check dest arg */</comment>
			<expr_stmt><expr><name pos:line="44" pos:column="25">am_sender<pos:position pos:line="44" pos:column="34"/></name> <operator pos:line="44" pos:column="35">=<pos:position pos:line="44" pos:column="36"/></operator> <literal type="number" pos:line="44" pos:column="37">1<pos:position pos:line="44" pos:column="38"/></literal></expr>;<pos:position pos:line="44" pos:column="39"/></expr_stmt>

			<if pos:line="46" pos:column="25">if <condition pos:line="46" pos:column="28">(<expr><name pos:line="46" pos:column="29">argc<pos:position pos:line="46" pos:column="33"/></name> <operator pos:line="46" pos:column="34">&gt;<pos:position pos:line="46" pos:column="38"/></operator> <literal type="number" pos:line="46" pos:column="36">1<pos:position pos:line="46" pos:column="37"/></literal></expr>)<pos:position pos:line="46" pos:column="38"/></condition><then pos:line="46" pos:column="38"> <block pos:line="46" pos:column="39">{
				<expr_stmt><expr><name pos:line="47" pos:column="33">p<pos:position pos:line="47" pos:column="34"/></name> <operator pos:line="47" pos:column="35">=<pos:position pos:line="47" pos:column="36"/></operator> <name><name pos:line="47" pos:column="37">argv<pos:position pos:line="47" pos:column="41"/></name><index pos:line="47" pos:column="41">[<expr><operator pos:line="47" pos:column="42">--<pos:position pos:line="47" pos:column="44"/></operator><name pos:line="47" pos:column="44">argc<pos:position pos:line="47" pos:column="48"/></name></expr>]<pos:position pos:line="47" pos:column="49"/></index></name></expr>;<pos:position pos:line="47" pos:column="50"/></expr_stmt>
				<expr_stmt><expr><name pos:line="48" pos:column="33">remote_argv<pos:position pos:line="48" pos:column="44"/></name> <operator pos:line="48" pos:column="45">=<pos:position pos:line="48" pos:column="46"/></operator> <name pos:line="48" pos:column="47">argv<pos:position pos:line="48" pos:column="51"/></name> <operator pos:line="48" pos:column="52">+<pos:position pos:line="48" pos:column="53"/></operator> <name pos:line="48" pos:column="54">argc<pos:position pos:line="48" pos:column="58"/></name></expr>;<pos:position pos:line="48" pos:column="59"/></expr_stmt>
			}<pos:position pos:line="49" pos:column="26"/></block></then> <else pos:line="49" pos:column="27">else <block pos:line="49" pos:column="32">{
				<decl_stmt><decl><specifier pos:line="50" pos:column="33">static<pos:position pos:line="50" pos:column="39"/></specifier> <type><name pos:line="50" pos:column="40">char<pos:position pos:line="50" pos:column="44"/></name> <modifier pos:line="50" pos:column="45">*<pos:position pos:line="50" pos:column="46"/></modifier></type><name><name pos:line="50" pos:column="46">dotarg<pos:position pos:line="50" pos:column="52"/></name><index pos:line="50" pos:column="52">[<expr><literal type="number" pos:line="50" pos:column="53">1<pos:position pos:line="50" pos:column="54"/></literal></expr>]<pos:position pos:line="50" pos:column="55"/></index></name> <init pos:line="50" pos:column="56">= <expr><block pos:line="50" pos:column="58">{ <expr><literal type="string" pos:line="50" pos:column="60">"."<pos:position pos:line="50" pos:column="63"/></literal></expr> }<pos:position pos:line="50" pos:column="65"/></block></expr></init></decl>;<pos:position pos:line="50" pos:column="66"/></decl_stmt>
				<expr_stmt><expr><name pos:line="51" pos:column="33">p<pos:position pos:line="51" pos:column="34"/></name> <operator pos:line="51" pos:column="35">=<pos:position pos:line="51" pos:column="36"/></operator> <name><name pos:line="51" pos:column="37">dotarg<pos:position pos:line="51" pos:column="43"/></name><index pos:line="51" pos:column="43">[<expr><literal type="number" pos:line="51" pos:column="44">0<pos:position pos:line="51" pos:column="45"/></literal></expr>]<pos:position pos:line="51" pos:column="46"/></index></name></expr>;<pos:position pos:line="51" pos:column="47"/></expr_stmt>
				<expr_stmt><expr><name pos:line="52" pos:column="33">remote_argv<pos:position pos:line="52" pos:column="44"/></name> <operator pos:line="52" pos:column="45">=<pos:position pos:line="52" pos:column="46"/></operator> <name pos:line="52" pos:column="47">dotarg<pos:position pos:line="52" pos:column="53"/></name></expr>;<pos:position pos:line="52" pos:column="54"/></expr_stmt>
			}<pos:position pos:line="53" pos:column="26"/></block></else></if>
			<expr_stmt><expr><name pos:line="54" pos:column="25">remote_argc<pos:position pos:line="54" pos:column="36"/></name> <operator pos:line="54" pos:column="37">=<pos:position pos:line="54" pos:column="38"/></operator> <literal type="number" pos:line="54" pos:column="39">1<pos:position pos:line="54" pos:column="40"/></literal></expr>;<pos:position pos:line="54" pos:column="41"/></expr_stmt>

			<expr_stmt><expr><name pos:line="56" pos:column="25">path<pos:position pos:line="56" pos:column="29"/></name> <operator pos:line="56" pos:column="30">=<pos:position pos:line="56" pos:column="31"/></operator> <call><name pos:line="56" pos:column="32">check_for_hostspec<pos:position pos:line="56" pos:column="50"/></name><argument_list pos:line="56" pos:column="50">(<argument><expr><name pos:line="56" pos:column="51">p<pos:position pos:line="56" pos:column="52"/></name></expr></argument>, <argument><expr><operator pos:line="56" pos:column="54">&amp;<pos:position pos:line="56" pos:column="59"/></operator><name pos:line="56" pos:column="55">shell_machine<pos:position pos:line="56" pos:column="68"/></name></expr></argument>, <argument><expr><operator pos:line="56" pos:column="70">&amp;<pos:position pos:line="56" pos:column="75"/></operator><name pos:line="56" pos:column="71">rsync_port<pos:position pos:line="56" pos:column="81"/></name></expr></argument>)<pos:position pos:line="56" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="83"/></expr_stmt>
			<if pos:line="57" pos:column="25">if <condition pos:line="57" pos:column="28">(<expr><name pos:line="57" pos:column="29">path<pos:position pos:line="57" pos:column="33"/></name> <operator pos:line="57" pos:column="34">&amp;&amp;<pos:position pos:line="57" pos:column="44"/></operator> <name pos:line="57" pos:column="37">filesfrom_host<pos:position pos:line="57" pos:column="51"/></name> <operator pos:line="57" pos:column="52">&amp;&amp;<pos:position pos:line="57" pos:column="62"/></operator> <operator pos:line="57" pos:column="55">*<pos:position pos:line="57" pos:column="56"/></operator><name pos:line="57" pos:column="56">filesfrom_host<pos:position pos:line="57" pos:column="70"/></name>
			    <operator pos:line="58" pos:column="29">&amp;&amp;<pos:position pos:line="58" pos:column="39"/></operator> <call><name pos:line="58" pos:column="32">strcmp<pos:position pos:line="58" pos:column="38"/></name><argument_list pos:line="58" pos:column="38">(<argument><expr><name pos:line="58" pos:column="39">filesfrom_host<pos:position pos:line="58" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="55">shell_machine<pos:position pos:line="58" pos:column="68"/></name></expr></argument>)<pos:position pos:line="58" pos:column="69"/></argument_list></call> <operator pos:line="58" pos:column="70">!=<pos:position pos:line="58" pos:column="72"/></operator> <literal type="number" pos:line="58" pos:column="73">0<pos:position pos:line="58" pos:column="74"/></literal></expr>)<pos:position pos:line="58" pos:column="75"/></condition><then pos:line="58" pos:column="75"> <block pos:line="58" pos:column="76">{
				<expr_stmt><expr><call><name pos:line="59" pos:column="33">rprintf<pos:position pos:line="59" pos:column="40"/></name><argument_list pos:line="59" pos:column="40">(<argument><expr><name pos:line="59" pos:column="41">FERROR<pos:position pos:line="59" pos:column="47"/></name></expr></argument>,
					<argument><expr><literal type="string" pos:line="60" pos:column="41">"--files-from hostname is not the same as the transfer hostname\n"<pos:position pos:line="60" pos:column="107"/></literal></expr></argument>)<pos:position pos:line="60" pos:column="108"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="109"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="61" pos:column="33">exit_cleanup<pos:position pos:line="61" pos:column="45"/></name><argument_list pos:line="61" pos:column="45">(<argument><expr><name pos:line="61" pos:column="46">RERR_SYNTAX<pos:position pos:line="61" pos:column="57"/></name></expr></argument>)<pos:position pos:line="61" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="59"/></expr_stmt>
			}<pos:position pos:line="62" pos:column="26"/></block></then></if>
			<if pos:line="63" pos:column="25">if <condition pos:line="63" pos:column="28">(<expr><operator pos:line="63" pos:column="29">!<pos:position pos:line="63" pos:column="30"/></operator><name pos:line="63" pos:column="30">path<pos:position pos:line="63" pos:column="34"/></name></expr>)<pos:position pos:line="63" pos:column="35"/></condition><then pos:line="63" pos:column="35"> <block pos:line="63" pos:column="36">{ <comment type="block" pos:line="63" pos:column="38">/* no hostspec found, so src &amp; dest are local */</comment>
				<expr_stmt><expr><name pos:line="64" pos:column="33">local_server<pos:position pos:line="64" pos:column="45"/></name> <operator pos:line="64" pos:column="46">=<pos:position pos:line="64" pos:column="47"/></operator> <literal type="number" pos:line="64" pos:column="48">1<pos:position pos:line="64" pos:column="49"/></literal></expr>;<pos:position pos:line="64" pos:column="50"/></expr_stmt>
				<if pos:line="65" pos:column="33">if <condition pos:line="65" pos:column="36">(<expr><name pos:line="65" pos:column="37">filesfrom_host<pos:position pos:line="65" pos:column="51"/></name></expr>)<pos:position pos:line="65" pos:column="52"/></condition><then pos:line="65" pos:column="52"> <block pos:line="65" pos:column="53">{
					<expr_stmt><expr><call><name pos:line="66" pos:column="41">rprintf<pos:position pos:line="66" pos:column="48"/></name><argument_list pos:line="66" pos:column="48">(<argument><expr><name pos:line="66" pos:column="49">FERROR<pos:position pos:line="66" pos:column="55"/></name></expr></argument>,
						<argument><expr><literal type="string" pos:line="67" pos:column="49">"--files-from cannot be remote when the transfer is local\n"<pos:position pos:line="67" pos:column="109"/></literal></expr></argument>)<pos:position pos:line="67" pos:column="110"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="111"/></expr_stmt>
					<expr_stmt><expr><call><name pos:line="68" pos:column="41">exit_cleanup<pos:position pos:line="68" pos:column="53"/></name><argument_list pos:line="68" pos:column="53">(<argument><expr><name pos:line="68" pos:column="54">RERR_SYNTAX<pos:position pos:line="68" pos:column="65"/></name></expr></argument>)<pos:position pos:line="68" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="67"/></expr_stmt>
				}<pos:position pos:line="69" pos:column="34"/></block></then></if>
				<expr_stmt><expr><name pos:line="70" pos:column="33">shell_machine<pos:position pos:line="70" pos:column="46"/></name> <operator pos:line="70" pos:column="47">=<pos:position pos:line="70" pos:column="48"/></operator> <name pos:line="70" pos:column="49">NULL<pos:position pos:line="70" pos:column="53"/></name></expr>;<pos:position pos:line="70" pos:column="54"/></expr_stmt>
			}<pos:position pos:line="71" pos:column="26"/></block></then> <else pos:line="71" pos:column="27">else <block pos:line="71" pos:column="32">{ <comment type="block" pos:line="71" pos:column="34">/* hostspec was found, so dest is remote */</comment>
				<expr_stmt><expr><name><name pos:line="72" pos:column="33">argv<pos:position pos:line="72" pos:column="37"/></name><index pos:line="72" pos:column="37">[<expr><name pos:line="72" pos:column="38">argc<pos:position pos:line="72" pos:column="42"/></name></expr>]<pos:position pos:line="72" pos:column="43"/></index></name> <operator pos:line="72" pos:column="44">=<pos:position pos:line="72" pos:column="45"/></operator> <name pos:line="72" pos:column="46">path<pos:position pos:line="72" pos:column="50"/></name></expr>;<pos:position pos:line="72" pos:column="51"/></expr_stmt>
				<if pos:line="73" pos:column="33">if <condition pos:line="73" pos:column="36">(<expr><name pos:line="73" pos:column="37">rsync_port<pos:position pos:line="73" pos:column="47"/></name></expr>)<pos:position pos:line="73" pos:column="48"/></condition><then pos:line="73" pos:column="48">
					<block type="pseudo"><expr_stmt><expr><name pos:line="74" pos:column="41">daemon_over_rsh<pos:position pos:line="74" pos:column="56"/></name> <operator pos:line="74" pos:column="57">=<pos:position pos:line="74" pos:column="58"/></operator> <ternary><condition><expr><name pos:line="74" pos:column="59">shell_cmd<pos:position pos:line="74" pos:column="68"/></name></expr> ?<pos:position pos:line="74" pos:column="70"/></condition><then pos:line="74" pos:column="70"> <expr><literal type="number" pos:line="74" pos:column="71">1<pos:position pos:line="74" pos:column="72"/></literal></expr> <pos:position pos:line="74" pos:column="73"/></then><else pos:line="74" pos:column="73">: <expr><operator pos:line="74" pos:column="75">-<pos:position pos:line="74" pos:column="76"/></operator><literal type="number" pos:line="74" pos:column="76">1<pos:position pos:line="74" pos:column="77"/></literal></expr></else></ternary></expr>;<pos:position pos:line="74" pos:column="78"/></expr_stmt></block></then></if>
			}<pos:position pos:line="75" pos:column="26"/></block></else></if>
		}<pos:position pos:line="76" pos:column="18"/></block></else></if>
	}<pos:position pos:line="77" pos:column="10"/></block></then> <else pos:line="77" pos:column="11">else <block pos:line="77" pos:column="16">{  <comment type="block" pos:line="77" pos:column="19">/* read_batch */</comment>
		<expr_stmt><expr><name pos:line="78" pos:column="17">local_server<pos:position pos:line="78" pos:column="29"/></name> <operator pos:line="78" pos:column="30">=<pos:position pos:line="78" pos:column="31"/></operator> <literal type="number" pos:line="78" pos:column="32">1<pos:position pos:line="78" pos:column="33"/></literal></expr>;<pos:position pos:line="78" pos:column="34"/></expr_stmt>
		<if pos:line="79" pos:column="17">if <condition pos:line="79" pos:column="20">(<expr><call><name pos:line="79" pos:column="21">check_for_hostspec<pos:position pos:line="79" pos:column="39"/></name><argument_list pos:line="79" pos:column="39">(<argument><expr><name><name pos:line="79" pos:column="40">argv<pos:position pos:line="79" pos:column="44"/></name><index pos:line="79" pos:column="44">[<expr><name pos:line="79" pos:column="45">argc<pos:position pos:line="79" pos:column="49"/></name><operator pos:line="79" pos:column="49">-<pos:position pos:line="79" pos:column="50"/></operator><literal type="number" pos:line="79" pos:column="50">1<pos:position pos:line="79" pos:column="51"/></literal></expr>]<pos:position pos:line="79" pos:column="52"/></index></name></expr></argument>, <argument><expr><operator pos:line="79" pos:column="54">&amp;<pos:position pos:line="79" pos:column="59"/></operator><name pos:line="79" pos:column="55">shell_machine<pos:position pos:line="79" pos:column="68"/></name></expr></argument>, <argument><expr><operator pos:line="79" pos:column="70">&amp;<pos:position pos:line="79" pos:column="75"/></operator><name pos:line="79" pos:column="71">rsync_port<pos:position pos:line="79" pos:column="81"/></name></expr></argument>)<pos:position pos:line="79" pos:column="82"/></argument_list></call></expr>)<pos:position pos:line="79" pos:column="83"/></condition><then pos:line="79" pos:column="83"> <block pos:line="79" pos:column="84">{
			<expr_stmt><expr><call><name pos:line="80" pos:column="25">rprintf<pos:position pos:line="80" pos:column="32"/></name><argument_list pos:line="80" pos:column="32">(<argument><expr><name pos:line="80" pos:column="33">FERROR<pos:position pos:line="80" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="80" pos:column="41">"remote destination is not allowed with --read-batch\n"<pos:position pos:line="80" pos:column="96"/></literal></expr></argument>)<pos:position pos:line="80" pos:column="97"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="98"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="81" pos:column="25">exit_cleanup<pos:position pos:line="81" pos:column="37"/></name><argument_list pos:line="81" pos:column="37">(<argument><expr><name pos:line="81" pos:column="38">RERR_SYNTAX<pos:position pos:line="81" pos:column="49"/></name></expr></argument>)<pos:position pos:line="81" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="51"/></expr_stmt>
		}<pos:position pos:line="82" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name pos:line="83" pos:column="17">remote_argv<pos:position pos:line="83" pos:column="28"/></name> <operator pos:line="83" pos:column="29">=<pos:position pos:line="83" pos:column="30"/></operator> <name pos:line="83" pos:column="31">argv<pos:position pos:line="83" pos:column="35"/></name> <operator pos:line="83" pos:column="36">+=<pos:position pos:line="83" pos:column="38"/></operator> <name pos:line="83" pos:column="39">argc<pos:position pos:line="83" pos:column="43"/></name> <operator pos:line="83" pos:column="44">-<pos:position pos:line="83" pos:column="45"/></operator> <literal type="number" pos:line="83" pos:column="46">1<pos:position pos:line="83" pos:column="47"/></literal></expr>;<pos:position pos:line="83" pos:column="48"/></expr_stmt>
		<expr_stmt><expr><name pos:line="84" pos:column="17">remote_argc<pos:position pos:line="84" pos:column="28"/></name> <operator pos:line="84" pos:column="29">=<pos:position pos:line="84" pos:column="30"/></operator> <name pos:line="84" pos:column="31">argc<pos:position pos:line="84" pos:column="35"/></name> <operator pos:line="84" pos:column="36">=<pos:position pos:line="84" pos:column="37"/></operator> <literal type="number" pos:line="84" pos:column="38">1<pos:position pos:line="84" pos:column="39"/></literal></expr>;<pos:position pos:line="84" pos:column="40"/></expr_stmt>
	}<pos:position pos:line="85" pos:column="10"/></block></else></if>

	<if pos:line="87" pos:column="9">if <condition pos:line="87" pos:column="12">(<expr><operator pos:line="87" pos:column="13">!<pos:position pos:line="87" pos:column="14"/></operator><name pos:line="87" pos:column="14">rsync_port<pos:position pos:line="87" pos:column="24"/></name> <operator pos:line="87" pos:column="25">&amp;&amp;<pos:position pos:line="87" pos:column="35"/></operator> <name pos:line="87" pos:column="28">remote_argc<pos:position pos:line="87" pos:column="39"/></name> <operator pos:line="87" pos:column="40">&amp;&amp;<pos:position pos:line="87" pos:column="50"/></operator> <operator pos:line="87" pos:column="43">!<pos:position pos:line="87" pos:column="44"/></operator><operator pos:line="87" pos:column="44">*<pos:position pos:line="87" pos:column="45"/></operator><operator pos:line="87" pos:column="45">*<pos:position pos:line="87" pos:column="46"/></operator><name pos:line="87" pos:column="46">remote_argv<pos:position pos:line="87" pos:column="57"/></name></expr>)<pos:position pos:line="87" pos:column="58"/></condition><then pos:line="87" pos:column="58"> <comment type="block" pos:line="87" pos:column="59">/* Turn an empty arg into a dot dir. */</comment>
		<block type="pseudo"><expr_stmt><expr><operator pos:line="88" pos:column="17">*<pos:position pos:line="88" pos:column="18"/></operator><name pos:line="88" pos:column="18">remote_argv<pos:position pos:line="88" pos:column="29"/></name> <operator pos:line="88" pos:column="30">=<pos:position pos:line="88" pos:column="31"/></operator> <literal type="string" pos:line="88" pos:column="32">"."<pos:position pos:line="88" pos:column="35"/></literal></expr>;<pos:position pos:line="88" pos:column="36"/></expr_stmt></block></then></if>

	<if pos:line="90" pos:column="9">if <condition pos:line="90" pos:column="12">(<expr><name pos:line="90" pos:column="13">am_sender<pos:position pos:line="90" pos:column="22"/></name></expr>)<pos:position pos:line="90" pos:column="23"/></condition><then pos:line="90" pos:column="23"> <block pos:line="90" pos:column="24">{
		<decl_stmt><decl><type><name pos:line="91" pos:column="17">char<pos:position pos:line="91" pos:column="21"/></name> <modifier pos:line="91" pos:column="22">*<pos:position pos:line="91" pos:column="23"/></modifier></type><name pos:line="91" pos:column="23">dummy_host<pos:position pos:line="91" pos:column="33"/></name></decl>;<pos:position pos:line="91" pos:column="34"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="92" pos:column="17">int<pos:position pos:line="92" pos:column="20"/></name></type> <name pos:line="92" pos:column="21">dummy_port<pos:position pos:line="92" pos:column="31"/></name> <init pos:line="92" pos:column="32">= <expr><name pos:line="92" pos:column="34">rsync_port<pos:position pos:line="92" pos:column="44"/></name></expr></init></decl>;<pos:position pos:line="92" pos:column="45"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="93" pos:column="17">int<pos:position pos:line="93" pos:column="20"/></name></type> <name pos:line="93" pos:column="21">i<pos:position pos:line="93" pos:column="22"/></name></decl>;<pos:position pos:line="93" pos:column="23"/></decl_stmt>
		<comment type="block" pos:line="94" pos:column="17">/* For local source, extra source args must not have hostspec. */</comment>
		<for pos:line="95" pos:column="17">for <control pos:line="95" pos:column="21">(<init><expr><name pos:line="95" pos:column="22">i<pos:position pos:line="95" pos:column="23"/></name> <operator pos:line="95" pos:column="24">=<pos:position pos:line="95" pos:column="25"/></operator> <literal type="number" pos:line="95" pos:column="26">1<pos:position pos:line="95" pos:column="27"/></literal></expr>;<pos:position pos:line="95" pos:column="28"/></init> <condition><expr><name pos:line="95" pos:column="29">i<pos:position pos:line="95" pos:column="30"/></name> <operator pos:line="95" pos:column="31">&lt;<pos:position pos:line="95" pos:column="35"/></operator> <name pos:line="95" pos:column="33">argc<pos:position pos:line="95" pos:column="37"/></name></expr>;<pos:position pos:line="95" pos:column="38"/></condition> <incr><expr><name pos:line="95" pos:column="39">i<pos:position pos:line="95" pos:column="40"/></name><operator pos:line="95" pos:column="40">++<pos:position pos:line="95" pos:column="42"/></operator></expr></incr>)<pos:position pos:line="95" pos:column="43"/></control> <block pos:line="95" pos:column="44">{
			<if pos:line="96" pos:column="25">if <condition pos:line="96" pos:column="28">(<expr><call><name pos:line="96" pos:column="29">check_for_hostspec<pos:position pos:line="96" pos:column="47"/></name><argument_list pos:line="96" pos:column="47">(<argument><expr><name><name pos:line="96" pos:column="48">argv<pos:position pos:line="96" pos:column="52"/></name><index pos:line="96" pos:column="52">[<expr><name pos:line="96" pos:column="53">i<pos:position pos:line="96" pos:column="54"/></name></expr>]<pos:position pos:line="96" pos:column="55"/></index></name></expr></argument>, <argument><expr><operator pos:line="96" pos:column="57">&amp;<pos:position pos:line="96" pos:column="62"/></operator><name pos:line="96" pos:column="58">dummy_host<pos:position pos:line="96" pos:column="68"/></name></expr></argument>, <argument><expr><operator pos:line="96" pos:column="70">&amp;<pos:position pos:line="96" pos:column="75"/></operator><name pos:line="96" pos:column="71">dummy_port<pos:position pos:line="96" pos:column="81"/></name></expr></argument>)<pos:position pos:line="96" pos:column="82"/></argument_list></call></expr>)<pos:position pos:line="96" pos:column="83"/></condition><then pos:line="96" pos:column="83"> <block pos:line="96" pos:column="84">{
				<expr_stmt><expr><call><name pos:line="97" pos:column="33">rprintf<pos:position pos:line="97" pos:column="40"/></name><argument_list pos:line="97" pos:column="40">(<argument><expr><name pos:line="97" pos:column="41">FERROR<pos:position pos:line="97" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="97" pos:column="49">"Unexpected remote arg: %s\n"<pos:position pos:line="97" pos:column="78"/></literal></expr></argument>, <argument><expr><name><name pos:line="97" pos:column="80">argv<pos:position pos:line="97" pos:column="84"/></name><index pos:line="97" pos:column="84">[<expr><name pos:line="97" pos:column="85">i<pos:position pos:line="97" pos:column="86"/></name></expr>]<pos:position pos:line="97" pos:column="87"/></index></name></expr></argument>)<pos:position pos:line="97" pos:column="88"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="89"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="98" pos:column="33">exit_cleanup<pos:position pos:line="98" pos:column="45"/></name><argument_list pos:line="98" pos:column="45">(<argument><expr><name pos:line="98" pos:column="46">RERR_SYNTAX<pos:position pos:line="98" pos:column="57"/></name></expr></argument>)<pos:position pos:line="98" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="59"/></expr_stmt>
			}<pos:position pos:line="99" pos:column="26"/></block></then></if>
		}<pos:position pos:line="100" pos:column="18"/></block></for>
	}<pos:position pos:line="101" pos:column="10"/></block></then> <else pos:line="101" pos:column="11">else <block pos:line="101" pos:column="16">{
		<decl_stmt><decl><type><name pos:line="102" pos:column="17">char<pos:position pos:line="102" pos:column="21"/></name> <modifier pos:line="102" pos:column="22">*<pos:position pos:line="102" pos:column="23"/></modifier></type><name pos:line="102" pos:column="23">dummy_host<pos:position pos:line="102" pos:column="33"/></name></decl>;<pos:position pos:line="102" pos:column="34"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="103" pos:column="17">int<pos:position pos:line="103" pos:column="20"/></name></type> <name pos:line="103" pos:column="21">dummy_port<pos:position pos:line="103" pos:column="31"/></name> <init pos:line="103" pos:column="32">= <expr><name pos:line="103" pos:column="34">rsync_port<pos:position pos:line="103" pos:column="44"/></name></expr></init></decl>;<pos:position pos:line="103" pos:column="45"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="104" pos:column="17">int<pos:position pos:line="104" pos:column="20"/></name></type> <name pos:line="104" pos:column="21">i<pos:position pos:line="104" pos:column="22"/></name></decl>;<pos:position pos:line="104" pos:column="23"/></decl_stmt>
		<comment type="block" pos:line="105" pos:column="17">/* For remote source, any extra source args must have either
		 * the same hostname or an empty hostname. */</comment>
		<for pos:line="107" pos:column="17">for <control pos:line="107" pos:column="21">(<init><expr><name pos:line="107" pos:column="22">i<pos:position pos:line="107" pos:column="23"/></name> <operator pos:line="107" pos:column="24">=<pos:position pos:line="107" pos:column="25"/></operator> <literal type="number" pos:line="107" pos:column="26">1<pos:position pos:line="107" pos:column="27"/></literal></expr>;<pos:position pos:line="107" pos:column="28"/></init> <condition><expr><name pos:line="107" pos:column="29">i<pos:position pos:line="107" pos:column="30"/></name> <operator pos:line="107" pos:column="31">&lt;<pos:position pos:line="107" pos:column="35"/></operator> <name pos:line="107" pos:column="33">remote_argc<pos:position pos:line="107" pos:column="44"/></name></expr>;<pos:position pos:line="107" pos:column="45"/></condition> <incr><expr><name pos:line="107" pos:column="46">i<pos:position pos:line="107" pos:column="47"/></name><operator pos:line="107" pos:column="47">++<pos:position pos:line="107" pos:column="49"/></operator></expr></incr>)<pos:position pos:line="107" pos:column="50"/></control> <block pos:line="107" pos:column="51">{
			<decl_stmt><decl><type><name pos:line="108" pos:column="25">char<pos:position pos:line="108" pos:column="29"/></name> <modifier pos:line="108" pos:column="30">*<pos:position pos:line="108" pos:column="31"/></modifier></type><name pos:line="108" pos:column="31">arg<pos:position pos:line="108" pos:column="34"/></name> <init pos:line="108" pos:column="35">= <expr><call><name pos:line="108" pos:column="37">check_for_hostspec<pos:position pos:line="108" pos:column="55"/></name><argument_list pos:line="108" pos:column="55">(<argument><expr><name><name pos:line="108" pos:column="56">remote_argv<pos:position pos:line="108" pos:column="67"/></name><index pos:line="108" pos:column="67">[<expr><name pos:line="108" pos:column="68">i<pos:position pos:line="108" pos:column="69"/></name></expr>]<pos:position pos:line="108" pos:column="70"/></index></name></expr></argument>, <argument><expr><operator pos:line="108" pos:column="72">&amp;<pos:position pos:line="108" pos:column="77"/></operator><name pos:line="108" pos:column="73">dummy_host<pos:position pos:line="108" pos:column="83"/></name></expr></argument>, <argument><expr><operator pos:line="108" pos:column="85">&amp;<pos:position pos:line="108" pos:column="90"/></operator><name pos:line="108" pos:column="86">dummy_port<pos:position pos:line="108" pos:column="96"/></name></expr></argument>)<pos:position pos:line="108" pos:column="97"/></argument_list></call></expr></init></decl>;<pos:position pos:line="108" pos:column="98"/></decl_stmt>
			<if pos:line="109" pos:column="25">if <condition pos:line="109" pos:column="28">(<expr><operator pos:line="109" pos:column="29">!<pos:position pos:line="109" pos:column="30"/></operator><name pos:line="109" pos:column="30">arg<pos:position pos:line="109" pos:column="33"/></name></expr>)<pos:position pos:line="109" pos:column="34"/></condition><then pos:line="109" pos:column="34"> <block pos:line="109" pos:column="35">{
				<expr_stmt><expr><call><name pos:line="110" pos:column="33">rprintf<pos:position pos:line="110" pos:column="40"/></name><argument_list pos:line="110" pos:column="40">(<argument><expr><name pos:line="110" pos:column="41">FERROR<pos:position pos:line="110" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="110" pos:column="49">"Unexpected local arg: %s\n"<pos:position pos:line="110" pos:column="77"/></literal></expr></argument>, <argument><expr><name><name pos:line="110" pos:column="79">remote_argv<pos:position pos:line="110" pos:column="90"/></name><index pos:line="110" pos:column="90">[<expr><name pos:line="110" pos:column="91">i<pos:position pos:line="110" pos:column="92"/></name></expr>]<pos:position pos:line="110" pos:column="93"/></index></name></expr></argument>)<pos:position pos:line="110" pos:column="94"/></argument_list></call></expr>;<pos:position pos:line="110" pos:column="95"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="111" pos:column="33">rprintf<pos:position pos:line="111" pos:column="40"/></name><argument_list pos:line="111" pos:column="40">(<argument><expr><name pos:line="111" pos:column="41">FERROR<pos:position pos:line="111" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="111" pos:column="49">"If arg is a remote file/dir, prefix it with a colon (:).\n"<pos:position pos:line="111" pos:column="109"/></literal></expr></argument>)<pos:position pos:line="111" pos:column="110"/></argument_list></call></expr>;<pos:position pos:line="111" pos:column="111"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="112" pos:column="33">exit_cleanup<pos:position pos:line="112" pos:column="45"/></name><argument_list pos:line="112" pos:column="45">(<argument><expr><name pos:line="112" pos:column="46">RERR_SYNTAX<pos:position pos:line="112" pos:column="57"/></name></expr></argument>)<pos:position pos:line="112" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="112" pos:column="59"/></expr_stmt>
			}<pos:position pos:line="113" pos:column="26"/></block></then></if>
			<if pos:line="114" pos:column="25">if <condition pos:line="114" pos:column="28">(<expr><operator pos:line="114" pos:column="29">*<pos:position pos:line="114" pos:column="30"/></operator><name pos:line="114" pos:column="30">dummy_host<pos:position pos:line="114" pos:column="40"/></name> <operator pos:line="114" pos:column="41">&amp;&amp;<pos:position pos:line="114" pos:column="51"/></operator> <call><name pos:line="114" pos:column="44">strcmp<pos:position pos:line="114" pos:column="50"/></name><argument_list pos:line="114" pos:column="50">(<argument><expr><name pos:line="114" pos:column="51">dummy_host<pos:position pos:line="114" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="114" pos:column="63">shell_machine<pos:position pos:line="114" pos:column="76"/></name></expr></argument>)<pos:position pos:line="114" pos:column="77"/></argument_list></call> <operator pos:line="114" pos:column="78">!=<pos:position pos:line="114" pos:column="80"/></operator> <literal type="number" pos:line="114" pos:column="81">0<pos:position pos:line="114" pos:column="82"/></literal></expr>)<pos:position pos:line="114" pos:column="83"/></condition><then pos:line="114" pos:column="83"> <block pos:line="114" pos:column="84">{
				<expr_stmt><expr><call><name pos:line="115" pos:column="33">rprintf<pos:position pos:line="115" pos:column="40"/></name><argument_list pos:line="115" pos:column="40">(<argument><expr><name pos:line="115" pos:column="41">FERROR<pos:position pos:line="115" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="115" pos:column="49">"All source args must come from the same machine.\n"<pos:position pos:line="115" pos:column="101"/></literal></expr></argument>)<pos:position pos:line="115" pos:column="102"/></argument_list></call></expr>;<pos:position pos:line="115" pos:column="103"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="116" pos:column="33">exit_cleanup<pos:position pos:line="116" pos:column="45"/></name><argument_list pos:line="116" pos:column="45">(<argument><expr><name pos:line="116" pos:column="46">RERR_SYNTAX<pos:position pos:line="116" pos:column="57"/></name></expr></argument>)<pos:position pos:line="116" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="116" pos:column="59"/></expr_stmt>
			}<pos:position pos:line="117" pos:column="26"/></block></then></if>
			<if pos:line="118" pos:column="25">if <condition pos:line="118" pos:column="28">(<expr><name pos:line="118" pos:column="29">rsync_port<pos:position pos:line="118" pos:column="39"/></name> <operator pos:line="118" pos:column="40">!=<pos:position pos:line="118" pos:column="42"/></operator> <name pos:line="118" pos:column="43">dummy_port<pos:position pos:line="118" pos:column="53"/></name></expr>)<pos:position pos:line="118" pos:column="54"/></condition><then pos:line="118" pos:column="54"> <block pos:line="118" pos:column="55">{
				<if pos:line="119" pos:column="33">if <condition pos:line="119" pos:column="36">(<expr><operator pos:line="119" pos:column="37">!<pos:position pos:line="119" pos:column="38"/></operator><name pos:line="119" pos:column="38">rsync_port<pos:position pos:line="119" pos:column="48"/></name> <operator pos:line="119" pos:column="49">||<pos:position pos:line="119" pos:column="51"/></operator> <operator pos:line="119" pos:column="52">!<pos:position pos:line="119" pos:column="53"/></operator><name pos:line="119" pos:column="53">dummy_port<pos:position pos:line="119" pos:column="63"/></name></expr>)<pos:position pos:line="119" pos:column="64"/></condition><then pos:line="119" pos:column="64">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="120" pos:column="41">rprintf<pos:position pos:line="120" pos:column="48"/></name><argument_list pos:line="120" pos:column="48">(<argument><expr><name pos:line="120" pos:column="49">FERROR<pos:position pos:line="120" pos:column="55"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="120" pos:column="57">"All source args must use the same hostspec format.\n"<pos:position pos:line="120" pos:column="111"/></literal></expr></argument>)<pos:position pos:line="120" pos:column="112"/></argument_list></call></expr>;<pos:position pos:line="120" pos:column="113"/></expr_stmt></block></then>
				<else pos:line="121" pos:column="33">else
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="122" pos:column="41">rprintf<pos:position pos:line="122" pos:column="48"/></name><argument_list pos:line="122" pos:column="48">(<argument><expr><name pos:line="122" pos:column="49">FERROR<pos:position pos:line="122" pos:column="55"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="122" pos:column="57">"All source args must use the same port number.\n"<pos:position pos:line="122" pos:column="107"/></literal></expr></argument>)<pos:position pos:line="122" pos:column="108"/></argument_list></call></expr>;<pos:position pos:line="122" pos:column="109"/></expr_stmt></block></else></if>
				<expr_stmt><expr><call><name pos:line="123" pos:column="33">exit_cleanup<pos:position pos:line="123" pos:column="45"/></name><argument_list pos:line="123" pos:column="45">(<argument><expr><name pos:line="123" pos:column="46">RERR_SYNTAX<pos:position pos:line="123" pos:column="57"/></name></expr></argument>)<pos:position pos:line="123" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="123" pos:column="59"/></expr_stmt>
			}<pos:position pos:line="124" pos:column="26"/></block></then></if>
			<if pos:line="125" pos:column="25">if <condition pos:line="125" pos:column="28">(<expr><operator pos:line="125" pos:column="29">!<pos:position pos:line="125" pos:column="30"/></operator><name pos:line="125" pos:column="30">rsync_port<pos:position pos:line="125" pos:column="40"/></name> <operator pos:line="125" pos:column="41">&amp;&amp;<pos:position pos:line="125" pos:column="51"/></operator> <operator pos:line="125" pos:column="44">!<pos:position pos:line="125" pos:column="45"/></operator><operator pos:line="125" pos:column="45">*<pos:position pos:line="125" pos:column="46"/></operator><name pos:line="125" pos:column="46">arg<pos:position pos:line="125" pos:column="49"/></name></expr>)<pos:position pos:line="125" pos:column="50"/></condition><then pos:line="125" pos:column="50"> <comment type="block" pos:line="125" pos:column="51">/* Turn an empty arg into a dot dir. */</comment>
				<block type="pseudo"><expr_stmt><expr><name pos:line="126" pos:column="33">arg<pos:position pos:line="126" pos:column="36"/></name> <operator pos:line="126" pos:column="37">=<pos:position pos:line="126" pos:column="38"/></operator> <literal type="string" pos:line="126" pos:column="39">"."<pos:position pos:line="126" pos:column="42"/></literal></expr>;<pos:position pos:line="126" pos:column="43"/></expr_stmt></block></then></if>
			<expr_stmt><expr><name><name pos:line="127" pos:column="25">remote_argv<pos:position pos:line="127" pos:column="36"/></name><index pos:line="127" pos:column="36">[<expr><name pos:line="127" pos:column="37">i<pos:position pos:line="127" pos:column="38"/></name></expr>]<pos:position pos:line="127" pos:column="39"/></index></name> <operator pos:line="127" pos:column="40">=<pos:position pos:line="127" pos:column="41"/></operator> <name pos:line="127" pos:column="42">arg<pos:position pos:line="127" pos:column="45"/></name></expr>;<pos:position pos:line="127" pos:column="46"/></expr_stmt>
		}<pos:position pos:line="128" pos:column="18"/></block></for>
	}<pos:position pos:line="129" pos:column="10"/></block></else></if>

	<if pos:line="131" pos:column="9">if <condition pos:line="131" pos:column="12">(<expr><name pos:line="131" pos:column="13">daemon_over_rsh<pos:position pos:line="131" pos:column="28"/></name> <operator pos:line="131" pos:column="29">&lt;<pos:position pos:line="131" pos:column="33"/></operator> <literal type="number" pos:line="131" pos:column="31">0<pos:position pos:line="131" pos:column="32"/></literal></expr>)<pos:position pos:line="131" pos:column="33"/></condition><then pos:line="131" pos:column="33">
		<block type="pseudo"><return pos:line="132" pos:column="17">return <expr><call><name pos:line="132" pos:column="24">start_socket_client<pos:position pos:line="132" pos:column="43"/></name><argument_list pos:line="132" pos:column="43">(<argument><expr><name pos:line="132" pos:column="44">shell_machine<pos:position pos:line="132" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="132" pos:column="59">remote_argc<pos:position pos:line="132" pos:column="70"/></name></expr></argument>, <argument><expr><name pos:line="132" pos:column="72">remote_argv<pos:position pos:line="132" pos:column="83"/></name></expr></argument>, <argument><expr><name pos:line="132" pos:column="85">argc<pos:position pos:line="132" pos:column="89"/></name></expr></argument>, <argument><expr><name pos:line="132" pos:column="91">argv<pos:position pos:line="132" pos:column="95"/></name></expr></argument>)<pos:position pos:line="132" pos:column="96"/></argument_list></call></expr>;<pos:position pos:line="132" pos:column="97"/></return></block></then></if>

	<if pos:line="134" pos:column="9">if <condition pos:line="134" pos:column="12">(<expr><name pos:line="134" pos:column="13">password_file<pos:position pos:line="134" pos:column="26"/></name> <operator pos:line="134" pos:column="27">&amp;&amp;<pos:position pos:line="134" pos:column="37"/></operator> <operator pos:line="134" pos:column="30">!<pos:position pos:line="134" pos:column="31"/></operator><name pos:line="134" pos:column="31">daemon_over_rsh<pos:position pos:line="134" pos:column="46"/></name></expr>)<pos:position pos:line="134" pos:column="47"/></condition><then pos:line="134" pos:column="47"> <block pos:line="134" pos:column="48">{
		<expr_stmt><expr><call><name pos:line="135" pos:column="17">rprintf<pos:position pos:line="135" pos:column="24"/></name><argument_list pos:line="135" pos:column="24">(<argument><expr><name pos:line="135" pos:column="25">FERROR<pos:position pos:line="135" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="135" pos:column="33">"The --password-file option may only be "<pos:position pos:line="135" pos:column="74"/></literal>
				<literal type="string" pos:line="136" pos:column="33">"used when accessing an rsync daemon.\n"<pos:position pos:line="136" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="136" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="136" pos:column="75"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="137" pos:column="17">exit_cleanup<pos:position pos:line="137" pos:column="29"/></name><argument_list pos:line="137" pos:column="29">(<argument><expr><name pos:line="137" pos:column="30">RERR_SYNTAX<pos:position pos:line="137" pos:column="41"/></name></expr></argument>)<pos:position pos:line="137" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="137" pos:column="43"/></expr_stmt>
	}<pos:position pos:line="138" pos:column="10"/></block></then></if>

	<if pos:line="140" pos:column="9">if <condition pos:line="140" pos:column="12">(<expr><name pos:line="140" pos:column="13">connect_timeout<pos:position pos:line="140" pos:column="28"/></name></expr>)<pos:position pos:line="140" pos:column="29"/></condition><then pos:line="140" pos:column="29"> <block pos:line="140" pos:column="30">{
		<expr_stmt><expr><call><name pos:line="141" pos:column="17">rprintf<pos:position pos:line="141" pos:column="24"/></name><argument_list pos:line="141" pos:column="24">(<argument><expr><name pos:line="141" pos:column="25">FERROR<pos:position pos:line="141" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="141" pos:column="33">"The --contimeout option may only be "<pos:position pos:line="141" pos:column="71"/></literal>
				<literal type="string" pos:line="142" pos:column="33">"used when connecting to an rsync daemon.\n"<pos:position pos:line="142" pos:column="77"/></literal></expr></argument>)<pos:position pos:line="142" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="142" pos:column="79"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="143" pos:column="17">exit_cleanup<pos:position pos:line="143" pos:column="29"/></name><argument_list pos:line="143" pos:column="29">(<argument><expr><name pos:line="143" pos:column="30">RERR_SYNTAX<pos:position pos:line="143" pos:column="41"/></name></expr></argument>)<pos:position pos:line="143" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="143" pos:column="43"/></expr_stmt>
	}<pos:position pos:line="144" pos:column="10"/></block></then></if>

	<if pos:line="146" pos:column="9">if <condition pos:line="146" pos:column="12">(<expr><name pos:line="146" pos:column="13">shell_machine<pos:position pos:line="146" pos:column="26"/></name></expr>)<pos:position pos:line="146" pos:column="27"/></condition><then pos:line="146" pos:column="27"> <block pos:line="146" pos:column="28">{
		<expr_stmt><expr><name pos:line="147" pos:column="17">p<pos:position pos:line="147" pos:column="18"/></name> <operator pos:line="147" pos:column="19">=<pos:position pos:line="147" pos:column="20"/></operator> <call><name pos:line="147" pos:column="21">strrchr<pos:position pos:line="147" pos:column="28"/></name><argument_list pos:line="147" pos:column="28">(<argument><expr><name pos:line="147" pos:column="29">shell_machine<pos:position pos:line="147" pos:column="42"/></name></expr></argument>,<argument><expr><literal type="char" pos:line="147" pos:column="43">'@'<pos:position pos:line="147" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="147" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="147" pos:column="48"/></expr_stmt>
		<if pos:line="148" pos:column="17">if <condition pos:line="148" pos:column="20">(<expr><name pos:line="148" pos:column="21">p<pos:position pos:line="148" pos:column="22"/></name></expr>)<pos:position pos:line="148" pos:column="23"/></condition><then pos:line="148" pos:column="23"> <block pos:line="148" pos:column="24">{
			<expr_stmt><expr><operator pos:line="149" pos:column="25">*<pos:position pos:line="149" pos:column="26"/></operator><name pos:line="149" pos:column="26">p<pos:position pos:line="149" pos:column="27"/></name> <operator pos:line="149" pos:column="28">=<pos:position pos:line="149" pos:column="29"/></operator> <literal type="number" pos:line="149" pos:column="30">0<pos:position pos:line="149" pos:column="31"/></literal></expr>;<pos:position pos:line="149" pos:column="32"/></expr_stmt>
			<expr_stmt><expr><name pos:line="150" pos:column="25">shell_user<pos:position pos:line="150" pos:column="35"/></name> <operator pos:line="150" pos:column="36">=<pos:position pos:line="150" pos:column="37"/></operator> <name pos:line="150" pos:column="38">shell_machine<pos:position pos:line="150" pos:column="51"/></name></expr>;<pos:position pos:line="150" pos:column="52"/></expr_stmt>
			<expr_stmt><expr><name pos:line="151" pos:column="25">shell_machine<pos:position pos:line="151" pos:column="38"/></name> <operator pos:line="151" pos:column="39">=<pos:position pos:line="151" pos:column="40"/></operator> <name pos:line="151" pos:column="41">p<pos:position pos:line="151" pos:column="42"/></name><operator pos:line="151" pos:column="42">+<pos:position pos:line="151" pos:column="43"/></operator><literal type="number" pos:line="151" pos:column="43">1<pos:position pos:line="151" pos:column="44"/></literal></expr>;<pos:position pos:line="151" pos:column="45"/></expr_stmt>
		}<pos:position pos:line="152" pos:column="18"/></block></then></if>
	}<pos:position pos:line="153" pos:column="10"/></block></then></if>

	<if pos:line="155" pos:column="9">if <condition pos:line="155" pos:column="12">(<expr><call><name pos:line="155" pos:column="13">DEBUG_GTE<pos:position pos:line="155" pos:column="22"/></name><argument_list pos:line="155" pos:column="22">(<argument><expr><name pos:line="155" pos:column="23">CMD<pos:position pos:line="155" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="155" pos:column="28">2<pos:position pos:line="155" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="155" pos:column="30"/></argument_list></call></expr>)<pos:position pos:line="155" pos:column="31"/></condition><then pos:line="155" pos:column="31"> <block pos:line="155" pos:column="32">{
		<expr_stmt><expr><call><name pos:line="156" pos:column="17">rprintf<pos:position pos:line="156" pos:column="24"/></name><argument_list pos:line="156" pos:column="24">(<argument><expr><name pos:line="156" pos:column="25">FINFO<pos:position pos:line="156" pos:column="30"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="156" pos:column="31">"cmd=%s machine=%s user=%s path=%s\n"<pos:position pos:line="156" pos:column="68"/></literal></expr></argument>,
			<argument><expr><call><name pos:line="157" pos:column="25">NS<pos:position pos:line="157" pos:column="27"/></name><argument_list pos:line="157" pos:column="27">(<argument><expr><name pos:line="157" pos:column="28">shell_cmd<pos:position pos:line="157" pos:column="37"/></name></expr></argument>)<pos:position pos:line="157" pos:column="38"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="157" pos:column="40">NS<pos:position pos:line="157" pos:column="42"/></name><argument_list pos:line="157" pos:column="42">(<argument><expr><name pos:line="157" pos:column="43">shell_machine<pos:position pos:line="157" pos:column="56"/></name></expr></argument>)<pos:position pos:line="157" pos:column="57"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="157" pos:column="59">NS<pos:position pos:line="157" pos:column="61"/></name><argument_list pos:line="157" pos:column="61">(<argument><expr><name pos:line="157" pos:column="62">shell_user<pos:position pos:line="157" pos:column="72"/></name></expr></argument>)<pos:position pos:line="157" pos:column="73"/></argument_list></call></expr></argument>,
			<argument><expr><call><name pos:line="158" pos:column="25">NS<pos:position pos:line="158" pos:column="27"/></name><argument_list pos:line="158" pos:column="27">(<argument><expr><name><name pos:line="158" pos:column="28">remote_argv<pos:position pos:line="158" pos:column="39"/></name><index pos:line="158" pos:column="39">[<expr><literal type="number" pos:line="158" pos:column="40">0<pos:position pos:line="158" pos:column="41"/></literal></expr>]<pos:position pos:line="158" pos:column="42"/></index></name></expr></argument>)<pos:position pos:line="158" pos:column="43"/></argument_list></call></expr></argument>)<pos:position pos:line="158" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="158" pos:column="45"/></expr_stmt>
	}<pos:position pos:line="159" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="161" pos:column="9">pid<pos:position pos:line="161" pos:column="12"/></name> <operator pos:line="161" pos:column="13">=<pos:position pos:line="161" pos:column="14"/></operator> <call><name pos:line="161" pos:column="15">do_cmd<pos:position pos:line="161" pos:column="21"/></name><argument_list pos:line="161" pos:column="21">(<argument><expr><name pos:line="161" pos:column="22">shell_cmd<pos:position pos:line="161" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="161" pos:column="33">shell_machine<pos:position pos:line="161" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="161" pos:column="48">shell_user<pos:position pos:line="161" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="161" pos:column="60">remote_argv<pos:position pos:line="161" pos:column="71"/></name></expr></argument>, <argument><expr><name pos:line="161" pos:column="73">remote_argc<pos:position pos:line="161" pos:column="84"/></name></expr></argument>,
		     <argument><expr><operator pos:line="162" pos:column="22">&amp;<pos:position pos:line="162" pos:column="27"/></operator><name pos:line="162" pos:column="23">f_in<pos:position pos:line="162" pos:column="27"/></name></expr></argument>, <argument><expr><operator pos:line="162" pos:column="29">&amp;<pos:position pos:line="162" pos:column="34"/></operator><name pos:line="162" pos:column="30">f_out<pos:position pos:line="162" pos:column="35"/></name></expr></argument>)<pos:position pos:line="162" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="162" pos:column="37"/></expr_stmt>

	<comment type="block" pos:line="164" pos:column="9">/* if we're running an rsync server on the remote host over a
	 * remote shell command, we need to do the RSYNCD protocol first */</comment>
	<if pos:line="166" pos:column="9">if <condition pos:line="166" pos:column="12">(<expr><name pos:line="166" pos:column="13">daemon_over_rsh<pos:position pos:line="166" pos:column="28"/></name></expr>)<pos:position pos:line="166" pos:column="29"/></condition><then pos:line="166" pos:column="29"> <block pos:line="166" pos:column="30">{
		<decl_stmt><decl><type><name pos:line="167" pos:column="17">int<pos:position pos:line="167" pos:column="20"/></name></type> <name pos:line="167" pos:column="21">tmpret<pos:position pos:line="167" pos:column="27"/></name></decl>;<pos:position pos:line="167" pos:column="28"/></decl_stmt>
		<expr_stmt><expr><name pos:line="168" pos:column="17">tmpret<pos:position pos:line="168" pos:column="23"/></name> <operator pos:line="168" pos:column="24">=<pos:position pos:line="168" pos:column="25"/></operator> <call><name pos:line="168" pos:column="26">start_inband_exchange<pos:position pos:line="168" pos:column="47"/></name><argument_list pos:line="168" pos:column="47">(<argument><expr><name pos:line="168" pos:column="48">f_in<pos:position pos:line="168" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="168" pos:column="54">f_out<pos:position pos:line="168" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="168" pos:column="61">shell_user<pos:position pos:line="168" pos:column="71"/></name></expr></argument>, <argument><expr><name pos:line="168" pos:column="73">remote_argc<pos:position pos:line="168" pos:column="84"/></name></expr></argument>, <argument><expr><name pos:line="168" pos:column="86">remote_argv<pos:position pos:line="168" pos:column="97"/></name></expr></argument>)<pos:position pos:line="168" pos:column="98"/></argument_list></call></expr>;<pos:position pos:line="168" pos:column="99"/></expr_stmt>
		<if pos:line="169" pos:column="17">if <condition pos:line="169" pos:column="20">(<expr><name pos:line="169" pos:column="21">tmpret<pos:position pos:line="169" pos:column="27"/></name> <operator pos:line="169" pos:column="28">&lt;<pos:position pos:line="169" pos:column="32"/></operator> <literal type="number" pos:line="169" pos:column="30">0<pos:position pos:line="169" pos:column="31"/></literal></expr>)<pos:position pos:line="169" pos:column="32"/></condition><then pos:line="169" pos:column="32">
			<block type="pseudo"><return pos:line="170" pos:column="25">return <expr><name pos:line="170" pos:column="32">tmpret<pos:position pos:line="170" pos:column="38"/></name></expr>;<pos:position pos:line="170" pos:column="39"/></return></block></then></if>
	}<pos:position pos:line="171" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="173" pos:column="9">ret<pos:position pos:line="173" pos:column="12"/></name> <operator pos:line="173" pos:column="13">=<pos:position pos:line="173" pos:column="14"/></operator> <call><name pos:line="173" pos:column="15">client_run<pos:position pos:line="173" pos:column="25"/></name><argument_list pos:line="173" pos:column="25">(<argument><expr><name pos:line="173" pos:column="26">f_in<pos:position pos:line="173" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="173" pos:column="32">f_out<pos:position pos:line="173" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="173" pos:column="39">pid<pos:position pos:line="173" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="173" pos:column="44">argc<pos:position pos:line="173" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="173" pos:column="50">argv<pos:position pos:line="173" pos:column="54"/></name></expr></argument>)<pos:position pos:line="173" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="173" pos:column="56"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="175" pos:column="9">fflush<pos:position pos:line="175" pos:column="15"/></name><argument_list pos:line="175" pos:column="15">(<argument><expr><name pos:line="175" pos:column="16">stdout<pos:position pos:line="175" pos:column="22"/></name></expr></argument>)<pos:position pos:line="175" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="175" pos:column="24"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="176" pos:column="9">fflush<pos:position pos:line="176" pos:column="15"/></name><argument_list pos:line="176" pos:column="15">(<argument><expr><name pos:line="176" pos:column="16">stderr<pos:position pos:line="176" pos:column="22"/></name></expr></argument>)<pos:position pos:line="176" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="176" pos:column="24"/></expr_stmt>

	<return pos:line="178" pos:column="9">return <expr><name pos:line="178" pos:column="16">ret<pos:position pos:line="178" pos:column="19"/></name></expr>;<pos:position pos:line="178" pos:column="20"/></return>
}<pos:position pos:line="179" pos:column="2"/></block></function></unit>
