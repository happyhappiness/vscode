<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_function_606.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">send_deflated_token<pos:position pos:line="2" pos:column="20"/></name><parameter_list pos:line="2" pos:column="20">(<parameter><decl><type><name pos:line="2" pos:column="21">int<pos:position pos:line="2" pos:column="24"/></name></type> <name pos:line="2" pos:column="25">f<pos:position pos:line="2" pos:column="26"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="28">int<pos:position pos:line="2" pos:column="31"/></name></type> <name pos:line="2" pos:column="32">token<pos:position pos:line="2" pos:column="37"/></name></decl></parameter>,
		    <parameter><decl><type><name><name pos:line="3" pos:column="21">struct<pos:position pos:line="3" pos:column="27"/></name> <name pos:line="3" pos:column="28">map_struct<pos:position pos:line="3" pos:column="38"/></name></name> <modifier pos:line="3" pos:column="39">*<pos:position pos:line="3" pos:column="40"/></modifier></type><name pos:line="3" pos:column="40">buf<pos:position pos:line="3" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="45">int<pos:position pos:line="3" pos:column="48"/></name></type> <name pos:line="3" pos:column="49">offset<pos:position pos:line="3" pos:column="55"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="57">int<pos:position pos:line="3" pos:column="60"/></name></type> <name pos:line="3" pos:column="61">nb<pos:position pos:line="3" pos:column="63"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="65">int<pos:position pos:line="3" pos:column="68"/></name></type> <name pos:line="3" pos:column="69">toklen<pos:position pos:line="3" pos:column="75"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="76"/></parameter_list>
<block pos:line="4" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">int<pos:position pos:line="5" pos:column="8"/></name></type> <name pos:line="5" pos:column="9">n<pos:position pos:line="5" pos:column="10"/></name></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="12">r<pos:position pos:line="5" pos:column="13"/></name></decl>;<pos:position pos:line="5" pos:column="14"/></decl_stmt>
    <decl_stmt><decl><specifier pos:line="6" pos:column="5">static<pos:position pos:line="6" pos:column="11"/></specifier> <type><name pos:line="6" pos:column="12">int<pos:position pos:line="6" pos:column="15"/></name></type> <name pos:line="6" pos:column="16">init_done<pos:position pos:line="6" pos:column="25"/></name></decl>;<pos:position pos:line="6" pos:column="26"/></decl_stmt>

    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><name pos:line="8" pos:column="9">last_token<pos:position pos:line="8" pos:column="19"/></name> <operator pos:line="8" pos:column="20">==<pos:position pos:line="8" pos:column="22"/></operator> <operator pos:line="8" pos:column="23">-<pos:position pos:line="8" pos:column="24"/></operator><literal type="number" pos:line="8" pos:column="24">1<pos:position pos:line="8" pos:column="25"/></literal></expr>)<pos:position pos:line="8" pos:column="26"/></condition><then pos:line="8" pos:column="26"> <block pos:line="8" pos:column="27">{
	<comment type="block" pos:line="9" pos:column="9">/* initialization */</comment>
	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><operator pos:line="10" pos:column="13">!<pos:position pos:line="10" pos:column="14"/></operator><name pos:line="10" pos:column="14">init_done<pos:position pos:line="10" pos:column="23"/></name></expr>)<pos:position pos:line="10" pos:column="24"/></condition><then pos:line="10" pos:column="24"> <block pos:line="10" pos:column="25">{
	    <expr_stmt><expr><name><name pos:line="11" pos:column="13">tx_strm<pos:position pos:line="11" pos:column="20"/></name><operator pos:line="11" pos:column="20">.<pos:position pos:line="11" pos:column="21"/></operator><name pos:line="11" pos:column="21">next_in<pos:position pos:line="11" pos:column="28"/></name></name> <operator pos:line="11" pos:column="29">=<pos:position pos:line="11" pos:column="30"/></operator> <name pos:line="11" pos:column="31">NULL<pos:position pos:line="11" pos:column="35"/></name></expr>;<pos:position pos:line="11" pos:column="36"/></expr_stmt>
	    <expr_stmt><expr><name><name pos:line="12" pos:column="13">tx_strm<pos:position pos:line="12" pos:column="20"/></name><operator pos:line="12" pos:column="20">.<pos:position pos:line="12" pos:column="21"/></operator><name pos:line="12" pos:column="21">zalloc<pos:position pos:line="12" pos:column="27"/></name></name> <operator pos:line="12" pos:column="28">=<pos:position pos:line="12" pos:column="29"/></operator> <name pos:line="12" pos:column="30">z_alloc<pos:position pos:line="12" pos:column="37"/></name></expr>;<pos:position pos:line="12" pos:column="38"/></expr_stmt>
	    <expr_stmt><expr><name><name pos:line="13" pos:column="13">tx_strm<pos:position pos:line="13" pos:column="20"/></name><operator pos:line="13" pos:column="20">.<pos:position pos:line="13" pos:column="21"/></operator><name pos:line="13" pos:column="21">zfree<pos:position pos:line="13" pos:column="26"/></name></name> <operator pos:line="13" pos:column="27">=<pos:position pos:line="13" pos:column="28"/></operator> <name pos:line="13" pos:column="29">z_free<pos:position pos:line="13" pos:column="35"/></name></expr>;<pos:position pos:line="13" pos:column="36"/></expr_stmt>
	    <if pos:line="14" pos:column="13">if <condition pos:line="14" pos:column="16">(<expr><call><name pos:line="14" pos:column="17">deflateInit2<pos:position pos:line="14" pos:column="29"/></name><argument_list pos:line="14" pos:column="29">(<argument><expr><operator pos:line="14" pos:column="30">&amp;<pos:position pos:line="14" pos:column="35"/></operator><name pos:line="14" pos:column="31">tx_strm<pos:position pos:line="14" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="40">Z_DEFAULT_COMPRESSION<pos:position pos:line="14" pos:column="61"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="14" pos:column="63">8<pos:position pos:line="14" pos:column="64"/></literal></expr></argument>,
			     <argument><expr><operator pos:line="15" pos:column="30">-<pos:position pos:line="15" pos:column="31"/></operator><literal type="number" pos:line="15" pos:column="31">15<pos:position pos:line="15" pos:column="33"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="15" pos:column="35">8<pos:position pos:line="15" pos:column="36"/></literal></expr></argument>, <argument><expr><name pos:line="15" pos:column="38">Z_DEFAULT_STRATEGY<pos:position pos:line="15" pos:column="56"/></name></expr></argument>)<pos:position pos:line="15" pos:column="57"/></argument_list></call> <operator pos:line="15" pos:column="58">!=<pos:position pos:line="15" pos:column="60"/></operator> <name pos:line="15" pos:column="61">Z_OK<pos:position pos:line="15" pos:column="65"/></name></expr>)<pos:position pos:line="15" pos:column="66"/></condition><then pos:line="15" pos:column="66"> <block pos:line="15" pos:column="67">{
		<expr_stmt><expr><call><name pos:line="16" pos:column="17">fprintf<pos:position pos:line="16" pos:column="24"/></name><argument_list pos:line="16" pos:column="24">(<argument><expr><name pos:line="16" pos:column="25">FERROR<pos:position pos:line="16" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="33">"compression init failed\n"<pos:position pos:line="16" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="62"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="17" pos:column="17">exit_cleanup<pos:position pos:line="17" pos:column="29"/></name><argument_list pos:line="17" pos:column="29">(<argument><expr><literal type="number" pos:line="17" pos:column="30">1<pos:position pos:line="17" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="33"/></expr_stmt>
	    }<pos:position pos:line="18" pos:column="14"/></block></then></if>
	    <if pos:line="19" pos:column="13">if <condition pos:line="19" pos:column="16">(<expr><operator pos:line="19" pos:column="17">(<pos:position pos:line="19" pos:column="18"/></operator><name pos:line="19" pos:column="18">obuf<pos:position pos:line="19" pos:column="22"/></name> <operator pos:line="19" pos:column="23">=<pos:position pos:line="19" pos:column="24"/></operator> <call><name pos:line="19" pos:column="25">malloc<pos:position pos:line="19" pos:column="31"/></name><argument_list pos:line="19" pos:column="31">(<argument><expr><name pos:line="19" pos:column="32">MAX_DATA_COUNT<pos:position pos:line="19" pos:column="46"/></name><operator pos:line="19" pos:column="46">+<pos:position pos:line="19" pos:column="47"/></operator><literal type="number" pos:line="19" pos:column="47">2<pos:position pos:line="19" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="49"/></argument_list></call><operator pos:line="19" pos:column="49">)<pos:position pos:line="19" pos:column="50"/></operator> <operator pos:line="19" pos:column="51">==<pos:position pos:line="19" pos:column="53"/></operator> <name pos:line="19" pos:column="54">NULL<pos:position pos:line="19" pos:column="58"/></name></expr>)<pos:position pos:line="19" pos:column="59"/></condition><then pos:line="19" pos:column="59">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="20" pos:column="17">out_of_memory<pos:position pos:line="20" pos:column="30"/></name><argument_list pos:line="20" pos:column="30">(<argument><expr><literal type="string" pos:line="20" pos:column="31">"send_deflated_token"<pos:position pos:line="20" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="54"/></expr_stmt></block></then></if>
	    <expr_stmt><expr><name pos:line="21" pos:column="13">init_done<pos:position pos:line="21" pos:column="22"/></name> <operator pos:line="21" pos:column="23">=<pos:position pos:line="21" pos:column="24"/></operator> <literal type="number" pos:line="21" pos:column="25">1<pos:position pos:line="21" pos:column="26"/></literal></expr>;<pos:position pos:line="21" pos:column="27"/></expr_stmt>
	}<pos:position pos:line="22" pos:column="10"/></block></then> <else pos:line="22" pos:column="11">else
	    <block type="pseudo"><expr_stmt><expr><call><name pos:line="23" pos:column="13">deflateReset<pos:position pos:line="23" pos:column="25"/></name><argument_list pos:line="23" pos:column="25">(<argument><expr><operator pos:line="23" pos:column="26">&amp;<pos:position pos:line="23" pos:column="31"/></operator><name pos:line="23" pos:column="27">tx_strm<pos:position pos:line="23" pos:column="34"/></name></expr></argument>)<pos:position pos:line="23" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="36"/></expr_stmt></block></else></if>
	<expr_stmt><expr><name pos:line="24" pos:column="9">run_start<pos:position pos:line="24" pos:column="18"/></name> <operator pos:line="24" pos:column="19">=<pos:position pos:line="24" pos:column="20"/></operator> <name pos:line="24" pos:column="21">token<pos:position pos:line="24" pos:column="26"/></name></expr>;<pos:position pos:line="24" pos:column="27"/></expr_stmt>
	<expr_stmt><expr><name pos:line="25" pos:column="9">last_run_end<pos:position pos:line="25" pos:column="21"/></name> <operator pos:line="25" pos:column="22">=<pos:position pos:line="25" pos:column="23"/></operator> <literal type="number" pos:line="25" pos:column="24">0<pos:position pos:line="25" pos:column="25"/></literal></expr>;<pos:position pos:line="25" pos:column="26"/></expr_stmt>

    }<pos:position pos:line="27" pos:column="6"/></block></then> <elseif pos:line="27" pos:column="7">else <if pos:line="27" pos:column="12">if <condition pos:line="27" pos:column="15">(<expr><name pos:line="27" pos:column="16">nb<pos:position pos:line="27" pos:column="18"/></name> <operator pos:line="27" pos:column="19">!=<pos:position pos:line="27" pos:column="21"/></operator> <literal type="number" pos:line="27" pos:column="22">0<pos:position pos:line="27" pos:column="23"/></literal> <operator pos:line="27" pos:column="24">||<pos:position pos:line="27" pos:column="26"/></operator> <name pos:line="27" pos:column="27">token<pos:position pos:line="27" pos:column="32"/></name> <operator pos:line="27" pos:column="33">!=<pos:position pos:line="27" pos:column="35"/></operator> <name pos:line="27" pos:column="36">last_token<pos:position pos:line="27" pos:column="46"/></name> <operator pos:line="27" pos:column="47">+<pos:position pos:line="27" pos:column="48"/></operator> <literal type="number" pos:line="27" pos:column="49">1<pos:position pos:line="27" pos:column="50"/></literal>
	       <operator pos:line="28" pos:column="16">||<pos:position pos:line="28" pos:column="18"/></operator> <name pos:line="28" pos:column="19">token<pos:position pos:line="28" pos:column="24"/></name> <operator pos:line="28" pos:column="25">&gt;=<pos:position pos:line="28" pos:column="30"/></operator> <name pos:line="28" pos:column="28">run_start<pos:position pos:line="28" pos:column="37"/></name> <operator pos:line="28" pos:column="38">+<pos:position pos:line="28" pos:column="39"/></operator> <literal type="number" pos:line="28" pos:column="40">65536<pos:position pos:line="28" pos:column="45"/></literal></expr>)<pos:position pos:line="28" pos:column="46"/></condition><then pos:line="28" pos:column="46"> <block pos:line="28" pos:column="47">{
	<comment type="block" pos:line="29" pos:column="9">/* output previous run */</comment>
	<expr_stmt><expr><name pos:line="30" pos:column="9">r<pos:position pos:line="30" pos:column="10"/></name> <operator pos:line="30" pos:column="11">=<pos:position pos:line="30" pos:column="12"/></operator> <name pos:line="30" pos:column="13">run_start<pos:position pos:line="30" pos:column="22"/></name> <operator pos:line="30" pos:column="23">-<pos:position pos:line="30" pos:column="24"/></operator> <name pos:line="30" pos:column="25">last_run_end<pos:position pos:line="30" pos:column="37"/></name></expr>;<pos:position pos:line="30" pos:column="38"/></expr_stmt>
	<expr_stmt><expr><name pos:line="31" pos:column="9">n<pos:position pos:line="31" pos:column="10"/></name> <operator pos:line="31" pos:column="11">=<pos:position pos:line="31" pos:column="12"/></operator> <name pos:line="31" pos:column="13">last_token<pos:position pos:line="31" pos:column="23"/></name> <operator pos:line="31" pos:column="24">-<pos:position pos:line="31" pos:column="25"/></operator> <name pos:line="31" pos:column="26">run_start<pos:position pos:line="31" pos:column="35"/></name></expr>;<pos:position pos:line="31" pos:column="36"/></expr_stmt>
	<if pos:line="32" pos:column="9">if <condition pos:line="32" pos:column="12">(<expr><name pos:line="32" pos:column="13">r<pos:position pos:line="32" pos:column="14"/></name> <operator pos:line="32" pos:column="15">&gt;=<pos:position pos:line="32" pos:column="20"/></operator> <literal type="number" pos:line="32" pos:column="18">0<pos:position pos:line="32" pos:column="19"/></literal> <operator pos:line="32" pos:column="20">&amp;&amp;<pos:position pos:line="32" pos:column="30"/></operator> <name pos:line="32" pos:column="23">r<pos:position pos:line="32" pos:column="24"/></name> <operator pos:line="32" pos:column="25">&lt;=<pos:position pos:line="32" pos:column="30"/></operator> <literal type="number" pos:line="32" pos:column="28">63<pos:position pos:line="32" pos:column="30"/></literal></expr>)<pos:position pos:line="32" pos:column="31"/></condition><then pos:line="32" pos:column="31"> <block pos:line="32" pos:column="32">{
	    <expr_stmt><expr><call><name pos:line="33" pos:column="13">write_byte<pos:position pos:line="33" pos:column="23"/></name><argument_list pos:line="33" pos:column="23">(<argument><expr><name pos:line="33" pos:column="24">f<pos:position pos:line="33" pos:column="25"/></name></expr></argument>, <argument><expr><operator pos:line="33" pos:column="27">(<pos:position pos:line="33" pos:column="28"/></operator><ternary><condition><expr><name pos:line="33" pos:column="28">n<pos:position pos:line="33" pos:column="29"/></name><operator pos:line="33" pos:column="29">==<pos:position pos:line="33" pos:column="31"/></operator><literal type="number" pos:line="33" pos:column="31">0<pos:position pos:line="33" pos:column="32"/></literal></expr>?<pos:position pos:line="33" pos:column="33"/></condition><then pos:line="33" pos:column="33"> <expr><name pos:line="33" pos:column="34">TOKEN_REL<pos:position pos:line="33" pos:column="43"/></name></expr></then><else pos:line="33" pos:column="43">: <expr><name pos:line="33" pos:column="45">TOKENRUN_REL<pos:position pos:line="33" pos:column="57"/></name></expr></else></ternary><operator pos:line="33" pos:column="57">)<pos:position pos:line="33" pos:column="58"/></operator> <operator pos:line="33" pos:column="59">+<pos:position pos:line="33" pos:column="60"/></operator> <name pos:line="33" pos:column="61">r<pos:position pos:line="33" pos:column="62"/></name></expr></argument>)<pos:position pos:line="33" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="64"/></expr_stmt>
	}<pos:position pos:line="34" pos:column="10"/></block></then> <else pos:line="34" pos:column="11">else <block pos:line="34" pos:column="16">{
	    <expr_stmt><expr><call><name pos:line="35" pos:column="13">write_byte<pos:position pos:line="35" pos:column="23"/></name><argument_list pos:line="35" pos:column="23">(<argument><expr><name pos:line="35" pos:column="24">f<pos:position pos:line="35" pos:column="25"/></name></expr></argument>, <argument><expr><operator pos:line="35" pos:column="27">(<pos:position pos:line="35" pos:column="28"/></operator><ternary><condition><expr><name pos:line="35" pos:column="28">n<pos:position pos:line="35" pos:column="29"/></name><operator pos:line="35" pos:column="29">==<pos:position pos:line="35" pos:column="31"/></operator><literal type="number" pos:line="35" pos:column="31">0<pos:position pos:line="35" pos:column="32"/></literal></expr>?<pos:position pos:line="35" pos:column="33"/></condition><then pos:line="35" pos:column="33"> <expr><name pos:line="35" pos:column="34">TOKEN_LONG<pos:position pos:line="35" pos:column="44"/></name></expr></then><else pos:line="35" pos:column="44">: <expr><name pos:line="35" pos:column="46">TOKENRUN_LONG<pos:position pos:line="35" pos:column="59"/></name></expr></else></ternary><operator pos:line="35" pos:column="59">)<pos:position pos:line="35" pos:column="60"/></operator></expr></argument>)<pos:position pos:line="35" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="62"/></expr_stmt>
	    <expr_stmt><expr><call><name pos:line="36" pos:column="13">write_int<pos:position pos:line="36" pos:column="22"/></name><argument_list pos:line="36" pos:column="22">(<argument><expr><name pos:line="36" pos:column="23">f<pos:position pos:line="36" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="26">run_start<pos:position pos:line="36" pos:column="35"/></name></expr></argument>)<pos:position pos:line="36" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="37"/></expr_stmt>
	}<pos:position pos:line="37" pos:column="10"/></block></else></if>
	<if pos:line="38" pos:column="9">if <condition pos:line="38" pos:column="12">(<expr><name pos:line="38" pos:column="13">n<pos:position pos:line="38" pos:column="14"/></name> <operator pos:line="38" pos:column="15">!=<pos:position pos:line="38" pos:column="17"/></operator> <literal type="number" pos:line="38" pos:column="18">0<pos:position pos:line="38" pos:column="19"/></literal></expr>)<pos:position pos:line="38" pos:column="20"/></condition><then pos:line="38" pos:column="20"> <block pos:line="38" pos:column="21">{
	    <expr_stmt><expr><call><name pos:line="39" pos:column="13">write_byte<pos:position pos:line="39" pos:column="23"/></name><argument_list pos:line="39" pos:column="23">(<argument><expr><name pos:line="39" pos:column="24">f<pos:position pos:line="39" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="27">n<pos:position pos:line="39" pos:column="28"/></name></expr></argument>)<pos:position pos:line="39" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="30"/></expr_stmt>
	    <expr_stmt><expr><call><name pos:line="40" pos:column="13">write_byte<pos:position pos:line="40" pos:column="23"/></name><argument_list pos:line="40" pos:column="23">(<argument><expr><name pos:line="40" pos:column="24">f<pos:position pos:line="40" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="27">n<pos:position pos:line="40" pos:column="28"/></name> <operator pos:line="40" pos:column="29">&gt;&gt;<pos:position pos:line="40" pos:column="34"/></operator> <literal type="number" pos:line="40" pos:column="32">8<pos:position pos:line="40" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="35"/></expr_stmt>
	}<pos:position pos:line="41" pos:column="10"/></block></then></if>
	<expr_stmt><expr><name pos:line="42" pos:column="9">last_run_end<pos:position pos:line="42" pos:column="21"/></name> <operator pos:line="42" pos:column="22">=<pos:position pos:line="42" pos:column="23"/></operator> <name pos:line="42" pos:column="24">last_token<pos:position pos:line="42" pos:column="34"/></name></expr>;<pos:position pos:line="42" pos:column="35"/></expr_stmt>
	<expr_stmt><expr><name pos:line="43" pos:column="9">run_start<pos:position pos:line="43" pos:column="18"/></name> <operator pos:line="43" pos:column="19">=<pos:position pos:line="43" pos:column="20"/></operator> <name pos:line="43" pos:column="21">token<pos:position pos:line="43" pos:column="26"/></name></expr>;<pos:position pos:line="43" pos:column="27"/></expr_stmt>
    }<pos:position pos:line="44" pos:column="6"/></block></then></if></elseif></if>

    <expr_stmt><expr><name pos:line="46" pos:column="5">last_token<pos:position pos:line="46" pos:column="15"/></name> <operator pos:line="46" pos:column="16">=<pos:position pos:line="46" pos:column="17"/></operator> <name pos:line="46" pos:column="18">token<pos:position pos:line="46" pos:column="23"/></name></expr>;<pos:position pos:line="46" pos:column="24"/></expr_stmt>

    <if pos:line="48" pos:column="5">if <condition pos:line="48" pos:column="8">(<expr><name pos:line="48" pos:column="9">nb<pos:position pos:line="48" pos:column="11"/></name> <operator pos:line="48" pos:column="12">!=<pos:position pos:line="48" pos:column="14"/></operator> <literal type="number" pos:line="48" pos:column="15">0<pos:position pos:line="48" pos:column="16"/></literal></expr>)<pos:position pos:line="48" pos:column="17"/></condition><then pos:line="48" pos:column="17"> <block pos:line="48" pos:column="18">{
	<comment type="block" pos:line="49" pos:column="9">/* deflate the data starting at offset */</comment>
	<expr_stmt><expr><name><name pos:line="50" pos:column="9">tx_strm<pos:position pos:line="50" pos:column="16"/></name><operator pos:line="50" pos:column="16">.<pos:position pos:line="50" pos:column="17"/></operator><name pos:line="50" pos:column="17">avail_in<pos:position pos:line="50" pos:column="25"/></name></name> <operator pos:line="50" pos:column="26">=<pos:position pos:line="50" pos:column="27"/></operator> <literal type="number" pos:line="50" pos:column="28">0<pos:position pos:line="50" pos:column="29"/></literal></expr>;<pos:position pos:line="50" pos:column="30"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="51" pos:column="9">tx_strm<pos:position pos:line="51" pos:column="16"/></name><operator pos:line="51" pos:column="16">.<pos:position pos:line="51" pos:column="17"/></operator><name pos:line="51" pos:column="17">avail_out<pos:position pos:line="51" pos:column="26"/></name></name> <operator pos:line="51" pos:column="27">=<pos:position pos:line="51" pos:column="28"/></operator> <literal type="number" pos:line="51" pos:column="29">0<pos:position pos:line="51" pos:column="30"/></literal></expr>;<pos:position pos:line="51" pos:column="31"/></expr_stmt>
	<do pos:line="52" pos:column="9">do <block pos:line="52" pos:column="12">{
	    <if pos:line="53" pos:column="13">if <condition pos:line="53" pos:column="16">(<expr><name><name pos:line="53" pos:column="17">tx_strm<pos:position pos:line="53" pos:column="24"/></name><operator pos:line="53" pos:column="24">.<pos:position pos:line="53" pos:column="25"/></operator><name pos:line="53" pos:column="25">avail_in<pos:position pos:line="53" pos:column="33"/></name></name> <operator pos:line="53" pos:column="34">==<pos:position pos:line="53" pos:column="36"/></operator> <literal type="number" pos:line="53" pos:column="37">0<pos:position pos:line="53" pos:column="38"/></literal> <operator pos:line="53" pos:column="39">&amp;&amp;<pos:position pos:line="53" pos:column="49"/></operator> <name pos:line="53" pos:column="42">nb<pos:position pos:line="53" pos:column="44"/></name> <operator pos:line="53" pos:column="45">!=<pos:position pos:line="53" pos:column="47"/></operator> <literal type="number" pos:line="53" pos:column="48">0<pos:position pos:line="53" pos:column="49"/></literal></expr>)<pos:position pos:line="53" pos:column="50"/></condition><then pos:line="53" pos:column="50"> <block pos:line="53" pos:column="51">{
		<comment type="block" pos:line="54" pos:column="17">/* give it some more input */</comment>
		<expr_stmt><expr><name pos:line="55" pos:column="17">n<pos:position pos:line="55" pos:column="18"/></name> <operator pos:line="55" pos:column="19">=<pos:position pos:line="55" pos:column="20"/></operator> <call><name pos:line="55" pos:column="21">MIN<pos:position pos:line="55" pos:column="24"/></name><argument_list pos:line="55" pos:column="24">(<argument><expr><name pos:line="55" pos:column="25">nb<pos:position pos:line="55" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="29">CHUNK_SIZE<pos:position pos:line="55" pos:column="39"/></name></expr></argument>)<pos:position pos:line="55" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="41"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="56" pos:column="17">tx_strm<pos:position pos:line="56" pos:column="24"/></name><operator pos:line="56" pos:column="24">.<pos:position pos:line="56" pos:column="25"/></operator><name pos:line="56" pos:column="25">next_in<pos:position pos:line="56" pos:column="32"/></name></name> <operator pos:line="56" pos:column="33">=<pos:position pos:line="56" pos:column="34"/></operator> <operator pos:line="56" pos:column="35">(<pos:position pos:line="56" pos:column="36"/></operator><name pos:line="56" pos:column="36">Bytef<pos:position pos:line="56" pos:column="41"/></name> <operator pos:line="56" pos:column="42">*<pos:position pos:line="56" pos:column="43"/></operator><operator pos:line="56" pos:column="43">)<pos:position pos:line="56" pos:column="44"/></operator><call><name pos:line="56" pos:column="44">map_ptr<pos:position pos:line="56" pos:column="51"/></name><argument_list pos:line="56" pos:column="51">(<argument><expr><name pos:line="56" pos:column="52">buf<pos:position pos:line="56" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="57">offset<pos:position pos:line="56" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="65">n<pos:position pos:line="56" pos:column="66"/></name></expr></argument>)<pos:position pos:line="56" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="68"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="57" pos:column="17">tx_strm<pos:position pos:line="57" pos:column="24"/></name><operator pos:line="57" pos:column="24">.<pos:position pos:line="57" pos:column="25"/></operator><name pos:line="57" pos:column="25">avail_in<pos:position pos:line="57" pos:column="33"/></name></name> <operator pos:line="57" pos:column="34">=<pos:position pos:line="57" pos:column="35"/></operator> <name pos:line="57" pos:column="36">n<pos:position pos:line="57" pos:column="37"/></name></expr>;<pos:position pos:line="57" pos:column="38"/></expr_stmt>
		<expr_stmt><expr><name pos:line="58" pos:column="17">nb<pos:position pos:line="58" pos:column="19"/></name> <operator pos:line="58" pos:column="20">-=<pos:position pos:line="58" pos:column="22"/></operator> <name pos:line="58" pos:column="23">n<pos:position pos:line="58" pos:column="24"/></name></expr>;<pos:position pos:line="58" pos:column="25"/></expr_stmt>
		<expr_stmt><expr><name pos:line="59" pos:column="17">offset<pos:position pos:line="59" pos:column="23"/></name> <operator pos:line="59" pos:column="24">+=<pos:position pos:line="59" pos:column="26"/></operator> <name pos:line="59" pos:column="27">n<pos:position pos:line="59" pos:column="28"/></name></expr>;<pos:position pos:line="59" pos:column="29"/></expr_stmt>
	    }<pos:position pos:line="60" pos:column="14"/></block></then></if>
	    <if pos:line="61" pos:column="13">if <condition pos:line="61" pos:column="16">(<expr><name><name pos:line="61" pos:column="17">tx_strm<pos:position pos:line="61" pos:column="24"/></name><operator pos:line="61" pos:column="24">.<pos:position pos:line="61" pos:column="25"/></operator><name pos:line="61" pos:column="25">avail_out<pos:position pos:line="61" pos:column="34"/></name></name> <operator pos:line="61" pos:column="35">==<pos:position pos:line="61" pos:column="37"/></operator> <literal type="number" pos:line="61" pos:column="38">0<pos:position pos:line="61" pos:column="39"/></literal></expr>)<pos:position pos:line="61" pos:column="40"/></condition><then pos:line="61" pos:column="40"> <block pos:line="61" pos:column="41">{
		<expr_stmt><expr><name><name pos:line="62" pos:column="17">tx_strm<pos:position pos:line="62" pos:column="24"/></name><operator pos:line="62" pos:column="24">.<pos:position pos:line="62" pos:column="25"/></operator><name pos:line="62" pos:column="25">next_out<pos:position pos:line="62" pos:column="33"/></name></name> <operator pos:line="62" pos:column="34">=<pos:position pos:line="62" pos:column="35"/></operator> <operator pos:line="62" pos:column="36">(<pos:position pos:line="62" pos:column="37"/></operator><name pos:line="62" pos:column="37">Bytef<pos:position pos:line="62" pos:column="42"/></name> <operator pos:line="62" pos:column="43">*<pos:position pos:line="62" pos:column="44"/></operator><operator pos:line="62" pos:column="44">)<pos:position pos:line="62" pos:column="45"/></operator><operator pos:line="62" pos:column="45">(<pos:position pos:line="62" pos:column="46"/></operator><name pos:line="62" pos:column="46">obuf<pos:position pos:line="62" pos:column="50"/></name> <operator pos:line="62" pos:column="51">+<pos:position pos:line="62" pos:column="52"/></operator> <literal type="number" pos:line="62" pos:column="53">2<pos:position pos:line="62" pos:column="54"/></literal><operator pos:line="62" pos:column="54">)<pos:position pos:line="62" pos:column="55"/></operator></expr>;<pos:position pos:line="62" pos:column="56"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="63" pos:column="17">tx_strm<pos:position pos:line="63" pos:column="24"/></name><operator pos:line="63" pos:column="24">.<pos:position pos:line="63" pos:column="25"/></operator><name pos:line="63" pos:column="25">avail_out<pos:position pos:line="63" pos:column="34"/></name></name> <operator pos:line="63" pos:column="35">=<pos:position pos:line="63" pos:column="36"/></operator> <name pos:line="63" pos:column="37">MAX_DATA_COUNT<pos:position pos:line="63" pos:column="51"/></name></expr>;<pos:position pos:line="63" pos:column="52"/></expr_stmt>
	    }<pos:position pos:line="64" pos:column="14"/></block></then></if>
	    <expr_stmt><expr><name pos:line="65" pos:column="13">r<pos:position pos:line="65" pos:column="14"/></name> <operator pos:line="65" pos:column="15">=<pos:position pos:line="65" pos:column="16"/></operator> <call><name pos:line="65" pos:column="17">deflate<pos:position pos:line="65" pos:column="24"/></name><argument_list pos:line="65" pos:column="24">(<argument><expr><operator pos:line="65" pos:column="25">&amp;<pos:position pos:line="65" pos:column="30"/></operator><name pos:line="65" pos:column="26">tx_strm<pos:position pos:line="65" pos:column="33"/></name></expr></argument>, <argument><expr><ternary><condition><expr><name pos:line="65" pos:column="35">nb<pos:position pos:line="65" pos:column="37"/></name></expr>?<pos:position pos:line="65" pos:column="38"/></condition><then pos:line="65" pos:column="38"> <expr><name pos:line="65" pos:column="39">Z_NO_FLUSH<pos:position pos:line="65" pos:column="49"/></name></expr></then><else pos:line="65" pos:column="49">: <expr><name pos:line="65" pos:column="51">Z_PACKET_FLUSH<pos:position pos:line="65" pos:column="65"/></name></expr></else></ternary></expr></argument>)<pos:position pos:line="65" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="67"/></expr_stmt>
	    <if pos:line="66" pos:column="13">if <condition pos:line="66" pos:column="16">(<expr><name pos:line="66" pos:column="17">r<pos:position pos:line="66" pos:column="18"/></name> <operator pos:line="66" pos:column="19">!=<pos:position pos:line="66" pos:column="21"/></operator> <name pos:line="66" pos:column="22">Z_OK<pos:position pos:line="66" pos:column="26"/></name></expr>)<pos:position pos:line="66" pos:column="27"/></condition><then pos:line="66" pos:column="27"> <block pos:line="66" pos:column="28">{
		<expr_stmt><expr><call><name pos:line="67" pos:column="17">fprintf<pos:position pos:line="67" pos:column="24"/></name><argument_list pos:line="67" pos:column="24">(<argument><expr><name pos:line="67" pos:column="25">FERROR<pos:position pos:line="67" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="67" pos:column="33">"deflate returned %d\n"<pos:position pos:line="67" pos:column="56"/></literal></expr></argument>, <argument><expr><name pos:line="67" pos:column="58">r<pos:position pos:line="67" pos:column="59"/></name></expr></argument>)<pos:position pos:line="67" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="61"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="68" pos:column="17">exit_cleanup<pos:position pos:line="68" pos:column="29"/></name><argument_list pos:line="68" pos:column="29">(<argument><expr><literal type="number" pos:line="68" pos:column="30">1<pos:position pos:line="68" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="68" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="33"/></expr_stmt>
	    }<pos:position pos:line="69" pos:column="14"/></block></then></if>
	    <if pos:line="70" pos:column="13">if <condition pos:line="70" pos:column="16">(<expr><name pos:line="70" pos:column="17">nb<pos:position pos:line="70" pos:column="19"/></name> <operator pos:line="70" pos:column="20">==<pos:position pos:line="70" pos:column="22"/></operator> <literal type="number" pos:line="70" pos:column="23">0<pos:position pos:line="70" pos:column="24"/></literal> <operator pos:line="70" pos:column="25">||<pos:position pos:line="70" pos:column="27"/></operator> <name><name pos:line="70" pos:column="28">tx_strm<pos:position pos:line="70" pos:column="35"/></name><operator pos:line="70" pos:column="35">.<pos:position pos:line="70" pos:column="36"/></operator><name pos:line="70" pos:column="36">avail_out<pos:position pos:line="70" pos:column="45"/></name></name> <operator pos:line="70" pos:column="46">==<pos:position pos:line="70" pos:column="48"/></operator> <literal type="number" pos:line="70" pos:column="49">0<pos:position pos:line="70" pos:column="50"/></literal></expr>)<pos:position pos:line="70" pos:column="51"/></condition><then pos:line="70" pos:column="51"> <block pos:line="70" pos:column="52">{
		<expr_stmt><expr><name pos:line="71" pos:column="17">n<pos:position pos:line="71" pos:column="18"/></name> <operator pos:line="71" pos:column="19">=<pos:position pos:line="71" pos:column="20"/></operator> <name pos:line="71" pos:column="21">MAX_DATA_COUNT<pos:position pos:line="71" pos:column="35"/></name> <operator pos:line="71" pos:column="36">-<pos:position pos:line="71" pos:column="37"/></operator> <name><name pos:line="71" pos:column="38">tx_strm<pos:position pos:line="71" pos:column="45"/></name><operator pos:line="71" pos:column="45">.<pos:position pos:line="71" pos:column="46"/></operator><name pos:line="71" pos:column="46">avail_out<pos:position pos:line="71" pos:column="55"/></name></name></expr>;<pos:position pos:line="71" pos:column="56"/></expr_stmt>
		<if pos:line="72" pos:column="17">if <condition pos:line="72" pos:column="20">(<expr><name pos:line="72" pos:column="21">n<pos:position pos:line="72" pos:column="22"/></name> <operator pos:line="72" pos:column="23">&gt;<pos:position pos:line="72" pos:column="27"/></operator> <literal type="number" pos:line="72" pos:column="25">0<pos:position pos:line="72" pos:column="26"/></literal></expr>)<pos:position pos:line="72" pos:column="27"/></condition><then pos:line="72" pos:column="27"> <block pos:line="72" pos:column="28">{
		    <expr_stmt><expr><name><name pos:line="73" pos:column="21">obuf<pos:position pos:line="73" pos:column="25"/></name><index pos:line="73" pos:column="25">[<expr><literal type="number" pos:line="73" pos:column="26">0<pos:position pos:line="73" pos:column="27"/></literal></expr>]<pos:position pos:line="73" pos:column="28"/></index></name> <operator pos:line="73" pos:column="29">=<pos:position pos:line="73" pos:column="30"/></operator> <name pos:line="73" pos:column="31">DEFLATED_DATA<pos:position pos:line="73" pos:column="44"/></name> <operator pos:line="73" pos:column="45">+<pos:position pos:line="73" pos:column="46"/></operator> <operator pos:line="73" pos:column="47">(<pos:position pos:line="73" pos:column="48"/></operator><name pos:line="73" pos:column="48">n<pos:position pos:line="73" pos:column="49"/></name> <operator pos:line="73" pos:column="50">&gt;&gt;<pos:position pos:line="73" pos:column="55"/></operator> <literal type="number" pos:line="73" pos:column="53">8<pos:position pos:line="73" pos:column="54"/></literal><operator pos:line="73" pos:column="54">)<pos:position pos:line="73" pos:column="55"/></operator></expr>;<pos:position pos:line="73" pos:column="56"/></expr_stmt>
		    <expr_stmt><expr><name><name pos:line="74" pos:column="21">obuf<pos:position pos:line="74" pos:column="25"/></name><index pos:line="74" pos:column="25">[<expr><literal type="number" pos:line="74" pos:column="26">1<pos:position pos:line="74" pos:column="27"/></literal></expr>]<pos:position pos:line="74" pos:column="28"/></index></name> <operator pos:line="74" pos:column="29">=<pos:position pos:line="74" pos:column="30"/></operator> <name pos:line="74" pos:column="31">n<pos:position pos:line="74" pos:column="32"/></name></expr>;<pos:position pos:line="74" pos:column="33"/></expr_stmt>
		    <expr_stmt><expr><call><name pos:line="75" pos:column="21">write_buf<pos:position pos:line="75" pos:column="30"/></name><argument_list pos:line="75" pos:column="30">(<argument><expr><name pos:line="75" pos:column="31">f<pos:position pos:line="75" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="75" pos:column="34">obuf<pos:position pos:line="75" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="75" pos:column="40">n<pos:position pos:line="75" pos:column="41"/></name><operator pos:line="75" pos:column="41">+<pos:position pos:line="75" pos:column="42"/></operator><literal type="number" pos:line="75" pos:column="42">2<pos:position pos:line="75" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="75" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="45"/></expr_stmt>
		}<pos:position pos:line="76" pos:column="18"/></block></then></if>
	    }<pos:position pos:line="77" pos:column="14"/></block></then></if>
	}<pos:position pos:line="78" pos:column="10"/></block> while <condition pos:line="78" pos:column="17">(<expr><name pos:line="78" pos:column="18">nb<pos:position pos:line="78" pos:column="20"/></name> <operator pos:line="78" pos:column="21">!=<pos:position pos:line="78" pos:column="23"/></operator> <literal type="number" pos:line="78" pos:column="24">0<pos:position pos:line="78" pos:column="25"/></literal> <operator pos:line="78" pos:column="26">||<pos:position pos:line="78" pos:column="28"/></operator> <name><name pos:line="78" pos:column="29">tx_strm<pos:position pos:line="78" pos:column="36"/></name><operator pos:line="78" pos:column="36">.<pos:position pos:line="78" pos:column="37"/></operator><name pos:line="78" pos:column="37">avail_out<pos:position pos:line="78" pos:column="46"/></name></name> <operator pos:line="78" pos:column="47">==<pos:position pos:line="78" pos:column="49"/></operator> <literal type="number" pos:line="78" pos:column="50">0<pos:position pos:line="78" pos:column="51"/></literal></expr>)<pos:position pos:line="78" pos:column="52"/></condition>;<pos:position pos:line="78" pos:column="53"/></do>
    }<pos:position pos:line="79" pos:column="6"/></block></then></if>

    <if pos:line="81" pos:column="5">if <condition pos:line="81" pos:column="8">(<expr><name pos:line="81" pos:column="9">token<pos:position pos:line="81" pos:column="14"/></name> <operator pos:line="81" pos:column="15">!=<pos:position pos:line="81" pos:column="17"/></operator> <operator pos:line="81" pos:column="18">-<pos:position pos:line="81" pos:column="19"/></operator><literal type="number" pos:line="81" pos:column="19">1<pos:position pos:line="81" pos:column="20"/></literal></expr>)<pos:position pos:line="81" pos:column="21"/></condition><then pos:line="81" pos:column="21"> <block pos:line="81" pos:column="22">{
	<comment type="block" pos:line="82" pos:column="9">/* add the data in the current block to the compressor's
	   history and hash table */</comment>
	<expr_stmt><expr><name><name pos:line="84" pos:column="9">tx_strm<pos:position pos:line="84" pos:column="16"/></name><operator pos:line="84" pos:column="16">.<pos:position pos:line="84" pos:column="17"/></operator><name pos:line="84" pos:column="17">next_in<pos:position pos:line="84" pos:column="24"/></name></name> <operator pos:line="84" pos:column="25">=<pos:position pos:line="84" pos:column="26"/></operator> <operator pos:line="84" pos:column="27">(<pos:position pos:line="84" pos:column="28"/></operator><name pos:line="84" pos:column="28">Bytef<pos:position pos:line="84" pos:column="33"/></name> <operator pos:line="84" pos:column="34">*<pos:position pos:line="84" pos:column="35"/></operator><operator pos:line="84" pos:column="35">)<pos:position pos:line="84" pos:column="36"/></operator><call><name pos:line="84" pos:column="36">map_ptr<pos:position pos:line="84" pos:column="43"/></name><argument_list pos:line="84" pos:column="43">(<argument><expr><name pos:line="84" pos:column="44">buf<pos:position pos:line="84" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="84" pos:column="49">offset<pos:position pos:line="84" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="84" pos:column="57">toklen<pos:position pos:line="84" pos:column="63"/></name></expr></argument>)<pos:position pos:line="84" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="65"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="85" pos:column="9">tx_strm<pos:position pos:line="85" pos:column="16"/></name><operator pos:line="85" pos:column="16">.<pos:position pos:line="85" pos:column="17"/></operator><name pos:line="85" pos:column="17">avail_in<pos:position pos:line="85" pos:column="25"/></name></name> <operator pos:line="85" pos:column="26">=<pos:position pos:line="85" pos:column="27"/></operator> <name pos:line="85" pos:column="28">toklen<pos:position pos:line="85" pos:column="34"/></name></expr>;<pos:position pos:line="85" pos:column="35"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="86" pos:column="9">tx_strm<pos:position pos:line="86" pos:column="16"/></name><operator pos:line="86" pos:column="16">.<pos:position pos:line="86" pos:column="17"/></operator><name pos:line="86" pos:column="17">next_out<pos:position pos:line="86" pos:column="25"/></name></name> <operator pos:line="86" pos:column="26">=<pos:position pos:line="86" pos:column="27"/></operator> <name pos:line="86" pos:column="28">NULL<pos:position pos:line="86" pos:column="32"/></name></expr>;<pos:position pos:line="86" pos:column="33"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="87" pos:column="9">tx_strm<pos:position pos:line="87" pos:column="16"/></name><operator pos:line="87" pos:column="16">.<pos:position pos:line="87" pos:column="17"/></operator><name pos:line="87" pos:column="17">avail_out<pos:position pos:line="87" pos:column="26"/></name></name> <operator pos:line="87" pos:column="27">=<pos:position pos:line="87" pos:column="28"/></operator> <literal type="number" pos:line="87" pos:column="29">2<pos:position pos:line="87" pos:column="30"/></literal> <operator pos:line="87" pos:column="31">*<pos:position pos:line="87" pos:column="32"/></operator> <name pos:line="87" pos:column="33">toklen<pos:position pos:line="87" pos:column="39"/></name></expr>;<pos:position pos:line="87" pos:column="40"/></expr_stmt>
	<expr_stmt><expr><name pos:line="88" pos:column="9">r<pos:position pos:line="88" pos:column="10"/></name> <operator pos:line="88" pos:column="11">=<pos:position pos:line="88" pos:column="12"/></operator> <call><name pos:line="88" pos:column="13">deflate<pos:position pos:line="88" pos:column="20"/></name><argument_list pos:line="88" pos:column="20">(<argument><expr><operator pos:line="88" pos:column="21">&amp;<pos:position pos:line="88" pos:column="26"/></operator><name pos:line="88" pos:column="22">tx_strm<pos:position pos:line="88" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="88" pos:column="31">Z_INSERT_ONLY<pos:position pos:line="88" pos:column="44"/></name></expr></argument>)<pos:position pos:line="88" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="46"/></expr_stmt>
	<if pos:line="89" pos:column="9">if <condition pos:line="89" pos:column="12">(<expr><name pos:line="89" pos:column="13">r<pos:position pos:line="89" pos:column="14"/></name> <operator pos:line="89" pos:column="15">!=<pos:position pos:line="89" pos:column="17"/></operator> <name pos:line="89" pos:column="18">Z_OK<pos:position pos:line="89" pos:column="22"/></name> <operator pos:line="89" pos:column="23">||<pos:position pos:line="89" pos:column="25"/></operator> <name><name pos:line="89" pos:column="26">tx_strm<pos:position pos:line="89" pos:column="33"/></name><operator pos:line="89" pos:column="33">.<pos:position pos:line="89" pos:column="34"/></operator><name pos:line="89" pos:column="34">avail_in<pos:position pos:line="89" pos:column="42"/></name></name> <operator pos:line="89" pos:column="43">!=<pos:position pos:line="89" pos:column="45"/></operator> <literal type="number" pos:line="89" pos:column="46">0<pos:position pos:line="89" pos:column="47"/></literal></expr>)<pos:position pos:line="89" pos:column="48"/></condition><then pos:line="89" pos:column="48"> <block pos:line="89" pos:column="49">{
	    <expr_stmt><expr><call><name pos:line="90" pos:column="13">fprintf<pos:position pos:line="90" pos:column="20"/></name><argument_list pos:line="90" pos:column="20">(<argument><expr><name pos:line="90" pos:column="21">FERROR<pos:position pos:line="90" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="90" pos:column="29">"deflate on token returned %d (%d bytes left)\n"<pos:position pos:line="90" pos:column="77"/></literal></expr></argument>,
		    <argument><expr><name pos:line="91" pos:column="21">r<pos:position pos:line="91" pos:column="22"/></name></expr></argument>, <argument><expr><name><name pos:line="91" pos:column="24">tx_strm<pos:position pos:line="91" pos:column="31"/></name><operator pos:line="91" pos:column="31">.<pos:position pos:line="91" pos:column="32"/></operator><name pos:line="91" pos:column="32">avail_in<pos:position pos:line="91" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="91" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="42"/></expr_stmt>
	    <expr_stmt><expr><call><name pos:line="92" pos:column="13">exit_cleanup<pos:position pos:line="92" pos:column="25"/></name><argument_list pos:line="92" pos:column="25">(<argument><expr><literal type="number" pos:line="92" pos:column="26">1<pos:position pos:line="92" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="92" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="29"/></expr_stmt>
	}<pos:position pos:line="93" pos:column="10"/></block></then></if>

    }<pos:position pos:line="95" pos:column="6"/></block></then> <else pos:line="95" pos:column="7">else <block pos:line="95" pos:column="12">{
	<comment type="block" pos:line="96" pos:column="9">/* end of file - clean up */</comment>
	<expr_stmt><expr><call><name pos:line="97" pos:column="9">write_byte<pos:position pos:line="97" pos:column="19"/></name><argument_list pos:line="97" pos:column="19">(<argument><expr><name pos:line="97" pos:column="20">f<pos:position pos:line="97" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="97" pos:column="23">END_FLAG<pos:position pos:line="97" pos:column="31"/></name></expr></argument>)<pos:position pos:line="97" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="33"/></expr_stmt>
    }<pos:position pos:line="98" pos:column="6"/></block></else></if>
}<pos:position pos:line="99" pos:column="2"/></block></function></unit>
