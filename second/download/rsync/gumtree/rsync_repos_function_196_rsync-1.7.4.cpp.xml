<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_196_rsync-1.7.4.cpp" pos:tabs="8"><decl_stmt><decl><type><name pos:line="1" pos:column="1">local<pos:position pos:line="1" pos:column="6"/></name> <name pos:line="1" pos:column="7">ulg<pos:position pos:line="1" pos:column="10"/></name></type> <name pos:line="1" pos:column="11">ct_flush_block<pos:position pos:line="1" pos:column="25"/></name><argument_list pos:line="1" pos:column="25">(<argument><expr><name pos:line="1" pos:column="26">s<pos:position pos:line="1" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="1" pos:column="29">buf<pos:position pos:line="1" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="1" pos:column="34">stored_len<pos:position pos:line="1" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="1" pos:column="46">flush<pos:position pos:line="1" pos:column="51"/></name></expr></argument>)<pos:position pos:line="1" pos:column="52"/></argument_list>
    <name pos:line="2" pos:column="5">deflate_state<pos:position pos:line="2" pos:column="18"/></name> <modifier pos:line="2" pos:column="19">*<pos:position pos:line="2" pos:column="20"/></modifier><name pos:line="2" pos:column="20">s<pos:position pos:line="2" pos:column="21"/></name></decl>;<pos:position pos:line="2" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">charf<pos:position pos:line="3" pos:column="10"/></name> <modifier pos:line="3" pos:column="11">*<pos:position pos:line="3" pos:column="12"/></modifier></type><name pos:line="3" pos:column="12">buf<pos:position pos:line="3" pos:column="15"/></name></decl>;<pos:position pos:line="3" pos:column="16"/></decl_stmt>       <comment type="block" pos:line="3" pos:column="23">/* input block, or NULL if too old */</comment>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">ulg<pos:position pos:line="4" pos:column="8"/></name></type> <name pos:line="4" pos:column="9">stored_len<pos:position pos:line="4" pos:column="19"/></name></decl>;<pos:position pos:line="4" pos:column="20"/></decl_stmt>   <comment type="block" pos:line="4" pos:column="23">/* length of input block */</comment>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">int<pos:position pos:line="5" pos:column="8"/></name></type> <name pos:line="5" pos:column="9">flush<pos:position pos:line="5" pos:column="14"/></name></decl>;<pos:position pos:line="5" pos:column="15"/></decl_stmt>        <comment type="block" pos:line="5" pos:column="23">/* Z_FINISH if this is the last block for a file */</comment>
<block pos:line="6" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">ulg<pos:position pos:line="7" pos:column="8"/></name></type> <name pos:line="7" pos:column="9">opt_lenb<pos:position pos:line="7" pos:column="17"/></name></decl>, <decl><type ref="prev"/><name pos:line="7" pos:column="19">static_lenb<pos:position pos:line="7" pos:column="30"/></name></decl>;<pos:position pos:line="7" pos:column="31"/></decl_stmt> <comment type="block" pos:line="7" pos:column="32">/* opt_len and static_len in bytes */</comment>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">int<pos:position pos:line="8" pos:column="8"/></name></type> <name pos:line="8" pos:column="9">max_blindex<pos:position pos:line="8" pos:column="20"/></name></decl>;<pos:position pos:line="8" pos:column="21"/></decl_stmt>  <comment type="block" pos:line="8" pos:column="23">/* index of last bit length code of non zero freq */</comment>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">int<pos:position pos:line="9" pos:column="8"/></name></type> <name pos:line="9" pos:column="9">eof<pos:position pos:line="9" pos:column="12"/></name> <init pos:line="9" pos:column="13">= <expr><name pos:line="9" pos:column="15">flush<pos:position pos:line="9" pos:column="20"/></name> <operator pos:line="9" pos:column="21">==<pos:position pos:line="9" pos:column="23"/></operator> <name pos:line="9" pos:column="24">Z_FINISH<pos:position pos:line="9" pos:column="32"/></name></expr></init></decl>;<pos:position pos:line="9" pos:column="33"/></decl_stmt>

    <expr_stmt><expr><operator pos:line="11" pos:column="5">++<pos:position pos:line="11" pos:column="7"/></operator><name><name pos:line="11" pos:column="7">s<pos:position pos:line="11" pos:column="8"/></name><operator pos:line="11" pos:column="8">-&gt;<pos:position pos:line="11" pos:column="13"/></operator><name pos:line="11" pos:column="10">blocks_in_packet<pos:position pos:line="11" pos:column="26"/></name></name></expr>;<pos:position pos:line="11" pos:column="27"/></expr_stmt>

    <comment type="block" pos:line="13" pos:column="5">/* Check if the file is ascii or binary */</comment>
    <if pos:line="14" pos:column="5">if <condition pos:line="14" pos:column="8">(<expr><name><name pos:line="14" pos:column="9">s<pos:position pos:line="14" pos:column="10"/></name><operator pos:line="14" pos:column="10">-&gt;<pos:position pos:line="14" pos:column="15"/></operator><name pos:line="14" pos:column="12">data_type<pos:position pos:line="14" pos:column="21"/></name></name> <operator pos:line="14" pos:column="22">==<pos:position pos:line="14" pos:column="24"/></operator> <name pos:line="14" pos:column="25">UNKNOWN<pos:position pos:line="14" pos:column="32"/></name></expr>)<pos:position pos:line="14" pos:column="33"/></condition><then pos:line="14" pos:column="33"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="14" pos:column="34">set_data_type<pos:position pos:line="14" pos:column="47"/></name><argument_list pos:line="14" pos:column="47">(<argument><expr><name pos:line="14" pos:column="48">s<pos:position pos:line="14" pos:column="49"/></name></expr></argument>)<pos:position pos:line="14" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="51"/></expr_stmt></block></then></if>

    <comment type="block" pos:line="16" pos:column="5">/* Construct the literal and distance trees */</comment>
    <expr_stmt><expr><call><name pos:line="17" pos:column="5">build_tree<pos:position pos:line="17" pos:column="15"/></name><argument_list pos:line="17" pos:column="15">(<argument><expr><name pos:line="17" pos:column="16">s<pos:position pos:line="17" pos:column="17"/></name></expr></argument>, <argument><expr><operator pos:line="17" pos:column="19">(<pos:position pos:line="17" pos:column="20"/></operator><name pos:line="17" pos:column="20">tree_desc<pos:position pos:line="17" pos:column="29"/></name> <operator pos:line="17" pos:column="30">*<pos:position pos:line="17" pos:column="31"/></operator><operator pos:line="17" pos:column="31">)<pos:position pos:line="17" pos:column="32"/></operator><operator pos:line="17" pos:column="32">(<pos:position pos:line="17" pos:column="33"/></operator><operator pos:line="17" pos:column="33">&amp;<pos:position pos:line="17" pos:column="38"/></operator><operator pos:line="17" pos:column="34">(<pos:position pos:line="17" pos:column="35"/></operator><name><name pos:line="17" pos:column="35">s<pos:position pos:line="17" pos:column="36"/></name><operator pos:line="17" pos:column="36">-&gt;<pos:position pos:line="17" pos:column="41"/></operator><name pos:line="17" pos:column="38">l_desc<pos:position pos:line="17" pos:column="44"/></name></name><operator pos:line="17" pos:column="44">)<pos:position pos:line="17" pos:column="45"/></operator><operator pos:line="17" pos:column="45">)<pos:position pos:line="17" pos:column="46"/></operator></expr></argument>)<pos:position pos:line="17" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="48"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="18" pos:column="5">Tracev<pos:position pos:line="18" pos:column="11"/></name><argument_list pos:line="18" pos:column="11">(<argument><expr><operator pos:line="18" pos:column="12">(<pos:position pos:line="18" pos:column="13"/></operator><name pos:line="18" pos:column="13">stderr<pos:position pos:line="18" pos:column="19"/></name><operator pos:line="18" pos:column="19">,<pos:position pos:line="18" pos:column="20"/></operator> <literal type="string" pos:line="18" pos:column="21">"\nlit data: dyn %ld, stat %ld"<pos:position pos:line="18" pos:column="52"/></literal><operator pos:line="18" pos:column="52">,<pos:position pos:line="18" pos:column="53"/></operator> <name><name pos:line="18" pos:column="54">s<pos:position pos:line="18" pos:column="55"/></name><operator pos:line="18" pos:column="55">-&gt;<pos:position pos:line="18" pos:column="60"/></operator><name pos:line="18" pos:column="57">opt_len<pos:position pos:line="18" pos:column="64"/></name></name><operator pos:line="18" pos:column="64">,<pos:position pos:line="18" pos:column="65"/></operator>
            <name><name pos:line="19" pos:column="13">s<pos:position pos:line="19" pos:column="14"/></name><operator pos:line="19" pos:column="14">-&gt;<pos:position pos:line="19" pos:column="19"/></operator><name pos:line="19" pos:column="16">static_len<pos:position pos:line="19" pos:column="26"/></name></name><operator pos:line="19" pos:column="26">)<pos:position pos:line="19" pos:column="27"/></operator></expr></argument>)<pos:position pos:line="19" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="29"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="21" pos:column="5">build_tree<pos:position pos:line="21" pos:column="15"/></name><argument_list pos:line="21" pos:column="15">(<argument><expr><name pos:line="21" pos:column="16">s<pos:position pos:line="21" pos:column="17"/></name></expr></argument>, <argument><expr><operator pos:line="21" pos:column="19">(<pos:position pos:line="21" pos:column="20"/></operator><name pos:line="21" pos:column="20">tree_desc<pos:position pos:line="21" pos:column="29"/></name> <operator pos:line="21" pos:column="30">*<pos:position pos:line="21" pos:column="31"/></operator><operator pos:line="21" pos:column="31">)<pos:position pos:line="21" pos:column="32"/></operator><operator pos:line="21" pos:column="32">(<pos:position pos:line="21" pos:column="33"/></operator><operator pos:line="21" pos:column="33">&amp;<pos:position pos:line="21" pos:column="38"/></operator><operator pos:line="21" pos:column="34">(<pos:position pos:line="21" pos:column="35"/></operator><name><name pos:line="21" pos:column="35">s<pos:position pos:line="21" pos:column="36"/></name><operator pos:line="21" pos:column="36">-&gt;<pos:position pos:line="21" pos:column="41"/></operator><name pos:line="21" pos:column="38">d_desc<pos:position pos:line="21" pos:column="44"/></name></name><operator pos:line="21" pos:column="44">)<pos:position pos:line="21" pos:column="45"/></operator><operator pos:line="21" pos:column="45">)<pos:position pos:line="21" pos:column="46"/></operator></expr></argument>)<pos:position pos:line="21" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="48"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="22" pos:column="5">Tracev<pos:position pos:line="22" pos:column="11"/></name><argument_list pos:line="22" pos:column="11">(<argument><expr><operator pos:line="22" pos:column="12">(<pos:position pos:line="22" pos:column="13"/></operator><name pos:line="22" pos:column="13">stderr<pos:position pos:line="22" pos:column="19"/></name><operator pos:line="22" pos:column="19">,<pos:position pos:line="22" pos:column="20"/></operator> <literal type="string" pos:line="22" pos:column="21">"\ndist data: dyn %ld, stat %ld"<pos:position pos:line="22" pos:column="53"/></literal><operator pos:line="22" pos:column="53">,<pos:position pos:line="22" pos:column="54"/></operator> <name><name pos:line="22" pos:column="55">s<pos:position pos:line="22" pos:column="56"/></name><operator pos:line="22" pos:column="56">-&gt;<pos:position pos:line="22" pos:column="61"/></operator><name pos:line="22" pos:column="58">opt_len<pos:position pos:line="22" pos:column="65"/></name></name><operator pos:line="22" pos:column="65">,<pos:position pos:line="22" pos:column="66"/></operator>
            <name><name pos:line="23" pos:column="13">s<pos:position pos:line="23" pos:column="14"/></name><operator pos:line="23" pos:column="14">-&gt;<pos:position pos:line="23" pos:column="19"/></operator><name pos:line="23" pos:column="16">static_len<pos:position pos:line="23" pos:column="26"/></name></name><operator pos:line="23" pos:column="26">)<pos:position pos:line="23" pos:column="27"/></operator></expr></argument>)<pos:position pos:line="23" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="29"/></expr_stmt>
    <comment type="block" pos:line="24" pos:column="5">/* At this point, opt_len and static_len are the total bit lengths of
     * the compressed block data, excluding the tree representations.
     */</comment>

    <comment type="block" pos:line="28" pos:column="5">/* Build the bit length tree for the above two trees, and get the index
     * in bl_order of the last bit length code to send.
     */</comment>
    <expr_stmt><expr><name pos:line="31" pos:column="5">max_blindex<pos:position pos:line="31" pos:column="16"/></name> <operator pos:line="31" pos:column="17">=<pos:position pos:line="31" pos:column="18"/></operator> <call><name pos:line="31" pos:column="19">build_bl_tree<pos:position pos:line="31" pos:column="32"/></name><argument_list pos:line="31" pos:column="32">(<argument><expr><name pos:line="31" pos:column="33">s<pos:position pos:line="31" pos:column="34"/></name></expr></argument>)<pos:position pos:line="31" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="36"/></expr_stmt>

    <comment type="block" pos:line="33" pos:column="5">/* Determine the best encoding. Compute first the block length in bytes */</comment>
    <expr_stmt><expr><name pos:line="34" pos:column="5">opt_lenb<pos:position pos:line="34" pos:column="13"/></name> <operator pos:line="34" pos:column="14">=<pos:position pos:line="34" pos:column="15"/></operator> <operator pos:line="34" pos:column="16">(<pos:position pos:line="34" pos:column="17"/></operator><name><name pos:line="34" pos:column="17">s<pos:position pos:line="34" pos:column="18"/></name><operator pos:line="34" pos:column="18">-&gt;<pos:position pos:line="34" pos:column="23"/></operator><name pos:line="34" pos:column="20">opt_len<pos:position pos:line="34" pos:column="27"/></name></name><operator pos:line="34" pos:column="27">+<pos:position pos:line="34" pos:column="28"/></operator><literal type="number" pos:line="34" pos:column="28">3<pos:position pos:line="34" pos:column="29"/></literal><operator pos:line="34" pos:column="29">+<pos:position pos:line="34" pos:column="30"/></operator><literal type="number" pos:line="34" pos:column="30">7<pos:position pos:line="34" pos:column="31"/></literal><operator pos:line="34" pos:column="31">)<pos:position pos:line="34" pos:column="32"/></operator><operator pos:line="34" pos:column="32">&gt;&gt;<pos:position pos:line="34" pos:column="37"/></operator><literal type="number" pos:line="34" pos:column="34">3<pos:position pos:line="34" pos:column="35"/></literal></expr>;<pos:position pos:line="34" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><name pos:line="35" pos:column="5">static_lenb<pos:position pos:line="35" pos:column="16"/></name> <operator pos:line="35" pos:column="17">=<pos:position pos:line="35" pos:column="18"/></operator> <operator pos:line="35" pos:column="19">(<pos:position pos:line="35" pos:column="20"/></operator><name><name pos:line="35" pos:column="20">s<pos:position pos:line="35" pos:column="21"/></name><operator pos:line="35" pos:column="21">-&gt;<pos:position pos:line="35" pos:column="26"/></operator><name pos:line="35" pos:column="23">static_len<pos:position pos:line="35" pos:column="33"/></name></name><operator pos:line="35" pos:column="33">+<pos:position pos:line="35" pos:column="34"/></operator><literal type="number" pos:line="35" pos:column="34">3<pos:position pos:line="35" pos:column="35"/></literal><operator pos:line="35" pos:column="35">+<pos:position pos:line="35" pos:column="36"/></operator><literal type="number" pos:line="35" pos:column="36">7<pos:position pos:line="35" pos:column="37"/></literal><operator pos:line="35" pos:column="37">)<pos:position pos:line="35" pos:column="38"/></operator><operator pos:line="35" pos:column="38">&gt;&gt;<pos:position pos:line="35" pos:column="43"/></operator><literal type="number" pos:line="35" pos:column="40">3<pos:position pos:line="35" pos:column="41"/></literal></expr>;<pos:position pos:line="35" pos:column="42"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="37" pos:column="5">Tracev<pos:position pos:line="37" pos:column="11"/></name><argument_list pos:line="37" pos:column="11">(<argument><expr><operator pos:line="37" pos:column="12">(<pos:position pos:line="37" pos:column="13"/></operator><name pos:line="37" pos:column="13">stderr<pos:position pos:line="37" pos:column="19"/></name><operator pos:line="37" pos:column="19">,<pos:position pos:line="37" pos:column="20"/></operator> <literal type="string" pos:line="37" pos:column="21">"\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u "<pos:position pos:line="37" pos:column="70"/></literal><operator pos:line="37" pos:column="70">,<pos:position pos:line="37" pos:column="71"/></operator>
            <name pos:line="38" pos:column="13">opt_lenb<pos:position pos:line="38" pos:column="21"/></name><operator pos:line="38" pos:column="21">,<pos:position pos:line="38" pos:column="22"/></operator> <name><name pos:line="38" pos:column="23">s<pos:position pos:line="38" pos:column="24"/></name><operator pos:line="38" pos:column="24">-&gt;<pos:position pos:line="38" pos:column="29"/></operator><name pos:line="38" pos:column="26">opt_len<pos:position pos:line="38" pos:column="33"/></name></name><operator pos:line="38" pos:column="33">,<pos:position pos:line="38" pos:column="34"/></operator> <name pos:line="38" pos:column="35">static_lenb<pos:position pos:line="38" pos:column="46"/></name><operator pos:line="38" pos:column="46">,<pos:position pos:line="38" pos:column="47"/></operator> <name><name pos:line="38" pos:column="48">s<pos:position pos:line="38" pos:column="49"/></name><operator pos:line="38" pos:column="49">-&gt;<pos:position pos:line="38" pos:column="54"/></operator><name pos:line="38" pos:column="51">static_len<pos:position pos:line="38" pos:column="61"/></name></name><operator pos:line="38" pos:column="61">,<pos:position pos:line="38" pos:column="62"/></operator> <name pos:line="38" pos:column="63">stored_len<pos:position pos:line="38" pos:column="73"/></name><operator pos:line="38" pos:column="73">,<pos:position pos:line="38" pos:column="74"/></operator>
            <name><name pos:line="39" pos:column="13">s<pos:position pos:line="39" pos:column="14"/></name><operator pos:line="39" pos:column="14">-&gt;<pos:position pos:line="39" pos:column="19"/></operator><name pos:line="39" pos:column="16">last_lit<pos:position pos:line="39" pos:column="24"/></name></name><operator pos:line="39" pos:column="24">)<pos:position pos:line="39" pos:column="25"/></operator></expr></argument>)<pos:position pos:line="39" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="27"/></expr_stmt>

    <if pos:line="41" pos:column="5">if <condition pos:line="41" pos:column="8">(<expr><name pos:line="41" pos:column="9">static_lenb<pos:position pos:line="41" pos:column="20"/></name> <operator pos:line="41" pos:column="21">&lt;=<pos:position pos:line="41" pos:column="26"/></operator> <name pos:line="41" pos:column="24">opt_lenb<pos:position pos:line="41" pos:column="32"/></name></expr>)<pos:position pos:line="41" pos:column="33"/></condition><then pos:line="41" pos:column="33"> <block type="pseudo"><expr_stmt><expr><name pos:line="41" pos:column="34">opt_lenb<pos:position pos:line="41" pos:column="42"/></name> <operator pos:line="41" pos:column="43">=<pos:position pos:line="41" pos:column="44"/></operator> <name pos:line="41" pos:column="45">static_lenb<pos:position pos:line="41" pos:column="56"/></name></expr>;<pos:position pos:line="41" pos:column="57"/></expr_stmt></block></then></if>

    <comment type="block" pos:line="43" pos:column="5">/* If compression failed and this is the first and last block,
     * and if the .zip file can be seeked (to rewrite the local header),
     * the whole file is transformed into a stored file:
     */</comment>
<cpp:ifdef pos:line="47" pos:column="1">#<cpp:directive pos:line="47" pos:column="2">ifdef<pos:position pos:line="47" pos:column="7"/></cpp:directive> <name pos:line="47" pos:column="8">STORED_FILE_OK<pos:position pos:line="47" pos:column="22"/></name></cpp:ifdef>
<cpp:ifdef pos:line="48" pos:column="1">#  <cpp:directive pos:line="48" pos:column="4">ifdef<pos:position pos:line="48" pos:column="9"/></cpp:directive> <name pos:line="48" pos:column="10">FORCE_STORED_FILE<pos:position pos:line="48" pos:column="27"/></name></cpp:ifdef>
    <if pos:line="49" pos:column="5">if <condition pos:line="49" pos:column="8">(<expr><name pos:line="49" pos:column="9">eof<pos:position pos:line="49" pos:column="12"/></name> <operator pos:line="49" pos:column="13">&amp;&amp;<pos:position pos:line="49" pos:column="23"/></operator> <name pos:line="49" pos:column="16">compressed_len<pos:position pos:line="49" pos:column="30"/></name> <operator pos:line="49" pos:column="31">==<pos:position pos:line="49" pos:column="33"/></operator> <literal type="number" pos:line="49" pos:column="34">0L<pos:position pos:line="49" pos:column="36"/></literal></expr>)<pos:position pos:line="49" pos:column="37"/></condition><then pos:line="49" pos:column="37"> <comment type="block" pos:line="49" pos:column="38">/* force stored file */</comment>
<cpp:else pos:line="50" pos:column="1">#  <cpp:directive pos:line="50" pos:column="4">else<pos:position pos:line="50" pos:column="8"/></cpp:directive></cpp:else>
    <block type="pseudo"><if pos:line="51" pos:column="5">if <condition pos:line="51" pos:column="8">(<expr><name pos:line="51" pos:column="9">stored_len<pos:position pos:line="51" pos:column="19"/></name> <operator pos:line="51" pos:column="20">&lt;=<pos:position pos:line="51" pos:column="25"/></operator> <name pos:line="51" pos:column="23">opt_lenb<pos:position pos:line="51" pos:column="31"/></name> <operator pos:line="51" pos:column="32">&amp;&amp;<pos:position pos:line="51" pos:column="42"/></operator> <name pos:line="51" pos:column="35">eof<pos:position pos:line="51" pos:column="38"/></name> <operator pos:line="51" pos:column="39">&amp;&amp;<pos:position pos:line="51" pos:column="49"/></operator> <name><name pos:line="51" pos:column="42">s<pos:position pos:line="51" pos:column="43"/></name><operator pos:line="51" pos:column="43">-&gt;<pos:position pos:line="51" pos:column="48"/></operator><name pos:line="51" pos:column="45">compressed_len<pos:position pos:line="51" pos:column="59"/></name></name><operator pos:line="51" pos:column="59">==<pos:position pos:line="51" pos:column="61"/></operator><literal type="number" pos:line="51" pos:column="61">0L<pos:position pos:line="51" pos:column="63"/></literal> <operator pos:line="51" pos:column="64">&amp;&amp;<pos:position pos:line="51" pos:column="74"/></operator> <call><name pos:line="51" pos:column="67">seekable<pos:position pos:line="51" pos:column="75"/></name><argument_list pos:line="51" pos:column="75">()<pos:position pos:line="51" pos:column="77"/></argument_list></call></expr>)<pos:position pos:line="51" pos:column="78"/></condition><then pos:line="51" pos:column="78">
<cpp:endif pos:line="52" pos:column="1">#  <cpp:directive pos:line="52" pos:column="4">endif<pos:position pos:line="52" pos:column="9"/></cpp:directive></cpp:endif>
    <block pos:line="53" pos:column="5">{
        <comment type="block" pos:line="54" pos:column="9">/* Since LIT_BUFSIZE &lt;= 2*WSIZE, the input data must be there: */</comment>
        <if pos:line="55" pos:column="9">if <condition pos:line="55" pos:column="12">(<expr><name pos:line="55" pos:column="13">buf<pos:position pos:line="55" pos:column="16"/></name> <operator pos:line="55" pos:column="17">==<pos:position pos:line="55" pos:column="19"/></operator> <operator pos:line="55" pos:column="20">(<pos:position pos:line="55" pos:column="21"/></operator><name pos:line="55" pos:column="21">charf<pos:position pos:line="55" pos:column="26"/></name><operator pos:line="55" pos:column="26">*<pos:position pos:line="55" pos:column="27"/></operator><operator pos:line="55" pos:column="27">)<pos:position pos:line="55" pos:column="28"/></operator><literal type="number" pos:line="55" pos:column="28">0<pos:position pos:line="55" pos:column="29"/></literal></expr>)<pos:position pos:line="55" pos:column="30"/></condition><then pos:line="55" pos:column="30"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="55" pos:column="31">error<pos:position pos:line="55" pos:column="36"/></name> <argument_list pos:line="55" pos:column="37">(<argument><expr><literal type="string" pos:line="55" pos:column="38">"block vanished"<pos:position pos:line="55" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="55" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="56"/></expr_stmt></block></then></if>

        <expr_stmt><expr><call><name pos:line="57" pos:column="9">copy_block<pos:position pos:line="57" pos:column="19"/></name><argument_list pos:line="57" pos:column="19">(<argument><expr><name pos:line="57" pos:column="20">buf<pos:position pos:line="57" pos:column="23"/></name></expr></argument>, <argument><expr><operator pos:line="57" pos:column="25">(<pos:position pos:line="57" pos:column="26"/></operator><name pos:line="57" pos:column="26">unsigned<pos:position pos:line="57" pos:column="34"/></name><operator pos:line="57" pos:column="34">)<pos:position pos:line="57" pos:column="35"/></operator><name pos:line="57" pos:column="35">stored_len<pos:position pos:line="57" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="57" pos:column="47">0<pos:position pos:line="57" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="57" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="50"/></expr_stmt> <comment type="block" pos:line="57" pos:column="51">/* without header */</comment>
        <expr_stmt><expr><name><name pos:line="58" pos:column="9">s<pos:position pos:line="58" pos:column="10"/></name><operator pos:line="58" pos:column="10">-&gt;<pos:position pos:line="58" pos:column="15"/></operator><name pos:line="58" pos:column="12">compressed_len<pos:position pos:line="58" pos:column="26"/></name></name> <operator pos:line="58" pos:column="27">=<pos:position pos:line="58" pos:column="28"/></operator> <name pos:line="58" pos:column="29">stored_len<pos:position pos:line="58" pos:column="39"/></name> <operator pos:line="58" pos:column="40">&lt;&lt;<pos:position pos:line="58" pos:column="48"/></operator> <literal type="number" pos:line="58" pos:column="43">3<pos:position pos:line="58" pos:column="44"/></literal></expr>;<pos:position pos:line="58" pos:column="45"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="59" pos:column="9">s<pos:position pos:line="59" pos:column="10"/></name><operator pos:line="59" pos:column="10">-&gt;<pos:position pos:line="59" pos:column="15"/></operator><name pos:line="59" pos:column="12">method<pos:position pos:line="59" pos:column="18"/></name></name> <operator pos:line="59" pos:column="19">=<pos:position pos:line="59" pos:column="20"/></operator> <name pos:line="59" pos:column="21">STORED<pos:position pos:line="59" pos:column="27"/></name></expr>;<pos:position pos:line="59" pos:column="28"/></expr_stmt>
    }<pos:position pos:line="60" pos:column="6"/></block></then> <elseif pos:line="60" pos:column="7">else
<cpp:endif pos:line="61" pos:column="1">#<cpp:directive pos:line="61" pos:column="2">endif<pos:position pos:line="61" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="61" pos:column="8">/* STORED_FILE_OK */</comment>

<cpp:ifdef pos:line="63" pos:column="1">#<cpp:directive pos:line="63" pos:column="2">ifdef<pos:position pos:line="63" pos:column="7"/></cpp:directive> <name pos:line="63" pos:column="8">FORCE_STORED<pos:position pos:line="63" pos:column="20"/></name></cpp:ifdef>
    <if pos:line="64" pos:column="5">if <condition pos:line="64" pos:column="8">(<expr><name pos:line="64" pos:column="9">buf<pos:position pos:line="64" pos:column="12"/></name> <operator pos:line="64" pos:column="13">!=<pos:position pos:line="64" pos:column="15"/></operator> <operator pos:line="64" pos:column="16">(<pos:position pos:line="64" pos:column="17"/></operator><name pos:line="64" pos:column="17">char<pos:position pos:line="64" pos:column="21"/></name><operator pos:line="64" pos:column="21">*<pos:position pos:line="64" pos:column="22"/></operator><operator pos:line="64" pos:column="22">)<pos:position pos:line="64" pos:column="23"/></operator><literal type="number" pos:line="64" pos:column="23">0<pos:position pos:line="64" pos:column="24"/></literal></expr>)<pos:position pos:line="64" pos:column="25"/></condition><then pos:line="64" pos:column="25"> <comment type="block" pos:line="64" pos:column="26">/* force stored block */</comment>
<cpp:else pos:line="65" pos:column="1">#<cpp:directive pos:line="65" pos:column="2">else<pos:position pos:line="65" pos:column="6"/></cpp:directive></cpp:else>
    <block type="pseudo"><if pos:line="66" pos:column="5">if <condition pos:line="66" pos:column="8">(<expr><name pos:line="66" pos:column="9">stored_len<pos:position pos:line="66" pos:column="19"/></name><operator pos:line="66" pos:column="19">+<pos:position pos:line="66" pos:column="20"/></operator><literal type="number" pos:line="66" pos:column="20">4<pos:position pos:line="66" pos:column="21"/></literal> <operator pos:line="66" pos:column="22">&lt;=<pos:position pos:line="66" pos:column="27"/></operator> <name pos:line="66" pos:column="25">opt_lenb<pos:position pos:line="66" pos:column="33"/></name> <operator pos:line="66" pos:column="34">&amp;&amp;<pos:position pos:line="66" pos:column="44"/></operator> <name pos:line="66" pos:column="37">buf<pos:position pos:line="66" pos:column="40"/></name> <operator pos:line="66" pos:column="41">!=<pos:position pos:line="66" pos:column="43"/></operator> <operator pos:line="66" pos:column="44">(<pos:position pos:line="66" pos:column="45"/></operator><name pos:line="66" pos:column="45">char<pos:position pos:line="66" pos:column="49"/></name><operator pos:line="66" pos:column="49">*<pos:position pos:line="66" pos:column="50"/></operator><operator pos:line="66" pos:column="50">)<pos:position pos:line="66" pos:column="51"/></operator><literal type="number" pos:line="66" pos:column="51">0<pos:position pos:line="66" pos:column="52"/></literal></expr>)<pos:position pos:line="66" pos:column="53"/></condition><then pos:line="66" pos:column="53">
                       <comment type="block" pos:line="67" pos:column="24">/* 4: two words for the lengths */</comment>
<cpp:endif pos:line="68" pos:column="1">#<cpp:directive pos:line="68" pos:column="2">endif<pos:position pos:line="68" pos:column="7"/></cpp:directive></cpp:endif>
    <block pos:line="69" pos:column="5">{
        <comment type="block" pos:line="70" pos:column="9">/* The test buf != NULL is only necessary if LIT_BUFSIZE &gt; WSIZE.
         * Otherwise we can't have processed more than WSIZE input bytes since
         * the last block flush, because compression would have been
         * successful. If LIT_BUFSIZE &lt;= WSIZE, it is never too late to
         * transform a block into a stored block.
         */</comment>
        <expr_stmt><expr><call><name pos:line="76" pos:column="9">ct_stored_block<pos:position pos:line="76" pos:column="24"/></name><argument_list pos:line="76" pos:column="24">(<argument><expr><name pos:line="76" pos:column="25">s<pos:position pos:line="76" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="76" pos:column="28">buf<pos:position pos:line="76" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="76" pos:column="33">stored_len<pos:position pos:line="76" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="76" pos:column="45">eof<pos:position pos:line="76" pos:column="48"/></name></expr></argument>)<pos:position pos:line="76" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="50"/></expr_stmt>
    }<pos:position pos:line="77" pos:column="6"/></block></then> <elseif pos:line="77" pos:column="7">else

<cpp:ifdef pos:line="79" pos:column="1">#<cpp:directive pos:line="79" pos:column="2">ifdef<pos:position pos:line="79" pos:column="7"/></cpp:directive> <name pos:line="79" pos:column="8">FORCE_STATIC<pos:position pos:line="79" pos:column="20"/></name></cpp:ifdef>
    <if pos:line="80" pos:column="5">if <condition pos:line="80" pos:column="8">(<expr><name pos:line="80" pos:column="9">static_lenb<pos:position pos:line="80" pos:column="20"/></name> <operator pos:line="80" pos:column="21">&gt;=<pos:position pos:line="80" pos:column="26"/></operator> <literal type="number" pos:line="80" pos:column="24">0<pos:position pos:line="80" pos:column="25"/></literal></expr>)<pos:position pos:line="80" pos:column="26"/></condition><then pos:line="80" pos:column="26"> <comment type="block" pos:line="80" pos:column="27">/* force static trees */</comment>
<cpp:else pos:line="81" pos:column="1">#<cpp:directive pos:line="81" pos:column="2">else<pos:position pos:line="81" pos:column="6"/></cpp:directive></cpp:else>
    <block type="pseudo"><if pos:line="82" pos:column="5">if <condition pos:line="82" pos:column="8">(<expr><name pos:line="82" pos:column="9">static_lenb<pos:position pos:line="82" pos:column="20"/></name> <operator pos:line="82" pos:column="21">==<pos:position pos:line="82" pos:column="23"/></operator> <name pos:line="82" pos:column="24">opt_lenb<pos:position pos:line="82" pos:column="32"/></name></expr>)<pos:position pos:line="82" pos:column="33"/></condition><then pos:line="82" pos:column="33">
<cpp:endif pos:line="83" pos:column="1">#<cpp:directive pos:line="83" pos:column="2">endif<pos:position pos:line="83" pos:column="7"/></cpp:directive></cpp:endif>
    <block pos:line="84" pos:column="5">{
        <expr_stmt><expr><call><name pos:line="85" pos:column="9">send_bits<pos:position pos:line="85" pos:column="18"/></name><argument_list pos:line="85" pos:column="18">(<argument><expr><name pos:line="85" pos:column="19">s<pos:position pos:line="85" pos:column="20"/></name></expr></argument>, <argument><expr><operator pos:line="85" pos:column="22">(<pos:position pos:line="85" pos:column="23"/></operator><name pos:line="85" pos:column="23">STATIC_TREES<pos:position pos:line="85" pos:column="35"/></name><operator pos:line="85" pos:column="35">&lt;&lt;<pos:position pos:line="85" pos:column="43"/></operator><literal type="number" pos:line="85" pos:column="37">1<pos:position pos:line="85" pos:column="38"/></literal><operator pos:line="85" pos:column="38">)<pos:position pos:line="85" pos:column="39"/></operator><operator pos:line="85" pos:column="39">+<pos:position pos:line="85" pos:column="40"/></operator><name pos:line="85" pos:column="40">eof<pos:position pos:line="85" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="85" pos:column="45">3<pos:position pos:line="85" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="85" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="48"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="86" pos:column="9">compress_block<pos:position pos:line="86" pos:column="23"/></name><argument_list pos:line="86" pos:column="23">(<argument><expr><name pos:line="86" pos:column="24">s<pos:position pos:line="86" pos:column="25"/></name></expr></argument>, <argument><expr><operator pos:line="86" pos:column="27">(<pos:position pos:line="86" pos:column="28"/></operator><name pos:line="86" pos:column="28">ct_data<pos:position pos:line="86" pos:column="35"/></name> <operator pos:line="86" pos:column="36">*<pos:position pos:line="86" pos:column="37"/></operator><operator pos:line="86" pos:column="37">)<pos:position pos:line="86" pos:column="38"/></operator><name pos:line="86" pos:column="38">static_ltree<pos:position pos:line="86" pos:column="50"/></name></expr></argument>, <argument><expr><operator pos:line="86" pos:column="52">(<pos:position pos:line="86" pos:column="53"/></operator><name pos:line="86" pos:column="53">ct_data<pos:position pos:line="86" pos:column="60"/></name> <operator pos:line="86" pos:column="61">*<pos:position pos:line="86" pos:column="62"/></operator><operator pos:line="86" pos:column="62">)<pos:position pos:line="86" pos:column="63"/></operator><name pos:line="86" pos:column="63">static_dtree<pos:position pos:line="86" pos:column="75"/></name></expr></argument>)<pos:position pos:line="86" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="77"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="87" pos:column="9">s<pos:position pos:line="87" pos:column="10"/></name><operator pos:line="87" pos:column="10">-&gt;<pos:position pos:line="87" pos:column="15"/></operator><name pos:line="87" pos:column="12">compressed_len<pos:position pos:line="87" pos:column="26"/></name></name> <operator pos:line="87" pos:column="27">+=<pos:position pos:line="87" pos:column="29"/></operator> <literal type="number" pos:line="87" pos:column="30">3<pos:position pos:line="87" pos:column="31"/></literal> <operator pos:line="87" pos:column="32">+<pos:position pos:line="87" pos:column="33"/></operator> <name><name pos:line="87" pos:column="34">s<pos:position pos:line="87" pos:column="35"/></name><operator pos:line="87" pos:column="35">-&gt;<pos:position pos:line="87" pos:column="40"/></operator><name pos:line="87" pos:column="37">static_len<pos:position pos:line="87" pos:column="47"/></name></name></expr>;<pos:position pos:line="87" pos:column="48"/></expr_stmt>
    }<pos:position pos:line="88" pos:column="6"/></block></then> <else pos:line="88" pos:column="7">else <block pos:line="88" pos:column="12">{
        <expr_stmt><expr><call><name pos:line="89" pos:column="9">send_bits<pos:position pos:line="89" pos:column="18"/></name><argument_list pos:line="89" pos:column="18">(<argument><expr><name pos:line="89" pos:column="19">s<pos:position pos:line="89" pos:column="20"/></name></expr></argument>, <argument><expr><operator pos:line="89" pos:column="22">(<pos:position pos:line="89" pos:column="23"/></operator><name pos:line="89" pos:column="23">DYN_TREES<pos:position pos:line="89" pos:column="32"/></name><operator pos:line="89" pos:column="32">&lt;&lt;<pos:position pos:line="89" pos:column="40"/></operator><literal type="number" pos:line="89" pos:column="34">1<pos:position pos:line="89" pos:column="35"/></literal><operator pos:line="89" pos:column="35">)<pos:position pos:line="89" pos:column="36"/></operator><operator pos:line="89" pos:column="36">+<pos:position pos:line="89" pos:column="37"/></operator><name pos:line="89" pos:column="37">eof<pos:position pos:line="89" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="89" pos:column="42">3<pos:position pos:line="89" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="89" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="45"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="90" pos:column="9">send_all_trees<pos:position pos:line="90" pos:column="23"/></name><argument_list pos:line="90" pos:column="23">(<argument><expr><name pos:line="90" pos:column="24">s<pos:position pos:line="90" pos:column="25"/></name></expr></argument>, <argument><expr><name><name pos:line="90" pos:column="27">s<pos:position pos:line="90" pos:column="28"/></name><operator pos:line="90" pos:column="28">-&gt;<pos:position pos:line="90" pos:column="33"/></operator><name pos:line="90" pos:column="30">l_desc<pos:position pos:line="90" pos:column="36"/></name><operator pos:line="90" pos:column="36">.<pos:position pos:line="90" pos:column="37"/></operator><name pos:line="90" pos:column="37">max_code<pos:position pos:line="90" pos:column="45"/></name></name><operator pos:line="90" pos:column="45">+<pos:position pos:line="90" pos:column="46"/></operator><literal type="number" pos:line="90" pos:column="46">1<pos:position pos:line="90" pos:column="47"/></literal></expr></argument>, <argument><expr><name><name pos:line="90" pos:column="49">s<pos:position pos:line="90" pos:column="50"/></name><operator pos:line="90" pos:column="50">-&gt;<pos:position pos:line="90" pos:column="55"/></operator><name pos:line="90" pos:column="52">d_desc<pos:position pos:line="90" pos:column="58"/></name><operator pos:line="90" pos:column="58">.<pos:position pos:line="90" pos:column="59"/></operator><name pos:line="90" pos:column="59">max_code<pos:position pos:line="90" pos:column="67"/></name></name><operator pos:line="90" pos:column="67">+<pos:position pos:line="90" pos:column="68"/></operator><literal type="number" pos:line="90" pos:column="68">1<pos:position pos:line="90" pos:column="69"/></literal></expr></argument>,
                       <argument><expr><name pos:line="91" pos:column="24">max_blindex<pos:position pos:line="91" pos:column="35"/></name><operator pos:line="91" pos:column="35">+<pos:position pos:line="91" pos:column="36"/></operator><literal type="number" pos:line="91" pos:column="36">1<pos:position pos:line="91" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="91" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="39"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="92" pos:column="9">compress_block<pos:position pos:line="92" pos:column="23"/></name><argument_list pos:line="92" pos:column="23">(<argument><expr><name pos:line="92" pos:column="24">s<pos:position pos:line="92" pos:column="25"/></name></expr></argument>, <argument><expr><operator pos:line="92" pos:column="27">(<pos:position pos:line="92" pos:column="28"/></operator><name pos:line="92" pos:column="28">ct_data<pos:position pos:line="92" pos:column="35"/></name> <operator pos:line="92" pos:column="36">*<pos:position pos:line="92" pos:column="37"/></operator><operator pos:line="92" pos:column="37">)<pos:position pos:line="92" pos:column="38"/></operator><name><name pos:line="92" pos:column="38">s<pos:position pos:line="92" pos:column="39"/></name><operator pos:line="92" pos:column="39">-&gt;<pos:position pos:line="92" pos:column="44"/></operator><name pos:line="92" pos:column="41">dyn_ltree<pos:position pos:line="92" pos:column="50"/></name></name></expr></argument>, <argument><expr><operator pos:line="92" pos:column="52">(<pos:position pos:line="92" pos:column="53"/></operator><name pos:line="92" pos:column="53">ct_data<pos:position pos:line="92" pos:column="60"/></name> <operator pos:line="92" pos:column="61">*<pos:position pos:line="92" pos:column="62"/></operator><operator pos:line="92" pos:column="62">)<pos:position pos:line="92" pos:column="63"/></operator><name><name pos:line="92" pos:column="63">s<pos:position pos:line="92" pos:column="64"/></name><operator pos:line="92" pos:column="64">-&gt;<pos:position pos:line="92" pos:column="69"/></operator><name pos:line="92" pos:column="66">dyn_dtree<pos:position pos:line="92" pos:column="75"/></name></name></expr></argument>)<pos:position pos:line="92" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="77"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="93" pos:column="9">s<pos:position pos:line="93" pos:column="10"/></name><operator pos:line="93" pos:column="10">-&gt;<pos:position pos:line="93" pos:column="15"/></operator><name pos:line="93" pos:column="12">compressed_len<pos:position pos:line="93" pos:column="26"/></name></name> <operator pos:line="93" pos:column="27">+=<pos:position pos:line="93" pos:column="29"/></operator> <literal type="number" pos:line="93" pos:column="30">3<pos:position pos:line="93" pos:column="31"/></literal> <operator pos:line="93" pos:column="32">+<pos:position pos:line="93" pos:column="33"/></operator> <name><name pos:line="93" pos:column="34">s<pos:position pos:line="93" pos:column="35"/></name><operator pos:line="93" pos:column="35">-&gt;<pos:position pos:line="93" pos:column="40"/></operator><name pos:line="93" pos:column="37">opt_len<pos:position pos:line="93" pos:column="44"/></name></name></expr>;<pos:position pos:line="93" pos:column="45"/></expr_stmt>
    }<pos:position pos:line="94" pos:column="6"/></block></else></if></block></then></if></elseif></if></block></then></if></elseif></if></block></then></if>
    <expr_stmt><expr><call><name pos:line="95" pos:column="5">Assert<pos:position pos:line="95" pos:column="11"/></name> <argument_list pos:line="95" pos:column="12">(<argument><expr><name><name pos:line="95" pos:column="13">s<pos:position pos:line="95" pos:column="14"/></name><operator pos:line="95" pos:column="14">-&gt;<pos:position pos:line="95" pos:column="19"/></operator><name pos:line="95" pos:column="16">compressed_len<pos:position pos:line="95" pos:column="30"/></name></name> <operator pos:line="95" pos:column="31">==<pos:position pos:line="95" pos:column="33"/></operator> <name><name pos:line="95" pos:column="34">s<pos:position pos:line="95" pos:column="35"/></name><operator pos:line="95" pos:column="35">-&gt;<pos:position pos:line="95" pos:column="40"/></operator><name pos:line="95" pos:column="37">bits_sent<pos:position pos:line="95" pos:column="46"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="95" pos:column="48">"bad compressed size"<pos:position pos:line="95" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="95" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="71"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="96" pos:column="5">init_block<pos:position pos:line="96" pos:column="15"/></name><argument_list pos:line="96" pos:column="15">(<argument><expr><name pos:line="96" pos:column="16">s<pos:position pos:line="96" pos:column="17"/></name></expr></argument>)<pos:position pos:line="96" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="19"/></expr_stmt>

    <if pos:line="98" pos:column="5">if <condition pos:line="98" pos:column="8">(<expr><name pos:line="98" pos:column="9">eof<pos:position pos:line="98" pos:column="12"/></name></expr>)<pos:position pos:line="98" pos:column="13"/></condition><then pos:line="98" pos:column="13"> <block pos:line="98" pos:column="14">{
        <expr_stmt><expr><call><name pos:line="99" pos:column="9">bi_windup<pos:position pos:line="99" pos:column="18"/></name><argument_list pos:line="99" pos:column="18">(<argument><expr><name pos:line="99" pos:column="19">s<pos:position pos:line="99" pos:column="20"/></name></expr></argument>)<pos:position pos:line="99" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="99" pos:column="22"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="100" pos:column="9">s<pos:position pos:line="100" pos:column="10"/></name><operator pos:line="100" pos:column="10">-&gt;<pos:position pos:line="100" pos:column="15"/></operator><name pos:line="100" pos:column="12">compressed_len<pos:position pos:line="100" pos:column="26"/></name></name> <operator pos:line="100" pos:column="27">+=<pos:position pos:line="100" pos:column="29"/></operator> <literal type="number" pos:line="100" pos:column="30">7<pos:position pos:line="100" pos:column="31"/></literal></expr>;<pos:position pos:line="100" pos:column="32"/></expr_stmt>  <comment type="block" pos:line="100" pos:column="34">/* align on byte boundary */</comment>
    }<pos:position pos:line="101" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="102" pos:column="5">Tracev<pos:position pos:line="102" pos:column="11"/></name><argument_list pos:line="102" pos:column="11">(<argument><expr><operator pos:line="102" pos:column="12">(<pos:position pos:line="102" pos:column="13"/></operator><name pos:line="102" pos:column="13">stderr<pos:position pos:line="102" pos:column="19"/></name><operator pos:line="102" pos:column="19">,<pos:position pos:line="102" pos:column="20"/></operator><literal type="string" pos:line="102" pos:column="20">"\ncomprlen %lu(%lu) "<pos:position pos:line="102" pos:column="42"/></literal><operator pos:line="102" pos:column="42">,<pos:position pos:line="102" pos:column="43"/></operator> <name><name pos:line="102" pos:column="44">s<pos:position pos:line="102" pos:column="45"/></name><operator pos:line="102" pos:column="45">-&gt;<pos:position pos:line="102" pos:column="50"/></operator><name pos:line="102" pos:column="47">compressed_len<pos:position pos:line="102" pos:column="61"/></name></name><operator pos:line="102" pos:column="61">&gt;&gt;<pos:position pos:line="102" pos:column="66"/></operator><literal type="number" pos:line="102" pos:column="63">3<pos:position pos:line="102" pos:column="64"/></literal><operator pos:line="102" pos:column="64">,<pos:position pos:line="102" pos:column="65"/></operator>
           <name><name pos:line="103" pos:column="12">s<pos:position pos:line="103" pos:column="13"/></name><operator pos:line="103" pos:column="13">-&gt;<pos:position pos:line="103" pos:column="18"/></operator><name pos:line="103" pos:column="15">compressed_len<pos:position pos:line="103" pos:column="29"/></name></name><operator pos:line="103" pos:column="29">-<pos:position pos:line="103" pos:column="30"/></operator><literal type="number" pos:line="103" pos:column="30">7<pos:position pos:line="103" pos:column="31"/></literal><operator pos:line="103" pos:column="31">*<pos:position pos:line="103" pos:column="32"/></operator><name pos:line="103" pos:column="32">eof<pos:position pos:line="103" pos:column="35"/></name><operator pos:line="103" pos:column="35">)<pos:position pos:line="103" pos:column="36"/></operator></expr></argument>)<pos:position pos:line="103" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="103" pos:column="38"/></expr_stmt>

    <return pos:line="105" pos:column="5">return <expr><name><name pos:line="105" pos:column="12">s<pos:position pos:line="105" pos:column="13"/></name><operator pos:line="105" pos:column="13">-&gt;<pos:position pos:line="105" pos:column="18"/></operator><name pos:line="105" pos:column="15">compressed_len<pos:position pos:line="105" pos:column="29"/></name></name> <operator pos:line="105" pos:column="30">&gt;&gt;<pos:position pos:line="105" pos:column="35"/></operator> <literal type="number" pos:line="105" pos:column="33">3<pos:position pos:line="105" pos:column="34"/></literal></expr>;<pos:position pos:line="105" pos:column="35"/></return>
}<pos:position pos:line="106" pos:column="2"/></block></unit>
