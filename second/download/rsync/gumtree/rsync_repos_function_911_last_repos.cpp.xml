<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_911_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">execCommand<pos:position pos:line="1" pos:column="23"/></name><parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><name pos:line="1" pos:column="24">poptContext<pos:position pos:line="1" pos:column="35"/></name></type> <name pos:line="1" pos:column="36">con<pos:position pos:line="1" pos:column="39"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="40"/></parameter_list>
	<comment type="block" pos:line="2" pos:column="9">/*@globals internalState @*/</comment>
	<comment type="block" pos:line="3" pos:column="9">/*@modifies internalState @*/</comment>
<block pos:line="4" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">poptItem<pos:position pos:line="5" pos:column="13"/></name></type> <name pos:line="5" pos:column="14">item<pos:position pos:line="5" pos:column="18"/></name> <init pos:line="5" pos:column="19">= <expr><name><name pos:line="5" pos:column="21">con<pos:position pos:line="5" pos:column="24"/></name><operator pos:line="5" pos:column="24">-&gt;<pos:position pos:line="5" pos:column="29"/></operator><name pos:line="5" pos:column="26">doExec<pos:position pos:line="5" pos:column="32"/></name></name></expr></init></decl>;<pos:position pos:line="5" pos:column="33"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="6" pos:column="5">const<pos:position pos:line="6" pos:column="10"/></specifier> <name pos:line="6" pos:column="11">char<pos:position pos:line="6" pos:column="15"/></name> <modifier pos:line="6" pos:column="16">*<pos:position pos:line="6" pos:column="17"/></modifier><modifier pos:line="6" pos:column="17">*<pos:position pos:line="6" pos:column="18"/></modifier></type> <name pos:line="6" pos:column="19">argv<pos:position pos:line="6" pos:column="23"/></name></decl>;<pos:position pos:line="6" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">int<pos:position pos:line="7" pos:column="8"/></name></type> <name pos:line="7" pos:column="9">argc<pos:position pos:line="7" pos:column="13"/></name> <init pos:line="7" pos:column="14">= <expr><literal type="number" pos:line="7" pos:column="16">0<pos:position pos:line="7" pos:column="17"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="18"/></decl_stmt>

    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><name pos:line="9" pos:column="9">item<pos:position pos:line="9" pos:column="13"/></name> <operator pos:line="9" pos:column="14">==<pos:position pos:line="9" pos:column="16"/></operator> <name pos:line="9" pos:column="17">NULL<pos:position pos:line="9" pos:column="21"/></name></expr>)<pos:position pos:line="9" pos:column="22"/></condition><then pos:line="9" pos:column="22"> <comment type="block" pos:line="9" pos:column="23">/*XXX can't happen*/</comment>
	<block type="pseudo"><return pos:line="10" pos:column="9">return <expr><name pos:line="10" pos:column="16">POPT_ERROR_NOARG<pos:position pos:line="10" pos:column="32"/></name></expr>;<pos:position pos:line="10" pos:column="33"/></return></block></then></if>

    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><name><name pos:line="12" pos:column="9">item<pos:position pos:line="12" pos:column="13"/></name><operator pos:line="12" pos:column="13">-&gt;<pos:position pos:line="12" pos:column="18"/></operator><name pos:line="12" pos:column="15">argv<pos:position pos:line="12" pos:column="19"/></name></name> <operator pos:line="12" pos:column="20">==<pos:position pos:line="12" pos:column="22"/></operator> <name pos:line="12" pos:column="23">NULL<pos:position pos:line="12" pos:column="27"/></name> <operator pos:line="12" pos:column="28">||<pos:position pos:line="12" pos:column="30"/></operator> <name><name pos:line="12" pos:column="31">item<pos:position pos:line="12" pos:column="35"/></name><operator pos:line="12" pos:column="35">-&gt;<pos:position pos:line="12" pos:column="40"/></operator><name pos:line="12" pos:column="37">argc<pos:position pos:line="12" pos:column="41"/></name></name> <operator pos:line="12" pos:column="42">&lt;<pos:position pos:line="12" pos:column="46"/></operator> <literal type="number" pos:line="12" pos:column="44">1<pos:position pos:line="12" pos:column="45"/></literal> <operator pos:line="12" pos:column="46">||<pos:position pos:line="12" pos:column="48"/></operator>
	<operator pos:line="13" pos:column="9">(<pos:position pos:line="13" pos:column="10"/></operator><operator pos:line="13" pos:column="10">!<pos:position pos:line="13" pos:column="11"/></operator><name><name pos:line="13" pos:column="11">con<pos:position pos:line="13" pos:column="14"/></name><operator pos:line="13" pos:column="14">-&gt;<pos:position pos:line="13" pos:column="19"/></operator><name pos:line="13" pos:column="16">execAbsolute<pos:position pos:line="13" pos:column="28"/></name></name> <operator pos:line="13" pos:column="29">&amp;&amp;<pos:position pos:line="13" pos:column="39"/></operator> <call><name pos:line="13" pos:column="32">strchr<pos:position pos:line="13" pos:column="38"/></name><argument_list pos:line="13" pos:column="38">(<argument><expr><name><name pos:line="13" pos:column="39">item<pos:position pos:line="13" pos:column="43"/></name><operator pos:line="13" pos:column="43">-&gt;<pos:position pos:line="13" pos:column="48"/></operator><name pos:line="13" pos:column="45">argv<pos:position pos:line="13" pos:column="49"/></name><index pos:line="13" pos:column="49">[<expr><literal type="number" pos:line="13" pos:column="50">0<pos:position pos:line="13" pos:column="51"/></literal></expr>]<pos:position pos:line="13" pos:column="52"/></index></name></expr></argument>, <argument><expr><literal type="char" pos:line="13" pos:column="54">'/'<pos:position pos:line="13" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="58"/></argument_list></call><operator pos:line="13" pos:column="58">)<pos:position pos:line="13" pos:column="59"/></operator></expr>)<pos:position pos:line="13" pos:column="60"/></condition><then pos:line="13" pos:column="60">
	    <block type="pseudo"><return pos:line="14" pos:column="13">return <expr><name pos:line="14" pos:column="20">POPT_ERROR_NOARG<pos:position pos:line="14" pos:column="36"/></name></expr>;<pos:position pos:line="14" pos:column="37"/></return></block></then></if>

    <expr_stmt><expr><name pos:line="16" pos:column="5">argv<pos:position pos:line="16" pos:column="9"/></name> <operator pos:line="16" pos:column="10">=<pos:position pos:line="16" pos:column="11"/></operator> <call><name pos:line="16" pos:column="12">malloc<pos:position pos:line="16" pos:column="18"/></name><argument_list pos:line="16" pos:column="18">(<argument><expr><sizeof pos:line="16" pos:column="19">sizeof<argument_list pos:line="16" pos:column="25">(<argument><expr><operator pos:line="16" pos:column="26">*<pos:position pos:line="16" pos:column="27"/></operator><name pos:line="16" pos:column="27">argv<pos:position pos:line="16" pos:column="31"/></name></expr></argument>)<pos:position pos:line="16" pos:column="32"/></argument_list></sizeof> <operator pos:line="16" pos:column="33">*<pos:position pos:line="16" pos:column="34"/></operator>
			<operator pos:line="17" pos:column="25">(<pos:position pos:line="17" pos:column="26"/></operator><literal type="number" pos:line="17" pos:column="26">6<pos:position pos:line="17" pos:column="27"/></literal> <operator pos:line="17" pos:column="28">+<pos:position pos:line="17" pos:column="29"/></operator> <name><name pos:line="17" pos:column="30">item<pos:position pos:line="17" pos:column="34"/></name><operator pos:line="17" pos:column="34">-&gt;<pos:position pos:line="17" pos:column="39"/></operator><name pos:line="17" pos:column="36">argc<pos:position pos:line="17" pos:column="40"/></name></name> <operator pos:line="17" pos:column="41">+<pos:position pos:line="17" pos:column="42"/></operator> <name><name pos:line="17" pos:column="43">con<pos:position pos:line="17" pos:column="46"/></name><operator pos:line="17" pos:column="46">-&gt;<pos:position pos:line="17" pos:column="51"/></operator><name pos:line="17" pos:column="48">numLeftovers<pos:position pos:line="17" pos:column="60"/></name></name> <operator pos:line="17" pos:column="61">+<pos:position pos:line="17" pos:column="62"/></operator> <name><name pos:line="17" pos:column="63">con<pos:position pos:line="17" pos:column="66"/></name><operator pos:line="17" pos:column="66">-&gt;<pos:position pos:line="17" pos:column="71"/></operator><name pos:line="17" pos:column="68">finalArgvCount<pos:position pos:line="17" pos:column="82"/></name></name><operator pos:line="17" pos:column="82">)<pos:position pos:line="17" pos:column="83"/></operator></expr></argument>)<pos:position pos:line="17" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="85"/></expr_stmt>
    <if pos:line="18" pos:column="5">if <condition pos:line="18" pos:column="8">(<expr><name pos:line="18" pos:column="9">argv<pos:position pos:line="18" pos:column="13"/></name> <operator pos:line="18" pos:column="14">==<pos:position pos:line="18" pos:column="16"/></operator> <name pos:line="18" pos:column="17">NULL<pos:position pos:line="18" pos:column="21"/></name></expr>)<pos:position pos:line="18" pos:column="22"/></condition><then pos:line="18" pos:column="22"> <block type="pseudo"><return pos:line="18" pos:column="23">return <expr><name pos:line="18" pos:column="30">POPT_ERROR_MALLOC<pos:position pos:line="18" pos:column="47"/></name></expr>;<pos:position pos:line="18" pos:column="48"/></return></block></then></if>

    <if pos:line="20" pos:column="5">if <condition pos:line="20" pos:column="8">(<expr><operator pos:line="20" pos:column="9">!<pos:position pos:line="20" pos:column="10"/></operator><call><name pos:line="20" pos:column="10">strchr<pos:position pos:line="20" pos:column="16"/></name><argument_list pos:line="20" pos:column="16">(<argument><expr><name><name pos:line="20" pos:column="17">item<pos:position pos:line="20" pos:column="21"/></name><operator pos:line="20" pos:column="21">-&gt;<pos:position pos:line="20" pos:column="26"/></operator><name pos:line="20" pos:column="23">argv<pos:position pos:line="20" pos:column="27"/></name><index pos:line="20" pos:column="27">[<expr><literal type="number" pos:line="20" pos:column="28">0<pos:position pos:line="20" pos:column="29"/></literal></expr>]<pos:position pos:line="20" pos:column="30"/></index></name></expr></argument>, <argument><expr><literal type="char" pos:line="20" pos:column="32">'/'<pos:position pos:line="20" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="36"/></argument_list></call> <operator pos:line="20" pos:column="37">&amp;&amp;<pos:position pos:line="20" pos:column="47"/></operator> <name><name pos:line="20" pos:column="40">con<pos:position pos:line="20" pos:column="43"/></name><operator pos:line="20" pos:column="43">-&gt;<pos:position pos:line="20" pos:column="48"/></operator><name pos:line="20" pos:column="45">execPath<pos:position pos:line="20" pos:column="53"/></name></name> <operator pos:line="20" pos:column="54">!=<pos:position pos:line="20" pos:column="56"/></operator> <name pos:line="20" pos:column="57">NULL<pos:position pos:line="20" pos:column="61"/></name></expr>)<pos:position pos:line="20" pos:column="62"/></condition><then pos:line="20" pos:column="62"> <block pos:line="20" pos:column="63">{
	<decl_stmt><decl><type><name pos:line="21" pos:column="9">size_t<pos:position pos:line="21" pos:column="15"/></name></type> <name pos:line="21" pos:column="16">bufsize<pos:position pos:line="21" pos:column="23"/></name> <init pos:line="21" pos:column="24">= <expr><call><name pos:line="21" pos:column="26">strlen<pos:position pos:line="21" pos:column="32"/></name><argument_list pos:line="21" pos:column="32">(<argument><expr><name><name pos:line="21" pos:column="33">con<pos:position pos:line="21" pos:column="36"/></name><operator pos:line="21" pos:column="36">-&gt;<pos:position pos:line="21" pos:column="41"/></operator><name pos:line="21" pos:column="38">execPath<pos:position pos:line="21" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="21" pos:column="47"/></argument_list></call> <operator pos:line="21" pos:column="48">+<pos:position pos:line="21" pos:column="49"/></operator> <call><name pos:line="21" pos:column="50">strlen<pos:position pos:line="21" pos:column="56"/></name><argument_list pos:line="21" pos:column="56">(<argument><expr><name><name pos:line="21" pos:column="57">item<pos:position pos:line="21" pos:column="61"/></name><operator pos:line="21" pos:column="61">-&gt;<pos:position pos:line="21" pos:column="66"/></operator><name pos:line="21" pos:column="63">argv<pos:position pos:line="21" pos:column="67"/></name><index pos:line="21" pos:column="67">[<expr><literal type="number" pos:line="21" pos:column="68">0<pos:position pos:line="21" pos:column="69"/></literal></expr>]<pos:position pos:line="21" pos:column="70"/></index></name></expr></argument>)<pos:position pos:line="21" pos:column="71"/></argument_list></call> <operator pos:line="21" pos:column="72">+<pos:position pos:line="21" pos:column="73"/></operator> <sizeof pos:line="21" pos:column="74">sizeof <name><pos:position pos:line="21" pos:column="81"/></name></sizeof>"/"<pos:position pos:line="21" pos:column="84"/></expr></init></decl>;<pos:position pos:line="21" pos:column="85"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="22" pos:column="9">char<pos:position pos:line="22" pos:column="13"/></name> <modifier pos:line="22" pos:column="14">*<pos:position pos:line="22" pos:column="15"/></modifier></type><name pos:line="22" pos:column="15">s<pos:position pos:line="22" pos:column="16"/></name> <init pos:line="22" pos:column="17">= <expr><call><name pos:line="22" pos:column="19">alloca<pos:position pos:line="22" pos:column="25"/></name><argument_list pos:line="22" pos:column="25">(<argument><expr><name pos:line="22" pos:column="26">bufsize<pos:position pos:line="22" pos:column="33"/></name></expr></argument>)<pos:position pos:line="22" pos:column="34"/></argument_list></call></expr></init></decl>;<pos:position pos:line="22" pos:column="35"/></decl_stmt>
	<expr_stmt><expr><call><name pos:line="23" pos:column="9">snprintf<pos:position pos:line="23" pos:column="17"/></name><argument_list pos:line="23" pos:column="17">(<argument><expr><name pos:line="23" pos:column="18">s<pos:position pos:line="23" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="21">bufsize<pos:position pos:line="23" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="23" pos:column="30">"%s/%s"<pos:position pos:line="23" pos:column="37"/></literal></expr></argument>, <argument><expr><name><name pos:line="23" pos:column="39">con<pos:position pos:line="23" pos:column="42"/></name><operator pos:line="23" pos:column="42">-&gt;<pos:position pos:line="23" pos:column="47"/></operator><name pos:line="23" pos:column="44">execPath<pos:position pos:line="23" pos:column="52"/></name></name></expr></argument>, <argument><expr><name><name pos:line="23" pos:column="54">item<pos:position pos:line="23" pos:column="58"/></name><operator pos:line="23" pos:column="58">-&gt;<pos:position pos:line="23" pos:column="63"/></operator><name pos:line="23" pos:column="60">argv<pos:position pos:line="23" pos:column="64"/></name><index pos:line="23" pos:column="64">[<expr><literal type="number" pos:line="23" pos:column="65">0<pos:position pos:line="23" pos:column="66"/></literal></expr>]<pos:position pos:line="23" pos:column="67"/></index></name></expr></argument>)<pos:position pos:line="23" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="69"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="24" pos:column="9">argv<pos:position pos:line="24" pos:column="13"/></name><index pos:line="24" pos:column="13">[<expr><name pos:line="24" pos:column="14">argc<pos:position pos:line="24" pos:column="18"/></name></expr>]<pos:position pos:line="24" pos:column="19"/></index></name> <operator pos:line="24" pos:column="20">=<pos:position pos:line="24" pos:column="21"/></operator> <name pos:line="24" pos:column="22">s<pos:position pos:line="24" pos:column="23"/></name></expr>;<pos:position pos:line="24" pos:column="24"/></expr_stmt>
    }<pos:position pos:line="25" pos:column="6"/></block></then> <else pos:line="25" pos:column="7">else
	<block type="pseudo"><expr_stmt><expr><name><name pos:line="26" pos:column="9">argv<pos:position pos:line="26" pos:column="13"/></name><index pos:line="26" pos:column="13">[<expr><name pos:line="26" pos:column="14">argc<pos:position pos:line="26" pos:column="18"/></name></expr>]<pos:position pos:line="26" pos:column="19"/></index></name> <operator pos:line="26" pos:column="20">=<pos:position pos:line="26" pos:column="21"/></operator> <call><name pos:line="26" pos:column="22">findProgramPath<pos:position pos:line="26" pos:column="37"/></name><argument_list pos:line="26" pos:column="37">(<argument><expr><name><name pos:line="26" pos:column="38">item<pos:position pos:line="26" pos:column="42"/></name><operator pos:line="26" pos:column="42">-&gt;<pos:position pos:line="26" pos:column="47"/></operator><name pos:line="26" pos:column="44">argv<pos:position pos:line="26" pos:column="48"/></name><index pos:line="26" pos:column="48">[<expr><literal type="number" pos:line="26" pos:column="49">0<pos:position pos:line="26" pos:column="50"/></literal></expr>]<pos:position pos:line="26" pos:column="51"/></index></name></expr></argument>)<pos:position pos:line="26" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="53"/></expr_stmt></block></else></if>
    <if pos:line="27" pos:column="5">if <condition pos:line="27" pos:column="8">(<expr><name><name pos:line="27" pos:column="9">argv<pos:position pos:line="27" pos:column="13"/></name><index pos:line="27" pos:column="13">[<expr><name pos:line="27" pos:column="14">argc<pos:position pos:line="27" pos:column="18"/></name><operator pos:line="27" pos:column="18">++<pos:position pos:line="27" pos:column="20"/></operator></expr>]<pos:position pos:line="27" pos:column="21"/></index></name> <operator pos:line="27" pos:column="22">==<pos:position pos:line="27" pos:column="24"/></operator> <name pos:line="27" pos:column="25">NULL<pos:position pos:line="27" pos:column="29"/></name></expr>)<pos:position pos:line="27" pos:column="30"/></condition><then pos:line="27" pos:column="30"> <block type="pseudo"><return pos:line="27" pos:column="31">return <expr><name pos:line="27" pos:column="38">POPT_ERROR_NOARG<pos:position pos:line="27" pos:column="54"/></name></expr>;<pos:position pos:line="27" pos:column="55"/></return></block></then></if>

    <if pos:line="29" pos:column="5">if <condition pos:line="29" pos:column="8">(<expr><name><name pos:line="29" pos:column="9">item<pos:position pos:line="29" pos:column="13"/></name><operator pos:line="29" pos:column="13">-&gt;<pos:position pos:line="29" pos:column="18"/></operator><name pos:line="29" pos:column="15">argc<pos:position pos:line="29" pos:column="19"/></name></name> <operator pos:line="29" pos:column="20">&gt;<pos:position pos:line="29" pos:column="24"/></operator> <literal type="number" pos:line="29" pos:column="22">1<pos:position pos:line="29" pos:column="23"/></literal></expr>)<pos:position pos:line="29" pos:column="24"/></condition><then pos:line="29" pos:column="24"> <block pos:line="29" pos:column="25">{
	<expr_stmt><expr><call><name pos:line="30" pos:column="9">memcpy<pos:position pos:line="30" pos:column="15"/></name><argument_list pos:line="30" pos:column="15">(<argument><expr><name pos:line="30" pos:column="16">argv<pos:position pos:line="30" pos:column="20"/></name> <operator pos:line="30" pos:column="21">+<pos:position pos:line="30" pos:column="22"/></operator> <name pos:line="30" pos:column="23">argc<pos:position pos:line="30" pos:column="27"/></name></expr></argument>, <argument><expr><name><name pos:line="30" pos:column="29">item<pos:position pos:line="30" pos:column="33"/></name><operator pos:line="30" pos:column="33">-&gt;<pos:position pos:line="30" pos:column="38"/></operator><name pos:line="30" pos:column="35">argv<pos:position pos:line="30" pos:column="39"/></name></name> <operator pos:line="30" pos:column="40">+<pos:position pos:line="30" pos:column="41"/></operator> <literal type="number" pos:line="30" pos:column="42">1<pos:position pos:line="30" pos:column="43"/></literal></expr></argument>, <argument><expr><sizeof pos:line="30" pos:column="45">sizeof<argument_list pos:line="30" pos:column="51">(<argument><expr><operator pos:line="30" pos:column="52">*<pos:position pos:line="30" pos:column="53"/></operator><name pos:line="30" pos:column="53">argv<pos:position pos:line="30" pos:column="57"/></name></expr></argument>)<pos:position pos:line="30" pos:column="58"/></argument_list></sizeof> <operator pos:line="30" pos:column="59">*<pos:position pos:line="30" pos:column="60"/></operator> <operator pos:line="30" pos:column="61">(<pos:position pos:line="30" pos:column="62"/></operator><name><name pos:line="30" pos:column="62">item<pos:position pos:line="30" pos:column="66"/></name><operator pos:line="30" pos:column="66">-&gt;<pos:position pos:line="30" pos:column="71"/></operator><name pos:line="30" pos:column="68">argc<pos:position pos:line="30" pos:column="72"/></name></name> <operator pos:line="30" pos:column="73">-<pos:position pos:line="30" pos:column="74"/></operator> <literal type="number" pos:line="30" pos:column="75">1<pos:position pos:line="30" pos:column="76"/></literal><operator pos:line="30" pos:column="76">)<pos:position pos:line="30" pos:column="77"/></operator></expr></argument>)<pos:position pos:line="30" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="79"/></expr_stmt>
	<expr_stmt><expr><name pos:line="31" pos:column="9">argc<pos:position pos:line="31" pos:column="13"/></name> <operator pos:line="31" pos:column="14">+=<pos:position pos:line="31" pos:column="16"/></operator> <operator pos:line="31" pos:column="17">(<pos:position pos:line="31" pos:column="18"/></operator><name><name pos:line="31" pos:column="18">item<pos:position pos:line="31" pos:column="22"/></name><operator pos:line="31" pos:column="22">-&gt;<pos:position pos:line="31" pos:column="27"/></operator><name pos:line="31" pos:column="24">argc<pos:position pos:line="31" pos:column="28"/></name></name> <operator pos:line="31" pos:column="29">-<pos:position pos:line="31" pos:column="30"/></operator> <literal type="number" pos:line="31" pos:column="31">1<pos:position pos:line="31" pos:column="32"/></literal><operator pos:line="31" pos:column="32">)<pos:position pos:line="31" pos:column="33"/></operator></expr>;<pos:position pos:line="31" pos:column="34"/></expr_stmt>
    }<pos:position pos:line="32" pos:column="6"/></block></then></if>

    <if pos:line="34" pos:column="5">if <condition pos:line="34" pos:column="8">(<expr><name><name pos:line="34" pos:column="9">con<pos:position pos:line="34" pos:column="12"/></name><operator pos:line="34" pos:column="12">-&gt;<pos:position pos:line="34" pos:column="17"/></operator><name pos:line="34" pos:column="14">finalArgv<pos:position pos:line="34" pos:column="23"/></name></name> <operator pos:line="34" pos:column="24">!=<pos:position pos:line="34" pos:column="26"/></operator> <name pos:line="34" pos:column="27">NULL<pos:position pos:line="34" pos:column="31"/></name> <operator pos:line="34" pos:column="32">&amp;&amp;<pos:position pos:line="34" pos:column="42"/></operator> <name><name pos:line="34" pos:column="35">con<pos:position pos:line="34" pos:column="38"/></name><operator pos:line="34" pos:column="38">-&gt;<pos:position pos:line="34" pos:column="43"/></operator><name pos:line="34" pos:column="40">finalArgvCount<pos:position pos:line="34" pos:column="54"/></name></name> <operator pos:line="34" pos:column="55">&gt;<pos:position pos:line="34" pos:column="59"/></operator> <literal type="number" pos:line="34" pos:column="57">0<pos:position pos:line="34" pos:column="58"/></literal></expr>)<pos:position pos:line="34" pos:column="59"/></condition><then pos:line="34" pos:column="59"> <block pos:line="34" pos:column="60">{
	<expr_stmt><expr><call><name pos:line="35" pos:column="9">memcpy<pos:position pos:line="35" pos:column="15"/></name><argument_list pos:line="35" pos:column="15">(<argument><expr><name pos:line="35" pos:column="16">argv<pos:position pos:line="35" pos:column="20"/></name> <operator pos:line="35" pos:column="21">+<pos:position pos:line="35" pos:column="22"/></operator> <name pos:line="35" pos:column="23">argc<pos:position pos:line="35" pos:column="27"/></name></expr></argument>, <argument><expr><name><name pos:line="35" pos:column="29">con<pos:position pos:line="35" pos:column="32"/></name><operator pos:line="35" pos:column="32">-&gt;<pos:position pos:line="35" pos:column="37"/></operator><name pos:line="35" pos:column="34">finalArgv<pos:position pos:line="35" pos:column="43"/></name></name></expr></argument>,
		<argument><expr><sizeof pos:line="36" pos:column="17">sizeof<argument_list pos:line="36" pos:column="23">(<argument><expr><operator pos:line="36" pos:column="24">*<pos:position pos:line="36" pos:column="25"/></operator><name pos:line="36" pos:column="25">argv<pos:position pos:line="36" pos:column="29"/></name></expr></argument>)<pos:position pos:line="36" pos:column="30"/></argument_list></sizeof> <operator pos:line="36" pos:column="31">*<pos:position pos:line="36" pos:column="32"/></operator> <name><name pos:line="36" pos:column="33">con<pos:position pos:line="36" pos:column="36"/></name><operator pos:line="36" pos:column="36">-&gt;<pos:position pos:line="36" pos:column="41"/></operator><name pos:line="36" pos:column="38">finalArgvCount<pos:position pos:line="36" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="36" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="54"/></expr_stmt>
	<expr_stmt><expr><name pos:line="37" pos:column="9">argc<pos:position pos:line="37" pos:column="13"/></name> <operator pos:line="37" pos:column="14">+=<pos:position pos:line="37" pos:column="16"/></operator> <name><name pos:line="37" pos:column="17">con<pos:position pos:line="37" pos:column="20"/></name><operator pos:line="37" pos:column="20">-&gt;<pos:position pos:line="37" pos:column="25"/></operator><name pos:line="37" pos:column="22">finalArgvCount<pos:position pos:line="37" pos:column="36"/></name></name></expr>;<pos:position pos:line="37" pos:column="37"/></expr_stmt>
    }<pos:position pos:line="38" pos:column="6"/></block></then></if>

    <if pos:line="40" pos:column="5">if <condition pos:line="40" pos:column="8">(<expr><name><name pos:line="40" pos:column="9">con<pos:position pos:line="40" pos:column="12"/></name><operator pos:line="40" pos:column="12">-&gt;<pos:position pos:line="40" pos:column="17"/></operator><name pos:line="40" pos:column="14">leftovers<pos:position pos:line="40" pos:column="23"/></name></name> <operator pos:line="40" pos:column="24">!=<pos:position pos:line="40" pos:column="26"/></operator> <name pos:line="40" pos:column="27">NULL<pos:position pos:line="40" pos:column="31"/></name> <operator pos:line="40" pos:column="32">&amp;&amp;<pos:position pos:line="40" pos:column="42"/></operator> <name><name pos:line="40" pos:column="35">con<pos:position pos:line="40" pos:column="38"/></name><operator pos:line="40" pos:column="38">-&gt;<pos:position pos:line="40" pos:column="43"/></operator><name pos:line="40" pos:column="40">numLeftovers<pos:position pos:line="40" pos:column="52"/></name></name> <operator pos:line="40" pos:column="53">&gt;<pos:position pos:line="40" pos:column="57"/></operator> <literal type="number" pos:line="40" pos:column="55">0<pos:position pos:line="40" pos:column="56"/></literal></expr>)<pos:position pos:line="40" pos:column="57"/></condition><then pos:line="40" pos:column="57"> <block pos:line="40" pos:column="58">{
	<expr_stmt><expr><call><name pos:line="41" pos:column="9">memcpy<pos:position pos:line="41" pos:column="15"/></name><argument_list pos:line="41" pos:column="15">(<argument><expr><name pos:line="41" pos:column="16">argv<pos:position pos:line="41" pos:column="20"/></name> <operator pos:line="41" pos:column="21">+<pos:position pos:line="41" pos:column="22"/></operator> <name pos:line="41" pos:column="23">argc<pos:position pos:line="41" pos:column="27"/></name></expr></argument>, <argument><expr><name><name pos:line="41" pos:column="29">con<pos:position pos:line="41" pos:column="32"/></name><operator pos:line="41" pos:column="32">-&gt;<pos:position pos:line="41" pos:column="37"/></operator><name pos:line="41" pos:column="34">leftovers<pos:position pos:line="41" pos:column="43"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="41" pos:column="45">sizeof<argument_list pos:line="41" pos:column="51">(<argument><expr><operator pos:line="41" pos:column="52">*<pos:position pos:line="41" pos:column="53"/></operator><name pos:line="41" pos:column="53">argv<pos:position pos:line="41" pos:column="57"/></name></expr></argument>)<pos:position pos:line="41" pos:column="58"/></argument_list></sizeof> <operator pos:line="41" pos:column="59">*<pos:position pos:line="41" pos:column="60"/></operator> <name><name pos:line="41" pos:column="61">con<pos:position pos:line="41" pos:column="64"/></name><operator pos:line="41" pos:column="64">-&gt;<pos:position pos:line="41" pos:column="69"/></operator><name pos:line="41" pos:column="66">numLeftovers<pos:position pos:line="41" pos:column="78"/></name></name></expr></argument>)<pos:position pos:line="41" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="80"/></expr_stmt>
	<expr_stmt><expr><name pos:line="42" pos:column="9">argc<pos:position pos:line="42" pos:column="13"/></name> <operator pos:line="42" pos:column="14">+=<pos:position pos:line="42" pos:column="16"/></operator> <name><name pos:line="42" pos:column="17">con<pos:position pos:line="42" pos:column="20"/></name><operator pos:line="42" pos:column="20">-&gt;<pos:position pos:line="42" pos:column="25"/></operator><name pos:line="42" pos:column="22">numLeftovers<pos:position pos:line="42" pos:column="34"/></name></name></expr>;<pos:position pos:line="42" pos:column="35"/></expr_stmt>
    }<pos:position pos:line="43" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name><name pos:line="45" pos:column="5">argv<pos:position pos:line="45" pos:column="9"/></name><index pos:line="45" pos:column="9">[<expr><name pos:line="45" pos:column="10">argc<pos:position pos:line="45" pos:column="14"/></name></expr>]<pos:position pos:line="45" pos:column="15"/></index></name> <operator pos:line="45" pos:column="16">=<pos:position pos:line="45" pos:column="17"/></operator> <name pos:line="45" pos:column="18">NULL<pos:position pos:line="45" pos:column="22"/></name></expr>;<pos:position pos:line="45" pos:column="23"/></expr_stmt>

  <block pos:line="47" pos:column="3">{
<cpp:ifdef pos:line="48" pos:column="1">#<cpp:directive pos:line="48" pos:column="2">ifdef<pos:position pos:line="48" pos:column="7"/></cpp:directive> <name pos:line="48" pos:column="8">__hpux<pos:position pos:line="48" pos:column="14"/></name></cpp:ifdef>
    <decl_stmt><decl><type><name pos:line="49" pos:column="5">int<pos:position pos:line="49" pos:column="8"/></name></type> <name pos:line="49" pos:column="9">rc<pos:position pos:line="49" pos:column="11"/></name> <init pos:line="49" pos:column="12">= <expr><call><name pos:line="49" pos:column="14">setresgid<pos:position pos:line="49" pos:column="23"/></name><argument_list pos:line="49" pos:column="23">(<argument><expr><call><name pos:line="49" pos:column="24">getgid<pos:position pos:line="49" pos:column="30"/></name><argument_list pos:line="49" pos:column="30">()<pos:position pos:line="49" pos:column="32"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="49" pos:column="34">getgid<pos:position pos:line="49" pos:column="40"/></name><argument_list pos:line="49" pos:column="40">()<pos:position pos:line="49" pos:column="42"/></argument_list></call></expr></argument>,<argument><expr><operator pos:line="49" pos:column="43">-<pos:position pos:line="49" pos:column="44"/></operator><literal type="number" pos:line="49" pos:column="44">1<pos:position pos:line="49" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="49" pos:column="46"/></argument_list></call></expr></init></decl>;<pos:position pos:line="49" pos:column="47"/></decl_stmt>
    <if pos:line="50" pos:column="5">if <condition pos:line="50" pos:column="8">(<expr><name pos:line="50" pos:column="9">rc<pos:position pos:line="50" pos:column="11"/></name></expr>)<pos:position pos:line="50" pos:column="12"/></condition><then pos:line="50" pos:column="12"> <block type="pseudo"><return pos:line="50" pos:column="13">return <expr><name pos:line="50" pos:column="20">POPT_ERROR_ERRNO<pos:position pos:line="50" pos:column="36"/></name></expr>;<pos:position pos:line="50" pos:column="37"/></return></block></then></if>
    <expr_stmt><expr><name pos:line="51" pos:column="5">rc<pos:position pos:line="51" pos:column="7"/></name> <operator pos:line="51" pos:column="8">=<pos:position pos:line="51" pos:column="9"/></operator> <call><name pos:line="51" pos:column="10">setresuid<pos:position pos:line="51" pos:column="19"/></name><argument_list pos:line="51" pos:column="19">(<argument><expr><call><name pos:line="51" pos:column="20">getuid<pos:position pos:line="51" pos:column="26"/></name><argument_list pos:line="51" pos:column="26">()<pos:position pos:line="51" pos:column="28"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="51" pos:column="30">getuid<pos:position pos:line="51" pos:column="36"/></name><argument_list pos:line="51" pos:column="36">()<pos:position pos:line="51" pos:column="38"/></argument_list></call></expr></argument>,<argument><expr><operator pos:line="51" pos:column="39">-<pos:position pos:line="51" pos:column="40"/></operator><literal type="number" pos:line="51" pos:column="40">1<pos:position pos:line="51" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="51" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="43"/></expr_stmt>
    <if pos:line="52" pos:column="5">if <condition pos:line="52" pos:column="8">(<expr><name pos:line="52" pos:column="9">rc<pos:position pos:line="52" pos:column="11"/></name></expr>)<pos:position pos:line="52" pos:column="12"/></condition><then pos:line="52" pos:column="12"> <block type="pseudo"><return pos:line="52" pos:column="13">return <expr><name pos:line="52" pos:column="20">POPT_ERROR_ERRNO<pos:position pos:line="52" pos:column="36"/></name></expr>;<pos:position pos:line="52" pos:column="37"/></return></block></then></if>
<cpp:else pos:line="53" pos:column="1">#<cpp:directive pos:line="53" pos:column="2">else<pos:position pos:line="53" pos:column="6"/></cpp:directive></cpp:else>
<comment type="block" pos:line="54" pos:column="1">/*
 * XXX " ... on BSD systems setuid() should be preferred over setreuid()"
 * XXX 	sez' Timur Bakeyev &lt;mc@bat.ru&gt;
 * XXX	from Norbert Warmuth &lt;nwarmuth@privat.circular.de&gt;
 */</comment>
<cpp:if pos:line="59" pos:column="1">#<cpp:directive pos:line="59" pos:column="2">if<pos:position pos:line="59" pos:column="4"/></cpp:directive> <expr><call><name pos:line="59" pos:column="5">defined<pos:position pos:line="59" pos:column="12"/></name><argument_list pos:line="59" pos:column="12">(<argument><expr><name pos:line="59" pos:column="13">HAVE_SETUID<pos:position pos:line="59" pos:column="24"/></name></expr></argument>)<pos:position pos:line="59" pos:column="25"/></argument_list></call></expr></cpp:if>
    <decl_stmt><decl><type><name pos:line="60" pos:column="5">int<pos:position pos:line="60" pos:column="8"/></name></type> <name pos:line="60" pos:column="9">rc<pos:position pos:line="60" pos:column="11"/></name> <init pos:line="60" pos:column="12">= <expr><call><name pos:line="60" pos:column="14">setgid<pos:position pos:line="60" pos:column="20"/></name><argument_list pos:line="60" pos:column="20">(<argument><expr><call><name pos:line="60" pos:column="21">getgid<pos:position pos:line="60" pos:column="27"/></name><argument_list pos:line="60" pos:column="27">()<pos:position pos:line="60" pos:column="29"/></argument_list></call></expr></argument>)<pos:position pos:line="60" pos:column="30"/></argument_list></call></expr></init></decl>;<pos:position pos:line="60" pos:column="31"/></decl_stmt>
    <if pos:line="61" pos:column="5">if <condition pos:line="61" pos:column="8">(<expr><name pos:line="61" pos:column="9">rc<pos:position pos:line="61" pos:column="11"/></name></expr>)<pos:position pos:line="61" pos:column="12"/></condition><then pos:line="61" pos:column="12"> <block type="pseudo"><return pos:line="61" pos:column="13">return <expr><name pos:line="61" pos:column="20">POPT_ERROR_ERRNO<pos:position pos:line="61" pos:column="36"/></name></expr>;<pos:position pos:line="61" pos:column="37"/></return></block></then></if>
    <expr_stmt><expr><name pos:line="62" pos:column="5">rc<pos:position pos:line="62" pos:column="7"/></name> <operator pos:line="62" pos:column="8">=<pos:position pos:line="62" pos:column="9"/></operator> <call><name pos:line="62" pos:column="10">setuid<pos:position pos:line="62" pos:column="16"/></name><argument_list pos:line="62" pos:column="16">(<argument><expr><call><name pos:line="62" pos:column="17">getuid<pos:position pos:line="62" pos:column="23"/></name><argument_list pos:line="62" pos:column="23">()<pos:position pos:line="62" pos:column="25"/></argument_list></call></expr></argument>)<pos:position pos:line="62" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="27"/></expr_stmt>
    <if pos:line="63" pos:column="5">if <condition pos:line="63" pos:column="8">(<expr><name pos:line="63" pos:column="9">rc<pos:position pos:line="63" pos:column="11"/></name></expr>)<pos:position pos:line="63" pos:column="12"/></condition><then pos:line="63" pos:column="12"> <block type="pseudo"><return pos:line="63" pos:column="13">return <expr><name pos:line="63" pos:column="20">POPT_ERROR_ERRNO<pos:position pos:line="63" pos:column="36"/></name></expr>;<pos:position pos:line="63" pos:column="37"/></return></block></then></if>
<cpp:elif pos:line="64" pos:column="1">#<cpp:directive pos:line="64" pos:column="2">elif<pos:position pos:line="64" pos:column="6"/></cpp:directive> <expr><call><name pos:line="64" pos:column="7">defined<pos:position pos:line="64" pos:column="14"/></name> <argument_list pos:line="64" pos:column="15">(<argument><expr><name pos:line="64" pos:column="16">HAVE_SETREUID<pos:position pos:line="64" pos:column="29"/></name></expr></argument>)<pos:position pos:line="64" pos:column="30"/></argument_list></call></expr></cpp:elif>
    <decl_stmt><decl><type><name pos:line="65" pos:column="5">int<pos:position pos:line="65" pos:column="8"/></name></type> <name pos:line="65" pos:column="9">rc<pos:position pos:line="65" pos:column="11"/></name> <init pos:line="65" pos:column="12">= <expr><call><name pos:line="65" pos:column="14">setregid<pos:position pos:line="65" pos:column="22"/></name><argument_list pos:line="65" pos:column="22">(<argument><expr><call><name pos:line="65" pos:column="23">getgid<pos:position pos:line="65" pos:column="29"/></name><argument_list pos:line="65" pos:column="29">()<pos:position pos:line="65" pos:column="31"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="65" pos:column="33">getgid<pos:position pos:line="65" pos:column="39"/></name><argument_list pos:line="65" pos:column="39">()<pos:position pos:line="65" pos:column="41"/></argument_list></call></expr></argument>)<pos:position pos:line="65" pos:column="42"/></argument_list></call></expr></init></decl>;<pos:position pos:line="65" pos:column="43"/></decl_stmt>
    <if pos:line="66" pos:column="5">if <condition pos:line="66" pos:column="8">(<expr><name pos:line="66" pos:column="9">rc<pos:position pos:line="66" pos:column="11"/></name></expr>)<pos:position pos:line="66" pos:column="12"/></condition><then pos:line="66" pos:column="12"> <block type="pseudo"><return pos:line="66" pos:column="13">return <expr><name pos:line="66" pos:column="20">POPT_ERROR_ERRNO<pos:position pos:line="66" pos:column="36"/></name></expr>;<pos:position pos:line="66" pos:column="37"/></return></block></then></if>
    <expr_stmt><expr><name pos:line="67" pos:column="5">rc<pos:position pos:line="67" pos:column="7"/></name> <operator pos:line="67" pos:column="8">=<pos:position pos:line="67" pos:column="9"/></operator> <call><name pos:line="67" pos:column="10">setreuid<pos:position pos:line="67" pos:column="18"/></name><argument_list pos:line="67" pos:column="18">(<argument><expr><call><name pos:line="67" pos:column="19">getuid<pos:position pos:line="67" pos:column="25"/></name><argument_list pos:line="67" pos:column="25">()<pos:position pos:line="67" pos:column="27"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="67" pos:column="29">getuid<pos:position pos:line="67" pos:column="35"/></name><argument_list pos:line="67" pos:column="35">()<pos:position pos:line="67" pos:column="37"/></argument_list></call></expr></argument>)<pos:position pos:line="67" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="39"/></expr_stmt>
    <if pos:line="68" pos:column="5">if <condition pos:line="68" pos:column="8">(<expr><name pos:line="68" pos:column="9">rc<pos:position pos:line="68" pos:column="11"/></name></expr>)<pos:position pos:line="68" pos:column="12"/></condition><then pos:line="68" pos:column="12"> <block type="pseudo"><return pos:line="68" pos:column="13">return <expr><name pos:line="68" pos:column="20">POPT_ERROR_ERRNO<pos:position pos:line="68" pos:column="36"/></name></expr>;<pos:position pos:line="68" pos:column="37"/></return></block></then></if>
<cpp:else pos:line="69" pos:column="1">#<cpp:directive pos:line="69" pos:column="2">else<pos:position pos:line="69" pos:column="6"/></cpp:directive></cpp:else>
    <empty_stmt pos:line="70" pos:column="5">;<pos:position pos:line="70" pos:column="6"/></empty_stmt> <comment type="block" pos:line="70" pos:column="7">/* Can't drop privileges */</comment>
<cpp:endif pos:line="71" pos:column="1">#<cpp:directive pos:line="71" pos:column="2">endif<pos:position pos:line="71" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:endif pos:line="72" pos:column="1">#<cpp:directive pos:line="72" pos:column="2">endif<pos:position pos:line="72" pos:column="7"/></cpp:directive></cpp:endif>
  }<pos:position pos:line="73" pos:column="4"/></block>

    <if pos:line="75" pos:column="5">if <condition pos:line="75" pos:column="8">(<expr><name><name pos:line="75" pos:column="9">argv<pos:position pos:line="75" pos:column="13"/></name><index pos:line="75" pos:column="13">[<expr><literal type="number" pos:line="75" pos:column="14">0<pos:position pos:line="75" pos:column="15"/></literal></expr>]<pos:position pos:line="75" pos:column="16"/></index></name> <operator pos:line="75" pos:column="17">==<pos:position pos:line="75" pos:column="19"/></operator> <name pos:line="75" pos:column="20">NULL<pos:position pos:line="75" pos:column="24"/></name></expr>)<pos:position pos:line="75" pos:column="25"/></condition><then pos:line="75" pos:column="25">
	<block type="pseudo"><return pos:line="76" pos:column="9">return <expr><name pos:line="76" pos:column="16">POPT_ERROR_NOARG<pos:position pos:line="76" pos:column="32"/></name></expr>;<pos:position pos:line="76" pos:column="33"/></return></block></then></if>

<cpp:ifdef pos:line="78" pos:column="1">#<cpp:directive pos:line="78" pos:column="2">ifdef<pos:position pos:line="78" pos:column="7"/></cpp:directive>	<name pos:line="78" pos:column="9">MYDEBUG<pos:position pos:line="78" pos:column="16"/></name></cpp:ifdef>
<if pos:line="79" pos:column="1">if <condition pos:line="79" pos:column="4">(<expr><name pos:line="79" pos:column="5">_popt_debug<pos:position pos:line="79" pos:column="16"/></name></expr>)<pos:position pos:line="79" pos:column="17"/></condition><then pos:line="79" pos:column="17">
    <block pos:line="80" pos:column="5">{	<decl_stmt><decl><type><specifier pos:line="80" pos:column="9">const<pos:position pos:line="80" pos:column="14"/></specifier> <name pos:line="80" pos:column="15">char<pos:position pos:line="80" pos:column="19"/></name> <modifier pos:line="80" pos:column="20">*<pos:position pos:line="80" pos:column="21"/></modifier><modifier pos:line="80" pos:column="21">*<pos:position pos:line="80" pos:column="22"/></modifier></type> <name pos:line="80" pos:column="23">avp<pos:position pos:line="80" pos:column="26"/></name></decl>;<pos:position pos:line="80" pos:column="27"/></decl_stmt>
	<expr_stmt><expr><call><name pos:line="81" pos:column="9">fprintf<pos:position pos:line="81" pos:column="16"/></name><argument_list pos:line="81" pos:column="16">(<argument><expr><name pos:line="81" pos:column="17">stderr<pos:position pos:line="81" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="81" pos:column="25">"==&gt; execvp(%s) argv[%d]:"<pos:position pos:line="81" pos:column="54"/></literal></expr></argument>, <argument><expr><name><name pos:line="81" pos:column="53">argv<pos:position pos:line="81" pos:column="57"/></name><index pos:line="81" pos:column="57">[<expr><literal type="number" pos:line="81" pos:column="58">0<pos:position pos:line="81" pos:column="59"/></literal></expr>]<pos:position pos:line="81" pos:column="60"/></index></name></expr></argument>, <argument><expr><name pos:line="81" pos:column="62">argc<pos:position pos:line="81" pos:column="66"/></name></expr></argument>)<pos:position pos:line="81" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="68"/></expr_stmt>
	<for pos:line="82" pos:column="9">for <control pos:line="82" pos:column="13">(<init><expr><name pos:line="82" pos:column="14">avp<pos:position pos:line="82" pos:column="17"/></name> <operator pos:line="82" pos:column="18">=<pos:position pos:line="82" pos:column="19"/></operator> <name pos:line="82" pos:column="20">argv<pos:position pos:line="82" pos:column="24"/></name></expr>;<pos:position pos:line="82" pos:column="25"/></init> <condition><expr><operator pos:line="82" pos:column="26">*<pos:position pos:line="82" pos:column="27"/></operator><name pos:line="82" pos:column="27">avp<pos:position pos:line="82" pos:column="30"/></name></expr>;<pos:position pos:line="82" pos:column="31"/></condition> <incr><expr><name pos:line="82" pos:column="32">avp<pos:position pos:line="82" pos:column="35"/></name><operator pos:line="82" pos:column="35">++<pos:position pos:line="82" pos:column="37"/></operator></expr></incr>)<pos:position pos:line="82" pos:column="38"/></control>
	    <block type="pseudo"><expr_stmt><expr><call><name pos:line="83" pos:column="13">fprintf<pos:position pos:line="83" pos:column="20"/></name><argument_list pos:line="83" pos:column="20">(<argument><expr><name pos:line="83" pos:column="21">stderr<pos:position pos:line="83" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="83" pos:column="29">" '%s'"<pos:position pos:line="83" pos:column="36"/></literal></expr></argument>, <argument><expr><operator pos:line="83" pos:column="38">*<pos:position pos:line="83" pos:column="39"/></operator><name pos:line="83" pos:column="39">avp<pos:position pos:line="83" pos:column="42"/></name></expr></argument>)<pos:position pos:line="83" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="44"/></expr_stmt></block></for>
	<expr_stmt><expr><call><name pos:line="84" pos:column="9">fprintf<pos:position pos:line="84" pos:column="16"/></name><argument_list pos:line="84" pos:column="16">(<argument><expr><name pos:line="84" pos:column="17">stderr<pos:position pos:line="84" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="84" pos:column="25">"\n"<pos:position pos:line="84" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="84" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="31"/></expr_stmt>
    }<pos:position pos:line="85" pos:column="6"/></block></then></if>
<cpp:endif pos:line="86" pos:column="1">#<cpp:directive pos:line="86" pos:column="2">endif<pos:position pos:line="86" pos:column="7"/></cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name pos:line="88" pos:column="5">execvp<pos:position pos:line="88" pos:column="11"/></name><argument_list pos:line="88" pos:column="11">(<argument><expr><name><name pos:line="88" pos:column="12">argv<pos:position pos:line="88" pos:column="16"/></name><index pos:line="88" pos:column="16">[<expr><literal type="number" pos:line="88" pos:column="17">0<pos:position pos:line="88" pos:column="18"/></literal></expr>]<pos:position pos:line="88" pos:column="19"/></index></name></expr></argument>, <argument><expr><operator pos:line="88" pos:column="21">(<pos:position pos:line="88" pos:column="22"/></operator><name pos:line="88" pos:column="22">char<pos:position pos:line="88" pos:column="26"/></name> <operator pos:line="88" pos:column="27">*<pos:position pos:line="88" pos:column="28"/></operator><specifier pos:line="88" pos:column="28">const<pos:position pos:line="88" pos:column="33"/></specifier> <operator pos:line="88" pos:column="34">*<pos:position pos:line="88" pos:column="35"/></operator><operator pos:line="88" pos:column="35">)<pos:position pos:line="88" pos:column="36"/></operator><name pos:line="88" pos:column="36">argv<pos:position pos:line="88" pos:column="40"/></name></expr></argument>)<pos:position pos:line="88" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="42"/></expr_stmt>

    <return pos:line="90" pos:column="5">return <expr><name pos:line="90" pos:column="12">POPT_ERROR_ERRNO<pos:position pos:line="90" pos:column="28"/></name></expr>;<pos:position pos:line="90" pos:column="29"/></return>
}<pos:position pos:line="91" pos:column="2"/></block></function></unit>
