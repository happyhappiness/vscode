<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_111_rsync-2.0.18.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">rprintf<pos:position pos:line="1" pos:column="13"/></name><parameter_list pos:line="1" pos:column="13">(<parameter><decl><type><name pos:line="1" pos:column="14">int<pos:position pos:line="1" pos:column="17"/></name></type> <name pos:line="1" pos:column="18">fd<pos:position pos:line="1" pos:column="20"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="22">const<pos:position pos:line="1" pos:column="27"/></specifier> <name pos:line="1" pos:column="28">char<pos:position pos:line="1" pos:column="32"/></name> <modifier pos:line="1" pos:column="33">*<pos:position pos:line="1" pos:column="34"/></modifier></type><name pos:line="1" pos:column="34">format<pos:position pos:line="1" pos:column="40"/></name></decl></parameter>, <parameter><decl><type><modifier pos:line="1" pos:column="42">...<pos:position pos:line="1" pos:column="45"/></modifier></type></decl></parameter>)<pos:position pos:line="1" pos:column="46"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">va_list<pos:position pos:line="3" pos:column="16"/></name></type> <name pos:line="3" pos:column="17">ap<pos:position pos:line="3" pos:column="19"/></name></decl>;<pos:position pos:line="3" pos:column="20"/></decl_stmt>  
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name></type> <name><name pos:line="4" pos:column="14">buf<pos:position pos:line="4" pos:column="17"/></name><index pos:line="4" pos:column="17">[<expr><literal type="number" pos:line="4" pos:column="18">1024<pos:position pos:line="4" pos:column="22"/></literal></expr>]<pos:position pos:line="4" pos:column="23"/></index></name></decl>;<pos:position pos:line="4" pos:column="24"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">len<pos:position pos:line="5" pos:column="16"/></name></decl>;<pos:position pos:line="5" pos:column="17"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">FILE<pos:position pos:line="6" pos:column="13"/></name> <modifier pos:line="6" pos:column="14">*<pos:position pos:line="6" pos:column="15"/></modifier></type><name pos:line="6" pos:column="15">f<pos:position pos:line="6" pos:column="16"/></name><init pos:line="6" pos:column="16">=<expr><name pos:line="6" pos:column="17">NULL<pos:position pos:line="6" pos:column="21"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="22"/></decl_stmt>
	<decl_stmt><decl><specifier pos:line="7" pos:column="9">extern<pos:position pos:line="7" pos:column="15"/></specifier> <type><name pos:line="7" pos:column="16">int<pos:position pos:line="7" pos:column="19"/></name></type> <name pos:line="7" pos:column="20">am_daemon<pos:position pos:line="7" pos:column="29"/></name></decl>;<pos:position pos:line="7" pos:column="30"/></decl_stmt>
	<comment type="block" pos:line="8" pos:column="9">/* recursion can happen with certain fatal conditions */</comment>
	<decl_stmt><decl><specifier pos:line="9" pos:column="9">static<pos:position pos:line="9" pos:column="15"/></specifier> <type><name pos:line="9" pos:column="16">int<pos:position pos:line="9" pos:column="19"/></name></type> <name pos:line="9" pos:column="20">depth<pos:position pos:line="9" pos:column="25"/></name></decl>;<pos:position pos:line="9" pos:column="26"/></decl_stmt>

	<if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><name pos:line="11" pos:column="13">depth<pos:position pos:line="11" pos:column="18"/></name></expr>)<pos:position pos:line="11" pos:column="19"/></condition><then pos:line="11" pos:column="19"> <block type="pseudo"><return pos:line="11" pos:column="20">return;<pos:position pos:line="11" pos:column="27"/></return></block></then></if>

	<expr_stmt><expr><name pos:line="13" pos:column="9">depth<pos:position pos:line="13" pos:column="14"/></name><operator pos:line="13" pos:column="14">++<pos:position pos:line="13" pos:column="16"/></operator></expr>;<pos:position pos:line="13" pos:column="17"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="15" pos:column="9">va_start<pos:position pos:line="15" pos:column="17"/></name><argument_list pos:line="15" pos:column="17">(<argument><expr><name pos:line="15" pos:column="18">ap<pos:position pos:line="15" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="22">format<pos:position pos:line="15" pos:column="28"/></name></expr></argument>)<pos:position pos:line="15" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="30"/></expr_stmt>
	<expr_stmt><expr><name pos:line="16" pos:column="9">len<pos:position pos:line="16" pos:column="12"/></name> <operator pos:line="16" pos:column="13">=<pos:position pos:line="16" pos:column="14"/></operator> <call><name pos:line="16" pos:column="15">vslprintf<pos:position pos:line="16" pos:column="24"/></name><argument_list pos:line="16" pos:column="24">(<argument><expr><name pos:line="16" pos:column="25">buf<pos:position pos:line="16" pos:column="28"/></name></expr></argument>, <argument><expr><sizeof pos:line="16" pos:column="30">sizeof<argument_list pos:line="16" pos:column="36">(<argument><expr><name pos:line="16" pos:column="37">buf<pos:position pos:line="16" pos:column="40"/></name></expr></argument>)<pos:position pos:line="16" pos:column="41"/></argument_list></sizeof><operator pos:line="16" pos:column="41">-<pos:position pos:line="16" pos:column="42"/></operator><literal type="number" pos:line="16" pos:column="42">1<pos:position pos:line="16" pos:column="43"/></literal></expr></argument>, <argument><expr><name pos:line="16" pos:column="45">format<pos:position pos:line="16" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="53">ap<pos:position pos:line="16" pos:column="55"/></name></expr></argument>)<pos:position pos:line="16" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="57"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="17" pos:column="9">va_end<pos:position pos:line="17" pos:column="15"/></name><argument_list pos:line="17" pos:column="15">(<argument><expr><name pos:line="17" pos:column="16">ap<pos:position pos:line="17" pos:column="18"/></name></expr></argument>)<pos:position pos:line="17" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="20"/></expr_stmt>

	<if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><name pos:line="19" pos:column="13">len<pos:position pos:line="19" pos:column="16"/></name> <operator pos:line="19" pos:column="17">&lt;<pos:position pos:line="19" pos:column="21"/></operator> <literal type="number" pos:line="19" pos:column="19">0<pos:position pos:line="19" pos:column="20"/></literal></expr>)<pos:position pos:line="19" pos:column="21"/></condition><then pos:line="19" pos:column="21"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="19" pos:column="22">exit_cleanup<pos:position pos:line="19" pos:column="34"/></name><argument_list pos:line="19" pos:column="34">(<argument><expr><literal type="number" pos:line="19" pos:column="35">1<pos:position pos:line="19" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="38"/></expr_stmt></block></then></if>

	<if pos:line="21" pos:column="9">if <condition pos:line="21" pos:column="12">(<expr><name pos:line="21" pos:column="13">len<pos:position pos:line="21" pos:column="16"/></name> <operator pos:line="21" pos:column="17">&gt;<pos:position pos:line="21" pos:column="21"/></operator> <sizeof pos:line="21" pos:column="19">sizeof<argument_list pos:line="21" pos:column="25">(<argument><expr><name pos:line="21" pos:column="26">buf<pos:position pos:line="21" pos:column="29"/></name></expr></argument>)<pos:position pos:line="21" pos:column="30"/></argument_list></sizeof><operator pos:line="21" pos:column="30">-<pos:position pos:line="21" pos:column="31"/></operator><literal type="number" pos:line="21" pos:column="31">1<pos:position pos:line="21" pos:column="32"/></literal></expr>)<pos:position pos:line="21" pos:column="33"/></condition><then pos:line="21" pos:column="33"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="21" pos:column="34">exit_cleanup<pos:position pos:line="21" pos:column="46"/></name><argument_list pos:line="21" pos:column="46">(<argument><expr><literal type="number" pos:line="21" pos:column="47">1<pos:position pos:line="21" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="50"/></expr_stmt></block></then></if>

	<expr_stmt><expr><name><name pos:line="23" pos:column="9">buf<pos:position pos:line="23" pos:column="12"/></name><index pos:line="23" pos:column="12">[<expr><name pos:line="23" pos:column="13">len<pos:position pos:line="23" pos:column="16"/></name></expr>]<pos:position pos:line="23" pos:column="17"/></index></name> <operator pos:line="23" pos:column="18">=<pos:position pos:line="23" pos:column="19"/></operator> <literal type="number" pos:line="23" pos:column="20">0<pos:position pos:line="23" pos:column="21"/></literal></expr>;<pos:position pos:line="23" pos:column="22"/></expr_stmt>

	<if pos:line="25" pos:column="9">if <condition pos:line="25" pos:column="12">(<expr><name pos:line="25" pos:column="13">am_daemon<pos:position pos:line="25" pos:column="22"/></name></expr>)<pos:position pos:line="25" pos:column="23"/></condition><then pos:line="25" pos:column="23"> <block pos:line="25" pos:column="24">{
		<decl_stmt><decl><type><name pos:line="26" pos:column="17">int<pos:position pos:line="26" pos:column="20"/></name></type> <name pos:line="26" pos:column="21">priority<pos:position pos:line="26" pos:column="29"/></name> <init pos:line="26" pos:column="30">= <expr><name pos:line="26" pos:column="32">LOG_INFO<pos:position pos:line="26" pos:column="40"/></name></expr></init></decl>;<pos:position pos:line="26" pos:column="41"/></decl_stmt>
		<if pos:line="27" pos:column="17">if <condition pos:line="27" pos:column="20">(<expr><name pos:line="27" pos:column="21">fd<pos:position pos:line="27" pos:column="23"/></name> <operator pos:line="27" pos:column="24">==<pos:position pos:line="27" pos:column="26"/></operator> <name pos:line="27" pos:column="27">FERROR<pos:position pos:line="27" pos:column="33"/></name></expr>)<pos:position pos:line="27" pos:column="34"/></condition><then pos:line="27" pos:column="34"> <block type="pseudo"><expr_stmt><expr><name pos:line="27" pos:column="35">priority<pos:position pos:line="27" pos:column="43"/></name> <operator pos:line="27" pos:column="44">=<pos:position pos:line="27" pos:column="45"/></operator> <name pos:line="27" pos:column="46">LOG_WARNING<pos:position pos:line="27" pos:column="57"/></name></expr>;<pos:position pos:line="27" pos:column="58"/></expr_stmt></block></then></if>

		<expr_stmt><expr><call><name pos:line="29" pos:column="17">log_open<pos:position pos:line="29" pos:column="25"/></name><argument_list pos:line="29" pos:column="25">()<pos:position pos:line="29" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="28"/></expr_stmt>
		<if pos:line="30" pos:column="17">if <condition pos:line="30" pos:column="20">(<expr><operator pos:line="30" pos:column="21">!<pos:position pos:line="30" pos:column="22"/></operator><call><name pos:line="30" pos:column="22">io_multiplex_write<pos:position pos:line="30" pos:column="40"/></name><argument_list pos:line="30" pos:column="40">(<argument><expr><name pos:line="30" pos:column="41">fd<pos:position pos:line="30" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="45">buf<pos:position pos:line="30" pos:column="48"/></name></expr></argument>, <argument><expr><call><name pos:line="30" pos:column="50">strlen<pos:position pos:line="30" pos:column="56"/></name><argument_list pos:line="30" pos:column="56">(<argument><expr><name pos:line="30" pos:column="57">buf<pos:position pos:line="30" pos:column="60"/></name></expr></argument>)<pos:position pos:line="30" pos:column="61"/></argument_list></call></expr></argument>)<pos:position pos:line="30" pos:column="62"/></argument_list></call></expr>)<pos:position pos:line="30" pos:column="63"/></condition><then pos:line="30" pos:column="63"> <block pos:line="30" pos:column="64">{
			<expr_stmt><expr><call><name pos:line="31" pos:column="25">syslog<pos:position pos:line="31" pos:column="31"/></name><argument_list pos:line="31" pos:column="31">(<argument><expr><name pos:line="31" pos:column="32">priority<pos:position pos:line="31" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="31" pos:column="42">"%s"<pos:position pos:line="31" pos:column="46"/></literal></expr></argument>, <argument><expr><name pos:line="31" pos:column="48">buf<pos:position pos:line="31" pos:column="51"/></name></expr></argument>)<pos:position pos:line="31" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="53"/></expr_stmt>
		}<pos:position pos:line="32" pos:column="18"/></block></then></if>

		<expr_stmt><expr><name pos:line="34" pos:column="17">depth<pos:position pos:line="34" pos:column="22"/></name><operator pos:line="34" pos:column="22">--<pos:position pos:line="34" pos:column="24"/></operator></expr>;<pos:position pos:line="34" pos:column="25"/></expr_stmt>
		<return pos:line="35" pos:column="17">return;<pos:position pos:line="35" pos:column="24"/></return>
	}<pos:position pos:line="36" pos:column="10"/></block></then></if>

	<if pos:line="38" pos:column="9">if <condition pos:line="38" pos:column="12">(<expr><name pos:line="38" pos:column="13">fd<pos:position pos:line="38" pos:column="15"/></name> <operator pos:line="38" pos:column="16">==<pos:position pos:line="38" pos:column="18"/></operator> <name pos:line="38" pos:column="19">FERROR<pos:position pos:line="38" pos:column="25"/></name></expr>)<pos:position pos:line="38" pos:column="26"/></condition><then pos:line="38" pos:column="26"> <block pos:line="38" pos:column="27">{
		<expr_stmt><expr><name pos:line="39" pos:column="17">f<pos:position pos:line="39" pos:column="18"/></name> <operator pos:line="39" pos:column="19">=<pos:position pos:line="39" pos:column="20"/></operator> <name pos:line="39" pos:column="21">stderr<pos:position pos:line="39" pos:column="27"/></name></expr>;<pos:position pos:line="39" pos:column="28"/></expr_stmt>
	}<pos:position pos:line="40" pos:column="10"/></block></then></if> 

	<if pos:line="42" pos:column="9">if <condition pos:line="42" pos:column="12">(<expr><name pos:line="42" pos:column="13">fd<pos:position pos:line="42" pos:column="15"/></name> <operator pos:line="42" pos:column="16">==<pos:position pos:line="42" pos:column="18"/></operator> <name pos:line="42" pos:column="19">FINFO<pos:position pos:line="42" pos:column="24"/></name></expr>)<pos:position pos:line="42" pos:column="25"/></condition><then pos:line="42" pos:column="25"> <block pos:line="42" pos:column="26">{
		<decl_stmt><decl><specifier pos:line="43" pos:column="17">extern<pos:position pos:line="43" pos:column="23"/></specifier> <type><name pos:line="43" pos:column="24">int<pos:position pos:line="43" pos:column="27"/></name></type> <name pos:line="43" pos:column="28">am_server<pos:position pos:line="43" pos:column="37"/></name></decl>;<pos:position pos:line="43" pos:column="38"/></decl_stmt>
		<if pos:line="44" pos:column="17">if <condition pos:line="44" pos:column="20">(<expr><name pos:line="44" pos:column="21">am_server<pos:position pos:line="44" pos:column="30"/></name></expr>)<pos:position pos:line="44" pos:column="31"/></condition><then pos:line="44" pos:column="31"> 
			<block type="pseudo"><expr_stmt><expr><name pos:line="45" pos:column="25">f<pos:position pos:line="45" pos:column="26"/></name> <operator pos:line="45" pos:column="27">=<pos:position pos:line="45" pos:column="28"/></operator> <name pos:line="45" pos:column="29">stderr<pos:position pos:line="45" pos:column="35"/></name></expr>;<pos:position pos:line="45" pos:column="36"/></expr_stmt></block></then>
		<else pos:line="46" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><name pos:line="47" pos:column="25">f<pos:position pos:line="47" pos:column="26"/></name> <operator pos:line="47" pos:column="27">=<pos:position pos:line="47" pos:column="28"/></operator> <name pos:line="47" pos:column="29">stdout<pos:position pos:line="47" pos:column="35"/></name></expr>;<pos:position pos:line="47" pos:column="36"/></expr_stmt></block></else></if>
	}<pos:position pos:line="48" pos:column="10"/></block></then></if> 

	<if pos:line="50" pos:column="9">if <condition pos:line="50" pos:column="12">(<expr><operator pos:line="50" pos:column="13">!<pos:position pos:line="50" pos:column="14"/></operator><name pos:line="50" pos:column="14">f<pos:position pos:line="50" pos:column="15"/></name></expr>)<pos:position pos:line="50" pos:column="16"/></condition><then pos:line="50" pos:column="16"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="50" pos:column="17">exit_cleanup<pos:position pos:line="50" pos:column="29"/></name><argument_list pos:line="50" pos:column="29">(<argument><expr><literal type="number" pos:line="50" pos:column="30">1<pos:position pos:line="50" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="50" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="33"/></expr_stmt></block></then></if>

	<if pos:line="52" pos:column="9">if <condition pos:line="52" pos:column="12">(<expr><call><name pos:line="52" pos:column="13">fwrite<pos:position pos:line="52" pos:column="19"/></name><argument_list pos:line="52" pos:column="19">(<argument><expr><name pos:line="52" pos:column="20">buf<pos:position pos:line="52" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="25">len<pos:position pos:line="52" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="52" pos:column="30">1<pos:position pos:line="52" pos:column="31"/></literal></expr></argument>, <argument><expr><name pos:line="52" pos:column="33">f<pos:position pos:line="52" pos:column="34"/></name></expr></argument>)<pos:position pos:line="52" pos:column="35"/></argument_list></call> <operator pos:line="52" pos:column="36">!=<pos:position pos:line="52" pos:column="38"/></operator> <literal type="number" pos:line="52" pos:column="39">1<pos:position pos:line="52" pos:column="40"/></literal></expr>)<pos:position pos:line="52" pos:column="41"/></condition><then pos:line="52" pos:column="41"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="52" pos:column="42">exit_cleanup<pos:position pos:line="52" pos:column="54"/></name><argument_list pos:line="52" pos:column="54">(<argument><expr><literal type="number" pos:line="52" pos:column="55">1<pos:position pos:line="52" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="52" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="58"/></expr_stmt></block></then></if>

	<expr_stmt><expr><name pos:line="54" pos:column="9">depth<pos:position pos:line="54" pos:column="14"/></name><operator pos:line="54" pos:column="14">--<pos:position pos:line="54" pos:column="16"/></operator></expr>;<pos:position pos:line="54" pos:column="17"/></expr_stmt>
}<pos:position pos:line="55" pos:column="2"/></block></function></unit>
