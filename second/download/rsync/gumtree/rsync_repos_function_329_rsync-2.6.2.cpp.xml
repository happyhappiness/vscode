<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_329_rsync-2.6.2.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">parse_arguments<pos:position pos:line="1" pos:column="20"/></name><parameter_list pos:line="1" pos:column="20">(<parameter><decl><type><name pos:line="1" pos:column="21">int<pos:position pos:line="1" pos:column="24"/></name> <modifier pos:line="1" pos:column="25">*<pos:position pos:line="1" pos:column="26"/></modifier></type><name pos:line="1" pos:column="26">argc<pos:position pos:line="1" pos:column="30"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="32">const<pos:position pos:line="1" pos:column="37"/></specifier> <name pos:line="1" pos:column="38">char<pos:position pos:line="1" pos:column="42"/></name> <modifier pos:line="1" pos:column="43">*<pos:position pos:line="1" pos:column="44"/></modifier><modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier><modifier pos:line="1" pos:column="45">*<pos:position pos:line="1" pos:column="46"/></modifier></type><name pos:line="1" pos:column="46">argv<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="52">int<pos:position pos:line="1" pos:column="55"/></name></type> <name pos:line="1" pos:column="56">frommain<pos:position pos:line="1" pos:column="64"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="65"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">opt<pos:position pos:line="3" pos:column="16"/></name></decl>;<pos:position pos:line="3" pos:column="17"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier></type><name pos:line="4" pos:column="15">ref<pos:position pos:line="4" pos:column="18"/></name> <init pos:line="4" pos:column="19">= <expr><call><name pos:line="4" pos:column="21">lp_refuse_options<pos:position pos:line="4" pos:column="38"/></name><argument_list pos:line="4" pos:column="38">(<argument><expr><name pos:line="4" pos:column="39">module_id<pos:position pos:line="4" pos:column="48"/></name></expr></argument>)<pos:position pos:line="4" pos:column="49"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="50"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="5" pos:column="9">const<pos:position pos:line="5" pos:column="14"/></specifier> <name pos:line="5" pos:column="15">char<pos:position pos:line="5" pos:column="19"/></name> <modifier pos:line="5" pos:column="20">*<pos:position pos:line="5" pos:column="21"/></modifier></type><name pos:line="5" pos:column="21">arg<pos:position pos:line="5" pos:column="24"/></name></decl>;<pos:position pos:line="5" pos:column="25"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">poptContext<pos:position pos:line="6" pos:column="20"/></name></type> <name pos:line="6" pos:column="21">pc<pos:position pos:line="6" pos:column="23"/></name></decl>;<pos:position pos:line="6" pos:column="24"/></decl_stmt>

	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><name pos:line="8" pos:column="13">ref<pos:position pos:line="8" pos:column="16"/></name> <operator pos:line="8" pos:column="17">&amp;&amp;<pos:position pos:line="8" pos:column="27"/></operator> <operator pos:line="8" pos:column="20">*<pos:position pos:line="8" pos:column="21"/></operator><name pos:line="8" pos:column="21">ref<pos:position pos:line="8" pos:column="24"/></name></expr>)<pos:position pos:line="8" pos:column="25"/></condition><then pos:line="8" pos:column="25">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="9" pos:column="17">set_refuse_options<pos:position pos:line="9" pos:column="35"/></name><argument_list pos:line="9" pos:column="35">(<argument><expr><name pos:line="9" pos:column="36">ref<pos:position pos:line="9" pos:column="39"/></name></expr></argument>)<pos:position pos:line="9" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="41"/></expr_stmt></block></then></if>

	<comment type="block" pos:line="11" pos:column="9">/* TODO: Call poptReadDefaultConfig; handle errors. */</comment>

	<comment type="block" pos:line="13" pos:column="9">/* The context leaks in case of an error, but if there's a
	 * problem we always exit anyhow. */</comment>
	<expr_stmt><expr><name pos:line="15" pos:column="9">pc<pos:position pos:line="15" pos:column="11"/></name> <operator pos:line="15" pos:column="12">=<pos:position pos:line="15" pos:column="13"/></operator> <call><name pos:line="15" pos:column="14">poptGetContext<pos:position pos:line="15" pos:column="28"/></name><argument_list pos:line="15" pos:column="28">(<argument><expr><name pos:line="15" pos:column="29">RSYNC_NAME<pos:position pos:line="15" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="15" pos:column="41">*<pos:position pos:line="15" pos:column="42"/></operator><name pos:line="15" pos:column="42">argc<pos:position pos:line="15" pos:column="46"/></name></expr></argument>, <argument><expr><operator pos:line="15" pos:column="48">*<pos:position pos:line="15" pos:column="49"/></operator><name pos:line="15" pos:column="49">argv<pos:position pos:line="15" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="55">long_options<pos:position pos:line="15" pos:column="67"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="15" pos:column="69">0<pos:position pos:line="15" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="72"/></expr_stmt>

	<while pos:line="17" pos:column="9">while <condition pos:line="17" pos:column="15">(<expr><operator pos:line="17" pos:column="16">(<pos:position pos:line="17" pos:column="17"/></operator><name pos:line="17" pos:column="17">opt<pos:position pos:line="17" pos:column="20"/></name> <operator pos:line="17" pos:column="21">=<pos:position pos:line="17" pos:column="22"/></operator> <call><name pos:line="17" pos:column="23">poptGetNextOpt<pos:position pos:line="17" pos:column="37"/></name><argument_list pos:line="17" pos:column="37">(<argument><expr><name pos:line="17" pos:column="38">pc<pos:position pos:line="17" pos:column="40"/></name></expr></argument>)<pos:position pos:line="17" pos:column="41"/></argument_list></call><operator pos:line="17" pos:column="41">)<pos:position pos:line="17" pos:column="42"/></operator> <operator pos:line="17" pos:column="43">!=<pos:position pos:line="17" pos:column="45"/></operator> <operator pos:line="17" pos:column="46">-<pos:position pos:line="17" pos:column="47"/></operator><literal type="number" pos:line="17" pos:column="47">1<pos:position pos:line="17" pos:column="48"/></literal></expr>)<pos:position pos:line="17" pos:column="49"/></condition> <block pos:line="17" pos:column="50">{
		<comment type="block" pos:line="18" pos:column="17">/* most options are handled automatically by popt;
		 * only special cases are returned and listed here. */</comment>

		<switch pos:line="21" pos:column="17">switch <condition pos:line="21" pos:column="24">(<expr><name pos:line="21" pos:column="25">opt<pos:position pos:line="21" pos:column="28"/></name></expr>)<pos:position pos:line="21" pos:column="29"/></condition> <block pos:line="21" pos:column="30">{
		<case pos:line="22" pos:column="17">case <expr><name pos:line="22" pos:column="22">OPT_VERSION<pos:position pos:line="22" pos:column="33"/></name></expr>:<pos:position pos:line="22" pos:column="34"/></case>
			<expr_stmt><expr><call><name pos:line="23" pos:column="25">print_rsync_version<pos:position pos:line="23" pos:column="44"/></name><argument_list pos:line="23" pos:column="44">(<argument><expr><name pos:line="23" pos:column="45">FINFO<pos:position pos:line="23" pos:column="50"/></name></expr></argument>)<pos:position pos:line="23" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="52"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="24" pos:column="25">exit_cleanup<pos:position pos:line="24" pos:column="37"/></name><argument_list pos:line="24" pos:column="37">(<argument><expr><literal type="number" pos:line="24" pos:column="38">0<pos:position pos:line="24" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="41"/></expr_stmt>

		<case pos:line="26" pos:column="17">case <expr><name pos:line="26" pos:column="22">OPT_MODIFY_WINDOW<pos:position pos:line="26" pos:column="39"/></name></expr>:<pos:position pos:line="26" pos:column="40"/></case>
			<comment type="block" pos:line="27" pos:column="25">/* The value has already been set by popt, but
			 * we need to remember that we're using a
			 * non-default setting. */</comment>
			<expr_stmt><expr><name pos:line="30" pos:column="25">modify_window_set<pos:position pos:line="30" pos:column="42"/></name> <operator pos:line="30" pos:column="43">=<pos:position pos:line="30" pos:column="44"/></operator> <literal type="number" pos:line="30" pos:column="45">1<pos:position pos:line="30" pos:column="46"/></literal></expr>;<pos:position pos:line="30" pos:column="47"/></expr_stmt>
			<break pos:line="31" pos:column="25">break;<pos:position pos:line="31" pos:column="31"/></break>

		<case pos:line="33" pos:column="17">case <expr><name pos:line="33" pos:column="22">OPT_DELETE_AFTER<pos:position pos:line="33" pos:column="38"/></name></expr>:<pos:position pos:line="33" pos:column="39"/></case>
			<expr_stmt><expr><name pos:line="34" pos:column="25">delete_after<pos:position pos:line="34" pos:column="37"/></name> <operator pos:line="34" pos:column="38">=<pos:position pos:line="34" pos:column="39"/></operator> <literal type="number" pos:line="34" pos:column="40">1<pos:position pos:line="34" pos:column="41"/></literal></expr>;<pos:position pos:line="34" pos:column="42"/></expr_stmt>
			<expr_stmt><expr><name pos:line="35" pos:column="25">delete_mode<pos:position pos:line="35" pos:column="36"/></name> <operator pos:line="35" pos:column="37">=<pos:position pos:line="35" pos:column="38"/></operator> <literal type="number" pos:line="35" pos:column="39">1<pos:position pos:line="35" pos:column="40"/></literal></expr>;<pos:position pos:line="35" pos:column="41"/></expr_stmt>
			<break pos:line="36" pos:column="25">break;<pos:position pos:line="36" pos:column="31"/></break>

		<case pos:line="38" pos:column="17">case <expr><name pos:line="38" pos:column="22">OPT_DELETE_EXCLUDED<pos:position pos:line="38" pos:column="41"/></name></expr>:<pos:position pos:line="38" pos:column="42"/></case>
			<expr_stmt><expr><name pos:line="39" pos:column="25">delete_excluded<pos:position pos:line="39" pos:column="40"/></name> <operator pos:line="39" pos:column="41">=<pos:position pos:line="39" pos:column="42"/></operator> <literal type="number" pos:line="39" pos:column="43">1<pos:position pos:line="39" pos:column="44"/></literal></expr>;<pos:position pos:line="39" pos:column="45"/></expr_stmt>
			<expr_stmt><expr><name pos:line="40" pos:column="25">delete_mode<pos:position pos:line="40" pos:column="36"/></name> <operator pos:line="40" pos:column="37">=<pos:position pos:line="40" pos:column="38"/></operator> <literal type="number" pos:line="40" pos:column="39">1<pos:position pos:line="40" pos:column="40"/></literal></expr>;<pos:position pos:line="40" pos:column="41"/></expr_stmt>
			<break pos:line="41" pos:column="25">break;<pos:position pos:line="41" pos:column="31"/></break>

		<case pos:line="43" pos:column="17">case <expr><name pos:line="43" pos:column="22">OPT_EXCLUDE<pos:position pos:line="43" pos:column="33"/></name></expr>:<pos:position pos:line="43" pos:column="34"/></case>
			<expr_stmt><expr><call><name pos:line="44" pos:column="25">add_exclude<pos:position pos:line="44" pos:column="36"/></name><argument_list pos:line="44" pos:column="36">(<argument><expr><operator pos:line="44" pos:column="37">&amp;<pos:position pos:line="44" pos:column="42"/></operator><name pos:line="44" pos:column="38">exclude_list<pos:position pos:line="44" pos:column="50"/></name></expr></argument>, <argument><expr><call><name pos:line="44" pos:column="52">poptGetOptArg<pos:position pos:line="44" pos:column="65"/></name><argument_list pos:line="44" pos:column="65">(<argument><expr><name pos:line="44" pos:column="66">pc<pos:position pos:line="44" pos:column="68"/></name></expr></argument>)<pos:position pos:line="44" pos:column="69"/></argument_list></call></expr></argument>, <argument><expr><literal type="number" pos:line="44" pos:column="71">0<pos:position pos:line="44" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="74"/></expr_stmt>
			<break pos:line="45" pos:column="25">break;<pos:position pos:line="45" pos:column="31"/></break>

		<case pos:line="47" pos:column="17">case <expr><name pos:line="47" pos:column="22">OPT_INCLUDE<pos:position pos:line="47" pos:column="33"/></name></expr>:<pos:position pos:line="47" pos:column="34"/></case>
			<expr_stmt><expr><call><name pos:line="48" pos:column="25">add_exclude<pos:position pos:line="48" pos:column="36"/></name><argument_list pos:line="48" pos:column="36">(<argument><expr><operator pos:line="48" pos:column="37">&amp;<pos:position pos:line="48" pos:column="42"/></operator><name pos:line="48" pos:column="38">exclude_list<pos:position pos:line="48" pos:column="50"/></name></expr></argument>, <argument><expr><call><name pos:line="48" pos:column="52">poptGetOptArg<pos:position pos:line="48" pos:column="65"/></name><argument_list pos:line="48" pos:column="65">(<argument><expr><name pos:line="48" pos:column="66">pc<pos:position pos:line="48" pos:column="68"/></name></expr></argument>)<pos:position pos:line="48" pos:column="69"/></argument_list></call></expr></argument>,
				    <argument><expr><name pos:line="49" pos:column="37">XFLG_DEF_INCLUDE<pos:position pos:line="49" pos:column="53"/></name></expr></argument>)<pos:position pos:line="49" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="55"/></expr_stmt>
			<break pos:line="50" pos:column="25">break;<pos:position pos:line="50" pos:column="31"/></break>

		<case pos:line="52" pos:column="17">case <expr><name pos:line="52" pos:column="22">OPT_EXCLUDE_FROM<pos:position pos:line="52" pos:column="38"/></name></expr>:<pos:position pos:line="52" pos:column="39"/></case>
			<expr_stmt><expr><name pos:line="53" pos:column="25">arg<pos:position pos:line="53" pos:column="28"/></name> <operator pos:line="53" pos:column="29">=<pos:position pos:line="53" pos:column="30"/></operator> <call><name pos:line="53" pos:column="31">poptGetOptArg<pos:position pos:line="53" pos:column="44"/></name><argument_list pos:line="53" pos:column="44">(<argument><expr><name pos:line="53" pos:column="45">pc<pos:position pos:line="53" pos:column="47"/></name></expr></argument>)<pos:position pos:line="53" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="49"/></expr_stmt>
			<if pos:line="54" pos:column="25">if <condition pos:line="54" pos:column="28">(<expr><name pos:line="54" pos:column="29">sanitize_paths<pos:position pos:line="54" pos:column="43"/></name></expr>)<pos:position pos:line="54" pos:column="44"/></condition><then pos:line="54" pos:column="44">
				<block type="pseudo"><expr_stmt><expr><name pos:line="55" pos:column="33">arg<pos:position pos:line="55" pos:column="36"/></name> <operator pos:line="55" pos:column="37">=<pos:position pos:line="55" pos:column="38"/></operator> <call><name pos:line="55" pos:column="39">alloc_sanitize_path<pos:position pos:line="55" pos:column="58"/></name><argument_list pos:line="55" pos:column="58">(<argument><expr><name pos:line="55" pos:column="59">arg<pos:position pos:line="55" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="64">curr_dir<pos:position pos:line="55" pos:column="72"/></name></expr></argument>)<pos:position pos:line="55" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="74"/></expr_stmt></block></then></if>
			<expr_stmt><expr><call><name pos:line="56" pos:column="25">add_exclude_file<pos:position pos:line="56" pos:column="41"/></name><argument_list pos:line="56" pos:column="41">(<argument><expr><operator pos:line="56" pos:column="42">&amp;<pos:position pos:line="56" pos:column="47"/></operator><name pos:line="56" pos:column="43">exclude_list<pos:position pos:line="56" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="57">arg<pos:position pos:line="56" pos:column="60"/></name></expr></argument>,
					 <argument><expr><name pos:line="57" pos:column="42">XFLG_FATAL_ERRORS<pos:position pos:line="57" pos:column="59"/></name></expr></argument>)<pos:position pos:line="57" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="61"/></expr_stmt>
			<break pos:line="58" pos:column="25">break;<pos:position pos:line="58" pos:column="31"/></break>

		<case pos:line="60" pos:column="17">case <expr><name pos:line="60" pos:column="22">OPT_INCLUDE_FROM<pos:position pos:line="60" pos:column="38"/></name></expr>:<pos:position pos:line="60" pos:column="39"/></case>
			<expr_stmt><expr><name pos:line="61" pos:column="25">arg<pos:position pos:line="61" pos:column="28"/></name> <operator pos:line="61" pos:column="29">=<pos:position pos:line="61" pos:column="30"/></operator> <call><name pos:line="61" pos:column="31">poptGetOptArg<pos:position pos:line="61" pos:column="44"/></name><argument_list pos:line="61" pos:column="44">(<argument><expr><name pos:line="61" pos:column="45">pc<pos:position pos:line="61" pos:column="47"/></name></expr></argument>)<pos:position pos:line="61" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="49"/></expr_stmt>
			<if pos:line="62" pos:column="25">if <condition pos:line="62" pos:column="28">(<expr><name pos:line="62" pos:column="29">sanitize_paths<pos:position pos:line="62" pos:column="43"/></name></expr>)<pos:position pos:line="62" pos:column="44"/></condition><then pos:line="62" pos:column="44">
				<block type="pseudo"><expr_stmt><expr><name pos:line="63" pos:column="33">arg<pos:position pos:line="63" pos:column="36"/></name> <operator pos:line="63" pos:column="37">=<pos:position pos:line="63" pos:column="38"/></operator> <call><name pos:line="63" pos:column="39">alloc_sanitize_path<pos:position pos:line="63" pos:column="58"/></name><argument_list pos:line="63" pos:column="58">(<argument><expr><name pos:line="63" pos:column="59">arg<pos:position pos:line="63" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="63" pos:column="64">curr_dir<pos:position pos:line="63" pos:column="72"/></name></expr></argument>)<pos:position pos:line="63" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="74"/></expr_stmt></block></then></if>
			<expr_stmt><expr><call><name pos:line="64" pos:column="25">add_exclude_file<pos:position pos:line="64" pos:column="41"/></name><argument_list pos:line="64" pos:column="41">(<argument><expr><operator pos:line="64" pos:column="42">&amp;<pos:position pos:line="64" pos:column="47"/></operator><name pos:line="64" pos:column="43">exclude_list<pos:position pos:line="64" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="57">arg<pos:position pos:line="64" pos:column="60"/></name></expr></argument>,
					 <argument><expr><name pos:line="65" pos:column="42">XFLG_FATAL_ERRORS<pos:position pos:line="65" pos:column="59"/></name> <operator pos:line="65" pos:column="60">|<pos:position pos:line="65" pos:column="61"/></operator> <name pos:line="65" pos:column="62">XFLG_DEF_INCLUDE<pos:position pos:line="65" pos:column="78"/></name></expr></argument>)<pos:position pos:line="65" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="80"/></expr_stmt>
			<break pos:line="66" pos:column="25">break;<pos:position pos:line="66" pos:column="31"/></break>

		<case pos:line="68" pos:column="17">case <expr><literal type="char" pos:line="68" pos:column="22">'h'<pos:position pos:line="68" pos:column="25"/></literal></expr>:<pos:position pos:line="68" pos:column="26"/></case>
			<expr_stmt><expr><call><name pos:line="69" pos:column="25">usage<pos:position pos:line="69" pos:column="30"/></name><argument_list pos:line="69" pos:column="30">(<argument><expr><name pos:line="69" pos:column="31">FINFO<pos:position pos:line="69" pos:column="36"/></name></expr></argument>)<pos:position pos:line="69" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="38"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="70" pos:column="25">exit_cleanup<pos:position pos:line="70" pos:column="37"/></name><argument_list pos:line="70" pos:column="37">(<argument><expr><literal type="number" pos:line="70" pos:column="38">0<pos:position pos:line="70" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="70" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="41"/></expr_stmt>

		<case pos:line="72" pos:column="17">case <expr><literal type="char" pos:line="72" pos:column="22">'v'<pos:position pos:line="72" pos:column="25"/></literal></expr>:<pos:position pos:line="72" pos:column="26"/></case>
			<expr_stmt><expr><name pos:line="73" pos:column="25">verbose<pos:position pos:line="73" pos:column="32"/></name><operator pos:line="73" pos:column="32">++<pos:position pos:line="73" pos:column="34"/></operator></expr>;<pos:position pos:line="73" pos:column="35"/></expr_stmt>
			<break pos:line="74" pos:column="25">break;<pos:position pos:line="74" pos:column="31"/></break>

		<case pos:line="76" pos:column="17">case <expr><literal type="char" pos:line="76" pos:column="22">'q'<pos:position pos:line="76" pos:column="25"/></literal></expr>:<pos:position pos:line="76" pos:column="26"/></case>
			<if pos:line="77" pos:column="25">if <condition pos:line="77" pos:column="28">(<expr><name pos:line="77" pos:column="29">frommain<pos:position pos:line="77" pos:column="37"/></name></expr>)<pos:position pos:line="77" pos:column="38"/></condition><then pos:line="77" pos:column="38">
				<block type="pseudo"><expr_stmt><expr><name pos:line="78" pos:column="33">quiet<pos:position pos:line="78" pos:column="38"/></name><operator pos:line="78" pos:column="38">++<pos:position pos:line="78" pos:column="40"/></operator></expr>;<pos:position pos:line="78" pos:column="41"/></expr_stmt></block></then></if>
			<break pos:line="79" pos:column="25">break;<pos:position pos:line="79" pos:column="31"/></break>

		<case pos:line="81" pos:column="17">case <expr><name pos:line="81" pos:column="22">OPT_SENDER<pos:position pos:line="81" pos:column="32"/></name></expr>:<pos:position pos:line="81" pos:column="33"/></case>
			<if pos:line="82" pos:column="25">if <condition pos:line="82" pos:column="28">(<expr><operator pos:line="82" pos:column="29">!<pos:position pos:line="82" pos:column="30"/></operator><name pos:line="82" pos:column="30">am_server<pos:position pos:line="82" pos:column="39"/></name></expr>)<pos:position pos:line="82" pos:column="40"/></condition><then pos:line="82" pos:column="40"> <block pos:line="82" pos:column="41">{
				<expr_stmt><expr><call><name pos:line="83" pos:column="33">usage<pos:position pos:line="83" pos:column="38"/></name><argument_list pos:line="83" pos:column="38">(<argument><expr><name pos:line="83" pos:column="39">FERROR<pos:position pos:line="83" pos:column="45"/></name></expr></argument>)<pos:position pos:line="83" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="47"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="84" pos:column="33">exit_cleanup<pos:position pos:line="84" pos:column="45"/></name><argument_list pos:line="84" pos:column="45">(<argument><expr><name pos:line="84" pos:column="46">RERR_SYNTAX<pos:position pos:line="84" pos:column="57"/></name></expr></argument>)<pos:position pos:line="84" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="59"/></expr_stmt>
			}<pos:position pos:line="85" pos:column="26"/></block></then></if>
			<expr_stmt><expr><name pos:line="86" pos:column="25">am_sender<pos:position pos:line="86" pos:column="34"/></name> <operator pos:line="86" pos:column="35">=<pos:position pos:line="86" pos:column="36"/></operator> <literal type="number" pos:line="86" pos:column="37">1<pos:position pos:line="86" pos:column="38"/></literal></expr>;<pos:position pos:line="86" pos:column="39"/></expr_stmt>
			<break pos:line="87" pos:column="25">break;<pos:position pos:line="87" pos:column="31"/></break>

		<case pos:line="89" pos:column="17">case <expr><literal type="char" pos:line="89" pos:column="22">'P'<pos:position pos:line="89" pos:column="25"/></literal></expr>:<pos:position pos:line="89" pos:column="26"/></case>
			<expr_stmt><expr><name pos:line="90" pos:column="25">do_progress<pos:position pos:line="90" pos:column="36"/></name> <operator pos:line="90" pos:column="37">=<pos:position pos:line="90" pos:column="38"/></operator> <literal type="number" pos:line="90" pos:column="39">1<pos:position pos:line="90" pos:column="40"/></literal></expr>;<pos:position pos:line="90" pos:column="41"/></expr_stmt>
			<expr_stmt><expr><name pos:line="91" pos:column="25">keep_partial<pos:position pos:line="91" pos:column="37"/></name> <operator pos:line="91" pos:column="38">=<pos:position pos:line="91" pos:column="39"/></operator> <literal type="number" pos:line="91" pos:column="40">1<pos:position pos:line="91" pos:column="41"/></literal></expr>;<pos:position pos:line="91" pos:column="42"/></expr_stmt>
			<break pos:line="92" pos:column="25">break;<pos:position pos:line="92" pos:column="31"/></break>

		<case pos:line="94" pos:column="17">case <expr><name pos:line="94" pos:column="22">OPT_WRITE_BATCH<pos:position pos:line="94" pos:column="37"/></name></expr>:<pos:position pos:line="94" pos:column="38"/></case>
			<comment type="block" pos:line="95" pos:column="25">/* popt stores the filename in batch_prefix for us */</comment>
			<expr_stmt><expr><name pos:line="96" pos:column="25">write_batch<pos:position pos:line="96" pos:column="36"/></name> <operator pos:line="96" pos:column="37">=<pos:position pos:line="96" pos:column="38"/></operator> <literal type="number" pos:line="96" pos:column="39">1<pos:position pos:line="96" pos:column="40"/></literal></expr>;<pos:position pos:line="96" pos:column="41"/></expr_stmt>
			<expr_stmt><expr><name pos:line="97" pos:column="25">checksum_seed<pos:position pos:line="97" pos:column="38"/></name> <operator pos:line="97" pos:column="39">=<pos:position pos:line="97" pos:column="40"/></operator> <name pos:line="97" pos:column="41">FIXED_CHECKSUM_SEED<pos:position pos:line="97" pos:column="60"/></name></expr>;<pos:position pos:line="97" pos:column="61"/></expr_stmt>
			<break pos:line="98" pos:column="25">break;<pos:position pos:line="98" pos:column="31"/></break>

		<case pos:line="100" pos:column="17">case <expr><name pos:line="100" pos:column="22">OPT_READ_BATCH<pos:position pos:line="100" pos:column="36"/></name></expr>:<pos:position pos:line="100" pos:column="37"/></case>
			<comment type="block" pos:line="101" pos:column="25">/* popt stores the filename in batch_prefix for us */</comment>
			<expr_stmt><expr><name pos:line="102" pos:column="25">read_batch<pos:position pos:line="102" pos:column="35"/></name> <operator pos:line="102" pos:column="36">=<pos:position pos:line="102" pos:column="37"/></operator> <literal type="number" pos:line="102" pos:column="38">1<pos:position pos:line="102" pos:column="39"/></literal></expr>;<pos:position pos:line="102" pos:column="40"/></expr_stmt>
			<expr_stmt><expr><name pos:line="103" pos:column="25">checksum_seed<pos:position pos:line="103" pos:column="38"/></name> <operator pos:line="103" pos:column="39">=<pos:position pos:line="103" pos:column="40"/></operator> <name pos:line="103" pos:column="41">FIXED_CHECKSUM_SEED<pos:position pos:line="103" pos:column="60"/></name></expr>;<pos:position pos:line="103" pos:column="61"/></expr_stmt>
			<break pos:line="104" pos:column="25">break;<pos:position pos:line="104" pos:column="31"/></break>

		<case pos:line="106" pos:column="17">case <expr><name pos:line="106" pos:column="22">OPT_LINK_DEST<pos:position pos:line="106" pos:column="35"/></name></expr>:<pos:position pos:line="106" pos:column="36"/></case>
<cpp:if pos:line="107" pos:column="1">#<cpp:directive pos:line="107" pos:column="2">if<pos:position pos:line="107" pos:column="4"/></cpp:directive> <expr><name pos:line="107" pos:column="5">HAVE_LINK<pos:position pos:line="107" pos:column="14"/></name></expr></cpp:if>
			<expr_stmt><expr><name pos:line="108" pos:column="25">link_dest<pos:position pos:line="108" pos:column="34"/></name> <operator pos:line="108" pos:column="35">=<pos:position pos:line="108" pos:column="36"/></operator> <literal type="number" pos:line="108" pos:column="37">1<pos:position pos:line="108" pos:column="38"/></literal></expr>;<pos:position pos:line="108" pos:column="39"/></expr_stmt>
			<break pos:line="109" pos:column="25">break;<pos:position pos:line="109" pos:column="31"/></break>
<cpp:else pos:line="110" pos:column="1">#<cpp:directive pos:line="110" pos:column="2">else<pos:position pos:line="110" pos:column="6"/></cpp:directive></cpp:else>
			<expr_stmt><expr><call><name pos:line="111" pos:column="25">snprintf<pos:position pos:line="111" pos:column="33"/></name><argument_list pos:line="111" pos:column="33">(<argument><expr><name pos:line="111" pos:column="34">err_buf<pos:position pos:line="111" pos:column="41"/></name></expr></argument>, <argument><expr><sizeof pos:line="111" pos:column="43">sizeof <name pos:line="111" pos:column="50">err_buf<pos:position pos:line="111" pos:column="57"/></name></sizeof></expr></argument>,
				 <argument><expr><literal type="string" pos:line="112" pos:column="34">"hard links are not supported on this %s\n"<pos:position pos:line="112" pos:column="77"/></literal></expr></argument>,
				 <argument><expr><ternary><condition><expr><name pos:line="113" pos:column="34">am_server<pos:position pos:line="113" pos:column="43"/></name></expr> ?<pos:position pos:line="113" pos:column="45"/></condition><then pos:line="113" pos:column="45"> <expr><literal type="string" pos:line="113" pos:column="46">"server"<pos:position pos:line="113" pos:column="54"/></literal></expr> <pos:position pos:line="113" pos:column="55"/></then><else pos:line="113" pos:column="55">: <expr><literal type="string" pos:line="113" pos:column="57">"client"<pos:position pos:line="113" pos:column="65"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="113" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="113" pos:column="67"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="114" pos:column="25">rprintf<pos:position pos:line="114" pos:column="32"/></name><argument_list pos:line="114" pos:column="32">(<argument><expr><name pos:line="114" pos:column="33">FERROR<pos:position pos:line="114" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="114" pos:column="41">"ERROR: %s"<pos:position pos:line="114" pos:column="52"/></literal></expr></argument>, <argument><expr><name pos:line="114" pos:column="54">err_buf<pos:position pos:line="114" pos:column="61"/></name></expr></argument>)<pos:position pos:line="114" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="114" pos:column="63"/></expr_stmt>
			<return pos:line="115" pos:column="25">return <expr><literal type="number" pos:line="115" pos:column="32">0<pos:position pos:line="115" pos:column="33"/></literal></expr>;<pos:position pos:line="115" pos:column="34"/></return>
<cpp:endif pos:line="116" pos:column="1">#<cpp:directive pos:line="116" pos:column="2">endif<pos:position pos:line="116" pos:column="7"/></cpp:directive></cpp:endif>

		<default pos:line="118" pos:column="17">default:<pos:position pos:line="118" pos:column="25"/></default>
			<comment type="block" pos:line="119" pos:column="25">/* A large opt value means that set_refuse_options()
			 * turned this option off (opt-BASE is its index). */</comment>
			<if pos:line="121" pos:column="25">if <condition pos:line="121" pos:column="28">(<expr><name pos:line="121" pos:column="29">opt<pos:position pos:line="121" pos:column="32"/></name> <operator pos:line="121" pos:column="33">&gt;=<pos:position pos:line="121" pos:column="38"/></operator> <name pos:line="121" pos:column="36">OPT_REFUSED_BASE<pos:position pos:line="121" pos:column="52"/></name></expr>)<pos:position pos:line="121" pos:column="53"/></condition><then pos:line="121" pos:column="53"> <block pos:line="121" pos:column="54">{
				<decl_stmt><decl><type><name><name pos:line="122" pos:column="33">struct<pos:position pos:line="122" pos:column="39"/></name> <name pos:line="122" pos:column="40">poptOption<pos:position pos:line="122" pos:column="50"/></name></name> <modifier pos:line="122" pos:column="51">*<pos:position pos:line="122" pos:column="52"/></modifier></type><name pos:line="122" pos:column="52">op<pos:position pos:line="122" pos:column="54"/></name> <init pos:line="122" pos:column="55">=
				    <expr><operator pos:line="123" pos:column="37">&amp;<pos:position pos:line="123" pos:column="42"/></operator><name><name pos:line="123" pos:column="38">long_options<pos:position pos:line="123" pos:column="50"/></name><index pos:line="123" pos:column="50">[<expr><name pos:line="123" pos:column="51">opt<pos:position pos:line="123" pos:column="54"/></name><operator pos:line="123" pos:column="54">-<pos:position pos:line="123" pos:column="55"/></operator><name pos:line="123" pos:column="55">OPT_REFUSED_BASE<pos:position pos:line="123" pos:column="71"/></name></expr>]<pos:position pos:line="123" pos:column="72"/></index></name></expr></init></decl>;<pos:position pos:line="123" pos:column="73"/></decl_stmt>
				<decl_stmt><decl><type><name pos:line="124" pos:column="33">int<pos:position pos:line="124" pos:column="36"/></name></type> <name pos:line="124" pos:column="37">n<pos:position pos:line="124" pos:column="38"/></name> <init pos:line="124" pos:column="39">= <expr><call><name pos:line="124" pos:column="41">snprintf<pos:position pos:line="124" pos:column="49"/></name><argument_list pos:line="124" pos:column="49">(<argument><expr><name pos:line="124" pos:column="50">err_buf<pos:position pos:line="124" pos:column="57"/></name></expr></argument>, <argument><expr><sizeof pos:line="124" pos:column="59">sizeof <name pos:line="124" pos:column="66">err_buf<pos:position pos:line="124" pos:column="73"/></name></sizeof></expr></argument>,
				    <argument><expr><literal type="string" pos:line="125" pos:column="37">"This server does not support --%s\n"<pos:position pos:line="125" pos:column="74"/></literal></expr></argument>,
				    <argument><expr><name><name pos:line="126" pos:column="37">op<pos:position pos:line="126" pos:column="39"/></name><operator pos:line="126" pos:column="39">-&gt;<pos:position pos:line="126" pos:column="44"/></operator><name pos:line="126" pos:column="41">longName<pos:position pos:line="126" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="126" pos:column="50"/></argument_list></call> <operator pos:line="126" pos:column="51">-<pos:position pos:line="126" pos:column="52"/></operator> <literal type="number" pos:line="126" pos:column="53">1<pos:position pos:line="126" pos:column="54"/></literal></expr></init></decl>;<pos:position pos:line="126" pos:column="55"/></decl_stmt>
				<if pos:line="127" pos:column="33">if <condition pos:line="127" pos:column="36">(<expr><name><name pos:line="127" pos:column="37">op<pos:position pos:line="127" pos:column="39"/></name><operator pos:line="127" pos:column="39">-&gt;<pos:position pos:line="127" pos:column="44"/></operator><name pos:line="127" pos:column="41">shortName<pos:position pos:line="127" pos:column="50"/></name></name></expr>)<pos:position pos:line="127" pos:column="51"/></condition><then pos:line="127" pos:column="51"> <block pos:line="127" pos:column="52">{
					<expr_stmt><expr><call><name pos:line="128" pos:column="41">snprintf<pos:position pos:line="128" pos:column="49"/></name><argument_list pos:line="128" pos:column="49">(<argument><expr><name pos:line="128" pos:column="50">err_buf<pos:position pos:line="128" pos:column="57"/></name><operator pos:line="128" pos:column="57">+<pos:position pos:line="128" pos:column="58"/></operator><name pos:line="128" pos:column="58">n<pos:position pos:line="128" pos:column="59"/></name></expr></argument>, <argument><expr><sizeof pos:line="128" pos:column="61">sizeof <name pos:line="128" pos:column="68">err_buf<pos:position pos:line="128" pos:column="75"/></name></sizeof><operator pos:line="128" pos:column="75">-<pos:position pos:line="128" pos:column="76"/></operator><name pos:line="128" pos:column="76">n<pos:position pos:line="128" pos:column="77"/></name></expr></argument>,
					    <argument><expr><literal type="string" pos:line="129" pos:column="45">" (-%c)\n"<pos:position pos:line="129" pos:column="55"/></literal></expr></argument>, <argument><expr><name><name pos:line="129" pos:column="57">op<pos:position pos:line="129" pos:column="59"/></name><operator pos:line="129" pos:column="59">-&gt;<pos:position pos:line="129" pos:column="64"/></operator><name pos:line="129" pos:column="61">shortName<pos:position pos:line="129" pos:column="70"/></name></name></expr></argument>)<pos:position pos:line="129" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="129" pos:column="72"/></expr_stmt>
				}<pos:position pos:line="130" pos:column="34"/></block></then></if>
			}<pos:position pos:line="131" pos:column="26"/></block></then> <else pos:line="131" pos:column="27">else <block pos:line="131" pos:column="32">{
				<expr_stmt><expr><call><name pos:line="132" pos:column="33">snprintf<pos:position pos:line="132" pos:column="41"/></name><argument_list pos:line="132" pos:column="41">(<argument><expr><name pos:line="132" pos:column="42">err_buf<pos:position pos:line="132" pos:column="49"/></name></expr></argument>, <argument><expr><sizeof pos:line="132" pos:column="51">sizeof <name pos:line="132" pos:column="58">err_buf<pos:position pos:line="132" pos:column="65"/></name></sizeof></expr></argument>,
				    <argument><expr><literal type="string" pos:line="133" pos:column="37">"%s%s: %s\n"<pos:position pos:line="133" pos:column="49"/></literal></expr></argument>,
				    <argument><expr><ternary><condition><expr><name pos:line="134" pos:column="37">am_server<pos:position pos:line="134" pos:column="46"/></name></expr> ?<pos:position pos:line="134" pos:column="48"/></condition><then pos:line="134" pos:column="48"> <expr><literal type="string" pos:line="134" pos:column="49">"on remote machine: "<pos:position pos:line="134" pos:column="70"/></literal></expr> <pos:position pos:line="134" pos:column="71"/></then><else pos:line="134" pos:column="71">: <expr><literal type="string" pos:line="134" pos:column="73">""<pos:position pos:line="134" pos:column="75"/></literal></expr></else></ternary></expr></argument>,
				    <argument><expr><call><name pos:line="135" pos:column="37">poptBadOption<pos:position pos:line="135" pos:column="50"/></name><argument_list pos:line="135" pos:column="50">(<argument><expr><name pos:line="135" pos:column="51">pc<pos:position pos:line="135" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="135" pos:column="55">POPT_BADOPTION_NOALIAS<pos:position pos:line="135" pos:column="77"/></name></expr></argument>)<pos:position pos:line="135" pos:column="78"/></argument_list></call></expr></argument>,
				    <argument><expr><call><name pos:line="136" pos:column="37">poptStrerror<pos:position pos:line="136" pos:column="49"/></name><argument_list pos:line="136" pos:column="49">(<argument><expr><name pos:line="136" pos:column="50">opt<pos:position pos:line="136" pos:column="53"/></name></expr></argument>)<pos:position pos:line="136" pos:column="54"/></argument_list></call></expr></argument>)<pos:position pos:line="136" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="136" pos:column="56"/></expr_stmt>
			}<pos:position pos:line="137" pos:column="26"/></block></else></if>
			<return pos:line="138" pos:column="25">return <expr><literal type="number" pos:line="138" pos:column="32">0<pos:position pos:line="138" pos:column="33"/></literal></expr>;<pos:position pos:line="138" pos:column="34"/></return>
		}<pos:position pos:line="139" pos:column="18"/></block></switch>
	}<pos:position pos:line="140" pos:column="10"/></block></while>

<cpp:if pos:line="142" pos:column="1">#<cpp:directive pos:line="142" pos:column="2">if<pos:position pos:line="142" pos:column="4"/></cpp:directive> <expr><operator pos:line="142" pos:column="5">!<pos:position pos:line="142" pos:column="6"/></operator><name pos:line="142" pos:column="6">SUPPORT_LINKS<pos:position pos:line="142" pos:column="19"/></name></expr></cpp:if>
	<if pos:line="143" pos:column="9">if <condition pos:line="143" pos:column="12">(<expr><name pos:line="143" pos:column="13">preserve_links<pos:position pos:line="143" pos:column="27"/></name> <operator pos:line="143" pos:column="28">&amp;&amp;<pos:position pos:line="143" pos:column="38"/></operator> <operator pos:line="143" pos:column="31">!<pos:position pos:line="143" pos:column="32"/></operator><name pos:line="143" pos:column="32">am_sender<pos:position pos:line="143" pos:column="41"/></name></expr>)<pos:position pos:line="143" pos:column="42"/></condition><then pos:line="143" pos:column="42"> <block pos:line="143" pos:column="43">{
		<expr_stmt><expr><call><name pos:line="144" pos:column="17">snprintf<pos:position pos:line="144" pos:column="25"/></name><argument_list pos:line="144" pos:column="25">(<argument><expr><name pos:line="144" pos:column="26">err_buf<pos:position pos:line="144" pos:column="33"/></name></expr></argument>, <argument><expr><sizeof pos:line="144" pos:column="35">sizeof <name pos:line="144" pos:column="42">err_buf<pos:position pos:line="144" pos:column="49"/></name></sizeof></expr></argument>,
			 <argument><expr><literal type="string" pos:line="145" pos:column="26">"symlinks are not supported on this %s\n"<pos:position pos:line="145" pos:column="67"/></literal></expr></argument>,
			 <argument><expr><ternary><condition><expr><name pos:line="146" pos:column="26">am_server<pos:position pos:line="146" pos:column="35"/></name></expr> ?<pos:position pos:line="146" pos:column="37"/></condition><then pos:line="146" pos:column="37"> <expr><literal type="string" pos:line="146" pos:column="38">"server"<pos:position pos:line="146" pos:column="46"/></literal></expr> <pos:position pos:line="146" pos:column="47"/></then><else pos:line="146" pos:column="47">: <expr><literal type="string" pos:line="146" pos:column="49">"client"<pos:position pos:line="146" pos:column="57"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="146" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="146" pos:column="59"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="147" pos:column="17">rprintf<pos:position pos:line="147" pos:column="24"/></name><argument_list pos:line="147" pos:column="24">(<argument><expr><name pos:line="147" pos:column="25">FERROR<pos:position pos:line="147" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="147" pos:column="33">"ERROR: %s"<pos:position pos:line="147" pos:column="44"/></literal></expr></argument>, <argument><expr><name pos:line="147" pos:column="46">err_buf<pos:position pos:line="147" pos:column="53"/></name></expr></argument>)<pos:position pos:line="147" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="147" pos:column="55"/></expr_stmt>
		<return pos:line="148" pos:column="17">return <expr><literal type="number" pos:line="148" pos:column="24">0<pos:position pos:line="148" pos:column="25"/></literal></expr>;<pos:position pos:line="148" pos:column="26"/></return>
	}<pos:position pos:line="149" pos:column="10"/></block></then></if>
<cpp:endif pos:line="150" pos:column="1">#<cpp:directive pos:line="150" pos:column="2">endif<pos:position pos:line="150" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:if pos:line="152" pos:column="1">#<cpp:directive pos:line="152" pos:column="2">if<pos:position pos:line="152" pos:column="4"/></cpp:directive> <expr><operator pos:line="152" pos:column="5">!<pos:position pos:line="152" pos:column="6"/></operator><name pos:line="152" pos:column="6">SUPPORT_HARD_LINKS<pos:position pos:line="152" pos:column="24"/></name></expr></cpp:if>
	<if pos:line="153" pos:column="9">if <condition pos:line="153" pos:column="12">(<expr><name pos:line="153" pos:column="13">preserve_hard_links<pos:position pos:line="153" pos:column="32"/></name></expr>)<pos:position pos:line="153" pos:column="33"/></condition><then pos:line="153" pos:column="33"> <block pos:line="153" pos:column="34">{
		<expr_stmt><expr><call><name pos:line="154" pos:column="17">snprintf<pos:position pos:line="154" pos:column="25"/></name><argument_list pos:line="154" pos:column="25">(<argument><expr><name pos:line="154" pos:column="26">err_buf<pos:position pos:line="154" pos:column="33"/></name></expr></argument>, <argument><expr><sizeof pos:line="154" pos:column="35">sizeof <name pos:line="154" pos:column="42">err_buf<pos:position pos:line="154" pos:column="49"/></name></sizeof></expr></argument>,
			 <argument><expr><literal type="string" pos:line="155" pos:column="26">"hard links are not supported on this %s\n"<pos:position pos:line="155" pos:column="69"/></literal></expr></argument>,
			 <argument><expr><ternary><condition><expr><name pos:line="156" pos:column="26">am_server<pos:position pos:line="156" pos:column="35"/></name></expr> ?<pos:position pos:line="156" pos:column="37"/></condition><then pos:line="156" pos:column="37"> <expr><literal type="string" pos:line="156" pos:column="38">"server"<pos:position pos:line="156" pos:column="46"/></literal></expr> <pos:position pos:line="156" pos:column="47"/></then><else pos:line="156" pos:column="47">: <expr><literal type="string" pos:line="156" pos:column="49">"client"<pos:position pos:line="156" pos:column="57"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="156" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="156" pos:column="59"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="157" pos:column="17">rprintf<pos:position pos:line="157" pos:column="24"/></name><argument_list pos:line="157" pos:column="24">(<argument><expr><name pos:line="157" pos:column="25">FERROR<pos:position pos:line="157" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="157" pos:column="33">"ERROR: %s"<pos:position pos:line="157" pos:column="44"/></literal></expr></argument>, <argument><expr><name pos:line="157" pos:column="46">err_buf<pos:position pos:line="157" pos:column="53"/></name></expr></argument>)<pos:position pos:line="157" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="157" pos:column="55"/></expr_stmt>
		<return pos:line="158" pos:column="17">return <expr><literal type="number" pos:line="158" pos:column="24">0<pos:position pos:line="158" pos:column="25"/></literal></expr>;<pos:position pos:line="158" pos:column="26"/></return>
	}<pos:position pos:line="159" pos:column="10"/></block></then></if>
<cpp:endif pos:line="160" pos:column="1">#<cpp:directive pos:line="160" pos:column="2">endif<pos:position pos:line="160" pos:column="7"/></cpp:directive></cpp:endif>

	<if pos:line="162" pos:column="9">if <condition pos:line="162" pos:column="12">(<expr><name pos:line="162" pos:column="13">write_batch<pos:position pos:line="162" pos:column="24"/></name> <operator pos:line="162" pos:column="25">&amp;&amp;<pos:position pos:line="162" pos:column="35"/></operator> <name pos:line="162" pos:column="28">read_batch<pos:position pos:line="162" pos:column="38"/></name></expr>)<pos:position pos:line="162" pos:column="39"/></condition><then pos:line="162" pos:column="39"> <block pos:line="162" pos:column="40">{
		<expr_stmt><expr><call><name pos:line="163" pos:column="17">rprintf<pos:position pos:line="163" pos:column="24"/></name><argument_list pos:line="163" pos:column="24">(<argument><expr><name pos:line="163" pos:column="25">FERROR<pos:position pos:line="163" pos:column="31"/></name></expr></argument>,
			<argument><expr><literal type="string" pos:line="164" pos:column="25">"write-batch and read-batch can not be used together\n"<pos:position pos:line="164" pos:column="80"/></literal></expr></argument>)<pos:position pos:line="164" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="164" pos:column="82"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="165" pos:column="17">exit_cleanup<pos:position pos:line="165" pos:column="29"/></name><argument_list pos:line="165" pos:column="29">(<argument><expr><name pos:line="165" pos:column="30">RERR_SYNTAX<pos:position pos:line="165" pos:column="41"/></name></expr></argument>)<pos:position pos:line="165" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="165" pos:column="43"/></expr_stmt>
	}<pos:position pos:line="166" pos:column="10"/></block></then></if>
	<if pos:line="167" pos:column="9">if <condition pos:line="167" pos:column="12">(<expr><name pos:line="167" pos:column="13">batch_prefix<pos:position pos:line="167" pos:column="25"/></name> <operator pos:line="167" pos:column="26">&amp;&amp;<pos:position pos:line="167" pos:column="36"/></operator> <call><name pos:line="167" pos:column="29">strlen<pos:position pos:line="167" pos:column="35"/></name><argument_list pos:line="167" pos:column="35">(<argument><expr><name pos:line="167" pos:column="36">batch_prefix<pos:position pos:line="167" pos:column="48"/></name></expr></argument>)<pos:position pos:line="167" pos:column="49"/></argument_list></call> <operator pos:line="167" pos:column="50">&gt;<pos:position pos:line="167" pos:column="54"/></operator> <name pos:line="167" pos:column="52">MAX_BATCH_PREFIX_LEN<pos:position pos:line="167" pos:column="72"/></name></expr>)<pos:position pos:line="167" pos:column="73"/></condition><then pos:line="167" pos:column="73"> <block pos:line="167" pos:column="74">{
		<expr_stmt><expr><call><name pos:line="168" pos:column="17">rprintf<pos:position pos:line="168" pos:column="24"/></name><argument_list pos:line="168" pos:column="24">(<argument><expr><name pos:line="168" pos:column="25">FERROR<pos:position pos:line="168" pos:column="31"/></name></expr></argument>,
			<argument><expr><literal type="string" pos:line="169" pos:column="25">"the batch-file prefix must be %d characters or less.\n"<pos:position pos:line="169" pos:column="81"/></literal></expr></argument>,
			<argument><expr><name pos:line="170" pos:column="25">MAX_BATCH_PREFIX_LEN<pos:position pos:line="170" pos:column="45"/></name></expr></argument>)<pos:position pos:line="170" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="170" pos:column="47"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="171" pos:column="17">exit_cleanup<pos:position pos:line="171" pos:column="29"/></name><argument_list pos:line="171" pos:column="29">(<argument><expr><name pos:line="171" pos:column="30">RERR_SYNTAX<pos:position pos:line="171" pos:column="41"/></name></expr></argument>)<pos:position pos:line="171" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="171" pos:column="43"/></expr_stmt>
	}<pos:position pos:line="172" pos:column="10"/></block></then></if>

	<if pos:line="174" pos:column="9">if <condition pos:line="174" pos:column="12">(<expr><name pos:line="174" pos:column="13">tmpdir<pos:position pos:line="174" pos:column="19"/></name> <operator pos:line="174" pos:column="20">&amp;&amp;<pos:position pos:line="174" pos:column="30"/></operator> <call><name pos:line="174" pos:column="23">strlen<pos:position pos:line="174" pos:column="29"/></name><argument_list pos:line="174" pos:column="29">(<argument><expr><name pos:line="174" pos:column="30">tmpdir<pos:position pos:line="174" pos:column="36"/></name></expr></argument>)<pos:position pos:line="174" pos:column="37"/></argument_list></call> <operator pos:line="174" pos:column="38">&gt;=<pos:position pos:line="174" pos:column="43"/></operator> <name pos:line="174" pos:column="41">MAXPATHLEN<pos:position pos:line="174" pos:column="51"/></name> <operator pos:line="174" pos:column="52">-<pos:position pos:line="174" pos:column="53"/></operator> <literal type="number" pos:line="174" pos:column="54">10<pos:position pos:line="174" pos:column="56"/></literal></expr>)<pos:position pos:line="174" pos:column="57"/></condition><then pos:line="174" pos:column="57"> <block pos:line="174" pos:column="58">{
		<expr_stmt><expr><call><name pos:line="175" pos:column="17">rprintf<pos:position pos:line="175" pos:column="24"/></name><argument_list pos:line="175" pos:column="24">(<argument><expr><name pos:line="175" pos:column="25">FERROR<pos:position pos:line="175" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="175" pos:column="33">"the --temp-dir path is WAY too long.\n"<pos:position pos:line="175" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="175" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="175" pos:column="75"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="176" pos:column="17">exit_cleanup<pos:position pos:line="176" pos:column="29"/></name><argument_list pos:line="176" pos:column="29">(<argument><expr><name pos:line="176" pos:column="30">RERR_SYNTAX<pos:position pos:line="176" pos:column="41"/></name></expr></argument>)<pos:position pos:line="176" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="176" pos:column="43"/></expr_stmt>
	}<pos:position pos:line="177" pos:column="10"/></block></then></if>

	<if pos:line="179" pos:column="9">if <condition pos:line="179" pos:column="12">(<expr><name pos:line="179" pos:column="13">do_compression<pos:position pos:line="179" pos:column="27"/></name> <operator pos:line="179" pos:column="28">&amp;&amp;<pos:position pos:line="179" pos:column="38"/></operator> <operator pos:line="179" pos:column="31">(<pos:position pos:line="179" pos:column="32"/></operator><name pos:line="179" pos:column="32">write_batch<pos:position pos:line="179" pos:column="43"/></name> <operator pos:line="179" pos:column="44">||<pos:position pos:line="179" pos:column="46"/></operator> <name pos:line="179" pos:column="47">read_batch<pos:position pos:line="179" pos:column="57"/></name><operator pos:line="179" pos:column="57">)<pos:position pos:line="179" pos:column="58"/></operator></expr>)<pos:position pos:line="179" pos:column="59"/></condition><then pos:line="179" pos:column="59"> <block pos:line="179" pos:column="60">{
		<expr_stmt><expr><call><name pos:line="180" pos:column="17">rprintf<pos:position pos:line="180" pos:column="24"/></name><argument_list pos:line="180" pos:column="24">(<argument><expr><name pos:line="180" pos:column="25">FERROR<pos:position pos:line="180" pos:column="31"/></name></expr></argument>,
			<argument><expr><literal type="string" pos:line="181" pos:column="25">"compress can not be used with write-batch or read-batch\n"<pos:position pos:line="181" pos:column="84"/></literal></expr></argument>)<pos:position pos:line="181" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="181" pos:column="86"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="182" pos:column="17">exit_cleanup<pos:position pos:line="182" pos:column="29"/></name><argument_list pos:line="182" pos:column="29">(<argument><expr><name pos:line="182" pos:column="30">RERR_SYNTAX<pos:position pos:line="182" pos:column="41"/></name></expr></argument>)<pos:position pos:line="182" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="182" pos:column="43"/></expr_stmt>
	}<pos:position pos:line="183" pos:column="10"/></block></then></if>

	<if pos:line="185" pos:column="9">if <condition pos:line="185" pos:column="12">(<expr><name pos:line="185" pos:column="13">archive_mode<pos:position pos:line="185" pos:column="25"/></name></expr>)<pos:position pos:line="185" pos:column="26"/></condition><then pos:line="185" pos:column="26"> <block pos:line="185" pos:column="27">{
		<if pos:line="186" pos:column="17">if <condition pos:line="186" pos:column="20">(<expr><operator pos:line="186" pos:column="21">!<pos:position pos:line="186" pos:column="22"/></operator><name pos:line="186" pos:column="22">files_from<pos:position pos:line="186" pos:column="32"/></name></expr>)<pos:position pos:line="186" pos:column="33"/></condition><then pos:line="186" pos:column="33">
			<block type="pseudo"><expr_stmt><expr><name pos:line="187" pos:column="25">recurse<pos:position pos:line="187" pos:column="32"/></name> <operator pos:line="187" pos:column="33">=<pos:position pos:line="187" pos:column="34"/></operator> <literal type="number" pos:line="187" pos:column="35">1<pos:position pos:line="187" pos:column="36"/></literal></expr>;<pos:position pos:line="187" pos:column="37"/></expr_stmt></block></then></if>
<cpp:if pos:line="188" pos:column="1">#<cpp:directive pos:line="188" pos:column="2">if<pos:position pos:line="188" pos:column="4"/></cpp:directive> <expr><name pos:line="188" pos:column="5">SUPPORT_LINKS<pos:position pos:line="188" pos:column="18"/></name></expr></cpp:if>
		<expr_stmt><expr><name pos:line="189" pos:column="17">preserve_links<pos:position pos:line="189" pos:column="31"/></name> <operator pos:line="189" pos:column="32">=<pos:position pos:line="189" pos:column="33"/></operator> <literal type="number" pos:line="189" pos:column="34">1<pos:position pos:line="189" pos:column="35"/></literal></expr>;<pos:position pos:line="189" pos:column="36"/></expr_stmt>
<cpp:endif pos:line="190" pos:column="1">#<cpp:directive pos:line="190" pos:column="2">endif<pos:position pos:line="190" pos:column="7"/></cpp:directive></cpp:endif>
		<expr_stmt><expr><name pos:line="191" pos:column="17">preserve_perms<pos:position pos:line="191" pos:column="31"/></name> <operator pos:line="191" pos:column="32">=<pos:position pos:line="191" pos:column="33"/></operator> <literal type="number" pos:line="191" pos:column="34">1<pos:position pos:line="191" pos:column="35"/></literal></expr>;<pos:position pos:line="191" pos:column="36"/></expr_stmt>
		<expr_stmt><expr><name pos:line="192" pos:column="17">preserve_times<pos:position pos:line="192" pos:column="31"/></name> <operator pos:line="192" pos:column="32">=<pos:position pos:line="192" pos:column="33"/></operator> <literal type="number" pos:line="192" pos:column="34">1<pos:position pos:line="192" pos:column="35"/></literal></expr>;<pos:position pos:line="192" pos:column="36"/></expr_stmt>
		<expr_stmt><expr><name pos:line="193" pos:column="17">preserve_gid<pos:position pos:line="193" pos:column="29"/></name> <operator pos:line="193" pos:column="30">=<pos:position pos:line="193" pos:column="31"/></operator> <literal type="number" pos:line="193" pos:column="32">1<pos:position pos:line="193" pos:column="33"/></literal></expr>;<pos:position pos:line="193" pos:column="34"/></expr_stmt>
		<expr_stmt><expr><name pos:line="194" pos:column="17">preserve_uid<pos:position pos:line="194" pos:column="29"/></name> <operator pos:line="194" pos:column="30">=<pos:position pos:line="194" pos:column="31"/></operator> <literal type="number" pos:line="194" pos:column="32">1<pos:position pos:line="194" pos:column="33"/></literal></expr>;<pos:position pos:line="194" pos:column="34"/></expr_stmt>
		<expr_stmt><expr><name pos:line="195" pos:column="17">preserve_devices<pos:position pos:line="195" pos:column="33"/></name> <operator pos:line="195" pos:column="34">=<pos:position pos:line="195" pos:column="35"/></operator> <literal type="number" pos:line="195" pos:column="36">1<pos:position pos:line="195" pos:column="37"/></literal></expr>;<pos:position pos:line="195" pos:column="38"/></expr_stmt>
	}<pos:position pos:line="196" pos:column="10"/></block></then></if>

	<if pos:line="198" pos:column="9">if <condition pos:line="198" pos:column="12">(<expr><name pos:line="198" pos:column="13">relative_paths<pos:position pos:line="198" pos:column="27"/></name> <operator pos:line="198" pos:column="28">&lt;<pos:position pos:line="198" pos:column="32"/></operator> <literal type="number" pos:line="198" pos:column="30">0<pos:position pos:line="198" pos:column="31"/></literal></expr>)<pos:position pos:line="198" pos:column="32"/></condition><then pos:line="198" pos:column="32">
		<block type="pseudo"><expr_stmt><expr><name pos:line="199" pos:column="17">relative_paths<pos:position pos:line="199" pos:column="31"/></name> <operator pos:line="199" pos:column="32">=<pos:position pos:line="199" pos:column="33"/></operator> <ternary><condition><expr><name pos:line="199" pos:column="34">files_from<pos:position pos:line="199" pos:column="44"/></name></expr>?<pos:position pos:line="199" pos:column="45"/></condition><then pos:line="199" pos:column="45"> <expr><literal type="number" pos:line="199" pos:column="46">1<pos:position pos:line="199" pos:column="47"/></literal></expr> <pos:position pos:line="199" pos:column="48"/></then><else pos:line="199" pos:column="48">: <expr><literal type="number" pos:line="199" pos:column="50">0<pos:position pos:line="199" pos:column="51"/></literal></expr></else></ternary></expr>;<pos:position pos:line="199" pos:column="52"/></expr_stmt></block></then></if>

	<expr_stmt><expr><operator pos:line="201" pos:column="9">*<pos:position pos:line="201" pos:column="10"/></operator><name pos:line="201" pos:column="10">argv<pos:position pos:line="201" pos:column="14"/></name> <operator pos:line="201" pos:column="15">=<pos:position pos:line="201" pos:column="16"/></operator> <call><name pos:line="201" pos:column="17">poptGetArgs<pos:position pos:line="201" pos:column="28"/></name><argument_list pos:line="201" pos:column="28">(<argument><expr><name pos:line="201" pos:column="29">pc<pos:position pos:line="201" pos:column="31"/></name></expr></argument>)<pos:position pos:line="201" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="201" pos:column="33"/></expr_stmt>
	<if pos:line="202" pos:column="9">if <condition pos:line="202" pos:column="12">(<expr><operator pos:line="202" pos:column="13">*<pos:position pos:line="202" pos:column="14"/></operator><name pos:line="202" pos:column="14">argv<pos:position pos:line="202" pos:column="18"/></name></expr>)<pos:position pos:line="202" pos:column="19"/></condition><then pos:line="202" pos:column="19">
		<block type="pseudo"><expr_stmt><expr><operator pos:line="203" pos:column="17">*<pos:position pos:line="203" pos:column="18"/></operator><name pos:line="203" pos:column="18">argc<pos:position pos:line="203" pos:column="22"/></name> <operator pos:line="203" pos:column="23">=<pos:position pos:line="203" pos:column="24"/></operator> <call><name pos:line="203" pos:column="25">count_args<pos:position pos:line="203" pos:column="35"/></name><argument_list pos:line="203" pos:column="35">(<argument><expr><operator pos:line="203" pos:column="36">*<pos:position pos:line="203" pos:column="37"/></operator><name pos:line="203" pos:column="37">argv<pos:position pos:line="203" pos:column="41"/></name></expr></argument>)<pos:position pos:line="203" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="203" pos:column="43"/></expr_stmt></block></then>
	<else pos:line="204" pos:column="9">else
		<block type="pseudo"><expr_stmt><expr><operator pos:line="205" pos:column="17">*<pos:position pos:line="205" pos:column="18"/></operator><name pos:line="205" pos:column="18">argc<pos:position pos:line="205" pos:column="22"/></name> <operator pos:line="205" pos:column="23">=<pos:position pos:line="205" pos:column="24"/></operator> <literal type="number" pos:line="205" pos:column="25">0<pos:position pos:line="205" pos:column="26"/></literal></expr>;<pos:position pos:line="205" pos:column="27"/></expr_stmt></block></else></if>

	<if pos:line="207" pos:column="9">if <condition pos:line="207" pos:column="12">(<expr><name pos:line="207" pos:column="13">sanitize_paths<pos:position pos:line="207" pos:column="27"/></name></expr>)<pos:position pos:line="207" pos:column="28"/></condition><then pos:line="207" pos:column="28"> <block pos:line="207" pos:column="29">{
		<decl_stmt><decl><type><name pos:line="208" pos:column="17">int<pos:position pos:line="208" pos:column="20"/></name></type> <name pos:line="208" pos:column="21">i<pos:position pos:line="208" pos:column="22"/></name></decl>;<pos:position pos:line="208" pos:column="23"/></decl_stmt>
		<for pos:line="209" pos:column="17">for <control pos:line="209" pos:column="21">(<init><expr><name pos:line="209" pos:column="22">i<pos:position pos:line="209" pos:column="23"/></name> <operator pos:line="209" pos:column="24">=<pos:position pos:line="209" pos:column="25"/></operator> <operator pos:line="209" pos:column="26">*<pos:position pos:line="209" pos:column="27"/></operator><name pos:line="209" pos:column="27">argc<pos:position pos:line="209" pos:column="31"/></name></expr>;<pos:position pos:line="209" pos:column="32"/></init> <condition><expr><name pos:line="209" pos:column="33">i<pos:position pos:line="209" pos:column="34"/></name><operator pos:line="209" pos:column="34">--<pos:position pos:line="209" pos:column="36"/></operator> <operator pos:line="209" pos:column="37">&gt;<pos:position pos:line="209" pos:column="41"/></operator> <literal type="number" pos:line="209" pos:column="39">0<pos:position pos:line="209" pos:column="40"/></literal></expr>;<pos:position pos:line="209" pos:column="41"/></condition> <incr/>)<pos:position pos:line="209" pos:column="43"/></control>
			<block type="pseudo"><expr_stmt><expr><operator pos:line="210" pos:column="25">(<pos:position pos:line="210" pos:column="26"/></operator><operator pos:line="210" pos:column="26">*<pos:position pos:line="210" pos:column="27"/></operator><name pos:line="210" pos:column="27">argv<pos:position pos:line="210" pos:column="31"/></name><operator pos:line="210" pos:column="31">)<pos:position pos:line="210" pos:column="32"/></operator><index pos:line="210" pos:column="32">[<expr><name pos:line="210" pos:column="33">i<pos:position pos:line="210" pos:column="34"/></name></expr>]<pos:position pos:line="210" pos:column="35"/></index> <operator pos:line="210" pos:column="36">=<pos:position pos:line="210" pos:column="37"/></operator> <call><name pos:line="210" pos:column="38">alloc_sanitize_path<pos:position pos:line="210" pos:column="57"/></name><argument_list pos:line="210" pos:column="57">(<argument><expr><operator pos:line="210" pos:column="58">(<pos:position pos:line="210" pos:column="59"/></operator><operator pos:line="210" pos:column="59">*<pos:position pos:line="210" pos:column="60"/></operator><name pos:line="210" pos:column="60">argv<pos:position pos:line="210" pos:column="64"/></name><operator pos:line="210" pos:column="64">)<pos:position pos:line="210" pos:column="65"/></operator><index pos:line="210" pos:column="65">[<expr><name pos:line="210" pos:column="66">i<pos:position pos:line="210" pos:column="67"/></name></expr>]<pos:position pos:line="210" pos:column="68"/></index></expr></argument>, <argument><expr><name pos:line="210" pos:column="70">NULL<pos:position pos:line="210" pos:column="74"/></name></expr></argument>)<pos:position pos:line="210" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="210" pos:column="76"/></expr_stmt></block></for>
		<if pos:line="211" pos:column="17">if <condition pos:line="211" pos:column="20">(<expr><name pos:line="211" pos:column="21">tmpdir<pos:position pos:line="211" pos:column="27"/></name></expr>)<pos:position pos:line="211" pos:column="28"/></condition><then pos:line="211" pos:column="28">
			<block type="pseudo"><expr_stmt><expr><name pos:line="212" pos:column="25">tmpdir<pos:position pos:line="212" pos:column="31"/></name> <operator pos:line="212" pos:column="32">=<pos:position pos:line="212" pos:column="33"/></operator> <call><name pos:line="212" pos:column="34">alloc_sanitize_path<pos:position pos:line="212" pos:column="53"/></name><argument_list pos:line="212" pos:column="53">(<argument><expr><name pos:line="212" pos:column="54">tmpdir<pos:position pos:line="212" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="212" pos:column="62">curr_dir<pos:position pos:line="212" pos:column="70"/></name></expr></argument>)<pos:position pos:line="212" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="212" pos:column="72"/></expr_stmt></block></then></if>
		<if pos:line="213" pos:column="17">if <condition pos:line="213" pos:column="20">(<expr><name pos:line="213" pos:column="21">compare_dest<pos:position pos:line="213" pos:column="33"/></name></expr>)<pos:position pos:line="213" pos:column="34"/></condition><then pos:line="213" pos:column="34">
			<block type="pseudo"><expr_stmt><expr><name pos:line="214" pos:column="25">compare_dest<pos:position pos:line="214" pos:column="37"/></name> <operator pos:line="214" pos:column="38">=<pos:position pos:line="214" pos:column="39"/></operator> <call><name pos:line="214" pos:column="40">alloc_sanitize_path<pos:position pos:line="214" pos:column="59"/></name><argument_list pos:line="214" pos:column="59">(<argument><expr><name pos:line="214" pos:column="60">compare_dest<pos:position pos:line="214" pos:column="72"/></name></expr></argument>, <argument><expr><name pos:line="214" pos:column="74">curr_dir<pos:position pos:line="214" pos:column="82"/></name></expr></argument>)<pos:position pos:line="214" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="214" pos:column="84"/></expr_stmt></block></then></if>
		<if pos:line="215" pos:column="17">if <condition pos:line="215" pos:column="20">(<expr><name pos:line="215" pos:column="21">backup_dir<pos:position pos:line="215" pos:column="31"/></name></expr>)<pos:position pos:line="215" pos:column="32"/></condition><then pos:line="215" pos:column="32">
			<block type="pseudo"><expr_stmt><expr><name pos:line="216" pos:column="25">backup_dir<pos:position pos:line="216" pos:column="35"/></name> <operator pos:line="216" pos:column="36">=<pos:position pos:line="216" pos:column="37"/></operator> <call><name pos:line="216" pos:column="38">alloc_sanitize_path<pos:position pos:line="216" pos:column="57"/></name><argument_list pos:line="216" pos:column="57">(<argument><expr><name pos:line="216" pos:column="58">backup_dir<pos:position pos:line="216" pos:column="68"/></name></expr></argument>, <argument><expr><name pos:line="216" pos:column="70">curr_dir<pos:position pos:line="216" pos:column="78"/></name></expr></argument>)<pos:position pos:line="216" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="216" pos:column="80"/></expr_stmt></block></then></if>
		<if pos:line="217" pos:column="17">if <condition pos:line="217" pos:column="20">(<expr><name pos:line="217" pos:column="21">files_from<pos:position pos:line="217" pos:column="31"/></name></expr>)<pos:position pos:line="217" pos:column="32"/></condition><then pos:line="217" pos:column="32">
			<block type="pseudo"><expr_stmt><expr><name pos:line="218" pos:column="25">files_from<pos:position pos:line="218" pos:column="35"/></name> <operator pos:line="218" pos:column="36">=<pos:position pos:line="218" pos:column="37"/></operator> <call><name pos:line="218" pos:column="38">alloc_sanitize_path<pos:position pos:line="218" pos:column="57"/></name><argument_list pos:line="218" pos:column="57">(<argument><expr><name pos:line="218" pos:column="58">files_from<pos:position pos:line="218" pos:column="68"/></name></expr></argument>, <argument><expr><name pos:line="218" pos:column="70">curr_dir<pos:position pos:line="218" pos:column="78"/></name></expr></argument>)<pos:position pos:line="218" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="218" pos:column="80"/></expr_stmt></block></then></if>
	}<pos:position pos:line="219" pos:column="10"/></block></then></if>

	<if pos:line="221" pos:column="9">if <condition pos:line="221" pos:column="12">(<expr><name pos:line="221" pos:column="13">daemon_opt<pos:position pos:line="221" pos:column="23"/></name></expr>)<pos:position pos:line="221" pos:column="24"/></condition><then pos:line="221" pos:column="24"> <block pos:line="221" pos:column="25">{
		<expr_stmt><expr><name pos:line="222" pos:column="17">daemon_opt<pos:position pos:line="222" pos:column="27"/></name> <operator pos:line="222" pos:column="28">=<pos:position pos:line="222" pos:column="29"/></operator> <literal type="number" pos:line="222" pos:column="30">0<pos:position pos:line="222" pos:column="31"/></literal></expr>;<pos:position pos:line="222" pos:column="32"/></expr_stmt>
		<expr_stmt><expr><name pos:line="223" pos:column="17">am_daemon<pos:position pos:line="223" pos:column="26"/></name> <operator pos:line="223" pos:column="27">=<pos:position pos:line="223" pos:column="28"/></operator> <literal type="number" pos:line="223" pos:column="29">1<pos:position pos:line="223" pos:column="30"/></literal></expr>;<pos:position pos:line="223" pos:column="31"/></expr_stmt>
		<return pos:line="224" pos:column="17">return <expr><literal type="number" pos:line="224" pos:column="24">1<pos:position pos:line="224" pos:column="25"/></literal></expr>;<pos:position pos:line="224" pos:column="26"/></return>
	}<pos:position pos:line="225" pos:column="10"/></block></then></if>

	<if pos:line="227" pos:column="9">if <condition pos:line="227" pos:column="12">(<expr><operator pos:line="227" pos:column="13">!<pos:position pos:line="227" pos:column="14"/></operator><name pos:line="227" pos:column="14">backup_suffix<pos:position pos:line="227" pos:column="27"/></name></expr>)<pos:position pos:line="227" pos:column="28"/></condition><then pos:line="227" pos:column="28">
		<block type="pseudo"><expr_stmt><expr><name pos:line="228" pos:column="17">backup_suffix<pos:position pos:line="228" pos:column="30"/></name> <operator pos:line="228" pos:column="31">=<pos:position pos:line="228" pos:column="32"/></operator> <ternary><condition><expr><name pos:line="228" pos:column="33">backup_dir<pos:position pos:line="228" pos:column="43"/></name></expr> ?<pos:position pos:line="228" pos:column="45"/></condition><then pos:line="228" pos:column="45"> <expr><literal type="string" pos:line="228" pos:column="46">""<pos:position pos:line="228" pos:column="48"/></literal></expr> <pos:position pos:line="228" pos:column="49"/></then><else pos:line="228" pos:column="49">: <expr><name pos:line="228" pos:column="51">BACKUP_SUFFIX<pos:position pos:line="228" pos:column="64"/></name></expr></else></ternary></expr>;<pos:position pos:line="228" pos:column="65"/></expr_stmt></block></then></if>
	<expr_stmt><expr><name pos:line="229" pos:column="9">backup_suffix_len<pos:position pos:line="229" pos:column="26"/></name> <operator pos:line="229" pos:column="27">=<pos:position pos:line="229" pos:column="28"/></operator> <call><name pos:line="229" pos:column="29">strlen<pos:position pos:line="229" pos:column="35"/></name><argument_list pos:line="229" pos:column="35">(<argument><expr><name pos:line="229" pos:column="36">backup_suffix<pos:position pos:line="229" pos:column="49"/></name></expr></argument>)<pos:position pos:line="229" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="229" pos:column="51"/></expr_stmt>
	<if pos:line="230" pos:column="9">if <condition pos:line="230" pos:column="12">(<expr><call><name pos:line="230" pos:column="13">strchr<pos:position pos:line="230" pos:column="19"/></name><argument_list pos:line="230" pos:column="19">(<argument><expr><name pos:line="230" pos:column="20">backup_suffix<pos:position pos:line="230" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="230" pos:column="35">'/'<pos:position pos:line="230" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="230" pos:column="39"/></argument_list></call> <operator pos:line="230" pos:column="40">!=<pos:position pos:line="230" pos:column="42"/></operator> <name pos:line="230" pos:column="43">NULL<pos:position pos:line="230" pos:column="47"/></name></expr>)<pos:position pos:line="230" pos:column="48"/></condition><then pos:line="230" pos:column="48"> <block pos:line="230" pos:column="49">{
		<expr_stmt><expr><call><name pos:line="231" pos:column="17">rprintf<pos:position pos:line="231" pos:column="24"/></name><argument_list pos:line="231" pos:column="24">(<argument><expr><name pos:line="231" pos:column="25">FERROR<pos:position pos:line="231" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="231" pos:column="33">"--suffix cannot contain slashes: %s\n"<pos:position pos:line="231" pos:column="72"/></literal></expr></argument>,
			<argument><expr><name pos:line="232" pos:column="25">backup_suffix<pos:position pos:line="232" pos:column="38"/></name></expr></argument>)<pos:position pos:line="232" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="232" pos:column="40"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="233" pos:column="17">exit_cleanup<pos:position pos:line="233" pos:column="29"/></name><argument_list pos:line="233" pos:column="29">(<argument><expr><name pos:line="233" pos:column="30">RERR_SYNTAX<pos:position pos:line="233" pos:column="41"/></name></expr></argument>)<pos:position pos:line="233" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="233" pos:column="43"/></expr_stmt>
	}<pos:position pos:line="234" pos:column="10"/></block></then></if>
	<if pos:line="235" pos:column="9">if <condition pos:line="235" pos:column="12">(<expr><name pos:line="235" pos:column="13">backup_dir<pos:position pos:line="235" pos:column="23"/></name></expr>)<pos:position pos:line="235" pos:column="24"/></condition><then pos:line="235" pos:column="24"> <block pos:line="235" pos:column="25">{
		<expr_stmt><expr><name pos:line="236" pos:column="17">backup_dir_len<pos:position pos:line="236" pos:column="31"/></name> <operator pos:line="236" pos:column="32">=<pos:position pos:line="236" pos:column="33"/></operator> <call><name pos:line="236" pos:column="34">strlcpy<pos:position pos:line="236" pos:column="41"/></name><argument_list pos:line="236" pos:column="41">(<argument><expr><name pos:line="236" pos:column="42">backup_dir_buf<pos:position pos:line="236" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="236" pos:column="58">backup_dir<pos:position pos:line="236" pos:column="68"/></name></expr></argument>, <argument><expr><sizeof pos:line="236" pos:column="70">sizeof <name pos:line="236" pos:column="77">backup_dir_buf<pos:position pos:line="236" pos:column="91"/></name></sizeof></expr></argument>)<pos:position pos:line="236" pos:column="92"/></argument_list></call></expr>;<pos:position pos:line="236" pos:column="93"/></expr_stmt>
		<expr_stmt><expr><name pos:line="237" pos:column="17">backup_dir_remainder<pos:position pos:line="237" pos:column="37"/></name> <operator pos:line="237" pos:column="38">=<pos:position pos:line="237" pos:column="39"/></operator> <sizeof pos:line="237" pos:column="40">sizeof <name pos:line="237" pos:column="47">backup_dir_buf<pos:position pos:line="237" pos:column="61"/></name></sizeof> <operator pos:line="237" pos:column="62">-<pos:position pos:line="237" pos:column="63"/></operator> <name pos:line="237" pos:column="64">backup_dir_len<pos:position pos:line="237" pos:column="78"/></name></expr>;<pos:position pos:line="237" pos:column="79"/></expr_stmt>
		<if pos:line="238" pos:column="17">if <condition pos:line="238" pos:column="20">(<expr><name pos:line="238" pos:column="21">backup_dir_remainder<pos:position pos:line="238" pos:column="41"/></name> <operator pos:line="238" pos:column="42">&lt;<pos:position pos:line="238" pos:column="46"/></operator> <literal type="number" pos:line="238" pos:column="44">32<pos:position pos:line="238" pos:column="46"/></literal></expr>)<pos:position pos:line="238" pos:column="47"/></condition><then pos:line="238" pos:column="47"> <block pos:line="238" pos:column="48">{
			<expr_stmt><expr><call><name pos:line="239" pos:column="25">rprintf<pos:position pos:line="239" pos:column="32"/></name><argument_list pos:line="239" pos:column="32">(<argument><expr><name pos:line="239" pos:column="33">FERROR<pos:position pos:line="239" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="239" pos:column="41">"the --backup-dir path is WAY too long.\n"<pos:position pos:line="239" pos:column="83"/></literal></expr></argument>)<pos:position pos:line="239" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="239" pos:column="85"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="240" pos:column="25">exit_cleanup<pos:position pos:line="240" pos:column="37"/></name><argument_list pos:line="240" pos:column="37">(<argument><expr><name pos:line="240" pos:column="38">RERR_SYNTAX<pos:position pos:line="240" pos:column="49"/></name></expr></argument>)<pos:position pos:line="240" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="240" pos:column="51"/></expr_stmt>
		}<pos:position pos:line="241" pos:column="18"/></block></then></if>
		<if pos:line="242" pos:column="17">if <condition pos:line="242" pos:column="20">(<expr><name><name pos:line="242" pos:column="21">backup_dir_buf<pos:position pos:line="242" pos:column="35"/></name><index pos:line="242" pos:column="35">[<expr><name pos:line="242" pos:column="36">backup_dir_len<pos:position pos:line="242" pos:column="50"/></name> <operator pos:line="242" pos:column="51">-<pos:position pos:line="242" pos:column="52"/></operator> <literal type="number" pos:line="242" pos:column="53">1<pos:position pos:line="242" pos:column="54"/></literal></expr>]<pos:position pos:line="242" pos:column="55"/></index></name> <operator pos:line="242" pos:column="56">!=<pos:position pos:line="242" pos:column="58"/></operator> <literal type="char" pos:line="242" pos:column="59">'/'<pos:position pos:line="242" pos:column="62"/></literal></expr>)<pos:position pos:line="242" pos:column="63"/></condition><then pos:line="242" pos:column="63"> <block pos:line="242" pos:column="64">{
			<expr_stmt><expr><name><name pos:line="243" pos:column="25">backup_dir_buf<pos:position pos:line="243" pos:column="39"/></name><index pos:line="243" pos:column="39">[<expr><name pos:line="243" pos:column="40">backup_dir_len<pos:position pos:line="243" pos:column="54"/></name><operator pos:line="243" pos:column="54">++<pos:position pos:line="243" pos:column="56"/></operator></expr>]<pos:position pos:line="243" pos:column="57"/></index></name> <operator pos:line="243" pos:column="58">=<pos:position pos:line="243" pos:column="59"/></operator> <literal type="char" pos:line="243" pos:column="60">'/'<pos:position pos:line="243" pos:column="63"/></literal></expr>;<pos:position pos:line="243" pos:column="64"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="244" pos:column="25">backup_dir_buf<pos:position pos:line="244" pos:column="39"/></name><index pos:line="244" pos:column="39">[<expr><name pos:line="244" pos:column="40">backup_dir_len<pos:position pos:line="244" pos:column="54"/></name></expr>]<pos:position pos:line="244" pos:column="55"/></index></name> <operator pos:line="244" pos:column="56">=<pos:position pos:line="244" pos:column="57"/></operator> <literal type="char" pos:line="244" pos:column="58">'\0'<pos:position pos:line="244" pos:column="62"/></literal></expr>;<pos:position pos:line="244" pos:column="63"/></expr_stmt>
		}<pos:position pos:line="245" pos:column="18"/></block></then></if>
		<if pos:line="246" pos:column="17">if <condition pos:line="246" pos:column="20">(<expr><name pos:line="246" pos:column="21">verbose<pos:position pos:line="246" pos:column="28"/></name> <operator pos:line="246" pos:column="29">&gt;<pos:position pos:line="246" pos:column="33"/></operator> <literal type="number" pos:line="246" pos:column="31">1<pos:position pos:line="246" pos:column="32"/></literal> <operator pos:line="246" pos:column="33">&amp;&amp;<pos:position pos:line="246" pos:column="43"/></operator> <operator pos:line="246" pos:column="36">!<pos:position pos:line="246" pos:column="37"/></operator><name pos:line="246" pos:column="37">am_sender<pos:position pos:line="246" pos:column="46"/></name></expr>)<pos:position pos:line="246" pos:column="47"/></condition><then pos:line="246" pos:column="47">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="247" pos:column="25">rprintf<pos:position pos:line="247" pos:column="32"/></name><argument_list pos:line="247" pos:column="32">(<argument><expr><name pos:line="247" pos:column="33">FINFO<pos:position pos:line="247" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="247" pos:column="40">"backup_dir is %s\n"<pos:position pos:line="247" pos:column="60"/></literal></expr></argument>, <argument><expr><name pos:line="247" pos:column="62">backup_dir_buf<pos:position pos:line="247" pos:column="76"/></name></expr></argument>)<pos:position pos:line="247" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="247" pos:column="78"/></expr_stmt></block></then></if>
	}<pos:position pos:line="248" pos:column="10"/></block></then> <elseif pos:line="248" pos:column="11">else <if pos:line="248" pos:column="16">if <condition pos:line="248" pos:column="19">(<expr><operator pos:line="248" pos:column="20">!<pos:position pos:line="248" pos:column="21"/></operator><name pos:line="248" pos:column="21">backup_suffix_len<pos:position pos:line="248" pos:column="38"/></name> <operator pos:line="248" pos:column="39">&amp;&amp;<pos:position pos:line="248" pos:column="49"/></operator> <operator pos:line="248" pos:column="42">(<pos:position pos:line="248" pos:column="43"/></operator><operator pos:line="248" pos:column="43">!<pos:position pos:line="248" pos:column="44"/></operator><name pos:line="248" pos:column="44">am_server<pos:position pos:line="248" pos:column="53"/></name> <operator pos:line="248" pos:column="54">||<pos:position pos:line="248" pos:column="56"/></operator> <operator pos:line="248" pos:column="57">!<pos:position pos:line="248" pos:column="58"/></operator><name pos:line="248" pos:column="58">am_sender<pos:position pos:line="248" pos:column="67"/></name><operator pos:line="248" pos:column="67">)<pos:position pos:line="248" pos:column="68"/></operator></expr>)<pos:position pos:line="248" pos:column="69"/></condition><then pos:line="248" pos:column="69"> <block pos:line="248" pos:column="70">{
		<expr_stmt><expr><call><name pos:line="249" pos:column="17">rprintf<pos:position pos:line="249" pos:column="24"/></name><argument_list pos:line="249" pos:column="24">(<argument><expr><name pos:line="249" pos:column="25">FERROR<pos:position pos:line="249" pos:column="31"/></name></expr></argument>,
			<argument><expr><literal type="string" pos:line="250" pos:column="25">"--suffix cannot be a null string without --backup-dir\n"<pos:position pos:line="250" pos:column="82"/></literal></expr></argument>)<pos:position pos:line="250" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="250" pos:column="84"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="251" pos:column="17">exit_cleanup<pos:position pos:line="251" pos:column="29"/></name><argument_list pos:line="251" pos:column="29">(<argument><expr><name pos:line="251" pos:column="30">RERR_SYNTAX<pos:position pos:line="251" pos:column="41"/></name></expr></argument>)<pos:position pos:line="251" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="251" pos:column="43"/></expr_stmt>
	}<pos:position pos:line="252" pos:column="10"/></block></then></if></elseif></if>

	<if pos:line="254" pos:column="9">if <condition pos:line="254" pos:column="12">(<expr><name pos:line="254" pos:column="13">do_progress<pos:position pos:line="254" pos:column="24"/></name> <operator pos:line="254" pos:column="25">&amp;&amp;<pos:position pos:line="254" pos:column="35"/></operator> <operator pos:line="254" pos:column="28">!<pos:position pos:line="254" pos:column="29"/></operator><name pos:line="254" pos:column="29">verbose<pos:position pos:line="254" pos:column="36"/></name></expr>)<pos:position pos:line="254" pos:column="37"/></condition><then pos:line="254" pos:column="37">
		<block type="pseudo"><expr_stmt><expr><name pos:line="255" pos:column="17">verbose<pos:position pos:line="255" pos:column="24"/></name> <operator pos:line="255" pos:column="25">=<pos:position pos:line="255" pos:column="26"/></operator> <literal type="number" pos:line="255" pos:column="27">1<pos:position pos:line="255" pos:column="28"/></literal></expr>;<pos:position pos:line="255" pos:column="29"/></expr_stmt></block></then></if>

	<if pos:line="257" pos:column="9">if <condition pos:line="257" pos:column="12">(<expr><name pos:line="257" pos:column="13">files_from<pos:position pos:line="257" pos:column="23"/></name></expr>)<pos:position pos:line="257" pos:column="24"/></condition><then pos:line="257" pos:column="24"> <block pos:line="257" pos:column="25">{
		<decl_stmt><decl><type><name pos:line="258" pos:column="17">char<pos:position pos:line="258" pos:column="21"/></name> <modifier pos:line="258" pos:column="22">*<pos:position pos:line="258" pos:column="23"/></modifier></type><name pos:line="258" pos:column="23">colon<pos:position pos:line="258" pos:column="28"/></name></decl>;<pos:position pos:line="258" pos:column="29"/></decl_stmt>
		<if pos:line="259" pos:column="17">if <condition pos:line="259" pos:column="20">(<expr><operator pos:line="259" pos:column="21">*<pos:position pos:line="259" pos:column="22"/></operator><name pos:line="259" pos:column="22">argc<pos:position pos:line="259" pos:column="26"/></name> <operator pos:line="259" pos:column="27">!=<pos:position pos:line="259" pos:column="29"/></operator> <literal type="number" pos:line="259" pos:column="30">2<pos:position pos:line="259" pos:column="31"/></literal> <operator pos:line="259" pos:column="32">&amp;&amp;<pos:position pos:line="259" pos:column="42"/></operator> <operator pos:line="259" pos:column="35">!<pos:position pos:line="259" pos:column="36"/></operator><operator pos:line="259" pos:column="36">(<pos:position pos:line="259" pos:column="37"/></operator><name pos:line="259" pos:column="37">am_server<pos:position pos:line="259" pos:column="46"/></name> <operator pos:line="259" pos:column="47">&amp;&amp;<pos:position pos:line="259" pos:column="57"/></operator> <name pos:line="259" pos:column="50">am_sender<pos:position pos:line="259" pos:column="59"/></name> <operator pos:line="259" pos:column="60">&amp;&amp;<pos:position pos:line="259" pos:column="70"/></operator> <operator pos:line="259" pos:column="63">*<pos:position pos:line="259" pos:column="64"/></operator><name pos:line="259" pos:column="64">argc<pos:position pos:line="259" pos:column="68"/></name> <operator pos:line="259" pos:column="69">==<pos:position pos:line="259" pos:column="71"/></operator> <literal type="number" pos:line="259" pos:column="72">1<pos:position pos:line="259" pos:column="73"/></literal><operator pos:line="259" pos:column="73">)<pos:position pos:line="259" pos:column="74"/></operator></expr>)<pos:position pos:line="259" pos:column="75"/></condition><then pos:line="259" pos:column="75"> <block pos:line="259" pos:column="76">{
			<expr_stmt><expr><call><name pos:line="260" pos:column="25">usage<pos:position pos:line="260" pos:column="30"/></name><argument_list pos:line="260" pos:column="30">(<argument><expr><name pos:line="260" pos:column="31">FERROR<pos:position pos:line="260" pos:column="37"/></name></expr></argument>)<pos:position pos:line="260" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="260" pos:column="39"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="261" pos:column="25">exit_cleanup<pos:position pos:line="261" pos:column="37"/></name><argument_list pos:line="261" pos:column="37">(<argument><expr><name pos:line="261" pos:column="38">RERR_SYNTAX<pos:position pos:line="261" pos:column="49"/></name></expr></argument>)<pos:position pos:line="261" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="261" pos:column="51"/></expr_stmt>
		}<pos:position pos:line="262" pos:column="18"/></block></then></if>
		<if pos:line="263" pos:column="17">if <condition pos:line="263" pos:column="20">(<expr><call><name pos:line="263" pos:column="21">strcmp<pos:position pos:line="263" pos:column="27"/></name><argument_list pos:line="263" pos:column="27">(<argument><expr><name pos:line="263" pos:column="28">files_from<pos:position pos:line="263" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="263" pos:column="40">"-"<pos:position pos:line="263" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="263" pos:column="44"/></argument_list></call> <operator pos:line="263" pos:column="45">==<pos:position pos:line="263" pos:column="47"/></operator> <literal type="number" pos:line="263" pos:column="48">0<pos:position pos:line="263" pos:column="49"/></literal></expr>)<pos:position pos:line="263" pos:column="50"/></condition><then pos:line="263" pos:column="50"> <block pos:line="263" pos:column="51">{
			<expr_stmt><expr><name pos:line="264" pos:column="25">filesfrom_fd<pos:position pos:line="264" pos:column="37"/></name> <operator pos:line="264" pos:column="38">=<pos:position pos:line="264" pos:column="39"/></operator> <literal type="number" pos:line="264" pos:column="40">0<pos:position pos:line="264" pos:column="41"/></literal></expr>;<pos:position pos:line="264" pos:column="42"/></expr_stmt>
			<if pos:line="265" pos:column="25">if <condition pos:line="265" pos:column="28">(<expr><name pos:line="265" pos:column="29">am_server<pos:position pos:line="265" pos:column="38"/></name></expr>)<pos:position pos:line="265" pos:column="39"/></condition><then pos:line="265" pos:column="39">
				<block type="pseudo"><expr_stmt><expr><name pos:line="266" pos:column="33">remote_filesfrom_file<pos:position pos:line="266" pos:column="54"/></name> <operator pos:line="266" pos:column="55">=<pos:position pos:line="266" pos:column="56"/></operator> <literal type="string" pos:line="266" pos:column="57">"-"<pos:position pos:line="266" pos:column="60"/></literal></expr>;<pos:position pos:line="266" pos:column="61"/></expr_stmt></block></then></if>
		}<pos:position pos:line="267" pos:column="18"/></block></then>
		<elseif pos:line="268" pos:column="17">else <if pos:line="268" pos:column="22">if <condition pos:line="268" pos:column="25">(<expr><operator pos:line="268" pos:column="26">(<pos:position pos:line="268" pos:column="27"/></operator><name pos:line="268" pos:column="27">colon<pos:position pos:line="268" pos:column="32"/></name> <operator pos:line="268" pos:column="33">=<pos:position pos:line="268" pos:column="34"/></operator> <call><name pos:line="268" pos:column="35">find_colon<pos:position pos:line="268" pos:column="45"/></name><argument_list pos:line="268" pos:column="45">(<argument><expr><name pos:line="268" pos:column="46">files_from<pos:position pos:line="268" pos:column="56"/></name></expr></argument>)<pos:position pos:line="268" pos:column="57"/></argument_list></call><operator pos:line="268" pos:column="57">)<pos:position pos:line="268" pos:column="58"/></operator> <operator pos:line="268" pos:column="59">!=<pos:position pos:line="268" pos:column="61"/></operator> <literal type="number" pos:line="268" pos:column="62">0<pos:position pos:line="268" pos:column="63"/></literal></expr>)<pos:position pos:line="268" pos:column="64"/></condition><then pos:line="268" pos:column="64"> <block pos:line="268" pos:column="65">{
			<if pos:line="269" pos:column="25">if <condition pos:line="269" pos:column="28">(<expr><name pos:line="269" pos:column="29">am_server<pos:position pos:line="269" pos:column="38"/></name></expr>)<pos:position pos:line="269" pos:column="39"/></condition><then pos:line="269" pos:column="39"> <block pos:line="269" pos:column="40">{
				<expr_stmt><expr><call><name pos:line="270" pos:column="33">usage<pos:position pos:line="270" pos:column="38"/></name><argument_list pos:line="270" pos:column="38">(<argument><expr><name pos:line="270" pos:column="39">FERROR<pos:position pos:line="270" pos:column="45"/></name></expr></argument>)<pos:position pos:line="270" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="270" pos:column="47"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="271" pos:column="33">exit_cleanup<pos:position pos:line="271" pos:column="45"/></name><argument_list pos:line="271" pos:column="45">(<argument><expr><name pos:line="271" pos:column="46">RERR_SYNTAX<pos:position pos:line="271" pos:column="57"/></name></expr></argument>)<pos:position pos:line="271" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="271" pos:column="59"/></expr_stmt>
			}<pos:position pos:line="272" pos:column="26"/></block></then></if>
			<expr_stmt><expr><name pos:line="273" pos:column="25">remote_filesfrom_file<pos:position pos:line="273" pos:column="46"/></name> <operator pos:line="273" pos:column="47">=<pos:position pos:line="273" pos:column="48"/></operator> <name pos:line="273" pos:column="49">colon<pos:position pos:line="273" pos:column="54"/></name><operator pos:line="273" pos:column="54">+<pos:position pos:line="273" pos:column="55"/></operator><literal type="number" pos:line="273" pos:column="55">1<pos:position pos:line="273" pos:column="56"/></literal> <operator pos:line="273" pos:column="57">+<pos:position pos:line="273" pos:column="58"/></operator> <operator pos:line="273" pos:column="59">(<pos:position pos:line="273" pos:column="60"/></operator><name><name pos:line="273" pos:column="60">colon<pos:position pos:line="273" pos:column="65"/></name><index pos:line="273" pos:column="65">[<expr><literal type="number" pos:line="273" pos:column="66">1<pos:position pos:line="273" pos:column="67"/></literal></expr>]<pos:position pos:line="273" pos:column="68"/></index></name> <operator pos:line="273" pos:column="69">==<pos:position pos:line="273" pos:column="71"/></operator> <literal type="char" pos:line="273" pos:column="72">':'<pos:position pos:line="273" pos:column="75"/></literal><operator pos:line="273" pos:column="75">)<pos:position pos:line="273" pos:column="76"/></operator></expr>;<pos:position pos:line="273" pos:column="77"/></expr_stmt>
			<if pos:line="274" pos:column="25">if <condition pos:line="274" pos:column="28">(<expr><call><name pos:line="274" pos:column="29">strcmp<pos:position pos:line="274" pos:column="35"/></name><argument_list pos:line="274" pos:column="35">(<argument><expr><name pos:line="274" pos:column="36">remote_filesfrom_file<pos:position pos:line="274" pos:column="57"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="274" pos:column="59">"-"<pos:position pos:line="274" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="274" pos:column="63"/></argument_list></call> <operator pos:line="274" pos:column="64">==<pos:position pos:line="274" pos:column="66"/></operator> <literal type="number" pos:line="274" pos:column="67">0<pos:position pos:line="274" pos:column="68"/></literal></expr>)<pos:position pos:line="274" pos:column="69"/></condition><then pos:line="274" pos:column="69"> <block pos:line="274" pos:column="70">{
				<expr_stmt><expr><call><name pos:line="275" pos:column="33">rprintf<pos:position pos:line="275" pos:column="40"/></name><argument_list pos:line="275" pos:column="40">(<argument><expr><name pos:line="275" pos:column="41">FERROR<pos:position pos:line="275" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="275" pos:column="49">"Invalid --files-from remote filename\n"<pos:position pos:line="275" pos:column="89"/></literal></expr></argument>)<pos:position pos:line="275" pos:column="90"/></argument_list></call></expr>;<pos:position pos:line="275" pos:column="91"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="276" pos:column="33">exit_cleanup<pos:position pos:line="276" pos:column="45"/></name><argument_list pos:line="276" pos:column="45">(<argument><expr><name pos:line="276" pos:column="46">RERR_SYNTAX<pos:position pos:line="276" pos:column="57"/></name></expr></argument>)<pos:position pos:line="276" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="276" pos:column="59"/></expr_stmt>
			}<pos:position pos:line="277" pos:column="26"/></block></then></if>
		}<pos:position pos:line="278" pos:column="18"/></block></then></if></elseif> <else pos:line="278" pos:column="19">else <block pos:line="278" pos:column="24">{
			<expr_stmt><expr><name pos:line="279" pos:column="25">filesfrom_fd<pos:position pos:line="279" pos:column="37"/></name> <operator pos:line="279" pos:column="38">=<pos:position pos:line="279" pos:column="39"/></operator> <call><name pos:line="279" pos:column="40">open<pos:position pos:line="279" pos:column="44"/></name><argument_list pos:line="279" pos:column="44">(<argument><expr><name pos:line="279" pos:column="45">files_from<pos:position pos:line="279" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="279" pos:column="57">O_RDONLY<pos:position pos:line="279" pos:column="65"/></name><operator pos:line="279" pos:column="65">|<pos:position pos:line="279" pos:column="66"/></operator><name pos:line="279" pos:column="66">O_BINARY<pos:position pos:line="279" pos:column="74"/></name></expr></argument>)<pos:position pos:line="279" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="279" pos:column="76"/></expr_stmt>
			<if pos:line="280" pos:column="25">if <condition pos:line="280" pos:column="28">(<expr><name pos:line="280" pos:column="29">filesfrom_fd<pos:position pos:line="280" pos:column="41"/></name> <operator pos:line="280" pos:column="42">&lt;<pos:position pos:line="280" pos:column="46"/></operator> <literal type="number" pos:line="280" pos:column="44">0<pos:position pos:line="280" pos:column="45"/></literal></expr>)<pos:position pos:line="280" pos:column="46"/></condition><then pos:line="280" pos:column="46"> <block pos:line="280" pos:column="47">{
				<expr_stmt><expr><call><name pos:line="281" pos:column="33">rsyserr<pos:position pos:line="281" pos:column="40"/></name><argument_list pos:line="281" pos:column="40">(<argument><expr><name pos:line="281" pos:column="41">FERROR<pos:position pos:line="281" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="281" pos:column="49">errno<pos:position pos:line="281" pos:column="54"/></name></expr></argument>,
					<argument><expr><literal type="string" pos:line="282" pos:column="41">"failed to open files-from file %s"<pos:position pos:line="282" pos:column="76"/></literal></expr></argument>,
					<argument><expr><name pos:line="283" pos:column="41">files_from<pos:position pos:line="283" pos:column="51"/></name></expr></argument>)<pos:position pos:line="283" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="283" pos:column="53"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="284" pos:column="33">exit_cleanup<pos:position pos:line="284" pos:column="45"/></name><argument_list pos:line="284" pos:column="45">(<argument><expr><name pos:line="284" pos:column="46">RERR_FILEIO<pos:position pos:line="284" pos:column="57"/></name></expr></argument>)<pos:position pos:line="284" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="284" pos:column="59"/></expr_stmt>
			}<pos:position pos:line="285" pos:column="26"/></block></then></if>
		}<pos:position pos:line="286" pos:column="18"/></block></else></if>
	}<pos:position pos:line="287" pos:column="10"/></block></then></if>

	<return pos:line="289" pos:column="9">return <expr><literal type="number" pos:line="289" pos:column="16">1<pos:position pos:line="289" pos:column="17"/></literal></expr>;<pos:position pos:line="289" pos:column="18"/></return>
}<pos:position pos:line="290" pos:column="2"/></block></function></unit>
