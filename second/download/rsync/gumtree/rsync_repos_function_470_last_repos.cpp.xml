<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_470_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">OFF_T<pos:position pos:line="1" pos:column="6"/></name></type> <name pos:line="1" pos:column="7">do_lseek<pos:position pos:line="1" pos:column="15"/></name><parameter_list pos:line="1" pos:column="15">(<parameter><decl><type><name pos:line="1" pos:column="16">int<pos:position pos:line="1" pos:column="19"/></name></type> <name pos:line="1" pos:column="20">fd<pos:position pos:line="1" pos:column="22"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="24">OFF_T<pos:position pos:line="1" pos:column="29"/></name></type> <name pos:line="1" pos:column="30">offset<pos:position pos:line="1" pos:column="36"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="38">int<pos:position pos:line="1" pos:column="41"/></name></type> <name pos:line="1" pos:column="42">whence<pos:position pos:line="1" pos:column="48"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="49"/></parameter_list>
<block pos:line="2" pos:column="1">{
<cpp:ifdef pos:line="3" pos:column="1">#<cpp:directive pos:line="3" pos:column="2">ifdef<pos:position pos:line="3" pos:column="7"/></cpp:directive> <name pos:line="3" pos:column="8">HAVE_LSEEK64<pos:position pos:line="3" pos:column="20"/></name></cpp:ifdef>
<cpp:if pos:line="4" pos:column="1">#<cpp:directive pos:line="4" pos:column="2">if<pos:position pos:line="4" pos:column="4"/></cpp:directive> <expr><operator pos:line="4" pos:column="5">!<pos:position pos:line="4" pos:column="6"/></operator><name pos:line="4" pos:column="6">SIZEOF_OFF64_T<pos:position pos:line="4" pos:column="20"/></name></expr></cpp:if>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">OFF_T<pos:position pos:line="5" pos:column="14"/></name></type> <name pos:line="5" pos:column="15">lseek64<pos:position pos:line="5" pos:column="22"/></name><argument_list pos:line="5" pos:column="22">()<pos:position pos:line="5" pos:column="24"/></argument_list></decl>;<pos:position pos:line="5" pos:column="25"/></decl_stmt>
<cpp:else pos:line="6" pos:column="1">#<cpp:directive pos:line="6" pos:column="2">else<pos:position pos:line="6" pos:column="6"/></cpp:directive></cpp:else>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">off64_t<pos:position pos:line="7" pos:column="16"/></name></type> <name pos:line="7" pos:column="17">lseek64<pos:position pos:line="7" pos:column="24"/></name><argument_list pos:line="7" pos:column="24">()<pos:position pos:line="7" pos:column="26"/></argument_list></decl>;<pos:position pos:line="7" pos:column="27"/></decl_stmt>
<cpp:endif pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">endif<pos:position pos:line="8" pos:column="7"/></cpp:directive></cpp:endif>
	<return pos:line="9" pos:column="9">return <expr><call><name pos:line="9" pos:column="16">lseek64<pos:position pos:line="9" pos:column="23"/></name><argument_list pos:line="9" pos:column="23">(<argument><expr><name pos:line="9" pos:column="24">fd<pos:position pos:line="9" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="28">offset<pos:position pos:line="9" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="36">whence<pos:position pos:line="9" pos:column="42"/></name></expr></argument>)<pos:position pos:line="9" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="44"/></return>
<cpp:else pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">else<pos:position pos:line="10" pos:column="6"/></cpp:directive></cpp:else>
	<return pos:line="11" pos:column="9">return <expr><call><name pos:line="11" pos:column="16">lseek<pos:position pos:line="11" pos:column="21"/></name><argument_list pos:line="11" pos:column="21">(<argument><expr><name pos:line="11" pos:column="22">fd<pos:position pos:line="11" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="26">offset<pos:position pos:line="11" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="34">whence<pos:position pos:line="11" pos:column="40"/></name></expr></argument>)<pos:position pos:line="11" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="42"/></return>
<cpp:endif pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">endif<pos:position pos:line="12" pos:column="7"/></cpp:directive></cpp:endif>
}<pos:position pos:line="13" pos:column="2"/></block></function></unit>
