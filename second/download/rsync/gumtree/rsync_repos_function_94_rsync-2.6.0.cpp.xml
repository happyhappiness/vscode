<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_94_rsync-2.6.0.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">make_simple_backup<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><name pos:line="1" pos:column="31">char<pos:position pos:line="1" pos:column="35"/></name> <modifier pos:line="1" pos:column="36">*<pos:position pos:line="1" pos:column="37"/></modifier></type><name pos:line="1" pos:column="37">fname<pos:position pos:line="1" pos:column="42"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="43"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">char<pos:position pos:line="3" pos:column="13"/></name></type> <name><name pos:line="3" pos:column="14">fnamebak<pos:position pos:line="3" pos:column="22"/></name><index pos:line="3" pos:column="22">[<expr><name pos:line="3" pos:column="23">MAXPATHLEN<pos:position pos:line="3" pos:column="33"/></name></expr>]<pos:position pos:line="3" pos:column="34"/></index></name></decl>;<pos:position pos:line="3" pos:column="35"/></decl_stmt>
	<if pos:line="4" pos:column="9">if <condition pos:line="4" pos:column="12">(<expr><call><name pos:line="4" pos:column="13">strlen<pos:position pos:line="4" pos:column="19"/></name><argument_list pos:line="4" pos:column="19">(<argument><expr><name pos:line="4" pos:column="20">fname<pos:position pos:line="4" pos:column="25"/></name></expr></argument>)<pos:position pos:line="4" pos:column="26"/></argument_list></call> <operator pos:line="4" pos:column="27">+<pos:position pos:line="4" pos:column="28"/></operator> <name pos:line="4" pos:column="29">backup_suffix_len<pos:position pos:line="4" pos:column="46"/></name> <operator pos:line="4" pos:column="47">&gt;<pos:position pos:line="4" pos:column="51"/></operator> <name pos:line="4" pos:column="49">MAXPATHLEN<pos:position pos:line="4" pos:column="59"/></name><operator pos:line="4" pos:column="59">-<pos:position pos:line="4" pos:column="60"/></operator><literal type="number" pos:line="4" pos:column="60">1<pos:position pos:line="4" pos:column="61"/></literal></expr>)<pos:position pos:line="4" pos:column="62"/></condition><then pos:line="4" pos:column="62"> <block pos:line="4" pos:column="63">{
		<expr_stmt><expr><call><name pos:line="5" pos:column="17">rprintf<pos:position pos:line="5" pos:column="24"/></name><argument_list pos:line="5" pos:column="24">(<argument><expr><name pos:line="5" pos:column="25">FERROR<pos:position pos:line="5" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="5" pos:column="33">"backup filename too long\n"<pos:position pos:line="5" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="63"/></expr_stmt>
		<return pos:line="6" pos:column="17">return <expr><literal type="number" pos:line="6" pos:column="24">0<pos:position pos:line="6" pos:column="25"/></literal></expr>;<pos:position pos:line="6" pos:column="26"/></return>
	}<pos:position pos:line="7" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="9" pos:column="9">snprintf<pos:position pos:line="9" pos:column="17"/></name><argument_list pos:line="9" pos:column="17">(<argument><expr><name pos:line="9" pos:column="18">fnamebak<pos:position pos:line="9" pos:column="26"/></name></expr></argument>, <argument><expr><sizeof pos:line="9" pos:column="28">sizeof<argument_list pos:line="9" pos:column="34">(<argument><expr><name pos:line="9" pos:column="35">fnamebak<pos:position pos:line="9" pos:column="43"/></name></expr></argument>)<pos:position pos:line="9" pos:column="44"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="9" pos:column="46">"%s%s"<pos:position pos:line="9" pos:column="52"/></literal></expr></argument>, <argument><expr><name pos:line="9" pos:column="54">fname<pos:position pos:line="9" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="61">backup_suffix<pos:position pos:line="9" pos:column="74"/></name></expr></argument>)<pos:position pos:line="9" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="76"/></expr_stmt>
	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><call><name pos:line="10" pos:column="13">do_rename<pos:position pos:line="10" pos:column="22"/></name><argument_list pos:line="10" pos:column="22">(<argument><expr><name pos:line="10" pos:column="23">fname<pos:position pos:line="10" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="30">fnamebak<pos:position pos:line="10" pos:column="38"/></name></expr></argument>)<pos:position pos:line="10" pos:column="39"/></argument_list></call> <operator pos:line="10" pos:column="40">!=<pos:position pos:line="10" pos:column="42"/></operator> <literal type="number" pos:line="10" pos:column="43">0<pos:position pos:line="10" pos:column="44"/></literal></expr>)<pos:position pos:line="10" pos:column="45"/></condition><then pos:line="10" pos:column="45"> <block pos:line="10" pos:column="46">{
		<comment type="block" pos:line="11" pos:column="17">/* cygwin (at least version b19) reports EINVAL */</comment>
		<if pos:line="12" pos:column="17">if <condition pos:line="12" pos:column="20">(<expr><name pos:line="12" pos:column="21">errno<pos:position pos:line="12" pos:column="26"/></name> <operator pos:line="12" pos:column="27">!=<pos:position pos:line="12" pos:column="29"/></operator> <name pos:line="12" pos:column="30">ENOENT<pos:position pos:line="12" pos:column="36"/></name> <operator pos:line="12" pos:column="37">&amp;&amp;<pos:position pos:line="12" pos:column="47"/></operator> <name pos:line="12" pos:column="40">errno<pos:position pos:line="12" pos:column="45"/></name> <operator pos:line="12" pos:column="46">!=<pos:position pos:line="12" pos:column="48"/></operator> <name pos:line="12" pos:column="49">EINVAL<pos:position pos:line="12" pos:column="55"/></name></expr>)<pos:position pos:line="12" pos:column="56"/></condition><then pos:line="12" pos:column="56"> <block pos:line="12" pos:column="57">{
			<expr_stmt><expr><call><name pos:line="13" pos:column="25">rsyserr<pos:position pos:line="13" pos:column="32"/></name><argument_list pos:line="13" pos:column="32">(<argument><expr><name pos:line="13" pos:column="33">FERROR<pos:position pos:line="13" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="41">errno<pos:position pos:line="13" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="48">"rename %s to backup %s"<pos:position pos:line="13" pos:column="72"/></literal></expr></argument>, <argument><expr><name pos:line="13" pos:column="74">fname<pos:position pos:line="13" pos:column="79"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="81">fnamebak<pos:position pos:line="13" pos:column="89"/></name></expr></argument>)<pos:position pos:line="13" pos:column="90"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="91"/></expr_stmt>
			<return pos:line="14" pos:column="25">return <expr><literal type="number" pos:line="14" pos:column="32">0<pos:position pos:line="14" pos:column="33"/></literal></expr>;<pos:position pos:line="14" pos:column="34"/></return>
		}<pos:position pos:line="15" pos:column="18"/></block></then></if>
	}<pos:position pos:line="16" pos:column="10"/></block></then> <elseif pos:line="16" pos:column="11">else <if pos:line="16" pos:column="16">if <condition pos:line="16" pos:column="19">(<expr><name pos:line="16" pos:column="20">verbose<pos:position pos:line="16" pos:column="27"/></name> <operator pos:line="16" pos:column="28">&gt;<pos:position pos:line="16" pos:column="32"/></operator> <literal type="number" pos:line="16" pos:column="30">1<pos:position pos:line="16" pos:column="31"/></literal></expr>)<pos:position pos:line="16" pos:column="32"/></condition><then pos:line="16" pos:column="32"> <block pos:line="16" pos:column="33">{
		<expr_stmt><expr><call><name pos:line="17" pos:column="17">rprintf<pos:position pos:line="17" pos:column="24"/></name><argument_list pos:line="17" pos:column="24">(<argument><expr><name pos:line="17" pos:column="25">FINFO<pos:position pos:line="17" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="32">"backed up %s to %s\n"<pos:position pos:line="17" pos:column="54"/></literal></expr></argument>, <argument><expr><name pos:line="17" pos:column="56">fname<pos:position pos:line="17" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="63">fnamebak<pos:position pos:line="17" pos:column="71"/></name></expr></argument>)<pos:position pos:line="17" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="73"/></expr_stmt>
	}<pos:position pos:line="18" pos:column="10"/></block></then></if></elseif></if>
	<return pos:line="19" pos:column="9">return <expr><literal type="number" pos:line="19" pos:column="16">1<pos:position pos:line="19" pos:column="17"/></literal></expr>;<pos:position pos:line="19" pos:column="18"/></return>
}<pos:position pos:line="20" pos:column="2"/></block></function></unit>
