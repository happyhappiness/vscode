<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_function_777.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">char<pos:position pos:line="1" pos:column="5"/></name> <modifier pos:line="1" pos:column="6">*<pos:position pos:line="1" pos:column="7"/></modifier></type><name pos:line="1" pos:column="7">alloc_sanitize_path<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><specifier pos:line="1" pos:column="27">const<pos:position pos:line="1" pos:column="32"/></specifier> <name pos:line="1" pos:column="33">char<pos:position pos:line="1" pos:column="37"/></name> <modifier pos:line="1" pos:column="38">*<pos:position pos:line="1" pos:column="39"/></modifier></type><name pos:line="1" pos:column="39">path<pos:position pos:line="1" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="45">const<pos:position pos:line="1" pos:column="50"/></specifier> <name pos:line="1" pos:column="51">char<pos:position pos:line="1" pos:column="55"/></name> <modifier pos:line="1" pos:column="56">*<pos:position pos:line="1" pos:column="57"/></modifier></type><name pos:line="1" pos:column="57">rootdir<pos:position pos:line="1" pos:column="64"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="65"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">char<pos:position pos:line="3" pos:column="13"/></name> <modifier pos:line="3" pos:column="14">*<pos:position pos:line="3" pos:column="15"/></modifier></type><name pos:line="3" pos:column="15">buf<pos:position pos:line="3" pos:column="18"/></name></decl>;<pos:position pos:line="3" pos:column="19"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">rlen<pos:position pos:line="4" pos:column="17"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="19">plen<pos:position pos:line="4" pos:column="23"/></name> <init pos:line="4" pos:column="24">= <expr><call><name pos:line="4" pos:column="26">strlen<pos:position pos:line="4" pos:column="32"/></name><argument_list pos:line="4" pos:column="32">(<argument><expr><name pos:line="4" pos:column="33">path<pos:position pos:line="4" pos:column="37"/></name></expr></argument>)<pos:position pos:line="4" pos:column="38"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="39"/></decl_stmt>

	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><operator pos:line="6" pos:column="13">*<pos:position pos:line="6" pos:column="14"/></operator><name pos:line="6" pos:column="14">path<pos:position pos:line="6" pos:column="18"/></name> <operator pos:line="6" pos:column="19">==<pos:position pos:line="6" pos:column="21"/></operator> <literal type="char" pos:line="6" pos:column="22">'/'<pos:position pos:line="6" pos:column="25"/></literal> <operator pos:line="6" pos:column="26">&amp;&amp;<pos:position pos:line="6" pos:column="36"/></operator> <name pos:line="6" pos:column="29">rootdir<pos:position pos:line="6" pos:column="36"/></name></expr>)<pos:position pos:line="6" pos:column="37"/></condition><then pos:line="6" pos:column="37"> <block pos:line="6" pos:column="38">{
		<expr_stmt><expr><name pos:line="7" pos:column="17">rlen<pos:position pos:line="7" pos:column="21"/></name> <operator pos:line="7" pos:column="22">=<pos:position pos:line="7" pos:column="23"/></operator> <call><name pos:line="7" pos:column="24">strlen<pos:position pos:line="7" pos:column="30"/></name><argument_list pos:line="7" pos:column="30">(<argument><expr><name pos:line="7" pos:column="31">rootdir<pos:position pos:line="7" pos:column="38"/></name></expr></argument>)<pos:position pos:line="7" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="40"/></expr_stmt>
		<if pos:line="8" pos:column="17">if <condition pos:line="8" pos:column="20">(<expr><name pos:line="8" pos:column="21">rlen<pos:position pos:line="8" pos:column="25"/></name> <operator pos:line="8" pos:column="26">==<pos:position pos:line="8" pos:column="28"/></operator> <literal type="number" pos:line="8" pos:column="29">1<pos:position pos:line="8" pos:column="30"/></literal></expr>)<pos:position pos:line="8" pos:column="31"/></condition><then pos:line="8" pos:column="31">
			<block type="pseudo"><expr_stmt><expr><name pos:line="9" pos:column="25">path<pos:position pos:line="9" pos:column="29"/></name><operator pos:line="9" pos:column="29">++<pos:position pos:line="9" pos:column="31"/></operator></expr>;<pos:position pos:line="9" pos:column="32"/></expr_stmt></block></then></if>
	}<pos:position pos:line="10" pos:column="10"/></block></then> <else pos:line="10" pos:column="11">else
		<block type="pseudo"><expr_stmt><expr><name pos:line="11" pos:column="17">rlen<pos:position pos:line="11" pos:column="21"/></name> <operator pos:line="11" pos:column="22">=<pos:position pos:line="11" pos:column="23"/></operator> <literal type="number" pos:line="11" pos:column="24">0<pos:position pos:line="11" pos:column="25"/></literal></expr>;<pos:position pos:line="11" pos:column="26"/></expr_stmt></block></else></if>
	<if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><operator pos:line="12" pos:column="13">!<pos:position pos:line="12" pos:column="14"/></operator><operator pos:line="12" pos:column="14">(<pos:position pos:line="12" pos:column="15"/></operator><name pos:line="12" pos:column="15">buf<pos:position pos:line="12" pos:column="18"/></name> <operator pos:line="12" pos:column="19">=<pos:position pos:line="12" pos:column="20"/></operator> <call><name pos:line="12" pos:column="21">new_array<pos:position pos:line="12" pos:column="30"/></name><argument_list pos:line="12" pos:column="30">(<argument><expr><name pos:line="12" pos:column="31">char<pos:position pos:line="12" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="37">rlen<pos:position pos:line="12" pos:column="41"/></name> <operator pos:line="12" pos:column="42">+<pos:position pos:line="12" pos:column="43"/></operator> <name pos:line="12" pos:column="44">plen<pos:position pos:line="12" pos:column="48"/></name> <operator pos:line="12" pos:column="49">+<pos:position pos:line="12" pos:column="50"/></operator> <literal type="number" pos:line="12" pos:column="51">1<pos:position pos:line="12" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="53"/></argument_list></call><operator pos:line="12" pos:column="53">)<pos:position pos:line="12" pos:column="54"/></operator></expr>)<pos:position pos:line="12" pos:column="55"/></condition><then pos:line="12" pos:column="55">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="13" pos:column="17">out_of_memory<pos:position pos:line="13" pos:column="30"/></name><argument_list pos:line="13" pos:column="30">(<argument><expr><literal type="string" pos:line="13" pos:column="31">"alloc_sanitize_path"<pos:position pos:line="13" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="54"/></expr_stmt></block></then></if>
	<if pos:line="14" pos:column="9">if <condition pos:line="14" pos:column="12">(<expr><name pos:line="14" pos:column="13">rlen<pos:position pos:line="14" pos:column="17"/></name></expr>)<pos:position pos:line="14" pos:column="18"/></condition><then pos:line="14" pos:column="18">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="15" pos:column="17">memcpy<pos:position pos:line="15" pos:column="23"/></name><argument_list pos:line="15" pos:column="23">(<argument><expr><name pos:line="15" pos:column="24">buf<pos:position pos:line="15" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="29">rootdir<pos:position pos:line="15" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="38">rlen<pos:position pos:line="15" pos:column="42"/></name></expr></argument>)<pos:position pos:line="15" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="44"/></expr_stmt></block></then></if>
	<expr_stmt><expr><call><name pos:line="16" pos:column="9">memcpy<pos:position pos:line="16" pos:column="15"/></name><argument_list pos:line="16" pos:column="15">(<argument><expr><name pos:line="16" pos:column="16">buf<pos:position pos:line="16" pos:column="19"/></name> <operator pos:line="16" pos:column="20">+<pos:position pos:line="16" pos:column="21"/></operator> <name pos:line="16" pos:column="22">rlen<pos:position pos:line="16" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="28">path<pos:position pos:line="16" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="34">plen<pos:position pos:line="16" pos:column="38"/></name> <operator pos:line="16" pos:column="39">+<pos:position pos:line="16" pos:column="40"/></operator> <literal type="number" pos:line="16" pos:column="41">1<pos:position pos:line="16" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="44"/></expr_stmt>

	<if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><name pos:line="18" pos:column="13">rlen<pos:position pos:line="18" pos:column="17"/></name> <operator pos:line="18" pos:column="18">&gt;<pos:position pos:line="18" pos:column="22"/></operator> <literal type="number" pos:line="18" pos:column="20">1<pos:position pos:line="18" pos:column="21"/></literal></expr>)<pos:position pos:line="18" pos:column="22"/></condition><then pos:line="18" pos:column="22">
		<block type="pseudo"><expr_stmt><expr><name pos:line="19" pos:column="17">rlen<pos:position pos:line="19" pos:column="21"/></name><operator pos:line="19" pos:column="21">++<pos:position pos:line="19" pos:column="23"/></operator></expr>;<pos:position pos:line="19" pos:column="24"/></expr_stmt></block></then></if>
	<expr_stmt><expr><call><name pos:line="20" pos:column="9">sanitize_path<pos:position pos:line="20" pos:column="22"/></name><argument_list pos:line="20" pos:column="22">(<argument><expr><name pos:line="20" pos:column="23">buf<pos:position pos:line="20" pos:column="26"/></name> <operator pos:line="20" pos:column="27">+<pos:position pos:line="20" pos:column="28"/></operator> <name pos:line="20" pos:column="29">rlen<pos:position pos:line="20" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="35">NULL<pos:position pos:line="20" pos:column="39"/></name></expr></argument>)<pos:position pos:line="20" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="41"/></expr_stmt>
	<if pos:line="21" pos:column="9">if <condition pos:line="21" pos:column="12">(<expr><name pos:line="21" pos:column="13">rlen<pos:position pos:line="21" pos:column="17"/></name> <operator pos:line="21" pos:column="18">&amp;&amp;<pos:position pos:line="21" pos:column="28"/></operator> <name><name pos:line="21" pos:column="21">buf<pos:position pos:line="21" pos:column="24"/></name><index pos:line="21" pos:column="24">[<expr><name pos:line="21" pos:column="25">rlen<pos:position pos:line="21" pos:column="29"/></name></expr>]<pos:position pos:line="21" pos:column="30"/></index></name> <operator pos:line="21" pos:column="31">==<pos:position pos:line="21" pos:column="33"/></operator> <literal type="char" pos:line="21" pos:column="34">'.'<pos:position pos:line="21" pos:column="37"/></literal> <operator pos:line="21" pos:column="38">&amp;&amp;<pos:position pos:line="21" pos:column="48"/></operator> <name><name pos:line="21" pos:column="41">buf<pos:position pos:line="21" pos:column="44"/></name><index pos:line="21" pos:column="44">[<expr><name pos:line="21" pos:column="45">rlen<pos:position pos:line="21" pos:column="49"/></name><operator pos:line="21" pos:column="49">+<pos:position pos:line="21" pos:column="50"/></operator><literal type="number" pos:line="21" pos:column="50">1<pos:position pos:line="21" pos:column="51"/></literal></expr>]<pos:position pos:line="21" pos:column="52"/></index></name> <operator pos:line="21" pos:column="53">==<pos:position pos:line="21" pos:column="55"/></operator> <literal type="char" pos:line="21" pos:column="56">'\0'<pos:position pos:line="21" pos:column="60"/></literal></expr>)<pos:position pos:line="21" pos:column="61"/></condition><then pos:line="21" pos:column="61"> <block pos:line="21" pos:column="62">{
		<if pos:line="22" pos:column="17">if <condition pos:line="22" pos:column="20">(<expr><name pos:line="22" pos:column="21">rlen<pos:position pos:line="22" pos:column="25"/></name> <operator pos:line="22" pos:column="26">&gt;<pos:position pos:line="22" pos:column="30"/></operator> <literal type="number" pos:line="22" pos:column="28">1<pos:position pos:line="22" pos:column="29"/></literal></expr>)<pos:position pos:line="22" pos:column="30"/></condition><then pos:line="22" pos:column="30">
			<block type="pseudo"><expr_stmt><expr><name pos:line="23" pos:column="25">rlen<pos:position pos:line="23" pos:column="29"/></name><operator pos:line="23" pos:column="29">--<pos:position pos:line="23" pos:column="31"/></operator></expr>;<pos:position pos:line="23" pos:column="32"/></expr_stmt></block></then></if>
		<expr_stmt><expr><name><name pos:line="24" pos:column="17">buf<pos:position pos:line="24" pos:column="20"/></name><index pos:line="24" pos:column="20">[<expr><name pos:line="24" pos:column="21">rlen<pos:position pos:line="24" pos:column="25"/></name></expr>]<pos:position pos:line="24" pos:column="26"/></index></name> <operator pos:line="24" pos:column="27">=<pos:position pos:line="24" pos:column="28"/></operator> <literal type="char" pos:line="24" pos:column="29">'\0'<pos:position pos:line="24" pos:column="33"/></literal></expr>;<pos:position pos:line="24" pos:column="34"/></expr_stmt>
	}<pos:position pos:line="25" pos:column="10"/></block></then></if>

	<return pos:line="27" pos:column="9">return <expr><name pos:line="27" pos:column="16">buf<pos:position pos:line="27" pos:column="19"/></name></expr>;<pos:position pos:line="27" pos:column="20"/></return>
}<pos:position pos:line="28" pos:column="2"/></block></function></unit>
