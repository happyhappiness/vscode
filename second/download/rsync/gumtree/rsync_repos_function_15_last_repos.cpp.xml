<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_15_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">start_socket_client<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name pos:line="1" pos:column="25">char<pos:position pos:line="1" pos:column="29"/></name> <modifier pos:line="1" pos:column="30">*<pos:position pos:line="1" pos:column="31"/></modifier></type><name pos:line="1" pos:column="31">host<pos:position pos:line="1" pos:column="35"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="37">int<pos:position pos:line="1" pos:column="40"/></name></type> <name pos:line="1" pos:column="41">remote_argc<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="54">char<pos:position pos:line="1" pos:column="58"/></name> <modifier pos:line="1" pos:column="59">*<pos:position pos:line="1" pos:column="60"/></modifier></type><name><name pos:line="1" pos:column="60">remote_argv<pos:position pos:line="1" pos:column="71"/></name><index pos:line="1" pos:column="71">[]<pos:position pos:line="1" pos:column="73"/></index></name></decl></parameter>,
			<parameter><decl><type><name pos:line="2" pos:column="25">int<pos:position pos:line="2" pos:column="28"/></name></type> <name pos:line="2" pos:column="29">argc<pos:position pos:line="2" pos:column="33"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="35">char<pos:position pos:line="2" pos:column="39"/></name> <modifier pos:line="2" pos:column="40">*<pos:position pos:line="2" pos:column="41"/></modifier></type><name><name pos:line="2" pos:column="41">argv<pos:position pos:line="2" pos:column="45"/></name><index pos:line="2" pos:column="45">[]<pos:position pos:line="2" pos:column="47"/></index></name></decl></parameter>)<pos:position pos:line="2" pos:column="48"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">fd<pos:position pos:line="4" pos:column="15"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="17">ret<pos:position pos:line="4" pos:column="20"/></name></decl>;<pos:position pos:line="4" pos:column="21"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">char<pos:position pos:line="5" pos:column="13"/></name> <modifier pos:line="5" pos:column="14">*<pos:position pos:line="5" pos:column="15"/></modifier></type><name pos:line="5" pos:column="15">p<pos:position pos:line="5" pos:column="16"/></name></decl>, <modifier pos:line="5" pos:column="18">*<pos:position pos:line="5" pos:column="19"/></modifier><decl><type ref="prev"/><name pos:line="5" pos:column="19">user<pos:position pos:line="5" pos:column="23"/></name> <init pos:line="5" pos:column="24">= <expr><name pos:line="5" pos:column="26">NULL<pos:position pos:line="5" pos:column="30"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="31"/></decl_stmt>

	<comment type="block" pos:line="7" pos:column="9">/* This is redundant with code in start_inband_exchange(), but this
	 * short-circuits a problem in the client before we open a socket,
	 * and the extra check won't hurt. */</comment>
	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><operator pos:line="10" pos:column="13">*<pos:position pos:line="10" pos:column="14"/></operator><operator pos:line="10" pos:column="14">*<pos:position pos:line="10" pos:column="15"/></operator><name pos:line="10" pos:column="15">remote_argv<pos:position pos:line="10" pos:column="26"/></name> <operator pos:line="10" pos:column="27">==<pos:position pos:line="10" pos:column="29"/></operator> <literal type="char" pos:line="10" pos:column="30">'/'<pos:position pos:line="10" pos:column="33"/></literal></expr>)<pos:position pos:line="10" pos:column="34"/></condition><then pos:line="10" pos:column="34"> <block pos:line="10" pos:column="35">{
		<expr_stmt><expr><call><name pos:line="11" pos:column="17">rprintf<pos:position pos:line="11" pos:column="24"/></name><argument_list pos:line="11" pos:column="24">(<argument><expr><name pos:line="11" pos:column="25">FERROR<pos:position pos:line="11" pos:column="31"/></name></expr></argument>,
			<argument><expr><literal type="string" pos:line="12" pos:column="25">"ERROR: The remote path must start with a module name not a /\n"<pos:position pos:line="12" pos:column="89"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="90"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="91"/></expr_stmt>
		<return pos:line="13" pos:column="17">return <expr><operator pos:line="13" pos:column="24">-<pos:position pos:line="13" pos:column="25"/></operator><literal type="number" pos:line="13" pos:column="25">1<pos:position pos:line="13" pos:column="26"/></literal></expr>;<pos:position pos:line="13" pos:column="27"/></return>
	}<pos:position pos:line="14" pos:column="10"/></block></then></if>

	<if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><operator pos:line="16" pos:column="13">(<pos:position pos:line="16" pos:column="14"/></operator><name pos:line="16" pos:column="14">p<pos:position pos:line="16" pos:column="15"/></name> <operator pos:line="16" pos:column="16">=<pos:position pos:line="16" pos:column="17"/></operator> <call><name pos:line="16" pos:column="18">strrchr<pos:position pos:line="16" pos:column="25"/></name><argument_list pos:line="16" pos:column="25">(<argument><expr><name pos:line="16" pos:column="26">host<pos:position pos:line="16" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="16" pos:column="32">'@'<pos:position pos:line="16" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="36"/></argument_list></call><operator pos:line="16" pos:column="36">)<pos:position pos:line="16" pos:column="37"/></operator> <operator pos:line="16" pos:column="38">!=<pos:position pos:line="16" pos:column="40"/></operator> <name pos:line="16" pos:column="41">NULL<pos:position pos:line="16" pos:column="45"/></name></expr>)<pos:position pos:line="16" pos:column="46"/></condition><then pos:line="16" pos:column="46"> <block pos:line="16" pos:column="47">{
		<expr_stmt><expr><name pos:line="17" pos:column="17">user<pos:position pos:line="17" pos:column="21"/></name> <operator pos:line="17" pos:column="22">=<pos:position pos:line="17" pos:column="23"/></operator> <name pos:line="17" pos:column="24">host<pos:position pos:line="17" pos:column="28"/></name></expr>;<pos:position pos:line="17" pos:column="29"/></expr_stmt>
		<expr_stmt><expr><name pos:line="18" pos:column="17">host<pos:position pos:line="18" pos:column="21"/></name> <operator pos:line="18" pos:column="22">=<pos:position pos:line="18" pos:column="23"/></operator> <name pos:line="18" pos:column="24">p<pos:position pos:line="18" pos:column="25"/></name><operator pos:line="18" pos:column="25">+<pos:position pos:line="18" pos:column="26"/></operator><literal type="number" pos:line="18" pos:column="26">1<pos:position pos:line="18" pos:column="27"/></literal></expr>;<pos:position pos:line="18" pos:column="28"/></expr_stmt>
		<expr_stmt><expr><operator pos:line="19" pos:column="17">*<pos:position pos:line="19" pos:column="18"/></operator><name pos:line="19" pos:column="18">p<pos:position pos:line="19" pos:column="19"/></name> <operator pos:line="19" pos:column="20">=<pos:position pos:line="19" pos:column="21"/></operator> <literal type="char" pos:line="19" pos:column="22">'\0'<pos:position pos:line="19" pos:column="26"/></literal></expr>;<pos:position pos:line="19" pos:column="27"/></expr_stmt>
	}<pos:position pos:line="20" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="22" pos:column="9">fd<pos:position pos:line="22" pos:column="11"/></name> <operator pos:line="22" pos:column="12">=<pos:position pos:line="22" pos:column="13"/></operator> <call><name pos:line="22" pos:column="14">open_socket_out_wrapped<pos:position pos:line="22" pos:column="37"/></name><argument_list pos:line="22" pos:column="37">(<argument><expr><name pos:line="22" pos:column="38">host<pos:position pos:line="22" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="44">rsync_port<pos:position pos:line="22" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="56">bind_address<pos:position pos:line="22" pos:column="68"/></name></expr></argument>,
				     <argument><expr><name pos:line="23" pos:column="38">default_af_hint<pos:position pos:line="23" pos:column="53"/></name></expr></argument>)<pos:position pos:line="23" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="55"/></expr_stmt>
	<if pos:line="24" pos:column="9">if <condition pos:line="24" pos:column="12">(<expr><name pos:line="24" pos:column="13">fd<pos:position pos:line="24" pos:column="15"/></name> <operator pos:line="24" pos:column="16">==<pos:position pos:line="24" pos:column="18"/></operator> <operator pos:line="24" pos:column="19">-<pos:position pos:line="24" pos:column="20"/></operator><literal type="number" pos:line="24" pos:column="20">1<pos:position pos:line="24" pos:column="21"/></literal></expr>)<pos:position pos:line="24" pos:column="22"/></condition><then pos:line="24" pos:column="22">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="25" pos:column="17">exit_cleanup<pos:position pos:line="25" pos:column="29"/></name><argument_list pos:line="25" pos:column="29">(<argument><expr><name pos:line="25" pos:column="30">RERR_SOCKETIO<pos:position pos:line="25" pos:column="43"/></name></expr></argument>)<pos:position pos:line="25" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="45"/></expr_stmt></block></then></if>

<cpp:ifdef pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">ifdef<pos:position pos:line="27" pos:column="7"/></cpp:directive> <name pos:line="27" pos:column="8">ICONV_CONST<pos:position pos:line="27" pos:column="19"/></name></cpp:ifdef>
	<expr_stmt><expr><call><name pos:line="28" pos:column="9">setup_iconv<pos:position pos:line="28" pos:column="20"/></name><argument_list pos:line="28" pos:column="20">()<pos:position pos:line="28" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="23"/></expr_stmt>
<cpp:endif pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">endif<pos:position pos:line="29" pos:column="7"/></cpp:directive></cpp:endif>

	<expr_stmt><expr><name pos:line="31" pos:column="9">ret<pos:position pos:line="31" pos:column="12"/></name> <operator pos:line="31" pos:column="13">=<pos:position pos:line="31" pos:column="14"/></operator> <call><name pos:line="31" pos:column="15">start_inband_exchange<pos:position pos:line="31" pos:column="36"/></name><argument_list pos:line="31" pos:column="36">(<argument><expr><name pos:line="31" pos:column="37">fd<pos:position pos:line="31" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="41">fd<pos:position pos:line="31" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="45">user<pos:position pos:line="31" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="51">remote_argc<pos:position pos:line="31" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="64">remote_argv<pos:position pos:line="31" pos:column="75"/></name></expr></argument>)<pos:position pos:line="31" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="77"/></expr_stmt>

	<return pos:line="33" pos:column="9">return <expr><ternary><condition><expr><name pos:line="33" pos:column="16">ret<pos:position pos:line="33" pos:column="19"/></name></expr> ?<pos:position pos:line="33" pos:column="21"/></condition><then pos:line="33" pos:column="21"> <expr><name pos:line="33" pos:column="22">ret<pos:position pos:line="33" pos:column="25"/></name></expr> <pos:position pos:line="33" pos:column="26"/></then><else pos:line="33" pos:column="26">: <expr><call><name pos:line="33" pos:column="28">client_run<pos:position pos:line="33" pos:column="38"/></name><argument_list pos:line="33" pos:column="38">(<argument><expr><name pos:line="33" pos:column="39">fd<pos:position pos:line="33" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="43">fd<pos:position pos:line="33" pos:column="45"/></name></expr></argument>, <argument><expr><operator pos:line="33" pos:column="47">-<pos:position pos:line="33" pos:column="48"/></operator><literal type="number" pos:line="33" pos:column="48">1<pos:position pos:line="33" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="33" pos:column="51">argc<pos:position pos:line="33" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="57">argv<pos:position pos:line="33" pos:column="61"/></name></expr></argument>)<pos:position pos:line="33" pos:column="62"/></argument_list></call></expr></else></ternary></expr>;<pos:position pos:line="33" pos:column="63"/></return>
}<pos:position pos:line="34" pos:column="2"/></block></function></unit>
