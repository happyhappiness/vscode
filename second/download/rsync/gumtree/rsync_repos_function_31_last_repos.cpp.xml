<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_31_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">become_daemon<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><name pos:line="1" pos:column="27">void<pos:position pos:line="1" pos:column="31"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="32"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">i<pos:position pos:line="3" pos:column="14"/></name></decl>;<pos:position pos:line="3" pos:column="15"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">pid_t<pos:position pos:line="4" pos:column="14"/></name></type> <name pos:line="4" pos:column="15">pid<pos:position pos:line="4" pos:column="18"/></name> <init pos:line="4" pos:column="19">= <expr><call><name pos:line="4" pos:column="21">fork<pos:position pos:line="4" pos:column="25"/></name><argument_list pos:line="4" pos:column="25">()<pos:position pos:line="4" pos:column="27"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="28"/></decl_stmt>

	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><name pos:line="6" pos:column="13">pid<pos:position pos:line="6" pos:column="16"/></name></expr>)<pos:position pos:line="6" pos:column="17"/></condition><then pos:line="6" pos:column="17"> <block pos:line="6" pos:column="18">{
		<if pos:line="7" pos:column="17">if <condition pos:line="7" pos:column="20">(<expr><name pos:line="7" pos:column="21">pid<pos:position pos:line="7" pos:column="24"/></name> <operator pos:line="7" pos:column="25">&lt;<pos:position pos:line="7" pos:column="29"/></operator> <literal type="number" pos:line="7" pos:column="27">0<pos:position pos:line="7" pos:column="28"/></literal></expr>)<pos:position pos:line="7" pos:column="29"/></condition><then pos:line="7" pos:column="29"> <block pos:line="7" pos:column="30">{
			<expr_stmt><expr><call><name pos:line="8" pos:column="25">fprintf<pos:position pos:line="8" pos:column="32"/></name><argument_list pos:line="8" pos:column="32">(<argument><expr><name pos:line="8" pos:column="33">stderr<pos:position pos:line="8" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="8" pos:column="41">"failed to fork: %s\n"<pos:position pos:line="8" pos:column="63"/></literal></expr></argument>, <argument><expr><call><name pos:line="8" pos:column="65">strerror<pos:position pos:line="8" pos:column="73"/></name><argument_list pos:line="8" pos:column="73">(<argument><expr><name pos:line="8" pos:column="74">errno<pos:position pos:line="8" pos:column="79"/></name></expr></argument>)<pos:position pos:line="8" pos:column="80"/></argument_list></call></expr></argument>)<pos:position pos:line="8" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="82"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="9" pos:column="25">exit_cleanup<pos:position pos:line="9" pos:column="37"/></name><argument_list pos:line="9" pos:column="37">(<argument><expr><name pos:line="9" pos:column="38">RERR_FILEIO<pos:position pos:line="9" pos:column="49"/></name></expr></argument>)<pos:position pos:line="9" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="51"/></expr_stmt>
		}<pos:position pos:line="10" pos:column="18"/></block></then></if>
		<expr_stmt><expr><call><name pos:line="11" pos:column="17">_exit<pos:position pos:line="11" pos:column="22"/></name><argument_list pos:line="11" pos:column="22">(<argument><expr><literal type="number" pos:line="11" pos:column="23">0<pos:position pos:line="11" pos:column="24"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="26"/></expr_stmt>
	}<pos:position pos:line="12" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="14" pos:column="9">create_pid_file<pos:position pos:line="14" pos:column="24"/></name><argument_list pos:line="14" pos:column="24">()<pos:position pos:line="14" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="27"/></expr_stmt>

	<comment type="block" pos:line="16" pos:column="9">/* detach from the terminal */</comment>
<cpp:ifdef pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">ifdef<pos:position pos:line="17" pos:column="7"/></cpp:directive> <name pos:line="17" pos:column="8">HAVE_SETSID<pos:position pos:line="17" pos:column="19"/></name></cpp:ifdef>
	<expr_stmt><expr><call><name pos:line="18" pos:column="9">setsid<pos:position pos:line="18" pos:column="15"/></name><argument_list pos:line="18" pos:column="15">()<pos:position pos:line="18" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="18"/></expr_stmt>
<cpp:elif pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">elif<pos:position pos:line="19" pos:column="6"/></cpp:directive> <expr><name pos:line="19" pos:column="7">defined<pos:position pos:line="19" pos:column="14"/></name> <name pos:line="19" pos:column="15">TIOCNOTTY<pos:position pos:line="19" pos:column="24"/></name></expr></cpp:elif>
	<expr_stmt><expr><name pos:line="20" pos:column="9">i<pos:position pos:line="20" pos:column="10"/></name> <operator pos:line="20" pos:column="11">=<pos:position pos:line="20" pos:column="12"/></operator> <call><name pos:line="20" pos:column="13">open<pos:position pos:line="20" pos:column="17"/></name><argument_list pos:line="20" pos:column="17">(<argument><expr><literal type="string" pos:line="20" pos:column="18">"/dev/tty"<pos:position pos:line="20" pos:column="28"/></literal></expr></argument>, <argument><expr><name pos:line="20" pos:column="30">O_RDWR<pos:position pos:line="20" pos:column="36"/></name></expr></argument>)<pos:position pos:line="20" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="38"/></expr_stmt>
	<if pos:line="21" pos:column="9">if <condition pos:line="21" pos:column="12">(<expr><name pos:line="21" pos:column="13">i<pos:position pos:line="21" pos:column="14"/></name> <operator pos:line="21" pos:column="15">&gt;=<pos:position pos:line="21" pos:column="20"/></operator> <literal type="number" pos:line="21" pos:column="18">0<pos:position pos:line="21" pos:column="19"/></literal></expr>)<pos:position pos:line="21" pos:column="20"/></condition><then pos:line="21" pos:column="20"> <block pos:line="21" pos:column="21">{
		<expr_stmt><expr><call><name pos:line="22" pos:column="17">ioctl<pos:position pos:line="22" pos:column="22"/></name><argument_list pos:line="22" pos:column="22">(<argument><expr><name pos:line="22" pos:column="23">i<pos:position pos:line="22" pos:column="24"/></name></expr></argument>, <argument><expr><operator pos:line="22" pos:column="26">(<pos:position pos:line="22" pos:column="27"/></operator><name pos:line="22" pos:column="27">int<pos:position pos:line="22" pos:column="30"/></name><operator pos:line="22" pos:column="30">)<pos:position pos:line="22" pos:column="31"/></operator><name pos:line="22" pos:column="31">TIOCNOTTY<pos:position pos:line="22" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="22" pos:column="42">(<pos:position pos:line="22" pos:column="43"/></operator><name pos:line="22" pos:column="43">char<pos:position pos:line="22" pos:column="47"/></name> <operator pos:line="22" pos:column="48">*<pos:position pos:line="22" pos:column="49"/></operator><operator pos:line="22" pos:column="49">)<pos:position pos:line="22" pos:column="50"/></operator><literal type="number" pos:line="22" pos:column="50">0<pos:position pos:line="22" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="53"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="23" pos:column="17">close<pos:position pos:line="23" pos:column="22"/></name><argument_list pos:line="23" pos:column="22">(<argument><expr><name pos:line="23" pos:column="23">i<pos:position pos:line="23" pos:column="24"/></name></expr></argument>)<pos:position pos:line="23" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="26"/></expr_stmt>
	}<pos:position pos:line="24" pos:column="10"/></block></then></if>
<cpp:endif pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">endif<pos:position pos:line="25" pos:column="7"/></cpp:directive></cpp:endif>
	<comment type="block" pos:line="26" pos:column="9">/* make sure that stdin, stdout an stderr don't stuff things
	 * up (library functions, for example) */</comment>
	<for pos:line="28" pos:column="9">for <control pos:line="28" pos:column="13">(<init><expr><name pos:line="28" pos:column="14">i<pos:position pos:line="28" pos:column="15"/></name> <operator pos:line="28" pos:column="16">=<pos:position pos:line="28" pos:column="17"/></operator> <literal type="number" pos:line="28" pos:column="18">0<pos:position pos:line="28" pos:column="19"/></literal></expr>;<pos:position pos:line="28" pos:column="20"/></init> <condition><expr><name pos:line="28" pos:column="21">i<pos:position pos:line="28" pos:column="22"/></name> <operator pos:line="28" pos:column="23">&lt;<pos:position pos:line="28" pos:column="27"/></operator> <literal type="number" pos:line="28" pos:column="25">3<pos:position pos:line="28" pos:column="26"/></literal></expr>;<pos:position pos:line="28" pos:column="27"/></condition> <incr><expr><name pos:line="28" pos:column="28">i<pos:position pos:line="28" pos:column="29"/></name><operator pos:line="28" pos:column="29">++<pos:position pos:line="28" pos:column="31"/></operator></expr></incr>)<pos:position pos:line="28" pos:column="32"/></control> <block pos:line="28" pos:column="33">{
		<expr_stmt><expr><call><name pos:line="29" pos:column="17">close<pos:position pos:line="29" pos:column="22"/></name><argument_list pos:line="29" pos:column="22">(<argument><expr><name pos:line="29" pos:column="23">i<pos:position pos:line="29" pos:column="24"/></name></expr></argument>)<pos:position pos:line="29" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="26"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="30" pos:column="17">open<pos:position pos:line="30" pos:column="21"/></name><argument_list pos:line="30" pos:column="21">(<argument><expr><literal type="string" pos:line="30" pos:column="22">"/dev/null"<pos:position pos:line="30" pos:column="33"/></literal></expr></argument>, <argument><expr><name pos:line="30" pos:column="35">O_RDWR<pos:position pos:line="30" pos:column="41"/></name></expr></argument>)<pos:position pos:line="30" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="43"/></expr_stmt>
	}<pos:position pos:line="31" pos:column="10"/></block></for>
}<pos:position pos:line="32" pos:column="2"/></block></function></unit>
