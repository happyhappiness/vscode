<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_212_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">check_name<pos:position pos:line="1" pos:column="15"/></name><parameter_list pos:line="1" pos:column="15">(<parameter><decl><type><name pos:line="1" pos:column="16">int<pos:position pos:line="1" pos:column="19"/></name></type> <name pos:line="1" pos:column="20">fd<pos:position pos:line="1" pos:column="22"/></name></decl></parameter>,
	       <parameter><decl><type><specifier pos:line="2" pos:column="16">const<pos:position pos:line="2" pos:column="21"/></specifier> <name><name pos:line="2" pos:column="22">struct<pos:position pos:line="2" pos:column="28"/></name> <name pos:line="2" pos:column="29">sockaddr_storage<pos:position pos:line="2" pos:column="45"/></name></name> <modifier pos:line="2" pos:column="46">*<pos:position pos:line="2" pos:column="47"/></modifier></type><name pos:line="2" pos:column="47">ss<pos:position pos:line="2" pos:column="49"/></name></decl></parameter>,
	       <parameter><decl><type><name pos:line="3" pos:column="16">char<pos:position pos:line="3" pos:column="20"/></name> <modifier pos:line="3" pos:column="21">*<pos:position pos:line="3" pos:column="22"/></modifier></type><name pos:line="3" pos:column="22">name_buf<pos:position pos:line="3" pos:column="30"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="32">size_t<pos:position pos:line="3" pos:column="38"/></name></type> <name pos:line="3" pos:column="39">name_buf_size<pos:position pos:line="3" pos:column="52"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="53"/></parameter_list>
<block pos:line="4" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">addrinfo<pos:position pos:line="5" pos:column="24"/></name></name></type> <name pos:line="5" pos:column="25">hints<pos:position pos:line="5" pos:column="30"/></name></decl>, <modifier pos:line="5" pos:column="32">*<pos:position pos:line="5" pos:column="33"/></modifier><decl><type ref="prev"/><name pos:line="5" pos:column="33">res<pos:position pos:line="5" pos:column="36"/></name></decl>, <modifier pos:line="5" pos:column="38">*<pos:position pos:line="5" pos:column="39"/></modifier><decl><type ref="prev"/><name pos:line="5" pos:column="39">res0<pos:position pos:line="5" pos:column="43"/></name></decl>;<pos:position pos:line="5" pos:column="44"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">error<pos:position pos:line="6" pos:column="18"/></name></decl>;<pos:position pos:line="6" pos:column="19"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">int<pos:position pos:line="7" pos:column="12"/></name></type> <name pos:line="7" pos:column="13">ss_family<pos:position pos:line="7" pos:column="22"/></name> <init pos:line="7" pos:column="23">= <expr><call><name pos:line="7" pos:column="25">get_sockaddr_family<pos:position pos:line="7" pos:column="44"/></name><argument_list pos:line="7" pos:column="44">(<argument><expr><name pos:line="7" pos:column="45">ss<pos:position pos:line="7" pos:column="47"/></name></expr></argument>)<pos:position pos:line="7" pos:column="48"/></argument_list></call></expr></init></decl>;<pos:position pos:line="7" pos:column="49"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="9" pos:column="9">memset<pos:position pos:line="9" pos:column="15"/></name><argument_list pos:line="9" pos:column="15">(<argument><expr><operator pos:line="9" pos:column="16">&amp;<pos:position pos:line="9" pos:column="21"/></operator><name pos:line="9" pos:column="17">hints<pos:position pos:line="9" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="9" pos:column="24">0<pos:position pos:line="9" pos:column="25"/></literal></expr></argument>, <argument><expr><sizeof pos:line="9" pos:column="27">sizeof <name pos:line="9" pos:column="34">hints<pos:position pos:line="9" pos:column="39"/></name></sizeof></expr></argument>)<pos:position pos:line="9" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="41"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="10" pos:column="9">hints<pos:position pos:line="10" pos:column="14"/></name><operator pos:line="10" pos:column="14">.<pos:position pos:line="10" pos:column="15"/></operator><name pos:line="10" pos:column="15">ai_family<pos:position pos:line="10" pos:column="24"/></name></name> <operator pos:line="10" pos:column="25">=<pos:position pos:line="10" pos:column="26"/></operator> <name pos:line="10" pos:column="27">ss_family<pos:position pos:line="10" pos:column="36"/></name></expr>;<pos:position pos:line="10" pos:column="37"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="11" pos:column="9">hints<pos:position pos:line="11" pos:column="14"/></name><operator pos:line="11" pos:column="14">.<pos:position pos:line="11" pos:column="15"/></operator><name pos:line="11" pos:column="15">ai_flags<pos:position pos:line="11" pos:column="23"/></name></name> <operator pos:line="11" pos:column="24">=<pos:position pos:line="11" pos:column="25"/></operator> <name pos:line="11" pos:column="26">AI_CANONNAME<pos:position pos:line="11" pos:column="38"/></name></expr>;<pos:position pos:line="11" pos:column="39"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="12" pos:column="9">hints<pos:position pos:line="12" pos:column="14"/></name><operator pos:line="12" pos:column="14">.<pos:position pos:line="12" pos:column="15"/></operator><name pos:line="12" pos:column="15">ai_socktype<pos:position pos:line="12" pos:column="26"/></name></name> <operator pos:line="12" pos:column="27">=<pos:position pos:line="12" pos:column="28"/></operator> <name pos:line="12" pos:column="29">SOCK_STREAM<pos:position pos:line="12" pos:column="40"/></name></expr>;<pos:position pos:line="12" pos:column="41"/></expr_stmt>
	<expr_stmt><expr><name pos:line="13" pos:column="9">error<pos:position pos:line="13" pos:column="14"/></name> <operator pos:line="13" pos:column="15">=<pos:position pos:line="13" pos:column="16"/></operator> <call><name pos:line="13" pos:column="17">getaddrinfo<pos:position pos:line="13" pos:column="28"/></name><argument_list pos:line="13" pos:column="28">(<argument><expr><name pos:line="13" pos:column="29">name_buf<pos:position pos:line="13" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="39">NULL<pos:position pos:line="13" pos:column="43"/></name></expr></argument>, <argument><expr><operator pos:line="13" pos:column="45">&amp;<pos:position pos:line="13" pos:column="50"/></operator><name pos:line="13" pos:column="46">hints<pos:position pos:line="13" pos:column="51"/></name></expr></argument>, <argument><expr><operator pos:line="13" pos:column="53">&amp;<pos:position pos:line="13" pos:column="58"/></operator><name pos:line="13" pos:column="54">res0<pos:position pos:line="13" pos:column="58"/></name></expr></argument>)<pos:position pos:line="13" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="60"/></expr_stmt>
	<if pos:line="14" pos:column="9">if <condition pos:line="14" pos:column="12">(<expr><name pos:line="14" pos:column="13">error<pos:position pos:line="14" pos:column="18"/></name></expr>)<pos:position pos:line="14" pos:column="19"/></condition><then pos:line="14" pos:column="19"> <block pos:line="14" pos:column="20">{
		<expr_stmt><expr><call><name pos:line="15" pos:column="17">rprintf<pos:position pos:line="15" pos:column="24"/></name><argument_list pos:line="15" pos:column="24">(<argument><expr><name pos:line="15" pos:column="25">FLOG<pos:position pos:line="15" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="31">"forward name lookup for %s failed: %s\n"<pos:position pos:line="15" pos:column="72"/></literal></expr></argument>,
			<argument><expr><name pos:line="16" pos:column="25">name_buf<pos:position pos:line="16" pos:column="33"/></name></expr></argument>, <argument><expr><call><name pos:line="16" pos:column="35">gai_strerror<pos:position pos:line="16" pos:column="47"/></name><argument_list pos:line="16" pos:column="47">(<argument><expr><name pos:line="16" pos:column="48">error<pos:position pos:line="16" pos:column="53"/></name></expr></argument>)<pos:position pos:line="16" pos:column="54"/></argument_list></call></expr></argument>)<pos:position pos:line="16" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="56"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="17" pos:column="17">strlcpy<pos:position pos:line="17" pos:column="24"/></name><argument_list pos:line="17" pos:column="24">(<argument><expr><name pos:line="17" pos:column="25">name_buf<pos:position pos:line="17" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="35">default_name<pos:position pos:line="17" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="49">name_buf_size<pos:position pos:line="17" pos:column="62"/></name></expr></argument>)<pos:position pos:line="17" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="64"/></expr_stmt>
		<return pos:line="18" pos:column="17">return <expr><name pos:line="18" pos:column="24">error<pos:position pos:line="18" pos:column="29"/></name></expr>;<pos:position pos:line="18" pos:column="30"/></return>
	}<pos:position pos:line="19" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="21" pos:column="9">/* Given all these results, we expect that one of them will be
	 * the same as ss.  The comparison is a bit complicated. */</comment>
	<for pos:line="23" pos:column="9">for <control pos:line="23" pos:column="13">(<init><expr><name pos:line="23" pos:column="14">res<pos:position pos:line="23" pos:column="17"/></name> <operator pos:line="23" pos:column="18">=<pos:position pos:line="23" pos:column="19"/></operator> <name pos:line="23" pos:column="20">res0<pos:position pos:line="23" pos:column="24"/></name></expr>;<pos:position pos:line="23" pos:column="25"/></init> <condition><expr><name pos:line="23" pos:column="26">res<pos:position pos:line="23" pos:column="29"/></name></expr>;<pos:position pos:line="23" pos:column="30"/></condition> <incr><expr><name pos:line="23" pos:column="31">res<pos:position pos:line="23" pos:column="34"/></name> <operator pos:line="23" pos:column="35">=<pos:position pos:line="23" pos:column="36"/></operator> <name><name pos:line="23" pos:column="37">res<pos:position pos:line="23" pos:column="40"/></name><operator pos:line="23" pos:column="40">-&gt;<pos:position pos:line="23" pos:column="45"/></operator><name pos:line="23" pos:column="42">ai_next<pos:position pos:line="23" pos:column="49"/></name></name></expr></incr>)<pos:position pos:line="23" pos:column="50"/></control> <block pos:line="23" pos:column="51">{
		<if pos:line="24" pos:column="17">if <condition pos:line="24" pos:column="20">(<expr><operator pos:line="24" pos:column="21">!<pos:position pos:line="24" pos:column="22"/></operator><call><name pos:line="24" pos:column="22">compare_addrinfo_sockaddr<pos:position pos:line="24" pos:column="47"/></name><argument_list pos:line="24" pos:column="47">(<argument><expr><name pos:line="24" pos:column="48">res<pos:position pos:line="24" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="53">ss<pos:position pos:line="24" pos:column="55"/></name></expr></argument>)<pos:position pos:line="24" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="24" pos:column="57"/></condition><then pos:line="24" pos:column="57">
			<block type="pseudo"><break pos:line="25" pos:column="25">break;<pos:position pos:line="25" pos:column="31"/></break></block></then></if>	<comment type="block" pos:line="25" pos:column="33">/* OK, identical */</comment>
	}<pos:position pos:line="26" pos:column="10"/></block></for>

	<if pos:line="28" pos:column="9">if <condition pos:line="28" pos:column="12">(<expr><operator pos:line="28" pos:column="13">!<pos:position pos:line="28" pos:column="14"/></operator><name pos:line="28" pos:column="14">res0<pos:position pos:line="28" pos:column="18"/></name></expr>)<pos:position pos:line="28" pos:column="19"/></condition><then pos:line="28" pos:column="19"> <block pos:line="28" pos:column="20">{
		<comment type="block" pos:line="29" pos:column="17">/* We hit the end of the list without finding an
		 * address that was the same as ss. */</comment>
		<expr_stmt><expr><call><name pos:line="31" pos:column="17">rprintf<pos:position pos:line="31" pos:column="24"/></name><argument_list pos:line="31" pos:column="24">(<argument><expr><name pos:line="31" pos:column="25">FLOG<pos:position pos:line="31" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="31" pos:column="31">"no known address for \"%s\": "<pos:position pos:line="31" pos:column="62"/></literal>
			<literal type="string" pos:line="32" pos:column="25">"spoofed address?\n"<pos:position pos:line="32" pos:column="45"/></literal></expr></argument>, <argument><expr><name pos:line="32" pos:column="47">name_buf<pos:position pos:line="32" pos:column="55"/></name></expr></argument>)<pos:position pos:line="32" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="57"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="33" pos:column="17">strlcpy<pos:position pos:line="33" pos:column="24"/></name><argument_list pos:line="33" pos:column="24">(<argument><expr><name pos:line="33" pos:column="25">name_buf<pos:position pos:line="33" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="35">default_name<pos:position pos:line="33" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="49">name_buf_size<pos:position pos:line="33" pos:column="62"/></name></expr></argument>)<pos:position pos:line="33" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="64"/></expr_stmt>
	}<pos:position pos:line="34" pos:column="10"/></block></then> <elseif pos:line="34" pos:column="11">else <if pos:line="34" pos:column="16">if <condition pos:line="34" pos:column="19">(<expr><name pos:line="34" pos:column="20">res<pos:position pos:line="34" pos:column="23"/></name> <operator pos:line="34" pos:column="24">==<pos:position pos:line="34" pos:column="26"/></operator> <name pos:line="34" pos:column="27">NULL<pos:position pos:line="34" pos:column="31"/></name></expr>)<pos:position pos:line="34" pos:column="32"/></condition><then pos:line="34" pos:column="32"> <block pos:line="34" pos:column="33">{
		<comment type="block" pos:line="35" pos:column="17">/* We hit the end of the list without finding an
		 * address that was the same as ss. */</comment>
		<expr_stmt><expr><call><name pos:line="37" pos:column="17">rprintf<pos:position pos:line="37" pos:column="24"/></name><argument_list pos:line="37" pos:column="24">(<argument><expr><name pos:line="37" pos:column="25">FLOG<pos:position pos:line="37" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="37" pos:column="31">"%s is not a known address for \"%s\": "<pos:position pos:line="37" pos:column="71"/></literal>
			<literal type="string" pos:line="38" pos:column="25">"spoofed address?\n"<pos:position pos:line="38" pos:column="45"/></literal></expr></argument>, <argument><expr><call><name pos:line="38" pos:column="47">client_addr<pos:position pos:line="38" pos:column="58"/></name><argument_list pos:line="38" pos:column="58">(<argument><expr><name pos:line="38" pos:column="59">fd<pos:position pos:line="38" pos:column="61"/></name></expr></argument>)<pos:position pos:line="38" pos:column="62"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="38" pos:column="64">name_buf<pos:position pos:line="38" pos:column="72"/></name></expr></argument>)<pos:position pos:line="38" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="74"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="39" pos:column="17">strlcpy<pos:position pos:line="39" pos:column="24"/></name><argument_list pos:line="39" pos:column="24">(<argument><expr><name pos:line="39" pos:column="25">name_buf<pos:position pos:line="39" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="35">default_name<pos:position pos:line="39" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="49">name_buf_size<pos:position pos:line="39" pos:column="62"/></name></expr></argument>)<pos:position pos:line="39" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="64"/></expr_stmt>
	}<pos:position pos:line="40" pos:column="10"/></block></then></if></elseif></if>

	<expr_stmt><expr><call><name pos:line="42" pos:column="9">freeaddrinfo<pos:position pos:line="42" pos:column="21"/></name><argument_list pos:line="42" pos:column="21">(<argument><expr><name pos:line="42" pos:column="22">res0<pos:position pos:line="42" pos:column="26"/></name></expr></argument>)<pos:position pos:line="42" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="28"/></expr_stmt>
	<return pos:line="43" pos:column="9">return <expr><literal type="number" pos:line="43" pos:column="16">0<pos:position pos:line="43" pos:column="17"/></literal></expr>;<pos:position pos:line="43" pos:column="18"/></return>
}<pos:position pos:line="44" pos:column="2"/></block></function></unit>
