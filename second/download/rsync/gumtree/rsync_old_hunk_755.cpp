struct file_list *flist_new(int with_hlink, char *msg);
void flist_free(struct file_list *flist);
int f_name_cmp(struct file_struct *f1, struct file_struct *f2);
char *f_name_to(struct file_struct *f, char *fbuf);
char *f_name(struct file_struct *f);
void write_sum_head(int f, struct sum_struct *sum);
void recv_generator(char *fname, struct file_struct *file, int i, int f_out);
void generate_files(int f, struct file_list *flist, char *local_name);
void init_hard_links(struct file_list *flist);
int hard_link_check(struct file_struct *file, int skip);
void do_hard_links(void);
void set_msg_fd_in(int fd);
void set_msg_fd_out(int fd);
void send_msg(enum msgcode code, char *buf, int len);
int msg_list_push(int flush_it_all);
int get_redo_num(void);
void io_set_filesfrom_fds(int f_in, int f_out);
int read_filesfrom_line(int fd, char *fname);
int32 read_int(int f);
int64 read_longint(int f);
void read_buf(int f,char *buf,size_t len);
void read_sbuf(int f,char *buf,size_t len);
unsigned char read_byte(int f);
void io_start_buffering_out(int fd);
void io_start_buffering_in(int fd);
void io_flush(int flush_it_all);
void io_end_buffering(void);
void write_int(int f,int32 x);
void write_int_named(int f, int32 x, const char *phase);
void write_longint(int f, int64 x);
void write_buf(int f,char *buf,size_t len);
void write_byte(int f,unsigned char c);
int read_line(int f, char *buf, size_t maxlen);
void io_printf(int fd, const char *format, ...);
void io_start_multiplex_out(int fd);
void io_start_multiplex_in(int fd);
int io_multiplex_write(enum msgcode code, char *buf, size_t len);
void io_multiplexing_close(void);
char *lp_motd_file(void);
char *lp_log_file(void);
char *lp_pid_file(void);
char *lp_socket_options(void);
int lp_syslog_facility(void);
int lp_max_verbosity(void);
char *lp_name(int );
char *lp_comment(int );
char *lp_path(int );
char *lp_lock_file(int );
BOOL lp_read_only(int );
BOOL lp_list(int );
BOOL lp_use_chroot(int );
BOOL lp_transfer_logging(int );
BOOL lp_ignore_errors(int );
BOOL lp_ignore_nonreadable(int );
char *lp_uid(int );
