<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_391_rsync-2.6.7.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">do_server_recv<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name pos:line="1" pos:column="28">int<pos:position pos:line="1" pos:column="31"/></name></type> <name pos:line="1" pos:column="32">f_in<pos:position pos:line="1" pos:column="36"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="38">int<pos:position pos:line="1" pos:column="41"/></name></type> <name pos:line="1" pos:column="42">f_out<pos:position pos:line="1" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="49">int<pos:position pos:line="1" pos:column="52"/></name></type> <name pos:line="1" pos:column="53">argc<pos:position pos:line="1" pos:column="57"/></name></decl></parameter>,<parameter><decl><type><name pos:line="1" pos:column="58">char<pos:position pos:line="1" pos:column="62"/></name> <modifier pos:line="1" pos:column="63">*<pos:position pos:line="1" pos:column="64"/></modifier></type><name><name pos:line="1" pos:column="64">argv<pos:position pos:line="1" pos:column="68"/></name><index pos:line="1" pos:column="68">[]<pos:position pos:line="1" pos:column="70"/></index></name></decl></parameter>)<pos:position pos:line="1" pos:column="71"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">exit_code<pos:position pos:line="3" pos:column="22"/></name></decl>;<pos:position pos:line="3" pos:column="23"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">file_list<pos:position pos:line="4" pos:column="25"/></name></name> <modifier pos:line="4" pos:column="26">*<pos:position pos:line="4" pos:column="27"/></modifier></type><name pos:line="4" pos:column="27">flist<pos:position pos:line="4" pos:column="32"/></name></decl>;<pos:position pos:line="4" pos:column="33"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">char<pos:position pos:line="5" pos:column="13"/></name> <modifier pos:line="5" pos:column="14">*<pos:position pos:line="5" pos:column="15"/></modifier></type><name pos:line="5" pos:column="15">local_name<pos:position pos:line="5" pos:column="25"/></name> <init pos:line="5" pos:column="26">= <expr><name pos:line="5" pos:column="28">NULL<pos:position pos:line="5" pos:column="32"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="33"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">char<pos:position pos:line="6" pos:column="13"/></name> <modifier pos:line="6" pos:column="14">*<pos:position pos:line="6" pos:column="15"/></modifier></type><name pos:line="6" pos:column="15">dir<pos:position pos:line="6" pos:column="18"/></name> <init pos:line="6" pos:column="19">= <expr><name pos:line="6" pos:column="21">NULL<pos:position pos:line="6" pos:column="25"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="26"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">int<pos:position pos:line="7" pos:column="12"/></name></type> <name pos:line="7" pos:column="13">save_verbose<pos:position pos:line="7" pos:column="25"/></name> <init pos:line="7" pos:column="26">= <expr><name pos:line="7" pos:column="28">verbose<pos:position pos:line="7" pos:column="35"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="36"/></decl_stmt>

	<if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><name pos:line="9" pos:column="13">filesfrom_fd<pos:position pos:line="9" pos:column="25"/></name> <operator pos:line="9" pos:column="26">&gt;=<pos:position pos:line="9" pos:column="31"/></operator> <literal type="number" pos:line="9" pos:column="29">0<pos:position pos:line="9" pos:column="30"/></literal></expr>)<pos:position pos:line="9" pos:column="31"/></condition><then pos:line="9" pos:column="31"> <block pos:line="9" pos:column="32">{
		<comment type="block" pos:line="10" pos:column="17">/* We can't mix messages with files-from data on the socket,
		 * so temporarily turn off verbose messages. */</comment>
		<expr_stmt><expr><name pos:line="12" pos:column="17">verbose<pos:position pos:line="12" pos:column="24"/></name> <operator pos:line="12" pos:column="25">=<pos:position pos:line="12" pos:column="26"/></operator> <literal type="number" pos:line="12" pos:column="27">0<pos:position pos:line="12" pos:column="28"/></literal></expr>;<pos:position pos:line="12" pos:column="29"/></expr_stmt>
	}<pos:position pos:line="13" pos:column="10"/></block></then></if>

	<if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><name pos:line="15" pos:column="13">verbose<pos:position pos:line="15" pos:column="20"/></name> <operator pos:line="15" pos:column="21">&gt;<pos:position pos:line="15" pos:column="25"/></operator> <literal type="number" pos:line="15" pos:column="23">2<pos:position pos:line="15" pos:column="24"/></literal></expr>)<pos:position pos:line="15" pos:column="25"/></condition><then pos:line="15" pos:column="25"> <block pos:line="15" pos:column="26">{
		<expr_stmt><expr><call><name pos:line="16" pos:column="17">rprintf<pos:position pos:line="16" pos:column="24"/></name><argument_list pos:line="16" pos:column="24">(<argument><expr><name pos:line="16" pos:column="25">FINFO<pos:position pos:line="16" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="32">"server_recv(%d) starting pid=%ld\n"<pos:position pos:line="16" pos:column="68"/></literal></expr></argument>,
			<argument><expr><name pos:line="17" pos:column="25">argc<pos:position pos:line="17" pos:column="29"/></name></expr></argument>, <argument><expr><operator pos:line="17" pos:column="31">(<pos:position pos:line="17" pos:column="32"/></operator><name pos:line="17" pos:column="32">long<pos:position pos:line="17" pos:column="36"/></name><operator pos:line="17" pos:column="36">)<pos:position pos:line="17" pos:column="37"/></operator><call><name pos:line="17" pos:column="37">getpid<pos:position pos:line="17" pos:column="43"/></name><argument_list pos:line="17" pos:column="43">()<pos:position pos:line="17" pos:column="45"/></argument_list></call></expr></argument>)<pos:position pos:line="17" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="47"/></expr_stmt>
	}<pos:position pos:line="18" pos:column="10"/></block></then></if>

	<if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><name pos:line="20" pos:column="13">am_daemon<pos:position pos:line="20" pos:column="22"/></name> <operator pos:line="20" pos:column="23">&amp;&amp;<pos:position pos:line="20" pos:column="33"/></operator> <call><name pos:line="20" pos:column="26">lp_read_only<pos:position pos:line="20" pos:column="38"/></name><argument_list pos:line="20" pos:column="38">(<argument><expr><name pos:line="20" pos:column="39">module_id<pos:position pos:line="20" pos:column="48"/></name></expr></argument>)<pos:position pos:line="20" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="20" pos:column="50"/></condition><then pos:line="20" pos:column="50"> <block pos:line="20" pos:column="51">{
		<expr_stmt><expr><call><name pos:line="21" pos:column="17">rprintf<pos:position pos:line="21" pos:column="24"/></name><argument_list pos:line="21" pos:column="24">(<argument><expr><name pos:line="21" pos:column="25">FERROR<pos:position pos:line="21" pos:column="31"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="21" pos:column="32">"ERROR: module is read only\n"<pos:position pos:line="21" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="64"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="22" pos:column="17">exit_cleanup<pos:position pos:line="22" pos:column="29"/></name><argument_list pos:line="22" pos:column="29">(<argument><expr><name pos:line="22" pos:column="30">RERR_SYNTAX<pos:position pos:line="22" pos:column="41"/></name></expr></argument>)<pos:position pos:line="22" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="43"/></expr_stmt>
		<return pos:line="23" pos:column="17">return;<pos:position pos:line="23" pos:column="24"/></return>
	}<pos:position pos:line="24" pos:column="10"/></block></then></if>

	<if pos:line="26" pos:column="9">if <condition pos:line="26" pos:column="12">(<expr><name pos:line="26" pos:column="13">argc<pos:position pos:line="26" pos:column="17"/></name> <operator pos:line="26" pos:column="18">&gt;<pos:position pos:line="26" pos:column="22"/></operator> <literal type="number" pos:line="26" pos:column="20">0<pos:position pos:line="26" pos:column="21"/></literal></expr>)<pos:position pos:line="26" pos:column="22"/></condition><then pos:line="26" pos:column="22"> <block pos:line="26" pos:column="23">{
		<expr_stmt><expr><name pos:line="27" pos:column="17">dir<pos:position pos:line="27" pos:column="20"/></name> <operator pos:line="27" pos:column="21">=<pos:position pos:line="27" pos:column="22"/></operator> <name><name pos:line="27" pos:column="23">argv<pos:position pos:line="27" pos:column="27"/></name><index pos:line="27" pos:column="27">[<expr><literal type="number" pos:line="27" pos:column="28">0<pos:position pos:line="27" pos:column="29"/></literal></expr>]<pos:position pos:line="27" pos:column="30"/></index></name></expr>;<pos:position pos:line="27" pos:column="31"/></expr_stmt>
		<expr_stmt><expr><name pos:line="28" pos:column="17">argc<pos:position pos:line="28" pos:column="21"/></name><operator pos:line="28" pos:column="21">--<pos:position pos:line="28" pos:column="23"/></operator></expr>;<pos:position pos:line="28" pos:column="24"/></expr_stmt>
		<expr_stmt><expr><name pos:line="29" pos:column="17">argv<pos:position pos:line="29" pos:column="21"/></name><operator pos:line="29" pos:column="21">++<pos:position pos:line="29" pos:column="23"/></operator></expr>;<pos:position pos:line="29" pos:column="24"/></expr_stmt>
		<if pos:line="30" pos:column="17">if <condition pos:line="30" pos:column="20">(<expr><operator pos:line="30" pos:column="21">!<pos:position pos:line="30" pos:column="22"/></operator><name pos:line="30" pos:column="22">am_daemon<pos:position pos:line="30" pos:column="31"/></name> <operator pos:line="30" pos:column="32">&amp;&amp;<pos:position pos:line="30" pos:column="42"/></operator> <operator pos:line="30" pos:column="35">!<pos:position pos:line="30" pos:column="36"/></operator><call><name pos:line="30" pos:column="36">push_dir<pos:position pos:line="30" pos:column="44"/></name><argument_list pos:line="30" pos:column="44">(<argument><expr><name pos:line="30" pos:column="45">dir<pos:position pos:line="30" pos:column="48"/></name></expr></argument>)<pos:position pos:line="30" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="30" pos:column="50"/></condition><then pos:line="30" pos:column="50"> <block pos:line="30" pos:column="51">{
			<expr_stmt><expr><call><name pos:line="31" pos:column="25">rsyserr<pos:position pos:line="31" pos:column="32"/></name><argument_list pos:line="31" pos:column="32">(<argument><expr><name pos:line="31" pos:column="33">FERROR<pos:position pos:line="31" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="41">errno<pos:position pos:line="31" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="31" pos:column="48">"push_dir#4 %s failed"<pos:position pos:line="31" pos:column="70"/></literal></expr></argument>,
				<argument><expr><call><name pos:line="32" pos:column="33">full_fname<pos:position pos:line="32" pos:column="43"/></name><argument_list pos:line="32" pos:column="43">(<argument><expr><name pos:line="32" pos:column="44">dir<pos:position pos:line="32" pos:column="47"/></name></expr></argument>)<pos:position pos:line="32" pos:column="48"/></argument_list></call></expr></argument>)<pos:position pos:line="32" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="50"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="33" pos:column="25">exit_cleanup<pos:position pos:line="33" pos:column="37"/></name><argument_list pos:line="33" pos:column="37">(<argument><expr><name pos:line="33" pos:column="38">RERR_FILESELECT<pos:position pos:line="33" pos:column="53"/></name></expr></argument>)<pos:position pos:line="33" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="55"/></expr_stmt>
		}<pos:position pos:line="34" pos:column="18"/></block></then></if>
	}<pos:position pos:line="35" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="37" pos:column="9">io_start_buffering_in<pos:position pos:line="37" pos:column="30"/></name><argument_list pos:line="37" pos:column="30">()<pos:position pos:line="37" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="33"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="38" pos:column="9">recv_filter_list<pos:position pos:line="38" pos:column="25"/></name><argument_list pos:line="38" pos:column="25">(<argument><expr><name pos:line="38" pos:column="26">f_in<pos:position pos:line="38" pos:column="30"/></name></expr></argument>)<pos:position pos:line="38" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="32"/></expr_stmt>

	<if pos:line="40" pos:column="9">if <condition pos:line="40" pos:column="12">(<expr><name pos:line="40" pos:column="13">filesfrom_fd<pos:position pos:line="40" pos:column="25"/></name> <operator pos:line="40" pos:column="26">&gt;=<pos:position pos:line="40" pos:column="31"/></operator> <literal type="number" pos:line="40" pos:column="29">0<pos:position pos:line="40" pos:column="30"/></literal></expr>)<pos:position pos:line="40" pos:column="31"/></condition><then pos:line="40" pos:column="31"> <block pos:line="40" pos:column="32">{
		<comment type="block" pos:line="41" pos:column="17">/* We need to send the files-from names to the sender at the
		 * same time that we receive the file-list from them, so we
		 * need the IO routines to automatically write out the names
		 * onto our f_out socket as we read the file-list.  This
		 * avoids both deadlock and extra delays/buffers. */</comment>
		<expr_stmt><expr><call><name pos:line="46" pos:column="17">io_set_filesfrom_fds<pos:position pos:line="46" pos:column="37"/></name><argument_list pos:line="46" pos:column="37">(<argument><expr><name pos:line="46" pos:column="38">filesfrom_fd<pos:position pos:line="46" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="52">f_out<pos:position pos:line="46" pos:column="57"/></name></expr></argument>)<pos:position pos:line="46" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="59"/></expr_stmt>
		<expr_stmt><expr><name pos:line="47" pos:column="17">filesfrom_fd<pos:position pos:line="47" pos:column="29"/></name> <operator pos:line="47" pos:column="30">=<pos:position pos:line="47" pos:column="31"/></operator> <operator pos:line="47" pos:column="32">-<pos:position pos:line="47" pos:column="33"/></operator><literal type="number" pos:line="47" pos:column="33">1<pos:position pos:line="47" pos:column="34"/></literal></expr>;<pos:position pos:line="47" pos:column="35"/></expr_stmt>
	}<pos:position pos:line="48" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="50" pos:column="9">flist<pos:position pos:line="50" pos:column="14"/></name> <operator pos:line="50" pos:column="15">=<pos:position pos:line="50" pos:column="16"/></operator> <call><name pos:line="50" pos:column="17">recv_file_list<pos:position pos:line="50" pos:column="31"/></name><argument_list pos:line="50" pos:column="31">(<argument><expr><name pos:line="50" pos:column="32">f_in<pos:position pos:line="50" pos:column="36"/></name></expr></argument>)<pos:position pos:line="50" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="38"/></expr_stmt>
	<expr_stmt><expr><name pos:line="51" pos:column="9">verbose<pos:position pos:line="51" pos:column="16"/></name> <operator pos:line="51" pos:column="17">=<pos:position pos:line="51" pos:column="18"/></operator> <name pos:line="51" pos:column="19">save_verbose<pos:position pos:line="51" pos:column="31"/></name></expr>;<pos:position pos:line="51" pos:column="32"/></expr_stmt>
	<if pos:line="52" pos:column="9">if <condition pos:line="52" pos:column="12">(<expr><operator pos:line="52" pos:column="13">!<pos:position pos:line="52" pos:column="14"/></operator><name pos:line="52" pos:column="14">flist<pos:position pos:line="52" pos:column="19"/></name></expr>)<pos:position pos:line="52" pos:column="20"/></condition><then pos:line="52" pos:column="20"> <block pos:line="52" pos:column="21">{
		<expr_stmt><expr><call><name pos:line="53" pos:column="17">rprintf<pos:position pos:line="53" pos:column="24"/></name><argument_list pos:line="53" pos:column="24">(<argument><expr><name pos:line="53" pos:column="25">FERROR<pos:position pos:line="53" pos:column="31"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="53" pos:column="32">"server_recv: recv_file_list error\n"<pos:position pos:line="53" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="53" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="71"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="54" pos:column="17">exit_cleanup<pos:position pos:line="54" pos:column="29"/></name><argument_list pos:line="54" pos:column="29">(<argument><expr><name pos:line="54" pos:column="30">RERR_FILESELECT<pos:position pos:line="54" pos:column="45"/></name></expr></argument>)<pos:position pos:line="54" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="47"/></expr_stmt>
	}<pos:position pos:line="55" pos:column="10"/></block></then></if>
	<expr_stmt><expr><name pos:line="56" pos:column="9">the_file_list<pos:position pos:line="56" pos:column="22"/></name> <operator pos:line="56" pos:column="23">=<pos:position pos:line="56" pos:column="24"/></operator> <name pos:line="56" pos:column="25">flist<pos:position pos:line="56" pos:column="30"/></name></expr>;<pos:position pos:line="56" pos:column="31"/></expr_stmt>

	<if pos:line="58" pos:column="9">if <condition pos:line="58" pos:column="12">(<expr><name pos:line="58" pos:column="13">argc<pos:position pos:line="58" pos:column="17"/></name> <operator pos:line="58" pos:column="18">&gt;<pos:position pos:line="58" pos:column="22"/></operator> <literal type="number" pos:line="58" pos:column="20">0<pos:position pos:line="58" pos:column="21"/></literal></expr>)<pos:position pos:line="58" pos:column="22"/></condition><then pos:line="58" pos:column="22">
		<block type="pseudo"><expr_stmt><expr><name pos:line="59" pos:column="17">local_name<pos:position pos:line="59" pos:column="27"/></name> <operator pos:line="59" pos:column="28">=<pos:position pos:line="59" pos:column="29"/></operator> <call><name pos:line="59" pos:column="30">get_local_name<pos:position pos:line="59" pos:column="44"/></name><argument_list pos:line="59" pos:column="44">(<argument><expr><name pos:line="59" pos:column="45">flist<pos:position pos:line="59" pos:column="50"/></name></expr></argument>,<argument><expr><name><name pos:line="59" pos:column="51">argv<pos:position pos:line="59" pos:column="55"/></name><index pos:line="59" pos:column="55">[<expr><literal type="number" pos:line="59" pos:column="56">0<pos:position pos:line="59" pos:column="57"/></literal></expr>]<pos:position pos:line="59" pos:column="58"/></index></name></expr></argument>)<pos:position pos:line="59" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="60"/></expr_stmt></block></then></if>

	<expr_stmt><expr><name pos:line="61" pos:column="9">exit_code<pos:position pos:line="61" pos:column="18"/></name> <operator pos:line="61" pos:column="19">=<pos:position pos:line="61" pos:column="20"/></operator> <call><name pos:line="61" pos:column="21">do_recv<pos:position pos:line="61" pos:column="28"/></name><argument_list pos:line="61" pos:column="28">(<argument><expr><name pos:line="61" pos:column="29">f_in<pos:position pos:line="61" pos:column="33"/></name></expr></argument>,<argument><expr><name pos:line="61" pos:column="34">f_out<pos:position pos:line="61" pos:column="39"/></name></expr></argument>,<argument><expr><name pos:line="61" pos:column="40">flist<pos:position pos:line="61" pos:column="45"/></name></expr></argument>,<argument><expr><name pos:line="61" pos:column="46">local_name<pos:position pos:line="61" pos:column="56"/></name></expr></argument>)<pos:position pos:line="61" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="58"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="62" pos:column="9">exit_cleanup<pos:position pos:line="62" pos:column="21"/></name><argument_list pos:line="62" pos:column="21">(<argument><expr><name pos:line="62" pos:column="22">exit_code<pos:position pos:line="62" pos:column="31"/></name></expr></argument>)<pos:position pos:line="62" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="33"/></expr_stmt>
}<pos:position pos:line="63" pos:column="2"/></block></function></unit>
