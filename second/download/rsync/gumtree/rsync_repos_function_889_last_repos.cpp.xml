<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_889_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">getaddr_info_name<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><specifier pos:line="1" pos:column="30">const<pos:position pos:line="1" pos:column="35"/></specifier> <name pos:line="1" pos:column="36">char<pos:position pos:line="1" pos:column="40"/></name> <modifier pos:line="1" pos:column="41">*<pos:position pos:line="1" pos:column="42"/></modifier></type><name pos:line="1" pos:column="42">node<pos:position pos:line="1" pos:column="46"/></name></decl></parameter>,
				<parameter><decl><type><specifier pos:line="2" pos:column="33">const<pos:position pos:line="2" pos:column="38"/></specifier> <name pos:line="2" pos:column="39">char<pos:position pos:line="2" pos:column="43"/></name> <modifier pos:line="2" pos:column="44">*<pos:position pos:line="2" pos:column="45"/></modifier></type><name pos:line="2" pos:column="45">service<pos:position pos:line="2" pos:column="52"/></name></decl></parameter>,
				<parameter><decl><type><specifier pos:line="3" pos:column="33">const<pos:position pos:line="3" pos:column="38"/></specifier> <name><name pos:line="3" pos:column="39">struct<pos:position pos:line="3" pos:column="45"/></name> <name pos:line="3" pos:column="46">addrinfo<pos:position pos:line="3" pos:column="54"/></name></name> <modifier pos:line="3" pos:column="55">*<pos:position pos:line="3" pos:column="56"/></modifier></type><name pos:line="3" pos:column="56">hints<pos:position pos:line="3" pos:column="61"/></name></decl></parameter>,
				<parameter><decl><type><name><name pos:line="4" pos:column="33">struct<pos:position pos:line="4" pos:column="39"/></name> <name pos:line="4" pos:column="40">addrinfo<pos:position pos:line="4" pos:column="48"/></name></name> <modifier pos:line="4" pos:column="49">*<pos:position pos:line="4" pos:column="50"/></modifier><modifier pos:line="4" pos:column="50">*<pos:position pos:line="4" pos:column="51"/></modifier></type><name pos:line="4" pos:column="51">res<pos:position pos:line="4" pos:column="54"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="55"/></parameter_list>
<block pos:line="5" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">addrinfo<pos:position pos:line="6" pos:column="24"/></name></name> <modifier pos:line="6" pos:column="25">*<pos:position pos:line="6" pos:column="26"/></modifier></type><name pos:line="6" pos:column="26">listp<pos:position pos:line="6" pos:column="31"/></name> <init pos:line="6" pos:column="32">= <expr><name pos:line="6" pos:column="34">NULL<pos:position pos:line="6" pos:column="38"/></name></expr></init></decl>, <modifier pos:line="6" pos:column="40">*<pos:position pos:line="6" pos:column="41"/></modifier><decl><type ref="prev"/><name pos:line="6" pos:column="41">prevp<pos:position pos:line="6" pos:column="46"/></name> <init pos:line="6" pos:column="47">= <expr><name pos:line="6" pos:column="49">NULL<pos:position pos:line="6" pos:column="53"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="54"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">char<pos:position pos:line="7" pos:column="13"/></name> <modifier pos:line="7" pos:column="14">*<pos:position pos:line="7" pos:column="15"/></modifier><modifier pos:line="7" pos:column="15">*<pos:position pos:line="7" pos:column="16"/></modifier></type><name pos:line="7" pos:column="16">pptr<pos:position pos:line="7" pos:column="20"/></name> <init pos:line="7" pos:column="21">= <expr><name pos:line="7" pos:column="23">NULL<pos:position pos:line="7" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">int<pos:position pos:line="8" pos:column="12"/></name></type> <name pos:line="8" pos:column="13">err<pos:position pos:line="8" pos:column="16"/></name></decl>;<pos:position pos:line="8" pos:column="17"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="9" pos:column="9">struct<pos:position pos:line="9" pos:column="15"/></name> <name pos:line="9" pos:column="16">hostent<pos:position pos:line="9" pos:column="23"/></name></name> <modifier pos:line="9" pos:column="24">*<pos:position pos:line="9" pos:column="25"/></modifier></type><name pos:line="9" pos:column="25">hp<pos:position pos:line="9" pos:column="27"/></name> <init pos:line="9" pos:column="28">= <expr><name pos:line="9" pos:column="30">NULL<pos:position pos:line="9" pos:column="34"/></name></expr></init></decl>;<pos:position pos:line="9" pos:column="35"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="10" pos:column="9">unsigned<pos:position pos:line="10" pos:column="17"/></name> <name pos:line="10" pos:column="18">short<pos:position pos:line="10" pos:column="23"/></name></type> <name pos:line="10" pos:column="24">port<pos:position pos:line="10" pos:column="28"/></name> <init pos:line="10" pos:column="29">= <expr><literal type="number" pos:line="10" pos:column="31">0<pos:position pos:line="10" pos:column="32"/></literal></expr></init></decl>;<pos:position pos:line="10" pos:column="33"/></decl_stmt>

	<if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><name pos:line="12" pos:column="13">service<pos:position pos:line="12" pos:column="20"/></name></expr>)<pos:position pos:line="12" pos:column="21"/></condition><then pos:line="12" pos:column="21"> <block pos:line="12" pos:column="22">{
		<expr_stmt><expr><name pos:line="13" pos:column="17">port<pos:position pos:line="13" pos:column="21"/></name> <operator pos:line="13" pos:column="22">=<pos:position pos:line="13" pos:column="23"/></operator> <operator pos:line="13" pos:column="24">(<pos:position pos:line="13" pos:column="25"/></operator><name pos:line="13" pos:column="25">unsigned<pos:position pos:line="13" pos:column="33"/></name> <name pos:line="13" pos:column="34">short<pos:position pos:line="13" pos:column="39"/></name><operator pos:line="13" pos:column="39">)<pos:position pos:line="13" pos:column="40"/></operator><call><name pos:line="13" pos:column="40">atoi<pos:position pos:line="13" pos:column="44"/></name><argument_list pos:line="13" pos:column="44">(<argument><expr><name pos:line="13" pos:column="45">service<pos:position pos:line="13" pos:column="52"/></name></expr></argument>)<pos:position pos:line="13" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="54"/></expr_stmt>
	}<pos:position pos:line="14" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="16" pos:column="9">hp<pos:position pos:line="16" pos:column="11"/></name> <operator pos:line="16" pos:column="12">=<pos:position pos:line="16" pos:column="13"/></operator> <call><name pos:line="16" pos:column="14">gethostbyname<pos:position pos:line="16" pos:column="27"/></name><argument_list pos:line="16" pos:column="27">(<argument><expr><name pos:line="16" pos:column="28">node<pos:position pos:line="16" pos:column="32"/></name></expr></argument>)<pos:position pos:line="16" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="34"/></expr_stmt>
	<expr_stmt><expr><name pos:line="17" pos:column="9">err<pos:position pos:line="17" pos:column="12"/></name> <operator pos:line="17" pos:column="13">=<pos:position pos:line="17" pos:column="14"/></operator> <call><name pos:line="17" pos:column="15">check_hostent_err<pos:position pos:line="17" pos:column="32"/></name><argument_list pos:line="17" pos:column="32">(<argument><expr><name pos:line="17" pos:column="33">hp<pos:position pos:line="17" pos:column="35"/></name></expr></argument>)<pos:position pos:line="17" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="37"/></expr_stmt>
	<if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><name pos:line="18" pos:column="13">err<pos:position pos:line="18" pos:column="16"/></name></expr>)<pos:position pos:line="18" pos:column="17"/></condition><then pos:line="18" pos:column="17"> <block pos:line="18" pos:column="18">{
		<return pos:line="19" pos:column="17">return <expr><name pos:line="19" pos:column="24">err<pos:position pos:line="19" pos:column="27"/></name></expr>;<pos:position pos:line="19" pos:column="28"/></return>
	}<pos:position pos:line="20" pos:column="10"/></block></then></if>

	<for pos:line="22" pos:column="9">for<control pos:line="22" pos:column="12">(<init><expr><name pos:line="22" pos:column="13">pptr<pos:position pos:line="22" pos:column="17"/></name> <operator pos:line="22" pos:column="18">=<pos:position pos:line="22" pos:column="19"/></operator> <name><name pos:line="22" pos:column="20">hp<pos:position pos:line="22" pos:column="22"/></name><operator pos:line="22" pos:column="22">-&gt;<pos:position pos:line="22" pos:column="27"/></operator><name pos:line="22" pos:column="24">h_addr_list<pos:position pos:line="22" pos:column="35"/></name></name></expr>;<pos:position pos:line="22" pos:column="36"/></init> <condition><expr><operator pos:line="22" pos:column="37">*<pos:position pos:line="22" pos:column="38"/></operator><name pos:line="22" pos:column="38">pptr<pos:position pos:line="22" pos:column="42"/></name></expr>;<pos:position pos:line="22" pos:column="43"/></condition> <incr><expr><name pos:line="22" pos:column="44">pptr<pos:position pos:line="22" pos:column="48"/></name><operator pos:line="22" pos:column="48">++<pos:position pos:line="22" pos:column="50"/></operator></expr></incr>)<pos:position pos:line="22" pos:column="51"/></control> <block pos:line="22" pos:column="52">{
		<decl_stmt><decl><type><name><name pos:line="23" pos:column="17">struct<pos:position pos:line="23" pos:column="23"/></name> <name pos:line="23" pos:column="24">in_addr<pos:position pos:line="23" pos:column="31"/></name></name></type> <name pos:line="23" pos:column="32">ip<pos:position pos:line="23" pos:column="34"/></name> <init pos:line="23" pos:column="35">= <expr><operator pos:line="23" pos:column="37">*<pos:position pos:line="23" pos:column="38"/></operator><operator pos:line="23" pos:column="38">(<pos:position pos:line="23" pos:column="39"/></operator>struct <name pos:line="23" pos:column="46">in_addr<pos:position pos:line="23" pos:column="53"/></name> <operator pos:line="23" pos:column="54">*<pos:position pos:line="23" pos:column="55"/></operator><operator pos:line="23" pos:column="55">)<pos:position pos:line="23" pos:column="56"/></operator><operator pos:line="23" pos:column="56">*<pos:position pos:line="23" pos:column="57"/></operator><name pos:line="23" pos:column="57">pptr<pos:position pos:line="23" pos:column="61"/></name></expr></init></decl>;<pos:position pos:line="23" pos:column="62"/></decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="24" pos:column="17">struct<pos:position pos:line="24" pos:column="23"/></name> <name pos:line="24" pos:column="24">addrinfo<pos:position pos:line="24" pos:column="32"/></name></name> <modifier pos:line="24" pos:column="33">*<pos:position pos:line="24" pos:column="34"/></modifier></type><name pos:line="24" pos:column="34">ai<pos:position pos:line="24" pos:column="36"/></name> <init pos:line="24" pos:column="37">= <expr><call><name pos:line="24" pos:column="39">alloc_entry<pos:position pos:line="24" pos:column="50"/></name><argument_list pos:line="24" pos:column="50">(<argument><expr><name pos:line="24" pos:column="51">hints<pos:position pos:line="24" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="58">ip<pos:position pos:line="24" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="62">port<pos:position pos:line="24" pos:column="66"/></name></expr></argument>)<pos:position pos:line="24" pos:column="67"/></argument_list></call></expr></init></decl>;<pos:position pos:line="24" pos:column="68"/></decl_stmt>

		<if pos:line="26" pos:column="17">if <condition pos:line="26" pos:column="20">(<expr><operator pos:line="26" pos:column="21">!<pos:position pos:line="26" pos:column="22"/></operator><name pos:line="26" pos:column="22">ai<pos:position pos:line="26" pos:column="24"/></name></expr>)<pos:position pos:line="26" pos:column="25"/></condition><then pos:line="26" pos:column="25"> <block pos:line="26" pos:column="26">{
			<expr_stmt><expr><call><name pos:line="27" pos:column="25">freeaddrinfo<pos:position pos:line="27" pos:column="37"/></name><argument_list pos:line="27" pos:column="37">(<argument><expr><name pos:line="27" pos:column="38">listp<pos:position pos:line="27" pos:column="43"/></name></expr></argument>)<pos:position pos:line="27" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="45"/></expr_stmt>
			<return pos:line="28" pos:column="25">return <expr><name pos:line="28" pos:column="32">EAI_MEMORY<pos:position pos:line="28" pos:column="42"/></name></expr>;<pos:position pos:line="28" pos:column="43"/></return>
		}<pos:position pos:line="29" pos:column="18"/></block></then></if>

		<if pos:line="31" pos:column="17">if <condition pos:line="31" pos:column="20">(<expr><operator pos:line="31" pos:column="21">!<pos:position pos:line="31" pos:column="22"/></operator><name pos:line="31" pos:column="22">listp<pos:position pos:line="31" pos:column="27"/></name></expr>)<pos:position pos:line="31" pos:column="28"/></condition><then pos:line="31" pos:column="28"> <block pos:line="31" pos:column="29">{
			<expr_stmt><expr><name pos:line="32" pos:column="25">listp<pos:position pos:line="32" pos:column="30"/></name> <operator pos:line="32" pos:column="31">=<pos:position pos:line="32" pos:column="32"/></operator> <name pos:line="32" pos:column="33">ai<pos:position pos:line="32" pos:column="35"/></name></expr>;<pos:position pos:line="32" pos:column="36"/></expr_stmt>
			<expr_stmt><expr><name pos:line="33" pos:column="25">prevp<pos:position pos:line="33" pos:column="30"/></name> <operator pos:line="33" pos:column="31">=<pos:position pos:line="33" pos:column="32"/></operator> <name pos:line="33" pos:column="33">ai<pos:position pos:line="33" pos:column="35"/></name></expr>;<pos:position pos:line="33" pos:column="36"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="34" pos:column="25">ai<pos:position pos:line="34" pos:column="27"/></name><operator pos:line="34" pos:column="27">-&gt;<pos:position pos:line="34" pos:column="32"/></operator><name pos:line="34" pos:column="29">ai_canonname<pos:position pos:line="34" pos:column="41"/></name></name> <operator pos:line="34" pos:column="42">=<pos:position pos:line="34" pos:column="43"/></operator> <call><name pos:line="34" pos:column="44">SMB_STRDUP<pos:position pos:line="34" pos:column="54"/></name><argument_list pos:line="34" pos:column="54">(<argument><expr><name><name pos:line="34" pos:column="55">hp<pos:position pos:line="34" pos:column="57"/></name><operator pos:line="34" pos:column="57">-&gt;<pos:position pos:line="34" pos:column="62"/></operator><name pos:line="34" pos:column="59">h_name<pos:position pos:line="34" pos:column="65"/></name></name></expr></argument>)<pos:position pos:line="34" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="67"/></expr_stmt>
			<if pos:line="35" pos:column="25">if <condition pos:line="35" pos:column="28">(<expr><operator pos:line="35" pos:column="29">!<pos:position pos:line="35" pos:column="30"/></operator><name><name pos:line="35" pos:column="30">ai<pos:position pos:line="35" pos:column="32"/></name><operator pos:line="35" pos:column="32">-&gt;<pos:position pos:line="35" pos:column="37"/></operator><name pos:line="35" pos:column="34">ai_canonname<pos:position pos:line="35" pos:column="46"/></name></name></expr>)<pos:position pos:line="35" pos:column="47"/></condition><then pos:line="35" pos:column="47"> <block pos:line="35" pos:column="48">{
				<expr_stmt><expr><call><name pos:line="36" pos:column="33">freeaddrinfo<pos:position pos:line="36" pos:column="45"/></name><argument_list pos:line="36" pos:column="45">(<argument><expr><name pos:line="36" pos:column="46">listp<pos:position pos:line="36" pos:column="51"/></name></expr></argument>)<pos:position pos:line="36" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="53"/></expr_stmt>
				<return pos:line="37" pos:column="33">return <expr><name pos:line="37" pos:column="40">EAI_MEMORY<pos:position pos:line="37" pos:column="50"/></name></expr>;<pos:position pos:line="37" pos:column="51"/></return>
			}<pos:position pos:line="38" pos:column="26"/></block></then></if>
		}<pos:position pos:line="39" pos:column="18"/></block></then> <else pos:line="39" pos:column="19">else <block pos:line="39" pos:column="24">{
			<expr_stmt><expr><name><name pos:line="40" pos:column="25">prevp<pos:position pos:line="40" pos:column="30"/></name><operator pos:line="40" pos:column="30">-&gt;<pos:position pos:line="40" pos:column="35"/></operator><name pos:line="40" pos:column="32">ai_next<pos:position pos:line="40" pos:column="39"/></name></name> <operator pos:line="40" pos:column="40">=<pos:position pos:line="40" pos:column="41"/></operator> <name pos:line="40" pos:column="42">ai<pos:position pos:line="40" pos:column="44"/></name></expr>;<pos:position pos:line="40" pos:column="45"/></expr_stmt>
			<expr_stmt><expr><name pos:line="41" pos:column="25">prevp<pos:position pos:line="41" pos:column="30"/></name> <operator pos:line="41" pos:column="31">=<pos:position pos:line="41" pos:column="32"/></operator> <name pos:line="41" pos:column="33">ai<pos:position pos:line="41" pos:column="35"/></name></expr>;<pos:position pos:line="41" pos:column="36"/></expr_stmt>
		}<pos:position pos:line="42" pos:column="18"/></block></else></if>
	}<pos:position pos:line="43" pos:column="10"/></block></for>
	<expr_stmt><expr><operator pos:line="44" pos:column="9">*<pos:position pos:line="44" pos:column="10"/></operator><name pos:line="44" pos:column="10">res<pos:position pos:line="44" pos:column="13"/></name> <operator pos:line="44" pos:column="14">=<pos:position pos:line="44" pos:column="15"/></operator> <name pos:line="44" pos:column="16">listp<pos:position pos:line="44" pos:column="21"/></name></expr>;<pos:position pos:line="44" pos:column="22"/></expr_stmt>
	<return pos:line="45" pos:column="9">return <expr><literal type="number" pos:line="45" pos:column="16">0<pos:position pos:line="45" pos:column="17"/></literal></expr>;<pos:position pos:line="45" pos:column="18"/></return>
}<pos:position pos:line="46" pos:column="2"/></block></function></unit>
