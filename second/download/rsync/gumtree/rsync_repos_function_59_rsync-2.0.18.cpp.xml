<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_59_rsync-2.0.18.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">read_timeout<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name pos:line="1" pos:column="25">int<pos:position pos:line="1" pos:column="28"/></name></type> <name pos:line="1" pos:column="29">fd<pos:position pos:line="1" pos:column="31"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="33">char<pos:position pos:line="1" pos:column="37"/></name> <modifier pos:line="1" pos:column="38">*<pos:position pos:line="1" pos:column="39"/></modifier></type><name pos:line="1" pos:column="39">buf<pos:position pos:line="1" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="44">int<pos:position pos:line="1" pos:column="47"/></name></type> <name pos:line="1" pos:column="48">len<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="52"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">n<pos:position pos:line="3" pos:column="14"/></name></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="16">ret<pos:position pos:line="3" pos:column="19"/></name><init pos:line="3" pos:column="19">=<expr><literal type="number" pos:line="3" pos:column="20">0<pos:position pos:line="3" pos:column="21"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="22"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="5" pos:column="9">io_flush<pos:position pos:line="5" pos:column="17"/></name><argument_list pos:line="5" pos:column="17">()<pos:position pos:line="5" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="20"/></expr_stmt>

	<while pos:line="7" pos:column="9">while <condition pos:line="7" pos:column="15">(<expr><name pos:line="7" pos:column="16">ret<pos:position pos:line="7" pos:column="19"/></name> <operator pos:line="7" pos:column="20">==<pos:position pos:line="7" pos:column="22"/></operator> <literal type="number" pos:line="7" pos:column="23">0<pos:position pos:line="7" pos:column="24"/></literal></expr>)<pos:position pos:line="7" pos:column="25"/></condition> <block pos:line="7" pos:column="26">{
		<decl_stmt><decl><type><name pos:line="8" pos:column="17">fd_set<pos:position pos:line="8" pos:column="23"/></name></type> <name pos:line="8" pos:column="24">fds<pos:position pos:line="8" pos:column="27"/></name></decl>;<pos:position pos:line="8" pos:column="28"/></decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="9" pos:column="17">struct<pos:position pos:line="9" pos:column="23"/></name> <name pos:line="9" pos:column="24">timeval<pos:position pos:line="9" pos:column="31"/></name></name></type> <name pos:line="9" pos:column="32">tv<pos:position pos:line="9" pos:column="34"/></name></decl>;<pos:position pos:line="9" pos:column="35"/></decl_stmt>

		<expr_stmt><expr><call><name pos:line="11" pos:column="17">FD_ZERO<pos:position pos:line="11" pos:column="24"/></name><argument_list pos:line="11" pos:column="24">(<argument><expr><operator pos:line="11" pos:column="25">&amp;<pos:position pos:line="11" pos:column="30"/></operator><name pos:line="11" pos:column="26">fds<pos:position pos:line="11" pos:column="29"/></name></expr></argument>)<pos:position pos:line="11" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="31"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="12" pos:column="17">FD_SET<pos:position pos:line="12" pos:column="23"/></name><argument_list pos:line="12" pos:column="23">(<argument><expr><name pos:line="12" pos:column="24">fd<pos:position pos:line="12" pos:column="26"/></name></expr></argument>, <argument><expr><operator pos:line="12" pos:column="28">&amp;<pos:position pos:line="12" pos:column="33"/></operator><name pos:line="12" pos:column="29">fds<pos:position pos:line="12" pos:column="32"/></name></expr></argument>)<pos:position pos:line="12" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="34"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="13" pos:column="17">tv<pos:position pos:line="13" pos:column="19"/></name><operator pos:line="13" pos:column="19">.<pos:position pos:line="13" pos:column="20"/></operator><name pos:line="13" pos:column="20">tv_sec<pos:position pos:line="13" pos:column="26"/></name></name> <operator pos:line="13" pos:column="27">=<pos:position pos:line="13" pos:column="28"/></operator> <name pos:line="13" pos:column="29">io_timeout<pos:position pos:line="13" pos:column="39"/></name></expr>;<pos:position pos:line="13" pos:column="40"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="14" pos:column="17">tv<pos:position pos:line="14" pos:column="19"/></name><operator pos:line="14" pos:column="19">.<pos:position pos:line="14" pos:column="20"/></operator><name pos:line="14" pos:column="20">tv_usec<pos:position pos:line="14" pos:column="27"/></name></name> <operator pos:line="14" pos:column="28">=<pos:position pos:line="14" pos:column="29"/></operator> <literal type="number" pos:line="14" pos:column="30">0<pos:position pos:line="14" pos:column="31"/></literal></expr>;<pos:position pos:line="14" pos:column="32"/></expr_stmt>

		<if pos:line="16" pos:column="17">if <condition pos:line="16" pos:column="20">(<expr><call><name pos:line="16" pos:column="21">select<pos:position pos:line="16" pos:column="27"/></name><argument_list pos:line="16" pos:column="27">(<argument><expr><name pos:line="16" pos:column="28">fd<pos:position pos:line="16" pos:column="30"/></name><operator pos:line="16" pos:column="30">+<pos:position pos:line="16" pos:column="31"/></operator><literal type="number" pos:line="16" pos:column="31">1<pos:position pos:line="16" pos:column="32"/></literal></expr></argument>, <argument><expr><operator pos:line="16" pos:column="34">&amp;<pos:position pos:line="16" pos:column="39"/></operator><name pos:line="16" pos:column="35">fds<pos:position pos:line="16" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="40">NULL<pos:position pos:line="16" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="46">NULL<pos:position pos:line="16" pos:column="50"/></name></expr></argument>, 
			   <argument><expr><ternary><condition><expr><name pos:line="17" pos:column="28">io_timeout<pos:position pos:line="17" pos:column="38"/></name></expr>?<pos:position pos:line="17" pos:column="39"/></condition><then><expr><operator pos:line="17" pos:column="39">&amp;<pos:position pos:line="17" pos:column="44"/></operator><name pos:line="17" pos:column="40">tv<pos:position pos:line="17" pos:column="42"/></name></expr></then><else pos:line="17" pos:column="42">:<expr><name pos:line="17" pos:column="43">NULL<pos:position pos:line="17" pos:column="47"/></name></expr></else></ternary></expr></argument>)<pos:position pos:line="17" pos:column="48"/></argument_list></call> <operator pos:line="17" pos:column="49">!=<pos:position pos:line="17" pos:column="51"/></operator> <literal type="number" pos:line="17" pos:column="52">1<pos:position pos:line="17" pos:column="53"/></literal></expr>)<pos:position pos:line="17" pos:column="54"/></condition><then pos:line="17" pos:column="54"> <block pos:line="17" pos:column="55">{
			<expr_stmt><expr><call><name pos:line="18" pos:column="25">check_timeout<pos:position pos:line="18" pos:column="38"/></name><argument_list pos:line="18" pos:column="38">()<pos:position pos:line="18" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="41"/></expr_stmt>
			<continue pos:line="19" pos:column="25">continue;<pos:position pos:line="19" pos:column="34"/></continue>
		}<pos:position pos:line="20" pos:column="18"/></block></then></if>

		<expr_stmt><expr><name pos:line="22" pos:column="17">n<pos:position pos:line="22" pos:column="18"/></name> <operator pos:line="22" pos:column="19">=<pos:position pos:line="22" pos:column="20"/></operator> <call><name pos:line="22" pos:column="21">read<pos:position pos:line="22" pos:column="25"/></name><argument_list pos:line="22" pos:column="25">(<argument><expr><name pos:line="22" pos:column="26">fd<pos:position pos:line="22" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="30">buf<pos:position pos:line="22" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="35">len<pos:position pos:line="22" pos:column="38"/></name></expr></argument>)<pos:position pos:line="22" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="40"/></expr_stmt>

		<if pos:line="24" pos:column="17">if <condition pos:line="24" pos:column="20">(<expr><name pos:line="24" pos:column="21">n<pos:position pos:line="24" pos:column="22"/></name> <operator pos:line="24" pos:column="23">&gt;<pos:position pos:line="24" pos:column="27"/></operator> <literal type="number" pos:line="24" pos:column="25">0<pos:position pos:line="24" pos:column="26"/></literal></expr>)<pos:position pos:line="24" pos:column="27"/></condition><then pos:line="24" pos:column="27"> <block pos:line="24" pos:column="28">{
			<expr_stmt><expr><name><name pos:line="25" pos:column="25">stats<pos:position pos:line="25" pos:column="30"/></name><operator pos:line="25" pos:column="30">.<pos:position pos:line="25" pos:column="31"/></operator><name pos:line="25" pos:column="31">total_read<pos:position pos:line="25" pos:column="41"/></name></name> <operator pos:line="25" pos:column="42">+=<pos:position pos:line="25" pos:column="44"/></operator> <name pos:line="25" pos:column="45">n<pos:position pos:line="25" pos:column="46"/></name></expr>;<pos:position pos:line="25" pos:column="47"/></expr_stmt>
			<expr_stmt><expr><name pos:line="26" pos:column="25">buf<pos:position pos:line="26" pos:column="28"/></name> <operator pos:line="26" pos:column="29">+=<pos:position pos:line="26" pos:column="31"/></operator> <name pos:line="26" pos:column="32">n<pos:position pos:line="26" pos:column="33"/></name></expr>;<pos:position pos:line="26" pos:column="34"/></expr_stmt>
			<expr_stmt><expr><name pos:line="27" pos:column="25">len<pos:position pos:line="27" pos:column="28"/></name> <operator pos:line="27" pos:column="29">-=<pos:position pos:line="27" pos:column="31"/></operator> <name pos:line="27" pos:column="32">n<pos:position pos:line="27" pos:column="33"/></name></expr>;<pos:position pos:line="27" pos:column="34"/></expr_stmt>
			<expr_stmt><expr><name pos:line="28" pos:column="25">ret<pos:position pos:line="28" pos:column="28"/></name> <operator pos:line="28" pos:column="29">+=<pos:position pos:line="28" pos:column="31"/></operator> <name pos:line="28" pos:column="32">n<pos:position pos:line="28" pos:column="33"/></name></expr>;<pos:position pos:line="28" pos:column="34"/></expr_stmt>
			<if pos:line="29" pos:column="25">if <condition pos:line="29" pos:column="28">(<expr><name pos:line="29" pos:column="29">io_timeout<pos:position pos:line="29" pos:column="39"/></name></expr>)<pos:position pos:line="29" pos:column="40"/></condition><then pos:line="29" pos:column="40">
				<block type="pseudo"><expr_stmt><expr><name pos:line="30" pos:column="33">last_io<pos:position pos:line="30" pos:column="40"/></name> <operator pos:line="30" pos:column="41">=<pos:position pos:line="30" pos:column="42"/></operator> <call><name pos:line="30" pos:column="43">time<pos:position pos:line="30" pos:column="47"/></name><argument_list pos:line="30" pos:column="47">(<argument><expr><name pos:line="30" pos:column="48">NULL<pos:position pos:line="30" pos:column="52"/></name></expr></argument>)<pos:position pos:line="30" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="54"/></expr_stmt></block></then></if>
			<continue pos:line="31" pos:column="25">continue;<pos:position pos:line="31" pos:column="34"/></continue>
		}<pos:position pos:line="32" pos:column="18"/></block></then></if>

		<if pos:line="34" pos:column="17">if <condition pos:line="34" pos:column="20">(<expr><name pos:line="34" pos:column="21">n<pos:position pos:line="34" pos:column="22"/></name> <operator pos:line="34" pos:column="23">==<pos:position pos:line="34" pos:column="25"/></operator> <operator pos:line="34" pos:column="26">-<pos:position pos:line="34" pos:column="27"/></operator><literal type="number" pos:line="34" pos:column="27">1<pos:position pos:line="34" pos:column="28"/></literal> <operator pos:line="34" pos:column="29">&amp;&amp;<pos:position pos:line="34" pos:column="39"/></operator> <name pos:line="34" pos:column="32">errno<pos:position pos:line="34" pos:column="37"/></name> <operator pos:line="34" pos:column="38">==<pos:position pos:line="34" pos:column="40"/></operator> <name pos:line="34" pos:column="41">EINTR<pos:position pos:line="34" pos:column="46"/></name></expr>)<pos:position pos:line="34" pos:column="47"/></condition><then pos:line="34" pos:column="47"> <block pos:line="34" pos:column="48">{
			<continue pos:line="35" pos:column="25">continue;<pos:position pos:line="35" pos:column="34"/></continue>
		}<pos:position pos:line="36" pos:column="18"/></block></then></if>

		<if pos:line="38" pos:column="17">if <condition pos:line="38" pos:column="20">(<expr><name pos:line="38" pos:column="21">n<pos:position pos:line="38" pos:column="22"/></name> <operator pos:line="38" pos:column="23">==<pos:position pos:line="38" pos:column="25"/></operator> <operator pos:line="38" pos:column="26">-<pos:position pos:line="38" pos:column="27"/></operator><literal type="number" pos:line="38" pos:column="27">1<pos:position pos:line="38" pos:column="28"/></literal> <operator pos:line="38" pos:column="29">&amp;&amp;<pos:position pos:line="38" pos:column="39"/></operator> 
		    <operator pos:line="39" pos:column="21">(<pos:position pos:line="39" pos:column="22"/></operator><name pos:line="39" pos:column="22">errno<pos:position pos:line="39" pos:column="27"/></name> <operator pos:line="39" pos:column="28">==<pos:position pos:line="39" pos:column="30"/></operator> <name pos:line="39" pos:column="31">EAGAIN<pos:position pos:line="39" pos:column="37"/></name> <operator pos:line="39" pos:column="38">||<pos:position pos:line="39" pos:column="40"/></operator> <name pos:line="39" pos:column="41">errno<pos:position pos:line="39" pos:column="46"/></name> <operator pos:line="39" pos:column="47">==<pos:position pos:line="39" pos:column="49"/></operator> <name pos:line="39" pos:column="50">EWOULDBLOCK<pos:position pos:line="39" pos:column="61"/></name><operator pos:line="39" pos:column="61">)<pos:position pos:line="39" pos:column="62"/></operator></expr>)<pos:position pos:line="39" pos:column="63"/></condition><then pos:line="39" pos:column="63"> <block pos:line="39" pos:column="64">{
			<comment type="block" pos:line="40" pos:column="25">/* this shouldn't happen, if it does then
			   sleep for a short time to prevent us
			   chewing too much CPU */</comment>
			<expr_stmt><expr><call><name pos:line="43" pos:column="25">u_sleep<pos:position pos:line="43" pos:column="32"/></name><argument_list pos:line="43" pos:column="32">(<argument><expr><literal type="number" pos:line="43" pos:column="33">100<pos:position pos:line="43" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="38"/></expr_stmt>
			<continue pos:line="44" pos:column="25">continue;<pos:position pos:line="44" pos:column="34"/></continue>
		}<pos:position pos:line="45" pos:column="18"/></block></then></if>

		<if pos:line="47" pos:column="17">if <condition pos:line="47" pos:column="20">(<expr><name pos:line="47" pos:column="21">n<pos:position pos:line="47" pos:column="22"/></name> <operator pos:line="47" pos:column="23">==<pos:position pos:line="47" pos:column="25"/></operator> <literal type="number" pos:line="47" pos:column="26">0<pos:position pos:line="47" pos:column="27"/></literal></expr>)<pos:position pos:line="47" pos:column="28"/></condition><then pos:line="47" pos:column="28"> <block pos:line="47" pos:column="29">{
			<if pos:line="48" pos:column="25">if <condition pos:line="48" pos:column="28">(<expr><name pos:line="48" pos:column="29">eof_error<pos:position pos:line="48" pos:column="38"/></name></expr>)<pos:position pos:line="48" pos:column="39"/></condition><then pos:line="48" pos:column="39"> <block pos:line="48" pos:column="40">{
				<expr_stmt><expr><call><name pos:line="49" pos:column="33">rprintf<pos:position pos:line="49" pos:column="40"/></name><argument_list pos:line="49" pos:column="40">(<argument><expr><name pos:line="49" pos:column="41">FERROR<pos:position pos:line="49" pos:column="47"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="49" pos:column="48">"EOF in read_timeout\n"<pos:position pos:line="49" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="49" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="73"/></expr_stmt>
			}<pos:position pos:line="50" pos:column="26"/></block></then></if>
			<expr_stmt><expr><call><name pos:line="51" pos:column="25">exit_cleanup<pos:position pos:line="51" pos:column="37"/></name><argument_list pos:line="51" pos:column="37">(<argument><expr><literal type="number" pos:line="51" pos:column="38">1<pos:position pos:line="51" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="51" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="41"/></expr_stmt>
		}<pos:position pos:line="52" pos:column="18"/></block></then></if>

		<expr_stmt><expr><call><name pos:line="54" pos:column="17">rprintf<pos:position pos:line="54" pos:column="24"/></name><argument_list pos:line="54" pos:column="24">(<argument><expr><name pos:line="54" pos:column="25">FERROR<pos:position pos:line="54" pos:column="31"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="54" pos:column="32">"read error: %s\n"<pos:position pos:line="54" pos:column="50"/></literal></expr></argument>, <argument><expr><call><name pos:line="54" pos:column="52">strerror<pos:position pos:line="54" pos:column="60"/></name><argument_list pos:line="54" pos:column="60">(<argument><expr><name pos:line="54" pos:column="61">errno<pos:position pos:line="54" pos:column="66"/></name></expr></argument>)<pos:position pos:line="54" pos:column="67"/></argument_list></call></expr></argument>)<pos:position pos:line="54" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="69"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="55" pos:column="17">exit_cleanup<pos:position pos:line="55" pos:column="29"/></name><argument_list pos:line="55" pos:column="29">(<argument><expr><literal type="number" pos:line="55" pos:column="30">1<pos:position pos:line="55" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="55" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="33"/></expr_stmt>
	}<pos:position pos:line="56" pos:column="10"/></block></while>

	<return pos:line="58" pos:column="9">return <expr><name pos:line="58" pos:column="16">ret<pos:position pos:line="58" pos:column="19"/></name></expr>;<pos:position pos:line="58" pos:column="20"/></return>
}<pos:position pos:line="59" pos:column="2"/></block></function></unit>
