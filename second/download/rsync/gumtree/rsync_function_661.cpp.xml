<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_function_661.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">read_check<pos:position pos:line="1" pos:column="23"/></name><parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><name pos:line="1" pos:column="24">int<pos:position pos:line="1" pos:column="27"/></name></type> <name pos:line="1" pos:column="28">f<pos:position pos:line="1" pos:column="29"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="30"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">n<pos:position pos:line="3" pos:column="14"/></name> <init pos:line="3" pos:column="15">= <expr><literal type="number" pos:line="3" pos:column="17">8192<pos:position pos:line="3" pos:column="21"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="22"/></decl_stmt>

	<if pos:line="5" pos:column="9">if <condition pos:line="5" pos:column="12">(<expr><name pos:line="5" pos:column="13">f<pos:position pos:line="5" pos:column="14"/></name> <operator pos:line="5" pos:column="15">==<pos:position pos:line="5" pos:column="17"/></operator> <operator pos:line="5" pos:column="18">-<pos:position pos:line="5" pos:column="19"/></operator><literal type="number" pos:line="5" pos:column="19">1<pos:position pos:line="5" pos:column="20"/></literal></expr>)<pos:position pos:line="5" pos:column="21"/></condition><then pos:line="5" pos:column="21"> <block type="pseudo"><return pos:line="5" pos:column="22">return;<pos:position pos:line="5" pos:column="29"/></return></block></then></if>

	<if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<expr><name pos:line="7" pos:column="13">read_buffer_len<pos:position pos:line="7" pos:column="28"/></name> <operator pos:line="7" pos:column="29">==<pos:position pos:line="7" pos:column="31"/></operator> <literal type="number" pos:line="7" pos:column="32">0<pos:position pos:line="7" pos:column="33"/></literal></expr>)<pos:position pos:line="7" pos:column="34"/></condition><then pos:line="7" pos:column="34"> <block pos:line="7" pos:column="35">{
		<expr_stmt><expr><name pos:line="8" pos:column="17">read_buffer_p<pos:position pos:line="8" pos:column="30"/></name> <operator pos:line="8" pos:column="31">=<pos:position pos:line="8" pos:column="32"/></operator> <name pos:line="8" pos:column="33">read_buffer<pos:position pos:line="8" pos:column="44"/></name></expr>;<pos:position pos:line="8" pos:column="45"/></expr_stmt>
	}<pos:position pos:line="9" pos:column="10"/></block></then></if>

	<if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><name pos:line="11" pos:column="13">n<pos:position pos:line="11" pos:column="14"/></name> <operator pos:line="11" pos:column="15">&gt;<pos:position pos:line="11" pos:column="19"/></operator> <name pos:line="11" pos:column="17">MAX_READ_BUFFER<pos:position pos:line="11" pos:column="32"/></name><operator pos:line="11" pos:column="32">/<pos:position pos:line="11" pos:column="33"/></operator><literal type="number" pos:line="11" pos:column="33">4<pos:position pos:line="11" pos:column="34"/></literal></expr>)<pos:position pos:line="11" pos:column="35"/></condition><then pos:line="11" pos:column="35">
		<block type="pseudo"><expr_stmt><expr><name pos:line="12" pos:column="17">n<pos:position pos:line="12" pos:column="18"/></name> <operator pos:line="12" pos:column="19">=<pos:position pos:line="12" pos:column="20"/></operator> <name pos:line="12" pos:column="21">MAX_READ_BUFFER<pos:position pos:line="12" pos:column="36"/></name><operator pos:line="12" pos:column="36">/<pos:position pos:line="12" pos:column="37"/></operator><literal type="number" pos:line="12" pos:column="37">4<pos:position pos:line="12" pos:column="38"/></literal></expr>;<pos:position pos:line="12" pos:column="39"/></expr_stmt></block></then></if>

	<if pos:line="14" pos:column="9">if <condition pos:line="14" pos:column="12">(<expr><name pos:line="14" pos:column="13">read_buffer_p<pos:position pos:line="14" pos:column="26"/></name> <operator pos:line="14" pos:column="27">!=<pos:position pos:line="14" pos:column="29"/></operator> <name pos:line="14" pos:column="30">read_buffer<pos:position pos:line="14" pos:column="41"/></name></expr>)<pos:position pos:line="14" pos:column="42"/></condition><then pos:line="14" pos:column="42"> <block pos:line="14" pos:column="43">{
		<expr_stmt><expr><call><name pos:line="15" pos:column="17">memmove<pos:position pos:line="15" pos:column="24"/></name><argument_list pos:line="15" pos:column="24">(<argument><expr><name pos:line="15" pos:column="25">read_buffer<pos:position pos:line="15" pos:column="36"/></name></expr></argument>,<argument><expr><name pos:line="15" pos:column="37">read_buffer_p<pos:position pos:line="15" pos:column="50"/></name></expr></argument>,<argument><expr><name pos:line="15" pos:column="51">read_buffer_len<pos:position pos:line="15" pos:column="66"/></name></expr></argument>)<pos:position pos:line="15" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="68"/></expr_stmt>
		<expr_stmt><expr><name pos:line="16" pos:column="17">read_buffer_p<pos:position pos:line="16" pos:column="30"/></name> <operator pos:line="16" pos:column="31">=<pos:position pos:line="16" pos:column="32"/></operator> <name pos:line="16" pos:column="33">read_buffer<pos:position pos:line="16" pos:column="44"/></name></expr>;<pos:position pos:line="16" pos:column="45"/></expr_stmt>
	}<pos:position pos:line="17" pos:column="10"/></block></then></if>

	<if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><name pos:line="19" pos:column="13">n<pos:position pos:line="19" pos:column="14"/></name> <operator pos:line="19" pos:column="15">&gt;<pos:position pos:line="19" pos:column="19"/></operator> <operator pos:line="19" pos:column="17">(<pos:position pos:line="19" pos:column="18"/></operator><name pos:line="19" pos:column="18">read_buffer_size<pos:position pos:line="19" pos:column="34"/></name> <operator pos:line="19" pos:column="35">-<pos:position pos:line="19" pos:column="36"/></operator> <name pos:line="19" pos:column="37">read_buffer_len<pos:position pos:line="19" pos:column="52"/></name><operator pos:line="19" pos:column="52">)<pos:position pos:line="19" pos:column="53"/></operator></expr>)<pos:position pos:line="19" pos:column="54"/></condition><then pos:line="19" pos:column="54"> <block pos:line="19" pos:column="55">{
		<expr_stmt><expr><name pos:line="20" pos:column="17">read_buffer_size<pos:position pos:line="20" pos:column="33"/></name> <operator pos:line="20" pos:column="34">+=<pos:position pos:line="20" pos:column="36"/></operator> <name pos:line="20" pos:column="37">n<pos:position pos:line="20" pos:column="38"/></name></expr>;<pos:position pos:line="20" pos:column="39"/></expr_stmt>
		<expr_stmt><expr><name pos:line="21" pos:column="17">read_buffer<pos:position pos:line="21" pos:column="28"/></name> <operator pos:line="21" pos:column="29">=<pos:position pos:line="21" pos:column="30"/></operator> <operator pos:line="21" pos:column="31">(<pos:position pos:line="21" pos:column="32"/></operator><name pos:line="21" pos:column="32">char<pos:position pos:line="21" pos:column="36"/></name> <operator pos:line="21" pos:column="37">*<pos:position pos:line="21" pos:column="38"/></operator><operator pos:line="21" pos:column="38">)<pos:position pos:line="21" pos:column="39"/></operator><call><name pos:line="21" pos:column="39">Realloc<pos:position pos:line="21" pos:column="46"/></name><argument_list pos:line="21" pos:column="46">(<argument><expr><name pos:line="21" pos:column="47">read_buffer<pos:position pos:line="21" pos:column="58"/></name></expr></argument>,<argument><expr><name pos:line="21" pos:column="59">read_buffer_size<pos:position pos:line="21" pos:column="75"/></name></expr></argument>)<pos:position pos:line="21" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="77"/></expr_stmt>
		<if pos:line="22" pos:column="17">if <condition pos:line="22" pos:column="20">(<expr><operator pos:line="22" pos:column="21">!<pos:position pos:line="22" pos:column="22"/></operator><name pos:line="22" pos:column="22">read_buffer<pos:position pos:line="22" pos:column="33"/></name></expr>)<pos:position pos:line="22" pos:column="34"/></condition><then pos:line="22" pos:column="34"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="22" pos:column="35">out_of_memory<pos:position pos:line="22" pos:column="48"/></name><argument_list pos:line="22" pos:column="48">(<argument><expr><literal type="string" pos:line="22" pos:column="49">"read check"<pos:position pos:line="22" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="63"/></expr_stmt></block></then></if>      
		<expr_stmt><expr><name pos:line="23" pos:column="17">read_buffer_p<pos:position pos:line="23" pos:column="30"/></name> <operator pos:line="23" pos:column="31">=<pos:position pos:line="23" pos:column="32"/></operator> <name pos:line="23" pos:column="33">read_buffer<pos:position pos:line="23" pos:column="44"/></name></expr>;<pos:position pos:line="23" pos:column="45"/></expr_stmt>      
	}<pos:position pos:line="24" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="26" pos:column="9">n<pos:position pos:line="26" pos:column="10"/></name> <operator pos:line="26" pos:column="11">=<pos:position pos:line="26" pos:column="12"/></operator> <call><name pos:line="26" pos:column="13">read_unbuffered<pos:position pos:line="26" pos:column="28"/></name><argument_list pos:line="26" pos:column="28">(<argument><expr><name pos:line="26" pos:column="29">f<pos:position pos:line="26" pos:column="30"/></name></expr></argument>,<argument><expr><name pos:line="26" pos:column="31">read_buffer<pos:position pos:line="26" pos:column="42"/></name><operator pos:line="26" pos:column="42">+<pos:position pos:line="26" pos:column="43"/></operator><name pos:line="26" pos:column="43">read_buffer_len<pos:position pos:line="26" pos:column="58"/></name></expr></argument>,<argument><expr><name pos:line="26" pos:column="59">n<pos:position pos:line="26" pos:column="60"/></name></expr></argument>)<pos:position pos:line="26" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="62"/></expr_stmt>
	<expr_stmt><expr><name pos:line="27" pos:column="9">read_buffer_len<pos:position pos:line="27" pos:column="24"/></name> <operator pos:line="27" pos:column="25">+=<pos:position pos:line="27" pos:column="27"/></operator> <name pos:line="27" pos:column="28">n<pos:position pos:line="27" pos:column="29"/></name></expr>;<pos:position pos:line="27" pos:column="30"/></expr_stmt>
}<pos:position pos:line="28" pos:column="2"/></block></function></unit>
