<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_939_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">poptParseArgvString<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><specifier pos:line="1" pos:column="25">const<pos:position pos:line="1" pos:column="30"/></specifier> <name pos:line="1" pos:column="31">char<pos:position pos:line="1" pos:column="35"/></name> <modifier pos:line="1" pos:column="36">*<pos:position pos:line="1" pos:column="37"/></modifier></type> <name pos:line="1" pos:column="38">s<pos:position pos:line="1" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="41">int<pos:position pos:line="1" pos:column="44"/></name> <modifier pos:line="1" pos:column="45">*<pos:position pos:line="1" pos:column="46"/></modifier></type> <name pos:line="1" pos:column="47">argcPtr<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="56">const<pos:position pos:line="1" pos:column="61"/></specifier> <name pos:line="1" pos:column="62">char<pos:position pos:line="1" pos:column="66"/></name> <modifier pos:line="1" pos:column="67">*<pos:position pos:line="1" pos:column="68"/></modifier><modifier pos:line="1" pos:column="68">*<pos:position pos:line="1" pos:column="69"/></modifier><modifier pos:line="1" pos:column="69">*<pos:position pos:line="1" pos:column="70"/></modifier></type> <name pos:line="1" pos:column="71">argvPtr<pos:position pos:line="1" pos:column="78"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="79"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><specifier pos:line="3" pos:column="5">const<pos:position pos:line="3" pos:column="10"/></specifier> <name pos:line="3" pos:column="11">char<pos:position pos:line="3" pos:column="15"/></name> <modifier pos:line="3" pos:column="16">*<pos:position pos:line="3" pos:column="17"/></modifier></type> <name pos:line="3" pos:column="18">src<pos:position pos:line="3" pos:column="21"/></name></decl>;<pos:position pos:line="3" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">char<pos:position pos:line="4" pos:column="9"/></name></type> <name pos:line="4" pos:column="10">quote<pos:position pos:line="4" pos:column="15"/></name> <init pos:line="4" pos:column="16">= <expr><literal type="char" pos:line="4" pos:column="18">'\0'<pos:position pos:line="4" pos:column="22"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">int<pos:position pos:line="5" pos:column="8"/></name></type> <name pos:line="5" pos:column="9">argvAlloced<pos:position pos:line="5" pos:column="20"/></name> <init pos:line="5" pos:column="21">= <expr><name pos:line="5" pos:column="23">POPT_ARGV_ARRAY_GROW_DELTA<pos:position pos:line="5" pos:column="49"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="50"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="6" pos:column="5">const<pos:position pos:line="6" pos:column="10"/></specifier> <name pos:line="6" pos:column="11">char<pos:position pos:line="6" pos:column="15"/></name> <modifier pos:line="6" pos:column="16">*<pos:position pos:line="6" pos:column="17"/></modifier><modifier pos:line="6" pos:column="17">*<pos:position pos:line="6" pos:column="18"/></modifier></type> <name pos:line="6" pos:column="19">argv<pos:position pos:line="6" pos:column="23"/></name> <init pos:line="6" pos:column="24">= <expr><call><name pos:line="6" pos:column="26">malloc<pos:position pos:line="6" pos:column="32"/></name><argument_list pos:line="6" pos:column="32">(<argument><expr><sizeof pos:line="6" pos:column="33">sizeof<argument_list pos:line="6" pos:column="39">(<argument><expr><operator pos:line="6" pos:column="40">*<pos:position pos:line="6" pos:column="41"/></operator><name pos:line="6" pos:column="41">argv<pos:position pos:line="6" pos:column="45"/></name></expr></argument>)<pos:position pos:line="6" pos:column="46"/></argument_list></sizeof> <operator pos:line="6" pos:column="47">*<pos:position pos:line="6" pos:column="48"/></operator> <name pos:line="6" pos:column="49">argvAlloced<pos:position pos:line="6" pos:column="60"/></name></expr></argument>)<pos:position pos:line="6" pos:column="61"/></argument_list></call></expr></init></decl>;<pos:position pos:line="6" pos:column="62"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">int<pos:position pos:line="7" pos:column="8"/></name></type> <name pos:line="7" pos:column="9">argc<pos:position pos:line="7" pos:column="13"/></name> <init pos:line="7" pos:column="14">= <expr><literal type="number" pos:line="7" pos:column="16">0<pos:position pos:line="7" pos:column="17"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="18"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">int<pos:position pos:line="8" pos:column="8"/></name></type> <name pos:line="8" pos:column="9">buflen<pos:position pos:line="8" pos:column="15"/></name> <init pos:line="8" pos:column="16">= <expr><call><name pos:line="8" pos:column="18">strlen<pos:position pos:line="8" pos:column="24"/></name><argument_list pos:line="8" pos:column="24">(<argument><expr><name pos:line="8" pos:column="25">s<pos:position pos:line="8" pos:column="26"/></name></expr></argument>)<pos:position pos:line="8" pos:column="27"/></argument_list></call> <operator pos:line="8" pos:column="28">+<pos:position pos:line="8" pos:column="29"/></operator> <literal type="number" pos:line="8" pos:column="30">1<pos:position pos:line="8" pos:column="31"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="32"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">char<pos:position pos:line="9" pos:column="9"/></name> <modifier pos:line="9" pos:column="10">*<pos:position pos:line="9" pos:column="11"/></modifier></type> <name pos:line="9" pos:column="12">buf<pos:position pos:line="9" pos:column="15"/></name> <init pos:line="9" pos:column="16">= <expr><call><name pos:line="9" pos:column="18">memset<pos:position pos:line="9" pos:column="24"/></name><argument_list pos:line="9" pos:column="24">(<argument><expr><call><name pos:line="9" pos:column="25">alloca<pos:position pos:line="9" pos:column="31"/></name><argument_list pos:line="9" pos:column="31">(<argument><expr><name pos:line="9" pos:column="32">buflen<pos:position pos:line="9" pos:column="38"/></name></expr></argument>)<pos:position pos:line="9" pos:column="39"/></argument_list></call></expr></argument>, <argument><expr><literal type="number" pos:line="9" pos:column="41">0<pos:position pos:line="9" pos:column="42"/></literal></expr></argument>, <argument><expr><name pos:line="9" pos:column="44">buflen<pos:position pos:line="9" pos:column="50"/></name></expr></argument>)<pos:position pos:line="9" pos:column="51"/></argument_list></call></expr></init></decl>;<pos:position pos:line="9" pos:column="52"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">int<pos:position pos:line="10" pos:column="8"/></name></type> <name pos:line="10" pos:column="9">rc<pos:position pos:line="10" pos:column="11"/></name> <init pos:line="10" pos:column="12">= <expr><name pos:line="10" pos:column="14">POPT_ERROR_MALLOC<pos:position pos:line="10" pos:column="31"/></name></expr></init></decl>;<pos:position pos:line="10" pos:column="32"/></decl_stmt>

    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><name pos:line="12" pos:column="9">argv<pos:position pos:line="12" pos:column="13"/></name> <operator pos:line="12" pos:column="14">==<pos:position pos:line="12" pos:column="16"/></operator> <name pos:line="12" pos:column="17">NULL<pos:position pos:line="12" pos:column="21"/></name></expr>)<pos:position pos:line="12" pos:column="22"/></condition><then pos:line="12" pos:column="22"> <block type="pseudo"><return pos:line="12" pos:column="23">return <expr><name pos:line="12" pos:column="30">rc<pos:position pos:line="12" pos:column="32"/></name></expr>;<pos:position pos:line="12" pos:column="33"/></return></block></then></if>
    <expr_stmt><expr><name><name pos:line="13" pos:column="5">argv<pos:position pos:line="13" pos:column="9"/></name><index pos:line="13" pos:column="9">[<expr><name pos:line="13" pos:column="10">argc<pos:position pos:line="13" pos:column="14"/></name></expr>]<pos:position pos:line="13" pos:column="15"/></index></name> <operator pos:line="13" pos:column="16">=<pos:position pos:line="13" pos:column="17"/></operator> <name pos:line="13" pos:column="18">buf<pos:position pos:line="13" pos:column="21"/></name></expr>;<pos:position pos:line="13" pos:column="22"/></expr_stmt>

    <for pos:line="15" pos:column="5">for <control pos:line="15" pos:column="9">(<init><expr><name pos:line="15" pos:column="10">src<pos:position pos:line="15" pos:column="13"/></name> <operator pos:line="15" pos:column="14">=<pos:position pos:line="15" pos:column="15"/></operator> <name pos:line="15" pos:column="16">s<pos:position pos:line="15" pos:column="17"/></name></expr>;<pos:position pos:line="15" pos:column="18"/></init> <condition><expr><operator pos:line="15" pos:column="19">*<pos:position pos:line="15" pos:column="20"/></operator><name pos:line="15" pos:column="20">src<pos:position pos:line="15" pos:column="23"/></name> <operator pos:line="15" pos:column="24">!=<pos:position pos:line="15" pos:column="26"/></operator> <literal type="char" pos:line="15" pos:column="27">'\0'<pos:position pos:line="15" pos:column="31"/></literal></expr>;<pos:position pos:line="15" pos:column="32"/></condition> <incr><expr><name pos:line="15" pos:column="33">src<pos:position pos:line="15" pos:column="36"/></name><operator pos:line="15" pos:column="36">++<pos:position pos:line="15" pos:column="38"/></operator></expr></incr>)<pos:position pos:line="15" pos:column="39"/></control> <block pos:line="15" pos:column="40">{
	<if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><name pos:line="16" pos:column="13">quote<pos:position pos:line="16" pos:column="18"/></name> <operator pos:line="16" pos:column="19">==<pos:position pos:line="16" pos:column="21"/></operator> <operator pos:line="16" pos:column="22">*<pos:position pos:line="16" pos:column="23"/></operator><name pos:line="16" pos:column="23">src<pos:position pos:line="16" pos:column="26"/></name></expr>)<pos:position pos:line="16" pos:column="27"/></condition><then pos:line="16" pos:column="27"> <block pos:line="16" pos:column="28">{
	    <expr_stmt><expr><name pos:line="17" pos:column="13">quote<pos:position pos:line="17" pos:column="18"/></name> <operator pos:line="17" pos:column="19">=<pos:position pos:line="17" pos:column="20"/></operator> <literal type="char" pos:line="17" pos:column="21">'\0'<pos:position pos:line="17" pos:column="25"/></literal></expr>;<pos:position pos:line="17" pos:column="26"/></expr_stmt>
	}<pos:position pos:line="18" pos:column="10"/></block></then> <elseif pos:line="18" pos:column="11">else <if pos:line="18" pos:column="16">if <condition pos:line="18" pos:column="19">(<expr><name pos:line="18" pos:column="20">quote<pos:position pos:line="18" pos:column="25"/></name> <operator pos:line="18" pos:column="26">!=<pos:position pos:line="18" pos:column="28"/></operator> <literal type="char" pos:line="18" pos:column="29">'\0'<pos:position pos:line="18" pos:column="33"/></literal></expr>)<pos:position pos:line="18" pos:column="34"/></condition><then pos:line="18" pos:column="34"> <block pos:line="18" pos:column="35">{
	    <if pos:line="19" pos:column="13">if <condition pos:line="19" pos:column="16">(<expr><operator pos:line="19" pos:column="17">*<pos:position pos:line="19" pos:column="18"/></operator><name pos:line="19" pos:column="18">src<pos:position pos:line="19" pos:column="21"/></name> <operator pos:line="19" pos:column="22">==<pos:position pos:line="19" pos:column="24"/></operator> <literal type="char" pos:line="19" pos:column="25">'\\'<pos:position pos:line="19" pos:column="29"/></literal></expr>)<pos:position pos:line="19" pos:column="30"/></condition><then pos:line="19" pos:column="30"> <block pos:line="19" pos:column="31">{
		<expr_stmt><expr><name pos:line="20" pos:column="17">src<pos:position pos:line="20" pos:column="20"/></name><operator pos:line="20" pos:column="20">++<pos:position pos:line="20" pos:column="22"/></operator></expr>;<pos:position pos:line="20" pos:column="23"/></expr_stmt>
		<if pos:line="21" pos:column="17">if <condition pos:line="21" pos:column="20">(<expr><operator pos:line="21" pos:column="21">!<pos:position pos:line="21" pos:column="22"/></operator><operator pos:line="21" pos:column="22">*<pos:position pos:line="21" pos:column="23"/></operator><name pos:line="21" pos:column="23">src<pos:position pos:line="21" pos:column="26"/></name></expr>)<pos:position pos:line="21" pos:column="27"/></condition><then pos:line="21" pos:column="27"> <block pos:line="21" pos:column="28">{
		    <expr_stmt><expr><name pos:line="22" pos:column="21">rc<pos:position pos:line="22" pos:column="23"/></name> <operator pos:line="22" pos:column="24">=<pos:position pos:line="22" pos:column="25"/></operator> <name pos:line="22" pos:column="26">POPT_ERROR_BADQUOTE<pos:position pos:line="22" pos:column="45"/></name></expr>;<pos:position pos:line="22" pos:column="46"/></expr_stmt>
		    <goto pos:line="23" pos:column="21">goto <name pos:line="23" pos:column="26">exit<pos:position pos:line="23" pos:column="30"/></name>;<pos:position pos:line="23" pos:column="31"/></goto>
		}<pos:position pos:line="24" pos:column="18"/></block></then></if>
		<if pos:line="25" pos:column="17">if <condition pos:line="25" pos:column="20">(<expr><operator pos:line="25" pos:column="21">*<pos:position pos:line="25" pos:column="22"/></operator><name pos:line="25" pos:column="22">src<pos:position pos:line="25" pos:column="25"/></name> <operator pos:line="25" pos:column="26">!=<pos:position pos:line="25" pos:column="28"/></operator> <name pos:line="25" pos:column="29">quote<pos:position pos:line="25" pos:column="34"/></name></expr>)<pos:position pos:line="25" pos:column="35"/></condition><then pos:line="25" pos:column="35"> <block type="pseudo"><expr_stmt><expr><operator pos:line="25" pos:column="36">*<pos:position pos:line="25" pos:column="37"/></operator><name pos:line="25" pos:column="37">buf<pos:position pos:line="25" pos:column="40"/></name><operator pos:line="25" pos:column="40">++<pos:position pos:line="25" pos:column="42"/></operator> <operator pos:line="25" pos:column="43">=<pos:position pos:line="25" pos:column="44"/></operator> <literal type="char" pos:line="25" pos:column="45">'\\'<pos:position pos:line="25" pos:column="49"/></literal></expr>;<pos:position pos:line="25" pos:column="50"/></expr_stmt></block></then></if>
	    }<pos:position pos:line="26" pos:column="14"/></block></then></if>
	    <expr_stmt><expr><operator pos:line="27" pos:column="13">*<pos:position pos:line="27" pos:column="14"/></operator><name pos:line="27" pos:column="14">buf<pos:position pos:line="27" pos:column="17"/></name><operator pos:line="27" pos:column="17">++<pos:position pos:line="27" pos:column="19"/></operator> <operator pos:line="27" pos:column="20">=<pos:position pos:line="27" pos:column="21"/></operator> <operator pos:line="27" pos:column="22">*<pos:position pos:line="27" pos:column="23"/></operator><name pos:line="27" pos:column="23">src<pos:position pos:line="27" pos:column="26"/></name></expr>;<pos:position pos:line="27" pos:column="27"/></expr_stmt>
	}<pos:position pos:line="28" pos:column="10"/></block></then></if></elseif> <elseif pos:line="28" pos:column="11">else <if pos:line="28" pos:column="16">if <condition pos:line="28" pos:column="19">(<expr><call><name pos:line="28" pos:column="20">isSpace<pos:position pos:line="28" pos:column="27"/></name><argument_list pos:line="28" pos:column="27">(<argument><expr><name pos:line="28" pos:column="28">src<pos:position pos:line="28" pos:column="31"/></name></expr></argument>)<pos:position pos:line="28" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="28" pos:column="33"/></condition><then pos:line="28" pos:column="33"> <block pos:line="28" pos:column="34">{
	    <if pos:line="29" pos:column="13">if <condition pos:line="29" pos:column="16">(<expr><operator pos:line="29" pos:column="17">*<pos:position pos:line="29" pos:column="18"/></operator><name><name pos:line="29" pos:column="18">argv<pos:position pos:line="29" pos:column="22"/></name><index pos:line="29" pos:column="22">[<expr><name pos:line="29" pos:column="23">argc<pos:position pos:line="29" pos:column="27"/></name></expr>]<pos:position pos:line="29" pos:column="28"/></index></name> <operator pos:line="29" pos:column="29">!=<pos:position pos:line="29" pos:column="31"/></operator> <literal type="char" pos:line="29" pos:column="32">'\0'<pos:position pos:line="29" pos:column="36"/></literal></expr>)<pos:position pos:line="29" pos:column="37"/></condition><then pos:line="29" pos:column="37"> <block pos:line="29" pos:column="38">{
		<expr_stmt><expr><name pos:line="30" pos:column="17">buf<pos:position pos:line="30" pos:column="20"/></name><operator pos:line="30" pos:column="20">++<pos:position pos:line="30" pos:column="22"/></operator></expr><operator pos:line="30" pos:column="22">,<pos:position pos:line="30" pos:column="23"/></operator> <expr><name pos:line="30" pos:column="24">argc<pos:position pos:line="30" pos:column="28"/></name><operator pos:line="30" pos:column="28">++<pos:position pos:line="30" pos:column="30"/></operator></expr>;<pos:position pos:line="30" pos:column="31"/></expr_stmt>
		<if pos:line="31" pos:column="17">if <condition pos:line="31" pos:column="20">(<expr><name pos:line="31" pos:column="21">argc<pos:position pos:line="31" pos:column="25"/></name> <operator pos:line="31" pos:column="26">==<pos:position pos:line="31" pos:column="28"/></operator> <name pos:line="31" pos:column="29">argvAlloced<pos:position pos:line="31" pos:column="40"/></name></expr>)<pos:position pos:line="31" pos:column="41"/></condition><then pos:line="31" pos:column="41"> <block pos:line="31" pos:column="42">{
		    <expr_stmt><expr><name pos:line="32" pos:column="21">argvAlloced<pos:position pos:line="32" pos:column="32"/></name> <operator pos:line="32" pos:column="33">+=<pos:position pos:line="32" pos:column="35"/></operator> <name pos:line="32" pos:column="36">POPT_ARGV_ARRAY_GROW_DELTA<pos:position pos:line="32" pos:column="62"/></name></expr>;<pos:position pos:line="32" pos:column="63"/></expr_stmt>
		    <expr_stmt><expr><name pos:line="33" pos:column="21">argv<pos:position pos:line="33" pos:column="25"/></name> <operator pos:line="33" pos:column="26">=<pos:position pos:line="33" pos:column="27"/></operator> <call><name pos:line="33" pos:column="28">realloc<pos:position pos:line="33" pos:column="35"/></name><argument_list pos:line="33" pos:column="35">(<argument><expr><name pos:line="33" pos:column="36">argv<pos:position pos:line="33" pos:column="40"/></name></expr></argument>, <argument><expr><sizeof pos:line="33" pos:column="42">sizeof<argument_list pos:line="33" pos:column="48">(<argument><expr><operator pos:line="33" pos:column="49">*<pos:position pos:line="33" pos:column="50"/></operator><name pos:line="33" pos:column="50">argv<pos:position pos:line="33" pos:column="54"/></name></expr></argument>)<pos:position pos:line="33" pos:column="55"/></argument_list></sizeof> <operator pos:line="33" pos:column="56">*<pos:position pos:line="33" pos:column="57"/></operator> <name pos:line="33" pos:column="58">argvAlloced<pos:position pos:line="33" pos:column="69"/></name></expr></argument>)<pos:position pos:line="33" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="71"/></expr_stmt>
		    <if pos:line="34" pos:column="21">if <condition pos:line="34" pos:column="24">(<expr><name pos:line="34" pos:column="25">argv<pos:position pos:line="34" pos:column="29"/></name> <operator pos:line="34" pos:column="30">==<pos:position pos:line="34" pos:column="32"/></operator> <name pos:line="34" pos:column="33">NULL<pos:position pos:line="34" pos:column="37"/></name></expr>)<pos:position pos:line="34" pos:column="38"/></condition><then pos:line="34" pos:column="38"> <block type="pseudo"><goto pos:line="34" pos:column="39">goto <name pos:line="34" pos:column="44">exit<pos:position pos:line="34" pos:column="48"/></name>;<pos:position pos:line="34" pos:column="49"/></goto></block></then></if>
		}<pos:position pos:line="35" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name><name pos:line="36" pos:column="17">argv<pos:position pos:line="36" pos:column="21"/></name><index pos:line="36" pos:column="21">[<expr><name pos:line="36" pos:column="22">argc<pos:position pos:line="36" pos:column="26"/></name></expr>]<pos:position pos:line="36" pos:column="27"/></index></name> <operator pos:line="36" pos:column="28">=<pos:position pos:line="36" pos:column="29"/></operator> <name pos:line="36" pos:column="30">buf<pos:position pos:line="36" pos:column="33"/></name></expr>;<pos:position pos:line="36" pos:column="34"/></expr_stmt>
	    }<pos:position pos:line="37" pos:column="14"/></block></then></if>
	}<pos:position pos:line="38" pos:column="10"/></block></then></if></elseif> <else pos:line="38" pos:column="11">else <block type="pseudo"><switch pos:line="38" pos:column="16">switch <condition pos:line="38" pos:column="23">(<expr><operator pos:line="38" pos:column="24">*<pos:position pos:line="38" pos:column="25"/></operator><name pos:line="38" pos:column="25">src<pos:position pos:line="38" pos:column="28"/></name></expr>)<pos:position pos:line="38" pos:column="29"/></condition> <block pos:line="38" pos:column="30">{
	  <case pos:line="39" pos:column="11">case <expr><literal type="char" pos:line="39" pos:column="16">'"'<pos:position pos:line="39" pos:column="19"/></literal></expr>:<pos:position pos:line="39" pos:column="20"/></case>
	  <case pos:line="40" pos:column="11">case <expr><literal type="char" pos:line="40" pos:column="16">'\''<pos:position pos:line="40" pos:column="20"/></literal></expr>:<pos:position pos:line="40" pos:column="21"/></case>
	    <expr_stmt><expr><name pos:line="41" pos:column="13">quote<pos:position pos:line="41" pos:column="18"/></name> <operator pos:line="41" pos:column="19">=<pos:position pos:line="41" pos:column="20"/></operator> <operator pos:line="41" pos:column="21">*<pos:position pos:line="41" pos:column="22"/></operator><name pos:line="41" pos:column="22">src<pos:position pos:line="41" pos:column="25"/></name></expr>;<pos:position pos:line="41" pos:column="26"/></expr_stmt>
	    <comment type="block" pos:line="42" pos:column="13">/*@switchbreak@*/</comment> <break pos:line="42" pos:column="31">break;<pos:position pos:line="42" pos:column="37"/></break>
	  <case pos:line="43" pos:column="11">case <expr><literal type="char" pos:line="43" pos:column="16">'\\'<pos:position pos:line="43" pos:column="20"/></literal></expr>:<pos:position pos:line="43" pos:column="21"/></case>
	    <expr_stmt><expr><name pos:line="44" pos:column="13">src<pos:position pos:line="44" pos:column="16"/></name><operator pos:line="44" pos:column="16">++<pos:position pos:line="44" pos:column="18"/></operator></expr>;<pos:position pos:line="44" pos:column="19"/></expr_stmt>
	    <if pos:line="45" pos:column="13">if <condition pos:line="45" pos:column="16">(<expr><operator pos:line="45" pos:column="17">!<pos:position pos:line="45" pos:column="18"/></operator><operator pos:line="45" pos:column="18">*<pos:position pos:line="45" pos:column="19"/></operator><name pos:line="45" pos:column="19">src<pos:position pos:line="45" pos:column="22"/></name></expr>)<pos:position pos:line="45" pos:column="23"/></condition><then pos:line="45" pos:column="23"> <block pos:line="45" pos:column="24">{
		<expr_stmt><expr><name pos:line="46" pos:column="17">rc<pos:position pos:line="46" pos:column="19"/></name> <operator pos:line="46" pos:column="20">=<pos:position pos:line="46" pos:column="21"/></operator> <name pos:line="46" pos:column="22">POPT_ERROR_BADQUOTE<pos:position pos:line="46" pos:column="41"/></name></expr>;<pos:position pos:line="46" pos:column="42"/></expr_stmt>
		<goto pos:line="47" pos:column="17">goto <name pos:line="47" pos:column="22">exit<pos:position pos:line="47" pos:column="26"/></name>;<pos:position pos:line="47" pos:column="27"/></goto>
	    }<pos:position pos:line="48" pos:column="14"/></block></then></if>
	    <comment type="block" pos:line="49" pos:column="13">/*@fallthrough@*/</comment>
	  <default pos:line="50" pos:column="11">default:<pos:position pos:line="50" pos:column="19"/></default>
	    <expr_stmt><expr><operator pos:line="51" pos:column="13">*<pos:position pos:line="51" pos:column="14"/></operator><name pos:line="51" pos:column="14">buf<pos:position pos:line="51" pos:column="17"/></name><operator pos:line="51" pos:column="17">++<pos:position pos:line="51" pos:column="19"/></operator> <operator pos:line="51" pos:column="20">=<pos:position pos:line="51" pos:column="21"/></operator> <operator pos:line="51" pos:column="22">*<pos:position pos:line="51" pos:column="23"/></operator><name pos:line="51" pos:column="23">src<pos:position pos:line="51" pos:column="26"/></name></expr>;<pos:position pos:line="51" pos:column="27"/></expr_stmt>
	    <comment type="block" pos:line="52" pos:column="13">/*@switchbreak@*/</comment> <break pos:line="52" pos:column="31">break;<pos:position pos:line="52" pos:column="37"/></break>
	}<pos:position pos:line="53" pos:column="10"/></block></switch></block></else></if>
    }<pos:position pos:line="54" pos:column="6"/></block></for>

    <if pos:line="56" pos:column="5">if <condition pos:line="56" pos:column="8">(<expr><call><name pos:line="56" pos:column="9">strlen<pos:position pos:line="56" pos:column="15"/></name><argument_list pos:line="56" pos:column="15">(<argument><expr><name><name pos:line="56" pos:column="16">argv<pos:position pos:line="56" pos:column="20"/></name><index pos:line="56" pos:column="20">[<expr><name pos:line="56" pos:column="21">argc<pos:position pos:line="56" pos:column="25"/></name></expr>]<pos:position pos:line="56" pos:column="26"/></index></name></expr></argument>)<pos:position pos:line="56" pos:column="27"/></argument_list></call></expr>)<pos:position pos:line="56" pos:column="28"/></condition><then pos:line="56" pos:column="28"> <block pos:line="56" pos:column="29">{
	<expr_stmt><expr><name pos:line="57" pos:column="9">argc<pos:position pos:line="57" pos:column="13"/></name><operator pos:line="57" pos:column="13">++<pos:position pos:line="57" pos:column="15"/></operator></expr><operator pos:line="57" pos:column="15">,<pos:position pos:line="57" pos:column="16"/></operator> <expr><name pos:line="57" pos:column="17">buf<pos:position pos:line="57" pos:column="20"/></name><operator pos:line="57" pos:column="20">++<pos:position pos:line="57" pos:column="22"/></operator></expr>;<pos:position pos:line="57" pos:column="23"/></expr_stmt>
    }<pos:position pos:line="58" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="60" pos:column="5">rc<pos:position pos:line="60" pos:column="7"/></name> <operator pos:line="60" pos:column="8">=<pos:position pos:line="60" pos:column="9"/></operator> <call><name pos:line="60" pos:column="10">poptDupArgv<pos:position pos:line="60" pos:column="21"/></name><argument_list pos:line="60" pos:column="21">(<argument><expr><name pos:line="60" pos:column="22">argc<pos:position pos:line="60" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="60" pos:column="28">argv<pos:position pos:line="60" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="60" pos:column="34">argcPtr<pos:position pos:line="60" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="60" pos:column="43">argvPtr<pos:position pos:line="60" pos:column="50"/></name></expr></argument>)<pos:position pos:line="60" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="52"/></expr_stmt>

<label><name pos:line="62" pos:column="1">exit<pos:position pos:line="62" pos:column="5"/></name>:<pos:position pos:line="62" pos:column="6"/></label>
    <if pos:line="63" pos:column="5">if <condition pos:line="63" pos:column="8">(<expr><name pos:line="63" pos:column="9">argv<pos:position pos:line="63" pos:column="13"/></name></expr>)<pos:position pos:line="63" pos:column="14"/></condition><then pos:line="63" pos:column="14"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="63" pos:column="15">free<pos:position pos:line="63" pos:column="19"/></name><argument_list pos:line="63" pos:column="19">(<argument><expr><name pos:line="63" pos:column="20">argv<pos:position pos:line="63" pos:column="24"/></name></expr></argument>)<pos:position pos:line="63" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="26"/></expr_stmt></block></then></if>
    <return pos:line="64" pos:column="5">return <expr><name pos:line="64" pos:column="12">rc<pos:position pos:line="64" pos:column="14"/></name></expr>;<pos:position pos:line="64" pos:column="15"/></return>
}<pos:position pos:line="65" pos:column="2"/></block></function></unit>
