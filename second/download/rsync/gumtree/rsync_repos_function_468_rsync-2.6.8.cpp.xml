<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_468_rsync-2.6.8.cpp" pos:tabs="8"><function_decl><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name> <name pos:line="1" pos:column="5">ZEXPORT<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">deflateSetDictionary<pos:position pos:line="1" pos:column="33"/></name> <parameter_list pos:line="1" pos:column="34">(<parameter><decl><type><name pos:line="1" pos:column="35">strm<pos:position pos:line="1" pos:column="39"/></name></type></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="41">dictionary<pos:position pos:line="1" pos:column="51"/></name></type></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="53">dictLength<pos:position pos:line="1" pos:column="63"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="64"/></parameter_list>
    <decl_stmt><decl><type><name pos:line="2" pos:column="5">z_streamp<pos:position pos:line="2" pos:column="14"/></name></type> <name pos:line="2" pos:column="15">strm<pos:position pos:line="2" pos:column="19"/></name></decl>;<pos:position pos:line="2" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="3" pos:column="5">const<pos:position pos:line="3" pos:column="10"/></specifier> <name pos:line="3" pos:column="11">Bytef<pos:position pos:line="3" pos:column="16"/></name> <modifier pos:line="3" pos:column="17">*<pos:position pos:line="3" pos:column="18"/></modifier></type><name pos:line="3" pos:column="18">dictionary<pos:position pos:line="3" pos:column="28"/></name></decl>;<pos:position pos:line="3" pos:column="29"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">uInt<pos:position pos:line="4" pos:column="9"/></name></type>  <name pos:line="4" pos:column="11">dictLength<pos:position pos:line="4" pos:column="21"/></name></decl>;<pos:position pos:line="4" pos:column="22"/></decl_stmt>
<block pos:line="5" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">deflate_state<pos:position pos:line="6" pos:column="18"/></name> <modifier pos:line="6" pos:column="19">*<pos:position pos:line="6" pos:column="20"/></modifier></type><name pos:line="6" pos:column="20">s<pos:position pos:line="6" pos:column="21"/></name></decl>;<pos:position pos:line="6" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">uInt<pos:position pos:line="7" pos:column="9"/></name></type> <name pos:line="7" pos:column="10">length<pos:position pos:line="7" pos:column="16"/></name> <init pos:line="7" pos:column="17">= <expr><name pos:line="7" pos:column="19">dictLength<pos:position pos:line="7" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="30"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">uInt<pos:position pos:line="8" pos:column="9"/></name></type> <name pos:line="8" pos:column="10">n<pos:position pos:line="8" pos:column="11"/></name></decl>;<pos:position pos:line="8" pos:column="12"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">IPos<pos:position pos:line="9" pos:column="9"/></name></type> <name pos:line="9" pos:column="10">hash_head<pos:position pos:line="9" pos:column="19"/></name> <init pos:line="9" pos:column="20">= <expr><literal type="number" pos:line="9" pos:column="22">0<pos:position pos:line="9" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="24"/></decl_stmt>

    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><name pos:line="11" pos:column="9">strm<pos:position pos:line="11" pos:column="13"/></name> <operator pos:line="11" pos:column="14">==<pos:position pos:line="11" pos:column="16"/></operator> <name pos:line="11" pos:column="17">Z_NULL<pos:position pos:line="11" pos:column="23"/></name> <operator pos:line="11" pos:column="24">||<pos:position pos:line="11" pos:column="26"/></operator> <name><name pos:line="11" pos:column="27">strm<pos:position pos:line="11" pos:column="31"/></name><operator pos:line="11" pos:column="31">-&gt;<pos:position pos:line="11" pos:column="36"/></operator><name pos:line="11" pos:column="33">state<pos:position pos:line="11" pos:column="38"/></name></name> <operator pos:line="11" pos:column="39">==<pos:position pos:line="11" pos:column="41"/></operator> <name pos:line="11" pos:column="42">Z_NULL<pos:position pos:line="11" pos:column="48"/></name> <operator pos:line="11" pos:column="49">||<pos:position pos:line="11" pos:column="51"/></operator> <name pos:line="11" pos:column="52">dictionary<pos:position pos:line="11" pos:column="62"/></name> <operator pos:line="11" pos:column="63">==<pos:position pos:line="11" pos:column="65"/></operator> <name pos:line="11" pos:column="66">Z_NULL<pos:position pos:line="11" pos:column="72"/></name> <operator pos:line="11" pos:column="73">||<pos:position pos:line="11" pos:column="75"/></operator>
        <name><name pos:line="12" pos:column="9">strm<pos:position pos:line="12" pos:column="13"/></name><operator pos:line="12" pos:column="13">-&gt;<pos:position pos:line="12" pos:column="18"/></operator><name pos:line="12" pos:column="15">state<pos:position pos:line="12" pos:column="20"/></name><operator pos:line="12" pos:column="20">-&gt;<pos:position pos:line="12" pos:column="25"/></operator><name pos:line="12" pos:column="22">wrap<pos:position pos:line="12" pos:column="26"/></name></name> <operator pos:line="12" pos:column="27">==<pos:position pos:line="12" pos:column="29"/></operator> <literal type="number" pos:line="12" pos:column="30">2<pos:position pos:line="12" pos:column="31"/></literal> <operator pos:line="12" pos:column="32">||<pos:position pos:line="12" pos:column="34"/></operator>
        <operator pos:line="13" pos:column="9">(<pos:position pos:line="13" pos:column="10"/></operator><name><name pos:line="13" pos:column="10">strm<pos:position pos:line="13" pos:column="14"/></name><operator pos:line="13" pos:column="14">-&gt;<pos:position pos:line="13" pos:column="19"/></operator><name pos:line="13" pos:column="16">state<pos:position pos:line="13" pos:column="21"/></name><operator pos:line="13" pos:column="21">-&gt;<pos:position pos:line="13" pos:column="26"/></operator><name pos:line="13" pos:column="23">wrap<pos:position pos:line="13" pos:column="27"/></name></name> <operator pos:line="13" pos:column="28">==<pos:position pos:line="13" pos:column="30"/></operator> <literal type="number" pos:line="13" pos:column="31">1<pos:position pos:line="13" pos:column="32"/></literal> <operator pos:line="13" pos:column="33">&amp;&amp;<pos:position pos:line="13" pos:column="43"/></operator> <name><name pos:line="13" pos:column="36">strm<pos:position pos:line="13" pos:column="40"/></name><operator pos:line="13" pos:column="40">-&gt;<pos:position pos:line="13" pos:column="45"/></operator><name pos:line="13" pos:column="42">state<pos:position pos:line="13" pos:column="47"/></name><operator pos:line="13" pos:column="47">-&gt;<pos:position pos:line="13" pos:column="52"/></operator><name pos:line="13" pos:column="49">status<pos:position pos:line="13" pos:column="55"/></name></name> <operator pos:line="13" pos:column="56">!=<pos:position pos:line="13" pos:column="58"/></operator> <name pos:line="13" pos:column="59">INIT_STATE<pos:position pos:line="13" pos:column="69"/></name><operator pos:line="13" pos:column="69">)<pos:position pos:line="13" pos:column="70"/></operator></expr>)<pos:position pos:line="13" pos:column="71"/></condition><then pos:line="13" pos:column="71">
        <block type="pseudo"><return pos:line="14" pos:column="9">return <expr><name pos:line="14" pos:column="16">Z_STREAM_ERROR<pos:position pos:line="14" pos:column="30"/></name></expr>;<pos:position pos:line="14" pos:column="31"/></return></block></then></if>

    <expr_stmt><expr><name pos:line="16" pos:column="5">s<pos:position pos:line="16" pos:column="6"/></name> <operator pos:line="16" pos:column="7">=<pos:position pos:line="16" pos:column="8"/></operator> <name><name pos:line="16" pos:column="9">strm<pos:position pos:line="16" pos:column="13"/></name><operator pos:line="16" pos:column="13">-&gt;<pos:position pos:line="16" pos:column="18"/></operator><name pos:line="16" pos:column="15">state<pos:position pos:line="16" pos:column="20"/></name></name></expr>;<pos:position pos:line="16" pos:column="21"/></expr_stmt>
    <if pos:line="17" pos:column="5">if <condition pos:line="17" pos:column="8">(<expr><name><name pos:line="17" pos:column="9">s<pos:position pos:line="17" pos:column="10"/></name><operator pos:line="17" pos:column="10">-&gt;<pos:position pos:line="17" pos:column="15"/></operator><name pos:line="17" pos:column="12">wrap<pos:position pos:line="17" pos:column="16"/></name></name></expr>)<pos:position pos:line="17" pos:column="17"/></condition><then pos:line="17" pos:column="17">
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="18" pos:column="9">strm<pos:position pos:line="18" pos:column="13"/></name><operator pos:line="18" pos:column="13">-&gt;<pos:position pos:line="18" pos:column="18"/></operator><name pos:line="18" pos:column="15">adler<pos:position pos:line="18" pos:column="20"/></name></name> <operator pos:line="18" pos:column="21">=<pos:position pos:line="18" pos:column="22"/></operator> <call><name pos:line="18" pos:column="23">adler32<pos:position pos:line="18" pos:column="30"/></name><argument_list pos:line="18" pos:column="30">(<argument><expr><name><name pos:line="18" pos:column="31">strm<pos:position pos:line="18" pos:column="35"/></name><operator pos:line="18" pos:column="35">-&gt;<pos:position pos:line="18" pos:column="40"/></operator><name pos:line="18" pos:column="37">adler<pos:position pos:line="18" pos:column="42"/></name></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="44">dictionary<pos:position pos:line="18" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="56">dictLength<pos:position pos:line="18" pos:column="66"/></name></expr></argument>)<pos:position pos:line="18" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="68"/></expr_stmt></block></then></if>

    <if pos:line="20" pos:column="5">if <condition pos:line="20" pos:column="8">(<expr><name pos:line="20" pos:column="9">length<pos:position pos:line="20" pos:column="15"/></name> <operator pos:line="20" pos:column="16">&lt;<pos:position pos:line="20" pos:column="20"/></operator> <name pos:line="20" pos:column="18">MIN_MATCH<pos:position pos:line="20" pos:column="27"/></name></expr>)<pos:position pos:line="20" pos:column="28"/></condition><then pos:line="20" pos:column="28"> <block type="pseudo"><return pos:line="20" pos:column="29">return <expr><name pos:line="20" pos:column="36">Z_OK<pos:position pos:line="20" pos:column="40"/></name></expr>;<pos:position pos:line="20" pos:column="41"/></return></block></then></if>
    <if pos:line="21" pos:column="5">if <condition pos:line="21" pos:column="8">(<expr><name pos:line="21" pos:column="9">length<pos:position pos:line="21" pos:column="15"/></name> <operator pos:line="21" pos:column="16">&gt;<pos:position pos:line="21" pos:column="20"/></operator> <call><name pos:line="21" pos:column="18">MAX_DIST<pos:position pos:line="21" pos:column="26"/></name><argument_list pos:line="21" pos:column="26">(<argument><expr><name pos:line="21" pos:column="27">s<pos:position pos:line="21" pos:column="28"/></name></expr></argument>)<pos:position pos:line="21" pos:column="29"/></argument_list></call></expr>)<pos:position pos:line="21" pos:column="30"/></condition><then pos:line="21" pos:column="30"> <block pos:line="21" pos:column="31">{
        <expr_stmt><expr><name pos:line="22" pos:column="9">length<pos:position pos:line="22" pos:column="15"/></name> <operator pos:line="22" pos:column="16">=<pos:position pos:line="22" pos:column="17"/></operator> <call><name pos:line="22" pos:column="18">MAX_DIST<pos:position pos:line="22" pos:column="26"/></name><argument_list pos:line="22" pos:column="26">(<argument><expr><name pos:line="22" pos:column="27">s<pos:position pos:line="22" pos:column="28"/></name></expr></argument>)<pos:position pos:line="22" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="30"/></expr_stmt>
        <expr_stmt><expr><name pos:line="23" pos:column="9">dictionary<pos:position pos:line="23" pos:column="19"/></name> <operator pos:line="23" pos:column="20">+=<pos:position pos:line="23" pos:column="22"/></operator> <name pos:line="23" pos:column="23">dictLength<pos:position pos:line="23" pos:column="33"/></name> <operator pos:line="23" pos:column="34">-<pos:position pos:line="23" pos:column="35"/></operator> <name pos:line="23" pos:column="36">length<pos:position pos:line="23" pos:column="42"/></name></expr>;<pos:position pos:line="23" pos:column="43"/></expr_stmt> <comment type="block" pos:line="23" pos:column="44">/* use the tail of the dictionary */</comment>
    }<pos:position pos:line="24" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="25" pos:column="5">zmemcpy<pos:position pos:line="25" pos:column="12"/></name><argument_list pos:line="25" pos:column="12">(<argument><expr><name><name pos:line="25" pos:column="13">s<pos:position pos:line="25" pos:column="14"/></name><operator pos:line="25" pos:column="14">-&gt;<pos:position pos:line="25" pos:column="19"/></operator><name pos:line="25" pos:column="16">window<pos:position pos:line="25" pos:column="22"/></name></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="24">dictionary<pos:position pos:line="25" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="36">length<pos:position pos:line="25" pos:column="42"/></name></expr></argument>)<pos:position pos:line="25" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="44"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="26" pos:column="5">s<pos:position pos:line="26" pos:column="6"/></name><operator pos:line="26" pos:column="6">-&gt;<pos:position pos:line="26" pos:column="11"/></operator><name pos:line="26" pos:column="8">strstart<pos:position pos:line="26" pos:column="16"/></name></name> <operator pos:line="26" pos:column="17">=<pos:position pos:line="26" pos:column="18"/></operator> <name pos:line="26" pos:column="19">length<pos:position pos:line="26" pos:column="25"/></name></expr>;<pos:position pos:line="26" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="27" pos:column="5">s<pos:position pos:line="27" pos:column="6"/></name><operator pos:line="27" pos:column="6">-&gt;<pos:position pos:line="27" pos:column="11"/></operator><name pos:line="27" pos:column="8">block_start<pos:position pos:line="27" pos:column="19"/></name></name> <operator pos:line="27" pos:column="20">=<pos:position pos:line="27" pos:column="21"/></operator> <operator pos:line="27" pos:column="22">(<pos:position pos:line="27" pos:column="23"/></operator><name pos:line="27" pos:column="23">long<pos:position pos:line="27" pos:column="27"/></name><operator pos:line="27" pos:column="27">)<pos:position pos:line="27" pos:column="28"/></operator><name pos:line="27" pos:column="28">length<pos:position pos:line="27" pos:column="34"/></name></expr>;<pos:position pos:line="27" pos:column="35"/></expr_stmt>

    <comment type="block" pos:line="29" pos:column="5">/* Insert all strings in the hash table (except for the last two bytes).
     * s-&gt;lookahead stays null, so s-&gt;ins_h will be recomputed at the next
     * call of fill_window.
     */</comment>
    <expr_stmt><expr><name><name pos:line="33" pos:column="5">s<pos:position pos:line="33" pos:column="6"/></name><operator pos:line="33" pos:column="6">-&gt;<pos:position pos:line="33" pos:column="11"/></operator><name pos:line="33" pos:column="8">ins_h<pos:position pos:line="33" pos:column="13"/></name></name> <operator pos:line="33" pos:column="14">=<pos:position pos:line="33" pos:column="15"/></operator> <name><name pos:line="33" pos:column="16">s<pos:position pos:line="33" pos:column="17"/></name><operator pos:line="33" pos:column="17">-&gt;<pos:position pos:line="33" pos:column="22"/></operator><name pos:line="33" pos:column="19">window<pos:position pos:line="33" pos:column="25"/></name><index pos:line="33" pos:column="25">[<expr><literal type="number" pos:line="33" pos:column="26">0<pos:position pos:line="33" pos:column="27"/></literal></expr>]<pos:position pos:line="33" pos:column="28"/></index></name></expr>;<pos:position pos:line="33" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="34" pos:column="5">UPDATE_HASH<pos:position pos:line="34" pos:column="16"/></name><argument_list pos:line="34" pos:column="16">(<argument><expr><name pos:line="34" pos:column="17">s<pos:position pos:line="34" pos:column="18"/></name></expr></argument>, <argument><expr><name><name pos:line="34" pos:column="20">s<pos:position pos:line="34" pos:column="21"/></name><operator pos:line="34" pos:column="21">-&gt;<pos:position pos:line="34" pos:column="26"/></operator><name pos:line="34" pos:column="23">ins_h<pos:position pos:line="34" pos:column="28"/></name></name></expr></argument>, <argument><expr><name><name pos:line="34" pos:column="30">s<pos:position pos:line="34" pos:column="31"/></name><operator pos:line="34" pos:column="31">-&gt;<pos:position pos:line="34" pos:column="36"/></operator><name pos:line="34" pos:column="33">window<pos:position pos:line="34" pos:column="39"/></name><index pos:line="34" pos:column="39">[<expr><literal type="number" pos:line="34" pos:column="40">1<pos:position pos:line="34" pos:column="41"/></literal></expr>]<pos:position pos:line="34" pos:column="42"/></index></name></expr></argument>)<pos:position pos:line="34" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="44"/></expr_stmt>
    <for pos:line="35" pos:column="5">for <control pos:line="35" pos:column="9">(<init><expr><name pos:line="35" pos:column="10">n<pos:position pos:line="35" pos:column="11"/></name> <operator pos:line="35" pos:column="12">=<pos:position pos:line="35" pos:column="13"/></operator> <literal type="number" pos:line="35" pos:column="14">0<pos:position pos:line="35" pos:column="15"/></literal></expr>;<pos:position pos:line="35" pos:column="16"/></init> <condition><expr><name pos:line="35" pos:column="17">n<pos:position pos:line="35" pos:column="18"/></name> <operator pos:line="35" pos:column="19">&lt;=<pos:position pos:line="35" pos:column="24"/></operator> <name pos:line="35" pos:column="22">length<pos:position pos:line="35" pos:column="28"/></name> <operator pos:line="35" pos:column="29">-<pos:position pos:line="35" pos:column="30"/></operator> <name pos:line="35" pos:column="31">MIN_MATCH<pos:position pos:line="35" pos:column="40"/></name></expr>;<pos:position pos:line="35" pos:column="41"/></condition> <incr><expr><name pos:line="35" pos:column="42">n<pos:position pos:line="35" pos:column="43"/></name><operator pos:line="35" pos:column="43">++<pos:position pos:line="35" pos:column="45"/></operator></expr></incr>)<pos:position pos:line="35" pos:column="46"/></control> <block pos:line="35" pos:column="47">{
        <expr_stmt><expr><call><name pos:line="36" pos:column="9">INSERT_STRING<pos:position pos:line="36" pos:column="22"/></name><argument_list pos:line="36" pos:column="22">(<argument><expr><name pos:line="36" pos:column="23">s<pos:position pos:line="36" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="26">n<pos:position pos:line="36" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="29">hash_head<pos:position pos:line="36" pos:column="38"/></name></expr></argument>)<pos:position pos:line="36" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="40"/></expr_stmt>
    }<pos:position pos:line="37" pos:column="6"/></block></for>
    <if pos:line="38" pos:column="5">if <condition pos:line="38" pos:column="8">(<expr><name pos:line="38" pos:column="9">hash_head<pos:position pos:line="38" pos:column="18"/></name></expr>)<pos:position pos:line="38" pos:column="19"/></condition><then pos:line="38" pos:column="19"> <block type="pseudo"><expr_stmt><expr><name pos:line="38" pos:column="20">hash_head<pos:position pos:line="38" pos:column="29"/></name> <operator pos:line="38" pos:column="30">=<pos:position pos:line="38" pos:column="31"/></operator> <literal type="number" pos:line="38" pos:column="32">0<pos:position pos:line="38" pos:column="33"/></literal></expr>;<pos:position pos:line="38" pos:column="34"/></expr_stmt></block></then></if>  <comment type="block" pos:line="38" pos:column="36">/* to make compiler happy */</comment>
    <return pos:line="39" pos:column="5">return <expr><name pos:line="39" pos:column="12">Z_OK<pos:position pos:line="39" pos:column="16"/></name></expr>;<pos:position pos:line="39" pos:column="17"/></return>
}<pos:position pos:line="40" pos:column="2"/></block></function_decl></unit>
