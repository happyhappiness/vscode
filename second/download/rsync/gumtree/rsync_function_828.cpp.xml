<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_function_828.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">start_inband_exchange<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><name pos:line="1" pos:column="27">char<pos:position pos:line="1" pos:column="31"/></name> <modifier pos:line="1" pos:column="32">*<pos:position pos:line="1" pos:column="33"/></modifier></type><name pos:line="1" pos:column="33">user<pos:position pos:line="1" pos:column="37"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="39">char<pos:position pos:line="1" pos:column="43"/></name> <modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier></type><name pos:line="1" pos:column="45">path<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="51">int<pos:position pos:line="1" pos:column="54"/></name></type> <name pos:line="1" pos:column="55">f_in<pos:position pos:line="1" pos:column="59"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="61">int<pos:position pos:line="1" pos:column="64"/></name></type> <name pos:line="1" pos:column="65">f_out<pos:position pos:line="1" pos:column="70"/></name></decl></parameter>,
			  <parameter><decl><type><name pos:line="2" pos:column="27">int<pos:position pos:line="2" pos:column="30"/></name></type> <name pos:line="2" pos:column="31">argc<pos:position pos:line="2" pos:column="35"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="36"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">i<pos:position pos:line="4" pos:column="14"/></name></decl>;<pos:position pos:line="4" pos:column="15"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">char<pos:position pos:line="5" pos:column="13"/></name> <modifier pos:line="5" pos:column="14">*<pos:position pos:line="5" pos:column="15"/></modifier></type><name><name pos:line="5" pos:column="15">sargs<pos:position pos:line="5" pos:column="20"/></name><index pos:line="5" pos:column="20">[<expr><name pos:line="5" pos:column="21">MAX_ARGS<pos:position pos:line="5" pos:column="29"/></name></expr>]<pos:position pos:line="5" pos:column="30"/></index></name></decl>;<pos:position pos:line="5" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">sargc<pos:position pos:line="6" pos:column="18"/></name> <init pos:line="6" pos:column="19">= <expr><literal type="number" pos:line="6" pos:column="21">0<pos:position pos:line="6" pos:column="22"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="23"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">char<pos:position pos:line="7" pos:column="13"/></name></type> <name><name pos:line="7" pos:column="14">line<pos:position pos:line="7" pos:column="18"/></name><index pos:line="7" pos:column="18">[<expr><name pos:line="7" pos:column="19">BIGPATHBUFLEN<pos:position pos:line="7" pos:column="32"/></name></expr>]<pos:position pos:line="7" pos:column="33"/></index></name></decl>;<pos:position pos:line="7" pos:column="34"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">char<pos:position pos:line="8" pos:column="13"/></name> <modifier pos:line="8" pos:column="14">*<pos:position pos:line="8" pos:column="15"/></modifier></type><name pos:line="8" pos:column="15">p<pos:position pos:line="8" pos:column="16"/></name></decl>;<pos:position pos:line="8" pos:column="17"/></decl_stmt>

	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><name pos:line="10" pos:column="13">argc<pos:position pos:line="10" pos:column="17"/></name> <operator pos:line="10" pos:column="18">==<pos:position pos:line="10" pos:column="20"/></operator> <literal type="number" pos:line="10" pos:column="21">0<pos:position pos:line="10" pos:column="22"/></literal> <operator pos:line="10" pos:column="23">&amp;&amp;<pos:position pos:line="10" pos:column="33"/></operator> <operator pos:line="10" pos:column="26">!<pos:position pos:line="10" pos:column="27"/></operator><name pos:line="10" pos:column="27">am_sender<pos:position pos:line="10" pos:column="36"/></name></expr>)<pos:position pos:line="10" pos:column="37"/></condition><then pos:line="10" pos:column="37">
		<block type="pseudo"><expr_stmt><expr><name pos:line="11" pos:column="17">list_only<pos:position pos:line="11" pos:column="26"/></name> <operator pos:line="11" pos:column="27">|=<pos:position pos:line="11" pos:column="29"/></operator> <literal type="number" pos:line="11" pos:column="30">1<pos:position pos:line="11" pos:column="31"/></literal></expr>;<pos:position pos:line="11" pos:column="32"/></expr_stmt></block></then></if>

	<if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><operator pos:line="13" pos:column="13">*<pos:position pos:line="13" pos:column="14"/></operator><name pos:line="13" pos:column="14">path<pos:position pos:line="13" pos:column="18"/></name> <operator pos:line="13" pos:column="19">==<pos:position pos:line="13" pos:column="21"/></operator> <literal type="char" pos:line="13" pos:column="22">'/'<pos:position pos:line="13" pos:column="25"/></literal></expr>)<pos:position pos:line="13" pos:column="26"/></condition><then pos:line="13" pos:column="26"> <block pos:line="13" pos:column="27">{
		<expr_stmt><expr><call><name pos:line="14" pos:column="17">rprintf<pos:position pos:line="14" pos:column="24"/></name><argument_list pos:line="14" pos:column="24">(<argument><expr><name pos:line="14" pos:column="25">FERROR<pos:position pos:line="14" pos:column="31"/></name></expr></argument>,
			<argument><expr><literal type="string" pos:line="15" pos:column="25">"ERROR: The remote path must start with a module name\n"<pos:position pos:line="15" pos:column="81"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="83"/></expr_stmt>
		<return pos:line="16" pos:column="17">return <expr><operator pos:line="16" pos:column="24">-<pos:position pos:line="16" pos:column="25"/></operator><literal type="number" pos:line="16" pos:column="25">1<pos:position pos:line="16" pos:column="26"/></literal></expr>;<pos:position pos:line="16" pos:column="27"/></return>
	}<pos:position pos:line="17" pos:column="10"/></block></then></if>

	<if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><operator pos:line="19" pos:column="13">!<pos:position pos:line="19" pos:column="14"/></operator><name pos:line="19" pos:column="14">user<pos:position pos:line="19" pos:column="18"/></name></expr>)<pos:position pos:line="19" pos:column="19"/></condition><then pos:line="19" pos:column="19">
		<block type="pseudo"><expr_stmt><expr><name pos:line="20" pos:column="17">user<pos:position pos:line="20" pos:column="21"/></name> <operator pos:line="20" pos:column="22">=<pos:position pos:line="20" pos:column="23"/></operator> <call><name pos:line="20" pos:column="24">getenv<pos:position pos:line="20" pos:column="30"/></name><argument_list pos:line="20" pos:column="30">(<argument><expr><literal type="string" pos:line="20" pos:column="31">"USER"<pos:position pos:line="20" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="39"/></expr_stmt></block></then></if>
	<if pos:line="21" pos:column="9">if <condition pos:line="21" pos:column="12">(<expr><operator pos:line="21" pos:column="13">!<pos:position pos:line="21" pos:column="14"/></operator><name pos:line="21" pos:column="14">user<pos:position pos:line="21" pos:column="18"/></name></expr>)<pos:position pos:line="21" pos:column="19"/></condition><then pos:line="21" pos:column="19">
		<block type="pseudo"><expr_stmt><expr><name pos:line="22" pos:column="17">user<pos:position pos:line="22" pos:column="21"/></name> <operator pos:line="22" pos:column="22">=<pos:position pos:line="22" pos:column="23"/></operator> <call><name pos:line="22" pos:column="24">getenv<pos:position pos:line="22" pos:column="30"/></name><argument_list pos:line="22" pos:column="30">(<argument><expr><literal type="string" pos:line="22" pos:column="31">"LOGNAME"<pos:position pos:line="22" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="42"/></expr_stmt></block></then></if>

	<expr_stmt><expr><call><name pos:line="24" pos:column="9">io_printf<pos:position pos:line="24" pos:column="18"/></name><argument_list pos:line="24" pos:column="18">(<argument><expr><name pos:line="24" pos:column="19">f_out<pos:position pos:line="24" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="24" pos:column="26">"@RSYNCD: %d\n"<pos:position pos:line="24" pos:column="41"/></literal></expr></argument>, <argument><expr><name pos:line="24" pos:column="43">protocol_version<pos:position pos:line="24" pos:column="59"/></name></expr></argument>)<pos:position pos:line="24" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="61"/></expr_stmt>

	<if pos:line="26" pos:column="9">if <condition pos:line="26" pos:column="12">(<expr><operator pos:line="26" pos:column="13">!<pos:position pos:line="26" pos:column="14"/></operator><call><name pos:line="26" pos:column="14">read_line<pos:position pos:line="26" pos:column="23"/></name><argument_list pos:line="26" pos:column="23">(<argument><expr><name pos:line="26" pos:column="24">f_in<pos:position pos:line="26" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="30">line<pos:position pos:line="26" pos:column="34"/></name></expr></argument>, <argument><expr><sizeof pos:line="26" pos:column="36">sizeof <name pos:line="26" pos:column="43">line<pos:position pos:line="26" pos:column="47"/></name></sizeof> <operator pos:line="26" pos:column="48">-<pos:position pos:line="26" pos:column="49"/></operator> <literal type="number" pos:line="26" pos:column="50">1<pos:position pos:line="26" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="26" pos:column="53"/></condition><then pos:line="26" pos:column="53"> <block pos:line="26" pos:column="54">{
		<expr_stmt><expr><call><name pos:line="27" pos:column="17">rprintf<pos:position pos:line="27" pos:column="24"/></name><argument_list pos:line="27" pos:column="24">(<argument><expr><name pos:line="27" pos:column="25">FERROR<pos:position pos:line="27" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="27" pos:column="33">"rsync: did not see server greeting\n"<pos:position pos:line="27" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="73"/></expr_stmt>
		<return pos:line="28" pos:column="17">return <expr><operator pos:line="28" pos:column="24">-<pos:position pos:line="28" pos:column="25"/></operator><literal type="number" pos:line="28" pos:column="25">1<pos:position pos:line="28" pos:column="26"/></literal></expr>;<pos:position pos:line="28" pos:column="27"/></return>
	}<pos:position pos:line="29" pos:column="10"/></block></then></if>

	<if pos:line="31" pos:column="9">if <condition pos:line="31" pos:column="12">(<expr><call><name pos:line="31" pos:column="13">sscanf<pos:position pos:line="31" pos:column="19"/></name><argument_list pos:line="31" pos:column="19">(<argument><expr><name pos:line="31" pos:column="20">line<pos:position pos:line="31" pos:column="24"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="31" pos:column="25">"@RSYNCD: %d"<pos:position pos:line="31" pos:column="38"/></literal></expr></argument>, <argument><expr><operator pos:line="31" pos:column="40">&amp;<pos:position pos:line="31" pos:column="45"/></operator><name pos:line="31" pos:column="41">remote_protocol<pos:position pos:line="31" pos:column="56"/></name></expr></argument>)<pos:position pos:line="31" pos:column="57"/></argument_list></call> <operator pos:line="31" pos:column="58">!=<pos:position pos:line="31" pos:column="60"/></operator> <literal type="number" pos:line="31" pos:column="61">1<pos:position pos:line="31" pos:column="62"/></literal></expr>)<pos:position pos:line="31" pos:column="63"/></condition><then pos:line="31" pos:column="63"> <block pos:line="31" pos:column="64">{
		<comment type="block" pos:line="32" pos:column="17">/* note that read_line strips of \n or \r */</comment>
		<expr_stmt><expr><call><name pos:line="33" pos:column="17">rprintf<pos:position pos:line="33" pos:column="24"/></name><argument_list pos:line="33" pos:column="24">(<argument><expr><name pos:line="33" pos:column="25">FERROR<pos:position pos:line="33" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="33" pos:column="33">"rsync: server sent \"%s\" rather than greeting\n"<pos:position pos:line="33" pos:column="83"/></literal></expr></argument>,
			<argument><expr><name pos:line="34" pos:column="25">line<pos:position pos:line="34" pos:column="29"/></name></expr></argument>)<pos:position pos:line="34" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="31"/></expr_stmt>
		<return pos:line="35" pos:column="17">return <expr><operator pos:line="35" pos:column="24">-<pos:position pos:line="35" pos:column="25"/></operator><literal type="number" pos:line="35" pos:column="25">1<pos:position pos:line="35" pos:column="26"/></literal></expr>;<pos:position pos:line="35" pos:column="27"/></return>
	}<pos:position pos:line="36" pos:column="10"/></block></then></if>
	<if pos:line="37" pos:column="9">if <condition pos:line="37" pos:column="12">(<expr><name pos:line="37" pos:column="13">protocol_version<pos:position pos:line="37" pos:column="29"/></name> <operator pos:line="37" pos:column="30">&gt;<pos:position pos:line="37" pos:column="34"/></operator> <name pos:line="37" pos:column="32">remote_protocol<pos:position pos:line="37" pos:column="47"/></name></expr>)<pos:position pos:line="37" pos:column="48"/></condition><then pos:line="37" pos:column="48">
		<block type="pseudo"><expr_stmt><expr><name pos:line="38" pos:column="17">protocol_version<pos:position pos:line="38" pos:column="33"/></name> <operator pos:line="38" pos:column="34">=<pos:position pos:line="38" pos:column="35"/></operator> <name pos:line="38" pos:column="36">remote_protocol<pos:position pos:line="38" pos:column="51"/></name></expr>;<pos:position pos:line="38" pos:column="52"/></expr_stmt></block></then></if>

	<if pos:line="40" pos:column="9">if <condition pos:line="40" pos:column="12">(<expr><name pos:line="40" pos:column="13">list_only<pos:position pos:line="40" pos:column="22"/></name> <operator pos:line="40" pos:column="23">&amp;&amp;<pos:position pos:line="40" pos:column="33"/></operator> <name pos:line="40" pos:column="26">protocol_version<pos:position pos:line="40" pos:column="42"/></name> <operator pos:line="40" pos:column="43">&gt;=<pos:position pos:line="40" pos:column="48"/></operator> <literal type="number" pos:line="40" pos:column="46">29<pos:position pos:line="40" pos:column="48"/></literal></expr>)<pos:position pos:line="40" pos:column="49"/></condition><then pos:line="40" pos:column="49">
		<block type="pseudo"><expr_stmt><expr><name pos:line="41" pos:column="17">list_only<pos:position pos:line="41" pos:column="26"/></name> <operator pos:line="41" pos:column="27">|=<pos:position pos:line="41" pos:column="29"/></operator> <literal type="number" pos:line="41" pos:column="30">2<pos:position pos:line="41" pos:column="31"/></literal></expr>;<pos:position pos:line="41" pos:column="32"/></expr_stmt></block></then></if>

	<comment type="block" pos:line="43" pos:column="9">/* set daemon_over_rsh to false since we need to build the
	 * true set of args passed through the rsh/ssh connection;
	 * this is a no-op for direct-socket-connection mode */</comment>
	<expr_stmt><expr><name pos:line="46" pos:column="9">daemon_over_rsh<pos:position pos:line="46" pos:column="24"/></name> <operator pos:line="46" pos:column="25">=<pos:position pos:line="46" pos:column="26"/></operator> <literal type="number" pos:line="46" pos:column="27">0<pos:position pos:line="46" pos:column="28"/></literal></expr>;<pos:position pos:line="46" pos:column="29"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="47" pos:column="9">server_options<pos:position pos:line="47" pos:column="23"/></name><argument_list pos:line="47" pos:column="23">(<argument><expr><name pos:line="47" pos:column="24">sargs<pos:position pos:line="47" pos:column="29"/></name></expr></argument>, <argument><expr><operator pos:line="47" pos:column="31">&amp;<pos:position pos:line="47" pos:column="36"/></operator><name pos:line="47" pos:column="32">sargc<pos:position pos:line="47" pos:column="37"/></name></expr></argument>)<pos:position pos:line="47" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="39"/></expr_stmt>

	<expr_stmt><expr><name><name pos:line="49" pos:column="9">sargs<pos:position pos:line="49" pos:column="14"/></name><index pos:line="49" pos:column="14">[<expr><name pos:line="49" pos:column="15">sargc<pos:position pos:line="49" pos:column="20"/></name><operator pos:line="49" pos:column="20">++<pos:position pos:line="49" pos:column="22"/></operator></expr>]<pos:position pos:line="49" pos:column="23"/></index></name> <operator pos:line="49" pos:column="24">=<pos:position pos:line="49" pos:column="25"/></operator> <literal type="string" pos:line="49" pos:column="26">"."<pos:position pos:line="49" pos:column="29"/></literal></expr>;<pos:position pos:line="49" pos:column="30"/></expr_stmt>

	<if pos:line="51" pos:column="9">if <condition pos:line="51" pos:column="12">(<expr><name pos:line="51" pos:column="13">path<pos:position pos:line="51" pos:column="17"/></name> <operator pos:line="51" pos:column="18">&amp;&amp;<pos:position pos:line="51" pos:column="28"/></operator> <operator pos:line="51" pos:column="21">*<pos:position pos:line="51" pos:column="22"/></operator><name pos:line="51" pos:column="22">path<pos:position pos:line="51" pos:column="26"/></name></expr>)<pos:position pos:line="51" pos:column="27"/></condition><then pos:line="51" pos:column="27">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="52" pos:column="17">sargs<pos:position pos:line="52" pos:column="22"/></name><index pos:line="52" pos:column="22">[<expr><name pos:line="52" pos:column="23">sargc<pos:position pos:line="52" pos:column="28"/></name><operator pos:line="52" pos:column="28">++<pos:position pos:line="52" pos:column="30"/></operator></expr>]<pos:position pos:line="52" pos:column="31"/></index></name> <operator pos:line="52" pos:column="32">=<pos:position pos:line="52" pos:column="33"/></operator> <name pos:line="52" pos:column="34">path<pos:position pos:line="52" pos:column="38"/></name></expr>;<pos:position pos:line="52" pos:column="39"/></expr_stmt></block></then></if>

	<expr_stmt><expr><name><name pos:line="54" pos:column="9">sargs<pos:position pos:line="54" pos:column="14"/></name><index pos:line="54" pos:column="14">[<expr><name pos:line="54" pos:column="15">sargc<pos:position pos:line="54" pos:column="20"/></name></expr>]<pos:position pos:line="54" pos:column="21"/></index></name> <operator pos:line="54" pos:column="22">=<pos:position pos:line="54" pos:column="23"/></operator> <name pos:line="54" pos:column="24">NULL<pos:position pos:line="54" pos:column="28"/></name></expr>;<pos:position pos:line="54" pos:column="29"/></expr_stmt>

	<if pos:line="56" pos:column="9">if <condition pos:line="56" pos:column="12">(<expr><name pos:line="56" pos:column="13">verbose<pos:position pos:line="56" pos:column="20"/></name> <operator pos:line="56" pos:column="21">&gt;<pos:position pos:line="56" pos:column="25"/></operator> <literal type="number" pos:line="56" pos:column="23">1<pos:position pos:line="56" pos:column="24"/></literal></expr>)<pos:position pos:line="56" pos:column="25"/></condition><then pos:line="56" pos:column="25">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="57" pos:column="17">print_child_argv<pos:position pos:line="57" pos:column="33"/></name><argument_list pos:line="57" pos:column="33">(<argument><expr><name pos:line="57" pos:column="34">sargs<pos:position pos:line="57" pos:column="39"/></name></expr></argument>)<pos:position pos:line="57" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="41"/></expr_stmt></block></then></if>

	<expr_stmt><expr><name pos:line="59" pos:column="9">p<pos:position pos:line="59" pos:column="10"/></name> <operator pos:line="59" pos:column="11">=<pos:position pos:line="59" pos:column="12"/></operator> <call><name pos:line="59" pos:column="13">strchr<pos:position pos:line="59" pos:column="19"/></name><argument_list pos:line="59" pos:column="19">(<argument><expr><name pos:line="59" pos:column="20">path<pos:position pos:line="59" pos:column="24"/></name></expr></argument>,<argument><expr><literal type="char" pos:line="59" pos:column="25">'/'<pos:position pos:line="59" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="59" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="30"/></expr_stmt>
	<if pos:line="60" pos:column="9">if <condition pos:line="60" pos:column="12">(<expr><name pos:line="60" pos:column="13">p<pos:position pos:line="60" pos:column="14"/></name></expr>)<pos:position pos:line="60" pos:column="15"/></condition><then pos:line="60" pos:column="15"> <block type="pseudo"><expr_stmt><expr><operator pos:line="60" pos:column="16">*<pos:position pos:line="60" pos:column="17"/></operator><name pos:line="60" pos:column="17">p<pos:position pos:line="60" pos:column="18"/></name> <operator pos:line="60" pos:column="19">=<pos:position pos:line="60" pos:column="20"/></operator> <literal type="number" pos:line="60" pos:column="21">0<pos:position pos:line="60" pos:column="22"/></literal></expr>;<pos:position pos:line="60" pos:column="23"/></expr_stmt></block></then></if>
	<expr_stmt><expr><call><name pos:line="61" pos:column="9">io_printf<pos:position pos:line="61" pos:column="18"/></name><argument_list pos:line="61" pos:column="18">(<argument><expr><name pos:line="61" pos:column="19">f_out<pos:position pos:line="61" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="61" pos:column="26">"%s\n"<pos:position pos:line="61" pos:column="32"/></literal></expr></argument>, <argument><expr><name pos:line="61" pos:column="34">path<pos:position pos:line="61" pos:column="38"/></name></expr></argument>)<pos:position pos:line="61" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="40"/></expr_stmt>
	<if pos:line="62" pos:column="9">if <condition pos:line="62" pos:column="12">(<expr><name pos:line="62" pos:column="13">p<pos:position pos:line="62" pos:column="14"/></name></expr>)<pos:position pos:line="62" pos:column="15"/></condition><then pos:line="62" pos:column="15"> <block type="pseudo"><expr_stmt><expr><operator pos:line="62" pos:column="16">*<pos:position pos:line="62" pos:column="17"/></operator><name pos:line="62" pos:column="17">p<pos:position pos:line="62" pos:column="18"/></name> <operator pos:line="62" pos:column="19">=<pos:position pos:line="62" pos:column="20"/></operator> <literal type="char" pos:line="62" pos:column="21">'/'<pos:position pos:line="62" pos:column="24"/></literal></expr>;<pos:position pos:line="62" pos:column="25"/></expr_stmt></block></then></if>

	<comment type="block" pos:line="64" pos:column="9">/* Old servers may just drop the connection here,
	 rather than sending a proper EXIT command.  Yuck. */</comment>
	<expr_stmt><expr><name pos:line="66" pos:column="9">kluge_around_eof<pos:position pos:line="66" pos:column="25"/></name> <operator pos:line="66" pos:column="26">=<pos:position pos:line="66" pos:column="27"/></operator> <ternary><condition><expr><name pos:line="66" pos:column="28">list_only<pos:position pos:line="66" pos:column="37"/></name> <operator pos:line="66" pos:column="38">&amp;&amp;<pos:position pos:line="66" pos:column="48"/></operator> <name pos:line="66" pos:column="41">protocol_version<pos:position pos:line="66" pos:column="57"/></name> <operator pos:line="66" pos:column="58">&lt;<pos:position pos:line="66" pos:column="62"/></operator> <literal type="number" pos:line="66" pos:column="60">25<pos:position pos:line="66" pos:column="62"/></literal></expr> ?<pos:position pos:line="66" pos:column="64"/></condition><then pos:line="66" pos:column="64"> <expr><literal type="number" pos:line="66" pos:column="65">1<pos:position pos:line="66" pos:column="66"/></literal></expr> <pos:position pos:line="66" pos:column="67"/></then><else pos:line="66" pos:column="67">: <expr><literal type="number" pos:line="66" pos:column="69">0<pos:position pos:line="66" pos:column="70"/></literal></expr></else></ternary></expr>;<pos:position pos:line="66" pos:column="71"/></expr_stmt>

	<while pos:line="68" pos:column="9">while <condition pos:line="68" pos:column="15">(<expr><literal type="number" pos:line="68" pos:column="16">1<pos:position pos:line="68" pos:column="17"/></literal></expr>)<pos:position pos:line="68" pos:column="18"/></condition> <block pos:line="68" pos:column="19">{
		<if pos:line="69" pos:column="17">if <condition pos:line="69" pos:column="20">(<expr><operator pos:line="69" pos:column="21">!<pos:position pos:line="69" pos:column="22"/></operator><call><name pos:line="69" pos:column="22">read_line<pos:position pos:line="69" pos:column="31"/></name><argument_list pos:line="69" pos:column="31">(<argument><expr><name pos:line="69" pos:column="32">f_in<pos:position pos:line="69" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="69" pos:column="38">line<pos:position pos:line="69" pos:column="42"/></name></expr></argument>, <argument><expr><sizeof pos:line="69" pos:column="44">sizeof <name pos:line="69" pos:column="51">line<pos:position pos:line="69" pos:column="55"/></name></sizeof> <operator pos:line="69" pos:column="56">-<pos:position pos:line="69" pos:column="57"/></operator> <literal type="number" pos:line="69" pos:column="58">1<pos:position pos:line="69" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="69" pos:column="60"/></argument_list></call></expr>)<pos:position pos:line="69" pos:column="61"/></condition><then pos:line="69" pos:column="61"> <block pos:line="69" pos:column="62">{
			<expr_stmt><expr><call><name pos:line="70" pos:column="25">rprintf<pos:position pos:line="70" pos:column="32"/></name><argument_list pos:line="70" pos:column="32">(<argument><expr><name pos:line="70" pos:column="33">FERROR<pos:position pos:line="70" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="70" pos:column="41">"rsync: didn't get server startup line\n"<pos:position pos:line="70" pos:column="82"/></literal></expr></argument>)<pos:position pos:line="70" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="84"/></expr_stmt>
			<return pos:line="71" pos:column="25">return <expr><operator pos:line="71" pos:column="32">-<pos:position pos:line="71" pos:column="33"/></operator><literal type="number" pos:line="71" pos:column="33">1<pos:position pos:line="71" pos:column="34"/></literal></expr>;<pos:position pos:line="71" pos:column="35"/></return>
		}<pos:position pos:line="72" pos:column="18"/></block></then></if>

		<if pos:line="74" pos:column="17">if <condition pos:line="74" pos:column="20">(<expr><call><name pos:line="74" pos:column="21">strncmp<pos:position pos:line="74" pos:column="28"/></name><argument_list pos:line="74" pos:column="28">(<argument><expr><name pos:line="74" pos:column="29">line<pos:position pos:line="74" pos:column="33"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="74" pos:column="34">"@RSYNCD: AUTHREQD "<pos:position pos:line="74" pos:column="54"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="74" pos:column="55">18<pos:position pos:line="74" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="74" pos:column="58"/></argument_list></call> <operator pos:line="74" pos:column="59">==<pos:position pos:line="74" pos:column="61"/></operator> <literal type="number" pos:line="74" pos:column="62">0<pos:position pos:line="74" pos:column="63"/></literal></expr>)<pos:position pos:line="74" pos:column="64"/></condition><then pos:line="74" pos:column="64"> <block pos:line="74" pos:column="65">{
			<expr_stmt><expr><call><name pos:line="75" pos:column="25">auth_client<pos:position pos:line="75" pos:column="36"/></name><argument_list pos:line="75" pos:column="36">(<argument><expr><name pos:line="75" pos:column="37">f_out<pos:position pos:line="75" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="75" pos:column="44">user<pos:position pos:line="75" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="75" pos:column="50">line<pos:position pos:line="75" pos:column="54"/></name><operator pos:line="75" pos:column="54">+<pos:position pos:line="75" pos:column="55"/></operator><literal type="number" pos:line="75" pos:column="55">18<pos:position pos:line="75" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="75" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="59"/></expr_stmt>
			<continue pos:line="76" pos:column="25">continue;<pos:position pos:line="76" pos:column="34"/></continue>
		}<pos:position pos:line="77" pos:column="18"/></block></then></if>

		<if pos:line="79" pos:column="17">if <condition pos:line="79" pos:column="20">(<expr><call><name pos:line="79" pos:column="21">strcmp<pos:position pos:line="79" pos:column="27"/></name><argument_list pos:line="79" pos:column="27">(<argument><expr><name pos:line="79" pos:column="28">line<pos:position pos:line="79" pos:column="32"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="79" pos:column="33">"@RSYNCD: OK"<pos:position pos:line="79" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="79" pos:column="47"/></argument_list></call> <operator pos:line="79" pos:column="48">==<pos:position pos:line="79" pos:column="50"/></operator> <literal type="number" pos:line="79" pos:column="51">0<pos:position pos:line="79" pos:column="52"/></literal></expr>)<pos:position pos:line="79" pos:column="53"/></condition><then pos:line="79" pos:column="53">
			<block type="pseudo"><break pos:line="80" pos:column="25">break;<pos:position pos:line="80" pos:column="31"/></break></block></then></if>

		<if pos:line="82" pos:column="17">if <condition pos:line="82" pos:column="20">(<expr><call><name pos:line="82" pos:column="21">strcmp<pos:position pos:line="82" pos:column="27"/></name><argument_list pos:line="82" pos:column="27">(<argument><expr><name pos:line="82" pos:column="28">line<pos:position pos:line="82" pos:column="32"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="82" pos:column="33">"@RSYNCD: EXIT"<pos:position pos:line="82" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="82" pos:column="49"/></argument_list></call> <operator pos:line="82" pos:column="50">==<pos:position pos:line="82" pos:column="52"/></operator> <literal type="number" pos:line="82" pos:column="53">0<pos:position pos:line="82" pos:column="54"/></literal></expr>)<pos:position pos:line="82" pos:column="55"/></condition><then pos:line="82" pos:column="55"> <block pos:line="82" pos:column="56">{
			<comment type="block" pos:line="83" pos:column="25">/* This is sent by recent versions of the
			 * server to terminate the listing of modules.
			 * We don't want to go on and transfer
			 * anything; just exit. */</comment>
			<expr_stmt><expr><call><name pos:line="87" pos:column="25">exit<pos:position pos:line="87" pos:column="29"/></name><argument_list pos:line="87" pos:column="29">(<argument><expr><literal type="number" pos:line="87" pos:column="30">0<pos:position pos:line="87" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="87" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="33"/></expr_stmt>
		}<pos:position pos:line="88" pos:column="18"/></block></then></if>

		<if pos:line="90" pos:column="17">if <condition pos:line="90" pos:column="20">(<expr><call><name pos:line="90" pos:column="21">strncmp<pos:position pos:line="90" pos:column="28"/></name><argument_list pos:line="90" pos:column="28">(<argument><expr><name pos:line="90" pos:column="29">line<pos:position pos:line="90" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="90" pos:column="35">"@ERROR"<pos:position pos:line="90" pos:column="43"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="90" pos:column="45">6<pos:position pos:line="90" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="90" pos:column="47"/></argument_list></call> <operator pos:line="90" pos:column="48">==<pos:position pos:line="90" pos:column="50"/></operator> <literal type="number" pos:line="90" pos:column="51">0<pos:position pos:line="90" pos:column="52"/></literal></expr>)<pos:position pos:line="90" pos:column="53"/></condition><then pos:line="90" pos:column="53"> <block pos:line="90" pos:column="54">{
			<expr_stmt><expr><call><name pos:line="91" pos:column="25">rprintf<pos:position pos:line="91" pos:column="32"/></name><argument_list pos:line="91" pos:column="32">(<argument><expr><name pos:line="91" pos:column="33">FERROR<pos:position pos:line="91" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="91" pos:column="41">"%s\n"<pos:position pos:line="91" pos:column="47"/></literal></expr></argument>, <argument><expr><name pos:line="91" pos:column="49">line<pos:position pos:line="91" pos:column="53"/></name></expr></argument>)<pos:position pos:line="91" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="55"/></expr_stmt>
			<comment type="block" pos:line="92" pos:column="25">/* This is always fatal; the server will now
			 * close the socket. */</comment>
			<return pos:line="94" pos:column="25">return <expr><operator pos:line="94" pos:column="32">-<pos:position pos:line="94" pos:column="33"/></operator><literal type="number" pos:line="94" pos:column="33">1<pos:position pos:line="94" pos:column="34"/></literal></expr>;<pos:position pos:line="94" pos:column="35"/></return>
		}<pos:position pos:line="95" pos:column="18"/></block></then></if>

		<comment type="block" pos:line="97" pos:column="17">/* This might be a MOTD line or a module listing, but there is
		 * no way to differentiate it.  The manpage mentions this. */</comment>
		<if pos:line="99" pos:column="17">if <condition pos:line="99" pos:column="20">(<expr><name pos:line="99" pos:column="21">output_motd<pos:position pos:line="99" pos:column="32"/></name></expr>)<pos:position pos:line="99" pos:column="33"/></condition><then pos:line="99" pos:column="33">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="100" pos:column="25">rprintf<pos:position pos:line="100" pos:column="32"/></name><argument_list pos:line="100" pos:column="32">(<argument><expr><name pos:line="100" pos:column="33">FINFO<pos:position pos:line="100" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="100" pos:column="40">"%s\n"<pos:position pos:line="100" pos:column="46"/></literal></expr></argument>, <argument><expr><name pos:line="100" pos:column="48">line<pos:position pos:line="100" pos:column="52"/></name></expr></argument>)<pos:position pos:line="100" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="100" pos:column="54"/></expr_stmt></block></then></if>
	}<pos:position pos:line="101" pos:column="10"/></block></while>
	<expr_stmt><expr><name pos:line="102" pos:column="9">kluge_around_eof<pos:position pos:line="102" pos:column="25"/></name> <operator pos:line="102" pos:column="26">=<pos:position pos:line="102" pos:column="27"/></operator> <literal type="number" pos:line="102" pos:column="28">0<pos:position pos:line="102" pos:column="29"/></literal></expr>;<pos:position pos:line="102" pos:column="30"/></expr_stmt>

	<for pos:line="104" pos:column="9">for <control pos:line="104" pos:column="13">(<init><expr><name pos:line="104" pos:column="14">i<pos:position pos:line="104" pos:column="15"/></name> <operator pos:line="104" pos:column="16">=<pos:position pos:line="104" pos:column="17"/></operator> <literal type="number" pos:line="104" pos:column="18">0<pos:position pos:line="104" pos:column="19"/></literal></expr>;<pos:position pos:line="104" pos:column="20"/></init> <condition><expr><name pos:line="104" pos:column="21">i<pos:position pos:line="104" pos:column="22"/></name> <operator pos:line="104" pos:column="23">&lt;<pos:position pos:line="104" pos:column="27"/></operator> <name pos:line="104" pos:column="25">sargc<pos:position pos:line="104" pos:column="30"/></name></expr>;<pos:position pos:line="104" pos:column="31"/></condition> <incr><expr><name pos:line="104" pos:column="32">i<pos:position pos:line="104" pos:column="33"/></name><operator pos:line="104" pos:column="33">++<pos:position pos:line="104" pos:column="35"/></operator></expr></incr>)<pos:position pos:line="104" pos:column="36"/></control> <block pos:line="104" pos:column="37">{
		<expr_stmt><expr><call><name pos:line="105" pos:column="17">io_printf<pos:position pos:line="105" pos:column="26"/></name><argument_list pos:line="105" pos:column="26">(<argument><expr><name pos:line="105" pos:column="27">f_out<pos:position pos:line="105" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="105" pos:column="34">"%s\n"<pos:position pos:line="105" pos:column="40"/></literal></expr></argument>, <argument><expr><name><name pos:line="105" pos:column="42">sargs<pos:position pos:line="105" pos:column="47"/></name><index pos:line="105" pos:column="47">[<expr><name pos:line="105" pos:column="48">i<pos:position pos:line="105" pos:column="49"/></name></expr>]<pos:position pos:line="105" pos:column="50"/></index></name></expr></argument>)<pos:position pos:line="105" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="105" pos:column="52"/></expr_stmt>
	}<pos:position pos:line="106" pos:column="10"/></block></for>
	<expr_stmt><expr><call><name pos:line="107" pos:column="9">io_printf<pos:position pos:line="107" pos:column="18"/></name><argument_list pos:line="107" pos:column="18">(<argument><expr><name pos:line="107" pos:column="19">f_out<pos:position pos:line="107" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="107" pos:column="26">"\n"<pos:position pos:line="107" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="107" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="107" pos:column="32"/></expr_stmt>

	<if pos:line="109" pos:column="9">if <condition pos:line="109" pos:column="12">(<expr><name pos:line="109" pos:column="13">protocol_version<pos:position pos:line="109" pos:column="29"/></name> <operator pos:line="109" pos:column="30">&lt;<pos:position pos:line="109" pos:column="34"/></operator> <literal type="number" pos:line="109" pos:column="32">23<pos:position pos:line="109" pos:column="34"/></literal></expr>)<pos:position pos:line="109" pos:column="35"/></condition><then pos:line="109" pos:column="35"> <block pos:line="109" pos:column="36">{
		<if pos:line="110" pos:column="17">if <condition pos:line="110" pos:column="20">(<expr><name pos:line="110" pos:column="21">protocol_version<pos:position pos:line="110" pos:column="37"/></name> <operator pos:line="110" pos:column="38">==<pos:position pos:line="110" pos:column="40"/></operator> <literal type="number" pos:line="110" pos:column="41">22<pos:position pos:line="110" pos:column="43"/></literal> <operator pos:line="110" pos:column="44">||<pos:position pos:line="110" pos:column="46"/></operator> <operator pos:line="110" pos:column="47">!<pos:position pos:line="110" pos:column="48"/></operator><name pos:line="110" pos:column="48">am_sender<pos:position pos:line="110" pos:column="57"/></name></expr>)<pos:position pos:line="110" pos:column="58"/></condition><then pos:line="110" pos:column="58">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="111" pos:column="25">io_start_multiplex_in<pos:position pos:line="111" pos:column="46"/></name><argument_list pos:line="111" pos:column="46">()<pos:position pos:line="111" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="111" pos:column="49"/></expr_stmt></block></then></if>
	}<pos:position pos:line="112" pos:column="10"/></block></then></if>

	<return pos:line="114" pos:column="9">return <expr><literal type="number" pos:line="114" pos:column="16">0<pos:position pos:line="114" pos:column="17"/></literal></expr>;<pos:position pos:line="114" pos:column="18"/></return>
}<pos:position pos:line="115" pos:column="2"/></block></function></unit>
