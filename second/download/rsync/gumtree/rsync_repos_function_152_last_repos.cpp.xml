<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_152_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">BOOL<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">io_start_buffering_in<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name pos:line="1" pos:column="28">int<pos:position pos:line="1" pos:column="31"/></name></type> <name pos:line="1" pos:column="32">f_in<pos:position pos:line="1" pos:column="36"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="37"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<if pos:line="3" pos:column="9">if <condition pos:line="3" pos:column="12">(<expr><name pos:line="3" pos:column="13">msgs2stderr<pos:position pos:line="3" pos:column="24"/></name> <operator pos:line="3" pos:column="25">&amp;&amp;<pos:position pos:line="3" pos:column="35"/></operator> <call><name pos:line="3" pos:column="28">DEBUG_GTE<pos:position pos:line="3" pos:column="37"/></name><argument_list pos:line="3" pos:column="37">(<argument><expr><name pos:line="3" pos:column="38">IO<pos:position pos:line="3" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="3" pos:column="42">2<pos:position pos:line="3" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="3" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="3" pos:column="45"/></condition><then pos:line="3" pos:column="45">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="4" pos:column="17">rprintf<pos:position pos:line="4" pos:column="24"/></name><argument_list pos:line="4" pos:column="24">(<argument><expr><name pos:line="4" pos:column="25">FINFO<pos:position pos:line="4" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="4" pos:column="32">"[%s] io_start_buffering_in(%d)\n"<pos:position pos:line="4" pos:column="66"/></literal></expr></argument>, <argument><expr><call><name pos:line="4" pos:column="68">who_am_i<pos:position pos:line="4" pos:column="76"/></name><argument_list pos:line="4" pos:column="76">()<pos:position pos:line="4" pos:column="78"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="4" pos:column="80">f_in<pos:position pos:line="4" pos:column="84"/></name></expr></argument>)<pos:position pos:line="4" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="86"/></expr_stmt></block></then></if>

	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><name><name pos:line="6" pos:column="13">iobuf<pos:position pos:line="6" pos:column="18"/></name><operator pos:line="6" pos:column="18">.<pos:position pos:line="6" pos:column="19"/></operator><name pos:line="6" pos:column="19">in<pos:position pos:line="6" pos:column="21"/></name><operator pos:line="6" pos:column="21">.<pos:position pos:line="6" pos:column="22"/></operator><name pos:line="6" pos:column="22">buf<pos:position pos:line="6" pos:column="25"/></name></name></expr>)<pos:position pos:line="6" pos:column="26"/></condition><then pos:line="6" pos:column="26"> <block pos:line="6" pos:column="27">{
		<if pos:line="7" pos:column="17">if <condition pos:line="7" pos:column="20">(<expr><name><name pos:line="7" pos:column="21">iobuf<pos:position pos:line="7" pos:column="26"/></name><operator pos:line="7" pos:column="26">.<pos:position pos:line="7" pos:column="27"/></operator><name pos:line="7" pos:column="27">in_fd<pos:position pos:line="7" pos:column="32"/></name></name> <operator pos:line="7" pos:column="33">==<pos:position pos:line="7" pos:column="35"/></operator> <operator pos:line="7" pos:column="36">-<pos:position pos:line="7" pos:column="37"/></operator><literal type="number" pos:line="7" pos:column="37">1<pos:position pos:line="7" pos:column="38"/></literal></expr>)<pos:position pos:line="7" pos:column="39"/></condition><then pos:line="7" pos:column="39">
			<block type="pseudo"><expr_stmt><expr><name><name pos:line="8" pos:column="25">iobuf<pos:position pos:line="8" pos:column="30"/></name><operator pos:line="8" pos:column="30">.<pos:position pos:line="8" pos:column="31"/></operator><name pos:line="8" pos:column="31">in_fd<pos:position pos:line="8" pos:column="36"/></name></name> <operator pos:line="8" pos:column="37">=<pos:position pos:line="8" pos:column="38"/></operator> <name pos:line="8" pos:column="39">f_in<pos:position pos:line="8" pos:column="43"/></name></expr>;<pos:position pos:line="8" pos:column="44"/></expr_stmt></block></then>
		<else pos:line="9" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="10" pos:column="25">assert<pos:position pos:line="10" pos:column="31"/></name><argument_list pos:line="10" pos:column="31">(<argument><expr><name pos:line="10" pos:column="32">f_in<pos:position pos:line="10" pos:column="36"/></name> <operator pos:line="10" pos:column="37">==<pos:position pos:line="10" pos:column="39"/></operator> <name><name pos:line="10" pos:column="40">iobuf<pos:position pos:line="10" pos:column="45"/></name><operator pos:line="10" pos:column="45">.<pos:position pos:line="10" pos:column="46"/></operator><name pos:line="10" pos:column="46">in_fd<pos:position pos:line="10" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="10" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="53"/></expr_stmt></block></else></if>
		<return pos:line="11" pos:column="17">return <expr><name pos:line="11" pos:column="24">False<pos:position pos:line="11" pos:column="29"/></name></expr>;<pos:position pos:line="11" pos:column="30"/></return>
	}<pos:position pos:line="12" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="14" pos:column="9">alloc_xbuf<pos:position pos:line="14" pos:column="19"/></name><argument_list pos:line="14" pos:column="19">(<argument><expr><operator pos:line="14" pos:column="20">&amp;<pos:position pos:line="14" pos:column="25"/></operator><name><name pos:line="14" pos:column="21">iobuf<pos:position pos:line="14" pos:column="26"/></name><operator pos:line="14" pos:column="26">.<pos:position pos:line="14" pos:column="27"/></operator><name pos:line="14" pos:column="27">in<pos:position pos:line="14" pos:column="29"/></name></name></expr></argument>, <argument><expr><call><name pos:line="14" pos:column="31">ROUND_UP_1024<pos:position pos:line="14" pos:column="44"/></name><argument_list pos:line="14" pos:column="44">(<argument><expr><name pos:line="14" pos:column="45">IO_BUFFER_SIZE<pos:position pos:line="14" pos:column="59"/></name></expr></argument>)<pos:position pos:line="14" pos:column="60"/></argument_list></call></expr></argument>)<pos:position pos:line="14" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="62"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="15" pos:column="9">iobuf<pos:position pos:line="15" pos:column="14"/></name><operator pos:line="15" pos:column="14">.<pos:position pos:line="15" pos:column="15"/></operator><name pos:line="15" pos:column="15">in_fd<pos:position pos:line="15" pos:column="20"/></name></name> <operator pos:line="15" pos:column="21">=<pos:position pos:line="15" pos:column="22"/></operator> <name pos:line="15" pos:column="23">f_in<pos:position pos:line="15" pos:column="27"/></name></expr>;<pos:position pos:line="15" pos:column="28"/></expr_stmt>

	<return pos:line="17" pos:column="9">return <expr><name pos:line="17" pos:column="16">True<pos:position pos:line="17" pos:column="20"/></name></expr>;<pos:position pos:line="17" pos:column="21"/></return>
}<pos:position pos:line="18" pos:column="2"/></block></function></unit>
