<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_function_803.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">rsync_module<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name pos:line="1" pos:column="25">int<pos:position pos:line="1" pos:column="28"/></name></type> <name pos:line="1" pos:column="29">f_in<pos:position pos:line="1" pos:column="33"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="35">int<pos:position pos:line="1" pos:column="38"/></name></type> <name pos:line="1" pos:column="39">f_out<pos:position pos:line="1" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="46">int<pos:position pos:line="1" pos:column="49"/></name></type> <name pos:line="1" pos:column="50">i<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="52"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">argc<pos:position pos:line="3" pos:column="17"/></name> <init pos:line="3" pos:column="18">= <expr><literal type="number" pos:line="3" pos:column="20">0<pos:position pos:line="3" pos:column="21"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="22"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">maxargs<pos:position pos:line="4" pos:column="20"/></name></decl>;<pos:position pos:line="4" pos:column="21"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">char<pos:position pos:line="5" pos:column="13"/></name> <modifier pos:line="5" pos:column="14">*<pos:position pos:line="5" pos:column="15"/></modifier><modifier pos:line="5" pos:column="15">*<pos:position pos:line="5" pos:column="16"/></modifier></type><name pos:line="5" pos:column="16">argv<pos:position pos:line="5" pos:column="20"/></name></decl>;<pos:position pos:line="5" pos:column="21"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">char<pos:position pos:line="6" pos:column="13"/></name> <modifier pos:line="6" pos:column="14">*<pos:position pos:line="6" pos:column="15"/></modifier><modifier pos:line="6" pos:column="15">*<pos:position pos:line="6" pos:column="16"/></modifier></type><name pos:line="6" pos:column="16">argp<pos:position pos:line="6" pos:column="20"/></name></decl>;<pos:position pos:line="6" pos:column="21"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">char<pos:position pos:line="7" pos:column="13"/></name></type> <name><name pos:line="7" pos:column="14">line<pos:position pos:line="7" pos:column="18"/></name><index pos:line="7" pos:column="18">[<expr><name pos:line="7" pos:column="19">MAXPATHLEN<pos:position pos:line="7" pos:column="29"/></name></expr>]<pos:position pos:line="7" pos:column="30"/></index></name></decl>;<pos:position pos:line="7" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">uid_t<pos:position pos:line="8" pos:column="14"/></name></type> <name pos:line="8" pos:column="15">uid<pos:position pos:line="8" pos:column="18"/></name> <init pos:line="8" pos:column="19">= <expr><operator pos:line="8" pos:column="21">(<pos:position pos:line="8" pos:column="22"/></operator><name pos:line="8" pos:column="22">uid_t<pos:position pos:line="8" pos:column="27"/></name><operator pos:line="8" pos:column="27">)<pos:position pos:line="8" pos:column="28"/></operator><operator pos:line="8" pos:column="28">-<pos:position pos:line="8" pos:column="29"/></operator><literal type="number" pos:line="8" pos:column="29">2<pos:position pos:line="8" pos:column="30"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="31"/></decl_stmt>  <comment type="block" pos:line="8" pos:column="33">/* canonically "nobody" */</comment>
	<decl_stmt><decl><type><name pos:line="9" pos:column="9">gid_t<pos:position pos:line="9" pos:column="14"/></name></type> <name pos:line="9" pos:column="15">gid<pos:position pos:line="9" pos:column="18"/></name> <init pos:line="9" pos:column="19">= <expr><operator pos:line="9" pos:column="21">(<pos:position pos:line="9" pos:column="22"/></operator><name pos:line="9" pos:column="22">gid_t<pos:position pos:line="9" pos:column="27"/></name><operator pos:line="9" pos:column="27">)<pos:position pos:line="9" pos:column="28"/></operator><operator pos:line="9" pos:column="28">-<pos:position pos:line="9" pos:column="29"/></operator><literal type="number" pos:line="9" pos:column="29">2<pos:position pos:line="9" pos:column="30"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="10" pos:column="9">char<pos:position pos:line="10" pos:column="13"/></name> <modifier pos:line="10" pos:column="14">*<pos:position pos:line="10" pos:column="15"/></modifier></type><name pos:line="10" pos:column="15">p<pos:position pos:line="10" pos:column="16"/></name></decl>;<pos:position pos:line="10" pos:column="17"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="11" pos:column="9">char<pos:position pos:line="11" pos:column="13"/></name> <modifier pos:line="11" pos:column="14">*<pos:position pos:line="11" pos:column="15"/></modifier></type><name pos:line="11" pos:column="15">addr<pos:position pos:line="11" pos:column="19"/></name> <init pos:line="11" pos:column="20">= <expr><call><name pos:line="11" pos:column="22">client_addr<pos:position pos:line="11" pos:column="33"/></name><argument_list pos:line="11" pos:column="33">(<argument><expr><name pos:line="11" pos:column="34">f_in<pos:position pos:line="11" pos:column="38"/></name></expr></argument>)<pos:position pos:line="11" pos:column="39"/></argument_list></call></expr></init></decl>;<pos:position pos:line="11" pos:column="40"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="12" pos:column="9">char<pos:position pos:line="12" pos:column="13"/></name> <modifier pos:line="12" pos:column="14">*<pos:position pos:line="12" pos:column="15"/></modifier></type><name pos:line="12" pos:column="15">host<pos:position pos:line="12" pos:column="19"/></name> <init pos:line="12" pos:column="20">= <expr><call><name pos:line="12" pos:column="22">client_name<pos:position pos:line="12" pos:column="33"/></name><argument_list pos:line="12" pos:column="33">(<argument><expr><name pos:line="12" pos:column="34">f_in<pos:position pos:line="12" pos:column="38"/></name></expr></argument>)<pos:position pos:line="12" pos:column="39"/></argument_list></call></expr></init></decl>;<pos:position pos:line="12" pos:column="40"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="13" pos:column="9">char<pos:position pos:line="13" pos:column="13"/></name> <modifier pos:line="13" pos:column="14">*<pos:position pos:line="13" pos:column="15"/></modifier></type><name pos:line="13" pos:column="15">name<pos:position pos:line="13" pos:column="19"/></name> <init pos:line="13" pos:column="20">= <expr><call><name pos:line="13" pos:column="22">lp_name<pos:position pos:line="13" pos:column="29"/></name><argument_list pos:line="13" pos:column="29">(<argument><expr><name pos:line="13" pos:column="30">i<pos:position pos:line="13" pos:column="31"/></name></expr></argument>)<pos:position pos:line="13" pos:column="32"/></argument_list></call></expr></init></decl>;<pos:position pos:line="13" pos:column="33"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="14" pos:column="9">int<pos:position pos:line="14" pos:column="12"/></name></type> <name pos:line="14" pos:column="13">use_chroot<pos:position pos:line="14" pos:column="23"/></name> <init pos:line="14" pos:column="24">= <expr><call><name pos:line="14" pos:column="26">lp_use_chroot<pos:position pos:line="14" pos:column="39"/></name><argument_list pos:line="14" pos:column="39">(<argument><expr><name pos:line="14" pos:column="40">i<pos:position pos:line="14" pos:column="41"/></name></expr></argument>)<pos:position pos:line="14" pos:column="42"/></argument_list></call></expr></init></decl>;<pos:position pos:line="14" pos:column="43"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="15" pos:column="9">int<pos:position pos:line="15" pos:column="12"/></name></type> <name pos:line="15" pos:column="13">start_glob<pos:position pos:line="15" pos:column="23"/></name> <init pos:line="15" pos:column="24">= <expr><literal type="number" pos:line="15" pos:column="26">0<pos:position pos:line="15" pos:column="27"/></literal></expr></init></decl>;<pos:position pos:line="15" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="16" pos:column="9">int<pos:position pos:line="16" pos:column="12"/></name></type> <name pos:line="16" pos:column="13">ret<pos:position pos:line="16" pos:column="16"/></name></decl>;<pos:position pos:line="16" pos:column="17"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="17" pos:column="9">char<pos:position pos:line="17" pos:column="13"/></name> <modifier pos:line="17" pos:column="14">*<pos:position pos:line="17" pos:column="15"/></modifier></type><name pos:line="17" pos:column="15">request<pos:position pos:line="17" pos:column="22"/></name> <init pos:line="17" pos:column="23">= <expr><name pos:line="17" pos:column="25">NULL<pos:position pos:line="17" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="17" pos:column="30"/></decl_stmt>

	<if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><operator pos:line="19" pos:column="13">!<pos:position pos:line="19" pos:column="14"/></operator><call><name pos:line="19" pos:column="14">allow_access<pos:position pos:line="19" pos:column="26"/></name><argument_list pos:line="19" pos:column="26">(<argument><expr><name pos:line="19" pos:column="27">addr<pos:position pos:line="19" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="33">host<pos:position pos:line="19" pos:column="37"/></name></expr></argument>, <argument><expr><call><name pos:line="19" pos:column="39">lp_hosts_allow<pos:position pos:line="19" pos:column="53"/></name><argument_list pos:line="19" pos:column="53">(<argument><expr><name pos:line="19" pos:column="54">i<pos:position pos:line="19" pos:column="55"/></name></expr></argument>)<pos:position pos:line="19" pos:column="56"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="19" pos:column="58">lp_hosts_deny<pos:position pos:line="19" pos:column="71"/></name><argument_list pos:line="19" pos:column="71">(<argument><expr><name pos:line="19" pos:column="72">i<pos:position pos:line="19" pos:column="73"/></name></expr></argument>)<pos:position pos:line="19" pos:column="74"/></argument_list></call></expr></argument>)<pos:position pos:line="19" pos:column="75"/></argument_list></call></expr>)<pos:position pos:line="19" pos:column="76"/></condition><then pos:line="19" pos:column="76"> <block pos:line="19" pos:column="77">{
		<expr_stmt><expr><call><name pos:line="20" pos:column="17">rprintf<pos:position pos:line="20" pos:column="24"/></name><argument_list pos:line="20" pos:column="24">(<argument><expr><name pos:line="20" pos:column="25">FLOG<pos:position pos:line="20" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="31">"rsync denied on module %s from %s (%s)\n"<pos:position pos:line="20" pos:column="73"/></literal></expr></argument>,
			<argument><expr><name pos:line="21" pos:column="25">name<pos:position pos:line="21" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="31">host<pos:position pos:line="21" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="37">addr<pos:position pos:line="21" pos:column="41"/></name></expr></argument>)<pos:position pos:line="21" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="43"/></expr_stmt>
		<if pos:line="22" pos:column="17">if <condition pos:line="22" pos:column="20">(<expr><operator pos:line="22" pos:column="21">!<pos:position pos:line="22" pos:column="22"/></operator><call><name pos:line="22" pos:column="22">lp_list<pos:position pos:line="22" pos:column="29"/></name><argument_list pos:line="22" pos:column="29">(<argument><expr><name pos:line="22" pos:column="30">i<pos:position pos:line="22" pos:column="31"/></name></expr></argument>)<pos:position pos:line="22" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="22" pos:column="33"/></condition><then pos:line="22" pos:column="33">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="23" pos:column="25">io_printf<pos:position pos:line="23" pos:column="34"/></name><argument_list pos:line="23" pos:column="34">(<argument><expr><name pos:line="23" pos:column="35">f_out<pos:position pos:line="23" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="23" pos:column="42">"@ERROR: Unknown module '%s'\n"<pos:position pos:line="23" pos:column="73"/></literal></expr></argument>, <argument><expr><name pos:line="23" pos:column="75">name<pos:position pos:line="23" pos:column="79"/></name></expr></argument>)<pos:position pos:line="23" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="81"/></expr_stmt></block></then>
		<else pos:line="24" pos:column="17">else <block pos:line="24" pos:column="22">{
			<expr_stmt><expr><call><name pos:line="25" pos:column="25">io_printf<pos:position pos:line="25" pos:column="34"/></name><argument_list pos:line="25" pos:column="34">(<argument><expr><name pos:line="25" pos:column="35">f_out<pos:position pos:line="25" pos:column="40"/></name></expr></argument>,
				  <argument><expr><literal type="string" pos:line="26" pos:column="35">"@ERROR: access denied to %s from %s (%s)\n"<pos:position pos:line="26" pos:column="79"/></literal></expr></argument>,
				  <argument><expr><name pos:line="27" pos:column="35">name<pos:position pos:line="27" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="41">host<pos:position pos:line="27" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="47">addr<pos:position pos:line="27" pos:column="51"/></name></expr></argument>)<pos:position pos:line="27" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="53"/></expr_stmt>
		}<pos:position pos:line="28" pos:column="18"/></block></else></if>
		<return pos:line="29" pos:column="17">return <expr><operator pos:line="29" pos:column="24">-<pos:position pos:line="29" pos:column="25"/></operator><literal type="number" pos:line="29" pos:column="25">1<pos:position pos:line="29" pos:column="26"/></literal></expr>;<pos:position pos:line="29" pos:column="27"/></return>
	}<pos:position pos:line="30" pos:column="10"/></block></then></if>

	<if pos:line="32" pos:column="9">if <condition pos:line="32" pos:column="12">(<expr><name pos:line="32" pos:column="13">am_daemon<pos:position pos:line="32" pos:column="22"/></name> <operator pos:line="32" pos:column="23">&amp;&amp;<pos:position pos:line="32" pos:column="33"/></operator> <name pos:line="32" pos:column="26">am_server<pos:position pos:line="32" pos:column="35"/></name></expr>)<pos:position pos:line="32" pos:column="36"/></condition><then pos:line="32" pos:column="36"> <block pos:line="32" pos:column="37">{
		<expr_stmt><expr><call><name pos:line="33" pos:column="17">rprintf<pos:position pos:line="33" pos:column="24"/></name><argument_list pos:line="33" pos:column="24">(<argument><expr><name pos:line="33" pos:column="25">FLOG<pos:position pos:line="33" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="33" pos:column="31">"rsync allowed access on module %s from %s (%s)\n"<pos:position pos:line="33" pos:column="81"/></literal></expr></argument>,
			<argument><expr><name pos:line="34" pos:column="25">name<pos:position pos:line="34" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="31">host<pos:position pos:line="34" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="37">addr<pos:position pos:line="34" pos:column="41"/></name></expr></argument>)<pos:position pos:line="34" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="43"/></expr_stmt>
	}<pos:position pos:line="35" pos:column="10"/></block></then></if>

	<if pos:line="37" pos:column="9">if <condition pos:line="37" pos:column="12">(<expr><operator pos:line="37" pos:column="13">!<pos:position pos:line="37" pos:column="14"/></operator><call><name pos:line="37" pos:column="14">claim_connection<pos:position pos:line="37" pos:column="30"/></name><argument_list pos:line="37" pos:column="30">(<argument><expr><call><name pos:line="37" pos:column="31">lp_lock_file<pos:position pos:line="37" pos:column="43"/></name><argument_list pos:line="37" pos:column="43">(<argument><expr><name pos:line="37" pos:column="44">i<pos:position pos:line="37" pos:column="45"/></name></expr></argument>)<pos:position pos:line="37" pos:column="46"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="37" pos:column="48">lp_max_connections<pos:position pos:line="37" pos:column="66"/></name><argument_list pos:line="37" pos:column="66">(<argument><expr><name pos:line="37" pos:column="67">i<pos:position pos:line="37" pos:column="68"/></name></expr></argument>)<pos:position pos:line="37" pos:column="69"/></argument_list></call></expr></argument>)<pos:position pos:line="37" pos:column="70"/></argument_list></call></expr>)<pos:position pos:line="37" pos:column="71"/></condition><then pos:line="37" pos:column="71"> <block pos:line="37" pos:column="72">{
		<if pos:line="38" pos:column="17">if <condition pos:line="38" pos:column="20">(<expr><name pos:line="38" pos:column="21">errno<pos:position pos:line="38" pos:column="26"/></name></expr>)<pos:position pos:line="38" pos:column="27"/></condition><then pos:line="38" pos:column="27"> <block pos:line="38" pos:column="28">{
			<expr_stmt><expr><call><name pos:line="39" pos:column="25">rsyserr<pos:position pos:line="39" pos:column="32"/></name><argument_list pos:line="39" pos:column="32">(<argument><expr><name pos:line="39" pos:column="33">FLOG<pos:position pos:line="39" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="39">errno<pos:position pos:line="39" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="39" pos:column="46">"failed to open lock file %s"<pos:position pos:line="39" pos:column="75"/></literal></expr></argument>,
				<argument><expr><call><name pos:line="40" pos:column="33">safe_fname<pos:position pos:line="40" pos:column="43"/></name><argument_list pos:line="40" pos:column="43">(<argument><expr><call><name pos:line="40" pos:column="44">lp_lock_file<pos:position pos:line="40" pos:column="56"/></name><argument_list pos:line="40" pos:column="56">(<argument><expr><name pos:line="40" pos:column="57">i<pos:position pos:line="40" pos:column="58"/></name></expr></argument>)<pos:position pos:line="40" pos:column="59"/></argument_list></call></expr></argument>)<pos:position pos:line="40" pos:column="60"/></argument_list></call></expr></argument>)<pos:position pos:line="40" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="62"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="41" pos:column="25">io_printf<pos:position pos:line="41" pos:column="34"/></name><argument_list pos:line="41" pos:column="34">(<argument><expr><name pos:line="41" pos:column="35">f_out<pos:position pos:line="41" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="41" pos:column="42">"@ERROR: failed to open lock file\n"<pos:position pos:line="41" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="80"/></expr_stmt>
		}<pos:position pos:line="42" pos:column="18"/></block></then> <else pos:line="42" pos:column="19">else <block pos:line="42" pos:column="24">{
			<expr_stmt><expr><call><name pos:line="43" pos:column="25">rprintf<pos:position pos:line="43" pos:column="32"/></name><argument_list pos:line="43" pos:column="32">(<argument><expr><name pos:line="43" pos:column="33">FLOG<pos:position pos:line="43" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="43" pos:column="39">"max connections (%d) reached\n"<pos:position pos:line="43" pos:column="71"/></literal></expr></argument>,
				<argument><expr><call><name pos:line="44" pos:column="33">lp_max_connections<pos:position pos:line="44" pos:column="51"/></name><argument_list pos:line="44" pos:column="51">(<argument><expr><name pos:line="44" pos:column="52">i<pos:position pos:line="44" pos:column="53"/></name></expr></argument>)<pos:position pos:line="44" pos:column="54"/></argument_list></call></expr></argument>)<pos:position pos:line="44" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="56"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="45" pos:column="25">io_printf<pos:position pos:line="45" pos:column="34"/></name><argument_list pos:line="45" pos:column="34">(<argument><expr><name pos:line="45" pos:column="35">f_out<pos:position pos:line="45" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="45" pos:column="42">"@ERROR: max connections (%d) reached -- try again later\n"<pos:position pos:line="45" pos:column="101"/></literal></expr></argument>,
				<argument><expr><call><name pos:line="46" pos:column="33">lp_max_connections<pos:position pos:line="46" pos:column="51"/></name><argument_list pos:line="46" pos:column="51">(<argument><expr><name pos:line="46" pos:column="52">i<pos:position pos:line="46" pos:column="53"/></name></expr></argument>)<pos:position pos:line="46" pos:column="54"/></argument_list></call></expr></argument>)<pos:position pos:line="46" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="56"/></expr_stmt>
		}<pos:position pos:line="47" pos:column="18"/></block></else></if>
		<return pos:line="48" pos:column="17">return <expr><operator pos:line="48" pos:column="24">-<pos:position pos:line="48" pos:column="25"/></operator><literal type="number" pos:line="48" pos:column="25">1<pos:position pos:line="48" pos:column="26"/></literal></expr>;<pos:position pos:line="48" pos:column="27"/></return>
	}<pos:position pos:line="49" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="51" pos:column="9">auth_user<pos:position pos:line="51" pos:column="18"/></name> <operator pos:line="51" pos:column="19">=<pos:position pos:line="51" pos:column="20"/></operator> <call><name pos:line="51" pos:column="21">auth_server<pos:position pos:line="51" pos:column="32"/></name><argument_list pos:line="51" pos:column="32">(<argument><expr><name pos:line="51" pos:column="33">f_in<pos:position pos:line="51" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="39">f_out<pos:position pos:line="51" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="46">i<pos:position pos:line="51" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="49">host<pos:position pos:line="51" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="55">addr<pos:position pos:line="51" pos:column="59"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="51" pos:column="61">"@RSYNCD: AUTHREQD "<pos:position pos:line="51" pos:column="81"/></literal></expr></argument>)<pos:position pos:line="51" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="83"/></expr_stmt>

	<if pos:line="53" pos:column="9">if <condition pos:line="53" pos:column="12">(<expr><operator pos:line="53" pos:column="13">!<pos:position pos:line="53" pos:column="14"/></operator><name pos:line="53" pos:column="14">auth_user<pos:position pos:line="53" pos:column="23"/></name></expr>)<pos:position pos:line="53" pos:column="24"/></condition><then pos:line="53" pos:column="24"> <block pos:line="53" pos:column="25">{
		<expr_stmt><expr><call><name pos:line="54" pos:column="17">io_printf<pos:position pos:line="54" pos:column="26"/></name><argument_list pos:line="54" pos:column="26">(<argument><expr><name pos:line="54" pos:column="27">f_out<pos:position pos:line="54" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="54" pos:column="34">"@ERROR: auth failed on module %s\n"<pos:position pos:line="54" pos:column="70"/></literal></expr></argument>, <argument><expr><name pos:line="54" pos:column="72">name<pos:position pos:line="54" pos:column="76"/></name></expr></argument>)<pos:position pos:line="54" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="78"/></expr_stmt>
		<return pos:line="55" pos:column="17">return <expr><operator pos:line="55" pos:column="24">-<pos:position pos:line="55" pos:column="25"/></operator><literal type="number" pos:line="55" pos:column="25">1<pos:position pos:line="55" pos:column="26"/></literal></expr>;<pos:position pos:line="55" pos:column="27"/></return>
	}<pos:position pos:line="56" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="58" pos:column="9">module_id<pos:position pos:line="58" pos:column="18"/></name> <operator pos:line="58" pos:column="19">=<pos:position pos:line="58" pos:column="20"/></operator> <name pos:line="58" pos:column="21">i<pos:position pos:line="58" pos:column="22"/></name></expr>;<pos:position pos:line="58" pos:column="23"/></expr_stmt>

	<if pos:line="60" pos:column="9">if <condition pos:line="60" pos:column="12">(<expr><call><name pos:line="60" pos:column="13">lp_read_only<pos:position pos:line="60" pos:column="25"/></name><argument_list pos:line="60" pos:column="25">(<argument><expr><name pos:line="60" pos:column="26">i<pos:position pos:line="60" pos:column="27"/></name></expr></argument>)<pos:position pos:line="60" pos:column="28"/></argument_list></call></expr>)<pos:position pos:line="60" pos:column="29"/></condition><then pos:line="60" pos:column="29">
		<block type="pseudo"><expr_stmt><expr><name pos:line="61" pos:column="17">read_only<pos:position pos:line="61" pos:column="26"/></name> <operator pos:line="61" pos:column="27">=<pos:position pos:line="61" pos:column="28"/></operator> <literal type="number" pos:line="61" pos:column="29">1<pos:position pos:line="61" pos:column="30"/></literal></expr>;<pos:position pos:line="61" pos:column="31"/></expr_stmt></block></then></if>

	<if pos:line="63" pos:column="9">if <condition pos:line="63" pos:column="12">(<expr><call><name pos:line="63" pos:column="13">lp_transfer_logging<pos:position pos:line="63" pos:column="32"/></name><argument_list pos:line="63" pos:column="32">(<argument><expr><name pos:line="63" pos:column="33">i<pos:position pos:line="63" pos:column="34"/></name></expr></argument>)<pos:position pos:line="63" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="63" pos:column="36"/></condition><then pos:line="63" pos:column="36"> <block pos:line="63" pos:column="37">{
		<if pos:line="64" pos:column="17">if <condition pos:line="64" pos:column="20">(<expr><call><name pos:line="64" pos:column="21">log_format_has<pos:position pos:line="64" pos:column="35"/></name><argument_list pos:line="64" pos:column="35">(<argument><expr><call><name pos:line="64" pos:column="36">lp_log_format<pos:position pos:line="64" pos:column="49"/></name><argument_list pos:line="64" pos:column="49">(<argument><expr><name pos:line="64" pos:column="50">i<pos:position pos:line="64" pos:column="51"/></name></expr></argument>)<pos:position pos:line="64" pos:column="52"/></argument_list></call></expr></argument>, <argument><expr><literal type="char" pos:line="64" pos:column="54">'i'<pos:position pos:line="64" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="64" pos:column="58"/></argument_list></call></expr>)<pos:position pos:line="64" pos:column="59"/></condition><then pos:line="64" pos:column="59">
			<block type="pseudo"><expr_stmt><expr><name pos:line="65" pos:column="25">daemon_log_format_has_i<pos:position pos:line="65" pos:column="48"/></name> <operator pos:line="65" pos:column="49">=<pos:position pos:line="65" pos:column="50"/></operator> <literal type="number" pos:line="65" pos:column="51">1<pos:position pos:line="65" pos:column="52"/></literal></expr>;<pos:position pos:line="65" pos:column="53"/></expr_stmt></block></then></if>
		<if pos:line="66" pos:column="17">if <condition pos:line="66" pos:column="20">(<expr><name pos:line="66" pos:column="21">daemon_log_format_has_i<pos:position pos:line="66" pos:column="44"/></name>
		    <operator pos:line="67" pos:column="21">||<pos:position pos:line="67" pos:column="23"/></operator> <call><name pos:line="67" pos:column="24">log_format_has<pos:position pos:line="67" pos:column="38"/></name><argument_list pos:line="67" pos:column="38">(<argument><expr><call><name pos:line="67" pos:column="39">lp_log_format<pos:position pos:line="67" pos:column="52"/></name><argument_list pos:line="67" pos:column="52">(<argument><expr><name pos:line="67" pos:column="53">i<pos:position pos:line="67" pos:column="54"/></name></expr></argument>)<pos:position pos:line="67" pos:column="55"/></argument_list></call></expr></argument>, <argument><expr><literal type="char" pos:line="67" pos:column="57">'o'<pos:position pos:line="67" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="67" pos:column="61"/></argument_list></call></expr>)<pos:position pos:line="67" pos:column="62"/></condition><then pos:line="67" pos:column="62">
			<block type="pseudo"><expr_stmt><expr><name pos:line="68" pos:column="25">daemon_log_format_has_o_or_i<pos:position pos:line="68" pos:column="53"/></name> <operator pos:line="68" pos:column="54">=<pos:position pos:line="68" pos:column="55"/></operator> <literal type="number" pos:line="68" pos:column="56">1<pos:position pos:line="68" pos:column="57"/></literal></expr>;<pos:position pos:line="68" pos:column="58"/></expr_stmt></block></then></if>
	}<pos:position pos:line="69" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="71" pos:column="9">am_root<pos:position pos:line="71" pos:column="16"/></name> <operator pos:line="71" pos:column="17">=<pos:position pos:line="71" pos:column="18"/></operator> <operator pos:line="71" pos:column="19">(<pos:position pos:line="71" pos:column="20"/></operator><call><name pos:line="71" pos:column="20">MY_UID<pos:position pos:line="71" pos:column="26"/></name><argument_list pos:line="71" pos:column="26">()<pos:position pos:line="71" pos:column="28"/></argument_list></call> <operator pos:line="71" pos:column="29">==<pos:position pos:line="71" pos:column="31"/></operator> <literal type="number" pos:line="71" pos:column="32">0<pos:position pos:line="71" pos:column="33"/></literal><operator pos:line="71" pos:column="33">)<pos:position pos:line="71" pos:column="34"/></operator></expr>;<pos:position pos:line="71" pos:column="35"/></expr_stmt>

	<if pos:line="73" pos:column="9">if <condition pos:line="73" pos:column="12">(<expr><name pos:line="73" pos:column="13">am_root<pos:position pos:line="73" pos:column="20"/></name></expr>)<pos:position pos:line="73" pos:column="21"/></condition><then pos:line="73" pos:column="21"> <block pos:line="73" pos:column="22">{
		<expr_stmt><expr><name pos:line="74" pos:column="17">p<pos:position pos:line="74" pos:column="18"/></name> <operator pos:line="74" pos:column="19">=<pos:position pos:line="74" pos:column="20"/></operator> <call><name pos:line="74" pos:column="21">lp_uid<pos:position pos:line="74" pos:column="27"/></name><argument_list pos:line="74" pos:column="27">(<argument><expr><name pos:line="74" pos:column="28">i<pos:position pos:line="74" pos:column="29"/></name></expr></argument>)<pos:position pos:line="74" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="31"/></expr_stmt>
		<if pos:line="75" pos:column="17">if <condition pos:line="75" pos:column="20">(<expr><operator pos:line="75" pos:column="21">!<pos:position pos:line="75" pos:column="22"/></operator><call><name pos:line="75" pos:column="22">name_to_uid<pos:position pos:line="75" pos:column="33"/></name><argument_list pos:line="75" pos:column="33">(<argument><expr><name pos:line="75" pos:column="34">p<pos:position pos:line="75" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="75" pos:column="37">&amp;<pos:position pos:line="75" pos:column="42"/></operator><name pos:line="75" pos:column="38">uid<pos:position pos:line="75" pos:column="41"/></name></expr></argument>)<pos:position pos:line="75" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="75" pos:column="43"/></condition><then pos:line="75" pos:column="43"> <block pos:line="75" pos:column="44">{
			<if pos:line="76" pos:column="25">if <condition pos:line="76" pos:column="28">(<expr><operator pos:line="76" pos:column="29">!<pos:position pos:line="76" pos:column="30"/></operator><call><name pos:line="76" pos:column="30">isdigit<pos:position pos:line="76" pos:column="37"/></name><argument_list pos:line="76" pos:column="37">(<argument><expr><operator pos:line="76" pos:column="38">*<pos:position pos:line="76" pos:column="39"/></operator><operator pos:line="76" pos:column="39">(<pos:position pos:line="76" pos:column="40"/></operator><name pos:line="76" pos:column="40">unsigned<pos:position pos:line="76" pos:column="48"/></name> <name pos:line="76" pos:column="49">char<pos:position pos:line="76" pos:column="53"/></name> <operator pos:line="76" pos:column="54">*<pos:position pos:line="76" pos:column="55"/></operator><operator pos:line="76" pos:column="55">)<pos:position pos:line="76" pos:column="56"/></operator><name pos:line="76" pos:column="56">p<pos:position pos:line="76" pos:column="57"/></name></expr></argument>)<pos:position pos:line="76" pos:column="58"/></argument_list></call></expr>)<pos:position pos:line="76" pos:column="59"/></condition><then pos:line="76" pos:column="59"> <block pos:line="76" pos:column="60">{
				<expr_stmt><expr><call><name pos:line="77" pos:column="33">rprintf<pos:position pos:line="77" pos:column="40"/></name><argument_list pos:line="77" pos:column="40">(<argument><expr><name pos:line="77" pos:column="41">FLOG<pos:position pos:line="77" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="77" pos:column="47">"Invalid uid %s\n"<pos:position pos:line="77" pos:column="65"/></literal></expr></argument>, <argument><expr><name pos:line="77" pos:column="67">p<pos:position pos:line="77" pos:column="68"/></name></expr></argument>)<pos:position pos:line="77" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="70"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="78" pos:column="33">io_printf<pos:position pos:line="78" pos:column="42"/></name><argument_list pos:line="78" pos:column="42">(<argument><expr><name pos:line="78" pos:column="43">f_out<pos:position pos:line="78" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="78" pos:column="50">"@ERROR: invalid uid %s\n"<pos:position pos:line="78" pos:column="76"/></literal></expr></argument>, <argument><expr><name pos:line="78" pos:column="78">p<pos:position pos:line="78" pos:column="79"/></name></expr></argument>)<pos:position pos:line="78" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="81"/></expr_stmt>
				<return pos:line="79" pos:column="33">return <expr><operator pos:line="79" pos:column="40">-<pos:position pos:line="79" pos:column="41"/></operator><literal type="number" pos:line="79" pos:column="41">1<pos:position pos:line="79" pos:column="42"/></literal></expr>;<pos:position pos:line="79" pos:column="43"/></return>
			}<pos:position pos:line="80" pos:column="26"/></block></then></if>
			<expr_stmt><expr><name pos:line="81" pos:column="25">uid<pos:position pos:line="81" pos:column="28"/></name> <operator pos:line="81" pos:column="29">=<pos:position pos:line="81" pos:column="30"/></operator> <call><name pos:line="81" pos:column="31">atoi<pos:position pos:line="81" pos:column="35"/></name><argument_list pos:line="81" pos:column="35">(<argument><expr><name pos:line="81" pos:column="36">p<pos:position pos:line="81" pos:column="37"/></name></expr></argument>)<pos:position pos:line="81" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="39"/></expr_stmt>
		}<pos:position pos:line="82" pos:column="18"/></block></then></if>

		<expr_stmt><expr><name pos:line="84" pos:column="17">p<pos:position pos:line="84" pos:column="18"/></name> <operator pos:line="84" pos:column="19">=<pos:position pos:line="84" pos:column="20"/></operator> <call><name pos:line="84" pos:column="21">lp_gid<pos:position pos:line="84" pos:column="27"/></name><argument_list pos:line="84" pos:column="27">(<argument><expr><name pos:line="84" pos:column="28">i<pos:position pos:line="84" pos:column="29"/></name></expr></argument>)<pos:position pos:line="84" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="31"/></expr_stmt>
		<if pos:line="85" pos:column="17">if <condition pos:line="85" pos:column="20">(<expr><operator pos:line="85" pos:column="21">!<pos:position pos:line="85" pos:column="22"/></operator><call><name pos:line="85" pos:column="22">name_to_gid<pos:position pos:line="85" pos:column="33"/></name><argument_list pos:line="85" pos:column="33">(<argument><expr><name pos:line="85" pos:column="34">p<pos:position pos:line="85" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="85" pos:column="37">&amp;<pos:position pos:line="85" pos:column="42"/></operator><name pos:line="85" pos:column="38">gid<pos:position pos:line="85" pos:column="41"/></name></expr></argument>)<pos:position pos:line="85" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="85" pos:column="43"/></condition><then pos:line="85" pos:column="43"> <block pos:line="85" pos:column="44">{
			<if pos:line="86" pos:column="25">if <condition pos:line="86" pos:column="28">(<expr><operator pos:line="86" pos:column="29">!<pos:position pos:line="86" pos:column="30"/></operator><call><name pos:line="86" pos:column="30">isdigit<pos:position pos:line="86" pos:column="37"/></name><argument_list pos:line="86" pos:column="37">(<argument><expr><operator pos:line="86" pos:column="38">*<pos:position pos:line="86" pos:column="39"/></operator><operator pos:line="86" pos:column="39">(<pos:position pos:line="86" pos:column="40"/></operator><name pos:line="86" pos:column="40">unsigned<pos:position pos:line="86" pos:column="48"/></name> <name pos:line="86" pos:column="49">char<pos:position pos:line="86" pos:column="53"/></name> <operator pos:line="86" pos:column="54">*<pos:position pos:line="86" pos:column="55"/></operator><operator pos:line="86" pos:column="55">)<pos:position pos:line="86" pos:column="56"/></operator><name pos:line="86" pos:column="56">p<pos:position pos:line="86" pos:column="57"/></name></expr></argument>)<pos:position pos:line="86" pos:column="58"/></argument_list></call></expr>)<pos:position pos:line="86" pos:column="59"/></condition><then pos:line="86" pos:column="59"> <block pos:line="86" pos:column="60">{
				<expr_stmt><expr><call><name pos:line="87" pos:column="33">rprintf<pos:position pos:line="87" pos:column="40"/></name><argument_list pos:line="87" pos:column="40">(<argument><expr><name pos:line="87" pos:column="41">FLOG<pos:position pos:line="87" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="87" pos:column="47">"Invalid gid %s\n"<pos:position pos:line="87" pos:column="65"/></literal></expr></argument>, <argument><expr><name pos:line="87" pos:column="67">p<pos:position pos:line="87" pos:column="68"/></name></expr></argument>)<pos:position pos:line="87" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="70"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="88" pos:column="33">io_printf<pos:position pos:line="88" pos:column="42"/></name><argument_list pos:line="88" pos:column="42">(<argument><expr><name pos:line="88" pos:column="43">f_out<pos:position pos:line="88" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="88" pos:column="50">"@ERROR: invalid gid %s\n"<pos:position pos:line="88" pos:column="76"/></literal></expr></argument>, <argument><expr><name pos:line="88" pos:column="78">p<pos:position pos:line="88" pos:column="79"/></name></expr></argument>)<pos:position pos:line="88" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="81"/></expr_stmt>
				<return pos:line="89" pos:column="33">return <expr><operator pos:line="89" pos:column="40">-<pos:position pos:line="89" pos:column="41"/></operator><literal type="number" pos:line="89" pos:column="41">1<pos:position pos:line="89" pos:column="42"/></literal></expr>;<pos:position pos:line="89" pos:column="43"/></return>
			}<pos:position pos:line="90" pos:column="26"/></block></then></if>
			<expr_stmt><expr><name pos:line="91" pos:column="25">gid<pos:position pos:line="91" pos:column="28"/></name> <operator pos:line="91" pos:column="29">=<pos:position pos:line="91" pos:column="30"/></operator> <call><name pos:line="91" pos:column="31">atoi<pos:position pos:line="91" pos:column="35"/></name><argument_list pos:line="91" pos:column="35">(<argument><expr><name pos:line="91" pos:column="36">p<pos:position pos:line="91" pos:column="37"/></name></expr></argument>)<pos:position pos:line="91" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="39"/></expr_stmt>
		}<pos:position pos:line="92" pos:column="18"/></block></then></if>
	}<pos:position pos:line="93" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="95" pos:column="9">/* TODO: If we're not root, but the configuration requests
	 * that we change to some uid other than the current one, then
	 * log a warning. */</comment>

	<comment type="block" pos:line="99" pos:column="9">/* TODO: Perhaps take a list of gids, and make them into the
	 * supplementary groups. */</comment>

	<if pos:line="102" pos:column="9">if <condition pos:line="102" pos:column="12">(<expr><name pos:line="102" pos:column="13">use_chroot<pos:position pos:line="102" pos:column="23"/></name> <operator pos:line="102" pos:column="24">||<pos:position pos:line="102" pos:column="26"/></operator> <operator pos:line="102" pos:column="27">(<pos:position pos:line="102" pos:column="28"/></operator><name pos:line="102" pos:column="28">module_dirlen<pos:position pos:line="102" pos:column="41"/></name> <operator pos:line="102" pos:column="42">=<pos:position pos:line="102" pos:column="43"/></operator> <call><name pos:line="102" pos:column="44">strlen<pos:position pos:line="102" pos:column="50"/></name><argument_list pos:line="102" pos:column="50">(<argument><expr><call><name pos:line="102" pos:column="51">lp_path<pos:position pos:line="102" pos:column="58"/></name><argument_list pos:line="102" pos:column="58">(<argument><expr><name pos:line="102" pos:column="59">i<pos:position pos:line="102" pos:column="60"/></name></expr></argument>)<pos:position pos:line="102" pos:column="61"/></argument_list></call></expr></argument>)<pos:position pos:line="102" pos:column="62"/></argument_list></call><operator pos:line="102" pos:column="62">)<pos:position pos:line="102" pos:column="63"/></operator> <operator pos:line="102" pos:column="64">==<pos:position pos:line="102" pos:column="66"/></operator> <literal type="number" pos:line="102" pos:column="67">1<pos:position pos:line="102" pos:column="68"/></literal></expr>)<pos:position pos:line="102" pos:column="69"/></condition><then pos:line="102" pos:column="69"> <block pos:line="102" pos:column="70">{
		<expr_stmt><expr><name pos:line="103" pos:column="17">module_dirlen<pos:position pos:line="103" pos:column="30"/></name> <operator pos:line="103" pos:column="31">=<pos:position pos:line="103" pos:column="32"/></operator> <literal type="number" pos:line="103" pos:column="33">0<pos:position pos:line="103" pos:column="34"/></literal></expr>;<pos:position pos:line="103" pos:column="35"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="104" pos:column="17">set_filter_dir<pos:position pos:line="104" pos:column="31"/></name><argument_list pos:line="104" pos:column="31">(<argument><expr><literal type="string" pos:line="104" pos:column="32">"/"<pos:position pos:line="104" pos:column="35"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="104" pos:column="37">1<pos:position pos:line="104" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="104" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="104" pos:column="40"/></expr_stmt>
	}<pos:position pos:line="105" pos:column="10"/></block></then> <else pos:line="105" pos:column="11">else
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="106" pos:column="17">set_filter_dir<pos:position pos:line="106" pos:column="31"/></name><argument_list pos:line="106" pos:column="31">(<argument><expr><call><name pos:line="106" pos:column="32">lp_path<pos:position pos:line="106" pos:column="39"/></name><argument_list pos:line="106" pos:column="39">(<argument><expr><name pos:line="106" pos:column="40">i<pos:position pos:line="106" pos:column="41"/></name></expr></argument>)<pos:position pos:line="106" pos:column="42"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="106" pos:column="44">module_dirlen<pos:position pos:line="106" pos:column="57"/></name></expr></argument>)<pos:position pos:line="106" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="106" pos:column="59"/></expr_stmt></block></else></if>

	<expr_stmt><expr><name pos:line="108" pos:column="9">p<pos:position pos:line="108" pos:column="10"/></name> <operator pos:line="108" pos:column="11">=<pos:position pos:line="108" pos:column="12"/></operator> <call><name pos:line="108" pos:column="13">lp_filter<pos:position pos:line="108" pos:column="22"/></name><argument_list pos:line="108" pos:column="22">(<argument><expr><name pos:line="108" pos:column="23">i<pos:position pos:line="108" pos:column="24"/></name></expr></argument>)<pos:position pos:line="108" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="108" pos:column="26"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="109" pos:column="9">parse_rule<pos:position pos:line="109" pos:column="19"/></name><argument_list pos:line="109" pos:column="19">(<argument><expr><operator pos:line="109" pos:column="20">&amp;<pos:position pos:line="109" pos:column="25"/></operator><name pos:line="109" pos:column="21">server_filter_list<pos:position pos:line="109" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="109" pos:column="41">p<pos:position pos:line="109" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="109" pos:column="44">MATCHFLG_WORD_SPLIT<pos:position pos:line="109" pos:column="63"/></name></expr></argument>,
		   <argument><expr><name pos:line="110" pos:column="20">XFLG_ANCHORED2ABS<pos:position pos:line="110" pos:column="37"/></name></expr></argument>)<pos:position pos:line="110" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="110" pos:column="39"/></expr_stmt>

	<expr_stmt><expr><name pos:line="112" pos:column="9">p<pos:position pos:line="112" pos:column="10"/></name> <operator pos:line="112" pos:column="11">=<pos:position pos:line="112" pos:column="12"/></operator> <call><name pos:line="112" pos:column="13">lp_include_from<pos:position pos:line="112" pos:column="28"/></name><argument_list pos:line="112" pos:column="28">(<argument><expr><name pos:line="112" pos:column="29">i<pos:position pos:line="112" pos:column="30"/></name></expr></argument>)<pos:position pos:line="112" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="112" pos:column="32"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="113" pos:column="9">parse_filter_file<pos:position pos:line="113" pos:column="26"/></name><argument_list pos:line="113" pos:column="26">(<argument><expr><operator pos:line="113" pos:column="27">&amp;<pos:position pos:line="113" pos:column="32"/></operator><name pos:line="113" pos:column="28">server_filter_list<pos:position pos:line="113" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="113" pos:column="48">p<pos:position pos:line="113" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="113" pos:column="51">MATCHFLG_INCLUDE<pos:position pos:line="113" pos:column="67"/></name></expr></argument>,
	    <argument><expr><name pos:line="114" pos:column="13">XFLG_ANCHORED2ABS<pos:position pos:line="114" pos:column="30"/></name> <operator pos:line="114" pos:column="31">|<pos:position pos:line="114" pos:column="32"/></operator> <name pos:line="114" pos:column="33">XFLG_OLD_PREFIXES<pos:position pos:line="114" pos:column="50"/></name> <operator pos:line="114" pos:column="51">|<pos:position pos:line="114" pos:column="52"/></operator> <name pos:line="114" pos:column="53">XFLG_FATAL_ERRORS<pos:position pos:line="114" pos:column="70"/></name></expr></argument>)<pos:position pos:line="114" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="114" pos:column="72"/></expr_stmt>

	<expr_stmt><expr><name pos:line="116" pos:column="9">p<pos:position pos:line="116" pos:column="10"/></name> <operator pos:line="116" pos:column="11">=<pos:position pos:line="116" pos:column="12"/></operator> <call><name pos:line="116" pos:column="13">lp_include<pos:position pos:line="116" pos:column="23"/></name><argument_list pos:line="116" pos:column="23">(<argument><expr><name pos:line="116" pos:column="24">i<pos:position pos:line="116" pos:column="25"/></name></expr></argument>)<pos:position pos:line="116" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="116" pos:column="27"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="117" pos:column="9">parse_rule<pos:position pos:line="117" pos:column="19"/></name><argument_list pos:line="117" pos:column="19">(<argument><expr><operator pos:line="117" pos:column="20">&amp;<pos:position pos:line="117" pos:column="25"/></operator><name pos:line="117" pos:column="21">server_filter_list<pos:position pos:line="117" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="117" pos:column="41">p<pos:position pos:line="117" pos:column="42"/></name></expr></argument>,
		   <argument><expr><name pos:line="118" pos:column="20">MATCHFLG_INCLUDE<pos:position pos:line="118" pos:column="36"/></name> <operator pos:line="118" pos:column="37">|<pos:position pos:line="118" pos:column="38"/></operator> <name pos:line="118" pos:column="39">MATCHFLG_WORD_SPLIT<pos:position pos:line="118" pos:column="58"/></name></expr></argument>,
		   <argument><expr><name pos:line="119" pos:column="20">XFLG_ANCHORED2ABS<pos:position pos:line="119" pos:column="37"/></name> <operator pos:line="119" pos:column="38">|<pos:position pos:line="119" pos:column="39"/></operator> <name pos:line="119" pos:column="40">XFLG_OLD_PREFIXES<pos:position pos:line="119" pos:column="57"/></name></expr></argument>)<pos:position pos:line="119" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="119" pos:column="59"/></expr_stmt>

	<expr_stmt><expr><name pos:line="121" pos:column="9">p<pos:position pos:line="121" pos:column="10"/></name> <operator pos:line="121" pos:column="11">=<pos:position pos:line="121" pos:column="12"/></operator> <call><name pos:line="121" pos:column="13">lp_exclude_from<pos:position pos:line="121" pos:column="28"/></name><argument_list pos:line="121" pos:column="28">(<argument><expr><name pos:line="121" pos:column="29">i<pos:position pos:line="121" pos:column="30"/></name></expr></argument>)<pos:position pos:line="121" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="121" pos:column="32"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="122" pos:column="9">parse_filter_file<pos:position pos:line="122" pos:column="26"/></name><argument_list pos:line="122" pos:column="26">(<argument><expr><operator pos:line="122" pos:column="27">&amp;<pos:position pos:line="122" pos:column="32"/></operator><name pos:line="122" pos:column="28">server_filter_list<pos:position pos:line="122" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="122" pos:column="48">p<pos:position pos:line="122" pos:column="49"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="122" pos:column="51">0<pos:position pos:line="122" pos:column="52"/></literal></expr></argument>,
	    <argument><expr><name pos:line="123" pos:column="13">XFLG_ANCHORED2ABS<pos:position pos:line="123" pos:column="30"/></name> <operator pos:line="123" pos:column="31">|<pos:position pos:line="123" pos:column="32"/></operator> <name pos:line="123" pos:column="33">XFLG_OLD_PREFIXES<pos:position pos:line="123" pos:column="50"/></name> <operator pos:line="123" pos:column="51">|<pos:position pos:line="123" pos:column="52"/></operator> <name pos:line="123" pos:column="53">XFLG_FATAL_ERRORS<pos:position pos:line="123" pos:column="70"/></name></expr></argument>)<pos:position pos:line="123" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="123" pos:column="72"/></expr_stmt>

	<expr_stmt><expr><name pos:line="125" pos:column="9">p<pos:position pos:line="125" pos:column="10"/></name> <operator pos:line="125" pos:column="11">=<pos:position pos:line="125" pos:column="12"/></operator> <call><name pos:line="125" pos:column="13">lp_exclude<pos:position pos:line="125" pos:column="23"/></name><argument_list pos:line="125" pos:column="23">(<argument><expr><name pos:line="125" pos:column="24">i<pos:position pos:line="125" pos:column="25"/></name></expr></argument>)<pos:position pos:line="125" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="125" pos:column="27"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="126" pos:column="9">parse_rule<pos:position pos:line="126" pos:column="19"/></name><argument_list pos:line="126" pos:column="19">(<argument><expr><operator pos:line="126" pos:column="20">&amp;<pos:position pos:line="126" pos:column="25"/></operator><name pos:line="126" pos:column="21">server_filter_list<pos:position pos:line="126" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="126" pos:column="41">p<pos:position pos:line="126" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="126" pos:column="44">MATCHFLG_WORD_SPLIT<pos:position pos:line="126" pos:column="63"/></name></expr></argument>,
		   <argument><expr><name pos:line="127" pos:column="20">XFLG_ANCHORED2ABS<pos:position pos:line="127" pos:column="37"/></name> <operator pos:line="127" pos:column="38">|<pos:position pos:line="127" pos:column="39"/></operator> <name pos:line="127" pos:column="40">XFLG_OLD_PREFIXES<pos:position pos:line="127" pos:column="57"/></name></expr></argument>)<pos:position pos:line="127" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="127" pos:column="59"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="129" pos:column="9">log_init<pos:position pos:line="129" pos:column="17"/></name><argument_list pos:line="129" pos:column="17">()<pos:position pos:line="129" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="129" pos:column="20"/></expr_stmt>

	<if pos:line="131" pos:column="9">if <condition pos:line="131" pos:column="12">(<expr><name pos:line="131" pos:column="13">use_chroot<pos:position pos:line="131" pos:column="23"/></name></expr>)<pos:position pos:line="131" pos:column="24"/></condition><then pos:line="131" pos:column="24"> <block pos:line="131" pos:column="25">{
		<comment type="block" pos:line="132" pos:column="17">/*
		 * XXX: The 'use chroot' flag is a fairly reliable
		 * source of confusion, because it fails under two
		 * important circumstances: running as non-root,
		 * running on Win32 (or possibly others).  On the
		 * other hand, if you are running as root, then it
		 * might be better to always use chroot.
		 *
		 * So, perhaps if we can't chroot we should just issue
		 * a warning, unless a "require chroot" flag is set,
		 * in which case we fail.
		 */</comment>
		<if pos:line="144" pos:column="17">if <condition pos:line="144" pos:column="20">(<expr><call><name pos:line="144" pos:column="21">chroot<pos:position pos:line="144" pos:column="27"/></name><argument_list pos:line="144" pos:column="27">(<argument><expr><call><name pos:line="144" pos:column="28">lp_path<pos:position pos:line="144" pos:column="35"/></name><argument_list pos:line="144" pos:column="35">(<argument><expr><name pos:line="144" pos:column="36">i<pos:position pos:line="144" pos:column="37"/></name></expr></argument>)<pos:position pos:line="144" pos:column="38"/></argument_list></call></expr></argument>)<pos:position pos:line="144" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="144" pos:column="40"/></condition><then pos:line="144" pos:column="40"> <block pos:line="144" pos:column="41">{
			<expr_stmt><expr><call><name pos:line="145" pos:column="25">rsyserr<pos:position pos:line="145" pos:column="32"/></name><argument_list pos:line="145" pos:column="32">(<argument><expr><name pos:line="145" pos:column="33">FLOG<pos:position pos:line="145" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="145" pos:column="39">errno<pos:position pos:line="145" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="145" pos:column="46">"chroot %s failed"<pos:position pos:line="145" pos:column="64"/></literal></expr></argument>,
				<argument><expr><call><name pos:line="146" pos:column="33">safe_fname<pos:position pos:line="146" pos:column="43"/></name><argument_list pos:line="146" pos:column="43">(<argument><expr><call><name pos:line="146" pos:column="44">lp_path<pos:position pos:line="146" pos:column="51"/></name><argument_list pos:line="146" pos:column="51">(<argument><expr><name pos:line="146" pos:column="52">i<pos:position pos:line="146" pos:column="53"/></name></expr></argument>)<pos:position pos:line="146" pos:column="54"/></argument_list></call></expr></argument>)<pos:position pos:line="146" pos:column="55"/></argument_list></call></expr></argument>)<pos:position pos:line="146" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="146" pos:column="57"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="147" pos:column="25">io_printf<pos:position pos:line="147" pos:column="34"/></name><argument_list pos:line="147" pos:column="34">(<argument><expr><name pos:line="147" pos:column="35">f_out<pos:position pos:line="147" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="147" pos:column="42">"@ERROR: chroot failed\n"<pos:position pos:line="147" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="147" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="147" pos:column="69"/></expr_stmt>
			<return pos:line="148" pos:column="25">return <expr><operator pos:line="148" pos:column="32">-<pos:position pos:line="148" pos:column="33"/></operator><literal type="number" pos:line="148" pos:column="33">1<pos:position pos:line="148" pos:column="34"/></literal></expr>;<pos:position pos:line="148" pos:column="35"/></return>
		}<pos:position pos:line="149" pos:column="18"/></block></then></if>

		<if pos:line="151" pos:column="17">if <condition pos:line="151" pos:column="20">(<expr><operator pos:line="151" pos:column="21">!<pos:position pos:line="151" pos:column="22"/></operator><call><name pos:line="151" pos:column="22">push_dir<pos:position pos:line="151" pos:column="30"/></name><argument_list pos:line="151" pos:column="30">(<argument><expr><literal type="string" pos:line="151" pos:column="31">"/"<pos:position pos:line="151" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="151" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="151" pos:column="36"/></condition><then pos:line="151" pos:column="36"> <block pos:line="151" pos:column="37">{
			<expr_stmt><expr><call><name pos:line="152" pos:column="25">rsyserr<pos:position pos:line="152" pos:column="32"/></name><argument_list pos:line="152" pos:column="32">(<argument><expr><name pos:line="152" pos:column="33">FLOG<pos:position pos:line="152" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="152" pos:column="39">errno<pos:position pos:line="152" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="152" pos:column="46">"chdir %s failed\n"<pos:position pos:line="152" pos:column="65"/></literal></expr></argument>,
				<argument><expr><call><name pos:line="153" pos:column="33">safe_fname<pos:position pos:line="153" pos:column="43"/></name><argument_list pos:line="153" pos:column="43">(<argument><expr><call><name pos:line="153" pos:column="44">lp_path<pos:position pos:line="153" pos:column="51"/></name><argument_list pos:line="153" pos:column="51">(<argument><expr><name pos:line="153" pos:column="52">i<pos:position pos:line="153" pos:column="53"/></name></expr></argument>)<pos:position pos:line="153" pos:column="54"/></argument_list></call></expr></argument>)<pos:position pos:line="153" pos:column="55"/></argument_list></call></expr></argument>)<pos:position pos:line="153" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="153" pos:column="57"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="154" pos:column="25">io_printf<pos:position pos:line="154" pos:column="34"/></name><argument_list pos:line="154" pos:column="34">(<argument><expr><name pos:line="154" pos:column="35">f_out<pos:position pos:line="154" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="154" pos:column="42">"@ERROR: chdir failed\n"<pos:position pos:line="154" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="154" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="154" pos:column="68"/></expr_stmt>
			<return pos:line="155" pos:column="25">return <expr><operator pos:line="155" pos:column="32">-<pos:position pos:line="155" pos:column="33"/></operator><literal type="number" pos:line="155" pos:column="33">1<pos:position pos:line="155" pos:column="34"/></literal></expr>;<pos:position pos:line="155" pos:column="35"/></return>
		}<pos:position pos:line="156" pos:column="18"/></block></then></if>

	}<pos:position pos:line="158" pos:column="10"/></block></then> <else pos:line="158" pos:column="11">else <block pos:line="158" pos:column="16">{
		<if pos:line="159" pos:column="17">if <condition pos:line="159" pos:column="20">(<expr><operator pos:line="159" pos:column="21">!<pos:position pos:line="159" pos:column="22"/></operator><call><name pos:line="159" pos:column="22">push_dir<pos:position pos:line="159" pos:column="30"/></name><argument_list pos:line="159" pos:column="30">(<argument><expr><call><name pos:line="159" pos:column="31">lp_path<pos:position pos:line="159" pos:column="38"/></name><argument_list pos:line="159" pos:column="38">(<argument><expr><name pos:line="159" pos:column="39">i<pos:position pos:line="159" pos:column="40"/></name></expr></argument>)<pos:position pos:line="159" pos:column="41"/></argument_list></call></expr></argument>)<pos:position pos:line="159" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="159" pos:column="43"/></condition><then pos:line="159" pos:column="43"> <block pos:line="159" pos:column="44">{
			<expr_stmt><expr><call><name pos:line="160" pos:column="25">rsyserr<pos:position pos:line="160" pos:column="32"/></name><argument_list pos:line="160" pos:column="32">(<argument><expr><name pos:line="160" pos:column="33">FLOG<pos:position pos:line="160" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="160" pos:column="39">errno<pos:position pos:line="160" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="160" pos:column="46">"chdir %s failed\n"<pos:position pos:line="160" pos:column="65"/></literal></expr></argument>,
				<argument><expr><call><name pos:line="161" pos:column="33">safe_fname<pos:position pos:line="161" pos:column="43"/></name><argument_list pos:line="161" pos:column="43">(<argument><expr><call><name pos:line="161" pos:column="44">lp_path<pos:position pos:line="161" pos:column="51"/></name><argument_list pos:line="161" pos:column="51">(<argument><expr><name pos:line="161" pos:column="52">i<pos:position pos:line="161" pos:column="53"/></name></expr></argument>)<pos:position pos:line="161" pos:column="54"/></argument_list></call></expr></argument>)<pos:position pos:line="161" pos:column="55"/></argument_list></call></expr></argument>)<pos:position pos:line="161" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="161" pos:column="57"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="162" pos:column="25">io_printf<pos:position pos:line="162" pos:column="34"/></name><argument_list pos:line="162" pos:column="34">(<argument><expr><name pos:line="162" pos:column="35">f_out<pos:position pos:line="162" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="162" pos:column="42">"@ERROR: chdir failed\n"<pos:position pos:line="162" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="162" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="162" pos:column="68"/></expr_stmt>
			<return pos:line="163" pos:column="25">return <expr><operator pos:line="163" pos:column="32">-<pos:position pos:line="163" pos:column="33"/></operator><literal type="number" pos:line="163" pos:column="33">1<pos:position pos:line="163" pos:column="34"/></literal></expr>;<pos:position pos:line="163" pos:column="35"/></return>
		}<pos:position pos:line="164" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name pos:line="165" pos:column="17">sanitize_paths<pos:position pos:line="165" pos:column="31"/></name> <operator pos:line="165" pos:column="32">=<pos:position pos:line="165" pos:column="33"/></operator> <literal type="number" pos:line="165" pos:column="34">1<pos:position pos:line="165" pos:column="35"/></literal></expr>;<pos:position pos:line="165" pos:column="36"/></expr_stmt>
	}<pos:position pos:line="166" pos:column="10"/></block></else></if>

	<if pos:line="168" pos:column="9">if <condition pos:line="168" pos:column="12">(<expr><name pos:line="168" pos:column="13">am_root<pos:position pos:line="168" pos:column="20"/></name></expr>)<pos:position pos:line="168" pos:column="21"/></condition><then pos:line="168" pos:column="21"> <block pos:line="168" pos:column="22">{
		<comment type="block" pos:line="169" pos:column="17">/* XXXX: You could argue that if the daemon is started
		 * by a non-root user and they explicitly specify a
		 * gid, then we should try to change to that gid --
		 * this could be possible if it's already in their
		 * supplementary groups. */</comment>

		<comment type="block" pos:line="175" pos:column="17">/* TODO: Perhaps we need to document that if rsyncd is
		 * started by somebody other than root it will inherit
		 * all their supplementary groups. */</comment>

		<if pos:line="179" pos:column="17">if <condition pos:line="179" pos:column="20">(<expr><call><name pos:line="179" pos:column="21">setgid<pos:position pos:line="179" pos:column="27"/></name><argument_list pos:line="179" pos:column="27">(<argument><expr><name pos:line="179" pos:column="28">gid<pos:position pos:line="179" pos:column="31"/></name></expr></argument>)<pos:position pos:line="179" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="179" pos:column="33"/></condition><then pos:line="179" pos:column="33"> <block pos:line="179" pos:column="34">{
			<expr_stmt><expr><call><name pos:line="180" pos:column="25">rsyserr<pos:position pos:line="180" pos:column="32"/></name><argument_list pos:line="180" pos:column="32">(<argument><expr><name pos:line="180" pos:column="33">FLOG<pos:position pos:line="180" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="180" pos:column="39">errno<pos:position pos:line="180" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="180" pos:column="46">"setgid %d failed"<pos:position pos:line="180" pos:column="64"/></literal></expr></argument>, <argument><expr><operator pos:line="180" pos:column="66">(<pos:position pos:line="180" pos:column="67"/></operator><name pos:line="180" pos:column="67">int<pos:position pos:line="180" pos:column="70"/></name><operator pos:line="180" pos:column="70">)<pos:position pos:line="180" pos:column="71"/></operator><name pos:line="180" pos:column="71">gid<pos:position pos:line="180" pos:column="74"/></name></expr></argument>)<pos:position pos:line="180" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="180" pos:column="76"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="181" pos:column="25">io_printf<pos:position pos:line="181" pos:column="34"/></name><argument_list pos:line="181" pos:column="34">(<argument><expr><name pos:line="181" pos:column="35">f_out<pos:position pos:line="181" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="181" pos:column="42">"@ERROR: setgid failed\n"<pos:position pos:line="181" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="181" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="181" pos:column="69"/></expr_stmt>
			<return pos:line="182" pos:column="25">return <expr><operator pos:line="182" pos:column="32">-<pos:position pos:line="182" pos:column="33"/></operator><literal type="number" pos:line="182" pos:column="33">1<pos:position pos:line="182" pos:column="34"/></literal></expr>;<pos:position pos:line="182" pos:column="35"/></return>
		}<pos:position pos:line="183" pos:column="18"/></block></then></if>
<cpp:ifdef pos:line="184" pos:column="1">#<cpp:directive pos:line="184" pos:column="2">ifdef<pos:position pos:line="184" pos:column="7"/></cpp:directive> <name pos:line="184" pos:column="8">HAVE_SETGROUPS<pos:position pos:line="184" pos:column="22"/></name></cpp:ifdef>
		<comment type="block" pos:line="185" pos:column="17">/* Get rid of any supplementary groups this process
		 * might have inheristed. */</comment>
		<if pos:line="187" pos:column="17">if <condition pos:line="187" pos:column="20">(<expr><call><name pos:line="187" pos:column="21">setgroups<pos:position pos:line="187" pos:column="30"/></name><argument_list pos:line="187" pos:column="30">(<argument><expr><literal type="number" pos:line="187" pos:column="31">1<pos:position pos:line="187" pos:column="32"/></literal></expr></argument>, <argument><expr><operator pos:line="187" pos:column="34">&amp;<pos:position pos:line="187" pos:column="39"/></operator><name pos:line="187" pos:column="35">gid<pos:position pos:line="187" pos:column="38"/></name></expr></argument>)<pos:position pos:line="187" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="187" pos:column="40"/></condition><then pos:line="187" pos:column="40"> <block pos:line="187" pos:column="41">{
			<expr_stmt><expr><call><name pos:line="188" pos:column="25">rsyserr<pos:position pos:line="188" pos:column="32"/></name><argument_list pos:line="188" pos:column="32">(<argument><expr><name pos:line="188" pos:column="33">FLOG<pos:position pos:line="188" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="188" pos:column="39">errno<pos:position pos:line="188" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="188" pos:column="46">"setgroups failed"<pos:position pos:line="188" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="188" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="188" pos:column="66"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="189" pos:column="25">io_printf<pos:position pos:line="189" pos:column="34"/></name><argument_list pos:line="189" pos:column="34">(<argument><expr><name pos:line="189" pos:column="35">f_out<pos:position pos:line="189" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="189" pos:column="42">"@ERROR: setgroups failed\n"<pos:position pos:line="189" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="189" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="189" pos:column="72"/></expr_stmt>
			<return pos:line="190" pos:column="25">return <expr><operator pos:line="190" pos:column="32">-<pos:position pos:line="190" pos:column="33"/></operator><literal type="number" pos:line="190" pos:column="33">1<pos:position pos:line="190" pos:column="34"/></literal></expr>;<pos:position pos:line="190" pos:column="35"/></return>
		}<pos:position pos:line="191" pos:column="18"/></block></then></if>
<cpp:endif pos:line="192" pos:column="1">#<cpp:directive pos:line="192" pos:column="2">endif<pos:position pos:line="192" pos:column="7"/></cpp:directive></cpp:endif>

		<if pos:line="194" pos:column="17">if <condition pos:line="194" pos:column="20">(<expr><call><name pos:line="194" pos:column="21">setuid<pos:position pos:line="194" pos:column="27"/></name><argument_list pos:line="194" pos:column="27">(<argument><expr><name pos:line="194" pos:column="28">uid<pos:position pos:line="194" pos:column="31"/></name></expr></argument>)<pos:position pos:line="194" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="194" pos:column="33"/></condition><then pos:line="194" pos:column="33"> <block pos:line="194" pos:column="34">{
			<expr_stmt><expr><call><name pos:line="195" pos:column="25">rsyserr<pos:position pos:line="195" pos:column="32"/></name><argument_list pos:line="195" pos:column="32">(<argument><expr><name pos:line="195" pos:column="33">FLOG<pos:position pos:line="195" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="195" pos:column="39">errno<pos:position pos:line="195" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="195" pos:column="46">"setuid %d failed"<pos:position pos:line="195" pos:column="64"/></literal></expr></argument>, <argument><expr><operator pos:line="195" pos:column="66">(<pos:position pos:line="195" pos:column="67"/></operator><name pos:line="195" pos:column="67">int<pos:position pos:line="195" pos:column="70"/></name><operator pos:line="195" pos:column="70">)<pos:position pos:line="195" pos:column="71"/></operator><name pos:line="195" pos:column="71">uid<pos:position pos:line="195" pos:column="74"/></name></expr></argument>)<pos:position pos:line="195" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="195" pos:column="76"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="196" pos:column="25">io_printf<pos:position pos:line="196" pos:column="34"/></name><argument_list pos:line="196" pos:column="34">(<argument><expr><name pos:line="196" pos:column="35">f_out<pos:position pos:line="196" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="196" pos:column="42">"@ERROR: setuid failed\n"<pos:position pos:line="196" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="196" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="196" pos:column="69"/></expr_stmt>
			<return pos:line="197" pos:column="25">return <expr><operator pos:line="197" pos:column="32">-<pos:position pos:line="197" pos:column="33"/></operator><literal type="number" pos:line="197" pos:column="33">1<pos:position pos:line="197" pos:column="34"/></literal></expr>;<pos:position pos:line="197" pos:column="35"/></return>
		}<pos:position pos:line="198" pos:column="18"/></block></then></if>

		<expr_stmt><expr><name pos:line="200" pos:column="17">am_root<pos:position pos:line="200" pos:column="24"/></name> <operator pos:line="200" pos:column="25">=<pos:position pos:line="200" pos:column="26"/></operator> <operator pos:line="200" pos:column="27">(<pos:position pos:line="200" pos:column="28"/></operator><call><name pos:line="200" pos:column="28">MY_UID<pos:position pos:line="200" pos:column="34"/></name><argument_list pos:line="200" pos:column="34">()<pos:position pos:line="200" pos:column="36"/></argument_list></call> <operator pos:line="200" pos:column="37">==<pos:position pos:line="200" pos:column="39"/></operator> <literal type="number" pos:line="200" pos:column="40">0<pos:position pos:line="200" pos:column="41"/></literal><operator pos:line="200" pos:column="41">)<pos:position pos:line="200" pos:column="42"/></operator></expr>;<pos:position pos:line="200" pos:column="43"/></expr_stmt>
	}<pos:position pos:line="201" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="203" pos:column="9">io_printf<pos:position pos:line="203" pos:column="18"/></name><argument_list pos:line="203" pos:column="18">(<argument><expr><name pos:line="203" pos:column="19">f_out<pos:position pos:line="203" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="203" pos:column="26">"@RSYNCD: OK\n"<pos:position pos:line="203" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="203" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="203" pos:column="43"/></expr_stmt>

	<expr_stmt><expr><name pos:line="205" pos:column="9">maxargs<pos:position pos:line="205" pos:column="16"/></name> <operator pos:line="205" pos:column="17">=<pos:position pos:line="205" pos:column="18"/></operator> <name pos:line="205" pos:column="19">MAX_ARGS<pos:position pos:line="205" pos:column="27"/></name></expr>;<pos:position pos:line="205" pos:column="28"/></expr_stmt>
	<if pos:line="206" pos:column="9">if <condition pos:line="206" pos:column="12">(<expr><operator pos:line="206" pos:column="13">!<pos:position pos:line="206" pos:column="14"/></operator><operator pos:line="206" pos:column="14">(<pos:position pos:line="206" pos:column="15"/></operator><name pos:line="206" pos:column="15">argv<pos:position pos:line="206" pos:column="19"/></name> <operator pos:line="206" pos:column="20">=<pos:position pos:line="206" pos:column="21"/></operator> <call><name pos:line="206" pos:column="22">new_array<pos:position pos:line="206" pos:column="31"/></name><argument_list pos:line="206" pos:column="31">(<argument><expr><name pos:line="206" pos:column="32">char<pos:position pos:line="206" pos:column="36"/></name> <operator pos:line="206" pos:column="37">*<pos:position pos:line="206" pos:column="38"/></operator></expr></argument>, <argument><expr><name pos:line="206" pos:column="40">maxargs<pos:position pos:line="206" pos:column="47"/></name></expr></argument>)<pos:position pos:line="206" pos:column="48"/></argument_list></call><operator pos:line="206" pos:column="48">)<pos:position pos:line="206" pos:column="49"/></operator></expr>)<pos:position pos:line="206" pos:column="50"/></condition><then pos:line="206" pos:column="50">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="207" pos:column="17">out_of_memory<pos:position pos:line="207" pos:column="30"/></name><argument_list pos:line="207" pos:column="30">(<argument><expr><literal type="string" pos:line="207" pos:column="31">"rsync_module"<pos:position pos:line="207" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="207" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="207" pos:column="47"/></expr_stmt></block></then></if>
	<expr_stmt><expr><name><name pos:line="208" pos:column="9">argv<pos:position pos:line="208" pos:column="13"/></name><index pos:line="208" pos:column="13">[<expr><name pos:line="208" pos:column="14">argc<pos:position pos:line="208" pos:column="18"/></name><operator pos:line="208" pos:column="18">++<pos:position pos:line="208" pos:column="20"/></operator></expr>]<pos:position pos:line="208" pos:column="21"/></index></name> <operator pos:line="208" pos:column="22">=<pos:position pos:line="208" pos:column="23"/></operator> <literal type="string" pos:line="208" pos:column="24">"rsyncd"<pos:position pos:line="208" pos:column="32"/></literal></expr>;<pos:position pos:line="208" pos:column="33"/></expr_stmt>

	<while pos:line="210" pos:column="9">while <condition pos:line="210" pos:column="15">(<expr><literal type="number" pos:line="210" pos:column="16">1<pos:position pos:line="210" pos:column="17"/></literal></expr>)<pos:position pos:line="210" pos:column="18"/></condition> <block pos:line="210" pos:column="19">{
		<if pos:line="211" pos:column="17">if <condition pos:line="211" pos:column="20">(<expr><operator pos:line="211" pos:column="21">!<pos:position pos:line="211" pos:column="22"/></operator><call><name pos:line="211" pos:column="22">read_line<pos:position pos:line="211" pos:column="31"/></name><argument_list pos:line="211" pos:column="31">(<argument><expr><name pos:line="211" pos:column="32">f_in<pos:position pos:line="211" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="211" pos:column="38">line<pos:position pos:line="211" pos:column="42"/></name></expr></argument>, <argument><expr><sizeof pos:line="211" pos:column="44">sizeof <name pos:line="211" pos:column="51">line<pos:position pos:line="211" pos:column="55"/></name></sizeof> <operator pos:line="211" pos:column="56">-<pos:position pos:line="211" pos:column="57"/></operator> <literal type="number" pos:line="211" pos:column="58">1<pos:position pos:line="211" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="211" pos:column="60"/></argument_list></call></expr>)<pos:position pos:line="211" pos:column="61"/></condition><then pos:line="211" pos:column="61">
			<block type="pseudo"><return pos:line="212" pos:column="25">return <expr><operator pos:line="212" pos:column="32">-<pos:position pos:line="212" pos:column="33"/></operator><literal type="number" pos:line="212" pos:column="33">1<pos:position pos:line="212" pos:column="34"/></literal></expr>;<pos:position pos:line="212" pos:column="35"/></return></block></then></if>

		<if pos:line="214" pos:column="17">if <condition pos:line="214" pos:column="20">(<expr><operator pos:line="214" pos:column="21">!<pos:position pos:line="214" pos:column="22"/></operator><operator pos:line="214" pos:column="22">*<pos:position pos:line="214" pos:column="23"/></operator><name pos:line="214" pos:column="23">line<pos:position pos:line="214" pos:column="27"/></name></expr>)<pos:position pos:line="214" pos:column="28"/></condition><then pos:line="214" pos:column="28">
			<block type="pseudo"><break pos:line="215" pos:column="25">break;<pos:position pos:line="215" pos:column="31"/></break></block></then></if>

		<expr_stmt><expr><name pos:line="217" pos:column="17">p<pos:position pos:line="217" pos:column="18"/></name> <operator pos:line="217" pos:column="19">=<pos:position pos:line="217" pos:column="20"/></operator> <name pos:line="217" pos:column="21">line<pos:position pos:line="217" pos:column="25"/></name></expr>;<pos:position pos:line="217" pos:column="26"/></expr_stmt>

		<if pos:line="219" pos:column="17">if <condition pos:line="219" pos:column="20">(<expr><name pos:line="219" pos:column="21">argc<pos:position pos:line="219" pos:column="25"/></name> <operator pos:line="219" pos:column="26">==<pos:position pos:line="219" pos:column="28"/></operator> <name pos:line="219" pos:column="29">maxargs<pos:position pos:line="219" pos:column="36"/></name></expr>)<pos:position pos:line="219" pos:column="37"/></condition><then pos:line="219" pos:column="37"> <block pos:line="219" pos:column="38">{
			<expr_stmt><expr><name pos:line="220" pos:column="25">maxargs<pos:position pos:line="220" pos:column="32"/></name> <operator pos:line="220" pos:column="33">+=<pos:position pos:line="220" pos:column="35"/></operator> <name pos:line="220" pos:column="36">MAX_ARGS<pos:position pos:line="220" pos:column="44"/></name></expr>;<pos:position pos:line="220" pos:column="45"/></expr_stmt>
			<if pos:line="221" pos:column="25">if <condition pos:line="221" pos:column="28">(<expr><operator pos:line="221" pos:column="29">!<pos:position pos:line="221" pos:column="30"/></operator><operator pos:line="221" pos:column="30">(<pos:position pos:line="221" pos:column="31"/></operator><name pos:line="221" pos:column="31">argv<pos:position pos:line="221" pos:column="35"/></name> <operator pos:line="221" pos:column="36">=<pos:position pos:line="221" pos:column="37"/></operator> <call><name pos:line="221" pos:column="38">realloc_array<pos:position pos:line="221" pos:column="51"/></name><argument_list pos:line="221" pos:column="51">(<argument><expr><name pos:line="221" pos:column="52">argv<pos:position pos:line="221" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="221" pos:column="58">char<pos:position pos:line="221" pos:column="62"/></name> <operator pos:line="221" pos:column="63">*<pos:position pos:line="221" pos:column="64"/></operator></expr></argument>, <argument><expr><name pos:line="221" pos:column="66">maxargs<pos:position pos:line="221" pos:column="73"/></name></expr></argument>)<pos:position pos:line="221" pos:column="74"/></argument_list></call><operator pos:line="221" pos:column="74">)<pos:position pos:line="221" pos:column="75"/></operator></expr>)<pos:position pos:line="221" pos:column="76"/></condition><then pos:line="221" pos:column="76">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="222" pos:column="33">out_of_memory<pos:position pos:line="222" pos:column="46"/></name><argument_list pos:line="222" pos:column="46">(<argument><expr><literal type="string" pos:line="222" pos:column="47">"rsync_module"<pos:position pos:line="222" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="222" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="222" pos:column="63"/></expr_stmt></block></then></if>
		}<pos:position pos:line="223" pos:column="18"/></block></then></if>
		<if pos:line="224" pos:column="17">if <condition pos:line="224" pos:column="20">(<expr><operator pos:line="224" pos:column="21">!<pos:position pos:line="224" pos:column="22"/></operator><operator pos:line="224" pos:column="22">(<pos:position pos:line="224" pos:column="23"/></operator><name><name pos:line="224" pos:column="23">argv<pos:position pos:line="224" pos:column="27"/></name><index pos:line="224" pos:column="27">[<expr><name pos:line="224" pos:column="28">argc<pos:position pos:line="224" pos:column="32"/></name></expr>]<pos:position pos:line="224" pos:column="33"/></index></name> <operator pos:line="224" pos:column="34">=<pos:position pos:line="224" pos:column="35"/></operator> <call><name pos:line="224" pos:column="36">strdup<pos:position pos:line="224" pos:column="42"/></name><argument_list pos:line="224" pos:column="42">(<argument><expr><name pos:line="224" pos:column="43">p<pos:position pos:line="224" pos:column="44"/></name></expr></argument>)<pos:position pos:line="224" pos:column="45"/></argument_list></call><operator pos:line="224" pos:column="45">)<pos:position pos:line="224" pos:column="46"/></operator></expr>)<pos:position pos:line="224" pos:column="47"/></condition><then pos:line="224" pos:column="47">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="225" pos:column="25">out_of_memory<pos:position pos:line="225" pos:column="38"/></name><argument_list pos:line="225" pos:column="38">(<argument><expr><literal type="string" pos:line="225" pos:column="39">"rsync_module"<pos:position pos:line="225" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="225" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="225" pos:column="55"/></expr_stmt></block></then></if>

		<if pos:line="227" pos:column="17">if <condition pos:line="227" pos:column="20">(<expr><name pos:line="227" pos:column="21">start_glob<pos:position pos:line="227" pos:column="31"/></name></expr>)<pos:position pos:line="227" pos:column="32"/></condition><then pos:line="227" pos:column="32"> <block pos:line="227" pos:column="33">{
			<if pos:line="228" pos:column="25">if <condition pos:line="228" pos:column="28">(<expr><name pos:line="228" pos:column="29">start_glob<pos:position pos:line="228" pos:column="39"/></name> <operator pos:line="228" pos:column="40">==<pos:position pos:line="228" pos:column="42"/></operator> <literal type="number" pos:line="228" pos:column="43">1<pos:position pos:line="228" pos:column="44"/></literal></expr>)<pos:position pos:line="228" pos:column="45"/></condition><then pos:line="228" pos:column="45"> <block pos:line="228" pos:column="46">{
				<expr_stmt><expr><name pos:line="229" pos:column="33">request<pos:position pos:line="229" pos:column="40"/></name> <operator pos:line="229" pos:column="41">=<pos:position pos:line="229" pos:column="42"/></operator> <call><name pos:line="229" pos:column="43">strdup<pos:position pos:line="229" pos:column="49"/></name><argument_list pos:line="229" pos:column="49">(<argument><expr><name pos:line="229" pos:column="50">p<pos:position pos:line="229" pos:column="51"/></name></expr></argument>)<pos:position pos:line="229" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="229" pos:column="53"/></expr_stmt>
				<expr_stmt><expr><name pos:line="230" pos:column="33">start_glob<pos:position pos:line="230" pos:column="43"/></name><operator pos:line="230" pos:column="43">++<pos:position pos:line="230" pos:column="45"/></operator></expr>;<pos:position pos:line="230" pos:column="46"/></expr_stmt>
			}<pos:position pos:line="231" pos:column="26"/></block></then></if>
			<expr_stmt><expr><call><name pos:line="232" pos:column="25">glob_expand<pos:position pos:line="232" pos:column="36"/></name><argument_list pos:line="232" pos:column="36">(<argument><expr><name pos:line="232" pos:column="37">name<pos:position pos:line="232" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="232" pos:column="43">&amp;<pos:position pos:line="232" pos:column="48"/></operator><name pos:line="232" pos:column="44">argv<pos:position pos:line="232" pos:column="48"/></name></expr></argument>, <argument><expr><operator pos:line="232" pos:column="50">&amp;<pos:position pos:line="232" pos:column="55"/></operator><name pos:line="232" pos:column="51">argc<pos:position pos:line="232" pos:column="55"/></name></expr></argument>, <argument><expr><operator pos:line="232" pos:column="57">&amp;<pos:position pos:line="232" pos:column="62"/></operator><name pos:line="232" pos:column="58">maxargs<pos:position pos:line="232" pos:column="65"/></name></expr></argument>)<pos:position pos:line="232" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="232" pos:column="67"/></expr_stmt>
		}<pos:position pos:line="233" pos:column="18"/></block></then> <else pos:line="233" pos:column="19">else
			<block type="pseudo"><expr_stmt><expr><name pos:line="234" pos:column="25">argc<pos:position pos:line="234" pos:column="29"/></name><operator pos:line="234" pos:column="29">++<pos:position pos:line="234" pos:column="31"/></operator></expr>;<pos:position pos:line="234" pos:column="32"/></expr_stmt></block></else></if>

		<if pos:line="236" pos:column="17">if <condition pos:line="236" pos:column="20">(<expr><call><name pos:line="236" pos:column="21">strcmp<pos:position pos:line="236" pos:column="27"/></name><argument_list pos:line="236" pos:column="27">(<argument><expr><name pos:line="236" pos:column="28">line<pos:position pos:line="236" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="236" pos:column="34">"."<pos:position pos:line="236" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="236" pos:column="38"/></argument_list></call> <operator pos:line="236" pos:column="39">==<pos:position pos:line="236" pos:column="41"/></operator> <literal type="number" pos:line="236" pos:column="42">0<pos:position pos:line="236" pos:column="43"/></literal></expr>)<pos:position pos:line="236" pos:column="44"/></condition><then pos:line="236" pos:column="44">
			<block type="pseudo"><expr_stmt><expr><name pos:line="237" pos:column="25">start_glob<pos:position pos:line="237" pos:column="35"/></name> <operator pos:line="237" pos:column="36">=<pos:position pos:line="237" pos:column="37"/></operator> <literal type="number" pos:line="237" pos:column="38">1<pos:position pos:line="237" pos:column="39"/></literal></expr>;<pos:position pos:line="237" pos:column="40"/></expr_stmt></block></then></if>
	}<pos:position pos:line="238" pos:column="10"/></block></while>

	<expr_stmt><expr><name pos:line="240" pos:column="9">verbose<pos:position pos:line="240" pos:column="16"/></name> <operator pos:line="240" pos:column="17">=<pos:position pos:line="240" pos:column="18"/></operator> <literal type="number" pos:line="240" pos:column="19">0<pos:position pos:line="240" pos:column="20"/></literal></expr>;<pos:position pos:line="240" pos:column="21"/></expr_stmt> <comment type="block" pos:line="240" pos:column="22">/* future verbosity is controlled by client options */</comment>
	<expr_stmt><expr><name pos:line="241" pos:column="9">argp<pos:position pos:line="241" pos:column="13"/></name> <operator pos:line="241" pos:column="14">=<pos:position pos:line="241" pos:column="15"/></operator> <name pos:line="241" pos:column="16">argv<pos:position pos:line="241" pos:column="20"/></name></expr>;<pos:position pos:line="241" pos:column="21"/></expr_stmt>
	<expr_stmt><expr><name pos:line="242" pos:column="9">ret<pos:position pos:line="242" pos:column="12"/></name> <operator pos:line="242" pos:column="13">=<pos:position pos:line="242" pos:column="14"/></operator> <call><name pos:line="242" pos:column="15">parse_arguments<pos:position pos:line="242" pos:column="30"/></name><argument_list pos:line="242" pos:column="30">(<argument><expr><operator pos:line="242" pos:column="31">&amp;<pos:position pos:line="242" pos:column="36"/></operator><name pos:line="242" pos:column="32">argc<pos:position pos:line="242" pos:column="36"/></name></expr></argument>, <argument><expr><operator pos:line="242" pos:column="38">(<pos:position pos:line="242" pos:column="39"/></operator><specifier pos:line="242" pos:column="39">const<pos:position pos:line="242" pos:column="44"/></specifier> <name pos:line="242" pos:column="45">char<pos:position pos:line="242" pos:column="49"/></name> <operator pos:line="242" pos:column="50">*<pos:position pos:line="242" pos:column="51"/></operator><operator pos:line="242" pos:column="51">*<pos:position pos:line="242" pos:column="52"/></operator><operator pos:line="242" pos:column="52">*<pos:position pos:line="242" pos:column="53"/></operator><operator pos:line="242" pos:column="53">)<pos:position pos:line="242" pos:column="54"/></operator> <operator pos:line="242" pos:column="55">&amp;<pos:position pos:line="242" pos:column="60"/></operator><name pos:line="242" pos:column="56">argp<pos:position pos:line="242" pos:column="60"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="242" pos:column="62">0<pos:position pos:line="242" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="242" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="242" pos:column="65"/></expr_stmt>

	<if pos:line="244" pos:column="9">if <condition pos:line="244" pos:column="12">(<expr><name pos:line="244" pos:column="13">filesfrom_fd<pos:position pos:line="244" pos:column="25"/></name> <operator pos:line="244" pos:column="26">==<pos:position pos:line="244" pos:column="28"/></operator> <literal type="number" pos:line="244" pos:column="29">0<pos:position pos:line="244" pos:column="30"/></literal></expr>)<pos:position pos:line="244" pos:column="31"/></condition><then pos:line="244" pos:column="31">
		<block type="pseudo"><expr_stmt><expr><name pos:line="245" pos:column="17">filesfrom_fd<pos:position pos:line="245" pos:column="29"/></name> <operator pos:line="245" pos:column="30">=<pos:position pos:line="245" pos:column="31"/></operator> <name pos:line="245" pos:column="32">f_in<pos:position pos:line="245" pos:column="36"/></name></expr>;<pos:position pos:line="245" pos:column="37"/></expr_stmt></block></then></if>

	<if pos:line="247" pos:column="9">if <condition pos:line="247" pos:column="12">(<expr><name pos:line="247" pos:column="13">request<pos:position pos:line="247" pos:column="20"/></name></expr>)<pos:position pos:line="247" pos:column="21"/></condition><then pos:line="247" pos:column="21"> <block pos:line="247" pos:column="22">{
		<if pos:line="248" pos:column="17">if <condition pos:line="248" pos:column="20">(<expr><operator pos:line="248" pos:column="21">*<pos:position pos:line="248" pos:column="22"/></operator><name pos:line="248" pos:column="22">auth_user<pos:position pos:line="248" pos:column="31"/></name></expr>)<pos:position pos:line="248" pos:column="32"/></condition><then pos:line="248" pos:column="32"> <block pos:line="248" pos:column="33">{
			<expr_stmt><expr><call><name pos:line="249" pos:column="25">rprintf<pos:position pos:line="249" pos:column="32"/></name><argument_list pos:line="249" pos:column="32">(<argument><expr><name pos:line="249" pos:column="33">FLOG<pos:position pos:line="249" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="249" pos:column="39">"rsync %s %s from %s@%s (%s)\n"<pos:position pos:line="249" pos:column="70"/></literal></expr></argument>,
				<argument><expr><ternary><condition><expr><name pos:line="250" pos:column="33">am_sender<pos:position pos:line="250" pos:column="42"/></name></expr> ?<pos:position pos:line="250" pos:column="44"/></condition><then pos:line="250" pos:column="44"> <expr><literal type="string" pos:line="250" pos:column="45">"on"<pos:position pos:line="250" pos:column="49"/></literal></expr> <pos:position pos:line="250" pos:column="50"/></then><else pos:line="250" pos:column="50">: <expr><literal type="string" pos:line="250" pos:column="52">"to"<pos:position pos:line="250" pos:column="56"/></literal></expr></else></ternary></expr></argument>,
				<argument><expr><name pos:line="251" pos:column="33">request<pos:position pos:line="251" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="251" pos:column="42">auth_user<pos:position pos:line="251" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="251" pos:column="53">host<pos:position pos:line="251" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="251" pos:column="59">addr<pos:position pos:line="251" pos:column="63"/></name></expr></argument>)<pos:position pos:line="251" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="251" pos:column="65"/></expr_stmt>
		}<pos:position pos:line="252" pos:column="18"/></block></then> <else pos:line="252" pos:column="19">else <block pos:line="252" pos:column="24">{
			<expr_stmt><expr><call><name pos:line="253" pos:column="25">rprintf<pos:position pos:line="253" pos:column="32"/></name><argument_list pos:line="253" pos:column="32">(<argument><expr><name pos:line="253" pos:column="33">FLOG<pos:position pos:line="253" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="253" pos:column="39">"rsync %s %s from %s (%s)\n"<pos:position pos:line="253" pos:column="67"/></literal></expr></argument>,
				<argument><expr><ternary><condition><expr><name pos:line="254" pos:column="33">am_sender<pos:position pos:line="254" pos:column="42"/></name></expr> ?<pos:position pos:line="254" pos:column="44"/></condition><then pos:line="254" pos:column="44"> <expr><literal type="string" pos:line="254" pos:column="45">"on"<pos:position pos:line="254" pos:column="49"/></literal></expr> <pos:position pos:line="254" pos:column="50"/></then><else pos:line="254" pos:column="50">: <expr><literal type="string" pos:line="254" pos:column="52">"to"<pos:position pos:line="254" pos:column="56"/></literal></expr></else></ternary></expr></argument>,
				<argument><expr><name pos:line="255" pos:column="33">request<pos:position pos:line="255" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="255" pos:column="42">host<pos:position pos:line="255" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="255" pos:column="48">addr<pos:position pos:line="255" pos:column="52"/></name></expr></argument>)<pos:position pos:line="255" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="255" pos:column="54"/></expr_stmt>
		}<pos:position pos:line="256" pos:column="18"/></block></else></if>
		<expr_stmt><expr><call><name pos:line="257" pos:column="17">free<pos:position pos:line="257" pos:column="21"/></name><argument_list pos:line="257" pos:column="21">(<argument><expr><name pos:line="257" pos:column="22">request<pos:position pos:line="257" pos:column="29"/></name></expr></argument>)<pos:position pos:line="257" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="257" pos:column="31"/></expr_stmt>
	}<pos:position pos:line="258" pos:column="10"/></block></then></if>

<cpp:ifndef pos:line="260" pos:column="1">#<cpp:directive pos:line="260" pos:column="2">ifndef<pos:position pos:line="260" pos:column="8"/></cpp:directive> <name pos:line="260" pos:column="9">DEBUG<pos:position pos:line="260" pos:column="14"/></name></cpp:ifndef>
	<comment type="block" pos:line="261" pos:column="9">/* don't allow the logs to be flooded too fast */</comment>
	<if pos:line="262" pos:column="9">if <condition pos:line="262" pos:column="12">(<expr><name pos:line="262" pos:column="13">verbose<pos:position pos:line="262" pos:column="20"/></name> <operator pos:line="262" pos:column="21">&gt;<pos:position pos:line="262" pos:column="25"/></operator> <call><name pos:line="262" pos:column="23">lp_max_verbosity<pos:position pos:line="262" pos:column="39"/></name><argument_list pos:line="262" pos:column="39">(<argument><expr><name pos:line="262" pos:column="40">i<pos:position pos:line="262" pos:column="41"/></name></expr></argument>)<pos:position pos:line="262" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="262" pos:column="43"/></condition><then pos:line="262" pos:column="43">
		<block type="pseudo"><expr_stmt><expr><name pos:line="263" pos:column="17">verbose<pos:position pos:line="263" pos:column="24"/></name> <operator pos:line="263" pos:column="25">=<pos:position pos:line="263" pos:column="26"/></operator> <call><name pos:line="263" pos:column="27">lp_max_verbosity<pos:position pos:line="263" pos:column="43"/></name><argument_list pos:line="263" pos:column="43">(<argument><expr><name pos:line="263" pos:column="44">i<pos:position pos:line="263" pos:column="45"/></name></expr></argument>)<pos:position pos:line="263" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="263" pos:column="47"/></expr_stmt></block></then></if>
<cpp:endif pos:line="264" pos:column="1">#<cpp:directive pos:line="264" pos:column="2">endif<pos:position pos:line="264" pos:column="7"/></cpp:directive></cpp:endif>

	<if pos:line="266" pos:column="9">if <condition pos:line="266" pos:column="12">(<expr><name pos:line="266" pos:column="13">protocol_version<pos:position pos:line="266" pos:column="29"/></name> <operator pos:line="266" pos:column="30">&lt;<pos:position pos:line="266" pos:column="34"/></operator> <literal type="number" pos:line="266" pos:column="32">23<pos:position pos:line="266" pos:column="34"/></literal>
	    <operator pos:line="267" pos:column="13">&amp;&amp;<pos:position pos:line="267" pos:column="23"/></operator> <operator pos:line="267" pos:column="16">(<pos:position pos:line="267" pos:column="17"/></operator><name pos:line="267" pos:column="17">protocol_version<pos:position pos:line="267" pos:column="33"/></name> <operator pos:line="267" pos:column="34">==<pos:position pos:line="267" pos:column="36"/></operator> <literal type="number" pos:line="267" pos:column="37">22<pos:position pos:line="267" pos:column="39"/></literal> <operator pos:line="267" pos:column="40">||<pos:position pos:line="267" pos:column="42"/></operator> <name pos:line="267" pos:column="43">am_sender<pos:position pos:line="267" pos:column="52"/></name><operator pos:line="267" pos:column="52">)<pos:position pos:line="267" pos:column="53"/></operator></expr>)<pos:position pos:line="267" pos:column="54"/></condition><then pos:line="267" pos:column="54">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="268" pos:column="17">io_start_multiplex_out<pos:position pos:line="268" pos:column="39"/></name><argument_list pos:line="268" pos:column="39">()<pos:position pos:line="268" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="268" pos:column="42"/></expr_stmt></block></then>
	<elseif pos:line="269" pos:column="9">else <if pos:line="269" pos:column="14">if <condition pos:line="269" pos:column="17">(<expr><operator pos:line="269" pos:column="18">!<pos:position pos:line="269" pos:column="19"/></operator><name pos:line="269" pos:column="19">ret<pos:position pos:line="269" pos:column="22"/></name></expr>)<pos:position pos:line="269" pos:column="23"/></condition><then pos:line="269" pos:column="23"> <block pos:line="269" pos:column="24">{
		<comment type="block" pos:line="270" pos:column="17">/* We have to get I/O multiplexing started so that we can
		 * get the error back to the client.  This means getting
		 * the protocol setup finished first in later versions. */</comment>
		<expr_stmt><expr><call><name pos:line="273" pos:column="17">setup_protocol<pos:position pos:line="273" pos:column="31"/></name><argument_list pos:line="273" pos:column="31">(<argument><expr><name pos:line="273" pos:column="32">f_out<pos:position pos:line="273" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="273" pos:column="39">f_in<pos:position pos:line="273" pos:column="43"/></name></expr></argument>)<pos:position pos:line="273" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="273" pos:column="45"/></expr_stmt>
		<if pos:line="274" pos:column="17">if <condition pos:line="274" pos:column="20">(<expr><operator pos:line="274" pos:column="21">!<pos:position pos:line="274" pos:column="22"/></operator><name pos:line="274" pos:column="22">am_sender<pos:position pos:line="274" pos:column="31"/></name></expr>)<pos:position pos:line="274" pos:column="32"/></condition><then pos:line="274" pos:column="32"> <block pos:line="274" pos:column="33">{
			<comment type="block" pos:line="275" pos:column="25">/* Since we failed in our option parsing, we may not
			 * have finished parsing that the client sent us a
			 * --files-from option, so look for it manually.
			 * Without this, the socket would be in the wrong
			 * state for the upcoming error message. */</comment>
			<if pos:line="280" pos:column="25">if <condition pos:line="280" pos:column="28">(<expr><operator pos:line="280" pos:column="29">!<pos:position pos:line="280" pos:column="30"/></operator><name pos:line="280" pos:column="30">files_from<pos:position pos:line="280" pos:column="40"/></name></expr>)<pos:position pos:line="280" pos:column="41"/></condition><then pos:line="280" pos:column="41"> <block pos:line="280" pos:column="42">{
				<decl_stmt><decl><type><name pos:line="281" pos:column="33">int<pos:position pos:line="281" pos:column="36"/></name></type> <name pos:line="281" pos:column="37">i<pos:position pos:line="281" pos:column="38"/></name></decl>;<pos:position pos:line="281" pos:column="39"/></decl_stmt>
				<for pos:line="282" pos:column="33">for <control pos:line="282" pos:column="37">(<init><expr><name pos:line="282" pos:column="38">i<pos:position pos:line="282" pos:column="39"/></name> <operator pos:line="282" pos:column="40">=<pos:position pos:line="282" pos:column="41"/></operator> <literal type="number" pos:line="282" pos:column="42">0<pos:position pos:line="282" pos:column="43"/></literal></expr>;<pos:position pos:line="282" pos:column="44"/></init> <condition><expr><name pos:line="282" pos:column="45">i<pos:position pos:line="282" pos:column="46"/></name> <operator pos:line="282" pos:column="47">&lt;<pos:position pos:line="282" pos:column="51"/></operator> <name pos:line="282" pos:column="49">argc<pos:position pos:line="282" pos:column="53"/></name></expr>;<pos:position pos:line="282" pos:column="54"/></condition> <incr><expr><name pos:line="282" pos:column="55">i<pos:position pos:line="282" pos:column="56"/></name><operator pos:line="282" pos:column="56">++<pos:position pos:line="282" pos:column="58"/></operator></expr></incr>)<pos:position pos:line="282" pos:column="59"/></control> <block pos:line="282" pos:column="60">{
					<if pos:line="283" pos:column="41">if <condition pos:line="283" pos:column="44">(<expr><call><name pos:line="283" pos:column="45">strncmp<pos:position pos:line="283" pos:column="52"/></name><argument_list pos:line="283" pos:column="52">(<argument><expr><name><name pos:line="283" pos:column="53">argv<pos:position pos:line="283" pos:column="57"/></name><index pos:line="283" pos:column="57">[<expr><name pos:line="283" pos:column="58">i<pos:position pos:line="283" pos:column="59"/></name></expr>]<pos:position pos:line="283" pos:column="60"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="283" pos:column="62">"--files-from"<pos:position pos:line="283" pos:column="76"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="283" pos:column="78">12<pos:position pos:line="283" pos:column="80"/></literal></expr></argument>)<pos:position pos:line="283" pos:column="81"/></argument_list></call> <operator pos:line="283" pos:column="82">==<pos:position pos:line="283" pos:column="84"/></operator> <literal type="number" pos:line="283" pos:column="85">0<pos:position pos:line="283" pos:column="86"/></literal></expr>)<pos:position pos:line="283" pos:column="87"/></condition><then pos:line="283" pos:column="87"> <block pos:line="283" pos:column="88">{
						<expr_stmt><expr><name pos:line="284" pos:column="49">files_from<pos:position pos:line="284" pos:column="59"/></name> <operator pos:line="284" pos:column="60">=<pos:position pos:line="284" pos:column="61"/></operator> <literal type="string" pos:line="284" pos:column="62">""<pos:position pos:line="284" pos:column="64"/></literal></expr>;<pos:position pos:line="284" pos:column="65"/></expr_stmt>
						<break pos:line="285" pos:column="49">break;<pos:position pos:line="285" pos:column="55"/></break>
					}<pos:position pos:line="286" pos:column="42"/></block></then></if>
				}<pos:position pos:line="287" pos:column="34"/></block></for>
			}<pos:position pos:line="288" pos:column="26"/></block></then></if>
			<if pos:line="289" pos:column="25">if <condition pos:line="289" pos:column="28">(<expr><name pos:line="289" pos:column="29">files_from<pos:position pos:line="289" pos:column="39"/></name></expr>)<pos:position pos:line="289" pos:column="40"/></condition><then pos:line="289" pos:column="40">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="290" pos:column="33">write_byte<pos:position pos:line="290" pos:column="43"/></name><argument_list pos:line="290" pos:column="43">(<argument><expr><name pos:line="290" pos:column="44">f_out<pos:position pos:line="290" pos:column="49"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="290" pos:column="51">0<pos:position pos:line="290" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="290" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="290" pos:column="54"/></expr_stmt></block></then></if>
		}<pos:position pos:line="291" pos:column="18"/></block></then></if>
		<expr_stmt><expr><call><name pos:line="292" pos:column="17">io_start_multiplex_out<pos:position pos:line="292" pos:column="39"/></name><argument_list pos:line="292" pos:column="39">()<pos:position pos:line="292" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="292" pos:column="42"/></expr_stmt>
	}<pos:position pos:line="293" pos:column="10"/></block></then></if></elseif></if>

	<if pos:line="295" pos:column="9">if <condition pos:line="295" pos:column="12">(<expr><operator pos:line="295" pos:column="13">!<pos:position pos:line="295" pos:column="14"/></operator><name pos:line="295" pos:column="14">ret<pos:position pos:line="295" pos:column="17"/></name></expr>)<pos:position pos:line="295" pos:column="18"/></condition><then pos:line="295" pos:column="18"> <block pos:line="295" pos:column="19">{
		<expr_stmt><expr><call><name pos:line="296" pos:column="17">option_error<pos:position pos:line="296" pos:column="29"/></name><argument_list pos:line="296" pos:column="29">()<pos:position pos:line="296" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="296" pos:column="32"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="297" pos:column="17">msleep<pos:position pos:line="297" pos:column="23"/></name><argument_list pos:line="297" pos:column="23">(<argument><expr><literal type="number" pos:line="297" pos:column="24">400<pos:position pos:line="297" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="297" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="297" pos:column="29"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="298" pos:column="17">exit_cleanup<pos:position pos:line="298" pos:column="29"/></name><argument_list pos:line="298" pos:column="29">(<argument><expr><name pos:line="298" pos:column="30">RERR_UNSUPPORTED<pos:position pos:line="298" pos:column="46"/></name></expr></argument>)<pos:position pos:line="298" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="298" pos:column="48"/></expr_stmt>
	}<pos:position pos:line="299" pos:column="10"/></block></then></if>

	<if pos:line="301" pos:column="9">if <condition pos:line="301" pos:column="12">(<expr><call><name pos:line="301" pos:column="13">lp_timeout<pos:position pos:line="301" pos:column="23"/></name><argument_list pos:line="301" pos:column="23">(<argument><expr><name pos:line="301" pos:column="24">i<pos:position pos:line="301" pos:column="25"/></name></expr></argument>)<pos:position pos:line="301" pos:column="26"/></argument_list></call> <operator pos:line="301" pos:column="27">&amp;&amp;<pos:position pos:line="301" pos:column="37"/></operator> <call><name pos:line="301" pos:column="30">lp_timeout<pos:position pos:line="301" pos:column="40"/></name><argument_list pos:line="301" pos:column="40">(<argument><expr><name pos:line="301" pos:column="41">i<pos:position pos:line="301" pos:column="42"/></name></expr></argument>)<pos:position pos:line="301" pos:column="43"/></argument_list></call> <operator pos:line="301" pos:column="44">&gt;<pos:position pos:line="301" pos:column="48"/></operator> <name pos:line="301" pos:column="46">io_timeout<pos:position pos:line="301" pos:column="56"/></name></expr>)<pos:position pos:line="301" pos:column="57"/></condition><then pos:line="301" pos:column="57">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="302" pos:column="17">set_io_timeout<pos:position pos:line="302" pos:column="31"/></name><argument_list pos:line="302" pos:column="31">(<argument><expr><call><name pos:line="302" pos:column="32">lp_timeout<pos:position pos:line="302" pos:column="42"/></name><argument_list pos:line="302" pos:column="42">(<argument><expr><name pos:line="302" pos:column="43">i<pos:position pos:line="302" pos:column="44"/></name></expr></argument>)<pos:position pos:line="302" pos:column="45"/></argument_list></call></expr></argument>)<pos:position pos:line="302" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="302" pos:column="47"/></expr_stmt></block></then></if>

	<expr_stmt><expr><call><name pos:line="304" pos:column="9">start_server<pos:position pos:line="304" pos:column="21"/></name><argument_list pos:line="304" pos:column="21">(<argument><expr><name pos:line="304" pos:column="22">f_in<pos:position pos:line="304" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="304" pos:column="28">f_out<pos:position pos:line="304" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="304" pos:column="35">argc<pos:position pos:line="304" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="304" pos:column="41">argp<pos:position pos:line="304" pos:column="45"/></name></expr></argument>)<pos:position pos:line="304" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="304" pos:column="47"/></expr_stmt>

	<return pos:line="306" pos:column="9">return <expr><literal type="number" pos:line="306" pos:column="16">0<pos:position pos:line="306" pos:column="17"/></literal></expr>;<pos:position pos:line="306" pos:column="18"/></return>
}<pos:position pos:line="307" pos:column="2"/></block></function></unit>
