<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_179_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">write_longint<pos:position pos:line="1" pos:column="19"/></name><parameter_list pos:line="1" pos:column="19">(<parameter><decl><type><name pos:line="1" pos:column="20">int<pos:position pos:line="1" pos:column="23"/></name></type> <name pos:line="1" pos:column="24">f<pos:position pos:line="1" pos:column="25"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="27">int64<pos:position pos:line="1" pos:column="32"/></name></type> <name pos:line="1" pos:column="33">x<pos:position pos:line="1" pos:column="34"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="35"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">char<pos:position pos:line="3" pos:column="13"/></name></type> <name><name pos:line="3" pos:column="14">b<pos:position pos:line="3" pos:column="15"/></name><index pos:line="3" pos:column="15">[<expr><literal type="number" pos:line="3" pos:column="16">12<pos:position pos:line="3" pos:column="18"/></literal></expr>]<pos:position pos:line="3" pos:column="19"/></index></name></decl>, <modifier pos:line="3" pos:column="21">*<pos:position pos:line="3" pos:column="22"/></modifier> const <decl><type ref="prev"/><name pos:line="3" pos:column="29">s<pos:position pos:line="3" pos:column="30"/></name> <init pos:line="3" pos:column="31">= <expr><name pos:line="3" pos:column="33">b<pos:position pos:line="3" pos:column="34"/></name><operator pos:line="3" pos:column="34">+<pos:position pos:line="3" pos:column="35"/></operator><literal type="number" pos:line="3" pos:column="35">4<pos:position pos:line="3" pos:column="36"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="37"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="5" pos:column="9">SIVAL<pos:position pos:line="5" pos:column="14"/></name><argument_list pos:line="5" pos:column="14">(<argument><expr><name pos:line="5" pos:column="15">s<pos:position pos:line="5" pos:column="16"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="5" pos:column="18">0<pos:position pos:line="5" pos:column="19"/></literal></expr></argument>, <argument><expr><name pos:line="5" pos:column="21">x<pos:position pos:line="5" pos:column="22"/></name></expr></argument>)<pos:position pos:line="5" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="24"/></expr_stmt>
	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><name pos:line="6" pos:column="13">x<pos:position pos:line="6" pos:column="14"/></name> <operator pos:line="6" pos:column="15">&lt;=<pos:position pos:line="6" pos:column="20"/></operator> <literal type="number" pos:line="6" pos:column="18">0x7FFFFFFF<pos:position pos:line="6" pos:column="28"/></literal> <operator pos:line="6" pos:column="29">&amp;&amp;<pos:position pos:line="6" pos:column="39"/></operator> <name pos:line="6" pos:column="32">x<pos:position pos:line="6" pos:column="33"/></name> <operator pos:line="6" pos:column="34">&gt;=<pos:position pos:line="6" pos:column="39"/></operator> <literal type="number" pos:line="6" pos:column="37">0<pos:position pos:line="6" pos:column="38"/></literal></expr>)<pos:position pos:line="6" pos:column="39"/></condition><then pos:line="6" pos:column="39"> <block pos:line="6" pos:column="40">{
		<expr_stmt><expr><call><name pos:line="7" pos:column="17">write_buf<pos:position pos:line="7" pos:column="26"/></name><argument_list pos:line="7" pos:column="26">(<argument><expr><name pos:line="7" pos:column="27">f<pos:position pos:line="7" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="30">s<pos:position pos:line="7" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="7" pos:column="33">4<pos:position pos:line="7" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="36"/></expr_stmt>
		<return pos:line="8" pos:column="17">return;<pos:position pos:line="8" pos:column="24"/></return>
	}<pos:position pos:line="9" pos:column="10"/></block></then></if>

<cpp:if pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">if<pos:position pos:line="11" pos:column="4"/></cpp:directive> <expr><name pos:line="11" pos:column="5">SIZEOF_INT64<pos:position pos:line="11" pos:column="17"/></name> <operator pos:line="11" pos:column="18">&lt;<pos:position pos:line="11" pos:column="22"/></operator> <literal type="number" pos:line="11" pos:column="20">8<pos:position pos:line="11" pos:column="21"/></literal></expr></cpp:if>
	<expr_stmt><expr><call><name pos:line="12" pos:column="9">rprintf<pos:position pos:line="12" pos:column="16"/></name><argument_list pos:line="12" pos:column="16">(<argument><expr><name pos:line="12" pos:column="17">FERROR<pos:position pos:line="12" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="12" pos:column="25">"Integer overflow: attempted 64-bit offset\n"<pos:position pos:line="12" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="72"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="13" pos:column="9">exit_cleanup<pos:position pos:line="13" pos:column="21"/></name><argument_list pos:line="13" pos:column="21">(<argument><expr><name pos:line="13" pos:column="22">RERR_UNSUPPORTED<pos:position pos:line="13" pos:column="38"/></name></expr></argument>)<pos:position pos:line="13" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="40"/></expr_stmt>
<cpp:else pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">else<pos:position pos:line="14" pos:column="6"/></cpp:directive></cpp:else>
	<expr_stmt><expr><call><name pos:line="15" pos:column="9">memset<pos:position pos:line="15" pos:column="15"/></name><argument_list pos:line="15" pos:column="15">(<argument><expr><name pos:line="15" pos:column="16">b<pos:position pos:line="15" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="15" pos:column="19">0xFF<pos:position pos:line="15" pos:column="23"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="15" pos:column="25">4<pos:position pos:line="15" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="28"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="16" pos:column="9">SIVAL<pos:position pos:line="16" pos:column="14"/></name><argument_list pos:line="16" pos:column="14">(<argument><expr><name pos:line="16" pos:column="15">s<pos:position pos:line="16" pos:column="16"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="16" pos:column="18">4<pos:position pos:line="16" pos:column="19"/></literal></expr></argument>, <argument><expr><name pos:line="16" pos:column="21">x<pos:position pos:line="16" pos:column="22"/></name> <operator pos:line="16" pos:column="23">&gt;&gt;<pos:position pos:line="16" pos:column="28"/></operator> <literal type="number" pos:line="16" pos:column="26">32<pos:position pos:line="16" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="30"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="17" pos:column="9">write_buf<pos:position pos:line="17" pos:column="18"/></name><argument_list pos:line="17" pos:column="18">(<argument><expr><name pos:line="17" pos:column="19">f<pos:position pos:line="17" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="22">b<pos:position pos:line="17" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="17" pos:column="25">12<pos:position pos:line="17" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="29"/></expr_stmt>
<cpp:endif pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">endif<pos:position pos:line="18" pos:column="7"/></cpp:directive></cpp:endif>
}<pos:position pos:line="19" pos:column="2"/></block></function></unit>
