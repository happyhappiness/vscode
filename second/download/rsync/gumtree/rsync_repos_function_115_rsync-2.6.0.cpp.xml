<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_115_rsync-2.6.0.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">write_char_bufs<pos:position pos:line="1" pos:column="21"/></name><parameter_list pos:line="1" pos:column="21">(<parameter><decl><type><name pos:line="1" pos:column="22">char<pos:position pos:line="1" pos:column="26"/></name> <modifier pos:line="1" pos:column="27">*<pos:position pos:line="1" pos:column="28"/></modifier></type><name pos:line="1" pos:column="28">buf<pos:position pos:line="1" pos:column="31"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="32"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<comment type="block" pos:line="3" pos:column="9">/* Write the size of the string which will follow  */</comment>

	<decl_stmt><decl><type><name pos:line="5" pos:column="9">char<pos:position pos:line="5" pos:column="13"/></name></type> <name><name pos:line="5" pos:column="14">b<pos:position pos:line="5" pos:column="15"/></name><index pos:line="5" pos:column="15">[<expr><literal type="number" pos:line="5" pos:column="16">4<pos:position pos:line="5" pos:column="17"/></literal></expr>]<pos:position pos:line="5" pos:column="18"/></index></name></decl>;<pos:position pos:line="5" pos:column="19"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="7" pos:column="9">SIVAL<pos:position pos:line="7" pos:column="14"/></name><argument_list pos:line="7" pos:column="14">(<argument><expr><name pos:line="7" pos:column="15">b<pos:position pos:line="7" pos:column="16"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="7" pos:column="18">0<pos:position pos:line="7" pos:column="19"/></literal></expr></argument>, <argument><expr><ternary><condition><expr><name pos:line="7" pos:column="21">buf<pos:position pos:line="7" pos:column="24"/></name> <operator pos:line="7" pos:column="25">!=<pos:position pos:line="7" pos:column="27"/></operator> <name pos:line="7" pos:column="28">NULL<pos:position pos:line="7" pos:column="32"/></name></expr> ?<pos:position pos:line="7" pos:column="34"/></condition><then pos:line="7" pos:column="34"> <expr><call><name pos:line="7" pos:column="35">strlen<pos:position pos:line="7" pos:column="41"/></name><argument_list pos:line="7" pos:column="41">(<argument><expr><name pos:line="7" pos:column="42">buf<pos:position pos:line="7" pos:column="45"/></name></expr></argument>)<pos:position pos:line="7" pos:column="46"/></argument_list></call></expr> <pos:position pos:line="7" pos:column="47"/></then><else pos:line="7" pos:column="47">: <expr><literal type="number" pos:line="7" pos:column="49">0<pos:position pos:line="7" pos:column="50"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="7" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="52"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="9" pos:column="9">write_batch_flist_file<pos:position pos:line="9" pos:column="31"/></name><argument_list pos:line="9" pos:column="31">(<argument><expr><name pos:line="9" pos:column="32">b<pos:position pos:line="9" pos:column="33"/></name></expr></argument>, <argument><expr><sizeof pos:line="9" pos:column="35">sizeof<argument_list pos:line="9" pos:column="41">(<argument><expr><name pos:line="9" pos:column="42">int<pos:position pos:line="9" pos:column="45"/></name></expr></argument>)<pos:position pos:line="9" pos:column="46"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="9" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="48"/></expr_stmt>

	<comment type="block" pos:line="11" pos:column="9">/*  Write the string if there is one */</comment>

	<if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><name pos:line="13" pos:column="13">buf<pos:position pos:line="13" pos:column="16"/></name> <operator pos:line="13" pos:column="17">!=<pos:position pos:line="13" pos:column="19"/></operator> <name pos:line="13" pos:column="20">NULL<pos:position pos:line="13" pos:column="24"/></name></expr>)<pos:position pos:line="13" pos:column="25"/></condition><then pos:line="13" pos:column="25"> <block pos:line="13" pos:column="26">{
		<expr_stmt><expr><call><name pos:line="14" pos:column="17">write_batch_flist_file<pos:position pos:line="14" pos:column="39"/></name><argument_list pos:line="14" pos:column="39">(<argument><expr><name pos:line="14" pos:column="40">buf<pos:position pos:line="14" pos:column="43"/></name></expr></argument>, <argument><expr><call><name pos:line="14" pos:column="45">strlen<pos:position pos:line="14" pos:column="51"/></name><argument_list pos:line="14" pos:column="51">(<argument><expr><name pos:line="14" pos:column="52">buf<pos:position pos:line="14" pos:column="55"/></name></expr></argument>)<pos:position pos:line="14" pos:column="56"/></argument_list></call></expr></argument>)<pos:position pos:line="14" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="58"/></expr_stmt>
	}<pos:position pos:line="15" pos:column="10"/></block></then></if>
}<pos:position pos:line="16" pos:column="2"/></block></function></unit>
