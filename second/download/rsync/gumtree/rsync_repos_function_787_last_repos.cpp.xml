<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_787_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">SMB_ACL_T<pos:position pos:line="1" pos:column="10"/></name></type> <name pos:line="1" pos:column="11">sys_acl_init<pos:position pos:line="1" pos:column="23"/></name><parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><name pos:line="1" pos:column="24">int<pos:position pos:line="1" pos:column="27"/></name></type> <name pos:line="1" pos:column="28">count<pos:position pos:line="1" pos:column="33"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="34"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">SMB_ACL_T<pos:position pos:line="3" pos:column="18"/></name></type>	<name pos:line="3" pos:column="25">a<pos:position pos:line="3" pos:column="26"/></name></decl>;<pos:position pos:line="3" pos:column="27"/></decl_stmt>

	<if pos:line="5" pos:column="9">if <condition pos:line="5" pos:column="12">(<expr><name pos:line="5" pos:column="13">count<pos:position pos:line="5" pos:column="18"/></name> <operator pos:line="5" pos:column="19">&lt;<pos:position pos:line="5" pos:column="23"/></operator> <literal type="number" pos:line="5" pos:column="21">0<pos:position pos:line="5" pos:column="22"/></literal></expr>)<pos:position pos:line="5" pos:column="23"/></condition><then pos:line="5" pos:column="23"> <block pos:line="5" pos:column="24">{
		<expr_stmt><expr><name pos:line="6" pos:column="17">errno<pos:position pos:line="6" pos:column="22"/></name> <operator pos:line="6" pos:column="23">=<pos:position pos:line="6" pos:column="24"/></operator> <name pos:line="6" pos:column="25">EINVAL<pos:position pos:line="6" pos:column="31"/></name></expr>;<pos:position pos:line="6" pos:column="32"/></expr_stmt>
		<return pos:line="7" pos:column="17">return <expr><name pos:line="7" pos:column="24">NULL<pos:position pos:line="7" pos:column="28"/></name></expr>;<pos:position pos:line="7" pos:column="29"/></return>
	}<pos:position pos:line="8" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="10" pos:column="9">/*
	 * note that since the definition of the structure pointed
	 * to by the SMB_ACL_T includes the first element of the
	 * acl[] array, this actually allocates an ACL with room
	 * for (count+1) entries
	 */</comment>
	<if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><operator pos:line="16" pos:column="13">(<pos:position pos:line="16" pos:column="14"/></operator><name pos:line="16" pos:column="14">a<pos:position pos:line="16" pos:column="15"/></name> <operator pos:line="16" pos:column="16">=<pos:position pos:line="16" pos:column="17"/></operator> <operator pos:line="16" pos:column="18">(<pos:position pos:line="16" pos:column="19"/></operator><name pos:line="16" pos:column="19">SMB_ACL_T<pos:position pos:line="16" pos:column="28"/></name><operator pos:line="16" pos:column="28">)<pos:position pos:line="16" pos:column="29"/></operator><call><name pos:line="16" pos:column="29">SMB_MALLOC<pos:position pos:line="16" pos:column="39"/></name><argument_list pos:line="16" pos:column="39">(<argument><expr><sizeof pos:line="16" pos:column="40">sizeof <name><name pos:line="16" pos:column="47">a<pos:position pos:line="16" pos:column="48"/></name><index pos:line="16" pos:column="48">[<expr><literal type="number" pos:line="16" pos:column="49">0<pos:position pos:line="16" pos:column="50"/></literal></expr>]<pos:position pos:line="16" pos:column="51"/></index></name></sizeof> <operator pos:line="16" pos:column="52">+<pos:position pos:line="16" pos:column="53"/></operator> <name pos:line="16" pos:column="54">count<pos:position pos:line="16" pos:column="59"/></name> <operator pos:line="16" pos:column="60">*<pos:position pos:line="16" pos:column="61"/></operator> <sizeof pos:line="16" pos:column="62">sizeof<argument_list pos:line="16" pos:column="68">(<argument><expr pos:line="16" pos:column="69">struct <name pos:line="16" pos:column="76">acl<pos:position pos:line="16" pos:column="79"/></name></expr></argument>)<pos:position pos:line="16" pos:column="80"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="16" pos:column="81"/></argument_list></call><operator pos:line="16" pos:column="81">)<pos:position pos:line="16" pos:column="82"/></operator> <operator pos:line="16" pos:column="83">==<pos:position pos:line="16" pos:column="85"/></operator> <name pos:line="16" pos:column="86">NULL<pos:position pos:line="16" pos:column="90"/></name></expr>)<pos:position pos:line="16" pos:column="91"/></condition><then pos:line="16" pos:column="91"> <block pos:line="16" pos:column="92">{
		<expr_stmt><expr><name pos:line="17" pos:column="17">errno<pos:position pos:line="17" pos:column="22"/></name> <operator pos:line="17" pos:column="23">=<pos:position pos:line="17" pos:column="24"/></operator> <name pos:line="17" pos:column="25">ENOMEM<pos:position pos:line="17" pos:column="31"/></name></expr>;<pos:position pos:line="17" pos:column="32"/></expr_stmt>
		<return pos:line="18" pos:column="17">return <expr><name pos:line="18" pos:column="24">NULL<pos:position pos:line="18" pos:column="28"/></name></expr>;<pos:position pos:line="18" pos:column="29"/></return>
	}<pos:position pos:line="19" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name><name pos:line="21" pos:column="9">a<pos:position pos:line="21" pos:column="10"/></name><operator pos:line="21" pos:column="10">-&gt;<pos:position pos:line="21" pos:column="15"/></operator><name pos:line="21" pos:column="12">size<pos:position pos:line="21" pos:column="16"/></name></name> <operator pos:line="21" pos:column="17">=<pos:position pos:line="21" pos:column="18"/></operator> <name pos:line="21" pos:column="19">count<pos:position pos:line="21" pos:column="24"/></name> <operator pos:line="21" pos:column="25">+<pos:position pos:line="21" pos:column="26"/></operator> <literal type="number" pos:line="21" pos:column="27">1<pos:position pos:line="21" pos:column="28"/></literal></expr>;<pos:position pos:line="21" pos:column="29"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="22" pos:column="9">a<pos:position pos:line="22" pos:column="10"/></name><operator pos:line="22" pos:column="10">-&gt;<pos:position pos:line="22" pos:column="15"/></operator><name pos:line="22" pos:column="12">count<pos:position pos:line="22" pos:column="17"/></name></name> <operator pos:line="22" pos:column="18">=<pos:position pos:line="22" pos:column="19"/></operator> <literal type="number" pos:line="22" pos:column="20">0<pos:position pos:line="22" pos:column="21"/></literal></expr>;<pos:position pos:line="22" pos:column="22"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="23" pos:column="9">a<pos:position pos:line="23" pos:column="10"/></name><operator pos:line="23" pos:column="10">-&gt;<pos:position pos:line="23" pos:column="15"/></operator><name pos:line="23" pos:column="12">next<pos:position pos:line="23" pos:column="16"/></name></name> <operator pos:line="23" pos:column="17">=<pos:position pos:line="23" pos:column="18"/></operator> <operator pos:line="23" pos:column="19">-<pos:position pos:line="23" pos:column="20"/></operator><literal type="number" pos:line="23" pos:column="20">1<pos:position pos:line="23" pos:column="21"/></literal></expr>;<pos:position pos:line="23" pos:column="22"/></expr_stmt>

	<return pos:line="25" pos:column="9">return <expr><name pos:line="25" pos:column="16">a<pos:position pos:line="25" pos:column="17"/></name></expr>;<pos:position pos:line="25" pos:column="18"/></return>
}<pos:position pos:line="26" pos:column="2"/></block></function></unit>
