<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_208_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">char<pos:position pos:line="1" pos:column="5"/></name> <modifier pos:line="1" pos:column="6">*<pos:position pos:line="1" pos:column="7"/></modifier></type><name pos:line="1" pos:column="7">client_name<pos:position pos:line="1" pos:column="18"/></name><parameter_list pos:line="1" pos:column="18">(<parameter><decl><type><name pos:line="1" pos:column="19">int<pos:position pos:line="1" pos:column="22"/></name></type> <name pos:line="1" pos:column="23">fd<pos:position pos:line="1" pos:column="25"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="26"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><specifier pos:line="3" pos:column="9">static<pos:position pos:line="3" pos:column="15"/></specifier> <type><name pos:line="3" pos:column="16">char<pos:position pos:line="3" pos:column="20"/></name></type> <name><name pos:line="3" pos:column="21">name_buf<pos:position pos:line="3" pos:column="29"/></name><index pos:line="3" pos:column="29">[<expr><literal type="number" pos:line="3" pos:column="30">100<pos:position pos:line="3" pos:column="33"/></literal></expr>]<pos:position pos:line="3" pos:column="34"/></index></name></decl>;<pos:position pos:line="3" pos:column="35"/></decl_stmt>
	<decl_stmt><decl><specifier pos:line="4" pos:column="9">static<pos:position pos:line="4" pos:column="15"/></specifier> <type><name pos:line="4" pos:column="16">char<pos:position pos:line="4" pos:column="20"/></name></type> <name><name pos:line="4" pos:column="21">port_buf<pos:position pos:line="4" pos:column="29"/></name><index pos:line="4" pos:column="29">[<expr><literal type="number" pos:line="4" pos:column="30">100<pos:position pos:line="4" pos:column="33"/></literal></expr>]<pos:position pos:line="4" pos:column="34"/></index></name></decl>;<pos:position pos:line="4" pos:column="35"/></decl_stmt>
	<decl_stmt><decl><specifier pos:line="5" pos:column="9">static<pos:position pos:line="5" pos:column="15"/></specifier> <type><name pos:line="5" pos:column="16">int<pos:position pos:line="5" pos:column="19"/></name></type> <name pos:line="5" pos:column="20">initialised<pos:position pos:line="5" pos:column="31"/></name></decl>;<pos:position pos:line="5" pos:column="32"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">sockaddr_storage<pos:position pos:line="6" pos:column="32"/></name></name></type> <name pos:line="6" pos:column="33">ss<pos:position pos:line="6" pos:column="35"/></name></decl>;<pos:position pos:line="6" pos:column="36"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">socklen_t<pos:position pos:line="7" pos:column="18"/></name></type> <name pos:line="7" pos:column="19">ss_len<pos:position pos:line="7" pos:column="25"/></name></decl>;<pos:position pos:line="7" pos:column="26"/></decl_stmt>

	<if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><name pos:line="9" pos:column="13">initialised<pos:position pos:line="9" pos:column="24"/></name></expr>)<pos:position pos:line="9" pos:column="25"/></condition><then pos:line="9" pos:column="25">
		<block type="pseudo"><return pos:line="10" pos:column="17">return <expr><name pos:line="10" pos:column="24">name_buf<pos:position pos:line="10" pos:column="32"/></name></expr>;<pos:position pos:line="10" pos:column="33"/></return></block></then></if>

	<expr_stmt><expr><call><name pos:line="12" pos:column="9">strlcpy<pos:position pos:line="12" pos:column="16"/></name><argument_list pos:line="12" pos:column="16">(<argument><expr><name pos:line="12" pos:column="17">name_buf<pos:position pos:line="12" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="27">default_name<pos:position pos:line="12" pos:column="39"/></name></expr></argument>, <argument><expr><sizeof pos:line="12" pos:column="41">sizeof <name pos:line="12" pos:column="48">name_buf<pos:position pos:line="12" pos:column="56"/></name></sizeof></expr></argument>)<pos:position pos:line="12" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="58"/></expr_stmt>
	<expr_stmt><expr><name pos:line="13" pos:column="9">initialised<pos:position pos:line="13" pos:column="20"/></name> <operator pos:line="13" pos:column="21">=<pos:position pos:line="13" pos:column="22"/></operator> <literal type="number" pos:line="13" pos:column="23">1<pos:position pos:line="13" pos:column="24"/></literal></expr>;<pos:position pos:line="13" pos:column="25"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="15" pos:column="9">memset<pos:position pos:line="15" pos:column="15"/></name><argument_list pos:line="15" pos:column="15">(<argument><expr><operator pos:line="15" pos:column="16">&amp;<pos:position pos:line="15" pos:column="21"/></operator><name pos:line="15" pos:column="17">ss<pos:position pos:line="15" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="15" pos:column="21">0<pos:position pos:line="15" pos:column="22"/></literal></expr></argument>, <argument><expr><sizeof pos:line="15" pos:column="24">sizeof <name pos:line="15" pos:column="31">ss<pos:position pos:line="15" pos:column="33"/></name></sizeof></expr></argument>)<pos:position pos:line="15" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="35"/></expr_stmt>

	<if pos:line="17" pos:column="9">if <condition pos:line="17" pos:column="12">(<expr><name pos:line="17" pos:column="13">am_server<pos:position pos:line="17" pos:column="22"/></name></expr>)<pos:position pos:line="17" pos:column="23"/></condition><then pos:line="17" pos:column="23"> <block pos:line="17" pos:column="24">{	<comment type="block" pos:line="17" pos:column="33">/* daemon over --rsh mode */</comment>
		<decl_stmt><decl><type><name pos:line="18" pos:column="17">char<pos:position pos:line="18" pos:column="21"/></name> <modifier pos:line="18" pos:column="22">*<pos:position pos:line="18" pos:column="23"/></modifier></type><name pos:line="18" pos:column="23">addr<pos:position pos:line="18" pos:column="27"/></name> <init pos:line="18" pos:column="28">= <expr><call><name pos:line="18" pos:column="30">client_addr<pos:position pos:line="18" pos:column="41"/></name><argument_list pos:line="18" pos:column="41">(<argument><expr><name pos:line="18" pos:column="42">fd<pos:position pos:line="18" pos:column="44"/></name></expr></argument>)<pos:position pos:line="18" pos:column="45"/></argument_list></call></expr></init></decl>;<pos:position pos:line="18" pos:column="46"/></decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="19" pos:column="17">struct<pos:position pos:line="19" pos:column="23"/></name> <name pos:line="19" pos:column="24">addrinfo<pos:position pos:line="19" pos:column="32"/></name></name></type> <name pos:line="19" pos:column="33">hint<pos:position pos:line="19" pos:column="37"/></name></decl>, <modifier pos:line="19" pos:column="39">*<pos:position pos:line="19" pos:column="40"/></modifier><decl><type ref="prev"/><name pos:line="19" pos:column="40">answer<pos:position pos:line="19" pos:column="46"/></name></decl>;<pos:position pos:line="19" pos:column="47"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="20" pos:column="17">int<pos:position pos:line="20" pos:column="20"/></name></type> <name pos:line="20" pos:column="21">err<pos:position pos:line="20" pos:column="24"/></name></decl>;<pos:position pos:line="20" pos:column="25"/></decl_stmt>

		<if pos:line="22" pos:column="17">if <condition pos:line="22" pos:column="20">(<expr><call><name pos:line="22" pos:column="21">strcmp<pos:position pos:line="22" pos:column="27"/></name><argument_list pos:line="22" pos:column="27">(<argument><expr><name pos:line="22" pos:column="28">addr<pos:position pos:line="22" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="22" pos:column="34">"0.0.0.0"<pos:position pos:line="22" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="44"/></argument_list></call> <operator pos:line="22" pos:column="45">==<pos:position pos:line="22" pos:column="47"/></operator> <literal type="number" pos:line="22" pos:column="48">0<pos:position pos:line="22" pos:column="49"/></literal></expr>)<pos:position pos:line="22" pos:column="50"/></condition><then pos:line="22" pos:column="50">
			<block type="pseudo"><return pos:line="23" pos:column="25">return <expr><name pos:line="23" pos:column="32">name_buf<pos:position pos:line="23" pos:column="40"/></name></expr>;<pos:position pos:line="23" pos:column="41"/></return></block></then></if>

		<expr_stmt><expr><call><name pos:line="25" pos:column="17">memset<pos:position pos:line="25" pos:column="23"/></name><argument_list pos:line="25" pos:column="23">(<argument><expr><operator pos:line="25" pos:column="24">&amp;<pos:position pos:line="25" pos:column="29"/></operator><name pos:line="25" pos:column="25">hint<pos:position pos:line="25" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="25" pos:column="31">0<pos:position pos:line="25" pos:column="32"/></literal></expr></argument>, <argument><expr><sizeof pos:line="25" pos:column="34">sizeof <name pos:line="25" pos:column="41">hint<pos:position pos:line="25" pos:column="45"/></name></sizeof></expr></argument>)<pos:position pos:line="25" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="47"/></expr_stmt>

<cpp:ifdef pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">ifdef<pos:position pos:line="27" pos:column="7"/></cpp:directive> <name pos:line="27" pos:column="8">AI_NUMERICHOST<pos:position pos:line="27" pos:column="22"/></name></cpp:ifdef>
		<expr_stmt><expr><name><name pos:line="28" pos:column="17">hint<pos:position pos:line="28" pos:column="21"/></name><operator pos:line="28" pos:column="21">.<pos:position pos:line="28" pos:column="22"/></operator><name pos:line="28" pos:column="22">ai_flags<pos:position pos:line="28" pos:column="30"/></name></name> <operator pos:line="28" pos:column="31">=<pos:position pos:line="28" pos:column="32"/></operator> <name pos:line="28" pos:column="33">AI_NUMERICHOST<pos:position pos:line="28" pos:column="47"/></name></expr>;<pos:position pos:line="28" pos:column="48"/></expr_stmt>
<cpp:endif pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">endif<pos:position pos:line="29" pos:column="7"/></cpp:directive></cpp:endif>
		<expr_stmt><expr><name><name pos:line="30" pos:column="17">hint<pos:position pos:line="30" pos:column="21"/></name><operator pos:line="30" pos:column="21">.<pos:position pos:line="30" pos:column="22"/></operator><name pos:line="30" pos:column="22">ai_socktype<pos:position pos:line="30" pos:column="33"/></name></name> <operator pos:line="30" pos:column="34">=<pos:position pos:line="30" pos:column="35"/></operator> <name pos:line="30" pos:column="36">SOCK_STREAM<pos:position pos:line="30" pos:column="47"/></name></expr>;<pos:position pos:line="30" pos:column="48"/></expr_stmt>

		<if pos:line="32" pos:column="17">if <condition pos:line="32" pos:column="20">(<expr><operator pos:line="32" pos:column="21">(<pos:position pos:line="32" pos:column="22"/></operator><name pos:line="32" pos:column="22">err<pos:position pos:line="32" pos:column="25"/></name> <operator pos:line="32" pos:column="26">=<pos:position pos:line="32" pos:column="27"/></operator> <call><name pos:line="32" pos:column="28">getaddrinfo<pos:position pos:line="32" pos:column="39"/></name><argument_list pos:line="32" pos:column="39">(<argument><expr><name pos:line="32" pos:column="40">addr<pos:position pos:line="32" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="46">NULL<pos:position pos:line="32" pos:column="50"/></name></expr></argument>, <argument><expr><operator pos:line="32" pos:column="52">&amp;<pos:position pos:line="32" pos:column="57"/></operator><name pos:line="32" pos:column="53">hint<pos:position pos:line="32" pos:column="57"/></name></expr></argument>, <argument><expr><operator pos:line="32" pos:column="59">&amp;<pos:position pos:line="32" pos:column="64"/></operator><name pos:line="32" pos:column="60">answer<pos:position pos:line="32" pos:column="66"/></name></expr></argument>)<pos:position pos:line="32" pos:column="67"/></argument_list></call><operator pos:line="32" pos:column="67">)<pos:position pos:line="32" pos:column="68"/></operator> <operator pos:line="32" pos:column="69">!=<pos:position pos:line="32" pos:column="71"/></operator> <literal type="number" pos:line="32" pos:column="72">0<pos:position pos:line="32" pos:column="73"/></literal></expr>)<pos:position pos:line="32" pos:column="74"/></condition><then pos:line="32" pos:column="74"> <block pos:line="32" pos:column="75">{
			<expr_stmt><expr><call><name pos:line="33" pos:column="25">rprintf<pos:position pos:line="33" pos:column="32"/></name><argument_list pos:line="33" pos:column="32">(<argument><expr><name pos:line="33" pos:column="33">FLOG<pos:position pos:line="33" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="33" pos:column="39">"malformed address %s: %s\n"<pos:position pos:line="33" pos:column="67"/></literal></expr></argument>,
			        <argument><expr><name pos:line="34" pos:column="33">addr<pos:position pos:line="34" pos:column="37"/></name></expr></argument>, <argument><expr><call><name pos:line="34" pos:column="39">gai_strerror<pos:position pos:line="34" pos:column="51"/></name><argument_list pos:line="34" pos:column="51">(<argument><expr><name pos:line="34" pos:column="52">err<pos:position pos:line="34" pos:column="55"/></name></expr></argument>)<pos:position pos:line="34" pos:column="56"/></argument_list></call></expr></argument>)<pos:position pos:line="34" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="58"/></expr_stmt>
			<return pos:line="35" pos:column="25">return <expr><name pos:line="35" pos:column="32">name_buf<pos:position pos:line="35" pos:column="40"/></name></expr>;<pos:position pos:line="35" pos:column="41"/></return>
		}<pos:position pos:line="36" pos:column="18"/></block></then></if>

		<switch pos:line="38" pos:column="17">switch <condition pos:line="38" pos:column="24">(<expr><name><name pos:line="38" pos:column="25">answer<pos:position pos:line="38" pos:column="31"/></name><operator pos:line="38" pos:column="31">-&gt;<pos:position pos:line="38" pos:column="36"/></operator><name pos:line="38" pos:column="33">ai_family<pos:position pos:line="38" pos:column="42"/></name></name></expr>)<pos:position pos:line="38" pos:column="43"/></condition> <block pos:line="38" pos:column="44">{
		<case pos:line="39" pos:column="17">case <expr><name pos:line="39" pos:column="22">AF_INET<pos:position pos:line="39" pos:column="29"/></name></expr>:<pos:position pos:line="39" pos:column="30"/></case>
			<expr_stmt><expr><name pos:line="40" pos:column="25">ss_len<pos:position pos:line="40" pos:column="31"/></name> <operator pos:line="40" pos:column="32">=<pos:position pos:line="40" pos:column="33"/></operator> <sizeof pos:line="40" pos:column="34">sizeof <argument_list pos:line="40" pos:column="41">(<argument><expr pos:line="40" pos:column="42">struct <name pos:line="40" pos:column="49">sockaddr_in<pos:position pos:line="40" pos:column="60"/></name></expr></argument>)<pos:position pos:line="40" pos:column="61"/></argument_list></sizeof></expr>;<pos:position pos:line="40" pos:column="62"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="41" pos:column="25">memcpy<pos:position pos:line="41" pos:column="31"/></name><argument_list pos:line="41" pos:column="31">(<argument><expr><operator pos:line="41" pos:column="32">&amp;<pos:position pos:line="41" pos:column="37"/></operator><name pos:line="41" pos:column="33">ss<pos:position pos:line="41" pos:column="35"/></name></expr></argument>, <argument><expr><name><name pos:line="41" pos:column="37">answer<pos:position pos:line="41" pos:column="43"/></name><operator pos:line="41" pos:column="43">-&gt;<pos:position pos:line="41" pos:column="48"/></operator><name pos:line="41" pos:column="45">ai_addr<pos:position pos:line="41" pos:column="52"/></name></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="54">ss_len<pos:position pos:line="41" pos:column="60"/></name></expr></argument>)<pos:position pos:line="41" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="62"/></expr_stmt>
			<break pos:line="42" pos:column="25">break;<pos:position pos:line="42" pos:column="31"/></break>
<cpp:ifdef pos:line="43" pos:column="1">#<cpp:directive pos:line="43" pos:column="2">ifdef<pos:position pos:line="43" pos:column="7"/></cpp:directive> <name pos:line="43" pos:column="8">INET6<pos:position pos:line="43" pos:column="13"/></name></cpp:ifdef>
		<case pos:line="44" pos:column="17">case <expr><name pos:line="44" pos:column="22">AF_INET6<pos:position pos:line="44" pos:column="30"/></name></expr>:<pos:position pos:line="44" pos:column="31"/></case>
			<expr_stmt><expr><name pos:line="45" pos:column="25">ss_len<pos:position pos:line="45" pos:column="31"/></name> <operator pos:line="45" pos:column="32">=<pos:position pos:line="45" pos:column="33"/></operator> <sizeof pos:line="45" pos:column="34">sizeof <argument_list pos:line="45" pos:column="41">(<argument><expr pos:line="45" pos:column="42">struct <name pos:line="45" pos:column="49">sockaddr_in6<pos:position pos:line="45" pos:column="61"/></name></expr></argument>)<pos:position pos:line="45" pos:column="62"/></argument_list></sizeof></expr>;<pos:position pos:line="45" pos:column="63"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="46" pos:column="25">memcpy<pos:position pos:line="46" pos:column="31"/></name><argument_list pos:line="46" pos:column="31">(<argument><expr><operator pos:line="46" pos:column="32">&amp;<pos:position pos:line="46" pos:column="37"/></operator><name pos:line="46" pos:column="33">ss<pos:position pos:line="46" pos:column="35"/></name></expr></argument>, <argument><expr><name><name pos:line="46" pos:column="37">answer<pos:position pos:line="46" pos:column="43"/></name><operator pos:line="46" pos:column="43">-&gt;<pos:position pos:line="46" pos:column="48"/></operator><name pos:line="46" pos:column="45">ai_addr<pos:position pos:line="46" pos:column="52"/></name></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="54">ss_len<pos:position pos:line="46" pos:column="60"/></name></expr></argument>)<pos:position pos:line="46" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="62"/></expr_stmt>
			<break pos:line="47" pos:column="25">break;<pos:position pos:line="47" pos:column="31"/></break>
<cpp:endif pos:line="48" pos:column="1">#<cpp:directive pos:line="48" pos:column="2">endif<pos:position pos:line="48" pos:column="7"/></cpp:directive></cpp:endif>
		<default pos:line="49" pos:column="17">default:<pos:position pos:line="49" pos:column="25"/></default>
			<expr_stmt><expr><call><name pos:line="50" pos:column="25">exit_cleanup<pos:position pos:line="50" pos:column="37"/></name><argument_list pos:line="50" pos:column="37">(<argument><expr><name pos:line="50" pos:column="38">RERR_SOCKETIO<pos:position pos:line="50" pos:column="51"/></name></expr></argument>)<pos:position pos:line="50" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="53"/></expr_stmt>
		}<pos:position pos:line="51" pos:column="18"/></block></switch>
		<expr_stmt><expr><call><name pos:line="52" pos:column="17">freeaddrinfo<pos:position pos:line="52" pos:column="29"/></name><argument_list pos:line="52" pos:column="29">(<argument><expr><name pos:line="52" pos:column="30">answer<pos:position pos:line="52" pos:column="36"/></name></expr></argument>)<pos:position pos:line="52" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="38"/></expr_stmt>
	}<pos:position pos:line="53" pos:column="10"/></block></then> <else pos:line="53" pos:column="11">else <block pos:line="53" pos:column="16">{
		<expr_stmt><expr><name pos:line="54" pos:column="17">ss_len<pos:position pos:line="54" pos:column="23"/></name> <operator pos:line="54" pos:column="24">=<pos:position pos:line="54" pos:column="25"/></operator> <sizeof pos:line="54" pos:column="26">sizeof <name pos:line="54" pos:column="33">ss<pos:position pos:line="54" pos:column="35"/></name></sizeof></expr>;<pos:position pos:line="54" pos:column="36"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="55" pos:column="17">client_sockaddr<pos:position pos:line="55" pos:column="32"/></name><argument_list pos:line="55" pos:column="32">(<argument><expr><name pos:line="55" pos:column="33">fd<pos:position pos:line="55" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="55" pos:column="37">&amp;<pos:position pos:line="55" pos:column="42"/></operator><name pos:line="55" pos:column="38">ss<pos:position pos:line="55" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="55" pos:column="42">&amp;<pos:position pos:line="55" pos:column="47"/></operator><name pos:line="55" pos:column="43">ss_len<pos:position pos:line="55" pos:column="49"/></name></expr></argument>)<pos:position pos:line="55" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="51"/></expr_stmt>
	}<pos:position pos:line="56" pos:column="10"/></block></else></if>

	<if pos:line="58" pos:column="9">if <condition pos:line="58" pos:column="12">(<expr><call><name pos:line="58" pos:column="13">lookup_name<pos:position pos:line="58" pos:column="24"/></name><argument_list pos:line="58" pos:column="24">(<argument><expr><name pos:line="58" pos:column="25">fd<pos:position pos:line="58" pos:column="27"/></name></expr></argument>, <argument><expr><operator pos:line="58" pos:column="29">&amp;<pos:position pos:line="58" pos:column="34"/></operator><name pos:line="58" pos:column="30">ss<pos:position pos:line="58" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="34">ss_len<pos:position pos:line="58" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="42">name_buf<pos:position pos:line="58" pos:column="50"/></name></expr></argument>, <argument><expr><sizeof pos:line="58" pos:column="52">sizeof <name pos:line="58" pos:column="59">name_buf<pos:position pos:line="58" pos:column="67"/></name></sizeof></expr></argument>,
			<argument><expr><name pos:line="59" pos:column="25">port_buf<pos:position pos:line="59" pos:column="33"/></name></expr></argument>, <argument><expr><sizeof pos:line="59" pos:column="35">sizeof <name pos:line="59" pos:column="42">port_buf<pos:position pos:line="59" pos:column="50"/></name></sizeof></expr></argument>)<pos:position pos:line="59" pos:column="51"/></argument_list></call> <operator pos:line="59" pos:column="52">==<pos:position pos:line="59" pos:column="54"/></operator> <literal type="number" pos:line="59" pos:column="55">0<pos:position pos:line="59" pos:column="56"/></literal></expr>)<pos:position pos:line="59" pos:column="57"/></condition><then pos:line="59" pos:column="57">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="60" pos:column="17">check_name<pos:position pos:line="60" pos:column="27"/></name><argument_list pos:line="60" pos:column="27">(<argument><expr><name pos:line="60" pos:column="28">fd<pos:position pos:line="60" pos:column="30"/></name></expr></argument>, <argument><expr><operator pos:line="60" pos:column="32">&amp;<pos:position pos:line="60" pos:column="37"/></operator><name pos:line="60" pos:column="33">ss<pos:position pos:line="60" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="60" pos:column="37">name_buf<pos:position pos:line="60" pos:column="45"/></name></expr></argument>, <argument><expr><sizeof pos:line="60" pos:column="47">sizeof <name pos:line="60" pos:column="54">name_buf<pos:position pos:line="60" pos:column="62"/></name></sizeof></expr></argument>)<pos:position pos:line="60" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="64"/></expr_stmt></block></then></if>

	<return pos:line="62" pos:column="9">return <expr><name pos:line="62" pos:column="16">name_buf<pos:position pos:line="62" pos:column="24"/></name></expr>;<pos:position pos:line="62" pos:column="25"/></return>
}<pos:position pos:line="63" pos:column="2"/></block></function></unit>
