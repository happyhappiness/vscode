<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_893_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">gethostnameinfo<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><specifier pos:line="1" pos:column="28">const<pos:position pos:line="1" pos:column="33"/></specifier> <name><name pos:line="1" pos:column="34">struct<pos:position pos:line="1" pos:column="40"/></name> <name pos:line="1" pos:column="41">sockaddr<pos:position pos:line="1" pos:column="49"/></name></name> <modifier pos:line="1" pos:column="50">*<pos:position pos:line="1" pos:column="51"/></modifier></type><name pos:line="1" pos:column="51">sa<pos:position pos:line="1" pos:column="53"/></name></decl></parameter>,
			<parameter><decl><type><name pos:line="2" pos:column="25">char<pos:position pos:line="2" pos:column="29"/></name> <modifier pos:line="2" pos:column="30">*<pos:position pos:line="2" pos:column="31"/></modifier></type><name pos:line="2" pos:column="31">node<pos:position pos:line="2" pos:column="35"/></name></decl></parameter>,
			<parameter><decl><type><name pos:line="3" pos:column="25">size_t<pos:position pos:line="3" pos:column="31"/></name></type> <name pos:line="3" pos:column="32">nodelen<pos:position pos:line="3" pos:column="39"/></name></decl></parameter>,
			<parameter><decl><type><name pos:line="4" pos:column="25">int<pos:position pos:line="4" pos:column="28"/></name></type> <name pos:line="4" pos:column="29">flags<pos:position pos:line="4" pos:column="34"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="35"/></parameter_list>
<block pos:line="5" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">ret<pos:position pos:line="6" pos:column="16"/></name> <init pos:line="6" pos:column="17">= <expr><operator pos:line="6" pos:column="19">-<pos:position pos:line="6" pos:column="20"/></operator><literal type="number" pos:line="6" pos:column="20">1<pos:position pos:line="6" pos:column="21"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="22"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">char<pos:position pos:line="7" pos:column="13"/></name> <modifier pos:line="7" pos:column="14">*<pos:position pos:line="7" pos:column="15"/></modifier></type><name pos:line="7" pos:column="15">p<pos:position pos:line="7" pos:column="16"/></name> <init pos:line="7" pos:column="17">= <expr><name pos:line="7" pos:column="19">NULL<pos:position pos:line="7" pos:column="23"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="24"/></decl_stmt>

	<if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><operator pos:line="9" pos:column="13">!<pos:position pos:line="9" pos:column="14"/></operator><operator pos:line="9" pos:column="14">(<pos:position pos:line="9" pos:column="15"/></operator><name pos:line="9" pos:column="15">flags<pos:position pos:line="9" pos:column="20"/></name> <operator pos:line="9" pos:column="21">&amp;<pos:position pos:line="9" pos:column="26"/></operator> <name pos:line="9" pos:column="23">NI_NUMERICHOST<pos:position pos:line="9" pos:column="37"/></name><operator pos:line="9" pos:column="37">)<pos:position pos:line="9" pos:column="38"/></operator></expr>)<pos:position pos:line="9" pos:column="39"/></condition><then pos:line="9" pos:column="39"> <block pos:line="9" pos:column="40">{
		<decl_stmt><decl><type><name><name pos:line="10" pos:column="17">struct<pos:position pos:line="10" pos:column="23"/></name> <name pos:line="10" pos:column="24">hostent<pos:position pos:line="10" pos:column="31"/></name></name> <modifier pos:line="10" pos:column="32">*<pos:position pos:line="10" pos:column="33"/></modifier></type><name pos:line="10" pos:column="33">hp<pos:position pos:line="10" pos:column="35"/></name> <init pos:line="10" pos:column="36">= <expr><call><name pos:line="10" pos:column="38">gethostbyaddr<pos:position pos:line="10" pos:column="51"/></name><argument_list pos:line="10" pos:column="51">(
				<argument><expr><operator pos:line="11" pos:column="33">(<pos:position pos:line="11" pos:column="34"/></operator><name pos:line="11" pos:column="34">void<pos:position pos:line="11" pos:column="38"/></name> <operator pos:line="11" pos:column="39">*<pos:position pos:line="11" pos:column="40"/></operator><operator pos:line="11" pos:column="40">)<pos:position pos:line="11" pos:column="41"/></operator><operator pos:line="11" pos:column="41">&amp;<pos:position pos:line="11" pos:column="46"/></operator><operator pos:line="11" pos:column="42">(<pos:position pos:line="11" pos:column="43"/></operator><operator pos:line="11" pos:column="43">(<pos:position pos:line="11" pos:column="44"/></operator>struct <name pos:line="11" pos:column="51">sockaddr_in<pos:position pos:line="11" pos:column="62"/></name> <operator pos:line="11" pos:column="63">*<pos:position pos:line="11" pos:column="64"/></operator><operator pos:line="11" pos:column="64">)<pos:position pos:line="11" pos:column="65"/></operator><name pos:line="11" pos:column="65">sa<pos:position pos:line="11" pos:column="67"/></name><operator pos:line="11" pos:column="67">)<pos:position pos:line="11" pos:column="68"/></operator><operator pos:line="11" pos:column="68">-&gt;<pos:position pos:line="11" pos:column="73"/></operator><name pos:line="11" pos:column="70">sin_addr<pos:position pos:line="11" pos:column="78"/></name></expr></argument>,
				<argument><expr><sizeof pos:line="12" pos:column="33">sizeof <argument_list pos:line="12" pos:column="40">(<argument><expr pos:line="12" pos:column="41">struct <name pos:line="12" pos:column="48">in_addr<pos:position pos:line="12" pos:column="55"/></name></expr></argument>)<pos:position pos:line="12" pos:column="56"/></argument_list></sizeof></expr></argument>,
				<argument><expr><name><name pos:line="13" pos:column="33">sa<pos:position pos:line="13" pos:column="35"/></name><operator pos:line="13" pos:column="35">-&gt;<pos:position pos:line="13" pos:column="40"/></operator><name pos:line="13" pos:column="37">sa_family<pos:position pos:line="13" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="13" pos:column="47"/></argument_list></call></expr></init></decl>;<pos:position pos:line="13" pos:column="48"/></decl_stmt>
		<expr_stmt><expr><name pos:line="14" pos:column="17">ret<pos:position pos:line="14" pos:column="20"/></name> <operator pos:line="14" pos:column="21">=<pos:position pos:line="14" pos:column="22"/></operator> <call><name pos:line="14" pos:column="23">check_hostent_err<pos:position pos:line="14" pos:column="40"/></name><argument_list pos:line="14" pos:column="40">(<argument><expr><name pos:line="14" pos:column="41">hp<pos:position pos:line="14" pos:column="43"/></name></expr></argument>)<pos:position pos:line="14" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="45"/></expr_stmt>
		<if pos:line="15" pos:column="17">if <condition pos:line="15" pos:column="20">(<expr><name pos:line="15" pos:column="21">ret<pos:position pos:line="15" pos:column="24"/></name> <operator pos:line="15" pos:column="25">==<pos:position pos:line="15" pos:column="27"/></operator> <literal type="number" pos:line="15" pos:column="28">0<pos:position pos:line="15" pos:column="29"/></literal></expr>)<pos:position pos:line="15" pos:column="30"/></condition><then pos:line="15" pos:column="30"> <block pos:line="15" pos:column="31">{
			<comment type="block" pos:line="16" pos:column="25">/* Name looked up successfully. */</comment>
			<expr_stmt><expr><name pos:line="17" pos:column="25">ret<pos:position pos:line="17" pos:column="28"/></name> <operator pos:line="17" pos:column="29">=<pos:position pos:line="17" pos:column="30"/></operator> <call><name pos:line="17" pos:column="31">snprintf<pos:position pos:line="17" pos:column="39"/></name><argument_list pos:line="17" pos:column="39">(<argument><expr><name pos:line="17" pos:column="40">node<pos:position pos:line="17" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="46">nodelen<pos:position pos:line="17" pos:column="53"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="55">"%s"<pos:position pos:line="17" pos:column="59"/></literal></expr></argument>, <argument><expr><name><name pos:line="17" pos:column="61">hp<pos:position pos:line="17" pos:column="63"/></name><operator pos:line="17" pos:column="63">-&gt;<pos:position pos:line="17" pos:column="68"/></operator><name pos:line="17" pos:column="65">h_name<pos:position pos:line="17" pos:column="71"/></name></name></expr></argument>)<pos:position pos:line="17" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="73"/></expr_stmt>
			<if pos:line="18" pos:column="25">if <condition pos:line="18" pos:column="28">(<expr><name pos:line="18" pos:column="29">ret<pos:position pos:line="18" pos:column="32"/></name> <operator pos:line="18" pos:column="33">&lt;<pos:position pos:line="18" pos:column="37"/></operator> <literal type="number" pos:line="18" pos:column="35">0<pos:position pos:line="18" pos:column="36"/></literal> <operator pos:line="18" pos:column="37">||<pos:position pos:line="18" pos:column="39"/></operator> <operator pos:line="18" pos:column="40">(<pos:position pos:line="18" pos:column="41"/></operator><name pos:line="18" pos:column="41">size_t<pos:position pos:line="18" pos:column="47"/></name><operator pos:line="18" pos:column="47">)<pos:position pos:line="18" pos:column="48"/></operator><name pos:line="18" pos:column="48">ret<pos:position pos:line="18" pos:column="51"/></name> <operator pos:line="18" pos:column="52">&gt;=<pos:position pos:line="18" pos:column="57"/></operator> <name pos:line="18" pos:column="55">nodelen<pos:position pos:line="18" pos:column="62"/></name></expr>)<pos:position pos:line="18" pos:column="63"/></condition><then pos:line="18" pos:column="63"> <block pos:line="18" pos:column="64">{
				<return pos:line="19" pos:column="33">return <expr><name pos:line="19" pos:column="40">EAI_MEMORY<pos:position pos:line="19" pos:column="50"/></name></expr>;<pos:position pos:line="19" pos:column="51"/></return>
			}<pos:position pos:line="20" pos:column="26"/></block></then></if>
			<if pos:line="21" pos:column="25">if <condition pos:line="21" pos:column="28">(<expr><name pos:line="21" pos:column="29">flags<pos:position pos:line="21" pos:column="34"/></name> <operator pos:line="21" pos:column="35">&amp;<pos:position pos:line="21" pos:column="40"/></operator> <name pos:line="21" pos:column="37">NI_NOFQDN<pos:position pos:line="21" pos:column="46"/></name></expr>)<pos:position pos:line="21" pos:column="47"/></condition><then pos:line="21" pos:column="47"> <block pos:line="21" pos:column="48">{
				<expr_stmt><expr><name pos:line="22" pos:column="33">p<pos:position pos:line="22" pos:column="34"/></name> <operator pos:line="22" pos:column="35">=<pos:position pos:line="22" pos:column="36"/></operator> <call><name pos:line="22" pos:column="37">strchr<pos:position pos:line="22" pos:column="43"/></name><argument_list pos:line="22" pos:column="43">(<argument><expr><name pos:line="22" pos:column="44">node<pos:position pos:line="22" pos:column="48"/></name></expr></argument>,<argument><expr><literal type="char" pos:line="22" pos:column="49">'.'<pos:position pos:line="22" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="54"/></expr_stmt>
				<if pos:line="23" pos:column="33">if <condition pos:line="23" pos:column="36">(<expr><name pos:line="23" pos:column="37">p<pos:position pos:line="23" pos:column="38"/></name></expr>)<pos:position pos:line="23" pos:column="39"/></condition><then pos:line="23" pos:column="39"> <block pos:line="23" pos:column="40">{
					<expr_stmt><expr><operator pos:line="24" pos:column="41">*<pos:position pos:line="24" pos:column="42"/></operator><name pos:line="24" pos:column="42">p<pos:position pos:line="24" pos:column="43"/></name> <operator pos:line="24" pos:column="44">=<pos:position pos:line="24" pos:column="45"/></operator> <literal type="char" pos:line="24" pos:column="46">'\0'<pos:position pos:line="24" pos:column="50"/></literal></expr>;<pos:position pos:line="24" pos:column="51"/></expr_stmt>
				}<pos:position pos:line="25" pos:column="34"/></block></then></if>
			}<pos:position pos:line="26" pos:column="26"/></block></then></if>
			<return pos:line="27" pos:column="25">return <expr><literal type="number" pos:line="27" pos:column="32">0<pos:position pos:line="27" pos:column="33"/></literal></expr>;<pos:position pos:line="27" pos:column="34"/></return>
		}<pos:position pos:line="28" pos:column="18"/></block></then></if>

		<if pos:line="30" pos:column="17">if <condition pos:line="30" pos:column="20">(<expr><name pos:line="30" pos:column="21">flags<pos:position pos:line="30" pos:column="26"/></name> <operator pos:line="30" pos:column="27">&amp;<pos:position pos:line="30" pos:column="32"/></operator> <name pos:line="30" pos:column="29">NI_NAMEREQD<pos:position pos:line="30" pos:column="40"/></name></expr>)<pos:position pos:line="30" pos:column="41"/></condition><then pos:line="30" pos:column="41"> <block pos:line="30" pos:column="42">{
			<comment type="block" pos:line="31" pos:column="25">/* If we require a name and didn't get one,
			 * automatically fail. */</comment>
			<return pos:line="33" pos:column="25">return <expr><name pos:line="33" pos:column="32">ret<pos:position pos:line="33" pos:column="35"/></name></expr>;<pos:position pos:line="33" pos:column="36"/></return>
		}<pos:position pos:line="34" pos:column="18"/></block></then></if>
		<comment type="block" pos:line="35" pos:column="17">/* Otherwise just fall into the numeric host code... */</comment>
	}<pos:position pos:line="36" pos:column="10"/></block></then></if>
	<expr_stmt><expr><name pos:line="37" pos:column="9">p<pos:position pos:line="37" pos:column="10"/></name> <operator pos:line="37" pos:column="11">=<pos:position pos:line="37" pos:column="12"/></operator> <call><name pos:line="37" pos:column="13">inet_ntoa<pos:position pos:line="37" pos:column="22"/></name><argument_list pos:line="37" pos:column="22">(<argument><expr><operator pos:line="37" pos:column="23">(<pos:position pos:line="37" pos:column="24"/></operator><operator pos:line="37" pos:column="24">(<pos:position pos:line="37" pos:column="25"/></operator>struct <name pos:line="37" pos:column="32">sockaddr_in<pos:position pos:line="37" pos:column="43"/></name> <operator pos:line="37" pos:column="44">*<pos:position pos:line="37" pos:column="45"/></operator><operator pos:line="37" pos:column="45">)<pos:position pos:line="37" pos:column="46"/></operator><name pos:line="37" pos:column="46">sa<pos:position pos:line="37" pos:column="48"/></name><operator pos:line="37" pos:column="48">)<pos:position pos:line="37" pos:column="49"/></operator><operator pos:line="37" pos:column="49">-&gt;<pos:position pos:line="37" pos:column="54"/></operator><name pos:line="37" pos:column="51">sin_addr<pos:position pos:line="37" pos:column="59"/></name></expr></argument>)<pos:position pos:line="37" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="61"/></expr_stmt>
	<expr_stmt><expr><name pos:line="38" pos:column="9">ret<pos:position pos:line="38" pos:column="12"/></name> <operator pos:line="38" pos:column="13">=<pos:position pos:line="38" pos:column="14"/></operator> <call><name pos:line="38" pos:column="15">snprintf<pos:position pos:line="38" pos:column="23"/></name><argument_list pos:line="38" pos:column="23">(<argument><expr><name pos:line="38" pos:column="24">node<pos:position pos:line="38" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="30">nodelen<pos:position pos:line="38" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="38" pos:column="39">"%s"<pos:position pos:line="38" pos:column="43"/></literal></expr></argument>, <argument><expr><name pos:line="38" pos:column="45">p<pos:position pos:line="38" pos:column="46"/></name></expr></argument>)<pos:position pos:line="38" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="48"/></expr_stmt>
	<if pos:line="39" pos:column="9">if <condition pos:line="39" pos:column="12">(<expr><name pos:line="39" pos:column="13">ret<pos:position pos:line="39" pos:column="16"/></name> <operator pos:line="39" pos:column="17">&lt;<pos:position pos:line="39" pos:column="21"/></operator> <literal type="number" pos:line="39" pos:column="19">0<pos:position pos:line="39" pos:column="20"/></literal> <operator pos:line="39" pos:column="21">||<pos:position pos:line="39" pos:column="23"/></operator> <operator pos:line="39" pos:column="24">(<pos:position pos:line="39" pos:column="25"/></operator><name pos:line="39" pos:column="25">size_t<pos:position pos:line="39" pos:column="31"/></name><operator pos:line="39" pos:column="31">)<pos:position pos:line="39" pos:column="32"/></operator><name pos:line="39" pos:column="32">ret<pos:position pos:line="39" pos:column="35"/></name> <operator pos:line="39" pos:column="36">&gt;=<pos:position pos:line="39" pos:column="41"/></operator> <name pos:line="39" pos:column="39">nodelen<pos:position pos:line="39" pos:column="46"/></name></expr>)<pos:position pos:line="39" pos:column="47"/></condition><then pos:line="39" pos:column="47"> <block pos:line="39" pos:column="48">{
		<return pos:line="40" pos:column="17">return <expr><name pos:line="40" pos:column="24">EAI_MEMORY<pos:position pos:line="40" pos:column="34"/></name></expr>;<pos:position pos:line="40" pos:column="35"/></return>
	}<pos:position pos:line="41" pos:column="10"/></block></then></if>
	<return pos:line="42" pos:column="9">return <expr><literal type="number" pos:line="42" pos:column="16">0<pos:position pos:line="42" pos:column="17"/></literal></expr>;<pos:position pos:line="42" pos:column="18"/></return>
}<pos:position pos:line="43" pos:column="2"/></block></function></unit>
