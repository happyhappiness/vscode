<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_161_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">wait_for_receiver<pos:position pos:line="1" pos:column="23"/></name><parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><name pos:line="1" pos:column="24">void<pos:position pos:line="1" pos:column="28"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="29"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<if pos:line="3" pos:column="9">if <condition pos:line="3" pos:column="12">(<expr><operator pos:line="3" pos:column="13">!<pos:position pos:line="3" pos:column="14"/></operator><name><name pos:line="3" pos:column="14">iobuf<pos:position pos:line="3" pos:column="19"/></name><operator pos:line="3" pos:column="19">.<pos:position pos:line="3" pos:column="20"/></operator><name pos:line="3" pos:column="20">raw_input_ends_before<pos:position pos:line="3" pos:column="41"/></name></name></expr>)<pos:position pos:line="3" pos:column="42"/></condition><then pos:line="3" pos:column="42">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="4" pos:column="17">read_a_msg<pos:position pos:line="4" pos:column="27"/></name><argument_list pos:line="4" pos:column="27">()<pos:position pos:line="4" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="30"/></expr_stmt></block></then></if>

	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><name><name pos:line="6" pos:column="13">iobuf<pos:position pos:line="6" pos:column="18"/></name><operator pos:line="6" pos:column="18">.<pos:position pos:line="6" pos:column="19"/></operator><name pos:line="6" pos:column="19">raw_input_ends_before<pos:position pos:line="6" pos:column="40"/></name></name></expr>)<pos:position pos:line="6" pos:column="41"/></condition><then pos:line="6" pos:column="41"> <block pos:line="6" pos:column="42">{
		<decl_stmt><decl><type><name pos:line="7" pos:column="17">int<pos:position pos:line="7" pos:column="20"/></name></type> <name pos:line="7" pos:column="21">ndx<pos:position pos:line="7" pos:column="24"/></name> <init pos:line="7" pos:column="25">= <expr><call><name pos:line="7" pos:column="27">read_int<pos:position pos:line="7" pos:column="35"/></name><argument_list pos:line="7" pos:column="35">(<argument><expr><name><name pos:line="7" pos:column="36">iobuf<pos:position pos:line="7" pos:column="41"/></name><operator pos:line="7" pos:column="41">.<pos:position pos:line="7" pos:column="42"/></operator><name pos:line="7" pos:column="42">in_fd<pos:position pos:line="7" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="7" pos:column="48"/></argument_list></call></expr></init></decl>;<pos:position pos:line="7" pos:column="49"/></decl_stmt>
		<if pos:line="8" pos:column="17">if <condition pos:line="8" pos:column="20">(<expr><name pos:line="8" pos:column="21">ndx<pos:position pos:line="8" pos:column="24"/></name> <operator pos:line="8" pos:column="25">&lt;<pos:position pos:line="8" pos:column="29"/></operator> <literal type="number" pos:line="8" pos:column="27">0<pos:position pos:line="8" pos:column="28"/></literal></expr>)<pos:position pos:line="8" pos:column="29"/></condition><then pos:line="8" pos:column="29"> <block pos:line="8" pos:column="30">{
			<switch pos:line="9" pos:column="25">switch <condition pos:line="9" pos:column="32">(<expr><name pos:line="9" pos:column="33">ndx<pos:position pos:line="9" pos:column="36"/></name></expr>)<pos:position pos:line="9" pos:column="37"/></condition> <block pos:line="9" pos:column="38">{
			<case pos:line="10" pos:column="25">case <expr><name pos:line="10" pos:column="30">NDX_FLIST_EOF<pos:position pos:line="10" pos:column="43"/></name></expr>:<pos:position pos:line="10" pos:column="44"/></case>
				<expr_stmt><expr><name pos:line="11" pos:column="33">flist_eof<pos:position pos:line="11" pos:column="42"/></name> <operator pos:line="11" pos:column="43">=<pos:position pos:line="11" pos:column="44"/></operator> <literal type="number" pos:line="11" pos:column="45">1<pos:position pos:line="11" pos:column="46"/></literal></expr>;<pos:position pos:line="11" pos:column="47"/></expr_stmt>
				<if pos:line="12" pos:column="33">if <condition pos:line="12" pos:column="36">(<expr><call><name pos:line="12" pos:column="37">DEBUG_GTE<pos:position pos:line="12" pos:column="46"/></name><argument_list pos:line="12" pos:column="46">(<argument><expr><name pos:line="12" pos:column="47">FLIST<pos:position pos:line="12" pos:column="52"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="12" pos:column="54">3<pos:position pos:line="12" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="12" pos:column="57"/></condition><then pos:line="12" pos:column="57">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="13" pos:column="41">rprintf<pos:position pos:line="13" pos:column="48"/></name><argument_list pos:line="13" pos:column="48">(<argument><expr><name pos:line="13" pos:column="49">FINFO<pos:position pos:line="13" pos:column="54"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="56">"[%s] flist_eof=1\n"<pos:position pos:line="13" pos:column="76"/></literal></expr></argument>, <argument><expr><call><name pos:line="13" pos:column="78">who_am_i<pos:position pos:line="13" pos:column="86"/></name><argument_list pos:line="13" pos:column="86">()<pos:position pos:line="13" pos:column="88"/></argument_list></call></expr></argument>)<pos:position pos:line="13" pos:column="89"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="90"/></expr_stmt></block></then></if>
				<break pos:line="14" pos:column="33">break;<pos:position pos:line="14" pos:column="39"/></break>
			<case pos:line="15" pos:column="25">case <expr><name pos:line="15" pos:column="30">NDX_DONE<pos:position pos:line="15" pos:column="38"/></name></expr>:<pos:position pos:line="15" pos:column="39"/></case>
				<expr_stmt><expr><name pos:line="16" pos:column="33">msgdone_cnt<pos:position pos:line="16" pos:column="44"/></name><operator pos:line="16" pos:column="44">++<pos:position pos:line="16" pos:column="46"/></operator></expr>;<pos:position pos:line="16" pos:column="47"/></expr_stmt>
				<break pos:line="17" pos:column="33">break;<pos:position pos:line="17" pos:column="39"/></break>
			<default pos:line="18" pos:column="25">default:<pos:position pos:line="18" pos:column="33"/></default>
				<expr_stmt><expr><call><name pos:line="19" pos:column="33">exit_cleanup<pos:position pos:line="19" pos:column="45"/></name><argument_list pos:line="19" pos:column="45">(<argument><expr><name pos:line="19" pos:column="46">RERR_STREAMIO<pos:position pos:line="19" pos:column="59"/></name></expr></argument>)<pos:position pos:line="19" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="61"/></expr_stmt>
			}<pos:position pos:line="20" pos:column="26"/></block></switch>
		}<pos:position pos:line="21" pos:column="18"/></block></then> <else pos:line="21" pos:column="19">else <block pos:line="21" pos:column="24">{
			<decl_stmt><decl><type><name><name pos:line="22" pos:column="25">struct<pos:position pos:line="22" pos:column="31"/></name> <name pos:line="22" pos:column="32">file_list<pos:position pos:line="22" pos:column="41"/></name></name> <modifier pos:line="22" pos:column="42">*<pos:position pos:line="22" pos:column="43"/></modifier></type><name pos:line="22" pos:column="43">flist<pos:position pos:line="22" pos:column="48"/></name></decl>;<pos:position pos:line="22" pos:column="49"/></decl_stmt>
			<expr_stmt><expr><name pos:line="23" pos:column="25">flist_receiving_enabled<pos:position pos:line="23" pos:column="48"/></name> <operator pos:line="23" pos:column="49">=<pos:position pos:line="23" pos:column="50"/></operator> <name pos:line="23" pos:column="51">False<pos:position pos:line="23" pos:column="56"/></name></expr>;<pos:position pos:line="23" pos:column="57"/></expr_stmt>
			<if pos:line="24" pos:column="25">if <condition pos:line="24" pos:column="28">(<expr><call><name pos:line="24" pos:column="29">DEBUG_GTE<pos:position pos:line="24" pos:column="38"/></name><argument_list pos:line="24" pos:column="38">(<argument><expr><name pos:line="24" pos:column="39">FLIST<pos:position pos:line="24" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="24" pos:column="46">2<pos:position pos:line="24" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="24" pos:column="49"/></condition><then pos:line="24" pos:column="49"> <block pos:line="24" pos:column="50">{
				<expr_stmt><expr><call><name pos:line="25" pos:column="33">rprintf<pos:position pos:line="25" pos:column="40"/></name><argument_list pos:line="25" pos:column="40">(<argument><expr><name pos:line="25" pos:column="41">FINFO<pos:position pos:line="25" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="25" pos:column="48">"[%s] receiving flist for dir %d\n"<pos:position pos:line="25" pos:column="83"/></literal></expr></argument>,
					<argument><expr><call><name pos:line="26" pos:column="41">who_am_i<pos:position pos:line="26" pos:column="49"/></name><argument_list pos:line="26" pos:column="49">()<pos:position pos:line="26" pos:column="51"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="26" pos:column="53">ndx<pos:position pos:line="26" pos:column="56"/></name></expr></argument>)<pos:position pos:line="26" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="58"/></expr_stmt>
			}<pos:position pos:line="27" pos:column="26"/></block></then></if>
			<expr_stmt><expr><name pos:line="28" pos:column="25">flist<pos:position pos:line="28" pos:column="30"/></name> <operator pos:line="28" pos:column="31">=<pos:position pos:line="28" pos:column="32"/></operator> <call><name pos:line="28" pos:column="33">recv_file_list<pos:position pos:line="28" pos:column="47"/></name><argument_list pos:line="28" pos:column="47">(<argument><expr><name><name pos:line="28" pos:column="48">iobuf<pos:position pos:line="28" pos:column="53"/></name><operator pos:line="28" pos:column="53">.<pos:position pos:line="28" pos:column="54"/></operator><name pos:line="28" pos:column="54">in_fd<pos:position pos:line="28" pos:column="59"/></name></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="61">ndx<pos:position pos:line="28" pos:column="64"/></name></expr></argument>)<pos:position pos:line="28" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="66"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="29" pos:column="25">flist<pos:position pos:line="29" pos:column="30"/></name><operator pos:line="29" pos:column="30">-&gt;<pos:position pos:line="29" pos:column="35"/></operator><name pos:line="29" pos:column="32">parent_ndx<pos:position pos:line="29" pos:column="42"/></name></name> <operator pos:line="29" pos:column="43">=<pos:position pos:line="29" pos:column="44"/></operator> <name pos:line="29" pos:column="45">ndx<pos:position pos:line="29" pos:column="48"/></name></expr>;<pos:position pos:line="29" pos:column="49"/></expr_stmt>
<cpp:ifdef pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">ifdef<pos:position pos:line="30" pos:column="7"/></cpp:directive> <name pos:line="30" pos:column="8">SUPPORT_HARD_LINKS<pos:position pos:line="30" pos:column="26"/></name></cpp:ifdef>
			<if pos:line="31" pos:column="25">if <condition pos:line="31" pos:column="28">(<expr><name pos:line="31" pos:column="29">preserve_hard_links<pos:position pos:line="31" pos:column="48"/></name></expr>)<pos:position pos:line="31" pos:column="49"/></condition><then pos:line="31" pos:column="49">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="32" pos:column="33">match_hard_links<pos:position pos:line="32" pos:column="49"/></name><argument_list pos:line="32" pos:column="49">(<argument><expr><name pos:line="32" pos:column="50">flist<pos:position pos:line="32" pos:column="55"/></name></expr></argument>)<pos:position pos:line="32" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="57"/></expr_stmt></block></then></if>
<cpp:endif pos:line="33" pos:column="1">#<cpp:directive pos:line="33" pos:column="2">endif<pos:position pos:line="33" pos:column="7"/></cpp:directive></cpp:endif>
			<expr_stmt><expr><name pos:line="34" pos:column="25">flist_receiving_enabled<pos:position pos:line="34" pos:column="48"/></name> <operator pos:line="34" pos:column="49">=<pos:position pos:line="34" pos:column="50"/></operator> <name pos:line="34" pos:column="51">True<pos:position pos:line="34" pos:column="55"/></name></expr>;<pos:position pos:line="34" pos:column="56"/></expr_stmt>
		}<pos:position pos:line="35" pos:column="18"/></block></else></if>
	}<pos:position pos:line="36" pos:column="10"/></block></then></if>
}<pos:position pos:line="37" pos:column="2"/></block></function></unit>
