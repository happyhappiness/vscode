<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_181_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">write_buf<pos:position pos:line="1" pos:column="15"/></name><parameter_list pos:line="1" pos:column="15">(<parameter><decl><type><name pos:line="1" pos:column="16">int<pos:position pos:line="1" pos:column="19"/></name></type> <name pos:line="1" pos:column="20">f<pos:position pos:line="1" pos:column="21"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="23">const<pos:position pos:line="1" pos:column="28"/></specifier> <name pos:line="1" pos:column="29">char<pos:position pos:line="1" pos:column="33"/></name> <modifier pos:line="1" pos:column="34">*<pos:position pos:line="1" pos:column="35"/></modifier></type><name pos:line="1" pos:column="35">buf<pos:position pos:line="1" pos:column="38"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="40">size_t<pos:position pos:line="1" pos:column="46"/></name></type> <name pos:line="1" pos:column="47">len<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="51"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">size_t<pos:position pos:line="3" pos:column="15"/></name></type> <name pos:line="3" pos:column="16">pos<pos:position pos:line="3" pos:column="19"/></name></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="21">siz<pos:position pos:line="3" pos:column="24"/></name></decl>;<pos:position pos:line="3" pos:column="25"/></decl_stmt>

	<if pos:line="5" pos:column="9">if <condition pos:line="5" pos:column="12">(<expr><name pos:line="5" pos:column="13">f<pos:position pos:line="5" pos:column="14"/></name> <operator pos:line="5" pos:column="15">!=<pos:position pos:line="5" pos:column="17"/></operator> <name><name pos:line="5" pos:column="18">iobuf<pos:position pos:line="5" pos:column="23"/></name><operator pos:line="5" pos:column="23">.<pos:position pos:line="5" pos:column="24"/></operator><name pos:line="5" pos:column="24">out_fd<pos:position pos:line="5" pos:column="30"/></name></name></expr>)<pos:position pos:line="5" pos:column="31"/></condition><then pos:line="5" pos:column="31"> <block pos:line="5" pos:column="32">{
		<expr_stmt><expr><call><name pos:line="6" pos:column="17">safe_write<pos:position pos:line="6" pos:column="27"/></name><argument_list pos:line="6" pos:column="27">(<argument><expr><name pos:line="6" pos:column="28">f<pos:position pos:line="6" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="31">buf<pos:position pos:line="6" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="36">len<pos:position pos:line="6" pos:column="39"/></name></expr></argument>)<pos:position pos:line="6" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="41"/></expr_stmt>
		<goto pos:line="7" pos:column="17">goto <name pos:line="7" pos:column="22">batch_copy<pos:position pos:line="7" pos:column="32"/></name>;<pos:position pos:line="7" pos:column="33"/></goto>
	}<pos:position pos:line="8" pos:column="10"/></block></then></if>

	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><name><name pos:line="10" pos:column="13">iobuf<pos:position pos:line="10" pos:column="18"/></name><operator pos:line="10" pos:column="18">.<pos:position pos:line="10" pos:column="19"/></operator><name pos:line="10" pos:column="19">out<pos:position pos:line="10" pos:column="22"/></name><operator pos:line="10" pos:column="22">.<pos:position pos:line="10" pos:column="23"/></operator><name pos:line="10" pos:column="23">len<pos:position pos:line="10" pos:column="26"/></name></name> <operator pos:line="10" pos:column="27">+<pos:position pos:line="10" pos:column="28"/></operator> <name pos:line="10" pos:column="29">len<pos:position pos:line="10" pos:column="32"/></name> <operator pos:line="10" pos:column="33">&gt;<pos:position pos:line="10" pos:column="37"/></operator> <name><name pos:line="10" pos:column="35">iobuf<pos:position pos:line="10" pos:column="40"/></name><operator pos:line="10" pos:column="40">.<pos:position pos:line="10" pos:column="41"/></operator><name pos:line="10" pos:column="41">out<pos:position pos:line="10" pos:column="44"/></name><operator pos:line="10" pos:column="44">.<pos:position pos:line="10" pos:column="45"/></operator><name pos:line="10" pos:column="45">size<pos:position pos:line="10" pos:column="49"/></name></name></expr>)<pos:position pos:line="10" pos:column="50"/></condition><then pos:line="10" pos:column="50">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="11" pos:column="17">perform_io<pos:position pos:line="11" pos:column="27"/></name><argument_list pos:line="11" pos:column="27">(<argument><expr><name pos:line="11" pos:column="28">len<pos:position pos:line="11" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="33">PIO_NEED_OUTROOM<pos:position pos:line="11" pos:column="49"/></name></expr></argument>)<pos:position pos:line="11" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="51"/></expr_stmt></block></then></if>

	<expr_stmt><expr><name pos:line="13" pos:column="9">pos<pos:position pos:line="13" pos:column="12"/></name> <operator pos:line="13" pos:column="13">=<pos:position pos:line="13" pos:column="14"/></operator> <name><name pos:line="13" pos:column="15">iobuf<pos:position pos:line="13" pos:column="20"/></name><operator pos:line="13" pos:column="20">.<pos:position pos:line="13" pos:column="21"/></operator><name pos:line="13" pos:column="21">out<pos:position pos:line="13" pos:column="24"/></name><operator pos:line="13" pos:column="24">.<pos:position pos:line="13" pos:column="25"/></operator><name pos:line="13" pos:column="25">pos<pos:position pos:line="13" pos:column="28"/></name></name> <operator pos:line="13" pos:column="29">+<pos:position pos:line="13" pos:column="30"/></operator> <name><name pos:line="13" pos:column="31">iobuf<pos:position pos:line="13" pos:column="36"/></name><operator pos:line="13" pos:column="36">.<pos:position pos:line="13" pos:column="37"/></operator><name pos:line="13" pos:column="37">out<pos:position pos:line="13" pos:column="40"/></name><operator pos:line="13" pos:column="40">.<pos:position pos:line="13" pos:column="41"/></operator><name pos:line="13" pos:column="41">len<pos:position pos:line="13" pos:column="44"/></name></name></expr>;<pos:position pos:line="13" pos:column="45"/></expr_stmt> <comment type="block" pos:line="13" pos:column="46">/* Must be set after any flushing. */</comment>
	<if pos:line="14" pos:column="9">if <condition pos:line="14" pos:column="12">(<expr><name pos:line="14" pos:column="13">pos<pos:position pos:line="14" pos:column="16"/></name> <operator pos:line="14" pos:column="17">&gt;=<pos:position pos:line="14" pos:column="22"/></operator> <name><name pos:line="14" pos:column="20">iobuf<pos:position pos:line="14" pos:column="25"/></name><operator pos:line="14" pos:column="25">.<pos:position pos:line="14" pos:column="26"/></operator><name pos:line="14" pos:column="26">out<pos:position pos:line="14" pos:column="29"/></name><operator pos:line="14" pos:column="29">.<pos:position pos:line="14" pos:column="30"/></operator><name pos:line="14" pos:column="30">size<pos:position pos:line="14" pos:column="34"/></name></name></expr>)<pos:position pos:line="14" pos:column="35"/></condition><then pos:line="14" pos:column="35">
		<block type="pseudo"><expr_stmt><expr><name pos:line="15" pos:column="17">pos<pos:position pos:line="15" pos:column="20"/></name> <operator pos:line="15" pos:column="21">-=<pos:position pos:line="15" pos:column="23"/></operator> <name><name pos:line="15" pos:column="24">iobuf<pos:position pos:line="15" pos:column="29"/></name><operator pos:line="15" pos:column="29">.<pos:position pos:line="15" pos:column="30"/></operator><name pos:line="15" pos:column="30">out<pos:position pos:line="15" pos:column="33"/></name><operator pos:line="15" pos:column="33">.<pos:position pos:line="15" pos:column="34"/></operator><name pos:line="15" pos:column="34">size<pos:position pos:line="15" pos:column="38"/></name></name></expr>;<pos:position pos:line="15" pos:column="39"/></expr_stmt></block></then></if>

	<comment type="block" pos:line="17" pos:column="9">/* Handle a split copy if we wrap around the end of the circular buffer. */</comment>
	<if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><name pos:line="18" pos:column="13">pos<pos:position pos:line="18" pos:column="16"/></name> <operator pos:line="18" pos:column="17">&gt;=<pos:position pos:line="18" pos:column="22"/></operator> <name><name pos:line="18" pos:column="20">iobuf<pos:position pos:line="18" pos:column="25"/></name><operator pos:line="18" pos:column="25">.<pos:position pos:line="18" pos:column="26"/></operator><name pos:line="18" pos:column="26">out<pos:position pos:line="18" pos:column="29"/></name><operator pos:line="18" pos:column="29">.<pos:position pos:line="18" pos:column="30"/></operator><name pos:line="18" pos:column="30">pos<pos:position pos:line="18" pos:column="33"/></name></name> <operator pos:line="18" pos:column="34">&amp;&amp;<pos:position pos:line="18" pos:column="44"/></operator> <operator pos:line="18" pos:column="37">(<pos:position pos:line="18" pos:column="38"/></operator><name pos:line="18" pos:column="38">siz<pos:position pos:line="18" pos:column="41"/></name> <operator pos:line="18" pos:column="42">=<pos:position pos:line="18" pos:column="43"/></operator> <name><name pos:line="18" pos:column="44">iobuf<pos:position pos:line="18" pos:column="49"/></name><operator pos:line="18" pos:column="49">.<pos:position pos:line="18" pos:column="50"/></operator><name pos:line="18" pos:column="50">out<pos:position pos:line="18" pos:column="53"/></name><operator pos:line="18" pos:column="53">.<pos:position pos:line="18" pos:column="54"/></operator><name pos:line="18" pos:column="54">size<pos:position pos:line="18" pos:column="58"/></name></name> <operator pos:line="18" pos:column="59">-<pos:position pos:line="18" pos:column="60"/></operator> <name pos:line="18" pos:column="61">pos<pos:position pos:line="18" pos:column="64"/></name><operator pos:line="18" pos:column="64">)<pos:position pos:line="18" pos:column="65"/></operator> <operator pos:line="18" pos:column="66">&lt;<pos:position pos:line="18" pos:column="70"/></operator> <name pos:line="18" pos:column="68">len<pos:position pos:line="18" pos:column="71"/></name></expr>)<pos:position pos:line="18" pos:column="72"/></condition><then pos:line="18" pos:column="72"> <block pos:line="18" pos:column="73">{
		<expr_stmt><expr><call><name pos:line="19" pos:column="17">memcpy<pos:position pos:line="19" pos:column="23"/></name><argument_list pos:line="19" pos:column="23">(<argument><expr><name><name pos:line="19" pos:column="24">iobuf<pos:position pos:line="19" pos:column="29"/></name><operator pos:line="19" pos:column="29">.<pos:position pos:line="19" pos:column="30"/></operator><name pos:line="19" pos:column="30">out<pos:position pos:line="19" pos:column="33"/></name><operator pos:line="19" pos:column="33">.<pos:position pos:line="19" pos:column="34"/></operator><name pos:line="19" pos:column="34">buf<pos:position pos:line="19" pos:column="37"/></name></name> <operator pos:line="19" pos:column="38">+<pos:position pos:line="19" pos:column="39"/></operator> <name pos:line="19" pos:column="40">pos<pos:position pos:line="19" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="45">buf<pos:position pos:line="19" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="50">siz<pos:position pos:line="19" pos:column="53"/></name></expr></argument>)<pos:position pos:line="19" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="55"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="20" pos:column="17">memcpy<pos:position pos:line="20" pos:column="23"/></name><argument_list pos:line="20" pos:column="23">(<argument><expr><name><name pos:line="20" pos:column="24">iobuf<pos:position pos:line="20" pos:column="29"/></name><operator pos:line="20" pos:column="29">.<pos:position pos:line="20" pos:column="30"/></operator><name pos:line="20" pos:column="30">out<pos:position pos:line="20" pos:column="33"/></name><operator pos:line="20" pos:column="33">.<pos:position pos:line="20" pos:column="34"/></operator><name pos:line="20" pos:column="34">buf<pos:position pos:line="20" pos:column="37"/></name></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="39">buf<pos:position pos:line="20" pos:column="42"/></name> <operator pos:line="20" pos:column="43">+<pos:position pos:line="20" pos:column="44"/></operator> <name pos:line="20" pos:column="45">siz<pos:position pos:line="20" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="50">len<pos:position pos:line="20" pos:column="53"/></name> <operator pos:line="20" pos:column="54">-<pos:position pos:line="20" pos:column="55"/></operator> <name pos:line="20" pos:column="56">siz<pos:position pos:line="20" pos:column="59"/></name></expr></argument>)<pos:position pos:line="20" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="61"/></expr_stmt>
	}<pos:position pos:line="21" pos:column="10"/></block></then> <else pos:line="21" pos:column="11">else
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="22" pos:column="17">memcpy<pos:position pos:line="22" pos:column="23"/></name><argument_list pos:line="22" pos:column="23">(<argument><expr><name><name pos:line="22" pos:column="24">iobuf<pos:position pos:line="22" pos:column="29"/></name><operator pos:line="22" pos:column="29">.<pos:position pos:line="22" pos:column="30"/></operator><name pos:line="22" pos:column="30">out<pos:position pos:line="22" pos:column="33"/></name><operator pos:line="22" pos:column="33">.<pos:position pos:line="22" pos:column="34"/></operator><name pos:line="22" pos:column="34">buf<pos:position pos:line="22" pos:column="37"/></name></name> <operator pos:line="22" pos:column="38">+<pos:position pos:line="22" pos:column="39"/></operator> <name pos:line="22" pos:column="40">pos<pos:position pos:line="22" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="45">buf<pos:position pos:line="22" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="50">len<pos:position pos:line="22" pos:column="53"/></name></expr></argument>)<pos:position pos:line="22" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="55"/></expr_stmt></block></else></if>

	<expr_stmt><expr><name><name pos:line="24" pos:column="9">iobuf<pos:position pos:line="24" pos:column="14"/></name><operator pos:line="24" pos:column="14">.<pos:position pos:line="24" pos:column="15"/></operator><name pos:line="24" pos:column="15">out<pos:position pos:line="24" pos:column="18"/></name><operator pos:line="24" pos:column="18">.<pos:position pos:line="24" pos:column="19"/></operator><name pos:line="24" pos:column="19">len<pos:position pos:line="24" pos:column="22"/></name></name> <operator pos:line="24" pos:column="23">+=<pos:position pos:line="24" pos:column="25"/></operator> <name pos:line="24" pos:column="26">len<pos:position pos:line="24" pos:column="29"/></name></expr>;<pos:position pos:line="24" pos:column="30"/></expr_stmt>
	<expr_stmt><expr><name pos:line="25" pos:column="9">total_data_written<pos:position pos:line="25" pos:column="27"/></name> <operator pos:line="25" pos:column="28">+=<pos:position pos:line="25" pos:column="30"/></operator> <name pos:line="25" pos:column="31">len<pos:position pos:line="25" pos:column="34"/></name></expr>;<pos:position pos:line="25" pos:column="35"/></expr_stmt>

  <label><name pos:line="27" pos:column="3">batch_copy<pos:position pos:line="27" pos:column="13"/></name>:<pos:position pos:line="27" pos:column="14"/></label>
	<if pos:line="28" pos:column="9">if <condition pos:line="28" pos:column="12">(<expr><name pos:line="28" pos:column="13">f<pos:position pos:line="28" pos:column="14"/></name> <operator pos:line="28" pos:column="15">==<pos:position pos:line="28" pos:column="17"/></operator> <name pos:line="28" pos:column="18">write_batch_monitor_out<pos:position pos:line="28" pos:column="41"/></name></expr>)<pos:position pos:line="28" pos:column="42"/></condition><then pos:line="28" pos:column="42">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="29" pos:column="17">safe_write<pos:position pos:line="29" pos:column="27"/></name><argument_list pos:line="29" pos:column="27">(<argument><expr><name pos:line="29" pos:column="28">batch_fd<pos:position pos:line="29" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="38">buf<pos:position pos:line="29" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="43">len<pos:position pos:line="29" pos:column="46"/></name></expr></argument>)<pos:position pos:line="29" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="48"/></expr_stmt></block></then></if>
}<pos:position pos:line="30" pos:column="2"/></block></function></unit>
