<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_43_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">BOOL<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">do_parameter<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name pos:line="1" pos:column="26">char<pos:position pos:line="1" pos:column="30"/></name> <modifier pos:line="1" pos:column="31">*<pos:position pos:line="1" pos:column="32"/></modifier></type><name pos:line="1" pos:column="32">parmname<pos:position pos:line="1" pos:column="40"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="42">char<pos:position pos:line="1" pos:column="46"/></name> <modifier pos:line="1" pos:column="47">*<pos:position pos:line="1" pos:column="48"/></modifier></type><name pos:line="1" pos:column="48">parmvalue<pos:position pos:line="1" pos:column="57"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="58"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">parmnum<pos:position pos:line="3" pos:column="20"/></name></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="22">i<pos:position pos:line="3" pos:column="23"/></name></decl>;<pos:position pos:line="3" pos:column="24"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">void<pos:position pos:line="4" pos:column="13"/></name> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier></type><name pos:line="4" pos:column="15">parm_ptr<pos:position pos:line="4" pos:column="23"/></name></decl>;<pos:position pos:line="4" pos:column="24"/></decl_stmt> <comment type="block" pos:line="4" pos:column="25">/* where we are going to store the result */</comment>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">void<pos:position pos:line="5" pos:column="13"/></name> <modifier pos:line="5" pos:column="14">*<pos:position pos:line="5" pos:column="15"/></modifier></type><name pos:line="5" pos:column="15">def_ptr<pos:position pos:line="5" pos:column="22"/></name></decl>;<pos:position pos:line="5" pos:column="23"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">char<pos:position pos:line="6" pos:column="13"/></name> <modifier pos:line="6" pos:column="14">*<pos:position pos:line="6" pos:column="15"/></modifier></type><name pos:line="6" pos:column="15">cp<pos:position pos:line="6" pos:column="17"/></name></decl>;<pos:position pos:line="6" pos:column="18"/></decl_stmt>

	<expr_stmt><expr><name pos:line="8" pos:column="9">parmnum<pos:position pos:line="8" pos:column="16"/></name> <operator pos:line="8" pos:column="17">=<pos:position pos:line="8" pos:column="18"/></operator> <call><name pos:line="8" pos:column="19">map_parameter<pos:position pos:line="8" pos:column="32"/></name><argument_list pos:line="8" pos:column="32">(<argument><expr><name pos:line="8" pos:column="33">parmname<pos:position pos:line="8" pos:column="41"/></name></expr></argument>)<pos:position pos:line="8" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="43"/></expr_stmt>

	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><name pos:line="10" pos:column="13">parmnum<pos:position pos:line="10" pos:column="20"/></name> <operator pos:line="10" pos:column="21">&lt;<pos:position pos:line="10" pos:column="25"/></operator> <literal type="number" pos:line="10" pos:column="23">0<pos:position pos:line="10" pos:column="24"/></literal></expr>)<pos:position pos:line="10" pos:column="25"/></condition><then pos:line="10" pos:column="25"> <block pos:line="10" pos:column="26">{
		<expr_stmt><expr><call><name pos:line="11" pos:column="17">rprintf<pos:position pos:line="11" pos:column="24"/></name><argument_list pos:line="11" pos:column="24">(<argument><expr><name pos:line="11" pos:column="25">FLOG<pos:position pos:line="11" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="31">"IGNORING unknown parameter \"%s\"\n"<pos:position pos:line="11" pos:column="68"/></literal></expr></argument>, <argument><expr><name pos:line="11" pos:column="70">parmname<pos:position pos:line="11" pos:column="78"/></name></expr></argument>)<pos:position pos:line="11" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="80"/></expr_stmt>
		<return pos:line="12" pos:column="17">return <expr><name pos:line="12" pos:column="24">True<pos:position pos:line="12" pos:column="28"/></name></expr>;<pos:position pos:line="12" pos:column="29"/></return>
	}<pos:position pos:line="13" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="15" pos:column="9">def_ptr<pos:position pos:line="15" pos:column="16"/></name> <operator pos:line="15" pos:column="17">=<pos:position pos:line="15" pos:column="18"/></operator> <name><name pos:line="15" pos:column="19">parm_table<pos:position pos:line="15" pos:column="29"/></name><index pos:line="15" pos:column="29">[<expr><name pos:line="15" pos:column="30">parmnum<pos:position pos:line="15" pos:column="37"/></name></expr>]<pos:position pos:line="15" pos:column="38"/></index></name><operator pos:line="15" pos:column="38">.<pos:position pos:line="15" pos:column="39"/></operator><name pos:line="15" pos:column="39">ptr<pos:position pos:line="15" pos:column="42"/></name></expr>;<pos:position pos:line="15" pos:column="43"/></expr_stmt>

	<if pos:line="17" pos:column="9">if <condition pos:line="17" pos:column="12">(<expr><name pos:line="17" pos:column="13">bInGlobalSection<pos:position pos:line="17" pos:column="29"/></name></expr>)<pos:position pos:line="17" pos:column="30"/></condition><then pos:line="17" pos:column="30">
		<block type="pseudo"><expr_stmt><expr><name pos:line="18" pos:column="17">parm_ptr<pos:position pos:line="18" pos:column="25"/></name> <operator pos:line="18" pos:column="26">=<pos:position pos:line="18" pos:column="27"/></operator> <name pos:line="18" pos:column="28">def_ptr<pos:position pos:line="18" pos:column="35"/></name></expr>;<pos:position pos:line="18" pos:column="36"/></expr_stmt></block></then>
	<else pos:line="19" pos:column="9">else <block pos:line="19" pos:column="14">{
		<if pos:line="20" pos:column="17">if <condition pos:line="20" pos:column="20">(<expr><name><name pos:line="20" pos:column="21">parm_table<pos:position pos:line="20" pos:column="31"/></name><index pos:line="20" pos:column="31">[<expr><name pos:line="20" pos:column="32">parmnum<pos:position pos:line="20" pos:column="39"/></name></expr>]<pos:position pos:line="20" pos:column="40"/></index></name><operator pos:line="20" pos:column="40">.<pos:position pos:line="20" pos:column="41"/></operator><name pos:line="20" pos:column="41">class<pos:position pos:line="20" pos:column="46"/></name> <operator pos:line="20" pos:column="47">==<pos:position pos:line="20" pos:column="49"/></operator> <name pos:line="20" pos:column="50">P_GLOBAL<pos:position pos:line="20" pos:column="58"/></name></expr>)<pos:position pos:line="20" pos:column="59"/></condition><then pos:line="20" pos:column="59"> <block pos:line="20" pos:column="60">{
			<expr_stmt><expr><call><name pos:line="21" pos:column="25">rprintf<pos:position pos:line="21" pos:column="32"/></name><argument_list pos:line="21" pos:column="32">(<argument><expr><name pos:line="21" pos:column="33">FLOG<pos:position pos:line="21" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="21" pos:column="39">"Global parameter %s found in module section!\n"<pos:position pos:line="21" pos:column="87"/></literal></expr></argument>, <argument><expr><name pos:line="21" pos:column="89">parmname<pos:position pos:line="21" pos:column="97"/></name></expr></argument>)<pos:position pos:line="21" pos:column="98"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="99"/></expr_stmt>
			<return pos:line="22" pos:column="25">return <expr><name pos:line="22" pos:column="32">True<pos:position pos:line="22" pos:column="36"/></name></expr>;<pos:position pos:line="22" pos:column="37"/></return>
		}<pos:position pos:line="23" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name pos:line="24" pos:column="17">parm_ptr<pos:position pos:line="24" pos:column="25"/></name> <operator pos:line="24" pos:column="26">=<pos:position pos:line="24" pos:column="27"/></operator> <call><name pos:line="24" pos:column="28">SECTION_PTR<pos:position pos:line="24" pos:column="39"/></name><argument_list pos:line="24" pos:column="39">(<argument><expr><operator pos:line="24" pos:column="40">&amp;<pos:position pos:line="24" pos:column="45"/></operator><call><name pos:line="24" pos:column="41">iSECTION<pos:position pos:line="24" pos:column="49"/></name><argument_list pos:line="24" pos:column="49">(<argument><expr><name pos:line="24" pos:column="50">iSectionIndex<pos:position pos:line="24" pos:column="63"/></name></expr></argument>)<pos:position pos:line="24" pos:column="64"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="24" pos:column="66">def_ptr<pos:position pos:line="24" pos:column="73"/></name></expr></argument>)<pos:position pos:line="24" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="75"/></expr_stmt>
	}<pos:position pos:line="25" pos:column="10"/></block></else></if>

	<comment type="block" pos:line="27" pos:column="9">/* now switch on the type of variable it is */</comment>
	<switch pos:line="28" pos:column="9">switch <condition pos:line="28" pos:column="16">(<expr><name><name pos:line="28" pos:column="17">parm_table<pos:position pos:line="28" pos:column="27"/></name><index pos:line="28" pos:column="27">[<expr><name pos:line="28" pos:column="28">parmnum<pos:position pos:line="28" pos:column="35"/></name></expr>]<pos:position pos:line="28" pos:column="36"/></index></name><operator pos:line="28" pos:column="36">.<pos:position pos:line="28" pos:column="37"/></operator><name pos:line="28" pos:column="37">type<pos:position pos:line="28" pos:column="41"/></name></expr>)<pos:position pos:line="28" pos:column="42"/></condition> <block pos:line="28" pos:column="43">{
	<case pos:line="29" pos:column="9">case <expr><name pos:line="29" pos:column="14">P_PATH<pos:position pos:line="29" pos:column="20"/></name></expr>:<pos:position pos:line="29" pos:column="21"/></case>
	<case pos:line="30" pos:column="9">case <expr><name pos:line="30" pos:column="14">P_STRING<pos:position pos:line="30" pos:column="22"/></name></expr>:<pos:position pos:line="30" pos:column="23"/></case>
		<comment type="block" pos:line="31" pos:column="17">/* delay expansion of vars */</comment>
		<break pos:line="32" pos:column="17">break;<pos:position pos:line="32" pos:column="23"/></break>
	<default pos:line="33" pos:column="9">default:<pos:position pos:line="33" pos:column="17"/></default>
		<comment type="block" pos:line="34" pos:column="17">/* expand any %VARS% now */</comment>
		<expr_stmt><expr><name pos:line="35" pos:column="17">parmvalue<pos:position pos:line="35" pos:column="26"/></name> <operator pos:line="35" pos:column="27">=<pos:position pos:line="35" pos:column="28"/></operator> <call><name pos:line="35" pos:column="29">expand_vars<pos:position pos:line="35" pos:column="40"/></name><argument_list pos:line="35" pos:column="40">(<argument><expr><name pos:line="35" pos:column="41">parmvalue<pos:position pos:line="35" pos:column="50"/></name></expr></argument>)<pos:position pos:line="35" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="52"/></expr_stmt>
		<break pos:line="36" pos:column="17">break;<pos:position pos:line="36" pos:column="23"/></break>
	}<pos:position pos:line="37" pos:column="10"/></block></switch>

	<switch pos:line="39" pos:column="9">switch <condition pos:line="39" pos:column="16">(<expr><name><name pos:line="39" pos:column="17">parm_table<pos:position pos:line="39" pos:column="27"/></name><index pos:line="39" pos:column="27">[<expr><name pos:line="39" pos:column="28">parmnum<pos:position pos:line="39" pos:column="35"/></name></expr>]<pos:position pos:line="39" pos:column="36"/></index></name><operator pos:line="39" pos:column="36">.<pos:position pos:line="39" pos:column="37"/></operator><name pos:line="39" pos:column="37">type<pos:position pos:line="39" pos:column="41"/></name></expr>)<pos:position pos:line="39" pos:column="42"/></condition> <block pos:line="39" pos:column="43">{
	<case pos:line="40" pos:column="9">case <expr><name pos:line="40" pos:column="14">P_BOOL<pos:position pos:line="40" pos:column="20"/></name></expr>:<pos:position pos:line="40" pos:column="21"/></case>
		<expr_stmt><expr><call><name pos:line="41" pos:column="17">set_boolean<pos:position pos:line="41" pos:column="28"/></name><argument_list pos:line="41" pos:column="28">(<argument><expr><name pos:line="41" pos:column="29">parm_ptr<pos:position pos:line="41" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="39">parmvalue<pos:position pos:line="41" pos:column="48"/></name></expr></argument>)<pos:position pos:line="41" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="50"/></expr_stmt>
		<break pos:line="42" pos:column="17">break;<pos:position pos:line="42" pos:column="23"/></break>

	<case pos:line="44" pos:column="9">case <expr><name pos:line="44" pos:column="14">P_BOOLREV<pos:position pos:line="44" pos:column="23"/></name></expr>:<pos:position pos:line="44" pos:column="24"/></case>
		<expr_stmt><expr><call><name pos:line="45" pos:column="17">set_boolean<pos:position pos:line="45" pos:column="28"/></name><argument_list pos:line="45" pos:column="28">(<argument><expr><name pos:line="45" pos:column="29">parm_ptr<pos:position pos:line="45" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="39">parmvalue<pos:position pos:line="45" pos:column="48"/></name></expr></argument>)<pos:position pos:line="45" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="50"/></expr_stmt>
		<expr_stmt><expr><operator pos:line="46" pos:column="17">*<pos:position pos:line="46" pos:column="18"/></operator><operator pos:line="46" pos:column="18">(<pos:position pos:line="46" pos:column="19"/></operator><name pos:line="46" pos:column="19">BOOL<pos:position pos:line="46" pos:column="23"/></name> <operator pos:line="46" pos:column="24">*<pos:position pos:line="46" pos:column="25"/></operator><operator pos:line="46" pos:column="25">)<pos:position pos:line="46" pos:column="26"/></operator><name pos:line="46" pos:column="26">parm_ptr<pos:position pos:line="46" pos:column="34"/></name> <operator pos:line="46" pos:column="35">=<pos:position pos:line="46" pos:column="36"/></operator> <operator pos:line="46" pos:column="37">!<pos:position pos:line="46" pos:column="38"/></operator> <operator pos:line="46" pos:column="39">*<pos:position pos:line="46" pos:column="40"/></operator><operator pos:line="46" pos:column="40">(<pos:position pos:line="46" pos:column="41"/></operator><name pos:line="46" pos:column="41">BOOL<pos:position pos:line="46" pos:column="45"/></name> <operator pos:line="46" pos:column="46">*<pos:position pos:line="46" pos:column="47"/></operator><operator pos:line="46" pos:column="47">)<pos:position pos:line="46" pos:column="48"/></operator><name pos:line="46" pos:column="48">parm_ptr<pos:position pos:line="46" pos:column="56"/></name></expr>;<pos:position pos:line="46" pos:column="57"/></expr_stmt>
		<break pos:line="47" pos:column="17">break;<pos:position pos:line="47" pos:column="23"/></break>

	<case pos:line="49" pos:column="9">case <expr><name pos:line="49" pos:column="14">P_INTEGER<pos:position pos:line="49" pos:column="23"/></name></expr>:<pos:position pos:line="49" pos:column="24"/></case>
		<expr_stmt><expr><operator pos:line="50" pos:column="17">*<pos:position pos:line="50" pos:column="18"/></operator><operator pos:line="50" pos:column="18">(<pos:position pos:line="50" pos:column="19"/></operator><name pos:line="50" pos:column="19">int<pos:position pos:line="50" pos:column="22"/></name> <operator pos:line="50" pos:column="23">*<pos:position pos:line="50" pos:column="24"/></operator><operator pos:line="50" pos:column="24">)<pos:position pos:line="50" pos:column="25"/></operator><name pos:line="50" pos:column="25">parm_ptr<pos:position pos:line="50" pos:column="33"/></name> <operator pos:line="50" pos:column="34">=<pos:position pos:line="50" pos:column="35"/></operator> <call><name pos:line="50" pos:column="36">atoi<pos:position pos:line="50" pos:column="40"/></name><argument_list pos:line="50" pos:column="40">(<argument><expr><name pos:line="50" pos:column="41">parmvalue<pos:position pos:line="50" pos:column="50"/></name></expr></argument>)<pos:position pos:line="50" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="52"/></expr_stmt>
		<break pos:line="51" pos:column="17">break;<pos:position pos:line="51" pos:column="23"/></break>

	<case pos:line="53" pos:column="9">case <expr><name pos:line="53" pos:column="14">P_CHAR<pos:position pos:line="53" pos:column="20"/></name></expr>:<pos:position pos:line="53" pos:column="21"/></case>
		<expr_stmt><expr><operator pos:line="54" pos:column="17">*<pos:position pos:line="54" pos:column="18"/></operator><operator pos:line="54" pos:column="18">(<pos:position pos:line="54" pos:column="19"/></operator><name pos:line="54" pos:column="19">char<pos:position pos:line="54" pos:column="23"/></name> <operator pos:line="54" pos:column="24">*<pos:position pos:line="54" pos:column="25"/></operator><operator pos:line="54" pos:column="25">)<pos:position pos:line="54" pos:column="26"/></operator><name pos:line="54" pos:column="26">parm_ptr<pos:position pos:line="54" pos:column="34"/></name> <operator pos:line="54" pos:column="35">=<pos:position pos:line="54" pos:column="36"/></operator> <operator pos:line="54" pos:column="37">*<pos:position pos:line="54" pos:column="38"/></operator><name pos:line="54" pos:column="38">parmvalue<pos:position pos:line="54" pos:column="47"/></name></expr>;<pos:position pos:line="54" pos:column="48"/></expr_stmt>
		<break pos:line="55" pos:column="17">break;<pos:position pos:line="55" pos:column="23"/></break>

	<case pos:line="57" pos:column="9">case <expr><name pos:line="57" pos:column="14">P_OCTAL<pos:position pos:line="57" pos:column="21"/></name></expr>:<pos:position pos:line="57" pos:column="22"/></case>
		<expr_stmt><expr><call><name pos:line="58" pos:column="17">sscanf<pos:position pos:line="58" pos:column="23"/></name><argument_list pos:line="58" pos:column="23">(<argument><expr><name pos:line="58" pos:column="24">parmvalue<pos:position pos:line="58" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="58" pos:column="35">"%o"<pos:position pos:line="58" pos:column="39"/></literal></expr></argument>, <argument><expr><operator pos:line="58" pos:column="41">(<pos:position pos:line="58" pos:column="42"/></operator><name pos:line="58" pos:column="42">int<pos:position pos:line="58" pos:column="45"/></name> <operator pos:line="58" pos:column="46">*<pos:position pos:line="58" pos:column="47"/></operator><operator pos:line="58" pos:column="47">)<pos:position pos:line="58" pos:column="48"/></operator><name pos:line="58" pos:column="48">parm_ptr<pos:position pos:line="58" pos:column="56"/></name></expr></argument>)<pos:position pos:line="58" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="58"/></expr_stmt>
		<break pos:line="59" pos:column="17">break;<pos:position pos:line="59" pos:column="23"/></break>

	<case pos:line="61" pos:column="9">case <expr><name pos:line="61" pos:column="14">P_PATH<pos:position pos:line="61" pos:column="20"/></name></expr>:<pos:position pos:line="61" pos:column="21"/></case>
		<expr_stmt><expr><call><name pos:line="62" pos:column="17">string_set<pos:position pos:line="62" pos:column="27"/></name><argument_list pos:line="62" pos:column="27">(<argument><expr><name pos:line="62" pos:column="28">parm_ptr<pos:position pos:line="62" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="38">parmvalue<pos:position pos:line="62" pos:column="47"/></name></expr></argument>)<pos:position pos:line="62" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="49"/></expr_stmt>
		<if pos:line="63" pos:column="17">if <condition pos:line="63" pos:column="20">(<expr><operator pos:line="63" pos:column="21">(<pos:position pos:line="63" pos:column="22"/></operator><name pos:line="63" pos:column="22">cp<pos:position pos:line="63" pos:column="24"/></name> <operator pos:line="63" pos:column="25">=<pos:position pos:line="63" pos:column="26"/></operator> <operator pos:line="63" pos:column="27">*<pos:position pos:line="63" pos:column="28"/></operator><operator pos:line="63" pos:column="28">(<pos:position pos:line="63" pos:column="29"/></operator><name pos:line="63" pos:column="29">char<pos:position pos:line="63" pos:column="33"/></name><operator pos:line="63" pos:column="33">*<pos:position pos:line="63" pos:column="34"/></operator><operator pos:line="63" pos:column="34">*<pos:position pos:line="63" pos:column="35"/></operator><operator pos:line="63" pos:column="35">)<pos:position pos:line="63" pos:column="36"/></operator><name pos:line="63" pos:column="36">parm_ptr<pos:position pos:line="63" pos:column="44"/></name><operator pos:line="63" pos:column="44">)<pos:position pos:line="63" pos:column="45"/></operator> <operator pos:line="63" pos:column="46">!=<pos:position pos:line="63" pos:column="48"/></operator> <name pos:line="63" pos:column="49">NULL<pos:position pos:line="63" pos:column="53"/></name></expr>)<pos:position pos:line="63" pos:column="54"/></condition><then pos:line="63" pos:column="54"> <block pos:line="63" pos:column="55">{
			<decl_stmt><decl><type><name pos:line="64" pos:column="25">int<pos:position pos:line="64" pos:column="28"/></name></type> <name pos:line="64" pos:column="29">len<pos:position pos:line="64" pos:column="32"/></name> <init pos:line="64" pos:column="33">= <expr><call><name pos:line="64" pos:column="35">strlen<pos:position pos:line="64" pos:column="41"/></name><argument_list pos:line="64" pos:column="41">(<argument><expr><name pos:line="64" pos:column="42">cp<pos:position pos:line="64" pos:column="44"/></name></expr></argument>)<pos:position pos:line="64" pos:column="45"/></argument_list></call></expr></init></decl>;<pos:position pos:line="64" pos:column="46"/></decl_stmt>
			<while pos:line="65" pos:column="25">while <condition pos:line="65" pos:column="31">(<expr><name pos:line="65" pos:column="32">len<pos:position pos:line="65" pos:column="35"/></name> <operator pos:line="65" pos:column="36">&gt;<pos:position pos:line="65" pos:column="40"/></operator> <literal type="number" pos:line="65" pos:column="38">1<pos:position pos:line="65" pos:column="39"/></literal> <operator pos:line="65" pos:column="40">&amp;&amp;<pos:position pos:line="65" pos:column="50"/></operator> <name><name pos:line="65" pos:column="43">cp<pos:position pos:line="65" pos:column="45"/></name><index pos:line="65" pos:column="45">[<expr><name pos:line="65" pos:column="46">len<pos:position pos:line="65" pos:column="49"/></name><operator pos:line="65" pos:column="49">-<pos:position pos:line="65" pos:column="50"/></operator><literal type="number" pos:line="65" pos:column="50">1<pos:position pos:line="65" pos:column="51"/></literal></expr>]<pos:position pos:line="65" pos:column="52"/></index></name> <operator pos:line="65" pos:column="53">==<pos:position pos:line="65" pos:column="55"/></operator> <literal type="char" pos:line="65" pos:column="56">'/'<pos:position pos:line="65" pos:column="59"/></literal></expr>)<pos:position pos:line="65" pos:column="60"/></condition> <block type="pseudo"><expr_stmt><expr><name pos:line="65" pos:column="61">len<pos:position pos:line="65" pos:column="64"/></name><operator pos:line="65" pos:column="64">--<pos:position pos:line="65" pos:column="66"/></operator></expr>;<pos:position pos:line="65" pos:column="67"/></expr_stmt></block></while>
			<expr_stmt><expr><name><name pos:line="66" pos:column="25">cp<pos:position pos:line="66" pos:column="27"/></name><index pos:line="66" pos:column="27">[<expr><name pos:line="66" pos:column="28">len<pos:position pos:line="66" pos:column="31"/></name></expr>]<pos:position pos:line="66" pos:column="32"/></index></name> <operator pos:line="66" pos:column="33">=<pos:position pos:line="66" pos:column="34"/></operator> <literal type="char" pos:line="66" pos:column="35">'\0'<pos:position pos:line="66" pos:column="39"/></literal></expr>;<pos:position pos:line="66" pos:column="40"/></expr_stmt>
		}<pos:position pos:line="67" pos:column="18"/></block></then></if>
		<break pos:line="68" pos:column="17">break;<pos:position pos:line="68" pos:column="23"/></break>

	<case pos:line="70" pos:column="9">case <expr><name pos:line="70" pos:column="14">P_STRING<pos:position pos:line="70" pos:column="22"/></name></expr>:<pos:position pos:line="70" pos:column="23"/></case>
		<expr_stmt><expr><call><name pos:line="71" pos:column="17">string_set<pos:position pos:line="71" pos:column="27"/></name><argument_list pos:line="71" pos:column="27">(<argument><expr><name pos:line="71" pos:column="28">parm_ptr<pos:position pos:line="71" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="71" pos:column="38">parmvalue<pos:position pos:line="71" pos:column="47"/></name></expr></argument>)<pos:position pos:line="71" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="49"/></expr_stmt>
		<break pos:line="72" pos:column="17">break;<pos:position pos:line="72" pos:column="23"/></break>

	<case pos:line="74" pos:column="9">case <expr><name pos:line="74" pos:column="14">P_ENUM<pos:position pos:line="74" pos:column="20"/></name></expr>:<pos:position pos:line="74" pos:column="21"/></case>
		<for pos:line="75" pos:column="17">for <control pos:line="75" pos:column="21">(<init><expr><name pos:line="75" pos:column="22">i<pos:position pos:line="75" pos:column="23"/></name><operator pos:line="75" pos:column="23">=<pos:position pos:line="75" pos:column="24"/></operator><literal type="number" pos:line="75" pos:column="24">0<pos:position pos:line="75" pos:column="25"/></literal></expr>;<pos:position pos:line="75" pos:column="26"/></init> <condition><expr><name><name pos:line="75" pos:column="27">parm_table<pos:position pos:line="75" pos:column="37"/></name><index pos:line="75" pos:column="37">[<expr><name pos:line="75" pos:column="38">parmnum<pos:position pos:line="75" pos:column="45"/></name></expr>]<pos:position pos:line="75" pos:column="46"/></index></name><operator pos:line="75" pos:column="46">.<pos:position pos:line="75" pos:column="47"/></operator><name><name pos:line="75" pos:column="47">enum_list<pos:position pos:line="75" pos:column="56"/></name><index pos:line="75" pos:column="56">[<expr><name pos:line="75" pos:column="57">i<pos:position pos:line="75" pos:column="58"/></name></expr>]<pos:position pos:line="75" pos:column="59"/></index></name><operator pos:line="75" pos:column="59">.<pos:position pos:line="75" pos:column="60"/></operator><name pos:line="75" pos:column="60">name<pos:position pos:line="75" pos:column="64"/></name></expr>;<pos:position pos:line="75" pos:column="65"/></condition> <incr><expr><name pos:line="75" pos:column="66">i<pos:position pos:line="75" pos:column="67"/></name><operator pos:line="75" pos:column="67">++<pos:position pos:line="75" pos:column="69"/></operator></expr></incr>)<pos:position pos:line="75" pos:column="70"/></control> <block pos:line="75" pos:column="71">{
			<if pos:line="76" pos:column="25">if <condition pos:line="76" pos:column="28">(<expr><call><name pos:line="76" pos:column="29">strequal<pos:position pos:line="76" pos:column="37"/></name><argument_list pos:line="76" pos:column="37">(<argument><expr><name pos:line="76" pos:column="38">parmvalue<pos:position pos:line="76" pos:column="47"/></name></expr></argument>, <argument><expr><name><name pos:line="76" pos:column="49">parm_table<pos:position pos:line="76" pos:column="59"/></name><index pos:line="76" pos:column="59">[<expr><name pos:line="76" pos:column="60">parmnum<pos:position pos:line="76" pos:column="67"/></name></expr>]<pos:position pos:line="76" pos:column="68"/></index></name><operator pos:line="76" pos:column="68">.<pos:position pos:line="76" pos:column="69"/></operator><name><name pos:line="76" pos:column="69">enum_list<pos:position pos:line="76" pos:column="78"/></name><index pos:line="76" pos:column="78">[<expr><name pos:line="76" pos:column="79">i<pos:position pos:line="76" pos:column="80"/></name></expr>]<pos:position pos:line="76" pos:column="81"/></index></name><operator pos:line="76" pos:column="81">.<pos:position pos:line="76" pos:column="82"/></operator><name pos:line="76" pos:column="82">name<pos:position pos:line="76" pos:column="86"/></name></expr></argument>)<pos:position pos:line="76" pos:column="87"/></argument_list></call></expr>)<pos:position pos:line="76" pos:column="88"/></condition><then pos:line="76" pos:column="88"> <block pos:line="76" pos:column="89">{
				<expr_stmt><expr><operator pos:line="77" pos:column="33">*<pos:position pos:line="77" pos:column="34"/></operator><operator pos:line="77" pos:column="34">(<pos:position pos:line="77" pos:column="35"/></operator><name pos:line="77" pos:column="35">int<pos:position pos:line="77" pos:column="38"/></name> <operator pos:line="77" pos:column="39">*<pos:position pos:line="77" pos:column="40"/></operator><operator pos:line="77" pos:column="40">)<pos:position pos:line="77" pos:column="41"/></operator><name pos:line="77" pos:column="41">parm_ptr<pos:position pos:line="77" pos:column="49"/></name> <operator pos:line="77" pos:column="50">=<pos:position pos:line="77" pos:column="51"/></operator> <name><name pos:line="77" pos:column="52">parm_table<pos:position pos:line="77" pos:column="62"/></name><index pos:line="77" pos:column="62">[<expr><name pos:line="77" pos:column="63">parmnum<pos:position pos:line="77" pos:column="70"/></name></expr>]<pos:position pos:line="77" pos:column="71"/></index></name><operator pos:line="77" pos:column="71">.<pos:position pos:line="77" pos:column="72"/></operator><name><name pos:line="77" pos:column="72">enum_list<pos:position pos:line="77" pos:column="81"/></name><index pos:line="77" pos:column="81">[<expr><name pos:line="77" pos:column="82">i<pos:position pos:line="77" pos:column="83"/></name></expr>]<pos:position pos:line="77" pos:column="84"/></index></name><operator pos:line="77" pos:column="84">.<pos:position pos:line="77" pos:column="85"/></operator><name pos:line="77" pos:column="85">value<pos:position pos:line="77" pos:column="90"/></name></expr>;<pos:position pos:line="77" pos:column="91"/></expr_stmt>
				<break pos:line="78" pos:column="33">break;<pos:position pos:line="78" pos:column="39"/></break>
			}<pos:position pos:line="79" pos:column="26"/></block></then></if>
		}<pos:position pos:line="80" pos:column="18"/></block></for>
		<if pos:line="81" pos:column="17">if <condition pos:line="81" pos:column="20">(<expr><operator pos:line="81" pos:column="21">!<pos:position pos:line="81" pos:column="22"/></operator><name><name pos:line="81" pos:column="22">parm_table<pos:position pos:line="81" pos:column="32"/></name><index pos:line="81" pos:column="32">[<expr><name pos:line="81" pos:column="33">parmnum<pos:position pos:line="81" pos:column="40"/></name></expr>]<pos:position pos:line="81" pos:column="41"/></index></name><operator pos:line="81" pos:column="41">.<pos:position pos:line="81" pos:column="42"/></operator><name><name pos:line="81" pos:column="42">enum_list<pos:position pos:line="81" pos:column="51"/></name><index pos:line="81" pos:column="51">[<expr><name pos:line="81" pos:column="52">i<pos:position pos:line="81" pos:column="53"/></name></expr>]<pos:position pos:line="81" pos:column="54"/></index></name><operator pos:line="81" pos:column="54">.<pos:position pos:line="81" pos:column="55"/></operator><name pos:line="81" pos:column="55">name<pos:position pos:line="81" pos:column="59"/></name></expr>)<pos:position pos:line="81" pos:column="60"/></condition><then pos:line="81" pos:column="60"> <block pos:line="81" pos:column="61">{
			<if pos:line="82" pos:column="25">if <condition pos:line="82" pos:column="28">(<expr><call><name pos:line="82" pos:column="29">atoi<pos:position pos:line="82" pos:column="33"/></name><argument_list pos:line="82" pos:column="33">(<argument><expr><name pos:line="82" pos:column="34">parmvalue<pos:position pos:line="82" pos:column="43"/></name></expr></argument>)<pos:position pos:line="82" pos:column="44"/></argument_list></call> <operator pos:line="82" pos:column="45">&gt;<pos:position pos:line="82" pos:column="49"/></operator> <literal type="number" pos:line="82" pos:column="47">0<pos:position pos:line="82" pos:column="48"/></literal></expr>)<pos:position pos:line="82" pos:column="49"/></condition><then pos:line="82" pos:column="49">
				<block type="pseudo"><expr_stmt><expr><operator pos:line="83" pos:column="33">*<pos:position pos:line="83" pos:column="34"/></operator><operator pos:line="83" pos:column="34">(<pos:position pos:line="83" pos:column="35"/></operator><name pos:line="83" pos:column="35">int<pos:position pos:line="83" pos:column="38"/></name> <operator pos:line="83" pos:column="39">*<pos:position pos:line="83" pos:column="40"/></operator><operator pos:line="83" pos:column="40">)<pos:position pos:line="83" pos:column="41"/></operator><name pos:line="83" pos:column="41">parm_ptr<pos:position pos:line="83" pos:column="49"/></name> <operator pos:line="83" pos:column="50">=<pos:position pos:line="83" pos:column="51"/></operator> <call><name pos:line="83" pos:column="52">atoi<pos:position pos:line="83" pos:column="56"/></name><argument_list pos:line="83" pos:column="56">(<argument><expr><name pos:line="83" pos:column="57">parmvalue<pos:position pos:line="83" pos:column="66"/></name></expr></argument>)<pos:position pos:line="83" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="68"/></expr_stmt></block></then></if>
		}<pos:position pos:line="84" pos:column="18"/></block></then></if>
		<break pos:line="85" pos:column="17">break;<pos:position pos:line="85" pos:column="23"/></break>
	}<pos:position pos:line="86" pos:column="10"/></block></switch>

	<return pos:line="88" pos:column="9">return <expr><name pos:line="88" pos:column="16">True<pos:position pos:line="88" pos:column="20"/></name></expr>;<pos:position pos:line="88" pos:column="21"/></return>
}<pos:position pos:line="89" pos:column="2"/></block></function></unit>
