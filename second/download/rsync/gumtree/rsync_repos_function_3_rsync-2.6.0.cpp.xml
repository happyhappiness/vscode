<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_3_rsync-2.6.0.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">hash_search<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name pos:line="1" pos:column="25">int<pos:position pos:line="1" pos:column="28"/></name></type> <name pos:line="1" pos:column="29">f<pos:position pos:line="1" pos:column="30"/></name></decl></parameter>,<parameter><decl><type><name><name pos:line="1" pos:column="31">struct<pos:position pos:line="1" pos:column="37"/></name> <name pos:line="1" pos:column="38">sum_struct<pos:position pos:line="1" pos:column="48"/></name></name> <modifier pos:line="1" pos:column="49">*<pos:position pos:line="1" pos:column="50"/></modifier></type><name pos:line="1" pos:column="50">s<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>,
			<parameter><decl><type><name><name pos:line="2" pos:column="25">struct<pos:position pos:line="2" pos:column="31"/></name> <name pos:line="2" pos:column="32">map_struct<pos:position pos:line="2" pos:column="42"/></name></name> <modifier pos:line="2" pos:column="43">*<pos:position pos:line="2" pos:column="44"/></modifier></type><name pos:line="2" pos:column="44">buf<pos:position pos:line="2" pos:column="47"/></name></decl></parameter>,<parameter><decl><type><name pos:line="2" pos:column="48">OFF_T<pos:position pos:line="2" pos:column="53"/></name></type> <name pos:line="2" pos:column="54">len<pos:position pos:line="2" pos:column="57"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="58"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">OFF_T<pos:position pos:line="4" pos:column="14"/></name></type> <name pos:line="4" pos:column="15">offset<pos:position pos:line="4" pos:column="21"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="23">end<pos:position pos:line="4" pos:column="26"/></name></decl>;<pos:position pos:line="4" pos:column="27"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">j<pos:position pos:line="5" pos:column="14"/></name></decl>,<decl><type ref="prev"/><name pos:line="5" pos:column="15">k<pos:position pos:line="5" pos:column="16"/></name></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="18">last_i<pos:position pos:line="5" pos:column="24"/></name></decl>;<pos:position pos:line="5" pos:column="25"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">char<pos:position pos:line="6" pos:column="13"/></name></type> <name><name pos:line="6" pos:column="14">sum2<pos:position pos:line="6" pos:column="18"/></name><index pos:line="6" pos:column="18">[<expr><name pos:line="6" pos:column="19">SUM_LENGTH<pos:position pos:line="6" pos:column="29"/></name></expr>]<pos:position pos:line="6" pos:column="30"/></index></name></decl>;<pos:position pos:line="6" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">uint32<pos:position pos:line="7" pos:column="15"/></name></type> <name pos:line="7" pos:column="16">s1<pos:position pos:line="7" pos:column="18"/></name></decl>, <decl><type ref="prev"/><name pos:line="7" pos:column="20">s2<pos:position pos:line="7" pos:column="22"/></name></decl>, <decl><type ref="prev"/><name pos:line="7" pos:column="24">sum<pos:position pos:line="7" pos:column="27"/></name></decl>;<pos:position pos:line="7" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">schar<pos:position pos:line="8" pos:column="14"/></name> <modifier pos:line="8" pos:column="15">*<pos:position pos:line="8" pos:column="16"/></modifier></type><name pos:line="8" pos:column="16">map<pos:position pos:line="8" pos:column="19"/></name></decl>;<pos:position pos:line="8" pos:column="20"/></decl_stmt>

	<comment type="block" pos:line="10" pos:column="9">/* last_i is used to encourage adjacent matches, allowing the RLL coding of the
	   output to work more efficiently */</comment>
	<expr_stmt><expr><name pos:line="12" pos:column="9">last_i<pos:position pos:line="12" pos:column="15"/></name> <operator pos:line="12" pos:column="16">=<pos:position pos:line="12" pos:column="17"/></operator> <operator pos:line="12" pos:column="18">-<pos:position pos:line="12" pos:column="19"/></operator><literal type="number" pos:line="12" pos:column="19">1<pos:position pos:line="12" pos:column="20"/></literal></expr>;<pos:position pos:line="12" pos:column="21"/></expr_stmt>

	<if pos:line="14" pos:column="9">if <condition pos:line="14" pos:column="12">(<expr><name pos:line="14" pos:column="13">verbose<pos:position pos:line="14" pos:column="20"/></name> <operator pos:line="14" pos:column="21">&gt;<pos:position pos:line="14" pos:column="25"/></operator> <literal type="number" pos:line="14" pos:column="23">2<pos:position pos:line="14" pos:column="24"/></literal></expr>)<pos:position pos:line="14" pos:column="25"/></condition><then pos:line="14" pos:column="25">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="15" pos:column="17">rprintf<pos:position pos:line="15" pos:column="24"/></name><argument_list pos:line="15" pos:column="24">(<argument><expr><name pos:line="15" pos:column="25">FINFO<pos:position pos:line="15" pos:column="30"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="15" pos:column="31">"hash search b=%ld len=%.0f\n"<pos:position pos:line="15" pos:column="61"/></literal></expr></argument>,
			<argument><expr><operator pos:line="16" pos:column="25">(<pos:position pos:line="16" pos:column="26"/></operator><name pos:line="16" pos:column="26">long<pos:position pos:line="16" pos:column="30"/></name><operator pos:line="16" pos:column="30">)<pos:position pos:line="16" pos:column="31"/></operator> <name><name pos:line="16" pos:column="32">s<pos:position pos:line="16" pos:column="33"/></name><operator pos:line="16" pos:column="33">-&gt;<pos:position pos:line="16" pos:column="38"/></operator><name pos:line="16" pos:column="35">blength<pos:position pos:line="16" pos:column="42"/></name></name></expr></argument>, <argument><expr><operator pos:line="16" pos:column="44">(<pos:position pos:line="16" pos:column="45"/></operator><name pos:line="16" pos:column="45">double<pos:position pos:line="16" pos:column="51"/></name><operator pos:line="16" pos:column="51">)<pos:position pos:line="16" pos:column="52"/></operator><name pos:line="16" pos:column="52">len<pos:position pos:line="16" pos:column="55"/></name></expr></argument>)<pos:position pos:line="16" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="57"/></expr_stmt></block></then></if>

	<expr_stmt><expr><name pos:line="18" pos:column="9">k<pos:position pos:line="18" pos:column="10"/></name> <operator pos:line="18" pos:column="11">=<pos:position pos:line="18" pos:column="12"/></operator> <call><name pos:line="18" pos:column="13">MIN<pos:position pos:line="18" pos:column="16"/></name><argument_list pos:line="18" pos:column="16">(<argument><expr><name pos:line="18" pos:column="17">len<pos:position pos:line="18" pos:column="20"/></name></expr></argument>, <argument><expr><operator pos:line="18" pos:column="22">(<pos:position pos:line="18" pos:column="23"/></operator><name pos:line="18" pos:column="23">OFF_T<pos:position pos:line="18" pos:column="28"/></name><operator pos:line="18" pos:column="28">)<pos:position pos:line="18" pos:column="29"/></operator><name><name pos:line="18" pos:column="29">s<pos:position pos:line="18" pos:column="30"/></name><operator pos:line="18" pos:column="30">-&gt;<pos:position pos:line="18" pos:column="35"/></operator><name pos:line="18" pos:column="32">blength<pos:position pos:line="18" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="18" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="41"/></expr_stmt>

	<expr_stmt><expr><name pos:line="20" pos:column="9">map<pos:position pos:line="20" pos:column="12"/></name> <operator pos:line="20" pos:column="13">=<pos:position pos:line="20" pos:column="14"/></operator> <operator pos:line="20" pos:column="15">(<pos:position pos:line="20" pos:column="16"/></operator><name pos:line="20" pos:column="16">schar<pos:position pos:line="20" pos:column="21"/></name> <operator pos:line="20" pos:column="22">*<pos:position pos:line="20" pos:column="23"/></operator><operator pos:line="20" pos:column="23">)<pos:position pos:line="20" pos:column="24"/></operator><call><name pos:line="20" pos:column="24">map_ptr<pos:position pos:line="20" pos:column="31"/></name><argument_list pos:line="20" pos:column="31">(<argument><expr><name pos:line="20" pos:column="32">buf<pos:position pos:line="20" pos:column="35"/></name></expr></argument>,<argument><expr><literal type="number" pos:line="20" pos:column="36">0<pos:position pos:line="20" pos:column="37"/></literal></expr></argument>,<argument><expr><name pos:line="20" pos:column="38">k<pos:position pos:line="20" pos:column="39"/></name></expr></argument>)<pos:position pos:line="20" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="41"/></expr_stmt>

	<expr_stmt><expr><name pos:line="22" pos:column="9">sum<pos:position pos:line="22" pos:column="12"/></name> <operator pos:line="22" pos:column="13">=<pos:position pos:line="22" pos:column="14"/></operator> <call><name pos:line="22" pos:column="15">get_checksum1<pos:position pos:line="22" pos:column="28"/></name><argument_list pos:line="22" pos:column="28">(<argument><expr><operator pos:line="22" pos:column="29">(<pos:position pos:line="22" pos:column="30"/></operator><name pos:line="22" pos:column="30">char<pos:position pos:line="22" pos:column="34"/></name> <operator pos:line="22" pos:column="35">*<pos:position pos:line="22" pos:column="36"/></operator><operator pos:line="22" pos:column="36">)<pos:position pos:line="22" pos:column="37"/></operator><name pos:line="22" pos:column="37">map<pos:position pos:line="22" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="42">k<pos:position pos:line="22" pos:column="43"/></name></expr></argument>)<pos:position pos:line="22" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="45"/></expr_stmt>
	<expr_stmt><expr><name pos:line="23" pos:column="9">s1<pos:position pos:line="23" pos:column="11"/></name> <operator pos:line="23" pos:column="12">=<pos:position pos:line="23" pos:column="13"/></operator> <name pos:line="23" pos:column="14">sum<pos:position pos:line="23" pos:column="17"/></name> <operator pos:line="23" pos:column="18">&amp;<pos:position pos:line="23" pos:column="23"/></operator> <literal type="number" pos:line="23" pos:column="20">0xFFFF<pos:position pos:line="23" pos:column="26"/></literal></expr>;<pos:position pos:line="23" pos:column="27"/></expr_stmt>
	<expr_stmt><expr><name pos:line="24" pos:column="9">s2<pos:position pos:line="24" pos:column="11"/></name> <operator pos:line="24" pos:column="12">=<pos:position pos:line="24" pos:column="13"/></operator> <name pos:line="24" pos:column="14">sum<pos:position pos:line="24" pos:column="17"/></name> <operator pos:line="24" pos:column="18">&gt;&gt;<pos:position pos:line="24" pos:column="23"/></operator> <literal type="number" pos:line="24" pos:column="21">16<pos:position pos:line="24" pos:column="23"/></literal></expr>;<pos:position pos:line="24" pos:column="24"/></expr_stmt>
	<if pos:line="25" pos:column="9">if <condition pos:line="25" pos:column="12">(<expr><name pos:line="25" pos:column="13">verbose<pos:position pos:line="25" pos:column="20"/></name> <operator pos:line="25" pos:column="21">&gt;<pos:position pos:line="25" pos:column="25"/></operator> <literal type="number" pos:line="25" pos:column="23">3<pos:position pos:line="25" pos:column="24"/></literal></expr>)<pos:position pos:line="25" pos:column="25"/></condition><then pos:line="25" pos:column="25">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="26" pos:column="17">rprintf<pos:position pos:line="26" pos:column="24"/></name><argument_list pos:line="26" pos:column="24">(<argument><expr><name pos:line="26" pos:column="25">FINFO<pos:position pos:line="26" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="26" pos:column="32">"sum=%.8x k=%d\n"<pos:position pos:line="26" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="26" pos:column="51">sum<pos:position pos:line="26" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="56">k<pos:position pos:line="26" pos:column="57"/></name></expr></argument>)<pos:position pos:line="26" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="59"/></expr_stmt></block></then></if>

	<expr_stmt><expr><name pos:line="28" pos:column="9">offset<pos:position pos:line="28" pos:column="15"/></name> <operator pos:line="28" pos:column="16">=<pos:position pos:line="28" pos:column="17"/></operator> <literal type="number" pos:line="28" pos:column="18">0<pos:position pos:line="28" pos:column="19"/></literal></expr>;<pos:position pos:line="28" pos:column="20"/></expr_stmt>

	<expr_stmt><expr><name pos:line="30" pos:column="9">end<pos:position pos:line="30" pos:column="12"/></name> <operator pos:line="30" pos:column="13">=<pos:position pos:line="30" pos:column="14"/></operator> <name pos:line="30" pos:column="15">len<pos:position pos:line="30" pos:column="18"/></name> <operator pos:line="30" pos:column="19">+<pos:position pos:line="30" pos:column="20"/></operator> <literal type="number" pos:line="30" pos:column="21">1<pos:position pos:line="30" pos:column="22"/></literal> <operator pos:line="30" pos:column="23">-<pos:position pos:line="30" pos:column="24"/></operator> <name><name pos:line="30" pos:column="25">s<pos:position pos:line="30" pos:column="26"/></name><operator pos:line="30" pos:column="26">-&gt;<pos:position pos:line="30" pos:column="31"/></operator><name pos:line="30" pos:column="28">sums<pos:position pos:line="30" pos:column="32"/></name><index pos:line="30" pos:column="32">[<expr><name><name pos:line="30" pos:column="33">s<pos:position pos:line="30" pos:column="34"/></name><operator pos:line="30" pos:column="34">-&gt;<pos:position pos:line="30" pos:column="39"/></operator><name pos:line="30" pos:column="36">count<pos:position pos:line="30" pos:column="41"/></name></name><operator pos:line="30" pos:column="41">-<pos:position pos:line="30" pos:column="42"/></operator><literal type="number" pos:line="30" pos:column="42">1<pos:position pos:line="30" pos:column="43"/></literal></expr>]<pos:position pos:line="30" pos:column="44"/></index></name><operator pos:line="30" pos:column="44">.<pos:position pos:line="30" pos:column="45"/></operator><name pos:line="30" pos:column="45">len<pos:position pos:line="30" pos:column="48"/></name></expr>;<pos:position pos:line="30" pos:column="49"/></expr_stmt>

	<if pos:line="32" pos:column="9">if <condition pos:line="32" pos:column="12">(<expr><name pos:line="32" pos:column="13">verbose<pos:position pos:line="32" pos:column="20"/></name> <operator pos:line="32" pos:column="21">&gt;<pos:position pos:line="32" pos:column="25"/></operator> <literal type="number" pos:line="32" pos:column="23">3<pos:position pos:line="32" pos:column="24"/></literal></expr>)<pos:position pos:line="32" pos:column="25"/></condition><then pos:line="32" pos:column="25">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="33" pos:column="17">rprintf<pos:position pos:line="33" pos:column="24"/></name><argument_list pos:line="33" pos:column="24">(<argument><expr><name pos:line="33" pos:column="25">FINFO<pos:position pos:line="33" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="33" pos:column="32">"hash search s-&gt;blength=%ld len=%.0f count=%ld\n"<pos:position pos:line="33" pos:column="84"/></literal></expr></argument>,
			<argument><expr><operator pos:line="34" pos:column="25">(<pos:position pos:line="34" pos:column="26"/></operator><name pos:line="34" pos:column="26">long<pos:position pos:line="34" pos:column="30"/></name><operator pos:line="34" pos:column="30">)<pos:position pos:line="34" pos:column="31"/></operator> <name><name pos:line="34" pos:column="32">s<pos:position pos:line="34" pos:column="33"/></name><operator pos:line="34" pos:column="33">-&gt;<pos:position pos:line="34" pos:column="38"/></operator><name pos:line="34" pos:column="35">blength<pos:position pos:line="34" pos:column="42"/></name></name></expr></argument>, <argument><expr><operator pos:line="34" pos:column="44">(<pos:position pos:line="34" pos:column="45"/></operator><name pos:line="34" pos:column="45">double<pos:position pos:line="34" pos:column="51"/></name><operator pos:line="34" pos:column="51">)<pos:position pos:line="34" pos:column="52"/></operator> <name pos:line="34" pos:column="53">len<pos:position pos:line="34" pos:column="56"/></name></expr></argument>, <argument><expr><operator pos:line="34" pos:column="58">(<pos:position pos:line="34" pos:column="59"/></operator><name pos:line="34" pos:column="59">long<pos:position pos:line="34" pos:column="63"/></name><operator pos:line="34" pos:column="63">)<pos:position pos:line="34" pos:column="64"/></operator> <name><name pos:line="34" pos:column="65">s<pos:position pos:line="34" pos:column="66"/></name><operator pos:line="34" pos:column="66">-&gt;<pos:position pos:line="34" pos:column="71"/></operator><name pos:line="34" pos:column="68">count<pos:position pos:line="34" pos:column="73"/></name></name></expr></argument>)<pos:position pos:line="34" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="75"/></expr_stmt></block></then></if>

	<do pos:line="36" pos:column="9">do <block pos:line="36" pos:column="12">{
		<decl_stmt><decl><type><name pos:line="37" pos:column="17">tag<pos:position pos:line="37" pos:column="20"/></name></type> <name pos:line="37" pos:column="21">t<pos:position pos:line="37" pos:column="22"/></name> <init pos:line="37" pos:column="23">= <expr><call><name pos:line="37" pos:column="25">gettag2<pos:position pos:line="37" pos:column="32"/></name><argument_list pos:line="37" pos:column="32">(<argument><expr><name pos:line="37" pos:column="33">s1<pos:position pos:line="37" pos:column="35"/></name></expr></argument>,<argument><expr><name pos:line="37" pos:column="36">s2<pos:position pos:line="37" pos:column="38"/></name></expr></argument>)<pos:position pos:line="37" pos:column="39"/></argument_list></call></expr></init></decl>;<pos:position pos:line="37" pos:column="40"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="38" pos:column="17">int<pos:position pos:line="38" pos:column="20"/></name></type> <name pos:line="38" pos:column="21">done_csum2<pos:position pos:line="38" pos:column="31"/></name> <init pos:line="38" pos:column="32">= <expr><literal type="number" pos:line="38" pos:column="34">0<pos:position pos:line="38" pos:column="35"/></literal></expr></init></decl>;<pos:position pos:line="38" pos:column="36"/></decl_stmt>

		<expr_stmt><expr><name pos:line="40" pos:column="17">j<pos:position pos:line="40" pos:column="18"/></name> <operator pos:line="40" pos:column="19">=<pos:position pos:line="40" pos:column="20"/></operator> <name><name pos:line="40" pos:column="21">tag_table<pos:position pos:line="40" pos:column="30"/></name><index pos:line="40" pos:column="30">[<expr><name pos:line="40" pos:column="31">t<pos:position pos:line="40" pos:column="32"/></name></expr>]<pos:position pos:line="40" pos:column="33"/></index></name></expr>;<pos:position pos:line="40" pos:column="34"/></expr_stmt>
		<if pos:line="41" pos:column="17">if <condition pos:line="41" pos:column="20">(<expr><name pos:line="41" pos:column="21">verbose<pos:position pos:line="41" pos:column="28"/></name> <operator pos:line="41" pos:column="29">&gt;<pos:position pos:line="41" pos:column="33"/></operator> <literal type="number" pos:line="41" pos:column="31">4<pos:position pos:line="41" pos:column="32"/></literal></expr>)<pos:position pos:line="41" pos:column="33"/></condition><then pos:line="41" pos:column="33">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="42" pos:column="25">rprintf<pos:position pos:line="42" pos:column="32"/></name><argument_list pos:line="42" pos:column="32">(<argument><expr><name pos:line="42" pos:column="33">FINFO<pos:position pos:line="42" pos:column="38"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="42" pos:column="39">"offset=%.0f sum=%08x\n"<pos:position pos:line="42" pos:column="63"/></literal></expr></argument>,<argument><expr><operator pos:line="42" pos:column="64">(<pos:position pos:line="42" pos:column="65"/></operator><name pos:line="42" pos:column="65">double<pos:position pos:line="42" pos:column="71"/></name><operator pos:line="42" pos:column="71">)<pos:position pos:line="42" pos:column="72"/></operator><name pos:line="42" pos:column="72">offset<pos:position pos:line="42" pos:column="78"/></name></expr></argument>,<argument><expr><name pos:line="42" pos:column="79">sum<pos:position pos:line="42" pos:column="82"/></name></expr></argument>)<pos:position pos:line="42" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="84"/></expr_stmt></block></then></if>

		<if pos:line="44" pos:column="17">if <condition pos:line="44" pos:column="20">(<expr><name pos:line="44" pos:column="21">j<pos:position pos:line="44" pos:column="22"/></name> <operator pos:line="44" pos:column="23">==<pos:position pos:line="44" pos:column="25"/></operator> <name pos:line="44" pos:column="26">NULL_TAG<pos:position pos:line="44" pos:column="34"/></name></expr>)<pos:position pos:line="44" pos:column="35"/></condition><then pos:line="44" pos:column="35"> <block pos:line="44" pos:column="36">{
			<goto pos:line="45" pos:column="25">goto <name pos:line="45" pos:column="30">null_tag<pos:position pos:line="45" pos:column="38"/></name>;<pos:position pos:line="45" pos:column="39"/></goto>
		}<pos:position pos:line="46" pos:column="18"/></block></then></if>

		<expr_stmt><expr><name pos:line="48" pos:column="17">sum<pos:position pos:line="48" pos:column="20"/></name> <operator pos:line="48" pos:column="21">=<pos:position pos:line="48" pos:column="22"/></operator> <operator pos:line="48" pos:column="23">(<pos:position pos:line="48" pos:column="24"/></operator><name pos:line="48" pos:column="24">s1<pos:position pos:line="48" pos:column="26"/></name> <operator pos:line="48" pos:column="27">&amp;<pos:position pos:line="48" pos:column="32"/></operator> <literal type="number" pos:line="48" pos:column="29">0xffff<pos:position pos:line="48" pos:column="35"/></literal><operator pos:line="48" pos:column="35">)<pos:position pos:line="48" pos:column="36"/></operator> <operator pos:line="48" pos:column="37">|<pos:position pos:line="48" pos:column="38"/></operator> <operator pos:line="48" pos:column="39">(<pos:position pos:line="48" pos:column="40"/></operator><name pos:line="48" pos:column="40">s2<pos:position pos:line="48" pos:column="42"/></name> <operator pos:line="48" pos:column="43">&lt;&lt;<pos:position pos:line="48" pos:column="51"/></operator> <literal type="number" pos:line="48" pos:column="46">16<pos:position pos:line="48" pos:column="48"/></literal><operator pos:line="48" pos:column="48">)<pos:position pos:line="48" pos:column="49"/></operator></expr>;<pos:position pos:line="48" pos:column="50"/></expr_stmt>
		<expr_stmt><expr><name pos:line="49" pos:column="17">tag_hits<pos:position pos:line="49" pos:column="25"/></name><operator pos:line="49" pos:column="25">++<pos:position pos:line="49" pos:column="27"/></operator></expr>;<pos:position pos:line="49" pos:column="28"/></expr_stmt>
		<for pos:line="50" pos:column="17">for <control pos:line="50" pos:column="21">(<init pos:line="50" pos:column="22">;<pos:position pos:line="50" pos:column="23"/></init> <condition><expr><name pos:line="50" pos:column="24">j<pos:position pos:line="50" pos:column="25"/></name> <operator pos:line="50" pos:column="26">&lt;<pos:position pos:line="50" pos:column="30"/></operator> <operator pos:line="50" pos:column="28">(<pos:position pos:line="50" pos:column="29"/></operator><name pos:line="50" pos:column="29">int<pos:position pos:line="50" pos:column="32"/></name><operator pos:line="50" pos:column="32">)<pos:position pos:line="50" pos:column="33"/></operator> <name><name pos:line="50" pos:column="34">s<pos:position pos:line="50" pos:column="35"/></name><operator pos:line="50" pos:column="35">-&gt;<pos:position pos:line="50" pos:column="40"/></operator><name pos:line="50" pos:column="37">count<pos:position pos:line="50" pos:column="42"/></name></name> <operator pos:line="50" pos:column="43">&amp;&amp;<pos:position pos:line="50" pos:column="53"/></operator> <name><name pos:line="50" pos:column="46">targets<pos:position pos:line="50" pos:column="53"/></name><index pos:line="50" pos:column="53">[<expr><name pos:line="50" pos:column="54">j<pos:position pos:line="50" pos:column="55"/></name></expr>]<pos:position pos:line="50" pos:column="56"/></index></name><operator pos:line="50" pos:column="56">.<pos:position pos:line="50" pos:column="57"/></operator><name pos:line="50" pos:column="57">t<pos:position pos:line="50" pos:column="58"/></name> <operator pos:line="50" pos:column="59">==<pos:position pos:line="50" pos:column="61"/></operator> <name pos:line="50" pos:column="62">t<pos:position pos:line="50" pos:column="63"/></name></expr>;<pos:position pos:line="50" pos:column="64"/></condition> <incr><expr><name pos:line="50" pos:column="65">j<pos:position pos:line="50" pos:column="66"/></name><operator pos:line="50" pos:column="66">++<pos:position pos:line="50" pos:column="68"/></operator></expr></incr>)<pos:position pos:line="50" pos:column="69"/></control> <block pos:line="50" pos:column="70">{
			<decl_stmt><decl><type><name pos:line="51" pos:column="25">int<pos:position pos:line="51" pos:column="28"/></name></type> <name pos:line="51" pos:column="29">l<pos:position pos:line="51" pos:column="30"/></name></decl>, <decl><type ref="prev"/><name pos:line="51" pos:column="32">i<pos:position pos:line="51" pos:column="33"/></name> <init pos:line="51" pos:column="34">= <expr><name><name pos:line="51" pos:column="36">targets<pos:position pos:line="51" pos:column="43"/></name><index pos:line="51" pos:column="43">[<expr><name pos:line="51" pos:column="44">j<pos:position pos:line="51" pos:column="45"/></name></expr>]<pos:position pos:line="51" pos:column="46"/></index></name><operator pos:line="51" pos:column="46">.<pos:position pos:line="51" pos:column="47"/></operator><name pos:line="51" pos:column="47">i<pos:position pos:line="51" pos:column="48"/></name></expr></init></decl>;<pos:position pos:line="51" pos:column="49"/></decl_stmt>

			<if pos:line="53" pos:column="25">if <condition pos:line="53" pos:column="28">(<expr><name pos:line="53" pos:column="29">sum<pos:position pos:line="53" pos:column="32"/></name> <operator pos:line="53" pos:column="33">!=<pos:position pos:line="53" pos:column="35"/></operator> <name><name pos:line="53" pos:column="36">s<pos:position pos:line="53" pos:column="37"/></name><operator pos:line="53" pos:column="37">-&gt;<pos:position pos:line="53" pos:column="42"/></operator><name pos:line="53" pos:column="39">sums<pos:position pos:line="53" pos:column="43"/></name><index pos:line="53" pos:column="43">[<expr><name pos:line="53" pos:column="44">i<pos:position pos:line="53" pos:column="45"/></name></expr>]<pos:position pos:line="53" pos:column="46"/></index></name><operator pos:line="53" pos:column="46">.<pos:position pos:line="53" pos:column="47"/></operator><name pos:line="53" pos:column="47">sum1<pos:position pos:line="53" pos:column="51"/></name></expr>)<pos:position pos:line="53" pos:column="52"/></condition><then pos:line="53" pos:column="52"> <block type="pseudo"><continue pos:line="53" pos:column="53">continue;<pos:position pos:line="53" pos:column="62"/></continue></block></then></if>

			<comment type="block" pos:line="55" pos:column="25">/* also make sure the two blocks are the same length */</comment>
			<expr_stmt><expr><name pos:line="56" pos:column="25">l<pos:position pos:line="56" pos:column="26"/></name> <operator pos:line="56" pos:column="27">=<pos:position pos:line="56" pos:column="28"/></operator> <call><name pos:line="56" pos:column="29">MIN<pos:position pos:line="56" pos:column="32"/></name><argument_list pos:line="56" pos:column="32">(<argument><expr><operator pos:line="56" pos:column="33">(<pos:position pos:line="56" pos:column="34"/></operator><name pos:line="56" pos:column="34">OFF_T<pos:position pos:line="56" pos:column="39"/></name><operator pos:line="56" pos:column="39">)<pos:position pos:line="56" pos:column="40"/></operator><name><name pos:line="56" pos:column="40">s<pos:position pos:line="56" pos:column="41"/></name><operator pos:line="56" pos:column="41">-&gt;<pos:position pos:line="56" pos:column="46"/></operator><name pos:line="56" pos:column="43">blength<pos:position pos:line="56" pos:column="50"/></name></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="52">len<pos:position pos:line="56" pos:column="55"/></name><operator pos:line="56" pos:column="55">-<pos:position pos:line="56" pos:column="56"/></operator><name pos:line="56" pos:column="56">offset<pos:position pos:line="56" pos:column="62"/></name></expr></argument>)<pos:position pos:line="56" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="64"/></expr_stmt>
			<if pos:line="57" pos:column="25">if <condition pos:line="57" pos:column="28">(<expr><name pos:line="57" pos:column="29">l<pos:position pos:line="57" pos:column="30"/></name> <operator pos:line="57" pos:column="31">!=<pos:position pos:line="57" pos:column="33"/></operator> <name><name pos:line="57" pos:column="34">s<pos:position pos:line="57" pos:column="35"/></name><operator pos:line="57" pos:column="35">-&gt;<pos:position pos:line="57" pos:column="40"/></operator><name pos:line="57" pos:column="37">sums<pos:position pos:line="57" pos:column="41"/></name><index pos:line="57" pos:column="41">[<expr><name pos:line="57" pos:column="42">i<pos:position pos:line="57" pos:column="43"/></name></expr>]<pos:position pos:line="57" pos:column="44"/></index></name><operator pos:line="57" pos:column="44">.<pos:position pos:line="57" pos:column="45"/></operator><name pos:line="57" pos:column="45">len<pos:position pos:line="57" pos:column="48"/></name></expr>)<pos:position pos:line="57" pos:column="49"/></condition><then pos:line="57" pos:column="49"> <block type="pseudo"><continue pos:line="57" pos:column="50">continue;<pos:position pos:line="57" pos:column="59"/></continue></block></then></if>

			<if pos:line="59" pos:column="25">if <condition pos:line="59" pos:column="28">(<expr><name pos:line="59" pos:column="29">verbose<pos:position pos:line="59" pos:column="36"/></name> <operator pos:line="59" pos:column="37">&gt;<pos:position pos:line="59" pos:column="41"/></operator> <literal type="number" pos:line="59" pos:column="39">3<pos:position pos:line="59" pos:column="40"/></literal></expr>)<pos:position pos:line="59" pos:column="41"/></condition><then pos:line="59" pos:column="41">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="60" pos:column="33">rprintf<pos:position pos:line="60" pos:column="40"/></name><argument_list pos:line="60" pos:column="40">(<argument><expr><name pos:line="60" pos:column="41">FINFO<pos:position pos:line="60" pos:column="46"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="60" pos:column="47">"potential match at %.0f target=%d %d sum=%08x\n"<pos:position pos:line="60" pos:column="96"/></literal></expr></argument>,
					<argument><expr><operator pos:line="61" pos:column="41">(<pos:position pos:line="61" pos:column="42"/></operator><name pos:line="61" pos:column="42">double<pos:position pos:line="61" pos:column="48"/></name><operator pos:line="61" pos:column="48">)<pos:position pos:line="61" pos:column="49"/></operator><name pos:line="61" pos:column="49">offset<pos:position pos:line="61" pos:column="55"/></name></expr></argument>,<argument><expr><name pos:line="61" pos:column="56">j<pos:position pos:line="61" pos:column="57"/></name></expr></argument>,<argument><expr><name pos:line="61" pos:column="58">i<pos:position pos:line="61" pos:column="59"/></name></expr></argument>,<argument><expr><name pos:line="61" pos:column="60">sum<pos:position pos:line="61" pos:column="63"/></name></expr></argument>)<pos:position pos:line="61" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="65"/></expr_stmt></block></then></if>

			<if pos:line="63" pos:column="25">if <condition pos:line="63" pos:column="28">(<expr><operator pos:line="63" pos:column="29">!<pos:position pos:line="63" pos:column="30"/></operator><name pos:line="63" pos:column="30">done_csum2<pos:position pos:line="63" pos:column="40"/></name></expr>)<pos:position pos:line="63" pos:column="41"/></condition><then pos:line="63" pos:column="41"> <block pos:line="63" pos:column="42">{
				<expr_stmt><expr><name pos:line="64" pos:column="33">map<pos:position pos:line="64" pos:column="36"/></name> <operator pos:line="64" pos:column="37">=<pos:position pos:line="64" pos:column="38"/></operator> <operator pos:line="64" pos:column="39">(<pos:position pos:line="64" pos:column="40"/></operator><name pos:line="64" pos:column="40">schar<pos:position pos:line="64" pos:column="45"/></name> <operator pos:line="64" pos:column="46">*<pos:position pos:line="64" pos:column="47"/></operator><operator pos:line="64" pos:column="47">)<pos:position pos:line="64" pos:column="48"/></operator><call><name pos:line="64" pos:column="48">map_ptr<pos:position pos:line="64" pos:column="55"/></name><argument_list pos:line="64" pos:column="55">(<argument><expr><name pos:line="64" pos:column="56">buf<pos:position pos:line="64" pos:column="59"/></name></expr></argument>,<argument><expr><name pos:line="64" pos:column="60">offset<pos:position pos:line="64" pos:column="66"/></name></expr></argument>,<argument><expr><name pos:line="64" pos:column="67">l<pos:position pos:line="64" pos:column="68"/></name></expr></argument>)<pos:position pos:line="64" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="70"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="65" pos:column="33">get_checksum2<pos:position pos:line="65" pos:column="46"/></name><argument_list pos:line="65" pos:column="46">(<argument><expr><operator pos:line="65" pos:column="47">(<pos:position pos:line="65" pos:column="48"/></operator><name pos:line="65" pos:column="48">char<pos:position pos:line="65" pos:column="52"/></name> <operator pos:line="65" pos:column="53">*<pos:position pos:line="65" pos:column="54"/></operator><operator pos:line="65" pos:column="54">)<pos:position pos:line="65" pos:column="55"/></operator><name pos:line="65" pos:column="55">map<pos:position pos:line="65" pos:column="58"/></name></expr></argument>,<argument><expr><name pos:line="65" pos:column="59">l<pos:position pos:line="65" pos:column="60"/></name></expr></argument>,<argument><expr><name pos:line="65" pos:column="61">sum2<pos:position pos:line="65" pos:column="65"/></name></expr></argument>)<pos:position pos:line="65" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="67"/></expr_stmt>
				<expr_stmt><expr><name pos:line="66" pos:column="33">done_csum2<pos:position pos:line="66" pos:column="43"/></name> <operator pos:line="66" pos:column="44">=<pos:position pos:line="66" pos:column="45"/></operator> <literal type="number" pos:line="66" pos:column="46">1<pos:position pos:line="66" pos:column="47"/></literal></expr>;<pos:position pos:line="66" pos:column="48"/></expr_stmt>
			}<pos:position pos:line="67" pos:column="26"/></block></then></if>

			<if pos:line="69" pos:column="25">if <condition pos:line="69" pos:column="28">(<expr><call><name pos:line="69" pos:column="29">memcmp<pos:position pos:line="69" pos:column="35"/></name><argument_list pos:line="69" pos:column="35">(<argument><expr><name pos:line="69" pos:column="36">sum2<pos:position pos:line="69" pos:column="40"/></name></expr></argument>,<argument><expr><name><name pos:line="69" pos:column="41">s<pos:position pos:line="69" pos:column="42"/></name><operator pos:line="69" pos:column="42">-&gt;<pos:position pos:line="69" pos:column="47"/></operator><name pos:line="69" pos:column="44">sums<pos:position pos:line="69" pos:column="48"/></name><index pos:line="69" pos:column="48">[<expr><name pos:line="69" pos:column="49">i<pos:position pos:line="69" pos:column="50"/></name></expr>]<pos:position pos:line="69" pos:column="51"/></index></name><operator pos:line="69" pos:column="51">.<pos:position pos:line="69" pos:column="52"/></operator><name pos:line="69" pos:column="52">sum2<pos:position pos:line="69" pos:column="56"/></name></expr></argument>,<argument><expr><name><name pos:line="69" pos:column="57">s<pos:position pos:line="69" pos:column="58"/></name><operator pos:line="69" pos:column="58">-&gt;<pos:position pos:line="69" pos:column="63"/></operator><name pos:line="69" pos:column="60">s2length<pos:position pos:line="69" pos:column="68"/></name></name></expr></argument>)<pos:position pos:line="69" pos:column="69"/></argument_list></call> <operator pos:line="69" pos:column="70">!=<pos:position pos:line="69" pos:column="72"/></operator> <literal type="number" pos:line="69" pos:column="73">0<pos:position pos:line="69" pos:column="74"/></literal></expr>)<pos:position pos:line="69" pos:column="75"/></condition><then pos:line="69" pos:column="75"> <block pos:line="69" pos:column="76">{
				<expr_stmt><expr><name pos:line="70" pos:column="33">false_alarms<pos:position pos:line="70" pos:column="45"/></name><operator pos:line="70" pos:column="45">++<pos:position pos:line="70" pos:column="47"/></operator></expr>;<pos:position pos:line="70" pos:column="48"/></expr_stmt>
				<continue pos:line="71" pos:column="33">continue;<pos:position pos:line="71" pos:column="42"/></continue>
			}<pos:position pos:line="72" pos:column="26"/></block></then></if>

			<comment type="block" pos:line="74" pos:column="25">/* we've found a match, but now check to see
			 * if last_i can hint at a better match */</comment>
			<for pos:line="76" pos:column="25">for <control pos:line="76" pos:column="29">(<init><expr><name pos:line="76" pos:column="30">j<pos:position pos:line="76" pos:column="31"/></name><operator pos:line="76" pos:column="31">++<pos:position pos:line="76" pos:column="33"/></operator></expr>;<pos:position pos:line="76" pos:column="34"/></init> <condition><expr><name pos:line="76" pos:column="35">j<pos:position pos:line="76" pos:column="36"/></name> <operator pos:line="76" pos:column="37">&lt;<pos:position pos:line="76" pos:column="41"/></operator> <operator pos:line="76" pos:column="39">(<pos:position pos:line="76" pos:column="40"/></operator><name pos:line="76" pos:column="40">int<pos:position pos:line="76" pos:column="43"/></name><operator pos:line="76" pos:column="43">)<pos:position pos:line="76" pos:column="44"/></operator> <name><name pos:line="76" pos:column="45">s<pos:position pos:line="76" pos:column="46"/></name><operator pos:line="76" pos:column="46">-&gt;<pos:position pos:line="76" pos:column="51"/></operator><name pos:line="76" pos:column="48">count<pos:position pos:line="76" pos:column="53"/></name></name> <operator pos:line="76" pos:column="54">&amp;&amp;<pos:position pos:line="76" pos:column="64"/></operator> <name><name pos:line="76" pos:column="57">targets<pos:position pos:line="76" pos:column="64"/></name><index pos:line="76" pos:column="64">[<expr><name pos:line="76" pos:column="65">j<pos:position pos:line="76" pos:column="66"/></name></expr>]<pos:position pos:line="76" pos:column="67"/></index></name><operator pos:line="76" pos:column="67">.<pos:position pos:line="76" pos:column="68"/></operator><name pos:line="76" pos:column="68">t<pos:position pos:line="76" pos:column="69"/></name> <operator pos:line="76" pos:column="70">==<pos:position pos:line="76" pos:column="72"/></operator> <name pos:line="76" pos:column="73">t<pos:position pos:line="76" pos:column="74"/></name></expr>;<pos:position pos:line="76" pos:column="75"/></condition> <incr><expr><name pos:line="76" pos:column="76">j<pos:position pos:line="76" pos:column="77"/></name><operator pos:line="76" pos:column="77">++<pos:position pos:line="76" pos:column="79"/></operator></expr></incr>)<pos:position pos:line="76" pos:column="80"/></control> <block pos:line="76" pos:column="81">{
				<decl_stmt><decl><type><name pos:line="77" pos:column="33">int<pos:position pos:line="77" pos:column="36"/></name></type> <name pos:line="77" pos:column="37">i2<pos:position pos:line="77" pos:column="39"/></name> <init pos:line="77" pos:column="40">= <expr><name><name pos:line="77" pos:column="42">targets<pos:position pos:line="77" pos:column="49"/></name><index pos:line="77" pos:column="49">[<expr><name pos:line="77" pos:column="50">j<pos:position pos:line="77" pos:column="51"/></name></expr>]<pos:position pos:line="77" pos:column="52"/></index></name><operator pos:line="77" pos:column="52">.<pos:position pos:line="77" pos:column="53"/></operator><name pos:line="77" pos:column="53">i<pos:position pos:line="77" pos:column="54"/></name></expr></init></decl>;<pos:position pos:line="77" pos:column="55"/></decl_stmt>
				<if pos:line="78" pos:column="33">if <condition pos:line="78" pos:column="36">(<expr><name pos:line="78" pos:column="37">i2<pos:position pos:line="78" pos:column="39"/></name> <operator pos:line="78" pos:column="40">==<pos:position pos:line="78" pos:column="42"/></operator> <name pos:line="78" pos:column="43">last_i<pos:position pos:line="78" pos:column="49"/></name> <operator pos:line="78" pos:column="50">+<pos:position pos:line="78" pos:column="51"/></operator> <literal type="number" pos:line="78" pos:column="52">1<pos:position pos:line="78" pos:column="53"/></literal></expr>)<pos:position pos:line="78" pos:column="54"/></condition><then pos:line="78" pos:column="54"> <block pos:line="78" pos:column="55">{
					<if pos:line="79" pos:column="41">if <condition pos:line="79" pos:column="44">(<expr><name pos:line="79" pos:column="45">sum<pos:position pos:line="79" pos:column="48"/></name> <operator pos:line="79" pos:column="49">!=<pos:position pos:line="79" pos:column="51"/></operator> <name><name pos:line="79" pos:column="52">s<pos:position pos:line="79" pos:column="53"/></name><operator pos:line="79" pos:column="53">-&gt;<pos:position pos:line="79" pos:column="58"/></operator><name pos:line="79" pos:column="55">sums<pos:position pos:line="79" pos:column="59"/></name><index pos:line="79" pos:column="59">[<expr><name pos:line="79" pos:column="60">i2<pos:position pos:line="79" pos:column="62"/></name></expr>]<pos:position pos:line="79" pos:column="63"/></index></name><operator pos:line="79" pos:column="63">.<pos:position pos:line="79" pos:column="64"/></operator><name pos:line="79" pos:column="64">sum1<pos:position pos:line="79" pos:column="68"/></name></expr>)<pos:position pos:line="79" pos:column="69"/></condition><then pos:line="79" pos:column="69"> <block type="pseudo"><break pos:line="79" pos:column="70">break;<pos:position pos:line="79" pos:column="76"/></break></block></then></if>
					<if pos:line="80" pos:column="41">if <condition pos:line="80" pos:column="44">(<expr><call><name pos:line="80" pos:column="45">memcmp<pos:position pos:line="80" pos:column="51"/></name><argument_list pos:line="80" pos:column="51">(<argument><expr><name pos:line="80" pos:column="52">sum2<pos:position pos:line="80" pos:column="56"/></name></expr></argument>,<argument><expr><name><name pos:line="80" pos:column="57">s<pos:position pos:line="80" pos:column="58"/></name><operator pos:line="80" pos:column="58">-&gt;<pos:position pos:line="80" pos:column="63"/></operator><name pos:line="80" pos:column="60">sums<pos:position pos:line="80" pos:column="64"/></name><index pos:line="80" pos:column="64">[<expr><name pos:line="80" pos:column="65">i2<pos:position pos:line="80" pos:column="67"/></name></expr>]<pos:position pos:line="80" pos:column="68"/></index></name><operator pos:line="80" pos:column="68">.<pos:position pos:line="80" pos:column="69"/></operator><name pos:line="80" pos:column="69">sum2<pos:position pos:line="80" pos:column="73"/></name></expr></argument>,<argument><expr><name><name pos:line="80" pos:column="74">s<pos:position pos:line="80" pos:column="75"/></name><operator pos:line="80" pos:column="75">-&gt;<pos:position pos:line="80" pos:column="80"/></operator><name pos:line="80" pos:column="77">s2length<pos:position pos:line="80" pos:column="85"/></name></name></expr></argument>)<pos:position pos:line="80" pos:column="86"/></argument_list></call> <operator pos:line="80" pos:column="87">!=<pos:position pos:line="80" pos:column="89"/></operator> <literal type="number" pos:line="80" pos:column="90">0<pos:position pos:line="80" pos:column="91"/></literal></expr>)<pos:position pos:line="80" pos:column="92"/></condition><then pos:line="80" pos:column="92"> <block type="pseudo"><break pos:line="80" pos:column="93">break;<pos:position pos:line="80" pos:column="99"/></break></block></then></if>
					<comment type="block" pos:line="81" pos:column="41">/* we've found an adjacent match - the RLL coder
					 * will be happy */</comment>
					<expr_stmt><expr><name pos:line="83" pos:column="41">i<pos:position pos:line="83" pos:column="42"/></name> <operator pos:line="83" pos:column="43">=<pos:position pos:line="83" pos:column="44"/></operator> <name pos:line="83" pos:column="45">i2<pos:position pos:line="83" pos:column="47"/></name></expr>;<pos:position pos:line="83" pos:column="48"/></expr_stmt>
					<break pos:line="84" pos:column="41">break;<pos:position pos:line="84" pos:column="47"/></break>
				}<pos:position pos:line="85" pos:column="34"/></block></then></if>
			}<pos:position pos:line="86" pos:column="26"/></block></for>

			<expr_stmt><expr><name pos:line="88" pos:column="25">last_i<pos:position pos:line="88" pos:column="31"/></name> <operator pos:line="88" pos:column="32">=<pos:position pos:line="88" pos:column="33"/></operator> <name pos:line="88" pos:column="34">i<pos:position pos:line="88" pos:column="35"/></name></expr>;<pos:position pos:line="88" pos:column="36"/></expr_stmt>

			<expr_stmt><expr><call><name pos:line="90" pos:column="25">matched<pos:position pos:line="90" pos:column="32"/></name><argument_list pos:line="90" pos:column="32">(<argument><expr><name pos:line="90" pos:column="33">f<pos:position pos:line="90" pos:column="34"/></name></expr></argument>,<argument><expr><name pos:line="90" pos:column="35">s<pos:position pos:line="90" pos:column="36"/></name></expr></argument>,<argument><expr><name pos:line="90" pos:column="37">buf<pos:position pos:line="90" pos:column="40"/></name></expr></argument>,<argument><expr><name pos:line="90" pos:column="41">offset<pos:position pos:line="90" pos:column="47"/></name></expr></argument>,<argument><expr><name pos:line="90" pos:column="48">i<pos:position pos:line="90" pos:column="49"/></name></expr></argument>)<pos:position pos:line="90" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="51"/></expr_stmt>
			<expr_stmt><expr><name pos:line="91" pos:column="25">offset<pos:position pos:line="91" pos:column="31"/></name> <operator pos:line="91" pos:column="32">+=<pos:position pos:line="91" pos:column="34"/></operator> <name><name pos:line="91" pos:column="35">s<pos:position pos:line="91" pos:column="36"/></name><operator pos:line="91" pos:column="36">-&gt;<pos:position pos:line="91" pos:column="41"/></operator><name pos:line="91" pos:column="38">sums<pos:position pos:line="91" pos:column="42"/></name><index pos:line="91" pos:column="42">[<expr><name pos:line="91" pos:column="43">i<pos:position pos:line="91" pos:column="44"/></name></expr>]<pos:position pos:line="91" pos:column="45"/></index></name><operator pos:line="91" pos:column="45">.<pos:position pos:line="91" pos:column="46"/></operator><name pos:line="91" pos:column="46">len<pos:position pos:line="91" pos:column="49"/></name> <operator pos:line="91" pos:column="50">-<pos:position pos:line="91" pos:column="51"/></operator> <literal type="number" pos:line="91" pos:column="52">1<pos:position pos:line="91" pos:column="53"/></literal></expr>;<pos:position pos:line="91" pos:column="54"/></expr_stmt>
			<expr_stmt><expr><name pos:line="92" pos:column="25">k<pos:position pos:line="92" pos:column="26"/></name> <operator pos:line="92" pos:column="27">=<pos:position pos:line="92" pos:column="28"/></operator> <call><name pos:line="92" pos:column="29">MIN<pos:position pos:line="92" pos:column="32"/></name><argument_list pos:line="92" pos:column="32">(<argument><expr><operator pos:line="92" pos:column="33">(<pos:position pos:line="92" pos:column="34"/></operator><name pos:line="92" pos:column="34">OFF_T<pos:position pos:line="92" pos:column="39"/></name><operator pos:line="92" pos:column="39">)<pos:position pos:line="92" pos:column="40"/></operator><name><name pos:line="92" pos:column="40">s<pos:position pos:line="92" pos:column="41"/></name><operator pos:line="92" pos:column="41">-&gt;<pos:position pos:line="92" pos:column="46"/></operator><name pos:line="92" pos:column="43">blength<pos:position pos:line="92" pos:column="50"/></name></name></expr></argument>, <argument><expr><name pos:line="92" pos:column="52">len<pos:position pos:line="92" pos:column="55"/></name><operator pos:line="92" pos:column="55">-<pos:position pos:line="92" pos:column="56"/></operator><name pos:line="92" pos:column="56">offset<pos:position pos:line="92" pos:column="62"/></name></expr></argument>)<pos:position pos:line="92" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="64"/></expr_stmt>
			<expr_stmt><expr><name pos:line="93" pos:column="25">map<pos:position pos:line="93" pos:column="28"/></name> <operator pos:line="93" pos:column="29">=<pos:position pos:line="93" pos:column="30"/></operator> <operator pos:line="93" pos:column="31">(<pos:position pos:line="93" pos:column="32"/></operator><name pos:line="93" pos:column="32">schar<pos:position pos:line="93" pos:column="37"/></name> <operator pos:line="93" pos:column="38">*<pos:position pos:line="93" pos:column="39"/></operator><operator pos:line="93" pos:column="39">)<pos:position pos:line="93" pos:column="40"/></operator><call><name pos:line="93" pos:column="40">map_ptr<pos:position pos:line="93" pos:column="47"/></name><argument_list pos:line="93" pos:column="47">(<argument><expr><name pos:line="93" pos:column="48">buf<pos:position pos:line="93" pos:column="51"/></name></expr></argument>,<argument><expr><name pos:line="93" pos:column="52">offset<pos:position pos:line="93" pos:column="58"/></name></expr></argument>,<argument><expr><name pos:line="93" pos:column="59">k<pos:position pos:line="93" pos:column="60"/></name></expr></argument>)<pos:position pos:line="93" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="62"/></expr_stmt>
			<expr_stmt><expr><name pos:line="94" pos:column="25">sum<pos:position pos:line="94" pos:column="28"/></name> <operator pos:line="94" pos:column="29">=<pos:position pos:line="94" pos:column="30"/></operator> <call><name pos:line="94" pos:column="31">get_checksum1<pos:position pos:line="94" pos:column="44"/></name><argument_list pos:line="94" pos:column="44">(<argument><expr><operator pos:line="94" pos:column="45">(<pos:position pos:line="94" pos:column="46"/></operator><name pos:line="94" pos:column="46">char<pos:position pos:line="94" pos:column="50"/></name> <operator pos:line="94" pos:column="51">*<pos:position pos:line="94" pos:column="52"/></operator><operator pos:line="94" pos:column="52">)<pos:position pos:line="94" pos:column="53"/></operator><name pos:line="94" pos:column="53">map<pos:position pos:line="94" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="94" pos:column="58">k<pos:position pos:line="94" pos:column="59"/></name></expr></argument>)<pos:position pos:line="94" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="61"/></expr_stmt>
			<expr_stmt><expr><name pos:line="95" pos:column="25">s1<pos:position pos:line="95" pos:column="27"/></name> <operator pos:line="95" pos:column="28">=<pos:position pos:line="95" pos:column="29"/></operator> <name pos:line="95" pos:column="30">sum<pos:position pos:line="95" pos:column="33"/></name> <operator pos:line="95" pos:column="34">&amp;<pos:position pos:line="95" pos:column="39"/></operator> <literal type="number" pos:line="95" pos:column="36">0xFFFF<pos:position pos:line="95" pos:column="42"/></literal></expr>;<pos:position pos:line="95" pos:column="43"/></expr_stmt>
			<expr_stmt><expr><name pos:line="96" pos:column="25">s2<pos:position pos:line="96" pos:column="27"/></name> <operator pos:line="96" pos:column="28">=<pos:position pos:line="96" pos:column="29"/></operator> <name pos:line="96" pos:column="30">sum<pos:position pos:line="96" pos:column="33"/></name> <operator pos:line="96" pos:column="34">&gt;&gt;<pos:position pos:line="96" pos:column="39"/></operator> <literal type="number" pos:line="96" pos:column="37">16<pos:position pos:line="96" pos:column="39"/></literal></expr>;<pos:position pos:line="96" pos:column="40"/></expr_stmt>
			<expr_stmt><expr><name pos:line="97" pos:column="25">matches<pos:position pos:line="97" pos:column="32"/></name><operator pos:line="97" pos:column="32">++<pos:position pos:line="97" pos:column="34"/></operator></expr>;<pos:position pos:line="97" pos:column="35"/></expr_stmt>
			<break pos:line="98" pos:column="25">break;<pos:position pos:line="98" pos:column="31"/></break>
		}<pos:position pos:line="99" pos:column="18"/></block></for>

	<label><name pos:line="101" pos:column="9">null_tag<pos:position pos:line="101" pos:column="17"/></name>:<pos:position pos:line="101" pos:column="18"/></label>
		<comment type="block" pos:line="102" pos:column="17">/* Trim off the first byte from the checksum */</comment>
		<expr_stmt><expr><name pos:line="103" pos:column="17">map<pos:position pos:line="103" pos:column="20"/></name> <operator pos:line="103" pos:column="21">=<pos:position pos:line="103" pos:column="22"/></operator> <operator pos:line="103" pos:column="23">(<pos:position pos:line="103" pos:column="24"/></operator><name pos:line="103" pos:column="24">schar<pos:position pos:line="103" pos:column="29"/></name> <operator pos:line="103" pos:column="30">*<pos:position pos:line="103" pos:column="31"/></operator><operator pos:line="103" pos:column="31">)<pos:position pos:line="103" pos:column="32"/></operator><call><name pos:line="103" pos:column="32">map_ptr<pos:position pos:line="103" pos:column="39"/></name><argument_list pos:line="103" pos:column="39">(<argument><expr><name pos:line="103" pos:column="40">buf<pos:position pos:line="103" pos:column="43"/></name></expr></argument>,<argument><expr><name pos:line="103" pos:column="44">offset<pos:position pos:line="103" pos:column="50"/></name></expr></argument>,<argument><expr><name pos:line="103" pos:column="51">k<pos:position pos:line="103" pos:column="52"/></name><operator pos:line="103" pos:column="52">+<pos:position pos:line="103" pos:column="53"/></operator><literal type="number" pos:line="103" pos:column="53">1<pos:position pos:line="103" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="103" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="103" pos:column="56"/></expr_stmt>
		<expr_stmt><expr><name pos:line="104" pos:column="17">s1<pos:position pos:line="104" pos:column="19"/></name> <operator pos:line="104" pos:column="20">-=<pos:position pos:line="104" pos:column="22"/></operator> <name><name pos:line="104" pos:column="23">map<pos:position pos:line="104" pos:column="26"/></name><index pos:line="104" pos:column="26">[<expr><literal type="number" pos:line="104" pos:column="27">0<pos:position pos:line="104" pos:column="28"/></literal></expr>]<pos:position pos:line="104" pos:column="29"/></index></name> <operator pos:line="104" pos:column="30">+<pos:position pos:line="104" pos:column="31"/></operator> <name pos:line="104" pos:column="32">CHAR_OFFSET<pos:position pos:line="104" pos:column="43"/></name></expr>;<pos:position pos:line="104" pos:column="44"/></expr_stmt>
		<expr_stmt><expr><name pos:line="105" pos:column="17">s2<pos:position pos:line="105" pos:column="19"/></name> <operator pos:line="105" pos:column="20">-=<pos:position pos:line="105" pos:column="22"/></operator> <name pos:line="105" pos:column="23">k<pos:position pos:line="105" pos:column="24"/></name> <operator pos:line="105" pos:column="25">*<pos:position pos:line="105" pos:column="26"/></operator> <operator pos:line="105" pos:column="27">(<pos:position pos:line="105" pos:column="28"/></operator><name><name pos:line="105" pos:column="28">map<pos:position pos:line="105" pos:column="31"/></name><index pos:line="105" pos:column="31">[<expr><literal type="number" pos:line="105" pos:column="32">0<pos:position pos:line="105" pos:column="33"/></literal></expr>]<pos:position pos:line="105" pos:column="34"/></index></name><operator pos:line="105" pos:column="34">+<pos:position pos:line="105" pos:column="35"/></operator><name pos:line="105" pos:column="35">CHAR_OFFSET<pos:position pos:line="105" pos:column="46"/></name><operator pos:line="105" pos:column="46">)<pos:position pos:line="105" pos:column="47"/></operator></expr>;<pos:position pos:line="105" pos:column="48"/></expr_stmt>

		<comment type="block" pos:line="107" pos:column="17">/* Add on the next byte (if there is one) to the checksum */</comment>
		<if pos:line="108" pos:column="17">if <condition pos:line="108" pos:column="20">(<expr><name pos:line="108" pos:column="21">k<pos:position pos:line="108" pos:column="22"/></name> <operator pos:line="108" pos:column="23">&lt;<pos:position pos:line="108" pos:column="27"/></operator> <operator pos:line="108" pos:column="25">(<pos:position pos:line="108" pos:column="26"/></operator><name pos:line="108" pos:column="26">len<pos:position pos:line="108" pos:column="29"/></name><operator pos:line="108" pos:column="29">-<pos:position pos:line="108" pos:column="30"/></operator><name pos:line="108" pos:column="30">offset<pos:position pos:line="108" pos:column="36"/></name><operator pos:line="108" pos:column="36">)<pos:position pos:line="108" pos:column="37"/></operator></expr>)<pos:position pos:line="108" pos:column="38"/></condition><then pos:line="108" pos:column="38"> <block pos:line="108" pos:column="39">{
			<expr_stmt><expr><name pos:line="109" pos:column="25">s1<pos:position pos:line="109" pos:column="27"/></name> <operator pos:line="109" pos:column="28">+=<pos:position pos:line="109" pos:column="30"/></operator> <operator pos:line="109" pos:column="31">(<pos:position pos:line="109" pos:column="32"/></operator><name><name pos:line="109" pos:column="32">map<pos:position pos:line="109" pos:column="35"/></name><index pos:line="109" pos:column="35">[<expr><name pos:line="109" pos:column="36">k<pos:position pos:line="109" pos:column="37"/></name></expr>]<pos:position pos:line="109" pos:column="38"/></index></name><operator pos:line="109" pos:column="38">+<pos:position pos:line="109" pos:column="39"/></operator><name pos:line="109" pos:column="39">CHAR_OFFSET<pos:position pos:line="109" pos:column="50"/></name><operator pos:line="109" pos:column="50">)<pos:position pos:line="109" pos:column="51"/></operator></expr>;<pos:position pos:line="109" pos:column="52"/></expr_stmt>
			<expr_stmt><expr><name pos:line="110" pos:column="25">s2<pos:position pos:line="110" pos:column="27"/></name> <operator pos:line="110" pos:column="28">+=<pos:position pos:line="110" pos:column="30"/></operator> <name pos:line="110" pos:column="31">s1<pos:position pos:line="110" pos:column="33"/></name></expr>;<pos:position pos:line="110" pos:column="34"/></expr_stmt>
		}<pos:position pos:line="111" pos:column="18"/></block></then> <else pos:line="111" pos:column="19">else <block pos:line="111" pos:column="24">{
			<expr_stmt><expr><operator pos:line="112" pos:column="25">--<pos:position pos:line="112" pos:column="27"/></operator><name pos:line="112" pos:column="27">k<pos:position pos:line="112" pos:column="28"/></name></expr>;<pos:position pos:line="112" pos:column="29"/></expr_stmt>
		}<pos:position pos:line="113" pos:column="18"/></block></else></if>

		<comment type="block" pos:line="115" pos:column="17">/* By matching early we avoid re-reading the
		   data 3 times in the case where a token
		   match comes a long way after last
		   match. The 3 reads are caused by the
		   running match, the checksum update and the
		   literal send. */</comment>
		<if pos:line="121" pos:column="17">if <condition pos:line="121" pos:column="20">(<expr><name pos:line="121" pos:column="21">offset<pos:position pos:line="121" pos:column="27"/></name> <operator pos:line="121" pos:column="28">&gt;<pos:position pos:line="121" pos:column="32"/></operator> <name pos:line="121" pos:column="30">last_match<pos:position pos:line="121" pos:column="40"/></name>
		 <operator pos:line="122" pos:column="18">&amp;&amp;<pos:position pos:line="122" pos:column="28"/></operator> <name pos:line="122" pos:column="21">offset<pos:position pos:line="122" pos:column="27"/></name><operator pos:line="122" pos:column="27">-<pos:position pos:line="122" pos:column="28"/></operator><name pos:line="122" pos:column="28">last_match<pos:position pos:line="122" pos:column="38"/></name> <operator pos:line="122" pos:column="39">&gt;=<pos:position pos:line="122" pos:column="44"/></operator> <name pos:line="122" pos:column="42">CHUNK_SIZE<pos:position pos:line="122" pos:column="52"/></name><operator pos:line="122" pos:column="52">+<pos:position pos:line="122" pos:column="53"/></operator><name><name pos:line="122" pos:column="53">s<pos:position pos:line="122" pos:column="54"/></name><operator pos:line="122" pos:column="54">-&gt;<pos:position pos:line="122" pos:column="59"/></operator><name pos:line="122" pos:column="56">blength<pos:position pos:line="122" pos:column="63"/></name></name>
		 <operator pos:line="123" pos:column="18">&amp;&amp;<pos:position pos:line="123" pos:column="28"/></operator> <name pos:line="123" pos:column="21">end<pos:position pos:line="123" pos:column="24"/></name><operator pos:line="123" pos:column="24">-<pos:position pos:line="123" pos:column="25"/></operator><name pos:line="123" pos:column="25">offset<pos:position pos:line="123" pos:column="31"/></name> <operator pos:line="123" pos:column="32">&gt;<pos:position pos:line="123" pos:column="36"/></operator> <name pos:line="123" pos:column="34">CHUNK_SIZE<pos:position pos:line="123" pos:column="44"/></name></expr>)<pos:position pos:line="123" pos:column="45"/></condition><then pos:line="123" pos:column="45"> <block pos:line="123" pos:column="46">{
			<expr_stmt><expr><call><name pos:line="124" pos:column="25">matched<pos:position pos:line="124" pos:column="32"/></name><argument_list pos:line="124" pos:column="32">(<argument><expr><name pos:line="124" pos:column="33">f<pos:position pos:line="124" pos:column="34"/></name></expr></argument>,<argument><expr><name pos:line="124" pos:column="35">s<pos:position pos:line="124" pos:column="36"/></name></expr></argument>,<argument><expr><name pos:line="124" pos:column="37">buf<pos:position pos:line="124" pos:column="40"/></name></expr></argument>,<argument><expr><name pos:line="124" pos:column="41">offset<pos:position pos:line="124" pos:column="47"/></name> <operator pos:line="124" pos:column="48">-<pos:position pos:line="124" pos:column="49"/></operator> <name><name pos:line="124" pos:column="50">s<pos:position pos:line="124" pos:column="51"/></name><operator pos:line="124" pos:column="51">-&gt;<pos:position pos:line="124" pos:column="56"/></operator><name pos:line="124" pos:column="53">blength<pos:position pos:line="124" pos:column="60"/></name></name></expr></argument>, <argument><expr><operator pos:line="124" pos:column="62">-<pos:position pos:line="124" pos:column="63"/></operator><literal type="number" pos:line="124" pos:column="63">2<pos:position pos:line="124" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="124" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="124" pos:column="66"/></expr_stmt>
		}<pos:position pos:line="125" pos:column="18"/></block></then></if>
	}<pos:position pos:line="126" pos:column="10"/></block> while <condition pos:line="126" pos:column="17">(<expr><operator pos:line="126" pos:column="18">++<pos:position pos:line="126" pos:column="20"/></operator><name pos:line="126" pos:column="20">offset<pos:position pos:line="126" pos:column="26"/></name> <operator pos:line="126" pos:column="27">&lt;<pos:position pos:line="126" pos:column="31"/></operator> <name pos:line="126" pos:column="29">end<pos:position pos:line="126" pos:column="32"/></name></expr>)<pos:position pos:line="126" pos:column="33"/></condition>;<pos:position pos:line="126" pos:column="34"/></do>

	<expr_stmt><expr><call><name pos:line="128" pos:column="9">matched<pos:position pos:line="128" pos:column="16"/></name><argument_list pos:line="128" pos:column="16">(<argument><expr><name pos:line="128" pos:column="17">f<pos:position pos:line="128" pos:column="18"/></name></expr></argument>,<argument><expr><name pos:line="128" pos:column="19">s<pos:position pos:line="128" pos:column="20"/></name></expr></argument>,<argument><expr><name pos:line="128" pos:column="21">buf<pos:position pos:line="128" pos:column="24"/></name></expr></argument>,<argument><expr><name pos:line="128" pos:column="25">len<pos:position pos:line="128" pos:column="28"/></name></expr></argument>,<argument><expr><operator pos:line="128" pos:column="29">-<pos:position pos:line="128" pos:column="30"/></operator><literal type="number" pos:line="128" pos:column="30">1<pos:position pos:line="128" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="128" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="128" pos:column="33"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="129" pos:column="9">map_ptr<pos:position pos:line="129" pos:column="16"/></name><argument_list pos:line="129" pos:column="16">(<argument><expr><name pos:line="129" pos:column="17">buf<pos:position pos:line="129" pos:column="20"/></name></expr></argument>,<argument><expr><name pos:line="129" pos:column="21">len<pos:position pos:line="129" pos:column="24"/></name><operator pos:line="129" pos:column="24">-<pos:position pos:line="129" pos:column="25"/></operator><literal type="number" pos:line="129" pos:column="25">1<pos:position pos:line="129" pos:column="26"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="129" pos:column="27">1<pos:position pos:line="129" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="129" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="129" pos:column="30"/></expr_stmt>
}<pos:position pos:line="130" pos:column="2"/></block></function></unit>
