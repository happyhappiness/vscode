<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_16_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">exchange_protocols<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><name pos:line="1" pos:column="31">int<pos:position pos:line="1" pos:column="34"/></name></type> <name pos:line="1" pos:column="35">f_in<pos:position pos:line="1" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="41">int<pos:position pos:line="1" pos:column="44"/></name></type> <name pos:line="1" pos:column="45">f_out<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="52">char<pos:position pos:line="1" pos:column="56"/></name> <modifier pos:line="1" pos:column="57">*<pos:position pos:line="1" pos:column="58"/></modifier></type><name pos:line="1" pos:column="58">buf<pos:position pos:line="1" pos:column="61"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="63">size_t<pos:position pos:line="1" pos:column="69"/></name></type> <name pos:line="1" pos:column="70">bufsiz<pos:position pos:line="1" pos:column="76"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="78">int<pos:position pos:line="1" pos:column="81"/></name></type> <name pos:line="1" pos:column="82">am_client<pos:position pos:line="1" pos:column="91"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="92"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">remote_sub<pos:position pos:line="3" pos:column="23"/></name> <init pos:line="3" pos:column="24">= <expr><operator pos:line="3" pos:column="26">-<pos:position pos:line="3" pos:column="27"/></operator><literal type="number" pos:line="3" pos:column="27">1<pos:position pos:line="3" pos:column="28"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="29"/></decl_stmt>
<cpp:if pos:line="4" pos:column="1">#<cpp:directive pos:line="4" pos:column="2">if<pos:position pos:line="4" pos:column="4"/></cpp:directive> <expr><name pos:line="4" pos:column="5">SUBPROTOCOL_VERSION<pos:position pos:line="4" pos:column="24"/></name> <operator pos:line="4" pos:column="25">!=<pos:position pos:line="4" pos:column="27"/></operator> <literal type="number" pos:line="4" pos:column="28">0<pos:position pos:line="4" pos:column="29"/></literal></expr></cpp:if>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">our_sub<pos:position pos:line="5" pos:column="20"/></name> <init pos:line="5" pos:column="21">= <expr><ternary><condition><expr><name pos:line="5" pos:column="23">protocol_version<pos:position pos:line="5" pos:column="39"/></name> <operator pos:line="5" pos:column="40">&lt;<pos:position pos:line="5" pos:column="44"/></operator> <name pos:line="5" pos:column="42">PROTOCOL_VERSION<pos:position pos:line="5" pos:column="58"/></name></expr> ?<pos:position pos:line="5" pos:column="60"/></condition><then pos:line="5" pos:column="60"> <expr><literal type="number" pos:line="5" pos:column="61">0<pos:position pos:line="5" pos:column="62"/></literal></expr> <pos:position pos:line="5" pos:column="63"/></then><else pos:line="5" pos:column="63">: <expr><name pos:line="5" pos:column="65">SUBPROTOCOL_VERSION<pos:position pos:line="5" pos:column="84"/></name></expr></else></ternary></expr></init></decl>;<pos:position pos:line="5" pos:column="85"/></decl_stmt>
<cpp:else pos:line="6" pos:column="1">#<cpp:directive pos:line="6" pos:column="2">else<pos:position pos:line="6" pos:column="6"/></cpp:directive></cpp:else>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">int<pos:position pos:line="7" pos:column="12"/></name></type> <name pos:line="7" pos:column="13">our_sub<pos:position pos:line="7" pos:column="20"/></name> <init pos:line="7" pos:column="21">= <expr><literal type="number" pos:line="7" pos:column="23">0<pos:position pos:line="7" pos:column="24"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="25"/></decl_stmt>
<cpp:endif pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">endif<pos:position pos:line="8" pos:column="7"/></cpp:directive></cpp:endif>
	<decl_stmt><decl><type><name pos:line="9" pos:column="9">char<pos:position pos:line="9" pos:column="13"/></name> <modifier pos:line="9" pos:column="14">*<pos:position pos:line="9" pos:column="15"/></modifier></type><name pos:line="9" pos:column="15">motd<pos:position pos:line="9" pos:column="19"/></name></decl>;<pos:position pos:line="9" pos:column="20"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="11" pos:column="9">io_printf<pos:position pos:line="11" pos:column="18"/></name><argument_list pos:line="11" pos:column="18">(<argument><expr><name pos:line="11" pos:column="19">f_out<pos:position pos:line="11" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="26">"@RSYNCD: %d.%d\n"<pos:position pos:line="11" pos:column="44"/></literal></expr></argument>, <argument><expr><name pos:line="11" pos:column="46">protocol_version<pos:position pos:line="11" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="64">our_sub<pos:position pos:line="11" pos:column="71"/></name></expr></argument>)<pos:position pos:line="11" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="73"/></expr_stmt>

	<if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><operator pos:line="13" pos:column="13">!<pos:position pos:line="13" pos:column="14"/></operator><name pos:line="13" pos:column="14">am_client<pos:position pos:line="13" pos:column="23"/></name></expr>)<pos:position pos:line="13" pos:column="24"/></condition><then pos:line="13" pos:column="24"> <block pos:line="13" pos:column="25">{
		<expr_stmt><expr><name pos:line="14" pos:column="17">motd<pos:position pos:line="14" pos:column="21"/></name> <operator pos:line="14" pos:column="22">=<pos:position pos:line="14" pos:column="23"/></operator> <call><name pos:line="14" pos:column="24">lp_motd_file<pos:position pos:line="14" pos:column="36"/></name><argument_list pos:line="14" pos:column="36">()<pos:position pos:line="14" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="39"/></expr_stmt>
		<if pos:line="15" pos:column="17">if <condition pos:line="15" pos:column="20">(<expr><name pos:line="15" pos:column="21">motd<pos:position pos:line="15" pos:column="25"/></name> <operator pos:line="15" pos:column="26">&amp;&amp;<pos:position pos:line="15" pos:column="36"/></operator> <operator pos:line="15" pos:column="29">*<pos:position pos:line="15" pos:column="30"/></operator><name pos:line="15" pos:column="30">motd<pos:position pos:line="15" pos:column="34"/></name></expr>)<pos:position pos:line="15" pos:column="35"/></condition><then pos:line="15" pos:column="35"> <block pos:line="15" pos:column="36">{
			<decl_stmt><decl><type><name pos:line="16" pos:column="25">FILE<pos:position pos:line="16" pos:column="29"/></name> <modifier pos:line="16" pos:column="30">*<pos:position pos:line="16" pos:column="31"/></modifier></type><name pos:line="16" pos:column="31">f<pos:position pos:line="16" pos:column="32"/></name> <init pos:line="16" pos:column="33">= <expr><call><name pos:line="16" pos:column="35">fopen<pos:position pos:line="16" pos:column="40"/></name><argument_list pos:line="16" pos:column="40">(<argument><expr><name pos:line="16" pos:column="41">motd<pos:position pos:line="16" pos:column="45"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="16" pos:column="46">"r"<pos:position pos:line="16" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="50"/></argument_list></call></expr></init></decl>;<pos:position pos:line="16" pos:column="51"/></decl_stmt>
			<while pos:line="17" pos:column="25">while <condition pos:line="17" pos:column="31">(<expr><name pos:line="17" pos:column="32">f<pos:position pos:line="17" pos:column="33"/></name> <operator pos:line="17" pos:column="34">&amp;&amp;<pos:position pos:line="17" pos:column="44"/></operator> <operator pos:line="17" pos:column="37">!<pos:position pos:line="17" pos:column="38"/></operator><call><name pos:line="17" pos:column="38">feof<pos:position pos:line="17" pos:column="42"/></name><argument_list pos:line="17" pos:column="42">(<argument><expr><name pos:line="17" pos:column="43">f<pos:position pos:line="17" pos:column="44"/></name></expr></argument>)<pos:position pos:line="17" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="17" pos:column="46"/></condition> <block pos:line="17" pos:column="47">{
				<decl_stmt><decl><type><name pos:line="18" pos:column="33">int<pos:position pos:line="18" pos:column="36"/></name></type> <name pos:line="18" pos:column="37">len<pos:position pos:line="18" pos:column="40"/></name> <init pos:line="18" pos:column="41">= <expr><call><name pos:line="18" pos:column="43">fread<pos:position pos:line="18" pos:column="48"/></name><argument_list pos:line="18" pos:column="48">(<argument><expr><name pos:line="18" pos:column="49">buf<pos:position pos:line="18" pos:column="52"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="18" pos:column="54">1<pos:position pos:line="18" pos:column="55"/></literal></expr></argument>, <argument><expr><name pos:line="18" pos:column="57">bufsiz<pos:position pos:line="18" pos:column="63"/></name> <operator pos:line="18" pos:column="64">-<pos:position pos:line="18" pos:column="65"/></operator> <literal type="number" pos:line="18" pos:column="66">1<pos:position pos:line="18" pos:column="67"/></literal></expr></argument>, <argument><expr><name pos:line="18" pos:column="69">f<pos:position pos:line="18" pos:column="70"/></name></expr></argument>)<pos:position pos:line="18" pos:column="71"/></argument_list></call></expr></init></decl>;<pos:position pos:line="18" pos:column="72"/></decl_stmt>
				<if pos:line="19" pos:column="33">if <condition pos:line="19" pos:column="36">(<expr><name pos:line="19" pos:column="37">len<pos:position pos:line="19" pos:column="40"/></name> <operator pos:line="19" pos:column="41">&gt;<pos:position pos:line="19" pos:column="45"/></operator> <literal type="number" pos:line="19" pos:column="43">0<pos:position pos:line="19" pos:column="44"/></literal></expr>)<pos:position pos:line="19" pos:column="45"/></condition><then pos:line="19" pos:column="45">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="20" pos:column="41">write_buf<pos:position pos:line="20" pos:column="50"/></name><argument_list pos:line="20" pos:column="50">(<argument><expr><name pos:line="20" pos:column="51">f_out<pos:position pos:line="20" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="58">buf<pos:position pos:line="20" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="63">len<pos:position pos:line="20" pos:column="66"/></name></expr></argument>)<pos:position pos:line="20" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="68"/></expr_stmt></block></then></if>
			}<pos:position pos:line="21" pos:column="26"/></block></while>
			<if pos:line="22" pos:column="25">if <condition pos:line="22" pos:column="28">(<expr><name pos:line="22" pos:column="29">f<pos:position pos:line="22" pos:column="30"/></name></expr>)<pos:position pos:line="22" pos:column="31"/></condition><then pos:line="22" pos:column="31">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="23" pos:column="33">fclose<pos:position pos:line="23" pos:column="39"/></name><argument_list pos:line="23" pos:column="39">(<argument><expr><name pos:line="23" pos:column="40">f<pos:position pos:line="23" pos:column="41"/></name></expr></argument>)<pos:position pos:line="23" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="43"/></expr_stmt></block></then></if>
			<expr_stmt><expr><call><name pos:line="24" pos:column="25">write_sbuf<pos:position pos:line="24" pos:column="35"/></name><argument_list pos:line="24" pos:column="35">(<argument><expr><name pos:line="24" pos:column="36">f_out<pos:position pos:line="24" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="24" pos:column="43">"\n"<pos:position pos:line="24" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="49"/></expr_stmt>
		}<pos:position pos:line="25" pos:column="18"/></block></then></if>
	}<pos:position pos:line="26" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="28" pos:column="9">/* This strips the \n. */</comment>
	<if pos:line="29" pos:column="9">if <condition pos:line="29" pos:column="12">(<expr><operator pos:line="29" pos:column="13">!<pos:position pos:line="29" pos:column="14"/></operator><call><name pos:line="29" pos:column="14">read_line_old<pos:position pos:line="29" pos:column="27"/></name><argument_list pos:line="29" pos:column="27">(<argument><expr><name pos:line="29" pos:column="28">f_in<pos:position pos:line="29" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="34">buf<pos:position pos:line="29" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="39">bufsiz<pos:position pos:line="29" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="29" pos:column="47">0<pos:position pos:line="29" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="29" pos:column="50"/></condition><then pos:line="29" pos:column="50"> <block pos:line="29" pos:column="51">{
		<if pos:line="30" pos:column="17">if <condition pos:line="30" pos:column="20">(<expr><name pos:line="30" pos:column="21">am_client<pos:position pos:line="30" pos:column="30"/></name></expr>)<pos:position pos:line="30" pos:column="31"/></condition><then pos:line="30" pos:column="31">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="31" pos:column="25">rprintf<pos:position pos:line="31" pos:column="32"/></name><argument_list pos:line="31" pos:column="32">(<argument><expr><name pos:line="31" pos:column="33">FERROR<pos:position pos:line="31" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="31" pos:column="41">"rsync: did not see server greeting\n"<pos:position pos:line="31" pos:column="79"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="81"/></expr_stmt></block></then></if>
		<return pos:line="32" pos:column="17">return <expr><operator pos:line="32" pos:column="24">-<pos:position pos:line="32" pos:column="25"/></operator><literal type="number" pos:line="32" pos:column="25">1<pos:position pos:line="32" pos:column="26"/></literal></expr>;<pos:position pos:line="32" pos:column="27"/></return>
	}<pos:position pos:line="33" pos:column="10"/></block></then></if>

	<if pos:line="35" pos:column="9">if <condition pos:line="35" pos:column="12">(<expr><call><name pos:line="35" pos:column="13">sscanf<pos:position pos:line="35" pos:column="19"/></name><argument_list pos:line="35" pos:column="19">(<argument><expr><name pos:line="35" pos:column="20">buf<pos:position pos:line="35" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="35" pos:column="25">"@RSYNCD: %d.%d"<pos:position pos:line="35" pos:column="41"/></literal></expr></argument>, <argument><expr><operator pos:line="35" pos:column="43">&amp;<pos:position pos:line="35" pos:column="48"/></operator><name pos:line="35" pos:column="44">remote_protocol<pos:position pos:line="35" pos:column="59"/></name></expr></argument>, <argument><expr><operator pos:line="35" pos:column="61">&amp;<pos:position pos:line="35" pos:column="66"/></operator><name pos:line="35" pos:column="62">remote_sub<pos:position pos:line="35" pos:column="72"/></name></expr></argument>)<pos:position pos:line="35" pos:column="73"/></argument_list></call> <operator pos:line="35" pos:column="74">&lt;<pos:position pos:line="35" pos:column="78"/></operator> <literal type="number" pos:line="35" pos:column="76">1<pos:position pos:line="35" pos:column="77"/></literal></expr>)<pos:position pos:line="35" pos:column="78"/></condition><then pos:line="35" pos:column="78"> <block pos:line="35" pos:column="79">{
		<if pos:line="36" pos:column="17">if <condition pos:line="36" pos:column="20">(<expr><name pos:line="36" pos:column="21">am_client<pos:position pos:line="36" pos:column="30"/></name></expr>)<pos:position pos:line="36" pos:column="31"/></condition><then pos:line="36" pos:column="31">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="37" pos:column="25">rprintf<pos:position pos:line="37" pos:column="32"/></name><argument_list pos:line="37" pos:column="32">(<argument><expr><name pos:line="37" pos:column="33">FERROR<pos:position pos:line="37" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="37" pos:column="41">"rsync: server sent \"%s\" rather than greeting\n"<pos:position pos:line="37" pos:column="91"/></literal></expr></argument>, <argument><expr><name pos:line="37" pos:column="93">buf<pos:position pos:line="37" pos:column="96"/></name></expr></argument>)<pos:position pos:line="37" pos:column="97"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="98"/></expr_stmt></block></then>
		<else pos:line="38" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="39" pos:column="25">io_printf<pos:position pos:line="39" pos:column="34"/></name><argument_list pos:line="39" pos:column="34">(<argument><expr><name pos:line="39" pos:column="35">f_out<pos:position pos:line="39" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="39" pos:column="42">"@ERROR: protocol startup error\n"<pos:position pos:line="39" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="78"/></expr_stmt></block></else></if>
		<return pos:line="40" pos:column="17">return <expr><operator pos:line="40" pos:column="24">-<pos:position pos:line="40" pos:column="25"/></operator><literal type="number" pos:line="40" pos:column="25">1<pos:position pos:line="40" pos:column="26"/></literal></expr>;<pos:position pos:line="40" pos:column="27"/></return>
	}<pos:position pos:line="41" pos:column="10"/></block></then></if>

	<if pos:line="43" pos:column="9">if <condition pos:line="43" pos:column="12">(<expr><name pos:line="43" pos:column="13">remote_sub<pos:position pos:line="43" pos:column="23"/></name> <operator pos:line="43" pos:column="24">&lt;<pos:position pos:line="43" pos:column="28"/></operator> <literal type="number" pos:line="43" pos:column="26">0<pos:position pos:line="43" pos:column="27"/></literal></expr>)<pos:position pos:line="43" pos:column="28"/></condition><then pos:line="43" pos:column="28"> <block pos:line="43" pos:column="29">{
		<if pos:line="44" pos:column="17">if <condition pos:line="44" pos:column="20">(<expr><name pos:line="44" pos:column="21">remote_protocol<pos:position pos:line="44" pos:column="36"/></name> <operator pos:line="44" pos:column="37">==<pos:position pos:line="44" pos:column="39"/></operator> <literal type="number" pos:line="44" pos:column="40">30<pos:position pos:line="44" pos:column="42"/></literal></expr>)<pos:position pos:line="44" pos:column="43"/></condition><then pos:line="44" pos:column="43"> <block pos:line="44" pos:column="44">{
			<if pos:line="45" pos:column="25">if <condition pos:line="45" pos:column="28">(<expr><name pos:line="45" pos:column="29">am_client<pos:position pos:line="45" pos:column="38"/></name></expr>)<pos:position pos:line="45" pos:column="39"/></condition><then pos:line="45" pos:column="39">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="46" pos:column="33">rprintf<pos:position pos:line="46" pos:column="40"/></name><argument_list pos:line="46" pos:column="40">(<argument><expr><name pos:line="46" pos:column="41">FERROR<pos:position pos:line="46" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="46" pos:column="49">"rsync: server is speaking an incompatible beta of protocol 30\n"<pos:position pos:line="46" pos:column="114"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="115"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="116"/></expr_stmt></block></then>
			<else pos:line="47" pos:column="25">else
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="48" pos:column="33">io_printf<pos:position pos:line="48" pos:column="42"/></name><argument_list pos:line="48" pos:column="42">(<argument><expr><name pos:line="48" pos:column="43">f_out<pos:position pos:line="48" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="48" pos:column="50">"@ERROR: your client is speaking an incompatible beta of protocol 30\n"<pos:position pos:line="48" pos:column="121"/></literal></expr></argument>)<pos:position pos:line="48" pos:column="122"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="123"/></expr_stmt></block></else></if>
			<return pos:line="49" pos:column="25">return <expr><operator pos:line="49" pos:column="32">-<pos:position pos:line="49" pos:column="33"/></operator><literal type="number" pos:line="49" pos:column="33">1<pos:position pos:line="49" pos:column="34"/></literal></expr>;<pos:position pos:line="49" pos:column="35"/></return>
		}<pos:position pos:line="50" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name pos:line="51" pos:column="17">remote_sub<pos:position pos:line="51" pos:column="27"/></name> <operator pos:line="51" pos:column="28">=<pos:position pos:line="51" pos:column="29"/></operator> <literal type="number" pos:line="51" pos:column="30">0<pos:position pos:line="51" pos:column="31"/></literal></expr>;<pos:position pos:line="51" pos:column="32"/></expr_stmt>
	}<pos:position pos:line="52" pos:column="10"/></block></then></if>

	<if pos:line="54" pos:column="9">if <condition pos:line="54" pos:column="12">(<expr><name pos:line="54" pos:column="13">protocol_version<pos:position pos:line="54" pos:column="29"/></name> <operator pos:line="54" pos:column="30">&gt;<pos:position pos:line="54" pos:column="34"/></operator> <name pos:line="54" pos:column="32">remote_protocol<pos:position pos:line="54" pos:column="47"/></name></expr>)<pos:position pos:line="54" pos:column="48"/></condition><then pos:line="54" pos:column="48"> <block pos:line="54" pos:column="49">{
		<expr_stmt><expr><name pos:line="55" pos:column="17">protocol_version<pos:position pos:line="55" pos:column="33"/></name> <operator pos:line="55" pos:column="34">=<pos:position pos:line="55" pos:column="35"/></operator> <name pos:line="55" pos:column="36">remote_protocol<pos:position pos:line="55" pos:column="51"/></name></expr>;<pos:position pos:line="55" pos:column="52"/></expr_stmt>
		<if pos:line="56" pos:column="17">if <condition pos:line="56" pos:column="20">(<expr><name pos:line="56" pos:column="21">remote_sub<pos:position pos:line="56" pos:column="31"/></name></expr>)<pos:position pos:line="56" pos:column="32"/></condition><then pos:line="56" pos:column="32">
			<block type="pseudo"><expr_stmt><expr><name pos:line="57" pos:column="25">protocol_version<pos:position pos:line="57" pos:column="41"/></name><operator pos:line="57" pos:column="41">--<pos:position pos:line="57" pos:column="43"/></operator></expr>;<pos:position pos:line="57" pos:column="44"/></expr_stmt></block></then></if>
	}<pos:position pos:line="58" pos:column="10"/></block></then> <elseif pos:line="58" pos:column="11">else <if pos:line="58" pos:column="16">if <condition pos:line="58" pos:column="19">(<expr><name pos:line="58" pos:column="20">protocol_version<pos:position pos:line="58" pos:column="36"/></name> <operator pos:line="58" pos:column="37">==<pos:position pos:line="58" pos:column="39"/></operator> <name pos:line="58" pos:column="40">remote_protocol<pos:position pos:line="58" pos:column="55"/></name></expr>)<pos:position pos:line="58" pos:column="56"/></condition><then pos:line="58" pos:column="56"> <block pos:line="58" pos:column="57">{
		<if pos:line="59" pos:column="17">if <condition pos:line="59" pos:column="20">(<expr><name pos:line="59" pos:column="21">remote_sub<pos:position pos:line="59" pos:column="31"/></name> <operator pos:line="59" pos:column="32">!=<pos:position pos:line="59" pos:column="34"/></operator> <name pos:line="59" pos:column="35">our_sub<pos:position pos:line="59" pos:column="42"/></name></expr>)<pos:position pos:line="59" pos:column="43"/></condition><then pos:line="59" pos:column="43">
			<block type="pseudo"><expr_stmt><expr><name pos:line="60" pos:column="25">protocol_version<pos:position pos:line="60" pos:column="41"/></name><operator pos:line="60" pos:column="41">--<pos:position pos:line="60" pos:column="43"/></operator></expr>;<pos:position pos:line="60" pos:column="44"/></expr_stmt></block></then></if>
	}<pos:position pos:line="61" pos:column="10"/></block></then></if></elseif>
<cpp:if pos:line="62" pos:column="1">#<cpp:directive pos:line="62" pos:column="2">if<pos:position pos:line="62" pos:column="4"/></cpp:directive> <expr><name pos:line="62" pos:column="5">SUBPROTOCOL_VERSION<pos:position pos:line="62" pos:column="24"/></name> <operator pos:line="62" pos:column="25">!=<pos:position pos:line="62" pos:column="27"/></operator> <literal type="number" pos:line="62" pos:column="28">0<pos:position pos:line="62" pos:column="29"/></literal></expr></cpp:if>
	<elseif pos:line="63" pos:column="9">else <if pos:line="63" pos:column="14">if <condition pos:line="63" pos:column="17">(<expr><name pos:line="63" pos:column="18">protocol_version<pos:position pos:line="63" pos:column="34"/></name> <operator pos:line="63" pos:column="35">&lt;<pos:position pos:line="63" pos:column="39"/></operator> <name pos:line="63" pos:column="37">remote_protocol<pos:position pos:line="63" pos:column="52"/></name></expr>)<pos:position pos:line="63" pos:column="53"/></condition><then pos:line="63" pos:column="53"> <block pos:line="63" pos:column="54">{
		<if pos:line="64" pos:column="17">if <condition pos:line="64" pos:column="20">(<expr><name pos:line="64" pos:column="21">our_sub<pos:position pos:line="64" pos:column="28"/></name></expr>)<pos:position pos:line="64" pos:column="29"/></condition><then pos:line="64" pos:column="29">
			<block type="pseudo"><expr_stmt><expr><name pos:line="65" pos:column="25">protocol_version<pos:position pos:line="65" pos:column="41"/></name><operator pos:line="65" pos:column="41">--<pos:position pos:line="65" pos:column="43"/></operator></expr>;<pos:position pos:line="65" pos:column="44"/></expr_stmt></block></then></if>
	}<pos:position pos:line="66" pos:column="10"/></block></then></if></elseif></if>
<cpp:endif pos:line="67" pos:column="1">#<cpp:directive pos:line="67" pos:column="2">endif<pos:position pos:line="67" pos:column="7"/></cpp:directive></cpp:endif>

	<if pos:line="69" pos:column="9">if <condition pos:line="69" pos:column="12">(<expr><name pos:line="69" pos:column="13">protocol_version<pos:position pos:line="69" pos:column="29"/></name> <operator pos:line="69" pos:column="30">&gt;=<pos:position pos:line="69" pos:column="35"/></operator> <literal type="number" pos:line="69" pos:column="33">30<pos:position pos:line="69" pos:column="35"/></literal></expr>)<pos:position pos:line="69" pos:column="36"/></condition><then pos:line="69" pos:column="36">
		<block type="pseudo"><expr_stmt><expr><name pos:line="70" pos:column="17">rl_nulls<pos:position pos:line="70" pos:column="25"/></name> <operator pos:line="70" pos:column="26">=<pos:position pos:line="70" pos:column="27"/></operator> <literal type="number" pos:line="70" pos:column="28">1<pos:position pos:line="70" pos:column="29"/></literal></expr>;<pos:position pos:line="70" pos:column="30"/></expr_stmt></block></then></if>

	<return pos:line="72" pos:column="9">return <expr><literal type="number" pos:line="72" pos:column="16">0<pos:position pos:line="72" pos:column="17"/></literal></expr>;<pos:position pos:line="72" pos:column="18"/></return>
}<pos:position pos:line="73" pos:column="2"/></block></function></unit>
