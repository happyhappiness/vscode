<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_444_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">get_checksum2<pos:position pos:line="1" pos:column="19"/></name><parameter_list pos:line="1" pos:column="19">(<parameter><decl><type><name pos:line="1" pos:column="20">char<pos:position pos:line="1" pos:column="24"/></name> <modifier pos:line="1" pos:column="25">*<pos:position pos:line="1" pos:column="26"/></modifier></type><name pos:line="1" pos:column="26">buf<pos:position pos:line="1" pos:column="29"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="31">int32<pos:position pos:line="1" pos:column="36"/></name></type> <name pos:line="1" pos:column="37">len<pos:position pos:line="1" pos:column="40"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="42">char<pos:position pos:line="1" pos:column="46"/></name> <modifier pos:line="1" pos:column="47">*<pos:position pos:line="1" pos:column="48"/></modifier></type><name pos:line="1" pos:column="48">sum<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="52"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">md_context<pos:position pos:line="3" pos:column="19"/></name></type> <name pos:line="3" pos:column="20">m<pos:position pos:line="3" pos:column="21"/></name></decl>;<pos:position pos:line="3" pos:column="22"/></decl_stmt>

	<if pos:line="5" pos:column="9">if <condition pos:line="5" pos:column="12">(<expr><name pos:line="5" pos:column="13">protocol_version<pos:position pos:line="5" pos:column="29"/></name> <operator pos:line="5" pos:column="30">&gt;=<pos:position pos:line="5" pos:column="35"/></operator> <literal type="number" pos:line="5" pos:column="33">30<pos:position pos:line="5" pos:column="35"/></literal></expr>)<pos:position pos:line="5" pos:column="36"/></condition><then pos:line="5" pos:column="36"> <block pos:line="5" pos:column="37">{
		<decl_stmt><decl><type><name pos:line="6" pos:column="17">uchar<pos:position pos:line="6" pos:column="22"/></name></type> <name><name pos:line="6" pos:column="23">seedbuf<pos:position pos:line="6" pos:column="30"/></name><index pos:line="6" pos:column="30">[<expr><literal type="number" pos:line="6" pos:column="31">4<pos:position pos:line="6" pos:column="32"/></literal></expr>]<pos:position pos:line="6" pos:column="33"/></index></name></decl>;<pos:position pos:line="6" pos:column="34"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="7" pos:column="17">md5_begin<pos:position pos:line="7" pos:column="26"/></name><argument_list pos:line="7" pos:column="26">(<argument><expr><operator pos:line="7" pos:column="27">&amp;<pos:position pos:line="7" pos:column="32"/></operator><name pos:line="7" pos:column="28">m<pos:position pos:line="7" pos:column="29"/></name></expr></argument>)<pos:position pos:line="7" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="31"/></expr_stmt>
		<if pos:line="8" pos:column="17">if <condition pos:line="8" pos:column="20">(<expr><name pos:line="8" pos:column="21">proper_seed_order<pos:position pos:line="8" pos:column="38"/></name></expr>)<pos:position pos:line="8" pos:column="39"/></condition><then pos:line="8" pos:column="39"> <block pos:line="8" pos:column="40">{
			<if pos:line="9" pos:column="25">if <condition pos:line="9" pos:column="28">(<expr><name pos:line="9" pos:column="29">checksum_seed<pos:position pos:line="9" pos:column="42"/></name></expr>)<pos:position pos:line="9" pos:column="43"/></condition><then pos:line="9" pos:column="43"> <block pos:line="9" pos:column="44">{
				<expr_stmt><expr><call><name pos:line="10" pos:column="33">SIVALu<pos:position pos:line="10" pos:column="39"/></name><argument_list pos:line="10" pos:column="39">(<argument><expr><name pos:line="10" pos:column="40">seedbuf<pos:position pos:line="10" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="10" pos:column="49">0<pos:position pos:line="10" pos:column="50"/></literal></expr></argument>, <argument><expr><name pos:line="10" pos:column="52">checksum_seed<pos:position pos:line="10" pos:column="65"/></name></expr></argument>)<pos:position pos:line="10" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="67"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="11" pos:column="33">md5_update<pos:position pos:line="11" pos:column="43"/></name><argument_list pos:line="11" pos:column="43">(<argument><expr><operator pos:line="11" pos:column="44">&amp;<pos:position pos:line="11" pos:column="49"/></operator><name pos:line="11" pos:column="45">m<pos:position pos:line="11" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="48">seedbuf<pos:position pos:line="11" pos:column="55"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="11" pos:column="57">4<pos:position pos:line="11" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="60"/></expr_stmt>
			}<pos:position pos:line="12" pos:column="26"/></block></then></if>
			<expr_stmt><expr><call><name pos:line="13" pos:column="25">md5_update<pos:position pos:line="13" pos:column="35"/></name><argument_list pos:line="13" pos:column="35">(<argument><expr><operator pos:line="13" pos:column="36">&amp;<pos:position pos:line="13" pos:column="41"/></operator><name pos:line="13" pos:column="37">m<pos:position pos:line="13" pos:column="38"/></name></expr></argument>, <argument><expr><operator pos:line="13" pos:column="40">(<pos:position pos:line="13" pos:column="41"/></operator><name pos:line="13" pos:column="41">uchar<pos:position pos:line="13" pos:column="46"/></name> <operator pos:line="13" pos:column="47">*<pos:position pos:line="13" pos:column="48"/></operator><operator pos:line="13" pos:column="48">)<pos:position pos:line="13" pos:column="49"/></operator><name pos:line="13" pos:column="49">buf<pos:position pos:line="13" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="54">len<pos:position pos:line="13" pos:column="57"/></name></expr></argument>)<pos:position pos:line="13" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="59"/></expr_stmt>
		}<pos:position pos:line="14" pos:column="18"/></block></then> <else pos:line="14" pos:column="19">else <block pos:line="14" pos:column="24">{
			<expr_stmt><expr><call><name pos:line="15" pos:column="25">md5_update<pos:position pos:line="15" pos:column="35"/></name><argument_list pos:line="15" pos:column="35">(<argument><expr><operator pos:line="15" pos:column="36">&amp;<pos:position pos:line="15" pos:column="41"/></operator><name pos:line="15" pos:column="37">m<pos:position pos:line="15" pos:column="38"/></name></expr></argument>, <argument><expr><operator pos:line="15" pos:column="40">(<pos:position pos:line="15" pos:column="41"/></operator><name pos:line="15" pos:column="41">uchar<pos:position pos:line="15" pos:column="46"/></name> <operator pos:line="15" pos:column="47">*<pos:position pos:line="15" pos:column="48"/></operator><operator pos:line="15" pos:column="48">)<pos:position pos:line="15" pos:column="49"/></operator><name pos:line="15" pos:column="49">buf<pos:position pos:line="15" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="54">len<pos:position pos:line="15" pos:column="57"/></name></expr></argument>)<pos:position pos:line="15" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="59"/></expr_stmt>
			<if pos:line="16" pos:column="25">if <condition pos:line="16" pos:column="28">(<expr><name pos:line="16" pos:column="29">checksum_seed<pos:position pos:line="16" pos:column="42"/></name></expr>)<pos:position pos:line="16" pos:column="43"/></condition><then pos:line="16" pos:column="43"> <block pos:line="16" pos:column="44">{
				<expr_stmt><expr><call><name pos:line="17" pos:column="33">SIVALu<pos:position pos:line="17" pos:column="39"/></name><argument_list pos:line="17" pos:column="39">(<argument><expr><name pos:line="17" pos:column="40">seedbuf<pos:position pos:line="17" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="17" pos:column="49">0<pos:position pos:line="17" pos:column="50"/></literal></expr></argument>, <argument><expr><name pos:line="17" pos:column="52">checksum_seed<pos:position pos:line="17" pos:column="65"/></name></expr></argument>)<pos:position pos:line="17" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="67"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="18" pos:column="33">md5_update<pos:position pos:line="18" pos:column="43"/></name><argument_list pos:line="18" pos:column="43">(<argument><expr><operator pos:line="18" pos:column="44">&amp;<pos:position pos:line="18" pos:column="49"/></operator><name pos:line="18" pos:column="45">m<pos:position pos:line="18" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="48">seedbuf<pos:position pos:line="18" pos:column="55"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="18" pos:column="57">4<pos:position pos:line="18" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="60"/></expr_stmt>
			}<pos:position pos:line="19" pos:column="26"/></block></then></if>
		}<pos:position pos:line="20" pos:column="18"/></block></else></if>
		<expr_stmt><expr><call><name pos:line="21" pos:column="17">md5_result<pos:position pos:line="21" pos:column="27"/></name><argument_list pos:line="21" pos:column="27">(<argument><expr><operator pos:line="21" pos:column="28">&amp;<pos:position pos:line="21" pos:column="33"/></operator><name pos:line="21" pos:column="29">m<pos:position pos:line="21" pos:column="30"/></name></expr></argument>, <argument><expr><operator pos:line="21" pos:column="32">(<pos:position pos:line="21" pos:column="33"/></operator><name pos:line="21" pos:column="33">uchar<pos:position pos:line="21" pos:column="38"/></name> <operator pos:line="21" pos:column="39">*<pos:position pos:line="21" pos:column="40"/></operator><operator pos:line="21" pos:column="40">)<pos:position pos:line="21" pos:column="41"/></operator><name pos:line="21" pos:column="41">sum<pos:position pos:line="21" pos:column="44"/></name></expr></argument>)<pos:position pos:line="21" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="46"/></expr_stmt>
	}<pos:position pos:line="22" pos:column="10"/></block></then> <else pos:line="22" pos:column="11">else <block pos:line="22" pos:column="16">{
		<decl_stmt><decl><type><name pos:line="23" pos:column="17">int32<pos:position pos:line="23" pos:column="22"/></name></type> <name pos:line="23" pos:column="23">i<pos:position pos:line="23" pos:column="24"/></name></decl>;<pos:position pos:line="23" pos:column="25"/></decl_stmt>
		<decl_stmt><decl><specifier pos:line="24" pos:column="17">static<pos:position pos:line="24" pos:column="23"/></specifier> <type><name pos:line="24" pos:column="24">char<pos:position pos:line="24" pos:column="28"/></name> <modifier pos:line="24" pos:column="29">*<pos:position pos:line="24" pos:column="30"/></modifier></type><name pos:line="24" pos:column="30">buf1<pos:position pos:line="24" pos:column="34"/></name></decl>;<pos:position pos:line="24" pos:column="35"/></decl_stmt>
		<decl_stmt><decl><specifier pos:line="25" pos:column="17">static<pos:position pos:line="25" pos:column="23"/></specifier> <type><name pos:line="25" pos:column="24">int32<pos:position pos:line="25" pos:column="29"/></name></type> <name pos:line="25" pos:column="30">len1<pos:position pos:line="25" pos:column="34"/></name></decl>;<pos:position pos:line="25" pos:column="35"/></decl_stmt>

		<expr_stmt><expr><call><name pos:line="27" pos:column="17">mdfour_begin<pos:position pos:line="27" pos:column="29"/></name><argument_list pos:line="27" pos:column="29">(<argument><expr><operator pos:line="27" pos:column="30">&amp;<pos:position pos:line="27" pos:column="35"/></operator><name pos:line="27" pos:column="31">m<pos:position pos:line="27" pos:column="32"/></name></expr></argument>)<pos:position pos:line="27" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="34"/></expr_stmt>

		<if pos:line="29" pos:column="17">if <condition pos:line="29" pos:column="20">(<expr><name pos:line="29" pos:column="21">len<pos:position pos:line="29" pos:column="24"/></name> <operator pos:line="29" pos:column="25">&gt;<pos:position pos:line="29" pos:column="29"/></operator> <name pos:line="29" pos:column="27">len1<pos:position pos:line="29" pos:column="31"/></name></expr>)<pos:position pos:line="29" pos:column="32"/></condition><then pos:line="29" pos:column="32"> <block pos:line="29" pos:column="33">{
			<if pos:line="30" pos:column="25">if <condition pos:line="30" pos:column="28">(<expr><name pos:line="30" pos:column="29">buf1<pos:position pos:line="30" pos:column="33"/></name></expr>)<pos:position pos:line="30" pos:column="34"/></condition><then pos:line="30" pos:column="34">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="31" pos:column="33">free<pos:position pos:line="31" pos:column="37"/></name><argument_list pos:line="31" pos:column="37">(<argument><expr><name pos:line="31" pos:column="38">buf1<pos:position pos:line="31" pos:column="42"/></name></expr></argument>)<pos:position pos:line="31" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="44"/></expr_stmt></block></then></if>
			<expr_stmt><expr><name pos:line="32" pos:column="25">buf1<pos:position pos:line="32" pos:column="29"/></name> <operator pos:line="32" pos:column="30">=<pos:position pos:line="32" pos:column="31"/></operator> <call><name pos:line="32" pos:column="32">new_array<pos:position pos:line="32" pos:column="41"/></name><argument_list pos:line="32" pos:column="41">(<argument><expr><name pos:line="32" pos:column="42">char<pos:position pos:line="32" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="48">len<pos:position pos:line="32" pos:column="51"/></name><operator pos:line="32" pos:column="51">+<pos:position pos:line="32" pos:column="52"/></operator><literal type="number" pos:line="32" pos:column="52">4<pos:position pos:line="32" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="55"/></expr_stmt>
			<expr_stmt><expr><name pos:line="33" pos:column="25">len1<pos:position pos:line="33" pos:column="29"/></name> <operator pos:line="33" pos:column="30">=<pos:position pos:line="33" pos:column="31"/></operator> <name pos:line="33" pos:column="32">len<pos:position pos:line="33" pos:column="35"/></name></expr>;<pos:position pos:line="33" pos:column="36"/></expr_stmt>
			<if pos:line="34" pos:column="25">if <condition pos:line="34" pos:column="28">(<expr><operator pos:line="34" pos:column="29">!<pos:position pos:line="34" pos:column="30"/></operator><name pos:line="34" pos:column="30">buf1<pos:position pos:line="34" pos:column="34"/></name></expr>)<pos:position pos:line="34" pos:column="35"/></condition><then pos:line="34" pos:column="35">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="35" pos:column="33">out_of_memory<pos:position pos:line="35" pos:column="46"/></name><argument_list pos:line="35" pos:column="46">(<argument><expr><literal type="string" pos:line="35" pos:column="47">"get_checksum2"<pos:position pos:line="35" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="64"/></expr_stmt></block></then></if>
		}<pos:position pos:line="36" pos:column="18"/></block></then></if>

		<expr_stmt><expr><call><name pos:line="38" pos:column="17">memcpy<pos:position pos:line="38" pos:column="23"/></name><argument_list pos:line="38" pos:column="23">(<argument><expr><name pos:line="38" pos:column="24">buf1<pos:position pos:line="38" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="30">buf<pos:position pos:line="38" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="35">len<pos:position pos:line="38" pos:column="38"/></name></expr></argument>)<pos:position pos:line="38" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="40"/></expr_stmt>
		<if pos:line="39" pos:column="17">if <condition pos:line="39" pos:column="20">(<expr><name pos:line="39" pos:column="21">checksum_seed<pos:position pos:line="39" pos:column="34"/></name></expr>)<pos:position pos:line="39" pos:column="35"/></condition><then pos:line="39" pos:column="35"> <block pos:line="39" pos:column="36">{
			<expr_stmt><expr><call><name pos:line="40" pos:column="25">SIVAL<pos:position pos:line="40" pos:column="30"/></name><argument_list pos:line="40" pos:column="30">(<argument><expr><name pos:line="40" pos:column="31">buf1<pos:position pos:line="40" pos:column="35"/></name></expr></argument>,<argument><expr><name pos:line="40" pos:column="36">len<pos:position pos:line="40" pos:column="39"/></name></expr></argument>,<argument><expr><name pos:line="40" pos:column="40">checksum_seed<pos:position pos:line="40" pos:column="53"/></name></expr></argument>)<pos:position pos:line="40" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="55"/></expr_stmt>
			<expr_stmt><expr><name pos:line="41" pos:column="25">len<pos:position pos:line="41" pos:column="28"/></name> <operator pos:line="41" pos:column="29">+=<pos:position pos:line="41" pos:column="31"/></operator> <literal type="number" pos:line="41" pos:column="32">4<pos:position pos:line="41" pos:column="33"/></literal></expr>;<pos:position pos:line="41" pos:column="34"/></expr_stmt>
		}<pos:position pos:line="42" pos:column="18"/></block></then></if>

		<for pos:line="44" pos:column="17">for <control pos:line="44" pos:column="21">(<init><expr><name pos:line="44" pos:column="22">i<pos:position pos:line="44" pos:column="23"/></name> <operator pos:line="44" pos:column="24">=<pos:position pos:line="44" pos:column="25"/></operator> <literal type="number" pos:line="44" pos:column="26">0<pos:position pos:line="44" pos:column="27"/></literal></expr>;<pos:position pos:line="44" pos:column="28"/></init> <condition><expr><name pos:line="44" pos:column="29">i<pos:position pos:line="44" pos:column="30"/></name> <operator pos:line="44" pos:column="31">+<pos:position pos:line="44" pos:column="32"/></operator> <name pos:line="44" pos:column="33">CSUM_CHUNK<pos:position pos:line="44" pos:column="43"/></name> <operator pos:line="44" pos:column="44">&lt;=<pos:position pos:line="44" pos:column="49"/></operator> <name pos:line="44" pos:column="47">len<pos:position pos:line="44" pos:column="50"/></name></expr>;<pos:position pos:line="44" pos:column="51"/></condition> <incr><expr><name pos:line="44" pos:column="52">i<pos:position pos:line="44" pos:column="53"/></name> <operator pos:line="44" pos:column="54">+=<pos:position pos:line="44" pos:column="56"/></operator> <name pos:line="44" pos:column="57">CSUM_CHUNK<pos:position pos:line="44" pos:column="67"/></name></expr></incr>)<pos:position pos:line="44" pos:column="68"/></control>
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="45" pos:column="25">mdfour_update<pos:position pos:line="45" pos:column="38"/></name><argument_list pos:line="45" pos:column="38">(<argument><expr><operator pos:line="45" pos:column="39">&amp;<pos:position pos:line="45" pos:column="44"/></operator><name pos:line="45" pos:column="40">m<pos:position pos:line="45" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="45" pos:column="43">(<pos:position pos:line="45" pos:column="44"/></operator><name pos:line="45" pos:column="44">uchar<pos:position pos:line="45" pos:column="49"/></name> <operator pos:line="45" pos:column="50">*<pos:position pos:line="45" pos:column="51"/></operator><operator pos:line="45" pos:column="51">)<pos:position pos:line="45" pos:column="52"/></operator><operator pos:line="45" pos:column="52">(<pos:position pos:line="45" pos:column="53"/></operator><name pos:line="45" pos:column="53">buf1<pos:position pos:line="45" pos:column="57"/></name><operator pos:line="45" pos:column="57">+<pos:position pos:line="45" pos:column="58"/></operator><name pos:line="45" pos:column="58">i<pos:position pos:line="45" pos:column="59"/></name><operator pos:line="45" pos:column="59">)<pos:position pos:line="45" pos:column="60"/></operator></expr></argument>, <argument><expr><name pos:line="45" pos:column="62">CSUM_CHUNK<pos:position pos:line="45" pos:column="72"/></name></expr></argument>)<pos:position pos:line="45" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="74"/></expr_stmt></block></for>

		<comment type="block" pos:line="47" pos:column="17">/*
		 * Prior to version 27 an incorrect MD4 checksum was computed
		 * by failing to call mdfour_tail() for block sizes that
		 * are multiples of 64.  This is fixed by calling mdfour_update()
		 * even when there are no more bytes.
		 */</comment>
		<if pos:line="53" pos:column="17">if <condition pos:line="53" pos:column="20">(<expr><name pos:line="53" pos:column="21">len<pos:position pos:line="53" pos:column="24"/></name> <operator pos:line="53" pos:column="25">-<pos:position pos:line="53" pos:column="26"/></operator> <name pos:line="53" pos:column="27">i<pos:position pos:line="53" pos:column="28"/></name> <operator pos:line="53" pos:column="29">&gt;<pos:position pos:line="53" pos:column="33"/></operator> <literal type="number" pos:line="53" pos:column="31">0<pos:position pos:line="53" pos:column="32"/></literal> <operator pos:line="53" pos:column="33">||<pos:position pos:line="53" pos:column="35"/></operator> <name pos:line="53" pos:column="36">protocol_version<pos:position pos:line="53" pos:column="52"/></name> <operator pos:line="53" pos:column="53">&gt;=<pos:position pos:line="53" pos:column="58"/></operator> <literal type="number" pos:line="53" pos:column="56">27<pos:position pos:line="53" pos:column="58"/></literal></expr>)<pos:position pos:line="53" pos:column="59"/></condition><then pos:line="53" pos:column="59">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="54" pos:column="25">mdfour_update<pos:position pos:line="54" pos:column="38"/></name><argument_list pos:line="54" pos:column="38">(<argument><expr><operator pos:line="54" pos:column="39">&amp;<pos:position pos:line="54" pos:column="44"/></operator><name pos:line="54" pos:column="40">m<pos:position pos:line="54" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="54" pos:column="43">(<pos:position pos:line="54" pos:column="44"/></operator><name pos:line="54" pos:column="44">uchar<pos:position pos:line="54" pos:column="49"/></name> <operator pos:line="54" pos:column="50">*<pos:position pos:line="54" pos:column="51"/></operator><operator pos:line="54" pos:column="51">)<pos:position pos:line="54" pos:column="52"/></operator><operator pos:line="54" pos:column="52">(<pos:position pos:line="54" pos:column="53"/></operator><name pos:line="54" pos:column="53">buf1<pos:position pos:line="54" pos:column="57"/></name><operator pos:line="54" pos:column="57">+<pos:position pos:line="54" pos:column="58"/></operator><name pos:line="54" pos:column="58">i<pos:position pos:line="54" pos:column="59"/></name><operator pos:line="54" pos:column="59">)<pos:position pos:line="54" pos:column="60"/></operator></expr></argument>, <argument><expr><name pos:line="54" pos:column="62">len<pos:position pos:line="54" pos:column="65"/></name><operator pos:line="54" pos:column="65">-<pos:position pos:line="54" pos:column="66"/></operator><name pos:line="54" pos:column="66">i<pos:position pos:line="54" pos:column="67"/></name></expr></argument>)<pos:position pos:line="54" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="69"/></expr_stmt></block></then></if>

		<expr_stmt><expr><call><name pos:line="56" pos:column="17">mdfour_result<pos:position pos:line="56" pos:column="30"/></name><argument_list pos:line="56" pos:column="30">(<argument><expr><operator pos:line="56" pos:column="31">&amp;<pos:position pos:line="56" pos:column="36"/></operator><name pos:line="56" pos:column="32">m<pos:position pos:line="56" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="56" pos:column="35">(<pos:position pos:line="56" pos:column="36"/></operator><name pos:line="56" pos:column="36">uchar<pos:position pos:line="56" pos:column="41"/></name> <operator pos:line="56" pos:column="42">*<pos:position pos:line="56" pos:column="43"/></operator><operator pos:line="56" pos:column="43">)<pos:position pos:line="56" pos:column="44"/></operator><name pos:line="56" pos:column="44">sum<pos:position pos:line="56" pos:column="47"/></name></expr></argument>)<pos:position pos:line="56" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="49"/></expr_stmt>
	}<pos:position pos:line="57" pos:column="10"/></block></else></if>
}<pos:position pos:line="58" pos:column="2"/></block></function></unit>
