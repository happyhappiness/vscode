<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_466_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">do_mkstemp<pos:position pos:line="1" pos:column="15"/></name><parameter_list pos:line="1" pos:column="15">(<parameter><decl><type><name pos:line="1" pos:column="16">char<pos:position pos:line="1" pos:column="20"/></name> <modifier pos:line="1" pos:column="21">*<pos:position pos:line="1" pos:column="22"/></modifier><specifier pos:line="1" pos:column="22">template<pos:position pos:line="1" pos:column="30"/></specifier></type></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="32">mode_t<pos:position pos:line="1" pos:column="38"/></name></type> <name pos:line="1" pos:column="39">perms<pos:position pos:line="1" pos:column="44"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="45"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<expr_stmt><expr><call><name pos:line="3" pos:column="9">RETURN_ERROR_IF<pos:position pos:line="3" pos:column="24"/></name><argument_list pos:line="3" pos:column="24">(<argument><expr><name pos:line="3" pos:column="25">dry_run<pos:position pos:line="3" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="3" pos:column="34">0<pos:position pos:line="3" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="3" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="3" pos:column="37"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="4" pos:column="9">RETURN_ERROR_IF<pos:position pos:line="4" pos:column="24"/></name><argument_list pos:line="4" pos:column="24">(<argument><expr><name pos:line="4" pos:column="25">read_only<pos:position pos:line="4" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="4" pos:column="36">EROFS<pos:position pos:line="4" pos:column="41"/></name></expr></argument>)<pos:position pos:line="4" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="43"/></expr_stmt>
	<expr_stmt><expr><name pos:line="5" pos:column="9">perms<pos:position pos:line="5" pos:column="14"/></name> <operator pos:line="5" pos:column="15">|=<pos:position pos:line="5" pos:column="17"/></operator> <name pos:line="5" pos:column="18">S_IWUSR<pos:position pos:line="5" pos:column="25"/></name></expr>;<pos:position pos:line="5" pos:column="26"/></expr_stmt>

<cpp:if pos:line="7" pos:column="1">#<cpp:directive pos:line="7" pos:column="2">if<pos:position pos:line="7" pos:column="4"/></cpp:directive> <expr><name pos:line="7" pos:column="5">defined<pos:position pos:line="7" pos:column="12"/></name> <name pos:line="7" pos:column="13">HAVE_SECURE_MKSTEMP<pos:position pos:line="7" pos:column="32"/></name> <operator pos:line="7" pos:column="33">&amp;&amp;<pos:position pos:line="7" pos:column="43"/></operator> <name pos:line="7" pos:column="36">defined<pos:position pos:line="7" pos:column="43"/></name> <name pos:line="7" pos:column="44">HAVE_FCHMOD<pos:position pos:line="7" pos:column="55"/></name> <operator pos:line="7" pos:column="56">&amp;&amp;<pos:position pos:line="7" pos:column="66"/></operator> <operator pos:line="7" pos:column="59">(<pos:position pos:line="7" pos:column="60"/></operator><operator pos:line="7" pos:column="60">!<pos:position pos:line="7" pos:column="61"/></operator><name pos:line="7" pos:column="61">defined<pos:position pos:line="7" pos:column="68"/></name> <name pos:line="7" pos:column="69">HAVE_OPEN64<pos:position pos:line="7" pos:column="80"/></name> <operator pos:line="7" pos:column="81">||<pos:position pos:line="7" pos:column="83"/></operator> <name pos:line="7" pos:column="84">defined<pos:position pos:line="7" pos:column="91"/></name> <name pos:line="7" pos:column="92">HAVE_MKSTEMP64<pos:position pos:line="7" pos:column="106"/></name><operator pos:line="7" pos:column="106">)<pos:position pos:line="7" pos:column="107"/></operator></expr></cpp:if>
	<block pos:line="8" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="9" pos:column="17">int<pos:position pos:line="9" pos:column="20"/></name></type> <name pos:line="9" pos:column="21">fd<pos:position pos:line="9" pos:column="23"/></name> <init pos:line="9" pos:column="24">= <macro><name pos:line="9" pos:column="26">mkstemp<pos:position pos:line="9" pos:column="33"/></name><argument_list pos:line="9" pos:column="33">(<argument pos:line="9" pos:column="34">template<pos:position pos:line="9" pos:column="42"/></argument>)<pos:position pos:line="9" pos:column="43"/></argument_list></macro></init></decl>;<pos:position pos:line="9" pos:column="44"/></decl_stmt>
		<if pos:line="10" pos:column="17">if <condition pos:line="10" pos:column="20">(<expr><name pos:line="10" pos:column="21">fd<pos:position pos:line="10" pos:column="23"/></name> <operator pos:line="10" pos:column="24">==<pos:position pos:line="10" pos:column="26"/></operator> <operator pos:line="10" pos:column="27">-<pos:position pos:line="10" pos:column="28"/></operator><literal type="number" pos:line="10" pos:column="28">1<pos:position pos:line="10" pos:column="29"/></literal></expr>)<pos:position pos:line="10" pos:column="30"/></condition><then pos:line="10" pos:column="30">
			<block type="pseudo"><return pos:line="11" pos:column="25">return <expr><operator pos:line="11" pos:column="32">-<pos:position pos:line="11" pos:column="33"/></operator><literal type="number" pos:line="11" pos:column="33">1<pos:position pos:line="11" pos:column="34"/></literal></expr>;<pos:position pos:line="11" pos:column="35"/></return></block></then></if>
		<if pos:line="12" pos:column="17">if <condition pos:line="12" pos:column="20">(<expr><call><name pos:line="12" pos:column="21">fchmod<pos:position pos:line="12" pos:column="27"/></name><argument_list pos:line="12" pos:column="27">(<argument><expr><name pos:line="12" pos:column="28">fd<pos:position pos:line="12" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="32">perms<pos:position pos:line="12" pos:column="37"/></name></expr></argument>)<pos:position pos:line="12" pos:column="38"/></argument_list></call> <operator pos:line="12" pos:column="39">!=<pos:position pos:line="12" pos:column="41"/></operator> <literal type="number" pos:line="12" pos:column="42">0<pos:position pos:line="12" pos:column="43"/></literal> <operator pos:line="12" pos:column="44">&amp;&amp;<pos:position pos:line="12" pos:column="54"/></operator> <name pos:line="12" pos:column="47">preserve_perms<pos:position pos:line="12" pos:column="61"/></name></expr>)<pos:position pos:line="12" pos:column="62"/></condition><then pos:line="12" pos:column="62"> <block pos:line="12" pos:column="63">{
			<decl_stmt><decl><type><name pos:line="13" pos:column="25">int<pos:position pos:line="13" pos:column="28"/></name></type> <name pos:line="13" pos:column="29">errno_save<pos:position pos:line="13" pos:column="39"/></name> <init pos:line="13" pos:column="40">= <expr><name pos:line="13" pos:column="42">errno<pos:position pos:line="13" pos:column="47"/></name></expr></init></decl>;<pos:position pos:line="13" pos:column="48"/></decl_stmt>
			<expr_stmt><expr><call><name pos:line="14" pos:column="25">close<pos:position pos:line="14" pos:column="30"/></name><argument_list pos:line="14" pos:column="30">(<argument><expr><name pos:line="14" pos:column="31">fd<pos:position pos:line="14" pos:column="33"/></name></expr></argument>)<pos:position pos:line="14" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="35"/></expr_stmt>
			<macro><name pos:line="15" pos:column="25">unlink<pos:position pos:line="15" pos:column="31"/></name><argument_list pos:line="15" pos:column="31">(<argument pos:line="15" pos:column="32">template<pos:position pos:line="15" pos:column="40"/></argument>)<pos:position pos:line="15" pos:column="41"/></argument_list></macro><empty_stmt pos:line="15" pos:column="41">;<pos:position pos:line="15" pos:column="42"/></empty_stmt>
			<expr_stmt><expr><name pos:line="16" pos:column="25">errno<pos:position pos:line="16" pos:column="30"/></name> <operator pos:line="16" pos:column="31">=<pos:position pos:line="16" pos:column="32"/></operator> <name pos:line="16" pos:column="33">errno_save<pos:position pos:line="16" pos:column="43"/></name></expr>;<pos:position pos:line="16" pos:column="44"/></expr_stmt>
			<return pos:line="17" pos:column="25">return <expr><operator pos:line="17" pos:column="32">-<pos:position pos:line="17" pos:column="33"/></operator><literal type="number" pos:line="17" pos:column="33">1<pos:position pos:line="17" pos:column="34"/></literal></expr>;<pos:position pos:line="17" pos:column="35"/></return>
		}<pos:position pos:line="18" pos:column="18"/></block></then></if>
<cpp:if pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">if<pos:position pos:line="19" pos:column="4"/></cpp:directive> <expr><name pos:line="19" pos:column="5">defined<pos:position pos:line="19" pos:column="12"/></name> <name pos:line="19" pos:column="13">HAVE_SETMODE<pos:position pos:line="19" pos:column="25"/></name> <operator pos:line="19" pos:column="26">&amp;&amp;<pos:position pos:line="19" pos:column="36"/></operator> <name pos:line="19" pos:column="29">O_BINARY<pos:position pos:line="19" pos:column="37"/></name></expr></cpp:if>
		<expr_stmt><expr><call><name pos:line="20" pos:column="17">setmode<pos:position pos:line="20" pos:column="24"/></name><argument_list pos:line="20" pos:column="24">(<argument><expr><name pos:line="20" pos:column="25">fd<pos:position pos:line="20" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="29">O_BINARY<pos:position pos:line="20" pos:column="37"/></name></expr></argument>)<pos:position pos:line="20" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="39"/></expr_stmt>
<cpp:endif pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">endif<pos:position pos:line="21" pos:column="7"/></cpp:directive></cpp:endif>
		<return pos:line="22" pos:column="17">return <expr><name pos:line="22" pos:column="24">fd<pos:position pos:line="22" pos:column="26"/></name></expr>;<pos:position pos:line="22" pos:column="27"/></return>
	}<pos:position pos:line="23" pos:column="10"/></block>
<cpp:else pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">else<pos:position pos:line="24" pos:column="6"/></cpp:directive></cpp:else>
	<if pos:line="25" pos:column="9">if <condition pos:line="25" pos:column="12">(<expr><operator pos:line="25" pos:column="13">!<pos:position pos:line="25" pos:column="14"/></operator><macro><name pos:line="25" pos:column="14">mktemp<pos:position pos:line="25" pos:column="20"/></name><argument_list pos:line="25" pos:column="20">(<argument pos:line="25" pos:column="21">template<pos:position pos:line="25" pos:column="29"/></argument>)<pos:position pos:line="25" pos:column="30"/></argument_list></macro></expr>)<pos:position pos:line="25" pos:column="31"/></condition><then pos:line="25" pos:column="31">
		<block type="pseudo"><return pos:line="26" pos:column="17">return <expr><operator pos:line="26" pos:column="24">-<pos:position pos:line="26" pos:column="25"/></operator><literal type="number" pos:line="26" pos:column="25">1<pos:position pos:line="26" pos:column="26"/></literal></expr>;<pos:position pos:line="26" pos:column="27"/></return></block></then></if>
	<return pos:line="27" pos:column="9">return <macro><name pos:line="27" pos:column="16">do_open<pos:position pos:line="27" pos:column="23"/></name><argument_list pos:line="27" pos:column="23">(<argument pos:line="27" pos:column="24">template<pos:position pos:line="27" pos:column="32"/></argument>, <argument pos:line="27" pos:column="34">O_RDWR|O_EXCL|O_CREAT<pos:position pos:line="27" pos:column="55"/></argument>, <argument pos:line="27" pos:column="57">perms<pos:position pos:line="27" pos:column="62"/></argument>)<pos:position pos:line="27" pos:column="63"/></argument_list></macro>;<pos:position pos:line="27" pos:column="64"/></return>
<cpp:endif pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">endif<pos:position pos:line="28" pos:column="7"/></cpp:directive></cpp:endif>
}<pos:position pos:line="29" pos:column="2"/></block></function></unit>
