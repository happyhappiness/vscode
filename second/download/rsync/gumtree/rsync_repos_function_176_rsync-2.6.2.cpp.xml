<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_176_rsync-2.6.2.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">generate_files<pos:position pos:line="1" pos:column="20"/></name><parameter_list pos:line="1" pos:column="20">(<parameter><decl><type><name pos:line="1" pos:column="21">int<pos:position pos:line="1" pos:column="24"/></name></type> <name pos:line="1" pos:column="25">f<pos:position pos:line="1" pos:column="26"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="28">struct<pos:position pos:line="1" pos:column="34"/></name> <name pos:line="1" pos:column="35">file_list<pos:position pos:line="1" pos:column="44"/></name></name> <modifier pos:line="1" pos:column="45">*<pos:position pos:line="1" pos:column="46"/></modifier></type><name pos:line="1" pos:column="46">flist<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="53">char<pos:position pos:line="1" pos:column="57"/></name> <modifier pos:line="1" pos:column="58">*<pos:position pos:line="1" pos:column="59"/></modifier></type><name pos:line="1" pos:column="59">local_name<pos:position pos:line="1" pos:column="69"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="70"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">i<pos:position pos:line="3" pos:column="14"/></name></decl>;<pos:position pos:line="3" pos:column="15"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">phase<pos:position pos:line="4" pos:column="18"/></name><init pos:line="4" pos:column="18">=<expr><literal type="number" pos:line="4" pos:column="19">0<pos:position pos:line="4" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="21"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">char<pos:position pos:line="5" pos:column="13"/></name></type> <name><name pos:line="5" pos:column="14">fbuf<pos:position pos:line="5" pos:column="18"/></name><index pos:line="5" pos:column="18">[<expr><name pos:line="5" pos:column="19">MAXPATHLEN<pos:position pos:line="5" pos:column="29"/></name></expr>]<pos:position pos:line="5" pos:column="30"/></index></name></decl>;<pos:position pos:line="5" pos:column="31"/></decl_stmt>

	<if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<expr><name pos:line="7" pos:column="13">verbose<pos:position pos:line="7" pos:column="20"/></name> <operator pos:line="7" pos:column="21">&gt;<pos:position pos:line="7" pos:column="25"/></operator> <literal type="number" pos:line="7" pos:column="23">2<pos:position pos:line="7" pos:column="24"/></literal></expr>)<pos:position pos:line="7" pos:column="25"/></condition><then pos:line="7" pos:column="25"> <block pos:line="7" pos:column="26">{
		<expr_stmt><expr><call><name pos:line="8" pos:column="17">rprintf<pos:position pos:line="8" pos:column="24"/></name><argument_list pos:line="8" pos:column="24">(<argument><expr><name pos:line="8" pos:column="25">FINFO<pos:position pos:line="8" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="8" pos:column="32">"generator starting pid=%ld count=%d\n"<pos:position pos:line="8" pos:column="71"/></literal></expr></argument>,
			<argument><expr><operator pos:line="9" pos:column="25">(<pos:position pos:line="9" pos:column="26"/></operator><name pos:line="9" pos:column="26">long<pos:position pos:line="9" pos:column="30"/></name><operator pos:line="9" pos:column="30">)<pos:position pos:line="9" pos:column="31"/></operator><call><name pos:line="9" pos:column="31">getpid<pos:position pos:line="9" pos:column="37"/></name><argument_list pos:line="9" pos:column="37">()<pos:position pos:line="9" pos:column="39"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="9" pos:column="41">flist<pos:position pos:line="9" pos:column="46"/></name><operator pos:line="9" pos:column="46">-&gt;<pos:position pos:line="9" pos:column="51"/></operator><name pos:line="9" pos:column="48">count<pos:position pos:line="9" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="9" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="55"/></expr_stmt>
	}<pos:position pos:line="10" pos:column="10"/></block></then></if>

	<if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><name pos:line="12" pos:column="13">verbose<pos:position pos:line="12" pos:column="20"/></name> <operator pos:line="12" pos:column="21">&gt;=<pos:position pos:line="12" pos:column="26"/></operator> <literal type="number" pos:line="12" pos:column="24">2<pos:position pos:line="12" pos:column="25"/></literal></expr>)<pos:position pos:line="12" pos:column="26"/></condition><then pos:line="12" pos:column="26"> <block pos:line="12" pos:column="27">{
		<expr_stmt><expr><call><name pos:line="13" pos:column="17">rprintf<pos:position pos:line="13" pos:column="24"/></name><argument_list pos:line="13" pos:column="24">(<argument><expr><name pos:line="13" pos:column="25">FINFO<pos:position pos:line="13" pos:column="30"/></name></expr></argument>,
			<argument><expr><ternary><condition><expr><call><name pos:line="14" pos:column="25">disable_deltas_p<pos:position pos:line="14" pos:column="41"/></name><argument_list pos:line="14" pos:column="41">()<pos:position pos:line="14" pos:column="43"/></argument_list></call></expr>
			?<pos:position pos:line="15" pos:column="26"/></condition><then pos:line="15" pos:column="26"> <expr><literal type="string" pos:line="15" pos:column="27">"delta-transmission disabled for local transfer or --whole-file\n"<pos:position pos:line="15" pos:column="93"/></literal></expr>
			<pos:position pos:line="16" pos:column="4"/></then><else pos:line="16" pos:column="25">: <expr><literal type="string" pos:line="16" pos:column="27">"delta transmission enabled\n"<pos:position pos:line="16" pos:column="57"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="16" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="59"/></expr_stmt>
	}<pos:position pos:line="17" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="19" pos:column="9">/* we expect to just sit around now, so don't exit on a
	   timeout. If we really get a timeout then the other process should
	   exit */</comment>
	<expr_stmt><expr><name pos:line="22" pos:column="9">io_timeout<pos:position pos:line="22" pos:column="19"/></name> <operator pos:line="22" pos:column="20">=<pos:position pos:line="22" pos:column="21"/></operator> <literal type="number" pos:line="22" pos:column="22">0<pos:position pos:line="22" pos:column="23"/></literal></expr>;<pos:position pos:line="22" pos:column="24"/></expr_stmt>

	<for pos:line="24" pos:column="9">for <control pos:line="24" pos:column="13">(<init><expr><name pos:line="24" pos:column="14">i<pos:position pos:line="24" pos:column="15"/></name> <operator pos:line="24" pos:column="16">=<pos:position pos:line="24" pos:column="17"/></operator> <literal type="number" pos:line="24" pos:column="18">0<pos:position pos:line="24" pos:column="19"/></literal></expr>;<pos:position pos:line="24" pos:column="20"/></init> <condition><expr><name pos:line="24" pos:column="21">i<pos:position pos:line="24" pos:column="22"/></name> <operator pos:line="24" pos:column="23">&lt;<pos:position pos:line="24" pos:column="27"/></operator> <name><name pos:line="24" pos:column="25">flist<pos:position pos:line="24" pos:column="30"/></name><operator pos:line="24" pos:column="30">-&gt;<pos:position pos:line="24" pos:column="35"/></operator><name pos:line="24" pos:column="32">count<pos:position pos:line="24" pos:column="37"/></name></name></expr>;<pos:position pos:line="24" pos:column="38"/></condition> <incr><expr><name pos:line="24" pos:column="39">i<pos:position pos:line="24" pos:column="40"/></name><operator pos:line="24" pos:column="40">++<pos:position pos:line="24" pos:column="42"/></operator></expr></incr>)<pos:position pos:line="24" pos:column="43"/></control> <block pos:line="24" pos:column="44">{
		<decl_stmt><decl><type><name><name pos:line="25" pos:column="17">struct<pos:position pos:line="25" pos:column="23"/></name> <name pos:line="25" pos:column="24">file_struct<pos:position pos:line="25" pos:column="35"/></name></name> <modifier pos:line="25" pos:column="36">*<pos:position pos:line="25" pos:column="37"/></modifier></type><name pos:line="25" pos:column="37">file<pos:position pos:line="25" pos:column="41"/></name> <init pos:line="25" pos:column="42">= <expr><name><name pos:line="25" pos:column="44">flist<pos:position pos:line="25" pos:column="49"/></name><operator pos:line="25" pos:column="49">-&gt;<pos:position pos:line="25" pos:column="54"/></operator><name pos:line="25" pos:column="51">files<pos:position pos:line="25" pos:column="56"/></name><index pos:line="25" pos:column="56">[<expr><name pos:line="25" pos:column="57">i<pos:position pos:line="25" pos:column="58"/></name></expr>]<pos:position pos:line="25" pos:column="59"/></index></name></expr></init></decl>;<pos:position pos:line="25" pos:column="60"/></decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="26" pos:column="17">struct<pos:position pos:line="26" pos:column="23"/></name> <name pos:line="26" pos:column="24">file_struct<pos:position pos:line="26" pos:column="35"/></name></name></type> <name pos:line="26" pos:column="36">copy<pos:position pos:line="26" pos:column="40"/></name></decl>;<pos:position pos:line="26" pos:column="41"/></decl_stmt>

		<if pos:line="28" pos:column="17">if <condition pos:line="28" pos:column="20">(<expr><operator pos:line="28" pos:column="21">!<pos:position pos:line="28" pos:column="22"/></operator><name><name pos:line="28" pos:column="22">file<pos:position pos:line="28" pos:column="26"/></name><operator pos:line="28" pos:column="26">-&gt;<pos:position pos:line="28" pos:column="31"/></operator><name pos:line="28" pos:column="28">basename<pos:position pos:line="28" pos:column="36"/></name></name></expr>)<pos:position pos:line="28" pos:column="37"/></condition><then pos:line="28" pos:column="37">
			<block type="pseudo"><continue pos:line="29" pos:column="25">continue;<pos:position pos:line="29" pos:column="34"/></continue></block></then></if>
		<comment type="block" pos:line="30" pos:column="17">/* we need to ensure that any directories we create have writeable
		   permissions initially so that we can create the files within
		   them. This is then fixed after the files are transferred */</comment>
		<if pos:line="33" pos:column="17">if <condition pos:line="33" pos:column="20">(<expr><operator pos:line="33" pos:column="21">!<pos:position pos:line="33" pos:column="22"/></operator><name pos:line="33" pos:column="22">am_root<pos:position pos:line="33" pos:column="29"/></name> <operator pos:line="33" pos:column="30">&amp;&amp;<pos:position pos:line="33" pos:column="40"/></operator> <call><name pos:line="33" pos:column="33">S_ISDIR<pos:position pos:line="33" pos:column="40"/></name><argument_list pos:line="33" pos:column="40">(<argument><expr><name><name pos:line="33" pos:column="41">file<pos:position pos:line="33" pos:column="45"/></name><operator pos:line="33" pos:column="45">-&gt;<pos:position pos:line="33" pos:column="50"/></operator><name pos:line="33" pos:column="47">mode<pos:position pos:line="33" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="33" pos:column="52"/></argument_list></call> <operator pos:line="33" pos:column="53">&amp;&amp;<pos:position pos:line="33" pos:column="63"/></operator> <operator pos:line="33" pos:column="56">!<pos:position pos:line="33" pos:column="57"/></operator><operator pos:line="33" pos:column="57">(<pos:position pos:line="33" pos:column="58"/></operator><name><name pos:line="33" pos:column="58">file<pos:position pos:line="33" pos:column="62"/></name><operator pos:line="33" pos:column="62">-&gt;<pos:position pos:line="33" pos:column="67"/></operator><name pos:line="33" pos:column="64">mode<pos:position pos:line="33" pos:column="68"/></name></name> <operator pos:line="33" pos:column="69">&amp;<pos:position pos:line="33" pos:column="74"/></operator> <name pos:line="33" pos:column="71">S_IWUSR<pos:position pos:line="33" pos:column="78"/></name><operator pos:line="33" pos:column="78">)<pos:position pos:line="33" pos:column="79"/></operator></expr>)<pos:position pos:line="33" pos:column="80"/></condition><then pos:line="33" pos:column="80"> <block pos:line="33" pos:column="81">{
			<expr_stmt><expr><name pos:line="34" pos:column="25">copy<pos:position pos:line="34" pos:column="29"/></name> <operator pos:line="34" pos:column="30">=<pos:position pos:line="34" pos:column="31"/></operator> <operator pos:line="34" pos:column="32">*<pos:position pos:line="34" pos:column="33"/></operator><name pos:line="34" pos:column="33">file<pos:position pos:line="34" pos:column="37"/></name></expr>;<pos:position pos:line="34" pos:column="38"/></expr_stmt>
			<comment type="block" pos:line="35" pos:column="25">/* XXX: Could this be causing a problem on SCO?  Perhaps their
			 * handling of permissions is strange? */</comment>
			<expr_stmt><expr><name><name pos:line="37" pos:column="25">copy<pos:position pos:line="37" pos:column="29"/></name><operator pos:line="37" pos:column="29">.<pos:position pos:line="37" pos:column="30"/></operator><name pos:line="37" pos:column="30">mode<pos:position pos:line="37" pos:column="34"/></name></name> <operator pos:line="37" pos:column="35">|=<pos:position pos:line="37" pos:column="37"/></operator> <name pos:line="37" pos:column="38">S_IWUSR<pos:position pos:line="37" pos:column="45"/></name></expr>;<pos:position pos:line="37" pos:column="46"/></expr_stmt> <comment type="block" pos:line="37" pos:column="47">/* user write */</comment>
			<expr_stmt><expr><name pos:line="38" pos:column="25">file<pos:position pos:line="38" pos:column="29"/></name> <operator pos:line="38" pos:column="30">=<pos:position pos:line="38" pos:column="31"/></operator> <operator pos:line="38" pos:column="32">&amp;<pos:position pos:line="38" pos:column="37"/></operator><name pos:line="38" pos:column="33">copy<pos:position pos:line="38" pos:column="37"/></name></expr>;<pos:position pos:line="38" pos:column="38"/></expr_stmt>
		}<pos:position pos:line="39" pos:column="18"/></block></then></if>

		<expr_stmt><expr><call><name pos:line="41" pos:column="17">recv_generator<pos:position pos:line="41" pos:column="31"/></name><argument_list pos:line="41" pos:column="31">(<argument><expr><ternary><condition><expr><name pos:line="41" pos:column="32">local_name<pos:position pos:line="41" pos:column="42"/></name></expr> ?<pos:position pos:line="41" pos:column="44"/></condition><then pos:line="41" pos:column="44"> <expr><name pos:line="41" pos:column="45">local_name<pos:position pos:line="41" pos:column="55"/></name></expr> <pos:position pos:line="41" pos:column="56"/></then><else pos:line="41" pos:column="56">: <expr><call><name pos:line="41" pos:column="58">f_name_to<pos:position pos:line="41" pos:column="67"/></name><argument_list pos:line="41" pos:column="67">(<argument><expr><name pos:line="41" pos:column="68">file<pos:position pos:line="41" pos:column="72"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="74">fbuf<pos:position pos:line="41" pos:column="78"/></name></expr></argument>)<pos:position pos:line="41" pos:column="79"/></argument_list></call></expr></else></ternary></expr></argument>,
			       <argument><expr><name pos:line="42" pos:column="32">file<pos:position pos:line="42" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="38">i<pos:position pos:line="42" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="41">f<pos:position pos:line="42" pos:column="42"/></name></expr></argument>)<pos:position pos:line="42" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="44"/></expr_stmt>
	}<pos:position pos:line="43" pos:column="10"/></block></for>

	<expr_stmt><expr><name pos:line="45" pos:column="9">phase<pos:position pos:line="45" pos:column="14"/></name><operator pos:line="45" pos:column="14">++<pos:position pos:line="45" pos:column="16"/></operator></expr>;<pos:position pos:line="45" pos:column="17"/></expr_stmt>
	<expr_stmt><expr><name pos:line="46" pos:column="9">csum_length<pos:position pos:line="46" pos:column="20"/></name> <operator pos:line="46" pos:column="21">=<pos:position pos:line="46" pos:column="22"/></operator> <name pos:line="46" pos:column="23">SUM_LENGTH<pos:position pos:line="46" pos:column="33"/></name></expr>;<pos:position pos:line="46" pos:column="34"/></expr_stmt>
	<expr_stmt><expr><name pos:line="47" pos:column="9">ignore_times<pos:position pos:line="47" pos:column="21"/></name><operator pos:line="47" pos:column="21">=<pos:position pos:line="47" pos:column="22"/></operator><literal type="number" pos:line="47" pos:column="22">1<pos:position pos:line="47" pos:column="23"/></literal></expr>;<pos:position pos:line="47" pos:column="24"/></expr_stmt>

	<if pos:line="49" pos:column="9">if <condition pos:line="49" pos:column="12">(<expr><name pos:line="49" pos:column="13">verbose<pos:position pos:line="49" pos:column="20"/></name> <operator pos:line="49" pos:column="21">&gt;<pos:position pos:line="49" pos:column="25"/></operator> <literal type="number" pos:line="49" pos:column="23">2<pos:position pos:line="49" pos:column="24"/></literal></expr>)<pos:position pos:line="49" pos:column="25"/></condition><then pos:line="49" pos:column="25">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="50" pos:column="17">rprintf<pos:position pos:line="50" pos:column="24"/></name><argument_list pos:line="50" pos:column="24">(<argument><expr><name pos:line="50" pos:column="25">FINFO<pos:position pos:line="50" pos:column="30"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="50" pos:column="31">"generate_files phase=%d\n"<pos:position pos:line="50" pos:column="58"/></literal></expr></argument>,<argument><expr><name pos:line="50" pos:column="59">phase<pos:position pos:line="50" pos:column="64"/></name></expr></argument>)<pos:position pos:line="50" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="66"/></expr_stmt></block></then></if>

	<expr_stmt><expr><call><name pos:line="52" pos:column="9">write_int<pos:position pos:line="52" pos:column="18"/></name><argument_list pos:line="52" pos:column="18">(<argument><expr><name pos:line="52" pos:column="19">f<pos:position pos:line="52" pos:column="20"/></name></expr></argument>,<argument><expr><operator pos:line="52" pos:column="21">-<pos:position pos:line="52" pos:column="22"/></operator><literal type="number" pos:line="52" pos:column="22">1<pos:position pos:line="52" pos:column="23"/></literal></expr></argument>)<pos:position pos:line="52" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="25"/></expr_stmt>

	<comment type="block" pos:line="54" pos:column="9">/* files can cycle through the system more than once
	 * to catch initial checksum errors */</comment>
	<while pos:line="56" pos:column="9">while <condition pos:line="56" pos:column="15">(<expr><operator pos:line="56" pos:column="16">(<pos:position pos:line="56" pos:column="17"/></operator><name pos:line="56" pos:column="17">i<pos:position pos:line="56" pos:column="18"/></name> <operator pos:line="56" pos:column="19">=<pos:position pos:line="56" pos:column="20"/></operator> <call><name pos:line="56" pos:column="21">get_redo_num<pos:position pos:line="56" pos:column="33"/></name><argument_list pos:line="56" pos:column="33">()<pos:position pos:line="56" pos:column="35"/></argument_list></call><operator pos:line="56" pos:column="35">)<pos:position pos:line="56" pos:column="36"/></operator> <operator pos:line="56" pos:column="37">!=<pos:position pos:line="56" pos:column="39"/></operator> <operator pos:line="56" pos:column="40">-<pos:position pos:line="56" pos:column="41"/></operator><literal type="number" pos:line="56" pos:column="41">1<pos:position pos:line="56" pos:column="42"/></literal></expr>)<pos:position pos:line="56" pos:column="43"/></condition> <block pos:line="56" pos:column="44">{
		<decl_stmt><decl><type><name><name pos:line="57" pos:column="17">struct<pos:position pos:line="57" pos:column="23"/></name> <name pos:line="57" pos:column="24">file_struct<pos:position pos:line="57" pos:column="35"/></name></name> <modifier pos:line="57" pos:column="36">*<pos:position pos:line="57" pos:column="37"/></modifier></type><name pos:line="57" pos:column="37">file<pos:position pos:line="57" pos:column="41"/></name> <init pos:line="57" pos:column="42">= <expr><name><name pos:line="57" pos:column="44">flist<pos:position pos:line="57" pos:column="49"/></name><operator pos:line="57" pos:column="49">-&gt;<pos:position pos:line="57" pos:column="54"/></operator><name pos:line="57" pos:column="51">files<pos:position pos:line="57" pos:column="56"/></name><index pos:line="57" pos:column="56">[<expr><name pos:line="57" pos:column="57">i<pos:position pos:line="57" pos:column="58"/></name></expr>]<pos:position pos:line="57" pos:column="59"/></index></name></expr></init></decl>;<pos:position pos:line="57" pos:column="60"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="58" pos:column="17">recv_generator<pos:position pos:line="58" pos:column="31"/></name><argument_list pos:line="58" pos:column="31">(<argument><expr><ternary><condition><expr><name pos:line="58" pos:column="32">local_name<pos:position pos:line="58" pos:column="42"/></name></expr> ?<pos:position pos:line="58" pos:column="44"/></condition><then pos:line="58" pos:column="44"> <expr><name pos:line="58" pos:column="45">local_name<pos:position pos:line="58" pos:column="55"/></name></expr> <pos:position pos:line="58" pos:column="56"/></then><else pos:line="58" pos:column="56">: <expr><call><name pos:line="58" pos:column="58">f_name_to<pos:position pos:line="58" pos:column="67"/></name><argument_list pos:line="58" pos:column="67">(<argument><expr><name pos:line="58" pos:column="68">file<pos:position pos:line="58" pos:column="72"/></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="74">fbuf<pos:position pos:line="58" pos:column="78"/></name></expr></argument>)<pos:position pos:line="58" pos:column="79"/></argument_list></call></expr></else></ternary></expr></argument>,
			       <argument><expr><name pos:line="59" pos:column="32">file<pos:position pos:line="59" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="38">i<pos:position pos:line="59" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="41">f<pos:position pos:line="59" pos:column="42"/></name></expr></argument>)<pos:position pos:line="59" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="44"/></expr_stmt>
	}<pos:position pos:line="60" pos:column="10"/></block></while>

	<expr_stmt><expr><name pos:line="62" pos:column="9">phase<pos:position pos:line="62" pos:column="14"/></name><operator pos:line="62" pos:column="14">++<pos:position pos:line="62" pos:column="16"/></operator></expr>;<pos:position pos:line="62" pos:column="17"/></expr_stmt>
	<if pos:line="63" pos:column="9">if <condition pos:line="63" pos:column="12">(<expr><name pos:line="63" pos:column="13">verbose<pos:position pos:line="63" pos:column="20"/></name> <operator pos:line="63" pos:column="21">&gt;<pos:position pos:line="63" pos:column="25"/></operator> <literal type="number" pos:line="63" pos:column="23">2<pos:position pos:line="63" pos:column="24"/></literal></expr>)<pos:position pos:line="63" pos:column="25"/></condition><then pos:line="63" pos:column="25">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="64" pos:column="17">rprintf<pos:position pos:line="64" pos:column="24"/></name><argument_list pos:line="64" pos:column="24">(<argument><expr><name pos:line="64" pos:column="25">FINFO<pos:position pos:line="64" pos:column="30"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="64" pos:column="31">"generate_files phase=%d\n"<pos:position pos:line="64" pos:column="58"/></literal></expr></argument>,<argument><expr><name pos:line="64" pos:column="59">phase<pos:position pos:line="64" pos:column="64"/></name></expr></argument>)<pos:position pos:line="64" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="66"/></expr_stmt></block></then></if>

	<expr_stmt><expr><call><name pos:line="66" pos:column="9">write_int<pos:position pos:line="66" pos:column="18"/></name><argument_list pos:line="66" pos:column="18">(<argument><expr><name pos:line="66" pos:column="19">f<pos:position pos:line="66" pos:column="20"/></name></expr></argument>,<argument><expr><operator pos:line="66" pos:column="21">-<pos:position pos:line="66" pos:column="22"/></operator><literal type="number" pos:line="66" pos:column="22">1<pos:position pos:line="66" pos:column="23"/></literal></expr></argument>)<pos:position pos:line="66" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="25"/></expr_stmt>

	<if pos:line="68" pos:column="9">if <condition pos:line="68" pos:column="12">(<expr><name pos:line="68" pos:column="13">preserve_hard_links<pos:position pos:line="68" pos:column="32"/></name></expr>)<pos:position pos:line="68" pos:column="33"/></condition><then pos:line="68" pos:column="33">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="69" pos:column="17">do_hard_links<pos:position pos:line="69" pos:column="30"/></name><argument_list pos:line="69" pos:column="30">()<pos:position pos:line="69" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="33"/></expr_stmt></block></then></if>

	<comment type="block" pos:line="71" pos:column="9">/* now we need to fix any directory permissions that were
	 * modified during the transfer */</comment>
	<for pos:line="73" pos:column="9">for <control pos:line="73" pos:column="13">(<init><expr><name pos:line="73" pos:column="14">i<pos:position pos:line="73" pos:column="15"/></name> <operator pos:line="73" pos:column="16">=<pos:position pos:line="73" pos:column="17"/></operator> <literal type="number" pos:line="73" pos:column="18">0<pos:position pos:line="73" pos:column="19"/></literal></expr>;<pos:position pos:line="73" pos:column="20"/></init> <condition><expr><name pos:line="73" pos:column="21">i<pos:position pos:line="73" pos:column="22"/></name> <operator pos:line="73" pos:column="23">&lt;<pos:position pos:line="73" pos:column="27"/></operator> <name><name pos:line="73" pos:column="25">flist<pos:position pos:line="73" pos:column="30"/></name><operator pos:line="73" pos:column="30">-&gt;<pos:position pos:line="73" pos:column="35"/></operator><name pos:line="73" pos:column="32">count<pos:position pos:line="73" pos:column="37"/></name></name></expr>;<pos:position pos:line="73" pos:column="38"/></condition> <incr><expr><name pos:line="73" pos:column="39">i<pos:position pos:line="73" pos:column="40"/></name><operator pos:line="73" pos:column="40">++<pos:position pos:line="73" pos:column="42"/></operator></expr></incr>)<pos:position pos:line="73" pos:column="43"/></control> <block pos:line="73" pos:column="44">{
		<decl_stmt><decl><type><name><name pos:line="74" pos:column="17">struct<pos:position pos:line="74" pos:column="23"/></name> <name pos:line="74" pos:column="24">file_struct<pos:position pos:line="74" pos:column="35"/></name></name> <modifier pos:line="74" pos:column="36">*<pos:position pos:line="74" pos:column="37"/></modifier></type><name pos:line="74" pos:column="37">file<pos:position pos:line="74" pos:column="41"/></name> <init pos:line="74" pos:column="42">= <expr><name><name pos:line="74" pos:column="44">flist<pos:position pos:line="74" pos:column="49"/></name><operator pos:line="74" pos:column="49">-&gt;<pos:position pos:line="74" pos:column="54"/></operator><name pos:line="74" pos:column="51">files<pos:position pos:line="74" pos:column="56"/></name><index pos:line="74" pos:column="56">[<expr><name pos:line="74" pos:column="57">i<pos:position pos:line="74" pos:column="58"/></name></expr>]<pos:position pos:line="74" pos:column="59"/></index></name></expr></init></decl>;<pos:position pos:line="74" pos:column="60"/></decl_stmt>
		<if pos:line="75" pos:column="17">if <condition pos:line="75" pos:column="20">(<expr><operator pos:line="75" pos:column="21">!<pos:position pos:line="75" pos:column="22"/></operator><name><name pos:line="75" pos:column="22">file<pos:position pos:line="75" pos:column="26"/></name><operator pos:line="75" pos:column="26">-&gt;<pos:position pos:line="75" pos:column="31"/></operator><name pos:line="75" pos:column="28">basename<pos:position pos:line="75" pos:column="36"/></name></name> <operator pos:line="75" pos:column="37">||<pos:position pos:line="75" pos:column="39"/></operator> <operator pos:line="75" pos:column="40">!<pos:position pos:line="75" pos:column="41"/></operator><call><name pos:line="75" pos:column="41">S_ISDIR<pos:position pos:line="75" pos:column="48"/></name><argument_list pos:line="75" pos:column="48">(<argument><expr><name><name pos:line="75" pos:column="49">file<pos:position pos:line="75" pos:column="53"/></name><operator pos:line="75" pos:column="53">-&gt;<pos:position pos:line="75" pos:column="58"/></operator><name pos:line="75" pos:column="55">mode<pos:position pos:line="75" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="75" pos:column="60"/></argument_list></call></expr>)<pos:position pos:line="75" pos:column="61"/></condition><then pos:line="75" pos:column="61"> <block type="pseudo"><continue pos:line="75" pos:column="62">continue;<pos:position pos:line="75" pos:column="71"/></continue></block></then></if>
		<expr_stmt><expr><call><name pos:line="76" pos:column="17">recv_generator<pos:position pos:line="76" pos:column="31"/></name><argument_list pos:line="76" pos:column="31">(<argument><expr><ternary><condition><expr><name pos:line="76" pos:column="32">local_name<pos:position pos:line="76" pos:column="42"/></name></expr> ?<pos:position pos:line="76" pos:column="44"/></condition><then pos:line="76" pos:column="44"> <expr><name pos:line="76" pos:column="45">local_name<pos:position pos:line="76" pos:column="55"/></name></expr> <pos:position pos:line="76" pos:column="56"/></then><else pos:line="76" pos:column="56">: <expr><call><name pos:line="76" pos:column="58">f_name<pos:position pos:line="76" pos:column="64"/></name><argument_list pos:line="76" pos:column="64">(<argument><expr><name pos:line="76" pos:column="65">file<pos:position pos:line="76" pos:column="69"/></name></expr></argument>)<pos:position pos:line="76" pos:column="70"/></argument_list></call></expr></else></ternary></expr></argument>,
			       <argument><expr><name pos:line="77" pos:column="32">file<pos:position pos:line="77" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="77" pos:column="38">i<pos:position pos:line="77" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="77" pos:column="41">-<pos:position pos:line="77" pos:column="42"/></operator><literal type="number" pos:line="77" pos:column="42">1<pos:position pos:line="77" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="77" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="45"/></expr_stmt>
	}<pos:position pos:line="78" pos:column="10"/></block></for>

	<if pos:line="80" pos:column="9">if <condition pos:line="80" pos:column="12">(<expr><name pos:line="80" pos:column="13">verbose<pos:position pos:line="80" pos:column="20"/></name> <operator pos:line="80" pos:column="21">&gt;<pos:position pos:line="80" pos:column="25"/></operator> <literal type="number" pos:line="80" pos:column="23">2<pos:position pos:line="80" pos:column="24"/></literal></expr>)<pos:position pos:line="80" pos:column="25"/></condition><then pos:line="80" pos:column="25">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="81" pos:column="17">rprintf<pos:position pos:line="81" pos:column="24"/></name><argument_list pos:line="81" pos:column="24">(<argument><expr><name pos:line="81" pos:column="25">FINFO<pos:position pos:line="81" pos:column="30"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="81" pos:column="31">"generate_files finished\n"<pos:position pos:line="81" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="81" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="60"/></expr_stmt></block></then></if>
}<pos:position pos:line="82" pos:column="2"/></block></function></unit>
