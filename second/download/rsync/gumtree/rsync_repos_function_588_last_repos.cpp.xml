<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_588_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">read_final_goodbye<pos:position pos:line="1" pos:column="31"/></name><parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><name pos:line="1" pos:column="32">int<pos:position pos:line="1" pos:column="35"/></name></type> <name pos:line="1" pos:column="36">f_in<pos:position pos:line="1" pos:column="40"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="42">int<pos:position pos:line="1" pos:column="45"/></name></type> <name pos:line="1" pos:column="46">f_out<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="52"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">i<pos:position pos:line="3" pos:column="14"/></name></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="16">iflags<pos:position pos:line="3" pos:column="22"/></name></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="24">xlen<pos:position pos:line="3" pos:column="28"/></name></decl>;<pos:position pos:line="3" pos:column="29"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">uchar<pos:position pos:line="4" pos:column="14"/></name></type> <name pos:line="4" pos:column="15">fnamecmp_type<pos:position pos:line="4" pos:column="28"/></name></decl>;<pos:position pos:line="4" pos:column="29"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">char<pos:position pos:line="5" pos:column="13"/></name></type> <name><name pos:line="5" pos:column="14">xname<pos:position pos:line="5" pos:column="19"/></name><index pos:line="5" pos:column="19">[<expr><name pos:line="5" pos:column="20">MAXPATHLEN<pos:position pos:line="5" pos:column="30"/></name></expr>]<pos:position pos:line="5" pos:column="31"/></index></name></decl>;<pos:position pos:line="5" pos:column="32"/></decl_stmt>

	<expr_stmt><expr><name pos:line="7" pos:column="9">shutting_down<pos:position pos:line="7" pos:column="22"/></name> <operator pos:line="7" pos:column="23">=<pos:position pos:line="7" pos:column="24"/></operator> <name pos:line="7" pos:column="25">True<pos:position pos:line="7" pos:column="29"/></name></expr>;<pos:position pos:line="7" pos:column="30"/></expr_stmt>

	<if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><name pos:line="9" pos:column="13">protocol_version<pos:position pos:line="9" pos:column="29"/></name> <operator pos:line="9" pos:column="30">&lt;<pos:position pos:line="9" pos:column="34"/></operator> <literal type="number" pos:line="9" pos:column="32">29<pos:position pos:line="9" pos:column="34"/></literal></expr>)<pos:position pos:line="9" pos:column="35"/></condition><then pos:line="9" pos:column="35">
		<block type="pseudo"><expr_stmt><expr><name pos:line="10" pos:column="17">i<pos:position pos:line="10" pos:column="18"/></name> <operator pos:line="10" pos:column="19">=<pos:position pos:line="10" pos:column="20"/></operator> <call><name pos:line="10" pos:column="21">read_int<pos:position pos:line="10" pos:column="29"/></name><argument_list pos:line="10" pos:column="29">(<argument><expr><name pos:line="10" pos:column="30">f_in<pos:position pos:line="10" pos:column="34"/></name></expr></argument>)<pos:position pos:line="10" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="36"/></expr_stmt></block></then>
	<else pos:line="11" pos:column="9">else <block pos:line="11" pos:column="14">{
		<expr_stmt><expr><name pos:line="12" pos:column="17">i<pos:position pos:line="12" pos:column="18"/></name> <operator pos:line="12" pos:column="19">=<pos:position pos:line="12" pos:column="20"/></operator> <call><name pos:line="12" pos:column="21">read_ndx_and_attrs<pos:position pos:line="12" pos:column="39"/></name><argument_list pos:line="12" pos:column="39">(<argument><expr><name pos:line="12" pos:column="40">f_in<pos:position pos:line="12" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="46">f_out<pos:position pos:line="12" pos:column="51"/></name></expr></argument>, <argument><expr><operator pos:line="12" pos:column="53">&amp;<pos:position pos:line="12" pos:column="58"/></operator><name pos:line="12" pos:column="54">iflags<pos:position pos:line="12" pos:column="60"/></name></expr></argument>, <argument><expr><operator pos:line="12" pos:column="62">&amp;<pos:position pos:line="12" pos:column="67"/></operator><name pos:line="12" pos:column="63">fnamecmp_type<pos:position pos:line="12" pos:column="76"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="78">xname<pos:position pos:line="12" pos:column="83"/></name></expr></argument>, <argument><expr><operator pos:line="12" pos:column="85">&amp;<pos:position pos:line="12" pos:column="90"/></operator><name pos:line="12" pos:column="86">xlen<pos:position pos:line="12" pos:column="90"/></name></expr></argument>)<pos:position pos:line="12" pos:column="91"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="92"/></expr_stmt>
		<if pos:line="13" pos:column="17">if <condition pos:line="13" pos:column="20">(<expr><name pos:line="13" pos:column="21">protocol_version<pos:position pos:line="13" pos:column="37"/></name> <operator pos:line="13" pos:column="38">&gt;=<pos:position pos:line="13" pos:column="43"/></operator> <literal type="number" pos:line="13" pos:column="41">31<pos:position pos:line="13" pos:column="43"/></literal> <operator pos:line="13" pos:column="44">&amp;&amp;<pos:position pos:line="13" pos:column="54"/></operator> <name pos:line="13" pos:column="47">i<pos:position pos:line="13" pos:column="48"/></name> <operator pos:line="13" pos:column="49">==<pos:position pos:line="13" pos:column="51"/></operator> <name pos:line="13" pos:column="52">NDX_DONE<pos:position pos:line="13" pos:column="60"/></name></expr>)<pos:position pos:line="13" pos:column="61"/></condition><then pos:line="13" pos:column="61"> <block pos:line="13" pos:column="62">{
			<if pos:line="14" pos:column="25">if <condition pos:line="14" pos:column="28">(<expr><name pos:line="14" pos:column="29">am_sender<pos:position pos:line="14" pos:column="38"/></name></expr>)<pos:position pos:line="14" pos:column="39"/></condition><then pos:line="14" pos:column="39">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="15" pos:column="33">write_ndx<pos:position pos:line="15" pos:column="42"/></name><argument_list pos:line="15" pos:column="42">(<argument><expr><name pos:line="15" pos:column="43">f_out<pos:position pos:line="15" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="50">NDX_DONE<pos:position pos:line="15" pos:column="58"/></name></expr></argument>)<pos:position pos:line="15" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="60"/></expr_stmt></block></then>
			<else pos:line="16" pos:column="25">else <block pos:line="16" pos:column="30">{
				<if pos:line="17" pos:column="33">if <condition pos:line="17" pos:column="36">(<expr><name pos:line="17" pos:column="37">batch_gen_fd<pos:position pos:line="17" pos:column="49"/></name> <operator pos:line="17" pos:column="50">&gt;=<pos:position pos:line="17" pos:column="55"/></operator> <literal type="number" pos:line="17" pos:column="53">0<pos:position pos:line="17" pos:column="54"/></literal></expr>)<pos:position pos:line="17" pos:column="55"/></condition><then pos:line="17" pos:column="55"> <block pos:line="17" pos:column="56">{
					<while pos:line="18" pos:column="41">while <condition pos:line="18" pos:column="47">(<expr><call><name pos:line="18" pos:column="48">read_int<pos:position pos:line="18" pos:column="56"/></name><argument_list pos:line="18" pos:column="56">(<argument><expr><name pos:line="18" pos:column="57">batch_gen_fd<pos:position pos:line="18" pos:column="69"/></name></expr></argument>)<pos:position pos:line="18" pos:column="70"/></argument_list></call> <operator pos:line="18" pos:column="71">!=<pos:position pos:line="18" pos:column="73"/></operator> <name pos:line="18" pos:column="74">NDX_DEL_STATS<pos:position pos:line="18" pos:column="87"/></name></expr>)<pos:position pos:line="18" pos:column="88"/></condition> <block pos:line="18" pos:column="89">{}<pos:position pos:line="18" pos:column="91"/></block></while>
					<expr_stmt><expr><call><name pos:line="19" pos:column="41">read_del_stats<pos:position pos:line="19" pos:column="55"/></name><argument_list pos:line="19" pos:column="55">(<argument><expr><name pos:line="19" pos:column="56">batch_gen_fd<pos:position pos:line="19" pos:column="68"/></name></expr></argument>)<pos:position pos:line="19" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="70"/></expr_stmt>
				}<pos:position pos:line="20" pos:column="34"/></block></then></if>
				<expr_stmt><expr><call><name pos:line="21" pos:column="33">write_int<pos:position pos:line="21" pos:column="42"/></name><argument_list pos:line="21" pos:column="42">(<argument><expr><name pos:line="21" pos:column="43">f_out<pos:position pos:line="21" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="50">NDX_DONE<pos:position pos:line="21" pos:column="58"/></name></expr></argument>)<pos:position pos:line="21" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="60"/></expr_stmt>
			}<pos:position pos:line="22" pos:column="26"/></block></else></if>
			<expr_stmt><expr><name pos:line="23" pos:column="25">i<pos:position pos:line="23" pos:column="26"/></name> <operator pos:line="23" pos:column="27">=<pos:position pos:line="23" pos:column="28"/></operator> <call><name pos:line="23" pos:column="29">read_ndx_and_attrs<pos:position pos:line="23" pos:column="47"/></name><argument_list pos:line="23" pos:column="47">(<argument><expr><name pos:line="23" pos:column="48">f_in<pos:position pos:line="23" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="54">f_out<pos:position pos:line="23" pos:column="59"/></name></expr></argument>, <argument><expr><operator pos:line="23" pos:column="61">&amp;<pos:position pos:line="23" pos:column="66"/></operator><name pos:line="23" pos:column="62">iflags<pos:position pos:line="23" pos:column="68"/></name></expr></argument>, <argument><expr><operator pos:line="23" pos:column="70">&amp;<pos:position pos:line="23" pos:column="75"/></operator><name pos:line="23" pos:column="71">fnamecmp_type<pos:position pos:line="23" pos:column="84"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="86">xname<pos:position pos:line="23" pos:column="91"/></name></expr></argument>, <argument><expr><operator pos:line="23" pos:column="93">&amp;<pos:position pos:line="23" pos:column="98"/></operator><name pos:line="23" pos:column="94">xlen<pos:position pos:line="23" pos:column="98"/></name></expr></argument>)<pos:position pos:line="23" pos:column="99"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="100"/></expr_stmt>
		}<pos:position pos:line="24" pos:column="18"/></block></then></if>
	}<pos:position pos:line="25" pos:column="10"/></block></else></if>

	<if pos:line="27" pos:column="9">if <condition pos:line="27" pos:column="12">(<expr><name pos:line="27" pos:column="13">i<pos:position pos:line="27" pos:column="14"/></name> <operator pos:line="27" pos:column="15">!=<pos:position pos:line="27" pos:column="17"/></operator> <name pos:line="27" pos:column="18">NDX_DONE<pos:position pos:line="27" pos:column="26"/></name></expr>)<pos:position pos:line="27" pos:column="27"/></condition><then pos:line="27" pos:column="27"> <block pos:line="27" pos:column="28">{
		<expr_stmt><expr><call><name pos:line="28" pos:column="17">rprintf<pos:position pos:line="28" pos:column="24"/></name><argument_list pos:line="28" pos:column="24">(<argument><expr><name pos:line="28" pos:column="25">FERROR<pos:position pos:line="28" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="28" pos:column="33">"Invalid packet at end of run (%d) [%s]\n"<pos:position pos:line="28" pos:column="75"/></literal></expr></argument>,
			<argument><expr><name pos:line="29" pos:column="25">i<pos:position pos:line="29" pos:column="26"/></name></expr></argument>, <argument><expr><call><name pos:line="29" pos:column="28">who_am_i<pos:position pos:line="29" pos:column="36"/></name><argument_list pos:line="29" pos:column="36">()<pos:position pos:line="29" pos:column="38"/></argument_list></call></expr></argument>)<pos:position pos:line="29" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="40"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="30" pos:column="17">exit_cleanup<pos:position pos:line="30" pos:column="29"/></name><argument_list pos:line="30" pos:column="29">(<argument><expr><name pos:line="30" pos:column="30">RERR_PROTOCOL<pos:position pos:line="30" pos:column="43"/></name></expr></argument>)<pos:position pos:line="30" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="45"/></expr_stmt>
	}<pos:position pos:line="31" pos:column="10"/></block></then></if>
}<pos:position pos:line="32" pos:column="2"/></block></function></unit>
