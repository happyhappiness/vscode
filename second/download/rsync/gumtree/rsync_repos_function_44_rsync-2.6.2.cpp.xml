<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_44_rsync-2.6.2.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">send_exclude_list<pos:position pos:line="1" pos:column="23"/></name><parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><name pos:line="1" pos:column="24">int<pos:position pos:line="1" pos:column="27"/></name></type> <name pos:line="1" pos:column="28">f<pos:position pos:line="1" pos:column="29"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="30"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">exclude_struct<pos:position pos:line="3" pos:column="30"/></name></name> <modifier pos:line="3" pos:column="31">*<pos:position pos:line="3" pos:column="32"/></modifier></type><name pos:line="3" pos:column="32">ent<pos:position pos:line="3" pos:column="35"/></name></decl>;<pos:position pos:line="3" pos:column="36"/></decl_stmt>

	<comment type="block" pos:line="5" pos:column="9">/* This is a complete hack - blame Rusty.
	 *
	 * FIXME: This pattern shows up in the output of
	 * report_exclude_result(), which is not ideal. */</comment>
	<if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><name pos:line="9" pos:column="13">list_only<pos:position pos:line="9" pos:column="22"/></name> <operator pos:line="9" pos:column="23">&amp;&amp;<pos:position pos:line="9" pos:column="33"/></operator> <operator pos:line="9" pos:column="26">!<pos:position pos:line="9" pos:column="27"/></operator><name pos:line="9" pos:column="27">recurse<pos:position pos:line="9" pos:column="34"/></name></expr>)<pos:position pos:line="9" pos:column="35"/></condition><then pos:line="9" pos:column="35">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="10" pos:column="17">add_exclude<pos:position pos:line="10" pos:column="28"/></name><argument_list pos:line="10" pos:column="28">(<argument><expr><operator pos:line="10" pos:column="29">&amp;<pos:position pos:line="10" pos:column="34"/></operator><name pos:line="10" pos:column="30">exclude_list<pos:position pos:line="10" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="10" pos:column="44">"/*/*"<pos:position pos:line="10" pos:column="50"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="10" pos:column="52">0<pos:position pos:line="10" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="55"/></expr_stmt></block></then></if>

	<for pos:line="12" pos:column="9">for <control pos:line="12" pos:column="13">(<init><expr><name pos:line="12" pos:column="14">ent<pos:position pos:line="12" pos:column="17"/></name> <operator pos:line="12" pos:column="18">=<pos:position pos:line="12" pos:column="19"/></operator> <name><name pos:line="12" pos:column="20">exclude_list<pos:position pos:line="12" pos:column="32"/></name><operator pos:line="12" pos:column="32">.<pos:position pos:line="12" pos:column="33"/></operator><name pos:line="12" pos:column="33">head<pos:position pos:line="12" pos:column="37"/></name></name></expr>;<pos:position pos:line="12" pos:column="38"/></init> <condition><expr><name pos:line="12" pos:column="39">ent<pos:position pos:line="12" pos:column="42"/></name></expr>;<pos:position pos:line="12" pos:column="43"/></condition> <incr><expr><name pos:line="12" pos:column="44">ent<pos:position pos:line="12" pos:column="47"/></name> <operator pos:line="12" pos:column="48">=<pos:position pos:line="12" pos:column="49"/></operator> <name><name pos:line="12" pos:column="50">ent<pos:position pos:line="12" pos:column="53"/></name><operator pos:line="12" pos:column="53">-&gt;<pos:position pos:line="12" pos:column="58"/></operator><name pos:line="12" pos:column="55">next<pos:position pos:line="12" pos:column="59"/></name></name></expr></incr>)<pos:position pos:line="12" pos:column="60"/></control> <block pos:line="12" pos:column="61">{
		<decl_stmt><decl><type><name pos:line="13" pos:column="17">unsigned<pos:position pos:line="13" pos:column="25"/></name> <name pos:line="13" pos:column="26">int<pos:position pos:line="13" pos:column="29"/></name></type> <name pos:line="13" pos:column="30">l<pos:position pos:line="13" pos:column="31"/></name></decl>;<pos:position pos:line="13" pos:column="32"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="14" pos:column="17">char<pos:position pos:line="14" pos:column="21"/></name></type> <name><name pos:line="14" pos:column="22">p<pos:position pos:line="14" pos:column="23"/></name><index pos:line="14" pos:column="23">[<expr><name pos:line="14" pos:column="24">MAXPATHLEN<pos:position pos:line="14" pos:column="34"/></name><operator pos:line="14" pos:column="34">+<pos:position pos:line="14" pos:column="35"/></operator><literal type="number" pos:line="14" pos:column="35">1<pos:position pos:line="14" pos:column="36"/></literal></expr>]<pos:position pos:line="14" pos:column="37"/></index></name></decl>;<pos:position pos:line="14" pos:column="38"/></decl_stmt>

		<expr_stmt><expr><name pos:line="16" pos:column="17">l<pos:position pos:line="16" pos:column="18"/></name> <operator pos:line="16" pos:column="19">=<pos:position pos:line="16" pos:column="20"/></operator> <call><name pos:line="16" pos:column="21">strlcpy<pos:position pos:line="16" pos:column="28"/></name><argument_list pos:line="16" pos:column="28">(<argument><expr><name pos:line="16" pos:column="29">p<pos:position pos:line="16" pos:column="30"/></name></expr></argument>, <argument><expr><name><name pos:line="16" pos:column="32">ent<pos:position pos:line="16" pos:column="35"/></name><operator pos:line="16" pos:column="35">-&gt;<pos:position pos:line="16" pos:column="40"/></operator><name pos:line="16" pos:column="37">pattern<pos:position pos:line="16" pos:column="44"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="16" pos:column="46">sizeof <name pos:line="16" pos:column="53">p<pos:position pos:line="16" pos:column="54"/></name></sizeof></expr></argument>)<pos:position pos:line="16" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="56"/></expr_stmt>
		<if pos:line="17" pos:column="17">if <condition pos:line="17" pos:column="20">(<expr><name pos:line="17" pos:column="21">l<pos:position pos:line="17" pos:column="22"/></name> <operator pos:line="17" pos:column="23">==<pos:position pos:line="17" pos:column="25"/></operator> <literal type="number" pos:line="17" pos:column="26">0<pos:position pos:line="17" pos:column="27"/></literal> <operator pos:line="17" pos:column="28">||<pos:position pos:line="17" pos:column="30"/></operator> <name pos:line="17" pos:column="31">l<pos:position pos:line="17" pos:column="32"/></name> <operator pos:line="17" pos:column="33">&gt;=<pos:position pos:line="17" pos:column="38"/></operator> <name pos:line="17" pos:column="36">MAXPATHLEN<pos:position pos:line="17" pos:column="46"/></name></expr>)<pos:position pos:line="17" pos:column="47"/></condition><then pos:line="17" pos:column="47">
			<block type="pseudo"><continue pos:line="18" pos:column="25">continue;<pos:position pos:line="18" pos:column="34"/></continue></block></then></if>
		<if pos:line="19" pos:column="17">if <condition pos:line="19" pos:column="20">(<expr><name><name pos:line="19" pos:column="21">ent<pos:position pos:line="19" pos:column="24"/></name><operator pos:line="19" pos:column="24">-&gt;<pos:position pos:line="19" pos:column="29"/></operator><name pos:line="19" pos:column="26">directory<pos:position pos:line="19" pos:column="35"/></name></name></expr>)<pos:position pos:line="19" pos:column="36"/></condition><then pos:line="19" pos:column="36"> <block pos:line="19" pos:column="37">{
			<expr_stmt><expr><name><name pos:line="20" pos:column="25">p<pos:position pos:line="20" pos:column="26"/></name><index pos:line="20" pos:column="26">[<expr><name pos:line="20" pos:column="27">l<pos:position pos:line="20" pos:column="28"/></name><operator pos:line="20" pos:column="28">++<pos:position pos:line="20" pos:column="30"/></operator></expr>]<pos:position pos:line="20" pos:column="31"/></index></name> <operator pos:line="20" pos:column="32">=<pos:position pos:line="20" pos:column="33"/></operator> <literal type="char" pos:line="20" pos:column="34">'/'<pos:position pos:line="20" pos:column="37"/></literal></expr>;<pos:position pos:line="20" pos:column="38"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="21" pos:column="25">p<pos:position pos:line="21" pos:column="26"/></name><index pos:line="21" pos:column="26">[<expr><name pos:line="21" pos:column="27">l<pos:position pos:line="21" pos:column="28"/></name></expr>]<pos:position pos:line="21" pos:column="29"/></index></name> <operator pos:line="21" pos:column="30">=<pos:position pos:line="21" pos:column="31"/></operator> <literal type="char" pos:line="21" pos:column="32">'\0'<pos:position pos:line="21" pos:column="36"/></literal></expr>;<pos:position pos:line="21" pos:column="37"/></expr_stmt>
		}<pos:position pos:line="22" pos:column="18"/></block></then></if>

		<if pos:line="24" pos:column="17">if <condition pos:line="24" pos:column="20">(<expr><name><name pos:line="24" pos:column="21">ent<pos:position pos:line="24" pos:column="24"/></name><operator pos:line="24" pos:column="24">-&gt;<pos:position pos:line="24" pos:column="29"/></operator><name pos:line="24" pos:column="26">include<pos:position pos:line="24" pos:column="33"/></name></name></expr>)<pos:position pos:line="24" pos:column="34"/></condition><then pos:line="24" pos:column="34"> <block pos:line="24" pos:column="35">{
			<expr_stmt><expr><call><name pos:line="25" pos:column="25">write_int<pos:position pos:line="25" pos:column="34"/></name><argument_list pos:line="25" pos:column="34">(<argument><expr><name pos:line="25" pos:column="35">f<pos:position pos:line="25" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="38">l<pos:position pos:line="25" pos:column="39"/></name> <operator pos:line="25" pos:column="40">+<pos:position pos:line="25" pos:column="41"/></operator> <literal type="number" pos:line="25" pos:column="42">2<pos:position pos:line="25" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="45"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="26" pos:column="25">write_buf<pos:position pos:line="26" pos:column="34"/></name><argument_list pos:line="26" pos:column="34">(<argument><expr><name pos:line="26" pos:column="35">f<pos:position pos:line="26" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="26" pos:column="38">"+ "<pos:position pos:line="26" pos:column="42"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="26" pos:column="44">2<pos:position pos:line="26" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="47"/></expr_stmt>
		}<pos:position pos:line="27" pos:column="18"/></block></then> <elseif pos:line="27" pos:column="19">else <if pos:line="27" pos:column="24">if <condition pos:line="27" pos:column="27">(<expr><operator pos:line="27" pos:column="28">(<pos:position pos:line="27" pos:column="29"/></operator><operator pos:line="27" pos:column="29">*<pos:position pos:line="27" pos:column="30"/></operator><name pos:line="27" pos:column="30">p<pos:position pos:line="27" pos:column="31"/></name> <operator pos:line="27" pos:column="32">==<pos:position pos:line="27" pos:column="34"/></operator> <literal type="char" pos:line="27" pos:column="35">'-'<pos:position pos:line="27" pos:column="38"/></literal> <operator pos:line="27" pos:column="39">||<pos:position pos:line="27" pos:column="41"/></operator> <operator pos:line="27" pos:column="42">*<pos:position pos:line="27" pos:column="43"/></operator><name pos:line="27" pos:column="43">p<pos:position pos:line="27" pos:column="44"/></name> <operator pos:line="27" pos:column="45">==<pos:position pos:line="27" pos:column="47"/></operator> <literal type="char" pos:line="27" pos:column="48">'+'<pos:position pos:line="27" pos:column="51"/></literal><operator pos:line="27" pos:column="51">)<pos:position pos:line="27" pos:column="52"/></operator> <operator pos:line="27" pos:column="53">&amp;&amp;<pos:position pos:line="27" pos:column="63"/></operator> <name><name pos:line="27" pos:column="56">p<pos:position pos:line="27" pos:column="57"/></name><index pos:line="27" pos:column="57">[<expr><literal type="number" pos:line="27" pos:column="58">1<pos:position pos:line="27" pos:column="59"/></literal></expr>]<pos:position pos:line="27" pos:column="60"/></index></name> <operator pos:line="27" pos:column="61">==<pos:position pos:line="27" pos:column="63"/></operator> <literal type="char" pos:line="27" pos:column="64">' '<pos:position pos:line="27" pos:column="67"/></literal></expr>)<pos:position pos:line="27" pos:column="68"/></condition><then pos:line="27" pos:column="68"> <block pos:line="27" pos:column="69">{
			<expr_stmt><expr><call><name pos:line="28" pos:column="25">write_int<pos:position pos:line="28" pos:column="34"/></name><argument_list pos:line="28" pos:column="34">(<argument><expr><name pos:line="28" pos:column="35">f<pos:position pos:line="28" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="38">l<pos:position pos:line="28" pos:column="39"/></name> <operator pos:line="28" pos:column="40">+<pos:position pos:line="28" pos:column="41"/></operator> <literal type="number" pos:line="28" pos:column="42">2<pos:position pos:line="28" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="45"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="29" pos:column="25">write_buf<pos:position pos:line="29" pos:column="34"/></name><argument_list pos:line="29" pos:column="34">(<argument><expr><name pos:line="29" pos:column="35">f<pos:position pos:line="29" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="29" pos:column="38">"- "<pos:position pos:line="29" pos:column="42"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="29" pos:column="44">2<pos:position pos:line="29" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="47"/></expr_stmt>
		}<pos:position pos:line="30" pos:column="18"/></block></then></if></elseif> <else pos:line="30" pos:column="19">else
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="31" pos:column="25">write_int<pos:position pos:line="31" pos:column="34"/></name><argument_list pos:line="31" pos:column="34">(<argument><expr><name pos:line="31" pos:column="35">f<pos:position pos:line="31" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="38">l<pos:position pos:line="31" pos:column="39"/></name></expr></argument>)<pos:position pos:line="31" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="41"/></expr_stmt></block></else></if>
		<expr_stmt><expr><call><name pos:line="32" pos:column="17">write_buf<pos:position pos:line="32" pos:column="26"/></name><argument_list pos:line="32" pos:column="26">(<argument><expr><name pos:line="32" pos:column="27">f<pos:position pos:line="32" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="30">p<pos:position pos:line="32" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="33">l<pos:position pos:line="32" pos:column="34"/></name></expr></argument>)<pos:position pos:line="32" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="36"/></expr_stmt>
	}<pos:position pos:line="33" pos:column="10"/></block></for>

	<expr_stmt><expr><call><name pos:line="35" pos:column="9">write_int<pos:position pos:line="35" pos:column="18"/></name><argument_list pos:line="35" pos:column="18">(<argument><expr><name pos:line="35" pos:column="19">f<pos:position pos:line="35" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="35" pos:column="22">0<pos:position pos:line="35" pos:column="23"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="25"/></expr_stmt>
}<pos:position pos:line="36" pos:column="2"/></block></function></unit>
