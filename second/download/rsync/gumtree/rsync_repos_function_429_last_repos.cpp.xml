<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_429_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">BOOL<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">Parameter<pos:position pos:line="1" pos:column="22"/></name><parameter_list pos:line="1" pos:column="22">( <parameter><decl><type><name pos:line="1" pos:column="24">FILE<pos:position pos:line="1" pos:column="28"/></name> <modifier pos:line="1" pos:column="29">*<pos:position pos:line="1" pos:column="30"/></modifier></type><name pos:line="1" pos:column="30">InFile<pos:position pos:line="1" pos:column="36"/></name></decl></parameter>, <parameter><function_decl><type><name pos:line="1" pos:column="38">BOOL<pos:position pos:line="1" pos:column="42"/></name></type> (<modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier><name pos:line="1" pos:column="45">pfunc<pos:position pos:line="1" pos:column="50"/></name>)<parameter_list pos:line="1" pos:column="51">(<parameter><decl><type><name pos:line="1" pos:column="52">char<pos:position pos:line="1" pos:column="56"/></name> <modifier pos:line="1" pos:column="57">*<pos:position pos:line="1" pos:column="58"/></modifier></type></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="60">char<pos:position pos:line="1" pos:column="64"/></name> <modifier pos:line="1" pos:column="65">*<pos:position pos:line="1" pos:column="66"/></modifier></type></decl></parameter>)<pos:position pos:line="1" pos:column="67"/></parameter_list></function_decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="69">int<pos:position pos:line="1" pos:column="72"/></name></type> <name pos:line="1" pos:column="73">c<pos:position pos:line="1" pos:column="74"/></name></decl></parameter> )<pos:position pos:line="1" pos:column="76"/></parameter_list>
  <comment type="block" pos:line="2" pos:column="3">/* ------------------------------------------------------------------------ **
   * Scan a parameter name and value, and pass these two fields to pfunc().
   *
   *  Input:  InFile  - The input source.
   *          pfunc   - A pointer to the function that will be called to
   *                    process the parameter, once it has been scanned.
   *          c       - The first character of the parameter name, which
   *                    would have been read by Parse().  Unlike a comment
   *                    line or a section header, there is no lead-in
   *                    character that can be discarded.
   *
   *  Output: True if the parameter name and value were scanned and processed
   *          successfully, else False.
   *
   *  Notes:  This function is in two parts.  The first loop scans the
   *          parameter name.  Internal whitespace is compressed, and an
   *          equal sign (=) terminates the token.  Leading and trailing
   *          whitespace is discarded.  The second loop scans the parameter
   *          value.  When both have been successfully identified, they are
   *          passed to pfunc() for processing.
   *
   * ------------------------------------------------------------------------ **
   */</comment>
  <block pos:line="25" pos:column="3">{
  <decl_stmt><decl><type><name pos:line="26" pos:column="3">int<pos:position pos:line="26" pos:column="6"/></name></type>   <name pos:line="26" pos:column="9">i<pos:position pos:line="26" pos:column="10"/></name>       <init pos:line="26" pos:column="17">= <expr><literal type="number" pos:line="26" pos:column="19">0<pos:position pos:line="26" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="26" pos:column="21"/></decl_stmt>    <comment type="block" pos:line="26" pos:column="25">/* Position within bufr. */</comment>
  <decl_stmt><decl><type><name pos:line="27" pos:column="3">int<pos:position pos:line="27" pos:column="6"/></name></type>   <name pos:line="27" pos:column="9">end<pos:position pos:line="27" pos:column="12"/></name>     <init pos:line="27" pos:column="17">= <expr><literal type="number" pos:line="27" pos:column="19">0<pos:position pos:line="27" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="27" pos:column="21"/></decl_stmt>    <comment type="block" pos:line="27" pos:column="25">/* bufr[end] is current end-of-string. */</comment>
  <decl_stmt><decl><type><name pos:line="28" pos:column="3">int<pos:position pos:line="28" pos:column="6"/></name></type>   <name pos:line="28" pos:column="9">vstart<pos:position pos:line="28" pos:column="15"/></name>  <init pos:line="28" pos:column="17">= <expr><literal type="number" pos:line="28" pos:column="19">0<pos:position pos:line="28" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="28" pos:column="21"/></decl_stmt>    <comment type="block" pos:line="28" pos:column="25">/* Starting position of the parameter value. */</comment>
  <decl_stmt><decl><type><name pos:line="29" pos:column="3">char<pos:position pos:line="29" pos:column="7"/></name> <modifier pos:line="29" pos:column="8">*<pos:position pos:line="29" pos:column="9"/></modifier></type><name pos:line="29" pos:column="9">func<pos:position pos:line="29" pos:column="13"/></name>    <init pos:line="29" pos:column="17">= <expr><literal type="string" pos:line="29" pos:column="19">"params.c:Parameter() -"<pos:position pos:line="29" pos:column="43"/></literal></expr></init></decl>;<pos:position pos:line="29" pos:column="44"/></decl_stmt>

  <comment type="block" pos:line="31" pos:column="3">/* Read the parameter name. */</comment>
  <while pos:line="32" pos:column="3">while<condition pos:line="32" pos:column="8">( <expr><literal type="number" pos:line="32" pos:column="10">0<pos:position pos:line="32" pos:column="11"/></literal> <operator pos:line="32" pos:column="12">==<pos:position pos:line="32" pos:column="14"/></operator> <name pos:line="32" pos:column="15">vstart<pos:position pos:line="32" pos:column="21"/></name></expr> )<pos:position pos:line="32" pos:column="23"/></condition>  <comment type="block" pos:line="32" pos:column="25">/* Loop until we've found the start of the value. */</comment>
    <block pos:line="33" pos:column="5">{

    <if pos:line="35" pos:column="5">if<condition pos:line="35" pos:column="7">( <expr><name pos:line="35" pos:column="9">i<pos:position pos:line="35" pos:column="10"/></name> <operator pos:line="35" pos:column="11">&gt;<pos:position pos:line="35" pos:column="15"/></operator> <operator pos:line="35" pos:column="13">(<pos:position pos:line="35" pos:column="14"/></operator><name pos:line="35" pos:column="14">bSize<pos:position pos:line="35" pos:column="19"/></name> <operator pos:line="35" pos:column="20">-<pos:position pos:line="35" pos:column="21"/></operator> <literal type="number" pos:line="35" pos:column="22">2<pos:position pos:line="35" pos:column="23"/></literal><operator pos:line="35" pos:column="23">)<pos:position pos:line="35" pos:column="24"/></operator></expr> )<pos:position pos:line="35" pos:column="26"/></condition><then pos:line="35" pos:column="26">       <comment type="block" pos:line="35" pos:column="33">/* Ensure there's space for next char.    */</comment>
      <block pos:line="36" pos:column="7">{
      <expr_stmt><expr><name pos:line="37" pos:column="7">bSize<pos:position pos:line="37" pos:column="12"/></name> <operator pos:line="37" pos:column="13">+=<pos:position pos:line="37" pos:column="15"/></operator> <name pos:line="37" pos:column="16">BUFR_INC<pos:position pos:line="37" pos:column="24"/></name></expr>;<pos:position pos:line="37" pos:column="25"/></expr_stmt>
      <expr_stmt><expr><name pos:line="38" pos:column="7">bufr<pos:position pos:line="38" pos:column="11"/></name>   <operator pos:line="38" pos:column="14">=<pos:position pos:line="38" pos:column="15"/></operator> <call><name pos:line="38" pos:column="16">realloc_array<pos:position pos:line="38" pos:column="29"/></name><argument_list pos:line="38" pos:column="29">( <argument><expr><name pos:line="38" pos:column="31">bufr<pos:position pos:line="38" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="37">char<pos:position pos:line="38" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="43">bSize<pos:position pos:line="38" pos:column="48"/></name></expr></argument> )<pos:position pos:line="38" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="51"/></expr_stmt>
      <if pos:line="39" pos:column="7">if<condition pos:line="39" pos:column="9">( <expr><name pos:line="39" pos:column="11">NULL<pos:position pos:line="39" pos:column="15"/></name> <operator pos:line="39" pos:column="16">==<pos:position pos:line="39" pos:column="18"/></operator> <name pos:line="39" pos:column="19">bufr<pos:position pos:line="39" pos:column="23"/></name></expr> )<pos:position pos:line="39" pos:column="25"/></condition><then pos:line="39" pos:column="25">
        <block pos:line="40" pos:column="9">{
        <expr_stmt><expr><call><name pos:line="41" pos:column="9">rprintf<pos:position pos:line="41" pos:column="16"/></name><argument_list pos:line="41" pos:column="16">(<argument><expr><name pos:line="41" pos:column="17">FLOG<pos:position pos:line="41" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="41" pos:column="23">"%s Memory re-allocation failure."<pos:position pos:line="41" pos:column="57"/></literal></expr></argument>, <argument><expr><name pos:line="41" pos:column="59">func<pos:position pos:line="41" pos:column="63"/></name></expr></argument>)<pos:position pos:line="41" pos:column="64"/></argument_list></call></expr> ;<pos:position pos:line="41" pos:column="66"/></expr_stmt>
        <return pos:line="42" pos:column="9">return<expr><operator pos:line="42" pos:column="15">(<pos:position pos:line="42" pos:column="16"/></operator> <name pos:line="42" pos:column="17">False<pos:position pos:line="42" pos:column="22"/></name> <operator pos:line="42" pos:column="23">)<pos:position pos:line="42" pos:column="24"/></operator></expr>;<pos:position pos:line="42" pos:column="25"/></return>
        }<pos:position pos:line="43" pos:column="10"/></block></then></if>
      }<pos:position pos:line="44" pos:column="8"/></block></then></if>

    <switch pos:line="46" pos:column="5">switch<condition pos:line="46" pos:column="11">( <expr><name pos:line="46" pos:column="13">c<pos:position pos:line="46" pos:column="14"/></name></expr> )<pos:position pos:line="46" pos:column="16"/></condition>
      <block pos:line="47" pos:column="7">{
      <case pos:line="48" pos:column="7">case <expr><literal type="char" pos:line="48" pos:column="12">'='<pos:position pos:line="48" pos:column="15"/></literal></expr>:<pos:position pos:line="48" pos:column="16"/></case>                 <comment type="block" pos:line="48" pos:column="33">/* Equal sign marks end of param name. */</comment>
        <if pos:line="49" pos:column="9">if<condition pos:line="49" pos:column="11">( <expr><literal type="number" pos:line="49" pos:column="13">0<pos:position pos:line="49" pos:column="14"/></literal> <operator pos:line="49" pos:column="15">==<pos:position pos:line="49" pos:column="17"/></operator> <name pos:line="49" pos:column="18">end<pos:position pos:line="49" pos:column="21"/></name></expr> )<pos:position pos:line="49" pos:column="23"/></condition><then pos:line="49" pos:column="23">              <comment type="block" pos:line="49" pos:column="37">/* Don't allow an empty name.      */</comment>
          <block pos:line="50" pos:column="11">{
          <expr_stmt><expr><call><name pos:line="51" pos:column="11">rprintf<pos:position pos:line="51" pos:column="18"/></name><argument_list pos:line="51" pos:column="18">(<argument><expr><name pos:line="51" pos:column="19">FLOG<pos:position pos:line="51" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="51" pos:column="25">"%s Invalid parameter name in config file.\n"<pos:position pos:line="51" pos:column="70"/></literal></expr></argument>, <argument><expr><name pos:line="51" pos:column="72">func<pos:position pos:line="51" pos:column="76"/></name></expr></argument> )<pos:position pos:line="51" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="79"/></expr_stmt>
          <return pos:line="52" pos:column="11">return<expr><operator pos:line="52" pos:column="17">(<pos:position pos:line="52" pos:column="18"/></operator> <name pos:line="52" pos:column="19">False<pos:position pos:line="52" pos:column="24"/></name> <operator pos:line="52" pos:column="25">)<pos:position pos:line="52" pos:column="26"/></operator></expr>;<pos:position pos:line="52" pos:column="27"/></return>
          }<pos:position pos:line="53" pos:column="12"/></block></then></if>
        <expr_stmt><expr><name><name pos:line="54" pos:column="9">bufr<pos:position pos:line="54" pos:column="13"/></name><index pos:line="54" pos:column="13">[<expr><name pos:line="54" pos:column="14">end<pos:position pos:line="54" pos:column="17"/></name><operator pos:line="54" pos:column="17">++<pos:position pos:line="54" pos:column="19"/></operator></expr>]<pos:position pos:line="54" pos:column="20"/></index></name> <operator pos:line="54" pos:column="21">=<pos:position pos:line="54" pos:column="22"/></operator> <literal type="char" pos:line="54" pos:column="23">'\0'<pos:position pos:line="54" pos:column="27"/></literal></expr>;<pos:position pos:line="54" pos:column="28"/></expr_stmt>         <comment type="block" pos:line="54" pos:column="37">/* Mark end of string &amp; advance.   */</comment>
        <expr_stmt><expr><name pos:line="55" pos:column="9">i<pos:position pos:line="55" pos:column="10"/></name> <operator pos:line="55" pos:column="11">=<pos:position pos:line="55" pos:column="12"/></operator> <name pos:line="55" pos:column="13">vstart<pos:position pos:line="55" pos:column="19"/></name> <operator pos:line="55" pos:column="20">=<pos:position pos:line="55" pos:column="21"/></operator> <name pos:line="55" pos:column="22">end<pos:position pos:line="55" pos:column="25"/></name></expr>;<pos:position pos:line="55" pos:column="26"/></expr_stmt>           <comment type="block" pos:line="55" pos:column="37">/* New string starts here.         */</comment>
        <expr_stmt><expr><name pos:line="56" pos:column="9">c<pos:position pos:line="56" pos:column="10"/></name> <operator pos:line="56" pos:column="11">=<pos:position pos:line="56" pos:column="12"/></operator> <call><name pos:line="56" pos:column="13">EatWhitespace<pos:position pos:line="56" pos:column="26"/></name><argument_list pos:line="56" pos:column="26">(<argument><expr><name pos:line="56" pos:column="27">InFile<pos:position pos:line="56" pos:column="33"/></name></expr></argument>)<pos:position pos:line="56" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="35"/></expr_stmt>
        <break pos:line="57" pos:column="9">break;<pos:position pos:line="57" pos:column="15"/></break>

      <case pos:line="59" pos:column="7">case <expr><literal type="char" pos:line="59" pos:column="12">'\n'<pos:position pos:line="59" pos:column="16"/></literal></expr>:<pos:position pos:line="59" pos:column="17"/></case>                <comment type="block" pos:line="59" pos:column="33">/* Find continuation char, else error. */</comment>
        <expr_stmt><expr><name pos:line="60" pos:column="9">i<pos:position pos:line="60" pos:column="10"/></name> <operator pos:line="60" pos:column="11">=<pos:position pos:line="60" pos:column="12"/></operator> <call><name pos:line="60" pos:column="13">Continuation<pos:position pos:line="60" pos:column="25"/></name><argument_list pos:line="60" pos:column="25">( <argument><expr><name pos:line="60" pos:column="27">bufr<pos:position pos:line="60" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="60" pos:column="33">i<pos:position pos:line="60" pos:column="34"/></name></expr></argument> )<pos:position pos:line="60" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="37"/></expr_stmt>
        <if pos:line="61" pos:column="9">if<condition pos:line="61" pos:column="11">( <expr><name pos:line="61" pos:column="13">i<pos:position pos:line="61" pos:column="14"/></name> <operator pos:line="61" pos:column="15">&lt;<pos:position pos:line="61" pos:column="19"/></operator> <literal type="number" pos:line="61" pos:column="17">0<pos:position pos:line="61" pos:column="18"/></literal></expr> )<pos:position pos:line="61" pos:column="20"/></condition><then pos:line="61" pos:column="20">
          <block pos:line="62" pos:column="11">{
          <expr_stmt><expr><name><name pos:line="63" pos:column="11">bufr<pos:position pos:line="63" pos:column="15"/></name><index pos:line="63" pos:column="15">[<expr><name pos:line="63" pos:column="16">end<pos:position pos:line="63" pos:column="19"/></name></expr>]<pos:position pos:line="63" pos:column="20"/></index></name> <operator pos:line="63" pos:column="21">=<pos:position pos:line="63" pos:column="22"/></operator> <literal type="char" pos:line="63" pos:column="23">'\0'<pos:position pos:line="63" pos:column="27"/></literal></expr>;<pos:position pos:line="63" pos:column="28"/></expr_stmt>
          <expr_stmt><expr><call><name pos:line="64" pos:column="11">rprintf<pos:position pos:line="64" pos:column="18"/></name><argument_list pos:line="64" pos:column="18">(<argument><expr><name pos:line="64" pos:column="19">FLOG<pos:position pos:line="64" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="64" pos:column="25">"%s Ignoring badly formed line in config file: %s\n"<pos:position pos:line="64" pos:column="77"/></literal></expr></argument>,
                   <argument><expr><name pos:line="65" pos:column="20">func<pos:position pos:line="65" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="26">bufr<pos:position pos:line="65" pos:column="30"/></name></expr></argument> )<pos:position pos:line="65" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="33"/></expr_stmt>
          <return pos:line="66" pos:column="11">return<expr><operator pos:line="66" pos:column="17">(<pos:position pos:line="66" pos:column="18"/></operator> <name pos:line="66" pos:column="19">True<pos:position pos:line="66" pos:column="23"/></name> <operator pos:line="66" pos:column="24">)<pos:position pos:line="66" pos:column="25"/></operator></expr>;<pos:position pos:line="66" pos:column="26"/></return>
          }<pos:position pos:line="67" pos:column="12"/></block></then></if>
        <expr_stmt><expr><name pos:line="68" pos:column="9">end<pos:position pos:line="68" pos:column="12"/></name> <operator pos:line="68" pos:column="13">=<pos:position pos:line="68" pos:column="14"/></operator> <ternary><condition><expr><operator pos:line="68" pos:column="15">(<pos:position pos:line="68" pos:column="16"/></operator> <operator pos:line="68" pos:column="17">(<pos:position pos:line="68" pos:column="18"/></operator><name pos:line="68" pos:column="18">i<pos:position pos:line="68" pos:column="19"/></name> <operator pos:line="68" pos:column="20">&gt;<pos:position pos:line="68" pos:column="24"/></operator> <literal type="number" pos:line="68" pos:column="22">0<pos:position pos:line="68" pos:column="23"/></literal><operator pos:line="68" pos:column="23">)<pos:position pos:line="68" pos:column="24"/></operator> <operator pos:line="68" pos:column="25">&amp;&amp;<pos:position pos:line="68" pos:column="35"/></operator> <operator pos:line="68" pos:column="28">(<pos:position pos:line="68" pos:column="29"/></operator><literal type="char" pos:line="68" pos:column="29">' '<pos:position pos:line="68" pos:column="32"/></literal> <operator pos:line="68" pos:column="33">==<pos:position pos:line="68" pos:column="35"/></operator> <name><name pos:line="68" pos:column="36">bufr<pos:position pos:line="68" pos:column="40"/></name><index pos:line="68" pos:column="40">[<expr><name pos:line="68" pos:column="41">i<pos:position pos:line="68" pos:column="42"/></name> <operator pos:line="68" pos:column="43">-<pos:position pos:line="68" pos:column="44"/></operator> <literal type="number" pos:line="68" pos:column="45">1<pos:position pos:line="68" pos:column="46"/></literal></expr>]<pos:position pos:line="68" pos:column="47"/></index></name><operator pos:line="68" pos:column="47">)<pos:position pos:line="68" pos:column="48"/></operator> <operator pos:line="68" pos:column="49">)<pos:position pos:line="68" pos:column="50"/></operator></expr> ?<pos:position pos:line="68" pos:column="52"/></condition><then pos:line="68" pos:column="52"> <expr><operator pos:line="68" pos:column="53">(<pos:position pos:line="68" pos:column="54"/></operator><name pos:line="68" pos:column="54">i<pos:position pos:line="68" pos:column="55"/></name> <operator pos:line="68" pos:column="56">-<pos:position pos:line="68" pos:column="57"/></operator> <literal type="number" pos:line="68" pos:column="58">1<pos:position pos:line="68" pos:column="59"/></literal><operator pos:line="68" pos:column="59">)<pos:position pos:line="68" pos:column="60"/></operator></expr> <pos:position pos:line="68" pos:column="61"/></then><else pos:line="68" pos:column="61">: <expr><operator pos:line="68" pos:column="63">(<pos:position pos:line="68" pos:column="64"/></operator><name pos:line="68" pos:column="64">i<pos:position pos:line="68" pos:column="65"/></name><operator pos:line="68" pos:column="65">)<pos:position pos:line="68" pos:column="66"/></operator></expr></else></ternary></expr>;<pos:position pos:line="68" pos:column="67"/></expr_stmt>
        <expr_stmt><expr><name pos:line="69" pos:column="9">c<pos:position pos:line="69" pos:column="10"/></name> <operator pos:line="69" pos:column="11">=<pos:position pos:line="69" pos:column="12"/></operator> <call><name pos:line="69" pos:column="13">getc<pos:position pos:line="69" pos:column="17"/></name><argument_list pos:line="69" pos:column="17">( <argument><expr><name pos:line="69" pos:column="19">InFile<pos:position pos:line="69" pos:column="25"/></name></expr></argument> )<pos:position pos:line="69" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="28"/></expr_stmt>       <comment type="block" pos:line="69" pos:column="35">/* Read past eoln.                   */</comment>
        <break pos:line="70" pos:column="9">break;<pos:position pos:line="70" pos:column="15"/></break>

      <case pos:line="72" pos:column="7">case <expr><literal type="char" pos:line="72" pos:column="12">'\0'<pos:position pos:line="72" pos:column="16"/></literal></expr>:<pos:position pos:line="72" pos:column="17"/></case>                <comment type="block" pos:line="72" pos:column="33">/* Shouldn't have EOF within param name. */</comment>
      <case pos:line="73" pos:column="7">case <expr><name pos:line="73" pos:column="12">EOF<pos:position pos:line="73" pos:column="15"/></name></expr>:<pos:position pos:line="73" pos:column="16"/></case>
        <expr_stmt><expr><name><name pos:line="74" pos:column="9">bufr<pos:position pos:line="74" pos:column="13"/></name><index pos:line="74" pos:column="13">[<expr><name pos:line="74" pos:column="14">i<pos:position pos:line="74" pos:column="15"/></name></expr>]<pos:position pos:line="74" pos:column="16"/></index></name> <operator pos:line="74" pos:column="17">=<pos:position pos:line="74" pos:column="18"/></operator> <literal type="char" pos:line="74" pos:column="19">'\0'<pos:position pos:line="74" pos:column="23"/></literal></expr>;<pos:position pos:line="74" pos:column="24"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="75" pos:column="9">rprintf<pos:position pos:line="75" pos:column="16"/></name><argument_list pos:line="75" pos:column="16">(<argument><expr><name pos:line="75" pos:column="17">FLOG<pos:position pos:line="75" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="75" pos:column="23">"%s Unexpected end-of-file at: %s\n"<pos:position pos:line="75" pos:column="59"/></literal></expr></argument>, <argument><expr><name pos:line="75" pos:column="61">func<pos:position pos:line="75" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="75" pos:column="67">bufr<pos:position pos:line="75" pos:column="71"/></name></expr></argument> )<pos:position pos:line="75" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="74"/></expr_stmt>
        <return pos:line="76" pos:column="9">return<expr><operator pos:line="76" pos:column="15">(<pos:position pos:line="76" pos:column="16"/></operator> <name pos:line="76" pos:column="17">True<pos:position pos:line="76" pos:column="21"/></name> <operator pos:line="76" pos:column="22">)<pos:position pos:line="76" pos:column="23"/></operator></expr>;<pos:position pos:line="76" pos:column="24"/></return>

      <case pos:line="78" pos:column="7">case <expr><literal type="char" pos:line="78" pos:column="12">' '<pos:position pos:line="78" pos:column="15"/></literal></expr>:<pos:position pos:line="78" pos:column="16"/></case>
      <case pos:line="79" pos:column="7">case <expr><literal type="char" pos:line="79" pos:column="12">'\t'<pos:position pos:line="79" pos:column="16"/></literal></expr>:<pos:position pos:line="79" pos:column="17"/></case>
        <comment type="block" pos:line="80" pos:column="9">/* A directive divides at the first space or tab. */</comment>
        <if pos:line="81" pos:column="9">if <condition pos:line="81" pos:column="12">(<expr><operator pos:line="81" pos:column="13">*<pos:position pos:line="81" pos:column="14"/></operator><name pos:line="81" pos:column="14">bufr<pos:position pos:line="81" pos:column="18"/></name> <operator pos:line="81" pos:column="19">==<pos:position pos:line="81" pos:column="21"/></operator> <literal type="char" pos:line="81" pos:column="22">'&amp;'<pos:position pos:line="81" pos:column="29"/></literal></expr>)<pos:position pos:line="81" pos:column="26"/></condition><then pos:line="81" pos:column="26"> <block pos:line="81" pos:column="27">{
          <expr_stmt><expr><name><name pos:line="82" pos:column="11">bufr<pos:position pos:line="82" pos:column="15"/></name><index pos:line="82" pos:column="15">[<expr><name pos:line="82" pos:column="16">end<pos:position pos:line="82" pos:column="19"/></name><operator pos:line="82" pos:column="19">++<pos:position pos:line="82" pos:column="21"/></operator></expr>]<pos:position pos:line="82" pos:column="22"/></index></name> <operator pos:line="82" pos:column="23">=<pos:position pos:line="82" pos:column="24"/></operator> <literal type="char" pos:line="82" pos:column="25">'\0'<pos:position pos:line="82" pos:column="29"/></literal></expr>;<pos:position pos:line="82" pos:column="30"/></expr_stmt>
          <expr_stmt><expr><name pos:line="83" pos:column="11">i<pos:position pos:line="83" pos:column="12"/></name> <operator pos:line="83" pos:column="13">=<pos:position pos:line="83" pos:column="14"/></operator> <name pos:line="83" pos:column="15">vstart<pos:position pos:line="83" pos:column="21"/></name> <operator pos:line="83" pos:column="22">=<pos:position pos:line="83" pos:column="23"/></operator> <name pos:line="83" pos:column="24">end<pos:position pos:line="83" pos:column="27"/></name></expr>;<pos:position pos:line="83" pos:column="28"/></expr_stmt>
          <expr_stmt><expr><name pos:line="84" pos:column="11">c<pos:position pos:line="84" pos:column="12"/></name> <operator pos:line="84" pos:column="13">=<pos:position pos:line="84" pos:column="14"/></operator> <call><name pos:line="84" pos:column="15">EatWhitespace<pos:position pos:line="84" pos:column="28"/></name><argument_list pos:line="84" pos:column="28">(<argument><expr><name pos:line="84" pos:column="29">InFile<pos:position pos:line="84" pos:column="35"/></name></expr></argument>)<pos:position pos:line="84" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="37"/></expr_stmt>
          <if pos:line="85" pos:column="11">if <condition pos:line="85" pos:column="14">(<expr><name pos:line="85" pos:column="15">c<pos:position pos:line="85" pos:column="16"/></name> <operator pos:line="85" pos:column="17">==<pos:position pos:line="85" pos:column="19"/></operator> <literal type="char" pos:line="85" pos:column="20">'='<pos:position pos:line="85" pos:column="23"/></literal></expr>)<pos:position pos:line="85" pos:column="24"/></condition><then pos:line="85" pos:column="24">
            <block type="pseudo"><expr_stmt><expr><name pos:line="86" pos:column="13">c<pos:position pos:line="86" pos:column="14"/></name> <operator pos:line="86" pos:column="15">=<pos:position pos:line="86" pos:column="16"/></operator> <call><name pos:line="86" pos:column="17">EatWhitespace<pos:position pos:line="86" pos:column="30"/></name><argument_list pos:line="86" pos:column="30">(<argument><expr><name pos:line="86" pos:column="31">InFile<pos:position pos:line="86" pos:column="37"/></name></expr></argument>)<pos:position pos:line="86" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="39"/></expr_stmt></block></then></if>
          <break pos:line="87" pos:column="11">break;<pos:position pos:line="87" pos:column="17"/></break>
        }<pos:position pos:line="88" pos:column="10"/></block></then></if>
        <comment type="block" pos:line="89" pos:column="9">/* FALL THROUGH */</comment>

      <default pos:line="91" pos:column="7">default:<pos:position pos:line="91" pos:column="15"/></default>
        <if pos:line="92" pos:column="9">if<condition pos:line="92" pos:column="11">( <expr><call><name pos:line="92" pos:column="13">isspace<pos:position pos:line="92" pos:column="20"/></name><argument_list pos:line="92" pos:column="20">( <argument><expr><name pos:line="92" pos:column="22">c<pos:position pos:line="92" pos:column="23"/></name></expr></argument> )<pos:position pos:line="92" pos:column="25"/></argument_list></call></expr> )<pos:position pos:line="92" pos:column="27"/></condition><then pos:line="92" pos:column="27">     <comment type="block" pos:line="92" pos:column="32">/* One ' ' per whitespace region.       */</comment>
          <block pos:line="93" pos:column="11">{
          <expr_stmt><expr><name><name pos:line="94" pos:column="11">bufr<pos:position pos:line="94" pos:column="15"/></name><index pos:line="94" pos:column="15">[<expr><name pos:line="94" pos:column="16">end<pos:position pos:line="94" pos:column="19"/></name></expr>]<pos:position pos:line="94" pos:column="20"/></index></name> <operator pos:line="94" pos:column="21">=<pos:position pos:line="94" pos:column="22"/></operator> <literal type="char" pos:line="94" pos:column="23">' '<pos:position pos:line="94" pos:column="26"/></literal></expr>;<pos:position pos:line="94" pos:column="27"/></expr_stmt>
          <expr_stmt><expr><name pos:line="95" pos:column="11">i<pos:position pos:line="95" pos:column="12"/></name> <operator pos:line="95" pos:column="13">=<pos:position pos:line="95" pos:column="14"/></operator> <name pos:line="95" pos:column="15">end<pos:position pos:line="95" pos:column="18"/></name> <operator pos:line="95" pos:column="19">+<pos:position pos:line="95" pos:column="20"/></operator> <literal type="number" pos:line="95" pos:column="21">1<pos:position pos:line="95" pos:column="22"/></literal></expr>;<pos:position pos:line="95" pos:column="23"/></expr_stmt>
          <expr_stmt><expr><name pos:line="96" pos:column="11">c<pos:position pos:line="96" pos:column="12"/></name> <operator pos:line="96" pos:column="13">=<pos:position pos:line="96" pos:column="14"/></operator> <call><name pos:line="96" pos:column="15">EatWhitespace<pos:position pos:line="96" pos:column="28"/></name><argument_list pos:line="96" pos:column="28">( <argument><expr><name pos:line="96" pos:column="30">InFile<pos:position pos:line="96" pos:column="36"/></name></expr></argument> )<pos:position pos:line="96" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="39"/></expr_stmt>
          }<pos:position pos:line="97" pos:column="12"/></block></then>
        <else pos:line="98" pos:column="9">else                   <comment type="block" pos:line="98" pos:column="32">/* All others verbatim.                 */</comment>
          <block pos:line="99" pos:column="11">{
          <expr_stmt><expr><name><name pos:line="100" pos:column="11">bufr<pos:position pos:line="100" pos:column="15"/></name><index pos:line="100" pos:column="15">[<expr><name pos:line="100" pos:column="16">i<pos:position pos:line="100" pos:column="17"/></name><operator pos:line="100" pos:column="17">++<pos:position pos:line="100" pos:column="19"/></operator></expr>]<pos:position pos:line="100" pos:column="20"/></index></name> <operator pos:line="100" pos:column="21">=<pos:position pos:line="100" pos:column="22"/></operator> <name pos:line="100" pos:column="23">c<pos:position pos:line="100" pos:column="24"/></name></expr>;<pos:position pos:line="100" pos:column="25"/></expr_stmt>
          <expr_stmt><expr><name pos:line="101" pos:column="11">end<pos:position pos:line="101" pos:column="14"/></name> <operator pos:line="101" pos:column="15">=<pos:position pos:line="101" pos:column="16"/></operator> <name pos:line="101" pos:column="17">i<pos:position pos:line="101" pos:column="18"/></name></expr>;<pos:position pos:line="101" pos:column="19"/></expr_stmt>
          <expr_stmt><expr><name pos:line="102" pos:column="11">c<pos:position pos:line="102" pos:column="12"/></name> <operator pos:line="102" pos:column="13">=<pos:position pos:line="102" pos:column="14"/></operator> <call><name pos:line="102" pos:column="15">getc<pos:position pos:line="102" pos:column="19"/></name><argument_list pos:line="102" pos:column="19">( <argument><expr><name pos:line="102" pos:column="21">InFile<pos:position pos:line="102" pos:column="27"/></name></expr></argument> )<pos:position pos:line="102" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="102" pos:column="30"/></expr_stmt>
          }<pos:position pos:line="103" pos:column="12"/></block></else></if>
      }<pos:position pos:line="104" pos:column="8"/></block></switch>
    }<pos:position pos:line="105" pos:column="6"/></block></while>

  <comment type="block" pos:line="107" pos:column="3">/* Now parse the value. */</comment>
  <while pos:line="108" pos:column="3">while<condition pos:line="108" pos:column="8">( <expr><operator pos:line="108" pos:column="10">(<pos:position pos:line="108" pos:column="11"/></operator><name pos:line="108" pos:column="11">EOF<pos:position pos:line="108" pos:column="14"/></name> <operator pos:line="108" pos:column="15">!=<pos:position pos:line="108" pos:column="17"/></operator><name pos:line="108" pos:column="17">c<pos:position pos:line="108" pos:column="18"/></name><operator pos:line="108" pos:column="18">)<pos:position pos:line="108" pos:column="19"/></operator> <operator pos:line="108" pos:column="20">&amp;&amp;<pos:position pos:line="108" pos:column="30"/></operator> <operator pos:line="108" pos:column="23">(<pos:position pos:line="108" pos:column="24"/></operator><name pos:line="108" pos:column="24">c<pos:position pos:line="108" pos:column="25"/></name> <operator pos:line="108" pos:column="26">&gt;<pos:position pos:line="108" pos:column="30"/></operator> <literal type="number" pos:line="108" pos:column="28">0<pos:position pos:line="108" pos:column="29"/></literal><operator pos:line="108" pos:column="29">)<pos:position pos:line="108" pos:column="30"/></operator></expr> )<pos:position pos:line="108" pos:column="32"/></condition>
    <block pos:line="109" pos:column="5">{

    <if pos:line="111" pos:column="5">if<condition pos:line="111" pos:column="7">( <expr><name pos:line="111" pos:column="9">i<pos:position pos:line="111" pos:column="10"/></name> <operator pos:line="111" pos:column="11">&gt;<pos:position pos:line="111" pos:column="15"/></operator> <operator pos:line="111" pos:column="13">(<pos:position pos:line="111" pos:column="14"/></operator><name pos:line="111" pos:column="14">bSize<pos:position pos:line="111" pos:column="19"/></name> <operator pos:line="111" pos:column="20">-<pos:position pos:line="111" pos:column="21"/></operator> <literal type="number" pos:line="111" pos:column="22">2<pos:position pos:line="111" pos:column="23"/></literal><operator pos:line="111" pos:column="23">)<pos:position pos:line="111" pos:column="24"/></operator></expr> )<pos:position pos:line="111" pos:column="26"/></condition><then pos:line="111" pos:column="26">       <comment type="block" pos:line="111" pos:column="33">/* Make sure there's enough room. */</comment>
      <block pos:line="112" pos:column="7">{
      <expr_stmt><expr><name pos:line="113" pos:column="7">bSize<pos:position pos:line="113" pos:column="12"/></name> <operator pos:line="113" pos:column="13">+=<pos:position pos:line="113" pos:column="15"/></operator> <name pos:line="113" pos:column="16">BUFR_INC<pos:position pos:line="113" pos:column="24"/></name></expr>;<pos:position pos:line="113" pos:column="25"/></expr_stmt>
      <expr_stmt><expr><name pos:line="114" pos:column="7">bufr<pos:position pos:line="114" pos:column="11"/></name>   <operator pos:line="114" pos:column="14">=<pos:position pos:line="114" pos:column="15"/></operator> <call><name pos:line="114" pos:column="16">realloc_array<pos:position pos:line="114" pos:column="29"/></name><argument_list pos:line="114" pos:column="29">( <argument><expr><name pos:line="114" pos:column="31">bufr<pos:position pos:line="114" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="114" pos:column="37">char<pos:position pos:line="114" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="114" pos:column="43">bSize<pos:position pos:line="114" pos:column="48"/></name></expr></argument> )<pos:position pos:line="114" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="114" pos:column="51"/></expr_stmt>
      <if pos:line="115" pos:column="7">if<condition pos:line="115" pos:column="9">( <expr><name pos:line="115" pos:column="11">NULL<pos:position pos:line="115" pos:column="15"/></name> <operator pos:line="115" pos:column="16">==<pos:position pos:line="115" pos:column="18"/></operator> <name pos:line="115" pos:column="19">bufr<pos:position pos:line="115" pos:column="23"/></name></expr> )<pos:position pos:line="115" pos:column="25"/></condition><then pos:line="115" pos:column="25">
        <block pos:line="116" pos:column="9">{
        <expr_stmt><expr><call><name pos:line="117" pos:column="9">rprintf<pos:position pos:line="117" pos:column="16"/></name><argument_list pos:line="117" pos:column="16">(<argument><expr><name pos:line="117" pos:column="17">FLOG<pos:position pos:line="117" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="117" pos:column="23">"%s Memory re-allocation failure."<pos:position pos:line="117" pos:column="57"/></literal></expr></argument>, <argument><expr><name pos:line="117" pos:column="59">func<pos:position pos:line="117" pos:column="63"/></name></expr></argument>)<pos:position pos:line="117" pos:column="64"/></argument_list></call></expr> ;<pos:position pos:line="117" pos:column="66"/></expr_stmt>
        <return pos:line="118" pos:column="9">return<expr><operator pos:line="118" pos:column="15">(<pos:position pos:line="118" pos:column="16"/></operator> <name pos:line="118" pos:column="17">False<pos:position pos:line="118" pos:column="22"/></name> <operator pos:line="118" pos:column="23">)<pos:position pos:line="118" pos:column="24"/></operator></expr>;<pos:position pos:line="118" pos:column="25"/></return>
        }<pos:position pos:line="119" pos:column="10"/></block></then></if>
      }<pos:position pos:line="120" pos:column="8"/></block></then></if>

    <switch pos:line="122" pos:column="5">switch<condition pos:line="122" pos:column="11">( <expr><name pos:line="122" pos:column="13">c<pos:position pos:line="122" pos:column="14"/></name></expr> )<pos:position pos:line="122" pos:column="16"/></condition>
      <block pos:line="123" pos:column="7">{
      <case pos:line="124" pos:column="7">case <expr><literal type="char" pos:line="124" pos:column="12">'\r'<pos:position pos:line="124" pos:column="16"/></literal></expr>:<pos:position pos:line="124" pos:column="17"/></case>              <comment type="block" pos:line="124" pos:column="31">/* Explicitly remove '\r' because the older */</comment>
        <expr_stmt><expr><name pos:line="125" pos:column="9">c<pos:position pos:line="125" pos:column="10"/></name> <operator pos:line="125" pos:column="11">=<pos:position pos:line="125" pos:column="12"/></operator> <call><name pos:line="125" pos:column="13">getc<pos:position pos:line="125" pos:column="17"/></name><argument_list pos:line="125" pos:column="17">( <argument><expr><name pos:line="125" pos:column="19">InFile<pos:position pos:line="125" pos:column="25"/></name></expr></argument> )<pos:position pos:line="125" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="125" pos:column="28"/></expr_stmt>   <comment type="block" pos:line="125" pos:column="31">/* version called fgets_slash() which also  */</comment>
        <break pos:line="126" pos:column="9">break;<pos:position pos:line="126" pos:column="15"/></break>                <comment type="block" pos:line="126" pos:column="31">/* removes them.                            */</comment>

      <case pos:line="128" pos:column="7">case <expr><literal type="char" pos:line="128" pos:column="12">'\n'<pos:position pos:line="128" pos:column="16"/></literal></expr>:<pos:position pos:line="128" pos:column="17"/></case>              <comment type="block" pos:line="128" pos:column="31">/* Marks end of value unless there's a '\'. */</comment>
        <expr_stmt><expr><name pos:line="129" pos:column="9">i<pos:position pos:line="129" pos:column="10"/></name> <operator pos:line="129" pos:column="11">=<pos:position pos:line="129" pos:column="12"/></operator> <call><name pos:line="129" pos:column="13">Continuation<pos:position pos:line="129" pos:column="25"/></name><argument_list pos:line="129" pos:column="25">( <argument><expr><name pos:line="129" pos:column="27">bufr<pos:position pos:line="129" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="129" pos:column="33">i<pos:position pos:line="129" pos:column="34"/></name></expr></argument> )<pos:position pos:line="129" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="129" pos:column="37"/></expr_stmt>
        <if pos:line="130" pos:column="9">if<condition pos:line="130" pos:column="11">( <expr><name pos:line="130" pos:column="13">i<pos:position pos:line="130" pos:column="14"/></name> <operator pos:line="130" pos:column="15">&lt;<pos:position pos:line="130" pos:column="19"/></operator> <literal type="number" pos:line="130" pos:column="17">0<pos:position pos:line="130" pos:column="18"/></literal></expr> )<pos:position pos:line="130" pos:column="20"/></condition><then pos:line="130" pos:column="20">
          <block type="pseudo"><expr_stmt><expr><name pos:line="131" pos:column="11">c<pos:position pos:line="131" pos:column="12"/></name> <operator pos:line="131" pos:column="13">=<pos:position pos:line="131" pos:column="14"/></operator> <literal type="number" pos:line="131" pos:column="15">0<pos:position pos:line="131" pos:column="16"/></literal></expr>;<pos:position pos:line="131" pos:column="17"/></expr_stmt></block></then>
        <else pos:line="132" pos:column="9">else
          <block pos:line="133" pos:column="11">{
          <for pos:line="134" pos:column="11">for<control pos:line="134" pos:column="14">( <init><expr><name pos:line="134" pos:column="16">end<pos:position pos:line="134" pos:column="19"/></name> <operator pos:line="134" pos:column="20">=<pos:position pos:line="134" pos:column="21"/></operator> <name pos:line="134" pos:column="22">i<pos:position pos:line="134" pos:column="23"/></name></expr>;<pos:position pos:line="134" pos:column="24"/></init> <condition><expr><name pos:line="134" pos:column="25">end<pos:position pos:line="134" pos:column="28"/></name> <operator pos:line="134" pos:column="29">&gt;=<pos:position pos:line="134" pos:column="34"/></operator> <literal type="number" pos:line="134" pos:column="32">0<pos:position pos:line="134" pos:column="33"/></literal> <operator pos:line="134" pos:column="34">&amp;&amp;<pos:position pos:line="134" pos:column="44"/></operator> <call><name pos:line="134" pos:column="37">isSpace<pos:position pos:line="134" pos:column="44"/></name><argument_list pos:line="134" pos:column="44">(<argument><expr><name pos:line="134" pos:column="45">bufr<pos:position pos:line="134" pos:column="49"/></name> <operator pos:line="134" pos:column="50">+<pos:position pos:line="134" pos:column="51"/></operator> <name pos:line="134" pos:column="52">end<pos:position pos:line="134" pos:column="55"/></name></expr></argument>)<pos:position pos:line="134" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="134" pos:column="57"/></condition> <incr><expr><name pos:line="134" pos:column="58">end<pos:position pos:line="134" pos:column="61"/></name><operator pos:line="134" pos:column="61">--<pos:position pos:line="134" pos:column="63"/></operator></expr></incr> )<pos:position pos:line="134" pos:column="65"/></control>
            <block type="pseudo"><empty_stmt pos:line="135" pos:column="13">;<pos:position pos:line="135" pos:column="14"/></empty_stmt></block></for>
          <expr_stmt><expr><name pos:line="136" pos:column="11">c<pos:position pos:line="136" pos:column="12"/></name> <operator pos:line="136" pos:column="13">=<pos:position pos:line="136" pos:column="14"/></operator> <call><name pos:line="136" pos:column="15">getc<pos:position pos:line="136" pos:column="19"/></name><argument_list pos:line="136" pos:column="19">( <argument><expr><name pos:line="136" pos:column="21">InFile<pos:position pos:line="136" pos:column="27"/></name></expr></argument> )<pos:position pos:line="136" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="136" pos:column="30"/></expr_stmt>
          }<pos:position pos:line="137" pos:column="12"/></block></else></if>
        <break pos:line="138" pos:column="9">break;<pos:position pos:line="138" pos:column="15"/></break>

      <default pos:line="140" pos:column="7">default:<pos:position pos:line="140" pos:column="15"/></default>               <comment type="block" pos:line="140" pos:column="30">/* All others verbatim.  Note that spaces do */</comment>
        <expr_stmt><expr><name><name pos:line="141" pos:column="9">bufr<pos:position pos:line="141" pos:column="13"/></name><index pos:line="141" pos:column="13">[<expr><name pos:line="141" pos:column="14">i<pos:position pos:line="141" pos:column="15"/></name><operator pos:line="141" pos:column="15">++<pos:position pos:line="141" pos:column="17"/></operator></expr>]<pos:position pos:line="141" pos:column="18"/></index></name> <operator pos:line="141" pos:column="19">=<pos:position pos:line="141" pos:column="20"/></operator> <name pos:line="141" pos:column="21">c<pos:position pos:line="141" pos:column="22"/></name></expr>;<pos:position pos:line="141" pos:column="23"/></expr_stmt>       <comment type="block" pos:line="141" pos:column="30">/* not advance &lt;end&gt;.  This allows trimming  */</comment>
        <if pos:line="142" pos:column="9">if<condition pos:line="142" pos:column="11">( <expr><operator pos:line="142" pos:column="13">!<pos:position pos:line="142" pos:column="14"/></operator><call><name pos:line="142" pos:column="14">isspace<pos:position pos:line="142" pos:column="21"/></name><argument_list pos:line="142" pos:column="21">( <argument><expr><name pos:line="142" pos:column="23">c<pos:position pos:line="142" pos:column="24"/></name></expr></argument> )<pos:position pos:line="142" pos:column="26"/></argument_list></call></expr> )<pos:position pos:line="142" pos:column="28"/></condition><then pos:line="142" pos:column="28">  <comment type="block" pos:line="142" pos:column="30">/* of whitespace at the end of the line.     */</comment>
          <block type="pseudo"><expr_stmt><expr><name pos:line="143" pos:column="11">end<pos:position pos:line="143" pos:column="14"/></name> <operator pos:line="143" pos:column="15">=<pos:position pos:line="143" pos:column="16"/></operator> <name pos:line="143" pos:column="17">i<pos:position pos:line="143" pos:column="18"/></name></expr>;<pos:position pos:line="143" pos:column="19"/></expr_stmt></block></then></if>
        <expr_stmt><expr><name pos:line="144" pos:column="9">c<pos:position pos:line="144" pos:column="10"/></name> <operator pos:line="144" pos:column="11">=<pos:position pos:line="144" pos:column="12"/></operator> <call><name pos:line="144" pos:column="13">getc<pos:position pos:line="144" pos:column="17"/></name><argument_list pos:line="144" pos:column="17">( <argument><expr><name pos:line="144" pos:column="19">InFile<pos:position pos:line="144" pos:column="25"/></name></expr></argument> )<pos:position pos:line="144" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="144" pos:column="28"/></expr_stmt>
        <break pos:line="145" pos:column="9">break;<pos:position pos:line="145" pos:column="15"/></break>
      }<pos:position pos:line="146" pos:column="8"/></block></switch>
    }<pos:position pos:line="147" pos:column="6"/></block></while>
  <expr_stmt><expr><name><name pos:line="148" pos:column="3">bufr<pos:position pos:line="148" pos:column="7"/></name><index pos:line="148" pos:column="7">[<expr><name pos:line="148" pos:column="8">end<pos:position pos:line="148" pos:column="11"/></name></expr>]<pos:position pos:line="148" pos:column="12"/></index></name> <operator pos:line="148" pos:column="13">=<pos:position pos:line="148" pos:column="14"/></operator> <literal type="char" pos:line="148" pos:column="15">'\0'<pos:position pos:line="148" pos:column="19"/></literal></expr>;<pos:position pos:line="148" pos:column="20"/></expr_stmt>          <comment type="block" pos:line="148" pos:column="30">/* End of value. */</comment>

  <return pos:line="150" pos:column="3">return<expr><operator pos:line="150" pos:column="9">(<pos:position pos:line="150" pos:column="10"/></operator> <call><name pos:line="150" pos:column="11">pfunc<pos:position pos:line="150" pos:column="16"/></name><argument_list pos:line="150" pos:column="16">( <argument><expr><name pos:line="150" pos:column="18">bufr<pos:position pos:line="150" pos:column="22"/></name></expr></argument>, <argument><expr><operator pos:line="150" pos:column="24">&amp;<pos:position pos:line="150" pos:column="29"/></operator><name><name pos:line="150" pos:column="25">bufr<pos:position pos:line="150" pos:column="29"/></name><index pos:line="150" pos:column="29">[<expr><name pos:line="150" pos:column="30">vstart<pos:position pos:line="150" pos:column="36"/></name></expr>]<pos:position pos:line="150" pos:column="37"/></index></name></expr></argument> )<pos:position pos:line="150" pos:column="39"/></argument_list></call> <operator pos:line="150" pos:column="40">)<pos:position pos:line="150" pos:column="41"/></operator></expr>;<pos:position pos:line="150" pos:column="42"/></return>   <comment type="block" pos:line="150" pos:column="45">/* Pass name &amp; value to pfunc().  */</comment>
  }<pos:position pos:line="151" pos:column="4"/></block></function></unit>
