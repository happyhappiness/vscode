<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_function_771.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name> <modifier pos:line="1" pos:column="12">*<pos:position pos:line="1" pos:column="13"/></modifier></type><name pos:line="1" pos:column="13">open_socket_in<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name pos:line="1" pos:column="28">int<pos:position pos:line="1" pos:column="31"/></name></type> <name pos:line="1" pos:column="32">type<pos:position pos:line="1" pos:column="36"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="38">int<pos:position pos:line="1" pos:column="41"/></name></type> <name pos:line="1" pos:column="42">port<pos:position pos:line="1" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="48">const<pos:position pos:line="1" pos:column="53"/></specifier> <name pos:line="1" pos:column="54">char<pos:position pos:line="1" pos:column="58"/></name> <modifier pos:line="1" pos:column="59">*<pos:position pos:line="1" pos:column="60"/></modifier></type><name pos:line="1" pos:column="60">bind_address<pos:position pos:line="1" pos:column="72"/></name></decl></parameter>,
			   <parameter><decl><type><name pos:line="2" pos:column="28">int<pos:position pos:line="2" pos:column="31"/></name></type> <name pos:line="2" pos:column="32">af_hint<pos:position pos:line="2" pos:column="39"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="40"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">one<pos:position pos:line="4" pos:column="16"/></name> <init pos:line="4" pos:column="17">= <expr><literal type="number" pos:line="4" pos:column="19">1<pos:position pos:line="4" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="21"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">s<pos:position pos:line="5" pos:column="14"/></name></decl>, <modifier pos:line="5" pos:column="16">*<pos:position pos:line="5" pos:column="17"/></modifier><decl><type ref="prev"/><name pos:line="5" pos:column="17">socks<pos:position pos:line="5" pos:column="22"/></name></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="24">maxs<pos:position pos:line="5" pos:column="28"/></name></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="30">i<pos:position pos:line="5" pos:column="31"/></name></decl>;<pos:position pos:line="5" pos:column="32"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">addrinfo<pos:position pos:line="6" pos:column="24"/></name></name></type> <name pos:line="6" pos:column="25">hints<pos:position pos:line="6" pos:column="30"/></name></decl>, <modifier pos:line="6" pos:column="32">*<pos:position pos:line="6" pos:column="33"/></modifier><decl><type ref="prev"/><name pos:line="6" pos:column="33">all_ai<pos:position pos:line="6" pos:column="39"/></name></decl>, <modifier pos:line="6" pos:column="41">*<pos:position pos:line="6" pos:column="42"/></modifier><decl><type ref="prev"/><name pos:line="6" pos:column="42">resp<pos:position pos:line="6" pos:column="46"/></name></decl>;<pos:position pos:line="6" pos:column="47"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">char<pos:position pos:line="7" pos:column="13"/></name></type> <name><name pos:line="7" pos:column="14">portbuf<pos:position pos:line="7" pos:column="21"/></name><index pos:line="7" pos:column="21">[<expr><literal type="number" pos:line="7" pos:column="22">10<pos:position pos:line="7" pos:column="24"/></literal></expr>]<pos:position pos:line="7" pos:column="25"/></index></name></decl>;<pos:position pos:line="7" pos:column="26"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">int<pos:position pos:line="8" pos:column="12"/></name></type> <name pos:line="8" pos:column="13">error<pos:position pos:line="8" pos:column="18"/></name></decl>;<pos:position pos:line="8" pos:column="19"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="10" pos:column="9">memset<pos:position pos:line="10" pos:column="15"/></name><argument_list pos:line="10" pos:column="15">(<argument><expr><operator pos:line="10" pos:column="16">&amp;<pos:position pos:line="10" pos:column="21"/></operator><name pos:line="10" pos:column="17">hints<pos:position pos:line="10" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="10" pos:column="24">0<pos:position pos:line="10" pos:column="25"/></literal></expr></argument>, <argument><expr><sizeof pos:line="10" pos:column="27">sizeof <name pos:line="10" pos:column="34">hints<pos:position pos:line="10" pos:column="39"/></name></sizeof></expr></argument>)<pos:position pos:line="10" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="41"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="11" pos:column="9">hints<pos:position pos:line="11" pos:column="14"/></name><operator pos:line="11" pos:column="14">.<pos:position pos:line="11" pos:column="15"/></operator><name pos:line="11" pos:column="15">ai_family<pos:position pos:line="11" pos:column="24"/></name></name> <operator pos:line="11" pos:column="25">=<pos:position pos:line="11" pos:column="26"/></operator> <name pos:line="11" pos:column="27">af_hint<pos:position pos:line="11" pos:column="34"/></name></expr>;<pos:position pos:line="11" pos:column="35"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="12" pos:column="9">hints<pos:position pos:line="12" pos:column="14"/></name><operator pos:line="12" pos:column="14">.<pos:position pos:line="12" pos:column="15"/></operator><name pos:line="12" pos:column="15">ai_socktype<pos:position pos:line="12" pos:column="26"/></name></name> <operator pos:line="12" pos:column="27">=<pos:position pos:line="12" pos:column="28"/></operator> <name pos:line="12" pos:column="29">type<pos:position pos:line="12" pos:column="33"/></name></expr>;<pos:position pos:line="12" pos:column="34"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="13" pos:column="9">hints<pos:position pos:line="13" pos:column="14"/></name><operator pos:line="13" pos:column="14">.<pos:position pos:line="13" pos:column="15"/></operator><name pos:line="13" pos:column="15">ai_flags<pos:position pos:line="13" pos:column="23"/></name></name> <operator pos:line="13" pos:column="24">=<pos:position pos:line="13" pos:column="25"/></operator> <name pos:line="13" pos:column="26">AI_PASSIVE<pos:position pos:line="13" pos:column="36"/></name></expr>;<pos:position pos:line="13" pos:column="37"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="14" pos:column="9">snprintf<pos:position pos:line="14" pos:column="17"/></name><argument_list pos:line="14" pos:column="17">(<argument><expr><name pos:line="14" pos:column="18">portbuf<pos:position pos:line="14" pos:column="25"/></name></expr></argument>, <argument><expr><sizeof pos:line="14" pos:column="27">sizeof <name pos:line="14" pos:column="34">portbuf<pos:position pos:line="14" pos:column="41"/></name></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="14" pos:column="43">"%d"<pos:position pos:line="14" pos:column="47"/></literal></expr></argument>, <argument><expr><name pos:line="14" pos:column="49">port<pos:position pos:line="14" pos:column="53"/></name></expr></argument>)<pos:position pos:line="14" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="55"/></expr_stmt>
	<expr_stmt><expr><name pos:line="15" pos:column="9">error<pos:position pos:line="15" pos:column="14"/></name> <operator pos:line="15" pos:column="15">=<pos:position pos:line="15" pos:column="16"/></operator> <call><name pos:line="15" pos:column="17">getaddrinfo<pos:position pos:line="15" pos:column="28"/></name><argument_list pos:line="15" pos:column="28">(<argument><expr><name pos:line="15" pos:column="29">bind_address<pos:position pos:line="15" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="43">portbuf<pos:position pos:line="15" pos:column="50"/></name></expr></argument>, <argument><expr><operator pos:line="15" pos:column="52">&amp;<pos:position pos:line="15" pos:column="57"/></operator><name pos:line="15" pos:column="53">hints<pos:position pos:line="15" pos:column="58"/></name></expr></argument>, <argument><expr><operator pos:line="15" pos:column="60">&amp;<pos:position pos:line="15" pos:column="65"/></operator><name pos:line="15" pos:column="61">all_ai<pos:position pos:line="15" pos:column="67"/></name></expr></argument>)<pos:position pos:line="15" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="69"/></expr_stmt>
	<if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><name pos:line="16" pos:column="13">error<pos:position pos:line="16" pos:column="18"/></name></expr>)<pos:position pos:line="16" pos:column="19"/></condition><then pos:line="16" pos:column="19"> <block pos:line="16" pos:column="20">{
		<expr_stmt><expr><call><name pos:line="17" pos:column="17">rprintf<pos:position pos:line="17" pos:column="24"/></name><argument_list pos:line="17" pos:column="24">(<argument><expr><name pos:line="17" pos:column="25">FERROR<pos:position pos:line="17" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="33">RSYNC_NAME<pos:position pos:line="17" pos:column="43"/></name> <literal type="string" pos:line="17" pos:column="44">": getaddrinfo: bind address %s: %s\n"<pos:position pos:line="17" pos:column="82"/></literal></expr></argument>,
			<argument><expr><name pos:line="18" pos:column="25">bind_address<pos:position pos:line="18" pos:column="37"/></name></expr></argument>, <argument><expr><call><name pos:line="18" pos:column="39">gai_strerror<pos:position pos:line="18" pos:column="51"/></name><argument_list pos:line="18" pos:column="51">(<argument><expr><name pos:line="18" pos:column="52">error<pos:position pos:line="18" pos:column="57"/></name></expr></argument>)<pos:position pos:line="18" pos:column="58"/></argument_list></call></expr></argument>)<pos:position pos:line="18" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="60"/></expr_stmt>
		<return pos:line="19" pos:column="17">return <expr><name pos:line="19" pos:column="24">NULL<pos:position pos:line="19" pos:column="28"/></name></expr>;<pos:position pos:line="19" pos:column="29"/></return>
	}<pos:position pos:line="20" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="22" pos:column="9">/* Count max number of sockets we might open. */</comment>
	<for pos:line="23" pos:column="9">for <control pos:line="23" pos:column="13">(<init><expr><name pos:line="23" pos:column="14">maxs<pos:position pos:line="23" pos:column="18"/></name> <operator pos:line="23" pos:column="19">=<pos:position pos:line="23" pos:column="20"/></operator> <literal type="number" pos:line="23" pos:column="21">0<pos:position pos:line="23" pos:column="22"/></literal></expr><operator pos:line="23" pos:column="22">,<pos:position pos:line="23" pos:column="23"/></operator> <expr><name pos:line="23" pos:column="24">resp<pos:position pos:line="23" pos:column="28"/></name> <operator pos:line="23" pos:column="29">=<pos:position pos:line="23" pos:column="30"/></operator> <name pos:line="23" pos:column="31">all_ai<pos:position pos:line="23" pos:column="37"/></name></expr>;<pos:position pos:line="23" pos:column="38"/></init> <condition><expr><name pos:line="23" pos:column="39">resp<pos:position pos:line="23" pos:column="43"/></name></expr>;<pos:position pos:line="23" pos:column="44"/></condition> <incr><expr><name pos:line="23" pos:column="45">resp<pos:position pos:line="23" pos:column="49"/></name> <operator pos:line="23" pos:column="50">=<pos:position pos:line="23" pos:column="51"/></operator> <name><name pos:line="23" pos:column="52">resp<pos:position pos:line="23" pos:column="56"/></name><operator pos:line="23" pos:column="56">-&gt;<pos:position pos:line="23" pos:column="61"/></operator><name pos:line="23" pos:column="58">ai_next<pos:position pos:line="23" pos:column="65"/></name></name></expr><operator pos:line="23" pos:column="65">,<pos:position pos:line="23" pos:column="66"/></operator> <expr><name pos:line="23" pos:column="67">maxs<pos:position pos:line="23" pos:column="71"/></name><operator pos:line="23" pos:column="71">++<pos:position pos:line="23" pos:column="73"/></operator></expr></incr>)<pos:position pos:line="23" pos:column="74"/></control> <block pos:line="23" pos:column="75">{}<pos:position pos:line="23" pos:column="77"/></block></for>

	<if pos:line="25" pos:column="9">if <condition pos:line="25" pos:column="12">(<expr><operator pos:line="25" pos:column="13">!<pos:position pos:line="25" pos:column="14"/></operator><operator pos:line="25" pos:column="14">(<pos:position pos:line="25" pos:column="15"/></operator><name pos:line="25" pos:column="15">socks<pos:position pos:line="25" pos:column="20"/></name> <operator pos:line="25" pos:column="21">=<pos:position pos:line="25" pos:column="22"/></operator> <call><name pos:line="25" pos:column="23">new_array<pos:position pos:line="25" pos:column="32"/></name><argument_list pos:line="25" pos:column="32">(<argument><expr><name pos:line="25" pos:column="33">int<pos:position pos:line="25" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="38">maxs<pos:position pos:line="25" pos:column="42"/></name> <operator pos:line="25" pos:column="43">+<pos:position pos:line="25" pos:column="44"/></operator> <literal type="number" pos:line="25" pos:column="45">1<pos:position pos:line="25" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="47"/></argument_list></call><operator pos:line="25" pos:column="47">)<pos:position pos:line="25" pos:column="48"/></operator></expr>)<pos:position pos:line="25" pos:column="49"/></condition><then pos:line="25" pos:column="49">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="26" pos:column="17">out_of_memory<pos:position pos:line="26" pos:column="30"/></name><argument_list pos:line="26" pos:column="30">(<argument><expr><literal type="string" pos:line="26" pos:column="31">"open_socket_in"<pos:position pos:line="26" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="49"/></expr_stmt></block></then></if>

	<comment type="block" pos:line="28" pos:column="9">/* We may not be able to create the socket, if for example the
	 * machine knows about IPv6 in the C library, but not in the
	 * kernel. */</comment>
	<for pos:line="31" pos:column="9">for <control pos:line="31" pos:column="13">(<init><expr><name pos:line="31" pos:column="14">resp<pos:position pos:line="31" pos:column="18"/></name> <operator pos:line="31" pos:column="19">=<pos:position pos:line="31" pos:column="20"/></operator> <name pos:line="31" pos:column="21">all_ai<pos:position pos:line="31" pos:column="27"/></name></expr><operator pos:line="31" pos:column="27">,<pos:position pos:line="31" pos:column="28"/></operator> <expr><name pos:line="31" pos:column="29">i<pos:position pos:line="31" pos:column="30"/></name> <operator pos:line="31" pos:column="31">=<pos:position pos:line="31" pos:column="32"/></operator> <literal type="number" pos:line="31" pos:column="33">0<pos:position pos:line="31" pos:column="34"/></literal></expr>;<pos:position pos:line="31" pos:column="35"/></init> <condition><expr><name pos:line="31" pos:column="36">resp<pos:position pos:line="31" pos:column="40"/></name></expr>;<pos:position pos:line="31" pos:column="41"/></condition> <incr><expr><name pos:line="31" pos:column="42">resp<pos:position pos:line="31" pos:column="46"/></name> <operator pos:line="31" pos:column="47">=<pos:position pos:line="31" pos:column="48"/></operator> <name><name pos:line="31" pos:column="49">resp<pos:position pos:line="31" pos:column="53"/></name><operator pos:line="31" pos:column="53">-&gt;<pos:position pos:line="31" pos:column="58"/></operator><name pos:line="31" pos:column="55">ai_next<pos:position pos:line="31" pos:column="62"/></name></name></expr></incr>)<pos:position pos:line="31" pos:column="63"/></control> <block pos:line="31" pos:column="64">{
		<expr_stmt><expr><name pos:line="32" pos:column="17">s<pos:position pos:line="32" pos:column="18"/></name> <operator pos:line="32" pos:column="19">=<pos:position pos:line="32" pos:column="20"/></operator> <call><name pos:line="32" pos:column="21">socket<pos:position pos:line="32" pos:column="27"/></name><argument_list pos:line="32" pos:column="27">(<argument><expr><name><name pos:line="32" pos:column="28">resp<pos:position pos:line="32" pos:column="32"/></name><operator pos:line="32" pos:column="32">-&gt;<pos:position pos:line="32" pos:column="37"/></operator><name pos:line="32" pos:column="34">ai_family<pos:position pos:line="32" pos:column="43"/></name></name></expr></argument>, <argument><expr><name><name pos:line="32" pos:column="45">resp<pos:position pos:line="32" pos:column="49"/></name><operator pos:line="32" pos:column="49">-&gt;<pos:position pos:line="32" pos:column="54"/></operator><name pos:line="32" pos:column="51">ai_socktype<pos:position pos:line="32" pos:column="62"/></name></name></expr></argument>,
			   <argument><expr><name><name pos:line="33" pos:column="28">resp<pos:position pos:line="33" pos:column="32"/></name><operator pos:line="33" pos:column="32">-&gt;<pos:position pos:line="33" pos:column="37"/></operator><name pos:line="33" pos:column="34">ai_protocol<pos:position pos:line="33" pos:column="45"/></name></name></expr></argument>)<pos:position pos:line="33" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="47"/></expr_stmt>

		<if pos:line="35" pos:column="17">if <condition pos:line="35" pos:column="20">(<expr><name pos:line="35" pos:column="21">s<pos:position pos:line="35" pos:column="22"/></name> <operator pos:line="35" pos:column="23">==<pos:position pos:line="35" pos:column="25"/></operator> <operator pos:line="35" pos:column="26">-<pos:position pos:line="35" pos:column="27"/></operator><literal type="number" pos:line="35" pos:column="27">1<pos:position pos:line="35" pos:column="28"/></literal></expr>)<pos:position pos:line="35" pos:column="29"/></condition><then pos:line="35" pos:column="29"> <block pos:line="35" pos:column="30">{
			<comment type="block" pos:line="36" pos:column="25">/* See if there's another address that will work... */</comment>
			<continue pos:line="37" pos:column="25">continue;<pos:position pos:line="37" pos:column="34"/></continue>
		}<pos:position pos:line="38" pos:column="18"/></block></then></if>

		<expr_stmt><expr><call><name pos:line="40" pos:column="17">setsockopt<pos:position pos:line="40" pos:column="27"/></name><argument_list pos:line="40" pos:column="27">(<argument><expr><name pos:line="40" pos:column="28">s<pos:position pos:line="40" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="31">SOL_SOCKET<pos:position pos:line="40" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="43">SO_REUSEADDR<pos:position pos:line="40" pos:column="55"/></name></expr></argument>,
			   <argument><expr><operator pos:line="41" pos:column="28">(<pos:position pos:line="41" pos:column="29"/></operator><name pos:line="41" pos:column="29">char<pos:position pos:line="41" pos:column="33"/></name> <operator pos:line="41" pos:column="34">*<pos:position pos:line="41" pos:column="35"/></operator><operator pos:line="41" pos:column="35">)<pos:position pos:line="41" pos:column="36"/></operator><operator pos:line="41" pos:column="36">&amp;<pos:position pos:line="41" pos:column="41"/></operator><name pos:line="41" pos:column="37">one<pos:position pos:line="41" pos:column="40"/></name></expr></argument>, <argument><expr><sizeof pos:line="41" pos:column="42">sizeof <name pos:line="41" pos:column="49">one<pos:position pos:line="41" pos:column="52"/></name></sizeof></expr></argument>)<pos:position pos:line="41" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="54"/></expr_stmt>

<cpp:ifdef pos:line="43" pos:column="1">#<cpp:directive pos:line="43" pos:column="2">ifdef<pos:position pos:line="43" pos:column="7"/></cpp:directive> <name pos:line="43" pos:column="8">IPV6_V6ONLY<pos:position pos:line="43" pos:column="19"/></name></cpp:ifdef>
		<if pos:line="44" pos:column="17">if <condition pos:line="44" pos:column="20">(<expr><name><name pos:line="44" pos:column="21">resp<pos:position pos:line="44" pos:column="25"/></name><operator pos:line="44" pos:column="25">-&gt;<pos:position pos:line="44" pos:column="30"/></operator><name pos:line="44" pos:column="27">ai_family<pos:position pos:line="44" pos:column="36"/></name></name> <operator pos:line="44" pos:column="37">==<pos:position pos:line="44" pos:column="39"/></operator> <name pos:line="44" pos:column="40">AF_INET6<pos:position pos:line="44" pos:column="48"/></name></expr>)<pos:position pos:line="44" pos:column="49"/></condition><then pos:line="44" pos:column="49"> <block pos:line="44" pos:column="50">{
			<if pos:line="45" pos:column="25">if <condition pos:line="45" pos:column="28">(<expr><call><name pos:line="45" pos:column="29">setsockopt<pos:position pos:line="45" pos:column="39"/></name><argument_list pos:line="45" pos:column="39">(<argument><expr><name pos:line="45" pos:column="40">s<pos:position pos:line="45" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="43">IPPROTO_IPV6<pos:position pos:line="45" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="57">IPV6_V6ONLY<pos:position pos:line="45" pos:column="68"/></name></expr></argument>,
				       <argument><expr><operator pos:line="46" pos:column="40">(<pos:position pos:line="46" pos:column="41"/></operator><name pos:line="46" pos:column="41">char<pos:position pos:line="46" pos:column="45"/></name> <operator pos:line="46" pos:column="46">*<pos:position pos:line="46" pos:column="47"/></operator><operator pos:line="46" pos:column="47">)<pos:position pos:line="46" pos:column="48"/></operator><operator pos:line="46" pos:column="48">&amp;<pos:position pos:line="46" pos:column="53"/></operator><name pos:line="46" pos:column="49">one<pos:position pos:line="46" pos:column="52"/></name></expr></argument>, <argument><expr><sizeof pos:line="46" pos:column="54">sizeof <name pos:line="46" pos:column="61">one<pos:position pos:line="46" pos:column="64"/></name></sizeof></expr></argument>)<pos:position pos:line="46" pos:column="65"/></argument_list></call> <operator pos:line="46" pos:column="66">&lt;<pos:position pos:line="46" pos:column="70"/></operator> <literal type="number" pos:line="46" pos:column="68">0<pos:position pos:line="46" pos:column="69"/></literal>
			    <operator pos:line="47" pos:column="29">&amp;&amp;<pos:position pos:line="47" pos:column="39"/></operator> <name pos:line="47" pos:column="32">default_af_hint<pos:position pos:line="47" pos:column="47"/></name> <operator pos:line="47" pos:column="48">!=<pos:position pos:line="47" pos:column="50"/></operator> <name pos:line="47" pos:column="51">AF_INET6<pos:position pos:line="47" pos:column="59"/></name></expr>)<pos:position pos:line="47" pos:column="60"/></condition><then pos:line="47" pos:column="60"> <block pos:line="47" pos:column="61">{
				<expr_stmt><expr><call><name pos:line="48" pos:column="33">close<pos:position pos:line="48" pos:column="38"/></name><argument_list pos:line="48" pos:column="38">(<argument><expr><name pos:line="48" pos:column="39">s<pos:position pos:line="48" pos:column="40"/></name></expr></argument>)<pos:position pos:line="48" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="42"/></expr_stmt>
				<continue pos:line="49" pos:column="33">continue;<pos:position pos:line="49" pos:column="42"/></continue>
			}<pos:position pos:line="50" pos:column="26"/></block></then></if>
		}<pos:position pos:line="51" pos:column="18"/></block></then></if>
<cpp:endif pos:line="52" pos:column="1">#<cpp:directive pos:line="52" pos:column="2">endif<pos:position pos:line="52" pos:column="7"/></cpp:directive></cpp:endif>

		<comment type="block" pos:line="54" pos:column="17">/* Now we've got a socket - we need to bind it. */</comment>
		<if pos:line="55" pos:column="17">if <condition pos:line="55" pos:column="20">(<expr><call><name pos:line="55" pos:column="21">bind<pos:position pos:line="55" pos:column="25"/></name><argument_list pos:line="55" pos:column="25">(<argument><expr><name pos:line="55" pos:column="26">s<pos:position pos:line="55" pos:column="27"/></name></expr></argument>, <argument><expr><name><name pos:line="55" pos:column="29">resp<pos:position pos:line="55" pos:column="33"/></name><operator pos:line="55" pos:column="33">-&gt;<pos:position pos:line="55" pos:column="38"/></operator><name pos:line="55" pos:column="35">ai_addr<pos:position pos:line="55" pos:column="42"/></name></name></expr></argument>, <argument><expr><name><name pos:line="55" pos:column="44">resp<pos:position pos:line="55" pos:column="48"/></name><operator pos:line="55" pos:column="48">-&gt;<pos:position pos:line="55" pos:column="53"/></operator><name pos:line="55" pos:column="50">ai_addrlen<pos:position pos:line="55" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="55" pos:column="61"/></argument_list></call> <operator pos:line="55" pos:column="62">&lt;<pos:position pos:line="55" pos:column="66"/></operator> <literal type="number" pos:line="55" pos:column="64">0<pos:position pos:line="55" pos:column="65"/></literal></expr>)<pos:position pos:line="55" pos:column="66"/></condition><then pos:line="55" pos:column="66"> <block pos:line="55" pos:column="67">{
			<comment type="block" pos:line="56" pos:column="25">/* Nope, try another */</comment>
			<expr_stmt><expr><call><name pos:line="57" pos:column="25">close<pos:position pos:line="57" pos:column="30"/></name><argument_list pos:line="57" pos:column="30">(<argument><expr><name pos:line="57" pos:column="31">s<pos:position pos:line="57" pos:column="32"/></name></expr></argument>)<pos:position pos:line="57" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="34"/></expr_stmt>
			<continue pos:line="58" pos:column="25">continue;<pos:position pos:line="58" pos:column="34"/></continue>
		}<pos:position pos:line="59" pos:column="18"/></block></then></if>

		<expr_stmt><expr><name><name pos:line="61" pos:column="17">socks<pos:position pos:line="61" pos:column="22"/></name><index pos:line="61" pos:column="22">[<expr><name pos:line="61" pos:column="23">i<pos:position pos:line="61" pos:column="24"/></name><operator pos:line="61" pos:column="24">++<pos:position pos:line="61" pos:column="26"/></operator></expr>]<pos:position pos:line="61" pos:column="27"/></index></name> <operator pos:line="61" pos:column="28">=<pos:position pos:line="61" pos:column="29"/></operator> <name pos:line="61" pos:column="30">s<pos:position pos:line="61" pos:column="31"/></name></expr>;<pos:position pos:line="61" pos:column="32"/></expr_stmt>
	}<pos:position pos:line="62" pos:column="10"/></block></for>
	<expr_stmt><expr><name><name pos:line="63" pos:column="9">socks<pos:position pos:line="63" pos:column="14"/></name><index pos:line="63" pos:column="14">[<expr><name pos:line="63" pos:column="15">i<pos:position pos:line="63" pos:column="16"/></name></expr>]<pos:position pos:line="63" pos:column="17"/></index></name> <operator pos:line="63" pos:column="18">=<pos:position pos:line="63" pos:column="19"/></operator> <operator pos:line="63" pos:column="20">-<pos:position pos:line="63" pos:column="21"/></operator><literal type="number" pos:line="63" pos:column="21">1<pos:position pos:line="63" pos:column="22"/></literal></expr>;<pos:position pos:line="63" pos:column="23"/></expr_stmt>

	<if pos:line="65" pos:column="9">if <condition pos:line="65" pos:column="12">(<expr><name pos:line="65" pos:column="13">all_ai<pos:position pos:line="65" pos:column="19"/></name></expr>)<pos:position pos:line="65" pos:column="20"/></condition><then pos:line="65" pos:column="20">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="66" pos:column="17">freeaddrinfo<pos:position pos:line="66" pos:column="29"/></name><argument_list pos:line="66" pos:column="29">(<argument><expr><name pos:line="66" pos:column="30">all_ai<pos:position pos:line="66" pos:column="36"/></name></expr></argument>)<pos:position pos:line="66" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="38"/></expr_stmt></block></then></if>

	<if pos:line="68" pos:column="9">if <condition pos:line="68" pos:column="12">(<expr><operator pos:line="68" pos:column="13">!<pos:position pos:line="68" pos:column="14"/></operator><name pos:line="68" pos:column="14">i<pos:position pos:line="68" pos:column="15"/></name></expr>)<pos:position pos:line="68" pos:column="16"/></condition><then pos:line="68" pos:column="16"> <block pos:line="68" pos:column="17">{
		<expr_stmt><expr><call><name pos:line="69" pos:column="17">rprintf<pos:position pos:line="69" pos:column="24"/></name><argument_list pos:line="69" pos:column="24">(<argument><expr><name pos:line="69" pos:column="25">FERROR<pos:position pos:line="69" pos:column="31"/></name></expr></argument>,
			<argument><expr><literal type="string" pos:line="70" pos:column="25">"unable to bind any inbound sockets on port %d\n"<pos:position pos:line="70" pos:column="74"/></literal></expr></argument>,
			<argument><expr><name pos:line="71" pos:column="25">port<pos:position pos:line="71" pos:column="29"/></name></expr></argument>)<pos:position pos:line="71" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="31"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="72" pos:column="17">free<pos:position pos:line="72" pos:column="21"/></name><argument_list pos:line="72" pos:column="21">(<argument><expr><name pos:line="72" pos:column="22">socks<pos:position pos:line="72" pos:column="27"/></name></expr></argument>)<pos:position pos:line="72" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="29"/></expr_stmt>
		<return pos:line="73" pos:column="17">return <expr><name pos:line="73" pos:column="24">NULL<pos:position pos:line="73" pos:column="28"/></name></expr>;<pos:position pos:line="73" pos:column="29"/></return>
	}<pos:position pos:line="74" pos:column="10"/></block></then></if>
	<return pos:line="75" pos:column="9">return <expr><name pos:line="75" pos:column="16">socks<pos:position pos:line="75" pos:column="21"/></name></expr>;<pos:position pos:line="75" pos:column="22"/></return>
}<pos:position pos:line="76" pos:column="2"/></block></function></unit>
