<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_656_last_repos.cpp" pos:tabs="8"><function_decl><type><name pos:line="1" pos:column="1">local<pos:position pos:line="1" pos:column="6"/></name> <name pos:line="1" pos:column="7">uLong<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">crc32_combine_<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name pos:line="1" pos:column="28">crc1<pos:position pos:line="1" pos:column="32"/></name></type></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="34">crc2<pos:position pos:line="1" pos:column="38"/></name></type></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="40">len2<pos:position pos:line="1" pos:column="44"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="45"/></parameter_list>
    <decl_stmt><decl><type><name pos:line="2" pos:column="5">uLong<pos:position pos:line="2" pos:column="10"/></name></type> <name pos:line="2" pos:column="11">crc1<pos:position pos:line="2" pos:column="15"/></name></decl>;<pos:position pos:line="2" pos:column="16"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">uLong<pos:position pos:line="3" pos:column="10"/></name></type> <name pos:line="3" pos:column="11">crc2<pos:position pos:line="3" pos:column="15"/></name></decl>;<pos:position pos:line="3" pos:column="16"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">z_off64_t<pos:position pos:line="4" pos:column="14"/></name></type> <name pos:line="4" pos:column="15">len2<pos:position pos:line="4" pos:column="19"/></name></decl>;<pos:position pos:line="4" pos:column="20"/></decl_stmt>
<block pos:line="5" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">int<pos:position pos:line="6" pos:column="8"/></name></type> <name pos:line="6" pos:column="9">n<pos:position pos:line="6" pos:column="10"/></name></decl>;<pos:position pos:line="6" pos:column="11"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">unsigned<pos:position pos:line="7" pos:column="13"/></name> <name pos:line="7" pos:column="14">long<pos:position pos:line="7" pos:column="18"/></name></type> <name pos:line="7" pos:column="19">row<pos:position pos:line="7" pos:column="22"/></name></decl>;<pos:position pos:line="7" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">unsigned<pos:position pos:line="8" pos:column="13"/></name> <name pos:line="8" pos:column="14">long<pos:position pos:line="8" pos:column="18"/></name></type> <name><name pos:line="8" pos:column="19">even<pos:position pos:line="8" pos:column="23"/></name><index pos:line="8" pos:column="23">[<expr><name pos:line="8" pos:column="24">GF2_DIM<pos:position pos:line="8" pos:column="31"/></name></expr>]<pos:position pos:line="8" pos:column="32"/></index></name></decl>;<pos:position pos:line="8" pos:column="33"/></decl_stmt>    <comment type="block" pos:line="8" pos:column="37">/* even-power-of-two zeros operator */</comment>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">unsigned<pos:position pos:line="9" pos:column="13"/></name> <name pos:line="9" pos:column="14">long<pos:position pos:line="9" pos:column="18"/></name></type> <name><name pos:line="9" pos:column="19">odd<pos:position pos:line="9" pos:column="22"/></name><index pos:line="9" pos:column="22">[<expr><name pos:line="9" pos:column="23">GF2_DIM<pos:position pos:line="9" pos:column="30"/></name></expr>]<pos:position pos:line="9" pos:column="31"/></index></name></decl>;<pos:position pos:line="9" pos:column="32"/></decl_stmt>     <comment type="block" pos:line="9" pos:column="37">/* odd-power-of-two zeros operator */</comment>

    <comment type="block" pos:line="11" pos:column="5">/* degenerate case (also disallow negative lengths) */</comment>
    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><name pos:line="12" pos:column="9">len2<pos:position pos:line="12" pos:column="13"/></name> <operator pos:line="12" pos:column="14">&lt;=<pos:position pos:line="12" pos:column="19"/></operator> <literal type="number" pos:line="12" pos:column="17">0<pos:position pos:line="12" pos:column="18"/></literal></expr>)<pos:position pos:line="12" pos:column="19"/></condition><then pos:line="12" pos:column="19">
        <block type="pseudo"><return pos:line="13" pos:column="9">return <expr><name pos:line="13" pos:column="16">crc1<pos:position pos:line="13" pos:column="20"/></name></expr>;<pos:position pos:line="13" pos:column="21"/></return></block></then></if>

    <comment type="block" pos:line="15" pos:column="5">/* put operator for one zero bit in odd */</comment>
    <expr_stmt><expr><name><name pos:line="16" pos:column="5">odd<pos:position pos:line="16" pos:column="8"/></name><index pos:line="16" pos:column="8">[<expr><literal type="number" pos:line="16" pos:column="9">0<pos:position pos:line="16" pos:column="10"/></literal></expr>]<pos:position pos:line="16" pos:column="11"/></index></name> <operator pos:line="16" pos:column="12">=<pos:position pos:line="16" pos:column="13"/></operator> <literal type="number" pos:line="16" pos:column="14">0xedb88320UL<pos:position pos:line="16" pos:column="26"/></literal></expr>;<pos:position pos:line="16" pos:column="27"/></expr_stmt>          <comment type="block" pos:line="16" pos:column="37">/* CRC-32 polynomial */</comment>
    <expr_stmt><expr><name pos:line="17" pos:column="5">row<pos:position pos:line="17" pos:column="8"/></name> <operator pos:line="17" pos:column="9">=<pos:position pos:line="17" pos:column="10"/></operator> <literal type="number" pos:line="17" pos:column="11">1<pos:position pos:line="17" pos:column="12"/></literal></expr>;<pos:position pos:line="17" pos:column="13"/></expr_stmt>
    <for pos:line="18" pos:column="5">for <control pos:line="18" pos:column="9">(<init><expr><name pos:line="18" pos:column="10">n<pos:position pos:line="18" pos:column="11"/></name> <operator pos:line="18" pos:column="12">=<pos:position pos:line="18" pos:column="13"/></operator> <literal type="number" pos:line="18" pos:column="14">1<pos:position pos:line="18" pos:column="15"/></literal></expr>;<pos:position pos:line="18" pos:column="16"/></init> <condition><expr><name pos:line="18" pos:column="17">n<pos:position pos:line="18" pos:column="18"/></name> <operator pos:line="18" pos:column="19">&lt;<pos:position pos:line="18" pos:column="23"/></operator> <name pos:line="18" pos:column="21">GF2_DIM<pos:position pos:line="18" pos:column="28"/></name></expr>;<pos:position pos:line="18" pos:column="29"/></condition> <incr><expr><name pos:line="18" pos:column="30">n<pos:position pos:line="18" pos:column="31"/></name><operator pos:line="18" pos:column="31">++<pos:position pos:line="18" pos:column="33"/></operator></expr></incr>)<pos:position pos:line="18" pos:column="34"/></control> <block pos:line="18" pos:column="35">{
        <expr_stmt><expr><name><name pos:line="19" pos:column="9">odd<pos:position pos:line="19" pos:column="12"/></name><index pos:line="19" pos:column="12">[<expr><name pos:line="19" pos:column="13">n<pos:position pos:line="19" pos:column="14"/></name></expr>]<pos:position pos:line="19" pos:column="15"/></index></name> <operator pos:line="19" pos:column="16">=<pos:position pos:line="19" pos:column="17"/></operator> <name pos:line="19" pos:column="18">row<pos:position pos:line="19" pos:column="21"/></name></expr>;<pos:position pos:line="19" pos:column="22"/></expr_stmt>
        <expr_stmt><expr><name pos:line="20" pos:column="9">row<pos:position pos:line="20" pos:column="12"/></name> <operator pos:line="20" pos:column="13">&lt;&lt;=<pos:position pos:line="20" pos:column="22"/></operator> <literal type="number" pos:line="20" pos:column="17">1<pos:position pos:line="20" pos:column="18"/></literal></expr>;<pos:position pos:line="20" pos:column="19"/></expr_stmt>
    }<pos:position pos:line="21" pos:column="6"/></block></for>

    <comment type="block" pos:line="23" pos:column="5">/* put operator for two zero bits in even */</comment>
    <expr_stmt><expr><call><name pos:line="24" pos:column="5">gf2_matrix_square<pos:position pos:line="24" pos:column="22"/></name><argument_list pos:line="24" pos:column="22">(<argument><expr><name pos:line="24" pos:column="23">even<pos:position pos:line="24" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="29">odd<pos:position pos:line="24" pos:column="32"/></name></expr></argument>)<pos:position pos:line="24" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="34"/></expr_stmt>

    <comment type="block" pos:line="26" pos:column="5">/* put operator for four zero bits in odd */</comment>
    <expr_stmt><expr><call><name pos:line="27" pos:column="5">gf2_matrix_square<pos:position pos:line="27" pos:column="22"/></name><argument_list pos:line="27" pos:column="22">(<argument><expr><name pos:line="27" pos:column="23">odd<pos:position pos:line="27" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="28">even<pos:position pos:line="27" pos:column="32"/></name></expr></argument>)<pos:position pos:line="27" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="34"/></expr_stmt>

    <comment type="block" pos:line="29" pos:column="5">/* apply len2 zeros to crc1 (first square will put the operator for one
       zero byte, eight zero bits, in even) */</comment>
    <do pos:line="31" pos:column="5">do <block pos:line="31" pos:column="8">{
        <comment type="block" pos:line="32" pos:column="9">/* apply zeros operator for this bit of len2 */</comment>
        <expr_stmt><expr><call><name pos:line="33" pos:column="9">gf2_matrix_square<pos:position pos:line="33" pos:column="26"/></name><argument_list pos:line="33" pos:column="26">(<argument><expr><name pos:line="33" pos:column="27">even<pos:position pos:line="33" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="33">odd<pos:position pos:line="33" pos:column="36"/></name></expr></argument>)<pos:position pos:line="33" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="38"/></expr_stmt>
        <if pos:line="34" pos:column="9">if <condition pos:line="34" pos:column="12">(<expr><name pos:line="34" pos:column="13">len2<pos:position pos:line="34" pos:column="17"/></name> <operator pos:line="34" pos:column="18">&amp;<pos:position pos:line="34" pos:column="23"/></operator> <literal type="number" pos:line="34" pos:column="20">1<pos:position pos:line="34" pos:column="21"/></literal></expr>)<pos:position pos:line="34" pos:column="22"/></condition><then pos:line="34" pos:column="22">
            <block type="pseudo"><expr_stmt><expr><name pos:line="35" pos:column="13">crc1<pos:position pos:line="35" pos:column="17"/></name> <operator pos:line="35" pos:column="18">=<pos:position pos:line="35" pos:column="19"/></operator> <call><name pos:line="35" pos:column="20">gf2_matrix_times<pos:position pos:line="35" pos:column="36"/></name><argument_list pos:line="35" pos:column="36">(<argument><expr><name pos:line="35" pos:column="37">even<pos:position pos:line="35" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="43">crc1<pos:position pos:line="35" pos:column="47"/></name></expr></argument>)<pos:position pos:line="35" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="49"/></expr_stmt></block></then></if>
        <expr_stmt><expr><name pos:line="36" pos:column="9">len2<pos:position pos:line="36" pos:column="13"/></name> <operator pos:line="36" pos:column="14">&gt;&gt;=<pos:position pos:line="36" pos:column="23"/></operator> <literal type="number" pos:line="36" pos:column="18">1<pos:position pos:line="36" pos:column="19"/></literal></expr>;<pos:position pos:line="36" pos:column="20"/></expr_stmt>

        <comment type="block" pos:line="38" pos:column="9">/* if no more bits set, then done */</comment>
        <if pos:line="39" pos:column="9">if <condition pos:line="39" pos:column="12">(<expr><name pos:line="39" pos:column="13">len2<pos:position pos:line="39" pos:column="17"/></name> <operator pos:line="39" pos:column="18">==<pos:position pos:line="39" pos:column="20"/></operator> <literal type="number" pos:line="39" pos:column="21">0<pos:position pos:line="39" pos:column="22"/></literal></expr>)<pos:position pos:line="39" pos:column="23"/></condition><then pos:line="39" pos:column="23">
            <block type="pseudo"><break pos:line="40" pos:column="13">break;<pos:position pos:line="40" pos:column="19"/></break></block></then></if>

        <comment type="block" pos:line="42" pos:column="9">/* another iteration of the loop with odd and even swapped */</comment>
        <expr_stmt><expr><call><name pos:line="43" pos:column="9">gf2_matrix_square<pos:position pos:line="43" pos:column="26"/></name><argument_list pos:line="43" pos:column="26">(<argument><expr><name pos:line="43" pos:column="27">odd<pos:position pos:line="43" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="32">even<pos:position pos:line="43" pos:column="36"/></name></expr></argument>)<pos:position pos:line="43" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="38"/></expr_stmt>
        <if pos:line="44" pos:column="9">if <condition pos:line="44" pos:column="12">(<expr><name pos:line="44" pos:column="13">len2<pos:position pos:line="44" pos:column="17"/></name> <operator pos:line="44" pos:column="18">&amp;<pos:position pos:line="44" pos:column="23"/></operator> <literal type="number" pos:line="44" pos:column="20">1<pos:position pos:line="44" pos:column="21"/></literal></expr>)<pos:position pos:line="44" pos:column="22"/></condition><then pos:line="44" pos:column="22">
            <block type="pseudo"><expr_stmt><expr><name pos:line="45" pos:column="13">crc1<pos:position pos:line="45" pos:column="17"/></name> <operator pos:line="45" pos:column="18">=<pos:position pos:line="45" pos:column="19"/></operator> <call><name pos:line="45" pos:column="20">gf2_matrix_times<pos:position pos:line="45" pos:column="36"/></name><argument_list pos:line="45" pos:column="36">(<argument><expr><name pos:line="45" pos:column="37">odd<pos:position pos:line="45" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="42">crc1<pos:position pos:line="45" pos:column="46"/></name></expr></argument>)<pos:position pos:line="45" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="48"/></expr_stmt></block></then></if>
        <expr_stmt><expr><name pos:line="46" pos:column="9">len2<pos:position pos:line="46" pos:column="13"/></name> <operator pos:line="46" pos:column="14">&gt;&gt;=<pos:position pos:line="46" pos:column="23"/></operator> <literal type="number" pos:line="46" pos:column="18">1<pos:position pos:line="46" pos:column="19"/></literal></expr>;<pos:position pos:line="46" pos:column="20"/></expr_stmt>

        <comment type="block" pos:line="48" pos:column="9">/* if no more bits set, then done */</comment>
    }<pos:position pos:line="49" pos:column="6"/></block> while <condition pos:line="49" pos:column="13">(<expr><name pos:line="49" pos:column="14">len2<pos:position pos:line="49" pos:column="18"/></name> <operator pos:line="49" pos:column="19">!=<pos:position pos:line="49" pos:column="21"/></operator> <literal type="number" pos:line="49" pos:column="22">0<pos:position pos:line="49" pos:column="23"/></literal></expr>)<pos:position pos:line="49" pos:column="24"/></condition>;<pos:position pos:line="49" pos:column="25"/></do>

    <comment type="block" pos:line="51" pos:column="5">/* return combined crc */</comment>
    <expr_stmt><expr><name pos:line="52" pos:column="5">crc1<pos:position pos:line="52" pos:column="9"/></name> <operator pos:line="52" pos:column="10">^=<pos:position pos:line="52" pos:column="12"/></operator> <name pos:line="52" pos:column="13">crc2<pos:position pos:line="52" pos:column="17"/></name></expr>;<pos:position pos:line="52" pos:column="18"/></expr_stmt>
    <return pos:line="53" pos:column="5">return <expr><name pos:line="53" pos:column="12">crc1<pos:position pos:line="53" pos:column="16"/></name></expr>;<pos:position pos:line="53" pos:column="17"/></return>
}<pos:position pos:line="54" pos:column="2"/></block></function_decl></unit>
