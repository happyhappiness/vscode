<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_651_last_repos.cpp" pos:tabs="8"><function_decl><type><name pos:line="1" pos:column="1">unsigned<pos:position pos:line="1" pos:column="9"/></name> <name pos:line="1" pos:column="10">long<pos:position pos:line="1" pos:column="14"/></name> <name pos:line="1" pos:column="15">ZEXPORT<pos:position pos:line="1" pos:column="22"/></name></type> <name pos:line="1" pos:column="23">crc32<pos:position pos:line="1" pos:column="28"/></name><parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><name pos:line="1" pos:column="29">crc<pos:position pos:line="1" pos:column="32"/></name></type></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="34">buf<pos:position pos:line="1" pos:column="37"/></name></type></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="39">len<pos:position pos:line="1" pos:column="42"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="43"/></parameter_list>
    <decl_stmt><decl><type><name pos:line="2" pos:column="5">unsigned<pos:position pos:line="2" pos:column="13"/></name> <name pos:line="2" pos:column="14">long<pos:position pos:line="2" pos:column="18"/></name></type> <name pos:line="2" pos:column="19">crc<pos:position pos:line="2" pos:column="22"/></name></decl>;<pos:position pos:line="2" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="3" pos:column="5">const<pos:position pos:line="3" pos:column="10"/></specifier> <name pos:line="3" pos:column="11">unsigned<pos:position pos:line="3" pos:column="19"/></name> <name pos:line="3" pos:column="20">char<pos:position pos:line="3" pos:column="24"/></name> <name pos:line="3" pos:column="25">FAR<pos:position pos:line="3" pos:column="28"/></name> <modifier pos:line="3" pos:column="29">*<pos:position pos:line="3" pos:column="30"/></modifier></type><name pos:line="3" pos:column="30">buf<pos:position pos:line="3" pos:column="33"/></name></decl>;<pos:position pos:line="3" pos:column="34"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">uInt<pos:position pos:line="4" pos:column="9"/></name></type> <name pos:line="4" pos:column="10">len<pos:position pos:line="4" pos:column="13"/></name></decl>;<pos:position pos:line="4" pos:column="14"/></decl_stmt>
<block pos:line="5" pos:column="1">{
    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><name pos:line="6" pos:column="9">buf<pos:position pos:line="6" pos:column="12"/></name> <operator pos:line="6" pos:column="13">==<pos:position pos:line="6" pos:column="15"/></operator> <name pos:line="6" pos:column="16">Z_NULL<pos:position pos:line="6" pos:column="22"/></name></expr>)<pos:position pos:line="6" pos:column="23"/></condition><then pos:line="6" pos:column="23"> <block type="pseudo"><return pos:line="6" pos:column="24">return <expr><literal type="number" pos:line="6" pos:column="31">0UL<pos:position pos:line="6" pos:column="34"/></literal></expr>;<pos:position pos:line="6" pos:column="35"/></return></block></then></if>

<cpp:ifdef pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">ifdef<pos:position pos:line="8" pos:column="7"/></cpp:directive> <name pos:line="8" pos:column="8">DYNAMIC_CRC_TABLE<pos:position pos:line="8" pos:column="25"/></name></cpp:ifdef>
    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><name pos:line="9" pos:column="9">crc_table_empty<pos:position pos:line="9" pos:column="24"/></name></expr>)<pos:position pos:line="9" pos:column="25"/></condition><then pos:line="9" pos:column="25">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="10" pos:column="9">make_crc_table<pos:position pos:line="10" pos:column="23"/></name><argument_list pos:line="10" pos:column="23">()<pos:position pos:line="10" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="26"/></expr_stmt></block></then></if>
<cpp:endif pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">endif<pos:position pos:line="11" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="11" pos:column="8">/* DYNAMIC_CRC_TABLE */</comment>

<cpp:ifdef pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">ifdef<pos:position pos:line="13" pos:column="7"/></cpp:directive> <name pos:line="13" pos:column="8">BYFOUR<pos:position pos:line="13" pos:column="14"/></name></cpp:ifdef>
    <if pos:line="14" pos:column="5">if <condition pos:line="14" pos:column="8">(<expr><sizeof pos:line="14" pos:column="9">sizeof<argument_list pos:line="14" pos:column="15">(<argument><expr><name pos:line="14" pos:column="16">void<pos:position pos:line="14" pos:column="20"/></name> <operator pos:line="14" pos:column="21">*<pos:position pos:line="14" pos:column="22"/></operator></expr></argument>)<pos:position pos:line="14" pos:column="23"/></argument_list></sizeof> <operator pos:line="14" pos:column="24">==<pos:position pos:line="14" pos:column="26"/></operator> <sizeof pos:line="14" pos:column="27">sizeof<argument_list pos:line="14" pos:column="33">(<argument><expr><name pos:line="14" pos:column="34">ptrdiff_t<pos:position pos:line="14" pos:column="43"/></name></expr></argument>)<pos:position pos:line="14" pos:column="44"/></argument_list></sizeof></expr>)<pos:position pos:line="14" pos:column="45"/></condition><then pos:line="14" pos:column="45"> <block pos:line="14" pos:column="46">{
        <decl_stmt><decl><type><name pos:line="15" pos:column="9">z_crc_t<pos:position pos:line="15" pos:column="16"/></name></type> <name pos:line="15" pos:column="17">endian<pos:position pos:line="15" pos:column="23"/></name></decl>;<pos:position pos:line="15" pos:column="24"/></decl_stmt>

        <expr_stmt><expr><name pos:line="17" pos:column="9">endian<pos:position pos:line="17" pos:column="15"/></name> <operator pos:line="17" pos:column="16">=<pos:position pos:line="17" pos:column="17"/></operator> <literal type="number" pos:line="17" pos:column="18">1<pos:position pos:line="17" pos:column="19"/></literal></expr>;<pos:position pos:line="17" pos:column="20"/></expr_stmt>
        <if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><operator pos:line="18" pos:column="13">*<pos:position pos:line="18" pos:column="14"/></operator><operator pos:line="18" pos:column="14">(<pos:position pos:line="18" pos:column="15"/></operator><operator pos:line="18" pos:column="15">(<pos:position pos:line="18" pos:column="16"/></operator><name pos:line="18" pos:column="16">unsigned<pos:position pos:line="18" pos:column="24"/></name> <name pos:line="18" pos:column="25">char<pos:position pos:line="18" pos:column="29"/></name> <operator pos:line="18" pos:column="30">*<pos:position pos:line="18" pos:column="31"/></operator><operator pos:line="18" pos:column="31">)<pos:position pos:line="18" pos:column="32"/></operator><operator pos:line="18" pos:column="32">(<pos:position pos:line="18" pos:column="33"/></operator><operator pos:line="18" pos:column="33">&amp;<pos:position pos:line="18" pos:column="38"/></operator><name pos:line="18" pos:column="34">endian<pos:position pos:line="18" pos:column="40"/></name><operator pos:line="18" pos:column="40">)<pos:position pos:line="18" pos:column="41"/></operator><operator pos:line="18" pos:column="41">)<pos:position pos:line="18" pos:column="42"/></operator></expr>)<pos:position pos:line="18" pos:column="43"/></condition><then pos:line="18" pos:column="43">
            <block type="pseudo"><return pos:line="19" pos:column="13">return <expr><call><name pos:line="19" pos:column="20">crc32_little<pos:position pos:line="19" pos:column="32"/></name><argument_list pos:line="19" pos:column="32">(<argument><expr><name pos:line="19" pos:column="33">crc<pos:position pos:line="19" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="38">buf<pos:position pos:line="19" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="43">len<pos:position pos:line="19" pos:column="46"/></name></expr></argument>)<pos:position pos:line="19" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="48"/></return></block></then>
        <else pos:line="20" pos:column="9">else
            <block type="pseudo"><return pos:line="21" pos:column="13">return <expr><call><name pos:line="21" pos:column="20">crc32_big<pos:position pos:line="21" pos:column="29"/></name><argument_list pos:line="21" pos:column="29">(<argument><expr><name pos:line="21" pos:column="30">crc<pos:position pos:line="21" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="35">buf<pos:position pos:line="21" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="40">len<pos:position pos:line="21" pos:column="43"/></name></expr></argument>)<pos:position pos:line="21" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="45"/></return></block></else></if>
    }<pos:position pos:line="22" pos:column="6"/></block></then></if>
<cpp:endif pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">endif<pos:position pos:line="23" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="23" pos:column="8">/* BYFOUR */</comment>
    <expr_stmt><expr><name pos:line="24" pos:column="5">crc<pos:position pos:line="24" pos:column="8"/></name> <operator pos:line="24" pos:column="9">=<pos:position pos:line="24" pos:column="10"/></operator> <name pos:line="24" pos:column="11">crc<pos:position pos:line="24" pos:column="14"/></name> <operator pos:line="24" pos:column="15">^<pos:position pos:line="24" pos:column="16"/></operator> <literal type="number" pos:line="24" pos:column="17">0xffffffffUL<pos:position pos:line="24" pos:column="29"/></literal></expr>;<pos:position pos:line="24" pos:column="30"/></expr_stmt>
    <while pos:line="25" pos:column="5">while <condition pos:line="25" pos:column="11">(<expr><name pos:line="25" pos:column="12">len<pos:position pos:line="25" pos:column="15"/></name> <operator pos:line="25" pos:column="16">&gt;=<pos:position pos:line="25" pos:column="21"/></operator> <literal type="number" pos:line="25" pos:column="19">8<pos:position pos:line="25" pos:column="20"/></literal></expr>)<pos:position pos:line="25" pos:column="21"/></condition> <block pos:line="25" pos:column="22">{
        <expr_stmt><expr><name pos:line="26" pos:column="9">DO8<pos:position pos:line="26" pos:column="12"/></name></expr>;<pos:position pos:line="26" pos:column="13"/></expr_stmt>
        <expr_stmt><expr><name pos:line="27" pos:column="9">len<pos:position pos:line="27" pos:column="12"/></name> <operator pos:line="27" pos:column="13">-=<pos:position pos:line="27" pos:column="15"/></operator> <literal type="number" pos:line="27" pos:column="16">8<pos:position pos:line="27" pos:column="17"/></literal></expr>;<pos:position pos:line="27" pos:column="18"/></expr_stmt>
    }<pos:position pos:line="28" pos:column="6"/></block></while>
    <if pos:line="29" pos:column="5">if <condition pos:line="29" pos:column="8">(<expr><name pos:line="29" pos:column="9">len<pos:position pos:line="29" pos:column="12"/></name></expr>)<pos:position pos:line="29" pos:column="13"/></condition><then pos:line="29" pos:column="13"> <block type="pseudo"><do pos:line="29" pos:column="14">do <block pos:line="29" pos:column="17">{
        <expr_stmt><expr><name pos:line="30" pos:column="9">DO1<pos:position pos:line="30" pos:column="12"/></name></expr>;<pos:position pos:line="30" pos:column="13"/></expr_stmt>
    }<pos:position pos:line="31" pos:column="6"/></block> while <condition pos:line="31" pos:column="13">(<expr><operator pos:line="31" pos:column="14">--<pos:position pos:line="31" pos:column="16"/></operator><name pos:line="31" pos:column="16">len<pos:position pos:line="31" pos:column="19"/></name></expr>)<pos:position pos:line="31" pos:column="20"/></condition>;<pos:position pos:line="31" pos:column="21"/></do></block></then></if>
    <return pos:line="32" pos:column="5">return <expr><name pos:line="32" pos:column="12">crc<pos:position pos:line="32" pos:column="15"/></name> <operator pos:line="32" pos:column="16">^<pos:position pos:line="32" pos:column="17"/></operator> <literal type="number" pos:line="32" pos:column="18">0xffffffffUL<pos:position pos:line="32" pos:column="30"/></literal></expr>;<pos:position pos:line="32" pos:column="31"/></return>
}<pos:position pos:line="33" pos:column="2"/></block></function_decl></unit>
