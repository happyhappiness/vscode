<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_175_rsync-2.6.2.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">recv_generator<pos:position pos:line="1" pos:column="20"/></name><parameter_list pos:line="1" pos:column="20">(<parameter><decl><type><name pos:line="1" pos:column="21">char<pos:position pos:line="1" pos:column="25"/></name> <modifier pos:line="1" pos:column="26">*<pos:position pos:line="1" pos:column="27"/></modifier></type><name pos:line="1" pos:column="27">fname<pos:position pos:line="1" pos:column="32"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="34">struct<pos:position pos:line="1" pos:column="40"/></name> <name pos:line="1" pos:column="41">file_struct<pos:position pos:line="1" pos:column="52"/></name></name> <modifier pos:line="1" pos:column="53">*<pos:position pos:line="1" pos:column="54"/></modifier></type><name pos:line="1" pos:column="54">file<pos:position pos:line="1" pos:column="58"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="60">int<pos:position pos:line="1" pos:column="63"/></name></type> <name pos:line="1" pos:column="64">i<pos:position pos:line="1" pos:column="65"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="67">int<pos:position pos:line="1" pos:column="70"/></name></type> <name pos:line="1" pos:column="71">f_out<pos:position pos:line="1" pos:column="76"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="77"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">fd<pos:position pos:line="3" pos:column="15"/></name></decl>;<pos:position pos:line="3" pos:column="16"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">STRUCT_STAT<pos:position pos:line="4" pos:column="20"/></name></type> <name pos:line="4" pos:column="21">st<pos:position pos:line="4" pos:column="23"/></name></decl>;<pos:position pos:line="4" pos:column="24"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">map_struct<pos:position pos:line="5" pos:column="26"/></name></name> <modifier pos:line="5" pos:column="27">*<pos:position pos:line="5" pos:column="28"/></modifier></type><name pos:line="5" pos:column="28">mapbuf<pos:position pos:line="5" pos:column="34"/></name></decl>;<pos:position pos:line="5" pos:column="35"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">statret<pos:position pos:line="6" pos:column="20"/></name></decl>;<pos:position pos:line="6" pos:column="21"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">char<pos:position pos:line="7" pos:column="13"/></name> <modifier pos:line="7" pos:column="14">*<pos:position pos:line="7" pos:column="15"/></modifier></type><name pos:line="7" pos:column="15">fnamecmp<pos:position pos:line="7" pos:column="23"/></name></decl>;<pos:position pos:line="7" pos:column="24"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">char<pos:position pos:line="8" pos:column="13"/></name></type> <name><name pos:line="8" pos:column="14">fnamecmpbuf<pos:position pos:line="8" pos:column="25"/></name><index pos:line="8" pos:column="25">[<expr><name pos:line="8" pos:column="26">MAXPATHLEN<pos:position pos:line="8" pos:column="36"/></name></expr>]<pos:position pos:line="8" pos:column="37"/></index></name></decl>;<pos:position pos:line="8" pos:column="38"/></decl_stmt>

	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><name pos:line="10" pos:column="13">list_only<pos:position pos:line="10" pos:column="22"/></name></expr>)<pos:position pos:line="10" pos:column="23"/></condition><then pos:line="10" pos:column="23">
		<block type="pseudo"><return pos:line="11" pos:column="17">return;<pos:position pos:line="11" pos:column="24"/></return></block></then></if>

	<if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><name pos:line="13" pos:column="13">verbose<pos:position pos:line="13" pos:column="20"/></name> <operator pos:line="13" pos:column="21">&gt;<pos:position pos:line="13" pos:column="25"/></operator> <literal type="number" pos:line="13" pos:column="23">2<pos:position pos:line="13" pos:column="24"/></literal></expr>)<pos:position pos:line="13" pos:column="25"/></condition><then pos:line="13" pos:column="25">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="14" pos:column="17">rprintf<pos:position pos:line="14" pos:column="24"/></name><argument_list pos:line="14" pos:column="24">(<argument><expr><name pos:line="14" pos:column="25">FINFO<pos:position pos:line="14" pos:column="30"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="14" pos:column="31">"recv_generator(%s,%d)\n"<pos:position pos:line="14" pos:column="56"/></literal></expr></argument>,<argument><expr><name pos:line="14" pos:column="57">fname<pos:position pos:line="14" pos:column="62"/></name></expr></argument>,<argument><expr><name pos:line="14" pos:column="63">i<pos:position pos:line="14" pos:column="64"/></name></expr></argument>)<pos:position pos:line="14" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="66"/></expr_stmt></block></then></if>

	<expr_stmt><expr><name pos:line="16" pos:column="9">statret<pos:position pos:line="16" pos:column="16"/></name> <operator pos:line="16" pos:column="17">=<pos:position pos:line="16" pos:column="18"/></operator> <call><name pos:line="16" pos:column="19">link_stat<pos:position pos:line="16" pos:column="28"/></name><argument_list pos:line="16" pos:column="28">(<argument><expr><name pos:line="16" pos:column="29">fname<pos:position pos:line="16" pos:column="34"/></name></expr></argument>,<argument><expr><operator pos:line="16" pos:column="35">&amp;<pos:position pos:line="16" pos:column="40"/></operator><name pos:line="16" pos:column="36">st<pos:position pos:line="16" pos:column="38"/></name></expr></argument>)<pos:position pos:line="16" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="40"/></expr_stmt>

	<if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><name pos:line="18" pos:column="13">only_existing<pos:position pos:line="18" pos:column="26"/></name> <operator pos:line="18" pos:column="27">&amp;&amp;<pos:position pos:line="18" pos:column="37"/></operator> <name pos:line="18" pos:column="30">statret<pos:position pos:line="18" pos:column="37"/></name> <operator pos:line="18" pos:column="38">==<pos:position pos:line="18" pos:column="40"/></operator> <operator pos:line="18" pos:column="41">-<pos:position pos:line="18" pos:column="42"/></operator><literal type="number" pos:line="18" pos:column="42">1<pos:position pos:line="18" pos:column="43"/></literal> <operator pos:line="18" pos:column="44">&amp;&amp;<pos:position pos:line="18" pos:column="54"/></operator> <name pos:line="18" pos:column="47">errno<pos:position pos:line="18" pos:column="52"/></name> <operator pos:line="18" pos:column="53">==<pos:position pos:line="18" pos:column="55"/></operator> <name pos:line="18" pos:column="56">ENOENT<pos:position pos:line="18" pos:column="62"/></name></expr>)<pos:position pos:line="18" pos:column="63"/></condition><then pos:line="18" pos:column="63"> <block pos:line="18" pos:column="64">{
		<comment type="block" pos:line="19" pos:column="17">/* we only want to update existing files */</comment>
		<if pos:line="20" pos:column="17">if <condition pos:line="20" pos:column="20">(<expr><name pos:line="20" pos:column="21">verbose<pos:position pos:line="20" pos:column="28"/></name> <operator pos:line="20" pos:column="29">&gt;<pos:position pos:line="20" pos:column="33"/></operator> <literal type="number" pos:line="20" pos:column="31">1<pos:position pos:line="20" pos:column="32"/></literal></expr>)<pos:position pos:line="20" pos:column="33"/></condition><then pos:line="20" pos:column="33"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="20" pos:column="34">rprintf<pos:position pos:line="20" pos:column="41"/></name><argument_list pos:line="20" pos:column="41">(<argument><expr><name pos:line="20" pos:column="42">FINFO<pos:position pos:line="20" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="49">"not creating new file \"%s\"\n"<pos:position pos:line="20" pos:column="81"/></literal></expr></argument>,<argument><expr><name pos:line="20" pos:column="82">fname<pos:position pos:line="20" pos:column="87"/></name></expr></argument>)<pos:position pos:line="20" pos:column="88"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="89"/></expr_stmt></block></then></if>
		<return pos:line="21" pos:column="17">return;<pos:position pos:line="21" pos:column="24"/></return>
	}<pos:position pos:line="22" pos:column="10"/></block></then></if>

	<if pos:line="24" pos:column="9">if <condition pos:line="24" pos:column="12">(<expr><name pos:line="24" pos:column="13">statret<pos:position pos:line="24" pos:column="20"/></name> <operator pos:line="24" pos:column="21">==<pos:position pos:line="24" pos:column="23"/></operator> <literal type="number" pos:line="24" pos:column="24">0<pos:position pos:line="24" pos:column="25"/></literal> <operator pos:line="24" pos:column="26">&amp;&amp;<pos:position pos:line="24" pos:column="36"/></operator>
	    <operator pos:line="25" pos:column="13">!<pos:position pos:line="25" pos:column="14"/></operator><name pos:line="25" pos:column="14">preserve_perms<pos:position pos:line="25" pos:column="28"/></name> <operator pos:line="25" pos:column="29">&amp;&amp;<pos:position pos:line="25" pos:column="39"/></operator>
	    <operator pos:line="26" pos:column="13">(<pos:position pos:line="26" pos:column="14"/></operator><call><name pos:line="26" pos:column="14">S_ISDIR<pos:position pos:line="26" pos:column="21"/></name><argument_list pos:line="26" pos:column="21">(<argument><expr><name><name pos:line="26" pos:column="22">st<pos:position pos:line="26" pos:column="24"/></name><operator pos:line="26" pos:column="24">.<pos:position pos:line="26" pos:column="25"/></operator><name pos:line="26" pos:column="25">st_mode<pos:position pos:line="26" pos:column="32"/></name></name></expr></argument>)<pos:position pos:line="26" pos:column="33"/></argument_list></call> <operator pos:line="26" pos:column="34">==<pos:position pos:line="26" pos:column="36"/></operator> <call><name pos:line="26" pos:column="37">S_ISDIR<pos:position pos:line="26" pos:column="44"/></name><argument_list pos:line="26" pos:column="44">(<argument><expr><name><name pos:line="26" pos:column="45">file<pos:position pos:line="26" pos:column="49"/></name><operator pos:line="26" pos:column="49">-&gt;<pos:position pos:line="26" pos:column="54"/></operator><name pos:line="26" pos:column="51">mode<pos:position pos:line="26" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="26" pos:column="56"/></argument_list></call><operator pos:line="26" pos:column="56">)<pos:position pos:line="26" pos:column="57"/></operator></expr>)<pos:position pos:line="26" pos:column="58"/></condition><then pos:line="26" pos:column="58"> <block pos:line="26" pos:column="59">{
		<comment type="block" pos:line="27" pos:column="17">/* if the file exists already and we aren't perserving
		 * permissions then act as though the remote end sent
		 * us the file permissions we already have */</comment>
		<expr_stmt><expr><name><name pos:line="30" pos:column="17">file<pos:position pos:line="30" pos:column="21"/></name><operator pos:line="30" pos:column="21">-&gt;<pos:position pos:line="30" pos:column="26"/></operator><name pos:line="30" pos:column="23">mode<pos:position pos:line="30" pos:column="27"/></name></name> <operator pos:line="30" pos:column="28">=<pos:position pos:line="30" pos:column="29"/></operator> <operator pos:line="30" pos:column="30">(<pos:position pos:line="30" pos:column="31"/></operator><name><name pos:line="30" pos:column="31">file<pos:position pos:line="30" pos:column="35"/></name><operator pos:line="30" pos:column="35">-&gt;<pos:position pos:line="30" pos:column="40"/></operator><name pos:line="30" pos:column="37">mode<pos:position pos:line="30" pos:column="41"/></name></name> <operator pos:line="30" pos:column="42">&amp;<pos:position pos:line="30" pos:column="47"/></operator> <operator pos:line="30" pos:column="44">~<pos:position pos:line="30" pos:column="45"/></operator><name pos:line="30" pos:column="45">CHMOD_BITS<pos:position pos:line="30" pos:column="55"/></name><operator pos:line="30" pos:column="55">)<pos:position pos:line="30" pos:column="56"/></operator>
			   <operator pos:line="31" pos:column="28">|<pos:position pos:line="31" pos:column="29"/></operator> <operator pos:line="31" pos:column="30">(<pos:position pos:line="31" pos:column="31"/></operator><name><name pos:line="31" pos:column="31">st<pos:position pos:line="31" pos:column="33"/></name><operator pos:line="31" pos:column="33">.<pos:position pos:line="31" pos:column="34"/></operator><name pos:line="31" pos:column="34">st_mode<pos:position pos:line="31" pos:column="41"/></name></name> <operator pos:line="31" pos:column="42">&amp;<pos:position pos:line="31" pos:column="47"/></operator> <name pos:line="31" pos:column="44">CHMOD_BITS<pos:position pos:line="31" pos:column="54"/></name><operator pos:line="31" pos:column="54">)<pos:position pos:line="31" pos:column="55"/></operator></expr>;<pos:position pos:line="31" pos:column="56"/></expr_stmt>
	}<pos:position pos:line="32" pos:column="10"/></block></then></if>

	<if pos:line="34" pos:column="9">if <condition pos:line="34" pos:column="12">(<expr><call><name pos:line="34" pos:column="13">S_ISDIR<pos:position pos:line="34" pos:column="20"/></name><argument_list pos:line="34" pos:column="20">(<argument><expr><name><name pos:line="34" pos:column="21">file<pos:position pos:line="34" pos:column="25"/></name><operator pos:line="34" pos:column="25">-&gt;<pos:position pos:line="34" pos:column="30"/></operator><name pos:line="34" pos:column="27">mode<pos:position pos:line="34" pos:column="31"/></name></name></expr></argument>)<pos:position pos:line="34" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="34" pos:column="33"/></condition><then pos:line="34" pos:column="33"> <block pos:line="34" pos:column="34">{
		<comment type="block" pos:line="35" pos:column="17">/* The file to be received is a directory, so we need
		 * to prepare appropriately.  If there is already a
		 * file of that name and it is *not* a directory, then
		 * we need to delete it.  If it doesn't exist, then
		 * recursively create it. */</comment>

		<if pos:line="41" pos:column="17">if <condition pos:line="41" pos:column="20">(<expr><name pos:line="41" pos:column="21">dry_run<pos:position pos:line="41" pos:column="28"/></name></expr>)<pos:position pos:line="41" pos:column="29"/></condition><then pos:line="41" pos:column="29"> <block type="pseudo"><return pos:line="41" pos:column="30">return;<pos:position pos:line="41" pos:column="37"/></return></block></then></if> <comment type="block" pos:line="41" pos:column="38">/* XXXX -- might cause inaccuracies?? -- mbp */</comment>
		<if pos:line="42" pos:column="17">if <condition pos:line="42" pos:column="20">(<expr><name pos:line="42" pos:column="21">statret<pos:position pos:line="42" pos:column="28"/></name> <operator pos:line="42" pos:column="29">==<pos:position pos:line="42" pos:column="31"/></operator> <literal type="number" pos:line="42" pos:column="32">0<pos:position pos:line="42" pos:column="33"/></literal> <operator pos:line="42" pos:column="34">&amp;&amp;<pos:position pos:line="42" pos:column="44"/></operator> <operator pos:line="42" pos:column="37">!<pos:position pos:line="42" pos:column="38"/></operator><call><name pos:line="42" pos:column="38">S_ISDIR<pos:position pos:line="42" pos:column="45"/></name><argument_list pos:line="42" pos:column="45">(<argument><expr><name><name pos:line="42" pos:column="46">st<pos:position pos:line="42" pos:column="48"/></name><operator pos:line="42" pos:column="48">.<pos:position pos:line="42" pos:column="49"/></operator><name pos:line="42" pos:column="49">st_mode<pos:position pos:line="42" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="42" pos:column="57"/></argument_list></call></expr>)<pos:position pos:line="42" pos:column="58"/></condition><then pos:line="42" pos:column="58"> <block pos:line="42" pos:column="59">{
			<if pos:line="43" pos:column="25">if <condition pos:line="43" pos:column="28">(<expr><call><name pos:line="43" pos:column="29">robust_unlink<pos:position pos:line="43" pos:column="42"/></name><argument_list pos:line="43" pos:column="42">(<argument><expr><name pos:line="43" pos:column="43">fname<pos:position pos:line="43" pos:column="48"/></name></expr></argument>)<pos:position pos:line="43" pos:column="49"/></argument_list></call> <operator pos:line="43" pos:column="50">!=<pos:position pos:line="43" pos:column="52"/></operator> <literal type="number" pos:line="43" pos:column="53">0<pos:position pos:line="43" pos:column="54"/></literal></expr>)<pos:position pos:line="43" pos:column="55"/></condition><then pos:line="43" pos:column="55"> <block pos:line="43" pos:column="56">{
				<expr_stmt><expr><call><name pos:line="44" pos:column="33">rprintf<pos:position pos:line="44" pos:column="40"/></name><argument_list pos:line="44" pos:column="40">(<argument><expr><name pos:line="44" pos:column="41">FERROR<pos:position pos:line="44" pos:column="47"/></name></expr></argument>,
					<argument><expr><literal type="string" pos:line="45" pos:column="41">"recv_generator: unlink %s to make room for directory: %s\n"<pos:position pos:line="45" pos:column="101"/></literal></expr></argument>,
					<argument><expr><call><name pos:line="46" pos:column="41">full_fname<pos:position pos:line="46" pos:column="51"/></name><argument_list pos:line="46" pos:column="51">(<argument><expr><name pos:line="46" pos:column="52">fname<pos:position pos:line="46" pos:column="57"/></name></expr></argument>)<pos:position pos:line="46" pos:column="58"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="46" pos:column="60">strerror<pos:position pos:line="46" pos:column="68"/></name><argument_list pos:line="46" pos:column="68">(<argument><expr><name pos:line="46" pos:column="69">errno<pos:position pos:line="46" pos:column="74"/></name></expr></argument>)<pos:position pos:line="46" pos:column="75"/></argument_list></call></expr></argument>)<pos:position pos:line="46" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="77"/></expr_stmt>
				<return pos:line="47" pos:column="33">return;<pos:position pos:line="47" pos:column="40"/></return>
			}<pos:position pos:line="48" pos:column="26"/></block></then></if>
			<expr_stmt><expr><name pos:line="49" pos:column="25">statret<pos:position pos:line="49" pos:column="32"/></name> <operator pos:line="49" pos:column="33">=<pos:position pos:line="49" pos:column="34"/></operator> <operator pos:line="49" pos:column="35">-<pos:position pos:line="49" pos:column="36"/></operator><literal type="number" pos:line="49" pos:column="36">1<pos:position pos:line="49" pos:column="37"/></literal></expr>;<pos:position pos:line="49" pos:column="38"/></expr_stmt>
		}<pos:position pos:line="50" pos:column="18"/></block></then></if>
		<if pos:line="51" pos:column="17">if <condition pos:line="51" pos:column="20">(<expr><name pos:line="51" pos:column="21">statret<pos:position pos:line="51" pos:column="28"/></name> <operator pos:line="51" pos:column="29">!=<pos:position pos:line="51" pos:column="31"/></operator> <literal type="number" pos:line="51" pos:column="32">0<pos:position pos:line="51" pos:column="33"/></literal> <operator pos:line="51" pos:column="34">&amp;&amp;<pos:position pos:line="51" pos:column="44"/></operator> <call><name pos:line="51" pos:column="37">do_mkdir<pos:position pos:line="51" pos:column="45"/></name><argument_list pos:line="51" pos:column="45">(<argument><expr><name pos:line="51" pos:column="46">fname<pos:position pos:line="51" pos:column="51"/></name></expr></argument>,<argument><expr><name><name pos:line="51" pos:column="52">file<pos:position pos:line="51" pos:column="56"/></name><operator pos:line="51" pos:column="56">-&gt;<pos:position pos:line="51" pos:column="61"/></operator><name pos:line="51" pos:column="58">mode<pos:position pos:line="51" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="51" pos:column="63"/></argument_list></call> <operator pos:line="51" pos:column="64">!=<pos:position pos:line="51" pos:column="66"/></operator> <literal type="number" pos:line="51" pos:column="67">0<pos:position pos:line="51" pos:column="68"/></literal> <operator pos:line="51" pos:column="69">&amp;&amp;<pos:position pos:line="51" pos:column="79"/></operator> <name pos:line="51" pos:column="72">errno<pos:position pos:line="51" pos:column="77"/></name> <operator pos:line="51" pos:column="78">!=<pos:position pos:line="51" pos:column="80"/></operator> <name pos:line="51" pos:column="81">EEXIST<pos:position pos:line="51" pos:column="87"/></name></expr>)<pos:position pos:line="51" pos:column="88"/></condition><then pos:line="51" pos:column="88"> <block pos:line="51" pos:column="89">{
			<if pos:line="52" pos:column="25">if <condition pos:line="52" pos:column="28">(<expr><operator pos:line="52" pos:column="29">!<pos:position pos:line="52" pos:column="30"/></operator><operator pos:line="52" pos:column="30">(<pos:position pos:line="52" pos:column="31"/></operator><name pos:line="52" pos:column="31">relative_paths<pos:position pos:line="52" pos:column="45"/></name> <operator pos:line="52" pos:column="46">&amp;&amp;<pos:position pos:line="52" pos:column="56"/></operator> <name pos:line="52" pos:column="49">errno<pos:position pos:line="52" pos:column="54"/></name><operator pos:line="52" pos:column="54">==<pos:position pos:line="52" pos:column="56"/></operator><name pos:line="52" pos:column="56">ENOENT<pos:position pos:line="52" pos:column="62"/></name> <operator pos:line="52" pos:column="63">&amp;&amp;<pos:position pos:line="52" pos:column="73"/></operator>
			      <call><name pos:line="53" pos:column="31">create_directory_path<pos:position pos:line="53" pos:column="52"/></name><argument_list pos:line="53" pos:column="52">(<argument><expr><name pos:line="53" pos:column="53">fname<pos:position pos:line="53" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="60">orig_umask<pos:position pos:line="53" pos:column="70"/></name></expr></argument>)<pos:position pos:line="53" pos:column="71"/></argument_list></call><operator pos:line="53" pos:column="71">==<pos:position pos:line="53" pos:column="73"/></operator><literal type="number" pos:line="53" pos:column="73">0<pos:position pos:line="53" pos:column="74"/></literal> <operator pos:line="53" pos:column="75">&amp;&amp;<pos:position pos:line="53" pos:column="85"/></operator>
			      <call><name pos:line="54" pos:column="31">do_mkdir<pos:position pos:line="54" pos:column="39"/></name><argument_list pos:line="54" pos:column="39">(<argument><expr><name pos:line="54" pos:column="40">fname<pos:position pos:line="54" pos:column="45"/></name></expr></argument>,<argument><expr><name><name pos:line="54" pos:column="46">file<pos:position pos:line="54" pos:column="50"/></name><operator pos:line="54" pos:column="50">-&gt;<pos:position pos:line="54" pos:column="55"/></operator><name pos:line="54" pos:column="52">mode<pos:position pos:line="54" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="54" pos:column="57"/></argument_list></call><operator pos:line="54" pos:column="57">==<pos:position pos:line="54" pos:column="59"/></operator><literal type="number" pos:line="54" pos:column="59">0<pos:position pos:line="54" pos:column="60"/></literal><operator pos:line="54" pos:column="60">)<pos:position pos:line="54" pos:column="61"/></operator></expr>)<pos:position pos:line="54" pos:column="62"/></condition><then pos:line="54" pos:column="62"> <block pos:line="54" pos:column="63">{
				<expr_stmt><expr><call><name pos:line="55" pos:column="33">rprintf<pos:position pos:line="55" pos:column="40"/></name><argument_list pos:line="55" pos:column="40">(<argument><expr><name pos:line="55" pos:column="41">FERROR<pos:position pos:line="55" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="55" pos:column="49">"recv_generator: mkdir %s failed: %s\n"<pos:position pos:line="55" pos:column="88"/></literal></expr></argument>,
					<argument><expr><call><name pos:line="56" pos:column="41">full_fname<pos:position pos:line="56" pos:column="51"/></name><argument_list pos:line="56" pos:column="51">(<argument><expr><name pos:line="56" pos:column="52">fname<pos:position pos:line="56" pos:column="57"/></name></expr></argument>)<pos:position pos:line="56" pos:column="58"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="56" pos:column="60">strerror<pos:position pos:line="56" pos:column="68"/></name><argument_list pos:line="56" pos:column="68">(<argument><expr><name pos:line="56" pos:column="69">errno<pos:position pos:line="56" pos:column="74"/></name></expr></argument>)<pos:position pos:line="56" pos:column="75"/></argument_list></call></expr></argument>)<pos:position pos:line="56" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="77"/></expr_stmt>
			}<pos:position pos:line="57" pos:column="26"/></block></then></if>
		}<pos:position pos:line="58" pos:column="18"/></block></then></if>
		<comment type="block" pos:line="59" pos:column="17">/* f_out is set to -1 when doing final directory
		   permission and modification time repair */</comment>
		<if pos:line="61" pos:column="17">if <condition pos:line="61" pos:column="20">(<expr><call><name pos:line="61" pos:column="21">set_perms<pos:position pos:line="61" pos:column="30"/></name><argument_list pos:line="61" pos:column="30">(<argument><expr><name pos:line="61" pos:column="31">fname<pos:position pos:line="61" pos:column="36"/></name></expr></argument>,<argument><expr><name pos:line="61" pos:column="37">file<pos:position pos:line="61" pos:column="41"/></name></expr></argument>,<argument><expr><name pos:line="61" pos:column="42">NULL<pos:position pos:line="61" pos:column="46"/></name></expr></argument>,<argument><expr><literal type="number" pos:line="61" pos:column="47">0<pos:position pos:line="61" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="61" pos:column="49"/></argument_list></call> <operator pos:line="61" pos:column="50">&amp;&amp;<pos:position pos:line="61" pos:column="60"/></operator> <name pos:line="61" pos:column="53">verbose<pos:position pos:line="61" pos:column="60"/></name> <operator pos:line="61" pos:column="61">&amp;&amp;<pos:position pos:line="61" pos:column="71"/></operator> <operator pos:line="61" pos:column="64">(<pos:position pos:line="61" pos:column="65"/></operator><name pos:line="61" pos:column="65">f_out<pos:position pos:line="61" pos:column="70"/></name> <operator pos:line="61" pos:column="71">!=<pos:position pos:line="61" pos:column="73"/></operator> <operator pos:line="61" pos:column="74">-<pos:position pos:line="61" pos:column="75"/></operator><literal type="number" pos:line="61" pos:column="75">1<pos:position pos:line="61" pos:column="76"/></literal><operator pos:line="61" pos:column="76">)<pos:position pos:line="61" pos:column="77"/></operator></expr>)<pos:position pos:line="61" pos:column="78"/></condition><then pos:line="61" pos:column="78">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="62" pos:column="25">rprintf<pos:position pos:line="62" pos:column="32"/></name><argument_list pos:line="62" pos:column="32">(<argument><expr><name pos:line="62" pos:column="33">FINFO<pos:position pos:line="62" pos:column="38"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="62" pos:column="39">"%s/\n"<pos:position pos:line="62" pos:column="46"/></literal></expr></argument>,<argument><expr><name pos:line="62" pos:column="47">fname<pos:position pos:line="62" pos:column="52"/></name></expr></argument>)<pos:position pos:line="62" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="54"/></expr_stmt></block></then></if>
		<return pos:line="63" pos:column="17">return;<pos:position pos:line="63" pos:column="24"/></return>
	}<pos:position pos:line="64" pos:column="10"/></block></then></if>

	<if pos:line="66" pos:column="9">if <condition pos:line="66" pos:column="12">(<expr><name pos:line="66" pos:column="13">preserve_links<pos:position pos:line="66" pos:column="27"/></name> <operator pos:line="66" pos:column="28">&amp;&amp;<pos:position pos:line="66" pos:column="38"/></operator> <call><name pos:line="66" pos:column="31">S_ISLNK<pos:position pos:line="66" pos:column="38"/></name><argument_list pos:line="66" pos:column="38">(<argument><expr><name><name pos:line="66" pos:column="39">file<pos:position pos:line="66" pos:column="43"/></name><operator pos:line="66" pos:column="43">-&gt;<pos:position pos:line="66" pos:column="48"/></operator><name pos:line="66" pos:column="45">mode<pos:position pos:line="66" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="66" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="66" pos:column="51"/></condition><then pos:line="66" pos:column="51"> <block pos:line="66" pos:column="52">{
<cpp:if pos:line="67" pos:column="1">#<cpp:directive pos:line="67" pos:column="2">if<pos:position pos:line="67" pos:column="4"/></cpp:directive> <expr><name pos:line="67" pos:column="5">SUPPORT_LINKS<pos:position pos:line="67" pos:column="18"/></name></expr></cpp:if>
		<decl_stmt><decl><type><name pos:line="68" pos:column="17">char<pos:position pos:line="68" pos:column="21"/></name></type> <name><name pos:line="68" pos:column="22">lnk<pos:position pos:line="68" pos:column="25"/></name><index pos:line="68" pos:column="25">[<expr><name pos:line="68" pos:column="26">MAXPATHLEN<pos:position pos:line="68" pos:column="36"/></name></expr>]<pos:position pos:line="68" pos:column="37"/></index></name></decl>;<pos:position pos:line="68" pos:column="38"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="69" pos:column="17">int<pos:position pos:line="69" pos:column="20"/></name></type> <name pos:line="69" pos:column="21">l<pos:position pos:line="69" pos:column="22"/></name></decl>;<pos:position pos:line="69" pos:column="23"/></decl_stmt>

		<if pos:line="71" pos:column="17">if <condition pos:line="71" pos:column="20">(<expr><name pos:line="71" pos:column="21">safe_symlinks<pos:position pos:line="71" pos:column="34"/></name> <operator pos:line="71" pos:column="35">&amp;&amp;<pos:position pos:line="71" pos:column="45"/></operator> <call><name pos:line="71" pos:column="38">unsafe_symlink<pos:position pos:line="71" pos:column="52"/></name><argument_list pos:line="71" pos:column="52">(<argument><expr><name><name pos:line="71" pos:column="53">file<pos:position pos:line="71" pos:column="57"/></name><operator pos:line="71" pos:column="57">-&gt;<pos:position pos:line="71" pos:column="62"/></operator><name pos:line="71" pos:column="59">u<pos:position pos:line="71" pos:column="60"/></name><operator pos:line="71" pos:column="60">.<pos:position pos:line="71" pos:column="61"/></operator><name pos:line="71" pos:column="61">link<pos:position pos:line="71" pos:column="65"/></name></name></expr></argument>, <argument><expr><name pos:line="71" pos:column="67">fname<pos:position pos:line="71" pos:column="72"/></name></expr></argument>)<pos:position pos:line="71" pos:column="73"/></argument_list></call></expr>)<pos:position pos:line="71" pos:column="74"/></condition><then pos:line="71" pos:column="74"> <block pos:line="71" pos:column="75">{
			<if pos:line="72" pos:column="25">if <condition pos:line="72" pos:column="28">(<expr><name pos:line="72" pos:column="29">verbose<pos:position pos:line="72" pos:column="36"/></name></expr>)<pos:position pos:line="72" pos:column="37"/></condition><then pos:line="72" pos:column="37"> <block pos:line="72" pos:column="38">{
				<expr_stmt><expr><call><name pos:line="73" pos:column="33">rprintf<pos:position pos:line="73" pos:column="40"/></name><argument_list pos:line="73" pos:column="40">(<argument><expr><name pos:line="73" pos:column="41">FINFO<pos:position pos:line="73" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="73" pos:column="48">"ignoring unsafe symlink %s -&gt; \"%s\"\n"<pos:position pos:line="73" pos:column="91"/></literal></expr></argument>,
					<argument><expr><call><name pos:line="74" pos:column="41">full_fname<pos:position pos:line="74" pos:column="51"/></name><argument_list pos:line="74" pos:column="51">(<argument><expr><name pos:line="74" pos:column="52">fname<pos:position pos:line="74" pos:column="57"/></name></expr></argument>)<pos:position pos:line="74" pos:column="58"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="74" pos:column="60">file<pos:position pos:line="74" pos:column="64"/></name><operator pos:line="74" pos:column="64">-&gt;<pos:position pos:line="74" pos:column="69"/></operator><name pos:line="74" pos:column="66">u<pos:position pos:line="74" pos:column="67"/></name><operator pos:line="74" pos:column="67">.<pos:position pos:line="74" pos:column="68"/></operator><name pos:line="74" pos:column="68">link<pos:position pos:line="74" pos:column="72"/></name></name></expr></argument>)<pos:position pos:line="74" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="74"/></expr_stmt>
			}<pos:position pos:line="75" pos:column="26"/></block></then></if>
			<return pos:line="76" pos:column="25">return;<pos:position pos:line="76" pos:column="32"/></return>
		}<pos:position pos:line="77" pos:column="18"/></block></then></if>
		<if pos:line="78" pos:column="17">if <condition pos:line="78" pos:column="20">(<expr><name pos:line="78" pos:column="21">statret<pos:position pos:line="78" pos:column="28"/></name> <operator pos:line="78" pos:column="29">==<pos:position pos:line="78" pos:column="31"/></operator> <literal type="number" pos:line="78" pos:column="32">0<pos:position pos:line="78" pos:column="33"/></literal></expr>)<pos:position pos:line="78" pos:column="34"/></condition><then pos:line="78" pos:column="34"> <block pos:line="78" pos:column="35">{
			<expr_stmt><expr><name pos:line="79" pos:column="25">l<pos:position pos:line="79" pos:column="26"/></name> <operator pos:line="79" pos:column="27">=<pos:position pos:line="79" pos:column="28"/></operator> <call><name pos:line="79" pos:column="29">readlink<pos:position pos:line="79" pos:column="37"/></name><argument_list pos:line="79" pos:column="37">(<argument><expr><name pos:line="79" pos:column="38">fname<pos:position pos:line="79" pos:column="43"/></name></expr></argument>,<argument><expr><name pos:line="79" pos:column="44">lnk<pos:position pos:line="79" pos:column="47"/></name></expr></argument>,<argument><expr><name pos:line="79" pos:column="48">MAXPATHLEN<pos:position pos:line="79" pos:column="58"/></name><operator pos:line="79" pos:column="58">-<pos:position pos:line="79" pos:column="59"/></operator><literal type="number" pos:line="79" pos:column="59">1<pos:position pos:line="79" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="79" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="62"/></expr_stmt>
			<if pos:line="80" pos:column="25">if <condition pos:line="80" pos:column="28">(<expr><name pos:line="80" pos:column="29">l<pos:position pos:line="80" pos:column="30"/></name> <operator pos:line="80" pos:column="31">&gt;<pos:position pos:line="80" pos:column="35"/></operator> <literal type="number" pos:line="80" pos:column="33">0<pos:position pos:line="80" pos:column="34"/></literal></expr>)<pos:position pos:line="80" pos:column="35"/></condition><then pos:line="80" pos:column="35"> <block pos:line="80" pos:column="36">{
				<expr_stmt><expr><name><name pos:line="81" pos:column="33">lnk<pos:position pos:line="81" pos:column="36"/></name><index pos:line="81" pos:column="36">[<expr><name pos:line="81" pos:column="37">l<pos:position pos:line="81" pos:column="38"/></name></expr>]<pos:position pos:line="81" pos:column="39"/></index></name> <operator pos:line="81" pos:column="40">=<pos:position pos:line="81" pos:column="41"/></operator> <literal type="number" pos:line="81" pos:column="42">0<pos:position pos:line="81" pos:column="43"/></literal></expr>;<pos:position pos:line="81" pos:column="44"/></expr_stmt>
				<comment type="block" pos:line="82" pos:column="33">/* A link already pointing to the
				 * right place -- no further action
				 * required. */</comment>
				<if pos:line="85" pos:column="33">if <condition pos:line="85" pos:column="36">(<expr><call><name pos:line="85" pos:column="37">strcmp<pos:position pos:line="85" pos:column="43"/></name><argument_list pos:line="85" pos:column="43">(<argument><expr><name pos:line="85" pos:column="44">lnk<pos:position pos:line="85" pos:column="47"/></name></expr></argument>,<argument><expr><name><name pos:line="85" pos:column="48">file<pos:position pos:line="85" pos:column="52"/></name><operator pos:line="85" pos:column="52">-&gt;<pos:position pos:line="85" pos:column="57"/></operator><name pos:line="85" pos:column="54">u<pos:position pos:line="85" pos:column="55"/></name><operator pos:line="85" pos:column="55">.<pos:position pos:line="85" pos:column="56"/></operator><name pos:line="85" pos:column="56">link<pos:position pos:line="85" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="85" pos:column="61"/></argument_list></call> <operator pos:line="85" pos:column="62">==<pos:position pos:line="85" pos:column="64"/></operator> <literal type="number" pos:line="85" pos:column="65">0<pos:position pos:line="85" pos:column="66"/></literal></expr>)<pos:position pos:line="85" pos:column="67"/></condition><then pos:line="85" pos:column="67"> <block pos:line="85" pos:column="68">{
					<expr_stmt><expr><call><name pos:line="86" pos:column="41">set_perms<pos:position pos:line="86" pos:column="50"/></name><argument_list pos:line="86" pos:column="50">(<argument><expr><name pos:line="86" pos:column="51">fname<pos:position pos:line="86" pos:column="56"/></name></expr></argument>,<argument><expr><name pos:line="86" pos:column="57">file<pos:position pos:line="86" pos:column="61"/></name></expr></argument>,<argument><expr><operator pos:line="86" pos:column="62">&amp;<pos:position pos:line="86" pos:column="67"/></operator><name pos:line="86" pos:column="63">st<pos:position pos:line="86" pos:column="65"/></name></expr></argument>,<argument><expr><literal type="number" pos:line="86" pos:column="66">1<pos:position pos:line="86" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="86" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="69"/></expr_stmt>
					<return pos:line="87" pos:column="41">return;<pos:position pos:line="87" pos:column="48"/></return>
				}<pos:position pos:line="88" pos:column="34"/></block></then></if>
			}<pos:position pos:line="89" pos:column="26"/></block></then></if>
			<comment type="block" pos:line="90" pos:column="25">/* Not a symlink, so delete whatever's
			 * already there and put a new symlink
			 * in place. */</comment>
			<expr_stmt><expr><call><name pos:line="93" pos:column="25">delete_file<pos:position pos:line="93" pos:column="36"/></name><argument_list pos:line="93" pos:column="36">(<argument><expr><name pos:line="93" pos:column="37">fname<pos:position pos:line="93" pos:column="42"/></name></expr></argument>)<pos:position pos:line="93" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="44"/></expr_stmt>
		}<pos:position pos:line="94" pos:column="18"/></block></then></if>
		<if pos:line="95" pos:column="17">if <condition pos:line="95" pos:column="20">(<expr><call><name pos:line="95" pos:column="21">do_symlink<pos:position pos:line="95" pos:column="31"/></name><argument_list pos:line="95" pos:column="31">(<argument><expr><name><name pos:line="95" pos:column="32">file<pos:position pos:line="95" pos:column="36"/></name><operator pos:line="95" pos:column="36">-&gt;<pos:position pos:line="95" pos:column="41"/></operator><name pos:line="95" pos:column="38">u<pos:position pos:line="95" pos:column="39"/></name><operator pos:line="95" pos:column="39">.<pos:position pos:line="95" pos:column="40"/></operator><name pos:line="95" pos:column="40">link<pos:position pos:line="95" pos:column="44"/></name></name></expr></argument>,<argument><expr><name pos:line="95" pos:column="45">fname<pos:position pos:line="95" pos:column="50"/></name></expr></argument>)<pos:position pos:line="95" pos:column="51"/></argument_list></call> <operator pos:line="95" pos:column="52">!=<pos:position pos:line="95" pos:column="54"/></operator> <literal type="number" pos:line="95" pos:column="55">0<pos:position pos:line="95" pos:column="56"/></literal></expr>)<pos:position pos:line="95" pos:column="57"/></condition><then pos:line="95" pos:column="57"> <block pos:line="95" pos:column="58">{
			<expr_stmt><expr><call><name pos:line="96" pos:column="25">rprintf<pos:position pos:line="96" pos:column="32"/></name><argument_list pos:line="96" pos:column="32">(<argument><expr><name pos:line="96" pos:column="33">FERROR<pos:position pos:line="96" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="96" pos:column="41">"symlink %s -&gt; \"%s\" failed: %s\n"<pos:position pos:line="96" pos:column="79"/></literal></expr></argument>,
				<argument><expr><call><name pos:line="97" pos:column="33">full_fname<pos:position pos:line="97" pos:column="43"/></name><argument_list pos:line="97" pos:column="43">(<argument><expr><name pos:line="97" pos:column="44">fname<pos:position pos:line="97" pos:column="49"/></name></expr></argument>)<pos:position pos:line="97" pos:column="50"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="97" pos:column="52">file<pos:position pos:line="97" pos:column="56"/></name><operator pos:line="97" pos:column="56">-&gt;<pos:position pos:line="97" pos:column="61"/></operator><name pos:line="97" pos:column="58">u<pos:position pos:line="97" pos:column="59"/></name><operator pos:line="97" pos:column="59">.<pos:position pos:line="97" pos:column="60"/></operator><name pos:line="97" pos:column="60">link<pos:position pos:line="97" pos:column="64"/></name></name></expr></argument>, <argument><expr><call><name pos:line="97" pos:column="66">strerror<pos:position pos:line="97" pos:column="74"/></name><argument_list pos:line="97" pos:column="74">(<argument><expr><name pos:line="97" pos:column="75">errno<pos:position pos:line="97" pos:column="80"/></name></expr></argument>)<pos:position pos:line="97" pos:column="81"/></argument_list></call></expr></argument>)<pos:position pos:line="97" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="83"/></expr_stmt>
		}<pos:position pos:line="98" pos:column="18"/></block></then> <else pos:line="98" pos:column="19">else <block pos:line="98" pos:column="24">{
			<expr_stmt><expr><call><name pos:line="99" pos:column="25">set_perms<pos:position pos:line="99" pos:column="34"/></name><argument_list pos:line="99" pos:column="34">(<argument><expr><name pos:line="99" pos:column="35">fname<pos:position pos:line="99" pos:column="40"/></name></expr></argument>,<argument><expr><name pos:line="99" pos:column="41">file<pos:position pos:line="99" pos:column="45"/></name></expr></argument>,<argument><expr><name pos:line="99" pos:column="46">NULL<pos:position pos:line="99" pos:column="50"/></name></expr></argument>,<argument><expr><literal type="number" pos:line="99" pos:column="51">0<pos:position pos:line="99" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="99" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="99" pos:column="54"/></expr_stmt>
			<if pos:line="100" pos:column="25">if <condition pos:line="100" pos:column="28">(<expr><name pos:line="100" pos:column="29">verbose<pos:position pos:line="100" pos:column="36"/></name></expr>)<pos:position pos:line="100" pos:column="37"/></condition><then pos:line="100" pos:column="37"> <block pos:line="100" pos:column="38">{
				<expr_stmt><expr><call><name pos:line="101" pos:column="33">rprintf<pos:position pos:line="101" pos:column="40"/></name><argument_list pos:line="101" pos:column="40">(<argument><expr><name pos:line="101" pos:column="41">FINFO<pos:position pos:line="101" pos:column="46"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="101" pos:column="47">"%s -&gt; %s\n"<pos:position pos:line="101" pos:column="62"/></literal></expr></argument>, <argument><expr><name pos:line="101" pos:column="61">fname<pos:position pos:line="101" pos:column="66"/></name></expr></argument>,<argument><expr><name><name pos:line="101" pos:column="67">file<pos:position pos:line="101" pos:column="71"/></name><operator pos:line="101" pos:column="71">-&gt;<pos:position pos:line="101" pos:column="76"/></operator><name pos:line="101" pos:column="73">u<pos:position pos:line="101" pos:column="74"/></name><operator pos:line="101" pos:column="74">.<pos:position pos:line="101" pos:column="75"/></operator><name pos:line="101" pos:column="75">link<pos:position pos:line="101" pos:column="79"/></name></name></expr></argument>)<pos:position pos:line="101" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="81"/></expr_stmt>
			}<pos:position pos:line="102" pos:column="26"/></block></then></if>
		}<pos:position pos:line="103" pos:column="18"/></block></else></if>
<cpp:endif pos:line="104" pos:column="1">#<cpp:directive pos:line="104" pos:column="2">endif<pos:position pos:line="104" pos:column="7"/></cpp:directive></cpp:endif>
		<return pos:line="105" pos:column="17">return;<pos:position pos:line="105" pos:column="24"/></return>
	}<pos:position pos:line="106" pos:column="10"/></block></then></if>

<cpp:ifdef pos:line="108" pos:column="1">#<cpp:directive pos:line="108" pos:column="2">ifdef<pos:position pos:line="108" pos:column="7"/></cpp:directive> <name pos:line="108" pos:column="8">HAVE_MKNOD<pos:position pos:line="108" pos:column="18"/></name></cpp:ifdef>
	<if pos:line="109" pos:column="9">if <condition pos:line="109" pos:column="12">(<expr><name pos:line="109" pos:column="13">am_root<pos:position pos:line="109" pos:column="20"/></name> <operator pos:line="109" pos:column="21">&amp;&amp;<pos:position pos:line="109" pos:column="31"/></operator> <name pos:line="109" pos:column="24">preserve_devices<pos:position pos:line="109" pos:column="40"/></name> <operator pos:line="109" pos:column="41">&amp;&amp;<pos:position pos:line="109" pos:column="51"/></operator> <call><name pos:line="109" pos:column="44">IS_DEVICE<pos:position pos:line="109" pos:column="53"/></name><argument_list pos:line="109" pos:column="53">(<argument><expr><name><name pos:line="109" pos:column="54">file<pos:position pos:line="109" pos:column="58"/></name><operator pos:line="109" pos:column="58">-&gt;<pos:position pos:line="109" pos:column="63"/></operator><name pos:line="109" pos:column="60">mode<pos:position pos:line="109" pos:column="64"/></name></name></expr></argument>)<pos:position pos:line="109" pos:column="65"/></argument_list></call></expr>)<pos:position pos:line="109" pos:column="66"/></condition><then pos:line="109" pos:column="66"> <block pos:line="109" pos:column="67">{
		<if pos:line="110" pos:column="17">if <condition pos:line="110" pos:column="20">(<expr><name pos:line="110" pos:column="21">statret<pos:position pos:line="110" pos:column="28"/></name> <operator pos:line="110" pos:column="29">!=<pos:position pos:line="110" pos:column="31"/></operator> <literal type="number" pos:line="110" pos:column="32">0<pos:position pos:line="110" pos:column="33"/></literal> <operator pos:line="110" pos:column="34">||<pos:position pos:line="110" pos:column="36"/></operator>
		    <name><name pos:line="111" pos:column="21">st<pos:position pos:line="111" pos:column="23"/></name><operator pos:line="111" pos:column="23">.<pos:position pos:line="111" pos:column="24"/></operator><name pos:line="111" pos:column="24">st_mode<pos:position pos:line="111" pos:column="31"/></name></name> <operator pos:line="111" pos:column="32">!=<pos:position pos:line="111" pos:column="34"/></operator> <name><name pos:line="111" pos:column="35">file<pos:position pos:line="111" pos:column="39"/></name><operator pos:line="111" pos:column="39">-&gt;<pos:position pos:line="111" pos:column="44"/></operator><name pos:line="111" pos:column="41">mode<pos:position pos:line="111" pos:column="45"/></name></name> <operator pos:line="111" pos:column="46">||<pos:position pos:line="111" pos:column="48"/></operator>
		    <name><name pos:line="112" pos:column="21">st<pos:position pos:line="112" pos:column="23"/></name><operator pos:line="112" pos:column="23">.<pos:position pos:line="112" pos:column="24"/></operator><name pos:line="112" pos:column="24">st_rdev<pos:position pos:line="112" pos:column="31"/></name></name> <operator pos:line="112" pos:column="32">!=<pos:position pos:line="112" pos:column="34"/></operator> <name><name pos:line="112" pos:column="35">file<pos:position pos:line="112" pos:column="39"/></name><operator pos:line="112" pos:column="39">-&gt;<pos:position pos:line="112" pos:column="44"/></operator><name pos:line="112" pos:column="41">u<pos:position pos:line="112" pos:column="42"/></name><operator pos:line="112" pos:column="42">.<pos:position pos:line="112" pos:column="43"/></operator><name pos:line="112" pos:column="43">rdev<pos:position pos:line="112" pos:column="47"/></name></name></expr>)<pos:position pos:line="112" pos:column="48"/></condition><then pos:line="112" pos:column="48"> <block pos:line="112" pos:column="49">{
			<expr_stmt><expr><call><name pos:line="113" pos:column="25">delete_file<pos:position pos:line="113" pos:column="36"/></name><argument_list pos:line="113" pos:column="36">(<argument><expr><name pos:line="113" pos:column="37">fname<pos:position pos:line="113" pos:column="42"/></name></expr></argument>)<pos:position pos:line="113" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="113" pos:column="44"/></expr_stmt>
			<if pos:line="114" pos:column="25">if <condition pos:line="114" pos:column="28">(<expr><name pos:line="114" pos:column="29">verbose<pos:position pos:line="114" pos:column="36"/></name> <operator pos:line="114" pos:column="37">&gt;<pos:position pos:line="114" pos:column="41"/></operator> <literal type="number" pos:line="114" pos:column="39">2<pos:position pos:line="114" pos:column="40"/></literal></expr>)<pos:position pos:line="114" pos:column="41"/></condition><then pos:line="114" pos:column="41">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="115" pos:column="33">rprintf<pos:position pos:line="115" pos:column="40"/></name><argument_list pos:line="115" pos:column="40">(<argument><expr><name pos:line="115" pos:column="41">FINFO<pos:position pos:line="115" pos:column="46"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="115" pos:column="47">"mknod(%s,0%o,0x%x)\n"<pos:position pos:line="115" pos:column="69"/></literal></expr></argument>,
					<argument><expr><name pos:line="116" pos:column="41">fname<pos:position pos:line="116" pos:column="46"/></name></expr></argument>,<argument><expr><operator pos:line="116" pos:column="47">(<pos:position pos:line="116" pos:column="48"/></operator><name pos:line="116" pos:column="48">int<pos:position pos:line="116" pos:column="51"/></name><operator pos:line="116" pos:column="51">)<pos:position pos:line="116" pos:column="52"/></operator><name><name pos:line="116" pos:column="52">file<pos:position pos:line="116" pos:column="56"/></name><operator pos:line="116" pos:column="56">-&gt;<pos:position pos:line="116" pos:column="61"/></operator><name pos:line="116" pos:column="58">mode<pos:position pos:line="116" pos:column="62"/></name></name></expr></argument>,<argument><expr><operator pos:line="116" pos:column="63">(<pos:position pos:line="116" pos:column="64"/></operator><name pos:line="116" pos:column="64">int<pos:position pos:line="116" pos:column="67"/></name><operator pos:line="116" pos:column="67">)<pos:position pos:line="116" pos:column="68"/></operator><name><name pos:line="116" pos:column="68">file<pos:position pos:line="116" pos:column="72"/></name><operator pos:line="116" pos:column="72">-&gt;<pos:position pos:line="116" pos:column="77"/></operator><name pos:line="116" pos:column="74">u<pos:position pos:line="116" pos:column="75"/></name><operator pos:line="116" pos:column="75">.<pos:position pos:line="116" pos:column="76"/></operator><name pos:line="116" pos:column="76">rdev<pos:position pos:line="116" pos:column="80"/></name></name></expr></argument>)<pos:position pos:line="116" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="116" pos:column="82"/></expr_stmt></block></then></if>
			<if pos:line="117" pos:column="25">if <condition pos:line="117" pos:column="28">(<expr><call><name pos:line="117" pos:column="29">do_mknod<pos:position pos:line="117" pos:column="37"/></name><argument_list pos:line="117" pos:column="37">(<argument><expr><name pos:line="117" pos:column="38">fname<pos:position pos:line="117" pos:column="43"/></name></expr></argument>,<argument><expr><name><name pos:line="117" pos:column="44">file<pos:position pos:line="117" pos:column="48"/></name><operator pos:line="117" pos:column="48">-&gt;<pos:position pos:line="117" pos:column="53"/></operator><name pos:line="117" pos:column="50">mode<pos:position pos:line="117" pos:column="54"/></name></name></expr></argument>,<argument><expr><name><name pos:line="117" pos:column="55">file<pos:position pos:line="117" pos:column="59"/></name><operator pos:line="117" pos:column="59">-&gt;<pos:position pos:line="117" pos:column="64"/></operator><name pos:line="117" pos:column="61">u<pos:position pos:line="117" pos:column="62"/></name><operator pos:line="117" pos:column="62">.<pos:position pos:line="117" pos:column="63"/></operator><name pos:line="117" pos:column="63">rdev<pos:position pos:line="117" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="117" pos:column="68"/></argument_list></call> <operator pos:line="117" pos:column="69">!=<pos:position pos:line="117" pos:column="71"/></operator> <literal type="number" pos:line="117" pos:column="72">0<pos:position pos:line="117" pos:column="73"/></literal></expr>)<pos:position pos:line="117" pos:column="74"/></condition><then pos:line="117" pos:column="74"> <block pos:line="117" pos:column="75">{
				<expr_stmt><expr><call><name pos:line="118" pos:column="33">rprintf<pos:position pos:line="118" pos:column="40"/></name><argument_list pos:line="118" pos:column="40">(<argument><expr><name pos:line="118" pos:column="41">FERROR<pos:position pos:line="118" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="118" pos:column="49">"mknod %s failed: %s\n"<pos:position pos:line="118" pos:column="72"/></literal></expr></argument>,
					<argument><expr><call><name pos:line="119" pos:column="41">full_fname<pos:position pos:line="119" pos:column="51"/></name><argument_list pos:line="119" pos:column="51">(<argument><expr><name pos:line="119" pos:column="52">fname<pos:position pos:line="119" pos:column="57"/></name></expr></argument>)<pos:position pos:line="119" pos:column="58"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="119" pos:column="60">strerror<pos:position pos:line="119" pos:column="68"/></name><argument_list pos:line="119" pos:column="68">(<argument><expr><name pos:line="119" pos:column="69">errno<pos:position pos:line="119" pos:column="74"/></name></expr></argument>)<pos:position pos:line="119" pos:column="75"/></argument_list></call></expr></argument>)<pos:position pos:line="119" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="119" pos:column="77"/></expr_stmt>
			}<pos:position pos:line="120" pos:column="26"/></block></then> <else pos:line="120" pos:column="27">else <block pos:line="120" pos:column="32">{
				<expr_stmt><expr><call><name pos:line="121" pos:column="33">set_perms<pos:position pos:line="121" pos:column="42"/></name><argument_list pos:line="121" pos:column="42">(<argument><expr><name pos:line="121" pos:column="43">fname<pos:position pos:line="121" pos:column="48"/></name></expr></argument>,<argument><expr><name pos:line="121" pos:column="49">file<pos:position pos:line="121" pos:column="53"/></name></expr></argument>,<argument><expr><name pos:line="121" pos:column="54">NULL<pos:position pos:line="121" pos:column="58"/></name></expr></argument>,<argument><expr><literal type="number" pos:line="121" pos:column="59">0<pos:position pos:line="121" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="121" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="121" pos:column="62"/></expr_stmt>
				<if pos:line="122" pos:column="33">if <condition pos:line="122" pos:column="36">(<expr><name pos:line="122" pos:column="37">verbose<pos:position pos:line="122" pos:column="44"/></name></expr>)<pos:position pos:line="122" pos:column="45"/></condition><then pos:line="122" pos:column="45">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="123" pos:column="41">rprintf<pos:position pos:line="123" pos:column="48"/></name><argument_list pos:line="123" pos:column="48">(<argument><expr><name pos:line="123" pos:column="49">FINFO<pos:position pos:line="123" pos:column="54"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="123" pos:column="55">"%s\n"<pos:position pos:line="123" pos:column="61"/></literal></expr></argument>,<argument><expr><name pos:line="123" pos:column="62">fname<pos:position pos:line="123" pos:column="67"/></name></expr></argument>)<pos:position pos:line="123" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="123" pos:column="69"/></expr_stmt></block></then></if>
			}<pos:position pos:line="124" pos:column="26"/></block></else></if>
		}<pos:position pos:line="125" pos:column="18"/></block></then> <else pos:line="125" pos:column="19">else <block pos:line="125" pos:column="24">{
			<expr_stmt><expr><call><name pos:line="126" pos:column="25">set_perms<pos:position pos:line="126" pos:column="34"/></name><argument_list pos:line="126" pos:column="34">(<argument><expr><name pos:line="126" pos:column="35">fname<pos:position pos:line="126" pos:column="40"/></name></expr></argument>,<argument><expr><name pos:line="126" pos:column="41">file<pos:position pos:line="126" pos:column="45"/></name></expr></argument>,<argument><expr><operator pos:line="126" pos:column="46">&amp;<pos:position pos:line="126" pos:column="51"/></operator><name pos:line="126" pos:column="47">st<pos:position pos:line="126" pos:column="49"/></name></expr></argument>,<argument><expr><literal type="number" pos:line="126" pos:column="50">1<pos:position pos:line="126" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="126" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="126" pos:column="53"/></expr_stmt>
		}<pos:position pos:line="127" pos:column="18"/></block></else></if>
		<return pos:line="128" pos:column="17">return;<pos:position pos:line="128" pos:column="24"/></return>
	}<pos:position pos:line="129" pos:column="10"/></block></then></if>
<cpp:endif pos:line="130" pos:column="1">#<cpp:directive pos:line="130" pos:column="2">endif<pos:position pos:line="130" pos:column="7"/></cpp:directive></cpp:endif>

	<if pos:line="132" pos:column="9">if <condition pos:line="132" pos:column="12">(<expr><name pos:line="132" pos:column="13">preserve_hard_links<pos:position pos:line="132" pos:column="32"/></name> <operator pos:line="132" pos:column="33">&amp;&amp;<pos:position pos:line="132" pos:column="43"/></operator> <call><name pos:line="132" pos:column="36">hard_link_check<pos:position pos:line="132" pos:column="51"/></name><argument_list pos:line="132" pos:column="51">(<argument><expr><name pos:line="132" pos:column="52">file<pos:position pos:line="132" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="132" pos:column="58">HL_CHECK_MASTER<pos:position pos:line="132" pos:column="73"/></name></expr></argument>)<pos:position pos:line="132" pos:column="74"/></argument_list></call></expr>)<pos:position pos:line="132" pos:column="75"/></condition><then pos:line="132" pos:column="75">
		<block type="pseudo"><return pos:line="133" pos:column="17">return;<pos:position pos:line="133" pos:column="24"/></return></block></then></if>

	<if pos:line="135" pos:column="9">if <condition pos:line="135" pos:column="12">(<expr><operator pos:line="135" pos:column="13">!<pos:position pos:line="135" pos:column="14"/></operator><call><name pos:line="135" pos:column="14">S_ISREG<pos:position pos:line="135" pos:column="21"/></name><argument_list pos:line="135" pos:column="21">(<argument><expr><name><name pos:line="135" pos:column="22">file<pos:position pos:line="135" pos:column="26"/></name><operator pos:line="135" pos:column="26">-&gt;<pos:position pos:line="135" pos:column="31"/></operator><name pos:line="135" pos:column="28">mode<pos:position pos:line="135" pos:column="32"/></name></name></expr></argument>)<pos:position pos:line="135" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="135" pos:column="34"/></condition><then pos:line="135" pos:column="34"> <block pos:line="135" pos:column="35">{
		<expr_stmt><expr><call><name pos:line="136" pos:column="17">rprintf<pos:position pos:line="136" pos:column="24"/></name><argument_list pos:line="136" pos:column="24">(<argument><expr><name pos:line="136" pos:column="25">FINFO<pos:position pos:line="136" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="136" pos:column="32">"skipping non-regular file \"%s\"\n"<pos:position pos:line="136" pos:column="68"/></literal></expr></argument>,<argument><expr><name pos:line="136" pos:column="69">fname<pos:position pos:line="136" pos:column="74"/></name></expr></argument>)<pos:position pos:line="136" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="136" pos:column="76"/></expr_stmt>
		<return pos:line="137" pos:column="17">return;<pos:position pos:line="137" pos:column="24"/></return>
	}<pos:position pos:line="138" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="140" pos:column="9">fnamecmp<pos:position pos:line="140" pos:column="17"/></name> <operator pos:line="140" pos:column="18">=<pos:position pos:line="140" pos:column="19"/></operator> <name pos:line="140" pos:column="20">fname<pos:position pos:line="140" pos:column="25"/></name></expr>;<pos:position pos:line="140" pos:column="26"/></expr_stmt>

	<if pos:line="142" pos:column="9">if <condition pos:line="142" pos:column="12">(<expr><name pos:line="142" pos:column="13">statret<pos:position pos:line="142" pos:column="20"/></name> <operator pos:line="142" pos:column="21">==<pos:position pos:line="142" pos:column="23"/></operator> <operator pos:line="142" pos:column="24">-<pos:position pos:line="142" pos:column="25"/></operator><literal type="number" pos:line="142" pos:column="25">1<pos:position pos:line="142" pos:column="26"/></literal> <operator pos:line="142" pos:column="27">&amp;&amp;<pos:position pos:line="142" pos:column="37"/></operator> <name pos:line="142" pos:column="30">compare_dest<pos:position pos:line="142" pos:column="42"/></name> <operator pos:line="142" pos:column="43">!=<pos:position pos:line="142" pos:column="45"/></operator> <name pos:line="142" pos:column="46">NULL<pos:position pos:line="142" pos:column="50"/></name></expr>)<pos:position pos:line="142" pos:column="51"/></condition><then pos:line="142" pos:column="51"> <block pos:line="142" pos:column="52">{
		<comment type="block" pos:line="143" pos:column="17">/* try the file at compare_dest instead */</comment>
		<decl_stmt><decl><type><name pos:line="144" pos:column="17">int<pos:position pos:line="144" pos:column="20"/></name></type> <name pos:line="144" pos:column="21">saveerrno<pos:position pos:line="144" pos:column="30"/></name> <init pos:line="144" pos:column="31">= <expr><name pos:line="144" pos:column="33">errno<pos:position pos:line="144" pos:column="38"/></name></expr></init></decl>;<pos:position pos:line="144" pos:column="39"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="145" pos:column="17">pathjoin<pos:position pos:line="145" pos:column="25"/></name><argument_list pos:line="145" pos:column="25">(<argument><expr><name pos:line="145" pos:column="26">fnamecmpbuf<pos:position pos:line="145" pos:column="37"/></name></expr></argument>, <argument><expr><sizeof pos:line="145" pos:column="39">sizeof <name pos:line="145" pos:column="46">fnamecmpbuf<pos:position pos:line="145" pos:column="57"/></name></sizeof></expr></argument>, <argument><expr><name pos:line="145" pos:column="59">compare_dest<pos:position pos:line="145" pos:column="71"/></name></expr></argument>, <argument><expr><name pos:line="145" pos:column="73">fname<pos:position pos:line="145" pos:column="78"/></name></expr></argument>)<pos:position pos:line="145" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="145" pos:column="80"/></expr_stmt>
		<expr_stmt><expr><name pos:line="146" pos:column="17">statret<pos:position pos:line="146" pos:column="24"/></name> <operator pos:line="146" pos:column="25">=<pos:position pos:line="146" pos:column="26"/></operator> <call><name pos:line="146" pos:column="27">link_stat<pos:position pos:line="146" pos:column="36"/></name><argument_list pos:line="146" pos:column="36">(<argument><expr><name pos:line="146" pos:column="37">fnamecmpbuf<pos:position pos:line="146" pos:column="48"/></name></expr></argument>,<argument><expr><operator pos:line="146" pos:column="49">&amp;<pos:position pos:line="146" pos:column="54"/></operator><name pos:line="146" pos:column="50">st<pos:position pos:line="146" pos:column="52"/></name></expr></argument>)<pos:position pos:line="146" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="146" pos:column="54"/></expr_stmt>
		<if pos:line="147" pos:column="17">if <condition pos:line="147" pos:column="20">(<expr><operator pos:line="147" pos:column="21">!<pos:position pos:line="147" pos:column="22"/></operator><call><name pos:line="147" pos:column="22">S_ISREG<pos:position pos:line="147" pos:column="29"/></name><argument_list pos:line="147" pos:column="29">(<argument><expr><name><name pos:line="147" pos:column="30">st<pos:position pos:line="147" pos:column="32"/></name><operator pos:line="147" pos:column="32">.<pos:position pos:line="147" pos:column="33"/></operator><name pos:line="147" pos:column="33">st_mode<pos:position pos:line="147" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="147" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="147" pos:column="42"/></condition><then pos:line="147" pos:column="42">
			<block type="pseudo"><expr_stmt><expr><name pos:line="148" pos:column="25">statret<pos:position pos:line="148" pos:column="32"/></name> <operator pos:line="148" pos:column="33">=<pos:position pos:line="148" pos:column="34"/></operator> <operator pos:line="148" pos:column="35">-<pos:position pos:line="148" pos:column="36"/></operator><literal type="number" pos:line="148" pos:column="36">1<pos:position pos:line="148" pos:column="37"/></literal></expr>;<pos:position pos:line="148" pos:column="38"/></expr_stmt></block></then></if>
		<if pos:line="149" pos:column="17">if <condition pos:line="149" pos:column="20">(<expr><name pos:line="149" pos:column="21">statret<pos:position pos:line="149" pos:column="28"/></name> <operator pos:line="149" pos:column="29">==<pos:position pos:line="149" pos:column="31"/></operator> <operator pos:line="149" pos:column="32">-<pos:position pos:line="149" pos:column="33"/></operator><literal type="number" pos:line="149" pos:column="33">1<pos:position pos:line="149" pos:column="34"/></literal></expr>)<pos:position pos:line="149" pos:column="35"/></condition><then pos:line="149" pos:column="35">
			<block type="pseudo"><expr_stmt><expr><name pos:line="150" pos:column="25">errno<pos:position pos:line="150" pos:column="30"/></name> <operator pos:line="150" pos:column="31">=<pos:position pos:line="150" pos:column="32"/></operator> <name pos:line="150" pos:column="33">saveerrno<pos:position pos:line="150" pos:column="42"/></name></expr>;<pos:position pos:line="150" pos:column="43"/></expr_stmt></block></then>
<cpp:if pos:line="151" pos:column="1">#<cpp:directive pos:line="151" pos:column="2">if<pos:position pos:line="151" pos:column="4"/></cpp:directive> <expr><name pos:line="151" pos:column="5">HAVE_LINK<pos:position pos:line="151" pos:column="14"/></name></expr></cpp:if>
		<elseif pos:line="152" pos:column="17">else <if pos:line="152" pos:column="22">if <condition pos:line="152" pos:column="25">(<expr><name pos:line="152" pos:column="26">link_dest<pos:position pos:line="152" pos:column="35"/></name> <operator pos:line="152" pos:column="36">&amp;&amp;<pos:position pos:line="152" pos:column="46"/></operator> <operator pos:line="152" pos:column="39">!<pos:position pos:line="152" pos:column="40"/></operator><name pos:line="152" pos:column="40">dry_run<pos:position pos:line="152" pos:column="47"/></name></expr>)<pos:position pos:line="152" pos:column="48"/></condition><then pos:line="152" pos:column="48"> <block pos:line="152" pos:column="49">{
			<if pos:line="153" pos:column="25">if <condition pos:line="153" pos:column="28">(<expr><call><name pos:line="153" pos:column="29">do_link<pos:position pos:line="153" pos:column="36"/></name><argument_list pos:line="153" pos:column="36">(<argument><expr><name pos:line="153" pos:column="37">fnamecmpbuf<pos:position pos:line="153" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="153" pos:column="50">fname<pos:position pos:line="153" pos:column="55"/></name></expr></argument>)<pos:position pos:line="153" pos:column="56"/></argument_list></call> <operator pos:line="153" pos:column="57">!=<pos:position pos:line="153" pos:column="59"/></operator> <literal type="number" pos:line="153" pos:column="60">0<pos:position pos:line="153" pos:column="61"/></literal></expr>)<pos:position pos:line="153" pos:column="62"/></condition><then pos:line="153" pos:column="62"> <block pos:line="153" pos:column="63">{
				<if pos:line="154" pos:column="33">if <condition pos:line="154" pos:column="36">(<expr><name pos:line="154" pos:column="37">verbose<pos:position pos:line="154" pos:column="44"/></name> <operator pos:line="154" pos:column="45">&gt;<pos:position pos:line="154" pos:column="49"/></operator> <literal type="number" pos:line="154" pos:column="47">0<pos:position pos:line="154" pos:column="48"/></literal></expr>)<pos:position pos:line="154" pos:column="49"/></condition><then pos:line="154" pos:column="49"> <block pos:line="154" pos:column="50">{
					<expr_stmt><expr><call><name pos:line="155" pos:column="41">rprintf<pos:position pos:line="155" pos:column="48"/></name><argument_list pos:line="155" pos:column="48">(<argument><expr><name pos:line="155" pos:column="49">FINFO<pos:position pos:line="155" pos:column="54"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="155" pos:column="55">"link %s =&gt; %s : %s\n"<pos:position pos:line="155" pos:column="80"/></literal></expr></argument>,
						<argument><expr><name pos:line="156" pos:column="49">fnamecmpbuf<pos:position pos:line="156" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="156" pos:column="62">fname<pos:position pos:line="156" pos:column="67"/></name></expr></argument>,
						<argument><expr><call><name pos:line="157" pos:column="49">strerror<pos:position pos:line="157" pos:column="57"/></name><argument_list pos:line="157" pos:column="57">(<argument><expr><name pos:line="157" pos:column="58">errno<pos:position pos:line="157" pos:column="63"/></name></expr></argument>)<pos:position pos:line="157" pos:column="64"/></argument_list></call></expr></argument>)<pos:position pos:line="157" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="157" pos:column="66"/></expr_stmt>
				}<pos:position pos:line="158" pos:column="34"/></block></then></if>
			}<pos:position pos:line="159" pos:column="26"/></block></then></if>
			<expr_stmt><expr><name pos:line="160" pos:column="25">fnamecmp<pos:position pos:line="160" pos:column="33"/></name> <operator pos:line="160" pos:column="34">=<pos:position pos:line="160" pos:column="35"/></operator> <name pos:line="160" pos:column="36">fnamecmpbuf<pos:position pos:line="160" pos:column="47"/></name></expr>;<pos:position pos:line="160" pos:column="48"/></expr_stmt>
		}<pos:position pos:line="161" pos:column="18"/></block></then></if></elseif>
<cpp:endif pos:line="162" pos:column="1">#<cpp:directive pos:line="162" pos:column="2">endif<pos:position pos:line="162" pos:column="7"/></cpp:directive></cpp:endif>
		<else pos:line="163" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><name pos:line="164" pos:column="25">fnamecmp<pos:position pos:line="164" pos:column="33"/></name> <operator pos:line="164" pos:column="34">=<pos:position pos:line="164" pos:column="35"/></operator> <name pos:line="164" pos:column="36">fnamecmpbuf<pos:position pos:line="164" pos:column="47"/></name></expr>;<pos:position pos:line="164" pos:column="48"/></expr_stmt></block></else></if>
	}<pos:position pos:line="165" pos:column="10"/></block></then></if>

	<if pos:line="167" pos:column="9">if <condition pos:line="167" pos:column="12">(<expr><name pos:line="167" pos:column="13">statret<pos:position pos:line="167" pos:column="20"/></name> <operator pos:line="167" pos:column="21">==<pos:position pos:line="167" pos:column="23"/></operator> <operator pos:line="167" pos:column="24">-<pos:position pos:line="167" pos:column="25"/></operator><literal type="number" pos:line="167" pos:column="25">1<pos:position pos:line="167" pos:column="26"/></literal></expr>)<pos:position pos:line="167" pos:column="27"/></condition><then pos:line="167" pos:column="27"> <block pos:line="167" pos:column="28">{
		<if pos:line="168" pos:column="17">if <condition pos:line="168" pos:column="20">(<expr><name pos:line="168" pos:column="21">preserve_hard_links<pos:position pos:line="168" pos:column="40"/></name> <operator pos:line="168" pos:column="41">&amp;&amp;<pos:position pos:line="168" pos:column="51"/></operator> <call><name pos:line="168" pos:column="44">hard_link_check<pos:position pos:line="168" pos:column="59"/></name><argument_list pos:line="168" pos:column="59">(<argument><expr><name pos:line="168" pos:column="60">file<pos:position pos:line="168" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="168" pos:column="66">HL_SKIP<pos:position pos:line="168" pos:column="73"/></name></expr></argument>)<pos:position pos:line="168" pos:column="74"/></argument_list></call></expr>)<pos:position pos:line="168" pos:column="75"/></condition><then pos:line="168" pos:column="75">
			<block type="pseudo"><return pos:line="169" pos:column="25">return;<pos:position pos:line="169" pos:column="32"/></return></block></then></if>
		<if pos:line="170" pos:column="17">if <condition pos:line="170" pos:column="20">(<expr><name pos:line="170" pos:column="21">errno<pos:position pos:line="170" pos:column="26"/></name> <operator pos:line="170" pos:column="27">==<pos:position pos:line="170" pos:column="29"/></operator> <name pos:line="170" pos:column="30">ENOENT<pos:position pos:line="170" pos:column="36"/></name></expr>)<pos:position pos:line="170" pos:column="37"/></condition><then pos:line="170" pos:column="37"> <block pos:line="170" pos:column="38">{
			<expr_stmt><expr><call><name pos:line="171" pos:column="25">write_int<pos:position pos:line="171" pos:column="34"/></name><argument_list pos:line="171" pos:column="34">(<argument><expr><name pos:line="171" pos:column="35">f_out<pos:position pos:line="171" pos:column="40"/></name></expr></argument>,<argument><expr><name pos:line="171" pos:column="41">i<pos:position pos:line="171" pos:column="42"/></name></expr></argument>)<pos:position pos:line="171" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="171" pos:column="44"/></expr_stmt>
			<if pos:line="172" pos:column="25">if <condition pos:line="172" pos:column="28">(<expr><operator pos:line="172" pos:column="29">!<pos:position pos:line="172" pos:column="30"/></operator><name pos:line="172" pos:column="30">dry_run<pos:position pos:line="172" pos:column="37"/></name></expr>)<pos:position pos:line="172" pos:column="38"/></condition><then pos:line="172" pos:column="38"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="172" pos:column="39">write_sum_head<pos:position pos:line="172" pos:column="53"/></name><argument_list pos:line="172" pos:column="53">(<argument><expr><name pos:line="172" pos:column="54">f_out<pos:position pos:line="172" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="172" pos:column="61">NULL<pos:position pos:line="172" pos:column="65"/></name></expr></argument>)<pos:position pos:line="172" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="172" pos:column="67"/></expr_stmt></block></then></if>
		}<pos:position pos:line="173" pos:column="18"/></block></then> <elseif pos:line="173" pos:column="19">else <if pos:line="173" pos:column="24">if <condition pos:line="173" pos:column="27">(<expr><name pos:line="173" pos:column="28">verbose<pos:position pos:line="173" pos:column="35"/></name> <operator pos:line="173" pos:column="36">&gt;<pos:position pos:line="173" pos:column="40"/></operator> <literal type="number" pos:line="173" pos:column="38">1<pos:position pos:line="173" pos:column="39"/></literal></expr>)<pos:position pos:line="173" pos:column="40"/></condition><then pos:line="173" pos:column="40"> <block pos:line="173" pos:column="41">{
			<expr_stmt><expr><call><name pos:line="174" pos:column="25">rprintf<pos:position pos:line="174" pos:column="32"/></name><argument_list pos:line="174" pos:column="32">(<argument><expr><name pos:line="174" pos:column="33">FERROR<pos:position pos:line="174" pos:column="39"/></name></expr></argument>,
				<argument><expr><literal type="string" pos:line="175" pos:column="33">"recv_generator: failed to open %s: %s\n"<pos:position pos:line="175" pos:column="74"/></literal></expr></argument>,
				<argument><expr><call><name pos:line="176" pos:column="33">full_fname<pos:position pos:line="176" pos:column="43"/></name><argument_list pos:line="176" pos:column="43">(<argument><expr><name pos:line="176" pos:column="44">fname<pos:position pos:line="176" pos:column="49"/></name></expr></argument>)<pos:position pos:line="176" pos:column="50"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="176" pos:column="52">strerror<pos:position pos:line="176" pos:column="60"/></name><argument_list pos:line="176" pos:column="60">(<argument><expr><name pos:line="176" pos:column="61">errno<pos:position pos:line="176" pos:column="66"/></name></expr></argument>)<pos:position pos:line="176" pos:column="67"/></argument_list></call></expr></argument>)<pos:position pos:line="176" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="176" pos:column="69"/></expr_stmt>
		}<pos:position pos:line="177" pos:column="18"/></block></then></if></elseif></if>
		<return pos:line="178" pos:column="17">return;<pos:position pos:line="178" pos:column="24"/></return>
	}<pos:position pos:line="179" pos:column="10"/></block></then></if>

	<if pos:line="181" pos:column="9">if <condition pos:line="181" pos:column="12">(<expr><operator pos:line="181" pos:column="13">!<pos:position pos:line="181" pos:column="14"/></operator><call><name pos:line="181" pos:column="14">S_ISREG<pos:position pos:line="181" pos:column="21"/></name><argument_list pos:line="181" pos:column="21">(<argument><expr><name><name pos:line="181" pos:column="22">st<pos:position pos:line="181" pos:column="24"/></name><operator pos:line="181" pos:column="24">.<pos:position pos:line="181" pos:column="25"/></operator><name pos:line="181" pos:column="25">st_mode<pos:position pos:line="181" pos:column="32"/></name></name></expr></argument>)<pos:position pos:line="181" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="181" pos:column="34"/></condition><then pos:line="181" pos:column="34"> <block pos:line="181" pos:column="35">{
		<if pos:line="182" pos:column="17">if <condition pos:line="182" pos:column="20">(<expr><call><name pos:line="182" pos:column="21">delete_file<pos:position pos:line="182" pos:column="32"/></name><argument_list pos:line="182" pos:column="32">(<argument><expr><name pos:line="182" pos:column="33">fname<pos:position pos:line="182" pos:column="38"/></name></expr></argument>)<pos:position pos:line="182" pos:column="39"/></argument_list></call> <operator pos:line="182" pos:column="40">!=<pos:position pos:line="182" pos:column="42"/></operator> <literal type="number" pos:line="182" pos:column="43">0<pos:position pos:line="182" pos:column="44"/></literal></expr>)<pos:position pos:line="182" pos:column="45"/></condition><then pos:line="182" pos:column="45"> <block pos:line="182" pos:column="46">{
			<return pos:line="183" pos:column="25">return;<pos:position pos:line="183" pos:column="32"/></return>
		}<pos:position pos:line="184" pos:column="18"/></block></then></if>

		<comment type="block" pos:line="186" pos:column="17">/* now pretend the file didn't exist */</comment>
		<if pos:line="187" pos:column="17">if <condition pos:line="187" pos:column="20">(<expr><name pos:line="187" pos:column="21">preserve_hard_links<pos:position pos:line="187" pos:column="40"/></name> <operator pos:line="187" pos:column="41">&amp;&amp;<pos:position pos:line="187" pos:column="51"/></operator> <call><name pos:line="187" pos:column="44">hard_link_check<pos:position pos:line="187" pos:column="59"/></name><argument_list pos:line="187" pos:column="59">(<argument><expr><name pos:line="187" pos:column="60">file<pos:position pos:line="187" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="187" pos:column="66">HL_SKIP<pos:position pos:line="187" pos:column="73"/></name></expr></argument>)<pos:position pos:line="187" pos:column="74"/></argument_list></call></expr>)<pos:position pos:line="187" pos:column="75"/></condition><then pos:line="187" pos:column="75">
			<block type="pseudo"><return pos:line="188" pos:column="25">return;<pos:position pos:line="188" pos:column="32"/></return></block></then></if>
		<expr_stmt><expr><call><name pos:line="189" pos:column="17">write_int<pos:position pos:line="189" pos:column="26"/></name><argument_list pos:line="189" pos:column="26">(<argument><expr><name pos:line="189" pos:column="27">f_out<pos:position pos:line="189" pos:column="32"/></name></expr></argument>,<argument><expr><name pos:line="189" pos:column="33">i<pos:position pos:line="189" pos:column="34"/></name></expr></argument>)<pos:position pos:line="189" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="189" pos:column="36"/></expr_stmt>
		<if pos:line="190" pos:column="17">if <condition pos:line="190" pos:column="20">(<expr><operator pos:line="190" pos:column="21">!<pos:position pos:line="190" pos:column="22"/></operator><name pos:line="190" pos:column="22">dry_run<pos:position pos:line="190" pos:column="29"/></name></expr>)<pos:position pos:line="190" pos:column="30"/></condition><then pos:line="190" pos:column="30"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="190" pos:column="31">write_sum_head<pos:position pos:line="190" pos:column="45"/></name><argument_list pos:line="190" pos:column="45">(<argument><expr><name pos:line="190" pos:column="46">f_out<pos:position pos:line="190" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="190" pos:column="53">NULL<pos:position pos:line="190" pos:column="57"/></name></expr></argument>)<pos:position pos:line="190" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="190" pos:column="59"/></expr_stmt></block></then></if>
		<return pos:line="191" pos:column="17">return;<pos:position pos:line="191" pos:column="24"/></return>
	}<pos:position pos:line="192" pos:column="10"/></block></then></if>

	<if pos:line="194" pos:column="9">if <condition pos:line="194" pos:column="12">(<expr><name pos:line="194" pos:column="13">opt_ignore_existing<pos:position pos:line="194" pos:column="32"/></name> <operator pos:line="194" pos:column="33">&amp;&amp;<pos:position pos:line="194" pos:column="43"/></operator> <name pos:line="194" pos:column="36">fnamecmp<pos:position pos:line="194" pos:column="44"/></name> <operator pos:line="194" pos:column="45">==<pos:position pos:line="194" pos:column="47"/></operator> <name pos:line="194" pos:column="48">fname<pos:position pos:line="194" pos:column="53"/></name></expr>)<pos:position pos:line="194" pos:column="54"/></condition><then pos:line="194" pos:column="54"> <block pos:line="194" pos:column="55">{
		<if pos:line="195" pos:column="17">if <condition pos:line="195" pos:column="20">(<expr><name pos:line="195" pos:column="21">verbose<pos:position pos:line="195" pos:column="28"/></name> <operator pos:line="195" pos:column="29">&gt;<pos:position pos:line="195" pos:column="33"/></operator> <literal type="number" pos:line="195" pos:column="31">1<pos:position pos:line="195" pos:column="32"/></literal></expr>)<pos:position pos:line="195" pos:column="33"/></condition><then pos:line="195" pos:column="33">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="196" pos:column="25">rprintf<pos:position pos:line="196" pos:column="32"/></name><argument_list pos:line="196" pos:column="32">(<argument><expr><name pos:line="196" pos:column="33">FINFO<pos:position pos:line="196" pos:column="38"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="196" pos:column="39">"%s exists\n"<pos:position pos:line="196" pos:column="52"/></literal></expr></argument>,<argument><expr><name pos:line="196" pos:column="53">fname<pos:position pos:line="196" pos:column="58"/></name></expr></argument>)<pos:position pos:line="196" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="196" pos:column="60"/></expr_stmt></block></then></if>
		<return pos:line="197" pos:column="17">return;<pos:position pos:line="197" pos:column="24"/></return>
	}<pos:position pos:line="198" pos:column="10"/></block></then></if>

	<if pos:line="200" pos:column="9">if <condition pos:line="200" pos:column="12">(<expr><name pos:line="200" pos:column="13">update_only<pos:position pos:line="200" pos:column="24"/></name> <operator pos:line="200" pos:column="25">&amp;&amp;<pos:position pos:line="200" pos:column="35"/></operator> <call><name pos:line="200" pos:column="28">cmp_modtime<pos:position pos:line="200" pos:column="39"/></name><argument_list pos:line="200" pos:column="39">(<argument><expr><name><name pos:line="200" pos:column="40">st<pos:position pos:line="200" pos:column="42"/></name><operator pos:line="200" pos:column="42">.<pos:position pos:line="200" pos:column="43"/></operator><name pos:line="200" pos:column="43">st_mtime<pos:position pos:line="200" pos:column="51"/></name></name></expr></argument>,<argument><expr><name><name pos:line="200" pos:column="52">file<pos:position pos:line="200" pos:column="56"/></name><operator pos:line="200" pos:column="56">-&gt;<pos:position pos:line="200" pos:column="61"/></operator><name pos:line="200" pos:column="58">modtime<pos:position pos:line="200" pos:column="65"/></name></name></expr></argument>)<pos:position pos:line="200" pos:column="66"/></argument_list></call><operator pos:line="200" pos:column="66">&gt;<pos:position pos:line="200" pos:column="70"/></operator><literal type="number" pos:line="200" pos:column="67">0<pos:position pos:line="200" pos:column="68"/></literal> <operator pos:line="200" pos:column="69">&amp;&amp;<pos:position pos:line="200" pos:column="79"/></operator> <name pos:line="200" pos:column="72">fnamecmp<pos:position pos:line="200" pos:column="80"/></name> <operator pos:line="200" pos:column="81">==<pos:position pos:line="200" pos:column="83"/></operator> <name pos:line="200" pos:column="84">fname<pos:position pos:line="200" pos:column="89"/></name></expr>)<pos:position pos:line="200" pos:column="90"/></condition><then pos:line="200" pos:column="90"> <block pos:line="200" pos:column="91">{
		<if pos:line="201" pos:column="17">if <condition pos:line="201" pos:column="20">(<expr><name pos:line="201" pos:column="21">verbose<pos:position pos:line="201" pos:column="28"/></name> <operator pos:line="201" pos:column="29">&gt;<pos:position pos:line="201" pos:column="33"/></operator> <literal type="number" pos:line="201" pos:column="31">1<pos:position pos:line="201" pos:column="32"/></literal></expr>)<pos:position pos:line="201" pos:column="33"/></condition><then pos:line="201" pos:column="33">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="202" pos:column="25">rprintf<pos:position pos:line="202" pos:column="32"/></name><argument_list pos:line="202" pos:column="32">(<argument><expr><name pos:line="202" pos:column="33">FINFO<pos:position pos:line="202" pos:column="38"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="202" pos:column="39">"%s is newer\n"<pos:position pos:line="202" pos:column="54"/></literal></expr></argument>,<argument><expr><name pos:line="202" pos:column="55">fname<pos:position pos:line="202" pos:column="60"/></name></expr></argument>)<pos:position pos:line="202" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="202" pos:column="62"/></expr_stmt></block></then></if>
		<return pos:line="203" pos:column="17">return;<pos:position pos:line="203" pos:column="24"/></return>
	}<pos:position pos:line="204" pos:column="10"/></block></then></if>

	<if pos:line="206" pos:column="9">if <condition pos:line="206" pos:column="12">(<expr><call><name pos:line="206" pos:column="13">skip_file<pos:position pos:line="206" pos:column="22"/></name><argument_list pos:line="206" pos:column="22">(<argument><expr><name pos:line="206" pos:column="23">fname<pos:position pos:line="206" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="206" pos:column="30">file<pos:position pos:line="206" pos:column="34"/></name></expr></argument>, <argument><expr><operator pos:line="206" pos:column="36">&amp;<pos:position pos:line="206" pos:column="41"/></operator><name pos:line="206" pos:column="37">st<pos:position pos:line="206" pos:column="39"/></name></expr></argument>)<pos:position pos:line="206" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="206" pos:column="41"/></condition><then pos:line="206" pos:column="41"> <block pos:line="206" pos:column="42">{
		<if pos:line="207" pos:column="17">if <condition pos:line="207" pos:column="20">(<expr><name pos:line="207" pos:column="21">fnamecmp<pos:position pos:line="207" pos:column="29"/></name> <operator pos:line="207" pos:column="30">==<pos:position pos:line="207" pos:column="32"/></operator> <name pos:line="207" pos:column="33">fname<pos:position pos:line="207" pos:column="38"/></name></expr>)<pos:position pos:line="207" pos:column="39"/></condition><then pos:line="207" pos:column="39">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="208" pos:column="25">set_perms<pos:position pos:line="208" pos:column="34"/></name><argument_list pos:line="208" pos:column="34">(<argument><expr><name pos:line="208" pos:column="35">fname<pos:position pos:line="208" pos:column="40"/></name></expr></argument>,<argument><expr><name pos:line="208" pos:column="41">file<pos:position pos:line="208" pos:column="45"/></name></expr></argument>,<argument><expr><operator pos:line="208" pos:column="46">&amp;<pos:position pos:line="208" pos:column="51"/></operator><name pos:line="208" pos:column="47">st<pos:position pos:line="208" pos:column="49"/></name></expr></argument>,<argument><expr><literal type="number" pos:line="208" pos:column="50">1<pos:position pos:line="208" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="208" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="208" pos:column="53"/></expr_stmt></block></then></if>
		<return pos:line="209" pos:column="17">return;<pos:position pos:line="209" pos:column="24"/></return>
	}<pos:position pos:line="210" pos:column="10"/></block></then></if>

	<if pos:line="212" pos:column="9">if <condition pos:line="212" pos:column="12">(<expr><name pos:line="212" pos:column="13">dry_run<pos:position pos:line="212" pos:column="20"/></name></expr>)<pos:position pos:line="212" pos:column="21"/></condition><then pos:line="212" pos:column="21"> <block pos:line="212" pos:column="22">{
		<expr_stmt><expr><call><name pos:line="213" pos:column="17">write_int<pos:position pos:line="213" pos:column="26"/></name><argument_list pos:line="213" pos:column="26">(<argument><expr><name pos:line="213" pos:column="27">f_out<pos:position pos:line="213" pos:column="32"/></name></expr></argument>,<argument><expr><name pos:line="213" pos:column="33">i<pos:position pos:line="213" pos:column="34"/></name></expr></argument>)<pos:position pos:line="213" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="213" pos:column="36"/></expr_stmt>
		<return pos:line="214" pos:column="17">return;<pos:position pos:line="214" pos:column="24"/></return>
	}<pos:position pos:line="215" pos:column="10"/></block></then></if>

	<if pos:line="217" pos:column="9">if <condition pos:line="217" pos:column="12">(<expr><call><name pos:line="217" pos:column="13">disable_deltas_p<pos:position pos:line="217" pos:column="29"/></name><argument_list pos:line="217" pos:column="29">()<pos:position pos:line="217" pos:column="31"/></argument_list></call></expr>)<pos:position pos:line="217" pos:column="32"/></condition><then pos:line="217" pos:column="32"> <block pos:line="217" pos:column="33">{
		<expr_stmt><expr><call><name pos:line="218" pos:column="17">write_int<pos:position pos:line="218" pos:column="26"/></name><argument_list pos:line="218" pos:column="26">(<argument><expr><name pos:line="218" pos:column="27">f_out<pos:position pos:line="218" pos:column="32"/></name></expr></argument>,<argument><expr><name pos:line="218" pos:column="33">i<pos:position pos:line="218" pos:column="34"/></name></expr></argument>)<pos:position pos:line="218" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="218" pos:column="36"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="219" pos:column="17">write_sum_head<pos:position pos:line="219" pos:column="31"/></name><argument_list pos:line="219" pos:column="31">(<argument><expr><name pos:line="219" pos:column="32">f_out<pos:position pos:line="219" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="219" pos:column="39">NULL<pos:position pos:line="219" pos:column="43"/></name></expr></argument>)<pos:position pos:line="219" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="219" pos:column="45"/></expr_stmt>
		<return pos:line="220" pos:column="17">return;<pos:position pos:line="220" pos:column="24"/></return>
	}<pos:position pos:line="221" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="223" pos:column="9">/* open the file */</comment>
	<expr_stmt><expr><name pos:line="224" pos:column="9">fd<pos:position pos:line="224" pos:column="11"/></name> <operator pos:line="224" pos:column="12">=<pos:position pos:line="224" pos:column="13"/></operator> <call><name pos:line="224" pos:column="14">do_open<pos:position pos:line="224" pos:column="21"/></name><argument_list pos:line="224" pos:column="21">(<argument><expr><name pos:line="224" pos:column="22">fnamecmp<pos:position pos:line="224" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="224" pos:column="32">O_RDONLY<pos:position pos:line="224" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="224" pos:column="42">0<pos:position pos:line="224" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="224" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="224" pos:column="45"/></expr_stmt>

	<if pos:line="226" pos:column="9">if <condition pos:line="226" pos:column="12">(<expr><name pos:line="226" pos:column="13">fd<pos:position pos:line="226" pos:column="15"/></name> <operator pos:line="226" pos:column="16">==<pos:position pos:line="226" pos:column="18"/></operator> <operator pos:line="226" pos:column="19">-<pos:position pos:line="226" pos:column="20"/></operator><literal type="number" pos:line="226" pos:column="20">1<pos:position pos:line="226" pos:column="21"/></literal></expr>)<pos:position pos:line="226" pos:column="22"/></condition><then pos:line="226" pos:column="22"> <block pos:line="226" pos:column="23">{
		<expr_stmt><expr><call><name pos:line="227" pos:column="17">rprintf<pos:position pos:line="227" pos:column="24"/></name><argument_list pos:line="227" pos:column="24">(<argument><expr><name pos:line="227" pos:column="25">FERROR<pos:position pos:line="227" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="227" pos:column="33">"failed to open %s, continuing: %s\n"<pos:position pos:line="227" pos:column="70"/></literal></expr></argument>,
			<argument><expr><call><name pos:line="228" pos:column="25">full_fname<pos:position pos:line="228" pos:column="35"/></name><argument_list pos:line="228" pos:column="35">(<argument><expr><name pos:line="228" pos:column="36">fnamecmp<pos:position pos:line="228" pos:column="44"/></name></expr></argument>)<pos:position pos:line="228" pos:column="45"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="228" pos:column="47">strerror<pos:position pos:line="228" pos:column="55"/></name><argument_list pos:line="228" pos:column="55">(<argument><expr><name pos:line="228" pos:column="56">errno<pos:position pos:line="228" pos:column="61"/></name></expr></argument>)<pos:position pos:line="228" pos:column="62"/></argument_list></call></expr></argument>)<pos:position pos:line="228" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="228" pos:column="64"/></expr_stmt>
		<comment type="block" pos:line="229" pos:column="17">/* pretend the file didn't exist */</comment>
		<if pos:line="230" pos:column="17">if <condition pos:line="230" pos:column="20">(<expr><name pos:line="230" pos:column="21">preserve_hard_links<pos:position pos:line="230" pos:column="40"/></name> <operator pos:line="230" pos:column="41">&amp;&amp;<pos:position pos:line="230" pos:column="51"/></operator> <call><name pos:line="230" pos:column="44">hard_link_check<pos:position pos:line="230" pos:column="59"/></name><argument_list pos:line="230" pos:column="59">(<argument><expr><name pos:line="230" pos:column="60">file<pos:position pos:line="230" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="230" pos:column="66">HL_SKIP<pos:position pos:line="230" pos:column="73"/></name></expr></argument>)<pos:position pos:line="230" pos:column="74"/></argument_list></call></expr>)<pos:position pos:line="230" pos:column="75"/></condition><then pos:line="230" pos:column="75">
			<block type="pseudo"><return pos:line="231" pos:column="25">return;<pos:position pos:line="231" pos:column="32"/></return></block></then></if>
		<expr_stmt><expr><call><name pos:line="232" pos:column="17">write_int<pos:position pos:line="232" pos:column="26"/></name><argument_list pos:line="232" pos:column="26">(<argument><expr><name pos:line="232" pos:column="27">f_out<pos:position pos:line="232" pos:column="32"/></name></expr></argument>,<argument><expr><name pos:line="232" pos:column="33">i<pos:position pos:line="232" pos:column="34"/></name></expr></argument>)<pos:position pos:line="232" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="232" pos:column="36"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="233" pos:column="17">write_sum_head<pos:position pos:line="233" pos:column="31"/></name><argument_list pos:line="233" pos:column="31">(<argument><expr><name pos:line="233" pos:column="32">f_out<pos:position pos:line="233" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="233" pos:column="39">NULL<pos:position pos:line="233" pos:column="43"/></name></expr></argument>)<pos:position pos:line="233" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="233" pos:column="45"/></expr_stmt>
		<return pos:line="234" pos:column="17">return;<pos:position pos:line="234" pos:column="24"/></return>
	}<pos:position pos:line="235" pos:column="10"/></block></then></if>

	<if pos:line="237" pos:column="9">if <condition pos:line="237" pos:column="12">(<expr><name><name pos:line="237" pos:column="13">st<pos:position pos:line="237" pos:column="15"/></name><operator pos:line="237" pos:column="15">.<pos:position pos:line="237" pos:column="16"/></operator><name pos:line="237" pos:column="16">st_size<pos:position pos:line="237" pos:column="23"/></name></name> <operator pos:line="237" pos:column="24">&gt;<pos:position pos:line="237" pos:column="28"/></operator> <literal type="number" pos:line="237" pos:column="26">0<pos:position pos:line="237" pos:column="27"/></literal></expr>)<pos:position pos:line="237" pos:column="28"/></condition><then pos:line="237" pos:column="28">
		<block type="pseudo"><expr_stmt><expr><name pos:line="238" pos:column="17">mapbuf<pos:position pos:line="238" pos:column="23"/></name> <operator pos:line="238" pos:column="24">=<pos:position pos:line="238" pos:column="25"/></operator> <call><name pos:line="238" pos:column="26">map_file<pos:position pos:line="238" pos:column="34"/></name><argument_list pos:line="238" pos:column="34">(<argument><expr><name pos:line="238" pos:column="35">fd<pos:position pos:line="238" pos:column="37"/></name></expr></argument>,<argument><expr><name><name pos:line="238" pos:column="38">st<pos:position pos:line="238" pos:column="40"/></name><operator pos:line="238" pos:column="40">.<pos:position pos:line="238" pos:column="41"/></operator><name pos:line="238" pos:column="41">st_size<pos:position pos:line="238" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="238" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="238" pos:column="50"/></expr_stmt></block></then>
	<else pos:line="239" pos:column="9">else
		<block type="pseudo"><expr_stmt><expr><name pos:line="240" pos:column="17">mapbuf<pos:position pos:line="240" pos:column="23"/></name> <operator pos:line="240" pos:column="24">=<pos:position pos:line="240" pos:column="25"/></operator> <name pos:line="240" pos:column="26">NULL<pos:position pos:line="240" pos:column="30"/></name></expr>;<pos:position pos:line="240" pos:column="31"/></expr_stmt></block></else></if>

	<if pos:line="242" pos:column="9">if <condition pos:line="242" pos:column="12">(<expr><name pos:line="242" pos:column="13">verbose<pos:position pos:line="242" pos:column="20"/></name> <operator pos:line="242" pos:column="21">&gt;<pos:position pos:line="242" pos:column="25"/></operator> <literal type="number" pos:line="242" pos:column="23">3<pos:position pos:line="242" pos:column="24"/></literal></expr>)<pos:position pos:line="242" pos:column="25"/></condition><then pos:line="242" pos:column="25"> <block pos:line="242" pos:column="26">{
		<expr_stmt><expr><call><name pos:line="243" pos:column="17">rprintf<pos:position pos:line="243" pos:column="24"/></name><argument_list pos:line="243" pos:column="24">(<argument><expr><name pos:line="243" pos:column="25">FINFO<pos:position pos:line="243" pos:column="30"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="243" pos:column="31">"gen mapped %s of size %.0f\n"<pos:position pos:line="243" pos:column="61"/></literal></expr></argument>, <argument><expr><name pos:line="243" pos:column="63">fnamecmp<pos:position pos:line="243" pos:column="71"/></name></expr></argument>,
			<argument><expr><operator pos:line="244" pos:column="25">(<pos:position pos:line="244" pos:column="26"/></operator><name pos:line="244" pos:column="26">double<pos:position pos:line="244" pos:column="32"/></name><operator pos:line="244" pos:column="32">)<pos:position pos:line="244" pos:column="33"/></operator><name><name pos:line="244" pos:column="33">st<pos:position pos:line="244" pos:column="35"/></name><operator pos:line="244" pos:column="35">.<pos:position pos:line="244" pos:column="36"/></operator><name pos:line="244" pos:column="36">st_size<pos:position pos:line="244" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="244" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="244" pos:column="45"/></expr_stmt>
	}<pos:position pos:line="245" pos:column="10"/></block></then></if>

	<if pos:line="247" pos:column="9">if <condition pos:line="247" pos:column="12">(<expr><name pos:line="247" pos:column="13">verbose<pos:position pos:line="247" pos:column="20"/></name> <operator pos:line="247" pos:column="21">&gt;<pos:position pos:line="247" pos:column="25"/></operator> <literal type="number" pos:line="247" pos:column="23">2<pos:position pos:line="247" pos:column="24"/></literal></expr>)<pos:position pos:line="247" pos:column="25"/></condition><then pos:line="247" pos:column="25">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="248" pos:column="17">rprintf<pos:position pos:line="248" pos:column="24"/></name><argument_list pos:line="248" pos:column="24">(<argument><expr><name pos:line="248" pos:column="25">FINFO<pos:position pos:line="248" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="248" pos:column="32">"generating and sending sums for %d\n"<pos:position pos:line="248" pos:column="70"/></literal></expr></argument>, <argument><expr><name pos:line="248" pos:column="72">i<pos:position pos:line="248" pos:column="73"/></name></expr></argument>)<pos:position pos:line="248" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="248" pos:column="75"/></expr_stmt></block></then></if>

	<expr_stmt><expr><call><name pos:line="250" pos:column="9">write_int<pos:position pos:line="250" pos:column="18"/></name><argument_list pos:line="250" pos:column="18">(<argument><expr><name pos:line="250" pos:column="19">f_out<pos:position pos:line="250" pos:column="24"/></name></expr></argument>,<argument><expr><name pos:line="250" pos:column="25">i<pos:position pos:line="250" pos:column="26"/></name></expr></argument>)<pos:position pos:line="250" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="250" pos:column="28"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="251" pos:column="9">generate_and_send_sums<pos:position pos:line="251" pos:column="31"/></name><argument_list pos:line="251" pos:column="31">(<argument><expr><name pos:line="251" pos:column="32">mapbuf<pos:position pos:line="251" pos:column="38"/></name></expr></argument>, <argument><expr><name><name pos:line="251" pos:column="40">st<pos:position pos:line="251" pos:column="42"/></name><operator pos:line="251" pos:column="42">.<pos:position pos:line="251" pos:column="43"/></operator><name pos:line="251" pos:column="43">st_size<pos:position pos:line="251" pos:column="50"/></name></name></expr></argument>, <argument><expr><name pos:line="251" pos:column="52">f_out<pos:position pos:line="251" pos:column="57"/></name></expr></argument>)<pos:position pos:line="251" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="251" pos:column="59"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="253" pos:column="9">close<pos:position pos:line="253" pos:column="14"/></name><argument_list pos:line="253" pos:column="14">(<argument><expr><name pos:line="253" pos:column="15">fd<pos:position pos:line="253" pos:column="17"/></name></expr></argument>)<pos:position pos:line="253" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="253" pos:column="19"/></expr_stmt>
	<if pos:line="254" pos:column="9">if <condition pos:line="254" pos:column="12">(<expr><name pos:line="254" pos:column="13">mapbuf<pos:position pos:line="254" pos:column="19"/></name></expr>)<pos:position pos:line="254" pos:column="20"/></condition><then pos:line="254" pos:column="20"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="254" pos:column="21">unmap_file<pos:position pos:line="254" pos:column="31"/></name><argument_list pos:line="254" pos:column="31">(<argument><expr><name pos:line="254" pos:column="32">mapbuf<pos:position pos:line="254" pos:column="38"/></name></expr></argument>)<pos:position pos:line="254" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="254" pos:column="40"/></expr_stmt></block></then></if>
}<pos:position pos:line="255" pos:column="2"/></block></function></unit>
