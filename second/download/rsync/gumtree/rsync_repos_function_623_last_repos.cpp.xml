<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_623_last_repos.cpp" pos:tabs="8"><function_decl><type><name pos:line="1" pos:column="1">uLong<pos:position pos:line="1" pos:column="6"/></name> <name pos:line="1" pos:column="7">ZEXPORT<pos:position pos:line="1" pos:column="14"/></name></type> <name pos:line="1" pos:column="15">adler32<pos:position pos:line="1" pos:column="22"/></name><parameter_list pos:line="1" pos:column="22">(<parameter><decl><type><name pos:line="1" pos:column="23">adler<pos:position pos:line="1" pos:column="28"/></name></type></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="30">buf<pos:position pos:line="1" pos:column="33"/></name></type></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="35">len<pos:position pos:line="1" pos:column="38"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="39"/></parameter_list>
    <decl_stmt><decl><type><name pos:line="2" pos:column="5">uLong<pos:position pos:line="2" pos:column="10"/></name></type> <name pos:line="2" pos:column="11">adler<pos:position pos:line="2" pos:column="16"/></name></decl>;<pos:position pos:line="2" pos:column="17"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="3" pos:column="5">const<pos:position pos:line="3" pos:column="10"/></specifier> <name pos:line="3" pos:column="11">Bytef<pos:position pos:line="3" pos:column="16"/></name> <modifier pos:line="3" pos:column="17">*<pos:position pos:line="3" pos:column="18"/></modifier></type><name pos:line="3" pos:column="18">buf<pos:position pos:line="3" pos:column="21"/></name></decl>;<pos:position pos:line="3" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">uInt<pos:position pos:line="4" pos:column="9"/></name></type> <name pos:line="4" pos:column="10">len<pos:position pos:line="4" pos:column="13"/></name></decl>;<pos:position pos:line="4" pos:column="14"/></decl_stmt>
<block pos:line="5" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">unsigned<pos:position pos:line="6" pos:column="13"/></name> <name pos:line="6" pos:column="14">long<pos:position pos:line="6" pos:column="18"/></name></type> <name pos:line="6" pos:column="19">sum2<pos:position pos:line="6" pos:column="23"/></name></decl>;<pos:position pos:line="6" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">unsigned<pos:position pos:line="7" pos:column="13"/></name></type> <name pos:line="7" pos:column="14">n<pos:position pos:line="7" pos:column="15"/></name></decl>;<pos:position pos:line="7" pos:column="16"/></decl_stmt>

    <comment type="block" pos:line="9" pos:column="5">/* split Adler-32 into component sums */</comment>
    <expr_stmt><expr><name pos:line="10" pos:column="5">sum2<pos:position pos:line="10" pos:column="9"/></name> <operator pos:line="10" pos:column="10">=<pos:position pos:line="10" pos:column="11"/></operator> <operator pos:line="10" pos:column="12">(<pos:position pos:line="10" pos:column="13"/></operator><name pos:line="10" pos:column="13">adler<pos:position pos:line="10" pos:column="18"/></name> <operator pos:line="10" pos:column="19">&gt;&gt;<pos:position pos:line="10" pos:column="24"/></operator> <literal type="number" pos:line="10" pos:column="22">16<pos:position pos:line="10" pos:column="24"/></literal><operator pos:line="10" pos:column="24">)<pos:position pos:line="10" pos:column="25"/></operator> <operator pos:line="10" pos:column="26">&amp;<pos:position pos:line="10" pos:column="31"/></operator> <literal type="number" pos:line="10" pos:column="28">0xffff<pos:position pos:line="10" pos:column="34"/></literal></expr>;<pos:position pos:line="10" pos:column="35"/></expr_stmt>
    <expr_stmt><expr><name pos:line="11" pos:column="5">adler<pos:position pos:line="11" pos:column="10"/></name> <operator pos:line="11" pos:column="11">&amp;=<pos:position pos:line="11" pos:column="17"/></operator> <literal type="number" pos:line="11" pos:column="14">0xffff<pos:position pos:line="11" pos:column="20"/></literal></expr>;<pos:position pos:line="11" pos:column="21"/></expr_stmt>

    <comment type="block" pos:line="13" pos:column="5">/* in case user likes doing a byte at a time, keep it fast */</comment>
    <if pos:line="14" pos:column="5">if <condition pos:line="14" pos:column="8">(<expr><name pos:line="14" pos:column="9">len<pos:position pos:line="14" pos:column="12"/></name> <operator pos:line="14" pos:column="13">==<pos:position pos:line="14" pos:column="15"/></operator> <literal type="number" pos:line="14" pos:column="16">1<pos:position pos:line="14" pos:column="17"/></literal></expr>)<pos:position pos:line="14" pos:column="18"/></condition><then pos:line="14" pos:column="18"> <block pos:line="14" pos:column="19">{
        <expr_stmt><expr><name pos:line="15" pos:column="9">adler<pos:position pos:line="15" pos:column="14"/></name> <operator pos:line="15" pos:column="15">+=<pos:position pos:line="15" pos:column="17"/></operator> <name><name pos:line="15" pos:column="18">buf<pos:position pos:line="15" pos:column="21"/></name><index pos:line="15" pos:column="21">[<expr><literal type="number" pos:line="15" pos:column="22">0<pos:position pos:line="15" pos:column="23"/></literal></expr>]<pos:position pos:line="15" pos:column="24"/></index></name></expr>;<pos:position pos:line="15" pos:column="25"/></expr_stmt>
        <if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><name pos:line="16" pos:column="13">adler<pos:position pos:line="16" pos:column="18"/></name> <operator pos:line="16" pos:column="19">&gt;=<pos:position pos:line="16" pos:column="24"/></operator> <name pos:line="16" pos:column="22">BASE<pos:position pos:line="16" pos:column="26"/></name></expr>)<pos:position pos:line="16" pos:column="27"/></condition><then pos:line="16" pos:column="27">
            <block type="pseudo"><expr_stmt><expr><name pos:line="17" pos:column="13">adler<pos:position pos:line="17" pos:column="18"/></name> <operator pos:line="17" pos:column="19">-=<pos:position pos:line="17" pos:column="21"/></operator> <name pos:line="17" pos:column="22">BASE<pos:position pos:line="17" pos:column="26"/></name></expr>;<pos:position pos:line="17" pos:column="27"/></expr_stmt></block></then></if>
        <expr_stmt><expr><name pos:line="18" pos:column="9">sum2<pos:position pos:line="18" pos:column="13"/></name> <operator pos:line="18" pos:column="14">+=<pos:position pos:line="18" pos:column="16"/></operator> <name pos:line="18" pos:column="17">adler<pos:position pos:line="18" pos:column="22"/></name></expr>;<pos:position pos:line="18" pos:column="23"/></expr_stmt>
        <if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><name pos:line="19" pos:column="13">sum2<pos:position pos:line="19" pos:column="17"/></name> <operator pos:line="19" pos:column="18">&gt;=<pos:position pos:line="19" pos:column="23"/></operator> <name pos:line="19" pos:column="21">BASE<pos:position pos:line="19" pos:column="25"/></name></expr>)<pos:position pos:line="19" pos:column="26"/></condition><then pos:line="19" pos:column="26">
            <block type="pseudo"><expr_stmt><expr><name pos:line="20" pos:column="13">sum2<pos:position pos:line="20" pos:column="17"/></name> <operator pos:line="20" pos:column="18">-=<pos:position pos:line="20" pos:column="20"/></operator> <name pos:line="20" pos:column="21">BASE<pos:position pos:line="20" pos:column="25"/></name></expr>;<pos:position pos:line="20" pos:column="26"/></expr_stmt></block></then></if>
        <return pos:line="21" pos:column="9">return <expr><name pos:line="21" pos:column="16">adler<pos:position pos:line="21" pos:column="21"/></name> <operator pos:line="21" pos:column="22">|<pos:position pos:line="21" pos:column="23"/></operator> <operator pos:line="21" pos:column="24">(<pos:position pos:line="21" pos:column="25"/></operator><name pos:line="21" pos:column="25">sum2<pos:position pos:line="21" pos:column="29"/></name> <operator pos:line="21" pos:column="30">&lt;&lt;<pos:position pos:line="21" pos:column="38"/></operator> <literal type="number" pos:line="21" pos:column="33">16<pos:position pos:line="21" pos:column="35"/></literal><operator pos:line="21" pos:column="35">)<pos:position pos:line="21" pos:column="36"/></operator></expr>;<pos:position pos:line="21" pos:column="37"/></return>
    }<pos:position pos:line="22" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="24" pos:column="5">/* initial Adler-32 value (deferred check for len == 1 speed) */</comment>
    <if pos:line="25" pos:column="5">if <condition pos:line="25" pos:column="8">(<expr><name pos:line="25" pos:column="9">buf<pos:position pos:line="25" pos:column="12"/></name> <operator pos:line="25" pos:column="13">==<pos:position pos:line="25" pos:column="15"/></operator> <name pos:line="25" pos:column="16">Z_NULL<pos:position pos:line="25" pos:column="22"/></name></expr>)<pos:position pos:line="25" pos:column="23"/></condition><then pos:line="25" pos:column="23">
        <block type="pseudo"><return pos:line="26" pos:column="9">return <expr><literal type="number" pos:line="26" pos:column="16">1L<pos:position pos:line="26" pos:column="18"/></literal></expr>;<pos:position pos:line="26" pos:column="19"/></return></block></then></if>

    <comment type="block" pos:line="28" pos:column="5">/* in case short lengths are provided, keep it somewhat fast */</comment>
    <if pos:line="29" pos:column="5">if <condition pos:line="29" pos:column="8">(<expr><name pos:line="29" pos:column="9">len<pos:position pos:line="29" pos:column="12"/></name> <operator pos:line="29" pos:column="13">&lt;<pos:position pos:line="29" pos:column="17"/></operator> <literal type="number" pos:line="29" pos:column="15">16<pos:position pos:line="29" pos:column="17"/></literal></expr>)<pos:position pos:line="29" pos:column="18"/></condition><then pos:line="29" pos:column="18"> <block pos:line="29" pos:column="19">{
        <while pos:line="30" pos:column="9">while <condition pos:line="30" pos:column="15">(<expr><name pos:line="30" pos:column="16">len<pos:position pos:line="30" pos:column="19"/></name><operator pos:line="30" pos:column="19">--<pos:position pos:line="30" pos:column="21"/></operator></expr>)<pos:position pos:line="30" pos:column="22"/></condition> <block pos:line="30" pos:column="23">{
            <expr_stmt><expr><name pos:line="31" pos:column="13">adler<pos:position pos:line="31" pos:column="18"/></name> <operator pos:line="31" pos:column="19">+=<pos:position pos:line="31" pos:column="21"/></operator> <operator pos:line="31" pos:column="22">*<pos:position pos:line="31" pos:column="23"/></operator><name pos:line="31" pos:column="23">buf<pos:position pos:line="31" pos:column="26"/></name><operator pos:line="31" pos:column="26">++<pos:position pos:line="31" pos:column="28"/></operator></expr>;<pos:position pos:line="31" pos:column="29"/></expr_stmt>
            <expr_stmt><expr><name pos:line="32" pos:column="13">sum2<pos:position pos:line="32" pos:column="17"/></name> <operator pos:line="32" pos:column="18">+=<pos:position pos:line="32" pos:column="20"/></operator> <name pos:line="32" pos:column="21">adler<pos:position pos:line="32" pos:column="26"/></name></expr>;<pos:position pos:line="32" pos:column="27"/></expr_stmt>
        }<pos:position pos:line="33" pos:column="10"/></block></while>
        <if pos:line="34" pos:column="9">if <condition pos:line="34" pos:column="12">(<expr><name pos:line="34" pos:column="13">adler<pos:position pos:line="34" pos:column="18"/></name> <operator pos:line="34" pos:column="19">&gt;=<pos:position pos:line="34" pos:column="24"/></operator> <name pos:line="34" pos:column="22">BASE<pos:position pos:line="34" pos:column="26"/></name></expr>)<pos:position pos:line="34" pos:column="27"/></condition><then pos:line="34" pos:column="27">
            <block type="pseudo"><expr_stmt><expr><name pos:line="35" pos:column="13">adler<pos:position pos:line="35" pos:column="18"/></name> <operator pos:line="35" pos:column="19">-=<pos:position pos:line="35" pos:column="21"/></operator> <name pos:line="35" pos:column="22">BASE<pos:position pos:line="35" pos:column="26"/></name></expr>;<pos:position pos:line="35" pos:column="27"/></expr_stmt></block></then></if>
        <expr_stmt><expr><call><name pos:line="36" pos:column="9">MOD28<pos:position pos:line="36" pos:column="14"/></name><argument_list pos:line="36" pos:column="14">(<argument><expr><name pos:line="36" pos:column="15">sum2<pos:position pos:line="36" pos:column="19"/></name></expr></argument>)<pos:position pos:line="36" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="21"/></expr_stmt>            <comment type="block" pos:line="36" pos:column="33">/* only added so many BASE's */</comment>
        <return pos:line="37" pos:column="9">return <expr><name pos:line="37" pos:column="16">adler<pos:position pos:line="37" pos:column="21"/></name> <operator pos:line="37" pos:column="22">|<pos:position pos:line="37" pos:column="23"/></operator> <operator pos:line="37" pos:column="24">(<pos:position pos:line="37" pos:column="25"/></operator><name pos:line="37" pos:column="25">sum2<pos:position pos:line="37" pos:column="29"/></name> <operator pos:line="37" pos:column="30">&lt;&lt;<pos:position pos:line="37" pos:column="38"/></operator> <literal type="number" pos:line="37" pos:column="33">16<pos:position pos:line="37" pos:column="35"/></literal><operator pos:line="37" pos:column="35">)<pos:position pos:line="37" pos:column="36"/></operator></expr>;<pos:position pos:line="37" pos:column="37"/></return>
    }<pos:position pos:line="38" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="40" pos:column="5">/* do length NMAX blocks -- requires just one modulo operation */</comment>
    <while pos:line="41" pos:column="5">while <condition pos:line="41" pos:column="11">(<expr><name pos:line="41" pos:column="12">len<pos:position pos:line="41" pos:column="15"/></name> <operator pos:line="41" pos:column="16">&gt;=<pos:position pos:line="41" pos:column="21"/></operator> <name pos:line="41" pos:column="19">NMAX<pos:position pos:line="41" pos:column="23"/></name></expr>)<pos:position pos:line="41" pos:column="24"/></condition> <block pos:line="41" pos:column="25">{
        <expr_stmt><expr><name pos:line="42" pos:column="9">len<pos:position pos:line="42" pos:column="12"/></name> <operator pos:line="42" pos:column="13">-=<pos:position pos:line="42" pos:column="15"/></operator> <name pos:line="42" pos:column="16">NMAX<pos:position pos:line="42" pos:column="20"/></name></expr>;<pos:position pos:line="42" pos:column="21"/></expr_stmt>
        <expr_stmt><expr><name pos:line="43" pos:column="9">n<pos:position pos:line="43" pos:column="10"/></name> <operator pos:line="43" pos:column="11">=<pos:position pos:line="43" pos:column="12"/></operator> <name pos:line="43" pos:column="13">NMAX<pos:position pos:line="43" pos:column="17"/></name> <operator pos:line="43" pos:column="18">/<pos:position pos:line="43" pos:column="19"/></operator> <literal type="number" pos:line="43" pos:column="20">16<pos:position pos:line="43" pos:column="22"/></literal></expr>;<pos:position pos:line="43" pos:column="23"/></expr_stmt>          <comment type="block" pos:line="43" pos:column="33">/* NMAX is divisible by 16 */</comment>
        <do pos:line="44" pos:column="9">do <block pos:line="44" pos:column="12">{
            <expr_stmt><expr><call><name pos:line="45" pos:column="13">DO16<pos:position pos:line="45" pos:column="17"/></name><argument_list pos:line="45" pos:column="17">(<argument><expr><name pos:line="45" pos:column="18">buf<pos:position pos:line="45" pos:column="21"/></name></expr></argument>)<pos:position pos:line="45" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="23"/></expr_stmt>          <comment type="block" pos:line="45" pos:column="33">/* 16 sums unrolled */</comment>
            <expr_stmt><expr><name pos:line="46" pos:column="13">buf<pos:position pos:line="46" pos:column="16"/></name> <operator pos:line="46" pos:column="17">+=<pos:position pos:line="46" pos:column="19"/></operator> <literal type="number" pos:line="46" pos:column="20">16<pos:position pos:line="46" pos:column="22"/></literal></expr>;<pos:position pos:line="46" pos:column="23"/></expr_stmt>
        }<pos:position pos:line="47" pos:column="10"/></block> while <condition pos:line="47" pos:column="17">(<expr><operator pos:line="47" pos:column="18">--<pos:position pos:line="47" pos:column="20"/></operator><name pos:line="47" pos:column="20">n<pos:position pos:line="47" pos:column="21"/></name></expr>)<pos:position pos:line="47" pos:column="22"/></condition>;<pos:position pos:line="47" pos:column="23"/></do>
        <expr_stmt><expr><call><name pos:line="48" pos:column="9">MOD<pos:position pos:line="48" pos:column="12"/></name><argument_list pos:line="48" pos:column="12">(<argument><expr><name pos:line="48" pos:column="13">adler<pos:position pos:line="48" pos:column="18"/></name></expr></argument>)<pos:position pos:line="48" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="20"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="49" pos:column="9">MOD<pos:position pos:line="49" pos:column="12"/></name><argument_list pos:line="49" pos:column="12">(<argument><expr><name pos:line="49" pos:column="13">sum2<pos:position pos:line="49" pos:column="17"/></name></expr></argument>)<pos:position pos:line="49" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="19"/></expr_stmt>
    }<pos:position pos:line="50" pos:column="6"/></block></while>

    <comment type="block" pos:line="52" pos:column="5">/* do remaining bytes (less than NMAX, still just one modulo) */</comment>
    <if pos:line="53" pos:column="5">if <condition pos:line="53" pos:column="8">(<expr><name pos:line="53" pos:column="9">len<pos:position pos:line="53" pos:column="12"/></name></expr>)<pos:position pos:line="53" pos:column="13"/></condition><then pos:line="53" pos:column="13"> <block pos:line="53" pos:column="14">{                  <comment type="block" pos:line="53" pos:column="33">/* avoid modulos if none remaining */</comment>
        <while pos:line="54" pos:column="9">while <condition pos:line="54" pos:column="15">(<expr><name pos:line="54" pos:column="16">len<pos:position pos:line="54" pos:column="19"/></name> <operator pos:line="54" pos:column="20">&gt;=<pos:position pos:line="54" pos:column="25"/></operator> <literal type="number" pos:line="54" pos:column="23">16<pos:position pos:line="54" pos:column="25"/></literal></expr>)<pos:position pos:line="54" pos:column="26"/></condition> <block pos:line="54" pos:column="27">{
            <expr_stmt><expr><name pos:line="55" pos:column="13">len<pos:position pos:line="55" pos:column="16"/></name> <operator pos:line="55" pos:column="17">-=<pos:position pos:line="55" pos:column="19"/></operator> <literal type="number" pos:line="55" pos:column="20">16<pos:position pos:line="55" pos:column="22"/></literal></expr>;<pos:position pos:line="55" pos:column="23"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="56" pos:column="13">DO16<pos:position pos:line="56" pos:column="17"/></name><argument_list pos:line="56" pos:column="17">(<argument><expr><name pos:line="56" pos:column="18">buf<pos:position pos:line="56" pos:column="21"/></name></expr></argument>)<pos:position pos:line="56" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="23"/></expr_stmt>
            <expr_stmt><expr><name pos:line="57" pos:column="13">buf<pos:position pos:line="57" pos:column="16"/></name> <operator pos:line="57" pos:column="17">+=<pos:position pos:line="57" pos:column="19"/></operator> <literal type="number" pos:line="57" pos:column="20">16<pos:position pos:line="57" pos:column="22"/></literal></expr>;<pos:position pos:line="57" pos:column="23"/></expr_stmt>
        }<pos:position pos:line="58" pos:column="10"/></block></while>
        <while pos:line="59" pos:column="9">while <condition pos:line="59" pos:column="15">(<expr><name pos:line="59" pos:column="16">len<pos:position pos:line="59" pos:column="19"/></name><operator pos:line="59" pos:column="19">--<pos:position pos:line="59" pos:column="21"/></operator></expr>)<pos:position pos:line="59" pos:column="22"/></condition> <block pos:line="59" pos:column="23">{
            <expr_stmt><expr><name pos:line="60" pos:column="13">adler<pos:position pos:line="60" pos:column="18"/></name> <operator pos:line="60" pos:column="19">+=<pos:position pos:line="60" pos:column="21"/></operator> <operator pos:line="60" pos:column="22">*<pos:position pos:line="60" pos:column="23"/></operator><name pos:line="60" pos:column="23">buf<pos:position pos:line="60" pos:column="26"/></name><operator pos:line="60" pos:column="26">++<pos:position pos:line="60" pos:column="28"/></operator></expr>;<pos:position pos:line="60" pos:column="29"/></expr_stmt>
            <expr_stmt><expr><name pos:line="61" pos:column="13">sum2<pos:position pos:line="61" pos:column="17"/></name> <operator pos:line="61" pos:column="18">+=<pos:position pos:line="61" pos:column="20"/></operator> <name pos:line="61" pos:column="21">adler<pos:position pos:line="61" pos:column="26"/></name></expr>;<pos:position pos:line="61" pos:column="27"/></expr_stmt>
        }<pos:position pos:line="62" pos:column="10"/></block></while>
        <expr_stmt><expr><call><name pos:line="63" pos:column="9">MOD<pos:position pos:line="63" pos:column="12"/></name><argument_list pos:line="63" pos:column="12">(<argument><expr><name pos:line="63" pos:column="13">adler<pos:position pos:line="63" pos:column="18"/></name></expr></argument>)<pos:position pos:line="63" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="20"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="64" pos:column="9">MOD<pos:position pos:line="64" pos:column="12"/></name><argument_list pos:line="64" pos:column="12">(<argument><expr><name pos:line="64" pos:column="13">sum2<pos:position pos:line="64" pos:column="17"/></name></expr></argument>)<pos:position pos:line="64" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="19"/></expr_stmt>
    }<pos:position pos:line="65" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="67" pos:column="5">/* return recombined sums */</comment>
    <return pos:line="68" pos:column="5">return <expr><name pos:line="68" pos:column="12">adler<pos:position pos:line="68" pos:column="17"/></name> <operator pos:line="68" pos:column="18">|<pos:position pos:line="68" pos:column="19"/></operator> <operator pos:line="68" pos:column="20">(<pos:position pos:line="68" pos:column="21"/></operator><name pos:line="68" pos:column="21">sum2<pos:position pos:line="68" pos:column="25"/></name> <operator pos:line="68" pos:column="26">&lt;&lt;<pos:position pos:line="68" pos:column="34"/></operator> <literal type="number" pos:line="68" pos:column="29">16<pos:position pos:line="68" pos:column="31"/></literal><operator pos:line="68" pos:column="31">)<pos:position pos:line="68" pos:column="32"/></operator></expr>;<pos:position pos:line="68" pos:column="33"/></return>
}<pos:position pos:line="69" pos:column="2"/></block></function_decl></unit>
