<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_234_rsync-3.0.4.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">NORETURN<pos:position pos:line="1" pos:column="9"/></name> <name pos:line="1" pos:column="10">void<pos:position pos:line="1" pos:column="14"/></name></type> <name pos:line="1" pos:column="15">_exit_cleanup<pos:position pos:line="1" pos:column="28"/></name><parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><name pos:line="1" pos:column="29">int<pos:position pos:line="1" pos:column="32"/></name></type> <name pos:line="1" pos:column="33">code<pos:position pos:line="1" pos:column="37"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="39">const<pos:position pos:line="1" pos:column="44"/></specifier> <name pos:line="1" pos:column="45">char<pos:position pos:line="1" pos:column="49"/></name> <modifier pos:line="1" pos:column="50">*<pos:position pos:line="1" pos:column="51"/></modifier></type><name pos:line="1" pos:column="51">file<pos:position pos:line="1" pos:column="55"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="57">int<pos:position pos:line="1" pos:column="60"/></name></type> <name pos:line="1" pos:column="61">line<pos:position pos:line="1" pos:column="65"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="66"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><specifier pos:line="3" pos:column="9">static<pos:position pos:line="3" pos:column="15"/></specifier> <type><name pos:line="3" pos:column="16">int<pos:position pos:line="3" pos:column="19"/></name></type> <name pos:line="3" pos:column="20">cleanup_step<pos:position pos:line="3" pos:column="32"/></name> <init pos:line="3" pos:column="33">= <expr><literal type="number" pos:line="3" pos:column="35">0<pos:position pos:line="3" pos:column="36"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="37"/></decl_stmt>
	<decl_stmt><decl><specifier pos:line="4" pos:column="9">static<pos:position pos:line="4" pos:column="15"/></specifier> <type><name pos:line="4" pos:column="16">int<pos:position pos:line="4" pos:column="19"/></name></type> <name pos:line="4" pos:column="20">exit_code<pos:position pos:line="4" pos:column="29"/></name> <init pos:line="4" pos:column="30">= <expr><literal type="number" pos:line="4" pos:column="32">0<pos:position pos:line="4" pos:column="33"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="34"/></decl_stmt>
	<decl_stmt><decl><specifier pos:line="5" pos:column="9">static<pos:position pos:line="5" pos:column="15"/></specifier> <type><name pos:line="5" pos:column="16">int<pos:position pos:line="5" pos:column="19"/></name></type> <name pos:line="5" pos:column="20">unmodified_code<pos:position pos:line="5" pos:column="35"/></name> <init pos:line="5" pos:column="36">= <expr><literal type="number" pos:line="5" pos:column="38">0<pos:position pos:line="5" pos:column="39"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="40"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="7" pos:column="9">SIGACTION<pos:position pos:line="7" pos:column="18"/></name><argument_list pos:line="7" pos:column="18">(<argument><expr><name pos:line="7" pos:column="19">SIGUSR1<pos:position pos:line="7" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="28">SIG_IGN<pos:position pos:line="7" pos:column="35"/></name></expr></argument>)<pos:position pos:line="7" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="37"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="8" pos:column="9">SIGACTION<pos:position pos:line="8" pos:column="18"/></name><argument_list pos:line="8" pos:column="18">(<argument><expr><name pos:line="8" pos:column="19">SIGUSR2<pos:position pos:line="8" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="28">SIG_IGN<pos:position pos:line="8" pos:column="35"/></name></expr></argument>)<pos:position pos:line="8" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="37"/></expr_stmt>

	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><name pos:line="10" pos:column="13">exit_code<pos:position pos:line="10" pos:column="22"/></name></expr>)<pos:position pos:line="10" pos:column="23"/></condition><then pos:line="10" pos:column="23"> <comment type="block" pos:line="10" pos:column="24">/* Preserve first error code when recursing. */</comment>
		<block type="pseudo"><expr_stmt><expr><name pos:line="11" pos:column="17">code<pos:position pos:line="11" pos:column="21"/></name> <operator pos:line="11" pos:column="22">=<pos:position pos:line="11" pos:column="23"/></operator> <name pos:line="11" pos:column="24">exit_code<pos:position pos:line="11" pos:column="33"/></name></expr>;<pos:position pos:line="11" pos:column="34"/></expr_stmt></block></then></if>

	<comment type="block" pos:line="13" pos:column="9">/* If this is the exit at the end of the run, the server side
	 * should not attempt to output a message (see log.c). */</comment>
	<if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><name pos:line="15" pos:column="13">am_server<pos:position pos:line="15" pos:column="22"/></name> <operator pos:line="15" pos:column="23">&amp;&amp;<pos:position pos:line="15" pos:column="33"/></operator> <name pos:line="15" pos:column="26">code<pos:position pos:line="15" pos:column="30"/></name> <operator pos:line="15" pos:column="31">==<pos:position pos:line="15" pos:column="33"/></operator> <literal type="number" pos:line="15" pos:column="34">0<pos:position pos:line="15" pos:column="35"/></literal></expr>)<pos:position pos:line="15" pos:column="36"/></condition><then pos:line="15" pos:column="36">
		<block type="pseudo"><expr_stmt><expr><name pos:line="16" pos:column="17">am_server<pos:position pos:line="16" pos:column="26"/></name> <operator pos:line="16" pos:column="27">=<pos:position pos:line="16" pos:column="28"/></operator> <literal type="number" pos:line="16" pos:column="29">2<pos:position pos:line="16" pos:column="30"/></literal></expr>;<pos:position pos:line="16" pos:column="31"/></expr_stmt></block></then></if>

	<comment type="block" pos:line="18" pos:column="9">/* Some of our actions might cause a recursive call back here, so we
	 * keep track of where we are in the cleanup and never repeat a step. */</comment>
	<switch pos:line="20" pos:column="9">switch <condition pos:line="20" pos:column="16">(<expr><name pos:line="20" pos:column="17">cleanup_step<pos:position pos:line="20" pos:column="29"/></name></expr>)<pos:position pos:line="20" pos:column="30"/></condition> <block pos:line="20" pos:column="31">{
<cpp:include pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">include<pos:position pos:line="21" pos:column="9"/></cpp:directive> <cpp:file pos:line="21" pos:column="10">"case_N.h"<pos:position pos:line="21" pos:column="20"/></cpp:file></cpp:include> <comment type="block" pos:line="21" pos:column="21">/* case 0: cleanup_step++; */</comment>

		<expr_stmt><expr><name pos:line="23" pos:column="17">exit_code<pos:position pos:line="23" pos:column="26"/></name> <operator pos:line="23" pos:column="27">=<pos:position pos:line="23" pos:column="28"/></operator> <name pos:line="23" pos:column="29">unmodified_code<pos:position pos:line="23" pos:column="44"/></name> <operator pos:line="23" pos:column="45">=<pos:position pos:line="23" pos:column="46"/></operator> <name pos:line="23" pos:column="47">code<pos:position pos:line="23" pos:column="51"/></name></expr>;<pos:position pos:line="23" pos:column="52"/></expr_stmt>

		<if pos:line="25" pos:column="17">if <condition pos:line="25" pos:column="20">(<expr><name pos:line="25" pos:column="21">verbose<pos:position pos:line="25" pos:column="28"/></name> <operator pos:line="25" pos:column="29">&gt;<pos:position pos:line="25" pos:column="33"/></operator> <literal type="number" pos:line="25" pos:column="31">3<pos:position pos:line="25" pos:column="32"/></literal></expr>)<pos:position pos:line="25" pos:column="33"/></condition><then pos:line="25" pos:column="33"> <block pos:line="25" pos:column="34">{
			<expr_stmt><expr><call><name pos:line="26" pos:column="25">rprintf<pos:position pos:line="26" pos:column="32"/></name><argument_list pos:line="26" pos:column="32">(<argument><expr><name pos:line="26" pos:column="33">FINFO<pos:position pos:line="26" pos:column="38"/></name></expr></argument>,
				<argument><expr><literal type="string" pos:line="27" pos:column="33">"_exit_cleanup(code=%d, file=%s, line=%d): entered\n"<pos:position pos:line="27" pos:column="86"/></literal></expr></argument>,
				<argument><expr><name pos:line="28" pos:column="33">code<pos:position pos:line="28" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="39">file<pos:position pos:line="28" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="45">line<pos:position pos:line="28" pos:column="49"/></name></expr></argument>)<pos:position pos:line="28" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="51"/></expr_stmt>
		}<pos:position pos:line="29" pos:column="18"/></block></then></if>

		<comment type="block" pos:line="31" pos:column="17">/* FALLTHROUGH */</comment>
<cpp:include pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">include<pos:position pos:line="32" pos:column="9"/></cpp:directive> <cpp:file pos:line="32" pos:column="10">"case_N.h"<pos:position pos:line="32" pos:column="20"/></cpp:file></cpp:include>

		<if pos:line="34" pos:column="17">if <condition pos:line="34" pos:column="20">(<expr><name pos:line="34" pos:column="21">cleanup_child_pid<pos:position pos:line="34" pos:column="38"/></name> <operator pos:line="34" pos:column="39">!=<pos:position pos:line="34" pos:column="41"/></operator> <operator pos:line="34" pos:column="42">-<pos:position pos:line="34" pos:column="43"/></operator><literal type="number" pos:line="34" pos:column="43">1<pos:position pos:line="34" pos:column="44"/></literal></expr>)<pos:position pos:line="34" pos:column="45"/></condition><then pos:line="34" pos:column="45"> <block pos:line="34" pos:column="46">{
			<decl_stmt><decl><type><name pos:line="35" pos:column="25">int<pos:position pos:line="35" pos:column="28"/></name></type> <name pos:line="35" pos:column="29">status<pos:position pos:line="35" pos:column="35"/></name></decl>;<pos:position pos:line="35" pos:column="36"/></decl_stmt>
			<decl_stmt><decl><type><name pos:line="36" pos:column="25">int<pos:position pos:line="36" pos:column="28"/></name></type> <name pos:line="36" pos:column="29">pid<pos:position pos:line="36" pos:column="32"/></name> <init pos:line="36" pos:column="33">= <expr><call><name pos:line="36" pos:column="35">wait_process<pos:position pos:line="36" pos:column="47"/></name><argument_list pos:line="36" pos:column="47">(<argument><expr><name pos:line="36" pos:column="48">cleanup_child_pid<pos:position pos:line="36" pos:column="65"/></name></expr></argument>, <argument><expr><operator pos:line="36" pos:column="67">&amp;<pos:position pos:line="36" pos:column="72"/></operator><name pos:line="36" pos:column="68">status<pos:position pos:line="36" pos:column="74"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="76">WNOHANG<pos:position pos:line="36" pos:column="83"/></name></expr></argument>)<pos:position pos:line="36" pos:column="84"/></argument_list></call></expr></init></decl>;<pos:position pos:line="36" pos:column="85"/></decl_stmt>
			<if pos:line="37" pos:column="25">if <condition pos:line="37" pos:column="28">(<expr><name pos:line="37" pos:column="29">pid<pos:position pos:line="37" pos:column="32"/></name> <operator pos:line="37" pos:column="33">==<pos:position pos:line="37" pos:column="35"/></operator> <name pos:line="37" pos:column="36">cleanup_child_pid<pos:position pos:line="37" pos:column="53"/></name></expr>)<pos:position pos:line="37" pos:column="54"/></condition><then pos:line="37" pos:column="54"> <block pos:line="37" pos:column="55">{
				<expr_stmt><expr><name pos:line="38" pos:column="33">status<pos:position pos:line="38" pos:column="39"/></name> <operator pos:line="38" pos:column="40">=<pos:position pos:line="38" pos:column="41"/></operator> <call><name pos:line="38" pos:column="42">WEXITSTATUS<pos:position pos:line="38" pos:column="53"/></name><argument_list pos:line="38" pos:column="53">(<argument><expr><name pos:line="38" pos:column="54">status<pos:position pos:line="38" pos:column="60"/></name></expr></argument>)<pos:position pos:line="38" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="62"/></expr_stmt>
				<if pos:line="39" pos:column="33">if <condition pos:line="39" pos:column="36">(<expr><name pos:line="39" pos:column="37">status<pos:position pos:line="39" pos:column="43"/></name> <operator pos:line="39" pos:column="44">&gt;<pos:position pos:line="39" pos:column="48"/></operator> <name pos:line="39" pos:column="46">code<pos:position pos:line="39" pos:column="50"/></name></expr>)<pos:position pos:line="39" pos:column="51"/></condition><then pos:line="39" pos:column="51">
					<block type="pseudo"><expr_stmt><expr><name pos:line="40" pos:column="41">code<pos:position pos:line="40" pos:column="45"/></name> <operator pos:line="40" pos:column="46">=<pos:position pos:line="40" pos:column="47"/></operator> <name pos:line="40" pos:column="48">exit_code<pos:position pos:line="40" pos:column="57"/></name> <operator pos:line="40" pos:column="58">=<pos:position pos:line="40" pos:column="59"/></operator> <name pos:line="40" pos:column="60">status<pos:position pos:line="40" pos:column="66"/></name></expr>;<pos:position pos:line="40" pos:column="67"/></expr_stmt></block></then></if>
			}<pos:position pos:line="41" pos:column="26"/></block></then></if>
		}<pos:position pos:line="42" pos:column="18"/></block></then></if>

		<comment type="block" pos:line="44" pos:column="17">/* FALLTHROUGH */</comment>
<cpp:include pos:line="45" pos:column="1">#<cpp:directive pos:line="45" pos:column="2">include<pos:position pos:line="45" pos:column="9"/></cpp:directive> <cpp:file pos:line="45" pos:column="10">"case_N.h"<pos:position pos:line="45" pos:column="20"/></cpp:file></cpp:include>

		<if pos:line="47" pos:column="17">if <condition pos:line="47" pos:column="20">(<expr><name pos:line="47" pos:column="21">cleanup_got_literal<pos:position pos:line="47" pos:column="40"/></name> <operator pos:line="47" pos:column="41">&amp;&amp;<pos:position pos:line="47" pos:column="51"/></operator> <name pos:line="47" pos:column="44">cleanup_fname<pos:position pos:line="47" pos:column="57"/></name> <operator pos:line="47" pos:column="58">&amp;&amp;<pos:position pos:line="47" pos:column="68"/></operator> <name pos:line="47" pos:column="61">cleanup_new_fname<pos:position pos:line="47" pos:column="78"/></name>
		 <operator pos:line="48" pos:column="18">&amp;&amp;<pos:position pos:line="48" pos:column="28"/></operator> <name pos:line="48" pos:column="21">keep_partial<pos:position pos:line="48" pos:column="33"/></name> <operator pos:line="48" pos:column="34">&amp;&amp;<pos:position pos:line="48" pos:column="44"/></operator> <call><name pos:line="48" pos:column="37">handle_partial_dir<pos:position pos:line="48" pos:column="55"/></name><argument_list pos:line="48" pos:column="55">(<argument><expr><name pos:line="48" pos:column="56">cleanup_new_fname<pos:position pos:line="48" pos:column="73"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="75">PDIR_CREATE<pos:position pos:line="48" pos:column="86"/></name></expr></argument>)<pos:position pos:line="48" pos:column="87"/></argument_list></call></expr>)<pos:position pos:line="48" pos:column="88"/></condition><then pos:line="48" pos:column="88"> <block pos:line="48" pos:column="89">{
			<decl_stmt><decl><type><specifier pos:line="49" pos:column="25">const<pos:position pos:line="49" pos:column="30"/></specifier> <name pos:line="49" pos:column="31">char<pos:position pos:line="49" pos:column="35"/></name> <modifier pos:line="49" pos:column="36">*<pos:position pos:line="49" pos:column="37"/></modifier></type><name pos:line="49" pos:column="37">fname<pos:position pos:line="49" pos:column="42"/></name> <init pos:line="49" pos:column="43">= <expr><name pos:line="49" pos:column="45">cleanup_fname<pos:position pos:line="49" pos:column="58"/></name></expr></init></decl>;<pos:position pos:line="49" pos:column="59"/></decl_stmt>
			<expr_stmt><expr><name pos:line="50" pos:column="25">cleanup_fname<pos:position pos:line="50" pos:column="38"/></name> <operator pos:line="50" pos:column="39">=<pos:position pos:line="50" pos:column="40"/></operator> <name pos:line="50" pos:column="41">NULL<pos:position pos:line="50" pos:column="45"/></name></expr>;<pos:position pos:line="50" pos:column="46"/></expr_stmt>
			<if pos:line="51" pos:column="25">if <condition pos:line="51" pos:column="28">(<expr><name pos:line="51" pos:column="29">cleanup_fd_r<pos:position pos:line="51" pos:column="41"/></name> <operator pos:line="51" pos:column="42">!=<pos:position pos:line="51" pos:column="44"/></operator> <operator pos:line="51" pos:column="45">-<pos:position pos:line="51" pos:column="46"/></operator><literal type="number" pos:line="51" pos:column="46">1<pos:position pos:line="51" pos:column="47"/></literal></expr>)<pos:position pos:line="51" pos:column="48"/></condition><then pos:line="51" pos:column="48">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="52" pos:column="33">close<pos:position pos:line="52" pos:column="38"/></name><argument_list pos:line="52" pos:column="38">(<argument><expr><name pos:line="52" pos:column="39">cleanup_fd_r<pos:position pos:line="52" pos:column="51"/></name></expr></argument>)<pos:position pos:line="52" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="53"/></expr_stmt></block></then></if>
			<if pos:line="53" pos:column="25">if <condition pos:line="53" pos:column="28">(<expr><name pos:line="53" pos:column="29">cleanup_fd_w<pos:position pos:line="53" pos:column="41"/></name> <operator pos:line="53" pos:column="42">!=<pos:position pos:line="53" pos:column="44"/></operator> <operator pos:line="53" pos:column="45">-<pos:position pos:line="53" pos:column="46"/></operator><literal type="number" pos:line="53" pos:column="46">1<pos:position pos:line="53" pos:column="47"/></literal></expr>)<pos:position pos:line="53" pos:column="48"/></condition><then pos:line="53" pos:column="48"> <block pos:line="53" pos:column="49">{
				<expr_stmt><expr><call><name pos:line="54" pos:column="33">flush_write_file<pos:position pos:line="54" pos:column="49"/></name><argument_list pos:line="54" pos:column="49">(<argument><expr><name pos:line="54" pos:column="50">cleanup_fd_w<pos:position pos:line="54" pos:column="62"/></name></expr></argument>)<pos:position pos:line="54" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="64"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="55" pos:column="33">close<pos:position pos:line="55" pos:column="38"/></name><argument_list pos:line="55" pos:column="38">(<argument><expr><name pos:line="55" pos:column="39">cleanup_fd_w<pos:position pos:line="55" pos:column="51"/></name></expr></argument>)<pos:position pos:line="55" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="53"/></expr_stmt>
			}<pos:position pos:line="56" pos:column="26"/></block></then></if>
			<expr_stmt><expr><call><name pos:line="57" pos:column="25">finish_transfer<pos:position pos:line="57" pos:column="40"/></name><argument_list pos:line="57" pos:column="40">(<argument><expr><name pos:line="57" pos:column="41">cleanup_new_fname<pos:position pos:line="57" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="60">fname<pos:position pos:line="57" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="67">NULL<pos:position pos:line="57" pos:column="71"/></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="73">NULL<pos:position pos:line="57" pos:column="77"/></name></expr></argument>,
					<argument><expr><name pos:line="58" pos:column="41">cleanup_file<pos:position pos:line="58" pos:column="53"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="58" pos:column="55">0<pos:position pos:line="58" pos:column="56"/></literal></expr></argument>, <argument><expr><operator pos:line="58" pos:column="58">!<pos:position pos:line="58" pos:column="59"/></operator><name pos:line="58" pos:column="59">partial_dir<pos:position pos:line="58" pos:column="70"/></name></expr></argument>)<pos:position pos:line="58" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="72"/></expr_stmt>
		}<pos:position pos:line="59" pos:column="18"/></block></then></if>

		<comment type="block" pos:line="61" pos:column="17">/* FALLTHROUGH */</comment>
<cpp:include pos:line="62" pos:column="1">#<cpp:directive pos:line="62" pos:column="2">include<pos:position pos:line="62" pos:column="9"/></cpp:directive> <cpp:file pos:line="62" pos:column="10">"case_N.h"<pos:position pos:line="62" pos:column="20"/></cpp:file></cpp:include>

		<expr_stmt><expr><call><name pos:line="64" pos:column="17">io_flush<pos:position pos:line="64" pos:column="25"/></name><argument_list pos:line="64" pos:column="25">(<argument><expr><name pos:line="64" pos:column="26">FULL_FLUSH<pos:position pos:line="64" pos:column="36"/></name></expr></argument>)<pos:position pos:line="64" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="38"/></expr_stmt>

		<comment type="block" pos:line="66" pos:column="17">/* FALLTHROUGH */</comment>
<cpp:include pos:line="67" pos:column="1">#<cpp:directive pos:line="67" pos:column="2">include<pos:position pos:line="67" pos:column="9"/></cpp:directive> <cpp:file pos:line="67" pos:column="10">"case_N.h"<pos:position pos:line="67" pos:column="20"/></cpp:file></cpp:include>

		<if pos:line="69" pos:column="17">if <condition pos:line="69" pos:column="20">(<expr><name pos:line="69" pos:column="21">cleanup_fname<pos:position pos:line="69" pos:column="34"/></name></expr>)<pos:position pos:line="69" pos:column="35"/></condition><then pos:line="69" pos:column="35">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="70" pos:column="25">do_unlink<pos:position pos:line="70" pos:column="34"/></name><argument_list pos:line="70" pos:column="34">(<argument><expr><name pos:line="70" pos:column="35">cleanup_fname<pos:position pos:line="70" pos:column="48"/></name></expr></argument>)<pos:position pos:line="70" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="50"/></expr_stmt></block></then></if>
		<if pos:line="71" pos:column="17">if <condition pos:line="71" pos:column="20">(<expr><name pos:line="71" pos:column="21">code<pos:position pos:line="71" pos:column="25"/></name></expr>)<pos:position pos:line="71" pos:column="26"/></condition><then pos:line="71" pos:column="26">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="72" pos:column="25">kill_all<pos:position pos:line="72" pos:column="33"/></name><argument_list pos:line="72" pos:column="33">(<argument><expr><name pos:line="72" pos:column="34">SIGUSR1<pos:position pos:line="72" pos:column="41"/></name></expr></argument>)<pos:position pos:line="72" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="43"/></expr_stmt></block></then></if>
		<if pos:line="73" pos:column="17">if <condition pos:line="73" pos:column="20">(<expr><name pos:line="73" pos:column="21">cleanup_pid<pos:position pos:line="73" pos:column="32"/></name> <operator pos:line="73" pos:column="33">&amp;&amp;<pos:position pos:line="73" pos:column="43"/></operator> <name pos:line="73" pos:column="36">cleanup_pid<pos:position pos:line="73" pos:column="47"/></name> <operator pos:line="73" pos:column="48">==<pos:position pos:line="73" pos:column="50"/></operator> <call><name pos:line="73" pos:column="51">getpid<pos:position pos:line="73" pos:column="57"/></name><argument_list pos:line="73" pos:column="57">()<pos:position pos:line="73" pos:column="59"/></argument_list></call></expr>)<pos:position pos:line="73" pos:column="60"/></condition><then pos:line="73" pos:column="60"> <block pos:line="73" pos:column="61">{
			<decl_stmt><decl><type><name pos:line="74" pos:column="25">char<pos:position pos:line="74" pos:column="29"/></name> <modifier pos:line="74" pos:column="30">*<pos:position pos:line="74" pos:column="31"/></modifier></type><name pos:line="74" pos:column="31">pidf<pos:position pos:line="74" pos:column="35"/></name> <init pos:line="74" pos:column="36">= <expr><call><name pos:line="74" pos:column="38">lp_pid_file<pos:position pos:line="74" pos:column="49"/></name><argument_list pos:line="74" pos:column="49">()<pos:position pos:line="74" pos:column="51"/></argument_list></call></expr></init></decl>;<pos:position pos:line="74" pos:column="52"/></decl_stmt>
			<if pos:line="75" pos:column="25">if <condition pos:line="75" pos:column="28">(<expr><name pos:line="75" pos:column="29">pidf<pos:position pos:line="75" pos:column="33"/></name> <operator pos:line="75" pos:column="34">&amp;&amp;<pos:position pos:line="75" pos:column="44"/></operator> <operator pos:line="75" pos:column="37">*<pos:position pos:line="75" pos:column="38"/></operator><name pos:line="75" pos:column="38">pidf<pos:position pos:line="75" pos:column="42"/></name></expr>)<pos:position pos:line="75" pos:column="43"/></condition><then pos:line="75" pos:column="43">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="76" pos:column="33">unlink<pos:position pos:line="76" pos:column="39"/></name><argument_list pos:line="76" pos:column="39">(<argument><expr><call><name pos:line="76" pos:column="40">lp_pid_file<pos:position pos:line="76" pos:column="51"/></name><argument_list pos:line="76" pos:column="51">()<pos:position pos:line="76" pos:column="53"/></argument_list></call></expr></argument>)<pos:position pos:line="76" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="55"/></expr_stmt></block></then></if>
		}<pos:position pos:line="77" pos:column="18"/></block></then></if>

		<if pos:line="79" pos:column="17">if <condition pos:line="79" pos:column="20">(<expr><name pos:line="79" pos:column="21">code<pos:position pos:line="79" pos:column="25"/></name> <operator pos:line="79" pos:column="26">==<pos:position pos:line="79" pos:column="28"/></operator> <literal type="number" pos:line="79" pos:column="29">0<pos:position pos:line="79" pos:column="30"/></literal></expr>)<pos:position pos:line="79" pos:column="31"/></condition><then pos:line="79" pos:column="31"> <block pos:line="79" pos:column="32">{
			<if pos:line="80" pos:column="25">if <condition pos:line="80" pos:column="28">(<expr><name pos:line="80" pos:column="29">io_error<pos:position pos:line="80" pos:column="37"/></name> <operator pos:line="80" pos:column="38">&amp;<pos:position pos:line="80" pos:column="43"/></operator> <name pos:line="80" pos:column="40">IOERR_DEL_LIMIT<pos:position pos:line="80" pos:column="55"/></name></expr>)<pos:position pos:line="80" pos:column="56"/></condition><then pos:line="80" pos:column="56">
				<block type="pseudo"><expr_stmt><expr><name pos:line="81" pos:column="33">code<pos:position pos:line="81" pos:column="37"/></name> <operator pos:line="81" pos:column="38">=<pos:position pos:line="81" pos:column="39"/></operator> <name pos:line="81" pos:column="40">exit_code<pos:position pos:line="81" pos:column="49"/></name> <operator pos:line="81" pos:column="50">=<pos:position pos:line="81" pos:column="51"/></operator> <name pos:line="81" pos:column="52">RERR_DEL_LIMIT<pos:position pos:line="81" pos:column="66"/></name></expr>;<pos:position pos:line="81" pos:column="67"/></expr_stmt></block></then></if>
			<if pos:line="82" pos:column="25">if <condition pos:line="82" pos:column="28">(<expr><name pos:line="82" pos:column="29">io_error<pos:position pos:line="82" pos:column="37"/></name> <operator pos:line="82" pos:column="38">&amp;<pos:position pos:line="82" pos:column="43"/></operator> <name pos:line="82" pos:column="40">IOERR_VANISHED<pos:position pos:line="82" pos:column="54"/></name></expr>)<pos:position pos:line="82" pos:column="55"/></condition><then pos:line="82" pos:column="55">
				<block type="pseudo"><expr_stmt><expr><name pos:line="83" pos:column="33">code<pos:position pos:line="83" pos:column="37"/></name> <operator pos:line="83" pos:column="38">=<pos:position pos:line="83" pos:column="39"/></operator> <name pos:line="83" pos:column="40">exit_code<pos:position pos:line="83" pos:column="49"/></name> <operator pos:line="83" pos:column="50">=<pos:position pos:line="83" pos:column="51"/></operator> <name pos:line="83" pos:column="52">RERR_VANISHED<pos:position pos:line="83" pos:column="65"/></name></expr>;<pos:position pos:line="83" pos:column="66"/></expr_stmt></block></then></if>
			<if pos:line="84" pos:column="25">if <condition pos:line="84" pos:column="28">(<expr><name pos:line="84" pos:column="29">io_error<pos:position pos:line="84" pos:column="37"/></name> <operator pos:line="84" pos:column="38">&amp;<pos:position pos:line="84" pos:column="43"/></operator> <name pos:line="84" pos:column="40">IOERR_GENERAL<pos:position pos:line="84" pos:column="53"/></name> <operator pos:line="84" pos:column="54">||<pos:position pos:line="84" pos:column="56"/></operator> <name pos:line="84" pos:column="57">got_xfer_error<pos:position pos:line="84" pos:column="71"/></name></expr>)<pos:position pos:line="84" pos:column="72"/></condition><then pos:line="84" pos:column="72">
				<block type="pseudo"><expr_stmt><expr><name pos:line="85" pos:column="33">code<pos:position pos:line="85" pos:column="37"/></name> <operator pos:line="85" pos:column="38">=<pos:position pos:line="85" pos:column="39"/></operator> <name pos:line="85" pos:column="40">exit_code<pos:position pos:line="85" pos:column="49"/></name> <operator pos:line="85" pos:column="50">=<pos:position pos:line="85" pos:column="51"/></operator> <name pos:line="85" pos:column="52">RERR_PARTIAL<pos:position pos:line="85" pos:column="64"/></name></expr>;<pos:position pos:line="85" pos:column="65"/></expr_stmt></block></then></if>
		}<pos:position pos:line="86" pos:column="18"/></block></then></if>

		<if pos:line="88" pos:column="17">if <condition pos:line="88" pos:column="20">(<expr><name pos:line="88" pos:column="21">code<pos:position pos:line="88" pos:column="25"/></name> <operator pos:line="88" pos:column="26">||<pos:position pos:line="88" pos:column="28"/></operator> <name pos:line="88" pos:column="29">am_daemon<pos:position pos:line="88" pos:column="38"/></name> <operator pos:line="88" pos:column="39">||<pos:position pos:line="88" pos:column="41"/></operator> <operator pos:line="88" pos:column="42">(<pos:position pos:line="88" pos:column="43"/></operator><name pos:line="88" pos:column="43">logfile_name<pos:position pos:line="88" pos:column="55"/></name> <operator pos:line="88" pos:column="56">&amp;&amp;<pos:position pos:line="88" pos:column="66"/></operator> <operator pos:line="88" pos:column="59">(<pos:position pos:line="88" pos:column="60"/></operator><name pos:line="88" pos:column="60">am_server<pos:position pos:line="88" pos:column="69"/></name> <operator pos:line="88" pos:column="70">||<pos:position pos:line="88" pos:column="72"/></operator> <operator pos:line="88" pos:column="73">!<pos:position pos:line="88" pos:column="74"/></operator><name pos:line="88" pos:column="74">verbose<pos:position pos:line="88" pos:column="81"/></name><operator pos:line="88" pos:column="81">)<pos:position pos:line="88" pos:column="82"/></operator><operator pos:line="88" pos:column="82">)<pos:position pos:line="88" pos:column="83"/></operator></expr>)<pos:position pos:line="88" pos:column="84"/></condition><then pos:line="88" pos:column="84">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="89" pos:column="25">log_exit<pos:position pos:line="89" pos:column="33"/></name><argument_list pos:line="89" pos:column="33">(<argument><expr><name pos:line="89" pos:column="34">code<pos:position pos:line="89" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="89" pos:column="40">file<pos:position pos:line="89" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="89" pos:column="46">line<pos:position pos:line="89" pos:column="50"/></name></expr></argument>)<pos:position pos:line="89" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="52"/></expr_stmt></block></then></if>

		<comment type="block" pos:line="91" pos:column="17">/* FALLTHROUGH */</comment>
<cpp:include pos:line="92" pos:column="1">#<cpp:directive pos:line="92" pos:column="2">include<pos:position pos:line="92" pos:column="9"/></cpp:directive> <cpp:file pos:line="92" pos:column="10">"case_N.h"<pos:position pos:line="92" pos:column="20"/></cpp:file></cpp:include>

		<if pos:line="94" pos:column="17">if <condition pos:line="94" pos:column="20">(<expr><name pos:line="94" pos:column="21">verbose<pos:position pos:line="94" pos:column="28"/></name> <operator pos:line="94" pos:column="29">&gt;<pos:position pos:line="94" pos:column="33"/></operator> <literal type="number" pos:line="94" pos:column="31">2<pos:position pos:line="94" pos:column="32"/></literal></expr>)<pos:position pos:line="94" pos:column="33"/></condition><then pos:line="94" pos:column="33"> <block pos:line="94" pos:column="34">{
			<expr_stmt><expr><call><name pos:line="95" pos:column="25">rprintf<pos:position pos:line="95" pos:column="32"/></name><argument_list pos:line="95" pos:column="32">(<argument><expr><name pos:line="95" pos:column="33">FINFO<pos:position pos:line="95" pos:column="38"/></name></expr></argument>,
				<argument><expr><literal type="string" pos:line="96" pos:column="33">"_exit_cleanup(code=%d, file=%s, line=%d): "<pos:position pos:line="96" pos:column="77"/></literal>
				<literal type="string" pos:line="97" pos:column="33">"about to call exit(%d)\n"<pos:position pos:line="97" pos:column="59"/></literal></expr></argument>,
				<argument><expr><name pos:line="98" pos:column="33">unmodified_code<pos:position pos:line="98" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="98" pos:column="50">file<pos:position pos:line="98" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="98" pos:column="56">line<pos:position pos:line="98" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="98" pos:column="62">code<pos:position pos:line="98" pos:column="66"/></name></expr></argument>)<pos:position pos:line="98" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="68"/></expr_stmt>
		}<pos:position pos:line="99" pos:column="18"/></block></then></if>

		<comment type="block" pos:line="101" pos:column="17">/* FALLTHROUGH */</comment>
<cpp:include pos:line="102" pos:column="1">#<cpp:directive pos:line="102" pos:column="2">include<pos:position pos:line="102" pos:column="9"/></cpp:directive> <cpp:file pos:line="102" pos:column="10">"case_N.h"<pos:position pos:line="102" pos:column="20"/></cpp:file></cpp:include>

		<if pos:line="104" pos:column="17">if <condition pos:line="104" pos:column="20">(<expr><name pos:line="104" pos:column="21">am_server<pos:position pos:line="104" pos:column="30"/></name> <operator pos:line="104" pos:column="31">&amp;&amp;<pos:position pos:line="104" pos:column="41"/></operator> <name pos:line="104" pos:column="34">code<pos:position pos:line="104" pos:column="38"/></name></expr>)<pos:position pos:line="104" pos:column="39"/></condition><then pos:line="104" pos:column="39">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="105" pos:column="25">msleep<pos:position pos:line="105" pos:column="31"/></name><argument_list pos:line="105" pos:column="31">(<argument><expr><literal type="number" pos:line="105" pos:column="32">100<pos:position pos:line="105" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="105" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="105" pos:column="37"/></expr_stmt></block></then></if>
		<expr_stmt><expr><call><name pos:line="106" pos:column="17">close_all<pos:position pos:line="106" pos:column="26"/></name><argument_list pos:line="106" pos:column="26">()<pos:position pos:line="106" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="106" pos:column="29"/></expr_stmt>

		<comment type="block" pos:line="108" pos:column="17">/* FALLTHROUGH */</comment>
	<default pos:line="109" pos:column="9">default:<pos:position pos:line="109" pos:column="17"/></default>
		<break pos:line="110" pos:column="17">break;<pos:position pos:line="110" pos:column="23"/></break>
	}<pos:position pos:line="111" pos:column="10"/></block></switch>

	<expr_stmt><expr><call><name pos:line="113" pos:column="9">exit<pos:position pos:line="113" pos:column="13"/></name><argument_list pos:line="113" pos:column="13">(<argument><expr><name pos:line="113" pos:column="14">code<pos:position pos:line="113" pos:column="18"/></name></expr></argument>)<pos:position pos:line="113" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="113" pos:column="20"/></expr_stmt>
}<pos:position pos:line="114" pos:column="2"/></block></function></unit>
