<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_50_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">sparse_end<pos:position pos:line="1" pos:column="15"/></name><parameter_list pos:line="1" pos:column="15">(<parameter><decl><type><name pos:line="1" pos:column="16">int<pos:position pos:line="1" pos:column="19"/></name></type> <name pos:line="1" pos:column="20">f<pos:position pos:line="1" pos:column="21"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="23">OFF_T<pos:position pos:line="1" pos:column="28"/></name></type> <name pos:line="1" pos:column="29">size<pos:position pos:line="1" pos:column="33"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="34"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">ret<pos:position pos:line="3" pos:column="16"/></name></decl>;<pos:position pos:line="3" pos:column="17"/></decl_stmt>

	<if pos:line="5" pos:column="9">if <condition pos:line="5" pos:column="12">(<expr><operator pos:line="5" pos:column="13">!<pos:position pos:line="5" pos:column="14"/></operator><name pos:line="5" pos:column="14">sparse_seek<pos:position pos:line="5" pos:column="25"/></name></expr>)<pos:position pos:line="5" pos:column="26"/></condition><then pos:line="5" pos:column="26">
		<block type="pseudo"><return pos:line="6" pos:column="17">return <expr><literal type="number" pos:line="6" pos:column="24">0<pos:position pos:line="6" pos:column="25"/></literal></expr>;<pos:position pos:line="6" pos:column="26"/></return></block></then></if>

<cpp:ifdef pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">ifdef<pos:position pos:line="8" pos:column="7"/></cpp:directive> <name pos:line="8" pos:column="8">HAVE_FTRUNCATE<pos:position pos:line="8" pos:column="22"/></name></cpp:ifdef>
	<expr_stmt><expr><name pos:line="9" pos:column="9">ret<pos:position pos:line="9" pos:column="12"/></name> <operator pos:line="9" pos:column="13">=<pos:position pos:line="9" pos:column="14"/></operator> <call><name pos:line="9" pos:column="15">do_ftruncate<pos:position pos:line="9" pos:column="27"/></name><argument_list pos:line="9" pos:column="27">(<argument><expr><name pos:line="9" pos:column="28">f<pos:position pos:line="9" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="31">size<pos:position pos:line="9" pos:column="35"/></name></expr></argument>)<pos:position pos:line="9" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="37"/></expr_stmt>
<cpp:else pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">else<pos:position pos:line="10" pos:column="6"/></cpp:directive></cpp:else>
	<if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><call><name pos:line="11" pos:column="13">do_lseek<pos:position pos:line="11" pos:column="21"/></name><argument_list pos:line="11" pos:column="21">(<argument><expr><name pos:line="11" pos:column="22">f<pos:position pos:line="11" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="25">sparse_seek<pos:position pos:line="11" pos:column="36"/></name><operator pos:line="11" pos:column="36">-<pos:position pos:line="11" pos:column="37"/></operator><literal type="number" pos:line="11" pos:column="37">1<pos:position pos:line="11" pos:column="38"/></literal></expr></argument>, <argument><expr><name pos:line="11" pos:column="40">SEEK_CUR<pos:position pos:line="11" pos:column="48"/></name></expr></argument>)<pos:position pos:line="11" pos:column="49"/></argument_list></call> <operator pos:line="11" pos:column="50">!=<pos:position pos:line="11" pos:column="52"/></operator> <name pos:line="11" pos:column="53">size<pos:position pos:line="11" pos:column="57"/></name><operator pos:line="11" pos:column="57">-<pos:position pos:line="11" pos:column="58"/></operator><literal type="number" pos:line="11" pos:column="58">1<pos:position pos:line="11" pos:column="59"/></literal></expr>)<pos:position pos:line="11" pos:column="60"/></condition><then pos:line="11" pos:column="60">
		<block type="pseudo"><expr_stmt><expr><name pos:line="12" pos:column="17">ret<pos:position pos:line="12" pos:column="20"/></name> <operator pos:line="12" pos:column="21">=<pos:position pos:line="12" pos:column="22"/></operator> <operator pos:line="12" pos:column="23">-<pos:position pos:line="12" pos:column="24"/></operator><literal type="number" pos:line="12" pos:column="24">1<pos:position pos:line="12" pos:column="25"/></literal></expr>;<pos:position pos:line="12" pos:column="26"/></expr_stmt></block></then>
	<else pos:line="13" pos:column="9">else <block pos:line="13" pos:column="14">{
		<do pos:line="14" pos:column="17">do <block pos:line="14" pos:column="20">{
			<expr_stmt><expr><name pos:line="15" pos:column="25">ret<pos:position pos:line="15" pos:column="28"/></name> <operator pos:line="15" pos:column="29">=<pos:position pos:line="15" pos:column="30"/></operator> <call><name pos:line="15" pos:column="31">write<pos:position pos:line="15" pos:column="36"/></name><argument_list pos:line="15" pos:column="36">(<argument><expr><name pos:line="15" pos:column="37">f<pos:position pos:line="15" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="40">""<pos:position pos:line="15" pos:column="42"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="15" pos:column="44">1<pos:position pos:line="15" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="47"/></expr_stmt>
		}<pos:position pos:line="16" pos:column="18"/></block> while <condition pos:line="16" pos:column="25">(<expr><name pos:line="16" pos:column="26">ret<pos:position pos:line="16" pos:column="29"/></name> <operator pos:line="16" pos:column="30">&lt;<pos:position pos:line="16" pos:column="34"/></operator> <literal type="number" pos:line="16" pos:column="32">0<pos:position pos:line="16" pos:column="33"/></literal> <operator pos:line="16" pos:column="34">&amp;&amp;<pos:position pos:line="16" pos:column="44"/></operator> <name pos:line="16" pos:column="37">errno<pos:position pos:line="16" pos:column="42"/></name> <operator pos:line="16" pos:column="43">==<pos:position pos:line="16" pos:column="45"/></operator> <name pos:line="16" pos:column="46">EINTR<pos:position pos:line="16" pos:column="51"/></name></expr>)<pos:position pos:line="16" pos:column="52"/></condition>;<pos:position pos:line="16" pos:column="53"/></do>

		<expr_stmt><expr><name pos:line="18" pos:column="17">ret<pos:position pos:line="18" pos:column="20"/></name> <operator pos:line="18" pos:column="21">=<pos:position pos:line="18" pos:column="22"/></operator> <ternary><condition><expr><name pos:line="18" pos:column="23">ret<pos:position pos:line="18" pos:column="26"/></name> <operator pos:line="18" pos:column="27">&lt;=<pos:position pos:line="18" pos:column="32"/></operator> <literal type="number" pos:line="18" pos:column="30">0<pos:position pos:line="18" pos:column="31"/></literal></expr> ?<pos:position pos:line="18" pos:column="33"/></condition><then pos:line="18" pos:column="33"> <expr><operator pos:line="18" pos:column="34">-<pos:position pos:line="18" pos:column="35"/></operator><literal type="number" pos:line="18" pos:column="35">1<pos:position pos:line="18" pos:column="36"/></literal></expr> <pos:position pos:line="18" pos:column="37"/></then><else pos:line="18" pos:column="37">: <expr><literal type="number" pos:line="18" pos:column="39">0<pos:position pos:line="18" pos:column="40"/></literal></expr></else></ternary></expr>;<pos:position pos:line="18" pos:column="41"/></expr_stmt>
	}<pos:position pos:line="19" pos:column="10"/></block></else></if>
<cpp:endif pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">endif<pos:position pos:line="20" pos:column="7"/></cpp:directive></cpp:endif>

	<expr_stmt><expr><name pos:line="22" pos:column="9">sparse_seek<pos:position pos:line="22" pos:column="20"/></name> <operator pos:line="22" pos:column="21">=<pos:position pos:line="22" pos:column="22"/></operator> <literal type="number" pos:line="22" pos:column="23">0<pos:position pos:line="22" pos:column="24"/></literal></expr>;<pos:position pos:line="22" pos:column="25"/></expr_stmt>

	<return pos:line="24" pos:column="9">return <expr><name pos:line="24" pos:column="16">ret<pos:position pos:line="24" pos:column="19"/></name></expr>;<pos:position pos:line="24" pos:column="20"/></return>
}<pos:position pos:line="25" pos:column="2"/></block></function></unit>
