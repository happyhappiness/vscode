<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_189_rsync-2.6.8.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">_exit_cleanup<pos:position pos:line="1" pos:column="19"/></name><parameter_list pos:line="1" pos:column="19">(<parameter><decl><type><name pos:line="1" pos:column="20">int<pos:position pos:line="1" pos:column="23"/></name></type> <name pos:line="1" pos:column="24">code<pos:position pos:line="1" pos:column="28"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="30">const<pos:position pos:line="1" pos:column="35"/></specifier> <name pos:line="1" pos:column="36">char<pos:position pos:line="1" pos:column="40"/></name> <modifier pos:line="1" pos:column="41">*<pos:position pos:line="1" pos:column="42"/></modifier></type><name pos:line="1" pos:column="42">file<pos:position pos:line="1" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="48">int<pos:position pos:line="1" pos:column="51"/></name></type> <name pos:line="1" pos:column="52">line<pos:position pos:line="1" pos:column="56"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="57"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">ocode<pos:position pos:line="3" pos:column="18"/></name> <init pos:line="3" pos:column="19">= <expr><name pos:line="3" pos:column="21">code<pos:position pos:line="3" pos:column="25"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="26"/></decl_stmt>
	<decl_stmt><decl><specifier pos:line="4" pos:column="9">static<pos:position pos:line="4" pos:column="15"/></specifier> <type><name pos:line="4" pos:column="16">int<pos:position pos:line="4" pos:column="19"/></name></type> <name pos:line="4" pos:column="20">inside_cleanup<pos:position pos:line="4" pos:column="34"/></name> <init pos:line="4" pos:column="35">= <expr><literal type="number" pos:line="4" pos:column="37">0<pos:position pos:line="4" pos:column="38"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="39"/></decl_stmt>

	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><name pos:line="6" pos:column="13">inside_cleanup<pos:position pos:line="6" pos:column="27"/></name> <operator pos:line="6" pos:column="28">&gt;<pos:position pos:line="6" pos:column="32"/></operator> <literal type="number" pos:line="6" pos:column="30">10<pos:position pos:line="6" pos:column="32"/></literal></expr>)<pos:position pos:line="6" pos:column="33"/></condition><then pos:line="6" pos:column="33"> <block pos:line="6" pos:column="34">{
		<comment type="block" pos:line="7" pos:column="17">/* prevent the occasional infinite recursion */</comment>
		<return pos:line="8" pos:column="17">return;<pos:position pos:line="8" pos:column="24"/></return>
	}<pos:position pos:line="9" pos:column="10"/></block></then></if>
	<expr_stmt><expr><name pos:line="10" pos:column="9">inside_cleanup<pos:position pos:line="10" pos:column="23"/></name><operator pos:line="10" pos:column="23">++<pos:position pos:line="10" pos:column="25"/></operator></expr>;<pos:position pos:line="10" pos:column="26"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="12" pos:column="9">SIGACTION<pos:position pos:line="12" pos:column="18"/></name><argument_list pos:line="12" pos:column="18">(<argument><expr><name pos:line="12" pos:column="19">SIGUSR1<pos:position pos:line="12" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="28">SIG_IGN<pos:position pos:line="12" pos:column="35"/></name></expr></argument>)<pos:position pos:line="12" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="37"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="13" pos:column="9">SIGACTION<pos:position pos:line="13" pos:column="18"/></name><argument_list pos:line="13" pos:column="18">(<argument><expr><name pos:line="13" pos:column="19">SIGUSR2<pos:position pos:line="13" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="28">SIG_IGN<pos:position pos:line="13" pos:column="35"/></name></expr></argument>)<pos:position pos:line="13" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="37"/></expr_stmt>

	<if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><name pos:line="15" pos:column="13">verbose<pos:position pos:line="15" pos:column="20"/></name> <operator pos:line="15" pos:column="21">&gt;<pos:position pos:line="15" pos:column="25"/></operator> <literal type="number" pos:line="15" pos:column="23">3<pos:position pos:line="15" pos:column="24"/></literal></expr>)<pos:position pos:line="15" pos:column="25"/></condition><then pos:line="15" pos:column="25"> <block pos:line="15" pos:column="26">{
		<expr_stmt><expr><call><name pos:line="16" pos:column="17">rprintf<pos:position pos:line="16" pos:column="24"/></name><argument_list pos:line="16" pos:column="24">(<argument><expr><name pos:line="16" pos:column="25">FINFO<pos:position pos:line="16" pos:column="30"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="16" pos:column="31">"_exit_cleanup(code=%d, file=%s, line=%d): entered\n"<pos:position pos:line="16" pos:column="84"/></literal></expr></argument>,
			<argument><expr><name pos:line="17" pos:column="25">code<pos:position pos:line="17" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="31">file<pos:position pos:line="17" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="37">line<pos:position pos:line="17" pos:column="41"/></name></expr></argument>)<pos:position pos:line="17" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="43"/></expr_stmt>
	}<pos:position pos:line="18" pos:column="10"/></block></then></if>

	<if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><name pos:line="20" pos:column="13">cleanup_child_pid<pos:position pos:line="20" pos:column="30"/></name> <operator pos:line="20" pos:column="31">!=<pos:position pos:line="20" pos:column="33"/></operator> <operator pos:line="20" pos:column="34">-<pos:position pos:line="20" pos:column="35"/></operator><literal type="number" pos:line="20" pos:column="35">1<pos:position pos:line="20" pos:column="36"/></literal></expr>)<pos:position pos:line="20" pos:column="37"/></condition><then pos:line="20" pos:column="37"> <block pos:line="20" pos:column="38">{
		<decl_stmt><decl><type><name pos:line="21" pos:column="17">int<pos:position pos:line="21" pos:column="20"/></name></type> <name pos:line="21" pos:column="21">status<pos:position pos:line="21" pos:column="27"/></name></decl>;<pos:position pos:line="21" pos:column="28"/></decl_stmt>
		<if pos:line="22" pos:column="17">if <condition pos:line="22" pos:column="20">(<expr><call><name pos:line="22" pos:column="21">wait_process<pos:position pos:line="22" pos:column="33"/></name><argument_list pos:line="22" pos:column="33">(<argument><expr><name pos:line="22" pos:column="34">cleanup_child_pid<pos:position pos:line="22" pos:column="51"/></name></expr></argument>, <argument><expr><operator pos:line="22" pos:column="53">&amp;<pos:position pos:line="22" pos:column="58"/></operator><name pos:line="22" pos:column="54">status<pos:position pos:line="22" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="62">WNOHANG<pos:position pos:line="22" pos:column="69"/></name></expr></argument>)<pos:position pos:line="22" pos:column="70"/></argument_list></call>
		 <operator pos:line="23" pos:column="18">==<pos:position pos:line="23" pos:column="20"/></operator> <name pos:line="23" pos:column="21">cleanup_child_pid<pos:position pos:line="23" pos:column="38"/></name></expr>)<pos:position pos:line="23" pos:column="39"/></condition><then pos:line="23" pos:column="39"> <block pos:line="23" pos:column="40">{
			<expr_stmt><expr><name pos:line="24" pos:column="25">status<pos:position pos:line="24" pos:column="31"/></name> <operator pos:line="24" pos:column="32">=<pos:position pos:line="24" pos:column="33"/></operator> <call><name pos:line="24" pos:column="34">WEXITSTATUS<pos:position pos:line="24" pos:column="45"/></name><argument_list pos:line="24" pos:column="45">(<argument><expr><name pos:line="24" pos:column="46">status<pos:position pos:line="24" pos:column="52"/></name></expr></argument>)<pos:position pos:line="24" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="54"/></expr_stmt>
			<if pos:line="25" pos:column="25">if <condition pos:line="25" pos:column="28">(<expr><name pos:line="25" pos:column="29">status<pos:position pos:line="25" pos:column="35"/></name> <operator pos:line="25" pos:column="36">&gt;<pos:position pos:line="25" pos:column="40"/></operator> <name pos:line="25" pos:column="38">code<pos:position pos:line="25" pos:column="42"/></name></expr>)<pos:position pos:line="25" pos:column="43"/></condition><then pos:line="25" pos:column="43">
				<block type="pseudo"><expr_stmt><expr><name pos:line="26" pos:column="33">code<pos:position pos:line="26" pos:column="37"/></name> <operator pos:line="26" pos:column="38">=<pos:position pos:line="26" pos:column="39"/></operator> <name pos:line="26" pos:column="40">status<pos:position pos:line="26" pos:column="46"/></name></expr>;<pos:position pos:line="26" pos:column="47"/></expr_stmt></block></then></if>
		}<pos:position pos:line="27" pos:column="18"/></block></then></if>
	}<pos:position pos:line="28" pos:column="10"/></block></then></if>

	<if pos:line="30" pos:column="9">if <condition pos:line="30" pos:column="12">(<expr><name pos:line="30" pos:column="13">cleanup_got_literal<pos:position pos:line="30" pos:column="32"/></name> <operator pos:line="30" pos:column="33">&amp;&amp;<pos:position pos:line="30" pos:column="43"/></operator> <name pos:line="30" pos:column="36">cleanup_fname<pos:position pos:line="30" pos:column="49"/></name> <operator pos:line="30" pos:column="50">&amp;&amp;<pos:position pos:line="30" pos:column="60"/></operator> <name pos:line="30" pos:column="53">keep_partial<pos:position pos:line="30" pos:column="65"/></name>
	    <operator pos:line="31" pos:column="13">&amp;&amp;<pos:position pos:line="31" pos:column="23"/></operator> <call><name pos:line="31" pos:column="16">handle_partial_dir<pos:position pos:line="31" pos:column="34"/></name><argument_list pos:line="31" pos:column="34">(<argument><expr><name pos:line="31" pos:column="35">cleanup_new_fname<pos:position pos:line="31" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="54">PDIR_CREATE<pos:position pos:line="31" pos:column="65"/></name></expr></argument>)<pos:position pos:line="31" pos:column="66"/></argument_list></call></expr>)<pos:position pos:line="31" pos:column="67"/></condition><then pos:line="31" pos:column="67"> <block pos:line="31" pos:column="68">{
		<decl_stmt><decl><type><name pos:line="32" pos:column="17">char<pos:position pos:line="32" pos:column="21"/></name> <modifier pos:line="32" pos:column="22">*<pos:position pos:line="32" pos:column="23"/></modifier></type><name pos:line="32" pos:column="23">fname<pos:position pos:line="32" pos:column="28"/></name> <init pos:line="32" pos:column="29">= <expr><name pos:line="32" pos:column="31">cleanup_fname<pos:position pos:line="32" pos:column="44"/></name></expr></init></decl>;<pos:position pos:line="32" pos:column="45"/></decl_stmt>
		<expr_stmt><expr><name pos:line="33" pos:column="17">cleanup_fname<pos:position pos:line="33" pos:column="30"/></name> <operator pos:line="33" pos:column="31">=<pos:position pos:line="33" pos:column="32"/></operator> <name pos:line="33" pos:column="33">NULL<pos:position pos:line="33" pos:column="37"/></name></expr>;<pos:position pos:line="33" pos:column="38"/></expr_stmt>
		<if pos:line="34" pos:column="17">if <condition pos:line="34" pos:column="20">(<expr><name pos:line="34" pos:column="21">cleanup_fd_r<pos:position pos:line="34" pos:column="33"/></name> <operator pos:line="34" pos:column="34">!=<pos:position pos:line="34" pos:column="36"/></operator> <operator pos:line="34" pos:column="37">-<pos:position pos:line="34" pos:column="38"/></operator><literal type="number" pos:line="34" pos:column="38">1<pos:position pos:line="34" pos:column="39"/></literal></expr>)<pos:position pos:line="34" pos:column="40"/></condition><then pos:line="34" pos:column="40">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="35" pos:column="25">close<pos:position pos:line="35" pos:column="30"/></name><argument_list pos:line="35" pos:column="30">(<argument><expr><name pos:line="35" pos:column="31">cleanup_fd_r<pos:position pos:line="35" pos:column="43"/></name></expr></argument>)<pos:position pos:line="35" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="45"/></expr_stmt></block></then></if>
		<if pos:line="36" pos:column="17">if <condition pos:line="36" pos:column="20">(<expr><name pos:line="36" pos:column="21">cleanup_fd_w<pos:position pos:line="36" pos:column="33"/></name> <operator pos:line="36" pos:column="34">!=<pos:position pos:line="36" pos:column="36"/></operator> <operator pos:line="36" pos:column="37">-<pos:position pos:line="36" pos:column="38"/></operator><literal type="number" pos:line="36" pos:column="38">1<pos:position pos:line="36" pos:column="39"/></literal></expr>)<pos:position pos:line="36" pos:column="40"/></condition><then pos:line="36" pos:column="40"> <block pos:line="36" pos:column="41">{
			<expr_stmt><expr><call><name pos:line="37" pos:column="25">flush_write_file<pos:position pos:line="37" pos:column="41"/></name><argument_list pos:line="37" pos:column="41">(<argument><expr><name pos:line="37" pos:column="42">cleanup_fd_w<pos:position pos:line="37" pos:column="54"/></name></expr></argument>)<pos:position pos:line="37" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="56"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="38" pos:column="25">close<pos:position pos:line="38" pos:column="30"/></name><argument_list pos:line="38" pos:column="30">(<argument><expr><name pos:line="38" pos:column="31">cleanup_fd_w<pos:position pos:line="38" pos:column="43"/></name></expr></argument>)<pos:position pos:line="38" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="45"/></expr_stmt>
		}<pos:position pos:line="39" pos:column="18"/></block></then></if>
		<expr_stmt><expr><call><name pos:line="40" pos:column="17">finish_transfer<pos:position pos:line="40" pos:column="32"/></name><argument_list pos:line="40" pos:column="32">(<argument><expr><name pos:line="40" pos:column="33">cleanup_new_fname<pos:position pos:line="40" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="52">fname<pos:position pos:line="40" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="59">NULL<pos:position pos:line="40" pos:column="63"/></name></expr></argument>,
				<argument><expr><name pos:line="41" pos:column="33">cleanup_file<pos:position pos:line="41" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="41" pos:column="47">0<pos:position pos:line="41" pos:column="48"/></literal></expr></argument>, <argument><expr><operator pos:line="41" pos:column="50">!<pos:position pos:line="41" pos:column="51"/></operator><name pos:line="41" pos:column="51">partial_dir<pos:position pos:line="41" pos:column="62"/></name></expr></argument>)<pos:position pos:line="41" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="64"/></expr_stmt>
	}<pos:position pos:line="42" pos:column="10"/></block></then></if>
	<expr_stmt><expr><call><name pos:line="43" pos:column="9">io_flush<pos:position pos:line="43" pos:column="17"/></name><argument_list pos:line="43" pos:column="17">(<argument><expr><name pos:line="43" pos:column="18">FULL_FLUSH<pos:position pos:line="43" pos:column="28"/></name></expr></argument>)<pos:position pos:line="43" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="30"/></expr_stmt>
	<if pos:line="44" pos:column="9">if <condition pos:line="44" pos:column="12">(<expr><name pos:line="44" pos:column="13">cleanup_fname<pos:position pos:line="44" pos:column="26"/></name></expr>)<pos:position pos:line="44" pos:column="27"/></condition><then pos:line="44" pos:column="27">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="45" pos:column="17">do_unlink<pos:position pos:line="45" pos:column="26"/></name><argument_list pos:line="45" pos:column="26">(<argument><expr><name pos:line="45" pos:column="27">cleanup_fname<pos:position pos:line="45" pos:column="40"/></name></expr></argument>)<pos:position pos:line="45" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="42"/></expr_stmt></block></then></if>
	<if pos:line="46" pos:column="9">if <condition pos:line="46" pos:column="12">(<expr><name pos:line="46" pos:column="13">code<pos:position pos:line="46" pos:column="17"/></name></expr>)<pos:position pos:line="46" pos:column="18"/></condition><then pos:line="46" pos:column="18">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="47" pos:column="17">kill_all<pos:position pos:line="47" pos:column="25"/></name><argument_list pos:line="47" pos:column="25">(<argument><expr><name pos:line="47" pos:column="26">SIGUSR1<pos:position pos:line="47" pos:column="33"/></name></expr></argument>)<pos:position pos:line="47" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="35"/></expr_stmt></block></then></if>
	<if pos:line="48" pos:column="9">if <condition pos:line="48" pos:column="12">(<expr><name pos:line="48" pos:column="13">cleanup_pid<pos:position pos:line="48" pos:column="24"/></name> <operator pos:line="48" pos:column="25">&amp;&amp;<pos:position pos:line="48" pos:column="35"/></operator> <name pos:line="48" pos:column="28">cleanup_pid<pos:position pos:line="48" pos:column="39"/></name> <operator pos:line="48" pos:column="40">==<pos:position pos:line="48" pos:column="42"/></operator> <call><name pos:line="48" pos:column="43">getpid<pos:position pos:line="48" pos:column="49"/></name><argument_list pos:line="48" pos:column="49">()<pos:position pos:line="48" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="48" pos:column="52"/></condition><then pos:line="48" pos:column="52"> <block pos:line="48" pos:column="53">{
		<decl_stmt><decl><type><name pos:line="49" pos:column="17">char<pos:position pos:line="49" pos:column="21"/></name> <modifier pos:line="49" pos:column="22">*<pos:position pos:line="49" pos:column="23"/></modifier></type><name pos:line="49" pos:column="23">pidf<pos:position pos:line="49" pos:column="27"/></name> <init pos:line="49" pos:column="28">= <expr><call><name pos:line="49" pos:column="30">lp_pid_file<pos:position pos:line="49" pos:column="41"/></name><argument_list pos:line="49" pos:column="41">()<pos:position pos:line="49" pos:column="43"/></argument_list></call></expr></init></decl>;<pos:position pos:line="49" pos:column="44"/></decl_stmt>
		<if pos:line="50" pos:column="17">if <condition pos:line="50" pos:column="20">(<expr><name pos:line="50" pos:column="21">pidf<pos:position pos:line="50" pos:column="25"/></name> <operator pos:line="50" pos:column="26">&amp;&amp;<pos:position pos:line="50" pos:column="36"/></operator> <operator pos:line="50" pos:column="29">*<pos:position pos:line="50" pos:column="30"/></operator><name pos:line="50" pos:column="30">pidf<pos:position pos:line="50" pos:column="34"/></name></expr>)<pos:position pos:line="50" pos:column="35"/></condition><then pos:line="50" pos:column="35">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="51" pos:column="25">unlink<pos:position pos:line="51" pos:column="31"/></name><argument_list pos:line="51" pos:column="31">(<argument><expr><call><name pos:line="51" pos:column="32">lp_pid_file<pos:position pos:line="51" pos:column="43"/></name><argument_list pos:line="51" pos:column="43">()<pos:position pos:line="51" pos:column="45"/></argument_list></call></expr></argument>)<pos:position pos:line="51" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="47"/></expr_stmt></block></then></if>
	}<pos:position pos:line="52" pos:column="10"/></block></then></if>

	<if pos:line="54" pos:column="9">if <condition pos:line="54" pos:column="12">(<expr><name pos:line="54" pos:column="13">code<pos:position pos:line="54" pos:column="17"/></name> <operator pos:line="54" pos:column="18">==<pos:position pos:line="54" pos:column="20"/></operator> <literal type="number" pos:line="54" pos:column="21">0<pos:position pos:line="54" pos:column="22"/></literal></expr>)<pos:position pos:line="54" pos:column="23"/></condition><then pos:line="54" pos:column="23"> <block pos:line="54" pos:column="24">{
		<if pos:line="55" pos:column="17">if <condition pos:line="55" pos:column="20">(<expr><name pos:line="55" pos:column="21">io_error<pos:position pos:line="55" pos:column="29"/></name> <operator pos:line="55" pos:column="30">&amp;<pos:position pos:line="55" pos:column="35"/></operator> <name pos:line="55" pos:column="32">IOERR_DEL_LIMIT<pos:position pos:line="55" pos:column="47"/></name></expr>)<pos:position pos:line="55" pos:column="48"/></condition><then pos:line="55" pos:column="48">
			<block type="pseudo"><expr_stmt><expr><name pos:line="56" pos:column="25">code<pos:position pos:line="56" pos:column="29"/></name> <operator pos:line="56" pos:column="30">=<pos:position pos:line="56" pos:column="31"/></operator> <name pos:line="56" pos:column="32">RERR_DEL_LIMIT<pos:position pos:line="56" pos:column="46"/></name></expr>;<pos:position pos:line="56" pos:column="47"/></expr_stmt></block></then></if>
		<if pos:line="57" pos:column="17">if <condition pos:line="57" pos:column="20">(<expr><name pos:line="57" pos:column="21">io_error<pos:position pos:line="57" pos:column="29"/></name> <operator pos:line="57" pos:column="30">&amp;<pos:position pos:line="57" pos:column="35"/></operator> <name pos:line="57" pos:column="32">IOERR_VANISHED<pos:position pos:line="57" pos:column="46"/></name></expr>)<pos:position pos:line="57" pos:column="47"/></condition><then pos:line="57" pos:column="47">
			<block type="pseudo"><expr_stmt><expr><name pos:line="58" pos:column="25">code<pos:position pos:line="58" pos:column="29"/></name> <operator pos:line="58" pos:column="30">=<pos:position pos:line="58" pos:column="31"/></operator> <name pos:line="58" pos:column="32">RERR_VANISHED<pos:position pos:line="58" pos:column="45"/></name></expr>;<pos:position pos:line="58" pos:column="46"/></expr_stmt></block></then></if>
		<if pos:line="59" pos:column="17">if <condition pos:line="59" pos:column="20">(<expr><name pos:line="59" pos:column="21">io_error<pos:position pos:line="59" pos:column="29"/></name> <operator pos:line="59" pos:column="30">&amp;<pos:position pos:line="59" pos:column="35"/></operator> <name pos:line="59" pos:column="32">IOERR_GENERAL<pos:position pos:line="59" pos:column="45"/></name> <operator pos:line="59" pos:column="46">||<pos:position pos:line="59" pos:column="48"/></operator> <name pos:line="59" pos:column="49">log_got_error<pos:position pos:line="59" pos:column="62"/></name></expr>)<pos:position pos:line="59" pos:column="63"/></condition><then pos:line="59" pos:column="63">
			<block type="pseudo"><expr_stmt><expr><name pos:line="60" pos:column="25">code<pos:position pos:line="60" pos:column="29"/></name> <operator pos:line="60" pos:column="30">=<pos:position pos:line="60" pos:column="31"/></operator> <name pos:line="60" pos:column="32">RERR_PARTIAL<pos:position pos:line="60" pos:column="44"/></name></expr>;<pos:position pos:line="60" pos:column="45"/></expr_stmt></block></then></if>
	}<pos:position pos:line="61" pos:column="10"/></block></then></if>

	<if pos:line="63" pos:column="9">if <condition pos:line="63" pos:column="12">(<expr><name pos:line="63" pos:column="13">code<pos:position pos:line="63" pos:column="17"/></name></expr>)<pos:position pos:line="63" pos:column="18"/></condition><then pos:line="63" pos:column="18">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="64" pos:column="17">log_exit<pos:position pos:line="64" pos:column="25"/></name><argument_list pos:line="64" pos:column="25">(<argument><expr><name pos:line="64" pos:column="26">code<pos:position pos:line="64" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="32">file<pos:position pos:line="64" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="38">line<pos:position pos:line="64" pos:column="42"/></name></expr></argument>)<pos:position pos:line="64" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="44"/></expr_stmt></block></then></if>

	<if pos:line="66" pos:column="9">if <condition pos:line="66" pos:column="12">(<expr><name pos:line="66" pos:column="13">verbose<pos:position pos:line="66" pos:column="20"/></name> <operator pos:line="66" pos:column="21">&gt;<pos:position pos:line="66" pos:column="25"/></operator> <literal type="number" pos:line="66" pos:column="23">2<pos:position pos:line="66" pos:column="24"/></literal></expr>)<pos:position pos:line="66" pos:column="25"/></condition><then pos:line="66" pos:column="25"> <block pos:line="66" pos:column="26">{
		<expr_stmt><expr><call><name pos:line="67" pos:column="17">rprintf<pos:position pos:line="67" pos:column="24"/></name><argument_list pos:line="67" pos:column="24">(<argument><expr><name pos:line="67" pos:column="25">FINFO<pos:position pos:line="67" pos:column="30"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="67" pos:column="31">"_exit_cleanup(code=%d, file=%s, line=%d): about to call exit(%d)\n"<pos:position pos:line="67" pos:column="99"/></literal></expr></argument>,
			<argument><expr><name pos:line="68" pos:column="25">ocode<pos:position pos:line="68" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="68" pos:column="32">file<pos:position pos:line="68" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="68" pos:column="38">line<pos:position pos:line="68" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="68" pos:column="44">code<pos:position pos:line="68" pos:column="48"/></name></expr></argument>)<pos:position pos:line="68" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="50"/></expr_stmt>
	}<pos:position pos:line="69" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="71" pos:column="9">close_all<pos:position pos:line="71" pos:column="18"/></name><argument_list pos:line="71" pos:column="18">()<pos:position pos:line="71" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="21"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="72" pos:column="9">exit<pos:position pos:line="72" pos:column="13"/></name><argument_list pos:line="72" pos:column="13">(<argument><expr><name pos:line="72" pos:column="14">code<pos:position pos:line="72" pos:column="18"/></name></expr></argument>)<pos:position pos:line="72" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="20"/></expr_stmt>
}<pos:position pos:line="73" pos:column="2"/></block></function></unit>
