<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_703_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name pos:line="2" pos:column="1">main<pos:position pos:line="2" pos:column="5"/></name><parameter_list pos:line="2" pos:column="5">(<parameter><decl><type><name pos:line="2" pos:column="6">int<pos:position pos:line="2" pos:column="9"/></name></type> <name pos:line="2" pos:column="10">argc<pos:position pos:line="2" pos:column="14"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="16">char<pos:position pos:line="2" pos:column="20"/></name> <modifier pos:line="2" pos:column="21">*<pos:position pos:line="2" pos:column="22"/></modifier></type><name><name pos:line="2" pos:column="22">argv<pos:position pos:line="2" pos:column="26"/></name><index pos:line="2" pos:column="26">[]<pos:position pos:line="2" pos:column="28"/></index></name></decl></parameter>)<pos:position pos:line="2" pos:column="29"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">int<pos:position pos:line="4" pos:column="8"/></name></type> <name pos:line="4" pos:column="9">fd_file<pos:position pos:line="4" pos:column="16"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="18">len<pos:position pos:line="4" pos:column="21"/></name></decl>;<pos:position pos:line="4" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="5" pos:column="5">struct<pos:position pos:line="5" pos:column="11"/></name> <name pos:line="5" pos:column="12">timeval<pos:position pos:line="5" pos:column="19"/></name></name></type> <name pos:line="5" pos:column="20">tv<pos:position pos:line="5" pos:column="22"/></name></decl>;<pos:position pos:line="5" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">fd_set<pos:position pos:line="6" pos:column="11"/></name></type> <name pos:line="6" pos:column="12">fds<pos:position pos:line="6" pos:column="15"/></name></decl>;<pos:position pos:line="6" pos:column="16"/></decl_stmt>

    <expr_stmt><expr><name pos:line="8" pos:column="5">argv<pos:position pos:line="8" pos:column="9"/></name><operator pos:line="8" pos:column="9">++<pos:position pos:line="8" pos:column="11"/></operator></expr>;<pos:position pos:line="8" pos:column="12"/></expr_stmt>
    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><operator pos:line="9" pos:column="9">--<pos:position pos:line="9" pos:column="11"/></operator><name pos:line="9" pos:column="11">argc<pos:position pos:line="9" pos:column="15"/></name> <operator pos:line="9" pos:column="16">&amp;&amp;<pos:position pos:line="9" pos:column="26"/></operator> <name><name pos:line="9" pos:column="19">argv<pos:position pos:line="9" pos:column="23"/></name><index pos:line="9" pos:column="23">[<expr><literal type="number" pos:line="9" pos:column="24">0<pos:position pos:line="9" pos:column="25"/></literal></expr>]<pos:position pos:line="9" pos:column="26"/></index><index pos:line="9" pos:column="26">[<expr><literal type="number" pos:line="9" pos:column="27">0<pos:position pos:line="9" pos:column="28"/></literal></expr>]<pos:position pos:line="9" pos:column="29"/></index></name> <operator pos:line="9" pos:column="30">==<pos:position pos:line="9" pos:column="32"/></operator> <literal type="char" pos:line="9" pos:column="33">'-'<pos:position pos:line="9" pos:column="36"/></literal></expr>)<pos:position pos:line="9" pos:column="37"/></condition><then pos:line="9" pos:column="37"> <block pos:line="9" pos:column="38">{
	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><name><name pos:line="10" pos:column="13">argv<pos:position pos:line="10" pos:column="17"/></name><index pos:line="10" pos:column="17">[<expr><literal type="number" pos:line="10" pos:column="18">0<pos:position pos:line="10" pos:column="19"/></literal></expr>]<pos:position pos:line="10" pos:column="20"/></index><index pos:line="10" pos:column="20">[<expr><literal type="number" pos:line="10" pos:column="21">1<pos:position pos:line="10" pos:column="22"/></literal></expr>]<pos:position pos:line="10" pos:column="23"/></index></name> <operator pos:line="10" pos:column="24">==<pos:position pos:line="10" pos:column="26"/></operator> <literal type="char" pos:line="10" pos:column="27">'o'<pos:position pos:line="10" pos:column="30"/></literal></expr>)<pos:position pos:line="10" pos:column="31"/></condition><then pos:line="10" pos:column="31">
	    <block type="pseudo"><expr_stmt><expr><name pos:line="11" pos:column="13">save_data_from_program<pos:position pos:line="11" pos:column="35"/></name> <operator pos:line="11" pos:column="36">=<pos:position pos:line="11" pos:column="37"/></operator> <literal type="number" pos:line="11" pos:column="38">1<pos:position pos:line="11" pos:column="39"/></literal></expr>;<pos:position pos:line="11" pos:column="40"/></expr_stmt></block></then>
	<elseif pos:line="12" pos:column="9">else <if pos:line="12" pos:column="14">if <condition pos:line="12" pos:column="17">(<expr><name><name pos:line="12" pos:column="18">argv<pos:position pos:line="12" pos:column="22"/></name><index pos:line="12" pos:column="22">[<expr><literal type="number" pos:line="12" pos:column="23">0<pos:position pos:line="12" pos:column="24"/></literal></expr>]<pos:position pos:line="12" pos:column="25"/></index><index pos:line="12" pos:column="25">[<expr><literal type="number" pos:line="12" pos:column="26">1<pos:position pos:line="12" pos:column="27"/></literal></expr>]<pos:position pos:line="12" pos:column="28"/></index></name> <operator pos:line="12" pos:column="29">==<pos:position pos:line="12" pos:column="31"/></operator> <literal type="char" pos:line="12" pos:column="32">'i'<pos:position pos:line="12" pos:column="35"/></literal></expr>)<pos:position pos:line="12" pos:column="36"/></condition><then pos:line="12" pos:column="36">
	    <block type="pseudo"><expr_stmt><expr><name pos:line="13" pos:column="13">save_data_from_program<pos:position pos:line="13" pos:column="35"/></name> <operator pos:line="13" pos:column="36">=<pos:position pos:line="13" pos:column="37"/></operator> <literal type="number" pos:line="13" pos:column="38">0<pos:position pos:line="13" pos:column="39"/></literal></expr>;<pos:position pos:line="13" pos:column="40"/></expr_stmt></block></then></if></elseif>
	<else pos:line="14" pos:column="9">else <block pos:line="14" pos:column="14">{
	    <expr_stmt><expr><call><name pos:line="15" pos:column="13">fprintf<pos:position pos:line="15" pos:column="20"/></name><argument_list pos:line="15" pos:column="20">(<argument><expr><name pos:line="15" pos:column="21">stderr<pos:position pos:line="15" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="29">"Unknown option: %s\n"<pos:position pos:line="15" pos:column="51"/></literal></expr></argument>, <argument><expr><name><name pos:line="15" pos:column="53">argv<pos:position pos:line="15" pos:column="57"/></name><index pos:line="15" pos:column="57">[<expr><literal type="number" pos:line="15" pos:column="58">0<pos:position pos:line="15" pos:column="59"/></literal></expr>]<pos:position pos:line="15" pos:column="60"/></index></name></expr></argument>)<pos:position pos:line="15" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="62"/></expr_stmt>
	    <expr_stmt><expr><call><name pos:line="16" pos:column="13">exit<pos:position pos:line="16" pos:column="17"/></name><argument_list pos:line="16" pos:column="17">(<argument><expr><literal type="number" pos:line="16" pos:column="18">1<pos:position pos:line="16" pos:column="19"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="21"/></expr_stmt>
	}<pos:position pos:line="17" pos:column="10"/></block></else></if>
	<expr_stmt><expr><name pos:line="18" pos:column="9">argv<pos:position pos:line="18" pos:column="13"/></name><operator pos:line="18" pos:column="13">++<pos:position pos:line="18" pos:column="15"/></operator></expr>;<pos:position pos:line="18" pos:column="16"/></expr_stmt>
	<expr_stmt><expr><name pos:line="19" pos:column="9">argc<pos:position pos:line="19" pos:column="13"/></name><operator pos:line="19" pos:column="13">--<pos:position pos:line="19" pos:column="15"/></operator></expr>;<pos:position pos:line="19" pos:column="16"/></expr_stmt>
    }<pos:position pos:line="20" pos:column="6"/></block></then></if>
    <if pos:line="21" pos:column="5">if <condition pos:line="21" pos:column="8">(<expr><name pos:line="21" pos:column="9">argc<pos:position pos:line="21" pos:column="13"/></name> <operator pos:line="21" pos:column="14">&lt;<pos:position pos:line="21" pos:column="18"/></operator> <literal type="number" pos:line="21" pos:column="16">2<pos:position pos:line="21" pos:column="17"/></literal></expr>)<pos:position pos:line="21" pos:column="18"/></condition><then pos:line="21" pos:column="18"> <block pos:line="21" pos:column="19">{
	<expr_stmt><expr><call><name pos:line="22" pos:column="9">fprintf<pos:position pos:line="22" pos:column="16"/></name><argument_list pos:line="22" pos:column="16">(<argument><expr><name pos:line="22" pos:column="17">stderr<pos:position pos:line="22" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="22" pos:column="25">"Usage: savetransfer [-i|-o] OUTPUT_FILE PROGRAM [ARGS...]\n"<pos:position pos:line="22" pos:column="86"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="87"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="88"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="23" pos:column="9">fprintf<pos:position pos:line="23" pos:column="16"/></name><argument_list pos:line="23" pos:column="16">(<argument><expr><name pos:line="23" pos:column="17">stderr<pos:position pos:line="23" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="23" pos:column="25">"-i  Save the input going to PROGRAM to the OUTPUT_FILE\n"<pos:position pos:line="23" pos:column="83"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="85"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="24" pos:column="9">fprintf<pos:position pos:line="24" pos:column="16"/></name><argument_list pos:line="24" pos:column="16">(<argument><expr><name pos:line="24" pos:column="17">stderr<pos:position pos:line="24" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="24" pos:column="25">"-o  Save the output coming from PROGRAM to the OUTPUT_FILE\n"<pos:position pos:line="24" pos:column="87"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="88"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="89"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="25" pos:column="9">exit<pos:position pos:line="25" pos:column="13"/></name><argument_list pos:line="25" pos:column="13">(<argument><expr><literal type="number" pos:line="25" pos:column="14">1<pos:position pos:line="25" pos:column="15"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="17"/></expr_stmt>
    }<pos:position pos:line="26" pos:column="6"/></block></then></if>
    <if pos:line="27" pos:column="5">if <condition pos:line="27" pos:column="8">(<expr><operator pos:line="27" pos:column="9">(<pos:position pos:line="27" pos:column="10"/></operator><name pos:line="27" pos:column="10">fd_file<pos:position pos:line="27" pos:column="17"/></name> <operator pos:line="27" pos:column="18">=<pos:position pos:line="27" pos:column="19"/></operator> <call><name pos:line="27" pos:column="20">open<pos:position pos:line="27" pos:column="24"/></name><argument_list pos:line="27" pos:column="24">(<argument><expr><operator pos:line="27" pos:column="25">*<pos:position pos:line="27" pos:column="26"/></operator><name pos:line="27" pos:column="26">argv<pos:position pos:line="27" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="32">O_WRONLY<pos:position pos:line="27" pos:column="40"/></name><operator pos:line="27" pos:column="40">|<pos:position pos:line="27" pos:column="41"/></operator><name pos:line="27" pos:column="41">O_TRUNC<pos:position pos:line="27" pos:column="48"/></name><operator pos:line="27" pos:column="48">|<pos:position pos:line="27" pos:column="49"/></operator><name pos:line="27" pos:column="49">O_CREAT<pos:position pos:line="27" pos:column="56"/></name><operator pos:line="27" pos:column="56">|<pos:position pos:line="27" pos:column="57"/></operator><name pos:line="27" pos:column="57">O_BINARY<pos:position pos:line="27" pos:column="65"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="27" pos:column="67">0644<pos:position pos:line="27" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="72"/></argument_list></call><operator pos:line="27" pos:column="72">)<pos:position pos:line="27" pos:column="73"/></operator> <operator pos:line="27" pos:column="74">&lt;<pos:position pos:line="27" pos:column="78"/></operator> <literal type="number" pos:line="27" pos:column="76">0<pos:position pos:line="27" pos:column="77"/></literal></expr>)<pos:position pos:line="27" pos:column="78"/></condition><then pos:line="27" pos:column="78"> <block pos:line="27" pos:column="79">{
	<expr_stmt><expr><call><name pos:line="28" pos:column="9">fprintf<pos:position pos:line="28" pos:column="16"/></name><argument_list pos:line="28" pos:column="16">(<argument><expr><name pos:line="28" pos:column="17">stderr<pos:position pos:line="28" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="28" pos:column="25">"Unable to write to `%s': %s\n"<pos:position pos:line="28" pos:column="56"/></literal></expr></argument>, <argument><expr><operator pos:line="28" pos:column="58">*<pos:position pos:line="28" pos:column="59"/></operator><name pos:line="28" pos:column="59">argv<pos:position pos:line="28" pos:column="63"/></name></expr></argument>, <argument><expr><call><name pos:line="28" pos:column="65">strerror<pos:position pos:line="28" pos:column="73"/></name><argument_list pos:line="28" pos:column="73">(<argument><expr><name pos:line="28" pos:column="74">errno<pos:position pos:line="28" pos:column="79"/></name></expr></argument>)<pos:position pos:line="28" pos:column="80"/></argument_list></call></expr></argument>)<pos:position pos:line="28" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="82"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="29" pos:column="9">exit<pos:position pos:line="29" pos:column="13"/></name><argument_list pos:line="29" pos:column="13">(<argument><expr><literal type="number" pos:line="29" pos:column="14">1<pos:position pos:line="29" pos:column="15"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="17"/></expr_stmt>
    }<pos:position pos:line="30" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="31" pos:column="5">set_blocking<pos:position pos:line="31" pos:column="17"/></name><argument_list pos:line="31" pos:column="17">(<argument><expr><name pos:line="31" pos:column="18">fd_file<pos:position pos:line="31" pos:column="25"/></name></expr></argument>)<pos:position pos:line="31" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="27"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="33" pos:column="5">SIGACTION<pos:position pos:line="33" pos:column="14"/></name><argument_list pos:line="33" pos:column="14">(<argument><expr><name pos:line="33" pos:column="15">SIGPIPE<pos:position pos:line="33" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="24">SIG_IGN<pos:position pos:line="33" pos:column="31"/></name></expr></argument>)<pos:position pos:line="33" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="33"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="35" pos:column="5">run_program<pos:position pos:line="35" pos:column="16"/></name><argument_list pos:line="35" pos:column="16">(<argument><expr><name pos:line="35" pos:column="17">argv<pos:position pos:line="35" pos:column="21"/></name> <operator pos:line="35" pos:column="22">+<pos:position pos:line="35" pos:column="23"/></operator> <literal type="number" pos:line="35" pos:column="24">1<pos:position pos:line="35" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="27"/></expr_stmt>

<cpp:if pos:line="37" pos:column="1">#<cpp:directive pos:line="37" pos:column="2">if<pos:position pos:line="37" pos:column="4"/></cpp:directive> <expr><name pos:line="37" pos:column="5">defined<pos:position pos:line="37" pos:column="12"/></name> <name pos:line="37" pos:column="13">HAVE_SETMODE<pos:position pos:line="37" pos:column="25"/></name> <operator pos:line="37" pos:column="26">&amp;&amp;<pos:position pos:line="37" pos:column="36"/></operator> <name pos:line="37" pos:column="29">O_BINARY<pos:position pos:line="37" pos:column="37"/></name></expr></cpp:if>
    <expr_stmt><expr><call><name pos:line="38" pos:column="5">setmode<pos:position pos:line="38" pos:column="12"/></name><argument_list pos:line="38" pos:column="12">(<argument><expr><name pos:line="38" pos:column="13">STDIN_FILENO<pos:position pos:line="38" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="27">O_BINARY<pos:position pos:line="38" pos:column="35"/></name></expr></argument>)<pos:position pos:line="38" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="37"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="39" pos:column="5">setmode<pos:position pos:line="39" pos:column="12"/></name><argument_list pos:line="39" pos:column="12">(<argument><expr><name pos:line="39" pos:column="13">STDOUT_FILENO<pos:position pos:line="39" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="28">O_BINARY<pos:position pos:line="39" pos:column="36"/></name></expr></argument>)<pos:position pos:line="39" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="38"/></expr_stmt>
<cpp:endif pos:line="40" pos:column="1">#<cpp:directive pos:line="40" pos:column="2">endif<pos:position pos:line="40" pos:column="7"/></cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name pos:line="41" pos:column="5">set_nonblocking<pos:position pos:line="41" pos:column="20"/></name><argument_list pos:line="41" pos:column="20">(<argument><expr><name pos:line="41" pos:column="21">STDIN_FILENO<pos:position pos:line="41" pos:column="33"/></name></expr></argument>)<pos:position pos:line="41" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="35"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="42" pos:column="5">set_blocking<pos:position pos:line="42" pos:column="17"/></name><argument_list pos:line="42" pos:column="17">(<argument><expr><name pos:line="42" pos:column="18">STDOUT_FILENO<pos:position pos:line="42" pos:column="31"/></name></expr></argument>)<pos:position pos:line="42" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="33"/></expr_stmt>

    <while pos:line="44" pos:column="5">while <condition pos:line="44" pos:column="11">(<expr><literal type="number" pos:line="44" pos:column="12">1<pos:position pos:line="44" pos:column="13"/></literal></expr>)<pos:position pos:line="44" pos:column="14"/></condition> <block pos:line="44" pos:column="15">{
	<expr_stmt><expr><call><name pos:line="45" pos:column="9">FD_ZERO<pos:position pos:line="45" pos:column="16"/></name><argument_list pos:line="45" pos:column="16">(<argument><expr><operator pos:line="45" pos:column="17">&amp;<pos:position pos:line="45" pos:column="22"/></operator><name pos:line="45" pos:column="18">fds<pos:position pos:line="45" pos:column="21"/></name></expr></argument>)<pos:position pos:line="45" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="23"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="46" pos:column="9">FD_SET<pos:position pos:line="46" pos:column="15"/></name><argument_list pos:line="46" pos:column="15">(<argument><expr><name pos:line="46" pos:column="16">STDIN_FILENO<pos:position pos:line="46" pos:column="28"/></name></expr></argument>, <argument><expr><operator pos:line="46" pos:column="30">&amp;<pos:position pos:line="46" pos:column="35"/></operator><name pos:line="46" pos:column="31">fds<pos:position pos:line="46" pos:column="34"/></name></expr></argument>)<pos:position pos:line="46" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="36"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="47" pos:column="9">tv<pos:position pos:line="47" pos:column="11"/></name><operator pos:line="47" pos:column="11">.<pos:position pos:line="47" pos:column="12"/></operator><name pos:line="47" pos:column="12">tv_sec<pos:position pos:line="47" pos:column="18"/></name></name> <operator pos:line="47" pos:column="19">=<pos:position pos:line="47" pos:column="20"/></operator> <name pos:line="47" pos:column="21">TIMEOUT_SECONDS<pos:position pos:line="47" pos:column="36"/></name></expr>;<pos:position pos:line="47" pos:column="37"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="48" pos:column="9">tv<pos:position pos:line="48" pos:column="11"/></name><operator pos:line="48" pos:column="11">.<pos:position pos:line="48" pos:column="12"/></operator><name pos:line="48" pos:column="12">tv_usec<pos:position pos:line="48" pos:column="19"/></name></name> <operator pos:line="48" pos:column="20">=<pos:position pos:line="48" pos:column="21"/></operator> <literal type="number" pos:line="48" pos:column="22">0<pos:position pos:line="48" pos:column="23"/></literal></expr>;<pos:position pos:line="48" pos:column="24"/></expr_stmt>
	<if pos:line="49" pos:column="9">if <condition pos:line="49" pos:column="12">(<expr><operator pos:line="49" pos:column="13">!<pos:position pos:line="49" pos:column="14"/></operator><call><name pos:line="49" pos:column="14">select<pos:position pos:line="49" pos:column="20"/></name><argument_list pos:line="49" pos:column="20">(<argument><expr><name pos:line="49" pos:column="21">STDIN_FILENO<pos:position pos:line="49" pos:column="33"/></name><operator pos:line="49" pos:column="33">+<pos:position pos:line="49" pos:column="34"/></operator><literal type="number" pos:line="49" pos:column="34">1<pos:position pos:line="49" pos:column="35"/></literal></expr></argument>, <argument><expr><operator pos:line="49" pos:column="37">&amp;<pos:position pos:line="49" pos:column="42"/></operator><name pos:line="49" pos:column="38">fds<pos:position pos:line="49" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="43">NULL<pos:position pos:line="49" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="49">NULL<pos:position pos:line="49" pos:column="53"/></name></expr></argument>, <argument><expr><operator pos:line="49" pos:column="55">&amp;<pos:position pos:line="49" pos:column="60"/></operator><name pos:line="49" pos:column="56">tv<pos:position pos:line="49" pos:column="58"/></name></expr></argument>)<pos:position pos:line="49" pos:column="59"/></argument_list></call></expr>)<pos:position pos:line="49" pos:column="60"/></condition><then pos:line="49" pos:column="60">
	    <block type="pseudo"><break pos:line="50" pos:column="13">break;<pos:position pos:line="50" pos:column="19"/></break></block></then></if>
	<if pos:line="51" pos:column="9">if <condition pos:line="51" pos:column="12">(<expr><operator pos:line="51" pos:column="13">!<pos:position pos:line="51" pos:column="14"/></operator><call><name pos:line="51" pos:column="14">FD_ISSET<pos:position pos:line="51" pos:column="22"/></name><argument_list pos:line="51" pos:column="22">(<argument><expr><name pos:line="51" pos:column="23">STDIN_FILENO<pos:position pos:line="51" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="51" pos:column="37">&amp;<pos:position pos:line="51" pos:column="42"/></operator><name pos:line="51" pos:column="38">fds<pos:position pos:line="51" pos:column="41"/></name></expr></argument>)<pos:position pos:line="51" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="51" pos:column="43"/></condition><then pos:line="51" pos:column="43">
	    <block type="pseudo"><break pos:line="52" pos:column="13">break;<pos:position pos:line="52" pos:column="19"/></break></block></then></if>
	<if pos:line="53" pos:column="9">if <condition pos:line="53" pos:column="12">(<expr><operator pos:line="53" pos:column="13">(<pos:position pos:line="53" pos:column="14"/></operator><name pos:line="53" pos:column="14">len<pos:position pos:line="53" pos:column="17"/></name> <operator pos:line="53" pos:column="18">=<pos:position pos:line="53" pos:column="19"/></operator> <call><name pos:line="53" pos:column="20">read<pos:position pos:line="53" pos:column="24"/></name><argument_list pos:line="53" pos:column="24">(<argument><expr><name pos:line="53" pos:column="25">STDIN_FILENO<pos:position pos:line="53" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="39">buf<pos:position pos:line="53" pos:column="42"/></name></expr></argument>, <argument><expr><sizeof pos:line="53" pos:column="44">sizeof <name pos:line="53" pos:column="51">buf<pos:position pos:line="53" pos:column="54"/></name></sizeof></expr></argument>)<pos:position pos:line="53" pos:column="55"/></argument_list></call><operator pos:line="53" pos:column="55">)<pos:position pos:line="53" pos:column="56"/></operator> <operator pos:line="53" pos:column="57">&lt;=<pos:position pos:line="53" pos:column="62"/></operator> <literal type="number" pos:line="53" pos:column="60">0<pos:position pos:line="53" pos:column="61"/></literal></expr>)<pos:position pos:line="53" pos:column="62"/></condition><then pos:line="53" pos:column="62">
	    <block type="pseudo"><break pos:line="54" pos:column="13">break;<pos:position pos:line="54" pos:column="19"/></break></block></then></if>
	<if pos:line="55" pos:column="9">if <condition pos:line="55" pos:column="12">(<expr><call><name pos:line="55" pos:column="13">write<pos:position pos:line="55" pos:column="18"/></name><argument_list pos:line="55" pos:column="18">(<argument><expr><name pos:line="55" pos:column="19">STDOUT_FILENO<pos:position pos:line="55" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="34">buf<pos:position pos:line="55" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="39">len<pos:position pos:line="55" pos:column="42"/></name></expr></argument>)<pos:position pos:line="55" pos:column="43"/></argument_list></call> <operator pos:line="55" pos:column="44">!=<pos:position pos:line="55" pos:column="46"/></operator> <name pos:line="55" pos:column="47">len<pos:position pos:line="55" pos:column="50"/></name></expr>)<pos:position pos:line="55" pos:column="51"/></condition><then pos:line="55" pos:column="51"> <block pos:line="55" pos:column="52">{
	    <expr_stmt><expr><call><name pos:line="56" pos:column="13">fprintf<pos:position pos:line="56" pos:column="20"/></name><argument_list pos:line="56" pos:column="20">(<argument><expr><name pos:line="56" pos:column="21">stderr<pos:position pos:line="56" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="56" pos:column="29">"Failed to write data to stdout: %s\n"<pos:position pos:line="56" pos:column="67"/></literal></expr></argument>, <argument><expr><call><name pos:line="56" pos:column="69">strerror<pos:position pos:line="56" pos:column="77"/></name><argument_list pos:line="56" pos:column="77">(<argument><expr><name pos:line="56" pos:column="78">errno<pos:position pos:line="56" pos:column="83"/></name></expr></argument>)<pos:position pos:line="56" pos:column="84"/></argument_list></call></expr></argument>)<pos:position pos:line="56" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="86"/></expr_stmt>
	    <expr_stmt><expr><call><name pos:line="57" pos:column="13">exit<pos:position pos:line="57" pos:column="17"/></name><argument_list pos:line="57" pos:column="17">(<argument><expr><literal type="number" pos:line="57" pos:column="18">1<pos:position pos:line="57" pos:column="19"/></literal></expr></argument>)<pos:position pos:line="57" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="21"/></expr_stmt>
	}<pos:position pos:line="58" pos:column="10"/></block></then></if>
	<if pos:line="59" pos:column="9">if <condition pos:line="59" pos:column="12">(<expr><call><name pos:line="59" pos:column="13">write<pos:position pos:line="59" pos:column="18"/></name><argument_list pos:line="59" pos:column="18">(<argument><expr><name pos:line="59" pos:column="19">fd_file<pos:position pos:line="59" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="28">buf<pos:position pos:line="59" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="33">len<pos:position pos:line="59" pos:column="36"/></name></expr></argument>)<pos:position pos:line="59" pos:column="37"/></argument_list></call> <operator pos:line="59" pos:column="38">!=<pos:position pos:line="59" pos:column="40"/></operator> <name pos:line="59" pos:column="41">len<pos:position pos:line="59" pos:column="44"/></name></expr>)<pos:position pos:line="59" pos:column="45"/></condition><then pos:line="59" pos:column="45"> <block pos:line="59" pos:column="46">{
	    <expr_stmt><expr><call><name pos:line="60" pos:column="13">fprintf<pos:position pos:line="60" pos:column="20"/></name><argument_list pos:line="60" pos:column="20">(<argument><expr><name pos:line="60" pos:column="21">stderr<pos:position pos:line="60" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="60" pos:column="29">"Failed to write data to fd_file: %s\n"<pos:position pos:line="60" pos:column="68"/></literal></expr></argument>, <argument><expr><call><name pos:line="60" pos:column="70">strerror<pos:position pos:line="60" pos:column="78"/></name><argument_list pos:line="60" pos:column="78">(<argument><expr><name pos:line="60" pos:column="79">errno<pos:position pos:line="60" pos:column="84"/></name></expr></argument>)<pos:position pos:line="60" pos:column="85"/></argument_list></call></expr></argument>)<pos:position pos:line="60" pos:column="86"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="87"/></expr_stmt>
	    <expr_stmt><expr><call><name pos:line="61" pos:column="13">exit<pos:position pos:line="61" pos:column="17"/></name><argument_list pos:line="61" pos:column="17">(<argument><expr><literal type="number" pos:line="61" pos:column="18">1<pos:position pos:line="61" pos:column="19"/></literal></expr></argument>)<pos:position pos:line="61" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="21"/></expr_stmt>
	}<pos:position pos:line="62" pos:column="10"/></block></then></if>
    }<pos:position pos:line="63" pos:column="6"/></block></while>
    <return pos:line="64" pos:column="5">return <expr><literal type="number" pos:line="64" pos:column="12">0<pos:position pos:line="64" pos:column="13"/></literal></expr>;<pos:position pos:line="64" pos:column="14"/></return>
}<pos:position pos:line="65" pos:column="2"/></block></function></unit>
