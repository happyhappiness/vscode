<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_605_last_repos.cpp" pos:tabs="8"><decl_stmt><decl><type><name pos:line="1" pos:column="1">local<pos:position pos:line="1" pos:column="6"/></name> <name pos:line="1" pos:column="7">void<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">gen_bitlen<pos:position pos:line="1" pos:column="22"/></name><argument_list pos:line="1" pos:column="22">(<argument><expr><name pos:line="1" pos:column="23">s<pos:position pos:line="1" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="1" pos:column="26">desc<pos:position pos:line="1" pos:column="30"/></name></expr></argument>)<pos:position pos:line="1" pos:column="31"/></argument_list>
    <name pos:line="2" pos:column="5">deflate_state<pos:position pos:line="2" pos:column="18"/></name> <modifier pos:line="2" pos:column="19">*<pos:position pos:line="2" pos:column="20"/></modifier><name pos:line="2" pos:column="20">s<pos:position pos:line="2" pos:column="21"/></name></decl>;<pos:position pos:line="2" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">tree_desc<pos:position pos:line="3" pos:column="14"/></name> <modifier pos:line="3" pos:column="15">*<pos:position pos:line="3" pos:column="16"/></modifier></type><name pos:line="3" pos:column="16">desc<pos:position pos:line="3" pos:column="20"/></name></decl>;<pos:position pos:line="3" pos:column="21"/></decl_stmt>    <comment type="block" pos:line="3" pos:column="25">/* the tree descriptor */</comment>
<block pos:line="4" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">ct_data<pos:position pos:line="5" pos:column="12"/></name> <modifier pos:line="5" pos:column="13">*<pos:position pos:line="5" pos:column="14"/></modifier></type><name pos:line="5" pos:column="14">tree<pos:position pos:line="5" pos:column="18"/></name>        <init pos:line="5" pos:column="26">= <expr><name><name pos:line="5" pos:column="28">desc<pos:position pos:line="5" pos:column="32"/></name><operator pos:line="5" pos:column="32">-&gt;<pos:position pos:line="5" pos:column="37"/></operator><name pos:line="5" pos:column="34">dyn_tree<pos:position pos:line="5" pos:column="42"/></name></name></expr></init></decl>;<pos:position pos:line="5" pos:column="43"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">int<pos:position pos:line="6" pos:column="8"/></name></type> <name pos:line="6" pos:column="9">max_code<pos:position pos:line="6" pos:column="17"/></name>         <init pos:line="6" pos:column="26">= <expr><name><name pos:line="6" pos:column="28">desc<pos:position pos:line="6" pos:column="32"/></name><operator pos:line="6" pos:column="32">-&gt;<pos:position pos:line="6" pos:column="37"/></operator><name pos:line="6" pos:column="34">max_code<pos:position pos:line="6" pos:column="42"/></name></name></expr></init></decl>;<pos:position pos:line="6" pos:column="43"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="7" pos:column="5">const<pos:position pos:line="7" pos:column="10"/></specifier> <name pos:line="7" pos:column="11">ct_data<pos:position pos:line="7" pos:column="18"/></name> <modifier pos:line="7" pos:column="19">*<pos:position pos:line="7" pos:column="20"/></modifier></type><name pos:line="7" pos:column="20">stree<pos:position pos:line="7" pos:column="25"/></name> <init pos:line="7" pos:column="26">= <expr><name><name pos:line="7" pos:column="28">desc<pos:position pos:line="7" pos:column="32"/></name><operator pos:line="7" pos:column="32">-&gt;<pos:position pos:line="7" pos:column="37"/></operator><name pos:line="7" pos:column="34">stat_desc<pos:position pos:line="7" pos:column="43"/></name><operator pos:line="7" pos:column="43">-&gt;<pos:position pos:line="7" pos:column="48"/></operator><name pos:line="7" pos:column="45">static_tree<pos:position pos:line="7" pos:column="56"/></name></name></expr></init></decl>;<pos:position pos:line="7" pos:column="57"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="8" pos:column="5">const<pos:position pos:line="8" pos:column="10"/></specifier> <name pos:line="8" pos:column="11">intf<pos:position pos:line="8" pos:column="15"/></name> <modifier pos:line="8" pos:column="16">*<pos:position pos:line="8" pos:column="17"/></modifier></type><name pos:line="8" pos:column="17">extra<pos:position pos:line="8" pos:column="22"/></name>    <init pos:line="8" pos:column="26">= <expr><name><name pos:line="8" pos:column="28">desc<pos:position pos:line="8" pos:column="32"/></name><operator pos:line="8" pos:column="32">-&gt;<pos:position pos:line="8" pos:column="37"/></operator><name pos:line="8" pos:column="34">stat_desc<pos:position pos:line="8" pos:column="43"/></name><operator pos:line="8" pos:column="43">-&gt;<pos:position pos:line="8" pos:column="48"/></operator><name pos:line="8" pos:column="45">extra_bits<pos:position pos:line="8" pos:column="55"/></name></name></expr></init></decl>;<pos:position pos:line="8" pos:column="56"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">int<pos:position pos:line="9" pos:column="8"/></name></type> <name pos:line="9" pos:column="9">base<pos:position pos:line="9" pos:column="13"/></name>             <init pos:line="9" pos:column="26">= <expr><name><name pos:line="9" pos:column="28">desc<pos:position pos:line="9" pos:column="32"/></name><operator pos:line="9" pos:column="32">-&gt;<pos:position pos:line="9" pos:column="37"/></operator><name pos:line="9" pos:column="34">stat_desc<pos:position pos:line="9" pos:column="43"/></name><operator pos:line="9" pos:column="43">-&gt;<pos:position pos:line="9" pos:column="48"/></operator><name pos:line="9" pos:column="45">extra_base<pos:position pos:line="9" pos:column="55"/></name></name></expr></init></decl>;<pos:position pos:line="9" pos:column="56"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">int<pos:position pos:line="10" pos:column="8"/></name></type> <name pos:line="10" pos:column="9">max_length<pos:position pos:line="10" pos:column="19"/></name>       <init pos:line="10" pos:column="26">= <expr><name><name pos:line="10" pos:column="28">desc<pos:position pos:line="10" pos:column="32"/></name><operator pos:line="10" pos:column="32">-&gt;<pos:position pos:line="10" pos:column="37"/></operator><name pos:line="10" pos:column="34">stat_desc<pos:position pos:line="10" pos:column="43"/></name><operator pos:line="10" pos:column="43">-&gt;<pos:position pos:line="10" pos:column="48"/></operator><name pos:line="10" pos:column="45">max_length<pos:position pos:line="10" pos:column="55"/></name></name></expr></init></decl>;<pos:position pos:line="10" pos:column="56"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="11" pos:column="5">int<pos:position pos:line="11" pos:column="8"/></name></type> <name pos:line="11" pos:column="9">h<pos:position pos:line="11" pos:column="10"/></name></decl>;<pos:position pos:line="11" pos:column="11"/></decl_stmt>              <comment type="block" pos:line="11" pos:column="25">/* heap index */</comment>
    <decl_stmt><decl><type><name pos:line="12" pos:column="5">int<pos:position pos:line="12" pos:column="8"/></name></type> <name pos:line="12" pos:column="9">n<pos:position pos:line="12" pos:column="10"/></name></decl>, <decl><type ref="prev"/><name pos:line="12" pos:column="12">m<pos:position pos:line="12" pos:column="13"/></name></decl>;<pos:position pos:line="12" pos:column="14"/></decl_stmt>           <comment type="block" pos:line="12" pos:column="25">/* iterate over the tree elements */</comment>
    <decl_stmt><decl><type><name pos:line="13" pos:column="5">int<pos:position pos:line="13" pos:column="8"/></name></type> <name pos:line="13" pos:column="9">bits<pos:position pos:line="13" pos:column="13"/></name></decl>;<pos:position pos:line="13" pos:column="14"/></decl_stmt>           <comment type="block" pos:line="13" pos:column="25">/* bit length */</comment>
    <decl_stmt><decl><type><name pos:line="14" pos:column="5">int<pos:position pos:line="14" pos:column="8"/></name></type> <name pos:line="14" pos:column="9">xbits<pos:position pos:line="14" pos:column="14"/></name></decl>;<pos:position pos:line="14" pos:column="15"/></decl_stmt>          <comment type="block" pos:line="14" pos:column="25">/* extra bits */</comment>
    <decl_stmt><decl><type><name pos:line="15" pos:column="5">ush<pos:position pos:line="15" pos:column="8"/></name></type> <name pos:line="15" pos:column="9">f<pos:position pos:line="15" pos:column="10"/></name></decl>;<pos:position pos:line="15" pos:column="11"/></decl_stmt>              <comment type="block" pos:line="15" pos:column="25">/* frequency */</comment>
    <decl_stmt><decl><type><name pos:line="16" pos:column="5">int<pos:position pos:line="16" pos:column="8"/></name></type> <name pos:line="16" pos:column="9">overflow<pos:position pos:line="16" pos:column="17"/></name> <init pos:line="16" pos:column="18">= <expr><literal type="number" pos:line="16" pos:column="20">0<pos:position pos:line="16" pos:column="21"/></literal></expr></init></decl>;<pos:position pos:line="16" pos:column="22"/></decl_stmt>   <comment type="block" pos:line="16" pos:column="25">/* number of elements with bit length too large */</comment>

    <for pos:line="18" pos:column="5">for <control pos:line="18" pos:column="9">(<init><expr><name pos:line="18" pos:column="10">bits<pos:position pos:line="18" pos:column="14"/></name> <operator pos:line="18" pos:column="15">=<pos:position pos:line="18" pos:column="16"/></operator> <literal type="number" pos:line="18" pos:column="17">0<pos:position pos:line="18" pos:column="18"/></literal></expr>;<pos:position pos:line="18" pos:column="19"/></init> <condition><expr><name pos:line="18" pos:column="20">bits<pos:position pos:line="18" pos:column="24"/></name> <operator pos:line="18" pos:column="25">&lt;=<pos:position pos:line="18" pos:column="30"/></operator> <name pos:line="18" pos:column="28">MAX_BITS<pos:position pos:line="18" pos:column="36"/></name></expr>;<pos:position pos:line="18" pos:column="37"/></condition> <incr><expr><name pos:line="18" pos:column="38">bits<pos:position pos:line="18" pos:column="42"/></name><operator pos:line="18" pos:column="42">++<pos:position pos:line="18" pos:column="44"/></operator></expr></incr>)<pos:position pos:line="18" pos:column="45"/></control> <block type="pseudo"><expr_stmt><expr><name><name pos:line="18" pos:column="46">s<pos:position pos:line="18" pos:column="47"/></name><operator pos:line="18" pos:column="47">-&gt;<pos:position pos:line="18" pos:column="52"/></operator><name pos:line="18" pos:column="49">bl_count<pos:position pos:line="18" pos:column="57"/></name><index pos:line="18" pos:column="57">[<expr><name pos:line="18" pos:column="58">bits<pos:position pos:line="18" pos:column="62"/></name></expr>]<pos:position pos:line="18" pos:column="63"/></index></name> <operator pos:line="18" pos:column="64">=<pos:position pos:line="18" pos:column="65"/></operator> <literal type="number" pos:line="18" pos:column="66">0<pos:position pos:line="18" pos:column="67"/></literal></expr>;<pos:position pos:line="18" pos:column="68"/></expr_stmt></block></for>

    <comment type="block" pos:line="20" pos:column="5">/* In a first pass, compute the optimal bit lengths (which may
     * overflow in the case of the bit length tree).
     */</comment>
    <expr_stmt><expr><name><name pos:line="23" pos:column="5">tree<pos:position pos:line="23" pos:column="9"/></name><index pos:line="23" pos:column="9">[<expr><name><name pos:line="23" pos:column="10">s<pos:position pos:line="23" pos:column="11"/></name><operator pos:line="23" pos:column="11">-&gt;<pos:position pos:line="23" pos:column="16"/></operator><name pos:line="23" pos:column="13">heap<pos:position pos:line="23" pos:column="17"/></name><index pos:line="23" pos:column="17">[<expr><name><name pos:line="23" pos:column="18">s<pos:position pos:line="23" pos:column="19"/></name><operator pos:line="23" pos:column="19">-&gt;<pos:position pos:line="23" pos:column="24"/></operator><name pos:line="23" pos:column="21">heap_max<pos:position pos:line="23" pos:column="29"/></name></name></expr>]<pos:position pos:line="23" pos:column="30"/></index></name></expr>]<pos:position pos:line="23" pos:column="31"/></index></name><operator pos:line="23" pos:column="31">.<pos:position pos:line="23" pos:column="32"/></operator><name pos:line="23" pos:column="32">Len<pos:position pos:line="23" pos:column="35"/></name> <operator pos:line="23" pos:column="36">=<pos:position pos:line="23" pos:column="37"/></operator> <literal type="number" pos:line="23" pos:column="38">0<pos:position pos:line="23" pos:column="39"/></literal></expr>;<pos:position pos:line="23" pos:column="40"/></expr_stmt> <comment type="block" pos:line="23" pos:column="41">/* root of the heap */</comment>

    <for pos:line="25" pos:column="5">for <control pos:line="25" pos:column="9">(<init><expr><name pos:line="25" pos:column="10">h<pos:position pos:line="25" pos:column="11"/></name> <operator pos:line="25" pos:column="12">=<pos:position pos:line="25" pos:column="13"/></operator> <name><name pos:line="25" pos:column="14">s<pos:position pos:line="25" pos:column="15"/></name><operator pos:line="25" pos:column="15">-&gt;<pos:position pos:line="25" pos:column="20"/></operator><name pos:line="25" pos:column="17">heap_max<pos:position pos:line="25" pos:column="25"/></name></name><operator pos:line="25" pos:column="25">+<pos:position pos:line="25" pos:column="26"/></operator><literal type="number" pos:line="25" pos:column="26">1<pos:position pos:line="25" pos:column="27"/></literal></expr>;<pos:position pos:line="25" pos:column="28"/></init> <condition><expr><name pos:line="25" pos:column="29">h<pos:position pos:line="25" pos:column="30"/></name> <operator pos:line="25" pos:column="31">&lt;<pos:position pos:line="25" pos:column="35"/></operator> <name pos:line="25" pos:column="33">HEAP_SIZE<pos:position pos:line="25" pos:column="42"/></name></expr>;<pos:position pos:line="25" pos:column="43"/></condition> <incr><expr><name pos:line="25" pos:column="44">h<pos:position pos:line="25" pos:column="45"/></name><operator pos:line="25" pos:column="45">++<pos:position pos:line="25" pos:column="47"/></operator></expr></incr>)<pos:position pos:line="25" pos:column="48"/></control> <block pos:line="25" pos:column="49">{
        <expr_stmt><expr><name pos:line="26" pos:column="9">n<pos:position pos:line="26" pos:column="10"/></name> <operator pos:line="26" pos:column="11">=<pos:position pos:line="26" pos:column="12"/></operator> <name><name pos:line="26" pos:column="13">s<pos:position pos:line="26" pos:column="14"/></name><operator pos:line="26" pos:column="14">-&gt;<pos:position pos:line="26" pos:column="19"/></operator><name pos:line="26" pos:column="16">heap<pos:position pos:line="26" pos:column="20"/></name><index pos:line="26" pos:column="20">[<expr><name pos:line="26" pos:column="21">h<pos:position pos:line="26" pos:column="22"/></name></expr>]<pos:position pos:line="26" pos:column="23"/></index></name></expr>;<pos:position pos:line="26" pos:column="24"/></expr_stmt>
        <expr_stmt><expr><name pos:line="27" pos:column="9">bits<pos:position pos:line="27" pos:column="13"/></name> <operator pos:line="27" pos:column="14">=<pos:position pos:line="27" pos:column="15"/></operator> <name><name pos:line="27" pos:column="16">tree<pos:position pos:line="27" pos:column="20"/></name><index pos:line="27" pos:column="20">[<expr><name><name pos:line="27" pos:column="21">tree<pos:position pos:line="27" pos:column="25"/></name><index pos:line="27" pos:column="25">[<expr><name pos:line="27" pos:column="26">n<pos:position pos:line="27" pos:column="27"/></name></expr>]<pos:position pos:line="27" pos:column="28"/></index></name><operator pos:line="27" pos:column="28">.<pos:position pos:line="27" pos:column="29"/></operator><name pos:line="27" pos:column="29">Dad<pos:position pos:line="27" pos:column="32"/></name></expr>]<pos:position pos:line="27" pos:column="33"/></index></name><operator pos:line="27" pos:column="33">.<pos:position pos:line="27" pos:column="34"/></operator><name pos:line="27" pos:column="34">Len<pos:position pos:line="27" pos:column="37"/></name> <operator pos:line="27" pos:column="38">+<pos:position pos:line="27" pos:column="39"/></operator> <literal type="number" pos:line="27" pos:column="40">1<pos:position pos:line="27" pos:column="41"/></literal></expr>;<pos:position pos:line="27" pos:column="42"/></expr_stmt>
        <if pos:line="28" pos:column="9">if <condition pos:line="28" pos:column="12">(<expr><name pos:line="28" pos:column="13">bits<pos:position pos:line="28" pos:column="17"/></name> <operator pos:line="28" pos:column="18">&gt;<pos:position pos:line="28" pos:column="22"/></operator> <name pos:line="28" pos:column="20">max_length<pos:position pos:line="28" pos:column="30"/></name></expr>)<pos:position pos:line="28" pos:column="31"/></condition><then pos:line="28" pos:column="31"> <block type="pseudo"><expr_stmt><expr><name pos:line="28" pos:column="32">bits<pos:position pos:line="28" pos:column="36"/></name> <operator pos:line="28" pos:column="37">=<pos:position pos:line="28" pos:column="38"/></operator> <name pos:line="28" pos:column="39">max_length<pos:position pos:line="28" pos:column="49"/></name></expr><operator pos:line="28" pos:column="49">,<pos:position pos:line="28" pos:column="50"/></operator> <expr><name pos:line="28" pos:column="51">overflow<pos:position pos:line="28" pos:column="59"/></name><operator pos:line="28" pos:column="59">++<pos:position pos:line="28" pos:column="61"/></operator></expr>;<pos:position pos:line="28" pos:column="62"/></expr_stmt></block></then></if>
        <expr_stmt><expr><name><name pos:line="29" pos:column="9">tree<pos:position pos:line="29" pos:column="13"/></name><index pos:line="29" pos:column="13">[<expr><name pos:line="29" pos:column="14">n<pos:position pos:line="29" pos:column="15"/></name></expr>]<pos:position pos:line="29" pos:column="16"/></index></name><operator pos:line="29" pos:column="16">.<pos:position pos:line="29" pos:column="17"/></operator><name pos:line="29" pos:column="17">Len<pos:position pos:line="29" pos:column="20"/></name> <operator pos:line="29" pos:column="21">=<pos:position pos:line="29" pos:column="22"/></operator> <operator pos:line="29" pos:column="23">(<pos:position pos:line="29" pos:column="24"/></operator><name pos:line="29" pos:column="24">ush<pos:position pos:line="29" pos:column="27"/></name><operator pos:line="29" pos:column="27">)<pos:position pos:line="29" pos:column="28"/></operator><name pos:line="29" pos:column="28">bits<pos:position pos:line="29" pos:column="32"/></name></expr>;<pos:position pos:line="29" pos:column="33"/></expr_stmt>
        <comment type="block" pos:line="30" pos:column="9">/* We overwrite tree[n].Dad which is no longer needed */</comment>

        <if pos:line="32" pos:column="9">if <condition pos:line="32" pos:column="12">(<expr><name pos:line="32" pos:column="13">n<pos:position pos:line="32" pos:column="14"/></name> <operator pos:line="32" pos:column="15">&gt;<pos:position pos:line="32" pos:column="19"/></operator> <name pos:line="32" pos:column="17">max_code<pos:position pos:line="32" pos:column="25"/></name></expr>)<pos:position pos:line="32" pos:column="26"/></condition><then pos:line="32" pos:column="26"> <block type="pseudo"><continue pos:line="32" pos:column="27">continue;<pos:position pos:line="32" pos:column="36"/></continue></block></then></if> <comment type="block" pos:line="32" pos:column="37">/* not a leaf node */</comment>

        <expr_stmt><expr><name><name pos:line="34" pos:column="9">s<pos:position pos:line="34" pos:column="10"/></name><operator pos:line="34" pos:column="10">-&gt;<pos:position pos:line="34" pos:column="15"/></operator><name pos:line="34" pos:column="12">bl_count<pos:position pos:line="34" pos:column="20"/></name><index pos:line="34" pos:column="20">[<expr><name pos:line="34" pos:column="21">bits<pos:position pos:line="34" pos:column="25"/></name></expr>]<pos:position pos:line="34" pos:column="26"/></index></name><operator pos:line="34" pos:column="26">++<pos:position pos:line="34" pos:column="28"/></operator></expr>;<pos:position pos:line="34" pos:column="29"/></expr_stmt>
        <expr_stmt><expr><name pos:line="35" pos:column="9">xbits<pos:position pos:line="35" pos:column="14"/></name> <operator pos:line="35" pos:column="15">=<pos:position pos:line="35" pos:column="16"/></operator> <literal type="number" pos:line="35" pos:column="17">0<pos:position pos:line="35" pos:column="18"/></literal></expr>;<pos:position pos:line="35" pos:column="19"/></expr_stmt>
        <if pos:line="36" pos:column="9">if <condition pos:line="36" pos:column="12">(<expr><name pos:line="36" pos:column="13">n<pos:position pos:line="36" pos:column="14"/></name> <operator pos:line="36" pos:column="15">&gt;=<pos:position pos:line="36" pos:column="20"/></operator> <name pos:line="36" pos:column="18">base<pos:position pos:line="36" pos:column="22"/></name></expr>)<pos:position pos:line="36" pos:column="23"/></condition><then pos:line="36" pos:column="23"> <block type="pseudo"><expr_stmt><expr><name pos:line="36" pos:column="24">xbits<pos:position pos:line="36" pos:column="29"/></name> <operator pos:line="36" pos:column="30">=<pos:position pos:line="36" pos:column="31"/></operator> <name><name pos:line="36" pos:column="32">extra<pos:position pos:line="36" pos:column="37"/></name><index pos:line="36" pos:column="37">[<expr><name pos:line="36" pos:column="38">n<pos:position pos:line="36" pos:column="39"/></name><operator pos:line="36" pos:column="39">-<pos:position pos:line="36" pos:column="40"/></operator><name pos:line="36" pos:column="40">base<pos:position pos:line="36" pos:column="44"/></name></expr>]<pos:position pos:line="36" pos:column="45"/></index></name></expr>;<pos:position pos:line="36" pos:column="46"/></expr_stmt></block></then></if>
        <expr_stmt><expr><name pos:line="37" pos:column="9">f<pos:position pos:line="37" pos:column="10"/></name> <operator pos:line="37" pos:column="11">=<pos:position pos:line="37" pos:column="12"/></operator> <name><name pos:line="37" pos:column="13">tree<pos:position pos:line="37" pos:column="17"/></name><index pos:line="37" pos:column="17">[<expr><name pos:line="37" pos:column="18">n<pos:position pos:line="37" pos:column="19"/></name></expr>]<pos:position pos:line="37" pos:column="20"/></index></name><operator pos:line="37" pos:column="20">.<pos:position pos:line="37" pos:column="21"/></operator><name pos:line="37" pos:column="21">Freq<pos:position pos:line="37" pos:column="25"/></name></expr>;<pos:position pos:line="37" pos:column="26"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="38" pos:column="9">s<pos:position pos:line="38" pos:column="10"/></name><operator pos:line="38" pos:column="10">-&gt;<pos:position pos:line="38" pos:column="15"/></operator><name pos:line="38" pos:column="12">opt_len<pos:position pos:line="38" pos:column="19"/></name></name> <operator pos:line="38" pos:column="20">+=<pos:position pos:line="38" pos:column="22"/></operator> <operator pos:line="38" pos:column="23">(<pos:position pos:line="38" pos:column="24"/></operator><name pos:line="38" pos:column="24">ulg<pos:position pos:line="38" pos:column="27"/></name><operator pos:line="38" pos:column="27">)<pos:position pos:line="38" pos:column="28"/></operator><name pos:line="38" pos:column="28">f<pos:position pos:line="38" pos:column="29"/></name> <operator pos:line="38" pos:column="30">*<pos:position pos:line="38" pos:column="31"/></operator> <operator pos:line="38" pos:column="32">(<pos:position pos:line="38" pos:column="33"/></operator><name pos:line="38" pos:column="33">bits<pos:position pos:line="38" pos:column="37"/></name> <operator pos:line="38" pos:column="38">+<pos:position pos:line="38" pos:column="39"/></operator> <name pos:line="38" pos:column="40">xbits<pos:position pos:line="38" pos:column="45"/></name><operator pos:line="38" pos:column="45">)<pos:position pos:line="38" pos:column="46"/></operator></expr>;<pos:position pos:line="38" pos:column="47"/></expr_stmt>
        <if pos:line="39" pos:column="9">if <condition pos:line="39" pos:column="12">(<expr><name pos:line="39" pos:column="13">stree<pos:position pos:line="39" pos:column="18"/></name></expr>)<pos:position pos:line="39" pos:column="19"/></condition><then pos:line="39" pos:column="19"> <block type="pseudo"><expr_stmt><expr><name><name pos:line="39" pos:column="20">s<pos:position pos:line="39" pos:column="21"/></name><operator pos:line="39" pos:column="21">-&gt;<pos:position pos:line="39" pos:column="26"/></operator><name pos:line="39" pos:column="23">static_len<pos:position pos:line="39" pos:column="33"/></name></name> <operator pos:line="39" pos:column="34">+=<pos:position pos:line="39" pos:column="36"/></operator> <operator pos:line="39" pos:column="37">(<pos:position pos:line="39" pos:column="38"/></operator><name pos:line="39" pos:column="38">ulg<pos:position pos:line="39" pos:column="41"/></name><operator pos:line="39" pos:column="41">)<pos:position pos:line="39" pos:column="42"/></operator><name pos:line="39" pos:column="42">f<pos:position pos:line="39" pos:column="43"/></name> <operator pos:line="39" pos:column="44">*<pos:position pos:line="39" pos:column="45"/></operator> <operator pos:line="39" pos:column="46">(<pos:position pos:line="39" pos:column="47"/></operator><name><name pos:line="39" pos:column="47">stree<pos:position pos:line="39" pos:column="52"/></name><index pos:line="39" pos:column="52">[<expr><name pos:line="39" pos:column="53">n<pos:position pos:line="39" pos:column="54"/></name></expr>]<pos:position pos:line="39" pos:column="55"/></index></name><operator pos:line="39" pos:column="55">.<pos:position pos:line="39" pos:column="56"/></operator><name pos:line="39" pos:column="56">Len<pos:position pos:line="39" pos:column="59"/></name> <operator pos:line="39" pos:column="60">+<pos:position pos:line="39" pos:column="61"/></operator> <name pos:line="39" pos:column="62">xbits<pos:position pos:line="39" pos:column="67"/></name><operator pos:line="39" pos:column="67">)<pos:position pos:line="39" pos:column="68"/></operator></expr>;<pos:position pos:line="39" pos:column="69"/></expr_stmt></block></then></if>
    }<pos:position pos:line="40" pos:column="6"/></block></for>
    <if pos:line="41" pos:column="5">if <condition pos:line="41" pos:column="8">(<expr><name pos:line="41" pos:column="9">overflow<pos:position pos:line="41" pos:column="17"/></name> <operator pos:line="41" pos:column="18">==<pos:position pos:line="41" pos:column="20"/></operator> <literal type="number" pos:line="41" pos:column="21">0<pos:position pos:line="41" pos:column="22"/></literal></expr>)<pos:position pos:line="41" pos:column="23"/></condition><then pos:line="41" pos:column="23"> <block type="pseudo"><return pos:line="41" pos:column="24">return;<pos:position pos:line="41" pos:column="31"/></return></block></then></if>

    <expr_stmt><expr><call><name pos:line="43" pos:column="5">Trace<pos:position pos:line="43" pos:column="10"/></name><argument_list pos:line="43" pos:column="10">(<argument><expr><operator pos:line="43" pos:column="11">(<pos:position pos:line="43" pos:column="12"/></operator><name pos:line="43" pos:column="12">stderr<pos:position pos:line="43" pos:column="18"/></name><operator pos:line="43" pos:column="18">,<pos:position pos:line="43" pos:column="19"/></operator><literal type="string" pos:line="43" pos:column="19">"\nbit length overflow\n"<pos:position pos:line="43" pos:column="44"/></literal><operator pos:line="43" pos:column="44">)<pos:position pos:line="43" pos:column="45"/></operator></expr></argument>)<pos:position pos:line="43" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="47"/></expr_stmt>
    <comment type="block" pos:line="44" pos:column="5">/* This happens for example on obj2 and pic of the Calgary corpus */</comment>

    <comment type="block" pos:line="46" pos:column="5">/* Find the first bit length which could increase: */</comment>
    <do pos:line="47" pos:column="5">do <block pos:line="47" pos:column="8">{
        <expr_stmt><expr><name pos:line="48" pos:column="9">bits<pos:position pos:line="48" pos:column="13"/></name> <operator pos:line="48" pos:column="14">=<pos:position pos:line="48" pos:column="15"/></operator> <name pos:line="48" pos:column="16">max_length<pos:position pos:line="48" pos:column="26"/></name><operator pos:line="48" pos:column="26">-<pos:position pos:line="48" pos:column="27"/></operator><literal type="number" pos:line="48" pos:column="27">1<pos:position pos:line="48" pos:column="28"/></literal></expr>;<pos:position pos:line="48" pos:column="29"/></expr_stmt>
        <while pos:line="49" pos:column="9">while <condition pos:line="49" pos:column="15">(<expr><name><name pos:line="49" pos:column="16">s<pos:position pos:line="49" pos:column="17"/></name><operator pos:line="49" pos:column="17">-&gt;<pos:position pos:line="49" pos:column="22"/></operator><name pos:line="49" pos:column="19">bl_count<pos:position pos:line="49" pos:column="27"/></name><index pos:line="49" pos:column="27">[<expr><name pos:line="49" pos:column="28">bits<pos:position pos:line="49" pos:column="32"/></name></expr>]<pos:position pos:line="49" pos:column="33"/></index></name> <operator pos:line="49" pos:column="34">==<pos:position pos:line="49" pos:column="36"/></operator> <literal type="number" pos:line="49" pos:column="37">0<pos:position pos:line="49" pos:column="38"/></literal></expr>)<pos:position pos:line="49" pos:column="39"/></condition> <block type="pseudo"><expr_stmt><expr><name pos:line="49" pos:column="40">bits<pos:position pos:line="49" pos:column="44"/></name><operator pos:line="49" pos:column="44">--<pos:position pos:line="49" pos:column="46"/></operator></expr>;<pos:position pos:line="49" pos:column="47"/></expr_stmt></block></while>
        <expr_stmt><expr><name><name pos:line="50" pos:column="9">s<pos:position pos:line="50" pos:column="10"/></name><operator pos:line="50" pos:column="10">-&gt;<pos:position pos:line="50" pos:column="15"/></operator><name pos:line="50" pos:column="12">bl_count<pos:position pos:line="50" pos:column="20"/></name><index pos:line="50" pos:column="20">[<expr><name pos:line="50" pos:column="21">bits<pos:position pos:line="50" pos:column="25"/></name></expr>]<pos:position pos:line="50" pos:column="26"/></index></name><operator pos:line="50" pos:column="26">--<pos:position pos:line="50" pos:column="28"/></operator></expr>;<pos:position pos:line="50" pos:column="29"/></expr_stmt>      <comment type="block" pos:line="50" pos:column="35">/* move one leaf down the tree */</comment>
        <expr_stmt><expr><name><name pos:line="51" pos:column="9">s<pos:position pos:line="51" pos:column="10"/></name><operator pos:line="51" pos:column="10">-&gt;<pos:position pos:line="51" pos:column="15"/></operator><name pos:line="51" pos:column="12">bl_count<pos:position pos:line="51" pos:column="20"/></name><index pos:line="51" pos:column="20">[<expr><name pos:line="51" pos:column="21">bits<pos:position pos:line="51" pos:column="25"/></name><operator pos:line="51" pos:column="25">+<pos:position pos:line="51" pos:column="26"/></operator><literal type="number" pos:line="51" pos:column="26">1<pos:position pos:line="51" pos:column="27"/></literal></expr>]<pos:position pos:line="51" pos:column="28"/></index></name> <operator pos:line="51" pos:column="29">+=<pos:position pos:line="51" pos:column="31"/></operator> <literal type="number" pos:line="51" pos:column="32">2<pos:position pos:line="51" pos:column="33"/></literal></expr>;<pos:position pos:line="51" pos:column="34"/></expr_stmt> <comment type="block" pos:line="51" pos:column="35">/* move one overflow item as its brother */</comment>
        <expr_stmt><expr><name><name pos:line="52" pos:column="9">s<pos:position pos:line="52" pos:column="10"/></name><operator pos:line="52" pos:column="10">-&gt;<pos:position pos:line="52" pos:column="15"/></operator><name pos:line="52" pos:column="12">bl_count<pos:position pos:line="52" pos:column="20"/></name><index pos:line="52" pos:column="20">[<expr><name pos:line="52" pos:column="21">max_length<pos:position pos:line="52" pos:column="31"/></name></expr>]<pos:position pos:line="52" pos:column="32"/></index></name><operator pos:line="52" pos:column="32">--<pos:position pos:line="52" pos:column="34"/></operator></expr>;<pos:position pos:line="52" pos:column="35"/></expr_stmt>
        <comment type="block" pos:line="53" pos:column="9">/* The brother of the overflow item also moves one step up,
         * but this does not affect bl_count[max_length]
         */</comment>
        <expr_stmt><expr><name pos:line="56" pos:column="9">overflow<pos:position pos:line="56" pos:column="17"/></name> <operator pos:line="56" pos:column="18">-=<pos:position pos:line="56" pos:column="20"/></operator> <literal type="number" pos:line="56" pos:column="21">2<pos:position pos:line="56" pos:column="22"/></literal></expr>;<pos:position pos:line="56" pos:column="23"/></expr_stmt>
    }<pos:position pos:line="57" pos:column="6"/></block> while <condition pos:line="57" pos:column="13">(<expr><name pos:line="57" pos:column="14">overflow<pos:position pos:line="57" pos:column="22"/></name> <operator pos:line="57" pos:column="23">&gt;<pos:position pos:line="57" pos:column="27"/></operator> <literal type="number" pos:line="57" pos:column="25">0<pos:position pos:line="57" pos:column="26"/></literal></expr>)<pos:position pos:line="57" pos:column="27"/></condition>;<pos:position pos:line="57" pos:column="28"/></do>

    <comment type="block" pos:line="59" pos:column="5">/* Now recompute all bit lengths, scanning in increasing frequency.
     * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
     * lengths instead of fixing only the wrong ones. This idea is taken
     * from 'ar' written by Haruhiko Okumura.)
     */</comment>
    <for pos:line="64" pos:column="5">for <control pos:line="64" pos:column="9">(<init><expr><name pos:line="64" pos:column="10">bits<pos:position pos:line="64" pos:column="14"/></name> <operator pos:line="64" pos:column="15">=<pos:position pos:line="64" pos:column="16"/></operator> <name pos:line="64" pos:column="17">max_length<pos:position pos:line="64" pos:column="27"/></name></expr>;<pos:position pos:line="64" pos:column="28"/></init> <condition><expr><name pos:line="64" pos:column="29">bits<pos:position pos:line="64" pos:column="33"/></name> <operator pos:line="64" pos:column="34">!=<pos:position pos:line="64" pos:column="36"/></operator> <literal type="number" pos:line="64" pos:column="37">0<pos:position pos:line="64" pos:column="38"/></literal></expr>;<pos:position pos:line="64" pos:column="39"/></condition> <incr><expr><name pos:line="64" pos:column="40">bits<pos:position pos:line="64" pos:column="44"/></name><operator pos:line="64" pos:column="44">--<pos:position pos:line="64" pos:column="46"/></operator></expr></incr>)<pos:position pos:line="64" pos:column="47"/></control> <block pos:line="64" pos:column="48">{
        <expr_stmt><expr><name pos:line="65" pos:column="9">n<pos:position pos:line="65" pos:column="10"/></name> <operator pos:line="65" pos:column="11">=<pos:position pos:line="65" pos:column="12"/></operator> <name><name pos:line="65" pos:column="13">s<pos:position pos:line="65" pos:column="14"/></name><operator pos:line="65" pos:column="14">-&gt;<pos:position pos:line="65" pos:column="19"/></operator><name pos:line="65" pos:column="16">bl_count<pos:position pos:line="65" pos:column="24"/></name><index pos:line="65" pos:column="24">[<expr><name pos:line="65" pos:column="25">bits<pos:position pos:line="65" pos:column="29"/></name></expr>]<pos:position pos:line="65" pos:column="30"/></index></name></expr>;<pos:position pos:line="65" pos:column="31"/></expr_stmt>
        <while pos:line="66" pos:column="9">while <condition pos:line="66" pos:column="15">(<expr><name pos:line="66" pos:column="16">n<pos:position pos:line="66" pos:column="17"/></name> <operator pos:line="66" pos:column="18">!=<pos:position pos:line="66" pos:column="20"/></operator> <literal type="number" pos:line="66" pos:column="21">0<pos:position pos:line="66" pos:column="22"/></literal></expr>)<pos:position pos:line="66" pos:column="23"/></condition> <block pos:line="66" pos:column="24">{
            <expr_stmt><expr><name pos:line="67" pos:column="13">m<pos:position pos:line="67" pos:column="14"/></name> <operator pos:line="67" pos:column="15">=<pos:position pos:line="67" pos:column="16"/></operator> <name><name pos:line="67" pos:column="17">s<pos:position pos:line="67" pos:column="18"/></name><operator pos:line="67" pos:column="18">-&gt;<pos:position pos:line="67" pos:column="23"/></operator><name pos:line="67" pos:column="20">heap<pos:position pos:line="67" pos:column="24"/></name><index pos:line="67" pos:column="24">[<expr><operator pos:line="67" pos:column="25">--<pos:position pos:line="67" pos:column="27"/></operator><name pos:line="67" pos:column="27">h<pos:position pos:line="67" pos:column="28"/></name></expr>]<pos:position pos:line="67" pos:column="29"/></index></name></expr>;<pos:position pos:line="67" pos:column="30"/></expr_stmt>
            <if pos:line="68" pos:column="13">if <condition pos:line="68" pos:column="16">(<expr><name pos:line="68" pos:column="17">m<pos:position pos:line="68" pos:column="18"/></name> <operator pos:line="68" pos:column="19">&gt;<pos:position pos:line="68" pos:column="23"/></operator> <name pos:line="68" pos:column="21">max_code<pos:position pos:line="68" pos:column="29"/></name></expr>)<pos:position pos:line="68" pos:column="30"/></condition><then pos:line="68" pos:column="30"> <block type="pseudo"><continue pos:line="68" pos:column="31">continue;<pos:position pos:line="68" pos:column="40"/></continue></block></then></if>
            <if pos:line="69" pos:column="13">if <condition pos:line="69" pos:column="16">(<expr><operator pos:line="69" pos:column="17">(<pos:position pos:line="69" pos:column="18"/></operator><name pos:line="69" pos:column="18">unsigned<pos:position pos:line="69" pos:column="26"/></name><operator pos:line="69" pos:column="26">)<pos:position pos:line="69" pos:column="27"/></operator> <name><name pos:line="69" pos:column="28">tree<pos:position pos:line="69" pos:column="32"/></name><index pos:line="69" pos:column="32">[<expr><name pos:line="69" pos:column="33">m<pos:position pos:line="69" pos:column="34"/></name></expr>]<pos:position pos:line="69" pos:column="35"/></index></name><operator pos:line="69" pos:column="35">.<pos:position pos:line="69" pos:column="36"/></operator><name pos:line="69" pos:column="36">Len<pos:position pos:line="69" pos:column="39"/></name> <operator pos:line="69" pos:column="40">!=<pos:position pos:line="69" pos:column="42"/></operator> <operator pos:line="69" pos:column="43">(<pos:position pos:line="69" pos:column="44"/></operator><name pos:line="69" pos:column="44">unsigned<pos:position pos:line="69" pos:column="52"/></name><operator pos:line="69" pos:column="52">)<pos:position pos:line="69" pos:column="53"/></operator> <name pos:line="69" pos:column="54">bits<pos:position pos:line="69" pos:column="58"/></name></expr>)<pos:position pos:line="69" pos:column="59"/></condition><then pos:line="69" pos:column="59"> <block pos:line="69" pos:column="60">{
                <expr_stmt><expr><call><name pos:line="70" pos:column="17">Trace<pos:position pos:line="70" pos:column="22"/></name><argument_list pos:line="70" pos:column="22">(<argument><expr><operator pos:line="70" pos:column="23">(<pos:position pos:line="70" pos:column="24"/></operator><name pos:line="70" pos:column="24">stderr<pos:position pos:line="70" pos:column="30"/></name><operator pos:line="70" pos:column="30">,<pos:position pos:line="70" pos:column="31"/></operator><literal type="string" pos:line="70" pos:column="31">"code %d bits %d-&gt;%d\n"<pos:position pos:line="70" pos:column="57"/></literal><operator pos:line="70" pos:column="54">,<pos:position pos:line="70" pos:column="55"/></operator> <name pos:line="70" pos:column="56">m<pos:position pos:line="70" pos:column="57"/></name><operator pos:line="70" pos:column="57">,<pos:position pos:line="70" pos:column="58"/></operator> <name><name pos:line="70" pos:column="59">tree<pos:position pos:line="70" pos:column="63"/></name><index pos:line="70" pos:column="63">[<expr><name pos:line="70" pos:column="64">m<pos:position pos:line="70" pos:column="65"/></name></expr>]<pos:position pos:line="70" pos:column="66"/></index></name><operator pos:line="70" pos:column="66">.<pos:position pos:line="70" pos:column="67"/></operator><name pos:line="70" pos:column="67">Len<pos:position pos:line="70" pos:column="70"/></name><operator pos:line="70" pos:column="70">,<pos:position pos:line="70" pos:column="71"/></operator> <name pos:line="70" pos:column="72">bits<pos:position pos:line="70" pos:column="76"/></name><operator pos:line="70" pos:column="76">)<pos:position pos:line="70" pos:column="77"/></operator></expr></argument>)<pos:position pos:line="70" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="79"/></expr_stmt>
                <expr_stmt><expr><name><name pos:line="71" pos:column="17">s<pos:position pos:line="71" pos:column="18"/></name><operator pos:line="71" pos:column="18">-&gt;<pos:position pos:line="71" pos:column="23"/></operator><name pos:line="71" pos:column="20">opt_len<pos:position pos:line="71" pos:column="27"/></name></name> <operator pos:line="71" pos:column="28">+=<pos:position pos:line="71" pos:column="30"/></operator> <operator pos:line="71" pos:column="31">(<pos:position pos:line="71" pos:column="32"/></operator><operator pos:line="71" pos:column="32">(<pos:position pos:line="71" pos:column="33"/></operator><name pos:line="71" pos:column="33">long<pos:position pos:line="71" pos:column="37"/></name><operator pos:line="71" pos:column="37">)<pos:position pos:line="71" pos:column="38"/></operator><name pos:line="71" pos:column="38">bits<pos:position pos:line="71" pos:column="42"/></name> <operator pos:line="71" pos:column="43">-<pos:position pos:line="71" pos:column="44"/></operator> <operator pos:line="71" pos:column="45">(<pos:position pos:line="71" pos:column="46"/></operator><name pos:line="71" pos:column="46">long<pos:position pos:line="71" pos:column="50"/></name><operator pos:line="71" pos:column="50">)<pos:position pos:line="71" pos:column="51"/></operator><name><name pos:line="71" pos:column="51">tree<pos:position pos:line="71" pos:column="55"/></name><index pos:line="71" pos:column="55">[<expr><name pos:line="71" pos:column="56">m<pos:position pos:line="71" pos:column="57"/></name></expr>]<pos:position pos:line="71" pos:column="58"/></index></name><operator pos:line="71" pos:column="58">.<pos:position pos:line="71" pos:column="59"/></operator><name pos:line="71" pos:column="59">Len<pos:position pos:line="71" pos:column="62"/></name><operator pos:line="71" pos:column="62">)<pos:position pos:line="71" pos:column="63"/></operator>
                              <operator pos:line="72" pos:column="31">*<pos:position pos:line="72" pos:column="32"/></operator><operator pos:line="72" pos:column="32">(<pos:position pos:line="72" pos:column="33"/></operator><name pos:line="72" pos:column="33">long<pos:position pos:line="72" pos:column="37"/></name><operator pos:line="72" pos:column="37">)<pos:position pos:line="72" pos:column="38"/></operator><name><name pos:line="72" pos:column="38">tree<pos:position pos:line="72" pos:column="42"/></name><index pos:line="72" pos:column="42">[<expr><name pos:line="72" pos:column="43">m<pos:position pos:line="72" pos:column="44"/></name></expr>]<pos:position pos:line="72" pos:column="45"/></index></name><operator pos:line="72" pos:column="45">.<pos:position pos:line="72" pos:column="46"/></operator><name pos:line="72" pos:column="46">Freq<pos:position pos:line="72" pos:column="50"/></name></expr>;<pos:position pos:line="72" pos:column="51"/></expr_stmt>
                <expr_stmt><expr><name><name pos:line="73" pos:column="17">tree<pos:position pos:line="73" pos:column="21"/></name><index pos:line="73" pos:column="21">[<expr><name pos:line="73" pos:column="22">m<pos:position pos:line="73" pos:column="23"/></name></expr>]<pos:position pos:line="73" pos:column="24"/></index></name><operator pos:line="73" pos:column="24">.<pos:position pos:line="73" pos:column="25"/></operator><name pos:line="73" pos:column="25">Len<pos:position pos:line="73" pos:column="28"/></name> <operator pos:line="73" pos:column="29">=<pos:position pos:line="73" pos:column="30"/></operator> <operator pos:line="73" pos:column="31">(<pos:position pos:line="73" pos:column="32"/></operator><name pos:line="73" pos:column="32">ush<pos:position pos:line="73" pos:column="35"/></name><operator pos:line="73" pos:column="35">)<pos:position pos:line="73" pos:column="36"/></operator><name pos:line="73" pos:column="36">bits<pos:position pos:line="73" pos:column="40"/></name></expr>;<pos:position pos:line="73" pos:column="41"/></expr_stmt>
            }<pos:position pos:line="74" pos:column="14"/></block></then></if>
            <expr_stmt><expr><name pos:line="75" pos:column="13">n<pos:position pos:line="75" pos:column="14"/></name><operator pos:line="75" pos:column="14">--<pos:position pos:line="75" pos:column="16"/></operator></expr>;<pos:position pos:line="75" pos:column="17"/></expr_stmt>
        }<pos:position pos:line="76" pos:column="10"/></block></while>
    }<pos:position pos:line="77" pos:column="6"/></block></for>
}<pos:position pos:line="78" pos:column="2"/></block></unit>
