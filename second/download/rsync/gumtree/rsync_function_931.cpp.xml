<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_function_931.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">readfd_unbuffered<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name pos:line="1" pos:column="30">int<pos:position pos:line="1" pos:column="33"/></name></type> <name pos:line="1" pos:column="34">fd<pos:position pos:line="1" pos:column="36"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="38">char<pos:position pos:line="1" pos:column="42"/></name> <modifier pos:line="1" pos:column="43">*<pos:position pos:line="1" pos:column="44"/></modifier></type><name pos:line="1" pos:column="44">buf<pos:position pos:line="1" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="49">size_t<pos:position pos:line="1" pos:column="55"/></name></type> <name pos:line="1" pos:column="56">len<pos:position pos:line="1" pos:column="59"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="60"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">size_t<pos:position pos:line="3" pos:column="15"/></name></type> <name pos:line="3" pos:column="16">msg_bytes<pos:position pos:line="3" pos:column="25"/></name></decl>;<pos:position pos:line="3" pos:column="26"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">tag<pos:position pos:line="4" pos:column="16"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="18">cnt<pos:position pos:line="4" pos:column="21"/></name> <init pos:line="4" pos:column="22">= <expr><literal type="number" pos:line="4" pos:column="24">0<pos:position pos:line="4" pos:column="25"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="26"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">char<pos:position pos:line="5" pos:column="13"/></name></type> <name><name pos:line="5" pos:column="14">line<pos:position pos:line="5" pos:column="18"/></name><index pos:line="5" pos:column="18">[<expr><name pos:line="5" pos:column="19">BIGPATHBUFLEN<pos:position pos:line="5" pos:column="32"/></name></expr>]<pos:position pos:line="5" pos:column="33"/></index></name></decl>;<pos:position pos:line="5" pos:column="34"/></decl_stmt>

	<if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<expr><operator pos:line="7" pos:column="13">!<pos:position pos:line="7" pos:column="14"/></operator><name pos:line="7" pos:column="14">iobuf_in<pos:position pos:line="7" pos:column="22"/></name> <operator pos:line="7" pos:column="23">||<pos:position pos:line="7" pos:column="25"/></operator> <name pos:line="7" pos:column="26">fd<pos:position pos:line="7" pos:column="28"/></name> <operator pos:line="7" pos:column="29">!=<pos:position pos:line="7" pos:column="31"/></operator> <name pos:line="7" pos:column="32">iobuf_f_in<pos:position pos:line="7" pos:column="42"/></name></expr>)<pos:position pos:line="7" pos:column="43"/></condition><then pos:line="7" pos:column="43">
		<block type="pseudo"><return pos:line="8" pos:column="17">return <expr><call><name pos:line="8" pos:column="24">read_timeout<pos:position pos:line="8" pos:column="36"/></name><argument_list pos:line="8" pos:column="36">(<argument><expr><name pos:line="8" pos:column="37">fd<pos:position pos:line="8" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="41">buf<pos:position pos:line="8" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="46">len<pos:position pos:line="8" pos:column="49"/></name></expr></argument>)<pos:position pos:line="8" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="51"/></return></block></then></if>

	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><operator pos:line="10" pos:column="13">!<pos:position pos:line="10" pos:column="14"/></operator><name pos:line="10" pos:column="14">io_multiplexing_in<pos:position pos:line="10" pos:column="32"/></name> <operator pos:line="10" pos:column="33">&amp;&amp;<pos:position pos:line="10" pos:column="43"/></operator> <name pos:line="10" pos:column="36">iobuf_in_remaining<pos:position pos:line="10" pos:column="54"/></name> <operator pos:line="10" pos:column="55">==<pos:position pos:line="10" pos:column="57"/></operator> <literal type="number" pos:line="10" pos:column="58">0<pos:position pos:line="10" pos:column="59"/></literal></expr>)<pos:position pos:line="10" pos:column="60"/></condition><then pos:line="10" pos:column="60"> <block pos:line="10" pos:column="61">{
		<expr_stmt><expr><name pos:line="11" pos:column="17">iobuf_in_remaining<pos:position pos:line="11" pos:column="35"/></name> <operator pos:line="11" pos:column="36">=<pos:position pos:line="11" pos:column="37"/></operator> <call><name pos:line="11" pos:column="38">read_timeout<pos:position pos:line="11" pos:column="50"/></name><argument_list pos:line="11" pos:column="50">(<argument><expr><name pos:line="11" pos:column="51">fd<pos:position pos:line="11" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="55">iobuf_in<pos:position pos:line="11" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="65">iobuf_in_siz<pos:position pos:line="11" pos:column="77"/></name></expr></argument>)<pos:position pos:line="11" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="79"/></expr_stmt>
		<expr_stmt><expr><name pos:line="12" pos:column="17">iobuf_in_ndx<pos:position pos:line="12" pos:column="29"/></name> <operator pos:line="12" pos:column="30">=<pos:position pos:line="12" pos:column="31"/></operator> <literal type="number" pos:line="12" pos:column="32">0<pos:position pos:line="12" pos:column="33"/></literal></expr>;<pos:position pos:line="12" pos:column="34"/></expr_stmt>
	}<pos:position pos:line="13" pos:column="10"/></block></then></if>

	<while pos:line="15" pos:column="9">while <condition pos:line="15" pos:column="15">(<expr><name pos:line="15" pos:column="16">cnt<pos:position pos:line="15" pos:column="19"/></name> <operator pos:line="15" pos:column="20">==<pos:position pos:line="15" pos:column="22"/></operator> <literal type="number" pos:line="15" pos:column="23">0<pos:position pos:line="15" pos:column="24"/></literal></expr>)<pos:position pos:line="15" pos:column="25"/></condition> <block pos:line="15" pos:column="26">{
		<if pos:line="16" pos:column="17">if <condition pos:line="16" pos:column="20">(<expr><name pos:line="16" pos:column="21">iobuf_in_remaining<pos:position pos:line="16" pos:column="39"/></name></expr>)<pos:position pos:line="16" pos:column="40"/></condition><then pos:line="16" pos:column="40"> <block pos:line="16" pos:column="41">{
			<expr_stmt><expr><name pos:line="17" pos:column="25">len<pos:position pos:line="17" pos:column="28"/></name> <operator pos:line="17" pos:column="29">=<pos:position pos:line="17" pos:column="30"/></operator> <call><name pos:line="17" pos:column="31">MIN<pos:position pos:line="17" pos:column="34"/></name><argument_list pos:line="17" pos:column="34">(<argument><expr><name pos:line="17" pos:column="35">len<pos:position pos:line="17" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="40">iobuf_in_remaining<pos:position pos:line="17" pos:column="58"/></name></expr></argument>)<pos:position pos:line="17" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="60"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="18" pos:column="25">memcpy<pos:position pos:line="18" pos:column="31"/></name><argument_list pos:line="18" pos:column="31">(<argument><expr><name pos:line="18" pos:column="32">buf<pos:position pos:line="18" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="37">iobuf_in<pos:position pos:line="18" pos:column="45"/></name> <operator pos:line="18" pos:column="46">+<pos:position pos:line="18" pos:column="47"/></operator> <name pos:line="18" pos:column="48">iobuf_in_ndx<pos:position pos:line="18" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="62">len<pos:position pos:line="18" pos:column="65"/></name></expr></argument>)<pos:position pos:line="18" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="67"/></expr_stmt>
			<expr_stmt><expr><name pos:line="19" pos:column="25">iobuf_in_ndx<pos:position pos:line="19" pos:column="37"/></name> <operator pos:line="19" pos:column="38">+=<pos:position pos:line="19" pos:column="40"/></operator> <name pos:line="19" pos:column="41">len<pos:position pos:line="19" pos:column="44"/></name></expr>;<pos:position pos:line="19" pos:column="45"/></expr_stmt>
			<expr_stmt><expr><name pos:line="20" pos:column="25">iobuf_in_remaining<pos:position pos:line="20" pos:column="43"/></name> <operator pos:line="20" pos:column="44">-=<pos:position pos:line="20" pos:column="46"/></operator> <name pos:line="20" pos:column="47">len<pos:position pos:line="20" pos:column="50"/></name></expr>;<pos:position pos:line="20" pos:column="51"/></expr_stmt>
			<expr_stmt><expr><name pos:line="21" pos:column="25">cnt<pos:position pos:line="21" pos:column="28"/></name> <operator pos:line="21" pos:column="29">=<pos:position pos:line="21" pos:column="30"/></operator> <name pos:line="21" pos:column="31">len<pos:position pos:line="21" pos:column="34"/></name></expr>;<pos:position pos:line="21" pos:column="35"/></expr_stmt>
			<break pos:line="22" pos:column="25">break;<pos:position pos:line="22" pos:column="31"/></break>
		}<pos:position pos:line="23" pos:column="18"/></block></then></if>

		<expr_stmt><expr><call><name pos:line="25" pos:column="17">read_loop<pos:position pos:line="25" pos:column="26"/></name><argument_list pos:line="25" pos:column="26">(<argument><expr><name pos:line="25" pos:column="27">fd<pos:position pos:line="25" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="31">line<pos:position pos:line="25" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="25" pos:column="37">4<pos:position pos:line="25" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="40"/></expr_stmt>
		<expr_stmt><expr><name pos:line="26" pos:column="17">tag<pos:position pos:line="26" pos:column="20"/></name> <operator pos:line="26" pos:column="21">=<pos:position pos:line="26" pos:column="22"/></operator> <call><name pos:line="26" pos:column="23">IVAL<pos:position pos:line="26" pos:column="27"/></name><argument_list pos:line="26" pos:column="27">(<argument><expr><name pos:line="26" pos:column="28">line<pos:position pos:line="26" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="26" pos:column="34">0<pos:position pos:line="26" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="37"/></expr_stmt>

		<expr_stmt><expr><name pos:line="28" pos:column="17">msg_bytes<pos:position pos:line="28" pos:column="26"/></name> <operator pos:line="28" pos:column="27">=<pos:position pos:line="28" pos:column="28"/></operator> <name pos:line="28" pos:column="29">tag<pos:position pos:line="28" pos:column="32"/></name> <operator pos:line="28" pos:column="33">&amp;<pos:position pos:line="28" pos:column="38"/></operator> <literal type="number" pos:line="28" pos:column="35">0xFFFFFF<pos:position pos:line="28" pos:column="43"/></literal></expr>;<pos:position pos:line="28" pos:column="44"/></expr_stmt>
		<expr_stmt><expr><name pos:line="29" pos:column="17">tag<pos:position pos:line="29" pos:column="20"/></name> <operator pos:line="29" pos:column="21">=<pos:position pos:line="29" pos:column="22"/></operator> <operator pos:line="29" pos:column="23">(<pos:position pos:line="29" pos:column="24"/></operator><name pos:line="29" pos:column="24">tag<pos:position pos:line="29" pos:column="27"/></name> <operator pos:line="29" pos:column="28">&gt;&gt;<pos:position pos:line="29" pos:column="33"/></operator> <literal type="number" pos:line="29" pos:column="31">24<pos:position pos:line="29" pos:column="33"/></literal><operator pos:line="29" pos:column="33">)<pos:position pos:line="29" pos:column="34"/></operator> <operator pos:line="29" pos:column="35">-<pos:position pos:line="29" pos:column="36"/></operator> <name pos:line="29" pos:column="37">MPLEX_BASE<pos:position pos:line="29" pos:column="47"/></name></expr>;<pos:position pos:line="29" pos:column="48"/></expr_stmt>

		<switch pos:line="31" pos:column="17">switch <condition pos:line="31" pos:column="24">(<expr><name pos:line="31" pos:column="25">tag<pos:position pos:line="31" pos:column="28"/></name></expr>)<pos:position pos:line="31" pos:column="29"/></condition> <block pos:line="31" pos:column="30">{
		<case pos:line="32" pos:column="17">case <expr><name pos:line="32" pos:column="22">MSG_DATA<pos:position pos:line="32" pos:column="30"/></name></expr>:<pos:position pos:line="32" pos:column="31"/></case>
			<if pos:line="33" pos:column="25">if <condition pos:line="33" pos:column="28">(<expr><name pos:line="33" pos:column="29">msg_bytes<pos:position pos:line="33" pos:column="38"/></name> <operator pos:line="33" pos:column="39">&gt;<pos:position pos:line="33" pos:column="43"/></operator> <name pos:line="33" pos:column="41">iobuf_in_siz<pos:position pos:line="33" pos:column="53"/></name></expr>)<pos:position pos:line="33" pos:column="54"/></condition><then pos:line="33" pos:column="54"> <block pos:line="33" pos:column="55">{
				<if pos:line="34" pos:column="33">if <condition pos:line="34" pos:column="36">(<expr><operator pos:line="34" pos:column="37">!<pos:position pos:line="34" pos:column="38"/></operator><operator pos:line="34" pos:column="38">(<pos:position pos:line="34" pos:column="39"/></operator><name pos:line="34" pos:column="39">iobuf_in<pos:position pos:line="34" pos:column="47"/></name> <operator pos:line="34" pos:column="48">=<pos:position pos:line="34" pos:column="49"/></operator> <call><name pos:line="34" pos:column="50">realloc_array<pos:position pos:line="34" pos:column="63"/></name><argument_list pos:line="34" pos:column="63">(<argument><expr><name pos:line="34" pos:column="64">iobuf_in<pos:position pos:line="34" pos:column="72"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="74">char<pos:position pos:line="34" pos:column="78"/></name></expr></argument>,
							       <argument><expr><name pos:line="35" pos:column="64">msg_bytes<pos:position pos:line="35" pos:column="73"/></name></expr></argument>)<pos:position pos:line="35" pos:column="74"/></argument_list></call><operator pos:line="35" pos:column="74">)<pos:position pos:line="35" pos:column="75"/></operator></expr>)<pos:position pos:line="35" pos:column="76"/></condition><then pos:line="35" pos:column="76">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="36" pos:column="41">out_of_memory<pos:position pos:line="36" pos:column="54"/></name><argument_list pos:line="36" pos:column="54">(<argument><expr><literal type="string" pos:line="36" pos:column="55">"readfd_unbuffered"<pos:position pos:line="36" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="76"/></expr_stmt></block></then></if>
				<expr_stmt><expr><name pos:line="37" pos:column="33">iobuf_in_siz<pos:position pos:line="37" pos:column="45"/></name> <operator pos:line="37" pos:column="46">=<pos:position pos:line="37" pos:column="47"/></operator> <name pos:line="37" pos:column="48">msg_bytes<pos:position pos:line="37" pos:column="57"/></name></expr>;<pos:position pos:line="37" pos:column="58"/></expr_stmt>
			}<pos:position pos:line="38" pos:column="26"/></block></then></if>
			<expr_stmt><expr><call><name pos:line="39" pos:column="25">read_loop<pos:position pos:line="39" pos:column="34"/></name><argument_list pos:line="39" pos:column="34">(<argument><expr><name pos:line="39" pos:column="35">fd<pos:position pos:line="39" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="39">iobuf_in<pos:position pos:line="39" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="49">msg_bytes<pos:position pos:line="39" pos:column="58"/></name></expr></argument>)<pos:position pos:line="39" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="60"/></expr_stmt>
			<expr_stmt><expr><name pos:line="40" pos:column="25">iobuf_in_remaining<pos:position pos:line="40" pos:column="43"/></name> <operator pos:line="40" pos:column="44">=<pos:position pos:line="40" pos:column="45"/></operator> <name pos:line="40" pos:column="46">msg_bytes<pos:position pos:line="40" pos:column="55"/></name></expr>;<pos:position pos:line="40" pos:column="56"/></expr_stmt>
			<expr_stmt><expr><name pos:line="41" pos:column="25">iobuf_in_ndx<pos:position pos:line="41" pos:column="37"/></name> <operator pos:line="41" pos:column="38">=<pos:position pos:line="41" pos:column="39"/></operator> <literal type="number" pos:line="41" pos:column="40">0<pos:position pos:line="41" pos:column="41"/></literal></expr>;<pos:position pos:line="41" pos:column="42"/></expr_stmt>
			<break pos:line="42" pos:column="25">break;<pos:position pos:line="42" pos:column="31"/></break>
		<case pos:line="43" pos:column="17">case <expr><name pos:line="43" pos:column="22">MSG_NOOP<pos:position pos:line="43" pos:column="30"/></name></expr>:<pos:position pos:line="43" pos:column="31"/></case>
			<if pos:line="44" pos:column="25">if <condition pos:line="44" pos:column="28">(<expr><name pos:line="44" pos:column="29">msg_bytes<pos:position pos:line="44" pos:column="38"/></name> <operator pos:line="44" pos:column="39">!=<pos:position pos:line="44" pos:column="41"/></operator> <literal type="number" pos:line="44" pos:column="42">0<pos:position pos:line="44" pos:column="43"/></literal></expr>)<pos:position pos:line="44" pos:column="44"/></condition><then pos:line="44" pos:column="44">
				<block type="pseudo"><goto pos:line="45" pos:column="33">goto <name pos:line="45" pos:column="38">invalid_msg<pos:position pos:line="45" pos:column="49"/></name>;<pos:position pos:line="45" pos:column="50"/></goto></block></then></if>
			<if pos:line="46" pos:column="25">if <condition pos:line="46" pos:column="28">(<expr><name pos:line="46" pos:column="29">am_sender<pos:position pos:line="46" pos:column="38"/></name></expr>)<pos:position pos:line="46" pos:column="39"/></condition><then pos:line="46" pos:column="39">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="47" pos:column="33">maybe_send_keepalive<pos:position pos:line="47" pos:column="53"/></name><argument_list pos:line="47" pos:column="53">()<pos:position pos:line="47" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="56"/></expr_stmt></block></then></if>
			<break pos:line="48" pos:column="25">break;<pos:position pos:line="48" pos:column="31"/></break>
		<case pos:line="49" pos:column="17">case <expr><name pos:line="49" pos:column="22">MSG_IO_ERROR<pos:position pos:line="49" pos:column="34"/></name></expr>:<pos:position pos:line="49" pos:column="35"/></case>
			<if pos:line="50" pos:column="25">if <condition pos:line="50" pos:column="28">(<expr><name pos:line="50" pos:column="29">msg_bytes<pos:position pos:line="50" pos:column="38"/></name> <operator pos:line="50" pos:column="39">!=<pos:position pos:line="50" pos:column="41"/></operator> <literal type="number" pos:line="50" pos:column="42">4<pos:position pos:line="50" pos:column="43"/></literal></expr>)<pos:position pos:line="50" pos:column="44"/></condition><then pos:line="50" pos:column="44">
				<block type="pseudo"><goto pos:line="51" pos:column="33">goto <name pos:line="51" pos:column="38">invalid_msg<pos:position pos:line="51" pos:column="49"/></name>;<pos:position pos:line="51" pos:column="50"/></goto></block></then></if>
			<expr_stmt><expr><call><name pos:line="52" pos:column="25">read_loop<pos:position pos:line="52" pos:column="34"/></name><argument_list pos:line="52" pos:column="34">(<argument><expr><name pos:line="52" pos:column="35">fd<pos:position pos:line="52" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="39">line<pos:position pos:line="52" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="45">msg_bytes<pos:position pos:line="52" pos:column="54"/></name></expr></argument>)<pos:position pos:line="52" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="56"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="53" pos:column="25">send_msg_int<pos:position pos:line="53" pos:column="37"/></name><argument_list pos:line="53" pos:column="37">(<argument><expr><name pos:line="53" pos:column="38">MSG_IO_ERROR<pos:position pos:line="53" pos:column="50"/></name></expr></argument>, <argument><expr><call><name pos:line="53" pos:column="52">IVAL<pos:position pos:line="53" pos:column="56"/></name><argument_list pos:line="53" pos:column="56">(<argument><expr><name pos:line="53" pos:column="57">line<pos:position pos:line="53" pos:column="61"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="53" pos:column="63">0<pos:position pos:line="53" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="53" pos:column="65"/></argument_list></call></expr></argument>)<pos:position pos:line="53" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="67"/></expr_stmt>
			<expr_stmt><expr><name pos:line="54" pos:column="25">io_error<pos:position pos:line="54" pos:column="33"/></name> <operator pos:line="54" pos:column="34">|=<pos:position pos:line="54" pos:column="36"/></operator> <call><name pos:line="54" pos:column="37">IVAL<pos:position pos:line="54" pos:column="41"/></name><argument_list pos:line="54" pos:column="41">(<argument><expr><name pos:line="54" pos:column="42">line<pos:position pos:line="54" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="54" pos:column="48">0<pos:position pos:line="54" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="54" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="51"/></expr_stmt>
			<break pos:line="55" pos:column="25">break;<pos:position pos:line="55" pos:column="31"/></break>
		<case pos:line="56" pos:column="17">case <expr><name pos:line="56" pos:column="22">MSG_DELETED<pos:position pos:line="56" pos:column="33"/></name></expr>:<pos:position pos:line="56" pos:column="34"/></case>
			<if pos:line="57" pos:column="25">if <condition pos:line="57" pos:column="28">(<expr><name pos:line="57" pos:column="29">msg_bytes<pos:position pos:line="57" pos:column="38"/></name> <operator pos:line="57" pos:column="39">&gt;=<pos:position pos:line="57" pos:column="44"/></operator> <sizeof pos:line="57" pos:column="42">sizeof <name pos:line="57" pos:column="49">line<pos:position pos:line="57" pos:column="53"/></name></sizeof></expr>)<pos:position pos:line="57" pos:column="54"/></condition><then pos:line="57" pos:column="54">
				<block type="pseudo"><goto pos:line="58" pos:column="33">goto <name pos:line="58" pos:column="38">overflow<pos:position pos:line="58" pos:column="46"/></name>;<pos:position pos:line="58" pos:column="47"/></goto></block></then></if>
<cpp:ifdef pos:line="59" pos:column="1">#<cpp:directive pos:line="59" pos:column="2">ifdef<pos:position pos:line="59" pos:column="7"/></cpp:directive> <name pos:line="59" pos:column="8">ICONV_OPTION<pos:position pos:line="59" pos:column="20"/></name></cpp:ifdef>
			<if pos:line="60" pos:column="25">if <condition pos:line="60" pos:column="28">(<expr><name pos:line="60" pos:column="29">ic_recv<pos:position pos:line="60" pos:column="36"/></name> <operator pos:line="60" pos:column="37">!=<pos:position pos:line="60" pos:column="39"/></operator> <operator pos:line="60" pos:column="40">(<pos:position pos:line="60" pos:column="41"/></operator><name pos:line="60" pos:column="41">iconv_t<pos:position pos:line="60" pos:column="48"/></name><operator pos:line="60" pos:column="48">)<pos:position pos:line="60" pos:column="49"/></operator><operator pos:line="60" pos:column="49">-<pos:position pos:line="60" pos:column="50"/></operator><literal type="number" pos:line="60" pos:column="50">1<pos:position pos:line="60" pos:column="51"/></literal></expr>)<pos:position pos:line="60" pos:column="52"/></condition><then pos:line="60" pos:column="52"> <block pos:line="60" pos:column="53">{
				<decl_stmt><decl><type><name pos:line="61" pos:column="33">xbuf<pos:position pos:line="61" pos:column="37"/></name></type> <name pos:line="61" pos:column="38">outbuf<pos:position pos:line="61" pos:column="44"/></name></decl>, <decl><type ref="prev"/><name pos:line="61" pos:column="46">inbuf<pos:position pos:line="61" pos:column="51"/></name></decl>;<pos:position pos:line="61" pos:column="52"/></decl_stmt>
				<decl_stmt><decl><type><name pos:line="62" pos:column="33">char<pos:position pos:line="62" pos:column="37"/></name></type> <name><name pos:line="62" pos:column="38">ibuf<pos:position pos:line="62" pos:column="42"/></name><index pos:line="62" pos:column="42">[<expr><literal type="number" pos:line="62" pos:column="43">512<pos:position pos:line="62" pos:column="46"/></literal></expr>]<pos:position pos:line="62" pos:column="47"/></index></name></decl>;<pos:position pos:line="62" pos:column="48"/></decl_stmt>
				<decl_stmt><decl><type><name pos:line="63" pos:column="33">int<pos:position pos:line="63" pos:column="36"/></name></type> <name pos:line="63" pos:column="37">add_null<pos:position pos:line="63" pos:column="45"/></name> <init pos:line="63" pos:column="46">= <expr><literal type="number" pos:line="63" pos:column="48">0<pos:position pos:line="63" pos:column="49"/></literal></expr></init></decl>;<pos:position pos:line="63" pos:column="50"/></decl_stmt>

				<expr_stmt><expr><call><name pos:line="65" pos:column="33">INIT_CONST_XBUF<pos:position pos:line="65" pos:column="48"/></name><argument_list pos:line="65" pos:column="48">(<argument><expr><name pos:line="65" pos:column="49">outbuf<pos:position pos:line="65" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="57">line<pos:position pos:line="65" pos:column="61"/></name></expr></argument>)<pos:position pos:line="65" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="63"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="66" pos:column="33">INIT_XBUF<pos:position pos:line="66" pos:column="42"/></name><argument_list pos:line="66" pos:column="42">(<argument><expr><name pos:line="66" pos:column="43">inbuf<pos:position pos:line="66" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="50">ibuf<pos:position pos:line="66" pos:column="54"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="66" pos:column="56">0<pos:position pos:line="66" pos:column="57"/></literal></expr></argument>, <argument><expr><operator pos:line="66" pos:column="59">-<pos:position pos:line="66" pos:column="60"/></operator><literal type="number" pos:line="66" pos:column="60">1<pos:position pos:line="66" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="66" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="63"/></expr_stmt>

				<while pos:line="68" pos:column="33">while <condition pos:line="68" pos:column="39">(<expr><name pos:line="68" pos:column="40">msg_bytes<pos:position pos:line="68" pos:column="49"/></name></expr>)<pos:position pos:line="68" pos:column="50"/></condition> <block pos:line="68" pos:column="51">{
					<expr_stmt><expr><name><name pos:line="69" pos:column="41">inbuf<pos:position pos:line="69" pos:column="46"/></name><operator pos:line="69" pos:column="46">.<pos:position pos:line="69" pos:column="47"/></operator><name pos:line="69" pos:column="47">len<pos:position pos:line="69" pos:column="50"/></name></name> <operator pos:line="69" pos:column="51">=<pos:position pos:line="69" pos:column="52"/></operator> <ternary><condition><expr><name pos:line="69" pos:column="53">msg_bytes<pos:position pos:line="69" pos:column="62"/></name> <operator pos:line="69" pos:column="63">&gt;<pos:position pos:line="69" pos:column="67"/></operator> <sizeof pos:line="69" pos:column="65">sizeof <name pos:line="69" pos:column="72">ibuf<pos:position pos:line="69" pos:column="76"/></name></sizeof></expr>
						  ?<pos:position pos:line="70" pos:column="52"/></condition><then pos:line="70" pos:column="52"> <expr><sizeof pos:line="70" pos:column="53">sizeof <name pos:line="70" pos:column="60">ibuf<pos:position pos:line="70" pos:column="64"/></name></sizeof></expr> <pos:position pos:line="70" pos:column="65"/></then><else pos:line="70" pos:column="65">: <expr><name pos:line="70" pos:column="67">msg_bytes<pos:position pos:line="70" pos:column="76"/></name></expr></else></ternary></expr>;<pos:position pos:line="70" pos:column="77"/></expr_stmt>
					<expr_stmt><expr><call><name pos:line="71" pos:column="41">read_loop<pos:position pos:line="71" pos:column="50"/></name><argument_list pos:line="71" pos:column="50">(<argument><expr><name pos:line="71" pos:column="51">fd<pos:position pos:line="71" pos:column="53"/></name></expr></argument>, <argument><expr><name><name pos:line="71" pos:column="55">inbuf<pos:position pos:line="71" pos:column="60"/></name><operator pos:line="71" pos:column="60">.<pos:position pos:line="71" pos:column="61"/></operator><name pos:line="71" pos:column="61">buf<pos:position pos:line="71" pos:column="64"/></name></name></expr></argument>, <argument><expr><name><name pos:line="71" pos:column="66">inbuf<pos:position pos:line="71" pos:column="71"/></name><operator pos:line="71" pos:column="71">.<pos:position pos:line="71" pos:column="72"/></operator><name pos:line="71" pos:column="72">len<pos:position pos:line="71" pos:column="75"/></name></name></expr></argument>)<pos:position pos:line="71" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="77"/></expr_stmt>
					<if pos:line="72" pos:column="41">if <condition pos:line="72" pos:column="44">(<expr><operator pos:line="72" pos:column="45">!<pos:position pos:line="72" pos:column="46"/></operator><operator pos:line="72" pos:column="46">(<pos:position pos:line="72" pos:column="47"/></operator><name pos:line="72" pos:column="47">msg_bytes<pos:position pos:line="72" pos:column="56"/></name> <operator pos:line="72" pos:column="57">-=<pos:position pos:line="72" pos:column="59"/></operator> <name><name pos:line="72" pos:column="60">inbuf<pos:position pos:line="72" pos:column="65"/></name><operator pos:line="72" pos:column="65">.<pos:position pos:line="72" pos:column="66"/></operator><name pos:line="72" pos:column="66">len<pos:position pos:line="72" pos:column="69"/></name></name><operator pos:line="72" pos:column="69">)<pos:position pos:line="72" pos:column="70"/></operator>
					 <operator pos:line="73" pos:column="42">&amp;&amp;<pos:position pos:line="73" pos:column="52"/></operator> <operator pos:line="73" pos:column="45">!<pos:position pos:line="73" pos:column="46"/></operator><name><name pos:line="73" pos:column="46">ibuf<pos:position pos:line="73" pos:column="50"/></name><index pos:line="73" pos:column="50">[<expr><name><name pos:line="73" pos:column="51">inbuf<pos:position pos:line="73" pos:column="56"/></name><operator pos:line="73" pos:column="56">.<pos:position pos:line="73" pos:column="57"/></operator><name pos:line="73" pos:column="57">len<pos:position pos:line="73" pos:column="60"/></name></name><operator pos:line="73" pos:column="60">-<pos:position pos:line="73" pos:column="61"/></operator><literal type="number" pos:line="73" pos:column="61">1<pos:position pos:line="73" pos:column="62"/></literal></expr>]<pos:position pos:line="73" pos:column="63"/></index></name></expr>)<pos:position pos:line="73" pos:column="64"/></condition><then pos:line="73" pos:column="64">
						<block type="pseudo"><expr_stmt><expr><name><name pos:line="74" pos:column="49">inbuf<pos:position pos:line="74" pos:column="54"/></name><operator pos:line="74" pos:column="54">.<pos:position pos:line="74" pos:column="55"/></operator><name pos:line="74" pos:column="55">len<pos:position pos:line="74" pos:column="58"/></name></name><operator pos:line="74" pos:column="58">--<pos:position pos:line="74" pos:column="60"/></operator></expr><operator pos:line="74" pos:column="60">,<pos:position pos:line="74" pos:column="61"/></operator> <expr><name pos:line="74" pos:column="62">add_null<pos:position pos:line="74" pos:column="70"/></name> <operator pos:line="74" pos:column="71">=<pos:position pos:line="74" pos:column="72"/></operator> <literal type="number" pos:line="74" pos:column="73">1<pos:position pos:line="74" pos:column="74"/></literal></expr>;<pos:position pos:line="74" pos:column="75"/></expr_stmt></block></then></if>
					<if pos:line="75" pos:column="41">if <condition pos:line="75" pos:column="44">(<expr><call><name pos:line="75" pos:column="45">iconvbufs<pos:position pos:line="75" pos:column="54"/></name><argument_list pos:line="75" pos:column="54">(<argument><expr><name pos:line="75" pos:column="55">ic_send<pos:position pos:line="75" pos:column="62"/></name></expr></argument>, <argument><expr><operator pos:line="75" pos:column="64">&amp;<pos:position pos:line="75" pos:column="69"/></operator><name pos:line="75" pos:column="65">inbuf<pos:position pos:line="75" pos:column="70"/></name></expr></argument>, <argument><expr><operator pos:line="75" pos:column="72">&amp;<pos:position pos:line="75" pos:column="77"/></operator><name pos:line="75" pos:column="73">outbuf<pos:position pos:line="75" pos:column="79"/></name></expr></argument>,
					    <argument><expr><name pos:line="76" pos:column="45">ICB_INCLUDE_BAD<pos:position pos:line="76" pos:column="60"/></name> <operator pos:line="76" pos:column="61">|<pos:position pos:line="76" pos:column="62"/></operator> <name pos:line="76" pos:column="63">ICB_INCLUDE_INCOMPLETE<pos:position pos:line="76" pos:column="85"/></name></expr></argument>)<pos:position pos:line="76" pos:column="86"/></argument_list></call> <operator pos:line="76" pos:column="87">&lt;<pos:position pos:line="76" pos:column="91"/></operator> <literal type="number" pos:line="76" pos:column="89">0<pos:position pos:line="76" pos:column="90"/></literal></expr>)<pos:position pos:line="76" pos:column="91"/></condition><then pos:line="76" pos:column="91">
						<block type="pseudo"><goto pos:line="77" pos:column="49">goto <name pos:line="77" pos:column="54">overflow<pos:position pos:line="77" pos:column="62"/></name>;<pos:position pos:line="77" pos:column="63"/></goto></block></then></if>
				}<pos:position pos:line="78" pos:column="34"/></block></while>
				<if pos:line="79" pos:column="33">if <condition pos:line="79" pos:column="36">(<expr><name pos:line="79" pos:column="37">add_null<pos:position pos:line="79" pos:column="45"/></name></expr>)<pos:position pos:line="79" pos:column="46"/></condition><then pos:line="79" pos:column="46"> <block pos:line="79" pos:column="47">{
					<if pos:line="80" pos:column="41">if <condition pos:line="80" pos:column="44">(<expr><name><name pos:line="80" pos:column="45">outbuf<pos:position pos:line="80" pos:column="51"/></name><operator pos:line="80" pos:column="51">.<pos:position pos:line="80" pos:column="52"/></operator><name pos:line="80" pos:column="52">len<pos:position pos:line="80" pos:column="55"/></name></name> <operator pos:line="80" pos:column="56">==<pos:position pos:line="80" pos:column="58"/></operator> <name><name pos:line="80" pos:column="59">outbuf<pos:position pos:line="80" pos:column="65"/></name><operator pos:line="80" pos:column="65">.<pos:position pos:line="80" pos:column="66"/></operator><name pos:line="80" pos:column="66">size<pos:position pos:line="80" pos:column="70"/></name></name></expr>)<pos:position pos:line="80" pos:column="71"/></condition><then pos:line="80" pos:column="71">
						<block type="pseudo"><goto pos:line="81" pos:column="49">goto <name pos:line="81" pos:column="54">overflow<pos:position pos:line="81" pos:column="62"/></name>;<pos:position pos:line="81" pos:column="63"/></goto></block></then></if>
					<expr_stmt><expr><name><name pos:line="82" pos:column="41">outbuf<pos:position pos:line="82" pos:column="47"/></name><operator pos:line="82" pos:column="47">.<pos:position pos:line="82" pos:column="48"/></operator><name pos:line="82" pos:column="48">buf<pos:position pos:line="82" pos:column="51"/></name><index pos:line="82" pos:column="51">[<expr><name><name pos:line="82" pos:column="52">outbuf<pos:position pos:line="82" pos:column="58"/></name><operator pos:line="82" pos:column="58">.<pos:position pos:line="82" pos:column="59"/></operator><name pos:line="82" pos:column="59">len<pos:position pos:line="82" pos:column="62"/></name></name><operator pos:line="82" pos:column="62">++<pos:position pos:line="82" pos:column="64"/></operator></expr>]<pos:position pos:line="82" pos:column="65"/></index></name> <operator pos:line="82" pos:column="66">=<pos:position pos:line="82" pos:column="67"/></operator> <literal type="char" pos:line="82" pos:column="68">'\0'<pos:position pos:line="82" pos:column="72"/></literal></expr>;<pos:position pos:line="82" pos:column="73"/></expr_stmt>
				}<pos:position pos:line="83" pos:column="34"/></block></then></if>
				<expr_stmt><expr><name pos:line="84" pos:column="33">msg_bytes<pos:position pos:line="84" pos:column="42"/></name> <operator pos:line="84" pos:column="43">=<pos:position pos:line="84" pos:column="44"/></operator> <name><name pos:line="84" pos:column="45">outbuf<pos:position pos:line="84" pos:column="51"/></name><operator pos:line="84" pos:column="51">.<pos:position pos:line="84" pos:column="52"/></operator><name pos:line="84" pos:column="52">len<pos:position pos:line="84" pos:column="55"/></name></name></expr>;<pos:position pos:line="84" pos:column="56"/></expr_stmt>
			}<pos:position pos:line="85" pos:column="26"/></block></then> <else pos:line="85" pos:column="27">else
<cpp:endif pos:line="86" pos:column="1">#<cpp:directive pos:line="86" pos:column="2">endif<pos:position pos:line="86" pos:column="7"/></cpp:directive></cpp:endif>
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="87" pos:column="33">read_loop<pos:position pos:line="87" pos:column="42"/></name><argument_list pos:line="87" pos:column="42">(<argument><expr><name pos:line="87" pos:column="43">fd<pos:position pos:line="87" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="87" pos:column="47">line<pos:position pos:line="87" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="87" pos:column="53">msg_bytes<pos:position pos:line="87" pos:column="62"/></name></expr></argument>)<pos:position pos:line="87" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="64"/></expr_stmt></block></else></if>
			<comment type="block" pos:line="88" pos:column="25">/* A directory name was sent with the trailing null */</comment>
			<if pos:line="89" pos:column="25">if <condition pos:line="89" pos:column="28">(<expr><name pos:line="89" pos:column="29">msg_bytes<pos:position pos:line="89" pos:column="38"/></name> <operator pos:line="89" pos:column="39">&gt;<pos:position pos:line="89" pos:column="43"/></operator> <literal type="number" pos:line="89" pos:column="41">0<pos:position pos:line="89" pos:column="42"/></literal> <operator pos:line="89" pos:column="43">&amp;&amp;<pos:position pos:line="89" pos:column="53"/></operator> <operator pos:line="89" pos:column="46">!<pos:position pos:line="89" pos:column="47"/></operator><name><name pos:line="89" pos:column="47">line<pos:position pos:line="89" pos:column="51"/></name><index pos:line="89" pos:column="51">[<expr><name pos:line="89" pos:column="52">msg_bytes<pos:position pos:line="89" pos:column="61"/></name><operator pos:line="89" pos:column="61">-<pos:position pos:line="89" pos:column="62"/></operator><literal type="number" pos:line="89" pos:column="62">1<pos:position pos:line="89" pos:column="63"/></literal></expr>]<pos:position pos:line="89" pos:column="64"/></index></name></expr>)<pos:position pos:line="89" pos:column="65"/></condition><then pos:line="89" pos:column="65">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="90" pos:column="33">log_delete<pos:position pos:line="90" pos:column="43"/></name><argument_list pos:line="90" pos:column="43">(<argument><expr><name pos:line="90" pos:column="44">line<pos:position pos:line="90" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="90" pos:column="50">S_IFDIR<pos:position pos:line="90" pos:column="57"/></name></expr></argument>)<pos:position pos:line="90" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="59"/></expr_stmt></block></then>
			<else pos:line="91" pos:column="25">else <block pos:line="91" pos:column="30">{
				<expr_stmt><expr><name><name pos:line="92" pos:column="33">line<pos:position pos:line="92" pos:column="37"/></name><index pos:line="92" pos:column="37">[<expr><name pos:line="92" pos:column="38">msg_bytes<pos:position pos:line="92" pos:column="47"/></name></expr>]<pos:position pos:line="92" pos:column="48"/></index></name> <operator pos:line="92" pos:column="49">=<pos:position pos:line="92" pos:column="50"/></operator> <literal type="char" pos:line="92" pos:column="51">'\0'<pos:position pos:line="92" pos:column="55"/></literal></expr>;<pos:position pos:line="92" pos:column="56"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="93" pos:column="33">log_delete<pos:position pos:line="93" pos:column="43"/></name><argument_list pos:line="93" pos:column="43">(<argument><expr><name pos:line="93" pos:column="44">line<pos:position pos:line="93" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="93" pos:column="50">S_IFREG<pos:position pos:line="93" pos:column="57"/></name></expr></argument>)<pos:position pos:line="93" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="59"/></expr_stmt>
			}<pos:position pos:line="94" pos:column="26"/></block></else></if>
			<break pos:line="95" pos:column="25">break;<pos:position pos:line="95" pos:column="31"/></break>
		<case pos:line="96" pos:column="17">case <expr><name pos:line="96" pos:column="22">MSG_SUCCESS<pos:position pos:line="96" pos:column="33"/></name></expr>:<pos:position pos:line="96" pos:column="34"/></case>
			<if pos:line="97" pos:column="25">if <condition pos:line="97" pos:column="28">(<expr><name pos:line="97" pos:column="29">msg_bytes<pos:position pos:line="97" pos:column="38"/></name> <operator pos:line="97" pos:column="39">!=<pos:position pos:line="97" pos:column="41"/></operator> <literal type="number" pos:line="97" pos:column="42">4<pos:position pos:line="97" pos:column="43"/></literal></expr>)<pos:position pos:line="97" pos:column="44"/></condition><then pos:line="97" pos:column="44"> <block pos:line="97" pos:column="45">{
			  <label><name pos:line="98" pos:column="27">invalid_msg<pos:position pos:line="98" pos:column="38"/></name>:<pos:position pos:line="98" pos:column="39"/></label>
				<expr_stmt><expr><call><name pos:line="99" pos:column="33">rprintf<pos:position pos:line="99" pos:column="40"/></name><argument_list pos:line="99" pos:column="40">(<argument><expr><name pos:line="99" pos:column="41">FERROR<pos:position pos:line="99" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="99" pos:column="49">"invalid multi-message %d:%ld [%s]\n"<pos:position pos:line="99" pos:column="86"/></literal></expr></argument>,
					<argument><expr><name pos:line="100" pos:column="41">tag<pos:position pos:line="100" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="100" pos:column="46">(<pos:position pos:line="100" pos:column="47"/></operator><name pos:line="100" pos:column="47">long<pos:position pos:line="100" pos:column="51"/></name><operator pos:line="100" pos:column="51">)<pos:position pos:line="100" pos:column="52"/></operator><name pos:line="100" pos:column="52">msg_bytes<pos:position pos:line="100" pos:column="61"/></name></expr></argument>, <argument><expr><call><name pos:line="100" pos:column="63">who_am_i<pos:position pos:line="100" pos:column="71"/></name><argument_list pos:line="100" pos:column="71">()<pos:position pos:line="100" pos:column="73"/></argument_list></call></expr></argument>)<pos:position pos:line="100" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="100" pos:column="75"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="101" pos:column="33">exit_cleanup<pos:position pos:line="101" pos:column="45"/></name><argument_list pos:line="101" pos:column="45">(<argument><expr><name pos:line="101" pos:column="46">RERR_STREAMIO<pos:position pos:line="101" pos:column="59"/></name></expr></argument>)<pos:position pos:line="101" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="61"/></expr_stmt>
			}<pos:position pos:line="102" pos:column="26"/></block></then></if>
			<expr_stmt><expr><call><name pos:line="103" pos:column="25">read_loop<pos:position pos:line="103" pos:column="34"/></name><argument_list pos:line="103" pos:column="34">(<argument><expr><name pos:line="103" pos:column="35">fd<pos:position pos:line="103" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="103" pos:column="39">line<pos:position pos:line="103" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="103" pos:column="45">msg_bytes<pos:position pos:line="103" pos:column="54"/></name></expr></argument>)<pos:position pos:line="103" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="103" pos:column="56"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="104" pos:column="25">successful_send<pos:position pos:line="104" pos:column="40"/></name><argument_list pos:line="104" pos:column="40">(<argument><expr><call><name pos:line="104" pos:column="41">IVAL<pos:position pos:line="104" pos:column="45"/></name><argument_list pos:line="104" pos:column="45">(<argument><expr><name pos:line="104" pos:column="46">line<pos:position pos:line="104" pos:column="50"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="104" pos:column="52">0<pos:position pos:line="104" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="104" pos:column="54"/></argument_list></call></expr></argument>)<pos:position pos:line="104" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="104" pos:column="56"/></expr_stmt>
			<break pos:line="105" pos:column="25">break;<pos:position pos:line="105" pos:column="31"/></break>
		<case pos:line="106" pos:column="17">case <expr><name pos:line="106" pos:column="22">MSG_NO_SEND<pos:position pos:line="106" pos:column="33"/></name></expr>:<pos:position pos:line="106" pos:column="34"/></case>
			<if pos:line="107" pos:column="25">if <condition pos:line="107" pos:column="28">(<expr><name pos:line="107" pos:column="29">msg_bytes<pos:position pos:line="107" pos:column="38"/></name> <operator pos:line="107" pos:column="39">!=<pos:position pos:line="107" pos:column="41"/></operator> <literal type="number" pos:line="107" pos:column="42">4<pos:position pos:line="107" pos:column="43"/></literal></expr>)<pos:position pos:line="107" pos:column="44"/></condition><then pos:line="107" pos:column="44">
				<block type="pseudo"><goto pos:line="108" pos:column="33">goto <name pos:line="108" pos:column="38">invalid_msg<pos:position pos:line="108" pos:column="49"/></name>;<pos:position pos:line="108" pos:column="50"/></goto></block></then></if>
			<expr_stmt><expr><call><name pos:line="109" pos:column="25">read_loop<pos:position pos:line="109" pos:column="34"/></name><argument_list pos:line="109" pos:column="34">(<argument><expr><name pos:line="109" pos:column="35">fd<pos:position pos:line="109" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="109" pos:column="39">line<pos:position pos:line="109" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="109" pos:column="45">msg_bytes<pos:position pos:line="109" pos:column="54"/></name></expr></argument>)<pos:position pos:line="109" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="109" pos:column="56"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="110" pos:column="25">send_msg_int<pos:position pos:line="110" pos:column="37"/></name><argument_list pos:line="110" pos:column="37">(<argument><expr><name pos:line="110" pos:column="38">MSG_NO_SEND<pos:position pos:line="110" pos:column="49"/></name></expr></argument>, <argument><expr><call><name pos:line="110" pos:column="51">IVAL<pos:position pos:line="110" pos:column="55"/></name><argument_list pos:line="110" pos:column="55">(<argument><expr><name pos:line="110" pos:column="56">line<pos:position pos:line="110" pos:column="60"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="110" pos:column="62">0<pos:position pos:line="110" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="110" pos:column="64"/></argument_list></call></expr></argument>)<pos:position pos:line="110" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="110" pos:column="66"/></expr_stmt>
			<break pos:line="111" pos:column="25">break;<pos:position pos:line="111" pos:column="31"/></break>
		<case pos:line="112" pos:column="17">case <expr><name pos:line="112" pos:column="22">MSG_INFO<pos:position pos:line="112" pos:column="30"/></name></expr>:<pos:position pos:line="112" pos:column="31"/></case>
		<case pos:line="113" pos:column="17">case <expr><name pos:line="113" pos:column="22">MSG_ERROR<pos:position pos:line="113" pos:column="31"/></name></expr>:<pos:position pos:line="113" pos:column="32"/></case>
		<case pos:line="114" pos:column="17">case <expr><name pos:line="114" pos:column="22">MSG_ERROR_XFER<pos:position pos:line="114" pos:column="36"/></name></expr>:<pos:position pos:line="114" pos:column="37"/></case>
		<case pos:line="115" pos:column="17">case <expr><name pos:line="115" pos:column="22">MSG_WARNING<pos:position pos:line="115" pos:column="33"/></name></expr>:<pos:position pos:line="115" pos:column="34"/></case>
			<if pos:line="116" pos:column="25">if <condition pos:line="116" pos:column="28">(<expr><name pos:line="116" pos:column="29">msg_bytes<pos:position pos:line="116" pos:column="38"/></name> <operator pos:line="116" pos:column="39">&gt;=<pos:position pos:line="116" pos:column="44"/></operator> <sizeof pos:line="116" pos:column="42">sizeof <name pos:line="116" pos:column="49">line<pos:position pos:line="116" pos:column="53"/></name></sizeof></expr>)<pos:position pos:line="116" pos:column="54"/></condition><then pos:line="116" pos:column="54"> <block pos:line="116" pos:column="55">{
			    <label><name pos:line="117" pos:column="29">overflow<pos:position pos:line="117" pos:column="37"/></name>:<pos:position pos:line="117" pos:column="38"/></label>
				<expr_stmt><expr><call><name pos:line="118" pos:column="33">rprintf<pos:position pos:line="118" pos:column="40"/></name><argument_list pos:line="118" pos:column="40">(<argument><expr><name pos:line="118" pos:column="41">FERROR<pos:position pos:line="118" pos:column="47"/></name></expr></argument>,
					<argument><expr><literal type="string" pos:line="119" pos:column="41">"multiplexing overflow %d:%ld [%s]\n"<pos:position pos:line="119" pos:column="78"/></literal></expr></argument>,
					<argument><expr><name pos:line="120" pos:column="41">tag<pos:position pos:line="120" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="120" pos:column="46">(<pos:position pos:line="120" pos:column="47"/></operator><name pos:line="120" pos:column="47">long<pos:position pos:line="120" pos:column="51"/></name><operator pos:line="120" pos:column="51">)<pos:position pos:line="120" pos:column="52"/></operator><name pos:line="120" pos:column="52">msg_bytes<pos:position pos:line="120" pos:column="61"/></name></expr></argument>, <argument><expr><call><name pos:line="120" pos:column="63">who_am_i<pos:position pos:line="120" pos:column="71"/></name><argument_list pos:line="120" pos:column="71">()<pos:position pos:line="120" pos:column="73"/></argument_list></call></expr></argument>)<pos:position pos:line="120" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="120" pos:column="75"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="121" pos:column="33">exit_cleanup<pos:position pos:line="121" pos:column="45"/></name><argument_list pos:line="121" pos:column="45">(<argument><expr><name pos:line="121" pos:column="46">RERR_STREAMIO<pos:position pos:line="121" pos:column="59"/></name></expr></argument>)<pos:position pos:line="121" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="121" pos:column="61"/></expr_stmt>
			}<pos:position pos:line="122" pos:column="26"/></block></then></if>
			<expr_stmt><expr><call><name pos:line="123" pos:column="25">read_loop<pos:position pos:line="123" pos:column="34"/></name><argument_list pos:line="123" pos:column="34">(<argument><expr><name pos:line="123" pos:column="35">fd<pos:position pos:line="123" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="123" pos:column="39">line<pos:position pos:line="123" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="123" pos:column="45">msg_bytes<pos:position pos:line="123" pos:column="54"/></name></expr></argument>)<pos:position pos:line="123" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="123" pos:column="56"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="124" pos:column="25">rwrite<pos:position pos:line="124" pos:column="31"/></name><argument_list pos:line="124" pos:column="31">(<argument><expr><operator pos:line="124" pos:column="32">(<pos:position pos:line="124" pos:column="33"/></operator>enum <name pos:line="124" pos:column="38">logcode<pos:position pos:line="124" pos:column="45"/></name><operator pos:line="124" pos:column="45">)<pos:position pos:line="124" pos:column="46"/></operator><name pos:line="124" pos:column="46">tag<pos:position pos:line="124" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="124" pos:column="51">line<pos:position pos:line="124" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="124" pos:column="57">msg_bytes<pos:position pos:line="124" pos:column="66"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="124" pos:column="68">1<pos:position pos:line="124" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="124" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="124" pos:column="71"/></expr_stmt>
			<if pos:line="125" pos:column="25">if <condition pos:line="125" pos:column="28">(<expr><name pos:line="125" pos:column="29">first_message<pos:position pos:line="125" pos:column="42"/></name></expr>)<pos:position pos:line="125" pos:column="43"/></condition><then pos:line="125" pos:column="43"> <block pos:line="125" pos:column="44">{
				<if pos:line="126" pos:column="33">if <condition pos:line="126" pos:column="36">(<expr><name pos:line="126" pos:column="37">list_only<pos:position pos:line="126" pos:column="46"/></name> <operator pos:line="126" pos:column="47">&amp;&amp;<pos:position pos:line="126" pos:column="57"/></operator> <operator pos:line="126" pos:column="50">!<pos:position pos:line="126" pos:column="51"/></operator><name pos:line="126" pos:column="51">am_sender<pos:position pos:line="126" pos:column="60"/></name> <operator pos:line="126" pos:column="61">&amp;&amp;<pos:position pos:line="126" pos:column="71"/></operator> <name pos:line="126" pos:column="64">tag<pos:position pos:line="126" pos:column="67"/></name> <operator pos:line="126" pos:column="68">==<pos:position pos:line="126" pos:column="70"/></operator> <literal type="number" pos:line="126" pos:column="71">1<pos:position pos:line="126" pos:column="72"/></literal></expr>)<pos:position pos:line="126" pos:column="73"/></condition><then pos:line="126" pos:column="73"> <block pos:line="126" pos:column="74">{
					<expr_stmt><expr><name><name pos:line="127" pos:column="41">line<pos:position pos:line="127" pos:column="45"/></name><index pos:line="127" pos:column="45">[<expr><name pos:line="127" pos:column="46">msg_bytes<pos:position pos:line="127" pos:column="55"/></name></expr>]<pos:position pos:line="127" pos:column="56"/></index></name> <operator pos:line="127" pos:column="57">=<pos:position pos:line="127" pos:column="58"/></operator> <literal type="char" pos:line="127" pos:column="59">'\0'<pos:position pos:line="127" pos:column="63"/></literal></expr>;<pos:position pos:line="127" pos:column="64"/></expr_stmt>
					<expr_stmt><expr><call><name pos:line="128" pos:column="41">check_for_d_option_error<pos:position pos:line="128" pos:column="65"/></name><argument_list pos:line="128" pos:column="65">(<argument><expr><name pos:line="128" pos:column="66">line<pos:position pos:line="128" pos:column="70"/></name></expr></argument>)<pos:position pos:line="128" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="128" pos:column="72"/></expr_stmt>
				}<pos:position pos:line="129" pos:column="34"/></block></then></if>
				<expr_stmt><expr><name pos:line="130" pos:column="33">first_message<pos:position pos:line="130" pos:column="46"/></name> <operator pos:line="130" pos:column="47">=<pos:position pos:line="130" pos:column="48"/></operator> <literal type="number" pos:line="130" pos:column="49">0<pos:position pos:line="130" pos:column="50"/></literal></expr>;<pos:position pos:line="130" pos:column="51"/></expr_stmt>
			}<pos:position pos:line="131" pos:column="26"/></block></then></if>
			<break pos:line="132" pos:column="25">break;<pos:position pos:line="132" pos:column="31"/></break>
		<default pos:line="133" pos:column="17">default:<pos:position pos:line="133" pos:column="25"/></default>
			<expr_stmt><expr><call><name pos:line="134" pos:column="25">rprintf<pos:position pos:line="134" pos:column="32"/></name><argument_list pos:line="134" pos:column="32">(<argument><expr><name pos:line="134" pos:column="33">FERROR<pos:position pos:line="134" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="134" pos:column="41">"unexpected tag %d [%s]\n"<pos:position pos:line="134" pos:column="67"/></literal></expr></argument>,
				<argument><expr><name pos:line="135" pos:column="33">tag<pos:position pos:line="135" pos:column="36"/></name></expr></argument>, <argument><expr><call><name pos:line="135" pos:column="38">who_am_i<pos:position pos:line="135" pos:column="46"/></name><argument_list pos:line="135" pos:column="46">()<pos:position pos:line="135" pos:column="48"/></argument_list></call></expr></argument>)<pos:position pos:line="135" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="135" pos:column="50"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="136" pos:column="25">exit_cleanup<pos:position pos:line="136" pos:column="37"/></name><argument_list pos:line="136" pos:column="37">(<argument><expr><name pos:line="136" pos:column="38">RERR_STREAMIO<pos:position pos:line="136" pos:column="51"/></name></expr></argument>)<pos:position pos:line="136" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="136" pos:column="53"/></expr_stmt>
		}<pos:position pos:line="137" pos:column="18"/></block></switch>
	}<pos:position pos:line="138" pos:column="10"/></block></while>

	<if pos:line="140" pos:column="9">if <condition pos:line="140" pos:column="12">(<expr><name pos:line="140" pos:column="13">iobuf_in_remaining<pos:position pos:line="140" pos:column="31"/></name> <operator pos:line="140" pos:column="32">==<pos:position pos:line="140" pos:column="34"/></operator> <literal type="number" pos:line="140" pos:column="35">0<pos:position pos:line="140" pos:column="36"/></literal></expr>)<pos:position pos:line="140" pos:column="37"/></condition><then pos:line="140" pos:column="37">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="141" pos:column="17">io_flush<pos:position pos:line="141" pos:column="25"/></name><argument_list pos:line="141" pos:column="25">(<argument><expr><name pos:line="141" pos:column="26">NORMAL_FLUSH<pos:position pos:line="141" pos:column="38"/></name></expr></argument>)<pos:position pos:line="141" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="141" pos:column="40"/></expr_stmt></block></then></if>

	<return pos:line="143" pos:column="9">return <expr><name pos:line="143" pos:column="16">cnt<pos:position pos:line="143" pos:column="19"/></name></expr>;<pos:position pos:line="143" pos:column="20"/></return>
}<pos:position pos:line="144" pos:column="2"/></block></function></unit>
