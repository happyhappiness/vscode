<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_97_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">parse_filter_file<pos:position pos:line="1" pos:column="23"/></name><parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><name pos:line="1" pos:column="24">filter_rule_list<pos:position pos:line="1" pos:column="40"/></name> <modifier pos:line="1" pos:column="41">*<pos:position pos:line="1" pos:column="42"/></modifier></type><name pos:line="1" pos:column="42">listp<pos:position pos:line="1" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="49">const<pos:position pos:line="1" pos:column="54"/></specifier> <name pos:line="1" pos:column="55">char<pos:position pos:line="1" pos:column="59"/></name> <modifier pos:line="1" pos:column="60">*<pos:position pos:line="1" pos:column="61"/></modifier></type><name pos:line="1" pos:column="61">fname<pos:position pos:line="1" pos:column="66"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="68">const<pos:position pos:line="1" pos:column="73"/></specifier> <name pos:line="1" pos:column="74">filter_rule<pos:position pos:line="1" pos:column="85"/></name> <modifier pos:line="1" pos:column="86">*<pos:position pos:line="1" pos:column="87"/></modifier><specifier pos:line="1" pos:column="87">template<pos:position pos:line="1" pos:column="95"/></specifier></type></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="97">int<pos:position pos:line="1" pos:column="100"/></name></type> <name pos:line="1" pos:column="101">xflags<pos:position pos:line="1" pos:column="107"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="108"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">FILE<pos:position pos:line="3" pos:column="13"/></name> <modifier pos:line="3" pos:column="14">*<pos:position pos:line="3" pos:column="15"/></modifier></type><name pos:line="3" pos:column="15">fp<pos:position pos:line="3" pos:column="17"/></name></decl>;<pos:position pos:line="3" pos:column="18"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name></type> <name><name pos:line="4" pos:column="14">line<pos:position pos:line="4" pos:column="18"/></name><index pos:line="4" pos:column="18">[<expr><name pos:line="4" pos:column="19">BIGPATHBUFLEN<pos:position pos:line="4" pos:column="32"/></name></expr>]<pos:position pos:line="4" pos:column="33"/></index></name></decl>;<pos:position pos:line="4" pos:column="34"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">char<pos:position pos:line="5" pos:column="13"/></name> <modifier pos:line="5" pos:column="14">*<pos:position pos:line="5" pos:column="15"/></modifier></type><name pos:line="5" pos:column="15">eob<pos:position pos:line="5" pos:column="18"/></name> <init pos:line="5" pos:column="19">= <expr><name pos:line="5" pos:column="21">line<pos:position pos:line="5" pos:column="25"/></name> <operator pos:line="5" pos:column="26">+<pos:position pos:line="5" pos:column="27"/></operator> <sizeof pos:line="5" pos:column="28">sizeof <name pos:line="5" pos:column="35">line<pos:position pos:line="5" pos:column="39"/></name></sizeof> <operator pos:line="5" pos:column="40">-<pos:position pos:line="5" pos:column="41"/></operator> <literal type="number" pos:line="5" pos:column="42">1<pos:position pos:line="5" pos:column="43"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="44"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">BOOL<pos:position pos:line="6" pos:column="13"/></name></type> <name pos:line="6" pos:column="14">word_split<pos:position pos:line="6" pos:column="24"/></name> <init pos:line="6" pos:column="25">= <expr><operator pos:line="6" pos:column="27">(<pos:position pos:line="6" pos:column="28"/></operator><template pos:line="6" pos:column="28">template-&gt;<parameter><type><name pos:line="6" pos:column="38">rflags<pos:position pos:line="6" pos:column="44"/></name> <modifier pos:line="6" pos:column="45">&amp;<pos:position pos:line="6" pos:column="50"/></modifier></type> <name pos:line="6" pos:column="47">FILTRULE_WORD_SPLIT<pos:position pos:line="6" pos:column="66"/></name></parameter>) <expr_stmt><expr><operator pos:line="6" pos:column="68">!=<pos:position pos:line="6" pos:column="70"/></operator> <literal type="number" pos:line="6" pos:column="71">0<pos:position pos:line="6" pos:column="72"/></literal></expr>;<pos:position pos:line="6" pos:column="73"/></expr_stmt></template></expr></init></decl></decl_stmt>

	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><operator pos:line="8" pos:column="13">!<pos:position pos:line="8" pos:column="14"/></operator><name pos:line="8" pos:column="14">fname<pos:position pos:line="8" pos:column="19"/></name> <operator pos:line="8" pos:column="20">||<pos:position pos:line="8" pos:column="22"/></operator> <operator pos:line="8" pos:column="23">!<pos:position pos:line="8" pos:column="24"/></operator><operator pos:line="8" pos:column="24">*<pos:position pos:line="8" pos:column="25"/></operator><name pos:line="8" pos:column="25">fname<pos:position pos:line="8" pos:column="30"/></name></expr>)<pos:position pos:line="8" pos:column="31"/></condition><then pos:line="8" pos:column="31">
		<block type="pseudo"><return pos:line="9" pos:column="17">return;<pos:position pos:line="9" pos:column="24"/></return></block></then></if>

	<if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><operator pos:line="11" pos:column="13">*<pos:position pos:line="11" pos:column="14"/></operator><name pos:line="11" pos:column="14">fname<pos:position pos:line="11" pos:column="19"/></name> <operator pos:line="11" pos:column="20">!=<pos:position pos:line="11" pos:column="22"/></operator> <literal type="char" pos:line="11" pos:column="23">'-'<pos:position pos:line="11" pos:column="26"/></literal> <operator pos:line="11" pos:column="27">||<pos:position pos:line="11" pos:column="29"/></operator> <name><name pos:line="11" pos:column="30">fname<pos:position pos:line="11" pos:column="35"/></name><index pos:line="11" pos:column="35">[<expr><literal type="number" pos:line="11" pos:column="36">1<pos:position pos:line="11" pos:column="37"/></literal></expr>]<pos:position pos:line="11" pos:column="38"/></index></name> <operator pos:line="11" pos:column="39">||<pos:position pos:line="11" pos:column="41"/></operator> <name pos:line="11" pos:column="42">am_server<pos:position pos:line="11" pos:column="51"/></name></expr>)<pos:position pos:line="11" pos:column="52"/></condition><then pos:line="11" pos:column="52"> <block pos:line="11" pos:column="53">{
		<if pos:line="12" pos:column="17">if <condition pos:line="12" pos:column="20">(<expr><name><name pos:line="12" pos:column="21">daemon_filter_list<pos:position pos:line="12" pos:column="39"/></name><operator pos:line="12" pos:column="39">.<pos:position pos:line="12" pos:column="40"/></operator><name pos:line="12" pos:column="40">head<pos:position pos:line="12" pos:column="44"/></name></name></expr>)<pos:position pos:line="12" pos:column="45"/></condition><then pos:line="12" pos:column="45"> <block pos:line="12" pos:column="46">{
			<expr_stmt><expr><call><name pos:line="13" pos:column="25">strlcpy<pos:position pos:line="13" pos:column="32"/></name><argument_list pos:line="13" pos:column="32">(<argument><expr><name pos:line="13" pos:column="33">line<pos:position pos:line="13" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="39">fname<pos:position pos:line="13" pos:column="44"/></name></expr></argument>, <argument><expr><sizeof pos:line="13" pos:column="46">sizeof <name pos:line="13" pos:column="53">line<pos:position pos:line="13" pos:column="57"/></name></sizeof></expr></argument>)<pos:position pos:line="13" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="59"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="14" pos:column="25">clean_fname<pos:position pos:line="14" pos:column="36"/></name><argument_list pos:line="14" pos:column="36">(<argument><expr><name pos:line="14" pos:column="37">line<pos:position pos:line="14" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="43">CFN_COLLAPSE_DOT_DOT_DIRS<pos:position pos:line="14" pos:column="68"/></name></expr></argument>)<pos:position pos:line="14" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="70"/></expr_stmt>
			<if pos:line="15" pos:column="25">if <condition pos:line="15" pos:column="28">(<expr><call><name pos:line="15" pos:column="29">check_filter<pos:position pos:line="15" pos:column="41"/></name><argument_list pos:line="15" pos:column="41">(<argument><expr><operator pos:line="15" pos:column="42">&amp;<pos:position pos:line="15" pos:column="47"/></operator><name pos:line="15" pos:column="43">daemon_filter_list<pos:position pos:line="15" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="63">FLOG<pos:position pos:line="15" pos:column="67"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="69">line<pos:position pos:line="15" pos:column="73"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="15" pos:column="75">0<pos:position pos:line="15" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="77"/></argument_list></call> <operator pos:line="15" pos:column="78">&lt;<pos:position pos:line="15" pos:column="82"/></operator> <literal type="number" pos:line="15" pos:column="80">0<pos:position pos:line="15" pos:column="81"/></literal></expr>)<pos:position pos:line="15" pos:column="82"/></condition><then pos:line="15" pos:column="82">
				<block type="pseudo"><expr_stmt><expr><name pos:line="16" pos:column="33">fp<pos:position pos:line="16" pos:column="35"/></name> <operator pos:line="16" pos:column="36">=<pos:position pos:line="16" pos:column="37"/></operator> <name pos:line="16" pos:column="38">NULL<pos:position pos:line="16" pos:column="42"/></name></expr>;<pos:position pos:line="16" pos:column="43"/></expr_stmt></block></then>
			<else pos:line="17" pos:column="25">else
				<block type="pseudo"><expr_stmt><expr><name pos:line="18" pos:column="33">fp<pos:position pos:line="18" pos:column="35"/></name> <operator pos:line="18" pos:column="36">=<pos:position pos:line="18" pos:column="37"/></operator> <call><name pos:line="18" pos:column="38">fopen<pos:position pos:line="18" pos:column="43"/></name><argument_list pos:line="18" pos:column="43">(<argument><expr><name pos:line="18" pos:column="44">line<pos:position pos:line="18" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="18" pos:column="50">"rb"<pos:position pos:line="18" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="56"/></expr_stmt></block></else></if>
		}<pos:position pos:line="19" pos:column="18"/></block></then> <else pos:line="19" pos:column="19">else
			<block type="pseudo"><expr_stmt><expr><name pos:line="20" pos:column="25">fp<pos:position pos:line="20" pos:column="27"/></name> <operator pos:line="20" pos:column="28">=<pos:position pos:line="20" pos:column="29"/></operator> <call><name pos:line="20" pos:column="30">fopen<pos:position pos:line="20" pos:column="35"/></name><argument_list pos:line="20" pos:column="35">(<argument><expr><name pos:line="20" pos:column="36">fname<pos:position pos:line="20" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="43">"rb"<pos:position pos:line="20" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="49"/></expr_stmt></block></else></if>
	}<pos:position pos:line="21" pos:column="10"/></block></then> <else pos:line="21" pos:column="11">else
		<block type="pseudo"><expr_stmt><expr><name pos:line="22" pos:column="17">fp<pos:position pos:line="22" pos:column="19"/></name> <operator pos:line="22" pos:column="20">=<pos:position pos:line="22" pos:column="21"/></operator> <name pos:line="22" pos:column="22">stdin<pos:position pos:line="22" pos:column="27"/></name></expr>;<pos:position pos:line="22" pos:column="28"/></expr_stmt></block></else></if>

	<if pos:line="24" pos:column="9">if <condition pos:line="24" pos:column="12">(<expr><call><name pos:line="24" pos:column="13">DEBUG_GTE<pos:position pos:line="24" pos:column="22"/></name><argument_list pos:line="24" pos:column="22">(<argument><expr><name pos:line="24" pos:column="23">FILTER<pos:position pos:line="24" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="24" pos:column="31">2<pos:position pos:line="24" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="24" pos:column="34"/></condition><then pos:line="24" pos:column="34"> <block pos:line="24" pos:column="35">{
		<macro><name pos:line="25" pos:column="17">rprintf<pos:position pos:line="25" pos:column="24"/></name><argument_list pos:line="25" pos:column="24">(<argument pos:line="25" pos:column="25">FINFO<pos:position pos:line="25" pos:column="30"/></argument>, <argument><literal type="string" pos:line="25" pos:column="32">"[%s] parse_filter_file(%s,%x,%x)%s\n"<pos:position pos:line="25" pos:column="70"/></literal></argument>,
			<argument pos:line="26" pos:column="25">who_am_i()<pos:position pos:line="26" pos:column="35"/></argument>, <argument pos:line="26" pos:column="37">fname<pos:position pos:line="26" pos:column="42"/></argument>, <argument pos:line="26" pos:column="44">template-&gt;rflags<pos:position pos:line="26" pos:column="60"/></argument>, <argument pos:line="26" pos:column="62">xflags<pos:position pos:line="26" pos:column="68"/></argument>,
			<argument pos:line="27" pos:column="25">fp ? <literal type="string" pos:line="27" pos:column="30">""<pos:position pos:line="27" pos:column="32"/></literal> : <literal type="string" pos:line="27" pos:column="35">" [not found]"<pos:position pos:line="27" pos:column="49"/></literal></argument>)<pos:position pos:line="27" pos:column="50"/></argument_list></macro><empty_stmt pos:line="27" pos:column="50">;<pos:position pos:line="27" pos:column="51"/></empty_stmt>
	}<pos:position pos:line="28" pos:column="10"/></block></then></if>

	<if pos:line="30" pos:column="9">if <condition pos:line="30" pos:column="12">(<expr><operator pos:line="30" pos:column="13">!<pos:position pos:line="30" pos:column="14"/></operator><name pos:line="30" pos:column="14">fp<pos:position pos:line="30" pos:column="16"/></name></expr>)<pos:position pos:line="30" pos:column="17"/></condition><then pos:line="30" pos:column="17"> <block pos:line="30" pos:column="18">{
		<if pos:line="31" pos:column="17">if <condition pos:line="31" pos:column="20">(<expr><name pos:line="31" pos:column="21">xflags<pos:position pos:line="31" pos:column="27"/></name> <operator pos:line="31" pos:column="28">&amp;<pos:position pos:line="31" pos:column="33"/></operator> <name pos:line="31" pos:column="30">XFLG_FATAL_ERRORS<pos:position pos:line="31" pos:column="47"/></name></expr>)<pos:position pos:line="31" pos:column="48"/></condition><then pos:line="31" pos:column="48"> <block pos:line="31" pos:column="49">{
			<macro><name pos:line="32" pos:column="25">rsyserr<pos:position pos:line="32" pos:column="32"/></name><argument_list pos:line="32" pos:column="32">(<argument pos:line="32" pos:column="33">FERROR<pos:position pos:line="32" pos:column="39"/></argument>, <argument pos:line="32" pos:column="41">errno<pos:position pos:line="32" pos:column="46"/></argument>,
				<argument><literal type="string" pos:line="33" pos:column="33">"failed to open %sclude file %s"<pos:position pos:line="33" pos:column="65"/></literal></argument>,
				<argument pos:line="34" pos:column="33">template-&gt;rflags &amp; FILTRULE_INCLUDE ? <literal type="string" pos:line="34" pos:column="71">"in"<pos:position pos:line="34" pos:column="75"/></literal> : <literal type="string" pos:line="34" pos:column="78">"ex"<pos:position pos:line="34" pos:column="82"/></literal></argument>,
				<argument pos:line="35" pos:column="33">fname<pos:position pos:line="35" pos:column="38"/></argument>)<pos:position pos:line="35" pos:column="39"/></argument_list></macro><empty_stmt pos:line="35" pos:column="39">;<pos:position pos:line="35" pos:column="40"/></empty_stmt>
			<expr_stmt><expr><call><name pos:line="36" pos:column="25">exit_cleanup<pos:position pos:line="36" pos:column="37"/></name><argument_list pos:line="36" pos:column="37">(<argument><expr><name pos:line="36" pos:column="38">RERR_FILEIO<pos:position pos:line="36" pos:column="49"/></name></expr></argument>)<pos:position pos:line="36" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="51"/></expr_stmt>
		}<pos:position pos:line="37" pos:column="18"/></block></then></if>
		<return pos:line="38" pos:column="17">return;<pos:position pos:line="38" pos:column="24"/></return>
	}<pos:position pos:line="39" pos:column="10"/></block></then></if>
	<expr_stmt><expr><name><name pos:line="40" pos:column="9">dirbuf<pos:position pos:line="40" pos:column="15"/></name><index pos:line="40" pos:column="15">[<expr><name pos:line="40" pos:column="16">dirbuf_len<pos:position pos:line="40" pos:column="26"/></name></expr>]<pos:position pos:line="40" pos:column="27"/></index></name> <operator pos:line="40" pos:column="28">=<pos:position pos:line="40" pos:column="29"/></operator> <literal type="char" pos:line="40" pos:column="30">'\0'<pos:position pos:line="40" pos:column="34"/></literal></expr>;<pos:position pos:line="40" pos:column="35"/></expr_stmt>

	<while pos:line="42" pos:column="9">while <condition pos:line="42" pos:column="15">(<expr><literal type="number" pos:line="42" pos:column="16">1<pos:position pos:line="42" pos:column="17"/></literal></expr>)<pos:position pos:line="42" pos:column="18"/></condition> <block pos:line="42" pos:column="19">{
		<decl_stmt><decl><type><name pos:line="43" pos:column="17">char<pos:position pos:line="43" pos:column="21"/></name> <modifier pos:line="43" pos:column="22">*<pos:position pos:line="43" pos:column="23"/></modifier></type><name pos:line="43" pos:column="23">s<pos:position pos:line="43" pos:column="24"/></name> <init pos:line="43" pos:column="25">= <expr><name pos:line="43" pos:column="27">line<pos:position pos:line="43" pos:column="31"/></name></expr></init></decl>;<pos:position pos:line="43" pos:column="32"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="44" pos:column="17">int<pos:position pos:line="44" pos:column="20"/></name></type> <name pos:line="44" pos:column="21">ch<pos:position pos:line="44" pos:column="23"/></name></decl>, <decl><type ref="prev"/><name pos:line="44" pos:column="25">overflow<pos:position pos:line="44" pos:column="33"/></name> <init pos:line="44" pos:column="34">= <expr><literal type="number" pos:line="44" pos:column="36">0<pos:position pos:line="44" pos:column="37"/></literal></expr></init></decl>;<pos:position pos:line="44" pos:column="38"/></decl_stmt>
		<while pos:line="45" pos:column="17">while <condition pos:line="45" pos:column="23">(<expr><literal type="number" pos:line="45" pos:column="24">1<pos:position pos:line="45" pos:column="25"/></literal></expr>)<pos:position pos:line="45" pos:column="26"/></condition> <block pos:line="45" pos:column="27">{
			<if pos:line="46" pos:column="25">if <condition pos:line="46" pos:column="28">(<expr><operator pos:line="46" pos:column="29">(<pos:position pos:line="46" pos:column="30"/></operator><name pos:line="46" pos:column="30">ch<pos:position pos:line="46" pos:column="32"/></name> <operator pos:line="46" pos:column="33">=<pos:position pos:line="46" pos:column="34"/></operator> <call><name pos:line="46" pos:column="35">getc<pos:position pos:line="46" pos:column="39"/></name><argument_list pos:line="46" pos:column="39">(<argument><expr><name pos:line="46" pos:column="40">fp<pos:position pos:line="46" pos:column="42"/></name></expr></argument>)<pos:position pos:line="46" pos:column="43"/></argument_list></call><operator pos:line="46" pos:column="43">)<pos:position pos:line="46" pos:column="44"/></operator> <operator pos:line="46" pos:column="45">==<pos:position pos:line="46" pos:column="47"/></operator> <name pos:line="46" pos:column="48">EOF<pos:position pos:line="46" pos:column="51"/></name></expr>)<pos:position pos:line="46" pos:column="52"/></condition><then pos:line="46" pos:column="52"> <block pos:line="46" pos:column="53">{
				<if pos:line="47" pos:column="33">if <condition pos:line="47" pos:column="36">(<expr><call><name pos:line="47" pos:column="37">ferror<pos:position pos:line="47" pos:column="43"/></name><argument_list pos:line="47" pos:column="43">(<argument><expr><name pos:line="47" pos:column="44">fp<pos:position pos:line="47" pos:column="46"/></name></expr></argument>)<pos:position pos:line="47" pos:column="47"/></argument_list></call> <operator pos:line="47" pos:column="48">&amp;&amp;<pos:position pos:line="47" pos:column="58"/></operator> <name pos:line="47" pos:column="51">errno<pos:position pos:line="47" pos:column="56"/></name> <operator pos:line="47" pos:column="57">==<pos:position pos:line="47" pos:column="59"/></operator> <name pos:line="47" pos:column="60">EINTR<pos:position pos:line="47" pos:column="65"/></name></expr>)<pos:position pos:line="47" pos:column="66"/></condition><then pos:line="47" pos:column="66"> <block pos:line="47" pos:column="67">{
					<expr_stmt><expr><call><name pos:line="48" pos:column="41">clearerr<pos:position pos:line="48" pos:column="49"/></name><argument_list pos:line="48" pos:column="49">(<argument><expr><name pos:line="48" pos:column="50">fp<pos:position pos:line="48" pos:column="52"/></name></expr></argument>)<pos:position pos:line="48" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="54"/></expr_stmt>
					<continue pos:line="49" pos:column="41">continue;<pos:position pos:line="49" pos:column="50"/></continue>
				}<pos:position pos:line="50" pos:column="34"/></block></then></if>
				<break pos:line="51" pos:column="33">break;<pos:position pos:line="51" pos:column="39"/></break>
			}<pos:position pos:line="52" pos:column="26"/></block></then></if>
			<if pos:line="53" pos:column="25">if <condition pos:line="53" pos:column="28">(<expr><name pos:line="53" pos:column="29">word_split<pos:position pos:line="53" pos:column="39"/></name> <operator pos:line="53" pos:column="40">&amp;&amp;<pos:position pos:line="53" pos:column="50"/></operator> <call><name pos:line="53" pos:column="43">isspace<pos:position pos:line="53" pos:column="50"/></name><argument_list pos:line="53" pos:column="50">(<argument><expr><name pos:line="53" pos:column="51">ch<pos:position pos:line="53" pos:column="53"/></name></expr></argument>)<pos:position pos:line="53" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="53" pos:column="55"/></condition><then pos:line="53" pos:column="55">
				<block type="pseudo"><break pos:line="54" pos:column="33">break;<pos:position pos:line="54" pos:column="39"/></break></block></then></if>
			<if pos:line="55" pos:column="25">if <condition pos:line="55" pos:column="28">(<expr><ternary><condition><expr><name pos:line="55" pos:column="29">eol_nulls<pos:position pos:line="55" pos:column="38"/></name></expr>?<pos:position pos:line="55" pos:column="39"/></condition><then pos:line="55" pos:column="39"> <expr><operator pos:line="55" pos:column="40">!<pos:position pos:line="55" pos:column="41"/></operator><name pos:line="55" pos:column="41">ch<pos:position pos:line="55" pos:column="43"/></name></expr> <pos:position pos:line="55" pos:column="44"/></then><else pos:line="55" pos:column="44">: <expr><operator pos:line="55" pos:column="46">(<pos:position pos:line="55" pos:column="47"/></operator><name pos:line="55" pos:column="47">ch<pos:position pos:line="55" pos:column="49"/></name> <operator pos:line="55" pos:column="50">==<pos:position pos:line="55" pos:column="52"/></operator> <literal type="char" pos:line="55" pos:column="53">'\n'<pos:position pos:line="55" pos:column="57"/></literal> <operator pos:line="55" pos:column="58">||<pos:position pos:line="55" pos:column="60"/></operator> <name pos:line="55" pos:column="61">ch<pos:position pos:line="55" pos:column="63"/></name> <operator pos:line="55" pos:column="64">==<pos:position pos:line="55" pos:column="66"/></operator> <literal type="char" pos:line="55" pos:column="67">'\r'<pos:position pos:line="55" pos:column="71"/></literal><operator pos:line="55" pos:column="71">)<pos:position pos:line="55" pos:column="72"/></operator></expr></else></ternary></expr>)<pos:position pos:line="55" pos:column="73"/></condition><then pos:line="55" pos:column="73">
				<block type="pseudo"><break pos:line="56" pos:column="33">break;<pos:position pos:line="56" pos:column="39"/></break></block></then></if>
			<if pos:line="57" pos:column="25">if <condition pos:line="57" pos:column="28">(<expr><name pos:line="57" pos:column="29">s<pos:position pos:line="57" pos:column="30"/></name> <operator pos:line="57" pos:column="31">&lt;<pos:position pos:line="57" pos:column="35"/></operator> <name pos:line="57" pos:column="33">eob<pos:position pos:line="57" pos:column="36"/></name></expr>)<pos:position pos:line="57" pos:column="37"/></condition><then pos:line="57" pos:column="37">
				<block type="pseudo"><expr_stmt><expr><operator pos:line="58" pos:column="33">*<pos:position pos:line="58" pos:column="34"/></operator><name pos:line="58" pos:column="34">s<pos:position pos:line="58" pos:column="35"/></name><operator pos:line="58" pos:column="35">++<pos:position pos:line="58" pos:column="37"/></operator> <operator pos:line="58" pos:column="38">=<pos:position pos:line="58" pos:column="39"/></operator> <name pos:line="58" pos:column="40">ch<pos:position pos:line="58" pos:column="42"/></name></expr>;<pos:position pos:line="58" pos:column="43"/></expr_stmt></block></then>
			<else pos:line="59" pos:column="25">else
				<block type="pseudo"><expr_stmt><expr><name pos:line="60" pos:column="33">overflow<pos:position pos:line="60" pos:column="41"/></name> <operator pos:line="60" pos:column="42">=<pos:position pos:line="60" pos:column="43"/></operator> <literal type="number" pos:line="60" pos:column="44">1<pos:position pos:line="60" pos:column="45"/></literal></expr>;<pos:position pos:line="60" pos:column="46"/></expr_stmt></block></else></if>
		}<pos:position pos:line="61" pos:column="18"/></block></while>
		<if pos:line="62" pos:column="17">if <condition pos:line="62" pos:column="20">(<expr><name pos:line="62" pos:column="21">overflow<pos:position pos:line="62" pos:column="29"/></name></expr>)<pos:position pos:line="62" pos:column="30"/></condition><then pos:line="62" pos:column="30"> <block pos:line="62" pos:column="31">{
			<expr_stmt><expr><call><name pos:line="63" pos:column="25">rprintf<pos:position pos:line="63" pos:column="32"/></name><argument_list pos:line="63" pos:column="32">(<argument><expr><name pos:line="63" pos:column="33">FERROR<pos:position pos:line="63" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="63" pos:column="41">"discarding over-long filter: %s...\n"<pos:position pos:line="63" pos:column="79"/></literal></expr></argument>, <argument><expr><name pos:line="63" pos:column="81">line<pos:position pos:line="63" pos:column="85"/></name></expr></argument>)<pos:position pos:line="63" pos:column="86"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="87"/></expr_stmt>
			<expr_stmt><expr><name pos:line="64" pos:column="25">s<pos:position pos:line="64" pos:column="26"/></name> <operator pos:line="64" pos:column="27">=<pos:position pos:line="64" pos:column="28"/></operator> <name pos:line="64" pos:column="29">line<pos:position pos:line="64" pos:column="33"/></name></expr>;<pos:position pos:line="64" pos:column="34"/></expr_stmt>
		}<pos:position pos:line="65" pos:column="18"/></block></then></if>
		<expr_stmt><expr><operator pos:line="66" pos:column="17">*<pos:position pos:line="66" pos:column="18"/></operator><name pos:line="66" pos:column="18">s<pos:position pos:line="66" pos:column="19"/></name> <operator pos:line="66" pos:column="20">=<pos:position pos:line="66" pos:column="21"/></operator> <literal type="char" pos:line="66" pos:column="22">'\0'<pos:position pos:line="66" pos:column="26"/></literal></expr>;<pos:position pos:line="66" pos:column="27"/></expr_stmt>
		<comment type="block" pos:line="67" pos:column="17">/* Skip an empty token and (when line parsing) comments. */</comment>
		<if pos:line="68" pos:column="17">if <condition pos:line="68" pos:column="20">(<expr><operator pos:line="68" pos:column="21">*<pos:position pos:line="68" pos:column="22"/></operator><name pos:line="68" pos:column="22">line<pos:position pos:line="68" pos:column="26"/></name> <operator pos:line="68" pos:column="27">&amp;&amp;<pos:position pos:line="68" pos:column="37"/></operator> <operator pos:line="68" pos:column="30">(<pos:position pos:line="68" pos:column="31"/></operator><name pos:line="68" pos:column="31">word_split<pos:position pos:line="68" pos:column="41"/></name> <operator pos:line="68" pos:column="42">||<pos:position pos:line="68" pos:column="44"/></operator> <operator pos:line="68" pos:column="45">(<pos:position pos:line="68" pos:column="46"/></operator><operator pos:line="68" pos:column="46">*<pos:position pos:line="68" pos:column="47"/></operator><name pos:line="68" pos:column="47">line<pos:position pos:line="68" pos:column="51"/></name> <operator pos:line="68" pos:column="52">!=<pos:position pos:line="68" pos:column="54"/></operator> <literal type="char" pos:line="68" pos:column="55">';'<pos:position pos:line="68" pos:column="58"/></literal> <operator pos:line="68" pos:column="59">&amp;&amp;<pos:position pos:line="68" pos:column="69"/></operator> <operator pos:line="68" pos:column="62">*<pos:position pos:line="68" pos:column="63"/></operator><name pos:line="68" pos:column="63">line<pos:position pos:line="68" pos:column="67"/></name> <operator pos:line="68" pos:column="68">!=<pos:position pos:line="68" pos:column="70"/></operator> <literal type="char" pos:line="68" pos:column="71">'#'<pos:position pos:line="68" pos:column="74"/></literal><operator pos:line="68" pos:column="74">)<pos:position pos:line="68" pos:column="75"/></operator><operator pos:line="68" pos:column="75">)<pos:position pos:line="68" pos:column="76"/></operator></expr>)<pos:position pos:line="68" pos:column="77"/></condition><then pos:line="68" pos:column="77">
			<block type="pseudo"><macro><name pos:line="69" pos:column="25">parse_filter_str<pos:position pos:line="69" pos:column="41"/></name><argument_list pos:line="69" pos:column="41">(<argument pos:line="69" pos:column="42">listp<pos:position pos:line="69" pos:column="47"/></argument>, <argument pos:line="69" pos:column="49">line<pos:position pos:line="69" pos:column="53"/></argument>, <argument pos:line="69" pos:column="55">template<pos:position pos:line="69" pos:column="63"/></argument>, <argument pos:line="69" pos:column="65">xflags<pos:position pos:line="69" pos:column="71"/></argument>)<pos:position pos:line="69" pos:column="72"/></argument_list></macro><empty_stmt pos:line="69" pos:column="72">;<pos:position pos:line="69" pos:column="73"/></empty_stmt></block></then></if>
		<if pos:line="70" pos:column="17">if <condition pos:line="70" pos:column="20">(<expr><name pos:line="70" pos:column="21">ch<pos:position pos:line="70" pos:column="23"/></name> <operator pos:line="70" pos:column="24">==<pos:position pos:line="70" pos:column="26"/></operator> <name pos:line="70" pos:column="27">EOF<pos:position pos:line="70" pos:column="30"/></name></expr>)<pos:position pos:line="70" pos:column="31"/></condition><then pos:line="70" pos:column="31">
			<block type="pseudo"><break pos:line="71" pos:column="25">break;<pos:position pos:line="71" pos:column="31"/></break></block></then></if>
	}<pos:position pos:line="72" pos:column="10"/></block></while>
	<expr_stmt><expr><call><name pos:line="73" pos:column="9">fclose<pos:position pos:line="73" pos:column="15"/></name><argument_list pos:line="73" pos:column="15">(<argument><expr><name pos:line="73" pos:column="16">fp<pos:position pos:line="73" pos:column="18"/></name></expr></argument>)<pos:position pos:line="73" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="20"/></expr_stmt>
}<pos:position pos:line="74" pos:column="2"/></block></function></unit>
