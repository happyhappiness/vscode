<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_190_rsync-1.6.9.cpp" pos:tabs="8"><function_decl><type><name pos:line="1" pos:column="1">local<pos:position pos:line="1" pos:column="6"/></name> <name pos:line="1" pos:column="7">voidpf<pos:position pos:line="1" pos:column="13"/></name></type> <name pos:line="1" pos:column="14">falloc<pos:position pos:line="1" pos:column="20"/></name><parameter_list pos:line="1" pos:column="20">(<parameter><decl><type><name pos:line="1" pos:column="21">q<pos:position pos:line="1" pos:column="22"/></name></type></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="24">n<pos:position pos:line="1" pos:column="25"/></name></type></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="27">s<pos:position pos:line="1" pos:column="28"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="29"/></parameter_list>
<decl_stmt><decl><type><name pos:line="2" pos:column="1">voidpf<pos:position pos:line="2" pos:column="7"/></name></type> <name pos:line="2" pos:column="8">q<pos:position pos:line="2" pos:column="9"/></name></decl>;<pos:position pos:line="2" pos:column="10"/></decl_stmt>        <comment type="block" pos:line="2" pos:column="18">/* opaque pointer (not used) */</comment>
<decl_stmt><decl><type><name pos:line="3" pos:column="1">uInt<pos:position pos:line="3" pos:column="5"/></name></type> <name pos:line="3" pos:column="6">n<pos:position pos:line="3" pos:column="7"/></name></decl>;<pos:position pos:line="3" pos:column="8"/></decl_stmt>         <comment type="block" pos:line="3" pos:column="17">/* number of items */</comment>
<decl_stmt><decl><type><name pos:line="4" pos:column="1">uInt<pos:position pos:line="4" pos:column="5"/></name></type> <name pos:line="4" pos:column="6">s<pos:position pos:line="4" pos:column="7"/></name></decl>;<pos:position pos:line="4" pos:column="8"/></decl_stmt>         <comment type="block" pos:line="4" pos:column="17">/* size of item */</comment>
<block pos:line="5" pos:column="1">{
  <expr_stmt><expr><call><name pos:line="6" pos:column="3">Assert<pos:position pos:line="6" pos:column="9"/></name><argument_list pos:line="6" pos:column="9">(<argument><expr><name pos:line="6" pos:column="10">s<pos:position pos:line="6" pos:column="11"/></name> <operator pos:line="6" pos:column="12">==<pos:position pos:line="6" pos:column="14"/></operator> <sizeof pos:line="6" pos:column="15">sizeof<argument_list pos:line="6" pos:column="21">(<argument><expr><name pos:line="6" pos:column="22">inflate_huft<pos:position pos:line="6" pos:column="34"/></name></expr></argument>)<pos:position pos:line="6" pos:column="35"/></argument_list></sizeof> <operator pos:line="6" pos:column="36">&amp;&amp;<pos:position pos:line="6" pos:column="46"/></operator> <name pos:line="6" pos:column="39">n<pos:position pos:line="6" pos:column="40"/></name> <operator pos:line="6" pos:column="41">&lt;=<pos:position pos:line="6" pos:column="46"/></operator> <name pos:line="6" pos:column="44">fixed_left<pos:position pos:line="6" pos:column="54"/></name></expr></argument>,
         <argument><expr><literal type="string" pos:line="7" pos:column="10">"inflate_trees falloc overflow"<pos:position pos:line="7" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="43"/></expr_stmt>
  <if pos:line="8" pos:column="3">if <condition pos:line="8" pos:column="6">(<expr><name pos:line="8" pos:column="7">q<pos:position pos:line="8" pos:column="8"/></name></expr>)<pos:position pos:line="8" pos:column="9"/></condition><then pos:line="8" pos:column="9"> <block type="pseudo"><expr_stmt><expr><name pos:line="8" pos:column="10">s<pos:position pos:line="8" pos:column="11"/></name><operator pos:line="8" pos:column="11">++<pos:position pos:line="8" pos:column="13"/></operator></expr>;<pos:position pos:line="8" pos:column="14"/></expr_stmt></block></then></if> <comment type="block" pos:line="8" pos:column="15">/* to make some compilers happy */</comment>
  <expr_stmt><expr><name pos:line="9" pos:column="3">fixed_left<pos:position pos:line="9" pos:column="13"/></name> <operator pos:line="9" pos:column="14">-=<pos:position pos:line="9" pos:column="16"/></operator> <name pos:line="9" pos:column="17">n<pos:position pos:line="9" pos:column="18"/></name></expr>;<pos:position pos:line="9" pos:column="19"/></expr_stmt>
  <return pos:line="10" pos:column="3">return <expr><call pos:line="10" pos:column="10">(<name pos:line="10" pos:column="11">voidpf<pos:position pos:line="10" pos:column="17"/></name>)<argument_list pos:line="10" pos:column="18">(<argument><expr><name pos:line="10" pos:column="19">fixed_mem<pos:position pos:line="10" pos:column="28"/></name> <operator pos:line="10" pos:column="29">+<pos:position pos:line="10" pos:column="30"/></operator> <name pos:line="10" pos:column="31">fixed_left<pos:position pos:line="10" pos:column="41"/></name></expr></argument>)<pos:position pos:line="10" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="43"/></return>
}<pos:position pos:line="11" pos:column="2"/></block></function_decl></unit>
