<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_12_rsync-2.6.7.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">daemon_main<pos:position pos:line="1" pos:column="16"/></name><parameter_list pos:line="1" pos:column="16">(<parameter><decl><type><name pos:line="1" pos:column="17">void<pos:position pos:line="1" pos:column="21"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="22"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">char<pos:position pos:line="3" pos:column="13"/></name> <modifier pos:line="3" pos:column="14">*<pos:position pos:line="3" pos:column="15"/></modifier></type><name pos:line="3" pos:column="15">pid_file<pos:position pos:line="3" pos:column="23"/></name></decl>;<pos:position pos:line="3" pos:column="24"/></decl_stmt>

	<if pos:line="5" pos:column="9">if <condition pos:line="5" pos:column="12">(<expr><call><name pos:line="5" pos:column="13">is_a_socket<pos:position pos:line="5" pos:column="24"/></name><argument_list pos:line="5" pos:column="24">(<argument><expr><name pos:line="5" pos:column="25">STDIN_FILENO<pos:position pos:line="5" pos:column="37"/></name></expr></argument>)<pos:position pos:line="5" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="5" pos:column="39"/></condition><then pos:line="5" pos:column="39"> <block pos:line="5" pos:column="40">{
		<decl_stmt><decl><type><name pos:line="6" pos:column="17">int<pos:position pos:line="6" pos:column="20"/></name></type> <name pos:line="6" pos:column="21">i<pos:position pos:line="6" pos:column="22"/></name></decl>;<pos:position pos:line="6" pos:column="23"/></decl_stmt>

		<comment type="block" pos:line="8" pos:column="17">/* we are running via inetd - close off stdout and
		 * stderr so that library functions (and getopt) don't
		 * try to use them. Redirect them to /dev/null */</comment>
		<for pos:line="11" pos:column="17">for <control pos:line="11" pos:column="21">(<init><expr><name pos:line="11" pos:column="22">i<pos:position pos:line="11" pos:column="23"/></name> <operator pos:line="11" pos:column="24">=<pos:position pos:line="11" pos:column="25"/></operator> <literal type="number" pos:line="11" pos:column="26">1<pos:position pos:line="11" pos:column="27"/></literal></expr>;<pos:position pos:line="11" pos:column="28"/></init> <condition><expr><name pos:line="11" pos:column="29">i<pos:position pos:line="11" pos:column="30"/></name> <operator pos:line="11" pos:column="31">&lt;<pos:position pos:line="11" pos:column="35"/></operator> <literal type="number" pos:line="11" pos:column="33">3<pos:position pos:line="11" pos:column="34"/></literal></expr>;<pos:position pos:line="11" pos:column="35"/></condition> <incr><expr><name pos:line="11" pos:column="36">i<pos:position pos:line="11" pos:column="37"/></name><operator pos:line="11" pos:column="37">++<pos:position pos:line="11" pos:column="39"/></operator></expr></incr>)<pos:position pos:line="11" pos:column="40"/></control> <block pos:line="11" pos:column="41">{
			<expr_stmt><expr><call><name pos:line="12" pos:column="25">close<pos:position pos:line="12" pos:column="30"/></name><argument_list pos:line="12" pos:column="30">(<argument><expr><name pos:line="12" pos:column="31">i<pos:position pos:line="12" pos:column="32"/></name></expr></argument>)<pos:position pos:line="12" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="34"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="13" pos:column="25">open<pos:position pos:line="13" pos:column="29"/></name><argument_list pos:line="13" pos:column="29">(<argument><expr><literal type="string" pos:line="13" pos:column="30">"/dev/null"<pos:position pos:line="13" pos:column="41"/></literal></expr></argument>, <argument><expr><name pos:line="13" pos:column="43">O_RDWR<pos:position pos:line="13" pos:column="49"/></name></expr></argument>)<pos:position pos:line="13" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="51"/></expr_stmt>
		}<pos:position pos:line="14" pos:column="18"/></block></for>

		<return pos:line="16" pos:column="17">return <expr><call><name pos:line="16" pos:column="24">start_daemon<pos:position pos:line="16" pos:column="36"/></name><argument_list pos:line="16" pos:column="36">(<argument><expr><name pos:line="16" pos:column="37">STDIN_FILENO<pos:position pos:line="16" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="51">STDIN_FILENO<pos:position pos:line="16" pos:column="63"/></name></expr></argument>)<pos:position pos:line="16" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="65"/></return>
	}<pos:position pos:line="17" pos:column="10"/></block></then></if>

	<if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><operator pos:line="19" pos:column="13">!<pos:position pos:line="19" pos:column="14"/></operator><name pos:line="19" pos:column="14">no_detach<pos:position pos:line="19" pos:column="23"/></name></expr>)<pos:position pos:line="19" pos:column="24"/></condition><then pos:line="19" pos:column="24">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="20" pos:column="17">become_daemon<pos:position pos:line="20" pos:column="30"/></name><argument_list pos:line="20" pos:column="30">()<pos:position pos:line="20" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="33"/></expr_stmt></block></then></if>

	<if pos:line="22" pos:column="9">if <condition pos:line="22" pos:column="12">(<expr><operator pos:line="22" pos:column="13">!<pos:position pos:line="22" pos:column="14"/></operator><call><name pos:line="22" pos:column="14">lp_load<pos:position pos:line="22" pos:column="21"/></name><argument_list pos:line="22" pos:column="21">(<argument><expr><name pos:line="22" pos:column="22">config_file<pos:position pos:line="22" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="22" pos:column="35">1<pos:position pos:line="22" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="22" pos:column="38"/></condition><then pos:line="22" pos:column="38">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="23" pos:column="17">exit_cleanup<pos:position pos:line="23" pos:column="29"/></name><argument_list pos:line="23" pos:column="29">(<argument><expr><name pos:line="23" pos:column="30">RERR_SYNTAX<pos:position pos:line="23" pos:column="41"/></name></expr></argument>)<pos:position pos:line="23" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="43"/></expr_stmt></block></then></if>

	<if pos:line="25" pos:column="9">if <condition pos:line="25" pos:column="12">(<expr><name pos:line="25" pos:column="13">rsync_port<pos:position pos:line="25" pos:column="23"/></name> <operator pos:line="25" pos:column="24">==<pos:position pos:line="25" pos:column="26"/></operator> <literal type="number" pos:line="25" pos:column="27">0<pos:position pos:line="25" pos:column="28"/></literal> <operator pos:line="25" pos:column="29">&amp;&amp;<pos:position pos:line="25" pos:column="39"/></operator> <operator pos:line="25" pos:column="32">(<pos:position pos:line="25" pos:column="33"/></operator><name pos:line="25" pos:column="33">rsync_port<pos:position pos:line="25" pos:column="43"/></name> <operator pos:line="25" pos:column="44">=<pos:position pos:line="25" pos:column="45"/></operator> <call><name pos:line="25" pos:column="46">lp_rsync_port<pos:position pos:line="25" pos:column="59"/></name><argument_list pos:line="25" pos:column="59">()<pos:position pos:line="25" pos:column="61"/></argument_list></call><operator pos:line="25" pos:column="61">)<pos:position pos:line="25" pos:column="62"/></operator> <operator pos:line="25" pos:column="63">==<pos:position pos:line="25" pos:column="65"/></operator> <literal type="number" pos:line="25" pos:column="66">0<pos:position pos:line="25" pos:column="67"/></literal></expr>)<pos:position pos:line="25" pos:column="68"/></condition><then pos:line="25" pos:column="68">
		<block type="pseudo"><expr_stmt><expr><name pos:line="26" pos:column="17">rsync_port<pos:position pos:line="26" pos:column="27"/></name> <operator pos:line="26" pos:column="28">=<pos:position pos:line="26" pos:column="29"/></operator> <name pos:line="26" pos:column="30">RSYNC_PORT<pos:position pos:line="26" pos:column="40"/></name></expr>;<pos:position pos:line="26" pos:column="41"/></expr_stmt></block></then></if>
	<if pos:line="27" pos:column="9">if <condition pos:line="27" pos:column="12">(<expr><name pos:line="27" pos:column="13">bind_address<pos:position pos:line="27" pos:column="25"/></name> <operator pos:line="27" pos:column="26">==<pos:position pos:line="27" pos:column="28"/></operator> <name pos:line="27" pos:column="29">NULL<pos:position pos:line="27" pos:column="33"/></name> <operator pos:line="27" pos:column="34">&amp;&amp;<pos:position pos:line="27" pos:column="44"/></operator> <operator pos:line="27" pos:column="37">*<pos:position pos:line="27" pos:column="38"/></operator><call><name pos:line="27" pos:column="38">lp_bind_address<pos:position pos:line="27" pos:column="53"/></name><argument_list pos:line="27" pos:column="53">()<pos:position pos:line="27" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="27" pos:column="56"/></condition><then pos:line="27" pos:column="56">
		<block type="pseudo"><expr_stmt><expr><name pos:line="28" pos:column="17">bind_address<pos:position pos:line="28" pos:column="29"/></name> <operator pos:line="28" pos:column="30">=<pos:position pos:line="28" pos:column="31"/></operator> <call><name pos:line="28" pos:column="32">lp_bind_address<pos:position pos:line="28" pos:column="47"/></name><argument_list pos:line="28" pos:column="47">()<pos:position pos:line="28" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="50"/></expr_stmt></block></then></if>

	<expr_stmt><expr><call><name pos:line="30" pos:column="9">log_init<pos:position pos:line="30" pos:column="17"/></name><argument_list pos:line="30" pos:column="17">()<pos:position pos:line="30" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="20"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="32" pos:column="9">rprintf<pos:position pos:line="32" pos:column="16"/></name><argument_list pos:line="32" pos:column="16">(<argument><expr><name pos:line="32" pos:column="17">FLOG<pos:position pos:line="32" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="32" pos:column="23">"rsyncd version %s starting, listening on port %d\n"<pos:position pos:line="32" pos:column="75"/></literal></expr></argument>,
		<argument><expr><name pos:line="33" pos:column="17">RSYNC_VERSION<pos:position pos:line="33" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="32">rsync_port<pos:position pos:line="33" pos:column="42"/></name></expr></argument>)<pos:position pos:line="33" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="44"/></expr_stmt>
	<comment type="block" pos:line="34" pos:column="9">/* TODO: If listening on a particular address, then show that
	 * address too.  In fact, why not just do inet_ntop on the
	 * local address??? */</comment>

	<if pos:line="38" pos:column="9">if <condition pos:line="38" pos:column="12">(<expr><operator pos:line="38" pos:column="13">(<pos:position pos:line="38" pos:column="14"/></operator><operator pos:line="38" pos:column="14">(<pos:position pos:line="38" pos:column="15"/></operator><name pos:line="38" pos:column="15">pid_file<pos:position pos:line="38" pos:column="23"/></name> <operator pos:line="38" pos:column="24">=<pos:position pos:line="38" pos:column="25"/></operator> <call><name pos:line="38" pos:column="26">lp_pid_file<pos:position pos:line="38" pos:column="37"/></name><argument_list pos:line="38" pos:column="37">()<pos:position pos:line="38" pos:column="39"/></argument_list></call><operator pos:line="38" pos:column="39">)<pos:position pos:line="38" pos:column="40"/></operator> <operator pos:line="38" pos:column="41">!=<pos:position pos:line="38" pos:column="43"/></operator> <name pos:line="38" pos:column="44">NULL<pos:position pos:line="38" pos:column="48"/></name><operator pos:line="38" pos:column="48">)<pos:position pos:line="38" pos:column="49"/></operator> <operator pos:line="38" pos:column="50">&amp;&amp;<pos:position pos:line="38" pos:column="60"/></operator> <operator pos:line="38" pos:column="53">(<pos:position pos:line="38" pos:column="54"/></operator><operator pos:line="38" pos:column="54">*<pos:position pos:line="38" pos:column="55"/></operator><name pos:line="38" pos:column="55">pid_file<pos:position pos:line="38" pos:column="63"/></name> <operator pos:line="38" pos:column="64">!=<pos:position pos:line="38" pos:column="66"/></operator> <literal type="char" pos:line="38" pos:column="67">'\0'<pos:position pos:line="38" pos:column="71"/></literal><operator pos:line="38" pos:column="71">)<pos:position pos:line="38" pos:column="72"/></operator></expr>)<pos:position pos:line="38" pos:column="73"/></condition><then pos:line="38" pos:column="73"> <block pos:line="38" pos:column="74">{
		<decl_stmt><decl><type><name pos:line="39" pos:column="17">char<pos:position pos:line="39" pos:column="21"/></name></type> <name><name pos:line="39" pos:column="22">pidbuf<pos:position pos:line="39" pos:column="28"/></name><index pos:line="39" pos:column="28">[<expr><literal type="number" pos:line="39" pos:column="29">16<pos:position pos:line="39" pos:column="31"/></literal></expr>]<pos:position pos:line="39" pos:column="32"/></index></name></decl>;<pos:position pos:line="39" pos:column="33"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="40" pos:column="17">int<pos:position pos:line="40" pos:column="20"/></name></type> <name pos:line="40" pos:column="21">fd<pos:position pos:line="40" pos:column="23"/></name></decl>;<pos:position pos:line="40" pos:column="24"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="41" pos:column="17">pid_t<pos:position pos:line="41" pos:column="22"/></name></type> <name pos:line="41" pos:column="23">pid<pos:position pos:line="41" pos:column="26"/></name> <init pos:line="41" pos:column="27">= <expr><call><name pos:line="41" pos:column="29">getpid<pos:position pos:line="41" pos:column="35"/></name><argument_list pos:line="41" pos:column="35">()<pos:position pos:line="41" pos:column="37"/></argument_list></call></expr></init></decl>;<pos:position pos:line="41" pos:column="38"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="42" pos:column="17">cleanup_set_pid<pos:position pos:line="42" pos:column="32"/></name><argument_list pos:line="42" pos:column="32">(<argument><expr><name pos:line="42" pos:column="33">pid<pos:position pos:line="42" pos:column="36"/></name></expr></argument>)<pos:position pos:line="42" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="38"/></expr_stmt>
		<if pos:line="43" pos:column="17">if <condition pos:line="43" pos:column="20">(<expr><operator pos:line="43" pos:column="21">(<pos:position pos:line="43" pos:column="22"/></operator><name pos:line="43" pos:column="22">fd<pos:position pos:line="43" pos:column="24"/></name> <operator pos:line="43" pos:column="25">=<pos:position pos:line="43" pos:column="26"/></operator> <call><name pos:line="43" pos:column="27">do_open<pos:position pos:line="43" pos:column="34"/></name><argument_list pos:line="43" pos:column="34">(<argument><expr><call><name pos:line="43" pos:column="35">lp_pid_file<pos:position pos:line="43" pos:column="46"/></name><argument_list pos:line="43" pos:column="46">()<pos:position pos:line="43" pos:column="48"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="43" pos:column="50">O_WRONLY<pos:position pos:line="43" pos:column="58"/></name><operator pos:line="43" pos:column="58">|<pos:position pos:line="43" pos:column="59"/></operator><name pos:line="43" pos:column="59">O_CREAT<pos:position pos:line="43" pos:column="66"/></name><operator pos:line="43" pos:column="66">|<pos:position pos:line="43" pos:column="67"/></operator><name pos:line="43" pos:column="67">O_TRUNC<pos:position pos:line="43" pos:column="74"/></name></expr></argument>,
					<argument><expr><literal type="number" pos:line="44" pos:column="41">0666<pos:position pos:line="44" pos:column="45"/></literal> <operator pos:line="44" pos:column="46">&amp;<pos:position pos:line="44" pos:column="51"/></operator> <operator pos:line="44" pos:column="48">~<pos:position pos:line="44" pos:column="49"/></operator><name pos:line="44" pos:column="49">orig_umask<pos:position pos:line="44" pos:column="59"/></name></expr></argument>)<pos:position pos:line="44" pos:column="60"/></argument_list></call><operator pos:line="44" pos:column="60">)<pos:position pos:line="44" pos:column="61"/></operator> <operator pos:line="44" pos:column="62">==<pos:position pos:line="44" pos:column="64"/></operator> <operator pos:line="44" pos:column="65">-<pos:position pos:line="44" pos:column="66"/></operator><literal type="number" pos:line="44" pos:column="66">1<pos:position pos:line="44" pos:column="67"/></literal></expr>)<pos:position pos:line="44" pos:column="68"/></condition><then pos:line="44" pos:column="68"> <block pos:line="44" pos:column="69">{
			<expr_stmt><expr><call><name pos:line="45" pos:column="25">cleanup_set_pid<pos:position pos:line="45" pos:column="40"/></name><argument_list pos:line="45" pos:column="40">(<argument><expr><literal type="number" pos:line="45" pos:column="41">0<pos:position pos:line="45" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="45" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="44"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="46" pos:column="25">rsyserr<pos:position pos:line="46" pos:column="32"/></name><argument_list pos:line="46" pos:column="32">(<argument><expr><name pos:line="46" pos:column="33">FLOG<pos:position pos:line="46" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="39">errno<pos:position pos:line="46" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="46" pos:column="46">"failed to create pid file %s"<pos:position pos:line="46" pos:column="76"/></literal></expr></argument>,
				<argument><expr><name pos:line="47" pos:column="33">pid_file<pos:position pos:line="47" pos:column="41"/></name></expr></argument>)<pos:position pos:line="47" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="43"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="48" pos:column="25">exit_cleanup<pos:position pos:line="48" pos:column="37"/></name><argument_list pos:line="48" pos:column="37">(<argument><expr><name pos:line="48" pos:column="38">RERR_FILEIO<pos:position pos:line="48" pos:column="49"/></name></expr></argument>)<pos:position pos:line="48" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="51"/></expr_stmt>
		}<pos:position pos:line="49" pos:column="18"/></block></then></if>
		<expr_stmt><expr><call><name pos:line="50" pos:column="17">snprintf<pos:position pos:line="50" pos:column="25"/></name><argument_list pos:line="50" pos:column="25">(<argument><expr><name pos:line="50" pos:column="26">pidbuf<pos:position pos:line="50" pos:column="32"/></name></expr></argument>, <argument><expr><sizeof pos:line="50" pos:column="34">sizeof <name pos:line="50" pos:column="41">pidbuf<pos:position pos:line="50" pos:column="47"/></name></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="50" pos:column="49">"%ld\n"<pos:position pos:line="50" pos:column="56"/></literal></expr></argument>, <argument><expr><operator pos:line="50" pos:column="58">(<pos:position pos:line="50" pos:column="59"/></operator><name pos:line="50" pos:column="59">long<pos:position pos:line="50" pos:column="63"/></name><operator pos:line="50" pos:column="63">)<pos:position pos:line="50" pos:column="64"/></operator><name pos:line="50" pos:column="64">pid<pos:position pos:line="50" pos:column="67"/></name></expr></argument>)<pos:position pos:line="50" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="69"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="51" pos:column="17">write<pos:position pos:line="51" pos:column="22"/></name><argument_list pos:line="51" pos:column="22">(<argument><expr><name pos:line="51" pos:column="23">fd<pos:position pos:line="51" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="27">pidbuf<pos:position pos:line="51" pos:column="33"/></name></expr></argument>, <argument><expr><call><name pos:line="51" pos:column="35">strlen<pos:position pos:line="51" pos:column="41"/></name><argument_list pos:line="51" pos:column="41">(<argument><expr><name pos:line="51" pos:column="42">pidbuf<pos:position pos:line="51" pos:column="48"/></name></expr></argument>)<pos:position pos:line="51" pos:column="49"/></argument_list></call></expr></argument>)<pos:position pos:line="51" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="51"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="52" pos:column="17">close<pos:position pos:line="52" pos:column="22"/></name><argument_list pos:line="52" pos:column="22">(<argument><expr><name pos:line="52" pos:column="23">fd<pos:position pos:line="52" pos:column="25"/></name></expr></argument>)<pos:position pos:line="52" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="27"/></expr_stmt>
	}<pos:position pos:line="53" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="55" pos:column="9">start_accept_loop<pos:position pos:line="55" pos:column="26"/></name><argument_list pos:line="55" pos:column="26">(<argument><expr><name pos:line="55" pos:column="27">rsync_port<pos:position pos:line="55" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="39">start_daemon<pos:position pos:line="55" pos:column="51"/></name></expr></argument>)<pos:position pos:line="55" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="53"/></expr_stmt>
	<return pos:line="56" pos:column="9">return <expr><operator pos:line="56" pos:column="16">-<pos:position pos:line="56" pos:column="17"/></operator><literal type="number" pos:line="56" pos:column="17">1<pos:position pos:line="56" pos:column="18"/></literal></expr>;<pos:position pos:line="56" pos:column="19"/></return>
}<pos:position pos:line="57" pos:column="2"/></block></function></unit>
