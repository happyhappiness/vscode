<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_838_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">wildmatch<pos:position pos:line="1" pos:column="14"/></name><parameter_list pos:line="1" pos:column="14">(<parameter><decl><type><specifier pos:line="1" pos:column="15">const<pos:position pos:line="1" pos:column="20"/></specifier> <name pos:line="1" pos:column="21">char<pos:position pos:line="1" pos:column="25"/></name> <modifier pos:line="1" pos:column="26">*<pos:position pos:line="1" pos:column="27"/></modifier></type><name pos:line="1" pos:column="27">pattern<pos:position pos:line="1" pos:column="34"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="36">const<pos:position pos:line="1" pos:column="41"/></specifier> <name pos:line="1" pos:column="42">char<pos:position pos:line="1" pos:column="46"/></name> <modifier pos:line="1" pos:column="47">*<pos:position pos:line="1" pos:column="48"/></modifier></type><name pos:line="1" pos:column="48">text<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="53"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><specifier pos:line="3" pos:column="5">static<pos:position pos:line="3" pos:column="11"/></specifier> <type><specifier pos:line="3" pos:column="12">const<pos:position pos:line="3" pos:column="17"/></specifier> <name pos:line="3" pos:column="18">uchar<pos:position pos:line="3" pos:column="23"/></name> <modifier pos:line="3" pos:column="24">*<pos:position pos:line="3" pos:column="25"/></modifier></type><name><name pos:line="3" pos:column="25">nomore<pos:position pos:line="3" pos:column="31"/></name><index pos:line="3" pos:column="31">[<expr><literal type="number" pos:line="3" pos:column="32">1<pos:position pos:line="3" pos:column="33"/></literal></expr>]<pos:position pos:line="3" pos:column="34"/></index></name></decl>;<pos:position pos:line="3" pos:column="35"/></decl_stmt> <comment type="block" pos:line="3" pos:column="36">/* A NULL pointer. */</comment>
<cpp:ifdef pos:line="4" pos:column="1">#<cpp:directive pos:line="4" pos:column="2">ifdef<pos:position pos:line="4" pos:column="7"/></cpp:directive> <name pos:line="4" pos:column="8">WILD_TEST_ITERATIONS<pos:position pos:line="4" pos:column="28"/></name></cpp:ifdef>
    <expr_stmt><expr><name pos:line="5" pos:column="5">wildmatch_iteration_count<pos:position pos:line="5" pos:column="30"/></name> <operator pos:line="5" pos:column="31">=<pos:position pos:line="5" pos:column="32"/></operator> <literal type="number" pos:line="5" pos:column="33">0<pos:position pos:line="5" pos:column="34"/></literal></expr>;<pos:position pos:line="5" pos:column="35"/></expr_stmt>
<cpp:endif pos:line="6" pos:column="1">#<cpp:directive pos:line="6" pos:column="2">endif<pos:position pos:line="6" pos:column="7"/></cpp:directive></cpp:endif>
    <return pos:line="7" pos:column="5">return <expr><call><name pos:line="7" pos:column="12">dowild<pos:position pos:line="7" pos:column="18"/></name><argument_list pos:line="7" pos:column="18">(<argument><expr><operator pos:line="7" pos:column="19">(<pos:position pos:line="7" pos:column="20"/></operator><specifier pos:line="7" pos:column="20">const<pos:position pos:line="7" pos:column="25"/></specifier> <name pos:line="7" pos:column="26">uchar<pos:position pos:line="7" pos:column="31"/></name><operator pos:line="7" pos:column="31">*<pos:position pos:line="7" pos:column="32"/></operator><operator pos:line="7" pos:column="32">)<pos:position pos:line="7" pos:column="33"/></operator><name pos:line="7" pos:column="33">pattern<pos:position pos:line="7" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="7" pos:column="42">(<pos:position pos:line="7" pos:column="43"/></operator><specifier pos:line="7" pos:column="43">const<pos:position pos:line="7" pos:column="48"/></specifier> <name pos:line="7" pos:column="49">uchar<pos:position pos:line="7" pos:column="54"/></name><operator pos:line="7" pos:column="54">*<pos:position pos:line="7" pos:column="55"/></operator><operator pos:line="7" pos:column="55">)<pos:position pos:line="7" pos:column="56"/></operator><name pos:line="7" pos:column="56">text<pos:position pos:line="7" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="62">nomore<pos:position pos:line="7" pos:column="68"/></name></expr></argument>)<pos:position pos:line="7" pos:column="69"/></argument_list></call> <operator pos:line="7" pos:column="70">==<pos:position pos:line="7" pos:column="72"/></operator> <name pos:line="7" pos:column="73">TRUE<pos:position pos:line="7" pos:column="77"/></name></expr>;<pos:position pos:line="7" pos:column="78"/></return>
}<pos:position pos:line="8" pos:column="2"/></block></function></unit>
