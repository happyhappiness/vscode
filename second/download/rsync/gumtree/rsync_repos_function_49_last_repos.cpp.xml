<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_49_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">main<pos:position pos:line="1" pos:column="9"/></name><parameter_list pos:line="1" pos:column="9">(<parameter><decl><type><name pos:line="1" pos:column="10">int<pos:position pos:line="1" pos:column="13"/></name></type> <name pos:line="1" pos:column="14">argc<pos:position pos:line="1" pos:column="18"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="20">char<pos:position pos:line="1" pos:column="24"/></name> <modifier pos:line="1" pos:column="25">*<pos:position pos:line="1" pos:column="26"/></modifier></type><name><name pos:line="1" pos:column="26">argv<pos:position pos:line="1" pos:column="30"/></name><index pos:line="1" pos:column="30">[]<pos:position pos:line="1" pos:column="32"/></index></name></decl></parameter>)<pos:position pos:line="1" pos:column="33"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">STRUCT_STAT<pos:position pos:line="3" pos:column="20"/></name></type> <name pos:line="3" pos:column="21">st<pos:position pos:line="3" pos:column="23"/></name></decl>;<pos:position pos:line="3" pos:column="24"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">ret<pos:position pos:line="4" pos:column="16"/></name></decl>;<pos:position pos:line="4" pos:column="17"/></decl_stmt>

	<while pos:line="6" pos:column="9">while <condition pos:line="6" pos:column="15">(<expr><operator pos:line="6" pos:column="16">--<pos:position pos:line="6" pos:column="18"/></operator><name pos:line="6" pos:column="18">argc<pos:position pos:line="6" pos:column="22"/></name> <operator pos:line="6" pos:column="23">&gt;<pos:position pos:line="6" pos:column="27"/></operator> <literal type="number" pos:line="6" pos:column="25">0<pos:position pos:line="6" pos:column="26"/></literal></expr>)<pos:position pos:line="6" pos:column="27"/></condition> <block pos:line="6" pos:column="28">{
<cpp:ifdef pos:line="7" pos:column="1">#<cpp:directive pos:line="7" pos:column="2">ifdef<pos:position pos:line="7" pos:column="7"/></cpp:directive> <name pos:line="7" pos:column="8">USE_STAT64_FUNCS<pos:position pos:line="7" pos:column="24"/></name></cpp:ifdef>
		<expr_stmt><expr><name pos:line="8" pos:column="17">ret<pos:position pos:line="8" pos:column="20"/></name> <operator pos:line="8" pos:column="21">=<pos:position pos:line="8" pos:column="22"/></operator> <call><name pos:line="8" pos:column="23">stat64<pos:position pos:line="8" pos:column="29"/></name><argument_list pos:line="8" pos:column="29">(<argument><expr><operator pos:line="8" pos:column="30">*<pos:position pos:line="8" pos:column="31"/></operator><operator pos:line="8" pos:column="31">++<pos:position pos:line="8" pos:column="33"/></operator><name pos:line="8" pos:column="33">argv<pos:position pos:line="8" pos:column="37"/></name></expr></argument>, <argument><expr><operator pos:line="8" pos:column="39">&amp;<pos:position pos:line="8" pos:column="44"/></operator><name pos:line="8" pos:column="40">st<pos:position pos:line="8" pos:column="42"/></name></expr></argument>)<pos:position pos:line="8" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="44"/></expr_stmt>
<cpp:else pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">else<pos:position pos:line="9" pos:column="6"/></cpp:directive></cpp:else>
		<expr_stmt><expr><name pos:line="10" pos:column="17">ret<pos:position pos:line="10" pos:column="20"/></name> <operator pos:line="10" pos:column="21">=<pos:position pos:line="10" pos:column="22"/></operator> <call><name pos:line="10" pos:column="23">stat<pos:position pos:line="10" pos:column="27"/></name><argument_list pos:line="10" pos:column="27">(<argument><expr><operator pos:line="10" pos:column="28">*<pos:position pos:line="10" pos:column="29"/></operator><operator pos:line="10" pos:column="29">++<pos:position pos:line="10" pos:column="31"/></operator><name pos:line="10" pos:column="31">argv<pos:position pos:line="10" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="10" pos:column="37">&amp;<pos:position pos:line="10" pos:column="42"/></operator><name pos:line="10" pos:column="38">st<pos:position pos:line="10" pos:column="40"/></name></expr></argument>)<pos:position pos:line="10" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="42"/></expr_stmt>
<cpp:endif pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">endif<pos:position pos:line="11" pos:column="7"/></cpp:directive></cpp:endif>
		<if pos:line="12" pos:column="17">if <condition pos:line="12" pos:column="20">(<expr><name pos:line="12" pos:column="21">ret<pos:position pos:line="12" pos:column="24"/></name> <operator pos:line="12" pos:column="25">&lt;<pos:position pos:line="12" pos:column="29"/></operator> <literal type="number" pos:line="12" pos:column="27">0<pos:position pos:line="12" pos:column="28"/></literal></expr>)<pos:position pos:line="12" pos:column="29"/></condition><then pos:line="12" pos:column="29"> <block pos:line="12" pos:column="30">{
			<expr_stmt><expr><call><name pos:line="13" pos:column="25">fprintf<pos:position pos:line="13" pos:column="32"/></name><argument_list pos:line="13" pos:column="32">(<argument><expr><name pos:line="13" pos:column="33">stderr<pos:position pos:line="13" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="41">"Unable to stat `%s'\n"<pos:position pos:line="13" pos:column="64"/></literal></expr></argument>, <argument><expr><operator pos:line="13" pos:column="66">*<pos:position pos:line="13" pos:column="67"/></operator><name pos:line="13" pos:column="67">argv<pos:position pos:line="13" pos:column="71"/></name></expr></argument>)<pos:position pos:line="13" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="73"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="14" pos:column="25">exit<pos:position pos:line="14" pos:column="29"/></name><argument_list pos:line="14" pos:column="29">(<argument><expr><literal type="number" pos:line="14" pos:column="30">1<pos:position pos:line="14" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="33"/></expr_stmt>
		}<pos:position pos:line="15" pos:column="18"/></block></then></if>
		<expr_stmt><expr><call><name pos:line="16" pos:column="17">printf<pos:position pos:line="16" pos:column="23"/></name><argument_list pos:line="16" pos:column="23">(<argument><expr><literal type="string" pos:line="16" pos:column="24">"%ld/%ld\n"<pos:position pos:line="16" pos:column="35"/></literal></expr></argument>, <argument><expr><operator pos:line="16" pos:column="37">(<pos:position pos:line="16" pos:column="38"/></operator><name pos:line="16" pos:column="38">long<pos:position pos:line="16" pos:column="42"/></name><operator pos:line="16" pos:column="42">)<pos:position pos:line="16" pos:column="43"/></operator><call><name pos:line="16" pos:column="43">major<pos:position pos:line="16" pos:column="48"/></name><argument_list pos:line="16" pos:column="48">(<argument><expr><name><name pos:line="16" pos:column="49">st<pos:position pos:line="16" pos:column="51"/></name><operator pos:line="16" pos:column="51">.<pos:position pos:line="16" pos:column="52"/></operator><name pos:line="16" pos:column="52">st_dev<pos:position pos:line="16" pos:column="58"/></name></name></expr></argument>)<pos:position pos:line="16" pos:column="59"/></argument_list></call></expr></argument>,
				    <argument><expr><operator pos:line="17" pos:column="37">(<pos:position pos:line="17" pos:column="38"/></operator><name pos:line="17" pos:column="38">long<pos:position pos:line="17" pos:column="42"/></name><operator pos:line="17" pos:column="42">)<pos:position pos:line="17" pos:column="43"/></operator><call><name pos:line="17" pos:column="43">minor<pos:position pos:line="17" pos:column="48"/></name><argument_list pos:line="17" pos:column="48">(<argument><expr><name><name pos:line="17" pos:column="49">st<pos:position pos:line="17" pos:column="51"/></name><operator pos:line="17" pos:column="51">.<pos:position pos:line="17" pos:column="52"/></operator><name pos:line="17" pos:column="52">st_dev<pos:position pos:line="17" pos:column="58"/></name></name></expr></argument>)<pos:position pos:line="17" pos:column="59"/></argument_list></call></expr></argument>)<pos:position pos:line="17" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="61"/></expr_stmt>
	}<pos:position pos:line="18" pos:column="10"/></block></while>

	<return pos:line="20" pos:column="9">return <expr><literal type="number" pos:line="20" pos:column="16">0<pos:position pos:line="20" pos:column="17"/></literal></expr>;<pos:position pos:line="20" pos:column="18"/></return>
}<pos:position pos:line="21" pos:column="2"/></block></function></unit>
