<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_515_rsync-2.6.0.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <comment type="block" pos:line="1" pos:column="8">/*@only@*/</comment> <comment type="block" pos:line="1" pos:column="19">/*@null@*/</comment> <type><name pos:line="1" pos:column="30">char<pos:position pos:line="1" pos:column="34"/></name> <modifier pos:line="1" pos:column="35">*<pos:position pos:line="1" pos:column="36"/></modifier></type>
<name pos:line="2" pos:column="1">singleOptionDefaultValue<pos:position pos:line="2" pos:column="25"/></name><parameter_list pos:line="2" pos:column="25">(<parameter><decl><type><name pos:line="2" pos:column="26">int<pos:position pos:line="2" pos:column="29"/></name></type> <name pos:line="2" pos:column="30">lineLength<pos:position pos:line="2" pos:column="40"/></name></decl></parameter>,
		<parameter><decl><type><specifier pos:line="3" pos:column="17">const<pos:position pos:line="3" pos:column="22"/></specifier> <name><name pos:line="3" pos:column="23">struct<pos:position pos:line="3" pos:column="29"/></name> <name pos:line="3" pos:column="30">poptOption<pos:position pos:line="3" pos:column="40"/></name></name> <modifier pos:line="3" pos:column="41">*<pos:position pos:line="3" pos:column="42"/></modifier></type> <name pos:line="3" pos:column="43">opt<pos:position pos:line="3" pos:column="46"/></name></decl></parameter>,
		<comment type="block" pos:line="4" pos:column="17">/*@-paramuse@*/</comment>	<comment type="block" pos:line="4" pos:column="33">/* FIX: i18n macros disable with lclint */</comment>
		<comment type="block" pos:line="5" pos:column="17">/*@null@*/</comment> <parameter><decl><type><specifier pos:line="5" pos:column="28">const<pos:position pos:line="5" pos:column="33"/></specifier> <name pos:line="5" pos:column="34">char<pos:position pos:line="5" pos:column="38"/></name> <modifier pos:line="5" pos:column="39">*<pos:position pos:line="5" pos:column="40"/></modifier></type> <name pos:line="5" pos:column="41">translation_domain<pos:position pos:line="5" pos:column="59"/></name></decl></parameter>)<pos:position pos:line="5" pos:column="60"/></parameter_list>
		<comment type="block" pos:line="6" pos:column="17">/*@=paramuse@*/</comment>
	<comment type="block" pos:line="7" pos:column="9">/*@*/</comment>
<block pos:line="8" pos:column="1">{
    <decl_stmt><decl><type><specifier pos:line="9" pos:column="5">const<pos:position pos:line="9" pos:column="10"/></specifier> <name pos:line="9" pos:column="11">char<pos:position pos:line="9" pos:column="15"/></name> <modifier pos:line="9" pos:column="16">*<pos:position pos:line="9" pos:column="17"/></modifier></type> <name pos:line="9" pos:column="18">defstr<pos:position pos:line="9" pos:column="24"/></name> <init pos:line="9" pos:column="25">= <expr><call><name pos:line="9" pos:column="27">D_<pos:position pos:line="9" pos:column="29"/></name><argument_list pos:line="9" pos:column="29">(<argument><expr><name pos:line="9" pos:column="30">translation_domain<pos:position pos:line="9" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="9" pos:column="50">"default"<pos:position pos:line="9" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="60"/></argument_list></call></expr></init></decl>;<pos:position pos:line="9" pos:column="61"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">char<pos:position pos:line="10" pos:column="9"/></name> <modifier pos:line="10" pos:column="10">*<pos:position pos:line="10" pos:column="11"/></modifier></type> <name pos:line="10" pos:column="12">le<pos:position pos:line="10" pos:column="14"/></name> <init pos:line="10" pos:column="15">= <expr><call><name pos:line="10" pos:column="17">malloc<pos:position pos:line="10" pos:column="23"/></name><argument_list pos:line="10" pos:column="23">(<argument><expr><literal type="number" pos:line="10" pos:column="24">4<pos:position pos:line="10" pos:column="25"/></literal><operator pos:line="10" pos:column="25">*<pos:position pos:line="10" pos:column="26"/></operator><name pos:line="10" pos:column="26">lineLength<pos:position pos:line="10" pos:column="36"/></name> <operator pos:line="10" pos:column="37">+<pos:position pos:line="10" pos:column="38"/></operator> <literal type="number" pos:line="10" pos:column="39">1<pos:position pos:line="10" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="41"/></argument_list></call></expr></init></decl>;<pos:position pos:line="10" pos:column="42"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="11" pos:column="5">char<pos:position pos:line="11" pos:column="9"/></name> <modifier pos:line="11" pos:column="10">*<pos:position pos:line="11" pos:column="11"/></modifier></type> <name pos:line="11" pos:column="12">l<pos:position pos:line="11" pos:column="13"/></name> <init pos:line="11" pos:column="14">= <expr><name pos:line="11" pos:column="16">le<pos:position pos:line="11" pos:column="18"/></name></expr></init></decl>;<pos:position pos:line="11" pos:column="19"/></decl_stmt>

    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><name pos:line="13" pos:column="9">le<pos:position pos:line="13" pos:column="11"/></name> <operator pos:line="13" pos:column="12">==<pos:position pos:line="13" pos:column="14"/></operator> <name pos:line="13" pos:column="15">NULL<pos:position pos:line="13" pos:column="19"/></name></expr>)<pos:position pos:line="13" pos:column="20"/></condition><then pos:line="13" pos:column="20"> <block type="pseudo"><return pos:line="13" pos:column="21">return <expr><name pos:line="13" pos:column="28">NULL<pos:position pos:line="13" pos:column="32"/></name></expr>;<pos:position pos:line="13" pos:column="33"/></return></block></then></if>	<comment type="block" pos:line="13" pos:column="41">/* XXX can't happen */</comment>
    <expr_stmt><expr><operator pos:line="14" pos:column="5">*<pos:position pos:line="14" pos:column="6"/></operator><name pos:line="14" pos:column="6">le<pos:position pos:line="14" pos:column="8"/></name> <operator pos:line="14" pos:column="9">=<pos:position pos:line="14" pos:column="10"/></operator> <literal type="char" pos:line="14" pos:column="11">'\0'<pos:position pos:line="14" pos:column="15"/></literal></expr>;<pos:position pos:line="14" pos:column="16"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="15" pos:column="5">*<pos:position pos:line="15" pos:column="6"/></operator><name pos:line="15" pos:column="6">le<pos:position pos:line="15" pos:column="8"/></name><operator pos:line="15" pos:column="8">++<pos:position pos:line="15" pos:column="10"/></operator> <operator pos:line="15" pos:column="11">=<pos:position pos:line="15" pos:column="12"/></operator> <literal type="char" pos:line="15" pos:column="13">'('<pos:position pos:line="15" pos:column="16"/></literal></expr>;<pos:position pos:line="15" pos:column="17"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="16" pos:column="5">strcpy<pos:position pos:line="16" pos:column="11"/></name><argument_list pos:line="16" pos:column="11">(<argument><expr><name pos:line="16" pos:column="12">le<pos:position pos:line="16" pos:column="14"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="16">defstr<pos:position pos:line="16" pos:column="22"/></name></expr></argument>)<pos:position pos:line="16" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="24"/></expr_stmt>	<expr_stmt><expr><name pos:line="16" pos:column="25">le<pos:position pos:line="16" pos:column="27"/></name> <operator pos:line="16" pos:column="28">+=<pos:position pos:line="16" pos:column="30"/></operator> <call><name pos:line="16" pos:column="31">strlen<pos:position pos:line="16" pos:column="37"/></name><argument_list pos:line="16" pos:column="37">(<argument><expr><name pos:line="16" pos:column="38">le<pos:position pos:line="16" pos:column="40"/></name></expr></argument>)<pos:position pos:line="16" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="42"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="17" pos:column="5">*<pos:position pos:line="17" pos:column="6"/></operator><name pos:line="17" pos:column="6">le<pos:position pos:line="17" pos:column="8"/></name><operator pos:line="17" pos:column="8">++<pos:position pos:line="17" pos:column="10"/></operator> <operator pos:line="17" pos:column="11">=<pos:position pos:line="17" pos:column="12"/></operator> <literal type="char" pos:line="17" pos:column="13">':'<pos:position pos:line="17" pos:column="16"/></literal></expr>;<pos:position pos:line="17" pos:column="17"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="18" pos:column="5">*<pos:position pos:line="18" pos:column="6"/></operator><name pos:line="18" pos:column="6">le<pos:position pos:line="18" pos:column="8"/></name><operator pos:line="18" pos:column="8">++<pos:position pos:line="18" pos:column="10"/></operator> <operator pos:line="18" pos:column="11">=<pos:position pos:line="18" pos:column="12"/></operator> <literal type="char" pos:line="18" pos:column="13">' '<pos:position pos:line="18" pos:column="16"/></literal></expr>;<pos:position pos:line="18" pos:column="17"/></expr_stmt>
    <if pos:line="19" pos:column="5">if <condition pos:line="19" pos:column="8">(<expr><name><name pos:line="19" pos:column="9">opt<pos:position pos:line="19" pos:column="12"/></name><operator pos:line="19" pos:column="12">-&gt;<pos:position pos:line="19" pos:column="17"/></operator><name pos:line="19" pos:column="14">arg<pos:position pos:line="19" pos:column="17"/></name></name></expr>)<pos:position pos:line="19" pos:column="18"/></condition><then pos:line="19" pos:column="18">	<comment type="block" pos:line="19" pos:column="25">/* XXX programmer error */</comment>
    <block type="pseudo"><switch pos:line="20" pos:column="5">switch <condition pos:line="20" pos:column="12">(<expr><name><name pos:line="20" pos:column="13">opt<pos:position pos:line="20" pos:column="16"/></name><operator pos:line="20" pos:column="16">-&gt;<pos:position pos:line="20" pos:column="21"/></operator><name pos:line="20" pos:column="18">argInfo<pos:position pos:line="20" pos:column="25"/></name></name> <operator pos:line="20" pos:column="26">&amp;<pos:position pos:line="20" pos:column="31"/></operator> <name pos:line="20" pos:column="28">POPT_ARG_MASK<pos:position pos:line="20" pos:column="41"/></name></expr>)<pos:position pos:line="20" pos:column="42"/></condition> <block pos:line="20" pos:column="43">{
    <case pos:line="21" pos:column="5">case <expr><name pos:line="21" pos:column="10">POPT_ARG_VAL<pos:position pos:line="21" pos:column="22"/></name></expr>:<pos:position pos:line="21" pos:column="23"/></case>
    <case pos:line="22" pos:column="5">case <expr><name pos:line="22" pos:column="10">POPT_ARG_INT<pos:position pos:line="22" pos:column="22"/></name></expr>:<pos:position pos:line="22" pos:column="23"/></case>
    <block pos:line="23" pos:column="5">{	<decl_stmt><decl><type><name pos:line="23" pos:column="9">long<pos:position pos:line="23" pos:column="13"/></name></type> <name pos:line="23" pos:column="14">aLong<pos:position pos:line="23" pos:column="19"/></name> <init pos:line="23" pos:column="20">= <expr><operator pos:line="23" pos:column="22">*<pos:position pos:line="23" pos:column="23"/></operator><operator pos:line="23" pos:column="23">(<pos:position pos:line="23" pos:column="24"/></operator><operator pos:line="23" pos:column="24">(<pos:position pos:line="23" pos:column="25"/></operator><name pos:line="23" pos:column="25">int<pos:position pos:line="23" pos:column="28"/></name> <operator pos:line="23" pos:column="29">*<pos:position pos:line="23" pos:column="30"/></operator><operator pos:line="23" pos:column="30">)<pos:position pos:line="23" pos:column="31"/></operator><name><name pos:line="23" pos:column="31">opt<pos:position pos:line="23" pos:column="34"/></name><operator pos:line="23" pos:column="34">-&gt;<pos:position pos:line="23" pos:column="39"/></operator><name pos:line="23" pos:column="36">arg<pos:position pos:line="23" pos:column="39"/></name></name><operator pos:line="23" pos:column="39">)<pos:position pos:line="23" pos:column="40"/></operator></expr></init></decl>;<pos:position pos:line="23" pos:column="41"/></decl_stmt>
	<expr_stmt><expr><call><name pos:line="24" pos:column="9">sprintf<pos:position pos:line="24" pos:column="16"/></name><argument_list pos:line="24" pos:column="16">(<argument><expr><name pos:line="24" pos:column="17">le<pos:position pos:line="24" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="24" pos:column="21">"%ld"<pos:position pos:line="24" pos:column="26"/></literal></expr></argument>, <argument><expr><name pos:line="24" pos:column="28">aLong<pos:position pos:line="24" pos:column="33"/></name></expr></argument>)<pos:position pos:line="24" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="35"/></expr_stmt>
	<expr_stmt><expr><name pos:line="25" pos:column="9">le<pos:position pos:line="25" pos:column="11"/></name> <operator pos:line="25" pos:column="12">+=<pos:position pos:line="25" pos:column="14"/></operator> <call><name pos:line="25" pos:column="15">strlen<pos:position pos:line="25" pos:column="21"/></name><argument_list pos:line="25" pos:column="21">(<argument><expr><name pos:line="25" pos:column="22">le<pos:position pos:line="25" pos:column="24"/></name></expr></argument>)<pos:position pos:line="25" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="26"/></expr_stmt>
    }<pos:position pos:line="26" pos:column="6"/></block>	<break pos:line="26" pos:column="9">break;<pos:position pos:line="26" pos:column="15"/></break>
    <case pos:line="27" pos:column="5">case <expr><name pos:line="27" pos:column="10">POPT_ARG_LONG<pos:position pos:line="27" pos:column="23"/></name></expr>:<pos:position pos:line="27" pos:column="24"/></case>
    <block pos:line="28" pos:column="5">{	<decl_stmt><decl><type><name pos:line="28" pos:column="9">long<pos:position pos:line="28" pos:column="13"/></name></type> <name pos:line="28" pos:column="14">aLong<pos:position pos:line="28" pos:column="19"/></name> <init pos:line="28" pos:column="20">= <expr><operator pos:line="28" pos:column="22">*<pos:position pos:line="28" pos:column="23"/></operator><operator pos:line="28" pos:column="23">(<pos:position pos:line="28" pos:column="24"/></operator><operator pos:line="28" pos:column="24">(<pos:position pos:line="28" pos:column="25"/></operator><name pos:line="28" pos:column="25">long<pos:position pos:line="28" pos:column="29"/></name> <operator pos:line="28" pos:column="30">*<pos:position pos:line="28" pos:column="31"/></operator><operator pos:line="28" pos:column="31">)<pos:position pos:line="28" pos:column="32"/></operator><name><name pos:line="28" pos:column="32">opt<pos:position pos:line="28" pos:column="35"/></name><operator pos:line="28" pos:column="35">-&gt;<pos:position pos:line="28" pos:column="40"/></operator><name pos:line="28" pos:column="37">arg<pos:position pos:line="28" pos:column="40"/></name></name><operator pos:line="28" pos:column="40">)<pos:position pos:line="28" pos:column="41"/></operator></expr></init></decl>;<pos:position pos:line="28" pos:column="42"/></decl_stmt>
	<expr_stmt><expr><call><name pos:line="29" pos:column="9">sprintf<pos:position pos:line="29" pos:column="16"/></name><argument_list pos:line="29" pos:column="16">(<argument><expr><name pos:line="29" pos:column="17">le<pos:position pos:line="29" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="29" pos:column="21">"%ld"<pos:position pos:line="29" pos:column="26"/></literal></expr></argument>, <argument><expr><name pos:line="29" pos:column="28">aLong<pos:position pos:line="29" pos:column="33"/></name></expr></argument>)<pos:position pos:line="29" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="35"/></expr_stmt>
	<expr_stmt><expr><name pos:line="30" pos:column="9">le<pos:position pos:line="30" pos:column="11"/></name> <operator pos:line="30" pos:column="12">+=<pos:position pos:line="30" pos:column="14"/></operator> <call><name pos:line="30" pos:column="15">strlen<pos:position pos:line="30" pos:column="21"/></name><argument_list pos:line="30" pos:column="21">(<argument><expr><name pos:line="30" pos:column="22">le<pos:position pos:line="30" pos:column="24"/></name></expr></argument>)<pos:position pos:line="30" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="26"/></expr_stmt>
    }<pos:position pos:line="31" pos:column="6"/></block>	<break pos:line="31" pos:column="9">break;<pos:position pos:line="31" pos:column="15"/></break>
    <case pos:line="32" pos:column="5">case <expr><name pos:line="32" pos:column="10">POPT_ARG_FLOAT<pos:position pos:line="32" pos:column="24"/></name></expr>:<pos:position pos:line="32" pos:column="25"/></case>
    <block pos:line="33" pos:column="5">{	<decl_stmt><decl><type><name pos:line="33" pos:column="9">double<pos:position pos:line="33" pos:column="15"/></name></type> <name pos:line="33" pos:column="16">aDouble<pos:position pos:line="33" pos:column="23"/></name> <init pos:line="33" pos:column="24">= <expr><operator pos:line="33" pos:column="26">*<pos:position pos:line="33" pos:column="27"/></operator><operator pos:line="33" pos:column="27">(<pos:position pos:line="33" pos:column="28"/></operator><operator pos:line="33" pos:column="28">(<pos:position pos:line="33" pos:column="29"/></operator><name pos:line="33" pos:column="29">float<pos:position pos:line="33" pos:column="34"/></name> <operator pos:line="33" pos:column="35">*<pos:position pos:line="33" pos:column="36"/></operator><operator pos:line="33" pos:column="36">)<pos:position pos:line="33" pos:column="37"/></operator><name><name pos:line="33" pos:column="37">opt<pos:position pos:line="33" pos:column="40"/></name><operator pos:line="33" pos:column="40">-&gt;<pos:position pos:line="33" pos:column="45"/></operator><name pos:line="33" pos:column="42">arg<pos:position pos:line="33" pos:column="45"/></name></name><operator pos:line="33" pos:column="45">)<pos:position pos:line="33" pos:column="46"/></operator></expr></init></decl>;<pos:position pos:line="33" pos:column="47"/></decl_stmt>
	<expr_stmt><expr><call><name pos:line="34" pos:column="9">sprintf<pos:position pos:line="34" pos:column="16"/></name><argument_list pos:line="34" pos:column="16">(<argument><expr><name pos:line="34" pos:column="17">le<pos:position pos:line="34" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="34" pos:column="21">"%g"<pos:position pos:line="34" pos:column="25"/></literal></expr></argument>, <argument><expr><name pos:line="34" pos:column="27">aDouble<pos:position pos:line="34" pos:column="34"/></name></expr></argument>)<pos:position pos:line="34" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="36"/></expr_stmt>
	<expr_stmt><expr><name pos:line="35" pos:column="9">le<pos:position pos:line="35" pos:column="11"/></name> <operator pos:line="35" pos:column="12">+=<pos:position pos:line="35" pos:column="14"/></operator> <call><name pos:line="35" pos:column="15">strlen<pos:position pos:line="35" pos:column="21"/></name><argument_list pos:line="35" pos:column="21">(<argument><expr><name pos:line="35" pos:column="22">le<pos:position pos:line="35" pos:column="24"/></name></expr></argument>)<pos:position pos:line="35" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="26"/></expr_stmt>
    }<pos:position pos:line="36" pos:column="6"/></block>	<break pos:line="36" pos:column="9">break;<pos:position pos:line="36" pos:column="15"/></break>
    <case pos:line="37" pos:column="5">case <expr><name pos:line="37" pos:column="10">POPT_ARG_DOUBLE<pos:position pos:line="37" pos:column="25"/></name></expr>:<pos:position pos:line="37" pos:column="26"/></case>
    <block pos:line="38" pos:column="5">{	<decl_stmt><decl><type><name pos:line="38" pos:column="9">double<pos:position pos:line="38" pos:column="15"/></name></type> <name pos:line="38" pos:column="16">aDouble<pos:position pos:line="38" pos:column="23"/></name> <init pos:line="38" pos:column="24">= <expr><operator pos:line="38" pos:column="26">*<pos:position pos:line="38" pos:column="27"/></operator><operator pos:line="38" pos:column="27">(<pos:position pos:line="38" pos:column="28"/></operator><operator pos:line="38" pos:column="28">(<pos:position pos:line="38" pos:column="29"/></operator><name pos:line="38" pos:column="29">double<pos:position pos:line="38" pos:column="35"/></name> <operator pos:line="38" pos:column="36">*<pos:position pos:line="38" pos:column="37"/></operator><operator pos:line="38" pos:column="37">)<pos:position pos:line="38" pos:column="38"/></operator><name><name pos:line="38" pos:column="38">opt<pos:position pos:line="38" pos:column="41"/></name><operator pos:line="38" pos:column="41">-&gt;<pos:position pos:line="38" pos:column="46"/></operator><name pos:line="38" pos:column="43">arg<pos:position pos:line="38" pos:column="46"/></name></name><operator pos:line="38" pos:column="46">)<pos:position pos:line="38" pos:column="47"/></operator></expr></init></decl>;<pos:position pos:line="38" pos:column="48"/></decl_stmt>
	<expr_stmt><expr><call><name pos:line="39" pos:column="9">sprintf<pos:position pos:line="39" pos:column="16"/></name><argument_list pos:line="39" pos:column="16">(<argument><expr><name pos:line="39" pos:column="17">le<pos:position pos:line="39" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="39" pos:column="21">"%g"<pos:position pos:line="39" pos:column="25"/></literal></expr></argument>, <argument><expr><name pos:line="39" pos:column="27">aDouble<pos:position pos:line="39" pos:column="34"/></name></expr></argument>)<pos:position pos:line="39" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="36"/></expr_stmt>
	<expr_stmt><expr><name pos:line="40" pos:column="9">le<pos:position pos:line="40" pos:column="11"/></name> <operator pos:line="40" pos:column="12">+=<pos:position pos:line="40" pos:column="14"/></operator> <call><name pos:line="40" pos:column="15">strlen<pos:position pos:line="40" pos:column="21"/></name><argument_list pos:line="40" pos:column="21">(<argument><expr><name pos:line="40" pos:column="22">le<pos:position pos:line="40" pos:column="24"/></name></expr></argument>)<pos:position pos:line="40" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="26"/></expr_stmt>
    }<pos:position pos:line="41" pos:column="6"/></block>	<break pos:line="41" pos:column="9">break;<pos:position pos:line="41" pos:column="15"/></break>
    <case pos:line="42" pos:column="5">case <expr><name pos:line="42" pos:column="10">POPT_ARG_STRING<pos:position pos:line="42" pos:column="25"/></name></expr>:<pos:position pos:line="42" pos:column="26"/></case>
    <block pos:line="43" pos:column="5">{	<decl_stmt><decl><type><specifier pos:line="43" pos:column="9">const<pos:position pos:line="43" pos:column="14"/></specifier> <name pos:line="43" pos:column="15">char<pos:position pos:line="43" pos:column="19"/></name> <modifier pos:line="43" pos:column="20">*<pos:position pos:line="43" pos:column="21"/></modifier></type> <name pos:line="43" pos:column="22">s<pos:position pos:line="43" pos:column="23"/></name> <init pos:line="43" pos:column="24">= <expr><operator pos:line="43" pos:column="26">*<pos:position pos:line="43" pos:column="27"/></operator><operator pos:line="43" pos:column="27">(<pos:position pos:line="43" pos:column="28"/></operator><specifier pos:line="43" pos:column="28">const<pos:position pos:line="43" pos:column="33"/></specifier> <name pos:line="43" pos:column="34">char<pos:position pos:line="43" pos:column="38"/></name> <operator pos:line="43" pos:column="39">*<pos:position pos:line="43" pos:column="40"/></operator><operator pos:line="43" pos:column="40">*<pos:position pos:line="43" pos:column="41"/></operator><operator pos:line="43" pos:column="41">)<pos:position pos:line="43" pos:column="42"/></operator><name><name pos:line="43" pos:column="42">opt<pos:position pos:line="43" pos:column="45"/></name><operator pos:line="43" pos:column="45">-&gt;<pos:position pos:line="43" pos:column="50"/></operator><name pos:line="43" pos:column="47">arg<pos:position pos:line="43" pos:column="50"/></name></name></expr></init></decl>;<pos:position pos:line="43" pos:column="51"/></decl_stmt>
	<if pos:line="44" pos:column="9">if <condition pos:line="44" pos:column="12">(<expr><name pos:line="44" pos:column="13">s<pos:position pos:line="44" pos:column="14"/></name> <operator pos:line="44" pos:column="15">==<pos:position pos:line="44" pos:column="17"/></operator> <name pos:line="44" pos:column="18">NULL<pos:position pos:line="44" pos:column="22"/></name></expr>)<pos:position pos:line="44" pos:column="23"/></condition><then pos:line="44" pos:column="23"> <block pos:line="44" pos:column="24">{
	    <expr_stmt><expr><call><name pos:line="45" pos:column="13">strcpy<pos:position pos:line="45" pos:column="19"/></name><argument_list pos:line="45" pos:column="19">(<argument><expr><name pos:line="45" pos:column="20">le<pos:position pos:line="45" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="45" pos:column="24">"null"<pos:position pos:line="45" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="45" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="32"/></expr_stmt>	<expr_stmt><expr><name pos:line="45" pos:column="33">le<pos:position pos:line="45" pos:column="35"/></name> <operator pos:line="45" pos:column="36">+=<pos:position pos:line="45" pos:column="38"/></operator> <call><name pos:line="45" pos:column="39">strlen<pos:position pos:line="45" pos:column="45"/></name><argument_list pos:line="45" pos:column="45">(<argument><expr><name pos:line="45" pos:column="46">le<pos:position pos:line="45" pos:column="48"/></name></expr></argument>)<pos:position pos:line="45" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="50"/></expr_stmt>
	}<pos:position pos:line="46" pos:column="10"/></block></then> <else pos:line="46" pos:column="11">else <block pos:line="46" pos:column="16">{
	    <decl_stmt><decl><type><name pos:line="47" pos:column="13">size_t<pos:position pos:line="47" pos:column="19"/></name></type> <name pos:line="47" pos:column="20">slen<pos:position pos:line="47" pos:column="24"/></name> <init pos:line="47" pos:column="25">= <expr><literal type="number" pos:line="47" pos:column="27">4<pos:position pos:line="47" pos:column="28"/></literal><operator pos:line="47" pos:column="28">*<pos:position pos:line="47" pos:column="29"/></operator><name pos:line="47" pos:column="29">lineLength<pos:position pos:line="47" pos:column="39"/></name> <operator pos:line="47" pos:column="40">-<pos:position pos:line="47" pos:column="41"/></operator> <operator pos:line="47" pos:column="42">(<pos:position pos:line="47" pos:column="43"/></operator><name pos:line="47" pos:column="43">le<pos:position pos:line="47" pos:column="45"/></name> <operator pos:line="47" pos:column="46">-<pos:position pos:line="47" pos:column="47"/></operator> <name pos:line="47" pos:column="48">l<pos:position pos:line="47" pos:column="49"/></name><operator pos:line="47" pos:column="49">)<pos:position pos:line="47" pos:column="50"/></operator> <operator pos:line="47" pos:column="51">-<pos:position pos:line="47" pos:column="52"/></operator> <sizeof pos:line="47" pos:column="53">sizeof<argument_list pos:line="47" pos:column="59">(<argument><expr><literal type="string" pos:line="47" pos:column="60">"\"...\")"<pos:position pos:line="47" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="71"/></argument_list></sizeof></expr></init></decl>;<pos:position pos:line="47" pos:column="72"/></decl_stmt>
	    <expr_stmt><expr><operator pos:line="48" pos:column="13">*<pos:position pos:line="48" pos:column="14"/></operator><name pos:line="48" pos:column="14">le<pos:position pos:line="48" pos:column="16"/></name><operator pos:line="48" pos:column="16">++<pos:position pos:line="48" pos:column="18"/></operator> <operator pos:line="48" pos:column="19">=<pos:position pos:line="48" pos:column="20"/></operator> <literal type="char" pos:line="48" pos:column="21">'"'<pos:position pos:line="48" pos:column="24"/></literal></expr>;<pos:position pos:line="48" pos:column="25"/></expr_stmt>
	    <expr_stmt><expr><call><name pos:line="49" pos:column="13">strncpy<pos:position pos:line="49" pos:column="20"/></name><argument_list pos:line="49" pos:column="20">(<argument><expr><name pos:line="49" pos:column="21">le<pos:position pos:line="49" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="25">s<pos:position pos:line="49" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="28">slen<pos:position pos:line="49" pos:column="32"/></name></expr></argument>)<pos:position pos:line="49" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="34"/></expr_stmt> <expr_stmt><expr><name><name pos:line="49" pos:column="35">le<pos:position pos:line="49" pos:column="37"/></name><index pos:line="49" pos:column="37">[<expr><name pos:line="49" pos:column="38">slen<pos:position pos:line="49" pos:column="42"/></name></expr>]<pos:position pos:line="49" pos:column="43"/></index></name> <operator pos:line="49" pos:column="44">=<pos:position pos:line="49" pos:column="45"/></operator> <literal type="char" pos:line="49" pos:column="46">'\0'<pos:position pos:line="49" pos:column="50"/></literal></expr>;<pos:position pos:line="49" pos:column="51"/></expr_stmt> <expr_stmt><expr><name pos:line="49" pos:column="52">le<pos:position pos:line="49" pos:column="54"/></name> <operator pos:line="49" pos:column="55">+=<pos:position pos:line="49" pos:column="57"/></operator> <call><name pos:line="49" pos:column="58">strlen<pos:position pos:line="49" pos:column="64"/></name><argument_list pos:line="49" pos:column="64">(<argument><expr><name pos:line="49" pos:column="65">le<pos:position pos:line="49" pos:column="67"/></name></expr></argument>)<pos:position pos:line="49" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="69"/></expr_stmt>	
	    <if pos:line="50" pos:column="13">if <condition pos:line="50" pos:column="16">(<expr><name pos:line="50" pos:column="17">slen<pos:position pos:line="50" pos:column="21"/></name> <operator pos:line="50" pos:column="22">&lt;<pos:position pos:line="50" pos:column="26"/></operator> <call><name pos:line="50" pos:column="24">strlen<pos:position pos:line="50" pos:column="30"/></name><argument_list pos:line="50" pos:column="30">(<argument><expr><name pos:line="50" pos:column="31">s<pos:position pos:line="50" pos:column="32"/></name></expr></argument>)<pos:position pos:line="50" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="50" pos:column="34"/></condition><then pos:line="50" pos:column="34"> <block pos:line="50" pos:column="35">{
		<expr_stmt><expr><call><name pos:line="51" pos:column="17">strcpy<pos:position pos:line="51" pos:column="23"/></name><argument_list pos:line="51" pos:column="23">(<argument><expr><name pos:line="51" pos:column="24">le<pos:position pos:line="51" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="51" pos:column="28">"..."<pos:position pos:line="51" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="51" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="35"/></expr_stmt>	<expr_stmt><expr><name pos:line="51" pos:column="41">le<pos:position pos:line="51" pos:column="43"/></name> <operator pos:line="51" pos:column="44">+=<pos:position pos:line="51" pos:column="46"/></operator> <call><name pos:line="51" pos:column="47">strlen<pos:position pos:line="51" pos:column="53"/></name><argument_list pos:line="51" pos:column="53">(<argument><expr><name pos:line="51" pos:column="54">le<pos:position pos:line="51" pos:column="56"/></name></expr></argument>)<pos:position pos:line="51" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="58"/></expr_stmt>
	    }<pos:position pos:line="52" pos:column="14"/></block></then></if>
	    <expr_stmt><expr><operator pos:line="53" pos:column="13">*<pos:position pos:line="53" pos:column="14"/></operator><name pos:line="53" pos:column="14">le<pos:position pos:line="53" pos:column="16"/></name><operator pos:line="53" pos:column="16">++<pos:position pos:line="53" pos:column="18"/></operator> <operator pos:line="53" pos:column="19">=<pos:position pos:line="53" pos:column="20"/></operator> <literal type="char" pos:line="53" pos:column="21">'"'<pos:position pos:line="53" pos:column="24"/></literal></expr>;<pos:position pos:line="53" pos:column="25"/></expr_stmt>
	}<pos:position pos:line="54" pos:column="10"/></block></else></if>
    }<pos:position pos:line="55" pos:column="6"/></block>	<break pos:line="55" pos:column="9">break;<pos:position pos:line="55" pos:column="15"/></break>
    <case pos:line="56" pos:column="5">case <expr><name pos:line="56" pos:column="10">POPT_ARG_NONE<pos:position pos:line="56" pos:column="23"/></name></expr>:<pos:position pos:line="56" pos:column="24"/></case>
    <default pos:line="57" pos:column="5">default:<pos:position pos:line="57" pos:column="13"/></default>
	<expr_stmt><expr><name pos:line="58" pos:column="9">l<pos:position pos:line="58" pos:column="10"/></name> <operator pos:line="58" pos:column="11">=<pos:position pos:line="58" pos:column="12"/></operator> <call><name pos:line="58" pos:column="13">_free<pos:position pos:line="58" pos:column="18"/></name><argument_list pos:line="58" pos:column="18">(<argument><expr><name pos:line="58" pos:column="19">l<pos:position pos:line="58" pos:column="20"/></name></expr></argument>)<pos:position pos:line="58" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="22"/></expr_stmt>
	<return pos:line="59" pos:column="9">return <expr><name pos:line="59" pos:column="16">NULL<pos:position pos:line="59" pos:column="20"/></name></expr>;<pos:position pos:line="59" pos:column="21"/></return>
	<comment type="block" pos:line="60" pos:column="9">/*@notreached@*/</comment> <break pos:line="60" pos:column="26">break;<pos:position pos:line="60" pos:column="32"/></break>
    }<pos:position pos:line="61" pos:column="6"/></block></switch></block></then></if>
    <expr_stmt><expr><operator pos:line="62" pos:column="5">*<pos:position pos:line="62" pos:column="6"/></operator><name pos:line="62" pos:column="6">le<pos:position pos:line="62" pos:column="8"/></name><operator pos:line="62" pos:column="8">++<pos:position pos:line="62" pos:column="10"/></operator> <operator pos:line="62" pos:column="11">=<pos:position pos:line="62" pos:column="12"/></operator> <literal type="char" pos:line="62" pos:column="13">')'<pos:position pos:line="62" pos:column="16"/></literal></expr>;<pos:position pos:line="62" pos:column="17"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="63" pos:column="5">*<pos:position pos:line="63" pos:column="6"/></operator><name pos:line="63" pos:column="6">le<pos:position pos:line="63" pos:column="8"/></name> <operator pos:line="63" pos:column="9">=<pos:position pos:line="63" pos:column="10"/></operator> <literal type="char" pos:line="63" pos:column="11">'\0'<pos:position pos:line="63" pos:column="15"/></literal></expr>;<pos:position pos:line="63" pos:column="16"/></expr_stmt>

    <return pos:line="65" pos:column="5">return <expr><name pos:line="65" pos:column="12">l<pos:position pos:line="65" pos:column="13"/></name></expr>;<pos:position pos:line="65" pos:column="14"/></return>
}<pos:position pos:line="66" pos:column="2"/></block></function></unit>
