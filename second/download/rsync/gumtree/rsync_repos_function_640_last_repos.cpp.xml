<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_640_last_repos.cpp" pos:tabs="8"><function_decl><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name> <name pos:line="1" pos:column="5">ZEXPORT<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">inflateSetDictionary<pos:position pos:line="1" pos:column="33"/></name><parameter_list pos:line="1" pos:column="33">(<parameter><decl><type><name pos:line="1" pos:column="34">strm<pos:position pos:line="1" pos:column="38"/></name></type></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="40">dictionary<pos:position pos:line="1" pos:column="50"/></name></type></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="52">dictLength<pos:position pos:line="1" pos:column="62"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="63"/></parameter_list>
<decl_stmt><decl><type><name pos:line="2" pos:column="1">z_streamp<pos:position pos:line="2" pos:column="10"/></name></type> <name pos:line="2" pos:column="11">strm<pos:position pos:line="2" pos:column="15"/></name></decl>;<pos:position pos:line="2" pos:column="16"/></decl_stmt>
<decl_stmt><decl><type><specifier pos:line="3" pos:column="1">const<pos:position pos:line="3" pos:column="6"/></specifier> <name pos:line="3" pos:column="7">Bytef<pos:position pos:line="3" pos:column="12"/></name> <modifier pos:line="3" pos:column="13">*<pos:position pos:line="3" pos:column="14"/></modifier></type><name pos:line="3" pos:column="14">dictionary<pos:position pos:line="3" pos:column="24"/></name></decl>;<pos:position pos:line="3" pos:column="25"/></decl_stmt>
<decl_stmt><decl><type><name pos:line="4" pos:column="1">uInt<pos:position pos:line="4" pos:column="5"/></name></type> <name pos:line="4" pos:column="6">dictLength<pos:position pos:line="4" pos:column="16"/></name></decl>;<pos:position pos:line="4" pos:column="17"/></decl_stmt>
<block pos:line="5" pos:column="1">{
    <decl_stmt><decl><type><name><name pos:line="6" pos:column="5">struct<pos:position pos:line="6" pos:column="11"/></name> <name pos:line="6" pos:column="12">inflate_state<pos:position pos:line="6" pos:column="25"/></name></name> <name pos:line="6" pos:column="26">FAR<pos:position pos:line="6" pos:column="29"/></name> <modifier pos:line="6" pos:column="30">*<pos:position pos:line="6" pos:column="31"/></modifier></type><name pos:line="6" pos:column="31">state<pos:position pos:line="6" pos:column="36"/></name></decl>;<pos:position pos:line="6" pos:column="37"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">unsigned<pos:position pos:line="7" pos:column="13"/></name> <name pos:line="7" pos:column="14">long<pos:position pos:line="7" pos:column="18"/></name></type> <name pos:line="7" pos:column="19">dictid<pos:position pos:line="7" pos:column="25"/></name></decl>;<pos:position pos:line="7" pos:column="26"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">int<pos:position pos:line="8" pos:column="8"/></name></type> <name pos:line="8" pos:column="9">ret<pos:position pos:line="8" pos:column="12"/></name></decl>;<pos:position pos:line="8" pos:column="13"/></decl_stmt>

    <comment type="block" pos:line="10" pos:column="5">/* check state */</comment>
    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><name pos:line="11" pos:column="9">strm<pos:position pos:line="11" pos:column="13"/></name> <operator pos:line="11" pos:column="14">==<pos:position pos:line="11" pos:column="16"/></operator> <name pos:line="11" pos:column="17">Z_NULL<pos:position pos:line="11" pos:column="23"/></name> <operator pos:line="11" pos:column="24">||<pos:position pos:line="11" pos:column="26"/></operator> <name><name pos:line="11" pos:column="27">strm<pos:position pos:line="11" pos:column="31"/></name><operator pos:line="11" pos:column="31">-&gt;<pos:position pos:line="11" pos:column="36"/></operator><name pos:line="11" pos:column="33">state<pos:position pos:line="11" pos:column="38"/></name></name> <operator pos:line="11" pos:column="39">==<pos:position pos:line="11" pos:column="41"/></operator> <name pos:line="11" pos:column="42">Z_NULL<pos:position pos:line="11" pos:column="48"/></name></expr>)<pos:position pos:line="11" pos:column="49"/></condition><then pos:line="11" pos:column="49"> <block type="pseudo"><return pos:line="11" pos:column="50">return <expr><name pos:line="11" pos:column="57">Z_STREAM_ERROR<pos:position pos:line="11" pos:column="71"/></name></expr>;<pos:position pos:line="11" pos:column="72"/></return></block></then></if>
    <expr_stmt><expr><name pos:line="12" pos:column="5">state<pos:position pos:line="12" pos:column="10"/></name> <operator pos:line="12" pos:column="11">=<pos:position pos:line="12" pos:column="12"/></operator> <operator pos:line="12" pos:column="13">(<pos:position pos:line="12" pos:column="14"/></operator>struct <name pos:line="12" pos:column="21">inflate_state<pos:position pos:line="12" pos:column="34"/></name> <name pos:line="12" pos:column="35">FAR<pos:position pos:line="12" pos:column="38"/></name> <operator pos:line="12" pos:column="39">*<pos:position pos:line="12" pos:column="40"/></operator><operator pos:line="12" pos:column="40">)<pos:position pos:line="12" pos:column="41"/></operator><name><name pos:line="12" pos:column="41">strm<pos:position pos:line="12" pos:column="45"/></name><operator pos:line="12" pos:column="45">-&gt;<pos:position pos:line="12" pos:column="50"/></operator><name pos:line="12" pos:column="47">state<pos:position pos:line="12" pos:column="52"/></name></name></expr>;<pos:position pos:line="12" pos:column="53"/></expr_stmt>
    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><name><name pos:line="13" pos:column="9">state<pos:position pos:line="13" pos:column="14"/></name><operator pos:line="13" pos:column="14">-&gt;<pos:position pos:line="13" pos:column="19"/></operator><name pos:line="13" pos:column="16">wrap<pos:position pos:line="13" pos:column="20"/></name></name> <operator pos:line="13" pos:column="21">!=<pos:position pos:line="13" pos:column="23"/></operator> <literal type="number" pos:line="13" pos:column="24">0<pos:position pos:line="13" pos:column="25"/></literal> <operator pos:line="13" pos:column="26">&amp;&amp;<pos:position pos:line="13" pos:column="36"/></operator> <name><name pos:line="13" pos:column="29">state<pos:position pos:line="13" pos:column="34"/></name><operator pos:line="13" pos:column="34">-&gt;<pos:position pos:line="13" pos:column="39"/></operator><name pos:line="13" pos:column="36">mode<pos:position pos:line="13" pos:column="40"/></name></name> <operator pos:line="13" pos:column="41">!=<pos:position pos:line="13" pos:column="43"/></operator> <name pos:line="13" pos:column="44">DICT<pos:position pos:line="13" pos:column="48"/></name></expr>)<pos:position pos:line="13" pos:column="49"/></condition><then pos:line="13" pos:column="49">
        <block type="pseudo"><return pos:line="14" pos:column="9">return <expr><name pos:line="14" pos:column="16">Z_STREAM_ERROR<pos:position pos:line="14" pos:column="30"/></name></expr>;<pos:position pos:line="14" pos:column="31"/></return></block></then></if>

    <comment type="block" pos:line="16" pos:column="5">/* check for correct dictionary identifier */</comment>
    <if pos:line="17" pos:column="5">if <condition pos:line="17" pos:column="8">(<expr><name><name pos:line="17" pos:column="9">state<pos:position pos:line="17" pos:column="14"/></name><operator pos:line="17" pos:column="14">-&gt;<pos:position pos:line="17" pos:column="19"/></operator><name pos:line="17" pos:column="16">mode<pos:position pos:line="17" pos:column="20"/></name></name> <operator pos:line="17" pos:column="21">==<pos:position pos:line="17" pos:column="23"/></operator> <name pos:line="17" pos:column="24">DICT<pos:position pos:line="17" pos:column="28"/></name></expr>)<pos:position pos:line="17" pos:column="29"/></condition><then pos:line="17" pos:column="29"> <block pos:line="17" pos:column="30">{
        <expr_stmt><expr><name pos:line="18" pos:column="9">dictid<pos:position pos:line="18" pos:column="15"/></name> <operator pos:line="18" pos:column="16">=<pos:position pos:line="18" pos:column="17"/></operator> <call><name pos:line="18" pos:column="18">adler32<pos:position pos:line="18" pos:column="25"/></name><argument_list pos:line="18" pos:column="25">(<argument><expr><literal type="number" pos:line="18" pos:column="26">0L<pos:position pos:line="18" pos:column="28"/></literal></expr></argument>, <argument><expr><name pos:line="18" pos:column="30">Z_NULL<pos:position pos:line="18" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="18" pos:column="38">0<pos:position pos:line="18" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="41"/></expr_stmt>
        <expr_stmt><expr><name pos:line="19" pos:column="9">dictid<pos:position pos:line="19" pos:column="15"/></name> <operator pos:line="19" pos:column="16">=<pos:position pos:line="19" pos:column="17"/></operator> <call><name pos:line="19" pos:column="18">adler32<pos:position pos:line="19" pos:column="25"/></name><argument_list pos:line="19" pos:column="25">(<argument><expr><name pos:line="19" pos:column="26">dictid<pos:position pos:line="19" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="34">dictionary<pos:position pos:line="19" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="46">dictLength<pos:position pos:line="19" pos:column="56"/></name></expr></argument>)<pos:position pos:line="19" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="58"/></expr_stmt>
        <if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><name pos:line="20" pos:column="13">dictid<pos:position pos:line="20" pos:column="19"/></name> <operator pos:line="20" pos:column="20">!=<pos:position pos:line="20" pos:column="22"/></operator> <name><name pos:line="20" pos:column="23">state<pos:position pos:line="20" pos:column="28"/></name><operator pos:line="20" pos:column="28">-&gt;<pos:position pos:line="20" pos:column="33"/></operator><name pos:line="20" pos:column="30">check<pos:position pos:line="20" pos:column="35"/></name></name></expr>)<pos:position pos:line="20" pos:column="36"/></condition><then pos:line="20" pos:column="36">
            <block type="pseudo"><return pos:line="21" pos:column="13">return <expr><name pos:line="21" pos:column="20">Z_DATA_ERROR<pos:position pos:line="21" pos:column="32"/></name></expr>;<pos:position pos:line="21" pos:column="33"/></return></block></then></if>
    }<pos:position pos:line="22" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="24" pos:column="5">/* copy dictionary to window using updatewindow(), which will amend the
       existing dictionary if appropriate */</comment>
    <expr_stmt><expr><name pos:line="26" pos:column="5">ret<pos:position pos:line="26" pos:column="8"/></name> <operator pos:line="26" pos:column="9">=<pos:position pos:line="26" pos:column="10"/></operator> <call><name pos:line="26" pos:column="11">updatewindow<pos:position pos:line="26" pos:column="23"/></name><argument_list pos:line="26" pos:column="23">(<argument><expr><name pos:line="26" pos:column="24">strm<pos:position pos:line="26" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="30">dictionary<pos:position pos:line="26" pos:column="40"/></name> <operator pos:line="26" pos:column="41">+<pos:position pos:line="26" pos:column="42"/></operator> <name pos:line="26" pos:column="43">dictLength<pos:position pos:line="26" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="55">dictLength<pos:position pos:line="26" pos:column="65"/></name></expr></argument>)<pos:position pos:line="26" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="67"/></expr_stmt>
    <if pos:line="27" pos:column="5">if <condition pos:line="27" pos:column="8">(<expr><name pos:line="27" pos:column="9">ret<pos:position pos:line="27" pos:column="12"/></name></expr>)<pos:position pos:line="27" pos:column="13"/></condition><then pos:line="27" pos:column="13"> <block pos:line="27" pos:column="14">{
        <expr_stmt><expr><name><name pos:line="28" pos:column="9">state<pos:position pos:line="28" pos:column="14"/></name><operator pos:line="28" pos:column="14">-&gt;<pos:position pos:line="28" pos:column="19"/></operator><name pos:line="28" pos:column="16">mode<pos:position pos:line="28" pos:column="20"/></name></name> <operator pos:line="28" pos:column="21">=<pos:position pos:line="28" pos:column="22"/></operator> <name pos:line="28" pos:column="23">MEM<pos:position pos:line="28" pos:column="26"/></name></expr>;<pos:position pos:line="28" pos:column="27"/></expr_stmt>
        <return pos:line="29" pos:column="9">return <expr><name pos:line="29" pos:column="16">Z_MEM_ERROR<pos:position pos:line="29" pos:column="27"/></name></expr>;<pos:position pos:line="29" pos:column="28"/></return>
    }<pos:position pos:line="30" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name><name pos:line="31" pos:column="5">state<pos:position pos:line="31" pos:column="10"/></name><operator pos:line="31" pos:column="10">-&gt;<pos:position pos:line="31" pos:column="15"/></operator><name pos:line="31" pos:column="12">havedict<pos:position pos:line="31" pos:column="20"/></name></name> <operator pos:line="31" pos:column="21">=<pos:position pos:line="31" pos:column="22"/></operator> <literal type="number" pos:line="31" pos:column="23">1<pos:position pos:line="31" pos:column="24"/></literal></expr>;<pos:position pos:line="31" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="32" pos:column="5">Tracev<pos:position pos:line="32" pos:column="11"/></name><argument_list pos:line="32" pos:column="11">(<argument><expr><operator pos:line="32" pos:column="12">(<pos:position pos:line="32" pos:column="13"/></operator><name pos:line="32" pos:column="13">stderr<pos:position pos:line="32" pos:column="19"/></name><operator pos:line="32" pos:column="19">,<pos:position pos:line="32" pos:column="20"/></operator> <literal type="string" pos:line="32" pos:column="21">"inflate:   dictionary set\n"<pos:position pos:line="32" pos:column="50"/></literal><operator pos:line="32" pos:column="50">)<pos:position pos:line="32" pos:column="51"/></operator></expr></argument>)<pos:position pos:line="32" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="53"/></expr_stmt>
    <return pos:line="33" pos:column="5">return <expr><name pos:line="33" pos:column="12">Z_OK<pos:position pos:line="33" pos:column="16"/></name></expr>;<pos:position pos:line="33" pos:column="17"/></return>
}<pos:position pos:line="34" pos:column="2"/></block></function_decl></unit>
