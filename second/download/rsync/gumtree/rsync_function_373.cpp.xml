<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_function_373.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">receive_data<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name pos:line="1" pos:column="25">int<pos:position pos:line="1" pos:column="28"/></name></type> <name pos:line="1" pos:column="29">f_in<pos:position pos:line="1" pos:column="33"/></name></decl></parameter>,<parameter><decl><type><name><name pos:line="1" pos:column="34">struct<pos:position pos:line="1" pos:column="40"/></name> <name pos:line="1" pos:column="41">map_struct<pos:position pos:line="1" pos:column="51"/></name></name> <modifier pos:line="1" pos:column="52">*<pos:position pos:line="1" pos:column="53"/></modifier></type><name pos:line="1" pos:column="53">buf<pos:position pos:line="1" pos:column="56"/></name></decl></parameter>,<parameter><decl><type><name pos:line="1" pos:column="57">int<pos:position pos:line="1" pos:column="60"/></name></type> <name pos:line="1" pos:column="61">fd<pos:position pos:line="1" pos:column="63"/></name></decl></parameter>,<parameter><decl><type><name pos:line="1" pos:column="64">char<pos:position pos:line="1" pos:column="68"/></name> <modifier pos:line="1" pos:column="69">*<pos:position pos:line="1" pos:column="70"/></modifier></type><name pos:line="1" pos:column="70">fname<pos:position pos:line="1" pos:column="75"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="76"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">int<pos:position pos:line="3" pos:column="6"/></name></type> <name pos:line="3" pos:column="7">i<pos:position pos:line="3" pos:column="8"/></name></decl>,<decl><type ref="prev"/><name pos:line="3" pos:column="9">n<pos:position pos:line="3" pos:column="10"/></name></decl>,<decl><type ref="prev"/><name pos:line="3" pos:column="11">remainder<pos:position pos:line="3" pos:column="20"/></name></decl>,<decl><type ref="prev"/><name pos:line="3" pos:column="21">len<pos:position pos:line="3" pos:column="24"/></name></decl>,<decl><type ref="prev"/><name pos:line="3" pos:column="25">count<pos:position pos:line="3" pos:column="30"/></name></decl>;<pos:position pos:line="3" pos:column="31"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">off_t<pos:position pos:line="4" pos:column="8"/></name></type> <name pos:line="4" pos:column="9">offset<pos:position pos:line="4" pos:column="15"/></name> <init pos:line="4" pos:column="16">= <expr><literal type="number" pos:line="4" pos:column="18">0<pos:position pos:line="4" pos:column="19"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">off_t<pos:position pos:line="5" pos:column="8"/></name></type> <name pos:line="5" pos:column="9">offset2<pos:position pos:line="5" pos:column="16"/></name></decl>;<pos:position pos:line="5" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">char<pos:position pos:line="6" pos:column="7"/></name> <modifier pos:line="6" pos:column="8">*<pos:position pos:line="6" pos:column="9"/></modifier></type><name pos:line="6" pos:column="9">data<pos:position pos:line="6" pos:column="13"/></name></decl>;<pos:position pos:line="6" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><specifier pos:line="7" pos:column="3">static<pos:position pos:line="7" pos:column="9"/></specifier> <type><name pos:line="7" pos:column="10">char<pos:position pos:line="7" pos:column="14"/></name></type> <name><name pos:line="7" pos:column="15">file_sum1<pos:position pos:line="7" pos:column="24"/></name><index pos:line="7" pos:column="24">[<expr><name pos:line="7" pos:column="25">MD4_SUM_LENGTH<pos:position pos:line="7" pos:column="39"/></name></expr>]<pos:position pos:line="7" pos:column="40"/></index></name></decl>;<pos:position pos:line="7" pos:column="41"/></decl_stmt>
  <decl_stmt><decl><specifier pos:line="8" pos:column="3">static<pos:position pos:line="8" pos:column="9"/></specifier> <type><name pos:line="8" pos:column="10">char<pos:position pos:line="8" pos:column="14"/></name></type> <name><name pos:line="8" pos:column="15">file_sum2<pos:position pos:line="8" pos:column="24"/></name><index pos:line="8" pos:column="24">[<expr><name pos:line="8" pos:column="25">MD4_SUM_LENGTH<pos:position pos:line="8" pos:column="39"/></name></expr>]<pos:position pos:line="8" pos:column="40"/></index></name></decl>;<pos:position pos:line="8" pos:column="41"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">char<pos:position pos:line="9" pos:column="7"/></name> <modifier pos:line="9" pos:column="8">*<pos:position pos:line="9" pos:column="9"/></modifier></type><name pos:line="9" pos:column="9">map<pos:position pos:line="9" pos:column="12"/></name><init pos:line="9" pos:column="12">=<expr><name pos:line="9" pos:column="13">NULL<pos:position pos:line="9" pos:column="17"/></name></expr></init></decl>;<pos:position pos:line="9" pos:column="18"/></decl_stmt>

  <expr_stmt><expr><name pos:line="11" pos:column="3">count<pos:position pos:line="11" pos:column="8"/></name> <operator pos:line="11" pos:column="9">=<pos:position pos:line="11" pos:column="10"/></operator> <call><name pos:line="11" pos:column="11">read_int<pos:position pos:line="11" pos:column="19"/></name><argument_list pos:line="11" pos:column="19">(<argument><expr><name pos:line="11" pos:column="20">f_in<pos:position pos:line="11" pos:column="24"/></name></expr></argument>)<pos:position pos:line="11" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="26"/></expr_stmt>
  <expr_stmt><expr><name pos:line="12" pos:column="3">n<pos:position pos:line="12" pos:column="4"/></name> <operator pos:line="12" pos:column="5">=<pos:position pos:line="12" pos:column="6"/></operator> <call><name pos:line="12" pos:column="7">read_int<pos:position pos:line="12" pos:column="15"/></name><argument_list pos:line="12" pos:column="15">(<argument><expr><name pos:line="12" pos:column="16">f_in<pos:position pos:line="12" pos:column="20"/></name></expr></argument>)<pos:position pos:line="12" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="22"/></expr_stmt>
  <expr_stmt><expr><name pos:line="13" pos:column="3">remainder<pos:position pos:line="13" pos:column="12"/></name> <operator pos:line="13" pos:column="13">=<pos:position pos:line="13" pos:column="14"/></operator> <call><name pos:line="13" pos:column="15">read_int<pos:position pos:line="13" pos:column="23"/></name><argument_list pos:line="13" pos:column="23">(<argument><expr><name pos:line="13" pos:column="24">f_in<pos:position pos:line="13" pos:column="28"/></name></expr></argument>)<pos:position pos:line="13" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="30"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="15" pos:column="3">sum_init<pos:position pos:line="15" pos:column="11"/></name><argument_list pos:line="15" pos:column="11">()<pos:position pos:line="15" pos:column="13"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="14"/></expr_stmt>

  <for pos:line="17" pos:column="3">for <control pos:line="17" pos:column="7">(<init><expr><name pos:line="17" pos:column="8">i<pos:position pos:line="17" pos:column="9"/></name><operator pos:line="17" pos:column="9">=<pos:position pos:line="17" pos:column="10"/></operator><call><name pos:line="17" pos:column="10">recv_token<pos:position pos:line="17" pos:column="20"/></name><argument_list pos:line="17" pos:column="20">(<argument><expr><name pos:line="17" pos:column="21">f_in<pos:position pos:line="17" pos:column="25"/></name></expr></argument>,<argument><expr><operator pos:line="17" pos:column="26">&amp;<pos:position pos:line="17" pos:column="31"/></operator><name pos:line="17" pos:column="27">data<pos:position pos:line="17" pos:column="31"/></name></expr></argument>)<pos:position pos:line="17" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="33"/></init> <condition><expr><name pos:line="17" pos:column="34">i<pos:position pos:line="17" pos:column="35"/></name> <operator pos:line="17" pos:column="36">!=<pos:position pos:line="17" pos:column="38"/></operator> <literal type="number" pos:line="17" pos:column="39">0<pos:position pos:line="17" pos:column="40"/></literal></expr>;<pos:position pos:line="17" pos:column="41"/></condition> <incr><expr><name pos:line="17" pos:column="42">i<pos:position pos:line="17" pos:column="43"/></name><operator pos:line="17" pos:column="43">=<pos:position pos:line="17" pos:column="44"/></operator><call><name pos:line="17" pos:column="44">recv_token<pos:position pos:line="17" pos:column="54"/></name><argument_list pos:line="17" pos:column="54">(<argument><expr><name pos:line="17" pos:column="55">f_in<pos:position pos:line="17" pos:column="59"/></name></expr></argument>,<argument><expr><operator pos:line="17" pos:column="60">&amp;<pos:position pos:line="17" pos:column="65"/></operator><name pos:line="17" pos:column="61">data<pos:position pos:line="17" pos:column="65"/></name></expr></argument>)<pos:position pos:line="17" pos:column="66"/></argument_list></call></expr></incr>)<pos:position pos:line="17" pos:column="67"/></control> <block pos:line="17" pos:column="68">{
    <if pos:line="18" pos:column="5">if <condition pos:line="18" pos:column="8">(<expr><name pos:line="18" pos:column="9">i<pos:position pos:line="18" pos:column="10"/></name> <operator pos:line="18" pos:column="11">&gt;<pos:position pos:line="18" pos:column="15"/></operator> <literal type="number" pos:line="18" pos:column="13">0<pos:position pos:line="18" pos:column="14"/></literal></expr>)<pos:position pos:line="18" pos:column="15"/></condition><then pos:line="18" pos:column="15"> <block pos:line="18" pos:column="16">{
      <if pos:line="19" pos:column="7">if <condition pos:line="19" pos:column="10">(<expr><name pos:line="19" pos:column="11">verbose<pos:position pos:line="19" pos:column="18"/></name> <operator pos:line="19" pos:column="19">&gt;<pos:position pos:line="19" pos:column="23"/></operator> <literal type="number" pos:line="19" pos:column="21">3<pos:position pos:line="19" pos:column="22"/></literal></expr>)<pos:position pos:line="19" pos:column="23"/></condition><then pos:line="19" pos:column="23">
	<block type="pseudo"><expr_stmt><expr><call><name pos:line="20" pos:column="9">fprintf<pos:position pos:line="20" pos:column="16"/></name><argument_list pos:line="20" pos:column="16">(<argument><expr><name pos:line="20" pos:column="17">FERROR<pos:position pos:line="20" pos:column="23"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="20" pos:column="24">"data recv %d at %d\n"<pos:position pos:line="20" pos:column="46"/></literal></expr></argument>,<argument><expr><name pos:line="20" pos:column="47">i<pos:position pos:line="20" pos:column="48"/></name></expr></argument>,<argument><expr><operator pos:line="20" pos:column="49">(<pos:position pos:line="20" pos:column="50"/></operator><name pos:line="20" pos:column="50">int<pos:position pos:line="20" pos:column="53"/></name><operator pos:line="20" pos:column="53">)<pos:position pos:line="20" pos:column="54"/></operator><name pos:line="20" pos:column="54">offset<pos:position pos:line="20" pos:column="60"/></name></expr></argument>)<pos:position pos:line="20" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="62"/></expr_stmt></block></then></if>

      <expr_stmt><expr><call><name pos:line="22" pos:column="7">sum_update<pos:position pos:line="22" pos:column="17"/></name><argument_list pos:line="22" pos:column="17">(<argument><expr><name pos:line="22" pos:column="18">data<pos:position pos:line="22" pos:column="22"/></name></expr></argument>,<argument><expr><name pos:line="22" pos:column="23">i<pos:position pos:line="22" pos:column="24"/></name></expr></argument>)<pos:position pos:line="22" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="26"/></expr_stmt>

      <if pos:line="24" pos:column="7">if <condition pos:line="24" pos:column="10">(<expr><name pos:line="24" pos:column="11">fd<pos:position pos:line="24" pos:column="13"/></name> <operator pos:line="24" pos:column="14">!=<pos:position pos:line="24" pos:column="16"/></operator> <operator pos:line="24" pos:column="17">-<pos:position pos:line="24" pos:column="18"/></operator><literal type="number" pos:line="24" pos:column="18">1<pos:position pos:line="24" pos:column="19"/></literal> <operator pos:line="24" pos:column="20">&amp;&amp;<pos:position pos:line="24" pos:column="30"/></operator> <call><name pos:line="24" pos:column="23">write_sparse<pos:position pos:line="24" pos:column="35"/></name><argument_list pos:line="24" pos:column="35">(<argument><expr><name pos:line="24" pos:column="36">fd<pos:position pos:line="24" pos:column="38"/></name></expr></argument>,<argument><expr><name pos:line="24" pos:column="39">data<pos:position pos:line="24" pos:column="43"/></name></expr></argument>,<argument><expr><name pos:line="24" pos:column="44">i<pos:position pos:line="24" pos:column="45"/></name></expr></argument>)<pos:position pos:line="24" pos:column="46"/></argument_list></call> <operator pos:line="24" pos:column="47">!=<pos:position pos:line="24" pos:column="49"/></operator> <name pos:line="24" pos:column="50">i<pos:position pos:line="24" pos:column="51"/></name></expr>)<pos:position pos:line="24" pos:column="52"/></condition><then pos:line="24" pos:column="52"> <block pos:line="24" pos:column="53">{
	<expr_stmt><expr><call><name pos:line="25" pos:column="9">fprintf<pos:position pos:line="25" pos:column="16"/></name><argument_list pos:line="25" pos:column="16">(<argument><expr><name pos:line="25" pos:column="17">FERROR<pos:position pos:line="25" pos:column="23"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="25" pos:column="24">"write failed on %s : %s\n"<pos:position pos:line="25" pos:column="51"/></literal></expr></argument>,<argument><expr><name pos:line="25" pos:column="52">fname<pos:position pos:line="25" pos:column="57"/></name></expr></argument>,<argument><expr><call><name pos:line="25" pos:column="58">strerror<pos:position pos:line="25" pos:column="66"/></name><argument_list pos:line="25" pos:column="66">(<argument><expr><name pos:line="25" pos:column="67">errno<pos:position pos:line="25" pos:column="72"/></name></expr></argument>)<pos:position pos:line="25" pos:column="73"/></argument_list></call></expr></argument>)<pos:position pos:line="25" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="75"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="26" pos:column="9">exit_cleanup<pos:position pos:line="26" pos:column="21"/></name><argument_list pos:line="26" pos:column="21">(<argument><expr><literal type="number" pos:line="26" pos:column="22">1<pos:position pos:line="26" pos:column="23"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="25"/></expr_stmt>
      }<pos:position pos:line="27" pos:column="8"/></block></then></if>
      <expr_stmt><expr><name pos:line="28" pos:column="7">offset<pos:position pos:line="28" pos:column="13"/></name> <operator pos:line="28" pos:column="14">+=<pos:position pos:line="28" pos:column="16"/></operator> <name pos:line="28" pos:column="17">i<pos:position pos:line="28" pos:column="18"/></name></expr>;<pos:position pos:line="28" pos:column="19"/></expr_stmt>
    }<pos:position pos:line="29" pos:column="6"/></block></then> <else pos:line="29" pos:column="7">else <block pos:line="29" pos:column="12">{
      <expr_stmt><expr><name pos:line="30" pos:column="7">i<pos:position pos:line="30" pos:column="8"/></name> <operator pos:line="30" pos:column="9">=<pos:position pos:line="30" pos:column="10"/></operator> <operator pos:line="30" pos:column="11">-<pos:position pos:line="30" pos:column="12"/></operator><operator pos:line="30" pos:column="12">(<pos:position pos:line="30" pos:column="13"/></operator><name pos:line="30" pos:column="13">i<pos:position pos:line="30" pos:column="14"/></name><operator pos:line="30" pos:column="14">+<pos:position pos:line="30" pos:column="15"/></operator><literal type="number" pos:line="30" pos:column="15">1<pos:position pos:line="30" pos:column="16"/></literal><operator pos:line="30" pos:column="16">)<pos:position pos:line="30" pos:column="17"/></operator></expr>;<pos:position pos:line="30" pos:column="18"/></expr_stmt>
      <expr_stmt><expr><name pos:line="31" pos:column="7">offset2<pos:position pos:line="31" pos:column="14"/></name> <operator pos:line="31" pos:column="15">=<pos:position pos:line="31" pos:column="16"/></operator> <name pos:line="31" pos:column="17">i<pos:position pos:line="31" pos:column="18"/></name><operator pos:line="31" pos:column="18">*<pos:position pos:line="31" pos:column="19"/></operator><name pos:line="31" pos:column="19">n<pos:position pos:line="31" pos:column="20"/></name></expr>;<pos:position pos:line="31" pos:column="21"/></expr_stmt>
      <expr_stmt><expr><name pos:line="32" pos:column="7">len<pos:position pos:line="32" pos:column="10"/></name> <operator pos:line="32" pos:column="11">=<pos:position pos:line="32" pos:column="12"/></operator> <name pos:line="32" pos:column="13">n<pos:position pos:line="32" pos:column="14"/></name></expr>;<pos:position pos:line="32" pos:column="15"/></expr_stmt>
      <if pos:line="33" pos:column="7">if <condition pos:line="33" pos:column="10">(<expr><name pos:line="33" pos:column="11">i<pos:position pos:line="33" pos:column="12"/></name> <operator pos:line="33" pos:column="13">==<pos:position pos:line="33" pos:column="15"/></operator> <name pos:line="33" pos:column="16">count<pos:position pos:line="33" pos:column="21"/></name><operator pos:line="33" pos:column="21">-<pos:position pos:line="33" pos:column="22"/></operator><literal type="number" pos:line="33" pos:column="22">1<pos:position pos:line="33" pos:column="23"/></literal> <operator pos:line="33" pos:column="24">&amp;&amp;<pos:position pos:line="33" pos:column="34"/></operator> <name pos:line="33" pos:column="27">remainder<pos:position pos:line="33" pos:column="36"/></name> <operator pos:line="33" pos:column="37">!=<pos:position pos:line="33" pos:column="39"/></operator> <literal type="number" pos:line="33" pos:column="40">0<pos:position pos:line="33" pos:column="41"/></literal></expr>)<pos:position pos:line="33" pos:column="42"/></condition><then pos:line="33" pos:column="42">
	<block type="pseudo"><expr_stmt><expr><name pos:line="34" pos:column="9">len<pos:position pos:line="34" pos:column="12"/></name> <operator pos:line="34" pos:column="13">=<pos:position pos:line="34" pos:column="14"/></operator> <name pos:line="34" pos:column="15">remainder<pos:position pos:line="34" pos:column="24"/></name></expr>;<pos:position pos:line="34" pos:column="25"/></expr_stmt></block></then></if>

      <if pos:line="36" pos:column="7">if <condition pos:line="36" pos:column="10">(<expr><name pos:line="36" pos:column="11">verbose<pos:position pos:line="36" pos:column="18"/></name> <operator pos:line="36" pos:column="19">&gt;<pos:position pos:line="36" pos:column="23"/></operator> <literal type="number" pos:line="36" pos:column="21">3<pos:position pos:line="36" pos:column="22"/></literal></expr>)<pos:position pos:line="36" pos:column="23"/></condition><then pos:line="36" pos:column="23">
	<block type="pseudo"><expr_stmt><expr><call><name pos:line="37" pos:column="9">fprintf<pos:position pos:line="37" pos:column="16"/></name><argument_list pos:line="37" pos:column="16">(<argument><expr><name pos:line="37" pos:column="17">FERROR<pos:position pos:line="37" pos:column="23"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="37" pos:column="24">"chunk[%d] of size %d at %d offset=%d\n"<pos:position pos:line="37" pos:column="64"/></literal></expr></argument>,
		<argument><expr><name pos:line="38" pos:column="17">i<pos:position pos:line="38" pos:column="18"/></name></expr></argument>,<argument><expr><name pos:line="38" pos:column="19">len<pos:position pos:line="38" pos:column="22"/></name></expr></argument>,<argument><expr><operator pos:line="38" pos:column="23">(<pos:position pos:line="38" pos:column="24"/></operator><name pos:line="38" pos:column="24">int<pos:position pos:line="38" pos:column="27"/></name><operator pos:line="38" pos:column="27">)<pos:position pos:line="38" pos:column="28"/></operator><name pos:line="38" pos:column="28">offset2<pos:position pos:line="38" pos:column="35"/></name></expr></argument>,<argument><expr><operator pos:line="38" pos:column="36">(<pos:position pos:line="38" pos:column="37"/></operator><name pos:line="38" pos:column="37">int<pos:position pos:line="38" pos:column="40"/></name><operator pos:line="38" pos:column="40">)<pos:position pos:line="38" pos:column="41"/></operator><name pos:line="38" pos:column="41">offset<pos:position pos:line="38" pos:column="47"/></name></expr></argument>)<pos:position pos:line="38" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="49"/></expr_stmt></block></then></if>

      <expr_stmt><expr><name pos:line="40" pos:column="7">map<pos:position pos:line="40" pos:column="10"/></name> <operator pos:line="40" pos:column="11">=<pos:position pos:line="40" pos:column="12"/></operator> <call><name pos:line="40" pos:column="13">map_ptr<pos:position pos:line="40" pos:column="20"/></name><argument_list pos:line="40" pos:column="20">(<argument><expr><name pos:line="40" pos:column="21">buf<pos:position pos:line="40" pos:column="24"/></name></expr></argument>,<argument><expr><name pos:line="40" pos:column="25">offset2<pos:position pos:line="40" pos:column="32"/></name></expr></argument>,<argument><expr><name pos:line="40" pos:column="33">len<pos:position pos:line="40" pos:column="36"/></name></expr></argument>)<pos:position pos:line="40" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="38"/></expr_stmt>

      <expr_stmt><expr><call><name pos:line="42" pos:column="7">see_token<pos:position pos:line="42" pos:column="16"/></name><argument_list pos:line="42" pos:column="16">(<argument><expr><name pos:line="42" pos:column="17">map<pos:position pos:line="42" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="22">len<pos:position pos:line="42" pos:column="25"/></name></expr></argument>)<pos:position pos:line="42" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="27"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="43" pos:column="7">sum_update<pos:position pos:line="43" pos:column="17"/></name><argument_list pos:line="43" pos:column="17">(<argument><expr><name pos:line="43" pos:column="18">map<pos:position pos:line="43" pos:column="21"/></name></expr></argument>,<argument><expr><name pos:line="43" pos:column="22">len<pos:position pos:line="43" pos:column="25"/></name></expr></argument>)<pos:position pos:line="43" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="27"/></expr_stmt>

      <if pos:line="45" pos:column="7">if <condition pos:line="45" pos:column="10">(<expr><name pos:line="45" pos:column="11">fd<pos:position pos:line="45" pos:column="13"/></name> <operator pos:line="45" pos:column="14">!=<pos:position pos:line="45" pos:column="16"/></operator> <operator pos:line="45" pos:column="17">-<pos:position pos:line="45" pos:column="18"/></operator><literal type="number" pos:line="45" pos:column="18">1<pos:position pos:line="45" pos:column="19"/></literal> <operator pos:line="45" pos:column="20">&amp;&amp;<pos:position pos:line="45" pos:column="30"/></operator> <call><name pos:line="45" pos:column="23">write_sparse<pos:position pos:line="45" pos:column="35"/></name><argument_list pos:line="45" pos:column="35">(<argument><expr><name pos:line="45" pos:column="36">fd<pos:position pos:line="45" pos:column="38"/></name></expr></argument>,<argument><expr><name pos:line="45" pos:column="39">map<pos:position pos:line="45" pos:column="42"/></name></expr></argument>,<argument><expr><name pos:line="45" pos:column="43">len<pos:position pos:line="45" pos:column="46"/></name></expr></argument>)<pos:position pos:line="45" pos:column="47"/></argument_list></call> <operator pos:line="45" pos:column="48">!=<pos:position pos:line="45" pos:column="50"/></operator> <name pos:line="45" pos:column="51">len<pos:position pos:line="45" pos:column="54"/></name></expr>)<pos:position pos:line="45" pos:column="55"/></condition><then pos:line="45" pos:column="55"> <block pos:line="45" pos:column="56">{
	<expr_stmt><expr><call><name pos:line="46" pos:column="9">fprintf<pos:position pos:line="46" pos:column="16"/></name><argument_list pos:line="46" pos:column="16">(<argument><expr><name pos:line="46" pos:column="17">FERROR<pos:position pos:line="46" pos:column="23"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="46" pos:column="24">"write failed on %s : %s\n"<pos:position pos:line="46" pos:column="51"/></literal></expr></argument>,<argument><expr><name pos:line="46" pos:column="52">fname<pos:position pos:line="46" pos:column="57"/></name></expr></argument>,<argument><expr><call><name pos:line="46" pos:column="58">strerror<pos:position pos:line="46" pos:column="66"/></name><argument_list pos:line="46" pos:column="66">(<argument><expr><name pos:line="46" pos:column="67">errno<pos:position pos:line="46" pos:column="72"/></name></expr></argument>)<pos:position pos:line="46" pos:column="73"/></argument_list></call></expr></argument>)<pos:position pos:line="46" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="75"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="47" pos:column="9">exit_cleanup<pos:position pos:line="47" pos:column="21"/></name><argument_list pos:line="47" pos:column="21">(<argument><expr><literal type="number" pos:line="47" pos:column="22">1<pos:position pos:line="47" pos:column="23"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="25"/></expr_stmt>
      }<pos:position pos:line="48" pos:column="8"/></block></then></if>
      <expr_stmt><expr><name pos:line="49" pos:column="7">offset<pos:position pos:line="49" pos:column="13"/></name> <operator pos:line="49" pos:column="14">+=<pos:position pos:line="49" pos:column="16"/></operator> <name pos:line="49" pos:column="17">len<pos:position pos:line="49" pos:column="20"/></name></expr>;<pos:position pos:line="49" pos:column="21"/></expr_stmt>
    }<pos:position pos:line="50" pos:column="6"/></block></else></if>
  }<pos:position pos:line="51" pos:column="4"/></block></for>

  <if pos:line="53" pos:column="3">if <condition pos:line="53" pos:column="6">(<expr><name pos:line="53" pos:column="7">fd<pos:position pos:line="53" pos:column="9"/></name> <operator pos:line="53" pos:column="10">!=<pos:position pos:line="53" pos:column="12"/></operator> <operator pos:line="53" pos:column="13">-<pos:position pos:line="53" pos:column="14"/></operator><literal type="number" pos:line="53" pos:column="14">1<pos:position pos:line="53" pos:column="15"/></literal> <operator pos:line="53" pos:column="16">&amp;&amp;<pos:position pos:line="53" pos:column="26"/></operator> <name pos:line="53" pos:column="19">offset<pos:position pos:line="53" pos:column="25"/></name> <operator pos:line="53" pos:column="26">&gt;<pos:position pos:line="53" pos:column="30"/></operator> <literal type="number" pos:line="53" pos:column="28">0<pos:position pos:line="53" pos:column="29"/></literal> <operator pos:line="53" pos:column="30">&amp;&amp;<pos:position pos:line="53" pos:column="40"/></operator> <call><name pos:line="53" pos:column="33">sparse_end<pos:position pos:line="53" pos:column="43"/></name><argument_list pos:line="53" pos:column="43">(<argument><expr><name pos:line="53" pos:column="44">fd<pos:position pos:line="53" pos:column="46"/></name></expr></argument>)<pos:position pos:line="53" pos:column="47"/></argument_list></call> <operator pos:line="53" pos:column="48">!=<pos:position pos:line="53" pos:column="50"/></operator> <literal type="number" pos:line="53" pos:column="51">0<pos:position pos:line="53" pos:column="52"/></literal></expr>)<pos:position pos:line="53" pos:column="53"/></condition><then pos:line="53" pos:column="53"> <block pos:line="53" pos:column="54">{
    <expr_stmt><expr><call><name pos:line="54" pos:column="5">fprintf<pos:position pos:line="54" pos:column="12"/></name><argument_list pos:line="54" pos:column="12">(<argument><expr><name pos:line="54" pos:column="13">FERROR<pos:position pos:line="54" pos:column="19"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="54" pos:column="20">"write failed on %s : %s\n"<pos:position pos:line="54" pos:column="47"/></literal></expr></argument>,<argument><expr><name pos:line="54" pos:column="48">fname<pos:position pos:line="54" pos:column="53"/></name></expr></argument>,<argument><expr><call><name pos:line="54" pos:column="54">strerror<pos:position pos:line="54" pos:column="62"/></name><argument_list pos:line="54" pos:column="62">(<argument><expr><name pos:line="54" pos:column="63">errno<pos:position pos:line="54" pos:column="68"/></name></expr></argument>)<pos:position pos:line="54" pos:column="69"/></argument_list></call></expr></argument>)<pos:position pos:line="54" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="71"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="55" pos:column="5">exit_cleanup<pos:position pos:line="55" pos:column="17"/></name><argument_list pos:line="55" pos:column="17">(<argument><expr><literal type="number" pos:line="55" pos:column="18">1<pos:position pos:line="55" pos:column="19"/></literal></expr></argument>)<pos:position pos:line="55" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="21"/></expr_stmt>
  }<pos:position pos:line="56" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="58" pos:column="3">sum_end<pos:position pos:line="58" pos:column="10"/></name><argument_list pos:line="58" pos:column="10">(<argument><expr><name pos:line="58" pos:column="11">file_sum1<pos:position pos:line="58" pos:column="20"/></name></expr></argument>)<pos:position pos:line="58" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="22"/></expr_stmt>

  <if pos:line="60" pos:column="3">if <condition pos:line="60" pos:column="6">(<expr><name pos:line="60" pos:column="7">remote_version<pos:position pos:line="60" pos:column="21"/></name> <operator pos:line="60" pos:column="22">&gt;=<pos:position pos:line="60" pos:column="27"/></operator> <literal type="number" pos:line="60" pos:column="25">14<pos:position pos:line="60" pos:column="27"/></literal></expr>)<pos:position pos:line="60" pos:column="28"/></condition><then pos:line="60" pos:column="28"> <block pos:line="60" pos:column="29">{
    <expr_stmt><expr><call><name pos:line="61" pos:column="5">read_buf<pos:position pos:line="61" pos:column="13"/></name><argument_list pos:line="61" pos:column="13">(<argument><expr><name pos:line="61" pos:column="14">f_in<pos:position pos:line="61" pos:column="18"/></name></expr></argument>,<argument><expr><name pos:line="61" pos:column="19">file_sum2<pos:position pos:line="61" pos:column="28"/></name></expr></argument>,<argument><expr><name pos:line="61" pos:column="29">MD4_SUM_LENGTH<pos:position pos:line="61" pos:column="43"/></name></expr></argument>)<pos:position pos:line="61" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="45"/></expr_stmt>
    <if pos:line="62" pos:column="5">if <condition pos:line="62" pos:column="8">(<expr><name pos:line="62" pos:column="9">verbose<pos:position pos:line="62" pos:column="16"/></name> <operator pos:line="62" pos:column="17">&gt;<pos:position pos:line="62" pos:column="21"/></operator> <literal type="number" pos:line="62" pos:column="19">2<pos:position pos:line="62" pos:column="20"/></literal></expr>)<pos:position pos:line="62" pos:column="21"/></condition><then pos:line="62" pos:column="21">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="63" pos:column="7">fprintf<pos:position pos:line="63" pos:column="14"/></name><argument_list pos:line="63" pos:column="14">(<argument><expr><name pos:line="63" pos:column="15">FERROR<pos:position pos:line="63" pos:column="21"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="63" pos:column="22">"got file_sum\n"<pos:position pos:line="63" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="63" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="40"/></expr_stmt></block></then></if>
    <if pos:line="64" pos:column="5">if <condition pos:line="64" pos:column="8">(<expr><name pos:line="64" pos:column="9">fd<pos:position pos:line="64" pos:column="11"/></name> <operator pos:line="64" pos:column="12">!=<pos:position pos:line="64" pos:column="14"/></operator> <operator pos:line="64" pos:column="15">-<pos:position pos:line="64" pos:column="16"/></operator><literal type="number" pos:line="64" pos:column="16">1<pos:position pos:line="64" pos:column="17"/></literal> <operator pos:line="64" pos:column="18">&amp;&amp;<pos:position pos:line="64" pos:column="28"/></operator> <call><name pos:line="64" pos:column="21">memcmp<pos:position pos:line="64" pos:column="27"/></name><argument_list pos:line="64" pos:column="27">(<argument><expr><name pos:line="64" pos:column="28">file_sum1<pos:position pos:line="64" pos:column="37"/></name></expr></argument>,<argument><expr><name pos:line="64" pos:column="38">file_sum2<pos:position pos:line="64" pos:column="47"/></name></expr></argument>,<argument><expr><name pos:line="64" pos:column="48">MD4_SUM_LENGTH<pos:position pos:line="64" pos:column="62"/></name></expr></argument>)<pos:position pos:line="64" pos:column="63"/></argument_list></call> <operator pos:line="64" pos:column="64">!=<pos:position pos:line="64" pos:column="66"/></operator> <literal type="number" pos:line="64" pos:column="67">0<pos:position pos:line="64" pos:column="68"/></literal></expr>)<pos:position pos:line="64" pos:column="69"/></condition><then pos:line="64" pos:column="69">
      <block type="pseudo"><return pos:line="65" pos:column="7">return <expr><literal type="number" pos:line="65" pos:column="14">0<pos:position pos:line="65" pos:column="15"/></literal></expr>;<pos:position pos:line="65" pos:column="16"/></return></block></then></if>
  }<pos:position pos:line="66" pos:column="4"/></block></then></if>
  <return pos:line="67" pos:column="3">return <expr><literal type="number" pos:line="67" pos:column="10">1<pos:position pos:line="67" pos:column="11"/></literal></expr>;<pos:position pos:line="67" pos:column="12"/></return>
}<pos:position pos:line="68" pos:column="2"/></block></function></unit>
