<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_217_rsync-1.7.4.cpp" pos:tabs="8"><decl_stmt><decl><type><name pos:line="1" pos:column="1">local<pos:position pos:line="1" pos:column="6"/></name> <name pos:line="1" pos:column="7">int<pos:position pos:line="1" pos:column="10"/></name></type> <name pos:line="1" pos:column="11">huft_build<pos:position pos:line="1" pos:column="21"/></name><argument_list pos:line="1" pos:column="21">(<argument><expr><name pos:line="1" pos:column="22">b<pos:position pos:line="1" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="1" pos:column="25">n<pos:position pos:line="1" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="1" pos:column="28">s<pos:position pos:line="1" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="1" pos:column="31">d<pos:position pos:line="1" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="1" pos:column="34">e<pos:position pos:line="1" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="1" pos:column="37">t<pos:position pos:line="1" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="1" pos:column="40">m<pos:position pos:line="1" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="1" pos:column="43">zs<pos:position pos:line="1" pos:column="45"/></name></expr></argument>)<pos:position pos:line="1" pos:column="46"/></argument_list>
<name pos:line="2" pos:column="1">uIntf<pos:position pos:line="2" pos:column="6"/></name> <modifier pos:line="2" pos:column="7">*<pos:position pos:line="2" pos:column="8"/></modifier><name pos:line="2" pos:column="8">b<pos:position pos:line="2" pos:column="9"/></name></decl>;<pos:position pos:line="2" pos:column="10"/></decl_stmt>               <comment type="block" pos:line="2" pos:column="25">/* code lengths in bits (all assumed &lt;= BMAX) */</comment>
<decl_stmt><decl><type><name pos:line="3" pos:column="1">uInt<pos:position pos:line="3" pos:column="5"/></name></type> <name pos:line="3" pos:column="6">n<pos:position pos:line="3" pos:column="7"/></name></decl>;<pos:position pos:line="3" pos:column="8"/></decl_stmt>                 <comment type="block" pos:line="3" pos:column="25">/* number of codes (assumed &lt;= N_MAX) */</comment>
<decl_stmt><decl><type><name pos:line="4" pos:column="1">uInt<pos:position pos:line="4" pos:column="5"/></name></type> <name pos:line="4" pos:column="6">s<pos:position pos:line="4" pos:column="7"/></name></decl>;<pos:position pos:line="4" pos:column="8"/></decl_stmt>                 <comment type="block" pos:line="4" pos:column="25">/* number of simple-valued codes (0..s-1) */</comment>
<decl_stmt><decl><type><name pos:line="5" pos:column="1">uIntf<pos:position pos:line="5" pos:column="6"/></name> <modifier pos:line="5" pos:column="7">*<pos:position pos:line="5" pos:column="8"/></modifier></type><name pos:line="5" pos:column="8">d<pos:position pos:line="5" pos:column="9"/></name></decl>;<pos:position pos:line="5" pos:column="10"/></decl_stmt>               <comment type="block" pos:line="5" pos:column="25">/* list of base values for non-simple codes */</comment>
<decl_stmt><decl><type><name pos:line="6" pos:column="1">uIntf<pos:position pos:line="6" pos:column="6"/></name> <modifier pos:line="6" pos:column="7">*<pos:position pos:line="6" pos:column="8"/></modifier></type><name pos:line="6" pos:column="8">e<pos:position pos:line="6" pos:column="9"/></name></decl>;<pos:position pos:line="6" pos:column="10"/></decl_stmt>               <comment type="block" pos:line="6" pos:column="25">/* list of extra bits for non-simple codes */</comment>  
<decl_stmt><decl><type><name pos:line="7" pos:column="1">inflate_huft<pos:position pos:line="7" pos:column="13"/></name> <modifier pos:line="7" pos:column="14">*<pos:position pos:line="7" pos:column="15"/></modifier> <name pos:line="7" pos:column="16">FAR<pos:position pos:line="7" pos:column="19"/></name> <modifier pos:line="7" pos:column="20">*<pos:position pos:line="7" pos:column="21"/></modifier></type><name pos:line="7" pos:column="21">t<pos:position pos:line="7" pos:column="22"/></name></decl>;<pos:position pos:line="7" pos:column="23"/></decl_stmt>  <comment type="block" pos:line="7" pos:column="25">/* result: starting table */</comment>
<decl_stmt><decl><type><name pos:line="8" pos:column="1">uIntf<pos:position pos:line="8" pos:column="6"/></name> <modifier pos:line="8" pos:column="7">*<pos:position pos:line="8" pos:column="8"/></modifier></type><name pos:line="8" pos:column="8">m<pos:position pos:line="8" pos:column="9"/></name></decl>;<pos:position pos:line="8" pos:column="10"/></decl_stmt>               <comment type="block" pos:line="8" pos:column="25">/* maximum lookup bits, returns actual */</comment>
<decl_stmt><decl><type><name pos:line="9" pos:column="1">z_stream<pos:position pos:line="9" pos:column="9"/></name> <modifier pos:line="9" pos:column="10">*<pos:position pos:line="9" pos:column="11"/></modifier></type><name pos:line="9" pos:column="11">zs<pos:position pos:line="9" pos:column="13"/></name></decl>;<pos:position pos:line="9" pos:column="14"/></decl_stmt>           <comment type="block" pos:line="9" pos:column="25">/* for zalloc function */</comment>
<comment type="block" pos:line="10" pos:column="1">/* Given a list of code lengths and a maximum table size, make a set of
   tables to decode that set of codes.  Return Z_OK on success, Z_BUF_ERROR
   if the given code set is incomplete (the tables are still built in this
   case), Z_DATA_ERROR if the input is invalid (all zero length codes or an
   over-subscribed set of lengths), or Z_MEM_ERROR if not enough memory. */</comment>
<block pos:line="15" pos:column="1">{

  <decl_stmt><decl><type><name pos:line="17" pos:column="3">uInt<pos:position pos:line="17" pos:column="7"/></name></type> <name pos:line="17" pos:column="8">a<pos:position pos:line="17" pos:column="9"/></name></decl>;<pos:position pos:line="17" pos:column="10"/></decl_stmt>                       <comment type="block" pos:line="17" pos:column="33">/* counter for codes of length k */</comment>
  <decl_stmt><decl><type><name pos:line="18" pos:column="3">uInt<pos:position pos:line="18" pos:column="7"/></name></type> <name><name pos:line="18" pos:column="8">c<pos:position pos:line="18" pos:column="9"/></name><index pos:line="18" pos:column="9">[<expr><name pos:line="18" pos:column="10">BMAX<pos:position pos:line="18" pos:column="14"/></name><operator pos:line="18" pos:column="14">+<pos:position pos:line="18" pos:column="15"/></operator><literal type="number" pos:line="18" pos:column="15">1<pos:position pos:line="18" pos:column="16"/></literal></expr>]<pos:position pos:line="18" pos:column="17"/></index></name></decl>;<pos:position pos:line="18" pos:column="18"/></decl_stmt>               <comment type="block" pos:line="18" pos:column="33">/* bit length count table */</comment>
  <decl_stmt><decl><type><name pos:line="19" pos:column="3">uInt<pos:position pos:line="19" pos:column="7"/></name></type> <name pos:line="19" pos:column="8">f<pos:position pos:line="19" pos:column="9"/></name></decl>;<pos:position pos:line="19" pos:column="10"/></decl_stmt>                       <comment type="block" pos:line="19" pos:column="33">/* i repeats in table every f entries */</comment>
  <decl_stmt><decl><type><name pos:line="20" pos:column="3">int<pos:position pos:line="20" pos:column="6"/></name></type> <name pos:line="20" pos:column="7">g<pos:position pos:line="20" pos:column="8"/></name></decl>;<pos:position pos:line="20" pos:column="9"/></decl_stmt>                        <comment type="block" pos:line="20" pos:column="33">/* maximum code length */</comment>
  <decl_stmt><decl><type><name pos:line="21" pos:column="3">int<pos:position pos:line="21" pos:column="6"/></name></type> <name pos:line="21" pos:column="7">h<pos:position pos:line="21" pos:column="8"/></name></decl>;<pos:position pos:line="21" pos:column="9"/></decl_stmt>                        <comment type="block" pos:line="21" pos:column="33">/* table level */</comment>
  <decl_stmt><decl><type><specifier pos:line="22" pos:column="3">register<pos:position pos:line="22" pos:column="11"/></specifier> <name pos:line="22" pos:column="12">uInt<pos:position pos:line="22" pos:column="16"/></name></type> <name pos:line="22" pos:column="17">i<pos:position pos:line="22" pos:column="18"/></name></decl>;<pos:position pos:line="22" pos:column="19"/></decl_stmt>              <comment type="block" pos:line="22" pos:column="33">/* counter, current code */</comment>
  <decl_stmt><decl><type><specifier pos:line="23" pos:column="3">register<pos:position pos:line="23" pos:column="11"/></specifier> <name pos:line="23" pos:column="12">uInt<pos:position pos:line="23" pos:column="16"/></name></type> <name pos:line="23" pos:column="17">j<pos:position pos:line="23" pos:column="18"/></name></decl>;<pos:position pos:line="23" pos:column="19"/></decl_stmt>              <comment type="block" pos:line="23" pos:column="33">/* counter */</comment>
  <decl_stmt><decl><type><specifier pos:line="24" pos:column="3">register<pos:position pos:line="24" pos:column="11"/></specifier> <name pos:line="24" pos:column="12">int<pos:position pos:line="24" pos:column="15"/></name></type> <name pos:line="24" pos:column="16">k<pos:position pos:line="24" pos:column="17"/></name></decl>;<pos:position pos:line="24" pos:column="18"/></decl_stmt>               <comment type="block" pos:line="24" pos:column="33">/* number of bits in current code */</comment>
  <decl_stmt><decl><type><name pos:line="25" pos:column="3">int<pos:position pos:line="25" pos:column="6"/></name></type> <name pos:line="25" pos:column="7">l<pos:position pos:line="25" pos:column="8"/></name></decl>;<pos:position pos:line="25" pos:column="9"/></decl_stmt>                        <comment type="block" pos:line="25" pos:column="33">/* bits per table (returned in m) */</comment>
  <decl_stmt><decl><type><specifier pos:line="26" pos:column="3">register<pos:position pos:line="26" pos:column="11"/></specifier> <name pos:line="26" pos:column="12">uIntf<pos:position pos:line="26" pos:column="17"/></name> <modifier pos:line="26" pos:column="18">*<pos:position pos:line="26" pos:column="19"/></modifier></type><name pos:line="26" pos:column="19">p<pos:position pos:line="26" pos:column="20"/></name></decl>;<pos:position pos:line="26" pos:column="21"/></decl_stmt>            <comment type="block" pos:line="26" pos:column="33">/* pointer into c[], b[], or v[] */</comment>
  <decl_stmt><decl><type><name pos:line="27" pos:column="3">inflate_huft<pos:position pos:line="27" pos:column="15"/></name> <modifier pos:line="27" pos:column="16">*<pos:position pos:line="27" pos:column="17"/></modifier></type><name pos:line="27" pos:column="17">q<pos:position pos:line="27" pos:column="18"/></name></decl>;<pos:position pos:line="27" pos:column="19"/></decl_stmt>              <comment type="block" pos:line="27" pos:column="33">/* points to current table */</comment>
  <decl_stmt><decl><type><name><name pos:line="28" pos:column="3">struct<pos:position pos:line="28" pos:column="9"/></name> <name pos:line="28" pos:column="10">inflate_huft_s<pos:position pos:line="28" pos:column="24"/></name></name></type> <name pos:line="28" pos:column="25">r<pos:position pos:line="28" pos:column="26"/></name></decl>;<pos:position pos:line="28" pos:column="27"/></decl_stmt>      <comment type="block" pos:line="28" pos:column="33">/* table entry for structure assignment */</comment>
  <decl_stmt><decl><type><name pos:line="29" pos:column="3">inflate_huft<pos:position pos:line="29" pos:column="15"/></name> <modifier pos:line="29" pos:column="16">*<pos:position pos:line="29" pos:column="17"/></modifier></type><name><name pos:line="29" pos:column="17">u<pos:position pos:line="29" pos:column="18"/></name><index pos:line="29" pos:column="18">[<expr><name pos:line="29" pos:column="19">BMAX<pos:position pos:line="29" pos:column="23"/></name></expr>]<pos:position pos:line="29" pos:column="24"/></index></name></decl>;<pos:position pos:line="29" pos:column="25"/></decl_stmt>        <comment type="block" pos:line="29" pos:column="33">/* table stack */</comment>
  <decl_stmt><decl><type><name pos:line="30" pos:column="3">uInt<pos:position pos:line="30" pos:column="7"/></name></type> <name><name pos:line="30" pos:column="8">v<pos:position pos:line="30" pos:column="9"/></name><index pos:line="30" pos:column="9">[<expr><name pos:line="30" pos:column="10">N_MAX<pos:position pos:line="30" pos:column="15"/></name></expr>]<pos:position pos:line="30" pos:column="16"/></index></name></decl>;<pos:position pos:line="30" pos:column="17"/></decl_stmt>                <comment type="block" pos:line="30" pos:column="33">/* values in order of bit length */</comment>
  <decl_stmt><decl><type><specifier pos:line="31" pos:column="3">register<pos:position pos:line="31" pos:column="11"/></specifier> <name pos:line="31" pos:column="12">int<pos:position pos:line="31" pos:column="15"/></name></type> <name pos:line="31" pos:column="16">w<pos:position pos:line="31" pos:column="17"/></name></decl>;<pos:position pos:line="31" pos:column="18"/></decl_stmt>               <comment type="block" pos:line="31" pos:column="33">/* bits before this table == (l * h) */</comment>
  <decl_stmt><decl><type><name pos:line="32" pos:column="3">uInt<pos:position pos:line="32" pos:column="7"/></name></type> <name><name pos:line="32" pos:column="8">x<pos:position pos:line="32" pos:column="9"/></name><index pos:line="32" pos:column="9">[<expr><name pos:line="32" pos:column="10">BMAX<pos:position pos:line="32" pos:column="14"/></name><operator pos:line="32" pos:column="14">+<pos:position pos:line="32" pos:column="15"/></operator><literal type="number" pos:line="32" pos:column="15">1<pos:position pos:line="32" pos:column="16"/></literal></expr>]<pos:position pos:line="32" pos:column="17"/></index></name></decl>;<pos:position pos:line="32" pos:column="18"/></decl_stmt>               <comment type="block" pos:line="32" pos:column="33">/* bit offsets, then code stack */</comment>
  <decl_stmt><decl><type><name pos:line="33" pos:column="3">uIntf<pos:position pos:line="33" pos:column="8"/></name> <modifier pos:line="33" pos:column="9">*<pos:position pos:line="33" pos:column="10"/></modifier></type><name pos:line="33" pos:column="10">xp<pos:position pos:line="33" pos:column="12"/></name></decl>;<pos:position pos:line="33" pos:column="13"/></decl_stmt>                    <comment type="block" pos:line="33" pos:column="33">/* pointer into x */</comment>
  <decl_stmt><decl><type><name pos:line="34" pos:column="3">int<pos:position pos:line="34" pos:column="6"/></name></type> <name pos:line="34" pos:column="7">y<pos:position pos:line="34" pos:column="8"/></name></decl>;<pos:position pos:line="34" pos:column="9"/></decl_stmt>                        <comment type="block" pos:line="34" pos:column="33">/* number of dummy codes added */</comment>
  <decl_stmt><decl><type><name pos:line="35" pos:column="3">uInt<pos:position pos:line="35" pos:column="7"/></name></type> <name pos:line="35" pos:column="8">z<pos:position pos:line="35" pos:column="9"/></name></decl>;<pos:position pos:line="35" pos:column="10"/></decl_stmt>                       <comment type="block" pos:line="35" pos:column="33">/* number of entries in current table */</comment>


  <comment type="block" pos:line="38" pos:column="3">/* Generate counts for each bit length */</comment>
  <expr_stmt><expr><name pos:line="39" pos:column="3">p<pos:position pos:line="39" pos:column="4"/></name> <operator pos:line="39" pos:column="5">=<pos:position pos:line="39" pos:column="6"/></operator> <name pos:line="39" pos:column="7">c<pos:position pos:line="39" pos:column="8"/></name></expr>;<pos:position pos:line="39" pos:column="9"/></expr_stmt>
<cpp:define pos:line="40" pos:column="1">#<cpp:directive pos:line="40" pos:column="2">define<pos:position pos:line="40" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="40" pos:column="9">C0<pos:position pos:line="40" pos:column="11"/></name></cpp:macro> <cpp:value pos:line="40" pos:column="12">*p++ = 0;<pos:position pos:line="40" pos:column="21"/></cpp:value></cpp:define>
<cpp:define pos:line="41" pos:column="1">#<cpp:directive pos:line="41" pos:column="2">define<pos:position pos:line="41" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="41" pos:column="9">C2<pos:position pos:line="41" pos:column="11"/></name></cpp:macro> <cpp:value pos:line="41" pos:column="12">C0 C0 C0 C0<pos:position pos:line="41" pos:column="23"/></cpp:value></cpp:define>
<cpp:define pos:line="42" pos:column="1">#<cpp:directive pos:line="42" pos:column="2">define<pos:position pos:line="42" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="42" pos:column="9">C4<pos:position pos:line="42" pos:column="11"/></name></cpp:macro> <cpp:value pos:line="42" pos:column="12">C2 C2 C2 C2<pos:position pos:line="42" pos:column="23"/></cpp:value></cpp:define>
  <decl_stmt><decl><type><name pos:line="43" pos:column="3">C4<pos:position pos:line="43" pos:column="5"/></name></type>                            <comment type="block" pos:line="43" pos:column="33">/* clear c[]--assume BMAX+1 is 16 */</comment>
  <name pos:line="44" pos:column="3">p<pos:position pos:line="44" pos:column="4"/></name> <init pos:line="44" pos:column="5">= <expr><name pos:line="44" pos:column="7">b<pos:position pos:line="44" pos:column="8"/></name></expr></init></decl>;<pos:position pos:line="44" pos:column="9"/></decl_stmt>  <expr_stmt><expr><name pos:line="44" pos:column="11">i<pos:position pos:line="44" pos:column="12"/></name> <operator pos:line="44" pos:column="13">=<pos:position pos:line="44" pos:column="14"/></operator> <name pos:line="44" pos:column="15">n<pos:position pos:line="44" pos:column="16"/></name></expr>;<pos:position pos:line="44" pos:column="17"/></expr_stmt>
  <do pos:line="45" pos:column="3">do <block pos:line="45" pos:column="6">{
    <expr_stmt><expr><name><name pos:line="46" pos:column="5">c<pos:position pos:line="46" pos:column="6"/></name><index pos:line="46" pos:column="6">[<expr><operator pos:line="46" pos:column="7">*<pos:position pos:line="46" pos:column="8"/></operator><name pos:line="46" pos:column="8">p<pos:position pos:line="46" pos:column="9"/></name><operator pos:line="46" pos:column="9">++<pos:position pos:line="46" pos:column="11"/></operator></expr>]<pos:position pos:line="46" pos:column="12"/></index></name><operator pos:line="46" pos:column="12">++<pos:position pos:line="46" pos:column="14"/></operator></expr>;<pos:position pos:line="46" pos:column="15"/></expr_stmt>                  <comment type="block" pos:line="46" pos:column="33">/* assume all entries &lt;= BMAX */</comment>
  }<pos:position pos:line="47" pos:column="4"/></block> while <condition pos:line="47" pos:column="11">(<expr><operator pos:line="47" pos:column="12">--<pos:position pos:line="47" pos:column="14"/></operator><name pos:line="47" pos:column="14">i<pos:position pos:line="47" pos:column="15"/></name></expr>)<pos:position pos:line="47" pos:column="16"/></condition>;<pos:position pos:line="47" pos:column="17"/></do>
  <if pos:line="48" pos:column="3">if <condition pos:line="48" pos:column="6">(<expr><name><name pos:line="48" pos:column="7">c<pos:position pos:line="48" pos:column="8"/></name><index pos:line="48" pos:column="8">[<expr><literal type="number" pos:line="48" pos:column="9">0<pos:position pos:line="48" pos:column="10"/></literal></expr>]<pos:position pos:line="48" pos:column="11"/></index></name> <operator pos:line="48" pos:column="12">==<pos:position pos:line="48" pos:column="14"/></operator> <name pos:line="48" pos:column="15">n<pos:position pos:line="48" pos:column="16"/></name></expr>)<pos:position pos:line="48" pos:column="17"/></condition><then pos:line="48" pos:column="17">                <comment type="block" pos:line="48" pos:column="33">/* null input--all zero length codes */</comment>
  <block pos:line="49" pos:column="3">{
    <expr_stmt><expr><operator pos:line="50" pos:column="5">*<pos:position pos:line="50" pos:column="6"/></operator><name pos:line="50" pos:column="6">t<pos:position pos:line="50" pos:column="7"/></name> <operator pos:line="50" pos:column="8">=<pos:position pos:line="50" pos:column="9"/></operator> <operator pos:line="50" pos:column="10">(<pos:position pos:line="50" pos:column="11"/></operator><name pos:line="50" pos:column="11">inflate_huft<pos:position pos:line="50" pos:column="23"/></name> <operator pos:line="50" pos:column="24">*<pos:position pos:line="50" pos:column="25"/></operator><operator pos:line="50" pos:column="25">)<pos:position pos:line="50" pos:column="26"/></operator><name pos:line="50" pos:column="26">Z_NULL<pos:position pos:line="50" pos:column="32"/></name></expr>;<pos:position pos:line="50" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="51" pos:column="5">*<pos:position pos:line="51" pos:column="6"/></operator><name pos:line="51" pos:column="6">m<pos:position pos:line="51" pos:column="7"/></name> <operator pos:line="51" pos:column="8">=<pos:position pos:line="51" pos:column="9"/></operator> <literal type="number" pos:line="51" pos:column="10">0<pos:position pos:line="51" pos:column="11"/></literal></expr>;<pos:position pos:line="51" pos:column="12"/></expr_stmt>
    <return pos:line="52" pos:column="5">return <expr><name pos:line="52" pos:column="12">Z_OK<pos:position pos:line="52" pos:column="16"/></name></expr>;<pos:position pos:line="52" pos:column="17"/></return>
  }<pos:position pos:line="53" pos:column="4"/></block></then></if>


  <comment type="block" pos:line="56" pos:column="3">/* Find minimum and maximum length, bound *m by those */</comment>
  <expr_stmt><expr><name pos:line="57" pos:column="3">l<pos:position pos:line="57" pos:column="4"/></name> <operator pos:line="57" pos:column="5">=<pos:position pos:line="57" pos:column="6"/></operator> <operator pos:line="57" pos:column="7">*<pos:position pos:line="57" pos:column="8"/></operator><name pos:line="57" pos:column="8">m<pos:position pos:line="57" pos:column="9"/></name></expr>;<pos:position pos:line="57" pos:column="10"/></expr_stmt>
  <for pos:line="58" pos:column="3">for <control pos:line="58" pos:column="7">(<init><expr><name pos:line="58" pos:column="8">j<pos:position pos:line="58" pos:column="9"/></name> <operator pos:line="58" pos:column="10">=<pos:position pos:line="58" pos:column="11"/></operator> <literal type="number" pos:line="58" pos:column="12">1<pos:position pos:line="58" pos:column="13"/></literal></expr>;<pos:position pos:line="58" pos:column="14"/></init> <condition><expr><name pos:line="58" pos:column="15">j<pos:position pos:line="58" pos:column="16"/></name> <operator pos:line="58" pos:column="17">&lt;=<pos:position pos:line="58" pos:column="22"/></operator> <name pos:line="58" pos:column="20">BMAX<pos:position pos:line="58" pos:column="24"/></name></expr>;<pos:position pos:line="58" pos:column="25"/></condition> <incr><expr><name pos:line="58" pos:column="26">j<pos:position pos:line="58" pos:column="27"/></name><operator pos:line="58" pos:column="27">++<pos:position pos:line="58" pos:column="29"/></operator></expr></incr>)<pos:position pos:line="58" pos:column="30"/></control>
    <block type="pseudo"><if pos:line="59" pos:column="5">if <condition pos:line="59" pos:column="8">(<expr><name><name pos:line="59" pos:column="9">c<pos:position pos:line="59" pos:column="10"/></name><index pos:line="59" pos:column="10">[<expr><name pos:line="59" pos:column="11">j<pos:position pos:line="59" pos:column="12"/></name></expr>]<pos:position pos:line="59" pos:column="13"/></index></name></expr>)<pos:position pos:line="59" pos:column="14"/></condition><then pos:line="59" pos:column="14">
      <block type="pseudo"><break pos:line="60" pos:column="7">break;<pos:position pos:line="60" pos:column="13"/></break></block></then></if></block></for>
  <expr_stmt><expr><name pos:line="61" pos:column="3">k<pos:position pos:line="61" pos:column="4"/></name> <operator pos:line="61" pos:column="5">=<pos:position pos:line="61" pos:column="6"/></operator> <name pos:line="61" pos:column="7">j<pos:position pos:line="61" pos:column="8"/></name></expr>;<pos:position pos:line="61" pos:column="9"/></expr_stmt>                        <comment type="block" pos:line="61" pos:column="33">/* minimum code length */</comment>
  <if pos:line="62" pos:column="3">if <condition pos:line="62" pos:column="6">(<expr><operator pos:line="62" pos:column="7">(<pos:position pos:line="62" pos:column="8"/></operator><name pos:line="62" pos:column="8">uInt<pos:position pos:line="62" pos:column="12"/></name><operator pos:line="62" pos:column="12">)<pos:position pos:line="62" pos:column="13"/></operator><name pos:line="62" pos:column="13">l<pos:position pos:line="62" pos:column="14"/></name> <operator pos:line="62" pos:column="15">&lt;<pos:position pos:line="62" pos:column="19"/></operator> <name pos:line="62" pos:column="17">j<pos:position pos:line="62" pos:column="18"/></name></expr>)<pos:position pos:line="62" pos:column="19"/></condition><then pos:line="62" pos:column="19">
    <block type="pseudo"><expr_stmt><expr><name pos:line="63" pos:column="5">l<pos:position pos:line="63" pos:column="6"/></name> <operator pos:line="63" pos:column="7">=<pos:position pos:line="63" pos:column="8"/></operator> <name pos:line="63" pos:column="9">j<pos:position pos:line="63" pos:column="10"/></name></expr>;<pos:position pos:line="63" pos:column="11"/></expr_stmt></block></then></if>
  <for pos:line="64" pos:column="3">for <control pos:line="64" pos:column="7">(<init><expr><name pos:line="64" pos:column="8">i<pos:position pos:line="64" pos:column="9"/></name> <operator pos:line="64" pos:column="10">=<pos:position pos:line="64" pos:column="11"/></operator> <name pos:line="64" pos:column="12">BMAX<pos:position pos:line="64" pos:column="16"/></name></expr>;<pos:position pos:line="64" pos:column="17"/></init> <condition><expr><name pos:line="64" pos:column="18">i<pos:position pos:line="64" pos:column="19"/></name></expr>;<pos:position pos:line="64" pos:column="20"/></condition> <incr><expr><name pos:line="64" pos:column="21">i<pos:position pos:line="64" pos:column="22"/></name><operator pos:line="64" pos:column="22">--<pos:position pos:line="64" pos:column="24"/></operator></expr></incr>)<pos:position pos:line="64" pos:column="25"/></control>
    <block type="pseudo"><if pos:line="65" pos:column="5">if <condition pos:line="65" pos:column="8">(<expr><name><name pos:line="65" pos:column="9">c<pos:position pos:line="65" pos:column="10"/></name><index pos:line="65" pos:column="10">[<expr><name pos:line="65" pos:column="11">i<pos:position pos:line="65" pos:column="12"/></name></expr>]<pos:position pos:line="65" pos:column="13"/></index></name></expr>)<pos:position pos:line="65" pos:column="14"/></condition><then pos:line="65" pos:column="14">
      <block type="pseudo"><break pos:line="66" pos:column="7">break;<pos:position pos:line="66" pos:column="13"/></break></block></then></if></block></for>
  <expr_stmt><expr><name pos:line="67" pos:column="3">g<pos:position pos:line="67" pos:column="4"/></name> <operator pos:line="67" pos:column="5">=<pos:position pos:line="67" pos:column="6"/></operator> <name pos:line="67" pos:column="7">i<pos:position pos:line="67" pos:column="8"/></name></expr>;<pos:position pos:line="67" pos:column="9"/></expr_stmt>                        <comment type="block" pos:line="67" pos:column="33">/* maximum code length */</comment>
  <if pos:line="68" pos:column="3">if <condition pos:line="68" pos:column="6">(<expr><operator pos:line="68" pos:column="7">(<pos:position pos:line="68" pos:column="8"/></operator><name pos:line="68" pos:column="8">uInt<pos:position pos:line="68" pos:column="12"/></name><operator pos:line="68" pos:column="12">)<pos:position pos:line="68" pos:column="13"/></operator><name pos:line="68" pos:column="13">l<pos:position pos:line="68" pos:column="14"/></name> <operator pos:line="68" pos:column="15">&gt;<pos:position pos:line="68" pos:column="19"/></operator> <name pos:line="68" pos:column="17">i<pos:position pos:line="68" pos:column="18"/></name></expr>)<pos:position pos:line="68" pos:column="19"/></condition><then pos:line="68" pos:column="19">
    <block type="pseudo"><expr_stmt><expr><name pos:line="69" pos:column="5">l<pos:position pos:line="69" pos:column="6"/></name> <operator pos:line="69" pos:column="7">=<pos:position pos:line="69" pos:column="8"/></operator> <name pos:line="69" pos:column="9">i<pos:position pos:line="69" pos:column="10"/></name></expr>;<pos:position pos:line="69" pos:column="11"/></expr_stmt></block></then></if>
  <expr_stmt><expr><operator pos:line="70" pos:column="3">*<pos:position pos:line="70" pos:column="4"/></operator><name pos:line="70" pos:column="4">m<pos:position pos:line="70" pos:column="5"/></name> <operator pos:line="70" pos:column="6">=<pos:position pos:line="70" pos:column="7"/></operator> <name pos:line="70" pos:column="8">l<pos:position pos:line="70" pos:column="9"/></name></expr>;<pos:position pos:line="70" pos:column="10"/></expr_stmt>


  <comment type="block" pos:line="73" pos:column="3">/* Adjust last length count to fill out codes, if needed */</comment>
  <for pos:line="74" pos:column="3">for <control pos:line="74" pos:column="7">(<init><expr><name pos:line="74" pos:column="8">y<pos:position pos:line="74" pos:column="9"/></name> <operator pos:line="74" pos:column="10">=<pos:position pos:line="74" pos:column="11"/></operator> <literal type="number" pos:line="74" pos:column="12">1<pos:position pos:line="74" pos:column="13"/></literal> <operator pos:line="74" pos:column="14">&lt;&lt;<pos:position pos:line="74" pos:column="22"/></operator> <name pos:line="74" pos:column="17">j<pos:position pos:line="74" pos:column="18"/></name></expr>;<pos:position pos:line="74" pos:column="19"/></init> <condition><expr><name pos:line="74" pos:column="20">j<pos:position pos:line="74" pos:column="21"/></name> <operator pos:line="74" pos:column="22">&lt;<pos:position pos:line="74" pos:column="26"/></operator> <name pos:line="74" pos:column="24">i<pos:position pos:line="74" pos:column="25"/></name></expr>;<pos:position pos:line="74" pos:column="26"/></condition> <incr><expr><name pos:line="74" pos:column="27">j<pos:position pos:line="74" pos:column="28"/></name><operator pos:line="74" pos:column="28">++<pos:position pos:line="74" pos:column="30"/></operator></expr><operator pos:line="74" pos:column="30">,<pos:position pos:line="74" pos:column="31"/></operator> <expr><name pos:line="74" pos:column="32">y<pos:position pos:line="74" pos:column="33"/></name> <operator pos:line="74" pos:column="34">&lt;&lt;=<pos:position pos:line="74" pos:column="43"/></operator> <literal type="number" pos:line="74" pos:column="38">1<pos:position pos:line="74" pos:column="39"/></literal></expr></incr>)<pos:position pos:line="74" pos:column="40"/></control>
    <block type="pseudo"><if pos:line="75" pos:column="5">if <condition pos:line="75" pos:column="8">(<expr><operator pos:line="75" pos:column="9">(<pos:position pos:line="75" pos:column="10"/></operator><name pos:line="75" pos:column="10">y<pos:position pos:line="75" pos:column="11"/></name> <operator pos:line="75" pos:column="12">-=<pos:position pos:line="75" pos:column="14"/></operator> <name><name pos:line="75" pos:column="15">c<pos:position pos:line="75" pos:column="16"/></name><index pos:line="75" pos:column="16">[<expr><name pos:line="75" pos:column="17">j<pos:position pos:line="75" pos:column="18"/></name></expr>]<pos:position pos:line="75" pos:column="19"/></index></name><operator pos:line="75" pos:column="19">)<pos:position pos:line="75" pos:column="20"/></operator> <operator pos:line="75" pos:column="21">&lt;<pos:position pos:line="75" pos:column="25"/></operator> <literal type="number" pos:line="75" pos:column="23">0<pos:position pos:line="75" pos:column="24"/></literal></expr>)<pos:position pos:line="75" pos:column="25"/></condition><then pos:line="75" pos:column="25">
      <block type="pseudo"><return pos:line="76" pos:column="7">return <expr><name pos:line="76" pos:column="14">Z_DATA_ERROR<pos:position pos:line="76" pos:column="26"/></name></expr>;<pos:position pos:line="76" pos:column="27"/></return></block></then></if></block></for>
  <if pos:line="77" pos:column="3">if <condition pos:line="77" pos:column="6">(<expr><operator pos:line="77" pos:column="7">(<pos:position pos:line="77" pos:column="8"/></operator><name pos:line="77" pos:column="8">y<pos:position pos:line="77" pos:column="9"/></name> <operator pos:line="77" pos:column="10">-=<pos:position pos:line="77" pos:column="12"/></operator> <name><name pos:line="77" pos:column="13">c<pos:position pos:line="77" pos:column="14"/></name><index pos:line="77" pos:column="14">[<expr><name pos:line="77" pos:column="15">i<pos:position pos:line="77" pos:column="16"/></name></expr>]<pos:position pos:line="77" pos:column="17"/></index></name><operator pos:line="77" pos:column="17">)<pos:position pos:line="77" pos:column="18"/></operator> <operator pos:line="77" pos:column="19">&lt;<pos:position pos:line="77" pos:column="23"/></operator> <literal type="number" pos:line="77" pos:column="21">0<pos:position pos:line="77" pos:column="22"/></literal></expr>)<pos:position pos:line="77" pos:column="23"/></condition><then pos:line="77" pos:column="23">
    <block type="pseudo"><return pos:line="78" pos:column="5">return <expr><name pos:line="78" pos:column="12">Z_DATA_ERROR<pos:position pos:line="78" pos:column="24"/></name></expr>;<pos:position pos:line="78" pos:column="25"/></return></block></then></if>
  <expr_stmt><expr><name><name pos:line="79" pos:column="3">c<pos:position pos:line="79" pos:column="4"/></name><index pos:line="79" pos:column="4">[<expr><name pos:line="79" pos:column="5">i<pos:position pos:line="79" pos:column="6"/></name></expr>]<pos:position pos:line="79" pos:column="7"/></index></name> <operator pos:line="79" pos:column="8">+=<pos:position pos:line="79" pos:column="10"/></operator> <name pos:line="79" pos:column="11">y<pos:position pos:line="79" pos:column="12"/></name></expr>;<pos:position pos:line="79" pos:column="13"/></expr_stmt>


  <comment type="block" pos:line="82" pos:column="3">/* Generate starting offsets into the value table for each length */</comment>
  <expr_stmt><expr><name><name pos:line="83" pos:column="3">x<pos:position pos:line="83" pos:column="4"/></name><index pos:line="83" pos:column="4">[<expr><literal type="number" pos:line="83" pos:column="5">1<pos:position pos:line="83" pos:column="6"/></literal></expr>]<pos:position pos:line="83" pos:column="7"/></index></name> <operator pos:line="83" pos:column="8">=<pos:position pos:line="83" pos:column="9"/></operator> <name pos:line="83" pos:column="10">j<pos:position pos:line="83" pos:column="11"/></name> <operator pos:line="83" pos:column="12">=<pos:position pos:line="83" pos:column="13"/></operator> <literal type="number" pos:line="83" pos:column="14">0<pos:position pos:line="83" pos:column="15"/></literal></expr>;<pos:position pos:line="83" pos:column="16"/></expr_stmt>
  <expr_stmt><expr><name pos:line="84" pos:column="3">p<pos:position pos:line="84" pos:column="4"/></name> <operator pos:line="84" pos:column="5">=<pos:position pos:line="84" pos:column="6"/></operator> <name pos:line="84" pos:column="7">c<pos:position pos:line="84" pos:column="8"/></name> <operator pos:line="84" pos:column="9">+<pos:position pos:line="84" pos:column="10"/></operator> <literal type="number" pos:line="84" pos:column="11">1<pos:position pos:line="84" pos:column="12"/></literal></expr>;<pos:position pos:line="84" pos:column="13"/></expr_stmt>  <expr_stmt><expr><name pos:line="84" pos:column="15">xp<pos:position pos:line="84" pos:column="17"/></name> <operator pos:line="84" pos:column="18">=<pos:position pos:line="84" pos:column="19"/></operator> <name pos:line="84" pos:column="20">x<pos:position pos:line="84" pos:column="21"/></name> <operator pos:line="84" pos:column="22">+<pos:position pos:line="84" pos:column="23"/></operator> <literal type="number" pos:line="84" pos:column="24">2<pos:position pos:line="84" pos:column="25"/></literal></expr>;<pos:position pos:line="84" pos:column="26"/></expr_stmt>
  <while pos:line="85" pos:column="3">while <condition pos:line="85" pos:column="9">(<expr><operator pos:line="85" pos:column="10">--<pos:position pos:line="85" pos:column="12"/></operator><name pos:line="85" pos:column="12">i<pos:position pos:line="85" pos:column="13"/></name></expr>)<pos:position pos:line="85" pos:column="14"/></condition> <block pos:line="85" pos:column="15">{                 <comment type="block" pos:line="85" pos:column="33">/* note that i == g from above */</comment>
    <expr_stmt><expr><operator pos:line="86" pos:column="5">*<pos:position pos:line="86" pos:column="6"/></operator><name pos:line="86" pos:column="6">xp<pos:position pos:line="86" pos:column="8"/></name><operator pos:line="86" pos:column="8">++<pos:position pos:line="86" pos:column="10"/></operator> <operator pos:line="86" pos:column="11">=<pos:position pos:line="86" pos:column="12"/></operator> <operator pos:line="86" pos:column="13">(<pos:position pos:line="86" pos:column="14"/></operator><name pos:line="86" pos:column="14">j<pos:position pos:line="86" pos:column="15"/></name> <operator pos:line="86" pos:column="16">+=<pos:position pos:line="86" pos:column="18"/></operator> <operator pos:line="86" pos:column="19">*<pos:position pos:line="86" pos:column="20"/></operator><name pos:line="86" pos:column="20">p<pos:position pos:line="86" pos:column="21"/></name><operator pos:line="86" pos:column="21">++<pos:position pos:line="86" pos:column="23"/></operator><operator pos:line="86" pos:column="23">)<pos:position pos:line="86" pos:column="24"/></operator></expr>;<pos:position pos:line="86" pos:column="25"/></expr_stmt>
  }<pos:position pos:line="87" pos:column="4"/></block></while>


  <comment type="block" pos:line="90" pos:column="3">/* Make a table of values in order of bit lengths */</comment>
  <expr_stmt><expr><name pos:line="91" pos:column="3">p<pos:position pos:line="91" pos:column="4"/></name> <operator pos:line="91" pos:column="5">=<pos:position pos:line="91" pos:column="6"/></operator> <name pos:line="91" pos:column="7">b<pos:position pos:line="91" pos:column="8"/></name></expr>;<pos:position pos:line="91" pos:column="9"/></expr_stmt>  <expr_stmt><expr><name pos:line="91" pos:column="11">i<pos:position pos:line="91" pos:column="12"/></name> <operator pos:line="91" pos:column="13">=<pos:position pos:line="91" pos:column="14"/></operator> <literal type="number" pos:line="91" pos:column="15">0<pos:position pos:line="91" pos:column="16"/></literal></expr>;<pos:position pos:line="91" pos:column="17"/></expr_stmt>
  <do pos:line="92" pos:column="3">do <block pos:line="92" pos:column="6">{
    <if pos:line="93" pos:column="5">if <condition pos:line="93" pos:column="8">(<expr><operator pos:line="93" pos:column="9">(<pos:position pos:line="93" pos:column="10"/></operator><name pos:line="93" pos:column="10">j<pos:position pos:line="93" pos:column="11"/></name> <operator pos:line="93" pos:column="12">=<pos:position pos:line="93" pos:column="13"/></operator> <operator pos:line="93" pos:column="14">*<pos:position pos:line="93" pos:column="15"/></operator><name pos:line="93" pos:column="15">p<pos:position pos:line="93" pos:column="16"/></name><operator pos:line="93" pos:column="16">++<pos:position pos:line="93" pos:column="18"/></operator><operator pos:line="93" pos:column="18">)<pos:position pos:line="93" pos:column="19"/></operator> <operator pos:line="93" pos:column="20">!=<pos:position pos:line="93" pos:column="22"/></operator> <literal type="number" pos:line="93" pos:column="23">0<pos:position pos:line="93" pos:column="24"/></literal></expr>)<pos:position pos:line="93" pos:column="25"/></condition><then pos:line="93" pos:column="25">
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="94" pos:column="7">v<pos:position pos:line="94" pos:column="8"/></name><index pos:line="94" pos:column="8">[<expr><name><name pos:line="94" pos:column="9">x<pos:position pos:line="94" pos:column="10"/></name><index pos:line="94" pos:column="10">[<expr><name pos:line="94" pos:column="11">j<pos:position pos:line="94" pos:column="12"/></name></expr>]<pos:position pos:line="94" pos:column="13"/></index></name><operator pos:line="94" pos:column="13">++<pos:position pos:line="94" pos:column="15"/></operator></expr>]<pos:position pos:line="94" pos:column="16"/></index></name> <operator pos:line="94" pos:column="17">=<pos:position pos:line="94" pos:column="18"/></operator> <name pos:line="94" pos:column="19">i<pos:position pos:line="94" pos:column="20"/></name></expr>;<pos:position pos:line="94" pos:column="21"/></expr_stmt></block></then></if>
  }<pos:position pos:line="95" pos:column="4"/></block> while <condition pos:line="95" pos:column="11">(<expr><operator pos:line="95" pos:column="12">++<pos:position pos:line="95" pos:column="14"/></operator><name pos:line="95" pos:column="14">i<pos:position pos:line="95" pos:column="15"/></name> <operator pos:line="95" pos:column="16">&lt;<pos:position pos:line="95" pos:column="20"/></operator> <name pos:line="95" pos:column="18">n<pos:position pos:line="95" pos:column="19"/></name></expr>)<pos:position pos:line="95" pos:column="20"/></condition>;<pos:position pos:line="95" pos:column="21"/></do>


  <comment type="block" pos:line="98" pos:column="3">/* Generate the Huffman codes and for each, make the table entries */</comment>
  <expr_stmt><expr><name><name pos:line="99" pos:column="3">x<pos:position pos:line="99" pos:column="4"/></name><index pos:line="99" pos:column="4">[<expr><literal type="number" pos:line="99" pos:column="5">0<pos:position pos:line="99" pos:column="6"/></literal></expr>]<pos:position pos:line="99" pos:column="7"/></index></name> <operator pos:line="99" pos:column="8">=<pos:position pos:line="99" pos:column="9"/></operator> <name pos:line="99" pos:column="10">i<pos:position pos:line="99" pos:column="11"/></name> <operator pos:line="99" pos:column="12">=<pos:position pos:line="99" pos:column="13"/></operator> <literal type="number" pos:line="99" pos:column="14">0<pos:position pos:line="99" pos:column="15"/></literal></expr>;<pos:position pos:line="99" pos:column="16"/></expr_stmt>                 <comment type="block" pos:line="99" pos:column="33">/* first Huffman code is zero */</comment>
  <expr_stmt><expr><name pos:line="100" pos:column="3">p<pos:position pos:line="100" pos:column="4"/></name> <operator pos:line="100" pos:column="5">=<pos:position pos:line="100" pos:column="6"/></operator> <name pos:line="100" pos:column="7">v<pos:position pos:line="100" pos:column="8"/></name></expr>;<pos:position pos:line="100" pos:column="9"/></expr_stmt>                        <comment type="block" pos:line="100" pos:column="33">/* grab values in bit order */</comment>
  <expr_stmt><expr><name pos:line="101" pos:column="3">h<pos:position pos:line="101" pos:column="4"/></name> <operator pos:line="101" pos:column="5">=<pos:position pos:line="101" pos:column="6"/></operator> <operator pos:line="101" pos:column="7">-<pos:position pos:line="101" pos:column="8"/></operator><literal type="number" pos:line="101" pos:column="8">1<pos:position pos:line="101" pos:column="9"/></literal></expr>;<pos:position pos:line="101" pos:column="10"/></expr_stmt>                       <comment type="block" pos:line="101" pos:column="33">/* no tables yet--level -1 */</comment>
  <expr_stmt><expr><name pos:line="102" pos:column="3">w<pos:position pos:line="102" pos:column="4"/></name> <operator pos:line="102" pos:column="5">=<pos:position pos:line="102" pos:column="6"/></operator> <operator pos:line="102" pos:column="7">-<pos:position pos:line="102" pos:column="8"/></operator><name pos:line="102" pos:column="8">l<pos:position pos:line="102" pos:column="9"/></name></expr>;<pos:position pos:line="102" pos:column="10"/></expr_stmt>                       <comment type="block" pos:line="102" pos:column="33">/* bits decoded == (l * h) */</comment>
  <expr_stmt><expr><name><name pos:line="103" pos:column="3">u<pos:position pos:line="103" pos:column="4"/></name><index pos:line="103" pos:column="4">[<expr><literal type="number" pos:line="103" pos:column="5">0<pos:position pos:line="103" pos:column="6"/></literal></expr>]<pos:position pos:line="103" pos:column="7"/></index></name> <operator pos:line="103" pos:column="8">=<pos:position pos:line="103" pos:column="9"/></operator> <operator pos:line="103" pos:column="10">(<pos:position pos:line="103" pos:column="11"/></operator><name pos:line="103" pos:column="11">inflate_huft<pos:position pos:line="103" pos:column="23"/></name> <operator pos:line="103" pos:column="24">*<pos:position pos:line="103" pos:column="25"/></operator><operator pos:line="103" pos:column="25">)<pos:position pos:line="103" pos:column="26"/></operator><name pos:line="103" pos:column="26">Z_NULL<pos:position pos:line="103" pos:column="32"/></name></expr>;<pos:position pos:line="103" pos:column="33"/></expr_stmt>        <comment type="block" pos:line="103" pos:column="41">/* just to keep compilers happy */</comment>
  <expr_stmt><expr><name pos:line="104" pos:column="3">q<pos:position pos:line="104" pos:column="4"/></name> <operator pos:line="104" pos:column="5">=<pos:position pos:line="104" pos:column="6"/></operator> <operator pos:line="104" pos:column="7">(<pos:position pos:line="104" pos:column="8"/></operator><name pos:line="104" pos:column="8">inflate_huft<pos:position pos:line="104" pos:column="20"/></name> <operator pos:line="104" pos:column="21">*<pos:position pos:line="104" pos:column="22"/></operator><operator pos:line="104" pos:column="22">)<pos:position pos:line="104" pos:column="23"/></operator><name pos:line="104" pos:column="23">Z_NULL<pos:position pos:line="104" pos:column="29"/></name></expr>;<pos:position pos:line="104" pos:column="30"/></expr_stmt>   <comment type="block" pos:line="104" pos:column="33">/* ditto */</comment>
  <expr_stmt><expr><name pos:line="105" pos:column="3">z<pos:position pos:line="105" pos:column="4"/></name> <operator pos:line="105" pos:column="5">=<pos:position pos:line="105" pos:column="6"/></operator> <literal type="number" pos:line="105" pos:column="7">0<pos:position pos:line="105" pos:column="8"/></literal></expr>;<pos:position pos:line="105" pos:column="9"/></expr_stmt>                        <comment type="block" pos:line="105" pos:column="33">/* ditto */</comment>

  <comment type="block" pos:line="107" pos:column="3">/* go through the bit lengths (k already is bits in shortest code) */</comment>
  <for pos:line="108" pos:column="3">for <control pos:line="108" pos:column="7">(<init pos:line="108" pos:column="8">;<pos:position pos:line="108" pos:column="9"/></init> <condition><expr><name pos:line="108" pos:column="10">k<pos:position pos:line="108" pos:column="11"/></name> <operator pos:line="108" pos:column="12">&lt;=<pos:position pos:line="108" pos:column="17"/></operator> <name pos:line="108" pos:column="15">g<pos:position pos:line="108" pos:column="16"/></name></expr>;<pos:position pos:line="108" pos:column="17"/></condition> <incr><expr><name pos:line="108" pos:column="18">k<pos:position pos:line="108" pos:column="19"/></name><operator pos:line="108" pos:column="19">++<pos:position pos:line="108" pos:column="21"/></operator></expr></incr>)<pos:position pos:line="108" pos:column="22"/></control>
  <block pos:line="109" pos:column="3">{
    <expr_stmt><expr><name pos:line="110" pos:column="5">a<pos:position pos:line="110" pos:column="6"/></name> <operator pos:line="110" pos:column="7">=<pos:position pos:line="110" pos:column="8"/></operator> <name><name pos:line="110" pos:column="9">c<pos:position pos:line="110" pos:column="10"/></name><index pos:line="110" pos:column="10">[<expr><name pos:line="110" pos:column="11">k<pos:position pos:line="110" pos:column="12"/></name></expr>]<pos:position pos:line="110" pos:column="13"/></index></name></expr>;<pos:position pos:line="110" pos:column="14"/></expr_stmt>
    <while pos:line="111" pos:column="5">while <condition pos:line="111" pos:column="11">(<expr><name pos:line="111" pos:column="12">a<pos:position pos:line="111" pos:column="13"/></name><operator pos:line="111" pos:column="13">--<pos:position pos:line="111" pos:column="15"/></operator></expr>)<pos:position pos:line="111" pos:column="16"/></condition>
    <block pos:line="112" pos:column="5">{
      <comment type="block" pos:line="113" pos:column="7">/* here i is the Huffman code of length k bits for value *p */</comment>
      <comment type="block" pos:line="114" pos:column="7">/* make tables up to required level */</comment>
      <while pos:line="115" pos:column="7">while <condition pos:line="115" pos:column="13">(<expr><name pos:line="115" pos:column="14">k<pos:position pos:line="115" pos:column="15"/></name> <operator pos:line="115" pos:column="16">&gt;<pos:position pos:line="115" pos:column="20"/></operator> <name pos:line="115" pos:column="18">w<pos:position pos:line="115" pos:column="19"/></name> <operator pos:line="115" pos:column="20">+<pos:position pos:line="115" pos:column="21"/></operator> <name pos:line="115" pos:column="22">l<pos:position pos:line="115" pos:column="23"/></name></expr>)<pos:position pos:line="115" pos:column="24"/></condition>
      <block pos:line="116" pos:column="7">{
        <expr_stmt><expr><name pos:line="117" pos:column="9">h<pos:position pos:line="117" pos:column="10"/></name><operator pos:line="117" pos:column="10">++<pos:position pos:line="117" pos:column="12"/></operator></expr>;<pos:position pos:line="117" pos:column="13"/></expr_stmt>
        <expr_stmt><expr><name pos:line="118" pos:column="9">w<pos:position pos:line="118" pos:column="10"/></name> <operator pos:line="118" pos:column="11">+=<pos:position pos:line="118" pos:column="13"/></operator> <name pos:line="118" pos:column="14">l<pos:position pos:line="118" pos:column="15"/></name></expr>;<pos:position pos:line="118" pos:column="16"/></expr_stmt>                 <comment type="block" pos:line="118" pos:column="33">/* previous table always l bits */</comment>

        <comment type="block" pos:line="120" pos:column="9">/* compute minimum size table less than or equal to l bits */</comment>
        <expr_stmt><expr><name pos:line="121" pos:column="9">z<pos:position pos:line="121" pos:column="10"/></name> <operator pos:line="121" pos:column="11">=<pos:position pos:line="121" pos:column="12"/></operator> <ternary><condition><expr><operator pos:line="121" pos:column="13">(<pos:position pos:line="121" pos:column="14"/></operator><name pos:line="121" pos:column="14">z<pos:position pos:line="121" pos:column="15"/></name> <operator pos:line="121" pos:column="16">=<pos:position pos:line="121" pos:column="17"/></operator> <name pos:line="121" pos:column="18">g<pos:position pos:line="121" pos:column="19"/></name> <operator pos:line="121" pos:column="20">-<pos:position pos:line="121" pos:column="21"/></operator> <name pos:line="121" pos:column="22">w<pos:position pos:line="121" pos:column="23"/></name><operator pos:line="121" pos:column="23">)<pos:position pos:line="121" pos:column="24"/></operator> <operator pos:line="121" pos:column="25">&gt;<pos:position pos:line="121" pos:column="29"/></operator> <operator pos:line="121" pos:column="27">(<pos:position pos:line="121" pos:column="28"/></operator><name pos:line="121" pos:column="28">uInt<pos:position pos:line="121" pos:column="32"/></name><operator pos:line="121" pos:column="32">)<pos:position pos:line="121" pos:column="33"/></operator><name pos:line="121" pos:column="33">l<pos:position pos:line="121" pos:column="34"/></name></expr> ?<pos:position pos:line="121" pos:column="36"/></condition><then pos:line="121" pos:column="36"> <expr><name pos:line="121" pos:column="37">l<pos:position pos:line="121" pos:column="38"/></name></expr> <pos:position pos:line="121" pos:column="39"/></then><else pos:line="121" pos:column="39">: <expr><name pos:line="121" pos:column="41">z<pos:position pos:line="121" pos:column="42"/></name></expr></else></ternary></expr>;<pos:position pos:line="121" pos:column="43"/></expr_stmt>      <comment type="block" pos:line="121" pos:column="49">/* table size upper limit */</comment>
        <if pos:line="122" pos:column="9">if <condition pos:line="122" pos:column="12">(<expr><operator pos:line="122" pos:column="13">(<pos:position pos:line="122" pos:column="14"/></operator><name pos:line="122" pos:column="14">f<pos:position pos:line="122" pos:column="15"/></name> <operator pos:line="122" pos:column="16">=<pos:position pos:line="122" pos:column="17"/></operator> <literal type="number" pos:line="122" pos:column="18">1<pos:position pos:line="122" pos:column="19"/></literal> <operator pos:line="122" pos:column="20">&lt;&lt;<pos:position pos:line="122" pos:column="28"/></operator> <operator pos:line="122" pos:column="23">(<pos:position pos:line="122" pos:column="24"/></operator><name pos:line="122" pos:column="24">j<pos:position pos:line="122" pos:column="25"/></name> <operator pos:line="122" pos:column="26">=<pos:position pos:line="122" pos:column="27"/></operator> <name pos:line="122" pos:column="28">k<pos:position pos:line="122" pos:column="29"/></name> <operator pos:line="122" pos:column="30">-<pos:position pos:line="122" pos:column="31"/></operator> <name pos:line="122" pos:column="32">w<pos:position pos:line="122" pos:column="33"/></name><operator pos:line="122" pos:column="33">)<pos:position pos:line="122" pos:column="34"/></operator><operator pos:line="122" pos:column="34">)<pos:position pos:line="122" pos:column="35"/></operator> <operator pos:line="122" pos:column="36">&gt;<pos:position pos:line="122" pos:column="40"/></operator> <name pos:line="122" pos:column="38">a<pos:position pos:line="122" pos:column="39"/></name> <operator pos:line="122" pos:column="40">+<pos:position pos:line="122" pos:column="41"/></operator> <literal type="number" pos:line="122" pos:column="42">1<pos:position pos:line="122" pos:column="43"/></literal></expr>)<pos:position pos:line="122" pos:column="44"/></condition><then pos:line="122" pos:column="44">     <comment type="block" pos:line="122" pos:column="49">/* try a k-w bit table */</comment>
        <block pos:line="123" pos:column="9">{                       <comment type="block" pos:line="123" pos:column="33">/* too few codes for k-w bit table */</comment>
          <expr_stmt><expr><name pos:line="124" pos:column="11">f<pos:position pos:line="124" pos:column="12"/></name> <operator pos:line="124" pos:column="13">-=<pos:position pos:line="124" pos:column="15"/></operator> <name pos:line="124" pos:column="16">a<pos:position pos:line="124" pos:column="17"/></name> <operator pos:line="124" pos:column="18">+<pos:position pos:line="124" pos:column="19"/></operator> <literal type="number" pos:line="124" pos:column="20">1<pos:position pos:line="124" pos:column="21"/></literal></expr>;<pos:position pos:line="124" pos:column="22"/></expr_stmt>           <comment type="block" pos:line="124" pos:column="33">/* deduct codes from patterns left */</comment>
          <expr_stmt><expr><name pos:line="125" pos:column="11">xp<pos:position pos:line="125" pos:column="13"/></name> <operator pos:line="125" pos:column="14">=<pos:position pos:line="125" pos:column="15"/></operator> <name pos:line="125" pos:column="16">c<pos:position pos:line="125" pos:column="17"/></name> <operator pos:line="125" pos:column="18">+<pos:position pos:line="125" pos:column="19"/></operator> <name pos:line="125" pos:column="20">k<pos:position pos:line="125" pos:column="21"/></name></expr>;<pos:position pos:line="125" pos:column="22"/></expr_stmt>
          <if pos:line="126" pos:column="11">if <condition pos:line="126" pos:column="14">(<expr><name pos:line="126" pos:column="15">j<pos:position pos:line="126" pos:column="16"/></name> <operator pos:line="126" pos:column="17">&lt;<pos:position pos:line="126" pos:column="21"/></operator> <name pos:line="126" pos:column="19">z<pos:position pos:line="126" pos:column="20"/></name></expr>)<pos:position pos:line="126" pos:column="21"/></condition><then pos:line="126" pos:column="21">
            <block type="pseudo"><while pos:line="127" pos:column="13">while <condition pos:line="127" pos:column="19">(<expr><operator pos:line="127" pos:column="20">++<pos:position pos:line="127" pos:column="22"/></operator><name pos:line="127" pos:column="22">j<pos:position pos:line="127" pos:column="23"/></name> <operator pos:line="127" pos:column="24">&lt;<pos:position pos:line="127" pos:column="28"/></operator> <name pos:line="127" pos:column="26">z<pos:position pos:line="127" pos:column="27"/></name></expr>)<pos:position pos:line="127" pos:column="28"/></condition>     <comment type="block" pos:line="127" pos:column="33">/* try smaller tables up to z bits */</comment>
            <block pos:line="128" pos:column="13">{
              <if pos:line="129" pos:column="15">if <condition pos:line="129" pos:column="18">(<expr><operator pos:line="129" pos:column="19">(<pos:position pos:line="129" pos:column="20"/></operator><name pos:line="129" pos:column="20">f<pos:position pos:line="129" pos:column="21"/></name> <operator pos:line="129" pos:column="22">&lt;&lt;=<pos:position pos:line="129" pos:column="31"/></operator> <literal type="number" pos:line="129" pos:column="26">1<pos:position pos:line="129" pos:column="27"/></literal><operator pos:line="129" pos:column="27">)<pos:position pos:line="129" pos:column="28"/></operator> <operator pos:line="129" pos:column="29">&lt;=<pos:position pos:line="129" pos:column="34"/></operator> <operator pos:line="129" pos:column="32">*<pos:position pos:line="129" pos:column="33"/></operator><operator pos:line="129" pos:column="33">++<pos:position pos:line="129" pos:column="35"/></operator><name pos:line="129" pos:column="35">xp<pos:position pos:line="129" pos:column="37"/></name></expr>)<pos:position pos:line="129" pos:column="38"/></condition><then pos:line="129" pos:column="38">
                <block type="pseudo"><break pos:line="130" pos:column="17">break;<pos:position pos:line="130" pos:column="23"/></break></block></then></if>          <comment type="block" pos:line="130" pos:column="33">/* enough codes to use up j bits */</comment>
              <expr_stmt><expr><name pos:line="131" pos:column="15">f<pos:position pos:line="131" pos:column="16"/></name> <operator pos:line="131" pos:column="17">-=<pos:position pos:line="131" pos:column="19"/></operator> <operator pos:line="131" pos:column="20">*<pos:position pos:line="131" pos:column="21"/></operator><name pos:line="131" pos:column="21">xp<pos:position pos:line="131" pos:column="23"/></name></expr>;<pos:position pos:line="131" pos:column="24"/></expr_stmt>         <comment type="block" pos:line="131" pos:column="33">/* else deduct codes from patterns */</comment>
            }<pos:position pos:line="132" pos:column="14"/></block></while></block></then></if>
        }<pos:position pos:line="133" pos:column="10"/></block></then></if>
        <expr_stmt><expr><name pos:line="134" pos:column="9">z<pos:position pos:line="134" pos:column="10"/></name> <operator pos:line="134" pos:column="11">=<pos:position pos:line="134" pos:column="12"/></operator> <literal type="number" pos:line="134" pos:column="13">1<pos:position pos:line="134" pos:column="14"/></literal> <operator pos:line="134" pos:column="15">&lt;&lt;<pos:position pos:line="134" pos:column="23"/></operator> <name pos:line="134" pos:column="18">j<pos:position pos:line="134" pos:column="19"/></name></expr>;<pos:position pos:line="134" pos:column="20"/></expr_stmt>             <comment type="block" pos:line="134" pos:column="33">/* table entries for j-bit table */</comment>

        <comment type="block" pos:line="136" pos:column="9">/* allocate and link in new table */</comment>
        <if pos:line="137" pos:column="9">if <condition pos:line="137" pos:column="12">(<expr><operator pos:line="137" pos:column="13">(<pos:position pos:line="137" pos:column="14"/></operator><name pos:line="137" pos:column="14">q<pos:position pos:line="137" pos:column="15"/></name> <operator pos:line="137" pos:column="16">=<pos:position pos:line="137" pos:column="17"/></operator> <operator pos:line="137" pos:column="18">(<pos:position pos:line="137" pos:column="19"/></operator><name pos:line="137" pos:column="19">inflate_huft<pos:position pos:line="137" pos:column="31"/></name> <operator pos:line="137" pos:column="32">*<pos:position pos:line="137" pos:column="33"/></operator><operator pos:line="137" pos:column="33">)<pos:position pos:line="137" pos:column="34"/></operator><call><name pos:line="137" pos:column="34">ZALLOC<pos:position pos:line="137" pos:column="40"/></name>
             <argument_list pos:line="138" pos:column="14">(<argument><expr><name pos:line="138" pos:column="15">zs<pos:position pos:line="138" pos:column="17"/></name></expr></argument>,<argument><expr><name pos:line="138" pos:column="18">z<pos:position pos:line="138" pos:column="19"/></name> <operator pos:line="138" pos:column="20">+<pos:position pos:line="138" pos:column="21"/></operator> <literal type="number" pos:line="138" pos:column="22">1<pos:position pos:line="138" pos:column="23"/></literal></expr></argument>,<argument><expr><sizeof pos:line="138" pos:column="24">sizeof<argument_list pos:line="138" pos:column="30">(<argument><expr><name pos:line="138" pos:column="31">inflate_huft<pos:position pos:line="138" pos:column="43"/></name></expr></argument>)<pos:position pos:line="138" pos:column="44"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="138" pos:column="45"/></argument_list></call><operator pos:line="138" pos:column="45">)<pos:position pos:line="138" pos:column="46"/></operator> <operator pos:line="138" pos:column="47">==<pos:position pos:line="138" pos:column="49"/></operator> <name pos:line="138" pos:column="50">Z_NULL<pos:position pos:line="138" pos:column="56"/></name></expr>)<pos:position pos:line="138" pos:column="57"/></condition><then pos:line="138" pos:column="57">
        <block pos:line="139" pos:column="9">{
          <if pos:line="140" pos:column="11">if <condition pos:line="140" pos:column="14">(<expr><name pos:line="140" pos:column="15">h<pos:position pos:line="140" pos:column="16"/></name></expr>)<pos:position pos:line="140" pos:column="17"/></condition><then pos:line="140" pos:column="17">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="141" pos:column="13">inflate_trees_free<pos:position pos:line="141" pos:column="31"/></name><argument_list pos:line="141" pos:column="31">(<argument><expr><name><name pos:line="141" pos:column="32">u<pos:position pos:line="141" pos:column="33"/></name><index pos:line="141" pos:column="33">[<expr><literal type="number" pos:line="141" pos:column="34">0<pos:position pos:line="141" pos:column="35"/></literal></expr>]<pos:position pos:line="141" pos:column="36"/></index></name></expr></argument>, <argument><expr><name pos:line="141" pos:column="38">zs<pos:position pos:line="141" pos:column="40"/></name></expr></argument>)<pos:position pos:line="141" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="141" pos:column="42"/></expr_stmt></block></then></if>
          <return pos:line="142" pos:column="11">return <expr><name pos:line="142" pos:column="18">Z_MEM_ERROR<pos:position pos:line="142" pos:column="29"/></name></expr>;<pos:position pos:line="142" pos:column="30"/></return>   <comment type="block" pos:line="142" pos:column="33">/* not enough memory */</comment>
        }<pos:position pos:line="143" pos:column="10"/></block></then></if>
	<expr_stmt><expr><name><name pos:line="144" pos:column="9">q<pos:position pos:line="144" pos:column="10"/></name><operator pos:line="144" pos:column="10">-&gt;<pos:position pos:line="144" pos:column="15"/></operator><name pos:line="144" pos:column="12">word<pos:position pos:line="144" pos:column="16"/></name><operator pos:line="144" pos:column="16">.<pos:position pos:line="144" pos:column="17"/></operator><name pos:line="144" pos:column="17">Nalloc<pos:position pos:line="144" pos:column="23"/></name></name> <operator pos:line="144" pos:column="24">=<pos:position pos:line="144" pos:column="25"/></operator> <name pos:line="144" pos:column="26">z<pos:position pos:line="144" pos:column="27"/></name> <operator pos:line="144" pos:column="28">+<pos:position pos:line="144" pos:column="29"/></operator> <literal type="number" pos:line="144" pos:column="30">1<pos:position pos:line="144" pos:column="31"/></literal></expr>;<pos:position pos:line="144" pos:column="32"/></expr_stmt>
<cpp:ifdef pos:line="145" pos:column="1">#<cpp:directive pos:line="145" pos:column="2">ifdef<pos:position pos:line="145" pos:column="7"/></cpp:directive> <name pos:line="145" pos:column="8">DEBUG_ZLIB<pos:position pos:line="145" pos:column="18"/></name></cpp:ifdef>
        <expr_stmt><expr><name pos:line="146" pos:column="9">inflate_hufts<pos:position pos:line="146" pos:column="22"/></name> <operator pos:line="146" pos:column="23">+=<pos:position pos:line="146" pos:column="25"/></operator> <name pos:line="146" pos:column="26">z<pos:position pos:line="146" pos:column="27"/></name> <operator pos:line="146" pos:column="28">+<pos:position pos:line="146" pos:column="29"/></operator> <literal type="number" pos:line="146" pos:column="30">1<pos:position pos:line="146" pos:column="31"/></literal></expr>;<pos:position pos:line="146" pos:column="32"/></expr_stmt>
<cpp:endif pos:line="147" pos:column="1">#<cpp:directive pos:line="147" pos:column="2">endif<pos:position pos:line="147" pos:column="7"/></cpp:directive></cpp:endif>
        <expr_stmt><expr><operator pos:line="148" pos:column="9">*<pos:position pos:line="148" pos:column="10"/></operator><name pos:line="148" pos:column="10">t<pos:position pos:line="148" pos:column="11"/></name> <operator pos:line="148" pos:column="12">=<pos:position pos:line="148" pos:column="13"/></operator> <name pos:line="148" pos:column="14">q<pos:position pos:line="148" pos:column="15"/></name> <operator pos:line="148" pos:column="16">+<pos:position pos:line="148" pos:column="17"/></operator> <literal type="number" pos:line="148" pos:column="18">1<pos:position pos:line="148" pos:column="19"/></literal></expr>;<pos:position pos:line="148" pos:column="20"/></expr_stmt>             <comment type="block" pos:line="148" pos:column="33">/* link to list for huft_free() */</comment>
        <expr_stmt><expr><operator pos:line="149" pos:column="9">*<pos:position pos:line="149" pos:column="10"/></operator><operator pos:line="149" pos:column="10">(<pos:position pos:line="149" pos:column="11"/></operator><name pos:line="149" pos:column="11">t<pos:position pos:line="149" pos:column="12"/></name> <operator pos:line="149" pos:column="13">=<pos:position pos:line="149" pos:column="14"/></operator> <operator pos:line="149" pos:column="15">&amp;<pos:position pos:line="149" pos:column="20"/></operator><operator pos:line="149" pos:column="16">(<pos:position pos:line="149" pos:column="17"/></operator><name><name pos:line="149" pos:column="17">q<pos:position pos:line="149" pos:column="18"/></name><operator pos:line="149" pos:column="18">-&gt;<pos:position pos:line="149" pos:column="23"/></operator><name pos:line="149" pos:column="20">next<pos:position pos:line="149" pos:column="24"/></name></name><operator pos:line="149" pos:column="24">)<pos:position pos:line="149" pos:column="25"/></operator><operator pos:line="149" pos:column="25">)<pos:position pos:line="149" pos:column="26"/></operator> <operator pos:line="149" pos:column="27">=<pos:position pos:line="149" pos:column="28"/></operator> <name pos:line="149" pos:column="29">Z_NULL<pos:position pos:line="149" pos:column="35"/></name></expr>;<pos:position pos:line="149" pos:column="36"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="150" pos:column="9">u<pos:position pos:line="150" pos:column="10"/></name><index pos:line="150" pos:column="10">[<expr><name pos:line="150" pos:column="11">h<pos:position pos:line="150" pos:column="12"/></name></expr>]<pos:position pos:line="150" pos:column="13"/></index></name> <operator pos:line="150" pos:column="14">=<pos:position pos:line="150" pos:column="15"/></operator> <operator pos:line="150" pos:column="16">++<pos:position pos:line="150" pos:column="18"/></operator><name pos:line="150" pos:column="18">q<pos:position pos:line="150" pos:column="19"/></name></expr>;<pos:position pos:line="150" pos:column="20"/></expr_stmt>             <comment type="block" pos:line="150" pos:column="33">/* table starts after link */</comment>

        <comment type="block" pos:line="152" pos:column="9">/* connect to last table, if there is one */</comment>
        <if pos:line="153" pos:column="9">if <condition pos:line="153" pos:column="12">(<expr><name pos:line="153" pos:column="13">h<pos:position pos:line="153" pos:column="14"/></name></expr>)<pos:position pos:line="153" pos:column="15"/></condition><then pos:line="153" pos:column="15">
        <block pos:line="154" pos:column="9">{
          <expr_stmt><expr><name><name pos:line="155" pos:column="11">x<pos:position pos:line="155" pos:column="12"/></name><index pos:line="155" pos:column="12">[<expr><name pos:line="155" pos:column="13">h<pos:position pos:line="155" pos:column="14"/></name></expr>]<pos:position pos:line="155" pos:column="15"/></index></name> <operator pos:line="155" pos:column="16">=<pos:position pos:line="155" pos:column="17"/></operator> <name pos:line="155" pos:column="18">i<pos:position pos:line="155" pos:column="19"/></name></expr>;<pos:position pos:line="155" pos:column="20"/></expr_stmt>             <comment type="block" pos:line="155" pos:column="33">/* save pattern for backing up */</comment>
          <expr_stmt><expr><name><name pos:line="156" pos:column="11">r<pos:position pos:line="156" pos:column="12"/></name><operator pos:line="156" pos:column="12">.<pos:position pos:line="156" pos:column="13"/></operator><name pos:line="156" pos:column="13">bits<pos:position pos:line="156" pos:column="17"/></name></name> <operator pos:line="156" pos:column="18">=<pos:position pos:line="156" pos:column="19"/></operator> <operator pos:line="156" pos:column="20">(<pos:position pos:line="156" pos:column="21"/></operator><name pos:line="156" pos:column="21">Byte<pos:position pos:line="156" pos:column="25"/></name><operator pos:line="156" pos:column="25">)<pos:position pos:line="156" pos:column="26"/></operator><name pos:line="156" pos:column="26">l<pos:position pos:line="156" pos:column="27"/></name></expr>;<pos:position pos:line="156" pos:column="28"/></expr_stmt>     <comment type="block" pos:line="156" pos:column="33">/* bits to dump before this table */</comment>
          <expr_stmt><expr><name><name pos:line="157" pos:column="11">r<pos:position pos:line="157" pos:column="12"/></name><operator pos:line="157" pos:column="12">.<pos:position pos:line="157" pos:column="13"/></operator><name pos:line="157" pos:column="13">exop<pos:position pos:line="157" pos:column="17"/></name></name> <operator pos:line="157" pos:column="18">=<pos:position pos:line="157" pos:column="19"/></operator> <operator pos:line="157" pos:column="20">(<pos:position pos:line="157" pos:column="21"/></operator><name pos:line="157" pos:column="21">Byte<pos:position pos:line="157" pos:column="25"/></name><operator pos:line="157" pos:column="25">)<pos:position pos:line="157" pos:column="26"/></operator><name pos:line="157" pos:column="26">j<pos:position pos:line="157" pos:column="27"/></name></expr>;<pos:position pos:line="157" pos:column="28"/></expr_stmt>     <comment type="block" pos:line="157" pos:column="33">/* bits in this table */</comment>
          <expr_stmt><expr><name><name pos:line="158" pos:column="11">r<pos:position pos:line="158" pos:column="12"/></name><operator pos:line="158" pos:column="12">.<pos:position pos:line="158" pos:column="13"/></operator><name pos:line="158" pos:column="13">next<pos:position pos:line="158" pos:column="17"/></name></name> <operator pos:line="158" pos:column="18">=<pos:position pos:line="158" pos:column="19"/></operator> <name pos:line="158" pos:column="20">q<pos:position pos:line="158" pos:column="21"/></name></expr>;<pos:position pos:line="158" pos:column="22"/></expr_stmt>           <comment type="block" pos:line="158" pos:column="33">/* pointer to this table */</comment>
          <expr_stmt><expr><name pos:line="159" pos:column="11">j<pos:position pos:line="159" pos:column="12"/></name> <operator pos:line="159" pos:column="13">=<pos:position pos:line="159" pos:column="14"/></operator> <name pos:line="159" pos:column="15">i<pos:position pos:line="159" pos:column="16"/></name> <operator pos:line="159" pos:column="17">&gt;&gt;<pos:position pos:line="159" pos:column="22"/></operator> <operator pos:line="159" pos:column="20">(<pos:position pos:line="159" pos:column="21"/></operator><name pos:line="159" pos:column="21">w<pos:position pos:line="159" pos:column="22"/></name> <operator pos:line="159" pos:column="23">-<pos:position pos:line="159" pos:column="24"/></operator> <name pos:line="159" pos:column="25">l<pos:position pos:line="159" pos:column="26"/></name><operator pos:line="159" pos:column="26">)<pos:position pos:line="159" pos:column="27"/></operator></expr>;<pos:position pos:line="159" pos:column="28"/></expr_stmt>     <comment type="block" pos:line="159" pos:column="33">/* (get around Turbo C bug) */</comment>
          <expr_stmt><expr><name><name pos:line="160" pos:column="11">u<pos:position pos:line="160" pos:column="12"/></name><index pos:line="160" pos:column="12">[<expr><name pos:line="160" pos:column="13">h<pos:position pos:line="160" pos:column="14"/></name><operator pos:line="160" pos:column="14">-<pos:position pos:line="160" pos:column="15"/></operator><literal type="number" pos:line="160" pos:column="15">1<pos:position pos:line="160" pos:column="16"/></literal></expr>]<pos:position pos:line="160" pos:column="17"/></index><index pos:line="160" pos:column="17">[<expr><name pos:line="160" pos:column="18">j<pos:position pos:line="160" pos:column="19"/></name></expr>]<pos:position pos:line="160" pos:column="20"/></index></name> <operator pos:line="160" pos:column="21">=<pos:position pos:line="160" pos:column="22"/></operator> <name pos:line="160" pos:column="23">r<pos:position pos:line="160" pos:column="24"/></name></expr>;<pos:position pos:line="160" pos:column="25"/></expr_stmt>        <comment type="block" pos:line="160" pos:column="33">/* connect to last table */</comment>
        }<pos:position pos:line="161" pos:column="10"/></block></then></if>
      }<pos:position pos:line="162" pos:column="8"/></block></while>

      <comment type="block" pos:line="164" pos:column="7">/* set up table entry in r */</comment>
      <expr_stmt><expr><name><name pos:line="165" pos:column="7">r<pos:position pos:line="165" pos:column="8"/></name><operator pos:line="165" pos:column="8">.<pos:position pos:line="165" pos:column="9"/></operator><name pos:line="165" pos:column="9">bits<pos:position pos:line="165" pos:column="13"/></name></name> <operator pos:line="165" pos:column="14">=<pos:position pos:line="165" pos:column="15"/></operator> <call pos:line="165" pos:column="16">(<name pos:line="165" pos:column="17">Byte<pos:position pos:line="165" pos:column="21"/></name>)<argument_list pos:line="165" pos:column="22">(<argument><expr><name pos:line="165" pos:column="23">k<pos:position pos:line="165" pos:column="24"/></name> <operator pos:line="165" pos:column="25">-<pos:position pos:line="165" pos:column="26"/></operator> <name pos:line="165" pos:column="27">w<pos:position pos:line="165" pos:column="28"/></name></expr></argument>)<pos:position pos:line="165" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="165" pos:column="30"/></expr_stmt>
      <if pos:line="166" pos:column="7">if <condition pos:line="166" pos:column="10">(<expr><name pos:line="166" pos:column="11">p<pos:position pos:line="166" pos:column="12"/></name> <operator pos:line="166" pos:column="13">&gt;=<pos:position pos:line="166" pos:column="18"/></operator> <name pos:line="166" pos:column="16">v<pos:position pos:line="166" pos:column="17"/></name> <operator pos:line="166" pos:column="18">+<pos:position pos:line="166" pos:column="19"/></operator> <name pos:line="166" pos:column="20">n<pos:position pos:line="166" pos:column="21"/></name></expr>)<pos:position pos:line="166" pos:column="22"/></condition><then pos:line="166" pos:column="22">
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="167" pos:column="9">r<pos:position pos:line="167" pos:column="10"/></name><operator pos:line="167" pos:column="10">.<pos:position pos:line="167" pos:column="11"/></operator><name pos:line="167" pos:column="11">exop<pos:position pos:line="167" pos:column="15"/></name></name> <operator pos:line="167" pos:column="16">=<pos:position pos:line="167" pos:column="17"/></operator> <literal type="number" pos:line="167" pos:column="18">128<pos:position pos:line="167" pos:column="21"/></literal> <operator pos:line="167" pos:column="22">+<pos:position pos:line="167" pos:column="23"/></operator> <literal type="number" pos:line="167" pos:column="24">64<pos:position pos:line="167" pos:column="26"/></literal></expr>;<pos:position pos:line="167" pos:column="27"/></expr_stmt></block></then>      <comment type="block" pos:line="167" pos:column="33">/* out of values--invalid code */</comment>
      <elseif pos:line="168" pos:column="7">else <if pos:line="168" pos:column="12">if <condition pos:line="168" pos:column="15">(<expr><operator pos:line="168" pos:column="16">*<pos:position pos:line="168" pos:column="17"/></operator><name pos:line="168" pos:column="17">p<pos:position pos:line="168" pos:column="18"/></name> <operator pos:line="168" pos:column="19">&lt;<pos:position pos:line="168" pos:column="23"/></operator> <name pos:line="168" pos:column="21">s<pos:position pos:line="168" pos:column="22"/></name></expr>)<pos:position pos:line="168" pos:column="23"/></condition><then pos:line="168" pos:column="23">
      <block pos:line="169" pos:column="7">{
        <expr_stmt><expr><name><name pos:line="170" pos:column="9">r<pos:position pos:line="170" pos:column="10"/></name><operator pos:line="170" pos:column="10">.<pos:position pos:line="170" pos:column="11"/></operator><name pos:line="170" pos:column="11">exop<pos:position pos:line="170" pos:column="15"/></name></name> <operator pos:line="170" pos:column="16">=<pos:position pos:line="170" pos:column="17"/></operator> <call pos:line="170" pos:column="18">(<name pos:line="170" pos:column="19">Byte<pos:position pos:line="170" pos:column="23"/></name>)<argument_list pos:line="170" pos:column="24">(<argument><expr><ternary><condition><expr><operator pos:line="170" pos:column="25">*<pos:position pos:line="170" pos:column="26"/></operator><name pos:line="170" pos:column="26">p<pos:position pos:line="170" pos:column="27"/></name> <operator pos:line="170" pos:column="28">&lt;<pos:position pos:line="170" pos:column="32"/></operator> <literal type="number" pos:line="170" pos:column="30">256<pos:position pos:line="170" pos:column="33"/></literal></expr> ?<pos:position pos:line="170" pos:column="35"/></condition><then pos:line="170" pos:column="35"> <expr><literal type="number" pos:line="170" pos:column="36">0<pos:position pos:line="170" pos:column="37"/></literal></expr> <pos:position pos:line="170" pos:column="38"/></then><else pos:line="170" pos:column="38">: <expr><literal type="number" pos:line="170" pos:column="40">32<pos:position pos:line="170" pos:column="42"/></literal> <operator pos:line="170" pos:column="43">+<pos:position pos:line="170" pos:column="44"/></operator> <literal type="number" pos:line="170" pos:column="45">64<pos:position pos:line="170" pos:column="47"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="170" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="170" pos:column="49"/></expr_stmt>     <comment type="block" pos:line="170" pos:column="54">/* 256 is end-of-block */</comment>
        <expr_stmt><expr><name><name pos:line="171" pos:column="9">r<pos:position pos:line="171" pos:column="10"/></name><operator pos:line="171" pos:column="10">.<pos:position pos:line="171" pos:column="11"/></operator><name pos:line="171" pos:column="11">base<pos:position pos:line="171" pos:column="15"/></name></name> <operator pos:line="171" pos:column="16">=<pos:position pos:line="171" pos:column="17"/></operator> <operator pos:line="171" pos:column="18">*<pos:position pos:line="171" pos:column="19"/></operator><name pos:line="171" pos:column="19">p<pos:position pos:line="171" pos:column="20"/></name><operator pos:line="171" pos:column="20">++<pos:position pos:line="171" pos:column="22"/></operator></expr>;<pos:position pos:line="171" pos:column="23"/></expr_stmt>          <comment type="block" pos:line="171" pos:column="33">/* simple code is just the value */</comment>
      }<pos:position pos:line="172" pos:column="8"/></block></then></if></elseif>
      <else pos:line="173" pos:column="7">else
      <block pos:line="174" pos:column="7">{
        <expr_stmt><expr><name><name pos:line="175" pos:column="9">r<pos:position pos:line="175" pos:column="10"/></name><operator pos:line="175" pos:column="10">.<pos:position pos:line="175" pos:column="11"/></operator><name pos:line="175" pos:column="11">exop<pos:position pos:line="175" pos:column="15"/></name></name> <operator pos:line="175" pos:column="16">=<pos:position pos:line="175" pos:column="17"/></operator> <operator pos:line="175" pos:column="18">(<pos:position pos:line="175" pos:column="19"/></operator><name pos:line="175" pos:column="19">Byte<pos:position pos:line="175" pos:column="23"/></name><operator pos:line="175" pos:column="23">)<pos:position pos:line="175" pos:column="24"/></operator><name><name pos:line="175" pos:column="24">e<pos:position pos:line="175" pos:column="25"/></name><index pos:line="175" pos:column="25">[<expr><operator pos:line="175" pos:column="26">*<pos:position pos:line="175" pos:column="27"/></operator><name pos:line="175" pos:column="27">p<pos:position pos:line="175" pos:column="28"/></name> <operator pos:line="175" pos:column="29">-<pos:position pos:line="175" pos:column="30"/></operator> <name pos:line="175" pos:column="31">s<pos:position pos:line="175" pos:column="32"/></name></expr>]<pos:position pos:line="175" pos:column="33"/></index></name> <operator pos:line="175" pos:column="34">+<pos:position pos:line="175" pos:column="35"/></operator> <literal type="number" pos:line="175" pos:column="36">16<pos:position pos:line="175" pos:column="38"/></literal> <operator pos:line="175" pos:column="39">+<pos:position pos:line="175" pos:column="40"/></operator> <literal type="number" pos:line="175" pos:column="41">64<pos:position pos:line="175" pos:column="43"/></literal></expr>;<pos:position pos:line="175" pos:column="44"/></expr_stmt> <comment type="block" pos:line="175" pos:column="45">/* non-simple--look up in lists */</comment>
        <expr_stmt><expr><name><name pos:line="176" pos:column="9">r<pos:position pos:line="176" pos:column="10"/></name><operator pos:line="176" pos:column="10">.<pos:position pos:line="176" pos:column="11"/></operator><name pos:line="176" pos:column="11">base<pos:position pos:line="176" pos:column="15"/></name></name> <operator pos:line="176" pos:column="16">=<pos:position pos:line="176" pos:column="17"/></operator> <name><name pos:line="176" pos:column="18">d<pos:position pos:line="176" pos:column="19"/></name><index pos:line="176" pos:column="19">[<expr><operator pos:line="176" pos:column="20">*<pos:position pos:line="176" pos:column="21"/></operator><name pos:line="176" pos:column="21">p<pos:position pos:line="176" pos:column="22"/></name><operator pos:line="176" pos:column="22">++<pos:position pos:line="176" pos:column="24"/></operator> <operator pos:line="176" pos:column="25">-<pos:position pos:line="176" pos:column="26"/></operator> <name pos:line="176" pos:column="27">s<pos:position pos:line="176" pos:column="28"/></name></expr>]<pos:position pos:line="176" pos:column="29"/></index></name></expr>;<pos:position pos:line="176" pos:column="30"/></expr_stmt>
      }<pos:position pos:line="177" pos:column="8"/></block></else></if>

      <comment type="block" pos:line="179" pos:column="7">/* fill code-like entries with r */</comment>
      <expr_stmt><expr><name pos:line="180" pos:column="7">f<pos:position pos:line="180" pos:column="8"/></name> <operator pos:line="180" pos:column="9">=<pos:position pos:line="180" pos:column="10"/></operator> <literal type="number" pos:line="180" pos:column="11">1<pos:position pos:line="180" pos:column="12"/></literal> <operator pos:line="180" pos:column="13">&lt;&lt;<pos:position pos:line="180" pos:column="21"/></operator> <operator pos:line="180" pos:column="16">(<pos:position pos:line="180" pos:column="17"/></operator><name pos:line="180" pos:column="17">k<pos:position pos:line="180" pos:column="18"/></name> <operator pos:line="180" pos:column="19">-<pos:position pos:line="180" pos:column="20"/></operator> <name pos:line="180" pos:column="21">w<pos:position pos:line="180" pos:column="22"/></name><operator pos:line="180" pos:column="22">)<pos:position pos:line="180" pos:column="23"/></operator></expr>;<pos:position pos:line="180" pos:column="24"/></expr_stmt>
      <for pos:line="181" pos:column="7">for <control pos:line="181" pos:column="11">(<init><expr><name pos:line="181" pos:column="12">j<pos:position pos:line="181" pos:column="13"/></name> <operator pos:line="181" pos:column="14">=<pos:position pos:line="181" pos:column="15"/></operator> <name pos:line="181" pos:column="16">i<pos:position pos:line="181" pos:column="17"/></name> <operator pos:line="181" pos:column="18">&gt;&gt;<pos:position pos:line="181" pos:column="23"/></operator> <name pos:line="181" pos:column="21">w<pos:position pos:line="181" pos:column="22"/></name></expr>;<pos:position pos:line="181" pos:column="23"/></init> <condition><expr><name pos:line="181" pos:column="24">j<pos:position pos:line="181" pos:column="25"/></name> <operator pos:line="181" pos:column="26">&lt;<pos:position pos:line="181" pos:column="30"/></operator> <name pos:line="181" pos:column="28">z<pos:position pos:line="181" pos:column="29"/></name></expr>;<pos:position pos:line="181" pos:column="30"/></condition> <incr><expr><name pos:line="181" pos:column="31">j<pos:position pos:line="181" pos:column="32"/></name> <operator pos:line="181" pos:column="33">+=<pos:position pos:line="181" pos:column="35"/></operator> <name pos:line="181" pos:column="36">f<pos:position pos:line="181" pos:column="37"/></name></expr></incr>)<pos:position pos:line="181" pos:column="38"/></control>
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="182" pos:column="9">q<pos:position pos:line="182" pos:column="10"/></name><index pos:line="182" pos:column="10">[<expr><name pos:line="182" pos:column="11">j<pos:position pos:line="182" pos:column="12"/></name></expr>]<pos:position pos:line="182" pos:column="13"/></index></name> <operator pos:line="182" pos:column="14">=<pos:position pos:line="182" pos:column="15"/></operator> <name pos:line="182" pos:column="16">r<pos:position pos:line="182" pos:column="17"/></name></expr>;<pos:position pos:line="182" pos:column="18"/></expr_stmt></block></for>

      <comment type="block" pos:line="184" pos:column="7">/* backwards increment the k-bit code i */</comment>
      <for pos:line="185" pos:column="7">for <control pos:line="185" pos:column="11">(<init><expr><name pos:line="185" pos:column="12">j<pos:position pos:line="185" pos:column="13"/></name> <operator pos:line="185" pos:column="14">=<pos:position pos:line="185" pos:column="15"/></operator> <literal type="number" pos:line="185" pos:column="16">1<pos:position pos:line="185" pos:column="17"/></literal> <operator pos:line="185" pos:column="18">&lt;&lt;<pos:position pos:line="185" pos:column="26"/></operator> <operator pos:line="185" pos:column="21">(<pos:position pos:line="185" pos:column="22"/></operator><name pos:line="185" pos:column="22">k<pos:position pos:line="185" pos:column="23"/></name> <operator pos:line="185" pos:column="24">-<pos:position pos:line="185" pos:column="25"/></operator> <literal type="number" pos:line="185" pos:column="26">1<pos:position pos:line="185" pos:column="27"/></literal><operator pos:line="185" pos:column="27">)<pos:position pos:line="185" pos:column="28"/></operator></expr>;<pos:position pos:line="185" pos:column="29"/></init> <condition><expr><name pos:line="185" pos:column="30">i<pos:position pos:line="185" pos:column="31"/></name> <operator pos:line="185" pos:column="32">&amp;<pos:position pos:line="185" pos:column="37"/></operator> <name pos:line="185" pos:column="34">j<pos:position pos:line="185" pos:column="35"/></name></expr>;<pos:position pos:line="185" pos:column="36"/></condition> <incr><expr><name pos:line="185" pos:column="37">j<pos:position pos:line="185" pos:column="38"/></name> <operator pos:line="185" pos:column="39">&gt;&gt;=<pos:position pos:line="185" pos:column="48"/></operator> <literal type="number" pos:line="185" pos:column="43">1<pos:position pos:line="185" pos:column="44"/></literal></expr></incr>)<pos:position pos:line="185" pos:column="45"/></control>
        <block type="pseudo"><expr_stmt><expr><name pos:line="186" pos:column="9">i<pos:position pos:line="186" pos:column="10"/></name> <operator pos:line="186" pos:column="11">^=<pos:position pos:line="186" pos:column="13"/></operator> <name pos:line="186" pos:column="14">j<pos:position pos:line="186" pos:column="15"/></name></expr>;<pos:position pos:line="186" pos:column="16"/></expr_stmt></block></for>
      <expr_stmt><expr><name pos:line="187" pos:column="7">i<pos:position pos:line="187" pos:column="8"/></name> <operator pos:line="187" pos:column="9">^=<pos:position pos:line="187" pos:column="11"/></operator> <name pos:line="187" pos:column="12">j<pos:position pos:line="187" pos:column="13"/></name></expr>;<pos:position pos:line="187" pos:column="14"/></expr_stmt>

      <comment type="block" pos:line="189" pos:column="7">/* backup over finished tables */</comment>
      <while pos:line="190" pos:column="7">while <condition pos:line="190" pos:column="13">(<expr><operator pos:line="190" pos:column="14">(<pos:position pos:line="190" pos:column="15"/></operator><name pos:line="190" pos:column="15">i<pos:position pos:line="190" pos:column="16"/></name> <operator pos:line="190" pos:column="17">&amp;<pos:position pos:line="190" pos:column="22"/></operator> <operator pos:line="190" pos:column="19">(<pos:position pos:line="190" pos:column="20"/></operator><operator pos:line="190" pos:column="20">(<pos:position pos:line="190" pos:column="21"/></operator><literal type="number" pos:line="190" pos:column="21">1<pos:position pos:line="190" pos:column="22"/></literal> <operator pos:line="190" pos:column="23">&lt;&lt;<pos:position pos:line="190" pos:column="31"/></operator> <name pos:line="190" pos:column="26">w<pos:position pos:line="190" pos:column="27"/></name><operator pos:line="190" pos:column="27">)<pos:position pos:line="190" pos:column="28"/></operator> <operator pos:line="190" pos:column="29">-<pos:position pos:line="190" pos:column="30"/></operator> <literal type="number" pos:line="190" pos:column="31">1<pos:position pos:line="190" pos:column="32"/></literal><operator pos:line="190" pos:column="32">)<pos:position pos:line="190" pos:column="33"/></operator><operator pos:line="190" pos:column="33">)<pos:position pos:line="190" pos:column="34"/></operator> <operator pos:line="190" pos:column="35">!=<pos:position pos:line="190" pos:column="37"/></operator> <name><name pos:line="190" pos:column="38">x<pos:position pos:line="190" pos:column="39"/></name><index pos:line="190" pos:column="39">[<expr><name pos:line="190" pos:column="40">h<pos:position pos:line="190" pos:column="41"/></name></expr>]<pos:position pos:line="190" pos:column="42"/></index></name></expr>)<pos:position pos:line="190" pos:column="43"/></condition>
      <block pos:line="191" pos:column="7">{
        <expr_stmt><expr><name pos:line="192" pos:column="9">h<pos:position pos:line="192" pos:column="10"/></name><operator pos:line="192" pos:column="10">--<pos:position pos:line="192" pos:column="12"/></operator></expr>;<pos:position pos:line="192" pos:column="13"/></expr_stmt>                    <comment type="block" pos:line="192" pos:column="33">/* don't need to update q */</comment>
        <expr_stmt><expr><name pos:line="193" pos:column="9">w<pos:position pos:line="193" pos:column="10"/></name> <operator pos:line="193" pos:column="11">-=<pos:position pos:line="193" pos:column="13"/></operator> <name pos:line="193" pos:column="14">l<pos:position pos:line="193" pos:column="15"/></name></expr>;<pos:position pos:line="193" pos:column="16"/></expr_stmt>
      }<pos:position pos:line="194" pos:column="8"/></block></while>
    }<pos:position pos:line="195" pos:column="6"/></block></while>
  }<pos:position pos:line="196" pos:column="4"/></block></for>


  <comment type="block" pos:line="199" pos:column="3">/* Return Z_BUF_ERROR if we were given an incomplete table */</comment>
  <return pos:line="200" pos:column="3">return <expr><ternary><condition><expr><name pos:line="200" pos:column="10">y<pos:position pos:line="200" pos:column="11"/></name> <operator pos:line="200" pos:column="12">!=<pos:position pos:line="200" pos:column="14"/></operator> <literal type="number" pos:line="200" pos:column="15">0<pos:position pos:line="200" pos:column="16"/></literal> <operator pos:line="200" pos:column="17">&amp;&amp;<pos:position pos:line="200" pos:column="27"/></operator> <name pos:line="200" pos:column="20">g<pos:position pos:line="200" pos:column="21"/></name> <operator pos:line="200" pos:column="22">!=<pos:position pos:line="200" pos:column="24"/></operator> <literal type="number" pos:line="200" pos:column="25">1<pos:position pos:line="200" pos:column="26"/></literal></expr> ?<pos:position pos:line="200" pos:column="28"/></condition><then pos:line="200" pos:column="28"> <expr><name pos:line="200" pos:column="29">Z_BUF_ERROR<pos:position pos:line="200" pos:column="40"/></name></expr> <pos:position pos:line="200" pos:column="41"/></then><else pos:line="200" pos:column="41">: <expr><name pos:line="200" pos:column="43">Z_OK<pos:position pos:line="200" pos:column="47"/></name></expr></else></ternary></expr>;<pos:position pos:line="200" pos:column="48"/></return>
}<pos:position pos:line="201" pos:column="2"/></block></unit>
