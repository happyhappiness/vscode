<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_461_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">do_chmod<pos:position pos:line="1" pos:column="13"/></name><parameter_list pos:line="1" pos:column="13">(<parameter><decl><type><specifier pos:line="1" pos:column="14">const<pos:position pos:line="1" pos:column="19"/></specifier> <name pos:line="1" pos:column="20">char<pos:position pos:line="1" pos:column="24"/></name> <modifier pos:line="1" pos:column="25">*<pos:position pos:line="1" pos:column="26"/></modifier></type><name pos:line="1" pos:column="26">path<pos:position pos:line="1" pos:column="30"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="32">mode_t<pos:position pos:line="1" pos:column="38"/></name></type> <name pos:line="1" pos:column="39">mode<pos:position pos:line="1" pos:column="43"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="44"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">code<pos:position pos:line="3" pos:column="17"/></name></decl>;<pos:position pos:line="3" pos:column="18"/></decl_stmt>
	<if pos:line="4" pos:column="9">if <condition pos:line="4" pos:column="12">(<expr><name pos:line="4" pos:column="13">dry_run<pos:position pos:line="4" pos:column="20"/></name></expr>)<pos:position pos:line="4" pos:column="21"/></condition><then pos:line="4" pos:column="21"> <block type="pseudo"><return pos:line="4" pos:column="22">return <expr><literal type="number" pos:line="4" pos:column="29">0<pos:position pos:line="4" pos:column="30"/></literal></expr>;<pos:position pos:line="4" pos:column="31"/></return></block></then></if>
	<expr_stmt><expr><name pos:line="5" pos:column="9">RETURN_ERROR_IF_RO_OR_LO<pos:position pos:line="5" pos:column="33"/></name></expr>;<pos:position pos:line="5" pos:column="34"/></expr_stmt>
<cpp:ifdef pos:line="6" pos:column="1">#<cpp:directive pos:line="6" pos:column="2">ifdef<pos:position pos:line="6" pos:column="7"/></cpp:directive> <name pos:line="6" pos:column="8">HAVE_LCHMOD<pos:position pos:line="6" pos:column="19"/></name></cpp:ifdef>
	<expr_stmt><expr><name pos:line="7" pos:column="9">code<pos:position pos:line="7" pos:column="13"/></name> <operator pos:line="7" pos:column="14">=<pos:position pos:line="7" pos:column="15"/></operator> <call><name pos:line="7" pos:column="16">lchmod<pos:position pos:line="7" pos:column="22"/></name><argument_list pos:line="7" pos:column="22">(<argument><expr><name pos:line="7" pos:column="23">path<pos:position pos:line="7" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="29">mode<pos:position pos:line="7" pos:column="33"/></name> <operator pos:line="7" pos:column="34">&amp;<pos:position pos:line="7" pos:column="39"/></operator> <name pos:line="7" pos:column="36">CHMOD_BITS<pos:position pos:line="7" pos:column="46"/></name></expr></argument>)<pos:position pos:line="7" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="48"/></expr_stmt>
<cpp:else pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">else<pos:position pos:line="8" pos:column="6"/></cpp:directive></cpp:else>
	<if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><call><name pos:line="9" pos:column="13">S_ISLNK<pos:position pos:line="9" pos:column="20"/></name><argument_list pos:line="9" pos:column="20">(<argument><expr><name pos:line="9" pos:column="21">mode<pos:position pos:line="9" pos:column="25"/></name></expr></argument>)<pos:position pos:line="9" pos:column="26"/></argument_list></call></expr>)<pos:position pos:line="9" pos:column="27"/></condition><then pos:line="9" pos:column="27"> <block pos:line="9" pos:column="28">{
<cpp:if pos:line="10" pos:column="1"># <cpp:directive pos:line="10" pos:column="3">if<pos:position pos:line="10" pos:column="5"/></cpp:directive> <expr><name pos:line="10" pos:column="6">defined<pos:position pos:line="10" pos:column="13"/></name> <name pos:line="10" pos:column="14">HAVE_SETATTRLIST<pos:position pos:line="10" pos:column="30"/></name></expr></cpp:if>
		<decl_stmt><decl><type><name><name pos:line="11" pos:column="17">struct<pos:position pos:line="11" pos:column="23"/></name> <name pos:line="11" pos:column="24">attrlist<pos:position pos:line="11" pos:column="32"/></name></name></type> <name pos:line="11" pos:column="33">attrList<pos:position pos:line="11" pos:column="41"/></name></decl>;<pos:position pos:line="11" pos:column="42"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="12" pos:column="17">uint32_t<pos:position pos:line="12" pos:column="25"/></name></type> <name pos:line="12" pos:column="26">m<pos:position pos:line="12" pos:column="27"/></name> <init pos:line="12" pos:column="28">= <expr><name pos:line="12" pos:column="30">mode<pos:position pos:line="12" pos:column="34"/></name> <operator pos:line="12" pos:column="35">&amp;<pos:position pos:line="12" pos:column="40"/></operator> <name pos:line="12" pos:column="37">CHMOD_BITS<pos:position pos:line="12" pos:column="47"/></name></expr></init></decl>;<pos:position pos:line="12" pos:column="48"/></decl_stmt> <comment type="block" pos:line="12" pos:column="49">/* manpage is wrong: not mode_t! */</comment>

		<expr_stmt><expr><call><name pos:line="14" pos:column="17">memset<pos:position pos:line="14" pos:column="23"/></name><argument_list pos:line="14" pos:column="23">(<argument><expr><operator pos:line="14" pos:column="24">&amp;<pos:position pos:line="14" pos:column="29"/></operator><name pos:line="14" pos:column="25">attrList<pos:position pos:line="14" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="14" pos:column="35">0<pos:position pos:line="14" pos:column="36"/></literal></expr></argument>, <argument><expr><sizeof pos:line="14" pos:column="38">sizeof <name pos:line="14" pos:column="45">attrList<pos:position pos:line="14" pos:column="53"/></name></sizeof></expr></argument>)<pos:position pos:line="14" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="55"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="15" pos:column="17">attrList<pos:position pos:line="15" pos:column="25"/></name><operator pos:line="15" pos:column="25">.<pos:position pos:line="15" pos:column="26"/></operator><name pos:line="15" pos:column="26">bitmapcount<pos:position pos:line="15" pos:column="37"/></name></name> <operator pos:line="15" pos:column="38">=<pos:position pos:line="15" pos:column="39"/></operator> <name pos:line="15" pos:column="40">ATTR_BIT_MAP_COUNT<pos:position pos:line="15" pos:column="58"/></name></expr>;<pos:position pos:line="15" pos:column="59"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="16" pos:column="17">attrList<pos:position pos:line="16" pos:column="25"/></name><operator pos:line="16" pos:column="25">.<pos:position pos:line="16" pos:column="26"/></operator><name pos:line="16" pos:column="26">commonattr<pos:position pos:line="16" pos:column="36"/></name></name> <operator pos:line="16" pos:column="37">=<pos:position pos:line="16" pos:column="38"/></operator> <name pos:line="16" pos:column="39">ATTR_CMN_ACCESSMASK<pos:position pos:line="16" pos:column="58"/></name></expr>;<pos:position pos:line="16" pos:column="59"/></expr_stmt>
		<expr_stmt><expr><name pos:line="17" pos:column="17">code<pos:position pos:line="17" pos:column="21"/></name> <operator pos:line="17" pos:column="22">=<pos:position pos:line="17" pos:column="23"/></operator> <call><name pos:line="17" pos:column="24">setattrlist<pos:position pos:line="17" pos:column="35"/></name><argument_list pos:line="17" pos:column="35">(<argument><expr><name pos:line="17" pos:column="36">path<pos:position pos:line="17" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="17" pos:column="42">&amp;<pos:position pos:line="17" pos:column="47"/></operator><name pos:line="17" pos:column="43">attrList<pos:position pos:line="17" pos:column="51"/></name></expr></argument>, <argument><expr><operator pos:line="17" pos:column="53">&amp;<pos:position pos:line="17" pos:column="58"/></operator><name pos:line="17" pos:column="54">m<pos:position pos:line="17" pos:column="55"/></name></expr></argument>, <argument><expr><sizeof pos:line="17" pos:column="57">sizeof <name pos:line="17" pos:column="64">m<pos:position pos:line="17" pos:column="65"/></name></sizeof></expr></argument>, <argument><expr><name pos:line="17" pos:column="67">FSOPT_NOFOLLOW<pos:position pos:line="17" pos:column="81"/></name></expr></argument>)<pos:position pos:line="17" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="83"/></expr_stmt>
<cpp:else pos:line="18" pos:column="1"># <cpp:directive pos:line="18" pos:column="3">else<pos:position pos:line="18" pos:column="7"/></cpp:directive></cpp:else>
		<expr_stmt><expr><name pos:line="19" pos:column="17">code<pos:position pos:line="19" pos:column="21"/></name> <operator pos:line="19" pos:column="22">=<pos:position pos:line="19" pos:column="23"/></operator> <literal type="number" pos:line="19" pos:column="24">1<pos:position pos:line="19" pos:column="25"/></literal></expr>;<pos:position pos:line="19" pos:column="26"/></expr_stmt>
<cpp:endif pos:line="20" pos:column="1"># <cpp:directive pos:line="20" pos:column="3">endif<pos:position pos:line="20" pos:column="8"/></cpp:directive></cpp:endif>
	}<pos:position pos:line="21" pos:column="10"/></block></then> <else pos:line="21" pos:column="11">else
		<block type="pseudo"><expr_stmt><expr><name pos:line="22" pos:column="17">code<pos:position pos:line="22" pos:column="21"/></name> <operator pos:line="22" pos:column="22">=<pos:position pos:line="22" pos:column="23"/></operator> <call><name pos:line="22" pos:column="24">chmod<pos:position pos:line="22" pos:column="29"/></name><argument_list pos:line="22" pos:column="29">(<argument><expr><name pos:line="22" pos:column="30">path<pos:position pos:line="22" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="36">mode<pos:position pos:line="22" pos:column="40"/></name> <operator pos:line="22" pos:column="41">&amp;<pos:position pos:line="22" pos:column="46"/></operator> <name pos:line="22" pos:column="43">CHMOD_BITS<pos:position pos:line="22" pos:column="53"/></name></expr></argument>)<pos:position pos:line="22" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="55"/></expr_stmt></block></else></if> <comment type="block" pos:line="22" pos:column="56">/* DISCOURAGED FUNCTION */</comment>
<cpp:endif pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">endif<pos:position pos:line="23" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="23" pos:column="8">/* !HAVE_LCHMOD */</comment>
	<if pos:line="24" pos:column="9">if <condition pos:line="24" pos:column="12">(<expr><name pos:line="24" pos:column="13">code<pos:position pos:line="24" pos:column="17"/></name> <operator pos:line="24" pos:column="18">!=<pos:position pos:line="24" pos:column="20"/></operator> <literal type="number" pos:line="24" pos:column="21">0<pos:position pos:line="24" pos:column="22"/></literal> <operator pos:line="24" pos:column="23">&amp;&amp;<pos:position pos:line="24" pos:column="33"/></operator> <operator pos:line="24" pos:column="26">(<pos:position pos:line="24" pos:column="27"/></operator><name pos:line="24" pos:column="27">preserve_perms<pos:position pos:line="24" pos:column="41"/></name> <operator pos:line="24" pos:column="42">||<pos:position pos:line="24" pos:column="44"/></operator> <name pos:line="24" pos:column="45">preserve_executability<pos:position pos:line="24" pos:column="67"/></name><operator pos:line="24" pos:column="67">)<pos:position pos:line="24" pos:column="68"/></operator></expr>)<pos:position pos:line="24" pos:column="69"/></condition><then pos:line="24" pos:column="69">
		<block type="pseudo"><return pos:line="25" pos:column="17">return <expr><name pos:line="25" pos:column="24">code<pos:position pos:line="25" pos:column="28"/></name></expr>;<pos:position pos:line="25" pos:column="29"/></return></block></then></if>
	<return pos:line="26" pos:column="9">return <expr><literal type="number" pos:line="26" pos:column="16">0<pos:position pos:line="26" pos:column="17"/></literal></expr>;<pos:position pos:line="26" pos:column="18"/></return>
}<pos:position pos:line="27" pos:column="2"/></block></function></unit>
