<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_272_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">copy_xattrs<pos:position pos:line="1" pos:column="16"/></name><parameter_list pos:line="1" pos:column="16">(<parameter><decl><type><specifier pos:line="1" pos:column="17">const<pos:position pos:line="1" pos:column="22"/></specifier> <name pos:line="1" pos:column="23">char<pos:position pos:line="1" pos:column="27"/></name> <modifier pos:line="1" pos:column="28">*<pos:position pos:line="1" pos:column="29"/></modifier></type><name pos:line="1" pos:column="29">source<pos:position pos:line="1" pos:column="35"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="37">const<pos:position pos:line="1" pos:column="42"/></specifier> <name pos:line="1" pos:column="43">char<pos:position pos:line="1" pos:column="47"/></name> <modifier pos:line="1" pos:column="48">*<pos:position pos:line="1" pos:column="49"/></modifier></type><name pos:line="1" pos:column="49">dest<pos:position pos:line="1" pos:column="53"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="54"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">ssize_t<pos:position pos:line="3" pos:column="16"/></name></type> <name pos:line="3" pos:column="17">list_len<pos:position pos:line="3" pos:column="25"/></name></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="27">name_len<pos:position pos:line="3" pos:column="35"/></name></decl>;<pos:position pos:line="3" pos:column="36"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">size_t<pos:position pos:line="4" pos:column="15"/></name></type> <name pos:line="4" pos:column="16">datum_len<pos:position pos:line="4" pos:column="25"/></name></decl>;<pos:position pos:line="4" pos:column="26"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">char<pos:position pos:line="5" pos:column="13"/></name> <modifier pos:line="5" pos:column="14">*<pos:position pos:line="5" pos:column="15"/></modifier></type><name pos:line="5" pos:column="15">name<pos:position pos:line="5" pos:column="19"/></name></decl>, <modifier pos:line="5" pos:column="21">*<pos:position pos:line="5" pos:column="22"/></modifier><decl><type ref="prev"/><name pos:line="5" pos:column="22">ptr<pos:position pos:line="5" pos:column="25"/></name></decl>;<pos:position pos:line="5" pos:column="26"/></decl_stmt>
<cpp:ifdef pos:line="6" pos:column="1">#<cpp:directive pos:line="6" pos:column="2">ifdef<pos:position pos:line="6" pos:column="7"/></cpp:directive> <name pos:line="6" pos:column="8">HAVE_LINUX_XATTRS<pos:position pos:line="6" pos:column="25"/></name></cpp:ifdef>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">int<pos:position pos:line="7" pos:column="12"/></name></type> <name pos:line="7" pos:column="13">user_only<pos:position pos:line="7" pos:column="22"/></name> <init pos:line="7" pos:column="23">= <expr><ternary><condition><expr><name pos:line="7" pos:column="25">am_sender<pos:position pos:line="7" pos:column="34"/></name></expr> ?<pos:position pos:line="7" pos:column="36"/></condition><then pos:line="7" pos:column="36"> <expr><literal type="number" pos:line="7" pos:column="37">0<pos:position pos:line="7" pos:column="38"/></literal></expr> <pos:position pos:line="7" pos:column="39"/></then><else pos:line="7" pos:column="39">: <expr><name pos:line="7" pos:column="41">am_root<pos:position pos:line="7" pos:column="48"/></name> <operator pos:line="7" pos:column="49">&lt;=<pos:position pos:line="7" pos:column="54"/></operator> <literal type="number" pos:line="7" pos:column="52">0<pos:position pos:line="7" pos:column="53"/></literal></expr></else></ternary></expr></init></decl>;<pos:position pos:line="7" pos:column="54"/></decl_stmt>
<cpp:endif pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">endif<pos:position pos:line="8" pos:column="7"/></cpp:directive></cpp:endif>

	<comment type="block" pos:line="10" pos:column="9">/* This puts the name list into the "namebuf" buffer. */</comment>
	<if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><operator pos:line="11" pos:column="13">(<pos:position pos:line="11" pos:column="14"/></operator><name pos:line="11" pos:column="14">list_len<pos:position pos:line="11" pos:column="22"/></name> <operator pos:line="11" pos:column="23">=<pos:position pos:line="11" pos:column="24"/></operator> <call><name pos:line="11" pos:column="25">get_xattr_names<pos:position pos:line="11" pos:column="40"/></name><argument_list pos:line="11" pos:column="40">(<argument><expr><name pos:line="11" pos:column="41">source<pos:position pos:line="11" pos:column="47"/></name></expr></argument>)<pos:position pos:line="11" pos:column="48"/></argument_list></call><operator pos:line="11" pos:column="48">)<pos:position pos:line="11" pos:column="49"/></operator> <operator pos:line="11" pos:column="50">&lt;<pos:position pos:line="11" pos:column="54"/></operator> <literal type="number" pos:line="11" pos:column="52">0<pos:position pos:line="11" pos:column="53"/></literal></expr>)<pos:position pos:line="11" pos:column="54"/></condition><then pos:line="11" pos:column="54">
		<block type="pseudo"><return pos:line="12" pos:column="17">return <expr><operator pos:line="12" pos:column="24">-<pos:position pos:line="12" pos:column="25"/></operator><literal type="number" pos:line="12" pos:column="25">1<pos:position pos:line="12" pos:column="26"/></literal></expr>;<pos:position pos:line="12" pos:column="27"/></return></block></then></if>

	<for pos:line="14" pos:column="9">for <control pos:line="14" pos:column="13">(<init><expr><name pos:line="14" pos:column="14">name<pos:position pos:line="14" pos:column="18"/></name> <operator pos:line="14" pos:column="19">=<pos:position pos:line="14" pos:column="20"/></operator> <name pos:line="14" pos:column="21">namebuf<pos:position pos:line="14" pos:column="28"/></name></expr>;<pos:position pos:line="14" pos:column="29"/></init> <condition><expr><name pos:line="14" pos:column="30">list_len<pos:position pos:line="14" pos:column="38"/></name> <operator pos:line="14" pos:column="39">&gt;<pos:position pos:line="14" pos:column="43"/></operator> <literal type="number" pos:line="14" pos:column="41">0<pos:position pos:line="14" pos:column="42"/></literal></expr>;<pos:position pos:line="14" pos:column="43"/></condition> <incr><expr><name pos:line="14" pos:column="44">name<pos:position pos:line="14" pos:column="48"/></name> <operator pos:line="14" pos:column="49">+=<pos:position pos:line="14" pos:column="51"/></operator> <name pos:line="14" pos:column="52">name_len<pos:position pos:line="14" pos:column="60"/></name></expr></incr>)<pos:position pos:line="14" pos:column="61"/></control> <block pos:line="14" pos:column="62">{
		<expr_stmt><expr><name pos:line="15" pos:column="17">name_len<pos:position pos:line="15" pos:column="25"/></name> <operator pos:line="15" pos:column="26">=<pos:position pos:line="15" pos:column="27"/></operator> <call><name pos:line="15" pos:column="28">strlen<pos:position pos:line="15" pos:column="34"/></name><argument_list pos:line="15" pos:column="34">(<argument><expr><name pos:line="15" pos:column="35">name<pos:position pos:line="15" pos:column="39"/></name></expr></argument>)<pos:position pos:line="15" pos:column="40"/></argument_list></call> <operator pos:line="15" pos:column="41">+<pos:position pos:line="15" pos:column="42"/></operator> <literal type="number" pos:line="15" pos:column="43">1<pos:position pos:line="15" pos:column="44"/></literal></expr>;<pos:position pos:line="15" pos:column="45"/></expr_stmt>
		<expr_stmt><expr><name pos:line="16" pos:column="17">list_len<pos:position pos:line="16" pos:column="25"/></name> <operator pos:line="16" pos:column="26">-=<pos:position pos:line="16" pos:column="28"/></operator> <name pos:line="16" pos:column="29">name_len<pos:position pos:line="16" pos:column="37"/></name></expr>;<pos:position pos:line="16" pos:column="38"/></expr_stmt>

<cpp:ifdef pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">ifdef<pos:position pos:line="18" pos:column="7"/></cpp:directive> <name pos:line="18" pos:column="8">HAVE_LINUX_XATTRS<pos:position pos:line="18" pos:column="25"/></name></cpp:ifdef>
		<comment type="block" pos:line="19" pos:column="17">/* We always ignore the system namespace, and non-root
		 * ignores everything but the user namespace. */</comment>
		<if pos:line="21" pos:column="17">if <condition pos:line="21" pos:column="20">(<expr><ternary><condition><expr><name pos:line="21" pos:column="21">user_only<pos:position pos:line="21" pos:column="30"/></name></expr> ?<pos:position pos:line="21" pos:column="32"/></condition><then pos:line="21" pos:column="32"> <expr><operator pos:line="21" pos:column="33">!<pos:position pos:line="21" pos:column="34"/></operator><call><name pos:line="21" pos:column="34">HAS_PREFIX<pos:position pos:line="21" pos:column="44"/></name><argument_list pos:line="21" pos:column="44">(<argument><expr><name pos:line="21" pos:column="45">name<pos:position pos:line="21" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="51">USER_PREFIX<pos:position pos:line="21" pos:column="62"/></name></expr></argument>)<pos:position pos:line="21" pos:column="63"/></argument_list></call></expr>
			      <pos:position pos:line="22" pos:column="10"/></then><else pos:line="22" pos:column="31">: <expr><call><name pos:line="22" pos:column="33">HAS_PREFIX<pos:position pos:line="22" pos:column="43"/></name><argument_list pos:line="22" pos:column="43">(<argument><expr><name pos:line="22" pos:column="44">name<pos:position pos:line="22" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="50">SYSTEM_PREFIX<pos:position pos:line="22" pos:column="63"/></name></expr></argument>)<pos:position pos:line="22" pos:column="64"/></argument_list></call></expr></else></ternary></expr>)<pos:position pos:line="22" pos:column="65"/></condition><then pos:line="22" pos:column="65">
			<block type="pseudo"><continue pos:line="23" pos:column="25">continue;<pos:position pos:line="23" pos:column="34"/></continue></block></then></if>
<cpp:endif pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">endif<pos:position pos:line="24" pos:column="7"/></cpp:directive></cpp:endif>

		<expr_stmt><expr><name pos:line="26" pos:column="17">datum_len<pos:position pos:line="26" pos:column="26"/></name> <operator pos:line="26" pos:column="27">=<pos:position pos:line="26" pos:column="28"/></operator> <literal type="number" pos:line="26" pos:column="29">0<pos:position pos:line="26" pos:column="30"/></literal></expr>;<pos:position pos:line="26" pos:column="31"/></expr_stmt>
		<if pos:line="27" pos:column="17">if <condition pos:line="27" pos:column="20">(<expr><operator pos:line="27" pos:column="21">!<pos:position pos:line="27" pos:column="22"/></operator><operator pos:line="27" pos:column="22">(<pos:position pos:line="27" pos:column="23"/></operator><name pos:line="27" pos:column="23">ptr<pos:position pos:line="27" pos:column="26"/></name> <operator pos:line="27" pos:column="27">=<pos:position pos:line="27" pos:column="28"/></operator> <call><name pos:line="27" pos:column="29">get_xattr_data<pos:position pos:line="27" pos:column="43"/></name><argument_list pos:line="27" pos:column="43">(<argument><expr><name pos:line="27" pos:column="44">source<pos:position pos:line="27" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="52">name<pos:position pos:line="27" pos:column="56"/></name></expr></argument>, <argument><expr><operator pos:line="27" pos:column="58">&amp;<pos:position pos:line="27" pos:column="63"/></operator><name pos:line="27" pos:column="59">datum_len<pos:position pos:line="27" pos:column="68"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="27" pos:column="70">0<pos:position pos:line="27" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="72"/></argument_list></call><operator pos:line="27" pos:column="72">)<pos:position pos:line="27" pos:column="73"/></operator></expr>)<pos:position pos:line="27" pos:column="74"/></condition><then pos:line="27" pos:column="74">
			<block type="pseudo"><return pos:line="28" pos:column="25">return <expr><operator pos:line="28" pos:column="32">-<pos:position pos:line="28" pos:column="33"/></operator><literal type="number" pos:line="28" pos:column="33">1<pos:position pos:line="28" pos:column="34"/></literal></expr>;<pos:position pos:line="28" pos:column="35"/></return></block></then></if>
		<if pos:line="29" pos:column="17">if <condition pos:line="29" pos:column="20">(<expr><call><name pos:line="29" pos:column="21">sys_lsetxattr<pos:position pos:line="29" pos:column="34"/></name><argument_list pos:line="29" pos:column="34">(<argument><expr><name pos:line="29" pos:column="35">dest<pos:position pos:line="29" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="41">name<pos:position pos:line="29" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="47">ptr<pos:position pos:line="29" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="52">datum_len<pos:position pos:line="29" pos:column="61"/></name></expr></argument>)<pos:position pos:line="29" pos:column="62"/></argument_list></call> <operator pos:line="29" pos:column="63">&lt;<pos:position pos:line="29" pos:column="67"/></operator> <literal type="number" pos:line="29" pos:column="65">0<pos:position pos:line="29" pos:column="66"/></literal></expr>)<pos:position pos:line="29" pos:column="67"/></condition><then pos:line="29" pos:column="67"> <block pos:line="29" pos:column="68">{
			<decl_stmt><decl><type><name pos:line="30" pos:column="25">int<pos:position pos:line="30" pos:column="28"/></name></type> <name pos:line="30" pos:column="29">save_errno<pos:position pos:line="30" pos:column="39"/></name> <init pos:line="30" pos:column="40">= <expr><ternary><condition><expr><name pos:line="30" pos:column="42">errno<pos:position pos:line="30" pos:column="47"/></name></expr> ?<pos:position pos:line="30" pos:column="49"/></condition><then pos:line="30" pos:column="49"> <expr><name pos:line="30" pos:column="50">errno<pos:position pos:line="30" pos:column="55"/></name></expr> <pos:position pos:line="30" pos:column="56"/></then><else pos:line="30" pos:column="56">: <expr><name pos:line="30" pos:column="58">EINVAL<pos:position pos:line="30" pos:column="64"/></name></expr></else></ternary></expr></init></decl>;<pos:position pos:line="30" pos:column="65"/></decl_stmt>
			<expr_stmt><expr><call><name pos:line="31" pos:column="25">rsyserr<pos:position pos:line="31" pos:column="32"/></name><argument_list pos:line="31" pos:column="32">(<argument><expr><name pos:line="31" pos:column="33">FERROR_XFER<pos:position pos:line="31" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="46">errno<pos:position pos:line="31" pos:column="51"/></name></expr></argument>,
				<argument><expr><literal type="string" pos:line="32" pos:column="33">"copy_xattrs: lsetxattr(\"%s\",\"%s\") failed"<pos:position pos:line="32" pos:column="79"/></literal></expr></argument>,
				<argument><expr><call><name pos:line="33" pos:column="33">full_fname<pos:position pos:line="33" pos:column="43"/></name><argument_list pos:line="33" pos:column="43">(<argument><expr><name pos:line="33" pos:column="44">dest<pos:position pos:line="33" pos:column="48"/></name></expr></argument>)<pos:position pos:line="33" pos:column="49"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="33" pos:column="51">name<pos:position pos:line="33" pos:column="55"/></name></expr></argument>)<pos:position pos:line="33" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="57"/></expr_stmt>
			<expr_stmt><expr><name pos:line="34" pos:column="25">errno<pos:position pos:line="34" pos:column="30"/></name> <operator pos:line="34" pos:column="31">=<pos:position pos:line="34" pos:column="32"/></operator> <name pos:line="34" pos:column="33">save_errno<pos:position pos:line="34" pos:column="43"/></name></expr>;<pos:position pos:line="34" pos:column="44"/></expr_stmt>
			<return pos:line="35" pos:column="25">return <expr><operator pos:line="35" pos:column="32">-<pos:position pos:line="35" pos:column="33"/></operator><literal type="number" pos:line="35" pos:column="33">1<pos:position pos:line="35" pos:column="34"/></literal></expr>;<pos:position pos:line="35" pos:column="35"/></return>
		}<pos:position pos:line="36" pos:column="18"/></block></then></if>
		<expr_stmt><expr><call><name pos:line="37" pos:column="17">free<pos:position pos:line="37" pos:column="21"/></name><argument_list pos:line="37" pos:column="21">(<argument><expr><name pos:line="37" pos:column="22">ptr<pos:position pos:line="37" pos:column="25"/></name></expr></argument>)<pos:position pos:line="37" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="27"/></expr_stmt>
	}<pos:position pos:line="38" pos:column="10"/></block></for>

	<return pos:line="40" pos:column="9">return <expr><literal type="number" pos:line="40" pos:column="16">0<pos:position pos:line="40" pos:column="17"/></literal></expr>;<pos:position pos:line="40" pos:column="18"/></return>
}<pos:position pos:line="41" pos:column="2"/></block></function></unit>
