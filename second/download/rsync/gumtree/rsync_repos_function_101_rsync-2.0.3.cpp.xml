<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_101_rsync-2.0.3.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">char<pos:position pos:line="1" pos:column="5"/></name> <modifier pos:line="1" pos:column="6">*<pos:position pos:line="1" pos:column="7"/></modifier></type><name pos:line="1" pos:column="7">client_name<pos:position pos:line="1" pos:column="18"/></name><parameter_list pos:line="1" pos:column="18">(<parameter><decl><type><name pos:line="1" pos:column="19">int<pos:position pos:line="1" pos:column="22"/></name></type> <name pos:line="1" pos:column="23">fd<pos:position pos:line="1" pos:column="25"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="26"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">sockaddr<pos:position pos:line="3" pos:column="24"/></name></name></type> <name pos:line="3" pos:column="25">sa<pos:position pos:line="3" pos:column="27"/></name></decl>;<pos:position pos:line="3" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">sockaddr_in<pos:position pos:line="4" pos:column="27"/></name></name> <modifier pos:line="4" pos:column="28">*<pos:position pos:line="4" pos:column="29"/></modifier></type><name pos:line="4" pos:column="29">sockin<pos:position pos:line="4" pos:column="35"/></name> <init pos:line="4" pos:column="36">= <expr><operator pos:line="4" pos:column="38">(<pos:position pos:line="4" pos:column="39"/></operator>struct <name pos:line="4" pos:column="46">sockaddr_in<pos:position pos:line="4" pos:column="57"/></name> <operator pos:line="4" pos:column="58">*<pos:position pos:line="4" pos:column="59"/></operator><operator pos:line="4" pos:column="59">)<pos:position pos:line="4" pos:column="60"/></operator> <operator pos:line="4" pos:column="61">(<pos:position pos:line="4" pos:column="62"/></operator><operator pos:line="4" pos:column="62">&amp;<pos:position pos:line="4" pos:column="67"/></operator><name pos:line="4" pos:column="63">sa<pos:position pos:line="4" pos:column="65"/></name><operator pos:line="4" pos:column="65">)<pos:position pos:line="4" pos:column="66"/></operator></expr></init></decl>;<pos:position pos:line="4" pos:column="67"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type>     <name pos:line="5" pos:column="17">length<pos:position pos:line="5" pos:column="23"/></name> <init pos:line="5" pos:column="24">= <expr><sizeof pos:line="5" pos:column="26">sizeof<argument_list pos:line="5" pos:column="32">(<argument><expr><name pos:line="5" pos:column="33">sa<pos:position pos:line="5" pos:column="35"/></name></expr></argument>)<pos:position pos:line="5" pos:column="36"/></argument_list></sizeof></expr></init></decl>;<pos:position pos:line="5" pos:column="37"/></decl_stmt>
	<decl_stmt><decl><specifier pos:line="6" pos:column="9">static<pos:position pos:line="6" pos:column="15"/></specifier> <type><name pos:line="6" pos:column="16">char<pos:position pos:line="6" pos:column="20"/></name></type> <name><name pos:line="6" pos:column="21">name_buf<pos:position pos:line="6" pos:column="29"/></name><index pos:line="6" pos:column="29">[<expr><literal type="number" pos:line="6" pos:column="30">100<pos:position pos:line="6" pos:column="33"/></literal></expr>]<pos:position pos:line="6" pos:column="34"/></index></name></decl>;<pos:position pos:line="6" pos:column="35"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="7" pos:column="9">struct<pos:position pos:line="7" pos:column="15"/></name> <name pos:line="7" pos:column="16">hostent<pos:position pos:line="7" pos:column="23"/></name></name> <modifier pos:line="7" pos:column="24">*<pos:position pos:line="7" pos:column="25"/></modifier></type><name pos:line="7" pos:column="25">hp<pos:position pos:line="7" pos:column="27"/></name></decl>;<pos:position pos:line="7" pos:column="28"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="9" pos:column="9">strcpy<pos:position pos:line="9" pos:column="15"/></name><argument_list pos:line="9" pos:column="15">(<argument><expr><name pos:line="9" pos:column="16">name_buf<pos:position pos:line="9" pos:column="24"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="9" pos:column="25">"UNKNOWN"<pos:position pos:line="9" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="36"/></expr_stmt>

	<if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><call><name pos:line="11" pos:column="13">getpeername<pos:position pos:line="11" pos:column="24"/></name><argument_list pos:line="11" pos:column="24">(<argument><expr><name pos:line="11" pos:column="25">fd<pos:position pos:line="11" pos:column="27"/></name></expr></argument>, <argument><expr><operator pos:line="11" pos:column="29">&amp;<pos:position pos:line="11" pos:column="34"/></operator><name pos:line="11" pos:column="30">sa<pos:position pos:line="11" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="11" pos:column="34">&amp;<pos:position pos:line="11" pos:column="39"/></operator><name pos:line="11" pos:column="35">length<pos:position pos:line="11" pos:column="41"/></name></expr></argument>)<pos:position pos:line="11" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="43"/></condition><then pos:line="11" pos:column="43"> <block pos:line="11" pos:column="44">{
		<expr_stmt><expr><call><name pos:line="12" pos:column="17">exit<pos:position pos:line="12" pos:column="21"/></name><argument_list pos:line="12" pos:column="21">(<argument><expr><literal type="number" pos:line="12" pos:column="22">1<pos:position pos:line="12" pos:column="23"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="25"/></expr_stmt>
	}<pos:position pos:line="13" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="15" pos:column="9">/* Look up the remote host name. */</comment>
	<if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><operator pos:line="16" pos:column="13">(<pos:position pos:line="16" pos:column="14"/></operator><name pos:line="16" pos:column="14">hp<pos:position pos:line="16" pos:column="16"/></name> <operator pos:line="16" pos:column="17">=<pos:position pos:line="16" pos:column="18"/></operator> <call><name pos:line="16" pos:column="19">gethostbyaddr<pos:position pos:line="16" pos:column="32"/></name><argument_list pos:line="16" pos:column="32">(<argument><expr><operator pos:line="16" pos:column="33">(<pos:position pos:line="16" pos:column="34"/></operator><name pos:line="16" pos:column="34">char<pos:position pos:line="16" pos:column="38"/></name> <operator pos:line="16" pos:column="39">*<pos:position pos:line="16" pos:column="40"/></operator><operator pos:line="16" pos:column="40">)<pos:position pos:line="16" pos:column="41"/></operator> <operator pos:line="16" pos:column="42">&amp;<pos:position pos:line="16" pos:column="47"/></operator><name><name pos:line="16" pos:column="43">sockin<pos:position pos:line="16" pos:column="49"/></name><operator pos:line="16" pos:column="49">-&gt;<pos:position pos:line="16" pos:column="54"/></operator><name pos:line="16" pos:column="51">sin_addr<pos:position pos:line="16" pos:column="59"/></name></name></expr></argument>,
				<argument><expr><sizeof pos:line="17" pos:column="33">sizeof<argument_list pos:line="17" pos:column="39">(<argument><expr><name><name pos:line="17" pos:column="40">sockin<pos:position pos:line="17" pos:column="46"/></name><operator pos:line="17" pos:column="46">-&gt;<pos:position pos:line="17" pos:column="51"/></operator><name pos:line="17" pos:column="48">sin_addr<pos:position pos:line="17" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="17" pos:column="57"/></argument_list></sizeof></expr></argument>,
				<argument><expr><name pos:line="18" pos:column="33">AF_INET<pos:position pos:line="18" pos:column="40"/></name></expr></argument>)<pos:position pos:line="18" pos:column="41"/></argument_list></call><operator pos:line="18" pos:column="41">)<pos:position pos:line="18" pos:column="42"/></operator></expr>)<pos:position pos:line="18" pos:column="43"/></condition><then pos:line="18" pos:column="43"> <block pos:line="18" pos:column="44">{
		<expr_stmt><expr><call><name pos:line="19" pos:column="17">strlcpy<pos:position pos:line="19" pos:column="24"/></name><argument_list pos:line="19" pos:column="24">(<argument><expr><name pos:line="19" pos:column="25">name_buf<pos:position pos:line="19" pos:column="33"/></name></expr></argument>,<argument><expr><operator pos:line="19" pos:column="34">(<pos:position pos:line="19" pos:column="35"/></operator><name pos:line="19" pos:column="35">char<pos:position pos:line="19" pos:column="39"/></name> <operator pos:line="19" pos:column="40">*<pos:position pos:line="19" pos:column="41"/></operator><operator pos:line="19" pos:column="41">)<pos:position pos:line="19" pos:column="42"/></operator><name><name pos:line="19" pos:column="42">hp<pos:position pos:line="19" pos:column="44"/></name><operator pos:line="19" pos:column="44">-&gt;<pos:position pos:line="19" pos:column="49"/></operator><name pos:line="19" pos:column="46">h_name<pos:position pos:line="19" pos:column="52"/></name></name></expr></argument>,<argument><expr><sizeof pos:line="19" pos:column="53">sizeof<argument_list pos:line="19" pos:column="59">(<argument><expr><name pos:line="19" pos:column="60">name_buf<pos:position pos:line="19" pos:column="68"/></name></expr></argument>)<pos:position pos:line="19" pos:column="69"/></argument_list></sizeof> <operator pos:line="19" pos:column="70">-<pos:position pos:line="19" pos:column="71"/></operator> <literal type="number" pos:line="19" pos:column="72">1<pos:position pos:line="19" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="75"/></expr_stmt>
	}<pos:position pos:line="20" pos:column="10"/></block></then></if>

	<return pos:line="22" pos:column="9">return <expr><name pos:line="22" pos:column="16">name_buf<pos:position pos:line="22" pos:column="24"/></name></expr>;<pos:position pos:line="22" pos:column="25"/></return>
}<pos:position pos:line="23" pos:column="2"/></block></function></unit>
