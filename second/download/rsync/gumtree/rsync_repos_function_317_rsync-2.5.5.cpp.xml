<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_317_rsync-2.5.5.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">parse_arguments<pos:position pos:line="1" pos:column="20"/></name><parameter_list pos:line="1" pos:column="20">(<parameter><decl><type><name pos:line="1" pos:column="21">int<pos:position pos:line="1" pos:column="24"/></name> <modifier pos:line="1" pos:column="25">*<pos:position pos:line="1" pos:column="26"/></modifier></type><name pos:line="1" pos:column="26">argc<pos:position pos:line="1" pos:column="30"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="32">const<pos:position pos:line="1" pos:column="37"/></specifier> <name pos:line="1" pos:column="38">char<pos:position pos:line="1" pos:column="42"/></name> <modifier pos:line="1" pos:column="43">*<pos:position pos:line="1" pos:column="44"/></modifier><modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier><modifier pos:line="1" pos:column="45">*<pos:position pos:line="1" pos:column="46"/></modifier></type><name pos:line="1" pos:column="46">argv<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="52">int<pos:position pos:line="1" pos:column="55"/></name></type> <name pos:line="1" pos:column="56">frommain<pos:position pos:line="1" pos:column="64"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="65"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">opt<pos:position pos:line="3" pos:column="16"/></name></decl>;<pos:position pos:line="3" pos:column="17"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier></type><name pos:line="4" pos:column="15">ref<pos:position pos:line="4" pos:column="18"/></name> <init pos:line="4" pos:column="19">= <expr><call><name pos:line="4" pos:column="21">lp_refuse_options<pos:position pos:line="4" pos:column="38"/></name><argument_list pos:line="4" pos:column="38">(<argument><expr><name pos:line="4" pos:column="39">module_id<pos:position pos:line="4" pos:column="48"/></name></expr></argument>)<pos:position pos:line="4" pos:column="49"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="50"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="5" pos:column="9">poptContext<pos:position pos:line="5" pos:column="20"/></name></type> <name pos:line="5" pos:column="21">pc<pos:position pos:line="5" pos:column="23"/></name></decl>;<pos:position pos:line="5" pos:column="24"/></decl_stmt>

        <comment type="block" pos:line="7" pos:column="9">/* TODO: Call poptReadDefaultConfig; handle errors. */</comment>

        <comment type="block" pos:line="9" pos:column="9">/* The context leaks in case of an error, but if there's a
         * problem we always exit anyhow. */</comment>
        <expr_stmt><expr><name pos:line="11" pos:column="9">pc<pos:position pos:line="11" pos:column="11"/></name> <operator pos:line="11" pos:column="12">=<pos:position pos:line="11" pos:column="13"/></operator> <call><name pos:line="11" pos:column="14">poptGetContext<pos:position pos:line="11" pos:column="28"/></name><argument_list pos:line="11" pos:column="28">(<argument><expr><name pos:line="11" pos:column="29">RSYNC_NAME<pos:position pos:line="11" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="11" pos:column="41">*<pos:position pos:line="11" pos:column="42"/></operator><name pos:line="11" pos:column="42">argc<pos:position pos:line="11" pos:column="46"/></name></expr></argument>, <argument><expr><operator pos:line="11" pos:column="48">*<pos:position pos:line="11" pos:column="49"/></operator><name pos:line="11" pos:column="49">argv<pos:position pos:line="11" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="55">long_options<pos:position pos:line="11" pos:column="67"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="11" pos:column="69">0<pos:position pos:line="11" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="72"/></expr_stmt>

	<while pos:line="13" pos:column="9">while <condition pos:line="13" pos:column="15">(<expr><operator pos:line="13" pos:column="16">(<pos:position pos:line="13" pos:column="17"/></operator><name pos:line="13" pos:column="17">opt<pos:position pos:line="13" pos:column="20"/></name> <operator pos:line="13" pos:column="21">=<pos:position pos:line="13" pos:column="22"/></operator> <call><name pos:line="13" pos:column="23">poptGetNextOpt<pos:position pos:line="13" pos:column="37"/></name><argument_list pos:line="13" pos:column="37">(<argument><expr><name pos:line="13" pos:column="38">pc<pos:position pos:line="13" pos:column="40"/></name></expr></argument>)<pos:position pos:line="13" pos:column="41"/></argument_list></call><operator pos:line="13" pos:column="41">)<pos:position pos:line="13" pos:column="42"/></operator> <operator pos:line="13" pos:column="43">!=<pos:position pos:line="13" pos:column="45"/></operator> <operator pos:line="13" pos:column="46">-<pos:position pos:line="13" pos:column="47"/></operator><literal type="number" pos:line="13" pos:column="47">1<pos:position pos:line="13" pos:column="48"/></literal></expr>)<pos:position pos:line="13" pos:column="49"/></condition> <block pos:line="13" pos:column="50">{
		<if pos:line="14" pos:column="17">if <condition pos:line="14" pos:column="20">(<expr><name pos:line="14" pos:column="21">ref<pos:position pos:line="14" pos:column="24"/></name></expr>)<pos:position pos:line="14" pos:column="25"/></condition><then pos:line="14" pos:column="25"> <block pos:line="14" pos:column="26">{
			<if pos:line="15" pos:column="25">if <condition pos:line="15" pos:column="28">(<expr><call><name pos:line="15" pos:column="29">check_refuse_options<pos:position pos:line="15" pos:column="49"/></name><argument_list pos:line="15" pos:column="49">(<argument><expr><name pos:line="15" pos:column="50">ref<pos:position pos:line="15" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="55">opt<pos:position pos:line="15" pos:column="58"/></name></expr></argument>)<pos:position pos:line="15" pos:column="59"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="60"/></condition><then pos:line="15" pos:column="60"> <block type="pseudo"><return pos:line="15" pos:column="61">return <expr><literal type="number" pos:line="15" pos:column="68">0<pos:position pos:line="15" pos:column="69"/></literal></expr>;<pos:position pos:line="15" pos:column="70"/></return></block></then></if>
		}<pos:position pos:line="16" pos:column="18"/></block></then></if>

                <comment type="block" pos:line="18" pos:column="17">/* most options are handled automatically by popt;
                 * only special cases are returned and listed here. */</comment>

		<switch pos:line="21" pos:column="17">switch <condition pos:line="21" pos:column="24">(<expr><name pos:line="21" pos:column="25">opt<pos:position pos:line="21" pos:column="28"/></name></expr>)<pos:position pos:line="21" pos:column="29"/></condition> <block pos:line="21" pos:column="30">{
		<case pos:line="22" pos:column="17">case <expr><name pos:line="22" pos:column="22">OPT_VERSION<pos:position pos:line="22" pos:column="33"/></name></expr>:<pos:position pos:line="22" pos:column="34"/></case>
                        <expr_stmt><expr><call><name pos:line="23" pos:column="25">print_rsync_version<pos:position pos:line="23" pos:column="44"/></name><argument_list pos:line="23" pos:column="44">(<argument><expr><name pos:line="23" pos:column="45">FINFO<pos:position pos:line="23" pos:column="50"/></name></expr></argument>)<pos:position pos:line="23" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="52"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="24" pos:column="25">exit_cleanup<pos:position pos:line="24" pos:column="37"/></name><argument_list pos:line="24" pos:column="37">(<argument><expr><literal type="number" pos:line="24" pos:column="38">0<pos:position pos:line="24" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="41"/></expr_stmt>
			
		<case pos:line="26" pos:column="17">case <expr><name pos:line="26" pos:column="22">OPT_MODIFY_WINDOW<pos:position pos:line="26" pos:column="39"/></name></expr>:<pos:position pos:line="26" pos:column="40"/></case>
                        <comment type="block" pos:line="27" pos:column="25">/* The value has already been set by popt, but
                         * we need to remember that we're using a
                         * non-default setting. */</comment>
			<expr_stmt><expr><name pos:line="30" pos:column="25">modify_window_set<pos:position pos:line="30" pos:column="42"/></name> <operator pos:line="30" pos:column="43">=<pos:position pos:line="30" pos:column="44"/></operator> <literal type="number" pos:line="30" pos:column="45">1<pos:position pos:line="30" pos:column="46"/></literal></expr>;<pos:position pos:line="30" pos:column="47"/></expr_stmt>
			<break pos:line="31" pos:column="25">break;<pos:position pos:line="31" pos:column="31"/></break>
			
		<case pos:line="33" pos:column="17">case <expr><name pos:line="33" pos:column="22">OPT_DELETE_EXCLUDED<pos:position pos:line="33" pos:column="41"/></name></expr>:<pos:position pos:line="33" pos:column="42"/></case>
			<expr_stmt><expr><name pos:line="34" pos:column="25">delete_excluded<pos:position pos:line="34" pos:column="40"/></name> <operator pos:line="34" pos:column="41">=<pos:position pos:line="34" pos:column="42"/></operator> <literal type="number" pos:line="34" pos:column="43">1<pos:position pos:line="34" pos:column="44"/></literal></expr>;<pos:position pos:line="34" pos:column="45"/></expr_stmt>
			<expr_stmt><expr><name pos:line="35" pos:column="25">delete_mode<pos:position pos:line="35" pos:column="36"/></name> <operator pos:line="35" pos:column="37">=<pos:position pos:line="35" pos:column="38"/></operator> <literal type="number" pos:line="35" pos:column="39">1<pos:position pos:line="35" pos:column="40"/></literal></expr>;<pos:position pos:line="35" pos:column="41"/></expr_stmt>
			<break pos:line="36" pos:column="25">break;<pos:position pos:line="36" pos:column="31"/></break>

		<case pos:line="38" pos:column="17">case <expr><name pos:line="38" pos:column="22">OPT_EXCLUDE<pos:position pos:line="38" pos:column="33"/></name></expr>:<pos:position pos:line="38" pos:column="34"/></case>
			<expr_stmt><expr><call><name pos:line="39" pos:column="25">add_exclude<pos:position pos:line="39" pos:column="36"/></name><argument_list pos:line="39" pos:column="36">(<argument><expr><call><name pos:line="39" pos:column="37">poptGetOptArg<pos:position pos:line="39" pos:column="50"/></name><argument_list pos:line="39" pos:column="50">(<argument><expr><name pos:line="39" pos:column="51">pc<pos:position pos:line="39" pos:column="53"/></name></expr></argument>)<pos:position pos:line="39" pos:column="54"/></argument_list></call></expr></argument>, <argument><expr><literal type="number" pos:line="39" pos:column="56">0<pos:position pos:line="39" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="59"/></expr_stmt>
			<break pos:line="40" pos:column="25">break;<pos:position pos:line="40" pos:column="31"/></break>

		<case pos:line="42" pos:column="17">case <expr><name pos:line="42" pos:column="22">OPT_INCLUDE<pos:position pos:line="42" pos:column="33"/></name></expr>:<pos:position pos:line="42" pos:column="34"/></case>
			<expr_stmt><expr><call><name pos:line="43" pos:column="25">add_exclude<pos:position pos:line="43" pos:column="36"/></name><argument_list pos:line="43" pos:column="36">(<argument><expr><call><name pos:line="43" pos:column="37">poptGetOptArg<pos:position pos:line="43" pos:column="50"/></name><argument_list pos:line="43" pos:column="50">(<argument><expr><name pos:line="43" pos:column="51">pc<pos:position pos:line="43" pos:column="53"/></name></expr></argument>)<pos:position pos:line="43" pos:column="54"/></argument_list></call></expr></argument>, <argument><expr><literal type="number" pos:line="43" pos:column="56">1<pos:position pos:line="43" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="59"/></expr_stmt>
			<break pos:line="44" pos:column="25">break;<pos:position pos:line="44" pos:column="31"/></break>

		<case pos:line="46" pos:column="17">case <expr><name pos:line="46" pos:column="22">OPT_EXCLUDE_FROM<pos:position pos:line="46" pos:column="38"/></name></expr>:<pos:position pos:line="46" pos:column="39"/></case>
			<expr_stmt><expr><call><name pos:line="47" pos:column="25">add_exclude_file<pos:position pos:line="47" pos:column="41"/></name><argument_list pos:line="47" pos:column="41">(<argument><expr><call><name pos:line="47" pos:column="42">poptGetOptArg<pos:position pos:line="47" pos:column="55"/></name><argument_list pos:line="47" pos:column="55">(<argument><expr><name pos:line="47" pos:column="56">pc<pos:position pos:line="47" pos:column="58"/></name></expr></argument>)<pos:position pos:line="47" pos:column="59"/></argument_list></call></expr></argument>, <argument><expr><literal type="number" pos:line="47" pos:column="61">1<pos:position pos:line="47" pos:column="62"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="47" pos:column="64">0<pos:position pos:line="47" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="67"/></expr_stmt>
			<break pos:line="48" pos:column="25">break;<pos:position pos:line="48" pos:column="31"/></break>

		<case pos:line="50" pos:column="17">case <expr><name pos:line="50" pos:column="22">OPT_INCLUDE_FROM<pos:position pos:line="50" pos:column="38"/></name></expr>:<pos:position pos:line="50" pos:column="39"/></case>
			<expr_stmt><expr><call><name pos:line="51" pos:column="25">add_exclude_file<pos:position pos:line="51" pos:column="41"/></name><argument_list pos:line="51" pos:column="41">(<argument><expr><call><name pos:line="51" pos:column="42">poptGetOptArg<pos:position pos:line="51" pos:column="55"/></name><argument_list pos:line="51" pos:column="55">(<argument><expr><name pos:line="51" pos:column="56">pc<pos:position pos:line="51" pos:column="58"/></name></expr></argument>)<pos:position pos:line="51" pos:column="59"/></argument_list></call></expr></argument>, <argument><expr><literal type="number" pos:line="51" pos:column="61">1<pos:position pos:line="51" pos:column="62"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="51" pos:column="64">1<pos:position pos:line="51" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="51" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="67"/></expr_stmt>
			<break pos:line="52" pos:column="25">break;<pos:position pos:line="52" pos:column="31"/></break>

		<case pos:line="54" pos:column="17">case <expr><name pos:line="54" pos:column="22">OPT_WHOLE_FILE<pos:position pos:line="54" pos:column="36"/></name></expr>:<pos:position pos:line="54" pos:column="37"/></case>
			<expr_stmt><expr><name pos:line="55" pos:column="25">whole_file<pos:position pos:line="55" pos:column="35"/></name> <operator pos:line="55" pos:column="36">=<pos:position pos:line="55" pos:column="37"/></operator> <literal type="number" pos:line="55" pos:column="38">1<pos:position pos:line="55" pos:column="39"/></literal></expr>;<pos:position pos:line="55" pos:column="40"/></expr_stmt>
			<expr_stmt><expr><name pos:line="56" pos:column="25">no_whole_file<pos:position pos:line="56" pos:column="38"/></name> <operator pos:line="56" pos:column="39">=<pos:position pos:line="56" pos:column="40"/></operator> <literal type="number" pos:line="56" pos:column="41">0<pos:position pos:line="56" pos:column="42"/></literal></expr>;<pos:position pos:line="56" pos:column="43"/></expr_stmt>
			<break pos:line="57" pos:column="25">break;<pos:position pos:line="57" pos:column="31"/></break>

		<case pos:line="59" pos:column="17">case <expr><name pos:line="59" pos:column="22">OPT_NO_WHOLE_FILE<pos:position pos:line="59" pos:column="39"/></name></expr>:<pos:position pos:line="59" pos:column="40"/></case>
			<expr_stmt><expr><name pos:line="60" pos:column="25">no_whole_file<pos:position pos:line="60" pos:column="38"/></name> <operator pos:line="60" pos:column="39">=<pos:position pos:line="60" pos:column="40"/></operator> <literal type="number" pos:line="60" pos:column="41">1<pos:position pos:line="60" pos:column="42"/></literal></expr>;<pos:position pos:line="60" pos:column="43"/></expr_stmt>
			<expr_stmt><expr><name pos:line="61" pos:column="25">whole_file<pos:position pos:line="61" pos:column="35"/></name> <operator pos:line="61" pos:column="36">=<pos:position pos:line="61" pos:column="37"/></operator> <literal type="number" pos:line="61" pos:column="38">0<pos:position pos:line="61" pos:column="39"/></literal></expr>;<pos:position pos:line="61" pos:column="40"/></expr_stmt>
			<break pos:line="62" pos:column="25">break;<pos:position pos:line="62" pos:column="31"/></break>

		<case pos:line="64" pos:column="17">case <expr><name pos:line="64" pos:column="22">OPT_NO_BLOCKING_IO<pos:position pos:line="64" pos:column="40"/></name></expr>:<pos:position pos:line="64" pos:column="41"/></case>
			<expr_stmt><expr><name pos:line="65" pos:column="25">blocking_io<pos:position pos:line="65" pos:column="36"/></name> <operator pos:line="65" pos:column="37">=<pos:position pos:line="65" pos:column="38"/></operator> <literal type="number" pos:line="65" pos:column="39">0<pos:position pos:line="65" pos:column="40"/></literal></expr>;<pos:position pos:line="65" pos:column="41"/></expr_stmt>
			<break pos:line="66" pos:column="25">break;<pos:position pos:line="66" pos:column="31"/></break>

		<case pos:line="68" pos:column="17">case <expr><literal type="char" pos:line="68" pos:column="22">'h'<pos:position pos:line="68" pos:column="25"/></literal></expr>:<pos:position pos:line="68" pos:column="26"/></case>
			<expr_stmt><expr><call><name pos:line="69" pos:column="25">usage<pos:position pos:line="69" pos:column="30"/></name><argument_list pos:line="69" pos:column="30">(<argument><expr><name pos:line="69" pos:column="31">FINFO<pos:position pos:line="69" pos:column="36"/></name></expr></argument>)<pos:position pos:line="69" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="38"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="70" pos:column="25">exit_cleanup<pos:position pos:line="70" pos:column="37"/></name><argument_list pos:line="70" pos:column="37">(<argument><expr><literal type="number" pos:line="70" pos:column="38">0<pos:position pos:line="70" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="70" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="41"/></expr_stmt>

		<case pos:line="72" pos:column="17">case <expr><literal type="char" pos:line="72" pos:column="22">'H'<pos:position pos:line="72" pos:column="25"/></literal></expr>:<pos:position pos:line="72" pos:column="26"/></case>
<cpp:if pos:line="73" pos:column="1">#<cpp:directive pos:line="73" pos:column="2">if<pos:position pos:line="73" pos:column="4"/></cpp:directive> <expr><name pos:line="73" pos:column="5">SUPPORT_HARD_LINKS<pos:position pos:line="73" pos:column="23"/></name></expr></cpp:if>
			<expr_stmt><expr><name pos:line="74" pos:column="25">preserve_hard_links<pos:position pos:line="74" pos:column="44"/></name><operator pos:line="74" pos:column="44">=<pos:position pos:line="74" pos:column="45"/></operator><literal type="number" pos:line="74" pos:column="45">1<pos:position pos:line="74" pos:column="46"/></literal></expr>;<pos:position pos:line="74" pos:column="47"/></expr_stmt>
<cpp:else pos:line="75" pos:column="1">#<cpp:directive pos:line="75" pos:column="2">else<pos:position pos:line="75" pos:column="6"/></cpp:directive></cpp:else>
                        <comment type="block" pos:line="76" pos:column="25">/* FIXME: Don't say "server" if this is
                         * happening on the client. */</comment>
                        <comment type="block" pos:line="78" pos:column="25">/* FIXME: Why do we have the duplicated
                         * rprintf?  Everybody who gets this message
                         * ought to send it to the client and also to
                         * the logs. */</comment>
			<expr_stmt><expr><call><name pos:line="82" pos:column="25">snprintf<pos:position pos:line="82" pos:column="33"/></name><argument_list pos:line="82" pos:column="33">(<argument><expr><name pos:line="82" pos:column="34">err_buf<pos:position pos:line="82" pos:column="41"/></name></expr></argument>,<argument><expr><sizeof pos:line="82" pos:column="42">sizeof<argument_list pos:line="82" pos:column="48">(<argument><expr><name pos:line="82" pos:column="49">err_buf<pos:position pos:line="82" pos:column="56"/></name></expr></argument>)<pos:position pos:line="82" pos:column="57"/></argument_list></sizeof></expr></argument>,
                                 <argument><expr><literal type="string" pos:line="83" pos:column="34">"hard links are not supported on this %s\n"<pos:position pos:line="83" pos:column="77"/></literal></expr></argument>,
				 <argument><expr><ternary><condition><expr><name pos:line="84" pos:column="34">am_server<pos:position pos:line="84" pos:column="43"/></name></expr> ?<pos:position pos:line="84" pos:column="45"/></condition><then pos:line="84" pos:column="45"> <expr><literal type="string" pos:line="84" pos:column="46">"server"<pos:position pos:line="84" pos:column="54"/></literal></expr> <pos:position pos:line="84" pos:column="55"/></then><else pos:line="84" pos:column="55">: <expr><literal type="string" pos:line="84" pos:column="57">"client"<pos:position pos:line="84" pos:column="65"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="84" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="67"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="85" pos:column="25">rprintf<pos:position pos:line="85" pos:column="32"/></name><argument_list pos:line="85" pos:column="32">(<argument><expr><name pos:line="85" pos:column="33">FERROR<pos:position pos:line="85" pos:column="39"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="85" pos:column="40">"ERROR: hard links not supported on this platform\n"<pos:position pos:line="85" pos:column="92"/></literal></expr></argument>)<pos:position pos:line="85" pos:column="93"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="94"/></expr_stmt>
			<return pos:line="86" pos:column="25">return <expr><literal type="number" pos:line="86" pos:column="32">0<pos:position pos:line="86" pos:column="33"/></literal></expr>;<pos:position pos:line="86" pos:column="34"/></return>
<cpp:endif pos:line="87" pos:column="1">#<cpp:directive pos:line="87" pos:column="2">endif<pos:position pos:line="87" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="87" pos:column="8">/* SUPPORT_HARD_LINKS */</comment>
			<break pos:line="88" pos:column="25">break;<pos:position pos:line="88" pos:column="31"/></break>

		<case pos:line="90" pos:column="17">case <expr><literal type="char" pos:line="90" pos:column="22">'v'<pos:position pos:line="90" pos:column="25"/></literal></expr>:<pos:position pos:line="90" pos:column="26"/></case>
			<expr_stmt><expr><name pos:line="91" pos:column="25">verbose<pos:position pos:line="91" pos:column="32"/></name><operator pos:line="91" pos:column="32">++<pos:position pos:line="91" pos:column="34"/></operator></expr>;<pos:position pos:line="91" pos:column="35"/></expr_stmt>
			<break pos:line="92" pos:column="25">break;<pos:position pos:line="92" pos:column="31"/></break>

		<case pos:line="94" pos:column="17">case <expr><literal type="char" pos:line="94" pos:column="22">'q'<pos:position pos:line="94" pos:column="25"/></literal></expr>:<pos:position pos:line="94" pos:column="26"/></case>
			<if pos:line="95" pos:column="25">if <condition pos:line="95" pos:column="28">(<expr><name pos:line="95" pos:column="29">frommain<pos:position pos:line="95" pos:column="37"/></name></expr>)<pos:position pos:line="95" pos:column="38"/></condition><then pos:line="95" pos:column="38"> <block type="pseudo"><expr_stmt><expr><name pos:line="95" pos:column="39">quiet<pos:position pos:line="95" pos:column="44"/></name><operator pos:line="95" pos:column="44">++<pos:position pos:line="95" pos:column="46"/></operator></expr>;<pos:position pos:line="95" pos:column="47"/></expr_stmt></block></then></if>
			<break pos:line="96" pos:column="25">break;<pos:position pos:line="96" pos:column="31"/></break>

		<case pos:line="98" pos:column="17">case <expr><literal type="char" pos:line="98" pos:column="22">'a'<pos:position pos:line="98" pos:column="25"/></literal></expr>:<pos:position pos:line="98" pos:column="26"/></case>
			<expr_stmt><expr><name pos:line="99" pos:column="25">recurse<pos:position pos:line="99" pos:column="32"/></name><operator pos:line="99" pos:column="32">=<pos:position pos:line="99" pos:column="33"/></operator><literal type="number" pos:line="99" pos:column="33">1<pos:position pos:line="99" pos:column="34"/></literal></expr>;<pos:position pos:line="99" pos:column="35"/></expr_stmt>
<cpp:if pos:line="100" pos:column="1">#<cpp:directive pos:line="100" pos:column="2">if<pos:position pos:line="100" pos:column="4"/></cpp:directive> <expr><name pos:line="100" pos:column="5">SUPPORT_LINKS<pos:position pos:line="100" pos:column="18"/></name></expr></cpp:if>
			<expr_stmt><expr><name pos:line="101" pos:column="25">preserve_links<pos:position pos:line="101" pos:column="39"/></name><operator pos:line="101" pos:column="39">=<pos:position pos:line="101" pos:column="40"/></operator><literal type="number" pos:line="101" pos:column="40">1<pos:position pos:line="101" pos:column="41"/></literal></expr>;<pos:position pos:line="101" pos:column="42"/></expr_stmt>
<cpp:endif pos:line="102" pos:column="1">#<cpp:directive pos:line="102" pos:column="2">endif<pos:position pos:line="102" pos:column="7"/></cpp:directive></cpp:endif>
			<expr_stmt><expr><name pos:line="103" pos:column="25">preserve_perms<pos:position pos:line="103" pos:column="39"/></name><operator pos:line="103" pos:column="39">=<pos:position pos:line="103" pos:column="40"/></operator><literal type="number" pos:line="103" pos:column="40">1<pos:position pos:line="103" pos:column="41"/></literal></expr>;<pos:position pos:line="103" pos:column="42"/></expr_stmt>
			<expr_stmt><expr><name pos:line="104" pos:column="25">preserve_times<pos:position pos:line="104" pos:column="39"/></name><operator pos:line="104" pos:column="39">=<pos:position pos:line="104" pos:column="40"/></operator><literal type="number" pos:line="104" pos:column="40">1<pos:position pos:line="104" pos:column="41"/></literal></expr>;<pos:position pos:line="104" pos:column="42"/></expr_stmt>
			<expr_stmt><expr><name pos:line="105" pos:column="25">preserve_gid<pos:position pos:line="105" pos:column="37"/></name><operator pos:line="105" pos:column="37">=<pos:position pos:line="105" pos:column="38"/></operator><literal type="number" pos:line="105" pos:column="38">1<pos:position pos:line="105" pos:column="39"/></literal></expr>;<pos:position pos:line="105" pos:column="40"/></expr_stmt>
			<expr_stmt><expr><name pos:line="106" pos:column="25">preserve_uid<pos:position pos:line="106" pos:column="37"/></name><operator pos:line="106" pos:column="37">=<pos:position pos:line="106" pos:column="38"/></operator><literal type="number" pos:line="106" pos:column="38">1<pos:position pos:line="106" pos:column="39"/></literal></expr>;<pos:position pos:line="106" pos:column="40"/></expr_stmt>
			<expr_stmt><expr><name pos:line="107" pos:column="25">preserve_devices<pos:position pos:line="107" pos:column="41"/></name><operator pos:line="107" pos:column="41">=<pos:position pos:line="107" pos:column="42"/></operator><literal type="number" pos:line="107" pos:column="42">1<pos:position pos:line="107" pos:column="43"/></literal></expr>;<pos:position pos:line="107" pos:column="44"/></expr_stmt>
			<break pos:line="108" pos:column="25">break;<pos:position pos:line="108" pos:column="31"/></break>

		<case pos:line="110" pos:column="17">case <expr><name pos:line="110" pos:column="22">OPT_SENDER<pos:position pos:line="110" pos:column="32"/></name></expr>:<pos:position pos:line="110" pos:column="33"/></case>
			<if pos:line="111" pos:column="25">if <condition pos:line="111" pos:column="28">(<expr><operator pos:line="111" pos:column="29">!<pos:position pos:line="111" pos:column="30"/></operator><name pos:line="111" pos:column="30">am_server<pos:position pos:line="111" pos:column="39"/></name></expr>)<pos:position pos:line="111" pos:column="40"/></condition><then pos:line="111" pos:column="40"> <block pos:line="111" pos:column="41">{
				<expr_stmt><expr><call><name pos:line="112" pos:column="33">usage<pos:position pos:line="112" pos:column="38"/></name><argument_list pos:line="112" pos:column="38">(<argument><expr><name pos:line="112" pos:column="39">FERROR<pos:position pos:line="112" pos:column="45"/></name></expr></argument>)<pos:position pos:line="112" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="112" pos:column="47"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="113" pos:column="33">exit_cleanup<pos:position pos:line="113" pos:column="45"/></name><argument_list pos:line="113" pos:column="45">(<argument><expr><name pos:line="113" pos:column="46">RERR_SYNTAX<pos:position pos:line="113" pos:column="57"/></name></expr></argument>)<pos:position pos:line="113" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="113" pos:column="59"/></expr_stmt>
			}<pos:position pos:line="114" pos:column="26"/></block></then></if>
			<expr_stmt><expr><name pos:line="115" pos:column="25">am_sender<pos:position pos:line="115" pos:column="34"/></name> <operator pos:line="115" pos:column="35">=<pos:position pos:line="115" pos:column="36"/></operator> <literal type="number" pos:line="115" pos:column="37">1<pos:position pos:line="115" pos:column="38"/></literal></expr>;<pos:position pos:line="115" pos:column="39"/></expr_stmt>
			<break pos:line="116" pos:column="25">break;<pos:position pos:line="116" pos:column="31"/></break>

		<case pos:line="118" pos:column="17">case <expr><literal type="char" pos:line="118" pos:column="22">'P'<pos:position pos:line="118" pos:column="25"/></literal></expr>:<pos:position pos:line="118" pos:column="26"/></case>
			<expr_stmt><expr><name pos:line="119" pos:column="25">do_progress<pos:position pos:line="119" pos:column="36"/></name> <operator pos:line="119" pos:column="37">=<pos:position pos:line="119" pos:column="38"/></operator> <literal type="number" pos:line="119" pos:column="39">1<pos:position pos:line="119" pos:column="40"/></literal></expr>;<pos:position pos:line="119" pos:column="41"/></expr_stmt>
			<expr_stmt><expr><name pos:line="120" pos:column="25">keep_partial<pos:position pos:line="120" pos:column="37"/></name> <operator pos:line="120" pos:column="38">=<pos:position pos:line="120" pos:column="39"/></operator> <literal type="number" pos:line="120" pos:column="40">1<pos:position pos:line="120" pos:column="41"/></literal></expr>;<pos:position pos:line="120" pos:column="42"/></expr_stmt>
			<break pos:line="121" pos:column="25">break;<pos:position pos:line="121" pos:column="31"/></break>

		<case pos:line="123" pos:column="17">case <expr><name pos:line="123" pos:column="22">OPT_WRITE_BATCH<pos:position pos:line="123" pos:column="37"/></name></expr>:<pos:position pos:line="123" pos:column="38"/></case>
			<comment type="block" pos:line="124" pos:column="25">/* popt stores the filename in batch_prefix for us */</comment>
			<expr_stmt><expr><name pos:line="125" pos:column="25">write_batch<pos:position pos:line="125" pos:column="36"/></name> <operator pos:line="125" pos:column="37">=<pos:position pos:line="125" pos:column="38"/></operator> <literal type="number" pos:line="125" pos:column="39">1<pos:position pos:line="125" pos:column="40"/></literal></expr>;<pos:position pos:line="125" pos:column="41"/></expr_stmt>
			<break pos:line="126" pos:column="25">break;<pos:position pos:line="126" pos:column="31"/></break>

		<case pos:line="128" pos:column="17">case <expr><name pos:line="128" pos:column="22">OPT_READ_BATCH<pos:position pos:line="128" pos:column="36"/></name></expr>:<pos:position pos:line="128" pos:column="37"/></case>
			<comment type="block" pos:line="129" pos:column="25">/* popt stores the filename in batch_prefix for us */</comment>
			<expr_stmt><expr><name pos:line="130" pos:column="25">read_batch<pos:position pos:line="130" pos:column="35"/></name> <operator pos:line="130" pos:column="36">=<pos:position pos:line="130" pos:column="37"/></operator> <literal type="number" pos:line="130" pos:column="38">1<pos:position pos:line="130" pos:column="39"/></literal></expr>;<pos:position pos:line="130" pos:column="40"/></expr_stmt>
			<break pos:line="131" pos:column="25">break;<pos:position pos:line="131" pos:column="31"/></break>

		<default pos:line="133" pos:column="17">default:<pos:position pos:line="133" pos:column="25"/></default>
                        <comment type="block" pos:line="134" pos:column="25">/* FIXME: If --daemon is specified, then errors for later
                         * parameters seem to disappear. */</comment>
                        <expr_stmt><expr><call><name pos:line="136" pos:column="25">snprintf<pos:position pos:line="136" pos:column="33"/></name><argument_list pos:line="136" pos:column="33">(<argument><expr><name pos:line="136" pos:column="34">err_buf<pos:position pos:line="136" pos:column="41"/></name></expr></argument>, <argument><expr><sizeof pos:line="136" pos:column="43">sizeof<argument_list pos:line="136" pos:column="49">(<argument><expr><name pos:line="136" pos:column="50">err_buf<pos:position pos:line="136" pos:column="57"/></name></expr></argument>)<pos:position pos:line="136" pos:column="58"/></argument_list></sizeof></expr></argument>,
                                 <argument><expr><literal type="string" pos:line="137" pos:column="34">"%s%s: %s\n"<pos:position pos:line="137" pos:column="46"/></literal></expr></argument>,
                                 <argument><expr><ternary><condition><expr><name pos:line="138" pos:column="34">am_server<pos:position pos:line="138" pos:column="43"/></name></expr> ?<pos:position pos:line="138" pos:column="45"/></condition><then pos:line="138" pos:column="45"> <expr><literal type="string" pos:line="138" pos:column="46">"on remote machine: "<pos:position pos:line="138" pos:column="67"/></literal></expr> <pos:position pos:line="138" pos:column="68"/></then><else pos:line="138" pos:column="68">: <expr><literal type="string" pos:line="138" pos:column="70">""<pos:position pos:line="138" pos:column="72"/></literal></expr></else></ternary></expr></argument>,
                                 <argument><expr><call><name pos:line="139" pos:column="34">poptBadOption<pos:position pos:line="139" pos:column="47"/></name><argument_list pos:line="139" pos:column="47">(<argument><expr><name pos:line="139" pos:column="48">pc<pos:position pos:line="139" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="139" pos:column="52">POPT_BADOPTION_NOALIAS<pos:position pos:line="139" pos:column="74"/></name></expr></argument>)<pos:position pos:line="139" pos:column="75"/></argument_list></call></expr></argument>,
                                 <argument><expr><call><name pos:line="140" pos:column="34">poptStrerror<pos:position pos:line="140" pos:column="46"/></name><argument_list pos:line="140" pos:column="46">(<argument><expr><name pos:line="140" pos:column="47">opt<pos:position pos:line="140" pos:column="50"/></name></expr></argument>)<pos:position pos:line="140" pos:column="51"/></argument_list></call></expr></argument>)<pos:position pos:line="140" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="140" pos:column="53"/></expr_stmt>
                        <return pos:line="141" pos:column="25">return <expr><literal type="number" pos:line="141" pos:column="32">0<pos:position pos:line="141" pos:column="33"/></literal></expr>;<pos:position pos:line="141" pos:column="34"/></return>
		}<pos:position pos:line="142" pos:column="18"/></block></switch>
	}<pos:position pos:line="143" pos:column="10"/></block></while>

	<if pos:line="145" pos:column="9">if <condition pos:line="145" pos:column="12">(<expr><name pos:line="145" pos:column="13">write_batch<pos:position pos:line="145" pos:column="24"/></name> <operator pos:line="145" pos:column="25">&amp;&amp;<pos:position pos:line="145" pos:column="35"/></operator> <name pos:line="145" pos:column="28">read_batch<pos:position pos:line="145" pos:column="38"/></name></expr>)<pos:position pos:line="145" pos:column="39"/></condition><then pos:line="145" pos:column="39"> <block pos:line="145" pos:column="40">{
	    <expr_stmt><expr><call><name pos:line="146" pos:column="13">snprintf<pos:position pos:line="146" pos:column="21"/></name><argument_list pos:line="146" pos:column="21">(<argument><expr><name pos:line="146" pos:column="22">err_buf<pos:position pos:line="146" pos:column="29"/></name></expr></argument>,<argument><expr><sizeof pos:line="146" pos:column="30">sizeof<argument_list pos:line="146" pos:column="36">(<argument><expr><name pos:line="146" pos:column="37">err_buf<pos:position pos:line="146" pos:column="44"/></name></expr></argument>)<pos:position pos:line="146" pos:column="45"/></argument_list></sizeof></expr></argument>,
		<argument><expr><literal type="string" pos:line="147" pos:column="17">"write-batch and read-batch can not be used together\n"<pos:position pos:line="147" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="147" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="147" pos:column="74"/></expr_stmt>
	    <expr_stmt><expr><call><name pos:line="148" pos:column="13">rprintf<pos:position pos:line="148" pos:column="20"/></name><argument_list pos:line="148" pos:column="20">(<argument><expr><name pos:line="148" pos:column="21">FERROR<pos:position pos:line="148" pos:column="27"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="148" pos:column="28">"ERROR: write-batch and read-batch"<pos:position pos:line="148" pos:column="63"/></literal>
		<literal type="string" pos:line="149" pos:column="17">" can not be used together\n"<pos:position pos:line="149" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="149" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="149" pos:column="48"/></expr_stmt>
	    <return pos:line="150" pos:column="13">return <expr><literal type="number" pos:line="150" pos:column="20">0<pos:position pos:line="150" pos:column="21"/></literal></expr>;<pos:position pos:line="150" pos:column="22"/></return>
	}<pos:position pos:line="151" pos:column="10"/></block></then></if>

	<if pos:line="153" pos:column="9">if <condition pos:line="153" pos:column="12">(<expr><name pos:line="153" pos:column="13">do_compression<pos:position pos:line="153" pos:column="27"/></name> <operator pos:line="153" pos:column="28">&amp;&amp;<pos:position pos:line="153" pos:column="38"/></operator> <operator pos:line="153" pos:column="31">(<pos:position pos:line="153" pos:column="32"/></operator><name pos:line="153" pos:column="32">write_batch<pos:position pos:line="153" pos:column="43"/></name> <operator pos:line="153" pos:column="44">||<pos:position pos:line="153" pos:column="46"/></operator> <name pos:line="153" pos:column="47">read_batch<pos:position pos:line="153" pos:column="57"/></name><operator pos:line="153" pos:column="57">)<pos:position pos:line="153" pos:column="58"/></operator></expr>)<pos:position pos:line="153" pos:column="59"/></condition><then pos:line="153" pos:column="59"> <block pos:line="153" pos:column="60">{
	    <expr_stmt><expr><call><name pos:line="154" pos:column="13">snprintf<pos:position pos:line="154" pos:column="21"/></name><argument_list pos:line="154" pos:column="21">(<argument><expr><name pos:line="154" pos:column="22">err_buf<pos:position pos:line="154" pos:column="29"/></name></expr></argument>,<argument><expr><sizeof pos:line="154" pos:column="30">sizeof<argument_list pos:line="154" pos:column="36">(<argument><expr><name pos:line="154" pos:column="37">err_buf<pos:position pos:line="154" pos:column="44"/></name></expr></argument>)<pos:position pos:line="154" pos:column="45"/></argument_list></sizeof></expr></argument>,
		<argument><expr><literal type="string" pos:line="155" pos:column="17">"compress can not be used with write-batch or read-batch\n"<pos:position pos:line="155" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="155" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="155" pos:column="78"/></expr_stmt>
	    <expr_stmt><expr><call><name pos:line="156" pos:column="13">rprintf<pos:position pos:line="156" pos:column="20"/></name><argument_list pos:line="156" pos:column="20">(<argument><expr><name pos:line="156" pos:column="21">FERROR<pos:position pos:line="156" pos:column="27"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="156" pos:column="28">"ERROR: compress can not be used with"<pos:position pos:line="156" pos:column="66"/></literal>
		<literal type="string" pos:line="157" pos:column="17">"  write-batch or read-batch\n"<pos:position pos:line="157" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="157" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="157" pos:column="50"/></expr_stmt>
	    <return pos:line="158" pos:column="13">return <expr><literal type="number" pos:line="158" pos:column="20">0<pos:position pos:line="158" pos:column="21"/></literal></expr>;<pos:position pos:line="158" pos:column="22"/></return>
	}<pos:position pos:line="159" pos:column="10"/></block></then></if>

        <expr_stmt><expr><operator pos:line="161" pos:column="9">*<pos:position pos:line="161" pos:column="10"/></operator><name pos:line="161" pos:column="10">argv<pos:position pos:line="161" pos:column="14"/></name> <operator pos:line="161" pos:column="15">=<pos:position pos:line="161" pos:column="16"/></operator> <call><name pos:line="161" pos:column="17">poptGetArgs<pos:position pos:line="161" pos:column="28"/></name><argument_list pos:line="161" pos:column="28">(<argument><expr><name pos:line="161" pos:column="29">pc<pos:position pos:line="161" pos:column="31"/></name></expr></argument>)<pos:position pos:line="161" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="161" pos:column="33"/></expr_stmt>
        <if pos:line="162" pos:column="9">if <condition pos:line="162" pos:column="12">(<expr><operator pos:line="162" pos:column="13">*<pos:position pos:line="162" pos:column="14"/></operator><name pos:line="162" pos:column="14">argv<pos:position pos:line="162" pos:column="18"/></name></expr>)<pos:position pos:line="162" pos:column="19"/></condition><then pos:line="162" pos:column="19">
                <block type="pseudo"><expr_stmt><expr><operator pos:line="163" pos:column="17">*<pos:position pos:line="163" pos:column="18"/></operator><name pos:line="163" pos:column="18">argc<pos:position pos:line="163" pos:column="22"/></name> <operator pos:line="163" pos:column="23">=<pos:position pos:line="163" pos:column="24"/></operator> <call><name pos:line="163" pos:column="25">count_args<pos:position pos:line="163" pos:column="35"/></name><argument_list pos:line="163" pos:column="35">(<argument><expr><operator pos:line="163" pos:column="36">*<pos:position pos:line="163" pos:column="37"/></operator><name pos:line="163" pos:column="37">argv<pos:position pos:line="163" pos:column="41"/></name></expr></argument>)<pos:position pos:line="163" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="163" pos:column="43"/></expr_stmt></block></then>
        <else pos:line="164" pos:column="9">else
                <block type="pseudo"><expr_stmt><expr><operator pos:line="165" pos:column="17">*<pos:position pos:line="165" pos:column="18"/></operator><name pos:line="165" pos:column="18">argc<pos:position pos:line="165" pos:column="22"/></name> <operator pos:line="165" pos:column="23">=<pos:position pos:line="165" pos:column="24"/></operator> <literal type="number" pos:line="165" pos:column="25">0<pos:position pos:line="165" pos:column="26"/></literal></expr>;<pos:position pos:line="165" pos:column="27"/></expr_stmt></block></else></if>

	<return pos:line="167" pos:column="9">return <expr><literal type="number" pos:line="167" pos:column="16">1<pos:position pos:line="167" pos:column="17"/></literal></expr>;<pos:position pos:line="167" pos:column="18"/></return>
}<pos:position pos:line="168" pos:column="2"/></block></function></unit>
