<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_308_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">generate_and_send_sums<pos:position pos:line="1" pos:column="34"/></name><parameter_list pos:line="1" pos:column="34">(<parameter><decl><type><name pos:line="1" pos:column="35">int<pos:position pos:line="1" pos:column="38"/></name></type> <name pos:line="1" pos:column="39">fd<pos:position pos:line="1" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="43">OFF_T<pos:position pos:line="1" pos:column="48"/></name></type> <name pos:line="1" pos:column="49">len<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="54">int<pos:position pos:line="1" pos:column="57"/></name></type> <name pos:line="1" pos:column="58">f_out<pos:position pos:line="1" pos:column="63"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="65">int<pos:position pos:line="1" pos:column="68"/></name></type> <name pos:line="1" pos:column="69">f_copy<pos:position pos:line="1" pos:column="75"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="76"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int32<pos:position pos:line="3" pos:column="14"/></name></type> <name pos:line="3" pos:column="15">i<pos:position pos:line="3" pos:column="16"/></name></decl>;<pos:position pos:line="3" pos:column="17"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">map_struct<pos:position pos:line="4" pos:column="26"/></name></name> <modifier pos:line="4" pos:column="27">*<pos:position pos:line="4" pos:column="28"/></modifier></type><name pos:line="4" pos:column="28">mapbuf<pos:position pos:line="4" pos:column="34"/></name></decl>;<pos:position pos:line="4" pos:column="35"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">sum_struct<pos:position pos:line="5" pos:column="26"/></name></name></type> <name pos:line="5" pos:column="27">sum<pos:position pos:line="5" pos:column="30"/></name></decl>;<pos:position pos:line="5" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">OFF_T<pos:position pos:line="6" pos:column="14"/></name></type> <name pos:line="6" pos:column="15">offset<pos:position pos:line="6" pos:column="21"/></name> <init pos:line="6" pos:column="22">= <expr><literal type="number" pos:line="6" pos:column="24">0<pos:position pos:line="6" pos:column="25"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="26"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="8" pos:column="9">sum_sizes_sqroot<pos:position pos:line="8" pos:column="25"/></name><argument_list pos:line="8" pos:column="25">(<argument><expr><operator pos:line="8" pos:column="26">&amp;<pos:position pos:line="8" pos:column="31"/></operator><name pos:line="8" pos:column="27">sum<pos:position pos:line="8" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="32">len<pos:position pos:line="8" pos:column="35"/></name></expr></argument>)<pos:position pos:line="8" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="37"/></expr_stmt>
	<if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><name><name pos:line="9" pos:column="13">sum<pos:position pos:line="9" pos:column="16"/></name><operator pos:line="9" pos:column="16">.<pos:position pos:line="9" pos:column="17"/></operator><name pos:line="9" pos:column="17">count<pos:position pos:line="9" pos:column="22"/></name></name> <operator pos:line="9" pos:column="23">&lt;<pos:position pos:line="9" pos:column="27"/></operator> <literal type="number" pos:line="9" pos:column="25">0<pos:position pos:line="9" pos:column="26"/></literal></expr>)<pos:position pos:line="9" pos:column="27"/></condition><then pos:line="9" pos:column="27">
		<block type="pseudo"><return pos:line="10" pos:column="17">return <expr><operator pos:line="10" pos:column="24">-<pos:position pos:line="10" pos:column="25"/></operator><literal type="number" pos:line="10" pos:column="25">1<pos:position pos:line="10" pos:column="26"/></literal></expr>;<pos:position pos:line="10" pos:column="27"/></return></block></then></if>
	<expr_stmt><expr><call><name pos:line="11" pos:column="9">write_sum_head<pos:position pos:line="11" pos:column="23"/></name><argument_list pos:line="11" pos:column="23">(<argument><expr><name pos:line="11" pos:column="24">f_out<pos:position pos:line="11" pos:column="29"/></name></expr></argument>, <argument><expr><operator pos:line="11" pos:column="31">&amp;<pos:position pos:line="11" pos:column="36"/></operator><name pos:line="11" pos:column="32">sum<pos:position pos:line="11" pos:column="35"/></name></expr></argument>)<pos:position pos:line="11" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="37"/></expr_stmt>

	<if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><name pos:line="13" pos:column="13">append_mode<pos:position pos:line="13" pos:column="24"/></name> <operator pos:line="13" pos:column="25">&gt;<pos:position pos:line="13" pos:column="29"/></operator> <literal type="number" pos:line="13" pos:column="27">0<pos:position pos:line="13" pos:column="28"/></literal> <operator pos:line="13" pos:column="29">&amp;&amp;<pos:position pos:line="13" pos:column="39"/></operator> <name pos:line="13" pos:column="32">f_copy<pos:position pos:line="13" pos:column="38"/></name> <operator pos:line="13" pos:column="39">&lt;<pos:position pos:line="13" pos:column="43"/></operator> <literal type="number" pos:line="13" pos:column="41">0<pos:position pos:line="13" pos:column="42"/></literal></expr>)<pos:position pos:line="13" pos:column="43"/></condition><then pos:line="13" pos:column="43">
		<block type="pseudo"><return pos:line="14" pos:column="17">return <expr><literal type="number" pos:line="14" pos:column="24">0<pos:position pos:line="14" pos:column="25"/></literal></expr>;<pos:position pos:line="14" pos:column="26"/></return></block></then></if>

	<if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><name pos:line="16" pos:column="13">len<pos:position pos:line="16" pos:column="16"/></name> <operator pos:line="16" pos:column="17">&gt;<pos:position pos:line="16" pos:column="21"/></operator> <literal type="number" pos:line="16" pos:column="19">0<pos:position pos:line="16" pos:column="20"/></literal></expr>)<pos:position pos:line="16" pos:column="21"/></condition><then pos:line="16" pos:column="21">
		<block type="pseudo"><expr_stmt><expr><name pos:line="17" pos:column="17">mapbuf<pos:position pos:line="17" pos:column="23"/></name> <operator pos:line="17" pos:column="24">=<pos:position pos:line="17" pos:column="25"/></operator> <call><name pos:line="17" pos:column="26">map_file<pos:position pos:line="17" pos:column="34"/></name><argument_list pos:line="17" pos:column="34">(<argument><expr><name pos:line="17" pos:column="35">fd<pos:position pos:line="17" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="39">len<pos:position pos:line="17" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="44">MAX_MAP_SIZE<pos:position pos:line="17" pos:column="56"/></name></expr></argument>, <argument><expr><name><name pos:line="17" pos:column="58">sum<pos:position pos:line="17" pos:column="61"/></name><operator pos:line="17" pos:column="61">.<pos:position pos:line="17" pos:column="62"/></operator><name pos:line="17" pos:column="62">blength<pos:position pos:line="17" pos:column="69"/></name></name></expr></argument>)<pos:position pos:line="17" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="71"/></expr_stmt></block></then>
	<else pos:line="18" pos:column="9">else
		<block type="pseudo"><expr_stmt><expr><name pos:line="19" pos:column="17">mapbuf<pos:position pos:line="19" pos:column="23"/></name> <operator pos:line="19" pos:column="24">=<pos:position pos:line="19" pos:column="25"/></operator> <name pos:line="19" pos:column="26">NULL<pos:position pos:line="19" pos:column="30"/></name></expr>;<pos:position pos:line="19" pos:column="31"/></expr_stmt></block></else></if>

	<for pos:line="21" pos:column="9">for <control pos:line="21" pos:column="13">(<init><expr><name pos:line="21" pos:column="14">i<pos:position pos:line="21" pos:column="15"/></name> <operator pos:line="21" pos:column="16">=<pos:position pos:line="21" pos:column="17"/></operator> <literal type="number" pos:line="21" pos:column="18">0<pos:position pos:line="21" pos:column="19"/></literal></expr>;<pos:position pos:line="21" pos:column="20"/></init> <condition><expr><name pos:line="21" pos:column="21">i<pos:position pos:line="21" pos:column="22"/></name> <operator pos:line="21" pos:column="23">&lt;<pos:position pos:line="21" pos:column="27"/></operator> <name><name pos:line="21" pos:column="25">sum<pos:position pos:line="21" pos:column="28"/></name><operator pos:line="21" pos:column="28">.<pos:position pos:line="21" pos:column="29"/></operator><name pos:line="21" pos:column="29">count<pos:position pos:line="21" pos:column="34"/></name></name></expr>;<pos:position pos:line="21" pos:column="35"/></condition> <incr><expr><name pos:line="21" pos:column="36">i<pos:position pos:line="21" pos:column="37"/></name><operator pos:line="21" pos:column="37">++<pos:position pos:line="21" pos:column="39"/></operator></expr></incr>)<pos:position pos:line="21" pos:column="40"/></control> <block pos:line="21" pos:column="41">{
		<decl_stmt><decl><type><name pos:line="22" pos:column="17">int32<pos:position pos:line="22" pos:column="22"/></name></type> <name pos:line="22" pos:column="23">n1<pos:position pos:line="22" pos:column="25"/></name> <init pos:line="22" pos:column="26">= <expr><operator pos:line="22" pos:column="28">(<pos:position pos:line="22" pos:column="29"/></operator><name pos:line="22" pos:column="29">int32<pos:position pos:line="22" pos:column="34"/></name><operator pos:line="22" pos:column="34">)<pos:position pos:line="22" pos:column="35"/></operator><call><name pos:line="22" pos:column="35">MIN<pos:position pos:line="22" pos:column="38"/></name><argument_list pos:line="22" pos:column="38">(<argument><expr><name pos:line="22" pos:column="39">len<pos:position pos:line="22" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="22" pos:column="44">(<pos:position pos:line="22" pos:column="45"/></operator><name pos:line="22" pos:column="45">OFF_T<pos:position pos:line="22" pos:column="50"/></name><operator pos:line="22" pos:column="50">)<pos:position pos:line="22" pos:column="51"/></operator><name><name pos:line="22" pos:column="51">sum<pos:position pos:line="22" pos:column="54"/></name><operator pos:line="22" pos:column="54">.<pos:position pos:line="22" pos:column="55"/></operator><name pos:line="22" pos:column="55">blength<pos:position pos:line="22" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="22" pos:column="63"/></argument_list></call></expr></init></decl>;<pos:position pos:line="22" pos:column="64"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="23" pos:column="17">char<pos:position pos:line="23" pos:column="21"/></name> <modifier pos:line="23" pos:column="22">*<pos:position pos:line="23" pos:column="23"/></modifier></type><name pos:line="23" pos:column="23">map<pos:position pos:line="23" pos:column="26"/></name> <init pos:line="23" pos:column="27">= <expr><call><name pos:line="23" pos:column="29">map_ptr<pos:position pos:line="23" pos:column="36"/></name><argument_list pos:line="23" pos:column="36">(<argument><expr><name pos:line="23" pos:column="37">mapbuf<pos:position pos:line="23" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="45">offset<pos:position pos:line="23" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="53">n1<pos:position pos:line="23" pos:column="55"/></name></expr></argument>)<pos:position pos:line="23" pos:column="56"/></argument_list></call></expr></init></decl>;<pos:position pos:line="23" pos:column="57"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="24" pos:column="17">char<pos:position pos:line="24" pos:column="21"/></name></type> <name><name pos:line="24" pos:column="22">sum2<pos:position pos:line="24" pos:column="26"/></name><index pos:line="24" pos:column="26">[<expr><name pos:line="24" pos:column="27">SUM_LENGTH<pos:position pos:line="24" pos:column="37"/></name></expr>]<pos:position pos:line="24" pos:column="38"/></index></name></decl>;<pos:position pos:line="24" pos:column="39"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="25" pos:column="17">uint32<pos:position pos:line="25" pos:column="23"/></name></type> <name pos:line="25" pos:column="24">sum1<pos:position pos:line="25" pos:column="28"/></name></decl>;<pos:position pos:line="25" pos:column="29"/></decl_stmt>

		<expr_stmt><expr><name pos:line="27" pos:column="17">len<pos:position pos:line="27" pos:column="20"/></name> <operator pos:line="27" pos:column="21">-=<pos:position pos:line="27" pos:column="23"/></operator> <name pos:line="27" pos:column="24">n1<pos:position pos:line="27" pos:column="26"/></name></expr>;<pos:position pos:line="27" pos:column="27"/></expr_stmt>
		<expr_stmt><expr><name pos:line="28" pos:column="17">offset<pos:position pos:line="28" pos:column="23"/></name> <operator pos:line="28" pos:column="24">+=<pos:position pos:line="28" pos:column="26"/></operator> <name pos:line="28" pos:column="27">n1<pos:position pos:line="28" pos:column="29"/></name></expr>;<pos:position pos:line="28" pos:column="30"/></expr_stmt>

		<if pos:line="30" pos:column="17">if <condition pos:line="30" pos:column="20">(<expr><name pos:line="30" pos:column="21">f_copy<pos:position pos:line="30" pos:column="27"/></name> <operator pos:line="30" pos:column="28">&gt;=<pos:position pos:line="30" pos:column="33"/></operator> <literal type="number" pos:line="30" pos:column="31">0<pos:position pos:line="30" pos:column="32"/></literal></expr>)<pos:position pos:line="30" pos:column="33"/></condition><then pos:line="30" pos:column="33"> <block pos:line="30" pos:column="34">{
			<expr_stmt><expr><call><name pos:line="31" pos:column="25">full_write<pos:position pos:line="31" pos:column="35"/></name><argument_list pos:line="31" pos:column="35">(<argument><expr><name pos:line="31" pos:column="36">f_copy<pos:position pos:line="31" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="44">map<pos:position pos:line="31" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="49">n1<pos:position pos:line="31" pos:column="51"/></name></expr></argument>)<pos:position pos:line="31" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="53"/></expr_stmt>
			<if pos:line="32" pos:column="25">if <condition pos:line="32" pos:column="28">(<expr><name pos:line="32" pos:column="29">append_mode<pos:position pos:line="32" pos:column="40"/></name> <operator pos:line="32" pos:column="41">&gt;<pos:position pos:line="32" pos:column="45"/></operator> <literal type="number" pos:line="32" pos:column="43">0<pos:position pos:line="32" pos:column="44"/></literal></expr>)<pos:position pos:line="32" pos:column="45"/></condition><then pos:line="32" pos:column="45">
				<block type="pseudo"><continue pos:line="33" pos:column="33">continue;<pos:position pos:line="33" pos:column="42"/></continue></block></then></if>
		}<pos:position pos:line="34" pos:column="18"/></block></then></if>

		<expr_stmt><expr><name pos:line="36" pos:column="17">sum1<pos:position pos:line="36" pos:column="21"/></name> <operator pos:line="36" pos:column="22">=<pos:position pos:line="36" pos:column="23"/></operator> <call><name pos:line="36" pos:column="24">get_checksum1<pos:position pos:line="36" pos:column="37"/></name><argument_list pos:line="36" pos:column="37">(<argument><expr><name pos:line="36" pos:column="38">map<pos:position pos:line="36" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="43">n1<pos:position pos:line="36" pos:column="45"/></name></expr></argument>)<pos:position pos:line="36" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="47"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="37" pos:column="17">get_checksum2<pos:position pos:line="37" pos:column="30"/></name><argument_list pos:line="37" pos:column="30">(<argument><expr><name pos:line="37" pos:column="31">map<pos:position pos:line="37" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="36">n1<pos:position pos:line="37" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="40">sum2<pos:position pos:line="37" pos:column="44"/></name></expr></argument>)<pos:position pos:line="37" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="46"/></expr_stmt>

		<if pos:line="39" pos:column="17">if <condition pos:line="39" pos:column="20">(<expr><call><name pos:line="39" pos:column="21">DEBUG_GTE<pos:position pos:line="39" pos:column="30"/></name><argument_list pos:line="39" pos:column="30">(<argument><expr><name pos:line="39" pos:column="31">DELTASUM<pos:position pos:line="39" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="39" pos:column="41">3<pos:position pos:line="39" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="39" pos:column="44"/></condition><then pos:line="39" pos:column="44"> <block pos:line="39" pos:column="45">{
			<expr_stmt><expr><call><name pos:line="40" pos:column="25">rprintf<pos:position pos:line="40" pos:column="32"/></name><argument_list pos:line="40" pos:column="32">(<argument><expr><name pos:line="40" pos:column="33">FINFO<pos:position pos:line="40" pos:column="38"/></name></expr></argument>,
				<argument><expr><literal type="string" pos:line="41" pos:column="33">"chunk[%s] offset=%s len=%ld sum1=%08lx\n"<pos:position pos:line="41" pos:column="75"/></literal></expr></argument>,
				<argument><expr><call><name pos:line="42" pos:column="33">big_num<pos:position pos:line="42" pos:column="40"/></name><argument_list pos:line="42" pos:column="40">(<argument><expr><name pos:line="42" pos:column="41">i<pos:position pos:line="42" pos:column="42"/></name></expr></argument>)<pos:position pos:line="42" pos:column="43"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="42" pos:column="45">big_num<pos:position pos:line="42" pos:column="52"/></name><argument_list pos:line="42" pos:column="52">(<argument><expr><name pos:line="42" pos:column="53">offset<pos:position pos:line="42" pos:column="59"/></name> <operator pos:line="42" pos:column="60">-<pos:position pos:line="42" pos:column="61"/></operator> <name pos:line="42" pos:column="62">n1<pos:position pos:line="42" pos:column="64"/></name></expr></argument>)<pos:position pos:line="42" pos:column="65"/></argument_list></call></expr></argument>, <argument><expr><operator pos:line="42" pos:column="67">(<pos:position pos:line="42" pos:column="68"/></operator><name pos:line="42" pos:column="68">long<pos:position pos:line="42" pos:column="72"/></name><operator pos:line="42" pos:column="72">)<pos:position pos:line="42" pos:column="73"/></operator><name pos:line="42" pos:column="73">n1<pos:position pos:line="42" pos:column="75"/></name></expr></argument>,
				<argument><expr><operator pos:line="43" pos:column="33">(<pos:position pos:line="43" pos:column="34"/></operator><name pos:line="43" pos:column="34">unsigned<pos:position pos:line="43" pos:column="42"/></name> <name pos:line="43" pos:column="43">long<pos:position pos:line="43" pos:column="47"/></name><operator pos:line="43" pos:column="47">)<pos:position pos:line="43" pos:column="48"/></operator><name pos:line="43" pos:column="48">sum1<pos:position pos:line="43" pos:column="52"/></name></expr></argument>)<pos:position pos:line="43" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="54"/></expr_stmt>
		}<pos:position pos:line="44" pos:column="18"/></block></then></if>
		<expr_stmt><expr><call><name pos:line="45" pos:column="17">write_int<pos:position pos:line="45" pos:column="26"/></name><argument_list pos:line="45" pos:column="26">(<argument><expr><name pos:line="45" pos:column="27">f_out<pos:position pos:line="45" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="34">sum1<pos:position pos:line="45" pos:column="38"/></name></expr></argument>)<pos:position pos:line="45" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="40"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="46" pos:column="17">write_buf<pos:position pos:line="46" pos:column="26"/></name><argument_list pos:line="46" pos:column="26">(<argument><expr><name pos:line="46" pos:column="27">f_out<pos:position pos:line="46" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="34">sum2<pos:position pos:line="46" pos:column="38"/></name></expr></argument>, <argument><expr><name><name pos:line="46" pos:column="40">sum<pos:position pos:line="46" pos:column="43"/></name><operator pos:line="46" pos:column="43">.<pos:position pos:line="46" pos:column="44"/></operator><name pos:line="46" pos:column="44">s2length<pos:position pos:line="46" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="46" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="54"/></expr_stmt>
	}<pos:position pos:line="47" pos:column="10"/></block></for>

	<if pos:line="49" pos:column="9">if <condition pos:line="49" pos:column="12">(<expr><name pos:line="49" pos:column="13">mapbuf<pos:position pos:line="49" pos:column="19"/></name></expr>)<pos:position pos:line="49" pos:column="20"/></condition><then pos:line="49" pos:column="20">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="50" pos:column="17">unmap_file<pos:position pos:line="50" pos:column="27"/></name><argument_list pos:line="50" pos:column="27">(<argument><expr><name pos:line="50" pos:column="28">mapbuf<pos:position pos:line="50" pos:column="34"/></name></expr></argument>)<pos:position pos:line="50" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="36"/></expr_stmt></block></then></if>

	<return pos:line="52" pos:column="9">return <expr><literal type="number" pos:line="52" pos:column="16">0<pos:position pos:line="52" pos:column="17"/></literal></expr>;<pos:position pos:line="52" pos:column="18"/></return>
}<pos:position pos:line="53" pos:column="2"/></block></function></unit>
