<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_402_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">send_protected_args<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name pos:line="1" pos:column="26">int<pos:position pos:line="1" pos:column="29"/></name></type> <name pos:line="1" pos:column="30">fd<pos:position pos:line="1" pos:column="32"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="34">char<pos:position pos:line="1" pos:column="38"/></name> <modifier pos:line="1" pos:column="39">*<pos:position pos:line="1" pos:column="40"/></modifier></type><name><name pos:line="1" pos:column="40">args<pos:position pos:line="1" pos:column="44"/></name><index pos:line="1" pos:column="44">[]<pos:position pos:line="1" pos:column="46"/></index></name></decl></parameter>)<pos:position pos:line="1" pos:column="47"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">i<pos:position pos:line="3" pos:column="14"/></name></decl>;<pos:position pos:line="3" pos:column="15"/></decl_stmt>
<cpp:ifdef pos:line="4" pos:column="1">#<cpp:directive pos:line="4" pos:column="2">ifdef<pos:position pos:line="4" pos:column="7"/></cpp:directive> <name pos:line="4" pos:column="8">ICONV_OPTION<pos:position pos:line="4" pos:column="20"/></name></cpp:ifdef>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">convert<pos:position pos:line="5" pos:column="20"/></name> <init pos:line="5" pos:column="21">= <expr><name pos:line="5" pos:column="23">ic_send<pos:position pos:line="5" pos:column="30"/></name> <operator pos:line="5" pos:column="31">!=<pos:position pos:line="5" pos:column="33"/></operator> <operator pos:line="5" pos:column="34">(<pos:position pos:line="5" pos:column="35"/></operator><name pos:line="5" pos:column="35">iconv_t<pos:position pos:line="5" pos:column="42"/></name><operator pos:line="5" pos:column="42">)<pos:position pos:line="5" pos:column="43"/></operator><operator pos:line="5" pos:column="43">-<pos:position pos:line="5" pos:column="44"/></operator><literal type="number" pos:line="5" pos:column="44">1<pos:position pos:line="5" pos:column="45"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="46"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">xbuf<pos:position pos:line="6" pos:column="13"/></name></type> <name pos:line="6" pos:column="14">outbuf<pos:position pos:line="6" pos:column="20"/></name></decl>, <decl><type ref="prev"/><name pos:line="6" pos:column="22">inbuf<pos:position pos:line="6" pos:column="27"/></name></decl>;<pos:position pos:line="6" pos:column="28"/></decl_stmt>

	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><name pos:line="8" pos:column="13">convert<pos:position pos:line="8" pos:column="20"/></name></expr>)<pos:position pos:line="8" pos:column="21"/></condition><then pos:line="8" pos:column="21">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="9" pos:column="17">alloc_xbuf<pos:position pos:line="9" pos:column="27"/></name><argument_list pos:line="9" pos:column="27">(<argument><expr><operator pos:line="9" pos:column="28">&amp;<pos:position pos:line="9" pos:column="33"/></operator><name pos:line="9" pos:column="29">outbuf<pos:position pos:line="9" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="9" pos:column="37">1024<pos:position pos:line="9" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="43"/></expr_stmt></block></then></if>
<cpp:endif pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">endif<pos:position pos:line="10" pos:column="7"/></cpp:directive></cpp:endif>

	<for pos:line="12" pos:column="9">for <control pos:line="12" pos:column="13">(<init><expr><name pos:line="12" pos:column="14">i<pos:position pos:line="12" pos:column="15"/></name> <operator pos:line="12" pos:column="16">=<pos:position pos:line="12" pos:column="17"/></operator> <literal type="number" pos:line="12" pos:column="18">0<pos:position pos:line="12" pos:column="19"/></literal></expr>;<pos:position pos:line="12" pos:column="20"/></init> <condition><expr><name><name pos:line="12" pos:column="21">args<pos:position pos:line="12" pos:column="25"/></name><index pos:line="12" pos:column="25">[<expr><name pos:line="12" pos:column="26">i<pos:position pos:line="12" pos:column="27"/></name></expr>]<pos:position pos:line="12" pos:column="28"/></index></name></expr>;<pos:position pos:line="12" pos:column="29"/></condition> <incr><expr><name pos:line="12" pos:column="30">i<pos:position pos:line="12" pos:column="31"/></name><operator pos:line="12" pos:column="31">++<pos:position pos:line="12" pos:column="33"/></operator></expr></incr>)<pos:position pos:line="12" pos:column="34"/></control> <block pos:line="12" pos:column="35">{}<pos:position pos:line="12" pos:column="37"/></block></for> <comment type="block" pos:line="12" pos:column="38">/* find first NULL */</comment>
	<expr_stmt><expr><name><name pos:line="13" pos:column="9">args<pos:position pos:line="13" pos:column="13"/></name><index pos:line="13" pos:column="13">[<expr><name pos:line="13" pos:column="14">i<pos:position pos:line="13" pos:column="15"/></name></expr>]<pos:position pos:line="13" pos:column="16"/></index></name> <operator pos:line="13" pos:column="17">=<pos:position pos:line="13" pos:column="18"/></operator> <literal type="string" pos:line="13" pos:column="19">"rsync"<pos:position pos:line="13" pos:column="26"/></literal></expr>;<pos:position pos:line="13" pos:column="27"/></expr_stmt> <comment type="block" pos:line="13" pos:column="28">/* set a new arg0 */</comment>
	<if pos:line="14" pos:column="9">if <condition pos:line="14" pos:column="12">(<expr><call><name pos:line="14" pos:column="13">DEBUG_GTE<pos:position pos:line="14" pos:column="22"/></name><argument_list pos:line="14" pos:column="22">(<argument><expr><name pos:line="14" pos:column="23">CMD<pos:position pos:line="14" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="14" pos:column="28">1<pos:position pos:line="14" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="30"/></argument_list></call></expr>)<pos:position pos:line="14" pos:column="31"/></condition><then pos:line="14" pos:column="31">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="15" pos:column="17">print_child_argv<pos:position pos:line="15" pos:column="33"/></name><argument_list pos:line="15" pos:column="33">(<argument><expr><literal type="string" pos:line="15" pos:column="34">"protected args:"<pos:position pos:line="15" pos:column="51"/></literal></expr></argument>, <argument><expr><name pos:line="15" pos:column="53">args<pos:position pos:line="15" pos:column="57"/></name> <operator pos:line="15" pos:column="58">+<pos:position pos:line="15" pos:column="59"/></operator> <name pos:line="15" pos:column="60">i<pos:position pos:line="15" pos:column="61"/></name> <operator pos:line="15" pos:column="62">+<pos:position pos:line="15" pos:column="63"/></operator> <literal type="number" pos:line="15" pos:column="64">1<pos:position pos:line="15" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="67"/></expr_stmt></block></then></if>
	<do pos:line="16" pos:column="9">do <block pos:line="16" pos:column="12">{
		<if pos:line="17" pos:column="17">if <condition pos:line="17" pos:column="20">(<expr><operator pos:line="17" pos:column="21">!<pos:position pos:line="17" pos:column="22"/></operator><name><name pos:line="17" pos:column="22">args<pos:position pos:line="17" pos:column="26"/></name><index pos:line="17" pos:column="26">[<expr><name pos:line="17" pos:column="27">i<pos:position pos:line="17" pos:column="28"/></name></expr>]<pos:position pos:line="17" pos:column="29"/></index><index pos:line="17" pos:column="29">[<expr><literal type="number" pos:line="17" pos:column="30">0<pos:position pos:line="17" pos:column="31"/></literal></expr>]<pos:position pos:line="17" pos:column="32"/></index></name></expr>)<pos:position pos:line="17" pos:column="33"/></condition><then pos:line="17" pos:column="33">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="18" pos:column="25">write_buf<pos:position pos:line="18" pos:column="34"/></name><argument_list pos:line="18" pos:column="34">(<argument><expr><name pos:line="18" pos:column="35">fd<pos:position pos:line="18" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="18" pos:column="39">"."<pos:position pos:line="18" pos:column="42"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="18" pos:column="44">2<pos:position pos:line="18" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="47"/></expr_stmt></block></then>
<cpp:ifdef pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">ifdef<pos:position pos:line="19" pos:column="7"/></cpp:directive> <name pos:line="19" pos:column="8">ICONV_OPTION<pos:position pos:line="19" pos:column="20"/></name></cpp:ifdef>
		<elseif pos:line="20" pos:column="17">else <if pos:line="20" pos:column="22">if <condition pos:line="20" pos:column="25">(<expr><name pos:line="20" pos:column="26">convert<pos:position pos:line="20" pos:column="33"/></name></expr>)<pos:position pos:line="20" pos:column="34"/></condition><then pos:line="20" pos:column="34"> <block pos:line="20" pos:column="35">{
			<expr_stmt><expr><call><name pos:line="21" pos:column="25">INIT_XBUF_STRLEN<pos:position pos:line="21" pos:column="41"/></name><argument_list pos:line="21" pos:column="41">(<argument><expr><name pos:line="21" pos:column="42">inbuf<pos:position pos:line="21" pos:column="47"/></name></expr></argument>, <argument><expr><name><name pos:line="21" pos:column="49">args<pos:position pos:line="21" pos:column="53"/></name><index pos:line="21" pos:column="53">[<expr><name pos:line="21" pos:column="54">i<pos:position pos:line="21" pos:column="55"/></name></expr>]<pos:position pos:line="21" pos:column="56"/></index></name></expr></argument>)<pos:position pos:line="21" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="58"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="22" pos:column="25">iconvbufs<pos:position pos:line="22" pos:column="34"/></name><argument_list pos:line="22" pos:column="34">(<argument><expr><name pos:line="22" pos:column="35">ic_send<pos:position pos:line="22" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="22" pos:column="44">&amp;<pos:position pos:line="22" pos:column="49"/></operator><name pos:line="22" pos:column="45">inbuf<pos:position pos:line="22" pos:column="50"/></name></expr></argument>, <argument><expr><operator pos:line="22" pos:column="52">&amp;<pos:position pos:line="22" pos:column="57"/></operator><name pos:line="22" pos:column="53">outbuf<pos:position pos:line="22" pos:column="59"/></name></expr></argument>,
				  <argument><expr><name pos:line="23" pos:column="35">ICB_EXPAND_OUT<pos:position pos:line="23" pos:column="49"/></name> <operator pos:line="23" pos:column="50">|<pos:position pos:line="23" pos:column="51"/></operator> <name pos:line="23" pos:column="52">ICB_INCLUDE_BAD<pos:position pos:line="23" pos:column="67"/></name> <operator pos:line="23" pos:column="68">|<pos:position pos:line="23" pos:column="69"/></operator> <name pos:line="23" pos:column="70">ICB_INCLUDE_INCOMPLETE<pos:position pos:line="23" pos:column="92"/></name> <operator pos:line="23" pos:column="93">|<pos:position pos:line="23" pos:column="94"/></operator> <name pos:line="23" pos:column="95">ICB_INIT<pos:position pos:line="23" pos:column="103"/></name></expr></argument>)<pos:position pos:line="23" pos:column="104"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="105"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="24" pos:column="25">outbuf<pos:position pos:line="24" pos:column="31"/></name><operator pos:line="24" pos:column="31">.<pos:position pos:line="24" pos:column="32"/></operator><name pos:line="24" pos:column="32">buf<pos:position pos:line="24" pos:column="35"/></name><index pos:line="24" pos:column="35">[<expr><name><name pos:line="24" pos:column="36">outbuf<pos:position pos:line="24" pos:column="42"/></name><operator pos:line="24" pos:column="42">.<pos:position pos:line="24" pos:column="43"/></operator><name pos:line="24" pos:column="43">len<pos:position pos:line="24" pos:column="46"/></name></name></expr>]<pos:position pos:line="24" pos:column="47"/></index></name> <operator pos:line="24" pos:column="48">=<pos:position pos:line="24" pos:column="49"/></operator> <literal type="char" pos:line="24" pos:column="50">'\0'<pos:position pos:line="24" pos:column="54"/></literal></expr>;<pos:position pos:line="24" pos:column="55"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="25" pos:column="25">write_buf<pos:position pos:line="25" pos:column="34"/></name><argument_list pos:line="25" pos:column="34">(<argument><expr><name pos:line="25" pos:column="35">fd<pos:position pos:line="25" pos:column="37"/></name></expr></argument>, <argument><expr><name><name pos:line="25" pos:column="39">outbuf<pos:position pos:line="25" pos:column="45"/></name><operator pos:line="25" pos:column="45">.<pos:position pos:line="25" pos:column="46"/></operator><name pos:line="25" pos:column="46">buf<pos:position pos:line="25" pos:column="49"/></name></name></expr></argument>, <argument><expr><name><name pos:line="25" pos:column="51">outbuf<pos:position pos:line="25" pos:column="57"/></name><operator pos:line="25" pos:column="57">.<pos:position pos:line="25" pos:column="58"/></operator><name pos:line="25" pos:column="58">len<pos:position pos:line="25" pos:column="61"/></name></name> <operator pos:line="25" pos:column="62">+<pos:position pos:line="25" pos:column="63"/></operator> <literal type="number" pos:line="25" pos:column="64">1<pos:position pos:line="25" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="67"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="26" pos:column="25">outbuf<pos:position pos:line="26" pos:column="31"/></name><operator pos:line="26" pos:column="31">.<pos:position pos:line="26" pos:column="32"/></operator><name pos:line="26" pos:column="32">len<pos:position pos:line="26" pos:column="35"/></name></name> <operator pos:line="26" pos:column="36">=<pos:position pos:line="26" pos:column="37"/></operator> <literal type="number" pos:line="26" pos:column="38">0<pos:position pos:line="26" pos:column="39"/></literal></expr>;<pos:position pos:line="26" pos:column="40"/></expr_stmt>
		}<pos:position pos:line="27" pos:column="18"/></block></then></if></elseif>
<cpp:endif pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">endif<pos:position pos:line="28" pos:column="7"/></cpp:directive></cpp:endif>
		<else pos:line="29" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="30" pos:column="25">write_buf<pos:position pos:line="30" pos:column="34"/></name><argument_list pos:line="30" pos:column="34">(<argument><expr><name pos:line="30" pos:column="35">fd<pos:position pos:line="30" pos:column="37"/></name></expr></argument>, <argument><expr><name><name pos:line="30" pos:column="39">args<pos:position pos:line="30" pos:column="43"/></name><index pos:line="30" pos:column="43">[<expr><name pos:line="30" pos:column="44">i<pos:position pos:line="30" pos:column="45"/></name></expr>]<pos:position pos:line="30" pos:column="46"/></index></name></expr></argument>, <argument><expr><call><name pos:line="30" pos:column="48">strlen<pos:position pos:line="30" pos:column="54"/></name><argument_list pos:line="30" pos:column="54">(<argument><expr><name><name pos:line="30" pos:column="55">args<pos:position pos:line="30" pos:column="59"/></name><index pos:line="30" pos:column="59">[<expr><name pos:line="30" pos:column="60">i<pos:position pos:line="30" pos:column="61"/></name></expr>]<pos:position pos:line="30" pos:column="62"/></index></name></expr></argument>)<pos:position pos:line="30" pos:column="63"/></argument_list></call> <operator pos:line="30" pos:column="64">+<pos:position pos:line="30" pos:column="65"/></operator> <literal type="number" pos:line="30" pos:column="66">1<pos:position pos:line="30" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="69"/></expr_stmt></block></else></if>
	}<pos:position pos:line="31" pos:column="10"/></block> while <condition pos:line="31" pos:column="17">(<expr><name><name pos:line="31" pos:column="18">args<pos:position pos:line="31" pos:column="22"/></name><index pos:line="31" pos:column="22">[<expr><operator pos:line="31" pos:column="23">++<pos:position pos:line="31" pos:column="25"/></operator><name pos:line="31" pos:column="25">i<pos:position pos:line="31" pos:column="26"/></name></expr>]<pos:position pos:line="31" pos:column="27"/></index></name></expr>)<pos:position pos:line="31" pos:column="28"/></condition>;<pos:position pos:line="31" pos:column="29"/></do>
	<expr_stmt><expr><call><name pos:line="32" pos:column="9">write_byte<pos:position pos:line="32" pos:column="19"/></name><argument_list pos:line="32" pos:column="19">(<argument><expr><name pos:line="32" pos:column="20">fd<pos:position pos:line="32" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="32" pos:column="24">0<pos:position pos:line="32" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="27"/></expr_stmt>

<cpp:ifdef pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">ifdef<pos:position pos:line="34" pos:column="7"/></cpp:directive> <name pos:line="34" pos:column="8">ICONV_OPTION<pos:position pos:line="34" pos:column="20"/></name></cpp:ifdef>
	<if pos:line="35" pos:column="9">if <condition pos:line="35" pos:column="12">(<expr><name pos:line="35" pos:column="13">convert<pos:position pos:line="35" pos:column="20"/></name></expr>)<pos:position pos:line="35" pos:column="21"/></condition><then pos:line="35" pos:column="21">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="36" pos:column="17">free<pos:position pos:line="36" pos:column="21"/></name><argument_list pos:line="36" pos:column="21">(<argument><expr><name><name pos:line="36" pos:column="22">outbuf<pos:position pos:line="36" pos:column="28"/></name><operator pos:line="36" pos:column="28">.<pos:position pos:line="36" pos:column="29"/></operator><name pos:line="36" pos:column="29">buf<pos:position pos:line="36" pos:column="32"/></name></name></expr></argument>)<pos:position pos:line="36" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="34"/></expr_stmt></block></then></if>
<cpp:endif pos:line="37" pos:column="1">#<cpp:directive pos:line="37" pos:column="2">endif<pos:position pos:line="37" pos:column="7"/></cpp:directive></cpp:endif>
}<pos:position pos:line="38" pos:column="2"/></block></function></unit>
