<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_458_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">do_mknod<pos:position pos:line="1" pos:column="13"/></name><parameter_list pos:line="1" pos:column="13">(<parameter><decl><type><specifier pos:line="1" pos:column="14">const<pos:position pos:line="1" pos:column="19"/></specifier> <name pos:line="1" pos:column="20">char<pos:position pos:line="1" pos:column="24"/></name> <modifier pos:line="1" pos:column="25">*<pos:position pos:line="1" pos:column="26"/></modifier></type><name pos:line="1" pos:column="26">pathname<pos:position pos:line="1" pos:column="34"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="36">mode_t<pos:position pos:line="1" pos:column="42"/></name></type> <name pos:line="1" pos:column="43">mode<pos:position pos:line="1" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="49">dev_t<pos:position pos:line="1" pos:column="54"/></name></type> <name pos:line="1" pos:column="55">dev<pos:position pos:line="1" pos:column="58"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="59"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<if pos:line="3" pos:column="9">if <condition pos:line="3" pos:column="12">(<expr><name pos:line="3" pos:column="13">dry_run<pos:position pos:line="3" pos:column="20"/></name></expr>)<pos:position pos:line="3" pos:column="21"/></condition><then pos:line="3" pos:column="21"> <block type="pseudo"><return pos:line="3" pos:column="22">return <expr><literal type="number" pos:line="3" pos:column="29">0<pos:position pos:line="3" pos:column="30"/></literal></expr>;<pos:position pos:line="3" pos:column="31"/></return></block></then></if>
	<expr_stmt><expr><name pos:line="4" pos:column="9">RETURN_ERROR_IF_RO_OR_LO<pos:position pos:line="4" pos:column="33"/></name></expr>;<pos:position pos:line="4" pos:column="34"/></expr_stmt>

	<comment type="block" pos:line="6" pos:column="9">/* For --fake-super, we create a normal file with mode 0600. */</comment>
	<if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<expr><name pos:line="7" pos:column="13">am_root<pos:position pos:line="7" pos:column="20"/></name> <operator pos:line="7" pos:column="21">&lt;<pos:position pos:line="7" pos:column="25"/></operator> <literal type="number" pos:line="7" pos:column="23">0<pos:position pos:line="7" pos:column="24"/></literal></expr>)<pos:position pos:line="7" pos:column="25"/></condition><then pos:line="7" pos:column="25"> <block pos:line="7" pos:column="26">{
		<decl_stmt><decl><type><name pos:line="8" pos:column="17">int<pos:position pos:line="8" pos:column="20"/></name></type> <name pos:line="8" pos:column="21">fd<pos:position pos:line="8" pos:column="23"/></name> <init pos:line="8" pos:column="24">= <expr><call><name pos:line="8" pos:column="26">open<pos:position pos:line="8" pos:column="30"/></name><argument_list pos:line="8" pos:column="30">(<argument><expr><name pos:line="8" pos:column="31">pathname<pos:position pos:line="8" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="41">O_WRONLY<pos:position pos:line="8" pos:column="49"/></name><operator pos:line="8" pos:column="49">|<pos:position pos:line="8" pos:column="50"/></operator><name pos:line="8" pos:column="50">O_CREAT<pos:position pos:line="8" pos:column="57"/></name><operator pos:line="8" pos:column="57">|<pos:position pos:line="8" pos:column="58"/></operator><name pos:line="8" pos:column="58">O_TRUNC<pos:position pos:line="8" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="67">S_IWUSR<pos:position pos:line="8" pos:column="74"/></name><operator pos:line="8" pos:column="74">|<pos:position pos:line="8" pos:column="75"/></operator><name pos:line="8" pos:column="75">S_IRUSR<pos:position pos:line="8" pos:column="82"/></name></expr></argument>)<pos:position pos:line="8" pos:column="83"/></argument_list></call></expr></init></decl>;<pos:position pos:line="8" pos:column="84"/></decl_stmt>
		<if pos:line="9" pos:column="17">if <condition pos:line="9" pos:column="20">(<expr><name pos:line="9" pos:column="21">fd<pos:position pos:line="9" pos:column="23"/></name> <operator pos:line="9" pos:column="24">&lt;<pos:position pos:line="9" pos:column="28"/></operator> <literal type="number" pos:line="9" pos:column="26">0<pos:position pos:line="9" pos:column="27"/></literal> <operator pos:line="9" pos:column="28">||<pos:position pos:line="9" pos:column="30"/></operator> <call><name pos:line="9" pos:column="31">close<pos:position pos:line="9" pos:column="36"/></name><argument_list pos:line="9" pos:column="36">(<argument><expr><name pos:line="9" pos:column="37">fd<pos:position pos:line="9" pos:column="39"/></name></expr></argument>)<pos:position pos:line="9" pos:column="40"/></argument_list></call> <operator pos:line="9" pos:column="41">&lt;<pos:position pos:line="9" pos:column="45"/></operator> <literal type="number" pos:line="9" pos:column="43">0<pos:position pos:line="9" pos:column="44"/></literal></expr>)<pos:position pos:line="9" pos:column="45"/></condition><then pos:line="9" pos:column="45">
			<block type="pseudo"><return pos:line="10" pos:column="25">return <expr><operator pos:line="10" pos:column="32">-<pos:position pos:line="10" pos:column="33"/></operator><literal type="number" pos:line="10" pos:column="33">1<pos:position pos:line="10" pos:column="34"/></literal></expr>;<pos:position pos:line="10" pos:column="35"/></return></block></then></if>
		<return pos:line="11" pos:column="17">return <expr><literal type="number" pos:line="11" pos:column="24">0<pos:position pos:line="11" pos:column="25"/></literal></expr>;<pos:position pos:line="11" pos:column="26"/></return>
	}<pos:position pos:line="12" pos:column="10"/></block></then></if>

<cpp:if pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">if<pos:position pos:line="14" pos:column="4"/></cpp:directive> <expr><operator pos:line="14" pos:column="5">!<pos:position pos:line="14" pos:column="6"/></operator><name pos:line="14" pos:column="6">defined<pos:position pos:line="14" pos:column="13"/></name> <name pos:line="14" pos:column="14">MKNOD_CREATES_FIFOS<pos:position pos:line="14" pos:column="33"/></name> <operator pos:line="14" pos:column="34">&amp;&amp;<pos:position pos:line="14" pos:column="44"/></operator> <name pos:line="14" pos:column="37">defined<pos:position pos:line="14" pos:column="44"/></name> <name pos:line="14" pos:column="45">HAVE_MKFIFO<pos:position pos:line="14" pos:column="56"/></name></expr></cpp:if>
	<if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><call><name pos:line="15" pos:column="13">S_ISFIFO<pos:position pos:line="15" pos:column="21"/></name><argument_list pos:line="15" pos:column="21">(<argument><expr><name pos:line="15" pos:column="22">mode<pos:position pos:line="15" pos:column="26"/></name></expr></argument>)<pos:position pos:line="15" pos:column="27"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="28"/></condition><then pos:line="15" pos:column="28">
		<block type="pseudo"><return pos:line="16" pos:column="17">return <expr><call><name pos:line="16" pos:column="24">mkfifo<pos:position pos:line="16" pos:column="30"/></name><argument_list pos:line="16" pos:column="30">(<argument><expr><name pos:line="16" pos:column="31">pathname<pos:position pos:line="16" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="41">mode<pos:position pos:line="16" pos:column="45"/></name></expr></argument>)<pos:position pos:line="16" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="47"/></return></block></then></if>
<cpp:endif pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">endif<pos:position pos:line="17" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:if pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">if<pos:position pos:line="18" pos:column="4"/></cpp:directive> <expr><operator pos:line="18" pos:column="5">!<pos:position pos:line="18" pos:column="6"/></operator><name pos:line="18" pos:column="6">defined<pos:position pos:line="18" pos:column="13"/></name> <name pos:line="18" pos:column="14">MKNOD_CREATES_SOCKETS<pos:position pos:line="18" pos:column="35"/></name> <operator pos:line="18" pos:column="36">&amp;&amp;<pos:position pos:line="18" pos:column="46"/></operator> <name pos:line="18" pos:column="39">defined<pos:position pos:line="18" pos:column="46"/></name> <name pos:line="18" pos:column="47">HAVE_SYS_UN_H<pos:position pos:line="18" pos:column="60"/></name></expr></cpp:if>
	<if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><call><name pos:line="19" pos:column="13">S_ISSOCK<pos:position pos:line="19" pos:column="21"/></name><argument_list pos:line="19" pos:column="21">(<argument><expr><name pos:line="19" pos:column="22">mode<pos:position pos:line="19" pos:column="26"/></name></expr></argument>)<pos:position pos:line="19" pos:column="27"/></argument_list></call></expr>)<pos:position pos:line="19" pos:column="28"/></condition><then pos:line="19" pos:column="28"> <block pos:line="19" pos:column="29">{
		<decl_stmt><decl><type><name pos:line="20" pos:column="17">int<pos:position pos:line="20" pos:column="20"/></name></type> <name pos:line="20" pos:column="21">sock<pos:position pos:line="20" pos:column="25"/></name></decl>;<pos:position pos:line="20" pos:column="26"/></decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="21" pos:column="17">struct<pos:position pos:line="21" pos:column="23"/></name> <name pos:line="21" pos:column="24">sockaddr_un<pos:position pos:line="21" pos:column="35"/></name></name></type> <name pos:line="21" pos:column="36">saddr<pos:position pos:line="21" pos:column="41"/></name></decl>;<pos:position pos:line="21" pos:column="42"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="22" pos:column="17">unsigned<pos:position pos:line="22" pos:column="25"/></name> <name pos:line="22" pos:column="26">int<pos:position pos:line="22" pos:column="29"/></name></type> <name pos:line="22" pos:column="30">len<pos:position pos:line="22" pos:column="33"/></name> <init pos:line="22" pos:column="34">= <expr><call><name pos:line="22" pos:column="36">strlcpy<pos:position pos:line="22" pos:column="43"/></name><argument_list pos:line="22" pos:column="43">(<argument><expr><name><name pos:line="22" pos:column="44">saddr<pos:position pos:line="22" pos:column="49"/></name><operator pos:line="22" pos:column="49">.<pos:position pos:line="22" pos:column="50"/></operator><name pos:line="22" pos:column="50">sun_path<pos:position pos:line="22" pos:column="58"/></name></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="60">pathname<pos:position pos:line="22" pos:column="68"/></name></expr></argument>, <argument><expr><sizeof pos:line="22" pos:column="70">sizeof <name><name pos:line="22" pos:column="77">saddr<pos:position pos:line="22" pos:column="82"/></name><operator pos:line="22" pos:column="82">.<pos:position pos:line="22" pos:column="83"/></operator><name pos:line="22" pos:column="83">sun_path<pos:position pos:line="22" pos:column="91"/></name></name></sizeof></expr></argument>)<pos:position pos:line="22" pos:column="92"/></argument_list></call></expr></init></decl>;<pos:position pos:line="22" pos:column="93"/></decl_stmt>
		<if pos:line="23" pos:column="17">if <condition pos:line="23" pos:column="20">(<expr><name pos:line="23" pos:column="21">len<pos:position pos:line="23" pos:column="24"/></name> <operator pos:line="23" pos:column="25">&gt;=<pos:position pos:line="23" pos:column="30"/></operator> <sizeof pos:line="23" pos:column="28">sizeof <name><name pos:line="23" pos:column="35">saddr<pos:position pos:line="23" pos:column="40"/></name><operator pos:line="23" pos:column="40">.<pos:position pos:line="23" pos:column="41"/></operator><name pos:line="23" pos:column="41">sun_path<pos:position pos:line="23" pos:column="49"/></name></name></sizeof></expr>)<pos:position pos:line="23" pos:column="50"/></condition><then pos:line="23" pos:column="50"> <block pos:line="23" pos:column="51">{
			<expr_stmt><expr><name pos:line="24" pos:column="25">errno<pos:position pos:line="24" pos:column="30"/></name> <operator pos:line="24" pos:column="31">=<pos:position pos:line="24" pos:column="32"/></operator> <name pos:line="24" pos:column="33">ENAMETOOLONG<pos:position pos:line="24" pos:column="45"/></name></expr>;<pos:position pos:line="24" pos:column="46"/></expr_stmt>
			<return pos:line="25" pos:column="25">return <expr><operator pos:line="25" pos:column="32">-<pos:position pos:line="25" pos:column="33"/></operator><literal type="number" pos:line="25" pos:column="33">1<pos:position pos:line="25" pos:column="34"/></literal></expr>;<pos:position pos:line="25" pos:column="35"/></return>
		}<pos:position pos:line="26" pos:column="18"/></block></then></if>
<cpp:ifdef pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">ifdef<pos:position pos:line="27" pos:column="7"/></cpp:directive> <name pos:line="27" pos:column="8">HAVE_SOCKADDR_UN_LEN<pos:position pos:line="27" pos:column="28"/></name></cpp:ifdef>
		<expr_stmt><expr><name><name pos:line="28" pos:column="17">saddr<pos:position pos:line="28" pos:column="22"/></name><operator pos:line="28" pos:column="22">.<pos:position pos:line="28" pos:column="23"/></operator><name pos:line="28" pos:column="23">sun_len<pos:position pos:line="28" pos:column="30"/></name></name> <operator pos:line="28" pos:column="31">=<pos:position pos:line="28" pos:column="32"/></operator> <name pos:line="28" pos:column="33">len<pos:position pos:line="28" pos:column="36"/></name> <operator pos:line="28" pos:column="37">+<pos:position pos:line="28" pos:column="38"/></operator> <literal type="number" pos:line="28" pos:column="39">1<pos:position pos:line="28" pos:column="40"/></literal></expr>;<pos:position pos:line="28" pos:column="41"/></expr_stmt>
<cpp:endif pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">endif<pos:position pos:line="29" pos:column="7"/></cpp:directive></cpp:endif>
		<expr_stmt><expr><name><name pos:line="30" pos:column="17">saddr<pos:position pos:line="30" pos:column="22"/></name><operator pos:line="30" pos:column="22">.<pos:position pos:line="30" pos:column="23"/></operator><name pos:line="30" pos:column="23">sun_family<pos:position pos:line="30" pos:column="33"/></name></name> <operator pos:line="30" pos:column="34">=<pos:position pos:line="30" pos:column="35"/></operator> <name pos:line="30" pos:column="36">AF_UNIX<pos:position pos:line="30" pos:column="43"/></name></expr>;<pos:position pos:line="30" pos:column="44"/></expr_stmt>

		<if pos:line="32" pos:column="17">if <condition pos:line="32" pos:column="20">(<expr><operator pos:line="32" pos:column="21">(<pos:position pos:line="32" pos:column="22"/></operator><name pos:line="32" pos:column="22">sock<pos:position pos:line="32" pos:column="26"/></name> <operator pos:line="32" pos:column="27">=<pos:position pos:line="32" pos:column="28"/></operator> <call><name pos:line="32" pos:column="29">socket<pos:position pos:line="32" pos:column="35"/></name><argument_list pos:line="32" pos:column="35">(<argument><expr><name pos:line="32" pos:column="36">PF_UNIX<pos:position pos:line="32" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="45">SOCK_STREAM<pos:position pos:line="32" pos:column="56"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="32" pos:column="58">0<pos:position pos:line="32" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="60"/></argument_list></call><operator pos:line="32" pos:column="60">)<pos:position pos:line="32" pos:column="61"/></operator> <operator pos:line="32" pos:column="62">&lt;<pos:position pos:line="32" pos:column="66"/></operator> <literal type="number" pos:line="32" pos:column="64">0<pos:position pos:line="32" pos:column="65"/></literal>
		    <operator pos:line="33" pos:column="21">||<pos:position pos:line="33" pos:column="23"/></operator> <operator pos:line="33" pos:column="24">(<pos:position pos:line="33" pos:column="25"/></operator><call><name pos:line="33" pos:column="25">unlink<pos:position pos:line="33" pos:column="31"/></name><argument_list pos:line="33" pos:column="31">(<argument><expr><name pos:line="33" pos:column="32">pathname<pos:position pos:line="33" pos:column="40"/></name></expr></argument>)<pos:position pos:line="33" pos:column="41"/></argument_list></call> <operator pos:line="33" pos:column="42">&lt;<pos:position pos:line="33" pos:column="46"/></operator> <literal type="number" pos:line="33" pos:column="44">0<pos:position pos:line="33" pos:column="45"/></literal> <operator pos:line="33" pos:column="46">&amp;&amp;<pos:position pos:line="33" pos:column="56"/></operator> <name pos:line="33" pos:column="49">errno<pos:position pos:line="33" pos:column="54"/></name> <operator pos:line="33" pos:column="55">!=<pos:position pos:line="33" pos:column="57"/></operator> <name pos:line="33" pos:column="58">ENOENT<pos:position pos:line="33" pos:column="64"/></name><operator pos:line="33" pos:column="64">)<pos:position pos:line="33" pos:column="65"/></operator>
		    <operator pos:line="34" pos:column="21">||<pos:position pos:line="34" pos:column="23"/></operator> <operator pos:line="34" pos:column="24">(<pos:position pos:line="34" pos:column="25"/></operator><call><name pos:line="34" pos:column="25">bind<pos:position pos:line="34" pos:column="29"/></name><argument_list pos:line="34" pos:column="29">(<argument><expr><name pos:line="34" pos:column="30">sock<pos:position pos:line="34" pos:column="34"/></name></expr></argument>, <argument><expr><operator pos:line="34" pos:column="36">(<pos:position pos:line="34" pos:column="37"/></operator>struct <name pos:line="34" pos:column="44">sockaddr<pos:position pos:line="34" pos:column="52"/></name><operator pos:line="34" pos:column="52">*<pos:position pos:line="34" pos:column="53"/></operator><operator pos:line="34" pos:column="53">)<pos:position pos:line="34" pos:column="54"/></operator><operator pos:line="34" pos:column="54">&amp;<pos:position pos:line="34" pos:column="59"/></operator><name pos:line="34" pos:column="55">saddr<pos:position pos:line="34" pos:column="60"/></name></expr></argument>, <argument><expr><sizeof pos:line="34" pos:column="62">sizeof <name pos:line="34" pos:column="69">saddr<pos:position pos:line="34" pos:column="74"/></name></sizeof></expr></argument>)<pos:position pos:line="34" pos:column="75"/></argument_list></call><operator pos:line="34" pos:column="75">)<pos:position pos:line="34" pos:column="76"/></operator> <operator pos:line="34" pos:column="77">&lt;<pos:position pos:line="34" pos:column="81"/></operator> <literal type="number" pos:line="34" pos:column="79">0<pos:position pos:line="34" pos:column="80"/></literal></expr>)<pos:position pos:line="34" pos:column="81"/></condition><then pos:line="34" pos:column="81">
			<block type="pseudo"><return pos:line="35" pos:column="25">return <expr><operator pos:line="35" pos:column="32">-<pos:position pos:line="35" pos:column="33"/></operator><literal type="number" pos:line="35" pos:column="33">1<pos:position pos:line="35" pos:column="34"/></literal></expr>;<pos:position pos:line="35" pos:column="35"/></return></block></then></if>
		<expr_stmt><expr><call><name pos:line="36" pos:column="17">close<pos:position pos:line="36" pos:column="22"/></name><argument_list pos:line="36" pos:column="22">(<argument><expr><name pos:line="36" pos:column="23">sock<pos:position pos:line="36" pos:column="27"/></name></expr></argument>)<pos:position pos:line="36" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="29"/></expr_stmt>
<cpp:ifdef pos:line="37" pos:column="1">#<cpp:directive pos:line="37" pos:column="2">ifdef<pos:position pos:line="37" pos:column="7"/></cpp:directive> <name pos:line="37" pos:column="8">HAVE_CHMOD<pos:position pos:line="37" pos:column="18"/></name></cpp:ifdef>
		<return pos:line="38" pos:column="17">return <expr><call><name pos:line="38" pos:column="24">do_chmod<pos:position pos:line="38" pos:column="32"/></name><argument_list pos:line="38" pos:column="32">(<argument><expr><name pos:line="38" pos:column="33">pathname<pos:position pos:line="38" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="43">mode<pos:position pos:line="38" pos:column="47"/></name></expr></argument>)<pos:position pos:line="38" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="49"/></return>
<cpp:else pos:line="39" pos:column="1">#<cpp:directive pos:line="39" pos:column="2">else<pos:position pos:line="39" pos:column="6"/></cpp:directive></cpp:else>
		<return pos:line="40" pos:column="17">return <expr><literal type="number" pos:line="40" pos:column="24">0<pos:position pos:line="40" pos:column="25"/></literal></expr>;<pos:position pos:line="40" pos:column="26"/></return>
<cpp:endif pos:line="41" pos:column="1">#<cpp:directive pos:line="41" pos:column="2">endif<pos:position pos:line="41" pos:column="7"/></cpp:directive></cpp:endif>
	}<pos:position pos:line="42" pos:column="10"/></block></then></if>
<cpp:endif pos:line="43" pos:column="1">#<cpp:directive pos:line="43" pos:column="2">endif<pos:position pos:line="43" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:ifdef pos:line="44" pos:column="1">#<cpp:directive pos:line="44" pos:column="2">ifdef<pos:position pos:line="44" pos:column="7"/></cpp:directive> <name pos:line="44" pos:column="8">HAVE_MKNOD<pos:position pos:line="44" pos:column="18"/></name></cpp:ifdef>
	<return pos:line="45" pos:column="9">return <expr><call><name pos:line="45" pos:column="16">mknod<pos:position pos:line="45" pos:column="21"/></name><argument_list pos:line="45" pos:column="21">(<argument><expr><name pos:line="45" pos:column="22">pathname<pos:position pos:line="45" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="32">mode<pos:position pos:line="45" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="38">dev<pos:position pos:line="45" pos:column="41"/></name></expr></argument>)<pos:position pos:line="45" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="43"/></return>
<cpp:else pos:line="46" pos:column="1">#<cpp:directive pos:line="46" pos:column="2">else<pos:position pos:line="46" pos:column="6"/></cpp:directive></cpp:else>
	<return pos:line="47" pos:column="9">return <expr><operator pos:line="47" pos:column="16">-<pos:position pos:line="47" pos:column="17"/></operator><literal type="number" pos:line="47" pos:column="17">1<pos:position pos:line="47" pos:column="18"/></literal></expr>;<pos:position pos:line="47" pos:column="19"/></return>
<cpp:endif pos:line="48" pos:column="1">#<cpp:directive pos:line="48" pos:column="2">endif<pos:position pos:line="48" pos:column="7"/></cpp:directive></cpp:endif>
}<pos:position pos:line="49" pos:column="2"/></block></function></unit>
