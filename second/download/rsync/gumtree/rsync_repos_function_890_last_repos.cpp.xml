<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_890_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">getaddrinfo<pos:position pos:line="1" pos:column="16"/></name><parameter_list pos:line="1" pos:column="16">(<parameter><decl><type><specifier pos:line="1" pos:column="17">const<pos:position pos:line="1" pos:column="22"/></specifier> <name pos:line="1" pos:column="23">char<pos:position pos:line="1" pos:column="27"/></name> <modifier pos:line="1" pos:column="28">*<pos:position pos:line="1" pos:column="29"/></modifier></type><name pos:line="1" pos:column="29">node<pos:position pos:line="1" pos:column="33"/></name></decl></parameter>,
		<parameter><decl><type><specifier pos:line="2" pos:column="17">const<pos:position pos:line="2" pos:column="22"/></specifier> <name pos:line="2" pos:column="23">char<pos:position pos:line="2" pos:column="27"/></name> <modifier pos:line="2" pos:column="28">*<pos:position pos:line="2" pos:column="29"/></modifier></type><name pos:line="2" pos:column="29">service<pos:position pos:line="2" pos:column="36"/></name></decl></parameter>,
		<parameter><decl><type><specifier pos:line="3" pos:column="17">const<pos:position pos:line="3" pos:column="22"/></specifier> <name><name pos:line="3" pos:column="23">struct<pos:position pos:line="3" pos:column="29"/></name> <name pos:line="3" pos:column="30">addrinfo<pos:position pos:line="3" pos:column="38"/></name></name> <modifier pos:line="3" pos:column="39">*<pos:position pos:line="3" pos:column="40"/></modifier></type> <name pos:line="3" pos:column="41">hintp<pos:position pos:line="3" pos:column="46"/></name></decl></parameter>,
		<parameter><decl><type><name><name pos:line="4" pos:column="17">struct<pos:position pos:line="4" pos:column="23"/></name> <name pos:line="4" pos:column="24">addrinfo<pos:position pos:line="4" pos:column="32"/></name></name> <modifier pos:line="4" pos:column="33">*<pos:position pos:line="4" pos:column="34"/></modifier><modifier pos:line="4" pos:column="34">*<pos:position pos:line="4" pos:column="35"/></modifier></type> <name pos:line="4" pos:column="36">res<pos:position pos:line="4" pos:column="39"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="40"/></parameter_list>
<block pos:line="5" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">addrinfo<pos:position pos:line="6" pos:column="24"/></name></name></type> <name pos:line="6" pos:column="25">hints<pos:position pos:line="6" pos:column="30"/></name></decl>;<pos:position pos:line="6" pos:column="31"/></decl_stmt>

	<comment type="block" pos:line="8" pos:column="9">/* Setup the hints struct. */</comment>
	<if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><name pos:line="9" pos:column="13">hintp<pos:position pos:line="9" pos:column="18"/></name> <operator pos:line="9" pos:column="19">==<pos:position pos:line="9" pos:column="21"/></operator> <name pos:line="9" pos:column="22">NULL<pos:position pos:line="9" pos:column="26"/></name></expr>)<pos:position pos:line="9" pos:column="27"/></condition><then pos:line="9" pos:column="27"> <block pos:line="9" pos:column="28">{
		<expr_stmt><expr><call><name pos:line="10" pos:column="17">memset<pos:position pos:line="10" pos:column="23"/></name><argument_list pos:line="10" pos:column="23">(<argument><expr><operator pos:line="10" pos:column="24">&amp;<pos:position pos:line="10" pos:column="29"/></operator><name pos:line="10" pos:column="25">hints<pos:position pos:line="10" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="10" pos:column="32">0<pos:position pos:line="10" pos:column="33"/></literal></expr></argument>, <argument><expr><sizeof pos:line="10" pos:column="35">sizeof<argument_list pos:line="10" pos:column="41">(<argument><expr><name pos:line="10" pos:column="42">hints<pos:position pos:line="10" pos:column="47"/></name></expr></argument>)<pos:position pos:line="10" pos:column="48"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="10" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="50"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="11" pos:column="17">hints<pos:position pos:line="11" pos:column="22"/></name><operator pos:line="11" pos:column="22">.<pos:position pos:line="11" pos:column="23"/></operator><name pos:line="11" pos:column="23">ai_family<pos:position pos:line="11" pos:column="32"/></name></name> <operator pos:line="11" pos:column="33">=<pos:position pos:line="11" pos:column="34"/></operator> <name pos:line="11" pos:column="35">AF_INET<pos:position pos:line="11" pos:column="42"/></name></expr>;<pos:position pos:line="11" pos:column="43"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="12" pos:column="17">hints<pos:position pos:line="12" pos:column="22"/></name><operator pos:line="12" pos:column="22">.<pos:position pos:line="12" pos:column="23"/></operator><name pos:line="12" pos:column="23">ai_socktype<pos:position pos:line="12" pos:column="34"/></name></name> <operator pos:line="12" pos:column="35">=<pos:position pos:line="12" pos:column="36"/></operator> <name pos:line="12" pos:column="37">SOCK_STREAM<pos:position pos:line="12" pos:column="48"/></name></expr>;<pos:position pos:line="12" pos:column="49"/></expr_stmt>
	}<pos:position pos:line="13" pos:column="10"/></block></then> <else pos:line="13" pos:column="11">else <block pos:line="13" pos:column="16">{
		<expr_stmt><expr><call><name pos:line="14" pos:column="17">memcpy<pos:position pos:line="14" pos:column="23"/></name><argument_list pos:line="14" pos:column="23">(<argument><expr><operator pos:line="14" pos:column="24">&amp;<pos:position pos:line="14" pos:column="29"/></operator><name pos:line="14" pos:column="25">hints<pos:position pos:line="14" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="32">hintp<pos:position pos:line="14" pos:column="37"/></name></expr></argument>, <argument><expr><sizeof pos:line="14" pos:column="39">sizeof<argument_list pos:line="14" pos:column="45">(<argument><expr><name pos:line="14" pos:column="46">hints<pos:position pos:line="14" pos:column="51"/></name></expr></argument>)<pos:position pos:line="14" pos:column="52"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="14" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="54"/></expr_stmt>
	}<pos:position pos:line="15" pos:column="10"/></block></else></if>

	<if pos:line="17" pos:column="9">if <condition pos:line="17" pos:column="12">(<expr><name><name pos:line="17" pos:column="13">hints<pos:position pos:line="17" pos:column="18"/></name><operator pos:line="17" pos:column="18">.<pos:position pos:line="17" pos:column="19"/></operator><name pos:line="17" pos:column="19">ai_family<pos:position pos:line="17" pos:column="28"/></name></name> <operator pos:line="17" pos:column="29">!=<pos:position pos:line="17" pos:column="31"/></operator> <name pos:line="17" pos:column="32">AF_INET<pos:position pos:line="17" pos:column="39"/></name> <operator pos:line="17" pos:column="40">&amp;&amp;<pos:position pos:line="17" pos:column="50"/></operator> <name><name pos:line="17" pos:column="43">hints<pos:position pos:line="17" pos:column="48"/></name><operator pos:line="17" pos:column="48">.<pos:position pos:line="17" pos:column="49"/></operator><name pos:line="17" pos:column="49">ai_family<pos:position pos:line="17" pos:column="58"/></name></name> <operator pos:line="17" pos:column="59">!=<pos:position pos:line="17" pos:column="61"/></operator> <name pos:line="17" pos:column="62">AF_UNSPEC<pos:position pos:line="17" pos:column="71"/></name></expr>)<pos:position pos:line="17" pos:column="72"/></condition><then pos:line="17" pos:column="72"> <block pos:line="17" pos:column="73">{
		<return pos:line="18" pos:column="17">return <expr><name pos:line="18" pos:column="24">EAI_FAMILY<pos:position pos:line="18" pos:column="34"/></name></expr>;<pos:position pos:line="18" pos:column="35"/></return>
	}<pos:position pos:line="19" pos:column="10"/></block></then></if>

	<if pos:line="21" pos:column="9">if <condition pos:line="21" pos:column="12">(<expr><name><name pos:line="21" pos:column="13">hints<pos:position pos:line="21" pos:column="18"/></name><operator pos:line="21" pos:column="18">.<pos:position pos:line="21" pos:column="19"/></operator><name pos:line="21" pos:column="19">ai_socktype<pos:position pos:line="21" pos:column="30"/></name></name> <operator pos:line="21" pos:column="31">==<pos:position pos:line="21" pos:column="33"/></operator> <literal type="number" pos:line="21" pos:column="34">0<pos:position pos:line="21" pos:column="35"/></literal></expr>)<pos:position pos:line="21" pos:column="36"/></condition><then pos:line="21" pos:column="36"> <block pos:line="21" pos:column="37">{
		<expr_stmt><expr><name><name pos:line="22" pos:column="17">hints<pos:position pos:line="22" pos:column="22"/></name><operator pos:line="22" pos:column="22">.<pos:position pos:line="22" pos:column="23"/></operator><name pos:line="22" pos:column="23">ai_socktype<pos:position pos:line="22" pos:column="34"/></name></name> <operator pos:line="22" pos:column="35">=<pos:position pos:line="22" pos:column="36"/></operator> <name pos:line="22" pos:column="37">SOCK_STREAM<pos:position pos:line="22" pos:column="48"/></name></expr>;<pos:position pos:line="22" pos:column="49"/></expr_stmt>
	}<pos:position pos:line="23" pos:column="10"/></block></then></if>

	<if pos:line="25" pos:column="9">if <condition pos:line="25" pos:column="12">(<expr><operator pos:line="25" pos:column="13">!<pos:position pos:line="25" pos:column="14"/></operator><name pos:line="25" pos:column="14">node<pos:position pos:line="25" pos:column="18"/></name> <operator pos:line="25" pos:column="19">&amp;&amp;<pos:position pos:line="25" pos:column="29"/></operator> <operator pos:line="25" pos:column="22">!<pos:position pos:line="25" pos:column="23"/></operator><name pos:line="25" pos:column="23">service<pos:position pos:line="25" pos:column="30"/></name></expr>)<pos:position pos:line="25" pos:column="31"/></condition><then pos:line="25" pos:column="31"> <block pos:line="25" pos:column="32">{
		<return pos:line="26" pos:column="17">return <expr><name pos:line="26" pos:column="24">EAI_NONAME<pos:position pos:line="26" pos:column="34"/></name></expr>;<pos:position pos:line="26" pos:column="35"/></return>
	}<pos:position pos:line="27" pos:column="10"/></block></then></if>

	<if pos:line="29" pos:column="9">if <condition pos:line="29" pos:column="12">(<expr><name pos:line="29" pos:column="13">node<pos:position pos:line="29" pos:column="17"/></name></expr>)<pos:position pos:line="29" pos:column="18"/></condition><then pos:line="29" pos:column="18"> <block pos:line="29" pos:column="19">{
		<if pos:line="30" pos:column="17">if <condition pos:line="30" pos:column="20">(<expr><name><name pos:line="30" pos:column="21">node<pos:position pos:line="30" pos:column="25"/></name><index pos:line="30" pos:column="25">[<expr><literal type="number" pos:line="30" pos:column="26">0<pos:position pos:line="30" pos:column="27"/></literal></expr>]<pos:position pos:line="30" pos:column="28"/></index></name> <operator pos:line="30" pos:column="29">==<pos:position pos:line="30" pos:column="31"/></operator> <literal type="char" pos:line="30" pos:column="32">'\0'<pos:position pos:line="30" pos:column="36"/></literal></expr>)<pos:position pos:line="30" pos:column="37"/></condition><then pos:line="30" pos:column="37"> <block pos:line="30" pos:column="38">{
			<return pos:line="31" pos:column="25">return <expr><call><name pos:line="31" pos:column="32">getaddr_info_single_addr<pos:position pos:line="31" pos:column="56"/></name><argument_list pos:line="31" pos:column="56">(<argument><expr><name pos:line="31" pos:column="57">service<pos:position pos:line="31" pos:column="64"/></name></expr></argument>,
					<argument><expr><name pos:line="32" pos:column="41">INADDR_ANY<pos:position pos:line="32" pos:column="51"/></name></expr></argument>,
					<argument><expr><operator pos:line="33" pos:column="41">&amp;<pos:position pos:line="33" pos:column="46"/></operator><name pos:line="33" pos:column="42">hints<pos:position pos:line="33" pos:column="47"/></name></expr></argument>,
					<argument><expr><name pos:line="34" pos:column="41">res<pos:position pos:line="34" pos:column="44"/></name></expr></argument>)<pos:position pos:line="34" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="46"/></return>
		}<pos:position pos:line="35" pos:column="18"/></block></then> <elseif pos:line="35" pos:column="19">else <if pos:line="35" pos:column="24">if <condition pos:line="35" pos:column="27">(<expr><name><name pos:line="35" pos:column="28">hints<pos:position pos:line="35" pos:column="33"/></name><operator pos:line="35" pos:column="33">.<pos:position pos:line="35" pos:column="34"/></operator><name pos:line="35" pos:column="34">ai_flags<pos:position pos:line="35" pos:column="42"/></name></name> <operator pos:line="35" pos:column="43">&amp;<pos:position pos:line="35" pos:column="48"/></operator> <name pos:line="35" pos:column="45">AI_NUMERICHOST<pos:position pos:line="35" pos:column="59"/></name></expr>)<pos:position pos:line="35" pos:column="60"/></condition><then pos:line="35" pos:column="60"> <block pos:line="35" pos:column="61">{
			<decl_stmt><decl><type><name><name pos:line="36" pos:column="25">struct<pos:position pos:line="36" pos:column="31"/></name> <name pos:line="36" pos:column="32">in_addr<pos:position pos:line="36" pos:column="39"/></name></name></type> <name pos:line="36" pos:column="40">ip<pos:position pos:line="36" pos:column="42"/></name></decl>;<pos:position pos:line="36" pos:column="43"/></decl_stmt>
			<if pos:line="37" pos:column="25">if <condition pos:line="37" pos:column="28">(<expr><call><name pos:line="37" pos:column="29">inet_pton<pos:position pos:line="37" pos:column="38"/></name><argument_list pos:line="37" pos:column="38">(<argument><expr><name pos:line="37" pos:column="39">AF_INET<pos:position pos:line="37" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="48">node<pos:position pos:line="37" pos:column="52"/></name></expr></argument>, <argument><expr><operator pos:line="37" pos:column="54">&amp;<pos:position pos:line="37" pos:column="59"/></operator><name pos:line="37" pos:column="55">ip<pos:position pos:line="37" pos:column="57"/></name></expr></argument>)<pos:position pos:line="37" pos:column="58"/></argument_list></call> <operator pos:line="37" pos:column="59">&lt;=<pos:position pos:line="37" pos:column="64"/></operator> <literal type="number" pos:line="37" pos:column="62">0<pos:position pos:line="37" pos:column="63"/></literal></expr>)<pos:position pos:line="37" pos:column="64"/></condition><then pos:line="37" pos:column="64">
				<block type="pseudo"><return pos:line="38" pos:column="33">return <expr><name pos:line="38" pos:column="40">EAI_FAIL<pos:position pos:line="38" pos:column="48"/></name></expr>;<pos:position pos:line="38" pos:column="49"/></return></block></then></if>
			<return pos:line="39" pos:column="25">return <expr><call><name pos:line="39" pos:column="32">getaddr_info_single_addr<pos:position pos:line="39" pos:column="56"/></name><argument_list pos:line="39" pos:column="56">(<argument><expr><name pos:line="39" pos:column="57">service<pos:position pos:line="39" pos:column="64"/></name></expr></argument>,
					<argument><expr><call><name pos:line="40" pos:column="41">ntohl<pos:position pos:line="40" pos:column="46"/></name><argument_list pos:line="40" pos:column="46">(<argument><expr><name><name pos:line="40" pos:column="47">ip<pos:position pos:line="40" pos:column="49"/></name><operator pos:line="40" pos:column="49">.<pos:position pos:line="40" pos:column="50"/></operator><name pos:line="40" pos:column="50">s_addr<pos:position pos:line="40" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="40" pos:column="57"/></argument_list></call></expr></argument>,
					<argument><expr><operator pos:line="41" pos:column="41">&amp;<pos:position pos:line="41" pos:column="46"/></operator><name pos:line="41" pos:column="42">hints<pos:position pos:line="41" pos:column="47"/></name></expr></argument>,
					<argument><expr><name pos:line="42" pos:column="41">res<pos:position pos:line="42" pos:column="44"/></name></expr></argument>)<pos:position pos:line="42" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="46"/></return>
		}<pos:position pos:line="43" pos:column="18"/></block></then></if></elseif> <else pos:line="43" pos:column="19">else <block pos:line="43" pos:column="24">{
			<return pos:line="44" pos:column="25">return <expr><call><name pos:line="44" pos:column="32">getaddr_info_name<pos:position pos:line="44" pos:column="49"/></name><argument_list pos:line="44" pos:column="49">(<argument><expr><name pos:line="44" pos:column="50">node<pos:position pos:line="44" pos:column="54"/></name></expr></argument>,
						<argument><expr><name pos:line="45" pos:column="49">service<pos:position pos:line="45" pos:column="56"/></name></expr></argument>,
						<argument><expr><operator pos:line="46" pos:column="49">&amp;<pos:position pos:line="46" pos:column="54"/></operator><name pos:line="46" pos:column="50">hints<pos:position pos:line="46" pos:column="55"/></name></expr></argument>,
						<argument><expr><name pos:line="47" pos:column="49">res<pos:position pos:line="47" pos:column="52"/></name></expr></argument>)<pos:position pos:line="47" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="54"/></return>
		}<pos:position pos:line="48" pos:column="18"/></block></else></if>
	}<pos:position pos:line="49" pos:column="10"/></block></then> <elseif pos:line="49" pos:column="11">else <if pos:line="49" pos:column="16">if <condition pos:line="49" pos:column="19">(<expr><name><name pos:line="49" pos:column="20">hints<pos:position pos:line="49" pos:column="25"/></name><operator pos:line="49" pos:column="25">.<pos:position pos:line="49" pos:column="26"/></operator><name pos:line="49" pos:column="26">ai_flags<pos:position pos:line="49" pos:column="34"/></name></name> <operator pos:line="49" pos:column="35">&amp;<pos:position pos:line="49" pos:column="40"/></operator> <name pos:line="49" pos:column="37">AI_PASSIVE<pos:position pos:line="49" pos:column="47"/></name></expr>)<pos:position pos:line="49" pos:column="48"/></condition><then pos:line="49" pos:column="48"> <block pos:line="49" pos:column="49">{
		<return pos:line="50" pos:column="17">return <expr><call><name pos:line="50" pos:column="24">getaddr_info_single_addr<pos:position pos:line="50" pos:column="48"/></name><argument_list pos:line="50" pos:column="48">(<argument><expr><name pos:line="50" pos:column="49">service<pos:position pos:line="50" pos:column="56"/></name></expr></argument>,
					<argument><expr><name pos:line="51" pos:column="41">INADDR_ANY<pos:position pos:line="51" pos:column="51"/></name></expr></argument>,
					<argument><expr><operator pos:line="52" pos:column="41">&amp;<pos:position pos:line="52" pos:column="46"/></operator><name pos:line="52" pos:column="42">hints<pos:position pos:line="52" pos:column="47"/></name></expr></argument>,
					<argument><expr><name pos:line="53" pos:column="41">res<pos:position pos:line="53" pos:column="44"/></name></expr></argument>)<pos:position pos:line="53" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="46"/></return>
	}<pos:position pos:line="54" pos:column="10"/></block></then></if></elseif></if>
	<return pos:line="55" pos:column="9">return <expr><call><name pos:line="55" pos:column="16">getaddr_info_single_addr<pos:position pos:line="55" pos:column="40"/></name><argument_list pos:line="55" pos:column="40">(<argument><expr><name pos:line="55" pos:column="41">service<pos:position pos:line="55" pos:column="48"/></name></expr></argument>,
					<argument><expr><name pos:line="56" pos:column="41">INADDR_LOOPBACK<pos:position pos:line="56" pos:column="56"/></name></expr></argument>,
					<argument><expr><operator pos:line="57" pos:column="41">&amp;<pos:position pos:line="57" pos:column="46"/></operator><name pos:line="57" pos:column="42">hints<pos:position pos:line="57" pos:column="47"/></name></expr></argument>,
					<argument><expr><name pos:line="58" pos:column="41">res<pos:position pos:line="58" pos:column="44"/></name></expr></argument>)<pos:position pos:line="58" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="46"/></return>
}<pos:position pos:line="59" pos:column="2"/></block></function></unit>
