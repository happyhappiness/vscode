<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/gumtree/rsync_repos_function_666_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">voidpf<pos:position pos:line="1" pos:column="7"/></name> <name pos:line="1" pos:column="8">ZLIB_INTERNAL<pos:position pos:line="1" pos:column="21"/></name></type> <name pos:line="1" pos:column="22">zcalloc<pos:position pos:line="1" pos:column="29"/></name> <parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><name pos:line="1" pos:column="31">voidpf<pos:position pos:line="1" pos:column="37"/></name></type> <name pos:line="1" pos:column="38">opaque<pos:position pos:line="1" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="46">unsigned<pos:position pos:line="1" pos:column="54"/></name></type> <name pos:line="1" pos:column="55">items<pos:position pos:line="1" pos:column="60"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="62">unsigned<pos:position pos:line="1" pos:column="70"/></name></type> <name pos:line="1" pos:column="71">size<pos:position pos:line="1" pos:column="75"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="76"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">voidpf<pos:position pos:line="3" pos:column="11"/></name></type> <name pos:line="3" pos:column="12">buf<pos:position pos:line="3" pos:column="15"/></name> <init pos:line="3" pos:column="16">= <expr><name pos:line="3" pos:column="18">opaque<pos:position pos:line="3" pos:column="24"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="25"/></decl_stmt> <comment type="block" pos:line="3" pos:column="26">/* just to make some compilers happy */</comment>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">ulg<pos:position pos:line="4" pos:column="8"/></name></type> <name pos:line="4" pos:column="9">bsize<pos:position pos:line="4" pos:column="14"/></name> <init pos:line="4" pos:column="15">= <expr><operator pos:line="4" pos:column="17">(<pos:position pos:line="4" pos:column="18"/></operator><name pos:line="4" pos:column="18">ulg<pos:position pos:line="4" pos:column="21"/></name><operator pos:line="4" pos:column="21">)<pos:position pos:line="4" pos:column="22"/></operator><name pos:line="4" pos:column="22">items<pos:position pos:line="4" pos:column="27"/></name><operator pos:line="4" pos:column="27">*<pos:position pos:line="4" pos:column="28"/></operator><name pos:line="4" pos:column="28">size<pos:position pos:line="4" pos:column="32"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="33"/></decl_stmt>

    <comment type="block" pos:line="6" pos:column="5">/* If we allocate less than 65520 bytes, we assume that farmalloc
     * will return a usable pointer which doesn't have to be normalized.
     */</comment>
    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><name pos:line="9" pos:column="9">bsize<pos:position pos:line="9" pos:column="14"/></name> <operator pos:line="9" pos:column="15">&lt;<pos:position pos:line="9" pos:column="19"/></operator> <literal type="number" pos:line="9" pos:column="17">65520L<pos:position pos:line="9" pos:column="23"/></literal></expr>)<pos:position pos:line="9" pos:column="24"/></condition><then pos:line="9" pos:column="24"> <block pos:line="9" pos:column="25">{
        <expr_stmt><expr><name pos:line="10" pos:column="9">buf<pos:position pos:line="10" pos:column="12"/></name> <operator pos:line="10" pos:column="13">=<pos:position pos:line="10" pos:column="14"/></operator> <call><name pos:line="10" pos:column="15">farmalloc<pos:position pos:line="10" pos:column="24"/></name><argument_list pos:line="10" pos:column="24">(<argument><expr><name pos:line="10" pos:column="25">bsize<pos:position pos:line="10" pos:column="30"/></name></expr></argument>)<pos:position pos:line="10" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="32"/></expr_stmt>
        <if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><operator pos:line="11" pos:column="13">*<pos:position pos:line="11" pos:column="14"/></operator><operator pos:line="11" pos:column="14">(<pos:position pos:line="11" pos:column="15"/></operator><name pos:line="11" pos:column="15">ush<pos:position pos:line="11" pos:column="18"/></name><operator pos:line="11" pos:column="18">*<pos:position pos:line="11" pos:column="19"/></operator><operator pos:line="11" pos:column="19">)<pos:position pos:line="11" pos:column="20"/></operator><operator pos:line="11" pos:column="20">&amp;<pos:position pos:line="11" pos:column="25"/></operator><name pos:line="11" pos:column="21">buf<pos:position pos:line="11" pos:column="24"/></name> <operator pos:line="11" pos:column="25">!=<pos:position pos:line="11" pos:column="27"/></operator> <literal type="number" pos:line="11" pos:column="28">0<pos:position pos:line="11" pos:column="29"/></literal></expr>)<pos:position pos:line="11" pos:column="30"/></condition><then pos:line="11" pos:column="30"> <block type="pseudo"><return pos:line="11" pos:column="31">return <expr><name pos:line="11" pos:column="38">buf<pos:position pos:line="11" pos:column="41"/></name></expr>;<pos:position pos:line="11" pos:column="42"/></return></block></then></if>
    }<pos:position pos:line="12" pos:column="6"/></block></then> <else pos:line="12" pos:column="7">else <block pos:line="12" pos:column="12">{
        <expr_stmt><expr><name pos:line="13" pos:column="9">buf<pos:position pos:line="13" pos:column="12"/></name> <operator pos:line="13" pos:column="13">=<pos:position pos:line="13" pos:column="14"/></operator> <call><name pos:line="13" pos:column="15">farmalloc<pos:position pos:line="13" pos:column="24"/></name><argument_list pos:line="13" pos:column="24">(<argument><expr><name pos:line="13" pos:column="25">bsize<pos:position pos:line="13" pos:column="30"/></name> <operator pos:line="13" pos:column="31">+<pos:position pos:line="13" pos:column="32"/></operator> <literal type="number" pos:line="13" pos:column="33">16L<pos:position pos:line="13" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="38"/></expr_stmt>
    }<pos:position pos:line="14" pos:column="6"/></block></else></if>
    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><name pos:line="15" pos:column="9">buf<pos:position pos:line="15" pos:column="12"/></name> <operator pos:line="15" pos:column="13">==<pos:position pos:line="15" pos:column="15"/></operator> <name pos:line="15" pos:column="16">NULL<pos:position pos:line="15" pos:column="20"/></name> <operator pos:line="15" pos:column="21">||<pos:position pos:line="15" pos:column="23"/></operator> <name pos:line="15" pos:column="24">next_ptr<pos:position pos:line="15" pos:column="32"/></name> <operator pos:line="15" pos:column="33">&gt;=<pos:position pos:line="15" pos:column="38"/></operator> <name pos:line="15" pos:column="36">MAX_PTR<pos:position pos:line="15" pos:column="43"/></name></expr>)<pos:position pos:line="15" pos:column="44"/></condition><then pos:line="15" pos:column="44"> <block type="pseudo"><return pos:line="15" pos:column="45">return <expr><name pos:line="15" pos:column="52">NULL<pos:position pos:line="15" pos:column="56"/></name></expr>;<pos:position pos:line="15" pos:column="57"/></return></block></then></if>
    <expr_stmt><expr><name><name pos:line="16" pos:column="5">table<pos:position pos:line="16" pos:column="10"/></name><index pos:line="16" pos:column="10">[<expr><name pos:line="16" pos:column="11">next_ptr<pos:position pos:line="16" pos:column="19"/></name></expr>]<pos:position pos:line="16" pos:column="20"/></index></name><operator pos:line="16" pos:column="20">.<pos:position pos:line="16" pos:column="21"/></operator><name pos:line="16" pos:column="21">org_ptr<pos:position pos:line="16" pos:column="28"/></name> <operator pos:line="16" pos:column="29">=<pos:position pos:line="16" pos:column="30"/></operator> <name pos:line="16" pos:column="31">buf<pos:position pos:line="16" pos:column="34"/></name></expr>;<pos:position pos:line="16" pos:column="35"/></expr_stmt>

    <comment type="block" pos:line="18" pos:column="5">/* Normalize the pointer to seg:0 */</comment>
    <expr_stmt><expr><operator pos:line="19" pos:column="5">*<pos:position pos:line="19" pos:column="6"/></operator><operator pos:line="19" pos:column="6">(<pos:position pos:line="19" pos:column="7"/></operator><operator pos:line="19" pos:column="7">(<pos:position pos:line="19" pos:column="8"/></operator><name pos:line="19" pos:column="8">ush<pos:position pos:line="19" pos:column="11"/></name><operator pos:line="19" pos:column="11">*<pos:position pos:line="19" pos:column="12"/></operator><operator pos:line="19" pos:column="12">)<pos:position pos:line="19" pos:column="13"/></operator><operator pos:line="19" pos:column="13">&amp;<pos:position pos:line="19" pos:column="18"/></operator><name pos:line="19" pos:column="14">buf<pos:position pos:line="19" pos:column="17"/></name><operator pos:line="19" pos:column="17">+<pos:position pos:line="19" pos:column="18"/></operator><literal type="number" pos:line="19" pos:column="18">1<pos:position pos:line="19" pos:column="19"/></literal><operator pos:line="19" pos:column="19">)<pos:position pos:line="19" pos:column="20"/></operator> <operator pos:line="19" pos:column="21">+=<pos:position pos:line="19" pos:column="23"/></operator> <operator pos:line="19" pos:column="24">(<pos:position pos:line="19" pos:column="25"/></operator><call pos:line="19" pos:column="25">(<name pos:line="19" pos:column="26">ush<pos:position pos:line="19" pos:column="29"/></name>)<argument_list pos:line="19" pos:column="30">(<argument><expr><operator pos:line="19" pos:column="31">(<pos:position pos:line="19" pos:column="32"/></operator><name pos:line="19" pos:column="32">uch<pos:position pos:line="19" pos:column="35"/></name><operator pos:line="19" pos:column="35">*<pos:position pos:line="19" pos:column="36"/></operator><operator pos:line="19" pos:column="36">)<pos:position pos:line="19" pos:column="37"/></operator><name pos:line="19" pos:column="37">buf<pos:position pos:line="19" pos:column="40"/></name><operator pos:line="19" pos:column="40">-<pos:position pos:line="19" pos:column="41"/></operator><literal type="number" pos:line="19" pos:column="41">0<pos:position pos:line="19" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="43"/></argument_list></call> <operator pos:line="19" pos:column="44">+<pos:position pos:line="19" pos:column="45"/></operator> <literal type="number" pos:line="19" pos:column="46">15<pos:position pos:line="19" pos:column="48"/></literal><operator pos:line="19" pos:column="48">)<pos:position pos:line="19" pos:column="49"/></operator> <operator pos:line="19" pos:column="50">&gt;&gt;<pos:position pos:line="19" pos:column="55"/></operator> <literal type="number" pos:line="19" pos:column="53">4<pos:position pos:line="19" pos:column="54"/></literal></expr>;<pos:position pos:line="19" pos:column="55"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="20" pos:column="5">*<pos:position pos:line="20" pos:column="6"/></operator><operator pos:line="20" pos:column="6">(<pos:position pos:line="20" pos:column="7"/></operator><name pos:line="20" pos:column="7">ush<pos:position pos:line="20" pos:column="10"/></name><operator pos:line="20" pos:column="10">*<pos:position pos:line="20" pos:column="11"/></operator><operator pos:line="20" pos:column="11">)<pos:position pos:line="20" pos:column="12"/></operator><operator pos:line="20" pos:column="12">&amp;<pos:position pos:line="20" pos:column="17"/></operator><name pos:line="20" pos:column="13">buf<pos:position pos:line="20" pos:column="16"/></name> <operator pos:line="20" pos:column="17">=<pos:position pos:line="20" pos:column="18"/></operator> <literal type="number" pos:line="20" pos:column="19">0<pos:position pos:line="20" pos:column="20"/></literal></expr>;<pos:position pos:line="20" pos:column="21"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="21" pos:column="5">table<pos:position pos:line="21" pos:column="10"/></name><index pos:line="21" pos:column="10">[<expr><name pos:line="21" pos:column="11">next_ptr<pos:position pos:line="21" pos:column="19"/></name><operator pos:line="21" pos:column="19">++<pos:position pos:line="21" pos:column="21"/></operator></expr>]<pos:position pos:line="21" pos:column="22"/></index></name><operator pos:line="21" pos:column="22">.<pos:position pos:line="21" pos:column="23"/></operator><name pos:line="21" pos:column="23">new_ptr<pos:position pos:line="21" pos:column="30"/></name> <operator pos:line="21" pos:column="31">=<pos:position pos:line="21" pos:column="32"/></operator> <name pos:line="21" pos:column="33">buf<pos:position pos:line="21" pos:column="36"/></name></expr>;<pos:position pos:line="21" pos:column="37"/></expr_stmt>
    <return pos:line="22" pos:column="5">return <expr><name pos:line="22" pos:column="12">buf<pos:position pos:line="22" pos:column="15"/></name></expr>;<pos:position pos:line="22" pos:column="16"/></return>
}<pos:position pos:line="23" pos:column="2"/></block></function></unit>
