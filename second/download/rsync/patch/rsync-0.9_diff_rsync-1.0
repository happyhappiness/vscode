diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-0.9/config.h.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-1.0/config.h.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-0.9/config.h.in	1996-06-16 10:51:30.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-1.0/config.h.in	1996-06-22 13:32:05.000000000 +0800
@@ -45,15 +45,19 @@
 #undef HAVE_STRTOK
 #undef HAVE_WAITPID
 #undef HAVE_BCOPY
 #undef HAVE_BZERO
 #undef HAVE_READLINK
 #undef HAVE_UTIME
+#undef HAVE_UTIMES
 #undef HAVE_GETOPT_LONG
 #undef HAVE_FNMATCH
 
+/* for signal declarations */
+#undef RETSIGTYPE
+
 /* needed for mknod */
 #undef HAVE_ST_RDEV
 
 /* Define if the system does not provide POSIX.1 features except
    with this defined.  */
 #undef _POSIX_1_SOURCE
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-0.9/configure.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-1.0/configure.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-0.9/configure.in	1996-06-21 20:18:20.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-1.0/configure.in	1996-06-22 11:45:44.000000000 +0800
@@ -34,13 +34,13 @@
 echo no)
 
 AC_FUNC_MEMCMP
 AC_FUNC_MMAP
 AC_FUNC_UTIME_NULL
 AC_CHECK_FUNCS(waitpid strtok pipe getcwd mkdir strdup strerror chown chmod mknod)
-AC_CHECK_FUNCS(fchmod fstat strchr bcopy bzero readlink utime getopt_long)
+AC_CHECK_FUNCS(fchmod fstat strchr bcopy bzero readlink utime utimes getopt_long)
 
 echo -n "checking for working fnmatch... "
 AC_TRY_RUN([#include <fnmatch.h>
 main() { exit(fnmatch("*.o", "x.o", 0) == 0? 0: 1); }],
 echo yes;AC_DEFINE(HAVE_FNMATCH), 
 echo no)
Only in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-1.0: foobar
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-0.9/main.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-1.0/main.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-0.9/main.c	1996-06-21 20:18:20.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-1.0/main.c	1996-06-22 13:32:05.000000000 +0800
@@ -647,12 +647,13 @@
 	      shell_machine?shell_machine:"",
 	      shell_user?shell_user:"",
 	      shell_path?shell_path:"");
     }
     
     signal(SIGCHLD,SIG_IGN);
+    signal(SIGINT,SIGNAL_CAST sig_int);
 
     if (!sender && argc != 1) {
       usage(stderr);
       exit(1);
     }
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-0.9/proto.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-1.0/proto.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-0.9/proto.h	1996-06-20 20:42:26.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-1.0/proto.h	1996-06-22 13:32:05.000000000 +0800
@@ -19,12 +19,13 @@
 void do_server_sender(int argc,char *argv[]);
 void do_server_recv(int argc,char *argv[]);
 int main(int argc,char *argv[]);
 void match_sums(int f,struct sum_struct *s,char *buf,off_t len);
 void match_report(void);
 void recv_generator(char *fname,struct file_list *flist,int i,int f_out);
+void sig_int(void);
 int recv_files(int f_in,struct file_list *flist,char *local_name);
 off_t send_files(struct file_list *flist,int f_out,int f_in);
 void generate_files(int f,struct file_list *flist,char *local_name);
 int write_total(void);
 int read_total(void);
 void write_int(int f,int x);
@@ -35,6 +36,7 @@
 void read_buf(int f,char *buf,int len);
 char *map_file(int fd,off_t len);
 void unmap_file(char *buf,off_t len);
 int read_write(int fd_in,int fd_out,int size);
 int piped_child(char **command,int *f_in,int *f_out);
 void out_of_memory(char *str);
+int set_modtime(char *fname,time_t modtime);
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-0.9/README /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-1.0/README
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-0.9/README	1996-06-20 20:59:41.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-1.0/README	1996-06-22 10:35:09.000000000 +0800
@@ -35,12 +35,13 @@
 -D, --devices            preserve devices (root only)
 -t, --times              preserve times
 -n, --dry-run            show what would have been transferred
 -x, --one-file-system    don't cross filesystem boundaries
 -B, --block-size SIZE    checksum blocking size
 -e, --rsh COMMAND        specify rsh replacement
+    --rsync-path PATH    specify path to rsync on the remote machine
 -C, --cvs-exclude        auto ignore files in the same way CVS does
     --delete             delete files that don't exist on the sending side
 -I, --ignore-times       don't exclude files that match length and time
     --exclude FILE       exclude file FILE
     --exclude-from FILE  exclude files listed in FILE
     --suffix SUFFIX      override backup suffix
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-0.9/rsync.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-1.0/rsync.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-0.9/rsync.c	1996-06-20 20:54:25.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-1.0/rsync.c	1996-06-22 13:32:05.000000000 +0800
@@ -200,25 +200,20 @@
       fprintf(stderr,"stat %s : %s\n",fname,strerror(errno));
       return;
     }
     st = &st2;
   }
 
-#ifdef HAVE_UTIME
   if (preserve_times && st->st_mtime != file->modtime) {
-    struct utimbuf tbuf;  
     updated = 1;
-    tbuf.actime = time(NULL);
-    tbuf.modtime = file->modtime;
-    if (utime(fname,&tbuf) != 0) {
+    if (set_modtime(fname,file->modtime) != 0) {
       fprintf(stderr,"failed to set times on %s : %s\n",
 	      fname,strerror(errno));
       return;
     }
   }
-#endif
 
 #ifdef HAVE_CHMOD
   if (preserve_perms && st->st_mode != file->mode) {
     updated = 1;
     if (chmod(fname,file->mode) != 0) {
       fprintf(stderr,"failed to set permissions on %s : %s\n",
@@ -469,12 +464,21 @@
     if (-1 == flist_find(flist,&local_file_list->files[i])) {
       delete_one(&local_file_list->files[i]);
     }    
   }
 }
 
+static char *cleanup_fname = NULL;
+
+void sig_int(void)
+{
+  if (cleanup_fname)
+    unlink(cleanup_fname);
+  exit(1);
+}
+
 
 int recv_files(int f_in,struct file_list *flist,char *local_name)
 {  
   int fd1,fd2;
   struct stat st;
   char *fname;
@@ -506,31 +510,27 @@
       }
 
       if (verbose > 2)
 	fprintf(stderr,"recv_files(%s)\n",fname);
 
       /* open the file */  
-      if ((fd1 = open(fname,O_RDONLY)) == -1 &&
-	  (fd1 = open(fname,O_RDONLY|O_CREAT,flist->files[i].mode)) == -1) {
-	fprintf(stderr,"recv_files failed to open %s\n",fname);
-	return -1;
-      }
+      fd1 = open(fname,O_RDONLY);
 
-      if (fstat(fd1,&st) != 0) {
+      if (fd1 != -1 && fstat(fd1,&st) != 0) {
 	fprintf(stderr,"fstat %s : %s\n",fname,strerror(errno));
 	close(fd1);
 	return -1;
       }
 
-      if (!S_ISREG(st.st_mode)) {
+      if (fd1 != -1 && !S_ISREG(st.st_mode)) {
 	fprintf(stderr,"%s : not a regular file\n",fname);
 	close(fd1);
 	return -1;
       }
 
-      if (st.st_size > 0) {
+      if (fd1 != -1 && st.st_size > 0) {
 	buf = map_file(fd1,st.st_size);
 	if (!buf) {
 	  fprintf(stderr,"map_file failed\n");
 	  return -1;
 	}
       } else {
@@ -548,40 +548,44 @@
       }
       fd2 = open(fnametmp,O_WRONLY|O_CREAT,st.st_mode);
       if (fd2 == -1) {
 	fprintf(stderr,"open %s : %s\n",fnametmp,strerror(errno));
 	return -1;
       }
+      
+      cleanup_fname = fnametmp;
 
       if (!am_server && verbose)
 	printf("%s\n",fname);
 
       /* recv file data */
       receive_data(f_in,buf,fd2,fname);
 
-      close(fd1);
+      if (fd1 != -1) close(fd1);
       close(fd2);
 
       if (verbose > 2)
 	fprintf(stderr,"renaming %s to %s\n",fnametmp,fname);
 
       if (make_backups) {
 	char fnamebak[MAXPATHLEN];
 	sprintf(fnamebak,"%s%s",fname,backup_suffix);
-	if (rename(fname,fnamebak) != 0) {
+	if (rename(fname,fnamebak) != 0 && errno != ENOENT) {
 	  fprintf(stderr,"rename %s %s : %s\n",fname,fnamebak,strerror(errno));
 	  exit(1);
 	}
       }
 
       /* move tmp file over real file */
       if (rename(fnametmp,fname) != 0) {
 	fprintf(stderr,"rename %s -> %s : %s\n",
 		fnametmp,fname,strerror(errno));
       }
 
+      cleanup_fname = NULL;
+
       unmap_file(buf,st.st_size);
 
       set_perms(fname,&flist->files[i],NULL,0);
     }
 
   if (verbose > 2)
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-0.9/rsync.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-1.0/rsync.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-0.9/rsync.h	1996-06-20 20:42:27.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-1.0/rsync.h	1996-06-22 13:32:05.000000000 +0800
@@ -85,13 +85,15 @@
 #ifdef HAVE_GRP_H
 #include <grp.h>
 #endif
 #include <errno.h>
 
 #include <sys/mman.h>
+#ifdef HAVE_UTIME_H
 #include <utime.h>
+#endif
 
 #ifdef HAVE_FNMATCH
 #include <fnmatch.h>
 #else
 #include "lib/fnmatch.h"
 #endif
@@ -221,6 +223,8 @@
 
 #define SUPPORT_LINKS (HAVE_READLINK && defined(S_ISLNK))
 
 #if !SUPPORT_LINKS
 #define lstat stat
 #endif
+
+#define SIGNAL_CAST (RETSIGTYPE (*)())
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-0.9/util.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-1.0/util.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-0.9/util.c	1996-06-20 20:42:27.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-1.0/util.c	1996-06-22 11:52:53.000000000 +0800
@@ -201,6 +201,29 @@
   char *ret = (char *)malloc(l);
   if (ret)
     strcpy(ret,s);
   return ret;
 }
 #endif
+
+
+int set_modtime(char *fname,time_t modtime)
+{
+#ifdef HAVE_UTIME_H
+  struct utimbuf tbuf;  
+  tbuf.actime = time(NULL);
+  tbuf.modtime = modtime;
+  return utime(fname,&tbuf);
+#elif defined(HAVE_UTIME)
+  time_t t[2];
+  t[0] = time(NULL);
+  t[1] = modtime;
+  return utime(fname,t);
+#else
+  struct timeval t[2];
+  t[0].tv_sec = time(NULL);
+  t[0].tv_usec = 0;
+  t[1].tv_sec = modtime;
+  t[1].tv_usec = 0;
+  return utimes(fname,t);
+#endif
+}
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-0.9/version.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-1.0/version.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-0.9/version.h	1996-06-21 20:18:20.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-1.0/version.h	1996-06-24 07:52:31.000000000 +0800
@@ -1 +1 @@
-#define VERSION "0.9"
+#define VERSION "1.0"
