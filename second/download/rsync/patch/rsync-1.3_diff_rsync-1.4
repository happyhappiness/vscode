diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-1.3/config.h.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-1.4/config.h.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-1.3/config.h.in	1996-06-25 15:25:34.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-1.4/config.h.in	1996-06-27 00:02:01.000000000 +0800
@@ -51,13 +51,13 @@
 #undef HAVE_READLINK
 #undef HAVE_UTIME
 #undef HAVE_UTIMES
 #undef HAVE_GETOPT_LONG
 #undef HAVE_FNMATCH
 #undef HAVE_MEMMOVE
-
+#undef HAVE_MMAP
 
 
 #ifndef HAVE_MEMMOVE
 #define memmove(d,s,n) bcopy(s,d,n)
 #endif
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-1.3/match.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-1.4/match.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-1.3/match.c	1996-06-26 09:27:22.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-1.4/match.c	1996-06-27 00:02:01.000000000 +0800
@@ -84,24 +84,30 @@
 
 
 
 static off_t last_match;
 
 
-static void matched(int f,struct sum_struct *s,char *buf,off_t len,int offset,int i)
+static void matched(int f,struct sum_struct *s,char *buf,off_t len,
+		    int offset,int i)
 {
   int n = offset - last_match;
   
   if (verbose > 2)
     if (i != -1)
       fprintf(stderr,"match at %d last_match=%d j=%d len=%d n=%d\n",
 	      (int)offset,(int)last_match,i,(int)s->sums[i].len,n);
 
   if (n > 0) {
+    int l = 0;
     write_int(f,n);
-    write_buf(f,buf+last_match,n);
+    while (l < n) {
+      int n1 = MIN(WRITE_BLOCK_SIZE,n-l);
+      write_buf(f,map_ptr(buf,last_match+l,n1),n1);
+      l += n1;
+    }
     data_transfer += n;
   }
   write_int(f,-(i+1));
   if (i != -1)
     last_match = offset + s->sums[i].len;
   if (n > 0)
@@ -111,19 +117,23 @@
 
 static void hash_search(int f,struct sum_struct *s,char *buf,off_t len)
 {
   int offset,j,k;
   int end;
   char sum2[SUM_LENGTH];
-  uint32 s1, s2, sum;
+  uint32 s1, s2, sum; 
+  char *map;
 
   if (verbose > 2)
     fprintf(stderr,"hash search b=%d len=%d\n",s->n,(int)len);
 
   k = MIN(len, s->n);
-  sum = get_checksum1(buf, k);
+
+  map = map_ptr(buf,0,k);
+
+  sum = get_checksum1(map, k);
   s1 = sum & 0xFFFF;
   s2 = sum >> 16;
   if (verbose > 3)
     fprintf(stderr, "sum=%.8x k=%d\n", sum, k);
 
   offset = 0;
@@ -152,20 +162,23 @@
 	if (sum == s->sums[i].sum1) {
 	  if (verbose > 3)
 	    fprintf(stderr,"potential match at %d target=%d %d sum=%08x\n",
 		    offset,j,i,sum);
 
 	  if (!done_csum2) {
-	    get_checksum2(buf+offset,MIN(s->n,len-offset),sum2);
+	    int l = MIN(s->n,len-offset);
+	    map = map_ptr(buf,offset,l);
+	    get_checksum2(map,l,sum2);
 	    done_csum2 = 1;
 	  }
 	  if (memcmp(sum2,s->sums[i].sum2,SUM_LENGTH) == 0) {
 	    matched(f,s,buf,len,offset,i);
 	    offset += s->sums[i].len - 1;
 	    k = MIN((len-offset), s->n);
-	    sum = get_checksum1(buf+offset, k);
+	    map = map_ptr(buf,offset,k);
+	    sum = get_checksum1(map, k);
 	    s1 = sum & 0xFFFF;
 	    s2 = sum >> 16;
 	    ++matches;
 	    break;
 	  } else {
 	    false_alarms++;
@@ -173,27 +186,24 @@
 	}
 	j++;
       } while (j<s->count && targets[j].t == t);
     }
 
     /* Trim off the first byte from the checksum */
-    s1 -= buf[offset];
-    s2 -= k * buf[offset];
+    map = map_ptr(buf,offset,k+1);
+    s1 -= map[0];
+    s2 -= k * map[0];
 
     /* Add on the next byte (if there is one) to the checksum */
     if (k < (len-offset)) {
-      s1 += buf[offset+k];
+      s1 += map[k];
       s2 += s1;
     } else {
       --k;
     }
 
-    if (verbose > 3) 
-      fprintf(stderr,"s2:s1 = %.4x%.4x sum=%.8x k=%d offset=%d took %x added %x\n",
-	      s2&0xffff, s1&0xffff, get_checksum1(buf+offset+1,k),
-	      k, (int)offset, buf[offset], buf[offset+k]);
   } while (++offset < end);
 
   matched(f,s,buf,len,len,-1);
 }
 
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-1.3/proto.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-1.4/proto.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-1.3/proto.h	1996-06-26 21:37:31.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-1.4/proto.h	1996-06-27 00:02:01.000000000 +0800
@@ -36,11 +36,12 @@
 void sig_int(void);
 int recv_files(int f_in,struct file_list *flist,char *local_name);
 off_t send_files(struct file_list *flist,int f_out,int f_in);
 void generate_files(int f,struct file_list *flist,char *local_name);
 int num_waiting(int fd);
 char *map_file(int fd,off_t len);
+char *map_ptr(char *buf,off_t offset,int len);
 void unmap_file(char *buf,off_t len);
 int piped_child(char **command,int *f_in,int *f_out);
 void out_of_memory(char *str);
 int set_modtime(char *fname,time_t modtime);
 int set_blocking(int fd, int set);
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-1.3/rsync.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-1.4/rsync.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-1.3/rsync.c	1996-06-26 21:37:31.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-1.4/rsync.c	1996-06-27 00:02:01.000000000 +0800
@@ -108,26 +108,26 @@
 
   s->sums = (struct sum_buf *)malloc(sizeof(s->sums[0])*s->count);
   if (!s->sums) out_of_memory("generate_sums");
   
   for (i=0;i<count;i++) {
     int n1 = MIN(len,n);
+    char *map = map_ptr(buf,offset,n1);
 
-    s->sums[i].sum1 = get_checksum1(buf,n1);
-    get_checksum2(buf,n1,s->sums[i].sum2);
+    s->sums[i].sum1 = get_checksum1(map,n1);
+    get_checksum2(map,n1,s->sums[i].sum2);
 
     s->sums[i].offset = offset;
     s->sums[i].len = n1;
     s->sums[i].i = i;
 
     if (verbose > 3)
       fprintf(stderr,"chunk[%d] offset=%d len=%d sum1=%08x\n",
 	      i,(int)s->sums[i].offset,s->sums[i].len,s->sums[i].sum1);
 
     len -= n1;
-    buf += n1;
     offset += n1;
   }
 
   return s;
 }
 
@@ -360,17 +360,12 @@
     fprintf(stderr,"failed to open %s : %s\n",fname,strerror(errno));
     return;
   }
 
   if (st.st_size > 0) {
     buf = map_file(fd,st.st_size);
-    if (!buf) {
-      fprintf(stderr,"mmap : %s\n",strerror(errno));
-      close(fd);
-      return;
-    }
   } else {
     buf = NULL;
   }
 
   if (verbose > 3)
     fprintf(stderr,"mapped %s of size %d\n",fname,(int)st.st_size);
@@ -417,13 +412,13 @@
 	len = remainder;
 
       if (verbose > 3)
 	fprintf(stderr,"chunk[%d] of size %d at %d offset=%d\n",
 		i,len,(int)offset2,(int)offset);
 
-      if (write(fd,buf+offset2,len) != len) {
+      if (write(fd,map_ptr(buf,offset2,len),len) != len) {
 	fprintf(stderr,"write failed on %s : %s\n",fname,strerror(errno));
 	exit(1);
       }
       offset += len;
     }
   }
@@ -526,16 +521,12 @@
 	close(fd1);
 	return -1;
       }
 
       if (fd1 != -1 && st.st_size > 0) {
 	buf = map_file(fd1,st.st_size);
-	if (!buf) {
-	  fprintf(stderr,"map_file failed\n");
-	  return -1;
-	}
       } else {
 	buf = NULL;
       }
 
       if (verbose > 2)
 	fprintf(stderr,"mapped %s of size %d\n",fname,(int)st.st_size);
@@ -543,13 +534,13 @@
       /* open tmp file */
       sprintf(fnametmp,"%s.XXXXXX",fname);
       if (NULL == mktemp(fnametmp)) {
 	fprintf(stderr,"mktemp %s failed\n",fnametmp);
 	return -1;
       }
-      fd2 = open(fnametmp,O_WRONLY|O_CREAT,st.st_mode);
+      fd2 = open(fnametmp,O_WRONLY|O_CREAT,flist->files[i].mode);
       if (fd2 == -1) {
 	fprintf(stderr,"open %s : %s\n",fnametmp,strerror(errno));
 	return -1;
       }
       
       cleanup_fname = fnametmp;
@@ -652,16 +643,12 @@
 	fprintf(stderr,"fstat failed : %s\n",strerror(errno));
 	return -1;
       }
       
       if (st.st_size > 0) {
 	buf = map_file(fd,st.st_size);
-	if (!buf) {
-	  fprintf(stderr,"map_file failed : %s\n",strerror(errno));	  
-	  return -1;
-	}
       } else {
 	buf = NULL;
       }
 
       if (verbose > 2)
 	fprintf(stderr,"send_files mapped %s of size %d\n",
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-1.3/rsync.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-1.4/rsync.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-1.3/rsync.h	1996-06-26 21:37:32.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-1.4/rsync.h	1996-06-27 00:02:01.000000000 +0800
@@ -26,12 +26,13 @@
 /* update this if you make incompatible changes */
 #define PROTOCOL_VERSION 10
 #define MIN_PROTOCOL_VERSION 10
 
 /* block size to write files in */
 #define WRITE_BLOCK_SIZE (32*1024)
+#define MAX_MAP_SIZE (4*1024*1024)
 
 #define BLOCKING_TIMEOUT 10
 
 #include "config.h"
 
 #include <sys/types.h>
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-1.3/util.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-1.4/util.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-1.3/util.c	1996-06-26 09:34:14.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-1.4/util.c	1996-06-27 00:02:01.000000000 +0800
@@ -28,22 +28,77 @@
 {
   int len=0;
   ioctl(fd,FIONREAD,&len);
   return(len);
 }
 
+static int map_fd = -1;
+static off_t map_size = 0;
+static char *p = NULL;
+static int p_size = 0;
+static int p_offset = 0;
+static int p_len = 0;
+
+
 char *map_file(int fd,off_t len)
 {
-  char *ret = (char *)mmap(NULL,len,PROT_READ,MAP_SHARED,fd,0);
+  char *ret = NULL;
+#ifdef HAVE_MMAP
+  if (len < MAX_MAP_SIZE)
+    ret = (char *)mmap(NULL,len,PROT_READ,MAP_SHARED,fd,0);
+#endif
+  map_fd = fd;
+  map_size = len; 
   return ret;
 }
 
+char *map_ptr(char *buf,off_t offset,int len)
+{
+  if (buf)
+    return buf+offset;
+
+  if (len == 0) 
+    return NULL;
+
+  len = MIN(len,map_size-offset);
+
+  if (offset >= p_offset && 
+      offset+len <= p_offset+p_len) {
+    return (p + (offset - p_offset));
+  }
+
+  len = MAX(len,WRITE_BLOCK_SIZE);
+  len = MIN(len,map_size - offset);  
+
+  if (len > p_size) {
+    if (p) free(p);
+    p = (char *)malloc(len);
+    if (!p) out_of_memory("map_ptr");
+    p_size = len;
+  }
+
+  if (lseek(map_fd,offset,SEEK_SET) != offset ||
+      read(map_fd,p,len) != len) {
+    fprintf(stderr,"EOF in map_ptr!\n");
+    exit(1);
+  }
+
+  p_offset = offset;
+  p_len = len;
+
+  return p; 
+}
+
+
 void unmap_file(char *buf,off_t len)
 {
   if (len > 0 && buf)
     munmap(buf,len);
+  map_fd = -1;
+  map_size = 0;
+  p_len = 0;
 }
 
 
 /* this is taken from CVS */
 int piped_child(char **command,int *f_in,int *f_out)
 {
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-1.3/version.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-1.4/version.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-1.3/version.h	1996-06-26 11:21:10.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-1.4/version.h	1996-06-27 00:02:38.000000000 +0800
@@ -1 +1 @@
-#define VERSION "1.3"
+#define VERSION "1.4"
