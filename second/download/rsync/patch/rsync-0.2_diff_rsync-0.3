diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-0.2/main.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-0.3/main.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-0.2/main.c	1996-06-16 13:05:08.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-0.3/main.c	1996-06-16 15:06:55.000000000 +0800
@@ -33,25 +33,26 @@
 int preserve_devices = 0;
 int preserve_uid = 0;
 int preserve_gid = 0;
 int preserve_times = 0;
 int update_only = 0;
 int cvs_exclude = 0;
+int dry_run=0;
 
-static int server = 0;
+int am_server = 0;
 static int sender = 0;
 static int recurse = 0;
 
 static void report(int f)
 {
   int in,out,tsize;
   time_t t = time(NULL);
   
   if (!verbose) return;
 
-  if (server && sender) {
+  if (am_server && sender) {
     write_int(f,read_total());
     write_int(f,write_total());
     write_int(f,total_size);
     write_flush(f);
     return;
   }
@@ -89,12 +90,14 @@
   for (i=0;i<verbose;i++)
     argstr[x++] = 'v';
   if (make_backups)
     argstr[x++] = 'b';
   if (update_only)
     argstr[x++] = 'u';
+  if (dry_run)
+    argstr[x++] = 'n';
   if (preserve_links)
     argstr[x++] = 'l';
   if (preserve_uid)
     argstr[x++] = 'o';
   if (preserve_gid)
     argstr[x++] = 'g';
@@ -271,42 +274,44 @@
   if (!flist) {
     fprintf(stderr,"nothing to do\n");
     exit(1);
   }
 
   if ((pid=fork()) == 0) {
-    if (verbose > 2)
-      fprintf(stderr,"generator starting pid=%d count=%d\n",
-	      (int)getpid(),flist->count);
-
-    for (i = 0; i < flist->count; i++) {
-      if (S_ISDIR(flist->files[i].mode)) {
-	if (mkdir(flist->files[i].name,flist->files[i].mode) != 0 && 
-	    errno != EEXIST) {	 
-	  fprintf(stderr,"mkdir %s: %s\n",
-		  flist->files[i].name,strerror(errno));
-	  exit(1);
-	}
-	continue;
-      }
-      fname = flist->files[i].name;
-      if (flist->count == 1 &&
-	  argc > 0)
-	fname = argv[0];
-      recv_generator(fname,flist,i,STDOUT_FILENO);
-    }
-    write_int(STDOUT_FILENO,-1);
-    write_flush(STDOUT_FILENO);
+    recv_files(STDIN_FILENO,flist,fname);
     if (verbose > 1)
-      fprintf(stderr,"generator wrote %d\n",write_total());
+      fprintf(stderr,"receiver read %d\n",read_total());
     exit(0);
   }
 
-  recv_files(STDIN_FILENO,flist,fname);
+  if (verbose > 2)
+    fprintf(stderr,"generator starting pid=%d count=%d\n",
+	    (int)getpid(),flist->count);
+
+  for (i = 0; i < flist->count; i++) {
+    if (S_ISDIR(flist->files[i].mode)) {
+      if (dry_run) continue;
+      if (mkdir(flist->files[i].name,flist->files[i].mode) != 0 && 
+	  errno != EEXIST) {	 
+	fprintf(stderr,"mkdir %s: %s\n",
+		flist->files[i].name,strerror(errno));
+	exit(1);
+      }
+      continue;
+    }
+    fname = flist->files[i].name;
+    if (flist->count == 1 &&
+	argc > 0)
+      fname = argv[0];
+    recv_generator(fname,flist,i,STDOUT_FILENO);
+  }
+  write_int(STDOUT_FILENO,-1);
+  write_flush(STDOUT_FILENO);
   if (verbose > 1)
-    fprintf(stderr,"receiver read %d\n",read_total());
+    fprintf(stderr,"generator wrote %d\n",write_total());
+
   waitpid(pid, &status, 0);
   exit(status);
 }
 
 
 static void usage(FILE *f)
@@ -325,12 +330,13 @@
   fprintf(f,"-l, --links              preserve soft links\n");
   fprintf(f,"-p, --perms              preserve permissions\n");
   fprintf(f,"-o, --owner              preserve owner (root only)\n");
   fprintf(f,"-g, --group              preserve group\n");
   fprintf(f,"-D, --devices            preserve devices (root only)\n");
   fprintf(f,"-t, --times              preserve times\n");  
+  fprintf(f,"-n, --dry-run            show what would have been transferred\n");
   fprintf(f,"-B, --block-size SIZE    checksum blocking size\n");  
   fprintf(f,"-e, --rsh COMMAND        specify rsh replacement\n");
   fprintf(f,"-C, --cvs-exclude        auto ignore files in the same way CVS does\n");
   fprintf(f,"    --exclude FILE       exclude file FILE\n");
   fprintf(f,"    --exclude-from FILE  exclude files listed in FILE\n");
   fprintf(f,"    --suffix SUFFIX      override backup suffix\n");  
@@ -340,21 +346,22 @@
   fprintf(f,"the backup suffix defaults to %s\n",BACKUP_SUFFIX);
   fprintf(f,"the block size defaults to %d\n",BLOCK_SIZE);  
 }
 
 enum {OPT_VERSION,OPT_SUFFIX,OPT_SENDER,OPT_SERVER,OPT_EXCLUDE,OPT_EXCLUDE_FROM};
 
-static char *short_options = "oblpguDCtcahvre:B:";
+static char *short_options = "oblpguDCtcahvrne:B:";
 
 static struct option long_options[] = {
   {"version",     0,     0,    OPT_VERSION},
   {"server",      0,     0,    OPT_SERVER},
   {"sender",      0,     0,    OPT_SENDER},
   {"exclude",     1,     0,    OPT_EXCLUDE},
   {"exclude-from",1,     0,    OPT_EXCLUDE_FROM},
   {"help",        0,     0,    'h'},
+  {"dry-run",     0,     0,    'n'},
   {"cvs-exclude", 0,     0,    'C'},
   {"archive",     0,     0,    'a'},
   {"checksum",    0,     0,    'c'},
   {"backup",      0,     0,    'b'},
   {"update",      0,     0,    'u'},
   {"verbose",     0,     0,    'v'},
@@ -413,12 +420,16 @@
 	  exit(0);
 
 	case 'b':
 	  make_backups=1;
 	  break;
 
+	case 'n':
+	  dry_run=1;
+	  break;
+
 	case 'C':
 	  cvs_exclude=1;
 	  break;
 
 	case 'u':
 	  update_only=1;
@@ -480,17 +491,17 @@
 	    preserve_devices=1;
 	    preserve_uid=1;
 	  }	    
 	  break;
 
 	case OPT_SERVER:
-	  server = 1;
+	  am_server = 1;
 	  break;
 
 	case OPT_SENDER:
-	  if (!server) {
+	  if (!am_server) {
 	    usage(stderr);
 	    exit(1);
 	  }
 	  sender = 1;
 	  break;
 
@@ -513,14 +524,16 @@
 
     while (optind--) {
       argc--;
       argv++;
     }
 
+    if (dry_run)
+      verbose = MAX(verbose,1);
 
-    if (server) {
+    if (am_server) {
       int version = read_int(STDIN_FILENO);
       if (version != PROTOCOL_VERSION) {
 	fprintf(stderr,"protocol version mismatch %d %d\n",
 		version,PROTOCOL_VERSION);
 	exit(1);
       }
@@ -643,35 +656,40 @@
 	}
       } else {
 	local_name = argv[0];
       }
     }
 
+
     if ((pid2=fork()) == 0) {
-      for (i = 0; i < flist->count; i++) {
-	if (S_ISDIR(flist->files[i].mode)) {
-	  if (mkdir(flist->files[i].name,flist->files[i].mode) != 0 &&
-	      errno != EEXIST) {
-	    fprintf(stderr,"mkdir %s : %s\n",
-		    flist->files[i].name,strerror(errno));
-	  }
-	  continue;
-	}
-	recv_generator(local_name?local_name:flist->files[i].name,
-		       flist,i,f_out);
-      }
-      write_int(f_out,-1);
-      write_flush(f_out);
+      recv_files(f_in,flist,local_name);
       if (verbose > 1)
-	fprintf(stderr,"generator wrote %d\n",write_total());
+	fprintf(stderr,"receiver read %d\n",read_total());
       exit(0);
     }
 
-    recv_files(f_in,flist,local_name);
-    report(f_in);
+    for (i = 0; i < flist->count; i++) {
+      if (S_ISDIR(flist->files[i].mode)) {
+	if (dry_run) continue;
+	if (mkdir(flist->files[i].name,flist->files[i].mode) != 0 &&
+	    errno != EEXIST) {
+	  fprintf(stderr,"mkdir %s : %s\n",
+		  flist->files[i].name,strerror(errno));
+	}
+	continue;
+      }
+      recv_generator(local_name?local_name:flist->files[i].name,
+		     flist,i,f_out);
+    }
+    write_int(f_out,-1);
+    write_flush(f_out);
     if (verbose > 1)
-      fprintf(stderr,"receiver read %d\n",read_total());
-    waitpid(pid, &status, 0);
+      fprintf(stderr,"generator wrote %d\n",write_total());
+    
     waitpid(pid2, &status2, 0);
 
+    report(f_in);
+
+    waitpid(pid, &status, 0);
+
     return status | status2;
 }
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-0.2/rsync.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-0.3/rsync.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-0.2/rsync.c	1996-06-16 08:11:09.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-0.3/rsync.c	1996-06-16 15:51:54.000000000 +0800
@@ -17,12 +17,13 @@
    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */
 
 #include "rsync.h"
 
 extern int verbose;
+extern int am_server;
 extern int always_checksum;
 extern time_t starttime;
 
 extern char *backup_suffix;
 
 extern int block_size;
@@ -31,12 +32,13 @@
 extern int preserve_links;
 extern int preserve_perms;
 extern int preserve_devices;
 extern int preserve_uid;
 extern int preserve_gid;
 extern int preserve_times;
+extern int dry_run;
 
 /*
   free a sums struct
   */
 static void free_sums(struct sum_struct *s)
 {
@@ -180,12 +182,14 @@
   return s;
 }
 
 
 static void set_perms(char *fname,struct file_struct *file)
 {
+  if (dry_run) return;
+
 #ifdef HAVE_UTIME
   if (preserve_times) {
     struct utimbuf tbuf;  
     tbuf.actime = time(NULL);
     tbuf.modtime = file->modtime;
     if (utime(fname,&tbuf) != 0)
@@ -237,39 +241,39 @@
       if (l > 0) {
 	lnk[l] = 0;
 	if (strcmp(lnk,flist->files[i].link) == 0)
 	  return;
       }
     }
-    unlink(fname);
-    if (symlink(flist->files[i].link,fname) != 0) {
+    if (!dry_run) unlink(fname);
+    if (!dry_run && symlink(flist->files[i].link,fname) != 0) {
       fprintf(stderr,"link %s -> %s : %s\n",
 	      fname,flist->files[i].link,strerror(errno));
     } else {
       if (verbose) 
-	fprintf(stderr,"%s -> %s\n",fname,flist->files[i].link);
+	fprintf(am_server?stderr:stdout,"%s -> %s\n",fname,flist->files[i].link);
     }
     return;
   }
 #endif
 
 #ifdef HAVE_MKNOD
   if (preserve_devices && 
       (S_ISCHR(flist->files[i].mode) || S_ISBLK(flist->files[i].mode))) {
     if (statret != 0 || 
 	st.st_mode != flist->files[i].mode ||
 	st.st_rdev != flist->files[i].dev) {	
-      unlink(fname);
+      if (!dry_run) unlink(fname);
       if (verbose > 2)
 	fprintf(stderr,"mknod(%s,0%o,0x%x)\n",
 		fname,(int)flist->files[i].mode,(int)flist->files[i].dev);
-      if (mknod(fname,flist->files[i].mode,flist->files[i].dev) != 0) {
+      if (!dry_run && mknod(fname,flist->files[i].mode,flist->files[i].dev) != 0) {
 	fprintf(stderr,"mknod %s : %s\n",fname,strerror(errno));
       } else {
 	if (verbose)
-	  fprintf(stderr,"%s\n",fname);
+	  fprintf(am_server?stderr:stdout,"%s\n",fname);
 	set_perms(fname,&flist->files[i]);
       }
     }
     return;
   }
 #endif
@@ -279,13 +283,13 @@
     return;
   }
 
   if (statret == -1) {
     if (errno == ENOENT) {
       write_int(f_out,i);
-      send_sums(NULL,f_out);
+      if (!dry_run) send_sums(NULL,f_out);
     } else {
       if (verbose > 1)
 	fprintf(stderr,"recv_generator failed to open %s\n",fname);
     }
     return;
   }
@@ -311,12 +315,17 @@
 	 always_checksum && memcmp(sum,flist->files[i].sum,SUM_LENGTH) == 0)))) {
     if (verbose > 1)
       fprintf(stderr,"%s is uptodate\n",fname);
     return;
   }
 
+  if (dry_run) {
+    write_int(f_out,i);
+    return;
+  }
+
   /* open the file */  
   fd = open(fname,O_RDONLY);
 
   if (fd == -1) {
     fprintf(stderr,"failed to open %s : %s\n",fname,strerror(errno));
     return;
@@ -416,12 +425,18 @@
 
       fname = flist->files[i].name;
 
       if (local_name)
 	fname = local_name;
 
+      if (dry_run) {
+	if (!am_server && verbose)
+	  printf("%s\n",fname);
+	continue;
+      }
+
       if (verbose > 2)
 	fprintf(stderr,"recv_files(%s)\n",fname);
 
       /* open the file */  
       fd1 = open(fname,O_RDONLY|O_CREAT,flist->files[i].mode);
 
@@ -456,14 +471,14 @@
       sprintf(fnametmp,"%s.XXXXXX",fname);
       if (NULL == mktemp(fnametmp)) 
 	return -1;
       fd2 = open(fnametmp,O_WRONLY|O_CREAT,st.st_mode);
       if (fd2 == -1) return -1;
 
-      if (verbose)
-	fprintf(stderr,"%s\n",fname);
+      if (!am_server && verbose)
+	printf("%s\n",fname);
 
       /* recv file data */
       receive_data(f_in,buf,fd2);
 
       close(fd1);
       close(fd2);
@@ -523,12 +538,19 @@
       }
       strcat(fname,flist->files[i].name);
 
       if (verbose > 2) 
 	fprintf(stderr,"send_files(%d,%s)\n",i,fname);
 
+      if (dry_run) {	
+	if (!am_server && verbose)
+	  printf("%s\n",fname);
+	write_int(f_out,i);
+	continue;
+      }
+
       fd = open(fname,O_RDONLY);
       if (fd == -1) {
 	fprintf(stderr,"send_files failed to open %s: %s\n",
 		fname,strerror(errno));
 	return -1;
       }
@@ -557,12 +579,15 @@
       write_int(f_out,s->count);
       write_int(f_out,s->n);
       write_int(f_out,s->remainder);
 
       if (verbose > 2)
 	fprintf(stderr,"calling match_sums %s\n",fname);
+
+      if (!am_server && verbose)
+	printf("%s\n",fname);
       
       match_sums(f_out,s,buf,st.st_size);
       write_flush(f_out);
       
       unmap_file(buf,st.st_size);
       close(fd);
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-0.2/rsync.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-0.3/rsync.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-0.2/rsync.h	1996-06-16 12:53:31.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-0.3/rsync.h	1996-06-16 14:49:16.000000000 +0800
@@ -21,13 +21,13 @@
 #define RSYNC_RSH_ENV "RSYNC_RSH"
 #define RSYNC_RSH "rsh"
 #define RSYNC_NAME "rsync"
 #define BACKUP_SUFFIX "~"
 
 /* update this if you make incompatible changes */
-#define PROTOCOL_VERSION 7
+#define PROTOCOL_VERSION 8
 
 #include "config.h"
 
 #include <sys/types.h>
 #ifdef HAVE_UNISTD_H
 #include <unistd.h>
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-0.2/version.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-0.3/version.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-0.2/version.h	1996-06-16 12:56:32.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-0.3/version.h	1996-06-16 15:52:17.000000000 +0800
@@ -1 +1 @@
-#define VERSION "0.2"
+#define VERSION "0.3"
