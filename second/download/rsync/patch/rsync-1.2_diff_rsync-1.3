diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-1.2/flist.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-1.3/flist.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-1.2/flist.c	1996-06-21 20:21:06.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-1.3/flist.c	1996-06-26 21:43:42.000000000 +0800
@@ -68,41 +68,155 @@
 
 
 static void send_directory(int f,struct file_list *flist,char *dir);
 
 static char *flist_dir = NULL;
 
+#define FILE_VALID 1
+#define SAME_MODE (1<<1)
+#define SAME_DEV (1<<2)
+#define SAME_UID (1<<3)
+#define SAME_GID (1<<4)
+#define SAME_DIR (1<<5)
+
 static void send_file_entry(struct file_struct *file,int f)
 {
+  unsigned char flags;
+  static mode_t last_mode=0;
+  static dev_t last_dev=0;
+  static uid_t last_uid=0;
+  static gid_t last_gid=0;
+  static char lastdir[MAXPATHLEN]="";
+  char *p=NULL;
+
   if (f == -1) return;
 
-  write_int(f,strlen(file->name));
-  write_buf(f,file->name,strlen(file->name));
+  if (!file) {
+    write_byte(f,0);
+    return;
+  }
+
+  flags = FILE_VALID;
+
+  if (file->mode == last_mode) flags |= SAME_MODE;
+  if (file->dev == last_dev) flags |= SAME_DEV;
+  if (file->uid == last_uid) flags |= SAME_UID;
+  if (file->gid == last_gid) flags |= SAME_GID;
+    
+  if (strncmp(file->name,lastdir,strlen(lastdir)) == 0) {
+    flags |= SAME_DIR;
+    p = file->name + strlen(lastdir);
+  } else {
+    p = file->name;
+  }
+
+  write_byte(f,flags);
+  if (flags & SAME_DIR)
+    write_byte(f,strlen(p));
+  else
+    write_int(f,strlen(p));
+  write_buf(f,p,strlen(p));
   write_int(f,(int)file->modtime);
   write_int(f,(int)file->length);
-  write_int(f,(int)file->mode);
-  if (preserve_uid)
+  if (!(flags & SAME_MODE))
+    write_int(f,(int)file->mode);
+  if (preserve_uid && !(flags & SAME_UID))
     write_int(f,(int)file->uid);
-  if (preserve_gid)
+  if (preserve_gid && !(flags & SAME_GID))
     write_int(f,(int)file->gid);
-  if (preserve_devices) {
-    if (verbose > 2)
-      fprintf(stderr,"dev=0x%x\n",(int)file->dev);
+  if (preserve_devices && IS_DEVICE(file->mode) && !(flags & SAME_DEV))
     write_int(f,(int)file->dev);
-  }
 
 #if SUPPORT_LINKS
   if (preserve_links && S_ISLNK(file->mode)) {
     write_int(f,strlen(file->link));
     write_buf(f,file->link,strlen(file->link));
   }
 #endif
 
   if (always_checksum) {
     write_buf(f,file->sum,SUM_LENGTH);
   }       
+
+  last_mode = file->mode;
+  last_dev = file->dev;
+  last_uid = file->uid;
+  last_gid = file->gid;
+  p = strrchr(file->name,'/');
+  if (p) {
+    int l = (int)(p - file->name) + 1;
+    strncpy(lastdir,file->name,l);
+    lastdir[l] = 0;
+  } else {
+    strcpy(lastdir,"");
+  }
+}
+
+
+
+static void receive_file_entry(struct file_struct *file,
+			       unsigned char flags,int f)
+{
+  static mode_t last_mode=0;
+  static dev_t last_dev=0;
+  static uid_t last_uid=0;
+  static gid_t last_gid=0;
+  static char lastdir[MAXPATHLEN]="";
+  char *p=NULL;
+  int l1,l2;
+
+  if (flags & SAME_DIR) {
+    l1 = read_byte(f);
+    l2 = strlen(lastdir);
+  } else {
+    l1 = read_int(f);
+    l2 = 0;
+  }
+
+  file->name = (char *)malloc(l1+l2+1);
+  if (!file->name) out_of_memory("receive_file_entry");
+
+  strncpy(file->name,lastdir,l2);
+  read_buf(f,file->name+l2,l1);
+  file->name[l1+l2] = 0;
+
+  file->modtime = (time_t)read_int(f);
+  file->length = (off_t)read_int(f);
+  file->mode = (flags & SAME_MODE) ? last_mode : (mode_t)read_int(f);
+  if (preserve_uid)
+    file->uid = (flags & SAME_UID) ? last_uid : (uid_t)read_int(f);
+  if (preserve_gid)
+    file->gid = (flags & SAME_GID) ? last_gid : (gid_t)read_int(f);
+  if (preserve_devices && IS_DEVICE(file->mode))
+    file->dev = (flags & SAME_DEV) ? last_dev : (dev_t)read_int(f);
+
+#if SUPPORT_LINKS
+  if (preserve_links && S_ISLNK(file->mode)) {
+    int l = read_int(f);
+    file->link = (char *)malloc(l+1);
+    if (!file->link) out_of_memory("receive_file_entry");
+    read_buf(f,file->link,l);
+    file->link[l] = 0;
+  }
+#endif
+  
+  if (always_checksum)
+    read_buf(f,file->sum,SUM_LENGTH);
+  
+  last_mode = file->mode;
+  last_dev = file->dev;
+  last_uid = file->uid;
+  last_gid = file->gid;
+  p = strrchr(file->name,'/');
+  if (p) {
+    int l = (int)(p - file->name) + 1;
+    strncpy(lastdir,file->name,l);
+    lastdir[l] = 0;
+  } else {
+    strcpy(lastdir,"");
+  }
 }
 
 
 static struct file_struct *make_file(int recurse,char *fname)
 {
   static struct file_struct file;
@@ -320,13 +434,13 @@
     if (one_file_system)
       set_filesystem(fname);
     send_file_name(f,flist,recurse,fname);
   }
 
   if (f != -1) {
-    write_int(f,0);
+    send_file_entry(NULL,f);
     write_flush(f);
   }
 
   clean_flist(flist);
 
   if (verbose && recurse)
@@ -335,14 +449,14 @@
   return flist;
 }
 
 
 struct file_list *recv_file_list(int f)
 {
-  int l;
   struct file_list *flist;
+  unsigned char flags;
 
   if (verbose > 2)
     fprintf(stderr,"recv_file_list starting\n");
 
   flist = (struct file_list *)malloc(sizeof(flist[0]));
   if (!flist)
@@ -353,51 +467,25 @@
   flist->files = (struct file_struct *)malloc(sizeof(flist->files[0])*
 					      flist->malloced);
   if (!flist->files)
     goto oom;
 
 
-  for (l=read_int(f); l; l=read_int(f)) {
+  for (flags=read_byte(f); flags; flags=read_byte(f)) {
     int i = flist->count;
 
     if (i >= flist->malloced) {
       flist->malloced += 100;
       flist->files =(struct file_struct *)realloc(flist->files,
 						  sizeof(flist->files[0])*
 						  flist->malloced);
       if (!flist->files)
 	goto oom;
     }
 
-    flist->files[i].name = (char *)malloc(l+1);
-    if (!flist->files[i].name) 
-      goto oom;
-
-    read_buf(f,flist->files[i].name,l);
-    flist->files[i].name[l] = 0;
-    flist->files[i].modtime = (time_t)read_int(f);
-    flist->files[i].length = (off_t)read_int(f);
-    flist->files[i].mode = (mode_t)read_int(f);
-    if (preserve_uid)
-      flist->files[i].uid = (uid_t)read_int(f);
-    if (preserve_gid)
-      flist->files[i].gid = (gid_t)read_int(f);
-    if (preserve_devices)
-      flist->files[i].dev = (dev_t)read_int(f);
-
-#if SUPPORT_LINKS
-    if (preserve_links && S_ISLNK(flist->files[i].mode)) {
-      int l = read_int(f);
-      flist->files[i].link = (char *)malloc(l+1);
-      read_buf(f,flist->files[i].link,l);
-      flist->files[i].link[l] = 0;
-    }
-#endif
-
-    if (always_checksum)
-      read_buf(f,flist->files[i].sum,SUM_LENGTH);
+    receive_file_entry(&flist->files[i],flags,f);
 
     if (S_ISREG(flist->files[i].mode))
       total_size += flist->files[i].length;
 
     flist->count++;
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-1.2/io.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-1.3/io.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-1.2/io.c	1996-06-26 09:28:09.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-1.3/io.c	1996-06-26 21:37:31.000000000 +0800
@@ -133,12 +133,18 @@
       fprintf(stderr,"Error reading %d bytes : %s\n",len,strerror(errno));
     exit(1);
   }
   total_read += len;
 }
 
+unsigned char read_byte(int f)
+{
+  char c;
+  read_buf(f,&c,1);
+  return (unsigned char)c;
+}
 
 int read_write(int fd_in,int fd_out,int size)
 {
   static char *buf=NULL;
   static int bufsize = WRITE_BLOCK_SIZE;
   int total=0;
@@ -160,12 +166,13 @@
 
 
 static int writefd(int fd,char *buf,int len)
 {
   int total = 0;
   fd_set fds;
+  struct timeval tv;
 
   if (buffer_f_in == -1) 
     return write(fd,buf,len);
 
   while (total < len) {
     int ret = write(fd,buf+total,len-total);
@@ -177,13 +184,15 @@
 
     if (ret == -1) {
       read_check(buffer_f_in);
 
       FD_ZERO(&fds);
       FD_SET(fd,&fds);
-      select(16,NULL,&fds,NULL,NULL);
+      tv.tv_sec = BLOCKING_TIMEOUT;
+      tv.tv_usec = 0;
+      select(16,NULL,&fds,NULL,&tv);
     } else {
       total += ret;
     }
   }
 
   return total;
@@ -209,11 +218,16 @@
     exit(1);
   }
   total_written += len;
 }
 
 
+void write_byte(int f,unsigned char c)
+{
+  write_buf(f,(char *)&c,1);
+}
+
 void write_flush(int f)
 {
 }
 
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-1.2/main.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-1.3/main.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-1.2/main.c	1996-06-25 15:30:08.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-1.3/main.c	1996-06-26 21:37:31.000000000 +0800
@@ -579,13 +579,13 @@
 
     if (dry_run)
       verbose = MAX(verbose,1);
 
     if (am_server) {
       int version = read_int(STDIN_FILENO);
-      if (version != PROTOCOL_VERSION) {
+      if (version < MIN_PROTOCOL_VERSION) {
 	fprintf(stderr,"protocol version mismatch %d %d\n",
 		version,PROTOCOL_VERSION);
 	exit(1);
       }
       write_int(STDOUT_FILENO,PROTOCOL_VERSION);
       write_flush(STDOUT_FILENO);
@@ -650,25 +650,26 @@
 	      shell_user?shell_user:"",
 	      shell_path?shell_path:"");
     }
     
     signal(SIGCHLD,SIG_IGN);
     signal(SIGINT,SIGNAL_CAST sig_int);
+    signal(SIGPIPE,SIGNAL_CAST sig_int);
 
     if (!sender && argc != 1) {
       usage(stderr);
       exit(1);
     }
 
     pid = do_cmd(shell_cmd,shell_machine,shell_user,shell_path,&f_in,&f_out);
 
     write_int(f_out,PROTOCOL_VERSION);
     write_flush(f_out);
     {
       int version = read_int(f_in);
-      if (version != PROTOCOL_VERSION) {
+      if (version < MIN_PROTOCOL_VERSION) {
 	fprintf(stderr,"protocol version mismatch\n");
 	exit(1);
       }	
     }
 
     if (verbose > 3) 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-1.2/proto.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-1.3/proto.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-1.2/proto.h	1996-06-26 09:29:29.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-1.3/proto.h	1996-06-26 21:37:31.000000000 +0800
@@ -17,15 +17,17 @@
 void clean_flist(struct file_list *flist);
 int write_total(void);
 int read_total(void);
 void setup_nonblocking(int f_in,int f_out);
 int read_int(int f);
 void read_buf(int f,char *buf,int len);
+unsigned char read_byte(int f);
 int read_write(int fd_in,int fd_out,int size);
 void write_int(int f,int x);
 void write_buf(int f,char *buf,int len);
+void write_byte(int f,unsigned char c);
 void write_flush(int f);
 int do_cmd(char *cmd,char *machine,char *user,char *path,int *f_in,int *f_out);
 void do_server_sender(int argc,char *argv[]);
 void do_server_recv(int argc,char *argv[]);
 int main(int argc,char *argv[]);
 void match_sums(int f,struct sum_struct *s,char *buf,off_t len);
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-1.2/rsync.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-1.3/rsync.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-1.2/rsync.c	1996-06-26 09:27:35.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-1.3/rsync.c	1996-06-26 21:37:31.000000000 +0800
@@ -283,14 +283,13 @@
     }
     return;
   }
 #endif
 
 #ifdef HAVE_MKNOD
-  if (preserve_devices && 
-      (S_ISCHR(flist->files[i].mode) || S_ISBLK(flist->files[i].mode))) {
+  if (preserve_devices && IS_DEVICE(flist->files[i].mode)) {
     if (statret != 0 || 
 	st.st_mode != flist->files[i].mode ||
 	st.st_rdev != flist->files[i].dev) {	
       if (!dry_run) unlink(fname);
       if (verbose > 2)
 	fprintf(stderr,"mknod(%s,0%o,0x%x)\n",
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-1.2/rsync.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-1.3/rsync.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-1.2/rsync.h	1996-06-26 08:59:42.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-1.3/rsync.h	1996-06-26 21:37:32.000000000 +0800
@@ -21,17 +21,20 @@
 #define RSYNC_RSH_ENV "RSYNC_RSH"
 #define RSYNC_RSH "rsh"
 #define RSYNC_NAME "rsync"
 #define BACKUP_SUFFIX "~"
 
 /* update this if you make incompatible changes */
-#define PROTOCOL_VERSION 9
+#define PROTOCOL_VERSION 10
+#define MIN_PROTOCOL_VERSION 10
 
 /* block size to write files in */
 #define WRITE_BLOCK_SIZE (32*1024)
 
+#define BLOCKING_TIMEOUT 10
+
 #include "config.h"
 
 #include <sys/types.h>
 #ifdef HAVE_UNISTD_H
 #include <unistd.h>
 #endif
@@ -237,6 +240,8 @@
 
 #define SIGNAL_CAST (RETSIGTYPE (*)())
 
 #ifndef EWOULDBLOCK
 #define EWOULDBLOCK EAGAIN
 #endif
+
+#define IS_DEVICE(mode) (S_ISCHR(mode) || S_ISBLK(mode))
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-1.2/version.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-1.3/version.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-1.2/version.h	1996-06-26 09:43:54.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-1.3/version.h	1996-06-26 11:21:10.000000000 +0800
@@ -1 +1 @@
-#define VERSION "1.2"
+#define VERSION "1.3"
